[
    {
        "content": "<p>Hi all,</p>\n<p>I am trying to give a higher-order function a congruence rule so that it can be used in recursive functions. I give the congruence rule the <code>[fundef_cong]</code> attribute, as stated in the function definition tutorial. However, the next function definition that follows the congruence lemma, no matter what it is, always fails with a \"CYCLES\" exception.</p>\n<p>The code below is a minimal example.</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">theory</span><span class=\"w\"> </span><span class=\"n\">Cong</span>\n<span class=\"w\">  </span><span class=\"kp\">imports</span><span class=\"w\"> </span><span class=\"n\">Main</span>\n<span class=\"k\">begin</span>\n\n<span class=\"k\">primrec</span><span class=\"w\"> </span><span class=\"n\">option_fold</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"('a ⇒ 'b) ⇒ 'b ⇒ 'a option ⇒ 'b\"</span>\n<span class=\"w\">  </span><span class=\"kp\">where</span>\n<span class=\"w\">    </span><span class=\"s\">\"option_fold f e (Some x) = f x\"</span>\n<span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"s\">\"option_fold f e None = e\"</span>\n\n<span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">option_fold_cong</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">fundef_cong</span><span class=\"o\">]:</span>\n<span class=\"w\">  </span><span class=\"s\">\"(¬ Option.is_none x ⟹ ¬ Option.is_none y ⟹ f (the x) = g (the y)) ⟹</span>\n<span class=\"s\">   (Option.is_none x ⟹ ¬ Option.is_none y ⟹ a = g (the y)) ⟹</span>\n<span class=\"s\">   (¬ Option.is_none x ⟹ Option.is_none y ⟹ f (the x) = b) ⟹</span>\n<span class=\"s\">   (Option.is_none x ⟹ Option.is_none y ⟹ a = b) ⟹</span>\n<span class=\"s\">   option_fold f a x = option_fold g b y\"</span>\n<span class=\"w\">  </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">metis</span><span class=\"w\"> </span><span class=\"n\">Option.is_none_def</span><span class=\"w\"> </span><span class=\"n\">option.collapse</span><span class=\"w\"> </span><span class=\"n\">option_fold.simps</span><span class=\"o\">(</span><span class=\"n\">1</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">option_fold.simps</span><span class=\"o\">(</span><span class=\"n\">2</span><span class=\"o\">))</span>\n\n<span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"nat ⇒ nat\"</span><span class=\"w\"> </span><span class=\"kp\">where</span>\n<span class=\"w\">  </span><span class=\"s\">\"foo x = x\"</span>\n\n<span class=\"k\">end</span>\n</code></pre></div>\n<p>Isabelle reports <code>exception CYCLES [[1, 0, 1]] raised (line 298 of \"General/graph.ML\")</code> on the line where <code>fun foo</code> is defined. The signature and the body of this function do not seem to matter. I could have some other content after the congruence lemma and the first function after it always fails with the same exception.</p>\n<p>I am not sure what this exception means. Is it an internal error or some restrictions on <code>[fundef_cong]</code>? Or am I defining the congruence rule in the correct way? I found the Isabelle manual to be very brief about this part.</p>\n<p>Any help would be appreciated. Thanks!</p>",
        "id": 449277687,
        "sender_full_name": "Yushuo Xiao",
        "timestamp": 1720175400
    },
    {
        "content": "<p>The congruence rule has the wrong format. I think it should look like this:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">option_fold_cong</span><span class=\"o\">[</span><span class=\"n\">fundef_cong</span><span class=\"o\">]:</span><span class=\"w\"> </span><span class=\"s\">\"x = y ⟹ a = b ⟹ (⋀a. a ∈ set_option x ⟹ f a = g a) ⟹ option_fold f a x = option_fold g b y\"</span>\n<span class=\"w\">  </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">metis</span><span class=\"w\"> </span><span class=\"n\">elem_set</span><span class=\"w\"> </span><span class=\"n\">not_Some_eq</span><span class=\"w\"> </span><span class=\"n\">option_fold.simps</span><span class=\"o\">(</span><span class=\"n\">1</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">option_fold.simps</span><span class=\"o\">(</span><span class=\"n\">2</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 449287260,
        "sender_full_name": "Jan van Brügge",
        "timestamp": 1720178167
    },
    {
        "content": "<p>That at least does not throw an error for the <code>foo</code> function</p>",
        "id": 449287310,
        "sender_full_name": "Jan van Brügge",
        "timestamp": 1720178191
    },
    {
        "content": "<p>Thank you! It helps a lot. The lemma also makes the termination proof work. I also had the feeling that the congruence rule should be in certain format, after once I changed another congruence rule in some way to make it work. So where can I get more information on the exact format requirement for congruence rules? Currently I'm just writing something randomly and hope it works.</p>",
        "id": 449290057,
        "sender_full_name": "Yushuo Xiao",
        "timestamp": 1720179310
    },
    {
        "content": "<p>The higher-order functions usually work on some sort of container, so the fundef_cong rule needs to make sure that if the functions agree on the contents of the container, the behavior for the whole container is the same. You can look at the theorems for standard datatypes, e.g. list.map_cong</p>",
        "id": 449656613,
        "sender_full_name": "Jan van Brügge",
        "timestamp": 1720357832
    },
    {
        "content": "<p>Thanks! I see. I will have a look at the congruence rules for standard datatypes and try to figure out the pattern.</p>",
        "id": 450904982,
        "sender_full_name": "Yushuo Xiao",
        "timestamp": 1720771896
    },
    {
        "content": "<p>In general if you don't have to use primrec, I would always just use <code>fun</code> even for simple functions as it correctly adds all the relevant theorems</p>",
        "id": 450909775,
        "sender_full_name": "Jan van Brügge",
        "timestamp": 1720773257
    },
    {
        "content": "<p>I see. Thanks for the extra tip!</p>",
        "id": 451443451,
        "sender_full_name": "Yushuo Xiao",
        "timestamp": 1721032816
    }
]