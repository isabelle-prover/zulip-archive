[
    {
        "content": "<p>I'm wondering how typed sets in <code>HOL.Set</code> relate to classical axiomatic set theory, in terms of expressive power, typed vs. untyped, choice of axioms, etc.</p>",
        "id": 440718390,
        "sender_full_name": "Javier Diaz",
        "timestamp": 1716735054
    },
    {
        "content": "<p>Sets in Isabelle/HOL are always subsets of a given type. In some sense they're really just semantic sugar for Boolean-valued predicates. <a href=\"https://isabelle.in.tum.de/library/HOL/HOL/Set.html\">You can see this in the definition of the <code>set</code> type constructor:</a></p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">typedecl</span><span class=\"w\"> </span><span class=\"n n-Type\">'a</span><span class=\"w\"> </span><span class=\"n\">set</span>\n\n<span class=\"k\">axiomatization</span><span class=\"w\"> </span><span class=\"n\">Collect</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"('a ⇒ bool) ⇒ 'a set\"</span><span class=\"w\"> </span><span class=\"n\">―</span><span class=\"w\"> </span><span class=\"s\">‹comprehension›</span>\n<span class=\"w\">  </span><span class=\"kp\">and</span><span class=\"w\"> </span><span class=\"n\">member</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"'a ⇒ 'a set ⇒ bool\"</span><span class=\"w\"> </span><span class=\"n\">―</span><span class=\"w\"> </span><span class=\"s\">‹membership›</span>\n<span class=\"w\">  </span><span class=\"kp\">where</span><span class=\"w\"> </span><span class=\"n\">mem_Collect_eq</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">iff</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">code_unfold</span><span class=\"o\">]:</span><span class=\"w\"> </span><span class=\"s\">\"member a (Collect P) = P a\"</span>\n<span class=\"w\">    </span><span class=\"kp\">and</span><span class=\"w\"> </span><span class=\"n\">Collect_mem_eq</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]:</span><span class=\"w\"> </span><span class=\"s\">\"Collect (λx. member x A) = A\"</span>\n</code></pre></div>\n<p>This is saying that the only way to specify a set of elements of type <code>'a</code> is to specify a predicate of type <code>'a ⇒ bool</code>, and the only way to 'probe' a set is to ask what its members are. As such, the axiomatization in <code>HOL/Set.thy</code> isn't going to tell you all that much about the expressiveness of Isabelle/HOL in general.</p>\n<p>I'm not sure if I'm really answering your question, but in terms of standard classical mathematical logic terminology, types (especially non-dependent types like those in Isabelle/HOL) are roughly analogous to sorts in something like many-sorted first-order logic. In particular, there is no global quantification; quantifiers are always bound to a given type. Since Isabelle/HOL doesn't have any dependent types and the type forming operations are bounded roughly by the size of a finite number of iterated power sets, the consistency strength and expressive power of Isabelle/HOL should be comparable to bounded Zermelo set theory also known as Mac Lane set theory (i.e., Zermelo set theory with separation only for bounded formulas). This puts it on par with the common theory of elementary toposes. So this means that you shouldn't be able to prove things like Borel determinacy in it without extra assumptions. Since Isabelle/HOL can reason about unspecified types (with type variables like <code>'a</code>), it should be relatively straightforward to write down assumptions to the effect of '<code>'a</code> encodes a Grothendieck universe,' which would in principle allow you to prove things that need higher consistency strength conditionally, although I could imagine the specifics of something like this being a pain.</p>",
        "id": 441765104,
        "sender_full_name": "James Hanson",
        "timestamp": 1717176715
    },
    {
        "content": "<p>Note that back when I started doing Isabelle/HOL (around 2011), <code>'a set</code> was actually a type synonym for <code>'a ⇒ bool</code>, but at some point it was changed back to a type of its own. So it really is just a type copy of <code>'a ⇒ bool</code>, in a sense.</p>",
        "id": 443302958,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1717768355
    }
]