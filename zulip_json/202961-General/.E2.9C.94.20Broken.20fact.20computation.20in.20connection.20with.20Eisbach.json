[
    {
        "content": "<p>Consider the following contrived example of a lemma:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span>\n  <span class=\"kp\">assumes</span> <span class=\"s\">\"Suc n &lt; Suc m\"</span>\n  <span class=\"kp\">shows</span> <span class=\"s\">\"n &lt; m\"</span>\n  <span class=\"k\">by</span> <span class=\"o\">(</span><span class=\"n\">simp</span> <span class=\"n\">only</span><span class=\"o\">:</span> <span class=\"n\">Suc_less_SucD</span> <span class=\"o\">[</span><span class=\"n\">OF</span> <span class=\"n\">assms</span><span class=\"o\">])</span>\n</code></pre></div>\n<p>The proof is accepted, which is to be expected, as the fact <code>Suc_less_SucD [OF assms]</code> is precisely what is to be proved.</p>\n<p>Now let’s make this a bit more complicated, using some Eisbach:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span>\n  <span class=\"kp\">assumes</span> <span class=\"s\">\"Suc n &lt; Suc m\"</span>\n  <span class=\"kp\">shows</span> <span class=\"s\">\"n &lt; m\"</span>\n  <span class=\"k\">by</span> <span class=\"o\">(</span><span class=\"n\">match</span> <span class=\"n\">assms</span> <span class=\"kp\">in</span> <span class=\"n\">assumption</span><span class=\"o\">:</span> <span class=\"o\">_</span> <span class=\"err\">⇒</span> <span class=\"err\">‹</span><span class=\"n\">simp</span> <span class=\"n\">only</span><span class=\"o\">:</span> <span class=\"n\">Suc_less_SucD</span> <span class=\"o\">[</span><span class=\"n\">OF</span> <span class=\"n\">assumption</span><span class=\"o\">]</span><span class=\"err\">›</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>The proof in this example fails. When debugging with <code>simp_trace</code>, I can see that the rewrite rule added to the simplifier is not <code>n &lt; m ≡ True</code> but <code>Suc n &lt; Suc m ≡ True</code>. Apparently, the computation of the fact <code>Suc_less_SucD [OF assumption]</code> goes completely wrong, and <code>assumption</code> itself is returned as the result.</p>\n<p>If I replace <code>simp only: Suc_less_SucD [OF assumption]</code> by <code>insert Suc_less_SucD [OF assumption]</code>, the proof is accepted again. So it seems the above-mentioned behavior has to do with particularities of <code>simp</code>.</p>\n<p>Is this behavior due to a bug? It quite looks to me as if it is, but I can actually not even image what kind of bug should cause picking a fact behind <code>OF</code> as the result of a fact computation and furthermore doing so only in certain situations.</p>",
        "id": 260607945,
        "sender_full_name": "Wolfgang Jeltsch",
        "timestamp": 1636336524
    },
    {
        "content": "<p>Since nobody seems to know an answer here: I think this  is something technical that someone on the mailing list could answer.</p>",
        "id": 261119870,
        "sender_full_name": "Kevin Kappelmann",
        "timestamp": 1636629137
    },
    {
        "content": "<p>I’ll report this as a bug to the developers.</p>",
        "id": 262248618,
        "sender_full_name": "Wolfgang Jeltsch",
        "timestamp": 1637512156
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"423655\">Wolfgang Jeltsch</span> has marked this topic as resolved.</p>",
        "id": 262248683,
        "sender_full_name": "Notification Bot",
        "timestamp": 1637512209
    }
]