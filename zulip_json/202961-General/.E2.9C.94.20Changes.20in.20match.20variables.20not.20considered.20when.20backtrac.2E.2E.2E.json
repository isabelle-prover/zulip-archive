[
    {
        "content": "<p>I’ve found some odd behavior of <code>match</code> in connection with backtracking.</p>\n<p>Consider the following complex approach of proving that <code>True</code> is true:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">triviality</span><span class=\"o\">:</span>\n  <span class=\"kp\">shows</span> <span class=\"n\">True</span>\n  <span class=\"k\">by</span> <span class=\"o\">(</span>\n    <span class=\"n\">match</span> <span class=\"n\">TrueE</span> <span class=\"n\">FalseE</span> <span class=\"kp\">in</span> <span class=\"n\">elimination</span><span class=\"o\">:</span> <span class=\"s\">\"P ⟹ _\"</span> <span class=\"kp\">for</span> <span class=\"n\">P</span> <span class=\"err\">⇒</span> <span class=\"err\">‹</span>\n      <span class=\"n\">match</span> <span class=\"n\">TrueI</span> <span class=\"kp\">in</span> <span class=\"n\">P</span> <span class=\"err\">⇒</span> <span class=\"err\">‹</span><span class=\"n\">succeed</span><span class=\"err\">›</span><span class=\"o\">,</span>\n      <span class=\"n\">insert</span> <span class=\"n\">elimination</span> <span class=\"o\">[</span><span class=\"n\">OF</span> <span class=\"n\">TrueI</span> <span class=\"n\">TrueI</span><span class=\"o\">]</span>\n    <span class=\"err\">›</span>\n  <span class=\"o\">)</span>\n</code></pre></div>\n<p>The outer <code>match</code> selects <code>TrueE</code>, resulting in <code>elimination</code> being <code>True ⟹ ?P ⟹ ?P</code> and <code>P</code> being <code>True</code>. The inner <code>match</code> succeeds, since <code>P</code> is <code>True</code>. Finally, <code>elimination [OF TrueI TrueI]</code> is inserted, which is <code>True</code>.</p>\n<p>Now consider the following variant of the above code, which has an invocation of <code>fail</code> added:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">triviality</span><span class=\"o\">:</span>\n  <span class=\"kp\">shows</span> <span class=\"n\">True</span>\n  <span class=\"k\">by</span> <span class=\"o\">(</span>\n    <span class=\"n\">match</span> <span class=\"n\">TrueE</span> <span class=\"n\">FalseE</span> <span class=\"kp\">in</span> <span class=\"n\">elimination</span><span class=\"o\">:</span> <span class=\"s\">\"P ⟹ _\"</span> <span class=\"kp\">for</span> <span class=\"n\">P</span> <span class=\"err\">⇒</span> <span class=\"err\">‹</span>\n      <span class=\"n\">match</span> <span class=\"n\">TrueI</span> <span class=\"kp\">in</span> <span class=\"n\">P</span> <span class=\"err\">⇒</span> <span class=\"err\">‹</span><span class=\"n\">succeed</span><span class=\"err\">›</span><span class=\"o\">,</span>\n      <span class=\"n\">insert</span> <span class=\"n\">elimination</span> <span class=\"o\">[</span><span class=\"n\">OF</span> <span class=\"n\">TrueI</span> <span class=\"n\">TrueI</span><span class=\"o\">]</span>\n    <span class=\"err\">›</span><span class=\"o\">,</span>\n    <span class=\"n\">fail</span>\n  <span class=\"o\">)</span>\n</code></pre></div>\n<p>After the activities described above, <code>fail</code> triggers backtracking. The outer <code>match</code> selects <code>FalseE</code>, resulting in <code>elimination</code> being <code>False ⟹ ?P</code> and <code>P</code> being <code>False</code>. The inner <code>match</code> should now fail, causing the whole proof to fail.</p>\n<p>However, that is not what happens. Instead, I get the following output:</p>\n<div class=\"codehilite\"><pre><span></span><code>exception THM 0 raised (line 309 of &quot;drule.ML&quot;):\n  OF: no unifiers\n  False ⟹ ?P7\n  True\n  True\n</code></pre></div>\n<p>Apparently, what happens is the following: After backtracking, the inner <code>match</code> is not re-executed, perhaps because it doesn’t depend on <code>elimination</code> and its dependence on <code>P</code> erroneously isn’t taken into account. As a result, Isabelle attempts to execute <code>insert elimination [OF TrueI TrueI]</code>, which has to fail as <code>elimination</code> has <code>False</code> as its sole premise.</p>\n<p>Is this really a bug or have I overlooked something?</p>",
        "id": 260604562,
        "sender_full_name": "Wolfgang Jeltsch",
        "timestamp": 1636331260
    },
    {
        "content": "<p>I am not an expert in that area, but it also seems strange to me. I think this is something that you should post on the <a href=\"https://lists.cam.ac.uk/mailman/listinfo/cl-isabelle-users\">mailing list</a></p>",
        "id": 261119733,
        "sender_full_name": "Kevin Kappelmann",
        "timestamp": 1636629055
    },
    {
        "content": "<p>I’ll report this as a bug to the developers.</p>",
        "id": 262248699,
        "sender_full_name": "Wolfgang Jeltsch",
        "timestamp": 1637512230
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"423655\">Wolfgang Jeltsch</span> has marked this topic as unresolved.</p>",
        "id": 262248712,
        "sender_full_name": "Notification Bot",
        "timestamp": 1637512249
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"423655\">Wolfgang Jeltsch</span> has marked this topic as resolved.</p>",
        "id": 262248716,
        "sender_full_name": "Notification Bot",
        "timestamp": 1637512259
    }
]