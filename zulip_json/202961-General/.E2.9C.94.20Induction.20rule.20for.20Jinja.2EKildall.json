[
    {
        "content": "<p>I am using the AFP entry <a href=\"https://www.isa-afp.org/browser_info/devel/HOL/Jinja/Kildall.html\">Kildall</a> to obtain a fixpoint by iteration. Now I have proved <code>fixpoint = step fixpoint</code>. I also proved completeness for the obtained algorithm but am struggling with showing soundness, due to missing an induction rule.</p>\n<p>The fixpoint is over <code>replicate N False</code>, ie. I want to prove something like <code>i &lt; N ⟹ fixpoint ! i ⟹ P i</code> - however I am struggling a lot. Is there a good way, or do I need to redifine my function?</p>\n<p>I can expand <code>fixpoint</code> to <code>next fixpoint</code> and then from this I can obtain some variables <code>?a0. P' a0</code> with <code>!x : set a0. fixpoint ! x</code> but I cannot tie the loop, the proof would recurse indefinitely (but due to using Kildall I know it shouldn't).</p>\n<p>Is there some neat trick to make my life easier and exploit that the function is well-founded and the inter-dependencies/ordering of my <code>i</code> don't matter as it is a fixpoint?</p>",
        "id": 273242488,
        "sender_full_name": "cai",
        "timestamp": 1645802613
    },
    {
        "content": "<p>I want to keep this as general as possible, because in the end I will be using Kildall multiple times for different functions (always bit-vectors/<code>bool list</code>) and it seems that generalizing this from the biginning should save me a bunch of proof.</p>",
        "id": 273242732,
        "sender_full_name": "cai",
        "timestamp": 1645802717
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"476996\">cai</span> has marked this topic as resolved.</p>",
        "id": 275045121,
        "sender_full_name": "Notification Bot",
        "timestamp": 1647039042
    }
]