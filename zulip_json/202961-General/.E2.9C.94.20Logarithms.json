[
    {
        "content": "<p>What logarithm functions are provided by standard sessions like <code>HOL</code>, <code>HOL-Library</code>, and <code>HOL-Analysis</code>? There’s <code>log</code>, but I can’t even get <code>ln</code>.</p>\n<p>And, more generally, how could I find this out myself? Search by browsing through <code>https://isabelle.in.tum.de/library/HOL/index.html</code> needs quite some good guessing to be efficient, and automated search with <code>https://search.isabelle.in.tum.de/</code> shows 920 hits when entering <code>log</code>.</p>",
        "id": 262948304,
        "sender_full_name": "Wolfgang Jeltsch",
        "timestamp": 1638133700
    },
    {
        "content": "<p>On <a href=\"http://search.isabelle.in.tum.de\">search.isabelle.in.tum.de</a> you should use the filters to narrow down the search results (cf the examples page on the website)<br>\nIn your case, you could start with a search for \"semantic entitty name\" of \"log\" or \"ln\": <a href=\"https://search.isabelle.in.tum.de/#search/default_Isabelle2021_AFP2021?page=%5B%5D&amp;q=%7B%22fields%22%3A%5B%7B%22field%22%3A%22Name%22%2C%22match%22%3A%22OneOf%22%2C%22terms%22%3A%5B%22ln%22%2C%22log%22%5D%7D%5D%2C%22facets%22%3A%7B%22Kind%22%3A%5B%22Constant%22%5D%7D%7D\">https://search.isabelle.in.tum.de/#search/default_Isabelle2021_AFP2021?page=%5B%5D&amp;q=%7B%22fields%22%3A%5B%7B%22field%22%3A%22Name%22%2C%22match%22%3A%22OneOf%22%2C%22terms%22%3A%5B%22ln%22%2C%22log%22%5D%7D%5D%2C%22facets%22%3A%7B%22Kind%22%3A%5B%22Constant%22%5D%7D%7D</a></p>",
        "id": 262949119,
        "sender_full_name": "Kevin Kappelmann",
        "timestamp": 1638134758
    },
    {
        "content": "<p>and if that's still too much, further refine based on the type, removing one of \"ln\" or \"log\" etc.</p>",
        "id": 262949169,
        "sender_full_name": "Kevin Kappelmann",
        "timestamp": 1638134800
    },
    {
        "content": "<p>or maybe a concept-based search on <a href=\"https://behemoth.cl.cam.ac.uk/search/\">serapis</a> works better for you if you have some further context.</p>",
        "id": 262949251,
        "sender_full_name": "Kevin Kappelmann",
        "timestamp": 1638134895
    },
    {
        "content": "<p>Thanks a lot. That was of great help.</p>",
        "id": 262951453,
        "sender_full_name": "Wolfgang Jeltsch",
        "timestamp": 1638137824
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"423655\">Wolfgang Jeltsch</span> has marked this topic as resolved.</p>",
        "id": 262951456,
        "sender_full_name": "Notification Bot",
        "timestamp": 1638137828
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"423655\">Wolfgang Jeltsch</span> <a href=\"#narrow/stream/202961-General/topic/.E2.9C.94.20Logarithms/near/262948304\">said</a>:</p>\n<blockquote>\n<p>What logarithm functions are provided by standard sessions like <code>HOL</code>, <code>HOL-Library</code>, and <code>HOL-Analysis</code>? There’s <code>log</code>, but I can’t even get <code>ln</code>.</p>\n<p>And, more generally, how could I find this out myself? Search by browsing through <code>https://isabelle.in.tum.de/library/HOL/index.html</code> needs quite some good guessing to be efficient, and automated search with <code>https://search.isabelle.in.tum.de/</code> shows 920 hits when entering <code>log</code>.</p>\n</blockquote>\n<p>Wait, what do you mean you ‘can't get ln’? The <code>ln</code> function is defined in HOL. The <code>log</code> function is even defined in terms of <code>ln</code>. You just have to remember to import <code>Complex_Main</code> instead of <code>Main</code> if you want to use it. (but if you use HOL-Analysis, that imports <code>Complex_Main</code> anyway).</p>\n<p><code>ln</code> is defined in its own type class <code>ln</code>. There is an instantiation for <code>real</code> where <code>ln x</code> is undefined for non-positive <code>x</code> in the sense that <code>∀x&lt;0. ln x = c</code> for some constant <code>c</code> that we know nothing about. And there is an instantiation for <code>complex</code> in <code>HOL-Analysis</code>, where <code>ln 0</code> is undefined and otherwise <code>ln z</code> is the principal branch of the logarithm, i.e. the unique <code>w</code> such that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>e</mi><mi>w</mi></msup><mo>=</mo><mi>z</mi></mrow><annotation encoding=\"application/x-tex\">e^w = z</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6644em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">e</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.02691em;\">w</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mtext>Im</mtext><mo stretchy=\"false\">(</mo><mi>w</mi><mo stretchy=\"false\">)</mo><mo>∈</mo><mo stretchy=\"false\">(</mo><mo>−</mo><mi>π</mi><mo separator=\"true\">,</mo><mi>π</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">\\text{Im}(w)\\in(-\\pi,\\pi]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord text\"><span class=\"mord\">Im</span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">w</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">−</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">π</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">π</span><span class=\"mclose\">]</span></span></span></span>.</p>",
        "id": 262979886,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1638175820
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232736\">Manuel Eberl</span> <a href=\"#narrow/stream/202961-General/topic/.E2.9C.94.20Logarithms/near/262979886\">said</a>:</p>\n<blockquote>\n<p>Wait, what do you mean you ‘can't get <code>ln</code>’?</p>\n</blockquote>\n<p>I got this wrong. For checking whether a constant of a certain name is available, I typically write <code>term ⟨name⟩</code>, and when Isabelle shows <code>⟨name⟩ :: 'a</code>, I know it’s not available (of course, this isn’t entirely safe, as in particular <code>undefined</code> does have type <code>'a</code>). In the case of <code>ln</code>, Isabelle showed me <code>ln :: 'a ⇒ 'a</code>, and I just saw the type variable and immediately thought <code>ln</code> doesn’t exist. A problem here is that Isabelle doesn’t show a type like <code>'a::⟨some_class⟩ ⇒ 'a</code> in such cases.</p>",
        "id": 263088804,
        "sender_full_name": "Wolfgang Jeltsch",
        "timestamp": 1638233270
    },
    {
        "content": "<p>You could enable <code>show_sorts</code> for that: <a href=\"https://isabelle.in.tum.de/doc/isar-ref.pdf#attribute.show-sorts\">https://isabelle.in.tum.de/doc/isar-ref.pdf#attribute.show-sorts</a></p>",
        "id": 263111807,
        "sender_full_name": "Kevin Kappelmann",
        "timestamp": 1638260116
    },
    {
        "content": "<p>There is also <code>find_consts</code>. And if the variable is shown in black (instead of blue), then it is not free so you know that it is already defined (you can then also Ctrl+Click to go to the definition).</p>",
        "id": 263119252,
        "sender_full_name": "Lukas Stevens",
        "timestamp": 1638264717
    },
    {
        "content": "<p>Well, <code>find_consts</code> isn’t about showing sorts for given constants, but about finding constants by type, right? How would you find <code>ln</code> by type? There are zillions of functions that have the same type, and maybe you would even have to know its most general type, which would require to know a fair bit of the class structure of the standard library.</p>\n<p>The constant being shown in black vs. blue is, of course, a viable solution.</p>",
        "id": 263163793,
        "sender_full_name": "Wolfgang Jeltsch",
        "timestamp": 1638287352
    },
    {
        "content": "<p>You can find <code>ln</code> by name with <code>find_consts</code>: </p>\n<div class=\"codehilite\"><pre><span></span><code>find_consts name: &quot;ln&quot;\n</code></pre></div>\n<p>Of course you have to have it imported somewhere for that to work.</p>",
        "id": 263164331,
        "sender_full_name": "Fabian Huch",
        "timestamp": 1638287591
    },
    {
        "content": "<p>Sure. However, that was not my point. My point was that, as I assumed, <code>find_consts</code> could search by type only. I just didn’t know about the <code>name:</code> argument. Thanks for showing me that.</p>",
        "id": 263167251,
        "sender_full_name": "Wolfgang Jeltsch",
        "timestamp": 1638288646
    }
]