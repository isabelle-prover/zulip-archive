[
    {
        "content": "<p>Hi, I'm having a problem with a large project, where every couple of seconds, there's a large ML cleanup that halts the entire JEdit interface for a few seconds. Here's a condensed code example that causes the problem (Isabelle 2021):</p>\n<div class=\"codehilite\"><pre><span></span><code>theory MWE\n\nimports &quot;HOL-Library.Word&quot;\n\nbegin\n\nfun numbits&#39; :: &quot;nat ⇒ nat&quot; where\n  &quot;numbits&#39; 0 = 0&quot;\n| &quot;numbits&#39; n = 1 + numbits&#39; (n div 2)&quot;\n\n(* Ceiling of log2 a *)\ndefinition numbits :: &quot;&#39;a::len word ⇒ nat&quot; where\n  &quot;numbits x = numbits&#39; ((unat x)-1)&quot;\n\nlemma\n  assumes m_nonzero: &quot;m &gt; 1&quot;\n  shows md_less&#39;: &quot;2 ^ (2 * numbits m) div unat (m :: 128 word) &lt; 2 ^ 129&quot;\nproof -\n  show ?thesis sorry\nqed\n\n\nend\n</code></pre></div>\n<p>on loading this file into JEdit, very often the ML memory viewer in the bottom right corner shows \"ML Cleanup\" for a few seconds, during which the JEdit interface becomes unresponsive. It looks like this example also uses a very disproportionate amount of memory as well. I was encountering very similar problems in Isabelle 2020. Any ideas for helping this?</p>",
        "id": 263007923,
        "sender_full_name": "Matthew Torrence",
        "timestamp": 1638192580
    },
    {
        "content": "<p>How much memory do you have? In any case, performance-related issues like this are also good to mention on the mailing list, since this is something Makarius can answer best, and he does not use Zulip.</p>",
        "id": 263008113,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1638192668
    },
    {
        "content": "<p>a lot. It seems to be capping out at around 4-5gb, and triggering the ML cleanup thing</p>",
        "id": 263008253,
        "sender_full_name": "Matthew Torrence",
        "timestamp": 1638192725
    },
    {
        "content": "<p>but I have plenty of ram on this device</p>",
        "id": 263008279,
        "sender_full_name": "Matthew Torrence",
        "timestamp": 1638192736
    },
    {
        "content": "<p>I'll also mention this in the mailing list, thanks</p>",
        "id": 263008558,
        "sender_full_name": "Matthew Torrence",
        "timestamp": 1638192873
    },
    {
        "content": "<p>Hm, I have a 32 GiB RAM machine (Arch Linux) and your MWE goes through fine within a few seconds with no responsiveness issues at all. I sometimes get into situations like you describe with very large developments that have been open a long time, especially when I jump back and forth a lot so that a lot of material has to get rebuilt. Of when there's a proof method running amok with lots of backtracking. But never on a tiny example like this.</p>\n<p>Perhaps you ought to post this on the mailing list. Ideally also check whether it also happens with the latest release candidates. And describe exactly what happens when you run your MWE (i.e. when does it start freezing up).</p>",
        "id": 263008917,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1638193030
    },
    {
        "content": "<p>sounds good, I'll try all of that. It's definitely consistent for me, whenever I load the file in JEdit, it sits at &lt;100mb used as it runs all the dependencies, then it hops up to 4gb and triggers a cleanup as soon as it tries to run md_less'. I also have a colleague that was experiencing very similar problems, I'll try to have them run this MWE as well</p>",
        "id": 263009271,
        "sender_full_name": "Matthew Torrence",
        "timestamp": 1638193203
    },
    {
        "content": "<p>question, is it possible to disabelle auto-quickcheck for one specific lemma? Perhaps that could be causing an issue?</p>",
        "id": 263009349,
        "sender_full_name": "Matthew Torrence",
        "timestamp": 1638193244
    },
    {
        "content": "<p>sent a message to the mailing list as well</p>",
        "id": 263009771,
        "sender_full_name": "Matthew Torrence",
        "timestamp": 1638193534
    },
    {
        "content": "<p>Also to clarify, it's not hanging in purple on any proof methods or definitions, the interface itself is getting hung up. It's very bizzare</p>",
        "id": 263010065,
        "sender_full_name": "Matthew Torrence",
        "timestamp": 1638193693
    },
    {
        "content": "<p>I don't know about disabling auto-quickcheck for a single lemma, but you can definitely turn it of globally in Preferences -&gt; Plugin Options -&gt; Isabelle -&gt; General. Maybe that would be helpful to test.</p>",
        "id": 263010473,
        "sender_full_name": "Alex Weisberger",
        "timestamp": 1638193948
    },
    {
        "content": "<p>OK, so disabling auto quickcheck seems to solve the problem. Very interesting</p>",
        "id": 263010890,
        "sender_full_name": "Matthew Torrence",
        "timestamp": 1638194172
    },
    {
        "content": "<p>I'm going to try running the larger project without quickcheck...</p>",
        "id": 263010981,
        "sender_full_name": "Matthew Torrence",
        "timestamp": 1638194223
    },
    {
        "content": "<p>Yup. Problem goes away</p>",
        "id": 263011023,
        "sender_full_name": "Matthew Torrence",
        "timestamp": 1638194252
    },
    {
        "content": "<p>Did you install Isabelle from the official Tarball? Or using some kind of package manager?</p>",
        "id": 263011034,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1638194261
    },
    {
        "content": "<p>From the official tarball</p>",
        "id": 263011061,
        "sender_full_name": "Matthew Torrence",
        "timestamp": 1638194274
    },
    {
        "content": "<p>Hm, no idea then. What happens if you run quickcheck manually on that example?</p>",
        "id": 263011167,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1638194302
    },
    {
        "content": "<p>It immediately triggers an ML cleanup haha</p>",
        "id": 263011236,
        "sender_full_name": "Matthew Torrence",
        "timestamp": 1638194342
    },
    {
        "content": "<p>(and it balloons the memory usage of ML)</p>",
        "id": 263011259,
        "sender_full_name": "Matthew Torrence",
        "timestamp": 1638194359
    },
    {
        "content": "<p>Oh yeah I see the problem.</p>",
        "id": 263011277,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1638194365
    },
    {
        "content": "<p>If I run quickcheck manually, it consumes loads of memory and freezes up.</p>",
        "id": 263011308,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1638194381
    },
    {
        "content": "<p>if I delete the Quickcheck call, it catches its breath after a while though.</p>",
        "id": 263011347,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1638194399
    },
    {
        "content": "<p>Yeah, even after that, for me it is using up tons of memory. If I never trigger quickcheck it seems to be OK though. I wonder if there's a way to tell Isabelle not to quickcheck specific things...</p>",
        "id": 263011562,
        "sender_full_name": "Matthew Torrence",
        "timestamp": 1638194453
    },
    {
        "content": "<p>Okay I see the problem.</p>",
        "id": 263011947,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1638194635
    },
    {
        "content": "<p>The problem is that your example includes the expression <code>2 ^ 129 :: nat</code>. Since you haven't loaded <code>HOL-Library.Code_Target_Numeral</code>, arithmetic on <code>nat</code> and <code>int</code> is code-generated using successor arithmetic, i.e. <code>data nat = Zero | Suc nat</code>. That is, of course, very inefficient, especially if you have something like <code>2^129</code>.</p>",
        "id": 263012075,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1638194693
    },
    {
        "content": "<p>If you do <code>value \"2 ^ 129 :: nat\"</code>, you get basically the same effect.</p>",
        "id": 263012111,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1638194710
    },
    {
        "content": "<p>Oh! I've never heard of <code>HOL-Library.Code_Target_Numeral</code>, I've been looking for that kind of thing for a while</p>",
        "id": 263012200,
        "sender_full_name": "Matthew Torrence",
        "timestamp": 1638194751
    },
    {
        "content": "<p>Yeah it basically just sets up the code generator in such a way that arithmetic on <code>int</code> and <code>nat</code> uses whatever arbitrary-precision arithmetic the target language offers.</p>",
        "id": 263012308,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1638194787
    },
    {
        "content": "<p>So in ML and Haskell this will boil down to just using <code>IntInf.int</code> or <code>Integer</code>, both of which use GMP. On Scala it's probably <code>BigInteger</code>.</p>",
        "id": 263012344,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1638194812
    },
    {
        "content": "<p>To be completely honest, I just assumed it did that by default</p>",
        "id": 263012357,
        "sender_full_name": "Matthew Torrence",
        "timestamp": 1638194820
    },
    {
        "content": "<p>Perhaps it ought to. I guess it increases the trusted code base (both the target-language arbitrary-precision arithmetic implementation and the translation rules in the code generator).</p>",
        "id": 263012413,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1638194859
    },
    {
        "content": "<p>But it's practically unusable without it.</p>",
        "id": 263012432,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1638194869
    },
    {
        "content": "<p>(fun fact, I think Fabian Immler did find a bug in the Poly/ML integer implementation once)</p>",
        "id": 263012540,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1638194906
    },
    {
        "content": "<p>Wow. Makes sense then. Thanks so much for your help!</p>",
        "id": 263012578,
        "sender_full_name": "Matthew Torrence",
        "timestamp": 1638194928
    },
    {
        "content": "<p>In any case, do feel free to send this to the mailing list. Perhaps someone has an idea of how to address this properly.</p>",
        "id": 263012594,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1638194935
    },
    {
        "content": "<p>Andreas found a bug in machine words in a similar setting</p>",
        "id": 263012607,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1638194945
    },
    {
        "content": "<p>Under normal circumstances, auto quickcheck should probably be killed very quickly when it doesn't find anything, but I suppose that in this case perhaps it goes so crazy that whatever is supposed to kill it doesn't get a chance to do so.</p>",
        "id": 263012665,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1638194988
    },
    {
        "content": "<p>or perhaps auto quickcheck could use native ints in situations like this, since it isn't really trusted that much anyway</p>",
        "id": 263013084,
        "sender_full_name": "Matthew Torrence",
        "timestamp": 1638195202
    },
    {
        "content": "<p>Well that doesn't really solve the problem in general.</p>",
        "id": 263013320,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1638195322
    },
    {
        "content": "<p>The general problem is that it is basically impossible to predict how many resources the evaluation of generated code will take in advance, and if it takes an absurd amount (like here) it might degrade the usability of the rest of the system significantly.</p>",
        "id": 263013436,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1638195366
    },
    {
        "content": "<p>You could e.g. have something like <code>replicate (2 ^ 30) True = replicate (2 ^ 30) True</code> where you will also run into trouble.</p>",
        "id": 263013901,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1638195601
    },
    {
        "content": "<p>(strangely, this behaves differently when importing <code>Code_Target_Numeral</code>, it just makes quickcheck crash with an \"out of memory\". I wonder why)</p>",
        "id": 263013995,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1638195623
    },
    {
        "content": "<p>Congratulations, you just solved an ongoing mystery on the mailing list involving Lars Hupel. They ran into the same problem as you but did not realise that Quickcheck was the culprit. (I linked this thread there)</p>",
        "id": 263033541,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1638203929
    },
    {
        "content": "<p>Matthew already mailed it, but that was indeed some good sleuthing!</p>",
        "id": 263034105,
        "sender_full_name": "Lars Hupel",
        "timestamp": 1638204193
    },
    {
        "content": "<p>I mixed up the mail threads, but I'm glad to see a mystery solved!</p>",
        "id": 263034349,
        "sender_full_name": "Matthew Torrence",
        "timestamp": 1638204307
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"460617\">Matthew Torrence</span> has marked this topic as resolved.</p>",
        "id": 263573823,
        "sender_full_name": "Notification Bot",
        "timestamp": 1638535410
    }
]