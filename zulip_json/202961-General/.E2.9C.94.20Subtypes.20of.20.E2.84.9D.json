[
    {
        "content": "<p>Does the Isabelle standard library (the <code>HOL</code> session or one of the other session that are part of the Isabelle distribution) contain definitions of the type of all non-negative reals and the type of all positive reals?</p>",
        "id": 262602801,
        "sender_full_name": "Wolfgang Jeltsch",
        "timestamp": 1637767671
    },
    {
        "content": "<p>Maybe here's something you can use?<br>\n<a href=\"https://search.isabelle.in.tum.de/#search/default_Isabelle2021_AFP2021?page=%5B%5D&amp;q=%7B%22term%22%3A%22%E2%84%9D%22%2C%22fields%22%3A%5B%7B%22field%22%3A%22Name%22%2C%22match%22%3A%22OneOf%22%2C%22terms%22%3A%5B%22nonneg%22%5D%7D%5D%2C%22facets%22%3A%7B%22Kind%22%3A%5B%22Constant%22%5D%7D%7D\">https://search.isabelle.in.tum.de/#search/default_Isabelle2021_AFP2021?page=%5B%5D&amp;q=%7B%22term%22%3A%22%E2%84%9D%22%2C%22fields%22%3A%5B%7B%22field%22%3A%22Name%22%2C%22match%22%3A%22OneOf%22%2C%22terms%22%3A%5B%22nonneg%22%5D%7D%5D%2C%22facets%22%3A%7B%22Kind%22%3A%5B%22Constant%22%5D%7D%7D</a></p>",
        "id": 262604002,
        "sender_full_name": "Kevin Kappelmann",
        "timestamp": 1637768227
    },
    {
        "content": "<p>Thanks a lot for the hint. I didn’t know about this search website. Is there a link to it on the Isabelle website?</p>",
        "id": 262629402,
        "sender_full_name": "Wolfgang Jeltsch",
        "timestamp": 1637780811
    },
    {
        "content": "<p>There's no link on the isabelle download page. Here's a website of useful links for isabelle: <a href=\"http://isabelle.systems\">isabelle.systems</a><br>\nmaybe there's something else for you to discover :)</p>",
        "id": 262646356,
        "sender_full_name": "Kevin Kappelmann",
        "timestamp": 1637792178
    },
    {
        "content": "<p>As far as I know, there is only the set of non-negative reals (written as $\\mathbb{R}_{\\geq 0}$) and the type of extended non-negative reals <code>ennreal</code> (which is very important in measure theory).</p>\n<p>Subtype definitions like that are kind of tedious because of all the type coercions you need and lemmas you have to re-prove for the new type. It's usually better to just use <code>real</code> and carry around the non-negativity information separately.</p>",
        "id": 262683218,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1637832349
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"233154\">Kevin Kappelmann</span> <a href=\"#narrow/stream/202961-General/topic/Subtypes.20of.20.E2.84.9D/near/262646356\">said</a>:</p>\n<blockquote>\n<p>There's no link on the isabelle download page. Here's a website of useful links for isabelle: <a href=\"http://isabelle.systems\">isabelle.systems</a></p>\n</blockquote>\n<p>Interesting. Is this a collection of links to Isabelle-related services that aren’t considered “official” enough to be mentioned on the Isabelle website? So far, I’ve always turned to the Isabelle website when looking for Isabelle-related things. I’ve never expected there to be another, more information-rich website on Isabelle.</p>",
        "id": 262697216,
        "sender_full_name": "Wolfgang Jeltsch",
        "timestamp": 1637841515
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232736\">Manuel Eberl</span> <a href=\"#narrow/stream/202961-General/topic/Subtypes.20of.20.E2.84.9D/near/262683218\">said</a>:</p>\n<blockquote>\n<p>Subtype definitions like that are kind of tedious because of all the type coercions you need and lemmas you have to re-prove for the new type. It's usually better to just use <code>real</code> and carry around the non-negativity information separately.</p>\n</blockquote>\n<p>I see. However, in my context, which is testing a particular proof method I’ve developed, this is not an option, as such extra conditions cannot be handled by said proof method. So I’ll go for a custom subtype.</p>",
        "id": 262697560,
        "sender_full_name": "Wolfgang Jeltsch",
        "timestamp": 1637841732
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"423655\">Wolfgang Jeltsch</span> <a href=\"#narrow/stream/202961-General/topic/Subtypes.20of.20.E2.84.9D/near/262697560\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"232736\">Manuel Eberl</span> <a href=\"#narrow/stream/202961-General/topic/Subtypes.20of.20.E2.84.9D/near/262683218\">said</a>:</p>\n<blockquote>\n<p>Subtype definitions like that are kind of tedious because of all the type coercions you need and lemmas you have to re-prove for the new type. It's usually better to just use <code>real</code> and carry around the non-negativity information separately.</p>\n</blockquote>\n<p>I see. However, in my context, which is testing a particular proof method I’ve developed, this is not an option, as such extra conditions cannot be handled by said proof method. So I’ll go for a custom subtype.</p>\n</blockquote>\n<p>What we would really need here is a more automated lifting package that lets us lift all the theorems and typeclass instances we want more automatically.</p>",
        "id": 262699215,
        "sender_full_name": "Lukas Stevens",
        "timestamp": 1637842846
    },
    {
        "content": "<p>Something like deriving via in Haskell.</p>",
        "id": 262699221,
        "sender_full_name": "Lukas Stevens",
        "timestamp": 1637842854
    },
    {
        "content": "<p>This would also be convenient for the prod type headache where if you import one instance of linorder for prod, you will never be able to get rid of it again.</p>",
        "id": 262699294,
        "sender_full_name": "Lukas Stevens",
        "timestamp": 1637842921
    },
    {
        "content": "<p>Well, there <em>is</em> <code>lift_definition</code> and <code>transfer</code> that sort of do this. But you still have to say what definitions and theorems you want, and sometimes there are still things to prove. I don't think it can be automated fully.</p>",
        "id": 262699673,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1637843173
    },
    {
        "content": "<p><code>deriving</code> in Haskell is great, but it doesn't have to prove theorems.</p>",
        "id": 262699679,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1637843181
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"423655\">Wolfgang Jeltsch</span> <a href=\"#narrow/stream/202961-General/topic/Subtypes.20of.20.E2.84.9D/near/262697216\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"233154\">Kevin Kappelmann</span> <a href=\"#narrow/stream/202961-General/topic/Subtypes.20of.20.E2.84.9D/near/262646356\">said</a>:</p>\n<blockquote>\n<p>There's no link on the isabelle download page. Here's a website of useful links for isabelle: <a href=\"http://isabelle.systems\">isabelle.systems</a></p>\n</blockquote>\n<p>Interesting. Is this a collection of links to Isabelle-related services that aren’t considered “official” enough to be mentioned on the Isabelle website? So far, I’ve always turned to the Isabelle website when looking for Isabelle-related things. I’ve never expected there to be another, more information-rich website on Isabelle.</p>\n</blockquote>\n<p>Yes, if I recall correctly, <span class=\"user-mention\" data-user-id=\"234192\">@Lars Hupel</span> made that website for precisely that reason.</p>",
        "id": 262699739,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1637843233
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232736\">Manuel Eberl</span> <a href=\"#narrow/stream/202961-General/topic/Subtypes.20of.20.E2.84.9D/near/262699673\">said</a>:</p>\n<blockquote>\n<p>Well, there <em>is</em> <code>lift_definition</code> and <code>transfer</code> that sort of do this. But you still have to say what definitions and theorems you want, and sometimes there are still things to prove. I don't think it can be automated fully.</p>\n</blockquote>\n<p>True. I was thinking of the case where you do a type copy but here we have a proper subtype. The proper subtype wouldn't have additive inverses any more for example.</p>",
        "id": 262699873,
        "sender_full_name": "Lukas Stevens",
        "timestamp": 1637843325
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"423655\">Wolfgang Jeltsch</span> has marked this topic as resolved.</p>",
        "id": 262948131,
        "sender_full_name": "Notification Bot",
        "timestamp": 1638133535
    }
]