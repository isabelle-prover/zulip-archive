[
    {
        "content": "<p>Consider the following example of a nested subtype:</p>\n<div class=\"codehilite\"><pre><span></span><code>typedef &#39;a A = &quot;{a :: &#39;a fset . True}&quot;\n  by simp\n\nsetup_lifting type_definition_A\n\ntypedef &#39;a B = &quot;{a :: &#39;a A. True}&quot;\n  by simp\n\nsetup_lifting type_definition_B\n</code></pre></div>\n<p>Here, the second <code>setup_lifting</code> of type <code>B</code> highlights, the missing relator of <code>A</code>.</p>\n<p>Why does <code>'a A</code> does not automatically have a relator?</p>\n<p>From my understanding, a relator in this simple case would be</p>\n<div class=\"codehilite\"><pre><span></span><code>lift_definition rel_A :: &quot;(&#39;a ⇒ &#39;b ⇒ bool) ⇒ &#39;a A  ⇒ &#39;b A ⇒ bool&quot; is\n&quot;rel_fset&quot; .\n</code></pre></div>\n<p>But what properties do I have to prove, to make it an \"official\" relator for the lifting package?</p>",
        "id": 253563876,
        "sender_full_name": "Robert Soeldner",
        "timestamp": 1631790676
    },
    {
        "content": "<p>The datatypes tutorial solved my issue. <code>lift_bnf</code> was the missing piece.</p>",
        "id": 253882659,
        "sender_full_name": "Robert Soeldner",
        "timestamp": 1631986573
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"403618\">Robert Soeldner</span> has marked this topic as resolved.</p>",
        "id": 253882661,
        "sender_full_name": "Notification Bot",
        "timestamp": 1631986576
    }
]