[
    {
        "content": "<p>I'm working on some proofs of state machine simulation, and came across a surprising rule application failure. The actual lemma isn't so important here, but here it is for completeness:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">gen_sim</span><span class=\"o\">:</span>\n<span class=\"w\">  </span><span class=\"kp\">fixes</span><span class=\"w\"> </span><span class=\"n\">I</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"('e, 's) proc\"</span><span class=\"w\"> </span><span class=\"kp\">and</span><span class=\"w\"> </span><span class=\"n\">M</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"('e, 's) proc\"</span>\n<span class=\"w\">  </span><span class=\"kp\">assumes</span><span class=\"w\"> </span><span class=\"s\">\"case (I e s, M e (af s)) of (Some i, Some m) ⇒ af i = m | _ ⇒ False\"</span>\n<span class=\"w\">  </span><span class=\"kp\">shows</span><span class=\"w\"> </span><span class=\"s\">\"simulates af I M e s\"</span>\n<span class=\"w\">  </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">assms</span>\n<span class=\"w\">  </span><span class=\"k\">unfolding</span><span class=\"w\"> </span><span class=\"n\">simulates_def</span>\n<span class=\"w\">  </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">simp</span>\n</code></pre></div>\n<p>Note that the conclusion is: <code>shows \"simulates af I M e s\"</code>.</p>\n<p>The following rule application fails:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span>\n<span class=\"w\">  </span><span class=\"kp\">shows</span><span class=\"w\"> </span><span class=\"s\">\"simulates af (compose_local_actions am_i) (compose_local_actions am_m) e s\"</span>\n<span class=\"w\">  </span><span class=\"kp\">apply</span><span class=\"o\">(</span><span class=\"n\">rule</span><span class=\"w\"> </span><span class=\"n\">gen_sim</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Shouldn't the following unifications happen when applying this rule?</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"n\">I</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">&gt;</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">compose_local_actions</span><span class=\"w\"> </span><span class=\"n\">am_i</span><span class=\"o\">)</span>\n<span class=\"n\">M</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">&gt;</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">compose_local_actions</span><span class=\"w\"> </span><span class=\"n\">am_m</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Instead, I get the dreaded: <code>Failed to apply proof method⌂:</code>.</p>",
        "id": 392015392,
        "sender_full_name": "Alex Weisberger",
        "timestamp": 1695169309
    },
    {
        "content": "<p>It seems like this is because of the <code>fixes</code> definitions. The types of the <code>(compose_local_actions ..)</code> terms don't necessarily unify to the same type. The rule application works fine I remove <code>fixes</code> from the lemma.</p>",
        "id": 392016844,
        "sender_full_name": "Alex Weisberger",
        "timestamp": 1695170053
    },
    {
        "content": "<p>If the fixes causes the issues, then it is a type problem and your type specification is too weak</p>",
        "id": 392044037,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1695186046
    },
    {
        "content": "<p>I would try </p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"n\">supply</span><span class=\"w\"> </span><span class=\"o\">[[</span><span class=\"n\">unify_trace_failure</span><span class=\"o\">]]</span>\n<span class=\"kp\">apply</span><span class=\"o\">(</span><span class=\"n\">rule</span><span class=\"w\"> </span><span class=\"n\">gen_sim</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>to get an error message</p>",
        "id": 392044087,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1695186069
    }
]