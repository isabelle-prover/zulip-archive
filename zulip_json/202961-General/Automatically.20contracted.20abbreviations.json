[
    {
        "content": "<p>I have the theorem <code>x &lt; y ⟷ x ≤ y ∧ ¬ (x = y)</code>. The term of that theorem (Thm.prop_of) gets automatically changed to  <code>x &lt; y ⟷ x ≤ y ∧ x ≠ y</code>. This term is used as a key in a <code>Termtab</code>. Later, I manually build a term that is of the first form, but because of the contracted abbreviation it is not found in the table. Is there any way to prevent that contraction?</p>",
        "id": 204210098,
        "sender_full_name": "Lukas Stevens",
        "timestamp": 1594994994
    },
    {
        "content": "<p>Is it possible that the pretty-printing is just fooling me?</p>",
        "id": 204210727,
        "sender_full_name": "Lukas Stevens",
        "timestamp": 1594995332
    },
    {
        "content": "<p>How do you get hold of these terms in the first place?</p>",
        "id": 204212344,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1594996143
    },
    {
        "content": "<p>Ah, the problem is that the type does not match apparently.</p>",
        "id": 204212365,
        "sender_full_name": "Lukas Stevens",
        "timestamp": 1594996153
    },
    {
        "content": "<p>It is somewhat unusual to have a term where abbreviations have not yet been unfolded.</p>",
        "id": 204212369,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1594996156
    },
    {
        "content": "<p>yeah that seems more likely</p>",
        "id": 204212383,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1594996163
    },
    {
        "content": "<p>It was confusing because I printed several terms with a TERM exception and one term had the abbreviation contracted while the other term didn't.</p>",
        "id": 204212948,
        "sender_full_name": "Lukas Stevens",
        "timestamp": 1594996416
    },
    {
        "content": "<p>btw you can also print terms with Pretty.writeln/Syntax.pretty_term.</p>",
        "id": 204214813,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1594997347
    },
    {
        "content": "<p>or, even more easily, convert them to a cterm and do @{print}</p>",
        "id": 204214839,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1594997363
    },
    {
        "content": "<p>of course that might sometimes obscure some things, so in those cases you can just @{print} the term directly to see what it looks like in ML</p>",
        "id": 204217752,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1594998706
    },
    {
        "content": "<p>but that is /very/ verbose, so I'd only do that for very small terms</p>",
        "id": 204217775,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1594998721
    }
]