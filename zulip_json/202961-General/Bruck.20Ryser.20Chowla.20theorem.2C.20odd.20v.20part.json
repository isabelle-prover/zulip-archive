[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"252023\">@Chelsea Edmonds</span>  A question that came up now is in the odd v part of the BRC theorem. I'm trying to use an equation that you got from Stinson's book to prove a single algebraic equation:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">context</span><span class=\"w\"> </span><span class=\"n\">ordered_regular_pairwise_balance</span>\n<span class=\"k\">begin</span>\n\n<span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">brc_equation</span><span class=\"o\">:</span>\n<span class=\"w\">  </span><span class=\"kp\">assumes</span><span class=\"w\"> </span><span class=\"s\">\"x mat v 1\"</span>\n<span class=\"w\">  </span><span class=\"kp\">shows</span><span class=\"w\"> </span><span class=\"s\">\"l2_norm (mat_mult N x) = Λ * (vector_sum x)^2 + (𝗄 - Λ) * l2_norm x\"</span>\n<span class=\"k\">proof</span><span class=\"w\"> </span><span class=\"o\">-</span>\n<span class=\"w\">  </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"s\">\"N * (N⇧T) = Λ ⋅⇩m (J⇩m 𝗏) + (𝗋 - Λ) ⋅⇩m (1⇩m 𝗏)\"</span><span class=\"w\"> </span><span class=\"k\">using</span>\n<span class=\"w\">      </span><span class=\"n\">rpbd_incidence_matrix_cond</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">simp</span>\n<span class=\"w\">  </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"s\">\"(N * (N⇧T)) * x = (Λ ⋅⇩m (J⇩m 𝗏) + (𝗋 - Λ) ⋅⇩m (1⇩m 𝗏)) * x\"</span>\n<span class=\"w\">    </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">simp```</span>\n\n<span class=\"n\">The</span><span class=\"w\"> </span><span class=\"s\">\"then have\"</span><span class=\"w\"> </span><span class=\"n\">part</span><span class=\"w\"> </span><span class=\"kp\">is</span><span class=\"w\"> </span><span class=\"n\">giving</span><span class=\"w\"> </span><span class=\"n\">me</span><span class=\"w\"> </span><span class=\"n\">trouble.</span><span class=\"w\"> </span><span class=\"n\">I</span><span class=\"w\"> </span><span class=\"n\">probably</span><span class=\"w\"> </span><span class=\"n\">am</span><span class=\"w\"> </span><span class=\"n\">not</span><span class=\"w\"> </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">good</span><span class=\"w\"> </span><span class=\"k\">definition</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">vector</span><span class=\"w\"> </span><span class=\"n\">x.</span><span class=\"w\"> </span><span class=\"n\">It's</span><span class=\"w\"> </span><span class=\"n\">giving</span><span class=\"w\"> </span><span class=\"n\">me</span><span class=\"w\"> </span><span class=\"s\">\" incompatible operand type\"</span><span class=\"w\"> </span><span class=\"n\">error.</span><span class=\"w\"> </span><span class=\"n\">Any</span><span class=\"w\"> </span><span class=\"n\">ideas</span><span class=\"w\"> </span><span class=\"n\">as</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">how</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"k\">fix</span><span class=\"w\"> </span><span class=\"n\">this</span><span class=\"o\">?</span><span class=\"w\"> </span><span class=\"n\">I</span><span class=\"w\"> </span><span class=\"n\">want</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">be</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">rational</span><span class=\"w\"> </span><span class=\"n\">vector</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">as</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"k\">proof</span><span class=\"w\"> </span><span class=\"n\">will</span><span class=\"w\"> </span><span class=\"n\">use</span><span class=\"w\"> </span><span class=\"n\">this</span><span class=\"w\"> </span><span class=\"n\">fact</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">find</span><span class=\"w\"> </span><span class=\"n\">an</span><span class=\"w\"> </span><span class=\"n\">integer</span><span class=\"w\"> </span><span class=\"n\">solution</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">an</span><span class=\"w\"> </span><span class=\"n\">equation</span><span class=\"w\"> </span><span class=\"n\">later</span><span class=\"w\"> </span><span class=\"n\">on.</span>\n</code></pre></div>",
        "id": 453829704,
        "sender_full_name": "Craig Alan Feinstein",
        "timestamp": 1721872807
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"736162\">Craig Alan Feinstein</span> <a href=\"#narrow/stream/202961-General/topic/Bruck.20Ryser.20Chowla.20theorem.2C.20odd.20v.20part/near/453829704\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"252023\">Chelsea Edmonds</span>  A question that came up now is in the odd v part of the BRC theorem. I'm trying to use an equation that you got from Stinson's book to prove a single algebraic equation:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">context</span><span class=\"w\"> </span><span class=\"n\">ordered_regular_pairwise_balance</span>\n<span class=\"k\">begin</span>\n\n<span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">brc_equation</span><span class=\"o\">:</span>\n<span class=\"w\">  </span><span class=\"kp\">assumes</span><span class=\"w\"> </span><span class=\"s\">\"x mat v 1\"</span>\n<span class=\"w\">  </span><span class=\"kp\">shows</span><span class=\"w\"> </span><span class=\"s\">\"l2_norm (mat_mult N x) = Λ * (vector_sum x)^2 + (𝗄 - Λ) * l2_norm x\"</span>\n<span class=\"k\">proof</span><span class=\"w\"> </span><span class=\"o\">-</span>\n<span class=\"w\">  </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"s\">\"N * (N⇧T) = Λ ⋅⇩m (J⇩m 𝗏) + (𝗋 - Λ) ⋅⇩m (1⇩m 𝗏)\"</span><span class=\"w\"> </span><span class=\"k\">using</span>\n<span class=\"w\">      </span><span class=\"n\">rpbd_incidence_matrix_cond</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">simp</span>\n<span class=\"w\">  </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"s\">\"(N * (N⇧T)) * x = (Λ ⋅⇩m (J⇩m 𝗏) + (𝗋 - Λ) ⋅⇩m (1⇩m 𝗏)) * x\"</span>\n<span class=\"w\">    </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">simp</span>\n</code></pre></div>\n<p>The \"then have\" part is giving me trouble. I probably am not using a good definition of the vector x. It's giving me \" incompatible operand type\" error. Any ideas as to how to fix this? I want x to be a rational vector, as the proof will use this fact to find an integer solution to an equation later on.</p>\n</blockquote>\n<p>When you get this kind of error, the trick is to always to look at what the detail of the error is where it details the type its expecting vs what it got.  When I copy this into Isabelle, on my end I'm getting a pretty complex function type for x. Which it must be inferring from your assumptions or theorem statement - so look back at how it is used in those and what types the functions/definitions you already used are expecting. Your assumption looks like it is likely the problem here - is it supposed to be x = &lt;some 1-d matrix/vector&gt;? </p>\n<p>Also, are l2_norm, mat_mult and vector_sum all definitions you've defined?  mat_mult in particular I'd expect to have a built in equivalent in the JNF matrix library already, which you should use if so to benefit from all the exisitng lemmas. If x is also supposed to be a vector - the mult_mat_vec definition may do what you want to do and that way you can declare x as a vector to start with.</p>\n<p>Last thing, holding Cntr and hovering over variables in Isabelle is good way to check their type (and if they are defined). For example, <code>𝗄</code> is not defined in an ordered_regular_pairwise_balance context (as it places no restructions on uniform block size), so it comes up as a 'free variable'. Is this supposed to be in a bibd context instead? If so use the ordered_bibd context. You may need to add in the following declaration to establish inheritance (I suspect I missed this one in the original), so you get the Stinson theorem you referred to.</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">sublocale</span><span class=\"w\"> </span><span class=\"n\">ordered_bibd</span><span class=\"w\"> </span><span class=\"n\">⊆</span><span class=\"w\"> </span><span class=\"n\">ordered_regular_pairwise_balance</span><span class=\"w\"> </span><span class=\"n\">𝒱s</span><span class=\"w\"> </span><span class=\"n\">ℬs</span><span class=\"w\"> </span><span class=\"n\">Λ</span><span class=\"w\"> </span><span class=\"n\">𝗋</span>\n<span class=\"w\">  </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">unfold_locales</span>\n</code></pre></div>",
        "id": 453910299,
        "sender_full_name": "Chelsea Edmonds",
        "timestamp": 1721902723
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"252023\">@Chelsea Edmonds</span> that particular lemma that I was and still am working on uses the JNF library, as you had thought. l2_norm, mat_mult, and vector_sum are all in there. I had forgotten where I had gotten them when I wrote yesterday. When I used them for the next line, it worked. However, the next line didn't work. I'm not sure why. There's got to be a better way than this clunky language:</p>\n<div class=\"codehilite\" data-code-language=\"lemma\"><pre><span></span><code>  assumes \"x rat mat v 1\"\n  shows \"l2_norm (mat_mult N x) = \\&lt;Lambda&gt; * (vector_sum x)^2 + (\\&lt;r&gt; - \\&lt;Lambda&gt;) * l2_norm x\"\nproof -\n  have \"N * (N\\&lt;^sup&gt;T) = \\&lt;Lambda&gt; \\&lt;cdot&gt;\\&lt;^sub&gt;m (J\\&lt;^sub&gt;m \\&lt;v&gt;) + (\\&lt;r&gt; - \\&lt;Lambda&gt;) \\&lt;cdot&gt;\\&lt;^sub&gt;m (1\\&lt;^sub&gt;m \\&lt;v&gt;)\" using\n      rpbd_incidence_matrix_cond by simp\n  then have \"mat_mult (N * (N\\&lt;^sup&gt;T)) x =\n             mat_mult (\\&lt;Lambda&gt; \\&lt;cdot&gt;\\&lt;^sub&gt;m (J\\&lt;^sub&gt;m \\&lt;v&gt;) + (\\&lt;r&gt; - \\&lt;Lambda&gt;) \\&lt;cdot&gt;\\&lt;^sub&gt;m (1\\&lt;^sub&gt;m \\&lt;v&gt;)) x\" by simp\n  then have \"mat_mult (transpose_mat x) (mat_mult (N * (N\\&lt;^sup&gt;T)) x) =\n             mat_mult (transpose_mat x) (mat_mult (\\&lt;Lambda&gt; \\&lt;cdot&gt;\\&lt;^sub&gt;m (J\\&lt;^sub&gt;m \\&lt;v&gt;) + (\\&lt;r&gt; - \\&lt;Lambda&gt;) \\&lt;cdot&gt;\\&lt;^sub&gt;m (1\\&lt;^sub&gt;m \\&lt;v&gt;)) x)\"\n    by simp?\n</code></pre></div>",
        "id": 454145628,
        "sender_full_name": "Craig Alan Feinstein",
        "timestamp": 1721960364
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"252023\">@Chelsea Edmonds</span>  I had realized before you wrote here that there was a problem with the fact that Stinson's theorem comes under a different locale than ordered_sym_bibd and knew I would need to fix this problem somehow; otherwise, I would have no way to prove the theorem using your work. I just tried your way that you gave me above using the sublocale, but Isabelle didn't accept it. I'll email you everything I have so far and you can tell me what you had in mind. </p>\n<p>Also, the Bruck Ryser Theorem proof for even v doesn't hold for nonsymmetric BIBDs because the determinant of N is used in the proof and N must be square. However, I haven't found a reason why it has to be a symmetric BIBD for odd v. Maybe I missed the reason. In any case, I'm going to assume symmetric BIBD to make things easy for now.</p>",
        "id": 454147024,
        "sender_full_name": "Craig Alan Feinstein",
        "timestamp": 1721961003
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"736162\">Craig Alan Feinstein</span> <a href=\"#narrow/stream/202961-General/topic/Bruck.20Ryser.20Chowla.20theorem.2C.20odd.20v.20part/near/454145628\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"252023\">Chelsea Edmonds</span> that particular lemma that I was and still am working on uses the JNF library, as you had thought. l2_norm, mat_mult, and vector_sum are all in there. I had forgotten where I had gotten them when I wrote yesterday. When I used them for the next line, it worked. However, the next line didn't work. I'm not sure why. There's got to be a better way than this clunky language:</p>\n<p><div class=\"codehilite\" data-code-language=\"lemma\"><pre><span></span><code>  assumes \"x rat mat v 1\"\n  shows \"l2_norm (mat_mult N x) = \\&lt;Lambda&gt; * (vector_sum x)^2 + (\\&lt;r&gt; - \\&lt;Lambda&gt;) * l2_norm x\"\nproof -\n  have \"N * (N\\&lt;^sup&gt;T) = \\&lt;Lambda&gt; \\&lt;cdot&gt;\\&lt;^sub&gt;m (J\\&lt;^sub&gt;m \\&lt;v&gt;) + (\\&lt;r&gt; - \\&lt;Lambda&gt;) \\&lt;cdot&gt;\\&lt;^sub&gt;m (1\\&lt;^sub&gt;m \\&lt;v&gt;)\" using\n      rpbd_incidence_matrix_cond by simp\n  then have \"mat_mult (N * (N\\&lt;^sup&gt;T)) x =\n             mat_mult (\\&lt;Lambda&gt; \\&lt;cdot&gt;\\&lt;^sub&gt;m (J\\&lt;^sub&gt;m \\&lt;v&gt;) + (\\&lt;r&gt; - \\&lt;Lambda&gt;) \\&lt;cdot&gt;\\&lt;^sub&gt;m (1\\&lt;^sub&gt;m \\&lt;v&gt;)) x\" by simp\n  then have \"mat_mult (transpose_mat x) (mat_mult (N * (N\\&lt;^sup&gt;T)) x) =\n             mat_mult (transpose_mat x) (mat_mult (\\&lt;Lambda&gt; \\&lt;cdot&gt;\\&lt;^sub&gt;m (J\\&lt;^sub&gt;m \\&lt;v&gt;) + (\\&lt;r&gt; - \\&lt;Lambda&gt;) \\&lt;cdot&gt;\\&lt;^sub&gt;m (1\\&lt;^sub&gt;m \\&lt;v&gt;)) x)\"\n    by simp?\n````\n\nFor me, these definitions are all coming up as blue text, which means they aren't recognised. So I suspect you may have gotten them from somewhere else? The JNF library defines times_mat (which you can use the * notation for), mult_mat_vec, and smult_mat. I believe mult_mat was from the built in analysis matrix library. I can't find l2_norm defined anywhere, including using the FindFacts search tool (https://search.isabelle.in.tum.de/#). Similarly, vector_sum isn't defined. Did you mean sum_vec? Basically, watch out for any blue text in proofs - this typically means Isabelle is treating it as a free variable which may still parse something correctly but is often not want you want!\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 454260431,
        "sender_full_name": "Chelsea Edmonds",
        "timestamp": 1721987574
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"736162\">Craig Alan Feinstein</span> <a href=\"#narrow/stream/202961-General/topic/Bruck.20Ryser.20Chowla.20theorem.2C.20odd.20v.20part/near/454147024\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"252023\">Chelsea Edmonds</span>  I had realized before you wrote here that there was a problem with the fact that Stinson's theorem comes under a different locale than ordered_sym_bibd and knew I would need to fix this problem somehow; otherwise, I would have no way to prove the theorem using your work. I just tried your way that you gave me above using the sublocale, but Isabelle didn't accept it. I'll email you everything I have so far and you can tell me what you had in mind. </p>\n<p>Also, the Bruck Ryser Theorem proof for even v doesn't hold for nonsymmetric BIBDs because the determinant of N is used in the proof and N must be square. However, I haven't found a reason why it has to be a symmetric BIBD for odd v. Maybe I missed the reason. In any case, I'm going to assume symmetric BIBD to make things easy for now.</p>\n</blockquote>\n<p>I'll take a quick look, it'll definitely be possible.</p>",
        "id": 454260544,
        "sender_full_name": "Chelsea Edmonds",
        "timestamp": 1721987601
    }
]