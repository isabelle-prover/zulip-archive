[
    {
        "content": "<p>For pedagogical reasons I want to do elementary calculational proofs, without automation. Here is a silly example that works:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">calculation_silly</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"(0::nat) * 3 = 3 * 0\"</span>\n<span class=\"k\">proof</span><span class=\"w\"> </span><span class=\"o\">-</span>\n<span class=\"w\">  </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"s\">\"(0::nat) * 3 = 0\"</span><span class=\"w\"> </span><span class=\"k\">unfolding</span><span class=\"w\"> </span><span class=\"n\">Nat.times_nat.mult_0</span><span class=\"w\"> </span><span class=\"ow\">..</span>\n<span class=\"w\">  </span><span class=\"k\">also</span><span class=\"w\"> </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"s\">\"... = 0 * 0\"</span><span class=\"w\">  </span><span class=\"k\">unfolding</span><span class=\"w\"> </span><span class=\"n\">Nat.times_nat.mult_0</span><span class=\"w\"> </span><span class=\"ow\">..</span>\n<span class=\"w\">  </span><span class=\"k\">also</span><span class=\"w\"> </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"s\">\"... = 0\"</span><span class=\"w\">   </span><span class=\"k\">unfolding</span><span class=\"w\"> </span><span class=\"n\">Nat.times_nat.mult_0</span><span class=\"w\"> </span><span class=\"ow\">..</span>\n<span class=\"w\">  </span><span class=\"k\">also</span><span class=\"w\"> </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"s\">\"... = 3 * 0\"</span><span class=\"w\">   </span><span class=\"k\">unfolding</span><span class=\"w\"> </span><span class=\"n\">Nat.mult_0_right</span><span class=\"w\"> </span><span class=\"ow\">..</span>\n<span class=\"w\">  </span><span class=\"k\">finally</span><span class=\"w\"> </span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">thesis</span><span class=\"w\"> </span><span class=\"ow\">.</span>\n<span class=\"k\">qed</span>\n</code></pre></div>\n<p>but then if I prove this lemma:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">zero_one</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"(0::nat) &lt; 1\"</span>\n<span class=\"w\">    </span><span class=\"k\">proof</span><span class=\"w\"> </span><span class=\"o\">-</span>\n<span class=\"w\">      </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"s\">\"0 &lt; Suc 0\"</span><span class=\"w\"> </span><span class=\"k\">unfolding</span><span class=\"w\"> </span><span class=\"n\">Nat.zero_less_Suc</span><span class=\"w\"> </span><span class=\"ow\">..</span>\n<span class=\"w\">      </span><span class=\"k\">also</span><span class=\"w\"> </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"s\">\"Suc 0 = 1\"</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">rule</span><span class=\"w\"> </span><span class=\"n\">One_nat_def</span><span class=\"o\">[</span><span class=\"n\">symmetric</span><span class=\"o\">])</span>\n<span class=\"w\">      </span><span class=\"k\">finally</span><span class=\"w\"> </span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">thesis</span><span class=\"w\"> </span><span class=\"ow\">.</span>\n<span class=\"w\">    </span><span class=\"k\">qed</span>\n</code></pre></div>\n<p>and trying to prove the base case of an inductive goal similarly:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"s\">\"(∑i=1..n::nat. (2*i - 1)) = n * n\"</span>\n<span class=\"k\">proof</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">induct</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"k\">case</span><span class=\"w\"> </span><span class=\"n\">0</span>\n<span class=\"w\">  </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"s\">\"(∑i = 1..0::nat. 2 * i - 1)  = 0 * 0\"</span>\n<span class=\"w\">  </span><span class=\"k\">proof</span><span class=\"w\"> </span><span class=\"o\">-</span>\n<span class=\"w\">    </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"s\">\"(∑i = 1..0::nat. 2 * i - 1) = (∑i∈ {1..0::nat}. 2 * i - 1)\"</span><span class=\"w\"> </span><span class=\"ow\">..</span>\n<span class=\"w\">    </span><span class=\"k\">also</span><span class=\"w\"> </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"s\">\"... = (∑ (i::nat)∈{}. 2*i-1)\"</span><span class=\"w\"> </span><span class=\"k\">unfolding</span><span class=\"w\"> </span><span class=\"n\">atLeastatMost_empty</span><span class=\"o\">[</span><span class=\"n\">OF</span><span class=\"w\"> </span><span class=\"n\">zero_one</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"ow\">..</span>\n<span class=\"w\">    </span><span class=\"k\">also</span><span class=\"w\"> </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"s\">\"... = (0::nat)\"</span><span class=\"w\"> </span><span class=\"k\">unfolding</span><span class=\"w\">  </span><span class=\"n\">sum.empty</span><span class=\"w\"> </span><span class=\"ow\">..</span>\n<span class=\"w\">    </span><span class=\"k\">also</span><span class=\"w\"> </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"s\">\"... = (0::nat) * 0\"</span><span class=\"w\">   </span><span class=\"k\">unfolding</span><span class=\"w\"> </span><span class=\"n\">Nat.mult_0_right</span><span class=\"w\"> </span><span class=\"ow\">..</span>\n<span class=\"w\">    </span><span class=\"k\">finally</span><span class=\"w\"> </span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">thesis</span><span class=\"w\"> </span><span class=\"ow\">.</span>\n</code></pre></div>\n<p>Isabelle \"forgets\" the original Left Hand Side of the chain. Why is this and how could I prevent this? I cannot finish the <code>finally show ?thesis</code> by a dot as with the above two examples.</p>",
        "id": 520639917,
        "sender_full_name": "Gergely Buday",
        "timestamp": 1748344096
    },
    {
        "content": "<p>Ah that one I discovered live in front of students</p>",
        "id": 520646498,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1748346053
    },
    {
        "content": "<p>also is not always chaining, it can also unfold</p>",
        "id": 520646566,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1748346082
    },
    {
        "content": "<p>and this leads to such weird things</p>",
        "id": 520646713,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1748346126
    },
    {
        "content": "<p>The <code>also</code> command is very general and not very smart. It just applies <code>trans</code> rules. And the <code>trans</code> rule for equality just does substitutes the left-hand side with the right-hand side in the entire calculation (the calculation being the fact accumulated so far). If that calculation is an equation, it substitutes the left-hand side and the right-hand side.</p>\n<p>The only way I know of to avoid this is to change the equation that you are proving to something that only applies to the right-hand side but not the left-hand side, e.g. by putting more context around it. Or by hiding the left-hand side underneath a <code>define</code>.</p>",
        "id": 521816910,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1748889229
    }
]