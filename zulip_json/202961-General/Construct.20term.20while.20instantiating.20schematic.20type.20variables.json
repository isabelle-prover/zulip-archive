[
    {
        "content": "<p>I have this situation:</p>\n<div class=\"codehilite\"><pre><span></span><code>val term = ...\nval app_term = term $ t1 $ t2\n</code></pre></div>\n\n\n<p>term contains schematic type variables. Is there a function that constructs app_term with instantiated schematic type variables?</p>",
        "id": 205915877,
        "sender_full_name": "Lukas Stevens",
        "timestamp": 1596552385
    },
    {
        "content": "<p>The instantiation should use the types of t1 and t2 accordingly.</p>",
        "id": 205916411,
        "sender_full_name": "Lukas Stevens",
        "timestamp": 1596552629
    },
    {
        "content": "<p>Hmm, I think maybe you want type inference. Don't know all that much about it though to be honest. Maybe search for \"schematic\" in the Isabelle cookbook.</p>",
        "id": 205917523,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1596553123
    },
    {
        "content": "<p>(inb4 have fun with flex-flex pairs :D)</p>",
        "id": 205917549,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1596553139
    },
    {
        "content": "<p>there should'nt be any flex-flex pairs since there is only one schematic type variable that only occurs in term <span aria-label=\"fingers crossed\" class=\"emoji emoji-1f91e\" role=\"img\" title=\"fingers crossed\">:fingers_crossed:</span></p>",
        "id": 205918365,
        "sender_full_name": "Lukas Stevens",
        "timestamp": 1596553490
    },
    {
        "content": "<p>if \"term\" is something whose type you know, I would just compute the type</p>",
        "id": 205918705,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1596553651
    },
    {
        "content": "<p>e.g. if \"term\" where addition, you should write an ML function <code>mk_add : typ -&gt; term</code> that does something like <code>mk_add T = Const (@{const_name \"Groups.add\"}, T --&gt; T --&gt; T)</code>.</p>",
        "id": 205918813,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1596553707
    },
    {
        "content": "<p>That's the way it's done in the library.</p>",
        "id": 205918823,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1596553713
    },
    {
        "content": "<p>I'd only use actual type inference with schematic variables and whatever if you absolutely have to</p>",
        "id": 205918832,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1596553726
    },
    {
        "content": "<p>Depends a bit where this \"term\" thing comes from, I guess.</p>",
        "id": 205918862,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1596553741
    },
    {
        "content": "<p>Ok, I'll try to do it without type inference, thanks for the hint.</p>",
        "id": 205918903,
        "sender_full_name": "Lukas Stevens",
        "timestamp": 1596553774
    },
    {
        "content": "<p>one common pattern is also to specify the type of the function as <code>dummyT</code> and then do a <code>Syntax.check_term</code> to let type inference fill in the type</p>",
        "id": 205919165,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1596553913
    },
    {
        "content": "<p>that doesn't seem to work in the presence of schematic variables though and I never really understood why</p>",
        "id": 205919241,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1596553935
    },
    {
        "content": "<p>I think you have to tag them somehow to tell type inference that it is allowed to fill them in</p>",
        "id": 205919293,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1596553963
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232736\">Manuel Eberl</span> <a href=\"#narrow/stream/202961-general/topic/Construct.20term.20while.20instantiating.20schematic.20type.20variables/near/205919165\">said</a>:</p>\n<blockquote>\n<p>one common pattern is also to specify the type of the function as <code>dummyT</code> and then do a <code>Syntax.check_term</code> to let type inference fill in the type</p>\n</blockquote>\n<p>Cool, I am using that now.</p>",
        "id": 205924338,
        "sender_full_name": "Lukas Stevens",
        "timestamp": 1596556226
    }
]