[
    {
        "content": "<p>Hi, <br>\nI have two games defined as follows:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"n\">game0</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">TRY</span><span class=\"w\"> </span><span class=\"n\">do</span><span class=\"w\"> </span><span class=\"ow\">{</span>\n<span class=\"w\">        </span><span class=\"n\">Œ±</span><span class=\"o\">::</span><span class=\"n\">nat</span><span class=\"w\"> </span><span class=\"n\">‚Üê</span><span class=\"w\"> </span><span class=\"n\">sample_uniform</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">order</span><span class=\"w\"> </span><span class=\"n\">G‚á©p</span><span class=\"o\">)</span><span class=\"n\">;</span>\n<span class=\"w\">        </span><span class=\"n\">x</span><span class=\"o\">::</span><span class=\"n n-Type\">'y</span><span class=\"w\"> </span><span class=\"n\">‚Üê</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">ùíú</span><span class=\"o\">::</span><span class=\"n\">nat</span><span class=\"w\"> </span><span class=\"n\">‚áí</span><span class=\"w\"> </span><span class=\"n n-Type\">'y</span><span class=\"w\"> </span><span class=\"n\">spmf</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">Œ±;</span>\n<span class=\"w\">          </span><span class=\"o\">_</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"n\">unit</span><span class=\"w\"> </span><span class=\"n\">‚Üê</span><span class=\"w\"> </span><span class=\"n\">assert_spmf</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"o\">)</span><span class=\"n\">;</span>\n<span class=\"w\">          </span><span class=\"n\">return_spmf</span><span class=\"w\"> </span><span class=\"n\">True</span>\n<span class=\"w\">      </span><span class=\"ow\">}</span><span class=\"w\"> </span><span class=\"n\">ELSE</span><span class=\"w\"> </span><span class=\"n\">return_spmf</span><span class=\"w\"> </span><span class=\"n\">False</span>\n</code></pre></div>\n<p>and </p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"n\">game1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">TRY</span><span class=\"w\"> </span><span class=\"n\">do</span><span class=\"w\"> </span><span class=\"ow\">{</span>\n<span class=\"w\">        </span><span class=\"n\">Œ±</span><span class=\"o\">::</span><span class=\"n\">nat</span><span class=\"w\"> </span><span class=\"n\">‚Üê</span><span class=\"w\"> </span><span class=\"n\">sample_uniform</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">order</span><span class=\"w\"> </span><span class=\"n\">G‚á©p</span><span class=\"o\">)</span><span class=\"n\">;</span>\n<span class=\"w\">        </span><span class=\"n\">x</span><span class=\"o\">::</span><span class=\"n n-Type\">'y</span><span class=\"w\"> </span><span class=\"n\">‚Üê</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">ùíú</span><span class=\"o\">::</span><span class=\"n\">nat</span><span class=\"w\"> </span><span class=\"n\">‚áí</span><span class=\"w\"> </span><span class=\"n n-Type\">'y</span><span class=\"w\"> </span><span class=\"n\">spmf</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">Œ±;</span>\n<span class=\"w\">          </span><span class=\"o\">_</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"n\">unit</span><span class=\"w\"> </span><span class=\"n\">‚Üê</span><span class=\"w\"> </span><span class=\"n\">assert_spmf</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"o\">)</span><span class=\"n\">;</span>\n<span class=\"w\">          </span><span class=\"o\">_</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"n\">unit</span><span class=\"w\"> </span><span class=\"n\">‚Üê</span><span class=\"w\"> </span><span class=\"n\">assert_spmf</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"o\">)</span><span class=\"n\">;</span>\n<span class=\"w\">          </span><span class=\"n\">return_spmf</span><span class=\"w\"> </span><span class=\"n\">True</span>\n<span class=\"w\">      </span><span class=\"ow\">}</span><span class=\"w\"> </span><span class=\"n\">ELSE</span><span class=\"w\"> </span><span class=\"n\">return_spmf</span><span class=\"w\"> </span><span class=\"n\">False</span>\n</code></pre></div>\n<p>Now I want to show that the advantage the Adversary A can have in game0 is greater-equal to the advantage it can have in game1 , which is trivially true (or at least I thought so..) as game1 literally adds one assert to game0.<br>\nHowever, the proof is not easy (for me).  <br>\nI would greatly appreciate any help or advice in proving this thing. I already looked through the SPMF theory, but couldn't find anything, but a lot of measure lemmas, which left me clueless. </p>\n<p>Ah one more thing, the goal looks like this:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"n\">spmf</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">game0</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">True</span><span class=\"w\"> </span><span class=\"n\">&lt;</span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">spmf</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">game1</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">True</span>\n</code></pre></div>\n<p>Thanks for your time :)</p>",
        "id": 377591611,
        "sender_full_name": "Tobias Rothmann",
        "timestamp": 1690030817
    },
    {
        "content": "<p>hi Tobias, have you looked at <a href=\"https://eprint.iacr.org/2018/941\">https://eprint.iacr.org/2018/941</a> ?<br>\nIn this case, you need to apply some form of \"identical-until-bad\" reasoning (see Section 3.6) -- which I do agree was a bit heavyweight when I tried it</p>",
        "id": 377956977,
        "sender_full_name": "Yong Kiam",
        "timestamp": 1690160190
    },
    {
        "content": "<p>Hi Yong, <br>\nthanks a lot for the hint. I looked at it when I started with CryptHOL, but my understanding wasn't good enough to think of it again. <br>\nBut looks exactly like what I need to do, so thanks a lot! That saved definitely a lot of hours searching around :)</p>",
        "id": 378212292,
        "sender_full_name": "Tobias Rothmann",
        "timestamp": 1690217690
    },
    {
        "content": "<p>FWIW: I found it much easier to start with <code>spmf</code> only when trying this out, I'm still totally lost on <code>gpv</code>s if I have to be honest <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 378306461,
        "sender_full_name": "Yong Kiam",
        "timestamp": 1690246253
    },
    {
        "content": "<p>I can relate, even spmf is hard for me now, luckily I don't have to deal with gpv for my project <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 378569424,
        "sender_full_name": "Tobias Rothmann",
        "timestamp": 1690309425
    },
    {
        "content": "<p>In case someone every stumbles upon this, I managed to proof this thing without a failure-event proof. <br>\nIts the lemma \"spmf_reduction\" in this file:<a href=\"https://github.com/tobias-rothmann/KZG-Polynomial-Commitment-Scheme/blob/main/KZG_poly_bind.thy#L624\">https://github.com/tobias-rothmann/KZG-Polynomial-Commitment-Scheme/blob/main/KZG_poly_bind.thy#L624</a></p>",
        "id": 393937438,
        "sender_full_name": "Tobias Rothmann",
        "timestamp": 1695996269
    },
    {
        "content": "<p>I don't know anything about CryptHOL, but I'd prove this by relational reasoning, without going down all the level to computing integrals. You can insert a <code>_ :: unit ‚Üê assert_pmf True</code> in the first program at the location where the additional line in the second one is, and then you can prove <code>rel_spmf (=) game1 game0</code> compositionally because the two programs are syntactically completely equal except for that one line, and that should give you what you need.</p>",
        "id": 394013968,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1696027275
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232736\">Manuel Eberl</span> <a href=\"#narrow/stream/202961-General/topic/CryptHOL.3A.20proof.20obvious.20advantage.20difference/near/394013968\">said</a>:</p>\n<blockquote>\n<p>I don't know anything about CryptHOL, but I'd prove this by relational reasoning, without going down all the level to computing integrals. You can insert a <code>_ :: unit ‚Üê assert_pmf True</code> in the first program at the location where the additional line in the second one is, and then you can prove <code>rel_spmf (=) game1 game0</code> compositionally because the two programs are syntactically completely equal except for that one line, and that should give you what you need.</p>\n</blockquote>\n<p>Ahh thanks for the hint! Didn't think of it, I'll try it out and update accordingly sometime soon. Thanks :)</p>",
        "id": 394086839,
        "sender_full_name": "Tobias Rothmann",
        "timestamp": 1696081588
    }
]