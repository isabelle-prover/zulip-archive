[
    {
        "content": "<p>I have defined an Eisbach method like the following</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"n\">method</span> <span class=\"n\">inst_assn</span> <span class=\"kp\">for</span> <span class=\"n\">y</span> <span class=\"o\">=</span>\n  <span class=\"o\">(</span><span class=\"n\">rule</span> <span class=\"n\">ent_ex_postI</span><span class=\"o\">[</span><span class=\"kp\">where</span> <span class=\"n\">x</span><span class=\"o\">=</span><span class=\"n\">y</span><span class=\"o\">])</span>\n</code></pre></div>\n<p>It is called via <code>apply(inst_assn \"x\")</code><br>\nHowever, it would be nice if it could a variable amount of parameters and process them i.e.<br>\n<code>apply(inst_assn \"x\" \"y\")</code><br>\nwhere the rule is simply applied for each argument given. Does anyone have an idea how to accomplish this? Or do I have to use a more complex language to express what I need?</p>",
        "id": 244072816,
        "sender_full_name": "Niels M端ndler",
        "timestamp": 1624809501
    },
    {
        "content": "<p>I wrote a method called <code>inst_existentials</code> in ML back in the day (grep the distribution to find it) that does something like that.</p>",
        "id": 244072980,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1624809726
    },
    {
        "content": "<p>I know that method, it inspired me to write my own <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span>  (link for your convenience <a href=\"https://isabelle.in.tum.de/library/HOL/HOL-Real_Asymp/Inst_Existentials.html\">https://isabelle.in.tum.de/library/HOL/HOL-Real_Asymp/Inst_Existentials.html</a>).<br>\nHowever this one uses \"Inst_Existentials.tac\" but I want to apply a custom rule (based on a lemma) in the method.  Where do I have to look (or for what) to find the corresponding tactics for applying a rule?</p>",
        "id": 244073184,
        "sender_full_name": "Niels M端ndler",
        "timestamp": 1624810013
    },
    {
        "content": "<p>Okay so the Inst_Existentials method uses custom tactics written in ML. Is there any documentation on this? As I understand I should be able to re-use the code but need to reference a Theorem introduced in the AFP (my custom rule). \"thm Session_name.lemma\" seems not to work, any other suggestions?</p>",
        "id": 244073907,
        "sender_full_name": "Niels M端ndler",
        "timestamp": 1624811108
    },
    {
        "content": "<p>Well that session needs to be imported at the point where you define the method in order for this to work.</p>",
        "id": 244074768,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1624812393
    },
    {
        "content": "<p>And the instantiation of the rule might work a bit differently depending on the order of variables in the theorem statement.</p>",
        "id": 244074776,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1624812416
    },
    {
        "content": "<p>Applying a rule in ML is typically done with the <code>resolve_tac</code> tactic. That's probably the one I used as well.</p>",
        "id": 244074785,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1624812451
    },
    {
        "content": "<p>If you have trouble figuring out the details feel free to send me some pointers to your precise situation tomorrow and I can see if I can sort it out.</p>",
        "id": 244074795,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1624812481
    },
    {
        "content": "<p>Thanks! I found the issue: The lemma was defined in \"Separation_Logic_Imperative_HOL.Assertions\", which needed to be imported in the .thy file and then referred to in the ML file with \"thm Assertions.ent_ex_postI\"</p>",
        "id": 244075161,
        "sender_full_name": "Niels M端ndler",
        "timestamp": 1624812968
    },
    {
        "content": "<p>Nice. Also note that my method applies a few more intro rules, such as <code>conjI</code> and <code>allI</code>. Might want to get rid of that for your case, depending on what you're trying to achieve.</p>",
        "id": 244075187,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1624813077
    }
]