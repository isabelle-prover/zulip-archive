[
    {
        "content": "<p>I would like to define a reverse syntax for lambda abstraction, namely:</p>\n<p>exp | x      would become       \\x. exp</p>\n<p>I need to do a binder definition for this, but it is not clear how I could tell the system that I have this reverse syntax, first the body and then the bound variable.</p>\n<p>Section 8.2.3 Binders in the Isar Reference Manual tells that the binder definition</p>\n<p>definition c :: \"(t1 =&gt; t2) =&gt; t3\" (binder \"sy\" [p] q)</p>\n<p>expands to \"something like this\":</p>\n<p>definition c_binder :: \"idts =&gt; t2 =&gt; t3\" (\"(3sy_./ _)\" [0,p] q)</p>\n<p>I guess this latter syntax allows me to define the reverse syntax but it is not clear how.</p>\n<p>Can you give a hint on this?</p>",
        "id": 439600752,
        "sender_full_name": "Gergely Buday",
        "timestamp": 1716220087
    },
    {
        "content": "<p>is it possible to define an abbreviation over c that just swaps the order of the arguments and that has the binder definition?</p>",
        "id": 439602050,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1716220505
    },
    {
        "content": "<p>I will try, thanks</p>",
        "id": 439602179,
        "sender_full_name": "Gergely Buday",
        "timestamp": 1716220555
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"233198\">@Mathias Fleury</span> I see a problem that <code>abbreviation</code> handles values, but in a binder the first thing is a variable, not a value. In abbreviation, I need to give a type for the whole expression and it is not clear for me how could I tell Isabelle that the second argument is a variable.</p>",
        "id": 441453564,
        "sender_full_name": "Gergely Buday",
        "timestamp": 1717074616
    },
    {
        "content": "<p>I got an answer on the mailing list that low-level <code>syntax</code> and <code>translations</code> should be used for this. The Isare Reference Manual at section 8.5.2 states that</p>\n<p>Raw syntax and translations provides a slightly more low-level access to<br>\nthe grammar and the form of resulting parse trees. It is often possible<br>\nto avoid this untyped macro mechanism, and use type-safe abbreviation<br>\nor notation instead. Some important situations where syntax and<br>\ntranslations are really need are as follows:</p>\n<p>• Iterated replacement via recursive translations. For example, con-<br>\nsider list enumeration [a, b, c, d] as defined in theory HOL.List.</p>\n<p>• Change of binding status of variables: anything beyond the built-in<br>\nbinder mixfix annotation requires explicit syntax translations. For<br>\nexample, consider the set comprehension syntax {x. P} as defined in<br>\ntheory HOL.Set.</p>",
        "id": 441645787,
        "sender_full_name": "Gergely Buday",
        "timestamp": 1717143154
    }
]