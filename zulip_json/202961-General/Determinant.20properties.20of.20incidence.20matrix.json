[
    {
        "content": "<p>I just started learning Isabelle by immersion and have been successful in proving some lemmas that I will need to prove the Bruck Ryser Chowla theorem, which is my current goal. I have been using the Design Theory folder in the Archive of Formal Proofs. And I have been using symmetric_bibd in bibs as my context. In this context, N is the incidence matrix. To prove the BRC theorem, I need to show the the determinant of N times N transpose equals the square of the determinant of N. I have been having trouble doing this even though I found a lemma somewhere else in the AFP called det_mult which is supposed to do this. I am wondering if I have to prove that N is a square matrix to do this. In any case, does anybody have any ideas to prove this?</p>",
        "id": 451330127,
        "sender_full_name": "Craig Alan Feinstein",
        "timestamp": 1720942253
    },
    {
        "content": "<p>Looking at the det_mul theorem, you do indeed need matrices of type ‚Äòa^‚Äôn^‚Äôn. Do you have these? Unfortunately this is not something one can prove, as it‚Äôs a type issue. You‚Äôll have to supply matrices of the correct type in the first place or the rule won‚Äôt apply.</p>",
        "id": 451345098,
        "sender_full_name": "Christian Pardillo Laursen",
        "timestamp": 1720954643
    },
    {
        "content": "<p>N is defined as a matrix of type v x b. But in the symmetric_bibd locale, v=b so N is a square matrix in this context.</p>",
        "id": 451348027,
        "sender_full_name": "Craig Alan Feinstein",
        "timestamp": 1720958277
    },
    {
        "content": "<p>This is what I have so far with respect to this lemma, but it's not working. It is highlighting \"by\" in pink and has a red exclamation point:</p>\n<p>theory Bruck_Ryser_Chowla imports Fishers_Inequality.Incidence_Matrices<br>\n  Fishers_Inequality.Fishers_Inequality Jordan_Normal_Form.Determinant<br>\n  SumSquares.FourSquares<br>\nbegin </p>\n<p>section ‚ÄπBruck Ryser Chowla Theorem‚Ä∫<br>\ncontext ordered_sym_bibd</p>\n<p>begin</p>\n<p>lemma det_incidence: \"det (N * N‚áßT) = (det N)^2\"<br>\nproof - <br>\n  have \"det (N * N‚áßT) = det N * det N‚áßT\" using rep_value_sym by (simp add: det_mult)<br>\n  also have \"det (N * N‚áßT) = det N * det N\" by simp<br>\nqed</p>",
        "id": 451377624,
        "sender_full_name": "Craig Alan Feinstein",
        "timestamp": 1720986591
    },
    {
        "content": "<p>Try to use</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">subst</span><span class=\"w\"> </span><span class=\"n\">det_mult</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>To see why auto / simp is failing</p>",
        "id": 451379755,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1720988821
    },
    {
        "content": "<p>I changed the lemma proof to:</p>\n<p>lemma det_incidence: \"det (N * N‚áßT) = (det N)^2\"<br>\nproof - <br>\n  have \"det (N * N‚áßT) = det N * det N‚áßT\" using rep_value_sym by (simp add: det_mult)<br>\n  also have \"det (N * N‚áßT) = det N * det N\" using det_transpose by simp<br>\n  then have \"det (N * N‚áßT) = (det N)^2\" using power2_eq_square by simp<br>\n  apply (subst det_mult)<br>\nqed </p>\n<p>When I clicked on the apply line, I got in the window:</p>\n<p>proof (state)<br>\nthis:<br>\n  det (N * N‚áßT) = (det N)‚áß2</p>\n<p>goal (1 subgoal):</p>\n<ol>\n<li>\n<p>det (N * N‚áßT) = (det N)‚áß2 <br>\nFailed to finish proof:<br>\ngoal (1 subgoal):</p>\n</li>\n<li>\n<p>det (N * N‚áßT) = (det N)‚áß2</p>\n</li>\n</ol>",
        "id": 451383119,
        "sender_full_name": "Craig Alan Feinstein",
        "timestamp": 1720992641
    },
    {
        "content": "<p>Did I use the apply line correctly? I‚Äôve never used it before.</p>",
        "id": 451384225,
        "sender_full_name": "Craig Alan Feinstein",
        "timestamp": 1720994067
    },
    {
        "content": "<p>I found using sledgehammer that the following works. I'm not sure I could figure all this out without sledgehammer at this point. Hopefully I'll learn to do it without sledgehammer. But I'm certainly thankful for sledgehammer:</p>\n<p>lemma det_incidence: \"det (N * N‚áßT) = (det N)^2\"<br>\nproof - <br>\n  have \"det (N * N‚áßT) = det N * det N‚áßT\" <br>\n  by (metis (full_types) N_carrier_mat det_mult local.symmetric transpose_carrier_mat)<br>\n  also have \"det N * det N‚áßT = det N * det N\"<br>\n  using N_carrier_mat det_transpose local.symmetric by auto<br>\n  then have \"det (N * N‚áßT) = (det N)^2\" by (simp add: calculation power2_eq_square)<br>\n  thus ?thesis by simp<br>\nqed</p>",
        "id": 451401719,
        "sender_full_name": "Craig Alan Feinstein",
        "timestamp": 1721011269
    },
    {
        "content": "<p>I meant to add the line at the first place it is failing:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">det_incidence</span><span class=\"o\">:</span>\n<span class=\"w\">  </span><span class=\"kp\">shows</span><span class=\"w\"> </span><span class=\"s\">\"det (N * N‚áßT) = (det N)^2\"</span>\n<span class=\"k\">proof</span><span class=\"w\"> </span><span class=\"o\">-</span>\n<span class=\"w\">  </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"s\">\"det (N * N‚áßT) = det N * det N‚áßT\"</span>\n<span class=\"w\">    </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">subst</span><span class=\"w\"> </span><span class=\"n\">det_mult</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>and to look at the generated goals. In this case</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">proof</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">prove</span><span class=\"o\">)</span>\n<span class=\"n\">goal</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">3</span><span class=\"w\"> </span><span class=\"n\">subgoals</span><span class=\"o\">):</span>\n<span class=\"w\"> </span><span class=\"n\">1.</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"w\"> </span><span class=\"n\">‚àà</span><span class=\"w\"> </span><span class=\"n\">carrier_mat</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">n</span>\n<span class=\"w\"> </span><span class=\"n\">2.</span><span class=\"w\"> </span><span class=\"n\">N‚áßT</span><span class=\"w\"> </span><span class=\"n\">‚àà</span><span class=\"w\"> </span><span class=\"n\">carrier_mat</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">n</span>\n<span class=\"w\"> </span><span class=\"n\">3.</span><span class=\"w\"> </span><span class=\"n\">det</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"w\"> </span><span class=\"n\">*</span><span class=\"w\"> </span><span class=\"n\">det</span><span class=\"w\"> </span><span class=\"n\">N‚áßT</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">det</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"w\"> </span><span class=\"n\">*</span><span class=\"w\"> </span><span class=\"n\">det</span><span class=\"w\"> </span><span class=\"n\">N‚áßT</span>\n</code></pre></div>\n<p>And if you look at the proof, sledgehammer found the theorem det_incidence and the proofs boils down to:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"w\">  </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"s\">‚ÄπN ‚àà carrier_mat ùóè ùóè‚Ä∫</span>\n<span class=\"w\">    </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">metis</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">full_types</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">N_carrier_mat</span><span class=\"w\"> </span><span class=\"n\">local.symmetric</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"s\">\"det (N * N‚áßT) = det N * det N‚áßT\"</span>\n<span class=\"w\">    </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"n\">add</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">det_mult</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 451412891,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1721020878
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"736162\">Craig Alan Feinstein</span> <a href=\"#narrow/stream/202961-General/topic/Determinant.20properties.20of.20incidence.20matrix/near/451401719\">said</a>:</p>\n<blockquote>\n<p>I found using sledgehammer that the following works. I'm not sure I could figure all this out without sledgehammer at this point. Hopefully I'll learn to do it without sledgehammer. But I'm certainly thankful for sledgehammer:</p>\n</blockquote>\n<p>As a learning exercise, there is value to do it without sledgehammer. Otherwise, just use it‚Ä¶</p>",
        "id": 451413004,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1721020951
    },
    {
        "content": "<p>And: the structured proof is</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"ow\">...</span>\n<span class=\"o\">[</span><span class=\"k\">also</span><span class=\"w\"> </span><span class=\"ow\">...</span><span class=\"o\">]+</span>\n<span class=\"k\">finally</span>\n</code></pre></div>\n<p>Not have /also/have</p>",
        "id": 451413068,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1721021003
    },
    {
        "content": "<p>And the show ?thesis should be in the last line of the calculation. And the also is not useful:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">det_incidence</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"det (N * N‚áßT) = (det N)^2\"</span>\n<span class=\"k\">proof</span><span class=\"w\"> </span><span class=\"o\">-</span>\n<span class=\"w\">  </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"s\">‚ÄπN ‚àà carrier_mat ùóè ùóè‚Ä∫</span>\n<span class=\"w\">    </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">metis</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">full_types</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">N_carrier_mat</span><span class=\"w\"> </span><span class=\"n\">local.symmetric</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"s\">\"det (N * N‚áßT) = det N * det N\"</span>\n<span class=\"w\">    </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"n\">add</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">det_mult</span><span class=\"w\"> </span><span class=\"n\">det_transpose</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">thesis</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"n\">add</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">power2_eq_square</span><span class=\"o\">)</span>\n<span class=\"k\">qed</span>\n</code></pre></div>",
        "id": 451413215,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1721021106
    },
    {
        "content": "<p>just quickly looking at what <span class=\"user-mention\" data-user-id=\"361261\">@Christian Pardillo Laursen</span>  and <span class=\"user-mention\" data-user-id=\"736162\">@Craig Alan Feinstein</span>  have said, it looks like you are referring to two different matrix libraries. The one from JNF is a different type from the type-based ones.</p>",
        "id": 451514254,
        "sender_full_name": "Yong Kiam",
        "timestamp": 1721053816
    },
    {
        "content": "<p>So I should not use the one from JNF and use the one from HOL.analysis? This one JNF appears to be giving me problems in other lemmas that I am trying to prove as it thinks the matrix is an integer.</p>",
        "id": 451639563,
        "sender_full_name": "Craig Alan Feinstein",
        "timestamp": 1721081445
    },
    {
        "content": "<p>matrix of integers I mean</p>",
        "id": 451639593,
        "sender_full_name": "Craig Alan Feinstein",
        "timestamp": 1721081457
    },
    {
        "content": "<p>I got it to work. No more problems. Just one last step I need to complete to prove the easy part of the brc theorem.</p>",
        "id": 451653864,
        "sender_full_name": "Craig Alan Feinstein",
        "timestamp": 1721088709
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"736162\">Craig Alan Feinstein</span> <a href=\"#narrow/stream/202961-General/topic/Determinant.20properties.20of.20incidence.20matrix/near/451639563\">said</a>:</p>\n<blockquote>\n<p>So I should not use the one from JNF and use the one from HOL.analysis? This one JNF appears to be giving me problems in other lemmas that I am trying to prove as it thinks the matrix is an integer.</p>\n</blockquote>\n<p>If possible, I would recommend the one from JNF.  Leaving matrix dimensions out of types provides the most flexibility, albeit at the cost of slightly more verbose statements. If you do prefer the one from HOL.analysis, it is not a big deal either, as there is a <a href=\"https://www.isa-afp.org/sessions/smith_normal_form/#Mod_Type_Connect\">theory in AFP</a> that converts between these two representations.</p>",
        "id": 451758556,
        "sender_full_name": "Wenda Li",
        "timestamp": 1721136421
    },
    {
        "content": "<p>Thank you, I used the one from JNF.</p>",
        "id": 451825629,
        "sender_full_name": "Craig Alan Feinstein",
        "timestamp": 1721153365
    }
]