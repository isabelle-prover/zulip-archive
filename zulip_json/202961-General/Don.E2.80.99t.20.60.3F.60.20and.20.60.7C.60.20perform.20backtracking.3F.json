[
    {
        "content": "<p>I thought that the proof method combinators <code>?</code> and <code>|</code> perform backtracking, but from some experiments I conclude that they perform what I know as “fast-back”: different alternatives are tried, but as soon as a working one has been chosen this choice isn’t revised if a later method fails.</p>\n<p>Let me illustrate this with some examples.</p>\n<p>Consider the following attempt to prove a trivial lemma:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span>\n  <span class=\"kp\">fixes</span> <span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">::</span> <span class=\"n\">nat</span>\n  <span class=\"kp\">shows</span> <span class=\"s\">\"n &lt; m ⟹ n &lt; m\"</span>\n  <span class=\"k\">by</span> <span class=\"o\">((</span><span class=\"n\">drule</span> <span class=\"n\">Suc_mono</span><span class=\"o\">)?,</span> <span class=\"n\">assumption</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Apparently, the premise is the conclusion, so that <code>assumption</code> could solve the goal. However, we first apply <code>drule Suc_mono</code>, which turns the premise into <code>Suc n &lt; Suc m</code>, thus making it unusable. As a result, <code>assumption</code> fails. If <code>?</code> would perform backtracking, it would now consider the other alternative of <code>(drule Suc_mono)?</code>: just doing nothing. However, it apparently doesn’t do that, as the above proof fails. It seems that the “do nothing” alternative would have only been chosen if <code>drule Suc_mono</code> would have failed.</p>\n<p>The situation seems to be analogous for <code>|</code>. Consider the following variant of the above code:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span>\n  <span class=\"kp\">fixes</span> <span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">::</span> <span class=\"n\">nat</span>\n  <span class=\"kp\">shows</span> <span class=\"s\">\"n &lt; m ⟹ n &lt; m\"</span>\n  <span class=\"k\">by</span> <span class=\"o\">((</span><span class=\"n\">drule</span> <span class=\"n\">Suc_mono</span> <span class=\"o\">|</span> <span class=\"n\">insert</span> <span class=\"n\">TrueI</span><span class=\"o\">),</span> <span class=\"n\">assumption</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Here, the alternative is not doing nothing, but inserting <code>True</code> as an extra premise, which wouldn’t impair the <code>assumption</code> method in solving the goal. Still, this proof fails, apparently because, after the successful execution of <code>drule Suc_mono</code>, the choice for the first alternative is not questioned even when <code>assumption</code> fails because of this choice.</p>\n<p>In contrast to <code>?</code> and <code>|</code>, the <code>match</code> method does perform backtracking. Consider the following variant of the above code examples:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span>\n  <span class=\"kp\">fixes</span> <span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">::</span> <span class=\"n\">nat</span>\n  <span class=\"kp\">shows</span> <span class=\"s\">\"n &lt; m ⟹ n &lt; m\"</span>\n  <span class=\"k\">by</span> <span class=\"o\">(</span><span class=\"n\">match</span> <span class=\"n\">Suc_mono</span> <span class=\"n\">TrueE</span> <span class=\"o\">[</span><span class=\"n\">OF</span> <span class=\"n\">TrueI</span><span class=\"o\">]</span> <span class=\"kp\">in</span> <span class=\"n\">destruction_rule</span><span class=\"o\">:</span> <span class=\"o\">_</span> <span class=\"err\">⇒</span> <span class=\"err\">‹</span><span class=\"n\">drule</span> <span class=\"n\">destruction_rule</span><span class=\"err\">›</span><span class=\"o\">,</span> <span class=\"n\">assumption</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>First, <code>destruction_rule</code> becomes <code>Suc_mono</code>, which causes the subsequent <code>assumption</code> to fail, as above. However, <code>match</code> performs backtracking because of this failure of a subsequent proof method, causing <code>destruction_rule</code> to become <code>TrueE [OF TrueI]</code>, which is <code>?P ⟹ ?P</code>. Applying <code>drule</code> with this fact leaves the premise alone, and subsequently <code>assumption</code> solves the goal.</p>\n<p>Did I get this correctly that <code>?</code> and <code>|</code> only perform “fast-back”, meaning they only revise their decisions when the argument method (in the case of <code>?</code>) or the first argument method (in the case of <code>|</code>) fails, or is there something else going on here?</p>",
        "id": 262512280,
        "sender_full_name": "Wolfgang Jeltsch",
        "timestamp": 1637700874
    }
]