[
    {
        "content": "<p>Hello! I am doing some development with the TLA+ proof manager (TLAPM <a href=\"https://github.com/tlaplus/tlapm\">https://github.com/tlaplus/tlapm</a>) which embeds Isabelle as a backend theorem-prover to discharge obligations produced by the TLA+ proof language. Lately I was poking around to see why our releases take up so much space, and Isabelle comprised almost all of it. In particular, it seems to bundle an entire copy of the JDK, Haskell stack, Scala, some IDEs, etc. Does anybody have experience or pointers for slimming down Isabelle's storage footprint when it is embedded in this way? Thank you! Here is the related github issue: <a href=\"https://github.com/tlaplus/tlapm/issues/181\">https://github.com/tlaplus/tlapm/issues/181</a></p>",
        "id": 484789342,
        "sender_full_name": "Andrew Helwer",
        "timestamp": 1732737119
    },
    {
        "content": "<p>This is a non-trivial idea, mostly for the reason that Isabelle relies on specific version of tools like z3. Newer version do <em>not</em> work with Isabelle</p>",
        "id": 484790394,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1732737582
    },
    {
        "content": "<p>I know that the nix people are bundling things differently ( <a href=\"https://github.com/jvanbruegge/nixpkgs/blob/d653b33f2083022e5e0bfad73002314570379ef1/pkgs/applications/science/logic/isabelle/default.nix\">https://github.com/jvanbruegge/nixpkgs/blob/d653b33f2083022e5e0bfad73002314570379ef1/pkgs/applications/science/logic/isabelle/default.nix</a>)</p>",
        "id": 484790650,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1732737668
    },
    {
        "content": "<p>It's understandable that it would bundle a specific version of Z3, and it would be interesting to see whether that version could be unified with the one used by TLAPM directly. However, things like the JDK or rsync could certainly be omitted in favor of the system version, right?</p>",
        "id": 484791960,
        "sender_full_name": "Andrew Helwer",
        "timestamp": 1732738253
    },
    {
        "content": "<p>Why would that be possible? Different versions of a software do different things.</p>",
        "id": 484953000,
        "sender_full_name": "Fabian Huch",
        "timestamp": 1732810476
    },
    {
        "content": "<p>You can certainly try to mess with the system and change dependencies to arbitrary other versions, strip out system components, but you'll just end up with software that doesn't work (reliably).</p>",
        "id": 484953658,
        "sender_full_name": "Fabian Huch",
        "timestamp": 1732810712
    },
    {
        "content": "<p>One GB of SSD space costs around 0.04€ -- I think this is a reasonable price to pay for Isabelle ;)</p>",
        "id": 484954265,
        "sender_full_name": "Fabian Huch",
        "timestamp": 1732810946
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"783496\">Andrew Helwer</span> <a href=\"#narrow/channel/202961-General/topic/Embedding.20Isabelle.20in.20another.20prover.20-.20how.20to.20reduce.20size.3F/near/484791960\">said</a>:</p>\n<blockquote>\n<p>It's understandable that it would bundle a specific version of Z3, and it would be interesting to see whether that version could be unified with the one used by TLAPM directly. However, things like the JDK or rsync could certainly be omitted in favor of the system version, right?</p>\n</blockquote>\n<p>In our lecture, one person is writing code for Java 17 and it does not compile in Java 21. And we are talking about the code for an exercise that lasts <em>one</em> week, it is not a big project. So, why would a big Java project with many libraries work ?</p>",
        "id": 484954457,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1732811036
    },
    {
        "content": "<p>Maybe I'm ignorant of how Isabelle works but why would it need to embed an entire version of the JDK unless it's compiling Java code? If the user has Java runtime version 21.0.3+ installed on their system then it will run anything compiled for JDK 21.0.3, until we get to 2040 and some lesser-used APIs for Java 21 are possibly removed from Java 35 or whatever the user might have on their system.</p>\n<blockquote>\n<p>One GB of SSD space costs around 0.04€ -- I think this is a reasonable price to pay for Isabelle ;)</p>\n</blockquote>\n<p>This is more about sensibilities but given that a stripped Debian install only clocks in at 150 MB if something takes up ten times that amount of space it should have a better reason than just storage being cheap.</p>",
        "id": 484955831,
        "sender_full_name": "Andrew Helwer",
        "timestamp": 1732811558
    },
    {
        "content": "<p>It does seem like you are a bit ignorant on how Isabelle and Java works:</p>\n<ul>\n<li>Isabelle _is_ compiling java code</li>\n<li>A newer JDK will _not_ run anything compiled for JDK 21.0.3 as <del>@<strong>Mathias Fleury</strong> wrote and</del> probably every java dev in existence has painfully found out.</li>\n</ul>",
        "id": 484956586,
        "sender_full_name": "Fabian Huch",
        "timestamp": 1732811850
    },
    {
        "content": "<p>I am sure Isabelle could be made smaller. But is it the goal of the project? Not at all. The goal is to provide a theorem prover that works as well as possible, while running on hardware that people use.</p>",
        "id": 484956819,
        "sender_full_name": "Fabian Huch",
        "timestamp": 1732811944
    },
    {
        "content": "<p>Even the official java website says:</p>\n<blockquote>\n<p>Most Java applications will work with updated versions of Java. However some applications may break because of security related changes in Java</p>\n</blockquote>",
        "id": 484957127,
        "sender_full_name": "Fabian Huch",
        "timestamp": 1732812053
    },
    {
        "content": "<p>If there is an actual problem (e.g., you are trying to run Isabelle on an embedded system) then I'm happy to discuss how to make it smaller.</p>",
        "id": 484957940,
        "sender_full_name": "Fabian Huch",
        "timestamp": 1732812365
    },
    {
        "content": "<p>We can skip the Java discussion because it's a bit different than what you present and Java is a VM-based language so one has to be careful to distinguish between compiling for a given JDK version and running on a given JVM version. But anyway. This conversation's tone is becoming a bit combative and defensive; this is easy to have happen in text-based communications so I would just like to restate my good will and I am not trying to criticize your project.</p>\n<p>Let us also avoid discussion of whether 1.1 GB is a lot of space; there is no objective criterion to appeal to here so I will just say that the premise of this thread is that it is a lot of space, and I am interested in decreasing the space for an application where Isabelle is embedded within another application. If you think it is not a lot of space that is fine, but it is not a productive debate to have here. We can probably at least agree that if 90%+ of the compiled code shipped with a <strong>specific</strong> application (not Isabelle generally, just its embedding in TLAPM) is never run, then it would be nice if that code could be removed for that application.</p>\n<p>I would like to refocus on what our project's use case is, which is translating proof obligations generated by TLA+ into forms that can be discharged by Isabelle. We probably do not need the entire capabilities of Isabelle for this. Certainly we do not need things like the various IDEs and rsync. I would be surprised if passing these obligations to Isabelle caused it to compile Java code but if that's how it works then that's how it works. Let's focus on a concrete example: how can something like JEdit be stripped from an Isabelle release?</p>",
        "id": 484962048,
        "sender_full_name": "Andrew Helwer",
        "timestamp": 1732814040
    },
    {
        "content": "<p>IIRC (from downloading of components that I accidentally Control-C-ed during decompression), you can delete the content of the JEdit folder (the folder needs to exist however)</p>",
        "id": 484962403,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1732814148
    },
    {
        "content": "<p>I think that you can safely delete:</p>\n<p>- stack (haskell package manager):<br>\n  - opam (ocaml package manager)<br>\n  - mlton (ML compiler)<br>\n  - napproche<br>\n  - if you do not use sledgehammer: e, vampire, and zipperposition<br>\n(the rest I am not sure)</p>",
        "id": 484962913,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1732814394
    },
    {
        "content": "<p>But, be warned, to know if you needed a component, you need to run into the situation where Isabelle is trying to execute it</p>",
        "id": 484963032,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1732814445
    },
    {
        "content": "<p>so deleting the wrong thing will cause problems in strange ways</p>",
        "id": 484963111,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1732814468
    },
    {
        "content": "<p>No combative tone intended. I only have time to engage in some discussions, so it does matter to me whether something like this is 'just for fun' or actually relevant.</p>\n<p>I am curious to learn how the java situation is different? The JDK contains the JVM.<br>\nYou can strip components from Isabelle by modifying the <code>Admin/components/main</code> file. But the question which you need is a longer one as it depends on what you invoke in Isabelle.</p>",
        "id": 484964920,
        "sender_full_name": "Fabian Huch",
        "timestamp": 1732815379
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"233198\">Mathias Fleury</span> <a href=\"#narrow/channel/202961-General/topic/Embedding.20Isabelle.20in.20another.20prover.20-.20how.20to.20reduce.20size.3F/near/484962403\">said</a>:</p>\n<blockquote>\n<p>IIRC (from downloading of components that I accidentally Control-C-ed during decompression), you can delete the content of the JEdit folder (the folder needs to exist however)</p>\n</blockquote>\n<p>I think some more space could come from vscode deleted unless you use vscode or the lsp stuff that vscode provides from vim/emacs</p>",
        "id": 485011725,
        "sender_full_name": "irvin",
        "timestamp": 1732848602
    },
    {
        "content": "<p>I just happened to look into how to build Isabelle2024/Pure on a minimal x86_64 linux. If that is all you need, then you should only require:</p>\n<ul>\n<li>bash_process</li>\n<li>polyml</li>\n<li>isabelle_setup</li>\n<li>JDK  (you can, at your own risk, patch the system jdk into it via</li>\n</ul>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"n\">cat</span><span class=\"w\"> </span><span class=\"n\">&gt;contrib/jdk</span><span class=\"o\">-</span><span class=\"n\">21.0.3/etc/settings</span><span class=\"w\"> </span><span class=\"n\">&lt;&lt;'EOF'</span>\n<span class=\"n\">ISABELLE_JAVA_PLATFORM</span><span class=\"o\">=</span><span class=\"s\">\"$ISABELLE_PLATFORM64\"</span>\n<span class=\"n\">ISABELLE_JDK_HOME</span><span class=\"o\">=</span><span class=\"s\">\"&lt;your-jdk-home&gt;\"</span>\n<span class=\"n\">EOF</span>\n</code></pre></div>\n<p>and delete the non-etc directories of the JDK component.</p>",
        "id": 488057988,
        "sender_full_name": "Fabian Huch",
        "timestamp": 1733911098
    },
    {
        "content": "<p>Of course, if you want to run anything else, you'll need more components.</p>",
        "id": 488058335,
        "sender_full_name": "Fabian Huch",
        "timestamp": 1733911204
    }
]