[
    {
        "content": "<p>Experimenting with different representations and the lifting package, the following code</p>\n<div class=\"codehilite\"><pre><span></span><code>type_synonym &#39;i graph_rep = &quot;&#39;i fset × &#39;i fset × (&#39;i,&#39;i) fmap × (&#39;i,&#39;i) fmap&quot;\n\ntypedef &#39;i graph =\n  &quot;{(nodes, edges, src, trg) :: &#39;i graph_rep |\n      nodes edges src trg.   fmdom src |⊆| edges ∧ fmran src |⊆| nodes ∧ fmdom trg |⊆| edges ∧ fmran trg |⊆| nodes\n  }&quot;\n  apply (rule exI[where x = &quot;(fempty, fempty, fmempty, fmempty)&quot;])\n  by simp\n\nsetup_lifting type_definition_graph\n</code></pre></div>\n<p>produces an unexpected output:</p>\n<div class=\"codehilite\"><pre><span></span><code>exception THM 1 raised (line 1828 of &quot;thm.ML&quot;):\n  dest_state\n  Quotient (fmrel R) (fmmap Abs) (fmmap Rep) (fmrel T)  [Quotient R Abs Rep T]\n</code></pre></div>\n<p>Is this a known behavior?</p>",
        "id": 253006382,
        "sender_full_name": "Robert Soeldner",
        "timestamp": 1631474562
    },
    {
        "content": "<p>This issue goes away moving from <code>fmap</code> to <code>map</code>.</p>",
        "id": 253452991,
        "sender_full_name": "Robert Soeldner",
        "timestamp": 1631726128
    },
    {
        "content": "<p>In general, it looks like <code>Finite_Maps</code> can't be used with subtypes, </p>\n<div class=\"codehilite\"><pre><span></span><code> typedef &#39;a A = &quot;{a :: (&#39;a,&#39;a) fmap. True}&quot;\n   by simp\n\nsetup_lifting type_definition_A\n</code></pre></div>\n<p>yields the following exception</p>\n<div class=\"codehilite\"><pre><span></span><code>exception THM 1 raised (line 1828 of &quot;thm.ML&quot;):\n  dest_state\n  Quotient (fmrel R) (fmmap Abs) (fmmap Rep) (fmrel T)  [Quotient R Abs Rep T]\n</code></pre></div>\n<p>Any idea how to further debug this?</p>",
        "id": 253890015,
        "sender_full_name": "Robert Soeldner",
        "timestamp": 1631994954
    }
]