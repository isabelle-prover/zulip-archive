[
    {
        "content": "<p>Hi all. I was trying to use <span class=\"user-mention\" data-user-id=\"234192\">@Lars Hupel</span>  codegen for some examples and it failed. The reason was due to the issue of hupel code generation seeming to only work for function defined with fun since it requires the function induction theorem for a termination.</p>\n<p>As a result I was wondering if either the code generator or function package could be modified to support proving that a set of code equations terminate since I believe that would be useful even for the trusted code generator.</p>\n<p>I know i can just modify hupel's code generator to redefine a fun and use code_unfold as a workaround.</p>",
        "id": 491784502,
        "sender_full_name": "irvin",
        "timestamp": 1735923852
    },
    {
        "content": "<p>Some examples that failed to generate was the If and also the equal generated by free_constructors.</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"c\">(*\"If P x y ≡ (THE z::'a. (P = True ⟶ z = x) ∧ (P = False ⟶ z = y))\"*)</span>\n<span class=\"n\">embed</span><span class=\"w\"> </span><span class=\"n\">If'</span><span class=\"w\"> </span><span class=\"kp\">is</span><span class=\"w\"> </span><span class=\"n\">If</span>\n<span class=\"w\">  </span><span class=\"gr\">oops</span>\n\n<span class=\"k\">primrec</span><span class=\"w\"> </span><span class=\"n\">primIf</span><span class=\"w\"> </span><span class=\"kp\">where</span>\n<span class=\"s\">\"primIf True a b = a\"</span><span class=\"w\"> </span><span class=\"o\">|</span>\n<span class=\"s\">\"primIf False a b = b\"</span>\n\n<span class=\"n\">embed</span><span class=\"w\"> </span><span class=\"n\">primIf'</span><span class=\"w\"> </span><span class=\"kp\">is</span><span class=\"w\"> </span><span class=\"n\">primIf</span>\n<span class=\"w\">  </span><span class=\"gr\">oops</span>\n\n<span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">funIf</span><span class=\"w\"> </span><span class=\"kp\">where</span>\n<span class=\"s\">\"funIf True a b = a\"</span><span class=\"w\"> </span><span class=\"o\">|</span>\n<span class=\"s\">\"funIf False a b = b\"</span>\n\n<span class=\"n\">embed</span><span class=\"w\"> </span><span class=\"n\">funIf'</span><span class=\"w\"> </span><span class=\"kp\">is</span><span class=\"w\"> </span><span class=\"n\">funIf</span><span class=\"w\"> </span><span class=\"c\">(*Only this works*)</span>\n</code></pre></div>",
        "id": 491784515,
        "sender_full_name": "irvin",
        "timestamp": 1735923862
    },
    {
        "content": "<p>Code in question used to get induction theorem</p>\n<div class=\"codehilite\" data-code-language=\"Standard ML\"><pre><span></span><code>          <span class=\"kr\">val</span> <span class=\"nv\">fun_induct</span> <span class=\"p\">=</span> <span class=\"nn\">Option</span><span class=\"p\">.</span><span class=\"n\">mapPartial</span> <span class=\"nl\">#inducts</span> <span class=\"p\">(</span><span class=\"n\">try</span> <span class=\"p\">(</span><span class=\"nn\">Function</span><span class=\"p\">.</span><span class=\"n\">get_info</span> <span class=\"n\">lthy'</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"n\">hd</span> <span class=\"n\">const_terms</span><span class=\"p\">))</span>\n          <span class=\"kr\">val</span> <span class=\"nv\">bnf_induct</span> <span class=\"p\">=</span> <span class=\"n\">induct_of_bnf_const</span> <span class=\"n\">lthy'</span> <span class=\"p\">(</span><span class=\"n\">hd</span> <span class=\"n\">const_terms</span><span class=\"p\">)</span>\n          <span class=\"kr\">val</span> <span class=\"nv\">inducts</span> <span class=\"p\">=</span> <span class=\"n\">merge_options</span> <span class=\"p\">(</span><span class=\"n\">fun_induct</span><span class=\"p\">,</span> <span class=\"n\">bnf_induct</span><span class=\"p\">)</span>\n          <span class=\"kr\">val</span> <span class=\"p\">_</span> <span class=\"p\">=</span>\n            <span class=\"kr\">if</span> <span class=\"n\">is_none</span> <span class=\"n\">inducts</span> <span class=\"kr\">andalso</span> <span class=\"n\">length</span> <span class=\"n\">simps</span> <span class=\"n\">&gt;</span> <span class=\"mi\">1</span> <span class=\"kr\">then</span>\n              <span class=\"n\">warning</span> <span class=\"p\">(</span><span class=\"s2\">\"No induction rule found (could be problematic). Did you run this through declassify?\"</span><span class=\"p\">)</span>\n            <span class=\"kr\">else</span> <span class=\"p\">()</span>\n</code></pre></div>",
        "id": 491784655,
        "sender_full_name": "irvin",
        "timestamp": 1735923927
    },
    {
        "content": "<p>I cannot help you with the issue, but one remark: it is <em>not</em> possible to define if with a function because the arguments are evaluated (for example <code>if b = 0 then 0 else a / b</code> should not raise an exception but will with primIf)</p>",
        "id": 491947356,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1736064501
    },
    {
        "content": "<p>The main issue more right now isabelle code generator does not check that a set of code equations terminate and allows arbitrary code equations</p>",
        "id": 491948201,
        "sender_full_name": "irvin",
        "timestamp": 1736065507
    },
    {
        "content": "<p>I would it to be possible to have a standardized way of proving that the code equations i give to a code generator terminate</p>",
        "id": 491948680,
        "sender_full_name": "irvin",
        "timestamp": 1736066022
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">definition</span>\n<span class=\"s\">\"foo a = a\"</span>\n\n<span class=\"k\">declare</span><span class=\"w\"> </span><span class=\"n\">foo_def</span><span class=\"o\">[</span><span class=\"n\">code</span><span class=\"w\"> </span><span class=\"n\">del</span><span class=\"o\">]</span>\n<span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">nonterm</span><span class=\"o\">[</span><span class=\"n\">code</span><span class=\"o\">]:</span><span class=\"w\"> </span><span class=\"s\">\"foo a = foo a\"</span>\n<span class=\"w\">  </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">fact</span><span class=\"w\"> </span><span class=\"n\">refl</span><span class=\"o\">)</span>\n\n<span class=\"k\">export_code</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"w\"> </span><span class=\"kp\">in</span><span class=\"w\"> </span><span class=\"n\">SML</span>\n</code></pre></div>",
        "id": 491949364,
        "sender_full_name": "irvin",
        "timestamp": 1736066671
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"714722\">@irvin</span>! You have identified the problem correctly. The \"plain\" code generator admits non-terminating code equations, but the CakeML generator does not. If you define a function using <code>fun</code> (or with <code>function</code> and prove termination), it should work. In some situations, it will also try to guess a termination proof, but that is far from reliable. So if you want to use custom code equations for a function <code>f</code>, it's best if you just define them as a new <code>fun f'</code> and prove <code>f = f'</code>.</p>",
        "id": 491967929,
        "sender_full_name": "Lars Hupel",
        "timestamp": 1736084513
    },
    {
        "content": "<p>btw. The code generator failure came from trying to generate code from the HOL-IMP.AExp and this function fails even when i modified to use nat</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">plus</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"aexp ⇒ aexp ⇒ aexp\"</span><span class=\"w\"> </span><span class=\"kp\">where</span>\n<span class=\"s\">\"plus (N i⇩1) (N i⇩2) = N(i⇩1+i⇩2)\"</span><span class=\"w\"> </span><span class=\"o\">|</span>\n<span class=\"s\">\"plus (N i) a = (if i=0 then a else Plus (N i) a)\"</span><span class=\"w\"> </span><span class=\"o\">|</span>\n<span class=\"s\">\"plus a (N i) = (if i=0 then a else Plus a (N i))\"</span><span class=\"w\"> </span><span class=\"o\">|</span>\n<span class=\"s\">\"plus a⇩1 a⇩2 = Plus a⇩1 a⇩2\"</span>\n</code></pre></div>\n<p>it fails due to not being able to embed If and (=). manually doing it is hacky and not scalable. I would kinda like it to work and once i fix it up to work with the new cakeml semantics (<em>unverified for now</em>). Isabelle code can be used for cakeml benchmarks.</p>",
        "id": 491981643,
        "sender_full_name": "irvin",
        "timestamp": 1736096303
    },
    {
        "content": "<p>I can't remember if using <code>=</code> means that you have to run it through <code>declassify</code> first (probably yes)</p>",
        "id": 491981959,
        "sender_full_name": "Lars Hupel",
        "timestamp": 1736096591
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"234192\">Lars Hupel</span> <a href=\"#narrow/channel/202961-General/topic/Getting.20proof.20of.20termination.2Fcong.20rules.20for.20code.20equations/near/491981959\">said</a>:</p>\n<blockquote>\n<p>I can't remember if using <code>=</code> means that you have to run it through <code>declassify</code> first (probably yes)</p>\n</blockquote>\n<p>the issue seems <code>=</code> is generated by free_constructors and it does not provide an fundef_cong/induction theorem.</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">definition</span><span class=\"w\"> </span><span class=\"n\">eq_nat</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"nat ⇒ nat ⇒ bool\"</span><span class=\"w\"> </span><span class=\"kp\">where</span>\n<span class=\"s\">\"eq_nat a b = (a = b)\"</span>\n<span class=\"n\">declassify</span><span class=\"w\">  </span><span class=\"s\">\"(=)\"</span>\n<span class=\"n\">embed</span><span class=\"w\">  </span><span class=\"n\">eq_nat'</span><span class=\"w\"> </span><span class=\"kp\">is</span><span class=\"w\">  </span><span class=\"n\">eq_nat</span><span class=\"w\">  </span><span class=\"ow\">.</span>\n</code></pre></div>\n<p>this fails</p>",
        "id": 491983247,
        "sender_full_name": "irvin",
        "timestamp": 1736097713
    },
    {
        "content": "<p>Does it work if you <code>declassify \"eq_nat\"</code>?</p>",
        "id": 491983462,
        "sender_full_name": "Lars Hupel",
        "timestamp": 1736097915
    },
    {
        "content": "<p>No. its precisely failing at </p>\n<div class=\"codehilite\" data-code-language=\"tactic\"><pre><span></span><code>The error(s) above occurred for the goal statement⌂:\neq_nat' ⊢ Const (Name ''Nat_equal__nat__inst_equal__nat'') ↓ equal_nat_inst.equal_nat ```\n</code></pre></div>",
        "id": 491983550,
        "sender_full_name": "irvin",
        "timestamp": 1736097972
    },
    {
        "content": "<p>I think i see whether i can just make the <code>=</code> case done automatically by derive.</p>",
        "id": 491983629,
        "sender_full_name": "irvin",
        "timestamp": 1736098032
    },
    {
        "content": "<p>Wait i think i know the issue is caused by the code equation given is defined like this so there a implicit mutual recursion which is not being handled <code>equal_class.equal (Suc ?x2.1) (Suc ?y2.1) ≡ ?x2.1 = ?y2.1</code></p>",
        "id": 491983849,
        "sender_full_name": "irvin",
        "timestamp": 1736098235
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"714722\">irvin</span> <a href=\"#narrow/channel/202961-General/topic/Getting.20proof.20of.20termination.2Fcong.20rules.20for.20code.20equations/near/491983849\">said</a>:</p>\n<blockquote>\n<p>Wait i think i know the issue is caused by the code equation given is defined like this so there a implicit mutual recursion which is not being handled <code>equal_class.equal (Suc ?x2.1) (Suc ?y2.1) ≡ ?x2.1 = ?y2.1</code></p>\n</blockquote>\n<p>wait nvm its not the issue <code>No fundef_cong rule can be derived; this will likely not work later </code></p>",
        "id": 491984691,
        "sender_full_name": "irvin",
        "timestamp": 1736099023
    },
    {
        "content": "<p>Oh i figured it out this import is necessary for some reason<br>\n<code>  Lazy_Case.Lazy_Case (* FIXME why is this import necessary *)</code></p>",
        "id": 492042616,
        "sender_full_name": "irvin",
        "timestamp": 1736144945
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"714722\">irvin</span> <a href=\"#narrow/channel/202961-General/topic/Getting.20proof.20of.20termination.2Fcong.20rules.20for.20code.20equations/near/492042616\">said</a>:</p>\n<blockquote>\n<p>Oh i figured it out this import is necessary for some reason<br>\n<code>  Lazy_Case.Lazy_Case (* FIXME why is this import necessary *)</code></p>\n</blockquote>\n<p>wait its not <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 492043206,
        "sender_full_name": "irvin",
        "timestamp": 1736145252
    },
    {
        "content": "<p>Ok so after a bunch of print_tac I have reconcluded is that declassify does not generate induction</p>",
        "id": 492043408,
        "sender_full_name": "irvin",
        "timestamp": 1736145367
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"714722\">irvin</span> <a href=\"#narrow/channel/202961-General/topic/Getting.20proof.20of.20termination.2Fcong.20rules.20for.20code.20equations/near/492043408\">said</a>:</p>\n<blockquote>\n<p>Ok so after a bunch of print_tac I have reconcluded is that declassify does not generate induction</p>\n</blockquote>\n<p>No that's wrong. I think the issue is declassify is generating the inductive predicate wrongly due to code_post</p>",
        "id": 492058433,
        "sender_full_name": "irvin",
        "timestamp": 1736152402
    },
    {
        "content": "<p>Oh i finally managed to get it to generate it turns out that i have to use the generated definition by declassify for the embed.</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"n\">declassify</span><span class=\"w\"> </span><span class=\"n\">asimp_thm</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">asimp</span>\n\n<span class=\"n\">derive</span><span class=\"w\"> </span><span class=\"n\">evaluate</span>\n<span class=\"w\"> </span><span class=\"n\">aexp</span>\n\n<span class=\"n\">embed</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">eval</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">asimp'</span><span class=\"w\"> </span><span class=\"kp\">is</span><span class=\"w\">  </span><span class=\"n\">Aexp__compile_asimp</span>\n</code></pre></div>",
        "id": 492072105,
        "sender_full_name": "irvin",
        "timestamp": 1736157502
    }
]