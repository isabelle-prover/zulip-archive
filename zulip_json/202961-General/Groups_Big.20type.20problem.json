[
    {
        "content": "<p>I have a minimal non-working example for a type problem:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">theory</span><span class=\"w\"> </span><span class=\"n\">Groups_Big_Type_Problem</span>\n\n<span class=\"kp\">imports</span><span class=\"w\"> </span><span class=\"n\">Main</span>\n\n<span class=\"k\">begin</span>\n\n<span class=\"k\">context</span><span class=\"w\"> </span><span class=\"n\">comm_monoid_set</span>\n\n<span class=\"k\">begin</span>\n\n<span class=\"kt\">value</span><span class=\"w\"> </span><span class=\"s\">\"F\"</span>\n\n<span class=\"k\">end</span>\n\n<span class=\"k\">end</span>\n</code></pre></div>\n<p>On this, Isabelle gives a type constraint error:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"n\">Sort</span><span class=\"w\"> </span><span class=\"n\">constraint</span><span class=\"w\"> </span><span class=\"n\">equal</span><span class=\"w\"> </span><span class=\"n\">inconsistent</span><span class=\"w\"> </span><span class=\"k\">with</span><span class=\"w\"> </span><span class=\"n\">default</span><span class=\"w\"> </span><span class=\"n\">type</span><span class=\"w\"> </span><span class=\"kp\">for</span><span class=\"w\"> </span><span class=\"n\">type</span><span class=\"w\"> </span><span class=\"n\">variable</span><span class=\"w\"> </span><span class=\"s\">\"'a\"</span>\n</code></pre></div>\n<p>How can I make Isabelle show the type at F's definition at HOL.Groups_Big?</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">definition</span><span class=\"w\"> </span><span class=\"n\">F</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"('b ⇒ 'a) ⇒ 'b set ⇒ 'a\"</span>\n<span class=\"w\">  </span><span class=\"kp\">where</span><span class=\"w\"> </span><span class=\"n\">eq_fold</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"F g A = Finite_Set.fold (f ∘ g) ❙1 A\"</span>\n</code></pre></div>",
        "id": 390691998,
        "sender_full_name": "Gergely Buday",
        "timestamp": 1694600786
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kt\">term</span><span class=\"w\"> </span><span class=\"n\">F</span>\n<span class=\"c\">(*</span>\n<span class=\"c\">\"F\"</span>\n<span class=\"c\">  :: \"('b ⇒ 'a) ⇒ 'b set ⇒ 'a\"</span>\n<span class=\"c\">*)</span>\n</code></pre></div>",
        "id": 390751450,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1694619732
    },
    {
        "content": "<p>Unlike <code>value</code>, <code>term</code> does not involve the code generator…</p>",
        "id": 390751523,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1694619754
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"233198\">@Mathias Fleury</span> how code generation comes to the picture here?</p>",
        "id": 390921058,
        "sender_full_name": "Gergely Buday",
        "timestamp": 1694695202
    },
    {
        "content": "<p>value does code generation</p>",
        "id": 390925066,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1694696396
    }
]