[
    {
        "content": "<p>In HOL-Library, there are two different instantiations of <code>prod :: (ord, ord) ord</code>. If I import one of them, is everyone who in turn imports my theory forced to use the instance I chose or is there a way to hide those instances?</p>",
        "id": 206571707,
        "sender_full_name": "Lukas Stevens",
        "timestamp": 1597151134
    },
    {
        "content": "<p>No, type class instances are forever. One of the reasons why Isabelle's type classes are… not great.</p>",
        "id": 206571818,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1597151180
    },
    {
        "content": "<p>Hm, that is quite unfortunate.</p>",
        "id": 206571878,
        "sender_full_name": "Lukas Stevens",
        "timestamp": 1597151218
    },
    {
        "content": "<p>When you instantiate a type class, you're adding a definition for all the overloaded constants that it contains. You cannot have two different definitions for the same thing and you cannot \"delete\" definitions, so this cannot work.</p>",
        "id": 206571912,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1597151245
    },
    {
        "content": "<p>To support something like this, I think one would have to overhaul the entire type class system from ground up.</p>",
        "id": 206572013,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1597151283
    },
    {
        "content": "<p>Ok, what would be the canonical way to customize the comparison operator in <code>linorder.sorted_list_of_set</code>?</p>",
        "id": 206572303,
        "sender_full_name": "Lukas Stevens",
        "timestamp": 1597151435
    },
    {
        "content": "<p>I just now noticed that the type class instance I had in mind would not work anyways...</p>",
        "id": 206572617,
        "sender_full_name": "Lukas Stevens",
        "timestamp": 1597151641
    },
    {
        "content": "<p>I don't think you can simply \"customise\" it. You can of course make a type copy of whatever your type is, do the ord instance in whichever way you want it to be, and then convert back and forth</p>",
        "id": 206574191,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1597152460
    },
    {
        "content": "<p>fwiw I defined a <code>sorted_wrt_list_of_set</code> function in the AFP, in <code>Comparison_Sort_Lower_Bound.Linorder_Relations</code>, along with some other operations on orderings that  take the ordering as an explicit relation instead of from the typeclass.</p>",
        "id": 206574377,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1597152545
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">definition</span> <span class=\"n\">sorted_wrt_list_of_set</span> <span class=\"kp\">where</span>\n  <span class=\"s\">&quot;sorted_wrt_list_of_set R A =</span>\n<span class=\"s\">     (if finite A then (THE xs. set xs = A ∧ distinct xs ∧sorted_wrt R xs) else [])&quot;</span>\n</code></pre></div>",
        "id": 206574386,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1597152550
    },
    {
        "content": "<p>If your ordering isn't linear, you'll have to switch the <code>THE</code> to a <code>SOME</code>.</p>",
        "id": 206574443,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1597152582
    },
    {
        "content": "<p>Concerning the <code>sorted_wrt_list_of_set</code>: I only need <code>sorted_key_list_of_set f ≡ folding.F (insort_key f) []</code>. But then I need to reprove the lemmas that exist about <code>sorted_list_of_set</code>.</p>",
        "id": 206575136,
        "sender_full_name": "Lukas Stevens",
        "timestamp": 1597152865
    },
    {
        "content": "<p>Yeah if you really care about getting around that, you might have to do the <code>typedef</code> trick I told you about</p>",
        "id": 206575235,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1597152929
    },
    {
        "content": "<p>The problem is that antisymmetry does not hold if <code>f = fst</code>.</p>",
        "id": 206575342,
        "sender_full_name": "Lukas Stevens",
        "timestamp": 1597152978
    },
    {
        "content": "<p>yeah the whole point of sorted_list_of_set is that it is unique</p>",
        "id": 206575555,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1597153100
    },
    {
        "content": "<p>Otherwise you can just do \"sort (list_of_set …)\".</p>",
        "id": 206575596,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1597153123
    },
    {
        "content": "<p>That's not computable though, for obvious reasons.</p>",
        "id": 206575608,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1597153130
    },
    {
        "content": "<p>One would need some distinctness condition w.r.t. <code>f</code></p>",
        "id": 206576044,
        "sender_full_name": "Lukas Stevens",
        "timestamp": 1597153359
    },
    {
        "content": "<p>How would distinctness be enough? What kind of ordering do you have?</p>",
        "id": 206577032,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1597153820
    },
    {
        "content": "<p>Ah you have a linear order on the keys, I see. Yeah.</p>",
        "id": 206577067,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1597153841
    },
    {
        "content": "<p>Yes, my goal is to define a <code>fold</code> operation on Mappings. For this I first need an <code>ordered_entries</code> operation (which orders the entries by the first component).</p>",
        "id": 206577270,
        "sender_full_name": "Lukas Stevens",
        "timestamp": 1597153952
    },
    {
        "content": "<p>I think something like this already exists as long as the operation with which you fold is order-independent</p>",
        "id": 206577665,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1597154147
    },
    {
        "content": "<p>at least I vaguely remember having done such a thing for PMFs in HOL-Probability</p>",
        "id": 206577711,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1597154162
    },
    {
        "content": "<p>they are implemented as mappings, and when you want to implement monadic bind/join, you need to fold over that mapping and sum up some values</p>",
        "id": 206577775,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1597154182
    },
    {
        "content": "<p>Did you look at <code>Mapping.combine</code>?</p>",
        "id": 206577867,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1597154243
    },
    {
        "content": "<p>Yes, unfortunately this does not help me since my operation depends on both 'a and 'b</p>",
        "id": 206577979,
        "sender_full_name": "Lukas Stevens",
        "timestamp": 1597154287
    },
    {
        "content": "<p>More specifically, I need a nested fold where I combine all 'a with each other.</p>",
        "id": 206578180,
        "sender_full_name": "Lukas Stevens",
        "timestamp": 1597154401
    },
    {
        "content": "<p>I am thinking about going the less  beautiful route and just using RBTs directly.</p>",
        "id": 206578815,
        "sender_full_name": "Lukas Stevens",
        "timestamp": 1597154698
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232736\">Manuel Eberl</span> <a href=\"#narrow/stream/202961-general/topic/Hiding.20type.20class.20instances/near/206577711\">said</a>:</p>\n<blockquote>\n<p>at least I vaguely remember having done such a thing for PMFs in HOL-Probability</p>\n</blockquote>\n<p>Do you know where exactly? Grepping in <code>src/HOL/Probability</code> didn't yield anything for me.</p>",
        "id": 206593792,
        "sender_full_name": "Lukas Stevens",
        "timestamp": 1597161810
    },
    {
        "content": "<p>Ah maybe <code>fold_combine_plus</code>?</p>",
        "id": 206594374,
        "sender_full_name": "Lukas Stevens",
        "timestamp": 1597162099
    },
    {
        "content": "<p>Yes, but I think that used <code>Mapping.cobmine</code>.</p>",
        "id": 206598473,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1597164132
    }
]