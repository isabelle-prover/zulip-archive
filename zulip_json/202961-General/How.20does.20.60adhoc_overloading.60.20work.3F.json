[
    {
        "content": "<p>I know how to use <code>consts</code> and <code>overloading</code>, but I have some trouble understanding <code>adhoc_overloading</code>, whose documentation in the Isabelle/Isar Reference Manual is quite terse. What makes matters worse is that I can’t even conduct experiments with <code>adhoc_overloading</code>, as Isabelle/HOL seems to not treat <code>adhoc_overloading</code> as a keyword. Can someone please enlighten me regarding how <code>adhoc_overloading</code> is to be used and whether it is even supported in Isabelle/HOL?</p>",
        "id": 357634142,
        "sender_full_name": "Wolfgang Jeltsch",
        "timestamp": 1683820669
    },
    {
        "content": "<p>Did you import <code>HOL-Library.Adhoc_Overloading</code>?</p>",
        "id": 357688592,
        "sender_full_name": "Lukas Stevens",
        "timestamp": 1683835646
    },
    {
        "content": "<p>You have to import something? I think that wasn’t mentioned in the Isabelle/Isar Reference Manual. I’m actually surprised, since <code>adhoc_overloading</code> seems more basic to me than <code>overloading</code>.</p>\n<p>How does <code>adhoc_overloading</code> actually relate to <code>overloading</code>? To me it seems that it creates the same kind of overloadings of constants declared with <code>consts</code> and the difference is that <code>adhoc_overloading</code> uses existing constants as concrete versions of the abstract constants while <code>overloading</code> asks you to locally introduce new constants to be used as concrete versions of the abstract constants. Is this correct and the whole story, or have I misunderstood or missed something?</p>",
        "id": 357690900,
        "sender_full_name": "Wolfgang Jeltsch",
        "timestamp": 1683836413
    },
    {
        "content": "<p><a href=\"https://stackoverflow.com/questions/61692987/whats-the-difference-between-overloading-and-adhoc-overloading\">This stackoverflow thread might be helpful</a></p>",
        "id": 357692809,
        "sender_full_name": "Simon Roßkopf",
        "timestamp": 1683837021
    },
    {
        "content": "<p>Thanks a lot for this link.</p>\n<p>My use case is common notation for different tuples of types (something I could solve with multi-parameter type classes in Haskell). So far, I thought that <code>overloading</code> would generally be the way to go, as it is more high-level, but this StackOverflow thread suggests that <code>adhoc_overloading</code> is to be used in such situations.</p>\n<p>What are the pros and cons of the two mechanisms? I understand that with <code>overloading</code> you don’t get this exponentially growing number of different parse trees out of which hopefully only one is type-correct, which is an issue when using the same notation for entirely different constants or abbreviations. Will I reintroduce this problem when switching to <code>adhoc_overloading</code>, because ad-hoc overloading is resolved by the term parser?</p>",
        "id": 358441320,
        "sender_full_name": "Wolfgang Jeltsch",
        "timestamp": 1684152830
    },
    {
        "content": "<p>I experimented a bit with <code>adhoc_overloading</code>, which improved my intuition about it.</p>\n<p>One thing I found, which was not surprising given the explanation in this StackOverflow thread, was that with <code>adhoc_overloading</code> you cannot introduce generic definitions on top of your overloaded constants, since apparently they have to be resolved immediately.</p>\n<p>For example, assume you have a constant <code>(+)</code> and a few implementations of it using ad-hoc overloading. Then you want to define summing the elements of a list using <code>(+)</code> for <em>any</em> type that has a <code>(+)</code> implementation, but you can’t: Isabelle wants to use a <em>particular</em> <code>(+)</code> implementation also in your definition of list summing.</p>\n<p>In my use case, I want to have a generic definition, however. The above-mentioned StackOverflow thread presents <code>adhoc_overloading</code> as a means to define shared syntax. My use case is mostly about defining shared syntax too, but I think that <code>adhoc_overloading</code> isn’t really helpful here, because I want to have that generic definition in addition. In fact, my use case seems to be much more like a use case for type classes, and the only reason why I’m resorting to bare overloading at all is that Isabelle doesn’t support multi-parameter type classes. Using <code>overloading</code> gets reasonably close to multi-parameter type classes though, which is probably why using it seems to be the correct choice in my situation.</p>",
        "id": 358454346,
        "sender_full_name": "Wolfgang Jeltsch",
        "timestamp": 1684156041
    }
]