[
    {
        "content": "<p>The type system of Isabelle is restricted. Simple-typed lambda calculus is too limited. It is a well-known deficiency compared with CoC-based PAs like Coq. Any deep user of Isabelle feels this restriction I believe.</p>\n<p>We cannot make a generic shallowly-embedded semantic framework, whereas, in CoC, one can simply let terms bind types to make that, like <code>datatype generic_model = Constructor (t:Type) t</code> and the Constructor has type <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∀</mi><mi>t</mi><mo>:</mo><mrow><mi mathvariant=\"normal\">T</mi><mi mathvariant=\"normal\">y</mi><mi mathvariant=\"normal\">p</mi><mi mathvariant=\"normal\">e</mi></mrow><mo separator=\"true\">,</mo><mo stretchy=\"false\">(</mo><mi>t</mi><mo>→</mo><mrow><mi mathvariant=\"normal\">g</mi><mi mathvariant=\"normal\">e</mi><mi mathvariant=\"normal\">n</mi><mi mathvariant=\"normal\">e</mi><mi mathvariant=\"normal\">r</mi><mi mathvariant=\"normal\">i</mi><mi mathvariant=\"normal\">c</mi><mi mathvariant=\"normal\">_</mi><mi mathvariant=\"normal\">m</mi><mi mathvariant=\"normal\">o</mi><mi mathvariant=\"normal\">d</mi><mi mathvariant=\"normal\">e</mi><mi mathvariant=\"normal\">l</mi><mo stretchy=\"false\">)</mo></mrow></mrow><annotation encoding=\"application/x-tex\">\\forall t:\\mathrm{Type}, (t \\rightarrow \\mathrm{generic\\_model)}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord\">∀</span><span class=\"mord mathnormal\">t</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathrm\">Type</span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">t</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.06em;vertical-align:-0.31em;\"></span><span class=\"mord\"><span class=\"mord mathrm\">generic_model</span><span class=\"mclose\">)</span></span></span></span></span>. </p>\n<p>Maybe, by heavily using predicates, the nature of Isabelle doesn't need types to bind terms,  but, it's perhaps significant to allow terms to bind types, to achieve the generic framework as mentioned above.</p>\n<p>There is an extension of HOL4 that implements <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>λ</mi><mi>ω</mi></msub></mrow><annotation encoding=\"application/x-tex\">\\lambda_\\omega</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8444em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">λ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03588em;\">ω</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>, named HOL-omega. They claim existing proofs of original HOL4 can be retained on HOL-omega, and also all inference rules, though I'm not sure whether tactics and automation can also be retained. It seems to be a feasible approach for us because we have a similar logic foundation (for Isabelle/HOL).</p>\n<p>Maybe, experts, we can discuss this approach. Would it be hard? What are difficulties we might meet?</p>",
        "id": 297209397,
        "sender_full_name": "Qiyuan Xu",
        "timestamp": 1662377138
    },
    {
        "content": "<p>see <a href=\"https://en.wikipedia.org/wiki/Lambda_cube\">https://en.wikipedia.org/wiki/Lambda_cube</a></p>",
        "id": 297210737,
        "sender_full_name": "Qiyuan Xu",
        "timestamp": 1662377741
    },
    {
        "content": "<p>Some time ago, I briefly chatted with <span class=\"user-mention\" data-user-id=\"233155\">@Lukas Stevens</span> about this. Maybe there would be some theoretical subtleties (e.g. due to Isabelle's typeclasses), but I think the main problem would be that you would have to change almost every piece of ML code.</p>",
        "id": 299730275,
        "sender_full_name": "Kevin Kappelmann",
        "timestamp": 1663673568
    }
]