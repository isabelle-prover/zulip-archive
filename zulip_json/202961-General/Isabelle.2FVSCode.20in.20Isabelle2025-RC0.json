[
    {
        "content": "<p>After many years, I've tried to give Isabelle/VSCode another shot with Isabelle2025-RC0.<br>\nI mainly want to give a quick user report (mostly of things I found cubersome or missing).<br>\nBut I was hoping that some of these things are known issues, for which people already have workarounds.</p>\n<p>First, it's great to have the improved state panel, which brings Isabelle/VSCode much closer to productive usage for me. Completions are also a great improvement.</p>\n<p>Second, I was wondering how people work without the theories panel?<br>\nI can see that I find errors in the Problems view, which is good, but not knowing how far my theories have been checked and whether there is a non-terminating proof somewhere bothers me quite a bit.</p>\n<p><strong>Issues</strong></p>\n<p><strong>State Panel</strong></p>\n<ul>\n<li>Hovering doesn’t display type information, only the location of the link destination; this is a really important feature in my Isabelle/jEdit usage</li>\n<li>Locate button does not work for me</li>\n<li>Sometimes it takes minutes to open?</li>\n</ul>\n<p><strong>Editor</strong></p>\n<ul>\n<li>Popups display things like <code>command</code> strangely</li>\n<li>Popups do not have coloring</li>\n<li>Popups do not have mouse-over features</li>\n<li>Completions seem to be a lot more dependent on the current context than in Isabelle/jEdit:<br>\n    - Within a text block I can type \\` to complete to ‹›, but not outside of it<br>\n    - Somehow if a part of a theory isn’t fully checked correctly yet, completions like <code>@{thm}</code> do not work properly: they will complete to something like <code>@{thm}}</code> because VSCode prematurely adds the second curly brace</li>\n<li>Clicking things in the editor is sometimes very erratic; some terms simply cannot be clicked, and trying to click them or even hovering over them seems to reload the current buffer; I couldn't make out the exact conditions under which this is happening yet</li>\n</ul>",
        "id": 495379555,
        "sender_full_name": "Simon Wimmer",
        "timestamp": 1737582433
    },
    {
        "content": "<blockquote>\n<p>but not knowing how far my theories have been checked</p>\n</blockquote>\n<p>do you have the red markings in the minimap? i think they show where errors are.<br>\nAnother vscode extension i found extremely useful is \"Error Lens\" from \"usernamehw\". It inlines the error messages in red font.</p>",
        "id": 500381958,
        "sender_full_name": "Moritz R",
        "timestamp": 1739879479
    },
    {
        "content": "<p>I also use the extension \"Hypersnips\" which lets you define snippets that auto-insert e.g. ∨ on typing \"\\or\" or a pair of ‹› when typing \"cite\".</p>",
        "id": 500382622,
        "sender_full_name": "Moritz R",
        "timestamp": 1739879702
    },
    {
        "content": "<p>I find the state panel opens more reliably if i put the cursor at a point where there is a nontrivial proof state</p>",
        "id": 500383118,
        "sender_full_name": "Moritz R",
        "timestamp": 1739879877
    },
    {
        "content": "<p>i have also put </p>\n<div class=\"codehilite\" data-code-language=\"JSON\"><pre><span></span><code><span class=\"w\"> </span><span class=\"nt\">\"editor.tokenColorCustomizations\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span>\n\n\n\n<span class=\"w\">    </span><span class=\"nt\">\"textMateRules\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[</span>\n<span class=\"w\">      </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"nt\">\"scope\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[</span>\n<span class=\"w\">          </span><span class=\"s2\">\"source.isabelle\"</span>\n<span class=\"w\">        </span><span class=\"p\">],</span>\n<span class=\"w\">        </span><span class=\"nt\">\"settings\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">          </span><span class=\"nt\">\"foreground\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"#53a5a8f8\"</span>\n<span class=\"w\">        </span><span class=\"p\">}</span>\n<span class=\"w\">      </span><span class=\"p\">},</span>\n<span class=\"w\">      </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"nt\">\"name\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"String\"</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"nt\">\"scope\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"string\"</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"nt\">\"settings\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">          </span><span class=\"nt\">\"foreground\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"#c2aa22\"</span>\n<span class=\"w\">        </span><span class=\"p\">}</span>\n<span class=\"w\">      </span><span class=\"p\">},</span>\n<span class=\"w\">      </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"nt\">\"name\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"Class name\"</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"nt\">\"scope\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"entity.name.type, entity.name.class, entity.name.namespace, entity.name.scope-resolution\"</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"nt\">\"settings\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">          </span><span class=\"nt\">\"fontStyle\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"underline\"</span>\n<span class=\"w\">        </span><span class=\"p\">}</span>\n<span class=\"w\">      </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"p\">]</span>\n<span class=\"w\">  </span><span class=\"p\">},</span>\n</code></pre></div>\n<p>into my settings.json (while using the color theme Default Light+)<br>\n(one can search in the settings menu for <code>Editor: Token Color Customizations</code> and click Edit in settings.json to find this file). This changes the color and style of some of the keywords. I honestly don't remember to what these correspond, but i believe these might be worth tinkering with. In particular this defines a different color for theorem names and yet unparsed contents of a thy file.</p>",
        "id": 500384794,
        "sender_full_name": "Moritz R",
        "timestamp": 1739880405
    },
    {
        "content": "<p>The underlining thingy is for isar keywords like \"obtain\"</p>",
        "id": 500385002,
        "sender_full_name": "Moritz R",
        "timestamp": 1739880474
    },
    {
        "content": "<p>Maybe other vscode users can share their settings/extensions etc.  for making the vscode experience better aswell?</p>",
        "id": 500385256,
        "sender_full_name": "Moritz R",
        "timestamp": 1739880551
    }
]