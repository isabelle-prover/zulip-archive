[
    {
        "content": "<p>I have declared an inductive predicate in an unnamed context like so:</p>\n<div class=\"codehilite\"><pre><span></span>context\n  fixes a_convs :: &quot;&#39;a ⇒ &#39;a fm ⇒ &#39;a_conv_prf ⇒ bool&quot;\n  fixes aneg_convs :: &quot;&#39;a ⇒ &#39;a fm ⇒ &#39;aneg_conv_prf ⇒ bool&quot;\nbegin\ninductive fm_convs :: &quot;&#39;a fm ⇒ &#39;a fm ⇒ (&#39;a_conv_prf, &#39;aneg_conv_prf) fm_conv_prf ⇒ bool&quot;\nend\n</pre></div>\n\n\n<p>Suppose that I have instantiations for <code>a_convs</code> and <code>aneg_convs</code>. I can declare an abbreviation for <code>fm_convs.induct</code> like so:</p>\n<div class=\"codehilite\"><pre><span></span>lemmas convs_induct = fm_convs.induct[of a_convs aneg_convs]\n</pre></div>\n\n\n<p>The problem now is that convs_induct does not have the case names attached to fm_convs.induct. Is there a way to transfer those case names automatically?</p>",
        "id": 192242598,
        "sender_full_name": "Lukas Stevens",
        "timestamp": 1585567842
    },
    {
        "content": "<p>I don't know any automatic version, but the manual  version should work:<br>\n<code>lemmas convs_induct = fm_convs.induct[of a_convs aneg_convs, case_names c1 c2 c3]</code><br>\nYou can name the cases with <code>case_names</code>.</p>",
        "id": 192256430,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1585575553
    },
    {
        "content": "<p>and you probably want <code>consumes 1</code> also.</p>",
        "id": 192272058,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1585582000
    }
]