[
    {
        "content": "<p>There is an equation <code>Let_def</code>, but it’s not part of the default simpset. Instead, there is a seemingly complicated simproc <code>let_simp</code> that seems to invoke <code>Let_def</code> in certain situations but not in others. Why is this?</p>\n<p>Interestingly, there seem to be situations, partly quite simple ones actually, where the <code>let_simp</code> simproc fails but adding <code>Let_def</code> as a rewrite rule succeeds. <span class=\"user-mention\" data-user-id=\"423666\">@Javier Diaz</span> and I have experienced one such situation in our code, and the AFP seems to contain more (there are multiple instances of <code>simp add: Let_def</code> there). What are the potential problems with adding <code>Let_def</code> as a rewrite rule? When is it safe and when not?</p>",
        "id": 396178483,
        "sender_full_name": "Wolfgang Jeltsch",
        "timestamp": 1697066625
    },
    {
        "content": "<p>The size of the term can explode</p>",
        "id": 396215095,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1697087011
    },
    {
        "content": "<p>I have rarely seen that as a problem though</p>",
        "id": 396215170,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1697087045
    },
    {
        "content": "<p>Think of</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">(</span>\n<span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"kp\">if</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"n\">else</span><span class=\"w\"> </span><span class=\"n\">g</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"kp\">in</span>\n<span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">*</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"kp\">in</span>\n<span class=\"n\">2*y</span><span class=\"w\"> </span><span class=\"n\">*</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>becoming</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">⟶</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">2</span><span class=\"w\"> </span><span class=\"n\">*</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"n\">*</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">2</span><span class=\"w\"> </span><span class=\"n\">*</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">*</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"n\">*</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"o\">))</span><span class=\"w\"> </span><span class=\"n\">∧</span>\n<span class=\"w\">    </span><span class=\"o\">(</span><span class=\"n\">¬</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">⟶</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">2</span><span class=\"w\"> </span><span class=\"n\">*</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">g</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"n\">*</span><span class=\"w\"> </span><span class=\"n\">g</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">2</span><span class=\"w\"> </span><span class=\"n\">*</span><span class=\"w\"> </span><span class=\"n\">g</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">*</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">g</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"n\">*</span><span class=\"w\"> </span><span class=\"n\">g</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">g</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>if x and y are meaningfull names, they are much better</p>",
        "id": 396215425,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1697087260
    },
    {
        "content": "<p>That makes sense.</p>\n<p>I understand that <code>let_simp</code> applies <code>Let_def</code> if the variable bound by the <code>let</code> occurs at most one time, but what does it do when there are multiple occurrences? It apparently does <em>something</em>, but I don’t know what.</p>",
        "id": 396271361,
        "sender_full_name": "Wolfgang Jeltsch",
        "timestamp": 1697111212
    }
]