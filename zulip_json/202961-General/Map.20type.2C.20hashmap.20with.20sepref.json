[
    {
        "content": "<p>Hello. I am using the imperative refinement framework and sepref. I have a question regarding the use of the map type <code>'a ⇒ 'b option</code> and the use of hashmaps in imperative HOL code. I defined a monadic function that maps a natural number to each member of a specified set,<code>definition compute_scores :: \"'a set ⇒ 'a Profile_List ⇒ ('a ⇀ nat) nres\" </code>. The function is can be refined to imperative HOL with sepref using the hashmap implmentation from the imperative collections framework.  I now want to define a separate function that takes a map and returns the maximum of all values. My algorithmic Idea is something like this: <a href=\"/user_uploads/14278/q5GmcL7RbOyZzU6IEzOFLFMK/Bildschirmfoto_2022-11-30_14-56-50.png\">Bildschirmfoto_2022-11-30_14-56-50.png</a> </p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/14278/q5GmcL7RbOyZzU6IEzOFLFMK/Bildschirmfoto_2022-11-30_14-56-50.png\" title=\"Bildschirmfoto_2022-11-30_14-56-50.png\"><img src=\"/user_uploads/14278/q5GmcL7RbOyZzU6IEzOFLFMK/Bildschirmfoto_2022-11-30_14-56-50.png\"></a></div><p>I can't synthesize imperative HOL code using sepref. I think, I cannot use the dom function, neither the Option.the operator. How can I access the values in the map, especially with sepref in mind?</p>",
        "id": 313065778,
        "sender_full_name": "Valentin Springsklee",
        "timestamp": 1669816789
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"505164\">Valentin Springsklee</span> has marked this topic as resolved.</p>",
        "id": 313066729,
        "sender_full_name": "Notification Bot",
        "timestamp": 1669816999
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"505164\">Valentin Springsklee</span> has marked this topic as unresolved.</p>",
        "id": 313066807,
        "sender_full_name": "Notification Bot",
        "timestamp": 1669817023
    },
    {
        "content": "<p>in which step does sepref fail?</p>",
        "id": 313068478,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1669817481
    },
    {
        "content": "<p>To test if there is some missing precondition or some missing function:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"n\">sepref_dbg_keep</span><span class=\"w\"></span>\n<span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"n\">sepref_dbg_trans_keep</span><span class=\"w\"></span>\n<span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"n\">sepref_dbg_trans_step_keep</span><span class=\"w\"></span>\n<span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"n\">sepref_dbg_side_unfold</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 313068716,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1669817543
    },
    {
        "content": "<p>To test if some identification fails:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"w\">  </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"n\">sepref_dbg_preproc</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"n\">sepref_dbg_cons_init</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"n\">sepref_dbg_id</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"n\">sepref_dbg_monadify</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"n\">sepref_dbg_opt_init</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"n\">sepref_dbg_trans</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"n\">sepref_dbg_opt</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"n\">sepref_dbg_cons_solve</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"n\">sepref_dbg_cons_solve</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"n\">sepref_dbg_cons_solve_cp</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"n\">sepref_dbg_constraints</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 313068867,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1669817592
    },
    {
        "content": "<p><code>hm_it_has_next</code> and <code>hm_it_init </code> seem to exist for the purpose of iterating</p>",
        "id": 313070834,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1669818162
    },
    {
        "content": "<p>but I don't know if there is a proper setup</p>",
        "id": 313070946,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1669818194
    },
    {
        "content": "<p>Hello, thanks for the quick reply! So, we have</p>\n<p><code>sepref_definition tryitmap \n  is \" scoremax\" :: \"((hm.assn (nat_assn) (nat_assn))⇧k →⇩a (nat_assn))\"\n  unfolding scoremax_def[abs_def]</code></p>\n<p>Sepref fails in the trans phase. <code>sepref_dbg_trans_keep</code> promts \"Phase Translation steps <br>\n*** Wrong number of produced goals\" . And after applying <code>sepref_dbg_trans_step_keep</code>, Phase Apply rule <br>\n*** Phase tactic failed is promted. Can it be, that dom and ran</p>",
        "id": 313071302,
        "sender_full_name": "Valentin Springsklee",
        "timestamp": 1669818297
    },
    {
        "content": "<p>Then you have to look at the first goal (I suggest using <code>subgoal premises p</code>): If the goal contains a precondition, then the proof of the precondition failed. If it contains a function to synthesize, then some rule is missing</p>",
        "id": 313073008,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1669818756
    },
    {
        "content": "<p>Ok thank you! after applying <code>subgoal premise p</code>, i get <code>hn_refine (hn_ctxt (hm.assn nat_assn nat_assn) x_ xi_) (m' x_ xi_) (Γ'' x_ xi_)\n     (Rh x_ xi_) (RETURN (dom x_))</code>. I have had that error before using the dom function in a command (not assertion). Do you have a general tip how to iterate over any (finite) map?</p>",
        "id": 313073849,
        "sender_full_name": "Valentin Springsklee",
        "timestamp": 1669818971
    },
    {
        "content": "<p>That indicate that sepref does not know what to do with dom</p>",
        "id": 313075262,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1669819359
    },
    {
        "content": "<p>I have never tried to iterate over finite maps (in my use case, I can just iterate over all values up to the maximum)</p>",
        "id": 313075868,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1669819517
    },
    {
        "content": "<p>I would search for all theorems involving hm_it_has_next (find_theorems!) to see if it used anywhere else</p>",
        "id": 313075965,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1669819548
    },
    {
        "content": "<p>Thank you! That is a great tip. I have wondered about iterators.</p>",
        "id": 313076556,
        "sender_full_name": "Valentin Springsklee",
        "timestamp": 1669819726
    }
]