[
    {
        "content": "<p>Haftmann and Wenzel writes this in their <em>Constructive Type Classes in Isabelle</em> paper:</p>\n<blockquote>\n<p>Module systems (especially for theorem provers) provide a more general perspective on our work. Roughly speaking, the huge amount of existing approaches can be categorized as follows: (1) full / explicit module languages vs. (2) restricted / implicit structuring mechanisms. ML functors [16] and Coq modules [4, 5] represent the Ô¨Årst kind, type classes in Haskell or Isabelle the second, more light-weight one.</p>\n</blockquote>\n<p>What is a practical need for Coq modules' extended functionality that is not present in Isabelle's locales and type classes?</p>",
        "id": 528067649,
        "sender_full_name": "Gergely Buday",
        "timestamp": 1752149600
    },
    {
        "content": "<p>This answer might be helpful <a href=\"https://stackoverflow.com/questions/36927169/ml-modules-vs-haskell-type-classes\">https://stackoverflow.com/questions/36927169/ml-modules-vs-haskell-type-classes</a></p>",
        "id": 528071143,
        "sender_full_name": "Christian Pardillo Laursen",
        "timestamp": 1752150638
    },
    {
        "content": "<p>With Isabelle type classes, you're forced to pick one implementation of a typeclass per type, whereas with modules you can have several. You can circumvent this by using locales rather than typeclasses, though, but there may be other reasons why modules are more powerful.</p>",
        "id": 528071874,
        "sender_full_name": "Christian Pardillo Laursen",
        "timestamp": 1752150869
    }
]