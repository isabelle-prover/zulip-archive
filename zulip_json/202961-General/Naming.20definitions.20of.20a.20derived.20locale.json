[
    {
        "content": "<p>I have</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">locale</span><span class=\"w\"> </span><span class=\"n\">monoid_op</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\"> </span><span class=\"n\">base</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">monoid</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"w\"> </span><span class=\"kp\">for</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"o\">::</span><span class=\"s\">\"'a ⇒ 'a ⇒ 'a\"</span><span class=\"w\"> </span><span class=\"kp\">and</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"o\">::</span><span class=\"s\">\"'a\"</span><span class=\"w\"> </span><span class=\"o\">+</span>\n<span class=\"kp\">fixes</span><span class=\"w\"> </span><span class=\"n\">mult</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"'a ⇒ 'a ⇒ 'a\"</span><span class=\"w\">  </span><span class=\"kp\">defines</span><span class=\"w\"> </span><span class=\"s\">\"mult a b ≡ m b a\"</span>\n<span class=\"kp\">fixes</span><span class=\"w\"> </span><span class=\"n\">unit</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"'a\"</span><span class=\"w\">  </span><span class=\"kp\">defines</span><span class=\"w\"> </span><span class=\"s\">\"unit ≡ e\"</span>\n</code></pre></div>\n<p>I can do </p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">interpretation</span><span class=\"w\"> </span><span class=\"n\">list_monoid</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">monoid</span><span class=\"w\"> </span><span class=\"n\">List.append</span><span class=\"w\"> </span><span class=\"s\">\"[]\"</span>\n<span class=\"k\">proof</span><span class=\"w\"> </span><span class=\"n\">unfold_locales</span>\n<span class=\"w\">  </span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"s\">\"⋀a. [] @ a = a\"</span><span class=\"w\"> </span><span class=\"k\">unfolding</span><span class=\"w\"> </span><span class=\"n\">append_Nil</span><span class=\"w\"> </span><span class=\"ow\">..</span>\n<span class=\"k\">next</span>\n<span class=\"w\">  </span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"s\">\"⋀a. a @ [] = a\"</span><span class=\"w\"> </span><span class=\"k\">unfolding</span><span class=\"w\"> </span><span class=\"n\">append.right_neutral</span><span class=\"w\"> </span><span class=\"ow\">..</span>\n<span class=\"k\">qed</span>\n</code></pre></div>\n<p>but when I am trying to do</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">interpretation</span><span class=\"w\"> </span><span class=\"n\">list_monoid_op</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">monoid_op</span><span class=\"w\"> </span><span class=\"n\">List.append</span><span class=\"w\"> </span><span class=\"s\">\"[]\"</span>\n<span class=\"k\">proof</span><span class=\"w\"> </span><span class=\"n\">unfold_locales</span>\n</code></pre></div>\n<p>I get</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">proof</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">state</span><span class=\"o\">)</span>\n<span class=\"n\">goal</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">2</span><span class=\"w\"> </span><span class=\"n\">subgoals</span><span class=\"o\">):</span>\n<span class=\"w\"> </span><span class=\"n\">1.</span><span class=\"w\"> </span><span class=\"n\">⋀a</span><span class=\"w\"> </span><span class=\"n\">b.</span><span class=\"w\"> </span><span class=\"n\">mult</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"n\">≡</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"n\">@</span><span class=\"w\"> </span><span class=\"n\">a</span>\n<span class=\"w\"> </span><span class=\"n\">2.</span><span class=\"w\"> </span><span class=\"n\">unit</span><span class=\"w\"> </span><span class=\"n\">≡</span><span class=\"w\"> </span><span class=\"o\">[]</span>\n</code></pre></div>\n<p>where mult is a free variable, I cannot unfold its definitions from the monoid_op definition. </p>\n<p>How should I do this?</p>",
        "id": 520923915,
        "sender_full_name": "Gergely Buday",
        "timestamp": 1748447147
    },
    {
        "content": "<p><em>Why</em> you should do this is the real question here. This seems extremely silly to me…</p>",
        "id": 520939488,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1748452234
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">locale</span><span class=\"w\"> </span><span class=\"n\">monoid_op</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\"> </span><span class=\"n\">base</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">monoid</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"w\"> </span><span class=\"kp\">for</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"o\">::</span><span class=\"s\">\"'a ⇒ 'a ⇒ 'a\"</span><span class=\"w\"> </span><span class=\"kp\">and</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"o\">::</span><span class=\"s\">\"'a\"</span>\n<span class=\"k\">begin</span>\n<span class=\"k\">definition</span><span class=\"w\"> </span><span class=\"n\">mult</span><span class=\"w\"> </span><span class=\"kp\">where</span><span class=\"w\"> </span><span class=\"s\">‹mult = m›</span>\n<span class=\"k\">end</span>\n</code></pre></div>\n<p>does the same job and is much easier</p>",
        "id": 520939645,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1748452292
    },
    {
        "content": "<p>Farmer in his Little Theories paper gives this example</p>",
        "id": 520939691,
        "sender_full_name": "Gergely Buday",
        "timestamp": 1748452310
    },
    {
        "content": "<p>In the locale documentation it says that <code>defines</code> is only for backwards compatibility, ie you should not use it for new developments</p>",
        "id": 521062764,
        "sender_full_name": "Jan van Brügge",
        "timestamp": 1748513441
    }
]