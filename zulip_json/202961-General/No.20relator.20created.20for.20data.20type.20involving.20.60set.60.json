[
    {
        "content": "<p>Consider the following (contrived) example:</p>\n<div class=\"codehilite\"><pre><span></span><code>datatype &#39;a rep = Rep ‹&#39;a set›\n\ntypedef &#39;a abs = &quot;{Rep A | A :: &#39;a set. finite A}&quot;\n  by blast\n\nsetup_lifting type_definition_abs\n</code></pre></div>\n\n<p>The last line gives the following warning:</p>\n<div class=\"codehilite\"><pre><span></span><code>Generation of a parametrized correspondence relation failed.\nReason:  No relator for the type &quot;rep&quot; found.\n</code></pre></div>\n\n<p>And indeed no relator has been created for <code>rep</code>.</p>\n<p>However, the following succeeds:</p>\n<div class=\"codehilite\"><pre><span></span><code>typedef &#39;a direct = &quot;{A | A :: &#39;a set. finite A}&quot;\n  by blast\n\nsetup_lifting type_definition_direct\n</code></pre></div>\n\n<p>This shows that there is a relator for <code>set</code> and that <code>setup_lifting</code> can work with it.</p>\n<p>Why isn’t there a relator for <code>Rep</code>? Furthermore, how is this problem fixed most easily? In the real, non-contrived development, there are multiple <code>set</code> fields.</p>",
        "id": 252807587,
        "sender_full_name": "Wolfgang Jeltsch",
        "timestamp": 1631289082
    },
    {
        "content": "<p>Hmm, let me have a guess: The <code>set</code> type is not a BNF, since its set function is the identity and a given set can have as many elements as the element type, so that an upper bound on the number of elements that is independent of the element type does not exist. However, <code>datatype</code> apparently generates a relator only for those type parameters that aren’t used as parameters of types that aren’t BNFs. Is this correct?</p>",
        "id": 252833420,
        "sender_full_name": "Wolfgang Jeltsch",
        "timestamp": 1631300317
    },
    {
        "content": "<p>Yes, this is correct. As a workaround, you can define your own relator on rep and register it with the Lifting package. See <a href=\"https://www.isa-afp.org/browser_info/current/AFP/BNF_CC/DDS.html\">https://www.isa-afp.org/browser_info/current/AFP/BNF_CC/DDS.html</a> for an example how this is done (there the function space is the culprit why the mapper/relator do not touch the 'a type variable). The relevant theorems for lifting are the ones carrying attributes (<code>relator_eq</code>, <code>relator_mono</code>, <code>relator_distr</code>, <code>quot_map</code>, and potentially also some of the <code>transfer_rule</code>s although I'm not sure there which ones are strictly necessary).</p>",
        "id": 252889528,
        "sender_full_name": "Dmitriy Traytel",
        "timestamp": 1631344543
    }
]