[
    {
        "content": "<p>Hi,</p>\n<p>Suppose I have defined a function <code>id_to_nat</code> in Isabelle on a finite datatype like this:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">datatype</span><span class=\"w\"> </span><span class=\"n\">DeviceID</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Dev1</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Dev2</span>\n<span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">id_to_nat</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"DeviceID ⇒ nat\"</span><span class=\"w\"> </span><span class=\"kp\">where</span>\n<span class=\"w\">  </span><span class=\"s\">\"id_to_nat Dev1 = 0\"</span>\n<span class=\"o\">|</span><span class=\"w\"> </span><span class=\"s\">\"id_to_nat Dev2 = 1\"</span>\n\n\n<span class=\"w\">  </span><span class=\"kt\">value</span><span class=\"w\"> </span><span class=\"s\">\"id_to_nat\"</span>\n</code></pre></div>\n<p>The evaluation of id_to_nat prints out as \"_\", despite it being a quite simple mapping. <br>\nI want to be able to see the content of the mapping <code>id_to_nat</code>, somewhat like </p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"n\">id_to_nat</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"DeviceID =&gt; nat\"</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">Dev1</span><span class=\"o\">--</span><span class=\"n\">&gt;0</span><span class=\"o\">],</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">Dev2</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">&gt;1</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>In my actual project a map is preferred over two lists so using lists to represent the actual version of \"id_to_nat\" is impossible. Any suggestions on  circumventions/workarounds?</p>\n<p>Thanks a lot,<br>\nChengsong</p>",
        "id": 375833918,
        "sender_full_name": "Chengsong Tan",
        "timestamp": 1689539780
    },
    {
        "content": "<p>It is not clear why you would want that. Ctrl-click shows the definition… Which gives you the entire information needed</p>",
        "id": 375882968,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1689566930
    },
    {
        "content": "<p>Or, if you want to see the SML Code, you need to do </p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">export_code</span><span class=\"w\"> </span><span class=\"n\">id_to_nat</span><span class=\"w\"> </span><span class=\"kp\">in</span><span class=\"w\"> </span><span class=\"n\">SML</span>\n</code></pre></div>",
        "id": 375883003,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1689566953
    },
    {
        "content": "<p>In this case you can actually do:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">code</span><span class=\"o\">]:</span><span class=\"w\"> </span><span class=\"s\">‹id_to_nat = (λx. case x of Dev1 ⇒ 0 | Dev2 ⇒ 1)›</span>\n<span class=\"w\">  </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">auto</span><span class=\"w\"> </span><span class=\"n\">intro</span><span class=\"o\">!:</span><span class=\"w\"> </span><span class=\"n\">ext</span><span class=\"w\"> </span><span class=\"n\">split</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">DeviceID.split</span><span class=\"o\">)</span>\n\n<span class=\"kt\">value</span><span class=\"w\"> </span><span class=\"s\">\"id_to_nat x\"</span>\n</code></pre></div>",
        "id": 375883154,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1689567068
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"233198\">Mathias Fleury</span> <a href=\"#narrow/stream/202961-General/topic/Prettyprinting.20function.20on.20a.20finite.20domain/near/375882968\">said</a>:</p>\n<blockquote>\n<p>It is not clear why you would want that. Ctrl-click shows the definition… Which gives you the entire information needed</p>\n</blockquote>\n<p>Imagine that mapping changes as a part of a large record state.<br>\nFor that, the function is used as not a definition but a structured way of expressing some system state.<br>\nAnd we want to be able to inspect that state conveniently by printing it out.</p>\n<p>For example, the actual finite-domain function record I am trying to print will result in something like this:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"n\">⦇hostcache</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">⦇CLEntry.content</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Some</span><span class=\"w\"> </span><span class=\"n\">0</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">block_state</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Modified⦈</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">devclmap</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">_,</span><span class=\"w\"> </span><span class=\"n\">reqs</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">_,</span><span class=\"w\"> </span><span class=\"n\">snpresps</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">_,</span><span class=\"w\"> </span><span class=\"n\">dthdatas</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">_,</span><span class=\"w\"> </span><span class=\"n\">snoops</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">_,</span><span class=\"w\"> </span><span class=\"n\">reqresps</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">_,</span>\n<span class=\"w\">     </span><span class=\"n\">htddatas</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">_,</span><span class=\"w\"> </span><span class=\"n\">program</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">_,</span><span class=\"w\"> </span><span class=\"n\">counter</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">2</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">registers</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">_,</span><span class=\"w\"> </span><span class=\"n\">devtrackers</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">_,</span><span class=\"w\"> </span><span class=\"n\">hosttracker</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">_,</span><span class=\"w\"> </span><span class=\"n\">issuedEvents</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">_,</span><span class=\"w\"> </span><span class=\"n\">eventsToIssue</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">_</span><span class=\"n\">⦈</span>\n</code></pre></div>\n<p>And there's no way to inspect it like you did for <code>id_to_nat</code>, as the maps such as <code>devclmap</code> is constantly changing as part of a model representing the possible next states of a (cache coherent multicore) system under a bunch of non-deterministic transition rules.<br>\nThe whole point is being able to inspect the next states without having to explicitly know (and tediously write down) what they are.</p>\n<p><a href=\"/user_uploads/14278/89fzXX3tkE_uPuYE9EAH-ITb/JustEventsMode.thy\">JustEventsMode.thy</a></p>\n<p>I have attached the theory file related to this (bottom of file is where attempt was made).</p>",
        "id": 376060080,
        "sender_full_name": "Chengsong Tan",
        "timestamp": 1689606484
    },
    {
        "content": "<p>If direct printing maps not possible, I guess all I need is a \"printf\" function in Isabelle to print ints and strings to the proof state output console. That way I can write a pretty printer in Isabelle myself.</p>",
        "id": 376351906,
        "sender_full_name": "Chengsong Tan",
        "timestamp": 1689687236
    }
]