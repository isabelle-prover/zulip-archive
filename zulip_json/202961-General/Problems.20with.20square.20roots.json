[
    {
        "content": "<p>The following is the beginning of a short proof of the easier half of the Bruck Ryser Chowla Theorem. It is so short because it uses lots of lemmas that I'm not posting, including power_of_k_minus_lambda_d:</p>\n<p>theorem bruck_ryser_chowla_even:<br>\n  assumes \"∃n::nat. 𝗏 = 2 * n\"<br>\n  shows \"sqrt(𝗄 - Λ) ∈ ℚ\"<br>\nproof -<br>\n  have \"(sqrt(𝗄 - Λ))^(𝗏 - 1) ∈ ℚ\" using power_of_k_minus_lambda_d<br>\n    by blast<br>\n  from assms obtain n where \"𝗏 = 2 * n\" by blast<br>\n  then have \"𝗏 - 1 = 2 * n - 1\" by auto<br>\n  then have \"(sqrt(𝗄 - Λ))^(2 * n - 1) ∈ ℚ\" using power_of_k_minus_lambda_d<br>\n    by presburger</p>\n<p>It gives no errors so far, but when I try to show the conclusion from the last line (which is just simple algebra that square root of 𝗄 - Λ squared = 𝗄 - Λ in conjunction with the fact that k-Λ is a natural number), I always get lots of problems. Sledgehammer doesn't seem to recognize simple algebra. Any ideas?</p>",
        "id": 451923440,
        "sender_full_name": "Craig Alan Feinstein",
        "timestamp": 1721187371
    },
    {
        "content": "<p>First, it is hard to say much without context, but for Λ = 0, k = 2, and v = 2, your lemma does not hold</p>",
        "id": 451933630,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1721192124
    },
    {
        "content": "<p>Second,</p>\n<blockquote>\n<p>which is just simple algebra that square root of 𝗄 - Λ squared = 𝗄 - Λ in conjunction with the fact that k-Λ is a natural number</p>\n</blockquote>\n<p>the proof states <code>(sqrt(𝗄 - Λ))^(2 * n - 1) ∈ ℚ</code>… when n = 0, there is squared at all. So your reasoning per hand has holes</p>",
        "id": 451933857,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1721192220
    },
    {
        "content": "<p>Third, please put your isabelle code with 3 backquotes to keep the indentation (the code block below the text editing box)</p>",
        "id": 451934031,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1721192304
    },
    {
        "content": "<p>Fourth, the general approach for a proof is: </p>\n<ol>\n<li>write one step that you believe are important</li>\n<li>if the proof does not go through you need to write more intermediate steps (whatever \"simple algebra\" argument you believe this is: your definition of simple is very different from the Isabelle one)</li>\n</ol>",
        "id": 451934518,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1721192481
    },
    {
        "content": "<p>That is a good point. I thought that since the context of the theorem is a symmetric BIBD, it would assume that lambda &gt; 0, but it probably was not told that. So given my assumptions that I told it, the theorem might not be true. Sledgehammer is almost like magic but it doesn’t prove false statements. Also I tried intermediate steps with no success. I’ll try again with better assumptions.</p>",
        "id": 452071149,
        "sender_full_name": "Craig Alan Feinstein",
        "timestamp": 1721223175
    },
    {
        "content": "<p>maybe, I do not know the context of \\Lambda</p>",
        "id": 452091852,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1721226658
    },
    {
        "content": "<p>It is very hard to judge what your intermediate steps are.</p>",
        "id": 452098897,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1721227848
    },
    {
        "content": "<p>This is what I got by adding some assumptions within 15min of trying and my (rusty) math knowledge:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span>\n<span class=\"w\">  </span><span class=\"kp\">assumes</span><span class=\"w\"> </span><span class=\"s\">\"∃n::nat. n&gt;0 ∧ 𝗏 = 2 * n\"</span><span class=\"w\">  </span><span class=\"kp\">and</span>\n<span class=\"w\">    </span><span class=\"n\">k_ge</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"𝗄 ≥ Λ\"</span><span class=\"w\"> </span><span class=\"kp\">and</span>\n<span class=\"w\">    </span><span class=\"n\">diff_rat</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">‹𝗄 - Λ ∈ ℚ›</span>\n<span class=\"kp\">shows</span><span class=\"w\"> </span><span class=\"s\">\"sqrt(𝗄 - Λ) ∈ ℚ\"</span>\n<span class=\"k\">proof</span><span class=\"w\"> </span><span class=\"o\">-</span>\n<span class=\"w\">  </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"n\">eq</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"(sqrt(𝗄 - Λ))^(𝗏 - 1) ∈ ℚ\"</span><span class=\"w\"> </span><span class=\"gr\">sorry</span>\n<span class=\"w\">  </span><span class=\"k\">from</span><span class=\"w\"> </span><span class=\"n\">assms</span><span class=\"w\"> </span><span class=\"k\">obtain</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"kp\">where</span><span class=\"w\"> </span><span class=\"s\">\"𝗏 = 2 * n\"</span><span class=\"w\"> </span><span class=\"s\">\"n &gt; 0\"</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">blast</span>\n<span class=\"w\">  </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"s\">\"𝗏 - 1 = 2 * n - 1\"</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">auto</span>\n<span class=\"w\">  </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"s\">\"(sqrt(𝗄 - Λ))^(2 * n - 1) ∈ ℚ\"</span>\n<span class=\"w\">    </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">eq</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">auto</span>\n<span class=\"w\">  </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"n\">rat</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">‹(sqrt(𝗄 - Λ))^(2 * n) / (sqrt(𝗄 - Λ)) ∈ ℚ›</span>\n<span class=\"w\">    </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">metis</span><span class=\"w\"> </span><span class=\"s\">‹0 &lt; n›</span><span class=\"w\"> </span><span class=\"n\">div_by_0</span><span class=\"w\"> </span><span class=\"n\">div_less_iff_less_mult</span><span class=\"w\"> </span><span class=\"n\">mult.commute</span><span class=\"w\"> </span><span class=\"n\">mult_pos_pos</span>\n<span class=\"w\">        </span><span class=\"n\">nonzero_mult_div_cancel_left</span><span class=\"w\"> </span><span class=\"n\">one_div_two_eq_zero</span><span class=\"w\"> </span><span class=\"n\">pos2</span><span class=\"w\"> </span><span class=\"n\">power_eq_0_iff</span>\n<span class=\"w\">        </span><span class=\"n\">power_minus_mult</span><span class=\"w\"> </span><span class=\"n\">zero_less_diff</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"n\">eq2</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">‹(sqrt(𝗄 - Λ))^(2 * n) / (sqrt(𝗄 - Λ)) = ((𝗄 - Λ))^ n * (1/sqrt(𝗄 - Λ))›</span>\n<span class=\"w\">    </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">k_ge</span>\n<span class=\"w\">    </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"n\">add</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">power_mult</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"k\">moreover</span><span class=\"w\"> </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"s\">‹(𝗄 - Λ) ^ n ∈ ℚ›</span>\n<span class=\"w\">    </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">diff_rat</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"n\">add</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">power_mult</span><span class=\"w\"> </span><span class=\"n\">Rats_mult_iff</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"k\">ultimately</span><span class=\"w\"> </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"s\">‹1/sqrt(𝗄 - Λ) ∈ ℚ›</span>\n<span class=\"w\">    </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">rat</span><span class=\"w\"> </span><span class=\"n\">k_ge</span><span class=\"w\"> </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"n\">add</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">power_mult</span><span class=\"w\"> </span><span class=\"n\">Rats_mult_iff</span><span class=\"o\">)</span>\n<span class=\"w\">    </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">metis</span><span class=\"w\"> </span><span class=\"n\">Rats_1</span><span class=\"w\"> </span><span class=\"n\">Rats_divide</span><span class=\"w\"> </span><span class=\"n\">divide_divide_eq_right</span><span class=\"w\"> </span><span class=\"n\">nonzero_mult_div_cancel_left</span><span class=\"w\"> </span><span class=\"n\">power_eq_0_iff</span><span class=\"w\"> </span><span class=\"n\">real_sqrt_zero</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">thesis</span>\n<span class=\"w\">    </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"n\">add</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">divide_inverse</span><span class=\"o\">)</span>\n<span class=\"k\">qed</span>\n</code></pre></div>",
        "id": 452099320,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1721227921
    },
    {
        "content": "<p>Side remark: for n = 0, i am not sure if it holds or not, it depends on <code>(sqrt(𝗄 - Λ))^(𝗏 - 1) ∈ ℚ</code> means exactly.  Currently the exponent is a natural number, meaning that you get <code>X^0</code> which is not helpful for proving what you want</p>",
        "id": 452100671,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1721228267
    },
    {
        "content": "<p>but I am not sure if this is wanted or not</p>",
        "id": 452100717,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1721228279
    },
    {
        "content": "<p>I just partially put your formulas in before the batteries in my laptop ran out. So far so good. Question - what is the difference between putting statements in quotes “…” and putting statements in &lt;…&gt;. I noticed that there is a difference because some of your stuff only works in &lt;…&gt;.<br>\nAnother question - why is your long explanation in purple? It doesn’t like long explanations?</p>\n<p>Thank you so much for your help. Is it correct for me to include you in the authorship if and hopefully when this all gets published in the Isabelle archive of formal proofs?</p>",
        "id": 452201993,
        "sender_full_name": "Craig Alan Feinstein",
        "timestamp": 1721254262
    },
    {
        "content": "<p>I just got my laptop a charger. Your code worked so I've proven my first major theorem in Isabelle; however, I need to prove the assumptions for it to technically be a proof. One thing I did not know before this is that apparently the definition of a natural number according to Isabelle includes zero.</p>",
        "id": 452207833,
        "sender_full_name": "Craig Alan Feinstein",
        "timestamp": 1721256949
    },
    {
        "content": "<p>I modified the code to get a proof  without extra assumptions (v even is part of the theorem; v odd is the other part). I put three backward slashes before it, so hopefully it will look better:</p>\n<p>\\\\\\theorem bruck_ryser_chowla_even:<br>\n  assumes \"∃n::nat. 𝗏 = 2 * n\"<br>\n  shows \"sqrt(𝗄 - Λ) ∈ ℚ\"<br>\nproof -<br>\n  have \"(sqrt(𝗄 - Λ))^(𝗏 - 1) ∈ ℚ\" using power_of_k_minus_lambda_3<br>\n    by blast<br>\n  from assms obtain n where \"𝗏 = 2 * n\" by blast<br>\n  then have \"𝗏 - 1 = 2 * n - 1\" by auto<br>\n  then have \"(sqrt(𝗄 - Λ))^(2 * n - 1) ∈ ℚ\" using power_of_k_minus_lambda_3<br>\n    by presburger<br>\n  then have rat: \"(sqrt(𝗄 - Λ))^(2 * n)/sqrt(𝗄 - Λ) ∈ ℚ\"<br>\n    by (metis div_by_0 div_less_iff_less_mult mult.commute<br>\n        mult_pos_pos nonzero_mult_div_cancel_left one_div_two_eq_zero<br>\n        pos2 power_eq_0_iff power_minus_mult zero_less_diff)<br>\n   have eq2: ‹(sqrt(𝗄 - Λ))^(2 * n) / (sqrt(𝗄 - Λ)) = ((𝗄 - Λ))^ n * (1/sqrt(𝗄 - Λ))›<br>\n    using k_minus_lambda_is_natural<br>\n    by (simp add: power_mult)<br>\n  moreover have ‹(𝗄 - Λ) ^ n ∈ ℚ›<br>\n    using k_minus_lambda_is_natural by (simp add: power_mult Rats_mult_iff)<br>\n  ultimately have ‹1/sqrt(𝗄 - Λ) ∈ ℚ›<br>\n    using rat k_minus_lambda_is_natural apply (simp add: power_mult Rats_mult_iff)<br>\n    by (metis Rats_1 Rats_divide divide_divide_eq_right <br>\n        nonzero_mult_div_cancel_left power_eq_0_iff real_sqrt_zero)<br>\n  then show ?thesis<br>\n    by (simp add: divide_inverse)<br>\nqed\\\\\\</p>",
        "id": 452210728,
        "sender_full_name": "Craig Alan Feinstein",
        "timestamp": 1721258369
    },
    {
        "content": "<p>I'm sorry, I see you said back quotes. Not sure what that is.</p>",
        "id": 452211045,
        "sender_full_name": "Craig Alan Feinstein",
        "timestamp": 1721258494
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"736162\">Craig Alan Feinstein</span> <a href=\"#narrow/stream/202961-General/topic/Problems.20with.20square.20roots/near/452201993\">said</a>:</p>\n<blockquote>\n<p>Thank you so much for your help. Is it correct for me to include you in the authorship if and hopefully when this all gets published in the Isabelle archive of formal proofs?</p>\n</blockquote>\n<p>just take these few lines as your own that is far from enough to credit me</p>",
        "id": 452247156,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1721278812
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"736162\">Craig Alan Feinstein</span> <a href=\"#narrow/stream/202961-General/topic/Problems.20with.20square.20roots/near/452201993\">said</a>:</p>\n<blockquote>\n<p>I just partially put your formulas in before the batteries in my laptop ran out. So far so good. Question - what is the difference between putting statements in quotes “…” and putting statements in &lt;…&gt;. I noticed that there is a difference because some of your stuff only works in &lt;…&gt;.</p>\n</blockquote>\n<p>I prefer the cartouche ‹...› because I find them nicer to look at, no difference otherwise</p>",
        "id": 452247374,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1721278862
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"736162\">Craig Alan Feinstein</span> <a href=\"#narrow/stream/202961-General/topic/Problems.20with.20square.20roots/near/452201993\">said</a>:</p>\n<blockquote>\n<p>Another question - why is your long explanation in purple? It doesn’t like long explanations?</p>\n</blockquote>\n<p>That means that the proof is not terminating for you. Probably some theorem that changed meaning in your context (I only imported Complex_Main). Try sledgehammer</p>",
        "id": 452247547,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1721278950
    },
    {
        "content": "<p>Backtick. Click on the <code>?</code> bottom right of the area where you enter text</p>",
        "id": 452247678,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1721278986
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"233198\">Mathias Fleury</span> <a href=\"#narrow/stream/202961-General/topic/Problems.20with.20square.20roots/near/452247547\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"736162\">Craig Alan Feinstein</span> <a href=\"#narrow/stream/202961-General/topic/Problems.20with.20square.20roots/near/452201993\">said</a>:</p>\n<blockquote>\n<p>Another question - why is your long explanation in purple? It doesn’t like long explanations?</p>\n</blockquote>\n<p>That means that the proof is not terminating for you. Probably some theorem that changed meaning in your context (I only imported Complex_Main). Try sledgehammer</p>\n</blockquote>\n<p>Ahh you removed the assumption <code>n &gt; 0</code>, so the proof does not hold anymore. See my side remark above</p>",
        "id": 452248439,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1721279208
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"736162\">Craig Alan Feinstein</span> <a href=\"#narrow/stream/202961-General/topic/Problems.20with.20square.20roots/near/452207833\">said</a>:</p>\n<blockquote>\n<p>I just got my laptop a charger. Your code worked so I've proven my first major theorem in Isabelle; however, I need to prove the assumptions for it to technically be a proof. One thing I did not know before this is that apparently the definition of a natural number according to Isabelle includes zero.</p>\n</blockquote>\n<p>I am not aware of any construction of natural numbers that goes without 0</p>",
        "id": 452248752,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1721279452
    },
    {
        "content": "<p>(I checked wikipedia and there seem to be a debate, but no formal definition listed goes without 0)</p>",
        "id": 452248782,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1721279488
    },
    {
        "content": "<p>Does the purple highlights mean that it doesn’t consider the proof to be valid? Even before I removed the assumptions that n&gt;0, it had purple highlights. I’m pretty sure based on experimenting yesterday that it considers the natural numbers not to include zero.</p>",
        "id": 452336794,
        "sender_full_name": "Craig Alan Feinstein",
        "timestamp": 1721307283
    },
    {
        "content": "<p>Purple highlight means that the method did not terminate yet. If it stays purple, it often means that the proof method loops, e.g. due to a loop of rewriting rules.</p>",
        "id": 452337192,
        "sender_full_name": "Lukas Stevens",
        "timestamp": 1721307366
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"736162\">Craig Alan Feinstein</span> <a href=\"#narrow/stream/202961-General/topic/Problems.20with.20square.20roots/near/452336794\">said</a>:</p>\n<blockquote>\n<p>I’m pretty sure based on experimenting yesterday that it considers the natural numbers not to include zero.</p>\n</blockquote>\n<p>This is with 100% certainty wrong:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span>\n<span class=\"w\"> </span><span class=\"s\">‹0 ∈ ℕ›</span>\n<span class=\"w\">  </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">auto</span>\n</code></pre></div>",
        "id": 452338198,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1721307655
    },
    {
        "content": "<p>You are correct that 0 is in N. I still get the purple highlights when I copy your exact text and substitute the sorry for my lemma, just as I did when I changed it yesterday. Sledgehammer didn't resolve it. For now, I'm going to leave it alone.</p>",
        "id": 452467601,
        "sender_full_name": "Craig Alan Feinstein",
        "timestamp": 1721352336
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"w\">  </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"s\">\"(sqrt(𝗄 - Λ))^(2 * n - 1) ∈ ℚ\"</span>\n<span class=\"w\">    </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">eq</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">auto</span>\n<span class=\"w\">  </span><span class=\"k\">moreover</span><span class=\"w\"> </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"s\">‹(sqrt(𝗄 - Λ))^(2 * n - 1) = (sqrt(𝗄 - Λ))^(2 * n) / (sqrt(𝗄 - Λ))›</span>\n<span class=\"w\">    </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"s\">‹0 &lt; n›</span><span class=\"w\"> </span><span class=\"n\">k_ge</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">cases</span><span class=\"w\"> </span><span class=\"s\">‹𝗄 - Λ = 0›</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">auto</span><span class=\"w\"> </span><span class=\"n\">simp</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">divide_inverse</span><span class=\"w\"> </span><span class=\"n\">power_diff_conv_inverse</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"k\">ultimately</span><span class=\"w\"> </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"n\">rat</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">‹(sqrt(𝗄 - Λ))^(2 * n) / (sqrt(𝗄 - Λ)) ∈ ℚ›</span>\n<span class=\"w\">    </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">simp</span>\n</code></pre></div>",
        "id": 452487382,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1721365261
    },
    {
        "content": "<p>(with the rather obvious splitting intermediate step of making the transformation explicit)</p>",
        "id": 452487590,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1721365315
    },
    {
        "content": "<p>(the <code>by (cases ...) (auto ...)</code> is the result of finding <code>power_diff_conv_inverse</code> (with <code>find_theorems</code>) and finding out why auto did not apply it</p>",
        "id": 452487761,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1721365398
    },
    {
        "content": "<p>I have it down to the following:</p>\n<div class=\"codehilite\" data-code-language=\"theorem\"><pre><span></span><code>  assumes \"∃n::nat. 𝗏 = 2 * n\"\n  shows \"sqrt(𝗄 - Λ) ∈ ℚ\"\nproof -\n  have \"(sqrt(𝗄 - Λ))^(𝗏 - 1) ∈ ℚ\" using power_of_k_minus_lambda_3\n    by blast\n  from assms obtain n where \"𝗏 = 2 * n\" by blast\n  then have \"𝗏 - 1 = 2 * n - 1\" by auto\n  then have \"(sqrt(𝗄 - Λ))^(2 * n - 1) ∈ ℚ\" using power_of_k_minus_lambda_3\n    by presburger\n  then have \"(sqrt(𝗄 - Λ))^(2 * n)/sqrt(𝗄 - Λ) ∈ ℚ\"\n    by (metis div_by_0 div_less_iff_less_mult)\n  moreover have ‹(𝗄 - Λ) ^ n ∈ ℚ›\n    using k_minus_lambda_is_natural by simp\n  ultimately have ‹1/sqrt(𝗄 - Λ) ∈ ℚ›\n    by (metis divide_divide_eq_right)\n  then show ?thesis\n    by (simp add: divide_inverse)\nqed?\n\nThe lines where I use metis are highlighted purple on my machine. I don't think it matters whether n=0 or not. The theorem should still be true.\n</code></pre></div>",
        "id": 452617485,
        "sender_full_name": "Craig Alan Feinstein",
        "timestamp": 1721407483
    },
    {
        "content": "<p>Actually now I see that there may by problems with dividing by zero if k= Lambda. This might be causing the problems.</p>",
        "id": 452619692,
        "sender_full_name": "Craig Alan Feinstein",
        "timestamp": 1721408321
    },
    {
        "content": "<p><code>n &gt; 0</code> makes a ton of a difference</p>",
        "id": 452645602,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1721416435
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"233198\">Mathias Fleury</span> <a href=\"#narrow/stream/202961-General/topic/Problems.20with.20square.20roots/near/452100671\">said</a>:</p>\n<blockquote>\n<p>Side remark: for n = 0, i am not sure if it holds or not, it depends on <code>(sqrt(𝗄 - Λ))^(𝗏 - 1) ∈ ℚ</code> means exactly.  Currently the exponent is a natural number, meaning that you get <code>X^0</code> which is not helpful for proving what you want</p>\n</blockquote>\n<p>please reread that sentence</p>",
        "id": 452645789,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1721416474
    },
    {
        "content": "<p>and remember that <code>0 - 1 = 0</code></p>",
        "id": 452645858,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1721416491
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"736162\">Craig Alan Feinstein</span> <a href=\"#narrow/stream/202961-General/topic/Problems.20with.20square.20roots/near/452619692\">said</a>:</p>\n<blockquote>\n<p>Actually now I see that there may by problems with dividing by zero if k= Lambda. This might be causing the problems.</p>\n</blockquote>\n<p>no, it does not. <code>a / 0 = 0</code> (yes it is surprising; yes it makes sense; please check the mailing list this pops up every year and I am not discussing this here)</p>",
        "id": 452646611,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1721416658
    },
    {
        "content": "<p>I'm going to add the assumption that n &gt; 0 again.</p>",
        "id": 452664871,
        "sender_full_name": "Craig Alan Feinstein",
        "timestamp": 1721422159
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"736162\">@Craig Alan Feinstein</span> , just saw this thread - very happy to see someone else taking up design theory in Isabelle! I was the main author on the original design AFP entry, so feel free to reach out with any questions. Sounds like this one is basically solved, but as some general tips for doing simple algebra on the design parameters. I went back and forth between the parameters being nats vs ints for a while - but based on their definitions (cardinalities of certain sets), nats made more sense and generally reduced the amount of type casting I had to do. Obviously, a lot of proofs on paper rely on integer properties though for algebraic manipulation (as in your case) so we still have to work around it. One tactic that is often really useful is the algebra_simps tactic (this often helps where sledgehammer fails), though it'll still need the right assumptions. Sometimes working with int versions of the parameters when doing a long calculation can also significantly improve automation (see the Boses inequality proof in the Resolvable design theory for a good example).</p>",
        "id": 453680472,
        "sender_full_name": "Chelsea Edmonds",
        "timestamp": 1721823982
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"252023\">@Chelsea Edmonds</span>, I've been using a lot of your work on Isabelle Combinatorial Design Theory to try to prove the BRC theorem. I learned of this theorem in college in about 1990 and I liked its creative proof that uses the fact that every integer is the sum of four squares. Also the fact that it uses algebra is a good way for me to learn Isabelle. I'm glad you laid the groundwork for Design Theory, as it would have been difficult for me to do this from scratch. This is my first time working with a proof assistant and it is fun, but sometimes frustrating as I don't always understand the details of what makes a valid proof in Isabelle. May I email you versions of my BRC proof attempt and ask you questions when I get stuck? I ask because I am not sure they want me to post versions of my proof in Zulip.</p>",
        "id": 453815815,
        "sender_full_name": "Craig Alan Feinstein",
        "timestamp": 1721864597
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"736162\">Craig Alan Feinstein</span> <a href=\"#narrow/stream/202961-General/topic/Problems.20with.20square.20roots/near/453815815\">said</a>:</p>\n<blockquote>\n<p>Hi <span class=\"user-mention silent\" data-user-id=\"252023\">Chelsea Edmonds</span>, I've been using a lot of your work on Isabelle Combinatorial Design Theory to try to prove the BRC theorem. I learned of this theorem in college in about 1990 and I liked its creative proof that uses the fact that every integer is the sum of four squares. Also the fact that it uses algebra is a good way for me to learn Isabelle. I'm glad you laid the groundwork for Design Theory, as it would have been difficult for me to do this from scratch. This is my first time working with a proof assistant and it is fun, but sometimes frustrating as I don't always understand the details of what makes a valid proof in Isabelle. May I email you versions of my BRC proof attempt and ask you questions when I get stuck? I ask because I am not sure they want me to post versions of my proof in Zulip.</p>\n</blockquote>\n<p>Glad it's been useful! Your welcome to email me (<a href=\"mailto:c.l.edmonds@sheffield.ac.uk\">c.l.edmonds@sheffield.ac.uk</a>), or DM me with any questions about the existing libraries/how to use them effectively/problems specific to design theory. That said, this chat is still a great place to ask general questions about Isabelle proofs/generic errors as you're working and learning about Isabelle too  - as you've already been doing! For those types of things more people probably means a better chance at a faster response and also different insights.</p>",
        "id": 453900089,
        "sender_full_name": "Chelsea Edmonds",
        "timestamp": 1721900476
    }
]