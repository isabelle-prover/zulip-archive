[
    {
        "content": "<p>Hi Isabelle community,<br>\nI'm taking a class on theorem proving in Isabelle.<br>\nFor the final project, I'd like to experiment with automatic proof search.<br>\nIs there any documentation on this?<br>\nAt the moment I think my best bet would be to look at the Eisbach manual as well as the source code for projects like 'A Proof Strategy Language and Proof Script Generation for Isabelle/HOL' as a starting point, but it'd appeciate any advice/suggestions you can provide.<br>\nThanks.</p>",
        "id": 476483442,
        "sender_full_name": "Kartik Sabharwal",
        "timestamp": 1728699215
    },
    {
        "content": "<p>You need to be more precise on what you want to achieve here. Automatic proof search goes from sledgehammer (offloading to external tools), through try_harder from PSL (combining tactics and internal tools a bit blindly), to writing tactics in Eisbach or ML (so human engineering).</p>",
        "id": 476497481,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1728713187
    },
    {
        "content": "<p>What I'd like to try is to take a proof goal (for example <code>inverts_mat m1 m2</code>) and search for theorems in the Matrix module whose conclusion unifies with the goal (this would be <code>inverts_mat_def</code>) and add its premises as subgoals (for <code>inverts_mat_def</code>, the premise would be <code>m1 * m2 = 1_m (dim_row m1)</code>). <br>\nThen I would repeat the process asking which theorems in the Matrix module unify with this premise (<code>mat_eq_iff</code>, <code>transpose_mat_eq</code>, and <code>mat_hom_inj</code>), ranking these choices somehow -- maybe even naively, by prompting the user -- and building a proof skeleton.<br>\nIs this sufficiently precise?</p>",
        "id": 476538817,
        "sender_full_name": "Kartik Sabharwal",
        "timestamp": 1728753349
    },
    {
        "content": "<p>What motivates me to try this is that even though I really appreciate Sledgehammer, I find it a bit tedious to break up proofs to the 'correct' level of granularity for the existing automation to succeed. If I could just tell Isabelle 'please use unification with the theorems in this particular module, build some proof skeletons, then apply sledgehammer to the subgoals on my skeleton of choice' maybe I could save some time.</p>",
        "id": 476539527,
        "sender_full_name": "Kartik Sabharwal",
        "timestamp": 1728753983
    },
    {
        "content": "<p>Yeah that sounds like you want ML</p>",
        "id": 476539869,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1728754315
    },
    {
        "content": "<p>but that sounds a rather simple approach, not sure if this works in practise</p>",
        "id": 476539928,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1728754361
    },
    {
        "content": "<p>I absolutely agree that this is a simple approach.<br>\nI will be happy if I can understand the automation interface well enough to implement it.<br>\nThen I can see how to improve the approach using literature on constructing proofs by backward search.</p>",
        "id": 476540451,
        "sender_full_name": "Kartik Sabharwal",
        "timestamp": 1728754872
    },
    {
        "content": "<p>Should I look at the 'Isabelle Cookbook', then?<br>\nedit: Isabelle/ML -&gt; Isabelle</p>",
        "id": 476540732,
        "sender_full_name": "Kartik Sabharwal",
        "timestamp": 1728755156
    }
]