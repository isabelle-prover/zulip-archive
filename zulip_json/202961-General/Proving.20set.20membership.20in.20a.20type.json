[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">locale</span><span class=\"w\"> </span><span class=\"n\">monoid</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">  </span><span class=\"kp\">fixes</span><span class=\"w\"> </span><span class=\"n\">Monoid</span><span class=\"w\"> </span><span class=\"kp\">and</span><span class=\"w\"> </span><span class=\"n\">composition</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"kp\">infixl</span><span class=\"w\"> </span><span class=\"s\">\"oMonoid\"</span><span class=\"w\"> </span><span class=\"n\">70</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"kp\">and</span><span class=\"w\"> </span><span class=\"n\">unitMonoid</span>\n<span class=\"w\">  </span><span class=\"kp\">assumes</span><span class=\"w\"> </span><span class=\"n\">composition_closed</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">intro</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">simp</span><span class=\"o\">]:</span><span class=\"w\"> </span><span class=\"s\">\"⟦ a ∈ Monoid; b ∈ Monoid ⟧ ⟹ a oMonoid b ∈ Monoid\"</span>\n<span class=\"w\">    </span><span class=\"kp\">and</span><span class=\"w\"> </span><span class=\"n\">unit_closed</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">intro</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">simp</span><span class=\"o\">]:</span><span class=\"w\"> </span><span class=\"s\">\"unitMonoid ∈ M\"</span>\n<span class=\"w\">    </span><span class=\"kp\">and</span><span class=\"w\"> </span><span class=\"n\">associative</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">intro</span><span class=\"o\">]:</span><span class=\"w\"> </span><span class=\"s\">\"⟦ a ∈ Monoid; b ∈ Monoid; c ∈ Monoid ⟧ ⟹ (a oMonoid b) oMonoid c = a oMonoid (b oMonoid c)\"</span>\n<span class=\"w\">    </span><span class=\"kp\">and</span><span class=\"w\"> </span><span class=\"n\">left_unit</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">intro</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">simp</span><span class=\"o\">]:</span><span class=\"w\"> </span><span class=\"s\">\"a ∈ Monoid ⟹ unitMonoid oMonoid a = a\"</span>\n<span class=\"w\">    </span><span class=\"kp\">and</span><span class=\"w\"> </span><span class=\"n\">right_unit</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">intro</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">simp</span><span class=\"o\">]:</span><span class=\"w\"> </span><span class=\"s\">\"a ∈ Monoid ⟹ a oMonoid unitMonoid = a\"</span>\n\n<span class=\"kn\">interpretation</span><span class=\"w\"> </span><span class=\"n\">list</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">monoid</span><span class=\"w\"> </span><span class=\"kp\">where</span>\n<span class=\"w\">  </span><span class=\"n\">Monoid</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"char list\"</span><span class=\"w\"> </span><span class=\"kp\">and</span>\n<span class=\"w\">  </span><span class=\"n\">composition</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">List.append</span><span class=\"w\"> </span><span class=\"kp\">and</span>\n<span class=\"w\">  </span><span class=\"n\">unitMonoid</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"[]\"</span>\n<span class=\"w\">  </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">unfold_locales</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"n\">auto</span>\n</code></pre></div>\n<p>gives</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">proof</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">prove</span><span class=\"o\">)</span>\n<span class=\"n\">goal</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">2</span><span class=\"w\"> </span><span class=\"n\">subgoals</span><span class=\"o\">):</span>\n<span class=\"w\"> </span><span class=\"n\">1.</span><span class=\"w\"> </span><span class=\"n\">⋀a</span><span class=\"w\"> </span><span class=\"n\">b.</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">∈</span><span class=\"w\"> </span><span class=\"n\">char</span><span class=\"w\"> </span><span class=\"n\">list</span><span class=\"w\"> </span><span class=\"n\">⟹</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"n\">∈</span><span class=\"w\"> </span><span class=\"n\">char</span><span class=\"w\"> </span><span class=\"n\">list</span><span class=\"w\"> </span><span class=\"n\">⟹</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">@</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"n\">∈</span><span class=\"w\"> </span><span class=\"n\">char</span><span class=\"w\"> </span><span class=\"n\">list</span>\n<span class=\"w\"> </span><span class=\"n\">2.</span><span class=\"w\"> </span><span class=\"n\">⋀M.</span><span class=\"w\"> </span><span class=\"o\">[]</span><span class=\"w\"> </span><span class=\"n\">∈</span><span class=\"w\"> </span><span class=\"n\">M</span>\n</code></pre></div>\n<p>which seem to be trivial, these set memberships follow from the properties of char list, the type.</p>\n<p>But how can I convince Isabelle about them?</p>",
        "id": 366206704,
        "sender_full_name": "Gergely Buday",
        "timestamp": 1686753529
    },
    {
        "content": "<p>I think you're mixing up types and terms here. You can't quantify over types in Isabelle, you have to prove set membership of the sets \"char list\" and \"M\" here. Of course that doesn't hold, <code>[]</code> is certainly not in any set.</p>",
        "id": 366209315,
        "sender_full_name": "Fabian Huch",
        "timestamp": 1686753988
    },
    {
        "content": "<p><code>Monoid</code> is a variable (not a type), no matter if you spell it upper- or lowercase.</p>",
        "id": 366209546,
        "sender_full_name": "Fabian Huch",
        "timestamp": 1686754034
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"348400\">@Fabian Huch</span> I did <code>Monoid = \"UNIV :: char list set\"</code>but that did not eliminate the spurious <code> ⋀M. [] ∈ M</code> subgoal.</p>",
        "id": 366218034,
        "sender_full_name": "Gergely Buday",
        "timestamp": 1686755614
    },
    {
        "content": "<p>Then your definition does make sense, the problem with <code>M</code> is just that it's not mentioned anywhere else. I think you meant <code>Monoid</code>? (in the locale specification)</p>",
        "id": 366219627,
        "sender_full_name": "Fabian Huch",
        "timestamp": 1686755888
    },
    {
        "content": "<p>Oh yes, I have failed to rename M to Monoid at one instance, thanks.</p>",
        "id": 366275954,
        "sender_full_name": "Gergely Buday",
        "timestamp": 1686768335
    }
]