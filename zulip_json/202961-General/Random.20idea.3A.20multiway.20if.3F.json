[
    {
        "content": "<p>There's a Haskell extention that allows multiway ifs:</p>\n<div class=\"codehilite\" data-code-language=\"Haskell\"><pre><span></span><code><span class=\"kr\">if</span> <span class=\"o\">|</span> <span class=\"n\">x</span> <span class=\"o\">&lt;</span> <span class=\"mi\">3</span>     <span class=\"ow\">-&gt;</span> <span class=\"s\">\"small\"</span>\n   <span class=\"o\">|</span> <span class=\"n\">x</span> <span class=\"o\">&lt;</span> <span class=\"mi\">7</span>     <span class=\"ow\">-&gt;</span> <span class=\"s\">\"medium\"</span>\n   <span class=\"o\">|</span> <span class=\"n\">otherwise</span> <span class=\"ow\">-&gt;</span> <span class=\"s\">\"large\"</span>\n</code></pre></div>\n<p>It might be nice to have something like that in Isabelle to avoid some of those clunky nested <code>if then else</code> constructs.</p>\n<p>Not sure if it's really worth it but one could try?</p>",
        "id": 225829318,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1612960697
    },
    {
        "content": "<p>I tend to use case for that, even if it has a slightly different semantics…</p>\n<div class=\"codehilite\"><pre><span></span><code>case (x &lt; 3, x &lt; 7) of\n   (True, _) =&gt; &quot;small&quot;\n| (_, True) =&gt; &quot;medium&quot;\n| _ =&gt; &quot;large&quot;\n</code></pre></div>",
        "id": 225829913,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1612961007
    },
    {
        "content": "<p>Possible solution:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">syntax</span>\n  <span class=\"s\">\"_multiway_if\"</span> <span class=\"o\">::</span> <span class=\"s\">\"multiway_if ⇒ 'a\"</span> <span class=\"o\">(</span><span class=\"s\">\"if {//(2 _)//}\"</span> <span class=\"o\">[</span><span class=\"n\">12</span><span class=\"o\">]</span> <span class=\"n\">62</span><span class=\"o\">)</span>\n  <span class=\"s\">\"_multiway_if_clause\"</span> <span class=\"o\">::</span> <span class=\"s\">\"bool ⇒ 'a ⇒ multiway_if_clause\"</span> <span class=\"o\">(</span><span class=\"s\">\"(2_ ⇒/ _)\"</span> <span class=\"n\">13</span><span class=\"o\">)</span>\n  <span class=\"s\">\"_multiway_if_cons\"</span> <span class=\"o\">::</span> <span class=\"s\">\"multiway_if_clause ⇒ multiway_if ⇒ multiway_if\"</span> <span class=\"o\">(</span><span class=\"s\">\"_;//_\"</span> <span class=\"o\">[</span><span class=\"n\">13</span><span class=\"o\">,</span> <span class=\"n\">12</span><span class=\"o\">]</span> <span class=\"n\">12</span><span class=\"o\">)</span>\n  <span class=\"s\">\"_multiway_if_final\"</span> <span class=\"o\">::</span> <span class=\"s\">\"'a ⇒ multiway_if\"</span> <span class=\"o\">(</span><span class=\"s\">\"otherwise ⇒ _\"</span><span class=\"o\">)</span>\n\n<span class=\"k\">translations</span>\n  <span class=\"s\">\"_multiway_if (_multiway_if_cons (_multiway_if_clause b x) y)\"</span> <span class=\"o\">==</span> <span class=\"s\">\"CONST If b x (_multiway_if y)\"</span>\n  <span class=\"s\">\"_multiway_if (_multiway_if_final x)\"</span> <span class=\"o\">=</span><span class=\"err\">&gt;</span> <span class=\"s\">\"x\"</span>\n\n<span class=\"kt\">term</span> <span class=\"s\">\"if {p ⇒ y; q ⇒ z; r ⇒ u; otherwise ⇒ x}\"</span>\n</code></pre></div>\n<p>Possible other syntax:</p>\n<div class=\"codehilite\"><pre><span></span><code>f x = if {x ≥ 0 ⇒ 1; x ≤ 0 ⇒ -1; otherwise ⇒ 0}\nf x = (if x ≥ 0 ⇒ 1 | x ≤ 0 ⇒ -1 | otherwise ⇒ 0)\nf x = (1 if x ≥ 0; -1 if x ≤ 0; 0 otherwise)\n</code></pre></div>\n<p>One could also replace <code>if</code> with <code>case</code> or drop it entirely, or replace <code>otherwise</code> with <code>else</code>, replace parentheses with bracets, semicolon with \"|\" etc.</p>\n<p>Not sure how to make the translations work for output as well.</p>",
        "id": 225836265,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1612964288
    },
    {
        "content": "<p>Okay this works for output as well, but it has the disadvantage of also printing <code>if b then x else y</code> as <code>if {b ⇒ x; otherwise ⇒ y}</code>. One would have to tweak it a bit more to prevent that.</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">nonterminal</span> <span class=\"n\">if_clauses</span> <span class=\"kp\">and</span> <span class=\"n\">if_clause</span>\n\n<span class=\"k\">syntax</span>\n  <span class=\"s\">\"_if_block\"</span> <span class=\"o\">::</span> <span class=\"s\">\"if_clauses ⇒ 'a\"</span> <span class=\"o\">(</span><span class=\"s\">\"if {//(2  _)//}\"</span> <span class=\"o\">[</span><span class=\"n\">12</span><span class=\"o\">]</span> <span class=\"n\">62</span><span class=\"o\">)</span>\n  <span class=\"s\">\"_if_clause\"</span>  <span class=\"o\">::</span> <span class=\"s\">\"bool ⇒ 'a ⇒ if_clause\"</span> <span class=\"o\">(</span><span class=\"s\">\"(2_ ⇒/ _)\"</span> <span class=\"n\">13</span><span class=\"o\">)</span>\n  <span class=\"s\">\"_if_final\"</span> <span class=\"o\">::</span> <span class=\"s\">\"'a ⇒ if_clauses\"</span> <span class=\"o\">(</span><span class=\"s\">\"otherwise ⇒ _\"</span><span class=\"o\">)</span>\n  <span class=\"s\">\"_if_cons\"</span> <span class=\"o\">::</span> <span class=\"s\">\"[if_clause, if_clauses] ⇒ if_clauses\"</span> <span class=\"o\">(</span><span class=\"s\">\"_;//_\"</span> <span class=\"o\">[</span><span class=\"n\">13</span><span class=\"o\">,</span> <span class=\"n\">12</span><span class=\"o\">]</span> <span class=\"n\">12</span><span class=\"o\">)</span>\n\n<span class=\"k\">syntax</span> <span class=\"o\">(</span><span class=\"n\">ASCII</span><span class=\"o\">)</span>\n  <span class=\"s\">\"_if_clause\"</span> <span class=\"o\">::</span> <span class=\"s\">\"[pttrn, 'a] ⇒ if_clause\"</span> <span class=\"o\">(</span><span class=\"s\">\"(2_ =&gt;/ _)\"</span> <span class=\"n\">13</span><span class=\"o\">)</span>\n\n<span class=\"k\">translations</span>\n  <span class=\"s\">\"_if_block (_if_cons (_if_clause b t) (_if_final e))\"</span>\n    <span class=\"err\">⇌</span> <span class=\"s\">\"CONST If b t e\"</span>\n  <span class=\"s\">\"_if_block (_if_cons b (_if_cons c cs))\"</span>\n    <span class=\"err\">⇌</span> <span class=\"s\">\"_if_block (_if_cons b (_if_final (_if_block (_if_cons c cs))))\"</span>\n  <span class=\"s\">\"_if_block (_if_final e)\"</span> <span class=\"err\">⇀</span> <span class=\"s\">\"e\"</span>\n\n<span class=\"kt\">term</span> <span class=\"s\">\"if {P ⇒ x; Q ⇒ y; R ⇒ z; otherwise ⇒ bla}\"</span>\n</code></pre></div>",
        "id": 225843922,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1612967521
    }
]