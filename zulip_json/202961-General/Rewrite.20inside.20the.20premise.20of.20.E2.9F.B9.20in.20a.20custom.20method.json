[
    {
        "content": "<p>Hi. I’m trying to write a proof method that recursively rewrites both sides of a logical equivalence.<br>\nFor example:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">add_zero</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"x = x + 0\"</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">simp</span>\n\n<span class=\"n\">method</span><span class=\"w\"> </span><span class=\"n\">lhs_rewrite</span><span class=\"w\"> </span><span class=\"kp\">for</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"n\">nat</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">subst</span><span class=\"w\"> </span><span class=\"n\">add_zero</span><span class=\"o\">)</span>\n\n<span class=\"n\">method</span><span class=\"w\"> </span><span class=\"n\">recursive_rewrite</span><span class=\"w\"> </span><span class=\"kp\">for</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"n\">nat</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">  </span><span class=\"o\">(</span><span class=\"n\">rule</span><span class=\"w\"> </span><span class=\"n\">iffI;</span><span class=\"w\"> </span><span class=\"n\">recursive_rewrite</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"o\">)</span>\n<span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">match</span><span class=\"w\"> </span><span class=\"n\">premises</span><span class=\"w\"> </span><span class=\"kp\">in</span><span class=\"w\"> </span><span class=\"n\">H</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"_ ⟹ _\"</span><span class=\"w\"> </span><span class=\"n\">⇒</span><span class=\"w\"> </span><span class=\"s\">‹insert H, recursive_rewrite x›</span><span class=\"o\">)</span>\n<span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">lhs_rewrite</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"o\">)</span>\n\n<span class=\"kn\">lemma</span>\n<span class=\"w\">  </span><span class=\"kp\">fixes</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"n\">nat</span>\n<span class=\"w\">  </span><span class=\"kp\">shows</span><span class=\"w\"> </span><span class=\"s\">\"(x = x) ⟷ (x = x)\"</span>\n<span class=\"w\">  </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">recursive_rewrite</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>This produces subgoals:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"n\">1.</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">⟹</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">0</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">0</span>\n<span class=\"n\">2.</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">⟹</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">0</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">0</span>\n</code></pre></div>\n<p>which is good, but I’d like the method to also rewrite inside the premise,<br>\ni.e. get both sides as <code>x + 0 = x + 0 ⟹ x + 0 = x + 0</code>.</p>\n<p>Is there a way to make a custom method rewrite inside the antecedent of implications as well? This is what I tried to do with the match premises but I don't think I'm using it correctly.</p>",
        "id": 545777791,
        "sender_full_name": "Shweta Rajiv",
        "timestamp": 1760815903
    },
    {
        "content": "<p>You can also let the subst do the work:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"n\">method</span><span class=\"w\"> </span><span class=\"n\">lhs_rewrite</span><span class=\"w\"> </span><span class=\"kp\">for</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"n\">nat</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">((</span><span class=\"n\">subst</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">asm</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">add_zero</span><span class=\"o\">)?</span><span class=\"n\">;</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">subst</span><span class=\"w\"> </span><span class=\"n\">add_zero</span><span class=\"o\">)?)</span>\n</code></pre></div>",
        "id": 545777965,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1760816161
    },
    {
        "content": "<p>I see. But suppose the rule was an implication.<br>\nFor example:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">less_imp_le_rule</span><span class=\"o\">:</span>\n<span class=\"w\">  </span><span class=\"kp\">fixes</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"n\">nat</span>\n<span class=\"w\">  </span><span class=\"kp\">shows</span><span class=\"w\"> </span><span class=\"s\">\"x &lt; y ⟹ x ≤ y\"</span>\n<span class=\"w\">  </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">simp</span>\n\n<span class=\"n\">method</span><span class=\"w\"> </span><span class=\"n\">rel_rewrite</span><span class=\"w\"> </span><span class=\"kp\">for</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"n\">nat</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">  </span><span class=\"o\">(</span><span class=\"n\">rule</span><span class=\"w\"> </span><span class=\"n\">less_imp_le_rule</span><span class=\"o\">)</span>\n\n<span class=\"n\">method</span><span class=\"w\"> </span><span class=\"n\">recursive_rewrite1</span><span class=\"w\"> </span><span class=\"kp\">for</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"n\">nat</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">  </span><span class=\"o\">(</span><span class=\"n\">rule</span><span class=\"w\"> </span><span class=\"n\">iffI;</span><span class=\"w\"> </span><span class=\"n\">recursive_rewrite1</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"o\">)</span>\n<span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">rule</span><span class=\"w\"> </span><span class=\"n\">impI;</span><span class=\"w\"> </span><span class=\"n\">recursive_rewrite1</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"o\">)</span>\n<span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">match</span><span class=\"w\"> </span><span class=\"n\">premises</span><span class=\"w\"> </span><span class=\"kp\">in</span><span class=\"w\"> </span><span class=\"n\">H</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"o\">_</span><span class=\"w\"> </span><span class=\"n\">⇒</span><span class=\"w\"> </span><span class=\"s\">‹rel_rewrite x y›</span><span class=\"o\">)</span>\n<span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">rel_rewrite</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"o\">)</span>\n\n<span class=\"kn\">lemma</span>\n<span class=\"w\">  </span><span class=\"kp\">fixes</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"n\">nat</span>\n<span class=\"w\">  </span><span class=\"kp\">shows</span><span class=\"w\"> </span><span class=\"s\">\"(x ≤ y) ⟷ (y ≤ x)\"</span>\n<span class=\"w\">  </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">recursive_rewrite1</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>After running this, the goal becomes:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"n\">1.</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">≤</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"n\">⟹</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"n\">&lt;</span><span class=\"w\"> </span><span class=\"n\">x</span>\n<span class=\"n\">2.</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"n\">≤</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">⟹</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">&lt;</span><span class=\"w\"> </span><span class=\"n\">y</span>\n</code></pre></div>\n<p>So, the rule has been applied in the conclusions.<br>\nHowever, I’d also like the premises (<code>x ≤ y</code> and <code>y ≤ x</code>) to be converted to <code>x &lt; y</code> and <code>y &lt; x</code>, respectively. So, I want the method to be applied to the premises as well.</p>",
        "id": 545781078,
        "sender_full_name": "Shweta Rajiv",
        "timestamp": 1760819887
    },
    {
        "content": "<p>Wrong direction for the rule for implicatio</p>",
        "id": 545852055,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1760902331
    },
    {
        "content": "<p>you need the dest rule</p>",
        "id": 545852061,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1760902338
    },
    {
        "content": "<p>You want this, but it does not hold:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">less_imp_le_ruleD</span><span class=\"o\">:</span>\n<span class=\"w\">  </span><span class=\"kp\">fixes</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"n\">nat</span>\n<span class=\"w\">  </span><span class=\"kp\">shows</span><span class=\"w\"> </span><span class=\"s\">\"x ≤ y ⟹ x &lt; y \"</span>\n<span class=\"w\">  </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">simp</span>\n</code></pre></div>",
        "id": 545852158,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1760902485
    },
    {
        "content": "<p>Ah, sorry I didn’t mean that I wanted to use <code>x ≤ y ⟹ x &lt; y</code>. I was trying to come up with a simple toy example to illustrate a method definition issue.</p>\n<p>I’m using the Eisbach manual to try to implement a recursive method. I can apply my rules in the conclusion of each subgoal, but I’d also like to apply them inside the premises of implications. It seemed like that’s what <code>match premises</code> is intended for, but I couldn’t get it to work. </p>\n<p>After some more reading, my understanding is that <code>match premises</code> lets you lift the premise as a hypothetical theorem to use in other rules, but it doesn’t actually let you change or rewrite the premise itself. The match method allows selection of specific premises or conclusion patterns to apply other methods to. It does not alter the structure of the goal itself. So I suppose I’d need to use <code>subst</code> or some other mechanism if I really want to rewrite inside the premise?</p>",
        "id": 546122034,
        "sender_full_name": "Shweta Rajiv",
        "timestamp": 1761005472
    },
    {
        "content": "<p>This can be taken care of with a conversion. Rewrite your lemma to use meta-equality and then you use it to  create a conversion (Conv.rewr_thm). Once you have a conversion there is a way to turn it into a tactic using CONVERSION.</p>",
        "id": 548117182,
        "sender_full_name": "Edoardo Putti",
        "timestamp": 1761904711
    }
]