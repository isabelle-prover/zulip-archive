[
    {
        "content": "<p>Hey,<br>\nI'm currently trying to write a small tactic that normalizes \"cost-expressions\" and is capable of solving inequality side-conditions of the following form, or at least reducing it to goals on natural numbers:</p>\n<div class=\"codehilite\"><pre><span></span><code>cost &#39;&#39;ll_call&#39;&#39; 3 + cost &#39;&#39;ll_sub&#39;&#39; (3*n+1) + cost &#39;&#39;ll_call&#39;&#39; (n*n)\n        &lt;= cost &#39;&#39;ll_call&#39;&#39; (n*n+10) + cost &#39;&#39;ll_add&#39;&#39; 4 + cost &#39;&#39;ll_sub&#39;&#39; (10*n+3)\n&lt;--\n3+n*n&lt;=n*n+10 /\\ 3*n+1 &lt;= 10*n+3\n</code></pre></div>\n\n\n<p>One way I came up with is to use the simplifier with @{thms add_ac} and get the right term ordering, such that terms are sorted by the first argument of cost, then condensed, and finally reduce to inequalities on natural numbers.<br>\nI found <code>Pure/term_ord.ML</code> and <code>Simplifier.set_term_ord</code>. It seems that Term_Ord.term_ord is the default, and it uses the size of the term first for comparison. </p>\n<p>At some point I got annoyed and solved the whole thing ad-hoc with another approach: a prolog-style method that iterates through the sums left and right of the inequality and extracts the inequalities on natural numbers.</p>\n<p>Whats the right way to do this. I guess it occurs in several places, and the above is only an ad-hoc solution. I found <span class=\"user-mention\" data-user-id=\"232736\">@Manuel Eberl</span>'s <a href=\"https://www.isa-afp.org/browser_info/current/AFP/Landau_Symbols/Group_Sort.html\">Group_Sort</a> is it somehow related? Did you encounter similar issues and how did you solve it?</p>",
        "id": 201038119,
        "sender_full_name": "maximilian p.l. haslbeck",
        "timestamp": 1592323682
    },
    {
        "content": "<p>Oh god, how did you even find this abomination? You could probably use `Group_Sort', but it's fairly ad-hoc itself.</p>\n<p>It's a fairly annoying problem. You can either solve it by introducing a lot of tags and simplifier setup (a bit like the Group Sort thing) to rearrange the left-hand sides and right-hand sides, or you could do it with a conversion in ML. I'm not really sure which solution is nicer.</p>\n<p>I've encountered the problem ‘you have a sum/product/whatever of terms, now rearrange it in some way’ (e.g. pull out a particular term) occasionally, and I've used both of the above approaches to solve it. Neither of them were pretty. I think nowadays I tend to go for the ML conversion approach more because I'm more comfortable writing these than I was in the past and it is more flexible, more direct, more robust, and faster.</p>",
        "id": 201121321,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1592387937
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232736\">Manuel Eberl</span> <a href=\"#narrow/stream/202961-general/topic/Simplifier.20-.20term.20ordering/near/201121321\">said</a>:</p>\n<blockquote>\n<p>Oh god, how did you even find this abomination? You could probably use `Group_Sort', but it's fairly ad-hoc itself.</p>\n</blockquote>\n<p>^^, by pure chance when tracking down a type class problem</p>",
        "id": 201121465,
        "sender_full_name": "maximilian p.l. haslbeck",
        "timestamp": 1592388035
    },
    {
        "content": "<p>anyone else faced a similar problem?</p>",
        "id": 201121498,
        "sender_full_name": "maximilian p.l. haslbeck",
        "timestamp": 1592388063
    }
]