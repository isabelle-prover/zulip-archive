[
    {
        "content": "<p>Does anybody know what Simplifier.prems_of really does? Is it equivalent to the prems I would get from Subgoal.FOCUS?</p>",
        "id": 206156886,
        "sender_full_name": "Lukas Stevens",
        "timestamp": 1596727702
    },
    {
        "content": "<p>Hm, <code>Simplifier.prems_of</code> gives you the premises that are in the simpset.</p>",
        "id": 206157483,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1596727939
    },
    {
        "content": "<p>I'm… not entirely sure which premises end up there and when.</p>",
        "id": 206157506,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1596727951
    },
    {
        "content": "<p>I see. Is it better to insert those as premises before calling Subgoal.FOCUS or should I just append those to the premises that I get from Subgoal.FOCUS?</p>",
        "id": 206157634,
        "sender_full_name": "Lukas Stevens",
        "timestamp": 1596728005
    },
    {
        "content": "<p>My guess would be that when the Simplifier simplifies e.g. an implication <code>P ==&gt; Q</code>, it will add <code>P</code> as a premise when simplifying <code>Q</code>.</p>",
        "id": 206157825,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1596728079
    },
    {
        "content": "<p>So when you do <code>Simplifier.prems_of</code> outside the context of a simplifier run, you will probably get an empty list.</p>",
        "id": 206157880,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1596728112
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"233155\">Lukas Stevens</span> <a href=\"#narrow/stream/202961-general/topic/Simplifier.2Eprems_of/near/206157634\">said</a>:</p>\n<blockquote>\n<p>I see. Is it better to insert those as premises before calling Subgoal.FOCUS or should I just append those to the premises that I get from Subgoal.FOCUS?</p>\n</blockquote>\n<p>I don't really understand what you are trying to achieve.</p>",
        "id": 206157918,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1596728135
    },
    {
        "content": "<p>In my case, I am registering the tactic as a solver. I appended the Simplifier.prems_of and now some proofs work that previously failed. I am not really sure what the semantics of a solver are, i.e. when it is called and what the context is.</p>",
        "id": 206158029,
        "sender_full_name": "Lukas Stevens",
        "timestamp": 1596728175
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232736\">Manuel Eberl</span> <a href=\"#narrow/stream/202961-general/topic/Simplifier.2Eprems_of/near/206157918\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"233155\">Lukas Stevens</span> <a href=\"#narrow/stream/202961-general/topic/Simplifier.2Eprems_of/near/206157634\">said</a>:</p>\n<blockquote>\n<p>I see. Is it better to insert those as premises before calling Subgoal.FOCUS or should I just append those to the premises that I get from Subgoal.FOCUS?</p>\n</blockquote>\n<p>I don't really understand what you are trying to achieve.</p>\n</blockquote>\n<p>It seems that I need those premises such that the tactic works as a solver?</p>",
        "id": 206158089,
        "sender_full_name": "Lukas Stevens",
        "timestamp": 1596728213
    },
    {
        "content": "<p>It seems I was right:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">consts</span> <span class=\"n\">P</span> <span class=\"o\">::</span> <span class=\"s\">&quot;&#39;a ⇒ bool&quot;</span>\n\n<span class=\"k\">simproc_setup</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"s\">&quot;P x&quot;</span><span class=\"o\">)</span> <span class=\"o\">=</span> <span class=\"err\">‹</span>\n<span class=\"n\">fn</span> <span class=\"o\">_</span> <span class=\"o\">=</span><span class=\"err\">&gt;</span> <span class=\"n\">fn</span> <span class=\"n\">ctxt</span> <span class=\"o\">=</span><span class=\"err\">&gt;</span> <span class=\"n\">fn</span> <span class=\"o\">_</span> <span class=\"o\">=</span><span class=\"err\">&gt;</span> <span class=\"k\">let</span> <span class=\"n\">val</span> <span class=\"o\">_</span> <span class=\"o\">=</span> <span class=\"err\">@</span><span class=\"ow\">{</span><span class=\"n\">print</span><span class=\"ow\">}</span> <span class=\"o\">(</span><span class=\"n\">Simplifier.prems_of</span> <span class=\"n\">ctxt</span><span class=\"o\">)</span> <span class=\"kp\">in</span> <span class=\"n\">NONE</span> <span class=\"k\">end</span>\n<span class=\"err\">›</span>\n\n<span class=\"kn\">lemma</span> <span class=\"s\">&quot;P x&quot;</span>\n  <span class=\"kp\">apply</span> <span class=\"n\">simp</span><span class=\"o\">?</span> <span class=\"c\">(* no premises *)</span>\n  <span class=\"gr\">oops</span>\n\n<span class=\"kn\">lemma</span> <span class=\"s\">&quot;Q ⟹ P x&quot;</span>\n  <span class=\"kp\">apply</span> <span class=\"n\">simp</span><span class=\"o\">?</span> <span class=\"c\">(* premises: [Q] *)</span>\n  <span class=\"gr\">oops</span>\n\n<span class=\"kn\">lemma</span> <span class=\"s\">&quot;⋀y. Q y ⟹ P x&quot;</span>\n  <span class=\"kp\">apply</span> <span class=\"n\">simp</span><span class=\"o\">?</span> <span class=\"c\">(* premises: [Q :000] *)</span>\n  <span class=\"gr\">oops</span>\n</code></pre></div>",
        "id": 206158302,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1596728313
    },
    {
        "content": "<p>Still weird, since one would expect that those premises are already part of the goal when the solver is called.</p>",
        "id": 206158539,
        "sender_full_name": "Lukas Stevens",
        "timestamp": 1596728411
    },
    {
        "content": "<p>My expectation would be the following: the solver is called on the entire goal when everything else has failed (except maybe before the loopers; I can never remember the order). Since it works on the entire goal, there are probably no premises. However, the simplifier is also used recursively to solve preconditions of conditional rewrite rules, and if the solver is called for one of those, there might be premises in the context.</p>",
        "id": 206158994,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1596728627
    },
    {
        "content": "<p>Ok, then it makes sense to consider the Simplifier prems as well.</p>",
        "id": 206159248,
        "sender_full_name": "Lukas Stevens",
        "timestamp": 1596728729
    },
    {
        "content": "<p>This is just a guess.</p>",
        "id": 206159936,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1596729025
    },
    {
        "content": "<p>Looks like I guessed correctly. Perhaps this snippet is illuminating to you:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">consts</span>\n  <span class=\"n\">P</span> <span class=\"o\">::</span> <span class=\"s\">&quot;&#39;a ⇒ bool&quot;</span>\n  <span class=\"n\">Q</span> <span class=\"o\">::</span> <span class=\"s\">&quot;&#39;a ⇒ bool&quot;</span>\n  <span class=\"n\">P&#39;</span> <span class=\"o\">::</span> <span class=\"s\">&quot;&#39;a ⇒ bool&quot;</span>\n\n<span class=\"kn\">lemma</span> <span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]:</span> <span class=\"s\">&quot;Q x ⟹ P x = P&#39; x&quot;</span>\n  <span class=\"gr\">sorry</span>\n\n<span class=\"k\">setup</span> <span class=\"err\">‹</span><span class=\"n\">map_theory_simpset</span> <span class=\"o\">(</span><span class=\"n\">fn</span> <span class=\"n\">ctxt</span> <span class=\"o\">=</span><span class=\"err\">&gt;</span>\n<span class=\"k\">let</span>\n  <span class=\"n\">val</span> <span class=\"n\">solver</span> <span class=\"o\">=</span>\n    <span class=\"n\">Simplifier.mk_solver</span> <span class=\"s\">&quot;foo&quot;</span>\n      <span class=\"o\">(</span><span class=\"n\">fn</span> <span class=\"n\">ctxt</span> <span class=\"o\">=</span><span class=\"err\">&gt;</span> <span class=\"n\">fn</span> <span class=\"n\">i</span> <span class=\"o\">=</span><span class=\"err\">&gt;</span> <span class=\"n\">fn</span> <span class=\"kt\">thm</span> <span class=\"o\">=</span><span class=\"err\">&gt;</span>\n        <span class=\"k\">let</span>\n          <span class=\"n\">val</span> <span class=\"o\">_</span> <span class=\"o\">=</span> <span class=\"n\">Pretty.writeln</span> <span class=\"o\">(</span><span class=\"n\">Pretty.str</span> <span class=\"s\">&quot; &quot;</span><span class=\"o\">)</span>\n          <span class=\"n\">val</span> <span class=\"o\">_</span> <span class=\"o\">=</span> <span class=\"err\">@</span><span class=\"ow\">{</span><span class=\"n\">print</span><span class=\"ow\">}</span> <span class=\"s\">&quot;SOLVER INVOCATION&quot;</span>\n          <span class=\"n\">val</span> <span class=\"o\">_</span> <span class=\"o\">=</span> <span class=\"n\">Pretty.writeln</span> <span class=\"o\">(</span><span class=\"n\">Pretty.block</span> <span class=\"o\">(</span><span class=\"n\">Pretty.str</span> <span class=\"s\">&quot;Premises: &quot;</span> <span class=\"o\">::</span>\n                    <span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">Syntax.pretty_term</span> <span class=\"n\">ctxt</span> <span class=\"n\">o</span> <span class=\"n\">Thm.prop_of</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Simplifier.prems_of</span> <span class=\"n\">ctxt</span><span class=\"o\">)))</span>\n          <span class=\"n\">val</span> <span class=\"o\">_</span> <span class=\"o\">=</span> <span class=\"n\">Pretty.writeln</span> <span class=\"o\">(</span><span class=\"n\">Pretty.block</span> <span class=\"o\">[</span><span class=\"n\">Pretty.str</span> <span class=\"s\">&quot;Goal: &quot;</span><span class=\"o\">,</span> <span class=\"n\">Syntax.pretty_term</span> <span class=\"n\">ctxt</span> <span class=\"o\">(</span><span class=\"n\">Thm.concl_of</span> <span class=\"kt\">thm</span><span class=\"o\">)])</span>\n          <span class=\"n\">val</span> <span class=\"o\">_</span> <span class=\"o\">=</span> <span class=\"err\">@</span><span class=\"ow\">{</span><span class=\"n\">print</span><span class=\"ow\">}</span> <span class=\"s\">&quot;END SOLVER INVOCATION&quot;</span>\n        <span class=\"kp\">in</span>\n          <span class=\"n\">Seq.empty</span>\n        <span class=\"k\">end</span><span class=\"o\">)</span>\n<span class=\"kp\">in</span>\n  <span class=\"n\">ctxt</span> <span class=\"n\">addSolver</span> <span class=\"n\">solver</span>\n<span class=\"k\">end</span><span class=\"o\">)</span>\n<span class=\"err\">›</span>\n\n<span class=\"kn\">lemma</span> <span class=\"s\">&quot;P x&quot;</span>\n  <span class=\"kp\">apply</span> <span class=\"n\">simp</span><span class=\"o\">?</span>\n  <span class=\"gr\">oops</span>\n\n<span class=\"kn\">lemma</span> <span class=\"s\">&quot;R ⟹ P x&quot;</span>\n  <span class=\"kp\">apply</span> <span class=\"n\">simp</span><span class=\"o\">?</span>\n  <span class=\"gr\">oops</span>\n\n<span class=\"kn\">lemma</span> <span class=\"s\">&quot;⋀y. R y ⟹ P x&quot;</span>\n  <span class=\"kp\">apply</span> <span class=\"n\">simp</span><span class=\"o\">?</span>\n  <span class=\"gr\">oops</span>\n</code></pre></div>",
        "id": 206161646,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1596729769
    },
    {
        "content": "<p>(Look at the output after those \"simp?\" commands)</p>",
        "id": 206161679,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1596729787
    },
    {
        "content": "<p>Thank you, I will have a look at it. The solver now works for all of Main at least <span aria-label=\"party ball\" class=\"emoji emoji-1f38a\" role=\"img\" title=\"party ball\">:party_ball:</span></p>",
        "id": 206163032,
        "sender_full_name": "Lukas Stevens",
        "timestamp": 1596730475
    },
    {
        "content": "<p>What did the old solver do?</p>",
        "id": 206163151,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1596730544
    },
    {
        "content": "<p>The old linarith solver I mean.</p>",
        "id": 206163158,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1596730550
    },
    {
        "content": "<p>It is the old order solver. It decides the theory of partial and linear orders.</p>",
        "id": 206163442,
        "sender_full_name": "Lukas Stevens",
        "timestamp": 1596730696
    },
    {
        "content": "<p>The new solver is a bit more powerful in the theory of partial orders. While the core is verified it is quite hard to get the glue code right <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 206163718,
        "sender_full_name": "Lukas Stevens",
        "timestamp": 1596730842
    },
    {
        "content": "<p>Then I don't understand. If we're talking about the old solver, then why do things suddenly not work anymore?</p>",
        "id": 206165849,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1596732119
    },
    {
        "content": "<p>Or if we are talking about your new one after all, my question was: how does the old one treat premises?</p>",
        "id": 206165921,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1596732147
    },
    {
        "content": "<p>The old one also added those premises. I carelessly deleted that bit apparently.</p>",
        "id": 206166089,
        "sender_full_name": "Lukas Stevens",
        "timestamp": 1596732243
    }
]