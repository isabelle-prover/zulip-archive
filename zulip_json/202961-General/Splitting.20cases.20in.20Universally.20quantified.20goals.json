[
    {
        "content": "<p>Let's say I define a datatype as follows:</p>\n<div class=\"codehilite\"><pre><span></span><code>datatype mydata = A | B\n</code></pre></div>\n<p>and I'm in an apply-style proof where my goal looks like</p>\n<div class=\"codehilite\"><pre><span></span><code>1. ⋀x :: mydata. P x ⟹ Q x\n</code></pre></div>\n<p>If I apply(induct_tac x) I get</p>\n<div class=\"codehilite\"><pre><span></span><code>proof (prove)\ngoal (2 subgoals):\n 1. ⋀x. P x ⟹ Q A\n 2. ⋀x. P x ⟹ Q B\n</code></pre></div>\n<p>and if I apply(rule mydata.induct) I get the same thing. Notice x isn't replaced in the hypothesis. Induct_tac even warns me about this:</p>\n<div class=\"codehilite\"><pre><span></span><code>Induction variable occurs also among premises: &quot;x&quot;⌂\n</code></pre></div>\n<p>The reason I'm using an apply style proof is because what I'm trying to do is automated in a method I'm writing Eisbach style. Is there no way to split into cases on the meta quantified variable, including in the hypotheses, or am I missing something?</p>",
        "id": 266373781,
        "sender_full_name": "Matthew Torrence",
        "timestamp": 1640807583
    },
    {
        "content": "<p>Note that this might look a little familiar, since I had a similar question a while back with a more complicated induction, where the resolution was (somewhat frustratingly) just \"don't use an apply style proof\". Is that still the case here? Like I said, this is deep in an automated method I'm working on, and so it's not a matter of just breaking into an Isar style proof unfortunately</p>",
        "id": 266373884,
        "sender_full_name": "Matthew Torrence",
        "timestamp": 1640807685
    },
    {
        "content": "<p>Can you do something like:</p>\n<div class=\"codehilite\"><pre><span></span><code>  subgoal for x\n  apply (induct x rule: mydata.induct)\n</code></pre></div>\n<p>?<br>\n(I have never really investigated into what is possible in Eisbach...)</p>",
        "id": 266506264,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1640960845
    }
]