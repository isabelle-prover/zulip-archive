[
    {
        "content": "<p>I looked up the definitions of True and False, and they're very surprising to me. For reference:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">definition</span><span class=\"w\"> </span><span class=\"n\">True</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"n\">bool</span>\n<span class=\"w\">  </span><span class=\"kp\">where</span><span class=\"w\"> </span><span class=\"s\">\"True ≡ ((λx::bool. x) = (λx. x))\"</span>\n\n<span class=\"k\">definition</span><span class=\"w\"> </span><span class=\"n\">False</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"n\">bool</span>\n<span class=\"w\">  </span><span class=\"kp\">where</span><span class=\"w\"> </span><span class=\"s\">\"False ≡ (∀P. P)\"</span>\n</code></pre></div>\n<p>One the one hand, they make sense, because their values are literally true and false respectively - the lambda terms in the True definition are equivalent, and all propositions are not true, so ∀P. P is false.</p>\n<p>However, I always assumed True and False would just be defined as a datatype with two constructors. Why are they defined this way?</p>",
        "id": 392624752,
        "sender_full_name": "Alex Weisberger",
        "timestamp": 1695430871
    },
    {
        "content": "<p>I suspect one (part of) the answer is that logical connectives are defined in HOL before any kind of datatypes (which are not primitive in the logic)</p>",
        "id": 392645648,
        "sender_full_name": "Yong Kiam",
        "timestamp": 1695445429
    },
    {
        "content": "<p>And let me destroy your world a second time: nat is also axiomatized and not a datatype</p>",
        "id": 392649167,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1695448273
    },
    {
        "content": "<p>You need nats and termination to even express that datatypes are well formed</p>",
        "id": 392649193,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1695448312
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"233198\">Mathias Fleury</span> <a href=\"#narrow/stream/202961-General/topic/Surprising.20definitions.20of.20True.20and.20False.2E/near/392649193\">said</a>:</p>\n<blockquote>\n<p>You need nats and termination to even express that datatypes are well formed</p>\n</blockquote>\n<p>Ah, <em>that’s</em> the reason. I already saw in the past that <code>nat</code> isn’t defined via <code>datatype</code> but somehow thought that this was a leftover from a time when the new datatype package didn’t yet exist.</p>\n<p>Well, let’s go on: <code>prod</code> also isn’t defined via <code>datatype</code>, right? Why is this?</p>",
        "id": 392692824,
        "sender_full_name": "Wolfgang Jeltsch",
        "timestamp": 1695472101
    },
    {
        "content": "<p>I also didn't realize that about <code>nat</code>. I guess things get complicated down at the level of the foundations of the logic :D</p>",
        "id": 392835568,
        "sender_full_name": "Alex Weisberger",
        "timestamp": 1695563616
    },
    {
        "content": "<blockquote>\n<p>prod also isn’t defined via datatype, right? Why is this?</p>\n</blockquote>\n<p><code>prod</code> and <code>sum</code> are used to define datatypes, if you specify for example <code>datatype 'a foo = Bar | Foo 'a | Both 'a \"'a foo\"</code> the datatype package internally works with the type <code>unit + 'a + 'a * 'b</code>, proves that it is a functor in <code>'a</code> and <code>'b</code>, constructs a suitable algebra and creates the datatype as a fixpoint of the functor (removing <code>'b</code> and replacing it with recursion)</p>",
        "id": 392944999,
        "sender_full_name": "Jan van Brügge",
        "timestamp": 1695630969
    },
    {
        "content": "<p>There a bunch of base functors that the functor proof uses, namely <code>sum</code>, <code>prod</code>, <code>'a =&gt; 'b</code>, identity and constant (both are not their own types, just different theorems)</p>",
        "id": 392945324,
        "sender_full_name": "Jan van Brügge",
        "timestamp": 1695631071
    },
    {
        "content": "<p>You can see them in <code>src/HOL/Basic_BNFs.thy</code></p>",
        "id": 392945426,
        "sender_full_name": "Jan van Brügge",
        "timestamp": 1695631091
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"459086\">@Alex Weisberger</span> that definition looks more intuitive to me as a mathematics degree holder. Every field of mathematics can be represented as a set of assumptions and their logical consequences. To construct all of mathematics, I was taught ZFC but Isabelle's HOL axiom system is nicely presented in Kuncar and Popescu's <a href=\"https://doi.org/10.1007/s10817-018-9454-8\">A Consistent Foundation for Isabelle/HOL</a>. From those axioms you can model datatypes, sums, products, and all those things programmers know. Isabelle has automated machinery to make each new declaration of these entities consistent/within its HOL foundation.</p>",
        "id": 392947192,
        "sender_full_name": "Jonathan Julian Huerta y Munive",
        "timestamp": 1695631568
    }
]