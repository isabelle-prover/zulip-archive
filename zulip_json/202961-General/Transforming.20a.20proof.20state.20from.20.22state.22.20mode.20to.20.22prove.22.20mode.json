[
    {
        "content": "<p>Suppose I have the following snippet:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">theory</span><span class=\"w\"> </span><span class=\"n\">Scratch</span>\n<span class=\"w\">  </span><span class=\"kp\">imports</span><span class=\"w\"> </span><span class=\"s\">\"HOL-ex.Sketch_and_Explore\"</span><span class=\"w\">  </span><span class=\"n\">Main</span>\n<span class=\"k\">begin</span>\n\n<span class=\"kn\">lemma</span>\n<span class=\"w\">  </span><span class=\"kp\">fixes</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"n\">nat</span>\n<span class=\"w\">  </span><span class=\"kp\">assumes</span><span class=\"w\"> </span><span class=\"s\">\"foo x ∧ bar x ∧ baz x ∧ qux x\"</span>\n<span class=\"w\">  </span><span class=\"kp\">shows</span><span class=\"w\"> </span><span class=\"s\">\"(foo (f x) ∨ x + 1 &gt; x) ∧ (bar (f x) ∨ x + 1 &gt; x) ∧ (baz (f x) ∨ x + 1 &gt; x) ∧ (qux (f x) ∨ x + 1 &gt; x)\"</span>\n<span class=\"k\">proof</span><span class=\"w\"> </span><span class=\"o\">-</span>\n<span class=\"w\">  </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"s\">\"foo x\"</span>\n\n<span class=\"w\">    </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">assms</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">argo</span>\n<span class=\"w\">  </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"s\">\"bar x\"</span>\n\n<span class=\"w\">    </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">assms</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">argo</span>\n<span class=\"w\">  </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"s\">\"baz x\"</span>\n<span class=\"w\">    </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">assms</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">argo</span>\n<span class=\"w\">  </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"s\">\"qux x\"</span>\n<span class=\"w\">    </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">assms</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">argo</span>\n\n<span class=\"w\">  </span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">thesis</span>\n<span class=\"w\">  </span><span class=\"c\">(* sketch (intro conjI) *)</span>\n<span class=\"w\">    </span><span class=\"n\">sketch</span><span class=\"o\">(</span><span class=\"n\">intro</span><span class=\"w\"> </span><span class=\"n\">conjI</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"k\">proof</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">intro</span><span class=\"w\"> </span><span class=\"n\">conjI</span><span class=\"o\">)</span>\n\n<span class=\"w\">    </span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"s\">\"foo (f x) ∨ x &lt; x + 1\"</span>\n<span class=\"w\">    </span><span class=\"k\">next</span>\n<span class=\"w\">      </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">simp</span>\n<span class=\"w\">  </span><span class=\"k\">next</span>\n<span class=\"w\">    </span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"s\">\"bar (f x) ∨ x &lt; x + 1\"</span>\n<span class=\"w\">      </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">simp</span>\n<span class=\"w\">  </span><span class=\"k\">next</span>\n<span class=\"w\">    </span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"s\">\"baz (f x) ∨ x &lt; x + 1\"</span>\n<span class=\"w\">      </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">simp</span>\n<span class=\"w\">  </span><span class=\"k\">next</span>\n<span class=\"w\">    </span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"s\">\"qux (f x) ∨ x &lt; x + 1\"</span>\n<span class=\"w\">      </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">simp</span>\n<span class=\"w\">  </span><span class=\"k\">qed</span>\n<span class=\"k\">qed</span>\n\n\n<span class=\"k\">end</span>\n</code></pre></div>\n<p>And I have some way of obtaining the proof state (which we call<code>state0</code>) in ML just after the line <code>proof (intro conjI)</code> in our lemma, how do we transform <code>state0</code> to a new state <code>state1</code>, where <code>state1</code> is identical to <code>state0</code> except that now it is in \"prove\" mode instead? Is it possible to additionally make all the subgoals in the lemma (in our example there are 4) exposed in <code>state1</code> (as opposed to having only.1 subgoal present if we mundanely use the \"show ...(goal 1)\" command afterwards)?</p>\n<p>The background is that I'm trying to extend the <code>sketch</code> command from <code>HOL-ex</code>, so that it automatically also generates the one-liners created by sledgehammer wherever possible rather than sorry-ing all subgoal proofs.</p>\n<p>thanks a lot,<br>\nChengsong</p>",
        "id": 442669649,
        "sender_full_name": "Chengsong Tan",
        "timestamp": 1717550913
    },
    {
        "content": "<p>why are you using <code>proof (intro conjI)</code> instead of <code>apply (intro conjI)</code>?</p>",
        "id": 442690033,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1717560922
    },
    {
        "content": "<p>maybe followed by <code>subgoal</code> to focus on a single goal in order to sorry it?</p>",
        "id": 442690158,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1717560972
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"233198\">Mathias Fleury</span> <a href=\"#narrow/stream/202961-General/topic/Transforming.20a.20proof.20state.20from.20.22state.22.20mode.20to.20.22prove.22.20mode/near/442690158\">said</a>:</p>\n<blockquote>\n<p>maybe followed by <code>subgoal</code> to focus on a single goal in order to sorry it?</p>\n</blockquote>\n<p>Good point, I currently only have the state in Isar proof mode available, as I was modifying the Sketch_and_Explore.thy file, in which the <code>proof (intro conjI)</code> seems to be what you get after parsing from the command keyword argument (even if what we pass to <code>sketch</code> is <code>(intro conjI)</code> only), and I don't have a way of intervening:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">print_proof_text_from_state</span><span class=\"w\"> </span><span class=\"n\">print</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">some_method_ref</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"o\">((</span><span class=\"n\">Method.text</span><span class=\"w\"> </span><span class=\"n\">*</span><span class=\"w\"> </span><span class=\"n\">Position.range</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">*</span><span class=\"w\"> </span><span class=\"n\">Token.T</span><span class=\"w\"> </span><span class=\"n\">list</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">option</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">state</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">  </span><span class=\"k\">let</span>\n<span class=\"w\">    </span><span class=\"n\">val</span><span class=\"w\"> </span><span class=\"n\">state'</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">state</span>\n<span class=\"w\">      </span><span class=\"o\">|</span><span class=\"n\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Proof.proof</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Option.map</span><span class=\"w\"> </span><span class=\"n\">fst</span><span class=\"w\"> </span><span class=\"n\">some_method_ref</span><span class=\"o\">)</span>\n<span class=\"w\">      </span><span class=\"o\">|</span><span class=\"n\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Seq.the_result</span><span class=\"w\"> </span><span class=\"s\">\"\"</span>\n<span class=\"ow\">...</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">some</span><span class=\"w\"> </span><span class=\"n\">code</span><span class=\"w\"> </span><span class=\"kp\">in</span><span class=\"w\"> </span><span class=\"n\">between</span><span class=\"o\">)</span>\n<span class=\"n\">val</span><span class=\"w\"> </span><span class=\"n\">super_sketch</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">print_proof_text_from_state_generate_oneliners</span><span class=\"w\"> </span><span class=\"n\">print_super_sketch;</span>\n\n<span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">sketch_cmd</span><span class=\"w\"> </span><span class=\"n\">some_method_text</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">  </span><span class=\"n\">Toplevel.keep_proof</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">K</span><span class=\"w\"> </span><span class=\"o\">()</span><span class=\"w\"> </span><span class=\"n\">o</span><span class=\"w\"> </span><span class=\"n\">sketch</span><span class=\"w\"> </span><span class=\"n\">some_method_text</span><span class=\"w\"> </span><span class=\"n\">o</span><span class=\"w\"> </span><span class=\"n\">Toplevel.proof_of</span><span class=\"o\">)</span>\n\n<span class=\"n\">val</span><span class=\"w\"> </span><span class=\"o\">_</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">  </span><span class=\"n\">Outer_Syntax.command</span><span class=\"w\"> </span><span class=\" -Symbol\">\\&lt;^command_keyword&gt;</span><span class=\"ss\">\\&lt;open&gt;</span><span class=\"s\">sketch</span><span class=\"ss\">\\&lt;close&gt;</span>\n<span class=\"w\">    </span><span class=\"s\">\"print sketch of Isar proof text after method application\"</span>\n<span class=\"w\">    </span><span class=\"o\">(</span><span class=\"n\">Scan.option</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Scan.trace</span><span class=\"w\"> </span><span class=\"n\">Method.parse</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"n\">sketch_cmd</span><span class=\"o\">)</span><span class=\"n\">;</span>\n</code></pre></div>\n<p>If you try to call sledgehammer from <code>state'</code> you get <code>Illegal application of ... in \"state\" mode</code>.</p>\n<p>So a more general question I should have asked in the first place: how to parse a string and update the proof state after that string's tactics/methods have been consumed? Would it be more difficult if it is not an Isar command?</p>",
        "id": 442751165,
        "sender_full_name": "Chengsong Tan",
        "timestamp": 1717584194
    }
]