[
    {
        "content": "<p>I have a proof by structural induction where several (28 of 29) cases can be proved directly with a terminal backward proof:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">by</span> <span class=\"n\">cases</span> <span class=\"n\">auto</span> <span class=\"c\">(* which is just syntactic sugar for: proof cases qed auto *)</span>\n</code></pre></div>\n<p>Now I'd like to omit these cases and just use a single method after the top level <code>qed</code>. Is there a way to translate this simple terminal proof into a single method that does all the goal refinement normally done by <code>by</code> and which can be used directly with <code>qed</code>?</p>",
        "id": 262454711,
        "sender_full_name": "Florian Sextl",
        "timestamp": 1637674007
    },
    {
        "content": "<p>To clarify:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">proof</span><span class=\"o\">(</span><span class=\"n\">induction</span> <span class=\"o\">_)</span>\n<span class=\"k\">qed</span> <span class=\"o\">(</span><span class=\"n\">cases</span><span class=\"err\">;</span> <span class=\"n\">auto</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>does not work?</p>",
        "id": 262455875,
        "sender_full_name": "Lukas Stevens",
        "timestamp": 1637674556
    },
    {
        "content": "<p>No, unfortunately not.</p>",
        "id": 262455979,
        "sender_full_name": "Florian Sextl",
        "timestamp": 1637674611
    },
    {
        "content": "<p>Ah, of course that does not work. What about</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">proof</span><span class=\"o\">(</span><span class=\"n\">induction</span> <span class=\"o\">_</span><span class=\"err\">;</span> <span class=\"n\">cases</span><span class=\"o\">)</span>\n<span class=\"k\">qed</span> <span class=\"n\">auto</span>\n</code></pre></div>\n<p>or</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">proof</span><span class=\"o\">(</span><span class=\"n\">induction</span> <span class=\"o\">_)</span>\n<span class=\"k\">qed</span> <span class=\"o\">((</span><span class=\"n\">cases</span><span class=\"err\">;</span> <span class=\"n\">auto</span><span class=\"o\">)+)</span>\n</code></pre></div>",
        "id": 262458984,
        "sender_full_name": "Lukas Stevens",
        "timestamp": 1637676069
    },
    {
        "content": "<p>I was able to change the setup of a few elimination rules in the meantime and now at least some of the subgoals can be proven with <code>auto</code>. Yet, there are still some which require <code>cases auto</code> and together with these your other suggestions also don't work.</p>",
        "id": 262464326,
        "sender_full_name": "Florian Sextl",
        "timestamp": 1637678503
    },
    {
        "content": "<p>While it would be very helpful to see the lemma you are trying to prove, I could suggest trying</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">proof</span><span class=\"o\">(</span><span class=\"n\">induction</span> <span class=\"o\">_</span><span class=\"err\">;</span> <span class=\"n\">cases</span><span class=\"o\">)</span>\n<span class=\"k\">qed</span> <span class=\"o\">(</span><span class=\"n\">auto</span> <span class=\"o\">|</span> <span class=\"n\">assumption</span><span class=\"o\">)+</span>\n</code></pre></div>\n<p>as <code>by</code> makes implicit calls to <code>assumption</code> after applying the proof method</p>",
        "id": 262470002,
        "sender_full_name": "Alexander Taepper",
        "timestamp": 1637680933
    },
    {
        "content": "<p>Well, nevermind what I wrote above.. assumption are of course being resolved in the simplification process of auto.. my bad!</p>",
        "id": 262470682,
        "sender_full_name": "Alexander Taepper",
        "timestamp": 1637681253
    },
    {
        "content": "<p>Thanks for the input. Unfortunately, by putting <code>cases</code> after <code>induction</code>, Isabelle only splits the value of some undefined predicate instead of splitting the correct data. </p>\n<p>The formalization I'm working on is a bit too involved to post in one piece and not yet published to a public repository, but it's a rather direct port of the Iris framework's HeapLang formalization and the corresponding Coq lemma can be found <a href=\"https://gitlab.mpi-sws.org/iris/iris/-/blob/master/iris_heap_lang/lang.v#L732\">here</a>.</p>\n<p>I just published the first draft of the port and the corresponding lemma can now be found <a href=\"https://github.com/firefighterduck/isariris/blob/main/HeapLang/State.thy#L192\">here</a>.</p>",
        "id": 262471424,
        "sender_full_name": "Florian Sextl",
        "timestamp": 1637681594
    }
]