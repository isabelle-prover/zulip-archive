[
    {
        "content": "<p>I have </p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">locale</span><span class=\"w\"> </span><span class=\"n\">monoid</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">  </span><span class=\"kp\">fixes</span><span class=\"w\"> </span><span class=\"n\">Monoid</span><span class=\"w\"> </span><span class=\"kp\">and</span><span class=\"w\"> </span><span class=\"n\">composition</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"kp\">infixl</span><span class=\"w\"> </span><span class=\"s\">\"oMonoid\"</span><span class=\"w\"> </span><span class=\"n\">70</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"kp\">and</span><span class=\"w\"> </span><span class=\"n\">unitMonoid</span>\n<span class=\"w\">  </span><span class=\"kp\">assumes</span><span class=\"w\"> </span><span class=\"n\">composition_closed</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">intro</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">simp</span><span class=\"o\">]:</span><span class=\"w\"> </span><span class=\"s\">\"⟦ a ∈ Monoid; b ∈ Monoid ⟧ ⟹ a oMonoid b ∈ Monoid\"</span>\n<span class=\"w\">    </span><span class=\"kp\">and</span><span class=\"w\"> </span><span class=\"n\">unit_closed</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">intro</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">simp</span><span class=\"o\">]:</span><span class=\"w\"> </span><span class=\"s\">\"unitMonoid ∈ Monoid\"</span>\n<span class=\"w\">    </span><span class=\"kp\">and</span><span class=\"w\"> </span><span class=\"n\">associative</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">intro</span><span class=\"o\">]:</span><span class=\"w\"> </span><span class=\"s\">\"⟦ a ∈ Monoid; b ∈ Monoid; c ∈ Monoid ⟧ ⟹ (a oMonoid b) oMonoid c = a oMonoid (b oMonoid c)\"</span>\n<span class=\"w\">    </span><span class=\"kp\">and</span><span class=\"w\"> </span><span class=\"n\">left_unit</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">intro</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">simp</span><span class=\"o\">]:</span><span class=\"w\"> </span><span class=\"s\">\"a ∈ Monoid ⟹ unitMonoid oMonoid a = a\"</span>\n<span class=\"w\">    </span><span class=\"kp\">and</span><span class=\"w\"> </span><span class=\"n\">right_unit</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">intro</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">simp</span><span class=\"o\">]:</span><span class=\"w\"> </span><span class=\"s\">\"a ∈ Monoid ⟹ a oMonoid unitMonoid = a\"</span>\n\n<span class=\"kn\">interpretation</span><span class=\"w\"> </span><span class=\"n\">charlist</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">monoid</span><span class=\"w\"> </span><span class=\"kp\">where</span>\n<span class=\"w\">  </span><span class=\"n\">Monoid</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"UNIV :: char list set\"</span><span class=\"w\"> </span><span class=\"kp\">and</span>\n<span class=\"w\">  </span><span class=\"n\">composition</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">List.append</span><span class=\"w\"> </span><span class=\"kp\">and</span>\n<span class=\"w\">  </span><span class=\"n\">unitMonoid</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"[]\"</span>\n<span class=\"w\">  </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">unfold_locales</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">auto</span>\n</code></pre></div>\n<p>Now I would like to construct a type synonym that would have a constraint:</p>\n<p>type_synonym ('a, 'm: monoid) tyop = ...</p>\n<p>May I use a type class or a locale construct for this, or this is not possible due to the limitations of the type system?</p>\n<p>Also, I see a problem here that monoid is not a type but a locale, a different syntactic category.</p>\n<p>Please let me know whether my goal is doable in Isabelle in any way.</p>",
        "id": 366535474,
        "sender_full_name": "Gergely Buday",
        "timestamp": 1686842067
    }
]