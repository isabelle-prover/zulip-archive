[
    {
        "content": "<p>Hi all,</p>\n<p>What does it mean for Vampire to say \"problem is unprovable\" after calling Sledgehammer on a goal?<br>\nIf this means the lemma is counter-satsifiable, then how do I get a counterexample from there?<br>\nI tried nitpick and quickcheck with no luck.</p>\n<p>(line 1593)<br>\n<a href=\"/user_uploads/14278/LDg2anGlqXYKpgy7oFp2Q56u/Transposed.thy\">Transposed.thy</a><br>\nThanks,<br>\nChengsong</p>",
        "id": 396986990,
        "sender_full_name": "Chengsong Tan",
        "timestamp": 1697495986
    },
    {
        "content": "<p>I don't have that message, but do not read anything into it. Just read it as a failure to find a proof</p>",
        "id": 397025056,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1697517978
    },
    {
        "content": "<p>In general it is extremely hard from a Sledghammer to conclude about satisfiability, because you would have to check which facts have been translated</p>",
        "id": 397025123,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1697518046
    },
    {
        "content": "<p>BTW in your goal, the fact that you unfold stuff by hand but not SWR that you just defined… you should start with SWR because you have no facts on it</p>",
        "id": 397025208,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1697518095
    },
    {
        "content": "<p>And a final remark, this kind of stuff, you have to write by hand:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]:</span><span class=\"w\"> </span><span class=\"s\">‹Owner (CLEntry.block_state (devcache1 (T [a sHost= b]))) =</span>\n<span class=\"s\">     Owner (CLEntry.block_state (devcache1 T))›</span>\n<span class=\"w\">  </span><span class=\"s\">‹Owner (CLEntry.block_state (devcache1 (T ++cl))) =</span>\n<span class=\"s\">     Owner (CLEntry.block_state (devcache1 T))›</span>\n<span class=\"w\">  </span><span class=\"s\">‹Owner (CLEntry.block_state (devcache1 (T [ q -=req] ))) =</span>\n<span class=\"s\">     Owner (CLEntry.block_state (devcache1 T))›</span>\n\n<span class=\"s\">‹Owner (CLEntry.block_state (devcache2 (T [a sHost= b]))) =</span>\n<span class=\"s\">     Owner (CLEntry.block_state (devcache2 T))›</span>\n<span class=\"w\">  </span><span class=\"s\">‹Owner (CLEntry.block_state (devcache2 (T [ q -=req] ))) =</span>\n<span class=\"s\">     Owner (CLEntry.block_state (devcache2 T))›</span>\n<span class=\"w\">  </span><span class=\"s\">‹Owner (CLEntry.block_state (devcache2 (T [ q' +=reqresp t k l] ))) =</span>\n<span class=\"s\">     Owner (CLEntry.block_state (devcache2 T))›</span>\n<span class=\"w\">  </span><span class=\"s\">‹Owner (CLEntry.block_state (devcache2 (T ++cl))) =</span>\n<span class=\"s\">     Owner (CLEntry.block_state (devcache2 T))›</span>\n<span class=\"w\">  </span><span class=\"s\">‹Owner (CLEntry.block_state (devcache1 (T [ q' +=reqresp t k l] ))) =</span>\n<span class=\"s\">     Owner (CLEntry.block_state (devcache1 T))›</span>\n<span class=\"w\">  </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">auto</span><span class=\"w\"> </span><span class=\"n\">simp</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">change_host_state_def</span><span class=\"w\"> </span><span class=\"n\">update_clock_def</span><span class=\"w\"> </span><span class=\"n\">consumeReq_def</span><span class=\"w\"> </span><span class=\"n\">host_sends_response_def</span><span class=\"w\"> </span><span class=\"n\">Let_def</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 397026469,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1697518573
    },
    {
        "content": "<p>You don't want sledgehammer to inline the proof each time. You want this to be applied by auto</p>",
        "id": 397026563,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1697518606
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"233198\">Mathias Fleury</span> <a href=\"#narrow/stream/202961-General/topic/Vampire.3A.20problem.20is.20unprovable/near/397025208\">said</a>:</p>\n<blockquote>\n<p>BTW in your goal, the fact that you unfold stuff by hand but not SWR that you just defined… you should start with SWR because you have no facts on it</p>\n</blockquote>\n<p>Hi Mathias,<br>\nBy \"you should start with SW[M]R\" do you mean adding these definitions to the [simp] set? Or is it more like writing facts like the snippet you showed?</p>",
        "id": 397088941,
        "sender_full_name": "Chengsong Tan",
        "timestamp": 1697542477
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"233198\">Mathias Fleury</span> <a href=\"#narrow/stream/202961-General/topic/Vampire.3A.20problem.20is.20unprovable/near/397026469\">said</a>:</p>\n<blockquote>\n<p>And a final remark, this kind of stuff, you have to write by hand:</p>\n<p><div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]:</span><span class=\"w\"> </span><span class=\"s\">‹Owner (CLEntry.block_state (devcache1 (T [a sHost= b]))) =</span>\n<span class=\"s\">     Owner (CLEntry.block_state (devcache1 T))›</span>\n<span class=\"w\">  </span><span class=\"s\">‹Owner (CLEntry.block_state (devcache1 (T ++cl))) =</span>\n<span class=\"s\">     Owner (CLEntry.block_state (devcache1 T))›</span>\n<span class=\"w\">  </span><span class=\"s\">‹Owner (CLEntry.block_state (devcache1 (T [ q -=req] ))) =</span>\n<span class=\"s\">     Owner (CLEntry.block_state (devcache1 T))›</span>\n\n<span class=\"s\">‹Owner (CLEntry.block_state (devcache2 (T [a sHost= b]))) =</span>\n<span class=\"s\">     Owner (CLEntry.block_state (devcache2 T))›</span>\n<span class=\"w\">  </span><span class=\"s\">‹Owner (CLEntry.block_state (devcache2 (T [ q -=req] ))) =</span>\n<span class=\"s\">     Owner (CLEntry.block_state (devcache2 T))›</span>\n<span class=\"w\">  </span><span class=\"s\">‹Owner (CLEntry.block_state (devcache2 (T [ q' +=reqresp t k l] ))) =</span>\n<span class=\"s\">     Owner (CLEntry.block_state (devcache2 T))›</span>\n<span class=\"w\">  </span><span class=\"s\">‹Owner (CLEntry.block_state (devcache2 (T ++cl))) =</span>\n<span class=\"s\">     Owner (CLEntry.block_state (devcache2 T))›</span>\n<span class=\"w\">  </span><span class=\"s\">‹Owner (CLEntry.block_state (devcache1 (T [ q' +=reqresp t k l] ))) =</span>\n<span class=\"s\">     Owner (CLEntry.block_state (devcache1 T))›</span>\n<span class=\"w\">  </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">auto</span><span class=\"w\"> </span><span class=\"n\">simp</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">change_host_state_def</span><span class=\"w\"> </span><span class=\"n\">update_clock_def</span><span class=\"w\"> </span><span class=\"n\">consumeReq_def</span><span class=\"w\"> </span><span class=\"n\">host_sends_response_def</span><span class=\"w\"> </span><span class=\"n\">Let_def</span><span class=\"o\">)</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Thanks a lot! This cartouche style I have. never seen before :)</p>",
        "id": 397089022,
        "sender_full_name": "Chengsong Tan",
        "timestamp": 1697542518
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"241231\">Chengsong Tan</span> <a href=\"#narrow/stream/202961-General/topic/Vampire.3A.20problem.20is.20unprovable/near/397088941\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"233198\">Mathias Fleury</span> <a href=\"#narrow/stream/202961-General/topic/Vampire.3A.20problem.20is.20unprovable/near/397025208\">said</a>:</p>\n<blockquote>\n<p>BTW in your goal, the fact that you unfold stuff by hand but not SWR that you just defined… you should start with SWR because you have no facts on it</p>\n</blockquote>\n<p>Hi Mathias,<br>\nBy \"you should start with SW[M]R\" do you mean adding these definitions to the [simp] set? Or is it more like writing facts like the snippet you showed?</p>\n</blockquote>\n<p>Currently your code look like:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">definition</span><span class=\"w\"> </span><span class=\"n\">SWR</span><span class=\"w\"> </span><span class=\"kp\">where</span><span class=\"w\"> </span><span class=\"ow\">...</span>\n\n<span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"s\">\"... SWR ...\"</span>\n</code></pre></div>",
        "id": 397112781,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1697550447
    },
    {
        "content": "<p>at this point you know nothing on SWR except for the definition. Hence you have to unfold the definition (you know nothing else!)</p>",
        "id": 397112864,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1697550472
    },
    {
        "content": "<p>Typically, you have:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">definition</span><span class=\"w\"> </span><span class=\"n\">SWR</span><span class=\"w\"> </span><span class=\"kp\">where</span><span class=\"w\"> </span><span class=\"ow\">...</span>\n\n<span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">SWR_simp1</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]:</span><span class=\"w\"> </span><span class=\"s\">\"...\"</span>\n<span class=\"w\">   </span><span class=\"k\">unfolding</span><span class=\"w\"> </span><span class=\"n\">SWR_def</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">auto</span>\n<span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">SWR_simp2</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]:</span><span class=\"w\"> </span><span class=\"s\">\"...\"</span>\n<span class=\"w\">   </span><span class=\"k\">unfolding</span><span class=\"w\"> </span><span class=\"n\">SWR_def</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">auto</span>\n<span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">SWR_simp3</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]:</span><span class=\"w\"> </span><span class=\"s\">\"...\"</span>\n<span class=\"w\">   </span><span class=\"k\">unfolding</span><span class=\"w\"> </span><span class=\"n\">SWR_def</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">auto</span>\n\n<span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"s\">\"... SWR ...\"</span>\n</code></pre></div>\n<p>Here the situation is different: in the last lemma, you actually already know things about SWR</p>",
        "id": 397113251,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1697550581
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"241231\">Chengsong Tan</span> <a href=\"#narrow/stream/202961-General/topic/Vampire.3A.20problem.20is.20unprovable/near/397089022\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"233198\">Mathias Fleury</span> <a href=\"#narrow/stream/202961-General/topic/Vampire.3A.20problem.20is.20unprovable/near/397026469\">said</a>:</p>\n<blockquote>\n<p>And a final remark, this kind of stuff, you have to write by hand:</p>\n<p><div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]:</span><span class=\"w\"> </span><span class=\"s\">‹Owner (CLEntry.block_state (devcache1 (T [a sHost= b]))) =</span>\n<span class=\"s\">     Owner (CLEntry.block_state (devcache1 T))›</span>\n<span class=\"w\">  </span><span class=\"s\">‹Owner (CLEntry.block_state (devcache1 (T ++cl))) =</span>\n<span class=\"s\">     Owner (CLEntry.block_state (devcache1 T))›</span>\n<span class=\"w\">  </span><span class=\"s\">‹Owner (CLEntry.block_state (devcache1 (T [ q -=req] ))) =</span>\n<span class=\"s\">     Owner (CLEntry.block_state (devcache1 T))›</span>\n\n<span class=\"s\">‹Owner (CLEntry.block_state (devcache2 (T [a sHost= b]))) =</span>\n<span class=\"s\">     Owner (CLEntry.block_state (devcache2 T))›</span>\n<span class=\"w\">  </span><span class=\"s\">‹Owner (CLEntry.block_state (devcache2 (T [ q -=req] ))) =</span>\n<span class=\"s\">     Owner (CLEntry.block_state (devcache2 T))›</span>\n<span class=\"w\">  </span><span class=\"s\">‹Owner (CLEntry.block_state (devcache2 (T [ q' +=reqresp t k l] ))) =</span>\n<span class=\"s\">     Owner (CLEntry.block_state (devcache2 T))›</span>\n<span class=\"w\">  </span><span class=\"s\">‹Owner (CLEntry.block_state (devcache2 (T ++cl))) =</span>\n<span class=\"s\">     Owner (CLEntry.block_state (devcache2 T))›</span>\n<span class=\"w\">  </span><span class=\"s\">‹Owner (CLEntry.block_state (devcache1 (T [ q' +=reqresp t k l] ))) =</span>\n<span class=\"s\">     Owner (CLEntry.block_state (devcache1 T))›</span>\n<span class=\"w\">  </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">auto</span><span class=\"w\"> </span><span class=\"n\">simp</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">change_host_state_def</span><span class=\"w\"> </span><span class=\"n\">update_clock_def</span><span class=\"w\"> </span><span class=\"n\">consumeReq_def</span><span class=\"w\"> </span><span class=\"n\">host_sends_response_def</span><span class=\"w\"> </span><span class=\"n\">Let_def</span><span class=\"o\">)</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Thanks a lot! This cartouche style I have. never seen before :)</p>\n</blockquote>\n<p>I like cartouche (I find them less intrusive) and Makarius is actually pushing towards them and there are cases where you have to use them. But: this is currently only a choice.</p>",
        "id": 397113536,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1697550662
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"241231\">Chengsong Tan</span> <a href=\"#narrow/stream/202961-General/topic/Vampire.3A.20problem.20is.20unprovable/near/397088941\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"233198\">Mathias Fleury</span> <a href=\"#narrow/stream/202961-General/topic/Vampire.3A.20problem.20is.20unprovable/near/397025208\">said</a>:</p>\n<blockquote>\n<p>BTW in your goal, the fact that you unfold stuff by hand but not SWR that you just defined… you should start with SWR because you have no facts on it</p>\n</blockquote>\n<p>Hi Mathias,<br>\nBy \"you should start with SW[M]R\" do you mean adding these definitions to the [simp] set? Or is it more like writing facts like the snippet you showed?</p>\n</blockquote>\n<p>My impression is that you want to work with SWR most of the time (and not go deeper). Hence the simp rules will already take care of some simplifications. But I might be wrong… I did not bother reading the formalization :)</p>",
        "id": 397113914,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1697550771
    }
]