[
    {
        "content": "<p>For example, let's say I define a function type as:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">type_synonym</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n n-Type\">'e</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n n-Type\">'s</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">transition</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"'e =&gt; 's =&gt; 's\"</span>\n</code></pre></div>\n<p>and say I wanted to restrict valid transition functions in a lemma:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"kp\">fixes</span><span class=\"w\"> </span><span class=\"n\">t</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"('e, 's) transition\"</span>\n<span class=\"w\">  </span><span class=\"kp\">assumes</span><span class=\"w\"> </span><span class=\"s\">\"dom t ⊆ D\"</span>\n<span class=\"w\">  </span><span class=\"ow\">...</span>\n</code></pre></div>\n<p>A <code>dom</code> function only exists on maps (from theory <code>Map</code>). It's very common to make propositions about the domain of functions, so is there some other way to do that, or is it more common to use <code>Maps</code> in that case?</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code>\n</code></pre></div>",
        "id": 391555695,
        "sender_full_name": "Alex Weisberger",
        "timestamp": 1694976850
    },
    {
        "content": "<p>The function is called <code>range</code> not <code>dom</code> for functions</p>",
        "id": 391556090,
        "sender_full_name": "Jan van Brügge",
        "timestamp": 1694977128
    },
    {
        "content": "<p>If the question is about the domain: Isabelle functions are <em>always</em> total on the input domain. Therefore, it often happens that lemmas have assumptions on the domain of functions (often with invariants).</p>",
        "id": 391556339,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1694977307
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"392255\">Jan van Brügge</span> <a href=\"#narrow/stream/202961-General/topic/Why.20can't.20we.20take.20the.20domain.20of.20an.20arbitrary.20function.3F/near/391556090\">said</a>:</p>\n<blockquote>\n<p>The function is called <code>range</code> not <code>dom</code> for functions</p>\n</blockquote>\n<p>I don't think that's accurate. The <code>range</code> function returns the range, not the domain of a function.</p>",
        "id": 391558493,
        "sender_full_name": "Alex Weisberger",
        "timestamp": 1694977937
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"233198\">Mathias Fleury</span> <a href=\"#narrow/stream/202961-General/topic/Why.20can't.20we.20take.20the.20domain.20of.20an.20arbitrary.20function.3F/near/391556339\">said</a>:</p>\n<blockquote>\n<p>If the question is about the domain: Isabelle functions are <em>always</em> total on the input domain. Therefore, it often happens that lemmas have assumptions on the domain of functions (often with invariants).</p>\n</blockquote>\n<p>That's a good point about totality. That's why a <code>Map</code> might be more appropriate in this case - I want to add a restriction to the function domain.</p>",
        "id": 391558640,
        "sender_full_name": "Alex Weisberger",
        "timestamp": 1694977978
    },
    {
        "content": "<p>Sorry, I somehow read <code>codom</code></p>",
        "id": 391666578,
        "sender_full_name": "Jan van Brügge",
        "timestamp": 1695032366
    }
]