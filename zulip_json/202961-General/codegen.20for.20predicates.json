[
    {
        "content": "<p>Hi community,</p>\n<p>I am trying to use the codegen's extension code_pred to generate equational specifications from an inductive predicate. The hope is that from there I can then extract functional code. <br>\nThe motivation for doing this is to have a reliable reference interpreter for the operational semantics described by the Isabelle code.</p>\n<p>The problem is that for some reason the code_pred command does not succeed, and trying to invoke the predicate equation gives an error. I think probably the error was due to the predicate not being regularly defined in an inductive way. I did a bit of research into the codegen reference manual and it gave an example where a non-inductively defined predicate can be made inductive by making the conditions described by inductive predicates (e.g. describing lexicographic order by the append predicate). Is it the case that the code_pred extension compiler only works when the inductive rules' premises are made of inductive predicates themselves? In general, how can one turn an irregular predicate definition into an inductive one (for example in my example listed below)? I have put a MWE below for the predicate that failed code_pred.</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">theory</span><span class=\"w\"> </span><span class=\"n\">Predicate_to_code</span><span class=\"w\"> </span><span class=\"kp\">imports</span>\n<span class=\"w\">  </span><span class=\"n\">Main</span>\n<span class=\"k\">begin</span>\n\n\n\n\n<span class=\"k\">datatype</span><span class=\"w\"> </span><span class=\"n\">RegNum</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Reg</span><span class=\"w\"> </span><span class=\"n\">nat</span>\n<span class=\"k\">type_synonym</span><span class=\"w\"> </span><span class=\"n\">Val</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">int</span>\n<span class=\"k\">datatype</span><span class=\"w\"> </span><span class=\"n\">MESI_State</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Modified</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Exclusive</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Shared</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Invalid</span>\n<span class=\"k\">datatype</span><span class=\"w\"> </span><span class=\"n\">ClusterID</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Dev</span><span class=\"w\"> </span><span class=\"n\">nat</span>\n<span class=\"k\">datatype</span><span class=\"w\"> </span><span class=\"n\">BlockID</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Block</span><span class=\"w\"> </span><span class=\"n\">nat</span>\n<span class=\"k\">datatype</span><span class=\"w\"> </span><span class=\"n\">UTID</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Utid</span><span class=\"w\"> </span><span class=\"n\">nat</span>\n<span class=\"k\">datatype</span><span class=\"w\"> </span><span class=\"n\">CoreID</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Core</span><span class=\"w\"> </span><span class=\"n\">nat</span>\n\n\n<span class=\"k\">record</span><span class=\"w\"> </span><span class=\"n\">CLEntry</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">  </span><span class=\"n\">content</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"Val option\"</span>\n<span class=\"w\">  </span><span class=\"n\">block_state</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"n\">MESI_State</span>\n\n\n<span class=\"k\">type_synonym</span><span class=\"w\"> </span><span class=\"n\">ClusterMap</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"CoreID ⇒ BlockID ⇀ CLEntry\"</span>\n\n<span class=\"k\">type_synonym</span><span class=\"w\"> </span><span class=\"n\">DevCLMap</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"ClusterID ⇒ ClusterMap\"</span>\n\n\n<span class=\"c\">(*Alternative of using tuples, waiting to be seen which is better*)</span>\n<span class=\"k\">type_synonym</span><span class=\"w\"> </span><span class=\"n\">Cluster_State_Table</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"ClusterID ⇀ MESI_State \"</span>\n<span class=\"k\">text</span><span class=\"w\"> </span><span class=\"s\">‹the name cl_state_mapping seems quite un-friendly for first time readers›</span>\n\n\n\n<span class=\"k\">record</span><span class=\"w\"> </span><span class=\"n\">HostCLMap</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">  </span><span class=\"n\">cl_content_mapping</span><span class=\"w\">  </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"BlockID ⇒ Val\"</span>\n<span class=\"w\">  </span><span class=\"n\">cl_state_mapping</span><span class=\"w\">    </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"BlockID ⇒ Cluster_State_Table\"</span>\n\n\n\n<span class=\"k\">datatype</span><span class=\"w\"> </span><span class=\"n\">Instruction</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">      </span><span class=\"n\">Write</span><span class=\"w\"> </span><span class=\"n\">ClusterID</span><span class=\"w\"> </span><span class=\"n\">CoreID</span><span class=\"w\"> </span><span class=\"n\">BlockID</span><span class=\"w\"> </span><span class=\"n\">Val</span><span class=\"w\"> </span><span class=\"n\">RegNum</span>\n<span class=\"w\">    </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Read</span><span class=\"w\"> </span><span class=\"n\">ClusterID</span><span class=\"w\"> </span><span class=\"n\">CoreID</span><span class=\"w\"> </span><span class=\"n\">BlockID</span><span class=\"w\"> </span><span class=\"n\">RegNum</span>\n<span class=\"w\">    </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Evict</span><span class=\"w\"> </span><span class=\"n\">ClusterID</span><span class=\"w\"> </span><span class=\"n\">CoreID</span><span class=\"w\"> </span><span class=\"n\">BlockID</span>\n<span class=\"c\">(*a sequence of events one cluster issues, a sequence of events another cluster issues</span>\n<span class=\"c\">read event v.s. load</span>\n<span class=\"c\">cluster  issue messages *)</span>\n<span class=\"k\">type_synonym</span><span class=\"w\"> </span><span class=\"n\">Program</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"ClusterID ⇒ (CoreID ⇒ Instruction list)\"</span>\n\n<span class=\"k\">definition</span><span class=\"w\"> </span><span class=\"n\">empty_program</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"n\">Program</span><span class=\"w\"> </span><span class=\"kp\">where</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]:</span>\n<span class=\"s\">\"empty_program ≡ λclid. λcoreid. []\"</span>\n\n<span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">add_i</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"Program ⇒ Instruction ⇒ ClusterID ⇒ CoreID ⇒ Program\"</span>\n<span class=\"w\">  </span><span class=\"kp\">where</span><span class=\"w\"> </span><span class=\"s\">\"add_i P i clid core = P (clid := ( (P clid  ) (  core := (P clid core) @ [i])))\"</span>\n\n<span class=\"k\">definition</span><span class=\"w\"> </span><span class=\"n\">write1</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"n\">Instruction</span><span class=\"w\"> </span><span class=\"kp\">where</span><span class=\"w\"> </span><span class=\"s\">\"write1 = (Write (Dev 1) (Core 1) (Block 1) 2 (Reg 1))\"</span>\n<span class=\"k\">definition</span><span class=\"w\"> </span><span class=\"n\">write2</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"n\">Instruction</span><span class=\"w\"> </span><span class=\"kp\">where</span><span class=\"w\"> </span><span class=\"s\">\"write2 = (Write (Dev 2) (Core 2) (Block 1) 3 (Reg 1))\"</span>\n\n\n<span class=\"k\">definition</span><span class=\"w\"> </span><span class=\"n\">two_devices_writing_at_same_location</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"n\">Program</span><span class=\"w\"> </span><span class=\"kp\">where</span>\n<span class=\"s\">\"two_devices_writing_at_same_location = add_i (add_i empty_program write1 (Dev 1) (Core 1)) write2 (Dev 2) (Core 2)\"</span>\n\n<span class=\"k\">datatype</span><span class=\"w\"> </span><span class=\"n\">DTHReqType</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">RdShared</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">RdOwn</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">RdOwnNoData</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">RdAny</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">RdCurr</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">CleanEvict</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">DirtyEvict</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">CleanEvictNoData</span><span class=\"w\"> </span><span class=\"o\">|</span>\n<span class=\"w\">  </span><span class=\"n\">ItoMWrite</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">WrCur</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">CLFlush</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">CacheFlushed</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">WOWrInv</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">WOWrInvF</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">WrInv</span>\n\n\n\n<span class=\"k\">record</span><span class=\"w\"> </span><span class=\"n\">DTHReq</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">  </span><span class=\"n\">utid</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"n\">UTID</span>\n<span class=\"w\">  </span><span class=\"n\">bid</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"n\">BlockID</span>\n<span class=\"w\">  </span><span class=\"n\">dthreqtype</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"n\">DTHReqType</span>\n<span class=\"w\">  </span><span class=\"n\">clid</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"n\">ClusterID</span>\n\n\n<span class=\"k\">type_synonym</span><span class=\"w\"> </span><span class=\"n\">DTHReqs</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"ClusterID ⇒ DTHReq list\"</span>\n\n\n<span class=\"k\">datatype</span><span class=\"w\"> </span><span class=\"n\">DTHRespType</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">RspIHitI</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">RspIHitSE</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">RspSHitSE</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">RspVHitV</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">RspIFwdM</span><span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">RspVFwdV</span><span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">RspSFwdM</span>\n\n<span class=\"k\">record</span><span class=\"w\"> </span><span class=\"n\">DTHResp</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">  </span><span class=\"n\">utid</span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"n\">UTID</span>\n<span class=\"w\">  </span><span class=\"n\">bid</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"n\">BlockID</span>\n<span class=\"w\">  </span><span class=\"n\">dthresptype</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"n\">DTHRespType</span>\n<span class=\"w\">  </span><span class=\"n\">clid</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"n\">ClusterID</span>\n\n\n\n<span class=\"k\">record</span><span class=\"w\"> </span><span class=\"n\">DTHData</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">  </span><span class=\"n\">utid</span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"n\">UTID</span>\n<span class=\"w\">  </span><span class=\"n\">bid</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"n\">BlockID</span>\n<span class=\"w\">  </span><span class=\"n\">content</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"n\">Val</span>\n<span class=\"w\">  </span><span class=\"n\">clid</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"n\">ClusterID</span>\n<span class=\"w\">  </span><span class=\"n\">bogus</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"n\">bool</span>\n\n\n\n\n\n<span class=\"k\">type_synonym</span><span class=\"w\"> </span><span class=\"n\">DTHResps</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"ClusterID ⇒ DTHResp list\"</span>\n\n\n\n<span class=\"k\">type_synonym</span><span class=\"w\"> </span><span class=\"n\">DTHDatas</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"ClusterID ⇒ DTHData list\"</span>\n\n\n<span class=\"k\">definition</span><span class=\"w\"> </span><span class=\"n\">empty_dthreqs</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"n\">DTHReqs</span><span class=\"w\"> </span><span class=\"kp\">where</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]:</span>\n<span class=\"s\">\"empty_dthreqs ≡ λclid. []\"</span>\n\n\n<span class=\"k\">definition</span><span class=\"w\"> </span><span class=\"n\">empty_dthdatas</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"n\">DTHDatas</span><span class=\"w\"> </span><span class=\"kp\">where</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]:</span>\n<span class=\"s\">\"empty_dthdatas ≡ λclid. []\"</span>\n<span class=\"k\">definition</span><span class=\"w\"> </span><span class=\"n\">empty_dthresps</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"n\">DTHResps</span><span class=\"w\"> </span><span class=\"kp\">where</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]:</span>\n<span class=\"s\">\"empty_dthresps ≡ λclid. []\"</span>\n\n\n\n<span class=\"k\">datatype</span><span class=\"w\"> </span><span class=\"n\">HTDReqType</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">SnpData</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">SnpInv</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">SnpCur</span>\n\n<span class=\"k\">record</span><span class=\"w\"> </span><span class=\"n\">HTDReq</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">  </span><span class=\"n\">utid</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"n\">UTID</span>\n<span class=\"w\">  </span><span class=\"n\">bid</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"n\">BlockID</span>\n<span class=\"w\">  </span><span class=\"n\">htdreqtype</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"n\">HTDReqType</span>\n<span class=\"w\">  </span><span class=\"n\">clid</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"n\">ClusterID</span>\n\n<span class=\"k\">datatype</span><span class=\"w\"> </span><span class=\"n\">HTDRespType</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">GO</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">GO_WritePull</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">GO_WritePullDrop</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">WritePull</span><span class=\"w\"> </span><span class=\"o\">|</span>\n<span class=\"w\">    </span><span class=\"n\">GO_Err</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">FastGO_WritePull</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">GO_Err_WritePull</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">ExtCmp</span>\n\n\n<span class=\"k\">record</span><span class=\"w\"> </span><span class=\"n\">HTDResp</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">  </span><span class=\"n\">utid</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"n\">UTID</span>\n<span class=\"w\">  </span><span class=\"n\">bid</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"n\">BlockID</span>\n<span class=\"w\">  </span><span class=\"n\">htdresptype</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"n\">HTDRespType</span>\n<span class=\"w\">  </span><span class=\"n\">clid</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"n\">ClusterID</span>\n<span class=\"w\">  </span><span class=\"n\">state_granted</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"n\">MESI_State</span>\n\n<span class=\"k\">record</span><span class=\"w\"> </span><span class=\"n\">HTDData</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">  </span><span class=\"n\">utid</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"n\">UTID</span>\n<span class=\"w\">  </span><span class=\"n\">bid</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"n\">BlockID</span>\n<span class=\"w\">  </span><span class=\"n\">content</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"n\">Val</span>\n<span class=\"w\">  </span><span class=\"n\">clid</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"n\">ClusterID</span>\n\n\n\n<span class=\"k\">type_synonym</span><span class=\"w\"> </span><span class=\"n\">HTDReqs</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"ClusterID ⇒ HTDReq list\"</span>\n\n\n\n<span class=\"k\">type_synonym</span><span class=\"w\"> </span><span class=\"n\">HTDResps</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"ClusterID ⇒ HTDResp list\"</span>\n\n<span class=\"k\">type_synonym</span><span class=\"w\"> </span><span class=\"n\">HTDDatas</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"ClusterID ⇒ HTDData list\"</span>\n\n<span class=\"k\">record</span><span class=\"w\"> </span><span class=\"n\">DevTracker</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">  </span><span class=\"n\">clusterid</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"n\">ClusterID</span>\n<span class=\"w\">  </span><span class=\"n\">coreid</span><span class=\"w\">  </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"n\">CoreID</span>\n<span class=\"w\">  </span><span class=\"n\">bid</span><span class=\"w\">     </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"n\">BlockID</span>\n<span class=\"w\">  </span><span class=\"n\">st</span><span class=\"w\">      </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"n\">MESI_State</span>\n<span class=\"w\">  </span><span class=\"n\">dNeeded</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"n\">bool</span>\n<span class=\"w\">  </span><span class=\"n\">dataCompleted</span><span class=\"w\">  </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"n\">bool</span>\n<span class=\"w\">  </span><span class=\"n\">rRecvd</span><span class=\"w\">  </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"n\">bool</span>\n<span class=\"w\">  </span><span class=\"n\">dthreqtype</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"n\">DTHReqType</span>\n\n<span class=\"k\">text</span><span class=\"w\"> </span><span class=\"s\">‹Our model only deals with transactions initiated by a DTHRequest.›</span>\n\n<span class=\"k\">type_synonym</span><span class=\"w\"> </span><span class=\"n\">DevTrackers</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"UTID ⇀ DevTracker\"</span>\n\n\n\n<span class=\"k\">record</span><span class=\"w\"> </span><span class=\"n\">HostTracker</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">  </span><span class=\"n\">clusterid</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"n\">ClusterID</span>\n<span class=\"w\">  </span><span class=\"n\">coreid</span><span class=\"w\">  </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"n\">CoreID</span>\n<span class=\"w\">  </span><span class=\"n\">bid</span><span class=\"w\">     </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"n\">BlockID</span>\n<span class=\"w\">  </span><span class=\"n\">st</span><span class=\"w\">      </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"n\">MESI_State</span>\n<span class=\"w\">  </span><span class=\"n\">dNeeded</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"n\">bool</span>\n<span class=\"w\">  </span><span class=\"n\">dSent</span><span class=\"w\">  </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"n\">bool</span>\n<span class=\"w\">  </span><span class=\"n\">rSent</span><span class=\"w\">  </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"n\">bool</span>\n<span class=\"w\">  </span><span class=\"n\">dthreqtype</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"n\">DTHReqType</span>\n\n<span class=\"k\">text</span><span class=\"w\"> </span><span class=\"s\">‹Our model only deals with transactions initiated by a DTHRequest. Likewise trackers only</span>\n<span class=\"s\">records DTH request types.›</span>\n\n<span class=\"k\">type_synonym</span><span class=\"w\"> </span><span class=\"n\">HostTrackers</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"UTID ⇀ HostTracker\"</span>\n\n\n\n<span class=\"k\">record</span><span class=\"w\"> </span><span class=\"n\">Type1State</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">  </span><span class=\"n\">hostclmap</span><span class=\"w\">      </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"n\">HostCLMap</span>\n<span class=\"w\">  </span><span class=\"n\">devclmap</span><span class=\"w\">    </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"n\">DevCLMap</span>\n<span class=\"w\">  </span><span class=\"n\">dthreqs</span><span class=\"w\">           </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"n\">DTHReqs</span>\n<span class=\"w\">  </span><span class=\"n\">dthresps</span><span class=\"w\">          </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"n\">DTHResps</span>\n<span class=\"w\">  </span><span class=\"n\">dthdatas</span><span class=\"w\">          </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"n\">DTHDatas</span>\n<span class=\"w\">  </span><span class=\"n\">htdreqs</span><span class=\"w\">           </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"n\">HTDReqs</span>\n<span class=\"w\">  </span><span class=\"n\">htdresps</span><span class=\"w\">          </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"n\">HTDResps</span>\n<span class=\"w\">  </span><span class=\"n\">htddatas</span><span class=\"w\">          </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"n\">HTDDatas</span>\n<span class=\"w\">  </span><span class=\"n\">hosttrackers</span><span class=\"w\">         </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"n\">HostTrackers</span>\n<span class=\"w\">  </span><span class=\"n\">devtrackers</span><span class=\"w\">         </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"n\">DevTrackers</span>\n\n\n\n\n\n\n<span class=\"k\">text</span><span class=\"w\"> </span><span class=\"s\">‹ for CXL ›</span>\n<span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">differ_one_instruction</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"Program ⇒ Program ⇒</span>\n<span class=\"s\">  ClusterID ⇒ CoreID ⇒ Instruction ⇒ bool\"</span>\n<span class=\"w\">  </span><span class=\"kp\">where</span><span class=\"w\"> </span><span class=\"s\">\"differ_one_instruction P P' dev_i core_j i =</span>\n<span class=\"s\">    (P = P'(dev_i := (P' dev_i) (core_j := (i # P' dev_i core_j ))))\"</span>\n\n<span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">host_mapping_state</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"Type1State ⇒ ClusterID ⇒</span>\n<span class=\"s\">  BlockID ⇒ MESI_State ⇒ bool\"</span>\n<span class=\"w\">  </span><span class=\"kp\">where</span><span class=\"w\"> </span><span class=\"s\">\"host_mapping_state Σ dev_i X mesi_state =</span>\n<span class=\"s\">    ((cl_state_mapping (hostclmap Σ) ) X dev_i = Some mesi_state)\"</span>\n\n\n<span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">dequeued_dthreq</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"Type1State ⇒ Type1State ⇒ ClusterID ⇒ DTHReq ⇒ bool\"</span>\n<span class=\"w\">  </span><span class=\"kp\">where</span><span class=\"w\"> </span><span class=\"s\">\"dequeued_dthreq Σ Σ' dev_i msg =</span>\n<span class=\"s\">    (Σ' = Σ ⦇dthreqs := ((dthreqs Σ) (dev_i := (dthreqs Σ) dev_i  @ [msg] )) ⦈ ) \"</span>\n\n\n\n<span class=\"c\">(*Still psuedo-code, should express Σ and Σ' only differ in those</span>\n<span class=\"c\">places, rather than \"they are different in these places, can be arbitrary</span>\n<span class=\"c\">in other places we didn't mention. Need to use Σ[ i := X] type of syntax\"*)</span>\n<span class=\"k\">inductive</span><span class=\"w\"> </span><span class=\"n\">external_trans</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"(Type1State * Program * nat * Instruction option * UTID) ⇒ (Type1State * Program * nat * Instruction option * UTID) ⇒ bool\"</span>\n<span class=\"o\">(</span><span class=\"kp\">infixr</span><span class=\"w\"> </span><span class=\"s\">\"↝ext\"</span><span class=\"w\"> </span><span class=\"n\">30</span><span class=\"o\">)</span>\n<span class=\"kp\">where</span>\n<span class=\"n\">RdOwn_start</span><span class=\"o\">:</span>\n<span class=\"s\">\" ⟦</span>\n<span class=\"s\">    differ_one_instruction P P' dev_i core_j (Write dev_i core_j block_X v reg) ;</span>\n\n<span class=\"s\">    host_mapping_state Σ dev_i block_X Invalid;</span>\n\n<span class=\"s\">    utid2 = Utid UCounter;</span>\n<span class=\"s\">    dequeued_dthreq Σ Σ' dev_i ⦇DTHReq.utid = utid2, bid = block_X, dthreqtype = RdOwn, clid = dev_i ⦈;</span>\n\n<span class=\"s\">    (devclmap Σ) dev_i core_j block_X = Some ⦇CLEntry.content = Some v, block_state = Invalid ⦈;</span>\n<span class=\"s\">    (devclmap Σ) = (devclmap Σ');</span>\n\n<span class=\"s\">    devtrackers Σ  utid2 = None;</span>\n<span class=\"s\">    devtrackers Σ' utid2 = Some ⦇DevTracker.clusterid = dev_i, coreid = core_j, DevTracker.bid  = block_X, st = Invalid,</span>\n<span class=\"s\">    dNeeded = True, dataCompleted = False, rRecvd = False, dthreqtype = RdOwn ⦈</span>\n\n\n<span class=\"s\">⟧</span>\n<span class=\"s\">⟹</span>\n<span class=\"s\">(Σ, P, UCounter, None, _) ↝ext (Σ', P', UCounter + 1, Some (Write dev_i core_j block_X v reg), utid2 )\"</span>\n<span class=\"o\">|</span>\n<span class=\"n\">RdOwn_finish</span><span class=\"o\">:</span>\n<span class=\"s\">\" ⟦</span>\n\n<span class=\"s\">    host_mapping_state Σ dev_i block_X Exclusive;</span>\n<span class=\"s\">    (cl_content_mapping (hostclmap Σ)) block_X = v';</span>\n\n<span class=\"s\">    (devclmap Σ) dev_i core_j block_X = Some ⦇CLEntry.content = Some v', block_state = Exclusive ⦈;</span>\n<span class=\"s\">    (devclmap Σ') dev_i core_j block_X = Some ⦇CLEntry.content = Some v'', block_state = Modified ⦈;</span>\n\n<span class=\"s\">    (hosttrackers Σ) utid2 = None;</span>\n\n<span class=\"s\">    (devtrackers Σ) utid2 = None</span>\n\n<span class=\"s\">⟧</span>\n<span class=\"s\">⟹</span>\n<span class=\"s\">(Σ, P, UCounter,  Some (Write dev_i core_j block_X v'' reg), utid2) ↝ext (Σ', P', UCounter, None, _ )\"</span>\n\n\n<span class=\"kn\">code_pred</span><span class=\"w\"> </span><span class=\"n\">external_trans</span><span class=\"w\"> </span><span class=\"ow\">.</span>\n\n<span class=\"kt\">thm</span><span class=\"w\"> </span><span class=\"n\">external_trans.equation</span>\n<span class=\"k\">export_code</span><span class=\"w\"> </span><span class=\"n\">external_trans_i_o</span><span class=\"w\"> </span><span class=\"kp\">in</span><span class=\"w\"> </span><span class=\"n\">Scala</span>\n</code></pre></div>\n<p>The last two lines just throw errors.</p>\n<p>I am trying to generate code for external_trans, which is used to capture the operational semantics for some low-level memory protocols. The rules involve updates to lists, records and functions. Are the updates of records and function mappings inherently non-inductive, making the whole rule external_trans impossible to be turned inductive?</p>\n<p>I am looking forward to your input. </p>\n<p>Thanks a lot,<br>\nChengsong</p>",
        "id": 358166616,
        "sender_full_name": "Chengsong Tan",
        "timestamp": 1684011931
    },
    {
        "content": "<p>I only get an error in the last line (wellsortedness error). It is due to the function <code>differ_one_instruction</code> that compares two programs P and P' using function equality, which is of course not executable in general. To make it executable, the code generator requires the input types to be enumerable. You probably want to make <code>differ_one_instruction</code> executable by explicitly stating and proving a code equation for <code>differ_one_instruction</code> first.</p>",
        "id": 358404204,
        "sender_full_name": "Maximilian Schaeffeler",
        "timestamp": 1684143033
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"433149\">Maximilian Schaeffeler</span> <a href=\"#narrow/stream/202961-General/topic/codegen.20for.20predicates/near/358404204\">said</a>:</p>\n<blockquote>\n<p>I only get an error in the last line (wellsortedness error). It is due to the function <code>differ_one_instruction</code> that compares two programs P and P' using function equality, which is of course not executable in general. To make it executable, the code generator requires the input types to be enumerable. You probably want to make <code>differ_one_instruction</code> executable by explicitly stating and proving a code equation for <code>differ_one_instruction</code> first.</p>\n</blockquote>\n<p>Thank you for responding! This is very helpful that I am now able to locate which bits are not executable. I understand that comparing equalities of two arbitrary functions can't be turned into executable code in general (because it is basically halting problem?), but for this function <code>differ_one_instruction</code> the comparison is basically saying two functions are just key-value pairs which only differ in one entry. Could you tell me what type of code equation is needed for this?</p>",
        "id": 358554676,
        "sender_full_name": "Chengsong Tan",
        "timestamp": 1684179038
    },
    {
        "content": "<p>More generally, do all the premises have to be expressed via recursive predicates so that an inductive rule can be turned into executable code?</p>",
        "id": 358563112,
        "sender_full_name": "Chengsong Tan",
        "timestamp": 1684181828
    },
    {
        "content": "<p>The code equation should implement the comparison in terms of executable functions:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">differ_one_instruction</span><span class=\"o\">[</span><span class=\"n\">code</span><span class=\"o\">]:</span><span class=\"w\"> </span><span class=\"s\">\"differ_one_instruction P P' dev_i core_j i = [executable version of the definition]\"</span>\n<span class=\"w\">  </span><span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>However, for your example, I don't think it's possible to implement that check, can you tell me how you would do it in another programming language?</p>",
        "id": 358662850,
        "sender_full_name": "Maximilian Schaeffeler",
        "timestamp": 1684227575
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"433149\">Maximilian Schaeffeler</span> <a href=\"#narrow/stream/202961-General/topic/codegen.20for.20predicates/near/358662850\">said</a>:</p>\n<blockquote>\n<p>The code equation should implement the comparison in terms of executable functions:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">differ_one_instruction</span><span class=\"o\">[</span><span class=\"n\">code</span><span class=\"o\">]:</span><span class=\"w\"> </span><span class=\"s\">\"differ_one_instruction P P' dev_i core_j i = [executable version of the definition]\"</span>\n<span class=\"w\">  </span><span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>However, for your example, I don't think it's possible to implement that check, can you tell me how you would do it in another programming language?</p>\n</blockquote>\n<p>I got your point. The comparison requires two programs to be equal at <em>every other device and core</em>, which is impossible to compute if the domain (devices and cores) is not finite. I guess for that I need to restrict the constructors of ClusterID and CoreID to take a natural number  from only a finite set (rather than all possible nats).<br>\nThank you!</p>",
        "id": 359479116,
        "sender_full_name": "Chengsong Tan",
        "timestamp": 1684437716
    },
    {
        "content": "<p>Hi all,</p>\n<p>Can you ask code_pred to generate equational specifications with different modes (that might not be one of those inferred automatically)?<br>\nThe tutorial on codegen seems to suggest yes at section 4.1 (alternative names for functions) on the bottom of page 21, where you can specify the modes you want with new names for these functions like <code>modes: i =&gt; o =&gt; i as suffix) append1 .</code>. But after trying out this, I got this error message from Isabelle \"not a constant: suffix\" when trying to generate code for that. It seems the request to generate a custom output function has been ignored. Is there any recent changes to code_pred that I need to be aware?</p>\n<p>A MWE:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">inductive</span><span class=\"w\"> </span><span class=\"n\">append1</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"'a list ⇒ 'a list ⇒ 'a list ⇒ bool\"</span>\n<span class=\"w\">  </span><span class=\"kp\">where</span>\n<span class=\"w\">    </span><span class=\"s\">\"append1 [] ys ys\"</span>\n<span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"s\">\"append1 xs ys zs ⟹ append1 (x # xs) ys (x # zs)\"</span>\n\n<span class=\"kn\">code_pred</span><span class=\"w\"> </span><span class=\"n\">append1</span><span class=\"w\"> </span><span class=\"ow\">.</span>\n\n<span class=\"kt\">thm</span><span class=\"w\"> </span><span class=\"n\">append1.equation</span>\n\n<span class=\"k\">export_code</span><span class=\"w\"> </span><span class=\"n\">append1_i_i_i</span><span class=\"w\"> </span><span class=\"kp\">in</span><span class=\"w\"> </span><span class=\"n\">Scala</span>\n\n\n<span class=\"kt\">values</span><span class=\"w\"> </span><span class=\"s\">\"{zs. append1 [(1::nat), 2, 3] [4, 5] zs}\"</span>\n\n\n<span class=\"kn\">code_pred</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">modes</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"n\">⇒</span><span class=\"w\"> </span><span class=\"n\">o</span><span class=\"w\"> </span><span class=\"n\">⇒</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"n\">⇒</span><span class=\"w\"> </span><span class=\"n\">bool</span><span class=\"w\"> </span><span class=\"n\">as</span><span class=\"w\"> </span><span class=\"n\">suffix</span><span class=\"o\">,</span>\n<span class=\"w\">                  </span><span class=\"n\">o</span><span class=\"w\"> </span><span class=\"n\">⇒</span><span class=\"w\"> </span><span class=\"n\">o</span><span class=\"w\"> </span><span class=\"n\">⇒</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"n\">⇒</span><span class=\"w\"> </span><span class=\"n\">bool</span><span class=\"w\"> </span><span class=\"n\">as</span><span class=\"w\"> </span><span class=\"n\">split</span><span class=\"o\">,</span>\n<span class=\"w\">                  </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"n\">⇒</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"n\">⇒</span><span class=\"w\"> </span><span class=\"n\">o</span><span class=\"w\"> </span><span class=\"n\">⇒</span><span class=\"w\"> </span><span class=\"n\">bool</span><span class=\"w\"> </span><span class=\"n\">as</span><span class=\"w\"> </span><span class=\"n\">concat</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">append1</span><span class=\"w\"> </span><span class=\"ow\">.</span>\n\n\n<span class=\"kt\">thm</span><span class=\"w\"> </span><span class=\"n\">append1.equation</span>\n\n<span class=\"k\">export_code</span><span class=\"w\"> </span><span class=\"n\">suffix</span><span class=\"w\"> </span><span class=\"kp\">in</span><span class=\"w\"> </span><span class=\"n\">Scala</span>\n</code></pre></div>",
        "id": 362586674,
        "sender_full_name": "Chengsong Tan",
        "timestamp": 1685572216
    },
    {
        "content": "<p>You mean <code>export_code append1 in Scala</code> right?</p>",
        "id": 362627090,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1685595817
    },
    {
        "content": "<p>(there is no <code>suffix</code> in the code you are showing)</p>",
        "id": 362627120,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1685595831
    },
    {
        "content": "<p>Okay I checked the doc and in my understanding it should work.</p>",
        "id": 362627831,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1685596200
    },
    {
        "content": "<p>can you report it to the mailing list?</p>",
        "id": 362627910,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1685596221
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"233198\">Mathias Fleury</span> <a href=\"#narrow/stream/202961-General/topic/codegen.20for.20predicates/near/362627910\">said</a>:</p>\n<blockquote>\n<p>can you report it to the mailing list?</p>\n</blockquote>\n<p>Yes, just did that!</p>",
        "id": 362666496,
        "sender_full_name": "Chengsong Tan",
        "timestamp": 1685607661
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"233198\">Mathias Fleury</span> <a href=\"#narrow/stream/202961-General/topic/codegen.20for.20predicates/near/362627831\">said</a>:</p>\n<blockquote>\n<p>Okay I checked the doc and in my understanding it should work.</p>\n</blockquote>\n<p>Thank you for checking this out!</p>",
        "id": 362666966,
        "sender_full_name": "Chengsong Tan",
        "timestamp": 1685607778
    },
    {
        "content": "<p>Hi,</p>\n<p>It seems that code_pred does not support records very well (because they are not inductive datatypes)?<br>\nSuppose we have a record type <code>MiniMulticore</code>: </p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">datatype</span><span class=\"w\"> </span><span class=\"n\">Instruction</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">      </span><span class=\"n\">Write</span><span class=\"w\"> </span><span class=\"n\">int</span>\n<span class=\"w\">    </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Read</span>\n\n<span class=\"k\">record</span><span class=\"w\"> </span><span class=\"n\">MiniMulticore</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">  </span><span class=\"n\">program1</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"Instruction list\"</span>\n<span class=\"w\">  </span><span class=\"n\">program2</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"Instruction list\"</span>\n<span class=\"w\">  </span><span class=\"n\">mem</span><span class=\"w\">      </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"n\">int</span>\n<span class=\"w\">  </span><span class=\"n\">reg</span><span class=\"w\">      </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"n\">int</span>\n</code></pre></div>\n<p>If I define a predicate about them with a rule like below, </p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">inductive</span><span class=\"w\"> </span><span class=\"n\">nondet_execution</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"MiniMulticore ⇒ MiniMulticore ⇒ bool\"</span>\n<span class=\"w\"> </span><span class=\"o\">(</span><span class=\"kp\">infixr</span><span class=\"w\"> </span><span class=\"s\">\"↝n\"</span><span class=\"w\"> </span><span class=\"n\">30</span><span class=\"o\">)</span><span class=\"w\">  </span><span class=\"kp\">where</span>\n<span class=\"w\"> </span><span class=\"n\">core2_write</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"⦇program1 = P1, program2 = Write v # P2, mem = v', reg = w ⦈ ↝n ⦇program1 = P1, program2 = P2, mem = v, reg = w ⦈\"</span>\n</code></pre></div>\n<p>, the code_pred command does not generate any code equations: invoking the <code>code_pred nonet_execution</code> command<br>\ngive the following error message:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"n\">Error</span><span class=\"w\"> </span><span class=\"kp\">in</span><span class=\"w\"> </span><span class=\"k\">case</span><span class=\"w\"> </span><span class=\"n\">expression</span><span class=\"o\">:</span>\n<span class=\"n\">Not</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"k\">datatype</span><span class=\"w\"> </span><span class=\"n\">constructor</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"Predicate_practice.MiniMulticore.MiniMulticore_ext\"</span>\n<span class=\"n\">In</span><span class=\"w\"> </span><span class=\"n\">clause</span>\n<span class=\"o\">(</span><span class=\"n\">⦇program1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">P1_</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">program2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Write</span><span class=\"w\"> </span><span class=\"n\">v_</span><span class=\"w\"> </span><span class=\"n\">#</span><span class=\"w\"> </span><span class=\"n\">P2_</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">mem</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">v'_</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">reg</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">w_⦈</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">⦇program1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">P1a_</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">program2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">P2a_</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">mem</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">va_</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">reg</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">wa_⦈</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">⇒</span>\n<span class=\"w\">  </span><span class=\"kp\">if</span><span class=\"w\"> </span><span class=\"n\">w_</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">wa_</span><span class=\"w\"> </span><span class=\"n\">∧</span><span class=\"w\"> </span><span class=\"n\">P2_</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">P2a_</span><span class=\"w\"> </span><span class=\"n\">∧</span><span class=\"w\"> </span><span class=\"n\">v_</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">va_</span><span class=\"w\"> </span><span class=\"n\">∧</span><span class=\"w\"> </span><span class=\"n\">P1_</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">P1a_</span><span class=\"w\"> </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"n\">Predicate.single</span><span class=\"w\"> </span><span class=\"o\">()</span><span class=\"w\"> </span><span class=\"n\">else</span><span class=\"w\"> </span><span class=\"n\">bot</span>\n</code></pre></div>\n<p>It seems that record is not supported at all for <code>code_pred</code>. Is it  because record is not an inductive datatype and therefore can't be handled?<br>\nA MWE:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">datatype</span><span class=\"w\"> </span><span class=\"n\">Instruction</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">      </span><span class=\"n\">Write</span><span class=\"w\"> </span><span class=\"n\">int</span>\n<span class=\"w\">    </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Read</span>\n\n<span class=\" -Symbol\">\\&lt;comment&gt;</span><span class=\"w\"> </span><span class=\"ss\">\\&lt;open&gt;</span><span class=\"s\"> a mini multi-core computer</span>\n<span class=\"s\">with non-determinism about which core is able to execute</span>\n<span class=\"ss\">\\&lt;close&gt;</span>\n\n<span class=\"k\">record</span><span class=\"w\"> </span><span class=\"n\">MiniMulticore</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">  </span><span class=\"n\">program1</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"Instruction list\"</span>\n<span class=\"w\">  </span><span class=\"n\">program2</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"Instruction list\"</span>\n<span class=\"w\">  </span><span class=\"n\">mem</span><span class=\"w\">      </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"n\">int</span>\n<span class=\"w\">  </span><span class=\"n\">reg</span><span class=\"w\">      </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"n\">int</span>\n\n<span class=\"k\">definition</span><span class=\"w\"> </span><span class=\"n\">read_and_write</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"n\">MiniMulticore</span>\n<span class=\"w\">  </span><span class=\"kp\">where</span><span class=\"w\"> </span><span class=\"s\">\"read_and_write = ⦇program1 = [Write 1],</span>\n<span class=\"s\">                           program2 = [Read],</span>\n<span class=\"s\">                           mem = 0,</span>\n<span class=\"s\">                           reg = 42 ⦈\"</span>\n\n<span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">differ_instruction1</span><span class=\"w\"> </span><span class=\"o\">::</span>\n<span class=\"w\">  </span><span class=\"s\">\"MiniMulticore ⇒ Instruction  ⇒ MiniMulticore\"</span>\n<span class=\"w\">  </span><span class=\"o\">(</span><span class=\"s\">\" _  [+=i1 _] \"</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">100</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">0</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"n\">101</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"kp\">where</span><span class=\"w\"> </span><span class=\"s\">\"(C [+=i1 I] ) = C ⦇ MiniMulticore.program1 := (I # (program1 C))  ⦈\"</span>\n\n<span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">differ_instruction2</span><span class=\"w\"> </span><span class=\"o\">::</span>\n<span class=\"w\">  </span><span class=\"s\">\"MiniMulticore ⇒ Instruction  ⇒ MiniMulticore\"</span>\n<span class=\"w\">  </span><span class=\"o\">(</span><span class=\"s\">\" _  [+=i2 _] \"</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">100</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">0</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"n\">101</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"kp\">where</span><span class=\"w\"> </span><span class=\"s\">\"(C [+=i2 I] ) = C ⦇ MiniMulticore.program2 := (I # (program2 C))  ⦈\"</span>\n\n<span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">differ_mem</span><span class=\"w\"> </span><span class=\"o\">::</span>\n<span class=\"w\">    </span><span class=\"s\">\"MiniMulticore ⇒ int  ⇒ MiniMulticore\"</span>\n<span class=\"w\">  </span><span class=\"o\">(</span><span class=\"s\">\" _  [ _ ]m \"</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">100</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">0</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"n\">101</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"kp\">where</span><span class=\"w\"> </span><span class=\"s\">\"(C [v]m ) = C ⦇ MiniMulticore.mem := v  ⦈\"</span>\n\n<span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">differ_reg</span><span class=\"w\"> </span><span class=\"o\">::</span>\n<span class=\"w\">    </span><span class=\"s\">\"MiniMulticore ⇒ int  ⇒ MiniMulticore\"</span>\n<span class=\"w\">  </span><span class=\"o\">(</span><span class=\"s\">\" _  [ _ ]r \"</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">100</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">0</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"n\">101</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"kp\">where</span><span class=\"w\"> </span><span class=\"s\">\"(C [v]r ) = C ⦇ MiniMulticore.reg := v  ⦈\"</span>\n\n<span class=\"k\">inductive</span><span class=\"w\"> </span><span class=\"n\">nondet_execution</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"MiniMulticore ⇒ MiniMulticore ⇒ bool\"</span>\n<span class=\"w\"> </span><span class=\"o\">(</span><span class=\"kp\">infixr</span><span class=\"w\"> </span><span class=\"s\">\"↝n\"</span><span class=\"w\"> </span><span class=\"n\">30</span><span class=\"o\">)</span><span class=\"w\">  </span><span class=\"kp\">where</span>\n<span class=\"w\"> </span><span class=\"n\">core2_write</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"⦇program1 = P1, program2 = Write v # P2, mem = v', reg = w ⦈ ↝n ⦇program1 = P1, program2 = P2, mem = v, reg = w ⦈\"</span>\n<span class=\"o\">|</span><span class=\"n\">core1_write</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"C ⦇ program1 := (Write v # program1 C) ⦈ ↝n C ⦇ mem := v⦈\"</span>\n<span class=\"c\">(*</span>\n<span class=\"c\">| core1_write : \"C[+=i1 Write v] ↝n C[v]m\"</span>\n<span class=\"c\">| core1_read : \"⟦C = C'[+=i1 Read ][v]r; reg C = v  ⟧ ⟹ C ↝n C'\"</span>\n<span class=\"c\">| core2_read : \"⟦C = C'[+=i2 Read ][v]r; reg C = v  ⟧ ⟹ C ↝n C'\"</span>\n\n<span class=\"c\">*)</span>\n\n<span class=\"kn\">code_pred</span><span class=\"w\"> </span><span class=\"n\">nondet_execution</span><span class=\"w\"> </span><span class=\"ow\">.</span>\n<span class=\"kt\">thm</span><span class=\"w\"> </span><span class=\"n\">nondet_execution.equation</span>\n</code></pre></div>",
        "id": 362894687,
        "sender_full_name": "Chengsong Tan",
        "timestamp": 1685658756
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"233198\">Mathias Fleury</span> <a href=\"#narrow/stream/202961-General/topic/codegen.20for.20predicates/near/362627910\">said</a>:</p>\n<blockquote>\n<p>can you report it to the mailing list?</p>\n</blockquote>\n<p>Hi Mathias,</p>\n<p>I have sent out an email with the issue to the address <code>cl-isabelle-users-request@lists.cam.ac.uk</code><br>\nbut it did not show up in the daily digest, is there some rules I am missing in reporting to the Isabelle mailing list?</p>\n<p>Thanks a lot!</p>",
        "id": 363072321,
        "sender_full_name": "Chengsong Tan",
        "timestamp": 1685716749
    },
    {
        "content": "<p>Spontaneously, I guess the addresses with <code>-request</code> are for sending commands to the mailing list manager via e-mail. There should be a web interface for registering you as a member of this list, and then you should just send to the address with the <code>-request</code> removed. In any case, you should register as a member of this list, since you might not be able to post there without being a member and people might send their answers only to the list, as they expect senders being on the list and want to continue the discussion on the list (mailing lists are a bit like old-style discussion forums).</p>",
        "id": 363118826,
        "sender_full_name": "Wolfgang Jeltsch",
        "timestamp": 1685726540
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"423655\">Wolfgang Jeltsch</span> <a href=\"#narrow/stream/202961-General/topic/codegen.20for.20predicates/near/363118826\">said</a>:</p>\n<blockquote>\n<p>Spontaneously, I guess the addresses with <code>-request</code> are for sending commands to the mailing list manager via e-mail. There should be a web interface for registering you as a member of this list, and then you should just send to the address with the <code>-request</code> removed. In any case, you should register as a member of this list, since you might not be able to post there without being a member and people might send their answers only to the list, as they expect senders being on the list and want to continue the discussion on the list (mailing lists are a bit like old-style discussion forums).</p>\n</blockquote>\n<p>Thank you for the answer! I think I subscribed as a digest user, which allows me to see a daily digest from that email address (with the -request suffix). I think that should be enough to report things, no? I will try sending messages again removing that -request.</p>",
        "id": 363572489,
        "sender_full_name": "Chengsong Tan",
        "timestamp": 1685914250
    },
    {
        "content": "<p>I’ve never used the digest functionality, but I’m quite sure that the address with <code>-request</code> is not for posting but for controlling your mailing list settings. For some reason, it seems to be used also as the sender address for digests, probably because digests are not regular mailing list e-mails.</p>",
        "id": 363580882,
        "sender_full_name": "Wolfgang Jeltsch",
        "timestamp": 1685920318
    },
    {
        "content": "<p>I wrote the following procedure:<br>\nprocedure funny_count \"(t_bound :: nat,  max_iter :: nat)\" over state<br>\n = \"iter:=0;<br>\n    counter:=0;<br>\n    t:=0;<br>\n    while iter &lt; max_iter<br>\n      inv <br>\n         (iter ≤ max_iter ) ∧<br>\n         (counter ≤ iter * t)</p>\n<div class=\"codehilite\"><pre><span></span><code>  do t:=0;\n    while t &lt; t_bound\n      inv (t ≤ t_bound) ∧\n          (counter ≤ t + (iter*t_bound))\n      do \n        counter := counter + 1;\n        t:= t + 1\n      od;\n    iter:=iter+1   \n  od\n</code></pre></div>\n\n<p>\"<br>\nAnd I'm trying to use the verification condition generator (VCG) tactic to verify the following:<br>\nlemma \"H{True}funny_count(t_bound, max_iter){counter = t_bound*max_iter}\"<br>\nproof(vcg)<br>\n  oops</p>\n<p>But the goals to show seem weird and I think I need better invariants (under inv).  Also I was thinking of creating a new stream just for program verification using VCG and would appreciate some feedback on that idea as well.</p>",
        "id": 364063057,
        "sender_full_name": "Dustin Bryant",
        "timestamp": 1686070874
    }
]