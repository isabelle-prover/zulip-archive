[
    {
        "content": "<p>Hi - I have this expression within a goal:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"ow\">{</span><span class=\"kp\">if</span><span class=\"w\"> </span><span class=\"n\">even</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"n\">div</span><span class=\"w\"> </span><span class=\"n\">2</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">else</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">3</span><span class=\"w\"> </span><span class=\"n\">*</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">1</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">n.</span><span class=\"w\"> </span><span class=\"n\">True</span><span class=\"ow\">}</span>\n</code></pre></div>\n<p>I would like to convince the proof to rewrite this as the union of two set comprehensions:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"ow\">{</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"n\">div</span><span class=\"w\"> </span><span class=\"n\">2</span><span class=\"o\">)|</span><span class=\"n\">n.</span><span class=\"w\"> </span><span class=\"n\">even</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"ow\">}</span><span class=\"w\"> </span><span class=\" -Symbol\">\\&lt;union&gt;</span><span class=\"w\"> </span><span class=\"ow\">{</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">3*n</span><span class=\"o\">+</span><span class=\"n\">1</span><span class=\"o\">|</span><span class=\"n\">n.</span><span class=\"w\"> </span><span class=\" -Symbol\">\\&lt;not&gt;</span><span class=\"w\"> </span><span class=\"n\">even</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"ow\">}</span>\n</code></pre></div>\n<p>I have a lemma that proves this is safe in the general case:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">union_comprehension</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"{if T then p else q| x. U} = ({p | x. U </span><span class=\"ss\">\\&lt;and&gt;</span><span class=\"s\"> T} </span><span class=\"ss\">\\&lt;union&gt;</span><span class=\"s\"> {q| x. U </span><span class=\"ss\">\\&lt;and&gt;</span><span class=\"s\"> </span><span class=\"ss\">\\&lt;not&gt;</span><span class=\"s\"> T})\"</span>\n<span class=\"w\">    </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"n\">auto</span>\n<span class=\"k\">done</span>\n</code></pre></div>\n<p>However, I have tried <code>apply (subst union_comprehension)</code> and similar things, but it isn't able to progress anything. I did try to rewrite this rule as a <code>fun</code> but couldn't figure it out.</p>\n<p>Thanks.</p>",
        "id": 388199950,
        "sender_full_name": "Matthew Pocock",
        "timestamp": 1693431664
    },
    {
        "content": "<p>And of course within moments of posting, after an hour of scratching my head, I got it working. I had to make <code>union_comprehension</code> much more specific to get it to unify.</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">union_comprehension</span><span class=\"o\">:</span>\n<span class=\"w\">    </span><span class=\"s\">\"{if T x then p x else q x| x. U x} =</span>\n<span class=\"s\">        ({p x | x. U x </span><span class=\"ss\">\\&lt;and&gt;</span><span class=\"s\"> T x} </span><span class=\"ss\">\\&lt;union&gt;</span><span class=\"s\"> {q x| x. U x </span><span class=\"ss\">\\&lt;and&gt;</span><span class=\"s\"> </span><span class=\"ss\">\\&lt;not&gt;</span><span class=\"s\"> T x})\"</span>\n<span class=\"w\">    </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"n\">auto</span>\n<span class=\"k\">done</span>\n</code></pre></div>\n<p>I do have a genuine follow-up question though. I'm writing a few of these lemmas that only exist to guide another proof. Is there any way to introduce them within the proof that they are used in? As sort of in-line once-off rules?</p>",
        "id": 388201367,
        "sender_full_name": "Matthew Pocock",
        "timestamp": 1693432364
    },
    {
        "content": "<p>You should really switch to using Isar. Not only allows it to introduce these “local lemmas”; it also allows for much more readable proofs.</p>",
        "id": 388203154,
        "sender_full_name": "Wolfgang Jeltsch",
        "timestamp": 1693433058
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"423655\">Wolfgang Jeltsch</span> <a href=\"#narrow/stream/202961-General/topic/conditinoal.20comprehension.20rewriting/near/388203154\">said</a>:</p>\n<blockquote>\n<p>You should really switch to using Isar. Not only allows it to introduce these “local lemmas”; it also allows for much more readable proofs.</p>\n</blockquote>\n<p>OK. Thanks. I guess that's my \"next thing\" :D and will probably be a good excuse to tidy what I've got so far.</p>",
        "id": 388204867,
        "sender_full_name": "Matthew Pocock",
        "timestamp": 1693433892
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"423655\">Wolfgang Jeltsch</span> <a href=\"#narrow/stream/202961-General/topic/conditinoal.20comprehension.20rewriting/near/388203154\">said</a>:</p>\n<blockquote>\n<p>You should really switch to using Isar. Not only allows it to introduce these “local lemmas”; it also allows for much more readable proofs.</p>\n</blockquote>\n<p>What should I look at to learn isar? I have been working through <a href=\"https://isabelle.in.tum.de/doc/tutorial.pdf\">https://isabelle.in.tum.de/doc/tutorial.pdf</a> but it isn't really helping me to write proofs in isar.</p>",
        "id": 388210693,
        "sender_full_name": "Matthew Pocock",
        "timestamp": 1693437326
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"642996\">Matthew Pocock</span> <a href=\"#narrow/stream/202961-General/topic/conditinoal.20comprehension.20rewriting/near/388210693\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"423655\">Wolfgang Jeltsch</span> <a href=\"#narrow/stream/202961-General/topic/conditinoal.20comprehension.20rewriting/near/388203154\">said</a>:</p>\n<blockquote>\n<p>You should really switch to using Isar. Not only allows it to introduce these “local lemmas”; it also allows for much more readable proofs.</p>\n</blockquote>\n<p>What should I look at to learn isar? I have been working through <a href=\"https://isabelle.in.tum.de/doc/tutorial.pdf\">https://isabelle.in.tum.de/doc/tutorial.pdf</a> but it isn't really helping me to write proofs in isar.</p>\n</blockquote>\n<p>Part I, Section 5 of Concrete Semantics?<br>\n<a href=\"http://concrete-semantics.org\">http://concrete-semantics.org</a></p>",
        "id": 388215300,
        "sender_full_name": "Yutaka Nagashima",
        "timestamp": 1693440273
    },
    {
        "content": "<p>For the original question: the issue is that you have the mark the dependencies in x, so:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">union_comprehension</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"{if T x then p x else q x| x. U x} = ({p x | x. U x </span><span class=\"ss\">\\&lt;and&gt;</span><span class=\"s\"> T x} </span><span class=\"ss\">\\&lt;union&gt;</span><span class=\"s\"> {q x| x. U x </span><span class=\"ss\">\\&lt;and&gt;</span><span class=\"s\"> </span><span class=\"ss\">\\&lt;not&gt;</span><span class=\"s\"> T x})\"</span>\n<span class=\"w\">    </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"n\">auto</span>\n<span class=\"k\">done</span>\n\n<span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"s\">‹A = {if even n then (n, n div 2) else (n, 3 * n + 1) |n. True}›</span>\n<span class=\"w\">  </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">subst</span><span class=\"w\"> </span><span class=\"n\">union_comprehension</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 388249953,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1693458203
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"642996\">Matthew Pocock</span> <a href=\"#narrow/stream/202961-General/topic/conditinoal.20comprehension.20rewriting/near/388210693\">said</a>:</p>\n<blockquote>\n<p>What should I look at to learn isar? I have been working through <a href=\"https://isabelle.in.tum.de/doc/tutorial.pdf\">https://isabelle.in.tum.de/doc/tutorial.pdf</a> but it isn't really helping me to write proofs in isar.</p>\n</blockquote>\n<p>I think that’s the old tutorial. The best way of getting into Isabelle, in my opinion, is the <code>prog-prove</code> tutorial, which is the very first piece of documentation listed on the documentation page of the Isabelle website and in the documentation panel of Isabelle/jEdit. From what I understand, it is a large excerpt from the first chapter of <em>Concrete Semantics</em>; so when <span class=\"user-mention\" data-user-id=\"644411\">@Yutaka Nagashima</span> suggested to look at Part I, Section 5 of <em>Concrete Semantics</em>, he essentially suggested to look at Section 4 of the <code>prog-prove</code> tutorial. <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 388371266,
        "sender_full_name": "Wolfgang Jeltsch",
        "timestamp": 1693501483
    },
    {
        "content": "<p>It happened several times recently that newcomers were looking at the old tutorial instead of <code>prog-prove</code>. I wonder why that is, given that <code>prog-prove</code> is listed first on the website and in Isabelle/jEdit and the old tutorial is listed under “Old Isabelle Manuals”. Do people just do a web search for “Isabelle tutorial” and find the old tutorial this way? <span class=\"user-mention\" data-user-id=\"642996\">@Matthew Pocock</span>, how did you arrive at the old Isabelle tutorial?</p>",
        "id": 388372176,
        "sender_full_name": "Wolfgang Jeltsch",
        "timestamp": 1693501861
    },
    {
        "content": "<p>If I was a beginner, I would probably also start with the tutorial, because it seems to be the best place to start (\"Programming and Proving\" does not really sound like an introduction)</p>",
        "id": 388373281,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1693502321
    },
    {
        "content": "<p>Hmm, it’s <em>Programming and Proving in Isabelle/HOL</em>, which sounds to me like it would give a good overview about Isabelle/HOL. <span aria-label=\"man shrugging\" class=\"emoji emoji-1f937-200d-2642\" role=\"img\" title=\"man shrugging\">:man_shrugging:</span></p>",
        "id": 388373609,
        "sender_full_name": "Wolfgang Jeltsch",
        "timestamp": 1693502438
    },
    {
        "content": "<p>true, but if I think of programming in Isabelle, I mostly think of ML, but… I don't really know</p>",
        "id": 388373879,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1693502546
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"423655\">Wolfgang Jeltsch</span> <a href=\"#narrow/stream/202961-General/topic/conditinoal.20comprehension.20rewriting/near/388372176\">said</a>:</p>\n<blockquote>\n<p>It happened several times recently that newcomers were looking at the old tutorial instead of <code>prog-prove</code>. I wonder why that is</p>\n</blockquote>\n<p>I hit the old tutorial both from google, and also perhaps google takes you to an older isabelle documentation page? Each time I googled for a tutorial and followed the links or the pages, it took me to the old tutorial. This is the first time I am seeing the <code>prog-prove</code> tutorial, and only because I added <code>prog-prove</code> into the google search term.  It may be the first time google took me to the 2021 isabelle documentation page.</p>",
        "id": 388400825,
        "sender_full_name": "Matthew Pocock",
        "timestamp": 1693513608
    },
    {
        "content": "<p>The <code>prog-prove</code> tutorial has been in existence for a long time; so, even if you’re taken to, say, the Isabelle2021 documentation page, you should find it. What I can imagine is that, if you google for “Isabelle tutorial”, you are taken to the document that runs under the short name “Isabelle tutorial” but is unfortunately the outdated document.</p>",
        "id": 388405843,
        "sender_full_name": "Wolfgang Jeltsch",
        "timestamp": 1693515909
    }
]