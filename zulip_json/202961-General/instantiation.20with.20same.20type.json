[
    {
        "content": "<p>Hi would like to ask how to instantiate a type class with a type with multiple of the same type for arity<br>\nsuch as a function mapping to itself 'a =&gt; 'a<br>\ninstantiation \"fun\" :: (type ,type) instead instantiates for 'a =&gt; 'b.</p>",
        "id": 436615840,
        "sender_full_name": "irvin",
        "timestamp": 1714625086
    },
    {
        "content": "<p>I think this is not possible. You could define a type for endofunctions (i.e. functions with type <code>'a =&gt; 'a</code>) using typedef and then instantiate your typeclass for this type.</p>",
        "id": 436650211,
        "sender_full_name": "Lukas Stevens",
        "timestamp": 1714641360
    },
    {
        "content": "<p>Thanks for your reply. I managed to do it manually using ML using Class.instantiation is there any reason for this behavior in the isar cmd?</p>",
        "id": 437430240,
        "sender_full_name": "irvin",
        "timestamp": 1715080591
    },
    {
        "content": "<p>wait nvm i just realized I didnt manage to succeed with doing it in ML <span aria-label=\"oh no\" class=\"emoji emoji-1f615\" role=\"img\" title=\"oh no\">:oh_no:</span></p>",
        "id": 437503486,
        "sender_full_name": "irvin",
        "timestamp": 1715104934
    },
    {
        "content": "<p>It's just a fundamental restriction of the way type classes work in Isabelle/HOL. If you allow more flexibility in type class instantiations, you can easily get things like overlapping instances and all the checks become much more difficult. If you overdo it, type class inference becomes computationally hard or even undecidable.</p>",
        "id": 470315992,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1726395723
    },
    {
        "content": "<p>This is probably described in the documentation on type classes</p>",
        "id": 470316055,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1726395742
    },
    {
        "content": "<p>Thanks for your reply i manually worked around the issue using adhoc overloading + locales instead</p>",
        "id": 470581596,
        "sender_full_name": "irvin",
        "timestamp": 1726489742
    }
]