[
    {
        "content": "<p>Again, at some point someone should provide some explanations for newcomers about locales in Isabelle. <span aria-label=\"flashlight\" class=\"emoji emoji-1f526\" role=\"img\" title=\"flashlight\">:flashlight:</span></p>",
        "id": 169812827,
        "sender_full_name": "Anthony Bordg",
        "timestamp": 1562507435
    },
    {
        "content": "<p>I don't quite understand the difference between \"local\" and \"class\". Do the \"local\" resemble the notion of Bourbaki-Structure? For example, to encode the classic notion of Group, there is a difference to choose the definition of the notion of Group from \"local\" or \"class\"?</p>",
        "id": 170876258,
        "sender_full_name": "Roland Coghetto",
        "timestamp": 1563182214
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"228975\">@Roland Coghetto</span> It's an excellent question. I don't have a definitive answer. However, my feeling is that for the formalization of mathematics locales should be preferred. I would bet that locales are closer to Bourbaki's structures. It might even be that <code>class</code> are deprecated.</p>",
        "id": 170910453,
        "sender_full_name": "Anthony Bordg",
        "timestamp": 1563209254
    },
    {
        "content": "<p>There's a new paper online, <a href=\"https://arxiv.org/abs/1907.02836\" target=\"_blank\" title=\"https://arxiv.org/abs/1907.02836\">From LCF to Isabelle/HOL</a>, where you will find material on axiomatic type classes (Section 4.2) and locales (Section 8.4). Briefly, locales are more general but also more heavyweight in use.</p>",
        "id": 170976544,
        "sender_full_name": "Lawrence Paulson",
        "timestamp": 1563276750
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"228975\">@Roland Coghetto</span> The second half of page 17 in Larry's reference is particularly relevant. They mention explicitly the difference between type class for groups and locale for groups.</p>",
        "id": 170981608,
        "sender_full_name": "Anthony Bordg",
        "timestamp": 1563281045
    },
    {
        "content": "<p>Ok thanks but Let us take the following example:<br>\nThe question: using locales and context, I have difficulty demonstrating these 2 proposals (independently of each other)<br>\nlemma two_distinct_points:<br>\n\"∃ x ::'p. ∃ y :: 'p. x ≠ y\" <br>\nor<br>\nlemma two_distinct_points_bis:<br>\n\"∃ x y. x ≠ y\" </p>\n<p>I have, in the proof, the line \" then have \"x ≠ y\" by blast\" and after why I can't proof the thesis ?</p>\n<p>The code (I cleaned the code to show only the 2 theorems that cause problems.)</p>\n<p>section \"Tarski's geometry\"</p>\n<p>theory TARSKI<br>\n  imports Main<br>\nbegin</p>\n<p>locale TarskiBC = <br>\n  fixes B :: \"'p ⇒ 'p ⇒ 'p ⇒ bool\" (\"\\&lt;between&gt; _ _ _\" [99,99,99] 50)<br>\n    and C :: \"'p ⇒ 'p ⇒ 'p ⇒ 'p ⇒ bool\"     (\"_ _ \\&lt;congruent&gt; _ _\" [99,99,99,99] 50)</p>\n<p>locale Tarski1 = TarskiBC +<br>\n  assumes A1: \"∀a b. a b \\&lt;congruent&gt; b a\"<br>\nlocale Tarski2 = TarskiBC +<br>\n  assumes A2: \"∀a b p q r s. a b \\&lt;congruent&gt; p q ∧ a b \\&lt;congruent&gt; r s ⟶ p q \\&lt;congruent&gt; r s\"<br>\nlocale Tarski3 = TarskiBC +<br>\n  assumes A3: \"∀a b c. a b \\&lt;congruent&gt; c c ⟶ a = b\"<br>\nlocale Tarski4 = TarskiBC +<br>\n  assumes A4: \"∀q a b c. ∃x. \\&lt;between&gt; q a x ∧ a x \\&lt;congruent&gt; b c\"<br>\nlocale Tarski8 = TarskiBC +<br>\n  assumes A8:  \"∃ a b c. ¬ \\&lt;between&gt; a b c ∧ ¬\\&lt;between&gt; b c a ∧ ¬\\&lt;between&gt; c a b\"</p>\n<p>locale Tarski12 = Tarski1 + Tarski2<br>\nlocale Tarski123 = Tarski12 + Tarski3<br>\nlocale Tarski34 = Tarski3 + Tarski4<br>\nlocale Tarski1234 = Tarski123 + Tarski4</p>\n<p>locale Tarski348 = Tarski34 + Tarski8<br>\nlocale Tarski12348 = Tarski1234 + Tarski8</p>\n<p>lemma (in Tarski3) A3':   <br>\n  assumes \"a b \\&lt;congruent&gt; c c\"<br>\n  shows \"a = b\"<br>\n  using A3 assms(1) by blast </p>\n<p>theorem (in Tarski12) Satz2p1: (<em>GeoCoq cong_reflexivity</em>)<br>\n\"a b \\&lt;congruent&gt; a b\"<br>\n  using A1 A2 by blast </p>\n<p>theorem (in Tarski12) Satz2p2: (<em>GeoCoq cong_symmetry</em>)<br>\n  assumes \"a b \\&lt;congruent&gt; c d\"<br>\n  shows \"c d \\&lt;congruent&gt; a b\"<br>\n  using A2 Satz2p1 assms(1) by blast</p>\n<p>theorem (in Tarski34) Satz3p1: (<em>GeoCoq between_trivial</em>)<br>\n  \"\\&lt;between&gt; a b b\"<br>\n  using A3' A4 by blast </p>\n<p>theorem (in Tarski348) Satz3p13:<br>\n  shows \"∃ a b c. ¬ \\&lt;between&gt; a b c ∧ ¬ \\&lt;between&gt; b c a ∧ ¬ \\&lt;between&gt; c a b ∧ a ≠ b ∧ b ≠ c ∧ c ≠ a\"<br>\n  using A8 Satz3p1 by blast </p>\n<p>context Tarski12348<br>\nbegin</p>\n<p>theorem Satz3p14: (* GeoCoq point_construction_different *)<br>\n  shows \"∀ a b. ∃ c. \\&lt;between&gt; a b c ∧ b ≠ c\"<br>\n  by (metis (full_types) A3 A4 Tarski34.intro Tarski348.Satz3p13 Tarski348_def Tarski3_axioms Tarski4_axioms Tarski8_axioms Satz2p2)</p>\n<p>lemma two_distinct_points:<br>\n\"∃ x ::'p. ∃ y :: 'p. x ≠ y\" <br>\nproof -<br>\n  obtain x y where \"x ≠ y ∧ \\&lt;between&gt; x x x ∧ \\&lt;between&gt; y y y\" <br>\n  using Satz3p14 Tarski34.Satz3p1 Tarski34.intro Tarski3_axioms Tarski4_axioms by fastforce<br>\n  then have \"x ≠ y\" by blast<br>\nthen show ?thesis sorry<br>\nqed</p>\n<p>lemma two_distinct_points_bis:<br>\n\"∃ x y. x ≠ y\" <br>\nproof -<br>\n  obtain x y where \"x ≠ y ∧ \\&lt;between&gt; x x x ∧ \\&lt;between&gt; y y y\" <br>\n  using Satz3p14 Tarski34.Satz3p1 Tarski34.intro Tarski3_axioms Tarski4_axioms by fastforce<br>\n  then have \"x ≠ y\" by blast<br>\nthen show ?thesis sorry<br>\nqed</p>\n<p>end</p>",
        "id": 171012640,
        "sender_full_name": "Roland Coghetto",
        "timestamp": 1563301126
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"228975\">@Roland Coghetto</span> simply write</p>\n<div class=\"codehilite\"><pre><span></span>lemma two_distinct_points:\n&quot;∃ x ::&#39;a. ∃ y ::&#39;a. x ≠ y&quot;\nproof-\n  obtain x y where &quot;x ≠ y ∧ \\&lt;between&gt; x x x ∧ \\&lt;between&gt; y y y&quot;\n    using Satz3p14 Tarski34.Satz3p1 Tarski34.intro Tarski3_axioms Tarski4_axioms by fastforce\n  then show ?thesis by auto\nqed\n</pre></div>\n\n\n<p>or more concisely</p>\n<div class=\"codehilite\"><pre><span></span>lemma two_distinct_points:\n&quot;∃ x ::&#39;a. ∃ y ::&#39;a. x ≠ y&quot;\n  using Satz3p14 Tarski34.Satz3p1 Tarski34.intro Tarski3_axioms Tarski4_axioms by fastforce\n</pre></div>\n\n\n<p>and for the second version</p>\n<div class=\"codehilite\"><pre><span></span>lemma two_distinct_points_bis:\n&quot;∃ x y::&#39;a. x ≠ y&quot;\nproof -\n  obtain x y where &quot;x ≠ y ∧ \\&lt;between&gt; x x x ∧ \\&lt;between&gt; y y y&quot;\n    using Satz3p14 Tarski34.Satz3p1 Tarski34.intro Tarski3_axioms Tarski4_axioms by fastforce\n  then show ?thesis by auto\nqed\n</pre></div>\n\n\n<p>or more concisely</p>\n<div class=\"codehilite\"><pre><span></span>lemma two_distinct_points_bis:\n&quot;∃ x y::&#39;a. x ≠ y&quot;\n  using Satz3p14 Tarski34.Satz3p1 Tarski34.intro Tarski3_axioms Tarski4_axioms by fastforce\n</pre></div>",
        "id": 171015057,
        "sender_full_name": "Anthony Bordg",
        "timestamp": 1563302555
    },
    {
        "content": "<p>ok thanks</p>",
        "id": 171046001,
        "sender_full_name": "Roland Coghetto",
        "timestamp": 1563333621
    },
    {
        "content": "<p>In the previous example, I reconstructed the locale differently. But I get the following message: \"Ambiguous input⌂ produces 15 parse trees (10 displayed):\" What does that mean?</p>",
        "id": 172313614,
        "sender_full_name": "Roland Coghetto",
        "timestamp": 1564756566
    },
    {
        "content": "<p>Isabelle parses all possible outputs. If only one possible output is correctly typed, you get the warning you have. If more than one is type correct or none is, you get an error</p>",
        "id": 172314666,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1564757394
    },
    {
        "content": "<p>Add some parentheses to help Isabelle to find the intended parse tree out of all possible ones <br>\nEdit: Mathias was faster :)</p>",
        "id": 172314796,
        "sender_full_name": "Hanna Lachnitt",
        "timestamp": 1564757471
    }
]