[
    {
        "content": "<p>In the last two months, I've learned to do lots of stuff in Isabelle, but I haven't had the opportunity to verify results of relatively complex calculations, until now. For instance, I tried the following, but got stuck with the last part. The matrix C which is a function of a,b,c,d is such that C*C^t is supposed to be (a^2 + b^2 + c^2 + d^2)*I_4. Any ideas?</p>\n<div class=\"codehilite\" data-code-language=\"fun\"><pre><span></span><code>  \"four_squares n = (SOME (a, b, c, d). a^2 + b^2 + c^2 + d^2 = n)\"\n\nfun lagrange_mat_of_4 :: \"(nat × nat × nat × nat) ⇒ int mat\" where\n  \"lagrange_mat_of_4 (a, b, c, d) =\n  mat 4 4 (λ(i, j). if      (i, j) = (1, 1) then a\n                    else if (i, j) = (1, 2) then b\n                    else if (i, j) = (1, 3) then c\n                    else if (i, j) = (1, 4) then d\n                    else if (i, j) = (2, 1) then -b\n                    else if (i, j) = (2, 2) then a\n                    else if (i, j) = (2, 3) then -d\n                    else if (i, j) = (2, 4) then c\n                    else if (i, j) = (3, 1) then -c\n                    else if (i, j) = (3, 2) then d\n                    else if (i, j) = (3, 3) then a\n                    else if (i, j) = (3, 4) then -b\n                    else if (i, j) = (4, 1) then -d\n                    else if (i, j) = (4, 2) then -c\n                    else if (i, j) = (4, 3) then b\n                    else if (i, j) = (4, 4) then a\n                    else 0)\"\n\nfun lagrange_mat :: \"nat ⇒ int mat\" where\n  \"lagrange_mat n = lagrange_mat_of_4(four_squares(n))\"\n\nlemma lagrange_identity:\n  assumes \"n ∈ ℕ\"\n  shows \"(lagrange_mat n)*(lagrange_mat n)⇧T = int n ⋅⇩m (1⇩m (4::nat))\"\nproof -\n   let ?M = \"lagrange_mat n\"\n   let ?MT = \"transpose_mat(?M)\"\n   let ?prodM = \"?M*?MT\"\n   let ?nI = \"int n ⋅⇩m (1⇩m (4::nat))\"\n\n  obtain a b c d where squares: \"four_squares n = (a, b, c, d)\"\n    using sum_of_four_squares by (metis surj_pair)\n\n  have M_def: \"?M = lagrange_mat_of_4 (a, b, c, d)\"\n    using squares by simp\n\n  have MT_def: \"?MT = transpose_mat(?M)\"\n    by simp\n\n  have prodM_def: \"?prodM = ?M*?MT\"\n    by simp\n\n  then have lagrange_matrix_structure: \"?prodM = mat 4 4\n  (λ(i, j). if      (i, j) = (1, 1) then a*a + b*b + c*c + d*d\n            else if (i, j) = (1, 2) then a*(-b) + b*a + c*(-d) + d*c\n            else if (i, j) = (1, 3) then a*(-c) + b*d + c*a + d*(-b)\n            else if (i, j) = (1, 4) then a*(-d) + b*(-c) + c*b + d*a\n            else if (i, j) = (2, 1) then (-b)*a + a*b + (-d)*c + c*d\n            else if (i, j) = (2, 2) then (-b)*(-b) + a*a + (-d)*(-d) + c*c\n            else if (i, j) = (2, 3) then (-b)*(-c) + a*d + (-d)*a + c*(-b)\n            else if (i, j) = (2, 4) then (-b)*(-d) + a*(-c) + (-d)*b + c*a\n            else if (i, j) = (3, 1) then (-c)*a + d*b + a*c + (-b)*d\n            else if (i, j) = (3, 2) then (-c)*(-b) + d*a + a*(-d) + (-b)*c\n            else if (i, j) = (3, 3) then (-c)*(-c) + d*d + a*a + (-b)*(-b)\n            else if (i, j) = (3, 4) then (-c)*(-d) + d*(-c) + a*b + (-b)*a\n            else if (i, j) = (4, 1) then (-d)*a + (-c)*b + b*c + a*d\n            else if (i, j) = (4, 2) then (-d)*(-b) + (-c)*a + b*(-d) + a*c\n            else if (i, j) = (4, 3) then (-d)*(-c) + (-c)*d + b*a + a*(-b)\n            else if (i, j) = (4, 4) then (-d)*(-d) + (-c)*(-c) + b*b + a*a\n            else 0)\"\n    by sorry\n</code></pre></div>",
        "id": 456752816,
        "sender_full_name": "Craig Alan Feinstein",
        "timestamp": 1722913215
    },
    {
        "content": "<p>I forgot to say I am importing stuff from the Jordan Normal Form directory</p>",
        "id": 456758064,
        "sender_full_name": "Craig Alan Feinstein",
        "timestamp": 1722915948
    },
    {
        "content": "<p>have you tried using <code>mat_eq_iff</code>?</p>",
        "id": 456780070,
        "sender_full_name": "Yong Kiam",
        "timestamp": 1722926464
    },
    {
        "content": "<p>I tried using mat_eq_iff and sledgehammer with no success</p>",
        "id": 456893978,
        "sender_full_name": "Craig Alan Feinstein",
        "timestamp": 1722960238
    },
    {
        "content": "<p>I just had a thought that maybe I didn’t import the section containing mat_eq_iff. I’ll check that when I get back on Isabelle.</p>",
        "id": 456933210,
        "sender_full_name": "Craig Alan Feinstein",
        "timestamp": 1722971249
    },
    {
        "content": "<p>I tried importing that section but it didn’t work</p>",
        "id": 456981721,
        "sender_full_name": "Craig Alan Feinstein",
        "timestamp": 1722991450
    },
    {
        "content": "<p>you probably need to do <code>mat_eq_iff</code> and <code>auto</code> and inspect the goal more closely....</p>",
        "id": 457025824,
        "sender_full_name": "Yong Kiam",
        "timestamp": 1723013916
    },
    {
        "content": "<p>maybe simplify using <code>algebra_simps</code></p>",
        "id": 457025882,
        "sender_full_name": "Yong Kiam",
        "timestamp": 1723013943
    },
    {
        "content": "<p>And for sure give more details than \"it didn't work\". What did you try? What goal remained?</p>",
        "id": 457088246,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1723031497
    },
    {
        "content": "<p>I changed it to make it look a little nicer to this, but it didn't find anything from sledgehammer:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">four_squares</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"nat ⇒ (nat × nat × nat × nat)\"</span><span class=\"w\"> </span><span class=\"kp\">where</span>\n<span class=\"w\">  </span><span class=\"s\">\"four_squares n = (SOME (a, b, c, d). a^2 + b^2 + c^2 + d^2 = n)\"</span>\n\n<span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">lagrange_mat_of_4</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"(nat × nat × nat × nat) ⇒ int mat\"</span><span class=\"w\"> </span><span class=\"kp\">where</span>\n<span class=\"w\">  </span><span class=\"s\">\"lagrange_mat_of_4 (a, b, c, d) =</span>\n<span class=\"s\">  mat 4 4 (λ(i, j). if      (i, j) = (1, 1) then a</span>\n<span class=\"s\">                    else if (i, j) = (1, 2) then b</span>\n<span class=\"s\">                    else if (i, j) = (1, 3) then c</span>\n<span class=\"s\">                    else if (i, j) = (1, 4) then d</span>\n<span class=\"s\">                    else if (i, j) = (2, 1) then -b</span>\n<span class=\"s\">                    else if (i, j) = (2, 2) then a</span>\n<span class=\"s\">                    else if (i, j) = (2, 3) then -d</span>\n<span class=\"s\">                    else if (i, j) = (2, 4) then c</span>\n<span class=\"s\">                    else if (i, j) = (3, 1) then -c</span>\n<span class=\"s\">                    else if (i, j) = (3, 2) then d</span>\n<span class=\"s\">                    else if (i, j) = (3, 3) then a</span>\n<span class=\"s\">                    else if (i, j) = (3, 4) then -b</span>\n<span class=\"s\">                    else if (i, j) = (4, 1) then -d</span>\n<span class=\"s\">                    else if (i, j) = (4, 2) then -c</span>\n<span class=\"s\">                    else if (i, j) = (4, 3) then b</span>\n<span class=\"s\">                    else if (i, j) = (4, 4) then a</span>\n<span class=\"s\">                    else 0)\"</span>\n\n<span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">lagrange_mat</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"nat ⇒ int mat\"</span><span class=\"w\"> </span><span class=\"kp\">where</span>\n<span class=\"w\">  </span><span class=\"s\">\"lagrange_mat n = lagrange_mat_of_4(four_squares(n))\"</span>\n\n<span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">lagrange_identity</span><span class=\"o\">:</span>\n<span class=\"w\">  </span><span class=\"kp\">assumes</span><span class=\"w\"> </span><span class=\"n\">n_natural</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"n ∈ ℕ\"</span>\n<span class=\"w\">  </span><span class=\"kp\">shows</span><span class=\"w\"> </span><span class=\"s\">\"(lagrange_mat n)*(lagrange_mat n)⇧T = int n ⋅⇩m (1⇩m (4::nat))\"</span>\n<span class=\"k\">proof</span><span class=\"w\"> </span><span class=\"o\">-</span>\n<span class=\"w\">  </span><span class=\"k\">obtain</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"n\">d</span><span class=\"w\"> </span><span class=\"kp\">where</span><span class=\"w\"> </span><span class=\"n\">squares</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"four_squares n = (a, b, c, d)\"</span>\n<span class=\"w\">    </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">sum_of_four_squares</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">metis</span><span class=\"w\"> </span><span class=\"n\">surj_pair</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"s\">\"lagrange_mat n = lagrange_mat_of_4(a, b, c, d)\"</span><span class=\"w\"> </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">squares</span>\n<span class=\"w\">    </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">simp</span>\n<span class=\"w\">  </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"s\">\"(lagrange_mat n)*(lagrange_mat n)⇧T =</span>\n<span class=\"s\">    lagrange_mat_of_4(a, b, c, d)*(lagrange_mat_of_4(a, b, c, d))⇧T\"</span>\n<span class=\"w\">    </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">simp</span>\n<span class=\"w\">  </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"k\">have</span>\n<span class=\"w\">  </span><span class=\"s\">\"lagrange_mat_of_4(a, b, c, d)*(lagrange_mat_of_4(a, b, c, d))⇧T =</span>\n<span class=\"s\">    int n ⋅⇩m (1⇩m (4::nat))\"</span>\n<span class=\"w\">    </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">algebra_simps</span><span class=\"w\"> </span><span class=\"n\">mat_eq_iff</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"kt\">sledgehammer</span>\n</code></pre></div>",
        "id": 457227512,
        "sender_full_name": "Craig Alan Feinstein",
        "timestamp": 1723075014
    },
    {
        "content": "<p>The \"by auto\" suggestion was helpful, as it allowed me to see some steps in what Isabelle is thinking. But I still don't know how to convince Isabelle.</p>",
        "id": 457227716,
        "sender_full_name": "Craig Alan Feinstein",
        "timestamp": 1723075170
    },
    {
        "content": "<p>It seems that working with matrices and vectors is harder than working with simple algebra in Isabelle. Any suggestions would be appreciated.</p>",
        "id": 457262004,
        "sender_full_name": "Craig Alan Feinstein",
        "timestamp": 1723091057
    },
    {
        "content": "<p>If I understand the problem correctly, the issue now is that you have to work with the choice (to derive that <code>a^2 + b^2 + c^2 + d^2 = n</code>) which sledgehammer is not good at</p>",
        "id": 457380220,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1723126428
    },
    {
        "content": "<p>See this thread <a href=\"#narrow/stream/238552-Beginner-Questions/topic/Proving.20lemma.20with.20definite.20description/near/291315915\">https://isabelle.zulipchat.com/#narrow/stream/238552-Beginner-Questions/topic/Proving.20lemma.20with.20definite.20description/near/291315915</a></p>",
        "id": 457381672,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1723126856
    },
    {
        "content": "<p>@MathiasFleury I think that is a good suggestion, so I got rid of the n and just kept the a,b,c,d. I'll worry about the n later. I came up with this (worrying only about the first entry of the matrix), but sledgehammer didn't find a proof. Any ideas?</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">lagrange_mat_of_4</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"(nat × nat × nat × nat) ⇒ int mat\"</span><span class=\"w\"> </span><span class=\"kp\">where</span>\n<span class=\"w\">  </span><span class=\"s\">\"lagrange_mat_of_4 (a, b, c, d) =</span>\n<span class=\"s\">  mat 4 4 (λ(i, j). if      (i, j) = (1, 1) then a</span>\n<span class=\"s\">                    else if (i, j) = (1, 2) then b</span>\n<span class=\"s\">                    else if (i, j) = (1, 3) then c</span>\n<span class=\"s\">                    else if (i, j) = (1, 4) then d</span>\n<span class=\"s\">                    else if (i, j) = (2, 1) then -b</span>\n<span class=\"s\">                    else if (i, j) = (2, 2) then a</span>\n<span class=\"s\">                    else if (i, j) = (2, 3) then -d</span>\n<span class=\"s\">                    else if (i, j) = (2, 4) then c</span>\n<span class=\"s\">                    else if (i, j) = (3, 1) then -c</span>\n<span class=\"s\">                    else if (i, j) = (3, 2) then d</span>\n<span class=\"s\">                    else if (i, j) = (3, 3) then a</span>\n<span class=\"s\">                    else if (i, j) = (3, 4) then -b</span>\n<span class=\"s\">                    else if (i, j) = (4, 1) then -d</span>\n<span class=\"s\">                    else if (i, j) = (4, 2) then -c</span>\n<span class=\"s\">                    else if (i, j) = (4, 3) then b</span>\n<span class=\"s\">                    else if (i, j) = (4, 4) then a</span>\n<span class=\"s\">                    else 0)\"</span>\n\n\n<span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">lagrange_mat_of_4_identity</span><span class=\"o\">:</span>\n<span class=\"w\">  </span><span class=\"kp\">assumes</span><span class=\"w\"> </span><span class=\"s\">\"a ∈ ℕ\"</span><span class=\"w\"> </span><span class=\"s\">\"b ∈ ℕ\"</span><span class=\"w\"> </span><span class=\"s\">\"c ∈ ℕ\"</span><span class=\"w\"> </span><span class=\"s\">\"d ∈ ℕ\"</span>\n<span class=\"w\">  </span><span class=\"kp\">shows</span><span class=\"w\"> </span><span class=\"s\">\"(lagrange_mat_of_4 (a, b, c, d))*(lagrange_mat_of_4 (a, b, c, d))⇧T =</span>\n<span class=\"s\">        int (a^2 + b^2 + c^2 + d^2) ⋅⇩m (1⇩m (4::nat))\"</span>\n<span class=\"k\">proof</span><span class=\"w\"> </span><span class=\"o\">-</span>\n<span class=\"w\">   </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">M</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"lagrange_mat_of_4 (a, b, c, d)\"</span>\n<span class=\"w\">   </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">MT</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"transpose_mat(?M)\"</span>\n<span class=\"w\">   </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">prodM</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"?M*?MT\"</span>\n<span class=\"w\">   </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">nI</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"int (a^2 + b^2 + c^2 + d^2) ⋅⇩m (1⇩m (4::nat))\"</span>\n\n<span class=\"w\">   </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"s\">\"?prodM $$ (1,1)  =</span>\n<span class=\"s\">    a * a + b * b + c * c + d * d\"</span><span class=\"w\"> </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">algebra_simps</span><span class=\"w\"> </span><span class=\"n\">mat_eq_iff</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"kt\">sledgehammer</span>\n</code></pre></div>",
        "id": 459324877,
        "sender_full_name": "Craig Alan Feinstein",
        "timestamp": 1723164228
    },
    {
        "content": "<p>Wait a second - I just had a thought that maybe the indices are 0,1,2,3 instead of 1,2,3,4 for matrices in Isabelle? I'll try this now.</p>",
        "id": 459325427,
        "sender_full_name": "Craig Alan Feinstein",
        "timestamp": 1723164533
    },
    {
        "content": "<p>Unfortunately changing the indices had no effect. Sledgehammer still failed.</p>",
        "id": 459326060,
        "sender_full_name": "Craig Alan Feinstein",
        "timestamp": 1723164911
    },
    {
        "content": "<p>Are there any actual examples of matrix multiplication in Isabelle?</p>",
        "id": 459333313,
        "sender_full_name": "Craig Alan Feinstein",
        "timestamp": 1723168002
    },
    {
        "content": "<p>As I have never used the matrix multiplication, I cannot help you. Some general information:</p>\n<ul>\n<li>sledgehammer is not magic. Sometimes you really need to understand how the things (here matrices) you are working on are defined</li>\n<li>sledgehammer is not very good at unfolding definitions and very bad if the proofs involves <code>transfer</code>or  variants like that</li>\n<li>sledgehammer can be much slower than using <code>find_theorem</code> or the panel if you know that the theorem exists</li>\n</ul>",
        "id": 459462520,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1723207092
    },
    {
        "content": "<p>You are at the point where searching for lemmas and deciding how to prove things by hand and looking how other theorems are proved is the right way to go</p>",
        "id": 459462669,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1723207139
    },
    {
        "content": "<p>I agree that I am at a point where I need to learn how to find stuff on my own. What is find_theorem and the panel?</p>",
        "id": 459472019,
        "sender_full_name": "Craig Alan Feinstein",
        "timestamp": 1723209458
    },
    {
        "content": "<p><a href=\"https://stackoverflow.com/questions/21255473/using-find-theorems-in-isabelle\">https://stackoverflow.com/questions/21255473/using-find-theorems-in-isabelle</a> the query panel is just a front-end to the same tool</p>",
        "id": 459472331,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1723209535
    },
    {
        "content": "<p>Ok thank you</p>",
        "id": 459473359,
        "sender_full_name": "Craig Alan Feinstein",
        "timestamp": 1723209748
    },
    {
        "content": "<p>Agree 100% with Mathias advice above. To add a bit of Matrix context specifically, I found that sledgehammer wasn't great for matrix reasoning - I suspect due to the fact that you constantly need to prove the index bounds hold (i.e. that you're not reasoning on an index outside the row/column dimensions... which do go from 0). There are many lemmas that enable reasoning at the index level (e.g. index_mult_mat) which may be useful to look for in the library. You should be able to find many examples of how to use these types of lemmas and managing dimension assumptions throughout AFP entries using the JNF library - both for multiplication and other common operators.</p>",
        "id": 460047438,
        "sender_full_name": "Chelsea Edmonds",
        "timestamp": 1723457256
    },
    {
        "content": "<p>I found that Chelsea’s library about Incidence matrices in Fisher’s inequality was very helpful for working with matrices. I was able to model part of my proof on it so far.</p>",
        "id": 460115302,
        "sender_full_name": "Craig Alan Feinstein",
        "timestamp": 1723479492
    },
    {
        "content": "<p>Here is a simple question - suppose I have two 2x2 matrices, one with rows (1 2) (3 4) and the other with rows (1 3) (2 4) (which happens to be the transpose of the first). How do I efficiently prove in Isabelle that the product is (5 11) (11 25)?</p>",
        "id": 462004007,
        "sender_full_name": "Craig Alan Feinstein",
        "timestamp": 1723517426
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"736162\">@Craig Alan Feinstein</span> I have not worked with the Jordan Normal Form AFP entry, but to answer your question, it is generally good practice to develop general lemmas that will allow Isabelle's simplifier to \"reduce\" the expression from left to right. For instance, in this <a href=\"https://www.isa-afp.org/sessions/matrices_for_odes/#SQ_MTX\">AFP entry</a>, in the proof of <code>times_mtx2</code>, Isabelle only needed the simplifier because of the lemmas provided before: <code>sq_mtx_times_eq</code> and <code>sq_mtx_eq_iff</code>. Take a look at what they are saying and you could replicate the approach. Then, the lemma <code>times_mtx2</code> itself is later used for \"computation proofs\" in the lemma <code>inv_mtx_chB_hOsc</code>.</p>",
        "id": 462048486,
        "sender_full_name": "Jonathan Julian Huerta y Munive",
        "timestamp": 1723536742
    },
    {
        "content": "<p>Since you mention that you do not know the command <code>find_theorems</code> yet, perhaps this <a href=\"https://github.com/yonoteam/ipampa/blob/main/Knowing_jEdit_Interface.thy\">~1-hour exercise file</a> can help you.</p>",
        "id": 462069061,
        "sender_full_name": "Jonathan Julian Huerta y Munive",
        "timestamp": 1723543066
    },
    {
        "content": "<p>Thank you both, I’ll give them a shot.</p>",
        "id": 462239405,
        "sender_full_name": "Craig Alan Feinstein",
        "timestamp": 1723598972
    },
    {
        "content": "<p>There is still a lot of elementary things to be done with matrices in the libraries, for instance I couldn’t find a definition of a positive definite matrix.</p>",
        "id": 462379465,
        "sender_full_name": "Craig Alan Feinstein",
        "timestamp": 1723652428
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"736162\">@Craig Alan Feinstein</span>  right, <a href=\"https://behemoth.cl.cam.ac.uk/search/index.php?id=166bd368d15f92&amp;sid=166bd368d164ad&amp;query=definite&amp;kind=any&amp;method=method8\">Serapis</a> does not throw me anything useful and grepping the AFP only threw me <a href=\"https://www.isa-afp.org/entries/Three_Squares.html\">this AFP entry</a>. It would be a good exercise for whoever tries it <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 462430115,
        "sender_full_name": "Jonathan Julian Huerta y Munive",
        "timestamp": 1723676904
    },
    {
        "content": "<p>The matrix part is going well, except I cannot find a way to prove that </p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"n\">\\Sigma_</span><span class=\"ow\">{</span><span class=\"n\">i</span><span class=\"o\">=</span><span class=\"n\">1</span><span class=\"ow\">}</span><span class=\"n\">^4</span><span class=\"w\"> </span><span class=\"n\">M</span><span class=\"o\">(</span><span class=\"n\">k</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">M</span><span class=\"o\">(</span><span class=\"n\">1</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">M</span><span class=\"o\">(</span><span class=\"n\">2</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">M</span><span class=\"o\">(</span><span class=\"n\">3</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">M</span><span class=\"o\">(</span><span class=\"n\">4</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Is there a library that has definition of summations?</p>",
        "id": 462679647,
        "sender_full_name": "Craig Alan Feinstein",
        "timestamp": 1723775243
    },
    {
        "content": "<p>I know it sounds mean, but did you try to search for Sum in Isabelle or on your favorite search engine? Because on my search engine, the 4th solution points to a Sum in Isar_Examples…  Using a search engine is much faster than posting a question here…</p>",
        "id": 462700400,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1723783399
    },
    {
        "content": "<p>Of course I searched. I searched the Archive of Formal Proofs with no luck and also the Isabelle search engine with no luck, probably because I searched for “summation” and “Sigma summation”. I don’t post here if I haven’t tried myself.</p>",
        "id": 462787386,
        "sender_full_name": "Craig Alan Feinstein",
        "timestamp": 1723814838
    },
    {
        "content": "<p>I just typed “sum” in FindFacts. It didn’t give isar examples on the first page. However I’m now looking at Serapis and it looks like there is stuff that could be helpful. I’ll have to use that search engine more.</p>",
        "id": 462811941,
        "sender_full_name": "Craig Alan Feinstein",
        "timestamp": 1723822970
    },
    {
        "content": "<p>To be specific, I'm been trying get Isabelle to recognize the following with no luck. The stuff I found through searching hasn't been of any help:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"s\">\"(∑k ∈{0..&lt;4} . (?M $$ (3, k))^2) =</span>\n<span class=\"s\">            (?M $$ (3, 0))^2 + (?M $$ (3, 1))^2 +</span>\n<span class=\"s\">            (?M $$ (3, 2))^2 + (?M $$ (3, 3))^2\"</span>\n</code></pre></div>",
        "id": 462867403,
        "sender_full_name": "Craig Alan Feinstein",
        "timestamp": 1723849214
    },
    {
        "content": "<p>Typing the following into my session works</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"w\">  </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"s\">\"(∑k ∈{0..&lt;4} . f k) =</span>\n<span class=\"s\">            f 0 + f 1 + f 2 + f 3\"</span><span class=\"w\"> </span><span class=\"kp\">for</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"nat ⇒ ('a :: comm_monoid_add)\"</span>\n<span class=\"w\">    </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"n\">add</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">numeral.simps</span><span class=\"o\">(</span><span class=\"n\">2</span><span class=\"o\">,</span><span class=\"n\">3</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>If you're having syntax issues I imagine it's a matrix thing rather than a sum thing</p>",
        "id": 462951552,
        "sender_full_name": "Christian Pardillo Laursen",
        "timestamp": 1723881477
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"361261\">@Christian Pardillo Laursen</span> that worked. May I ask how you found that? I wouldn't have found that on my own.</p>",
        "id": 463081926,
        "sender_full_name": "Craig Alan Feinstein",
        "timestamp": 1723947354
    },
    {
        "content": "<p>Rule of thumb when a term is not recognized: test peaces of it in <code>term</code> to see what Isabelle does not recognize exactly. So maybe <code>term \"(∑k ∈{0..&lt;4} . (?M $$ (3, k))^2)\"</code> and <code>term \"(?M $$ (3, 0))^2 + (?M $$ (3, 1))^2 +\n            (?M $$ (3, 2))^2 + (?M $$ (3, 3))^2\"</code><br>\nUsually one of two things happen:</p>\n<ol>\n<li>you minimize the non-working term until you see exactly what the error is due to</li>\n<li>all subterm work but the overall term does not, then it is usually a type-unification or sort-unification issue (rarely, never if there are no free variable in your goal). By using <code>note [[show_sorts]]</code> look at the different sorts that are required which ones are not compatible.</li>\n</ol>",
        "id": 463451787,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1724085078
    },
    {
        "content": "<p>Is there an easy way to do the same thing in which proves (∑k ∈{m-3..&lt;m+1} . (?M <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mn>3</mn><mo separator=\"true\">,</mo><mi>k</mi><mo stretchy=\"false\">)</mo><msup><mo stretchy=\"false\">)</mo><mn>2</mn></msup><mo>=</mo><mo stretchy=\"false\">(</mo><mo stretchy=\"false\">?</mo><mi>M</mi></mrow><annotation encoding=\"application/x-tex\"> (3,k))^2 = (?M </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">3</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mclose\">)</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mclose\">?</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span></span></span></span> (3,m-3))^2 + (?M <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mn>3</mn><mo separator=\"true\">,</mo><mi>m</mi><mo>−</mo><mn>2</mn><mo stretchy=\"false\">)</mo><msup><mo stretchy=\"false\">)</mo><mn>2</mn></msup><mo>+</mo><mo stretchy=\"false\">(</mo><mo stretchy=\"false\">?</mo><mi>M</mi></mrow><annotation encoding=\"application/x-tex\"> (3,m-2))^2 + (?M </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">3</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">m</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mord\">2</span><span class=\"mclose\">)</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mclose\">?</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span></span></span></span> (3,m-1))^2 + (?M $$ (3,m))^2 ? That way only works when <code>k ∈{0..&lt;4}</code>. I could redefine the function so it works, but I was hoping there is an easier way.</p>",
        "id": 477091610,
        "sender_full_name": "Craig Alan Feinstein",
        "timestamp": 1729036939
    },
    {
        "content": "<p>find_theorem is your friend!</p>",
        "id": 477123152,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1729055076
    },
    {
        "content": "<p>I shall try it.</p>",
        "id": 477199379,
        "sender_full_name": "Craig Alan Feinstein",
        "timestamp": 1729080520
    }
]