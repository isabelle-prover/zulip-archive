[
    {
        "content": "<p>The following problem:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">theorem</span>\n  <span class=\"kp\">fixes</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">::</span><span class=\"n\">real</span>\n  <span class=\"kp\">assumes</span> <span class=\"n\">h0</span><span class=\"o\">:</span> <span class=\"s\">\"0 &lt; a ∧ 0 &lt; b ∧ 0 &lt; c\"</span>\n    <span class=\"kp\">and</span> <span class=\"n\">h1</span><span class=\"o\">:</span> <span class=\"s\">\"a * (b + c) = 152\"</span>\n    <span class=\"kp\">and</span> <span class=\"n\">h2</span><span class=\"o\">:</span> <span class=\"s\">\"b * (c + a) = 162\"</span>\n    <span class=\"kp\">and</span> <span class=\"n\">h3</span><span class=\"o\">:</span> <span class=\"s\">\"c * (a + b) = 170\"</span>\n  <span class=\"kp\">shows</span> <span class=\"s\">\"a * b * c = 720\"</span>\n</code></pre></div>\n<p>can automatically be solved by the <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#nlinarith\"><code>nlinarith</code></a> tactic in <a href=\"https://github.com/openai/miniF2F/blob/main/lean/src/test/amc12b_2002_p19.lean\">Lean</a>, where <code>nlinarith</code> extends <code>linarith</code> by having some pre-processings. In comparison, we do have the <code>linarith</code> tactic in Isabelle, while it appears that we don't have the <code>nlinarith</code> tactic yet (or do we?). </p>\n<p>Maybe we can aim to similarly extend our <code>linarith</code> tactic. Any thoughts?</p>",
        "id": 247485350,
        "sender_full_name": "Wenda Li",
        "timestamp": 1627491303
    },
    {
        "content": "<p>As far as I know there is<code>arith</code> that calls linarith, but I have no idea what it does</p>",
        "id": 247492526,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1627494539
    },
    {
        "content": "<p>I wonder what pre-processing that is. That example absolutely doesn't look linear.</p>",
        "id": 247495968,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1627495966
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/blob/6d3e93626dc338de8d107e2a45106460036c1efd/src/tactic/linarith/frontend.lean#L366\">Here</a> is the documented pre-processing steps:</p>\n<div class=\"codehilite\"><pre><span></span><code>An extension of `linarith` with some preprocessing to allow it to solve some nonlinear arithmetic\nproblems. (Based on Coq&#39;s `nra` tactic.) See `linarith` for the available syntax of options,\nwhich are inherited by `nlinarith`; that is, `nlinarith!` and `nlinarith only [h1, h2]` all work as\nin `linarith`. The preprocessing is as follows:\n* For every subterm `a ^ 2` or `a * a` in a hypothesis or the goal,\n  the assumption `0 ≤ a ^ 2` or `0 ≤ a * a` is added to the context.\n* For every pair of hypotheses `a1 R1 b1`, `a2 R2 b2` in the context, `R1, R2 ∈ {&lt;, ≤, =}`,\n  the assumption `0 R&#39; (b1 - a1) * (b2 - a2)` is added to the context (non-recursively),\n  where `R ∈ {&lt;, ≤, =}` is the appropriate comparison derived from `R1, R2`.\n</code></pre></div>\n<p>I have a rough idea about how it works, but am still quite amazed by the fact that it can solve the example above automatically.</p>",
        "id": 247545689,
        "sender_full_name": "Wenda Li",
        "timestamp": 1627536188
    },
    {
        "content": "<p>By the way you can use <code>set_option trace.linarith true</code> to see what <code>(n)linarith</code> is doing. For your example, <code>linarith</code> generates the following facts</p>\n<div class=\"codehilite\"><pre><span></span><code>[a * b * c - 720 &lt; 0,\n -c &lt; 0,\n -b &lt; 0,\n -a &lt; 0,\n c * (a + b) - 170 = 0,\n b * (c + a) - 162 = 0,\n a * (b + c) - 152 = 0]\n</code></pre></div>\n<p>The pre-processing stage specific to <code>nlinarith</code> is run after the general <code>linarith</code> pre-precessing, and after running the <code>nlinarith</code> specific pre-processing, <code>nlinarith</code> has the following facts</p>\n<div class=\"codehilite\"><pre><span></span><code>[a * b * c - 720 &lt; 0,\n -c &lt; 0,\n -b &lt; 0,\n -a &lt; 0,\n c * (a + b) - 170 = 0,\n b * (c + a) - 162 = 0,\n a * (b + c) - 152 = 0,\n (a * (b + c) - 152) * (a * (b + c) - 152) = 0,\n (b * (c + a) - 162) * (a * (b + c) - 152) = 0,\n (b * (c + a) - 162) * (b * (c + a) - 162) = 0,\n (c * (a + b) - 170) * (a * (b + c) - 152) = 0,\n (c * (a + b) - 170) * (b * (c + a) - 162) = 0,\n (c * (a + b) - 170) * (c * (a + b) - 170) = 0,\n -a * (a * (b + c) - 152) = 0,\n -a * (b * (c + a) - 162) = 0,\n -a * (c * (a + b) - 170) = 0,\n -(-a * -a) &lt; 0,\n -b * (a * (b + c) - 152) = 0,\n -b * (b * (c + a) - 162) = 0,\n -b * (c * (a + b) - 170) = 0,\n -(-b * -a) &lt; 0,\n -(-b * -b) &lt; 0,\n -c * (a * (b + c) - 152) = 0,\n -c * (b * (c + a) - 162) = 0,\n -c * (c * (a + b) - 170) = 0,\n -(-c * -a) &lt; 0,\n -(-c * -b) &lt; 0,\n -(-c * -c) &lt; 0,\n (a * b * c - 720) * (a * (b + c) - 152) = 0,\n (a * b * c - 720) * (b * (c + a) - 162) = 0,\n (a * b * c - 720) * (c * (a + b) - 170) = 0,\n -((a * b * c - 720) * -a) &lt; 0,\n -((a * b * c - 720) * -b) &lt; 0,\n -((a * b * c - 720) * -c) &lt; 0,\n -((a * b * c - 720) * (a * b * c - 720)) &lt; 0]\n</code></pre></div>",
        "id": 247578026,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1627562870
    },
    {
        "content": "<p>Thank you so much <span class=\"user-mention\" data-user-id=\"423098\">@Shing Tak Lam</span>. The trace information truly helps!</p>",
        "id": 247689162,
        "sender_full_name": "Wenda Li",
        "timestamp": 1627639556
    }
]