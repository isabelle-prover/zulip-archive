[
    {
        "content": "<p>In <a href=\"https://isabelle.in.tum.de/dist/library/HOL/HOL-Analysis/Derivative.html\" target=\"_blank\" title=\"https://isabelle.in.tum.de/dist/library/HOL/HOL-Analysis/Derivative.html\">Derivative.thy</a> there are the partial derivatives of a function of 2 variables (see for instance the proposition <code>has_derivative_partialsI</code>). Has Isabelle ready-made code for the partial derivatives of a function of n variables, for instance with <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>f</mi><mo>:</mo><msup><mi mathvariant=\"double-struck\">R</mi><mi>n</mi></msup><mo>→</mo><mi mathvariant=\"double-struck\">R</mi></mrow><annotation encoding=\"application/x-tex\">f:\\mathbb{R}^n \\rightarrow \\mathbb{R}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathbb\">R</span></span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">R</span></span></span></span></span>?</p>",
        "id": 179623360,
        "sender_full_name": "Anthony Bordg",
        "timestamp": 1572613177
    },
    {
        "content": "<p>I can do it as follows.</p>\n<div class=\"codehilite\"><pre><span></span>locale partial_deriv =\n  fixes n:: nat and f:: &quot;real list ⇒ real&quot; and l:: &quot;real list&quot;\n  assumes length_list: &quot;length l = n&quot;\nand Dxif: &quot;∀i&lt;n.∃Dxif.∀x. ((λxi. f (list_update l i xi)) has_derivative Dxif) (at x within UNIV)&quot;\n</pre></div>\n\n\n<p>Since there is no dependent type <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msup><mi mathvariant=\"double-struck\">R</mi><mi>n</mi></msup></mrow><annotation encoding=\"application/x-tex\">\\mathbb{R}^n</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathbb\">R</span></span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span></span></span></span></span></span></span></span> in Isabelle, the code above is a bit convoluted, but it does the trick. I would be interested if someone knows a better way to do it.</p>",
        "id": 180108752,
        "sender_full_name": "Anthony Bordg",
        "timestamp": 1573111854
    },
    {
        "content": "<p>I once did the following (<a href=\"https://www.isa-afp.org/browser_info/current/AFP/Ordinary_Differential_Equations/ODE_Auxiliarities.html\" target=\"_blank\" title=\"https://www.isa-afp.org/browser_info/current/AFP/Ordinary_Differential_Equations/ODE_Auxiliarities.html\">https://www.isa-afp.org/browser_info/current/AFP/Ordinary_Differential_Equations/ODE_Auxiliarities.html</a>):</p>\n<div class=\"codehilite\"><pre><span></span>lemma has_derivative_partials_euclidean_convexI:\n  fixes f::&quot;&#39;a::euclidean_space ⇒ &#39;b::real_normed_vector&quot;\n  assumes f&#39;: &quot;⋀i x xi. i ∈ Basis ⟹ (∀j∈Basis. x ∙ j ∈ X j) ⟹ xi = x ∙ i ⟹\n    ((λp. f (x + (p - x ∙ i) *⇩R i)) has_vector_derivative f&#39; i x) (at xi within X i)&quot;\n  assumes df_cont: &quot;⋀i. i ∈ Basis ⟹ (f&#39; i ⤏ (f&#39; i x)) (at x within {x. ∀j∈Basis. x ∙ j ∈ X j})&quot;\n  assumes &quot;⋀i. i ∈ Basis ⟹ x ∙ i ∈ X i&quot;\n  assumes &quot;⋀i. i ∈ Basis ⟹ convex (X i)&quot;\n  shows &quot;(f has_derivative (λh. ∑j∈Basis. (h ∙ j) *⇩R f&#39; j x)) (at x within {x. ∀j∈Basis. x ∙ j ∈ X j})&quot;\n    (is &quot;_ (at x within ?S)&quot;)\n</pre></div>\n\n\n<p>It could make sense to define something like \"(has_partial_derivative)\" and develop a library about it.</p>\n<p>But in my experience, it often makes sense to avoid dealing with partial derivatives and just use the total derivative:<br>\nOften, one assumes continuous partial derivatives, and then the above theorem shows that you get a total derivative from that, so why not use the easier (to work with) total derivative in the first place.</p>",
        "id": 180140040,
        "sender_full_name": "Fabian Immler",
        "timestamp": 1573138888
    },
    {
        "content": "<p>Thank you Fabian for pointing out the possible use of euclidean space here.</p>",
        "id": 180438408,
        "sender_full_name": "Anthony Bordg",
        "timestamp": 1573490386
    }
]