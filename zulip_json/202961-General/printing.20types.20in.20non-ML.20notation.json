[
    {
        "content": "<p>Hello all,</p>\n<p>I'm surely working against the pretty-printing and syntax but what I found in Pure/HOL/AFP does not seems to address this issue I am facing.</p>\n<p>I want to print a type in postfix notation, e.g. option 'a, in place of prefix notation.</p>\n<p>After spelunking in pure_theory.ML I got to the syntax definition for type application and I can override the normal syntax with mine for a custom print mode.</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">syntax</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">pvl</span><span class=\"w\"> </span><span class=\"kp\">output</span><span class=\"o\">)</span>\n<span class=\"w\">    </span><span class=\"s\">\"_tapp\"</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"type =&gt; type_name =&gt; type\"</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"s\">\"(1_&lt;_&gt;)\"</span><span class=\"o\">)</span>\n\n<span class=\"kt\">typ</span><span class=\"w\"> </span><span class=\"s\">\"'a option\"</span><span class=\"w\">            </span><span class=\"c\">(* prints as 'a option    *)</span>\n<span class=\"kt\">typ</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">pvl</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"s\">\"'a option\"</span><span class=\"w\"> </span><span class=\"c\">(* prints as 'a&lt;option&gt; *)</span>\n</code></pre></div>\n<p>I cannot exchange the order of in the mixfix declaration but I can declare a new pattern _pvl_tapp and a translation from _tapp to _pvl_tapp.</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">syntax</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">pvl</span><span class=\"w\"> </span><span class=\"kp\">output</span><span class=\"o\">)</span>\n<span class=\"w\">    </span><span class=\"s\">\"_pvl_tapp\"</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\" type_name =&gt; type =&gt; type\"</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"s\">\"(1_&lt;_&gt;)\"</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"c\">(* note inversion of type_name and type in production *)</span>\n\n<span class=\"kt\">typ</span><span class=\"w\"> </span><span class=\"s\">\"'a option\"</span><span class=\"w\">            </span><span class=\"c\">(* prints as 'a option    *)</span>\n<span class=\"kt\">typ</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">pvl</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"s\">\"'a option\"</span><span class=\"w\"> </span><span class=\"c\">(* prints as 'a option, expected as I have no translation yet *)</span>\n\n<span class=\"n\">translation</span>\n<span class=\"w\">  </span><span class=\"s\">\"_pvl_tapp tc ty\"</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"s\">\"_tapp ty tc\"</span>\n\n\n<span class=\"kt\">typ</span><span class=\"w\"> </span><span class=\"s\">\"'a option\"</span><span class=\"w\">            </span><span class=\"c\">(* prints as 'a option    *)</span>\n<span class=\"kt\">typ</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">pvl</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"s\">\"'a option\"</span><span class=\"w\"> </span><span class=\"c\">(* prints as 'a option *)</span>\n</code></pre></div>\n<p>I even got as far as looking at type_syntax but that binds one syntax constant to one type or type synonym.<br>\nDecorating the translation with the (type) qualifier (?) yields the error <code>Undefined type name: \"_pvl_tapp\"</code>, example below.</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"w\"> </span><span class=\"n\">translation</span>\n<span class=\"w\">  </span><span class=\"o\">(</span><span class=\"n\">type</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"s\">\"_pvl_tapp tc ty\"</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">type</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"s\">\"_tapp ty tc\"</span>\n</code></pre></div>\n<p>Is this use-case supported in any way? It's also unclear how to interface with the type pretty printing and I cannot find anybody attempting this.</p>\n<p>The second question is, it there a way to scope translations to one printing mode? In the previous example the translation from _tapp to _pvl_tapp makes no sense in normal output so it should be ignored by the system, which is what I am observing now.</p>",
        "id": 548112558,
        "sender_full_name": "Edoardo Putti",
        "timestamp": 1761903256
    },
    {
        "content": "<p>Your approach looks good and I am not sure why it is not working. You might have more luck asking on the mailing list.</p>",
        "id": 548122237,
        "sender_full_name": "Lukas Stevens",
        "timestamp": 1761906400
    }
]