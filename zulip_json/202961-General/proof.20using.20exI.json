[
    {
        "content": "<p>I'm now trying to do my first existential proof in Isabelle. I have proven <code>\nhave \"e0 ∈ ℚ ∧ e1 ∈ ℚ ∧ e2 ∈ ℚ ∧ e3 ∈ ℚ ∧ \n    (∑h ∈ {0..&lt;m}. N $$ (h,i) * x $$ (h,0)) = \n    e0 * ?y0 + e1 * ?y1 + e2 * ?y2 + e3 * ?y3 +\n    (∑h ∈ {4..&lt;m}. N $$ (h,i) * x $$ (h,0))\" using eq2 by simp</code><br>\nI want to prove <code>\n\"∃e0 e1 e2 e3. e0 ∈ ℚ ∧ e1 ∈ ℚ ∧ e2 ∈ ℚ ∧ e3 ∈ ℚ ∧ \n    (∑h ∈ {0..&lt;m}. N $$ (h,i) * x $$ (h,0)) = \n    e0 * one_of(y_of((a, b, c, d),(x0, x1, x2, x3))) +\n    e1 * two_of(y_of((a, b, c, d),(x0, x1, x2, x3))) +\n    e2 * three_of(y_of((a, b, c, d),(x0, x1, x2, x3))) +\n    e3 * four_of(y_of((a, b, c, d),(x0, x1, x2, x3))) +\n    (∑h ∈ {4..&lt;m}. N $$ (h,i) * x $$ (h,0))\"</code><br>\nLooking at the reference manual, I found exI and tried using it in the proof, but it didn't accept it. This seems like a straight-forward application. Is the fact that I have four variables e0, e1, e2, e3 instead of one variable the problem?</p>",
        "id": 483598537,
        "sender_full_name": "Craig Alan Feinstein",
        "timestamp": 1732150904
    },
    {
        "content": "<p>I forgot to mention this definition:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"w\"> </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">y0</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"one_of(y_of((a, b, c, d),(x0, x1, x2, x3)))\"</span>\n<span class=\"w\">  </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">y1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"two_of(y_of((a, b, c, d),(x0, x1, x2, x3)))\"</span>\n<span class=\"w\">  </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">y2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"three_of(y_of((a, b, c, d),(x0, x1, x2, x3)))\"</span>\n<span class=\"w\">  </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">y3</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"four_of(y_of((a, b, c, d),(x0, x1, x2, x3)))\"</span>\n</code></pre></div>",
        "id": 483600029,
        "sender_full_name": "Craig Alan Feinstein",
        "timestamp": 1732151848
    },
    {
        "content": "<p>So it is really just a case of P(e0 e1 e2 e3) implies there exists e0 e1 e2 e3 such that P(e0 e1 e2 e3)</p>",
        "id": 483600176,
        "sender_full_name": "Craig Alan Feinstein",
        "timestamp": 1732151939
    },
    {
        "content": "<p>maybe just press <code>sledgehammer</code> and see what if gives you?</p>",
        "id": 483600181,
        "sender_full_name": "Yong Kiam",
        "timestamp": 1732151941
    },
    {
        "content": "<p>I tried sledgehammering with no luck</p>",
        "id": 483600212,
        "sender_full_name": "Craig Alan Feinstein",
        "timestamp": 1732151959
    },
    {
        "content": "<p>huh, then something's probably off then</p>",
        "id": 483600263,
        "sender_full_name": "Yong Kiam",
        "timestamp": 1732151998
    },
    {
        "content": "<p>Assuming I did everything correctly, should exI work?</p>",
        "id": 483600366,
        "sender_full_name": "Craig Alan Feinstein",
        "timestamp": 1732152059
    },
    {
        "content": "<p>I think so, but you may need to apply it multiple times</p>",
        "id": 483600424,
        "sender_full_name": "Yong Kiam",
        "timestamp": 1732152104
    },
    {
        "content": "<p>Can you please give an example of how to apply it multiple times?</p>",
        "id": 483600524,
        "sender_full_name": "Craig Alan Feinstein",
        "timestamp": 1732152157
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">intro</span><span class=\"w\"> </span><span class=\"n\">exI</span><span class=\"o\">[</span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"ow\">...</span><span class=\"o\">])</span>\n<span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">intro</span><span class=\"w\"> </span><span class=\"n\">exI</span><span class=\"o\">[</span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"ow\">...</span><span class=\"o\">])</span>\n</code></pre></div>\n<p>I guess</p>",
        "id": 483600574,
        "sender_full_name": "Yong Kiam",
        "timestamp": 1732152196
    },
    {
        "content": "<p>What do the three dots represent in this instance?</p>",
        "id": 483600765,
        "sender_full_name": "Craig Alan Feinstein",
        "timestamp": 1732152324
    },
    {
        "content": "<p>oh just something you should write to instantiate the <code>exI</code></p>",
        "id": 483600795,
        "sender_full_name": "Yong Kiam",
        "timestamp": 1732152345
    },
    {
        "content": "<p>I just tried this with no luck, where ?thesis is what I want to prove:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">thus</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">thesis</span><span class=\"w\"> </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">intro</span><span class=\"w\"> </span><span class=\"n\">exI</span><span class=\"o\">[</span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">e0</span><span class=\"w\"> </span><span class=\"n\">e1</span><span class=\"w\"> </span><span class=\"n\">e2</span><span class=\"w\"> </span><span class=\"n\">e3</span><span class=\"o\">])</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"kt\">sledgehammer</span>\n</code></pre></div>",
        "id": 483601341,
        "sender_full_name": "Craig Alan Feinstein",
        "timestamp": 1732152650
    },
    {
        "content": "<p>that should give you an error</p>",
        "id": 483601381,
        "sender_full_name": "Yong Kiam",
        "timestamp": 1732152681
    },
    {
        "content": "<p>I'm not sure how to do it with apply.</p>",
        "id": 483601531,
        "sender_full_name": "Craig Alan Feinstein",
        "timestamp": 1732152772
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"o\">:</span>\n<span class=\"w\">  </span><span class=\"kp\">assumes</span><span class=\"w\"> </span><span class=\"s\">\"P a0 a1 a2 a3\"</span>\n<span class=\"w\">  </span><span class=\"kp\">shows</span><span class=\"w\"> </span><span class=\"s\">\"∃a0 a1 a2 a3. P a0 a1 a2 a3\"</span>\n<span class=\"w\">  </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">intro</span><span class=\"w\"> </span><span class=\"n\">exI</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 483601587,
        "sender_full_name": "Yong Kiam",
        "timestamp": 1732152813
    },
    {
        "content": "<p>look at the goal state afterwards</p>",
        "id": 483601605,
        "sender_full_name": "Yong Kiam",
        "timestamp": 1732152832
    },
    {
        "content": "<p>I see. I'll try that. Thank you.</p>",
        "id": 483601714,
        "sender_full_name": "Craig Alan Feinstein",
        "timestamp": 1732152902
    },
    {
        "content": "<p>For this kind of cases you want unify_trace_failure</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"w\">  </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">intro</span><span class=\"w\"> </span><span class=\"n\">exI</span><span class=\"o\">[</span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"o\">_</span><span class=\"w\"> </span><span class=\"n\">e1</span><span class=\"o\">])</span>\n<span class=\"w\">  </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">intro</span><span class=\"w\"> </span><span class=\"n\">exI</span><span class=\"o\">[</span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"o\">_</span><span class=\"w\"> </span><span class=\"n\">e2</span><span class=\"o\">])</span>\n<span class=\"w\">  </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">intro</span><span class=\"w\"> </span><span class=\"n\">exI</span><span class=\"o\">[</span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"o\">_</span><span class=\"w\"> </span><span class=\"n\">e3</span><span class=\"o\">])</span>\n<span class=\"w\">  </span><span class=\"n\">supply</span><span class=\"w\"> </span><span class=\"o\">[[</span><span class=\"n\">unify_trace_failure</span><span class=\"o\">]]</span>\n<span class=\"w\">  </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">rule</span><span class=\"w\"> </span><span class=\"n\">assumption_with_e1_e2_e2</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 483623146,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1732169169
    },
    {
        "content": "<p>thank you, I found another way to prove my lemma without even using the existence proof. However, I will need to do an existence proof in my main theorem, so this should help.</p>",
        "id": 483805889,
        "sender_full_name": "Craig Alan Feinstein",
        "timestamp": 1732230672
    },
    {
        "content": "<p>It turns out that definitely I will need to do at least five existence proofs, including the one I originally tried. I have been learning Isabelle mostly from the Fisher’s Inequality section of the archive of formal proofs, which doesn’t use “apply”, so this is all new to me. Are there any sections where you would recommend I learn “apply”.</p>",
        "id": 484116121,
        "sender_full_name": "Craig Alan Feinstein",
        "timestamp": 1732417446
    },
    {
        "content": "<p>Or is there a way to do it without using “apply”?</p>",
        "id": 484120541,
        "sender_full_name": "Craig Alan Feinstein",
        "timestamp": 1732422479
    },
    {
        "content": "<p>apply is the best way to debug why auto or sledgehammer does not work</p>",
        "id": 484130513,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1732433054
    },
    {
        "content": "<p>With unify_trace_failure, you should reach the point where the error will tell you why the instantiation does not work</p>",
        "id": 484130547,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1732433109
    },
    {
        "content": "<p>(type classes being different, an equality being reversed -- unlikely but possible)</p>",
        "id": 484130575,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1732433151
    },
    {
        "content": "<p>You can work-around it with commas:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"w\">  </span><span class=\"n\">supply</span><span class=\"w\"> </span><span class=\"o\">[[</span><span class=\"n\">unify_trace_failure</span><span class=\"o\">]]</span>\n<span class=\"w\">  </span><span class=\"k\">by</span><span class=\"w\">  </span><span class=\"o\">(</span><span class=\"n\">rule</span><span class=\"w\"> </span><span class=\"n\">exI</span><span class=\"o\">[</span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"o\">_</span><span class=\"w\"> </span><span class=\"n\">e1</span><span class=\"o\">],</span><span class=\"w\">  </span><span class=\"n\">rule</span><span class=\"w\"> </span><span class=\"n\">exI</span><span class=\"o\">[</span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"o\">_</span><span class=\"w\"> </span><span class=\"n\">e2</span><span class=\"o\">],</span><span class=\"w\"> </span><span class=\"n\">rule</span><span class=\"w\"> </span><span class=\"n\">exI</span><span class=\"o\">[</span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"o\">_</span><span class=\"w\"> </span><span class=\"n\">e5</span><span class=\"o\">],</span><span class=\"w\"> </span><span class=\"n\">rule</span><span class=\"w\"> </span><span class=\"n\">assumption_with_e1_e2_e2</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>but this will produce more output as rule will also produce unification failures</p>",
        "id": 484130966,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1732433583
    },
    {
        "content": "<p>I just tried</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"w\">  </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"s\">\"e0 ∈ ℚ ∧ e1 ∈ ℚ ∧ e2 ∈ ℚ ∧ e3 ∈ ℚ ∧</span>\n<span class=\"s\">    (∑h ∈ {0..&lt;m}. N $$ (h,i) * x $$ (h,0)) =</span>\n<span class=\"s\">    e0 * ?y0 + e1 * ?y1 + e2 * ?y2 + e3 * ?y3 +</span>\n<span class=\"s\">    (∑h ∈ {4..&lt;m}. N $$ (h,i) * x $$ (h,0))\"</span><span class=\"w\"> </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">eq2</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">simp</span>\n<span class=\"w\">  </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">intro</span><span class=\"w\"> </span><span class=\"n\">exI</span><span class=\"o\">[</span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"o\">_</span><span class=\"w\"> </span><span class=\"n\">e0</span><span class=\"o\">])</span>\n<span class=\"w\">  </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">intro</span><span class=\"w\"> </span><span class=\"n\">exI</span><span class=\"o\">[</span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"o\">_</span><span class=\"w\"> </span><span class=\"n\">e1</span><span class=\"o\">])</span>\n<span class=\"w\">  </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">intro</span><span class=\"w\"> </span><span class=\"n\">exI</span><span class=\"o\">[</span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"o\">_</span><span class=\"w\"> </span><span class=\"n\">e2</span><span class=\"o\">])</span>\n<span class=\"w\">  </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">intro</span><span class=\"w\"> </span><span class=\"n\">exI</span><span class=\"o\">[</span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"o\">_</span><span class=\"w\"> </span><span class=\"n\">e3</span><span class=\"o\">])</span>\n<span class=\"w\">  </span><span class=\"n\">supply</span><span class=\"w\"> </span><span class=\"o\">[[</span><span class=\"n\">unify_trace_failure</span><span class=\"o\">]]</span>\n<span class=\"w\">  </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">rule</span><span class=\"w\"> </span><span class=\"n\">assumption_with_e0_e1_e2_e3</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>it gave me \"Illegal application of proof command in \"state\" mode\" I also tried:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"w\">  </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"s\">\"e0 ∈ ℚ ∧ e1 ∈ ℚ ∧ e2 ∈ ℚ ∧ e3 ∈ ℚ ∧</span>\n<span class=\"s\">    (∑h ∈ {0..&lt;m}. N $$ (h,i) * x $$ (h,0)) =</span>\n<span class=\"s\">    e0 * ?y0 + e1 * ?y1 + e2 * ?y2 + e3 * ?y3 +</span>\n<span class=\"s\">    (∑h ∈ {4..&lt;m}. N $$ (h,i) * x $$ (h,0))\"</span><span class=\"w\"> </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">eq2</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">simp</span>\n<span class=\"w\">   </span><span class=\"n\">supply</span><span class=\"w\"> </span><span class=\"o\">[[</span><span class=\"n\">unify_trace_failure</span><span class=\"o\">]]</span>\n<span class=\"w\">    </span><span class=\"k\">by</span><span class=\"w\">  </span><span class=\"o\">(</span><span class=\"n\">rule</span><span class=\"w\"> </span><span class=\"n\">exI</span><span class=\"o\">[</span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"o\">_</span><span class=\"w\"> </span><span class=\"n\">e0</span><span class=\"o\">],</span><span class=\"w\">  </span><span class=\"n\">rule</span><span class=\"w\"> </span><span class=\"n\">exI</span><span class=\"o\">[</span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"o\">_</span><span class=\"w\"> </span><span class=\"n\">e1</span><span class=\"o\">],</span><span class=\"w\"> </span><span class=\"n\">rule</span><span class=\"w\"> </span><span class=\"n\">exI</span><span class=\"o\">[</span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"o\">_</span><span class=\"w\"> </span><span class=\"n\">e2</span><span class=\"o\">],</span><span class=\"w\"> </span><span class=\"n\">rule</span><span class=\"w\"> </span><span class=\"n\">exI</span><span class=\"o\">[</span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"o\">_</span><span class=\"w\"> </span><span class=\"n\">e3</span><span class=\"o\">],</span>\n<span class=\"w\">        </span><span class=\"n\">rule</span><span class=\"w\"> </span><span class=\"n\">assumption_with_e0_e1_e2_e3</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>and got the same thing \"Illegal application of proof command in \"state\" mode\"</p>",
        "id": 484168686,
        "sender_full_name": "Craig Alan Feinstein",
        "timestamp": 1732471112
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"w\">  </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"ow\">...</span>\n<span class=\"w\">    </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">simp</span>\n<span class=\"w\">   </span><span class=\"n\">supply</span><span class=\"w\"> </span><span class=\"o\">[[</span><span class=\"n\">unify_trace_failure</span><span class=\"o\">]]</span>\n<span class=\"w\">    </span><span class=\"k\">by</span><span class=\"w\">  </span><span class=\"o\">(</span><span class=\"n\">rule</span><span class=\"w\"> </span><span class=\"n\">exI</span><span class=\"o\">[</span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"o\">_</span><span class=\"w\"> </span><span class=\"n\">e0</span><span class=\"o\">],</span><span class=\"w\">  </span><span class=\"n\">rule</span><span class=\"w\"> </span><span class=\"n\">exI</span><span class=\"o\">[</span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"o\">_</span><span class=\"w\"> </span><span class=\"n\">e1</span><span class=\"o\">],</span><span class=\"w\"> </span><span class=\"n\">rule</span><span class=\"w\"> </span><span class=\"n\">exI</span><span class=\"o\">[</span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"o\">_</span><span class=\"w\"> </span><span class=\"n\">e2</span><span class=\"o\">],</span><span class=\"w\"> </span><span class=\"n\">rule</span><span class=\"w\"> </span><span class=\"n\">exI</span><span class=\"o\">[</span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"o\">_</span><span class=\"w\"> </span><span class=\"n\">e3</span><span class=\"o\">],</span>\n<span class=\"w\">        </span><span class=\"n\">rule</span><span class=\"w\"> </span><span class=\"n\">assumption_with_e0_e1_e2_e3</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 484168905,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1732471306
    },
    {
        "content": "<p>you cannot have two bys</p>",
        "id": 484168923,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1732471315
    },
    {
        "content": "<p>And this is not the place where I suggested putting it</p>",
        "id": 484171291,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1732473554
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">thesis</span>\n<span class=\"w\">   </span><span class=\"n\">supply</span><span class=\"w\"> </span><span class=\"ow\">...</span>\n<span class=\"w\">   </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"ow\">...</span>\n</code></pre></div>",
        "id": 484171305,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1732473584
    },
    {
        "content": "<p>Do you mean this?</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"w\">  </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"n\">final_eq</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"e0 ∈ ℚ ∧ e1 ∈ ℚ ∧ e2 ∈ ℚ ∧ e3 ∈ ℚ ∧</span>\n<span class=\"s\">    (∑h ∈ {0..&lt;m}. N $$ (h,i) * x $$ (h,0)) =</span>\n<span class=\"s\">    e0 * ?y0 + e1 * ?y1 + e2 * ?y2 + e3 * ?y3 +</span>\n<span class=\"s\">    (∑h ∈ {4..&lt;m}. N $$ (h,i) * x $$ (h,0))\"</span><span class=\"w\"> </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">eq2</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">simp</span>\n<span class=\"w\">  </span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">thesis</span>\n<span class=\"w\">   </span><span class=\"n\">supply</span><span class=\"w\"> </span><span class=\"o\">[[</span><span class=\"n\">unify_trace_failure</span><span class=\"o\">]]</span>\n<span class=\"w\">    </span><span class=\"k\">by</span><span class=\"w\">  </span><span class=\"o\">(</span><span class=\"n\">rule</span><span class=\"w\"> </span><span class=\"n\">exI</span><span class=\"o\">[</span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"o\">_</span><span class=\"w\"> </span><span class=\"n\">e0</span><span class=\"o\">],</span><span class=\"w\">  </span><span class=\"n\">rule</span><span class=\"w\"> </span><span class=\"n\">exI</span><span class=\"o\">[</span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"o\">_</span><span class=\"w\"> </span><span class=\"n\">e1</span><span class=\"o\">],</span><span class=\"w\"> </span><span class=\"n\">rule</span><span class=\"w\"> </span><span class=\"n\">exI</span><span class=\"o\">[</span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"o\">_</span><span class=\"w\"> </span><span class=\"n\">e2</span><span class=\"o\">],</span><span class=\"w\"> </span><span class=\"n\">rule</span><span class=\"w\"> </span><span class=\"n\">exI</span><span class=\"o\">[</span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"o\">_</span><span class=\"w\"> </span><span class=\"n\">e3</span><span class=\"o\">],</span>\n<span class=\"w\">        </span><span class=\"n\">rule</span><span class=\"w\"> </span><span class=\"n\">assumption_with_e0_e1_e2_e3</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>I tried it but got \"Undefined fact: \"assumption_with_e0_e1_e2_e3\" <br>\n?thesis is:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"s\">\"∃e0 e1 e2 e3. e0 ∈ ℚ ∧ e1 ∈ ℚ ∧ e2 ∈ ℚ ∧ e3 ∈ ℚ ∧</span>\n<span class=\"s\">    (∑h ∈ {0..&lt;m}. N $$ (h,i) * x $$ (h,0)) =</span>\n<span class=\"s\">    e0 * one_of(y_of((a, b, c, d),(x0, x1, x2, x3))) +</span>\n<span class=\"s\">    e1 * two_of(y_of((a, b, c, d),(x0, x1, x2, x3))) +</span>\n<span class=\"s\">    e2 * three_of(y_of((a, b, c, d),(x0, x1, x2, x3))) +</span>\n<span class=\"s\">    e3 * four_of(y_of((a, b, c, d),(x0, x1, x2, x3))) +</span>\n<span class=\"s\">    (∑h ∈ {4..&lt;m}. N $$ (h,i) * x $$ (h,0))\"</span>\n</code></pre></div>",
        "id": 484186483,
        "sender_full_name": "Craig Alan Feinstein",
        "timestamp": 1732488735
    },
    {
        "content": "<p><code>assumption_with_e0_e1_e2_e3</code> should be <code>final_eq</code> (you did not provide the name so far…)</p>",
        "id": 484215929,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1732514233
    },
    {
        "content": "<p>I just replaced it with</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\">  </span><span class=\"o\">(</span><span class=\"n\">rule</span><span class=\"w\"> </span><span class=\"n\">exI</span><span class=\"o\">[</span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"o\">_</span><span class=\"w\"> </span><span class=\"n\">e0</span><span class=\"o\">],</span><span class=\"w\">  </span><span class=\"n\">rule</span><span class=\"w\"> </span><span class=\"n\">exI</span><span class=\"o\">[</span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"o\">_</span><span class=\"w\"> </span><span class=\"n\">e1</span><span class=\"o\">],</span><span class=\"w\"> </span><span class=\"n\">rule</span><span class=\"w\"> </span><span class=\"n\">exI</span><span class=\"o\">[</span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"o\">_</span><span class=\"w\"> </span><span class=\"n\">e2</span><span class=\"o\">],</span><span class=\"w\"> </span><span class=\"n\">rule</span><span class=\"w\"> </span><span class=\"n\">exI</span><span class=\"o\">[</span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"o\">_</span><span class=\"w\"> </span><span class=\"n\">e3</span><span class=\"o\">],</span>\n<span class=\"w\">        </span><span class=\"n\">final_eq</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>I got \"Undefined method: \"final_eq\"⌂\"</p>",
        "id": 484301461,
        "sender_full_name": "Craig Alan Feinstein",
        "timestamp": 1732541625
    },
    {
        "content": "<p>rule final_eq</p>",
        "id": 484345580,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1732552456
    },
    {
        "content": "<p>I got a better message, but not sure what it means.</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"n\">No</span><span class=\"w\"> </span><span class=\"n\">subgoals</span><span class=\"o\">!</span>\n<span class=\"n\">The</span><span class=\"w\"> </span><span class=\"n\">following</span><span class=\"w\"> </span><span class=\"n\">types</span><span class=\"w\"> </span><span class=\"n\">do</span><span class=\"w\"> </span><span class=\"n\">not</span><span class=\"w\"> </span><span class=\"n\">unify</span><span class=\"o\">:</span>\n<span class=\"o\">(</span><span class=\"n\">real</span><span class=\"w\"> </span><span class=\"n\">⇒</span><span class=\"w\"> </span><span class=\"n\">bool</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">⇒</span><span class=\"w\"> </span><span class=\"n\">bool</span>\n<span class=\"o\">(</span><span class=\"n\">rat</span><span class=\"w\"> </span><span class=\"n\">⇒</span><span class=\"w\"> </span><span class=\"n\">bool</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">⇒</span><span class=\"w\"> </span><span class=\"n\">bool</span>\n<span class=\"n\">Failed</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"n\">initial</span><span class=\"w\"> </span><span class=\"k\">proof</span><span class=\"w\"> </span><span class=\"n\">method⌂</span><span class=\"o\">:</span>\n<span class=\"n\">goal</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">1</span><span class=\"w\"> </span><span class=\"n\">subgoal</span><span class=\"o\">):</span>\n<span class=\"w\"> </span><span class=\"n\">1.</span><span class=\"w\"> </span><span class=\"n\">∃e0</span><span class=\"w\"> </span><span class=\"n\">e1</span><span class=\"w\"> </span><span class=\"n\">e2</span><span class=\"w\"> </span><span class=\"n\">e3.</span>\n<span class=\"w\">       </span><span class=\"n\">e0</span><span class=\"w\"> </span><span class=\"n\">∈</span><span class=\"w\"> </span><span class=\"n\">ℚ</span><span class=\"w\"> </span><span class=\"n\">∧</span>\n<span class=\"w\">       </span><span class=\"n\">e1</span><span class=\"w\"> </span><span class=\"n\">∈</span><span class=\"w\"> </span><span class=\"n\">ℚ</span><span class=\"w\"> </span><span class=\"n\">∧</span>\n<span class=\"w\">       </span><span class=\"n\">e2</span><span class=\"w\"> </span><span class=\"n\">∈</span><span class=\"w\"> </span><span class=\"n\">ℚ</span><span class=\"w\"> </span><span class=\"n\">∧</span>\n<span class=\"w\">       </span><span class=\"n\">e3</span><span class=\"w\"> </span><span class=\"n\">∈</span><span class=\"w\"> </span><span class=\"n\">ℚ</span><span class=\"w\"> </span><span class=\"n\">∧</span>\n<span class=\"w\">       </span><span class=\"n\">complex_of_int</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">∑h</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">0..&lt;m.</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"w\"> </span><span class=\"n\">$$</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">*</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">$$</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">0</span><span class=\"o\">))</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">       </span><span class=\"n\">complex_of_rat</span>\n<span class=\"w\">        </span><span class=\"o\">(</span><span class=\"n\">e0</span><span class=\"w\"> </span><span class=\"n\">*</span><span class=\"w\"> </span><span class=\"n\">one_of</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">y_of</span><span class=\"w\"> </span><span class=\"o\">((</span><span class=\"n\">a</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">d</span><span class=\"o\">),</span><span class=\"w\"> </span><span class=\"n\">x0</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">x1</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">x2</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">x3</span><span class=\"o\">))</span><span class=\"w\"> </span><span class=\"o\">+</span>\n<span class=\"w\">         </span><span class=\"n\">e1</span><span class=\"w\"> </span><span class=\"n\">*</span><span class=\"w\"> </span><span class=\"n\">two_of</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">y_of</span><span class=\"w\"> </span><span class=\"o\">((</span><span class=\"n\">a</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">d</span><span class=\"o\">),</span><span class=\"w\"> </span><span class=\"n\">x0</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">x1</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">x2</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">x3</span><span class=\"o\">))</span><span class=\"w\"> </span><span class=\"o\">+</span>\n<span class=\"w\">         </span><span class=\"n\">e2</span><span class=\"w\"> </span><span class=\"n\">*</span><span class=\"w\"> </span><span class=\"n\">three_of</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">y_of</span><span class=\"w\"> </span><span class=\"o\">((</span><span class=\"n\">a</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">d</span><span class=\"o\">),</span><span class=\"w\"> </span><span class=\"n\">x0</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">x1</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">x2</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">x3</span><span class=\"o\">))</span><span class=\"w\"> </span><span class=\"o\">+</span>\n<span class=\"w\">         </span><span class=\"n\">e3</span><span class=\"w\"> </span><span class=\"n\">*</span><span class=\"w\"> </span><span class=\"n\">four_of</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">y_of</span><span class=\"w\"> </span><span class=\"o\">((</span><span class=\"n\">a</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">d</span><span class=\"o\">),</span><span class=\"w\"> </span><span class=\"n\">x0</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">x1</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">x2</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">x3</span><span class=\"o\">)))</span><span class=\"w\"> </span><span class=\"o\">+</span>\n<span class=\"w\">       </span><span class=\"n\">complex_of_int</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">∑h</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">4..&lt;m.</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"w\"> </span><span class=\"n\">$$</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">*</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">$$</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">0</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 484348905,
        "sender_full_name": "Craig Alan Feinstein",
        "timestamp": 1732553450
    },
    {
        "content": "<p>It means that some function (probably equality, but I am not sure) is taking a real instead of a rat as argument</p>",
        "id": 484349372,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1732553580
    },
    {
        "content": "<p>So, time for you to look at all types</p>",
        "id": 484349436,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1732553600
    },
    {
        "content": "<p>Excellent, thank you for your help. I’ve faced that type of issue before. It’s a pain but can be overcome with diligence.</p>",
        "id": 484350237,
        "sender_full_name": "Craig Alan Feinstein",
        "timestamp": 1732553852
    },
    {
        "content": "<p>I fixed it and it works now. The problem was a type error. Also, I was able to just use blast and not even bother with exI. So existence proofs aren't so hard as long as the types are correct.</p>",
        "id": 484821665,
        "sender_full_name": "Craig Alan Feinstein",
        "timestamp": 1732755564
    }
]