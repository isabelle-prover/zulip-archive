[
    {
        "content": "<p>To achieve the effect of being able to call sledgehammer from anywhere (not just jedit),  <a href=\"#narrow/stream/202961-General/topic/tools.20to.20automatically.20adopt.20sledgehammer.20proofs.20into.20theory\">#narrow/stream/202961-General/topic/tools.20to.20automatically.20adopt.20sledgehammer.20proofs.20into.20theory</a><br>\nI have been investigationg the code in sledgehammer_commands.ML, which seems to be the place where the core functionalities of sledgehammer is placed. It seems that the command is defined as the following function:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"n\">val</span><span class=\"w\"> </span><span class=\"o\">_</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">  </span><span class=\"n\">Outer_Syntax.command</span><span class=\"w\"> </span><span class=\" -Symbol\">\\&lt;^command_keyword&gt;</span><span class=\"ss\">\\&lt;open&gt;</span><span class=\"s\">sledgehammer_params</span><span class=\"ss\">\\&lt;close&gt;</span>\n<span class=\"w\">    </span><span class=\"s\">\"set and display the default parameters for Sledgehammer\"</span>\n<span class=\"w\">    </span><span class=\"o\">(</span><span class=\"n\">parse_raw_params</span><span class=\"w\"> </span><span class=\"n\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">fn</span><span class=\"w\"> </span><span class=\"n\">params</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"n\">&gt;</span>\n<span class=\"w\">      </span><span class=\"n\">Toplevel.theory</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">fold</span><span class=\"w\"> </span><span class=\"n\">set_default_raw_param</span><span class=\"w\"> </span><span class=\"n\">params</span><span class=\"w\"> </span><span class=\"n\">#&gt;</span><span class=\"w\"> </span><span class=\"n\">tap</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">fn</span><span class=\"w\"> </span><span class=\"n\">thy</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"n\">&gt;</span>\n<span class=\"w\">        </span><span class=\"n\">writeln</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"s\">\"Default parameters for Sledgehammer:\\n\"</span><span class=\"w\"> </span><span class=\"n\">^</span>\n<span class=\"w\">          </span><span class=\"o\">(</span><span class=\"k\">case</span><span class=\"w\"> </span><span class=\"n\">rev</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">default_raw_params</span><span class=\"w\"> </span><span class=\"n\">thy</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">of</span>\n<span class=\"w\">            </span><span class=\"o\">[]</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"n\">&gt;</span><span class=\"w\"> </span><span class=\"s\">\"none\"</span>\n<span class=\"w\">          </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">params</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"n\">&gt;</span><span class=\"w\"> </span><span class=\"n\">params</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">&gt;</span><span class=\"w\"> </span><span class=\"n\">map</span><span class=\"w\"> </span><span class=\"n\">string_of_raw_param</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">&gt;</span><span class=\"w\"> </span><span class=\"n\">sort_strings</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">&gt;</span><span class=\"w\"> </span><span class=\"n\">cat_lines</span><span class=\"o\">))))))</span>\n</code></pre></div>\n<p>I checked and found that the </p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"o\">(</span><span class=\"n\">val</span><span class=\"w\"> </span><span class=\"o\">_</span><span class=\"w\"> </span><span class=\"o\">=)</span><span class=\"ow\">....</span><span class=\"w\">    </span><span class=\"o\">(</span><span class=\"n\">parse_raw_params</span><span class=\"w\"> </span><span class=\"n\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">fn</span><span class=\"w\"> </span><span class=\"n\">params</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"n\">&gt;</span>\n<span class=\"w\">      </span><span class=\"n\">Toplevel.theory</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">fold</span><span class=\"w\"> </span><span class=\"n\">set_default_raw_param</span><span class=\"w\"> </span><span class=\"n\">params</span><span class=\"w\"> </span><span class=\"n\">#&gt;</span><span class=\"w\"> </span><span class=\"n\">tap</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">fn</span><span class=\"w\"> </span><span class=\"n\">thy</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"n\">&gt;</span>\n<span class=\"w\">        </span><span class=\"n\">writeln</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"s\">\"Default parameters for Sledgehammer:\\n\"</span><span class=\"w\"> </span><span class=\"n\">^</span>\n<span class=\"w\">          </span><span class=\"o\">(</span><span class=\"k\">case</span><span class=\"w\"> </span><span class=\"n\">rev</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">default_raw_params</span><span class=\"w\"> </span><span class=\"n\">thy</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">of</span>\n<span class=\"w\">            </span><span class=\"o\">[]</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"n\">&gt;</span><span class=\"w\"> </span><span class=\"s\">\"none\"</span>\n<span class=\"w\">          </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">params</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"n\">&gt;</span><span class=\"w\"> </span><span class=\"n\">params</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">&gt;</span><span class=\"w\"> </span><span class=\"n\">map</span><span class=\"w\"> </span><span class=\"n\">string_of_raw_param</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">&gt;</span><span class=\"w\"> </span><span class=\"n\">sort_strings</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">&gt;</span><span class=\"w\"> </span><span class=\"n\">cat_lines</span><span class=\"o\">))))))</span>\n</code></pre></div>\n<p>bit (excluding the first two lines) is of type <br>\n<code>fn: Token.T list -&gt; (Toplevel.transition -&gt; Toplevel.transition) * Token.T list</code>.<br>\nI was wondering:<br>\n1) how to invoke this function properly to trigger the same effect of sledgehammering at a certain position in a lemma. Suppose we have a lemma </p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"P  ==&gt; Q ==&gt; P /\\ Q\"</span>\n<span class=\"c\">(*pos 1 *)</span>\n<span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>Then what arguments should I construct to feed to the function of type <code>fn: Token.T list -&gt; (Toplevel.transition -&gt; Toplevel.transition) * Token.T list</code> (or perhaps the <code>hammer_away</code> function to achieve the same effect as calling sledgehammer at position 1?</p>\n<p>Thanks a lot,<br>\nChengsong</p>",
        "id": 437357945,
        "sender_full_name": "Chengsong Tan",
        "timestamp": 1715041237
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"241231\">@Chengsong Tan</span> ,</p>\n<p>I applied Sledgehammer on Proof.state by writing this function:<br>\n<a href=\"https://github.com/data61/PSL/blob/2eeb751cde35a2b40b1dc746e64f6764efa8daa8/PSL/Subtool.ML#L171\">https://github.com/data61/PSL/blob/2eeb751cde35a2b40b1dc746e64f6764efa8daa8/PSL/Subtool.ML#L171</a></p>\n<p>Probably, the ML function you are looking for is <code>Sledgehammer.run_sledgehammer</code>, which I am using in this line:<br>\n<a href=\"https://github.com/data61/PSL/blob/2eeb751cde35a2b40b1dc746e64f6764efa8daa8/PSL/Subtool.ML#L183\">https://github.com/data61/PSL/blob/2eeb751cde35a2b40b1dc746e64f6764efa8daa8/PSL/Subtool.ML#L183</a></p>\n<p>To call <code>run_sledgehammer</code> from the Isar interface, you need to wrap the function call to <code>run_sledgehammer</code> by a function from <code>Toplevel.transition</code> to <code>Toplevel.transition</code>.</p>\n<p>I did this in this function: <a href=\"https://github.com/data61/PSL/blob/2eeb751cde35a2b40b1dc746e64f6764efa8daa8/PSL/Isar_Interface.ML#L106\">https://github.com/data61/PSL/blob/2eeb751cde35a2b40b1dc746e64f6764efa8daa8/PSL/Isar_Interface.ML#L106</a></p>\n<p>Initially, it may be confusing a little, but I believe this is Dr. Wenzel's good engineering work to introduce parallelism to Isabelle/jEdit.</p>\n<p>I found it useful to incorporate Sledgehammer into a larger automation. <span aria-label=\"octopus\" class=\"emoji emoji-1f419\" role=\"img\" title=\"octopus\">:octopus:</span> <br>\nIn particular, it serves as a helpful tool for generating conjectures.</p>\n<p>Many of the proofs in this video were generated by Sledgehammer.  <span aria-label=\"hammer\" class=\"emoji emoji-1f528\" role=\"img\" title=\"hammer\">:hammer:</span></p>\n<p><a href=\"https://youtu.be/rXU-lJxP_GI\">https://youtu.be/rXU-lJxP_GI</a></p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"rXU-lJxP_GI\" href=\"https://youtu.be/rXU-lJxP_GI\"><img src=\"https://uploads.zulipusercontent.net/5cafcd521ae910e84c565218750620f29e34e597/68747470733a2f2f692e7974696d672e636f6d2f76692f7258552d6c4a78505f47492f64656661756c742e6a7067\"></a></div>",
        "id": 437362109,
        "sender_full_name": "Yutaka Nagashima",
        "timestamp": 1715045099
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"644411\">Yutaka Nagashima</span> <a href=\"#narrow/stream/202961-General/topic/sledgehammer_commands.2EML.3A.20how.20to.20use/near/437362109\">said</a>:</p>\n<blockquote>\n<p>Hi <span class=\"user-mention silent\" data-user-id=\"241231\">Chengsong Tan</span> ,</p>\n<p>I applied Sledgehammer on Proof.state by writing this function:<br>\n<a href=\"https://github.com/data61/PSL/blob/2eeb751cde35a2b40b1dc746e64f6764efa8daa8/PSL/Subtool.ML#L171\">https://github.com/data61/PSL/blob/2eeb751cde35a2b40b1dc746e64f6764efa8daa8/PSL/Subtool.ML#L171</a></p>\n<p>Probably, the ML function you are looking for is <code>Sledgehammer.run_sledgehammer</code>, which I am using in this line:<br>\n<a href=\"https://github.com/data61/PSL/blob/2eeb751cde35a2b40b1dc746e64f6764efa8daa8/PSL/Subtool.ML#L183\">https://github.com/data61/PSL/blob/2eeb751cde35a2b40b1dc746e64f6764efa8daa8/PSL/Subtool.ML#L183</a></p>\n<p>To call <code>run_sledgehammer</code> from the Isar interface, you need to wrap the function call to <code>run_sledgehammer</code> by a function from <code>Toplevel.transition</code> to <code>Toplevel.transition</code>.</p>\n<p>I did this in this function: <a href=\"https://github.com/data61/PSL/blob/2eeb751cde35a2b40b1dc746e64f6764efa8daa8/PSL/Isar_Interface.ML#L106\">https://github.com/data61/PSL/blob/2eeb751cde35a2b40b1dc746e64f6764efa8daa8/PSL/Isar_Interface.ML#L106</a></p>\n<p>Initially, it may be confusing a little, but I believe this is Dr. Wenzel's good engineering work to introduce parallelism to Isabelle/jEdit.</p>\n<p>I found it useful to incorporate Sledgehammer into a larger automation. <span aria-label=\"octopus\" class=\"emoji emoji-1f419\" role=\"img\" title=\"octopus\">:octopus:</span> <br>\nIn particular, it serves as a helpful tool for generating conjectures.</p>\n<p>Many of the proofs in this video were generated by Sledgehammer.  <span aria-label=\"hammer\" class=\"emoji emoji-1f528\" role=\"img\" title=\"hammer\">:hammer:</span></p>\n<p><a href=\"https://youtu.be/rXU-lJxP_GI\">https://youtu.be/rXU-lJxP_GI</a></p>\n</blockquote>\n<p>Hi <span class=\"user-mention\" data-user-id=\"644411\">@Yutaka Nagashima</span> ,</p>\n<p>Thank you very much for the helpful information!<br>\nThis project looks so cool, I have always wanted a tool like this.<br>\nIt's very helpful for me to know that to call sledgehammer from within Isar proofs is different from calling them outside Isar environment.</p>\n<p>Suppose I want to hack your code to fulfill my task of generating sledgehammer one-liners automatically (and redirecting them) to store them in a file. Which files and functions should I touch on?</p>\n<p>Best wishes,<br>\nChengsong</p>",
        "id": 437500202,
        "sender_full_name": "Chengsong Tan",
        "timestamp": 1715103688
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"241231\">Chengsong Tan</span> <a href=\"#narrow/stream/202961-General/topic/sledgehammer_commands.2EML.3A.20how.20to.20use/near/437500202\">said</a>:</p>\n<blockquote>\n<p>So a basic question for hacking your code base: if I want to redirect your <code>find_proof</code> method output to a file (or std output), what are the minimal changes that needs to be done? </p>\n<p>Best wishes,<br>\nChengsong</p>\n</blockquote>\n<p>Hi <span class=\"user-mention\" data-user-id=\"241231\">@Chengsong Tan</span> ,</p>\n<p>I'm not skilled at I/O operations, but this might be helpful:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">theory</span><span class=\"w\"> </span><span class=\"n\">Chengsong</span>\n<span class=\"w\">  </span><span class=\"kp\">imports</span><span class=\"w\"> </span><span class=\"n\">Main</span>\n<span class=\"k\">begin</span>\n\n<span class=\"k\">ML</span><span class=\"s\">‹</span>\n<span class=\"s\">fun write_string_in_file thy file_name sh_output =</span>\n<span class=\"s\">  let</span>\n<span class=\"s\">    val path_to_directory = Resources.master_directory thy |&gt; File.platform_path: string;</span>\n<span class=\"s\">    val path_to_file = path_to_directory ^ \"/\" ^ file_name;</span>\n<span class=\"s\">    val outstream = TextIO.openAppend path_to_file: TextIO.outstream;</span>\n<span class=\"s\">    val _ = TextIO.outputSubstr (outstream, Substring.full sh_output);</span>\n<span class=\"s\">    val _ = TextIO.flushOut outstream;</span>\n<span class=\"s\">    val _ = TextIO.closeOut outstream;</span>\n<span class=\"s\">in</span>\n<span class=\"s\"> ()</span>\n<span class=\"s\">end;</span>\n<span class=\"s\">›</span>\n\n<span class=\"k\">ML</span><span class=\"s\">‹</span>\n<span class=\"s\">write_string_in_file @{theory} \"sh_out.txt\" \"0\\n\";</span>\n<span class=\"s\">write_string_in_file @{theory} \"sh_out.txt\" \"1\\n\";</span>\n<span class=\"s\">write_string_in_file @{theory} \"sh_out.txt\" \"2\\n\";</span>\n<span class=\"s\">›</span>\n\n<span class=\"k\">end</span>\n</code></pre></div>\n<p>On my machine, I inserted  the definition of <code>write_string_in_file</code> and the following code between <a href=\"https://github.com/data61/PSL/blob/2eeb751cde35a2b40b1dc746e64f6764efa8daa8/Abduction/Abduction.thy#L137\">lines 136 and 137 of Abduction.thy</a>:<br>\n<code>val _ = write_string_in_file (Proof_Context.theory_of cxtx_wo_verbose_warnings) \"sh_output.txt\" message;</code> </p>\n<p>And this recorded the result of the Abduction Prover in <code>sh_output.txt</code>. <br>\nNote that for large-scale experiments, careful consideration of concurrency issues is essential.\"</p>\n<p>Regards,<br>\nYutaka</p>",
        "id": 438220004,
        "sender_full_name": "Yutaka Nagashima",
        "timestamp": 1715556914
    },
    {
        "content": "<p>Ah, I just noticed that Dr. Wenzel is also offering advice on the mailing list. <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 438220126,
        "sender_full_name": "Yutaka Nagashima",
        "timestamp": 1715557063
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"644411\">Yutaka Nagashima</span> <a href=\"#narrow/stream/202961-General/topic/sledgehammer_commands.2EML.3A.20how.20to.20use/near/438220004\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"241231\">Chengsong Tan</span> <a href=\"#narrow/stream/202961-General/topic/sledgehammer_commands.2EML.3A.20how.20to.20use/near/437500202\">said</a>:</p>\n<blockquote>\n<p>So a basic question for hacking your code base: if I want to redirect your <code>find_proof</code> method output to a file (or std output), what are the minimal changes that needs to be done? </p>\n<p>Best wishes,<br>\nChengsong</p>\n</blockquote>\n<p>Hi <span class=\"user-mention silent\" data-user-id=\"241231\">Chengsong Tan</span> ,</p>\n<p>I'm not skilled at I/O operations, but this might be helpful:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">theory</span><span class=\"w\"> </span><span class=\"n\">Chengsong</span>\n<span class=\"w\">  </span><span class=\"kp\">imports</span><span class=\"w\"> </span><span class=\"n\">Main</span>\n<span class=\"k\">begin</span>\n\n<span class=\"k\">ML</span><span class=\"s\">‹</span>\n<span class=\"s\">fun write_string_in_file thy file_name sh_output =</span>\n<span class=\"s\">  let</span>\n<span class=\"s\">    val path_to_directory = Resources.master_directory thy |&gt; File.platform_path: string;</span>\n<span class=\"s\">    val path_to_file = path_to_directory ^ \"/\" ^ file_name;</span>\n<span class=\"s\">    val outstream = TextIO.openAppend path_to_file: TextIO.outstream;</span>\n<span class=\"s\">    val _ = TextIO.outputSubstr (outstream, Substring.full sh_output);</span>\n<span class=\"s\">    val _ = TextIO.flushOut outstream;</span>\n<span class=\"s\">    val _ = TextIO.closeOut outstream;</span>\n<span class=\"s\">in</span>\n<span class=\"s\"> ()</span>\n<span class=\"s\">end;</span>\n<span class=\"s\">›</span>\n\n<span class=\"k\">ML</span><span class=\"s\">‹</span>\n<span class=\"s\">write_string_in_file @{theory} \"sh_out.txt\" \"0\\n\";</span>\n<span class=\"s\">write_string_in_file @{theory} \"sh_out.txt\" \"1\\n\";</span>\n<span class=\"s\">write_string_in_file @{theory} \"sh_out.txt\" \"2\\n\";</span>\n<span class=\"s\">›</span>\n\n<span class=\"k\">end</span>\n</code></pre></div>\n<p>On my machine, I inserted  the definition of <code>write_string_in_file</code> and the following code between <a href=\"https://github.com/data61/PSL/blob/2eeb751cde35a2b40b1dc746e64f6764efa8daa8/Abduction/Abduction.thy#L137\">lines 136 and 137 of Abduction.thy</a>:<br>\n<code>val _ = write_string_in_file (Proof_Context.theory_of cxtx_wo_verbose_warnings) \"sh_output.txt\" message;</code> </p>\n<p>And this recorded the result of the Abduction Prover in <code>sh_output.txt</code>. <br>\nNote that for large-scale experiments, careful consideration of concurrency issues is essential.\"</p>\n<p>Regards,<br>\nYutaka</p>\n</blockquote>\n<p>Hi <span class=\"user-mention\" data-user-id=\"644411\">@Yutaka Nagashima</span> , </p>\n<p>Thank you very much for taking the time to write the functions and replying!<br>\nI have been experimenting with redirection and came up with a somewhat similar approach as you have (done to sledgehammer but same idea):</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"n\">val</span><span class=\"w\"> </span><span class=\"o\">_</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">  </span><span class=\"n\">Outer_Syntax.command</span><span class=\"w\"> </span><span class=\" -Symbol\">\\&lt;^command_keyword&gt;</span><span class=\"s\">‹sledgehammer›</span>\n<span class=\"w\">    </span><span class=\"s\">\"search for first-order proof using automatic theorem provers\"</span>\n<span class=\"w\">    </span><span class=\"o\">(</span><span class=\"n\">Scan.optional</span><span class=\"w\"> </span><span class=\"n\">Parse.name</span><span class=\"w\"> </span><span class=\"n\">runN</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"w\"> </span><span class=\"n\">parse_raw_params</span>\n<span class=\"w\">      </span><span class=\"o\">--</span><span class=\"w\"> </span><span class=\"n\">parse_fact_override</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"w\"> </span><span class=\"n\">Scan.option</span><span class=\"w\"> </span><span class=\"n\">Parse.nat</span><span class=\"w\"> </span><span class=\"n\">&gt;&gt;</span>\n<span class=\"w\">      </span><span class=\"o\">(</span><span class=\"n\">fn</span><span class=\"w\"> </span><span class=\"o\">(((</span><span class=\"n\">subcommand</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">params</span><span class=\"o\">),</span><span class=\"w\"> </span><span class=\"n\">fact_override</span><span class=\"o\">),</span><span class=\"w\"> </span><span class=\"n\">opt_i</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"n\">&gt;</span>\n<span class=\"w\">        </span><span class=\"n\">Toplevel.keep_proof</span>\n<span class=\"w\">          </span><span class=\"o\">(</span><span class=\"n\">hammer_away</span><span class=\"w\"> </span><span class=\"n\">params</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">SOME</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">writeFileln</span><span class=\"w\"> </span><span class=\"s\">\"test2.txt\"</span><span class=\"o\">))</span><span class=\"w\"> </span><span class=\"n\">subcommand</span><span class=\"w\"> </span><span class=\"n\">opt_i</span><span class=\"w\"> </span><span class=\"n\">fact_override</span><span class=\"w\"> </span><span class=\"n\">o</span><span class=\"w\"> </span><span class=\"n\">Toplevel.proof_of</span><span class=\"o\">)))</span>\n</code></pre></div>\n<p>I have replaced the <code>NONE</code> in the last line in the original code to <code>SOME (writeFileln ...)</code>, which switches the output to file rather than proof panel.<br>\nThe <code>writeFileln</code> function is defined as follows:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">print_string_op</span><span class=\"w\"> </span><span class=\"n\">NONE</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"NoID\"</span>\n<span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">print_string_op</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">SOME</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">s</span>\n\n<span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">writeFileln</span><span class=\"w\"> </span><span class=\"n\">filename</span><span class=\"w\"> </span><span class=\"n\">content</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">    </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">val</span><span class=\"w\"> </span><span class=\"n\">fd</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">TextIO.openAppend</span><span class=\"w\"> </span><span class=\"n\">filename</span>\n<span class=\"w\">        </span><span class=\"n\">val</span><span class=\"w\"> </span><span class=\"o\">_</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">TextIO.output</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">fd</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">String.concat</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">print_string_op</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Position.id_of</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Position.thread_data</span><span class=\"w\"> </span><span class=\"o\">())),</span><span class=\"w\"> </span><span class=\"n\">content</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"s\">\"\\n\"</span><span class=\"o\">])</span><span class=\"w\"> </span><span class=\"n\">handle</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"n\">&gt;</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">TextIO.closeOut</span><span class=\"w\"> </span><span class=\"n\">fd;</span><span class=\"w\"> </span><span class=\"n\">raise</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"o\">)</span>\n<span class=\"w\">        </span><span class=\"n\">val</span><span class=\"w\"> </span><span class=\"o\">_</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">TextIO.closeOut</span><span class=\"w\"> </span><span class=\"n\">fd</span>\n<span class=\"w\">    </span><span class=\"kp\">in</span><span class=\"w\"> </span><span class=\"o\">()</span><span class=\"w\"> </span><span class=\"k\">end</span>\n</code></pre></div>\n<p>However, I am now facing the issue of plugging the generated proof back into the original <code>thy</code> file. In the above function if you try to print also the line number info via <code>Position.line_of</code>, sometimes (or in my case, always) no line number is found, and only the thread id can be retrieved via <code>Position.id_of</code>. This  makes it hard to insert the proof found back into the place precisely. I have been working on two solutions for this:</p>\n<ol>\n<li>find a way to link an <code>id</code> to its source text. This should be possible, as the <code>sendback</code> markup inserts to the right position once it has been clicked (or maybe not? It relies on the user putting the cursor at the right place)</li>\n<li>generate for each call a separate file (as you did), and make sure the newly-generated files have a number label that correspond to later calls when multiple <code>find_proof</code> calls exist. Based on the relative order in which <code>find_proof</code> keyword appears in text, insert each proof with the right label back.</li>\n</ol>\n<p>Method 1 might not work, method 2 is simple conceptually but can be quite fragile (commented keyword etc.)</p>\n<p><span class=\"user-mention silent\" data-user-id=\"644411\">Yutaka Nagashima</span> <a href=\"#narrow/stream/202961-General/topic/sledgehammer_commands.2EML.3A.20how.20to.20use/near/438220126\">said</a>:</p>\n<blockquote>\n<p>Ah, I just noticed that Dr. Wenzel is also offering advice on the mailing list. <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>\n</blockquote>\n<p>Yes, he is quite helpful in pointing me to functions like <code>Position.thread_data()</code>! But he also told me it was not always possible to get the line number info :(</p>",
        "id": 438304895,
        "sender_full_name": "Chengsong Tan",
        "timestamp": 1715589427
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"241231\">@Chengsong Tan</span> ,</p>\n<p>If I remember correctly, I used <code>Position.line_of</code> to get the line number back in 2018 when extracting training data from the AFP for PaMpeR. I also remotely recall that the behavior of this function changes depending on whether you use Isabelle in interactive mode or batch mode.</p>\n<p>In interactive mode, it provides information related to the timing of your edits, while in batch mode, it returns the line number.</p>\n<p>Regarding the two approaches you listed, I am somewhat inclined towards the second solution. As you mentioned, it might not be the most elegant solution, but it works similarly to Mirabelle, if I understand correctly.</p>\n<p>However, the effectiveness of this choice depends on the goals of your project, which I am not aware of. Perhaps there is a third option, depending on what you ultimately aim to achieve by inserting proof scripts into theory files. <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>\n<p>Regards,<br>\nYutaka</p>",
        "id": 438446179,
        "sender_full_name": "Yutaka Nagashima",
        "timestamp": 1715633630
    },
    {
        "content": "<p>bit </p>\n<p><span class=\"user-mention silent\" data-user-id=\"644411\">Yutaka Nagashima</span> <a href=\"#narrow/stream/202961-General/topic/sledgehammer_commands.2EML.3A.20how.20to.20use/near/438446179\">said</a>:</p>\n<blockquote>\n<p>Hi <span class=\"user-mention silent\" data-user-id=\"241231\">Chengsong Tan</span> ,</p>\n<p>If I remember correctly, I used <code>Position.line_of</code> to get the line number back in 2018 when extracting training data from the AFP for PaMpeR. I also remotely recall that the behavior of this function changes depending on whether you use Isabelle in interactive mode or batch mode.</p>\n<p>In interactive mode, it provides information related to the timing of your edits, while in batch mode, it returns the line number.</p>\n<p>Regarding the two approaches you listed, I am somewhat inclined towards the second solution. As you mentioned, it might not be the most elegant solution, but it works similarly to Mirabelle, if I understand correctly.</p>\n<p>However, the effectiveness of this choice depends on the goals of your project, which I am not aware of. Perhaps there is a third option, depending on what you ultimately aim to achieve by inserting proof scripts into theory files. <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>\n<p>Regards,<br>\nYutaka</p>\n</blockquote>\n<p>Hi <span class=\"user-mention\" data-user-id=\"644411\">@Yutaka Nagashima</span> ,</p>\n<p>It's very important to know that <code>line_of</code> is actually usable! Thanks a lot!<br>\nHow to do the redirection also for the <code>try_hard</code> command?<br>\nI have looked into the code and it seems the <code>get_trans_trans</code> function in <code>Isar_Interface.ML</code> is where messages are being printed to the proof panel. However I am not sure how to extract the proof text from the <code>print</code> variable there as it is not of <code>string</code> type. I also tried to modify <code>print_proof_of_graph</code>to output to file, but that function seems to not have been called. Any ideas?</p>\n<p>Best wishes,<br>\nChengsong</p>",
        "id": 438470747,
        "sender_full_name": "Chengsong Tan",
        "timestamp": 1715644023
    },
    {
        "content": "<p>I realized that the <code>print_necessary_proofs_only</code> function seems to be what I need. :)</p>",
        "id": 438474650,
        "sender_full_name": "Chengsong Tan",
        "timestamp": 1715646275
    },
    {
        "content": "<p>Ok so <code>get_trans_trans</code> does produce proofs in string format. Problem solved. Apologies for the additional messages.</p>\n<p>Out of curiosity, I was playing with your tool and I notice that sometimes the same proof seems to be generated multiple times, as can be seen from the output of <code>mk_apply_script</code>. Can this be avoided? Perhaps this could be a potential performance optimisation for the abduction prover?</p>",
        "id": 438612970,
        "sender_full_name": "Chengsong Tan",
        "timestamp": 1715704318
    },
    {
        "content": "<p>Can you share a screenshot to demonstrate  the duplication problem?</p>",
        "id": 438670863,
        "sender_full_name": "Yutaka Nagashima",
        "timestamp": 1715725835
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"644411\">Yutaka Nagashima</span> <a href=\"#narrow/stream/202961-General/topic/sledgehammer_commands.2EML.3A.20how.20to.20use/near/438670863\">said</a>:</p>\n<blockquote>\n<p>Can you share a screenshot to demonstrate  the duplication problem?</p>\n</blockquote>\n<p>Yes,<br>\n<a href=\"/user_uploads/14278/HMeaehO-cc4SV31-m5fbzpDx/Screenshot-2024-05-16-at-22.56.31.png\">Screenshot-2024-05-16-at-22.56.31.png</a><br>\nI have put the line 1304 in the picture  in Util.ML to output to a file, and it seems the same proof text has been generated multiple times here for the same thread.<br>\nI will reproduce this sometime later and send to you (now the file is not modified for my current experiment.).</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/14278/HMeaehO-cc4SV31-m5fbzpDx/Screenshot-2024-05-16-at-22.56.31.png\" title=\"Screenshot-2024-05-16-at-22.56.31.png\"><img src=\"/user_uploads/14278/HMeaehO-cc4SV31-m5fbzpDx/Screenshot-2024-05-16-at-22.56.31.png\"></a></div>",
        "id": 439109242,
        "sender_full_name": "Chengsong Tan",
        "timestamp": 1715896961
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"644411\">@Yutaka Nagashima</span> <br>\nI was wondering what's the most powerful command in your tool?<br>\nthe proof methods <code>find_proof Hammer</code> and <code>try_hard</code> are already quite good.<br>\nBut I was wondering if there exists any more extensive/powerful commands in the abduction prover that can be given to the machine to try out for long duration of time. My proof does not involve a lot of induction.</p>\n<p>Thanks a lot,<br>\nChengsong</p>",
        "id": 439109886,
        "sender_full_name": "Chengsong Tan",
        "timestamp": 1715897283
    }
]