[
    {
        "content": "<p>The following proof is fine until the last line, which uses the same lemma as the line before sum.swap, except it fails. Is this because the lemma only holds when the summation symbols are first?</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">brc_equation</span><span class=\"o\">:</span>\n<span class=\"w\">  </span><span class=\"kp\">assumes</span><span class=\"w\"> </span><span class=\"s\">\"x ∈ rat mat 𝗏 1\"</span>\n<span class=\"w\">  </span><span class=\"kp\">shows</span><span class=\"w\"> </span><span class=\"s\">\"(∑i ∈ {0..&lt;𝗏}. (L_of x $$ (i,0))^2) =</span>\n<span class=\"s\">     of_int Λ * (∑i ∈ {0..&lt;𝗏}.(x $$ (i, 0)))^2 +</span>\n<span class=\"s\">     of_int (𝗋 - Λ) * (∑i ∈ {0..&lt;𝗏}. (x $$ (i, 0))^2)\"</span>\n<span class=\"k\">proof</span><span class=\"w\"> </span><span class=\"o\">-</span>\n<span class=\"w\">  </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"s\">\"(∑i ∈ {0..&lt;𝗏}. (L_of x $$ (i,0))^2) =</span>\n<span class=\"s\">    (∑i ∈ {0..&lt;𝗏}.(∑h ∈ {0..&lt;𝗏}. of_int (N $$ (h,i)) * x $$ (h,0))^2)\"</span>\n<span class=\"w\">    </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">auto</span>\n<span class=\"w\">  </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"s\">\"... = (∑i ∈ {0..&lt;𝗏}. (∑j ∈ {0..&lt;𝗏}. of_int (N $$ (j, i)) *</span>\n<span class=\"s\">    x $$ (j, 0)) * (∑h ∈ {0..&lt;𝗏}. of_int (N $$ (h, i)) * x $$ (h, 0)))\"</span>\n<span class=\"w\">    </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"n\">add</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">power2_eq_square</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"s\">\"... = (∑i ∈ {0..&lt;𝗏}. (∑j ∈ {0..&lt;𝗏}. (∑h ∈ {0..&lt;𝗏}.</span>\n<span class=\"s\">    (of_int (N $$ (j,i)) * x $$ (j,0)) * (of_int (N $$ (h,i)) * x $$ (h,0)))))\"</span>\n<span class=\"w\">    </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">metis</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">no_types</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">sum_product</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"s\">\"... = (∑j ∈ {0..&lt;𝗏}. (∑i ∈ {0..&lt;𝗏}. (∑h ∈ {0..&lt;𝗏}.</span>\n<span class=\"s\">    (of_int (N $$ (j,i)) * x $$ (j,0)) * (of_int (N $$ (h,i)) * x $$ (h,0)))))\"</span>\n<span class=\"w\">    </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">sum.swap</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">simp</span>\n<span class=\"w\"> </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"s\">\"... = (∑j ∈ {0..&lt;𝗏}. (∑h ∈ {0..&lt;𝗏}. (∑i ∈ {0..&lt;𝗏}.</span>\n<span class=\"s\">    (of_int (N $$ (j,i)) * x $$ (j,0)) * (of_int (N $$ (h,i)) * x $$ (h,0)))))\"</span>\n<span class=\"w\">    </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">sum.swap</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">simp</span>\n</code></pre></div>",
        "id": 467092053,
        "sender_full_name": "Craig Alan Feinstein",
        "timestamp": 1725331395
    },
    {
        "content": "<ol>\n<li>Your expression is correct, but simp seems not to be able to figure out how to apply sum.swap</li>\n</ol>",
        "id": 467113052,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1725339208
    },
    {
        "content": "<ol start=\"2\">\n<li>Your isar structure is meaningless</li>\n</ol>",
        "id": 467113342,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1725339288
    },
    {
        "content": "<p>You want also have/also have/finally have</p>",
        "id": 467113511,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1725339363
    },
    {
        "content": "<p>With this using it works:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">sum.swap</span><span class=\"o\">[</span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"s\">‹λh i. (of_int (N $$ (j,i)) * x $$ (j,0)) * (of_int (N $$ (h,i)) * x $$ (h,0))›</span><span class=\"w\"> </span><span class=\"kp\">for</span><span class=\"w\"> </span><span class=\"n\">j</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 467113613,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1725339417
    },
    {
        "content": "<p>You mean I should use “also have” instead of “then have”?</p>",
        "id": 467114239,
        "sender_full_name": "Craig Alan Feinstein",
        "timestamp": 1725339650
    },
    {
        "content": "<p>I noticed in the Fisher inequality library Matrix_Vector_Extras, there is a lemma that is used sum_reorder_triple, that might also work.</p>",
        "id": 467114900,
        "sender_full_name": "Craig Alan Feinstein",
        "timestamp": 1725339897
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"736162\">Craig Alan Feinstein</span> <a href=\"#narrow/stream/202961-General/topic/summation.20swaps/near/467114900\">said</a>:</p>\n<blockquote>\n<p>I noticed in the Fisher inequality library Matrix_Vector_Extras, there is a lemma that is used sum_reorder_triple, that might also work.</p>\n</blockquote>\n<p>Summations are definitely something which feels like it <em>should</em> be easy to automate, but in reality often isn't (a problem shared across proof assistants as well). I think it could be an interesting student project to investigate at some point. Instantiating directly the parameters of lemmas (like what Mathias did above) is typically the best strategy for now. The sum_reorder_triple lemma in my library could definitely help depending on what you have to do - both as examples for how to do proofs with summations and potentially in this case (with incidence matrices, such triples are not uncommon).</p>",
        "id": 467216423,
        "sender_full_name": "Chelsea Edmonds",
        "timestamp": 1725362187
    },
    {
        "content": "<p>I just got sum_reorder_triple to work.</p>",
        "id": 467362695,
        "sender_full_name": "Craig Alan Feinstein",
        "timestamp": 1725399191
    },
    {
        "content": "<p>Moving around parentheses and taking out expressions to outer parentheses within multiple summations also seems to be difficult in Isabelle.</p>",
        "id": 467405935,
        "sender_full_name": "Craig Alan Feinstein",
        "timestamp": 1725422264
    },
    {
        "content": "<p>Every time I solve a hard problem that I didn’t think would be hard, a new hard problem that I didn’t think would be hard comes up.</p>",
        "id": 467406206,
        "sender_full_name": "Craig Alan Feinstein",
        "timestamp": 1725422373
    },
    {
        "content": "<p>Instantiation is a new trick for me that I’ll add to my toolbox.</p>",
        "id": 468021097,
        "sender_full_name": "Craig Alan Feinstein",
        "timestamp": 1725585314
    },
    {
        "content": "<p>I normally use sum.swap with very explicit proof methods like rule or subst instead.</p>",
        "id": 468144286,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1725618028
    },
    {
        "content": "<p>Moving parentheses and pulling things into and out of (finite) sums is usually easy using <code>simp add: algebra_simps sum_distrib_left sum_distrib_right</code></p>",
        "id": 468144735,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1725618120
    },
    {
        "content": "<p>While we're at it, if you ever struggle with reindexing sums, sum.reindex_bij_witness is the secret weapon.</p>",
        "id": 468144934,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1725618163
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232736\">@Manuel Eberl</span>  I just tried by (simp add: algebra_simps sum_distrib_left sum_distrib_right) and that solved the problem. Thank you.</p>",
        "id": 468222381,
        "sender_full_name": "Craig Alan Feinstein",
        "timestamp": 1725637432
    },
    {
        "content": "<p>Now I have the following in which I need to use substitution of matdef into the last expression.  </p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">brc_x_equation</span><span class=\"o\">:</span>\n<span class=\"w\">  </span><span class=\"kp\">assumes</span><span class=\"w\"> </span><span class=\"s\">\"x ∈ rat mat 𝗏 1\"</span><span class=\"w\"> </span><span class=\"s\">\"h &lt; 𝗏\"</span><span class=\"w\"> </span><span class=\"s\">\"j &lt; 𝗏\"</span>\n<span class=\"w\">  </span><span class=\"kp\">shows</span><span class=\"w\"> </span><span class=\"s\">\"(∑i ∈ {0..&lt;𝗏}. (L_of x $$ (i,0))^2) =</span>\n<span class=\"s\">     of_int Λ * (∑i ∈ {0..&lt;𝗏}.(x $$ (i, 0)))^2 +</span>\n<span class=\"s\">     of_int (𝗄 - Λ) * (∑i ∈ {0..&lt;𝗏}. (x $$ (i, 0))^2)\"</span>\n<span class=\"k\">proof</span><span class=\"w\"> </span><span class=\"o\">-</span>\n<span class=\"w\">  </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">N_rat</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"map_mat (of_int) N\"</span>\n<span class=\"w\">  </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"n\">matdef</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"(?N_rat * ?N_rat⇧T) $$ (j, h) = (∑i ∈{0..&lt;𝗏} . ?N_rat $$ (j, i) * ?N_rat $$ (h, i))\"</span>\n<span class=\"w\">    </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">assms</span><span class=\"o\">(</span><span class=\"n\">2</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">assms</span><span class=\"o\">(</span><span class=\"n\">3</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">transpose_mat_mult_entries</span><span class=\"o\">[</span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"s\">\"j\"</span><span class=\"w\"> </span><span class=\"s\">\"?N_rat\"</span><span class=\"w\"> </span><span class=\"s\">\"h\"</span><span class=\"o\">]</span>\n<span class=\"w\">    </span><span class=\"n\">local.symmetric</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">fastforce</span>\n\n<span class=\"w\">  </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"s\">\"(∑i ∈ {0..&lt;𝗏}. (L_of x $$ (i,0))^2) =</span>\n<span class=\"s\">    (∑i ∈ {0..&lt;𝗏}.(∑h ∈ {0..&lt;𝗏}. (?N_rat $$ (h,i)) * x $$ (h,0))^2)\"</span>\n<span class=\"w\">    </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">auto</span>\n<span class=\"w\">  </span><span class=\"k\">also</span><span class=\"w\"> </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"s\">\"... = (∑i ∈ {0..&lt;𝗏}. (∑j ∈ {0..&lt;𝗏}. (?N_rat $$ (j, i)) *</span>\n<span class=\"s\">    x $$ (j, 0)) * (∑h ∈ {0..&lt;𝗏}. (?N_rat $$ (h, i)) * x $$ (h, 0)))\"</span>\n<span class=\"w\">    </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"n\">add</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">power2_eq_square</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"k\">also</span><span class=\"w\"> </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"s\">\"... = (∑i ∈ {0..&lt;𝗏}. (∑j ∈ {0..&lt;𝗏}. (∑h ∈ {0..&lt;𝗏}.</span>\n<span class=\"s\">    (?N_rat $$ (j,i) * x $$ (j,0)) * (?N_rat $$ (h,i) * x $$ (h,0)))))\"</span>\n<span class=\"w\">    </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">metis</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">no_types</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">sum_product</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"k\">also</span><span class=\"w\"> </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"s\">\"... = (∑i ∈ {0..&lt;𝗏}. (∑j ∈ {0..&lt;𝗏}. (∑h ∈ {0..&lt;𝗏}.</span>\n<span class=\"s\">    ?N_rat $$ (j,i) * ?N_rat $$ (h,i) * x $$ (j,0) * x $$ (h,0))))\"</span>\n<span class=\"w\">    </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"n\">add</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">algebra_simps</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"k\">also</span><span class=\"w\"> </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"s\">\"... = (∑j ∈ {0..&lt;𝗏}. (∑h ∈ {0..&lt;𝗏}. (∑i ∈ {0..&lt;𝗏}.</span>\n<span class=\"s\">    ?N_rat $$ (j,i) * ?N_rat $$ (h,i) * x $$ (j,0) * x $$ (h,0))))\"</span>\n<span class=\"w\">    </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">sum_reorder_triple</span><span class=\"o\">[</span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"s\">\"λ i j h . ?N_rat $$ (j,i) *</span>\n<span class=\"s\">      ?N_rat $$ (h,i) * x $$ (j,0) * x $$ (h,0)\"</span>\n<span class=\"w\">        </span><span class=\"s\">\"{0..&lt;𝗏}\"</span><span class=\"w\"> </span><span class=\"s\">\"{0..&lt;𝗏}\"</span><span class=\"w\"> </span><span class=\"s\">\"{0..&lt;𝗏}\"</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">simp</span>\n<span class=\"w\">  </span><span class=\"k\">also</span><span class=\"w\"> </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"s\">\"... = (∑j ∈ {0..&lt;𝗏}. (∑h ∈ {0..&lt;𝗏}. (∑i ∈ {0..&lt;𝗏}.</span>\n<span class=\"s\">    ?N_rat $$ (j,i) * ?N_rat $$ (h,i)) * x $$ (j,0) * x $$ (h,0)))\"</span>\n<span class=\"w\">    </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"n\">add</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">algebra_simps</span><span class=\"w\"> </span><span class=\"n\">sum_distrib_left</span><span class=\"w\"> </span><span class=\"n\">sum_distrib_right</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"k\">also</span><span class=\"w\"> </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"s\">\"... = (∑j ∈ {0..&lt;𝗏}. (∑h ∈ {0..&lt;𝗏}.</span>\n<span class=\"s\">  (?N_rat * ?N_rat⇧T) $$ (j, h) * x $$ (j,0) * x $$ (h,0)))\"</span>\n</code></pre></div>",
        "id": 468602258,
        "sender_full_name": "Craig Alan Feinstein",
        "timestamp": 1725815699
    },
    {
        "content": "<p>Shouldn't you forall quantify j and h in matdef?</p>",
        "id": 468602884,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1725816052
    },
    {
        "content": "<p>(or <code>for j h</code> after the have)</p>",
        "id": 468602901,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1725816063
    },
    {
        "content": "<p>otherwise the proof is for a fixed j and a fixed h that have nothing to do with the j/h from the sum in the last step</p>",
        "id": 468603058,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1725816173
    },
    {
        "content": "<p>when I do the following it cannot find a proof with try0:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"w\">  </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"n\">matdef</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"∀ h j. (?N_rat * ?N_rat⇧T) $$ (j, h) = (∑i ∈{0..&lt;𝗏} . ?N_rat $$ (j, i) * ?N_rat $$ (h, i))\"</span>\n<span class=\"w\">    </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">assms</span><span class=\"o\">(</span><span class=\"n\">2</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">assms</span><span class=\"o\">(</span><span class=\"n\">3</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">transpose_mat_mult_entries</span><span class=\"o\">[</span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"s\">\"j\"</span><span class=\"w\"> </span><span class=\"s\">\"?N_rat\"</span><span class=\"w\"> </span><span class=\"s\">\"h\"</span><span class=\"o\">]</span>\n<span class=\"w\">    </span><span class=\"n\">local.symmetric</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"kt\">try0</span>\n</code></pre></div>",
        "id": 468606715,
        "sender_full_name": "Craig Alan Feinstein",
        "timestamp": 1725818150
    },
    {
        "content": "<p>You probably want to add assms(2,3) to talk about the new h and j…</p>",
        "id": 468607153,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1725818342
    },
    {
        "content": "<p>Do you mean this? assms(2) and assms(3) are already used.</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"w\">  </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"n\">matdef</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"∀ h j. (?N_rat * ?N_rat⇧T) $$ (j, h) = (∑i ∈{0..&lt;𝗏} . ?N_rat $$ (j, i) * ?N_rat $$ (h, i))\"</span>\n<span class=\"w\">    </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">transpose_mat_mult_entries</span><span class=\"o\">[</span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"s\">\"j\"</span><span class=\"w\"> </span><span class=\"s\">\"?N_rat\"</span><span class=\"w\"> </span><span class=\"s\">\"h\"</span><span class=\"o\">]</span>\n<span class=\"w\">    </span><span class=\"n\">local.symmetric</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"n\">add</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">assms</span><span class=\"o\">(</span><span class=\"n\">2</span><span class=\"o\">,</span><span class=\"n\">3</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 468608182,
        "sender_full_name": "Craig Alan Feinstein",
        "timestamp": 1725818775
    },
    {
        "content": "<p>assms(2,3) are <code>\"h &lt; 𝗏\" \"j &lt; 𝗏\"</code></p>",
        "id": 468611379,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1725820891
    },
    {
        "content": "<p>they talk about a different h j than the one from <code>∀ h j. ...</code></p>",
        "id": 468611424,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1725820911
    },
    {
        "content": "<p>So if you compare the expression before (which was working) to the one now, you have removed assumptions</p>",
        "id": 468611524,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1725820950
    },
    {
        "content": "<p>so my intuition as someone who has no clue what you are doing: you need to pass the assumptions too here</p>",
        "id": 468611589,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1725820985
    },
    {
        "content": "<p>or maybe it is the fact that <code>transpose_mat_mult_entries[of \"j\" \"?N_rat\" \"h\"]</code> does refer to the wrong j and h too</p>",
        "id": 468611667,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1725821023
    },
    {
        "content": "<p>My intuition is that this:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"w\">  </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"n\">matdef</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"(?N_rat * ?N_rat⇧T) $$ (j, h) = (∑i ∈{0..&lt;𝗏} . ?N_rat $$ (j, i) * ?N_rat $$ (h, i))\"</span><span class=\"w\"> </span><span class=\"kp\">if</span><span class=\"w\"> </span><span class=\"s\">\"h &lt; 𝗏\"</span><span class=\"w\"> </span><span class=\"s\">\"j &lt; 𝗏\"</span><span class=\"w\"> </span><span class=\"kp\">for</span><span class=\"w\"> </span><span class=\"n\">h</span><span class=\"w\"> </span><span class=\"n\">j</span>\n<span class=\"w\">    </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">transpose_mat_mult_entries</span><span class=\"o\">[</span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"s\">\"j\"</span><span class=\"w\"> </span><span class=\"s\">\"?N_rat\"</span><span class=\"w\"> </span><span class=\"s\">\"h\"</span><span class=\"o\">]</span>\n<span class=\"w\">    </span><span class=\"n\">local.symmetric</span><span class=\"w\"> </span><span class=\"n\">that</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">fastforce</span>\n</code></pre></div>\n<p>should work</p>",
        "id": 468611884,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1725821132
    },
    {
        "content": "<p>and be what you want (modulo the fact that unfolding will still not work as you are going to need some congruence stuff)</p>",
        "id": 468611955,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1725821162
    },
    {
        "content": "<p>Yes, that worked, thank you. Just need to get the last substitution part to work now. After that, if I use the fact that N*N^t is a matrix with r on the diagonal and Lambda on the off diagonal, the proof of the lemma will be finished.</p>",
        "id": 468621797,
        "sender_full_name": "Craig Alan Feinstein",
        "timestamp": 1725826263
    },
    {
        "content": "<p>The rest of the proof of the BRC is even harder than this part. I haven't been really working on this part so much in the last week.</p>",
        "id": 468623068,
        "sender_full_name": "Craig Alan Feinstein",
        "timestamp": 1725827175
    },
    {
        "content": "<p>I have learned from two months plus of working with Isabelle that sometimes it's not a good idea to work to hard to prove a certain point. There might be a way to avoid trying to prove that point and do things a different way. Perhaps I don't even have to even work with <code>(?N_rat * ?N_rat⇧T) $$ (j, h)</code>. It all depends on what's in the Fisher's Inequality library, which I will go through again.</p>",
        "id": 468649124,
        "sender_full_name": "Craig Alan Feinstein",
        "timestamp": 1725844719
    },
    {
        "content": "<p>The issue here is that you need information about the sum to the replacement</p>",
        "id": 468668762,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1725855442
    },
    {
        "content": "<p>So you need to use the congruence lemma <code>sum.cong</code> to change the sum internally. Or you directly follow <span class=\"user-mention\" data-user-id=\"232736\">@Manuel Eberl</span> advice:</p>\n<p><span class=\"user-mention silent\" data-user-id=\"232736\">Manuel Eberl</span> <a href=\"#narrow/stream/202961-General/topic/summation.20swaps/near/468144934\">said</a>:</p>\n<blockquote>\n<p>While we're at it, if you ever struggle with reindexing sums, sum.reindex_bij_witness is the secret weapon.</p>\n</blockquote>\n<p>Because <code>sum.reindex_bij_witness</code> does congruence + reindexing but you do not have to reindex</p>",
        "id": 468669014,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1725855546
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"736162\">Craig Alan Feinstein</span> <a href=\"#narrow/stream/202961-General/topic/summation.20swaps/near/468649124\">said</a>:</p>\n<blockquote>\n<p>I have learned from two months plus of working with Isabelle that sometimes it's not a good idea to work to hard to prove a certain point. There might be a way to avoid trying to prove that point and do things a different way. Perhaps I don't even have to even work with <code>(?N_rat * ?N_rat⇧T) $$ (j, h)</code>. It all depends on what's in the Fisher's Inequality library, which I will go through again.</p>\n</blockquote>\n<p>it is always hard to say, but after less than 2 months, I would really try to get the proof through to understand how reindexing work, even if you end up deleting the proofs. Reindexing/applying congruence is one of the most critical tools for working with sums</p>",
        "id": 468669374,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1725855715
    },
    {
        "content": "<p>Thank you, I looked up sum.cong and found the Kummer congruence library uses it. It also has more examples of dealing with summations so I’ll study it.</p>",
        "id": 468847240,
        "sender_full_name": "Craig Alan Feinstein",
        "timestamp": 1725898009
    },
    {
        "content": "<p>Also found some good stuff with summation in the Gauss sums library</p>",
        "id": 469070389,
        "sender_full_name": "Craig Alan Feinstein",
        "timestamp": 1725969662
    }
]