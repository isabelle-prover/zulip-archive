[
    {
        "content": "<p>I am trying to define translations for function spaces. There are different function spaces for individuals <code>i</code> and types <code>t</code>.<br>\nIs there some way to make all of the following type? Sadly(?), there is no filtering/backtracking for translations according to the <a href=\"https://isabelle.in.tum.de/doc/isar-ref.pdf#attribute.syntax-ambiguity-warning\">reference manual</a></p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">theory</span> <span class=\"n\">Scratch</span>\n  <span class=\"kp\">imports</span> <span class=\"n\">HOL.HOL</span>\n<span class=\"k\">begin</span>\n\n<span class=\"k\">typedecl</span> <span class=\"n\">i</span>\n<span class=\"k\">typedecl</span> <span class=\"n\">t</span>\n\n<span class=\"k\">consts</span>\n  <span class=\"n\">set_dep_fun</span> <span class=\"o\">::</span> <span class=\"s\">\"i ⇒ (i ⇒ i) ⇒ i\"</span>\n  <span class=\"n\">type_dep_fun</span> <span class=\"o\">::</span> <span class=\"s\">\"t ⇒ (i ⇒ t) ⇒ t\"</span>\n  <span class=\"n\">elem</span> <span class=\"o\">::</span> <span class=\"s\">\"i ⇒ i ⇒ bool\"</span> <span class=\"o\">(</span><span class=\"kp\">infix</span> <span class=\"s\">\"∈\"</span> <span class=\"n\">50</span><span class=\"o\">)</span>\n  <span class=\"n\">has_type</span> <span class=\"o\">::</span> <span class=\"s\">\"i ⇒ t ⇒ bool\"</span> <span class=\"o\">(</span><span class=\"kp\">infix</span> <span class=\"s\">\":\"</span> <span class=\"n\">50</span><span class=\"o\">)</span>\n\n<span class=\"k\">abbreviation</span> <span class=\"s\">\"set_fun A B ≡ set_dep_fun A (λ_. B)\"</span>\n<span class=\"k\">abbreviation</span> <span class=\"s\">\"type_fun A B ≡ type_dep_fun A (λ_. B)\"</span>\n\n<span class=\"k\">syntax</span>\n  <span class=\"s\">\"_telescope\"</span> <span class=\"o\">::</span> <span class=\"s\">\"logic ⇒ logic ⇒ logic\"</span>  <span class=\"o\">(</span><span class=\"kp\">infixr</span> <span class=\"s\">\"→\"</span> <span class=\"n\">55</span><span class=\"o\">)</span>\n<span class=\"k\">translations</span>\n  <span class=\"s\">\"(x ∈ A) args → B\"</span> <span class=\"err\">⇀</span> <span class=\"s\">\"(x ∈ A) → args → B\"</span>\n  <span class=\"s\">\"(x ∈ A) → B\"</span> <span class=\"err\">⇌</span> <span class=\"s\">\"CONST set_dep_fun A (λx. B)\"</span>\n\n  <span class=\"s\">\"(x : A) args → B\"</span> <span class=\"err\">⇀</span> <span class=\"s\">\"(x : A) → args → B\"</span>\n  <span class=\"s\">\"(x : A) → B\"</span> <span class=\"err\">⇌</span> <span class=\"s\">\"CONST type_dep_fun A (λx. B)\"</span>\n  <span class=\"c\">(* Optimally, instead of the next two translations, I would love to say:</span>\n<span class=\"c\">     if `A → B` is of type `t` then use `type_fun` otherwise use `set_fun`. *)</span>\n  <span class=\"s\">\"(A :: t) → B\"</span> <span class=\"err\">⇌</span> <span class=\"s\">\"CONST type_fun A B\"</span>\n  <span class=\"s\">\"A → B\"</span> <span class=\"err\">⇌</span> <span class=\"s\">\"CONST set_fun A B\"</span>\n\n<span class=\"k\">declare</span> <span class=\"o\">[[</span><span class=\"n\">show_types</span><span class=\"o\">]]</span>\n<span class=\"kt\">term</span> <span class=\"s\">\"(x ∈ A) → B x\"</span>\n<span class=\"kt\">term</span> <span class=\"s\">\"(x : A) → B x\"</span>\n<span class=\"kt\">term</span> <span class=\"s\">\"A → (x ∈ B) → (C x)\"</span>\n<span class=\"kt\">term</span> <span class=\"s\">\"(A :: i) → (x ∈ B) → C x\"</span> <span class=\"c\">(*same as line above*)</span>\n<span class=\"kt\">term</span> <span class=\"s\">\"(A :: t) → (x : B) → (C x)\"</span>\n<span class=\"kt\">term</span> <span class=\"s\">\"(x ∈ A) → B → C x\"</span>\n<span class=\"kt\">term</span> <span class=\"s\">\"(x : A) → (B :: t) → C x\"</span>\n<span class=\"kt\">term</span> <span class=\"s\">\"(x : A) → B → C x\"</span> <span class=\"c\">(*fails*)</span>\n<span class=\"kt\">term</span> <span class=\"s\">\"A → B\"</span>\n<span class=\"kt\">term</span> <span class=\"s\">\"(A :: i) → B\"</span> <span class=\"c\">(*same as line above*)</span>\n<span class=\"kt\">term</span> <span class=\"s\">\"(A :: t) → B\"</span>\n<span class=\"kt\">term</span> <span class=\"s\">\"(A → B) :: t\"</span> <span class=\"c\">(*fails*)</span>\n<span class=\"kt\">term</span> <span class=\"s\">\"(A → B) = ((x ∈ A) → B)\"</span>\n<span class=\"kt\">term</span> <span class=\"s\">\"((A :: t) → B) = ((x : A) → B)\"</span>\n<span class=\"kt\">term</span> <span class=\"s\">\"(A → B) = ((x ∈ A) → B)\"</span>\n<span class=\"kt\">term</span> <span class=\"s\">\"(A → B) = ((x : A) → B)\"</span> <span class=\"c\">(*fails*)</span>\n\n<span class=\"k\">end</span>\n</code></pre></div>",
        "id": 268560723,
        "sender_full_name": "Kevin Kappelmann",
        "timestamp": 1642608065
    },
    {
        "content": "<p>I am not sure how this stuff works but could you use a parse translation? In a parse translation you can use arbitrary ML code to produce the result.</p>",
        "id": 268562093,
        "sender_full_name": "Lukas Stevens",
        "timestamp": 1642608567
    },
    {
        "content": "<p>I may be mistaken about this, but don't translations (including parse translations) work entirely on the syntactic stage, i.e. before the terms even have any type information at all?</p>",
        "id": 268564415,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1642609364
    },
    {
        "content": "<p>In that case, I think the only way to achieve what you want to do would be to add a checking stage that changes the placeholder constant of the input syntax into what you actually want it to be as soon as the type is known.</p>",
        "id": 268564671,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1642609458
    },
    {
        "content": "<p>This is pretty much what <code>adhoc_overloading</code> does.</p>",
        "id": 268564691,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1642609467
    },
    {
        "content": "<p>Of course, there is the fundamental problem of \"what happens if the type is neither <code>i</code> nor <code>t</code>\", or if the type is completely polymorphic. (<code>adhoc_overloading</code> then fails with an error message)</p>",
        "id": 268564827,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1642609528
    },
    {
        "content": "<p>Such additional checking phases are also notoriously problematic when you have several of them, since they can then interact with each other poorly (e.g. <code>adhoc_overloading</code> plus coercions)</p>",
        "id": 268564910,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1642609562
    },
    {
        "content": "<p>Then again I may also have completely misunderstood what you are trying to do; in that case just ignore my ramblings.</p>",
        "id": 268564966,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1642609577
    },
    {
        "content": "<p>As far as I can see (having skimmed the documentation), you are right Manuel and an additional phase during type checking would be necessary.</p>",
        "id": 268566459,
        "sender_full_name": "Kevin Kappelmann",
        "timestamp": 1642610174
    }
]