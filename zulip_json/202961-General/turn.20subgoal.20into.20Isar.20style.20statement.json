[
    {
        "content": "<p>I'm searching for an Isabelle method that turns subgoals into Isar style statements.<br>\nFor example,</p>\n<div class=\"codehilite\"><pre><span></span><code>⋀x y. P x ⟹ Q y ⟹ U x y\n</code></pre></div>\n<p>gets printed as</p>\n<div class=\"codehilite\"><pre><span></span><code>&quot;U x y&quot; if &quot;P x&quot; &quot;Q y&quot; for x y\n</code></pre></div>\n<p>in the output panel.</p>\n<p>I think, someone posted something like that on the mailing list. Anybody remembering that thread?</p>",
        "id": 226845498,
        "sender_full_name": "Max W. Haslbeck",
        "timestamp": 1613668365
    },
    {
        "content": "<p><a href=\"https://mailman46.in.tum.de/pipermail/isabelle-dev/2018-September/016496.html\">https://mailman46.in.tum.de/pipermail/isabelle-dev/2018-September/016496.html</a><br>\n<a href=\"https://gitlab.mpi-klsb.mpg.de/mfleury/isafol-clone/-/blob/24af98ae003c41fbbb427807c7b2769b593bf0c3/lib/Explorer.thy\">https://gitlab.mpi-klsb.mpg.de/mfleury/isafol-clone/-/blob/24af98ae003c41fbbb427807c7b2769b593bf0c3/lib/Explorer.thy</a></p>",
        "id": 226847932,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1613669421
    },
    {
        "content": "<p>Tagging <span class=\"user-mention\" data-user-id=\"233198\">@Mathias Fleury</span></p>",
        "id": 226847960,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1613669434
    },
    {
        "content": "<p>Florian Haftmann has one that is built-in</p>",
        "id": 226851153,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1613670800
    },
    {
        "content": "<p><a href=\"https://mailmanbroy.informatik.tu-muenchen.de/pipermail/isabelle-dev/2019-March/016796.html\">https://mailmanbroy.informatik.tu-muenchen.de/pipermail/isabelle-dev/2019-March/016796.html</a></p>",
        "id": 226851208,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1613670827
    },
    {
        "content": "<p>but the features are not the same. So you probably need to try both <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 226851381,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1613670902
    },
    {
        "content": "<p>I even mention the built-in one in the latest version: <a href=\"https://bitbucket.org/isafol/isafol/src/master/lib/Explorer.thy\">https://bitbucket.org/isafol/isafol/src/master/lib/Explorer.thy</a></p>",
        "id": 226853083,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1613671557
    },
    {
        "content": "<p>Thanks for tagging me <span class=\"user-mention\" data-user-id=\"232736\">@Manuel Eberl</span></p>",
        "id": 226856900,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1613673001
    },
    {
        "content": "<p>Late to the party, but I have recently thought about about these \"explore\" commands again.</p>\n<p>Does anyone understand the rational behind the current \"official\" version of producing \"show .... if .... for ...\" Isar statements?<br>\nDoing \"fix ... assume ... show ...\" as IIRC Mathias' tactic would do seem more reasonable/standard to me.</p>\n<p>Also, I think a much simpler command that produces \"subgoal for ... premises prems using prems apply -\" (or similar) would also sometimes be useful. This has not been implemented, right?</p>",
        "id": 235190160,
        "sender_full_name": "Simon Wimmer",
        "timestamp": 1618842719
    },
    {
        "content": "<p>I never use <code>{fix … assume … show}</code> anymore these days, almost aways these eigencontexts with <code>if</code>/<code>for</code></p>",
        "id": 235196941,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1618844880
    },
    {
        "content": "<p>Yeah, true, so I also do not use these blocks anymore but <code>have ... if ... for</code> (this is what <code>explore</code> gives). But for starting a proof I would always do <code>proof ... fix ... assume ... show ... qed</code> and with Florian's tool (<code>sketch</code> command) I would get <code>proof ... show ... if ... for ...</code>, which I find awkward.</p>",
        "id": 235209348,
        "sender_full_name": "Simon Wimmer",
        "timestamp": 1618849520
    },
    {
        "content": "<p>That might make sense. But I never really understood what these tools are for to begin with when you can just do <code>proof goal_cases</code></p>",
        "id": 235211098,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1618850228
    },
    {
        "content": "<p>One reason that I can imagine is that <code>goal_cases</code> is less readable</p>",
        "id": 235211450,
        "sender_full_name": "Lukas Stevens",
        "timestamp": 1618850381
    },
    {
        "content": "<p>(without seeing the output panel)</p>",
        "id": 235211473,
        "sender_full_name": "Lukas Stevens",
        "timestamp": 1618850393
    },
    {
        "content": "<p>If it wasn't such a pain to type everything in, then I would certainly prefer the more explicit approach. The <code>explore</code> command could solve that.</p>",
        "id": 235211730,
        "sender_full_name": "Lukas Stevens",
        "timestamp": 1618850499
    },
    {
        "content": "<p>It is particularly useful if you have, say, 39 proof obligations generated by a vcg. Then your proofs will break horribly with <code>proof goal_cases</code> when the code changes. But with <code>explore</code> you can get the explicit statements of all these goals quickly. I guess the refinement framework is the main reason why Mathias likes this tool <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span></p>",
        "id": 235215377,
        "sender_full_name": "Simon Wimmer",
        "timestamp": 1618852021
    },
    {
        "content": "<p>One advantage of the <code>show if</code> is that assumptionsare not shared across shows. This is only relevant if you have multiple goals.</p>",
        "id": 235219122,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1618853678
    },
    {
        "content": "<p>To give an example:</p>\n<div class=\"codehilite\"><pre><span></span><code>A ==&gt; B ==&gt; C\nA ==&gt; ~B ==&gt; C\n</code></pre></div>\n<p>The corresponding Isar proof is:</p>\n<div class=\"codehilite\"><pre><span></span><code>  assume A\n  assume B\n  show C\n     sorry\nnext\n  assume A\n  assume &quot;~B&quot;\n  show C\n     sorry\n</code></pre></div>\n<p>With the if version you could get:</p>\n<div class=\"codehilite\"><pre><span></span><code>  assume A\n  show C if B\n     sorry\n  show C if  &quot;~B&quot;\n     sorry\n</code></pre></div>\n<p>also making it possible to share consequences of <code>A</code>.</p>",
        "id": 235220147,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1618854142
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"233187\">@Simon Wimmer</span> in extreme cases for Refinement goals, I use even <code>context assumes ...</code> instead of <code>show</code>  (e.g., search for <code>context</code> on <a href=\"https://people.mpi-inf.mpg.de/~mfleury/IsaFoL/current/Weidenbach_Book/IsaSAT/IsaSAT_Lookup_Conflict.html\">https://people.mpi-inf.mpg.de/~mfleury/IsaFoL/current/Weidenbach_Book/IsaSAT/IsaSAT_Lookup_Conflict.html</a>)</p>",
        "id": 235220469,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1618854302
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"233187\">Simon Wimmer</span> <a href=\"#narrow/stream/202961-General/topic/turn.20subgoal.20into.20Isar.20style.20statement/near/235215377\">said</a>:</p>\n<blockquote>\n<p>It is particularly useful if you have, say, 39 proof obligations generated by a vcg. Then your proofs will break horribly with <code>proof goal_cases</code> when the code changes. But with <code>explore</code> you can get the explicit statements of all these goals quickly. I guess the refinement framework is the main reason why Mathias likes this tool <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span></p>\n</blockquote>\n<p>Okay, I see. That doesn't really occur in my life. <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 235233673,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1618859792
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"233187\">Simon Wimmer</span> <a href=\"#narrow/stream/202961-General/topic/turn.20subgoal.20into.20Isar.20style.20statement/near/235190160\">said</a>:</p>\n<blockquote>\n<p>Also, I think a much simpler command that produces \"subgoal for ... premises prems using prems apply -\" (or similar) would also sometimes be useful. This has not been implemented, right?</p>\n</blockquote>\n<p>Just in case anyone is interested, I have hacked this now: <a href=\"https://github.com/wimmers/explore-subgoal\">https://github.com/wimmers/explore-subgoal</a></p>",
        "id": 235368909,
        "sender_full_name": "Simon Wimmer",
        "timestamp": 1618934389
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"233187\">@Simon Wimmer</span>  is there a specific license for your changes or can I included them in my Explorer file?</p>",
        "id": 235375028,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1618936605
    },
    {
        "content": "<p>Please feel free to include them!</p>",
        "id": 235375390,
        "sender_full_name": "Simon Wimmer",
        "timestamp": 1618936766
    },
    {
        "content": "<p>Just a question: why didn't you use a config attribute to switch between cartouche and quotes? I think you could shorten your code with that.</p>",
        "id": 235378564,
        "sender_full_name": "Lukas Stevens",
        "timestamp": 1618938026
    },
    {
        "content": "<p>Hmmm good question.</p>",
        "id": 235380901,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1618939027
    },
    {
        "content": "<p>Either I did not know about them or I wanted type safety instead of using a string attribute. I don't remember.</p>",
        "id": 235380991,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1618939071
    },
    {
        "content": "<p>But this is definitely a good point. Thanks!</p>",
        "id": 235381099,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1618939108
    }
]