[
    {
        "content": "<p>I've been working on a project with large, repetitive proofs that benefit from Eisbach automation. However, I ran into the same problem as <a href=\"#narrow/channel/202961-General/topic/Schematics.20in.20Eisbach/near/318379598\"><span class=\"user-mention\" data-user-id=\"570503\">@Hanno Becker</span> </a> where the <code>match</code> method included with Eisbach seems to replace  schematic variables/terms in the proof goal with skolem variables/terms.</p>\n<p>This behaviour can be replicated in the following example, where the first <code>rule exI</code> tactic produces the schematic variable <code>?x</code>, then the <code>subgoal</code> tactic (?) replaces it with the skolem variable <code>x</code> which can not be instantiated within the subgoal (<code>...</code>).</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"s\">\"âˆƒx. P x\"</span>\n<span class=\"w\">  </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">rule</span><span class=\"w\"> </span><span class=\"n\">exI</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"n\">subgoal</span>\n<span class=\"w\">    </span><span class=\"ow\">...</span>\n</code></pre></div>\n<p>For my use case, it would be impractical to instantiate the schematic variables/terms when they are introduced. Instead, the repeated application of introduction rules usually resolves them. </p>\n<p>Thus, I developed a new <code>match</code> method which preserves schematic variables in proof goals.<br>\nThis is achieved by adding a flag <code>fix_schematics</code> and guards to the <code>focus_concl</code> method in <code>match_method.ML</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">focus_concl</span><span class=\"w\"> </span><span class=\"n\">fix_schematics</span><span class=\"w\"> </span><span class=\"n\">ctxt</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"n\">bindings</span><span class=\"w\"> </span><span class=\"n\">goal</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">  </span><span class=\"k\">let</span>\n<span class=\"w\">    </span><span class=\"n\">val</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"ow\">{</span><span class=\"k\">context</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ctxt'</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">concl</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">params</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">prems</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">asms</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">schematics</span><span class=\"ow\">}</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">goal'</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">      </span><span class=\"n\">Subgoal.focus_params</span><span class=\"w\"> </span><span class=\"n\">ctxt</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"n\">bindings</span><span class=\"w\"> </span><span class=\"n\">goal;</span>\n\n<span class=\"w\">    </span><span class=\"n\">val</span><span class=\"w\"> </span><span class=\"o\">((_,</span><span class=\"w\"> </span><span class=\"n\">inst</span><span class=\"o\">),</span><span class=\"w\"> </span><span class=\"n\">ctxt''</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Variable.import_inst</span><span class=\"w\"> </span><span class=\"n\">true</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">Thm.term_of</span><span class=\"w\"> </span><span class=\"n\">concl</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"n\">ctxt';</span>\n\n<span class=\"w\">    </span><span class=\"n\">val</span><span class=\"w\"> </span><span class=\"n\">schematic_terms</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">      </span><span class=\"n\">Vars.fold</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">fn</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">v</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">t</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"n\">&gt;</span><span class=\"w\"> </span><span class=\"n\">cons</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">v</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">Thm.cterm_of</span><span class=\"w\"> </span><span class=\"n\">ctxt''</span><span class=\"w\"> </span><span class=\"n\">t</span><span class=\"o\">))</span><span class=\"w\"> </span><span class=\"n\">inst</span><span class=\"w\"> </span><span class=\"o\">[]</span><span class=\"n\">;</span>\n\n<span class=\"w\">    </span><span class=\"n\">val</span><span class=\"w\"> </span><span class=\"n\">instantiate_goal</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"kp\">if</span><span class=\"w\"> </span><span class=\"n\">fix_schematics</span><span class=\"w\"> </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"n\">Thm.instantiate</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">TVars.empty</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">Vars.make</span><span class=\"w\"> </span><span class=\"n\">schematic_terms</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">else</span><span class=\"w\"> </span><span class=\"n\">I</span><span class=\"o\">)</span>\n<span class=\"w\">    </span><span class=\"n\">val</span><span class=\"w\"> </span><span class=\"n\">instantiate_concl</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"kp\">if</span><span class=\"w\"> </span><span class=\"n\">fix_schematics</span><span class=\"w\"> </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"n\">Thm.instantiate_cterm</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">TVars.empty</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">Vars.make</span><span class=\"w\"> </span><span class=\"n\">schematic_terms</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">else</span><span class=\"w\"> </span><span class=\"n\">I</span><span class=\"o\">)</span>\n<span class=\"w\">    </span><span class=\"n\">val</span><span class=\"w\"> </span><span class=\"n\">instantiate_schematics</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"kp\">if</span><span class=\"w\"> </span><span class=\"n\">fix_schematics</span><span class=\"w\"> </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"n\">fold</span><span class=\"w\"> </span><span class=\"n\">Vars.add</span><span class=\"w\"> </span><span class=\"n\">schematic_terms</span><span class=\"w\"> </span><span class=\"n\">else</span><span class=\"w\"> </span><span class=\"n\">I</span><span class=\"o\">)</span>\n\n<span class=\"w\">    </span><span class=\"n\">val</span><span class=\"w\"> </span><span class=\"n\">goal''</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">instantiate_goal</span><span class=\"w\"> </span><span class=\"n\">goal';</span>\n<span class=\"w\">    </span><span class=\"n\">val</span><span class=\"w\"> </span><span class=\"n\">concl'</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">instantiate_concl</span><span class=\"w\"> </span><span class=\"n\">concl;</span>\n<span class=\"w\">    </span><span class=\"n\">val</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">schematic_types</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">schematic_terms'</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">schematics;</span>\n<span class=\"w\">    </span><span class=\"n\">val</span><span class=\"w\"> </span><span class=\"n\">schematics'</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">schematic_types</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">instantiate_schematics</span><span class=\"w\"> </span><span class=\"n\">schematic_terms'</span><span class=\"o\">)</span><span class=\"n\">;</span>\n<span class=\"w\">  </span><span class=\"kp\">in</span>\n<span class=\"w\">    </span><span class=\"o\">(</span><span class=\"ow\">{</span><span class=\"k\">context</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ctxt''</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">concl</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">concl'</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">params</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">params</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">prems</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">prems</span><span class=\"o\">,</span>\n<span class=\"w\">      </span><span class=\"n\">schematics</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">schematics'</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">asms</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">asms</span><span class=\"ow\">}</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Subgoal.focus</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">goal''</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"k\">end</span><span class=\"n\">;</span>\n</code></pre></div>\n<p>I wanted to share these changes, though I am unsure if an AFP entry, or a change to the Eisbach library is the best approach. Could someone advise?</p>",
        "id": 481973544,
        "sender_full_name": "Matt",
        "timestamp": 1731424827
    },
    {
        "content": "<p>This sounds like something to add to Eisbach, in which case you want to contact the local expert so they can have a look at the proposed changes.<br>\nI don't know who the current expert is for Eisbach, perhaps <span class=\"user-mention\" data-user-id=\"234178\">@Fabian Immler</span> or <span class=\"user-mention\" data-user-id=\"433149\">@Maximilian SchÃ¤ffeler</span> ?</p>",
        "id": 482120745,
        "sender_full_name": "Fabian Huch",
        "timestamp": 1731488404
    },
    {
        "content": "<p>Unfortunately, not at all. I put together a single Eisbach method 6 years ago but donâ€™t remember much.</p>",
        "id": 482456469,
        "sender_full_name": "Maximilian SchÃ¤ffeler",
        "timestamp": 1731608959
    }
]