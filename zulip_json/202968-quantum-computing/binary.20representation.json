[
    {
        "content": "<p>I decided to create a dedicated topic for <code>Binary_Rep.thy</code> to avoid to clutter  Deutsch-Jozsa.<br>\nStrangely enough if I try </p>\n<div class=\"codehilite\"><pre><span></span>using sum_subtractf[of &quot;(λi. of_nat (m mod 2^(n-i)))&quot; &quot;λi. of_nat (m mod 2^(n - Suc i))&quot; &quot;{..&lt;n}&quot;]\n</pre></div>\n\n\n<p>then in the bottom window I got </p>\n<div class=\"codehilite\"><pre><span></span>proof (prove)\nusing this:\n  (∑x&lt;n. of_nat (m mod 2 ^ (n - x)) - of_nat (m mod 2 ^ (n - Suc x))) =\n  (∑x&lt;n. of_nat (m mod 2 ^ (n - x))) - (∑x&lt;n. of_nat (m mod 2 ^ (n - Suc x)))\n\ngoal (1 subgoal):\n 1. (∑i&lt;n. of_nat (m mod 2 ^ (n - i)) - of_nat (m mod 2 ^ (n - Suc i))) =\n    (∑i&lt;n. of_nat (m mod 2 ^ (n - i))) - (∑i&lt;n. of_nat (m mod 2 ^ (n - Suc i)))\n</pre></div>\n\n\n<p>but Sledgehammer is unable to conclude.  Am I missing something ?</p>",
        "id": 170932667,
        "sender_full_name": "Anthony Bordg",
        "timestamp": 1563225475
    },
    {
        "content": "<p>I am not sure about that, but I have encountered similar situations.</p>",
        "id": 170933662,
        "sender_full_name": "Yijun He",
        "timestamp": 1563226258
    },
    {
        "content": "<p>I solved them by adding a quantifier like  <code>⋀n m</code> to the lemma being used. But it seems unreasonable to modify the lemma <code>sum_subtractf</code> in this case.</p>",
        "id": 170933790,
        "sender_full_name": "Yijun He",
        "timestamp": 1563226384
    },
    {
        "content": "<p>I tried <code>sledgehammer_params[verbose = true]</code> and <code>sledgehammer_params[debug = true]</code>, but it does not help.</p>",
        "id": 170934591,
        "sender_full_name": "Anthony Bordg",
        "timestamp": 1563227102
    },
    {
        "content": "<p>Could it be that it has something to do with f and g having to be of the right type? <br>\nf g :: \"'b ⇒'a::ab_group_add\"<br>\nI had such a problem before where this was the solution and it gave similar error messages</p>",
        "id": 170935816,
        "sender_full_name": "Hanna Lachnitt",
        "timestamp": 1563228155
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"228787\">@Hanna Lachnitt</span>  I previously tried <code>sum_subtractf_nat</code> (assuming the required assumption is satisfied). It has the advantage of using f g:: \"`a  =&gt; nat\", but Sledgehammer timed out. Now, I increased  the Sledgehammer Timeout option and tried it again and metis found a proof. The only problem is that the required assumption is not satisfied, take for instance <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>n</mi><mo>=</mo><mi>m</mi><mo>=</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">n=m=1</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">n</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">m</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>i</mi><mo>=</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">i=0</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.65952em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">i</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span> then <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mn>1</mn><mo>&gt;</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">1&gt;0</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68354em;vertical-align:-0.0391em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&gt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span>.</p>",
        "id": 170938622,
        "sender_full_name": "Anthony Bordg",
        "timestamp": 1563230891
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"228785\">@Yijun He</span> In <code>Basics.thy</code> I substituted <code>sum_of_index_diff</code> for <code>sum_diff</code> and I also generalized the type involved from <code>complex</code> to <code>comm_monoid_add</code>. I made the corresponding change in <code>MoreTensor.thy</code> where <code>sum_diff</code> was used.</p>",
        "id": 171003199,
        "sender_full_name": "Anthony Bordg",
        "timestamp": 1563294589
    },
    {
        "content": "<p>The last proof in <code>Binary_Nat.thy</code> has been completed. So, hopefully we are done with this theory. I will just need to tidy up the proofs.</p>",
        "id": 171026828,
        "sender_full_name": "Anthony Bordg",
        "timestamp": 1563310687
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"228787\">@Hanna Lachnitt</span> <span class=\"user-mention\" data-user-id=\"228785\">@Yijun He</span> <br>\n<strong>Take-home message</strong>: if you have some trouble with the type system, try to \"generalize\" some of the types involved.<br>\nIn this case the trouble came from the fact that one wants to simultaneously see a sum as a sum of natural numbers and as a sum of integers when one regroups the terms in the sum to notice that they cancel except for the first and last ones.<br>\nSo, I simply substituted <code>bin_rep:: \"nat ⇒ int ⇒ int list\"</code> for <code>bin_rep:: \"nat ⇒ nat ⇒ nat list\"</code> and added the assumption <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>m</mi><mo>≥</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">m\\geq 0</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7719400000000001em;vertical-align:-0.13597em;\"></span><span class=\"mord mathdefault\">m</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≥</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span> for the integer <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>m</mi></mrow><annotation encoding=\"application/x-tex\">m</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">m</span></span></span></span> in <code>bin_rep n m</code> whenever it was necessary.</p>",
        "id": 171029303,
        "sender_full_name": "Anthony Bordg",
        "timestamp": 1563312868
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"228785\">@Yijun He</span>  Your strategy for the proof was the right one.</p>",
        "id": 171029853,
        "sender_full_name": "Anthony Bordg",
        "timestamp": 1563313169
    },
    {
        "content": "<p>I agree with <span class=\"user-mention\" data-user-id=\"228787\">@Hanna Lachnitt</span>, it's not completely satisfactory. <code>bin_rep n m</code> should really be a list of natural numbers. If someone succeeds in completing the last proof <code>bin_rep_eq</code> while having the type </p>\n<div class=\"codehilite\"><pre><span></span>bin_rep_eq:: &quot;nat ⇒ nat ⇒ nat list&quot;\n</pre></div>\n\n\n<p>, he should feel free to make a PR.<br>\nHowever, the use of integers here does not seem to cause any particular trouble later in <code>Deutsch_Jozsa.thy</code>.</p>",
        "id": 171108561,
        "sender_full_name": "Anthony Bordg",
        "timestamp": 1563390541
    },
    {
        "content": "<p>I finally had a proper look at it and found a proof for bin_rep_eq  such that <br>\n<code>bin_rep:: \"nat =&gt; nat =&gt; nat list</code><br>\nIs it still needed? Maybe we can discuss it on Monday :) I would prefer it conceptually (since it is a list of natural numbers) and also it should make less work when used in other theories.</p>",
        "id": 171780748,
        "sender_full_name": "Hanna Lachnitt",
        "timestamp": 1564153140
    },
    {
        "content": "<p>Very nice. Yes, I think it will be useful to simplify a little bit the theories that rely on it. <br>\nWe should discuss it next Monday and then make the changes accordingly.</p>",
        "id": 171781140,
        "sender_full_name": "Anthony Bordg",
        "timestamp": 1564153398
    },
    {
        "content": "<p>Now, thanks to <span class=\"user-mention\" data-user-id=\"228787\">@Hanna Lachnitt</span> we have a satisfying <code>Binary_Nat</code> theory.</p>",
        "id": 171949915,
        "sender_full_name": "Anthony Bordg",
        "timestamp": 1564410435
    },
    {
        "content": "<p>Please change <code>Deutsch_Jozsa.thy</code> and <code>Quantum_Fourier_Transform.thy</code> accordingly.</p>",
        "id": 171950124,
        "sender_full_name": "Anthony Bordg",
        "timestamp": 1564410589
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"228787\">Hanna Lachnitt</span> <span class=\"user-mention silent\" data-user-id=\"228785\">Yijun He</span> <br>\n<strong>Take-home message</strong>: if you have some trouble with the type system, try to \"generalize\" some of the types involved.<br>\nIn this case the trouble came from the fact that one wants to simultaneously see a sum as a sum of natural numbers and as a sum of integers when one regroups the terms in the sum to notice that they cancel except for the first and last ones.<br>\nSo, I simply substituted <code>bin_rep:: \"nat ⇒ int ⇒ int list\"</code> for <code>bin_rep:: \"nat ⇒ nat ⇒ nat list\"</code> and added the assumption <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>m</mi><mo>≥</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">m\\geq 0</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7719400000000001em;vertical-align:-0.13597em;\"></span><span class=\"mord mathdefault\">m</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≥</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span> for the integer <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>m</mi></mrow><annotation encoding=\"application/x-tex\">m</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">m</span></span></span></span> in <code>bin_rep n m</code> whenever it was necessary.</p>\n</blockquote>\n<p>For the record, remember that it might be useful to declare the <code>[[show_types = true]]</code> option, then one is able to see the types of the printed outputs in the bottom window.</p>",
        "id": 171950925,
        "sender_full_name": "Anthony Bordg",
        "timestamp": 1564411116
    }
]