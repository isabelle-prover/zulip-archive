[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"228785\">@Yijun He</span>  I'm going to work on the <code>sorry</code> you temporarily left.</p>",
        "id": 169648525,
        "sender_full_name": "Anthony Bordg",
        "timestamp": 1562247065
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"228785\">@Yijun He</span>  There might be a problem with the first <code>sorry</code> in <code>qft_no_swap_of_unit_vec</code>. Maybe some additional assumptions are needed. Please see the attached file with my comments.<br>\n<a href=\"/user_uploads/14278/J_Khw7U6Y2woblebPMF1fTLX/Quantum_Fourier_Transform_draft.thy\" target=\"_blank\" title=\"Quantum_Fourier_Transform_draft.thy\">Quantum_Fourier_Transform_draft.thy</a></p>",
        "id": 169654466,
        "sender_full_name": "Anthony Bordg",
        "timestamp": 1562252228
    },
    {
        "content": "<p>Yes I also found it, and I just pushed a fix to my fork</p>",
        "id": 169655033,
        "sender_full_name": "Yijun He",
        "timestamp": 1562252783
    },
    {
        "content": "<p>I also have a question about induction: how can I impose a restriction to the induction variable? For example, I want to induct in the range 0 &lt;= m &lt;= n-1, but using \"proof (induction m)\" stops me from using the assumption \"m&lt;n\" in case (Suc m), since m is already specified in this case</p>",
        "id": 169655316,
        "sender_full_name": "Yijun He",
        "timestamp": 1562253089
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"228785\">@Yijun He</span> The fastest method to get an answer to your question is to ask Larry before he leaves his office at 5pm! <span aria-label=\"running\" class=\"emoji emoji-1f3c3\" role=\"img\" title=\"running\">:running:</span></p>",
        "id": 169655837,
        "sender_full_name": "Anthony Bordg",
        "timestamp": 1562253621
    },
    {
        "content": "<p>It seems that he is not in his office today <span aria-label=\"sweat\" class=\"emoji emoji-1f613\" role=\"img\" title=\"sweat\">:sweat:</span></p>",
        "id": 169656055,
        "sender_full_name": "Yijun He",
        "timestamp": 1562253877
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"228785\">@Yijun He</span> OK, I had no luck with the documentation. For an induction on <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>m</mi></mrow><annotation encoding=\"application/x-tex\">m</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">m</span></span></span></span> with the specified range,  in the case <code>Suc m</code> you should be able to use <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>m</mi><mo>&lt;</mo><mi>n</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\"> m &lt; n-1</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mord mathdefault\">m</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathdefault\">n</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span>, not <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>m</mi><mo>&lt;</mo><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">m&lt;n</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mord mathdefault\">m</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">n</span></span></span></span>, so Isabelle is right. Can you ask the <a href=\"https://isabelle.in.tum.de/\" target=\"_blank\" title=\"https://isabelle.in.tum.de/\">mailing list</a> (Distribution &amp; Support) ?</p>",
        "id": 169656838,
        "sender_full_name": "Anthony Bordg",
        "timestamp": 1562254797
    },
    {
        "content": "<p>I found a way to use the assumption just now, but it looks a bit messy: I added \"m&gt;n or...\" to the induction hypothesis of qft_no_swap_of_unit_vec, which allows me to trivially say \"m &gt; n ==&gt; (Suc m) &gt; n\" when m is greater than n.</p>",
        "id": 169658795,
        "sender_full_name": "Yijun He",
        "timestamp": 1562257043
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"228785\">@Yijun He</span>  <code>ind_from_1</code> and its use in <code>pow_tensor_dim_row</code> by <span class=\"user-mention\" data-user-id=\"228787\">@Hanna Lachnitt</span>  in her theory <a href=\"/user_uploads/14278/eDCl-GPALltWw15K7ndhdehr/Deutsch_Jozsa.thy\" target=\"_blank\" title=\"Deutsch_Jozsa.thy\">Deutsch_Jozsa.thy</a> might be a source of inspiration wrt the problem we discuss earlier.</p>",
        "id": 169736270,
        "sender_full_name": "Anthony Bordg",
        "timestamp": 1562361360
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"228785\">@Yijun He</span> I'm going to take care of the simplification of <code>uniq_select_index</code>.</p>",
        "id": 169769329,
        "sender_full_name": "Anthony Bordg",
        "timestamp": 1562423590
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"228785\">@Yijun He</span> In <code>uniq_select_index</code> I'm thinking about refactoring the statement <code>⋀a. (a∈{..&lt;n+1} ⟹ i mod (2^a) = j mod (2^a))</code>  under the appropriate assumptions. Do you think it might be a useful lemma on its own ?</p>",
        "id": 169870864,
        "sender_full_name": "Anthony Bordg",
        "timestamp": 1562593942
    },
    {
        "content": "<p>I am not sure about that</p>",
        "id": 169871018,
        "sender_full_name": "Yijun He",
        "timestamp": 1562594044
    },
    {
        "content": "<p>That statement requires the assumption that <code>⋀a. (a∈{..&lt;n} ⟹ select_index n a i = select_index n a j)</code>, which seems too specific</p>",
        "id": 169871285,
        "sender_full_name": "Yijun He",
        "timestamp": 1562594201
    },
    {
        "content": "<p>Ok, in that case I don't see a way to shorten the proof by refactoring or changing its structure. But at least I can try to clean the proof of <code>⋀a. (a∈{..&lt;n+1} ⟹ i mod (2^a) = j mod (2^a))</code> which seems the longest step.</p>",
        "id": 169871429,
        "sender_full_name": "Anthony Bordg",
        "timestamp": 1562594314
    },
    {
        "content": "<p>OK, thanks!</p>",
        "id": 169871469,
        "sender_full_name": "Yijun He",
        "timestamp": 1562594364
    },
    {
        "content": "<p>On the other hand, it's true that <code>⋀a. (a∈{..&lt;n} ⟹ select_index n a i = select_index n a j)</code> is specific, but refactoring may be the first step towards putting all this fancy stuff about <code>select_index</code> into a dedicated theory, or even into a specific section of the <code>Basics</code> theory.</p>",
        "id": 169871727,
        "sender_full_name": "Anthony Bordg",
        "timestamp": 1562594564
    },
    {
        "content": "<p>That might be a better solution, as it is indeed a basic/intuitive result of number theory/modular arithmetic</p>",
        "id": 169872025,
        "sender_full_name": "Yijun He",
        "timestamp": 1562594771
    },
    {
        "content": "<p>Of course, in that case we can directly put the whole proof <code>uniq_select_index </code> somewhere else, but I still feel the proof is too long. Also, somewhere else we might have burried some lemmas related to <code>select_index</code> inside proofs. In that case, refactoring and then putting that stuff in a dedicated place is the way to go.</p>",
        "id": 169872436,
        "sender_full_name": "Anthony Bordg",
        "timestamp": 1562595087
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"228785\">@Yijun He</span> Inside the syntax <code>case (Suc a)</code> you can't write <code>a + 1</code>, but everywhere else in the proof  note that you can and should write <code>a + 1</code>, since we do not want the code to feel alien for any ordinary  mathematician.</p>",
        "id": 169876971,
        "sender_full_name": "Anthony Bordg",
        "timestamp": 1562598118
    },
    {
        "content": "<p>I am not sure why, but sometimes <code>auto</code> might fail when I change <code>Suc k</code> to <code>k+1</code> (and sometimes it works properly).</p>",
        "id": 169877342,
        "sender_full_name": "Yijun He",
        "timestamp": 1562598366
    },
    {
        "content": "<p>In that specific case I had no trouble with auto. <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 169877438,
        "sender_full_name": "Anthony Bordg",
        "timestamp": 1562598462
    },
    {
        "content": "<p>OK, I will change it to <code>k + 1</code> whenever possible.</p>",
        "id": 169877601,
        "sender_full_name": "Yijun He",
        "timestamp": 1562598600
    },
    {
        "content": "<p>I did it for <code>uniq_select_index</code>.</p>",
        "id": 169877720,
        "sender_full_name": "Anthony Bordg",
        "timestamp": 1562598677
    },
    {
        "content": "<p>So, keep <code>Suc k</code> if for whatever reason you have some trouble and write <code>k + 1</code> whenever possible.</p>",
        "id": 169879322,
        "sender_full_name": "Anthony Bordg",
        "timestamp": 1562599859
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"228785\">@Yijun He</span>  I cleaned the proof of <code>uniq_select_index</code> (please see my PR). From that proof I factored out two lemmas <code>mod_pow_2_eq</code> and <code>select_index_eq_to_mod_eq</code>. It's unlikely that <code>select_index_eq_to_mod_eq</code> will be useful in the future, but I believe <code>mod_pow_2_eq</code> may be useful. Also, the whole thing is now much more legible than previously.</p>",
        "id": 169894961,
        "sender_full_name": "Anthony Bordg",
        "timestamp": 1562612016
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"228778\">@Anthony Bordg</span>  I am currently struggling with the complicated expressions in quantum Fourier transform. In the book, the vectors are expressed as the tensor product of n qubits, but I am not sure about how to do that in Isabelle (product and sum require the operators to be <code>comm_monoid</code>, which doesn't work for tensor product and even vector addition), and my current expressions using products and <code>select_index</code> seems too complicated to work with. Could you give me some advice about it? Many thanks.</p>",
        "id": 170454090,
        "sender_full_name": "Yijun He",
        "timestamp": 1562679947
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"228785\">@Yijun He</span> vector  addition is obviously a monoid law (for any given dimension), so I would be very surprised if it's not already proven, and if it's not then we need to prove it.</p>",
        "id": 170455157,
        "sender_full_name": "Anthony Bordg",
        "timestamp": 1562680699
    },
    {
        "content": "<p>For example, when I try to make a statement <code>\"v = (∑k&lt;n. unit_vec n k)\"</code> (this is incorrect, but the variable types should be correct), Isabelle gives an error message saying <code>No type arity Matrix.vec :: comm_monoid_add</code></p>",
        "id": 170455785,
        "sender_full_name": "Yijun He",
        "timestamp": 1562681124
    },
    {
        "content": "<p>Can I find your draft on GitHub ? Otherwise, please send me your file.</p>",
        "id": 170455985,
        "sender_full_name": "Anthony Bordg",
        "timestamp": 1562681262
    },
    {
        "content": "<p>I just pushed my updates to GitHub.</p>",
        "id": 170456277,
        "sender_full_name": "Yijun He",
        "timestamp": 1562681433
    },
    {
        "content": "<p>I added a test lemma <code>sum_of_unit_vec</code>, which uses the exact statement above and should give an error message.</p>",
        "id": 170456337,
        "sender_full_name": "Yijun He",
        "timestamp": 1562681494
    },
    {
        "content": "<p><code>unit_vec n k</code> is of type <code>complex Matrix.vec</code>. Now, if you look at the theory <code>Matrix.thy</code>, you see the lemma <code>comm_monoid_vec</code>, where the locale <code>comm_monoid</code> is introduced in <code>Group.thy</code>.  But, <code>comm_monoid_add</code> is a class introduced in <code>Groups.thy</code>.</p>",
        "id": 170457293,
        "sender_full_name": "Anthony Bordg",
        "timestamp": 1562682114
    },
    {
        "content": "<p>So, it's enough to prove <code>comm_monoid_add</code> of the set of complex vectors of a given dimension.  I will do that.</p>",
        "id": 170457534,
        "sender_full_name": "Anthony Bordg",
        "timestamp": 1562682244
    },
    {
        "content": "<p>thanks!</p>",
        "id": 170457837,
        "sender_full_name": "Yijun He",
        "timestamp": 1562682401
    },
    {
        "content": "<p>Just to show a different approach. My solution for expressing \"v = (∑k&lt;n. unit_vec n k)\" would be to go from \"complex vec\" to \"nat ell2\" using my function \"vec_to_ell2\". The type \"nat ell2\" is the complex Hilbert space of square-summable sequences of complex numbers (in particular comm_monoid). In order to return to \"complex vec\" from \"nat ell2\", I use the function \"ell2_to_vec\". Indeed, \"unit_vec n k\" goes to what I call \"ket k\" in \"nat ell2\". <a href=\"https://github.com/dominique-unruh/bounded-operators/blob/master/Finite_Dimensional_Case.thy\" target=\"_blank\" title=\"https://github.com/dominique-unruh/bounded-operators/blob/master/Finite_Dimensional_Case.thy\">Finite_Dimensional_Case.thy</a></p>",
        "id": 170458175,
        "sender_full_name": "Jose Manuel Rodríguez Caballero",
        "timestamp": 1562682574
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"228785\">@Yijun He</span>  Even better, I browsed the theory <code>Matrix.thy</code> and I discovered that one has the definition <code>finsum_vec</code>. I think this is the definition you want to use here and the corresponding lemmas they proved to handle such sums.</p>",
        "id": 170462513,
        "sender_full_name": "Anthony Bordg",
        "timestamp": 1562685290
    },
    {
        "content": "<p><code>finsum_vec</code> seems to work now. Many thanks!</p>",
        "id": 170463978,
        "sender_full_name": "Yijun He",
        "timestamp": 1562686277
    },
    {
        "content": "<p>The only thing lacking is a nice notation like <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>∑</mo></mrow><annotation encoding=\"application/x-tex\">\\sum</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.00001em;vertical-align:-0.25001em;\"></span><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-0.0000050000000000050004em;\">∑</span></span></span></span> for <code>finsum_vec</code>, but we can introduce it as an abbreviation.</p>",
        "id": 170464118,
        "sender_full_name": "Anthony Bordg",
        "timestamp": 1562686349
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"228785\">@Yijun He</span> About the use of <code>Suc n</code> vs <code>n+1</code> <a href=\"http://proofcraft.org/blog/isabelle-style-part2.html\" target=\"_blank\" title=\"http://proofcraft.org/blog/isabelle-style-part2.html\">Part 2</a> of the style guide (7th bullet) seems to have a point when it says that it depends on the distinction between top-level lemmas that you may want to present to people and lemmas that are used in further proofs as a convenient scaffolding in the formalization process. For the latter, normal forms are fine and may help automation.</p>",
        "id": 171120905,
        "sender_full_name": "Anthony Bordg",
        "timestamp": 1563400482
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"228785\">@Yijun He</span> This afternoon I plan to work on the proof of <code>qubits_tensor_prod</code>. Is that ok with you ?</p>",
        "id": 171257379,
        "sender_full_name": "Anthony Bordg",
        "timestamp": 1563543219
    },
    {
        "content": "<p>That would be great, thanks! Actually it still needs some assumptions on the functions f and g's. I am still working on the proof of <code>qft_no_swap_of_unit_vec</code>.</p>",
        "id": 171257649,
        "sender_full_name": "Yijun He",
        "timestamp": 1563543424
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"228785\">@Yijun He</span> done. But, for the proof the associativity of the tensor product of matrices is needed. So, I'm going to prove this associativity in <code>Tensor.thy</code>.</p>",
        "id": 171333563,
        "sender_full_name": "Anthony Bordg",
        "timestamp": 1563640076
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"228785\">@Yijun He</span> Probably due to the changes in <code>Binary_Nat.thy</code> your proof of <code>select_index_eq_bin_rep</code> is broken. The bad thing: I don't get a proof without smt.</p>",
        "id": 171345161,
        "sender_full_name": "Anthony Bordg",
        "timestamp": 1563661843
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"228785\">@Yijun He</span> In <code>qubits_rep</code> I changed <code>select_index n j i</code> to <code>select_index n i j</code> (and made the corresponding changes). <br>\nIndeed, in <code>Quantum.thy</code> <code>select_index</code> is defined as</p>\n<div class=\"codehilite\"><pre><span></span>select_index n i j ≡ (i≤n-1) ∧ (j≤2^n - 1) ∧ (j mod 2^(n-i) ≥ 2^(n-1-i)).\n</pre></div>\n\n\n<p>It's confusing to use the same letters but with a permutation.</p>",
        "id": 171345365,
        "sender_full_name": "Anthony Bordg",
        "timestamp": 1563662395
    },
    {
        "content": "<p>Associativity for the tensor product of complex matrices done.</p>",
        "id": 171364843,
        "sender_full_name": "Anthony Bordg",
        "timestamp": 1563701527
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"228785\">@Yijun He</span> I made a PR in your master branch. Also, <code>Tensor.thy</code> is up-to-date in my master branch.</p>",
        "id": 171366874,
        "sender_full_name": "Anthony Bordg",
        "timestamp": 1563705203
    },
    {
        "content": "<p>Thanks! Pull request merged.</p>",
        "id": 171367035,
        "sender_full_name": "Yijun He",
        "timestamp": 1563705473
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"228785\">@Yijun He</span> Please tell me which <code>sorry</code> you want me to tackle next.</p>",
        "id": 171435503,
        "sender_full_name": "Anthony Bordg",
        "timestamp": 1563805960
    },
    {
        "content": "<p>Maybe the <code>sorry</code> in <code>qft_no_swap_of_unit_vec</code>? Now I am not even sure whether my formulation is correct. Many thanks.</p>",
        "id": 171435870,
        "sender_full_name": "Yijun He",
        "timestamp": 1563806208
    },
    {
        "content": "<p>Ok, in that case I will work on the first <code>sorry</code> in <code>qft_no_swap_of_unit_vec</code>.</p>",
        "id": 171436068,
        "sender_full_name": "Anthony Bordg",
        "timestamp": 1563806342
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"228785\">@Yijun He</span> In the book what is the corresponding element to <code>qft_no_swap n m v</code> ?</p>",
        "id": 171440394,
        "sender_full_name": "Anthony Bordg",
        "timestamp": 1563809354
    },
    {
        "content": "<p>It should be an intermediate state of the expression (5.17), where <code>v</code> is the unit vector |j⟩.</p>",
        "id": 171440591,
        "sender_full_name": "Yijun He",
        "timestamp": 1563809522
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"228785\">@Yijun He</span>  We have to do some reverse engineering here if we have Shor's algorithm in mind. To what extent do we need the quantum Fourier Transform to formalize Shor's algorithm ?</p>",
        "id": 171778286,
        "sender_full_name": "Anthony Bordg",
        "timestamp": 1564151383
    },
    {
        "content": "<p>Proving correctness of Shor's algorithm seems to need the correctness of inverse Quantum Fourier Transform.</p>",
        "id": 171779270,
        "sender_full_name": "Yijun He",
        "timestamp": 1564152091
    },
    {
        "content": "<blockquote>\n<p>Proving correctness of Shor's algorithm seems to need the correctness of inverse Quantum Fourier Transform.</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"228785\">@Yijun He</span>  Yes, but this is not what I meant. <br>\nAs usual in mathematics we want to make our life easier, at least to start and generalize eventually. So, If we start with the quantum Fourier transform on 3 qubits for instance, to avoid a difficult and messy formalization at least at the beginning, then to what extent the nice applications of the quantum Fourier transform still make sense ?</p>",
        "id": 171779838,
        "sender_full_name": "Anthony Bordg",
        "timestamp": 1564152514
    },
    {
        "content": "<p>I think quantum Fourier transform is just a faster way of computing the classical Fourier transform on qubits, so Shor's algorithm works (more slowly, but still correctly) even with the classical Fourier transform, and it doesn't depend on any nice property of the quantum one.</p>",
        "id": 171780608,
        "sender_full_name": "Yijun He",
        "timestamp": 1564153048
    },
    {
        "content": "<blockquote>\n<p>I think quantum Fourier transform is just a faster way of computing the classical Fourier transform on qubits, so Shor's algorithm works (more slowly, but still correctly) even with the classical Fourier transform, and it doesn't depend on any nice property of the quantum one.</p>\n</blockquote>\n<p>Yes, you're right and actually one could say the same thing about anything in quantum computing, it's \"just\" a way to speed up classical algorithms. But, the fast Fourier transform is already in the  AFP and we want to contribute something new. Moreover, it would be a shame to lose your nice work on the quantum Fourier transform, but to avoid to get stuck we may need, at least temporarily, to assume a fixed number of qubits, then the formalization should be more workable.</p>",
        "id": 171782653,
        "sender_full_name": "Anthony Bordg",
        "timestamp": 1564154518
    },
    {
        "content": "<p>Hey :) I believe that I found a way to formalize quantum Fourier tranform without things getting  so complicated in the first place. My controlled R gate is just a 4x4 matrix (as in the literature) and I use swapping to get the qubit needed in front of the unit vector (this seems to be done in practice as well). I am not entirely sure if this will avoid getting in trouble (it needs some unit vector decomposition lemmas) but I am pretty confident. <span class=\"user-mention\" data-user-id=\"228785\">@Yijun He</span>  do you feel this is a way I should pursue or do you think the current formalization is fixable? I will also have a more thoroughly look at the current file once I finish with Grover.</p>",
        "id": 173007985,
        "sender_full_name": "Hanna Lachnitt",
        "timestamp": 1565600471
    },
    {
        "content": "<p>I still think the current proof is fixable, but a 4x4 controlled R gate sounds much better than the current proof. It would be great if you can help with the formalization of quantum Fourier transform.</p>",
        "id": 173013281,
        "sender_full_name": "Yijun He",
        "timestamp": 1565606442
    },
    {
        "content": "<blockquote>\n<p>Hey :) I believe that I found a way to formalize quantum Fourier tranform without things getting  so complicated in the first place. My controlled R gate is just a 4x4 matrix (as in the literature) and I use swapping to get the qubit needed in front of the unit vector (this seems to be done in practice as well).</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"228787\">@Hanna Lachnitt</span> <span class=\"user-mention\" data-user-id=\"228785\">@Yijun He</span>  It sounds promising.</p>",
        "id": 173032386,
        "sender_full_name": "Anthony Bordg",
        "timestamp": 1565623061
    },
    {
        "content": "<p>Until now everything worked out, although of course there could be troubles later. I uploaded a first tentative theory  in a QFT branch in my fork where I tried out my ideas. Everything is still under construction (especially some indices might be wrong). I hope I did not just do nonsense or made a stupid mistake <span aria-label=\"fear\" class=\"emoji emoji-1f628\" role=\"img\" title=\"fear\">:fear:</span> However, I feel with this new approach proving becomes more difficult in terms of thinking about what parameters to use before proving something but the proofs themselves are rather easy now. And I feel that its  well understandable for a reader especially with some explanations</p>",
        "id": 173363594,
        "sender_full_name": "Hanna Lachnitt",
        "timestamp": 1565952363
    },
    {
        "content": "<p>The idea behind the approach is not to define a matrix R_k with takes a huge unit vector and has to select all indices of qubits i and k to extend the binary fraction as this creates complexity. Instead swap the needed qubit <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi mathvariant=\"normal\">∣</mi><msub><mi>j</mi><mi>k</mi></msub><mo stretchy=\"false\">⟩</mo></mrow><annotation encoding=\"application/x-tex\">|j_k\\rangle</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">∣</span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.05724em;\">j</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33610799999999996em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.05724em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">⟩</span></span></span></span> outside of unit vector <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi mathvariant=\"normal\">∣</mi><msub><mi>j</mi><mi>l</mi></msub><mo separator=\"true\">,</mo><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><mo separator=\"true\">,</mo><msub><mi>j</mi><mi>n</mi></msub><mo stretchy=\"false\">⟩</mo></mrow><annotation encoding=\"application/x-tex\">| j_l,...,j_n \\rangle</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">∣</span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.05724em;\">j</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33610799999999996em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.05724em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.01968em;\">l</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">.</span><span class=\"mord\">.</span><span class=\"mord\">.</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.05724em;\">j</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.05724em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">⟩</span></span></span></span> (which is just a tensor product of single qubits, and <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>j</mi><mi>k</mi></msub></mrow><annotation encoding=\"application/x-tex\">j_k</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.85396em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.05724em;\">j</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33610799999999996em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.05724em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> corresponds to the qubit at position k). Then, apply a 4x4 CR gate to the tensor product of this two qubits i and k. Since the second qubit is left untouched by this operation it can just be swapped back afterwards. This corresponds to an application of a <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>R</mi><mi>k</mi></msub></mrow><annotation encoding=\"application/x-tex\">R_k</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.00773em;\">R</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33610799999999996em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.00773em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> gate to qubit i.</p>",
        "id": 173363807,
        "sender_full_name": "Hanna Lachnitt",
        "timestamp": 1565952643
    },
    {
        "content": "<p>The file is still messy but I felt it was better to involve you in the process, I will make it more readable and add further proofs, so please pull from time to time if you have a look at it. Right now I am leaving proofs which are supposed to be very easy or bound to work for later to see if the overall approach is promising.</p>",
        "id": 173363930,
        "sender_full_name": "Hanna Lachnitt",
        "timestamp": 1565952841
    },
    {
        "content": "<p>Hey guys :) Just to keep you updated, I managed to prove calculation (5.4) from page 218 of Nielsen and Chuang. There are some easy proofs missing (including almost all gate proofs) but nothing that should cause any problems. The equivalence of (5.4) to the definition of quantum fourier transform is described as using only elementary algebra so I hope it will be doable :)</p>",
        "id": 174529561,
        "sender_full_name": "Hanna Lachnitt",
        "timestamp": 1567157769
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"228778\">@Anthony Bordg</span>  Regarding your comment about:<br>\nsubsection ‹Transformation of j into a Tensor Product of Single Qubits›<br>\nwhat do you thing about:<br>\nsubsection ‹Transformation of the Input into a Tensor Product of Single Qubits›</p>",
        "id": 178538178,
        "sender_full_name": "Hanna Lachnitt",
        "timestamp": 1571477960
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"228778\">Anthony Bordg</span>  Regarding your comment about:<br>\nsubsection ‹Transformation of j into a Tensor Product of Single Qubits›<br>\nwhat do you thing about:<br>\nsubsection ‹Transformation of the Input into a Tensor Product of Single Qubits›</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"228787\">@Hanna Lachnitt</span>  I think it's better. If I remember correctly \"Mike and Ike\", <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi mathvariant=\"normal\">∣</mi><mi>j</mi><mo stretchy=\"false\">⟩</mo></mrow><annotation encoding=\"application/x-tex\">|j\\rangle</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">∣</span><span class=\"mord mathdefault\" style=\"margin-right:0.05724em;\">j</span><span class=\"mclose\">⟩</span></span></span></span> is any basis state. Do you define qFt directly on an arbitrary state ? In other words is your \"input\" here refering to an arbitrary state ? If yes, why not simply \"Transformation of a State into a Tensor Product of Single Qubits\"? We could even later move this part into More_Tensor.thy.</p>",
        "id": 178538527,
        "sender_full_name": "Anthony Bordg",
        "timestamp": 1571478633
    },
    {
        "content": "<p>Yes qFt takes an arbitrary basis state (actually just a natural number). Sound good, I will take that. Especially if its moved to some other theory input does not make sense. Also I wrote an introductory comment which might explain things a bit better.</p>",
        "id": 178557242,
        "sender_full_name": "Hanna Lachnitt",
        "timestamp": 1571509083
    },
    {
        "content": "<p>As to your comment  to to_list_bound:<br>\n<code>Also, it seems that you start counting from 1 for the position s while all the rest of the library takes the convention that we start counting from 0.</code><br>\nI did this to stick closely to the literature where <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>j</mi><mn>1</mn></msub><msub><mi>j</mi><mn>2</mn></msub><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><msub><mi>j</mi><mi>n</mi></msub></mrow><annotation encoding=\"application/x-tex\">j_1j_2...j_n</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.85396em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.05724em;\">j</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.05724em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.05724em;\">j</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.05724em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\">.</span><span class=\"mord\">.</span><span class=\"mord\">.</span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.05724em;\">j</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.05724em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> are used for the binary representation of j. Actually I also did this for the <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>C</mi><msub><mi>R</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">CR_i</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.07153em;\">C</span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.00773em;\">R</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.00773em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>  gates and so on. Otherwise it would be a bit confusing. While I work through the theory I will search for cases where I started to count from 0 it might be better to change them instead of changing the cases where counting starts from 1.</p>",
        "id": 178557598,
        "sender_full_name": "Hanna Lachnitt",
        "timestamp": 1571509694
    },
    {
        "content": "<p>I have renamed the abbreviation for to_tensor_prod  j⨂ with ⨂r, standing for tensor product representation since j should not appear in any names</p>",
        "id": 178560767,
        "sender_full_name": "Hanna Lachnitt",
        "timestamp": 1571515044
    },
    {
        "content": "<p>Should the comments rather be texts?</p>",
        "id": 178586363,
        "sender_full_name": "Hanna Lachnitt",
        "timestamp": 1571564963
    },
    {
        "content": "<p>I decided to rename qr to phase_shifted_qubit, in short psq. I am still not 100% happy with that but qr is unacceptable. If there is a better possibility I would be happy for suggestions.</p>",
        "id": 178587004,
        "sender_full_name": "Hanna Lachnitt",
        "timestamp": 1571566141
    },
    {
        "content": "<p>Regarding your comment about <code>lemma transpose_of_controlled_phase_shift: (* AB: Maybe simply transpose_of_CR ? *)</code><br>\nIsn't this the same thing as having H in a lemma name instead of hadamard_gate? So it would mix up notation and full name of the definition. But I would be happy to change this, shorter names would be preferable here.</p>",
        "id": 178587498,
        "sender_full_name": "Hanna Lachnitt",
        "timestamp": 1571567138
    },
    {
        "content": "<p>I also tried to change the definition qr/phase_shifted_qubit into an abbreviation. But then it got so slow that I had to set everything back. Might be just my laptop though, its not very powerful.</p>",
        "id": 178593426,
        "sender_full_name": "Hanna Lachnitt",
        "timestamp": 1571577607
    },
    {
        "content": "<blockquote>\n<p>Regarding your comment about <code>lemma transpose_of_controlled_phase_shift: (* AB: Maybe simply transpose_of_CR ? *)</code><br>\nIsn't this the same thing as having H in a lemma name instead of hadamard_gate? So it would mix up notation and full name of the definition. But I would be happy to change this, shorter names would be preferable here.</p>\n</blockquote>\n<p>There are two things we should absolutely avoid. First, variables in names. Second, notations in names if those notations are not standard. However, using very standard notations, like H or cR, in names is fine.</p>",
        "id": 178640758,
        "sender_full_name": "Anthony Bordg",
        "timestamp": 1571651937
    },
    {
        "content": "<p>Great, then I will change this, its much better readable.</p>",
        "id": 178641069,
        "sender_full_name": "Hanna Lachnitt",
        "timestamp": 1571652234
    },
    {
        "content": "<blockquote>\n<p>Should the comments rather be texts?</p>\n</blockquote>\n<p>At some point we should replace the source comments with text blocks, but it's unimportant at that stage. They are more fundamental things we need first to take care</p>",
        "id": 178642823,
        "sender_full_name": "Anthony Bordg",
        "timestamp": 1571653841
    },
    {
        "content": "<p>Yes of course. I just replaced some of the latex code in the comments with the built-in code for readability, e.g. $|j_1,j_2,...,j_n\\rangle$ with <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi mathvariant=\"normal\">∣</mi><msub><mi>j</mi><mn>1</mn></msub><mo separator=\"true\">,</mo><msub><mi>j</mi><mn>2</mn></msub><mo separator=\"true\">,</mo><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><mo separator=\"true\">,</mo><msub><mi>j</mi><mi>n</mi></msub><mo stretchy=\"false\">⟩</mo></mrow><annotation encoding=\"application/x-tex\">|j_1,j_2,...,j_n\\rangle</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">∣</span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.05724em;\">j</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.05724em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.05724em;\">j</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.05724em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">.</span><span class=\"mord\">.</span><span class=\"mord\">.</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.05724em;\">j</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.05724em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">⟩</span></span></span></span> but if they are replaced with text at some point I would not do that.</p>",
        "id": 178643053,
        "sender_full_name": "Hanna Lachnitt",
        "timestamp": 1571654087
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"228787\">@Hanna Lachnitt</span>  There is something still confusing in the first comment. In your example, what's the link between <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>j</mi><mo>=</mo><mn>11</mn></mrow><annotation encoding=\"application/x-tex\">j=11</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.85396em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05724em;\">j</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mord\">1</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi mathvariant=\"normal\">∣</mi><mn>01011</mn><mo stretchy=\"false\">⟩</mo></mrow><annotation encoding=\"application/x-tex\">|01011\\rangle</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">∣</span><span class=\"mord\">0</span><span class=\"mord\">1</span><span class=\"mord\">0</span><span class=\"mord\">1</span><span class=\"mord\">1</span><span class=\"mclose\">⟩</span></span></span></span> ? Do you mean <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi mathvariant=\"normal\">∣</mi><mn>00011</mn><mo stretchy=\"false\">⟩</mo></mrow><annotation encoding=\"application/x-tex\">|00011\\rangle</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">∣</span><span class=\"mord\">0</span><span class=\"mord\">0</span><span class=\"mord\">0</span><span class=\"mord\">1</span><span class=\"mord\">1</span><span class=\"mclose\">⟩</span></span></span></span> instead ?</p>",
        "id": 178643715,
        "sender_full_name": "Anthony Bordg",
        "timestamp": 1571654782
    },
    {
        "content": "<p>01011 is the binary representation of 11. I used the notation as it is introduced in the book of Nielsen and Chuang. To make it clearer I could add that  <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi mathvariant=\"normal\">∣</mi><msub><mi>j</mi><mn>1</mn></msub><msub><mi>j</mi><mn>2</mn></msub><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><msub><mi>j</mi><mi>n</mi></msub><mo stretchy=\"false\">⟩</mo></mrow><annotation encoding=\"application/x-tex\">|j_1j_2...j_n\\rangle</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">∣</span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.05724em;\">j</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.05724em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.05724em;\">j</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.05724em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\">.</span><span class=\"mord\">.</span><span class=\"mord\">.</span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.05724em;\">j</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.05724em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">⟩</span></span></span></span> = <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi mathvariant=\"normal\">∣</mi><mn>01011</mn><mo stretchy=\"false\">⟩</mo></mrow><annotation encoding=\"application/x-tex\">|01011\\rangle</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">∣</span><span class=\"mord\">0</span><span class=\"mord\">1</span><span class=\"mord\">0</span><span class=\"mord\">1</span><span class=\"mord\">1</span><span class=\"mclose\">⟩</span></span></span></span> where <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>j</mi><mo>=</mo><msub><mi>j</mi><mn>1</mn></msub><mo>∗</mo><msup><mn>2</mn><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msup><mo>+</mo><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><mo>+</mo><msub><mi>j</mi><mi>n</mi></msub><mo>∗</mo><msup><mn>2</mn><mn>0</mn></msup></mrow><annotation encoding=\"application/x-tex\">j = j_1*2^{n-1}+...+j_n*2^0</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.85396em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05724em;\">j</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.85396em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.05724em;\">j</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.05724em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.897438em;vertical-align:-0.08333em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">n</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord\">.</span><span class=\"mord\">.</span><span class=\"mord\">.</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.85396em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.05724em;\">j</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.05724em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span></span></span></span></span></span></span></span> which is simply written as <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>j</mi><mo>=</mo><msub><mi>j</mi><mn>1</mn></msub><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><msub><mi>j</mi><mi>n</mi></msub></mrow><annotation encoding=\"application/x-tex\">j=j_1...j_n</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.85396em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05724em;\">j</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.85396em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.05724em;\">j</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.05724em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\">.</span><span class=\"mord\">.</span><span class=\"mord\">.</span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.05724em;\">j</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.05724em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> in the book (the notation is a bit untidy).</p>",
        "id": 178644945,
        "sender_full_name": "Hanna Lachnitt",
        "timestamp": 1571656016
    },
    {
        "content": "<p>Indeed if one writes <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi mathvariant=\"normal\">∣</mi><mi>j</mi><mo stretchy=\"false\">⟩</mo></mrow><annotation encoding=\"application/x-tex\">|j\\rangle</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">∣</span><span class=\"mord mathdefault\" style=\"margin-right:0.05724em;\">j</span><span class=\"mclose\">⟩</span></span></span></span> what is meant is always j in binary representation (its really untidy), never something like 000j. Otherwise how would you encode e.g. 3 if 11 is <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi mathvariant=\"normal\">∣</mi><mn>00011</mn><mo stretchy=\"false\">⟩</mo></mrow><annotation encoding=\"application/x-tex\">|00011\\rangle</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">∣</span><span class=\"mord\">0</span><span class=\"mord\">0</span><span class=\"mord\">0</span><span class=\"mord\">1</span><span class=\"mord\">1</span><span class=\"mclose\">⟩</span></span></span></span>?<br>\nI realize now that I maybe should take another number as example that does contain a digit beyond 1, e.g. 12. This might make it clearer and avoid confusion between binary and decimal representation.</p>",
        "id": 178645154,
        "sender_full_name": "Hanna Lachnitt",
        "timestamp": 1571656245
    },
    {
        "content": "<blockquote>\n<p>01011 is the binary representation of 11. I used the notation as it is introduced in the book of Nielsen and Chuang. To make it clearer I could add that  <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi mathvariant=\"normal\">∣</mi><msub><mi>j</mi><mn>1</mn></msub><msub><mi>j</mi><mn>2</mn></msub><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><msub><mi>j</mi><mi>n</mi></msub><mo stretchy=\"false\">⟩</mo></mrow><annotation encoding=\"application/x-tex\">|j_1j_2...j_n\\rangle</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">∣</span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.05724em;\">j</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.05724em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.05724em;\">j</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.05724em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\">.</span><span class=\"mord\">.</span><span class=\"mord\">.</span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.05724em;\">j</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.05724em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">⟩</span></span></span></span> = <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi mathvariant=\"normal\">∣</mi><mn>01011</mn><mo stretchy=\"false\">⟩</mo></mrow><annotation encoding=\"application/x-tex\">|01011\\rangle</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">∣</span><span class=\"mord\">0</span><span class=\"mord\">1</span><span class=\"mord\">0</span><span class=\"mord\">1</span><span class=\"mord\">1</span><span class=\"mclose\">⟩</span></span></span></span> where <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>j</mi><mo>=</mo><msub><mi>j</mi><mn>1</mn></msub><mo>∗</mo><msup><mn>2</mn><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msup><mo>+</mo><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><mo>+</mo><msub><mi>j</mi><mi>n</mi></msub><mo>∗</mo><msup><mn>2</mn><mn>0</mn></msup></mrow><annotation encoding=\"application/x-tex\">j = j_1*2^{n-1}+...+j_n*2^0</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.85396em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05724em;\">j</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.85396em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.05724em;\">j</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.05724em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.897438em;vertical-align:-0.08333em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">n</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord\">.</span><span class=\"mord\">.</span><span class=\"mord\">.</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.85396em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.05724em;\">j</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.05724em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span></span></span></span></span></span></span></span> which is simply written as <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>j</mi><mo>=</mo><msub><mi>j</mi><mn>1</mn></msub><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><msub><mi>j</mi><mi>n</mi></msub></mrow><annotation encoding=\"application/x-tex\">j=j_1...j_n</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.85396em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05724em;\">j</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.85396em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.05724em;\">j</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.05724em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\">.</span><span class=\"mord\">.</span><span class=\"mord\">.</span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.05724em;\">j</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.05724em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> in the book (the notation is a bit untidy).</p>\n</blockquote>\n<p>Oh I see, it's eleven, not the binary representation 11 (namely 3)! Maybe it's better to use 9 or 12 to avoid any confusion.</p>",
        "id": 178645767,
        "sender_full_name": "Anthony Bordg",
        "timestamp": 1571656904
    },
    {
        "content": "<p><code>pow_tensor_list_one</code> looks a bit cumbersome:</p>\n<div class=\"codehilite\"><pre><span></span>lemma pow_tensor_list_one [simp]:\n  assumes &quot;xs = []&quot;\n  shows &quot;(pr (Cons x xs) 1) = x&quot;\n  by (simp add: assms)\n</pre></div>\n\n\n<p>It could simply be:</p>\n<div class=\"codehilite\"><pre><span></span>lemma pow_tensor_length_1:\n  fixes X:: &quot;complex Matrix.mat&quot;\n  shows &quot;(pr [X] 1) = X&quot;\n  by simp\n</pre></div>",
        "id": 178646685,
        "sender_full_name": "Anthony Bordg",
        "timestamp": 1571657847
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"228787\">@Hanna Lachnitt</span> I made a new PR.</p>",
        "id": 178648316,
        "sender_full_name": "Anthony Bordg",
        "timestamp": 1571659366
    },
    {
        "content": "<p>Thanks for your PR, there seems to be still some confusion left about the binary representation. If j is a natural number strictly smaller than 2^m then the binary representation in this setting has length m, i.e. <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>j</mi><mo>=</mo><msub><mi>j</mi><mn>1</mn></msub><msub><mi>j</mi><mn>2</mn></msub><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><msub><mi>j</mi><mi>m</mi></msub></mrow><annotation encoding=\"application/x-tex\">j=j_1j_2...j_m</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.85396em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05724em;\">j</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.85396em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.05724em;\">j</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.05724em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.05724em;\">j</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.05724em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\">.</span><span class=\"mord\">.</span><span class=\"mord\">.</span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.05724em;\">j</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.05724em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">m</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> and not length n.</p>\n<p>I put m instead of n for some reasons (I used a locale in the first versions and needed another variable for inductions) but I wonder now if m should not be renamed to n since you would usually use j and n.</p>",
        "id": 178851001,
        "sender_full_name": "Hanna Lachnitt",
        "timestamp": 1571835861
    },
    {
        "content": "<blockquote>\n<p><code>pow_tensor_list_one</code> looks a bit cumbersome:</p>\n</blockquote>\n<p>Thanks! I only used Cons because of our talk about when to use (Suc n) instead of (n+1) and this is not a lemma that is for people to look at it. I removed the type annotation (fixes X:: \"complex Matrix.mat\") however, since it was done nowhere else.</p>",
        "id": 178851323,
        "sender_full_name": "Hanna Lachnitt",
        "timestamp": 1571836136
    },
    {
        "content": "<p>double post</p>",
        "id": 178851458,
        "sender_full_name": "Hanna Lachnitt",
        "timestamp": 1571836217
    },
    {
        "content": "<blockquote>\n<blockquote>\n<p><code>pow_tensor_list_one</code> looks a bit cumbersome:</p>\n</blockquote>\n<p>Thanks! I only used Cons because of our talk about when to use (Suc n) instead of (n+1) and this is not a lemma that is for people to look at it. I removed the type annotation (fixes X:: \"complex Matrix.mat\") however, since it was done nowhere else.</p>\n</blockquote>\n<p>Formal proofs is a tricky business. A rule has exceptions, but there is the spirit of the rule. Regarding canonical forms, sometimes they will help, in particular in involved proofs, but here the proof is trivial. So, here canonical forms only make the statement less legible.</p>",
        "id": 178866976,
        "sender_full_name": "Anthony Bordg",
        "timestamp": 1571845498
    },
    {
        "content": "<blockquote>\n<p>I put m instead of n for some reasons (I used a locale in the first versions and needed another variable for inductions) but I wonder now if m should not be renamed to n since you would usually use j and n.</p>\n</blockquote>\n<p>Yes, it would be better to use n for the number of qubits to be consistent across the library. To be consistent would help the readers and the maintainers.<br>\nAlso, why use the variable k to denote a length when one can use l ?</p>",
        "id": 179221422,
        "sender_full_name": "Anthony Bordg",
        "timestamp": 1572261185
    },
    {
        "content": "<p>On another issue, should j also be replaced by j_dec or jd? Otherwise it is a bit cumbersome if j appears inside of a matrix, e.g. <br>\n<code> (Matrix.mat 2 1 (λ(i,j). if i=0 then (1::complex)/sqrt(2) else (exp (complex_of_real (2*pi)*𝗂*(bin_frac (s-1) (t-1) n jd)))*1/sqrt(2)))\" </code></p>",
        "id": 179271577,
        "sender_full_name": "Hanna Lachnitt",
        "timestamp": 1572294099
    },
    {
        "content": "<p>I am currently working towards replacing m by n and k with l if its used for a length</p>",
        "id": 179271855,
        "sender_full_name": "Hanna Lachnitt",
        "timestamp": 1572294264
    }
]