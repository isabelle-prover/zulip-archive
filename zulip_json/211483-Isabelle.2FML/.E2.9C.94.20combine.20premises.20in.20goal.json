[
    {
        "content": "<p>Given a goal like this:</p>\n<div class=\"codehilite\"><pre><span></span><code>⋀a x. f x ⟹ x = T a ⟹ Q\n</code></pre></div>\n<p>what is the best way to rewrite the premises to</p>\n<div class=\"codehilite\"><pre><span></span><code>⋀a. f (T a) ⟹ Q\n</code></pre></div>\n<p>? I could hack something together with <code>SUBPROOF</code> but there has to be a better way</p>",
        "id": 268953347,
        "sender_full_name": "Jan van Brügge",
        "timestamp": 1642851506
    },
    {
        "content": "<p>You could do this:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">a</span><span class=\"o\">:</span> <span class=\"s\">\"(⋀a x. f x ⟹ x = T a ⟹ PROP Q) ≡ (⋀a. f (T a) ⟹ PROP Q)\"</span>\n<span class=\"k\">proof</span>\n  <span class=\"k\">fix</span> <span class=\"n\">a</span> <span class=\"k\">assume</span> <span class=\"s\">\"⋀a x. f x ⟹ x = T a ⟹ PROP Q\"</span> <span class=\"s\">\"f (T a)\"</span>\n  <span class=\"k\">from</span> <span class=\"n\">this</span><span class=\"o\">(</span><span class=\"n\">1</span><span class=\"o\">)[</span><span class=\"n\">OF</span> <span class=\"n\">this</span><span class=\"o\">(</span><span class=\"n\">2</span><span class=\"o\">),</span> <span class=\"n\">of</span> <span class=\"n\">a</span><span class=\"o\">]</span> <span class=\"k\">show</span> <span class=\"s\">\"PROP Q\"</span> <span class=\"k\">by</span> <span class=\"n\">simp</span>\n<span class=\"k\">next</span>\n  <span class=\"k\">fix</span> <span class=\"n\">a</span> <span class=\"n\">x</span> <span class=\"k\">assume</span> <span class=\"s\">\"⋀a. f (T a) ⟹ PROP Q\"</span> <span class=\"s\">\"f x\"</span> <span class=\"s\">\"x = T a\"</span>\n  <span class=\"k\">from</span> <span class=\"n\">this</span><span class=\"o\">(</span><span class=\"n\">1</span><span class=\"o\">)[</span><span class=\"n\">of</span> <span class=\"n\">a</span><span class=\"o\">]</span> <span class=\"n\">this</span><span class=\"o\">(</span><span class=\"n\">2</span><span class=\"o\">,</span><span class=\"n\">3</span><span class=\"o\">)</span> <span class=\"k\">show</span> <span class=\"s\">\"PROP Q\"</span> <span class=\"k\">by</span> <span class=\"n\">simp</span>\n<span class=\"k\">qed</span>\n\n<span class=\"kn\">lemma</span> <span class=\"s\">\"⋀a x. f x ⟹ x = T a ⟹ Q\"</span>\n  <span class=\"kp\">apply</span><span class=\"o\">(</span><span class=\"n\">tactic</span> <span class=\"err\">‹</span><span class=\"n\">CONVERSION</span> <span class=\"o\">(</span><span class=\"n\">Conv.rewr_conv</span> <span class=\"err\">@</span><span class=\"ow\">{</span><span class=\"kt\">thm</span> <span class=\"n\">a</span><span class=\"ow\">}</span><span class=\"o\">)</span> <span class=\"n\">1</span><span class=\"err\">›</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 268954037,
        "sender_full_name": "Lukas Stevens",
        "timestamp": 1642852565
    },
    {
        "content": "<p>I don't know <code>f</code> nor <code>T</code> statically, so this won't work. I guess the <code>SUBPROOF</code> hack it is</p>",
        "id": 268954075,
        "sender_full_name": "Jan van Brügge",
        "timestamp": 1642852679
    },
    {
        "content": "<p>But this works for any f and T?</p>",
        "id": 268954123,
        "sender_full_name": "Lukas Stevens",
        "timestamp": 1642852716
    },
    {
        "content": "<p>oh, yes of course, I am stupid</p>",
        "id": 268954131,
        "sender_full_name": "Jan van Brügge",
        "timestamp": 1642852734
    },
    {
        "content": "<p>Weird, now I am at <code>⋀b3 z3. b3 = z3 ⟹ b3 = z3</code> but <code>assume_tac</code> fails</p>",
        "id": 268955502,
        "sender_full_name": "Jan van Brügge",
        "timestamp": 1642854722
    },
    {
        "content": "<p>The types do match, right?</p>",
        "id": 268955542,
        "sender_full_name": "Lukas Stevens",
        "timestamp": 1642854842
    },
    {
        "content": "<p>yes</p>",
        "id": 268955581,
        "sender_full_name": "Jan van Brügge",
        "timestamp": 1642854849
    },
    {
        "content": "<p>all are <code>'c</code></p>",
        "id": 268955583,
        "sender_full_name": "Jan van Brügge",
        "timestamp": 1642854855
    },
    {
        "content": "<p>You can try printing the term literally without pretty-printing. Also the context you pass in is the right one?</p>",
        "id": 268956053,
        "sender_full_name": "Lukas Stevens",
        "timestamp": 1642855643
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>Const (&quot;Pure.all&quot;, &quot;(&#39;c ⇒ prop) ⇒ prop&quot;) $\n  Abs (&quot;b3&quot;, &quot;&#39;c&quot;,\n    Const (&quot;Pure.all&quot;, &quot;(&#39;c ⇒ prop) ⇒ prop&quot;) $\n      Abs (&quot;z3&quot;, &quot;&#39;c&quot;,\n        Const (&quot;Pure.imp&quot;, &quot;prop ⇒ prop ⇒ prop&quot;) $\n          (Const (&quot;HOL.Trueprop&quot;, &quot;bool ⇒ prop&quot;) $ (Const (&quot;HOL.eq&quot;, &quot;&#39;c ⇒ &#39;c ⇒ bool&quot;) $ Bound 1 $ Bound 0)) $\n          (Const (&quot;HOL.Trueprop&quot;, &quot;bool ⇒ prop&quot;) $\n            (Const (&quot;HOL.eq&quot;, &quot;&#39;c ⇒ &#39;c ⇒ bool&quot;) $ Bound 1 $ Bound 0))))\n</code></pre></div>",
        "id": 268956279,
        "sender_full_name": "Jan van Brügge",
        "timestamp": 1642855944
    },
    {
        "content": "<p>Yes, there is only one context. Also <code>apply assumption</code> after the tactic solves the goal as expected</p>",
        "id": 268956296,
        "sender_full_name": "Jan van Brügge",
        "timestamp": 1642855970
    },
    {
        "content": "<p>I ended up using <code>SUBPROOF</code> anyways, because it is easier to branch on the goal and then I can just use <code>Local_Defs.unfold0</code></p>\n<div class=\"codehilite\" data-code-language=\"Standard ML\"><pre><span></span><code> <span class=\"nn\">Subgoal</span><span class=\"p\">.</span><span class=\"n\">FOCUS</span> <span class=\"p\">(</span><span class=\"kr\">fn</span> <span class=\"p\">{</span><span class=\"n\">context</span><span class=\"p\">,</span> <span class=\"n\">prems</span> <span class=\"p\">=</span> <span class=\"p\">[</span><span class=\"n\">p1</span><span class=\"p\">,</span> <span class=\"n\">p2</span><span class=\"p\">],</span> <span class=\"p\">...}</span> <span class=\"p\">=&gt;</span>\n            <span class=\"kr\">if</span> <span class=\"nn\">HOLogic</span><span class=\"p\">.</span><span class=\"n\">dest_Trueprop</span> <span class=\"p\">(</span><span class=\"nn\">Thm</span><span class=\"p\">.</span><span class=\"n\">prop_of</span> <span class=\"n\">p2</span><span class=\"p\">)</span> <span class=\"p\">=</span> <span class=\"n\">@</span><span class=\"p\">{</span><span class=\"n\">term</span> <span class=\"n\">False</span><span class=\"p\">}</span> <span class=\"kr\">then</span>\n              <span class=\"n\">rtac</span> <span class=\"n\">ctxt</span> <span class=\"n\">@</span><span class=\"p\">{</span><span class=\"n\">thm</span> <span class=\"n\">FalseE</span><span class=\"p\">}</span> <span class=\"mi\">1</span> <span class=\"n\">THEN</span>\n              <span class=\"n\">rtac</span> <span class=\"n\">ctxt</span> <span class=\"n\">p2</span> <span class=\"mi\">1</span>\n            <span class=\"kr\">else</span>\n              <span class=\"n\">resolve_tac</span> <span class=\"n\">ctxt</span> <span class=\"n\">F_wit_thms</span> <span class=\"mi\">1</span> <span class=\"n\">THEN</span>\n              <span class=\"n\">rtac</span> <span class=\"n\">ctxt</span> <span class=\"p\">(</span><span class=\"n\">unfold</span> <span class=\"n\">context</span> <span class=\"p\">[</span><span class=\"n\">p2</span><span class=\"p\">]</span> <span class=\"n\">p1</span><span class=\"p\">)</span> <span class=\"mi\">1</span>\n          <span class=\"p\">)</span> <span class=\"n\">ctxt</span><span class=\"p\">)</span>\n</code></pre></div>",
        "id": 268959418,
        "sender_full_name": "Jan van Brügge",
        "timestamp": 1642860350
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"392255\">Jan van Brügge</span> has marked this topic as resolved.</p>",
        "id": 268959421,
        "sender_full_name": "Notification Bot",
        "timestamp": 1642860354
    },
    {
        "content": "<p>Just keep in mind that Subgoal.FOCUS is quite expensive in general</p>",
        "id": 268960975,
        "sender_full_name": "Lukas Stevens",
        "timestamp": 1642862680
    },
    {
        "content": "<p>There is also hypsubst_tac that would work here if T does not depend on x.</p>",
        "id": 268967593,
        "sender_full_name": "Dmitriy Traytel",
        "timestamp": 1642871778
    },
    {
        "content": "<p>Ah, yes that is the tactic that I originally wanted. Now without <code>Subgoal.FOCUS</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Standard ML\"><pre><span></span><code><span class=\"p\">(</span>\n  <span class=\"n\">K</span> <span class=\"p\">(</span><span class=\"n\">unfold_thms_tac</span> <span class=\"n\">ctxt</span> <span class=\"n\">@</span><span class=\"p\">{</span><span class=\"n\">thms</span> <span class=\"n\">False_implies_equals</span><span class=\"p\">})</span> <span class=\"n\">THEN'</span>\n  <span class=\"n\">rtac</span> <span class=\"n\">ctxt</span> <span class=\"n\">@</span><span class=\"p\">{</span><span class=\"n\">thm</span> <span class=\"n\">TrueI</span><span class=\"p\">}</span>\n<span class=\"p\">)</span> <span class=\"n\">ORELSE'</span> <span class=\"p\">(</span><span class=\"n\">EVERY'</span> <span class=\"p\">[</span>\n  <span class=\"n\">hyp_subst_tac</span> <span class=\"n\">ctxt</span><span class=\"p\">,</span>\n  <span class=\"n\">dresolve_tac</span> <span class=\"n\">ctxt</span> <span class=\"n\">F_wit_thms</span><span class=\"p\">,</span>\n  <span class=\"n\">assume_tac</span> <span class=\"n\">ctxt</span>\n<span class=\"p\">])</span>\n</code></pre></div>",
        "id": 269009111,
        "sender_full_name": "Jan van Brügge",
        "timestamp": 1642932029
    },
    {
        "content": "<p>Is there an <code>unfold_thms_tac</code> but restricted to only one subgoal?</p>",
        "id": 269009137,
        "sender_full_name": "Jan van Brügge",
        "timestamp": 1642932071
    },
    {
        "content": "<p>SELECT_GOAL can be used to restrict a tactic to a subgoal</p>",
        "id": 269069613,
        "sender_full_name": "Dmitriy Traytel",
        "timestamp": 1643011173
    }
]