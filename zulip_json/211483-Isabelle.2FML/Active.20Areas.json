[
    {
        "content": "<p>Does anyone have any experience with \"Active Areas\" (e.g. sledgehammer's \"Try this...\" and the code generator's \"See theory exports\") and their interface with PIDE and jEdit? I'd like to create an active area that opens a Console in jEdit with a particular file opened. Essentially, this is to allow the direct use of an interactive command line interpreter on some files produced by the code generator. I've tried using a jEdit action (via JEdit.check_action) to do this, but it doesn't work. Anyone have any pointers?</p>",
        "id": 244121400,
        "sender_full_name": "Simon Foster",
        "timestamp": 1624873202
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"348400\">@Fabian Huch</span> <span class=\"user-mention\" data-user-id=\"366135\">@Yecine Megdiche</span></p>",
        "id": 244127850,
        "sender_full_name": "Lukas Stevens",
        "timestamp": 1624877785
    },
    {
        "content": "<p>If you want a dockable then you need to register the panel in <code>src/Tools/jEdit/src/Isabelle.props</code>, its position in <code>src/Tools/jEdit/src/jEdit.props</code>, and the dockable in <code>src/Tools/jEdit/src/dockables.xml</code>.</p>",
        "id": 244131486,
        "sender_full_name": "Fabian Huch",
        "timestamp": 1624880165
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"348400\">Fabian Huch</span> <a href=\"#narrow/stream/211483-Isabelle.2FML/topic/Active.20Areas/near/244131486\">said</a>:</p>\n<blockquote>\n<p>If you want a dockable then you need to register the panel in <code>src/Tools/jEdit/src/Isabelle.props</code>, its position in <code>src/Tools/jEdit/src/jEdit.props</code>, and the dockable in <code>src/Tools/jEdit/src/dockables.xml</code>.</p>\n</blockquote>\n<p>The question is also about how to act on clicks like with Sledgehammers Try this</p>",
        "id": 244131594,
        "sender_full_name": "Lukas Stevens",
        "timestamp": 1624880239
    },
    {
        "content": "<p>That is active markup (see <code>Pure/PIDE/active.ML</code>). You can then write a handler in Isabelle/Scala for that (see <code>Tools/jEdit/src/active.scala</code>).</p>",
        "id": 244132454,
        "sender_full_name": "Fabian Huch",
        "timestamp": 1624880801
    },
    {
        "content": "<p>To act on clicks, you'd need to write a handler as Fabian explained, and register it in <code>Tools/jEdit/src/services.xml</code>. You can look up the <code>Graphview_Dockable.Handler</code> in <code>Tools/jEdit/src/graphview_dockable.scala</code> on an example of how to do it. It might also be a good idea to define your own markup element and add it to the list of active markups (<code>GraphView</code> defines <code>Markup.GRAPHVIEW</code> in <code>Pure/PIDE/markup.scala</code>,  you can see where it's added and you could do the same)</p>",
        "id": 244134133,
        "sender_full_name": "Yecine Megdiche",
        "timestamp": 1624881926
    },
    {
        "content": "<p>Thank you for your very helpful answers. The functionality I need is implemented by the jEdit Console plugin in the method runInSystemShell(view, command). I noticed that there's an already an active area called \"jedit_action\", which presumably allows me to execute jEdit actions (cf. <code>src/Tools/jEdit/src/actions.xml</code>). These can apparently be implemented in BeanScript. Is there a way of implementing it this way, by an action that calls runInSystemShell? That would avoid the need to extend the PIDE Scala code, although I'm happy to do that if it's necessary.</p>",
        "id": 244136334,
        "sender_full_name": "Simon Foster",
        "timestamp": 1624883231
    },
    {
        "content": "<p>I think I've figured it out myself. It is indeed possible to have an active area that calls an additional jEdit action specified in <code>actions.xml</code> via <code>JEdit.check_action</code>. It seems necessary to rebuild Isabelle/jEdit to do this.</p>",
        "id": 244153005,
        "sender_full_name": "Simon Foster",
        "timestamp": 1624890590
    }
]