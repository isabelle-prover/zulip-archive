[
    {
        "content": "<p>I have defined the following function to send the proof obligation to Output in its XML format:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"c\">(* thm -&gt; thm Seq.seq *)</span>\n<span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">print_goal_as_xml_to_output</span><span class=\"w\"> </span><span class=\"kt\">thm</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">  </span><span class=\"k\">let</span>\n<span class=\"w\">    </span><span class=\"n\">val</span><span class=\"w\"> </span><span class=\"n\">ctxt</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\" -Symbol\">\\&lt;^context&gt;</span><span class=\"n\">;</span>\n<span class=\"w\">    </span><span class=\"n\">val</span><span class=\"w\"> </span><span class=\"n\">goal</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Thm.prop_of</span><span class=\"w\"> </span><span class=\"kt\">thm</span><span class=\"n\">;</span>\n<span class=\"w\">    </span><span class=\"n\">val</span><span class=\"w\"> </span><span class=\"n\">xml_goal</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">YXML.parse</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Syntax.string_of_term</span><span class=\"w\"> </span><span class=\"n\">ctxt</span><span class=\"w\"> </span><span class=\"n\">goal</span><span class=\"o\">)</span><span class=\"n\">;</span>\n<span class=\"w\">    </span><span class=\"n\">val</span><span class=\"w\"> </span><span class=\"n\">str_from_pretty_goal</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Pretty.string_of</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">XML.pretty</span><span class=\"w\"> </span><span class=\"n\">10</span><span class=\"w\"> </span><span class=\"n\">xml_goal</span><span class=\"o\">)</span><span class=\"n\">;</span>\n<span class=\"w\">    </span><span class=\"n\">val</span><span class=\"w\"> </span><span class=\"n\">list_goal</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">map</span><span class=\"w\"> </span><span class=\"n\">Pretty.str</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">space_explode</span><span class=\"w\"> </span><span class=\"s\">\"\"</span><span class=\"w\"> </span><span class=\"n\">str_from_pretty_goal</span><span class=\"o\">)</span><span class=\"n\">;</span>\n<span class=\"w\">    </span><span class=\"n\">val</span><span class=\"w\"> </span><span class=\"n\">to_print</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Pretty.blk</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">3</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">Pretty.breaks</span><span class=\"w\"> </span><span class=\"n\">list_goal</span><span class=\"o\">)</span>\n<span class=\"w\">    </span><span class=\"n\">val</span><span class=\"w\"> </span><span class=\"o\">_</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">writeln</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Pretty.string_of</span><span class=\"w\"> </span><span class=\"n\">to_print</span><span class=\"o\">)</span><span class=\"n\">;</span>\n<span class=\"w\">  </span><span class=\"kp\">in</span><span class=\"w\"> </span><span class=\"n\">Seq.single</span><span class=\"w\"> </span><span class=\"kt\">thm</span><span class=\"w\"> </span><span class=\"k\">end</span>\n</code></pre></div>\n<p>I can see the corresponding proof obligation via </p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"w\"> </span><span class=\"s\">‹print_goal_as_xml_to_output›</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>However, I would like a more direct way without the <code>thm</code> parameter (without using <code>apply(tactic ...)</code>). That is, I want a function <code>xml_goal: Proof.context -&gt; string</code> so that I can do <code>ML_prf ‹ writeln (xml_goal \\&lt;^context&gt;)›</code>. My suspicion is that this would require creating the function directly in <code>Goal.ML</code> and probably would violate an Isabelle design principle. Is there such a function (or something similar e.g. <code>goal: Proof.context -&gt; thm</code>)? Or is my suspicion correct?</p>",
        "id": 433034142,
        "sender_full_name": "Jonathan Julian Huerta y Munive",
        "timestamp": 1713001878
    },
    {
        "content": "<p>I don't think <code>Proof.context</code> contains the given proof goal, you'd need <code>Proof.state</code> for that. I'm unaware of this being exposed in <code>ML_prf</code>, though.</p>\n<p>You can define a custom proof script command though (like <code>apply</code>) which would have access, if that helps.</p>",
        "id": 436614901,
        "sender_full_name": "Hanno Becker",
        "timestamp": 1714624281
    },
    {
        "content": "<p>Thanks for the suggestion <span class=\"user-mention\" data-user-id=\"570503\">@Hanno Becker</span> , I will think about your comments and report back.</p>",
        "id": 436640566,
        "sender_full_name": "Jonathan Julian Huerta y Munive",
        "timestamp": 1714637862
    },
    {
        "content": "<p>Exploring your suggestions, I discovered that a combination of <code>ML_val</code> with my function suffices for my current purposes. Thanks!</p>",
        "id": 436742317,
        "sender_full_name": "Jonathan Julian Huerta y Munive",
        "timestamp": 1714670810
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"441006\">@Jonathan Julian Huerta y Munive</span> ,</p>\n<p>I also think <code>Proof.state</code> is more relevant for your objective.</p>\n<p>These functions might help you:</p>\n<ul>\n<li><a href=\"https://github.com/data61/PSL/blob/2eeb751cde35a2b40b1dc746e64f6764efa8daa8/SeLFiE/Util.ML#L440\">Function at L440</a></li>\n<li><a href=\"https://github.com/data61/PSL/blob/2eeb751cde35a2b40b1dc746e64f6764efa8daa8/SeLFiE/Util.ML#L441\">Function at L441</a></li>\n<li><a href=\"https://github.com/data61/PSL/blob/2eeb751cde35a2b40b1dc746e64f6764efa8daa8/SeLFiE/Util.ML#L442\">Function at L442</a></li>\n<li><a href=\"https://github.com/data61/PSL/blob/2eeb751cde35a2b40b1dc746e64f6764efa8daa8/SeLFiE/Util.ML#L454\">Function at L454</a></li>\n</ul>\n<p>If you build a new custom proof script command similar to <code>apply</code>, you can achieve the objective you've described without violating Isabelle's design principles, I believe.</p>\n<p>However, for that, you might need to use <code>Toplevel.state</code>, which can be confusing at first. I did something similar when developing <code>try_hard</code>, as seen here:</p>\n<p><a href=\"https://github.com/data61/PSL/blob/2eeb751cde35a2b40b1dc746e64f6764efa8daa8/PSL/Isar_Interface.ML#L106\">https://github.com/data61/PSL/blob/2eeb751cde35a2b40b1dc746e64f6764efa8daa8/PSL/Isar_Interface.ML#L106</a>.</p>",
        "id": 436786722,
        "sender_full_name": "Yutaka Nagashima",
        "timestamp": 1714689007
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"644411\">@Yutaka Nagashima</span>, you are right. Indeed, I wrote a similar function to that at L440 yesterday. Thanks for the pointers! They will be inspiring. BTW, I heard good news about you yesterday, congrats!</p>",
        "id": 436838662,
        "sender_full_name": "Jonathan Julian Huerta y Munive",
        "timestamp": 1714724471
    }
]