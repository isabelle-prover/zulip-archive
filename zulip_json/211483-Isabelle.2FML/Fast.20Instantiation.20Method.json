[
    {
        "content": "<p>I have an unusual use case: I check the proofs generated by the SMT solver veriT (so once I have pushed my work, there will be a <code>veriT_smt</code> and an <code>smt</code> tactic). There is one rule that appears very often, namely <code>?P ≠ ?Q ∨ ¬ ?P ∨ ?Q</code> with some (potentially large) P and Q. </p>\n<p>What is the fastest way to convert the term to a theorem? I have tried various things and never managed to get below 10ms (on my computer), but replaying such steps is so trivial that I find 10ms already too much.</p>\n<p>Here is a real example if you want to play with it:</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n\n<p>If you don't have imported List.thy, uncomment Nil and cons at the top:</p>\n<div class=\"codehilite\"><pre><span></span><code>context\n  fixes piecewise_C1 :: &quot;(&#39;real :: {one,zero,ord} ⇒ &#39;a :: {one,zero,ord}) ⇒ &#39;real set ⇒ bool&quot;  and\n     joinpaths :: &quot;(&#39;real ⇒ &#39;a) ⇒ (&#39;real ⇒ &#39;a) ⇒ &#39;real ⇒ &#39;a&quot; (* and\n     cons :: ‹&#39;a ⇒ &#39;b ⇒ &#39;b› and\n     Nil :: ‹&#39;b› *)\nbegin\nnotation piecewise_C1 (infixr &quot;piecewise&#39;_C1&#39;_differentiable&#39;_on&quot; 50)\nnotation joinpaths (infixr &quot;+++&quot; 75)\n(* notation cons (infixr &quot;#&quot; 75)\nnotation Nil (&quot;[]&quot; 80) *)\n\n\nlemma XX:\n ‹((∀veriT_vr2 veriT_vr3.\n              (veriT_vr2 = rec_join veriT_vr3 ∧\n               ([] = veriT_vr3 ∧ (λuu. 0) = veriT_vr2 ⟶ False) ∧\n               (∀veriT_vr4.\n                   veriT_vr3 = veriT_vr4 # [] ∧\n                   veriT_vr2 = coeff_cube_to_path veriT_vr4 ⟶\n                   False) ∧\n               (∀veriT_vr4 veriT_vr5 veriT_vr6.\n                   veriT_vr3 = veriT_vr4 # veriT_vr5 # veriT_vr6 ∧\n                   veriT_vr2 =\n                   coeff_cube_to_path veriT_vr4 +++\n                   rec_join (veriT_vr5 # veriT_vr6) ⟶\n                   False) ⟶\n               False) =\n              (rec_join veriT_vr3 = rec_join veriT_vr3 ∧\n               ([] = veriT_vr3 ∧ (λuu. 0) = rec_join veriT_vr3 ⟶\n                False) ∧\n               (∀veriT_vr4.\n                   veriT_vr3 = veriT_vr4 # [] ∧\n                   rec_join veriT_vr3 = coeff_cube_to_path veriT_vr4 ⟶\n                   False) ∧\n               (∀veriT_vr4 veriT_vr5 veriT_vr6.\n                   veriT_vr3 = veriT_vr4 # veriT_vr5 # veriT_vr6 ∧\n                   rec_join veriT_vr3 =\n                   coeff_cube_to_path veriT_vr4 +++\n                   rec_join (veriT_vr5 # veriT_vr6) ⟶\n                   False) ⟶\n               False)) ∧\n          (∀veriT_vr3.\n              rec_join veriT_vr3 = rec_join veriT_vr3 ∧\n              ([] = veriT_vr3 ∧ (λuu. 0) = rec_join veriT_vr3 ⟶ False) ∧\n              (∀veriT_vr4.\n                  veriT_vr3 = veriT_vr4 # [] ∧\n                  rec_join veriT_vr3 = coeff_cube_to_path veriT_vr4 ⟶\n                  False) ∧\n              (∀veriT_vr4 veriT_vr5 veriT_vr6.\n                  veriT_vr3 = veriT_vr4 # veriT_vr5 # veriT_vr6 ∧\n                  rec_join veriT_vr3 =\n                  coeff_cube_to_path veriT_vr4 +++\n                  rec_join (veriT_vr5 # veriT_vr6) ⟶\n                  False) ⟶\n              False) ≠\n          (∀veriT_vr3.\n              rec_join veriT_vr3 = rec_join veriT_vr3 ∧\n              ([] = veriT_vr3 ∧ (λuu. 0) = rec_join veriT_vr3 ⟶ False) ∧\n              (∀veriT_vr4.\n                  veriT_vr3 = veriT_vr4  # [] ∧\n                  rec_join veriT_vr3 = coeff_cube_to_path veriT_vr4 ⟶\n                  False) ∧\n              (∀veriT_vr4 veriT_vr5 veriT_vr6.\n                  veriT_vr3 = veriT_vr4 # veriT_vr5 # veriT_vr6 ∧\n                  rec_join veriT_vr3 =\n                  coeff_cube_to_path veriT_vr4 +++\n                  rec_join (veriT_vr5 # veriT_vr6) ⟶\n                  False) ⟶\n              False)) ≠\n         False ∨\n         ¬ ((∀veriT_vr2 veriT_vr3.\n                 (veriT_vr2 = rec_join veriT_vr3 ∧\n                  ([] = veriT_vr3 ∧ (λuu. 0) = veriT_vr2 ⟶ False) ∧\n                  (∀veriT_vr4.\n                      veriT_vr3 = veriT_vr4  # [] ∧\n                      veriT_vr2 = coeff_cube_to_path veriT_vr4 ⟶\n                      False) ∧\n                  (∀veriT_vr4 veriT_vr5 veriT_vr6.\n                      veriT_vr3 = veriT_vr4 # veriT_vr5 # veriT_vr6 ∧\n                      veriT_vr2 =\n                      coeff_cube_to_path veriT_vr4 +++\n                      rec_join (veriT_vr5 # veriT_vr6) ⟶\n                      False) ⟶\n                  False) =\n                 (rec_join veriT_vr3 = rec_join veriT_vr3 ∧\n                  ([] = veriT_vr3 ∧ (λuu. 0) = rec_join veriT_vr3 ⟶\n                   False) ∧\n                  (∀veriT_vr4.\n                      veriT_vr3 = veriT_vr4  # [] ∧\n                      rec_join veriT_vr3 = coeff_cube_to_path veriT_vr4 ⟶\n                      False) ∧\n                  (∀veriT_vr4 veriT_vr5 veriT_vr6.\n                      veriT_vr3 = veriT_vr4 # veriT_vr5 # veriT_vr6 ∧\n                      rec_join veriT_vr3 =\n                      coeff_cube_to_path veriT_vr4 +++\n                      rec_join (veriT_vr5 # veriT_vr6) ⟶\n                      False) ⟶\n                  False)) ∧\n             (∀veriT_vr3.\n                 rec_join veriT_vr3 = rec_join veriT_vr3 ∧\n                 ([] = veriT_vr3 ∧ (λuu. 0) = rec_join veriT_vr3 ⟶\n                  False) ∧\n                 (∀veriT_vr4.\n                     veriT_vr3 = veriT_vr4  # [] ∧\n                     rec_join veriT_vr3 = coeff_cube_to_path veriT_vr4 ⟶\n                     False) ∧\n                 (∀veriT_vr4 veriT_vr5 veriT_vr6.\n                     veriT_vr3 = veriT_vr4 # veriT_vr5 # veriT_vr6 ∧\n                     rec_join veriT_vr3 =\n                     coeff_cube_to_path veriT_vr4 +++\n                     rec_join (veriT_vr5 # veriT_vr6) ⟶\n                     False) ⟶\n                 False) ≠\n             (∀veriT_vr3.\n                 rec_join veriT_vr3 = rec_join veriT_vr3 ∧\n                 ([] = veriT_vr3 ∧ (λuu. 0) = rec_join veriT_vr3 ⟶\n                  False) ∧\n                 (∀veriT_vr4.\n                     veriT_vr3 = veriT_vr4 # [] ∧\n                     rec_join veriT_vr3 = coeff_cube_to_path veriT_vr4 ⟶\n                     False) ∧\n                 (∀veriT_vr4 veriT_vr5 veriT_vr6.\n                     veriT_vr3 = veriT_vr4 # veriT_vr5 # veriT_vr6 ∧\n                     rec_join veriT_vr3 =\n                     coeff_cube_to_path veriT_vr4 +++\n                     rec_join (veriT_vr5 # veriT_vr6) ⟶\n                     False) ⟶\n                 False)) ∨\n         False ›\n  sorry\n\nML ‹\nval X = Thm.prop_of @{thm XX}\nval thm = @{lemma ‹⋀a b. (a ≠ b) ∨ ¬a ∨ b› by blast+}\nfun chrono&#39; f  n =\n  if n = 0 then []\n  else\n  let val start = Timing.start ()\n     val _ = f @{context}\n     val total = Time.toMilliseconds (#elapsed (Timing.result start))\n   in total :: chrono&#39; f (n-1) end\nfun chrono f =\n  let val n = 10000 in\n    fold (curry (op +)) (chrono&#39; f  n) n\n  end\n›\n\n\n ML &quot;ML_Heap.share_common_data ()&quot;\n(*If you like tactics, try it here by replacing match_tac*)\nML ‹chrono (fn _ =&gt;  SMT_Replay_Methods.prove @{context} X\n     (fn ctxt =&gt; (match_tac ctxt [thm])))›\n\n\nML &quot;ML_Heap.share_common_data ()&quot;\n  ML ‹\nchrono (fn ctxt =&gt; SMT_Replay_Methods.match_instantiate ctxt X  thm)›\n ML &quot;ML_Heap.share_common_data ()&quot;\n\n(*find P and Q and instantiate them directly*)\nML ‹\nlet\n  fun f  ((* Const (&quot;HOL.Trueprop&quot;, _) *) _ $\n      ((* Const (&quot;HOL.disj&quot;, _) *) _ $\n         ((* Const (&quot;HOL.Not&quot;,_) *) _ $\n           ((* Const (&quot;HOL.eq&quot;, _)  *) _$ t1 $ t2)) $ _ ))\n    ctxt = Thm.instantiate ([], [(((&quot;Q&quot;, 0), @{typ bool}), Thm.cterm_of ctxt t2), (((&quot;P&quot;, 0), @{typ bool}), Thm.cterm_of ctxt t1)])\nin\nchrono (f @{context} X)\nend›\n\n\n ML &quot;ML_Heap.share_common_data ()&quot;\n(*fastest solution*)\nML ‹\nchrono (fn ctxt =&gt; SMT_Replay_Methods.match_instantiate ctxt X thm)›\n\nend\n</code></pre></div>\n\n\n</div></div>",
        "id": 209871451,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1599899985
    }
]