[
    {
        "content": "<p>What is the low-level way of replacing cterm with cterm in a goal? Suppose:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span>\n<span class=\"w\">  </span><span class=\"kp\">fixes</span><span class=\"w\"> </span><span class=\"n\">P</span><span class=\"w\"> </span><span class=\"n\">Q</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"nat ⇒ bool\"</span><span class=\"w\"> </span><span class=\"kp\">and</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"n\">g</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"nat ⇒ nat\"</span><span class=\"w\"> </span><span class=\"kp\">and</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"n\">nat</span>\n<span class=\"w\">  </span><span class=\"kp\">shows</span><span class=\"w\"> </span><span class=\"s\">\"Q (f (g n)) ⟹ P (g n)\"</span>\n<span class=\"k\">proof</span><span class=\"w\"> </span><span class=\"o\">-</span>\n<span class=\"w\">  </span><span class=\"k\">obtain</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"kp\">where</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"x = g n\"</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">simp</span>\n<span class=\"w\">  </span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"s\">\"Q (f (g n)) ⟹ P (g n)\"</span><span class=\"w\"> </span><span class=\"n\">―</span><span class=\"w\"> </span><span class=\"s\">‹1›</span>\n<span class=\"w\">    </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">unfold</span><span class=\"w\"> </span><span class=\"n\">atomize_imp</span><span class=\"o\">)</span>\n<span class=\"w\">    </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">subst</span><span class=\"w\"> </span><span class=\"n\">arg_cong</span><span class=\"o\">[</span><span class=\"n\">OF</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">symmetric</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"s\">\"λx. Q (f x) ⟶ P x\"</span><span class=\"o\">])</span>\n<span class=\"w\">    </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">fold</span><span class=\"w\"> </span><span class=\"n\">atomize_imp</span><span class=\"o\">)</span><span class=\"w\">     </span><span class=\"n\">―</span><span class=\"w\"> </span><span class=\"s\">‹2›</span>\n<span class=\"w\">    </span><span class=\"gr\">oops</span>\n</code></pre></div>\n<p>The goal (1) contains several occurences of <code>\"g n\"</code> (in assumptions too which requires moving from imp to implies and back) which I want to replace to simplify the goal (2).</p>\n<p>The cterms (eg. <code>\"g n\"</code>) are known and I'm looking for the simplest way to achieve above in low-level ML. Preferrably, I don't have to define new terms but more importantly I'd prefer the goal not to include old bound variables.</p>\n<p>So not from \"⋀n. Q (f (g n)) ⟹ P (g n)\" to \"⋀n x. Q (f x) ⟹ P x\" but rather \"⋀x. Q (f x) ⟹ P x\".</p>",
        "id": 411405581,
        "sender_full_name": "cai",
        "timestamp": 1704475819
    },
    {
        "content": "<p>You can get rid of the extra bound var with <code>unfold triv_forall_equality</code></p>",
        "id": 411438093,
        "sender_full_name": "Jan van Brügge",
        "timestamp": 1704491540
    },
    {
        "content": "<p>and to replace I think <code>subst</code> or <code>subst (asm)</code> is probably the easiest</p>",
        "id": 411438145,
        "sender_full_name": "Jan van Brügge",
        "timestamp": 1704491574
    }
]