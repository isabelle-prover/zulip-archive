[
    {
        "content": "<p>Hi everyone,</p>\n<p>could someone explain to me how lexicons from src/Pure/General/scan.ML work please? I suspect they might be what I need but I am not sure since I have not quite figured them out.</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"n\">val</span><span class=\"w\"> </span><span class=\"n\">test_keywords</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Scan.make_lexicon</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">map</span><span class=\"w\"> </span><span class=\"n\">raw_explode</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"s\">\"echo\"</span><span class=\"o\">,</span><span class=\"s\">\"echos\"</span><span class=\"o\">,</span><span class=\"s\">\"kuckuck\"</span><span class=\"o\">])</span>\n\n<span class=\"n\">val</span><span class=\"w\"> </span><span class=\"n\">keyword_scanner</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Scan.literal</span><span class=\"w\"> </span><span class=\"n\">test_keywords</span>\n</code></pre></div>\n<p>I have a list of keywords and I want to do different actions depending whether a keyword is detected. So I made a lexicon out of the list (with raw_explode since I have seen that elsewhere in the Isabelle codebase but that might be wrong). Then, I tried to use Scan.literal to write a keyword scanner.</p>\n<p>Let's say my overall scanner looks like this:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"n\">val</span><span class=\"w\"> </span><span class=\"n\">scan_command</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">  </span><span class=\"n\">$$</span><span class=\"w\"> </span><span class=\"s\">\"(\"</span>\n<span class=\"w\">  </span><span class=\"o\">|--</span><span class=\"w\"> </span><span class=\"n\">Scan.many</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">curry</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">op</span><span class=\"w\"> </span><span class=\"o\">=)</span><span class=\"w\"> </span><span class=\"s\">\" \"</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Then, this is of type <code>ML: string list -&gt; string list * string list</code>. My keyword scanner expects something of the type <code>(string * string) list</code>. What is the second element of the tuples for? I am looking at the implementation of Scan.literal but don't understand it, it seems to take the <code>fst</code> of the tuples and use that only? From what I understand is that it looks up a character (as a singleton string) in the lexicon (which is a smart data-structure returning  only paths that are still viable) and if it finds it it recursively searches for the rest with the amended lexicon. In case it runs out of search string characters but there are still open possibilities in the lexicon on what the input could be it gives the MORE exception (as in my \"echo\" vs \"echos\" test). </p>\n<p>I know how to accomplish my goal in another way but if there is a built-in solution I want to use that.</p>\n<p>Testing out my scanner</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"n\">val</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">keyword_scanner</span><span class=\"w\">  </span><span class=\"o\">[(</span><span class=\"s\">\"e\"</span><span class=\"o\">,</span><span class=\"s\">\"this is not used?\"</span><span class=\"o\">),(</span><span class=\"s\">\"c\"</span><span class=\"o\">,</span><span class=\"s\">\"\"</span><span class=\"o\">),(</span><span class=\"s\">\"h\"</span><span class=\"o\">,</span><span class=\"s\">\"\"</span><span class=\"o\">),(</span><span class=\"s\">\"o\"</span><span class=\"o\">,</span><span class=\"s\">\"\"</span><span class=\"o\">),(</span><span class=\"s\">\"s\"</span><span class=\"o\">,</span><span class=\"s\">\"\"</span><span class=\"o\">)]</span>\n<span class=\"n\">val</span><span class=\"w\"> </span><span class=\"o\">_</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">@</span><span class=\"ow\">{</span><span class=\"n\">print</span><span class=\"ow\">}</span><span class=\"o\">(</span><span class=\"s\">\"x\"</span><span class=\"o\">,</span><span class=\"n\">x</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>If I delete the last element <code>(\"s\",\"\")</code> it fails. So my questions are:</p>\n<ol>\n<li>Are lexicons the right approach for my aim?</li>\n<li>What does Scan.literal intuitively do and what does it need as an input (especially what should the second element of the tuple be?)</li>\n</ol>",
        "id": 442113914,
        "sender_full_name": "Hanna Lachnitt",
        "timestamp": 1717368247
    },
    {
        "content": "<p>To add to this, I searched through the Isabelle code and found a use like this:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">keyword_scanner2</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">keyword_scanner</span><span class=\"w\"> </span><span class=\"o\">:|--</span>\n<span class=\"w\">  </span><span class=\"o\">(</span><span class=\"n\">fn</span><span class=\"w\"> </span><span class=\"n\">xs</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"n\">&gt;</span><span class=\"w\"> </span><span class=\"kp\">if</span><span class=\"w\"> </span><span class=\"n\">map</span><span class=\"w\"> </span><span class=\"n\">fst</span><span class=\"w\"> </span><span class=\"n\">xs</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">raw_explode</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"n\">Scan.succeed</span><span class=\"w\"> </span><span class=\"n\">xs</span><span class=\"w\"> </span><span class=\"n\">else</span><span class=\"w\"> </span><span class=\"n\">Scan.fail</span><span class=\"o\">)</span><span class=\"n\">;</span>\n</code></pre></div>\n<p>So basically a keyword is given to the scanner and only if it is in the lexicon the Scan succeeds?</p>",
        "id": 442113935,
        "sender_full_name": "Hanna Lachnitt",
        "timestamp": 1717368262
    },
    {
        "content": "<p>To understand how parsing works in Isabelle, it makes sense to read the chapter in the <a href=\"https://nms.kcl.ac.uk/christian.urban/Cookbook/\">ML cookbook</a>. There, it is explained why a parser always returns a tuple.</p>",
        "id": 442219111,
        "sender_full_name": "Lukas Stevens",
        "timestamp": 1717412326
    },
    {
        "content": "<p>Thanks a lot, that is super helpful also for other questions I had. I did not know that existed. I'll read that chapter. I do understand why it returns a tuple for all the other scanner functions just not how to use this.</p>",
        "id": 442273156,
        "sender_full_name": "Hanna Lachnitt",
        "timestamp": 1717425691
    }
]