[
    {
        "content": "<p>Is there a way to hack PHOAS into Isabelle HOL? I know the well known encodings heavily rely on  dependent types, but I've seen some folks pull off hackery with Locales in similar situations.</p>\n<p>I'd like to encode something simple like<br>\n<a href=\"https://gist.github.com/bond15/8a7c265f4e78ee88ee361425b582a1bb\">https://gist.github.com/bond15/8a7c265f4e78ee88ee361425b582a1bb</a></p>",
        "id": 251264220,
        "sender_full_name": "Eric Bond",
        "timestamp": 1630344677
    },
    {
        "content": "<p>Why exactly would you need dependent types? For handling contexts or for something else?</p>\n<p>If it’s the former, then you can just decide to have an infinite list of additional variables around, by which you turn the type of variable indices from <code>Fin n</code> into <code>Fin n + ℕ</code>, which is isomorphic to <code>ℕ</code>. Instead of a finite list of variable assignments, whose length depends on the nesting depth of binders, you then have an infinite list of variable assignments.</p>\n<p>This is the approach we’ve come up with for the implementation of the Þ-calculus (see <a href=\"https://github.com/input-output-hk/ouroboros-high-assurance\">https://github.com/input-output-hk/ouroboros-high-assurance</a>).</p>",
        "id": 251555580,
        "sender_full_name": "Wolfgang Jeltsch",
        "timestamp": 1630502138
    },
    {
        "content": "<p>from that description, Isn't that a FOAS encoding? I'd like to leverage the host language for variable binding and substitution instead of explicitly managing a context of variables.  </p>\n<p>I'm curious to see the example but I'm not sure where to look in that repo :).</p>",
        "id": 251582086,
        "sender_full_name": "Eric Bond",
        "timestamp": 1630511278
    },
    {
        "content": "<p>When speaking about contexts, I didn’t mean that they are represented by first-class entities in the encoding but rather that they exist as a concept, which we represent indirectly using HOAS. In HOAS, you can represent an open term (a term that may contain free variables) as a function with domain <code>Fin n a</code>, where <code>a</code> is the type of values assigned to variables. We represent such a term as a function with domain <code>Stream a</code>. The intuition is that beside the variables bound by surrounding binders we may have infinitely many other variables, of which you can think as global variables.</p>\n<p>You may want to have a look at <a href=\"https://github.com/input-output-hk/ouroboros-high-assurance/blob/master/Isabelle/Thorn_Calculus/Thorn_Calculus-Processes.thy\">https://github.com/input-output-hk/ouroboros-high-assurance/blob/master/Isabelle/Thorn_Calculus/Thorn_Calculus-Processes.thy</a>. This theory defines an algebraic data type <code>process</code>, whose values are HOAS encodings of <em>closed</em> terms. It then uses the type <code>process family</code> to represent <em>open</em> terms, where <code>'a family</code> is a synonym of <code>chan stream ⇒ 'a</code> (<code>chan</code> is the type of things assigned to variables).</p>\n<p>The semantics defined in <a href=\"https://github.com/input-output-hk/ouroboros-high-assurance/blob/master/Isabelle/Thorn_Calculus/Thorn_Calculus-Semantics-Synchronous.thy\">https://github.com/input-output-hk/ouroboros-high-assurance/blob/master/Isabelle/Thorn_Calculus/Thorn_Calculus-Semantics-Synchronous.thy</a> as the relation <code>synchronous_transition</code> is based on <code>process family</code>. It handles the introduction of new local variables by switching from an original environment <code>e :: chan stream</code> to an extended environment <code>a ## e :: chan stream</code>, where <code>a</code> is the value assigned to the local variable.</p>",
        "id": 251589289,
        "sender_full_name": "Wolfgang Jeltsch",
        "timestamp": 1630514006
    }
]