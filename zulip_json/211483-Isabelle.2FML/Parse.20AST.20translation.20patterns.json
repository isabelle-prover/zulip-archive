[
    {
        "content": "<p>Hi all. I am having issues with <code>translations</code> for a custom, non-<code>logic</code> nonterminal. I've boiled down to the following 'surprising' behavior of  <code>Syntax_Phases.parse_ast_pattern</code> processing LHS &amp; RHS of <code>translations</code> patterns:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">nonterminal</span><span class=\"w\"> </span><span class=\"n\">foo</span>\n<span class=\"k\">syntax</span>\n<span class=\"w\">  </span><span class=\"s\">\"_id_as_foo\"</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"id ⇒ foo\"</span>\n<span class=\"w\">  </span><span class=\"s\">\"_id_as_foo_with_syntax\"</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"id ⇒ foo\"</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"s\">\"FOO'_ID _\"</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"s\">\"_id_as_logic\"</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"id ⇒ logic\"</span>\n<span class=\"w\">  </span><span class=\"s\">\"_foo_to_logic\"</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"foo ⇒ logic\"</span>\n\n<span class=\"k\">ML</span><span class=\"s\">‹</span>\n<span class=\"s\">  val ctxt = @{context}</span>\n<span class=\"s\">  val get_syn_ty = #1 o dest_Type o Proof_Context.read_type_name {proper = true, strict = false} ctxt;</span>\n<span class=\"s\">  val foo_ty = get_syn_ty \"foo\"</span>\n<span class=\"s\">  val logic_ty = get_syn_ty \"logic\"</span>\n\n<span class=\"s\">  (* FAIL: *)</span>\n<span class=\"s\">  (* val ast0 = Syntax_Phases.parse_ast_pattern ctxt (foo_ty, \"_id_as_foo x\") *)</span>\n<span class=\"s\">  (* OK (!) *)</span>\n<span class=\"s\">  val ast1 = Syntax_Phases.parse_ast_pattern ctxt (logic_ty, \"_foo_to_logic (_id_as_foo x)\")</span>\n<span class=\"s\">  (* FAIL: *)</span>\n<span class=\"s\">  (* val ast2 = Syntax_Phases.parse_ast_pattern ctxt (foo_ty, \"_id_as_foo_with_syntax x\") *)</span>\n<span class=\"s\">  (* OK: *)</span>\n<span class=\"s\">  val ast3 = Syntax_Phases.parse_ast_pattern ctxt (foo_ty, \"FOO_ID x\")</span>\n<span class=\"s\">  (* FAIL (!) *)</span>\n<span class=\"s\">  (* val ast4 = Syntax_Phases.parse_ast_pattern ctxt (logic_ty, \"_foo_to_logic (FOO_ID x)\") *)</span>\n<span class=\"s\">  (* OK: *)</span>\n<span class=\"s\">  val ast5 = Syntax_Phases.parse_ast_pattern ctxt (logic_ty, \"_id_as_logic x\")</span>\n</code></pre></div>\n<p>Can someone explain what's going on here? Why, for example, would <code>_id_as_foo x</code> fail to parse, while <code>_foo_to_logic (_id_as_foo x)</code> succeeds? Any why does replacing <code>_id_as_foo x</code> by concrete syntax help? I am very puzzled.</p>",
        "id": 382830688,
        "sender_full_name": "Hanno Becker",
        "timestamp": 1691474719
    }
]