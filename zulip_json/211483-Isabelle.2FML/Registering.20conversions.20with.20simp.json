[
    {
        "content": "<p>Hi! (How) Is it possible to register a conversion with the simplifier (similar to a simproc), so that it is automatically tried as part of <code>simp</code>?</p>",
        "id": 340033701,
        "sender_full_name": "Hanno Becker",
        "timestamp": 1678173383
    },
    {
        "content": "<p>No, you're going to have to wrap it in a simproc. That's not very hard to do; simprocs are more general than conversions.</p>",
        "id": 340049891,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1678179137
    },
    {
        "content": "<p>So I'd just give a trivial pattern to the simproc so the conversion starts out with the full goal?</p>",
        "id": 340053270,
        "sender_full_name": "Hanno Becker",
        "timestamp": 1678180162
    },
    {
        "content": "<p>Ah, I see, I hadn't thought of that. Usually you do target a rather specific term structure when you do this sort of thing.</p>\n<p>You can of course just register your simproc with a pattern like <code>x</code>, but it will be called on every single subterm of your term, i.e. quadratically often (in terms of your proof state size). If you do this, you ought to make sure your simproc fails fast when it fails. And even then there might be some performance impact. For a small closed-off development this may be fine, but if your development is something that may be imported by others it would be prudent not to enable this simproc by default.</p>\n<p>There is another possibility that is not quite as nice but might have less overhead, namely to register a <em>looper</em> instead of a simproc. Off the top of my head, a looper is called when the simplifier has tried everything else, the goal is not solved and it does not change anymore either. The looper gets to see the <em>entire</em> goal (not just a subterm) and can do to it whatever it wants. In particular, it could apply a conversion to the entire goal (or parts of it).</p>\n<p>Not sure which is better for your use case.</p>",
        "id": 340055323,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1678180780
    },
    {
        "content": "<p>Wow, thanks. I had never heard of loopers, but that seems like the right thing here -- I want the conversion to be called on the _entire_ subgoal only, as it needs to selectively apply different simplifications for assumptions and conclusions, and in the conclusion there are further refinements</p>",
        "id": 340055822,
        "sender_full_name": "Hanno Becker",
        "timestamp": 1678180916
    },
    {
        "content": "<p>Can you point me to a minimal example of how to use loopers?</p>",
        "id": 340055913,
        "sender_full_name": "Hanno Becker",
        "timestamp": 1678180930
    },
    {
        "content": "<p>Yeah this is pretty arcane Isabelle lore. Not many people know about it these days, I think. The only looper that I am aware of is the one that does case splitting.</p>",
        "id": 340056578,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1678181114
    },
    {
        "content": "<p>You can just grep the AFP or the distribution for <code>addloop</code>, but I don't think there are very many helpful examples. The splitter is in <code>~~/src/Provers/splitter.ML</code>.</p>",
        "id": 340057459,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1678181391
    },
    {
        "content": "<p>I looked through my extensive collection of half-finished gadgets and found the following experimental code for normalisation of commutative monoid expressions. It registers a looper in order to get to see the entire proof state and then applies a targeted rewrite step. Definitely not a minimal example, but probably one of the few actual uses of a custom looper.</p>\n<p><a href=\"/user_uploads/14278/hgis35TTVgYnPoMElVNPNSc2/Monad_Normalisation.thy\">Monad_Normalisation.thy</a></p>",
        "id": 340058210,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1678181627
    },
    {
        "content": "<p>Just another thought, do remember that the goal will always be of type <code>prop</code>, so if you want to match only the goal, you could also do a simproc that matches on the pattern <code>p :: prop</code> or, in HOL, <code>Trueprop p</code>.</p>\n<p>The main problem there is that you basically have no way to distinguish whether the thing you get to see is the goal or a premise. If you just do <code>Trueprop p</code> you only get the assumptions and premises; if you match on <code>p :: prop</code> you will also get terms of the form <code>asm1 ⟹ asm2 ⟹ goal</code>.</p>",
        "id": 340060217,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1678182238
    },
    {
        "content": "<p>I see... perhaps I should abandon the idea of integrating said simplification into <code>simp</code>, and just wrap it in a separate tactic. At the least, one can give a name to <code>(simp | conv_based_tactic)+</code> if that happens to be invoked many times.</p>",
        "id": 340062920,
        "sender_full_name": "Hanno Becker",
        "timestamp": 1678182976
    },
    {
        "content": "<p>Thank you <span class=\"user-mention\" data-user-id=\"232736\">@Manuel Eberl</span> !</p>",
        "id": 340063076,
        "sender_full_name": "Hanno Becker",
        "timestamp": 1678183023
    }
]