[
    {
        "content": "<p>Hello together,<br>\nI am currently using Specification.definition to register a new function definition like this:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"n\">val</span><span class=\"w\"> </span><span class=\"k\">def</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Binding.name</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"s\">\"T_map_def\"</span><span class=\"o\">)</span>\n<span class=\"n\">val</span><span class=\"w\"> </span><span class=\"n\">eq</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">@</span><span class=\"ow\">{</span><span class=\"kt\">term</span><span class=\"w\"> </span><span class=\"s\">\"T_map f xs = T2_map (undefined::'a ⇒ nat,f) xs\"</span><span class=\"ow\">}</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">&gt;</span><span class=\"w\"> </span><span class=\"n\">HOLogic.mk_Trueprop</span>\n<span class=\"n\">val</span><span class=\"w\"> </span><span class=\"n\">ctxt'</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Specification.definition</span><span class=\"w\"> </span><span class=\"n\">NONE</span><span class=\"w\"> </span><span class=\"o\">[]</span><span class=\"w\"> </span><span class=\"o\">[]</span><span class=\"w\"> </span><span class=\"o\">((</span><span class=\"k\">def</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"o\">[]),</span><span class=\"w\"> </span><span class=\"n\">eq</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">ctxt</span>\n</code></pre></div>\n<p>I found on another that it's better to use Local_Theory.define, but sadly there's not really an example on registering function definitions. Can Local_Theory.define only be used for function with lambdas or is there a better solution?</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"n\">val</span><span class=\"w\"> </span><span class=\"k\">def</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Binding.name</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"s\">\"T_map_def\"</span><span class=\"o\">)</span>\n<span class=\"n\">val</span><span class=\"w\"> </span><span class=\"n\">name</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Binding.name</span><span class=\"w\"> </span><span class=\"s\">\"T_map\"</span>\n<span class=\"n\">val</span><span class=\"w\"> </span><span class=\"n\">rhs</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">@</span><span class=\"ow\">{</span><span class=\"kt\">term</span><span class=\"w\"> </span><span class=\"s\">\"(λf xs. T2_map (undefined::'a ⇒ nat,f) xs)\"</span><span class=\"ow\">}</span>\n<span class=\"n\">val</span><span class=\"w\"> </span><span class=\"n\">ctxt''</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Local_Theory.define</span><span class=\"w\"> </span><span class=\"o\">((</span><span class=\"n\">name</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">NoSyn</span><span class=\"o\">),</span><span class=\"w\"> </span><span class=\"o\">((</span><span class=\"k\">def</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"o\">[]),</span><span class=\"w\"> </span><span class=\"n\">rhs</span><span class=\"o\">))</span><span class=\"w\"> </span><span class=\"n\">ctxt</span>\n</code></pre></div>",
        "id": 472206144,
        "sender_full_name": "Jonas Stahl",
        "timestamp": 1727092017
    }
]