[
    {
        "content": "<p>In our theory, we encountered some differences between using <code>by (cases …; auto)</code> and <code>by (cases …) auto</code> to prove a statement. In many cases, the former option is considerably slower and in one case, the first option even fails to terminate. From the specification (p. 145 and p. 148), we understood that, in this case, they should do the same; apparently, we are wrong. Can you tell us the difference and why the second option is faster? Below we created a minimal working example demonstrating this issue.</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">theory</span><span class=\"w\"> </span><span class=\"n\">MWE</span>\n<span class=\"w\">  </span><span class=\"kp\">imports</span><span class=\"w\"> </span><span class=\"n\">Main</span>\n<span class=\"k\">begin</span>\n\n<span class=\"k\">datatype</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n n-Type\">'a</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">t</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"n n-Type\">'a</span>\n\n<span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">set_of_list</span><span class=\"w\"> </span><span class=\"kp\">where</span>\n<span class=\"w\">  </span><span class=\"s\">\"set_of_list [] = {}\"</span>\n<span class=\"o\">|</span><span class=\"w\"> </span><span class=\"s\">\"set_of_list (A x # xs) = insert x (set_of_list xs)\"</span>\n\n<span class=\"kn\">lemma</span>\n<span class=\"w\">  </span><span class=\"kp\">assumes</span><span class=\"w\"> </span><span class=\"s\">\"xs = ys @ zs\"</span>\n<span class=\"w\">  </span><span class=\"kp\">shows</span><span class=\"w\"> </span><span class=\"s\">\"set_of_list xs = set_of_list ys ∪ set_of_list zs\"</span>\n<span class=\"w\">  </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">assms</span>\n<span class=\"k\">proof</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">induction</span><span class=\"w\"> </span><span class=\"n\">ys</span><span class=\"w\"> </span><span class=\"n\">arbitrary</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">xs</span><span class=\"w\"> </span><span class=\"n\">zs</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"k\">case</span><span class=\"w\"> </span><span class=\"n\">Nil</span>\n<span class=\"w\">  </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"k\">case</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">simp</span>\n<span class=\"k\">next</span>\n<span class=\"w\">  </span><span class=\"k\">case</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Cons</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"n\">ys</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"k\">case</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">cases</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">auto</span>\n<span class=\"w\">      </span><span class=\"c\">(* Why can the proof method not be replaced with `(cases y; auto)`? *)</span>\n<span class=\"k\">qed</span>\n\n<span class=\"k\">end</span>\n</code></pre></div>",
        "id": 374814258,
        "sender_full_name": "Yannick Stade",
        "timestamp": 1689229189
    },
    {
        "content": "<p>Weird. simp_trace_new tells you exactly why it behaves differently… but I have no idea why</p>",
        "id": 374815073,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1689229479
    },
    {
        "content": "<p>Ah nothing magic here: the issue is that you are relying on the order in which the simplification happens</p>",
        "id": 374815485,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1689229640
    },
    {
        "content": "<p>And the user is responsible of taking care that the rewrite system is confluent</p>",
        "id": 374815587,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1689229682
    },
    {
        "content": "<p>Other examples are differences between <code>simp add: XXX</code> and marking XXX as <code>[simp]</code>.</p>",
        "id": 374815736,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1689229745
    },
    {
        "content": "<p>Ah, okay, this explains the differences. Thank you!</p>",
        "id": 374816246,
        "sender_full_name": "Yannick Stade",
        "timestamp": 1689229874
    },
    {
        "content": "<p>(EDIT: I posted something as an answer here which was meant as a new topic)</p>",
        "id": 382830098,
        "sender_full_name": "Hanno Becker",
        "timestamp": 1691474532
    }
]