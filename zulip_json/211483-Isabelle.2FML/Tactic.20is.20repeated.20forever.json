[
    {
        "content": "<p>Did anyone have a similar issue: I am working on a tactic in ML (that currently fails at some point), but instead of showing me an error that the tactic failed, the tactic is run again in an endless loop. I never had this before and I don't know how I disable this. I need to SIGKILL isabelle because it exhausts my resources printing in an endless loop</p>",
        "id": 411250445,
        "sender_full_name": "Jan van Brügge",
        "timestamp": 1704397298
    },
    {
        "content": "<p>(I've set <code>Multithreading.parallel_proofs := 0</code> so there is no concurrency going on)</p>",
        "id": 411250949,
        "sender_full_name": "Jan van Brügge",
        "timestamp": 1704397469
    },
    {
        "content": "<p>Hard to say without seeing the code. Perhaps there is some non-determinism going on before your tactic?</p>",
        "id": 411252429,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1704398283
    },
    {
        "content": "<p>Nope the tactic has barely started, the lists are each only two elements big</p>\n<div class=\"codehilite\" data-code-language=\"Standard ML\"><pre><span></span><code><span class=\"kr\">val</span> <span class=\"nv\">thm</span> <span class=\"p\">=</span> <span class=\"nn\">Goal</span><span class=\"p\">.</span><span class=\"n\">prove_sorry</span> <span class=\"n\">lthy</span> <span class=\"p\">(</span><span class=\"n\">names</span> <span class=\"p\">(</span><span class=\"n\">fs</span> <span class=\"n\">@</span> <span class=\"n\">gs</span> <span class=\"n\">@</span> <span class=\"n\">ts</span><span class=\"p\">))</span> <span class=\"p\">(</span><span class=\"n\">f_prems</span> <span class=\"n\">@</span> <span class=\"n\">g_prems</span><span class=\"p\">)</span> <span class=\"n\">goal</span> <span class=\"p\">(</span><span class=\"kr\">fn</span> <span class=\"p\">{</span><span class=\"n\">context</span><span class=\"p\">=</span><span class=\"n\">ctxt</span><span class=\"p\">,</span> <span class=\"n\">prems</span><span class=\"p\">=</span><span class=\"n\">f_prems</span><span class=\"p\">}</span> <span class=\"p\">=&gt;</span> <span class=\"n\">EVERY1</span> <span class=\"p\">[</span>\n  <span class=\"n\">rtac</span> <span class=\"n\">ctxt</span> <span class=\"p\">(</span><span class=\"nn\">Drule</span><span class=\"p\">.</span><span class=\"n\">rotate_prems</span> <span class=\"n\">nvars</span> <span class=\"p\">(</span>\n    <span class=\"n\">infer_instantiate'</span> <span class=\"n\">ctxt</span> <span class=\"p\">(</span><span class=\"n\">replicate</span> <span class=\"p\">(</span><span class=\"n\">nvars</span> <span class=\"n\">+</span> <span class=\"n\">m</span><span class=\"p\">)</span> <span class=\"n\">NONE</span> <span class=\"n\">@</span> <span class=\"n\">map</span> <span class=\"p\">(</span><span class=\"n\">SOME</span> <span class=\"n\">o</span> <span class=\"nn\">Thm</span><span class=\"p\">.</span><span class=\"n\">cterm_of</span> <span class=\"n\">ctxt</span><span class=\"p\">)</span> <span class=\"n\">ts</span><span class=\"p\">)</span> <span class=\"p\">(</span>\n      <span class=\"nl\">#fresh_co_induct</span> <span class=\"p\">(</span><span class=\"nl\">#inner</span> <span class=\"p\">(</span><span class=\"n\">hd</span> <span class=\"p\">(</span><span class=\"nl\">#quotient_fps</span> <span class=\"n\">fp_res</span><span class=\"p\">)))</span>\n     <span class=\"p\">)</span>\n  <span class=\"p\">)),</span>\n  <span class=\"n\">EVERY'</span> <span class=\"p\">(</span><span class=\"n\">@</span><span class=\"p\">{</span><span class=\"n\">map</span> <span class=\"mi\">3</span><span class=\"p\">}</span> <span class=\"p\">(</span><span class=\"kr\">fn</span> <span class=\"n\">quot</span> <span class=\"p\">=&gt;</span> <span class=\"kr\">fn</span> <span class=\"n\">mrbnf</span> <span class=\"p\">=&gt;</span> <span class=\"kr\">fn</span> <span class=\"n\">vvsubst_cctor</span> <span class=\"p\">=&gt;</span> <span class=\"n\">EVERY'</span> <span class=\"p\">[</span>\n    <span class=\"n\">K</span> <span class=\"p\">(</span><span class=\"n\">print_tac</span> <span class=\"n\">ctxt</span> <span class=\"s2\">\"foo\"</span><span class=\"p\">),</span>\n    <span class=\"n\">K</span> <span class=\"n\">no_tac</span>\n  <span class=\"p\">])</span> <span class=\"p\">(</span><span class=\"nl\">#quotient_fps</span> <span class=\"n\">fp_res</span><span class=\"p\">)</span> <span class=\"n\">mrbnfs</span> <span class=\"n\">vvsubst_cctors</span><span class=\"p\">)</span>\n<span class=\"p\">]);</span>\n</code></pre></div>",
        "id": 411252746,
        "sender_full_name": "Jan van Brügge",
        "timestamp": 1704398441
    },
    {
        "content": "<p>if I comment out the <code>EVERY'</code> part it does stop</p>",
        "id": 411252922,
        "sender_full_name": "Jan van Brügge",
        "timestamp": 1704398505
    },
    {
        "content": "<p>but even if the lists were longer <code>K no_tac</code> should abort the whole proof right there</p>",
        "id": 411253023,
        "sender_full_name": "Jan van Brügge",
        "timestamp": 1704398530
    },
    {
        "content": "<p>it gets even weirder. I noticed that the begin of the proof is the same as one earlier (aside from whitespace), so I tried copying it and for some reason the <code>EVERY'</code> part is fine now?</p>\n<div class=\"codehilite\" data-code-language=\"Standard ML\"><pre><span></span><code><span class=\"kr\">val</span> <span class=\"nv\">thm</span> <span class=\"p\">=</span> <span class=\"nn\">Goal</span><span class=\"p\">.</span><span class=\"n\">prove_sorry</span> <span class=\"n\">lthy</span> <span class=\"p\">(</span><span class=\"n\">names</span> <span class=\"p\">(</span><span class=\"n\">fs</span> <span class=\"n\">@</span> <span class=\"n\">gs</span> <span class=\"n\">@</span> <span class=\"n\">ts</span><span class=\"p\">))</span> <span class=\"p\">(</span><span class=\"n\">f_prems</span> <span class=\"n\">@</span> <span class=\"n\">g_prems</span><span class=\"p\">)</span> <span class=\"n\">goal</span> <span class=\"p\">(</span><span class=\"kr\">fn</span> <span class=\"p\">{</span><span class=\"n\">context</span><span class=\"p\">=</span><span class=\"n\">ctxt</span><span class=\"p\">,</span> <span class=\"n\">prems</span><span class=\"p\">=</span><span class=\"n\">f_prems</span><span class=\"p\">}</span> <span class=\"p\">=&gt;</span> <span class=\"n\">EVERY1</span> <span class=\"p\">[</span>\n  <span class=\"n\">rtac</span> <span class=\"n\">ctxt</span> <span class=\"p\">(</span><span class=\"nn\">Drule</span><span class=\"p\">.</span><span class=\"n\">rotate_prems</span> <span class=\"n\">nvars</span> <span class=\"p\">(</span><span class=\"n\">infer_instantiate'</span> <span class=\"n\">ctxt</span> <span class=\"p\">(</span>\n    <span class=\"n\">replicate</span> <span class=\"p\">(</span><span class=\"n\">nvars</span> <span class=\"n\">+</span> <span class=\"n\">m</span><span class=\"p\">)</span> <span class=\"n\">NONE</span> <span class=\"n\">@</span> <span class=\"n\">map</span> <span class=\"p\">(</span><span class=\"n\">SOME</span> <span class=\"n\">o</span> <span class=\"nn\">Thm</span><span class=\"p\">.</span><span class=\"n\">cterm_of</span> <span class=\"n\">ctxt</span><span class=\"p\">)</span> <span class=\"n\">ts</span>\n  <span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nl\">#fresh_co_induct</span> <span class=\"p\">(</span><span class=\"nl\">#inner</span> <span class=\"p\">(</span><span class=\"n\">hd</span> <span class=\"p\">(</span><span class=\"nl\">#quotient_fps</span> <span class=\"n\">fp_res</span><span class=\"p\">)))))),</span>\n  <span class=\"n\">EVERY'</span> <span class=\"p\">(</span><span class=\"n\">@</span><span class=\"p\">{</span><span class=\"n\">map</span> <span class=\"mi\">3</span><span class=\"p\">}</span> <span class=\"p\">(</span><span class=\"kr\">fn</span> <span class=\"n\">quot</span> <span class=\"p\">=&gt;</span> <span class=\"kr\">fn</span> <span class=\"n\">mrbnf</span> <span class=\"p\">=&gt;</span> <span class=\"kr\">fn</span> <span class=\"n\">vvsubst_cctor</span> <span class=\"p\">=&gt;</span> <span class=\"n\">EVERY'</span> <span class=\"p\">[</span>\n    <span class=\"n\">REPEAT_DETERM</span> <span class=\"n\">o</span> <span class=\"n\">rtac</span> <span class=\"n\">ctxt</span> <span class=\"n\">impI</span><span class=\"p\">,</span>\n    <span class=\"n\">rtac</span> <span class=\"n\">ctxt</span> <span class=\"n\">trans</span><span class=\"p\">,</span>\n    <span class=\"n\">rtac</span> <span class=\"n\">ctxt</span> <span class=\"n\">vvsubst_cctor</span><span class=\"p\">,</span> <span class=\"cm\">(* this causes the endless loop *)</span>\n    <span class=\"n\">K</span> <span class=\"p\">(</span><span class=\"n\">print_tac</span> <span class=\"n\">ctxt</span> <span class=\"s2\">\"foo\"</span><span class=\"p\">)</span>\n  <span class=\"p\">])</span> <span class=\"p\">(</span><span class=\"nl\">#quotient_fps</span> <span class=\"n\">fp_res</span><span class=\"p\">)</span> <span class=\"n\">mrbnfs</span> <span class=\"n\">vvsubst_cctors</span><span class=\"p\">)}</span>\n<span class=\"p\">]);</span>\n</code></pre></div>\n<p>However trying to apply a theorem I proved earlier now causes the loop for some reason. This makes no sense whatsoever</p>",
        "id": 411347343,
        "sender_full_name": "Jan van Brügge",
        "timestamp": 1704451800
    },
    {
        "content": "<p>Maybe you are backtracking in the outer EVERY1? You could try adding a DETERM to the first rtac.</p>\n<p>Here is an example that looks a bit like yours. It produces larger and larger unifiers, so eventually the unification bounds triggers termination:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"n\">schematic_goal</span>\n<span class=\"w\">  </span><span class=\"kp\">fixes</span><span class=\"w\"> </span><span class=\"n\">P</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"'a list ⇒ (_ ⇒ _) ⇒ bool\"</span><span class=\"w\"> </span><span class=\"kp\">and</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"'a list ⇒ 'a list\"</span>\n<span class=\"w\">  </span><span class=\"kp\">shows</span><span class=\"w\"> </span><span class=\"s\">\"P (?g (f xs)) ?g\"</span>\n<span class=\"w\">  </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"w\"> </span><span class=\"s\">‹EVERY1 [resolve_tac @{context} @{thms list.induct[where P=\"λxs. P (f (g xs)) g\" for g]},</span>\n<span class=\"s\">    EVERY' [K (print_tac @{context} \"foo\"), K no_tac]]›</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 411360577,
        "sender_full_name": "Dmitriy Traytel",
        "timestamp": 1704457018
    },
    {
        "content": "<p>Indeed that does seem to work. Very surprising behavior</p>",
        "id": 411361912,
        "sender_full_name": "Jan van Brügge",
        "timestamp": 1704457719
    },
    {
        "content": "<p>I just added <code>DETERM o </code> in front of the induct theorem at the beginning</p>",
        "id": 411361960,
        "sender_full_name": "Jan van Brügge",
        "timestamp": 1704457744
    },
    {
        "content": "<p>Welcome to backtracking <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 411362478,
        "sender_full_name": "Dmitriy Traytel",
        "timestamp": 1704458042
    },
    {
        "content": "<p>But this suggests that your application of the induction theorem allows for infinitely many unifiers?</p>",
        "id": 411362555,
        "sender_full_name": "Dmitriy Traytel",
        "timestamp": 1704458066
    },
    {
        "content": "<p>Maybe you want to instantiate more things (either in the theorem or in the goal) to avoid this.</p>",
        "id": 411362605,
        "sender_full_name": "Dmitriy Traytel",
        "timestamp": 1704458098
    },
    {
        "content": "<p>I don't see what the multiple unifiers would be. The proof state looks like this:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"o\">((</span><span class=\"n\">∀a.</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">∈</span><span class=\"w\"> </span><span class=\"n\">FFVars_T11</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">⟶</span><span class=\"w\"> </span><span class=\"n\">f1</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">g1</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">⟶</span>\n<span class=\"w\">  </span><span class=\"o\">(</span><span class=\"n\">∀a.</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">∈</span><span class=\"w\"> </span><span class=\"n\">FFVars_T12</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">⟶</span><span class=\"w\"> </span><span class=\"n\">f2</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">g2</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">⟶</span>\n<span class=\"w\">  </span><span class=\"o\">(</span><span class=\"n\">∀a.</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">∈</span><span class=\"w\"> </span><span class=\"n\">set3_T1</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">⟶</span><span class=\"w\"> </span><span class=\"n\">f3</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">g3</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">⟶</span>\n<span class=\"w\">  </span><span class=\"o\">(</span><span class=\"n\">∀a.</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">∈</span><span class=\"w\"> </span><span class=\"n\">set4_T1</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">⟶</span><span class=\"w\"> </span><span class=\"n\">f4</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">g4</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">⟶</span><span class=\"w\"> </span><span class=\"n\">vvsubst_T1</span><span class=\"w\"> </span><span class=\"n\">f1</span><span class=\"w\"> </span><span class=\"n\">f2</span><span class=\"w\"> </span><span class=\"n\">f3</span><span class=\"w\"> </span><span class=\"n\">f4</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">vvsubst_T1</span><span class=\"w\"> </span><span class=\"n\">g1</span><span class=\"w\"> </span><span class=\"n\">g2</span><span class=\"w\"> </span><span class=\"n\">g3</span><span class=\"w\"> </span><span class=\"n\">g4</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"o\">)</span>\n<span class=\"n\">∧</span><span class=\"w\"> </span><span class=\"o\">((</span><span class=\"n\">∀a.</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">∈</span><span class=\"w\"> </span><span class=\"n\">FFVars_T21</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"n\">⟶</span><span class=\"w\"> </span><span class=\"n\">f1</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">g1</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">⟶</span>\n<span class=\"w\">  </span><span class=\"o\">(</span><span class=\"n\">∀a.</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">∈</span><span class=\"w\"> </span><span class=\"n\">FFVars_T22</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"n\">⟶</span><span class=\"w\"> </span><span class=\"n\">f2</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">g2</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">⟶</span>\n<span class=\"w\">  </span><span class=\"o\">(</span><span class=\"n\">∀a.</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">∈</span><span class=\"w\"> </span><span class=\"n\">set3_T2</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"n\">⟶</span><span class=\"w\"> </span><span class=\"n\">f3</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">g3</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">⟶</span>\n<span class=\"w\">  </span><span class=\"o\">(</span><span class=\"n\">∀a.</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">∈</span><span class=\"w\"> </span><span class=\"n\">set4_T2</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"n\">⟶</span><span class=\"w\"> </span><span class=\"n\">f4</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">g4</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">⟶</span><span class=\"w\"> </span><span class=\"n\">vvsubst_T2</span><span class=\"w\"> </span><span class=\"n\">f1</span><span class=\"w\"> </span><span class=\"n\">f2</span><span class=\"w\"> </span><span class=\"n\">f3</span><span class=\"w\"> </span><span class=\"n\">f4</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">vvsubst_T2</span><span class=\"w\"> </span><span class=\"n\">g1</span><span class=\"w\"> </span><span class=\"n\">g2</span><span class=\"w\"> </span><span class=\"n\">g3</span><span class=\"w\"> </span><span class=\"n\">g4</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>and the induction theorem has <code>?P ?x ∧ ?Q ?y</code> in its conclusion. I fix <code>?x</code> and <code>?y</code>.</p>",
        "id": 411363052,
        "sender_full_name": "Jan van Brügge",
        "timestamp": 1704458308
    },
    {
        "content": "<p>Probably it would be also easy for you to fix ?P and ?Q?</p>",
        "id": 411363173,
        "sender_full_name": "Dmitriy Traytel",
        "timestamp": 1704458371
    },
    {
        "content": "<p>sure, but just for my understanding, why does this cause backtracking here?</p>",
        "id": 411363312,
        "sender_full_name": "Jan van Brügge",
        "timestamp": 1704458417
    },
    {
        "content": "<p>If <code>x</code> and <code>y</code> are not bound variables, there is no unique mgu.<br>\nFor example, consider <code>?f 0 =?= 0 + 1</code>. Both <code>?f := \\_ -&gt; 0 + 1</code> and <code>?f := \\x -&gt; x + 1</code> are solutions but neither is more general than the other.</p>",
        "id": 411381005,
        "sender_full_name": "Kevin Kappelmann",
        "timestamp": 1704466058
    },
    {
        "content": "<p>Ah thanks, that makes sense.</p>",
        "id": 411381244,
        "sender_full_name": "Jan van Brügge",
        "timestamp": 1704466174
    },
    {
        "content": "<p>Nice explanation, Kevin. So it is not non-termination, but just very slow termination (going through 2^12 possible unifiers):</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">consts</span><span class=\"w\"> </span><span class=\"n\">FFVars_T11</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"n n-Type\">'a</span>\n<span class=\"k\">consts</span><span class=\"w\"> </span><span class=\"n\">FFVars_T12</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"n n-Type\">'a</span>\n<span class=\"k\">consts</span><span class=\"w\"> </span><span class=\"n\">set3_T1</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"n n-Type\">'a</span>\n<span class=\"k\">consts</span><span class=\"w\"> </span><span class=\"n\">set4_T1</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"n n-Type\">'a</span>\n<span class=\"k\">consts</span><span class=\"w\"> </span><span class=\"n\">vvsubst_T1</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"n n-Type\">'a</span>\n<span class=\"k\">consts</span><span class=\"w\"> </span><span class=\"n\">FFVars_T21</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"n n-Type\">'a</span>\n<span class=\"k\">consts</span><span class=\"w\"> </span><span class=\"n\">FFVars_T22</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"n n-Type\">'a</span>\n<span class=\"k\">consts</span><span class=\"w\"> </span><span class=\"n\">set3_T2</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"n n-Type\">'a</span>\n<span class=\"k\">consts</span><span class=\"w\"> </span><span class=\"n\">set4_T2</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"n n-Type\">'a</span>\n<span class=\"k\">consts</span><span class=\"w\"> </span><span class=\"n\">vvsubst_T2</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"n n-Type\">'a</span>\n\n<span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">ind</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"foo P x ⟹ bar Q y ⟹ P x ∧ Q y\"</span>\n<span class=\"w\">  </span><span class=\"gr\">sorry</span>\n\n<span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"s\">\"((∀a. a ∈ FFVars_T11 x ⟶ f1 a = g1 a) ⟶</span>\n<span class=\"s\">     (∀a. a ∈ FFVars_T12 x ⟶ f2 a = g2 a) ⟶</span>\n<span class=\"s\">     (∀a. a ∈ set3_T1 x ⟶ f3 a = g3 a) ⟶</span>\n<span class=\"s\">     (∀a. a ∈ set4_T1 x ⟶ f4 a = g4 a) ⟶ vvsubst_T1 f1 f2 f3 f4 x = vvsubst_T1 g1 g2 g3 g4 x) ∧</span>\n<span class=\"s\">    ((∀a. a ∈ FFVars_T21 y ⟶ f1 a = g1 a) ⟶</span>\n<span class=\"s\">     (∀a. a ∈ FFVars_T22 y ⟶ f2 a = g2 a) ⟶</span>\n<span class=\"s\">     (∀a. a ∈ set3_T2 y ⟶ f3 a = g3 a) ⟶</span>\n<span class=\"s\">     (∀a. a ∈ set4_T2 y ⟶ f4 a = g4 a) ⟶ vvsubst_T2 f1 f2 f3 f4 y = vvsubst_T2 g1 g2 g3 g4 y)\"</span>\n<span class=\"w\">  </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"w\"> </span><span class=\"s\">‹</span>\n<span class=\"s\">    let</span>\n<span class=\"s\">      val i = Unsynchronized.ref 0;</span>\n<span class=\"s\">    in</span>\n<span class=\"s\">      TRY (resolve_tac @{context} @{thms ind[where x = x and y = y]} 1 THEN</span>\n<span class=\"s\">      (fn x =&gt; (i := !i + 1; no_tac x))) THEN</span>\n<span class=\"s\">      (fn x =&gt; (@{print} i; all_tac x))</span>\n<span class=\"s\">    end›</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 411389089,
        "sender_full_name": "Dmitriy Traytel",
        "timestamp": 1704469131
    },
    {
        "content": "<p>Backtracking strikes again. <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span> <br>\nDid I win something?</p>",
        "id": 411420069,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1704482418
    }
]