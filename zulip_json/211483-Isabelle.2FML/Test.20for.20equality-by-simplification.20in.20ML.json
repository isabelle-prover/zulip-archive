[
    {
        "content": "<p>Hi! What would be the shortest/cleanest way to check, within SML, whether within a given proof context, the simplifier would be able to prove two terms equal? In other words, given terms <code>s</code> and <code>t</code> of the same type, I'd like to know, in ML, whether</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">&lt;s</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">t&gt;</span>\n<span class=\"w\">   </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">simp</span>\n</code></pre></div>\n<p>would succeed.</p>",
        "id": 339275960,
        "sender_full_name": "Hanno Becker",
        "timestamp": 1677831152
    },
    {
        "content": "<p>That's how I would do it:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">ML</span><span class=\"s\">‹</span>\n<span class=\"s\">  (*example values*)</span>\n<span class=\"s\">  val (s, t) = (@{cterm \"0 :: nat\"}, @{cterm \"0 + 0 :: nat \"})</span>\n\n<span class=\"s\">  val ctxt = @{context}</span>\n<span class=\"s\">  val cT = Thm.ctyp_of_cterm s</span>\n<span class=\"s\">  val goal = </span><span class=\"ss\">\\&lt;^instantiate&gt;</span><span class=\"s\">‹'a = cT and s and t in</span>\n<span class=\"s\">    cterm ‹Trueprop (s = t)› for s :: 'a and t›</span>\n<span class=\"s\">  val simp_tac = Simplifier.simp_tac ctxt |&gt; SOLVED' |&gt; HEADGOAL |&gt; SINGLE</span>\n<span class=\"s\">  val thmOpt = Goal.init goal |&gt; simp_tac |&gt; Option.map Goal.conclude</span>\n<span class=\"s\">  val _ = @{print} thmOpt</span>\n<span class=\"s\">›</span>\n</code></pre></div>",
        "id": 339284297,
        "sender_full_name": "Kevin Kappelmann",
        "timestamp": 1677833874
    },
    {
        "content": "<p>Edit: fixed a line</p>",
        "id": 339284900,
        "sender_full_name": "Kevin Kappelmann",
        "timestamp": 1677834034
    },
    {
        "content": "<p>Awesome, thank you <span class=\"user-mention\" data-user-id=\"233154\">@Kevin Kappelmann</span> !</p>",
        "id": 339493926,
        "sender_full_name": "Hanno Becker",
        "timestamp": 1677909894
    }
]