[
    {
        "content": "<p>I am trying to use the OF combinator with the abstraction theorem from Pure, i.e. <code>(⋀x. ?f x ≡ ?g x) ⟹ λx. ?f x ≡ λx. ?g x</code>. But trying to instantiate the abstraction theorem with the theorem <code>⋀x. f x ≡ g x</code> yields a unification error (<code>OF: no unifiers</code>). Unification tracing reveals that the clash occurs between <code>Pure.all =/= Pure.eq</code>, but unifying the terms of the theorems manually works fine. Is OF doing something to the theorems that I am not aware of and if so, how can I make the instantiation work?</p>",
        "id": 243096593,
        "sender_full_name": "Paul Bachmann",
        "timestamp": 1623970946
    },
    {
        "content": "<p>We need more details to understand your problem. The following works:</p>\n<div class=\"codehilite\"><pre><span></span><code>lemma H1: ‹(⋀x. f x ≡ g x) ⟹ λx. f x ≡ λx. g x›\n  by auto\n\ncontext\n  assumes H2: ‹⋀x. f x ≡ g x›\nbegin\n\nthm H1[OF H2]\n\nML ‹@{thm H1} OF @{thms H2}›\nend\n</code></pre></div>",
        "id": 243129389,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1624004317
    },
    {
        "content": "<p>Remark however that you don't get exactly the theorem you want because of HO unification</p>",
        "id": 243129443,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1624004374
    },
    {
        "content": "<p>The HO unification is probably your problem, but we need more details (don't forget to <code>@{print}</code> intermediate results if you are using ML)</p>",
        "id": 243130198,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1624004799
    },
    {
        "content": "<p>The problem seems to be that the theorem that I want to use as H2 has, in ML, the form  <code>Const (\"Pure.all\", \"(?'a1 ⇒ prop) ⇒ prop\") $ Abs (\"x\", \"?'a1\", ...)</code> while your H2 theorem has the bound variable replacd by a Var.  I need this because I explicitly want the x variable to be the bound variable in the lambda term of the conclusion of H1 and my f  and g terms might be more complicated and might contain more variables. However, I could also try using the version with a Var in H2, but as you suspected, the unification result I get from that is not exactly what I want, since I simply want f and g in H1 to be instantiated with f and g from H2.</p>",
        "id": 243136110,
        "sender_full_name": "Paul Bachmann",
        "timestamp": 1624008189
    },
    {
        "content": "<p>I think the problem is that instantiation with <code>OF</code> can only instantiate schematic variables, not variables bound by a <code>Pure.all</code>. This is usually not a problem because all theorems you can normally get your hands on have schematic variables instead of outermost-level-universally-meta-quantified variables anyway.</p>",
        "id": 243139440,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1624010052
    },
    {
        "content": "<p>If you really do have a theorem with outermost-level <code>Pure.all</code> and want to instantiate these variables, you will have to do an explicit elimination of the universal quantifier using e.g. the corresponding functions from the <code>Thm</code> module.</p>",
        "id": 243139517,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1624010105
    },
    {
        "content": "<p>In general, you should probably keep it to schematic variables if possible.</p>",
        "id": 243139972,
        "sender_full_name": "Lukas Stevens",
        "timestamp": 1624010406
    }
]