[
    {
        "content": "<p>I know they are both strings but of different semantics, but, what the semantics exactly is? Thanks!</p>",
        "id": 283012974,
        "sender_full_name": "Qiyuan Xu",
        "timestamp": 1653009835
    },
    {
        "content": "<p>FYI while it is entirely possible that you will get answers to such ML questions here on Zulip, the best source for such explanations is always Makarius, and he does not read Zulip, so you might want to try the isabelle-users mailing list as well. (important: <em>NOT</em> isabelle-dev)</p>",
        "id": 283040013,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1653035928
    },
    {
        "content": "<p>He doesn't always reply in a very timely manner though…</p>",
        "id": 283040028,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1653035940
    },
    {
        "content": "<p>(since he's obviously very busy)</p>",
        "id": 283040059,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1653035961
    },
    {
        "content": "<p>But not very many people other than him do lots of Isabelle/ML programming these days, especially not concerning such internal things like bstring and xstring</p>",
        "id": 283040099,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1653035988
    },
    {
        "content": "<p>From skimming the source code it seems to me that <code>bstring</code> is for bindings, i.e. things like fully qualified theorem names, constant names, type class names etc.</p>",
        "id": 283040519,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1653036219
    },
    {
        "content": "<p><code>xstring</code> on the other hand looks more like that kind of string that the user will see in the end, where unnecessary information has been stripped</p>",
        "id": 283040551,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1653036241
    },
    {
        "content": "<p>for instance, if you do something like</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kt\">ML_val</span> <span class=\"err\">‹</span><span class=\"n\">Proof_Context.extern_const</span> <span class=\"err\">@</span><span class=\"ow\">{</span><span class=\"k\">context</span><span class=\"ow\">}</span> <span class=\"s\">\"HOL.True\"</span><span class=\"err\">›</span>\n</code></pre></div>\n<p>you will see that you get the output <code>True</code> (which according to the type signature is an <code>xstring</code>). In the other direction, </p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kt\">ML_val</span> <span class=\"err\">‹</span><span class=\"n\">Proof_Context.intern_const</span> <span class=\"err\">@</span><span class=\"ow\">{</span><span class=\"k\">context</span><span class=\"ow\">}</span> <span class=\"s\">\"True\"</span><span class=\"err\">›</span>\n</code></pre></div>\n<p>gives you <code>HOL.True</code>, which is a <code>bstring</code>.</p>",
        "id": 283040656,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1653036296
    },
    {
        "content": "<p>oh, these are really interesting! very thank you!</p>",
        "id": 283227963,
        "sender_full_name": "Qiyuan Xu",
        "timestamp": 1653219608
    }
]