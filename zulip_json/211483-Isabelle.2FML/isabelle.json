[
    {
        "content": "<p>The labeled transition of Isballe is defined below, which contains the prior node and the successor node, the set represents the condition.</p>\n<p>type_synonym ('q,'a) LTS = \"('q * 'a set * 'q) set\"<br>\nAfter the LTS, we need to define a function of the reachable from Node a to Node b. The definition of LTS_is_reachable like:</p>\n<p>inductive LTS_is_reachable :: \"('q, 'a) LTS ⇒  ('q * 'q) set ⇒ 'q ⇒ 'a list ⇒ 'q ⇒ bool\" for Δ and Δ' where<br>\n  LTS_Empty[intro!]: \"LTS_is_reachable Δ Δ' q [] q\" |<br>\n  LTS_Step1: \"LTS_is_reachable Δ Δ' q l q'\" if \"(q, q'') ∈ Δ'\" and \"LTS_is_reachable Δ Δ' q'' l q'\" |<br>\n  LTS_Step2[intro!]: \"LTS_is_reachable Δ Δ' q (a # w) q'\" if \"a ∈ σ\" and \"(q, σ, q'') ∈ Δ\" and \"LTS_is_reachable Δ Δ' q'' w q'\"<br>\nwhere the LTS_empty denotes node q could arrive at self by empty list, LTS_Step1 denotes if there exists node q and p in Delta', then q could reach p no condition, and LTS_Step2 denotes that node q could reach node q'' by the alphbet sigma.</p>\n<p>Finally, I try to prove a lemma</p>\n<p>lemma removeFromAtoEndTrans:\"LTS_is_reachable Δ (insert (ini, end) Δ') ini l end ⟹ l ≠ [] ⟹ ∀(q, σ, p) ∈ Δ. q ≠ ini ∧ q ≠ end ⟹  ∀(end, p) ∈ Δ'. p = end ⟹  LTS_is_reachable Δ Δ' ini l end\"<br>\nThis lemma said that if the list l isn't empty, we could remove ini-&gt; end from Delta2. It obviously holds. Through the tool nitpick, it can not find any counter-examples. But I could think about any ideas to prove it. Any helps would be appreciated.</p>",
        "id": 338785150,
        "sender_full_name": "Hongjian Jiang",
        "timestamp": 1677663769
    },
    {
        "content": "<p>This question should be asked under <em>Beginner Questions</em> or perhaps <em>General</em>. This place here is for discussions about extending Isabelle using meta-programming in ML.</p>",
        "id": 339104206,
        "sender_full_name": "Wolfgang Jeltsch",
        "timestamp": 1677765133
    }
]