[
    {
        "content": "<p>I kinda want to do an evaluation of some stuff without keeping name bindings only keeping context data similar to how it works in ml_prf</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">context</span><span class=\"w\"> </span><span class=\"kp\">notes</span><span class=\"w\"> </span><span class=\"o\">[[</span><span class=\"n\">ML_environment</span><span class=\"o\">=</span><span class=\"s\">\"Isabelle\"</span><span class=\"o\">]]</span><span class=\"w\"> </span><span class=\"k\">begin</span>\n<span class=\"k\">ML</span><span class=\"s\">‹val a = \"1\"›</span>\n<span class=\"k\">notepad</span>\n<span class=\"k\">begin</span>\n<span class=\"w\">  </span><span class=\"k\">ML_prf</span><span class=\"s\">‹</span>\n<span class=\"s\">val a = \"2\"</span>\n\n<span class=\"s\">›</span>\n\n<span class=\"k\">end</span>\n<span class=\"k\">ML</span><span class=\"s\">‹val _ = @{print} a›</span><span class=\"w\"> </span><span class=\"n\">―‹\"1\"›</span>\n</code></pre></div>\n<p>right now its using code that does </p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">ML</span><span class=\"w\"> </span><span class=\"s\">‹fun with_temp_ML_env f x =</span>\n<span class=\"s\">  let</span>\n<span class=\"s\">    val context = Context.the_generic_context()</span>\n<span class=\"s\">    val res = f x</span>\n<span class=\"s\">    val () = Context.&gt;&gt; (ML_Env.inherit [context])</span>\n<span class=\"s\">  in res end</span>\n<span class=\"s\">›</span>\n</code></pre></div>\n<p>which messes up synchronized variables</p>",
        "id": 484853793,
        "sender_full_name": "irvin",
        "timestamp": 1732778477
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"714722\">irvin</span> <a href=\"#narrow/channel/211483-Isabelle.2FML/topic/safely.20doing.20a.20evaluation.20of.20ml.20evaluation/near/484853793\">said</a>:</p>\n<blockquote>\n<p>I kinda want to do an evaluation of some stuff without keeping name bindings only keeping context data similar to how it works in ml_prf</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">context</span><span class=\"w\"> </span><span class=\"kp\">notes</span><span class=\"w\"> </span><span class=\"o\">[[</span><span class=\"n\">ML_environment</span><span class=\"o\">=</span><span class=\"s\">\"Isabelle\"</span><span class=\"o\">]]</span><span class=\"w\"> </span><span class=\"k\">begin</span>\n<span class=\"k\">ML</span><span class=\"s\">‹val a = \"1\"›</span>\n<span class=\"k\">notepad</span>\n<span class=\"k\">begin</span>\n<span class=\"w\">  </span><span class=\"k\">ML_prf</span><span class=\"s\">‹</span>\n<span class=\"s\">val a = \"2\"</span>\n\n<span class=\"s\">›</span>\n\n<span class=\"k\">end</span>\n<span class=\"k\">ML</span><span class=\"s\">‹val _ = @{print} a›</span><span class=\"w\"> </span><span class=\"n\">―‹\"1\"›</span>\n</code></pre></div>\n<p>right now its using code that does </p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">ML</span><span class=\"w\"> </span><span class=\"s\">‹fun with_temp_ML_env f x =</span>\n<span class=\"s\">  let</span>\n<span class=\"s\">    val context = Context.the_generic_context()</span>\n<span class=\"s\">    val res = f x</span>\n<span class=\"s\">    val () = Context.&gt;&gt; (ML_Env.inherit [context])</span>\n<span class=\"s\">  in res end</span>\n<span class=\"s\">›</span>\n</code></pre></div>\n<p>which messes up synchronized variables</p>\n</blockquote>\n<p>Oh I found out that the code kinda is just kinda of doing where Data is the ML_env and somehow the values for synchronized variables are stored in nonce is rolled back.</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">ML</span><span class=\"w\"> </span><span class=\"s\">‹fun with_temp_ML_env f x =</span>\n<span class=\"s\">  let</span>\n<span class=\"s\">    val context = Context.the_generic_context()</span>\n<span class=\"s\">    val res = f x</span>\n<span class=\"s\">    val () = Context.&gt;&gt; (Data.put (Data.get [context]))</span>\n<span class=\"s\">  in res end</span>\n<span class=\"s\">›</span>\n</code></pre></div>",
        "id": 484922275,
        "sender_full_name": "irvin",
        "timestamp": 1732800840
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">theory</span><span class=\"w\"> </span><span class=\"n\">Scratch</span>\n<span class=\"w\">  </span><span class=\"kp\">imports</span><span class=\"w\"> </span><span class=\"n\">Main</span>\n<span class=\"k\">begin</span>\n\n<span class=\"k\">ML</span><span class=\"s\">‹val a = Synchronized.var \"test\" \"hi\"›</span>\n<span class=\"k\">ML</span><span class=\"s\">‹    val context = Context.the_generic_context()›</span>\n\n<span class=\"k\">ML</span><span class=\"s\">‹</span>\n<span class=\"s\">val _ = Synchronized.assign a \"oops\"</span>\n\n\n\n<span class=\"s\">›</span>\n<span class=\"k\">ML</span><span class=\"s\">‹    val _ = Context.&gt;&gt; (ML_Env.inherit [context])›</span>\n\n<span class=\"k\">ML</span><span class=\"s\">‹Synchronized.value a›</span>\n<span class=\"k\">end</span>\n</code></pre></div>\n<p>(<em>Oh this is my issue more simply explained</em>)<br>\n(*Im not sure how is one meant to do this properly *)</p>",
        "id": 485212859,
        "sender_full_name": "irvin",
        "timestamp": 1732960436
    }
]