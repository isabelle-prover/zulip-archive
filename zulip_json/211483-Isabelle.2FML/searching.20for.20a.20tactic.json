[
    {
        "content": "<p>I have a goal like this one:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"w\"> </span><span class=\"n\">∀x≥0.</span><span class=\"w\"> </span><span class=\"n\">∀y</span><span class=\"o\">::</span><span class=\"n\">int.</span><span class=\"w\"> </span><span class=\"n\">boo</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">2</span><span class=\"o\">::</span><span class=\"n\">int</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">∧</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">3</span><span class=\"o\">::</span><span class=\"n\">int</span><span class=\"o\">))</span><span class=\"w\"> </span><span class=\"n\">⟹</span><span class=\"w\"> </span><span class=\"n\">∀x≥0.</span><span class=\"w\"> </span><span class=\"n\">∀y</span><span class=\"o\">::</span><span class=\"n\">int.</span><span class=\"w\"> </span><span class=\"n\">lift_boo</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">2</span><span class=\"o\">::</span><span class=\"n\">int</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">∧</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">3</span><span class=\"o\">::</span><span class=\"n\">int</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>I want to find a tactic in ML that unifies as much as possible, i.e. gets me a new goal:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"n\">boo</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">lift_boo</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">y</span>\n</code></pre></div>\n<p>Does anyone know how to do this? It is okay if the goal becomes non-valid, e.g. </p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"n\">∃x.</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">4</span><span class=\"o\">::</span><span class=\"n\">int</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"n\">&gt;</span><span class=\"w\"> </span><span class=\"n\">∃x.</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">5</span><span class=\"o\">::</span><span class=\"n\">int</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>would give <code>4=5</code>.</p>",
        "id": 530976538,
        "sender_full_name": "Hanna Lachnitt",
        "timestamp": 1753550541
    },
    {
        "content": "<p>I am sure there is a better solution but this might make do:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"n\">method</span><span class=\"w\"> </span><span class=\"n\">my_tac</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">   </span><span class=\"o\">(</span><span class=\"n\">intro</span><span class=\"w\"> </span><span class=\"n\">allI</span><span class=\"w\"> </span><span class=\"n\">impI</span><span class=\"w\"> </span><span class=\"n\">exI</span><span class=\"w\"> </span><span class=\"n\">bexI</span><span class=\"o\">)+</span><span class=\"n\">;</span>\n<span class=\"w\">   </span><span class=\"o\">(</span><span class=\"n\">elim</span><span class=\"w\"> </span><span class=\"n\">allE</span><span class=\"w\"> </span><span class=\"n\">impE</span><span class=\"w\"> </span><span class=\"n\">exE</span><span class=\"w\"> </span><span class=\"n\">bexE</span><span class=\"o\">)+</span><span class=\"n\">;</span>\n<span class=\"w\">    </span><span class=\"o\">(</span><span class=\"n\">assumption</span><span class=\"o\">+)?</span><span class=\"w\"> </span><span class=\"c\">(*needs repetition due to assumptions*)</span><span class=\"n\">;</span>\n<span class=\"w\">   </span><span class=\"o\">(</span><span class=\"n\">erule</span><span class=\"w\"> </span><span class=\"n\">mysubst2</span><span class=\"o\">),</span>\n<span class=\"w\">   </span><span class=\"o\">(</span><span class=\"n\">rule</span><span class=\"w\"> </span><span class=\"n\">refl</span><span class=\"o\">)?</span><span class=\"w\"> </span><span class=\"c\">(*tries to solve the first goal*)</span>\n\n<span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"s\">‹</span>\n<span class=\"s\"> ∀x≥0. ∀y::int. boo (nat x) y = (x = (2::int) ∧ y = (3::int)) ⟹ ∀x≥0. ∀y::int. lift_boo x y = (x = (2::int) ∧ y = (3::int))›</span>\n<span class=\"w\">  </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"n\">my_tac</span>\n<span class=\"w\">  </span><span class=\"gr\">sorry</span>\n\n<span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"s\">‹∃x. x = (4::int) ==&gt; ∃x. x = (5::int)›</span>\n<span class=\"w\">  </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"n\">my_tac</span>\n<span class=\"w\">  </span><span class=\"gr\">oops</span>\n</code></pre></div>",
        "id": 530989425,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1753556962
    },
    {
        "content": "<p>Thank you so much</p>",
        "id": 531021125,
        "sender_full_name": "Hanna Lachnitt",
        "timestamp": 1753572486
    },
    {
        "content": "<p>I realized that what I am trying to do (which is slightly different than what I described) can best be done with conversions. See this example from the Isabelle cookbook</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">true_conj1_conv</span><span class=\"w\"> </span><span class=\"n\">ctxt</span><span class=\"w\"> </span><span class=\"n\">ctrm</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"k\">case</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Thm.term_of</span><span class=\"w\"> </span><span class=\"n\">ctrm</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">of</span>\n<span class=\"n\">@</span><span class=\"ow\">{</span><span class=\"kt\">term</span><span class=\"w\"> </span><span class=\"s\">\"op ∧\"</span><span class=\"ow\">}</span><span class=\"w\"> </span><span class=\"n\">$</span><span class=\"w\"> </span><span class=\"n\">@</span><span class=\"ow\">{</span><span class=\"kt\">term</span><span class=\"w\"> </span><span class=\"n\">True</span><span class=\"ow\">}</span><span class=\"w\"> </span><span class=\"n\">$</span><span class=\"w\"> </span><span class=\"o\">_</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"n\">&gt;</span>\n<span class=\"o\">(</span><span class=\"n\">Conv.arg_conv</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">true_conj1_conv</span><span class=\"w\"> </span><span class=\"n\">ctxt</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">then_conv</span>\n<span class=\"n\">Conv.rewr_conv</span><span class=\"w\"> </span><span class=\"n\">@</span><span class=\"ow\">{</span><span class=\"kt\">thm</span><span class=\"w\"> </span><span class=\"n\">true_conj1</span><span class=\"ow\">}</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">ctrm</span>\n<span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">_</span><span class=\"w\"> </span><span class=\"n\">$</span><span class=\"w\"> </span><span class=\"o\">_</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"n\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Conv.comb_conv</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">true_conj1_conv</span><span class=\"w\"> </span><span class=\"n\">ctxt</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">ctrm</span>\n<span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Abs</span><span class=\"w\"> </span><span class=\"o\">_</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"n\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Conv.abs_conv</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">fn</span><span class=\"w\"> </span><span class=\"o\">(_,</span><span class=\"w\"> </span><span class=\"n\">ctxt</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"n\">&gt;</span><span class=\"w\"> </span><span class=\"n\">true_conj1_conv</span><span class=\"w\"> </span><span class=\"n\">ctxt</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">ctxt</span><span class=\"w\"> </span><span class=\"n\">ctrm</span>\n<span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">_</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"n\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Conv.all_conv</span><span class=\"w\"> </span><span class=\"n\">ctrm</span>\n</code></pre></div>\n<p>where all occurrences of <code>True ∧ x</code> are rewritten to <code>x</code></p>",
        "id": 531023486,
        "sender_full_name": "Hanna Lachnitt",
        "timestamp": 1753573636
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"477368\">Hanna Lachnitt</span> <a href=\"#narrow/stream/211483-Isabelle.2FML/topic/searching.20for.20a.20tactic/near/530976538\">said</a>:</p>\n<blockquote>\n<p>I have a goal like this one:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"w\"> </span><span class=\"n\">∀x≥0.</span><span class=\"w\"> </span><span class=\"n\">∀y</span><span class=\"o\">::</span><span class=\"n\">int.</span><span class=\"w\"> </span><span class=\"n\">boo</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">2</span><span class=\"o\">::</span><span class=\"n\">int</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">∧</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">3</span><span class=\"o\">::</span><span class=\"n\">int</span><span class=\"o\">))</span><span class=\"w\"> </span><span class=\"n\">⟹</span><span class=\"w\"> </span><span class=\"n\">∀x≥0.</span><span class=\"w\"> </span><span class=\"n\">∀y</span><span class=\"o\">::</span><span class=\"n\">int.</span><span class=\"w\"> </span><span class=\"n\">lift_boo</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">2</span><span class=\"o\">::</span><span class=\"n\">int</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">∧</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">3</span><span class=\"o\">::</span><span class=\"n\">int</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>I want to find a tactic in ML that unifies as much as possible, i.e. gets me a new goal:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"n\">boo</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">lift_boo</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">y</span>\n</code></pre></div>\n<p>Does anyone know how to do this? It is okay if the goal becomes non-valid, e.g. </p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"n\">∃x.</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">4</span><span class=\"o\">::</span><span class=\"n\">int</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"n\">&gt;</span><span class=\"w\"> </span><span class=\"n\">∃x.</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">5</span><span class=\"o\">::</span><span class=\"n\">int</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>would give <code>4=5</code>.</p>\n</blockquote>\n<p>If you want to do really unification as much as possible I would highly recommend looking at the <a href=\"https://www.isa-afp.org/entries/ML_Unification.html\">https://www.isa-afp.org/entries/ML_Unification.html</a>. See <a href=\"https://www.isa-afp.org/sessions/ml_unification/#E_Unification_Examples.html\">https://www.isa-afp.org/sessions/ml_unification/#E_Unification_Examples.html</a> for some examples</p>",
        "id": 531362092,
        "sender_full_name": "irvin",
        "timestamp": 1753707182
    },
    {
        "content": "<p>There are certain cases where writing proper code would be more efficient but that takes more time</p>",
        "id": 531362911,
        "sender_full_name": "irvin",
        "timestamp": 1753707386
    },
    {
        "content": "<p>I'm just guessing but your example seems like the reification examples <a href=\"https://www.isa-afp.org/sessions/ml_unification/#Unification_Hints_Reification_Examples.html\">https://www.isa-afp.org/sessions/ml_unification/#Unification_Hints_Reification_Examples.html</a></p>",
        "id": 531368813,
        "sender_full_name": "irvin",
        "timestamp": 1753708852
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"714722\">@irvin</span>, I will look into it</p>",
        "id": 531414333,
        "sender_full_name": "Hanna Lachnitt",
        "timestamp": 1753721196
    }
]