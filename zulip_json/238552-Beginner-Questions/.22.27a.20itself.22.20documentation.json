[
    {
        "content": "<p>Does anyone know where to find documentation on the \"itself\" type constructor? Why is it needed? Same question for the \"dummy\" datatype.</p>",
        "id": 246693533,
        "sender_full_name": "Max W. Haslbeck",
        "timestamp": 1626857259
    },
    {
        "content": "<p>When you define something like</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">definition</span> <span class=\"n\">P</span> <span class=\"o\">::</span> <span class=\"n\">bool</span> <span class=\"kp\">where</span>\n  <span class=\"s\">\"P = (∀x y. x = y)\"</span>\n</code></pre></div>\n<p>or</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">definition</span> <span class=\"n\">Q</span> <span class=\"o\">::</span> <span class=\"n\">bool</span> <span class=\"kp\">where</span>\n  <span class=\"s\">\"Q = finite UNIV\"</span>\n</code></pre></div>\n<p>you have an implicit dependency on a type parameter <code>'a</code> that does not appear in the type of <code>P</code> and <code>Q</code>, e.g. the value of <code>P</code> and <code>Q</code> may depend on which type you pick. Therefore, an artificial dummy parameter of type <code>'a itself</code> is introduced to make this explicit, where <code>'a itself</code> is a singleton type whose only value is <code>Pure.type</code>.</p>\n<p>This allows you to write e.g. <code>P (Pure.type :: nat itself)</code> to specify that you want the <code>P</code> for the type <code>nat</code>. A more convenient way to write the values of this singleton type is with the <code>TYPE</code> syntax, e.g. <code>P TYPE(nat)</code>.</p>\n<p>One \"real-life\" example of this is the dimension of a Euclidean space. Euclidean spaces in Isabelle/HOL are modelled as a type class <code>euclidean_space</code>, and then you can define</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">definition</span> <span class=\"n\">dimension</span> <span class=\"o\">::</span> <span class=\"s\">\"'a :: euclidean_space ⇒ nat\"</span> <span class=\"kp\">where</span>\n  <span class=\"s\">\"dimension = card (Basis :: 'a set)\"</span>\n</code></pre></div>\n<p>and then use this as e.g. <code>dimension TYPE(real) = 1</code>, <code>dimension TYPE(complex) = 2</code>.</p>",
        "id": 246694182,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1626857751
    },
    {
        "content": "<p>Not sure if or where this is documented.</p>",
        "id": 246694409,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1626857906
    },
    {
        "content": "<p>As for the \"dummy\" datatype, not sure what you mean by that.</p>",
        "id": 246694431,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1626857922
    },
    {
        "content": "<p>There is <code>Pure.dummy_pattern</code>, which I think is not a \"proper\" term and is used for pattern matching (i.e. the <code>_</code> that you can write in <code>case</code> expressions, function definitions, etc.)</p>",
        "id": 246694578,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1626858017
    },
    {
        "content": "<p>Not sure if that's what you meant.</p>",
        "id": 246694589,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1626858024
    },
    {
        "content": "<p>Or are you talking about the</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">datatype</span> <span class=\"o\">(</span><span class=\"n\">plugins</span> <span class=\"n\">only</span><span class=\"o\">:</span> <span class=\"n\">extraction</span><span class=\"o\">)</span> <span class=\"s\">\"term\"</span> <span class=\"o\">=</span> <span class=\"n\">dummy_term</span>\n</code></pre></div>\n<p>from <code>HOL.Code_Evaluation</code>?</p>",
        "id": 246694647,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1626858079
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232736\">Manuel Eberl</span> <a href=\"#narrow/stream/238552-Beginner-Questions/topic/.22'a.20itself.22.20documentation/near/246694647\">said</a>:</p>\n<blockquote>\n<p>Or are you talking about the</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">datatype</span> <span class=\"o\">(</span><span class=\"n\">plugins</span> <span class=\"n\">only</span><span class=\"o\">:</span> <span class=\"n\">extraction</span><span class=\"o\">)</span> <span class=\"s\">\"term\"</span> <span class=\"o\">=</span> <span class=\"n\">dummy_term</span>\n</code></pre></div>\n<p>from <code>HOL.Code_Evaluation</code>?</p>\n</blockquote>\n<p>No, just the type</p>\n<div class=\"codehilite\"><pre><span></span><code>term &quot;x :: dummy&quot;\n</code></pre></div>",
        "id": 246694811,
        "sender_full_name": "Max W. Haslbeck",
        "timestamp": 1626858186
    },
    {
        "content": "<p>If that is the same as <code>Term.dummyT</code>, then it is often used to leave type holes in a term and then fill them with <code>Syntax.check_term</code>.</p>",
        "id": 246695323,
        "sender_full_name": "Lukas Stevens",
        "timestamp": 1626858598
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232736\">@Manuel Eberl</span> </p>\n<p>Thanks.</p>\n<p><span class=\"user-mention silent\" data-user-id=\"232736\">Manuel Eberl</span> <a href=\"#narrow/stream/238552-Beginner-Questions/topic/.22'a.20itself.22.20documentation/near/246694409\">said</a>:</p>\n<blockquote>\n<p>Not sure if or where this is documented.</p>\n</blockquote>\n<p>I could not find an explanation for it, neither in the Isabelle sources nor via google. Isabelle is probably really hard to use if you don't share an office with an Isabelle elder <span aria-label=\"stuck out tongue\" class=\"emoji emoji-1f61b\" role=\"img\" title=\"stuck out tongue\">:stuck_out_tongue:</span></p>",
        "id": 246699714,
        "sender_full_name": "Max W. Haslbeck",
        "timestamp": 1626861721
    },
    {
        "content": "<p>Found it! §2.3.2 of the <a href=\"https://isabelle.in.tum.de/dist/Isabelle2021/doc/implementation.pdf\">Isabelle/Isar implementation manual</a>.</p>",
        "id": 246700290,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1626862122
    },
    {
        "content": "<p>Perhaps the explanation is a bit less, uh, easy to understand than the one I wrote above.</p>",
        "id": 246700323,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1626862154
    },
    {
        "content": "<p>I'm not even sure where I learnt about this; I think I just encountered it at some point and then it seemed kind of obvious what it was.</p>",
        "id": 246700349,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1626862185
    },
    {
        "content": "<p>But yeah I'm sure it can be confusing at first.</p>",
        "id": 246700354,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1626862193
    }
]