[
    {
        "content": "<p>I tried to write:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">propform</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"form ⇒ bool\"</span>\n<span class=\"w\">  </span><span class=\"kp\">where</span>\n<span class=\"w\">   </span><span class=\"s\">\"propform FALSE ≡ True\"</span>\n<span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"s\">\"propform (VAR p) ≡ True\"</span>\n<span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"s\">\"propform (DISJ f1 f2) ≡ (propform f1 ∧ propform f2)\"</span>\n<span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"s\">\"propform (NOT f) ≡ propform f\"</span>\n<span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"s\">\"propform (DIAM f) ≡ False\"</span>\n</code></pre></div>\n<p>And Isabelle complains. Since I have been suggested to use meta-stuff for definitions once possible, here I am attempting to define a predicate \"is propositional formula\" using meta-equation instead of &lt;--&gt;.</p>\n<p>The error message is \"Not an equation\" and a colleague found out that it comes from the function package, which calls \"dest_eq\" in HOL level. </p>\n<p>Therefore, the complain is because it expects HOL level equation only, not a meta one.</p>",
        "id": 469613618,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1726133144
    },
    {
        "content": "<p>Therefore, what to use if I want to make the definition using meta-equality &lt;\\equiv&gt;?</p>",
        "id": 469613787,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1726133174
    },
    {
        "content": "<p>Or if there is any argument that \"in such a case, it is better to using fun and HOL equality\", then I am also happy to just stick with it.</p>",
        "id": 469613999,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1726133218
    },
    {
        "content": "<p>The function package expects you to use the HOL equality <code>(=)</code>.</p>",
        "id": 469614843,
        "sender_full_name": "Lukas Stevens",
        "timestamp": 1726133404
    },
    {
        "content": "<p>You can, however, turn a HOL equality into a meta-equality with the theorem <code>HOL.eq_reflection</code>.</p>",
        "id": 469615049,
        "sender_full_name": "Lukas Stevens",
        "timestamp": 1726133458
    },
    {
        "content": "<p>That makes sense. Thank you!</p>",
        "id": 469616167,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1726133784
    },
    {
        "content": "<p>I expect the simplifier works a bit differently if it see a definition using HOL or meta equality.</p>",
        "id": 469616357,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1726133822
    }
]