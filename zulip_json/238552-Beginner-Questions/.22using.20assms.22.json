[
    {
        "content": "<p>Most proofs have the line \"using assms\" in the definition of the lemma. But just for my understanding, how can I refer to the assumptions if I don't use this line, when the context is modified? Here's an example. (The function merge_distinct_aux merges two lists xs and acc while skipping over duplicate elements. The auxiliary variable seen keeps track of the elements that were already seen and typically \"seen = set acc\".)</p>\n<p>This works:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">merge_distinct_aux_distinct</span><span class=\"o\">:</span>\n<span class=\"w\">  </span><span class=\"kp\">assumes</span><span class=\"w\"> </span><span class=\"s\">\"distinct acc\"</span><span class=\"w\"> </span><span class=\"kp\">and</span><span class=\"w\"> </span><span class=\"s\">\"set acc ⊆ seen\"</span>\n<span class=\"w\">  </span><span class=\"kp\">shows</span><span class=\"w\"> </span><span class=\"s\">\"distinct (merge_distinct_aux xs seen acc)\"</span>\n<span class=\"w\">  </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">assms</span>\n<span class=\"k\">proof</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">induct</span><span class=\"w\"> </span><span class=\"n\">xs</span><span class=\"w\"> </span><span class=\"n\">arbitrary</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">acc</span><span class=\"w\"> </span><span class=\"n\">seen</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"k\">case</span><span class=\"w\"> </span><span class=\"n\">Nil</span>\n<span class=\"w\">  </span><span class=\"k\">thus</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"k\">case</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">simp</span>\n</code></pre></div>\n<p>But if I remove \"using assms\" and move it here \"thus ?case using assms by simp\", it doesn't work because <code>acc</code> is <em>arbitrary</em> now. If I remove the arbitrary statement, this part of the proof works again. But is there a proper way to refer to the assumptions if I keep <em>arbitrary</em>?</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">merge_distinct_aux_distinct</span><span class=\"o\">:</span>\n<span class=\"w\">  </span><span class=\"kp\">assumes</span><span class=\"w\"> </span><span class=\"s\">\"distinct acc\"</span><span class=\"w\"> </span><span class=\"kp\">and</span><span class=\"w\"> </span><span class=\"s\">\"set acc ⊆ seen\"</span>\n<span class=\"w\">  </span><span class=\"kp\">shows</span><span class=\"w\"> </span><span class=\"s\">\"distinct (merge_distinct_aux xs seen acc)\"</span>\n<span class=\"k\">proof</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">induct</span><span class=\"w\"> </span><span class=\"n\">xs</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"k\">case</span><span class=\"w\"> </span><span class=\"n\">Nil</span>\n<span class=\"w\">  </span><span class=\"k\">thus</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"k\">case</span><span class=\"w\"> </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">assms</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">simp</span>\n</code></pre></div>",
        "id": 444495364,
        "sender_full_name": "Maximilian Vollath",
        "timestamp": 1718292893
    },
    {
        "content": "<p>I would suggest first to look carefully at what you get out of the induction here.</p>\n<p>when you write <code>using assms</code> in this context, you're actually carrying out a very different induction (where <code>assms</code> is part of IH that you will need to prove)</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"w\">  </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">assms</span>\n<span class=\"k\">proof</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">induct</span><span class=\"w\"> </span><span class=\"n\">xs</span><span class=\"w\"> </span><span class=\"n\">arbitrary</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">acc</span><span class=\"w\"> </span><span class=\"n\">seen</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 444495897,
        "sender_full_name": "Yong Kiam",
        "timestamp": 1718293014
    },
    {
        "content": "<p>Oooooh now it makes sense to me, thank you, I see the difference in the output. And I thought it was just a simplification so you wouldn't have to reference the assumptions every time.</p>\n<p>So what is the difference to defining the lemma like so then?<br>\n<code>\"⟦ distinct acc; set acc ⊆ seen ⟧ ⟹ distinct (merge_distinct_aux xs seen acc)\"</code></p>",
        "id": 444498350,
        "sender_full_name": "Maximilian Vollath",
        "timestamp": 1718293561
    },
    {
        "content": "<p><del>I think that's identical to  both lemmas</del></p>",
        "id": 444498536,
        "sender_full_name": "Yong Kiam",
        "timestamp": 1718293612
    },
    {
        "content": "<p>oh wait no sorry, that's identical to this:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"o\">:</span>\n<span class=\"kp\">shows</span><span class=\"w\">   </span><span class=\"s\">\"distinct acc ⟹ set acc ⊆ seen ⟹ distinct (merge_distinct_aux xs seen acc)\"</span>\n</code></pre></div>\n<p>which is almost the same as baking in <code>using assms</code> directly</p>",
        "id": 444498862,
        "sender_full_name": "Yong Kiam",
        "timestamp": 1718293708
    },
    {
        "content": "<p>Alright, thank you!</p>",
        "id": 444503603,
        "sender_full_name": "Maximilian Vollath",
        "timestamp": 1718294867
    }
]