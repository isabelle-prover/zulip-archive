[
    {
        "content": "<p>Hi,</p>\n<p>so-far I have used a record like (node\\edge are type_synonyms to nat)</p>\n<div class=\"codehilite\"><pre><span></span><code>record (&#39;a,&#39;v,&#39;e) graph =\n  nodes :: &quot;node set&quot;\n  edges :: &quot;edge set&quot;\n  src   :: &quot;edge ⇒ node&quot;\n  trg   :: &quot;edge ⇒ node&quot;\n ...\n</code></pre></div>\n<p>to describe a graph. Checking the well-formedness was performed by <code>(∀ x ∈ (edges gr) . src gr x ∈ nodes gr ∧ trg gr x ∈ nodes gr) ...</code>.</p>\n<p>When specifying a concrete graph,  I tried  naively tried</p>\n<div class=\"codehilite\"><pre><span></span><code> ⦇nodes = {1,2}, edges={1},\n                 src = [1 ↦ 1],\n                 trg = [1 ↦ 1],\n                 ...\n</code></pre></div>\n<p>which forces <code>src\\trg</code> to be of type <code>edge =&gt; node option</code>.  <br>\nI read about underspecifying <a href=\"https://www.joachim-breitner.de/blog/732-Isabelle_functions__Always_total%2C_sometimes_undefined\">https://www.joachim-breitner.de/blog/732-Isabelle_functions__Always_total%2C_sometimes_undefined</a> and thought,  this is ok for my usage but now I\"m not sure if  I fully understood the topic. </p>\n<p>Does it make sense for <code>src\\trg</code> to map to <code>'a option</code> if a well-formed graph permits this case?</p>",
        "id": 237931171,
        "sender_full_name": "Robert Soeldner",
        "timestamp": 1620455713
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 237939022,
        "sender_full_name": "Robert Soeldner",
        "timestamp": 1620463394
    },
    {
        "content": "<p>the <code>[1 ↦ 1]</code> syntax models partiality explicitly with the <code>option</code> datatype. If you want to define a function by specifying its values at specific points and leaving the rest undefined, you could use <code>(%x. undefined)(1 := 1)</code> (this is called the functional update syntax; the <code>%</code> is the ASCII symbol for lambda which I don't have a way of typing here)</p>",
        "id": 237948264,
        "sender_full_name": "Jakub Kądziołka",
        "timestamp": 1620472648
    },
    {
        "content": "<p>As for what makes sense for modeling a graph, I'd probably use <code>edges :: \"(node, node) set\"</code> (or a multiset, depends on the requirement)</p>",
        "id": 237948319,
        "sender_full_name": "Jakub Kądziołka",
        "timestamp": 1620472684
    },
    {
        "content": "<p>thank you for the fast reply. I will check both approaches :-)</p>",
        "id": 237969606,
        "sender_full_name": "Robert Soeldner",
        "timestamp": 1620492748
    },
    {
        "content": "<p>Btw. there is already a similar graph library: <a href=\"https://www.isa-afp.org/entries/Graph_Theory.html\">https://www.isa-afp.org/entries/Graph_Theory.html</a><br>\nFurthermore, <span class=\"user-mention\" data-user-id=\"233212\">@Mohammad Abdulaziz</span> is currently working on a graph library which aims to unify the different representations that currently exist in Isabelle: <a href=\"https://github.com/wimmers/archive-of-graph-formalizations/pull/1\">https://github.com/wimmers/archive-of-graph-formalizations/pull/1</a></p>",
        "id": 237979315,
        "sender_full_name": "Lukas Stevens",
        "timestamp": 1620502397
    },
    {
        "content": "<p>this is good to know, thank you for pointing me to it.</p>",
        "id": 237980869,
        "sender_full_name": "Robert Soeldner",
        "timestamp": 1620504087
    }
]