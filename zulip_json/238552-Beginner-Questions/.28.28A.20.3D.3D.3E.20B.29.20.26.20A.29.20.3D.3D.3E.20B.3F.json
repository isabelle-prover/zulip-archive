[
    {
        "content": "<p>So I got to the point where my proof state looks like this</p>\n<div class=\"codehilite\"><pre><span></span><code>using this:\n    ∀x y. x ∈ convex_polygon_of_points [p1, p2, p3, p1] ∧ y ∈ convex_polygon_of_points [p1, p2, p3, p1] ∧ on_line x y r ⟹\n    r ∈ convex_polygon_of_points [p1, p2, p3, p1]\n    ∀x y. x ∈ convex_polygon_of_points [p1, p2, p3, p1] ∧ y ∈ convex_polygon_of_points [p1, p2, p3, p1] ∧ on_line x y r ⟹\n    r ∈ convex_polygon_of_points [p1, p2, p3, p1] ⟹ convex (convex_polygon_of_points [p1, p2, p3, p1])\n\ngoal (1 subgoal):\n 1. convex (convex_polygon_of_points [p1, p2, p3, p1])\n</code></pre></div>\n<p>From how this looks to me, this shouldn't be the hardest thing to prove, but somehow nothing succeeds. <br>\nThe original theorem I intended to use looks like this <code>∀x y. x ∈ ?s ∧ y ∈ ?s ∧ on_line x y ?p ⟹ ?p ∈ ?s ⟹ convex ?s</code> but even instanitating the unknowns in it doen't seem to help.</p>",
        "id": 243360900,
        "sender_full_name": "Simon Hanssen",
        "timestamp": 1624269601
    },
    {
        "content": "<p>If I read this correctly,</p>\n<div class=\"codehilite\"><pre><span></span><code>∀x y. x ∈ convex_polygon_of_points [p1, p2, p3, p1] ∧ y ∈ convex_polygon_of_points [p1, p2, p3, p1] ∧ on_line x y r ⟹\n    convex (convex_polygon_of_points [p1, p2, p3, p1])\n</code></pre></div>\n<p>is an obvious consequence (and probably what you have in mind), but I don't see how to discharge <code>∀x y. x ∈ convex_polygon_of_points [p1, p2, p3, p1] ∧ y ∈ convex_polygon_of_points [p1, p2, p3, p1] ∧ on_line x y r </code></p>",
        "id": 243361272,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1624269859
    },
    {
        "content": "<p>In Isabelle terms:</p>\n<div class=\"codehilite\"><pre><span></span><code>lemma\n  assumes\n    &quot;∀x y. x ∈ convex_polygon_of_points [p1, p2, p3, p1] ∧ y ∈ convex_polygon_of_points [p1, p2, p3, p1] ∧ on_line x y r ⟹\n    r ∈ convex_polygon_of_points [p1, p2, p3, p1]&quot; (is ‹?A ⟹ ?B›)\n    &quot;∀x y. x ∈ convex_polygon_of_points [p1, p2, p3, p1] ∧ y ∈ convex_polygon_of_points [p1, p2, p3, p1] ∧ on_line x y r ⟹\n    r ∈ convex_polygon_of_points [p1, p2, p3, p1] ⟹ convex (convex_polygon_of_points [p1, p2, p3, p1])&quot;\n    (is ‹?A ⟹ ?B ⟹ _›)\n  shows &quot;convex (convex_polygon_of_points [p1, p2, p3, p1])&quot;\nproof -\n  have H: ?thesis if ?A\n    apply (rule assms(2))\n     apply (rule that)\n    apply (rule assms(1))\n    apply (rule that)\n    done\n  show ?thesis\n    apply (rule H)\n    (*not obviously entailed by your assumption*)\n    oops\n</code></pre></div>",
        "id": 243361684,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1624270130
    },
    {
        "content": "<p>(I have no knowledge of the symbols here: without interpretation, quickcheck finds a counterexample)</p>",
        "id": 243361739,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1624270167
    },
    {
        "content": "<p>About the title, you are trying to prove that:</p>\n<div class=\"codehilite\"><pre><span></span><code>lemma ‹(A ⟶ B) ∧ (A ⟶ B ⟶ C) ⟹ C›\n  nitpick\n  oops\n</code></pre></div>\n<p>and that does not hold for everything False.</p>",
        "id": 243362228,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1624270509
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"233198\">Mathias Fleury</span> <a href=\"#narrow/stream/238552-Beginner-Questions/topic/.28.28A.20.3D.3D.3E.20B.29.20.26.20A.29.20.3D.3D.3E.20B.3F/near/243362228\">said</a>:</p>\n<blockquote>\n<p>About the title, you are trying to prove that:</p>\n<div class=\"codehilite\"><pre><span></span><code>lemma ‹(A ⟶ B) ∧ (A ⟶ B ⟶ C) ⟹ C›\n  nitpick\n  oops\n</code></pre></div>\n<p>and that does not hold for everything False.</p>\n</blockquote>\n<p>Seems like I somehow got a wrong idea with that... I now am even more confused than before, but i think your anwer might help getting to the core of it.</p>",
        "id": 243363382,
        "sender_full_name": "Simon Hanssen",
        "timestamp": 1624271303
    },
    {
        "content": "<p>Looking at it I guess there is a fundamental flaw in <code>∀x. x ∈ s</code> as it rather should be <code>∀x ∈s.</code></p>",
        "id": 243363811,
        "sender_full_name": "Simon Hanssen",
        "timestamp": 1624271619
    },
    {
        "content": "<p>are you confusing <code>∀x. P ==&gt; Q</code> with  <code>∀x. (P ==&gt; Q)</code>?</p>",
        "id": 243363880,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1624271662
    },
    {
        "content": "<p>because <code>∀x ∈ s. P x</code> is exactly <code>∀x. (x ∈ s --&gt; P)</code></p>",
        "id": 243363935,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1624271716
    },
    {
        "content": "<p>I think I am messing everything together right now... l'll take a break mabye I'll be less confused afterwards <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 243364495,
        "sender_full_name": "Simon Hanssen",
        "timestamp": 1624272125
    },
    {
        "content": "<p>Okay there were two problems,<br>\nFirst, I should have written <code>∀x∈s. ∀y∈s. ∀p. on_line x y p ⟶ p ∈ s⟹ convex s</code> as this was what I actually meant to say, not quantifying p was gibberish.<br>\nAnd second I fixed x and y and then assumed what i needed for them instead of just fixing them and showing that if my assumtions hold more follows (if that makes any sense)</p>",
        "id": 243403992,
        "sender_full_name": "Simon Hanssen",
        "timestamp": 1624291097
    },
    {
        "content": "<p>You probably defined <code>on_line</code> yourself, right? Note that <code>HOL-Analysis</code> contains the definition <code>closed_segment</code> together with a lot of other material about convexity.</p>",
        "id": 243404880,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1624291482
    },
    {
        "content": "<p>Yes I did. Looking at <code>closed_segment</code> it seems to be pretty much what I needed, but it is working on vectors though while Councerclockwise_2D_Strict uses points</p>",
        "id": 243406201,
        "sender_full_name": "Simon Hanssen",
        "timestamp": 1624292100
    },
    {
        "content": "<p>(there might aswell be a conversion but seems like i didn't find that yet)</p>",
        "id": 243406452,
        "sender_full_name": "Simon Hanssen",
        "timestamp": 1624292225
    },
    {
        "content": "<p>What is a point?</p>",
        "id": 243407093,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1624292526
    },
    {
        "content": "<p>Ah, <code>point</code> is just an abbreviation for <code>real × real</code>. That should work fine with <code>closed_segment</code> though.</p>",
        "id": 243407221,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1624292598
    },
    {
        "content": "<p>Yes, works fine:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kt\">term</span> <span class=\"s\">\"closed_segment (1,2) (3::real,4::real)\"</span><span class=\"sx\">`</span>\n</code></pre></div>",
        "id": 243407369,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1624292660
    },
    {
        "content": "<p><code>closed_segment</code> has type <code>'a::real_vector ⇒ 'a ⇒ 'a set</code>, i.e. it works for any type that has a <code>real_vector</code> instance. And there are corresponding instances for <code>real</code> and the <code>product</code> type, so <code>real × real</code> works fine.</p>",
        "id": 243407474,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1624292720
    }
]