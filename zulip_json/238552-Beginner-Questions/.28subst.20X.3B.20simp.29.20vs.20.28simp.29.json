[
    {
        "content": "<p>Hi! I got a conditional rewrite rule <code>X</code> which I can successfully via <code>subst X; simp</code> in the sense that (a) the rewrite conditions can be solved, (b) the original subgoal is solved after the rewrite. However, <code>simp add: X</code> does not work. Also (perhaps unrelated?) <code>subst X, simp</code> did fail, which puzzled me because I thought of the action of <code>subst X; simp</code> as being a superset of <code>subst X, simp</code>: The former applying <code>simp</code> to _all_ subgoals generated by <code>subst X</code>, the latter only to the first. But I must have misunderstood something here...</p>",
        "id": 363557150,
        "sender_full_name": "Hanno Becker",
        "timestamp": 1685906110
    },
    {
        "content": "<p>I think I figured it out...: when there are multiple conditions to the rewrite, _and_ some of them introduce schematics, the order in which you tackle the subgoals matters. Now, <code>subst X; simp</code> tackles them in reverse order, while <code>subst X, simp</code> tries the first emerging subgoal first. In my case, the order of conditions was so that <code>simp</code> would solve later conditions and instantiate the involved schematic, and then <code>simp</code> would be able to handle the first condition as well -- but <code>simp</code> wouldn't be able to handle the first condition directly. A similar reason seems to apply to <code>subst X; simp</code> vs. <code>simp add: X</code>: My suspicion is that the default subgoaler would tackle the rewrite conditions in <code>simp add: X</code> in their order of definition, while <code>subst X; simp</code>, as mentioned, uses the reversed order. Indeed, swapping the two rewrite conditions in question, <code>subst X; simp</code> suddenly starts to fail while <code>simp add: X</code> succeeds.</p>",
        "id": 363610496,
        "sender_full_name": "Hanno Becker",
        "timestamp": 1685942674
    }
]