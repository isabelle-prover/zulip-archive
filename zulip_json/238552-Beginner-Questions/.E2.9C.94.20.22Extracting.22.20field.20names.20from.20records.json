[
    {
        "content": "<p>Hi, new to zulip.</p>\n<p>So let's say I have a record that looks like</p>\n<div class=\"codehilite\"><pre><span></span><code>record rec =\n    a :: nat\n    b :: int\n    c :: string\n    d :: nat set\n</code></pre></div>\n<p>I'd like to have the ability to generate a set that includes each field name if it is set to <code>(SOME x. True)</code>. For example, let's say we have</p>\n<div class=\"codehilite\"><pre><span></span><code>⦇a=2,b=4,c=(SOME x. True),d=(SOME x. True)⦈\n</code></pre></div>\n<p>Then the set we would generate looks like <code>{c,d}</code>.<br>\nUnfortunately, I found that <code>c</code> and <code>d</code> actually have different types (<code>rec ⇒ string</code> and <code>rec ⇒ nat set</code> respectively). So now I'm wondering: is it possible to essentially extract the names of the fields such that they are not bounded to their codomain types so that I can put these names in the same set?</p>",
        "id": 268932184,
        "sender_full_name": "pdc20",
        "timestamp": 1642820547
    },
    {
        "content": "<p>Would it be sufficient for you to get the field names as HOL strings or do you strictly require the field name bindings (i.e. the constant names of the selector functions)? Either way, I'd recommend to get the required information via some ML hack. The <code>Record</code> structure found in <code>~~/src/HOL/Tools/record.ML</code> has e.g. the method <code>get_recT_fields</code> which would help extracting the fields from a record type.</p>",
        "id": 268951156,
        "sender_full_name": "Florian Sextl",
        "timestamp": 1642848305
    },
    {
        "content": "<p>Also I think it would be more idiomatic to use <code>undefined</code> instead of <code>SOME x. True</code>.</p>",
        "id": 268951305,
        "sender_full_name": "Lukas Stevens",
        "timestamp": 1642848575
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"368701\">Florian Sextl</span> <a href=\"#narrow/stream/238552-Beginner-Questions/topic/.22Extracting.22.20field.20names.20from.20records/near/268951156\">said</a>:</p>\n<blockquote>\n<p>Would it be sufficient for you to get the field names as HOL strings or do you strictly require the field name bindings (i.e. the constant names of the selector functions)? Either way, I'd recommend to get the required information via some ML hack. The <code>Record</code> structure found in <code>~~/src/HOL/Tools/record.ML</code> has e.g. the method <code>get_recT_field</code> which would help extracting the fields from a record type.</p>\n</blockquote>\n<p>Either strings or field name bindings would be nice, whichever is easier for now. For the ML hack, is there a way to do it without editing the original <code>record.ML</code> file?</p>",
        "id": 268953963,
        "sender_full_name": "pdc20",
        "timestamp": 1642852472
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"233155\">Lukas Stevens</span> <a href=\"#narrow/stream/238552-Beginner-Questions/topic/.22Extracting.22.20field.20names.20from.20records/near/268951305\">said</a>:</p>\n<blockquote>\n<p>Also I think it would be more idiomatic to use <code>undefined</code> instead of <code>SOME x. True</code>.</p>\n</blockquote>\n<p>I'm using (SOME x. True) to follow the style of a project I'm building on but thanks for the suggestion!</p>",
        "id": 268954039,
        "sender_full_name": "pdc20",
        "timestamp": 1642852578
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"461163\">pdc20</span> <a href=\"#narrow/stream/238552-Beginner-Questions/topic/.22Extracting.22.20field.20names.20from.20records/near/268953963\">said</a>:</p>\n<blockquote>\n<p>For the ML hack, is there a way to do it without editing the original <code>record.ML</code> file?</p>\n</blockquote>\n<p>Yes, you can either write an own ML file and include it with the <code>ML_file</code>command or just have a <code>ML</code> block inside your theory file like this:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">ML</span> <span class=\"err\">‹</span>  <span class=\"k\">fun</span> <span class=\"n\">get_fields</span> <span class=\"n\">rec_trm</span> <span class=\"o\">=</span> <span class=\"ow\">...</span> <span class=\"err\">›</span>\n</code></pre></div>\n<p>You can then define an own command that registers a new term with the field name set, but for further questions I'd refer you to the <a href=\"https://nms.kcl.ac.uk/christian.urban/Cookbook/\">Isabelle/ML cookbook</a> and the <a class=\"stream\" data-stream-id=\"211483\" href=\"/#narrow/stream/211483-Isabelle.2FML\">#Isabelle/ML</a> stream.</p>",
        "id": 268954608,
        "sender_full_name": "Florian Sextl",
        "timestamp": 1642853312
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"461163\">pdc20</span> has marked this topic as resolved.</p>",
        "id": 269065169,
        "sender_full_name": "Notification Bot",
        "timestamp": 1643006522
    }
]