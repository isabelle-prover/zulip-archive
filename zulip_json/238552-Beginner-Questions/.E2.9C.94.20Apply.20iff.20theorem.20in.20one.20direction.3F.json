[
    {
        "content": "<p>That helps a lot, thank you very much!</p>",
        "id": 316060467,
        "sender_full_name": "Jiahong Lee",
        "timestamp": 1671116078
    },
    {
        "content": "<p>With the given hint, I can complete my proof as follow:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"s\">\"~ (p ∧ q) ⟶ ~ p ∨ ~ q\"</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"kp\">apply</span><span class=\"o\">(</span><span class=\"n\">rule</span><span class=\"w\"> </span><span class=\"n\">impI</span><span class=\"o\">)</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"kp\">apply</span><span class=\"o\">(</span><span class=\"n\">rule</span><span class=\"w\"> </span><span class=\"n\">de_Morgan_conj</span><span class=\"o\">[</span><span class=\"n\">THEN</span><span class=\"w\"> </span><span class=\"n\">iffD1</span><span class=\"o\">])</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"n\">assumption</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">done</span><span class=\"w\"></span>\n\n<span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"s\">\"~ (p ∧ q) ⟹ ~ p ∨ ~ q\"</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">by</span><span class=\"o\">(</span><span class=\"n\">rule</span><span class=\"w\"> </span><span class=\"n\">de_Morgan_conj</span><span class=\"o\">[</span><span class=\"n\">THEN</span><span class=\"w\"> </span><span class=\"n\">iffD1</span><span class=\"o\">])</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Hope that it helps!</p>",
        "id": 316060777,
        "sender_full_name": "Jiahong Lee",
        "timestamp": 1671116156
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"429503\">Jiahong Lee</span> has marked this topic as resolved.</p>",
        "id": 316060812,
        "sender_full_name": "Notification Bot",
        "timestamp": 1671116162
    },
    {
        "content": "<p><code>de_Morgan_conj[THEN iffD1, THEN impI]</code> works too</p>",
        "id": 316062755,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1671116625
    },
    {
        "content": "<p>Let me add that <code>⟷</code> is just an “abbreviation” of <code>=</code>, with the type restricted to <code>bool ⇒ bool ⇒ bool</code>. Therefore, you can use logical equivalence statements (those phrased with <code>⟷</code>) as rewrite rules with all the tools that provide rewriting: <code>unfolding</code> constructs and the proof methods <code>subst</code>, <code>unfold</code>, <code>simp</code>, <code>auto</code>, <code>fastforce</code>, <code>slowsimp</code>, <code>bestsimp</code>, and <code>force</code>.</p>",
        "id": 316361868,
        "sender_full_name": "Wolfgang Jeltsch",
        "timestamp": 1671225575
    },
    {
        "content": "<p>For example, if you would phrase your second lemma as an Isabelle/Pure implication, where trivial implications <code>P ⟹ P</code> are automatically discharged by Isar, you could prove it via unfolding:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"s\">\"~ (p ∧ q) ⟹ ~ p ∨ ~ q\"</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">unfolding</span><span class=\"w\"> </span><span class=\"n\">de_Morgan_conj</span><span class=\"w\"> </span><span class=\"ow\">.</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 316362449,
        "sender_full_name": "Wolfgang Jeltsch",
        "timestamp": 1671225798
    },
    {
        "content": "<p>If you want to use Isabelle/HOL’s implication operator, you could write the following:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"s\">\"~ (p ∧ q) ⟶ ~ p ∨ ~ q\"</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">unfolding</span><span class=\"w\"> </span><span class=\"n\">de_Morgan_conj</span><span class=\"w\"> </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">imp_refl</span><span class=\"w\"> </span><span class=\"ow\">.</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 316362994,
        "sender_full_name": "Wolfgang Jeltsch",
        "timestamp": 1671225915
    }
]