[
    {
        "content": "<p>I have a function that has a particular set of mappings that I want to inspect. It's small enough where printing out the entire domain and range would be manageable. However, when I execute:</p>\n<p><code>value \"domain f\"</code></p>\n<p>I get an output looking like this:</p>\n<div class=\"codehilite\"><pre><span></span><code>&quot;domain\n  (λu. if u = ⦇x = 8, y = 5⦈ then 1\n        else if u = ⦇x = 7, y = 5⦈ then 1\n             else if u = ⦇x = 6, y = 5⦈ then 1\n                  else if u = ⦇x = 5, y = 5⦈ then 1\n                       else if u = ⦇x = 8, y = 0⦈ then 1\n...\n</code></pre></div>\n<p>And when I execute:</p>\n<p><code>value \"range f\"</code></p>\n<p>I get:</p>\n<blockquote>\n<p>exception Match raised (line 244 of \"generated code\")</p>\n</blockquote>\n<p>I thought <code>domain</code> and <code>range</code> would just return the obvious sets. Any advice here?</p>",
        "id": 263796386,
        "sender_full_name": "Alex Weisberger",
        "timestamp": 1638748520
    },
    {
        "content": "<p>In my case, I'm actually using a function like a hash table, i.e. the function has a specific set of \"keys\" and \"values\" that I'm interested in observing. Moreso for debug purposes. That may be useful information for this.</p>",
        "id": 263796469,
        "sender_full_name": "Alex Weisberger",
        "timestamp": 1638748660
    },
    {
        "content": "<p>Possibly other useful information - this function is a mapping from points to nat, i.e.:</p>\n<div class=\"codehilite\"><pre><span></span><code>record point =\n  x :: nat\n  y :: nat\n\ndefinition f :: &quot;point =&gt; nat&quot;\n</code></pre></div>\n<p>And I'm trying to collect points which have a count of more than 1:</p>\n<p><code>{p. (f p) &gt; 1 }</code></p>\n<p>This yields this error:</p>\n<div class=\"codehilite\"><pre><span></span><code>Wellsortedness error:\nType point not of sort enum\nNo type arity point_ext :: enum\n</code></pre></div>",
        "id": 263797698,
        "sender_full_name": "Alex Weisberger",
        "timestamp": 1638750361
    },
    {
        "content": "<p>As all functions in Isabelle/HOL are total, talking about the domain of a function <code>f :: 'a =&gt; 'b</code>means talking about <code>UNIV :: 'a set</code>.  Therefore there is no constant <code>domain</code> defined by the library (Note that <code>domain</code> is printed blue in the output window.  <code>range f</code> is then defined simply as the image of <code>UNIV</code>under <code>f</code>. If you need partiality, you need to model this explicitly, for example with a function <code>f' :: 'a =&gt; 'b option</code>.  To get domain and range of such partial functions use <code>dom</code>and <code>ran</code>defined in <code>Map.thy</code> (Included in Main). </p>\n<p>For your first output: <code>domain</code>is just a free variable, and therefore Isabelle cannot proceed with the evaluation. </p>\n<p>The <code>value</code> command works by invoking the code generator and running the generated ML code. If it gives an error, most of the times that means what you supplied is not executable or at least Isabelle does not know how. </p>\n<p>For <code>value \"range f\"</code> the generated code tries to compute the range by taking the image of <code>UNIV :: point</code> under <code>f</code>but there is only a code equation for finite sets, therefore it fails. Maybe there is a more clever way to find <code>range f</code>, but Isabelle does no magic :(. <br>\nYou can take a look at (something probably similar to) the generated code:</p>\n<div class=\"codehilite\"><pre><span></span><code>definition &quot;R = range (\\&lt;lambda&gt; x::bool . True::bool)&quot;\nexport_code &quot;R&quot; in SML\n</code></pre></div>\n<p>For your last example, the 'obvious' way of computing the set is, once again, to compute <code>f p &gt; 1</code> for all points <code>p</code>. To do this the code generator would like to enumerate all values of the type. This would be provided by the class <code>enum</code> for finite types. As your <code>point</code> type contains infinite values it does not instantiate <code>enum</code> and the code generator cannot proceed.</p>",
        "id": 263855732,
        "sender_full_name": "Simon Roßkopf",
        "timestamp": 1638800298
    },
    {
        "content": "<p>I see, that all makes sense. For what I'm trying to do, I think an association list might make more sense. It was just convenient to use a function to start.</p>",
        "id": 263896674,
        "sender_full_name": "Alex Weisberger",
        "timestamp": 1638816106
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"459086\">Alex Weisberger</span> has marked this topic as resolved.</p>",
        "id": 264149404,
        "sender_full_name": "Notification Bot",
        "timestamp": 1638967594
    }
]