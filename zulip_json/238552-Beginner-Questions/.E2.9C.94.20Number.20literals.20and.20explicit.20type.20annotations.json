[
    {
        "content": "<p>I know that number literals are overloaded in Isabelle/HOL and that explicit type annotations are necessary in the following cases. <br>\nMost of the time I following the rule of thumb of \"if there's an error involving number literals, add explicit type annotations\". </p>\n<p>But I wanted to understand the errors that arise in the following examples a little bit better:</p>\n<p>Doing</p>\n<div class=\"codehilite\"><pre><span></span><code>value &quot;5 - 10&quot;\n</code></pre></div>\n<p>will yield the error</p>\n<div class=\"codehilite\"><pre><span></span><code>Wellsortedness error:\nType &#39;a not of sort term_of\nCannot derive subsort relation {minus,numeral} &lt; term_of\n</code></pre></div>\n<p>and doing</p>\n<div class=\"codehilite\"><pre><span></span><code>value &quot;5 + 10&quot;\n</code></pre></div>\n<p>will yield the error</p>\n<div class=\"codehilite\"><pre><span></span><code>Wellsortedness error:\nType &#39;a not of sort term_of\nCannot derive subsort relation numeral &lt; term_of\n</code></pre></div>\n<p>I would say that both cases cause an error because a) number literals are overloaded and b) the operations + and - are also overloaded, so Isabelle does not know which functions to apply here. </p>\n<ol>\n<li>Why does the second example not mention <code>plus</code> in the error message but the first example does mention <code>minus</code>?</li>\n<li>And what does <code>numeral &lt; term_of</code> mean?</li>\n</ol>\n<p>If these questions can be answered by looking into the official docs, any pointers to them would be appreciated.</p>",
        "id": 272042075,
        "sender_full_name": "waynee95",
        "timestamp": 1644961147
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>class numeral = one + semigroup_add\n</code></pre></div>\n<p>So numerals always have an addition</p>",
        "id": 272076467,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1644990878
    },
    {
        "content": "<p>(I just did a control-click on <code>numeral</code>, because I did not remember it either)</p>",
        "id": 272076479,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1644990909
    },
    {
        "content": "<p>What <code>value</code> does (in its default setting) is to run the code generator on the given term and then execute the generated ML code. The result is an ML value, and that ML value then has to be converted back to a HOL term in order to be displayed. This is done with the <code>term_of</code> type class that contains a function that converts a value of the type to a representation of a HOL term. See the theory <code>HOL.Code_Evaluation</code> for more details.</p>\n<p>There are instances of <code>term_of</code> for pretty much anything you should ever encounter, but of course that only works if the term in question is monomorphic. If there are free type variables in there, those do not have the <code>term_of</code> sort (and indeed that approach cannot work even on a conceptual level – how would you execute ML code that contains free variables?).</p>\n<p>There are other modes for <code>value</code> that <em>can</em> work with free variables, namely ‘nbe’ (normalisation by evaluation) and ‘simp’ (using the simplifier), but they are much slower.</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kt\">value</span> <span class=\"o\">[</span><span class=\"n\">nbe</span><span class=\"o\">]</span> <span class=\"s\">\"3\"</span>\n<span class=\"kt\">value</span> <span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"s\">\"3\"</span>\n</code></pre></div>\n<p>With these, you get the result <code>1 + 1 + 1 :: 'a :: numeral</code>, which is not particularly helpful, but at least it works.</p>\n<p>A more useful example would be this:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kt\">value</span> <span class=\"o\">[</span><span class=\"n\">nbe</span><span class=\"o\">]</span> <span class=\"s\">\"replicate 3 x\"</span>\n</code></pre></div>\n<p>Here you get the result <code>[x, x, x]</code> (for some reason, ‘simp’ does not seem to work here).</p>",
        "id": 272417565,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1645199189
    },
    {
        "content": "<p>Oh and <code>numeral &lt; term_of</code> simply means that the sort <code>numeral</code> subsumes <code>term_of</code>. Your term has the sort <code>numeral</code>, but we also need the <code>term_of</code> class here, and that would only be possible if <code>numeral</code> subsumed <code>term_of</code>. Which it doesn't. (And even if it did, you would then get another error due to the polymorphic nature of the term you are trying to evaluate. Something about free dictionaries being present.)</p>",
        "id": 272417974,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1645199388
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232736\">@Manuel Eberl</span> <span class=\"user-mention\" data-user-id=\"233198\">@Mathias Fleury</span> Thanks that clarified a lot!</p>",
        "id": 272455386,
        "sender_full_name": "waynee95",
        "timestamp": 1645217323
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"424814\">waynee95</span> has marked this topic as resolved.</p>",
        "id": 272455390,
        "sender_full_name": "Notification Bot",
        "timestamp": 1645217326
    }
]