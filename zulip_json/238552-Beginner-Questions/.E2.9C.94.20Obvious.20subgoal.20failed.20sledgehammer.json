[
    {
        "content": "<p>Hi all,<br>\nI am writing a proof proving two lemmas about derivatives of regular expressions.<br>\nI prove them concurrently because they are using each other <br>\nduring the induction step.<br>\nThe induction strategy was reverse induction on the structure of string s.<br>\nWhen proving the induction step, I tried to make each rewriting step explicit by using a subgoal for that rewrite.<br>\nAnd since each rewrite step has a lemma with it to go through, sledgehammer will<br>\nalways find the proof for that rewrite. This method is clumsy but helps me go through without all<br>\nthe clever erule/frule/etc......  <br>\nThe problem is I got stuck in this middle part where a seemingly obvious rewrite step doesn't <br>\ngo through with sledgehammer: the fact <br>\n<code>rerase  (bders_simp r xs) = rerase (bsimp (bders r xs))</code><br>\nwhich appeared in the premise of the subgoal.<br>\nI am wondering why is the premise not used? Am I missing<br>\nsomething about quantifier instantiation? (Maybe the xs mean different things in the premise and conclusion?)</p>\n<div class=\"codehilite\"><pre><span></span><code>lemma ders_simp_commute:\n  shows &quot;s ≠[] ⟹ rerase  (bders_simp r s) = rerase (bsimp (bders r s))&quot;\nand &quot;s ≠ [] ⟹ rders_simp (RSEQ r1 r2) s =\n         rsimp (RALTS  ((RSEQ (rders r1 s) r2) #\n           (map (rders r2) (orderedSuf s))) )&quot;\n  apply(induct s arbitrary: r r1 r2 rule: rev_induct)\n     apply simp\n  apply simp\n\n   apply (simp add: bders_simp_append )\n   apply(subgoal_tac &quot;rerase (bsimp (bder x (bders_simp r xs))) = (rsimp (rerase (bder x (bders_simp r xs)))) &quot;)\n    prefer 2\n    apply (simp add: rerase_bsimp)\n   apply(subgoal_tac &quot;(rsimp (rerase (bder x (bders_simp r xs)))) = (rsimp (rder x (rerase (bders_simp r xs))))&quot;)\n    prefer 2\n    apply(subgoal_tac &quot;rerase (bders_simp r xs) = rerase (bsimp (bders r xs))&quot;)\n\n     prefer 2\n\n  sledgehammer\n</code></pre></div>\n<p>Thanks a lot!<br>\nChengsong</p>",
        "id": 270905764,
        "sender_full_name": "Chengsong Tan",
        "timestamp": 1644174402
    },
    {
        "content": "<p><a href=\"/user_uploads/14278/9czq5pC7dBu2Pj7SrKlzP1PC/Image-2022-02-06-at-6.51.49-PM.jpeg\">Image-2022-02-06-at-6.51.49-PM.jpeg</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/14278/9czq5pC7dBu2Pj7SrKlzP1PC/Image-2022-02-06-at-6.51.49-PM.jpeg\" title=\"Image-2022-02-06-at-6.51.49-PM.jpeg\"><img src=\"/user_uploads/14278/9czq5pC7dBu2Pj7SrKlzP1PC/Image-2022-02-06-at-6.51.49-PM.jpeg\"></a></div>",
        "id": 270905960,
        "sender_full_name": "Chengsong Tan",
        "timestamp": 1644174606
    },
    {
        "content": "<p>Doesn't the premise only apply when xs is nonempty?</p>",
        "id": 270909124,
        "sender_full_name": "Maximilian Schaeffeler",
        "timestamp": 1644178105
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"433149\">Maximilian Schaeffeler</span> <a href=\"#narrow/stream/238552-Beginner-Questions/topic/Obvious.20subgoal.20failed.20sledgehammer/near/270909124\">said</a>:</p>\n<blockquote>\n<p>Doesn't the premise only apply when xs is nonempty?</p>\n</blockquote>\n<p>Yes you are correct, I need to rethink that to make the induction go through, because for the inductive case<br>\nonly xs@[x] != [] is guaranteed which says nothing about the non-emptiness of xs.<br>\nProbably need to do a case distinction on xs being [] and xs being not [].<br>\nThank you for pointing that out!</p>",
        "id": 270917319,
        "sender_full_name": "Chengsong Tan",
        "timestamp": 1644189111
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"433149\">Maximilian Schaeffeler</span> has marked this topic as resolved.</p>",
        "id": 270943773,
        "sender_full_name": "Notification Bot",
        "timestamp": 1644220982
    }
]