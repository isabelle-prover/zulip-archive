[
    {
        "content": "<p>I am trying to get a better understanding of HOL or simpled typed lambda calculus and its variations.</p>\n<p>System F seems to be commonly referred to as \"polymorphic lambda calculus\", I was wondering how exactly it compares to Isabelle/HOL because we also have polymorphism. </p>\n<p>Any pointers to papers and other materials to get a better bigger picture, would be appreciated.</p>",
        "id": 271618014,
        "sender_full_name": "waynee95",
        "timestamp": 1644604264
    },
    {
        "content": "<p>The following is my understanding of Isabelle/HOL. System F adds terms depending on types to the simply typed lambda calculus. This is not possible in Isabelle/HOL which uses simply typed lambda calculus. The only type of polymorphism that really exists in Isabelle/HOL is let-polymorphism. In other words, we can universally quantify over type variables in a type but the quantification can only occur at the the top-level; that is, there is no nested quantification beneath type constructors such as the function type constructor <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>⇒</mo></mrow><annotation encoding=\"application/x-tex\">\\Rightarrow</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.3669em;\"></span><span class=\"mrel\">⇒</span></span></span></span>. This quantification is exhibited as schematic variables. Isabelle/HOL also allows constant overloading (which is used to realise type classes) but I would call this constant polymorphism and not type polymorphism.</p>",
        "id": 271811098,
        "sender_full_name": "Lukas Stevens",
        "timestamp": 1644836377
    },
    {
        "content": "<p>Isabelle's schematic polymorphism is weaker than Hindley-Milner let-polymorphism:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kt\">term</span> <span class=\"s\">\"let id = λx. x in (id (0 :: nat), id ''abc'')\"</span> <span class=\"c\">(*type error*)</span>\n</code></pre></div>",
        "id": 271813301,
        "sender_full_name": "Kevin Kappelmann",
        "timestamp": 1644837800
    },
    {
        "content": "<p>Due to the definition of <code>let</code> in inner terms, I don't think you can classify this as a proper let:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">definition</span> <span class=\"n\">Let</span> <span class=\"o\">::</span> <span class=\"s\">\"'a ⇒ ('a ⇒ 'b) ⇒ 'b\"</span>\n  <span class=\"kp\">where</span> <span class=\"s\">\"Let s f ≡ f s\"</span>\n</code></pre></div>",
        "id": 271814090,
        "sender_full_name": "Lukas Stevens",
        "timestamp": 1644838306
    },
    {
        "content": "<p>Isabelle/HOL allows you to do this, though: <code>Pow_mono[OF Pow_mono]</code>, where the schematic type variables of the theorem are instantiated with different variables for the two occurrences of <code>Pow_mono</code>.</p>",
        "id": 271814164,
        "sender_full_name": "Lukas Stevens",
        "timestamp": 1644838349
    },
    {
        "content": "<p>That's the thing: there's no special support for polymorphism for local let definitions.<br>\n<a href=\"https://es.cs.uni-kl.de/events/TPHOLs-2007/proceedings/B-128.pdf\">Some</a> describe Isabelle's schematic polymorphism as \"Hindley-Milner let-polymorphism without a local let\"</p>",
        "id": 271815058,
        "sender_full_name": "Kevin Kappelmann",
        "timestamp": 1644838949
    },
    {
        "content": "<p>Yes that is what I was trying to describe.</p>",
        "id": 271816079,
        "sender_full_name": "Lukas Stevens",
        "timestamp": 1644839617
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"233154\">Kevin Kappelmann</span> <a href=\"#narrow/stream/238552-Beginner-Questions/topic/Polymorphic.20HOL.20vs.20System.20F/near/271815058\">said</a>:</p>\n<blockquote>\n<p>That's the thing: there's no special support for polymorphism for local let definitions.<br>\n<a href=\"https://es.cs.uni-kl.de/events/TPHOLs-2007/proceedings/B-128.pdf\">Some</a> describe Isabelle's schematic polymorphism as \"Hindley-Milner let-polymorphism without a local let\"</p>\n</blockquote>\n<p>It should be possible to implement this, though.</p>",
        "id": 271816182,
        "sender_full_name": "Lukas Stevens",
        "timestamp": 1644839665
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"424814\">waynee95</span> has marked this topic as resolved.</p>",
        "id": 271869005,
        "sender_full_name": "Notification Bot",
        "timestamp": 1644863904
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"233155\">Lukas Stevens</span> <a href=\"#narrow/stream/238552-Beginner-Questions/topic/.E2.9C.94.20Polymorphic.20HOL.20vs.20System.20F/near/271816182\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"233154\">Kevin Kappelmann</span> <a href=\"#narrow/stream/238552-Beginner-Questions/topic/Polymorphic.20HOL.20vs.20System.20F/near/271815058\">said</a>:</p>\n<blockquote>\n<p>That's the thing: there's no special support for polymorphism for local let definitions.<br>\n<a href=\"https://es.cs.uni-kl.de/events/TPHOLs-2007/proceedings/B-128.pdf\">Some</a> describe Isabelle's schematic polymorphism as \"Hindley-Milner let-polymorphism without a local let\"</p>\n</blockquote>\n<p>It should be possible to implement this, though.</p>\n</blockquote>\n<p>Logically perhaps, but in the system we have I don't think it would be possible. This would require you to make a new toplevel definition for every ‘let’ you encounter during type checking. And Isabelle does not allow you to add new constants during type checking. (which would be pretty crazy)</p>",
        "id": 272418482,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1645199637
    }
]