[
    {
        "content": "<p>Hello,<br>\nI am trying to prove a (seemingly simple) lemma, However, I think I may be missing something</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">len_check</span> <span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]:</span> <span class=\"s\">\"n = len (addBinNum x y) ⟹ n ≤ len x + len y\"</span>\n<span class=\"k\">proof</span><span class=\"o\">(</span><span class=\"n\">induct</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n  <span class=\"k\">case</span> <span class=\"n\">0</span>\n  <span class=\"k\">then</span> <span class=\"k\">show</span> <span class=\"o\">?</span><span class=\"k\">case</span> <span class=\"k\">by</span> <span class=\"n\">simp</span>\n<span class=\"k\">next</span>\n  <span class=\"k\">case</span> <span class=\"o\">(</span><span class=\"n\">Suc</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n  <span class=\"k\">then</span> <span class=\"k\">show</span> <span class=\"o\">?</span><span class=\"k\">case</span> <span class=\"gr\">sorry</span> <span class=\"c\">(*this is where I get stuck*)</span>\n<span class=\"k\">qed</span>\n</code></pre></div>\n<p>The subgoal says : ⋀n. (n = len (addBinNum x y) ⟹ n ≤ len x + len y) ⟹<br>\n         Suc n = len (addBinNum x y) ⟹ Suc n ≤ len x + len y</p>\n<p>My question : Do I need to induct on n further. Simple methods do not work. If I create another lemma \"Suc n = len (addBinNum x y) ⟹ Suc n ≤ len x + len y\" it possibly needs to refer to the 1st one. I am extremely confused as to how to proceed. Any help is appreciated.</p>\n<p>For reference :</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">fun</span> <span class=\"n\">len</span> <span class=\"o\">::</span> <span class=\"s\">\"BinNum ⇒ nat\"</span>\n  <span class=\"kp\">where</span>\n    <span class=\"s\">\"len Zero = 1\"</span><span class=\"o\">|</span>\n    <span class=\"s\">\"len One = 1\"</span><span class=\"o\">|</span>\n    <span class=\"s\">\"len (JoinZero x) = len x + 1\"</span><span class=\"o\">|</span>\n    <span class=\"s\">\"len (JoinOne x) = len x + 1\"</span>\n\n<span class=\"kn\">function</span> <span class=\"o\">(</span><span class=\"n\">domintros</span><span class=\"o\">)</span> <span class=\"n\">addBinNum</span> <span class=\"o\">::</span> <span class=\"s\">\"BinNum ⇒ BinNum ⇒ BinNum\"</span>\n<span class=\"kp\">where</span>\n  <span class=\"s\">\"addBinNum Zero Zero = Zero\"</span><span class=\"o\">|</span>\n  <span class=\"s\">\"addBinNum Zero One = One\"</span><span class=\"o\">|</span>\n  <span class=\"s\">\"addBinNum One Zero = One\"</span><span class=\"o\">|</span>\n  <span class=\"s\">\"addBinNum One One = JoinOne Zero\"</span><span class=\"o\">|</span>\n  <span class=\"s\">\"addBinNum Zero (JoinZero x) = JoinZero x\"</span><span class=\"o\">|</span>\n  <span class=\"s\">\"addBinNum One (JoinZero x) = JoinOne x\"</span><span class=\"o\">|</span>\n  <span class=\"s\">\"addBinNum One (JoinOne x) = JoinZero (addBinNum One x)\"</span><span class=\"o\">|</span>\n  <span class=\"s\">\"addBinNum Zero (JoinOne x) = JoinOne x\"</span><span class=\"o\">|</span>\n  <span class=\"s\">\"addBinNum (JoinZero x) Zero = JoinZero x\"</span><span class=\"o\">|</span>\n  <span class=\"s\">\"addBinNum (JoinZero x) One = JoinOne x\"</span><span class=\"o\">|</span>\n  <span class=\"s\">\"addBinNum (JoinOne x) Zero = JoinOne x\"</span><span class=\"o\">|</span>\n  <span class=\"s\">\"addBinNum (JoinOne x) One = JoinZero (addBinNum One x)\"</span><span class=\"o\">|</span>\n  <span class=\"s\">\"addBinNum (JoinZero x) (JoinZero y) = JoinZero(addBinNum x y)\"</span><span class=\"o\">|</span>\n  <span class=\"s\">\"addBinNum (JoinZero x) (JoinOne y) = JoinOne(addBinNum x y)\"</span><span class=\"o\">|</span>\n  <span class=\"s\">\"addBinNum (JoinOne x) (JoinZero y) = JoinOne(addBinNum x y)\"</span><span class=\"o\">|</span>\n  <span class=\"s\">\"addBinNum (JoinOne x) (JoinOne y) = JoinZero(addBinNum(addBinNum x y) One)\"</span>\n  <span class=\"k\">by</span> <span class=\"n\">pat_completeness</span> <span class=\"n\">auto</span>\n</code></pre></div>\n<p>any help is apreciated, thank you</p>",
        "id": 289753833,
        "sender_full_name": "Lekhani Ray",
        "timestamp": 1657904174
    },
    {
        "content": "<p>First, I would simplify the definition of <code>addBinNum</code>:<br>\nSwap the arguments in the recursive call in this line: <code> addBinNum (JoinOne x) One = JoinZero (addBinNum One x)</code>.<br>\nThen you can get rid of <code>function (domintros)</code> and replace it with <code>fun</code>.</p>\n<p>Finally for the lemma, get rid of the <code>n</code>, and replace it with <code>addBinNum x y</code> in the conclusion.<br>\nThen use computation induction: <code>induction x y rule: addBinNum.induct</code> to prove your goal.</p>",
        "id": 289767348,
        "sender_full_name": "Maximilian Schaeffeler",
        "timestamp": 1657910776
    },
    {
        "content": "<p>Thank you so much, it did the trick!</p>",
        "id": 289781276,
        "sender_full_name": "Lekhani Ray",
        "timestamp": 1657918011
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"511667\">Lekhani Ray</span> has marked this topic as resolved.</p>",
        "id": 289995740,
        "sender_full_name": "Notification Bot",
        "timestamp": 1658164274
    }
]