[
    {
        "content": "<p>Hi, I've been reading  IMP section from <code>concrete-semantics</code> up to <code>Small-Step Semantics</code>,  I defined syntax and semantics  for <code>Irem</code> which acts like <code>mod</code> operator. I wanted to prove following lemma about equivalence of imperative and declarative way of calculating gcd:</p>\n<div class=\"codehilite\"><pre><span></span><code>lemma &quot;{map t [&#39;&#39;m&#39;&#39;, &#39;&#39;n&#39;&#39;, &#39;&#39;M&#39;&#39;, &#39;&#39;N&#39;&#39;, &#39;&#39;c&#39;&#39;] |t.\n  (&#39;&#39;M&#39;&#39;::= V &#39;&#39;m&#39;&#39;;;\n   &#39;&#39;N&#39;&#39;::= V &#39;&#39;n&#39;&#39;;;\n   WHILE Less (N 0) (V &#39;&#39;N&#39;&#39;) DO\n   (\n       &#39;&#39;c&#39;&#39; ::= V &#39;&#39;M&#39;&#39;;;\n       &#39;&#39;M&#39;&#39; ::= V &#39;&#39;N&#39;&#39;;;\n       &#39;&#39;N&#39;&#39; ::= Irem (V &#39;&#39;c&#39;&#39;) (V &#39;&#39;N&#39;&#39;)\n   ),\n   &lt;&#39;&#39;m&#39;&#39; := m, &#39;&#39;n&#39;&#39; := n, &#39;&#39;M&#39;&#39; := 0, &#39;&#39;N&#39;&#39; := 0, &#39;&#39;c&#39;&#39; := 0&gt;) ⇒ t} = {[m, n, (gcd m n), 0, (n - (gcd m n))]}&quot;\n</code></pre></div>\n<p>How to prove this lemma or is there a better way of implementing imperative algorithms and proving their correctness (specially the equivalence of imperative and declarative form)? Thanks for your help.</p>",
        "id": 256476648,
        "sender_full_name": "Hamed Hajisadeghian",
        "timestamp": 1633551139
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"421192\">Hamed Hajisadeghian</span> <a href=\"#narrow/stream/238552-Beginner-Questions/topic/Proving.20lemma.20about.20IMP.20codes/near/256476648\">said</a>:</p>\n<blockquote>\n<p>Hi, I've been reading  IMP section from <code>concrete-semantics</code> up to <code>Small-Step Semantics</code>,  I defined syntax and semantics  for <code>Irem</code> which acts like <code>mod</code> operator. I wanted to prove following lemma about equivalence of imperative and declarative way of calculating gcd:</p>\n<div class=\"codehilite\"><pre><span></span><code>lemma &quot;{map t [&#39;&#39;m&#39;&#39;, &#39;&#39;n&#39;&#39;, &#39;&#39;M&#39;&#39;, &#39;&#39;N&#39;&#39;, &#39;&#39;c&#39;&#39;] |t.\n  (&#39;&#39;M&#39;&#39;::= V &#39;&#39;m&#39;&#39;;;\n   &#39;&#39;N&#39;&#39;::= V &#39;&#39;n&#39;&#39;;;\n   WHILE Less (N 0) (V &#39;&#39;N&#39;&#39;) DO\n   (\n       &#39;&#39;c&#39;&#39; ::= V &#39;&#39;M&#39;&#39;;;\n       &#39;&#39;M&#39;&#39; ::= V &#39;&#39;N&#39;&#39;;;\n       &#39;&#39;N&#39;&#39; ::= Irem (V &#39;&#39;c&#39;&#39;) (V &#39;&#39;N&#39;&#39;)\n   ),\n   &lt;&#39;&#39;m&#39;&#39; := m, &#39;&#39;n&#39;&#39; := n, &#39;&#39;M&#39;&#39; := 0, &#39;&#39;N&#39;&#39; := 0, &#39;&#39;c&#39;&#39; := 0&gt;) ⇒ t} = {[m, n, (gcd m n), 0, (n - (gcd m n))]}&quot;\n</code></pre></div>\n<p>How to prove this lemma or is there a better way of implementing imperative algorithms and proving their correctness (specially the equivalence of imperative and declarative form)? Thanks for your help.</p>\n</blockquote>\n<p>Hi Hamed,</p>\n<p>you could try to prove this by induction. But then you would need to generalize your statement first and then you probably would use an induction on the value of  <code>V  \"N\"</code>. However, this will likely be tedious.<br>\nIf you read on in the book and eventually get to the chapter on Hoare logic, you will have the proper tools to prove your statement :)</p>",
        "id": 260800971,
        "sender_full_name": "Simon Wimmer",
        "timestamp": 1636466510
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"421192\">Hamed Hajisadeghian</span> has marked this topic as resolved.</p>",
        "id": 265576657,
        "sender_full_name": "Notification Bot",
        "timestamp": 1640013707
    }
]