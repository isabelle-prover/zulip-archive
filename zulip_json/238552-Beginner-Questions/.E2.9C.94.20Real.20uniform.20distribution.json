[
    {
        "content": "<p>I'm trying to define a uniform distribution over an interval of reals <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">[</mo><mi>a</mi><mo separator=\"true\">,</mo><mi>b</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">[a,b]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">a</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mclose\">]</span></span></span></span> (where <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo>&lt;</mo><mi>b</mi></mrow><annotation encoding=\"application/x-tex\">a &lt; b</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">b</span></span></span></span>). (If there is an existing definition for this I wasn't able to find I'd also be glad if that is pointed out to me). There are two approaches I've tried (unsuccessfully) so far:</p>\n<ol>\n<li>define the density and lift that to a <code>real pmf</code>:</li>\n</ol>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">context</span>\n  <span class=\"kp\">fixes</span> <span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">real</span> <span class=\"kp\">and</span> <span class=\"n\">b</span> <span class=\"o\">::</span> <span class=\"n\">real</span>\n  <span class=\"kp\">assumes</span> <span class=\"n\">a_less_b</span><span class=\"o\">:</span> <span class=\"s\">\"a &lt; b\"</span>\n<span class=\"k\">begin</span>\n\n<span class=\"kn\">lift_definition</span> <span class=\"n\">pmf_of_real_interval</span> <span class=\"o\">::</span> <span class=\"s\">\"real pmf\"</span> <span class=\"kp\">is</span> <span class=\"s\">\"λx. indicator {a..b} x / (b - a)\"</span>\n<span class=\"k\">proof</span>\n   <span class=\"ow\">...</span>\n</code></pre></div>\n<p>In that proof I didn't manage to prove the goal that the density integrates to 1.</p>\n<ol start=\"2\">\n<li>define the cdf and use <code>real_distribution_interval_measure</code> to get a distribution that way. I'm also not quite sure how easy it is from there to get the <code>real pmf</code> I want in the end. I'm also open for suggestions on how to formulate the cdf more elegantly:</li>\n</ol>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">definition</span> <span class=\"n\">real_uniform_cdf</span> <span class=\"o\">::</span> <span class=\"s\">\"real ⇒ real ⇒ real ⇒ real\"</span> <span class=\"kp\">where</span>\n  <span class=\"s\">\"real_uniform_cdf a b ≡</span>\n<span class=\"s\">    λx. if x &lt; Min {a,b}</span>\n<span class=\"s\">        then 0</span>\n<span class=\"s\">        else if x ∈ {Min{a,b}..Max{a,b}}</span>\n<span class=\"s\">        then (x - Min{a,b}) / (Max{a,b} - Min{a,b})</span>\n<span class=\"s\">        else 1\"</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">real_uniform_cdf_altdef</span><span class=\"o\">:</span>\n  <span class=\"s\">\"a ≤ b ⟹ real_uniform_cdf a b = (λx. if x &lt; a then 0 else if x ∈ {a..b} then (x - a) / (b - a) else 1)\"</span>\n  <span class=\"k\">unfolding</span> <span class=\"n\">real_uniform_cdf_def</span>\n  <span class=\"k\">by</span> <span class=\"n\">auto</span>\n\n<span class=\"kn\">lemma</span> <span class=\"s\">\"a &lt; b ⟹ real_distribution (interval_measure (real_uniform_cdf a b))\"</span>\n<span class=\"k\">proof</span><span class=\"o\">(</span><span class=\"n\">intro</span> <span class=\"n\">real_distribution_interval_measure</span><span class=\"o\">,</span> <span class=\"n\">goal_cases</span><span class=\"o\">)</span>\n<span class=\"ow\">...</span>\n</code></pre></div>\n<p>Here, I'm struggling to prove the continuity of the cdf. I have to admit I haven't really wrapped my head around the whole filter thing. If there is any introductory reading (or illustrative examples) someone can recommend, I would also be thankful.</p>",
        "id": 285769687,
        "sender_full_name": "Christoph Madlener",
        "timestamp": 1654939564
    },
    {
        "content": "<p>The thing you are trying to define does not exist. A PMF is a probability mass function, i.e. it describes a distribution by telling you what the probability of each possible result <code>x</code> is. For continuous distributions like the one you are talking about this does not work, since that probability will be 0 for all results.</p>",
        "id": 285772132,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1654943263
    },
    {
        "content": "<p>You can of course talk about densities (which is presumable what you are trying to do here), but that is not what PMFs are.</p>",
        "id": 285772188,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1654943308
    },
    {
        "content": "<p>If you want non-discrete distributions, you <em>have</em> to use the measure type, and it will be somewhat more painful than using PMFs.</p>",
        "id": 285772195,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1654943328
    },
    {
        "content": "<p>Also note that many distributions do not have a probability density, such as e.g. the Dirac distribution (<code>Giry_Monad.return</code> or <code>return_pmf</code>) and more generally any discrete distribution.</p>",
        "id": 285772219,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1654943402
    },
    {
        "content": "<p>The thing you are looking for is <code>uniform_measure  :: 'a measure ⇒ 'a set ⇒ 'a measure</code>.</p>\n<p>The second parameter is the set over which you want to randomise, i.e. in your case <code>{a..b}</code>. The first parameter is just providing the underlying measurable space (i.e. a Sigma algebra); in your care you can just use <code>borel</code>.</p>",
        "id": 285772449,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1654943732
    },
    {
        "content": "<p>No, wait, that last bit was me being stupid. The first parameter is the underlying measure space; it's just just for the sigma algebra.</p>",
        "id": 285772508,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1654943780
    },
    {
        "content": "<p>The natural one to use for real numbers is <code>lborel</code> (The Lebesgue–Borel measure). There's also <code>lebesgue</code>, which is a beefed-up version of <code>lborel</code>, but you don't need it in most cases.</p>",
        "id": 285772524,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1654943814
    },
    {
        "content": "<p>It helps to know some basic measure theory to use all this stuff, but it's not absolutely necessary. If you have any problems feel free to ask me.</p>",
        "id": 285772535,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1654943843
    },
    {
        "content": "<p>I see. Maybe I can give some more context of what I'm trying to do. I'm trying to formalize a randomized algorithm that draws <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span> numbers from <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">[</mo><mn>0</mn><mo separator=\"true\">,</mo><mn>1</mn><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">[0,1]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">]</span></span></span></span>, which are then used to define a linear order (so I actually want to rely on the fact that the probability of drawing the same number twice is 0).<br>\nEventually I want to reason about the expectation of some random variable over the (randomized) output of this algorithm. I have done something similar before, where the distributions were discrete and I could actually use <code>'a pmf</code> to nicely formulate the randomized algorithm with the provided monad syntax.<br>\nTo my understanding the first part of reasoning about expectations (and probabilities, etc.) shouldn't be a problem, since they are defined using <code>measure</code> anyways. I'm not sure how to define the randomized algorithm itself though (without the monad of <code>pmf</code>).</p>",
        "id": 285774429,
        "sender_full_name": "Christoph Madlener",
        "timestamp": 1654946679
    },
    {
        "content": "<p>I don't know if I understand your last remark correctly, but the Giry Monad is defined for general (sub-)probability spaces of type <code>'a measure</code>, not just for <code>'a pmf</code>.</p>",
        "id": 285788445,
        "sender_full_name": "Maximilian Schaeffeler",
        "timestamp": 1654966929
    },
    {
        "content": "<p>Yes, that was indeed a misconception on my part then. So I will just use <code>uniform_measure</code> and proceed (more or less) like before when I dealt with discrete distributions. Thanks a lot to both of you for your guidance!</p>",
        "id": 285789886,
        "sender_full_name": "Christoph Madlener",
        "timestamp": 1654968987
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"304673\">Christoph Madlener</span> has marked this topic as resolved.</p>",
        "id": 285789888,
        "sender_full_name": "Notification Bot",
        "timestamp": 1654968993
    },
    {
        "content": "<p>Note that there is already some material about this \"draw n numbers between 0 and 1 and look at the linear order defined by them\" in the AFP entry on randomised treaps</p>",
        "id": 285857164,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1655061165
    },
    {
        "content": "<p>An alternative would be to just draw a random linear order instead. That has the advantage that it can be done fully inside the pmf monad</p>",
        "id": 285857177,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1655061207
    },
    {
        "content": "<p>Seriously you do not want to deal with the general giry monad if you can avoid it</p>",
        "id": 285857187,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1655061234
    },
    {
        "content": "<p>I will keep that in mind, at the moment I'm not sure if I can adapt the proof I'm basing the formalization on to fully avoid it.<br>\nAlso, thanks for pointing out the material in the Treap AFP entry, I think I want to use parts of that at some point (especially the part of the equivalence between drawing the priorities and drawing a linear order directly).</p>",
        "id": 285858347,
        "sender_full_name": "Christoph Madlener",
        "timestamp": 1655062666
    },
    {
        "content": "<p>There's also a paper that talks about this</p>",
        "id": 285861079,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1655066726
    },
    {
        "content": "<p>Random binary tree structures or something like that, on my website</p>",
        "id": 285861084,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1655066750
    }
]