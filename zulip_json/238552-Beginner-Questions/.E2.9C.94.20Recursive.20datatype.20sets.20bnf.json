[
    {
        "content": "<p>I'm trying to use a recursive datatype that uses sets like this:<br>\n<code>datatype 'a test = Test 'a \"('a test) set\"</code><br>\nBut this results in the error </p>\n<div class=\"codehilite\"><pre><span></span><code>Unsupported recursive occurrence of type &quot;&#39;a test&quot; via type constructor &quot;Set.set&quot; in type expression &quot;&#39;a test set&quot;\nUse the &quot;bnf&quot; command to register &quot;Set.set&quot; as a bounded natural functor to allow nested (co)recursion through it\n</code></pre></div>\n<p>If I use \"list\" or \"fset\" instead of \"set\" it works. But is there a way to do this with normal sets or should I just use fsets instead?</p>",
        "id": 254055128,
        "sender_full_name": "Bernhard Stöckl",
        "timestamp": 1632146840
    },
    {
        "content": "<p>If this was allowed, <code>Test x :: 'a test set =&gt; 'a test</code> would be a total, injective function from the the powerset of a set to the set. You could prove False from that easily.</p>\n<p>The BNF abstraction is what separates types that may nest recursive occurrences from those which may not. The types of lists and finite sets are BNFs, but \"'a set\" isn't.</p>",
        "id": 254075304,
        "sender_full_name": "Dmitriy Traytel",
        "timestamp": 1632154269
    },
    {
        "content": "<p>Ok, thanks for the explanation <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 254078123,
        "sender_full_name": "Bernhard Stöckl",
        "timestamp": 1632155451
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"438123\">Bernhard Stöckl</span> has marked this topic as resolved.</p>",
        "id": 254078135,
        "sender_full_name": "Notification Bot",
        "timestamp": 1632155454
    }
]