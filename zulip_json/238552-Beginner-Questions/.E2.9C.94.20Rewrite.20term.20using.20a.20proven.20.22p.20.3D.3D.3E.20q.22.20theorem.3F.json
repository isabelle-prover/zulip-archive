[
    {
        "content": "<p>I see, thanks! The <code>subst</code> proof method does the trick for me:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"s\">\"p ∨ q ⟹ p ∨ ¬ ¬ q\"</span><span class=\"w\"></span>\n<span class=\"k\">proof</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">assume</span><span class=\"w\"> </span><span class=\"s\">\"p ∨ q\"</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">thus</span><span class=\"w\"> </span><span class=\"s\">\"p ∨ ¬ ¬ q\"</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"o\">(</span><span class=\"n\">subst</span><span class=\"w\"> </span><span class=\"n\">not_not</span><span class=\"o\">)</span><span class=\"w\"></span>\n<span class=\"k\">qed</span><span class=\"w\"></span>\n\n<span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"s\">\"p ∨ ¬ ¬ q ⟹ p ∨ q\"</span><span class=\"w\"></span>\n<span class=\"k\">proof</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">assume</span><span class=\"w\"> </span><span class=\"s\">\"p ∨ ¬ ¬ q\"</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">thus</span><span class=\"w\"> </span><span class=\"s\">\"p ∨ q\"</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"o\">(</span><span class=\"n\">subst</span><span class=\"w\"> </span><span class=\"n\">not_not</span><span class=\"o\">[</span><span class=\"n\">symmetric</span><span class=\"o\">])</span><span class=\"w\"></span>\n<span class=\"k\">qed</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Given a theorem , it substitutes terms matching its RHS by its LHS.</p>",
        "id": 316676371,
        "sender_full_name": "Jiahong Lee",
        "timestamp": 1671432417
    },
    {
        "content": "<p>However, it doesn't work in calculational reasoning:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"s\">\"(P ⟶ Q) ⟷ ¬ (P ∧ ¬ Q)\"</span><span class=\"w\"></span>\n<span class=\"k\">proof</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"s\">\"(P ⟶ Q) = (¬ P ∨ Q)\"</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"o\">(</span><span class=\"n\">rule</span><span class=\"w\"> </span><span class=\"n\">imp_conv_disj</span><span class=\"o\">)</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">also</span><span class=\"w\"> </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"s\">\"... = (¬ P ∨ ¬ ¬ Q)\"</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"o\">(</span><span class=\"n\">subst</span><span class=\"w\"> </span><span class=\"n\">not_not</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"c\">(* Error! *)</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 316676557,
        "sender_full_name": "Jiahong Lee",
        "timestamp": 1671432536
    },
    {
        "content": "<p>After searching around, the <code>unfolding</code> proof method does the trick for me:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"s\">\"(P ⟶ Q) ⟷ ¬ (P ∧ ¬ Q)\"</span><span class=\"w\"></span>\n<span class=\"k\">proof</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"s\">\"(P ⟶ Q) = (¬ P ∨ Q)\"</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"o\">(</span><span class=\"n\">rule</span><span class=\"w\"> </span><span class=\"n\">imp_conv_disj</span><span class=\"o\">)</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">also</span><span class=\"w\"> </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"s\">\"... = (¬ P ∨ ¬ ¬ Q)\"</span><span class=\"w\"> </span><span class=\"k\">unfolding</span><span class=\"w\"> </span><span class=\"n\">not_not</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"o\">(</span><span class=\"n\">rule</span><span class=\"w\"> </span><span class=\"n\">refl</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"c\">(* Ok! *)</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 316676630,
        "sender_full_name": "Jiahong Lee",
        "timestamp": 1671432586
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"429503\">Jiahong Lee</span> has marked this topic as resolved.</p>",
        "id": 316676642,
        "sender_full_name": "Notification Bot",
        "timestamp": 1671432596
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"429503\">Jiahong Lee</span> <a href=\"#narrow/stream/238552-Beginner-Questions/topic/.E2.9C.94.20Rewrite.20term.20using.20a.20proven.20.22p.20.3D.3D.3E.20q.22.20theorem.3F/near/316676557\">said</a>:</p>\n<blockquote>\n<p>However, it doesn't work in calculational reasoning:</p>\n<p><div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"s\">\"(P ⟶ Q) ⟷ ¬ (P ∧ ¬ Q)\"</span><span class=\"w\"></span>\n<span class=\"k\">proof</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"s\">\"(P ⟶ Q) = (¬ P ∨ Q)\"</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"o\">(</span><span class=\"n\">rule</span><span class=\"w\"> </span><span class=\"n\">imp_conv_disj</span><span class=\"o\">)</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">also</span><span class=\"w\"> </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"s\">\"... = (¬ P ∨ ¬ ¬ Q)\"</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"o\">(</span><span class=\"n\">subst</span><span class=\"w\"> </span><span class=\"n\">not_not</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"c\">(* Error! *)</span><span class=\"w\"></span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>as you noticed, subst only does the substitution, not proving that <code>?A = ?A</code>, so</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"w\">  </span><span class=\"k\">also</span><span class=\"w\"> </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"s\">\"... = (¬ P ∨ ¬ ¬ Q)\"</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"o\">(</span><span class=\"n\">subst</span><span class=\"w\"> </span><span class=\"n\">not_not</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">rule</span><span class=\"w\"> </span><span class=\"n\">refl</span><span class=\"o\">)</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 316694476,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1671440811
    },
    {
        "content": "<p>Note that <code>rule refl</code> is something that the <code>standard</code> proof method covers, so that you can replace <code>rule refl</code> by <code>..</code>.</p>",
        "id": 316770136,
        "sender_full_name": "Wolfgang Jeltsch",
        "timestamp": 1671463872
    },
    {
        "content": "<p>By the way, it took me years of intensely working with Isabelle to discover that; actually, my colleague <span class=\"user-mention\" data-user-id=\"423666\">@Javier Diaz</span> discovered it, and I saw him using this trick. Before, I had resorted to <code>simp</code> in such situations, which might often be considered overkill.</p>",
        "id": 316770425,
        "sender_full_name": "Wolfgang Jeltsch",
        "timestamp": 1671463952
    },
    {
        "content": "<blockquote>\n<p>as you noticed, subst only does the substitution, not proving that ?A = ?A, </p>\n</blockquote>\n<p>Ah, I see, the error message didn't make sense to me previously, thanks!</p>",
        "id": 316864871,
        "sender_full_name": "Jiahong Lee",
        "timestamp": 1671502351
    },
    {
        "content": "<blockquote>\n<p>Note that <code>rule refl</code> is something that the <code>standard</code> proof method covers, so that you can replace <code>rule refl</code> by <code>..</code>.</p>\n</blockquote>\n<p>Thanks for your info, but right now I prefer an explicit proof method for better understanding</p>",
        "id": 316865327,
        "sender_full_name": "Jiahong Lee",
        "timestamp": 1671502744
    }
]