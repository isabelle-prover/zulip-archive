[
    {
        "content": "<p>You can use something like:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"kp\">assumes</span><span class=\"w\"> </span><span class=\"s\">\"A ⟹ B\"</span><span class=\"w\"> </span><span class=\"kp\">and</span><span class=\"w\"> </span><span class=\"s\">\"B ⟹ A\"</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"kp\">shows</span><span class=\"w\"> </span><span class=\"s\">\"A = B\"</span><span class=\"w\"></span>\n<span class=\"k\">proof</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">standard</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">goal_cases</span><span class=\"o\">)</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">case</span><span class=\"w\"> </span><span class=\"n\">1</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"k\">case</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">rule</span><span class=\"w\"> </span><span class=\"n\">assms</span><span class=\"o\">(</span><span class=\"n\">1</span><span class=\"o\">))</span><span class=\"w\"></span>\n<span class=\"k\">next</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">case</span><span class=\"w\"> </span><span class=\"n\">2</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"k\">case</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">rule</span><span class=\"w\"> </span><span class=\"n\">assms</span><span class=\"o\">(</span><span class=\"n\">2</span><span class=\"o\">))</span><span class=\"w\"></span>\n<span class=\"k\">qed</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 315973424,
        "sender_full_name": "Johannes Neubrand",
        "timestamp": 1671089597
    },
    {
        "content": "<p>Hmm, that's not quite what I'm looking for.</p>",
        "id": 315977221,
        "sender_full_name": "Jiahong Lee",
        "timestamp": 1671091415
    },
    {
        "content": "<p>My current best solution is </p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">theorem</span><span class=\"w\"> </span><span class=\"s\">\"(p ⟶ (q ⟶ r)) = (p ∧ q ⟶ r)\"</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"kp\">is</span><span class=\"w\"> </span><span class=\"s\">\"?A = ?B\"</span><span class=\"o\">)</span><span class=\"w\"></span>\n<span class=\"k\">proof</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"s\">\"?A ⟹ ?B\"</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"o\">(</span><span class=\"n\">rule</span><span class=\"w\"> </span><span class=\"n\">thm2</span><span class=\"o\">)</span><span class=\"w\"></span>\n<span class=\"k\">next</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"s\">\"?B ⟹ ?A\"</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"o\">(</span><span class=\"n\">rule</span><span class=\"w\"> </span><span class=\"n\">thm1</span><span class=\"o\">)</span><span class=\"w\"></span>\n<span class=\"k\">qed</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 315977445,
        "sender_full_name": "Jiahong Lee",
        "timestamp": 1671091505
    },
    {
        "content": "<p>That's good enough for now, thanks!</p>",
        "id": 315977473,
        "sender_full_name": "Jiahong Lee",
        "timestamp": 1671091518
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"429503\">Jiahong Lee</span> has marked this topic as resolved.</p>",
        "id": 315977481,
        "sender_full_name": "Notification Bot",
        "timestamp": 1671091521
    },
    {
        "content": "<p>It is generally discouraged to have meta-level connectives appearing in <code>have</code>/<code>show</code> statements. You should either do <code>assume ?A … show ?B</code> or something like <code>show ?B if ?A</code>. I mean, don't worry, what you're doing works, too, and some people do it (and some would probably also disagree about it being discouraged). Just to let you know.</p>",
        "id": 316220201,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1671183017
    },
    {
        "content": "<p>Yeah, the Isabelle/Isar proof language, which is really great, let’s you write things in a style mathematicians would use and under the hood translates everything into Isabelle/Pure (meta-level) connectives.</p>",
        "id": 316363472,
        "sender_full_name": "Wolfgang Jeltsch",
        "timestamp": 1671226088
    }
]