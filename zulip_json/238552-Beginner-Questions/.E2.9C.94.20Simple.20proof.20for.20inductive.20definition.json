[
    {
        "content": "<p>I am trying to formalize well-formed first-order terms and am stuck at the following lemma, that says that every variable is a well-formed first-order term:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">datatype</span><span class=\"w\"> </span><span class=\"n n-Type\">'b</span><span class=\"w\"> </span><span class=\"n\">FOTerm</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">is_Var</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Var</span><span class=\"w\"> </span><span class=\"s\">\"string\"</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">is_Fun</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Fun</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">symbol</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n n-Type\">'b</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">args</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"'b FOTerm list\"</span><span class=\"o\">)</span><span class=\"w\"></span>\n\n<span class=\"k\">inductive</span><span class=\"w\"> </span><span class=\"n\">WF_FOTerm</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"('a ⇒ bool) ⇒ ('a ⇒ nat) ⇒ 'a FOTerm ⇒ bool\"</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"kp\">for</span><span class=\"w\"> </span><span class=\"n\">fun_symbol</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"'a ⇒ bool\"</span><span class=\"w\"> </span><span class=\"kp\">and</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"n\">fun_arity</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"'a ⇒ nat\"</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"kp\">where</span><span class=\"w\"> </span><span class=\"n\">var_wf</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"is_Var t ⟹ WF_FOTerm fun_symbol fun_arity t\"</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">fun_wf</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"is_Fun t ⟹</span>\n<span class=\"s\">             fun_symbol (symbol t) ⟹</span>\n<span class=\"s\">             list_all (WF_FOTerm fun_symbol fun_arity) (args t) ⟹</span>\n<span class=\"s\">             length (args t) = fun_arity (symbol t) ⟹</span>\n<span class=\"s\">             WF_FOTerm fun_symbol fun_arity t\"</span><span class=\"w\"></span>\n\n<span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"s\">\"WF_FOterm fun_symbol fun_arity (Var var_name)\"</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Though I feel that this is really simple, also Sledgehammer has no clue how to prove this. Does anyone have a hint for me?</p>",
        "id": 298745645,
        "sender_full_name": "Matthias Hetzenberger",
        "timestamp": 1663152790
    },
    {
        "content": "<p><code>WF_FOterm</code>should be <code>WF_FOTerm</code>in your lemma. Then you can prove it (for example <code>\n  by (rule var_wf) simp</code>) or sledgehammer finds a proof</p>",
        "id": 298746179,
        "sender_full_name": "Simon Roßkopf",
        "timestamp": 1663153009
    },
    {
        "content": "<p>It seems there is a typo in the lemma.</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"s\">\"WF_FOTerm fun_symbol fun_arity (Var var_name)\"</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"n\">add</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">var_wf</span><span class=\"o\">)</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 298746238,
        "sender_full_name": "waynee95",
        "timestamp": 1663153034
    },
    {
        "content": "<p>Oh well, looks like I wasted an hour there for nothing. Thank you very much!</p>",
        "id": 298746472,
        "sender_full_name": "Matthias Hetzenberger",
        "timestamp": 1663153120
    },
    {
        "content": "<p>Free variables are shown in blue btw. This means that something is wrong if a term is printed in blue that should not be a free variable.</p>",
        "id": 298746485,
        "sender_full_name": "Lukas Stevens",
        "timestamp": 1663153126
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"461213\">Matthias Hetzenberger</span> has marked this topic as resolved.</p>",
        "id": 298746488,
        "sender_full_name": "Notification Bot",
        "timestamp": 1663153128
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"233155\">Lukas Stevens</span> <a href=\"#narrow/stream/238552-Beginner-Questions/topic/.E2.9C.94.20Simple.20proof.20for.20inductive.20definition/near/298746485\">said</a>:</p>\n<blockquote>\n<p>Free variables are shown in blue btw. So if a term, that should not be a free variable, is printed in blue something is wrong.</p>\n</blockquote>\n<p>Thanks, I will keep this in mind from now on.</p>",
        "id": 298746550,
        "sender_full_name": "Matthias Hetzenberger",
        "timestamp": 1663153155
    }
]