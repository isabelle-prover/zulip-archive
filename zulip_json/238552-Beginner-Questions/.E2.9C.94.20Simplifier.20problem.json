[
    {
        "content": "<p>Why is the simplifier not able to discharge the following goal:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"err\">⟦</span><span class=\"o\">(</span><span class=\"n\">λxa.</span> <span class=\"kp\">if</span> <span class=\"n\">xa</span> <span class=\"err\">∈</span> <span class=\"n\">V</span><span class=\"err\">⇘</span><span class=\"n\">K</span><span class=\"err\">⇙</span> <span class=\"k\">then</span> <span class=\"err\">⇘</span><span class=\"n\">x</span><span class=\"err\">⇙⇩</span><span class=\"n\">V</span> <span class=\"o\">(</span><span class=\"err\">⇘</span><span class=\"n\">r</span><span class=\"err\">⇙⇩</span><span class=\"n\">V</span> <span class=\"n\">xa</span><span class=\"o\">)</span> <span class=\"n\">else</span> <span class=\"n\">undefined</span><span class=\"o\">)</span> <span class=\"o\">=</span> <span class=\"o\">(</span><span class=\"n\">λx.</span> <span class=\"kp\">if</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">V</span><span class=\"err\">⇘</span><span class=\"n\">K</span><span class=\"err\">⇙</span> <span class=\"k\">then</span> <span class=\"err\">⇘</span><span class=\"n\">y</span><span class=\"err\">⇙⇩</span><span class=\"n\">V</span> <span class=\"o\">(</span><span class=\"err\">⇘</span><span class=\"n\">d</span><span class=\"err\">⇙⇩</span><span class=\"n\">V</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">else</span> <span class=\"n\">undefined</span><span class=\"o\">)</span><span class=\"err\">;</span> <span class=\"n\">v</span> <span class=\"err\">∈</span> <span class=\"n\">V</span><span class=\"err\">⇘</span><span class=\"n\">K</span><span class=\"err\">⇙⟧</span> <span class=\"err\">⟹</span> <span class=\"err\">⇘</span><span class=\"n\">x</span><span class=\"err\">⇙⇩</span><span class=\"n\">V</span> <span class=\"o\">(</span><span class=\"err\">⇘</span><span class=\"n\">r</span><span class=\"err\">⇙⇩</span><span class=\"n\">V</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">=</span> <span class=\"err\">⇘</span><span class=\"n\">y</span><span class=\"err\">⇙⇩</span><span class=\"n\">V</span> <span class=\"o\">(</span><span class=\"err\">⇘</span><span class=\"n\">d</span><span class=\"err\">⇙⇩</span><span class=\"n\">V</span> <span class=\"n\">v</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>It follows directly from the fact that <code>v ∈ V⇘K⇙</code>.<br>\nThank you for a hint</p>",
        "id": 281324599,
        "sender_full_name": "Robert Soeldner",
        "timestamp": 1651768575
    },
    {
        "content": "<p>Because of the lambdas. Maybe <code>(simp add: fun_eq_iff)</code> works. But in general forall is better than lambdas.</p>",
        "id": 281328248,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1651770031
    },
    {
        "content": "<p><code>metis</code> and <code>meson</code> solve the goal.<br>\nTo solve it using simp, add both <code>fun_eq_iff</code> and <code>if_split</code> to the simpset.</p>",
        "id": 281328398,
        "sender_full_name": "Maximilian Schaeffeler",
        "timestamp": 1651770097
    },
    {
        "content": "<p>Don't add if_split to the simpset, use<code>simp add: fun_eq_iff split: if_splits</code></p>",
        "id": 281328726,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1651770217
    },
    {
        "content": "<p>Yes, that's much better :)</p>",
        "id": 281329755,
        "sender_full_name": "Maximilian Schaeffeler",
        "timestamp": 1651770655
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"403618\">Robert Soeldner</span> has marked this topic as resolved.</p>",
        "id": 281333188,
        "sender_full_name": "Notification Bot",
        "timestamp": 1651772270
    }
]