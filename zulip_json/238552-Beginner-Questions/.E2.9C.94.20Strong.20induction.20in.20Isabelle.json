[
    {
        "content": "<p>Is there a way to perform strong induction in Isabelle? I cannot find too many working examples on it yet?</p>",
        "id": 290159303,
        "sender_full_name": "Lekhani Ray",
        "timestamp": 1658264138
    },
    {
        "content": "<p><code>proof(induction n rule: less_induct)</code></p>",
        "id": 290160429,
        "sender_full_name": "Lukas Stevens",
        "timestamp": 1658264681
    },
    {
        "content": "<p>You can search for induction principles with command <code>find_theorems</code>. You can use keywords <code>induct</code> and <code>nat</code>, for example <code>find_theorems name: induct name: nat</code>.</p>\n<p>Alternatively, you can prove induction principles yourself. For strong induction:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">nat_strong_induct</span><span class=\"o\">[</span><span class=\"n\">case_names</span> <span class=\"n\">zero</span> <span class=\"n\">induct</span><span class=\"o\">]:</span>\n  <span class=\"kp\">assumes</span> <span class=\"s\">\"P 0\"</span>\n    <span class=\"kp\">and</span> <span class=\"s\">\"(⋀n. (⋀m. m ≤ n ⟹ P m) ⟹ P (Suc n))\"</span>\n  <span class=\"kp\">shows</span> <span class=\"s\">\"P n\"</span>\n  <span class=\"k\">using</span> <span class=\"n\">assms</span>\n  <span class=\"kp\">apply</span> <span class=\"o\">(</span><span class=\"n\">induct</span> <span class=\"n\">n</span> <span class=\"n\">rule</span><span class=\"o\">:</span> <span class=\"n\">full_nat_induct</span><span class=\"o\">)</span>\n  <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">(</span><span class=\"n\">metis</span> <span class=\"n\">Suc_le_mono</span> <span class=\"n\">not0_implies_Suc</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Then you can use it as shown below:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"s\">\"∃m::nat. m &gt; n\"</span>\n  <span class=\"k\">by</span> <span class=\"o\">(</span><span class=\"n\">induct</span> <span class=\"n\">n</span> <span class=\"n\">rule</span><span class=\"o\">:</span> <span class=\"n\">nat_strong_induct</span><span class=\"o\">)</span>\n    <span class=\"n\">auto</span>\n</code></pre></div>",
        "id": 290205364,
        "sender_full_name": "Jonathan Julian Huerta y Munive",
        "timestamp": 1658304563
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"511667\">Lekhani Ray</span> has marked this topic as resolved.</p>",
        "id": 290368164,
        "sender_full_name": "Notification Bot",
        "timestamp": 1658406204
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"441006\">Jonathan Julian Huerta y Munive</span> <a href=\"#narrow/stream/238552-Beginner-Questions/topic/.E2.9C.94.20Strong.20induction.20in.20Isabelle/near/290205364\">said</a>:</p>\n<blockquote>\n<p>You can search for induction principles with command <code>find_theorems</code>. You can use keywords <code>induct</code> and <code>nat</code>, for example <code>find_theorems name: induct name: nat</code>.</p>\n<p>Alternatively, you can prove induction principles yourself. For strong induction:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">nat_strong_induct</span><span class=\"o\">[</span><span class=\"n\">case_names</span> <span class=\"n\">zero</span> <span class=\"n\">induct</span><span class=\"o\">]:</span>\n  <span class=\"kp\">assumes</span> <span class=\"s\">\"P 0\"</span>\n    <span class=\"kp\">and</span> <span class=\"s\">\"(⋀n. (⋀m. m ≤ n ⟹ P m) ⟹ P (Suc n))\"</span>\n  <span class=\"kp\">shows</span> <span class=\"s\">\"P n\"</span>\n  <span class=\"k\">using</span> <span class=\"n\">assms</span>\n  <span class=\"kp\">apply</span> <span class=\"o\">(</span><span class=\"n\">induct</span> <span class=\"n\">n</span> <span class=\"n\">rule</span><span class=\"o\">:</span> <span class=\"n\">full_nat_induct</span><span class=\"o\">)</span>\n  <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">(</span><span class=\"n\">metis</span> <span class=\"n\">Suc_le_mono</span> <span class=\"n\">not0_implies_Suc</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Then you can use it as shown below:</p>\n<p><div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"s\">\"∃m::nat. m &gt; n\"</span>\n  <span class=\"k\">by</span> <span class=\"o\">(</span><span class=\"n\">induct</span> <span class=\"n\">n</span> <span class=\"n\">rule</span><span class=\"o\">:</span> <span class=\"n\">nat_strong_induct</span><span class=\"o\">)</span>\n    <span class=\"n\">auto</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Thank you Jonathan! That really helped!</p>",
        "id": 290368210,
        "sender_full_name": "Lekhani Ray",
        "timestamp": 1658406230
    }
]