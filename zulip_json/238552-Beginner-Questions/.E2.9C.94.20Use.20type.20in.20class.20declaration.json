[
    {
        "content": "<p>Is there a way to refer to the type that implements the type class? For example given a class like this:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">class</span> <span class=\"n\">foo</span> <span class=\"o\">=</span> <span class=\"kp\">assumes</span> <span class=\"s\">\"P UNIV\"</span>\n</code></pre></div>\n<p>how can I ensure that an instance declaration uses the correct <code>UNIV</code>?</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">instantiation</span> <span class=\"n\">nat</span> <span class=\"o\">::</span> <span class=\"n\">foo</span> <span class=\"k\">begin</span>\n<span class=\"kn\">instance</span> <span class=\"kp\">apply</span> <span class=\"n\">standard</span>\n<span class=\"c\">(* How do I make sure that the goal is \"P (UNIV :: nat set)\" here? *)</span>\n</code></pre></div>",
        "id": 288023002,
        "sender_full_name": "Jan van Brügge",
        "timestamp": 1656593817
    },
    {
        "content": "<p>IsaFoR uses a <code>type_fixer</code> parameter for such case:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">class</span> <span class=\"n\">foo</span> <span class=\"o\">=</span> <span class=\"kp\">fixes</span> <span class=\"n\">type_fixer</span> <span class=\"o\">::</span> <span class=\"s\">\"'a\"</span>  <span class=\"kp\">assumes</span> <span class=\"s\">\"P (UNIV :: 'a set)\"</span>\n\n<span class=\"k\">instantiation</span> <span class=\"n\">nat</span> <span class=\"o\">::</span> <span class=\"n\">foo</span>\n<span class=\"k\">begin</span>\n\n<span class=\"k\">definition</span> <span class=\"n\">type_fixer_nat</span> <span class=\"o\">::</span> <span class=\"err\">‹</span><span class=\"n\">nat</span> <span class=\"n\">itself</span><span class=\"err\">›</span> <span class=\"kp\">where</span>\n  <span class=\"err\">‹</span><span class=\"n\">type_fixer_nat</span> <span class=\"err\">≡</span> <span class=\"n\">TYPE</span><span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"o\">)</span><span class=\"err\">›</span>\n\n<span class=\"kn\">instance</span> <span class=\"kp\">apply</span> <span class=\"n\">standard</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 288023999,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1656594311
    },
    {
        "content": "<p>thought about something like that, but nothing would prevent me to use <code>TYPE(unit)</code> there, wouldn't it?</p>",
        "id": 288024244,
        "sender_full_name": "Jan van Brügge",
        "timestamp": 1656594389
    },
    {
        "content": "<p>No.</p>",
        "id": 288024782,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1656594649
    },
    {
        "content": "<p>I guess it just has to be documented that it needs to be the same type as the type that the class is defined for. Weird that there is no syntax for this, in Haskell it would be easy:</p>\n<div class=\"codehilite\" data-code-language=\"Haskell\"><pre><span></span><code><span class=\"kr\">class</span><span class=\"w\"> </span><span class=\"kt\">Foo</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"kr\">where</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"ow\">::</span><span class=\"w\"> </span><span class=\"kt\">P</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">UNIV</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">)</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 288025335,
        "sender_full_name": "Jan van Brügge",
        "timestamp": 1656594901
    },
    {
        "content": "<p>in isabelle this could look similar:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">class</span> <span class=\"n n-Type\">'a</span> <span class=\"n\">foo</span> <span class=\"o\">=</span> <span class=\"c\">(* ... *)</span>\n</code></pre></div>",
        "id": 288025479,
        "sender_full_name": "Jan van Brügge",
        "timestamp": 1656594958
    },
    {
        "content": "<p>wait</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">class</span> <span class=\"n\">foo</span> <span class=\"o\">=</span>\n  <span class=\"kp\">assumes</span> <span class=\"n\">finite_UNIV</span><span class=\"o\">:</span> <span class=\"s\">\"P (UNIV :: 'a set)\"</span>\n<span class=\"k\">begin</span>\n<span class=\"k\">end</span>\n\n<span class=\"k\">instantiation</span> <span class=\"n\">nat</span> <span class=\"o\">::</span> <span class=\"n\">foo</span>\n<span class=\"k\">begin</span>\n<span class=\"kn\">instance</span>\n  <span class=\"n\">supply</span> <span class=\"o\">[[</span><span class=\"n\">show_sorts</span><span class=\"o\">,</span> <span class=\"n\">show_types</span><span class=\"o\">]]</span>\n  <span class=\"kp\">apply</span> <span class=\"n\">standard</span>\n</code></pre></div>\n<p>does what you want right?</p>",
        "id": 288026321,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1656595337
    },
    {
        "content": "<p>I checked how <code>finite</code> does it</p>",
        "id": 288026489,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1656595385
    },
    {
        "content": "<p>ehh, what should I see? It does not show me the type of <code>UNIV</code></p>",
        "id": 288028708,
        "sender_full_name": "Jan van Brügge",
        "timestamp": 1656596334
    },
    {
        "content": "<p>no but of P</p>",
        "id": 288028832,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1656596380
    },
    {
        "content": "<p>and P has the right type</p>",
        "id": 288028847,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1656596387
    },
    {
        "content": "<p>is there a way to get isabelle to show the types of constants e.g. on ctrl+hover?</p>",
        "id": 288029451,
        "sender_full_name": "Jan van Brügge",
        "timestamp": 1656596630
    },
    {
        "content": "<p>I don't know any</p>",
        "id": 288029823,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1656596799
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kp\">apply</span> <span class=\"o\">(</span><span class=\"n\">tactic</span> <span class=\"err\">‹</span><span class=\"n\">SUBGOAL</span> <span class=\"o\">(</span><span class=\"n\">fn</span> <span class=\"o\">(</span><span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"o\">_)</span> <span class=\"o\">=</span><span class=\"err\">&gt;</span>\n    <span class=\"k\">let</span> <span class=\"n\">val</span> <span class=\"o\">_</span> <span class=\"o\">=</span> <span class=\"err\">@</span><span class=\"ow\">{</span><span class=\"n\">print</span><span class=\"ow\">}</span> <span class=\"n\">t</span>\n    <span class=\"kp\">in</span> <span class=\"n\">all_tac</span> <span class=\"k\">end</span><span class=\"o\">)</span> <span class=\"n\">1</span>\n  <span class=\"err\">›</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>works and it confirms that it has the correct type. Interesting</p>",
        "id": 288030927,
        "sender_full_name": "Jan van Brügge",
        "timestamp": 1656597316
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"392255\">Jan van Brügge</span> has marked this topic as resolved.</p>",
        "id": 288030976,
        "sender_full_name": "Notification Bot",
        "timestamp": 1656597348
    },
    {
        "content": "<p>Just to confirm, in the context of a type class, the type that you're talking about is always <code>'a</code>.</p>",
        "id": 288152161,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1656672575
    }
]