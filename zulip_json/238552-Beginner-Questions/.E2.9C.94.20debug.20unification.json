[
    {
        "content": "<p>Is there any eyesight-saving way to debug the type error (or type-class error) in unification (e.g. RS, OF, THEN)? Either the <code>RS</code>, <code>THEN</code>, <code>OF</code> just tell me \"no unifiers!\", but so many times because of the covert type-class mismatch I just cannot find out \"why?\".</p>\n<p>Any suggestion or best practice about this?</p>",
        "id": 264126636,
        "sender_full_name": "Qiyuan Xu",
        "timestamp": 1638953455
    },
    {
        "content": "<p>I hope something can tell me what the mismatch is, about which type mismatches another, just like the verbose type-error printing by ML compiler.</p>\n<p>I know some switches like <code>Pattern.unify_trace_failure</code> can let the unifier more verbose, but I still haven't found a way to use them in Isar code <code>thm A[THEN B]</code> or <code>ML \"@{thm A} RS @{thm B}\"</code> (mainly, the <code>RS</code> is context free so those switchers do not work with it)</p>",
        "id": 264127153,
        "sender_full_name": "Qiyuan Xu",
        "timestamp": 1638953775
    },
    {
        "content": "<p>uhmm.. by the tedious code</p>\n<div class=\"codehilite\" data-code-language=\"Standard ML\"><pre><span></span><code><span class=\"kr\">val</span> <span class=\"nv\">ctxt</span> <span class=\"p\">=</span> <span class=\"n\">@</span><span class=\"p\">{</span><span class=\"n\">context</span><span class=\"p\">}</span> <span class=\"n\">|&gt;</span>\n <span class=\"nn\">Config</span><span class=\"p\">.</span><span class=\"n\">put</span> <span class=\"nn\">Pattern</span><span class=\"p\">.</span><span class=\"n\">unify_trace_failure</span> <span class=\"n\">true</span>\n<span class=\"kr\">val</span> <span class=\"nv\">x</span> <span class=\"p\">=</span> <span class=\"nn\">Thm</span><span class=\"p\">.</span><span class=\"n\">biresolution</span> <span class=\"p\">(</span><span class=\"n\">SOME</span> <span class=\"n\">ctxt</span><span class=\"p\">)</span> <span class=\"n\">false</span> <span class=\"p\">[(</span><span class=\"n\">false</span><span class=\"p\">,</span> <span class=\"n\">@</span><span class=\"p\">{</span><span class=\"n\">thm</span> <span class=\"n\">A</span><span class=\"p\">})]</span> <span class=\"mi\">1</span> <span class=\"n\">@</span><span class=\"p\">{</span><span class=\"n\">thm</span> <span class=\"n\">B</span><span class=\"p\">}</span>\n</code></pre></div>\n<p>I get the verbose error info...</p>",
        "id": 264128115,
        "sender_full_name": "Qiyuan Xu",
        "timestamp": 1638954336
    },
    {
        "content": "<p>You can just do <code>note [[unify_trace_failure]]</code> in Isar, or <code>using [[unify_trace_failure]]</code> in proof mode, or <code>declare [[unify_trace_failure]]</code> on toplevel.</p>",
        "id": 264141288,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1638962308
    },
    {
        "content": "<p>That's what I usually do when unification doesn't work and I don't understand why. Sometimes it helps to also add a <code>show_types</code> or <code>show_sorts</code> when polymorphism is involved (and it often is).</p>",
        "id": 264141339,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1638962346
    },
    {
        "content": "<p>uhmm, ok I'm fool...</p>",
        "id": 264159103,
        "sender_full_name": "Qiyuan Xu",
        "timestamp": 1638972253
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"418224\">Qiyuan Xu</span> has marked this topic as resolved.</p>",
        "id": 264159108,
        "sender_full_name": "Notification Bot",
        "timestamp": 1638972257
    }
]