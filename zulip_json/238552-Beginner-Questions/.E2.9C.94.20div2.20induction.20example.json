[
    {
        "content": "<p>In prog-prove the following example is used to introduce <code>rule: something.induct</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code>fun div2 :: &quot;nat ⇒ nat&quot; where\n&quot;div2 0 = 0&quot; |\n&quot;div2 (Suc 0) = 0&quot; |\n&quot;div2 (Suc (Suc n)) = Suc (div2 n)&quot;\n</code></pre></div>\n<p>And with <code>apply (induction n rule: div2.induct)</code> we can finish the proof with <code>auto</code> compared to <code>apply (induction n)</code> where the tutorial says that it needs further case analysis in the induction step. </p>\n<p>I was wondering how that would look like. At this point there were not many (if any) examples that use case analysis in <code>apply</code> proofs and I could not figure it out myself so far. </p>\n<p>Thanks!</p>",
        "id": 264583345,
        "sender_full_name": "waynee95",
        "timestamp": 1639255150
    },
    {
        "content": "<p>Hi,</p>\n<p>after <code>apply (induction n)</code> the <code>n</code> in the second subgoal is under a quantifier, so you do a direct case analysis.<br>\nYou can use <code>subgoal for m</code> to focus on that subgoal and introduce a new variable <code>m</code> that you can split on.</p>\n<div class=\"codehilite\"><pre><span></span><code>lemma &quot;div2 n = n div 2&quot;\n  apply (induction n)\n  subgoal by simp\n  subgoal for m\n    apply (cases m)\n     apply simp\n    sorry\n  done\n</code></pre></div>\n<p>Still in this case you will not be able to complete the proof, as the induction hypothesis only gives you information about <code>div2 m</code> but you need information about <code>div2 (m-1)</code>. You may instead prove following stronger theorem:</p>\n<div class=\"codehilite\"><pre><span></span><code>lemma &quot;div2 n = n div 2 ∧ div2 (Suc n) = (Suc n) div 2&quot;\n  apply (induction n)\n   apply auto\n  done\n</code></pre></div>\n<p>or use a stronger induction rule:</p>\n<div class=\"codehilite\"><pre><span></span><code>lemma &quot;div2 n = n div 2&quot;\n  apply (induction n rule: less_induct)\n  subgoal for n\n    apply (cases n)\n    subgoal by simp\n    subgoal for n&#39;\n      apply (cases n&#39;)\n      by auto\n    done\n  done\n</code></pre></div>\n<p>However, all these proofs can be expressed much better using the Isar language (Chapter 4). I would strongly advise against using such nested apply style proofs.</p>\n<div class=\"codehilite\"><pre><span></span><code>lemma &quot;div2 n = n div 2&quot;\nproof (induction n)\n  case 0\n  then show ?case by simp\nnext\n  case (Suc n)\n  then show ?case\n  proof (cases n)\n    case 0\n    then show ?thesis by simp\n  next\n    case (Suc m)\n    then show ?thesis sorry\n  qed\nqed\n</code></pre></div>",
        "id": 264671645,
        "sender_full_name": "Maximilian Schaeffeler",
        "timestamp": 1639380958
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"424814\">waynee95</span> has marked this topic as resolved.</p>",
        "id": 264888230,
        "sender_full_name": "Notification Bot",
        "timestamp": 1639500954
    }
]