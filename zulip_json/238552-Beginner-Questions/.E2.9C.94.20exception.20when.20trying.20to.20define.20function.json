[
    {
        "content": "<p>That sounds a bit like someone registered something as a <code>fundef_cong</code> rule that isn't a well-formed <code>fundef_cong</code> rule.  You could try looking through the list of <code>fundef_cong</code> rules and see if there's something with a <code>&lt;o</code> in it:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">declare</span> <span class=\"o\">[[</span><span class=\"n\">ML_print_depth</span> <span class=\"o\">=</span> <span class=\"n\">10000</span><span class=\"o\">]]</span>\n\n<span class=\"k\">ML</span> <span class=\"err\">‹</span>\n<span class=\"n\">Function_Context_Tree.get_function_congs</span> <span class=\"err\">@</span><span class=\"ow\">{</span><span class=\"k\">context</span><span class=\"ow\">}</span>\n<span class=\"err\">›</span>\n</code></pre></div>\n<p>Or you could search through the files of your development (and the stuff it depends on) and see if they contain a <code>fundef_cong</code> declaration that looks dodgy.</p>",
        "id": 291311642,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1659095598
    },
    {
        "content": "<p>Indeed, my custom map_cong rule shows up there, but I am pretty sure I never register it as a fundef_cong rule. The theorem itself is generated from ML</p>",
        "id": 291314313,
        "sender_full_name": "Jan van Brügge",
        "timestamp": 1659097546
    },
    {
        "content": "<p>What happens if you do this before the function package invocation:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">lemmas</span> <span class=\"o\">[</span><span class=\"n\">fundef_cong</span> <span class=\"n\">del</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">my_cong_rule</span>\n</code></pre></div>",
        "id": 291314476,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1659097658
    },
    {
        "content": "<p>And what does this custom rule look like and how exactly do you generate it?</p>",
        "id": 291314560,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1659097701
    },
    {
        "content": "<p>deleting the rule works, it lools like this:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"o\">|</span><span class=\"n\">supp</span> <span class=\"o\">?</span><span class=\"n\">f1.0</span><span class=\"o\">|</span> <span class=\"err\">&lt;</span><span class=\"n\">o</span> <span class=\"o\">|</span><span class=\"n\">UNIV</span><span class=\"o\">|</span> <span class=\"err\">⟹</span>\n  <span class=\"n\">bij</span> <span class=\"o\">?</span><span class=\"n\">f2.0</span> <span class=\"err\">⟹</span>\n  <span class=\"o\">|</span><span class=\"n\">supp</span> <span class=\"o\">?</span><span class=\"n\">f2.0</span><span class=\"o\">|</span> <span class=\"err\">&lt;</span><span class=\"n\">o</span> <span class=\"o\">|</span><span class=\"n\">UNIV</span><span class=\"o\">|</span> <span class=\"err\">⟹</span>\n  <span class=\"o\">|</span><span class=\"n\">supp</span> <span class=\"o\">?</span><span class=\"n\">g1.0</span><span class=\"o\">|</span> <span class=\"err\">&lt;</span><span class=\"n\">o</span> <span class=\"o\">|</span><span class=\"n\">UNIV</span><span class=\"o\">|</span> <span class=\"err\">⟹</span>\n  <span class=\"n\">bij</span> <span class=\"o\">?</span><span class=\"n\">g2.0</span> <span class=\"err\">⟹</span>\n  <span class=\"o\">|</span><span class=\"n\">supp</span> <span class=\"o\">?</span><span class=\"n\">g2.0</span><span class=\"o\">|</span> <span class=\"err\">&lt;</span><span class=\"n\">o</span> <span class=\"o\">|</span><span class=\"n\">UNIV</span><span class=\"o\">|</span> <span class=\"err\">⟹</span>\n  <span class=\"o\">?</span><span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"o\">?</span><span class=\"n\">ya</span> <span class=\"err\">⟹</span>\n  <span class=\"o\">(</span><span class=\"err\">⋀</span><span class=\"n\">z1.</span> <span class=\"n\">z1</span> <span class=\"err\">∈</span> <span class=\"n\">set1_τ_pre</span> <span class=\"o\">?</span><span class=\"n\">ya</span> <span class=\"err\">⟹</span> <span class=\"o\">?</span><span class=\"n\">f1.0</span> <span class=\"n\">z1</span> <span class=\"o\">=</span> <span class=\"o\">?</span><span class=\"n\">g1.0</span> <span class=\"n\">z1</span><span class=\"o\">)</span> <span class=\"err\">⟹</span>\n  <span class=\"o\">(</span><span class=\"err\">⋀</span><span class=\"n\">z2.</span> <span class=\"n\">z2</span> <span class=\"err\">∈</span> <span class=\"n\">set2_τ_pre</span> <span class=\"o\">?</span><span class=\"n\">ya</span> <span class=\"err\">⟹</span> <span class=\"o\">?</span><span class=\"n\">f2.0</span> <span class=\"n\">z2</span> <span class=\"o\">=</span> <span class=\"o\">?</span><span class=\"n\">g2.0</span> <span class=\"n\">z2</span><span class=\"o\">)</span> <span class=\"err\">⟹</span>\n  <span class=\"o\">(</span><span class=\"err\">⋀</span><span class=\"n\">z3.</span> <span class=\"n\">z3</span> <span class=\"err\">∈</span> <span class=\"n\">set3_τ_pre</span> <span class=\"o\">?</span><span class=\"n\">ya</span> <span class=\"err\">⟹</span> <span class=\"o\">?</span><span class=\"n\">f3.0</span> <span class=\"n\">z3</span> <span class=\"o\">=</span> <span class=\"o\">?</span><span class=\"n\">g3.0</span> <span class=\"n\">z3</span><span class=\"o\">)</span> <span class=\"err\">⟹</span> <span class=\"o\">(</span><span class=\"err\">⋀</span><span class=\"n\">z4.</span> <span class=\"n\">z4</span> <span class=\"err\">∈</span> <span class=\"n\">set4_τ_pre</span> <span class=\"o\">?</span><span class=\"n\">ya</span> <span class=\"err\">⟹</span> <span class=\"o\">?</span><span class=\"n\">f4.0</span> <span class=\"n\">z4</span> <span class=\"o\">=</span> <span class=\"o\">?</span><span class=\"n\">g4.0</span> <span class=\"n\">z4</span><span class=\"o\">)</span> <span class=\"err\">⟹</span> <span class=\"n\">map_τ_pre</span> <span class=\"o\">?</span><span class=\"n\">f1.0</span> <span class=\"o\">?</span><span class=\"n\">f2.0</span> <span class=\"o\">?</span><span class=\"n\">f3.0</span> <span class=\"o\">?</span><span class=\"n\">f4.0</span> <span class=\"o\">?</span><span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">map_τ_pre</span> <span class=\"o\">?</span><span class=\"n\">g1.0</span> <span class=\"o\">?</span><span class=\"n\">g2.0</span> <span class=\"o\">?</span><span class=\"n\">g3.0</span> <span class=\"o\">?</span><span class=\"n\">g4.0</span> <span class=\"o\">?</span><span class=\"n\">ya</span>\n</code></pre></div>",
        "id": 291314687,
        "sender_full_name": "Jan van Brügge",
        "timestamp": 1659097788
    },
    {
        "content": "<p>Yeah so I'm not a function package expert, but my guess is that <code>fundef_cong</code> rules are not allowed to have preconditions.</p>",
        "id": 291314837,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1659097874
    },
    {
        "content": "<blockquote>\n<p>how exactly do you generate it?</p>\n</blockquote>\n<p>basically <code>Goal.prove_sorry</code>, but there is a huge amount of code, not all of it written by me and some also copy pasted from the datatype package. I will investigate where this rule is added to the <code>fundef_cong</code> set</p>",
        "id": 291314862,
        "sender_full_name": "Jan van Brügge",
        "timestamp": 1659097892
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"392255\">Jan van Brügge</span> <a href=\"#narrow/stream/238552-Beginner-Questions/topic/exception.20when.20trying.20to.20define.20function/near/291314862\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>how exactly do you generate it?</p>\n</blockquote>\n<p>basically <code>Goal.prove_sorry</code>, but there is a huge amount of code, not all of it written by me and some also copy pasted from the datatype package. I will investigate where this rule is added to the <code>fundef_cong</code> set</p>\n</blockquote>\n<p>That bit is not so interesting; the interesting question is what you do with that <code>thm</code> value afterwards. Presumable you use something like <code>Local_Theory.notes</code> to actually store it in the background theory under some name?</p>",
        "id": 291314970,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1659097948
    },
    {
        "content": "<p>ok, that was easy: <code>(map_congN, [Lazy.force (#map_cong facts)], fundefcong_attrs),</code></p>",
        "id": 291314973,
        "sender_full_name": "Jan van Brügge",
        "timestamp": 1659097950
    },
    {
        "content": "<p>yes that was it</p>",
        "id": 291314992,
        "sender_full_name": "Jan van Brügge",
        "timestamp": 1659097964
    },
    {
        "content": "<p>Yeah, <code>Local_Theory.notes</code> roughly corresponds to the <code>lemma</code> command, and like with the <code>lemma</code> command, you can give a bunch of attributes to apply to the theorem.</p>",
        "id": 291315031,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1659097996
    },
    {
        "content": "<p>That said, the error message you got was pretty horrible and should be improved.</p>",
        "id": 291315067,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1659098032
    },
    {
        "content": "<p>Perhaps one could even modify the <code>fundef_cong</code> attribute so that it either ignores malformed rules or throws an exception upon the declaration, and not at some later point when the thing is used.</p>",
        "id": 291315158,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1659098075
    },
    {
        "content": "<p>that would probably be good. Thanks for pointing me to <code>fundef_cong</code></p>",
        "id": 291315437,
        "sender_full_name": "Jan van Brügge",
        "timestamp": 1659098291
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"392255\">Jan van Brügge</span> has marked this topic as resolved.</p>",
        "id": 291315440,
        "sender_full_name": "Notification Bot",
        "timestamp": 1659098294
    }
]