[
    {
        "content": "<p>I was trying to define a list using comprehension but got complaints from Isabelle:<br>\n<a href=\"/user_uploads/14278/c58ZfUQl86q5brpOCmUpVcpP/Screenshot-2022-02-09-at-20.01.19.png\">Screenshot-2022-02-09-at-20.01.19.png</a> <br>\nWhat I was trying to achieve is to build larger regular expressions with smaller ones recursively:<br>\n<a href=\"/user_uploads/14278/E--rOo1susxIoipBp6yQsV8A/Screenshot-2022-02-09-at-20.03.04.png\">Screenshot-2022-02-09-at-20.03.04.png</a> </p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/14278/c58ZfUQl86q5brpOCmUpVcpP/Screenshot-2022-02-09-at-20.01.19.png\" title=\"Screenshot-2022-02-09-at-20.01.19.png\"><img src=\"/user_uploads/14278/c58ZfUQl86q5brpOCmUpVcpP/Screenshot-2022-02-09-at-20.01.19.png\"></a></div><div class=\"message_inline_image\"><a href=\"/user_uploads/14278/E--rOo1susxIoipBp6yQsV8A/Screenshot-2022-02-09-at-20.03.04.png\" title=\"Screenshot-2022-02-09-at-20.03.04.png\"><img src=\"/user_uploads/14278/E--rOo1susxIoipBp6yQsV8A/Screenshot-2022-02-09-at-20.03.04.png\"></a></div><p>What am I missing here?<br>\nOr is it the case that there is no clean way for doing this, that I have to do zip [0..n] [n..0] and define a convolution-like<br>\nrecursive function for generation?</p>",
        "id": 271340105,
        "sender_full_name": "Chengsong Tan",
        "timestamp": 1644437298
    },
    {
        "content": "<p>even on paper I am not sure what this means… (is i&lt;j? how should the r_1 be ordered?)</p>",
        "id": 271343849,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1644439092
    },
    {
        "content": "<p>all that to say: yes you need your own functions to define that</p>",
        "id": 271343963,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1644439170
    },
    {
        "content": "<p>if you can use a set instead, things are different</p>",
        "id": 271344085,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1644439216
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"233198\">Mathias Fleury</span> <a href=\"#narrow/stream/238552-Beginner-Questions/topic/list.20comprehension/near/271344085\">said</a>:</p>\n<blockquote>\n<p>if you can use a set instead, things are different</p>\n</blockquote>\n<p>Thank you!<br>\nI tried using set, but get the following:<br>\n<a href=\"/user_uploads/14278/fWE-v4QE-i4fDVNUnMn_3QNv/Screenshot-2022-02-10-at-22.29.49.png\">Screenshot-2022-02-10-at-22.29.49.png</a> <br>\nAny idea why the case and how do I fix this?<br>\n<a href=\"https://stackoverflow.com/questions/67092973/how-to-define-a-function-map-from-one-set-to-another-f-a-b-in-isabelle\">https://stackoverflow.com/questions/67092973/how-to-define-a-function-map-from-one-set-to-another-f-a-b-in-isabelle</a><br>\nThis I found sadly does not help.</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/14278/fWE-v4QE-i4fDVNUnMn_3QNv/Screenshot-2022-02-10-at-22.29.49.png\" title=\"Screenshot-2022-02-10-at-22.29.49.png\"><img src=\"/user_uploads/14278/fWE-v4QE-i4fDVNUnMn_3QNv/Screenshot-2022-02-10-at-22.29.49.png\"></a></div>",
        "id": 271505124,
        "sender_full_name": "Chengsong Tan",
        "timestamp": 1644532393
    },
    {
        "content": "<p>Hi,</p>\n<p>to define a (recursive) function, you have to prove 2 things: completeness+compatibility of patterns and termination. Both are proved automatically by the command \"fun\".<br>\nIn your case, the automatic proof does not work, in this case you use the command \"function\":</p>\n<div class=\"codehilite\"><pre><span></span><code>context notes rev_conj_cong[fundef_cong] begin\nfunction (sequential) rexp_enum :: &quot;nat ⇒ rrexpr set&quot; where\n&quot;rexp_enum 0 = {}&quot; |\n&quot;rexp_enum (Suc 0) = {}&quot; |\n&quot;rexp_enum (Suc n) = {(RSEQ r1 r2) | r1 r2 i j.  r1 ∈ rexp_enum i ∧ r2 ∈ rexp_enum j ∧ i + j = n}&quot;\n  by pat_completeness auto\ntermination\n  by (relation &quot;measure size&quot;) auto\nend\n</code></pre></div>\n<p>For pattern completeness+comatibility we add <code>(sequential)</code> after <code>function</code> and prove it using <code>by pat_completeness auto</code> (this is quite standard).<br>\nFor the considerations regarding termination, I refer to <br>\n<a href=\"https://stackoverflow.com/questions/33379349/termination-proof-with-functions-using-set-comprehensions\">https://stackoverflow.com/questions/33379349/termination-proof-with-functions-using-set-comprehensions</a><br>\nThis tackles a very similar definition.<br>\nThe \"functions\" tutorial (in Jedit on the upper left: Documentation -&gt; Isabelle Tutorials -&gt; functions) gives you more information about termination proofs.</p>",
        "id": 271544825,
        "sender_full_name": "Maximilian Schaeffeler",
        "timestamp": 1644568658
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"433149\">Maximilian Schaeffeler</span> <a href=\"#narrow/stream/238552-Beginner-Questions/topic/list.20comprehension/near/271544825\">said</a>:<br>\nThis helps!<br>\nThe rev_conj_cong is still a bit mysterious to me, but I can make now the termination proof work.<br>\nThank  you!</p>",
        "id": 273681738,
        "sender_full_name": "Chengsong Tan",
        "timestamp": 1646157000
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"241231\">Chengsong Tan</span> has marked this topic as resolved.</p>",
        "id": 273681802,
        "sender_full_name": "Notification Bot",
        "timestamp": 1646157006
    }
]