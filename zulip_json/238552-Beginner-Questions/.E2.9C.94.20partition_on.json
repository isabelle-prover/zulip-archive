[
    {
        "content": "<p>I still struggle with this example, <code>card {{0, 1, 2}}</code> is 1 whereby nitpick reports 2 ...</p>",
        "id": 302124316,
        "sender_full_name": "Robert Soeldner",
        "timestamp": 1664822255
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"kp\">assumes</span><span class=\"w\"> </span><span class=\"s\">‹card (P :: nat set set) ≥ 2›</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"s\">‹disjoint P›</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"kp\">shows</span><span class=\"w\"> </span><span class=\"s\">‹⋂P = {}›</span><span class=\"w\"></span>\n<span class=\"k\">proof</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"s\">‹finite P›</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">assms</span><span class=\"o\">(</span><span class=\"n\">1</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">le_simps</span><span class=\"o\">(</span><span class=\"n\">2</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">force</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"k\">obtain</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"n\">P'</span><span class=\"w\"> </span><span class=\"kp\">where</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">H</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">‹a ≠ b›</span><span class=\"w\"> </span><span class=\"s\">‹a ∉ P'›</span><span class=\"w\"> </span><span class=\"s\">‹b ∉ P'›</span><span class=\"w\"> </span><span class=\"kp\">and</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">P</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">‹P = {a,b} ∪ P'›</span><span class=\"w\"> </span><span class=\"kp\">and</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">fin</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">‹finite P'›</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">assms</span><span class=\"w\"> </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">induction</span><span class=\"w\"> </span><span class=\"n\">P</span><span class=\"w\"> </span><span class=\"n\">rule</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">finite_induct</span><span class=\"o\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">subgoal</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">auto</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">subgoal</span><span class=\"w\"> </span><span class=\"n\">premises</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"kp\">for</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"n\">auto</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">induction</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"n\">rule</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">finite_induct</span><span class=\"o\">)</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"o\">(</span><span class=\"n\">auto</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">metis</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">metis</span><span class=\"o\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">done</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">thesis</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">fin</span><span class=\"w\"> </span><span class=\"n\">H</span><span class=\"w\"> </span><span class=\"n\">assms</span><span class=\"o\">(</span><span class=\"n\">2</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"k\">unfolding</span><span class=\"w\"> </span><span class=\"n\">P</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">induction</span><span class=\"w\"> </span><span class=\"n\">P'</span><span class=\"w\"> </span><span class=\"n\">rule</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">finite_induct</span><span class=\"o\">)</span><span class=\"w\"></span>\n<span class=\"w\">     </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">auto</span><span class=\"w\"> </span><span class=\"n\">simp</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">disjoint_def</span><span class=\"o\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">done</span><span class=\"w\"></span>\n<span class=\"k\">qed</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 302125579,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1664822677
    },
    {
        "content": "<p>so it holds actually, it is really a wrong counterexample</p>",
        "id": 302125798,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1664822749
    },
    {
        "content": "<p>(the proof can clearly be improved… <code>auto, metis, metis</code> is a don't do that)</p>",
        "id": 302125911,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1664822778
    },
    {
        "content": "<p>(and the obtain a b should actually come from two case distinctions… but the default case distinction is missing the <code>a ∉ P'</code> in the assumption)</p>",
        "id": 302127014,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1664823106
    },
    {
        "content": "<p>Thank you! Actually, the counterexample drove me crazy.  Very hard for me to distinguish and identify the issue. Highly appreciate your support here :-)</p>",
        "id": 302127433,
        "sender_full_name": "Robert Soeldner",
        "timestamp": 1664823242
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"403618\">Robert Soeldner</span> has marked this topic as resolved.</p>",
        "id": 302127471,
        "sender_full_name": "Notification Bot",
        "timestamp": 1664823246
    },
    {
        "content": "<p>Usually when you see \"potentially spurious counterexample\", the counterexample is really spurious</p>",
        "id": 302130576,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1664824257
    },
    {
        "content": "<p>Note that disjoint_family_on is often better than disjoint</p>",
        "id": 303172866,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1665350520
    },
    {
        "content": "<p>I.e. working with indexed families of sets instead of sets of sets</p>",
        "id": 303172911,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1665350538
    }
]