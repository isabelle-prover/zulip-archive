[
    {
        "content": "<p>Hello,</p>\n<p>In the theory I am currently working on, I found myself frequently having to prove <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><mo>=</mo><mi>B</mi></mrow><annotation encoding=\"application/x-tex\">A = B</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span></span></span></span> where <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">A</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">A</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>B</mi></mrow><annotation encoding=\"application/x-tex\">B</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span></span></span></span> are sets. Here is how I did it</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">what_i_do</span><span class=\"o\">:</span> <span class=\"s\">\"(A::'a set) = B\"</span>\n<span class=\"k\">proof</span>\n  <span class=\"k\">show</span> <span class=\"s\">\"A ⊆ B\"</span>\n  <span class=\"k\">proof</span>\n    <span class=\"k\">fix</span> <span class=\"n\">x</span>\n    <span class=\"k\">assume</span> <span class=\"s\">\"x ∈ A\"</span>\n    <span class=\"k\">show</span> <span class=\"s\">\"x ∈ B\"</span> <span class=\"gr\">sorry</span>\n  <span class=\"k\">qed</span>\n<span class=\"k\">next</span>\n  <span class=\"k\">show</span> <span class=\"s\">\"B ⊆ A\"</span>\n  <span class=\"k\">proof</span>\n    <span class=\"k\">fix</span> <span class=\"n\">x</span>\n    <span class=\"k\">assume</span> <span class=\"s\">\"x ∈ B\"</span>\n    <span class=\"k\">show</span> <span class=\"s\">\"x ∈ A\"</span> <span class=\"gr\">sorry</span>\n  <span class=\"k\">qed</span>\n<span class=\"k\">qed</span>\n</code></pre></div>\n<p>I find this approach really heavy but I need the two sides decomposition, so I added the following:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">shortcut</span><span class=\"o\">:</span>\n  <span class=\"kp\">assumes</span> <span class=\"s\">\"⋀x. x∈A ⟹ x∈B\"</span> <span class=\"kp\">and</span>\n    <span class=\"s\">\"⋀x. x∈B ⟹ x∈A\"</span>\n  <span class=\"kp\">shows</span> <span class=\"s\">\"A = B\"</span>\n  <span class=\"k\">using</span> <span class=\"n\">assms</span> <span class=\"k\">by</span> <span class=\"n\">fastforce</span>\n</code></pre></div>\n<p>This allows me to write instead:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">what_i_want_to_do</span><span class=\"o\">:</span> <span class=\"s\">\"(A::'a set) = B\"</span>\n<span class=\"k\">proof</span> <span class=\"o\">(</span><span class=\"n\">rule</span> <span class=\"n\">shortcut</span><span class=\"o\">)</span>\n  <span class=\"k\">fix</span> <span class=\"n\">x</span>\n  <span class=\"k\">assume</span> <span class=\"s\">\"x ∈ A\"</span>\n  <span class=\"k\">show</span> <span class=\"s\">\"x ∈ B\"</span> <span class=\"gr\">sorry</span>\n<span class=\"k\">next</span>\n  <span class=\"k\">fix</span> <span class=\"n\">x</span>\n  <span class=\"k\">assume</span> <span class=\"s\">\"x ∈ B\"</span>\n  <span class=\"k\">show</span> <span class=\"s\">\"x ∈ A\"</span> <span class=\"gr\">sorry</span>\n<span class=\"k\">qed</span>\n</code></pre></div>\n<p>My question is: can I achieve the same thing using existing rules instead of my ad-hoc \"shortcut\"?</p>",
        "id": 249898590,
        "sender_full_name": "Sophie Tourret",
        "timestamp": 1629314052
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">proof</span> <span class=\"o\">(</span><span class=\"n\">intro</span> <span class=\"n\">equalityI</span> <span class=\"n\">subsetI</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 249899140,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1629314338
    },
    {
        "content": "<p>Thanks! How did you find it? Is there a way to see what is applied by the default \"proof\" (or is it just experience)?</p>",
        "id": 249899520,
        "sender_full_name": "Sophie Tourret",
        "timestamp": 1629314529
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"419556\">Sophie Tourret</span> has marked this topic as resolved.</p>",
        "id": 249902574,
        "sender_full_name": "Notification Bot",
        "timestamp": 1629316104
    },
    {
        "content": "<p>I think it's just experience. You can use <code>find_theorems</code> to search for theorems that you think ought to be there.</p>",
        "id": 249903465,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1629316552
    },
    {
        "content": "<p>I don't remember the exact rule for what <code>proof</code> does; I think it uses the <code>standard</code> method, which does a bunch of things. In particular, it can apply any one rule that is marked as an <code>intro</code> rule, which is the case for <code>equalityI</code>.</p>",
        "id": 249903596,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1629316624
    },
    {
        "content": "<p>You can also do <code>proof safe</code>. The method <code>safe</code> applies any introduction rule marked as safe (i.e. that supposedly does not turn provable goal states into unprovable ones). This includes, in particular, things like introduction rules for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>∧</mo><mi mathvariant=\"normal\">∀</mi><mo>⊆</mo></mrow><annotation encoding=\"application/x-tex\">\\wedge \\forall \\subseteq</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83041em;vertical-align:-0.13597em;\"></span><span class=\"mord\">∧</span><span class=\"mord\">∀</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">⊆</span></span></span></span> and implication. But sometimes it does a bit too much for my taste, that's why I often prefer the <code>intro</code> method with explicit introduction rules.</p>",
        "id": 249903854,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1629316750
    },
    {
        "content": "<p>Basically, every logical connective (and many other predicates) has one or more introduction rule that you can use to prove it, and applying these is often a good way to start off a proof.</p>",
        "id": 249904035,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1629316816
    },
    {
        "content": "<p>These are usually called <code>&lt;name of the predicate&gt;I</code>, e.g. <code>conjI</code>, <code>allI</code>, <code>impI</code>.</p>",
        "id": 249904090,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1629316838
    }
]