[
    {
        "content": "<p>Why does <code>by (simp add: assms)</code>work here, but <code>using assms by simp</code> would not work?</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span>\n  <span class=\"kp\">fixes</span> <span class=\"n\">f</span> <span class=\"o\">::</span> <span class=\"s\">\"'a ⇒ 'a ⇒ 'a\"</span> <span class=\"o\">(</span><span class=\"kp\">infixr</span> <span class=\"s\">\"⊕\"</span> <span class=\"n\">80</span><span class=\"o\">)</span>\n    <span class=\"kp\">and</span> <span class=\"n\">e</span> <span class=\"o\">::</span> <span class=\"n n-Type\">'a</span>\n  <span class=\"kp\">assumes</span> <span class=\"s\">\"∀x. ∀y. x ⊕ y = y ⊕ x\"</span>\n    <span class=\"kp\">and</span> <span class=\"s\">\"∀x. ∀y. ∀z. x ⊕ (y ⊕ z) = (x ⊕ y) ⊕ z\"</span>\n    <span class=\"kp\">and</span> <span class=\"s\">\"∀x. e ⊕ x = x\"</span>\n  <span class=\"kp\">shows</span> <span class=\"s\">\"u ⊕ v = e ⟶ (v ⊕ w) ⊕ u = w\"</span>\n  <span class=\"k\">by</span> <span class=\"o\">(</span><span class=\"n\">simp</span> <span class=\"n\">add</span><span class=\"o\">:</span> <span class=\"n\">assms</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 285240933,
        "sender_full_name": "waynee95",
        "timestamp": 1654604199
    },
    {
        "content": "<p>Compare</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span>\n  <span class=\"kp\">fixes</span> <span class=\"n\">f</span> <span class=\"o\">::</span> <span class=\"s\">\"'a ⇒ 'a ⇒ 'a\"</span> <span class=\"o\">(</span><span class=\"kp\">infixr</span> <span class=\"s\">\"⊕\"</span> <span class=\"n\">80</span><span class=\"o\">)</span>\n    <span class=\"kp\">and</span> <span class=\"n\">e</span> <span class=\"o\">::</span> <span class=\"n n-Type\">'a</span>\n  <span class=\"kp\">assumes</span> <span class=\"s\">\"⋀x y. x ⊕ y = y ⊕ x\"</span>\n    <span class=\"kp\">and</span> <span class=\"s\">\"⋀ x y z. x ⊕ (y ⊕ z) = (x ⊕ y) ⊕ z\"</span>\n    <span class=\"kp\">and</span> <span class=\"s\">\"⋀x. e ⊕ x = x\"</span>\n  <span class=\"kp\">shows</span> <span class=\"s\">\"u ⊕ v = e ⟶ (v ⊕ w) ⊕ u = w\"</span>\n  <span class=\"n\">supply</span> <span class=\"o\">[[</span><span class=\"n\">simp_trace_new</span><span class=\"o\">,</span><span class=\"n\">simp_trace_depth_limit</span><span class=\"o\">=</span><span class=\"n\">5</span><span class=\"o\">]]</span>\n  <span class=\"k\">using</span> <span class=\"n\">assms</span> <span class=\"kp\">apply</span> <span class=\"o\">(</span><span class=\"n\">simp</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>with:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span>\n  <span class=\"kp\">fixes</span> <span class=\"n\">f</span> <span class=\"o\">::</span> <span class=\"s\">\"'a ⇒ 'a ⇒ 'a\"</span> <span class=\"o\">(</span><span class=\"kp\">infixr</span> <span class=\"s\">\"⊕\"</span> <span class=\"n\">80</span><span class=\"o\">)</span>\n    <span class=\"kp\">and</span> <span class=\"n\">e</span> <span class=\"o\">::</span> <span class=\"n n-Type\">'a</span>\n  <span class=\"kp\">assumes</span> <span class=\"s\">\"⋀x y. x ⊕ y = y ⊕ x\"</span>\n    <span class=\"kp\">and</span> <span class=\"s\">\"⋀ x y z. x ⊕ (y ⊕ z) = (x ⊕ y) ⊕ z\"</span>\n    <span class=\"kp\">and</span> <span class=\"s\">\"⋀x. e ⊕ x = x\"</span>\n  <span class=\"kp\">shows</span> <span class=\"s\">\"u ⊕ v = e ⟶ (v ⊕ w) ⊕ u = w\"</span>\n  <span class=\"n\">supply</span> <span class=\"o\">[[</span><span class=\"n\">simp_trace_new</span><span class=\"o\">,</span><span class=\"n\">simp_trace_depth_limit</span><span class=\"o\">=</span><span class=\"n\">5</span><span class=\"o\">]]</span>\n  <span class=\"k\">using</span> <span class=\"n\">assms</span> <span class=\"kp\">apply</span> <span class=\"o\">(</span><span class=\"n\">simp</span> <span class=\"o\">(</span><span class=\"n\">no_asm_simp</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>With <code>using assms</code> \"x ⊕ (y ⊕ z) = (x ⊕ y) ⊕ z\" gets inverted because <code>x ⊕ (y ⊕ z)</code> is the more natural version, which cannot happen with `(simp add: assms)</p>\n<p>(Trigger Warning: please immediately forget the existence of <code>no_asm_simp</code> and do not ever use it)</p>",
        "id": 285243119,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1654605322
    },
    {
        "content": "<p>I see. For most proofs I did so far both ways always worked that's why I was confused here. Is there any documentation that explains why <code>using</code> does this?</p>",
        "id": 285244343,
        "sender_full_name": "waynee95",
        "timestamp": 1654605937
    },
    {
        "content": "<p>In its default setup, the simplifier picks up premises of your goal and adds them to the simpset. This is so that if e.g. you have something like <code>∀x. f x = g x ⟶ P x</code> and you do <code>auto</code> (which results in you getting a premise <code>f x = g x</code> in the goal), the simplifier will use <code>f x = g x</code> for rewriting.</p>",
        "id": 285272542,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1654617221
    },
    {
        "content": "<p>There is some heuristic that figures out whether to flip the equation when it gets picked up; e.g. if you have something like <code>f a b c = x</code> (where the right-hand side is just a variable and the left-hand side is something more complicated) you typically want to flip the equation for rewriting for the best effect.</p>",
        "id": 285272731,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1654617276
    },
    {
        "content": "<p>The <code>using</code> command really just sets up the facts you give to it as \"chained facts\" (i.e. they get \"chained into\" the proof method, in this case <code>simp</code>). Most proof methods (like <code>simp</code>) simply add the chained facts to the goal as premises.</p>",
        "id": 285272871,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1654617333
    },
    {
        "content": "<p>If you, on the other hand, do <code>simp add:</code> there is no reorientation going on; it just uses the rules in the form that you give it to it as rewrite rules.</p>",
        "id": 285273023,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1654617373
    },
    {
        "content": "<p>(Well, more or less – it still does things like if you give it a rule like <code>P</code> it turns it into <code>P = True</code> and similarly for <code>¬P</code>)</p>",
        "id": 285273104,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1654617406
    },
    {
        "content": "<p>So the take-away message here is: If you have facts that make good rewrite rules, do <code>simp add:</code> and not <code>using</code>.</p>",
        "id": 285273196,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1654617442
    },
    {
        "content": "<p>This also keeps your goal state cleaner; if you do <code>using</code> to chain in a lot of facts, it will make your goal state very big and unreadable.</p>",
        "id": 285273249,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1654617464
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232736\">@Manuel Eberl</span> Thanks for the explanation. I didn't really know about the implications of using either style. I will keep that in mind!</p>",
        "id": 285304796,
        "sender_full_name": "waynee95",
        "timestamp": 1654631347
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"424814\">waynee95</span> has marked this topic as resolved.</p>",
        "id": 285305150,
        "sender_full_name": "Notification Bot",
        "timestamp": 1654631558
    }
]