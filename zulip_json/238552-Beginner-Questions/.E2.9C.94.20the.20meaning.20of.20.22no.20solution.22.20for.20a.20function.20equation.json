[
    {
        "content": "<p>I have read this interesting blog<br>\n<a href=\"https://www.joachim-breitner.de/blog/732-Isabelle_functions__Always_total%2C_sometimes_undefined#cb10-2\">https://www.joachim-breitner.de/blog/732-Isabelle_functions__Always_total%2C_sometimes_undefined#cb10-2</a><br>\nabout Isabelle functions being total.<br>\nI am just a bit puzzed at the section \"non-terminating functions are also just underspecified\"<br>\nand \"not all function specifications are ok\"</p>\n<p>To me, <br>\n<code> fixpoint (λb. ¬b) True = fixpoint (λb. ¬b) False</code><br>\nand <br>\n<code> bogus () = Suc (bogus ())</code><br>\nare both non-terminating equations with no solution.<br>\nWhy is the fixpoint function allowed and the other not?</p>",
        "id": 250030463,
        "sender_full_name": "Chengsong Tan",
        "timestamp": 1629399118
    },
    {
        "content": "<p>For tail-recursive specifications like <code>fixpoint f x = fixpoint f (f x)</code>, you can always find a consistent solution, e.g. by simply returning some dummy value (like <code>undefined</code>) if it doesn't terminate. For non-tail-recursive ones like <code>bogus () = Suc (bogus ())</code>, this is generally not possible.</p>",
        "id": 250035258,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1629400672
    },
    {
        "content": "<p>There's probably more theory behind this that tells you when this is okay and when it isn't – perhaps domain theory? I don't know enough about that to be able to say…</p>",
        "id": 250035353,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1629400698
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232736\">Manuel Eberl</span> <a href=\"#narrow/stream/238552-Beginner-Questions/topic/the.20meaning.20of.20.22no.20solution.22.20for.20a.20function.20equation/near/250035258\">said</a>:</p>\n<blockquote>\n<p>For tail-recursive specifications like <code>fixpoint f x = fixpoint f (f x)</code>, you can always find a consistent solution, e.g. by simply returning some dummy value (like <code>undefined</code>) if it doesn't terminate. For non-tail-recursive ones like <code>bogus () = Suc (bogus ())</code>, this is generally not possible.</p>\n</blockquote>\n<p>Thank you!<br>\nSo the main difference here is whether the function is tail-recursive or not?<br>\nTo me <code>fixpoint f _ = undefined</code><br>\nand <code>bogus _ = undefined</code> seem both valid solutions.</p>",
        "id": 250036509,
        "sender_full_name": "Chengsong Tan",
        "timestamp": 1629401156
    },
    {
        "content": "<p>No, the important thing to understand is that <code>undefined</code> is <em>not</em> some special value that lives outside the normal type universe (like <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">⊥</mi></mrow><annotation encoding=\"application/x-tex\">\\bot</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord\">⊥</span></span></span></span> in Haskell). It is a value inside the type, you just don't know which one.</p>",
        "id": 250036625,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1629401204
    },
    {
        "content": "<p>e.g. for Booleans, <code>undefined = True ∨ undefined = False</code> is provable, but <code>undefined = True</code> and <code>undefined = False</code> individually are not.</p>",
        "id": 250036692,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1629401240
    },
    {
        "content": "<p>That means that <code>bogus _ = undefined</code> is <em>not</em> a valid solution because then one would have to have <code>undefined = Suc undefined</code>, which is false because <code>x ≠ Suc x</code> holds for all natural numbers.</p>",
        "id": 250036766,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1629401280
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232736\">Manuel Eberl</span> <a href=\"#narrow/stream/238552-Beginner-Questions/topic/the.20meaning.20of.20.22no.20solution.22.20for.20a.20function.20equation/near/250035353\">said</a>:</p>\n<blockquote>\n<p>There's probably more theory behind this that tells you when this is okay and when it isn't – perhaps domain theory? I don't know enough about that to be able to say…</p>\n</blockquote>\n<p>This reminds me of series in calculus.<br>\nBoth 1 0 1 0 1 and <br>\n1 2 3 4 5 ........<br>\nare divergent series.</p>",
        "id": 250036786,
        "sender_full_name": "Chengsong Tan",
        "timestamp": 1629401283
    },
    {
        "content": "<p>Ah the above is a bad analogy.<br>\nIt breaks down for the example<br>\n<code>bogus2 n = bogus2 n+1</code><br>\nwhich has the solution <code>bogus2 _ = undefined</code><br>\nAnd <br>\n<code>partial_function (tailrec) bogus::\"nat ⇒ nat\" where\n\"bogus n =  bogus (Suc n)\"\n</code><br>\nis permitted by Isabelle (since it is tail-recursive).</p>",
        "id": 250039986,
        "sender_full_name": "Chengsong Tan",
        "timestamp": 1629402661
    },
    {
        "content": "<p>Note that when you have a lattice structure on your result, you can also do non-\"terminating\" definitions if your step function is monotonic. E.g. for the extended natural numbers (i.e. natural numbers + ∞) you can define <code>f = f + 1</code> and that gives you <code>f = ∞</code>. Not with the function package though.</p>",
        "id": 250041089,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1629403124
    },
    {
        "content": "<p>If I recall correctly, the reason is that the existence of a unique least fixed point is guaranteed by the Knaster–Tarski theorem in such settings.</p>",
        "id": 250041204,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1629403176
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"241231\">Chengsong Tan</span> has marked this topic as resolved.</p>",
        "id": 250137180,
        "sender_full_name": "Notification Bot",
        "timestamp": 1629475155
    }
]