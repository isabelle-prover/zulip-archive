[
    {
        "content": "<p>I'm trying to show something about a small example; I have a set of 4 \"points\" and 6 \"lines\" -- each line consists of two of the points. I'd like to prove something about all six lines, and I'd like to do it by considering them one at a time. I haven't found a \"cases\" variant that lets me do this. Here's the setup and the place where I get stuck,  marked with a comment. </p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">theory</span><span class=\"w\"> </span><span class=\"n\">AffineExample</span>\n<span class=\"w\">  </span><span class=\"kp\">imports</span><span class=\"w\"> </span><span class=\"n\">Complex_Main</span>\n<span class=\"w\">    </span><span class=\"k\">begin</span>\n\n<span class=\"k\">datatype</span><span class=\"w\"> </span><span class=\"n\">a4pt</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Pa</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Qa</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Ra</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Sa</span>\n<span class=\"k\">definition</span><span class=\"w\">  </span><span class=\"s\">\"A4Points = {Pa, Qa, Ra, Sa}\"</span>\n<span class=\"k\">definition</span><span class=\"w\"> </span><span class=\"s\">\"A4PQ = {Pa, Qa}\"</span>\n<span class=\"k\">definition</span><span class=\"w\"> </span><span class=\"s\">\"A4PR = {Pa, Ra}\"</span>\n<span class=\"k\">definition</span><span class=\"w\"> </span><span class=\"s\">\"A4PS = {Pa, Sa}\"</span>\n<span class=\"k\">definition</span><span class=\"w\"> </span><span class=\"s\">\"A4QR = {Qa, Ra}\"</span>\n<span class=\"k\">definition</span><span class=\"w\"> </span><span class=\"s\">\"A4QS = {Qa, Sa}\"</span>\n<span class=\"k\">definition</span><span class=\"w\"> </span><span class=\"s\">\"A4RS = {Ra, Sa}\"</span>\n\n<span class=\"k\">definition</span><span class=\"w\"> </span><span class=\"s\">\"A4Lines = {A4PQ, A4PR, A4PS, A4QR, A4QS, A4RS}\"</span>\n\n<span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">parallel</span><span class=\"o\">::</span><span class=\"s\">\"a4pt set ⇒ a4pt set ⇒ bool\"</span><span class=\"w\"> </span><span class=\"kp\">where</span>\n<span class=\"s\">\"parallel l m  =  (if (l ∈ A4Lines ∧ m ∈ A4Lines)</span>\n<span class=\"s\">  then l = m ∨ (l ∩ m = {}) else undefined)\"</span>\n\n<span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">A4complement</span><span class=\"o\">::</span><span class=\"s\">\"a4pt set ⇒ a4pt set\"</span><span class=\"w\"> </span><span class=\"kp\">where</span>\n<span class=\"s\">\"A4complement n = (if n = A4PQ then A4RS else</span>\n<span class=\"s\">(if n = A4RS then A4PQ else</span>\n<span class=\"s\">(if n = A4PR then A4QS else</span>\n<span class=\"s\">(if n = A4QS then A4PR else</span>\n<span class=\"s\">(if n = A4PS then A4QR else</span>\n<span class=\"s\">(if n = A4QR then A4PS else</span>\n<span class=\"s\">undefined))))))\"</span>\n\n<span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">A4complement_parallel</span><span class=\"o\">:</span>\n<span class=\"w\">  </span><span class=\"kp\">fixes</span><span class=\"w\"> </span><span class=\"n\">n</span>\n<span class=\"w\">  </span><span class=\"kp\">assumes</span><span class=\"w\"> </span><span class=\"s\">\"n ∈ A4Lines\"</span>\n<span class=\"w\">  </span><span class=\"kp\">shows</span><span class=\"w\"> </span><span class=\"s\">\"parallel (A4complement n) n\"</span>\n<span class=\"w\">  </span><span class=\"gr\">sorry</span>\n<span class=\"c\">(* I'd like to say \"let's consider each possible value of n, namely A4PQ, A4PR, A4PS, etc\" and show the conclusion</span>\n<span class=\"c\">for each of these, i.e., do a \"cases\" on the enumerated values in the set A4Lines. *)</span>\n\n<span class=\"k\">end</span>\n</code></pre></div>\n<p>Any suggestions on a clean way to do such a proof?  </p>\n<p>NB: There are probably better ways to do the overall proof than by considering cases, but I'm asking about <em>this</em> approach because sometimes, in the work I'm doing, a plug-n-chug kind of approach really does make sense, so I really am interested in the question I asked. If you have a great alternative approach to the proof, I'd love to see it, of course, but my main question is about this kind of case-construction.</p>",
        "id": 435469368,
        "sender_full_name": "John  Hughes",
        "timestamp": 1714079814
    },
    {
        "content": "<p>You can also make your lines a datatype and give an interpretation function <code>points</code>. Then everything is much simpler:<br>\n(and I added proper intro and elim rules for your <code>parallel</code> definition)</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">datatype</span><span class=\"w\"> </span><span class=\"n\">a4pt</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Pa</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Qa</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Ra</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Sa</span>\n<span class=\"k\">datatype</span><span class=\"w\"> </span><span class=\"n\">a4line</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">A4PQ</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">A4PR</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">A4PS</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">A4QR</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">A4QS</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">A4RS</span>\n\n<span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">points</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"a4line ⇒ a4pt set\"</span><span class=\"w\"> </span><span class=\"kp\">where</span>\n<span class=\"w\">  </span><span class=\"s\">\"points A4PQ = {Pa, Qa}\"</span>\n<span class=\"o\">|</span><span class=\"w\"> </span><span class=\"s\">\"points A4PR = {Pa, Ra}\"</span>\n<span class=\"o\">|</span><span class=\"w\"> </span><span class=\"s\">\"points A4PS = {Pa, Sa}\"</span>\n<span class=\"o\">|</span><span class=\"w\"> </span><span class=\"s\">\"points A4QR = {Qa, Ra}\"</span>\n<span class=\"o\">|</span><span class=\"w\"> </span><span class=\"s\">\"points A4QS = {Qa, Sa}\"</span>\n<span class=\"o\">|</span><span class=\"w\"> </span><span class=\"s\">\"points A4RS = {Ra, Sa}\"</span>\n\n<span class=\"k\">definition</span><span class=\"w\"> </span><span class=\"s\">\"parallel l m ≡ l = m ∨ (points l ∩ points m = {})\"</span>\n\n<span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">parallel_self</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">iff</span><span class=\"o\">]:</span><span class=\"w\"> </span><span class=\"s\">\"parallel l l\"</span>\n<span class=\"w\">  </span><span class=\"k\">unfolding</span><span class=\"w\"> </span><span class=\"n\">parallel_def</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">simp</span>\n\n<span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">parallel_if_points_inter_eq_emptyI</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">intro</span><span class=\"o\">]:</span>\n<span class=\"w\">  </span><span class=\"kp\">assumes</span><span class=\"w\"> </span><span class=\"s\">\"points l ∩ points m = {}\"</span>\n<span class=\"w\">  </span><span class=\"kp\">shows</span><span class=\"w\"> </span><span class=\"s\">\"parallel l m\"</span>\n<span class=\"w\">  </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">assms</span><span class=\"w\"> </span><span class=\"k\">unfolding</span><span class=\"w\"> </span><span class=\"n\">parallel_def</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">simp</span>\n\n<span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">parallelE</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">elim</span><span class=\"o\">]:</span>\n<span class=\"w\">  </span><span class=\"kp\">assumes</span><span class=\"w\"> </span><span class=\"s\">\"parallel l m\"</span>\n<span class=\"w\">  </span><span class=\"kp\">obtains</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">eq</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"s\">\"l = m\"</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">disjoint</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"s\">\"points l ∩ points m = {}\"</span>\n<span class=\"w\">  </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">assms</span><span class=\"w\"> </span><span class=\"k\">unfolding</span><span class=\"w\"> </span><span class=\"n\">parallel_def</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">auto</span>\n\n<span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">A4complement</span><span class=\"o\">::</span><span class=\"s\">\"a4line ⇒ a4line\"</span><span class=\"w\"> </span><span class=\"kp\">where</span>\n<span class=\"w\">  </span><span class=\"s\">\"A4complement A4PQ = A4RS\"</span>\n<span class=\"o\">|</span><span class=\"w\"> </span><span class=\"s\">\"A4complement A4RS = A4PQ\"</span>\n<span class=\"o\">|</span><span class=\"w\"> </span><span class=\"s\">\"A4complement A4PR = A4QS\"</span>\n<span class=\"o\">|</span><span class=\"w\"> </span><span class=\"s\">\"A4complement A4QS = A4PR\"</span>\n<span class=\"o\">|</span><span class=\"w\"> </span><span class=\"s\">\"A4complement A4PS = A4QR\"</span>\n<span class=\"o\">|</span><span class=\"w\"> </span><span class=\"s\">\"A4complement A4QR = A4PS\"</span>\n\n<span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">A4complement_parallel</span><span class=\"o\">:</span>\n<span class=\"w\">  </span><span class=\"kp\">shows</span><span class=\"w\"> </span><span class=\"s\">\"parallel (A4complement n) n\"</span>\n<span class=\"w\">  </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">cases</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">auto</span>\n</code></pre></div>\n<p>I'd also recommend using something other than sets if <code>points</code> should always return exactly two points.</p>",
        "id": 435531148,
        "sender_full_name": "Kevin Kappelmann",
        "timestamp": 1714116837
    },
    {
        "content": "<blockquote>\n<p>You can also make your lines a datatype and give an interpretation function <code>points</code>. Then everything is much simpler:<br>\n(and I added proper intro and elim rules for your <code>parallel</code> definition)</p>\n<p>Thanks very much. I've been  struggling with this for hours. </p>\n<p>Indeed, that is a great deal simpler. I'm still interested in the question of how to prove that forall x in S, Q(x) by iterating through the elements s of S showing  Q(s) for each one. You've avoided that by shuffling things around to a situation where the set S in fact consists of all items of some <em>type</em>, at which point a nice \"cases\" approach works.</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">datatype</span><span class=\"w\"> </span><span class=\"n\">a4pt</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Pa</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Qa</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Ra</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Sa</span>\n<span class=\"k\">datatype</span><span class=\"w\"> </span><span class=\"n\">a4line</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">A4PQ</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">A4PR</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">A4PS</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">A4QR</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">A4QS</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">A4RS</span>\n\n<span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">points</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"a4line ⇒ a4pt set\"</span><span class=\"w\"> </span><span class=\"kp\">where</span>\n<span class=\"w\">  </span><span class=\"s\">\"points A4PQ = {Pa, Qa}\"</span>\n<span class=\"o\">|</span><span class=\"w\"> </span><span class=\"s\">\"points A4PR = {Pa, Ra}\"</span>\n<span class=\"o\">|</span><span class=\"w\"> </span><span class=\"s\">\"points A4PS = {Pa, Sa}\"</span>\n<span class=\"o\">|</span><span class=\"w\"> </span><span class=\"s\">\"points A4QR = {Qa, Ra}\"</span>\n<span class=\"o\">|</span><span class=\"w\"> </span><span class=\"s\">\"points A4QS = {Qa, Sa}\"</span>\n<span class=\"o\">|</span><span class=\"w\"> </span><span class=\"s\">\"points A4RS = {Ra, Sa}\"</span>\n\n<span class=\"k\">definition</span><span class=\"w\"> </span><span class=\"s\">\"parallel l m ≡ l = m ∨ (points l ∩ points m = {})\"</span>\n\n<span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">parallel_self</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">iff</span><span class=\"o\">]:</span><span class=\"w\"> </span><span class=\"s\">\"parallel l l\"</span>\n<span class=\"w\">  </span><span class=\"k\">unfolding</span><span class=\"w\"> </span><span class=\"n\">parallel_def</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">simp</span>\n\n<span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">parallel_if_points_inter_eq_emptyI</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">intro</span><span class=\"o\">]:</span>\n<span class=\"w\">  </span><span class=\"kp\">assumes</span><span class=\"w\"> </span><span class=\"s\">\"points l ∩ points m = {}\"</span>\n<span class=\"w\">  </span><span class=\"kp\">shows</span><span class=\"w\"> </span><span class=\"s\">\"parallel l m\"</span>\n<span class=\"w\">  </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">assms</span><span class=\"w\"> </span><span class=\"k\">unfolding</span><span class=\"w\"> </span><span class=\"n\">parallel_def</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">simp</span>\n\n<span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">parallelE</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">elim</span><span class=\"o\">]:</span>\n<span class=\"w\">  </span><span class=\"kp\">assumes</span><span class=\"w\"> </span><span class=\"s\">\"parallel l m\"</span>\n<span class=\"w\">  </span><span class=\"kp\">obtains</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">eq</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"s\">\"l = m\"</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">disjoint</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"s\">\"points l ∩ points m = {}\"</span>\n<span class=\"w\">  </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">assms</span><span class=\"w\"> </span><span class=\"k\">unfolding</span><span class=\"w\"> </span><span class=\"n\">parallel_def</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">auto</span>\n\n<span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">A4complement</span><span class=\"o\">::</span><span class=\"s\">\"a4line ⇒ a4line\"</span><span class=\"w\"> </span><span class=\"kp\">where</span>\n<span class=\"w\">  </span><span class=\"s\">\"A4complement A4PQ = A4RS\"</span>\n<span class=\"o\">|</span><span class=\"w\"> </span><span class=\"s\">\"A4complement A4RS = A4PQ\"</span>\n<span class=\"o\">|</span><span class=\"w\"> </span><span class=\"s\">\"A4complement A4PR = A4QS\"</span>\n<span class=\"o\">|</span><span class=\"w\"> </span><span class=\"s\">\"A4complement A4QS = A4PR\"</span>\n<span class=\"o\">|</span><span class=\"w\"> </span><span class=\"s\">\"A4complement A4PS = A4QR\"</span>\n<span class=\"o\">|</span><span class=\"w\"> </span><span class=\"s\">\"A4complement A4QR = A4PS\"</span>\n\n<span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">A4complement_parallel</span><span class=\"o\">:</span>\n<span class=\"w\">  </span><span class=\"kp\">shows</span><span class=\"w\"> </span><span class=\"s\">\"parallel (A4complement n) n\"</span>\n<span class=\"w\">  </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">cases</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">auto</span>\n</code></pre></div>\n<p>I'd also recommend using something other than sets if <code>points</code> should always return exactly two points.</p>\n</blockquote>\n<p>I confess that as a mathematician, being told \"Oh, don't use sets\" is a little offputting, since they are literally my bread and butter.  But I certainly see the point in this particular case. On the other hand, this particular theory file is working out the details of the only example of a finite affine plane in a textbook, so generalizing further doesn't make any sense. </p>\n<p>Can I ask one more related question? You've used \"unfolding\" in multiple places where I would have used \"using\". Thinking that I should learn the distinction, I looked at \"Programming and Proving\" ... where the word \"unfolding\" appears only twice, neither time with a clear description. For functions that are <em>not</em> recursive, am I right in thinking that the effect is more or less the same? Also: is it stylistically considered more appropriate to use \"unfolding\" for function-definitions, but just \"using\" in a case like <em>my</em>  attempt where I might say \"using A4PQ_def\" to get the details of some defined constant?</p>",
        "id": 435593995,
        "sender_full_name": "John  Hughes",
        "timestamp": 1714140493
    },
    {
        "content": "<p><code>using</code> adds the fact as an assumption for the following following proof method(s). <code>unfolding</code> is meant to be used to unfold definitions but can be used for any equations. If you use the simplifier after <code>using</code>, you might get the impression that they behave similarly but the effect is quite different.</p>",
        "id": 435757519,
        "sender_full_name": "Lukas Stevens",
        "timestamp": 1714224656
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"233155\">Lukas Stevens</span> <a href=\"#narrow/stream/238552-Beginner-Questions/topic/A.20.22cases.22-like.20construction.20that.20works.20through.20a.20small.20set/near/435757519\">said</a>:</p>\n<blockquote>\n<p><code>using</code> adds the fact as an assumption for the following following proof method(s). <code>unfolding</code> is meant to be used to unfold definitions but can be used for any equations. If you use the simplifier after <code>using</code>, you might get the impression that they behave similarly but the effect is quite different.</p>\n</blockquote>\n<p>I appreciate your answering, but to be honest, I don't really feel that I understand anything more after reading your answer. Can you perhaps elucidate a bit with an example?</p>\n<p>I have to confess, I don't entirely know what 'unfold' means, so saying that \"unfolding is mean to be used to unfold...\" isn't shedding any light. (I'd be quite happy with a pointer to read about this use of 'unfold'; it's just something I'm not familiar with.)</p>",
        "id": 435764772,
        "sender_full_name": "John  Hughes",
        "timestamp": 1714230563
    },
    {
        "content": "<p>Maybe look at the goal <em>before</em> and <em>after</em> the using/ unfolding  but <em>before</em> you apply the tactic. Then you will see the difference</p>",
        "id": 435774243,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1714238078
    },
    {
        "content": "<p>unfold manipulates the goal and directly unpeals definitions</p>",
        "id": 435774262,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1714238109
    },
    {
        "content": "<p>using just gives the information that the definition exists to the next tactic and that tactic must do things</p>",
        "id": 435774275,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1714238134
    },
    {
        "content": "<p>for simp this is rarely different, but blast does not know about equality so it does nothing with the definitions</p>",
        "id": 435774327,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1714238165
    },
    {
        "content": "<p>Thanks --- that's just what I needed.</p>",
        "id": 435797281,
        "sender_full_name": "John  Hughes",
        "timestamp": 1714260484
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"699541\">John  Hughes</span> <a href=\"#narrow/stream/238552-Beginner-Questions/topic/A.20.22cases.22-like.20construction.20that.20works.20through.20a.20small.20set/near/435593995\">said</a>:</p>\n<blockquote>\n<p>I confess that as a mathematician, being told \"Oh, don't use sets\" is a little offputting, since they are literally my bread and butter. But I certainly see the point in this particular case. On the other hand, this particular theory file is working out the details of the only example of a finite affine plane in a textbook, so generalizing further doesn't make any sense.</p>\n</blockquote>\n<p>If you really want to stick with sets, you can apply the elimination rule <code>insertE</code> repeatedly on your assumption <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mo>∈</mo><mi>A</mi><mn>4</mn><mi>L</mi><mi>i</mi><mi>n</mi><mi>e</mi><mi>s</mi></mrow><annotation encoding=\"application/x-tex\">n \\in A4Lines</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mord\">4</span><span class=\"mord mathnormal\">L</span><span class=\"mord mathnormal\">in</span><span class=\"mord mathnormal\">es</span></span></span></span> since finite set notation <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">{</mo><mi>x</mi><mo separator=\"true\">,</mo><mi>y</mi><mo separator=\"true\">,</mo><mi>z</mi><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">\\{x,y,z\\}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord mathnormal\">x</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span><span class=\"mclose\">}</span></span></span></span> is nothing more but fancy notation for <code>insert x (insert y (insert z {}))</code>.<br>\nThat's actually quite OK, as you can see in the proof below, looking at the state after applying the elimination rule. However, the next proof step is quite ugly: you need to unfold all definitions and supply another rule that breaks down an equality on finite sets into an equality on its members (+ a case distinction), as shown by rule <code>doubleton_eq_iff</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">A4complement_parallel</span><span class=\"o\">:</span>\n<span class=\"w\">  </span><span class=\"kp\">fixes</span><span class=\"w\"> </span><span class=\"n\">n</span>\n<span class=\"w\">  </span><span class=\"kp\">assumes</span><span class=\"w\"> </span><span class=\"s\">\"n ∈ A4Lines\"</span>\n<span class=\"w\">  </span><span class=\"kp\">shows</span><span class=\"w\"> </span><span class=\"s\">\"parallel (A4complement n) n\"</span>\n<span class=\"w\">  </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">assms</span><span class=\"w\"> </span><span class=\"k\">unfolding</span><span class=\"w\"> </span><span class=\"n\">A4Lines_def</span>\n<span class=\"w\">  </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">elim</span><span class=\"w\"> </span><span class=\"n\">insertE</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">simp_all</span><span class=\"w\"> </span><span class=\"n\">add</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">A4PQ_def</span><span class=\"w\"> </span><span class=\"n\">A4PR_def</span><span class=\"w\"> </span><span class=\"n\">A4PS_def</span><span class=\"w\"> </span><span class=\"n\">A4QR_def</span><span class=\"w\"> </span><span class=\"n\">A4QS_def</span><span class=\"w\"> </span><span class=\"n\">A4RS_def</span><span class=\"w\"> </span><span class=\"n\">A4Lines_def</span>\n<span class=\"w\">    </span><span class=\"n\">doubleton_eq_iff</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"k\">done</span>\n</code></pre></div>",
        "id": 436244978,
        "sender_full_name": "Kevin Kappelmann",
        "timestamp": 1714474940
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"233154\">Kevin Kappelmann</span> <a href=\"#narrow/stream/238552-Beginner-Questions/topic/A.20.22cases.22-like.20construction.20that.20works.20through.20a.20small.20set/near/436244978\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"699541\">John  Hughes</span> <a href=\"#narrow/stream/238552-Beginner-Questions/topic/A.20.22cases.22-like.20construction.20that.20works.20through.20a.20small.20set/near/435593995\">said</a>:</p>\n<blockquote>\n<p>I confess that as a mathematician, being told \"Oh, don't use sets\" is a little offputting, since they are literally my bread and butter. But I certainly see the point in this particular case. On the other hand, this particular theory file is working out the details of the only example of a finite affine plane in a textbook, so generalizing further doesn't make any sense.</p>\n</blockquote>\n<p>If you really want to stick with sets, you can apply the elimination rule <code>insertE</code> repeatedly on your assumption <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mo>∈</mo><mi>A</mi><mn>4</mn><mi>L</mi><mi>i</mi><mi>n</mi><mi>e</mi><mi>s</mi></mrow><annotation encoding=\"application/x-tex\">n \\in A4Lines</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mord\">4</span><span class=\"mord mathnormal\">L</span><span class=\"mord mathnormal\">in</span><span class=\"mord mathnormal\">es</span></span></span></span> since finite set notation <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">{</mo><mi>x</mi><mo separator=\"true\">,</mo><mi>y</mi><mo separator=\"true\">,</mo><mi>z</mi><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">\\{x,y,z\\}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord mathnormal\">x</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span><span class=\"mclose\">}</span></span></span></span> is nothing more but fancy notation for <code>insert x (insert y (insert z {}))</code>.<br>\nThat's actually quite OK, as you can see in the proof below, looking at the state after applying the elimination rule. However, the next proof step is quite ugly: you need to unfold all definitions and supply another rule that breaks down an equality on finite sets into an equality on its members (+ a case distinction), as shown by rule <code>doubleton_eq_iff</code>:</p>\n<p><div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">A4complement_parallel</span><span class=\"o\">:</span>\n<span class=\"w\">  </span><span class=\"kp\">fixes</span><span class=\"w\"> </span><span class=\"n\">n</span>\n<span class=\"w\">  </span><span class=\"kp\">assumes</span><span class=\"w\"> </span><span class=\"s\">\"n ∈ A4Lines\"</span>\n<span class=\"w\">  </span><span class=\"kp\">shows</span><span class=\"w\"> </span><span class=\"s\">\"parallel (A4complement n) n\"</span>\n<span class=\"w\">  </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">assms</span><span class=\"w\"> </span><span class=\"k\">unfolding</span><span class=\"w\"> </span><span class=\"n\">A4Lines_def</span>\n<span class=\"w\">  </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">elim</span><span class=\"w\"> </span><span class=\"n\">insertE</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">simp_all</span><span class=\"w\"> </span><span class=\"n\">add</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">A4PQ_def</span><span class=\"w\"> </span><span class=\"n\">A4PR_def</span><span class=\"w\"> </span><span class=\"n\">A4PS_def</span><span class=\"w\"> </span><span class=\"n\">A4QR_def</span><span class=\"w\"> </span><span class=\"n\">A4QS_def</span><span class=\"w\"> </span><span class=\"n\">A4RS_def</span><span class=\"w\"> </span><span class=\"n\">A4Lines_def</span>\n<span class=\"w\">    </span><span class=\"n\">doubleton_eq_iff</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"k\">done</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Thanks again. This explanation of finite-set notation helps explain why even proving {a, b} = {b, a} is nontrivial: Isabelle  needs to know that composition of insertions is commutative. For an 8-element set, for instance, that could take some real work.</p>",
        "id": 436263155,
        "sender_full_name": "John  Hughes",
        "timestamp": 1714481011
    },
    {
        "content": "<p>Proving that two finite sets written down fully explicitly is fortunately not <em>that</em> difficult in Isabelle. You can just give the commutativity rule for <code>insert</code> to the simplifier:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"s\">\"{a,b,c,d,e,f} = {e,c,f,d,b,a}\"</span>\n<span class=\"w\">  </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"n\">add</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">insert_commute</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Of course that only works if the automation can already simplify the elements in the set into a unique normal form.</p>",
        "id": 436534933,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1714581811
    }
]