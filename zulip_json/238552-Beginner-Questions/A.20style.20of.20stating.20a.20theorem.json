[
    {
        "content": "<p>In an ancient theory I see</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">MPair_parts</span><span class=\"o\">:</span>\n<span class=\"w\">     </span><span class=\"s\">\"[| ⦃X,Y⦄ ∈ parts H;</span>\n<span class=\"s\">         [| X ∈ parts H; Y ∈ parts H |] ==&gt; P |] ==&gt; P\"</span>\n</code></pre></div>\n<p>a more direct version of it could be</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"n\">⦃X</span><span class=\"o\">,</span><span class=\"n\">Y⦄</span><span class=\"w\"> </span><span class=\"n\">∈</span><span class=\"w\"> </span><span class=\"n\">parts</span><span class=\"w\"> </span><span class=\"n\">H</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"n\">&gt;</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"w\"> </span><span class=\"n\">∈</span><span class=\"w\"> </span><span class=\"n\">parts</span><span class=\"w\"> </span><span class=\"n\">H</span><span class=\"w\"> </span><span class=\"n\">/\\</span><span class=\"w\"> </span><span class=\"n\">Y</span><span class=\"w\"> </span><span class=\"n\">∈</span><span class=\"w\"> </span><span class=\"n\">parts</span><span class=\"w\"> </span><span class=\"n\">H</span>\n</code></pre></div>\n<p>but I guess the above style is useful for automation. </p>\n<p>Is there a name for this style, and what should I know about it?</p>",
        "id": 368187835,
        "sender_full_name": "Gergely Buday",
        "timestamp": 1687343576
    },
    {
        "content": "<p>Another example is</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">parts_emptyE</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">elim</span><span class=\"o\">!]:</span><span class=\"w\"> </span><span class=\"s\">\"X∈ parts{} ==&gt; P</span>\n</code></pre></div>\n<p>which is stating the impossible, something is an element of an empty set, and from false implies anything. Again, why is this formulation?</p>",
        "id": 368189419,
        "sender_full_name": "Gergely Buday",
        "timestamp": 1687343941
    },
    {
        "content": "<p>Your first example is an elimination rule, to be used with the <code>erule</code> tactic (or the <code>elim:</code> attribute to auto) while your second is a destruct rule (for <code>drule</code> or <code>dest:</code> for auto). The elim rule is more convenient in this case because it can add the two new assumptions as two seperate ones, ie you can directly use one or the other. The destruct rule will give you a conjuction in your assumptions which you would then need to spit with either the destruct rules <code>conjunct1</code> (or 2) or with the elim rule <code>conjE</code></p>",
        "id": 368195913,
        "sender_full_name": "Jan van Brügge",
        "timestamp": 1687345412
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">MPair_parts'</span><span class=\"o\">:</span>\n<span class=\"w\">  </span><span class=\"kp\">assumes</span><span class=\"w\"> </span><span class=\"s\">‹⦃X,Y⦄ ∈ parts H›</span>\n<span class=\"w\">  </span><span class=\"kp\">obtains</span><span class=\"w\"> </span><span class=\"s\">‹X ∈ parts H›</span><span class=\"w\"> </span><span class=\"s\">‹Y ∈ parts H›</span>\n</code></pre></div>\n<p>is equivalent, you may find it a bit easier to read.</p>",
        "id": 368249194,
        "sender_full_name": "Maximilian Schäffeler",
        "timestamp": 1687356363
    }
]