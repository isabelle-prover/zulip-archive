[
    {
        "content": "<p>Hi.</p>\n<p>I was looking at this page:<br>\n<a href=\"https://isabelle.in.tum.de/library/HOL/HOL-Matrix_LP/Matrix.html\">https://isabelle.in.tum.de/library/HOL/HOL-Matrix_LP/Matrix.html</a></p>\n<p>What does the <code>nat ⇒ nat ⇒ 'a::zero</code> in the following lines mean?</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">definition</span><span class=\"w\"> </span><span class=\"n\">nonzero_positions</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"(nat ⇒ nat ⇒ 'a::zero) ⇒ (nat × nat) set\"</span><span class=\"w\"> </span><span class=\"kp\">where</span>\n<span class=\"w\">  </span><span class=\"s\">\"nonzero_positions A = {pos. A (fst pos) (snd pos) ~= 0}\"</span>\n</code></pre></div>\n<p>It looks like the type of a function that accepts two <code>nat</code> and then returns a list?<br>\nBut maybe <code>::</code> doesn't mean cons of list? I suppose that's <code>#</code>?</p>\n<p><code>zero</code> is like the identity element of a group?<br>\n<a href=\"https://isabelle.in.tum.de/library/HOL/HOL/Groups.html#Groups.zero|class\">https://isabelle.in.tum.de/library/HOL/HOL/Groups.html#Groups.zero|class</a></p>\n<p>I'm new to isabelle but am familiar with sml.</p>",
        "id": 498940506,
        "sender_full_name": "Julin Shaji",
        "timestamp": 1739257090
    },
    {
        "content": "<p>That is a kind type class constraint. It means that <code>'a</code> must have an instance of the class <code>zero</code>.</p>",
        "id": 498978679,
        "sender_full_name": "Jan van Brügge",
        "timestamp": 1739270648
    },
    {
        "content": "<p>Learning that \"::\" doesn't mean \"cons\" is a tough battle for those who (like me) come from ML. I feel your pain, Julin. :) <br>\nI also had no idea that it had this additional \"type class constraint\" meaning.</p>",
        "id": 499046710,
        "sender_full_name": "John  Hughes",
        "timestamp": 1739290651
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"392255\">Jan van Brügge</span> <a href=\"#narrow/channel/238552-Beginner-Questions/topic/A.20syntax.20doubt/near/498978679\">said</a>:</p>\n<blockquote>\n<p>That is a kind type class constraint. It means that <code>'a</code> must have an instance of the class <code>zero</code>.</p>\n</blockquote>\n<p>Ah.. So <code>(nat ⇒ nat ⇒ 'a::zero) ⇒ (nat × nat) set</code> is like <code>Zero a =&gt; (nat -&gt; nat -&gt; a) -&gt; Set (nat, nat)</code> in Haskell, I guess.</p>",
        "id": 499146320,
        "sender_full_name": "Julin Shaji",
        "timestamp": 1739334441
    },
    {
        "content": "<p>precisely</p>",
        "id": 499182229,
        "sender_full_name": "Jan van Brügge",
        "timestamp": 1739351808
    },
    {
        "content": "<p>Also, what does <code>pos</code> in <code>{pos. A (fst pos) (snd pos) ~= 0}</code> mean?</p>\n<p><code>~=</code> means not-equal, right?</p>",
        "id": 499184084,
        "sender_full_name": "Julin Shaji",
        "timestamp": 1739352387
    },
    {
        "content": "<p>Is it like an anonymous function?</p>",
        "id": 499184138,
        "sender_full_name": "Julin Shaji",
        "timestamp": 1739352407
    },
    {
        "content": "<p>similar, it is syntax sugar for <code>Collect (λpos. A (fst pos) (snd pos) ~= 0)</code>, which denotes the set of all <code>pos</code> such that <code>A (fst pos) (snd pos) ~= 0</code></p>",
        "id": 499197092,
        "sender_full_name": "Jan van Brügge",
        "timestamp": 1739356198
    },
    {
        "content": "<p>Thanks.<br>\nI suppose <code>Collect</code> is this one:<br>\n<a href=\"https://isabelle.in.tum.de/library/HOL/HOL/Set.html#Set.Collect|const\">https://isabelle.in.tum.de/library/HOL/HOL/Set.html#Set.Collect|const</a></p>",
        "id": 499385935,
        "sender_full_name": "Julin Shaji",
        "timestamp": 1739426799
    },
    {
        "content": "<p>yes</p>",
        "id": 499428644,
        "sender_full_name": "Jan van Brügge",
        "timestamp": 1739440797
    },
    {
        "content": "<p>In the definition of <code>Collect</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">axiomatization</span><span class=\"w\"> </span><span class=\"n\">Collect</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"('a ⇒ bool) ⇒ 'a set\"</span><span class=\"w\"> </span><span class=\"n\">―</span><span class=\"w\"> </span><span class=\"s\">‹comprehension›</span>\n<span class=\"w\">  </span><span class=\"kp\">and</span><span class=\"w\"> </span><span class=\"n\">member</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"'a ⇒ 'a set ⇒ bool\"</span><span class=\"w\"> </span><span class=\"n\">―</span><span class=\"w\"> </span><span class=\"s\">‹membership›</span>\n<span class=\"w\">  </span><span class=\"kp\">where</span><span class=\"w\"> </span><span class=\"n\">mem_Collect_eq</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">iff</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">code_unfold</span><span class=\"o\">]:</span><span class=\"w\"> </span><span class=\"s\">\"member a (Collect P) = P a\"</span>\n<span class=\"w\">    </span><span class=\"kp\">and</span><span class=\"w\"> </span><span class=\"n\">Collect_mem_eq</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]:</span><span class=\"w\"> </span><span class=\"s\">\"Collect (λx. member x A) = A\"</span>\n</code></pre></div>\n<p>what does the part within square brackets mean?</p>\n<p>Like <code>[iff, code_unfold]</code> in <code>mem_Collect_eq [iff, code_unfold]</code>.</p>",
        "id": 500180431,
        "sender_full_name": "Julin Shaji",
        "timestamp": 1739797363
    },
    {
        "content": "<p>It gives the theorem attributes to the theorems, which transforms them in some way or makes them accessible to automation tools. So, for example, [simp] will mean that simp will use that theorem as a simplification rule, and code_unfold (I think) means that the rule is available during code generation</p>",
        "id": 500192246,
        "sender_full_name": "Christian Pardillo Laursen",
        "timestamp": 1739800165
    },
    {
        "content": "<p><a href=\"https://isabelle.systems/conventions/theorem_attributes.html\">https://isabelle.systems/conventions/theorem_attributes.html</a></p>",
        "id": 500192339,
        "sender_full_name": "Christian Pardillo Laursen",
        "timestamp": 1739800192
    }
]