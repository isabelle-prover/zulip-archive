[
    {
        "content": "<p>When I run my example, I meet below hints:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"n\">Wellsortedness</span><span class=\"w\"> </span><span class=\"n\">error</span><span class=\"o\">:</span>\n<span class=\"n\">Type</span><span class=\"w\"> </span><span class=\"n\">nat</span><span class=\"w\"> </span><span class=\"n\">not</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">sort</span><span class=\"w\"> </span><span class=\"ow\">{</span><span class=\"n\">enum</span><span class=\"o\">,</span><span class=\"n\">equal</span><span class=\"o\">,</span><span class=\"n\">order</span><span class=\"ow\">}</span>\n<span class=\"n\">No</span><span class=\"w\"> </span><span class=\"n\">type</span><span class=\"w\"> </span><span class=\"n\">arity</span><span class=\"w\"> </span><span class=\"n\">nat</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"n\">enum</span>\n</code></pre></div>\n<p>I am curious about the principal behind this. </p>\n<p>The part of snippet could be:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">definition</span><span class=\"w\"> </span><span class=\"n\">check_eqv</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"'a::order rexp ⇒ 'a rexp ⇒ 'a list ⇒ bool\"</span><span class=\"w\"> </span><span class=\"kp\">where</span>\n<span class=\"s\">\"check_eqv r s as =</span>\n<span class=\"s\">  (let nr = norm r; ns = norm s</span>\n<span class=\"s\">   in case closure as (nr, ns) of</span>\n<span class=\"s\">     Some([],_) ⇒ True | _ ⇒ False)\"</span>\n\n<span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"nat ⇒ bool\"</span><span class=\"w\"> </span><span class=\"kp\">where</span>\n<span class=\"s\">\"f n = (n &lt; 3)\"</span>\n\n<span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"s\">\"check_eqv (Plus One (Times ((Sym (Predicate.Pred f))) (Star (Sym (Predicate.Pred f))))) (Star(Sym (Predicate.Pred f))) [1,2,3,4]\"</span>\n<span class=\"w\">  </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">eval</span>\n</code></pre></div>\n<p>Any helps would be appreciated.</p>",
        "id": 379166347,
        "sender_full_name": "Hongjian Jiang",
        "timestamp": 1690465641
    },
    {
        "content": "<p>Well the error message basically says that the code generator is not able to generate code, because the only way is to enumerate all solutions…</p>",
        "id": 379167400,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1690465807
    },
    {
        "content": "<p>how to improve such case</p>",
        "id": 379167979,
        "sender_full_name": "Hongjian Jiang",
        "timestamp": 1690465908
    },
    {
        "content": "<p>by looking at piece of the code, find out exactly which part is not working (I assume it is closure but I am not sure). Once you know that, you have to replace the code by something executable… (See <a href=\"https://isabelle.in.tum.de/dist/Isabelle2022/doc/codegen.pdf\">https://isabelle.in.tum.de/dist/Isabelle2022/doc/codegen.pdf</a>)</p>",
        "id": 379169213,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1690466109
    },
    {
        "content": "<p>Hi, Mathisas. I thought I found the problem. I use the set comprehension to calculate the value.</p>\n<p>Like<code>value \"{a. f a}\"</code></p>",
        "id": 379513458,
        "sender_full_name": "Hongjian Jiang",
        "timestamp": 1690551933
    },
    {
        "content": "<p>But it is mandatory in my example I think.</p>",
        "id": 379513635,
        "sender_full_name": "Hongjian Jiang",
        "timestamp": 1690551966
    },
    {
        "content": "<p>like Mathias said, if you must use sets, you would have to provide rewrites for that in a more \"executable\" way that doesn't require searching over all numbers <code>a</code></p>",
        "id": 380161799,
        "sender_full_name": "Yong Kiam",
        "timestamp": 1690765023
    }
]