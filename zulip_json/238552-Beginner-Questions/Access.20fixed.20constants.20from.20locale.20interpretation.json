[
    {
        "content": "<p>Hi, </p>\n<p>having a locale \"L\" that fixes some constant \"c\" and an interpretation \"intp\" of that locale L, is there a way to access the instantiated/interpreted c without explicitly using the instantiating term? </p>\n<p>I tried using \"intp.c\", but that is either undefined or I'm doing sth. wrong.</p>\n<p>Thanks a lot in advance :)</p>",
        "id": 397129890,
        "sender_full_name": "Alicia",
        "timestamp": 1697555360
    },
    {
        "content": "<p>There is no way to do that</p>",
        "id": 397242810,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1697611737
    },
    {
        "content": "<p>but in general you should avoid instantiating with complex terms anyway, because the simplifier can simplify them and break the entire local mechanism.</p>",
        "id": 397242895,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1697611773
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">locale</span><span class=\"w\"> </span><span class=\"n\">L</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">  </span><span class=\"kp\">fixes</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"n\">nat</span>\n<span class=\"w\">  </span><span class=\"kp\">assumes</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"n ≥ 1\"</span>\n<span class=\"k\">begin</span>\n\n<span class=\"k\">definition</span><span class=\"w\"> </span><span class=\"n\">double</span><span class=\"w\"> </span><span class=\"kp\">where</span><span class=\"w\"> </span><span class=\"s\">\"double = n + n\"</span>\n<span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"double &gt; 0\"</span>\n<span class=\"w\">  </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"k\">unfolding</span><span class=\"w\"> </span><span class=\"n\">double_def</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">simp</span>\n<span class=\"k\">end</span>\n\n<span class=\"kn\">interpretation</span><span class=\"w\"> </span><span class=\"n\">test</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">L</span><span class=\"w\"> </span><span class=\"s\">\"0+1\"</span>\n<span class=\"w\">  </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">unfold_locales</span><span class=\"w\"> </span><span class=\"n\">auto</span>\n\n<span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"s\">‹0 &lt; test.double›</span>\n<span class=\"w\">  </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"n\">simp</span>\n<span class=\"c\">(*goal involves L.double (Suc 0), not expected at all!*)</span>\n</code></pre></div>",
        "id": 397243265,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1697611923
    },
    {
        "content": "<p>so introducing definition is often the best way to both instantiate and later refer to the term</p>",
        "id": 397243449,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1697611988
    },
    {
        "content": "<p>Alright, thanks for the example! :-)</p>",
        "id": 397325315,
        "sender_full_name": "Alicia",
        "timestamp": 1697639190
    }
]