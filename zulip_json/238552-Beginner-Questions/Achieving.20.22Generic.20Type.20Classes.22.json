[
    {
        "content": "<p>Hello,</p>\n<p>is there a way to achieve \"generic type classes\" (comparable to generic interfaces in Java)?<br>\nI came across a - to me - <a href=\"#narrow/stream/336180-Archive-Mirror.3A-Isabelle-Users-Mailing-List/topic/.5Bisabelle.5D.20A.20parametrised.20type.20class.20for.20two.20or.20more.20para.2E.2E.2E/near/294071679\">similar question</a> in the archive that did not get my hopes up. Also, if I understand it correctly, the only type variable allowed in a class definition stands for an instance of the type class (I'm just getting started with type classes and locales). </p>\n<p>Still, for lack of words, I'll use type classes for a (non-working) MWE:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">class</span><span class=\"w\"> </span><span class=\"n n-Type\">'param</span><span class=\"w\"> </span><span class=\"n\">polymorphic_type</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">  </span><span class=\"kp\">fixes</span><span class=\"w\"> </span><span class=\"n\">polymorphic_func</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"'param =&gt; 'a =&gt; bool\"</span>\n</code></pre></div>\n<p>Here, the 'a in the polymorphic_type stands for instances of the type class while 'param is some generic other type acting as a parameter.<br>\nUsing this, I want to be able to define parameterized instance types:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">datatype</span><span class=\"w\"> </span><span class=\"n n-Type\">'param</span><span class=\"w\"> </span><span class=\"n\">instance_type</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">I1</span><span class=\"w\"> </span><span class=\"n n-Type\">'param</span>\n\n<span class=\"k\">instantiation</span><span class=\"w\"> </span><span class=\"s\">\"'param instance_type\"</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"'param polymorphic_type\"</span>\n<span class=\"k\">begin</span>\n<span class=\"k\">definition</span>\n<span class=\"w\">    </span><span class=\"n\">polymorphic_func_instance_type_def</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"polymorphic_func (a::'param) (x::('param instance_type)) = ...\"</span>\n<span class=\"ow\">...</span>\n<span class=\"k\">end</span>\n</code></pre></div>\n<p>Especially, I'd like to be able to have functions of type <code>\"'param instance_type =&gt; ...\", (e.g.) \"nat instance_type\"</code> as well as <code>\"('a::('param polymorphic_type)) =&gt; ...\"</code></p>\n<p>I'd be very grateful if someone could maybe help me cut short (or abort) my search :-)</p>\n<p>Thanks a lot in advance!</p>\n<p>Kind regards,<br>\nAlicia</p>",
        "id": 389272271,
        "sender_full_name": "Alicia",
        "timestamp": 1693944733
    },
    {
        "content": "<p>I think that’s not possible. Other languages, most notably Haskell, have far more feature-rich type class systems, but Isabelle’s type class system is in particular restricted to one parameter per type class, because type classes are identified by sorts (the “types of types”): whenever you want to say that a type is an instance of a class, you say that this type is of the corresponding sort (e.g., <code>nat :: ord</code>), and this cannot work if you have several types that are collectively an instance of a class.</p>",
        "id": 389275926,
        "sender_full_name": "Wolfgang Jeltsch",
        "timestamp": 1693946130
    },
    {
        "content": "<p>That it is impossible over classes is also my understanding. You need to use locales.</p>",
        "id": 389336565,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1693975550
    },
    {
        "content": "<p>Yes, locales can be parameterized by an arbitrary number of types. They can furthermore have different interpretations for the same bunch of types. The price you pay is that interpretations are not picked automatically.</p>",
        "id": 389409926,
        "sender_full_name": "Wolfgang Jeltsch",
        "timestamp": 1694003745
    },
    {
        "content": "<p>Hello, thanks for your quick answers! I think it's kind of working with the locales (though I'm still not that good at handling them :D ).</p>",
        "id": 394816504,
        "sender_full_name": "Alicia",
        "timestamp": 1696417822
    }
]