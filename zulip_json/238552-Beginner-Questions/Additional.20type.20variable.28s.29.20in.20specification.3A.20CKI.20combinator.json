[
    {
        "content": "<p>Hey, I'm trying to define I combinator (I = CKK) in BCK combinatory calculus, but it seems like Isabelle is unable to see a proper unification of the remaining types from C and K combinators. I tried a solution from another thread using TYPE('b) =&gt; ...,, but to no effect. What is the reason of this? </p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">theory</span><span class=\"w\"> </span><span class=\"n\">example</span>\n<span class=\"w\">  </span><span class=\"kp\">imports</span><span class=\"w\"> </span><span class=\"n\">Main</span>\n<span class=\"k\">begin</span>\n\n<span class=\"k\">definition</span><span class=\"w\"> </span><span class=\"n\">C</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"('a =&gt; 'b =&gt; 'c) =&gt; 'b =&gt; 'a =&gt; 'c\"</span><span class=\"w\"> </span><span class=\"kp\">where</span>\n<span class=\"w\">  </span><span class=\"s\">\"C f g x = f x g\"</span>\n\n<span class=\"k\">definition</span><span class=\"w\"> </span><span class=\"n\">K</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"'a =&gt; 'b =&gt; 'a\"</span><span class=\"w\"> </span><span class=\"kp\">where</span>\n<span class=\"w\">  </span><span class=\"s\">\"K x y = x\"</span>\n\n<span class=\"c\">(* cannot get it to work *)</span>\n<span class=\"k\">definition</span><span class=\"w\"> </span><span class=\"n\">I</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"'a =&gt; 'a\"</span><span class=\"w\"> </span><span class=\"kp\">where</span>\n<span class=\"w\">  </span><span class=\"s\">\"I = C K K\"</span>\n\n<span class=\"k\">end</span>\n</code></pre></div>",
        "id": 507860415,
        "sender_full_name": "Paweł Balawender",
        "timestamp": 1742844698
    },
    {
        "content": "<p>I only get a warning:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"n\">Additional</span><span class=\"w\"> </span><span class=\"n\">type</span><span class=\"w\"> </span><span class=\"n\">variable</span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"kp\">in</span><span class=\"w\"> </span><span class=\"kn\">specification</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"s\">\"I\"</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n n-Type\">'b</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n n-Type\">'c</span>\n</code></pre></div>",
        "id": 507861159,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1742844930
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">definition</span><span class=\"w\"> </span><span class=\"n\">I</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"'a =&gt; 'a\"</span><span class=\"w\"> </span><span class=\"kp\">where</span>\n<span class=\"w\">  </span><span class=\"s\">\"I = (C:: _ ⇒ ('a ⇒ 'a ⇒ 'a) ⇒ ('a ⇒ 'a)) K K\"</span>\n</code></pre></div>",
        "id": 507861733,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1742845114
    },
    {
        "content": "<p>if you want to fix them</p>",
        "id": 507861763,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1742845122
    },
    {
        "content": "<p>Oh.. i thought it was an error xD thank you then! Btw, what I'm actually trying to do is to use Isabelle's unification to obtain any specific type inferred for CKK (so, in the above definition, what does 'b evaluate to etc.). Do you have any pointers how to access this from the level of a tactic?</p>",
        "id": 507861802,
        "sender_full_name": "Paweł Balawender",
        "timestamp": 1742845134
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"233198\">Mathias Fleury</span> <a href=\"#narrow/channel/238552-Beginner-Questions/topic/Additional.20type.20variable.28s.29.20in.20specification.3A.20CKI.20combinator/near/507861733\">said</a>:</p>\n<blockquote>\n<p><div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">definition</span><span class=\"w\"> </span><span class=\"n\">I</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"'a =&gt; 'a\"</span><span class=\"w\"> </span><span class=\"kp\">where</span>\n<span class=\"w\">  </span><span class=\"s\">\"I = (C:: _ ⇒ ('a ⇒ 'a ⇒ 'a) ⇒ ('a ⇒ 'a)) K K\"</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Oh, that's neat, thanks! Actually, this specific instantiation of C is exactly what I'd like to obtain  programatically. So to not have to come up with specific type of C on my own, but to use type system to get this thing</p>",
        "id": 507862123,
        "sender_full_name": "Paweł Balawender",
        "timestamp": 1742845234
    },
    {
        "content": "<p>On the ML level it is easy:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">ML</span><span class=\"w\"> </span><span class=\"s\">‹</span>\n<span class=\"s\">case @{term ‹C K›} of</span>\n<span class=\"s\">  Const(_, _) $ s =&gt; s›</span>\n</code></pre></div>",
        "id": 507862587,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1742845401
    },
    {
        "content": "<p>that is pretty much how I came up with the type (using <code>term \"C K\"</code> actually)</p>",
        "id": 507862752,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1742845451
    },
    {
        "content": "<p>That's neat! Thank you a lot :)</p>",
        "id": 507863190,
        "sender_full_name": "Paweł Balawender",
        "timestamp": 1742845610
    }
]