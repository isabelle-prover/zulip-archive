[
    {
        "content": "<p>Hi everyone,</p>\n<p>sorry if this has been asked already. I have written a definition with an additional type variable. I want to include it explicitly so I can instantiate it later. This is a minimal example I made</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"w\"> </span><span class=\"k\">definition</span><span class=\"w\"> </span><span class=\"n\">test</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"'a::len word ⇒ 'b::len word ⇒ bool\"</span><span class=\"w\"> </span><span class=\"kp\">where</span>\n<span class=\"w\"> </span><span class=\"s\">\"test x y = (Word.word_cat x y = 0)\"</span>\n</code></pre></div>\n<p>Now of course I get a warning about 'c . I remember there was a way to avoid this warning by explicitly telling Isabelle: \"Yeah I know about 'c and it is not a mistake\" but forgot how exactly it works. </p>\n<p>Looking at the manual:</p>\n<p><a href=\"/user_uploads/14278/5buB1D-1J7cCDtINw0VEqkWG/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/14278/5buB1D-1J7cCDtINw0VEqkWG/image.png\" title=\"image.png\"><img src=\"/user_uploads/14278/5buB1D-1J7cCDtINw0VEqkWG/image.png\"></a></div><p>I first thought it is part of the for_fixes:</p>\n<p><a href=\"/user_uploads/14278/fJhv6tIWOU9-sTRsCOdPZb6x/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/14278/fJhv6tIWOU9-sTRsCOdPZb6x/image.png\" title=\"image.png\"><img src=\"/user_uploads/14278/fJhv6tIWOU9-sTRsCOdPZb6x/image.png\"></a></div><p>but if I add <code>for \"_::'c\"</code> I get a legacy feature warning and a bad name error. How do I do this without introducing an extra variable of that type explicitely?</p>",
        "id": 388603467,
        "sender_full_name": "Hanna Lachnitt",
        "timestamp": 1693604282
    },
    {
        "content": "<p>Normally you can do something like this</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"w\"> </span><span class=\"k\">definition</span><span class=\"w\"> </span><span class=\"n\">test</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"''c itself =&gt; a::len word ⇒ 'b::len word ⇒ bool\"</span><span class=\"w\"> </span><span class=\"kp\">where</span>\n<span class=\"w\"> </span><span class=\"s\">\"test TYPE('c) x y = (Word.word_cat x y = 0)\"</span>\n</code></pre></div>\n<p><del>I don't know how much sense it makes in this case to instantiate the type since the type indicates the length of the resulting word, i.e. you need to pass a type that has the right cardinality.</del></p>",
        "id": 388605605,
        "sender_full_name": "Lukas Stevens",
        "timestamp": 1693605699
    },
    {
        "content": "<p>(This example does not allow you to specify <code>'c</code> it just shows how you can pass a type in principle)</p>",
        "id": 388605715,
        "sender_full_name": "Lukas Stevens",
        "timestamp": 1693605759
    },
    {
        "content": "<p>Got it:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">definition</span><span class=\"w\"> </span><span class=\"n\">test</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"'c::len itself ⇒ 'a::len word ⇒ 'b::len word ⇒ bool\"</span><span class=\"w\"> </span><span class=\"kp\">where</span>\n<span class=\"w\"> </span><span class=\"s\">\"test TYPE('c) x y ⟷ ((Word.word_cat x y) :: 'c word) = 0\"</span>\n</code></pre></div>",
        "id": 388606420,
        "sender_full_name": "Lukas Stevens",
        "timestamp": 1693606208
    },
    {
        "content": "<p>Thanks a lot, that is exactly what I wanted!</p>",
        "id": 388606535,
        "sender_full_name": "Hanna Lachnitt",
        "timestamp": 1693606270
    }
]