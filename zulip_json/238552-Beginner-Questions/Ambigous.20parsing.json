[
    {
        "content": "<p>Here is my simple locale definition in Isabelle:</p>\n<p>locale sig =<br>\n  fixes le:: \"'a ⇒ 'a ⇒ bool\" (infixl \"≤\" 50)<br>\n  assumes refl: \"x ≤ x\"</p>\n<p>Now, I get an error message:</p>\n<p>Ambiguous input⌂ produces 2 parse trees:<br>\n  (\"\\&lt;^const&gt;HOL.Trueprop\"<br>\n    (\"\\&lt;^const&gt;Orderings.ord_class.less_eq\" (\"_position\" x) (\"_position\" x)))<br>\n  (\"\\&lt;^const&gt;HOL.Trueprop\" (\"\\&lt;^fixed&gt;le\" (\"_position\" x) (\"_position\" x)))<br>\nAmbiguous input<br>\n2 terms are type correct:<br>\n  (x ≤ x)<br>\n  (x ≤ x)<br>\nFailed to parse prop</p>\n<p>Do I have a conflict with a builtin less-or-equal operator?</p>\n<p>How can I fix this?</p>\n<p>The Coq original I took uses</p>\n<p>Infix \"≤\" := le : order_scope.<br>\n  Open Scope order_scope.</p>\n<p>So, it instructs the system to use less-or-equal  \"≤\" only in a scope. Is there similar functionality in Isabelle?</p>",
        "id": 205894529,
        "sender_full_name": "Gergely Buday",
        "timestamp": 1596539658
    },
    {
        "content": "<p>If you ctrl+f \"notation\" in <a href=\"https://isabelle.in.tum.de/dist/library/HOL/HOL/Orderings.html\">Orderings.thy</a>, you will see the defined notation for leq. You can copy the respective notation declarations and disable them using <code>no_notation</code>. In this case</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">no_notation</span>\n  <span class=\"n\">less_eq</span>  <span class=\"o\">(</span><span class=\"s\">&quot;&#39;(≤&#39;)&quot;</span><span class=\"o\">)</span> <span class=\"kp\">and</span>\n  <span class=\"n\">less_eq</span>  <span class=\"o\">(</span><span class=\"s\">&quot;(_/ ≤ _)&quot;</span>  <span class=\"o\">[</span><span class=\"n\">51</span><span class=\"o\">,</span> <span class=\"n\">51</span><span class=\"o\">]</span> <span class=\"n\">50</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 205895281,
        "sender_full_name": "Kevin Kappelmann",
        "timestamp": 1596540404
    },
    {
        "content": "<p>Thanks, <strong>Kevin Kappelmann</strong>. Is there scoping a 'la Coq in Isabelle?</p>",
        "id": 205895546,
        "sender_full_name": "Gergely Buday",
        "timestamp": 1596540616
    },
    {
        "content": "<p>You can use locales as a scoping mechanism. However, notation outside of locales is global. It is therefore recommended to use bundles which allow you to enable/disable notation.</p>",
        "id": 205897252,
        "sender_full_name": "Lukas Stevens",
        "timestamp": 1596542067
    },
    {
        "content": "<p>With contexts, you could do this:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">bundle</span> <span class=\"n\">no_less_eq_syntax</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">no_notation</span> <span class=\"n\">less_eq</span>  <span class=\"o\">(</span><span class=\"s\">&quot;&#39;(≤&#39;)&quot;</span><span class=\"o\">)</span> <span class=\"kp\">and</span> <span class=\"n\">less_eq</span>  <span class=\"o\">(</span><span class=\"s\">&quot;(_/ ≤ _)&quot;</span>  <span class=\"o\">[</span><span class=\"n\">51</span><span class=\"o\">,</span> <span class=\"n\">51</span><span class=\"o\">]</span> <span class=\"n\">50</span><span class=\"o\">)</span>\n<span class=\"k\">end</span>\n\n<span class=\"k\">context</span>\n  <span class=\"kp\">includes</span> <span class=\"n\">no_less_eq_syntax</span>\n<span class=\"k\">begin</span>\n\n<span class=\"kt\">term</span> <span class=\"s\">&quot;(≤)&quot;</span> <span class=\"err\">―‹</span><span class=\"n\">does</span> <span class=\"n\">not</span> <span class=\"n\">work</span> <span class=\"o\">(</span><span class=\"n\">as</span> <span class=\"n\">intended</span><span class=\"o\">)</span><span class=\"err\">›</span>\n\n<span class=\"k\">end</span>\n\n<span class=\"kt\">term</span> <span class=\"s\">&quot;(≤)&quot;</span> <span class=\"err\">―‹</span><span class=\"n\">works</span><span class=\"err\">›</span>\n</code></pre></div>\n\n\n<p>However, with locales, it seems like you cannot use <code>includes</code>. So the best thing I could come up with is this:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">bundle</span> <span class=\"n\">less_eq_syntax</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">notation</span> <span class=\"n\">less_eq</span>  <span class=\"o\">(</span><span class=\"s\">&quot;&#39;(≤&#39;)&quot;</span><span class=\"o\">)</span> <span class=\"kp\">and</span> <span class=\"n\">less_eq</span>  <span class=\"o\">(</span><span class=\"s\">&quot;(_/ ≤ _)&quot;</span>  <span class=\"o\">[</span><span class=\"n\">51</span><span class=\"o\">,</span> <span class=\"n\">51</span><span class=\"o\">]</span> <span class=\"n\">50</span><span class=\"o\">)</span>\n<span class=\"k\">end</span>\n<span class=\"k\">bundle</span> <span class=\"n\">no_less_eq_syntax</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">no_notation</span> <span class=\"n\">less_eq</span>  <span class=\"o\">(</span><span class=\"s\">&quot;&#39;(≤&#39;)&quot;</span><span class=\"o\">)</span> <span class=\"kp\">and</span> <span class=\"n\">less_eq</span>  <span class=\"o\">(</span><span class=\"s\">&quot;(_/ ≤ _)&quot;</span>  <span class=\"o\">[</span><span class=\"n\">51</span><span class=\"o\">,</span> <span class=\"n\">51</span><span class=\"o\">]</span> <span class=\"n\">50</span><span class=\"o\">)</span>\n<span class=\"k\">end</span>\n\n<span class=\"n\">unbundle</span> <span class=\"n\">no_less_eq_syntax</span>\n\n<span class=\"k\">locale</span> <span class=\"n\">sig</span> <span class=\"o\">=</span>\n<span class=\"kp\">fixes</span> <span class=\"n\">le</span><span class=\"o\">::</span> <span class=\"s\">&quot;&#39;a ⇒ &#39;a ⇒ bool&quot;</span> <span class=\"o\">(</span><span class=\"kp\">infixl</span> <span class=\"s\">&quot;≤&quot;</span> <span class=\"n\">50</span><span class=\"o\">)</span>\n<span class=\"kp\">assumes</span> <span class=\"n\">refl</span><span class=\"o\">:</span> <span class=\"s\">&quot;x ≤ x&quot;</span> <span class=\"err\">―‹</span><span class=\"n\">works</span><span class=\"err\">›</span>\n\n<span class=\"k\">begin</span>\n\n\n<span class=\"k\">end</span>\n\n<span class=\"n\">unbundle</span> <span class=\"n\">less_eq_syntax</span>\n\n<span class=\"kt\">term</span> <span class=\"s\">&quot;(≤)&quot;</span> <span class=\"err\">―‹</span><span class=\"n\">works</span><span class=\"err\">›</span>\n</code></pre></div>",
        "id": 205897736,
        "sender_full_name": "Kevin Kappelmann",
        "timestamp": 1596542476
    }
]