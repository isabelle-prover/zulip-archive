[
    {
        "content": "<p>Hi everyone, I encountered the issue that when I try to combine lemmas from separate documents together, some arguments which have been true suddenly become invalid. For example, I wrote:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"n\">define</span><span class=\"w\"> </span><span class=\"n\">r1</span><span class=\"w\"> </span><span class=\"kp\">where</span><span class=\"w\"> </span><span class=\"s\">\"r1 = 2*(1-2/m) - sqrt (4*(1-2/m)^2 + 8*(N - r)/m)\"</span>\n<span class=\"n\">define</span><span class=\"w\"> </span><span class=\"n\">r2</span><span class=\"w\"> </span><span class=\"kp\">where</span><span class=\"w\"> </span><span class=\"s\">\"r2 = 2*(1-2/m) + sqrt (4*(1-2/m)^2 + 8*(N - r)/m)\"</span>\n<span class=\"k\">have</span><span class=\"w\"> </span><span class=\"s\">\"r1 * r2 = (2*(1-2/m))^2 - (sqrt (4*(1-2/m)^2 + 8*(N - r)/m))^2\"</span><span class=\"w\"> </span><span class=\"k\">unfolding</span><span class=\"w\"> </span><span class=\"n\">r1_def</span><span class=\"w\"> </span><span class=\"n\">r2_def</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">algebra</span>\n</code></pre></div>\n<p>This argument is completely valid when it's in the document that contains only this lemma, but when I copied it to the main document (which combines several lemmas), Isabelle says:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"n\">Failed</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">finish</span><span class=\"w\"> </span><span class=\"k\">proof</span><span class=\"n\">⌂</span><span class=\"o\">:</span>\n<span class=\"n\">goal</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">1</span><span class=\"w\"> </span><span class=\"n\">subgoal</span><span class=\"o\">):</span>\n<span class=\"w\"> </span><span class=\"n\">1.</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">2</span><span class=\"w\"> </span><span class=\"n\">*</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">1</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">2</span><span class=\"w\"> </span><span class=\"n\">/</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">sqrt</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">4</span><span class=\"w\"> </span><span class=\"n\">*</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">1</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">2</span><span class=\"w\"> </span><span class=\"n\">/</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"o\">)</span><span class=\"n\">⇧2</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">8</span><span class=\"w\"> </span><span class=\"n\">*</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">N</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">/</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"o\">))</span><span class=\"w\"> </span><span class=\"n\">*</span>\n<span class=\"w\">    </span><span class=\"o\">(</span><span class=\"n\">2</span><span class=\"w\"> </span><span class=\"n\">*</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">1</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">2</span><span class=\"w\"> </span><span class=\"n\">/</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">sqrt</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">4</span><span class=\"w\"> </span><span class=\"n\">*</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">1</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">2</span><span class=\"w\"> </span><span class=\"n\">/</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"o\">)</span><span class=\"n\">⇧2</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">8</span><span class=\"w\"> </span><span class=\"n\">*</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">N</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">/</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"o\">))</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">    </span><span class=\"o\">(</span><span class=\"n\">2</span><span class=\"w\"> </span><span class=\"n\">*</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">1</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">2</span><span class=\"w\"> </span><span class=\"n\">/</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"o\">))</span><span class=\"n\">⇧2</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">sqrt</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">4</span><span class=\"w\"> </span><span class=\"n\">*</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">1</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">2</span><span class=\"w\"> </span><span class=\"n\">/</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"o\">)</span><span class=\"n\">⇧2</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">8</span><span class=\"w\"> </span><span class=\"n\">*</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">N</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">/</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"o\">))</span><span class=\"n\">⇧2</span>\n</code></pre></div>\n<p>I've double-checked that the imports are all the same and no previous variables are named <code>r1</code> or <code>r2</code>. Does anyone know how to fix this? Thank you!</p>",
        "id": 373917103,
        "sender_full_name": "Chris_Y",
        "timestamp": 1688986891
    },
    {
        "content": "<p>Hi I am not sure if this is the right place to ask this question,<br>\nI have a Definition of a Relation and I want to show that a tuple is part of this relation. The definition I have is :</p>\n<p>definition R :: \"int rel\" where<br>\n\"R = {(a,b). ∃n::int. a = b + n}\"</p>\n<p>I got to this point, but I don't know which rule to use:</p>\n<p>then have \"∃n::int. x = x + n\" by auto<br>\n          show \"(x, x) ∈ R\"</p>\n<p>:)</p>",
        "id": 374974010,
        "sender_full_name": "Miri",
        "timestamp": 1689262226
    },
    {
        "content": "<p>You need to use the definition</p>",
        "id": 374975276,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1689262468
    },
    {
        "content": "<p>this can be done  with</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">unfold</span><span class=\"w\"> </span><span class=\"n\">R_def</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 374975364,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1689262487
    },
    {
        "content": "<p>(I assume that this is some kind of homework and I am not sure what kind of Isar constructs you are allowed to use)</p>",
        "id": 374975682,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1689262552
    },
    {
        "content": "<p>how could i do that without apply?</p>",
        "id": 374977698,
        "sender_full_name": "Miri",
        "timestamp": 1689262947
    },
    {
        "content": "<p>in more steps ;-)</p>",
        "id": 374979767,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1689263349
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"s\">\"(x, x) ∈ {(a,b). ∃n::int. a = b + n}\"</span>\n<span class=\"w\">    </span><span class=\"gr\">sorry</span>\n<span class=\"k\">then</span><span class=\"w\"> </span><span class=\"s\">\"(x, x) ∈ R\"</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">unfold</span><span class=\"w\"> </span><span class=\"n\">R_def</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 374980018,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1689263401
    },
    {
        "content": "<p>thank you that helped ^-^</p>",
        "id": 374982775,
        "sender_full_name": "Miri",
        "timestamp": 1689263932
    },
    {
        "content": "<p>Other than that you could also use the <code>unfolding</code> keyword, as in <code>have ... unfolding R_def by ...</code></p>",
        "id": 374997528,
        "sender_full_name": "Jan van Brügge",
        "timestamp": 1689266850
    }
]