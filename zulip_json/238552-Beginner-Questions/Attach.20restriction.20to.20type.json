[
    {
        "content": "<p>Is there a way to encode a restriction in a type, similar to what a \"smart constructor\" would do in Haskell/PureScript?</p>\n<p>I would like to define a type like this </p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">type_synonym</span><span class=\"w\"> </span><span class=\"n\">TimeInterval</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"POSIXTime × POSIXTime\"</span><span class=\"w\"></span>\n</code></pre></div>\n<p>A function that may create it</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">createTimeInterval</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"POSIXTime ⇒ POSIXTime ⇒ TimeInterval option\"</span><span class=\"w\"> </span><span class=\"kp\">where</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"s\">\"createTimeInterval l r = (if l ≤ r then Some (l, r) else None)\"</span><span class=\"w\"></span>\n</code></pre></div>\n<p>and then to carry this restriction, so that I don't have to add it to every lemma</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">validTimeInterval</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"TimeInterval ⇒ bool\"</span><span class=\"w\"> </span><span class=\"kp\">where</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"s\">\"validTimeInterval (l, r) = (l ≤ r)\"</span><span class=\"w\"></span>\n\n<span class=\"kn\">theorem</span><span class=\"w\"> </span><span class=\"n\">inInterval_subset</span><span class=\"o\">:</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"s\">\"validTimeInterval a ⟹ inInterval a b = (tToSet a ⊆ bToSet b)\"</span><span class=\"w\"></span>\n</code></pre></div>\n<p>I have the feeling that I might achieve this with locales, but not sure if this is the intended use case.</p>",
        "id": 306240510,
        "sender_full_name": "Hernán Rajchert",
        "timestamp": 1666791172
    },
    {
        "content": "<p>You would do that with a subtype of TimeInterval, using <code>typedef</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">typedef</span><span class=\"w\"> </span><span class=\"n\">ValidTimeInterval</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"{ (x, y)::TimeInterval . x &lt;= y }\"</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Then you can get the underlying type using the <code>Rep_ValidTimeInterval</code> function and the property is in the theorem <code>Rep_ValidTimeInterval</code></p>",
        "id": 306242281,
        "sender_full_name": "Jan van Brügge",
        "timestamp": 1666791721
    },
    {
        "content": "<p>Thanks! Will try it :)</p>",
        "id": 306249743,
        "sender_full_name": "Hernán Rajchert",
        "timestamp": 1666793772
    },
    {
        "content": "<p>It worked great in the proofs, now I need to figure out how to export code from it. I'm getting the following error, need to check how to define the code equation </p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"w\"> </span><span class=\"n\">No</span><span class=\"w\"> </span><span class=\"n\">code</span><span class=\"w\"> </span><span class=\"n\">equations</span><span class=\"w\"> </span><span class=\"kp\">for</span><span class=\"w\"> </span><span class=\"n\">Abs_ValidTimeInterval</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 306298376,
        "sender_full_name": "Hernán Rajchert",
        "timestamp": 1666807106
    },
    {
        "content": "<p>Ah, just defining  <code>code_datatype Abs_ValidTimeInterval</code> did the trick :D</p>",
        "id": 306302747,
        "sender_full_name": "Hernán Rajchert",
        "timestamp": 1666808463
    }
]