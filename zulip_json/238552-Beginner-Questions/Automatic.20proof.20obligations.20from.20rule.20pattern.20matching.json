[
    {
        "content": "<p>I often find myself in situations exemplified here</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span>\n<span class=\"w\">  </span><span class=\"kp\">assumes</span><span class=\"w\"> </span><span class=\"n\">z</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">‹example []›</span>\n<span class=\"w\">  </span><span class=\"kp\">assumes</span><span class=\"w\"> </span><span class=\"n\">imp</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">‹⋀xs ys. (example xs ⟹ example ys ⟹ example (xs @ ys))›</span>\n<span class=\"w\">  </span><span class=\"kp\">shows</span><span class=\"w\"> </span><span class=\"s\">‹example (take 0 [1])›</span>\n<span class=\"k\">proof</span><span class=\"o\">-</span>\n<span class=\"w\">  </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"n\">simpl</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">‹take 0 [1] = [] @ []›</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">simp</span>\n<span class=\"w\">  </span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">thesis</span><span class=\"w\"> </span><span class=\"k\">unfolding</span><span class=\"w\"> </span><span class=\"n\">simpl</span>\n<span class=\"w\">  </span><span class=\"k\">proof</span><span class=\"o\">(</span><span class=\"n\">rule</span><span class=\"w\"> </span><span class=\"n\">imp;</span><span class=\"w\"> </span><span class=\"n\">rule</span><span class=\"w\"> </span><span class=\"n\">z</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"k\">qed</span>\n<span class=\"k\">qed</span>\n</code></pre></div>\n<p>I have an implication i want to use (conclusion <code>example (xs @ ys)</code>) and a goal <code>example (take 0 [1])</code>. I want to apply the implication with <code>rule</code> but the terms no not match. What i'd want is a way for the pattern match to succeed, but also give me the obligation to prove that <code>take 0 [1] = ?xs @ ?ys</code>.</p>\n<p>Is there such a way to use <code>rule</code> or do you have some other smart way to write proofs in these kinds of situations?</p>",
        "id": 479866226,
        "sender_full_name": "Jonathan Lindegaard Starup",
        "timestamp": 1730377873
    },
    {
        "content": "<p>urule might be able to do something like</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">simpl</span><span class=\"o\">[</span><span class=\"n\">uhint</span><span class=\"o\">]:</span><span class=\"w\"> </span><span class=\"s\">‹take 0 [1] = [] @ []›</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">simp</span>\n\n<span class=\"kn\">lemma</span>\n<span class=\"w\">  </span><span class=\"kp\">assumes</span><span class=\"w\"> </span><span class=\"n\">z</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">‹example []›</span>\n<span class=\"w\">  </span><span class=\"kp\">assumes</span><span class=\"w\"> </span><span class=\"n\">imp</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">‹⋀xs ys. (example xs ⟹ example ys ⟹ example (xs @ ys))›</span>\n<span class=\"w\">  </span><span class=\"kp\">shows</span><span class=\"w\"> </span><span class=\"s\">‹example (take 0 [1])›</span>\n<span class=\"w\">  </span><span class=\"kp\">apply</span><span class=\"o\">(</span><span class=\"n\">urule</span><span class=\"w\"> </span><span class=\"n\">imp</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">fact</span><span class=\"w\"> </span><span class=\"n\">z</span><span class=\"o\">)+</span>\n</code></pre></div>",
        "id": 479906918,
        "sender_full_name": "irvin",
        "timestamp": 1730389305
    },
    {
        "content": "<p>its available in the afp and I think you need to import<br>\n    ML_Unification.ML_Unification_HOL_Setup<br>\n    ML_Unification.Unify_Resolve_Tactics</p>",
        "id": 479907509,
        "sender_full_name": "irvin",
        "timestamp": 1730389469
    },
    {
        "content": "<p>Depending on your goal, just unfolding the simp rules might also work:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span>\n<span class=\"w\">  </span><span class=\"kp\">assumes</span><span class=\"w\"> </span><span class=\"n\">z</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">‹example []›</span>\n<span class=\"w\">  </span><span class=\"kp\">assumes</span><span class=\"w\"> </span><span class=\"n\">imp</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">‹⋀xs ys. (example xs ⟹ example ys ⟹ example (xs @ ys))›</span>\n<span class=\"w\">  </span><span class=\"kp\">shows</span><span class=\"w\"> </span><span class=\"s\">‹example (take 0 [1])›</span>\n<span class=\"k\">unfolding</span><span class=\"w\"> </span><span class=\"n\">take.simps</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">rule</span><span class=\"w\"> </span><span class=\"n\">imp;</span><span class=\"w\"> </span><span class=\"n\">rule</span><span class=\"w\"> </span><span class=\"n\">z</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 479909301,
        "sender_full_name": "Jan van Brügge",
        "timestamp": 1730390025
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"714722\">irvin</span> <a href=\"#narrow/channel/238552-Beginner-Questions/topic/Automatic.20proof.20obligations.20from.20rule.20pattern.20matching/near/479906918\">said</a>:</p>\n<blockquote>\n<p>urule might be able to do something like</p>\n<p><div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">simpl</span><span class=\"o\">[</span><span class=\"n\">uhint</span><span class=\"o\">]:</span><span class=\"w\"> </span><span class=\"s\">‹take 0 [1] = [] @ []›</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">simp</span>\n\n<span class=\"kn\">lemma</span>\n<span class=\"w\">  </span><span class=\"kp\">assumes</span><span class=\"w\"> </span><span class=\"n\">z</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">‹example []›</span>\n<span class=\"w\">  </span><span class=\"kp\">assumes</span><span class=\"w\"> </span><span class=\"n\">imp</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">‹⋀xs ys. (example xs ⟹ example ys ⟹ example (xs @ ys))›</span>\n<span class=\"w\">  </span><span class=\"kp\">shows</span><span class=\"w\"> </span><span class=\"s\">‹example (take 0 [1])›</span>\n<span class=\"w\">  </span><span class=\"kp\">apply</span><span class=\"o\">(</span><span class=\"n\">urule</span><span class=\"w\"> </span><span class=\"n\">imp</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">fact</span><span class=\"w\"> </span><span class=\"n\">z</span><span class=\"o\">)+</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Here's the code-golf version:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span>\n<span class=\"w\">  </span><span class=\"kp\">assumes</span><span class=\"w\"> </span><span class=\"s\">‹example []›</span>\n<span class=\"w\">  </span><span class=\"kp\">assumes</span><span class=\"w\"> </span><span class=\"s\">‹⋀xs ys. (example xs ⟹ example ys ⟹ example (xs @ ys))›</span>\n<span class=\"w\">  </span><span class=\"kp\">shows</span><span class=\"w\"> </span><span class=\"s\">‹example (take 0 [1])›</span>\n<span class=\"w\">  </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">urule</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">rr</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">assms</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"c\">(*resolves with assumptions repeatedly*)</span>\n</code></pre></div>",
        "id": 479911852,
        "sender_full_name": "Kevin Kappelmann",
        "timestamp": 1730390772
    },
    {
        "content": "<p>urule apparently seems to be able unify \"take 0 [1} = []\" so (urule z) works</p>",
        "id": 479912148,
        "sender_full_name": "irvin",
        "timestamp": 1730390855
    },
    {
        "content": "<p>Here's a \"funny\" way to prove it:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span>\n<span class=\"w\">  </span><span class=\"kp\">assumes</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">uhint</span><span class=\"o\">]:</span><span class=\"w\"> </span><span class=\"s\">‹example []›</span>\n<span class=\"w\">  </span><span class=\"kp\">shows</span><span class=\"w\"> </span><span class=\"s\">‹example (take 0 [1])›</span>\n<span class=\"w\">  </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">urule</span><span class=\"w\"> </span><span class=\"n\">TrueI</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Since, at the end of the day, all true propositions are just equal to <code>True</code>... <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 479912819,
        "sender_full_name": "Kevin Kappelmann",
        "timestamp": 1730391031
    },
    {
        "content": "<p>I've tried looking up <code>urule</code> but can't find anything. Is there a place to read about it?</p>\n<p>An alternative solution is to phrase my lemmas with <code>.. ==&gt; zs = xs @ ys ==&gt; example zs</code> instead, to make <code>rule</code> work, but that's also a bit tedious.</p>",
        "id": 479938900,
        "sender_full_name": "Jonathan Lindegaard Starup",
        "timestamp": 1730399832
    },
    {
        "content": "<p>I dont think there any documentation on urule and the only public work which uses it is the transport library</p>",
        "id": 479941880,
        "sender_full_name": "irvin",
        "timestamp": 1730400985
    },
    {
        "content": "<p>Im not sure how to intuitively explain it. There are some examples here also <a href=\"https://www.isa-afp.org/sessions/ml_unification/#E_Unification_Examples\">https://www.isa-afp.org/sessions/ml_unification/#E_Unification_Examples</a></p>",
        "id": 479942243,
        "sender_full_name": "irvin",
        "timestamp": 1730401137
    }
]