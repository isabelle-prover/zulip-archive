[
    {
        "content": "<p>I have situations where my current facts contain facts that match some of  the premises of a rule I wish to apply and may also include additional ones.  Doing \"then have mygoal proof(rule myrule)\" doesn't work as the list of premises  in myrule does not match the list of current facts.</p>\n<p>For example, my current facts are A B C, I need to prove P and  I have a rule B ⇒ A ⇒ D ⇒ P. </p>\n<p>Is there a way of applying the rule so that the appropriate ordering of current facts is done automatically  so that the rule can be applied.  If not can Eisbach help?</p>",
        "id": 207233231,
        "sender_full_name": "Mark Wassell",
        "timestamp": 1597737825
    },
    {
        "content": "<p>By using <code>from</code> instead of <code>then</code> you can reorder the facts, e.g. <code>from this(2,3,1) have ...</code></p>",
        "id": 207233455,
        "sender_full_name": "Lukas Stevens",
        "timestamp": 1597738013
    },
    {
        "content": "<p>Thanks, I handn't throught to use this( &lt;list of numbers&gt; ). </p>\n<p>I am still interested in any automatic method of finding the ordering as the proof is not robust if the ordering of the current facts changes. The use case I have in mind is inductive predicate proofs where the 'case' introduces a number of facts and the order can change if I make a change to the rule that introduces new premises or deletes them.</p>",
        "id": 207234010,
        "sender_full_name": "Mark Wassell",
        "timestamp": 1597738495
    },
    {
        "content": "<p>I am not sure if something like this exists. In some cases it would quite hard to discern the right ordering, for example if you have the rule <code>x &lt; y ==&gt; y &lt; z ==&gt; x &lt; z</code></p>",
        "id": 207234224,
        "sender_full_name": "Lukas Stevens",
        "timestamp": 1597738653
    },
    {
        "content": "<p>I guess you could try something like <code>by (rule myrule; rule this; fail)</code></p>",
        "id": 207234231,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1597738658
    },
    {
        "content": "<p>but depending on how much ambiguity there is, that might cause a lot of backtracking</p>",
        "id": 207234303,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1597738686
    },
    {
        "content": "<p>if there is no ambiguity, it should work without problems</p>",
        "id": 207234326,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1597738700
    },
    {
        "content": "<p>as Lukas said, it is not always the case that there is a clear \"correct\" ordering, so I don't think there is a builtin Isar method that tries to do something like that</p>",
        "id": 207234384,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1597738748
    },
    {
        "content": "<p>You might want to try my <code>fuzzy_rule</code> method: <a href=\"https://github.com/peterzeller/isabelle_fuzzy_rule\">https://github.com/peterzeller/isabelle_fuzzy_rule</a><br>\nIt's an attempt to get rid of the strict ordering and strict matching requirements of <code>rule</code></p>",
        "id": 207298075,
        "sender_full_name": "Peter Zeller",
        "timestamp": 1597776057
    },
    {
        "content": "<p>Thanks, I will take a look. The matching requirement was another thing I was looking for some flexibility on.</p>",
        "id": 207376246,
        "sender_full_name": "Mark Wassell",
        "timestamp": 1597820626
    }
]