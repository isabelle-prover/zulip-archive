[
    {
        "content": "<p>Hi, I wrote this function and added a definition at the end </p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">function</span><span class=\"w\"> </span><span class=\"n\">apply_divisor_module_list</span><span class=\"w\"> </span><span class=\"o\">::</span>\n<span class=\"w\">  </span><span class=\"s\">\"'a::linorder Result × 'b set StructVotes × ('a::linorder, 'b set) Seats ⇒</span>\n<span class=\"s\">   'b set list ⇒ 'a::linorder set ⇒ ('a::linorder, 'b set) Seats ⇒</span>\n<span class=\"s\">   'b set StructVotes ⇒ 'b set StructVotes ⇒ nat list ⇒</span>\n<span class=\"s\">   ('a::linorder Result × 'b set StructVotes × ('a::linorder, 'b set) Seats) list\"</span><span class=\"w\"> </span><span class=\"kp\">where</span>\n<span class=\"s\">\"apply_divisor_module_list input (party # parties) indexes seats votes fract_votes ps =</span>\n<span class=\"s\">    (if party = {} then []</span>\n<span class=\"s\">     else let res = fst (input);</span>\n<span class=\"s\">              (result, new_fractvotes, new_seats) =</span>\n<span class=\"s\">                  divisor_module res party indexes seats votes fract_votes ps</span>\n<span class=\"s\">          in (result, new_fractvotes, new_seats) #</span>\n<span class=\"s\">        apply_divisor_module_list (result, new_fractvotes, new_seats) parties indexes seats votes fract_votes ps)\"</span>\n\n<span class=\"c\">(* example *)</span>\n<span class=\"k\">definition</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"nat\"</span><span class=\"w\"> </span><span class=\"kp\">where</span>\n<span class=\"s\">\"x = 3\"</span>\n</code></pre></div>\n<p>but i get the error \"bad context for command \"definition\" - using reuse state\".  I am almost sure it's about syntax but how can I solve?</p>",
        "id": 407735610,
        "sender_full_name": "Salvatore Francesco Rossetta",
        "timestamp": 1702476751
    },
    {
        "content": "<p>There is a difference between <code>fun</code> and <code>function</code>. When you declare a function with <code>function</code>, you have to prove a bunch of things, namely that the function definition equations are exhaustive and non-overlapping. Usually, a combination of <code>pat_completness</code> and <code>auto</code> does the trick. When you use <code>fun</code>, this is done automatically.</p>\n<p>Unlike <code>fun</code>, the <code>function</code> command also does not prove termination automatically. You have to manually do this, e.g. in most cases a <code>termination by lexicographic_order</code> does the trick. See the tutorial on the function package: <a href=\"https://isabelle.in.tum.de/dist/Isabelle2023/doc/functions.pdf\">https://isabelle.in.tum.de/dist/Isabelle2023/doc/functions.pdf</a></p>\n<p>Any particular reason why you're using <code>function</code> instead of <code>fun</code> here?</p>\n<p>So the problem here is that after calling <code>function</code>, you are still in ‘proof mode’ because there is something you have to prove. However, you cannot use<code>definition</code> in proof mode. Hence the error.</p>",
        "id": 407738881,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1702477704
    },
    {
        "content": "<p><a href=\"/user_uploads/14278/8Y96aeRorpO1EayK8lHFZmUn/20231213_15h39m48s_grim.png\">Handy graphic in the function manual</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/14278/8Y96aeRorpO1EayK8lHFZmUn/20231213_15h39m48s_grim.png\" title=\"Handy graphic in the function manual\"><img src=\"/user_uploads/14278/8Y96aeRorpO1EayK8lHFZmUn/20231213_15h39m48s_grim.png\"></a></div>",
        "id": 407741322,
        "sender_full_name": "Lukas Stevens",
        "timestamp": 1702478409
    },
    {
        "content": "<p>I was using function because I think I read it was more general than fun. Indeed when changing now I only had this warning:</p>\n<p>Missing patterns in function definition:<br>\n⋀a c d e f g. apply_divisor_module_list a [] c d e f g = undefined </p>\n<p>But after fixing this it was fine. Thanks.</p>",
        "id": 407769789,
        "sender_full_name": "Salvatore Francesco Rossetta",
        "timestamp": 1702486070
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"671670\">Salvatore Francesco Rossetta</span> <a href=\"#narrow/stream/238552-Beginner-Questions/topic/Bad.20context.20for.20command.20.22definition.22.20-.20using.20reuse.20state/near/407769789\">said</a>:</p>\n<blockquote>\n<p>I was using function because I think I read it was more general than fun.</p>\n</blockquote>\n<p>Yes, it is more general but therefore also more difficult to use. I always use the simplest tool possible. In the order of complexity, the usual tools for defining functions are <code>definition</code>, <code>primrec</code>, <code>fun</code>, and <code>function</code>.</p>",
        "id": 407776687,
        "sender_full_name": "Wolfgang Jeltsch",
        "timestamp": 1702488302
    },
    {
        "content": "<p>could you briefly say the difference between <code>primrec</code> and its neighbors?</p>",
        "id": 407875410,
        "sender_full_name": "Yong Kiam",
        "timestamp": 1702529596
    },
    {
        "content": "<p>primrec is like fun (recursive functions), but only for primitive recursion: the patterns must exactly the constructors of the datatype. For example this:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">primrec</span><span class=\"w\"> </span><span class=\"n\">fib</span><span class=\"w\"> </span><span class=\"kp\">where</span>\n<span class=\"s\">‹fib 0 = 0›</span><span class=\"w\"> </span><span class=\"o\">|</span>\n<span class=\"s\">‹fib (Suc 1) = 1›</span>\n</code></pre></div>\n<p>does not work because you only match 0 and Suc n.</p>",
        "id": 407882492,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1702533111
    },
    {
        "content": "<p>primrec is simpler and does not generate a new inductive principle (because it is identical to the default one from the type)</p>",
        "id": 407882607,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1702533145
    },
    {
        "content": "<p><code>primrec</code> also works better in places where you have to prove something about the function automatically, such as that it is measurable, or proving a transfer rule. Because you can simply once and for all prove measurability of the primitive recursion operator, or a transfer rule for the primitive recursion operator.</p>\n<p>If you define a function with <code>fun</code> you have to do manual work to do this.</p>",
        "id": 407909553,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1702543227
    }
]