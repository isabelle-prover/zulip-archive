[
    {
        "content": "<p>Hi,</p>\n<p>I am a beginner learning to use Isabelle. I am trying to define big Oh, and prove a basic property. However, I am getting failures:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">theory</span><span class=\"w\"> </span><span class=\"n\">Scratch</span>\n<span class=\"w\">  </span><span class=\"kp\">imports</span><span class=\"w\"> </span><span class=\"n\">Main</span><span class=\"w\"> </span><span class=\"s\">\"HOL.Real\"</span>\n\n<span class=\"k\">begin</span>\n\n<span class=\"k\">definition</span><span class=\"w\"> </span><span class=\"n\">big_O</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"(nat ⇒ real) ⇒ (nat ⇒ real) ⇒ bool\"</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"kp\">infix</span><span class=\"w\"> </span><span class=\"s\">\"∈ O\"</span><span class=\"w\"> </span><span class=\"n\">50</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"kp\">where</span><span class=\"w\"> </span><span class=\"s\">\"f ∈ O g ⟷ (∃c&gt;0. ∃n0. ∀n≥n0. abs (f n) ≤ c * abs (g n))\"</span>\n\n<span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">square_in_O_square_plus_linear</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"λn. of_nat (n * n) ∈ O (λn. of_nat (n * n) + of_nat n)\"</span>\n\n<span class=\"k\">end</span>\n</code></pre></div>\n<p>The issue I get is:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"n\">Type</span><span class=\"w\"> </span><span class=\"n\">unification</span><span class=\"w\"> </span><span class=\"n\">failed</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">No</span><span class=\"w\"> </span><span class=\"n\">type</span><span class=\"w\"> </span><span class=\"n\">arity</span><span class=\"w\"> </span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"n\">semiring_1</span>\n\n<span class=\"n\">Type</span><span class=\"w\"> </span><span class=\"n\">error</span><span class=\"w\"> </span><span class=\"kp\">in</span><span class=\"w\"> </span><span class=\"n\">application</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">incompatible</span><span class=\"w\"> </span><span class=\"n\">operand</span><span class=\"w\"> </span><span class=\"n\">type</span>\n\n<span class=\"n\">Operator</span><span class=\"o\">:</span><span class=\"w\">  </span><span class=\"o\">(</span><span class=\"n\">∈</span><span class=\"w\"> </span><span class=\"n\">O</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"w\"> </span><span class=\"n\">⇒</span><span class=\"w\"> </span><span class=\"n\">real</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">⇒</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"w\"> </span><span class=\"n\">⇒</span><span class=\"w\"> </span><span class=\"n\">real</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">⇒</span><span class=\"w\"> </span><span class=\"n\">bool</span>\n<span class=\"n\">Operand</span><span class=\"o\">:</span><span class=\"w\">   </span><span class=\"n\">of_nat</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"n\">*</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"o\">??</span><span class=\"n n-Type\">'a</span>\n\n<span class=\"n\">Coercion</span><span class=\"w\"> </span><span class=\"n\">Inference</span><span class=\"o\">:</span>\n\n<span class=\"n\">Local</span><span class=\"w\"> </span><span class=\"n\">coercion</span><span class=\"w\"> </span><span class=\"n\">insertion</span><span class=\"w\"> </span><span class=\"n\">on</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">operand</span><span class=\"w\"> </span><span class=\"n\">failed</span><span class=\"o\">:</span>\n<span class=\"n\">No</span><span class=\"w\"> </span><span class=\"n\">type</span><span class=\"w\"> </span><span class=\"n\">arity</span><span class=\"w\"> </span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"n\">semiring_1</span>\n\n<span class=\"n\">Now</span><span class=\"w\"> </span><span class=\"n\">trying</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">infer</span><span class=\"w\"> </span><span class=\"n\">coercions</span><span class=\"w\"> </span><span class=\"n\">globally.</span>\n\n<span class=\"n\">Coercion</span><span class=\"w\"> </span><span class=\"n\">inference</span><span class=\"w\"> </span><span class=\"n\">failed</span><span class=\"o\">:</span>\n<span class=\"n\">weak</span><span class=\"w\"> </span><span class=\"n\">unification</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">subtype</span><span class=\"w\"> </span><span class=\"n\">constraints</span><span class=\"w\"> </span><span class=\"n\">fails</span>\n<span class=\"n\">Clash</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">types</span><span class=\"w\"> </span><span class=\"s\">\"_ ⇒ _\"</span><span class=\"w\"> </span><span class=\"kp\">and</span><span class=\"w\"> </span><span class=\"s\">\"bool\"</span>\n</code></pre></div>\n<p>Why is the type inference failing? I have converted to reals using of_nat?</p>\n<p>Any help is greatly appreciated.</p>",
        "id": 418709385,
        "sender_full_name": "zigzagdoom",
        "timestamp": 1706558073
    },
    {
        "content": "<p>I am doing  Isabelle for too long apparently, because I find the error message very clear actually</p>",
        "id": 418710602,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1706558571
    },
    {
        "content": "<p>The typing error indicates that Isabelle parses your expression as <code>(∈ O) (of_nat (n * n))</code></p>",
        "id": 418710688,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1706558615
    },
    {
        "content": "<p>which is not what you want</p>",
        "id": 418710701,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1706558621
    },
    {
        "content": "<p>If can live with ambiguous parse trees:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">definition</span><span class=\"w\"> </span><span class=\"n\">big_O</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"(nat ⇒ real) ⇒ (nat ⇒ real) ⇒ bool\"</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"s\">\"_ ∈ O _\"</span><span class=\"w\"> </span><span class=\"n\">99</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"kp\">where</span><span class=\"w\"> </span><span class=\"s\">\"(f ∈ O g) ⟷ (∃c&gt;0. ∃n0. ∀n≥n0. abs (f n) ≤ c * abs (g n))\"</span>\n\n<span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">square_in_O_square_plus_linear</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"λn. of_nat (n * n) ∈ O (λn. of_nat (n * n) + of_nat n)\"</span>\n</code></pre></div>",
        "id": 418711149,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1706558802
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"233198\">Mathias Fleury</span> <a href=\"#narrow/stream/238552-Beginner-Questions/topic/Big.20Oh.20Basic.20Proof.20Failing.3A.20Type.20unification.20failed.3A.20No.20type/near/418710602\">said</a>:</p>\n<blockquote>\n<p>I am doing  Isabelle for too long apparently, because I find the error message very clear actually</p>\n</blockquote>\n<p>Thank you <span class=\"user-mention\" data-user-id=\"233198\">@Mathias Fleury</span> , </p>\n<p>Is there any way I can avoid the ambiguity caused by ∈ O?</p>",
        "id": 418732175,
        "sender_full_name": "zigzagdoom",
        "timestamp": 1706567366
    },
    {
        "content": "<p>you may want to check out how it was set up by Manuel Eberl: <a href=\"https://isabelle.in.tum.de/library/HOL/HOL-Library/Landau_Symbols.html\">https://isabelle.in.tum.de/library/HOL/HOL-Library/Landau_Symbols.html</a> (short answer: O actually gives you a set, and \\in is actually set inclusion)</p>",
        "id": 418765143,
        "sender_full_name": "Yong Kiam",
        "timestamp": 1706588502
    }
]