[
    {
        "content": "<p>I'm trying to understand certain aspects of the existing HOL libraries for structuring a project.</p>\n<p>In <a href=\"https://isabelle.in.tum.de/library/HOL/HOL/Boolean_Algebras.html\">HOL/Boolean_Algebras.thy</a>, Boolean algebras are defined in two different (related) ways. There's the <code>abstract_boolean_algebra</code> locale, which builds off of the <code>abel_semigroup</code> locale from elsewhere, then later there's the <code>boolean_algebra</code> class and the <code>boolean_algebra</code> sublocale of <code>abstract_boolean_algebra</code>. </p>\n<p>Unpacking definitions, Boolean algebras end up being objects built on types in a direct way (i.e., everything in the underlying type is an element of the Boolean algebra). This is as opposed to the apparent design philosophy in <a href=\"https://isabelle.in.tum.de/library/HOL/HOL-Algebra/Group.html\">HOL/Algebra/Group.thy</a> where the <code>group</code> locale ultimately builds off of the <code>partial_object</code> record, which is a type <code>'a</code> together with a designated subset <code>carrier :: \"'a set\"</code>. My understanding is that this is so that we can smoothly get around not having dependent types (i.e., if we want to talk about an infinite family of groups, it will be implemented with the <code>monoid_scheme</code> record meaning that the groups' carriers will all be various subsets of some fixed set).</p>\n<p>First of all, am I understanding the design principles here correctly?</p>\n<p>Second of all, is the treatment of Boolean algebras in HOL/Boolean_Algebras.thy 'out of date' since it's not using something like the <code>partial_object</code> record? As it sits, there's no good way to talk about infinite families of Boolean algebras, right? (There very well might be issues involving optimizing automation that I don't understand here.)<br>\nDoes this mean that if I want to do something that might require this, I should avoid the existing <code>boolean_algebra</code> locale?</p>",
        "id": 421494837,
        "sender_full_name": "James Hanson",
        "timestamp": 1707931333
    },
    {
        "content": "<p>About the first question.</p>\n<p>The hierarchy of algebraic structures in HOL is sort of duplicated in HOL/Algebra because the one in HOL uses type classes which are nice for proving things <em>within</em> the type class since you don't need to worry about the carrier set. This, however, gives you weaker results as soon as you have a structure that does not cover the whole carrier type (you can use Types_To_Sets to remedy but it introduces a new axiom). For this reason, HOL/Algebra uses the explicit carrier sets.</p>",
        "id": 421498503,
        "sender_full_name": "Lukas Stevens",
        "timestamp": 1707932561
    },
    {
        "content": "<p>Thanks. If I don't care about consistency strength, is there any particular reason to avoid using Types_To_Sets?</p>",
        "id": 421499269,
        "sender_full_name": "James Hanson",
        "timestamp": 1707932795
    },
    {
        "content": "<p>To do reason about algebra, you should definitely use <code>HOL-Algebra</code>. If you just apply results, you might get away with <code>Types_To_Sets</code>. But <code>Types_To_Sets</code> is also not straightforward to use because you need to explicitly name all theorems that you want to transfer from the type class to the settting with the explicit carrier set. Sometimes using <code>transfer</code> in this setting is non-trivial. On the other side, it has definitely been used that way for non-trivial things. See <a href=\"https://isabelle.in.tum.de/library/HOL/HOL-Types_To_Sets/Linear_Algebra_On.html\">here</a>.</p>",
        "id": 421500032,
        "sender_full_name": "Lukas Stevens",
        "timestamp": 1707933024
    },
    {
        "content": "<p>I think this also sort of answers the second question. To reason about infinite families of boolean algebras, you should use the HOL-Algebra style.</p>",
        "id": 421501765,
        "sender_full_name": "Lukas Stevens",
        "timestamp": 1707933561
    },
    {
        "content": "<p>Right okay, but this hasn't already been done somewhere, right? I would need to write that too?</p>",
        "id": 421502010,
        "sender_full_name": "James Hanson",
        "timestamp": 1707933633
    },
    {
        "content": "<p>I am not well versed about the content of HOL-Algebra. But I also don't find anything on <a href=\"http://search.isabelle.in.tum.de\">search.isabelle.in.tum.de</a>. So you probably need to do it yourself. You could of course use Types_To_Sets to get started and then work with the HOL-Algebra style from there.</p>",
        "id": 421502922,
        "sender_full_name": "Lukas Stevens",
        "timestamp": 1707933930
    }
]