[
    {
        "content": "<p>Hi. I tried to bundle some locale-specific notation using <code>bundle</code> but get a <code>bad context</code> error. Defining the <code>bundle</code> outside of the locale does not work as desired because locale parameter are then explicit and have to be reflected in the syntax -- or so it seems. Is there a way to  package locale-specific notation together?</p>",
        "id": 340053698,
        "sender_full_name": "Hanno Becker",
        "timestamp": 1678180291
    },
    {
        "content": "<p>Can you give a minimal example to show what you tried?</p>",
        "id": 340056059,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1678180969
    },
    {
        "content": "<p>Here's some dummy example:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">definition</span><span class=\"w\"> </span><span class=\"n\">dummy</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">‹'a ⇒ 'a›</span><span class=\"w\"> </span><span class=\"kp\">where</span>\n<span class=\"w\">  </span><span class=\"s\">‹dummy x ≡ x›</span>\n\n<span class=\"k\">locale</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">  </span><span class=\"kp\">fixes</span><span class=\"w\"> </span><span class=\"n\">bar</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">‹'a ⇒ 'b ⇒ 'c ⇒ bool›</span>\n<span class=\"k\">begin</span>\n<span class=\"w\">  </span><span class=\"k\">abbreviation</span><span class=\"w\"> </span><span class=\"n\">bar_with_dummy</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">‹'a ⇒ 'b ⇒ 'c ⇒ bool›</span>\n<span class=\"w\">     </span><span class=\"kp\">where</span><span class=\"w\"> </span><span class=\"s\">‹bar_with_dummy a b c ≡ dummy (bar a b c)›</span>\n\n<span class=\"w\">  </span><span class=\"k\">abbreviation</span><span class=\"w\"> </span><span class=\"n\">bar_no_dummy</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">‹'a ⇒ 'b ⇒ 'c ⇒ bool›</span>\n<span class=\"w\">     </span><span class=\"kp\">where</span><span class=\"w\"> </span><span class=\"s\">‹bar_no_dummy a b c ≡ (bar a b c)›</span>\n<span class=\"k\">end</span>\n\n<span class=\"k\">bundle</span><span class=\"w\"> </span><span class=\"n\">bar_notation_autodummy</span><span class=\"w\">    </span><span class=\"k\">begin</span><span class=\"w\"> </span><span class=\"k\">notation</span><span class=\"w\">    </span><span class=\"n\">foo.bar_with_dummy</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"s\">\"_ ⋄ _ ↝ _\"</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"k\">end</span>\n<span class=\"k\">bundle</span><span class=\"w\"> </span><span class=\"n\">bar_no_notation_autodummy</span><span class=\"w\"> </span><span class=\"k\">begin</span><span class=\"w\"> </span><span class=\"k\">no_notation</span><span class=\"w\"> </span><span class=\"n\">foo.bar_with_dummy</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"s\">\"_ ⋄ _ ↝ _\"</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"k\">end</span>\n<span class=\"k\">bundle</span><span class=\"w\"> </span><span class=\"n\">bar_notation_raw</span><span class=\"w\">          </span><span class=\"k\">begin</span><span class=\"w\"> </span><span class=\"k\">notation</span><span class=\"w\">    </span><span class=\"n\">foo.bar_no_dummy</span><span class=\"w\">   </span><span class=\"o\">(</span><span class=\"s\">\"_ ⋄ _ ↝ _\"</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"k\">end</span>\n<span class=\"k\">bundle</span><span class=\"w\"> </span><span class=\"n\">bar_no_notation_raw</span><span class=\"w\">       </span><span class=\"k\">begin</span><span class=\"w\"> </span><span class=\"k\">no_notation</span><span class=\"w\"> </span><span class=\"n\">foo.bar_no_dummy</span><span class=\"w\">   </span><span class=\"o\">(</span><span class=\"s\">\"_ ⋄ _ ↝ _\"</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"k\">end</span>\n\n<span class=\"k\">context</span><span class=\"w\"> </span><span class=\"n\">foo</span>\n<span class=\"k\">begin</span>\n<span class=\"w\">  </span><span class=\"n\">unbundle</span><span class=\"w\"> </span><span class=\"n\">bar_notation_autodummy</span>\n<span class=\"w\">  </span><span class=\"n\">―‹WANT</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">dummy</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">bar</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"o\">)</span><span class=\"n\">›</span>\n<span class=\"w\">  </span><span class=\"n\">―‹GET</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">λca.</span><span class=\"w\"> </span><span class=\"n\">dummy</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"n\">ca</span><span class=\"o\">),</span><span class=\"w\"> </span><span class=\"n\">because</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"k\">locale</span><span class=\"w\"> </span><span class=\"n\">parameter›</span>\n<span class=\"w\">  </span><span class=\"kt\">term</span><span class=\"w\"> </span><span class=\"s\">‹a ⋄ b ↝ c›</span>\n\n<span class=\"w\">  </span><span class=\"n\">―‹The</span><span class=\"w\"> </span><span class=\"k\">notation</span><span class=\"w\"> </span><span class=\"n\">should</span><span class=\"w\"> </span><span class=\"n\">really</span><span class=\"w\"> </span><span class=\"n\">be</span><span class=\"w\"> </span><span class=\"n\">registered</span><span class=\"w\"> </span><span class=\"n\">within</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"k\">locale</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">but</span><span class=\"w\"> </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"n\">it</span><span class=\"w\"> </span><span class=\"n\">appears</span>\n<span class=\"w\">    </span><span class=\"n\">it</span><span class=\"w\"> </span><span class=\"n\">can't</span><span class=\"w\"> </span><span class=\"n\">be</span><span class=\"w\"> </span><span class=\"n\">bundled</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Bad</span><span class=\"w\"> </span><span class=\"k\">context</span><span class=\"w\"> </span><span class=\"kp\">for</span><span class=\"w\"> </span><span class=\"n\">command</span><span class=\"w\"> </span><span class=\"s\">\"bundle\"</span><span class=\"n\">⌂›</span>\n<span class=\"w\">  </span><span class=\"k\">bundle</span><span class=\"w\"> </span><span class=\"n\">you_cant_do_that</span><span class=\"w\"> </span><span class=\"k\">begin</span><span class=\"w\"> </span><span class=\"k\">notation</span><span class=\"w\"> </span><span class=\"n\">foo.bar_with_dummy</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"s\">\"_ ⋄ _ ↝ _\"</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"k\">end</span>\n<span class=\"k\">end</span>\n</code></pre></div>",
        "id": 340060248,
        "sender_full_name": "Hanno Becker",
        "timestamp": 1678182243
    },
    {
        "content": "<p>Not an expert on locales and bundles but here's my best guess: I don't think this is possible. At least as of now, you can only use the <code>bundle</code> command in a restricted form inside local theory contexts, namely e.g. <code>bundle foo = [[simp_trace, show_types]]</code>.</p>\n<p>Now what you can do and what I think I've seen people do is just use a sublocale instead:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">locale</span><span class=\"w\"> </span><span class=\"n\">foo_with_notation</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">foo</span>\n<span class=\"k\">begin</span>\n<span class=\"k\">notation</span><span class=\"w\"> </span><span class=\"n\">bar_with_dummy</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"s\">\"_ ⋄ _ ↝ _\"</span><span class=\"o\">)</span>\n<span class=\"k\">end</span>\n</code></pre></div>\n<p>If you want the notation, you just interpret <code>foo_with_notation</code> in addition to <code>foo</code>.</p>",
        "id": 340062363,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1678182823
    },
    {
        "content": "<p>Ah, that's an interesting workaround... I will have a look if that's feasible in my context. Thanks!</p>",
        "id": 340063211,
        "sender_full_name": "Hanno Becker",
        "timestamp": 1678183070
    }
]