[
    {
        "content": "<p>Say I have a locale with like a dozen different declarations and four polymorphic types. The different declarations are all functions between the four polymorphic types. How can I bundle all this data into one thing like a record type? It's my understanding that records can only be polymorphic in a single variable. What's the closest thing I can get to a record that allows me to have polymorphism in multiple type variables?</p>",
        "id": 399195243,
        "sender_full_name": "Patrick Nicodemus",
        "timestamp": 1698623892
    },
    {
        "content": "<p>Here's one way to get record types with multiple polymorphism.</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">locale</span><span class=\"w\"> </span><span class=\"n\">precategory</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">  </span><span class=\"kp\">fixes</span><span class=\"w\"> </span><span class=\"n\">precategory</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"('a set) × ('a ⇒ 'a ⇒ 'b set) × ('a ⇒ 'b) × ('a ⇒ 'a ⇒ 'a ⇒ 'b ⇒ 'b ⇒ 'b)\"</span>\n\n<span class=\"k\">definition</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"kp\">in</span><span class=\"w\"> </span><span class=\"n\">precategory</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">obj</span><span class=\"w\"> </span><span class=\"kp\">where</span><span class=\"w\"> </span><span class=\"s\">\"obj = fst precategory\"</span>\n\n<span class=\"k\">definition</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"kp\">in</span><span class=\"w\"> </span><span class=\"n\">precategory</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">hom</span><span class=\"w\"> </span><span class=\"kp\">where</span><span class=\"w\"> </span><span class=\"s\">\"hom = fst (snd precategory)\"</span>\n\n<span class=\"k\">definition</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"kp\">in</span><span class=\"w\"> </span><span class=\"n\">precategory</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">id</span><span class=\"w\"> </span><span class=\"kp\">where</span><span class=\"w\"> </span><span class=\"s\">\"id = fst (snd (snd precategory))\"</span>\n\n<span class=\"k\">definition</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"kp\">in</span><span class=\"w\"> </span><span class=\"n\">precategory</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">comp</span><span class=\"w\"> </span><span class=\"kp\">where</span><span class=\"w\"> </span><span class=\"s\">\"comp = snd (snd (snd precategory))\"</span>\n\n<span class=\"k\">locale</span><span class=\"w\"> </span><span class=\"n\">category</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">  </span><span class=\"n\">C</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">precategory</span><span class=\"w\"> </span><span class=\"n\">precategory</span><span class=\"w\"> </span><span class=\"kp\">for</span><span class=\"w\"> </span><span class=\"n\">precategory</span><span class=\"w\"> </span><span class=\"o\">+</span>\n<span class=\"w\">  </span><span class=\"kp\">assumes</span><span class=\"w\"> </span><span class=\"n\">id_def</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"x ∈ C.obj ⟹ (C.id x) ∈ (C.hom x x)\"</span>\n<span class=\"w\">  </span><span class=\"kp\">and</span><span class=\"w\"> </span><span class=\"n\">comp_def</span><span class=\"w\"> </span><span class=\"o\">:</span>\n<span class=\"w\">  </span><span class=\"s\">\"⟦ x ∈ C.obj ; y ∈ C.obj ; z ∈ C.obj ;</span>\n<span class=\"s\">    f ∈ (C.hom x y); g ∈ (C.hom y z) ⟧ ⟹ (C.comp x y z f g) ∈ (C.hom x z)\"</span><span class=\"w\"> </span><span class=\"kp\">and</span>\n<span class=\"w\">  </span><span class=\"n\">id_left</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"⟦ x ∈ C.obj ; y ∈ C.obj ; f ∈ C.hom x y ⟧ ⟹</span>\n<span class=\"s\">    (C.comp x x y (C.id x) f ) =f\"</span><span class=\"w\"> </span><span class=\"kp\">and</span>\n<span class=\"w\">  </span><span class=\"n\">id_right</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"⟦ x ∈ obj ; y ∈ obj ; f ∈ hom x y ⟧ ⟹</span>\n<span class=\"s\">    (C.comp x y y f (C.id y)) = f\"</span><span class=\"w\"> </span><span class=\"kp\">and</span>\n<span class=\"w\">  </span><span class=\"n\">assoc</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"⟦ w ∈ C.obj; x ∈ C.obj; y ∈ C.obj; z ∈ C.obj ;</span>\n<span class=\"s\">      f ∈ hom w x; g ∈ hom x y; h ∈ hom y z ⟧ ⟹</span>\n<span class=\"s\">    C.comp w y z (C.comp w x y f g) h =</span>\n<span class=\"s\">    C.comp w x z f (C.comp x y z g h)\"</span>\n</code></pre></div>\n<p>Is there a more elegant way? What's idiomatic</p>",
        "id": 399197609,
        "sender_full_name": "Patrick Nicodemus",
        "timestamp": 1698625677
    },
    {
        "content": "<p>Never mind! I am being silly!<br>\nI did not realize that you could have record types with polymorphism across multiple type variables!<br>\nI typed <code>record 'a 'b</code> and saw that this was a syntax error and couldn't find any reference to record polymorphism in multiple variables.</p>",
        "id": 399200278,
        "sender_full_name": "Patrick Nicodemus",
        "timestamp": 1698627076
    }
]