[
    {
        "content": "<p>I need an injective function from <code>(int * int) =&gt; int</code>, e.g. Cantor's pairing function. Where is this formalised?</p>",
        "id": 237160985,
        "sender_full_name": "Lukas Stevens",
        "timestamp": 1620048822
    },
    {
        "content": "<p>like <a href=\"https://www.isa-afp.org/browser_info/current/AFP/Recursion-Theory-I/CPair.html\">https://www.isa-afp.org/browser_info/current/AFP/Recursion-Theory-I/CPair.html</a>?</p>",
        "id": 237161683,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1620049122
    },
    {
        "content": "<p>No need to turn to the AFP. You can use <code>prod_encode</code>/<code>prod_decode</code> from <code>HOL-Library.Nat_Bijection</code>. This is also used to prove the countability of products in <code>HOL-Library.Countable</code>.</p>",
        "id": 237162304,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1620049414
    },
    {
        "content": "<p>Thanks Manuel, I was hoping for something like that :D</p>",
        "id": 237162404,
        "sender_full_name": "Lukas Stevens",
        "timestamp": 1620049447
    },
    {
        "content": "<p>Unrelatedly, my favourite pairing function at least for theoretical purposes is <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>a</mi><mo separator=\"true\">,</mo><mi>b</mi><mo stretchy=\"false\">)</mo><mo>↦</mo><msup><mn>2</mn><mi>a</mi></msup><mo>⋅</mo><mo stretchy=\"false\">(</mo><mn>2</mn><mi>b</mi><mo>+</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(a,b) \\mapsto 2^a \\cdot (2b+1)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">a</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">↦</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.664392em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">a</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">2</span><span class=\"mord mathnormal\">b</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span>. It's much easier to see why this is bijective, and it's very easy to invert as well. The drawback is that it is not as economic as the other one.</p>",
        "id": 237162513,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1620049502
    },
    {
        "content": "<p>For my application, the function does not have to be economic.</p>",
        "id": 237162854,
        "sender_full_name": "Lukas Stevens",
        "timestamp": 1620049650
    },
    {
        "content": "<p>Yes but still, it's easier to take the one that's already in the library.</p>",
        "id": 237163344,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1620049857
    },
    {
        "content": "<p>I just like telling people about the one above because it's neat and few people seem to know about it.</p>",
        "id": 237163387,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1620049871
    },
    {
        "content": "<p>By the way, if you're wondering how I found <code>prod_encode</code>: I knew about <code>HOL-Library.Countable_Set</code> and figured there has to be a pairing function in there somewhere, and I was right. <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 237163555,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1620049940
    },
    {
        "content": "<p>Related question: are there any helpers for proving that combining bijective functions again yield a bijective function? Specifically, I am looking at the function <code>(λ(a, b). int_decode (prod_encode (int_encode a, int_encode b)))</code>.</p>",
        "id": 237164592,
        "sender_full_name": "Lukas Stevens",
        "timestamp": 1620050366
    },
    {
        "content": "<p>I tried a bit and only managed to prove it by taking annoyingly small steps</p>",
        "id": 237164782,
        "sender_full_name": "Lukas Stevens",
        "timestamp": 1620050434
    },
    {
        "content": "<p>*prove parts of it (until now)</p>",
        "id": 237165458,
        "sender_full_name": "Lukas Stevens",
        "timestamp": 1620050663
    },
    {
        "content": "<p>Write it with as a composition of bijective functions with <code>∘</code> and <code>map_prod</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">map_prod_bij</span><span class=\"o\">:</span>\n  <span class=\"kp\">assumes</span> <span class=\"s\">\"bij f\"</span> <span class=\"s\">\"bij g\"</span>\n  <span class=\"kp\">shows</span>   <span class=\"s\">\"bij (map_prod f g)\"</span>\n  <span class=\"k\">using</span> <span class=\"n\">assms</span> <span class=\"k\">unfolding</span> <span class=\"n\">bij_def</span> <span class=\"k\">by</span> <span class=\"o\">(</span><span class=\"n\">intro</span> <span class=\"n\">conjI</span> <span class=\"n\">prod.inj_map</span> <span class=\"n\">map_prod_surj</span><span class=\"o\">)</span> <span class=\"n\">auto</span>\n\n<span class=\"kn\">lemma</span> <span class=\"s\">\"(λ(a, b). int_decode (prod_encode (int_encode a, int_encode b))) =</span>\n<span class=\"s\">       int_decode ∘ prod_encode ∘ map_prod int_encode int_encode\"</span>\n  <span class=\"k\">by</span> <span class=\"n\">auto</span>\n\n<span class=\"kn\">lemma</span> <span class=\"s\">\"bij (int_decode ∘ prod_encode ∘ map_prod int_encode int_encode)\"</span>\n  <span class=\"k\">by</span> <span class=\"o\">(</span><span class=\"n\">intro</span> <span class=\"n\">map_prod_bij</span> <span class=\"n\">bij_comp</span> <span class=\"n\">bij_int_encode</span> <span class=\"n\">bij_prod_encode</span> <span class=\"n\">bij_int_decode</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 237165591,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1620050728
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 237166277,
        "sender_full_name": "Lukas Stevens",
        "timestamp": 1620051042
    }
]