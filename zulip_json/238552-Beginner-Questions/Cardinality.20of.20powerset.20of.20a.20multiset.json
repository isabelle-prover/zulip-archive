[
    {
        "content": "<p>I am looking for an existing proof of this:</p>\n<div class=\"codehilite\"><pre><span></span><code>  fixes A::&quot;&#39;a multiset&quot;\n  shows  &quot;card { B . B ⊆# A } = prod (λx. count A x + 1) (set_mset A)&quot;\n</code></pre></div>\n<p>or alternatively a lemma that makes this trivial.</p>",
        "id": 220824778,
        "sender_full_name": "Mark Wassell",
        "timestamp": 1608755565
    },
    {
        "content": "<p>Usually, the best way to show a cardinality is to show a bijection to objects where the cardinality is obvious. In this case, an indexed product. It's a bit fiddly here since we need the elements outside the domain to get mapped to 0 (the standard approach using <code>PiE</code> from <code>HOL-Library.FuncSets</code> maps them to <code>undefined</code>. I therefore borrow <code>PiE_dflt</code> from one of my AFP entries for this:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">definition</span> <span class=\"n\">PiE_dflt</span> <span class=\"o\">::</span> <span class=\"s\">\"'a set ⇒ 'b ⇒ ('a ⇒ 'b set) ⇒ ('a ⇒ 'b) set\"</span>\n  <span class=\"kp\">where</span> <span class=\"s\">\"PiE_dflt A dflt B = {f. ∀x. (x ∈ A ⟶ f x ∈ B x) ∧ (x ∉ A ⟶ f x = dflt)}\"</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">restrict_PiE_dflt</span><span class=\"o\">:</span> <span class=\"s\">\"(λh. restrict h A) ` PiE_dflt A dflt B = PiE A B\"</span>\n<span class=\"k\">proof</span> <span class=\"o\">(</span><span class=\"n\">intro</span> <span class=\"n\">equalityI</span> <span class=\"n\">subsetI</span><span class=\"o\">)</span>\n  <span class=\"k\">fix</span> <span class=\"n\">h</span> <span class=\"k\">assume</span> <span class=\"s\">\"h ∈ (λh. restrict h A) ` PiE_dflt A dflt B\"</span>\n  <span class=\"k\">thus</span> <span class=\"s\">\"h ∈ PiE A B\"</span>\n    <span class=\"k\">by</span> <span class=\"o\">(</span><span class=\"n\">auto</span> <span class=\"n\">simp</span><span class=\"o\">:</span> <span class=\"n\">PiE_dflt_def</span><span class=\"o\">)</span>\n<span class=\"k\">next</span>\n  <span class=\"k\">fix</span> <span class=\"n\">h</span> <span class=\"k\">assume</span> <span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"s\">\"h ∈ PiE A B\"</span>\n  <span class=\"k\">hence</span> <span class=\"s\">\"restrict (λx. if x ∈ A then h x else dflt) A ∈ (λh. restrict h A) ` PiE_dflt A dflt B\"</span>\n    <span class=\"k\">by</span> <span class=\"o\">(</span><span class=\"n\">intro</span> <span class=\"n\">imageI</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">auto</span> <span class=\"n\">simp</span><span class=\"o\">:</span> <span class=\"n\">PiE_def</span> <span class=\"n\">extensional_def</span> <span class=\"n\">PiE_dflt_def</span><span class=\"o\">)</span>\n  <span class=\"k\">also</span> <span class=\"k\">have</span> <span class=\"s\">\"restrict (λx. if x ∈ A then h x else dflt) A = h\"</span>\n    <span class=\"k\">using</span> <span class=\"n\">h</span> <span class=\"k\">by</span> <span class=\"o\">(</span><span class=\"n\">auto</span> <span class=\"n\">simp</span><span class=\"o\">:</span> <span class=\"n\">fun_eq_iff</span><span class=\"o\">)</span>\n  <span class=\"k\">finally</span> <span class=\"k\">show</span> <span class=\"s\">\"h ∈ (λh. restrict h A) ` PiE_dflt A dflt B\"</span> <span class=\"ow\">.</span>\n<span class=\"k\">qed</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">card_PiE_dflt</span><span class=\"o\">:</span>\n  <span class=\"kp\">assumes</span> <span class=\"s\">\"finite A\"</span> <span class=\"s\">\"⋀x. x ∈ A ⟹ finite (B x)\"</span>\n  <span class=\"kp\">shows</span>   <span class=\"s\">\"card (PiE_dflt A d B) = (∏x∈A. card (B x))\"</span>\n<span class=\"k\">proof</span> <span class=\"o\">-</span>\n  <span class=\"k\">from</span> <span class=\"n\">assms</span> <span class=\"k\">have</span> <span class=\"s\">\"(∏x∈A. card (B x)) = card (PiE A B)\"</span>\n    <span class=\"k\">by</span> <span class=\"o\">(</span><span class=\"n\">intro</span> <span class=\"n\">card_PiE</span> <span class=\"o\">[</span><span class=\"n\">symmetric</span><span class=\"o\">])</span> <span class=\"n\">auto</span>\n  <span class=\"k\">also</span> <span class=\"k\">have</span> <span class=\"s\">\"PiE A B = (λf. restrict f A) ` PiE_dflt A d B\"</span>\n    <span class=\"k\">by</span> <span class=\"o\">(</span><span class=\"n\">rule</span> <span class=\"n\">restrict_PiE_dflt</span> <span class=\"o\">[</span><span class=\"n\">symmetric</span><span class=\"o\">])</span>\n  <span class=\"k\">also</span> <span class=\"k\">have</span> <span class=\"s\">\"card … = card (PiE_dflt A d B)\"</span>\n    <span class=\"k\">by</span> <span class=\"o\">(</span><span class=\"n\">intro</span> <span class=\"n\">card_image</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">force</span> <span class=\"n\">simp</span><span class=\"o\">:</span> <span class=\"n\">inj_on_def</span> <span class=\"n\">restrict_def</span> <span class=\"n\">fun_eq_iff</span> <span class=\"n\">PiE_dflt_def</span><span class=\"o\">)</span>\n  <span class=\"k\">finally</span> <span class=\"k\">show</span> <span class=\"o\">?</span><span class=\"n\">thesis</span> <span class=\"ow\">..</span>\n<span class=\"k\">qed</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">bij_betw_submultisets</span><span class=\"o\">:</span>\n  <span class=\"s\">\"bij_betw count {B. B ⊆# A} (PiE_dflt (set_mset A) 0 (λx. {0..count A x}))\"</span>\n<span class=\"k\">proof</span> <span class=\"o\">-</span>\n  <span class=\"k\">have</span> <span class=\"n\">is_multiset</span><span class=\"o\">:</span> <span class=\"s\">\"h ∈ multiset\"</span>\n    <span class=\"kp\">if</span> <span class=\"s\">\"h ∈ PiE_dflt (set_mset A) 0 (λx. {0..count A x})\"</span> <span class=\"kp\">for</span> <span class=\"n\">h</span>\n  <span class=\"k\">proof</span> <span class=\"o\">-</span>\n    <span class=\"k\">have</span> <span class=\"s\">\"finite {x. h x &gt; 0}\"</span>\n      <span class=\"k\">by</span> <span class=\"o\">(</span><span class=\"n\">rule</span> <span class=\"n\">finite_subset</span><span class=\"o\">[</span><span class=\"n\">of</span> <span class=\"o\">_</span> <span class=\"s\">\"set_mset A\"</span><span class=\"o\">])</span> <span class=\"o\">(</span><span class=\"n\">use</span> <span class=\"n\">that</span> <span class=\"kp\">in</span> <span class=\"err\">‹</span><span class=\"n\">force</span> <span class=\"n\">simp</span><span class=\"o\">:</span> <span class=\"n\">PiE_dflt_def</span><span class=\"err\">›</span><span class=\"o\">)+</span>\n    <span class=\"k\">thus</span> <span class=\"o\">?</span><span class=\"n\">thesis</span> <span class=\"k\">by</span> <span class=\"o\">(</span><span class=\"n\">simp</span> <span class=\"n\">add</span><span class=\"o\">:</span> <span class=\"n\">multiset_def</span><span class=\"o\">)</span>\n  <span class=\"k\">qed</span>\n\n  <span class=\"k\">show</span> <span class=\"s\">\"bij_betw count {B. B ⊆# A} (PiE_dflt (set_mset A) 0 (λx. {0..count A x}))\"</span>\n  <span class=\"k\">proof</span> <span class=\"o\">(</span><span class=\"n\">rule</span> <span class=\"n\">bij_betwI</span><span class=\"o\">[</span><span class=\"kp\">where</span> <span class=\"n\">g</span> <span class=\"o\">=</span> <span class=\"n\">Abs_multiset</span><span class=\"o\">],</span> <span class=\"n\">goal_cases</span><span class=\"o\">)</span>\n    <span class=\"k\">case</span> <span class=\"n\">1</span>\n    <span class=\"k\">thus</span> <span class=\"o\">?</span><span class=\"k\">case</span>\n      <span class=\"k\">by</span> <span class=\"o\">(</span><span class=\"n\">auto</span> <span class=\"n\">simp</span><span class=\"o\">:</span> <span class=\"n\">PiE_dflt_def</span> <span class=\"n\">mset_subset_eq_count</span> <span class=\"n\">dest</span><span class=\"o\">:</span> <span class=\"n\">mset_subset_eqD</span><span class=\"o\">)</span>\n  <span class=\"k\">next</span>\n    <span class=\"k\">case</span> <span class=\"n\">2</span>\n    <span class=\"k\">show</span> <span class=\"o\">?</span><span class=\"k\">case</span>\n      <span class=\"k\">by</span> <span class=\"o\">(</span><span class=\"n\">force</span> <span class=\"n\">simp</span><span class=\"o\">:</span> <span class=\"n\">PiE_dflt_def</span> <span class=\"n\">subseteq_mset_def</span> <span class=\"n\">is_multiset</span><span class=\"o\">)</span>\n  <span class=\"k\">next</span>\n    <span class=\"k\">case</span> <span class=\"n\">3</span>\n    <span class=\"k\">thus</span> <span class=\"o\">?</span><span class=\"k\">case</span>\n      <span class=\"k\">by</span> <span class=\"o\">(</span><span class=\"n\">auto</span> <span class=\"n\">simp</span><span class=\"o\">:</span> <span class=\"n\">PiE_dflt_def</span><span class=\"o\">)</span>\n  <span class=\"k\">next</span>\n    <span class=\"k\">case</span> <span class=\"n\">4</span>\n    <span class=\"k\">thus</span> <span class=\"o\">?</span><span class=\"k\">case</span>\n      <span class=\"k\">by</span> <span class=\"o\">(</span><span class=\"n\">auto</span> <span class=\"n\">simp</span><span class=\"o\">:</span> <span class=\"n\">is_multiset</span> <span class=\"n\">PiE_dflt_def</span><span class=\"o\">)</span>\n  <span class=\"k\">qed</span>\n<span class=\"k\">qed</span>\n\n<span class=\"kn\">lemma</span> <span class=\"s\">\"card {B. B ⊆# A} = (∏x∈set_mset A. count A x + 1)\"</span>\n<span class=\"k\">proof</span> <span class=\"o\">-</span>\n  <span class=\"k\">have</span> <span class=\"s\">\"card {B. B ⊆# A} = card (PiE_dflt (set_mset A) 0 (λx. {0..count A x}))\"</span>\n    <span class=\"k\">using</span> <span class=\"n\">bij_betw_submultisets</span><span class=\"o\">[</span><span class=\"n\">of</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"n\">bij_betw_same_card</span> <span class=\"k\">by</span> <span class=\"n\">blast</span>\n  <span class=\"k\">also</span> <span class=\"k\">have</span> <span class=\"s\">\"… = (∏x∈set_mset A. count A x + 1)\"</span>\n    <span class=\"k\">by</span> <span class=\"o\">(</span><span class=\"n\">subst</span> <span class=\"n\">card_PiE_dflt</span><span class=\"o\">)</span> <span class=\"n\">auto</span>\n  <span class=\"k\">finally</span> <span class=\"k\">show</span> <span class=\"o\">?</span><span class=\"n\">thesis</span> <span class=\"ow\">.</span>\n<span class=\"k\">qed</span>\n</code></pre></div>",
        "id": 220827959,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1608758053
    },
    {
        "content": "<p>Actually, here's a more direct proof without all that <code>PiE_dflt</code> business:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">theory</span> <span class=\"n\">Scratch</span>\n  <span class=\"kp\">imports</span> <span class=\"n\">Main</span> <span class=\"s\">\"HOL-Library.Multiset\"</span> <span class=\"s\">\"HOL-Library.FuncSet\"</span>\n<span class=\"k\">begin</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">bij_betw_submultisets</span><span class=\"o\">:</span>\n  <span class=\"s\">\"card {B. B ⊆# A} = (∏x∈set_mset A. count A x + 1)\"</span>\n<span class=\"k\">proof</span> <span class=\"o\">-</span>\n  <span class=\"n\">define</span> <span class=\"n\">f</span> <span class=\"o\">::</span> <span class=\"s\">\"'a multiset ⇒ 'a ⇒ nat\"</span>\n    <span class=\"kp\">where</span> <span class=\"s\">\"f = (λB x. if x ∈# A then count B x else undefined)\"</span>\n  <span class=\"n\">define</span> <span class=\"n\">g</span> <span class=\"o\">::</span> <span class=\"s\">\"('a ⇒ nat) ⇒ 'a multiset\"</span>\n    <span class=\"kp\">where</span> <span class=\"s\">\"g = (λh. Abs_multiset (λx. if x ∈# A then h x else 0))\"</span>\n\n  <span class=\"k\">have</span> <span class=\"n\">count_g</span><span class=\"o\">:</span> <span class=\"s\">\"count (g h) x = (if x ∈# A then h x else 0)\"</span>\n    <span class=\"kp\">if</span> <span class=\"s\">\"h ∈ (Π⇩E x∈set_mset A. {0..count A x})\"</span> <span class=\"kp\">for</span> <span class=\"n\">h</span> <span class=\"n\">x</span>\n  <span class=\"k\">proof</span> <span class=\"o\">-</span>\n    <span class=\"k\">have</span> <span class=\"s\">\"finite {x. (if x ∈# A then h x else 0) &gt; 0}\"</span>\n      <span class=\"k\">by</span> <span class=\"o\">(</span><span class=\"n\">rule</span> <span class=\"n\">finite_subset</span><span class=\"o\">[</span><span class=\"n\">of</span> <span class=\"o\">_</span> <span class=\"s\">\"set_mset A\"</span><span class=\"o\">])</span> <span class=\"o\">(</span><span class=\"n\">use</span> <span class=\"n\">that</span> <span class=\"kp\">in</span> <span class=\"n\">auto</span><span class=\"o\">)</span>\n    <span class=\"k\">thus</span> <span class=\"o\">?</span><span class=\"n\">thesis</span> <span class=\"k\">by</span> <span class=\"o\">(</span><span class=\"n\">simp</span> <span class=\"n\">add</span><span class=\"o\">:</span> <span class=\"n\">multiset_def</span> <span class=\"n\">g_def</span><span class=\"o\">)</span>\n  <span class=\"k\">qed</span>\n\n  <span class=\"k\">have</span> <span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"s\">\"f B ∈ (Π⇩E x∈set_mset A. {0..count A x})\"</span> <span class=\"kp\">if</span> <span class=\"s\">\"B ⊆# A\"</span> <span class=\"kp\">for</span> <span class=\"n\">B</span>\n      <span class=\"k\">using</span> <span class=\"n\">that</span> <span class=\"k\">by</span> <span class=\"o\">(</span><span class=\"n\">auto</span> <span class=\"n\">simp</span><span class=\"o\">:</span> <span class=\"n\">f_def</span> <span class=\"n\">subseteq_mset_def</span><span class=\"o\">)</span>\n\n  <span class=\"k\">have</span> <span class=\"s\">\"bij_betw f {B. B ⊆# A} (Π⇩E x∈set_mset A. {0..count A x})\"</span>\n  <span class=\"k\">proof</span> <span class=\"o\">(</span><span class=\"n\">rule</span> <span class=\"n\">bij_betwI</span><span class=\"o\">[</span><span class=\"kp\">where</span> <span class=\"n\">g</span> <span class=\"o\">=</span> <span class=\"n\">g</span><span class=\"o\">],</span> <span class=\"n\">goal_cases</span><span class=\"o\">)</span>\n    <span class=\"k\">case</span> <span class=\"n\">1</span>\n    <span class=\"k\">thus</span> <span class=\"o\">?</span><span class=\"k\">case</span> <span class=\"k\">using</span> <span class=\"n\">f</span> <span class=\"k\">by</span> <span class=\"n\">auto</span>\n  <span class=\"k\">next</span>\n    <span class=\"k\">case</span> <span class=\"n\">2</span>\n    <span class=\"k\">show</span> <span class=\"o\">?</span><span class=\"k\">case</span>\n      <span class=\"k\">by</span> <span class=\"o\">(</span><span class=\"n\">auto</span> <span class=\"n\">simp</span><span class=\"o\">:</span> <span class=\"n\">Pi_def</span> <span class=\"n\">PiE_def</span> <span class=\"n\">count_g</span> <span class=\"n\">subseteq_mset_def</span><span class=\"o\">)</span>\n  <span class=\"k\">next</span>\n    <span class=\"k\">case</span> <span class=\"o\">(</span><span class=\"n\">3</span> <span class=\"n\">B</span><span class=\"o\">)</span>\n    <span class=\"k\">have</span> <span class=\"s\">\"count (g (f B)) x  = count B x\"</span> <span class=\"kp\">for</span> <span class=\"n\">x</span>\n    <span class=\"k\">proof</span> <span class=\"o\">-</span>\n      <span class=\"k\">have</span> <span class=\"s\">\"count (g (f B)) x = (if x ∈# A then f B x else 0)\"</span>\n        <span class=\"k\">using</span> <span class=\"n\">f</span> <span class=\"n\">3</span> <span class=\"k\">by</span> <span class=\"o\">(</span><span class=\"n\">simp</span> <span class=\"n\">add</span><span class=\"o\">:</span> <span class=\"n\">count_g</span><span class=\"o\">)</span>\n      <span class=\"k\">also</span> <span class=\"k\">have</span> <span class=\"s\">\"… = count B x\"</span>\n        <span class=\"k\">using</span> <span class=\"n\">3</span> <span class=\"k\">by</span> <span class=\"o\">(</span><span class=\"n\">auto</span> <span class=\"n\">simp</span><span class=\"o\">:</span> <span class=\"n\">f_def</span> <span class=\"n\">dest</span><span class=\"o\">:</span> <span class=\"n\">mset_subset_eqD</span><span class=\"o\">)</span>\n      <span class=\"k\">finally</span> <span class=\"k\">show</span> <span class=\"o\">?</span><span class=\"n\">thesis</span> <span class=\"ow\">.</span>\n    <span class=\"k\">qed</span>\n    <span class=\"k\">thus</span> <span class=\"o\">?</span><span class=\"k\">case</span>\n      <span class=\"k\">by</span> <span class=\"o\">(</span><span class=\"n\">auto</span> <span class=\"n\">simp</span><span class=\"o\">:</span> <span class=\"n\">multiset_eq_iff</span><span class=\"o\">)</span>\n  <span class=\"k\">next</span>\n    <span class=\"k\">case</span> <span class=\"n\">4</span>\n    <span class=\"k\">thus</span> <span class=\"o\">?</span><span class=\"k\">case</span>\n      <span class=\"k\">by</span> <span class=\"o\">(</span><span class=\"n\">auto</span> <span class=\"n\">simp</span><span class=\"o\">:</span> <span class=\"n\">fun_eq_iff</span> <span class=\"n\">f_def</span> <span class=\"n\">count_g</span><span class=\"o\">)</span>\n  <span class=\"k\">qed</span>\n  <span class=\"k\">hence</span> <span class=\"s\">\"card {B. B ⊆# A} = card (Π⇩E x∈set_mset A. {0..count A x})\"</span>\n    <span class=\"k\">using</span> <span class=\"n\">bij_betw_same_card</span> <span class=\"k\">by</span> <span class=\"n\">blast</span>\n  <span class=\"k\">thus</span> <span class=\"o\">?</span><span class=\"n\">thesis</span>\n    <span class=\"k\">by</span> <span class=\"o\">(</span><span class=\"n\">simp</span> <span class=\"n\">add</span><span class=\"o\">:</span> <span class=\"n\">card_PiE</span><span class=\"o\">)</span>\n<span class=\"k\">qed</span>\n</code></pre></div>",
        "id": 220832425,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1608761849
    },
    {
        "content": "<p>Interesting to see that <code>set_mset (Pow_mset A)</code> can be useful. I did not expect that. (<code>Pow_mset</code> exists only in a theory in my mailbox so far...)</p>",
        "id": 220852697,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1608792175
    },
    {
        "content": "<p>for the sake of completeness, there are three concepts that are very linked:</p>\n<ul>\n<li><code>{B. B ⊆# A}</code></li>\n<li><code>Pow_mset</code> (the multiset version of Pow)</li>\n<li><code>subseqs</code> (by <code>Pow_mset (mset A) = image_mset mset  (mset (subseqs A))</code>), aka <code>{B. B ⊆# A} = image mset (set (subseqs A))</code></li>\n</ul>\n<p>I  (I should say <a href=\"https://search.isabelle.in.tum.de/\">https://search.isabelle.in.tum.de/</a>) did not find any lemma on cardinality and subseqs to avoid Manuel's proof above.</p>\n<p>(<code>Subseqs</code> also exists, but only in <a href=\"https://search.isabelle.in.tum.de/#theory/default_Isabelle2020_AFP2020/Regular-Sets.Regexp_Constructions\">https://search.isabelle.in.tum.de/#theory/default_Isabelle2020_AFP2020/Regular-Sets.Regexp_Constructions</a>)</p>",
        "id": 220854217,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1608794804
    },
    {
        "content": "<p>Thank you <span class=\"user-mention\" data-user-id=\"232736\">@Manuel Eberl</span>  and <span class=\"user-mention\" data-user-id=\"233198\">@Mathias Fleury</span> for the responses.</p>",
        "id": 220875311,
        "sender_full_name": "Mark Wassell",
        "timestamp": 1608823239
    }
]