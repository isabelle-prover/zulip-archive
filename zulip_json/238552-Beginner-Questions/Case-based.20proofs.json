[
    {
        "content": "<p>In programming-and-proving, page 45, there's a nice example of how to do a proof where there are two cases:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"s\">\"P \\/ Q\"</span><span class=\"w\"> </span><span class=\"n\">&lt;proof&gt;</span>\n<span class=\"k\">then</span><span class=\"w\"> </span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"s\">\"R\"</span>\n<span class=\"k\">proof</span>\n<span class=\"w\">   </span><span class=\"k\">assume</span><span class=\"w\"> </span><span class=\"s\">\"P\"</span>\n<span class=\"w\">   </span><span class=\"ow\">...</span>\n<span class=\"w\">   </span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"s\">\"R\"</span><span class=\"w\"> </span><span class=\"n\">&lt;proof&gt;</span>\n<span class=\"k\">next</span>\n<span class=\"w\">   </span><span class=\"k\">assume</span><span class=\"w\"> </span><span class=\"s\">\"Q\"</span>\n<span class=\"w\">   </span><span class=\"ow\">...</span>\n<span class=\"w\">   </span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"s\">\"R\"</span><span class=\"w\"> </span><span class=\"n\">&lt;proof&gt;</span>\n<span class=\"k\">qed</span>\n</code></pre></div>\n<p>Is there something similar for a 3-way disjunction? I tried the natural thing:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">example</span><span class=\"o\">:</span>\n<span class=\"w\">  </span><span class=\"kp\">assumes</span><span class=\"w\"> </span><span class=\"s\">\"A ∨ B ∨ C\"</span>\n<span class=\"w\">  </span><span class=\"kp\">shows</span><span class=\"w\"> </span><span class=\"s\">\"R\"</span>\n<span class=\"k\">proof</span><span class=\"w\"> </span><span class=\"o\">-</span>\n<span class=\"w\">  </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"s\">\"A ∨ B ∨ C\"</span><span class=\"w\"> </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">assms</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">blast</span>\n<span class=\"w\">  </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"s\">\"R\"</span>\n<span class=\"w\">  </span><span class=\"k\">proof</span>\n<span class=\"w\">    </span><span class=\"k\">assume</span><span class=\"w\"> </span><span class=\"s\">\"A\"</span>\n<span class=\"w\">    </span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"s\">\"R\"</span><span class=\"w\"> </span><span class=\"gr\">sorry</span>\n<span class=\"w\">  </span><span class=\"k\">next</span>\n<span class=\"w\">    </span><span class=\"k\">assume</span><span class=\"w\"> </span><span class=\"s\">\"B\"</span>\n<span class=\"w\">    </span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"s\">\"R\"</span><span class=\"w\"> </span><span class=\"gr\">sorry</span>\n<span class=\"w\">  </span><span class=\"k\">next</span>\n<span class=\"w\">    </span><span class=\"k\">assume</span><span class=\"w\"> </span><span class=\"s\">\"C\"</span>\n<span class=\"w\">    </span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"s\">\"R\"</span><span class=\"w\"> </span><span class=\"gr\">sorry</span>\n<span class=\"w\">  </span><span class=\"k\">qed</span>\n<span class=\"k\">qed</span>\n</code></pre></div>\n<p>but Isabelle very reasonably complained, because the <code>A \\/ B \\/ C</code> was treated as a two-term disjunction, <code>A \\/ (B \\/ C)</code>. And I can obviously split that, and nest one level deeper, etc., but I'm wondering if there's something more naturally structured that I might use when working with something like trichotomy, where three disjoint cases arise very naturally.</p>",
        "id": 516451164,
        "sender_full_name": "John  Hughes",
        "timestamp": 1746539583
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">begin</span>\n<span class=\"k\">have</span><span class=\"w\"> </span><span class=\"s\">\"P ∨ Q ∨ Q'\"</span><span class=\"w\"> </span><span class=\"gr\">sorry</span>\n<span class=\"w\">  </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"s\">\"R\"</span>\n<span class=\"k\">proof</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">elim</span><span class=\"w\"> </span><span class=\"n\">disjE</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 516456242,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1746540776
    },
    {
        "content": "<p>The <code>consider</code> keyword is also very powerful for such use cases</p>",
        "id": 521320711,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1748618937
    }
]