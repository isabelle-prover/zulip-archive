[
    {
        "content": "<p>Suppose I have a locale that depends on a certain type that we require to satisfy certain type class hypotheses, e.g.</p>\n<div class=\"codehilite\"><pre><span></span><code>locale test =\nfixes f :: &quot;(&#39;a :: t2_space) =&gt; (&#39;b :: t2_space)&quot;\nassumes cont: &quot;continuous_on UNIV f&quot;\n</code></pre></div>\n<p>and I want to extend it to a locale that adds other hypotheses but that also needs to put other instances on my types, e.g.</p>\n<div class=\"codehilite\"><pre><span></span><code>locale test_2 = test + assumes linear: &quot;linear f&quot;\n</code></pre></div>\n<p>for which I need e.g. <code>'b :: real_vector</code>. How do I specify this new requirement?</p>",
        "id": 243391230,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1624286049
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">locale</span> <span class=\"n\">test_2</span> <span class=\"o\">=</span>\n  <span class=\"n\">test</span> <span class=\"n\">f</span> <span class=\"kp\">for</span> <span class=\"n\">f</span> <span class=\"o\">::</span> <span class=\"s\">\"'a :: {real_vector, t2_space} ⇒ 'b :: {real_vector, t2_space}\"</span> <span class=\"o\">+</span>\n  <span class=\"kp\">assumes</span> <span class=\"n\">linear</span><span class=\"o\">:</span> <span class=\"s\">\"linear f\"</span>\n</code></pre></div>",
        "id": 243391669,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1624286211
    },
    {
        "content": "<p>Note however that the <code>linear</code> already gives you the <code>real_vector</code> constraint anyway.</p>",
        "id": 243391705,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1624286228
    },
    {
        "content": "<p>(You might want <code>real_normed_vector</code> anyway, which contains both.)</p>",
        "id": 243391746,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1624286245
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232736\">Manuel Eberl</span> <a href=\"#narrow/stream/238552-Beginner-Questions/topic/Changing.20type.20classes.20in.20locales/near/243391669\">said</a>:</p>\n<blockquote>\n<p><div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">locale</span> <span class=\"n\">test_2</span> <span class=\"o\">=</span>\n  <span class=\"n\">test</span> <span class=\"n\">f</span> <span class=\"kp\">for</span> <span class=\"n\">f</span> <span class=\"o\">::</span> <span class=\"s\">\"'a :: {real_vector, t2_space} ⇒ 'b :: {real_vector, t2_space}\"</span> <span class=\"o\">+</span>\n  <span class=\"kp\">assumes</span> <span class=\"n\">linear</span><span class=\"o\">:</span> <span class=\"s\">\"linear f\"</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>If I do so it says <code>Parameter(s) declared simultaneously in expression and for clause: f</code>!</p>",
        "id": 243393271,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1624286836
    },
    {
        "content": "<p>Works fine for me. What did you write exactly?</p>",
        "id": 243393833,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1624287101
    },
    {
        "content": "<p>Ops I forgot the f... it works indeed, sorry!</p>",
        "id": 243398325,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1624288812
    },
    {
        "content": "<p>No worries!</p>",
        "id": 243398471,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1624288880
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232736\">Manuel Eberl</span> <a href=\"#narrow/stream/238552-Beginner-Questions/topic/Changing.20type.20classes.20in.20locales/near/243391746\">said</a>:</p>\n<blockquote>\n<p>(You might want <code>real_normed_vector</code> anyway, which contains both.)</p>\n</blockquote>\n<p>What if I want it to be a topological vector space whose topology does not come from a norm: is there a topological_vector_space in HOL?</p>",
        "id": 243399094,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1624289128
    },
    {
        "content": "<p>Hm, if anything it would have to be <code>topological_real_vector_space</code> because type classes in Isabelle cannot have more than one type variable, i.e. you cannot have a <code>vector_space</code> type class, only a <code>real_vector_space</code> class.</p>",
        "id": 243399338,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1624289229
    },
    {
        "content": "<p>Well, that would be fine: I am working with real numbers only, but it does not exist yet, right?</p>",
        "id": 243399612,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1624289343
    },
    {
        "content": "<p>I had a quick look and didn't find it, no.</p>",
        "id": 243399650,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1624289361
    },
    {
        "content": "<p>Isabelle's type class system is really not great for showing \"abstract\" results about structures due to its limitations.</p>",
        "id": 243399696,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1624289383
    },
    {
        "content": "<p>Ok thanks!</p>",
        "id": 243399713,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1624289392
    },
    {
        "content": "<p>It works well for working with concrete ones.</p>",
        "id": 243399730,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1624289401
    },
    {
        "content": "<p>But if you want to do fancier stuff you may have to work entirely with locales instead.</p>",
        "id": 243399787,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1624289411
    },
    {
        "content": "<p>But a <code>topological_real_vector_space</code> would of course be perfectly possible.</p>",
        "id": 243399886,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1624289452
    },
    {
        "content": "<p>It probably doesn't exist because for the \"interesting\" real topological vector spaces the topology is always induced by a norm</p>",
        "id": 243399988,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1624289491
    },
    {
        "content": "<p>Especially since the type class approach only allows you to fashion your type with <strong>one</strong> canonical topology. And that's probably going to be the one induced by the norm.</p>",
        "id": 243400046,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1624289516
    },
    {
        "content": "<p>(There are ways to work with topologies in a more liberal way though, there is a type <code>'a toplogy</code> representing a topology on the type <code>'a</code>, and then you can e.g. write <code>openin top X</code> to say that <code>X</code> is open in the topology <code>top</code>).</p>",
        "id": 243400209,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1624289571
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232736\">Manuel Eberl</span> <a href=\"#narrow/stream/238552-Beginner-Questions/topic/Changing.20type.20classes.20in.20locales/near/243399988\">said</a>:</p>\n<blockquote>\n<p>It probably doesn't exist because for the \"interesting\" real topological vector spaces the topology is always induced by a norm</p>\n</blockquote>\n<p>I kind of disagree with this (what about infinite dimensional Frechet spaces?) but I get your point! My problem is that I am trying to write code that works with the current library for smooth manifolds, so I cannot make a lot of choices in the implementaion, otherwise I would certainly follow your tip of using locales! In any case there's no problem here, since you say <code>topological_real_vector_space</code> can be done and I only need that!</p>",
        "id": 243400714,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1624289766
    },
    {
        "content": "<p>The smooth manifold development was already pushing what you can do with the current formalisation in a lot of ways</p>",
        "id": 243401076,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1624289900
    }
]