[
    {
        "content": "<p>I am aware of the Hilbert Choice operator Eps as in <br>\n<a href=\"https://www.isa-afp.org/browser_info/current/HOL/HOL/Hilbert_Choice.html\">https://www.isa-afp.org/browser_info/current/HOL/HOL/Hilbert_Choice.html</a></p>\n<p>but I would prefer if there is something applying on sets, rather than predicates. But </p>\n<p>find_consts \"?'a set ⇒ ?'a\"</p>\n<p>does not give me that thing. So do we have a set version for Eps? Basically, I would like to take a image of the choice function of a set.</p>",
        "id": 498143299,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1738854492
    },
    {
        "content": "<p>There are functions converting between sets and predicates:<br>\n  Nunchaku.rmember :: \"'a set ⇒ 'a ⇒ bool\"<br>\n  Predicate_Compile.contains ::<br>\n    \"'a set ⇒ 'a ⇒ bool\"</p>",
        "id": 498149028,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1738855963
    },
    {
        "content": "<p>I can compose it with Eps, but I do not know which one to pick, or if there is already something canonical (which makes sledgehammer happier).</p>",
        "id": 498149154,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1738855998
    },
    {
        "content": "<p>Eps has the fancy notation:<code>SOME x. x \\in S</code></p>",
        "id": 498157396,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1738858056
    },
    {
        "content": "<p>Hi, though maybe you already did this -- in my very limited experience, proving that the set is not empty should help sledgehammer to get over one barrier</p>",
        "id": 498211397,
        "sender_full_name": "Yiran Duan",
        "timestamp": 1738876429
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"233198\">Mathias Fleury</span> <a href=\"#narrow/channel/238552-Beginner-Questions/topic/Choice.20operator.20on.20sets.3F/near/498157396\">said</a>:</p>\n<blockquote>\n<p>Eps has the fancy notation:<code>SOME x. x \\in S</code></p>\n</blockquote>\n<p>Thanks! I have confirmed that writing it as \\lambda x. ... is indeed the standard way to do this.</p>",
        "id": 498213043,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1738877165
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"700664\">Yiran Duan</span> <a href=\"#narrow/channel/238552-Beginner-Questions/topic/Choice.20operator.20on.20sets.3F/near/498211397\">said</a>:</p>\n<blockquote>\n<p>Hi, though maybe you already did this -- in my very limited experience, proving that the set is not empty should help sledgehammer to get over one barrier</p>\n</blockquote>\n<p>This is not only helpful, it is a requirement. Without proving the set is nonempty, you cannot do anything with the choice operator.</p>",
        "id": 498213105,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1738877199
    },
    {
        "content": "<p>This is because the axiom of choice itself does not tell you that you can pick from the empty set. What sledgehammer does is (not precise!) Skolemization ( pretty much another way to call the axiom of choice). (Write it out just in case that you are not aware of this! In the case you do know about that, yes it is indeed helpful to state explicitly that the set you are picking from is nonempty.) Thanks for your attempt to help!</p>",
        "id": 498213497,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1738877383
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"754515\">Yiming Xu</span> <a href=\"#narrow/channel/238552-Beginner-Questions/topic/Choice.20operator.20on.20sets.3F/near/498213043\">said</a>:</p>\n<blockquote>\n<p>I have confirmed that writing it as \\lambda x. ... is indeed the standard way to do this.</p>\n</blockquote>\n<p>Could you please also expand a bit on this? I'm curious to see what a standard way would be: is it some alternative to e.g. <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mtext>SOME </mtext><mi>x</mi><mi mathvariant=\"normal\">.</mi><mtext> </mtext><mi>x</mi><mo>∈</mo><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">\\text{SOME}\\ x.\\ x \\in A</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7224em;vertical-align:-0.0391em;\"></span><span class=\"mord text\"><span class=\"mord\">SOME</span></span><span class=\"mspace\"> </span><span class=\"mord mathnormal\">x</span><span class=\"mord\">.</span><span class=\"mspace\"> </span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">A</span></span></span></span>?</p>",
        "id": 498217393,
        "sender_full_name": "Yiran Duan",
        "timestamp": 1738878900
    },
    {
        "content": "<p>Not essentially. This just means you can converting set membership as <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>λ</mi><mi>x</mi><mi mathvariant=\"normal\">.</mi><mi>x</mi><mo>∈</mo><mi>s</mi></mrow><annotation encoding=\"application/x-tex\">\\lambda x. x \\in s</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7335em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\">λ</span><span class=\"mord mathnormal\">x</span><span class=\"mord\">.</span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">s</span></span></span></span> into a predicate, and then call \"Eps\". So you can have <code>Choice s</code> defined as <code>Eps (\\lambda x. x \\in s)</code> to get the desired effect.</p>",
        "id": 498262578,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1738905375
    },
    {
        "content": "<p>Reminder here: choice is very very bad for automation (at least I have never seen <code>someI</code>-involving proofs by sledgehammer). So whenever possible, put the choice in a definition (like <code>MyChoiceDefinition</code>) and add lemmas (so usual <code>assumption ==&gt; MyChoiceDefinition \\in s</code>)  to be picked up by Sledgehammer</p>",
        "id": 498267668,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1738908884
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"233198\">Mathias Fleury</span> <a href=\"#narrow/channel/238552-Beginner-Questions/topic/Choice.20operator.20on.20sets.3F/near/498267668\">said</a>:</p>\n<blockquote>\n<p>Reminder here: choice is very very bad for automation (at least I have never seen <code>someI</code>-involving proofs by sledgehammer). So whenever possible, put the choice in a definition (like <code>MyChoiceDefinition</code>) and add lemmas (so usual <code>assumption ==&gt; MyChoiceDefinition \\in s</code>)  to be picked up by Sledgehammer</p>\n</blockquote>\n<p>Thanks! I think I see it is very bad.</p>\n<p>I want to show:</p>\n<p>have <br>\n  \"⋀m fl v. ∃wl. asatis tM v (cDIAM m fl) ⟶<br>\n         length wl = length fl ∧<br>\n              rel tM m (v # wl) ∧ <br>\n              (∀w f. (w,f) ∈ set (zip wl fl) ⟶ asatis tM w f)\"<br>\n    unfolding asatis.simps <br>\n    by blast<br>\n  then obtain cwl where <br>\n  \"⋀m fl v. asatis tM v (cDIAM m fl) ⟹<br>\n           length (cwl (cDIAM m fl) v) = length fl ∧<br>\n              rel tM m (v # (cwl (cDIAM m fl) v)) ∧ <br>\n              (∀w f. (w,f) ∈ set (zip (cwl (cDIAM m fl) v) fl) ⟶ asatis tM w f)\"<br>\n    sledgehammer</p>\n<p>Note that I only want a choice function from the existence. But sledgehammer does not prove it. How may I help it?</p>",
        "id": 498324015,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1738929627
    },
    {
        "content": "<p><a href=\"/user_uploads/14278/_af7tfVgIHymz4oc0tsH1VRd/image.png\">image.png</a><br>\nThis is the colored goal.</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/14278/_af7tfVgIHymz4oc0tsH1VRd/image.png\" title=\"image.png\"><img data-original-content-type=\"image/png\" data-original-dimensions=\"985x373\" src=\"/user_uploads/thumbnail/14278/_af7tfVgIHymz4oc0tsH1VRd/image.png/840x560.webp\"></a></div>",
        "id": 498324138,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1738929666
    },
    {
        "content": "<p>Okay it likes this better:<br>\n then obtain cwl where <br>\n  \"⋀m fl v. asatis tM v (cDIAM m fl) ⟹<br>\n           length (cwl m fl v) = length fl ∧<br>\n              rel tM m (v # (cwl m fl v)) ∧ <br>\n              (∀w f. (w,f) ∈ set (zip (cwl m fl v) fl) ⟶ <br>\n                asatis tM w f)\"</p>",
        "id": 498324710,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1738929837
    },
    {
        "content": "<p>wait does you goal hold?</p>",
        "id": 498365570,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1738942034
    },
    {
        "content": "<p>I mean this:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"w\">  </span><span class=\"k\">assume</span><span class=\"w\"> </span><span class=\"s\">‹⋀l :: bool. (∃b. b = l)›</span>\n<span class=\"w\">  </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"k\">obtain</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"kp\">where</span><span class=\"w\"> </span><span class=\"s\">‹⋀l. b = l›</span>\n<span class=\"w\">    </span><span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>does not hold</p>",
        "id": 498365643,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1738942059
    },
    {
        "content": "<p>As far as I understand, you goal holds if you take <code>cwl m fl v</code> to obtain, not a constant for all possible <code>m</code>, <code>fl</code>, and <code>v</code></p>",
        "id": 498365868,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1738942108
    },
    {
        "content": "<p>Yes cwl is a function. takes three parameters instead of a value.</p>",
        "id": 498366083,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1738942172
    },
    {
        "content": "<p>Manuel wrote a post on how to do this: <a href=\"#narrow/channel/238552-Beginner-Questions/topic/Proving.20lemma.20with.20definite.20description/near/291315915\">https://isabelle.zulipchat.com/#narrow/channel/238552-Beginner-Questions/topic/Proving.20lemma.20with.20definite.20description/near/291315915</a></p>",
        "id": 498366143,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1738942189
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"754515\">Yiming Xu</span> <a href=\"#narrow/channel/238552-Beginner-Questions/topic/Choice.20operator.20on.20sets.3F/near/498366083\">said</a>:</p>\n<blockquote>\n<p>Yes cwl is a function. takes three parameters instead of a value.</p>\n</blockquote>\n<p>ah yeah now I see that in your other post</p>",
        "id": 498366308,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1738942222
    },
    {
        "content": "<p>It is pretty unhappy if I prove it exists for all <code>m</code> and <code>fl</code>, but want it to give me a function that takes <code>cDIAM m fl</code>.</p>",
        "id": 498366519,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1738942279
    },
    {
        "content": "<p>I agree it is reasonable for sledgehammer to dislike it.</p>",
        "id": 498366733,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1738942325
    },
    {
        "content": "<p>hmm depends on <code>cDIAM</code>. If it is the function that ignores the arguments and always returns True, my intuition says that you cannot prove that</p>\n<p>You want to have <code>cwl (iDIAM m fl) v</code> right?</p>",
        "id": 498367496,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1738942525
    },
    {
        "content": "<p>Yes.</p>",
        "id": 498370300,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1738943293
    },
    {
        "content": "<p>And if I obtain a function for cwl m fl v, then do it by hand on case analysis on formulas, and tell sledgehammer to prove that it has the correct effect on <code>cDIAM m fl</code>, then it gives me what I want.</p>",
        "id": 498370546,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1738943356
    },
    {
        "content": "<p>I mean, after obtain <code>cwl m fl v</code>, define cwl' by <br>\n \"cwl ≡ λf. case f of cDIAM m0 fl0 ⇒ cwl0 m0 fl0<br>\n                                                    |_ ⇒ undefined\"</p>",
        "id": 498370855,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1738943436
    },
    {
        "content": "<p>That is the flow:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"w\"> </span><span class=\"k\">have</span>\n<span class=\"w\">  </span><span class=\"s\">\"⋀m fl v. ∃wl. asatis tM v (cDIAM m fl) ⟶</span>\n<span class=\"s\">         length wl = length fl ∧</span>\n<span class=\"s\">              rel tM m (v # wl) ∧</span>\n<span class=\"s\">              (∀w f. (w,f) ∈ set (zip wl fl) ⟶ asatis tM w f)\"</span>\n<span class=\"w\">    </span><span class=\"k\">unfolding</span><span class=\"w\"> </span><span class=\"n\">asatis.simps</span>\n<span class=\"w\">    </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">blast</span>\n<span class=\"w\">  </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"k\">obtain</span><span class=\"w\"> </span><span class=\"n\">cwl0</span><span class=\"w\"> </span><span class=\"kp\">where</span>\n<span class=\"w\">  </span><span class=\"n\">cwl0</span><span class=\"o\">:</span><span class=\"s\">\"⋀m fl v. asatis tM v (cDIAM m fl) ⟹</span>\n<span class=\"s\">           length (cwl0 m fl v) = length fl ∧</span>\n<span class=\"s\">              rel tM m (v # (cwl0 m fl v)) ∧</span>\n<span class=\"s\">              (∀w f. (w,f) ∈ set (zip (cwl0 m fl v) fl) ⟶</span>\n<span class=\"s\">                asatis tM w f)\"</span>\n<span class=\"w\">  </span><span class=\"k\">proof</span><span class=\"w\"> </span><span class=\"o\">-</span>\n<span class=\"w\">    </span><span class=\"k\">assume</span><span class=\"w\"> </span><span class=\"s\">\"⋀cwl. (⋀m fl v. asatis tM v ♢m fl ⟹ length (cwl m fl v) = length fl ∧ rel tM m (v # cwl m fl v) ∧ (∀w f. (w, f) ∈ set (zip (cwl m fl v) fl) ⟶ asatis tM w f)) ⟹ thesis\"</span>\n<span class=\"w\">    </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">thesis</span>\n<span class=\"w\">      </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"s\">‹⋀v m fl. ∃wl. asatis tM v ♢m fl ⟶ length wl = length fl ∧ rel tM m (v # wl) ∧ (∀w f. (w, f) ∈ set (zip wl fl) ⟶ asatis tM w f)›</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">moura</span>\n<span class=\"w\">  </span><span class=\"k\">qed</span>\n<span class=\"w\">  </span><span class=\"n\">define</span><span class=\"w\"> </span><span class=\"n\">cwl</span><span class=\"w\"> </span><span class=\"kp\">where</span><span class=\"w\"> </span><span class=\"s\">\"cwl ≡ λf. case f of cDIAM m0 fl0 ⇒ cwl0 m0 fl0</span>\n<span class=\"s\">                                                    |_ ⇒ undefined\"</span>\n<span class=\"w\">  </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"k\">have</span>\n<span class=\"w\">  </span><span class=\"n\">cwl</span><span class=\"o\">:</span><span class=\"s\">\"⋀m fl v. asatis tM v (cDIAM m fl) ⟹</span>\n<span class=\"s\">           length (cwl (cDIAM m fl) v) = length fl ∧</span>\n<span class=\"s\">              rel tM m (v # (cwl (cDIAM m fl) v)) ∧</span>\n<span class=\"s\">              (∀w f. (w,f) ∈ set (zip (cwl (cDIAM m fl) v) fl) ⟶</span>\n<span class=\"s\">                asatis tM w f)\"</span>\n<span class=\"w\">    </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"n\">add</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">cwl0</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 498370999,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1738943481
    }
]