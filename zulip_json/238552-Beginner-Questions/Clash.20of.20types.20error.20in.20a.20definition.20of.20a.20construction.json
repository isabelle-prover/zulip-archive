[
    {
        "content": "<p>I am reproducing this proof with minor alterations: <br>\n<a href=\"https://www.isa-afp.org/sessions/finite_automata_hf/#Finite_Automata_HF.html\">https://www.isa-afp.org/sessions/finite_automata_hf/#Finite_Automata_HF.html</a></p>\n<p>However, when I get to this definition, I get a clash of types error :</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">definition</span><span class=\"w\"> </span><span class=\"n\">Power_dfa</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\" 'a dfa\"</span><span class=\"w\"> </span><span class=\"kp\">where</span>\n<span class=\"w\">  </span><span class=\"s\">\"Power_dfa = ⦇dfa.states = {AX (epsclo q) | q. q ∈ Pow (states N)},</span>\n<span class=\"s\">                     init  = AX (epsclo (init N)),</span>\n<span class=\"s\">                     final = {AX (epsclo Q) | Q. Q ⊆ states N ∧ Q ∩ final N ≠ {}},</span>\n<span class=\"s\">                     nxt   =λQ x. AX(⋃q ∈ epsclo Q. epsclo (nxt N q x)) ⦈\"</span>\n</code></pre></div>\n<p>The error is:</p>\n<blockquote>\n<p>Type unification failed: Clash of types \"_ set\" and \"nat\"</p>\n<p>Type error in application: incompatible operand type</p>\n<p>Operator:<br>\n  FAHS.dfa.dfa_ext<br>\n   {AX (epsclo q) |q. q ∈ Pow (FAHS.nfa.states N)}<br>\n   (AX (epsclo (FAHS.nfa.init N)))<br>\n   {AX (epsclo Q) |Q.<br>\n    Q ⊆ FAHS.nfa.states N ∧<br>\n    Q ∩ <a href=\"http://FAHS.nfa.final\">FAHS.nfa.final</a> N ≠ {}} ::<br>\n  (nat ⇒ ??'a ⇒ nat)<br>\n  ⇒ ??'b ⇒ (??'a, ??'b) FAHS.dfa_scheme<br>\nOperand:<br>\n  λQ x. AX (⋃q∈epsclo Q.<br>\n               epsclo (FAHS.nfa.nxt N q x)) ::<br>\n  nat set ⇒ 'a ⇒ nat</p>\n</blockquote>\n<p>This is the kind of alterations i am making to the original proof:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">record</span><span class=\"w\"> </span><span class=\"n n-Type\">'a</span><span class=\"w\">  </span><span class=\"n\">dfa</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">                </span><span class=\"n\">states</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"nat set\"</span>\n<span class=\"w\">                </span><span class=\"n\">init</span><span class=\"w\">   </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"nat\"</span>\n<span class=\"w\">                </span><span class=\"n\">final</span><span class=\"w\">  </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"nat set\"</span>\n<span class=\"w\">                </span><span class=\"n\">nxt</span><span class=\"w\">    </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"nat ⇒ 'a ⇒ nat\"</span>\n\n\n<span class=\"k\">record</span><span class=\"w\">  </span><span class=\"n n-Type\">'a</span><span class=\"w\"> </span><span class=\"n\">nfa</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">states</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"nat set\"</span>\n<span class=\"w\">                </span><span class=\"n\">init</span><span class=\"w\">   </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"nat set\"</span>\n<span class=\"w\">                </span><span class=\"n\">final</span><span class=\"w\">  </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"nat set\"</span>\n<span class=\"w\">                </span><span class=\"n\">nxt</span><span class=\"w\">    </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"nat ⇒ 'a ⇒ nat set\"</span>\n<span class=\"w\">                </span><span class=\"n\">eps</span><span class=\"w\">    </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"(nat × nat) set\"</span>\n\n<span class=\"k\">definition</span><span class=\"w\"> </span><span class=\"n\">AX</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"nat set ⇒ nat\"</span>\n<span class=\"w\">  </span><span class=\"kp\">where</span><span class=\"w\"> </span><span class=\"s\">\"AX A = set_encode (A)\"</span>\n</code></pre></div>",
        "id": 488018848,
        "sender_full_name": "Atie Bastan",
        "timestamp": 1733895135
    },
    {
        "content": "<p>And your question is what?</p>",
        "id": 488021632,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1733896820
    },
    {
        "content": "<p>The error message is saying that you apply the term <code>FAHS.dfa.dfa_ext {AX (epsclo q) |q. q ∈ Pow (FAHS.nfa.states N)} (AX (epsclo (FAHS.nfa.init N))) {AX (epsclo Q) |Q. Q ⊆ FAHS.nfa.states N ∧ Q ∩ FAHS.nfa.final N ≠ {}}</code><br>\nwith is expecting an argument with type</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"n\">nat</span><span class=\"w\"> </span><span class=\"n\">⇒</span><span class=\"w\"> </span><span class=\"o\">??</span><span class=\"n n-Type\">'a</span><span class=\"w\"> </span><span class=\"n\">⇒</span><span class=\"w\"> </span><span class=\"n\">nat</span>\n</code></pre></div>\n<p>but the argument <code>λQ x. AX (⋃q∈epsclo Q. epsclo (FAHS.nfa.nxt N q x))</code> has type</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"n\">nat</span><span class=\"w\"> </span><span class=\"n\">set</span><span class=\"w\"> </span><span class=\"n\">⇒</span><span class=\"w\"> </span><span class=\"n n-Type\">'a</span><span class=\"w\"> </span><span class=\"n\">⇒</span><span class=\"w\"> </span><span class=\"n\">nat</span>\n</code></pre></div>",
        "id": 488021789,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1733896910
    },
    {
        "content": "<p>And <code>nat</code> and <code>nat set</code> cannot be unified</p>",
        "id": 488021868,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1733896929
    },
    {
        "content": "<p>But all that is written in the error message</p>",
        "id": 488021941,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1733896961
    },
    {
        "content": "<p><code>λQ x. AX (⋃q∈epsclo Q. epsclo (FAHS.nfa.nxt N q x))</code> is your <code>nxt</code> if you did not recognize it</p>",
        "id": 488022125,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1733897062
    },
    {
        "content": "<p>I am trying to define a function that prepares the input for dfa.nxt in the correct format it requires. This function takes a nat set, but returns a nat, the proper type for the dfa.nxt.<br>\nIf this is not an appropriate way to say this, how should i do this?</p>",
        "id": 488173059,
        "sender_full_name": "Atie Bastan",
        "timestamp": 1733945936
    },
    {
        "content": "<ol>\n<li>currently you have defined <code>nxt    :: \"nat ⇒ 'a ⇒ nat set\"</code>. This is <em>your</em> definition of <code>nxt</code>. By definition you have to respect the type everywhere</li>\n<li>in your definition you are trying to use <code>nat set =&gt; 'a =&gt; nat set</code>. This is not compatible with the definition in 1</li>\n</ol>",
        "id": 488175233,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1733946622
    },
    {
        "content": "<p>We cannot tell you if :</p>\n<ol>\n<li>you need to change the definition to allow for <code>nat set</code></li>\n<li>you have an incorrect definition</li>\n<li>something else I am not seeing</li>\n</ol>",
        "id": 488175384,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1733946682
    },
    {
        "content": "<p>Thank you! This helped me significantly.</p>",
        "id": 488525156,
        "sender_full_name": "Atie Bastan",
        "timestamp": 1733961199
    }
]