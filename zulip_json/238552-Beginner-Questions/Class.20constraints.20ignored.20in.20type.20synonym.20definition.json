[
    {
        "content": "<p>My class constraint is ignored in a type synonym definition: for</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">type_synonym</span><span class=\"w\"> </span><span class=\"n n-Type\">'value</span><span class=\"w\"> </span><span class=\"n\">myTypeOperator</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"'value::group_add\"</span>\n</code></pre></div>\n<p>I get </p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"n\">Ignoring</span><span class=\"w\"> </span><span class=\"n\">sort</span><span class=\"w\"> </span><span class=\"n\">constraints</span><span class=\"w\"> </span><span class=\"kp\">in</span><span class=\"w\"> </span><span class=\"n\">type</span><span class=\"w\"> </span><span class=\"n\">variables</span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">):</span><span class=\"w\"> </span><span class=\"s\">\"'value\"</span>\n<span class=\"kp\">in</span><span class=\"w\"> </span><span class=\"n\">type</span><span class=\"w\"> </span><span class=\"k\">abbreviation</span><span class=\"w\"> </span><span class=\"s\">\"myTypeOperator</span>\n</code></pre></div>\n<p>The examples I have found in the codebase were using such constraints on the Right Hand Side:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"n\">Isabelle2022/src/HOL/Isar_Examples/Hoare_Ex.thy</span><span class=\"o\">:</span><span class=\"k\">type_synonym</span><span class=\"w\"> </span><span class=\"n n-Type\">'a</span><span class=\"w\"> </span><span class=\"n\">time</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"</span><span class=\"ss\">\\&lt;lparr&gt;</span><span class=\"s\">time :: nat, </span><span class=\"ss\">\\&lt;dots&gt;</span><span class=\"s\"> :: 'a</span><span class=\"ss\">\\&lt;rparr&gt;</span><span class=\"s\">\"</span>\n<span class=\"n\">Isabelle2022/src/HOL/TLA/Intensional.thy</span><span class=\"o\">:</span><span class=\"k\">type_synonym</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n n-Type\">'w</span><span class=\"o\">,</span><span class=\"n n-Type\">'a</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">expr</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"'w </span><span class=\"ss\">\\&lt;Rightarrow&gt;</span><span class=\"s\"> 'a\"</span><span class=\"w\">   </span><span class=\"c\">(* intention: 'w::world, 'a::type *)</span>\n<span class=\"n\">afp</span><span class=\"o\">-</span><span class=\"n\">2023</span><span class=\"o\">-</span><span class=\"n\">03</span><span class=\"o\">-</span><span class=\"n\">16/thys/Binomial</span><span class=\"o\">-</span><span class=\"n\">Heaps/BinomialHeap.thy</span><span class=\"o\">:</span><span class=\"k\">type_synonym</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n n-Type\">'e</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n n-Type\">'a</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">BinomialQueue_inv</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"('e, 'a::linorder) BinomialTree list\"</span>\n<span class=\"n\">afp</span><span class=\"o\">-</span><span class=\"n\">2023</span><span class=\"o\">-</span><span class=\"n\">03</span><span class=\"o\">-</span><span class=\"n\">16/thys/Binomial</span><span class=\"o\">-</span><span class=\"n\">Heaps/SkewBinomialHeap.thy</span><span class=\"o\">:</span><span class=\"k\">type_synonym</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n n-Type\">'e</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n n-Type\">'a</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">SkewBinomialQueue</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"('e, 'a::linorder) SkewBinomialTree list\"</span>\n<span class=\"n\">afp</span><span class=\"o\">-</span><span class=\"n\">2023</span><span class=\"o\">-</span><span class=\"n\">03</span><span class=\"o\">-</span><span class=\"n\">16/thys/Locally</span><span class=\"o\">-</span><span class=\"n\">Nameless</span><span class=\"o\">-</span><span class=\"n\">Sigma/preliminary/FMap.thy</span><span class=\"o\">:</span><span class=\"k\">type_synonym</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n n-Type\">'a</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n n-Type\">'b</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">fmap</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"('a :: finite) </span><span class=\"ss\">\\&lt;rightharpoonup&gt;</span><span class=\"s\"> 'b\"</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"kp\">infixl</span><span class=\"w\"> </span><span class=\"s\">\"-~&gt;\"</span><span class=\"w\"> </span><span class=\"n\">50</span><span class=\"o\">)</span>\n<span class=\"n\">afp</span><span class=\"o\">-</span><span class=\"n\">2023</span><span class=\"o\">-</span><span class=\"n\">03</span><span class=\"o\">-</span><span class=\"n\">16/thys/Strong_Security/Types.thy</span><span class=\"o\">:</span><span class=\"k\">type_synonym</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n n-Type\">'id</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n n-Type\">'d</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">DomainAssignment</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"'id </span><span class=\"ss\">\\&lt;Rightarrow&gt;</span><span class=\"s\"> 'd::order\"</span>\n<span class=\"n\">afp</span><span class=\"o\">-</span><span class=\"n\">2023</span><span class=\"o\">-</span><span class=\"n\">03</span><span class=\"o\">-</span><span class=\"n\">16/thys/Differential_Dynamic_Logic/Denotational_Semantics.thy</span><span class=\"o\">:</span><span class=\"k\">type_synonym</span><span class=\"w\"> </span><span class=\"n n-Type\">'a</span><span class=\"w\"> </span><span class=\"n\">Rvec</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"real^('a::finite)\"</span>\n</code></pre></div>\n<p>so I wonder what the problem is here.</p>",
        "id": 380982072,
        "sender_full_name": "Gergely Buday",
        "timestamp": 1690972138
    },
    {
        "content": "<p>I am not sure if this is the cause of ignoring type class prescriptions, but Section 5.12.2 of the <a href=\"https://isabelle.in.tum.de/doc/isar-ref.pdf#page=138\">Isabelle/Isar Reference Manual</a> says that</p>\n<p><em>Unlike the semantic type definitions in Isabelle/HOL, type synonyms are merely syntactic abbreviations without any logical significance.</em></p>\n<p>I don't know if datatype is a semantic definition but it works:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">datatype</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n n-Type\">'v</span><span class=\"o\">::</span><span class=\"n\">group_add</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">myTypeOperator</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">MyTyOp</span><span class=\"w\"> </span><span class=\"n n-Type\">'v</span>\n\n<span class=\"k\">datatype</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n n-Type\">'v</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">myTypeOperator2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">MyTyOp2</span><span class=\"w\"> </span><span class=\"s\">\"'v::group_add\"</span>\n</code></pre></div>\n<p>to add type class prescription on both sides of the defining equation.</p>",
        "id": 381400723,
        "sender_full_name": "Gergely Buday",
        "timestamp": 1691052304
    },
    {
        "content": "<p>type synonyms means <code>type_synonym</code>…</p>",
        "id": 381401455,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1691052468
    },
    {
        "content": "<p>not datatype</p>",
        "id": 381401492,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1691052478
    },
    {
        "content": "<p>If <code>type_synonym</code> does not accept type class constraints,  I use another type definition command, for my purposes it does not matter which I use.</p>",
        "id": 381405705,
        "sender_full_name": "Gergely Buday",
        "timestamp": 1691053300
    },
    {
        "content": "<p>For wrapper types I would use <code>typedef</code> in the form <code>typedef … = \"UNIV :: … set\"</code>. The proof obligation this creates should be dischargable with <code>..</code>.</p>",
        "id": 381440810,
        "sender_full_name": "Wolfgang Jeltsch",
        "timestamp": 1691060730
    },
    {
        "content": "<p>And when working with types defined by <code>typedef</code>, I exclusively use <code>lift_definition</code> and the <code>transfer</code> proof methods, as opposed to using and reasoning with the <code>Abs</code> and <code>Rep</code> functions <code>typedef</code> creates.</p>",
        "id": 381475510,
        "sender_full_name": "Wolfgang Jeltsch",
        "timestamp": 1691067791
    }
]