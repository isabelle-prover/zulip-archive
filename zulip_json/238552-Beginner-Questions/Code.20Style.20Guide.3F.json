[
    {
        "content": "<p>Is there a standard/recommended style guide for Isabelle documented anywhere? From what code I've seen 2 space indentation seems to be the norm...</p>",
        "id": 290277439,
        "sender_full_name": "Isaac Freund",
        "timestamp": 1658341657
    },
    {
        "content": "<p>Even better would be a tool to automatically format Isabelle code</p>",
        "id": 290277599,
        "sender_full_name": "Isaac Freund",
        "timestamp": 1658341709
    },
    {
        "content": "<p>jedit auto-indents code (<code>C-i</code> to reindent a selected part IIRC).</p>",
        "id": 290278774,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1658342197
    },
    {
        "content": "<p>There are parts of the automatic indentation I really don't like (mostly related to inductive predicates and labels), but the default works mostly well.</p>",
        "id": 290278965,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1658342278
    },
    {
        "content": "<p>See the following:<br>\n<a href=\"https://isabelle.systems/conventions/\">https://isabelle.systems/conventions/</a><br>\n<a href=\"https://proofcraft.org/blog/isabelle-style.html\">https://proofcraft.org/blog/isabelle-style.html</a><br>\nNeither of these are official in any way though. The AFP also has some style guidelines, although most of them are more concerned with robustness than style:<br>\n<a href=\"https://www.isa-afp.org/submission/\">https://www.isa-afp.org/submission/</a></p>",
        "id": 290279963,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1658342683
    },
    {
        "content": "<p>Thanks to both of you, that jedit key bind seems pretty useful and those documents even more so :)</p>",
        "id": 290281310,
        "sender_full_name": "Isaac Freund",
        "timestamp": 1658343236
    },
    {
        "content": "<p>There's also a few more general tips here: <a href=\"https://isabelle.systems/cookbook/\">https://isabelle.systems/cookbook/</a></p>",
        "id": 290295066,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1658349415
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"515907\">Isaac Freund</span> <a href=\"#narrow/stream/238552-Beginner-Questions/topic/Code.20Style.20Guide.3F/near/290277599\">said</a>:</p>\n<blockquote>\n<p>Even better would be a tool to automatically format Isabelle code</p>\n</blockquote>\n<p>I’m very happy that at least there is no such tool integrated into the Isabelle IDE. About two Isabelle versions ago, I had to switch off the auto-indenter, because it made decisions that were apparently ridiculous, so that I found myself spending a considerable amount of effort to manually correct indentation.</p>\n<p>Autoformatters would be cool if their authors would have only sensible ideas regarding what a good style is. Sadly, it seems that the authors of autoformatters often have strange ideas regarding that. Maybe for the most part their ideas are reasonable, but one bad idea can be enough to spoil the whole idea of autoformatting. In addition, there might be situation where making exceptions to the rule is reasonable. Because of all that, I think the author should retain the final say regarding code formatting.</p>",
        "id": 290305393,
        "sender_full_name": "Wolfgang Jeltsch",
        "timestamp": 1658354506
    },
    {
        "content": "<p>I am slightly curious: what did you dislike that much? The one I dislike, but this is more or less the only instance:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">inductive</span> <span class=\"n\">rtranclp</span> <span class=\"o\">::</span> <span class=\"err\">‹</span><span class=\"o\">(</span><span class=\"n n-Type\">'a</span> <span class=\"err\">⇒</span> <span class=\"n n-Type\">'a</span> <span class=\"err\">⇒</span> <span class=\"n\">bool</span><span class=\"o\">)</span> <span class=\"err\">⇒</span> <span class=\"n n-Type\">'a</span> <span class=\"err\">⇒</span> <span class=\"n n-Type\">'a</span> <span class=\"err\">⇒</span> <span class=\"n\">bool</span><span class=\"err\">›</span> <span class=\"kp\">for</span> <span class=\"n\">r</span> <span class=\"o\">::</span> <span class=\"err\">‹</span><span class=\"n n-Type\">'a</span> <span class=\"err\">⇒</span> <span class=\"n n-Type\">'a</span> <span class=\"err\">⇒</span> <span class=\"n\">bool</span><span class=\"err\">›</span> <span class=\"kp\">where</span>\n  <span class=\"n\">base</span><span class=\"o\">:</span>\n  <span class=\"err\">‹</span><span class=\"n\">rtranclp</span> <span class=\"n\">r</span> <span class=\"n\">a</span> <span class=\"n\">a</span><span class=\"err\">›</span> <span class=\"o\">|</span>\n  <span class=\"n\">step</span><span class=\"o\">:</span>\n  <span class=\"err\">‹</span><span class=\"n\">rtranclp</span> <span class=\"n\">r</span> <span class=\"n\">a</span> <span class=\"n\">c</span><span class=\"err\">›</span>\n<span class=\"kp\">if</span>\n  <span class=\"err\">‹</span><span class=\"n\">r</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"err\">›</span>\n</code></pre></div>",
        "id": 290333716,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1658379641
    }
]