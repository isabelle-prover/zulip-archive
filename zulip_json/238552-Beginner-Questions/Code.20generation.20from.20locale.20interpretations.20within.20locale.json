[
    {
        "content": "<p>Hi. I've got two locales <code>A</code> and <code>B</code>. Every instance of <code>B</code> yields various instances of  <code>A</code>, defined via <code>interpretation</code> within the context of <code>B</code>. Later, I instantiate <code>B</code> using <code>global_interpretation</code>, naming a constant from <code>A</code> inherited in the context of <code>B</code>. However, code extraction fails for that constant. Fiddling a bit, I found a solution using <code>code_unfold</code>, but I don't know what I'm doing. So, my questions are: (a) Why is this not handled by <code>global_interpretation</code> already? (b) Why do I need to use <code>code_unfold</code> rather than <code>code</code>?</p>\n<p>Here's a minimal example (with just one interpretation of <code>A</code> within <code>B</code>, for simplicity; I only highlighted this to explain why I'm not using <code>sublocale</code>):</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">theory</span><span class=\"w\"> </span><span class=\"n\">Scratch</span>\n<span class=\"kp\">imports</span><span class=\"w\"> </span><span class=\"n\">Main</span>\n<span class=\"k\">begin</span>\n\n<span class=\"k\">locale</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">  </span><span class=\"kp\">fixes</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">‹'a::ab_semigroup_add ⇒ 'a›</span>\n<span class=\"w\">  </span><span class=\"kp\">assumes</span><span class=\"w\"> </span><span class=\"n\">a_linear</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">‹⋀x y. a (x+y) = a x + a y›</span>\n<span class=\"k\">begin</span>\n<span class=\"w\">  </span><span class=\"k\">definition</span><span class=\"w\"> </span><span class=\"s\">\"a_a\"</span><span class=\"w\"> </span><span class=\"kp\">where</span><span class=\"w\"> </span><span class=\"s\">‹a_a ≡ a ∘ a›</span>\n<span class=\"k\">end</span>\n\n<span class=\"kt\">thm</span><span class=\"w\"> </span><span class=\"n\">A.a_a_def</span>\n\n<span class=\"k\">locale</span><span class=\"w\"> </span><span class=\"n\">B</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">  </span><span class=\"kp\">fixes</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">‹'a::ab_semigroup_add ⇒ 'a›</span>\n<span class=\"w\">  </span><span class=\"kp\">assumes</span><span class=\"w\"> </span><span class=\"n\">b_linear</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">‹⋀x y. b (x+y) = b x + b y›</span>\n\n<span class=\"k\">context</span><span class=\"w\"> </span><span class=\"n\">B</span>\n<span class=\"k\">begin</span>\n<span class=\"w\">  </span><span class=\"k\">definition</span><span class=\"w\"> </span><span class=\"s\">‹b_a ≡ λx. (b x) + (b x)›</span>\n<span class=\"w\">  </span><span class=\"kn\">interpretation</span><span class=\"w\"> </span><span class=\"n\">B_A</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"n\">b_a</span>\n<span class=\"w\">    </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"n\">add</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">A_def</span><span class=\"w\"> </span><span class=\"n\">B.b_a_def</span><span class=\"w\"> </span><span class=\"n\">B.b_linear</span><span class=\"w\"> </span><span class=\"n\">B_axioms</span>\n<span class=\"w\">      </span><span class=\"n\">ab_semigroup_add_class.add_ac</span><span class=\"o\">(</span><span class=\"n\">1</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">add.left_commute</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"k\">lemmas</span><span class=\"w\"> </span><span class=\"n\">B_A_axioms</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">B_A.A_axioms</span>\n<span class=\"w\">  </span><span class=\"k\">definition</span><span class=\"w\"> </span><span class=\"s\">‹b_a_a ≡ B_A.a_a›</span>\n<span class=\"k\">end</span>\n\n<span class=\"n\">global_interpretation</span><span class=\"w\"> </span><span class=\"n\">IB</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">B</span><span class=\"w\"> </span><span class=\"s\">‹λ(x::nat). 2*x›</span>\n<span class=\"w\">  </span><span class=\"kp\">defines</span><span class=\"w\"> </span><span class=\"n\">b_a_export</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">‹IB.b_a›</span>\n<span class=\"w\">      </span><span class=\"kp\">and</span><span class=\"w\"> </span><span class=\"n\">a_a_export</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">‹IB.b_a_a›</span>\n<span class=\"w\">  </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"n\">add</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">B_def</span><span class=\"o\">)</span>\n\n<span class=\"n\">―‹No</span><span class=\"w\"> </span><span class=\"n\">code</span><span class=\"w\"> </span><span class=\"n\">equations</span><span class=\"w\"> </span><span class=\"kp\">for</span><span class=\"w\"> </span><span class=\"n\">▩‹A.a_a››</span>\n<span class=\"k\">export_code</span>\n<span class=\"w\">  </span><span class=\"n\">a_a_export</span>\n<span class=\"w\">  </span><span class=\"kp\">in</span><span class=\"w\"> </span><span class=\"n\">SML</span>\n\n<span class=\"n\">―‹▩‹Partially</span><span class=\"w\"> </span><span class=\"n\">applied</span><span class=\"w\"> </span><span class=\"kp\">constant</span><span class=\"w\"> </span><span class=\"s\">\"Scratch.b_a_export\"</span><span class=\"w\"> </span><span class=\"n\">on</span><span class=\"w\"> </span><span class=\"n\">left</span><span class=\"w\"> </span><span class=\"n\">hand</span><span class=\"w\"> </span><span class=\"n\">side</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">equation</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"kp\">in</span><span class=\"w\"> </span><span class=\"kn\">theorem</span><span class=\"o\">:</span>\n<span class=\"n\">A.a_a</span><span class=\"w\"> </span><span class=\"n\">b_a_export</span><span class=\"w\"> </span><span class=\"n\">≡</span><span class=\"w\"> </span><span class=\"n\">b_a_export</span><span class=\"w\"> </span><span class=\"n\">∘</span><span class=\"w\"> </span><span class=\"n\">b_a_export››</span>\n<span class=\"k\">declare</span><span class=\"w\"> </span><span class=\"n\">A.a_a_def</span><span class=\"o\">[</span><span class=\"n\">OF</span><span class=\"w\"> </span><span class=\"n\">IB.B_A_axioms</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">code</span><span class=\"o\">]</span>\n\n<span class=\"k\">export_code</span>\n<span class=\"w\">  </span><span class=\"n\">a_a_export</span>\n<span class=\"w\">  </span><span class=\"kp\">in</span><span class=\"w\"> </span><span class=\"n\">SML</span>\n\n<span class=\"n\">―‹Finally</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">this</span><span class=\"w\"> </span><span class=\"n\">works</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">but</span><span class=\"w\"> </span><span class=\"n\">I</span><span class=\"w\"> </span><span class=\"n\">don't</span><span class=\"w\"> </span><span class=\"n\">know</span><span class=\"w\"> </span><span class=\"n\">why.</span><span class=\"w\"> </span><span class=\"n\">Why</span><span class=\"w\"> </span><span class=\"n\">▩‹code_unfold›</span><span class=\"w\"> </span><span class=\"n\">rather</span><span class=\"w\"> </span><span class=\"n\">than</span><span class=\"w\"> </span><span class=\"n\">▩‹code›</span><span class=\"o\">?</span>\n<span class=\"w\">  </span><span class=\"n\">Why</span><span class=\"w\"> </span><span class=\"kp\">is</span><span class=\"w\"> </span><span class=\"n\">this</span><span class=\"w\"> </span><span class=\"n\">not</span><span class=\"w\"> </span><span class=\"n\">taken</span><span class=\"w\"> </span><span class=\"n\">care</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">▩‹global_interpretation›</span><span class=\"o\">?</span><span class=\"n\">›</span>\n<span class=\"k\">declare</span><span class=\"w\"> </span><span class=\"n\">A.a_a_def</span><span class=\"o\">[</span><span class=\"n\">OF</span><span class=\"w\"> </span><span class=\"n\">IB.B_A_axioms</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">code_unfold</span><span class=\"o\">]</span>\n\n<span class=\"k\">export_code</span>\n<span class=\"w\">  </span><span class=\"n\">a_a_export</span>\n<span class=\"w\">  </span><span class=\"kp\">in</span><span class=\"w\"> </span><span class=\"n\">SML</span>\n\n<span class=\"k\">end</span>\n</code></pre></div>",
        "id": 387617221,
        "sender_full_name": "Hanno Becker",
        "timestamp": 1693209079
    }
]