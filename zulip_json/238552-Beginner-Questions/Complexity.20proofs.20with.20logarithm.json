[
    {
        "content": "<p>How would I prove logarithmic complexity of a data structure? E.g. for example that a complete binary tree has a height that is logarithmic to the number of nodes, or that search takes at maximum log steps?</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">datatype</span> <span class=\"n n-Type\">'a</span> <span class=\"n\">bst</span> <span class=\"o\">=</span> <span class=\"n\">Leaf</span> <span class=\"o\">|</span> <span class=\"n\">Node</span> <span class=\"s\">\"'a bst\"</span> <span class=\"n n-Type\">'a</span> <span class=\"s\">\"'a bst\"</span>\n\n<span class=\"k\">fun</span> <span class=\"n\">heights</span> <span class=\"o\">::</span> <span class=\"s\">\"'a bst ⇒ nat list\"</span> <span class=\"kp\">where</span>\n  <span class=\"s\">\"heights Leaf = [0]\"</span>\n<span class=\"o\">|</span> <span class=\"s\">\"heights (Node a _ b) = map (λx. x + 1) (heights a) @ map (λx. x + 1) (heights b)\"</span>\n\n<span class=\"k\">definition</span> <span class=\"n\">maximum</span> <span class=\"o\">::</span> <span class=\"s\">\"nat list ⇒ nat\"</span> <span class=\"kp\">where</span>\n  <span class=\"s\">\"maximum xs ≡ foldl max 0 xs\"</span>\n\n<span class=\"k\">definition</span> <span class=\"n\">complete</span> <span class=\"o\">::</span> <span class=\"s\">\"'a bst ⇒ bool\"</span> <span class=\"kp\">where</span>\n  <span class=\"s\">\"complete t ≡ (∃n. set (heights t) = { n, Suc n }) ∨ (∃n. set (heights t) = { n })\"</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">height_log</span><span class=\"o\">:</span> <span class=\"s\">\"complete t ⟹ ceil (log2 (size t)) = maximum (heights t)\"</span>\n  <span class=\"gr\">sorry</span>\n\n<span class=\"k\">fun</span> <span class=\"n\">valid_bst</span> <span class=\"o\">::</span> <span class=\"s\">\"'a::linorder bst ⇒ bool\"</span> <span class=\"kp\">where</span>\n  <span class=\"s\">\"valid_bst Leaf = True\"</span>\n<span class=\"o\">|</span> <span class=\"s\">\"valid_bst (Node l a r) ⟷ (∀x∈set_bst l. x &lt; a) ∧ (∀x∈set_bst r. a &lt; x) ∧ valid_bst l ∧ valid_bst r\"</span>\n\n<span class=\"k\">fun</span> <span class=\"n\">isin</span> <span class=\"o\">::</span> <span class=\"s\">\"'a::linorder ⇒ 'a bst ⇒ bool\"</span> <span class=\"kp\">where</span>\n  <span class=\"s\">\"isin _ Leaf = False\"</span>\n<span class=\"o\">|</span> <span class=\"s\">\"isin x (Node l a r) = (if a = x then True else</span>\n<span class=\"s\">    if x &lt; a then isin x l else isin x r</span>\n<span class=\"s\">  )\"</span>\n<span class=\"k\">fun</span> <span class=\"n\">isin_t</span> <span class=\"o\">::</span> <span class=\"s\">\"'a::linorder ⇒ 'a bst ⇒ nat\"</span> <span class=\"kp\">where</span>\n  <span class=\"s\">\"isin_t _ Leaf = 1\"</span>\n<span class=\"o\">|</span> <span class=\"s\">\"isin_t x (Node l a r) = (if a = x then 1 else</span>\n<span class=\"s\">    if x &lt; a then 1 + isin_t x l else 1 + isin_t x r</span>\n<span class=\"s\">  )\"</span>\n\n<span class=\"kn\">lemma</span> <span class=\"s\">\"⟦ complete t ; valid_bst t ⟧ ⟹ isin_t x t ≤ ceil (log2 (size t))\"</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 236641520,
        "sender_full_name": "Jan van Brügge",
        "timestamp": 1619687042
    },
    {
        "content": "<p>It's probably easier to prove that a tree of height <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span> has <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mn>2</mn><mi>n</mi></msup></mrow><annotation encoding=\"application/x-tex\">2^n</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.664392em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span></span></span></span> nodes.</p>",
        "id": 236642105,
        "sender_full_name": "Lukas Stevens",
        "timestamp": 1619687326
    },
    {
        "content": "<p>If it is complete then it should be easy to prove by induction on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span>.</p>",
        "id": 236642179,
        "sender_full_name": "Lukas Stevens",
        "timestamp": 1619687372
    },
    {
        "content": "<p>Of course, I am stupid</p>",
        "id": 236643069,
        "sender_full_name": "Jan van Brügge",
        "timestamp": 1619687870
    },
    {
        "content": "<p>Indeed, that's usually the preferred way: reduce a property about the logarithm to a property about exponentiation.</p>\n<p>But one can also show with some effort (pretty sure I did that at some point somewhere) that if we define <code>f n = ceil (log 2 n)</code>then <code>f n = 1 + f ((n + 1) div 2)</code> or something like that, then you can do the induction like that. But the other way is probably nicer (pretty sure that's also how it's done in <span class=\"user-mention\" data-user-id=\"232794\">@Tobias Nipkow</span>'s FDS lecture).</p>",
        "id": 236646121,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1619689611
    }
]