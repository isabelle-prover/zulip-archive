[
    {
        "content": "<p>(Disclaimer: I'm using my own list definition instead of the built-in one for learning purposes)<br>\nHello. I'm having trouble proving this simple lemma below. I've reduced it to: \"reverse (reverse (exercises.list.Cons x1 xs)) = exercises.list.Cons x1 xs\" but isabelle still can't solve it. What am I missing here?</p>\n<p>datatype 'a list = Nil | Cons 'a \" 'a list\"</p>\n<p>fun snoc :: \"'a list ⇒ 'a ⇒ 'a list\" where<br>\n\"snoc Nil x = Cons x Nil\" |<br>\n\"snoc (Cons y ys) x = Cons y (snoc ys x)\"</p>\n<p>fun reverse :: \"'a list ⇒ 'a list\" where<br>\n\"reverse Nil = Nil\" |<br>\n\"reverse (Cons x xs) = (snoc (reverse xs) x)\"</p>\n<p>lemma snoc_simp [simp] : \"snoc (reverse xs) x = reverse (Cons x xs)\"<br>\n  apply(induction xs)<br>\n  apply(auto)<br>\n  done</p>\n<p>lemma rev_1: \"reverse (reverse xs) = xs\"<br>\n  apply (induction xs)<br>\n  apply(auto)<br>\n  done</p>",
        "id": 391442444,
        "sender_full_name": "Abu",
        "timestamp": 1694917042
    },
    {
        "content": "<p>For <code>snoc_simp</code> you can get away with a much simpler proof, as it is just the second defining equation of <code>reverse</code> with sides swapped. For example, this works:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">snoc_simp</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]:</span><span class=\"w\"> </span><span class=\"s\">\"snoc (reverse xs) x = reverse (Cons x xs)\"</span>\n<span class=\"w\">  </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">fact</span><span class=\"w\"> </span><span class=\"n\">reverse.simps</span><span class=\"o\">(</span><span class=\"n\">2</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">symmetric</span><span class=\"o\">])</span>\n<span class=\"w\">  </span><span class=\"k\">done</span>\n</code></pre></div>\n<p>You can also let Isabelle automatically pick said defining equation as a rewrite rule, as in the following version:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">snoc_simp</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]:</span><span class=\"w\"> </span><span class=\"s\">\"snoc (reverse xs) x = reverse (Cons x xs)\"</span>\n<span class=\"w\">  </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"n\">simp</span>\n<span class=\"w\">  </span><span class=\"k\">done</span>\n</code></pre></div>\n<p>I guess the fact that <code>snoc_simp</code> is the second defining equation reversed is the root of <code>auto</code> in the last proof getting stuck: both <code>snoc_simp</code> and the second defining equation are part of the simpset, which means that simplifying proof methods like <code>auto</code> can just get stuck with rewriting back and forth.</p>",
        "id": 391513414,
        "sender_full_name": "Wolfgang Jeltsch",
        "timestamp": 1694959849
    },
    {
        "content": "<p>When proving <code>reverse (reverse xs) = xs</code> and applying induction on <code>xs</code>, you get as the second case <code>reverse (reverse (Cons y ys))</code>. The inner <code>reverse</code> application can then get rewritten using the second defining equation of <code>reverse</code>, which turns the whole subgoal into <code>reverse (snoc (reverse ys) y)</code>. I guess you now need a lemma for rewriting the outer <code>reverse</code> application such that the reverse is pushed inside and you get <code>reverse (reverse ys)</code> as a subterm, which can then be rewritten using the induction hypothesis. So you don’t need your <code>snoc_simp</code>, which is for rewriting <code>snoc</code> applied to a <code>reverse</code> application, but you need a lemma for rewriting <code>reverse</code> applied to a <code>snoc</code> application.</p>",
        "id": 391514881,
        "sender_full_name": "Wolfgang Jeltsch",
        "timestamp": 1694960276
    },
    {
        "content": "<p>Thank you so much!</p>",
        "id": 391586195,
        "sender_full_name": "Abu",
        "timestamp": 1694993429
    }
]