[
    {
        "content": "<p>Say, I have a structure constructed by the conditions of a locale</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">locale</span><span class=\"w\"> </span><span class=\"n\">struct</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">  </span><span class=\"kp\">fixes</span>\n<span class=\"w\">    </span><span class=\"n\">M</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">‹'m set›</span><span class=\"w\"> </span><span class=\"kp\">and</span>\n<span class=\"w\">    </span><span class=\"n\">FN</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">‹'f ⇒ 'm list ⇒ 'm›</span><span class=\"w\"> </span><span class=\"kp\">and</span>\n<span class=\"w\">    </span><span class=\"n\">REL</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">‹'p ⇒ 'm list set›</span><span class=\"w\"> </span><span class=\"c\">(* in hol-ligh a boolean is returned instead *)</span>\n<span class=\"w\">  </span><span class=\"kp\">assumes</span>\n<span class=\"w\">    </span><span class=\"n\">M_nonempty</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">‹M ≠ {}›</span><span class=\"w\"> </span><span class=\"kp\">and</span>\n<span class=\"w\">    </span><span class=\"n\">FN_dom_to_dom</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">‹∀ f es. (∀ e ∈ list.set es. e ∈ M) ⟶ FN f es ∈ M›</span><span class=\"w\"> </span><span class=\"kp\">and</span>\n<span class=\"w\">    </span><span class=\"n\">REL_to_dom</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">‹∀ p. ∀ es ∈ REL p. ∀ e ∈ list.set es. e ∈ M›</span>\n\n<span class=\"kn\">typedef</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n n-Type\">'f</span><span class=\"o\">,</span><span class=\"n n-Type\">'p</span><span class=\"o\">,</span><span class=\"n n-Type\">'m</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">intrp</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">  </span><span class=\"s\">‹{ (M :: 'm set, FN :: 'f ⇒ 'm list ⇒ 'm, REL :: 'p ⇒ 'm list set). struct M FN REL }›</span>\n<span class=\"w\">  </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">struct.intro</span>\n<span class=\"w\">  </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">fastforce</span>\n</code></pre></div>\n<p>How can I declare a term of of type <code>('f,'p,'m) intrp </code>?</p>\n<p>I think I only need to know how to write the syntax but I do not find an example. An example will be very nice!</p>",
        "id": 473945304,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1727760179
    },
    {
        "content": "<p>So you are looking for a function to create a <code>('f,'p,'m) intrp</code>. When you know the type of something, you can search for constants: Query panel &gt; find constants &gt; <code>‹_set × (_ ⇒ _ list ⇒ _) × (_ =&gt; _ list set) ⇒ (_, _, _) intrp›</code> and you will the function to do the conversion:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kt\">find_consts</span>\n<span class=\"w\">  </span><span class=\"s\">\"_set × (_ ⇒ _ list ⇒ _) × (_ =&gt; _ list set) ⇒ (_, _, _) intrp\"</span>\n\n<span class=\"n\">found</span><span class=\"w\"> </span><span class=\"n\">1</span><span class=\"w\"> </span><span class=\"kp\">constant</span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">):</span>\n<span class=\"w\">  </span><span class=\"n\">Scratch.intrp.Abs_intrp</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"'m set × ('f ⇒ 'm list ⇒ 'm) × ('p ⇒ 'm list set) ⇒ ('f, 'p, 'm) intrp\"</span>\n</code></pre></div>\n<p>The keyword <code>morphisms</code> allows you to change the names</p>",
        "id": 473949436,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1727762253
    },
    {
        "content": "<p>The typedef stuff is explained in the tutorial <a href=\"https://isabelle.in.tum.de/doc/tutorial.pdf\">https://isabelle.in.tum.de/doc/tutorial.pdf</a> (Documentation panel &gt; tutorial, sources: <a href=\"https://www.cl.cam.ac.uk/research/hvg/Isabelle/dist/library/Doc/Tutorial/Typedefs.html\">https://www.cl.cam.ac.uk/research/hvg/Isabelle/dist/library/Doc/Tutorial/Typedefs.html</a>)</p>",
        "id": 473950543,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1727762564
    },
    {
        "content": "<p>And the next thing to look for is probably <code>lift_definition</code> and <code>transfer</code> for the proofs</p>",
        "id": 473950606,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1727762584
    },
    {
        "content": "<p>and this is the point where you know why very few people use typedef ;-)</p>",
        "id": 473950702,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1727762608
    },
    {
        "content": "<p>I see... Many thanks especially for the technique about constant-finding! </p>\n<p>I hope the reason why people rarely use typedef is it looks intimidating. From logic aspect I think I do like this feature. <br>\nAnd also you also have taught me the fact that sledgehammer does not like record type (and the truncation stuff looks ugly as well...). I have the options of: type_def, with locales. record type, plus assumptions on it, and, ordered pairs, with assumptions on it.</p>\n<p>Are there better alternatives and is there any folklore about how to choose which one to use?</p>",
        "id": 473960992,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1727765531
    },
    {
        "content": "<p>No worries if the answer is everything is plainly aesthetical! I am just a bit overwhelmed with these whole bunch of choice and would like to know about the consequences if possible.</p>",
        "id": 473961113,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1727765574
    },
    {
        "content": "<p>From my experience:</p>\n<ul>\n<li>records: mostly for things that will be extended later (there is a whole algebra theory based on that). I have never used that.</li>\n<li>typedef: mostly for objects that you want to handle as a whole and never want to reason on the details (like integers or machine words). <br>\n    + For example if you have a list without duplicate, you cannot use the lifted append without knowing that the object was not there. In my experience this approach does not scale due to that complicated setup: you usually end up needed all invariants on your state every time for everything.<br>\n    + Also there are things that you cannot express. Think of  finite set vs mset: with sets you cannot express that you functions do not add duplicates because it does not. Can be an issue for refinement.<br>\n    + requires to understand <code>transfer</code> eventually, especially when it goes wrong.</li>\n<li>invariants: usual approach. Often more modular (you can have several invariants that work independently of each other) and easier to extend.</li>\n</ul>\n<p>(remark that I did a CDCL formalization with 4 components in a state and 7 groups of invariants so your mileage may vary on how important modular is for you)</p>",
        "id": 473978731,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1727770187
    },
    {
        "content": "<p>Thank you for such a detailed explanation! I think maybe I tend to just use tuples then... (don't know if I will change my mind later, but I hope it is not too tedious.)</p>",
        "id": 474059727,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1727794948
    }
]