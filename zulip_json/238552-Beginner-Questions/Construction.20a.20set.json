[
    {
        "content": "<p>I've got a datatype</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">datatype</span><span class=\"w\"> </span><span class=\"n\">a2ln</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">A2Ordinary</span><span class=\"w\"> </span><span class=\"s\">\"real\"</span><span class=\"w\"> </span><span class=\"s\">\"real\"</span>\n<span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">A2Vertical</span><span class=\"w\"> </span><span class=\"s\">\"real\"</span>\n</code></pre></div>\n<p>for representing lines in the Cartesian plane. <code>A2Ordinary m b</code> is supposed to represent the line we usually describe as $y = mx + b$.  Naturally, that only works when m is nonzero, so I'd like to form a set called <code>Lines</code> consisting of all items of this datatype...except for the <code>Ordinary</code> ones with <code>m = 0</code>.  I tried writing</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">definition</span><span class=\"w\"> </span><span class=\"n\">A2Lines</span><span class=\"o\">::</span><span class=\"s\">\"a2ln set\"</span>\n<span class=\"w\">  </span><span class=\"kp\">where</span><span class=\"w\"> </span><span class=\"s\">\"A2Lines ≡ (UNIV::a2ln set) - {k . λ k . ∃ b . k = (Ordinary 0 b)}\"</span>\n</code></pre></div>\n<p>but Isabelle doesn't like that. (I've only used sets in Isabelle a little bit, so I'm still pretty shaky on them). </p>\n<p>Can someone suggest how I might define that set? </p>\n<p>I'm sure that there's a way to define it <em>positively</em> rather than with a set-difference, but if the set-difference way is possible, I'd like to see how to do it for later use.</p>",
        "id": 497778604,
        "sender_full_name": "John  Hughes",
        "timestamp": 1738712854
    },
    {
        "content": "<p>This is currently what your second term is with the syntax sugar removed</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"c\">(*   Set syntax    |  Set body    *)</span>\n<span class=\"kt\">term</span><span class=\"w\"> </span><span class=\"s\">\"Collect (λk . (λ k . ∃ b . k = (Ordinary 0 b)))\"</span>\n</code></pre></div>",
        "id": 497800854,
        "sender_full_name": "irvin",
        "timestamp": 1738725742
    },
    {
        "content": "<p>More generally</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"c\">(*Notice how both terms are printed the same in isabelle*)</span>\n<span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"s\">\"Collect (λx . P x) = {x. P x}\"</span>\n<span class=\"w\">  </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">fact</span><span class=\"w\"> </span><span class=\"n\">refl</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 497801106,
        "sender_full_name": "irvin",
        "timestamp": 1738725940
    },
    {
        "content": "<p>This is the syntax you are looking for I think:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kt\">term</span><span class=\"w\"> </span><span class=\"s\">‹{k | b . k = (Ordinary 0 b)}›</span>\n</code></pre></div>",
        "id": 497808513,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1738731052
    },
    {
        "content": "<p>(the λ is implicit and the ∃ is in the | basically)</p>",
        "id": 497808560,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1738731084
    },
    {
        "content": "<p>Just to answer the question, a non-set difference way to define this is</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"ow\">{</span><span class=\"n\">k.</span><span class=\"w\"> </span><span class=\"n\">∃b</span><span class=\"w\"> </span><span class=\"n\">c.</span><span class=\"w\"> </span><span class=\"n\">k</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">A2Ordinary</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"n\">∧</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"n\">≠</span><span class=\"w\"> </span><span class=\"n\">0</span><span class=\"ow\">}</span>\n</code></pre></div>\n<p>And a set difference way is</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"ow\">{</span><span class=\"n\">k.</span><span class=\"w\"> </span><span class=\"n\">∃b.</span><span class=\"w\"> </span><span class=\"n\">k</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">A2Ordinary</span><span class=\"w\"> </span><span class=\"n\">0</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"ow\">}</span>\n</code></pre></div>",
        "id": 497882862,
        "sender_full_name": "Christian Pardillo Laursen",
        "timestamp": 1738759007
    },
    {
        "content": "<p>Thanks. I was (perhaps mistakenly) trying to use the first 'set comprehension' notation from the theory Set:</p>\n<p>```<br>\n \"{x. P}\" ⇌ \"CONST Collect (λx. P)\"</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"n\">but</span><span class=\"w\"> </span><span class=\"n\">this</span><span class=\"w\"> </span><span class=\"n\">second</span><span class=\"w\"> </span><span class=\"n\">version</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"k\">with</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">vertical</span><span class=\"w\"> </span><span class=\"n\">bar</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">looks</span><span class=\"w\"> </span><span class=\"n\">more</span><span class=\"w\"> </span><span class=\"n\">workable.</span><span class=\"w\"> </span><span class=\"n\">I</span><span class=\"w\"> </span><span class=\"n\">had</span><span class=\"w\"> </span><span class=\"n\">earlier</span><span class=\"w\"> </span><span class=\"n\">tried</span><span class=\"w\"> </span><span class=\"n\">something</span><span class=\"w\"> </span><span class=\"n\">that</span><span class=\"w\"> </span><span class=\"n\">looked</span><span class=\"w\"> </span><span class=\"n\">like</span>\n<span class=\"sx\">`{A2Ordinary m b .  ... }`</span><span class=\"w\"> </span><span class=\"n\">but</span><span class=\"w\"> </span><span class=\"n\">couldn't</span><span class=\"w\"> </span><span class=\"n\">make</span><span class=\"w\"> </span><span class=\"n\">it</span><span class=\"w\"> </span><span class=\"n\">work</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"kp\">and</span><span class=\"w\"> </span><span class=\"n\">thought</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">problem</span><span class=\"w\"> </span><span class=\"n\">might</span><span class=\"w\"> </span><span class=\"n\">be</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">use</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">constructor</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">start</span><span class=\"w\"> </span><span class=\"n\">rather</span><span class=\"w\"> </span><span class=\"n\">than</span><span class=\"w\"> </span><span class=\"n\">just</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">variable</span><span class=\"o\">-</span><span class=\"n\">name.</span>\n\n<span class=\"n\">Thanks</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">everyone</span><span class=\"o\">!</span>\n</code></pre></div>",
        "id": 497942915,
        "sender_full_name": "John  Hughes",
        "timestamp": 1738775410
    }
]