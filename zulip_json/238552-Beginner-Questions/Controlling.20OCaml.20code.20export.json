[
    {
        "content": "<p>When exporting constants to OCaml, I'm seeing that the corresponding type definitions that a function operates on are serialized to OCaml within a module. In the case of <code>datatype</code>, this means that the datatype constructors aren't accessible outside of the module.</p>\n<p>Here's what I mean:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">theory</span><span class=\"w\"> </span><span class=\"n\">CodeTest</span><span class=\"w\"></span>\n\n<span class=\"kp\">imports</span><span class=\"w\"> </span><span class=\"n\">Main</span><span class=\"w\"></span>\n\n<span class=\"k\">begin</span><span class=\"w\"></span>\n\n<span class=\"k\">datatype</span><span class=\"w\"> </span><span class=\"n\">color</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Red</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Green</span><span class=\"w\"></span>\n\n<span class=\"k\">definition</span><span class=\"w\"> </span><span class=\"s\">\"is_red c = (case c of Red ⇒ True | _ ⇒ False)\"</span><span class=\"w\"></span>\n\n<span class=\"k\">export_code</span><span class=\"w\"> </span><span class=\"n\">is_red</span><span class=\"w\"> </span><span class=\"kp\">in</span><span class=\"w\"> </span><span class=\"n\">OCaml</span><span class=\"w\"></span>\n\n<span class=\"k\">end</span><span class=\"w\"></span>\n</code></pre></div>\n<p>This is the theory in Isabelle, and here's the generate OCaml code:</p>\n<div class=\"codehilite\" data-code-language=\"OCaml\"><pre><span></span><code><span class=\"k\">module</span> <span class=\"nc\">CodeTest</span> <span class=\"o\">:</span> <span class=\"k\">sig</span>\n  <span class=\"k\">type</span> <span class=\"n\">color</span>\n  <span class=\"k\">val</span> <span class=\"n\">is_red</span> <span class=\"o\">:</span> <span class=\"n\">color</span> <span class=\"o\">-&gt;</span> <span class=\"kt\">bool</span>\n<span class=\"k\">end</span> <span class=\"o\">=</span> <span class=\"k\">struct</span>\n\n<span class=\"k\">type</span> <span class=\"n\">color</span> <span class=\"o\">=</span> <span class=\"nc\">Red</span> <span class=\"o\">|</span> <span class=\"nc\">Green</span><span class=\"o\">;;</span>\n\n<span class=\"k\">let</span> <span class=\"k\">rec</span> <span class=\"n\">is_red</span> <span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"o\">(</span><span class=\"k\">match</span> <span class=\"n\">c</span> <span class=\"k\">with</span> <span class=\"nc\">Red</span> <span class=\"o\">-&gt;</span> <span class=\"bp\">true</span> <span class=\"o\">|</span> <span class=\"nc\">Green</span> <span class=\"o\">-&gt;</span> <span class=\"bp\">false</span><span class=\"o\">);;</span>\n\n<span class=\"k\">end</span><span class=\"o\">;;</span> <span class=\"c\">(*struct CodeTest*)</span>\n</code></pre></div>\n<p><code>type color</code> in the module signature means that some code outside of the <code>CodeTest</code> module can't create values of that type.</p>\n<p>I've found a good amount of documentation of the code generation process, but can't find anything about this specific scenario. Is this something that I'd need to write custom code equations for, or is there some configuration that could control this?</p>",
        "id": 299242678,
        "sender_full_name": "Alex Weisberger",
        "timestamp": 1663363004
    },
    {
        "content": "<p>I am not sure if there is a nicer solution, but usually export one constructor of the datatype. This leads to the type being part of the signature</p>",
        "id": 299245720,
        "sender_full_name": "Simon Roßkopf",
        "timestamp": 1663364657
    },
    {
        "content": "<p>There is also the keyword <code>open</code> (<code>export open ...</code>, See chapter 13 in the isar-ref), but that leads to exposing everything in the modules.</p>",
        "id": 299246649,
        "sender_full_name": "Simon Roßkopf",
        "timestamp": 1663365166
    },
    {
        "content": "<p>Exporting one of the constructors works perfectly, and makes enough sense that I have no problem doing that. That solves my problem exactly. Thanks!</p>",
        "id": 299264300,
        "sender_full_name": "Alex Weisberger",
        "timestamp": 1663379890
    }
]