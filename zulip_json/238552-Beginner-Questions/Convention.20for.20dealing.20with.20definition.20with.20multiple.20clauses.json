[
    {
        "content": "<p>There are many definitions of such a format:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">definition</span><span class=\"w\"> </span><span class=\"n\">bounded_morphism</span><span class=\"w\"> </span><span class=\"o\">::</span>\n<span class=\"s\">\"('m set × ('m ⇒ nat)) × 'p set ⇒</span>\n<span class=\"s\"> ('a ⇒ 'b) ⇒ ('m,'p,'a) model =&gt; ('m,'p,'b) model =&gt; bool\"</span>\n<span class=\"kp\">where</span>\n<span class=\"s\">\"bounded_morphism sig f M M' ⟷</span>\n<span class=\"s\"> (∀w. w ∈ world M ⟶ f w ∈ world M') ∧</span>\n<span class=\"s\"> (∀w p. p ∈ props sig ⟶ w ∈ world M ⟶ valt M p w = valt M' p (f w)) ∧</span>\n<span class=\"s\"> (∀m wl. in_rel_dom sig m wl ⟶ List.set wl ⊆ world M ⟶ rel M m wl ⟶ rel M' m (map f wl)) ∧</span>\n<span class=\"s\"> (∀m w v'l. w ∈ world M ⟶ in_rel_dom sig m (f w # v'l) ⟶  List.set v'l ⊆ world M' ⟶</span>\n<span class=\"s\">  (∃vl. List.set vl ⊆ world M ∧ rel M m (w # vl) ∧ map f vl = v'l))\"</span>\n</code></pre></div>\n<p>The definition consists of four conjunctions, each referring to a different property. In some proofs, one perhaps each one of these properties each time. I wonder what people will suggest on dealing with such cases: do we want to define four properties accordingly, and then define <code>bounded_morphisms sig f M M' &lt;==&gt; property1 sig f M M' /\\ ... /\\ property 4 sig f M M'</code>, or do we want to prove some trivial lemmas such as:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">bounded_morphism_cod</span><span class=\"o\">:</span>\n<span class=\"w\"> </span><span class=\"s\">\"bounded_morphism sig f M M' ⟹ w ∈ world M ⟶ f w ∈ world M'\"</span>\n<span class=\"w\">  </span><span class=\"k\">unfolding</span><span class=\"w\"> </span><span class=\"n\">bounded_morphism_def</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">blast</span>\n</code></pre></div>\n<p>and use it instead of directly relying on the definition when dealing with specific goals?</p>\n<p>I know that people have different preferences. I just want to know if any of you want to encourage or discourage certain approaches because of certain reasons. Since it is a common thing, I also wonder if Isabelle already has some features to deal with that.</p>",
        "id": 496186997,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1738002359
    },
    {
        "content": "<p>My rule of thumb: if you can on a first glance know what the conjunction means (and if it is not introducing new variables), then the conjunction is fine. Otherwise, you want to give it a name that you can understand.</p>\n<p>In my experience this also roughly matches how you do the proofs: if it is complicated, you are want to manipulate the thing as a whole instead of unfolding the definition each time.</p>\n<p>For example, <code>even</code> vs <code>?x. n = 2*x</code>: sometimes you want the <code>x</code>, but often you want manipulate the <code>even</code> concept directly.</p>",
        "id": 496188330,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1738002812
    },
    {
        "content": "<blockquote>\n<p><div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">bounded_morphism_cod</span><span class=\"o\">:</span>\n<span class=\"w\"> </span><span class=\"s\">\"bounded_morphism sig f M M' ⟹ w ∈ world M ⟶ f w ∈ world M'\"</span>\n<span class=\"w\">  </span><span class=\"k\">unfolding</span><span class=\"w\"> </span><span class=\"n\">bounded_morphism_def</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">blast</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Ah the good old dest rules. Always a pain to write and you never know if it is a good one or a bad one.</p>",
        "id": 496188382,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1738002835
    },
    {
        "content": "<p>Do you mean the lemma is pain to write? Or pain to use?</p>",
        "id": 496189499,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1738003222
    },
    {
        "content": "<p>If pain to use, then why? I think I already find such a thing helpful.</p>",
        "id": 496189604,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1738003260
    },
    {
        "content": "<blockquote>\n<p>Otherwise, you want to give it a name that you can understand.<br>\nSince I am rather familiar with them I can immediately tell what they means, but they do address different things and hence may deserve names. Is it possible to give the conjuncts of a definition separate names without defining them outside the definition individually?</p>\n</blockquote>",
        "id": 496190205,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1738003457
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"754515\">Yiming Xu</span> <a href=\"#narrow/channel/238552-Beginner-Questions/topic/Convention.20for.20dealing.20with.20definition.20with.20multiple.20clauses/near/496189499\">said</a>:</p>\n<blockquote>\n<p>Do you mean the lemma is pain to write? Or pain to use?</p>\n</blockquote>\n<p>a pain to read if it is in a goal</p>",
        "id": 496191331,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1738003866
    },
    {
        "content": "<p>I hate if I have a lemma, apply auto and see 230 goals generated</p>",
        "id": 496191415,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1738003902
    },
    {
        "content": "<p>Ah I am not going to add it into the goal. I would like to feed it instead of the original definition to sledgehammer.</p>",
        "id": 496191513,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1738003931
    },
    {
        "content": "<p>Ah? I am unclear with it, how do you use such a thing with auto and see 230 goals generated?</p>",
        "id": 496191616,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1738003978
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"754515\">Yiming Xu</span> <a href=\"#narrow/channel/238552-Beginner-Questions/topic/Convention.20for.20dealing.20with.20definition.20with.20multiple.20clauses/near/496190205\">said</a>:</p>\n<blockquote>\n<p>Since I am rather familiar with them I can immediately tell what they means, but they do address different things and hence may deserve names. Is it possible to give the conjuncts of a definition separate names without defining them outside the definition individually?</p>\n</blockquote>\n<p>Sure. But in 6 months? Usually, the right moment to decide is when you refactor the definitions for the first time.</p>",
        "id": 496191769,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1738004027
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"754515\">Yiming Xu</span> <a href=\"#narrow/channel/238552-Beginner-Questions/topic/Convention.20for.20dealing.20with.20definition.20with.20multiple.20clauses/near/496191616\">said</a>:</p>\n<blockquote>\n<p>Ah? I am unclear with it, how do you use such a thing with auto and see 230 goals generated?</p>\n</blockquote>\n<p>In your case <code>bounded_morphism</code> produces 5 goals. If there are 2 booleans in each goal, you get to <code>2*2*5 = 20</code> goals. And here we did not look at the goal yet</p>",
        "id": 496191955,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1738004089
    },
    {
        "content": "<p>The lemma I prove is single direction. Not an iff. So I do not think this has any unfolding effect?</p>",
        "id": 496192140,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1738004155
    },
    {
        "content": "<p>I regret some choice I made and hate some pieces of my version 0. I am redo something.</p>",
        "id": 496192253,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1738004188
    },
    {
        "content": "<p>Sorry I still meant the definition and when you should name the conjuncts</p>",
        "id": 496192282,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1738004197
    },
    {
        "content": "<p>For the lemma, that can help sledgehammer, yes</p>",
        "id": 496192405,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1738004236
    },
    {
        "content": "<p>I see. That is indeed my intention. If this is the way to go to help sledgehammer, I will not bother giving them names.</p>",
        "id": 496192579,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1738004290
    },
    {
        "content": "<p>… theorems without names cannot be picked by sledgehammer</p>",
        "id": 496192959,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1738004434
    },
    {
        "content": "<p>Oh I mean naming the conjuncts!</p>",
        "id": 496193046,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1738004461
    },
    {
        "content": "<p>I will not bother giving each conjunct a specific name.</p>",
        "id": 496193087,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1738004477
    },
    {
        "content": "<p>yeah that should works</p>",
        "id": 496193110,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1738004488
    },
    {
        "content": "<p>Vielen Dank! I will do it this way.</p>",
        "id": 496193232,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1738004529
    }
]