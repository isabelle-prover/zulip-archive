[
    {
        "content": "<p>In my project, I often come across lemmas such as this one:<br>\n<code>lemma my_lemma: \"P (PredDecl p args) ⟷ Q p ∧ R p args\"</code></p>\n<p>PredDecl only has one constructor:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">datatype</span><span class=\"w\"> </span><span class=\"n\">predicate_decl</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">PredDecl</span>\n<span class=\"w\">  </span><span class=\"o\">(</span><span class=\"n\">pred</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">predicate</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"o\">(</span><span class=\"n\">argTs</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"type list\"</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>And I want to easily manipulatel such lemmas into this equivalent form:<br>\n<code>\"P pd ⟷ Q (pred pd) ∧ R (pred pd) (argTs pd)\"</code></p>\n<p>How do I go about this? And is there also a way to do this in the other direction?</p>",
        "id": 489721550,
        "sender_full_name": "Maximilian Vollath",
        "timestamp": 1734516450
    },
    {
        "content": "<p>what is the question exactly?</p>",
        "id": 489747894,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1734525326
    },
    {
        "content": "<p>Proving the equivalent from is pretty much trivial:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">my_lemma'</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"P pd ⟷ Q (pred pd) ∧ R (pred pd) (argTs pd)\"</span>\n<span class=\"w\">  </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">cases</span><span class=\"w\"> </span><span class=\"n\">pd</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">rule</span><span class=\"w\"> </span><span class=\"n\">my_lemma</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 489747957,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1734525348
    },
    {
        "content": "<p>So you could use the alternative version</p>",
        "id": 489748070,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1734525373
    },
    {
        "content": "<p>You could do something like this:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">lemmas</span><span class=\"w\"> </span><span class=\"n\">my_lemma'</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">my_lemma</span><span class=\"o\">[</span><span class=\"kp\">where</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">‹pred pd›</span><span class=\"w\"> </span><span class=\"kp\">and</span><span class=\"w\"> </span><span class=\"n\">args</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">‹argTs pd›</span><span class=\"w\"> </span><span class=\"kp\">for</span><span class=\"w\"> </span><span class=\"n\">pd</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">unfolded</span><span class=\"w\"> </span><span class=\"n\">predicate_decl.collapse</span><span class=\"o\">]</span>\n<span class=\"k\">lemmas</span><span class=\"w\"> </span><span class=\"n\">my_lemma''</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">my_lemma'</span><span class=\"o\">[</span><span class=\"kp\">where</span><span class=\"w\"> </span><span class=\"n\">pd</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">‹PredDecl p args›</span><span class=\"w\"> </span><span class=\"kp\">for</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"n\">args</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">unfolded</span><span class=\"w\"> </span><span class=\"n\">predicate_decl.sel</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>There may be much simpler solutions to achieve this, though I don't know how to do better.</p>",
        "id": 489766858,
        "sender_full_name": "Maximilian Schäffeler",
        "timestamp": 1734531377
    },
    {
        "content": "<p>Thank you, that's still a little bit tedious but very useful!</p>",
        "id": 489803073,
        "sender_full_name": "Maximilian Vollath",
        "timestamp": 1734541260
    },
    {
        "content": "<p>Maybe this?</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">datatype</span><span class=\"w\"> </span><span class=\"n\">predicate_decl</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">PredDecl</span>\n<span class=\"w\">  </span><span class=\"o\">(</span><span class=\"n\">pred</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">predicate</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"o\">(</span><span class=\"n\">argTs</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"type list\"</span><span class=\"o\">)</span>\n\n<span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">pred1</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kp\">assumes</span><span class=\"w\"> </span><span class=\"s\">\"⋀p args. P (PredDecl p args) ⟷ Q p ∧ R p args\"</span>\n<span class=\"w\">  </span><span class=\"kp\">shows</span><span class=\"w\"> </span><span class=\"s\">\"P pd ⟷ Q (pred pd) ∧ R (pred pd) (argTs pd)\"</span>\n<span class=\"w\">  </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">assms</span><span class=\"w\"> </span><span class=\"o\">[[</span><span class=\"n\">simp_trace</span><span class=\"o\">]]</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">cases</span><span class=\"w\"> </span><span class=\"n\">pd</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">simp</span>\n\n<span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">pred2</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kp\">assumes</span><span class=\"w\"> </span><span class=\"s\">\"⋀pd. P pd ⟷ Q (pred pd) ∧ R (pred pd) (argTs pd)\"</span>\n<span class=\"w\">  </span><span class=\"kp\">shows</span><span class=\"w\"> </span><span class=\"s\">\"P (PredDecl p args) ⟷ Q p ∧ R p args\"</span>\n<span class=\"w\">  </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">assms</span><span class=\"w\"> </span><span class=\"o\">[[</span><span class=\"n\">simp_trace</span><span class=\"o\">]]</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">simp</span>\n\n\n<span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">my_lemma</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"P (PredDecl p args) ⟷ Q p ∧ R p args\"</span>\n<span class=\"w\">  </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">rule</span><span class=\"w\"> </span><span class=\"n\">pred1</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"gr\">sorry</span>\n\n<span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">my_lemma'</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"P pd ⟷ Q (pred pd) ∧ R (pred pd) (argTs pd)\"</span>\n<span class=\"w\">  </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">rule</span><span class=\"w\"> </span><span class=\"n\">pred2</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>I don't know how to make Isabelle favour these when using <code>apply rule</code>. I find this interesting as well.</p>",
        "id": 489830414,
        "sender_full_name": "David Wang",
        "timestamp": 1734551373
    },
    {
        "content": "<p>If you use the AFP, you can use Unification Hints:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">theory</span><span class=\"w\"> </span><span class=\"n\">Scratch</span>\n<span class=\"w\">  </span><span class=\"kp\">imports</span>\n<span class=\"w\">    </span><span class=\"n\">Main</span>\n<span class=\"w\">    </span><span class=\"n\">ML_Unification.ML_Unification_HOL_Setup</span>\n<span class=\"w\">    </span><span class=\"n\">ML_Unification.Unify_Resolve_Tactics</span>\n<span class=\"k\">begin</span>\n\n<span class=\"k\">datatype</span><span class=\"w\"> </span><span class=\"n\">predicate_decl</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">PredDecl</span>\n<span class=\"w\">  </span><span class=\"o\">(</span><span class=\"n\">pred</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">nat</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"o\">(</span><span class=\"n\">argTs</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">int</span><span class=\"o\">)</span>\n\n<span class=\"k\">consts</span><span class=\"w\"> </span><span class=\"n\">P</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"predicate_decl ⇒ bool\"</span>\n<span class=\"k\">consts</span><span class=\"w\"> </span><span class=\"n\">Q</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"nat ⇒ bool\"</span>\n<span class=\"k\">consts</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"nat ⇒ int ⇒ bool\"</span>\n\n<span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">my_lemma</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"P (PredDecl p args) ⟷ Q p ∧ R p args\"</span>\n<span class=\"w\">  </span><span class=\"gr\">sorry</span>\n\n<span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"s\">\"P pd ⟷ Q (pred pd) ∧ R (pred pd) (argTs pd)\"</span>\n<span class=\"w\">  </span><span class=\"c\">(*quick and dirty*)</span>\n<span class=\"w\">  </span><span class=\"n\">supply</span><span class=\"w\"> </span><span class=\"n\">predicate_decl.collapse</span><span class=\"o\">[</span><span class=\"n\">uhint</span><span class=\"o\">]</span>\n<span class=\"w\">  </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">urule</span><span class=\"w\"> </span><span class=\"n\">my_lemma</span><span class=\"o\">)</span>\n\n<span class=\"c\">(* clean version with proper setup *)</span>\n<span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">PredDecl_eta_uhint</span><span class=\"o\">[</span><span class=\"n\">uhint</span><span class=\"o\">]:</span><span class=\"w\"> </span><span class=\"s\">\"pd = pd' ⟹ PredDecl (pred pd) (argTs pd) = pd'\"</span>\n<span class=\"w\">  </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">simp</span>\n\n<span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"s\">\"P pd ⟷ Q (pred pd) ∧ R (pred pd) (argTs pd)\"</span>\n<span class=\"w\">  </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">urule</span><span class=\"w\"> </span><span class=\"n\">my_lemma</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 489834192,
        "sender_full_name": "Kevin Kappelmann",
        "timestamp": 1734552884
    },
    {
        "content": "<p>Since I didn't clarify that enough, I am not looking for a solution where I have to redefine the lemma manually, but rather an in-line solution that lets me use the transformed variant of these lemmas in proofs. </p>\n<p>Your solution seems great, actually, since <code>apply (urule ...)</code> probably does a lot of what I want. I'll look into it once I get it to run. Thank you!</p>",
        "id": 489855261,
        "sender_full_name": "Maximilian Vollath",
        "timestamp": 1734562413
    },
    {
        "content": "<p>In this case, the <code>rule</code> method also works:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"s\">\"P pd ⟷ Q (pred pd) ∧ R (pred pd) (argTs pd)\"</span>\n<span class=\"w\">  </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">rule</span><span class=\"w\"> </span><span class=\"n\">my_lemma</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 489928267,
        "sender_full_name": "Maximilian Schäffeler",
        "timestamp": 1734603485
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"433149\">Maximilian Schäffeler</span> <a href=\"#narrow/channel/238552-Beginner-Questions/topic/Converting.20facts.20from.20pattern.20matching.20single-constructors/near/489928267\">said</a>:</p>\n<blockquote>\n<p>In this case, the <code>rule</code> method also works:</p>\n<p><div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"s\">\"P pd ⟷ Q (pred pd) ∧ R (pred pd) (argTs pd)\"</span>\n<span class=\"w\">  </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">rule</span><span class=\"w\"> </span><span class=\"n\">my_lemma</span><span class=\"o\">)</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>You probably got tricked: If <code>P</code>, <code>Q</code>, <code>R</code> are some fixed constants (which they should be; otherwise <code>my_lemma</code> is unprovable), it doesn't work. If they are free variables, it works due to higher-order unification. </p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">datatype</span><span class=\"w\"> </span><span class=\"n\">predicate_decl</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">PredDecl</span>\n<span class=\"w\">  </span><span class=\"o\">(</span><span class=\"n\">pred</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">nat</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"o\">(</span><span class=\"n\">argTs</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">int</span><span class=\"o\">)</span>\n\n<span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">my_lemma</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"P (PredDecl p args) ⟷ Q p ∧ R p args\"</span>\n<span class=\"w\">  </span><span class=\"gr\">sorry</span>\n\n<span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"s\">\"P pd ⟷ Q (pred pd) ∧ R (pred pd) (argTs pd)\"</span>\n<span class=\"w\">  </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">rule</span><span class=\"w\"> </span><span class=\"n\">my_lemma</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"k\">done</span>\n\n<span class=\"k\">consts</span><span class=\"w\"> </span><span class=\"n\">P</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"predicate_decl ⇒ bool\"</span>\n<span class=\"k\">consts</span><span class=\"w\"> </span><span class=\"n\">Q</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"nat ⇒ bool\"</span>\n<span class=\"k\">consts</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"nat ⇒ int ⇒ bool\"</span>\n\n<span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">my_lemma2</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"P (PredDecl p args) ⟷ Q p ∧ R p args\"</span>\n<span class=\"w\">  </span><span class=\"gr\">sorry</span>\n\n<span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"s\">\"P pd ⟷ Q (pred pd) ∧ R (pred pd) (argTs pd)\"</span>\n<span class=\"w\">  </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">rule</span><span class=\"w\"> </span><span class=\"n\">my_lemma2</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"gr\">oops</span>\n</code></pre></div>",
        "id": 489954436,
        "sender_full_name": "Kevin Kappelmann",
        "timestamp": 1734611476
    },
    {
        "content": "<p>You are completely right :D</p>",
        "id": 489981404,
        "sender_full_name": "Maximilian Schäffeler",
        "timestamp": 1734620287
    }
]