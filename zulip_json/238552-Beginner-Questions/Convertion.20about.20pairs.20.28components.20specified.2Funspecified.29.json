[
    {
        "content": "<p>I would like to, from this version of the theorem:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"s\">\"cwff ((Op,ρ),Φ) (cBOX m fl) ⟷</span>\n<span class=\"s\">  (m ∈ Op ∧ ρ m = length fl ∧</span>\n<span class=\"s\">   (∀f. f ∈ list.set fl ⟶ cwff ((Op,ρ),Φ) f))\"</span>\n</code></pre></div>\n<p>obtain the following version where the components are not specified.</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"s\">\"cwff (τ,Φ) (cBOX m fl) ⟷</span>\n<span class=\"s\">  (m ∈ (fst τ) ∧ (snd τ) m = length fl ∧</span>\n<span class=\"s\">   (∀f. f ∈ list.set fl ⟶ cwff (τ,Φ) f))\"</span>\n</code></pre></div>\n<p>sledgehammer gives the following:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"n\">Sledgehammering...</span>\n<span class=\"n\">cvc4</span><span class=\"w\"> </span><span class=\"n\">found</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"k\">proof</span><span class=\"ow\">...</span>\n<span class=\"n\">verit</span><span class=\"w\"> </span><span class=\"n\">found</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"k\">proof</span><span class=\"ow\">...</span>\n<span class=\"n\">cvc4</span><span class=\"w\"> </span><span class=\"n\">found</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"k\">proof</span><span class=\"ow\">...</span>\n<span class=\"n\">cvc4</span><span class=\"w\"> </span><span class=\"n\">found</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"k\">proof</span><span class=\"ow\">...</span>\n<span class=\"n\">vampire</span><span class=\"w\"> </span><span class=\"n\">found</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"k\">proof</span><span class=\"ow\">...</span>\n<span class=\"n\">vampire</span><span class=\"w\"> </span><span class=\"n\">found</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"k\">proof</span><span class=\"ow\">...</span>\n<span class=\"n\">cvc4</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Try</span><span class=\"w\"> </span><span class=\"n\">this</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">smt</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">verit</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">prod.collapse</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">&gt;</span><span class=\"w\"> </span><span class=\"n\">1.0</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">timed</span><span class=\"w\"> </span><span class=\"n\">out</span><span class=\"o\">)</span>\n<span class=\"n\">cvc4</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Duplicate</span><span class=\"w\"> </span><span class=\"k\">proof</span>\n<span class=\"n\">cvc4</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Duplicate</span><span class=\"w\"> </span><span class=\"k\">proof</span>\n<span class=\"n\">vampire</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Try</span><span class=\"w\"> </span><span class=\"n\">this</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">metis</span><span class=\"w\"> </span><span class=\"n\">surjective_pairing</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">&gt;</span><span class=\"w\"> </span><span class=\"n\">1.0</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">timed</span><span class=\"w\"> </span><span class=\"n\">out</span><span class=\"o\">)</span>\n\n<span class=\"n\">Isar</span><span class=\"w\"> </span><span class=\"k\">proof</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">8.2</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"o\">):</span>\n<span class=\"k\">proof</span><span class=\"w\"> </span><span class=\"o\">-</span>\n<span class=\"w\">  </span><span class=\"k\">obtain</span><span class=\"w\"> </span><span class=\"n\">cc</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"('a, 'b) cform list ⇒ 'b set ⇒ ('a ⇒ nat) ⇒ 'a set ⇒ ('a, 'b) cform\"</span><span class=\"w\"> </span><span class=\"kp\">where</span>\n<span class=\"w\">    </span><span class=\"s\">\"∀X1 X2 X3 X4. (∃X5. ¬ cwff ((X4, X3), X2) X5 ∧ X5 ∈ list.set X1) ⟶ ¬ cwff ((X4, X3), X2) (cc X1 X2 X3 X4) ∧ cc X1 X2 X3 X4 ∈ list.set X1\"</span>\n<span class=\"w\">    </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">moura</span>\n<span class=\"w\">  </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"k\">obtain</span><span class=\"w\"> </span><span class=\"n\">cca</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"('a, 'b) cform list ⇒ 'b set ⇒ ('a ⇒ nat) ⇒ 'a set ⇒ ('a, 'b) cform\"</span><span class=\"w\"> </span><span class=\"kp\">where</span>\n<span class=\"w\">    </span><span class=\"s\">\"∀a cs B f A. (cwff ((A, f), B) (cBOX a cs) ∨ a ∉ A ∨ ¬ cwff ((A, f), B) (cca cs B f A) ∧ cca cs B f A ∈ list.set cs ∨ length cs ≠ f a) ∧ (a ∈ A ∧ (∀c. cwff ((A, f), B) c ∨ c ∉ list.set cs) ∧ length cs = f a ∨ ¬ cwff ((A, f), B) (cBOX a cs))\"</span>\n<span class=\"w\">    </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">metis</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">full_types</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">cwff_cBOX0</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">thesis</span>\n<span class=\"w\">    </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">smt</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">z3</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">surjective_pairing</span><span class=\"o\">)</span>\n<span class=\"k\">qed</span>\n<span class=\"n\">verit</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Try</span><span class=\"w\"> </span><span class=\"n\">this</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">smt</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">verit</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">prod.exhaust_sel</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">&gt;</span><span class=\"w\"> </span><span class=\"n\">1.0</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">timed</span><span class=\"w\"> </span><span class=\"n\">out</span><span class=\"o\">)</span>\n<span class=\"n\">vampire</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Try</span><span class=\"w\"> </span><span class=\"n\">this</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">metis</span><span class=\"w\"> </span><span class=\"n\">cBOX_def</span><span class=\"w\"> </span><span class=\"n\">prod.exhaust_sel</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">&gt;</span><span class=\"w\"> </span><span class=\"n\">1.0</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">timed</span><span class=\"w\"> </span><span class=\"n\">out</span><span class=\"o\">)</span>\n\n<span class=\"n\">Isar</span><span class=\"w\"> </span><span class=\"k\">proof</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">6.4</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"o\">):</span>\n<span class=\"k\">proof</span><span class=\"w\"> </span><span class=\"o\">-</span>\n<span class=\"w\">  </span><span class=\"k\">obtain</span><span class=\"w\"> </span><span class=\"n\">cc</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"('a ⇒ nat) ⇒ 'a set ⇒ 'b set ⇒ ('a, 'b) cform list ⇒ ('a, 'b) cform\"</span><span class=\"w\"> </span><span class=\"kp\">where</span>\n<span class=\"w\">    </span><span class=\"s\">\"∀X0 X2 X3 X4. (∃X5. X5 ∈ list.set X4 ∧ ¬ cwff ((X2, X0), X3) X5) ⟶ cc X0 X2 X3 X4 ∈ list.set X4 ∧ ¬ cwff ((X2, X0), X3) (cc X0 X2 X3 X4)\"</span>\n<span class=\"w\">    </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">moura</span>\n<span class=\"w\">  </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"k\">obtain</span><span class=\"w\"> </span><span class=\"n\">cca</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"('a ⇒ nat) ⇒ 'a set ⇒ 'b set ⇒ ('a, 'b) cform list ⇒ ('a, 'b) cform\"</span><span class=\"w\"> </span><span class=\"kp\">where</span>\n<span class=\"w\">    </span><span class=\"s\">\"∀f a A B cs. (cwff ((A, f), B) (cBOX a cs) ∨ a ∉ A ∨ length cs ≠ f a ∨ cca f A B cs ∈ list.set cs ∧ ¬ cwff ((A, f), B) (cca f A B cs)) ∧ (a ∈ A ∧ length cs = f a ∧ (∀c. c ∉ list.set cs ∨ cwff ((A, f), B) c) ∨ ¬ cwff ((A, f), B) (cBOX a cs))\"</span>\n<span class=\"w\">    </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">metis</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">full_types</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">cwff_cBOX0</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">thesis</span>\n<span class=\"w\">    </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">smt</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">z3</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">prod.exhaust_sel</span><span class=\"o\">)</span>\n<span class=\"k\">qed</span>\n<span class=\"n\">Done</span>\n</code></pre></div>",
        "id": 476490842,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1728706752
    },
    {
        "content": "<p>The above may suggests that it is not the correct way to do it. Why it is so hard for sledgehammer? How can I easily transfer from one version to another?</p>",
        "id": 476490902,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1728706814
    },
    {
        "content": "<p>Given that this just works, it is hard to say why verit fails</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span>\n<span class=\"w\">  </span><span class=\"kp\">assumes</span>\n<span class=\"w\">    </span><span class=\"s\">\"⋀Op ρ Φ m fl. cwff ((Op,ρ),Φ) (cBOX m fl) ⟷</span>\n<span class=\"s\">       (m ∈ Op ∧ ρ m = length fl ∧</span>\n<span class=\"s\">       (∀f. f ∈ list.set fl ⟶ cwff ((Op,ρ),Φ) f))\"</span>\n<span class=\"w\">  </span><span class=\"kp\">shows</span>\n<span class=\"w\">    </span><span class=\"s\">\"cwff (τ,Φ) (cBOX m fl) ⟷</span>\n<span class=\"s\">    (m ∈ (fst τ) ∧ (snd τ) m = length fl ∧</span>\n<span class=\"s\">     (∀f. f ∈ list.set fl ⟶ cwff (τ,Φ) f))\"</span>\n<span class=\"w\">  </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">assms</span>\n<span class=\"w\">  </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">metis</span><span class=\"w\"> </span><span class=\"n\">prod.collapse</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>But proving one from the other by instantiating the variable + auto should be sufficient.</p>",
        "id": 476496873,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1728712742
    },
    {
        "content": "<p>Thanks! Just for convenience during the interactive proof, if I write:</p>\n<p>lemma cwff_cBOX : <br>\n  \"cwff (τ,Φ) (cBOX m fl) ⟷ <br>\n  (m ∈ (fst τ) ∧ (snd τ) m = length fl ∧ <br>\n   (∀f. f ∈ list.set fl ⟶ cwff (τ,Φ) f))\"<br>\n  using cwff_cBOX0 <br>\nproof (cases τ)<br>\n  case (Pair a b)<br>\n  then show ?thesis sorry<br>\nqed</p>\n<p>Then the output panel displays: </p>\n<p><a href=\"/user_uploads/14278/KMsEFpkdC9rfsHET5aZsTi16/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/14278/KMsEFpkdC9rfsHET5aZsTi16/image.png\" title=\"image.png\"><img data-original-dimensions=\"2624x1476\" src=\"/user_uploads/thumbnail/14278/KMsEFpkdC9rfsHET5aZsTi16/image.png/840x560.webp\"></a></div>",
        "id": 476497508,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1728713227
    },
    {
        "content": "<p>I would be more comfortable if it directly replace all the occurrences of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>τ</mi></mrow><annotation encoding=\"application/x-tex\">\\tau</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.1132em;\">τ</span></span></span></span> by <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>a</mi><mo separator=\"true\">,</mo><mi>b</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(a,b)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">a</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mclose\">)</span></span></span></span>, is there any method that gives that?</p>",
        "id": 476497534,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1728713268
    },
    {
        "content": "<p><code>unfolding Pair(2)</code> or <code>apply (unfold Pair(2))</code></p>",
        "id": 476497606,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1728713333
    },
    {
        "content": "<p>The lowlevel variant being <code>hypsubst</code></p>",
        "id": 476497642,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1728713384
    },
    {
        "content": "<p>Where is Pair(2)?<br>\nI tried</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kt\">find_theorems</span><span class=\"w\"> </span><span class=\"n\">name</span><span class=\"o\">:</span><span class=\"n\">Pair</span>\n<span class=\"kt\">thm</span><span class=\"w\"> </span><span class=\"n\">Pair</span><span class=\"o\">(</span><span class=\"n\">2</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>find theorems gives:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"n\">found</span><span class=\"w\"> </span><span class=\"n\">14</span><span class=\"w\"> </span><span class=\"kn\">theorem</span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">):</span>\n<span class=\"w\">  </span><span class=\"n\">Product_Type.case_prod_Pair</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">λ</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"o\">)</span><span class=\"ow\">.</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"o\">))</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">id</span>\n<span class=\"w\">  </span><span class=\"n\">Product_Type.scomp_Pair</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">scomp</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">Pair</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">x</span>\n<span class=\"w\">  </span><span class=\"n\">Product_Type.Pair_scomp</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">scomp</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Pair</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">x</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">x</span>\n<span class=\"w\">  </span><span class=\"n\">Product_Type.Pair_def</span><span class=\"o\">:</span>\n<span class=\"w\">    </span><span class=\"o\">(?</span><span class=\"n\">a</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">b</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Abs_prod</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Pair_Rep</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">b</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"n\">Basic_BNF_LFPs.Pair_def_alt</span><span class=\"o\">:</span>\n<span class=\"w\">    </span><span class=\"n\">Pair</span><span class=\"w\"> </span><span class=\"n\">≡</span>\n<span class=\"w\">    </span><span class=\"n\">λa</span><span class=\"w\"> </span><span class=\"n\">b.</span><span class=\"w\"> </span><span class=\"n\">Basic_BNF_LFPs.xtor</span>\n<span class=\"w\">           </span><span class=\"o\">(</span><span class=\"n\">BNF_Composition.id_bnf</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"o\">))</span>\n<span class=\"w\">  </span><span class=\"n\">BNF_Fixpoint_Base.Pair_transfer</span><span class=\"o\">:</span>\n<span class=\"w\">    </span><span class=\"n\">rel_fun</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">rel_fun</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">B</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">rel_prod</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">B</span><span class=\"o\">))</span><span class=\"w\"> </span><span class=\"n\">Pair</span><span class=\"w\"> </span><span class=\"n\">Pair</span>\n<span class=\"w\">  </span><span class=\"n\">BNF_Fixpoint_Base.case_prod_Pair_iden</span><span class=\"o\">:</span>\n<span class=\"w\">    </span><span class=\"o\">(</span><span class=\"k\">case</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">⇒</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"o\">))</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">p</span>\n<span class=\"w\">  </span><span class=\"n\">Product_Type.Pair_Rep_def</span><span class=\"o\">:</span>\n<span class=\"w\">    </span><span class=\"n\">Pair_Rep</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">λx</span><span class=\"w\"> </span><span class=\"n\">y.</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">∧</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">b</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"n\">Product_Type.Pair_vimage_Sigma</span><span class=\"o\">:</span>\n<span class=\"w\">    </span><span class=\"n\">Pair</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"sx\">` Sigma ?A ?f =</span>\n<span class=\"sx\">    (if ?x ∈ ?A then ?f ?x else {})</span>\n<span class=\"sx\">  Filter.filtermap_Pair:</span>\n<span class=\"sx\">    filtermap (λx. (?f x, ?g x)) ?F</span>\n<span class=\"sx\">    ≤ filtermap ?f ?F ×⇩F filtermap ?g ?F</span>\n<span class=\"sx\">  BNF_Greatest_Fixpoint.subst_Pair:</span>\n<span class=\"sx\">    ?P ?x ?y ⟹ ?a = (?x, ?y) ⟹ ?P (fst ?a) (snd ?a)</span>\n<span class=\"sx\">  BNF_Least_Fixpoint.ssubst_Pair_rhs:</span>\n<span class=\"sx\">    (?r, ?s) ∈ ?R ⟹ ?s' = ?s ⟹ (?r, ?s') ∈ ?R</span>\n<span class=\"sx\">  Product_Type.Pair_inject:</span>\n<span class=\"sx\">    (?a, ?b) = (?a', ?b') ⟹</span>\n<span class=\"sx\">    (?a = ?a' ⟹ ?b = ?b' ⟹ ?R) ⟹ ?R</span>\n<span class=\"sx\">  Filter.filterlim_Pair:</span>\n<span class=\"sx\">    filterlim ?f ?G ?F ⟹</span>\n<span class=\"sx\">    filterlim ?g ?H ?F ⟹</span>\n<span class=\"sx\">    LIM x ?F. (?f x, ?g x) :&gt; ?G ×⇩F ?H</span>\n</code></pre></div>",
        "id": 476497807,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1728713562
    },
    {
        "content": "<p>try after the case</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">case</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Pair</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 476497832,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1728713614
    },
    {
        "content": "<p><a href=\"/user_uploads/14278/pLQZmxhUrDUWQ0UtdQZ7dLoF/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/14278/pLQZmxhUrDUWQ0UtdQZ7dLoF/image.png\" title=\"image.png\"><img data-original-dimensions=\"2624x1476\" src=\"/user_uploads/thumbnail/14278/pLQZmxhUrDUWQ0UtdQZ7dLoF/image.png/840x560.webp\"></a></div>",
        "id": 476497896,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1728713689
    },
    {
        "content": "<p>Both of them gives the same error message: Bad fact selection \"Pair(2)\" (length 1)⌂ .</p>",
        "id": 476497926,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1728713730
    },
    {
        "content": "<p>Ahh you do not have <code>cwff_BOX0</code> in the context (what was the point of the <code>using assms</code> then?)</p>",
        "id": 476498001,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1728713815
    },
    {
        "content": "<p>then it is <code>Pair(1)</code> (or <code>Pair</code>)</p>",
        "id": 476498010,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1728713828
    },
    {
        "content": "<p>Yes, Pair(1) or Pair works, gives what I want.</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"n\">1.</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">⟹</span>\n<span class=\"w\">    </span><span class=\"n\">cwff</span><span class=\"w\"> </span><span class=\"o\">((</span><span class=\"n\">a</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"o\">),</span><span class=\"w\"> </span><span class=\"n\">Φ</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">cBOX</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"w\"> </span><span class=\"n\">fl</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">    </span><span class=\"o\">(</span><span class=\"n\">m</span><span class=\"w\"> </span><span class=\"n\">∈</span><span class=\"w\"> </span><span class=\"n\">fst</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">∧</span>\n<span class=\"w\">     </span><span class=\"n\">snd</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">length</span><span class=\"w\"> </span><span class=\"n\">fl</span><span class=\"w\"> </span><span class=\"n\">∧</span>\n<span class=\"w\">     </span><span class=\"o\">(</span><span class=\"n\">∀f.</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"n\">∈</span><span class=\"w\"> </span><span class=\"n\">list.set</span><span class=\"w\"> </span><span class=\"n\">fl</span><span class=\"w\"> </span><span class=\"n\">⟶</span><span class=\"w\"> </span><span class=\"n\">cwff</span><span class=\"w\"> </span><span class=\"o\">((</span><span class=\"n\">a</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"o\">),</span><span class=\"w\"> </span><span class=\"n\">Φ</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>But sorry, I do not understand why it is relevant to \"using cwff_BOX0\"? It is just the theorem with two components unfolded, and I would like to see it in the interactive window.</p>",
        "id": 476498201,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1728714051
    },
    {
        "content": "<p>It looks like:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"w\">  </span><span class=\"n\">cwff</span><span class=\"w\"> </span><span class=\"o\">((?</span><span class=\"n\">Op</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">ρ</span><span class=\"o\">),</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">Φ</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">cBOX</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">m</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">fl</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">    </span><span class=\"o\">(?</span><span class=\"n\">m</span><span class=\"w\"> </span><span class=\"n\">∈</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">Op</span><span class=\"w\"> </span><span class=\"n\">∧</span>\n<span class=\"w\">     </span><span class=\"o\">?</span><span class=\"n\">ρ</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">m</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">length</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">fl</span><span class=\"w\"> </span><span class=\"n\">∧</span>\n<span class=\"w\">     </span><span class=\"o\">(</span><span class=\"n\">∀f.</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"n\">∈</span><span class=\"w\"> </span><span class=\"n\">list.set</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">fl</span><span class=\"w\"> </span><span class=\"n\">⟶</span><span class=\"w\"> </span><span class=\"n\">cwff</span><span class=\"w\"> </span><span class=\"o\">((?</span><span class=\"n\">Op</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">ρ</span><span class=\"o\">),</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">Φ</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 476498235,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1728714093
    },
    {
        "content": "<p>If I do</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">thesis</span><span class=\"w\"> </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">cwff_cBOX0</span><span class=\"w\"> </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">unfold</span><span class=\"w\"> </span><span class=\"n\">Pair</span><span class=\"o\">(</span><span class=\"n\">2</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>It will still complain \"Bad fact selection \"Pair(2)\" (length 1)⌂\".</p>",
        "id": 476498292,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1728714131
    },
    {
        "content": "<p>Okay, Isabelle is pushing you to do the right thing here: the <code> using cwff_cBOX0</code> has no effect at all. So you should remove it.</p>",
        "id": 476498489,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1728714365
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"754515\">Yiming Xu</span> <a href=\"#narrow/stream/238552-Beginner-Questions/topic/Convertion.20about.20pairs.20.28components.20specified.2Funspecified.29/near/476498292\">said</a>:</p>\n<blockquote>\n<p>If I do</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">thesis</span><span class=\"w\"> </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">cwff_cBOX0</span><span class=\"w\"> </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">unfold</span><span class=\"w\"> </span><span class=\"n\">Pair</span><span class=\"o\">(</span><span class=\"n\">2</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>It will still complain \"Bad fact selection \"Pair(2)\" (length 1)⌂\".</p>\n</blockquote>\n<p>The error message is saying that you should use <code>Pair(1)</code>...</p>",
        "id": 476498516,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1728714415
    },
    {
        "content": "<p>You can also use <code>induction</code> instead of <code>cases</code> to split</p>",
        "id": 476498550,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1728714478
    },
    {
        "content": "<p>I have just found that Pair(1) is not a theorem but local, I see. It is just \\tau = (a,b).</p>",
        "id": 476498618,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1728714552
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"233198\">Mathias Fleury</span> <a href=\"#narrow/stream/238552-Beginner-Questions/topic/Convertion.20about.20pairs.20.28components.20specified.2Funspecified.29/near/476498550\">said</a>:</p>\n<blockquote>\n<p>You can also use <code>induction</code> instead of <code>cases</code> to split</p>\n</blockquote>\n<p>Thanks and that does work, I see.</p>\n<p>proof (induction τ)<br>\n  case (Pair a b)<br>\n  then show ?case sorry<br>\nqed</p>",
        "id": 476498645,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1728714601
    }
]