[
    {
        "content": "<p>Hi everyone, <br>\nI'm trying to formalize the greedy algorithm of greedoids and have a couple of quick questions regarding the same.</p>\n<ol>\n<li></li>\n</ol>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">locale</span><span class=\"w\"> </span><span class=\"n\">greedoid</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">  </span><span class=\"kp\">fixes</span><span class=\"w\"> </span><span class=\"n\">E</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"'a set\"</span>\n<span class=\"w\">  </span><span class=\"kp\">fixes</span><span class=\"w\"> </span><span class=\"n\">F</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"'a set\"</span>\n<span class=\"w\">  </span><span class=\"kp\">assumes</span><span class=\"w\"> </span><span class=\"n\">contains_empty_set</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"{} ∈ F\"</span>\n<span class=\"w\">  </span><span class=\"kp\">assumes</span><span class=\"w\"> </span><span class=\"n\">third_condition</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"(X Y ∈ F) ∧ (card X &gt; card Y) ⟹ ∃x ∈ X - Y.  Y ∪ {x} ∈ F\"</span>\n</code></pre></div>\n<p>Here is the error message I get for the same:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"n\">Type</span><span class=\"w\"> </span><span class=\"n\">unification</span><span class=\"w\"> </span><span class=\"n\">failed</span>\n\n<span class=\"n\">Type</span><span class=\"w\"> </span><span class=\"n\">error</span><span class=\"w\"> </span><span class=\"kp\">in</span><span class=\"w\"> </span><span class=\"n\">application</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">incompatible</span><span class=\"w\"> </span><span class=\"n\">operand</span><span class=\"w\"> </span><span class=\"n\">type</span>\n\n<span class=\"n\">Operator</span><span class=\"o\">:</span><span class=\"w\">  </span><span class=\"o\">(</span><span class=\"n\">∈</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"ow\">{}</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"o\">??</span><span class=\"n n-Type\">'a</span><span class=\"w\"> </span><span class=\"n\">set</span><span class=\"w\"> </span><span class=\"n\">set</span><span class=\"w\"> </span><span class=\"n\">⇒</span><span class=\"w\"> </span><span class=\"n\">bool</span>\n<span class=\"n\">Operand</span><span class=\"o\">:</span><span class=\"w\">   </span><span class=\"n\">F</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"n n-Type\">'a</span><span class=\"w\"> </span><span class=\"n\">set</span>\n</code></pre></div>\n<p>In this case, E,F is a set system (E is any aribitrary set, and F is any set of subsets of E). I understand that I have to define the type of F differently (maybe sets of sets), but how do I do that?</p>\n<ol start=\"2\">\n<li>Here's the definition of what it means for a set of subsets to be closed under union:</li>\n</ol>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">definition</span><span class=\"w\"> </span><span class=\"n\">closed_under_union</span><span class=\"w\"> </span><span class=\"kp\">where</span><span class=\"w\"> </span><span class=\"s\">\"closed_under_union F ⟷ X Y ∈ F ⟹ X ∪ Y ∈ F\"</span>\n</code></pre></div>\n<p>The error message is:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"n\">Type</span><span class=\"w\"> </span><span class=\"n\">unification</span><span class=\"w\"> </span><span class=\"n\">failed</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Clash</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">types</span><span class=\"w\"> </span><span class=\"s\">\"_ ⇒ _\"</span><span class=\"w\"> </span><span class=\"kp\">and</span><span class=\"w\"> </span><span class=\"s\">\"_ set\"</span>\n\n<span class=\"n\">Type</span><span class=\"w\"> </span><span class=\"n\">error</span><span class=\"w\"> </span><span class=\"kp\">in</span><span class=\"w\"> </span><span class=\"n\">application</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">incompatible</span><span class=\"w\"> </span><span class=\"n\">operand</span><span class=\"w\"> </span><span class=\"n\">type</span>\n\n<span class=\"n\">Operator</span><span class=\"o\">:</span><span class=\"w\">  </span><span class=\"o\">(</span><span class=\"n\">∪</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"o\">??</span><span class=\"n n-Type\">'a</span><span class=\"w\"> </span><span class=\"n\">set</span><span class=\"w\"> </span><span class=\"n\">⇒</span><span class=\"w\"> </span><span class=\"o\">??</span><span class=\"n n-Type\">'a</span><span class=\"w\"> </span><span class=\"n\">set</span><span class=\"w\"> </span><span class=\"n\">⇒</span><span class=\"w\"> </span><span class=\"o\">??</span><span class=\"n n-Type\">'a</span><span class=\"w\"> </span><span class=\"n\">set</span>\n<span class=\"n\">Operand</span><span class=\"o\">:</span><span class=\"w\">   </span><span class=\"n\">X</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"o\">??</span><span class=\"n n-Type\">'b</span><span class=\"w\"> </span><span class=\"n\">⇒</span><span class=\"w\"> </span><span class=\"o\">??</span><span class=\"n n-Type\">'c</span>\n</code></pre></div>\n<p>How do I fix the type of X?</p>\n<p>Thank you!</p>",
        "id": 446267051,
        "sender_full_name": "Shriya M",
        "timestamp": 1719058281
    },
    {
        "content": "<ol>\n<li><code>fixes F :: \"'a set\"</code> is defining the type. Change that line…</li>\n</ol>",
        "id": 446269705,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1719060658
    },
    {
        "content": "<p>assuming that each element of F is a subset of E is obvious</p>",
        "id": 446269763,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1719060718
    },
    {
        "content": "<ol start=\"2\">\n<li>I assume that you want `X∈ F ⟹Y ∈ F⟹...</li>\n</ol>",
        "id": 446269933,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1719060804
    },
    {
        "content": "<p>The question has no relation to datatypes unlike the title (there is not even a datatype !)</p>",
        "id": 446269960,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1719060833
    },
    {
        "content": "<p>And I recommend starting with an Isabelle tutorial like the prog prove</p>",
        "id": 446270010,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1719060856
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 446271118,
        "sender_full_name": "Shriya M",
        "timestamp": 1719061722
    }
]