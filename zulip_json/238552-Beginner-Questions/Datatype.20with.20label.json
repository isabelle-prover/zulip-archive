[
    {
        "content": "<p><a href=\"https://isabelle.in.tum.de/dist/doc/datatypes.pdf#page=3\">Page 3 of the Datatype Tutorial</a> shows the following example:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">datatype</span><span class=\"w\"> </span><span class=\"n n-Type\">'a</span><span class=\"w\"> </span><span class=\"n\">treefs</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Node</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">lbl</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n n-Type\">'a</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">sub</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\" 'a treefs fset \"</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>where I omitted to subscripts. Someone told me that <code>lbl</code> and <code>sub</code> are ways out of this datatype: they are meant for getting the contents of a Node ... element. So I dared to write</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">datatype</span><span class=\"w\"> </span><span class=\"n n-Type\">'a</span><span class=\"w\"> </span><span class=\"n\">dummy2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"DummyConstructor (DummyOut:'a)\"</span>\n</code></pre></div>\n<p>but I got the error message</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"n\">Legacy</span><span class=\"w\"> </span><span class=\"n\">feature</span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"n\">Bad</span><span class=\"w\"> </span><span class=\"n\">name</span><span class=\"w\"> </span><span class=\"n\">binding</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"dummy2.DummyConstructor (DummyOut:'a)\"</span><span class=\"n\">⌂</span>\n<span class=\"n\">Bad</span><span class=\"w\"> </span><span class=\"n\">name</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"dummy2.DummyConstructor (DummyOut:'a)\"</span>\n</code></pre></div>\n<p>Is this really not possible anymore? Is there another way to get a constituent of a datatype without writing a function for it?</p>",
        "id": 382960392,
        "sender_full_name": "Gergely Buday",
        "timestamp": 1691501911
    },
    {
        "content": "<p>The problem is that you put the quotation marks around the whole datatype alternative specification. Quotation marks should only be put around types and terms. In your case, this would be just the type variable <code>'a</code>, but for single names you don’t even need quotation marks.</p>",
        "id": 382965152,
        "sender_full_name": "Wolfgang Jeltsch",
        "timestamp": 1691502738
    },
    {
        "content": "<p>By the way, the error message you quoted indicates that the error is not about defining selectors: it says that the whole block <code>\"dummy2.DummyConstructor (DummyOut:'a)\"</code> is a bad name, which makes it sort of clear that your code says that this block should be considered a single name.</p>",
        "id": 382968010,
        "sender_full_name": "Wolfgang Jeltsch",
        "timestamp": 1691503215
    },
    {
        "content": "<p>I just remembered that there is another situation in which you have to use quotation marks: when writing theory names that contain characters usually not allowed in names, like <code>HOL-Eisbach.Eisbach</code> (the hyphen is the offender here and you surround the whole qualified name with quotation marks). Maybe Isabelle’s interpretation of your code above has to do with this use, as Isabelle considered the whole block delimited by quotation marks to be a single name.</p>",
        "id": 382968916,
        "sender_full_name": "Wolfgang Jeltsch",
        "timestamp": 1691503354
    },
    {
        "content": "<p>(this behavior is consistent with <code>shows False</code>vs <code>shows \"P x\"</code>,  but you need to know what the parser is expecting, so it is consistent but not really intuitive)</p>",
        "id": 383674793,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1691682215
    }
]