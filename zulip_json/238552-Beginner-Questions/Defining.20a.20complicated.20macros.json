[
    {
        "content": "<p>Hi! new Isabelle/HOL user here. I am mainly using the Bit operations library. I have defined a bit-vector concatenate (<code>concat2</code>) operation as follows, but I would like to develop a convenient macro for concatenating arbitrary number of bit-vectors, while hopefully using an input syntax that is as close to Verilog concatenation operator as possible (E.g <code>{2'd3, 2'd3, 2'd3} := (3 &lt;&lt; 4) + (3 &lt;&lt; 2) + 3</code>). Can this be done using <code>syntax</code> and <code>translations</code> commands? I have made the following attempt -- how can I fix this example, or do something better?</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">theory</span><span class=\"w\">  </span><span class=\"n\">Concat</span>\n<span class=\"w\">  </span><span class=\"kp\">imports</span><span class=\"w\"> </span><span class=\"n\">Complex_Main</span>\n<span class=\"k\">begin</span>\n\n<span class=\"k\">context</span><span class=\"w\"> </span><span class=\"n\">semiring_bit_operations</span>\n<span class=\"k\">begin</span>\n\n<span class=\"k\">definition</span><span class=\"w\"> </span><span class=\"n\">concat2</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"'a ⇒ nat ⇒ 'a ⇒ nat ⇒ 'a\"</span><span class=\"w\"> </span><span class=\"kp\">where</span>\n<span class=\"w\">  </span><span class=\"s\">\"concat2 x m y n ≡ (push_bit n (take_bit m x)) + take_bit n y\"</span>\n\n<span class=\"k\">end</span>\n\n<span class=\"k\">nonterminal</span><span class=\"w\"> </span><span class=\"s\">\"bvs\"</span><span class=\"w\"> </span><span class=\"kp\">and</span><span class=\"w\"> </span><span class=\"s\">\"bv\"</span>\n\n<span class=\"k\">syntax</span><span class=\"w\"> </span><span class=\"s\">\"_bv\"</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"logic ⇒ logic ⇒ bv\"</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"s\">\"(_)$d(_)\"</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">101</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">100</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"n\">99</span><span class=\"o\">)</span>\n\n<span class=\"k\">syntax</span><span class=\"w\"> </span><span class=\"s\">\"_bvs\"</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"bv ⇒ bvs ⇒ bvs\"</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"s\">\"(_) , (_)\"</span><span class=\"o\">)</span>\n<span class=\"k\">syntax</span><span class=\"w\"> </span><span class=\"s\">\"_bvs\"</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"bv ⇒ bv ⇒ bvs\"</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"s\">\"(_) , (_)\"</span><span class=\"o\">)</span>\n<span class=\"k\">syntax</span><span class=\"w\"> </span><span class=\"s\">\"_cat\"</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"bvs ⇒ logic\"</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"s\">\"{{(_)}}\"</span><span class=\"o\">)</span>\n\n<span class=\"kt\">find_consts</span><span class=\"w\"> </span><span class=\"n\">name</span><span class=\"o\">:</span><span class=\"s\">\"concat2\"</span>\n\n<span class=\"k\">translations</span>\n<span class=\"w\">  </span><span class=\"s\">\"_cat (_bv n x) rst\"</span><span class=\"w\"> </span><span class=\"n\">⇀</span><span class=\"w\">  </span><span class=\"s\">\"CONST Concat.semiring_bit_operations_class.concat2 x n rst\"</span><span class=\"w\"> </span><span class=\"c\">(* need to compute length of rst here *)</span>\n<span class=\"w\">  </span><span class=\"s\">\"_cat (_bvs (_bv m x) (_bv n y))\"</span><span class=\"w\"> </span><span class=\"n\">⇀</span><span class=\"w\"> </span><span class=\"s\">\"CONST Concat.semiring_bit_operations_class.concat2 x m y n\"</span>\n\n<span class=\"c\">(* {2'd3, 2'd3} = 4'd15 *)</span>\n<span class=\"kt\">value</span><span class=\"w\"> </span><span class=\"s\">\"concat2 3 2 3 2 :: int\"</span><span class=\"w\"> </span><span class=\"c\">(* \"15\" :: \"int\" *)</span>\n<span class=\"kt\">value</span><span class=\"w\"> </span><span class=\"s\">\"{{2$d3, 2$d3}} :: int\"</span><span class=\"w\">  </span><span class=\"c\">(* \"15\" :: \"int\" *)</span>\n\n<span class=\"c\">(* {2'd3, 2'd3, 2'd3} = 6'd63 *)</span>\n<span class=\"kt\">value</span><span class=\"w\"> </span><span class=\"s\">\"concat2 3 2 (concat2 3 2 3 2) 4 :: int\"</span><span class=\"w\">  </span><span class=\"c\">(* \"63\" :: \"int\" *)</span>\n<span class=\"kt\">value</span><span class=\"w\"> </span><span class=\"s\">\"{{2$d3, 2$d3, 2$d3}} :: int\"</span><span class=\"w\">  </span><span class=\"c\">(* Undefined constant: \"_cat\" *)</span>\n\n<span class=\"k\">end</span>\n</code></pre></div>",
        "id": 447342556,
        "sender_full_name": "Mayank Manjrekar",
        "timestamp": 1719438536
    },
    {
        "content": "<p>This works for me:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">theory</span><span class=\"w\">  </span><span class=\"n\">Concat</span>\n<span class=\"w\">  </span><span class=\"kp\">imports</span><span class=\"w\"> </span><span class=\"n\">Complex_Main</span>\n<span class=\"k\">begin</span>\n\n<span class=\"k\">context</span><span class=\"w\"> </span><span class=\"n\">semiring_bit_operations</span>\n<span class=\"k\">begin</span>\n\n<span class=\"k\">definition</span><span class=\"w\"> </span><span class=\"n\">concat2</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"'a ⇒ nat ⇒ 'a ⇒ nat ⇒ 'a\"</span><span class=\"w\"> </span><span class=\"kp\">where</span>\n<span class=\"w\">  </span><span class=\"s\">\"concat2 x m y n ≡ (push_bit n (take_bit m x)) + take_bit n y\"</span>\n\n<span class=\"k\">primrec</span><span class=\"w\"> </span><span class=\"n\">concat_size</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"('a × nat) list ⇒ nat\"</span><span class=\"w\"> </span><span class=\"kp\">where</span>\n<span class=\"w\">  </span><span class=\"s\">\"concat_size [] = 0\"</span><span class=\"w\"> </span><span class=\"o\">|</span>\n<span class=\"w\">  </span><span class=\"s\">\"concat_size (x # y) = (snd x) + (concat_size y)\"</span>\n\n<span class=\"k\">primrec</span><span class=\"w\"> </span><span class=\"n\">concat</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"('a × nat) list ⇒ 'a\"</span><span class=\"w\"> </span><span class=\"kp\">where</span>\n<span class=\"w\">  </span><span class=\"s\">\"concat [] = 0\"</span><span class=\"w\"> </span><span class=\"o\">|</span>\n<span class=\"w\">  </span><span class=\"s\">\"concat (x # y) = (concat2 (fst x) (snd x) (concat y) (concat_size y))\"</span>\n<span class=\"k\">end</span>\n\n<span class=\"k\">nonterminal</span><span class=\"w\"> </span><span class=\"s\">\"bvs\"</span><span class=\"w\"> </span><span class=\"kp\">and</span><span class=\"w\"> </span><span class=\"s\">\"bv\"</span>\n\n<span class=\"k\">syntax</span><span class=\"w\"> </span><span class=\"s\">\"_bv\"</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"logic ⇒ logic ⇒ bv\"</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"s\">\"(_)$d(_)\"</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">101</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">100</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"n\">99</span><span class=\"o\">)</span>\n\n<span class=\"k\">syntax</span><span class=\"w\"> </span><span class=\"s\">\"_bvs\"</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"bv ⇒ bvs ⇒ bvs\"</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"s\">\"(_) , (_)\"</span><span class=\"o\">)</span>\n<span class=\"k\">syntax</span><span class=\"w\"> </span><span class=\"s\">\"_bvs\"</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"bv ⇒ bvs\"</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"s\">\"(_)}}\"</span><span class=\"o\">)</span>\n<span class=\"k\">syntax</span><span class=\"w\"> </span><span class=\"s\">\"_cat\"</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"bvs ⇒ logic\"</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"s\">\"{{(_)\"</span><span class=\"o\">)</span>\n\n<span class=\"k\">translations</span>\n<span class=\"w\">  </span><span class=\"s\">\"_cat x\"</span><span class=\"w\"> </span><span class=\"n\">⇀</span><span class=\"w\"> </span><span class=\"s\">\"CONST Concat.semiring_bit_operations_class.concat x\"</span>\n<span class=\"w\">  </span><span class=\"s\">\"_bvs (_bv n x) y\"</span><span class=\"w\"> </span><span class=\"n\">⇀</span><span class=\"w\"> </span><span class=\"s\">\"(x,n) # y\"</span>\n<span class=\"w\">  </span><span class=\"s\">\"_bvs (_bv n x)\"</span><span class=\"w\"> </span><span class=\"n\">⇀</span><span class=\"w\"> </span><span class=\"s\">\"(x,n) # []\"</span>\n\n<span class=\"kt\">value</span><span class=\"w\"> </span><span class=\"s\">\"concat [(3, 2), (3, 2)] :: int\"</span><span class=\"w\"> </span><span class=\"c\">(* \"15\" :: \"int\" *)</span>\n<span class=\"kt\">value</span><span class=\"w\"> </span><span class=\"s\">\"{{2$d3, 2$d3}} :: int\"</span><span class=\"w\"> </span><span class=\"c\">(* \"15\" :: \"int\" *)</span>\n\n<span class=\"kt\">value</span><span class=\"w\"> </span><span class=\"s\">\"{{2$d3, 2$d3, 2$d3}} :: int\"</span><span class=\"w\">  </span><span class=\"c\">(* \"63\" :: \"int\" *)</span>\n\n<span class=\"k\">end</span>\n</code></pre></div>",
        "id": 447387042,
        "sender_full_name": "Mayank Manjrekar",
        "timestamp": 1719464074
    }
]