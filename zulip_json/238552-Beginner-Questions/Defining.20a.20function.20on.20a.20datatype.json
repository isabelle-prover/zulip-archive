[
    {
        "content": "<p>I've got a bunch of datatypes:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">datatype</span><span class=\"w\"> </span><span class=\"n\">a2pt</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">A2Point</span><span class=\"w\"> </span><span class=\"s\">\"real\"</span><span class=\"w\"> </span><span class=\"s\">\"real\"</span>\n<span class=\"k\">datatype</span><span class=\"w\"> </span><span class=\"n\">a2ln</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">A2Ordinary</span><span class=\"w\"> </span><span class=\"s\">\"real\"</span><span class=\"w\"> </span><span class=\"s\">\"real\"</span><span class=\"w\">   </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">A2Vertical</span><span class=\"w\"> </span><span class=\"s\">\"real\"</span>\n\n<span class=\"k\">definition</span><span class=\"w\"> </span><span class=\"n\">A2Points</span><span class=\"o\">::</span><span class=\"s\">\"a2pt set\"</span>\n<span class=\"w\">  </span><span class=\"kp\">where</span><span class=\"w\"> </span><span class=\"s\">\"A2Points ≡ (UNIV::a2pt set)\"</span>\n\n<span class=\"k\">definition</span><span class=\"w\"> </span><span class=\"n\">A2Lines</span><span class=\"o\">::</span><span class=\"s\">\"a2ln set\"</span>\n<span class=\"w\">  </span><span class=\"kp\">where</span><span class=\"w\"> </span><span class=\"s\">\"A2Lines ≡ (UNIV::a2ln set)\"</span>\n\n<span class=\"k\">datatype</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n n-Type\">'point</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n n-Type\">'line</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">projPoint</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">OrdinaryP</span><span class=\"w\"> </span><span class=\"n n-Type\">'point</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Ideal</span><span class=\"w\"> </span><span class=\"s\">\"'line set\"</span>\n<span class=\"k\">datatype</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n n-Type\">'point</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n n-Type\">'line</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">projLine</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">OrdinaryL</span><span class=\"w\"> </span><span class=\"n n-Type\">'line</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Infty</span>\n\n<span class=\"k\">definition</span><span class=\"w\"> </span><span class=\"n\">pPoints</span><span class=\"w\"> </span><span class=\"kp\">where</span>\n<span class=\"s\">\"pPoints ≡ {OrdinaryP P | P . (P ∈ A2Points)} ∪ {Ideal t | k t .</span>\n<span class=\"s\">                  ((k ∈ A2Lines) ∧ (t = affine_plane_data.line_pencil A2Points A2Lines (a2incid) k) )}\"</span>\n<span class=\"k\">definition</span><span class=\"w\"> </span><span class=\"n\">pLines</span><span class=\"w\"> </span><span class=\"kp\">where</span>\n<span class=\"s\">\"pLines ≡  {OrdinaryL n | n . (n ∈ A2Lines)} ∪ {Infty}\"</span>\n</code></pre></div>\n<p>So there's really nothing subtle here -- just a bunch of nested constructors all boiling down to a pair of reals (or maybe something a little more complex in a couple of cases). </p>\n<p>I'd really like to define a function from <code>pPoints</code> to a triple of reals. I tried writing this:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">definition</span><span class=\"w\"> </span><span class=\"n\">rp2iso</span><span class=\"w\"> </span><span class=\"kp\">where</span>\n<span class=\"w\">   </span><span class=\"s\">\"rp2iso (Ordinary (A2Point x y)) =  (x, y, 1)\"</span>\n</code></pre></div>\n<p>and got a <code>Bad arguments on lhs</code> error, which didn't really surprise me. </p>\n<p>But if I write</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">definition</span><span class=\"w\"> </span><span class=\"n\">rp2iso</span><span class=\"w\"> </span><span class=\"kp\">where</span>\n<span class=\"w\">   </span><span class=\"s\">\"rp2iso (Ordinary P) = ... (x, y, 1)\"</span>\n</code></pre></div>\n<p>how do I fill in the \"...\" to extract the constructor arguments for the only possible constructor (<code>A2Point</code>) for <code>P</code> so that I can use them to write down the \"result\" that I want for the function? </p>\n<p>BTW, I realize I also need to define the function on <code>Ideal</code> points, but I suspect that this won't be so hard after I get the right syntax for <code>Ordinary</code> points.</p>",
        "id": 528569640,
        "sender_full_name": "John  Hughes",
        "timestamp": 1752454586
    },
    {
        "content": "<p>Definition does not allow pattern matching, you have to use <code>fun</code> (and <code>[simp del]:</code> to remove the simp rule)</p>",
        "id": 528585853,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1752470079
    },
    {
        "content": "<p>You can also match on the right-hand side using <code>case</code> or with a lambda (which gets translated to a case).</p>",
        "id": 528612465,
        "sender_full_name": "Lukas Stevens",
        "timestamp": 1752482716
    },
    {
        "content": "<p>Thank you both, but I'm afraid that you both have overestimated my understanding of everything. In my example, I've got \"...\" in the midst of something that I think is \"inner syntax\", but each of you is proposing using various tokens that I think are \"outer syntax\" (e.g. <code>case</code> and <code>[simp del]:</code>). Is there a chance that one or both of you could actually type the line I need to replace </p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">definition</span><span class=\"w\"> </span><span class=\"n\">rp2iso</span><span class=\"w\"> </span><span class=\"kp\">where</span>\n<span class=\"w\">   </span><span class=\"s\">\"rp2iso (Ordinary P) = ... (x, y, 1)\"</span>\n</code></pre></div>\n<p>to make things work?  </p>\n<p>Also Mathias, should your <code>[simp del]:</code> actually be <code>[simp del: ...]</code>, where the <code>...</code> indicates some simp rule? If so, what simp-rule are you talking about? I've modifed the definition of <code>pPoints</code> to make this code workable without reference to <code>affine_plane_data</code>, and used <code>find_theorems</code> to see if anything I've defined has generated any <code>simp</code> rules, and I don't see any.  </p>\n<p>Here's the revised code for further discussion:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">theory</span><span class=\"w\"> </span><span class=\"n\">Construct</span>\n<span class=\"w\">  </span><span class=\"kp\">imports</span><span class=\"w\"> </span><span class=\"n\">Complex_Main</span>\n<span class=\"k\">begin</span>\n<span class=\"k\">datatype</span><span class=\"w\"> </span><span class=\"n\">a2pt</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">A2Point</span><span class=\"w\"> </span><span class=\"s\">\"real\"</span><span class=\"w\"> </span><span class=\"s\">\"real\"</span>\n<span class=\"k\">datatype</span><span class=\"w\"> </span><span class=\"n\">a2ln</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">A2Ordinary</span><span class=\"w\"> </span><span class=\"s\">\"real\"</span><span class=\"w\"> </span><span class=\"s\">\"real\"</span><span class=\"w\">   </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">A2Vertical</span><span class=\"w\"> </span><span class=\"s\">\"real\"</span>\n\n<span class=\"k\">definition</span><span class=\"w\"> </span><span class=\"n\">A2Points</span><span class=\"o\">::</span><span class=\"s\">\"a2pt set\"</span>\n<span class=\"w\">  </span><span class=\"kp\">where</span><span class=\"w\"> </span><span class=\"s\">\"A2Points ≡ (UNIV::a2pt set)\"</span>\n\n<span class=\"k\">definition</span><span class=\"w\"> </span><span class=\"n\">A2Lines</span><span class=\"o\">::</span><span class=\"s\">\"a2ln set\"</span>\n<span class=\"w\">  </span><span class=\"kp\">where</span><span class=\"w\"> </span><span class=\"s\">\"A2Lines ≡ (UNIV::a2ln set)\"</span>\n\n<span class=\"k\">datatype</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n n-Type\">'point</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n n-Type\">'line</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">projPoint</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">OrdinaryP</span><span class=\"w\"> </span><span class=\"n n-Type\">'point</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Ideal</span><span class=\"w\"> </span><span class=\"s\">\"'line set\"</span>\n<span class=\"k\">datatype</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n n-Type\">'point</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n n-Type\">'line</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">projLine</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">OrdinaryL</span><span class=\"w\"> </span><span class=\"n n-Type\">'line</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Infty</span>\n\n<span class=\"k\">definition</span><span class=\"w\"> </span><span class=\"n\">pPoints</span><span class=\"w\"> </span><span class=\"kp\">where</span>\n<span class=\"s\">\"pPoints ≡ {OrdinaryP P | P . (P ∈ A2Points)} ∪ {Ideal t | k t .</span>\n<span class=\"s\">                  ((k ∈ A2Lines) ∧ (t = {k}))}\"</span>\n<span class=\"k\">definition</span><span class=\"w\"> </span><span class=\"n\">pLines</span><span class=\"w\"> </span><span class=\"kp\">where</span>\n<span class=\"s\">\"pLines ≡  {OrdinaryL n | n . (n ∈ A2Lines)} ∪ {Infty}\"</span>\n\n<span class=\"kt\">find_theorems</span><span class=\"w\"> </span><span class=\"n\">pPoints</span>\n<span class=\"k\">end</span>\n</code></pre></div>",
        "id": 528657096,
        "sender_full_name": "John  Hughes",
        "timestamp": 1752498123
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">rp2iso</span><span class=\"w\"> </span><span class=\"kp\">where</span>\n<span class=\"w\">   </span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"n\">del</span><span class=\"o\">]:</span><span class=\"w\"> </span><span class=\"s\">\"rp2iso (Ordinary P) = ... (x, y, 1)\"</span>\n</code></pre></div>",
        "id": 528658198,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1752498457
    },
    {
        "content": "<p>I see...the <code>[simp del]</code> is saying that Isabelle should <em>not</em> add this particular equality to its simp-set.  I still don't understand how to extract <code>x</code> and <code>y</code> from the argument <code>P</code>, but perhaps looking more at the documentation for <code>fun</code> and datatypes will enlighten me.</p>",
        "id": 528662047,
        "sender_full_name": "John  Hughes",
        "timestamp": 1752499524
    },
    {
        "content": "<p><code>fun</code> allows you to write arbitrary patterns</p>",
        "id": 528662903,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1752499714
    },
    {
        "content": "<p>including your <code>\"rp2iso (Ordinary (A2Point x y)) =  (x, y, 1)\"</code></p>",
        "id": 528662954,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1752499727
    },
    {
        "content": "<p>Ah...thank you very much!</p>",
        "id": 528745580,
        "sender_full_name": "John  Hughes",
        "timestamp": 1752529565
    }
]