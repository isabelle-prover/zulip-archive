[
    {
        "content": "<p>I have a locale for representing something called an affine plane; it's defined using a different locale (<code>affine_plane_data</code>) which is just a hack for allowing me to define the word \"parallel\", so that I can use it in defining an affine plane. </p>\n<p>Within an affine plane, \"<code>parallel</code>\" is an equivalence relation on lines, as one might expect by analogy with Euclidean geometry. I'd like to define something called (in geometry books) a 'pencil of parallel lines',  which is an equivalence class of parallel lines within my plane. In euclidean geometry, the collection of all vertical lines is a pencil; the collection of all horizontal lines is a pencil; the collection of all lines of slope 13 is a pencil, and so on. </p>\n<p>When I try to do this, I get into trouble because my notion of \"parallel\" depends on the 'parameters' of my affine plane, namely the types for the sets <code>Points</code> and <code>Lines</code> and a function called <code>meets</code>, and <code>quotient_type</code> fails me. </p>\n<p>Can someone suggest how to do this correctly? </p>\n<p>The problem is shown below, where I've replaced the proofs with <code>sorry</code> so as to show the key problem. The failure is in the <code>quotient_type</code> just a few lines before the end. </p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">theory</span><span class=\"w\"> </span><span class=\"n\">Affine_BasicsMWE</span>\n<span class=\"w\">  </span><span class=\"kp\">imports</span><span class=\"w\"> </span><span class=\"n\">Complex_Main</span><span class=\"w\"> </span><span class=\"n\">HOL.Equiv_Relations</span>\n<span class=\"k\">begin</span>\n\n<span class=\"k\">locale</span><span class=\"w\"> </span><span class=\"n\">affine_plane_data</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">  </span><span class=\"kp\">fixes</span><span class=\"w\"> </span><span class=\"n\">Points</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"'p set\"</span><span class=\"w\"> </span><span class=\"kp\">and</span><span class=\"w\"> </span><span class=\"n\">Lines</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"'l set\"</span><span class=\"w\"> </span><span class=\"kp\">and</span><span class=\"w\"> </span><span class=\"n\">meets</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"'p ⇒ 'l ⇒ bool\"</span>\n<span class=\"w\">  </span><span class=\"kp\">fixes</span><span class=\"w\"> </span><span class=\"n\">join</span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"'p ⇒ 'p ⇒ 'l\"</span>\n<span class=\"w\">  </span><span class=\"kp\">fixes</span><span class=\"w\"> </span><span class=\"n\">find_parallel</span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"'l ⇒ 'p ⇒ 'l\"</span>\n<span class=\"k\">begin</span>\n\n<span class=\"k\">definition</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"kp\">in</span><span class=\"w\"> </span><span class=\"n\">affine_plane_data</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">parallel</span><span class=\"o\">::</span><span class=\"s\">\"'l ⇒ 'l ⇒ bool\"</span><span class=\"w\">  </span><span class=\"o\">(</span><span class=\"kp\">infix</span><span class=\"w\"> </span><span class=\"s\">\"||\"</span><span class=\"w\"> </span><span class=\"n\">50</span><span class=\"o\">)</span><span class=\"w\">  </span><span class=\"kp\">where</span>\n<span class=\"w\">  </span><span class=\"s\">\"parallel l m = ( (l = m) ∨</span>\n<span class=\"s\">  ( (¬ (∃ P. P ∈ Points ∧ meets P l ∧ meets P m)) ∧ (l ∈ Lines) ∧ (m ∈ Lines)))\"</span>\n\n<span class=\"k\">definition</span><span class=\"w\"> </span><span class=\"n\">collinear</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"'p ⇒ 'p ⇒ 'p ⇒ bool\"</span>\n<span class=\"w\">    </span><span class=\"kp\">where</span><span class=\"w\"> </span><span class=\"s\">\"collinear A B C = (if A ∈ Points ∧ B ∈ Points ∧ C ∈ Points</span>\n<span class=\"s\">  then (∃ l. l ∈ Lines ∧ meets A l ∧ meets B l ∧ meets C l) else undefined)\"</span>\n<span class=\"k\">end</span>\n\n<span class=\"k\">locale</span><span class=\"w\"> </span><span class=\"n\">affine_plane</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">    </span><span class=\"n\">affine_plane_data</span><span class=\"w\">  </span><span class=\"o\">+</span>\n<span class=\"w\">    </span><span class=\"kp\">assumes</span>\n<span class=\"w\">    </span><span class=\"n\">a1a</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"⟦P ≠ Q; P ∈ Points; Q ∈ Points⟧ ⟹ join P Q ∈ Lines ∧ meets P (join P Q)  ∧ meets Q (join P Q)\"</span><span class=\"w\"> </span><span class=\"kp\">and</span>\n<span class=\"w\">    </span><span class=\"n\">a1b</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"⟦P ≠ Q; P ∈ Points; Q ∈ Points; meets P m; meets Q m⟧ ⟹ m = join P Q\"</span><span class=\"w\"> </span><span class=\"kp\">and</span>\n<span class=\"w\">    </span><span class=\"n\">a2a</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"⟦ P ∈ Points; l ∈ Lines⟧ ⟹ find_parallel l P ∈ Lines\"</span><span class=\"w\"> </span><span class=\"kp\">and</span>\n<span class=\"w\">    </span><span class=\"n\">a2b</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"⟦ P ∈ Points; l ∈ Lines⟧ ⟹  ( find_parallel l P) || l\"</span><span class=\"w\"> </span><span class=\"kp\">and</span>\n<span class=\"w\">    </span><span class=\"n\">a2c</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"⟦ P ∈ Points; l ∈ Lines⟧ ⟹  meets P (find_parallel l P)\"</span><span class=\"w\"> </span><span class=\"kp\">and</span>\n<span class=\"w\">    </span><span class=\"n\">a2d</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"⟦ P ∈ Points; l ∈ Lines; m ∈ Lines; m || l; meets P m⟧ ⟹ m = find_parallel l P\"</span><span class=\"w\"> </span><span class=\"kp\">and</span>\n<span class=\"w\">    </span><span class=\"n\">a3</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"∃P Q R. P ∈ Points ∧ Q ∈ Points ∧ R ∈ Points ∧ P ≠ Q ∧ P ≠ R ∧ Q ≠ R ∧ ¬ (collinear P Q R)\"</span>\n<span class=\"k\">begin</span>\n\n<span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">parr_refl</span><span class=\"o\">:</span>\n<span class=\"w\">  </span><span class=\"kp\">shows</span><span class=\"w\"> </span><span class=\"s\">\"reflp parallel\"</span>\n<span class=\"w\">  </span><span class=\"gr\">sorry</span>\n\n<span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">parr_sym</span><span class=\"o\">:</span>\n<span class=\"w\">  </span><span class=\"kp\">shows</span><span class=\"w\"> </span><span class=\"s\">\"symp parallel\"</span>\n<span class=\"w\">  </span><span class=\"gr\">sorry</span>\n\n<span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">parr_trans</span><span class=\"o\">:</span>\n<span class=\"w\">  </span><span class=\"kp\">shows</span><span class=\"w\"> </span><span class=\"s\">\"transp parallel\"</span>\n<span class=\"w\">  </span><span class=\"gr\">sorry</span>\n\n<span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">parallel_equivalence</span><span class=\"o\">:</span>\n<span class=\"w\">  </span><span class=\"kp\">shows</span><span class=\"w\"> </span><span class=\"s\">\"Equiv_Relations.equivp parallel\"</span>\n<span class=\"k\">proof</span><span class=\"w\"> </span><span class=\"o\">-</span>\n<span class=\"w\">  </span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">thesis</span><span class=\"w\"> </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">parr_refl</span><span class=\"w\"> </span><span class=\"n\">parr_sym</span><span class=\"w\"> </span><span class=\"n\">parr_trans</span><span class=\"w\"> </span><span class=\"n\">equivpI</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">auto</span>\n<span class=\"k\">qed</span>\n\n<span class=\"kn\">quotient_type</span><span class=\"w\">  </span><span class=\"n\">pencil</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"'l\"</span><span class=\"w\"> </span><span class=\"n\">/</span><span class=\"w\"> </span><span class=\"s\">\"parallel::'l ⇒ 'l⇒ bool\"</span>\n<span class=\"w\">  </span><span class=\"kp\">morphisms</span><span class=\"w\"> </span><span class=\"n\">Rep_Pencil</span><span class=\"w\"> </span><span class=\"n\">Abs_Pencil</span>\n\n<span class=\"kt\">find_consts</span><span class=\"w\"> </span><span class=\"n\">name</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"parallel\"</span>\n<span class=\"c\">(* gives  Affine_Basics.affine_plane_data.parallel :: \"'p set ⇒ 'l set ⇒ ('p ⇒ 'l ⇒ bool) ⇒ 'l ⇒ 'l ⇒ bool\" *)</span>\n\n<span class=\"k\">end</span>\n</code></pre></div>",
        "id": 498733911,
        "sender_full_name": "John  Hughes",
        "timestamp": 1739186332
    }
]