[
    {
        "content": "<p>Hi everyone, I want to define and use a set of functions to map elements from set X to set Y but I got trouble about using it.<br>\nFor example, we have two sets as follows:</p>\n<div class=\"codehilite\"><pre><span></span><code>definition X :: &quot;nat set&quot;\n  where &quot;X = {1, 2}&quot;\ndefinition Y :: &quot;nat set&quot;\n  where &quot;Y = {3, 4}&quot;\n</code></pre></div>\n\n\n<p><code>alpha</code> is the function map an element of X to an element of Y and <code>alphaSet</code> is the set of <code>alpha</code>.  For instance,</p>\n<div class=\"codehilite\"><pre><span></span><code>alphaSet = {(1,3), (2,4)} or {(1,4), (2,3)} or ...\nIf alphaSet = {(1,3), (2,4)} then\nalpha 1 = 3\nalpha 2 = 4\n</code></pre></div>\n\n\n<p>Thus, I defined <code>alpha</code> and <code>alphaSet</code> as follows:</p>\n<div class=\"codehilite\"><pre><span></span><code>definition alpha :: &quot;nat ⇒ nat&quot; where\n&quot;alpha x = (if x ∈ X then (SOME y. y ∈ Y) else 0)&quot;\n\ndefinition alphaSet :: &quot;(nat ⇒ nat) set &quot; where\n &quot;alphaSet = {f. (∀x ∈ X.(f x) ∈ Y)}&quot;\n</code></pre></div>\n\n\n<p>My problem is that how can I generate the values of <code>alphaSet</code> (i.e. how to get the set of function)? I tried</p>\n<div class=\"codehilite\"><pre><span></span><code>value &quot;∀x ∈ X. alpha x&quot;.      ------- error\nlemma test1: &quot;(x ∈ X) ∧ (alpha ∈ alphaSet) ⟹ ((alpha x) ∈ Y)&quot;\n</code></pre></div>\n\n\n<p>but the result is <code>Failed to finish proof</code>. Could anyone help me, please? Thank you very much.</p>",
        "id": 214163285,
        "sender_full_name": "Trinh Le Khanh",
        "timestamp": 1603359339
    },
    {
        "content": "<p>value does not work for an obvious reason: It does not type. You are probably looking for <code>value \"alpha ` X\"</code>, which does not work either, because of the SOME. There is no way Isabelle can evaluate this expression, it is not constructive.</p>",
        "id": 214164529,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1603360111
    },
    {
        "content": "<p>About test1: I don't believe that it is out of the reach of someone who has done the Isabelle part of the Concrete Semantics.</p>",
        "id": 214164620,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1603360170
    },
    {
        "content": "<p>(and the lemma is correct)</p>",
        "id": 214164633,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1603360184
    },
    {
        "content": "<p>A constructive way for alpha can involve <code>sorted_list_of_set</code> to convert a set to a list and build the mapping explicitly.</p>",
        "id": 214164876,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1603360328
    },
    {
        "content": "<blockquote>\n<p>About test1: I don't believe that it is out of the reach of someone who has done the Isabelle part of the Concrete Semantics.</p>\n</blockquote>\n<p>Yes, I've just done it. I forgot to unfold the definitions of X, Y, alpha, and alphaSet.</p>\n<blockquote>\n<p>A constructive way for alpha can involve <code>sorted_list_of_set</code> to convert a set to a list and build the mapping explicitly.</p>\n</blockquote>\n<p>Thank you for your suggestion. I'll try it.</p>",
        "id": 214165638,
        "sender_full_name": "Trinh Le Khanh",
        "timestamp": 1603360900
    },
    {
        "content": "<p>The question is probably if you really need to have an explicit mapping. There should be a theorem somewhere that states that there is an injection between two sets of the same cardinality.</p>",
        "id": 214166296,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1603361348
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"233198\">Mathias Fleury</span> <a href=\"#narrow/stream/238552-Beginner-Questions/topic/Defining.20and.20using.20set.20of.20functions/near/214166296\">said</a>:</p>\n<blockquote>\n<p>The question is probably if you really need to have an explicit mapping. There should be a theorem somewhere that states that there is an injection between two sets of the same cardinality.</p>\n</blockquote>\n<p>Yes, actually, I need that: for each <code>x ∈ X</code>, create a set Y_x. For example, </p>\n<div class=\"codehilite\"><pre><span></span><code>X = {0, 1}\nx ∈ X\nx = 0: create Y_0 = {3,4,5}\nx = 1: create Y_1 = {6,7}\n</code></pre></div>",
        "id": 214256124,
        "sender_full_name": "Trinh Le Khanh",
        "timestamp": 1603406019
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"233198\">Mathias Fleury</span> <a href=\"#narrow/stream/238552-Beginner-Questions/topic/Defining.20and.20using.20set.20of.20functions/near/214166296\">said</a>:</p>\n<blockquote>\n<p>The question is probably if you really need to have an explicit mapping. There should be a theorem somewhere that states that there is an injection between two sets of the same cardinality.</p>\n</blockquote>\n<p>Hi Mathias, I got a problem defining a set of functions.  I defined <code>alphaSet</code> (a set of <code>alpha</code> function) as follows:</p>\n<div class=\"codehilite\"><pre><span></span><code>definition SyncExport :: &quot;nat set&quot; (* Export*)\n  where &quot;SyncExport = {1, 2}&quot;\n\ndefinition SyncElemExport :: &quot;nat set&quot; (*element Export*)\n  where &quot;SyncElemExport = {1, 2}&quot;\n\ndefinition TypeSync :: &quot;nat set&quot; (*port types*)\n  where &quot;TypeSync = {1, 2}&quot;\n\ndefinition IncSync :: &quot;nat set set&quot; (*port instances of each port type TypeSync*)\n  where &quot;IncSync = {{5,6}, {7,8,9}}&quot;\n\ndefinition mapin :: &quot;nat ⇒ nat set&quot; where (*mapin 1 = {5,6}; mapin 2 = {7,8,9}*)\n&quot;mapin pt = (if pt ∈ TypeSync then (SOME pIn. pIn ∈ IncSync) else {})&quot;\n\ndefinition alphaSet :: &quot;(nat ⇒ nat) set &quot; where (*set of functions alpha*)\n &quot;alphaSet = {f. ∀x∈TypeSync. (f x) ∈ (mapin x)}&quot;\n\ndefinition alpha :: &quot;nat ⇒ nat&quot; where (*alpha 1= 5 or alpha 1 = 6*)\n&quot;alpha pt = (if pt ∈ TypeSync then (SOME y. y ∈ (mapin pt)) else 0)&quot;\n</code></pre></div>\n<p>Then, I test the cardinality of <code>TypeSync</code> and <code>IncSync</code>. They are equal.</p>\n<div class=\"codehilite\"><pre><span></span><code>value &quot;card TypeSync&quot;\nvalue &quot;card IncSync&quot;\n</code></pre></div>\n<p>But when I want to show the value of the below predicate:</p>\n<div class=\"codehilite\"><pre><span></span><code>value &quot;(∀t∈TypeSync.∀alp∈alphaSet.(P t (alp t)))&quot;\n</code></pre></div>\n<p>It caused the error:</p>\n<div class=\"codehilite\"><pre><span></span><code>Wellsortedness error\n(in code equation alphaSet ≡ {f. ∀x∈TypeSync. f x ∈ mapin x},\nwith dependency &quot;Pure.dummy_pattern&quot; -&gt; &quot;alphaSet&quot;):\nType nat ⇒ nat not of sort enum\nNo type arity nat :: enum\n</code></pre></div>\n<p>As I understand, this error is from the infinite set but I defined <code>TypeSync</code> and <code>IncSync</code> are finite sets. Do you have any suggestions?</p>",
        "id": 215259577,
        "sender_full_name": "Trinh Le Khanh",
        "timestamp": 1604260897
    },
    {
        "content": "<ul>\n<li>This is <em>not</em> an explicit construction (you cannot use SOME for that!) and <code>mapin</code> cannot be calculated</li>\n<li>The error message hints that <code>alphaSet</code> cannot be calculated. Without code setup, it requires enumerating constructing all functions <code>f</code> and then filtering them.</li>\n</ul>",
        "id": 215260112,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1604261618
    },
    {
        "content": "<p>In the <code>mapin</code>, I want that from the <code>i element</code> of set A, we take the corresponding element in the set B.<br>\nI read the <code>set</code> library in Isabelle but they just provide operators <code>insert</code> or <code>empty</code>. Is there any chance to make an explicit mapping between two sets' elements?</p>",
        "id": 215264187,
        "sender_full_name": "Trinh Le Khanh",
        "timestamp": 1604267740
    },
    {
        "content": "<p>By definition there is <em>no order</em> of elements of sets, but:</p>\n<p><span class=\"user-mention silent\" data-user-id=\"233198\">Mathias Fleury</span> <a href=\"#narrow/stream/238552-Beginner-Questions/topic/Defining.20and.20using.20set.20of.20functions/near/214164876\">said</a>:</p>\n<blockquote>\n<p>A constructive way for alpha can involve <code>sorted_list_of_set</code> to convert a set to a list and build the mapping explicitly.</p>\n</blockquote>\n<p>allows you to build a list containing the same elements (if the set is finite). Then there is an order on the elements.</p>",
        "id": 215280669,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1604294927
    },
    {
        "content": "<p>Along that line (don't name the function <code>t</code> in your development!):</p>\n<div class=\"codehilite\"><pre><span></span><code>fun t where\n‹t (x # xs) (y # ys) = (t xs ys) (x := y)› |\n‹t _ _ = (λx. 0)›\n\ndefinition explicit_mapping :: ‹nat set ⇒ nat set ⇒ (nat ⇒ nat)› where\n‹explicit_mapping xs ys = t (sorted_list_of_set xs) (sorted_list_of_set ys)›\n\nvalue ‹explicit_mapping {1, 2, 3} {4, 5, 6}›\n</code></pre></div>\n<p>And here a completely random lemma:</p>\n<div class=\"codehilite\"><pre><span></span><code>lemma t_maps_to_existing:\n  ‹length xs = length ys ⟹ x ∈ set xs ⟹ (t xs ys) x ∈ set ys›\n  by (induction xs ys rule: list_induct2) auto\n\n(*why is that not in the library?*)\nlemma length_sorted_list_of_set[simp]:\n   ‹finite xs ⟹ length (sorted_list_of_set xs) = card xs›\n  by (metis distinct_card distinct_sorted_list_of_set set_sorted_list_of_set)\n\nlemma\n  ‹finite xs ⟹ finite ys ⟹ card xs = card ys ⟹ x ∈ xs ⟹ explicit_mapping xs ys x ∈ ys›\n  using t_maps_to_existing[of ‹sorted_list_of_set xs› ‹sorted_list_of_set ys› x]\n  by (auto simp: explicit_mapping_def)\n</code></pre></div>",
        "id": 215281063,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1604295609
    },
    {
        "content": "<p>But again: do you need to build the mapping explicitly or is it sufficient for you to show that one exists?</p>",
        "id": 215281133,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1604295776
    },
    {
        "content": "<p>In the latter case, you can use the function <code>finite_same_card_bij</code>.</p>",
        "id": 215281207,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1604295867
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"233198\">Mathias Fleury</span> <a href=\"#narrow/stream/238552-Beginner-Questions/topic/Defining.20and.20using.20set.20of.20functions/near/215281207\">said</a>:</p>\n<blockquote>\n<p>In the latter case, you can use the function <code>finite_same_card_bij</code>.</p>\n</blockquote>\n<p>Thank you for your comment. This command</p>\n<div class=\"codehilite\"><pre><span></span><code>value ‹explicit_mapping {1, 2, 3} {4, 5, 6}›\n</code></pre></div>\n<p>returns </p>\n<div class=\"codehilite\"><pre><span></span><code>&quot;_&quot;\n  :: &quot;nat ⇒ nat&quot;\n</code></pre></div>\n<p>not</p>\n<div class=\"codehilite\"><pre><span></span><code>(1=&gt;4), (2=&gt;5), (3=&gt;6)\n</code></pre></div>\n<p>I think the result should be the latter right?</p>\n<blockquote>\n<p>In the latter case, you can use the function <code>finite_same_card_bij</code>.</p>\n</blockquote>\n<p>You mean that I can use it when proving lemmas and theorems not defining the mapping, right? Besides, defining the mapping using <code>SOME</code> is incorrect. I should change the definition, right?</p>",
        "id": 215296501,
        "sender_full_name": "Trinh Le Khanh",
        "timestamp": 1604309769
    },
    {
        "content": "<p>I am convinced you can change the definitions to change <code>explicit_mapping</code> from a function (like it is now) to whatever you want.</p>",
        "id": 215301581,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1604313140
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>You mean that I can use it when proving lemmas and theorems not defining the mapping, right? Besides, defining the mapping using SOME is incorrect. I should change the definition, right?\n</code></pre></div>\n<p>No, using SOME means you cannot compute it, so <code>value</code> cannot work. If you don't need the concrete mapping and don't need value, you can use some.</p>",
        "id": 215301704,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1604313221
    },
    {
        "content": "<p>So, I keep my definition as follows:</p>\n<div class=\"codehilite\"><pre><span></span><code>definition PType :: &quot;nat set&quot; (*port types*)\n  where &quot;PType = {1, 2}&quot;\n\ndefinition PIns :: &quot;nat set set&quot; (*port instances of each port type PType*)\n  where &quot;PIns = {{5,6}, {7,8,9}}&quot;\n\ndefinition mapin :: &quot;nat ⇒ nat set&quot; where (*mapin 1 = {5,6}; mapin 2 = {7,8,9}*)\n&quot;mapin pt = (if pt ∈ PType then (SOME pIn. pIn ∈ PIns) else {})&quot;\n\ndefinition alphaSet :: &quot;(nat ⇒ nat) set &quot; where (*set of functions alpha*)\n &quot;alphaSet = {f. ∀x∈PType. (f x) ∈ (mapin x)}&quot;\n</code></pre></div>\n<p>Then, I create a lemma using <code>finite_same_card_bij</code> but it unprovable (it stayed in proving forever)</p>\n<div class=\"codehilite\"><pre><span></span><code>lemma test31: &quot;(∀t∈PType.(∀alp∈alphaSet.(P t (alp t) ⟶ (∀l1∈(mapin t)-{alp t}.¬P t l1))))\n  ⟹ (∀t∈PType.(∃alp∈alphaSet.∀l1∈(mapin t)-{alp t}. ¬P t l1))&quot;\n  unfolding PType_def mapin_def PIns_def alpha_def alphaSet_def\n  using finite_same_card_bij\n  apply blast\n  done\n</code></pre></div>\n<p>In Math, it should be equal because</p>\n<div class=\"codehilite\"><pre><span></span><code>(P 2 7 ⟶ ¬P 2 8 ∧ ¬P 2 9) ∧ (P 2 8 ⟶ ¬P 2 7 ∧ ¬P 2 9) ∧ (P 2 9 ⟶ ¬P 2 8 ∧ ¬P 2 7)\n⟷ (¬P 2 8 ∧ ¬P 2 9)∨(¬P 2 7 ∧ ¬P 2 9)∨(¬P 2 8 ∧ ¬P 2 7)\n</code></pre></div>",
        "id": 215321615,
        "sender_full_name": "Trinh Le Khanh",
        "timestamp": 1604325723
    },
    {
        "content": "<p>You misunderstand what <code>SOME</code> means. It is an arbitrary choice. Unless that choice is unique, you _cannot say anything_ about its value. In particular <code>mapin 1 = {5, 6}</code> might be true but might also be false. </p>\n<p>You are in exactly one of those cases:</p>\n<div class=\"codehilite\"><pre><span></span><code>      mapin 1 = {5, 6} and mapin 2 = {7, 8, 9}\nor mapin 1 = {5, 6}  and mapin 2 = {5, 6}\nor mapin 1 = {7, 8, 9}  and mapin 2 = {5, 6}\nor mapin 1 = {7, 8, 9}  and mapin 2 = {7, 8, 9}\n</code></pre></div>\n<p>YOU HAVE NO WAY TO KNOW WHICH OF THOSE CASES IS TRUE.</p>",
        "id": 215327627,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1604328442
    }
]