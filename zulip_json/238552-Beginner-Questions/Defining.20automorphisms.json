[
    {
        "content": "<p>Mimicking Ballarin's approach to <a href=\"https://www.isa-afp.org/sessions/jacobson_basic_algebra/#Group_Theory.html\">algebra</a>, I've been defining morphisms and isomorphisms for projective planes. I've run into some problems/questions (in bold below). Here's my starting point:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">theory</span><span class=\"w\"> </span><span class=\"n\">locale_example</span>\n<span class=\"w\">  </span><span class=\"kp\">imports</span><span class=\"w\"> </span><span class=\"n\">Main</span>\n<span class=\"k\">begin</span>\n<span class=\"k\">locale</span><span class=\"w\"> </span><span class=\"n\">projective_plane_data</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">  </span><span class=\"kp\">fixes</span><span class=\"w\"> </span><span class=\"n\">Points</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"'p set\"</span><span class=\"w\"> </span><span class=\"kp\">and</span><span class=\"w\"> </span><span class=\"n\">Lines</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"'l set\"</span><span class=\"w\"> </span><span class=\"kp\">and</span><span class=\"w\"> </span><span class=\"n\">incid</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"'p ⇒ 'l ⇒ bool\"</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"kp\">infix</span><span class=\"w\"> </span><span class=\"s\">\"⊲\"</span><span class=\"w\"> </span><span class=\"n\">60</span><span class=\"o\">)</span>\n<span class=\"k\">begin</span>\n\n<span class=\"k\">definition</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"kp\">in</span><span class=\"w\"> </span><span class=\"n\">projective_plane_data</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">pcollinear</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"'p ⇒ 'p ⇒ 'p ⇒ bool\"</span>\n<span class=\"w\">  </span><span class=\"kp\">where</span><span class=\"w\"> </span><span class=\"s\">\"pcollinear A B C = (if (A ∈ Points ∧ B ∈ Points ∧ C ∈ Points)</span>\n<span class=\"s\">  then (∃ l. l ∈ Lines ∧ A ⊲ l ∧ B ⊲ l ∧ C ⊲ l) else undefined)\"</span>\n<span class=\"k\">end</span>\n\n<span class=\"k\">locale</span><span class=\"w\"> </span><span class=\"n\">projective_plane</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">projective_plane_data</span><span class=\"w\"> </span><span class=\"n\">Points</span><span class=\"w\"> </span><span class=\"n\">Lines</span><span class=\"w\"> </span><span class=\"n\">incid</span>\n<span class=\"w\">  </span><span class=\"kp\">for</span>\n<span class=\"w\">    </span><span class=\"n\">Points</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"'p set\"</span><span class=\"w\"> </span><span class=\"kp\">and</span>\n<span class=\"w\">    </span><span class=\"n\">Lines</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"'l set\"</span><span class=\"w\"> </span><span class=\"kp\">and</span>\n<span class=\"w\">    </span><span class=\"n\">incid</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"'p ⇒ 'l ⇒ bool\"</span><span class=\"w\">  </span><span class=\"o\">(</span><span class=\"kp\">infix</span><span class=\"w\"> </span><span class=\"s\">\"⊲\"</span><span class=\"w\"> </span><span class=\"n\">60</span><span class=\"o\">)</span><span class=\"w\">  </span><span class=\"o\">+</span>\n<span class=\"w\">  </span><span class=\"kp\">assumes</span>\n<span class=\"w\">    </span><span class=\"n\">p1</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"⟦P ≠ Q; P ∈ Points; Q ∈ Points⟧ ⟹ (∃!k. k ∈ Lines ∧ P ⊲ k ∧ Q ⊲ k)\"</span><span class=\"w\"> </span><span class=\"kp\">and</span>\n<span class=\"w\">    </span><span class=\"n\">p2</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"⟦k ∈ Lines; n ∈ Lines⟧ ⟹ ∃P. (P ∈ Points ∧ P ⊲ k ∧ P ⊲ n)\"</span><span class=\"w\"> </span><span class=\"kp\">and</span>\n<span class=\"w\">    </span><span class=\"n\">p3</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"∃P Q R. P ∈ Points ∧ Q ∈ Points ∧ R ∈ Points ∧ P ≠ Q ∧ P ≠ R ∧ Q ≠ R ∧ ¬ (pcollinear P Q R)\"</span><span class=\"w\"> </span><span class=\"kp\">and</span>\n<span class=\"w\">    </span><span class=\"n\">p4</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"⟦k ∈ Lines; U = {P. (P ∈ Points ∧ P ⊲ k)} ⟧ ⟹ ∃Q R S. Q ∈ U ∧ R ∈ U ∧ S ∈ U ∧ distinct [Q, R, S]\"</span>\n<span class=\"k\">begin</span>\n<span class=\"k\">end</span>\n<span class=\"k\">locale</span><span class=\"w\">  </span><span class=\"n\">pp_morphism</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">  </span><span class=\"n\">source</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">projective_plane</span><span class=\"w\"> </span><span class=\"s\">\"Points1\"</span><span class=\"w\"> </span><span class=\"s\">\"Lines1\"</span><span class=\"w\"> </span><span class=\"s\">\"incid1\"</span><span class=\"w\"> </span><span class=\"o\">+</span>\n<span class=\"w\">  </span><span class=\"n\">target</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">projective_plane</span><span class=\"w\"> </span><span class=\"s\">\"Points2\"</span><span class=\"w\"> </span><span class=\"s\">\"Lines2\"</span><span class=\"w\"> </span><span class=\"s\">\"incid2\"</span>\n<span class=\"w\">  </span><span class=\"kp\">for</span><span class=\"w\"> </span><span class=\"n\">Points1</span><span class=\"w\"> </span><span class=\"kp\">and</span><span class=\"w\"> </span><span class=\"n\">Lines1</span><span class=\"w\"> </span><span class=\"kp\">and</span><span class=\"w\"> </span><span class=\"n\">incid1</span><span class=\"w\"> </span><span class=\"kp\">and</span><span class=\"w\"> </span><span class=\"n\">Points2</span><span class=\"w\"> </span><span class=\"kp\">and</span><span class=\"w\"> </span><span class=\"n\">Lines2</span><span class=\"w\"> </span><span class=\"kp\">and</span><span class=\"w\"> </span><span class=\"n\">incid2</span><span class=\"w\"> </span><span class=\"o\">+</span>\n<span class=\"w\">  </span><span class=\"kp\">fixes</span><span class=\"w\"> </span><span class=\"s\">\"f\"</span>\n<span class=\"w\">  </span><span class=\"kp\">assumes</span>\n<span class=\"w\">    </span><span class=\"n\">m1</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"⟦P ∈ Points1⟧ ⟹ (f P) ∈ Points2\"</span><span class=\"w\"> </span><span class=\"kp\">and</span>\n<span class=\"w\">    </span><span class=\"n\">m2</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"⟦P ∈ Points1; Q ∈ Points1; R ∈ Points1; source.pcollinear P Q R⟧ ⟹ target.pcollinear  (f P) (f Q) (f R)\"</span>\n<span class=\"k\">begin</span>\n<span class=\"k\">end</span>\n\n<span class=\"k\">locale</span><span class=\"w\">  </span><span class=\"n\">pp_isomorphism</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">pp_morphism</span><span class=\"w\">  </span><span class=\"n\">Points1</span><span class=\"w\"> </span><span class=\"n\">Lines1</span><span class=\"w\"> </span><span class=\"n\">incid1</span><span class=\"w\"> </span><span class=\"n\">Points2</span><span class=\"w\"> </span><span class=\"n\">Lines2</span><span class=\"w\"> </span><span class=\"n\">incid2</span><span class=\"w\"> </span><span class=\"n\">f</span>\n<span class=\"w\">  </span><span class=\"kp\">for</span><span class=\"w\"> </span><span class=\"n\">Points1</span><span class=\"w\"> </span><span class=\"n\">Lines1</span><span class=\"w\"> </span><span class=\"n\">incid1</span><span class=\"w\"> </span><span class=\"n\">Points2</span><span class=\"w\"> </span><span class=\"n\">Lines2</span><span class=\"w\"> </span><span class=\"n\">incid2</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"o\">+</span>\n<span class=\"w\">  </span><span class=\"kp\">assumes</span>\n<span class=\"w\">    </span><span class=\"n\">m3</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"bij_betw f Points1 Points2\"</span>\n<span class=\"k\">begin</span>\n<span class=\"k\">end</span>\n</code></pre></div>\n<p>Basically, a morphism is a map on points that preserves collinearity; an isomorphism is one that is also a bijection. </p>\n<p><strong>Side-question</strong>: is there a reason to use <code>sublocale</code> to relate isomorphism to morphism? Reading the tutorial on locales didn't really make this clear to me. </p>\n<p>I'd now like to define an <em>auto</em>morphism, which is basically an isomorphism of a projective plane to itself. The identity map on <code>Points</code> is a good example. I'd <em>like</em> to write something  like</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">locale</span><span class=\"w\">  </span><span class=\"n\">pp_automorphism</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">pp_isomorphism</span><span class=\"w\">  </span><span class=\"n\">Points1</span><span class=\"w\"> </span><span class=\"n\">Lines1</span><span class=\"w\"> </span><span class=\"n\">incid1</span><span class=\"w\"> </span><span class=\"n\">Points1</span><span class=\"w\"> </span><span class=\"n\">Lines1</span><span class=\"w\"> </span><span class=\"n\">incid1</span><span class=\"w\"> </span><span class=\"n\">f</span>\n<span class=\"w\">  </span><span class=\"kp\">for</span><span class=\"w\"> </span><span class=\"n\">Points1</span><span class=\"w\"> </span><span class=\"n\">Lines1</span><span class=\"w\"> </span><span class=\"n\">incid1</span><span class=\"w\"> </span><span class=\"n\">Points2</span><span class=\"w\"> </span><span class=\"n\">Lines2</span><span class=\"w\"> </span><span class=\"n\">incid2</span><span class=\"w\"> </span><span class=\"n\">f</span>\n<span class=\"k\">begin</span>\n<span class=\"k\">end</span>\n</code></pre></div>\n<p>but that doesn't seem to work entirely, because the type assigned by Isabelle is </p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">locale</span><span class=\"w\"> </span><span class=\"n\">pp_automorphism</span>\n<span class=\"w\">  </span><span class=\"kp\">fixes</span><span class=\"w\"> </span><span class=\"n\">Points1</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"'a set\"</span>\n<span class=\"w\">    </span><span class=\"kp\">and</span><span class=\"w\"> </span><span class=\"n\">Lines1</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"'b set\"</span>\n<span class=\"w\">    </span><span class=\"kp\">and</span><span class=\"w\"> </span><span class=\"n\">incid1</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"'a ⇒ 'b ⇒ bool\"</span>\n<span class=\"w\">    </span><span class=\"kp\">and</span><span class=\"w\"> </span><span class=\"n\">Points2</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"'c\"</span>\n<span class=\"w\">    </span><span class=\"kp\">and</span><span class=\"w\"> </span><span class=\"n\">Lines2</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"'d\"</span>\n<span class=\"w\">    </span><span class=\"kp\">and</span><span class=\"w\"> </span><span class=\"n\">incid2</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"'e\"</span>\n<span class=\"w\">    </span><span class=\"kp\">and</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"'a ⇒ 'a\"</span>\n<span class=\"w\">  </span><span class=\"kp\">assumes</span><span class=\"w\"> </span><span class=\"s\">\"pp_automorphism Points1 Lines1 incid1 f\"</span>\n</code></pre></div>\n<p>where you can see that <code>Points2</code> and <code>Points1</code> have different types, even though property <code>m1</code> would suggest that they should be the same. </p>\n<p><strong>Can someone suggest anything to fix this up here?</strong> </p>\n<p>If I edit the definition a bit to include a fourth \"property\" like this:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">locale</span><span class=\"w\">  </span><span class=\"n\">pp_automorphism</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">pp_isomorphism</span><span class=\"w\">  </span><span class=\"n\">Points1</span><span class=\"w\"> </span><span class=\"n\">Lines1</span><span class=\"w\"> </span><span class=\"n\">incid1</span><span class=\"w\"> </span><span class=\"n\">Points1</span><span class=\"w\"> </span><span class=\"n\">Lines1</span><span class=\"w\"> </span><span class=\"n\">incid1</span><span class=\"w\"> </span><span class=\"n\">f</span>\n<span class=\"w\">  </span><span class=\"kp\">for</span><span class=\"w\"> </span><span class=\"n\">Points1</span><span class=\"w\"> </span><span class=\"n\">Lines1</span><span class=\"w\"> </span><span class=\"n\">incid1</span><span class=\"w\"> </span><span class=\"n\">Points2</span><span class=\"w\"> </span><span class=\"n\">Lines2</span><span class=\"w\"> </span><span class=\"n\">incid2</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"o\">+</span>\n<span class=\"w\">  </span><span class=\"kp\">assumes</span>\n<span class=\"w\">    </span><span class=\"n\">m4</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"Points1 = Points2 ∧ Lines1 = Lines2 ∧ incid1 = incid2\"</span>\n<span class=\"k\">begin</span>\n<span class=\"k\">end</span>\n</code></pre></div>\n<p>then the resulting types all look correct, but I thought that the content of this property was implicit in what I'd already said. </p>\n<p><strong>Is this a correct approach, or is there some other way to achieve the type-result that I'm aiming for?</strong></p>",
        "id": 547132948,
        "sender_full_name": "John  Hughes",
        "timestamp": 1761487366
    },
    {
        "content": "<p>In this:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">locale</span><span class=\"w\"> </span><span class=\"n\">pp_automorphism</span>\n<span class=\"w\">  </span><span class=\"kp\">fixes</span><span class=\"w\"> </span><span class=\"n\">Points1</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"'a set\"</span>\n<span class=\"w\">    </span><span class=\"kp\">and</span><span class=\"w\"> </span><span class=\"n\">Lines1</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"'b set\"</span>\n<span class=\"w\">    </span><span class=\"kp\">and</span><span class=\"w\"> </span><span class=\"n\">incid1</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"'a ⇒ 'b ⇒ bool\"</span>\n<span class=\"w\">    </span><span class=\"kp\">and</span><span class=\"w\"> </span><span class=\"n\">Points2</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"'c\"</span>\n<span class=\"w\">    </span><span class=\"kp\">and</span><span class=\"w\"> </span><span class=\"n\">Lines2</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"'d\"</span>\n<span class=\"w\">    </span><span class=\"kp\">and</span><span class=\"w\"> </span><span class=\"n\">incid2</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"'e\"</span>\n<span class=\"w\">    </span><span class=\"kp\">and</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"'a ⇒ 'a\"</span>\n<span class=\"w\">  </span><span class=\"kp\">assumes</span><span class=\"w\"> </span><span class=\"s\">\"pp_automorphism Points1 Lines1 incid1 f\"</span>\n</code></pre></div>\n<p>you are not assuming anything about <code>Points2</code>. What you want is probably:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">locale</span><span class=\"w\"> </span><span class=\"n\">pp_automorphism</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">  </span><span class=\"n\">pp_isomorphism</span><span class=\"w\"> </span><span class=\"n\">Points1</span><span class=\"w\"> </span><span class=\"n\">Lines1</span><span class=\"w\"> </span><span class=\"n\">incid1</span><span class=\"w\"> </span><span class=\"n\">Points2</span><span class=\"w\"> </span><span class=\"n\">Lines2</span><span class=\"w\"> </span><span class=\"n\">incid2</span><span class=\"w\"> </span><span class=\"n\">f</span>\n<span class=\"w\">  </span><span class=\"kp\">for</span><span class=\"w\"> </span><span class=\"n\">Points1</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"'a set\"</span>\n<span class=\"w\">    </span><span class=\"kp\">and</span><span class=\"w\"> </span><span class=\"n\">Lines1</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"'b set\"</span>\n<span class=\"w\">    </span><span class=\"kp\">and</span><span class=\"w\"> </span><span class=\"n\">incid1</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"'a ⇒ 'b ⇒ bool\"</span>\n<span class=\"w\">    </span><span class=\"kp\">and</span><span class=\"w\"> </span><span class=\"n\">Points2</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"'a set\"</span>\n<span class=\"w\">    </span><span class=\"kp\">and</span><span class=\"w\"> </span><span class=\"n\">Lines2</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"'b set\"</span>\n<span class=\"w\">    </span><span class=\"kp\">and</span><span class=\"w\"> </span><span class=\"n\">incid2</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"'a ⇒ 'b ⇒ bool\"</span>\n<span class=\"w\">    </span><span class=\"kp\">and</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"'a ⇒ 'a\"</span>\n</code></pre></div>",
        "id": 547146630,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1761499741
    },
    {
        "content": "<p>Or more likely you have copy-pasted a  <code>Points2</code> too much in <code>pp_automorphism</code> and it should be:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">locale</span><span class=\"w\">  </span><span class=\"n\">pp_automorphism</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">pp_isomorphism</span><span class=\"w\">  </span><span class=\"n\">Points1</span><span class=\"w\"> </span><span class=\"n\">Lines1</span><span class=\"w\"> </span><span class=\"n\">incid1</span><span class=\"w\"> </span><span class=\"n\">Points1</span><span class=\"w\"> </span><span class=\"n\">Lines1</span><span class=\"w\"> </span><span class=\"n\">incid1</span><span class=\"w\"> </span><span class=\"n\">f</span>\n<span class=\"w\">  </span><span class=\"kp\">for</span><span class=\"w\"> </span><span class=\"n\">Points1</span><span class=\"w\"> </span><span class=\"n\">Lines1</span><span class=\"w\"> </span><span class=\"n\">incid1</span><span class=\"w\"> </span><span class=\"n\">f</span>\n</code></pre></div>",
        "id": 547146756,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1761499861
    },
    {
        "content": "<blockquote>\n<p>Side-question: is there a reason to use <code>sublocale</code> to relate isomorphism to morphism? Reading the tutorial on locales didn't really make this clear to me. </p>\n</blockquote>\n<p>No because <code>pp_isomorphism = pp_morphism</code>. But sometimes two objects that are unrelated in the locale hierarchy behave the same. Then you want to add a sublocale</p>",
        "id": 547146931,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1761500016
    },
    {
        "content": "<p>Thanks for the answer about the sublocale. </p>\n<p>Regarding your comments: The code after your  \"In this\" <em>isn't</em> something that I typed -- it's Isabelle's output in response to what I typed above. When I wrote </p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">locale</span><span class=\"w\">  </span><span class=\"n\">pp_automorphism</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">pp_isomorphism</span><span class=\"w\">  </span><span class=\"n\">Points1</span><span class=\"w\"> </span><span class=\"n\">Lines1</span><span class=\"w\"> </span><span class=\"n\">incid1</span><span class=\"w\"> </span><span class=\"n\">Points1</span><span class=\"w\"> </span><span class=\"n\">Lines1</span><span class=\"w\"> </span><span class=\"n\">incid1</span><span class=\"w\"> </span><span class=\"n\">f</span>\n<span class=\"w\">  </span><span class=\"kp\">for</span><span class=\"w\"> </span><span class=\"n\">Points1</span><span class=\"w\"> </span><span class=\"n\">Lines1</span><span class=\"w\"> </span><span class=\"n\">incid1</span><span class=\"w\"> </span><span class=\"n\">Points2</span><span class=\"w\"> </span><span class=\"n\">Lines2</span><span class=\"w\"> </span><span class=\"n\">incid2</span><span class=\"w\"> </span><span class=\"n\">f</span>\n<span class=\"k\">begin</span>\n<span class=\"k\">end</span>\n</code></pre></div>\n<p>what I was trying to express was that in defining <code>pp_automorphism</code>, I wanted a locale with only three arguments, but then I wanted to use the locale <code>pp_isomorphism</code> using <code>Points1 Lines1 incid1</code> to define the first projective plane, and then use those <strong>same</strong> three things to define the <em>second</em> projective plane. I thought that this was what the <code>for</code> clause would do, but apparently I was mistaken. </p>\n<p>Looking back at it, I can't imagine why I thought this would give me a 3-argument locale... but that's what I really want. After all, we don't say \"consider an automorphism of the group G with itself,\" because an automorphism IS a map from G to itself. I'd like to refer to the projective plane in question only once, and have it serve as both source and target for the morphism if that's possible.</p>\n<p>To put it slightly differently, I'd like the analogue of the Algebra text that says something like this:</p>\n<blockquote>\n<p>A <em>homomorphism</em> from a group G to a group H is a map such that &lt;various conditions&gt;; we denote the set of all such homomorphisms Hom(G, H). </p>\n<p>An <em>automorphism</em> of G is a homomorphism from G to itself; we denote the set of all such automorphisms Aut(G).</p>\n</blockquote>\n<p>For now I'm doing only the first clause of each sentence, of course. (I'd hoped Ballarin's algebra work would give me something to copy,  but unfortunately Jacobson doesn't seem to talk about automorphisms!)</p>",
        "id": 547150125,
        "sender_full_name": "John  Hughes",
        "timestamp": 1761502715
    },
    {
        "content": "<p>You should just remove the stuff ending with a <code>2</code> arguments in the <code>for</code> of:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">locale</span><span class=\"w\">  </span><span class=\"n\">pp_automorphism</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">pp_isomorphism</span><span class=\"w\">  </span><span class=\"n\">Points1</span><span class=\"w\"> </span><span class=\"n\">Lines1</span><span class=\"w\"> </span><span class=\"n\">incid1</span><span class=\"w\"> </span><span class=\"n\">Points1</span><span class=\"w\"> </span><span class=\"n\">Lines1</span><span class=\"w\"> </span><span class=\"n\">incid1</span><span class=\"w\"> </span><span class=\"n\">f</span>\n<span class=\"w\">  </span><span class=\"kp\">for</span><span class=\"w\"> </span><span class=\"n\">Points1</span><span class=\"w\"> </span><span class=\"n\">Lines1</span><span class=\"w\"> </span><span class=\"n\">incid1</span><span class=\"w\"> </span><span class=\"n\">Points2</span><span class=\"w\"> </span><span class=\"n\">Lines2</span><span class=\"w\"> </span><span class=\"n\">incid2</span><span class=\"w\"> </span><span class=\"n\">f</span>\n<span class=\"k\">begin</span>\n<span class=\"k\">end</span>\n</code></pre></div>",
        "id": 547153336,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1761505986
    },
    {
        "content": "<p>Then everything will make sense</p>",
        "id": 547153361,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1761506016
    },
    {
        "content": "<p>I grant you that seems to work, but I don't actually understand why, but I certainly appreciate your telling me how to get to what I needed. For others who might be following, the final text was this:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">locale</span><span class=\"w\">  </span><span class=\"n\">pp_automorphism</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">pp_isomorphism</span><span class=\"w\">  </span><span class=\"n\">Points1</span><span class=\"w\"> </span><span class=\"n\">Lines1</span><span class=\"w\"> </span><span class=\"n\">incid1</span><span class=\"w\">  </span><span class=\"n\">Points1</span><span class=\"w\"> </span><span class=\"n\">Lines1</span><span class=\"w\"> </span><span class=\"n\">incid1</span>\n<span class=\"w\">  </span><span class=\"kp\">for</span><span class=\"w\"> </span><span class=\"n\">Points1</span><span class=\"w\"> </span><span class=\"n\">Lines1</span><span class=\"w\"> </span><span class=\"n\">incid1</span>\n<span class=\"k\">begin</span>\n<span class=\"k\">end</span>\n</code></pre></div>",
        "id": 547175168,
        "sender_full_name": "John  Hughes",
        "timestamp": 1761529541
    },
    {
        "content": "<p>The <code>Points2 Lines2 incid2</code> are not bound</p>",
        "id": 547243704,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1761561864
    },
    {
        "content": "<p>but because of their name, their presence confused you</p>",
        "id": 547243753,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1761561879
    },
    {
        "content": "<p>Right. I actually added a \"assumes\" to say Points2 = Points1, Lines2 = Lines1, incid2 = inclid1, and that resolved the type-inferences the way that I had expected. (It also represents what I'm thinking about when I talk about an automorphism of projective planes!)</p>",
        "id": 547384139,
        "sender_full_name": "John  Hughes",
        "timestamp": 1761605527
    }
]