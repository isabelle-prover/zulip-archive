[
    {
        "content": "<p>I learned about working with custom induction rules not too long ago, and was wondering if it is possible to also define custom case rules? For instance, I'm working with a formula datatype and if x is an object of this type, I can do </p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">proof</span><span class=\"o\">(</span><span class=\"n\">cases</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>to have Isabelle generate all the formula shapes that x can take on. But what if I wanted to split some of the cases even finer, without having to manually do case splitting? Can I define something to do this for instance:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">proof</span><span class=\"o\">(</span><span class=\"n\">cases</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">rule</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">custom_defined_rule</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 486189886,
        "sender_full_name": "Zili Wang",
        "timestamp": 1733351290
    },
    {
        "content": "<p>Yes, the rule needs this shape:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"o\">(</span><span class=\"n\">⋀x1</span><span class=\"w\"> </span><span class=\"n\">x2</span><span class=\"w\"> </span><span class=\"n\">x3.</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Case1</span><span class=\"w\"> </span><span class=\"n\">x1</span><span class=\"w\"> </span><span class=\"n\">x2</span><span class=\"w\"> </span><span class=\"n\">x3</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"n\">&gt;</span><span class=\"w\"> </span><span class=\"n\">P</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"n\">&gt;</span>\n<span class=\"o\">(</span><span class=\"n\">⋀x1</span><span class=\"w\"> </span><span class=\"n\">x2.</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Case2</span><span class=\"w\"> </span><span class=\"n\">x1</span><span class=\"w\"> </span><span class=\"n\">x2</span><span class=\"o\">==</span><span class=\"n\">&gt;</span><span class=\"w\"> </span><span class=\"n\">P</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"n\">&gt;</span><span class=\"w\"> </span><span class=\"n\">P</span>\n</code></pre></div>\n<p>You can prove such a theorem and then use it just like you described earlier</p>",
        "id": 486196428,
        "sender_full_name": "Jan van Brügge",
        "timestamp": 1733354789
    },
    {
        "content": "<p>Thank you very much!</p>",
        "id": 486202053,
        "sender_full_name": "Zili Wang",
        "timestamp": 1733358047
    },
    {
        "content": "<p>(look at <code>case_names</code> to pick the name of the different cases as for example in <code>combine_options_cases</code> from <a href=\"https://isabelle.in.tum.de/library/HOL/HOL/Option.html\">https://isabelle.in.tum.de/library/HOL/HOL/Option.html</a>)</p>",
        "id": 486232661,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1733379007
    }
]