[
    {
        "content": "<p>I'd like to define a type that has a different notion of equality from that automatically produced by a <code>datatype</code> definition. In hopes of building a simple example, making \"A\" and \"B\" be equal, and \"C\" and \"D\" be equal, in an enumerated data type, and everything equal to itself, I tried to mimic the apparent definition of equality on page 91 of the matrix-and-Jordan-form doc, <a href=\"https://www.isa-afp.org/browser_info/current/AFP/Jordan_Normal_Form/document.pdf\">https://www.isa-afp.org/browser_info/current/AFP/Jordan_Normal_Form/document.pdf</a>.</p>\n<p>I wrote this: </p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">theory</span><span class=\"w\"> </span><span class=\"n\">MWE4</span>\n<span class=\"kp\">imports</span><span class=\"w\"> </span><span class=\"n\">Complex_Main</span>\n<span class=\"k\">begin</span>\n\n<span class=\"k\">datatype</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">B</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">C</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">D</span>\n\n<span class=\"k\">instantiation</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"o\">::(</span><span class=\"n\">type</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">equal</span><span class=\"w\"> </span><span class=\"k\">begin</span>\n<span class=\"k\">definition</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">equal_s</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"n\">⇒</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"n\">⇒</span><span class=\"w\"> </span><span class=\"n\">bool</span><span class=\"o\">))</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">(=)</span>\n<span class=\"kn\">instance</span>\n<span class=\"w\">  </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">intro</span><span class=\"o\">-</span><span class=\"k\">classes</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">auto</span><span class=\"w\"> </span><span class=\"n\">simp</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">equal</span><span class=\"o\">-</span><span class=\"n\">s</span><span class=\"o\">-</span><span class=\"k\">def</span><span class=\"o\">)</span>\n<span class=\"k\">end</span>\n\n<span class=\"k\">end</span>\n</code></pre></div>\n<p>If you try this at home, you'll see that I never got a chance to define anything, because on the \"instantiation\" line, I got an error:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"n\">No</span><span class=\"w\"> </span><span class=\"n\">parameters</span><span class=\"w\"> </span><span class=\"kp\">and</span><span class=\"w\"> </span><span class=\"n\">no</span><span class=\"w\"> </span><span class=\"n\">pending</span><span class=\"w\"> </span><span class=\"kn\">instance</span><span class=\"w\"> </span><span class=\"k\">proof</span><span class=\"w\"> </span><span class=\"n\">obligations</span><span class=\"w\"> </span><span class=\"kp\">in</span><span class=\"w\"> </span><span class=\"k\">instantiation</span><span class=\"ow\">.</span>\n</code></pre></div>\n<p>Is this kind of \"I want to redefine equality for my kind of datatype\" thing even possible? Can someone tell me what the error means?</p>",
        "id": 499360258,
        "sender_full_name": "John  Hughes",
        "timestamp": 1739410330
    },
    {
        "content": "<p>I think redefining <code>=</code> is not possible. You could certainly define a different relation.</p>\n<p>See Sec 2.3.1, <a href=\"https://isabelle.in.tum.de/doc/prog-prove.pdf\">https://isabelle.in.tum.de/doc/prog-prove.pdf</a></p>\n<p>specifically, distinctness of constructors</p>",
        "id": 499360780,
        "sender_full_name": "Yong Kiam",
        "timestamp": 1739410688
    },
    {
        "content": "<p>^ and specifically you may be able to quotient under the new relation to get a new type <code>s'</code> that obeys the equality, but I've never tried that... probably need who knows more could help on that</p>",
        "id": 499360998,
        "sender_full_name": "Yong Kiam",
        "timestamp": 1739410851
    },
    {
        "content": "<p>Yeah you are going to have to normalize the type somehow. Either you go for a new equality (see for example <a href=\"https://isabelle.in.tum.de/library/HOL/HOL/Rat.html#Rat.ratrel|const\">https://isabelle.in.tum.de/library/HOL/HOL/Rat.html#Rat.ratrel|const</a>) or for a new type (where you sort the elements in a pair).</p>",
        "id": 499387380,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1739427642
    }
]