[
    {
        "content": "<p>I would like to translate the following type declaration into Isabelle/HOL.</p>",
        "id": 469317624,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1726042412
    },
    {
        "content": "<p><a href=\"/user_uploads/14278/LT2jN_loR97dCM_vSh1niPI2/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/14278/LT2jN_loR97dCM_vSh1niPI2/image.png\" title=\"image.png\"><img data-original-dimensions=\"758x510\" src=\"/user_uploads/thumbnail/14278/LT2jN_loR97dCM_vSh1niPI2/image.png/840x560.webp\"></a></div>",
        "id": 469317642,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1726042417
    },
    {
        "content": "<p>The definitions above serves for evaluating a modal formula in the basic modal language. I defined formula, frame and model in Isabelle as follows. (Is everything good up to now?)</p>",
        "id": 469318194,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1726042522
    },
    {
        "content": "<p>datatype form = VAR \"num\" <br>\n  | FALSE<br>\n  | DISJ \"form\" \"form\"<br>\n  | NOT \"form\"<br>\n  | DIAM \"form\"</p>\n<p>record 'a frame =<br>\n  world :: \"'a ⇒ bool\"<br>\n  rel :: \"'a ⇒ 'a ⇒ bool\"</p>\n<p>record 'a model = \"'a frame\" +<br>\n  valt :: \"num ⇒ 'a ⇒ bool\"</p>",
        "id": 469318203,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1726042524
    },
    {
        "content": "<p>But then I think I get confused on the translation of the \"satis\" predicate. It seems to be a bunch of options. There are primrec, fun and inductive. Is there any consideration that I should take before picking one?</p>",
        "id": 469318720,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1726042614
    },
    {
        "content": "<p>I am attempting to do \"fun\". I wrote:<br>\nfun satis :: \"'a model ⇒ 'a ⇒ form ⇒ bool\" <br>\n  where <br>\n   \"satis M w (VAR p) = M.valt p v ∧ <a href=\"http://M.frame.world\">M.frame.world</a> w<br>\n  | satis M w FALSE  = false\"</p>\n<p>And it already started complaining:<br>\n<a href=\"/user_uploads/14278/JkkrLzdq1PQdUPq9vBr0Rbow/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/14278/JkkrLzdq1PQdUPq9vBr0Rbow/image.png\" title=\"image.png\"><img data-original-dimensions=\"1516x1020\" src=\"/user_uploads/thumbnail/14278/JkkrLzdq1PQdUPq9vBr0Rbow/image.png/840x560.webp\"></a></div>",
        "id": 469319081,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1726042701
    },
    {
        "content": "<p>May I please ask if there is any quick fix? Thanks in advance!</p>",
        "id": 469319127,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1726042720
    },
    {
        "content": "<p>I'm not so familiar with record syntax in Isabelle, but that should be <code>valt M</code></p>",
        "id": 469323441,
        "sender_full_name": "Yong Kiam",
        "timestamp": 1726043440
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"234226\">Yong Kiam</span> <a href=\"#narrow/stream/238552-Beginner-Questions/topic/Defining.20inductive.20predicate.3A.20fun.20vs.20primrec.20vs.20inductive.3F/near/469323441\">said</a>:</p>\n<blockquote>\n<p>I'm not so familiar with record syntax in Isabelle, but that should be <code>valt M</code></p>\n</blockquote>\n<p>Thanks so much! The underscore before disappears.</p>",
        "id": 469333024,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1726045198
    },
    {
        "content": "<p>Now I type <code>(world (frame M))</code> and it does not look correct:<br>\n<a href=\"/user_uploads/14278/LnEpbM3R4MKK7xdPkMcDMBK7/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/14278/LnEpbM3R4MKK7xdPkMcDMBK7/image.png\" title=\"image.png\"><img data-original-dimensions=\"1898x1020\" src=\"/user_uploads/thumbnail/14278/LnEpbM3R4MKK7xdPkMcDMBK7/image.png/840x560.webp\"></a></div>",
        "id": 469333321,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1726045250
    },
    {
        "content": "<p>The \"frame\" is green, and may I please ask a \"human language\" translation of the error message?</p>",
        "id": 469333540,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1726045299
    },
    {
        "content": "<p>= is binding to strongly. Use <code>statis M w ... &lt;--&gt; ...</code> or <code>statis M w ... = (...)</code></p>",
        "id": 469400672,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1726062076
    },
    {
        "content": "<p>And it is False</p>",
        "id": 469400739,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1726062092
    },
    {
        "content": "<p>instead of false</p>",
        "id": 469400752,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1726062096
    },
    {
        "content": "<p>Thanks! I changed it into False and &lt;--&gt;.<br>\n<a href=\"/user_uploads/14278/9p_1fbBJPwuu6SaLZ399UiYX/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/14278/9p_1fbBJPwuu6SaLZ399UiYX/image.png\" title=\"image.png\"><img data-original-dimensions=\"2072x674\" src=\"/user_uploads/thumbnail/14278/9p_1fbBJPwuu6SaLZ399UiYX/image.png/840x560.webp\"></a></div>",
        "id": 469455811,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1726072188
    },
    {
        "content": "<p>Any clue why it thinks \"frame\" is green? M.frame also does not work.</p>",
        "id": 469456149,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1726072236
    },
    {
        "content": "<p>Not obvious from <a href=\"https://isabelle.in.tum.de/doc/isar-ref.pdf\">https://isabelle.in.tum.de/doc/isar-ref.pdf</a> how can we extract fields of a record term.</p>",
        "id": 469456623,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1726072313
    },
    {
        "content": "<p>frame is a type, you cannot use it as a function in a term</p>",
        "id": 469473365,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1726076522
    },
    {
        "content": "<p>I do not even know what you are trying to achieve</p>",
        "id": 469473486,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1726076564
    },
    {
        "content": "<p>I would like the effect to be \"a model consists of a frame and a valuation\". So I should be able to type M.frame to extract the field \"frame\" from \"M\" and then type (M.frame).world to extract the field \"world\" from the frame \"M.frame\". But your comment does give a hint! I have just figured out the type \"model\" will not take \"frame\" as its field. So what I need is just \"world M\". Thank you!</p>",
        "id": 469474269,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1726076828
    },
    {
        "content": "<p><a href=\"/user_uploads/14278/o5ivoncW_2-VuG-gXhYNvHk4/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/14278/o5ivoncW_2-VuG-gXhYNvHk4/image.png\" title=\"image.png\"><img data-original-dimensions=\"2072x674\" src=\"/user_uploads/thumbnail/14278/o5ivoncW_2-VuG-gXhYNvHk4/image.png/840x560.webp\"></a></div>",
        "id": 469476843,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1726077662
    },
    {
        "content": "<p>For the type declaration, I wrote:</p>\n<p>record 'a frame =<br>\nworld :: \"'a ⇒ bool\"<br>\nrel :: \"'a ⇒ 'a ⇒ bool\"</p>\n<p>record 'a model = \"'a frame\" +<br>\nvalt :: \"num ⇒ 'a ⇒ bool\"</p>",
        "id": 469476989,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1726077710
    },
    {
        "content": "<p>The same recipe of writing rel M to be the field \"rel\" of M does not seem to work.</p>",
        "id": 469477194,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1726077789
    },
    {
        "content": "<p>Sorry if it turns out to be stupid, but I am confused again.</p>",
        "id": 469477232,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1726077806
    },
    {
        "content": "<p>It seems that Isabelle does not complain about rel M w v, it is complaining about te quantification.</p>\n<p><a href=\"/user_uploads/14278/gyrgHu8Qbal8tFSaTBTUYuzW/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/14278/gyrgHu8Qbal8tFSaTBTUYuzW/image.png\" title=\"image.png\"><img data-original-dimensions=\"2072x674\" src=\"/user_uploads/thumbnail/14278/gyrgHu8Qbal8tFSaTBTUYuzW/image.png/840x560.webp\"></a></div>",
        "id": 469478695,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1726078397
    },
    {
        "content": "<p>What's wrong here?</p>",
        "id": 469478713,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1726078404
    },
    {
        "content": "<p>add parentheses. And binds too strongly</p>",
        "id": 469479208,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1726078625
    },
    {
        "content": "<p>Thank you for the swift answer, it solves my problem.<br>\n<a href=\"/user_uploads/14278/ojXWcb4uAzgeUhzYehscBM0r/image.png\">image.png</a><br>\nNow Isabelle is happy.</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/14278/ojXWcb4uAzgeUhzYehscBM0r/image.png\" title=\"image.png\"><img data-original-dimensions=\"2072x878\" src=\"/user_uploads/thumbnail/14278/ojXWcb4uAzgeUhzYehscBM0r/image.png/840x560.webp\"></a></div>",
        "id": 469479488,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1726078757
    },
    {
        "content": "<p>(But I feel its strength to this extent is a bit weird.)</p>",
        "id": 469479585,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1726078802
    },
    {
        "content": "<p>Regarding what to choose to use among fun/definition/primrec. I find an answer here:<br>\n<a href=\"https://courses.grainger.illinois.edu/cs576/sp2015/lectures/3-4/04-Isabelle-syntax-2x3.pdf\">https://courses.grainger.illinois.edu/cs576/sp2015/lectures/3-4/04-Isabelle-syntax-2x3.pdf</a> slides 5.</p>",
        "id": 469546525,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1726113140
    },
    {
        "content": "<p>usually definition for stuff that does not recurse, fun for everything else</p>",
        "id": 469747314,
        "sender_full_name": "Jan van Brügge",
        "timestamp": 1726164280
    },
    {
        "content": "<p>there is rarely a reason to use primrec</p>",
        "id": 469747552,
        "sender_full_name": "Jan van Brügge",
        "timestamp": 1726164342
    },
    {
        "content": "<p>Got it. I will just not use it for the foreseeable future then.</p>",
        "id": 469747852,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1726164414
    },
    {
        "content": "<p>Last September, Jan van Brügge answered a question about fun/definition/primrec with the advice \"usually <code>definition</code> for stuff that does not recurse, <code>fun</code> for everything else\". I note from the  Isar reference manual (p. 221) that </p>\n<blockquote>\n<p>Also note that definitional packages like <code>datatype, primrec, fun</code> routinely declare Simplifier rules to the target context, while plain <code>definition</code> is an exception in not declaring anything.</p>\n</blockquote>\n<p>Does this mean that I should be changing</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">definition</span><span class=\"w\"> </span><span class=\"n\">parallel</span><span class=\"o\">::</span><span class=\"s\">\"'l ⇒ 'l ⇒ bool\"</span><span class=\"w\">  </span><span class=\"o\">(</span><span class=\"kp\">infix</span><span class=\"w\"> </span><span class=\"s\">\"||\"</span><span class=\"w\"> </span><span class=\"n\">5</span><span class=\"o\">)</span><span class=\"w\">  </span><span class=\"kp\">where</span>\n<span class=\"w\">  </span><span class=\"s\">\"parallel l m = (if (l ∈ Lines ∧ m ∈ Lines)</span>\n<span class=\"s\">  then l = m ∨ ¬ (∃ P. P ∈ Points ∧ meets P l ∧ meets P m) else undefined)\"</span>\n</code></pre></div>\n<p>to</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">definition</span><span class=\"w\"> </span><span class=\"n\">parallel</span><span class=\"o\">::</span><span class=\"s\">\"'l ⇒ 'l ⇒ bool\"</span><span class=\"w\">  </span><span class=\"o\">(</span><span class=\"kp\">infix</span><span class=\"w\"> </span><span class=\"s\">\"||\"</span><span class=\"w\"> </span><span class=\"n\">5</span><span class=\"o\">)</span><span class=\"w\">  </span><span class=\"kp\">where</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]:</span>\n<span class=\"w\">  </span><span class=\"s\">\"parallel l m = (if (l ∈ Lines ∧ m ∈ Lines)</span>\n<span class=\"s\">  then l = m ∨ ¬ (∃ P. P ∈ Points ∧ meets P l ∧ meets P m) else undefined)\"</span>\n</code></pre></div>\n<p>perhaps? Or is adding non-recursive function-definitions to the simplifier a bad idea in general? Is there any general advice here?</p>",
        "id": 496791720,
        "sender_full_name": "John  Hughes",
        "timestamp": 1738247698
    },
    {
        "content": "<p>Like most things, it depends. If you just want to use the definition as a shorthand, but want to automation to always look under it you can do that however at that point I would probably use <code>abbreviation</code> instead.<br>\nWith a definition you can define theorems about the definition where you can be sure that the automation will actually be able to apply them as there is no way that the definition got expanded too early. If you do want to expand the definition for a theorem, you can just add it to the simpset for that particular spot.</p>",
        "id": 496798546,
        "sender_full_name": "Jan van Brügge",
        "timestamp": 1738249509
    },
    {
        "content": "<p>Remark that I sometimes go the opposite way and I use fun with <code>[simp del]</code> to not automatically get the unfolding</p>",
        "id": 496836005,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1738259827
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">test</span><span class=\"w\"> </span><span class=\"kp\">where</span>\n<span class=\"w\">  </span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"n\">del</span><span class=\"o\">]:</span><span class=\"w\"> </span><span class=\"s\">‹test (a, b) = a + b›</span>\n\n<span class=\"k\">lemmas</span><span class=\"w\"> </span><span class=\"n\">test_def</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">test.simps</span>\n\n\n<span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"s\">‹test (A, 0) = A›</span>\n<span class=\"w\">  </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"n\">add</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">test_def</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 496836245,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1738259902
    },
    {
        "content": "<p>Following up on this, I tried to substitute a definition for a <code>fun</code> and it seems to break my  locale definition. Here's a version with <code>fun</code>, which checks out OK, but if you comment that out and include the <code>definition</code> version, you get a type error. This baffles me (as, frankly, does anything that mentions weak types). </p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">theory</span><span class=\"w\"> </span><span class=\"n\">Affine_test</span>\n<span class=\"w\">  </span><span class=\"kp\">imports</span><span class=\"w\"> </span><span class=\"n\">Complex_Main</span>\n<span class=\"k\">begin</span>\n\n<span class=\"k\">locale</span><span class=\"w\"> </span><span class=\"n\">affine_plane_data</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">  </span><span class=\"kp\">fixes</span><span class=\"w\"> </span><span class=\"n\">Points</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"'p set\"</span><span class=\"w\"> </span><span class=\"kp\">and</span><span class=\"w\"> </span><span class=\"n\">Lines</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"'l set\"</span><span class=\"w\"> </span><span class=\"kp\">and</span><span class=\"w\"> </span><span class=\"n\">meets</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"'p ⇒ 'l ⇒ bool\"</span>\n<span class=\"w\">  </span><span class=\"kp\">fixes</span><span class=\"w\"> </span><span class=\"n\">join</span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"'p ⇒ 'p ⇒ 'l\"</span>\n<span class=\"w\">  </span><span class=\"kp\">fixes</span><span class=\"w\"> </span><span class=\"n\">find_parallel</span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"'l ⇒ 'p ⇒ 'l\"</span>\n<span class=\"k\">begin</span>\n<span class=\"w\">  </span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">parallel</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"'l ⇒ 'l ⇒ bool\"</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"kp\">infix</span><span class=\"w\"> </span><span class=\"s\">\"||\"</span><span class=\"w\"> </span><span class=\"n\">50</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"kp\">where</span>\n<span class=\"w\">  </span><span class=\"s\">\"l || m = (if (l ∈ Lines ∧ m ∈ Lines)</span>\n<span class=\"s\">  then l = m ∨ ¬ (∃ P. P ∈ Points ∧ meets P l ∧ meets P m) else undefined)\"</span>\n\n<span class=\"c\">(* replace the \"fun\" version of \"parallel\" with this one and see the next locale-description fail.*)</span>\n<span class=\"c\">(*</span>\n<span class=\"c\">definition parallel::\"'l ⇒ 'l ⇒ bool\"  (infix \"||\" 5)  where</span>\n<span class=\"c\">  \"parallel l m = (if (l ∈ Lines ∧ m ∈ Lines)</span>\n<span class=\"c\">  then l = m ∨ ¬ (∃ P. P ∈ Points ∧ meets P l ∧ meets P m) else undefined)\"*)</span>\n\n<span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">collinear</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"'p ⇒ 'p ⇒ 'p ⇒ bool\"</span>\n<span class=\"w\">    </span><span class=\"kp\">where</span><span class=\"w\"> </span><span class=\"s\">\"collinear A B C = (if A ∈ Points ∧ B ∈ Points ∧ C ∈ Points</span>\n<span class=\"s\">  then (∃ l. l ∈ Lines ∧ meets A l ∧ meets B l ∧ meets C l) else undefined)\"</span>\n<span class=\"k\">end</span>\n\n<span class=\"k\">locale</span><span class=\"w\"> </span><span class=\"n\">affine_plane</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">    </span><span class=\"n\">affine_plane_data</span><span class=\"w\">  </span><span class=\"o\">+</span>\n<span class=\"w\">    </span><span class=\"kp\">assumes</span>\n<span class=\"w\">    </span><span class=\"n\">a1a</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"⟦P ≠ Q; P ∈ Points; Q ∈ Points⟧ ⟹ join P Q ∈ Lines ∧ meets P (join P Q)  ∧ meets Q (join P Q)\"</span><span class=\"w\"> </span><span class=\"kp\">and</span>\n<span class=\"w\">    </span><span class=\"n\">a1b</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"⟦P ≠ Q; P ∈ Points; Q ∈ Points; meets P m; meets Q m⟧ ⟹ m = join P Q\"</span><span class=\"w\"> </span><span class=\"kp\">and</span>\n<span class=\"w\">    </span><span class=\"n\">a2</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"⟦¬ meets P l; P ∈ Points; l ∈ Lines⟧ ⟹ find_parallel l P ∈ Lines ∧ ( find_parallel l P) || l ∧ meets P (find_parallel l P)\"</span><span class=\"w\"> </span><span class=\"kp\">and</span>\n<span class=\"w\">    </span><span class=\"n\">a3</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"∃P Q R. P ∈ Points ∧ Q ∈ Points ∧ R ∈ Points ∧ P ≠ Q ∧ P ≠ R ∧ Q ≠ R ∧ ¬ (collinear P Q R)\"</span>\n<span class=\"k\">begin</span>\n<span class=\"k\">end</span>\n<span class=\"k\">end</span>\n</code></pre></div>\n<p>Can someone explain this?  And perhaps more usefully, can someone explain how I might work out for myself what's happening in situations like this in the future?</p>",
        "id": 496836254,
        "sender_full_name": "John  Hughes",
        "timestamp": 1738259904
    },
    {
        "content": "<p>It is useful when you want pattern matching</p>",
        "id": 496836290,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1738259920
    },
    {
        "content": "<p><del>I do not see an error, which Isabelle version is that?</del><br>\nI just replace fun by definition and it worked</p>",
        "id": 496836477,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1738259990
    },
    {
        "content": "<p>Copy-paste error:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">parallel</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"'l ⇒ 'l ⇒ bool\"</span><span class=\"w\">   </span><span class=\"o\">(</span><span class=\"kp\">infix</span><span class=\"w\"> </span><span class=\"s\">\"||\"</span><span class=\"w\"> </span><span class=\"n\">50</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"kp\">where</span>\n<span class=\"k\">definition</span><span class=\"w\"> </span><span class=\"n\">parallel</span><span class=\"o\">::</span><span class=\"s\">\"'l ⇒ 'l ⇒ bool\"</span><span class=\"w\">  </span><span class=\"o\">(</span><span class=\"kp\">infix</span><span class=\"w\"> </span><span class=\"s\">\"||\"</span><span class=\"w\"> </span><span class=\"n\">5</span><span class=\"o\">)</span><span class=\"w\">  </span><span class=\"kp\">where</span>\n</code></pre></div>\n<p>50 vs 5</p>",
        "id": 496836885,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1738260099
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"699541\">John  Hughes</span> <a href=\"#narrow/channel/238552-Beginner-Questions/topic/Defining.20inductive.20predicate.3A.20fun.20vs.20primrec.20vs.20inductive.3F/near/496836254\">said</a>:</p>\n<blockquote>\n<p>Can someone explain this?  And perhaps more usefully, can someone explain how I might work out for myself what's happening in situations like this in the future?</p>\n</blockquote>\n<p>I got lucky to see that definition but in general I reduce the term to become as small as possible, here: <code>term ‹f || l ∧ H›</code></p>",
        "id": 496837649,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1738260304
    },
    {
        "content": "<p>Then  from the error message</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"n\">Type</span><span class=\"w\"> </span><span class=\"n\">unification</span><span class=\"w\"> </span><span class=\"n\">failed</span>\n\n<span class=\"n\">Type</span><span class=\"w\"> </span><span class=\"n\">error</span><span class=\"w\"> </span><span class=\"kp\">in</span><span class=\"w\"> </span><span class=\"n\">application</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">incompatible</span><span class=\"w\"> </span><span class=\"n\">operand</span><span class=\"w\"> </span><span class=\"n\">type</span>\n\n<span class=\"n\">Operator</span><span class=\"o\">:</span><span class=\"w\">  </span><span class=\"o\">(||)</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"n n-Type\">'l</span><span class=\"w\"> </span><span class=\"n\">⇒</span><span class=\"w\"> </span><span class=\"n\">bool</span>\n<span class=\"n\">Operand</span><span class=\"o\">:</span><span class=\"w\">   </span><span class=\"n\">l</span><span class=\"w\"> </span><span class=\"n\">∧</span><span class=\"w\"> </span><span class=\"n\">H</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"n\">bool</span>\n</code></pre></div>\n<p>you can see how it is parsed</p>",
        "id": 496837790,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1738260353
    },
    {
        "content": "<p>Actually not a copy-paste error --- the \"definition\" version comes from a different (working!) copy of very similar code, in which I reduced the priority for some reason that presumably felt very good at the time. :)  Presumably there are other differences that made things work in that copy. And it's nice to know that the problem was benign, and simple enough that I could have figured it out myself if I hadn't been spooked by the warning about weak types. </p>\n<p>Thanks!</p>",
        "id": 496842739,
        "sender_full_name": "John  Hughes",
        "timestamp": 1738262066
    }
]