[
    {
        "content": "<p>Hi,<br>\nI wanna define a partial function. It works if I define: </p>\n<div class=\"codehilite\"><pre><span></span><code>definition f :: &quot;nat ⇒ nat option&quot;\nwhere\n&quot;f x = (if x ∈ {1, 2, 3} then Some 0 else None)&quot;\n</code></pre></div>\n<p>But I want to specify the range of the function <code>f</code> is <code>{5,6}</code>, so I defined:</p>\n<div class=\"codehilite\"><pre><span></span><code>definition f :: &quot;nat ⇒ nat option&quot;\nwhere\n&quot;f x = (if x ∈ {1, 2, 3} then (Some y ∈ {5,6}) else None)&quot;\n</code></pre></div>\n<p>It caused the error:</p>\n<div class=\"codehilite\"><pre><span></span><code>Type unification failed: No type arity option :: numeral\n\nType error in application: incompatible operand type\n\nOperator:  (∈) (Some y) :: ??&#39;a option set ⇒ bool\nOperand:   {5, 6} :: ??&#39;b set\n</code></pre></div>\n<p>I understand that it considers the return value of <code>Some y ∈ {5,6} </code> is bool, right?<br>\nSo, how to specify the range of the function <code>f</code>?</p>",
        "id": 216035506,
        "sender_full_name": "Trinh Le Khanh",
        "timestamp": 1604884651
    },
    {
        "content": "<p>On syntax level, you are confusing <code>Some</code> and <code>SOME y. y ∈ {5,6}</code>. What you have should type for <code>Some (SOME y. y ∈ {5,6})</code>.</p>",
        "id": 216046138,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1604901071
    },
    {
        "content": "<p>On the conceptual level, you are not defining what you intend to.</p>\n<p>Assume you fix your definition with <code>Some (SOME y. y ∈ {5,6})</code>. Your function f will be defined by:</p>\n<div class=\"codehilite\"><pre><span></span><code>  f: 1,2, or 3 -&gt; some value of {5, 6}, the same for 1, 2, and 3\n     _               -&gt; None\n</code></pre></div>\n<p>And again, you cannot know if <code>f(1)</code> is equal to 5 or 6. You cannot distinguish this in Isabelle. However, <code>f(1)</code>, <code>f(2)</code>, and <code>f(3)</code> are equal to the same value.</p>",
        "id": 216046293,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1604901313
    },
    {
        "content": "<p>As I understand, <code>SOME y. y ∈ {5, 6}</code> means that the value is 5 or 6. So why we have to put <code>Some</code> before <code>SOME y. y ∈ {5, 6}</code>?</p>",
        "id": 216055420,
        "sender_full_name": "Trinh Le Khanh",
        "timestamp": 1604911271
    },
    {
        "content": "<p><code>Some</code> is the <code>option</code> constructor for your <code>nat option</code> return value.</p>",
        "id": 216055644,
        "sender_full_name": "Fabian Huch",
        "timestamp": 1604911429
    },
    {
        "content": "<p>In<br>\n<code>if x ∈ {1, 2, 3} then PLACEHOLDER else None</code></p>\n<p>None has type <code>nat option</code>. So <code>PLACEHOLDER</code> must have the same type. <code>SOME y. y ∈ {5, 6}</code> has type <code>nat</code>. You need either to convert the <code>nat</code> to <code>nat option</code> by <code>Some</code>. Or change None to something of type <code>nat</code> (like <code>undefined</code> or a default value)</p>",
        "id": 216055845,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1604911520
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"233198\">Mathias Fleury</span> <a href=\"#narrow/stream/238552-Beginner-Questions/topic/Defining.20partial.20functions/near/216055845\">said</a>:</p>\n<blockquote>\n<p>In<br>\n<code>if x ∈ {1, 2, 3} then PLACEHOLDER else None</code></p>\n<p>None has type <code>nat option</code>. So <code>PLACEHOLDER</code> must have the same type. <code>SOME y. y ∈ {5, 6}</code> has type <code>nat</code>. You need either to convert the <code>nat</code> to <code>nat option</code> by <code>Some</code>. Or change None to something of type <code>nat</code> (like <code>undefined</code> or a default value)</p>\n</blockquote>\n<p>It's very clear. Thank you for your explanation.</p>",
        "id": 216056027,
        "sender_full_name": "Trinh Le Khanh",
        "timestamp": 1604911615
    },
    {
        "content": "<p>For the function:</p>\n<div class=\"codehilite\"><pre><span></span><code>definition f :: &quot;nat ⇒ nat option&quot;\nwhere\n&quot;f x = (if x ∈ {1, 2, 3} then Some(SOME y. y ∈ {5, 6}) else None)&quot;\n</code></pre></div>\n<p>I check the range of it like this:</p>\n<div class=\"codehilite\"><pre><span></span><code>lemma &quot;ran f = {5,6}&quot;\n  unfolding f_def ran_def\n  apply auto\n  done\n</code></pre></div>\n<p>And the result is:</p>\n<div class=\"codehilite\"><pre><span></span><code>proof (prove)\ngoal (14 subgoals):\n 1. (SOME y. y = 5 ∨ y = 6) ≠ 5 ⟹ (SOME y. y = 5 ∨ y = 6) = 6\n 2. (SOME y. y = 5 ∨ y = 6) ≠ 5 ⟹ (SOME y. y = 5 ∨ y = 6) = 6\n 3. (SOME y. y = 5 ∨ y = 6) ≠ 5 ⟹ (SOME y. y = 5 ∨ y = 6) = 6\n 4. (SOME y. y = 5 ∨ y = 6) ≠ 5 ⟹ (SOME y. y = 5 ∨ y = 6) = 6\n 5. (SOME y. y = 5 ∨ y = 6) ≠ 5 ⟹ (SOME y. y = 5 ∨ y = 6) = 6\n 6. (SOME y. y = 5 ∨ y = 6) ≠ 5 ⟹ (SOME y. y = 5 ∨ y = 6) = 6\n 7. (SOME y. y = 5 ∨ y = 6) ≠ 5 ⟹ (SOME y. y = 5 ∨ y = 6) = 6\n 8. (SOME y. y = 5 ∨ y = 6) ≠ 5 ⟹ (SOME y. y = 5 ∨ y = 6) = 6\n 9. (SOME y. y = 5 ∨ y = 6) ≠ 5 ⟹ (SOME y. y = 5 ∨ y = 6) = 6\n 10. (SOME y. y = 5 ∨ y = 6) ≠ 5 ⟹ (SOME y. y = 5 ∨ y = 6) = 6\nA total of 14 subgoals...\n</code></pre></div>\n<p>I think that subgoals should be proved by <code>simp</code> because </p>\n<div class=\"codehilite\"><pre><span></span><code>P ⟹ Q ≡ ¬P ∨ Q ≡\n(SOME y. y = 5 ∨ y = 6) = 5 ∨ (SOME y. y = 5 ∨ y = 6) = 6\n</code></pre></div>\n<p>So why this lemma cannot be proved?</p>",
        "id": 216058445,
        "sender_full_name": "Trinh Le Khanh",
        "timestamp": 1604913183
    },
    {
        "content": "<ol>\n<li>you need to help simp, for example with <code> using someI[of \\&lt;open&gt;%y. y \\&lt;in&gt; {5,6}\\&lt;close&gt;, of 5]</code></li>\n<li>your realize that your lemma is wrong, right?</li>\n</ol>",
        "id": 216058960,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1604913521
    },
    {
        "content": "<p>It is wrong due to:</p>\n<p><span class=\"user-mention silent\" data-user-id=\"233198\">Mathias Fleury</span> <a href=\"#narrow/stream/238552-Beginner-Questions/topic/Defining.20partial.20functions/near/216046293\">said</a>:</p>\n<blockquote>\n<p><code>f(1)</code>, <code>f(2)</code>, and <code>f(3)</code> are equal to the same value.</p>\n</blockquote>",
        "id": 216058995,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1604913566
    },
    {
        "content": "<p>I think most of the conversion comes from the fact that you don't understand some. You are confusing it with non-determinism, which is the wrong way of seeing it.</p>\n<p>Hilbert choice takes a predicate as argument. If there is no way to make the predicate true, some non-specified constant is returned. Otherwise, it returns some non-specified constant fulfilling the predicate.</p>\n<p>What does non-specified mean? It means that you cannot know which elements is returned and the element changes every time Isabelle is restarted (roughly speaking).</p>\n<p>What is the difference with non-determinism? Well, the returned is _always_ the same within one Isabelle execution. That means that <code>(SOME y::nat. y = 5 ∨ y = 6)</code> will return the same element as <code>(SOME y::nat. y = 5 ∨ y = 6)</code>, <code>(SOME y::nat. y = 5 ∨ y = 6)</code>, and <code>(SOME y::nat. y = 5 ∨ y = 6)</code>. This is not the same as non-determinsm, where calling the C function <code>rand()</code>, <code>rand()</code>, <code>rand()</code>,  and <code>rand()</code>, can return different values [1].</p>\n<p>What does that mean for your use case? It means that you need to do recursion to be construct the mapping and _exclude the elements mapped so far_. This is also entails that your current approach does not work.</p>\n<p>[1] other examples include file parsing, reading environment values, looking at a thermometer, ...</p>",
        "id": 216061472,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1604915143
    },
    {
        "content": "<p>So, when I use <code>Some</code>, the return values of each running time are different, right?</p>",
        "id": 216064453,
        "sender_full_name": "Trinh Le Khanh",
        "timestamp": 1604917001
    },
    {
        "content": "<p><code>(SOME y::nat. y = 5 ∨ y = 6) = (SOME y::nat. y = 5 ∨ y = 6)</code> is always true, so no.</p>",
        "id": 216065027,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1604917384
    },
    {
        "content": "<p>Unlike a C version like<code>rand() == rand()</code>.</p>",
        "id": 216065077,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1604917423
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"233198\">Mathias Fleury</span> <a href=\"#narrow/stream/238552-Beginner-Questions/topic/Defining.20partial.20functions/near/216058960\">said</a>:</p>\n<blockquote>\n<ol>\n<li>you need to help simp, for example with <code> using someI[of \\&lt;open&gt;%y. y \\&lt;in&gt; {5,6}\\&lt;close&gt;, of 5]</code></li>\n<li>your realize that your lemma is wrong, right?</li>\n</ol>\n</blockquote>\n<p>After applying it, the output is:</p>\n<div class=\"codehilite\"><pre><span></span><code>proof (prove)\nusing this:\n  5 ∈ {5, 6} ⟹ (SOME y. y ∈ {5, 6}) ∈ {5, 6}\n\ngoal (1 subgoal):\n 1. {b. ∃a. (if a ∈ {1, 2, 3} then Some (SOME y. y ∈ {5, 6}) else None) = Some b} = {5, 6}\n</code></pre></div>\n<p>Actually, I don't know what's wrong. Can you explain it?</p>",
        "id": 216067809,
        "sender_full_name": "Trinh Le Khanh",
        "timestamp": 1604919009
    },
    {
        "content": "<p><code>using someI[of \\&lt;open&gt;%y. y \\&lt;in&gt; {5,6}\\&lt;close&gt;, of 5]  apply simp</code></p>",
        "id": 216067920,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1604919090
    },
    {
        "content": "<p>The output is:</p>\n<div class=\"codehilite\"><pre><span></span><code>proof (prove)\ngoal (1 subgoal):\n 1. (SOME y. y = 5 ∨ y = 6) = 5 ∨ (SOME y. y = 5 ∨ y = 6) = 6 ⟹\n    {b. ∃a. (a = Suc 0 ⟶ (SOME y. y = 5 ∨ y = 6) = b) ∧\n            (a = 2 ⟶ (SOME y. y = 5 ∨ y = 6) = b) ∧\n            (a = 3 ⟶ (SOME y. y = 5 ∨ y = 6) = b) ∧ (a = Suc 0 ∨ a = 2 ∨ a = 3)} =\n    {5, 6}\n</code></pre></div>\n<p>it equals to</p>\n<div class=\"codehilite\"><pre><span></span><code> {b. ∃a.(a = Suc 0 ∨ a = 2 ∨ a = 3) ∧ (SOME y. y = 5 ∨ y = 6) = b)} = {5,6}\n</code></pre></div>\n<p>I think it's TRUE.</p>",
        "id": 216072245,
        "sender_full_name": "Trinh Le Khanh",
        "timestamp": 1604921742
    },
    {
        "content": "<p>No it is not.</p>",
        "id": 216072597,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1604921957
    },
    {
        "content": "<p>We know that <code>(SOME y. y = 5 ∨ y = 6)</code> is either 5 or 6, but let's call it <code>N</code>.</p>",
        "id": 216072716,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1604922007
    },
    {
        "content": "<p>your set is:</p>\n<p><code> {b. ∃a.(a = Suc 0 ∨ a = 2 ∨ a = 3) ∧ N = b}</code></p>\n<p>By miniscoping this is the same as:</p>\n<p><code> {b. (∃a.(a = Suc 0 ∨ a = 2 ∨ a = 3) )∧ N = b}</code></p>\n<p>Now, <code>∃a.(a = Suc 0 ∨ a = 2 ∨ a = 3) </code> is true. So we can simplify the set to:</p>\n<p><code> {b. True ∧ N = b}</code></p>\n<p>Therefore, the set is equal to</p>\n<p><code>{N}</code></p>",
        "id": 216072903,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1604922135
    },
    {
        "content": "<p>And <code>{N}</code> is not equal to <code>{5,6}</code></p>",
        "id": 216072955,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1604922174
    },
    {
        "content": "<p>As I said before, the choice value does <em>not change</em>. It is always the same.</p>",
        "id": 216073037,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1604922235
    },
    {
        "content": "<p>As I understand your explanation, <code>y</code> should be <code>{5}</code> or <code>{6}</code> not <code>{5,6}</code> right?<br>\nIf so, it's true for the command:</p>\n<div class=\"codehilite\"><pre><span></span><code>&quot;f x = (if x ∈ {1, 2, 3} then Some(SOME y. y ∈ {5, 6}) else None)&quot;\n</code></pre></div>\n<p>but in the lemma, I check the range of the function. So if <code>y = {5} or {6}</code> so the <code>ran f = {5, 6}</code> right?</p>",
        "id": 216073798,
        "sender_full_name": "Trinh Le Khanh",
        "timestamp": 1604922648
    },
    {
        "content": "<p>Let's be precise first: <code>y</code> is <code>5</code> or <code>6</code>, not <code>{5}</code> or <code>{6}</code></p>",
        "id": 216073882,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1604922707
    },
    {
        "content": "<p>ah yes, my bad, I'm following the set then made this mistake.</p>",
        "id": 216073989,
        "sender_full_name": "Trinh Le Khanh",
        "timestamp": 1604922758
    },
    {
        "content": "<p>Your definition is equivalent to:</p>\n<p><code>f x = (if x ∈ {1, 2, 3} then Some N else None)</code></p>",
        "id": 216073999,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1604922763
    },
    {
        "content": "<p>The <code>N</code> is constant. It has a single value. It does not change never. NEVER.</p>",
        "id": 216074083,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1604922824
    },
    {
        "content": "<p>So <code>ran f = {N}</code>. Either <code>ran f = {5}</code> or <code>ran f = {6}</code> holds. That is all you can say.</p>\n<p>But many things don't hold:  <code>ran f = {5,6}</code> <em>never</em> holds. Same for <code>ran f = {4}</code>.</p>",
        "id": 216074251,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1604922923
    },
    {
        "content": "<p>Maybe this view helps you more: <code>SOME y. y ∈ {5, 6}</code> is a constant. But it is constant only I (technically, the model) knows. But it is only a constant.</p>",
        "id": 216074838,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1604923297
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"233198\">Mathias Fleury</span> <a href=\"#narrow/stream/238552-Beginner-Questions/topic/Defining.20partial.20functions/near/216074251\">said</a>:</p>\n<blockquote>\n<p>So <code>ran f = {N}</code>. Either <code>ran f = {5}</code> or <code>ran f = {6}</code> holds. That is all you can say.</p>\n<p>But many things don't hold:  <code>ran f = {5,6}</code> <em>never</em> holds. Same for <code>ran f = {4}</code>.</p>\n</blockquote>\n<p>Following your explanation, I changed the lemma to:</p>\n<div class=\"codehilite\"><pre><span></span><code>lemma &quot;ran f = {5} ∨ ran f = {6}&quot;\n  unfolding f_def ran_def\n  apply simp\n  done\n</code></pre></div>\n<p>and it's still unprovable</p>\n<div class=\"codehilite\"><pre><span></span><code>Failed to finish proof:\ngoal (1 subgoal):\n 1. {b. ∃a. (a = Suc 0 ⟶ (SOME y. y = 5 ∨ y = 6) = b) ∧\n            (a = 2 ⟶ (SOME y. y = 5 ∨ y = 6) = b) ∧\n            (a = 3 ⟶ (SOME y. y = 5 ∨ y = 6) = b) ∧ (a = Suc 0 ∨ a = 2 ∨ a = 3)} =\n    {5} ∨\n    {b. ∃a. (a = Suc 0 ⟶ (SOME y. y = 5 ∨ y = 6) = b) ∧\n            (a = 2 ⟶ (SOME y. y = 5 ∨ y = 6) = b) ∧\n            (a = 3 ⟶ (SOME y. y = 5 ∨ y = 6) = b) ∧ (a = Suc 0 ∨ a = 2 ∨ a = 3)} =\n    {6}\n</code></pre></div>",
        "id": 216075714,
        "sender_full_name": "Trinh Le Khanh",
        "timestamp": 1604923878
    },
    {
        "content": "<p>In that case, it is provable. simp is not strong enough…</p>",
        "id": 216076055,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1604924125
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>lemma\n  defines  ‹N == (SOME y :: nat. y = 5 ∨ y = 6)›\n  shows\n‹{b::nat. ∃a. (a = Suc 0 ⟶ (SOME y. y = 5 ∨ y = 6) = b) ∧\n            (a = 2 ⟶ (SOME y. y = 5 ∨ y = 6) = b) ∧\n            (a = 3 ⟶ (SOME y. y = 5 ∨ y = 6) = b) ∧ (a = Suc 0 ∨ a = 2 ∨ a = 3)} =\n    {5} ∨\n    {b. ∃a. (a = Suc 0 ⟶ (SOME y. y = 5 ∨ y = 6) = b) ∧\n            (a = 2 ⟶ (SOME y. y = 5 ∨ y = 6) = b) ∧\n            (a = 3 ⟶ (SOME y. y = 5 ∨ y = 6) = b) ∧ (a = Suc 0 ∨ a = 2 ∨ a = 3)} =\n    {6::nat}\n›\n  using someI[of \\&lt;open&gt;%y::nat. y = 5 ∨ y = 6\\&lt;close&gt;, of 5]\n  unfolding N_def[symmetric]\n  by auto\n</code></pre></div>",
        "id": 216076065,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1604924132
    },
    {
        "content": "<p>But it seems went too far from my purpose. I intend to check the range of the function <code>f x = (if x ∈ {1, 2, 3} then Some(SOME y. y ∈ {5, 6}) else None)</code>.<br>\nI mean that if <code>y</code> is either <code>5</code> or <code>6</code>, the range is <code>{5,6}</code></p>",
        "id": 216076563,
        "sender_full_name": "Trinh Le Khanh",
        "timestamp": 1604924506
    },
    {
        "content": "<p>Thee range is the set of all possible values from f</p>",
        "id": 216078016,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1604925378
    },
    {
        "content": "<p>you have either 5 or 6, but not both</p>",
        "id": 216078037,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1604925394
    },
    {
        "content": "<p>let's try to be more formal, maybe that helps.</p>\n<p>There is a model of HOL where N is 5. In that world, <code>ran f = {5}</code>.</p>\n<p>There is another model of HOL where N is 6. In that world, <code>ran f = {6}</code>.</p>\n<p>In Isabelle you are in one of those two models (and you don't know which).</p>",
        "id": 216078385,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1604925623
    },
    {
        "content": "<p>Yes, that's why I tried this lemma: </p>\n<div class=\"codehilite\"><pre><span></span><code>lemma &quot;ran f = {5} ∨ ran f = {6}&quot;\n  unfolding f_def ran_def\n  apply auto\n  done\n</code></pre></div>\n<p>It should be proved without adding <code>defines</code> and <code>shows</code> parts.</p>",
        "id": 216078639,
        "sender_full_name": "Trinh Le Khanh",
        "timestamp": 1604925841
    },
    {
        "content": "<p>Generally, <code>SOME</code> tends to confuse auto and make thinks more complicated</p>",
        "id": 216078861,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1604925988
    },
    {
        "content": "<p>Therefore I replaced the <code>SOME...</code> by <code>N</code> and called auto. The defines just makes that possible</p>",
        "id": 216078907,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1604926046
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"353155\">Trinh Le Khanh</span> <a href=\"#narrow/stream/238552-Beginner-Questions/topic/Defining.20partial.20functions/near/216078639\">said</a>:</p>\n<blockquote>\n<p>It should be proved without adding <code>defines</code> and <code>shows</code> parts.</p>\n</blockquote>\n<p>There is no guarantee on what auto can and cannot ...</p>",
        "id": 216079005,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1604926108
    },
    {
        "content": "<p>Actually you don't need the defines:</p>\n<div class=\"codehilite\"><pre><span></span><code>lemma\n‹{b::nat. ∃a. (a = Suc 0 ⟶ (SOME y. y = 5 ∨ y = 6) = b) ∧\n            (a = 2 ⟶ (SOME y. y = 5 ∨ y = 6) = b) ∧\n            (a = 3 ⟶ (SOME y. y = 5 ∨ y = 6) = b) ∧ (a = Suc 0 ∨ a = 2 ∨ a = 3)} =\n    {5} ∨\n    {b. ∃a. (a = Suc 0 ⟶ (SOME y. y = 5 ∨ y = 6) = b) ∧\n            (a = 2 ⟶ (SOME y. y = 5 ∨ y = 6) = b) ∧\n            (a = 3 ⟶ (SOME y. y = 5 ∨ y = 6) = b) ∧ (a = Suc 0 ∨ a = 2 ∨ a = 3)} =\n    {6::nat}\n›\n  using someI[of \\&lt;open&gt;%y::nat. y = 5 ∨ y = 6\\&lt;close&gt;, of 5]\n  by auto\n</code></pre></div>",
        "id": 216079114,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1604926202
    },
    {
        "content": "<p>Maybe I still confuse about the proving process. I summary that, from the lemma:</p>\n<div class=\"codehilite\"><pre><span></span><code>lemma &quot;ran f = {5} ∨ ran f = {6}&quot;\n  unfolding f_def ran_def\n  apply simp\n</code></pre></div>\n<p>I got the subgoal:</p>\n<div class=\"codehilite\"><pre><span></span><code>goal (1 subgoal):\n 1. {b. ∃a. (a = Suc 0 ⟶ (SOME y. y = 5 ∨ y = 6) = b) ∧\n            (a = 2 ⟶ (SOME y. y = 5 ∨ y = 6) = b) ∧\n            (a = 3 ⟶ (SOME y. y = 5 ∨ y = 6) = b) ∧ (a = Suc 0 ∨ a = 2 ∨ a = 3)} =\n    {5} ∨\n    {b. ∃a. (a = Suc 0 ⟶ (SOME y. y = 5 ∨ y = 6) = b) ∧\n            (a = 2 ⟶ (SOME y. y = 5 ∨ y = 6) = b) ∧\n            (a = 3 ⟶ (SOME y. y = 5 ∨ y = 6) = b) ∧ (a = Suc 0 ∨ a = 2 ∨ a = 3)} =\n    {6}\n</code></pre></div>\n<p>Then, I remove my lemma and create a lemma for this subgoal as you presented. Right?<br>\nIf so, we just prove the subgoal, it doesn't mean that the lemma is proved.</p>",
        "id": 216080999,
        "sender_full_name": "Trinh Le Khanh",
        "timestamp": 1604927260
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>lemma &quot;ran f = {5} ∨ ran f = {6}&quot;\n  unfolding f_def ran_def\n  using someI[of ‹λy::nat. y = 5 ∨ y = 6›, of 5]\n  by auto\n</code></pre></div>",
        "id": 216081201,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1604927386
    },
    {
        "content": "<p>Thank you. I also try <code>using someI[of ‹λy::nat. y ∈ {5,6}›]</code> and it worked. I have one more question, how do you know what rule should be applied for the proving? For instance, <code>someI</code> in this lemma.</p>",
        "id": 216084546,
        "sender_full_name": "Trinh Le Khanh",
        "timestamp": 1604929296
    }
]