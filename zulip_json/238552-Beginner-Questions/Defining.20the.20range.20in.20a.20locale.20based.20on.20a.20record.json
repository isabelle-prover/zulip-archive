[
    {
        "content": "<p>Hi all,</p>\n<p>I am using the combination of record and locale to prove some lemmas. To do so, I have a record with a field that maps (nat x 'a x 'b) =&gt; (nat x 'b), let's call it <em>next</em>, and another field that keeps track of all the inserted ('b)s in another field as a ('b list), let's call it <em>List</em>.<br>\nMy problem is in the locale when I am trying to define the range of <em>next</em>. I tried different combinations for it, for example, set (nat set A x set (List A)). But Isabelle finds my definition a clash of types and says:</p>\n<blockquote>\n<p>Type unification failed: Clash of types \"_ set\" and \"_ list\"</p>\n<p>Type error in application: incompatible operand type</p>\n</blockquote>\n<p>I borrowed this use of record and locale from :<br>\n<a href=\"https://www.isa-afp.org/sessions/finite_automata_hf/#Finite_Automata_HF.html#Finite_Automata_HF.nfa_def|fact\">https://www.isa-afp.org/sessions/finite_automata_hf/#Finite_Automata_HF.html#Finite_Automata_HF.nfa_def|fact</a></p>",
        "id": 486442540,
        "sender_full_name": "Atie Bastan",
        "timestamp": 1733461831
    },
    {
        "content": "<p>My crystal ball says that you are using your <code>List</code> field wrong, sometimes a list and sometimes as a set. Isabelle does not allow mixing</p>",
        "id": 486446062,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1733464615
    },
    {
        "content": "<p>(<code>x ∈ set (List q)</code>, not <code>x ∈ List q</code>)</p>",
        "id": 486446100,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1733464655
    },
    {
        "content": "<p>But: without code, without any precise information, how do you expect any help?</p>",
        "id": 486446203,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1733464716
    },
    {
        "content": "<p>You are right. This is the whole thing:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">record</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n n-Type\">'a</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n n-Type\">'b</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">pda</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">                </span><span class=\"n\">states</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"nat set\"</span>\n<span class=\"w\">                </span><span class=\"n\">init</span><span class=\"w\">   </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"nat set\"</span>\n<span class=\"w\">                </span><span class=\"n\">final</span><span class=\"w\">  </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"nat set\"</span>\n<span class=\"w\">                </span><span class=\"n\">nxt</span><span class=\"w\">    </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"nat ⇒ 'a ⇒ 'b ⇒ (nat × 'b list) set\"</span>\n<span class=\"w\">                </span><span class=\"n\">eps</span><span class=\"w\">    </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"(nat × nat) set\"</span>\n<span class=\"w\">                </span><span class=\"n\">stack</span><span class=\"w\">  </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"'b list\"</span>\n\n\n<span class=\"k\">locale</span><span class=\"w\"> </span><span class=\"n\">pda</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">  </span><span class=\"kp\">fixes</span><span class=\"w\"> </span><span class=\"n\">P</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"('a, 'b) pda\"</span>\n<span class=\"w\">  </span><span class=\"kp\">assumes</span><span class=\"w\"> </span><span class=\"n\">init</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"init P ⊆ states P\"</span>\n<span class=\"w\">      </span><span class=\"kp\">and</span><span class=\"w\"> </span><span class=\"n\">final</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"final P ⊆ states P\"</span>\n<span class=\"w\">      </span><span class=\"kp\">and</span><span class=\"w\"> </span><span class=\"n\">nxt</span><span class=\"o\">:</span><span class=\"w\">   </span><span class=\"s\">\"⋀q a b. q ∈ states P ⟹ ((nxt P) q a b) ⊆ set (states P × set (stack P))\"</span>\n<span class=\"w\">      </span><span class=\"kp\">and</span><span class=\"w\"> </span><span class=\"n\">finite</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"finite (states P)\"</span>\n</code></pre></div>",
        "id": 486446664,
        "sender_full_name": "Atie Bastan",
        "timestamp": 1733464947
    },
    {
        "content": "<p>As the error message, you <code>nxt</code> statement does not type</p>",
        "id": 486446968,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1733465149
    },
    {
        "content": "<p>Is this what you want?</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">locale</span><span class=\"w\"> </span><span class=\"n\">pda</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">  </span><span class=\"kp\">fixes</span><span class=\"w\"> </span><span class=\"n\">P</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"('a, 'b) pda\"</span>\n<span class=\"w\">  </span><span class=\"kp\">assumes</span><span class=\"w\"> </span><span class=\"n\">init</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"init P ⊆ states P\"</span>\n<span class=\"w\">      </span><span class=\"kp\">and</span><span class=\"w\"> </span><span class=\"n\">final</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"final P ⊆ states P\"</span>\n<span class=\"w\">      </span><span class=\"kp\">and</span><span class=\"w\"> </span><span class=\"n\">nxt</span><span class=\"o\">:</span><span class=\"w\">   </span><span class=\"s\">\"⋀q a b. q ∈ states P ⟹ fst ` ((nxt P) q a b) ⊆  (states P)\"</span>\n<span class=\"w\">      </span><span class=\"kp\">and</span><span class=\"w\"> </span><span class=\"n\">nxt'</span><span class=\"o\">:</span><span class=\"w\">   </span><span class=\"s\">\"⋀q a b. q ∈ states P ⟹ q' ∈ snd ` ((nxt P) q a b) ⟹ set q' ⊆ set (stack P)\"</span>\n<span class=\"w\">      </span><span class=\"kp\">and</span><span class=\"w\"> </span><span class=\"n\">finite</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"finite (states P)\"</span>\n</code></pre></div>",
        "id": 486447166,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1733465259
    },
    {
        "content": "<p>Thank you.</p>",
        "id": 486551074,
        "sender_full_name": "Atie Bastan",
        "timestamp": 1733502497
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"233198\">Mathias Fleury</span> <a href=\"#narrow/channel/238552-Beginner-Questions/topic/Defining.20the.20range.20in.20a.20locale.20based.20on.20a.20record/near/486446968\">said</a>:</p>\n<blockquote>\n<p>As the error message, you <code>nxt</code> statement does not type</p>\n</blockquote>\n<p>I want to check my understanding here: nxt doesn't have a type of its own, and whenever I want to construct/define something based on it, I need to decompose it into its first and second elements and define them appropriately.</p>\n<p>Is this correct?</p>",
        "id": 487144924,
        "sender_full_name": "Atie Bastan",
        "timestamp": 1733798641
    },
    {
        "content": "<p><code>nxt</code> has a type: <code>nxt    :: \"nat ⇒ 'a ⇒ 'b ⇒ (nat × 'b list) set\"</code></p>",
        "id": 487166557,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1733809647
    },
    {
        "content": "<p>and your assumptions must be typable w.r.t. that type</p>",
        "id": 487166679,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1733809703
    },
    {
        "content": "<p>and <code>((nxt P) q a b) ⊆ set (states P × set (stack P))</code> does not do it, because <code>⊆</code> does not type in the expression</p>",
        "id": 487166729,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1733809739
    },
    {
        "content": "<p>So I tried to guess what you are trying to write: you want the <code>⊆</code> to apply pointwise in the pair. This is not a usage of <code>⊆</code> that is possible in Isabelle (and not a usage I have never heard in math either). Hence I split the pair.</p>",
        "id": 487167031,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1733809913
    },
    {
        "content": "<p>But, splitting is not needed. It is just needed here because the operator you would need does not exist, but you could also define a pairwise subset and use that instead</p>",
        "id": 487167135,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1733809960
    },
    {
        "content": "<p>thank you.</p>",
        "id": 488016584,
        "sender_full_name": "Atie Bastan",
        "timestamp": 1733893549
    }
]