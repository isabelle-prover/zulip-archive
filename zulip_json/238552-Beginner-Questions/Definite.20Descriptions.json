[
    {
        "content": "<p>Hello!<br>\nI have a question about definite descriptions: Do we need to prove the existence AND uniqueness of a function where we are using definite descriptions (THE)</p>\n<p>For example, if I have <br>\nbegin<br>\ndefinition <br>\n plus where \"plus = (THE f. ∀ x y. f x zero = x ∧ f x (suc y) = suc (f x y))\"<br>\ndefinition<br>\n times where \"times = (THE g. ∀ x y. g x zero = zero ∧ g x (suc y) = plus (g x y) x)\"<br>\nend</p>\n<p>Do I need to prove existence and uniqueness in order to be able to use plus and times anywhere?</p>",
        "id": 288267490,
        "sender_full_name": "Lekhani Ray",
        "timestamp": 1656765008
    },
    {
        "content": "<p>To use it not really, but to prove any properties about it: yes.</p>",
        "id": 288270106,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1656768416
    },
    {
        "content": "<p>Yes. There's also the <code>SOME</code> operator, which only requires existence, but not uniqueness.</p>",
        "id": 288270114,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1656768425
    },
    {
        "content": "<p>Not sure what <code>zero</code> and <code>suc</code> is in your case, but if you can use literally anything other than description operators then you should.</p>",
        "id": 288270135,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1656768478
    },
    {
        "content": "<p>Like, the <code>function</code> package.</p>",
        "id": 288270175,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1656768488
    },
    {
        "content": "<p>Judging from the other thread you opened, it seems that you have some sort of induction principle for your <code>suc</code> and <code>zero</code>. With that, it should be able to use the function package.</p>",
        "id": 288270280,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1656768620
    },
    {
        "content": "<p>But you're probably also going to need distinctness, i.e. that <code>zero ≠ suc x</code> and <code>suc x = suc y ⟹ x = y</code>.</p>",
        "id": 288270310,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1656768688
    },
    {
        "content": "<p>It might be easiest to actually define a function that converts your values into <code>nat</code> and back again and then just define <code>plus</code> and <code>times</code> in terms of the respective operations on <code>nat</code>.</p>",
        "id": 288270375,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1656768775
    },
    {
        "content": "<p>(and derive the recursive equations above as derived theorems)</p>",
        "id": 288270384,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1656768793
    },
    {
        "content": "<p>Or you could define a primitive recursion operator like <code>rec_nat</code> for your values and use that to define everything else.</p>",
        "id": 288270410,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1656768843
    },
    {
        "content": "<p>Then you only have to do the annoying work once. But I think the \"conversion to <code>nat</code>\" function is the conceptually and practically easiest one.</p>",
        "id": 288270449,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1656768865
    }
]