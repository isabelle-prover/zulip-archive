[
    {
        "content": "<p>Hi All, </p>\n<p>I'm looking for a Dict data structure implementation in Isabelle/HOL and found Brian Ford's examples: <a href=\"https://bford.info/isabelle/dict/\">https://bford.info/isabelle/dict/</a>. Unfortunately, they seem to be for an earlier version of Isabelle?</p>\n<p>Does anyone have a better solution for Dicts or tips on how to get the *.thy files to work with Isabelle2023?</p>\n<p>The first two lines generate errors ...</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">theory</span><span class=\"w\"> </span><span class=\"n\">ListDict</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Dict</span><span class=\"o\">:</span>\n<span class=\"n\">types</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n n-Type\">'a</span><span class=\"o\">,</span><span class=\"n n-Type\">'b</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">listdict</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"('a * 'b) list\"</span>\n</code></pre></div>\n<p>Thanks</p>\n<p>David</p>",
        "id": 408080917,
        "sender_full_name": "David Pratten",
        "timestamp": 1702604398
    },
    {
        "content": "<p>Given that the project from Brian Ford's goes back to 2002, I would assume that the version of Isabelle is at most 2002…</p>",
        "id": 408117737,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1702620220
    },
    {
        "content": "<p>But the question is probably what do you want? The abstract representation is just a function to <code>'a option</code></p>",
        "id": 408118264,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1702620429
    },
    {
        "content": "<p>Yes, abstractly, the right abstraction for a map is usually a function <code>'a ⇒ 'b option</code>. There's a bunch of definitions and notation for that in <code>HOL/Map.thy</code>. There is also <code>Library/Finite_Map.thy</code>, which is an explicit type of partial maps with finite support. I personally never needed it (<code>'a ⇒ 'b option</code> was always enough for me), but it might be useful.</p>\n<p>For implementation purposes, the easiest thing you can do is to use <code>map_of :: ('a × 'b) list ⇒ 'a ⇒ 'b option</code>, which turns a list of key–value pairs into such a partial function.</p>\n<p>For more sophisticated applications there's also <code>HOL-Library/Mapping.thy</code>, which provides an abstract datatype for finite maps that can use a variety of different implementations, e.g. list of key–values pairs or red–black trees.</p>",
        "id": 408143200,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1702630999
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"232736\">@Manuel Eberl</span> and <span class=\"user-mention\" data-user-id=\"233198\">@Mathias Fleury</span> perfect. That is exactly what I was looking for!</p>",
        "id": 408257673,
        "sender_full_name": "David Pratten",
        "timestamp": 1702674650
    }
]