[
    {
        "content": "<p>I'm trying to learn some basics of Isabelle/HOL. My understanding is that the typical way of dealing with algebraic objects is with locales. Is it possible to work with infinite families of objects in such a framework? For instance, say I wanted to take the direct product of an infinite family of groups. Can this be done?</p>",
        "id": 419543430,
        "sender_full_name": "James Hanson",
        "timestamp": 1706912063
    },
    {
        "content": "<p>Infinite families are modelled as functions in Isabelle/HOL. As far as I know, group theory in Isabelle is done using typeclasses and combining those is trickier, but if we have some set G whose elements are groups then an infinite family of groups would be a function \"I =&gt; G\", and the semidirect product would be a function (I =&gt; G) =&gt; G. Have a look at HOL/Analysis/Finite_Product_Measure and Infinite_Product_Measure for a (rather involved) example of how this is done in measure theory.</p>",
        "id": 419707725,
        "sender_full_name": "Christian Pardillo Laursen",
        "timestamp": 1707061372
    },
    {
        "content": "<p>Thanks. I looked at <a href=\"https://lawrencecpaulson.github.io/2022/03/23/Locales.html\">Paulson's blog post about type classes vs. locales</a>, but I still don't feel like I understand the practicalities of when to use one or the other.</p>",
        "id": 419712987,
        "sender_full_name": "James Hanson",
        "timestamp": 1707066094
    },
    {
        "content": "<p>Typeclasses are locales tied to types, and so work best when the concept you are trying to define has one correct interpretation for any given type. Locales are more flexible, and generally if you want to reason about carrier sets directly or need compositionality they will let you do a lot more, but without the automation that typeclasses bring.</p>",
        "id": 419747260,
        "sender_full_name": "Christian Pardillo Laursen",
        "timestamp": 1707094391
    },
    {
        "content": "<p>As soon as you want to do proper abstract algebra you need to move away from type classes. Reasoning about e.g. subclasses is usually not possible with type classes. The canonical library for doing abstract algebra in Isabelle/HOL is <code>HOL-Algebra</code>. It's usable, albeit not in the best state I would say.</p>",
        "id": 420632393,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1707477813
    },
    {
        "content": "<p>A student of mine formalised direct products of groups in the AFP a few years ago:<br>\n<a href=\"https://www.isa-afp.org/sessions/finitely_generated_abelian_groups/#IDirProds.html#IDirProds.IDirProds|const\">https://www.isa-afp.org/sessions/finitely_generated_abelian_groups/#IDirProds.html#IDirProds.IDirProds|const</a><br>\n<a href=\"https://www.isa-afp.org/sessions/finitely_generated_abelian_groups/#DirProds.html#DirProds.DirProds|const\">https://www.isa-afp.org/sessions/finitely_generated_abelian_groups/#DirProds.html#DirProds.DirProds|const</a></p>",
        "id": 420632644,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1707477909
    },
    {
        "content": "<p>This uses HOL-Algebra. If you have any questions about this, feel free to ask me.</p>",
        "id": 420632671,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1707477922
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232736\">@Manuel Eberl</span> As I mentioned in another question, I'd like to try to formalize some results about Henkin-Monk-Tarski cylindric algebras both as practice and because I think it might be a decent approach to eventually formalizing some intermediate model theory. Basically my uniformed guess is that Isabelle's automation is going to be a little bit better at handling abstract algebra than formulas defined in terms of syntax directly.</p>\n<p>What would you recommend as the right way to structure that definition? Cylindric algebras are Boolean algebras with extra operators, but they typically have an infinite language (with infinitely many cylindrification operators). Ideally one might want to allow this to vary, but it should also be possible to get away with only having cylindrifications indexed by the natural numbers.</p>\n<p>HOL-Algebra doesn't seem to have Boolean algebras. Would it make sense to try to formalize them in terms of Boolean rings?</p>",
        "id": 420685801,
        "sender_full_name": "James Hanson",
        "timestamp": 1707495587
    },
    {
        "content": "<p>Hm, that's hard to say.</p>",
        "id": 421841400,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1708083176
    },
    {
        "content": "<p>My guess would be that you don't need a lot of ring theory when reasoning about Boolean algebras.</p>",
        "id": 421841429,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1708083189
    },
    {
        "content": "<p>So it might make sense to just do it from scratch.</p>",
        "id": 421841452,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1708083197
    },
    {
        "content": "<p>Maybe also without records. In HOL-Algebra, a ring is a record with a locale containing the ring axioms as assumptions.</p>",
        "id": 421841522,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1708083234
    },
    {
        "content": "<p>Ballarin's approach does use locales but not records, which has some advantages. The main disadvantage is that there isn't an easy way to talk about a ring as a single object (i.e. a function that returns a ring). But if you don't need that then Ballarin's approach is probably nicer.</p>",
        "id": 421841760,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1708083346
    },
    {
        "content": "<p>I.e. a locale that fixes a carrier set and operators 0, 1, +, *, ~ and then assumes that they all behave properly.</p>",
        "id": 421841860,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1708083380
    },
    {
        "content": "<p>Note however that there is already some material on Boolean algebras in the AFP.</p>",
        "id": 421841972,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1708083437
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232736\">@Manuel Eberl</span> I realized that I'm not really understanding the role of schemes in the use of records. In the definition of the direct product of groups why is the output given as a <code>monoid</code> rather than a <code>monoid_scheme</code>?</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">definition</span><span class=\"w\"> </span><span class=\"n\">DirProds</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"('a ‚áí ('b, 'c) monoid_scheme) ‚áí 'a set ‚áí ('a ‚áí 'b) monoid\"</span><span class=\"w\"> </span><span class=\"kp\">where</span>\n<span class=\"w\">  </span><span class=\"s\">\"DirProds G I = ‚¶á carrier = Pi‚á©E I (carrier ‚àò G),</span>\n<span class=\"s\">                   monoid.mult = (Œªx y. restrict (Œªi. x i ‚äó‚áòG i‚áô y i) I),</span>\n<span class=\"s\">                   one = restrict (Œªi. ùü≠‚áòG i‚áô) I ‚¶à\"</span>\n</code></pre></div>",
        "id": 422039363,
        "sender_full_name": "James Hanson",
        "timestamp": 1708200587
    },
    {
        "content": "<p>Oh I think I understand now. The whole point of <code>_schemes</code> is that they're what allow methods of records to be inherited by extension. The reason that <code>DirProds</code> goes from a family of <code>monoid_scheme</code>s to a <code>monoid</code> is that a record extending <code>monoid</code> could include arbitrary data that we don't know how to sensibly interpret in the direct product.</p>\n<p>Am I understanding this correctly?</p>",
        "id": 422050724,
        "sender_full_name": "James Hanson",
        "timestamp": 1708212939
    },
    {
        "content": "<p>Yes, the <code>scheme</code> is just an artefact of how records inheritance work in Isabelle.</p>",
        "id": 422401250,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1708430026
    },
    {
        "content": "<p>In particular you can use a ring as a group and a group as a monoid without having to do any sort of conversion (you then get the multiplicative group).</p>",
        "id": 422401324,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1708430047
    },
    {
        "content": "<p>And it has nothing to do with the algebraic structure known as \"scheme\".</p>",
        "id": 422401372,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1708430068
    }
]