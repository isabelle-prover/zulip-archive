[
    {
        "content": "<p>As the topic says, It is getting annoying that the definition gets unfolded for the IH as well as the goal while performing an induction proof, and this makes the proof more complicated. Is there a way to make simp leave the IH as it is ?</p>",
        "id": 245882991,
        "sender_full_name": "Bilel Ghorbel",
        "timestamp": 1626208233
    },
    {
        "content": "<p>Not applicable in all cases, but you might want to chain the fact in with <code>(simp add: IH)</code> instead of Isar's <code>using</code>/<code>from</code></p>",
        "id": 245883284,
        "sender_full_name": "Jakub Kądziołka",
        "timestamp": 1626208367
    },
    {
        "content": "<p>Let me reformulate the question as such:<br>\nI have a lemma in the form f x = g x<br>\nI  apply induct x, the inductive case is now an implication. I only need to apply simp on the rhs of that implication, applying on the left side will just complicate the proof.</p>",
        "id": 245884011,
        "sender_full_name": "Bilel Ghorbel",
        "timestamp": 1626208743
    },
    {
        "content": "<p>check out the rewrite tactic <a href=\"https://isabelle.in.tum.de/library/HOL/HOL-ex/Rewrite_Examples.html\">https://isabelle.in.tum.de/library/HOL/HOL-ex/Rewrite_Examples.html</a></p>",
        "id": 245884356,
        "sender_full_name": "Kevin Kappelmann",
        "timestamp": 1626208895
    },
    {
        "content": "<p>What I have in mind is</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">proof</span> <span class=\"o\">(</span><span class=\"n\">induct</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n  <span class=\"k\">case</span> <span class=\"o\">(</span><span class=\"n\">Suc</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"c\">(* or whatever *)</span>\n  <span class=\"k\">note</span> <span class=\"n\">IH</span> <span class=\"o\">=</span> <span class=\"n\">this</span>\n  <span class=\"k\">show</span> <span class=\"o\">?</span><span class=\"k\">case</span> <span class=\"k\">by</span> <span class=\"o\">(</span><span class=\"n\">simp</span> <span class=\"n\">add</span><span class=\"o\">:</span> <span class=\"n\">IH</span><span class=\"o\">)</span>\n<span class=\"k\">qed</span> <span class=\"n\">simp</span>\n</code></pre></div>",
        "id": 245884503,
        "sender_full_name": "Jakub Kądziołka",
        "timestamp": 1626208954
    },
    {
        "content": "<p>If I understand you correctly you want to only simplify the conclusion?</p>",
        "id": 245884556,
        "sender_full_name": "Simon Roßkopf",
        "timestamp": 1626208982
    },
    {
        "content": "<p>In that case <code>simp (no_asm_simp)</code> might be what you want</p>",
        "id": 245884841,
        "sender_full_name": "Simon Roßkopf",
        "timestamp": 1626209117
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"302181\">@Simon Roßkopf</span> is there an alternative with auto, so that I could work on different goals simultaneously ?</p>",
        "id": 245902017,
        "sender_full_name": "Bilel Ghorbel",
        "timestamp": 1626218369
    },
    {
        "content": "<p>I don't think so. <code>auto</code> does more than simplification, so I do not think it is possible to operate on just a part of the goal. If you just want to do simplification on multiple subgoals <code>simp_all</code> has the same modifiers(Or use <code>all</code> from Eisbach).</p>\n<p>However, all of this is pretty much a hack imo. Similarly to what Jakub is suggesting, the correct thing would probably be to do a structured proof and only insert the information where you need it. Just throwing everything into the goal and hoping that automation works seems very brittle.</p>",
        "id": 245902961,
        "sender_full_name": "Simon Roßkopf",
        "timestamp": 1626219142
    },
    {
        "content": "<p>It's not really hoping that automation would work. There's just a huge amount of subgoals while the procedure for each is the same. A structured proof would be a huge repeated code.</p>",
        "id": 245903308,
        "sender_full_name": "Bilel Ghorbel",
        "timestamp": 1626219519
    }
]