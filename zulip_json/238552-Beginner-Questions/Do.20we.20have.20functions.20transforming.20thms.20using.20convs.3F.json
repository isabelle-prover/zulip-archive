[
    {
        "content": "<p>Say, I have this thm, may call it Property.simps</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"n\">Property</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"n\">&lt;</span><span class=\"o\">=</span><span class=\"n\">&gt;</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">0</span><span class=\"w\"> </span><span class=\"n\">/\\</span><span class=\"w\"> </span><span class=\"n\">P1</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">\\/</span><span class=\"w\"> </span><span class=\"o\">(?</span><span class=\"n\">a0.</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">a0</span><span class=\"w\"> </span><span class=\"n\">/\\</span><span class=\"w\">  </span><span class=\"n\">P2</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Within my goal, I may have proved something like p:\"Property (n + 1) b\". Then I would like to write <br>\n<code>p[THEN iffD1,THEN ...]</code> where <code>p[THEN iffD1]</code> should give me a local thm<code>(n+1 = 0 /\\ P1 b) \\/ (?a0. R (n+1) a0 /\\  P2 b)</code></p>\n<p>Then I want to apply a conversion on this local thm to eliminate the first conj, since we have <code>\\not n+1 = 0</code>.</p>",
        "id": 489004933,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1734191465
    },
    {
        "content": "<p>In the case that this makes sense, I would like the Isabelle counterpart of such a thing:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"n\">val</span><span class=\"w\"> </span><span class=\"n\">act_by_def</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">new_specification</span><span class=\"o\">(</span>\n<span class=\"w\">    </span><span class=\"s\">\"act_by_def\"</span><span class=\"o\">,</span>\n<span class=\"w\">    </span><span class=\"o\">[</span><span class=\"s\">\"act_by\"</span><span class=\"o\">],</span>\n<span class=\"w\">    </span><span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">&gt;</span><span class=\"w\"> </span><span class=\"n\">SIMP_RULE</span><span class=\"w\"> </span><span class=\"n\">bool_ss</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">SKOLEM_THM</span><span class=\"o\">]</span>\n<span class=\"w\">          </span><span class=\"o\">|</span><span class=\"n\">&gt;</span><span class=\"w\"> </span><span class=\"n\">CONV_RULE</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">RENAME_VARS_CONV</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"s\">\"t\"</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"c\">(* to allow rename of f' back to f *)</span>\n<span class=\"w\">             </span><span class=\"n\">THENC</span><span class=\"w\"> </span><span class=\"n\">BINDER_CONV</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">RENAME_VARS_CONV</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"s\">\"f\"</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"s\">\"g\"</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"s\">\"x\"</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"s\">\"y\"</span><span class=\"o\">])))</span><span class=\"n\">;</span>\n</code></pre></div>",
        "id": 489005039,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1734191526
    },
    {
        "content": "<p>SIMP_RULE takes a simpset and some theorems, and gives a rule (i.e. a function thm -&gt; thm) that manipulates on thms that simps the input theorem using the simpset and the extra thm.</p>",
        "id": 489005102,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1734191593
    },
    {
        "content": "<p>CONV_RULE takes a conv, which only outputs iffs, into a rule that transforms the given thm according to the iff thm produced by the given conv.</p>",
        "id": 489005186,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1734191654
    },
    {
        "content": "<p>Can we write in Isabelle after a THEN to do something similar?</p>",
        "id": 489005208,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1734191685
    },
    {
        "content": "<p>not a then, but:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">context</span>\n<span class=\"w\">  </span><span class=\"kp\">fixes</span><span class=\"w\"> </span><span class=\"n\">P1</span><span class=\"w\"> </span><span class=\"n\">P2</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">‹nat ⇒ bool›</span><span class=\"w\"> </span><span class=\"kp\">and</span>\n<span class=\"w\">    </span><span class=\"n\">R</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">‹nat ⇒ nat ⇒ bool›</span>\n<span class=\"k\">begin</span>\n<span class=\"k\">definition</span><span class=\"w\"> </span><span class=\"n\">Property</span><span class=\"w\"> </span><span class=\"kp\">where</span>\n<span class=\"s\">‹Property a b ⟷ (a = 0 ∧ P1 b) ∨ (∃a0. R a a0 ∧  P2 b)›</span>\n\n<span class=\"kt\">thm</span><span class=\"w\"> </span><span class=\"n\">Property_def</span><span class=\"o\">[</span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"s\">‹Suc n›</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">simplified</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 489006508,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1734192749
    },
    {
        "content": "<p>Aha that is the sort of thing I want. Although less flexible, this already helps a lot!</p>",
        "id": 489017530,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1734202244
    }
]