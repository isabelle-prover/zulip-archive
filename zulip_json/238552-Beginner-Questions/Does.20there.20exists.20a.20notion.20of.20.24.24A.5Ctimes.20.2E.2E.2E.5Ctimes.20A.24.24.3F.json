[
    {
        "content": "<p>I would like to talk about the product of n-copies of the same set. i.e. <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><mo>×</mo><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><mo>×</mo><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">A\\times ...\\times A</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6667em;vertical-align:-0.0833em;\"></span><span class=\"mord\">...</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">A</span></span></span></span>. I think this can be done with lists.</p>\n<p>I can do something like:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">definition</span><span class=\"w\"> </span><span class=\"n\">n_fold_prod</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"nat ⇒ 'a set ⇒ 'a list set\"</span>\n<span class=\"w\">  </span><span class=\"kp\">where</span>\n<span class=\"s\">\"n_fold_prod n A = {as . length as = n ∧ (∀a. a ∈ set as ⟶ a ∈ A)}\"</span>\n\n<span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">finite_n_fold_prod</span><span class=\"w\"> </span><span class=\"o\">:</span>\n<span class=\"w\">  </span><span class=\"kp\">assumes</span><span class=\"w\"> </span><span class=\"s\">\"finite A\"</span>\n<span class=\"w\">  </span><span class=\"kp\">shows</span><span class=\"w\"> </span><span class=\"s\">\"finite (n_fold_prod n A)\"</span>\n</code></pre></div>\n<p>But I think it would be a common thing. Does it already exist somewhere?</p>\n<p>Thanks!</p>",
        "id": 485578909,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1733131519
    },
    {
        "content": "<p>I think the standard way of doing this is PiE from FuncSet.thy<br>\nThe product you're wanting is</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">abbreviation</span><span class=\"w\"> </span><span class=\"s\">\"n_fold_prod (n :: nat) A ≡ Pi⇩E {0..n} (λ_. A)\"</span>\n\n<span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">finite_n_fold_prod</span><span class=\"w\"> </span><span class=\"o\">:</span>\n<span class=\"w\">  </span><span class=\"kp\">assumes</span><span class=\"w\"> </span><span class=\"s\">\"finite A\"</span>\n<span class=\"w\">  </span><span class=\"kp\">shows</span><span class=\"w\"> </span><span class=\"s\">\"finite (n_fold_prod n A)\"</span>\n<span class=\"w\">  </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">rule</span><span class=\"w\"> </span><span class=\"n\">finite_PiE;</span><span class=\"w\"> </span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"n\">add</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">assms</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 485591914,
        "sender_full_name": "Christian Pardillo Laursen",
        "timestamp": 1733135586
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"361261\">Christian Pardillo Laursen</span> <a href=\"#narrow/channel/238552-Beginner-Questions/topic/Does.20there.20exists.20a.20notion.20of.20.24.24A.5Ctimes.20.2E.2E.2E.5Ctimes.20A.24.24.3F/near/485591914\">said</a>:</p>\n<blockquote>\n<p>I think the standard way of doing this is PiE from FuncSet.thy<br>\nThe product you're wanting is</p>\n<p><div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">abbreviation</span><span class=\"w\"> </span><span class=\"s\">\"n_fold_prod (n :: nat) A ≡ Pi⇩E {0..n} (λ_. A)\"</span>\n\n<span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">finite_n_fold_prod</span><span class=\"w\"> </span><span class=\"o\">:</span>\n<span class=\"w\">  </span><span class=\"kp\">assumes</span><span class=\"w\"> </span><span class=\"s\">\"finite A\"</span>\n<span class=\"w\">  </span><span class=\"kp\">shows</span><span class=\"w\"> </span><span class=\"s\">\"finite (n_fold_prod n A)\"</span>\n<span class=\"w\">  </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">rule</span><span class=\"w\"> </span><span class=\"n\">finite_PiE;</span><span class=\"w\"> </span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"n\">add</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">assms</span><span class=\"o\">)</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Great! We even have indexed product in general. Thanks and lot and this is exactly what I want.</p>",
        "id": 485592540,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1733135772
    }
]