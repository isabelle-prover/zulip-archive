[
    {
        "content": "<p>When dealing with custom termination proofs I tried using the \"size\" function, which counts the size of a datatype instance but not the things in it. I noticed this size function is also generated for each inductive type it seems? But then you need to supply a size function for the element type. This is okay but gets a bit annoying for nested types, such as nat list list. Is there also a version of \"size_list\" or maybe a typeclass that, pardon my naivety, does the obvious thing? So in this case I'd expect this naive_size function to also apply the proper size function for the inner type. So for the type nat list list, it would sum the sizes of all inner lists together, I think.</p>",
        "id": 354432125,
        "sender_full_name": "Bob Rubbens",
        "timestamp": 1682781611
    },
    {
        "content": "<p>Or maybe the following question is better: what's the idiomatic way to write down a decreases relation? What form should simp rules added to \"termination_simp\" have? (Because the way I'm writing them now, with \"size\" and \"size_list size_some_type\", they don't seem to compose very well with the termination proofs)</p>",
        "id": 354456640,
        "sender_full_name": "Bob Rubbens",
        "timestamp": 1682785330
    },
    {
        "content": "<p>I don't think something like this exists. I can see that it might be useful in some cases, but it does seem a bit ‘special purpose’. But I'm not an expert on datatypes, so it's possible that the thing you're looking for does exists somewhere and I just cannot find it.</p>\n<p>You can create a typeclass of the form that you were suggesting quite easily, but of course you'll have to do all the instantiations by hand…</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">class</span><span class=\"w\"> </span><span class=\"n\">full_size</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">  </span><span class=\"kp\">fixes</span><span class=\"w\"> </span><span class=\"n\">full_size</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"'a ⇒ nat\"</span>\n\n<span class=\"k\">instantiation</span><span class=\"w\"> </span><span class=\"n\">nat</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"n\">full_size</span>\n<span class=\"k\">begin</span>\n<span class=\"k\">definition</span><span class=\"w\"> </span><span class=\"s\">\"full_size (n :: nat) = n\"</span>\n<span class=\"kn\">instance</span><span class=\"w\"> </span><span class=\"ow\">..</span>\n<span class=\"k\">end</span>\n\n<span class=\"k\">instantiation</span><span class=\"w\"> </span><span class=\"n\">list</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">full_size</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">full_size</span>\n<span class=\"k\">begin</span>\n<span class=\"k\">definition</span><span class=\"w\"> </span><span class=\"s\">\"full_size = size_list full_size\"</span>\n<span class=\"kn\">instance</span><span class=\"w\"> </span><span class=\"ow\">..</span>\n<span class=\"k\">end</span>\n\n<span class=\"kt\">value</span><span class=\"w\"> </span><span class=\"s\">\"full_size [1,2,3::nat]\"</span>\n</code></pre></div>",
        "id": 356356946,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1683398907
    },
    {
        "content": "<p>That's too bad! I ended writing up small size functions for each of the datatypes where it mattered, e.g. \"size_clause\", \"size_formula\", etc. At least they were easy to write that way</p>",
        "id": 356363375,
        "sender_full_name": "Bob Rubbens",
        "timestamp": 1683402447
    }
]