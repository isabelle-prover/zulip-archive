[
    {
        "content": "<p>I have the following two locales</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">locale</span> <span class=\"n\">comp_fun_commute_on</span> <span class=\"o\">=</span>\n  <span class=\"kp\">fixes</span> <span class=\"n\">S</span>\n  <span class=\"kp\">fixes</span> <span class=\"n\">f</span>\n  <span class=\"kp\">assumes</span> <span class=\"s\">\"x ∈ S ==&gt; y ∈ S ==&gt; f y o f x = f x o f y\"</span>\n<span class=\"k\">begin</span>\n<span class=\"ow\">...</span>\n<span class=\"k\">end</span>\n\n<span class=\"k\">locale</span> <span class=\"n\">comp_fun_commute</span> <span class=\"o\">=</span>\n  <span class=\"kp\">fixes</span> <span class=\"n\">f</span>\n  <span class=\"kp\">assumes</span> <span class=\"s\">\"f y o f x = f x o f y\"</span>\n<span class=\"k\">begin</span>\n\n<span class=\"kn\">sublocale</span> <span class=\"n\">comp_fun_commute_on_UNIV</span><span class=\"o\">?:</span> <span class=\"n\">comp_fun_commute_on</span> <span class=\"n\">UNIV</span> <span class=\"n\">f</span>\n  <span class=\"k\">by</span> <span class=\"ow\">...</span>\n\n<span class=\"k\">end</span>\n\n<span class=\"kn\">lemma</span> <span class=\"o\">(</span><span class=\"kp\">in</span> <span class=\"n\">comp_fun_commute_on</span><span class=\"o\">)</span> <span class=\"n\">comp_comp_fun_commute_on</span><span class=\"o\">:</span>\n  <span class=\"s\">\"range g ⊆ S ⟹ comp_fun_commute_on S (f o g)\"</span>\n  <span class=\"k\">by</span> <span class=\"ow\">...</span>\n\n<span class=\"kn\">lemma</span> <span class=\"o\">(</span><span class=\"kp\">in</span> <span class=\"n\">comp_fun_commute</span><span class=\"o\">)</span> <span class=\"n\">comp_comp_fun_commute</span><span class=\"o\">:</span>\n   <span class=\"s\">\"comp_fun_commute (f o g)\"</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>As you can see the second locale is a specialised version of the first one where the carrier set is the universe. I want two separate locales since I can remove the assumptions of the form <code>S \\&lt;subseteq&gt; UNIV</code> and <code>x ∈ UNIV</code> in <code>comp_fun_commute</code> and to maintain backwards compatability.<br>\nConceptually, I would like to prove the last lemma by applying the introduction rule <code>comp_fun_commute_on UNIV f ==&gt; comp_fun_commute f</code>  but I don't have this lemma yet. Do I have to prove that or is there any way to structure the locales differently such that it reflects the fact that <code>comp_fun_commute_on UNIV f = comp_fun_commute f</code>?</p>",
        "id": 225282470,
        "sender_full_name": "Lukas Stevens",
        "timestamp": 1612521221
    },
    {
        "content": "<p>Hm, you can do <code>sublocale cfc_on: comp_fun_commute_on UNIV f</code> in <code>comp_fun_commute</code>.</p>",
        "id": 225286094,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1612523651
    },
    {
        "content": "<p>I think there's also the <code>rewrites</code> argument for <code>sublocale</code> that allows you to perform some simplifications on the theorems you get out of the interpretation to get rid of things like <code>x ∈ UNIV</code>.</p>",
        "id": 225286132,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1612523686
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232736\">Manuel Eberl</span> <a href=\"#narrow/stream/238552-Beginner-Questions/topic/Equivalent.20locales/near/225286094\">said</a>:</p>\n<blockquote>\n<p>Hm, you can do <code>sublocale cfc_on: comp_fun_commute_on UNIV f</code> in <code>comp_fun_commute</code>.</p>\n</blockquote>\n<p>That is already in the code sample <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 225286234,
        "sender_full_name": "Lukas Stevens",
        "timestamp": 1612523763
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232736\">Manuel Eberl</span> <a href=\"#narrow/stream/238552-Beginner-Questions/topic/Equivalent.20locales/near/225286132\">said</a>:</p>\n<blockquote>\n<p>I think there's also the <code>rewrites</code> argument for <code>sublocale</code> that allows you to perform some simplifications on the theorems you get out of the interpretation to get rid of things like <code>x ∈ UNIV</code>.</p>\n</blockquote>\n<p>I am not really sure how that rewrites thing works. Is it just <code>rewrites \"x ∈ UNIV ≡ True\"</code>?</p>",
        "id": 225286311,
        "sender_full_name": "Lukas Stevens",
        "timestamp": 1612523828
    },
    {
        "content": "<p>isn't your problem a pure typing problem?</p>",
        "id": 225286317,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1612523835
    },
    {
        "content": "<p><code>g</code> has the wrong type in your second lemma</p>",
        "id": 225286347,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1612523856
    },
    {
        "content": "<p>Baring copy-and-paste mistakes, it typechecks</p>",
        "id": 225286428,
        "sender_full_name": "Lukas Stevens",
        "timestamp": 1612523915
    },
    {
        "content": "<p>Is that an option?</p>\n<div class=\"codehilite\"><pre><span></span><code>locale comp_fun_commute = comp_fun_commute_on UNIV f\n for f\n</code></pre></div>",
        "id": 225286441,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1612523937
    },
    {
        "content": "<p>Then you will have the assumptions of the form <code>x ∈ UNIV</code> in the locale conclusions.</p>",
        "id": 225286461,
        "sender_full_name": "Lukas Stevens",
        "timestamp": 1612523964
    },
    {
        "content": "<p>And the locale assumption is <code>x ∈ UNIV ==&gt; y ∈ UNIV ==&gt; f y o f x = f x o f y</code> instead of <code>f y o f x = f x o f y</code>.</p>",
        "id": 225286541,
        "sender_full_name": "Lukas Stevens",
        "timestamp": 1612524010
    },
    {
        "content": "<p>In this case that wouldn't be so bad but if the equivalence of the locales would be non-trivial then you wouldn't want to do that.</p>",
        "id": 225286586,
        "sender_full_name": "Lukas Stevens",
        "timestamp": 1612524049
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"233155\">Lukas Stevens</span> <a href=\"#narrow/stream/238552-Beginner-Questions/topic/Equivalent.20locales/near/225286461\">said</a>:</p>\n<blockquote>\n<p>Then you will have the assumptions of the form <code>x ∈ UNIV</code> in the locale conclusions.</p>\n</blockquote>\n<p>This would break backwards-compatability as well.</p>",
        "id": 225286727,
        "sender_full_name": "Lukas Stevens",
        "timestamp": 1612524154
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"233155\">Lukas Stevens</span> <a href=\"#narrow/stream/238552-Beginner-Questions/topic/Equivalent.20locales/near/225286311\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"232736\">Manuel Eberl</span> <a href=\"#narrow/stream/238552-Beginner-Questions/topic/Equivalent.20locales/near/225286132\">said</a>:</p>\n<blockquote>\n<p>I think there's also the <code>rewrites</code> argument for <code>sublocale</code> that allows you to perform some simplifications on the theorems you get out of the interpretation to get rid of things like <code>x ∈ UNIV</code>.</p>\n</blockquote>\n<p>I am not really sure how that rewrites thing works. Is it just <code>rewrites \"x ∈ UNIV ≡ True\"</code>?</p>\n</blockquote>\n<p>No idea. It's probably documented somewhere. Or look at how it is used in the distribution. I never really used it myself.</p>",
        "id": 225287548,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1612524769
    },
    {
        "content": "<p>Isn't the problem that locales don't express what you want?</p>",
        "id": 225287761,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1612524896
    },
    {
        "content": "<p>From what I understand, locales instantiation is done in the metalogic, so there is no theorem corresponding to the sublocale.</p>",
        "id": 225287931,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1612525041
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"233198\">Mathias Fleury</span> <a href=\"#narrow/stream/238552-Beginner-Questions/topic/Equivalent.20locales/near/225287761\">said</a>:</p>\n<blockquote>\n<p>Isn't the problem that locales don't express what you want?</p>\n</blockquote>\n<p>Yeah, it's possible that you can't express that with locales.</p>",
        "id": 225287937,
        "sender_full_name": "Lukas Stevens",
        "timestamp": 1612525046
    },
    {
        "content": "<p>Hm, <code>rewrites \"(A \\&lt;subseteq&gt; UNIV ==&gt; PROP P) ≡ PROP P\"</code> does not work.</p>",
        "id": 225292725,
        "sender_full_name": "Lukas Stevens",
        "timestamp": 1612528418
    },
    {
        "content": "<p>Seems to be a problem with the prop thing.</p>",
        "id": 225293517,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1612528992
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">axiomatization</span> <span class=\"n\">P</span> <span class=\"o\">::</span> <span class=\"s\">\"'a ⇒ bool\"</span>\n\n<span class=\"k\">locale</span> <span class=\"n\">foo</span> <span class=\"o\">=</span>\n  <span class=\"kp\">fixes</span> <span class=\"n\">A</span> <span class=\"o\">::</span> <span class=\"s\">\"'a set\"</span>\n<span class=\"k\">begin</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">bar</span><span class=\"o\">:</span> <span class=\"s\">\"X ⊆ A ⟹ P X\"</span>\n  <span class=\"gr\">sorry</span>\n\n<span class=\"k\">end</span>\n\n<span class=\"k\">locale</span> <span class=\"n\">bar</span>\n<span class=\"k\">begin</span>\n\n<span class=\"kn\">sublocale</span> <span class=\"n\">foo</span> <span class=\"n\">UNIV</span> <span class=\"n\">rewrites</span> <span class=\"s\">\"Y ⊆ UNIV ≡ True\"</span> <span class=\"kp\">and</span> <span class=\"s\">\"(True ⟹ PROP Q) ≡ PROP Q\"</span>\n  <span class=\"k\">by</span> <span class=\"n\">auto</span>\n</code></pre></div>",
        "id": 225293539,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1612529013
    },
    {
        "content": "<p>If you replace the second <code>rewrites</code> rule with <code>(True ⟹ Q) ≡ Trueprop Q</code> it works. But of course that will not be enough for rules with several implications.</p>",
        "id": 225293611,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1612529057
    },
    {
        "content": "<p>No idea what's going on here. Might want to ask on the mailing list.</p>",
        "id": 225293627,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1612529070
    }
]