[
    {
        "content": "<p>I've started to play around with code generation, targeting OCaml for now. When I export a function with a <code>nat</code> argument, I'm only able to use that function by building up a <code>nat</code> value manually, e.g. <code>Suc (Suc (Suc Zero_nat))</code>.</p>\n<p>Is there any trick to being able to use numerals directly?</p>",
        "id": 298303887,
        "sender_full_name": "Alex Weisberger",
        "timestamp": 1662947032
    },
    {
        "content": "<p>I have also been looking on how to do this a while ago. Have a look at <a href=\"https://isabelle.in.tum.de/doc/codegen.pdf#page=41\">section 7.3</a> of <a href=\"https://isabelle.in.tum.de/doc/codegen.pdf\">Code generation for Isabelle/HOL theories</a>.</p>\n<p>You can either import <code>HOL-Library.Code_Binary_Nat</code>, which will use a binary representation for natural numbers instead of a unary one, or you can also import <code>HOL-Library.Code_Target_Nat</code>, where if you are using OCaml, natural numbers will be represented by OCaml's Zarith library.</p>",
        "id": 298536946,
        "sender_full_name": "Seung Hoon Park",
        "timestamp": 1663058271
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"459086\">Alex Weisberger</span> has marked this topic as unresolved.</p>",
        "id": 298892663,
        "sender_full_name": "Notification Bot",
        "timestamp": 1663208893
    },
    {
        "content": "<p>I'm running into an error when doing this. I imported <code>\"HOL-Library.Code_Target_Nat\"</code> and get this error on <code>export_code</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"s\">\"Nat.zero_nat_inst.zero_nat\"</span><span class=\"w\"> </span><span class=\"kp\">is</span><span class=\"w\"> </span><span class=\"n\">not</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">constructor</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">on</span><span class=\"w\"> </span><span class=\"n\">left</span><span class=\"w\"> </span><span class=\"n\">hand</span><span class=\"w\"> </span><span class=\"n\">side</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">equation</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"kp\">in</span><span class=\"w\"> </span><span class=\"kn\">theorem</span><span class=\"o\">:</span><span class=\"w\"></span>\n<span class=\"n\">bevalf</span><span class=\"w\"> </span><span class=\"n\">zero_nat_inst.zero_nat</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">t</span><span class=\"w\"> </span><span class=\"n\">â‰¡</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">t</span><span class=\"w\"></span>\n</code></pre></div>\n<p>In the documentation it says: \"Pattern matching with 0 / Suc is eliminated by a preprocessor.\"</p>\n<p>I'm using 0 as a constructor in a function.</p>",
        "id": 298892887,
        "sender_full_name": "Alex Weisberger",
        "timestamp": 1663209090
    }
]