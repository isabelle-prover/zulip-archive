[
    {
        "content": "<p>I am trying to derive an instance of <code>proper_interval</code> for a custom <code>variable</code> type. However, Isabelle fails to refined a pending goal in the instance proof:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">type_synonym</span><span class=\"w\"> </span><span class=\"n\">name</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">string</span>\n<span class=\"k\">datatype</span><span class=\"w\"> </span><span class=\"n\">variable</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">varname</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Var</span><span class=\"w\"> </span><span class=\"n\">name</span>\n\n<span class=\"k\">instantiation</span><span class=\"w\"> </span><span class=\"n\">variable</span><span class=\"o\">::</span><span class=\"n\">ord</span><span class=\"w\"> </span><span class=\"k\">begin</span>\n<span class=\"w\">  </span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">less_eq_variable</span><span class=\"o\">::</span><span class=\"s\">\"variable ⇒ variable ⇒ bool\"</span><span class=\"w\"> </span><span class=\"kp\">where</span>\n<span class=\"w\">    </span><span class=\"s\">\"less_eq_variable (variable.Var x) (variable.Var y) = (String.implode x ≤ String.implode y)\"</span>\n\n<span class=\"w\">  </span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">less_variable</span><span class=\"o\">::</span><span class=\"s\">\"variable ⇒ variable ⇒ bool\"</span><span class=\"w\"> </span><span class=\"kp\">where</span>\n<span class=\"w\">    </span><span class=\"s\">\"less_variable (variable.Var x) (variable.Var y) = (String.implode x &lt; String.implode y)\"</span>\n<span class=\"kn\">instance</span><span class=\"w\"> </span><span class=\"k\">proof</span>\n<span class=\"k\">qed</span>\n<span class=\"k\">end</span>\n\n<span class=\"k\">instantiation</span><span class=\"w\"> </span><span class=\"n\">variable</span><span class=\"o\">::</span><span class=\"n\">proper_interval</span><span class=\"w\"> </span><span class=\"k\">begin</span>\n<span class=\"w\">  </span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">not_adj</span><span class=\"o\">::</span><span class=\"s\">\"variable ⇒ variable ⇒ bool\"</span><span class=\"w\"> </span><span class=\"kp\">where</span>\n<span class=\"w\">    </span><span class=\"s\">\"not_adj (variable.Var x) (variable.Var y) = (y ≠ (x @ [CHR 0x00]))\"</span>\n\n<span class=\"w\">  </span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">proper_interval_variable</span><span class=\"o\">::</span><span class=\"s\">\"variable proper_interval\"</span><span class=\"w\"> </span><span class=\"kp\">where</span>\n<span class=\"w\">    </span><span class=\"s\">\"proper_interval_variable None None = True\"</span>\n<span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"s\">\"proper_interval_variable None (Some (variable.Var x)) = (x ≠ [])\"</span>\n<span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"s\">\"proper_interval_variable (Some x) None = True\"</span>\n<span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"s\">\"proper_interval_variable (Some x) (Some y) = (less x y ∧ not_adj x y)\"</span>\n<span class=\"kn\">instance</span><span class=\"w\"> </span><span class=\"k\">proof</span>\n<span class=\"w\">  </span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"s\">\"proper_interval None None = True\"</span>\n<span class=\"k\">qed</span>\n<span class=\"k\">end</span>\n</code></pre></div>\n<p>Another attempt:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">instantiation</span><span class=\"w\"> </span><span class=\"n\">variable</span><span class=\"o\">::</span><span class=\"n\">proper_interval</span><span class=\"w\"> </span><span class=\"k\">begin</span>\n<span class=\"w\">  </span><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">proper_interval_variable</span><span class=\"o\">::</span><span class=\"s\">\"variable proper_interval\"</span><span class=\"w\"> </span><span class=\"kp\">where</span>\n<span class=\"w\">    </span><span class=\"s\">\"proper_interval_variable None None = True\"</span>\n<span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"s\">\"proper_interval_variable None (Some (variable.Var x)) = (x ≠ [])\"</span>\n<span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"s\">\"proper_interval_variable (Some x) None = True\"</span>\n<span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"s\">\"proper_interval_variable (Some (variable.Var x)) (Some (variable.Var y)) =</span>\n<span class=\"s\">    (less (variable.Var x) (variable.Var y) ∧ y ≠ (x @ [CHR 0x00]))\"</span>\n<span class=\"kn\">instance</span><span class=\"w\"> </span><span class=\"k\">proof</span>\n<span class=\"w\">  </span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"s\">\"proper_interval None None = True\"</span>\n<span class=\"k\">qed</span>\n<span class=\"k\">end</span>\n</code></pre></div>\n<p>Does anyone know what I am doing wrong?</p>",
        "id": 436268803,
        "sender_full_name": "David Wang",
        "timestamp": 1714482739
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"w\">  </span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"s\">\"proper_interval (None::variable option) None = True\"</span>\n<span class=\"w\">    </span><span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 436269122,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1714482847
    },
    {
        "content": "<p>very typical issue to forget type annotations in the instantiation…</p>",
        "id": 436269284,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1714482900
    },
    {
        "content": "<p>Thank you.</p>",
        "id": 436269382,
        "sender_full_name": "David Wang",
        "timestamp": 1714482920
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"233198\">Mathias Fleury</span> <a href=\"#narrow/stream/238552-Beginner-Questions/topic/Failed.20to.20refined.20pending.20goal.20when.20implementing.20class/near/436269284\">said</a>:</p>\n<blockquote>\n<p>very typical issue to forget type annotations in the instantiation…</p>\n</blockquote>\n<p>Is this something you could summarise in a few words so that we can add it here? :)<br>\n<a href=\"https://github.com/isabelle-prover/cookbook/blob/master/_data/common_errors.yml\">https://github.com/isabelle-prover/cookbook/blob/master/_data/common_errors.yml</a></p>\n<p>It will then be displayed here:<br>\n<a href=\"https://isabelle.systems/cookbook/src/common_errors/\">https://isabelle.systems/cookbook/src/common_errors/</a></p>",
        "id": 436270452,
        "sender_full_name": "Kevin Kappelmann",
        "timestamp": 1714483244
    },
    {
        "content": "<p>Merged. Now online here:<br>\n<a href=\"https://isabelle.systems/cookbook/src/common_errors/\">https://isabelle.systems/cookbook/src/common_errors/</a></p>\n<p>Thanks <span class=\"user-mention\" data-user-id=\"655321\">@David Wang</span> :)</p>",
        "id": 436640188,
        "sender_full_name": "Kevin Kappelmann",
        "timestamp": 1714637717
    }
]