[
    {
        "content": "<p>I'm also working through Types and Programming Languages, and came across something that I don't understand. I'm trying to prove the determinism of a simple small step semantics of boolean expressions:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">datatype</span> <span class=\"n\">tapl_bool</span> <span class=\"o\">=</span>\n  <span class=\"n\">TTrue</span> <span class=\"o\">|</span>\n  <span class=\"n\">FFalse</span> <span class=\"o\">|</span>\n  <span class=\"n\">IfElse</span> <span class=\"n\">tapl_bool</span> <span class=\"n\">tapl_bool</span> <span class=\"n\">tapl_bool</span>\n\n<span class=\"k\">inductive</span> <span class=\"n\">beval1</span> <span class=\"o\">::</span> <span class=\"s\">\"tapl_bool ⇒ tapl_bool ⇒ bool\"</span> <span class=\"kp\">where</span>\n<span class=\"n\">beval1_if_true</span><span class=\"o\">:</span> <span class=\"s\">\"beval1 (IfElse TTrue t2 t3) t2\"</span> <span class=\"o\">|</span>\n<span class=\"n\">beval1_if_false</span><span class=\"o\">:</span> <span class=\"s\">\"beval1 (IfElse FFalse t2 t3) t3\"</span> <span class=\"o\">|</span>\n<span class=\"n\">beval1_if</span><span class=\"o\">:</span> <span class=\"s\">\"beval1 t1 t1' ⟹ beval1 (IfElse t1 t2 t3) (IfElse t1' t2 t3)\"</span>\n</code></pre></div>\n<p>The book puts determinism in words as:</p>\n<p>\"If t -→ t′ and t -→ t′′, then t′ = t′′. </p>\n<p>I expressed this as a theorem with:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">theorem</span> <span class=\"s\">\"beval1 t1 t2 ∧ beval1 t1 t3 ⟶ t2 = t3\"</span>\n</code></pre></div>\n<p>But when I begin the proof by induction, I get a failure to apply the proof method:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kp\">apply</span><span class=\"o\">(</span><span class=\"n\">induction</span> <span class=\"n\">t1</span> <span class=\"n\">t2</span> <span class=\"n\">arbitrary</span><span class=\"o\">:</span> <span class=\"n\">t3</span> <span class=\"n\">rule</span><span class=\"o\">:</span> <span class=\"n\">beval1.induct</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>The phrasing of the theorem seems simple,  an intuitive expression of the wording in the book to me. Can someone provide any info on why the induction tactic fails to be applied in this case?</p>",
        "id": 297055107,
        "sender_full_name": "Alex Weisberger",
        "timestamp": 1662262861
    },
    {
        "content": "<p>You need to write it as </p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">theorem</span> <span class=\"s\">\"beval1 t1 t2 ⟹ beval1 t1 t3 ⟹ t2 = t3\"</span>\n</code></pre></div>\n<p>(for technical reasons, the thing you do induction on has to be on top level of the <code>⟹</code>)</p>",
        "id": 297059860,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1662267972
    },
    {
        "content": "<p>Interesting. I still find the difference between ==&gt; and --&gt; a little confusing, but it's easy enough to remember to use ==&gt; when using induction. Thanks.</p>",
        "id": 297108426,
        "sender_full_name": "Alex Weisberger",
        "timestamp": 1662302626
    }
]