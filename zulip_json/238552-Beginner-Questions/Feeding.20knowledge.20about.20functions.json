[
    {
        "content": "<p>Trying to prove</p>\n<div class=\"codehilite\"><pre><span></span><code>lemma aval_plus: &quot;  aval (Ex_3_1.plus (N (sumN t1)) (asimp (zeroN t1))) s = aval t1 s ⟹\n       aval (Ex_3_1.plus (N (sumN t2)) (asimp (zeroN t2))) s = aval t2 s ⟹\n       aval (Ex_3_1.plus (N (sumN t1 + sumN t2)) (Ex_3_1.plus (asimp (zeroN t1)) (asimp (zeroN t2)))) s = aval t1 s + aval t2 s\n</code></pre></div>\n<p>I have a vague feeling that the knowledge to prove this is within the knowledge of aval's, plus' and asimp's definition (induction rule?).</p>\n<p>What is a good strategy when you find such a lemma? How to feed the necessary facts into the automated proof search procedures?</p>\n<p>I tried (induction t1 arbitrary: t2) to no avail.</p>",
        "id": 224021583,
        "sender_full_name": "Gergely Buday",
        "timestamp": 1611657733
    },
    {
        "content": "<p>Please also provide context, i.e. the definitions of all these constants (you can attach a .thy file).</p>",
        "id": 224021968,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1611657991
    },
    {
        "content": "<p>Here is a minimal version of the file:</p>\n<p><a href=\"/user_uploads/14278/f3o4Qq7wm9r_yYPmGUqniGQX/AvalPlus.thy\">AvalPlus.thy</a></p>",
        "id": 224023061,
        "sender_full_name": "Gergely Buday",
        "timestamp": 1611658724
    },
    {
        "content": "<p>your theory file doesn't define <code>asimp</code>, so Isabelle wants you to prove this for all possible functions <code>asimp</code> (as can be seen by the name being blue)</p>",
        "id": 224024683,
        "sender_full_name": "Jakub Kądziołka",
        "timestamp": 1611659701
    },
    {
        "content": "<p>I assume the lemma you actually want to prove left you with this monstrosity after <code>simp</code>...</p>",
        "id": 224024777,
        "sender_full_name": "Jakub Kądziołka",
        "timestamp": 1611659762
    },
    {
        "content": "<p>could you post what you actually want to prove?</p>",
        "id": 224024820,
        "sender_full_name": "Jakub Kądziołka",
        "timestamp": 1611659782
    },
    {
        "content": "<p>My teaching intuition says that after simp, you are left with something that is calling for a <code>aval (asimp (zeronN t1)) = t1</code>theorem</p>",
        "id": 224025222,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1611660055
    },
    {
        "content": "<p>also, I don't think it's necessary to remove lemmas you've already proven about these definitions</p>",
        "id": 224025303,
        "sender_full_name": "Jakub Kądziołka",
        "timestamp": 1611660114
    },
    {
        "content": "<p>more like <code>aval (asimp (zeroN t1)) + sumN t1 = aval t1</code></p>",
        "id": 224025388,
        "sender_full_name": "Jakub Kądziołka",
        "timestamp": 1611660155
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"380931\">@Jakub Kądziołka</span> here is a theory file with asimp's definition:</p>\n<p><a href=\"/user_uploads/14278/NVC_5aVbSx49qHtYb9BbJcFf/AvalPlus.thy\">AvalPlus.thy</a></p>",
        "id": 224025551,
        "sender_full_name": "Gergely Buday",
        "timestamp": 1611660259
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"380931\">Jakub Kądziołka</span> <a href=\"#narrow/stream/238552-Beginner-Questions/topic/Feeding.20knowledge.20about.20functions/near/224025388\">said</a>:</p>\n<blockquote>\n<p>more like <code>aval (asimp (zeroN t1)) + sumN t1 = aval t1</code></p>\n</blockquote>\n<p>Good point, reading the theory files helps <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 224025617,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1611660315
    },
    {
        "content": "<p>Now with the final theorem and its definitions included:</p>\n<p><a href=\"/user_uploads/14278/StE7jzc51_mT958XB7ryGRA9/AvalPlus.thy\">AvalPlus.thy</a></p>",
        "id": 224025887,
        "sender_full_name": "Gergely Buday",
        "timestamp": 1611660466
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"233198\">@Mathias Fleury</span> yes reading helps but I am lost now and don't know what to look for.</p>",
        "id": 224025942,
        "sender_full_name": "Gergely Buday",
        "timestamp": 1611660494
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"234198\">@Gergely Buday</span> I opened the file, called <code>auto</code> and was like: \"why on earth is <code>aval (plus ... ....)</code> not simplified to <code>aval ... + aval ...</code>?\"</p>",
        "id": 224025950,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1611660507
    },
    {
        "content": "<p>do you have a lemma that says <code>aval (asimp a) s = aval a s</code>?</p>",
        "id": 224026118,
        "sender_full_name": "Jakub Kądziołka",
        "timestamp": 1611660605
    },
    {
        "content": "<p>You should really add the lemma on aval plus.</p>",
        "id": 224026148,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1611660621
    },
    {
        "content": "<p>it would compose with aval_sepN wonderfully</p>",
        "id": 224026161,
        "sender_full_name": "Jakub Kądziołka",
        "timestamp": 1611660631
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"380931\">Jakub Kądziołka</span> <a href=\"#narrow/stream/238552-Beginner-Questions/topic/Feeding.20knowledge.20about.20functions/near/224026161\">said</a>:</p>\n<blockquote>\n<p>it would compose with aval_sepN wonderfully</p>\n</blockquote>\n<p>both lemmas even deserve to be [simp] rules!</p>",
        "id": 224026349,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1611660760
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"380931\">@Jakub Kądziołka</span> not yet but I go for it</p>",
        "id": 224026362,
        "sender_full_name": "Gergely Buday",
        "timestamp": 1611660770
    },
    {
        "content": "<p>Sorry for being so uncomprehending. Digging through the Concrete Semantics sketch files I have found a lemma that was essential:</p>\n<div class=\"codehilite\"><pre><span></span><code>lemma aval_plus: &quot;aval (plus a1 a2) s = aval a1 s + aval a2 s&quot;\n</code></pre></div>\n<p>This is a more basic lemma, and this was the real lesson: I should find the most basic \"trivial\" but unproven statement. With this missing element proof automation completes the puzzle.</p>\n<p><a href=\"/user_uploads/14278/NsPm7eqBAu7wr-ufHxjx3Ode/AvalPlus.thy\">AvalPlus.thy</a></p>",
        "id": 224029207,
        "sender_full_name": "Gergely Buday",
        "timestamp": 1611662744
    },
    {
        "content": "<p>Also, an answer to my original question on how to feed knowledge about functions into a proof: for \"fun\" functions this knowledge is automatically transferred into simplification, for \"definition\" functions they should be named as _defs, and the real question is the combination of functions for which the rules should be proven explicitly. Am I right?</p>",
        "id": 224033773,
        "sender_full_name": "Gergely Buday",
        "timestamp": 1611665554
    },
    {
        "content": "<p>Yes, some_function.simps is automatically included in the simplifier rule set and is thus used automatically by <code>simp</code>, <code>auto</code>, <code>force</code>, and <code>fastforce</code>; for definitions you need to use <code>unfolding some_definition_def</code> or <code>apply (auto simp: some_definition_def)</code> (the former will inline the definition within your goal, the latter will tell the simplifier to unfold it even if it arises after some simplification was already done).</p>\n<p>There's nothing special about \"combinations of functions\", it's just that the auxiliary properties required an induction in their proof.</p>",
        "id": 224048869,
        "sender_full_name": "Jakub Kądziołka",
        "timestamp": 1611672483
    },
    {
        "content": "<p>like, if you have <code>aval (asimp a) s</code>, there aren't any rules in the definition of asimp that apply to an arbitrary term <code>a</code>, so the simplifier can't do anything with that until you prove some lemma that has <code>asimp a</code> or <code>aval (asimp a) s</code> on the left-hand side of an equality</p>",
        "id": 224049269,
        "sender_full_name": "Jakub Kądziołka",
        "timestamp": 1611672632
    },
    {
        "content": "<p>that lemma would then have to be named explicitly in the general case (<code>apply (simp add: some_fact)</code>), but you can also tag your theorems as simplification rules with <code>lemma foo[simp]: \"...\"</code></p>",
        "id": 224049446,
        "sender_full_name": "Jakub Kądziołka",
        "timestamp": 1611672708
    },
    {
        "content": "<p>when you do that, the right-hand side of the equality should be 'simpler' in some way than the left-hand side</p>",
        "id": 224049580,
        "sender_full_name": "Jakub Kądziołka",
        "timestamp": 1611672754
    },
    {
        "content": "<p>when a lemma is already in the simpset, you can remove it for a one-off proof with <code>simp del: some_fact</code> (or <code>auto simp del: ...</code>). However, if you find yourself doing that too often, then that fact probably shouldn't be <code>[simp]</code> in the first place</p>",
        "id": 224049793,
        "sender_full_name": "Jakub Kądziołka",
        "timestamp": 1611672845
    },
    {
        "content": "<p>also, if you aren't careful, the simplifier may not terminate on some terms. <code>using [[simp_trace]] apply simp</code> is a useful way to debug that (there's also <code>using [[simp_trace_new]]</code>, which I find easier to read, but it doesn't tell you the names of the facts it uses to rewrite)</p>",
        "id": 224050073,
        "sender_full_name": "Jakub Kądziołka",
        "timestamp": 1611672957
    },
    {
        "content": "<p>FWIW, this is also useful to get an intuition for how the simplifier works</p>",
        "id": 224050174,
        "sender_full_name": "Jakub Kądziołka",
        "timestamp": 1611672993
    }
]