[
    {
        "content": "<p>How to finish a proof like this?</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">empty_list_switching</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"a = [True] ∧  b = [] ∧ c = [] ⟹ length ((tl a @ (hd a) # b @ c)) ≤ 1 ∧ length (a @ b @ c) ≤ 1\"</span>\n<span class=\"o\">(</span><span class=\"kp\">is</span><span class=\"w\"> </span><span class=\"s\">\"?a ∧ ?b ∧ ?c ⟹ ?l\"</span><span class=\"o\">)</span>\n<span class=\"k\">proof</span><span class=\"w\"> </span><span class=\"o\">-</span>\n<span class=\"w\">  </span><span class=\"k\">assume</span><span class=\"w\"> </span><span class=\"s\">\"?a ∧ ?b ∧ ?c\"</span><span class=\"w\"> </span><span class=\"k\">thus</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">thesis</span>\n<span class=\"w\">  </span><span class=\"k\">proof</span><span class=\"w\"> </span><span class=\"o\">-</span>\n<span class=\"w\">    </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"s\">\"length (a @ b @ c) ≤ 1\"</span>\n<span class=\"w\">      </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"n\">add</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">‹a = [True] ∧ b = [] ∧ c = []›</span><span class=\"o\">)</span>\n<span class=\"w\">    </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">thesis</span><span class=\"w\"> </span><span class=\"k\">proof</span><span class=\"w\"> </span><span class=\"o\">-</span>\n<span class=\"w\">      </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"s\">\"tl a = []\"</span><span class=\"w\"> </span><span class=\"gr\">sorry</span>\n<span class=\"w\">       </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"s\">\"hd a = True\"</span><span class=\"w\"> </span><span class=\"gr\">sorry</span>\n<span class=\"w\">       </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"s\">\"b = []\"</span><span class=\"w\"> </span><span class=\"gr\">sorry</span>\n<span class=\"w\">       </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"s\">\"c = []\"</span><span class=\"w\"> </span><span class=\"gr\">sorry</span>\n<span class=\"w\">       </span><span class=\"k\">hence</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">thesis</span>\n<span class=\"w\">         </span><span class=\"gr\">sorry</span>\n<span class=\"w\">     </span><span class=\"k\">qed</span>\n<span class=\"w\">   </span><span class=\"k\">qed</span>\n</code></pre></div>\n<p>Isabelle says \"failed to finish proof\" on the first <code>qed</code>, and if I just say <code>hence ?thesis</code> then I can go on and on forever. What's the method of saying \"please finish the entire proof by piecing together the facts I have provided\" in Isar?</p>\n<p>Please excuse me for this slightly weird example (made up to get a MWE), which comes from my current project while learning Isar, in  which I was proving something like this where P, Q etc. are quite large:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">empty_list_switching</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"P∧ Q ∧ R ⟹ f(P', Q', R')\"</span>\n<span class=\"o\">(</span><span class=\"kp\">is</span><span class=\"w\"> </span><span class=\"s\">\"?P ∧ ?Q ∧ ?R ⟹ ?f\"</span><span class=\"o\">)</span>\n<span class=\"k\">proof</span><span class=\"w\"> </span><span class=\"o\">-</span>\n<span class=\"w\">  </span><span class=\"k\">assume</span><span class=\"w\"> </span><span class=\"s\">\"?P ∧ ?Q ∧ ?R\"</span><span class=\"w\"> </span><span class=\"k\">thus</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">thesis</span>\n<span class=\"w\">  </span><span class=\"k\">proof</span><span class=\"w\"> </span><span class=\"o\">-</span>\n<span class=\"w\">    </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"n\">fact1</span><span class=\"w\"> </span><span class=\"n\">about</span><span class=\"w\"> </span><span class=\"n\">f</span>\n<span class=\"w\">      </span><span class=\"n\">&lt;proof</span><span class=\"w\"> </span><span class=\"kp\">for</span><span class=\"w\"> </span><span class=\"n\">this&gt;</span>\n<span class=\"w\">    </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">thesis</span><span class=\"w\"> </span><span class=\"k\">proof</span><span class=\"w\"> </span><span class=\"o\">-</span>\n<span class=\"w\">      </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"n\">fact</span><span class=\"w\"> </span><span class=\"n\">2</span><span class=\"w\"> </span><span class=\"n\">about</span><span class=\"w\"> </span><span class=\"n\">P'</span><span class=\"w\"> </span><span class=\"gr\">sorry</span>\n<span class=\"w\">       </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"n\">fact</span><span class=\"w\"> </span><span class=\"n\">3</span><span class=\"w\"> </span><span class=\"n\">about</span><span class=\"w\"> </span><span class=\"n\">Q'</span><span class=\"w\"> </span><span class=\"gr\">sorry</span>\n<span class=\"w\">       </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"n\">fact</span><span class=\"w\"> </span><span class=\"n\">4</span><span class=\"w\"> </span><span class=\"n\">about</span><span class=\"w\"> </span><span class=\"n\">R'</span><span class=\"w\"> </span><span class=\"gr\">sorry</span>\n<span class=\"w\">       </span><span class=\"k\">hence</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">thesis</span>\n<span class=\"w\">         </span><span class=\"gr\">sorry</span>\n<span class=\"w\">     </span><span class=\"k\">qed</span>\n<span class=\"w\">   </span><span class=\"k\">qed</span>\n</code></pre></div>",
        "id": 420276153,
        "sender_full_name": "Chengsong Tan",
        "timestamp": 1707319269
    },
    {
        "content": "<p>It told you failed to finish proof because you used hence rather than thus. Here is how I would write the proof:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">empty_list_switching</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"a = [True] ∧  b = [] ∧ c = [] ⟹ length ((tl a @ (hd a) # b @ c)) ≤ 1 ∧ length (a @ b @ c) ≤ 1\"</span>\n<span class=\"o\">(</span><span class=\"kp\">is</span><span class=\"w\"> </span><span class=\"s\">\"?a ∧ ?b ∧ ?c ⟹ ?l\"</span><span class=\"o\">)</span>\n<span class=\"k\">proof</span><span class=\"w\"> </span><span class=\"o\">-</span>\n<span class=\"w\">  </span><span class=\"k\">assume</span><span class=\"w\"> </span><span class=\"n\">*</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"?a ∧ ?b ∧ ?c\"</span>\n<span class=\"w\">  </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"s\">\"length (tl a @ hd a # b @ c) ≤ 1\"</span>\n<span class=\"w\">    </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">simp</span>\n<span class=\"w\">  </span><span class=\"k\">moreover</span><span class=\"w\"> </span><span class=\"k\">from</span><span class=\"w\"> </span><span class=\"n\">*</span><span class=\"w\"> </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"s\">\"length (a @ b @ c) ≤ 1\"</span>\n<span class=\"w\">    </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">simp</span>\n<span class=\"w\">  </span><span class=\"k\">ultimately</span><span class=\"w\"> </span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">thesis</span>\n<span class=\"w\">    </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">simp</span>\n<span class=\"k\">qed</span>\n</code></pre></div>",
        "id": 420277540,
        "sender_full_name": "Christian Pardillo Laursen",
        "timestamp": 1707319666
    },
    {
        "content": "<p>I think it's considered bad style to use keywords hence and thus, I'd probably just stick to \"then have\" and \"then show\"</p>",
        "id": 420277750,
        "sender_full_name": "Christian Pardillo Laursen",
        "timestamp": 1707319711
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"361261\">Christian Pardillo Laursen</span> <a href=\"#narrow/stream/238552-Beginner-Questions/topic/Finishing.20an.20Isar.20Proof/near/420277750\">said</a>:</p>\n<blockquote>\n<p>I think it's considered bad style to use keywords hence and thus, I'd probably just stick to \"then have\" and \"then show\"</p>\n</blockquote>\n<p>Makarius is a strong advocate against thus/hence. But there is no consensus that is is bad style.</p>",
        "id": 420289138,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1707322542
    },
    {
        "content": "<p>My personal experience is that they often end up being expanded when refactoring a proof.</p>",
        "id": 420289647,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1707322647
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"361261\">Christian Pardillo Laursen</span> <a href=\"#narrow/stream/238552-Beginner-Questions/topic/Finishing.20an.20Isar.20Proof/near/420277540\">said</a>:</p>\n<blockquote>\n<p>It told you failed to finish proof because you used hence rather than thus. Here is how I would write the proof:</p>\n<p><div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">empty_list_switching</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"a = [True] ∧  b = [] ∧ c = [] ⟹ length ((tl a @ (hd a) # b @ c)) ≤ 1 ∧ length (a @ b @ c) ≤ 1\"</span>\n<span class=\"o\">(</span><span class=\"kp\">is</span><span class=\"w\"> </span><span class=\"s\">\"?a ∧ ?b ∧ ?c ⟹ ?l\"</span><span class=\"o\">)</span>\n<span class=\"k\">proof</span><span class=\"w\"> </span><span class=\"o\">-</span>\n<span class=\"w\">  </span><span class=\"k\">assume</span><span class=\"w\"> </span><span class=\"n\">*</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"?a ∧ ?b ∧ ?c\"</span>\n<span class=\"w\">  </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"s\">\"length (tl a @ hd a # b @ c) ≤ 1\"</span>\n<span class=\"w\">    </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">simp</span>\n<span class=\"w\">  </span><span class=\"k\">moreover</span><span class=\"w\"> </span><span class=\"k\">from</span><span class=\"w\"> </span><span class=\"n\">*</span><span class=\"w\"> </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"s\">\"length (a @ b @ c) ≤ 1\"</span>\n<span class=\"w\">    </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">simp</span>\n<span class=\"w\">  </span><span class=\"k\">ultimately</span><span class=\"w\"> </span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">thesis</span>\n<span class=\"w\">    </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">simp</span>\n<span class=\"k\">qed</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Thank you Christian! This style is much nicer to work with.</p>",
        "id": 420372784,
        "sender_full_name": "Chengsong Tan",
        "timestamp": 1707356217
    }
]