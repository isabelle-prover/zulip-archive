[
    {
        "content": "<p>I introduce variables with <code>fix A :: \"'a set\"</code>, which I later use and need <code>'a</code> to have a specific typeclass. Is there a way to fix variables with the additional restriction that they are in a typeclass?</p>",
        "id": 243381512,
        "sender_full_name": "Max Nowak",
        "timestamp": 1624282072
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">fix</span> <span class=\"n\">A</span> <span class=\"o\">::</span> <span class=\"s\">\"`a :: myclass set\"</span>\n</code></pre></div>",
        "id": 243381606,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1624282098
    },
    {
        "content": "<p>Now I get the following though:<br>\nSort constraint linorder inconsistent with default type for type variable \"'a\"</p>",
        "id": 243381873,
        "sender_full_name": "Max Nowak",
        "timestamp": 1624282206
    },
    {
        "content": "<p>Then you already have a type <code>'a</code> in your context that doesn't have that type class.</p>",
        "id": 243382102,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1624282322
    },
    {
        "content": "<p>So you probably have to annotate it with that type class even earlier.</p>",
        "id": 243382159,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1624282346
    },
    {
        "content": "<p>Come to think of it, I don't think I can think of any common situation where it would be required to add a type class annotation to a <code>fix</code> command.</p>",
        "id": 243382218,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1624282382
    },
    {
        "content": "<p>If you don't understand what you need to do, you should perhaps post some more context so that we can see what it is that you are attempting to do.</p>",
        "id": 243382269,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1624282414
    },
    {
        "content": "<p>Yeah I have a <code>(in linorder)</code> on my lemma, and yet it complains that <code>'a</code> isn't of sort linorder.<br>\nMy lemma:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"o\">(</span><span class=\"kp\">in</span> <span class=\"n\">linorder</span><span class=\"o\">):</span> <span class=\"s\">\"myprop myfunc\"</span>\n  <span class=\"k\">unfolding</span> <span class=\"n\">myprop_def</span>\n<span class=\"k\">proof</span> <span class=\"o\">(</span><span class=\"n\">safe</span><span class=\"o\">)</span>\n  <span class=\"k\">fix</span> <span class=\"n\">A</span> <span class=\"o\">::</span> <span class=\"s\">\"'a set\"</span>\n  <span class=\"k\">have</span> <span class=\"s\">\"...\"</span> <span class=\"k\">using</span> <span class=\"n\">other_lemma</span><span class=\"o\">[</span><span class=\"n\">of</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"c\">(* &lt;-- error here that A is not of sort linorder*)</span>\n<span class=\"k\">qed</span>\n</code></pre></div>\n<p>I hope that's enough code.</p>",
        "id": 243382773,
        "sender_full_name": "Max Nowak",
        "timestamp": 1624282621
    },
    {
        "content": "<p>Ah, yes, this is an oddity of the way type classes work in Isabelle. When you are in the <code>linorder</code> context, you do not actually have the sort <code>linorder</code> on the type variable <code>'a</code> and there is no way to get it.</p>",
        "id": 243382948,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1624282683
    },
    {
        "content": "<p>Ideally, you should prove your <code>other_lemma</code> also in a <code>linorder</code> context (i.e. with <code>in linorder</code>) so that you can use it here.</p>",
        "id": 243383042,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1624282718
    },
    {
        "content": "<p>If that is not possible for some reason, you will have to prove everything that builds on it also outside the <code>linorder</code> context, with an explicit <code>linorder</code> sort annotation.</p>",
        "id": 243383097,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1624282747
    },
    {
        "content": "<p>Explicit sort annotation such as <code>'a :: linorder</code>? Just making sure, since I'm not a pro on sorts.</p>",
        "id": 243383271,
        "sender_full_name": "Max Nowak",
        "timestamp": 1624282813
    },
    {
        "content": "<p>Yes.</p>",
        "id": 243383299,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1624282822
    },
    {
        "content": "<p>Thanks, you helped me :). I'll choose the latter.</p>",
        "id": 243383357,
        "sender_full_name": "Max Nowak",
        "timestamp": 1624282848
    },
    {
        "content": "<p>Yay the error is gone. Time to party.</p>",
        "id": 243384334,
        "sender_full_name": "Max Nowak",
        "timestamp": 1624283287
    }
]