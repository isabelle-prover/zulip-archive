[
    {
        "content": "<p>Hi, I want to fold over a Map but haven't found fold* in the Map Theory, or did I miss something? :)</p>",
        "id": 238994652,
        "sender_full_name": "Robert Soeldner",
        "timestamp": 1621186999
    },
    {
        "content": "<p>A Map is at its core just a function and thus not really a structure you can directly fold over. But you should be able to use Finite_Set.fold to do it, provided you can proof that the domain of the map is actually finite:</p>\n<div class=\"codehilite\"><pre><span></span><code>definition map_fold :: &quot;(&#39;b ⇒ &#39;c ⇒ &#39;a ⇒ &#39;a) ⇒ &#39;a ⇒ (&#39;b ⇒ &#39;c option) ⇒ &#39;a&quot;\n  where &quot;map_fold f z m ≡ Finite_Set.fold (λk acc. f k (the (m k)) acc) z (dom m)&quot;\n</code></pre></div>",
        "id": 239243116,
        "sender_full_name": "Max Kirchmeier",
        "timestamp": 1621340544
    },
    {
        "content": "<p>Remark that you have to prove that the order of the fold does not matter.</p>",
        "id": 239246164,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1621341919
    },
    {
        "content": "<p>It doesn't matter if the keys are linearly ordered since the dom function is (piecewise) injective.</p>",
        "id": 239246755,
        "sender_full_name": "Lukas Stevens",
        "timestamp": 1621342119
    },
    {
        "content": "<p>In most cases it is probably easiest to just express whatever you want to do in a less \"operational\" way without a fold. Once you move to actually implementing these maps with a more concrete datastructure, you can then prove that a fold works out.</p>",
        "id": 239247204,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1621342285
    },
    {
        "content": "<p>I actually proved all of this already but you will have to wait until the next release.</p>",
        "id": 239247380,
        "sender_full_name": "Lukas Stevens",
        "timestamp": 1621342338
    },
    {
        "content": "<p>I don't understand. How can the order of the fold not matter in general? Surely it depends on what the fold operation actually does.</p>",
        "id": 239248030,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1621342576
    },
    {
        "content": "<p>Ah, the fold as the defined here doesn't work. But you can use <code>List.fold</code> over <code>List.sorted_list_of_set</code> of <code>dom m</code>.</p>",
        "id": 239248162,
        "sender_full_name": "Lukas Stevens",
        "timestamp": 1621342636
    },
    {
        "content": "<p>In any case, my point was that \"fold\" is a very operational way to think about things, and <code>'a ⇒ 'b option</code> is a very abstract view of maps, so the two don't go together easily.</p>",
        "id": 239248176,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1621342644
    },
    {
        "content": "<p>In all likelihood, the \"fold\" aspect should really only come in when you're trying to get this whole thing executable with a more concrete representation of maps.</p>",
        "id": 239248307,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1621342686
    },
    {
        "content": "<p>Both RBTs and AList can implement this fold</p>",
        "id": 239248367,
        "sender_full_name": "Lukas Stevens",
        "timestamp": 1621342713
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"233155\">Lukas Stevens</span> <a href=\"#narrow/stream/238552-Beginner-Questions/topic/Folding.20over.20a.20Map/near/239248162\">said</a>:</p>\n<blockquote>\n<p>Ah, the fold as the defined here doesn't work. But you can use <code>List.fold</code> over <code>List.sorted_list_of_set</code> of <code>dom m</code>.</p>\n</blockquote>\n<p>That can work, but only if you have an ordering on your elements and that is indeed the order that you want to fold over.</p>",
        "id": 239248389,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1621342725
    },
    {
        "content": "<p>In the end, it probably depends on the exact application.</p>",
        "id": 239248479,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1621342757
    },
    {
        "content": "<p>With RBTs in mind, that would be the natural order. In general, it is not so clear.</p>",
        "id": 239248506,
        "sender_full_name": "Lukas Stevens",
        "timestamp": 1621342770
    },
    {
        "content": "<p>In any case, it is generally good advice to try not to mix operational aspects into the abstract reasoning. Whether or not that applies here is difficult to say without knowing the exact use case.</p>",
        "id": 239248750,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1621342845
    },
    {
        "content": "<p>One should probably only add this operation to <code>mapping</code> and not to <code>map</code>.</p>",
        "id": 239248869,
        "sender_full_name": "Lukas Stevens",
        "timestamp": 1621342888
    },
    {
        "content": "<p>In fact, that is exactly what I did in my changes.</p>",
        "id": 239249089,
        "sender_full_name": "Lukas Stevens",
        "timestamp": 1621342951
    },
    {
        "content": "<p>Indeed, <code>Mapping</code> is intended to be something of a first step of refining \"mathematical maps\" (i.e. partial functions) to actual implementations</p>",
        "id": 239250719,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1621343539
    },
    {
        "content": "<p>Thank you for the amount of comments. Still, I'm not able to follow most comments.  See below for a minimal example of my current issue. Basically, I have a finite map containing id's and their corresponding object. The folding function should accumulate some state.</p>\n<div class=\"codehilite\"><pre><span></span><code>fun test1 :: &quot;(nat, bool) fmap ⇒ bool&quot; where\n&quot;test1 m = (let t = fmdom m in ffold (λv a. the (fmlookup m v) ∧ a) True t)&quot;\n\nvalue &quot;test1 (fmupd 1 False fmempty)&quot;\n</code></pre></div>\n<p>I guess, the error reports, <code>nat</code> is  not finite.</p>\n<div class=\"codehilite\"><pre><span></span><code>Wellsortedness error\n(in code equation test1 ?m ≡ Let (fmdom ?m) (ffold (λv. (∧) (the (fmlookup ?m v))) True),\nwith dependency &quot;Pure.dummy_pattern&quot; -&gt; &quot;test1&quot;):\nType nat not of sort finite\nNo type arity nat :: finite\n</code></pre></div>",
        "id": 239477581,
        "sender_full_name": "Robert Soeldner",
        "timestamp": 1621450330
    },
    {
        "content": "<p>I expect</p>\n<div class=\"codehilite\"><pre><span></span><code>ffold (λv a. v ∧ a) True (fmran mymap)\n</code></pre></div>\n<p>to be easier to manipulate than your <code>ffold+fmlookup</code> definition, but it is not executable either.</p>",
        "id": 239534816,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1621486784
    },
    {
        "content": "<p>Here is a way to make it work, by providing a characterization directly over the fset, but that might not be applicable to your real example:</p>\n<div class=\"codehilite\"><pre><span></span><code>definition myfold where\n  ‹myfold = ffold (λv a. v ∧ a)›\n\nlemma [code]:\n  ‹myfold b A ⟷ b ∧ False |∉| A›\nproof -\n  interpret comp_fun_commute ‹(λv a. v ∧ a)›\n    by standard auto\n  show ?thesis\n    unfolding myfold_def\n    by (induction A) auto\nqed\n\nvalue &quot;myfold True ((fmran (fmupd (1::nat) False fmempty))) &quot;\n</code></pre></div>",
        "id": 239535227,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1621487081
    },
    {
        "content": "<p>Following up on this, even the more simplified version fails to be executed.  See:</p>\n<div class=\"codehilite\"><pre><span></span><code>definition bla1 :: &quot;nat fset ⇒ bool&quot; where\n&quot;bla1 n = (ffold (λeid a. True ∧ a) True n)&quot;\n\nvalue &quot;bla1 {|1,2,3|}&quot;\n</code></pre></div>\n<p>with</p>\n<div class=\"codehilite\"><pre><span></span><code>Wellsortedness error\n(in code equation bla1 ?n ≡ ffold (λeid. (∧) True) True ?n,\nwith dependency &quot;Pure.dummy_pattern&quot; -&gt; &quot;bla1&quot;):\nType nat not of sort finite\nNo type arity nat :: finite\n</code></pre></div>\n<p>From the error message, I assume it is expected that <code>nat</code> is finite?</p>",
        "id": 239968857,
        "sender_full_name": "Robert Soeldner",
        "timestamp": 1621793948
    }
]