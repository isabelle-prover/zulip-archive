[
    {
        "content": "<p>Hi, I want to prove that my function \"calculate_votes_for_election\" is invariant under permutations of list of parties.</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">count_votes</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"'b ⇒ 'b Profile ⇒ 'b Votes</span>\n<span class=\"s\">                                      ⇒ 'b Votes\"</span><span class=\"w\"> </span><span class=\"kp\">where</span>\n<span class=\"w\">  </span><span class=\"s\">\"count_votes party profile_list votes =</span>\n<span class=\"s\">  (let n_votes = foldr (λpref acc. if card (above pref party) = 0</span>\n<span class=\"s\">                                      then acc+1</span>\n<span class=\"s\">                                  else acc) profile_list 0</span>\n<span class=\"s\">   in votes(party := n_votes))\"</span>\n\n<span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">empty_votes</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"('b ⇒ rat)\"</span><span class=\"w\"> </span><span class=\"kp\">where</span>\n<span class=\"w\">  </span><span class=\"s\">\"empty_votes b = 0\"</span>\n\n<span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">calculate_votes_for_election</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"'b list ⇒ 'b Profile ⇒ 'b Votes\"</span><span class=\"w\"> </span><span class=\"kp\">where</span>\n<span class=\"w\">  </span><span class=\"s\">\"calculate_votes_for_election parties prof =</span>\n<span class=\"s\">      (let v = empty_votes in (if parties = [] then empty_votes else</span>\n<span class=\"s\">      (foldr (λparty acc_votes.</span>\n<span class=\"s\">              count_votes party prof acc_votes)</span>\n<span class=\"s\">              parties v)))\"</span>\n</code></pre></div>\n<p>For the moment i rewrote count_votes without the foldr but in recursion way</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">count_votes</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"'b ⇒ 'b Profile ⇒ 'b Votes ⇒ rat</span>\n<span class=\"s\">                                      ⇒ 'b Votes\"</span><span class=\"w\"> </span><span class=\"kp\">where</span>\n<span class=\"w\">  </span><span class=\"s\">\"count_votes party [] votes n = votes(party:= n)\"</span><span class=\"w\"> </span><span class=\"o\">|</span>\n<span class=\"w\">  </span><span class=\"s\">\"count_votes party (px # p) votes n =</span>\n<span class=\"s\">   count_votes party p votes (if card (above px party) = 0</span>\n<span class=\"s\">                                      then n+1</span>\n<span class=\"s\">                                  else n)\"</span>\n</code></pre></div>\n<p>thinking that in this way it may be easier to proof. Any help or suggestion? Should i rewrite also calculate_votes_for_election in recursive way to write my proof? Thanks in advance</p>",
        "id": 419800146,
        "sender_full_name": "Salvatore Francesco Rossetta",
        "timestamp": 1707126730
    },
    {
        "content": "<p>Do you need to work on lists? The natural data structure would be multisets…</p>",
        "id": 419800503,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1707126853
    },
    {
        "content": "<p>Otherwise the natural way would be to interprete the function as comp_fun_commute in the proofs.</p>",
        "id": 419800975,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1707127009
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"233198\">Mathias Fleury</span> <a href=\"#narrow/stream/238552-Beginner-Questions/topic/Foldr.20invariant.20on.20permutations/near/419800503\">said</a>:</p>\n<blockquote>\n<p>Do you need to work on lists? The natural data structure would be multisets…</p>\n</blockquote>\n<p>I chose lists because I need to extract one element from it and in the theory about multisets I found nothing to extract a single element without knowing in advance the element itself, I only found Min but in my case it's not a linorder type.</p>",
        "id": 419812500,
        "sender_full_name": "Salvatore Francesco Rossetta",
        "timestamp": 1707130981
    },
    {
        "content": "<p>Update: I tried to do it with multisets without succeeding so I am trying with lists.</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">calculate_votes</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"'b list ⇒ 'b Profile ⇒'b Votes ⇒ 'b Votes\"</span><span class=\"w\"> </span><span class=\"kp\">where</span>\n<span class=\"w\">  </span><span class=\"s\">\"calculate_votes [] profile_list votes = votes\"</span><span class=\"w\"> </span><span class=\"o\">|</span>\n<span class=\"w\">  </span><span class=\"s\">\"calculate_votes (px # p) profile_list votes =</span>\n<span class=\"s\">      calculate_votes p profile_list (count_votes px profile_list empty_votes 0)\"</span>\n\n<span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">calculate_votes_permutation</span><span class=\"o\">:</span>\n<span class=\"w\">  </span><span class=\"kp\">fixes</span>\n<span class=\"w\">    </span><span class=\"n\">p1</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"'b Parties\"</span><span class=\"w\"> </span><span class=\"kp\">and</span>\n<span class=\"w\">    </span><span class=\"n\">p2</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"s\">\"'b Parties\"</span><span class=\"w\"> </span><span class=\"kp\">and</span>\n<span class=\"w\">    </span><span class=\"n\">profile</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"s\">\"'b Profile\"</span><span class=\"w\"> </span><span class=\"kp\">and</span>\n<span class=\"w\">    </span><span class=\"n\">votes</span><span class=\"o\">::</span><span class=\"s\">\"'b Votes\"</span>\n<span class=\"w\">  </span><span class=\"kp\">shows</span><span class=\"w\"> </span><span class=\"s\">\"∀p1 p2 profile votes. p1 &lt;~~&gt; p2 ⟶ calculate_votes p1 profile votes = calculate_votes p2 profile votes\"</span>\n<span class=\"k\">proof</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">cases</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"k\">assume</span><span class=\"w\"> </span><span class=\"s\">\"p1 = []\"</span>\n<span class=\"w\">  </span><span class=\"k\">assume</span><span class=\"w\"> </span><span class=\"s\">\"p1 &lt;~~&gt; p2\"</span>\n<span class=\"w\">  </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"s\">\"p2 = []\"</span><span class=\"w\"> </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">perm_empty_imp</span>\n<span class=\"w\">    </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"n\">add</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">‹p1 = []›</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"k\">hence</span><span class=\"w\"> </span><span class=\"s\">\"calculate_votes p1 profile votes =</span>\n<span class=\"s\">         calculate_votes p2 profile votes\"</span>\n<span class=\"w\">  </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"n\">add</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">‹p1 = []›</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">thesis</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">simp</span>\n<span class=\"k\">next</span>\n</code></pre></div>\n<p>I managed to write something like this and it is not working, even though it seems to \"pick\" the thesis</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">proof</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">chain</span><span class=\"o\">)</span>\n<span class=\"n\">picking</span><span class=\"w\"> </span><span class=\"n\">this</span><span class=\"o\">:</span>\n<span class=\"w\">  </span><span class=\"n\">calculate_votes</span><span class=\"w\"> </span><span class=\"n\">p1</span><span class=\"w\"> </span><span class=\"n\">profile</span><span class=\"w\"> </span><span class=\"n\">votes</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">calculate_votes</span><span class=\"w\"> </span><span class=\"n\">p2</span><span class=\"w\"> </span><span class=\"n\">profile</span><span class=\"w\"> </span><span class=\"n\">votes</span>\n<span class=\"n\">Failed</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">refine</span><span class=\"w\"> </span><span class=\"n\">any</span><span class=\"w\"> </span><span class=\"n\">pending</span><span class=\"w\"> </span><span class=\"n\">goal</span>\n<span class=\"n\">Local</span><span class=\"w\"> </span><span class=\"n\">statement</span><span class=\"w\"> </span><span class=\"n\">fails</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">refine</span><span class=\"w\"> </span><span class=\"n\">any</span><span class=\"w\"> </span><span class=\"n\">pending</span><span class=\"w\"> </span><span class=\"n\">goal</span>\n<span class=\"n\">Failed</span><span class=\"w\"> </span><span class=\"n\">attempt</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">solve</span><span class=\"w\"> </span><span class=\"n\">goal</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">exported</span><span class=\"w\"> </span><span class=\"n\">rule</span><span class=\"o\">:</span>\n<span class=\"w\">  </span><span class=\"o\">(</span><span class=\"n\">p1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">[])</span><span class=\"w\"> </span><span class=\"n\">⟹</span>\n<span class=\"w\">  </span><span class=\"o\">(</span><span class=\"n\">mset</span><span class=\"w\"> </span><span class=\"n\">p1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">mset</span><span class=\"w\"> </span><span class=\"n\">p2</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">⟹</span>\n<span class=\"w\">  </span><span class=\"n\">∀p1</span><span class=\"w\"> </span><span class=\"n\">p2</span><span class=\"w\"> </span><span class=\"n\">profile</span><span class=\"w\"> </span><span class=\"n\">votes.</span>\n<span class=\"w\">     </span><span class=\"n\">mset</span><span class=\"w\"> </span><span class=\"n\">p1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">mset</span><span class=\"w\"> </span><span class=\"n\">p2</span><span class=\"w\"> </span><span class=\"n\">⟶</span><span class=\"w\"> </span><span class=\"n\">calculate_votes</span><span class=\"w\"> </span><span class=\"n\">p1</span><span class=\"w\"> </span><span class=\"n\">profile</span><span class=\"w\"> </span><span class=\"n\">votes</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">calculate_votes</span><span class=\"w\"> </span><span class=\"n\">p2</span><span class=\"w\"> </span><span class=\"n\">profile</span><span class=\"w\"> </span><span class=\"n\">votes</span>\n</code></pre></div>\n<p>How should I change my proof? Or again is there any way to do it with multisets?</p>",
        "id": 419826903,
        "sender_full_name": "Salvatore Francesco Rossetta",
        "timestamp": 1707135740
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"671670\">Salvatore Francesco Rossetta</span> <a href=\"#narrow/stream/238552-Beginner-Questions/topic/Foldr.20invariant.20on.20permutations/near/419812500\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"233198\">Mathias Fleury</span> <a href=\"#narrow/stream/238552-Beginner-Questions/topic/Foldr.20invariant.20on.20permutations/near/419800503\">said</a>:</p>\n<blockquote>\n<p>Do you need to work on lists? The natural data structure would be multisets…</p>\n</blockquote>\n<p>I chose lists because I need to extract one element from it and in the theory about multisets I found nothing to extract a single element without knowing in advance the element itself, I only found Min but in my case it's not a linorder type.</p>\n</blockquote>\n<p>You must have missed <code>fold_mset</code></p>",
        "id": 419830777,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1707136932
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"671670\">Salvatore Francesco Rossetta</span> <a href=\"#narrow/stream/238552-Beginner-Questions/topic/Foldr.20invariant.20on.20permutations/near/419826903\">said</a>:</p>\n<blockquote>\n<p>Update: I tried to do it with multisets without succeeding so I am trying with lists.</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">calculate_votes</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"'b list ⇒ 'b Profile ⇒'b Votes ⇒ 'b Votes\"</span><span class=\"w\"> </span><span class=\"kp\">where</span>\n<span class=\"w\">  </span><span class=\"s\">\"calculate_votes [] profile_list votes = votes\"</span><span class=\"w\"> </span><span class=\"o\">|</span>\n<span class=\"w\">  </span><span class=\"s\">\"calculate_votes (px # p) profile_list votes =</span>\n<span class=\"s\">      calculate_votes p profile_list (count_votes px profile_list empty_votes 0)\"</span>\n\n<span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">calculate_votes_permutation</span><span class=\"o\">:</span>\n<span class=\"w\">  </span><span class=\"kp\">fixes</span>\n<span class=\"w\">    </span><span class=\"n\">p1</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"'b Parties\"</span><span class=\"w\"> </span><span class=\"kp\">and</span>\n<span class=\"w\">    </span><span class=\"n\">p2</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"s\">\"'b Parties\"</span><span class=\"w\"> </span><span class=\"kp\">and</span>\n<span class=\"w\">    </span><span class=\"n\">profile</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"s\">\"'b Profile\"</span><span class=\"w\"> </span><span class=\"kp\">and</span>\n<span class=\"w\">    </span><span class=\"n\">votes</span><span class=\"o\">::</span><span class=\"s\">\"'b Votes\"</span>\n<span class=\"w\">  </span><span class=\"kp\">shows</span><span class=\"w\"> </span><span class=\"s\">\"∀p1 p2 profile votes. p1 &lt;~~&gt; p2 ⟶ calculate_votes p1 profile votes = calculate_votes p2 profile votes\"</span>\n<span class=\"k\">proof</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">cases</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"k\">assume</span><span class=\"w\"> </span><span class=\"s\">\"p1 = []\"</span>\n<span class=\"w\">  </span><span class=\"k\">assume</span><span class=\"w\"> </span><span class=\"s\">\"p1 &lt;~~&gt; p2\"</span>\n<span class=\"w\">  </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"s\">\"p2 = []\"</span><span class=\"w\"> </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">perm_empty_imp</span>\n<span class=\"w\">    </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"n\">add</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">‹p1 = []›</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"k\">hence</span><span class=\"w\"> </span><span class=\"s\">\"calculate_votes p1 profile votes =</span>\n<span class=\"s\">         calculate_votes p2 profile votes\"</span>\n<span class=\"w\">  </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"n\">add</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">‹p1 = []›</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">thesis</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">simp</span>\n<span class=\"k\">next</span>\n</code></pre></div>\n<p>I managed to write something like this and it is not working, even though it seems to \"pick\" the thesis</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">proof</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">chain</span><span class=\"o\">)</span>\n<span class=\"n\">picking</span><span class=\"w\"> </span><span class=\"n\">this</span><span class=\"o\">:</span>\n<span class=\"w\">  </span><span class=\"n\">calculate_votes</span><span class=\"w\"> </span><span class=\"n\">p1</span><span class=\"w\"> </span><span class=\"n\">profile</span><span class=\"w\"> </span><span class=\"n\">votes</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">calculate_votes</span><span class=\"w\"> </span><span class=\"n\">p2</span><span class=\"w\"> </span><span class=\"n\">profile</span><span class=\"w\"> </span><span class=\"n\">votes</span>\n<span class=\"n\">Failed</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">refine</span><span class=\"w\"> </span><span class=\"n\">any</span><span class=\"w\"> </span><span class=\"n\">pending</span><span class=\"w\"> </span><span class=\"n\">goal</span>\n<span class=\"n\">Local</span><span class=\"w\"> </span><span class=\"n\">statement</span><span class=\"w\"> </span><span class=\"n\">fails</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">refine</span><span class=\"w\"> </span><span class=\"n\">any</span><span class=\"w\"> </span><span class=\"n\">pending</span><span class=\"w\"> </span><span class=\"n\">goal</span>\n<span class=\"n\">Failed</span><span class=\"w\"> </span><span class=\"n\">attempt</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">solve</span><span class=\"w\"> </span><span class=\"n\">goal</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">exported</span><span class=\"w\"> </span><span class=\"n\">rule</span><span class=\"o\">:</span>\n<span class=\"w\">  </span><span class=\"o\">(</span><span class=\"n\">p1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">[])</span><span class=\"w\"> </span><span class=\"n\">⟹</span>\n<span class=\"w\">  </span><span class=\"o\">(</span><span class=\"n\">mset</span><span class=\"w\"> </span><span class=\"n\">p1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">mset</span><span class=\"w\"> </span><span class=\"n\">p2</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">⟹</span>\n<span class=\"w\">  </span><span class=\"n\">∀p1</span><span class=\"w\"> </span><span class=\"n\">p2</span><span class=\"w\"> </span><span class=\"n\">profile</span><span class=\"w\"> </span><span class=\"n\">votes.</span>\n<span class=\"w\">     </span><span class=\"n\">mset</span><span class=\"w\"> </span><span class=\"n\">p1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">mset</span><span class=\"w\"> </span><span class=\"n\">p2</span><span class=\"w\"> </span><span class=\"n\">⟶</span><span class=\"w\"> </span><span class=\"n\">calculate_votes</span><span class=\"w\"> </span><span class=\"n\">p1</span><span class=\"w\"> </span><span class=\"n\">profile</span><span class=\"w\"> </span><span class=\"n\">votes</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">calculate_votes</span><span class=\"w\"> </span><span class=\"n\">p2</span><span class=\"w\"> </span><span class=\"n\">profile</span><span class=\"w\"> </span><span class=\"n\">votes</span>\n</code></pre></div>\n<p>How should I change my proof? Or again is there any way to do it with multisets?</p>\n</blockquote>\n<p>That is not  a valid proof. You are doing cases of variables under forall-quantors. So obviously it does not work</p>",
        "id": 419831006,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1707137024
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"233198\">Mathias Fleury</span> <a href=\"#narrow/stream/238552-Beginner-Questions/topic/Foldr.20invariant.20on.20permutations/near/419831006\">said</a>:</p>\n<blockquote>\n<p>That is not  a valid proof. You are doing cases of variables under forall-quantors. So obviously it does not work</p>\n</blockquote>\n<p>I know, I pasted only the first case because that is not working, the other one is simply a \"sorry\" for now, so it should not be a problem?</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">proof</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">cases</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"k\">assume</span><span class=\"w\"> </span><span class=\"s\">\"p1 = []\"</span>\n<span class=\"w\">  </span><span class=\"k\">assume</span><span class=\"w\"> </span><span class=\"s\">\"p1 &lt;~~&gt; p2\"</span>\n<span class=\"w\">  </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"s\">\"p2 = []\"</span><span class=\"w\"> </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">perm_empty_imp</span>\n<span class=\"w\">    </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"n\">add</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">‹p1 = []›</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">thesis</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"n\">add</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">‹p1 = []›</span><span class=\"o\">)</span>\n<span class=\"k\">next</span>\n<span class=\"w\">  </span><span class=\"k\">assume</span><span class=\"w\"> </span><span class=\"s\">\"¬(p1 = [])\"</span>\n<span class=\"w\">  </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">thesis</span><span class=\"w\"> </span><span class=\"gr\">sorry</span>\n<span class=\"k\">qed</span>\n</code></pre></div>",
        "id": 419837749,
        "sender_full_name": "Salvatore Francesco Rossetta",
        "timestamp": 1707139225
    },
    {
        "content": "<p>The p1 in your fixes has NOTHING to do with the p1 in your goal</p>",
        "id": 419838005,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1707139321
    },
    {
        "content": "<p>(except having the same name)</p>",
        "id": 419838126,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1707139343
    },
    {
        "content": "<p>Therefore, the case distinction on p1 is meaningless for the goal</p>",
        "id": 419838221,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1707139378
    },
    {
        "content": "<p>This is most likely what you want:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">calculate_votes_permutation</span><span class=\"o\">:</span>\n<span class=\"w\">  </span><span class=\"kp\">fixes</span>\n<span class=\"w\">    </span><span class=\"n\">p1</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"'b Parties\"</span><span class=\"w\"> </span><span class=\"kp\">and</span>\n<span class=\"w\">    </span><span class=\"n\">p2</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"s\">\"'b Parties\"</span><span class=\"w\"> </span><span class=\"kp\">and</span>\n<span class=\"w\">    </span><span class=\"n\">profile</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"s\">\"'b Profile\"</span><span class=\"w\"> </span><span class=\"kp\">and</span>\n<span class=\"w\">    </span><span class=\"n\">votes</span><span class=\"o\">::</span><span class=\"s\">\"'b Votes\"</span>\n<span class=\"w\">  </span><span class=\"kp\">assumes</span><span class=\"w\"> </span><span class=\"s\">\"p1 &lt;~~&gt; p2\"</span>\n<span class=\"w\">  </span><span class=\"kp\">shows</span><span class=\"w\"> </span><span class=\"s\">\"calculate_votes p1 profile votes = calculate_votes p2 profile votes\"</span>\n</code></pre></div>",
        "id": 419838312,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1707139414
    },
    {
        "content": "<p>and then the proof should actually work</p>",
        "id": 419838358,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1707139437
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"233198\">Mathias Fleury</span> <a href=\"#narrow/stream/238552-Beginner-Questions/topic/Foldr.20invariant.20on.20permutations/near/419838358\">said</a>:</p>\n<blockquote>\n<p>and then the proof should actually work</p>\n</blockquote>\n<p>it does not, there is the same error as before. today i will try to do it with multisets through fold_mset, but at this point i am just curious to know why it still does not work.</p>",
        "id": 419839761,
        "sender_full_name": "Salvatore Francesco Rossetta",
        "timestamp": 1707139862
    },
    {
        "content": "<p>You removed the <code>assume \"p1 &lt;~~&gt; p2\"</code> right?</p>",
        "id": 419841923,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1707140557
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"233198\">Mathias Fleury</span> <a href=\"#narrow/stream/238552-Beginner-Questions/topic/Foldr.20invariant.20on.20permutations/near/419841923\">said</a>:</p>\n<blockquote>\n<p>You removed the <code>assume \"p1 &lt;~~&gt; p2\"</code> right?</p>\n</blockquote>\n<p>Thank you, I did and changing some details it worked. I slightly rewrote it cleaner and now I am working on the second case</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">proof</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">cases</span><span class=\"w\"> </span><span class=\"s\">\"p1 = []\"</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"k\">case</span><span class=\"w\"> </span><span class=\"n\">True</span>\n<span class=\"w\">  </span><span class=\"k\">with</span><span class=\"w\"> </span><span class=\"n\">assms</span><span class=\"w\"> </span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">thesis</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"n\">add</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">perm_empty_imp</span><span class=\"o\">)</span>\n<span class=\"k\">next</span>\n<span class=\"w\">  </span><span class=\"k\">case</span><span class=\"w\"> </span><span class=\"n\">False</span>\n<span class=\"w\">  </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"k\">obtain</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">p1'</span><span class=\"w\"> </span><span class=\"kp\">where</span><span class=\"w\"> </span><span class=\"s\">\"p1 = x # p1'\"</span>\n<span class=\"w\">    </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">meson</span><span class=\"w\"> </span><span class=\"n\">list.exhaust</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"k\">obtain</span><span class=\"w\"> </span><span class=\"n\">p2'</span><span class=\"w\"> </span><span class=\"kp\">where</span><span class=\"w\"> </span><span class=\"s\">\"p2 &lt;~~&gt; x # p2'\"</span>\n<span class=\"w\">    </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">assms</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">metis</span>\n<span class=\"w\">  </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"s\">\"p2' &lt;~~&gt; p1'\"</span>\n<span class=\"w\">  </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"s\">‹p1 = x # p1'›</span><span class=\"w\"> </span><span class=\"n\">assms</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">auto</span>\n<span class=\"w\">  </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"s\">\"calculate_votes p1 profile votes = calculate_votes (x # p1') profile votes\"</span>\n<span class=\"w\">    </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">assms</span>\n<span class=\"w\">  </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"n\">add</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">‹p1 = x # p1'›</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"k\">also</span><span class=\"w\"> </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"s\">\"... = calculate_votes p1' profile (count_votes x profile empty_votes 0)\"</span>\n<span class=\"w\">    </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">simp</span>\n<span class=\"w\">  </span><span class=\"k\">also</span><span class=\"w\"> </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"s\">\"... = calculate_votes p2' profile (count_votes x profile empty_votes 0)\"</span>\n<span class=\"w\">    </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">assms</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">simp</span>\n<span class=\"w\">  </span><span class=\"k\">also</span><span class=\"w\"> </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"s\">\"... = calculate_votes p2 profile votes\"</span>\n<span class=\"w\">    </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"s\">‹p2 &lt;~~&gt; x # p2'›</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">simp</span>\n<span class=\"w\">  </span><span class=\"k\">finally</span><span class=\"w\"> </span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">thesis</span><span class=\"w\"> </span><span class=\"ow\">.</span>\n<span class=\"k\">qed</span>\n</code></pre></div>\n<p>I wrote the first steps and they work perfectly but the \"... = calculate_votes p2' profile (count_votes x profile empty_votes 0)\" step does not work, I think related to the \"step n\" for which I assume the lemma works in the induction proofs. So I should add this somewhere? but not as an assumption, for what I understood.</p>",
        "id": 419896204,
        "sender_full_name": "Salvatore Francesco Rossetta",
        "timestamp": 1707155465
    },
    {
        "content": "<p><code>step</code> contain all the theorem (IH + all assumptions). Therefore, <code>using step</code> may be what you are missing.</p>",
        "id": 419914919,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1707162042
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"233198\">Mathias Fleury</span> <a href=\"#narrow/stream/238552-Beginner-Questions/topic/Foldr.20invariant.20on.20permutations/near/419914919\">said</a>:</p>\n<blockquote>\n<p><code>step</code> contain all the theorem (IH + all assumptions). Therefore, <code>using step</code> may be what you are missing.</p>\n</blockquote>\n<p>it's still not working, also the error is the same:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"n\">calculate_votes</span><span class=\"w\"> </span><span class=\"n\">p1'</span><span class=\"w\"> </span><span class=\"n\">profile</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">count_votes</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">profile</span><span class=\"w\"> </span><span class=\"n\">empty_votes</span><span class=\"w\"> </span><span class=\"n\">0</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">     </span><span class=\"n\">calculate_votes</span><span class=\"w\"> </span><span class=\"n\">p2'</span><span class=\"w\"> </span><span class=\"n\">profile</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">count_votes</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">profile</span><span class=\"w\"> </span><span class=\"n\">empty_votes</span><span class=\"w\"> </span><span class=\"n\">0</span><span class=\"o\">)</span>\n<span class=\"k\">proof</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">state</span><span class=\"o\">)</span>\n<span class=\"n\">this</span><span class=\"o\">:</span>\n<span class=\"w\">  </span><span class=\"n\">calculate_votes</span><span class=\"w\"> </span><span class=\"n\">p1'</span><span class=\"w\"> </span><span class=\"n\">profile</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">count_votes</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">profile</span><span class=\"w\"> </span><span class=\"n\">empty_votes</span><span class=\"w\"> </span><span class=\"n\">0</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">  </span><span class=\"n\">calculate_votes</span><span class=\"w\"> </span><span class=\"n\">p2'</span><span class=\"w\"> </span><span class=\"n\">profile</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">count_votes</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">profile</span><span class=\"w\"> </span><span class=\"n\">empty_votes</span><span class=\"w\"> </span><span class=\"n\">0</span><span class=\"o\">)</span>\n\n<span class=\"n\">goal</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">1</span><span class=\"w\"> </span><span class=\"n\">subgoal</span><span class=\"o\">):</span>\n<span class=\"w\"> </span><span class=\"n\">1.</span><span class=\"w\"> </span><span class=\"n\">p1</span><span class=\"w\"> </span><span class=\"n\">≠</span><span class=\"w\"> </span><span class=\"o\">[]</span><span class=\"w\"> </span><span class=\"n\">⟹</span><span class=\"w\"> </span><span class=\"n\">calculate_votes</span><span class=\"w\"> </span><span class=\"n\">p1</span><span class=\"w\"> </span><span class=\"n\">profile</span><span class=\"w\"> </span><span class=\"n\">votes</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">calculate_votes</span><span class=\"w\"> </span><span class=\"n\">p2</span><span class=\"w\"> </span><span class=\"n\">profile</span><span class=\"w\"> </span><span class=\"n\">votes</span>\n<span class=\"n\">Failed</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"n\">initial</span><span class=\"w\"> </span><span class=\"k\">proof</span><span class=\"w\"> </span><span class=\"n\">method⌂</span><span class=\"o\">:</span>\n<span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">this</span><span class=\"o\">:</span>\n<span class=\"w\">    </span><span class=\"n\">mset</span><span class=\"w\"> </span><span class=\"n\">p1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">mset</span><span class=\"w\"> </span><span class=\"n\">p2</span>\n<span class=\"w\">    </span><span class=\"o\">?</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">∈</span><span class=\"w\"> </span><span class=\"n\">ccpo_class.iterates</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"n\">⟹</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">∈</span><span class=\"w\"> </span><span class=\"n\">ccpo_class.iterates</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">f</span>\n<span class=\"n\">goal</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">1</span><span class=\"w\"> </span><span class=\"n\">subgoal</span><span class=\"o\">):</span>\n<span class=\"w\"> </span><span class=\"n\">1.</span><span class=\"w\"> </span><span class=\"n\">calculate_votes</span><span class=\"w\"> </span><span class=\"n\">p1'</span><span class=\"w\"> </span><span class=\"n\">profile</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">count_votes</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">profile</span><span class=\"w\"> </span><span class=\"n\">empty_votes</span><span class=\"w\"> </span><span class=\"n\">0</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">    </span><span class=\"n\">calculate_votes</span><span class=\"w\"> </span><span class=\"n\">p2'</span><span class=\"w\"> </span><span class=\"n\">profile</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">count_votes</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">profile</span><span class=\"w\"> </span><span class=\"n\">empty_votes</span><span class=\"w\"> </span><span class=\"n\">0</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>It is really weird, since this step should be solved by IH</p>",
        "id": 419997682,
        "sender_full_name": "Salvatore Francesco Rossetta",
        "timestamp": 1707208436
    },
    {
        "content": "<p>I am lost in the proof you are actually running, but where are you doing induction? Currently I see only a case distinction <code>cases</code></p>",
        "id": 419998245,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1707208677
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"233198\">Mathias Fleury</span> <a href=\"#narrow/stream/238552-Beginner-Questions/topic/Foldr.20invariant.20on.20permutations/near/419998245\">said</a>:</p>\n<blockquote>\n<p>I am lost in the proof you are actually running, but where are you doing induction? Currently I see only a case distinction <code>cases</code></p>\n</blockquote>\n<p>Currently this is my code</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">calculate_votes</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"'b list ⇒ 'b Profile ⇒'b Votes ⇒ 'b Votes\"</span><span class=\"w\"> </span><span class=\"kp\">where</span>\n<span class=\"w\">  </span><span class=\"s\">\"calculate_votes [] profile_list votes = votes\"</span><span class=\"w\"> </span><span class=\"o\">|</span>\n<span class=\"w\">  </span><span class=\"s\">\"calculate_votes (px # p) profile_list votes =</span>\n<span class=\"s\">      calculate_votes p profile_list (count_votes px profile_list empty_votes 0)\"</span>\n\n\n<span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">calculate_votes_permutation</span><span class=\"o\">:</span>\n<span class=\"w\">  </span><span class=\"kp\">fixes</span>\n<span class=\"w\">    </span><span class=\"n\">p1</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"'b Parties\"</span><span class=\"w\"> </span><span class=\"kp\">and</span>\n<span class=\"w\">    </span><span class=\"n\">p2</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"s\">\"'b Parties\"</span><span class=\"w\"> </span><span class=\"kp\">and</span>\n<span class=\"w\">    </span><span class=\"n\">profile</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"s\">\"'b Profile\"</span><span class=\"w\"> </span><span class=\"kp\">and</span>\n<span class=\"w\">    </span><span class=\"n\">votes</span><span class=\"o\">::</span><span class=\"s\">\"'b Votes\"</span>\n<span class=\"w\">  </span><span class=\"kp\">assumes</span><span class=\"w\"> </span><span class=\"s\">\"p1 &lt;~~&gt; p2\"</span>\n<span class=\"w\">  </span><span class=\"kp\">shows</span><span class=\"w\"> </span><span class=\"s\">\"calculate_votes p1 profile votes = calculate_votes p2 profile votes\"</span>\n<span class=\"k\">proof</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">cases</span><span class=\"w\"> </span><span class=\"s\">\"p1 = []\"</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"k\">case</span><span class=\"w\"> </span><span class=\"n\">True</span>\n<span class=\"w\">  </span><span class=\"k\">with</span><span class=\"w\"> </span><span class=\"n\">assms</span><span class=\"w\"> </span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">thesis</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"n\">add</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">perm_empty_imp</span><span class=\"o\">)</span>\n<span class=\"k\">next</span>\n<span class=\"w\">  </span><span class=\"k\">case</span><span class=\"w\"> </span><span class=\"n\">False</span>\n<span class=\"w\">  </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"k\">obtain</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">p1'</span><span class=\"w\"> </span><span class=\"kp\">where</span><span class=\"w\"> </span><span class=\"s\">\"p1 = x # p1'\"</span>\n<span class=\"w\">    </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">meson</span><span class=\"w\"> </span><span class=\"n\">list.exhaust</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"k\">obtain</span><span class=\"w\"> </span><span class=\"n\">p2'</span><span class=\"w\"> </span><span class=\"kp\">where</span><span class=\"w\"> </span><span class=\"s\">\"p2 &lt;~~&gt; x # p2'\"</span>\n<span class=\"w\">    </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">assms</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">metis</span>\n<span class=\"w\">  </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"s\">\"p2' &lt;~~&gt; p1'\"</span>\n<span class=\"w\">  </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"s\">‹p1 = x # p1'›</span><span class=\"w\"> </span><span class=\"n\">assms</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">auto</span>\n<span class=\"w\">  </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"s\">\"calculate_votes p1 profile votes = calculate_votes (x # p1') profile votes\"</span>\n<span class=\"w\">    </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">assms</span>\n<span class=\"w\">  </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"n\">add</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">‹p1 = x # p1'›</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"k\">also</span><span class=\"w\"> </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"s\">\"... = calculate_votes p1' profile (count_votes x profile empty_votes 0)\"</span>\n<span class=\"w\">    </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">simp</span>\n<span class=\"w\">  </span><span class=\"k\">also</span><span class=\"w\"> </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"s\">\"... = calculate_votes p2' profile (count_votes x profile empty_votes 0)\"</span>\n<span class=\"w\">    </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">step</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">simp</span>\n<span class=\"w\">  </span><span class=\"k\">also</span><span class=\"w\"> </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"s\">\"... = calculate_votes p2 profile votes\"</span>\n<span class=\"w\">    </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"s\">‹p2 &lt;~~&gt; x # p2'›</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">simp</span>\n<span class=\"w\">  </span><span class=\"k\">finally</span><span class=\"w\"> </span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">thesis</span><span class=\"w\"> </span><span class=\"ow\">.</span>\n<span class=\"k\">qed</span>\n</code></pre></div>\n<p>The True case works, I am in the False one, stuck in the step where I use \"step\" as you suggested. The only thing I can think of is that I define p2 as a permutation of x # p2' and not as being itself p2 = x # p2', so maybe the IH does not work as expected?</p>",
        "id": 419998941,
        "sender_full_name": "Salvatore Francesco Rossetta",
        "timestamp": 1707208954
    }
]