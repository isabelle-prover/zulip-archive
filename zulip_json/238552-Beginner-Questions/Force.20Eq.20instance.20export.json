[
    {
        "content": "<p>How can I force an <code>Eq</code> Haskell instance export? I am able to export the equality functions, but I need to manually create the instances... and for some types the instances are created automatically.</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">export_code</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">--</span><span class=\"w\"> </span><span class=\"ow\">...</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">equal_TransactionWarning_inst.equal_TransactionWarning</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">equal_Payment_inst.equal_Payment</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kp\">in</span><span class=\"w\"> </span><span class=\"n\">Haskell</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">string_classes</span><span class=\"o\">)</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 306643850,
        "sender_full_name": "Hernán Rajchert",
        "timestamp": 1666960193
    },
    {
        "content": "<p>maybe also export \"(=) :: type_you_want =&gt; _\"?</p>",
        "id": 306644671,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1666960384
    },
    {
        "content": "<p><a href=\"/user_uploads/14278/X_6n7w8zPYO5S5b87ui7-goI/Screen-Shot-2022-10-28-at-09.54.44.png\">Screen-Shot-2022-10-28-at-09.54.44.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/14278/X_6n7w8zPYO5S5b87ui7-goI/Screen-Shot-2022-10-28-at-09.54.44.png\" title=\"Screen-Shot-2022-10-28-at-09.54.44.png\"><img src=\"/user_uploads/14278/X_6n7w8zPYO5S5b87ui7-goI/Screen-Shot-2022-10-28-at-09.54.44.png\"></a></div>",
        "id": 306648811,
        "sender_full_name": "Hernán Rajchert",
        "timestamp": 1666961709
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">datatype</span><span class=\"w\"> </span><span class=\"n n-Type\">'a</span><span class=\"w\"> </span><span class=\"n\">test</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"w\"> </span><span class=\"n n-Type\">'a</span><span class=\"w\"></span>\n<span class=\"k\">export_code</span><span class=\"w\"> </span><span class=\"s\">\"equal_class.equal :: 'a test ⇒ _\"</span><span class=\"w\"> </span><span class=\"kp\">in</span><span class=\"w\"> </span><span class=\"n\">Haskell</span><span class=\"w\"></span>\n</code></pre></div>\n<p>?</p>",
        "id": 306651188,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1666962404
    },
    {
        "content": "<p>(I don't understand Haskell… so this is just a guess)</p>",
        "id": 306651806,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1666962572
    },
    {
        "content": "<p>That by itselfs exports the following <a href=\"/user_uploads/14278/jISmykD09EcKpiZLCm9pV0uk/Screen-Shot-2022-10-28-at-10.17.01.png\">Screen-Shot-2022-10-28-at-10.17.01.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/14278/jISmykD09EcKpiZLCm9pV0uk/Screen-Shot-2022-10-28-at-10.17.01.png\" title=\"Screen-Shot-2022-10-28-at-10.17.01.png\"><img src=\"/user_uploads/14278/jISmykD09EcKpiZLCm9pV0uk/Screen-Shot-2022-10-28-at-10.17.01.png\"></a></div>",
        "id": 306653424,
        "sender_full_name": "Hernán Rajchert",
        "timestamp": 1666963050
    },
    {
        "content": "<p>Not sure if you meant to use it like this, but this has the same problem than before <a href=\"/user_uploads/14278/Bml_CXnBsr-v945XEkMpbE_J/Screen-Shot-2022-10-28-at-10.17.57.png\">Screen-Shot-2022-10-28-at-10.17.57.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/14278/Bml_CXnBsr-v945XEkMpbE_J/Screen-Shot-2022-10-28-at-10.17.57.png\" title=\"Screen-Shot-2022-10-28-at-10.17.57.png\"><img src=\"/user_uploads/14278/Bml_CXnBsr-v945XEkMpbE_J/Screen-Shot-2022-10-28-at-10.17.57.png\"></a></div>",
        "id": 306653632,
        "sender_full_name": "Hernán Rajchert",
        "timestamp": 1666963113
    },
    {
        "content": "<p>I expected that <code>equal_class.equal :: 'a test ⇒ _</code> would cover the second case…</p>",
        "id": 306654261,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1666963287
    },
    {
        "content": "<p>so exporting the first would be sufficient for your aim</p>",
        "id": 306654368,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1666963312
    },
    {
        "content": "<p>if not, I think that I need a MWE…</p>",
        "id": 306654516,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1666963339
    },
    {
        "content": "<p>MWE?</p>",
        "id": 306655618,
        "sender_full_name": "Hernán Rajchert",
        "timestamp": 1666963645
    },
    {
        "content": "<p>minimal working example</p>",
        "id": 306656096,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1666963768
    },
    {
        "content": "<p>so, this code </p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">theory</span><span class=\"w\"> </span><span class=\"n\">Example</span><span class=\"w\"></span>\n\n<span class=\"kp\">imports</span><span class=\"w\"> </span><span class=\"n\">Main</span><span class=\"w\"></span>\n\n<span class=\"k\">begin</span><span class=\"w\"></span>\n\n\n<span class=\"k\">datatype</span><span class=\"w\"> </span><span class=\"n\">Custom</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">B</span><span class=\"w\"></span>\n\n<span class=\"k\">datatype</span><span class=\"w\"> </span><span class=\"n n-Type\">'a</span><span class=\"w\"> </span><span class=\"n\">test</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"w\"> </span><span class=\"n n-Type\">'a</span><span class=\"w\"></span>\n\n\n<span class=\"k\">export_code</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">equal_Custom_inst.equal_Custom</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"s\">\"equal_class.equal :: 'a test ⇒ _\"</span><span class=\"w\"> </span><span class=\"kp\">in</span><span class=\"w\"> </span><span class=\"n\">Haskell</span><span class=\"w\"></span>\n\n\n<span class=\"k\">end</span><span class=\"w\"></span>\n</code></pre></div>\n<p>is exported as </p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"ow\">{</span><span class=\"o\">-</span><span class=\"n\">#</span><span class=\"w\"> </span><span class=\"n\">LANGUAGE</span><span class=\"w\"> </span><span class=\"n\">EmptyDataDecls</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">RankNTypes</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">ScopedTypeVariables</span><span class=\"w\"> </span><span class=\"n\">#</span><span class=\"o\">-</span><span class=\"ow\">}</span><span class=\"w\"></span>\n\n<span class=\"n\">module</span><span class=\"w\"> </span><span class=\"n\">Example</span><span class=\"o\">(</span><span class=\"n\">Test</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">Custom</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">equal_test</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">equal_Custom</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"kp\">where</span><span class=\"w\"> </span><span class=\"ow\">{</span><span class=\"w\"></span>\n\n<span class=\"n\">import</span><span class=\"w\"> </span><span class=\"n\">Prelude</span><span class=\"w\"> </span><span class=\"o\">((==),</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">/</span><span class=\"o\">=),</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">&lt;</span><span class=\"o\">),</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">&lt;</span><span class=\"o\">=),</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">&gt;</span><span class=\"o\">=),</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">&gt;</span><span class=\"o\">),</span><span class=\"w\"> </span><span class=\"o\">(+),</span><span class=\"w\"> </span><span class=\"o\">(-),</span><span class=\"w\"> </span><span class=\"c\">(*), (/), (**),</span>\n<span class=\"c\">  (&gt;&gt;=), (&gt;&gt;), (=&lt;&lt;), (&amp;&amp;), (||), (^), (^^), (.), ($), ($!), (++), (!!), Eq,</span>\n<span class=\"c\">  error, id, return, not, fst, snd, map, filter, concat, concatMap, reverse,</span>\n<span class=\"c\">  zip, null, takeWhile, dropWhile, all, any, Integer, negate, abs, divMod,</span>\n<span class=\"c\">  String, Bool(True, False), Maybe(Nothing, Just));</span>\n<span class=\"c\">import qualified Prelude;</span>\n\n<span class=\"c\">newtype Test a = T a;</span>\n\n<span class=\"c\">data Custom = A | B;</span>\n\n<span class=\"c\">equal_test :: forall a. (Eq a) =&gt; Test a -&gt; Test a -&gt; Bool;</span>\n<span class=\"c\">equal_test (T x) (T ya) = x == ya;</span>\n\n<span class=\"c\">equal_Custom :: Custom -&gt; Custom -&gt; Bool;</span>\n<span class=\"c\">equal_Custom A B = False;</span>\n<span class=\"c\">equal_Custom B A = False;</span>\n<span class=\"c\">equal_Custom B B = True;</span>\n<span class=\"c\">equal_Custom A A = True;</span>\n\n<span class=\"c\">}</span>\n</code></pre></div>\n<p>I can export equal_Custom, but I don't know how to export <code>Eq Custom</code>.</p>",
        "id": 306659148,
        "sender_full_name": "Hernán Rajchert",
        "timestamp": 1666964615
    },
    {
        "content": "<p>In the real code, I do get some <code>Eq</code> instances generated, but I don't know what triggers them <a href=\"https://github.com/input-output-hk/marlowe/blob/master/isabelle/generated/SemanticsTypes.hs#L366\">https://github.com/input-output-hk/marlowe/blob/master/isabelle/generated/SemanticsTypes.hs#L366</a></p>",
        "id": 306659265,
        "sender_full_name": "Hernán Rajchert",
        "timestamp": 1666964647
    },
    {
        "content": "<p>I never tried exporting code to Haskell, but here is a hack that might help.  I guess the problem is that your code \"never needs\" the actual <code>Eq</code> instance, so it is not generated. </p>\n<p>If we force a use of <code>Eq</code> by means of the following the instances are generated:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">definition</span><span class=\"w\"> </span><span class=\"n\">eq_wrap</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"'a ⇒ 'a ⇒ bool\"</span><span class=\"w\"> </span><span class=\"kp\">where</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"s\">\"eq_wrap x y = (x=y)\"</span><span class=\"w\"></span>\n<span class=\"k\">definition</span><span class=\"w\"> </span><span class=\"n\">eq_export_helper_test</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"'a test ⇒ 'a test ⇒ bool\"</span><span class=\"w\"> </span><span class=\"kp\">where</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"s\">\"eq_export_helper_test x y = eq_wrap x y\"</span><span class=\"w\"></span>\n<span class=\"k\">definition</span><span class=\"w\"> </span><span class=\"n\">eq_export_helper_Custom</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"Custom ⇒ Custom ⇒ bool\"</span><span class=\"w\"> </span><span class=\"kp\">where</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"s\">\"eq_export_helper_Custom x y = eq_wrap x y\"</span><span class=\"w\"></span>\n\n<span class=\"k\">export_code</span><span class=\"w\"> </span><span class=\"n\">eq_export_helper_test</span><span class=\"w\"> </span><span class=\"n\">eq_export_helper_Custom</span><span class=\"w\"> </span><span class=\"kp\">in</span><span class=\"w\"> </span><span class=\"n\">Haskell</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Maybe this can give you an idea on how to proceed.</p>",
        "id": 306681084,
        "sender_full_name": "Simon Roßkopf",
        "timestamp": 1666970032
    },
    {
        "content": "<p>This works</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">definition</span><span class=\"w\"> </span><span class=\"n\">eq_wrap</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"'a ⇒ 'a ⇒ bool\"</span><span class=\"w\"> </span><span class=\"kp\">where</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"s\">\"eq_wrap x y = (x=y)\"</span><span class=\"w\"></span>\n\n<span class=\"k\">definition</span><span class=\"w\"> </span><span class=\"n\">eq_export_helper_Custom</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"Custom ⇒ Custom ⇒ bool\"</span><span class=\"w\"> </span><span class=\"kp\">where</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"s\">\"eq_export_helper_Custom x y =  eq_wrap x y\"</span><span class=\"w\"></span>\n\n<span class=\"k\">export_code</span><span class=\"w\">  </span><span class=\"n\">eq_export_helper_Custom</span><span class=\"w\"> </span><span class=\"kp\">in</span><span class=\"w\"> </span><span class=\"n\">Haskell</span><span class=\"w\"></span>\n</code></pre></div>\n<p>This doesn't.</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">definition</span><span class=\"w\"> </span><span class=\"n\">eq_export_helper_Custom</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"Custom ⇒ Custom ⇒ bool\"</span><span class=\"w\"> </span><span class=\"kp\">where</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"s\">\"eq_export_helper_Custom x y =  (x = y)\"</span><span class=\"w\"></span>\n\n<span class=\"k\">export_code</span><span class=\"w\">  </span><span class=\"n\">eq_export_helper_Custom</span><span class=\"w\"> </span><span class=\"kp\">in</span><span class=\"w\"> </span><span class=\"n\">Haskell</span><span class=\"w\"></span>\n</code></pre></div>\n<p>I assume because <code>eq_wrap</code> works generically on a type that has <code>Eq</code>... Not the pretiest solution, but it works :D.</p>\n<p>Thanks!</p>",
        "id": 306701955,
        "sender_full_name": "Hernán Rajchert",
        "timestamp": 1666975377
    }
]