[
    {
        "content": "<p>Hi all,</p>\n<p>In a formalization I'm looking at they are making an implicit assumption that I find hard to encode. They define a merge operator \"|\" for maps from integers to some object. This merging operator is only defined if the key sets of both maps do not overlap, otherwise the results is undefined. After that, they state that, \"wherever \"|\" is used, we implicitly assume the keysets do not overlap\". I see three options here if I want to write this in Isabelle:</p>\n<ol>\n<li>Add some kind of axiom saying, for all p|q, keys(p) does not overlap with keys(q). I haven't tried this yet because I don't really know how to add axioms like this, but I'm afraid that Isabelle's automization will pick this up and use it to complete all remaining proofs (as it's clearly possible to construct a p and q that both map 1 to some object). Will Isabelle indeed do this? Or can I safely add such an axiom? If so, how?</li>\n<li>Make the partiality explicit, as in, make the type of |: key =&gt; key =&gt; object option. The downside of that is that now the merge operator doesn't compose nicely with itself anymore.</li>\n<li>This is what I eventually went with: have the merge operator check if the inputs overlap. If so, it returns \"undefined\". If they don't overlap, it returns the actual merge of the two maps. This is faithful to the pen and paper formalization, but this does mean I have to write down this disjointness property everywhere. In addition, I have not yet managed to get the simp rules right such that such facts are easily derivable where they are needed. I'm constantly tweaking them, but there seems to be a limit to how much work I can automate away.</li>\n</ol>\n<p>Is option 3 the way to go? Or are there other options I might be missing? I'd also be interested to see any formalizations where they also had this problem, to see how they solved it.</p>",
        "id": 391857135,
        "sender_full_name": "Bob Rubbens",
        "timestamp": 1695111750
    },
    {
        "content": "<p>what about an option 4: pick a reasonable default for the case where keys overlap (for example, make it equal to the output from <code>q</code> always), in a way that makes as many of your lemmas as easy/unconditional as possible?</p>",
        "id": 391866654,
        "sender_full_name": "Yong Kiam",
        "timestamp": 1695114932
    },
    {
        "content": "<p>The book relies a bit on commutativity, associativity, which would no longer be the case with such a rule. I think you can probably make it work but then I would worry about my results corresponding to the results in the book...</p>",
        "id": 391867249,
        "sender_full_name": "Bob Rubbens",
        "timestamp": 1695115129
    },
    {
        "content": "<p>Option 1 is never going to work (you need dependent types to do that). If the order is only used for proofs, I would go for option 2 and make the transformation explicit (like value + Max_vaule (lhs)). Otherwise, I would use 3 (because this matches what is happening here: you make explicit something implicit but you do not assume more than before)</p>",
        "id": 391867516,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1695115211
    },
    {
        "content": "<p>BTW instead of returning undefined, you could just let the merge operator do something, but not caring about the result</p>",
        "id": 391867608,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1695115251
    },
    {
        "content": "<p>So there is no need for a special case</p>",
        "id": 391867650,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1695115267
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"233198\">Mathias Fleury</span> <a href=\"#narrow/stream/238552-Beginner-Questions/topic/Formalizing.20implicit.20assumption.20from.20pen.20and.20paper/near/391867608\">said</a>:</p>\n<blockquote>\n<p>BTW instead of returning undefined, you could just let the merge operator do something, but not caring about the result</p>\n</blockquote>\n<p>That makes sense. Is there a downside to using undefined?</p>",
        "id": 391867860,
        "sender_full_name": "Bob Rubbens",
        "timestamp": 1695115336
    },
    {
        "content": "<p>I see it the other way around: there is no advantage to using undefined</p>",
        "id": 391867969,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1695115377
    },
    {
        "content": "<p>actually, I now see the advantage of using undefined as the default: the commutativity and associativity laws still hold unconditionally, right?</p>",
        "id": 391868098,
        "sender_full_name": "Yong Kiam",
        "timestamp": 1695115420
    },
    {
        "content": "<p>Without undefined you save an if</p>",
        "id": 391868104,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1695115422
    },
    {
        "content": "<p>Hmm, so I don't have to be afraid of my proofs depending on a known constant, instead of an unknown constant...? (Sorry, with Isabelle I'm just never sure about how paranoid I should be)</p>",
        "id": 391868123,
        "sender_full_name": "Bob Rubbens",
        "timestamp": 1695115426
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"234226\">Yong Kiam</span> <a href=\"#narrow/stream/238552-Beginner-Questions/topic/Formalizing.20implicit.20assumption.20from.20pen.20and.20paper/near/391868098\">said</a>:</p>\n<blockquote>\n<p>actually, I now see the advantage of using undefined as the default: the commutativity and associativity laws still hold unconditionally, right?</p>\n</blockquote>\n<p>ah that is a good point</p>",
        "id": 391868420,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1695115522
    },
    {
        "content": "<p>but then instead of undefined you could use some empty value, like done for division</p>",
        "id": 391868486,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1695115549
    },
    {
        "content": "<p>(1/0 = 0)</p>",
        "id": 391868503,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1695115559
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"613529\">Bob Rubbens</span> <a href=\"#narrow/stream/238552-Beginner-Questions/topic/Formalizing.20implicit.20assumption.20from.20pen.20and.20paper/near/391868123\">said</a>:</p>\n<blockquote>\n<p>Hmm, so I don't have to be afraid of my proofs depending on a known constant, instead of an unknown constant...? (Sorry, with Isabelle I'm just never sure about how paranoid I should be)</p>\n</blockquote>\n<p>in most context, you will anyway that there is no overlapâ€¦</p>",
        "id": 391868649,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1695115597
    },
    {
        "content": "<p>But Yong has a good point! I did not think of that</p>",
        "id": 391868705,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1695115615
    },
    {
        "content": "<p>I mean, I might forget adding this as an assumption sometimes...</p>",
        "id": 391868742,
        "sender_full_name": "Bob Rubbens",
        "timestamp": 1695115629
    }
]