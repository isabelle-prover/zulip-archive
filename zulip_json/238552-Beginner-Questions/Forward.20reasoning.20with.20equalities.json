[
    {
        "content": "<p>I know that if we have two theorems 1: <code>a ==&gt; b</code> and 2: <code>b ==&gt; c</code>, they can be unified to <code>a ==&gt; c</code> like this: 2[OF 1]. But is this also possible for equalities? E.g. if we have <code>a = b</code> and <code>b ==&gt; c</code>, how can <code>a ==&gt; c</code> be concluded by \"forward reasoning\" (or whatever the corresponding methodology is called)?</p>",
        "id": 362753563,
        "sender_full_name": "Christian Zimmerer",
        "timestamp": 1685625899
    },
    {
        "content": "<p>I think you can try </p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">unfolding</span><span class=\"w\"> </span><span class=\"ss\">\\&lt;open&gt;</span><span class=\"s\">a = b</span><span class=\"ss\">\\&lt;close&gt;</span>\n</code></pre></div>\n<p>or </p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">subst</span><span class=\"w\"> </span><span class=\"ss\">\\&lt;open&gt;</span><span class=\"s\">a = b</span><span class=\"ss\">\\&lt;close&gt;</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 362764670,
        "sender_full_name": "Zixuan Fan",
        "timestamp": 1685627801
    },
    {
        "content": "<p>Thank you for your response. I don't want to apply a substitution tactic, I want to <em>directly</em> insert the equality, e.g. for display in a <code>thm</code> command.</p>",
        "id": 362772021,
        "sender_full_name": "Christian Zimmerer",
        "timestamp": 1685629080
    },
    {
        "content": "<p>Don't. Sorry, but Pure is not meant to do this kind of things. It is easier to write a new theorem for it. </p>\n<p>But if need be:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">context</span>\n<span class=\"w\">  </span><span class=\"kp\">fixes</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"n\">c</span>\n<span class=\"w\">  </span><span class=\"kp\">assumes</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"b = a\"</span><span class=\"w\"> </span><span class=\"kp\">and</span><span class=\"w\"> </span><span class=\"n\">B</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"b ⟹ c\"</span>\n<span class=\"k\">begin</span>\n<span class=\"kt\">thm</span><span class=\"w\"> </span><span class=\"n\">back_subst</span><span class=\"o\">[</span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"s\">\"λb. b ⟶ c\"</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">OF</span><span class=\"w\"> </span><span class=\"n\">B</span><span class=\"o\">[</span><span class=\"n\">unfolded</span><span class=\"w\"> </span><span class=\"n\">atomize_imp</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"o\">,</span>\n<span class=\"w\">    </span><span class=\"n\">unfolded</span><span class=\"w\"> </span><span class=\"n\">atomize_imp</span><span class=\"o\">[</span><span class=\"n\">symmetric</span><span class=\"o\">]]</span>\n<span class=\"c\">(*a ⟹ c*)</span>\n</code></pre></div>",
        "id": 362934306,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1685684264
    },
    {
        "content": "<p>Sorry, I've only just started learning Isabelle, so this is probably a dumb question, but what is wrong with:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">context</span>\n<span class=\"w\">  </span><span class=\"kp\">fixes</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"n\">c</span>\n<span class=\"w\">  </span><span class=\"kp\">assumes</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"a = b\"</span><span class=\"w\"> </span><span class=\"kp\">and</span><span class=\"w\"> </span><span class=\"n\">B</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"b ⟹ c\"</span>\n<span class=\"k\">begin</span>\n<span class=\"kt\">thm</span><span class=\"w\"> </span><span class=\"n\">B</span><span class=\"o\">[</span><span class=\"n\">OF</span><span class=\"w\"> </span><span class=\"n\">iffD1</span><span class=\"o\">[</span><span class=\"n\">OF</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"o\">]]</span>\n</code></pre></div>",
        "id": 363087998,
        "sender_full_name": "Robin Cogan",
        "timestamp": 1685719869
    },
    {
        "content": "<p>That works too</p>",
        "id": 363446748,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1685868242
    },
    {
        "content": "<p>But your approach would not work if instead <code>b ⟹ c</code> you would have <code>P(b) ⟹ c</code>.</p>",
        "id": 363446869,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1685868278
    },
    {
        "content": "<p>Thank you, that was very instructive!</p>",
        "id": 366575644,
        "sender_full_name": "Christian Zimmerer",
        "timestamp": 1686850235
    }
]