[
    {
        "content": "<p>Is it possible to get values out of a datatype?</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">theory</span><span class=\"w\"> </span><span class=\"n\">DataTypeLHS</span>\n<span class=\"kp\">imports</span><span class=\"w\"> </span><span class=\"n\">Main</span><span class=\"w\"> </span><span class=\"k\">begin</span>\n\n<span class=\"k\">datatype</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n n-Type\">'a</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n n-Type\">'b</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">myType</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">MyType</span><span class=\"w\"> </span><span class=\"n n-Type\">'a</span><span class=\"w\"> </span><span class=\"n n-Type\">'b</span>\n\n<span class=\"k\">primrec</span><span class=\"w\"> </span><span class=\"n\">getValues</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"('a, 'b) myType ⇒ ('a*'b)\"</span>\n<span class=\"w\">  </span><span class=\"kp\">where</span>\n<span class=\"w\">  </span><span class=\"s\">\"getValues mt = (let (MyType a b) = mt in (a,b)\"</span>\n</code></pre></div>\n<p>(this does not parse with any of the function definition mechanisms)</p>\n<p>or this is completely against the design of datatypes, concerning abstraction?</p>\n<p>My use case is to have a type for something, but I need to access its constituents for later processing. Again, is <code>type_synonym</code> my tool?</p>",
        "id": 381475858,
        "sender_full_name": "Gergely Buday",
        "timestamp": 1691067866
    },
    {
        "content": "<p>either selectors or with case</p>",
        "id": 381476262,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1691067951
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">datatype</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n n-Type\">'a</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n n-Type\">'b</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">myType</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">MyType</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">myfst</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n n-Type\">'a</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">mysnd</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n n-Type\">'b</span><span class=\"o\">)</span>\n\n\n<span class=\"k\">primrec</span><span class=\"w\"> </span><span class=\"n\">getValues</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"('a, 'b) myType ⇒ ('a*'b)\"</span>\n<span class=\"w\">  </span><span class=\"kp\">where</span>\n<span class=\"w\">  </span><span class=\"s\">\"getValues mt = (myfst mt, mysnd mt)\"</span>\n</code></pre></div>\n<p>or</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">primrec</span><span class=\"w\"> </span><span class=\"n\">getValues</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"('a, 'b) myType ⇒ ('a*'b)\"</span>\n<span class=\"w\">  </span><span class=\"kp\">where</span>\n<span class=\"w\">  </span><span class=\"s\">\"getValues mt = (case mt of MyType (a,b) =&gt;  (a b))\"</span>\n</code></pre></div>",
        "id": 381476765,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1691068049
    },
    {
        "content": "<p>I see. I tried <code>let</code> and it did not work.</p>",
        "id": 381477895,
        "sender_full_name": "Gergely Buday",
        "timestamp": 1691068256
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"595809\">Gergely Buday</span> <a href=\"#narrow/stream/238552-Beginner-Questions/topic/Getting.20values.20out.20of.20a.20datatype/near/381475858\">said</a>:</p>\n<blockquote>\n<p>(this does not parse with any of the function definition mechanisms)</p>\n</blockquote>\n<p>Your problem has nothing to do with function definition mechanisms but rather with <code>let</code>. Note that <code>let</code>, like <code>λ</code>, works only with certain patterns, for example <code>(_, _)</code>. The constructors used in these patterns seem to be introduced using a different, more low-level mechanism.</p>",
        "id": 381478136,
        "sender_full_name": "Wolfgang Jeltsch",
        "timestamp": 1691068313
    },
    {
        "content": "<p>Thank you <span class=\"user-mention\" data-user-id=\"233198\">@Mathias Fleury</span> , the <code>case</code> construction solved my problem.</p>",
        "id": 381479088,
        "sender_full_name": "Gergely Buday",
        "timestamp": 1691068493
    },
    {
        "content": "<p>For a naive solution, I did <code>aValueFormMyType</code> and <code>bValueFromMyType</code> functions to get the values but of course there is a simple and elegant solution for that.</p>",
        "id": 381479615,
        "sender_full_name": "Gergely Buday",
        "timestamp": 1691068581
    },
    {
        "content": "<p>You can also use the <code>fun</code> construct with the function argument being a pattern, something like this:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">getValues</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"('a, 'b) myType ⇒ ('a × 'b)\"</span><span class=\"w\"> </span><span class=\"kp\">where</span>\n<span class=\"w\">  </span><span class=\"s\">\"getValues (MyType a b) = (a, b)\"</span>\n</code></pre></div>",
        "id": 381487866,
        "sender_full_name": "Wolfgang Jeltsch",
        "timestamp": 1691070010
    }
]