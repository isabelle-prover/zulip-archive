[
    {
        "content": "<p>Following the question I made earlier about pattern matching... on a different subgoal I'd like to split a proof into two subgoals, if <code>moneyToPay &lt;= 0</code> and if <code>moneyToPay &gt; 0</code> but when I apply cases on <code>moneyToPay</code> I get <code>&lt; 0</code> or <code>&gt;=0</code>. </p>\n<p>What I'm currently doing:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">next</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">fix</span><span class=\"w\"> </span><span class=\"n\">payFrom</span><span class=\"w\"> </span><span class=\"n\">payTo</span><span class=\"w\"> </span><span class=\"n\">payTok</span><span class=\"w\"> </span><span class=\"n\">payVal</span><span class=\"w\"> </span><span class=\"n\">payCont</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">assume</span><span class=\"w\"> </span><span class=\"n\">Case_Pay</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"validAndPositive_state state\"</span><span class=\"w\"> </span><span class=\"s\">\"cont = Pay payFrom payTo payTok payVal payCont\"</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"k\">obtain</span><span class=\"w\"> </span><span class=\"n\">moneyToPay</span><span class=\"w\"> </span><span class=\"kp\">where</span><span class=\"w\"> </span><span class=\"n\">moneyToPaySimp</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"evalValue env state payVal = moneyToPay\"</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">blast</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">thesis</span><span class=\"w\"> </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">Case_Pay</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">proof</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">cases</span><span class=\"w\"> </span><span class=\"s\">\"moneyToPay\"</span><span class=\"o\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">case</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">neg</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"o\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">thesis</span><span class=\"w\"> </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">Case_Pay</span><span class=\"w\"> </span><span class=\"n\">moneyToPaySimp</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">auto</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">next</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">case</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">nonneg</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"o\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">thesis</span><span class=\"w\">  </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">Case_Pay</span><span class=\"w\"> </span><span class=\"n\">moneyToPaySimp</span><span class=\"w\"> </span><span class=\"n\">nonneg</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"n\">only</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">reduceContractStep.simps</span><span class=\"o\">)</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"n\">only</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Let_def</span><span class=\"o\">)</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"c\">(* I get stucked here because there is an if that says (if int n ≤ 0 then ... else ...) and n can be zero *)</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"n\">only</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">If_def</span><span class=\"o\">)</span><span class=\"w\"></span>\n\n<span class=\"w\">      </span><span class=\"gr\">sorry</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">qed</span><span class=\"w\"></span>\n</code></pre></div>\n<p>This split fails because I cannot simplify an inner if that has as a condition <code>if int n &lt;= 0 then ... else ...</code></p>\n<p>What I would like to do instead:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">next</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">fix</span><span class=\"w\"> </span><span class=\"n\">payFrom</span><span class=\"w\"> </span><span class=\"n\">payTo</span><span class=\"w\"> </span><span class=\"n\">payTok</span><span class=\"w\"> </span><span class=\"n\">payVal</span><span class=\"w\"> </span><span class=\"n\">payCont</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">assume</span><span class=\"w\"> </span><span class=\"n\">Case_Pay</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"validAndPositive_state state\"</span><span class=\"w\"> </span><span class=\"s\">\"cont = Pay payFrom payTo payTok payVal payCont\"</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"k\">obtain</span><span class=\"w\"> </span><span class=\"n\">moneyToPay</span><span class=\"w\"> </span><span class=\"kp\">where</span><span class=\"w\"> </span><span class=\"n\">moneyToPaySimp</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"evalValue env state payVal = moneyToPay\"</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">blast</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">thesis</span><span class=\"w\"> </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">Case_Pay</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">proof</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">cases</span><span class=\"w\"> </span><span class=\"s\">\"moneyToPay\"</span><span class=\"o\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fix</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">presume</span><span class=\"w\"> </span><span class=\"s\">\"moneyToPay ≤ 0\"</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">thesis</span><span class=\"w\"> </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">Case_Pay</span><span class=\"w\"> </span><span class=\"n\">moneyToPaySimp</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">auto</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">next</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fix</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">presume</span><span class=\"w\"> </span><span class=\"s\">\"moneyToPay &gt; 0\"</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">thesis</span><span class=\"w\">  </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">Case_Pay</span><span class=\"w\"> </span><span class=\"n\">moneyToPaySimp</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"gr\">sorry</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">qed</span><span class=\"w\"></span>\n</code></pre></div>\n<p>This has two problems, for some reason I can't use assume and I need to <code>presume</code>, and then I have two extra goals to prove</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"n\">Failed</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">finish</span><span class=\"w\"> </span><span class=\"k\">proof</span><span class=\"o\">:</span><span class=\"w\"></span>\n<span class=\"n\">goal</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">2</span><span class=\"w\"> </span><span class=\"n\">subgoals</span><span class=\"o\">):</span><span class=\"w\"></span>\n<span class=\"w\"> </span><span class=\"n\">1.</span><span class=\"w\"> </span><span class=\"n\">⋀n.</span><span class=\"w\"> </span><span class=\"n\">evalValue</span><span class=\"w\"> </span><span class=\"n\">env</span><span class=\"w\"> </span><span class=\"n\">state</span><span class=\"w\"> </span><span class=\"n\">payVal</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">moneyToPay</span><span class=\"w\"> </span><span class=\"n\">⟹</span><span class=\"w\"></span>\n<span class=\"w\">         </span><span class=\"n\">validAndPositive_state</span><span class=\"w\"> </span><span class=\"n\">state</span><span class=\"w\"> </span><span class=\"n\">⟹</span><span class=\"w\"> </span><span class=\"n\">cont</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Pay</span><span class=\"w\"> </span><span class=\"n\">payFrom</span><span class=\"w\"> </span><span class=\"n\">payTo</span><span class=\"w\"> </span><span class=\"n\">payTok</span><span class=\"w\"> </span><span class=\"n\">payVal</span><span class=\"w\"> </span><span class=\"n\">payCont</span><span class=\"w\"> </span><span class=\"n\">⟹</span><span class=\"w\"> </span><span class=\"n\">moneyToPay</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">int</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"n\">⟹</span><span class=\"w\"> </span><span class=\"n\">moneyToPay</span><span class=\"w\"> </span><span class=\"n\">≤</span><span class=\"w\"> </span><span class=\"n\">0</span><span class=\"w\"></span>\n<span class=\"w\"> </span><span class=\"n\">2.</span><span class=\"w\"> </span><span class=\"n\">⋀n.</span><span class=\"w\"> </span><span class=\"n\">evalValue</span><span class=\"w\"> </span><span class=\"n\">env</span><span class=\"w\"> </span><span class=\"n\">state</span><span class=\"w\"> </span><span class=\"n\">payVal</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">moneyToPay</span><span class=\"w\"> </span><span class=\"n\">⟹</span><span class=\"w\"></span>\n<span class=\"w\">         </span><span class=\"n\">validAndPositive_state</span><span class=\"w\"> </span><span class=\"n\">state</span><span class=\"w\"> </span><span class=\"n\">⟹</span><span class=\"w\"> </span><span class=\"n\">cont</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Pay</span><span class=\"w\"> </span><span class=\"n\">payFrom</span><span class=\"w\"> </span><span class=\"n\">payTo</span><span class=\"w\"> </span><span class=\"n\">payTok</span><span class=\"w\"> </span><span class=\"n\">payVal</span><span class=\"w\"> </span><span class=\"n\">payCont</span><span class=\"w\"> </span><span class=\"n\">⟹</span><span class=\"w\"> </span><span class=\"n\">moneyToPay</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">int</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Suc</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">⟹</span><span class=\"w\"> </span><span class=\"n\">0</span><span class=\"w\"> </span><span class=\"n\">&lt;</span><span class=\"w\"> </span><span class=\"n\">moneyToPay</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 323095284,
        "sender_full_name": "Hernán Rajchert",
        "timestamp": 1674500405
    },
    {
        "content": "<p>Ah, I think just changing the cases to look like this <span aria-label=\"man facepalming\" class=\"emoji emoji-1f926-200d-2642\" role=\"img\" title=\"man facepalming\">:man_facepalming:</span> </p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">proof</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">cases</span><span class=\"w\"> </span><span class=\"s\">\"moneyToPay ≤ 0\"</span><span class=\"o\">)</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 323097326,
        "sender_full_name": "Hernán Rajchert",
        "timestamp": 1674500994
    },
    {
        "content": "<p>Yes, <code>cases</code> can be used in a number of ways. A complete description of the possibilities is in Subsection 6.5.2 of The Isabelle/Isar Reference Manual.</p>\n<p>When passing a boolean expression to <code>cases</code>, like you did above, it makes a case distinction on the boolean in question, with a <code>True</code> and a <code>False</code> case. This is just an example of case distinction for an algebraic datatype; for example, <code>cases</code> with a list expression would use a case for the empty list and a case for non-empty lists.</p>\n<p>Apparently, for <code>int</code>, the default rule for case distinction is the one that distinguishes between non-negative and negative numbers. However, you can always pass the rule to use to the <code>cases</code> method. I did this recently with the <code>linorder_cases</code> rule, which distinguishes between <code>&lt;</code>, <code>=</code>, and <code>&gt;</code> for values of linearly ordered types. You could, in principle, use <code>cases moneyToPay 0 rule: linorder_cases</code>. The advantage would be that you would get nicer case names: <code>less</code>, <code>equal</code>, and <code>greater</code> instead of <code>True</code> and <code>False</code>. However, you would have to handle the less-than and equals cases separately, which is probably not what you want. I don’t know of a rule that would distinguish between just <code>≤</code> and <code>=</code>.</p>",
        "id": 323387566,
        "sender_full_name": "Wolfgang Jeltsch",
        "timestamp": 1674610111
    },
    {
        "content": "<p>That is awesome, I just tried the following and it worked... not sure if best practice though</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">neg_or_positive</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">case_names</span><span class=\"w\"> </span><span class=\"n\">neg_or_zero</span><span class=\"w\"> </span><span class=\"n\">positive</span><span class=\"o\">]:</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"s\">\"(x &lt;= 0 ⟹ P) ⟹ ( ¬ (x ≤ 0) ⟹ P) ⟹ P\"</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">blast</span><span class=\"w\"></span>\n\n\n<span class=\"kn\">lemma</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">proof</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">cases</span><span class=\"w\"> </span><span class=\"s\">\"moneyToPay\"</span><span class=\"w\"> </span><span class=\"n\">rule</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">neg_or_positive</span><span class=\"o\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">case</span><span class=\"w\"> </span><span class=\"n\">neg_or_zero</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">thesis</span><span class=\"w\"> </span><span class=\"gr\">sorry</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">next</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"k\">case</span><span class=\"w\"> </span><span class=\"n\">positive</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">thesis</span><span class=\"w\"> </span><span class=\"gr\">sorry</span><span class=\"w\"></span>\n<span class=\"k\">qed</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 323491157,
        "sender_full_name": "Hernán Rajchert",
        "timestamp": 1674655110
    },
    {
        "content": "<p>This is perfectly fine, although I for one would replace the <code>¬(x ≤ 0)</code> with <code>x &gt; 0</code>. In any case, I don't <em>really</em> see a big advantage over just doing <code>proof (cases \"x ≥ 0\")</code>. Also, <code>neg_or_positive</code> is perhaps a bit misleading because <code>x ≤ 0</code> does not mean ‘negative’).</p>",
        "id": 323501028,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1674657448
    },
    {
        "content": "<p>For some reason <code>x &gt; 0</code> did not worked for me. I think I need to add a <code>linorder</code> restriction to <code>x</code>, but I'm having issues doing that.</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">neg_or_positive</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">case_names</span><span class=\"w\"> </span><span class=\"n\">neg_or_zero</span><span class=\"w\"> </span><span class=\"n\">positive</span><span class=\"o\">]:</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"s\">\"(x &lt;= 0 ⟹ P) ⟹ ( x &gt; 0 ⟹ P) ⟹ P\"</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"kt\">try</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Nitpick says:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"n\">Nitpick</span><span class=\"w\"> </span><span class=\"n\">found</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">counterexample</span><span class=\"w\"> </span><span class=\"kp\">for</span><span class=\"w\"> </span><span class=\"n\">card</span><span class=\"w\"> </span><span class=\"n n-Type\">'a</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">1</span><span class=\"o\">:</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">Free</span><span class=\"w\"> </span><span class=\"n\">variables</span><span class=\"o\">:</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">P</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">False</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">a⇩1</span><span class=\"w\"></span>\n<span class=\"n\">Hint</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Maybe</span><span class=\"w\"> </span><span class=\"n\">you</span><span class=\"w\"> </span><span class=\"n\">forgot</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">type</span><span class=\"w\"> </span><span class=\"n\">constraint</span><span class=\"o\">?</span><span class=\"w\"></span>\n</code></pre></div>\n<p>And this</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">neg_or_positive</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">case_names</span><span class=\"w\"> </span><span class=\"n\">neg_or_zero</span><span class=\"w\"> </span><span class=\"n\">positive</span><span class=\"o\">]:</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"s\">\"((x ::linorder) &lt;= 0 ⟹ P) ⟹ ( x &gt; 0 ⟹ P) ⟹ P\"</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"kt\">try</span><span class=\"w\"></span>\n</code></pre></div>\n<p>yields saying <code>Undefined type name: \"linorder\"⌂</code></p>\n<p>I could rename <code>neg_or_positive</code> to <code>bigger_than_zero</code> <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 323505595,
        "sender_full_name": "Hernán Rajchert",
        "timestamp": 1674658517
    },
    {
        "content": "<p>I think if you just use <code>≤</code> and <code>&gt;</code>, the kind of the type of <code>x</code> is inferred to be the most general one, which is <code>ord</code>, the class that just declares those comparison functions, without any properties. Your rule only holds if you have a linear order.</p>",
        "id": 323507647,
        "sender_full_name": "Wolfgang Jeltsch",
        "timestamp": 1674658960
    },
    {
        "content": "<p>I would choose the name <code>non_positive</code> instead of <code>neg_or_positive</code>, to conform with the name <code>non_negative</code> that the default cases rule of <code>int</code> uses. Also the name of your rule is incorrect, as it excludes the zero case.</p>\n<p>Furthermore, you might want to write the statement of the elimination rule using Isar’s <code>obtains</code>, which allows you to avoid talking about the eliminator-style encoding of disjunction and the variable <code>P</code>.</p>\n<p>Here’s my version of the code:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">non_positive_or_positive</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">case_names</span><span class=\"w\"> </span><span class=\"n\">non_positive</span><span class=\"w\"> </span><span class=\"n\">positive</span><span class=\"o\">]:</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"kp\">fixes</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"'a::{linorder, zero}\"</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"kp\">obtains</span><span class=\"w\"> </span><span class=\"s\">\"x ≤ 0\"</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"s\">\"x &gt; 0\"</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">fastforce</span><span class=\"w\"></span>\n\n<span class=\"kn\">lemma</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"kp\">fixes</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"n\">int</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"kp\">shows</span><span class=\"w\"> </span><span class=\"s\">\"i = i\"</span><span class=\"w\"></span>\n<span class=\"k\">proof</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">cases</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"n\">rule</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">non_positive_or_positive</span><span class=\"o\">)</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">case</span><span class=\"w\"> </span><span class=\"n\">non_positive</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">thesis</span><span class=\"w\"> </span><span class=\"gr\">sorry</span><span class=\"w\"></span>\n<span class=\"k\">next</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">case</span><span class=\"w\"> </span><span class=\"n\">positive</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">thesis</span><span class=\"w\"> </span><span class=\"gr\">sorry</span><span class=\"w\"></span>\n<span class=\"k\">qed</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 323508380,
        "sender_full_name": "Wolfgang Jeltsch",
        "timestamp": 1674659133
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"551600\">Hernán Rajchert</span> <a href=\"#narrow/stream/238552-Beginner-Questions/topic/How.20can.20I.20case.20with.20integers.20with.20a.20custom.20split.20number.3F/near/323505595\">said</a>:</p>\n<blockquote>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">neg_or_positive</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">case_names</span><span class=\"w\"> </span><span class=\"n\">neg_or_zero</span><span class=\"w\"> </span><span class=\"n\">positive</span><span class=\"o\">]:</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"s\">\"((x ::linorder) &lt;= 0 ⟹ P) ⟹ ( x &gt; 0 ⟹ P) ⟹ P\"</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"kt\">try</span><span class=\"w\"></span>\n</code></pre></div>\n<p>yields saying <code>Undefined type name: \"linorder\"⌂</code></p>\n</blockquote>\n<p><code>linorder</code> is not a type but a type class. You have to write it as <code>(x :: 'a :: linorder)</code>. That says that <code>x</code> is of some fixed type <code>'a</code> with the constraint that <code>'a</code> of the type class <code>linorder</code>. Once you finish the proof, Isabelle then automatically makes this polymorphic, i.e. replaces the fixed type variable <code>'a</code> with a schematic type variable <code>?'a</code> that you can replace with any concrete type of type class <code>linorder</code>, such as <code>int</code>, <code>real</code>, …</p>",
        "id": 323680222,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1674728229
    },
    {
        "content": "<p>The typical naming scheme in Isabelle/HOL for <code>&lt; 0</code>, <code>&gt; 0</code>, <code>≥ 0</code>, <code>≤ 0</code>, by the way, is <code>neg</code>, <code>pos</code>, <code>nonneg</code>, <code>nonpos</code>.</p>",
        "id": 323680449,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1674728292
    }
]