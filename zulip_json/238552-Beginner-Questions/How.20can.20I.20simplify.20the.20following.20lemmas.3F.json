[
    {
        "content": "<p>I have a <code>typedef Assets</code> and instantiations for <code>zero</code>, <code>plus</code>, <code>semigroup_add</code>, <code>ab_semigroup_add</code> and some others. And I have the following code</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">type_synonym</span><span class=\"w\"> </span><span class=\"n\">Accounts</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"AccountId ⇀ Assets\"</span><span class=\"w\"></span>\n\n<span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">mergeAccounts</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"Accounts ⇒ Accounts ⇒ Accounts\"</span><span class=\"w\"> </span><span class=\"kp\">where</span><span class=\"w\"></span>\n<span class=\"s\">\"mergeAccounts acc1 acc2 = (λaccId. combine_options (+) (acc1 accId) (acc2 accId))\"</span><span class=\"w\"></span>\n\n<span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">mergeAccountsAssoc</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"mergeAccounts (mergeAccounts a b) c = mergeAccounts a (mergeAccounts b c)\"</span><span class=\"w\"></span>\n<span class=\"k\">proof</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">l</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"mergeAccounts (mergeAccounts a b) c\"</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">r</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"mergeAccounts a (mergeAccounts b c)\"</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"s\">\"⋀x. ?l x = ?r x\"</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"n\">add</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Groups.semigroup_add_class.add.assoc</span><span class=\"w\"> </span><span class=\"n\">combine_options_assoc</span><span class=\"o\">)</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">thus</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">thesis</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">simp</span><span class=\"w\"></span>\n<span class=\"k\">qed</span><span class=\"w\"></span>\n\n<span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">mergeAccountsComm</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"mergeAccounts a b = mergeAccounts b a\"</span><span class=\"w\"></span>\n<span class=\"k\">proof</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">l</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"mergeAccounts a b\"</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">r</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"mergeAccounts b a\"</span><span class=\"w\"></span>\n\n<span class=\"w\">  </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"s\">\"⋀x. ?l x = ?r x\"</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"n\">add</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Groups.ab_semigroup_add_class.add.commute</span><span class=\"w\"> </span><span class=\"n\">combine_options_commute</span><span class=\"o\">)</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">thus</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">thesis</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">simp</span><span class=\"w\"></span>\n<span class=\"k\">qed</span><span class=\"w\"></span>\n</code></pre></div>\n<p>It works, but is rather verbose. Is there a way to simplify this? I was trying to use the <code>is</code> keyword to avoid the formula repetition but I wasn't able to locate the documentation (searching \"is\" by text is hard  <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> ). </p>\n<p>Also, not sure if this applies, but should I <code>transfer</code> the goal or make a subgoal? I struggled trying to solve the problem at the initial level and it was trivial once I started using the <code>let ?l</code>, <code>let ?r</code>.</p>",
        "id": 325286634,
        "sender_full_name": "Hernán Rajchert",
        "timestamp": 1675292729
    },
    {
        "content": "<p>The <code>is</code> keyword works by providing a term (with potential wildcards <code>_</code>) that matches the goal according to higher-order pattern unification. After the <code>is</code> you can use the matched variables to refer to subterms of the goal. In you case it would be <code>(is \"?l = ?r\")</code>.</p>",
        "id": 325637608,
        "sender_full_name": "Lukas Stevens",
        "timestamp": 1675432800
    },
    {
        "content": "<p>I don't know what <code>transfer</code> has to do with your problem. Transfer is used to rewrite the goal in accordance with transfer relations, e.g. transforming a goal that talks about nats to a goal talking about non-negative ints.</p>",
        "id": 325637948,
        "sender_full_name": "Lukas Stevens",
        "timestamp": 1675432873
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"551600\">Hernán Rajchert</span> <a href=\"#narrow/stream/238552-Beginner-Questions/topic/How.20can.20I.20simplify.20the.20following.20lemmas.3F/near/325286634\">said</a>:</p>\n<blockquote>\n<p>I was trying to use the <code>is</code> keyword to avoid the formula repetition but I wasn't able to locate the documentation (searching \"is\" by text is hard  <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> ). </p>\n</blockquote>\n<p>You can look up <code>is</code> in the index at the end of The Isabelle/Isar Reference Manual. <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span> </p>\n<blockquote>\n<p>Also, not sure if this applies, but should I <code>transfer</code> the goal or make a subgoal?</p>\n</blockquote>\n<p>Without having had a deeper look at your code, I would say you shouldn’t use <code>transfer</code> here, because you managed with bare simplification. The <code>transfer</code> method takes you to a lower level of abstraction (the representations of assets in your case), but you should reason on a higher level of abstraction if possible.</p>",
        "id": 325676825,
        "sender_full_name": "Wolfgang Jeltsch",
        "timestamp": 1675442690
    },
    {
        "content": "<p>Thanks! I was missing the parenthesis around the <code>is</code> keyword <span aria-label=\"man facepalming\" class=\"emoji emoji-1f926-200d-2642\" role=\"img\" title=\"man facepalming\">:man_facepalming:</span> </p>\n<p>And actually I didn't even needed to add the <code>?l</code> <code>?r</code> bindings, I simplified the proofs to</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">mergeAccountsAssoc</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"mergeAccounts (mergeAccounts a b) c = mergeAccounts a (mergeAccounts b c)\"</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"n\">add</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Groups.semigroup_add_class.add.assoc</span><span class=\"w\"> </span><span class=\"n\">combine_options_assoc</span><span class=\"o\">)</span><span class=\"w\"></span>\n\n<span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">mergeAccountsComm</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"mergeAccounts a b = mergeAccounts b a\"</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"n\">add</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Groups.ab_semigroup_add_class.add.commute</span><span class=\"w\"> </span><span class=\"n\">combine_options_commute</span><span class=\"o\">)</span><span class=\"w\"></span>\n</code></pre></div>\n<p>I still wonder why <code>sledgehammer</code> didn't find the solution to the lemma but did find it for the intermediate<code>have</code>.</p>",
        "id": 325706345,
        "sender_full_name": "Hernán Rajchert",
        "timestamp": 1675451601
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"551600\">Hernán Rajchert</span> <a href=\"#narrow/stream/238552-Beginner-Questions/topic/How.20can.20I.20simplify.20the.20following.20lemmas.3F/near/325706345\">said</a>:</p>\n<blockquote>\n<p>I still wonder why <code>sledgehammer</code> didn't find the solution to the lemma but did find it for the intermediate<code>have</code>.</p>\n</blockquote>\n<p>Don’t rely <em>too</em> much on Sledgehammer. Experimentation can also be fruitful. For example, if your proof consists of two steps, which both are solved using <code>simp</code>, as is the case with your code above, you might just be able to merge them into one step that uses <code>simp</code>. It is, of course, possible that this won’t work, since <code>simp</code> applies available simplification rules as it sees fit, without reconsidering bad choices. Another trick is to try to merge two <code>blast</code> invocations into one or a <code>simp</code> and a <code>blast</code>invocation into an <code>auto</code> invocation.</p>\n<p>By the way, there is also <code>try</code>, which invokes several proof-finding and disproving tools, including Sledgehammer, and there is also <code>try0</code>, which is invoked by <code>try</code> and finds you invocations of the simple proof methods (which I prefer), like <code>simp</code>, <code>blast</code>, <code>auto</code>, and <code>fastforce</code>. For <code>try0</code> to be successful, you might want to pass to it facts it should consider via the <code>simp</code>, <code>intro</code>, <code>elim</code>, and <code>dest</code> parameters.</p>",
        "id": 325708335,
        "sender_full_name": "Wolfgang Jeltsch",
        "timestamp": 1675452266
    }
]