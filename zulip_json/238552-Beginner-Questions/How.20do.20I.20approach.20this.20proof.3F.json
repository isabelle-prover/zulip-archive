[
    {
        "content": "<p>I have the following lemma </p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"o\">(</span><span class=\"kp\">in</span> <span class=\"n\">th2</span><span class=\"o\">)</span> <span class=\"n\">addMeaningF</span><span class=\"o\">:</span> <span class=\"s\">\"evalBinNum (addBinNum x y) = plus (evalBinNum x) (evalBinNum y)\"</span>\n<span class=\"k\">proof</span><span class=\"o\">(</span><span class=\"n\">induct</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>It gives me the following subgoals</p>\n<p>evalBinNum (addBinNum x Zero) = plus (evalBinNum x) (evalBinNum Zero)</p>\n<ol start=\"2\">\n<li>evalBinNum (addBinNum x One) = plus (evalBinNum x) (evalBinNum One)</li>\n<li>\n<p>⋀xa. evalBinNum (addBinNum x xa) =<br>\n          plus (evalBinNum x) (evalBinNum xa) ⟹<br>\n          evalBinNum (addBinNum x (JoinZero xa)) =<br>\n          plus (evalBinNum x) (evalBinNum (JoinZero xa))</p>\n</li>\n<li>\n<p>⋀xa. evalBinNum (addBinNum x xa) =<br>\n          plus (evalBinNum x) (evalBinNum xa) ⟹<br>\n          evalBinNum (addBinNum x (JoinOne xa)) =<br>\n          plus (evalBinNum x) (evalBinNum (JoinOne xa)) </p>\n</li>\n</ol>\n<p>When I induct inside one of the cases, it gives me the same four subgoals again. </p>\n<p>Also, I was wondering if Isabelle allows the use of assumptions [evalBinNum is an assumption inside a locale, as is plus] since I hadn't seen much about it. addBinNum is a 'fun', I was wondering if evalBinNum and plus should be functions as well to make the lemma work? </p>\n<p>For more reference</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">locale</span> <span class=\"n\">th2</span> <span class=\"o\">=</span> <span class=\"n\">th1</span> <span class=\"o\">+</span>\n  <span class=\"kp\">fixes</span>\n    <span class=\"n\">plus</span> <span class=\"o\">::</span> <span class=\"s\">\"'a ⇒ 'a ⇒ 'a\"</span>\n    <span class=\"kp\">and</span> <span class=\"n\">evalBinNum</span> <span class=\"o\">::</span> <span class=\"s\">\"BinNum ⇒ 'a\"</span>\n  <span class=\"kp\">assumes</span>\n     <span class=\"n\">arith_1</span><span class=\"o\">:</span> <span class=\"s\">\"plus n zero = n\"</span>\n    <span class=\"kp\">and</span> <span class=\"n\">plus_suc</span><span class=\"o\">:</span> <span class=\"s\">\"plus n (suc m) = suc ( plus n m)\"</span>\n<span class=\"kp\">and</span> <span class=\"s\">\"evalBinNum Zero = zero\"</span>\n<span class=\"kp\">and</span> <span class=\"s\">\"evalBinNum One = suc(zero)\"</span>\n<span class=\"kp\">and</span> <span class=\"s\">\"evalBinNum (JoinZero x) = plus (evalBinNum x) (evalBinNum x)\"</span>\n<span class=\"kp\">and</span> <span class=\"s\">\"evalBinNum (JoinOne x) = plus (plus (evalBinNum x) (evalBinNum x)) (suc zero)\"</span>\n\n<span class=\"k\">fun</span> <span class=\"n\">addBinNum</span> <span class=\"o\">::</span> <span class=\"s\">\"BinNum ⇒ BinNum ⇒ BinNum\"</span>\n<span class=\"kp\">where</span>\n  <span class=\"s\">\"addBinNum Zero x = x\"</span><span class=\"o\">|</span>\n  <span class=\"s\">\"addBinNum x Zero = x\"</span><span class=\"o\">|</span>\n  <span class=\"s\">\"addBinNum One One = JoinZero One\"</span><span class=\"o\">|</span>\n  <span class=\"s\">\"addBinNum One  (JoinZero x) = JoinOne x\"</span><span class=\"o\">|</span>\n  <span class=\"s\">\"addBinNum (JoinZero x) One = JoinOne x\"</span><span class=\"o\">|</span>\n  <span class=\"s\">\"addBinNum One (JoinOne x) = JoinZero(addBinNum One x)\"</span><span class=\"o\">|</span>\n  <span class=\"s\">\"addBinNum (JoinOne x) One = JoinZero(addBinNum x One)\"</span><span class=\"o\">|</span>\n  <span class=\"s\">\"addBinNum (JoinZero x) (JoinZero y) = JoinZero(addBinNum x y)\"</span><span class=\"o\">|</span>\n  <span class=\"s\">\"addBinNum (JoinZero x) (JoinOne y) = JoinOne(addBinNum x y)\"</span><span class=\"o\">|</span>\n  <span class=\"s\">\"addBinNum (JoinOne x) (JoinZero y) = JoinOne(addBinNum x y)\"</span><span class=\"o\">|</span>\n  <span class=\"s\">\"addBinNum (JoinOne x) (JoinOne y) = JoinZero(addBinNum(addBinNum x y) One)\"</span>\n</code></pre></div>",
        "id": 289978663,
        "sender_full_name": "Lekhani Ray",
        "timestamp": 1658156886
    }
]