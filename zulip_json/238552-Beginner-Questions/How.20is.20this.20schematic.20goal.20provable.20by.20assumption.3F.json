[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"n\">schematic_goal</span><span class=\"w\"> </span><span class=\"s\">‹∀x. ¬ R x ⟶ R (F x) ⟹ ¬ R (F (F ?x2)) ⟹ R (F (F (F ?x2))) ⟹ R (F (F ?x17))›</span>\n<span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">assumption</span>\n</code></pre></div>\n<p>My understanding is that <code>?x2</code> and <code>?x17</code> are functions that don't contain any free variables. <del>With this in mind I can't see how the goal can just be proven by assumption. Is my understanding incorrect?</del><br>\nBut it seems that Isabelle is just able to choose </p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"n\">goal</span><span class=\"w\"> </span><span class=\"k\">instantiation</span><span class=\"o\">:</span>\n<span class=\"w\">    </span><span class=\"o\">?</span><span class=\"n\">x17</span><span class=\"w\"> </span><span class=\"n\">↝</span><span class=\"w\"> </span><span class=\"n\">F</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">x2</span>\n</code></pre></div>\n<p>but <code>F</code> is a free variable/predicate/etc. Why is it able to use <code>F</code> here?</p>",
        "id": 490358514,
        "sender_full_name": "o7",
        "timestamp": 1734843247
    },
    {
        "content": "<p>You can think of free variables as implicitly bound at the top-level. As such they are \"in-scope\" for the schematic variables. If you change your goal to explicitly bind them, they will no longer be able to unify:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"n\">schematic_goal</span><span class=\"w\"> </span><span class=\"s\">‹⋀F. ∀x. ¬ R x ⟶ R (F x) ⟹ ¬ R (F (F ?x2)) ⟹ R (F (F (F ?x2))) ⟹ R (F (F ?x17))›</span>\n</code></pre></div>",
        "id": 490381095,
        "sender_full_name": "Jan van Brügge",
        "timestamp": 1734866434
    }
]