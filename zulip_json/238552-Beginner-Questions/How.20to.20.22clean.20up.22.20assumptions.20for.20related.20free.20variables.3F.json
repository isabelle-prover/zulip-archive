[
    {
        "content": "<p>I have a theorem where the assumption is that certain values are related to each other. To elaborate, here are a few relevant records, type synonyms, and function types:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">record</span> <span class=\"n\">order</span> <span class=\"o\">=</span>\n  <span class=\"n\">amount</span> <span class=\"o\">::</span> <span class=\"n\">nat</span>\n\n<span class=\"k\">type_synonym</span> <span class=\"n\">orders</span> <span class=\"o\">=</span> <span class=\"s\">\"order set\"</span>\n\n<span class=\"k\">record</span> <span class=\"n\">order_view</span> <span class=\"o\">=</span> <span class=\"n\">order</span> <span class=\"o\">+</span>\n  <span class=\"n\">amount_view</span> <span class=\"o\">::</span> <span class=\"n\">string</span>\n\n<span class=\"k\">type_synonym</span> <span class=\"n\">state</span> <span class=\"o\">=</span> <span class=\"n\">orders</span>\n\n<span class=\"k\">type_synonym</span> <span class=\"n\">view_state</span> <span class=\"o\">=</span> <span class=\"s\">\"(order_view list * state)\"</span>\n\n<span class=\"k\">fun</span> <span class=\"n\">place_order_view</span> <span class=\"o\">::</span> <span class=\"s\">\"view_state ⇒ order_view ⇒ view_state\"</span>\n<span class=\"k\">fun</span> <span class=\"n\">place_order</span> <span class=\"o\">::</span> <span class=\"s\">\"orders ⇒ order ⇒ orders\"</span>\n<span class=\"k\">definition</span> <span class=\"n\">project</span> <span class=\"o\">::</span> <span class=\"s\">\"view_state ⇒ state</span>\n</code></pre></div>\n<p>The theorem is then:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">theorem</span> <span class=\"s\">\"project (place_order_view (ovs, os) ov) = place_order os order\"</span>\n</code></pre></div>\n<p>And in order for this to hold, <code>(amount ov) = (amount order)</code> must be true. This is because I'm testing for semantic equivalence between <code>place_order_view</code> and <code>place_order</code>, so  the input values must be the same.  I encoded this as a proof assumption:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">theorem</span>\n  <span class=\"kp\">assumes</span> <span class=\"s\">\"(amount ov) = (amount order)\"</span>\n  <span class=\"kp\">shows</span> <span class=\"s\">\"project (place_order_view (ovs, os) ov) = place_order os order\"</span>\n</code></pre></div>\n<p>This isn't so bad in this tiny example, but I can imagine it getting unwieldy when there's a bunch of these relationships, or if the relationships involve some nested data. Are there any tips to improve this? I was thinking about explicitly writing out the quantification of variables, but that is discouraged in this post: <a href=\"https://proofcraft.org/blog/isabelle-style-part2.html\">https://proofcraft.org/blog/isabelle-style-part2.html</a>. Maybe that's only true if the quantifications can be inferred correctly in simple cases?</p>\n<p>If it helps, here's the full theory here: <a href=\"https://github.com/amw-zero/bakery_refinement/blob/master/FullstackBakery.thy\">https://github.com/amw-zero/bakery_refinement/blob/master/FullstackBakery.thy</a>. It's just something I've been playing around with, my goal is to model a typical web application as a refinement from a simple specification of the behavior. So the theorem I'm sharing here is relating an operation taken in the view layer to the abstract specification (the idea of \"projecting\" the view state to the abstract specification state type was taken from this paper on <a href=\"http://isabelle.informatik.tu-muenchen.de/~kleing/papers/klein_sw_10.pdf\">refinement in sel4</a>.</p>",
        "id": 262890814,
        "sender_full_name": "Alex Weisberger",
        "timestamp": 1638044022
    }
]