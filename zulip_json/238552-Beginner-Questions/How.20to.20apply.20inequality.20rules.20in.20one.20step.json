[
    {
        "content": "<p>Hi, in my proof, I want to show an inequality relation like </p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"n\">B</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\">  </span><span class=\"n\">B</span><span class=\"w\"> </span><span class=\"n\">*</span><span class=\"w\"> </span><span class=\"n\">B</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">d</span><span class=\"w\"> </span><span class=\"n\">*</span><span class=\"w\"> </span><span class=\"n\">B</span><span class=\"w\"> </span><span class=\"n\">≤</span><span class=\"w\"> </span><span class=\"n\">C</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\">  </span><span class=\"n\">C</span><span class=\"w\"> </span><span class=\"n\">*</span><span class=\"w\"> </span><span class=\"n\">C</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">d</span><span class=\"w\"> </span><span class=\"n\">*</span><span class=\"w\"> </span><span class=\"n\">C</span>\n</code></pre></div>\n<p>Apparently, if I have the the relation <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>B</mi><mo>≤</mo><mi>C</mi></mrow><annotation encoding=\"application/x-tex\">B \\le C</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8193em;vertical-align:-0.136em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span></span></span></span>, I can apply this rule for quite a few times to show the goal, but it is tedious and repetitive to do so in Isar.  </p>\n<p>Additionaly, it seems like that no automatic method maybe helpful here. I thought <code>linarith</code> maybe efficient in this context, but it seems to only be able to apply the rule once. So I wonder if there is a better solution or any approach that I did not know.</p>",
        "id": 348215682,
        "sender_full_name": "Zixuan Fan",
        "timestamp": 1681132867
    },
    {
        "content": "<p>What type do your variables have? If you just state the goal as it is, they will probably be of a type variable that is only guaranteed to be of the most general class providing <code>+</code> and <code>*</code>, which will probably give you no axioms about <code>+</code> and <code>*</code>. Well, given that <code>linarith</code> was at least partly successful, this is maybe not what happened, but it would still be good to first clarify what the types are.</p>",
        "id": 348216397,
        "sender_full_name": "Wolfgang Jeltsch",
        "timestamp": 1681133085
    },
    {
        "content": "<p>I am showing some property about the cardinality, so the type has to be the nature number.</p>",
        "id": 348216516,
        "sender_full_name": "Zixuan Fan",
        "timestamp": 1681133132
    },
    {
        "content": "<p>Have you tried proof-finding tools like <code>try0</code>, <code>sledgehammer</code>, or <code>try</code> (which involves the former two)?</p>",
        "id": 348216525,
        "sender_full_name": "Wolfgang Jeltsch",
        "timestamp": 1681133134
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"562381\">Zixuan Fan</span> <a href=\"#narrow/stream/238552-Beginner-Questions/topic/How.20to.20apply.20inequality.20rules.20in.20one.20step/near/348216516\">said</a>:</p>\n<blockquote>\n<p>I am showing some property about the cardinality, so the type has to be the nature number.</p>\n</blockquote>\n<p>And is it guaranteed to be of type <code>nat</code>from the context?</p>",
        "id": 348216573,
        "sender_full_name": "Wolfgang Jeltsch",
        "timestamp": 1681133154
    },
    {
        "content": "<p>Yes, that's where I found <code>linarith</code> is typically more efficient than other methods.</p>",
        "id": 348216700,
        "sender_full_name": "Zixuan Fan",
        "timestamp": 1681133184
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"423655\">Wolfgang Jeltsch</span> <a href=\"#narrow/stream/238552-Beginner-Questions/topic/How.20to.20apply.20inequality.20rules.20in.20one.20step/near/348216573\">schrieb</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"562381\">Zixuan Fan</span> <a href=\"#narrow/stream/238552-Beginner-Questions/topic/How.20to.20apply.20inequality.20rules.20in.20one.20step/near/348216516\">said</a>:</p>\n<blockquote>\n<p>I am showing some property about the cardinality, so the type has to be the nature number.</p>\n</blockquote>\n<p>And is it guaranteed to be of type <code>nat</code>from the context?</p>\n</blockquote>\n<p>Yes.</p>",
        "id": 348216794,
        "sender_full_name": "Zixuan Fan",
        "timestamp": 1681133214
    },
    {
        "content": "<p>Doesn’t <code>simp</code> help then?</p>",
        "id": 348216856,
        "sender_full_name": "Wolfgang Jeltsch",
        "timestamp": 1681133234
    },
    {
        "content": "<p>After all, it’s just application of <code>≤</code>-congruence.</p>",
        "id": 348217025,
        "sender_full_name": "Wolfgang Jeltsch",
        "timestamp": 1681133283
    },
    {
        "content": "<p>No, only <code>sledgehammer</code> yields a non-terminating proof.</p>",
        "id": 348217065,
        "sender_full_name": "Zixuan Fan",
        "timestamp": 1681133291
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"423655\">Wolfgang Jeltsch</span> <a href=\"#narrow/stream/238552-Beginner-Questions/topic/How.20to.20apply.20inequality.20rules.20in.20one.20step/near/348217025\">schrieb</a>:</p>\n<blockquote>\n<p>After all, it’s just application of <code>≤</code>-congruence.</p>\n</blockquote>\n<p>That is just what I don't understand about. It seems that all the methods fails to find the intermiediate steps fo the relation. So I wonder if there is any method that is more helpful, or if Eisbach methods can be useful here.</p>",
        "id": 348217460,
        "sender_full_name": "Zixuan Fan",
        "timestamp": 1681133425
    },
    {
        "content": "<p>On my machine, which runs Isabelle2022, <code>sledgehammer</code> finds the proof <code>by (simp add: add_mono mult_le_mono)</code>. Here’s a complete working code snippet:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span>\n<span class=\"w\">  </span><span class=\"kp\">fixes</span><span class=\"w\"> </span><span class=\"n\">B</span><span class=\"w\"> </span><span class=\"n\">C</span><span class=\"w\"> </span><span class=\"n\">d</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"n\">nat</span>\n<span class=\"w\">  </span><span class=\"kp\">assumes</span><span class=\"w\"> </span><span class=\"s\">\"B ≤ C\"</span>\n<span class=\"w\">  </span><span class=\"kp\">shows</span><span class=\"w\"> </span><span class=\"s\">\"B +  B * B + d * B ≤ C +  C * C + d * C\"</span>\n<span class=\"w\">  </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">assms</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"n\">add</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">add_mono</span><span class=\"w\"> </span><span class=\"n\">mult_le_mono</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 348220782,
        "sender_full_name": "Wolfgang Jeltsch",
        "timestamp": 1681134415
    },
    {
        "content": "<p>Maybe older Sledgehammer versions aren’t capable of finding this proof (I think they don’t find <code>simp</code> proofs), and <code>try0</code> doesn’t search for additional rewrite rules to pass from what I know. In such situations, it can help to think about what lemmas would be needed, search for them using <code>find_theorems</code>, and then pass them to the proof method.</p>",
        "id": 348221447,
        "sender_full_name": "Wolfgang Jeltsch",
        "timestamp": 1681134589
    },
    {
        "content": "<p>I see, my goal is a bit more complicated than my example, maybe that is why the sledgehammer does not work. But I guess I can figure out a way by looking for useful lemmas in this way. Thanks a lot!</p>",
        "id": 348223053,
        "sender_full_name": "Zixuan Fan",
        "timestamp": 1681135095
    }
]