[
    {
        "content": "<p>In my project, I try to prove such a lemma:<code>∀q. (∃x∈trans2LTS r v. single_LTS_reachable_by_path q x) ⟶ q ∈ sem_reg r v ⟹\n    x ∈ star (trans2LTS r v) ⟹ single_LTS_reachable_by_path q x ⟹ q ∈ star (sem_reg r v)</code></p>\n<p>This is the definition of <code>star</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">inductive_set</span><span class=\"w\"> </span><span class=\"n\">star</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"'v list set ⇒ 'v list set\"</span>\n<span class=\"w\">  </span><span class=\"kp\">for</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"'v list set\"</span><span class=\"w\"> </span><span class=\"kp\">where</span>\n<span class=\"n\">zero</span><span class=\"o\">[</span><span class=\"n\">intro</span><span class=\"o\">!]:</span><span class=\"s\">\"[] ∈ star r\"</span><span class=\"o\">|</span>\n<span class=\"n\">step</span><span class=\"o\">[</span><span class=\"n\">intro</span><span class=\"o\">!]:</span><span class=\"s\">\"x ∈ r ∧ y ∈ star r ⟹ x @ y ∈ star r\"</span>\n</code></pre></div>\n<p>The definition of semantic :</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">primrec</span><span class=\"w\"> </span><span class=\"n\">sem_reg</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"('v) regexp =&gt; 'v set⇒ 'v list set\"</span><span class=\"w\"> </span><span class=\"kp\">where</span>\n<span class=\"s\">\"sem_reg ESet v = {[]}\"</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"c\">(*Empty Set*)</span>\n<span class=\"s\">\"sem_reg (Dot) vset = (λx .[x]) ` vset\"</span><span class=\"w\"> </span><span class=\"o\">|</span>\n<span class=\"s\">\"sem_reg (Concat r1 r2) v ={q@p| q p. q ∈ sem_reg r1 v ∧ p ∈ sem_reg r2 v}\"</span><span class=\"o\">|</span>\n<span class=\"s\">\"sem_reg (LChr a) v = {[a]}\"</span><span class=\"o\">|</span>\n<span class=\"s\">\"sem_reg (Alter v1 v2) a = (sem_reg v1 a) ∪ (sem_reg v2 a)\"</span><span class=\"o\">|</span>\n<span class=\"s\">\"sem_reg (Star a) v = star (sem_reg a v)\"</span><span class=\"o\">|</span>\n<span class=\"s\">\"sem_reg (Ques v) a = {[]} ∪ (sem_reg v a)\"</span><span class=\"o\">|</span>\n<span class=\"s\">\"sem_reg ε v = {[]}\"</span>\n</code></pre></div>\n<p>The definition of LTS:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">concat_transition</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"s\">\"(('v regexp × 'v set × 'v regexp) set * 'v regexp * 'v regexp) list set </span><span class=\"ss\">\\&lt;Rightarrow&gt;</span><span class=\"s\"> (('v regexp × 'v set × 'v regexp) set * 'v regexp * 'v regexp) list set </span><span class=\"ss\">\\&lt;Rightarrow&gt;</span><span class=\"s\"> (('v regexp × 'v set × 'v regexp) set * 'v regexp * 'v regexp) list set\"</span><span class=\"w\"> </span><span class=\"kp\">where</span>\n<span class=\"s\">\"concat_transition lset1 lset2 = {x@y| x y. x</span><span class=\"ss\">\\&lt;in&gt;</span><span class=\"s\"> lset1 </span><span class=\"ss\">\\&lt;and&gt;</span><span class=\"s\"> y</span><span class=\"ss\">\\&lt;in&gt;</span><span class=\"s\">lset2}\"</span>\n\n<span class=\"k\">primrec</span><span class=\"w\"> </span><span class=\"n\">trans2LTS</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"'v regexp ⇒ 'v set ⇒ (('v regexp × 'v set × 'v regexp) set * 'v regexp * 'v regexp) list set\"</span><span class=\"w\">  </span><span class=\"kp\">where</span>\n<span class=\"w\">    </span><span class=\"s\">\"trans2LTS (LChr v) alp_set= {[({(LChr v, {v}, </span><span class=\"ss\">\\&lt;epsilon&gt;</span><span class=\"s\">)}, LChr v, </span><span class=\"ss\">\\&lt;epsilon&gt;</span><span class=\"s\">)]}\"</span><span class=\"o\">|</span>\n<span class=\"w\">    </span><span class=\"s\">\"trans2LTS (ESet) alp_set= {[({(ESet, {} ,</span><span class=\"ss\">\\&lt;epsilon&gt;</span><span class=\"s\">)},ESet,</span><span class=\"ss\">\\&lt;epsilon&gt;</span><span class=\"s\">)]}\"</span><span class=\"o\">|</span>\n<span class=\"w\">    </span><span class=\"s\">\"trans2LTS (</span><span class=\"ss\">\\&lt;epsilon&gt;</span><span class=\"s\">) alp_set = {[({},</span><span class=\"ss\">\\&lt;epsilon&gt;</span><span class=\"s\">,</span><span class=\"ss\">\\&lt;epsilon&gt;</span><span class=\"s\">)]}\"</span><span class=\"o\">|</span>\n<span class=\"w\">    </span><span class=\"s\">\"trans2LTS (Dot) alp_set = {[({(Dot, alp_set, </span><span class=\"ss\">\\&lt;epsilon&gt;</span><span class=\"s\">)},Dot,</span><span class=\"ss\">\\&lt;epsilon&gt;</span><span class=\"s\">)]}\"</span><span class=\"o\">|</span>\n<span class=\"w\">    </span><span class=\"s\">\"trans2LTS (Alter r1 r2) alp_set = trans2LTS r1 alp_set </span><span class=\"ss\">\\&lt;union&gt;</span><span class=\"s\">  trans2LTS r2 alp_set\"</span><span class=\"o\">|</span>\n<span class=\"w\">    </span><span class=\"s\">\"trans2LTS (Concat r1 r2) alp_set = concat_transition (trans2LTS r1 alp_set) (trans2LTS r2 alp_set)\"</span><span class=\"w\"> </span><span class=\"o\">|</span>\n<span class=\"w\">    </span><span class=\"s\">\"trans2LTS (Star r) alp_set = star (trans2LTS r alp_set)\"</span><span class=\"w\"> </span><span class=\"o\">|</span>\n<span class=\"w\">    </span><span class=\"s\">\"trans2LTS (Ques r) alp_set = {[({(Ques r, {}, </span><span class=\"ss\">\\&lt;epsilon&gt;</span><span class=\"s\">)},Ques r, </span><span class=\"ss\">\\&lt;epsilon&gt;</span><span class=\"s\">)]} </span><span class=\"ss\">\\&lt;union&gt;</span><span class=\"s\"> trans2LTS r alp_set\"</span>\n<span class=\"w\">  </span><span class=\"sx\">```</span>\n\n<span class=\"sx\">And the definition of single_LTS_reahchable:</span>\n</code></pre></div>\n<p>type_synonym ('q,'a) LTS = \"('q * 'a set * 'q) set\"</p>\n<p>primrec single_LTS_reachable_by_path :: \"'a list ⇒ (('q,'a) LTS * 'q * 'q) list  ⇒ bool \" where<br>\n\"single_LTS_reachable_by_path w []= (w = [])\"|<br>\n\"single_LTS_reachable_by_path w (x# xs) = (∃p q. (w = p @ q ∧ LTS_is_reachable (fst x) (fst (snd x)) p (snd (snd x)) ∧ single_LTS_reachable_by_path q xs))\"</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"n\">Basically</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">I</span><span class=\"w\"> </span><span class=\"kt\">try</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">use</span><span class=\"w\"> </span><span class=\"n\">star</span><span class=\"w\"> </span><span class=\"n\">induction</span><span class=\"w\"> </span><span class=\"kt\">help</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">prove</span><span class=\"w\"> </span><span class=\"n\">this</span><span class=\"w\"> </span><span class=\"n\">but</span><span class=\"w\"> </span><span class=\"n\">failed.</span><span class=\"w\">  </span><span class=\"n\">An</span><span class=\"w\"> </span><span class=\"n\">auxiliary</span><span class=\"w\"> </span><span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"kt\">help</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">prove</span><span class=\"w\"> </span><span class=\"n\">I</span><span class=\"w\"> </span><span class=\"n\">think</span><span class=\"w\"> </span><span class=\"kp\">is</span><span class=\"w\"> </span><span class=\"n\">on</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\">  </span><span class=\"n\">single_LTS_reahchable</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">like</span><span class=\"w\"> </span><span class=\"n\">some</span><span class=\"w\"> </span><span class=\"kn\">function</span><span class=\"w\"> </span><span class=\"n\">on</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"n\">get</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"kn\">function</span><span class=\"w\"> </span><span class=\"n\">on</span><span class=\"w\"> </span><span class=\"n\">w.</span><span class=\"w\"> </span><span class=\"n\">But</span><span class=\"w\"> </span><span class=\"n\">I</span><span class=\"w\"> </span><span class=\"n\">am</span><span class=\"w\"> </span><span class=\"n\">new</span><span class=\"w\"> </span><span class=\"n\">Isabeller</span><span class=\"w\"> </span><span class=\"kp\">and</span><span class=\"w\"> </span><span class=\"n\">couldn't</span><span class=\"w\"> </span><span class=\"n\">think</span><span class=\"w\"> </span><span class=\"n\">about</span><span class=\"w\"> </span><span class=\"n\">any</span><span class=\"w\"> </span><span class=\"n\">idea</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">prove</span><span class=\"w\"> </span><span class=\"n\">it.</span><span class=\"w\"> </span><span class=\"n\">Hope</span><span class=\"w\"> </span><span class=\"n\">anyone</span><span class=\"w\"> </span><span class=\"n\">could</span><span class=\"w\"> </span><span class=\"kt\">help</span><span class=\"w\"> </span><span class=\"n\">me</span><span class=\"w\"> </span><span class=\"n\">solve</span><span class=\"w\"> </span><span class=\"n\">it</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">thx</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">lot.</span>\n</code></pre></div>",
        "id": 339055835,
        "sender_full_name": "Hongjian Jiang",
        "timestamp": 1677752445
    }
]