[
    {
        "content": "<p>Based on the repositoy in AFP, I plan to extend the library of regexp in Isabelle. Here I try to prove the range regexp in below which is similay to star.</p>\n<p>The index of star could start from zero(empty list) to infinite. The range starts from nat m to nat n.  But I have no idea that figure out a solution like lemma <code>in_star_iff_concat</code>(i.e. use the list to denote the procedure).  </p>\n<p>Any helps would be appreciated.</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">type_synonym</span><span class=\"w\"> </span><span class=\"n n-Type\">'a</span><span class=\"w\"> </span><span class=\"n\">lang</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"'a list set\"</span>\n\n<span class=\"k\">definition</span><span class=\"w\"> </span><span class=\"n\">conc</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"'a lang ⇒ 'a lang ⇒ 'a lang\"</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"kp\">infixr</span><span class=\"w\"> </span><span class=\"s\">\"@@\"</span><span class=\"w\"> </span><span class=\"n\">75</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"kp\">where</span>\n<span class=\"s\">\"A @@ B = {xs@ys | xs ys. xs:A &amp; ys:B}\"</span>\n\n<span class=\"k\">overloading</span><span class=\"w\"> </span><span class=\"n\">lang_pow</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"s\">\"compow :: nat ⇒ 'a lang ⇒ 'a lang\"</span>\n<span class=\"k\">begin</span>\n<span class=\"w\">  </span><span class=\"k\">primrec</span><span class=\"w\"> </span><span class=\"n\">lang_pow</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"nat ⇒ 'a lang ⇒ 'a lang\"</span><span class=\"w\"> </span><span class=\"kp\">where</span>\n<span class=\"w\">  </span><span class=\"s\">\"lang_pow 0 A = {[]}\"</span><span class=\"w\"> </span><span class=\"o\">|</span>\n<span class=\"w\">  </span><span class=\"s\">\"lang_pow (Suc n) A = A @@ (lang_pow n A)\"</span>\n<span class=\"k\">end</span>\n\n<span class=\"k\">definition</span><span class=\"w\"> </span><span class=\"n\">lang_pow</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"nat ⇒ 'a lang ⇒ 'a lang\"</span><span class=\"w\"> </span><span class=\"kp\">where</span>\n<span class=\"w\">  </span><span class=\"n\">lang_pow_code_def</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">code_abbrev</span><span class=\"o\">]:</span><span class=\"w\"> </span><span class=\"s\">\"lang_pow = compow\"</span>\n\n<span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">code</span><span class=\"o\">]:</span>\n<span class=\"w\">  </span><span class=\"s\">\"lang_pow (Suc n) A = A @@ (lang_pow n A)\"</span>\n<span class=\"w\">  </span><span class=\"s\">\"lang_pow 0 A = {[]}\"</span>\n<span class=\"w\">  </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">simp_all</span><span class=\"w\"> </span><span class=\"n\">add</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">lang_pow_code_def</span><span class=\"o\">)</span>\n\n\n<span class=\"k\">definition</span><span class=\"w\"> </span><span class=\"n\">star</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"'a lang ⇒ 'a lang\"</span><span class=\"w\"> </span><span class=\"kp\">where</span>\n<span class=\"s\">\"star A = (⋃n. A ^^ n)\"</span>\n\n\n<span class=\"k\">definition</span><span class=\"w\"> </span><span class=\"n\">range</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"'a lang ⇒ nat ⇒ nat =&gt; 'a lang \"</span><span class=\"w\"> </span><span class=\"kp\">where</span>\n<span class=\"s\">\"range A m n= (⋃i∈{m..n}. A ^^ i)\"</span>\n\n\n<span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">concat_in_star</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"set ws ⊆ A ⟹ concat ws : star A\"</span>\n<span class=\"w\">  </span><span class=\"k\">by</span><span class=\"o\">(</span><span class=\"n\">induct</span><span class=\"w\"> </span><span class=\"n\">ws</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">simp_all</span>\n\n\n<span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">in_star_iff_concat</span><span class=\"o\">:</span>\n<span class=\"w\">  </span><span class=\"s\">\"w ∈ star A = (∃ws. set ws ⊆ A ∧ w = concat ws)\"</span>\n<span class=\"w\">  </span><span class=\"o\">(</span><span class=\"kp\">is</span><span class=\"w\"> </span><span class=\"s\">\"_ = (∃ws. ?R w ws)\"</span><span class=\"o\">)</span>\n<span class=\"k\">proof</span>\n<span class=\"w\">  </span><span class=\"k\">assume</span><span class=\"w\"> </span><span class=\"s\">\"w : star A\"</span><span class=\"w\"> </span><span class=\"k\">thus</span><span class=\"w\"> </span><span class=\"s\">\"∃ws. ?R w ws\"</span>\n<span class=\"w\">  </span><span class=\"k\">proof</span><span class=\"w\"> </span><span class=\"n\">induct</span>\n<span class=\"w\">    </span><span class=\"k\">case</span><span class=\"w\"> </span><span class=\"n\">Nil</span><span class=\"w\"> </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"s\">\"?R [] []\"</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">simp</span>\n<span class=\"w\">    </span><span class=\"k\">thus</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"k\">case</span><span class=\"w\"> </span><span class=\"ow\">..</span>\n<span class=\"w\">  </span><span class=\"k\">next</span>\n<span class=\"w\">    </span><span class=\"k\">case</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">append</span><span class=\"w\"> </span><span class=\"n\">u</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"o\">)</span>\n<span class=\"w\">    </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"k\">obtain</span><span class=\"w\"> </span><span class=\"n\">ws</span><span class=\"w\"> </span><span class=\"kp\">where</span><span class=\"w\"> </span><span class=\"s\">\"set ws ⊆ A ∧ v = concat ws\"</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">blast</span>\n<span class=\"w\">    </span><span class=\"k\">with</span><span class=\"w\"> </span><span class=\"n\">append</span><span class=\"w\"> </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"s\">\"?R (u@v) (u#ws)\"</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">auto</span>\n<span class=\"w\">    </span><span class=\"k\">thus</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"k\">case</span><span class=\"w\"> </span><span class=\"ow\">..</span>\n<span class=\"w\">  </span><span class=\"k\">qed</span>\n<span class=\"k\">next</span>\n<span class=\"w\">  </span><span class=\"k\">assume</span><span class=\"w\"> </span><span class=\"s\">\"∃us. ?R w us\"</span><span class=\"w\"> </span><span class=\"k\">thus</span><span class=\"w\"> </span><span class=\"s\">\"w : star A\"</span>\n<span class=\"w\">  </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">auto</span><span class=\"w\"> </span><span class=\"n\">simp</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">concat_in_star</span><span class=\"o\">)</span>\n<span class=\"k\">qed</span>\n\n<span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">try_range</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"s\">\"w : range A m n = (...)\"</span>\n<span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 360114708,
        "sender_full_name": "Hongjian Jiang",
        "timestamp": 1684698880
    },
    {
        "content": "<p>You could use drop and take or state that <code>w' ∈ A</code> and <code>w' = as @ w @ bs</code> and <code>length as = n /\\ length w = m - n</code></p>",
        "id": 360260574,
        "sender_full_name": "Lukas Stevens",
        "timestamp": 1684760245
    },
    {
        "content": "<p>More concretely, <code>w ∈ range A n m ⟺ (∃w' ∈ A. w' = as @ w @ bs ∧ length as = n ∧ length w = m - n)</code></p>",
        "id": 360268902,
        "sender_full_name": "Lukas Stevens",
        "timestamp": 1684762023
    },
    {
        "content": "<p>For the future, please mention that you also asked on <a href=\"https://stackoverflow.com/questions/76301672/how-to-define-the-range-lemma-like-star\">SO</a></p>",
        "id": 360272242,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1684762640
    },
    {
        "content": "<p>Okay, I will do that. Thx. The issue was also asked on <a href=\"https://stackoverflow.com/questions/76301672/how-to-define-the-range-lemma-like-star\">https://stackoverflow.com/questions/76301672/how-to-define-the-range-lemma-like-star</a>.</p>",
        "id": 360354918,
        "sender_full_name": "Hongjian Jiang",
        "timestamp": 1684782295
    },
    {
        "content": "<p>Sorry for that I am new comer in Isabelle. What is w' used for? If there is complete proof, that will be better to understand.</p>",
        "id": 360356370,
        "sender_full_name": "Hongjian Jiang",
        "timestamp": 1684782801
    },
    {
        "content": "<p>I try to prove such lemma here:<code>lemma \"w : range1 A m n = (∃ws. set ws ⊆ A ∧ w = concat ws ∧ length ws ≤ n ∧ length ws ≥ m)\"\n  (is \"_ = (∃ws. ?R w ws)\")</code></p>",
        "id": 360358256,
        "sender_full_name": "Hongjian Jiang",
        "timestamp": 1684783451
    },
    {
        "content": "<p>where <code>∃ws. set ws ⊆ A ∧ w = concat ws ∧ length ws ≤ n ∧ m ≤ length ws ⟹ w ∈ range1 A m n</code> was proved by below,</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">concat_Suc_contains</span><span class=\"o\">:</span><span class=\"s\">\"concat ws ∈ range1 A m n ⟹ concat ws ∈ range1 A m (Suc n)\"</span>\n<span class=\"w\">  </span><span class=\"kp\">apply</span><span class=\"o\">(</span><span class=\"n\">induct</span><span class=\"w\"> </span><span class=\"n\">ws</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"n\">simp</span>\n<span class=\"w\">   </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">meson</span><span class=\"w\"> </span><span class=\"n\">element_range1</span><span class=\"w\"> </span><span class=\"n\">le_Suc_eq</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"n\">simp</span>\n<span class=\"w\">  </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">meson</span><span class=\"w\"> </span><span class=\"n\">element_range1</span><span class=\"w\"> </span><span class=\"n\">le_Suc_eq</span><span class=\"o\">)</span>\n\n<span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">concat_n_times</span><span class=\"o\">:</span><span class=\"s\">\"set ws ⊆ A ⟹ concat ws ∈ A ^^ length ws\"</span>\n<span class=\"w\">  </span><span class=\"kp\">apply</span><span class=\"o\">(</span><span class=\"n\">induct</span><span class=\"w\"> </span><span class=\"n\">ws</span><span class=\"o\">)</span>\n<span class=\"w\">   </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"n\">simp</span>\n<span class=\"w\">  </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"n\">simp</span>\n<span class=\"w\">  </span><span class=\"k\">done</span>\n\n<span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">concat_in_range1</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"set ws ⊆ A ∧ length ws ≥ m ∧ length ws ≤ n ⟹ concat ws : range1 A m n\"</span>\n<span class=\"w\">  </span><span class=\"kp\">apply</span><span class=\"o\">(</span><span class=\"n\">induct</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"n\">subgoal</span>\n<span class=\"w\">   </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"n\">simp</span>\n<span class=\"w\">    </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">zero_range1_empty</span><span class=\"w\"> </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"n\">fastforce</span>\n<span class=\"w\">    </span><span class=\"k\">done</span>\n<span class=\"w\">  </span><span class=\"kp\">apply</span><span class=\"o\">(</span><span class=\"n\">case_tac</span><span class=\"w\"> </span><span class=\"s\">\"length ws ≤ n\"</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"n\">subgoal</span><span class=\"w\"> </span><span class=\"kp\">for</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"n\">simp</span>\n<span class=\"w\">    </span><span class=\"k\">by</span><span class=\"o\">(</span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"n\">add</span><span class=\"o\">:</span><span class=\"n\">concat_Suc_contains</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"n\">subgoal</span><span class=\"w\"> </span><span class=\"kp\">for</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"kp\">apply</span><span class=\"o\">(</span><span class=\"n\">case_tac</span><span class=\"w\"> </span><span class=\"s\">\"length ws = (Suc n)\"</span><span class=\"o\">)</span>\n<span class=\"w\">     </span><span class=\"kp\">prefer</span><span class=\"w\"> </span><span class=\"n\">2</span>\n<span class=\"w\">    </span><span class=\"n\">subgoal</span>\n<span class=\"w\">      </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"n\">simp</span>\n<span class=\"w\">      </span><span class=\"k\">done</span>\n<span class=\"w\">    </span><span class=\"n\">subgoal</span><span class=\"w\"> </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"n\">simp</span>\n<span class=\"w\">      </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">metis</span><span class=\"w\"> </span><span class=\"n\">dual_order.refl</span><span class=\"w\"> </span><span class=\"n\">element_range1</span><span class=\"w\"> </span><span class=\"n\">concat_n_times</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"k\">done</span>\n<span class=\"w\">  </span><span class=\"k\">done</span>\n</code></pre></div>\n<p>But <code>w ∈ range1 A m n ⟹ ∃ws. set ws ⊆ A ∧ w = concat ws ∧ length ws ≤ n ∧ m ≤ length ws</code> was still stuck.</p>",
        "id": 360358727,
        "sender_full_name": "Hongjian Jiang",
        "timestamp": 1684783619
    },
    {
        "content": "<p>I gave it a try, and there is no Isabelle problem here, just a \"how do you do this on paper\"?</p>",
        "id": 360368015,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1684787065
    },
    {
        "content": "<p>I can't figure out the proof of <code>w ∈ range1 A m n ⟹ ∃ws. set ws ⊆ A ∧ w = concat ws ∧ length ws ≤ n ∧ m ≤ length ws</code>, maybe induct on w. I am still trying.</p>",
        "id": 360368804,
        "sender_full_name": "Hongjian Jiang",
        "timestamp": 1684787363
    },
    {
        "content": "<p>It seems that the forward lemma is not correct, I don't know...</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">zero_range1_empty</span><span class=\"o\">:</span><span class=\"s\">\"[] ∈ range1 A 0 n\"</span>\n<span class=\"w\">  </span><span class=\"kp\">apply</span><span class=\"o\">(</span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"n\">add</span><span class=\"o\">:</span><span class=\"n\">range1_def</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"kp\">apply</span><span class=\"o\">(</span><span class=\"n\">induct</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"o\">)</span>\n<span class=\"w\">   </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"n\">simp</span>\n<span class=\"w\">  </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"n\">auto</span>\n<span class=\"w\">  </span><span class=\"k\">done</span>\n\n<span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">element_range1</span><span class=\"o\">:</span><span class=\"s\">\"b :range1 A m n = (∃i. i ≥ m ∧ i ≤ n ∧ b : A ^^ i)\"</span>\n<span class=\"w\">  </span><span class=\"kp\">apply</span><span class=\"o\">(</span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"n\">add</span><span class=\"o\">:</span><span class=\"n\">range1_def</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">atLeastAtMost_iff</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">blast</span>\n\n<span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">concat_Suc_contains</span><span class=\"o\">:</span><span class=\"s\">\"concat ws ∈ range1 A m n ⟹ concat ws ∈ range1 A m (Suc n)\"</span>\n<span class=\"w\">  </span><span class=\"kp\">apply</span><span class=\"o\">(</span><span class=\"n\">induct</span><span class=\"w\"> </span><span class=\"n\">ws</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"n\">simp</span>\n<span class=\"w\">   </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">meson</span><span class=\"w\"> </span><span class=\"n\">element_range1</span><span class=\"w\"> </span><span class=\"n\">le_Suc_eq</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"n\">simp</span>\n<span class=\"w\">  </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">meson</span><span class=\"w\"> </span><span class=\"n\">element_range1</span><span class=\"w\"> </span><span class=\"n\">le_Suc_eq</span><span class=\"o\">)</span>\n\n<span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">concat_n_times</span><span class=\"o\">:</span><span class=\"s\">\"set ws ⊆ A ⟹ concat ws ∈ A ^^ length ws\"</span>\n<span class=\"w\">  </span><span class=\"kp\">apply</span><span class=\"o\">(</span><span class=\"n\">induct</span><span class=\"w\"> </span><span class=\"n\">ws</span><span class=\"o\">)</span>\n<span class=\"w\">   </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"n\">simp</span>\n<span class=\"w\">  </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">simp</span>\n\n<span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">concat_in_range1</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"set ws ⊆ A ∧ length ws ≥ m ∧ length ws ≤ n ⟹ concat ws : range1 A m n\"</span>\n<span class=\"w\">  </span><span class=\"kp\">apply</span><span class=\"o\">(</span><span class=\"n\">induct</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"n\">subgoal</span>\n<span class=\"w\">   </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"n\">simp</span>\n<span class=\"w\">    </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">zero_range1_empty</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">fastforce</span>\n<span class=\"w\">  </span><span class=\"kp\">apply</span><span class=\"o\">(</span><span class=\"n\">case_tac</span><span class=\"w\"> </span><span class=\"s\">\"length ws ≤ n\"</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"n\">subgoal</span><span class=\"w\"> </span><span class=\"kp\">for</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"n\">simp</span>\n<span class=\"w\">    </span><span class=\"k\">by</span><span class=\"o\">(</span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"n\">add</span><span class=\"o\">:</span><span class=\"n\">concat_Suc_contains</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"n\">subgoal</span><span class=\"w\"> </span><span class=\"kp\">for</span><span class=\"w\"> </span><span class=\"n\">n</span>\n<span class=\"w\">    </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"kp\">apply</span><span class=\"o\">(</span><span class=\"n\">case_tac</span><span class=\"w\"> </span><span class=\"s\">\"length ws = (Suc n)\"</span><span class=\"o\">)</span>\n<span class=\"w\">     </span><span class=\"kp\">prefer</span><span class=\"w\"> </span><span class=\"n\">2</span>\n<span class=\"w\">    </span><span class=\"n\">subgoal</span>\n<span class=\"w\">      </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">simp</span>\n<span class=\"w\">    </span><span class=\"n\">subgoal</span><span class=\"w\"> </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"n\">simp</span>\n<span class=\"w\">      </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">metis</span><span class=\"w\"> </span><span class=\"n\">dual_order.refl</span><span class=\"w\"> </span><span class=\"n\">element_range1</span><span class=\"w\"> </span><span class=\"n\">concat_n_times</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"k\">done</span>\n<span class=\"w\">  </span><span class=\"k\">done</span>\n\n<span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">non_range1</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]:</span><span class=\"s\">\"range1 A 0 0 = {[]}\"</span>\n<span class=\"w\">  </span><span class=\"kp\">apply</span><span class=\"o\">(</span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"n\">add</span><span class=\"o\">:</span><span class=\"n\">range1_def</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"k\">done</span>\n\n<span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">conc_range1</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]:</span><span class=\"s\">\"range1 A 0 (Suc n) =  (range1 A 0 n) ∪ A ^^ (Suc n)\"</span>\n<span class=\"w\">  </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"n\">add</span><span class=\"o\">:</span><span class=\"n\">range1_def</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"n\">add</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">atLeast0_atMost_Suc</span><span class=\"w\"> </span><span class=\"n\">inf_sup_aci</span><span class=\"o\">(</span><span class=\"n\">5</span><span class=\"o\">))</span>\n\n<span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">in_range_iff_concat</span><span class=\"o\">:</span><span class=\"s\">\"w : range1 A m n = (∃ws. set ws ⊆ A ∧ w = concat ws ∧ length ws ≤ n ∧ length ws ≥ m)\"</span>\n<span class=\"w\">  </span><span class=\"o\">(</span><span class=\"kp\">is</span><span class=\"w\"> </span><span class=\"s\">\"_ = (∃ws. ?R w ws)\"</span><span class=\"o\">)</span>\n<span class=\"k\">proof</span>\n<span class=\"w\">  </span><span class=\"k\">assume</span><span class=\"w\"> </span><span class=\"s\">\"w : range1 A m n\"</span><span class=\"w\"> </span><span class=\"k\">thus</span><span class=\"w\"> </span><span class=\"s\">\"∃ws. ?R w ws\"</span>\n<span class=\"w\">    </span><span class=\"gr\">sorry</span>\n<span class=\"k\">next</span>\n<span class=\"w\">  </span><span class=\"k\">assume</span><span class=\"w\"> </span><span class=\"s\">\"∃us. ?R w us\"</span><span class=\"w\"> </span><span class=\"k\">thus</span><span class=\"w\"> </span><span class=\"s\">\"w : range1 A m n\"</span>\n<span class=\"w\">    </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"n\">auto</span>\n<span class=\"w\">    </span><span class=\"k\">by</span><span class=\"o\">(</span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"n\">add</span><span class=\"o\">:</span><span class=\"n\">concat_in_range1</span><span class=\"o\">)</span>\n<span class=\"k\">qed</span>\n</code></pre></div>",
        "id": 360370784,
        "sender_full_name": "Hongjian Jiang",
        "timestamp": 1684788068
    },
    {
        "content": "<p>Unfolding range1 gives you a <code>p</code> such that <code>p \\in A^^p</code> and <code>m &lt;= p</code> and <code>p &lt;= n</code>. Induction on <code>p</code> makes a lot more sense…</p>",
        "id": 360425447,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1684817676
    },
    {
        "content": "<p>Ahh, I see.</p>",
        "id": 360450700,
        "sender_full_name": "Hongjian Jiang",
        "timestamp": 1684827246
    },
    {
        "content": "<p>Sorry for the noob, what about the <code>lemma \" w ∈ A ^^ x ==&gt; ∃ws. set ws ⊆ A ∧ w = concat ws ∧ length ws = x\"</code>, when induct on p. It's very crucial.</p>",
        "id": 360452472,
        "sender_full_name": "Hongjian Jiang",
        "timestamp": 1684827791
    },
    {
        "content": "<p>Okay, I solved it. Thx a lot. Mathias.</p>",
        "id": 360552438,
        "sender_full_name": "Hongjian Jiang",
        "timestamp": 1684852649
    }
]