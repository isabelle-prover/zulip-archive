[
    {
        "content": "<p>Hi! Consider the following lemma: </p>\n<ol>\n<li>P x holds for any element x in set S. </li>\n<li>For any x and y, if P x and P y holds, P (x ∪ y) holds</li>\n<li>P {} holds</li>\n<li>Prove that P (\\Union S) holds</li>\n</ol>\n<blockquote>\n<p>\\Union is Complete_Lattices.Union</p>\n</blockquote>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">P_Union</span><span class=\"o\">:</span>\n<span class=\"w\">  </span><span class=\"kp\">assumes</span><span class=\"w\"> </span><span class=\"s\">\"∀x ∈ S. P x\"</span>\n<span class=\"w\">    </span><span class=\"kp\">and</span><span class=\"w\"> </span><span class=\"s\">\"P {}\"</span>\n<span class=\"w\">    </span><span class=\"kp\">and</span><span class=\"w\"> </span><span class=\"s\">\"∀x y. P x ∧ P y ⟶ P(x ∪ y)\"</span>\n<span class=\"w\">  </span><span class=\"kp\">shows</span><span class=\"w\"> </span><span class=\"s\">\"P (⋃ S)\"</span>\n<span class=\"k\">proof</span><span class=\"w\"> </span><span class=\"o\">-</span>\n<span class=\"w\">  </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"s\">\"∀a∈S. ∀b∈S. P (a ∪ b)\"</span>\n<span class=\"w\">    </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">assms</span><span class=\"o\">(</span><span class=\"n\">1</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">assms</span><span class=\"o\">(</span><span class=\"n\">3</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">blast</span>\n<span class=\"w\">  </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"s\">\"∀a∈S. ∀b∈S. (a ∪ b) ∪ (⋃(S - {a, b})) = ⋃ S\"</span>\n<span class=\"w\">    </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">blast</span>\n<span class=\"w\">  </span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">thesis</span><span class=\"w\"> </span><span class=\"gr\">oops</span>\n</code></pre></div>\n<p>I tried to prove it by decomposing  (\\Union S) into  (a ∪ b) and (\\Union (S -{a, b})) and prove P for them respectively. It seems to work but I need to an induction rule for set to finish it. </p>\n<p>I know there is an induct rule named \"length_induct\" which works for list:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"o\">(</span><span class=\"n\">⋀xs.</span><span class=\"w\"> </span><span class=\"n\">∀ys.</span><span class=\"w\"> </span><span class=\"n\">length</span><span class=\"w\"> </span><span class=\"n\">ys</span><span class=\"w\"> </span><span class=\"n\">&lt;</span><span class=\"w\"> </span><span class=\"n\">length</span><span class=\"w\"> </span><span class=\"n\">xs</span><span class=\"w\"> </span><span class=\"n\">⟶</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">P</span><span class=\"w\"> </span><span class=\"n\">ys</span><span class=\"w\"> </span><span class=\"n\">⟹</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">P</span><span class=\"w\"> </span><span class=\"n\">xs</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">⟹</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">P</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">XS</span>\n</code></pre></div>\n<p>However I couldn't find a similar induction rule for set. I'm wondering if there is indeed such an induction rule for set. If not, how should I prove this lemma?</p>",
        "id": 443480246,
        "sender_full_name": "Liangrun Da",
        "timestamp": 1717860034
    },
    {
        "content": "<p>the lemma is not true, consider <code>P</code> to be the property of a set being closed</p>",
        "id": 443495865,
        "sender_full_name": "Yong Kiam",
        "timestamp": 1717865527
    },
    {
        "content": "<p>(in particular, if you want to induct on <code>S</code>, you may want to assume it's <code>finite</code>)</p>",
        "id": 443496297,
        "sender_full_name": "Yong Kiam",
        "timestamp": 1717865632
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"234226\">Yong Kiam</span> <a href=\"#narrow/stream/238552-Beginner-Questions/topic/How.20to.20do.20induction.20on.20set.3F/near/443495865\">said</a>:</p>\n<blockquote>\n<p>the lemma is not true, consider <code>P</code> to be the property of a set being closed</p>\n</blockquote>\n<p>Thanks for your answer! However I'm still a bit confused by what you mean when you say \"consider P to be the property of a set being closed.\" If \"a closed set\" means the set is closed under some operation, could you give me a concrete counterexample of this? I couldn't figure out a operation that satisfies \"closed X op \\and closed Y op --&gt; closed (X ∪ Y)\" but doesn't satisfies <code>closed (⋃ S) op</code></p>",
        "id": 443499146,
        "sender_full_name": "Liangrun Da",
        "timestamp": 1717866651
    },
    {
        "content": "<p>I meant topologically closed, for example, let <code>S</code> be the set of singleton points in <code>(-1,1)</code></p>",
        "id": 443499456,
        "sender_full_name": "Yong Kiam",
        "timestamp": 1717866833
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"234226\">Yong Kiam</span> <a href=\"#narrow/stream/238552-Beginner-Questions/topic/How.20to.20do.20induction.20on.20set.3F/near/443499456\">said</a>:</p>\n<blockquote>\n<p>I meant topologically closed, for example, let <code>S</code> be the set of singleton points in <code>(-1,1)</code></p>\n</blockquote>\n<p>I got it! Do yo think it was because S is an infinite set in your example (the set of singleton points in <code>(-1,1)</code>) ? If that was the reason, how can I prove the following modified lemma using induction on S? (I never did induction on set before and didn't see such an example either) </p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">P_Union</span><span class=\"o\">:</span>\n<span class=\"w\">  </span><span class=\"kp\">assumes</span><span class=\"w\"> </span><span class=\"s\">\"∀x ∈ S. P x\"</span>\n<span class=\"w\">    </span><span class=\"kp\">and</span><span class=\"w\"> </span><span class=\"s\">\"P {}\"</span>\n<span class=\"w\">    </span><span class=\"kp\">and</span><span class=\"w\"> </span><span class=\"s\">\"∀x y. P x ∧ P y ⟶ P(x ∪ y)\"</span>\n<span class=\"w\">    </span><span class=\"kp\">and</span><span class=\"w\"> </span><span class=\"s\">\"finite S\"</span>\n<span class=\"w\">  </span><span class=\"kp\">shows</span><span class=\"w\"> </span><span class=\"s\">\"P (⋃ S)\"</span>\n</code></pre></div>",
        "id": 443502403,
        "sender_full_name": "Liangrun Da",
        "timestamp": 1717868325
    },
    {
        "content": "<p>Just make sure that the finite assumptions comes first:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">P_Union</span><span class=\"o\">:</span>\n<span class=\"w\">  </span><span class=\"kp\">assumes</span><span class=\"w\"> </span><span class=\"s\">\"∀x ∈ S. P x\"</span>\n<span class=\"w\">    </span><span class=\"kp\">and</span><span class=\"w\"> </span><span class=\"s\">\"P {}\"</span>\n<span class=\"w\">    </span><span class=\"kp\">and</span><span class=\"w\"> </span><span class=\"s\">\"∀x y. P x ∧ P y ⟶ P(x ∪ y)\"</span>\n<span class=\"w\">    </span><span class=\"kp\">and</span><span class=\"w\"> </span><span class=\"s\">\"finite S\"</span>\n<span class=\"w\">  </span><span class=\"kp\">shows</span><span class=\"w\"> </span><span class=\"s\">\"P (⋃ S)\"</span>\n<span class=\"w\">  </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">assms</span><span class=\"o\">(</span><span class=\"n\">4</span><span class=\"o\">,</span><span class=\"n\">1</span><span class=\"o\">-</span><span class=\"n\">3</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">induction</span><span class=\"w\"> </span><span class=\"n\">S</span><span class=\"o\">)</span>\n<span class=\"w\">   </span><span class=\"ow\">...</span>\n</code></pre></div>",
        "id": 443504754,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1717869538
    },
    {
        "content": "<p>(yes what the \"...\" is very simple to find and yes the proof works)</p>",
        "id": 443504785,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1717869574
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"233198\">Mathias Fleury</span> <a href=\"#narrow/stream/238552-Beginner-Questions/topic/How.20to.20do.20induction.20on.20set.3F/near/443504754\">said</a>:</p>\n<blockquote>\n<p>Just make sure that the finite assumptions comes first:</p>\n<p><div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">P_Union</span><span class=\"o\">:</span>\n<span class=\"w\">  </span><span class=\"kp\">assumes</span><span class=\"w\"> </span><span class=\"s\">\"∀x ∈ S. P x\"</span>\n<span class=\"w\">    </span><span class=\"kp\">and</span><span class=\"w\"> </span><span class=\"s\">\"P {}\"</span>\n<span class=\"w\">    </span><span class=\"kp\">and</span><span class=\"w\"> </span><span class=\"s\">\"∀x y. P x ∧ P y ⟶ P(x ∪ y)\"</span>\n<span class=\"w\">    </span><span class=\"kp\">and</span><span class=\"w\"> </span><span class=\"s\">\"finite S\"</span>\n<span class=\"w\">  </span><span class=\"kp\">shows</span><span class=\"w\"> </span><span class=\"s\">\"P (⋃ S)\"</span>\n<span class=\"w\">  </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">assms</span><span class=\"o\">(</span><span class=\"n\">4</span><span class=\"o\">,</span><span class=\"n\">1</span><span class=\"o\">-</span><span class=\"n\">3</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">induction</span><span class=\"w\"> </span><span class=\"n\">S</span><span class=\"o\">)</span>\n<span class=\"w\">   </span><span class=\"ow\">...</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Yes it worked! Thank you both.</p>",
        "id": 443505703,
        "sender_full_name": "Liangrun Da",
        "timestamp": 1717870022
    }
]