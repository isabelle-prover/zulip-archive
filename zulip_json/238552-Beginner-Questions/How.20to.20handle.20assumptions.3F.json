[
    {
        "content": "<p>I am trying to prove double negation with implication elimination and introduction:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span><span class=\"w\">  </span><span class=\"s\">\"A ⟶ ¬¬A\"</span>\n<span class=\"k\">proof</span><span class=\"w\"> </span><span class=\"o\">-</span>\n<span class=\"w\">  </span><span class=\"k\">assume</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">A</span>\n<span class=\"w\">  </span><span class=\"k\">assume</span><span class=\"w\"> </span><span class=\"n\">anot</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"A ⟶ False\"</span>\n<span class=\"w\">  </span><span class=\"k\">from</span><span class=\"w\"> </span><span class=\"n\">anot</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"n\">False</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">rule</span><span class=\"w\"> </span><span class=\"n\">HOL.mp</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"k\">from</span><span class=\"w\"> </span><span class=\"n\">this</span><span class=\"w\"> </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"n\">anotnot</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"(A ⟶ False) ⟶ False\"</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">rule</span><span class=\"w\"> </span><span class=\"n\">impI</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"n\">anotnot_def</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"(A ⟶ False) ⟶ False ≡ ¬¬A\"</span><span class=\"w\"> </span><span class=\"k\">unfolding</span><span class=\"w\"> </span><span class=\"n\">not_def</span><span class=\"w\"> </span><span class=\"ow\">.</span>\n<span class=\"w\">  </span><span class=\"k\">from</span><span class=\"w\"> </span><span class=\"n\">anotnot</span><span class=\"w\"> </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"s\">\"¬¬A\"</span><span class=\"w\"> </span><span class=\"k\">unfolding</span><span class=\"w\"> </span><span class=\"n\">anotnot_def</span><span class=\"w\"> </span><span class=\"ow\">.</span>\n<span class=\"w\">  </span><span class=\"k\">from</span><span class=\"w\"> </span><span class=\"n\">this</span><span class=\"w\"> </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">thesis</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">rule</span><span class=\"w\"> </span><span class=\"n\">impI</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>It seems that I am almost done but of course \"almost\" might be far from the solution.</p>\n<p>I get the following proof state:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"n\">⟶</span><span class=\"w\"> </span><span class=\"n\">¬</span><span class=\"w\"> </span><span class=\"n\">¬</span><span class=\"w\"> </span><span class=\"n\">A</span>\n<span class=\"k\">proof</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">state</span><span class=\"o\">)</span>\n<span class=\"n\">this</span><span class=\"o\">:</span>\n<span class=\"w\">  </span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"n\">⟶</span><span class=\"w\"> </span><span class=\"n\">¬</span><span class=\"w\"> </span><span class=\"n\">¬</span><span class=\"w\"> </span><span class=\"n\">A</span>\n\n<span class=\"n\">goal</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">1</span><span class=\"w\"> </span><span class=\"n\">subgoal</span><span class=\"o\">):</span>\n<span class=\"w\"> </span><span class=\"n\">1.</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"n\">⟶</span><span class=\"w\"> </span><span class=\"n\">¬</span><span class=\"w\"> </span><span class=\"n\">¬</span><span class=\"w\"> </span><span class=\"n\">A</span>\n</code></pre></div>\n<p>Why am I not getting finished here? When I try to have <code>show</code> insted of <code>have</code> in the last line, I get</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">proof</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">chain</span><span class=\"o\">)</span>\n<span class=\"n\">picking</span><span class=\"w\"> </span><span class=\"n\">this</span><span class=\"o\">:</span>\n<span class=\"w\">  </span><span class=\"n\">¬</span><span class=\"w\"> </span><span class=\"n\">¬</span><span class=\"w\"> </span><span class=\"n\">A</span>\n<span class=\"n\">Failed</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">refine</span><span class=\"w\"> </span><span class=\"n\">any</span><span class=\"w\"> </span><span class=\"n\">pending</span><span class=\"w\"> </span><span class=\"n\">goal</span>\n<span class=\"n\">Local</span><span class=\"w\"> </span><span class=\"n\">statement</span><span class=\"w\"> </span><span class=\"n\">fails</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">refine</span><span class=\"w\"> </span><span class=\"n\">any</span><span class=\"w\"> </span><span class=\"n\">pending</span><span class=\"w\"> </span><span class=\"n\">goal</span>\n<span class=\"n\">Failed</span><span class=\"w\"> </span><span class=\"n\">attempt</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">solve</span><span class=\"w\"> </span><span class=\"n\">goal</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">exported</span><span class=\"w\"> </span><span class=\"n\">rule</span><span class=\"o\">:</span>\n<span class=\"w\">  </span><span class=\"o\">(</span><span class=\"n\">A</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">⟹</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"n\">⟶</span><span class=\"w\"> </span><span class=\"n\">False</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">⟹</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"n\">⟶</span><span class=\"w\"> </span><span class=\"n\">¬</span><span class=\"w\"> </span><span class=\"n\">¬</span><span class=\"w\"> </span><span class=\"n\">A</span>\n</code></pre></div>\n<p>showing my two assumptions. Do you have an explanation?</p>",
        "id": 378828587,
        "sender_full_name": "Gergely Buday",
        "timestamp": 1690382450
    },
    {
        "content": "<p>ChatGPT came up with a simpler one. After some cosmetic changes, it became</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">double_negation_intro</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"P ⟶ ¬¬P\"</span>\n<span class=\"k\">proof</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">rule</span><span class=\"w\"> </span><span class=\"n\">impI</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"k\">assume</span><span class=\"w\"> </span><span class=\"s\">\"P\"</span>\n<span class=\"w\">  </span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"s\">\"¬¬P\"</span>\n<span class=\"w\">  </span><span class=\"k\">proof</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">rule</span><span class=\"w\"> </span><span class=\"n\">notI</span><span class=\"o\">)</span>\n<span class=\"w\">    </span><span class=\"k\">assume</span><span class=\"w\"> </span><span class=\"s\">\"¬P\"</span>\n<span class=\"w\">    </span><span class=\"k\">with</span><span class=\"w\"> </span><span class=\"s\">‹P›</span><span class=\"w\"> </span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"n\">False</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">contradiction</span>\n<span class=\"w\">  </span><span class=\"k\">qed</span>\n<span class=\"k\">qed</span>\n</code></pre></div>",
        "id": 378836690,
        "sender_full_name": "Gergely Buday",
        "timestamp": 1690383830
    },
    {
        "content": "<p>Take the cursor and move it to the first proof -</p>",
        "id": 378839748,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1690384164
    },
    {
        "content": "<p>Then look at the state panel</p>",
        "id": 378839863,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1690384175
    },
    {
        "content": "<p>look at the goal</p>",
        "id": 378839933,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1690384182
    },
    {
        "content": "<p>really look at the goal</p>",
        "id": 378839968,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1690384188
    },
    {
        "content": "<p>and remember that assume introduces assumptions with <code>⟹</code></p>",
        "id": 378840244,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1690384219
    }
]