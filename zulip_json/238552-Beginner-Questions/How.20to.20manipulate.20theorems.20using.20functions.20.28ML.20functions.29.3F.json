[
    {
        "content": "<p>In HOL4, I can start with a definition and turn it into an induction principle using ML functions using the CONVs. Like this:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"n\">val</span><span class=\"w\"> </span><span class=\"n\">normal_modal_logic</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Define`</span>\n<span class=\"n\">NML</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">S</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">form</span><span class=\"w\"> </span><span class=\"n\">set</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">&lt;</span><span class=\"o\">=</span><span class=\"n\">&gt;</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"n\">B</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"n\">q</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"n\">form.</span>\n<span class=\"w\">                  </span><span class=\"o\">(</span><span class=\"n\">ptaut</span><span class=\"w\"> </span><span class=\"n\">form</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"n\">&gt;</span><span class=\"w\"> </span><span class=\"n\">form</span><span class=\"w\"> </span><span class=\"n\">IN</span><span class=\"w\"> </span><span class=\"n\">S</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">/\\</span>\n<span class=\"w\">                  </span><span class=\"o\">(</span><span class=\"n\">IMP</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">BOX</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">IMP</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"n\">q</span><span class=\"o\">))</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">IMP</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">BOX</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">BOX</span><span class=\"w\"> </span><span class=\"n\">q</span><span class=\"o\">)))</span><span class=\"w\"> </span><span class=\"n\">IN</span><span class=\"w\"> </span><span class=\"n\">S</span><span class=\"w\"> </span><span class=\"n\">/\\</span>\n<span class=\"w\">                  </span><span class=\"o\">(</span><span class=\"n\">IMP</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">DIAM</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">NOT</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">BOX</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">NOT</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"o\">))))</span><span class=\"w\"> </span><span class=\"n\">IN</span><span class=\"w\"> </span><span class=\"n\">S</span><span class=\"w\"> </span><span class=\"n\">/\\</span>\n<span class=\"w\">                  </span><span class=\"o\">(</span><span class=\"n\">IMP</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">NOT</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">BOX</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">NOT</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"o\">)))</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">DIAM</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"o\">))</span><span class=\"w\"> </span><span class=\"n\">IN</span><span class=\"w\"> </span><span class=\"n\">S</span><span class=\"w\"> </span><span class=\"n\">/\\</span>\n<span class=\"w\">                  </span><span class=\"o\">(</span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"n\">IN</span><span class=\"w\"> </span><span class=\"n\">S</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"n\">&gt;</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">subst</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">IN</span><span class=\"w\"> </span><span class=\"n\">S</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">/\\</span>\n<span class=\"w\">                  </span><span class=\"o\">(</span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"n\">IN</span><span class=\"w\"> </span><span class=\"n\">S</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"n\">&gt;</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">BOX</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">IN</span><span class=\"w\"> </span><span class=\"n\">S</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">/\\</span>\n<span class=\"w\">                  </span><span class=\"o\">((</span><span class=\"n\">IMP</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"n\">B</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">IN</span><span class=\"w\"> </span><span class=\"n\">S</span><span class=\"w\"> </span><span class=\"n\">/\\</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"n\">IN</span><span class=\"w\"> </span><span class=\"n\">S</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"n\">&gt;</span><span class=\"w\"> </span><span class=\"n\">B</span><span class=\"w\"> </span><span class=\"n\">IN</span><span class=\"w\"> </span><span class=\"n\">S</span><span class=\"o\">)</span><span class=\"sx\">`;</span>\n\n<span class=\"sx\">val NMLG_def = Define`</span>\n<span class=\"n\">NMLG</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Γ</span><span class=\"o\">:</span><span class=\"n\">form</span><span class=\"w\"> </span><span class=\"n\">set</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">BIGINTER</span><span class=\"w\"> </span><span class=\"ow\">{</span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">normal</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">/\\</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Γ</span><span class=\"w\"> </span><span class=\"n\">SUBSET</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"o\">)</span><span class=\"ow\">}</span><span class=\"sx\">`;</span>\n\n\n<span class=\"sx\">val normal_modal_logic = Define`</span>\n<span class=\"n\">NML</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">S</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">form</span><span class=\"w\"> </span><span class=\"n\">set</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">&lt;</span><span class=\"o\">=</span><span class=\"n\">&gt;</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"n\">B</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"n\">q</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"n\">form.</span>\n<span class=\"w\">                  </span><span class=\"o\">(</span><span class=\"n\">ptaut</span><span class=\"w\"> </span><span class=\"n\">form</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"n\">&gt;</span><span class=\"w\"> </span><span class=\"n\">form</span><span class=\"w\"> </span><span class=\"n\">IN</span><span class=\"w\"> </span><span class=\"n\">S</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">/\\</span>\n<span class=\"w\">                  </span><span class=\"o\">(</span><span class=\"n\">IMP</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">BOX</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">IMP</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"n\">q</span><span class=\"o\">))</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">IMP</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">BOX</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">BOX</span><span class=\"w\"> </span><span class=\"n\">q</span><span class=\"o\">)))</span><span class=\"w\"> </span><span class=\"n\">IN</span><span class=\"w\"> </span><span class=\"n\">S</span><span class=\"w\"> </span><span class=\"n\">/\\</span>\n<span class=\"w\">                  </span><span class=\"o\">(</span><span class=\"n\">IMP</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">DIAM</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">NOT</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">BOX</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">NOT</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"o\">))))</span><span class=\"w\"> </span><span class=\"n\">IN</span><span class=\"w\"> </span><span class=\"n\">S</span><span class=\"w\"> </span><span class=\"n\">/\\</span>\n<span class=\"w\">                  </span><span class=\"o\">(</span><span class=\"n\">IMP</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">NOT</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">BOX</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">NOT</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"o\">)))</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">DIAM</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"o\">))</span><span class=\"w\"> </span><span class=\"n\">IN</span><span class=\"w\"> </span><span class=\"n\">S</span><span class=\"w\"> </span><span class=\"n\">/\\</span>\n<span class=\"w\">                  </span><span class=\"o\">(</span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"n\">IN</span><span class=\"w\"> </span><span class=\"n\">S</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"n\">&gt;</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">subst</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">IN</span><span class=\"w\"> </span><span class=\"n\">S</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">/\\</span>\n<span class=\"w\">                  </span><span class=\"o\">(</span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"n\">IN</span><span class=\"w\"> </span><span class=\"n\">S</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"n\">&gt;</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">BOX</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">IN</span><span class=\"w\"> </span><span class=\"n\">S</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">/\\</span>\n<span class=\"w\">                  </span><span class=\"o\">((</span><span class=\"n\">IMP</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"n\">B</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">IN</span><span class=\"w\"> </span><span class=\"n\">S</span><span class=\"w\"> </span><span class=\"n\">/\\</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"n\">IN</span><span class=\"w\"> </span><span class=\"n\">S</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"n\">&gt;</span><span class=\"w\"> </span><span class=\"n\">B</span><span class=\"w\"> </span><span class=\"n\">IN</span><span class=\"w\"> </span><span class=\"n\">S</span><span class=\"o\">)</span><span class=\"sx\">`;</span>\n\n\n<span class=\"sx\">val NMLG_ind = save_thm(</span>\n<span class=\"sx\">  \"NMLG_ind\",</span>\n<span class=\"sx\">  ``phi ∈ NMLG G``</span>\n<span class=\"sx\">    |&gt; SIMP_CONV (srw_ss()) [NMLG_def, normal_modal_logic]</span>\n<span class=\"sx\">    |&gt; EQ_IMP_RULE |&gt; #1</span>\n<span class=\"sx\">    |&gt; UNDISCH |&gt; SPEC_ALL |&gt; UNDISCH</span>\n<span class=\"sx\">    |&gt; DISCH ``(phi : form) ∈ NMLG G``</span>\n<span class=\"sx\">    |&gt; Q.GEN `</span><span class=\"n\">phi`</span>\n<span class=\"w\">    </span><span class=\"o\">|</span><span class=\"n\">&gt;</span><span class=\"w\"> </span><span class=\"n\">DISCH_ALL</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Q.GEN</span><span class=\"w\"> </span><span class=\"sx\">`P`</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Something similar also exists in Lean (although I do not quite know how to use them...)</p>\n<p>Is there any way to do something similar in Isabelle? I hope something is written in the reference manual, but I can hardly find any.</p>",
        "id": 470137058,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1726306922
    },
    {
        "content": "<p>Say, in above, the <code>t |&gt; f</code> means passing a HOL term into an ML function. Here we start with the HOL term <code>phi ∈ NMLG G</code> of type bool, apply the function <code>SIMP_CONV (srw_ss()) [NMLG_def, normal_modal_logic]</code> on it, it will produce a theorem, with is an \"iff\". Then the next function takes the theorem, apply the ML function <code>EQ_IMP_RULE</code> on it, to split it into two directions, and the next function takes the forward implication, etc.</p>",
        "id": 470137402,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1726307132
    },
    {
        "content": "<p>I believe it can be done by stating the lemma and prove it, but I find some time using functions are more straightforward, and avoid the potential mistakes that may occur when writing out the theorem by hand.</p>",
        "id": 470137587,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1726307208
    },
    {
        "content": "<p>The thm NMLG_ind derived using functions:<br>\n<a href=\"/user_uploads/14278/Xq2qSZdvI8uLsAiUHbgaiuWw/image.png\">image.png</a><br>\nIt is done by unfolding the definition of big intersection.</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/14278/Xq2qSZdvI8uLsAiUHbgaiuWw/image.png\" title=\"image.png\"><img data-original-dimensions=\"1630x568\" src=\"/user_uploads/thumbnail/14278/Xq2qSZdvI8uLsAiUHbgaiuWw/image.png/840x560.webp\"></a></div>",
        "id": 470138657,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1726307488
    }
]