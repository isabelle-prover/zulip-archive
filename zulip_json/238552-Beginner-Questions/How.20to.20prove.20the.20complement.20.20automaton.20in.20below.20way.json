[
    {
        "content": "<p>I am trying to construct the complement regexp.</p>\n<p>First, I construct the NFA automaton, the definition of neg1 automaton takes an automaton and changes its accepts states. I thought it's a straightforward idea. </p>\n<p>However, I was stuck by the last lemma, <code>accepts_neg1</code>. Any help would be appreciated. </p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">type_synonym</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n n-Type\">'a</span><span class=\"o\">,</span><span class=\"n n-Type\">'s</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">na</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"'s * 'a set * ('a ⇒'s ⇒ 's set) * ('s ⇒ bool)\"</span>\n\n<span class=\"k\">primrec</span><span class=\"w\"> </span><span class=\"n\">delta</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"('a,'s)na ⇒ 'a list ⇒ 's ⇒ 's set\"</span><span class=\"w\"> </span><span class=\"kp\">where</span>\n<span class=\"s\">\"delta A []    p = {p}\"</span><span class=\"w\"> </span><span class=\"o\">|</span>\n<span class=\"s\">\"delta A (a#w) p = Union(delta A w ` next A a p)\"</span>\n\n<span class=\"k\">definition</span>\n<span class=\"w\"> </span><span class=\"n\">accepts</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"('a,'s)na ⇒ 'a list ⇒ bool\"</span><span class=\"w\"> </span><span class=\"kp\">where</span>\n<span class=\"s\">\"accepts A w = (∃q ∈ delta A w (start A). fin A q)\"</span>\n\n<span class=\"k\">definition</span>\n<span class=\"w\"> </span><span class=\"n\">step</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"('a,'s)na ⇒ 'a ⇒ ('s * 's)set\"</span><span class=\"w\"> </span><span class=\"kp\">where</span>\n<span class=\"s\">\"step A a = {(p,q) . q : next A a p}\"</span>\n\n<span class=\"k\">primrec</span><span class=\"w\"> </span><span class=\"n\">steps</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"('a,'s)na ⇒ 'a list ⇒ ('s * 's)set\"</span><span class=\"w\"> </span><span class=\"kp\">where</span>\n<span class=\"s\">\"steps A [] = Id\"</span><span class=\"w\"> </span><span class=\"o\">|</span>\n<span class=\"s\">\"steps A (a#w) = step A a  O  steps A w\"</span>\n\n\n<span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">steps_append</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]:</span>\n<span class=\"w\"> </span><span class=\"s\">\"steps A (v@w) = steps A v  O  steps A w\"</span>\n<span class=\"k\">by</span><span class=\"o\">(</span><span class=\"n\">induct</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">simp_all</span><span class=\"w\"> </span><span class=\"n\">add</span><span class=\"o\">:</span><span class=\"n\">O_assoc</span><span class=\"o\">)</span>\n\n<span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">in_steps_append</span><span class=\"o\">[</span><span class=\"n\">iff</span><span class=\"o\">]:</span>\n<span class=\"w\">  </span><span class=\"s\">\"(p,r) : steps A (v@w) = ((p,r) : (steps A v O steps A w))\"</span>\n<span class=\"kp\">apply</span><span class=\"o\">(</span><span class=\"n\">rule</span><span class=\"w\"> </span><span class=\"n\">steps_append</span><span class=\"o\">[</span><span class=\"n\">THEN</span><span class=\"w\"> </span><span class=\"n\">equalityE</span><span class=\"o\">])</span>\n<span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"n\">blast</span>\n<span class=\"k\">done</span>\n\n<span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">delta_conv_steps</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"⋀p. delta A w p = {q. (p,q) : steps A w}\"</span>\n<span class=\"k\">by</span><span class=\"o\">(</span><span class=\"n\">induct</span><span class=\"w\"> </span><span class=\"n\">w</span><span class=\"o\">)(</span><span class=\"n\">auto</span><span class=\"w\"> </span><span class=\"n\">simp</span><span class=\"o\">:</span><span class=\"n\">step_def</span><span class=\"o\">)</span>\n\n<span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">accepts_conv_steps</span><span class=\"o\">:</span>\n<span class=\"w\"> </span><span class=\"s\">\"accepts A w = (∃q. (start A,q) ∈ steps A w ∧ fin A q)\"</span>\n<span class=\"k\">by</span><span class=\"o\">(</span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"n\">add</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">delta_conv_steps</span><span class=\"w\"> </span><span class=\"n\">accepts_def</span><span class=\"o\">)</span>\n\n<span class=\"k\">type_synonym</span><span class=\"w\"> </span><span class=\"n n-Type\">'a</span><span class=\"w\"> </span><span class=\"n\">bitsNA</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"('a, nat list)na\"</span>\n\n<span class=\"k\">definition</span>\n<span class=\"n\">neg1</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"'a bitsNA ⇒ 'a bitsNA\"</span><span class=\"w\"> </span><span class=\"kp\">where</span>\n<span class=\"s\">\"neg1 = (λ(ql,vl1,dl,fl). (ql, vl1, dl, λs. ¬ fl s))\"</span>\n\n<span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">fin_neg1</span><span class=\"o\">[</span><span class=\"n\">iff</span><span class=\"o\">]:</span>\n<span class=\"s\">\"⋀L. fin (neg1 L) q = (¬ fin L q)\"</span>\n<span class=\"w\">  </span><span class=\"kp\">apply</span><span class=\"o\">(</span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"n\">add</span><span class=\"o\">:</span><span class=\"n\">neg1_def</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"k\">done</span>\n<span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">start_neg1</span><span class=\"o\">[</span><span class=\"n\">iff</span><span class=\"o\">]:</span>\n<span class=\"s\">\"⋀L. start (neg1 L) = start L\"</span>\n<span class=\"w\">  </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"n\">add</span><span class=\"o\">:</span><span class=\"n\">neg1_def</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"k\">done</span>\n<span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">step_neg1</span><span class=\"o\">[</span><span class=\"n\">iff</span><span class=\"o\">]:</span>\n<span class=\"s\">\"⋀L p. (p, q)∈ step (neg1 L) a = ((p, q) ∈ step L a)\"</span>\n<span class=\"w\">  </span><span class=\"kp\">apply</span><span class=\"o\">(</span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"n\">add</span><span class=\"o\">:</span><span class=\"n\">neg1_def</span><span class=\"w\"> </span><span class=\"n\">step_def</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"k\">done</span>\n\n\n\n<span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">steps_neg1</span><span class=\"o\">[</span><span class=\"n\">iff</span><span class=\"o\">]:</span>\n<span class=\"s\">\"⋀L p. (p, q)∈ steps (neg1 L) w = ((p, q) ∈ steps L w)\"</span>\n<span class=\"w\">  </span><span class=\"kp\">apply</span><span class=\"o\">(</span><span class=\"n\">induct</span><span class=\"w\"> </span><span class=\"n\">w</span><span class=\"o\">)</span>\n<span class=\"w\">   </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"n\">simp</span>\n<span class=\"w\">  </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"n\">simp</span>\n<span class=\"w\">  </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"n\">force</span>\n<span class=\"w\">  </span><span class=\"k\">done</span>\n\n<span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">accepts_neg1</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">accepts</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">neg1</span><span class=\"w\"> </span><span class=\"n\">L</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">w</span><span class=\"w\"> </span><span class=\"n\">⟹</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">¬</span><span class=\"w\"> </span><span class=\"n\">accepts</span><span class=\"w\"> </span><span class=\"n\">L</span><span class=\"w\"> </span><span class=\"n\">w</span><span class=\"o\">)</span><span class=\"s\">\"</span>\n<span class=\"s\">apply (simp add: accepts_conv_steps)</span>\n<span class=\"s\">  apply(induct w)</span>\n<span class=\"s\">  apply simp</span>\n<span class=\"s\">  sorry</span>\n</code></pre></div>",
        "id": 363744120,
        "sender_full_name": "Hongjian Jiang",
        "timestamp": 1685975363
    },
    {
        "content": "<p>I just think the way is to universal parameter in the state q, but I don't know how to solve it.</p>",
        "id": 363746152,
        "sender_full_name": "Hongjian Jiang",
        "timestamp": 1685975755
    },
    {
        "content": "<p>What is you definition of <code>next</code>?</p>",
        "id": 363752681,
        "sender_full_name": "Maximilian Schäffeler",
        "timestamp": 1685976937
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">definition</span><span class=\"w\"> </span><span class=\"n\">start</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"'a * 'b * 'c * 'd ⇒ 'a\"</span><span class=\"w\"> </span><span class=\"kp\">where</span><span class=\"w\"> </span><span class=\"s\">\"start A = fst A\"</span>\n<span class=\"k\">definition</span><span class=\"w\"> </span><span class=\"n\">alp</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"'a * 'b * 'c * 'd ⇒ 'b\"</span><span class=\"w\"> </span><span class=\"kp\">where</span><span class=\"w\"> </span><span class=\"s\">\"alp A = fst(snd(A))\"</span>\n<span class=\"k\">definition</span><span class=\"w\"> </span><span class=\"s\">\"next\"</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"'a * 'b * 'c * 'd ⇒ 'c\"</span><span class=\"w\"> </span><span class=\"kp\">where</span><span class=\"w\"> </span><span class=\"s\">\"next A = fst(snd(snd(A)))\"</span>\n<span class=\"k\">definition</span><span class=\"w\"> </span><span class=\"n\">fin</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"'a * 'b * 'c * 'd ⇒ 'd\"</span><span class=\"w\"> </span><span class=\"kp\">where</span><span class=\"w\"> </span><span class=\"s\">\"fin A = snd(snd(snd(A)))\"</span>\n</code></pre></div>",
        "id": 363756716,
        "sender_full_name": "Hongjian Jiang",
        "timestamp": 1685977685
    },
    {
        "content": "<p>Please remove the useless <code>⋀L p.</code></p>",
        "id": 363800226,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1685987379
    },
    {
        "content": "<p><del>And the proof goes through once you realize that you have to generalize over <code>p</code> and <code>q</code></del><br>\nwrong lemma</p>",
        "id": 363800321,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1685987400
    },
    {
        "content": "<p>Once remove the L and p, the steps lemma couldn't pass easily</p>",
        "id": 363807493,
        "sender_full_name": "Hongjian Jiang",
        "timestamp": 1685989345
    },
    {
        "content": "<p>I though a little bit more about it and it is unclear to me if this holds because NFA means that you could have two paths one reaching a final a state and one reaching a non-final state.  So negation would still accept the word.</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"w\"> </span><span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"s\">\"accepts (neg1 L) [w] ⟹ (¬ accepts L [w])\"</span>\n<span class=\"c\">(*</span>\n<span class=\"c\">Testing conjecture with Quickcheck-exhaustive...</span>\n<span class=\"c\">Quickcheck found a counterexample:</span>\n<span class=\"c\">  L = ([], {}, λx xa. {[0], []}, UNIV - {[]})</span>\n<span class=\"c\">  w = a⇩1</span>\n<span class=\"c\">*)</span>\n</code></pre></div>",
        "id": 363807650,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1685989388
    },
    {
        "content": "<p>Not sure if the counter-example is correct</p>",
        "id": 363807737,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1685989419
    },
    {
        "content": "<p>My NFA includes the initial state, alphabet,  transition states and accept states.</p>\n<p>The transition rules take one alphabet and one state, the state is denoted in a list, then return a list set, like the atom automaton below,</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">definition</span>\n<span class=\"w\">  </span><span class=\"s\">\"atom\"</span><span class=\"w\">  </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"'a ⇒ 'a set ⇒ 'a bitsNA\"</span><span class=\"w\"> </span><span class=\"kp\">where</span>\n<span class=\"s\">\"atom a vs = ([2],vs,</span>\n<span class=\"s\">            λb s. if s=[2] ∧ b=a ∧ a : vs then {[3]} else {[1]},</span>\n<span class=\"s\">            λs. case s of [] ⇒ False | left#s ⇒ (left#s) = [3])\"</span>\n</code></pre></div>",
        "id": 363808788,
        "sender_full_name": "Hongjian Jiang",
        "timestamp": 1685989721
    },
    {
        "content": "<p>There is no counterexample in my script. </p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"n\">Testing</span><span class=\"w\"> </span><span class=\"n\">conjecture</span><span class=\"w\"> </span><span class=\"k\">with</span><span class=\"w\"> </span><span class=\"n\">Quickcheck</span><span class=\"o\">-</span><span class=\"n\">exhaustive...</span>\n<span class=\"n\">Quickcheck</span><span class=\"w\"> </span><span class=\"n\">ran</span><span class=\"w\"> </span><span class=\"n\">out</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">time</span>\n<span class=\"n\">Quickcheck</span><span class=\"w\"> </span><span class=\"n\">found</span><span class=\"w\"> </span><span class=\"n\">no</span><span class=\"w\"> </span><span class=\"n\">counterexample.</span>\n</code></pre></div>\n<p>I don't know exactly.</p>",
        "id": 363808984,
        "sender_full_name": "Hongjian Jiang",
        "timestamp": 1685989780
    },
    {
        "content": "<p>I replace the path w by a path of length 1 <code>[w]</code></p>",
        "id": 363809132,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1685989809
    },
    {
        "content": "<p>Ahh, I see. From the counterexample, the negation of L cound just accept empty list. That's the inital state and any input character.</p>",
        "id": 363810101,
        "sender_full_name": "Hongjian Jiang",
        "timestamp": 1685990069
    }
]