[
    {
        "content": "<p>I'm having difficulty figuring out how to structure a proof involving an inductive set or predicate with a parameter when there is more than one instance of the set or predicate involved. Here's a toy example of what I'm talking about:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">inductive</span>\n<span class=\"w\">  </span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"'b set =&gt; 'b list =&gt; bool\"</span>\n<span class=\"w\">  </span><span class=\"kp\">for</span>\n<span class=\"w\">    </span><span class=\"n\">B</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"'b set\"</span>\n<span class=\"w\">  </span><span class=\"kp\">where</span><span class=\"w\"> </span><span class=\"s\">\"A B []\"</span>\n<span class=\"w\">      </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"s\">\"[| b </span><span class=\"ss\">\\&lt;in&gt;</span><span class=\"s\"> B; A B bs |] ==&gt; A B (b#bs)\"</span>\n\n<span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">A_monotonic</span><span class=\"o\">:</span>\n<span class=\"w\">  </span><span class=\"kp\">assumes</span>\n<span class=\"w\">    </span><span class=\"n\">B_subset_C</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"B </span><span class=\"ss\">\\&lt;subseteq&gt;</span><span class=\"s\"> C\"</span>\n<span class=\"w\">  </span><span class=\"kp\">shows</span>\n<span class=\"w\">    </span><span class=\"s\">\"A B x ==&gt; A C x\"</span>\n<span class=\"k\">proof</span><span class=\"w\"> </span><span class=\"o\">-</span>\n<span class=\"w\">  </span><span class=\"gr\">oops</span>\n</code></pre></div>\n<p>(Obviously this is not a good way to define this set, which would just be <code>{bs. set bs \\&lt;subseteq&gt; B}</code> but this kind of definition seems to make sense in my actual project.)<br>\nHow would you go about proving this?</p>",
        "id": 430319790,
        "sender_full_name": "James Hanson",
        "timestamp": 1711747343
    },
    {
        "content": "<p>I realized that I didn't correctly identify what my problem was, which actually had to do with matching types in the statement of a lemma about mutually inductive sets with implicit type parameters.</p>\n<p>For the record, here is a proof for my toy example:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">inductive</span>\n<span class=\"w\">  </span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"'b set =&gt; 'b list =&gt; bool\"</span>\n<span class=\"w\">  </span><span class=\"kp\">for</span>\n<span class=\"w\">    </span><span class=\"n\">B</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"'b set\"</span>\n<span class=\"w\">    </span><span class=\"kp\">where</span><span class=\"w\"> </span><span class=\"s\">\"A B []\"</span>\n<span class=\"w\">    </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"s\">\"[| b </span><span class=\"ss\">\\&lt;in&gt;</span><span class=\"s\"> B; A B bs |] ==&gt; A B (b#bs)\"</span>\n\n<span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">A_monotonic</span><span class=\"o\">:</span>\n<span class=\"w\">  </span><span class=\"kp\">assumes</span>\n<span class=\"w\">    </span><span class=\"n\">B_subset_C</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"B </span><span class=\"ss\">\\&lt;subseteq&gt;</span><span class=\"s\"> C\"</span>\n<span class=\"w\">  </span><span class=\"kp\">shows</span>\n<span class=\"w\">    </span><span class=\"s\">\"A B x ==&gt; A C x\"</span>\n<span class=\"k\">proof</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">induct</span><span class=\"w\"> </span><span class=\"n\">rule</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">A.induct</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"k\">case</span><span class=\"w\"> </span><span class=\"n\">1</span>\n<span class=\"w\">  </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"k\">case</span>\n<span class=\"w\">    </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">A.intros</span><span class=\"o\">(</span><span class=\"n\">1</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">auto</span>\n<span class=\"k\">next</span>\n<span class=\"w\">  </span><span class=\"k\">case</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">2</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"n\">bs</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"k\">case</span>\n<span class=\"w\">    </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">meson</span><span class=\"w\"> </span><span class=\"n\">A.intros</span><span class=\"o\">(</span><span class=\"n\">2</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">assms</span><span class=\"w\"> </span><span class=\"n\">in_mono</span><span class=\"o\">)</span>\n<span class=\"k\">qed</span>\n</code></pre></div>",
        "id": 430506534,
        "sender_full_name": "James Hanson",
        "timestamp": 1711918226
    }
]