[
    {
        "content": "<p>I am not sure how to deal with function definitions that contain <code>let</code>s inside proofs. </p>\n<p>Unfolding the function definition yields</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"w\">  </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"s\">\"lapprox_tm0 η0 η1 d φ x ⊥ (Suc n) = (let (val, η1', d') = lapprox_tm0 η0 η1 d φ x ⊥ n in</span>\n<span class=\"s\">                                          eval_tm0 (η0(x := val)) η1' d' φ)\"</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">simp</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Eventually I would like to connect <code>lapprox_tm0</code> to <code>eval_tm0</code> but the following obviously does not work since the variables are not in scope</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"w\">  </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"s\">\"lapprox_tm0 η0' η1' d φ x ⊥ (Suc n) = (let (val, η1'', d') = lapprox_tm0 η0' η1' d φ x ⊥ n in</span>\n<span class=\"s\">                                          eval_tm0 (η0'(x := val)) η1'' d' φ)\"</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">simp</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"s\">\"lapprox_tm0 η0' η1' d φ x ⊥ (Suc n) = eval_tm0 (η0'(x := val)) η1'' d' φ\"</span><span class=\"w\"> </span><span class=\"c\">(* error *)</span><span class=\"w\"></span>\n</code></pre></div>\n<p>so <code>simp</code> fails on the last step.</p>\n<p>On paper I  would imagine to do the following</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"w\">  </span><span class=\"k\">fix</span><span class=\"w\"> </span><span class=\"n\">val</span><span class=\"w\"> </span><span class=\"n\">η1''</span><span class=\"w\"> </span><span class=\"n\">d'</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">assume</span><span class=\"w\"> </span><span class=\"s\">\"lapprox_tm0 η0 η1 d φ x ⊥ n = (val, η1'', d')\"</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"n\">1</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"lapprox_tm0 η0 η1 d φ x ⊥ (Suc n) = eval_tm0 (η0(x := val)) η1'' d' φ\"</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">simp</span><span class=\"w\"></span>\n</code></pre></div>\n<p>where now  <code>simp</code> would work.  But I cannot do this inside the proof in Isabelle since I got that <code>assume</code> there which causes the proof state to error obviously.</p>",
        "id": 313105571,
        "sender_full_name": "waynee95",
        "timestamp": 1669827427
    },
    {
        "content": "<p>I do not know the details of your proof. You might want to provide a minimal working example of your problem, but to cover the basics, have you passed the definition of Let <code>Let_def</code> to the simplifier? i.e. <code>apply (simp add: Let_def)</code>?</p>",
        "id": 313238343,
        "sender_full_name": "Jonathan Julian Huerta y Munive",
        "timestamp": 1669888078
    }
]