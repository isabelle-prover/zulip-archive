[
    {
        "content": "<p>Hi, I'm trying to prove this lemma :</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"s\">\"⊢{λs. (s ''a'' = n) ∧ (s ''b'' = m) ∧ (n &gt; 0) ∧ (m &gt; 0)} wgcd {λs. s ''a'' = gcd n m}\"</span>\n</code></pre></div>\n<p>where <code>gcd</code> is the default gcd function and <code>wgcd</code> is imperative version of gcd algorithm written in IMP (I added <code>Sub</code> and <code>Or</code> to syntax and semantics and they work fine):</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">abbreviation</span> <span class=\"s\">\"wgcd ==</span>\n<span class=\"s\">  WHILE (Or (Less (V ''b'') (V ''a'')) (Less (V ''a'') (V ''b'')))</span>\n<span class=\"s\">  DO (IF (Less (V ''b'') (V ''a'')) THEN</span>\n<span class=\"s\">         (''a'' ::= Sub (V ''a'') (V ''b''))</span>\n<span class=\"s\">      ELSE</span>\n<span class=\"s\">         (''b'' ::= Sub (V ''b'') (V ''a'')))\"</span>\n</code></pre></div>\n<p>I wrote :</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kp\">apply</span> <span class=\"o\">(</span><span class=\"n\">rule</span> <span class=\"n\">While'</span><span class=\"o\">[</span><span class=\"kp\">where</span> <span class=\"n\">P</span> <span class=\"o\">=</span> <span class=\"s\">\"(λs. (s ''a'' &gt; 0 ∧ s ''b'' &gt; 0 ∧  gcd n m = gcd (s ''a'') (s ''b'')))\"</span><span class=\"o\">])</span>\n</code></pre></div>\n<p>but it fails to apply proof method:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">proof</span> <span class=\"o\">(</span><span class=\"n\">prove</span><span class=\"o\">)</span>\n<span class=\"n\">goal</span> <span class=\"o\">(</span><span class=\"n\">1</span> <span class=\"n\">subgoal</span><span class=\"o\">):</span>\n <span class=\"n\">1</span><span class=\"ow\">.</span> <span class=\"err\">⊢</span> <span class=\"ow\">{</span><span class=\"n\">λs.</span> <span class=\"n\">s</span> <span class=\"err\">'</span><span class=\"n n-Type\">'a''</span> <span class=\"o\">=</span> <span class=\"n\">n</span> <span class=\"err\">∧</span> <span class=\"n\">s</span> <span class=\"err\">'</span><span class=\"n n-Type\">'b''</span> <span class=\"o\">=</span> <span class=\"n\">m</span> <span class=\"err\">∧</span> <span class=\"n\">0</span> <span class=\"err\">&lt;</span> <span class=\"n\">n</span> <span class=\"err\">∧</span> <span class=\"n\">0</span> <span class=\"err\">&lt;</span> <span class=\"n\">m</span><span class=\"ow\">}</span> <span class=\"n\">wgcd</span> <span class=\"ow\">{</span><span class=\"n\">λs.</span> <span class=\"n\">s</span> <span class=\"err\">'</span><span class=\"n n-Type\">'a''</span> <span class=\"o\">=</span> <span class=\"n\">hoare_test.gcd</span> <span class=\"n\">n</span> <span class=\"n\">m</span><span class=\"ow\">}</span>\n<span class=\"n\">Failed</span> <span class=\"n\">to</span> <span class=\"kp\">apply</span> <span class=\"k\">proof</span> <span class=\"n\">method</span><span class=\"err\">⌂</span><span class=\"o\">:</span>\n<span class=\"n\">goal</span> <span class=\"o\">(</span><span class=\"n\">1</span> <span class=\"n\">subgoal</span><span class=\"o\">):</span>\n <span class=\"n\">1</span><span class=\"ow\">.</span> <span class=\"err\">⊢</span> <span class=\"ow\">{</span><span class=\"n\">λs.</span> <span class=\"n\">s</span> <span class=\"err\">'</span><span class=\"n n-Type\">'a''</span> <span class=\"o\">=</span> <span class=\"n\">n</span> <span class=\"err\">∧</span> <span class=\"n\">s</span> <span class=\"err\">'</span><span class=\"n n-Type\">'b''</span> <span class=\"o\">=</span> <span class=\"n\">m</span> <span class=\"err\">∧</span> <span class=\"n\">0</span> <span class=\"err\">&lt;</span> <span class=\"n\">n</span> <span class=\"err\">∧</span> <span class=\"n\">0</span> <span class=\"err\">&lt;</span> <span class=\"n\">m</span><span class=\"ow\">}</span> <span class=\"n\">wgcd</span> <span class=\"ow\">{</span><span class=\"n\">λs.</span> <span class=\"n\">s</span> <span class=\"err\">'</span><span class=\"n n-Type\">'a''</span> <span class=\"o\">=</span> <span class=\"n\">hoare_test.gcd</span> <span class=\"n\">n</span> <span class=\"n\">m</span><span class=\"ow\">}</span>\n</code></pre></div>\n<p>What's the problem? is it precondition and postcondition or the invariant?<br>\nThanks for your help in advance.</p>",
        "id": 273409425,
        "sender_full_name": "Hamed Hajisadeghian",
        "timestamp": 1645975987
    },
    {
        "content": "<p>The precondition in the rule you want to apply does unify with the one in your goal. To compare the two:</p>\n<div class=\"codehilite\"><pre><span></span><code>{λs. 0 &lt; s &#39;&#39;a&#39;&#39; ∧ 0 &lt; s &#39;&#39;b&#39;&#39; ∧ gcd n m = gcd (s &#39;&#39;a&#39;&#39;) (s &#39;&#39;b&#39;&#39;)}\n{λs. (s &#39;&#39;a&#39;&#39; = n) ∧ (s &#39;&#39;b&#39;&#39; = m) ∧ (n &gt; 0) ∧ (m &gt; 0)}\n</code></pre></div>",
        "id": 273412036,
        "sender_full_name": "Simon Roßkopf",
        "timestamp": 1645979364
    },
    {
        "content": "<p>I changed the loop invariant  to unify with goal:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"s\">\"⊢{λs. s ''a'' = n ∧ s ''b'' = m ∧ n &gt; 0 ∧ m &gt; 0 ∧ (gcd (s ''a'') (s ''b'') = gcd (n) (m))}</span>\n<span class=\"s\">        WHILE (Or (Less (V ''b'') (V ''a'')) (Less (V ''a'') (V ''b'')))</span>\n<span class=\"s\">        DO (IF (Less (V ''b'') (V ''a'')) THEN</span>\n<span class=\"s\">               (''a'' ::= Sub (V ''a'') (V ''b''))</span>\n<span class=\"s\">            ELSE</span>\n<span class=\"s\">               (''b'' ::= Sub (V ''b'') (V ''a'')))</span>\n<span class=\"s\">        {λs. s ''a'' = gcd (s ''A'') (s ''B'')}\"</span>\n  <span class=\"kp\">apply</span> <span class=\"o\">(</span><span class=\"n\">rule</span> <span class=\"n\">While'</span><span class=\"o\">[</span><span class=\"kp\">where</span> <span class=\"n\">P</span> <span class=\"o\">=</span> <span class=\"s\">\"λs. s ''a'' = n ∧ s ''b'' = m ∧ 0 &lt; n ∧ 0 &lt; m ∧ gcd (s ''a'') (s ''b'') = gcd n m\"</span><span class=\"o\">])</span>\n  <span class=\"kp\">apply</span> <span class=\"n\">auto</span>\n    <span class=\"kp\">apply</span> <span class=\"o\">(</span><span class=\"n\">rule</span> <span class=\"n\">Assign'</span><span class=\"o\">)</span>\n    <span class=\"kp\">apply</span> <span class=\"n\">auto</span>\n    <span class=\"kp\">prefer</span> <span class=\"n\">2</span>\n    <span class=\"kp\">apply</span> <span class=\"o\">(</span><span class=\"n\">rule</span> <span class=\"n\">Assign'</span><span class=\"o\">)</span>\n  <span class=\"kp\">apply</span> <span class=\"n\">auto</span>\n</code></pre></div>\n<p>and now subgoals are:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">proof</span> <span class=\"o\">(</span><span class=\"n\">prove</span><span class=\"o\">)</span>\n<span class=\"n\">goal</span> <span class=\"o\">(</span><span class=\"n\">3</span> <span class=\"n\">subgoals</span><span class=\"o\">):</span>\n <span class=\"n\">1</span><span class=\"ow\">.</span> <span class=\"err\">⋀</span><span class=\"n\">s.</span> <span class=\"n\">0</span> <span class=\"err\">&lt;</span> <span class=\"n\">s</span> <span class=\"err\">'</span><span class=\"n n-Type\">'a''</span> <span class=\"err\">⟹</span> <span class=\"n\">m</span> <span class=\"o\">=</span> <span class=\"n\">s</span> <span class=\"err\">'</span><span class=\"n n-Type\">'b''</span> <span class=\"err\">⟹</span> <span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"n\">s</span> <span class=\"err\">'</span><span class=\"n n-Type\">'a''</span> <span class=\"err\">⟹</span> <span class=\"n\">s</span> <span class=\"err\">'</span><span class=\"n n-Type\">'a''</span> <span class=\"err\">&lt;</span> <span class=\"n\">s</span> <span class=\"err\">'</span><span class=\"n n-Type\">'b''</span> <span class=\"err\">⟹</span> <span class=\"n\">False</span>\n <span class=\"n\">2</span><span class=\"ow\">.</span> <span class=\"err\">⋀</span><span class=\"n\">s.</span> <span class=\"n\">0</span> <span class=\"err\">&lt;</span> <span class=\"n\">s</span> <span class=\"err\">'</span><span class=\"n n-Type\">'b''</span> <span class=\"err\">⟹</span> <span class=\"n\">m</span> <span class=\"o\">=</span> <span class=\"n\">s</span> <span class=\"err\">'</span><span class=\"n n-Type\">'b''</span> <span class=\"err\">⟹</span> <span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"n\">s</span> <span class=\"err\">'</span><span class=\"n n-Type\">'a''</span> <span class=\"err\">⟹</span> <span class=\"n\">s</span> <span class=\"err\">'</span><span class=\"n n-Type\">'b''</span> <span class=\"err\">&lt;</span> <span class=\"n\">s</span> <span class=\"err\">'</span><span class=\"n n-Type\">'a''</span> <span class=\"err\">⟹</span> <span class=\"n\">False</span>\n <span class=\"n\">3</span><span class=\"ow\">.</span> <span class=\"err\">⋀</span><span class=\"n\">s.</span> <span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"n\">s</span> <span class=\"err\">'</span><span class=\"n n-Type\">'a''</span> <span class=\"err\">⟹</span> <span class=\"n\">m</span> <span class=\"o\">=</span> <span class=\"n\">s</span> <span class=\"err\">'</span><span class=\"n n-Type\">'a''</span> <span class=\"err\">⟹</span> <span class=\"n\">0</span> <span class=\"err\">&lt;</span> <span class=\"n\">s</span> <span class=\"err\">'</span><span class=\"n n-Type\">'a''</span> <span class=\"err\">⟹</span> <span class=\"n\">s</span> <span class=\"err\">'</span><span class=\"n n-Type\">'b''</span> <span class=\"o\">=</span> <span class=\"n\">s</span> <span class=\"err\">'</span><span class=\"n n-Type\">'a''</span> <span class=\"err\">⟹</span> <span class=\"n\">s</span> <span class=\"err\">'</span><span class=\"n n-Type\">'a''</span> <span class=\"o\">=</span> <span class=\"n\">gcd</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"err\">'</span><span class=\"n n-Type\">'A''</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"err\">'</span><span class=\"n n-Type\">'B''</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>How should I continue? I also tried this definition from <code>Arith2</code> library instead of default definition from <code>GCD</code> library:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">definition</span> <span class=\"n\">cd</span> <span class=\"o\">::</span> <span class=\"s\">\"[nat, nat, nat] ⇒ bool\"</span>\n  <span class=\"kp\">where</span> <span class=\"s\">\"cd x m n ⟷ x dvd m ∧ x dvd n\"</span>\n\n<span class=\"k\">definition</span> <span class=\"n\">gcd</span> <span class=\"o\">::</span> <span class=\"s\">\"[nat, nat] ⇒ nat\"</span>\n  <span class=\"kp\">where</span> <span class=\"s\">\"gcd m n = (SOME x. x&gt;0 ∧ cd x m n &amp; (∀y.(cd y m n) ⟶ y dvd x))\"</span>\n</code></pre></div>\n<p>Which one should I use? should I define it myself?</p>",
        "id": 274803607,
        "sender_full_name": "Hamed Hajisadeghian",
        "timestamp": 1646900827
    },
    {
        "content": "<p>When trying to prove false you have to ask yourself: are my assumptions contradictory? Or is my goal false?</p>",
        "id": 274804523,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1646901434
    },
    {
        "content": "<p>Here the assumptions do not seem contradictory, so your goal is most likely false</p>",
        "id": 274804624,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1646901491
    },
    {
        "content": "<p>Your question really looks like an homework, so I don't want to spoil the fun of finding why the goal is false</p>",
        "id": 274804703,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1646901553
    }
]