[
    {
        "content": "<p>Hi, again! I run into a context where I've got two subgoals <code>A ?x</code> and <code>B ?x ?y</code> (shared schematic <code>?x</code>!), of which <code>A ?x</code> can be uniquely instantiated + solved from the context, while <code>B ?x ?y</code> with _both_ <code>?x</code> and <code>?y</code> schematic, has multiple correct instantiations, all but one of which with 'wrong' <code>x</code>. In this context, it is therefore vital to first solve <code>A ?x</code>, and _then_ <code>B x ?y</code>. Are there some tricks one can play to ignore <code>B ?x ?y</code> until at least <code>x</code> is instantiated?</p>",
        "id": 328855591,
        "sender_full_name": "Hanno Becker",
        "timestamp": 1676836425
    },
    {
        "content": "<p>If the subgoal <code>A ?x</code> is first, you can apply a proof method that only tackles a single goal and instantiates schematic variables (sometimes this proof method can just be <code>assumption</code>). If you need to apply a proof method that tackles several goals, like <code>auto</code>, you can limit it to work only on the first subgoal by appending <code>[1]</code> to it.</p>",
        "id": 328868249,
        "sender_full_name": "Wolfgang Jeltsch",
        "timestamp": 1676846277
    },
    {
        "content": "<p>Thank you Wolfgang! Unfortunately, this doesn't work for me, because I'm working with largely automatic reasoning, and the difficulty is to prevent the 'driver' to look at <code>B ?x ?y</code> first. The issue is actually more general, and I'll re-phrase the question in those terms shortly.</p>",
        "id": 329217010,
        "sender_full_name": "Hanno Becker",
        "timestamp": 1676992695
    }
]