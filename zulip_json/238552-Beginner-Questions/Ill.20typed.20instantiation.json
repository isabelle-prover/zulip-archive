[
    {
        "content": "<p>I have a lemma</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"o\">(</span><span class=\"kp\">in</span> <span class=\"n\">th8b</span><span class=\"o\">)</span> <span class=\"n\">new_lemma</span><span class=\"o\">:</span> <span class=\"s\">\"plus zero n = n\"</span>\n</code></pre></div>\n<p>However, if I apply induction on n, it gives me an error that says unable to figure out induction rule.</p>\n<p>If I try strong induction  apply(induction n rule: nat_less_induct) I get an error \"Ill-typed instantiation:<br>\n  n :: 'a\" What does this mean?</p>\n<p>Edit: <br>\nThe zero and plus are from locale th1 and th2. While there is a similar assumption (to new_lemma) in th2, I am trying to prove the commutative as well.</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">locale</span> <span class=\"n\">th1</span> <span class=\"o\">=</span>\n  <span class=\"kp\">fixes</span>\n    <span class=\"n\">zero</span> <span class=\"o\">::</span> <span class=\"s\">\"'a\"</span>\n    <span class=\"kp\">and</span> <span class=\"n\">suc</span> <span class=\"o\">::</span> <span class=\"s\">\"'a ⇒ 'a\"</span>\n  <span class=\"kp\">assumes</span>\n    <span class=\"s\">\"suc n ≠ zero\"</span>\n    <span class=\"kp\">and</span> <span class=\"s\">\"suc n = suc m ⟶ n = m\"</span>\n\n<span class=\"k\">locale</span> <span class=\"n\">th2</span> <span class=\"o\">=</span> <span class=\"n\">th1</span> <span class=\"o\">+</span>\n  <span class=\"kp\">fixes</span>\n    <span class=\"n\">plus</span> <span class=\"o\">::</span> <span class=\"s\">\"'a ⇒ 'a ⇒ 'a\"</span>\n    <span class=\"kp\">and</span> <span class=\"n\">evalBinNum</span> <span class=\"o\">::</span> <span class=\"s\">\"BinNum ⇒ 'a\"</span>\n  <span class=\"kp\">assumes</span>\n     <span class=\"n\">arith_1</span><span class=\"o\">:</span> <span class=\"s\">\"⋀n. plus n zero = n\"</span>\n    <span class=\"kp\">and</span> <span class=\"n\">plus_suc</span><span class=\"o\">:</span> <span class=\"s\">\"⋀n m. plus n (suc m) = suc ( plus n m)\"</span>\n\n<span class=\"k\">locale</span> <span class=\"n\">th3</span> <span class=\"o\">=</span> <span class=\"n\">th2</span> <span class=\"o\">+</span>\n  <span class=\"kp\">fixes</span>\n    <span class=\"n\">times</span> <span class=\"o\">::</span> <span class=\"s\">\"'a ⇒ 'a ⇒ 'a\"</span>\n  <span class=\"kp\">assumes</span>\n    <span class=\"s\">\"times n zero = zero\"</span>\n    <span class=\"kp\">and</span> <span class=\"s\">\"times n (suc m) =  plus (times n m) n\"</span>\n<span class=\"k\">locale</span> <span class=\"n\">th8b</span> <span class=\"o\">=</span> <span class=\"n\">th3</span> <span class=\"o\">+</span>\n <span class=\"kp\">assumes</span> <span class=\"n\">p1</span><span class=\"o\">:</span>\n    <span class=\"s\">\"((∀x . p zero ∧ ( p x ⟶ p (suc x))) ⟶ (∀x. p x))\"</span>\n</code></pre></div>",
        "id": 290440065,
        "sender_full_name": "Lekhani Ray",
        "timestamp": 1658441100
    },
    {
        "content": "<p>What is the induction principle you expect on element of the arbitrary type <code>'a</code>?</p>",
        "id": 290464854,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1658465354
    },
    {
        "content": "<p>And you intended to use p1 with <code>apply (induction n rule: p1)</code> you have to change <code>p1</code> first:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">locale</span> <span class=\"n\">th8b</span> <span class=\"o\">=</span> <span class=\"n\">th3</span> <span class=\"o\">+</span>\n <span class=\"kp\">assumes</span> <span class=\"n\">p1</span><span class=\"o\">:</span>\n    <span class=\"s\">\"⋀x. ((⋀x . p zero ∧ ( p x ⟶ p (suc x)))) ⟹ p x\"</span>\n\n<span class=\"kn\">lemma</span> <span class=\"o\">(</span><span class=\"kp\">in</span> <span class=\"n\">th8b</span><span class=\"o\">)</span> <span class=\"n\">new_lemma</span><span class=\"o\">:</span> <span class=\"s\">\"plus zero n = n\"</span>\n  <span class=\"kp\">apply</span> <span class=\"o\">(</span><span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"n\">rule</span><span class=\"o\">:</span> <span class=\"n\">p1</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 290465065,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1658465536
    }
]