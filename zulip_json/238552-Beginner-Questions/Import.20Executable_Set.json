[
    {
        "content": "<p>Hi everybody,</p>\n<p>I wrote a function to convert a set to a list</p>\n<div class=\"codehilite\"><pre><span></span><code>fun convert_set_to_list :: &quot;&#39;a set ⇒ &#39;a list&quot; where\n  &quot;convert_set_to_list {} =  []&quot; |\n  &quot;convert_set_to_list (insert x A) = [x] @ convert_set_to_list A&quot;\n</code></pre></div>\n<p>the output showed: </p>\n<div class=\"codehilite\"><pre><span></span><code>Non-constructor pattern not allowed in sequential mode.\nconvert_set_to_list {} = []\n</code></pre></div>\n<p>I found a solution that I should import <code>Executable_Set</code> to use <code>{}</code> directly in this forum: <a href=\"https://lists.cam.ac.uk/pipermail/cl-isabelle-users/2008-January/msg00035.html\">https://lists.cam.ac.uk/pipermail/cl-isabelle-users/2008-January/msg00035.html</a><br>\nHowever, when I type <code>imports Main \"~~/src/HOL/Library/Executable_Set\"</code>, Isabelle said that <code>Bad theory import \"Draft.Executable_Set\"</code><br>\nThis library isn't supported anymore?</p>",
        "id": 218266190,
        "sender_full_name": "Trinh Le Khanh",
        "timestamp": 1606729851
    },
    {
        "content": "<ul>\n<li>the function does not make sense (sets are not ordered: which element do you take first)</li>\n<li><code>\"HOL-Library.Executable_Set\"</code> for the import</li>\n</ul>",
        "id": 218266449,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1606730009
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"233198\">Mathias Fleury</span> <a href=\"#narrow/stream/238552-Beginner-Questions/topic/Import.20Executable_Set/near/218266449\">said</a>:</p>\n<blockquote>\n<ul>\n<li>The function does not make sense (sets are not ordered: which element do you take first)</li>\n</ul>\n</blockquote>\n<p>So, there is no way to convert a general set to a list, right? I know <code>sorted_list_of_set</code>but it just applies for primary types like <code>nat</code>, <code>int</code>.</p>\n<p><span class=\"user-mention silent\" data-user-id=\"233198\">Mathias Fleury</span> <a href=\"#narrow/stream/238552-Beginner-Questions/topic/Import.20Executable_Set/near/218266449\">said</a>:</p>\n<blockquote>\n<ul>\n<li><code>\"HOL-Library.Executable_Set\"</code> for the import</li>\n</ul>\n</blockquote>\n<p>It also doesn't work <code>Bad theory import \"HOL-Library.Executable_Set\"</code></p>",
        "id": 218267063,
        "sender_full_name": "Trinh Le Khanh",
        "timestamp": 1606730437
    },
    {
        "content": "<p>To convert a set to a list in an <em>executable</em> way you need a way to make the conversion <em>deterministic</em>. <code>sorted_list_of_set</code> does it by using the natural order relation.</p>",
        "id": 218277821,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1606737579
    },
    {
        "content": "<p>For executable set: the theory does not exist anymore in <code>HOL/Library</code>. I don't know what changed, but most likely you don't need that import anyway.</p>",
        "id": 218278105,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1606737786
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"233198\">Mathias Fleury</span> <a href=\"#narrow/stream/238552-Beginner-Questions/topic/Import.20Executable_Set/near/218277821\">said</a>:</p>\n<blockquote>\n<p>To convert a set to a list in an <em>executable</em> way you need a way to make the conversion <em>deterministic</em>. <code>sorted_list_of_set</code> does it by using the natural order relation.</p>\n</blockquote>\n<p>I'm not clear about <code>making the conversion *deterministic*</code> much. Can you give me some hints, please?</p>",
        "id": 218282928,
        "sender_full_name": "Trinh Le Khanh",
        "timestamp": 1606741238
    },
    {
        "content": "<p>take the set {2,3,4} and the lists: </p>\n<div class=\"codehilite\"><pre><span></span><code>[2,3,4]\n[4,2,3]\n[2,2,3,3,4]\n</code></pre></div>\n<p>all these lists  (and many others) respect the conditions <code>set xs = {2,3,4}</code>. Which one do you pick?</p>",
        "id": 218288352,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1606744426
    },
    {
        "content": "<p>What you tried to write is <code>SPEC(%xs. set xs = {2,3,4})</code>. Now you also expect to see a lists such that you do computations on it. Therefore, you want to restrict <code>(%xs. set xs = {2,3,4})</code> to return a <em>single</em> result.</p>",
        "id": 218288713,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1606744590
    },
    {
        "content": "<p>Thank you for your suggestion. I tried </p>\n<div class=\"codehilite\"><pre><span></span><code>definition Ptype :: &quot;nat set&quot;\n  where &quot;Ptype = {0, 1}&quot;\n\ndefinition Ptype1 :: &quot;nat set&quot;\n  where &quot;Ptype1 = {2, 3}&quot;\n\nvalue &quot;(Ptype × Ptype1)&quot;\nvalue &quot;sorted_list_of_set (SPEC (%xs. set xs = Ptype × Ptype1))&quot;\nvalue &quot;hd (sorted_list_of_set (SPEC (%xs. set xs = Ptype × Ptype1)))&quot;\n</code></pre></div>\n<p>I expect that the last line should return <code>(0,2)</code> - a concrete value, but it returns</p>\n<div class=\"codehilite\"><pre><span></span><code>&quot;hd (sorted_list_of_set\n      (SPEC\n        (λu. (∀u∈set u. (0, 2) = u ∨ (0, 3) = u ∨ (1, 2) = u ∨ (1, 3) = u) ∧\n              (0, 2) ∈ set u ∧ (0, 3) ∈ set u ∧ (1, 2) ∈ set u ∧ (1, 3) ∈ set u)))&quot;\n  :: &quot;&#39;a&quot;\n</code></pre></div>\n<p>this is an abstract return.</p>",
        "id": 218293106,
        "sender_full_name": "Trinh Le Khanh",
        "timestamp": 1606746645
    },
    {
        "content": "<p>SPEC is not executable. I don't understand what you are even trying here....</p>",
        "id": 218321377,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1606758866
    },
    {
        "content": "<p>above I meant that <code>SPEC(%xs. set xs = {2,3,4})</code> is what you seem to be trying to do in an executable way. You cannot use it directly.</p>",
        "id": 218321545,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1606758962
    },
    {
        "content": "<p>I'm trying to convert a set to a list. For example, we have <code>A = {{1,2}, {3,4}}</code> after converting, it will be the list <code>B = [{1,2}, {3,4}]</code>. Thus, when I call <code>hd B</code> the result is <code>{1, 2}</code>. <code>sorted_list_of_set</code> only works for primary types like <code>nat</code> or <code>int</code> but doesn't work for structed types like <code>set set</code>, <code>list set</code> or <code>(nat * nat)</code>.</p>",
        "id": 218323113,
        "sender_full_name": "Trinh Le Khanh",
        "timestamp": 1606759702
    },
    {
        "content": "<p>I believe that you can instantiate lists with an (lin)order to make sorted_list_of_set work on \"nat list list\" (something like lenlex?), but I don't see how to make anything work for \"set set\"</p>",
        "id": 218333587,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1606764469
    },
    {
        "content": "<p>Yes, <code>nat list list</code> is no problem. That's why I want to know is whether any library to convert a general set to a list? But it seems doesn't exist.</p>",
        "id": 218334150,
        "sender_full_name": "Trinh Le Khanh",
        "timestamp": 1606764747
    },
    {
        "content": "<p>sorry I meant \"nat list set\", not \"nat list list\"</p>",
        "id": 218334211,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1606764784
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"353155\">Trinh Le Khanh</span> <a href=\"#narrow/stream/238552-Beginner-Questions/topic/Import.20Executable_Set/near/218334150\">said</a>:</p>\n<blockquote>\n<p>Yes, <code>nat list list</code> is no problem. That's why I want to know is whether any library to convert a general set to a list? But it seems doesn't exist.</p>\n</blockquote>\n<p>No, because it cannot work in HOL.</p>",
        "id": 218334331,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1606764841
    },
    {
        "content": "<p>I have a question: why don't you use lists directly? The automation for them is quite good and you can use <code>set</code> to convert them to a set.</p>",
        "id": 218334491,
        "sender_full_name": "Lukas Stevens",
        "timestamp": 1606764910
    },
    {
        "content": "<p>Lists also have induction rules that are more convenient to work with compared to finite sets.</p>",
        "id": 218334643,
        "sender_full_name": "Lukas Stevens",
        "timestamp": 1606764988
    },
    {
        "content": "<p>Ah, it depends on my problem. Suppose we have some <em>Type</em> (e.g. Windows, Mac OS) and each of them have a set of concrete <em>Instances</em> (e.g. {w98, xp, w7}, {Catalina, Big Sur}). <br>\nFirstly, I defined them as lists and it works. Then, I run to a general case, in which we define <em>Type</em> and <em>Instances</em> in an abstract view. For example:</p>\n<div class=\"codehilite\"><pre><span></span><code>lemma  test_smt:\n  assumes &quot;finite Types&quot;\n</code></pre></div>\n<p>I mean, Types and Instances are finite sets (we don't care about concrete values). We seem cannot define a <code>finite list</code> like this.</p>",
        "id": 218335543,
        "sender_full_name": "Trinh Le Khanh",
        "timestamp": 1606765428
    },
    {
        "content": "<p>Lists are always finite</p>",
        "id": 218335770,
        "sender_full_name": "Lukas Stevens",
        "timestamp": 1606765545
    },
    {
        "content": "<p>wow, I thought we have to define <code>finite</code> to determine it. Thank you very much.</p>",
        "id": 218336202,
        "sender_full_name": "Trinh Le Khanh",
        "timestamp": 1606765763
    },
    {
        "content": "<p>I wrote this lemma but it unprovable, can you check it a little bit?</p>\n<div class=\"codehilite\"><pre><span></span><code>fun pair_mapping :: &quot;&#39;a list ⇒ &#39;b list list ⇒ (&#39;a * &#39;b) list&quot; where\n&quot;pair_mapping [] [] = []&quot; |\n&quot;pair_mapping (x # xs) [] = []&quot; |\n&quot;pair_mapping [] (y # ys)  = []&quot; |\n&quot;pair_mapping (x # xs) (y # ys) = pair_ns x y @ pair_mapping xs ys&quot;\n\nfun set_ins_of_type :: &quot;&#39;a ⇒ &#39;a list ⇒ &#39;a list list ⇒ &#39;a set&quot; where\n&quot;set_ins_of_type k PT PI = (if k ∈ (set PT) then set (lookup k (pair_mapping PT PI)) else {})&quot;\n(*---------more complex------------*)\nlemma test_complex:\n  assumes &quot;(Pt :: &#39;a list) ≠ []&quot;\n  assumes &quot;(PIns :: &#39;a list list) ≠ []&quot;\n  assumes &quot;length Pt = length PIns&quot;\n  assumes &quot;∀x ∈ set PIns. x ≠ []&quot;\n  shows &quot;(∀k ∈ set Pt.∀h∈ (set_ins_of_type k Pt PIns). P k h ⟶ (∀h1∈ (set_ins_of_type k Pt PIns)-{h}. ¬P k h1)) ⟹\n  (∀k ∈ set Pt.∃h∈ (set_ins_of_type k Pt PIns).∀h1∈ (set_ins_of_type k Pt PIns)-{h}. ¬P k h1)&quot;\n  using [[simp_trace]] assms\n  sledgehammer (*all the provers timed out*)\n</code></pre></div>\n<p>Then, I back to a concrete example but this lemma is also unprovable.</p>\n<div class=\"codehilite\"><pre><span></span><code>(*---------test types------------*)\ndefinition Pt0 :: &quot;nat list&quot;\n  where &quot;Pt0 = [0, 1]&quot;\n\ndefinition Pi0 :: &quot;nat list list&quot;\n  where &quot;Pi0 = [[2,3], [4,5]]&quot;\n\nlemma &quot;∀k ∈ set Pt0.∀h∈ (set_ins_of_type k Pt0 Pi0). P k h ⟶ (∀h1∈ (set_ins_of_type k Pt0 Pi0)-{h}. ¬P k h1)\n⟹ ∀k ∈ set Pt0.∃h∈ (set_ins_of_type k Pt0 Pi0).∀h1∈ (set_ins_of_type k Pt0 Pi0)-{h}. ¬P k h1&quot;\n  unfolding Pt0_def Pi0_def\n  using [[simp_trace]]\n  sledgehammer\n</code></pre></div>\n<p>Then I used <code>value</code> to compute the LHS and RHS of the lemma separately and make a new lemma for them. It worked</p>\n<div class=\"codehilite\"><pre><span></span><code>value &quot;∀k ∈ set Pt0.∀h∈ (set_ins_of_type k Pt0 Pi0). P k h ⟶ (∀h1∈ (set_ins_of_type k Pt0 Pi0)-{h}. ¬P k h1)&quot;\nvalue &quot;∀k ∈ set Pt0.∃h∈ (set_ins_of_type k Pt0 Pi0).∀h1∈ (set_ins_of_type k Pt0 Pi0)-{h}. ¬P k h1&quot;\n\nlemma concrete: &quot;(((P 0 2 ⟶ ¬ P 0 3) ∧ (P 0 3 ⟶ ¬ P 0 2)) ∧ (P 1 4 ⟶ ¬ P 1 5) ∧ (P 1 5 ⟶ ¬ P 1 4)) ⟹ ((¬ P 0 3 ∨ ¬ P 0 2) ∧ (¬ P 1 5 ∨ ¬ P 1 4))&quot;\n  by blast\n</code></pre></div>\n<p>I don't know why the lemma using variables doesn't work but the concrete once does. (I also made a large number of each element in the list <code>Pi0</code>and the concrete once worked.)</p>",
        "id": 218362393,
        "sender_full_name": "Trinh Le Khanh",
        "timestamp": 1606779873
    },
    {
        "content": "<ul>\n<li>supply [[simp_trace]]` before sledgehammer makes no sense</li>\n<li>sledgehammer is not magic: you still have to prove things by hand (and in your case you still have the loop in the simplifier, which you should probably investigate...)</li>\n</ul>",
        "id": 218406197,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1606820356
    },
    {
        "content": "<p>(I have nothing to say on the question)</p>",
        "id": 218406250,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1606820385
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"233198\">Mathias Fleury</span> <a href=\"#narrow/stream/238552-Beginner-Questions/topic/Import.20Executable_Set/near/218406250\">said</a>:</p>\n<blockquote>\n<p>(I have nothing to say on the question)</p>\n</blockquote>\n<p>I'm sorry if the question looks stupid but actually, I have no direction to understand why it was. Could you give me some hints to find the answer?</p>",
        "id": 218409672,
        "sender_full_name": "Trinh Le Khanh",
        "timestamp": 1606822515
    },
    {
        "content": "<p>Let me answer with another question: why would any tactic be able to solve your goal?</p>",
        "id": 218411391,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1606823722
    },
    {
        "content": "<p>Even if lectures make it look like everything can be solved by a magic combination of <code>induction</code> and <code>auto</code>, this is not the case in general. It is impossible to translate a proof in Isabelle that you don't really understand. Even if you find the proof trivial and Isabelle fails, you have to decompose into even simpler steps. And if those steps are still too complicated, you have to do even smaller steps.</p>",
        "id": 218411553,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1606823849
    },
    {
        "content": "<p>Usually the simpler steps hint as lemmas you have to prove. Maybe those steps will allow to have a proof like <code>by (auto ...)</code>. Maybe not.</p>",
        "id": 218411813,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1606823990
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"233198\">Mathias Fleury</span> <a href=\"#narrow/stream/238552-Beginner-Questions/topic/Import.20Executable_Set/near/218411391\">said</a>:</p>\n<blockquote>\n<p>Let me answer with another question: why would any tactic be able to solve your goal?</p>\n</blockquote>\n<p>because it's small enough to be proved by provers, right?<br>\nAs I understand, I should split the lemma into small cases and prove them manually, right? looks like this:</p>\n<div class=\"codehilite\"><pre><span></span><code>proof (induct xs arbitrary: ys zs)\n  case Nil then show ?case by simp\nnext\n  case (Cons x xs ys zs) then show ?case by (cases ys, simp_all)\n    (cases zs, simp_all)\nqed\n</code></pre></div>",
        "id": 218412500,
        "sender_full_name": "Trinh Le Khanh",
        "timestamp": 1606824354
    },
    {
        "content": "<p>I would not have started by an induction, but I also spent less than 2s of thinking about it.</p>",
        "id": 218412971,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1606824612
    },
    {
        "content": "<p>I could be wrong but it would seem that you are trying to prove a specific case of this:</p>\n<div class=\"codehilite\"><pre><span></span><code>lemma\n  assumes &quot;S ∉ {}&quot; and &quot;∀X ∈ S. X ≠ {}&quot;\n  assumes &quot;∀X ∈ S. ∀x ∈ X. P x ⟶ (∀y ∈ X - { x }. ¬ P y)&quot;\n  shows &quot;∀X ∈ S. ∃x ∈ X. ∀y ∈ X - { x }. ¬ P y&quot;\n</code></pre></div>\n<p>which is easily provable.</p>",
        "id": 218428826,
        "sender_full_name": "Mark Wassell",
        "timestamp": 1606833067
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"312950\">Mark Wassell</span> <a href=\"#narrow/stream/238552-Beginner-Questions/topic/Import.20Executable_Set/near/218428826\">said</a>:</p>\n<blockquote>\n<p>I could be wrong but it would seem that you are trying to prove a specific case of this:</p>\n<div class=\"codehilite\"><pre><span></span><code>lemma\n  assumes &quot;S ∉ {}&quot; and &quot;∀X ∈ S. X ≠ {}&quot;\n  assumes &quot;∀X ∈ S. ∀x ∈ X. P x ⟶ (∀y ∈ X - { x }. ¬ P y)&quot;\n  shows &quot;∀X ∈ S. ∃x ∈ X. ∀y ∈ X - { x }. ¬ P y&quot;\n</code></pre></div>\n<p>which is easily provable.</p>\n</blockquote>\n<p>Thank you for concerning my problem. <br>\nIf the predicate has a single parameter like <code>P x, Q y</code>, I can prove it easily as follows:</p>\n<div class=\"codehilite\"><pre><span></span><code>lemma test_simplest:\n  assumes &quot;finite Pt&quot; and &quot;Pt ≠ {}&quot;\n  shows &quot;(∀x ∈ Pt. P x ⟶ (∀x1 ∈ Pt - {x}. ¬P x1)) ⟹ (∃x∈Pt.∀x1∈Pt-{x}. ¬P x1)&quot;\n  using [[simp_trace]] assms\n  sledgehammer\n  by blast\n</code></pre></div>\n<p>My case is a little bit more complex with two or more parameters like <code>P x y</code> or <code>Q x y z</code> and the value of the latter one is depended on the value of the previous (e.g. <code>z</code> depends on <code>y</code>, and <code>y</code> depends on <code>x</code>)</p>",
        "id": 218448597,
        "sender_full_name": "Trinh Le Khanh",
        "timestamp": 1606841094
    },
    {
        "content": "<p>Mathematically you are working with a set of indexed sets: your list Pt is providing the index and PIns the elements of the indexed set. Here is a more complicated lemma that is closer to what you need.  Here the predicate takes two parameters</p>\n<div class=\"codehilite\"><pre><span></span><code>lemma test_simplest3:\n  fixes S:: &quot;(&#39;a * (&#39;b set)) set&quot;\n  assumes &quot;S ∉ {}&quot; and &quot;∀X ∈ S. snd X ≠ {}&quot;\n  assumes &quot;∀X ∈ S. ∀x ∈ snd X. P (fst X) x ⟶ (∀y ∈ (snd X - { x }). ¬ P (fst X) y)&quot;\n  shows &quot;∀X ∈ S. ∃x ∈ snd X. ∀y ∈ snd X - { x }. ¬ P (fst X) y&quot;\n  using assms\n  by (metis Diff_iff equals0I)\n</code></pre></div>",
        "id": 218452952,
        "sender_full_name": "Mark Wassell",
        "timestamp": 1606842895
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"312950\">Mark Wassell</span> <a href=\"#narrow/stream/238552-Beginner-Questions/topic/Import.20Executable_Set/near/218452952\">said</a>:</p>\n<blockquote>\n<p>Mathematically you are working with a set of indexed sets: your list Pt is providing the index and PIns the elements of the indexed set. Here is a more complicated lemma that is closer to what you need.  Here the predicate takes two parameters</p>\n<p><div class=\"codehilite\"><pre><span></span><code>lemma test_simplest3:\n  fixes S:: &quot;(&#39;a * (&#39;b set)) set&quot;\n  assumes &quot;S ∉ {}&quot; and &quot;∀X ∈ S. snd X ≠ {}&quot;\n  assumes &quot;∀X ∈ S. ∀x ∈ snd X. P (fst X) x ⟶ (∀y ∈ (snd X - { x }). ¬ P (fst X) y)&quot;\n  shows &quot;∀X ∈ S. ∃x ∈ snd X. ∀y ∈ snd X - { x }. ¬ P (fst X) y&quot;\n  using assms\n  by (metis Diff_iff equals0I)\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>That's amazing. I realize that I'm solving my problem in a complex way by defining separately <code>'a</code> and <code>'b set</code> and calculating everything on them. Thank you so much.</p>",
        "id": 218471162,
        "sender_full_name": "Trinh Le Khanh",
        "timestamp": 1606851706
    }
]