[
    {
        "content": "<p>I have the following isabelle code below</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">theory</span><span class=\"w\"> </span><span class=\"n\">sec24</span>\n<span class=\"w\">  </span><span class=\"kp\">imports</span><span class=\"w\"> </span><span class=\"n\">Main</span>\n<span class=\"k\">begin</span>\n<span class=\"k\">datatype</span><span class=\"w\"> </span><span class=\"n\">bdd</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Leaf</span><span class=\"w\"> </span><span class=\"n\">bool</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Branch</span><span class=\"w\"> </span><span class=\"n\">bdd</span><span class=\"w\"> </span><span class=\"n\">bdd</span>\n\n<span class=\"k\">primrec</span><span class=\"w\"> </span><span class=\"n\">eval</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"(nat ⇒ bool) ⇒ nat ⇒ bdd ⇒ bool\"</span><span class=\"w\"> </span><span class=\"kp\">where</span>\n<span class=\"s\">\"eval f n (Leaf x) = x\"</span><span class=\"w\"> </span><span class=\"o\">|</span>\n<span class=\"s\">\"eval f n (Branch left right) = (if f n then eval f (Suc n) right else eval f (Suc n) left)\"</span>\n\n<span class=\"k\">primrec</span><span class=\"w\"> </span><span class=\"n\">bdd_unop</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"(bool ⇒ bool) ⇒ bdd ⇒ bdd\"</span><span class=\"w\"> </span><span class=\"kp\">where</span>\n<span class=\"s\">\"bdd_unop f (Leaf x) = Leaf (f x)\"</span><span class=\"w\"> </span><span class=\"o\">|</span>\n<span class=\"s\">\"bdd_unop f (Branch left right) = Branch (bdd_unop f left) (bdd_unop f right)\"</span>\n\n<span class=\"k\">primrec</span><span class=\"w\"> </span><span class=\"n\">bdd_binop</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"(bool ⇒ bool ⇒ bool) ⇒ bdd ⇒ bdd ⇒ bdd\"</span><span class=\"w\"> </span><span class=\"kp\">where</span>\n<span class=\"s\">\"bdd_binop f (Leaf x) t2 = bdd_unop (f x) t2\"</span><span class=\"w\"> </span><span class=\"o\">|</span>\n<span class=\"s\">\"bdd_binop f (Branch left right) t2 = (case t2 of</span>\n<span class=\"s\">  Leaf x ⇒ Branch (bdd_binop f left t2) (bdd_binop f right t2)</span>\n<span class=\"s\">| Branch left2 right2 ⇒ Branch (bdd_binop f left left2) (bdd_binop f right right2))\"</span>\n\n<span class=\"kn\">theorem</span><span class=\"w\"> </span><span class=\"n\">t1</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"g (eval f n t) = eval f n (bdd_unop g t)\"</span>\n<span class=\"w\">  </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">induct</span><span class=\"w\"> </span><span class=\"n\">t</span><span class=\"w\"> </span><span class=\"n\">arbitrary</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"o\">)</span>\n<span class=\"w\">   </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"n\">auto</span>\n<span class=\"w\">  </span><span class=\"k\">done</span>\n\n<span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">l1</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"eval f n (bdd_unop ((=) (eval f n t)) t)\"</span>\n<span class=\"w\">  </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">induct</span><span class=\"w\"> </span><span class=\"n\">t</span><span class=\"w\"> </span><span class=\"n\">arbitrary</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"o\">)</span>\n<span class=\"w\">   </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"n\">auto</span>\n<span class=\"w\">  </span><span class=\"k\">done</span>\n\n<span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">l2</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"bdd_binop g t (Leaf y) = bdd_unop (λ x. g x y) t\"</span>\n<span class=\"w\">  </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">induct</span><span class=\"w\"> </span><span class=\"n\">t</span><span class=\"o\">)</span>\n<span class=\"w\">   </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"n\">auto</span>\n<span class=\"w\">  </span><span class=\"k\">done</span>\n\n<span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">l3</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"If True (eval e (Suc i) b12) = (λ _. (eval e (Suc i) b12))\"</span>\n<span class=\"w\">  </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"n\">auto</span>\n<span class=\"w\">  </span><span class=\"k\">done</span>\n\n<span class=\"kn\">theorem</span><span class=\"w\"> </span><span class=\"n\">t2</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"∀ i b2. eval e i (bdd_binop f b1 b2) = f (eval e i b1) (eval e i b2)\"</span>\n<span class=\"w\">  </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">induct</span><span class=\"w\"> </span><span class=\"n\">b1</span><span class=\"o\">)</span>\n<span class=\"w\">   </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">auto</span><span class=\"w\"> </span><span class=\"n\">simp</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">t1</span><span class=\"w\"> </span><span class=\"n\">l1</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">case_tac</span><span class=\"w\"> </span><span class=\"n\">b2</span><span class=\"o\">)</span>\n<span class=\"w\">   </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">auto</span><span class=\"w\"> </span><span class=\"n\">simp</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">If_def</span><span class=\"w\"> </span><span class=\"n\">l2</span><span class=\"o\">)</span>\n<span class=\"w\">    </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">case_tac</span><span class=\"w\"> </span><span class=\"s\">\"e i\"</span><span class=\"o\">)</span>\n<span class=\"w\">     </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">auto</span><span class=\"w\"> </span><span class=\"n\">simp</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">l3</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">t1</span><span class=\"w\"> </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"n\">auto</span>\n<span class=\"w\">   </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">case_tac</span><span class=\"w\"> </span><span class=\"s\">\"e i\"</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">auto</span><span class=\"w\"> </span><span class=\"n\">simp</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">the_equality</span><span class=\"o\">)</span>\n<span class=\"k\">end</span>\n</code></pre></div>\n<p>Context: I'm working through some exercises on binary decision trees and I saw that the <a href=\"https://isabelle.in.tum.de/exercises/trees/bdd/sol.pdf\">solution</a> for theorem <code>t2</code> was much simpler than mine, but it doesn't work, possibly due to changes in isabelle since 2012.</p>\n<p>I would like to know if I can optimise the proof of theorem <code>t2</code> such that less lines are used, and less time is taken to process each application. </p>\n<p>As for my thought process, I mainly observed each subgoal in order to define each lemma above, then used sledgehammer in places where I believed the goal could be intuitively achieved without introducing additional lemmas. I then simplified the sledgehammer lines. Could I please also have some advice on this too?</p>",
        "id": 488871043,
        "sender_full_name": "o7",
        "timestamp": 1734105263
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">theorem</span><span class=\"w\"> </span><span class=\"n\">t2</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"eval e i (bdd_binop f b1 b2) = f (eval e i b1) (eval e i b2)\"</span>\n<span class=\"w\">  </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">induct</span><span class=\"w\"> </span><span class=\"n\">b1</span><span class=\"w\"> </span><span class=\"n\">arbitrary</span><span class=\"o\">:</span><span class=\"w\">  </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"n\">b2</span><span class=\"o\">)</span>\n<span class=\"w\">   </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">t1</span><span class=\"w\"> </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">auto</span><span class=\"w\"> </span><span class=\"n\">simp</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">l1</span><span class=\"w\"> </span><span class=\"n\">split</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">bdd.splits</span><span class=\"w\"> </span><span class=\"n\">if_splits</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"k\">done</span>\n</code></pre></div>",
        "id": 488872316,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1734105607
    },
    {
        "content": "<p>Thanks Mathias. <del>Since I haven't seen the split argument in the auto tactic yet, could you lmk how it works?</del><br>\nlmao it's in prog-prove, please disregard. Sorry. Will ask further if necessary.</p>",
        "id": 488872744,
        "sender_full_name": "o7",
        "timestamp": 1734105733
    },
    {
        "content": "<p>theorem t2: \"eval e i (bdd_binop f b1 b2) = f (eval e i b1) (eval e i b2)\"<br>\n  by (induct b1 arbitrary:  i b2)<br>\n   (use t1 in ‹auto simp: l1 split: bdd.splits if_splits›</p>",
        "id": 488873401,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1734105932
    },
    {
        "content": "<p>but it is a bit of magic</p>",
        "id": 488874154,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1734106164
    },
    {
        "content": "<p>Turns out you don't need <code>if_splits</code></p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">theorem</span><span class=\"w\"> </span><span class=\"n\">t2''</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"eval e i (bdd_binop f b1 b2) = f (eval e i b1) (eval e i b2)\"</span>\n<span class=\"w\">  </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">induct</span><span class=\"w\"> </span><span class=\"n\">b1</span><span class=\"w\"> </span><span class=\"n\">arbitrary</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"n\">b2</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">t1</span><span class=\"w\"> </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">auto</span><span class=\"w\"> </span><span class=\"n\">simp</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">l1</span><span class=\"w\"> </span><span class=\"n\">split</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">bdd.splits</span><span class=\"o\">)</span>\n<span class=\"w\">   </span><span class=\"k\">done</span>\n</code></pre></div>\n<p>very interesting.</p>",
        "id": 488878821,
        "sender_full_name": "o7",
        "timestamp": 1734107638
    }
]