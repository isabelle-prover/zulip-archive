[
    {
        "content": "<p>I want to write a locale where I do<br>\nfix A B C...<br>\ndefine a new thing in terms of A B and C...<br>\nmake assumptions about the new thing in the locale</p>\n<p>Is this possible? I see \"defines\" in the manual but this appears to be deprecated</p>",
        "id": 399079991,
        "sender_full_name": "Patrick Nicodemus",
        "timestamp": 1698524389
    },
    {
        "content": "<p>I guess I can do \"fix\" and define its behavior by additional assumptions but I want something where the definition will unfold automatically by simplification I guess.</p>",
        "id": 399080074,
        "sender_full_name": "Patrick Nicodemus",
        "timestamp": 1698524453
    },
    {
        "content": "<p>What do you mean by \"make assumptions about the new thing in the locale\"?</p>",
        "id": 399082840,
        "sender_full_name": "Maximilian Sch√§ffeler",
        "timestamp": 1698527253
    },
    {
        "content": "<p>Basically as I understand it the structure of a locale definition is:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">locale</span><span class=\"w\"> </span><span class=\"n\">XYZ</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">  </span><span class=\"o\">(</span><span class=\"n\">inheritance</span><span class=\"w\"> </span><span class=\"n\">declarations</span><span class=\"w\"> </span><span class=\"kp\">in</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">form</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"k\">locale</span><span class=\"w\"> </span><span class=\"n\">expressions</span><span class=\"o\">)</span>\n<span class=\"w\"> </span><span class=\"kp\">for</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">type</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"kp\">infix</span><span class=\"w\"> </span><span class=\"k\">notation</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"kp\">and</span><span class=\"w\"> </span><span class=\"n\">B</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">type</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"k\">notation</span><span class=\"w\"> </span><span class=\"o\">)</span><span class=\"ow\">...</span>\n<span class=\"w\"> </span><span class=\"kp\">fixes</span><span class=\"w\"> </span><span class=\"ow\">...</span>\n<span class=\"w\"> </span><span class=\"kp\">assumes</span><span class=\"w\"> </span><span class=\"ow\">...</span>\n<span class=\"w\"> </span><span class=\"kp\">fixes</span><span class=\"w\"> </span><span class=\"ow\">..</span>\n<span class=\"w\"> </span><span class=\"kp\">assumes</span><span class=\"ow\">...</span>\n</code></pre></div>\n<p>What I want to do is something like </p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">locale</span><span class=\"w\"> </span><span class=\"n\">partial_magma</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">  </span><span class=\"kp\">fixes</span><span class=\"w\"> </span><span class=\"n\">E</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"'a =&gt; bool\"</span><span class=\"w\"> </span><span class=\"c\">(* existence/ well-definedness predicate coding the domain of phi*)</span>\n<span class=\"w\">  </span><span class=\"kp\">defines</span><span class=\"w\"> </span><span class=\"n\">KlEq</span><span class=\"w\"> </span><span class=\"kp\">where</span><span class=\"w\"> </span><span class=\"s\">\"KlEq x y = (E x \\/ E y ==&gt; x = y)\"</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"kp\">infix</span><span class=\"w\"> </span><span class=\"n\">\\cong</span><span class=\"w\"> </span><span class=\"n\">52</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"kp\">fixes</span><span class=\"w\"> </span><span class=\"n\">phi</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"'a =&gt; 'a =&gt; 'a\"</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"kp\">infix</span><span class=\"w\"> </span><span class=\"n\">cdot</span><span class=\"w\"> </span><span class=\"n\">60</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"kp\">assumes</span><span class=\"w\"> </span><span class=\"n\">assoc</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\" (x \\cdot y) \\cdot z \\cong x \\cdot (y \\cdot z)\"</span><span class=\"w\"> </span><span class=\"c\">(* multiplication is associative on its domain *)</span>\n</code></pre></div>\n<p>Here I'm defining a new thing within the locale, KlEq, that i can refer to later (in the body of \"assoc\" or other locale assumptions.)<br>\nI could do this with</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kp\">fixes</span><span class=\"w\"> </span><span class=\"n\">KlEq</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"'a =&gt; 'a =&gt; bool\"</span>\n<span class=\"kp\">assumes</span><span class=\"w\"> </span><span class=\"s\">\"KlEq x y = (E x \\/ E y ==&gt; x y)</span>\n</code></pre></div>\n<p>or perhaps I could define a notation for it (although i'm not sure of the syntax for that either)</p>\n<p>But yeah I have a fairly complicated locale definition and I want to define intermediary constructs midway through the locale definition that I use to express more sophisticated /complex assumptions about the locale.</p>",
        "id": 399084663,
        "sender_full_name": "Patrick Nicodemus",
        "timestamp": 1698529412
    },
    {
        "content": "<p>I believe \"defines\" is a legitimate keyword here but the tutorial on locales does not mention it and suggests that it is \"only in place for backwards compatibility reasons\" which I read as a form of deprecation</p>",
        "id": 399084727,
        "sender_full_name": "Patrick Nicodemus",
        "timestamp": 1698529451
    },
    {
        "content": "<p>I am also able to solve this problem by having two locale definitions, one which extends the other. Like in this case I could make \"set equipped with a subset\" its own locale, define KlEq in that locale, and then have everything else extend this locale. But it may not be worth it to define a new locale for everything.</p>",
        "id": 399085415,
        "sender_full_name": "Patrick Nicodemus",
        "timestamp": 1698530299
    },
    {
        "content": "<p>Defining two locales is the standard idiom</p>",
        "id": 399174546,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1698602588
    }
]