[
    {
        "content": "<p>I'm stuck in a proof and thoroughly confused about what I am even doing. I have defined myself a loop composition operator which just starts a helper initalized with a neutral accumulator: <code>loop m p = loop_helper dummy m p</code>, and then I have (excessively simplified):</p>\n<div class=\"codehilite\"><pre><span></span><code>function loop_helper where\n    (my_term_cond (acc p)) ==&gt; loop_helper acc m p = acc\nnot (my_term_cond (acc p)) ==&gt; loop_helper acc m p = loop_helper (steppy acc m) m p\n</code></pre></div>\n<p>And now I want to prove something about loop, akin to <code>loop m p = loop m (f p)</code>, but I can't figure out the approach. I know of <code>loop_helper.induct</code>, but I don't think I can use it, or at least, I can't figure it out. Is there some canonical approach on how I can induct over the steps of loop?</p>",
        "id": 241707047,
        "sender_full_name": "Max Nowak",
        "timestamp": 1623007831
    },
    {
        "content": "<p>If you define a recursive function and want to prove anything about it, you're indeed going to have to use induction. Before you can use the induction rule, you will however also have to prove termination (not sure if you have – you did not really mention it). Before that, there is only a partial induction (<code>pinduct</code>) rule that has termination as an additional assumption. In most cases, you should aim to prove termination.</p>\n<p>Once that is done, you can use the <code>induct</code> rule to prove some property about <code>loop_helper</code> that is a generalisation of the thing you want to prove for <code>loop</code>.</p>\n<p>However, I should point out that you might fare better using one of the while combinators from <code>HOL-Library.While_Combinator</code>. You give them an initial state, a step function, and a breaking condition. There's one where you have to prove termination and one that does not require proving termination but only returns an option type (with <code>None</code> signifying non-termination). You can then prove whatever result you need about the result by providing a suitable loop invariant using e.g. <code>while_rule</code>.</p>",
        "id": 241708563,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1623010147
    },
    {
        "content": "<p>I have termination, yes. While While-Combinators look promising, sadly I am only adding new code to an existing framework which contains <code>loop</code>. Maybe if I had more time to delve into restructuring the existing code I'd give it a shot, but I don't :/.</p>",
        "id": 241708862,
        "sender_full_name": "Max Nowak",
        "timestamp": 1623010613
    },
    {
        "content": "<p>In that case, you have to figure out the loop invariant and prove that</p>\n<ul>\n<li>the initial state fulfils it</li>\n<li>the step function preserves it</li>\n<li>the invariant plus the termination condition imply what you want to show</li>\n</ul>\n<p>The rest is then a simple induction.</p>",
        "id": 241709103,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1623010927
    },
    {
        "content": "<p>The thing I can't figure out is the accumulator though. I need to prove my property just for <code>loop_helper dummy m p</code>, with dummy being the starting point, and then <code>loop_helper</code> expands it until it terminates. But <code>loop_helper.induct</code> gives me goals such as (base case:) <code>!!acc m p. my_term_cond (acc p) ==&gt; ?P acc m p</code>, so, do I have to prove it for all possible acc in the base case? Maybe you know of some (hopefully very) simple sample proofs so I can have a look at how to do it, since I'm just hopelessly confused.</p>",
        "id": 241710766,
        "sender_full_name": "Max Nowak",
        "timestamp": 1623013490
    },
    {
        "content": "<p>I would like to note that the approach of using the function package gives you better flexibility if you want to prove partial termination. E.g. you will not need to learn any of the automation behind the while-combinator and you have greater flexibility in structuring your proofs.  A good reference on how to use the induction principle that comes out of the function package is in section 8 in the `functions' tutorial in the Isabelle documentation. The following paper uses the function package for an interesting small example:</p>\n<p><a href=\"https://files.sketis.net/Isabelle_Workshop_2020/Isabelle_2020_paper_1.pdf\">https://files.sketis.net/Isabelle_Workshop_2020/Isabelle_2020_paper_1.pdf</a></p>",
        "id": 241751243,
        "sender_full_name": "Mohammad Abdulaziz",
        "timestamp": 1623058876
    },
    {
        "content": "<p>....I now noticed there <em>is</em> a small inductive proof example in the isabelle docs on functions, which I skipped when first learning Isabelle, and then forgot forever that it existed.</p>",
        "id": 241753120,
        "sender_full_name": "Max Nowak",
        "timestamp": 1623059931
    },
    {
        "content": "<p>Hmm, using <code>proof (induct p rule: loop_helper.induct)</code> just highlights the <code>proof (induct...)</code> line purple and Isabelle becomes unberably laggy forever, to the point I need to terminate the process.</p>",
        "id": 241762071,
        "sender_full_name": "Max Nowak",
        "timestamp": 1623065544
    },
    {
        "content": "<p>Hmm, this means that the <code>induct</code> proof method does not terminate. Perhaps <code>induction</code> instead will work better?</p>",
        "id": 241762189,
        "sender_full_name": "Jakub Kądziołka",
        "timestamp": 1623065622
    },
    {
        "content": "<p>I wasn't aware there is a difference between the two. And nope, same issue sadly.</p>",
        "id": 241762316,
        "sender_full_name": "Max Nowak",
        "timestamp": 1623065675
    },
    {
        "content": "<p>Adding the remaining free variables as arbitraries worked somehow though. I have no clue why.</p>",
        "id": 241762779,
        "sender_full_name": "Max Nowak",
        "timestamp": 1623065938
    },
    {
        "content": "<p>But now (after clicking on the proof outline in jEdit ouput window), the <code>then show</code> statements have a squiggly underline. It fails to refine any pending goal.</p>",
        "id": 241762954,
        "sender_full_name": "Max Nowak",
        "timestamp": 1623066042
    },
    {
        "content": "<p>(Now I remember, this was the point where I gave up a month or two ago :D)</p>",
        "id": 241762988,
        "sender_full_name": "Max Nowak",
        "timestamp": 1623066075
    },
    {
        "content": "<p>IIRC this sometimes happens when one of the goals was automatically solved because the assumptions were trivially contradictory</p>",
        "id": 241763088,
        "sender_full_name": "Jakub Kądziołka",
        "timestamp": 1623066143
    },
    {
        "content": "<p>are there as many goals as there are <code>show</code>s?</p>",
        "id": 241763099,
        "sender_full_name": "Jakub Kądziołka",
        "timestamp": 1623066153
    },
    {
        "content": "<p>anyway, you can always use <code>show</code> manually to show the expected thing</p>",
        "id": 241763148,
        "sender_full_name": "Jakub Kądziołka",
        "timestamp": 1623066179
    },
    {
        "content": "<p>I just have <code>lemma \" ... = ...\" proof (induct...)</code></p>",
        "id": 241763157,
        "sender_full_name": "Max Nowak",
        "timestamp": 1623066188
    },
    {
        "content": "<p>And yes two goals are generated</p>",
        "id": 241763175,
        "sender_full_name": "Max Nowak",
        "timestamp": 1623066213
    },
    {
        "content": "<p>assumptions as in the goal is <code>?P 0</code> and you're inducting over <code>Suc n</code></p>",
        "id": 241763272,
        "sender_full_name": "Jakub Kądziołka",
        "timestamp": 1623066263
    },
    {
        "content": "<p>is there a chance you could create a minimal example that reproduces the problem?</p>",
        "id": 241763301,
        "sender_full_name": "Jakub Kądziołka",
        "timestamp": 1623066286
    },
    {
        "content": "<p>Here you go. I didn't manage to recreate how adding arbitraries fixes it though, I'd have to copy over even more code then.<br>\nI had initially created an MWE without <code>Mutator</code>s, but adding those introduced the hanging again.</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">theory</span> <span class=\"n\">LoopyLand</span> <span class=\"kp\">imports</span> <span class=\"n\">Main</span>\n<span class=\"k\">begin</span>\n\n<span class=\"k\">type_synonym</span> <span class=\"n n-Type\">'a</span> <span class=\"n\">Result</span> <span class=\"o\">=</span> <span class=\"s\">\"('a set)\"</span>\n<span class=\"k\">type_synonym</span> <span class=\"n n-Type\">'a</span> <span class=\"n\">Module</span> <span class=\"o\">=</span> <span class=\"s\">\"'a list ⇒ 'a Result\"</span>\n<span class=\"k\">type_synonym</span> <span class=\"n n-Type\">'a</span> <span class=\"n\">Mutator</span> <span class=\"o\">=</span> <span class=\"s\">\"'a Result ⇒ 'a list ⇒ 'a list\"</span> <span class=\"c\">(* Modifies `as` given a Result. *)</span>\n<span class=\"k\">type_synonym</span> <span class=\"n n-Type\">'a</span> <span class=\"n\">TermCond</span> <span class=\"o\">=</span> <span class=\"s\">\"'a Result ⇒ bool\"</span>\n\n<span class=\"c\">(* Run m1, then mutate p, and pipe that into m2. Unify results. Probably irrelevant for MWE though. *)</span>\n<span class=\"k\">fun</span> <span class=\"n\">steppy</span> <span class=\"o\">::</span> <span class=\"s\">\"'a Module ⇒ 'a Mutator ⇒ 'a Module ⇒ 'a Module\"</span> <span class=\"kp\">where</span>\n<span class=\"s\">\"steppy m1 M m2 p = (m1 p) ∪ (m2 (M (m1 p) p))\"</span>\n\n<span class=\"c\">(* loop_helper stops when user-provided termination condition tell us to, or</span>\n<span class=\"c\"> when we reached a fixed point (result remains the same when we add more `m`). *)</span>\n<span class=\"k\">fun</span> <span class=\"n\">whendoesitstop</span> <span class=\"kp\">where</span>\n<span class=\"s\">\"whendoesitstop acc m M t p = (t (acc p) ∨ (steppy acc M m) p = acc p)\"</span>\n\n<span class=\"c\">(* Build a chain of steppy. Which slowly grows our result set. *)</span>\n<span class=\"kn\">function</span> <span class=\"n\">loop_helper</span> <span class=\"o\">::</span> <span class=\"s\">\"'a Module ⇒ 'a Module ⇒ 'a Mutator ⇒ 'a TermCond ⇒ 'a Module\"</span> <span class=\"kp\">where</span>\n<span class=\"s\">\"whendoesitstop acc m M t p    ⟹ loop_helper acc m M t p = acc p\"</span> <span class=\"o\">|</span>\n<span class=\"s\">\"¬(whendoesitstop acc m M t p) ⟹ loop_helper acc m M t p = loop_helper (steppy acc M m)  m M t p\"</span>\n     <span class=\"kp\">apply</span> <span class=\"n\">fast</span> <span class=\"kp\">apply</span> <span class=\"n\">simp</span> <span class=\"kp\">apply</span> <span class=\"n\">simp</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"kn\">termination</span> <span class=\"gr\">sorry</span>\n\n<span class=\"k\">fun</span> <span class=\"n\">dummy</span> <span class=\"o\">::</span> <span class=\"s\">\"'a Module\"</span> <span class=\"kp\">where</span> <span class=\"s\">\"dummy p = {}\"</span>\n<span class=\"k\">fun</span> <span class=\"n\">never_stop</span> <span class=\"o\">::</span> <span class=\"s\">\"'a TermCond\"</span> <span class=\"kp\">where</span>  <span class=\"s\">\"never_stop result = False\"</span>\n<span class=\"k\">fun</span> <span class=\"n\">fake_mutator</span> <span class=\"o\">::</span> <span class=\"s\">\"'a Mutator\"</span> <span class=\"kp\">where</span> <span class=\"s\">\"fake_mutator result p = p\"</span>\n\n<span class=\"c\">(* The module we want to prove stuff for. In reality, does more exciting stuff. *)</span>\n<span class=\"k\">fun</span> <span class=\"n\">find_nemo</span> <span class=\"o\">::</span> <span class=\"s\">\"'a Module\"</span> <span class=\"kp\">where</span> <span class=\"s\">\"find_nemo p = {}\"</span>\n\n<span class=\"kn\">lemma</span> <span class=\"s\">\"loop_helper dummy find_nemo fake_mutator never_stop p = loop_helper dummy find_nemo fake_mutator never_stop (f p)\"</span>\n<span class=\"k\">proof</span> <span class=\"o\">(</span><span class=\"n\">induct</span> <span class=\"n\">p</span> <span class=\"n\">rule</span><span class=\"o\">:</span> <span class=\"n\">loop_helper.induct</span> <span class=\"c\">(* &lt;---- complete the brace *)</span>\n<span class=\"k\">qed</span>\n\n<span class=\"k\">end</span>\n</code></pre></div>",
        "id": 241770902,
        "sender_full_name": "Max Nowak",
        "timestamp": 1623070189
    },
    {
        "content": "<p>Actually, if you just completely get rid of <code>TermCond</code> (you want me to copy paste the code again?), it does manage to come up with some goals. Some very.... questionable goals :D</p>\n<div class=\"codehilite\"><pre><span></span><code>proof (state)\ngoal (2 subgoals):\n 1. ⋀acc m M p.\n       whendoesitstop acc m M p ⟹\n       m p =\n       m (M (?Pa3 acc m M p)\n           (M (?Pa4 acc m M p)\n             (M (?Pa5 acc m M p)\n               (M (?Pa6 acc m M p)\n               ...\n                     (M (?Pa57 acc m M p) (f p))\n</code></pre></div>",
        "id": 241772804,
        "sender_full_name": "Max Nowak",
        "timestamp": 1623071029
    }
]