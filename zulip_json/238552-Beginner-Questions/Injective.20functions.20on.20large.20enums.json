[
    {
        "content": "<p>Hi! I've got a large(ish) <code>datatype Foo = A0 | A1 | ... | A49</code> and a <code>foo_to_word :: Foo =&gt; 64 word</code> defined case-by-case. Now I'd like to note that <code>inj foo_to_word</code>, which should be trivial, but somehow proof by case distinction takes considerably time (&gt;20s). Why is that? Yes, there are 2500 cases, but each of them should -- so I thought -- be discharged instantly.</p>\n<p>This fits into the more general note that large datatypes such as the one above seem to be quite slow in Isabelle.</p>\n<p>Any hints/tricks how to keep complexity down here?</p>\n<p>MWE:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">datatype</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">  </span><span class=\"n\">A00</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">A01</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">A02</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">A03</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">A04</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">A05</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">A06</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">A07</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">A08</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">A09</span><span class=\"w\"> </span><span class=\"o\">|</span>\n<span class=\"w\">  </span><span class=\"n\">A10</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">A11</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">A12</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">A13</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">A14</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">A15</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">A16</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">A17</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">A18</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">A19</span><span class=\"w\"> </span><span class=\"o\">|</span>\n<span class=\"w\">  </span><span class=\"n\">A20</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">A21</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">A22</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">A23</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">A24</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">A25</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">A26</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">A27</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">A28</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">A29</span><span class=\"w\"> </span><span class=\"o\">|</span>\n<span class=\"w\">  </span><span class=\"n\">A30</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">A31</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">A32</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">A33</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">A34</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">A35</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">A36</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">A37</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">A38</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">A39</span><span class=\"w\"> </span><span class=\"o\">|</span>\n<span class=\"w\">  </span><span class=\"n\">A40</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">A41</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">A42</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">A43</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">A44</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">A45</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">A46</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">A47</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">A48</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">A49</span>\n\n<span class=\"k\">definition</span><span class=\"w\"> </span><span class=\"n\">foo_to_nat</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">‹Foo ⇒ nat›</span><span class=\"w\"> </span><span class=\"kp\">where</span>\n<span class=\"w\">  </span><span class=\"s\">‹foo_to_nat x ≡ case x of</span>\n<span class=\"s\">      A00 ⇒ 00 | A01 ⇒ 01 | A02 ⇒ 02 | A03 ⇒ 03 | A04 ⇒ 04 | A05 ⇒ 05 | A06 ⇒ 06 | A07 ⇒ 07 | A08 ⇒ 08 | A09 ⇒ 09 |</span>\n<span class=\"s\">      A10 ⇒ 10 | A11 ⇒ 11 | A12 ⇒ 12 | A13 ⇒ 13 | A14 ⇒ 14 | A15 ⇒ 15 | A16 ⇒ 16 | A17 ⇒ 17 | A18 ⇒ 18 | A19 ⇒ 19 |</span>\n<span class=\"s\">      A20 ⇒ 20 | A21 ⇒ 21 | A22 ⇒ 22 | A23 ⇒ 23 | A24 ⇒ 24 | A25 ⇒ 25 | A26 ⇒ 26 | A27 ⇒ 27 | A28 ⇒ 28 | A29 ⇒ 29 |</span>\n<span class=\"s\">      A30 ⇒ 30 | A31 ⇒ 31 | A32 ⇒ 32 | A33 ⇒ 33 | A34 ⇒ 34 | A35 ⇒ 35 | A36 ⇒ 36 | A37 ⇒ 37 | A38 ⇒ 38 | A39 ⇒ 39 |</span>\n<span class=\"s\">      A40 ⇒ 40 | A41 ⇒ 41 | A42 ⇒ 42 | A43 ⇒ 43 | A44 ⇒ 44 | A45 ⇒ 45 | A46 ⇒ 46 | A47 ⇒ 47 | A48 ⇒ 48 | A49 ⇒ 49›</span>\n\n<span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">foo_to_nat_inj</span><span class=\"o\">:</span>\n<span class=\"w\">  </span><span class=\"kp\">shows</span><span class=\"w\"> </span><span class=\"s\">‹inj foo_to_nat›</span>\n<span class=\"w\">  </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">auto</span><span class=\"w\"> </span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"n\">add</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">inj_def</span><span class=\"w\"> </span><span class=\"n\">foo_to_nat_def</span><span class=\"w\"> </span><span class=\"n\">split</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Foo.splits</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"c\">(* SLOW *)</span>\n</code></pre></div>",
        "id": 376537226,
        "sender_full_name": "Hanno Becker",
        "timestamp": 1689744157
    },
    {
        "content": "<p><del>Maybe you can selectively enable only those datatype plugins that you really need to make it faster.</del><br>\n<del>Relevant thread:</del><br>\n<del>https://isabelle.zulipchat.com/#narrow/stream/247541-Mirror.3A-Isabelle-Users-Mailing-List/topic/.5Bisabelle.5D.20Datatype.20definition.20can.20be.20slow</del><br>\n<del>Relevant document:</del><br>\n<del>https://isabelle.in.tum.de/dist/doc/datatypes.pdf#section.8</del></p>\n<p>Sorry I misread: I thought it is about the datatype definition, not the following lemma...</p>",
        "id": 376540366,
        "sender_full_name": "Kevin Kappelmann",
        "timestamp": 1689745481
    },
    {
        "content": "<p>It is not too bad with</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"w\">  </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">auto</span><span class=\"w\"> </span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"n\">only</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">semiring_char_0_class.eq_numeral_simps</span><span class=\"w\"> </span><span class=\"n\">inj_def</span><span class=\"w\"> </span><span class=\"n\">simp_thms</span><span class=\"w\"> </span><span class=\"n\">nat.distinct</span><span class=\"w\">  </span><span class=\"n\">verit_eq_simplify</span>\n<span class=\"w\">      </span><span class=\"n\">old.nat.distinct</span><span class=\"w\"> </span><span class=\"n\">One_nat_def</span><span class=\"w\"> </span><span class=\"n\">foo_to_nat_def</span><span class=\"w\"> </span><span class=\"n\">Suc_eq_numeral</span><span class=\"w\"> </span><span class=\"n\">pred_numeral_simps</span><span class=\"w\"> </span><span class=\"n\">split</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Foo.splits</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 376551013,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1689749361
    },
    {
        "content": "<p>(this is around 10 times faster on my machine than your solution)</p>",
        "id": 376551185,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1689749413
    },
    {
        "content": "<p>How did you come up with that, <span class=\"user-mention\" data-user-id=\"233198\">@Mathias Fleury</span> ?</p>",
        "id": 376555864,
        "sender_full_name": "Hanno Becker",
        "timestamp": 1689750926
    },
    {
        "content": "<p>I started with</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"n\">only</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">inj_def</span><span class=\"w\"> </span><span class=\"n\">foo_to_nat_def</span><span class=\"w\"> </span><span class=\"n\">split</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Foo.splits</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Then I checked what the simplifier needed to continue the proof. Usually with:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"s\">\"0 = (35::nat)\"</span>\n<span class=\"w\">  </span><span class=\"n\">supply</span><span class=\"w\"> </span><span class=\"o\">[[</span><span class=\"n\">simp_trace</span><span class=\"o\">]]</span>\n<span class=\"w\">  </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"n\">simp</span>\n<span class=\"w\">  </span><span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>At some point, I got to: </p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"w\">  </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"n\">only</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">semiring_char_0_class.eq_numeral_simps</span><span class=\"w\"> </span><span class=\"n\">inj_def</span><span class=\"w\"> </span><span class=\"n\">simp_thms</span><span class=\"w\"> </span><span class=\"n\">nat.distinct</span><span class=\"w\">  </span><span class=\"n\">verit_eq_simplify</span>\n<span class=\"w\">      </span><span class=\"n\">old.nat.distinct</span><span class=\"w\"> </span><span class=\"n\">One_nat_def</span><span class=\"w\"> </span><span class=\"n\">foo_to_nat_def</span><span class=\"w\"> </span><span class=\"n\">Suc_eq_numeral</span><span class=\"w\"> </span><span class=\"n\">pred_numeral_simps</span><span class=\"w\"> </span><span class=\"n\">split</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Foo.splits</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>which was not working (because of some missing simplification under forall), but auto worked…</p>",
        "id": 376612587,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1689763004
    },
    {
        "content": "<p>Thanks, very illustrative!</p>",
        "id": 376613086,
        "sender_full_name": "Hanno Becker",
        "timestamp": 1689763092
    }
]