[
    {
        "content": "<p>I want to consider embedding a relation to another type, and I defined:<br>\ndefinition inc_rel where <br>\n\"inc_rel i R ≡ {p. (∃ r1 r2. (r1,r2) ∈ R ∧ p = (i r1, i r2))}\"</p>\n<p>inc_rel is supposed to embed R via an injection i.</p>",
        "id": 498613565,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1739118678
    },
    {
        "content": "<p>I want as an effect:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">theorem</span><span class=\"w\"> </span><span class=\"n\">rtrancl_inj</span><span class=\"o\">:</span>\n<span class=\"w\">  </span><span class=\"kp\">assumes</span><span class=\"w\"> </span><span class=\"s\">\"inj_on i (Domain R ∪ Range R)\"</span>\n<span class=\"w\">  </span><span class=\"kp\">shows</span><span class=\"w\"> </span><span class=\"s\">\" inc_rel i (R⇧*) = (inc_rel i R)⇧*\"</span><span class=\"w\"> </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">assms</span>\n</code></pre></div>",
        "id": 498613579,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1739118698
    },
    {
        "content": "<p>However, nitpick tells me that is wrong.</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"n\">Nitpicking</span><span class=\"w\"> </span><span class=\"n\">goal</span><span class=\"o\">:</span>\n<span class=\"w\">  </span><span class=\"n\">inj_on</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Domain</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"w\"> </span><span class=\"n\">∪</span><span class=\"w\"> </span><span class=\"n\">Range</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">⟹</span>\n<span class=\"w\">  </span><span class=\"n\">inc_rel</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">R⇧*</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">inc_rel</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"o\">)</span><span class=\"n\">⇧*</span>\n<span class=\"n\">Nitpick</span><span class=\"w\"> </span><span class=\"n\">found</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">quasi</span><span class=\"w\"> </span><span class=\"n\">genuine</span><span class=\"w\"> </span><span class=\"n\">counterexample</span>\n<span class=\"kp\">for</span><span class=\"w\"> </span><span class=\"n\">card</span><span class=\"w\"> </span><span class=\"n n-Type\">'b</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">3</span><span class=\"w\"> </span><span class=\"kp\">and</span><span class=\"w\"> </span><span class=\"n\">card</span><span class=\"w\"> </span><span class=\"n n-Type\">'a</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">2</span><span class=\"o\">:</span>\n<span class=\"w\">  </span><span class=\"n\">Free</span><span class=\"w\"> </span><span class=\"n\">variables</span><span class=\"o\">:</span>\n<span class=\"w\">    </span><span class=\"n\">R</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"ow\">{}</span>\n<span class=\"w\">    </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">λx.</span><span class=\"w\"> </span><span class=\"o\">_)(</span><span class=\"n\">a⇩1</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">b⇩1</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">a⇩2</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">b⇩2</span><span class=\"o\">)</span>\n<span class=\"n\">Try</span><span class=\"w\"> </span><span class=\"n\">again</span><span class=\"w\"> </span><span class=\"k\">with</span><span class=\"w\"> </span><span class=\"s\">\"user_axioms\"</span><span class=\"w\"> </span><span class=\"n\">set</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"s\">\"true\"</span><span class=\"w\"> </span><span class=\"n\">to</span>\n<span class=\"n\">confirm</span><span class=\"w\"> </span><span class=\"n\">that</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">counterexample</span><span class=\"w\"> </span><span class=\"kp\">is</span><span class=\"w\"> </span><span class=\"n\">genuine</span>\n</code></pre></div>",
        "id": 498613646,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1739118729
    },
    {
        "content": "<p>But it then seems that it does not conceive my definition of inc_rel correctly. I expect the both <code>(inc_rel I R)^*</code> and <code>inc_rel i R^*</code> are empty, given that R is empty.</p>",
        "id": 498613737,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1739118819
    },
    {
        "content": "<p>What is wrong here?</p>",
        "id": 498613741,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1739118826
    },
    {
        "content": "<p>Nitpick is telling you that it is not sure if the counter example is correct: <code>found a quasi genuine counterexample</code></p>",
        "id": 498613954,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1739118981
    },
    {
        "content": "<p>Quickchecks claims to have found a counterexample:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"n\">Testing</span><span class=\"w\"> </span><span class=\"n\">conjecture</span><span class=\"w\"> </span><span class=\"k\">with</span><span class=\"w\"> </span><span class=\"n\">Quickcheck</span><span class=\"o\">-</span><span class=\"n\">exhaustive...</span>\n<span class=\"n\">Quickcheck</span><span class=\"w\"> </span><span class=\"n\">found</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">counterexample</span><span class=\"o\">:</span>\n<span class=\"w\">  </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">λx.</span><span class=\"w\"> </span><span class=\"n\">undefined</span><span class=\"o\">)(</span><span class=\"n\">a⇩1</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">a⇩1</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">a⇩2</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">a⇩1</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"n\">R</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"ow\">{}</span>\n<span class=\"n\">Evaluated</span><span class=\"w\"> </span><span class=\"n\">terms</span><span class=\"o\">:</span>\n<span class=\"w\">  </span><span class=\"n\">inc_rel</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">R⇧*</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"ow\">{</span><span class=\"o\">(</span><span class=\"n\">a⇩1</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">a⇩1</span><span class=\"o\">),</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">a⇩1</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">a⇩1</span><span class=\"o\">)</span><span class=\"ow\">}</span>\n<span class=\"w\">  </span><span class=\"o\">(</span><span class=\"n\">inc_rel</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"o\">)</span><span class=\"n\">⇧*</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"ow\">{</span><span class=\"o\">(</span><span class=\"n\">a⇩1</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">a⇩1</span><span class=\"o\">),</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">a⇩2</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">a⇩2</span><span class=\"o\">)</span><span class=\"ow\">}</span>\n</code></pre></div>",
        "id": 498614022,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1739119053
    },
    {
        "content": "<p>but it looks wrong too</p>",
        "id": 498614033,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1739119070
    },
    {
        "content": "<p>Again I think both relations should be empty.</p>",
        "id": 498614101,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1739119097
    },
    {
        "content": "<p>I see, that is helpful to know that counter-example finders can be wrong...</p>",
        "id": 498614122,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1739119118
    },
    {
        "content": "<p>BTW are you aware of anything that considers the image of relations under functions?</p>",
        "id": 498614145,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1739119142
    },
    {
        "content": "<p>Ahhhhh</p>",
        "id": 498614177,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1739119189
    },
    {
        "content": "<p>you do not want the reflexive transitive closure</p>",
        "id": 498614234,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1739119209
    },
    {
        "content": "<p>only the transitive closure, right?</p>",
        "id": 498614244,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1739119219
    },
    {
        "content": "<p>I just find it annoying to prove the image of a tree relation is a tree...</p>",
        "id": 498614250,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1739119225
    },
    {
        "content": "<p>I want both, actually.</p>",
        "id": 498614265,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1739119234
    },
    {
        "content": "<p>So actually, the counter example is not wrong, your theorem does not mean what you think it means</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"s\">‹rtrancl {} = (λx. (x,x)) ` UNIV›</span>\n<span class=\"w\">  </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">auto</span>\n</code></pre></div>",
        "id": 498614342,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1739119312
    },
    {
        "content": "<p>I wonder why it is defined like this... Let me check the definition.</p>",
        "id": 498614531,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1739119457
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"754515\">Yiming Xu</span> <a href=\"#narrow/channel/238552-Beginner-Questions/topic/Injective.20image.20of.20reflexive.20and.20transitive.20closure/near/498614145\">said</a>:</p>\n<blockquote>\n<p>BTW are you aware of anything that considers the image of relations under functions?</p>\n</blockquote>\n<p>you mean about <code>f `` R</code>?</p>",
        "id": 498614537,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1739119461
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"754515\">Yiming Xu</span> <a href=\"#narrow/channel/238552-Beginner-Questions/topic/Injective.20image.20of.20reflexive.20and.20transitive.20closure/near/498614531\">said</a>:</p>\n<blockquote>\n<p>I wonder why it is defined like this... Let me check the definition.</p>\n</blockquote>\n<p><em>reflexive</em> transitive closure</p>",
        "id": 498614553,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1739119480
    },
    {
        "content": "<p>it must be _reflexive_</p>",
        "id": 498614564,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1739119490
    },
    {
        "content": "<p>Not only making the ones that is already in the relation reflexive, I see.</p>",
        "id": 498614610,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1739119516
    },
    {
        "content": "<p>that why there is also the  transitive closure (<code>^+</code> in Isabelle)</p>",
        "id": 498614646,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1739119546
    },
    {
        "content": "<p>So is there anything consider the image of transitive closure?</p>",
        "id": 498614740,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1739119602
    },
    {
        "content": "<p>Fair enough if nothing exists yet...</p>",
        "id": 498614800,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1739119660
    },
    {
        "content": "<p>Thankfully I just convinced that my usage of it in my theorems is not wrong. I was panic for a moment.</p>",
        "id": 498614900,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1739119726
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"754515\">Yiming Xu</span> <a href=\"#narrow/channel/238552-Beginner-Questions/topic/Injective.20image.20of.20reflexive.20and.20transitive.20closure/near/498614740\">said</a>:</p>\n<blockquote>\n<p>So is there anything consider the image of transitive closure?</p>\n</blockquote>\n<p><code>term ‹Image ((rtrancl A) :: ('a × 'a) set)›</code>?</p>",
        "id": 498614923,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1739119744
    },
    {
        "content": "<p>or are you talking about something else?</p>",
        "id": 498614947,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1739119766
    },
    {
        "content": "<p>I mean the image under a function.</p>",
        "id": 498614956,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1739119777
    },
    {
        "content": "<p>Here I actually only care about injective functions.</p>",
        "id": 498615073,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1739119841
    },
    {
        "content": "<p>Can you write it down formally? I do not know what that is.</p>",
        "id": 498615131,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1739119887
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">definition</span><span class=\"w\"> </span><span class=\"n\">im_rel</span><span class=\"w\"> </span><span class=\"kp\">where</span>\n<span class=\"s\">\"im_rel i R ≡ {p. (∃ r1 r2. (r1,r2) ∈ R ∧ p = (i r1, i r2))}\"</span>\n</code></pre></div>",
        "id": 498615206,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1739119926
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kt\">term</span><span class=\"w\"> </span><span class=\"s\">‹(range (λx. (f x,f x))) O R›</span>\n</code></pre></div>\n<p>I know the <code> (λx. (f x,f x))</code> has a name, but it is escaping me right now</p>",
        "id": 498615579,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1739120219
    },
    {
        "content": "<p>Thanks! That is helpful to know. I will bug people around.</p>",
        "id": 498615726,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1739120332
    }
]