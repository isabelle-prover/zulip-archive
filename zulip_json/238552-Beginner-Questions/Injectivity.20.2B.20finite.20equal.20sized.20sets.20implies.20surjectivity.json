[
    {
        "content": "<p>I have defined a function <code>g :: \"nat =&gt; int\"</code> and showed these two statements:<br>\n<code>\"∀i ∈ {0..m-1}. ∀j ∈ {0..m-1}. g i = g j ⟶ i = j\"</code> and<br>\n<code>\"∀ i ∈ {0..m-1}. g i ∈ {0..m-1}\"</code>.</p>\n<p>How can I show surjectivity? Is there something in the function libraries that can help?</p>",
        "id": 373265626,
        "sender_full_name": "Kevin Lee",
        "timestamp": 1688746495
    },
    {
        "content": "<p>I guess you’re making again the mistake of using HOL constructs where Pure (meta-logic) constructs exist. If you use the latter, things might become much simpler. For the first statement, perhaps applying an introduction rule for surjectivity (which should be called <code>surjI</code>) will be enough.</p>",
        "id": 373273728,
        "sender_full_name": "Wolfgang Jeltsch",
        "timestamp": 1688748269
    },
    {
        "content": "<p>in addition the above, you could use Finite_Set.surjective_iff_injective_gen</p>\n<p>(the way I found this lemma was to search using the patterns \"inj_on\" and \"card _ = card _\")</p>\n<p>you could also consider writing the ranges as {0..&lt;m}</p>",
        "id": 373502760,
        "sender_full_name": "Yong Kiam",
        "timestamp": 1688827630
    }
]