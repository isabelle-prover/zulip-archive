[
    {
        "content": "<p>I have a really simple example that I can't get working, involving instantiatations with multiple type parameters:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">datatype</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n n-Type\">'a</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n n-Type\">'b</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">MyT</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">MyT</span><span class=\"w\"> </span><span class=\"n n-Type\">'b</span><span class=\"w\"></span>\n\n<span class=\"k\">instantiation</span><span class=\"w\"> </span><span class=\"n\">MyT</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"o\">(_,</span><span class=\"w\"> </span><span class=\"n\">plus</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">plus</span><span class=\"w\"></span>\n<span class=\"k\">begin</span><span class=\"w\"></span>\n<span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">plus_MyT</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"('l, 'a::plus) MyT ⇒ ('l, 'a) MyT ⇒ ('l, 'a) MyT\"</span><span class=\"w\"> </span><span class=\"kp\">where</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"s\">\"plus_MyT (MyT a) (MyT b) = MyT (a + b)\"</span><span class=\"w\"></span>\n<span class=\"kn\">instance</span><span class=\"w\"> </span><span class=\"ow\">..</span><span class=\"w\"></span>\n<span class=\"k\">end</span><span class=\"w\"></span>\n</code></pre></div>\n<p>When I run this, I get an error on the constraint <code>'a::plus</code> saying</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"n\">Sort</span><span class=\"w\"> </span><span class=\"n\">constraint</span><span class=\"w\"> </span><span class=\"n\">plus</span><span class=\"w\"> </span><span class=\"n\">inconsistent</span><span class=\"w\"> </span><span class=\"k\">with</span><span class=\"w\"> </span><span class=\"n\">default</span><span class=\"w\"> </span><span class=\"n\">type</span><span class=\"w\"> </span><span class=\"kp\">for</span><span class=\"w\"> </span><span class=\"n\">type</span><span class=\"w\"> </span><span class=\"n\">variable</span><span class=\"w\"> </span><span class=\"s\">\"'a\"</span><span class=\"n\">⌂</span><span class=\"w\"></span>\n</code></pre></div>\n<p>So it looks like for the second type param, it's reading the constraint for the first param <code>_</code>? Curiously, when I write</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">instantiation</span><span class=\"w\"> </span><span class=\"n\">MyT</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">plus</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"o\">_)</span><span class=\"w\"> </span><span class=\"n\">plus</span><span class=\"w\"></span>\n</code></pre></div>\n<p>it _does_ compile, but note that this is obviously not what I want to do, because then I don't get an instance for, say, <code>(unit, nat) MyT</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kt\">value</span><span class=\"w\"> </span><span class=\"s\">\"MyT 5 + (MyT 6 :: (unit, nat) MyT)\"</span><span class=\"w\"></span>\n</code></pre></div>\n<p>gives error:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"n\">Type</span><span class=\"w\"> </span><span class=\"n\">unification</span><span class=\"w\"> </span><span class=\"n\">failed</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">No</span><span class=\"w\"> </span><span class=\"n\">type</span><span class=\"w\"> </span><span class=\"n\">arity</span><span class=\"w\"> </span><span class=\"n\">unit</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"n\">plus</span><span class=\"w\"></span>\n</code></pre></div>\n<p>I really don't understand why this second example is valid but the first one isn't</p>",
        "id": 310609031,
        "sender_full_name": "Matthew Torrence",
        "timestamp": 1668691586
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">datatype</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n n-Type\">'a</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n n-Type\">'b</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">MyT</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">MyT</span><span class=\"w\"> </span><span class=\"n n-Type\">'b</span><span class=\"w\"></span>\n\n<span class=\"k\">instantiation</span><span class=\"w\"> </span><span class=\"n\">MyT</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"o\">(_,</span><span class=\"w\"> </span><span class=\"n\">plus</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">plus</span><span class=\"w\"></span>\n<span class=\"k\">begin</span><span class=\"w\"></span>\n<span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">plus_MyT</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"('a, 'b::plus) MyT ⇒ ('a, 'b) MyT ⇒ ('a, 'b) MyT\"</span><span class=\"w\"> </span><span class=\"kp\">where</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"s\">\"plus_MyT (MyT a) (MyT b) = MyT (a + b)\"</span><span class=\"w\"></span>\n<span class=\"kn\">instance</span><span class=\"w\"> </span><span class=\"ow\">..</span><span class=\"w\"></span>\n<span class=\"k\">end</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 310609471,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1668691764
    },
    {
        "content": "<p>the type unification gives the names 'a, 'b, and so on. So your <code>'l, 'a::plus</code> does not work</p>",
        "id": 310609651,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1668691814
    },
    {
        "content": "<p>gotcha. Huh. Interesting. Very quick response though appreciated</p>",
        "id": 310609820,
        "sender_full_name": "Matthew Torrence",
        "timestamp": 1668691853
    },
    {
        "content": "<p>to be fair to my original example, of which this is an MWE, my actual type has something like </p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">datatype</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n n-Type\">'l</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n n-Type\">'a</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">MyT</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">MyT</span><span class=\"w\"> </span><span class=\"n n-Type\">'a</span><span class=\"w\"></span>\n</code></pre></div>\n<p>which is why I still had the 'l and 'a naming going on</p>",
        "id": 310610429,
        "sender_full_name": "Matthew Torrence",
        "timestamp": 1668692083
    }
]