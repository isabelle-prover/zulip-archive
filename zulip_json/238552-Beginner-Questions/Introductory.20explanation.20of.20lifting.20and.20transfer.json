[
    {
        "content": "<p>I have ran into <code>uprod</code> - quotient type, something I have no practical experience with. If I understand correctly, the lifting and transfer tools are important facilities for working with quotients, so I'd like to learn something about them. However, I can't seem to find any introductory documentation on them. Looking through <a href=\"https://isabelle.in.tum.de/documentation.html\">the documentation page</a>, I've only been able to find a dry description in isar-ref, with no examples. Is there any more introductory material?</p>",
        "id": 231014081,
        "sender_full_name": "Jakub Kądziołka",
        "timestamp": 1616156635
    },
    {
        "content": "<p>There is <code>src/HOL/ex/Transfer_Int_Nat.thy</code></p>",
        "id": 231015087,
        "sender_full_name": "Lukas Stevens",
        "timestamp": 1616157204
    },
    {
        "content": "<p>Hmm, I guess that helps somewhat. Though, I still don't see how I could prove something simple like</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lift_definition</span> <span class=\"n\">pair_content</span> <span class=\"o\">::</span> <span class=\"s\">\"'a uprod ⇒ 'a multiset\"</span> <span class=\"kp\">is</span>\n  <span class=\"s\">\"λ(a, b). {# a, b #}\"</span> <span class=\"k\">by</span> <span class=\"n\">auto</span>\n\n<span class=\"kn\">lemma</span> <span class=\"s\">\"pair_content (Upair a b) = {# a, b #}\"</span>\n</code></pre></div>",
        "id": 231093188,
        "sender_full_name": "Jakub Kądziołka",
        "timestamp": 1616189819
    },
    {
        "content": "<p>I've managed to prove this with <code>by (simp add: Upair.abs_eq pair_content.abs_eq)</code>, is that the canonical approach, or am I going about this in a round-about way?</p>",
        "id": 231102722,
        "sender_full_name": "Jakub Kądziołka",
        "timestamp": 1616195794
    },
    {
        "content": "<p>No, it the idiomatic way would be something like <code>by transfer auto</code>, but it doesn't. I don't really understand why it doesn't work, but I never had a very good understanding of the <code>transfer</code> package.</p>",
        "id": 231143978,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1616243820
    },
    {
        "content": "<p>The transfer method leaves some schematic variables in the goals in this case. Is that normal, or could that be the problem?</p>",
        "id": 231144658,
        "sender_full_name": "Jakub Kądziołka",
        "timestamp": 1616244779
    },
    {
        "content": "<p>No, this normally happens when there's a missing transfer rule.</p>",
        "id": 231144841,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1616245029
    },
    {
        "content": "<p>And the first goal tells you what constant the rule is missing for.</p>",
        "id": 231144849,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1616245041
    },
    {
        "content": "<p>But sometimes I don't understand why it happens, and this is one of these cases.</p>",
        "id": 231144853,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1616245053
    },
    {
        "content": "<p>Sometimes <code>transfer'</code> does the trick in those cases, bot not here. I'm not even sure what <code>transfer'</code> does. Ondřej Kunčar told me it's bad and that I shouldn't use it.</p>",
        "id": 231144911,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1616245102
    },
    {
        "content": "<p>Hmm, I think it's trying to transfer through both uprod and multiset?</p>",
        "id": 231145439,
        "sender_full_name": "Jakub Kądziołka",
        "timestamp": 1616245594
    },
    {
        "content": "<p>That might be the problem, yes. I never really understood how to get around that.</p>",
        "id": 231145904,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1616246136
    },
    {
        "content": "<p>Maybe ask on the mailing list. I think the probability that someone knowledgeable on lifting and transfer will reply is higher there.</p>",
        "id": 231145915,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1616246156
    },
    {
        "content": "<p>If you haven't seen it already, there is also a file <code>HOL/ex/Transfer_Debug.thy</code> that goes through same cases where <code>transfer</code> fails and how to debug. (I have to add that I didn't find the file too illuminating)</p>",
        "id": 231147086,
        "sender_full_name": "Lukas Stevens",
        "timestamp": 1616247545
    },
    {
        "content": "<p>Yes, I've just noticed. I managed to craft the following proof with that method:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">declare</span> <span class=\"n\">Upair_parametric</span><span class=\"o\">[</span><span class=\"n\">transfer_rule</span> <span class=\"n\">del</span><span class=\"o\">]</span>\n<span class=\"kn\">lemma</span> <span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]:</span> <span class=\"s\">\"pair_content (Upair a b) = {# a, b #}\"</span>\n  <span class=\"kp\">apply</span> <span class=\"n\">transfer_start</span>\n          <span class=\"kp\">apply</span> <span class=\"o\">(</span><span class=\"n\">rule</span> <span class=\"n\">Rel_eq_refl</span><span class=\"o\">)</span>\n         <span class=\"kp\">apply</span> <span class=\"n\">transfer_step</span><span class=\"o\">+</span>\n  <span class=\"kp\">apply</span> <span class=\"n\">transfer_end</span>\n  <span class=\"k\">by</span> <span class=\"n\">simp</span>\n</code></pre></div>",
        "id": 231147875,
        "sender_full_name": "Jakub Kądziołka",
        "timestamp": 1616248547
    },
    {
        "content": "<p>oh, actually, this works:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">declare</span> <span class=\"n\">Upair_parametric</span><span class=\"o\">[</span><span class=\"n\">transfer_rule</span> <span class=\"n\">del</span><span class=\"o\">]</span> <span class=\"n\">zero_multiset.transfer</span><span class=\"o\">[</span><span class=\"n\">transfer_rule</span> <span class=\"n\">del</span><span class=\"o\">]</span>\n<span class=\"kn\">lemma</span> <span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]:</span> <span class=\"s\">\"pair_content (Upair a b) = {# a, b #}\"</span>\n  <span class=\"k\">by</span> <span class=\"n\">transfer</span> <span class=\"n\">simp</span>\n</code></pre></div>",
        "id": 231148044,
        "sender_full_name": "Jakub Kądziołka",
        "timestamp": 1616248703
    },
    {
        "content": "<p>What theories did you import? For me, it works without the <code>declare</code>.</p>",
        "id": 231148654,
        "sender_full_name": "Lukas Stevens",
        "timestamp": 1616249384
    },
    {
        "content": "<p>(On the development version of Isabelle and Isabelle2020)</p>",
        "id": 231148729,
        "sender_full_name": "Lukas Stevens",
        "timestamp": 1616249465
    },
    {
        "content": "<p>Oh, so apparently <code>apply transfer by simp</code> doesn't work and <code>by transfer simp</code> does...</p>",
        "id": 231148810,
        "sender_full_name": "Jakub Kądziołka",
        "timestamp": 1616249569
    },
    {
        "content": "<p>Yes, <code>by transfer simp</code> does backtracking.</p>",
        "id": 231150164,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1616251183
    },
    {
        "content": "<p>The other one does not.</p>",
        "id": 231150170,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1616251192
    },
    {
        "content": "<p>Beware though: <code>transfer</code> can cause excessive backtracking sometimes.</p>",
        "id": 231150174,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1616251199
    }
]