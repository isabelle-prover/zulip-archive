[
    {
        "content": "<p>Suppose I have a lemma proving that a given function is bijective. How do I define the inverse function? In my real life problem I actually have a function <code>f</code> which satisfies <code>bij_betw f UNIV (S :: 'b set)</code> and I need to build a function <code>'b =&gt; 'a</code> such that it is the inverse if <code>f</code> on <code>S</code>. Can I do this?</p>",
        "id": 243726147,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1624491177
    },
    {
        "content": "<p>see <code>the_inv_into</code></p>",
        "id": 243726334,
        "sender_full_name": "Jakub Kądziołka",
        "timestamp": 1624491294
    },
    {
        "content": "<p>Thank you! I am puzzled though: how does that definition work? If <code>f</code> is not surjective the inverse is not unique, and <code>f</code> is never assumed surjective, so how does <code>THE</code> work? My guess is that it uses some very powerful axiom of choice...</p>",
        "id": 243775634,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1624536827
    },
    {
        "content": "<p><code>THE</code> is a variation on Hilbert's epsilon operator, which is present in Isabelle as <code>SOME</code>. <code>SOME</code> indeed corresponds to the axiom of choice, and is defined as follows: if <code>EX x. P x</code>, then <code>SOME</code> returns some <code>x</code> that has the property, otherwise an arbitrary <code>x</code> from your type. <code>THE</code> additionally requires that there is exactly one <code>x</code> st. <code>P x</code>, which, means the happy case doesn't require AC, as it corresponds to a function <code>{x} \\mapsto x</code>, which should be constructible in ZF? Though, the case where <code>ALL x. P x = False</code> corresponds to <code>undefined :: 'a</code>, and I'm not sure whether that's AC or not...</p>",
        "id": 243780304,
        "sender_full_name": "Jakub Kądziołka",
        "timestamp": 1624539003
    },
    {
        "content": "<p><code>THE</code> is the unique choice operator, and its existence is actually \"weaker\" than that of the existence of the <code>SOME</code> operator (non-unique choice). But I'll leave the precise explanation of what that means to people who actually know something about logic (in contrast to me).</p>",
        "id": 243831657,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1624561335
    },
    {
        "content": "<p>Bu my point is precisely that if the function is not surjective the inverse is not unique! In fact I was very surprised to see a <code>THE</code> there</p>",
        "id": 243831794,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1624561402
    },
    {
        "content": "<p>In that case you just get some unspecified value that you can prove nothing about (cf. <code>undefined</code>).</p>",
        "id": 243832148,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1624561571
    },
    {
        "content": "<p>You mean in the case the function is not surjetive?</p>",
        "id": 243832224,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1624561617
    },
    {
        "content": "<p>HOL cannot prevent you from writing down \"nonsense\". There are a number of terms that are \"nonsensical\" in some sense, e.g. <code>1 / 0</code>. Some of them have some halfway sensible dummy values like <code>1 / 0 = 0</code>, others are just unspecified (e.g. <code>ln (-1 :: real)</code> or <code>THE x. False</code>).</p>",
        "id": 243832292,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1624561649
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"370356\">Nicolò Cavalleri</span> <a href=\"#narrow/stream/238552-Beginner-Questions/topic/Inverse.20of.20bijective.20function/near/243832224\">said</a>:</p>\n<blockquote>\n<p>You mean in the case the function is not surjetive?</p>\n</blockquote>\n<p>The way <code>the_inv_into</code> is defined, <code>the_inv_into A f y</code> is the unique value <code>x</code> such that <code>x ∈ A</code> and <code>f(x) = y</code> if such a unique value exists; otherwise you get \"nonsense\".</p>",
        "id": 243832645,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1624561808
    },
    {
        "content": "<p>If the function is not injective and surjective, there will be some values <code>y</code> where <code>the_inv_into A f y</code> will be \"nonsense\" (i.e. unspecified). It might still work for other values of <code>y</code> though if the choice is unique.</p>",
        "id": 243832742,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1624561867
    },
    {
        "content": "<p>But then what if I have an injective function of which I want a right inverse? Isn't there a theory of inverse functions that makes use of SOME? In any case I am puzzled that in lemmas involving <code>the_inv_into</code> you often see the hypothesis that the function be injective but never that it be surjective...</p>",
        "id": 243832825,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1624561912
    },
    {
        "content": "<p>For instance, if  <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>=</mo><msup><mi>x</mi><mn>2</mn></msup></mrow><annotation encoding=\"application/x-tex\">f(x) = x^2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span>, then <code>the_inv_into UNIV f 0 = 0</code>. For anything other than 0, it's unspecified.</p>",
        "id": 243832834,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1624561915
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"370356\">Nicolò Cavalleri</span> <a href=\"#narrow/stream/238552-Beginner-Questions/topic/Inverse.20of.20bijective.20function/near/243832825\">said</a>:</p>\n<blockquote>\n<p>But then what if I have an injective function of which I want a right inverse? Isn't there a theory of inverse functions that makes use of SOME? In any case I am puzzled that in lemmas involving <code>the_inv_into</code> you often see the hypothesis that the function be injective but never that it be surjective...</p>\n</blockquote>\n<p>Yes, there is <code>inv_into</code>. Frankly I've never used <code>the_inv_into</code>; I didn't even know it existed.</p>",
        "id": 243832904,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1624561945
    },
    {
        "content": "<p>I don't think there is any reason to ever use <code>the_inv_into</code> over <code>inv_into</code>.</p>",
        "id": 243832917,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1624561960
    },
    {
        "content": "<p><code>inv_into</code> also works if the value is not unique, it's enough for the preimage to be nonempty.</p>",
        "id": 243832950,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1624561983
    },
    {
        "content": "<p>Oh great then I was looking for <code>inv_into</code> I guess!</p>",
        "id": 243832956,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1624561986
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"370356\">Nicolò Cavalleri</span> <a href=\"#narrow/stream/238552-Beginner-Questions/topic/Inverse.20of.20bijective.20function/near/243832825\">said</a>:</p>\n<blockquote>\n<p>In any case I am puzzled that in lemmas involving <code>the_inv_into</code> you often see the hypothesis that the function be injective but never that it be surjective...</p>\n</blockquote>\n<p>Do you have any examples?</p>",
        "id": 243833007,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1624562017
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232736\">Manuel Eberl</span> <a href=\"#narrow/stream/238552-Beginner-Questions/topic/Inverse.20of.20bijective.20function/near/243832917\">said</a>:</p>\n<blockquote>\n<p>I don't think there is any reason to ever use <code>the_inv_into</code> over <code>inv_into</code>.</p>\n</blockquote>\n<p>Yep I don't see it either!</p>",
        "id": 243833039,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1624562030
    },
    {
        "content": "<p>I guess surjectivity is generally an unnecessarily strong assumption.</p>",
        "id": 243833043,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1624562033
    },
    {
        "content": "<p>It's enough for the specific values you're plugging into the <code>the_inv_into</code> to be in the image of <code>A</code> under <code>f</code>, i.e. in <code>f`A</code>.</p>",
        "id": 243833157,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1624562072
    }
]