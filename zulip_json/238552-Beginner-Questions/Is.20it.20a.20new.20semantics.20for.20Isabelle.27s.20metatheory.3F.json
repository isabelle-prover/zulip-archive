[
    {
        "content": "<p>Good day! I have the following idea of how it is possible to interpret Isabelle's theorems. Of course, most of the computable functions are ending with an exception, or stuck in a loop forever. But, IN PRINCIPLE,  since \"busy-beaver\"-related ideas, Isabelle's metalogic is indeed an LCF for such functions. (If the function stucks in a loop, the it means that it's type is indeed \"valid\"). I would like to open the discussion of the following short program. Such semantic is both ridiculous and natural at the same time. It doesn't collapses notions of Formulas and Propositions just in bool, they indeed have different meaning.<br>\nThe file :  <a href=\"/user_uploads/14278/PiHYH0k31Oh0R2mGJzicK1qG/lcf.ML\">lcf.ML</a><br>\nIt is related very much to Paulson's article <a href=\"https://arxiv.org/pdf/cs/9301105\">https://arxiv.org/pdf/cs/9301105</a> , but it is different.</p>",
        "id": 450236902,
        "sender_full_name": "Georgy Dunaev",
        "timestamp": 1720546294
    },
    {
        "content": "<p>Isabelle already supports partial functions that are not required to terminate</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">partial_function</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">tailrec</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"kp\">where</span>\n<span class=\"s\">‹f n = f (Suc (Suc n))›</span>\n</code></pre></div>",
        "id": 450238550,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1720546742
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"233198\">Mathias Fleury</span> <a href=\"#narrow/stream/238552-Beginner-Questions/topic/Is.20it.20a.20new.20semantics.20for.20Isabelle's.20metatheory.3F/near/450238550\">said</a>:</p>\n<blockquote>\n<p>Isabelle already supports partial functions that are not required to terminate</p>\n<p><div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">partial_function</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">tailrec</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"kp\">where</span>\n<span class=\"s\">‹f n = f (Suc (Suc n))›</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Thanks for mentioning, but it is unrelated. (I am talking about a semantics for a metatheory.) But it is also nice, because it will allow to prove some statements about such semantics within ISabelle itself, if it will be desirable. (And many other things.)</p>",
        "id": 450239485,
        "sender_full_name": "Georgy Dunaev",
        "timestamp": 1720547005
    },
    {
        "content": "<p>The reason behind is that I don't like the idea of \"collapsing of interpretations\", i.e.  interpreting different symbols with the same set, e.g. i don't want to \"collapse\" (==&gt; and --&gt;), (/\\ and \"forall\"), (\"form\"/\"o\" and \"prop\" as \"bool\"), (\"i\" and \"term\") .</p>",
        "id": 450241441,
        "sender_full_name": "Georgy Dunaev",
        "timestamp": 1720547510
    },
    {
        "content": "<p>Also LCF means that there should be some computable functions. :) So I defined them. (within the boundaries of the compiler)</p>",
        "id": 450241862,
        "sender_full_name": "Georgy Dunaev",
        "timestamp": 1720547617
    }
]