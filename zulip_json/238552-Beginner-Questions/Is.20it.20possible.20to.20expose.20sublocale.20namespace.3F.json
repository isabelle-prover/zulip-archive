[
    {
        "content": "<p>I want to be able to access definitions and facts inherited via a sublocale relationship outside of the context of the locale, but this doesn't seem work automatically. Here's an example of what I'm talking about:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">locale</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">  </span><span class=\"kp\">fixes</span>\n<span class=\"w\">    </span><span class=\"n\">foo</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"n n-Type\">'a</span><span class=\"w\"> </span><span class=\"kp\">and</span>\n<span class=\"w\">    </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"'a </span><span class=\"ss\">\\&lt;Rightarrow&gt;</span><span class=\"s\"> 'a\"</span>\n<span class=\"w\">  </span><span class=\"kp\">assumes</span>\n<span class=\"w\">    </span><span class=\"n\">foo_fixed</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"f foo = foo\"</span>\n\n<span class=\"k\">abbreviation</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"kp\">in</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"n\">f5</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"'a </span><span class=\"ss\">\\&lt;Rightarrow&gt;</span><span class=\"s\"> 'a\"</span>\n<span class=\"w\">  </span><span class=\"kp\">where</span><span class=\"w\"> </span><span class=\"s\">\"f5 x </span><span class=\"ss\">\\&lt;equiv&gt;</span><span class=\"s\"> f (f (f (f (f x))))\"</span>\n\n<span class=\"k\">locale</span><span class=\"w\"> </span><span class=\"n\">bar</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">  </span><span class=\"kp\">fixes</span>\n<span class=\"w\">    </span><span class=\"n\">bar</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"n n-Type\">'b</span><span class=\"w\"> </span><span class=\"kp\">and</span>\n<span class=\"w\">    </span><span class=\"n\">g</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"'b </span><span class=\"ss\">\\&lt;Rightarrow&gt;</span><span class=\"s\"> 'b\"</span>\n<span class=\"w\">  </span><span class=\"kp\">assumes</span>\n<span class=\"w\">    </span><span class=\"n\">bar_fixed</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"g (g bar) = bar\"</span>\n\n<span class=\"kn\">sublocale</span><span class=\"w\"> </span><span class=\"n\">bar</span><span class=\"w\"> </span><span class=\" -Symbol\">\\&lt;subseteq&gt;</span><span class=\"w\"> </span><span class=\"n\">double</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"w\"> </span><span class=\"n\">bar</span><span class=\"w\"> </span><span class=\"s\">\"g </span><span class=\"ss\">\\&lt;circ&gt;</span><span class=\"s\"> g\"</span>\n<span class=\"w\">  </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"n\">add</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">bar_fixed</span><span class=\"w\"> </span><span class=\"n\">foo.intro</span><span class=\"o\">)</span>\n\n<span class=\"k\">context</span><span class=\"w\"> </span><span class=\"n\">bar</span>\n<span class=\"k\">begin</span>\n<span class=\"w\">  </span><span class=\"kt\">term</span><span class=\"w\"> </span><span class=\"s\">\"double.f5\"</span>\n<span class=\"w\">  </span><span class=\"c\">(* Returns:</span>\n<span class=\"c\">  * \"double.f5\"</span>\n<span class=\"c\">  *   :: \"'b \\&lt;Rightarrow&gt; 'b\" *)</span>\n<span class=\"k\">end</span>\n\n<span class=\"w\">  </span><span class=\"kt\">term</span><span class=\"w\"> </span><span class=\"s\">\"bar.double.f5\"</span>\n<span class=\"w\">  </span><span class=\"c\">(* Returns:</span>\n<span class=\"c\">  *   Undefined constant: \"bar.double.f5\" *)</span>\n</code></pre></div>\n<p>Is it possible to access <code>double.f5</code> when not in the context of the <code>bar</code> locale? If so what is the right way to do it?</p>",
        "id": 430651581,
        "sender_full_name": "James Hanson",
        "timestamp": 1712000354
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"ow\">...</span>\n<span class=\"k\">definition</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"kp\">in</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"n\">f5</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"'a ⇒ 'a\"</span>\n<span class=\"w\">  </span><span class=\"kp\">where</span><span class=\"w\"> </span><span class=\"s\">\"f5 x ≡ f (f (f (f (f x))))\"</span>\n\n<span class=\"ow\">...</span>\n<span class=\"k\">context</span><span class=\"w\"> </span><span class=\"n\">bar</span>\n<span class=\"k\">begin</span>\n<span class=\"kt\">term</span><span class=\"w\"> </span><span class=\"s\">\"f5\"</span>\n\n<span class=\"kt\">thm</span><span class=\"w\"> </span><span class=\"n\">double.f5_def</span>\n<span class=\"w\">  </span><span class=\"c\">(* Returns:</span>\n<span class=\"c\">  * \"double.f5\"</span>\n<span class=\"c\">  *   :: \"'b ⇒ 'b\" *)</span>\n<span class=\"k\">lemmas</span><span class=\"w\"> </span><span class=\"n\">test</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">double.f5_def</span>\n<span class=\"k\">end</span>\n\n<span class=\"kt\">thm</span><span class=\"w\"> </span><span class=\"n\">bar.test</span>\n<span class=\"c\">(*</span>\n<span class=\"c\">bar ?bar ?g ⟹ foo.f5 (?g ∘ ?g) ?x ≡ (?g ∘ ?g) ((?g ∘ ?g) ((?g ∘ ?g) ((?g ∘ ?g) ((?g ∘ ?g) ?x))))</span>\n\n<span class=\"c\">sublocales do not define constants</span>\n<span class=\"c\">*)</span>\n</code></pre></div>",
        "id": 430653857,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1712001236
    },
    {
        "content": "<p>And with rewrites:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">locale</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">  </span><span class=\"kp\">fixes</span>\n<span class=\"w\">    </span><span class=\"n\">foo</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"n n-Type\">'a</span><span class=\"w\"> </span><span class=\"kp\">and</span>\n<span class=\"w\">    </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"'a ⇒ 'a\"</span>\n<span class=\"w\">  </span><span class=\"kp\">assumes</span>\n<span class=\"w\">    </span><span class=\"n\">foo_fixed</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"f foo = foo\"</span>\n\n<span class=\"k\">definition</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"kp\">in</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"n\">f5</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"'a ⇒ 'a\"</span>\n<span class=\"w\">  </span><span class=\"kp\">where</span><span class=\"w\"> </span><span class=\"s\">\"f5 x ≡ f (f (f (f (f x))))\"</span>\n\n<span class=\"k\">locale</span><span class=\"w\"> </span><span class=\"n\">bar</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">  </span><span class=\"kp\">fixes</span>\n<span class=\"w\">    </span><span class=\"n\">bar</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"n n-Type\">'b</span><span class=\"w\"> </span><span class=\"kp\">and</span>\n<span class=\"w\">    </span><span class=\"n\">g</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"'b ⇒ 'b\"</span>\n<span class=\"w\">  </span><span class=\"kp\">assumes</span>\n<span class=\"w\">    </span><span class=\"n\">bar_fixed</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"g (g bar) = bar\"</span>\n\n<span class=\"k\">definition</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"kp\">in</span><span class=\"w\"> </span><span class=\"n\">bar</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">bar_f5</span><span class=\"w\"> </span><span class=\"kp\">where</span>\n<span class=\"w\">  </span><span class=\"s\">‹bar_f5 x = (g ∘ g) ((g ∘ g) ((g ∘ g) ((g ∘ g) ((g ∘ g) x))))›</span>\n\n<span class=\"kn\">sublocale</span><span class=\"w\"> </span><span class=\"n\">bar</span><span class=\"w\"> </span><span class=\"n\">⊆</span><span class=\"w\"> </span><span class=\"n\">double</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"w\"> </span><span class=\"n\">bar</span><span class=\"w\"> </span><span class=\"s\">\"g ∘ g\"</span>\n<span class=\"w\">  </span><span class=\"n\">rewrites</span><span class=\"w\"> </span><span class=\"s\">\"double.f5 = bar_f5\"</span>\n<span class=\"w\">  </span><span class=\"n\">subgoal</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">auto</span><span class=\"w\"> </span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"n\">add</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">bar_fixed</span><span class=\"w\"> </span><span class=\"n\">bar_f5_def</span><span class=\"w\"> </span><span class=\"n\">foo.intro</span>\n<span class=\"w\">      </span><span class=\"n\">intro</span><span class=\"o\">!:</span><span class=\"w\"> </span><span class=\"n\">ext</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"n\">subgoal</span><span class=\"w\"> </span><span class=\"n\">―‹prove</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">rewrites›</span>\n<span class=\"w\">    </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">foo.f5_def</span><span class=\"o\">[</span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">bar</span><span class=\"w\"> </span><span class=\"s\">‹g o g›</span><span class=\"o\">]</span>\n<span class=\"w\">    </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">auto</span><span class=\"w\"> </span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"n\">add</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">bar_fixed</span><span class=\"w\"> </span><span class=\"n\">bar_f5_def</span><span class=\"w\"> </span><span class=\"n\">foo.intro</span>\n<span class=\"w\">      </span><span class=\"n\">intro</span><span class=\"o\">!:</span><span class=\"w\"> </span><span class=\"n\">ext</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"k\">done</span>\n\n<span class=\"k\">context</span><span class=\"w\"> </span><span class=\"n\">bar</span>\n<span class=\"k\">begin</span>\n<span class=\"kt\">term</span><span class=\"w\"> </span><span class=\"s\">\"f5\"</span>\n\n<span class=\"kt\">thm</span><span class=\"w\"> </span><span class=\"n\">double.f5_def</span>\n<span class=\"w\">  </span><span class=\"c\">(* Returns:</span>\n<span class=\"c\">  * \"double.f5\"</span>\n<span class=\"c\">  *   :: \"'b ⇒ 'b\" *)</span>\n<span class=\"k\">lemmas</span><span class=\"w\"> </span><span class=\"n\">test</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">double.f5_def</span>\n<span class=\"k\">end</span>\n\n<span class=\"kt\">thm</span><span class=\"w\"> </span><span class=\"n\">bar.test</span>\n</code></pre></div>",
        "id": 430654808,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1712001620
    }
]