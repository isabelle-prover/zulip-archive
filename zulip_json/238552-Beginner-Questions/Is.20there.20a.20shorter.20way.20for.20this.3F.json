[
    {
        "content": "<p>Is there a shorter way to arrive at the induction here?</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">blubb</span><span class=\"o\">:</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"kp\">assumes</span><span class=\"w\"> </span><span class=\"s\">\"∀i ≤ card S + 1. ∀i' ≤ card S + 1.</span>\n<span class=\"s\">          i ≠ i' ⟶ (f::nat⇒'a) i ≠ f i'\"</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"kp\">shows</span><span class=\"w\"> </span><span class=\"s\">\"∀n ≤ card S + 1. n ≤ card (⋃i≤n. {f i})\"</span><span class=\"w\"></span>\n<span class=\"k\">proof</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">rule</span><span class=\"w\"> </span><span class=\"n\">allI</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">rule</span><span class=\"w\"> </span><span class=\"n\">impI</span><span class=\"o\">)</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">fix</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"s\">\"n ≤ card S + 1 ⟹ n ≤ card (⋃i≤n. {f i})\"</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">proof</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">induction</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"o\">)</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"ow\">...</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Something like <code>proof (rule allI, rule impI, induction)</code> or <code>proof (rule allI, rule impI, induction n)</code> does not work and I can see why. <br>\nMaybe it's not really important to save two lines here but I just wanted to check.</p>",
        "id": 305017747,
        "sender_full_name": "waynee95",
        "timestamp": 1666204363
    },
    {
        "content": "<p>Theoretically, <code>induct_tac</code> might work</p>",
        "id": 305018512,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1666204682
    },
    {
        "content": "<p>otherwise, rephrase your theorem by removing the <code>∀</code></p>",
        "id": 305018630,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1666204722
    },
    {
        "content": "<p><code>induct_tac</code> did something but not something right. </p>\n<p>But rephrasing the theorem by removing the quantifier works... </p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">blubb</span><span class=\"o\">:</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"kp\">assumes</span><span class=\"w\"> </span><span class=\"s\">\"∀i ≤ card S + 1. ∀i' ≤ card S + 1.</span>\n<span class=\"s\">          i ≠ i' ⟶ (f::nat⇒'a) i ≠ f i'\"</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"kp\">shows</span><span class=\"w\"> </span><span class=\"s\">\"n ≤ card S + 1 ⟹ n ≤ card (⋃i≤n. {f i})\"</span><span class=\"w\"></span>\n<span class=\"k\">proof</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">induction</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"o\">)</span><span class=\"w\"></span>\n</code></pre></div>\n<p>well that was easier than I expected whoops</p>",
        "id": 305018951,
        "sender_full_name": "waynee95",
        "timestamp": 1666204863
    }
]