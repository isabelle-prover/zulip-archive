[
    {
        "content": "<p>Specifically: Given an n-ary relation R \\subseteq W^n and a set X subseteq W. I want the closure of X generated from X in R. i.e. the smallest set X' such that X \\subseteq X' and for all x1,...,xn, if x1 in X' and (x1,...,xn) in R, then all of x2,...,xn are in X'. Is there already a canonical way to obtain this set?</p>",
        "id": 472897515,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1727357356
    },
    {
        "content": "<p>If no obvious existing things, I will just do inductive relation.</p>",
        "id": 472897575,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1727357375
    },
    {
        "content": "<p>Isn't that just <code>‹{(a,a). a ∈X} × R›</code>?</p>",
        "id": 472902009,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1727358603
    },
    {
        "content": "<p>up to that giving <code>(x1, (x2, ..., xn))</code></p>",
        "id": 472902145,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1727358641
    },
    {
        "content": "<p>I am afraid I do not get it. Why does the closure condition hold? What I want is an \"underlying set for the reflexive and transitive closure\". If (x1,...,xn) in R and x1 in X', and if for xn we have (xn,v1,...,v_n-1) in R, then we include all the v's into X'. The product set is not even a subset of W (I am not searching for a subset of W^n).</p>",
        "id": 472913513,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1727361675
    },
    {
        "content": "<p>When n=2, this is the transitive closure of R over all elements in X right?</p>",
        "id": 472914795,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1727362057
    },
    {
        "content": "<p>This is what I understand from your description</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">context</span>\n<span class=\"w\">  </span><span class=\"kp\">fixes</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">‹(('a × 'a × 'a) × ('a × 'a × 'a)) set›</span><span class=\"w\"> </span><span class=\"kp\">and</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">‹'a set›</span>\n<span class=\"k\">begin</span>\n\n<span class=\"k\">definition</span><span class=\"w\"> </span><span class=\"n\">my_rel</span><span class=\"w\"> </span><span class=\"kp\">where</span>\n<span class=\"w\">  </span><span class=\"s\">‹my_rel = {(a,e). ∃b c d e f. ((a, b, c), (d, e, f)) ∈ R} ∪ {(a,f). ∃b c d e. ((a, b, c), (d, e, f)) ∈ R}›</span>\n\n<span class=\"k\">definition</span><span class=\"w\"> </span><span class=\"n\">my_set</span><span class=\"w\"> </span><span class=\"kp\">where</span>\n<span class=\"w\"> </span><span class=\"s\">‹my_set = my_rel⇧*›</span>\n\n<span class=\"kn\">lemma</span>\n<span class=\"w\">  </span><span class=\"kp\">assumes</span><span class=\"w\"> </span><span class=\"s\">‹x1 ∈ X›</span><span class=\"w\"> </span><span class=\"kp\">and</span><span class=\"w\"> </span><span class=\"s\">‹((x1, x2,x3), (v1, v2, v3)) ∈ R›</span>\n<span class=\"w\">  </span><span class=\"kp\">shows</span><span class=\"w\"> </span><span class=\"s\">‹(x1, v2) ∈ my_set›</span>\n<span class=\"w\">  </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">assms</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">fastforce</span><span class=\"w\"> </span><span class=\"n\">simp</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">my_set_def</span><span class=\"w\"> </span><span class=\"n\">my_rel_def</span><span class=\"o\">)</span>\n<span class=\"k\">end</span>\n</code></pre></div>",
        "id": 472917849,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1727362948
    },
    {
        "content": "<p>Basically you are reinterpreting you predicate R as binary relation where every reachable tuple is reachable in your binary relation (<code>my_rel</code>) and then you do the transitive closure</p>",
        "id": 472918083,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1727363013
    },
    {
        "content": "<p>I have never seen such concept before</p>",
        "id": 472918223,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1727363043
    },
    {
        "content": "<p>The R :: ‹(('a × 'a × 'a) × ('a × 'a × 'a)) set› seems to be a binary relation on tuples. Is this \"R\" already and re-interpretation? Sorry for my poor description if it is confusing. When n = 2, yes, it is the underlying set of the transitive closure (I will not bother with extending the relation in a proper way, but just want to get the \"reachable points\" from a n-ary predicate, that is why I emphasise \"underlying set\"). But for R :: ‹(('a × 'a × 'a) × ('a × 'a × 'a)) set›, it seems like R is already a binary relation on tuples, not an arbitrary relation. If this is my misunderstanding and this R is intended to be a 6-ary predicate instead, I still need some hints to get it.</p>",
        "id": 472920699,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1727363775
    },
    {
        "content": "<p>I do not intend to make \"{(a,e). ∃b c d e f. ((a, b, c), (d, e, f)) ∈ R}\" if R is a 3-ary relation: <br>\nIn the case we have (a,b,c) in R and (b,c,e) in R, than yes, e can be reached from a. But (a,b,c) and (d,e,f) are not connected, so I do not want (a,e) to be included in the closure.</p>",
        "id": 472921473,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1727364031
    },
    {
        "content": "<p>So:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">context</span>\n<span class=\"w\">  </span><span class=\"kp\">fixes</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">‹('a × 'a × 'a × 'a × 'a × 'a) set›</span><span class=\"w\"> </span><span class=\"kp\">and</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">‹'a set›</span>\n<span class=\"k\">begin</span>\n\n<span class=\"k\">definition</span><span class=\"w\"> </span><span class=\"n\">my_rel</span><span class=\"w\"> </span><span class=\"kp\">where</span>\n<span class=\"w\">  </span><span class=\"s\">‹my_rel = {(a,e). ∃b c d e f. (a, b, c, d, e, f) ∈ R} ∪</span>\n<span class=\"s\">            {(a,c). ∃b   d e f. (a, b, c, d, e, f) ∈ R} ∪</span>\n<span class=\"s\">            {(a,d). ∃b c   e f. (a, b, c, d, e, f) ∈ R} ∪</span>\n<span class=\"s\">            {(a,e). ∃b c d   f. (a, b, c, d, e, f) ∈ R} ∪</span>\n<span class=\"s\">            {(a,f). ∃b c d e  . (a, b, c, d, e, f) ∈ R}›</span>\n\n<span class=\"k\">definition</span><span class=\"w\"> </span><span class=\"n\">my_set</span><span class=\"w\"> </span><span class=\"kp\">where</span>\n<span class=\"w\"> </span><span class=\"s\">‹my_set = my_rell⇧+`` X›</span>\n\n<span class=\"kn\">lemma</span>\n<span class=\"w\">  </span><span class=\"kp\">assumes</span><span class=\"w\"> </span><span class=\"s\">‹x1 ∈ X›</span><span class=\"w\"> </span><span class=\"kp\">and</span><span class=\"w\"> </span><span class=\"s\">‹(x1, x2,x3, v1, v2, v3) ∈ R›</span>\n<span class=\"w\">  </span><span class=\"kp\">shows</span><span class=\"w\"> </span><span class=\"s\">‹(v2) ∈ my_set›</span>\n<span class=\"w\">  </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">assms</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">auto</span><span class=\"w\"> </span><span class=\"n\">intro</span><span class=\"o\">!:</span><span class=\"w\"> </span><span class=\"n\">bexI</span><span class=\"o\">[</span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"o\">_</span><span class=\"w\"> </span><span class=\"n\">x1</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"n\">simp</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">my_set_def</span><span class=\"w\"> </span><span class=\"n\">my_rel_def</span><span class=\"w\"> </span><span class=\"n\">Image_iff</span><span class=\"o\">)</span>\n<span class=\"k\">end</span>\n</code></pre></div>",
        "id": 472923611,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1727364664
    },
    {
        "content": "<p>with proper usage of X now</p>",
        "id": 472924070,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1727364793
    },
    {
        "content": "<p>I think I see. A wise way to reuse instead of reinvent! I will check the details of the notational technology in your code when I encounter them! Many thanks!</p>",
        "id": 472924681,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1727364967
    },
    {
        "content": "<p>The most important for notation: control-click to see the definitions</p>",
        "id": 472924844,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1727365033
    },
    {
        "content": "<p>Thank you! I am told about this, and recently find it is not always possible, but I believe it will work in this case!</p>",
        "id": 472925272,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1727365170
    }
]