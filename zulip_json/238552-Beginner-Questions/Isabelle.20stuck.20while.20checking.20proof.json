[
    {
        "content": "<p>Context: I'm reading the book concrete semantics and trying to do the exercise 3.1</p>\n<p>Isabelle stuck trying to check the <code>apply(auto split:aexp.split)</code> command. Is this normal? Am I doing something wrong?</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">theory</span><span class=\"w\"> </span><span class=\"n\">chap3</span>\n<span class=\"kp\">imports</span><span class=\"w\"> </span><span class=\"n\">Main</span>\n<span class=\"k\">begin</span>\n\n<span class=\"k\">type_synonym</span><span class=\"w\"> </span><span class=\"n\">vname</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">string</span>\n<span class=\"k\">datatype</span><span class=\"w\"> </span><span class=\"n\">aexp</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"w\"> </span><span class=\"n\">int</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">V</span><span class=\"w\"> </span><span class=\"n\">vname</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Plus</span><span class=\"w\"> </span><span class=\"n\">aexp</span><span class=\"w\"> </span><span class=\"n\">aexp</span>\n<span class=\"k\">type_synonym</span><span class=\"w\"> </span><span class=\"n\">assignment</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"vname =&gt; int\"</span>\n\n<span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">aval</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"aexp =&gt; assignment =&gt; int\"</span><span class=\"w\"> </span><span class=\"kp\">where</span>\n<span class=\"s\">\"aval (N n) _ = n\"</span><span class=\"w\"> </span><span class=\"o\">|</span>\n<span class=\"s\">\"aval (V v) m = m v\"</span><span class=\"w\"> </span><span class=\"o\">|</span>\n<span class=\"s\">\"aval (Plus a1 a2) m = aval a1 m + aval a2 m\"</span>\n\n<span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">asimp_const</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"aexp =&gt; aexp\"</span><span class=\"w\"> </span><span class=\"kp\">where</span>\n<span class=\"s\">\"asimp_const (N n) = N n\"</span><span class=\"w\"> </span><span class=\"o\">|</span>\n<span class=\"s\">\"asimp_const (V v) = V v\"</span><span class=\"w\"> </span><span class=\"o\">|</span>\n<span class=\"s\">\"asimp_const (Plus a1 a2) =</span>\n<span class=\"s\">  (case (asimp_const a1, asimp_const a2) of</span>\n<span class=\"s\">     (N n1, N n2) =&gt; N (n1 + n2) |</span>\n<span class=\"s\">     (a1', a2') =&gt; Plus a1' a2'</span>\n<span class=\"s\">    )\"</span>\n\n<span class=\"n\">―‹optimized</span><span class=\"w\"> </span><span class=\"n\">plus</span><span class=\"w\"> </span><span class=\"n\">that</span><span class=\"w\"> </span><span class=\"n\">does</span><span class=\"w\"> </span><span class=\"kp\">constant</span><span class=\"w\"> </span><span class=\"n\">folding</span><span class=\"w\"> </span><span class=\"kp\">and</span><span class=\"w\"> </span><span class=\"n\">0</span><span class=\"w\"> </span><span class=\"n\">elim›</span>\n<span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">plus</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"aexp =&gt; aexp =&gt; aexp\"</span><span class=\"w\"> </span><span class=\"kp\">where</span>\n<span class=\"s\">\"plus (N i) (N j) = N (i + j)\"</span><span class=\"w\"> </span><span class=\"o\">|</span>\n<span class=\"s\">\"plus (N i) a = (if i = 0 then a else Plus (N i) a)\"</span><span class=\"w\"> </span><span class=\"o\">|</span>\n<span class=\"s\">\"plus a (N i) = (if i = 0 then a else Plus a (N i))\"</span><span class=\"w\"> </span><span class=\"o\">|</span>\n<span class=\"s\">\"plus a1 a2 = Plus a1 a2\"</span>\n\n<span class=\"kn\">theorem</span><span class=\"w\"> </span><span class=\"n\">plus_preserve_value_under_aval</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"aval (plus a1 a2) as = aval a1 as + aval a2 as\"</span>\n<span class=\"kp\">apply</span><span class=\"o\">(</span><span class=\"n\">induction</span><span class=\"w\"> </span><span class=\"n\">rule</span><span class=\"o\">:</span><span class=\"n\">plus.induct</span><span class=\"o\">)</span>\n<span class=\"kp\">apply</span><span class=\"o\">(</span><span class=\"n\">auto</span><span class=\"o\">)</span>\n<span class=\"k\">done</span>\n\n<span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">asimp</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"aexp =&gt; aexp\"</span><span class=\"w\"> </span><span class=\"kp\">where</span>\n<span class=\"s\">\"asimp (N n) = N n\"</span><span class=\"w\"> </span><span class=\"o\">|</span>\n<span class=\"s\">\"asimp (V v) = V v\"</span><span class=\"w\"> </span><span class=\"o\">|</span>\n<span class=\"s\">\"asimp (Plus a1 a2) = plus (asimp a1) (asimp a2)\"</span>\n\n<span class=\"kn\">theorem</span><span class=\"w\"> </span><span class=\"n\">asimp_preserve_value_under_aval</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"aval (asimp a) as = aval a as\"</span>\n<span class=\"kp\">apply</span><span class=\"o\">(</span><span class=\"n\">induction</span><span class=\"w\"> </span><span class=\"n\">rule</span><span class=\"o\">:</span><span class=\"n\">asimp.induct</span><span class=\"o\">)</span>\n<span class=\"kp\">apply</span><span class=\"o\">(</span><span class=\"n\">auto</span><span class=\"w\"> </span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"n\">add</span><span class=\"o\">:</span><span class=\"n\">plus_preserve_value_under_aval</span><span class=\"o\">)</span>\n<span class=\"k\">done</span>\n\n<span class=\"n\">―‹exercise</span><span class=\"w\"> </span><span class=\"n\">3.1›</span>\n<span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">optimal</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"aexp =&gt; bool\"</span><span class=\"w\"> </span><span class=\"kp\">where</span>\n<span class=\"s\">\"optimal (N n) = True\"</span><span class=\"w\"> </span><span class=\"o\">|</span>\n<span class=\"s\">\"optimal (V v) = True\"</span><span class=\"w\"> </span><span class=\"o\">|</span>\n<span class=\"s\">\"optimal (Plus a1 a2) =</span>\n<span class=\"s\">  (case (a1, a2) of</span>\n<span class=\"s\">     (N _, N _) =&gt; False |</span>\n<span class=\"s\">     _ =&gt; optimal a1 ∧ optimal a2)\"</span>\n\n<span class=\"kn\">theorem</span><span class=\"w\"> </span><span class=\"n\">asimp_const_optimality</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"optimal (asimp_const a)\"</span>\n<span class=\"kp\">apply</span><span class=\"o\">(</span><span class=\"n\">induction</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"o\">)</span>\n<span class=\"kp\">apply</span><span class=\"o\">(</span><span class=\"n\">auto</span><span class=\"w\"> </span><span class=\"n\">split</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">aexp.split</span><span class=\"o\">)</span>\n<span class=\"k\">done</span>\n\n<span class=\"n\">―‹exercise</span><span class=\"w\"> </span><span class=\"n\">3.2›</span>\n<span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">full_asimp</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"aexp =&gt; aexp\"</span><span class=\"w\"> </span><span class=\"kp\">where</span>\n<span class=\"s\">\"full_asimp (N n) = N n\"</span><span class=\"w\"> </span><span class=\"o\">|</span>\n<span class=\"s\">\"full_asimp (V v) = V v\"</span><span class=\"w\"> </span><span class=\"o\">|</span>\n<span class=\"s\">\"full_asimp (Plus a1 a2) = _\"</span>\n\n<span class=\"k\">end</span>\n</code></pre></div>",
        "id": 497244310,
        "sender_full_name": "Poscat",
        "timestamp": 1738489847
    },
    {
        "content": "<p>The polyml program is using 100% of one of my cores</p>",
        "id": 497244544,
        "sender_full_name": "Poscat",
        "timestamp": 1738490105
    },
    {
        "content": "<p>If I use this version of <code>optimal</code> that avoids a case expression</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">optimal</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"aexp =&gt; bool\"</span><span class=\"w\"> </span><span class=\"kp\">where</span>\n<span class=\"s\">\"optimal (N n) = True\"</span><span class=\"w\"> </span><span class=\"o\">|</span>\n<span class=\"s\">\"optimal (V v) = True\"</span><span class=\"w\"> </span><span class=\"o\">|</span>\n<span class=\"s\">\"optimal (Plus (N _) (N _)) = False\"</span><span class=\"w\"> </span><span class=\"o\">|</span>\n<span class=\"s\">\"optimal (Plus a1 a2) = (optimal a1 ∧ optimal a2)\"</span>\n</code></pre></div>\n<p>the proof goes through <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span> </p>\n<p>Why is that?</p>",
        "id": 497245106,
        "sender_full_name": "Poscat",
        "timestamp": 1738490682
    },
    {
        "content": "<p>Try</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">theorem</span><span class=\"w\"> </span><span class=\"n\">asimp_const_optimality</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"optimal (asimp_const a)\"</span>\n<span class=\"w\">  </span><span class=\"kp\">apply</span><span class=\"o\">(</span><span class=\"n\">induction</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"n\">supply</span><span class=\"o\">[[</span><span class=\"n\">simp_trace_new</span><span class=\"o\">]]</span>\n<span class=\"kp\">apply</span><span class=\"o\">(</span><span class=\"n\">auto</span><span class=\"w\"> </span><span class=\"n\">split</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">aexp.split</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>and see if you can guess what is happening</p>",
        "id": 497246680,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1738492298
    },
    {
        "content": "<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>Answer</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<p>This </p>\n<div class=\"codehilite\"><pre><span></span><code>optimal (Plus a1 a2) =\n  (case (a1, a2) of\n     (N _, N _) =&gt; False |\n     _ =&gt; optimal a1 ∧ optimal a2)\n</code></pre></div>\n<p>means that <code>optimal (Plus a b)</code> is rewritten to the case pattern. In turn, the <code>aexp.split</code> means that <code>a1</code> and <code>a2</code> are split over all possible constructors, including <code>Plus a1_1 a1_2</code>.</p>\n<p>The <code>`Plus a1_1 a1_2</code> is rewritten again to the case pattern. In turn, the <code>aexp.split</code> means that <code>a1_1</code> and <code>a2_2</code> are split over all possible constructors...</p>\n<p>And now you see the loop and you also see why the other definition does not lead to looping.</p>\n</div></div>",
        "id": 497246886,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1738492484
    }
]