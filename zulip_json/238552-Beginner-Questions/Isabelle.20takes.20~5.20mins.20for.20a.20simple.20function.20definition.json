[
    {
        "content": "<p>I have a function definition that is not recursive, but takes about five minutes to be processed (lose its purple background) on a relatively beefy machine. I already tried factoring it at the <code>Plus</code> <code>Plus</code> case. This is enough for the definition to be processed immediately, but I'd like to understand why Isabelle struggles with it so much and how in general I'd go about seeing where time is being spent. After five minutes, it also reports redundant equations and it is not clear to me why these are redundant.</p>\n<p>Definitions:</p>\n<div class=\"codehilite\"><pre><span></span><code>datatype aexp = N int | V string | Plus aexp aexp\n\nfun plus_full :: &quot;aexp ⇒ aexp ⇒ aexp&quot; where\n&quot;plus_full (N a) (N b) = N (a + b)&quot; |\n&quot;plus_full (Plus p (N a)) (N b) = Plus p (N (a + b))&quot; |\n&quot;plus_full (N b) (Plus p (N a)) = Plus p (N (a + b))&quot; |\n&quot;plus_full (Plus p (N a)) (Plus q (N b)) = Plus (Plus p q) (N (a + b))&quot; |\n&quot;plus_full (Plus p (N a)) (Plus (N b) q) = Plus (Plus p q) (N (a + b))&quot; |\n&quot;plus_full (Plus (N a) p) (Plus (N b) q) = Plus (Plus p q) (N (a + b))&quot; |\n&quot;plus_full (Plus (N a) p) (Plus q (N b)) = Plus (Plus p q) (N (a + b))&quot; |\n&quot;plus_full (Plus p (N a)) q = Plus (Plus p q) (N a)&quot; |\n&quot;plus_full q (Plus p (N a)) = Plus (Plus p q) (N a)&quot; |\n&quot;plus_full p (N i) = (if i = 0 then p else Plus p (N i))&quot; |\n&quot;plus_full (N i) p = (if i = 0 then p else Plus p (N i))&quot; |\n&quot;plus_full p q = (Plus p q)&quot;\n</code></pre></div>\n<p>Redundant equations after five minutes:</p>\n<div class=\"codehilite\"><pre><span></span><code>Ignoring duplicate rewrite rule:\nplus_full (Plus (V ?vc1) (V ?vd1)) (Plus ?v1 (V ?vb1)) ≡\nPlus (Plus (V ?vc1) (V ?vd1)) (Plus ?v1 (V ?vb1))\nIgnoring duplicate rewrite rule:\nplus_full (Plus (Plus ?vc1 ?ve1) (V ?vd1)) (Plus ?v1 (V ?vb1)) ≡\nPlus (Plus (Plus ?vc1 ?ve1) (V ?vd1)) (Plus ?v1 (V ?vb1))\nIgnoring duplicate rewrite rule:\nplus_full (Plus (V ?vc1) (Plus ?vd1 ?ve1)) (Plus ?v1 (V ?vb1)) ≡\nPlus (Plus (V ?vc1) (Plus ?vd1 ?ve1)) (Plus ?v1 (V ?vb1))\nIgnoring duplicate rewrite rule:\nplus_full (Plus (Plus ?vc1 ?vf1) (Plus ?vd1 ?ve1)) (Plus ?v1 (V ?vb1)) ≡\nPlus (Plus (Plus ?vc1 ?vf1) (Plus ?vd1 ?ve1)) (Plus ?v1 (V ?vb1))\nIgnoring duplicate rewrite rule:\nplus_full (Plus ?v1 (V ?vd1)) (Plus (V ?va1) (V ?vb1)) ≡\nPlus (Plus ?v1 (V ?vd1)) (Plus (V ?va1) (V ?vb1))\nIgnoring duplicate rewrite rule:\nplus_full (Plus ?v1 (Plus ?vd1 ?ve1)) (Plus (V ?va1) (V ?vb1)) ≡\nPlus (Plus ?v1 (Plus ?vd1 ?ve1)) (Plus (V ?va1) (V ?vb1))\n</code></pre></div>\n<p>Thanks in advance for the help!</p>",
        "id": 234142265,
        "sender_full_name": "Mistral Contrastin",
        "timestamp": 1618227229
    },
    {
        "content": "<p>Internally the function packages deduplicates patterns (like <code>plus_full (N i) p</code> and <code>plus p q</code> are duplicates) to generate the right definitions and simplification rules.</p>",
        "id": 234149290,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1618230942
    },
    {
        "content": "<p>The easiest solution in your case  is to do the case distinction using <code>case ... of .. \\&lt;Rightarrow&gt; ...</code></p>",
        "id": 234149559,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1618231070
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"233198\">@Mathias Fleury</span> aha, thanks! That explains the redundant equations and it makes sense. It is unfortunate that the definition of the function package leaks its implementation in that way. I might go as far as to say that it is a bug.</p>\n<p>Is that also somehow related to the definition taking a long time to be processed?</p>",
        "id": 234150114,
        "sender_full_name": "Mistral Contrastin",
        "timestamp": 1618231314
    },
    {
        "content": "<p>You really need to do the disambiguation of the patterns, so not really a bug. Imagine that you would not do that and simply take the rules as simp rules. Then you could define the following:</p>\n<div class=\"codehilite\"><pre><span></span><code>fun f where\n&quot;f 0 = 0&quot;\n&quot;f _ = 1&quot;\n</code></pre></div>\n<p>Without further work on the equations, both can be applied to <code>f n </code> but you get different results depending on which equation you use, which is obviously wrong.</p>",
        "id": 234150843,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1618231584
    },
    {
        "content": "<p>Anyway the disambiguation is the reason why the definitions takes such a long time.</p>",
        "id": 234151045,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1618231670
    },
    {
        "content": "<p>I guess I have the wrong mindset. I figured the second equation on <code>f</code> would implicitly be on <code>Suc n</code> due to the existence of the first equation. I guess such fall through reasoning is not appropriate in Isabelle? Is that right? If that's the case, I'd have expected your definition of <code>f</code> to be rejected due to patterns not being orthogonal.</p>",
        "id": 234152763,
        "sender_full_name": "Mistral Contrastin",
        "timestamp": 1618232354
    },
    {
        "content": "<p>Yeah indeed the second pattern becomes Suc:</p>\n<div class=\"codehilite\"><pre><span></span><code>fun f :: ‹nat ⇒ nat› where\n&quot;f 0 = 0&quot; |\n&quot;f _ = 1&quot;\nthm f.simps\n(*  f 0 = 0\n  f (Suc ?v) = 1*)\n</code></pre></div>",
        "id": 234153204,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1618232514
    },
    {
        "content": "<p>My point is that this transformation from <code>f _ = 1</code> to <code>f (Suc _) = 1</code> becomes slow if you have too many patterns</p>",
        "id": 234153329,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1618232558
    },
    {
        "content": "<p>(but it will eventually succeed as your large example illustrates)</p>",
        "id": 234153447,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1618232599
    },
    {
        "content": "<p>Perfect, I think I understand now. Thanks a lot for your explanations!</p>",
        "id": 234153808,
        "sender_full_name": "Mistral Contrastin",
        "timestamp": 1618232755
    },
    {
        "content": "<p>Maybe at some point there will be someone who is motivated enough to investigate whether the disambiguation can be sped up :)</p>",
        "id": 234198926,
        "sender_full_name": "Lukas Stevens",
        "timestamp": 1618248790
    },
    {
        "content": "<p>If I recall correctly, if you use <code>function</code> instead of <code>fun</code>, you can have overlapping patterns and will be required to prove that whenever you have an overlap, you have the same result on the right-hand side. Unfortunately, you will be unable to do so when recursion is involved, so it is not too helpful in practice.</p>",
        "id": 234300618,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1618309215
    }
]