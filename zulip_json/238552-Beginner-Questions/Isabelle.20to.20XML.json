[
    {
        "content": "<p>Hi, I want to write a tool that can consume, manipulate, and produce THY files. For instance, a tool that can tell me which lemmas in a THY file are unused. How might I do this? It would be ideal if there were a tool that could export/import THY files to/from XML files, as I know how to parse XML. Does that exist? Thanks.</p>",
        "id": 390122236,
        "sender_full_name": "John Wickerson",
        "timestamp": 1694337533
    },
    {
        "content": "<p>Hmm, converting to and from a particular file format simply because you know how to parse it doesn’t seem to be a good idea. Wouldn’t it be better to parse theory files directly?</p>",
        "id": 390165920,
        "sender_full_name": "Wolfgang Jeltsch",
        "timestamp": 1694366959
    },
    {
        "content": "<p>Let me generalise my question then: how can I access and modify the AST of a THY file? I don’t want to build my own parser/pretty-printer for THY files, as that would be reinventing the wheel.</p>",
        "id": 390469219,
        "sender_full_name": "John Wickerson",
        "timestamp": 1694507089
    },
    {
        "content": "<p>That’s a good general question. <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span> Unfortunately, I’m not deep enough into Isabelle that I could satisfyingly answer this question; others here might be able to do so. That said, my understanding is that there is some ML code in the core part of Isabelle for creating and modifying abstract syntax trees for _inner_ syntax (terms and types), but _outer_ syntax fragments, the parts _around_ terms and types, are not really parsed but rather processed directly using ML code, with _some_ additional foundation using finite state machines.</p>",
        "id": 390533878,
        "sender_full_name": "Wolfgang Jeltsch",
        "timestamp": 1694529505
    },
    {
        "content": "<p>I'm looking for the same thing as you, also as a beginner. I noticed that there is a SideKick panel in jEdit IDE showing the structure of the file. But I haven't figured out how to call SideKick parser  from the command line.</p>",
        "id": 391863662,
        "sender_full_name": "Xiaokun Luan",
        "timestamp": 1695113941
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"648449\">John Wickerson</span> <a href=\"#narrow/stream/238552-Beginner-Questions/topic/Isabelle.20to.20XML/near/390469219\">said</a>:</p>\n<blockquote>\n<p>Let me generalise my question then: how can I access and modify the AST of a THY file? I don’t want to build my own parser/pretty-printer for THY files, as that would be reinventing the wheel.</p>\n</blockquote>\n<p>Dear John,</p>\n<p>I noticed you're keen on writing a tool for identifying unused lemmas in a THY file. While the idea is great, I believe using the AST of a THY file might not yield the results you're hoping for.</p>\n<p>For instance, if you prove a lemma named \"foo\" and store it in the default simp set of the simp method in a THY file. Determining whether \"foo\" has been used or not becomes challenging when we rely solely on the AST of the THY file without running Isabelle.</p>\n<p>Just wanted to share this observation to potentially save you some time and effort. Let me know if you have any questions or if there's any other way I can assist!</p>\n<p>Best wishes,<br>\nYutaka</p>",
        "id": 392227360,
        "sender_full_name": "Yutaka Nagashima",
        "timestamp": 1695258001
    },
    {
        "content": "<p>If you are just interested in finding unused theorems, then you can use <code>unused_thms</code></p>",
        "id": 392297555,
        "sender_full_name": "Lukas Stevens",
        "timestamp": 1695293929
    },
    {
        "content": "<p>More generally, while it is certainly possible to obtain a syntax tree of the outer syntax, you can't really parse inner syntax of Isabelle without running Isabelle itself. This is due to the complexity of inner syntax that allows you to do things like parse translations, adhoc overloading, etc.</p>",
        "id": 392297864,
        "sender_full_name": "Lukas Stevens",
        "timestamp": 1695294050
    },
    {
        "content": "<p>There is a <a href=\"https://github.com/isabelle-prover/isabelle-linter\">linter</a> that works with the AST of the outer syntax. Perhaps <span class=\"user-mention\" data-user-id=\"348400\">@Fabian Huch</span> can point you to the file where the AST of the outer syntax is obtained.</p>",
        "id": 392298168,
        "sender_full_name": "Lukas Stevens",
        "timestamp": 1695294189
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"233155\">Lukas Stevens</span> <a href=\"#narrow/stream/238552-Beginner-Questions/topic/Isabelle.20to.20XML/near/392298168\">said</a>:</p>\n<blockquote>\n<p>There is a <a href=\"https://github.com/isabelle-prover/isabelle-linter\">linter</a> that works with the AST of the outer syntax. Perhaps <span class=\"user-mention silent\" data-user-id=\"348400\">Fabian Huch</span> can point you to the file where the AST of the outer syntax is obtained.</p>\n</blockquote>\n<p>We should have such terrific tools highlighted somewhere they are easily overlooked and underutilised...</p>",
        "id": 392301683,
        "sender_full_name": "Wenda Li",
        "timestamp": 1695295518
    },
    {
        "content": "<p>With NixOS, you just do <code>isabelle.withComponents (components: [ components.linter ])</code> :D</p>",
        "id": 392304128,
        "sender_full_name": "Lukas Stevens",
        "timestamp": 1695296413
    },
    {
        "content": "<p>We could add it to <a href=\"http://isabelle.systems\">isabelle.systems</a></p>",
        "id": 392304372,
        "sender_full_name": "Lukas Stevens",
        "timestamp": 1695296516
    },
    {
        "content": "<p>It is already at <a href=\"https://isabelle.systems/addons\">https://isabelle.systems/addons</a></p>",
        "id": 392304522,
        "sender_full_name": "Lukas Stevens",
        "timestamp": 1695296558
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"233155\">Lukas Stevens</span> <a href=\"#narrow/stream/238552-Beginner-Questions/topic/Isabelle.20to.20XML/near/392304372\">said</a>:</p>\n<blockquote>\n<p>We could add it to <a href=\"http://isabelle.systems\">isabelle.systems</a></p>\n</blockquote>\n<p>This website is awesome!</p>",
        "id": 392305458,
        "sender_full_name": "Wenda Li",
        "timestamp": 1695296873
    },
    {
        "content": "<p>There is no \"Isabelle AST\" for outer syntax, at least not in the classical sense. The reason for this is that defining syntax in Isabelle is a user-space operation, i.e., no static syntax tree can even exist. The abstraction that we have are categorized tokens, i.e., you can statically tokenize Isabelle theories, where the token information yields you what kind it is.<br>\nIf you want more than that, you will want to work with Isabelle code that has already been parsed by the actual syntax parsers (i.e., you need to process the content in Isabelle first). Then, you get the tokens with semantic markup -- syntax trees still don't exist as they don't exist in the parsing language. But the markup allows you to look at individual command spans and analyze tokens, defined entities, etc. <br>\nYou could export that markup into xml (in fact, the representation is in xml internally), but you really want to use the machinery inside Isabelle -- otherwise you'll have to reinvent everything rather than just using a faithful implementation. You can do that either in Isabelle/Scala or Isabelle/ML.</p>",
        "id": 392309040,
        "sender_full_name": "Fabian Huch",
        "timestamp": 1695298250
    },
    {
        "content": "<p>The Isabelle linter does not actually parse Isabelle: Rather, it parsers the anti-patterns that people should avoid.</p>",
        "id": 392309387,
        "sender_full_name": "Fabian Huch",
        "timestamp": 1695298407
    },
    {
        "content": "<p>Finally, the actual problem of finding unused theorems can not be solved on a syntactical level as there are many ways in which theorems can be used that do not involve mentioning its name (e.g., <code>fact</code>, implicit <code>rule</code>, <code>simp</code>set or other lemma collections, ...)</p>",
        "id": 392310244,
        "sender_full_name": "Fabian Huch",
        "timestamp": 1695298786
    },
    {
        "content": "<p>If you insist on still trying to have static syntax trees of Isabelle, I can point you to the work of Yiannos Stathopolous: He built an Isabelle/Isar parser (at least on the Pure level IIRC) a while ago, though maintenance is an issue, and  I'm not sure the code is publicly available (you can ask him though).</p>",
        "id": 392310853,
        "sender_full_name": "Fabian Huch",
        "timestamp": 1695299030
    }
]