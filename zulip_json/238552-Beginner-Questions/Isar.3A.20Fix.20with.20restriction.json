[
    {
        "content": "<p>Hello,</p>\n<p>tl;dr: I'd like to know what the best/correct way is to fix a variable in Isar with some restrictions. </p>\n<p>Long: <br>\nFor a bigger proof I need a fact of the form <code>∀x ∈ xs. predicate x</code> and I can show this fact in the bigger context  with <code>fix x</code> and <code>assume \"x ∈ xs\"</code>.  <br>\nObviously, if the fact is proven on the top-level, the goal of the surrounding context can not be proven due to the additional <code>assume</code>. If the fact is proven in an own block instead, it becomes <code>?x2 ∈ xs ⟹ ∀x∈ xs. predicate x</code> which is not what I expected it to be. <br>\nThus, it seems necessary to fix the <code>x</code> in a way which restricts it to an element of <code>xs</code> , but which does not rely on an <code>assume</code>.  Is there such a way and how would it work?</p>",
        "id": 221752526,
        "sender_full_name": "Florian Sextl",
        "timestamp": 1609929104
    },
    {
        "content": "<p>Is opening a new scope is sufficient for your purpose?</p>\n<div class=\"codehilite\"><pre><span></span><code> proof -\n     ...\n     have H: &quot;∀x ∈ xs. predicate x&quot;\n     proof\n        for x\n        assume &quot;x∈ xs&quot;\n        show &quot;predicate x&quot;\n            sorry\n      qed\n     .... [where you can use H]...\n</code></pre></div>",
        "id": 221753086,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1609929472
    },
    {
        "content": "<p>I think the real point here is to use the introduction rule <code>ballI</code>, which is what <code>proof</code> does.</p>",
        "id": 221753139,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1609929502
    },
    {
        "content": "<p>Ahhhh... good point.</p>",
        "id": 221753522,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1609929817
    },
    {
        "content": "<p>Thanks for your answers and insights. I'm not certain how I could directly apply ballI to fit my use case but the indirection of a nested proof was enough to solve the problem. :D</p>",
        "id": 221754086,
        "sender_full_name": "Florian Sextl",
        "timestamp": 1609930251
    },
    {
        "content": "<p><code>proof</code> is the same as <code>proof standard</code>, which in that case means  <code>proof (rule ballI)</code></p>",
        "id": 221754167,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1609930328
    },
    {
        "content": "<p>It's good to remember that HOL quantifiers are opaque to Isar. They are just functions like any other function.</p>",
        "id": 221754448,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1609930590
    },
    {
        "content": "<p>Yes, certainly. The thing I struggled here most was how to structure my proof :D Especially, because this would influence my choice on how to formalise some underlying property. With this out of the way, I'm positive that all else follows easily. Therefore, thanks again. <br>\n(Update: all followed more or less easily. Now on to the really interesting stuff <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> )</p>",
        "id": 221754706,
        "sender_full_name": "Florian Sextl",
        "timestamp": 1609930798
    },
    {
        "content": "<p>If this was the biggest problem in your formalisation project, you are a lucky person indeed. <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 221755145,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1609931063
    }
]