[
    {
        "content": "<p><strong>Edit: That is all my bad, I discovered later that I missed a case when doing an inductive definition. It really confused me for quite a while, so I keep the post here for information that \"what happens if you miss a pattern in an inductive definition\"</strong> But I believe my problem is solved now.</p>\n<p>I define some formula syntax in Isabelle, and it generates a bunch of lemmas which give a contradition. I do not have any clue what is wrong now. May I please ask for hints?</p>\n<p>I defined classical formula syntax by:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">datatype</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n n-Type\">'m</span><span class=\"o\">,</span><span class=\"n n-Type\">'p</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">cform</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">cVAR</span><span class=\"w\"> </span><span class=\"s\">\"'p\"</span>\n<span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">cFALSE</span>\n<span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">cDISJ</span><span class=\"w\"> </span><span class=\"s\">\"('m,'p) cform\"</span><span class=\"w\"> </span><span class=\"s\">\"('m,'p) cform\"</span>\n<span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">cNOT</span><span class=\"w\"> </span><span class=\"s\">\"('m,'p) cform\"</span>\n<span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">cDIAM</span><span class=\"w\"> </span><span class=\"n n-Type\">'m</span><span class=\"w\"> </span><span class=\"s\">\"(('m,'p) cform) list\"</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"s\">\"♢_ _\"</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">0</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">0</span><span class=\"o\">])</span>\n</code></pre></div>\n<p>And I defined a function \"mops\", collecting modal operators from formulas:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">mops_cform</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"('m,'p) cform ⇒ 'm set\"</span><span class=\"w\"> </span><span class=\"kp\">where</span>\n<span class=\"w\">  </span><span class=\"s\">\"mops_cform (cFALSE) = {}\"</span>\n<span class=\"o\">|</span><span class=\"w\"> </span><span class=\"s\">\"mops_cform (cVAR p) = {}\"</span>\n<span class=\"o\">|</span><span class=\"w\"> </span><span class=\"s\">\"mops_cform (cDISJ f1 f2) = mops_cform f1 ∪ mops_cform f2\"</span>\n<span class=\"o\">|</span><span class=\"w\"> </span><span class=\"s\">\"mops_cform (cDIAM m fl) =</span>\n<span class=\"s\">   {m} ∪ ⋃ (list.set (list.map mops_cform fl))\"</span>\n</code></pre></div>",
        "id": 477770118,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1729310498
    },
    {
        "content": "<p>Now I tried:<br>\nlemma foo:<br>\nFalse<br>\n  sledgehammer<br>\n  by (metis cform.distinct(12) cform.distinct(15) cform.distinct(5) cform.simps(24) mops_cform.cases)</p>",
        "id": 477770498,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1729310767
    },
    {
        "content": "<p><strong>Reason</strong>: I sorried the functionality proof and the termination proof for mops_cform, so I did not realize that I missed the negation clause for mops. It then gives an induction principle that proves truth from less cases than required, and hence the contradiction.</p>",
        "id": 477770723,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1729311033
    }
]