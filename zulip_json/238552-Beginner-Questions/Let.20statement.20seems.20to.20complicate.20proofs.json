[
    {
        "content": "<p>Hello, I like to simplify bigger definitions with a \"let\" statement to make them more readable. However, I noticed that this does not behave like a simple abbreviation. Rather it internally turns my function into a mess of lambda function applications which often complicates proofs. Because of this I started to use abbreviations for this purpose instead, which is uglier.</p>\n<p>Is this just an issue with my approach or is this intetional? What is the actual use case for let statements?</p>",
        "id": 479727375,
        "sender_full_name": "Maximilian Vollath",
        "timestamp": 1730307712
    },
    {
        "content": "<p>I don't know if this is the historic reason, but if <code>let</code> would be an abbreviation rather than a constant, you could not use it well for code generation</p>",
        "id": 479730723,
        "sender_full_name": "Fabian Huch",
        "timestamp": 1730308787
    },
    {
        "content": "<p>But if you are too bothered, you can write your own syntax translation for an abbreviated let <span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span></p>",
        "id": 479732030,
        "sender_full_name": "Fabian Huch",
        "timestamp": 1730309236
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">definition</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"w\"> </span><span class=\"kp\">where</span>\n<span class=\"n\">X_internal_def</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"X = (let a = 0::nat  in undefined a)\"</span>\n\n<span class=\"k\">lemmas</span><span class=\"w\"> </span><span class=\"n\">X_def</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">X_internal_def</span><span class=\"o\">[</span><span class=\"n\">unfolded</span><span class=\"w\"> </span><span class=\"n\">Let_def</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 479735717,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1730310662
    },
    {
        "content": "<p>although I am not sure why there would be a \"mess of lambda function\" in the proof, because you can simply use Let_defâ€¦</p>",
        "id": 479735928,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1730310753
    },
    {
        "content": "<p>Also unfolding lets in general can make you term much bigger</p>",
        "id": 479735985,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1730310775
    },
    {
        "content": "<p>Thank you! I actually didn't know about just unfolding the lemma.</p>",
        "id": 479816053,
        "sender_full_name": "Maximilian Vollath",
        "timestamp": 1730358245
    }
]