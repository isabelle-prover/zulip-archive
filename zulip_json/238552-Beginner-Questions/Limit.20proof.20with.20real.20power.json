[
    {
        "content": "<p>Hi, </p>\n<p>I would like to prove that for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo>&gt;</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">a&gt;0</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&gt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span> :</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><munder><mo><mi>lim</mi><mo>⁡</mo></mo><mrow><mi>x</mi><mo>→</mo><msup><mn>0</mn><mo>+</mo></msup></mrow></munder><msup><mi>a</mi><mi>x</mi></msup><mo>=</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">\\lim\\limits_{x \\rightarrow 0^+} a^x = 1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.472257em;vertical-align:-0.757865em;\"></span><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.69444em;\"><span style=\"top:-2.342135em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">x</span><span class=\"mrel mtight\">→</span><span class=\"mord mtight\"><span class=\"mord mtight\">0</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7026642857142857em;\"><span style=\"top:-2.786em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mbin mtight\">+</span></span></span></span></span></span></span></span></span></span></span><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span><span class=\"mop\">lim</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.757865em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7143919999999999em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">x</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span></span></p>\n<p>In Isabelle, this might look something like:</p>\n<div class=\"codehilite\"><pre><span></span><code>lemma\n  fixes a::real\n  assumes &quot;a &gt; 0&quot;\n  shows &quot;((λx. a ^ x) ⤏ 1) F&quot;\n</code></pre></div>\n<p>what filter should I used for 'tends to zero from above' and is there a real power function that makes x real? In the above currently, Isabelle is inferring nat as the type for x.</p>\n<p>This is part of a personal study to see how easy it is to do some basic limit problems in a nice and accessible way. Limit problems such as this  <a href=\"https://www.youtube.com/watch?v=RoqErc0NKmE\">one</a> on Youtube.</p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"RoqErc0NKmE\" href=\"https://www.youtube.com/watch?v=RoqErc0NKmE\"><img src=\"https://i.ytimg.com/vi/RoqErc0NKmE/default.jpg\"></a></div><p>Cheers</p>\n<p>Mark</p>",
        "id": 221623160,
        "sender_full_name": "Mark Wassell",
        "timestamp": 1609835784
    },
    {
        "content": "<p>sorry, wrong thread</p>",
        "id": 221626108,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1609838309
    },
    {
        "content": "<p>Funny you should ask, if you import <code>HOL-Real_Asymp.Real_Asymp</code>, this goes through with <code>using assms by real_asymp</code>. <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 221635705,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1609845841
    },
    {
        "content": "<p>And as for your other questions, <code>x powr y</code> is the power function on real numbers (caveat: <code>0 ^ y = 0</code> for any <code>y</code> and it's undefined for <code>x &lt; 0</code>) or complex numbers (same caveat for <code>x = 0</code>, branch cut for negative real <code>y</code> as usual).</p>\n<p>The <code>F</code> in your case should simply be <code>at_right 0</code>. This is an abbreviation for <code>at 0 within {0&lt;..}</code>, and <code>at x within A</code> is basically the neighbourhood filter <code>nhds x</code> restricted to <code>A - {x}</code>, i.e. you can approach <code>x</code> from any ‘path’ within <code>A-{x}</code>.</p>\n<p>You can even prove something stronger, namely <code>filterlim (λx. a powr x) (at_right 1) (at_right 0)</code>.</p>",
        "id": 221636071,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1609846091
    },
    {
        "content": "<p>Correction: You need a case distinction over <code>a &lt; 1</code>, <code>a = 1</code> and <code>a &gt; 1</code> though because <code>real_asymp</code> works by computing series expansions and these look a bit different in each of these cases: without the case distinction, <code>real_asymp</code> will tell you that it was unable to determine the sign of <code>ln a</code> if you run it with <code>real_asymp (verbose)</code>.</p>\n<p>There is also the diagnostic tool <code>real_limit</code> with which you can find the limit of an expression:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">context</span>\n  <span class=\"kp\">fixes</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">::</span> <span class=\"n\">real</span>\n  <span class=\"kp\">assumes</span> <span class=\"n\">a</span><span class=\"o\">:</span> <span class=\"s\">\"a &gt; 0\"</span> <span class=\"s\">\"a &lt; 1\"</span> <span class=\"kp\">and</span> <span class=\"n\">b</span><span class=\"o\">:</span> <span class=\"s\">\"b &gt; 1\"</span>\n<span class=\"k\">begin</span>\n\n<span class=\"n\">real_limit</span> <span class=\"s\">\"λx. a powr x\"</span>\n  <span class=\"n\">limit</span><span class=\"o\">:</span> <span class=\"s\">\"at_right 0\"</span> <span class=\"n\">facts</span><span class=\"o\">:</span> <span class=\"n\">a</span>\n\n<span class=\"n\">real_limit</span> <span class=\"s\">\"λx. b powr x\"</span>\n  <span class=\"n\">limit</span><span class=\"o\">:</span> <span class=\"s\">\"at_right 0\"</span> <span class=\"n\">facts</span><span class=\"o\">:</span> <span class=\"n\">b</span>\n</code></pre></div>\n<p>For completeness, here the more detailed variant where you also show from where it approaches:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"s\">\"a ∈ {0&lt;..&lt;1} ⟹ filterlim (λx::real. a powr x) (at_left 1) (at_right 0)\"</span>\n      <span class=\"s\">\"a &gt; 1 ⟹ filterlim (λx::real. a powr x) (at_right 1) (at_right 0)\"</span>\n  <span class=\"k\">by</span> <span class=\"n\">real_asymp</span><span class=\"o\">+</span>\n</code></pre></div>",
        "id": 221637608,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1609847343
    },
    {
        "content": "<p>The video you posted shows the example <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><munder><mo><mi>lim</mi><mo>⁡</mo></mo><mrow><mi>n</mi><mo>→</mo><mi mathvariant=\"normal\">∞</mi></mrow></munder><msup><mrow><mo fence=\"true\">(</mo><mfrac><mrow><mroot><mi>a</mi><mi>n</mi></mroot><mo>+</mo><mroot><mi>b</mi><mi>n</mi></mroot></mrow><mn>2</mn></mfrac><mo fence=\"true\">)</mo></mrow><mi>n</mi></msup></mrow><annotation encoding=\"application/x-tex\">\\lim\\limits_{n\\to\\infty} \\left(\\frac{\\sqrt[n]{a}+\\sqrt[n]{b}}{2}\\right)^n</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.9042919999999999em;vertical-align:-0.7em;\"></span><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.69444em;\"><span style=\"top:-2.4em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mrel mtight\">→</span><span class=\"mord mtight\">∞</span></span></span></span><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span><span class=\"mop\">lim</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\"><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size2\">(</span></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.130358em;\"><span style=\"top:-2.6550000000000002em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.4738665em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord sqrt mtight\"><span class=\"root\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6506288571428572em;\"><span style=\"top:-2.843086em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8059050000000001em;\"><span class=\"svg-align\" style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord mtight\" style=\"padding-left:0.833em;\"><span class=\"mord mathnormal mtight\">a</span></span></span><span style=\"top:-2.765905em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"hide-tail mtight\" style=\"min-width:0.853em;height:1.08em;\"><svg height=\"1.08em\" preserveAspectRatio=\"xMinYMin slice\" viewBox=\"0 0 400000 1080\" width=\"400em\"><path d=\"M95,702 c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14 c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54 c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10 s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429 c69,-144,104.5,-217.7,106.5,-221 l0 -0 c5.3,-9.3,12,-14,20,-14 H400000v40H845.2724 s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7 c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z M834 80h400000v40h-400000z\"></path></svg></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.234095em;\"><span></span></span></span></span></span><span class=\"mbin mtight\">+</span><span class=\"mord sqrt mtight\"><span class=\"root\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8089568571428571em;\"><span style=\"top:-3.001414em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.937845em;\"><span class=\"svg-align\" style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord mtight\" style=\"padding-left:0.833em;\"><span class=\"mord mathnormal mtight\">b</span></span></span><span style=\"top:-2.8978450000000002em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"hide-tail mtight\" style=\"min-width:0.853em;height:1.08em;\"><svg height=\"1.08em\" preserveAspectRatio=\"xMinYMin slice\" viewBox=\"0 0 400000 1080\" width=\"400em\"><path d=\"M95,702 c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14 c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54 c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10 s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429 c69,-144,104.5,-217.7,106.5,-221 l0 -0 c5.3,-9.3,12,-14,20,-14 H400000v40H845.2724 s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7 c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z M834 80h400000v40h-400000z\"></path></svg></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.102155em;\"><span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mclose delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size2\">)</span></span></span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.204292em;\"><span style=\"top:-3.6029em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span></span></span></span>. The problem with that is that for technical reasons, <code>real_asymp</code> currently does not support <code>root n x</code> where <code>n</code> is not a constant. However, you can prove a more general version like this:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span>\n  <span class=\"kp\">fixes</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">::</span> <span class=\"n\">real</span>\n  <span class=\"kp\">assumes</span> <span class=\"s\">\"a &gt; 0\"</span> <span class=\"s\">\"b &gt; 0\"</span>\n  <span class=\"kp\">shows</span>   <span class=\"s\">\"((λx. ((a powr (1/x) + b powr (1/x)) / 2) powr x) ⤏ exp ((ln a + ln b) / 2)) at_top\"</span>\n  <span class=\"k\">using</span> <span class=\"n\">assms</span> <span class=\"k\">by</span> <span class=\"n\">real_asymp</span>\n</code></pre></div>\n<p>There is also documentation for <code>real_asymp</code> in <code>~~/Doc/Real_Asymp</code>. And you can of course always ask me if you have any questions!</p>",
        "id": 221638027,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1609847705
    },
    {
        "content": "<p>Addendum: here is a proof of your initial question without <code>real_asymp</code>, using the continuity of <code>powr</code> at <code>0</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span>\n  <span class=\"kp\">fixes</span> <span class=\"n\">a</span><span class=\"o\">::</span><span class=\"n\">real</span>\n  <span class=\"kp\">assumes</span> <span class=\"s\">\"a &gt; 0\"</span>\n  <span class=\"kp\">shows</span> <span class=\"s\">\"((λx. a powr x) ⤏ 1) (at_right 0)\"</span>\n<span class=\"k\">proof</span> <span class=\"o\">-</span>\n  <span class=\"k\">from</span> <span class=\"n\">assms</span> <span class=\"k\">have</span> <span class=\"s\">\"((λx. a powr x) ⤏ a powr 0) (nhds 0)\"</span>\n    <span class=\"k\">by</span> <span class=\"o\">(</span><span class=\"n\">intro</span> <span class=\"n\">tendsto_intros</span> <span class=\"n\">filterlim_ident</span><span class=\"o\">)</span> <span class=\"n\">auto</span>\n  <span class=\"k\">hence</span> <span class=\"s\">\"((λx. a powr x) ⤏ a powr 0) (at_right 0)\"</span>\n    <span class=\"k\">by</span> <span class=\"o\">(</span><span class=\"n\">rule</span> <span class=\"n\">filterlim_mono</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">auto</span> <span class=\"n\">simp</span><span class=\"o\">:</span> <span class=\"n\">at_within_le_nhds</span><span class=\"o\">)</span>\n  <span class=\"k\">thus</span> <span class=\"o\">?</span><span class=\"n\">thesis</span> <span class=\"k\">using</span> <span class=\"n\">assms</span> <span class=\"k\">by</span> <span class=\"n\">simp</span>\n<span class=\"k\">qed</span>\n</code></pre></div>",
        "id": 221638627,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1609848170
    },
    {
        "content": "<p>This uses the rule <code>tendsto_powr'</code>, which is in the <code>tendsto_intros</code> collection:</p>\n<div class=\"codehilite\"><pre><span></span><code>(f ⤏ a) F ⟹ (g ⤏ b) F ⟹ a ≠ 0 ∨ 0 &lt; b ∧ (∀⇩F x in F. 0 ≤ f x)\n⟹ ((λx. f x powr g x) ⤏ a powr b) F\n</code></pre></div>\n<p>These proofs get fairly tedious for more complicated limits though – which is why I made <code>real_asymp</code>. See <a href=\"https://www21.in.tum.de/~eberlm/pubs/real_asymp.html\">this paper</a> for a description of how it works if you're curious (but for instructions on how to use it, look at the documentation instead or ask me).</p>",
        "id": 221638782,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1609848290
    },
    {
        "content": "<p>Wonderful. Thank you.</p>",
        "id": 221661182,
        "sender_full_name": "Mark Wassell",
        "timestamp": 1609861454
    }
]