[
    {
        "content": "<p>When proving a lemma like <code>[| P ; Q |] ==&gt; S</code> in Isar, it seems<br>\nthe premises got forgotten in the middle.<br>\nA mwe:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">mix</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kp\">shows</span><span class=\"w\"> </span><span class=\"s\">\"⟦ x + y = 2; x ≥1; y ≥1 ⟧ ⟹ x = 1\"</span>\n<span class=\"k\">proof</span><span class=\"w\"> </span><span class=\"o\">-</span>\n<span class=\"w\">  </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"s\">\"x ≤ 1\"</span>\n<span class=\"w\">    </span><span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>It seems that you just can't prove <code>\"x&lt;=1\"</code>.</p>\n<p>Thanks a lot,<br>\nChengsong</p>",
        "id": 403257136,
        "sender_full_name": "Chengsong Tan",
        "timestamp": 1700519852
    },
    {
        "content": "<p>You say that you want to prove <code>x ≤ 1</code> from no assumptions. This can’t work. In Isar, you have to be explicit where you use which assumptions, which is on purpose (in particular, it results in more readable proofs). Have you looked at some introduction to Isar, like the one in <code>prog-prove</code>?</p>\n<p>Better use Isar also for phrasing implications. Then you can access the premises as local facts. Like in this code:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">mix</span><span class=\"o\">:</span>\n<span class=\"w\">  </span><span class=\"kp\">assumes</span><span class=\"w\"> </span><span class=\"s\">\"x + y = 2\"</span><span class=\"w\"> </span><span class=\"kp\">and</span><span class=\"w\"> </span><span class=\"s\">\"x ≥ 1\"</span><span class=\"w\"> </span><span class=\"kp\">and</span><span class=\"w\"> </span><span class=\"s\">\"y ≥ 1\"</span>\n<span class=\"w\">  </span><span class=\"kp\">shows</span><span class=\"w\"> </span><span class=\"s\">\"x = 1\"</span>\n<span class=\"k\">proof</span><span class=\"w\"> </span><span class=\"o\">-</span>\n<span class=\"w\">  </span><span class=\"k\">from</span><span class=\"w\"> </span><span class=\"s\">‹x + y = 2›</span><span class=\"w\"> </span><span class=\"kp\">and</span><span class=\"w\"> </span><span class=\"s\">‹y ≥ 1›</span><span class=\"w\"> </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"s\">\"x ≤ 1\"</span>\n<span class=\"w\">    </span><span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 403262065,
        "sender_full_name": "Wolfgang Jeltsch",
        "timestamp": 1700522320
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"423655\">Wolfgang Jeltsch</span> <a href=\"#narrow/stream/238552-Beginner-Questions/topic/Make.20use.20of.20bracketed.20premises.20in.20Isar/near/403262065\">said</a>:</p>\n<blockquote>\n<p>You say that you want to prove <code>x ≤ 1</code> from no assumptions. This can’t work. In Isar, you have to be explicit where you use which assumptions, which is on purpose (in particular, it results in more readable proofs). Have you looked at some introduction to Isar, like the one in <code>prog-prove</code>?</p>\n<p>Better use Isar also for phrasing implications. Then you can access the premises as local facts. Like in this code:</p>\n<p><div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">mix</span><span class=\"o\">:</span>\n<span class=\"w\">  </span><span class=\"kp\">assumes</span><span class=\"w\"> </span><span class=\"s\">\"x + y = 2\"</span><span class=\"w\"> </span><span class=\"kp\">and</span><span class=\"w\"> </span><span class=\"s\">\"x ≥ 1\"</span><span class=\"w\"> </span><span class=\"kp\">and</span><span class=\"w\"> </span><span class=\"s\">\"y ≥ 1\"</span>\n<span class=\"w\">  </span><span class=\"kp\">shows</span><span class=\"w\"> </span><span class=\"s\">\"x = 1\"</span>\n<span class=\"k\">proof</span><span class=\"w\"> </span><span class=\"o\">-</span>\n<span class=\"w\">  </span><span class=\"k\">from</span><span class=\"w\"> </span><span class=\"s\">‹x + y = 2›</span><span class=\"w\"> </span><span class=\"kp\">and</span><span class=\"w\"> </span><span class=\"s\">‹y ≥ 1›</span><span class=\"w\"> </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"s\">\"x ≤ 1\"</span>\n<span class=\"w\">    </span><span class=\"gr\">sorry</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Thank you, Wolfgang!<br>\nIt's good to know that bracketed premises are not compatible with Isar proofs. It would be really nice if we can mix Isar styles and apply styles together (right now Isar seems very invasive in the sense that once you want to use a snippet of Isar (which sledgehammer sometimes generates) in your apply scripts, everything has to be totally changed to accommodate Isar-style reasoning).</p>",
        "id": 403581557,
        "sender_full_name": "Chengsong Tan",
        "timestamp": 1700655783
    },
    {
        "content": "<p>Why not use Isar all the time? It allows you to write human-friendly proofs, as opposed to <code>apply</code> style. I use <code>apply</code> style only for exploration: when I’m looking for a single proof method invocation or a combination of a few of them that I can put after a <code>by</code>. For the final code, I exclusively use Isar.</p>",
        "id": 403585973,
        "sender_full_name": "Wolfgang Jeltsch",
        "timestamp": 1700657443
    },
    {
        "content": "<p>I always the use the assumes version. Then you can have a using assms apply - and use normal apply-scripts…</p>",
        "id": 403586976,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1700657816
    },
    {
        "content": "<p>I agree with the others about using Isar, but I'm not sure what you mean by \"everything has to be totally changed to Isar-style\"</p>\n<p>in principle, you could still have a mostly <code>apply</code>-style script like this:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">proof</span><span class=\"w\"> </span><span class=\"o\">-</span>\n<span class=\"k\">have</span><span class=\"w\"> </span><span class=\"ow\">...</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">huge</span><span class=\"w\"> </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"n\">script</span><span class=\"o\">)</span>\n<span class=\"k\">have</span><span class=\"w\"> </span><span class=\"ow\">...</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">huge</span><span class=\"w\"> </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"n\">script</span><span class=\"o\">)</span>\n<span class=\"k\">show</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"w\"> </span><span class=\"k\">by</span>\n<span class=\"w\">  </span><span class=\"o\">(</span><span class=\"n\">huge</span><span class=\"w\"> </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"n\">script</span><span class=\"o\">)</span>\n<span class=\"k\">qed</span>\n</code></pre></div>",
        "id": 403597734,
        "sender_full_name": "Yong Kiam",
        "timestamp": 1700661549
    },
    {
        "content": "<p>You can write a proof like that, but it will be pretty much incomprehensible.</p>",
        "id": 403598219,
        "sender_full_name": "Fabian Huch",
        "timestamp": 1700661691
    },
    {
        "content": "<p>I still think that this would be better than huge apply-style proofs… At least there are intermediate steps</p>",
        "id": 403610562,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1700665340
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"234226\">Yong Kiam</span> <a href=\"#narrow/stream/238552-Beginner-Questions/topic/Make.20use.20of.20bracketed.20premises.20in.20Isar/near/403597734\">said</a>:</p>\n<blockquote>\n<p>I agree with the others about using Isar, but I'm not sure what you mean by \"everything has to be totally changed to Isar-style\"</p>\n<p>in principle, you could still have a mostly <code>apply</code>-style script like this:</p>\n<p><div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">proof</span><span class=\"w\"> </span><span class=\"o\">-</span>\n<span class=\"k\">have</span><span class=\"w\"> </span><span class=\"ow\">...</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">huge</span><span class=\"w\"> </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"n\">script</span><span class=\"o\">)</span>\n<span class=\"k\">have</span><span class=\"w\"> </span><span class=\"ow\">...</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">huge</span><span class=\"w\"> </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"n\">script</span><span class=\"o\">)</span>\n<span class=\"k\">show</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"w\"> </span><span class=\"k\">by</span>\n<span class=\"w\">  </span><span class=\"o\">(</span><span class=\"n\">huge</span><span class=\"w\"> </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"n\">script</span><span class=\"o\">)</span>\n<span class=\"k\">qed</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Hi Yong Kiam,<br>\nTo clarify what I meant, you cannot have something like this:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"s\">\"[| .... |] ==&gt; P\"</span>\n<span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"ow\">....</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"n\">style</span><span class=\"w\"> </span><span class=\"n\">scripts</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">isar</span><span class=\"w\"> </span><span class=\"n\">bit</span><span class=\"w\"> </span><span class=\"n\">starts</span><span class=\"w\"> </span><span class=\"k\">with</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"o\">+</span><span class=\"n\">1</span><span class=\"w\"> </span><span class=\"n\">subgoals</span><span class=\"o\">)</span>\n<span class=\"k\">proof</span><span class=\"w\"> </span><span class=\"o\">-</span>\n<span class=\"ow\">....</span>\n<span class=\"k\">proof</span><span class=\"w\"> </span><span class=\"n\">ends</span>\n<span class=\"o\">(</span><span class=\"n\">isar</span><span class=\"w\"> </span><span class=\"n\">bit</span><span class=\"w\"> </span><span class=\"n\">ends</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">leaving</span><span class=\"w\"> </span><span class=\"n\">you</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"n\">subgoals</span><span class=\"o\">)</span>\n<span class=\"kp\">apply</span><span class=\"ow\">....</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"n\">scripts</span><span class=\"w\"> </span><span class=\"n\">continue</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Here the Isar bit just acts as if it is a normal 1-liner proof solving a particular goal, which blends in with other apply scripts.<br>\nBut as far as my experience on Isar, once you start <code>proof ...</code>, you are not able to leave the Isar mode and every other goal has to be finished until you <code>qed</code> with the entire lemma. Yes you can still use apply scripts for certain bits in the Isar proof (when it is in \"proof\" mode?)  but you can no longer go back to the full-on apply style now (for example bracketed premises are not usable now, of course you can still change the phrasing of the lemma but that's what I meant by \"invasive\").</p>",
        "id": 403749391,
        "sender_full_name": "Chengsong Tan",
        "timestamp": 1700731920
    }
]