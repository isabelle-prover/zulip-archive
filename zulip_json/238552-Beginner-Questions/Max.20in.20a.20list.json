[
    {
        "content": "<p>Is there any lemma similar to this?</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">max_eqI</span><span class=\"o\">:</span>\n<span class=\"kp\">assumes</span>\n<span class=\"s\">\"l ! x = Max(set l)\"</span><span class=\"w\"> </span><span class=\"kp\">and</span>\n<span class=\"s\">\"l' ! x &gt; l ! x\"</span><span class=\"w\"> </span><span class=\"kp\">and</span>\n<span class=\"s\">\"x ≠ y\"</span><span class=\"w\"> </span><span class=\"kp\">and</span>\n<span class=\"s\">\"l ! y  ≥ l' ! y\"</span>\n<span class=\"kp\">shows</span><span class=\"w\"> </span><span class=\"s\">\"Max (set l') = l' ! x\"</span>\n</code></pre></div>",
        "id": 433248560,
        "sender_full_name": "Salvatore Francesco Rossetta",
        "timestamp": 1713175365
    },
    {
        "content": "<p>you're missing quantifiers in the lemma statement, also, generally you will need to assume <code>x &lt;= length l</code> and similarly for y</p>",
        "id": 433249128,
        "sender_full_name": "Yong Kiam",
        "timestamp": 1713175561
    },
    {
        "content": "<p>Something like this?</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">max_eqI</span><span class=\"o\">:</span>\n<span class=\"w\">  </span><span class=\"kp\">assumes</span>\n<span class=\"s\">\"x ≤ length l\"</span><span class=\"w\"> </span><span class=\"kp\">and</span>\n<span class=\"s\">\"finite (set l)\"</span><span class=\"w\"> </span><span class=\"kp\">and</span>\n<span class=\"s\">\"length l = length l'\"</span><span class=\"w\"> </span><span class=\"kp\">and</span>\n<span class=\"s\">\"l ! x = Max(set l)\"</span><span class=\"w\"> </span><span class=\"kp\">and</span>\n<span class=\"s\">\"l' ! x &gt; l ! x\"</span><span class=\"w\"> </span><span class=\"kp\">and</span>\n<span class=\"s\">\"∀y ≠ x. y ≤ length l ⟹ l ! y ≥ l' ! y\"</span>\n<span class=\"kp\">shows</span><span class=\"w\"> </span><span class=\"s\">\"l' ! x = Max (set l')\"</span>\n</code></pre></div>",
        "id": 433251317,
        "sender_full_name": "Salvatore Francesco Rossetta",
        "timestamp": 1713176283
    },
    {
        "content": "<p>this looks fine, although you don't need the <code>finite (set l)</code> assumption</p>\n<p>In addition, I made a typo earlier, you probably want <code>x &lt; length l</code> rather than <code>&lt;=</code></p>\n<p>edit: one more problem,  your quantifier over <code>y</code> isn't binding correctly. if you look at the statement in Isabelle you will notice that <code>y</code> is not colored <code>green</code> i.e., it's a free variable</p>",
        "id": 433261885,
        "sender_full_name": "Yong Kiam",
        "timestamp": 1713179663
    },
    {
        "content": "<p>returning to your original question: no I don't think there's something like this in the library, but it should not be a difficult exercise to prove this from the usual intros for <code>Max</code></p>",
        "id": 433262405,
        "sender_full_name": "Yong Kiam",
        "timestamp": 1713179838
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"234226\">Yong Kiam</span> <a href=\"#narrow/stream/238552-Beginner-Questions/topic/Max.20in.20a.20list/near/433261885\">said</a>:</p>\n<blockquote>\n<p>this looks fine, although you don't need the <code>finite (set l)</code> assumption</p>\n<p>In addition, I made a typo earlier, you probably want <code>x &lt; length l</code> rather than <code>&lt;=</code></p>\n<p>edit: one more problem,  your quantifier over <code>y</code> isn't binding correctly. if you look at the statement in Isabelle you will notice that <code>y</code> is not colored <code>green</code> i.e., it's a free variable</p>\n</blockquote>\n<p>How do I bind correctly <code>y</code>? I never used quantifiers in assms</p>",
        "id": 433283633,
        "sender_full_name": "Salvatore Francesco Rossetta",
        "timestamp": 1713185696
    },
    {
        "content": "<p>Compare the colors in</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kt\">term</span><span class=\"w\"> </span><span class=\"s\">\"⋀y. y ≤ length l ⟹ l ! y ≥ l' ! y\"</span>\n<span class=\"kt\">term</span><span class=\"w\"> </span><span class=\"s\">\"∀y. y ≤ length l ⟹ l ! y ≥ l' ! y\"</span>\n<span class=\"kt\">term</span><span class=\"w\"> </span><span class=\"s\">\"∀y. y ≤ length l ⟶ l ! y ≥ l' ! y\"</span>\n</code></pre></div>\n<p>(green = bound, blue = free)</p>",
        "id": 433299133,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1713189660
    },
    {
        "content": "<p>alternatively: add parens</p>",
        "id": 433299707,
        "sender_full_name": "Yong Kiam",
        "timestamp": 1713189783
    },
    {
        "content": "<p>Yeah with parentheses you get error messages:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kt\">term</span><span class=\"w\"> </span><span class=\"s\">\"∀y. (y ≤ length l ⟹ l ! y ≥ l' ! y)\"</span>\n</code></pre></div>",
        "id": 433308332,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1713191857
    },
    {
        "content": "<p>You cannot use meta implication (<code>⟹</code>) underneath HOL a HOL quantifier (<code>∀</code>).</p>",
        "id": 433310490,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1713192348
    },
    {
        "content": "<p>Basically, use meta quantifiers and meta implication whenever possible.</p>",
        "id": 433310638,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1713192373
    },
    {
        "content": "<p>HOL quantifiers and implication are necessary when you have quantifiers or implication nested inside something else, e.g. something like <code>∃x. ∀y. P x y</code> or <code>filter (λx. ∀y. P y ⟶ Q x y)</code>. Here you cannot replace the <code>∀</code> and <code>⟶</code> with meta quantifiers/meta implication because they occur inside other HOL constants.</p>",
        "id": 433311031,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1713192472
    },
    {
        "content": "<p>In principle you can also just always use HOL quantifiers and HOL implication everywhere and ignore the meta stuff entirely. But that will make your theorems a bit more awkward to use later because you cannot instantiate them as easily.</p>",
        "id": 433311214,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1713192519
    },
    {
        "content": "<p>I did it in the end, but what if I want to prove this now? Is there any useful lemma?</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">filter_size_is_one_helper</span><span class=\"o\">:</span>\n<span class=\"w\">  </span><span class=\"kp\">fixes</span>\n<span class=\"n\">fv</span><span class=\"o\">::</span><span class=\"s\">\"rat list\"</span>\n<span class=\"kp\">assumes</span>\n<span class=\"s\">\"x &lt; length fv\"</span><span class=\"w\"> </span><span class=\"kp\">and</span>\n<span class=\"s\">\"m = Max(set fv)\"</span><span class=\"w\"> </span><span class=\"kp\">and</span>\n<span class=\"s\">\"fv ! x = m\"</span><span class=\"w\"> </span><span class=\"kp\">and</span>\n<span class=\"s\">\"⋀y. y ≠ x ⟹ y &lt; length fv ⟹ fv ! y &lt; m\"</span>\n<span class=\"kp\">shows</span><span class=\"w\"> </span><span class=\"s\">\"length (filter (λx. fv ! x =  m) ps) = 1\"</span>\n</code></pre></div>",
        "id": 433337932,
        "sender_full_name": "Salvatore Francesco Rossetta",
        "timestamp": 1713199120
    },
    {
        "content": "<p>what is ps?</p>",
        "id": 433341012,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1713199995
    },
    {
        "content": "<p>ah any list okay</p>",
        "id": 433341043,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1713200008
    },
    {
        "content": "<p>but then the lemma is wrong</p>",
        "id": 433341169,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1713200041
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"n\">Nitpicking</span><span class=\"w\"> </span><span class=\"n\">formula...</span>\n<span class=\"n\">Nitpick</span><span class=\"w\"> </span><span class=\"n\">found</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">potentially</span><span class=\"w\"> </span><span class=\"n\">spurious</span><span class=\"w\"> </span><span class=\"n\">counterexample</span><span class=\"o\">:</span>\n<span class=\"w\">  </span><span class=\"n\">Free</span><span class=\"w\"> </span><span class=\"n\">variables</span><span class=\"o\">:</span>\n<span class=\"w\">    </span><span class=\"n\">fv</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">0</span><span class=\"o\">]</span>\n<span class=\"w\">    </span><span class=\"n\">m</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">0</span>\n<span class=\"w\">    </span><span class=\"n\">ps</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">[]</span>\n<span class=\"w\">    </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">0</span>\n</code></pre></div>",
        "id": 433341241,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1713200050
    },
    {
        "content": "<p>My best guess is that you are trying to do:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">filter_size_is_one_helper</span><span class=\"o\">:</span>\n<span class=\"w\">  </span><span class=\"kp\">fixes</span>\n<span class=\"n\">fv</span><span class=\"o\">::</span><span class=\"s\">\"'a :: linorder list\"</span>\n<span class=\"kp\">assumes</span>\n<span class=\"s\">\"x &lt; length fv\"</span><span class=\"w\"> </span><span class=\"kp\">and</span>\n<span class=\"s\">\"m = Max(set fv)\"</span><span class=\"w\"> </span><span class=\"kp\">and</span>\n<span class=\"s\">\"fv ! x = m\"</span><span class=\"w\"> </span><span class=\"kp\">and</span>\n<span class=\"n\">strict_le</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"⋀y. y ≠ x ⟹ y &lt; length fv ⟹ fv ! y &lt; m\"</span>\n<span class=\"kp\">shows</span><span class=\"w\"> </span><span class=\"s\">\"length (filter (λx. fv ! x =  m) [0..&lt;length fv]) = 1\"</span>\n<span class=\"k\">proof</span><span class=\"w\"> </span><span class=\"o\">-</span>\n<span class=\"w\">  </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"n\">le</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">‹[0..&lt;length fv] = ([0..&lt;x] @ [x] @ [Suc x ..&lt; length fv])›</span>\n<span class=\"w\">    </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"s\">‹fv ! x = m›</span>\n<span class=\"w\">    </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">metis</span><span class=\"w\"> </span><span class=\"n\">append_Cons</span><span class=\"w\"> </span><span class=\"n\">assms</span><span class=\"o\">(</span><span class=\"n\">1</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">leI</span><span class=\"w\"> </span><span class=\"n\">le_add_diff_inverse</span><span class=\"w\"> </span><span class=\"n\">less_imp_le_nat</span><span class=\"w\"> </span><span class=\"n\">not_less_zero</span>\n<span class=\"w\">        </span><span class=\"n\">self_append_conv2</span><span class=\"w\"> </span><span class=\"n\">upt_add_eq_append</span><span class=\"w\"> </span><span class=\"n\">upt_rec</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"s\">‹length (filter (λx. fv ! x =  m) [0..&lt;length fv]) = 1›</span>\n<span class=\"w\">    </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">strict_le</span><span class=\"w\"> </span><span class=\"n\">assms</span><span class=\"o\">(</span><span class=\"n\">1</span><span class=\"o\">,</span><span class=\"n\">3</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"k\">unfolding</span><span class=\"w\"> </span><span class=\"n\">le</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">force</span><span class=\"w\"> </span><span class=\"n\">simp</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">filter_empty_conv</span><span class=\"o\">)</span>\n<span class=\"k\">qed</span>\n</code></pre></div>",
        "id": 433344990,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1713200916
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"233198\">Mathias Fleury</span> <a href=\"#narrow/stream/238552-Beginner-Questions/topic/Max.20in.20a.20list/near/433344990\">said</a>:</p>\n<blockquote>\n<p>My best guess is that you are trying to do:</p>\n<p><div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">filter_size_is_one_helper</span><span class=\"o\">:</span>\n<span class=\"w\">  </span><span class=\"kp\">fixes</span>\n<span class=\"n\">fv</span><span class=\"o\">::</span><span class=\"s\">\"'a :: linorder list\"</span>\n<span class=\"kp\">assumes</span>\n<span class=\"s\">\"x &lt; length fv\"</span><span class=\"w\"> </span><span class=\"kp\">and</span>\n<span class=\"s\">\"m = Max(set fv)\"</span><span class=\"w\"> </span><span class=\"kp\">and</span>\n<span class=\"s\">\"fv ! x = m\"</span><span class=\"w\"> </span><span class=\"kp\">and</span>\n<span class=\"n\">strict_le</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"⋀y. y ≠ x ⟹ y &lt; length fv ⟹ fv ! y &lt; m\"</span>\n<span class=\"kp\">shows</span><span class=\"w\"> </span><span class=\"s\">\"length (filter (λx. fv ! x =  m) [0..&lt;length fv]) = 1\"</span>\n<span class=\"k\">proof</span><span class=\"w\"> </span><span class=\"o\">-</span>\n<span class=\"w\">  </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"n\">le</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">‹[0..&lt;length fv] = ([0..&lt;x] @ [x] @ [Suc x ..&lt; length fv])›</span>\n<span class=\"w\">    </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"s\">‹fv ! x = m›</span>\n<span class=\"w\">    </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">metis</span><span class=\"w\"> </span><span class=\"n\">append_Cons</span><span class=\"w\"> </span><span class=\"n\">assms</span><span class=\"o\">(</span><span class=\"n\">1</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">leI</span><span class=\"w\"> </span><span class=\"n\">le_add_diff_inverse</span><span class=\"w\"> </span><span class=\"n\">less_imp_le_nat</span><span class=\"w\"> </span><span class=\"n\">not_less_zero</span>\n<span class=\"w\">        </span><span class=\"n\">self_append_conv2</span><span class=\"w\"> </span><span class=\"n\">upt_add_eq_append</span><span class=\"w\"> </span><span class=\"n\">upt_rec</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"s\">‹length (filter (λx. fv ! x =  m) [0..&lt;length fv]) = 1›</span>\n<span class=\"w\">    </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">strict_le</span><span class=\"w\"> </span><span class=\"n\">assms</span><span class=\"o\">(</span><span class=\"n\">1</span><span class=\"o\">,</span><span class=\"n\">3</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"k\">unfolding</span><span class=\"w\"> </span><span class=\"n\">le</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">force</span><span class=\"w\"> </span><span class=\"n\">simp</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">filter_empty_conv</span><span class=\"o\">)</span>\n<span class=\"k\">qed</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Sorry, my actual aim is to do something similar to the lemma you wrote, like this</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">filter_size_is_one_helper_2</span><span class=\"o\">:</span>\n<span class=\"w\">  </span><span class=\"kp\">fixes</span>\n<span class=\"n\">fv</span><span class=\"o\">::</span><span class=\"s\">\"'a :: linorder list\"</span>\n<span class=\"kp\">assumes</span>\n<span class=\"s\">\"index ps x &lt; length fv\"</span><span class=\"w\"> </span><span class=\"kp\">and</span>\n<span class=\"s\">\"index ps x &lt; length ps\"</span><span class=\"w\"> </span><span class=\"kp\">and</span>\n<span class=\"s\">\"length ps = length fv\"</span><span class=\"w\"> </span><span class=\"kp\">and</span>\n<span class=\"s\">\"x ∈ set ps\"</span><span class=\"w\"> </span><span class=\"kp\">and</span>\n<span class=\"s\">\"m = Max(set fv)\"</span><span class=\"w\"> </span><span class=\"kp\">and</span>\n<span class=\"s\">\"fv ! index ps x = m\"</span><span class=\"w\"> </span><span class=\"kp\">and</span>\n<span class=\"n\">strict_le</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"⋀y. y ≠ index ps x ⟹ y &lt; length fv ⟹ fv ! y &lt; m\"</span>\n<span class=\"kp\">shows</span><span class=\"w\"> </span><span class=\"s\">\"length (filter (λx. fv ! (index ps x) = m) ps) = 1\"</span>\n</code></pre></div>\n<p>So filtering one list using indexes of another list (ps) of the same length. I then added some assumptions to use the lemma you wrote in my case but i am missing something, i think</p>",
        "id": 433482484,
        "sender_full_name": "Salvatore Francesco Rossetta",
        "timestamp": 1713260682
    },
    {
        "content": "<p>I am trying to adapt, I managed to write the first step, but in showing the thesis it fails. </p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">filter_size_is_one_helper_my_case</span><span class=\"o\">:</span>\n<span class=\"w\">  </span><span class=\"kp\">fixes</span>\n<span class=\"n\">fv</span><span class=\"o\">::</span><span class=\"s\">\"'a :: linorder list\"</span>\n<span class=\"kp\">assumes</span>\n<span class=\"s\">\"index ps x &lt; length fv\"</span><span class=\"w\"> </span><span class=\"kp\">and</span>\n<span class=\"s\">\"index ps x &lt; length ps\"</span><span class=\"w\"> </span><span class=\"kp\">and</span>\n<span class=\"s\">\"length ps = length fv\"</span><span class=\"w\"> </span><span class=\"kp\">and</span>\n<span class=\"s\">\"x ∈ set ps\"</span><span class=\"w\"> </span><span class=\"kp\">and</span>\n<span class=\"s\">\"m = Max(set fv)\"</span><span class=\"w\"> </span><span class=\"kp\">and</span>\n<span class=\"s\">\"fv ! index ps x = m\"</span><span class=\"w\"> </span><span class=\"kp\">and</span>\n<span class=\"s\">\"ps ! index ps x = x\"</span><span class=\"w\"> </span><span class=\"kp\">and</span>\n<span class=\"n\">strict_le</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"⋀y. index ps y &lt; length ps ⟹ y ∈ set ps ⟹index ps y ≠ index ps x ⟹ index ps y &lt; length fv ⟹ fv ! index ps y &lt; m\"</span>\n<span class=\"kp\">shows</span><span class=\"w\"> </span><span class=\"s\">\"length (filter (λx. fv ! (index ps x) = m) [0..&lt;length ps]) = 1\"</span>\n<span class=\"k\">proof</span><span class=\"w\"> </span><span class=\"o\">-</span>\n<span class=\"w\">  </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"n\">le</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">‹[0..&lt;length ps] = ([0..&lt;index ps x] @ [index ps x] @ [Suc (index ps x) ..&lt; length fv])›</span>\n<span class=\"w\">    </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"s\">‹fv ! index ps x = m›</span>\n<span class=\"w\">  </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">metis</span><span class=\"w\"> </span><span class=\"n\">Cons_eq_appendI</span><span class=\"w\"> </span><span class=\"n\">assms</span><span class=\"o\">(</span><span class=\"n\">2</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">assms</span><span class=\"o\">(</span><span class=\"n\">3</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">eq_Nil_appendI</span><span class=\"w\"> </span><span class=\"n\">le_add2</span><span class=\"w\"> </span><span class=\"n\">le_add_same_cancel2</span><span class=\"w\"> </span><span class=\"n\">less_imp_add_positive</span><span class=\"w\"> </span><span class=\"n\">upt_add_eq_append</span><span class=\"w\"> </span><span class=\"n\">upt_conv_Cons</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"s\">‹length (filter (λx. fv ! (index ps x) = m) [0..&lt;length ps]) = 1›</span>\n<span class=\"w\">        </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">strict_le</span><span class=\"w\"> </span><span class=\"n\">assms</span><span class=\"w\"> </span><span class=\"k\">unfolding</span><span class=\"w\"> </span><span class=\"n\">le</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">force</span><span class=\"w\"> </span><span class=\"n\">simp</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">filter_empty_conv</span><span class=\"o\">)</span>\n<span class=\"k\">qed</span>\n</code></pre></div>\n<p>What is missing?</p>",
        "id": 433484597,
        "sender_full_name": "Salvatore Francesco Rossetta",
        "timestamp": 1713261446
    },
    {
        "content": "<p>Replace force by auto, look at the goal that do not work and think how you would prove things by hand</p>",
        "id": 433486158,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1713261927
    },
    {
        "content": "<p>this will tell you what is missing</p>",
        "id": 433486182,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1713261936
    }
]