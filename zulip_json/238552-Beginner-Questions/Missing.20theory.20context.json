[
    {
        "content": "<p>I was trying my first isabelle proof like this:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">theory</span><span class=\"w\"> </span><span class=\"n\">ONat</span>\n<span class=\"w\">  </span><span class=\"kp\">imports</span><span class=\"w\"> </span><span class=\"n\">Main</span>\n<span class=\"k\">begin</span>\n\n<span class=\"k\">datatype</span><span class=\"w\"> </span><span class=\"n\">onat</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Zero</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Succ</span><span class=\"w\"> </span><span class=\"n\">onat</span>\n\n<span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">oadd</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"onat ⇒ onat ⇒ onat\"</span><span class=\"w\"> </span><span class=\"kp\">where</span>\n<span class=\"w\">  </span><span class=\"s\">\"oadd Zero n = n\"</span><span class=\"w\"> </span><span class=\"o\">|</span>\n<span class=\"w\">  </span><span class=\"s\">\"oadd (Succ m) n = Succ (oadd m n)\"</span>\n<span class=\"k\">end</span>\n\n<span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">add_O2</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"oadd m Zero = m\"</span>\n<span class=\"w\">  </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">induction</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>At this stage I got an error saying this:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"n\">Outer</span><span class=\"w\"> </span><span class=\"k\">syntax</span><span class=\"w\"> </span><span class=\"n\">error⌂</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">missing</span><span class=\"w\"> </span><span class=\"k\">theory</span><span class=\"w\"> </span><span class=\"k\">context</span><span class=\"w\"> </span><span class=\"kp\">for</span><span class=\"w\"> </span><span class=\"n\">command</span><span class=\"w\"> </span><span class=\"s\">\"apply\"</span>\n</code></pre></div>\n<p>Does this mean that I need to make a new <code>theory</code>?</p>",
        "id": 499156311,
        "sender_full_name": "Julin Shaji",
        "timestamp": 1739340917
    },
    {
        "content": "<p>There is no <code>end</code> after <code>fun</code></p>",
        "id": 499161005,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1739343570
    },
    {
        "content": "<p>Isabelle uses the <code>|</code> to know when the declaration ends</p>",
        "id": 499161054,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1739343593
    },
    {
        "content": "<p>Thanks. </p>\n<p>That <code>end</code> was supposed to be for ending the <code>theory</code> and somehow got there in between.</p>",
        "id": 499163844,
        "sender_full_name": "Julin Shaji",
        "timestamp": 1739344943
    }
]