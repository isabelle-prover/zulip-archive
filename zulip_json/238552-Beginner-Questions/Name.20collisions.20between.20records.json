[
    {
        "content": "<p>I'm running into a surprising behavior related to records. Consider the following 2 record definitions:</p>\n<div class=\"codehilite\"><pre><span></span><code>record unpaginated_state =\n  Data :: &quot;int set&quot;\n  Page :: int\n\nrecord external_state =\n  Data :: &quot;int set&quot;\n</code></pre></div>\n<p>They both contain a field named <code>Data</code>. When constructing a value of type <code>unpaginated_state</code> via:</p>\n<div class=\"codehilite\"><pre><span></span><code>⦇ Data = {5}, Page = 0 ⦈\n</code></pre></div>\n<p>I get an error: </p>\n<blockquote>\n<p>Error in record input: expecting field \"Refine.unpaginated_state.Data\" but got \"Page\"</p>\n</blockquote>\n<p>If I change one of the field names, no error occurs, which is why it feels like the record definitions are clashing in some way.</p>",
        "id": 274336912,
        "sender_full_name": "Alex Weisberger",
        "timestamp": 1646612317
    },
    {
        "content": "<p>I don't know much about records, but in this case you can just use the qualified name<br>\n<code> ⦇ unpaginated_state.Data = {5}, Page = 0 ⦈ </code></p>\n<p>The order of the record definitions seems to matter, if you swap them you can construct the <code>unpaginated_state</code> without the qualifier. Now the  creation of an <code>external state</code> fails of course.</p>",
        "id": 274512129,
        "sender_full_name": "Maximilian Schaeffeler",
        "timestamp": 1646729922
    }
]