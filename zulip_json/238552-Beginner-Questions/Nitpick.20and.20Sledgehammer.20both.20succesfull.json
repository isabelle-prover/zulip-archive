[
    {
        "content": "<p>Hi, </p>\n<p>I ran into a case where Nitpick finds a counterexample to a true lemma.  The proof checks out, so apparently I can't use Nitpick in this situation? I don't understand why though. </p>\n<p>Thanks for your comments,</p>\n<div class=\"codehilite\"><pre><span></span><code>lemma\n  fixes   a b:: int\n  assumes &quot;b≠0&quot;\n  shows &quot;rat_of_int a  * (Fract 1 b) = (Fract  a b)&quot;\n    (* nitpick find a counterexample; sometimes a=0, b=3 sometimes a=2, b=2*)\n    nitpick\n    (* sledgehammer finds a proof *)\n    by (metis Fract_of_int_eq mult.commute mult.left_neutral mult_rat)\n</code></pre></div>\n<p><a href=\"/user_uploads/14278/VFa8WJUcApjhpyskpOF3tppv/question.thy\">question.thy</a></p>",
        "id": 228384397,
        "sender_full_name": "Sander van Rijnswou",
        "timestamp": 1614679967
    },
    {
        "content": "<p>You might have better luck asking about this on the mailing list – I'm not sure if Jasmin reads Zulip, and he is the nitpick expert.</p>",
        "id": 228397812,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1614686473
    },
    {
        "content": "<p>It certainly looks like it could be a genuine problem with nitpick.</p>",
        "id": 228397842,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1614686498
    },
    {
        "content": "<p>Note however that nitpick is not a ‘trusted’ tool. It doesn't <em>prove</em> that the counterexamples it produces are genuine, it's not the same as actually proving a theorem that this is a counterexample. Nitpick is more like a diagnostic tool to find potential counterexamples. There is no inconsistency in the system when it produces wrong ones – at most, there is a big in Nitpick.</p>",
        "id": 228398041,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1614686587
    },
    {
        "content": "<p>But as I said, do report it on the mailing list, please. Maybe there is some genuine problem with Nitpick here that Jasmin should look into.</p>",
        "id": 228398106,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1614686626
    },
    {
        "content": "<p>Thanks, I'll post it to the mailing list.</p>",
        "id": 228418268,
        "sender_full_name": "Sander van Rijnswou",
        "timestamp": 1614695371
    }
]