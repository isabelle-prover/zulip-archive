[
    {
        "content": "<p>I've defined a basic rooted tree datatype and a function that, given a list of indices, recovers a subtree from a larger tree.</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">datatype</span> <span class=\"n\">tree</span> <span class=\"o\">=</span> <span class=\"n\">Node</span> <span class=\"o\">(</span><span class=\"n\">subtrees</span><span class=\"o\">:</span> <span class=\"s\">\"tree list\"</span><span class=\"o\">)</span>\n\n<span class=\"k\">abbreviation</span> <span class=\"n\">Leaf</span> <span class=\"o\">::</span> <span class=\"n\">tree</span> <span class=\"kp\">where</span>\n<span class=\"s\">\"Leaf ≡ Node []\"</span>\n\n<span class=\"k\">fun</span> <span class=\"n\">subtree</span> <span class=\"o\">::</span> <span class=\"s\">\"tree ⇒ nat list ⇒ tree\"</span> <span class=\"o\">(</span><span class=\"s\">\"_ !t _\"</span> <span class=\"o\">[</span><span class=\"n\">59</span><span class=\"o\">,</span><span class=\"n\">60</span><span class=\"o\">]</span><span class=\"n\">59</span><span class=\"o\">)</span> <span class=\"kp\">where</span>\n<span class=\"s\">\"t !t [] = t\"</span> <span class=\"o\">|</span>\n<span class=\"s\">\"t !t (i#xs) = subtrees (t !t xs) ! i\"</span>\n\n<span class=\"kt\">value</span> <span class=\"s\">\"Leaf !t []\"</span> <span class=\"c\">(* Leaf *)</span>\n<span class=\"kt\">value</span> <span class=\"s\">\"Node [Node [Leaf, Leaf, Leaf], Leaf, Node [Leaf]] !t [0]\"</span>    <span class=\"c\">(* Node [Leaf, Leaf, Leaf] *)</span>\n<span class=\"kt\">value</span> <span class=\"s\">\"Node [Node [Leaf, Leaf, Leaf], Leaf, Node [Leaf]] !t [2,0]\"</span>  <span class=\"c\">(* Leaf *)</span>\n<span class=\"kt\">value</span> <span class=\"s\">\"Node [Node [Leaf, Leaf, Leaf], Leaf, Node [Leaf]] !t [1]\"</span>    <span class=\"c\">(* Leaf *)</span>\n<span class=\"kt\">value</span> <span class=\"s\">\"Node [Node [Leaf, Leaf, Leaf], Leaf, Node [Leaf]] !t [0,2]\"</span>  <span class=\"c\">(* Leaf *)</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">subtree_exists_imp</span><span class=\"o\">:</span> <span class=\"s\">\"Node ts !t xs @ [i] = Node us ⟹ i &lt; length ts\"</span>\n  <span class=\"kt\">try</span>\n</code></pre></div>\n<p>The function <code>subtree</code> raises an exception whenever the list of indices is not valid within the given tree. I would like to prove the lemma at the bottom, essentially saying that if <code>!t</code> doesn't raise an exception then at least the last index is within the limits of the tree. However, Nitpick somehow thinks that the following is a counterexample:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code>  <span class=\"n\">Free</span> <span class=\"n\">variables</span><span class=\"o\">:</span>\n    <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">1</span>\n    <span class=\"n\">ts</span> <span class=\"o\">=</span> <span class=\"o\">[</span><span class=\"n\">Leaf</span><span class=\"o\">]</span>\n    <span class=\"n\">us</span> <span class=\"o\">=</span> <span class=\"o\">[</span><span class=\"n\">Leaf</span><span class=\"o\">]</span>\n    <span class=\"n\">xs</span> <span class=\"o\">=</span> <span class=\"o\">[]</span>\n</code></pre></div>\n<p>when in fact <code>Node [Leaf] !t [] @ [1]</code> raises an exception and so cannot be equal to <code>Node [Leaf]</code>.<br>\nIs there a way of rephrasing the lemma or the definition of <code>subtree</code> that would make this work?</p>",
        "id": 293511716,
        "sender_full_name": "Adrián Doña Mateo",
        "timestamp": 1660566715
    },
    {
        "content": "<p>I believe that the issue is that nitpick works with total functions. In your case \"[] ! 0\" is undefined, so it can take any value. The only way I can think of is making the function total for example by making it return Some/None</p>",
        "id": 294995634,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1661327467
    },
    {
        "content": "<blockquote>\n<p>In your case \"[] ! 0\" is undefined, so it can take any value.</p>\n</blockquote>\n<p>That’s not just an issue with Nitpick, but a fundamental feature of Isabelle. Every Isabelle function is total, and the morally partial ones just aren’t specified for those arguments that lie outside their moral domains.</p>",
        "id": 295322145,
        "sender_full_name": "Wolfgang Jeltsch",
        "timestamp": 1661467553
    }
]