[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">theory</span><span class=\"w\"> </span><span class=\"n\">ProductCategory</span>\n<span class=\"w\">  </span><span class=\"kp\">imports</span><span class=\"w\"> </span><span class=\"n\">Main</span>\n<span class=\"k\">begin</span>\n\n<span class=\"k\">record</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n n-Type\">'obj</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n n-Type\">'arr</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">Precategory</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">    </span><span class=\"n\">hom</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"'obj ⇒ 'obj ⇒ 'arr set\"</span>\n<span class=\"w\">    </span><span class=\"n\">comp</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"'obj ⇒ 'obj ⇒ 'obj ⇒ 'arr ⇒ 'arr ⇒ 'arr\"</span>\n\n<span class=\"k\">locale</span><span class=\"w\"> </span><span class=\"n\">Assoc</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">  </span><span class=\"kp\">fixes</span><span class=\"w\"> </span><span class=\"n\">C</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"('obj, 'arr) Precategory\"</span>\n<span class=\"w\">  </span><span class=\"kp\">assumes</span>\n<span class=\"w\">    </span><span class=\"n\">comp_assoc</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"⟦ f ∈ hom C w x ; g ∈ hom C x y ; h ∈ hom C y z ⟧ ⟹</span>\n<span class=\"s\">      comp C w y z (comp C w x y f g) h = comp C w x z f (comp C x y z g h)\"</span>\n\n<span class=\"k\">definition</span><span class=\"w\"> </span><span class=\"n\">ProductPrecategory</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"('objC, 'arrC) Precategory ⇒ ('objD, 'arrD) Precategory ⇒</span>\n<span class=\"s\">    ('objC × 'objD, 'arrC × 'arrD) Precategory\"</span><span class=\"w\"> </span><span class=\"kp\">where</span>\n<span class=\"w\">  </span><span class=\"s\">\"ProductPrecategory C D ≡</span>\n<span class=\"s\">    ⦇</span>\n<span class=\"s\">    hom = λ c1 c2. (hom C (fst c1) (fst c2)) × (hom D (snd c1) (snd c2)),</span>\n<span class=\"s\">    comp =  λ c1 c2 c3 f g.</span>\n<span class=\"s\">      (comp C (fst c1) (fst c2) (fst c3) (fst f) (fst g),</span>\n<span class=\"s\">       comp D (snd c1) (snd c2) (snd c3) (snd f) (snd g))</span>\n<span class=\"s\"> ⦈\"</span>\n\n<span class=\"kn\">theorem</span><span class=\"w\"> </span><span class=\"n\">test</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"Assoc C ⟹</span>\n<span class=\"s\">f ∈ hom (ProductPrecategory C D) x y  ⟹ (fst f) ∈ hom C (fst x) (fst y)\"</span>\n<span class=\"w\">  </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">metis</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">no_types</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">lifting</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">ProductPrecategory_def</span><span class=\"w\"> </span><span class=\"n\">SigmaD1</span><span class=\"w\"> </span><span class=\"n\">ext_inject</span><span class=\"w\"> </span><span class=\"n\">prod.exhaust_sel</span><span class=\"w\"> </span><span class=\"n\">surjective</span><span class=\"o\">)</span>\n\n<span class=\"kn\">theorem</span><span class=\"w\"> </span><span class=\"n\">test2</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"Assoc C ⟹</span>\n<span class=\"s\">f ∈ hom (ProductPrecategory C D) x y  ⟹ (fst f) ∈ hom C (fst x) (fst y)\"</span>\n<span class=\"w\">  </span><span class=\"kt\">nitpick</span>\n</code></pre></div>\n<p>I wrote the following code. To my surprise Nitpick claims to find a counterexample to the claim I just proved. What is going on here?</p>",
        "id": 411570561,
        "sender_full_name": "Patrick Nicodemus",
        "timestamp": 1704604435
    },
    {
        "content": "<p>Can others reproduce this?</p>",
        "id": 411570669,
        "sender_full_name": "Patrick Nicodemus",
        "timestamp": 1704604535
    },
    {
        "content": "<p>Weird. From the counterexample, it seems that nitpick and auto have a different opinion on the value of the hom record:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">theorem</span><span class=\"w\"> </span><span class=\"n\">test2</span><span class=\"o\">:</span>\n<span class=\"w\">  </span><span class=\"kp\">fixes</span><span class=\"w\"> </span><span class=\"n\">a⇩1</span><span class=\"w\"> </span><span class=\"n\">b⇩1</span><span class=\"w\"> </span><span class=\"kp\">and</span><span class=\"w\"> </span><span class=\"n\">c⇩1</span><span class=\"w\"> </span><span class=\"n\">c⇩2</span><span class=\"w\"> </span><span class=\"kp\">and</span><span class=\"w\">  </span><span class=\"n\">d⇩1</span><span class=\"w\">  </span><span class=\"n\">d⇩2</span><span class=\"w\">  </span><span class=\"kp\">and</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"s\">\"unit × bool\"</span><span class=\"w\"> </span><span class=\"kp\">and</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"unit × bool\"</span>\n<span class=\"w\">  </span><span class=\"kp\">defines</span><span class=\"w\"> </span><span class=\"s\">\"C ≡ ⦇hom = (λx. undefined)(a⇩1 := (λx. undefined)(a⇩1 := {})), comp = (λx. undefined)(a⇩1 := (λx. undefined)(a⇩1 := (λx. undefined)(a⇩1 := (λx. undefined)(b⇩1 := (λx. undefined)(b⇩1 := b⇩1)))))⦈\"</span>\n<span class=\"w\">  </span><span class=\"kp\">defines</span><span class=\"w\"> </span><span class=\"s\">\"D ≡  ⦇hom = (λx. undefined)(d⇩1 := (λx. undefined)(d⇩1 := {}, d⇩2 := {}), d⇩2 := (λx. undefined)(d⇩1 := {}, d⇩2 := {})),</span>\n<span class=\"s\">           comp = (λx. undefined)</span>\n<span class=\"s\">             (d⇩1 := (λx. undefined)</span>\n<span class=\"s\">                (d⇩1 := (λx. undefined)(d⇩1 := (λx. undefined)(c⇩1 := (λx. undefined)(c⇩1 := c⇩2, c⇩2 := c⇩2), c⇩2 := (λx. undefined)(c⇩1 := c⇩2, c⇩2 := c⇩2)), d⇩2 := (λx. undefined)(c⇩1 := (λx. undefined)(c⇩1 := c⇩2, c⇩2 := c⇩2), c⇩2 := (λx. undefined)(c⇩1 := c⇩2, c⇩2 := c⇩2))),</span>\n<span class=\"s\">                 d⇩2 := (λx. undefined)(d⇩1 := (λx. undefined)(c⇩1 := (λx. undefined)(c⇩1 := c⇩2, c⇩2 := c⇩2), c⇩2 := (λx. undefined)(c⇩1 := c⇩2, c⇩2 := c⇩2)), d⇩2 := (λx. undefined)(c⇩1 := (λx. undefined)(c⇩1 := c⇩2, c⇩2 := c⇩2), c⇩2 := (λx. undefined)(c⇩1 := c⇩2, c⇩2 := c⇩2)))),</span>\n<span class=\"s\">              d⇩2 := (λx. undefined)</span>\n<span class=\"s\">                (d⇩1 := (λx. undefined)(d⇩1 := (λx. undefined)(c⇩1 := (λx. undefined)(c⇩1 := c⇩2, c⇩2 := c⇩2), c⇩2 := (λx. undefined)(c⇩1 := c⇩2, c⇩2 := c⇩2)), d⇩2 := (λx. undefined)(c⇩1 := (λx. undefined)(c⇩1 := c⇩2, c⇩2 := c⇩2), c⇩2 := (λx. undefined)(c⇩1 := c⇩2, c⇩2 := c⇩2))),</span>\n<span class=\"s\">                 d⇩2 := (λx. undefined)(d⇩1 := (λx. undefined)(c⇩1 := (λx. undefined)(c⇩1 := c⇩2, c⇩2 := c⇩2), c⇩2 := (λx. undefined)(c⇩1 := c⇩2, c⇩2 := c⇩2)), d⇩2 := (λx. undefined)(c⇩1 := (λx. undefined)(c⇩1 := c⇩2, c⇩2 := c⇩2), c⇩2 := (λx. undefined)(c⇩1 := c⇩2, c⇩2 := c⇩2)))))⦈\"</span>\n<span class=\"w\">  </span><span class=\"kp\">defines</span><span class=\"w\"> </span><span class=\"s\">\"f ≡ (b⇩1, c⇩1)\"</span>\n<span class=\"w\">  </span><span class=\"kp\">shows</span><span class=\"w\"> </span><span class=\"s\">\" (hom (ProductPrecategory C D) x y) = {}\"</span>\n<span class=\"w\">  </span><span class=\"k\">unfolding</span><span class=\"w\"> </span><span class=\"n\">assms</span><span class=\"w\"> </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">auto</span><span class=\"w\"> </span><span class=\"n\">simp</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Assoc_def</span><span class=\"w\"> </span><span class=\"n\">ProductPrecategory_def</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"gr\">oops</span>\n\n\n<span class=\"kn\">theorem</span><span class=\"w\"> </span><span class=\"n\">test2</span><span class=\"w\"> </span><span class=\"o\">:</span>\n<span class=\"w\">  </span><span class=\"kp\">assumes</span><span class=\"w\"> </span><span class=\"n\">H</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"Assoc C\"</span><span class=\"w\"> </span><span class=\"s\">\"f ∈ hom (ProductPrecategory C D) x y\"</span>\n<span class=\"w\">  </span><span class=\"kp\">shows</span><span class=\"w\"> </span><span class=\"s\">\"(fst f) ∈ hom C (fst x) (fst y)\"</span>\n<span class=\"w\">  </span><span class=\"n\">supply</span><span class=\"w\"> </span><span class=\"o\">[[</span><span class=\"n\">show_types</span><span class=\"o\">]]</span>\n<span class=\"w\">  </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">assms</span><span class=\"w\"> </span><span class=\"kt\">nitpick</span><span class=\"o\">[</span><span class=\"n\">eval</span><span class=\"o\">=</span><span class=\"s\">\"f\"</span><span class=\"w\"> </span><span class=\"s\">\"hom C (fst x) (fst y) \"</span><span class=\"w\"> </span><span class=\"s\">\" hom (ProductPrecategory C D) x y\"</span><span class=\"w\"> </span><span class=\"s\">\"f ∈ hom (ProductPrecategory C D) x y \"</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 411583099,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1704617327
    },
    {
        "content": "<p>debug does not really enlighten me either:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">theorem</span><span class=\"w\"> </span><span class=\"n\">test2</span><span class=\"w\"> </span><span class=\"o\">:</span>\n<span class=\"w\">  </span><span class=\"kp\">assumes</span><span class=\"w\"> </span><span class=\"n\">H</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"Assoc C\"</span><span class=\"w\"> </span><span class=\"s\">\"f ∈ hom (ProductPrecategory C D) x y\"</span>\n<span class=\"w\">  </span><span class=\"kp\">shows</span><span class=\"w\"> </span><span class=\"s\">\"(fst f) ∈ hom C (fst x) (fst y)\"</span>\n<span class=\"w\">  </span><span class=\"n\">supply</span><span class=\"w\"> </span><span class=\"o\">[[</span><span class=\"n\">show_types</span><span class=\"o\">]]</span>\n<span class=\"w\">  </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">assms</span><span class=\"w\"> </span><span class=\"kt\">nitpick</span><span class=\"o\">[</span><span class=\"n\">debug</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">card</span><span class=\"o\">=</span><span class=\"n\">1</span><span class=\"o\">-</span><span class=\"n\">2</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 411583479,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1704617737
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"233198\">@Mathias Fleury</span> should i raise this on the mailing list or something, this doesn't seem to be one of the known bugs in nitpick listed in the \"Picking Nits\" users guide. how should i proceed here</p>",
        "id": 411637756,
        "sender_full_name": "Patrick Nicodemus",
        "timestamp": 1704666829
    }
]