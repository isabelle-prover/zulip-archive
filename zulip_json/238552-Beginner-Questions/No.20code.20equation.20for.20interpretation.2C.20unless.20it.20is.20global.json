[
    {
        "content": "<p>Hello,</p>\n<p>I have a locale <code>form_syntax</code>, which defines a function <code>free_vars</code>.<br>\nI have defined the necessary lemmas and functions to instantiate <code>form_syntax</code>. I cannot find a way to instantiate it within a context or sub-locale, while getting Isabelle to generate executable code. What works is the following:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"c\">(* define a few lemmas and functions *)</span>\n<span class=\"n\">global_interpretation</span><span class=\"w\"> </span><span class=\"n\">ta_forms</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">form_syntax</span><span class=\"w\"> </span><span class=\"n\">ta_subst</span><span class=\"w\"> </span><span class=\"n\">ta_vars</span><span class=\"w\"> </span><span class=\"n\">ta_consts</span><span class=\"w\"> </span><span class=\"n\">t_vars</span><span class=\"w\"> </span><span class=\"n\">ent</span>\n<span class=\"w\">  </span><span class=\"kp\">defines</span><span class=\"w\"> </span><span class=\"n\">fv</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ta_forms.free_vars</span>\n<span class=\"w\">  </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">ta_subst_leaves_consts</span><span class=\"w\"> </span><span class=\"n\">ta_subst_comp</span>\n<span class=\"w\">        </span><span class=\"n\">ta_subst_assoc</span><span class=\"w\"> </span><span class=\"n\">t_vars_eq_ta_vars</span>\n<span class=\"w\">  </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">unfold_locales</span><span class=\"w\"> </span><span class=\"n\">auto</span>\n<span class=\"w\"> </span><span class=\"kt\">value</span><span class=\"w\"> </span><span class=\"s\">\"fv (Atom (predAtm (Pred ''1234'') [term.VAR (Var ''123'')]))\"</span>\n</code></pre></div>\n<p>What I want to do is something like:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">locale</span><span class=\"w\"> </span><span class=\"n\">impl</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">&lt;define</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">assumed</span><span class=\"w\"> </span><span class=\"k\">lemmas</span><span class=\"w\"> </span><span class=\"kp\">and</span><span class=\"w\"> </span><span class=\"kp\">functions</span><span class=\"n\">&gt;</span>\n<span class=\"k\">end</span>\n\n<span class=\"k\">context</span><span class=\"w\"> </span><span class=\"n\">impl</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">&lt;be</span><span class=\"w\"> </span><span class=\"n\">able</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">call</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"kp\">functions</span><span class=\"w\"> </span><span class=\"n\">defined</span><span class=\"w\"> </span><span class=\"kp\">in</span><span class=\"w\"> </span><span class=\"n n-Type\">'form_syntax'</span><span class=\"w\"> </span><span class=\"n\">here&gt;</span>\n<span class=\"k\">end</span>\n</code></pre></div>\n<p>What does not work:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">locale</span><span class=\"w\"> </span><span class=\"n\">ta_forms</span>\n<span class=\"k\">begin</span>\n<span class=\"c\">(* define functions and lemmas needed for form_syntax *)</span>\n<span class=\"k\">end</span>\n<span class=\"kn\">sublocale</span><span class=\"w\"> </span><span class=\"n\">ta_forms</span><span class=\"w\"> </span><span class=\"n\">âŠ†</span><span class=\"w\"> </span><span class=\"n\">form_syntax</span><span class=\"w\"> </span><span class=\"n\">ta_subst</span><span class=\"w\"> </span><span class=\"n\">ta_vars</span><span class=\"w\"> </span><span class=\"n\">ta_consts</span><span class=\"w\"> </span><span class=\"n\">t_vars</span><span class=\"w\"> </span><span class=\"n\">ent</span>\n<span class=\"w\">  </span><span class=\"kp\">defines</span><span class=\"w\"> </span><span class=\"n\">free_vars</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">free_vars</span>\n<span class=\"w\">  </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">ta_subst_leaves_consts</span><span class=\"w\"> </span><span class=\"n\">ta_subst_comp</span>\n<span class=\"w\">        </span><span class=\"n\">ta_subst_assoc</span><span class=\"w\"> </span><span class=\"n\">t_vars_eq_ta_vars</span>\n<span class=\"w\">  </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">unfold_locales</span><span class=\"w\"> </span><span class=\"n\">auto</span>\n\n<span class=\"k\">context</span><span class=\"w\"> </span><span class=\"n\">ta_forms</span>\n<span class=\"k\">begin</span>\n<span class=\"kt\">value</span><span class=\"w\"> </span><span class=\"s\">\"free_vars (Atom (predAtm (Pred ''1234'') [term.VAR (Var ''123'')]))\"</span>\n<span class=\"c\">(* no code equation *)</span>\n<span class=\"k\">end</span>\n</code></pre></div>",
        "id": 407507305,
        "sender_full_name": "David Wang",
        "timestamp": 1702396003
    }
]