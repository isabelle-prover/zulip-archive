[
    {
        "content": "<p>In order to simplify multiplicative expressions I wrote</p>\n<div class=\"codehilite\"><pre><span></span><code>fun times :: &quot;aexp ⇒ aexp ⇒ aexp&quot; where\n  &quot;times (N i) (N j) = N(i*j)&quot;\n| &quot;times (N 0) a = (N 0)&quot;\n| &quot;times (N 1) a = a&quot;\n| &quot;times (N i) a = Times (N i) a&quot;\n| &quot;times a (N 0) = (N 0)&quot;\n| &quot;times a (N 1) = a&quot;\n| &quot;times a (N i) = Times (N i) a&quot;\n| &quot;times a1 a2   = Times a1 a2&quot;\n</code></pre></div>\n<p>for that I got</p>\n<div class=\"codehilite\"><pre><span></span><code>Malformed definition:\nNon-constructor pattern not allowed in sequential mode.\n⋀a. times (N 0) a = N 0\n</code></pre></div>\n<p>According to </p>\n<p><a href=\"https://stackoverflow.com/questions/38975187/error-non-constructor-pattern-not-allowed-in-sequential-mode-isabelle\">https://stackoverflow.com/questions/38975187/error-non-constructor-pattern-not-allowed-in-sequential-mode-isabelle</a></p>\n<p>this need not be a concern as 0 is a constant. Is N being int =&gt; aexp instead of nat =&gt; aexp the problem?</p>\n<p>Once I did this exercise and I vaguely remember that it is by no accident that this works only:</p>\n<div class=\"codehilite\"><pre><span></span><code>fun plus :: &quot;aexp ⇒ aexp ⇒ aexp&quot; where\n&quot;plus (N i⇩1) (N i⇩2) = N(i⇩1+i⇩2)&quot; |\n&quot;plus (N i) a = (if i=0 then a else Plus (N i) a)&quot; |\n&quot;plus a (N i) = (if i=0 then a else Plus a (N i))&quot; |\n&quot;plus a⇩1 a⇩2 = Plus a⇩1 a⇩2&quot;\n</code></pre></div>\n<p>with an if. From my ML intuition that might not be carried to HOL, constructor + constant is a neat idea in a pattern. Why is it not here?</p>\n<p>The full file is <a href=\"/user_uploads/14278/22p8JZhasil1mdbD0CqgU1RU/Ex_3_4.thy\">Ex_3_4.thy</a></p>",
        "id": 224162609,
        "sender_full_name": "Gergely Buday",
        "timestamp": 1611743278
    },
    {
        "content": "<p>Pattern matching on ints does not work, because they are not defined with constructors.</p>",
        "id": 224165808,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1611745323
    },
    {
        "content": "<p>Even pattern matching on nats is, well, you can do it, but it can cause some pain. If it's just 0 that you're matching on, that's fine, but if you're  matching on e.g. 3 you have to write ‘f (Suc (Suc (Suc 0))) = …’ and you get equations for <code>0</code>, <code>Suc 0</code>, <code>Suc (Suc 0)</code>, and <code>Suc (Suc (Suc (Suc n)))</code>, which is a bit excessive.</p>\n<p>The problem is that the function package only allows to match on constructor patterns and not on things like equality. It could, in principle, but it is not implemented (and would probably be quite a bit of work to implement now).</p>",
        "id": 224166169,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1611745517
    },
    {
        "content": "<p>It also implies that I cannot do a case analysis on the value? Basically, case analysis and pattern matching is the same thing, right?</p>",
        "id": 224166283,
        "sender_full_name": "Gergely Buday",
        "timestamp": 1611745581
    },
    {
        "content": "<p>You can define functions with more complex matching (even conditional matching like in Haskell), but then you have to prove exhaustiveness and non-overlapping of patterns yourself. See the <a href=\"https://isabelle.in.tum.de/dist/doc/functions.pdf\">Function package documentation</a> for more information on that.</p>",
        "id": 224166312,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1611745604
    },
    {
        "content": "<p>Also you lose executability.</p>",
        "id": 224166333,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1611745619
    },
    {
        "content": "<p>(Although it can be restored by giving a code equation.)</p>",
        "id": 224166352,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1611745633
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"234198\">Gergely Buday</span> <a href=\"#narrow/stream/238552-Beginner-Questions/topic/Non-constructor.20pattern/near/224166283\">said</a>:</p>\n<blockquote>\n<p>It also implies that I cannot do a case analysis on the value? Basically, case analysis and pattern matching is the same thing, right?</p>\n</blockquote>\n<p>Not sure what you mean by that.</p>",
        "id": 224166366,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1611745641
    },
    {
        "content": "<p>Do you mean the <code>case</code> combinator? If yes, I think that also only works on constructor patterns.</p>",
        "id": 224166410,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1611745677
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232736\">@Manuel Eberl</span> yes, pattern matching as above, case analysis with the <code>case</code> keyword</p>",
        "id": 224166504,
        "sender_full_name": "Gergely Buday",
        "timestamp": 1611745719
    },
    {
        "content": "<p>I actually don't know how <code>case</code> works exactly, it's a bit of black magic because you can write nested pattern matches with <code>case</code> and they somehow get transformed magically into calls to specific <code>case</code> combinators like <code>case_nat</code>, <code>case_option</code> etc.</p>",
        "id": 224166505,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1611745720
    },
    {
        "content": "<p>Probably checking phase or something like that.</p>",
        "id": 224166531,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1611745737
    },
    {
        "content": "<p>(And similar caveats apply for <code>case</code>; if your <code>case</code> expressions become too elaborate you can get an exponential blow up in the term size. I vaguely recall some other system having smarter case expressions; Isabelle's are rather simplistic.)</p>",
        "id": 224166603,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1611745794
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232736\">Manuel Eberl</span> <a href=\"#narrow/stream/238552-Beginner-Questions/topic/Non-constructor.20pattern/near/224166169\">said</a>:</p>\n<blockquote>\n<p>The problem is that the function package only allows to match on constructor patterns and not on things like equality. It could, in principle, but it is not implemented (and would probably be quite a bit of work to implement now).</p>\n</blockquote>\n<p>Not sure. The problem is that the function package does disambiguation on the patterns. If you add equality, I am <del>so</del> not sure that it is still possible.</p>",
        "id": 224166666,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1611745805
    },
    {
        "content": "<p>Yeah but you would have to write the disambiguator and extend the exhaustiveness/non-overlappingness prover to handle that.</p>",
        "id": 224166721,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1611745842
    },
    {
        "content": "<p>I mean, I'm sure it is feasible, but I don't think it's trivial.</p>",
        "id": 224166747,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1611745860
    },
    {
        "content": "<p>Feel free to do it if you feel like it. <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 224166757,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1611745866
    },
    {
        "content": "<p>My intuition says that it is not possible in general, but I might be wrong <span aria-label=\"surprise\" class=\"emoji emoji-1f62e\" role=\"img\" title=\"surprise\">:surprise:</span></p>",
        "id": 224166932,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1611745994
    },
    {
        "content": "<p>Ah, you meant ‘I am not sure’? Because you wrote ‘I am so sure’.</p>",
        "id": 224167036,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1611746069
    },
    {
        "content": "<p>Sorry, typo…</p>",
        "id": 224167096,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1611746135
    },
    {
        "content": "<p>The simplifier handled well the if-then-else constructs. Probably they are less readable for humans but the simplifier is another beast.</p>",
        "id": 224167197,
        "sender_full_name": "Gergely Buday",
        "timestamp": 1611746200
    },
    {
        "content": "<p>True, equality will probably cause some problems. To imitate what e.g. SML/Haskell do, you would have to add a precondition <code>≠ foo</code> to every equation after an equation of the form <code>f foo = …</code> except when the function package can statically prove that the thing is <code>≠ foo</code>.</p>",
        "id": 224167230,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1611746229
    },
    {
        "content": "<p>And proving exhaustiveness is probably impossible in general unless you have a ‘catch-all’ equation somewhere.</p>",
        "id": 224167275,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1611746268
    },
    {
        "content": "<p>Probably wouldn't be terribly usable all in all…</p>",
        "id": 224167320,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1611746283
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"234198\">Gergely Buday</span> <a href=\"#narrow/stream/238552-Beginner-Questions/topic/Non-constructor.20pattern/near/224167197\">said</a>:</p>\n<blockquote>\n<p>The simplifier handled well the if-then-else constructs. Probably they are less readable for humans but the simplifier is another beast.</p>\n</blockquote>\n<p>Yes, if-then-else works well. The conditional matching I mentioned is basically a similar way to get the same thing.</p>",
        "id": 224167368,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1611746316
    },
    {
        "content": "<p>You can still derive versions without the <code>if</code> as derived simp rules.</p>",
        "id": 224167397,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1611746336
    },
    {
        "content": "<p>For instance, if you have <code>f x = (if x = 1 then foo else bar x)</code>, you can prove e.g. <code>f 1 = foo</code> and <code>x ≠ 1 ⟹ f x = bar x</code>. That can sometimes come in useful.</p>",
        "id": 224167461,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1611746388
    },
    {
        "content": "<p>(In particular, you can then declare these as <code>simp</code>rules and delete the original <code>simp</code> rule. I for one don't like it when <code>if</code>s crop up somewhere without me explicitly telling them to.</p>",
        "id": 224167560,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1611746425
    }
]