[
    {
        "content": "<p>Hi, I have this code </p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">function</span><span class=\"w\"> </span><span class=\"n\">core_module</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"'a::ord Result ⇒ 'b set ⇒ 'b set ⇒ ('a::ord) set ⇒ ('a::ord, 'b set) Seats ⇒ 'b set StructVotes ⇒ 'b set StructVotes ⇒ nat list ⇒ 'b set StructVotes\"</span><span class=\"w\"> </span><span class=\"kp\">where</span>\n<span class=\"s\">\"core_module result party parties indexes seats votes fract_votes params ≡</span>\n<span class=\"s\">  let</span>\n<span class=\"s\">      ni = (case result of (_, _, x ) ⇒ SOME y. y </span><span class=\"ss\">\\&lt;in&gt;</span><span class=\"s\"> x);</span>\n<span class=\"s\">      new_seats = assign_seat ni party seats;</span>\n<span class=\"s\">      new_fract_votes = (update_votes party new_seats indexes votes fract_votes params)</span>\n<span class=\"s\">in</span>\n<span class=\"s\">      new_fract_votes\"</span>\n</code></pre></div>\n<p>which gives me the \"not an equation\" error. However, if i change function to \"definition\" it works even if, of course, when i try to use it, it doesn't work for the same problem: not an equation. I am having problems looking for the error. Can someone explain what is happening and how i should solve?</p>",
        "id": 407266665,
        "sender_full_name": "Salvatore Francesco Rossetta",
        "timestamp": 1702309228
    },
    {
        "content": "<p>For function, dont use the equivalence (<code>≡</code>) but just equality (<code>=</code>)</p>",
        "id": 407268884,
        "sender_full_name": "Jan van Brügge",
        "timestamp": 1702309927
    },
    {
        "content": "<p>In general I would recommend not using <code>≡</code> except for abbreviations (where you have to use it).</p>",
        "id": 407269424,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1702310122
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232736\">Manuel Eberl</span> <a href=\"#narrow/stream/238552-Beginner-Questions/topic/Not.20an.20equation.20-.20Function/near/407269424\">said</a>:</p>\n<blockquote>\n<p>In general I would recommend not using <code>≡</code> except for abbreviations (where you have to use it).</p>\n</blockquote>\n<p>Any specific reason for that? I always use <code>≡</code> for definitions since it allows you to save some parentheses, e.g. if you use a quantifier on the right-hand side.</p>",
        "id": 407301353,
        "sender_full_name": "Lukas Stevens",
        "timestamp": 1702321047
    },
    {
        "content": "<p>No it's fine for that purpose if you really want to. It doesn't make a difference there. But you don't want to use it in lemmas because it doesn't interact with the automation well.</p>\n<p>I see pure equality as a technical oddity coming from the internals of Isabelle that isn't really needed for using HOL, similar to the prop type. So I think especially for beginners the best advice is to just not use it to avoid confusion.</p>",
        "id": 407431005,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1702372984
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"392255\">Jan van Brügge</span> <a href=\"#narrow/stream/238552-Beginner-Questions/topic/Not.20an.20equation.20-.20Function/near/407268884\">said</a>:</p>\n<blockquote>\n<p>For function, dont use the equivalence (<code>≡</code>) but just equality (<code>=</code>)</p>\n</blockquote>\n<p>Thanks for the answer. In case this conversation will be useful for others in the future: after changing this equality<br>\n I had to wrap the body function in parenthesis to avoid syntax error.</p>\n<p>However, I wanted to check if the module works with some \"dummy\" values in input but i get \"No code equation for Eps\"</p>\n<p>Just to be clear, these are the dummy values: </p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">definition</span><span class=\"w\"> </span><span class=\"n\">myres</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"nat Result\"</span><span class=\"w\"> </span><span class=\"kp\">where</span>\n<span class=\"s\">\"myres = ({1, 2}, {3}, {4, 5})\"</span>\n\n<span class=\"k\">definition</span><span class=\"w\"> </span><span class=\"n\">myparties</span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"char list set\"</span><span class=\"w\"> </span><span class=\"kp\">where</span>\n<span class=\"s\">\"myparties = {''a'', ''b'', ''c'', ''d''}\"</span>\n\n<span class=\"k\">definition</span><span class=\"w\"> </span><span class=\"n\">myindexes</span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"nat set\"</span><span class=\"w\"> </span><span class=\"kp\">where</span>\n<span class=\"s\">\"myindexes = {1, 2, 3, 4, 5}\"</span>\n\n<span class=\"k\">definition</span><span class=\"w\"> </span><span class=\"n\">myseats</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"(nat, char list set) Seats\"</span><span class=\"w\"> </span><span class=\"kp\">where</span>\n<span class=\"s\">\"myseats n = (if n = 1 then {''a''} else if n = 2 then {''b''} else if n = 3 then {''a''} else {''a'', ''b'', ''c'', ''d''})\"</span>\n\n<span class=\"k\">definition</span><span class=\"w\"> </span><span class=\"n\">myvotes</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"(char list set) StructVotes\"</span><span class=\"w\"> </span><span class=\"kp\">where</span>\n<span class=\"s\">\"myvotes n = (if n = {''a''} then 1 else if n = {''b''} then 2 else if n = {''c''} then 1 else 0)\"</span>\n\n<span class=\"k\">definition</span><span class=\"w\"> </span><span class=\"n\">myfractvotes</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"(char list set) StructVotes\"</span><span class=\"w\"> </span><span class=\"kp\">where</span>\n<span class=\"s\">\"myfractvotes n = (if n = {''a''} then 1 else if n = {''b''} then 2 else if n = {''c''} then 1 else 0)\"</span>\n\n<span class=\"k\">definition</span><span class=\"w\"> </span><span class=\"n\">myparams</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"nat list\"</span><span class=\"w\"> </span><span class=\"kp\">where</span>\n<span class=\"s\">\"myparams = [1, 2, 3, 4, 5]\"</span>\n\n<span class=\"kt\">value</span><span class=\"w\"> </span><span class=\"s\">\"core_module myres {''a''} myparties myindexes myseats myvotes myfractvotes myparams\"</span>\n</code></pre></div>\n<p>I don't think these are the problem but I can't find the error in the function, if it's there</p>",
        "id": 407490639,
        "sender_full_name": "Salvatore Francesco Rossetta",
        "timestamp": 1702391778
    },
    {
        "content": "<p><code>Eps</code> is the name of the Hilbert choice operator, which is written as <code>SOME x. …</code>. You are using it in your definition of <code>core_module</code>. There are no code equations for <code>Eps</code>, and there cannot be. The choice operator is an underspecified operation and therefore cannot be implemented.</p>\n<p>It seems that your algorithm is nondeterministic in the sense that it nondetereministically chooses an element from this set and then does something with it. However, HOL is not a nondeterministic logic. Functions have one result, and only one. So if you write it down with the <code>SOME</code> operator, you logically get <em>some</em> result, but you don't know <em>which one</em>. That is one way to resolve nondeterminism, and it can occasionally be a useful one in proofs. But for executable code, it's bad, because, well, you cannot execute it.</p>\n<p>So, what other options are there? It depends on what you want to achieve. One possibility is to work in the set monad and return a set of all possible results. Another would be to always pick e.g. the smallest element from the set (but then you lose a lot of flexibility). Or you could use a framework that deals with nondeterminism in a more explicit way, like Peter Lammich's refinement framework.</p>",
        "id": 407492983,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1702392394
    },
    {
        "content": "<p>Another way is to axiomatise the existence of the choice function with a locale. This leaves the implementation of the choice function for later (e.g. choosing the smallest element).</p>",
        "id": 407493444,
        "sender_full_name": "Lukas Stevens",
        "timestamp": 1702392499
    },
    {
        "content": "<p>Thanks for the clear answer, now I understood the problem. To take the smallest value actually would be the best fitting option for my case, so I think I'll follow that strategy.</p>",
        "id": 407493794,
        "sender_full_name": "Salvatore Francesco Rossetta",
        "timestamp": 1702392583
    }
]