[
    {
        "content": "<p>How does one obtain the set of all members of a datatype? For example <code>{True, False}</code> for type <code>bool</code> or <code>{0, 1, 2, ...}</code> for type <code>nat</code>?</p>",
        "id": 299958604,
        "sender_full_name": "Isaac Freund",
        "timestamp": 1663767997
    },
    {
        "content": "<p><code>UNIV :: 'a</code></p>",
        "id": 299960355,
        "sender_full_name": "Lukas Stevens",
        "timestamp": 1663768596
    },
    {
        "content": "<p>I assume you mean <code>UNIV :: 'a set</code>? <code>UNIV :: bool set</code> for example gives what I want, Thanks!</p>",
        "id": 299961559,
        "sender_full_name": "Isaac Freund",
        "timestamp": 1663768980
    },
    {
        "content": "<p>I'm using isabelle to proof security boot of device. lemma AF1_aux fail to pass the proof.</p>\n<p>When I change if <code>event_enabled s be</code>  to <code> if false</code>, it pass. I can't move forward.</p>\n<p>Any guidance would be very helpful!</p>\n<p>Here is the simple code</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"gu\">section</span><span class=\"w\"> </span><span class=\"s\">‹boot security›</span><span class=\"w\"></span>\n\n<span class=\"k\">theory</span><span class=\"w\"> </span><span class=\"n\">boot_sec</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"kp\">imports</span><span class=\"w\"> </span><span class=\"n\">Main</span><span class=\"w\"></span>\n<span class=\"k\">begin</span><span class=\"w\"></span>\n\n<span class=\"k\">locale</span><span class=\"w\"> </span><span class=\"n\">M_HLR</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"c\">(* declare the initial state *)</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"kp\">fixes</span><span class=\"w\"> </span><span class=\"n\">Initial_State</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"n n-Type\">'s</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"c\">(* next state function *)</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"kp\">fixes</span><span class=\"w\"> </span><span class=\"n\">next_state</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"'s ⇒ 'be ⇒ 's\"</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"c\">(* Auxiliary function for present Stable State *)</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"kp\">fixes</span><span class=\"w\"> </span><span class=\"n\">success</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"'s ⇒ bool\"</span><span class=\"w\"></span>\n\n<span class=\"w\">  </span><span class=\"c\">(* Security Requirements *)</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"kp\">assumes</span><span class=\"w\"> </span><span class=\"n\">AF1</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"∃s. ∀b. next_state s b = s\"</span><span class=\"w\"></span>\n\n\n\n<span class=\"k\">datatype</span><span class=\"w\"> </span><span class=\"n\">Status</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">INIT</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">READ_ROM</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">END</span><span class=\"w\"></span>\n\n<span class=\"k\">record</span><span class=\"w\"> </span><span class=\"n\">State</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"></span>\n<span class=\"w\">       </span><span class=\"n\">status</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"n\">Status</span><span class=\"w\"></span>\n\n<span class=\"k\">datatype</span><span class=\"w\"> </span><span class=\"n\">Behavior</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Read_ROM</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"n\">Gen_SessionKey</span><span class=\"w\"></span>\n\n<span class=\"k\">definition</span><span class=\"w\"> </span><span class=\"n\">read_rom</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"State ⇒ State\"</span><span class=\"w\"> </span><span class=\"kp\">where</span><span class=\"w\"></span>\n<span class=\"s\">\"read_rom s ≡ s ⦇status := READ_ROM ⦈\"</span><span class=\"w\"></span>\n\n<span class=\"k\">definition</span><span class=\"w\"> </span><span class=\"n\">gen_sessionkey</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"State ⇒ State\"</span><span class=\"w\"> </span><span class=\"kp\">where</span><span class=\"w\"></span>\n<span class=\"s\">\"gen_sessionkey s ≡ s ⦇status := END ⦈\"</span><span class=\"w\"></span>\n\n<span class=\"k\">definition</span><span class=\"w\"> </span><span class=\"n\">event_enabled</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"State ⇒ Behavior ⇒ bool\"</span><span class=\"w\"> </span><span class=\"kp\">where</span><span class=\"w\"></span>\n<span class=\"s\">\"event_enabled s be ≡ if status s = END then False else True\"</span><span class=\"w\"></span>\n\n<span class=\"k\">definition</span><span class=\"w\"> </span><span class=\"n\">exec_be</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"State ⇒ Behavior ⇒ State\"</span><span class=\"w\"> </span><span class=\"kp\">where</span><span class=\"w\"></span>\n<span class=\"s\">\"exec_be s be ≡</span>\n<span class=\"s\">if event_enabled s be</span>\n<span class=\"s\">then</span>\n<span class=\"s\">( case be of</span>\n<span class=\"s\">   Read_ROM ⇒ read_rom s |</span>\n<span class=\"s\">   Gen_SessionKey ⇒ gen_sessionkey s )</span>\n<span class=\"s\">else s\"</span><span class=\"w\"></span>\n\n\n\n<span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">AF1_aux</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"status s = END ⟹ ∀be. exec_be s be = s\"</span><span class=\"w\"></span>\n<span class=\"w\"> </span><span class=\"k\">by</span><span class=\"o\">(</span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"n\">add</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">exec_be_def</span><span class=\"o\">)</span><span class=\"w\"></span>\n\n\n<span class=\"kn\">theorem</span><span class=\"w\"> </span><span class=\"n\">AF1</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"∃s. ∀be. exec_be s be = s\"</span><span class=\"w\"></span>\n<span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">meson</span><span class=\"w\"> </span><span class=\"n\">AF1_aux</span><span class=\"w\"> </span><span class=\"n\">State.select_convs</span><span class=\"o\">(</span><span class=\"n\">1</span><span class=\"o\">))</span><span class=\"w\"></span>\n\n\n<span class=\"k\">end</span><span class=\"w\"></span>\n</code></pre></div>\n<p>The output is</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">theorem</span><span class=\"w\"> </span><span class=\"n\">AF1_aux</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">status</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">END</span><span class=\"w\"> </span><span class=\"n\">⟹</span><span class=\"w\"> </span><span class=\"n\">∀be.</span><span class=\"w\"> </span><span class=\"n\">exec_be</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"n\">be</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">s</span><span class=\"w\"></span>\n<span class=\"n\">Failed</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">finish</span><span class=\"w\"> </span><span class=\"k\">proof</span><span class=\"n\">⌂</span><span class=\"o\">:</span><span class=\"w\"></span>\n<span class=\"n\">goal</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">1</span><span class=\"w\"> </span><span class=\"n\">subgoal</span><span class=\"o\">):</span><span class=\"w\"></span>\n<span class=\"w\"> </span><span class=\"n\">1.</span><span class=\"w\"> </span><span class=\"n\">status</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">END</span><span class=\"w\"> </span><span class=\"n\">⟹</span><span class=\"w\"> </span><span class=\"n\">∀be.</span><span class=\"w\"> </span><span class=\"n\">event_enabled</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"n\">be</span><span class=\"w\"> </span><span class=\"n\">⟶</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"k\">case</span><span class=\"w\"> </span><span class=\"n\">be</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">Read_ROM</span><span class=\"w\"> </span><span class=\"n\">⇒</span><span class=\"w\"> </span><span class=\"n\">read_rom</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Gen_SessionKey</span><span class=\"w\"> </span><span class=\"n\">⇒</span><span class=\"w\"> </span><span class=\"n\">gen_sessionkey</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 300279776,
        "sender_full_name": "Ryan13",
        "timestamp": 1663899975
    },
    {
        "content": "<p>You need to also add <code>event_enabled_def</code> in addition to <code>exec_be_def</code>. Thus <code>by (simp add: exec_be_def event_enabled_def)</code> should work.</p>",
        "id": 300312571,
        "sender_full_name": "Seung Hoon Park",
        "timestamp": 1663922084
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 301403854,
        "sender_full_name": "Robert Soeldner",
        "timestamp": 1664444751
    }
]