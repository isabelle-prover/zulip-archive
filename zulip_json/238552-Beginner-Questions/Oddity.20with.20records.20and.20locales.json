[
    {
        "content": "<p>Hoping to duplicate the structure of HOL/Algebra for using records as part of defining locales for algebraic objects (see also <a class=\"stream-topic\" data-stream-id=\"238552\" href=\"/#narrow/channel/238552-Beginner-Questions/topic/Should.20I.20always.20bundle.20the.20data.20in.20a.20locale.20into.20a.20record.3F/with/424326190\">#Beginner Questions &gt; Should I always bundle the data in a locale into a record?</a> ), I've copied and slightly simplified the setup for a monoid:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">record</span><span class=\"w\"> </span><span class=\"n n-Type\">'a</span><span class=\"w\"> </span><span class=\"n\">monoid</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">  </span><span class=\"n\">carrier</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"'a set\"</span>\n<span class=\"w\">  </span><span class=\"n\">mult</span><span class=\"w\">    </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"['a, 'a] ⇒ 'a\"</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"kp\">infixl</span><span class=\"w\"> </span><span class=\"s\">‹⊗ı›</span><span class=\"w\"> </span><span class=\"n\">70</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"n\">one</span><span class=\"w\">     </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"n n-Type\">'a</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"s\">‹𝟭ı›</span><span class=\"o\">)</span>\n\n<span class=\"k\">locale</span><span class=\"w\"> </span><span class=\"n\">monoid</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">  </span><span class=\"kp\">fixes</span><span class=\"w\"> </span><span class=\"n\">G</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"kp\">structure</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"kp\">assumes</span><span class=\"w\"> </span><span class=\"n\">m_closed</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">intro</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">simp</span><span class=\"o\">]:</span>\n<span class=\"w\">         </span><span class=\"s\">\"⟦x ∈ carrier G; y ∈ carrier G⟧ ⟹ x ⊗ y ∈ carrier G\"</span>\n<span class=\"w\">      </span><span class=\"kp\">and</span><span class=\"w\"> </span><span class=\"n\">m_assoc</span><span class=\"o\">:</span>\n<span class=\"w\">         </span><span class=\"s\">\"⟦x ∈ carrier G; y ∈ carrier G; z ∈ carrier G⟧</span>\n<span class=\"s\">          ⟹ (x ⊗ y) ⊗ z = x ⊗ (y ⊗ z)\"</span>\n<span class=\"w\">      </span><span class=\"kp\">and</span><span class=\"w\"> </span><span class=\"n\">one_closed</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">intro</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">simp</span><span class=\"o\">]:</span><span class=\"w\"> </span><span class=\"s\">\"𝟭 ∈ carrier G\"</span>\n<span class=\"w\">      </span><span class=\"kp\">and</span><span class=\"w\"> </span><span class=\"n\">l_one</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]:</span><span class=\"w\"> </span><span class=\"s\">\"x ∈ carrier G ⟹ 𝟭 ⊗ x = x\"</span>\n<span class=\"w\">      </span><span class=\"kp\">and</span><span class=\"w\"> </span><span class=\"n\">r_one</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]:</span><span class=\"w\"> </span><span class=\"s\">\"x ∈ carrier G ⟹ x ⊗ 𝟭 = x\"</span>\n<span class=\"k\">begin</span>\n<span class=\"k\">end</span>\n</code></pre></div>\n<p>Here the simplification was simply folding the \"partial object\" record into the monoid record. When I look at this in jEdit, the <code>G</code> in <code>fixes G (structure)</code> is shown in blue:<br>\n<a href=\"/user_uploads/14278/MhJ2il72FZUsRi8vpo0gc1Jp/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/14278/MhJ2il72FZUsRi8vpo0gc1Jp/image.png\" title=\"image.png\"><img data-original-content-type=\"image/png\" data-original-dimensions=\"234x72\" src=\"/user_uploads/thumbnail/14278/MhJ2il72FZUsRi8vpo0gc1Jp/image.png/840x560.webp\"></a></div><p>When I try to replicate that approach, albeit with different names, like this:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">record</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n n-Type\">'p</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n n-Type\">'l</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">affine_plane_r</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">  </span><span class=\"n\">Points</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"'p set\"</span>\n<span class=\"w\">  </span><span class=\"n\">Lines</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"'l set\"</span>\n<span class=\"w\">  </span><span class=\"n\">incid</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"'p ⇒ 'l ⇒ bool\"</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"kp\">infix</span><span class=\"w\"> </span><span class=\"s\">\"⊲\"</span><span class=\"w\"> </span><span class=\"n\">60</span><span class=\"o\">)</span>\n\n<span class=\"k\">locale</span><span class=\"w\"> </span><span class=\"n\">affine_plane_data</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">  </span><span class=\"kp\">fixes</span><span class=\"w\"> </span><span class=\"n\">AP</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"kp\">structure</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"kp\">assumes</span><span class=\"w\"> </span><span class=\"n\">contains</span><span class=\"o\">:</span>\n<span class=\"w\">    </span><span class=\"s\">\"⟦ k ∈ Lines AP ; P ∈ Points AP⟧ ⟹ (P ⊲ k)\"</span>\n<span class=\"c\">(*  fixes join:: \"'p ⇒ 'p ⇒ 'l\"</span>\n<span class=\"c\">  fixes find_parallel:: \"'l ⇒ 'p ⇒ 'l\" *)</span>\n<span class=\"k\">begin</span>\n<span class=\"k\">end</span>\n</code></pre></div>\n<p>the <code>fixes AP (Structure)</code> shows <code>AP</code> in black instead:<br>\n<a href=\"/user_uploads/14278/ajnWRbWOIQlpMvKjlsfmlnjR/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/14278/ajnWRbWOIQlpMvKjlsfmlnjR/image.png\" title=\"image.png\"><img data-original-content-type=\"image/png\" data-original-dimensions=\"550x106\" src=\"/user_uploads/thumbnail/14278/ajnWRbWOIQlpMvKjlsfmlnjR/image.png/840x560.webp\"></a></div><p>It also seems unhappy about my use of  <code> ⊲</code> as an infix operator, even though in the monoid example, the use of <code>⊗</code> as an infix operator works fine. </p>\n<p>I suppose that my problem could be that I have <strong>two</strong> types, <code>'p</code> and <code>'l</code>, while monoids have only <code>'a</code>,  but I'm hoping it's something simpler/stupider, and that I've made some sort of copy-paste error that'll be obvious to a trained eye. </p>\n<p>Can anyone explain what's going on here?</p>",
        "id": 531422474,
        "sender_full_name": "John  Hughes",
        "timestamp": 1753723820
    },
    {
        "content": "<p>...wait. I think I've partly answered my own question. When I simplify to this:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">locale</span><span class=\"w\"> </span><span class=\"n\">affine_plane_data</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">  </span><span class=\"kp\">fixes</span><span class=\"w\"> </span><span class=\"n\">AP</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"kp\">structure</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"kp\">assumes</span><span class=\"w\"> </span><span class=\"n\">nonempty</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"Lines AP ≠ {}\"</span>\n<span class=\"k\">begin</span>\n<span class=\"k\">end</span>\n</code></pre></div>\n<p>then the <code>AP</code> turns blue. So perhaps the black vs blue problem is a symptom of the second problem: the fact my my <code>contains</code> assumption is generating a syntax error is causing the color problem as well. </p>\n<p>I'm still puzzled, however, about the problem with <code>⊲</code>, and why it doesn't work the way that multiplication seems to for monoids.</p>",
        "id": 531425941,
        "sender_full_name": "John  Hughes",
        "timestamp": 1753725044
    },
    {
        "content": "<p>Adding the ı character to the infix definition seems to do the trick, though I'm not entirely sure why that might be - perhaps it hints at an implicit argument?</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">record</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n n-Type\">'p</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n n-Type\">'l</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">affine_plane_r</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">  </span><span class=\"n\">Points</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"'p set\"</span>\n<span class=\"w\">  </span><span class=\"n\">Lines</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"'l set\"</span>\n<span class=\"w\">  </span><span class=\"n\">incid</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"'p ⇒ 'l ⇒ bool\"</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"kp\">infix</span><span class=\"w\"> </span><span class=\"s\">‹◃ı›</span><span class=\"w\"> </span><span class=\"n\">60</span><span class=\"o\">)</span>\n\n<span class=\"k\">locale</span><span class=\"w\"> </span><span class=\"n\">affine_plane_data</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">  </span><span class=\"kp\">fixes</span><span class=\"w\"> </span><span class=\"n\">AP</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"kp\">structure</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"kp\">assumes</span><span class=\"w\"> </span><span class=\"n\">contains</span><span class=\"o\">:</span>\n<span class=\"w\">    </span><span class=\"s\">\"⟦ k ∈ Lines AP ; P ∈ Points AP⟧ ⟹ (k ◃ P)\"</span>\n<span class=\"c\">(*  fixes join:: \"'p ⇒ 'p ⇒ 'l\"</span>\n<span class=\"c\">  fixes find_parallel:: \"'l ⇒ 'p ⇒ 'l\" *)</span>\n</code></pre></div>\n<p>The original works if we pass AP as an argument to ◃:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">record</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n n-Type\">'p</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n n-Type\">'l</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">affine_plane_r</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">  </span><span class=\"n\">Points</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"'p set\"</span>\n<span class=\"w\">  </span><span class=\"n\">Lines</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"'l set\"</span>\n<span class=\"w\">  </span><span class=\"n\">incid</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"'p ⇒ 'l ⇒ bool\"</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"kp\">infix</span><span class=\"w\"> </span><span class=\"s\">‹◃›</span><span class=\"w\"> </span><span class=\"n\">60</span><span class=\"o\">)</span>\n\n<span class=\"k\">locale</span><span class=\"w\"> </span><span class=\"n\">affine_plane_data</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">  </span><span class=\"kp\">fixes</span><span class=\"w\"> </span><span class=\"n\">AP</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"kp\">structure</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"kp\">assumes</span><span class=\"w\"> </span><span class=\"n\">contains</span><span class=\"o\">:</span>\n<span class=\"w\">    </span><span class=\"s\">\"⟦ k ∈ Lines AP ; P ∈ Points AP⟧ ⟹ ((◃) AP k P)\"</span>\n</code></pre></div>\n<p>In both cases AP returns to blue - that only happens because of the error</p>",
        "id": 531426110,
        "sender_full_name": "Christian Pardillo Laursen",
        "timestamp": 1753725093
    },
    {
        "content": "<p>Wow. I have no idea what that character means, and figured it had something to do with writing a subscript of <code>G</code> on later uses of   <code>⊗</code>, which I didn't need.  As usual, I guess (a) that this takes me past this stumbling block, but (b) I've got more reading to do. </p>\n<p>Thanks!</p>",
        "id": 531427030,
        "sender_full_name": "John  Hughes",
        "timestamp": 1753725380
    },
    {
        "content": "<p>FYI some people consider the HOL-Algebra approach a bit old fashioned and prefer something like Ballarin's approach to algebra in the AFP. Also uses locales, but without records. Frankly I'm not convinced; to me it seems more like they both have their advantages and disadvantages.</p>",
        "id": 539992022,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1758109279
    },
    {
        "content": "<p>And yes, that weird character is basically a placeholder for the structure parameter. The syntax with the HOL-Algebra approach can get a bit clunky. That's one disadvantage over Ballarin's approach. Some better tool support could go a long way here...</p>",
        "id": 539992353,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1758109376
    },
    {
        "content": "<p>Thanks, Manuel. At this point I'm pretty much committed to the HOL-Algebra approach because with two types and a couple of functions, putting them all in a record just shortens all my \"have\" and \"show\" claims. :) I agree that a bit more tool support would be a nice thing.</p>",
        "id": 540592994,
        "sender_full_name": "John  Hughes",
        "timestamp": 1758382086
    }
]