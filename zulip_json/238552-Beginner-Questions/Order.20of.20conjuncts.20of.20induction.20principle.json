[
    {
        "content": "<p>I found the induction principles in Isabelle is not my favorite form, say, for transitive closure</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"o\">(?</span><span class=\"n\">x1.0</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">x2.0</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">∈</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">r⇧</span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">⟹</span>\n<span class=\"o\">(</span><span class=\"n\">⋀a</span><span class=\"w\"> </span><span class=\"n\">b.</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">∈</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">r</span><span class=\"w\"> </span><span class=\"n\">⟹</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">P</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">⟹</span>\n<span class=\"o\">(</span><span class=\"n\">⋀a</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"n\">c.</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">∈</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">r⇧</span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">⟹</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">P</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"n\">⟹</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">∈</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">r</span><span class=\"w\"> </span><span class=\"n\">⟹</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">P</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">⟹</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">P</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">x1.0</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">x2.0</span>\n</code></pre></div>\n<p>What I like instead is:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"o\">(</span><span class=\"n\">⋀a</span><span class=\"w\"> </span><span class=\"n\">b.</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">∈</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">r</span><span class=\"w\"> </span><span class=\"n\">⟹</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">P</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">⟹</span>\n<span class=\"o\">(</span><span class=\"n\">⋀a</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"n\">c.</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">∈</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">r⇧</span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">⟹</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">P</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"n\">⟹</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">∈</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">r</span><span class=\"w\"> </span><span class=\"n\">⟹</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">P</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">⟹</span>\n<span class=\"o\">(?</span><span class=\"n\">x1.0</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">x2.0</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">∈</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">r⇧</span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">⟹</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">P</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">x1.0</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">x2.0</span>\n</code></pre></div>\n<p>When proving theorems, my goal usually looks like \"(?x1.0, ?x2.0) ∈ ?r⇧+ ⟹ ?P ?x1.0 ?x2.0\", so I would like Isabelle to ask me to prove:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"o\">(</span><span class=\"n\">⋀a</span><span class=\"w\"> </span><span class=\"n\">b.</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">∈</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">r</span><span class=\"w\"> </span><span class=\"n\">⟹</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">P</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"o\">)</span><span class=\"w\">  </span><span class=\"n\">&amp;&amp;&amp;</span>\n<span class=\"o\">(</span><span class=\"n\">⋀a</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"n\">c.</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">∈</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">r⇧</span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">⟹</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">P</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"n\">⟹</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">∈</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">r</span><span class=\"w\"> </span><span class=\"n\">⟹</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">P</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Reflected in the proof procedure. Applying this principle gives me:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"n\">1.</span><span class=\"w\"> </span><span class=\"n\">⋀a</span><span class=\"w\"> </span><span class=\"n\">b.</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">t1</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">t2</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">∈</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">gen_birel</span><span class=\"w\"> </span><span class=\"n\">Op</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">unrav_rel</span><span class=\"w\"> </span><span class=\"n\">Op</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"o\">))</span><span class=\"n\">⇧</span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">⟹</span>\n<span class=\"w\">           </span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">∈</span><span class=\"w\"> </span><span class=\"n\">gen_birel</span><span class=\"w\"> </span><span class=\"n\">Op</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">unrav_rel</span><span class=\"w\"> </span><span class=\"n\">Op</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">⟹</span><span class=\"w\"> </span><span class=\"n\">length</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">&lt;</span><span class=\"w\"> </span><span class=\"n\">length</span><span class=\"w\"> </span><span class=\"n\">b</span>\n<span class=\"w\"> </span><span class=\"n\">2.</span><span class=\"w\"> </span><span class=\"n\">⋀a</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"n\">c.</span>\n<span class=\"w\">       </span><span class=\"o\">(</span><span class=\"n\">t1</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">t2</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">∈</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">gen_birel</span><span class=\"w\"> </span><span class=\"n\">Op</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">unrav_rel</span><span class=\"w\"> </span><span class=\"n\">Op</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"o\">))</span><span class=\"n\">⇧</span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">⟹</span>\n<span class=\"w\">       </span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">∈</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">gen_birel</span><span class=\"w\"> </span><span class=\"n\">Op</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">unrav_rel</span><span class=\"w\"> </span><span class=\"n\">Op</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"o\">))</span><span class=\"n\">⇧</span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">⟹</span>\n<span class=\"w\">       </span><span class=\"n\">length</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">&lt;</span><span class=\"w\"> </span><span class=\"n\">length</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"n\">⟹</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">∈</span><span class=\"w\"> </span><span class=\"n\">gen_birel</span><span class=\"w\"> </span><span class=\"n\">Op</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">unrav_rel</span><span class=\"w\"> </span><span class=\"n\">Op</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">⟹</span><span class=\"w\"> </span><span class=\"n\">length</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">&lt;</span><span class=\"w\"> </span><span class=\"n\">length</span><span class=\"w\"> </span><span class=\"n\">c</span>\n</code></pre></div>\n<p>The assumption \" (t1, t2) ∈ (gen_birel Op (unrav_rel Op R))⇧+\" is useless, and makes the thing looks a bit messy.</p>",
        "id": 477964619,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1729489524
    },
    {
        "content": "<p>I can live with it, but not as comfortable. Is there any way to obtain the thing I like instead? Or is there any good reason to convince me that this is a reasonable design for Isabelle?</p>",
        "id": 477964760,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1729489583
    },
    {
        "content": "<p>The assumption  <code>(t1, t2) ∈ (gen_birel Op (unrav_rel Op R))⇧++</code> should be consumed as you can see here:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span>\n<span class=\"w\">  </span><span class=\"kp\">assumes</span><span class=\"w\"> </span><span class=\"s\">\"⋀a b. (a, b) ∈ r ⟹ P a b\"</span><span class=\"w\"> </span><span class=\"kp\">and</span>\n<span class=\"w\">  </span><span class=\"s\">\"⋀a b c. (a, b) ∈ r⇧+ ⟹ P a b ⟹ (b, c) ∈ r ⟹ P a c\"</span>\n<span class=\"w\">  </span><span class=\"s\">\"(x1, x2) ∈ r⇧+\"</span>\n<span class=\"kp\">shows</span><span class=\"w\"> </span><span class=\"s\">\"P x1 x2\"</span>\n<span class=\"w\">  </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">assms</span><span class=\"o\">(</span><span class=\"n\">3</span><span class=\"o\">,</span><span class=\"n\">2</span><span class=\"o\">,</span><span class=\"n\">1</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">induction</span><span class=\"w\"> </span><span class=\"n\">rule</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">trancl_induct</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Are you sure that you not passing <del>it twice as argument cannot be as would be renamed</del> it again as argument later in the proof?</p>",
        "id": 477965127,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1729489776
    },
    {
        "content": "<p>Does it mean the assumption should not be there at all? Then I may wrote something wrong!</p>",
        "id": 477965413,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1729489931
    },
    {
        "content": "<p>I wrote:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">unrav_rel_trancl_length</span><span class=\"o\">:</span>\n<span class=\"s\">\"(t1, t2) ∈ (gen_birel Op (unrav_rel Op R))⇧+ ⟹ length t1 &lt; length t2\"</span>\n<span class=\"k\">proof</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">induct_tac</span><span class=\"w\"> </span><span class=\"n\">rule</span><span class=\"o\">:</span><span class=\"n\">trancl.induct</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">assumption</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 477965422,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1729489937
    },
    {
        "content": "<p>Use induction and it will be gone</p>",
        "id": 477965468,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1729489963
    },
    {
        "content": "<p>Induction reports error. Maybe because I use \"assumes shows\" instead?</p>",
        "id": 477965522,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1729490005
    },
    {
        "content": "<p>either induction or induct_tac + assumption</p>",
        "id": 477965575,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1729490035
    },
    {
        "content": "<p><a href=\"/user_uploads/14278/8CngMyCOULnlYgPRyPHf5ABR/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/14278/8CngMyCOULnlYgPRyPHf5ABR/image.png\" title=\"image.png\"><img data-original-dimensions=\"1040x126\" src=\"/user_uploads/thumbnail/14278/8CngMyCOULnlYgPRyPHf5ABR/image.png/840x560.webp\"></a></div>",
        "id": 477965579,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1729490039
    },
    {
        "content": "<p>induction does the assumption for you directly</p>",
        "id": 477965637,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1729490055
    },
    {
        "content": "<p>An I see.</p>",
        "id": 477965643,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1729490059
    },
    {
        "content": "<p>Thank you that is exactly what I want:<br>\n<a href=\"/user_uploads/14278/vzaJB2JtFuGcMPcGp0iGgzc-/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/14278/vzaJB2JtFuGcMPcGp0iGgzc-/image.png\" title=\"image.png\"><img data-original-dimensions=\"1040x126\" src=\"/user_uploads/thumbnail/14278/vzaJB2JtFuGcMPcGp0iGgzc-/image.png/840x560.webp\"></a></div>",
        "id": 477965710,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1729490100
    }
]