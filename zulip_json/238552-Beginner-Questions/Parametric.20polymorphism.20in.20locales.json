[
    {
        "content": "<p>Hi all! Is it possible to have parametrically polymorphic terms and types in locale contexts? A minimal example would be capturing the specification of a set container as a locale.</p>",
        "id": 313986355,
        "sender_full_name": "Hanno Becker",
        "timestamp": 1670250438
    },
    {
        "content": "<p>Not sure what you mean? something like<br>\nlocale foo<br>\nfixes mylist::\"'a list\"<br>\nassumes \"length mylist &gt; 0\"<br>\nbegin<br>\n....<br>\nend</p>",
        "id": 314064674,
        "sender_full_name": "Julian",
        "timestamp": 1670255497
    },
    {
        "content": "<p>Let's take the specification of a polymorphic sorting function as an example. If one writes</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">locale</span><span class=\"w\"> </span><span class=\"n\">sorting_function</span><span class=\"w\"></span>\n<span class=\"kp\">fixes</span><span class=\"w\"> </span><span class=\"n\">sort_func</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"'a::{ord} list =&gt; 'a list\"</span><span class=\"w\"></span>\n<span class=\"ow\">...</span><span class=\"w\"></span>\n</code></pre></div>\n<p>then it's my understanding that this will fix the type parameter <code>'a</code> at time of locale instantiation. In other words, the locale captures sorting functions for a specific type. What I want is a locale capturing polymorphic sorting functions.</p>",
        "id": 314068598,
        "sender_full_name": "Hanno Becker",
        "timestamp": 1670256597
    },
    {
        "content": "<p>I don't think that this is possible due to Isabelle's rank 1 polymorphism. You need to instantiate the locale for each type</p>",
        "id": 314069879,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1670256906
    },
    {
        "content": "<p>Or use <code>sorting_function.sort_func</code>to delay typing</p>",
        "id": 314070019,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1670256956
    },
    {
        "content": "<p>The example I alluded to originally is that of a locale capturing a set container, where the parametric container type should be part of the locale. So, in an ideal world, I'd like to be able to write something like</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">locale</span><span class=\"w\"> </span><span class=\"n\">set_abstraction</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"s\">\"fix_polymorphic_type container : (eq) type\"</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"kp\">fixes</span><span class=\"w\"> </span><span class=\"n\">new_container</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"'a container\"</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"kp\">fixes</span><span class=\"w\"> </span><span class=\"n\">add_element</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"'a =&gt; 'a container =&gt; 'a container\"</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"kp\">fixes</span><span class=\"w\"> </span><span class=\"n\">remove_element</span><span class=\"w\"> </span><span class=\"ow\">...</span><span class=\"w\"></span>\n</code></pre></div>\n<p>I assume that the answer here, too, is \"not possible in Isabelle\" -- but do you have ideas for workarounds?</p>",
        "id": 314084299,
        "sender_full_name": "Hanno Becker",
        "timestamp": 1670260908
    },
    {
        "content": "<p>I have no idea, sorry</p>",
        "id": 314092034,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1670263261
    },
    {
        "content": "<p>I don't even know why  you would want to do so (but I am not an haskell programmer)</p>",
        "id": 314092361,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1670263340
    },
    {
        "content": "<p>Please feel free to point out my misconception, but isn't this a fairly natural thing to do? You have some code which needs a set container with varying element types, but you don't want to bake a specific choice into the implementation because it is irrelevant. A 'parametric' locale would allow you to do that.</p>",
        "id": 314106976,
        "sender_full_name": "Hanno Becker",
        "timestamp": 1670267867
    },
    {
        "content": "<p>Wouldn't the one parameter locale you showed still work for the example that you are suggesting? You can always instantiate it to a product type <code>'a1 × 'a2 × ... × 'an</code>, to a function type or to a record.</p>",
        "id": 314108193,
        "sender_full_name": "Jonathan Julian Huerta y Munive",
        "timestamp": 1670268310
    },
    {
        "content": "<p>I am thinking of something like:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">locale</span><span class=\"w\"> </span><span class=\"n\">container</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"kp\">fixes</span><span class=\"w\"> </span><span class=\"n\">is_element</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"'container_type ⇒ 'element_type ⇒ bool\"</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kp\">and</span><span class=\"w\"> </span><span class=\"n\">add_element</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"'element_type ⇒ 'container_type ⇒ 'container_type\"</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kp\">and</span><span class=\"w\"> </span><span class=\"n\">remove_element</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"'element_type ⇒ 'container_type ⇒ 'container_type\"</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kp\">and</span><span class=\"w\"> </span><span class=\"n\">new_container</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"'io_type ⇒ 'container_type\"</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 314109860,
        "sender_full_name": "Jonathan Julian Huerta y Munive",
        "timestamp": 1670268884
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"441006\">@Jonathan Julian Huerta y Munive</span> Thanks for chiming in! In your locale, the <code>element_type</code> is fixed per instantiation, though, isn't it?</p>",
        "id": 314413352,
        "sender_full_name": "Hanno Becker",
        "timestamp": 1670405897
    },
    {
        "content": "<p>Yes, it is fixed. I do not know what you intend to model and for what purpose, but I think you can still do it with Isabelle, albeit with some work. For instance, if you are thinking of containers of strings, nats and ints, you can always do:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">locale</span><span class=\"w\"> </span><span class=\"n\">container</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"kp\">fixes</span><span class=\"w\"> </span><span class=\"n\">is_element</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"'container_type ⇒ 'element_type ⇒ bool\"</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kp\">and</span><span class=\"w\"> </span><span class=\"n\">add_element</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"'element_type ⇒ 'container_type ⇒ 'container_type\"</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kp\">and</span><span class=\"w\"> </span><span class=\"n\">remove_element</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"'element_type ⇒ 'container_type ⇒ 'container_type\"</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kp\">and</span><span class=\"w\"> </span><span class=\"n\">new_container</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"'io_type ⇒ 'container_type\"</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kp\">and</span><span class=\"w\"> </span><span class=\"n\">map2set</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"'container_type ⇒ 'element_type set\"</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"kp\">assumes</span><span class=\"w\"> </span><span class=\"n\">maps2set</span><span class=\"o\">:</span><span class=\"w\">  </span><span class=\"s\">\"is_element X x ⟷ x ∈ map2set X\"</span><span class=\"w\"></span>\n\n<span class=\"k\">datatype</span><span class=\"w\"> </span><span class=\"n\">some_types</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">tString</span><span class=\"w\"> </span><span class=\"s\">\"string\"</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">tInt</span><span class=\"w\"> </span><span class=\"s\">\"int\"</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">tNat</span><span class=\"w\"> </span><span class=\"s\">\"nat\"</span><span class=\"w\"></span>\n\n<span class=\"kn\">interpretation</span><span class=\"w\"> </span><span class=\"n\">some_types_set_is_container</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">container</span><span class=\"w\"> </span><span class=\"s\">\"λX (x::some_types). x ∈ X\"</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">insert</span><span class=\"w\"> </span><span class=\"s\">\"λx X. X - {x}\"</span><span class=\"w\"> </span><span class=\"s\">\"λio. {}\"</span><span class=\"w\"> </span><span class=\"n\">id</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">unfold_locales</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">auto</span><span class=\"w\"></span>\n\n<span class=\"kt\">find_theorems</span><span class=\"w\"> </span><span class=\"n\">name</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">some_types_set_is_container</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 314417770,
        "sender_full_name": "Jonathan Julian Huerta y Munive",
        "timestamp": 1670407259
    }
]