[
    {
        "content": "<p>I use zip lists to store values that are in correspondence, say, I can have<br>\n\"for all x1 y1. (x1,y1) in set (zip xl yl) ==&gt; P x1 y1\"</p>\n<p>and now I also have <br>\n\"for all x1 z1. (x1,z1) in set (zip xl zl) ==&gt; Q x1 z1\"</p>\n<p>and I want to pick a tuple (x,y,z) so I get P x y and Q x z. <br>\nBut I cannot rely on the nth element function to do that, since there are duplicated values. </p>\n<p>I tried zip all these three together, by considering \"(zip xl (yl zl))\". If I have \"(x,y) in zip xl yl\", then I have an n such that \"(x,y) = zip xl yl ! n\", and I can then pick the n-th element of \"(zip xl (yl zl))\". But sledgehammer does not seem to work well on this. </p>\n<p>Any suggestions on how to deal with this sort of things?</p>",
        "id": 498531274,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1739044608
    },
    {
        "content": "<p>By \"sledgehammer not working well\" I refer to</p>\n<p>I defined:<br>\n define ZL where \"ZL ≡ zip ul (zip ul' (zip phil fl'))\"<br>\n define phi0 where \"phi0 ≡ fst (snd (snd (ZL ! j)))\"</p>\n<p>and ask sledgehammer to prove \"phi0 = phil ! j\", it gives me nothing. (I did not miss any assumption on the lengths of the lists.)</p>",
        "id": 498532516,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1739045527
    },
    {
        "content": "<blockquote>\n<p>But I cannot rely on the nth element function to do that, since there are duplicated values. </p>\n</blockquote>\n<p>?<br>\nnth is just the nth element. The 5th element of [1,1,1,1,1,.....,1] is 1. Duplication have no importance</p>",
        "id": 498533866,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1739046812
    },
    {
        "content": "<p>I am not sure what you want. From what I understand it is this:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span>\n<span class=\"w\">  </span><span class=\"kp\">assumes</span><span class=\"w\"> </span><span class=\"s\">‹∀ x1 y1. (x1,y1)∈ set (zip xl yl) ⟶ P x1 y1›</span>\n<span class=\"w\">   </span><span class=\"s\">‹∀ x1 z1. (x1,z1) ∈ set (zip xl zl) ⟶ Q x1 z1›</span>\n<span class=\"w\">   </span><span class=\"s\">‹x ∈ set xl›</span>\n<span class=\"w\">   </span><span class=\"s\">‹length xl = length yl›</span>\n<span class=\"w\">   </span><span class=\"s\">‹length xl = length zl›</span>\n<span class=\"w\"> </span><span class=\"kp\">shows</span><span class=\"w\"> </span><span class=\"s\">‹∃n. x = xl ! n ∧ (x, yl ! n) ∈ set (zip xl yl) ∧ P x (yl ! n) ∧  (x, zl ! n) ∈ set (zip xl zl) ∧ Q x (zl ! n)›</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"kp\">is</span><span class=\"w\"> </span><span class=\"s\">‹∃n. ?R n›</span><span class=\"o\">)</span>\n<span class=\"k\">proof</span><span class=\"w\"> </span><span class=\"o\">-</span>\n<span class=\"w\">  </span><span class=\"k\">obtain</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"kp\">where</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">‹x = xl ! n›</span><span class=\"w\"> </span><span class=\"s\">‹n &lt; length xl›</span>\n<span class=\"w\">    </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">assms</span><span class=\"o\">(</span><span class=\"n\">3</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"k\">unfolding</span><span class=\"w\"> </span><span class=\"n\">in_set_conv_nth</span>\n<span class=\"w\">    </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">auto</span>\n<span class=\"w\">  </span><span class=\"k\">moreover</span><span class=\"w\"> </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"s\">‹Q (xl ! n) (zl ! n)›</span>\n<span class=\"w\">    </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">assms</span><span class=\"w\"> </span><span class=\"n\">n</span>\n<span class=\"w\">    </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">metis</span><span class=\"w\"> </span><span class=\"n\">in_set_zip</span><span class=\"w\"> </span><span class=\"n\">prod.sel</span><span class=\"o\">(</span><span class=\"n\">1</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">prod.sel</span><span class=\"o\">(</span><span class=\"n\">2</span><span class=\"o\">))</span>\n<span class=\"w\">  </span><span class=\"k\">ultimately</span><span class=\"w\"> </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"s\">‹?R n›</span>\n<span class=\"w\">    </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">assms</span>\n<span class=\"w\">    </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">metis</span><span class=\"w\"> </span><span class=\"n\">in_set_zip</span><span class=\"w\"> </span><span class=\"n\">prod.sel</span><span class=\"o\">(</span><span class=\"n\">1</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">prod.sel</span><span class=\"o\">(</span><span class=\"n\">2</span><span class=\"o\">))</span>\n<span class=\"w\">  </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">thesis</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">blast</span>\n<span class=\"k\">qed</span>\n</code></pre></div>",
        "id": 498534935,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1739047689
    },
    {
        "content": "<p>Yes. The lemma is what I mean. The annoying thing is that I need it for four lists. It is then obvious from your proof that such a proof is not supposed to be automatic...</p>",
        "id": 498535813,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1739048565
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"233198\">Mathias Fleury</span> <a href=\"#narrow/channel/238552-Beginner-Questions/topic/Picking.20corresponding.20values.20from.20zip.20lists/near/498533866\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>But I cannot rely on the nth element function to do that, since there are duplicated values. </p>\n</blockquote>\n<p>?<br>\nnth is just the nth element. The 5th element of [1,1,1,1,1,.....,1] is 1. Duplication have no importance</p>\n</blockquote>\n<p>I mean I cannot rely on the fact that (x,y) = zip xl yl ! i to pick the i-th element of zip xl zl to get the effect. That is because we have duplicates.</p>",
        "id": 498535852,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1739048618
    },
    {
        "content": "<p>So this is what you want, going from the element in the zip to the element in the original list</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span>\n<span class=\"w\">  </span><span class=\"kp\">assumes</span><span class=\"w\"> </span><span class=\"s\">\"(u, u') ∈ set (zip ul ul')\"</span>\n<span class=\"w\">  </span><span class=\"kp\">obtains</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"kp\">where</span><span class=\"w\"> </span><span class=\"s\">\"u' = ul' ! i\"</span><span class=\"w\"> </span><span class=\"s\">\"u = ul ! i\"</span><span class=\"w\"> </span><span class=\"s\">\"i &lt; length ul\"</span><span class=\"w\"> </span><span class=\"s\">\"i &lt; length ul'\"</span>\n<span class=\"w\">  </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">assms</span>\n<span class=\"w\">  </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">metis</span><span class=\"w\"> </span><span class=\"n\">in_set_zip</span><span class=\"w\"> </span><span class=\"n\">prod.sel</span><span class=\"o\">(</span><span class=\"n\">1</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">prod.sel</span><span class=\"o\">(</span><span class=\"n\">2</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>?</p>",
        "id": 498536126,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1739048867
    },
    {
        "content": "<p>I believe that s not enough since what I have is:</p>\n<p>(x,y) in set zip xl yl --&gt; P x y<br>\n(y,z) in set zip yl zl --&gt; Q y z<br>\n(z,e) in set zip zl el --&gt; R z e<br>\nand I have (x,y) fixed, want a z and a e such that P x y and Q y z and R z e.</p>",
        "id": 498536491,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1739049164
    },
    {
        "content": "<p>Oh just discovered I need 5 lists involved...</p>",
        "id": 498536529,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1739049221
    },
    {
        "content": "<p>Yeah but this is wrong</p>",
        "id": 498536602,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1739049291
    },
    {
        "content": "<p>Why cannot we zip all the lists together, and look for a tuple that has the given pair?</p>",
        "id": 498536658,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1739049353
    },
    {
        "content": "<p>Ah no wait transitive stuff</p>",
        "id": 498536710,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1739049370
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"n\">xl</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">1</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">1</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">1</span><span class=\"o\">]</span>\n<span class=\"n\">yl</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">1</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">1</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">1</span><span class=\"o\">]</span>\n<span class=\"n\">zl</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">1</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">2</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">3</span><span class=\"o\">]</span>\n<span class=\"n\">Q</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"n\">z</span><span class=\"w\"> </span><span class=\"n\">&lt;</span><span class=\"o\">--</span><span class=\"n\">&gt;</span><span class=\"w\"> </span><span class=\"n\">z</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">3</span>\n<span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">1</span>\n<span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">1</span>\n</code></pre></div>\n<p>Ah right you vary the position of x</p>",
        "id": 498536784,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1739049469
    },
    {
        "content": "<p>take big zip of 5 lists is quite brute force and I think maybe I need this... (But I really do not want to use it by hand)<br>\nlemma fst_zip :<br>\n  assumes \"length l1 = length l2\"<br>\n  and \"n &lt; length l1\"<br>\n  shows <br>\n\"fst (zip l1 l2 ! n) = l1 ! n\" <br>\n  using assms(1) assms(2) by force</p>\n<p>lemma snd_zip :<br>\n  assumes \"length l1 = length l2\"<br>\n  and \"n &lt; length l1\"<br>\n  shows <br>\n\"snd (zip l1 l2 ! n) = l2 ! n\" using assms <br>\n  by simp</p>",
        "id": 498536785,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1739049476
    },
    {
        "content": "<p>Earlier you had:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"s\">\"for all x1 z1. (x1,z1) in set (zip xl zl) ==&gt; Q x1 z1\"</span>\n</code></pre></div>\n<p>This is a typo for <code>zip yl zl</code>?</p>",
        "id": 498537153,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1739049747
    },
    {
        "content": "<p>Do you mean<code>\"for all x1 z1. (x1,z1) in set (zip yl zl) ==&gt; Q x1 z1\"</code>?</p>",
        "id": 498537223,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1739049831
    },
    {
        "content": "<p>I do not mean that.</p>",
        "id": 498537295,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1739049886
    },
    {
        "content": "<p>I should figure out the precise abstraction of the thm I need.</p>",
        "id": 498537309,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1739049905
    },
    {
        "content": "<p>If some of the relations are symmetric the order of list does not matter, otherwise it may do.</p>",
        "id": 498537341,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1739049937
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"754515\">Yiming Xu</span> <a href=\"#narrow/channel/238552-Beginner-Questions/topic/Picking.20corresponding.20values.20from.20zip.20lists/near/498531274\">said</a>:</p>\n<blockquote>\n<p>I use zip lists to store values that are in correspondence, say, I can have<br>\n\"for all x1 y1. (x1,y1) in set (zip xl yl) ==&gt; P x1 y1\"</p>\n<p>and now I also have <br>\n\"for all x1 z1. (x1,z1) in set (zip xl zl) ==&gt; Q x1 z1\"</p>\n</blockquote>",
        "id": 498537410,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1739049988
    },
    {
        "content": "<p>This is an over-simplification. Let me be more careful and write it out.</p>",
        "id": 498537558,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1739050145
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">H</span><span class=\"o\">:</span>\n<span class=\"w\">  </span><span class=\"kp\">assumes</span><span class=\"w\"> </span><span class=\"s\">‹∀ x1 y1. (x1,y1)∈ set (zip xl yl) ⟶ P x1 y1›</span>\n<span class=\"w\">    </span><span class=\"s\">‹∀ x1 z1. (x1,z1) ∈ set (zip yl zl) ⟶ Q x1 z1›</span>\n<span class=\"w\">   </span><span class=\"s\">‹(x, y) ∈ set (zip xl yl)›</span>\n<span class=\"w\">   </span><span class=\"s\">‹length yl = length zl›</span>\n<span class=\"w\"> </span><span class=\"kp\">shows</span><span class=\"w\"> </span><span class=\"s\">\"∃z. (y, z) ∈ set (zip yl zl) ∧Q y z\"</span>\n<span class=\"w\">  </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">assms</span>\n<span class=\"w\">  </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">meson</span><span class=\"w\"> </span><span class=\"n\">in_set_impl_in_set_zip1</span><span class=\"w\"> </span><span class=\"n\">in_set_zipE</span><span class=\"o\">)</span>\n\n\n\n<span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">H2</span><span class=\"o\">:</span>\n<span class=\"w\">  </span><span class=\"kp\">assumes</span><span class=\"w\"> </span><span class=\"s\">‹∀ x1 y1. (x1,y1)∈ set (zip xl yl) ⟶ P x1 y1›</span>\n<span class=\"w\">    </span><span class=\"s\">‹∀ x1 z1. (x1,z1) ∈ set (zip yl zl) ⟶ Q x1 z1›</span>\n<span class=\"w\">    </span><span class=\"s\">‹∀ x1 z1. (x1,z1) ∈ set (zip zl el) ⟶ R x1 z1›</span>\n<span class=\"w\">   </span><span class=\"s\">‹(x, y) ∈ set (zip xl yl)›</span>\n<span class=\"w\">   </span><span class=\"s\">‹length yl = length zl›</span>\n<span class=\"w\">   </span><span class=\"s\">‹length zl = length el›</span>\n<span class=\"w\"> </span><span class=\"kp\">shows</span><span class=\"w\"> </span><span class=\"s\">\"∃z e. (y, z) ∈ set (zip yl zl) ∧ Q y z ∧ (z, e) ∈ set (zip zl el) ∧ R z e\"</span>\n<span class=\"w\">  </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">assms</span><span class=\"w\"> </span><span class=\"n\">H</span><span class=\"o\">[</span><span class=\"n\">OF</span><span class=\"w\"> </span><span class=\"n\">assms</span><span class=\"o\">(</span><span class=\"n\">1</span><span class=\"o\">,</span><span class=\"n\">2</span><span class=\"o\">,</span><span class=\"n\">4</span><span class=\"o\">,</span><span class=\"n\">5</span><span class=\"o\">)]</span><span class=\"w\"> </span><span class=\"n\">H</span><span class=\"o\">[</span><span class=\"n\">OF</span><span class=\"w\"> </span><span class=\"n\">assms</span><span class=\"o\">(</span><span class=\"n\">2</span><span class=\"o\">,</span><span class=\"n\">3</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">_</span><span class=\"w\"> </span><span class=\"n\">assms</span><span class=\"o\">(</span><span class=\"n\">6</span><span class=\"o\">)]</span>\n<span class=\"w\">  </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">blast</span>\n\n<span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">H3</span><span class=\"o\">:</span>\n<span class=\"w\">  </span><span class=\"kp\">assumes</span><span class=\"w\"> </span><span class=\"s\">‹∀ x1 y1. (x1,y1)∈ set (zip xl yl) ⟶ P x1 y1›</span>\n<span class=\"w\">    </span><span class=\"s\">‹∀ x1 z1. (x1,z1) ∈ set (zip yl zl) ⟶ Q x1 z1›</span>\n<span class=\"w\">    </span><span class=\"s\">‹∀ x1 z1. (x1,z1) ∈ set (zip zl el) ⟶ R x1 z1›</span>\n<span class=\"w\">    </span><span class=\"s\">‹∀ x1 z1. (x1,z1) ∈ set (zip el fl) ⟶ S x1 z1›</span>\n<span class=\"w\">   </span><span class=\"s\">‹(x, y) ∈ set (zip xl yl)›</span>\n<span class=\"w\">   </span><span class=\"s\">‹length yl = length zl›</span>\n<span class=\"w\">   </span><span class=\"s\">‹length zl = length el›</span>\n<span class=\"w\">   </span><span class=\"s\">‹length el = length fl›</span>\n<span class=\"w\"> </span><span class=\"kp\">shows</span><span class=\"w\"> </span><span class=\"s\">\"∃z e f. (y, z) ∈ set (zip yl zl) ∧ Q y z ∧ (z, e) ∈ set (zip zl el) ∧ R z e</span>\n<span class=\"s\">  ∧ (e, f) ∈ set (zip el fl) ∧ S e f\"</span>\n<span class=\"w\">  </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">assms</span><span class=\"w\"> </span><span class=\"n\">H</span><span class=\"o\">[</span><span class=\"n\">OF</span><span class=\"w\"> </span><span class=\"n\">assms</span><span class=\"o\">(</span><span class=\"n\">1</span><span class=\"o\">,</span><span class=\"n\">2</span><span class=\"o\">,</span><span class=\"n\">5</span><span class=\"o\">,</span><span class=\"n\">6</span><span class=\"o\">)]</span><span class=\"w\"> </span><span class=\"n\">H</span><span class=\"o\">[</span><span class=\"n\">OF</span><span class=\"w\"> </span><span class=\"n\">assms</span><span class=\"o\">(</span><span class=\"n\">2</span><span class=\"o\">,</span><span class=\"n\">3</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">_</span><span class=\"w\"> </span><span class=\"n\">assms</span><span class=\"o\">(</span><span class=\"n\">7</span><span class=\"o\">)]</span>\n<span class=\"w\">   </span><span class=\"n\">H</span><span class=\"o\">[</span><span class=\"n\">OF</span><span class=\"w\"> </span><span class=\"n\">assms</span><span class=\"o\">(</span><span class=\"n\">3</span><span class=\"o\">,</span><span class=\"n\">4</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">_</span><span class=\"w\"> </span><span class=\"n\">assms</span><span class=\"o\">(</span><span class=\"n\">8</span><span class=\"o\">)]</span>\n<span class=\"w\">  </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">blast</span>\n</code></pre></div>",
        "id": 498537579,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1739050185
    },
    {
        "content": "<p>having to instantiate H is a pain, but it works</p>",
        "id": 498537645,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1739050218
    },
    {
        "content": "<p>(the length part is important, nitpick told me so!)</p>",
        "id": 498537670,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1739050263
    },
    {
        "content": "<p>Thanks and I am impressed with how hard it is. I just have done some investigation and found out that I have 4 lists, and 4 relations, instead of 4 lists and 3 relations.</p>",
        "id": 498537979,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1739050541
    },
    {
        "content": "<p>I will try out your technology first and think about it works for that case.</p>",
        "id": 498538066,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1739050592
    },
    {
        "content": "<p>I think I want :</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"o\">:</span>\n\n<span class=\"w\">  </span><span class=\"kp\">assumes</span>\n<span class=\"s\">\"⋀u phi. (u,phi) ∈ set (zip us phis) ==&gt; P u phi\"</span>\n\n<span class=\"kp\">and</span>\n<span class=\"s\">\"⋀v psi. (v,psi) ∈ set (zip vs psis) ==&gt; Q v psi\"</span>\n<span class=\"kp\">and</span>\n<span class=\"s\">\"⋀(phi::'a) psi::'a. (phi,psi) ∈ set (zip phis psis) ==&gt; E phi psi \"</span>\n<span class=\"kp\">and</span>\n<span class=\"s\">\"(u,v) ∈ set (zip us vs)\"</span>\n<span class=\"kp\">and</span><span class=\"w\"> </span><span class=\"s\">\"equiv UNIV {(x,y). E x y}\"</span>\n<span class=\"kp\">and</span><span class=\"w\"> </span><span class=\"s\">\"length us = length vs\"</span>\n<span class=\"kp\">and</span><span class=\"w\"> </span><span class=\"s\">\"length us = length phis\"</span>\n<span class=\"kp\">and</span><span class=\"w\"> </span><span class=\"s\">\"length vs = length psis\"</span>\n<span class=\"kp\">and</span><span class=\"w\"> </span><span class=\"s\">\"length psis = length phis\"</span>\n<span class=\"kp\">shows</span>\n<span class=\"s\">\"∃phi psi. P u phi ∧ Q v psi ∧ E phi psi\"</span><span class=\"w\"> </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">assms</span><span class=\"w\"> </span><span class=\"kt\">nitpick</span>\n</code></pre></div>",
        "id": 498540412,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1739052542
    },
    {
        "content": "<p>which is solved by sledgehammer.</p>",
        "id": 498565465,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1739076283
    },
    {
        "content": "<p>I'm not sure if this helps you, but there is the <code>list_all2</code> which is like a zip that apply the predicate pairwise on the lists. (and it returns false if the list don't have the same length)</p>",
        "id": 498703477,
        "sender_full_name": "Balazs Toth",
        "timestamp": 1739178421
    }
]