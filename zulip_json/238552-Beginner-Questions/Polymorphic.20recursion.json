[
    {
        "content": "<p>Just trying it out naively does not work. Is there are trick or is it not possible to use polymorphic recursion in datatypes?</p>",
        "id": 236152830,
        "sender_full_name": "Jan van Brügge",
        "timestamp": 1619434109
    },
    {
        "content": "<p>These are called non-uniform datatypes, and no, the normal datatype package cannot do that.</p>\n<p>There's a paper by <span class=\"user-mention\" data-user-id=\"366824\">@Jasmin Blanchette</span> et al. from a few years ago on it though: <a href=\"https://www21.in.tum.de/~traytel/papers/lics17-nonuniform/nonuniform.pdf\">https://www21.in.tum.de/~traytel/papers/lics17-nonuniform/nonuniform.pdf</a></p>",
        "id": 236153093,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1619434279
    },
    {
        "content": "<p>(Tagging <span class=\"user-mention\" data-user-id=\"361271\">@Dmitriy Traytel</span> as well)</p>",
        "id": 236153186,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1619434329
    },
    {
        "content": "<p>Yes, unfortunately for non-uniform datatypes there is only a partial implementation (which is thus not part of the Isabelle distribution). But the approach described in the linked paper could be nonetheless followed in principle (define a larger uniform (co)datatype first; carve out the more precise non-uniform type via <code>typedef</code>; lift definitions and theorems from the too-large uniform type to the non-uniform one).</p>",
        "id": 236153610,
        "sender_full_name": "Dmitriy Traytel",
        "timestamp": 1619434588
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"392255\">@Jan van Brügge</span> what is the specific non-uniform type you would like to define?</p>",
        "id": 236153779,
        "sender_full_name": "Dmitriy Traytel",
        "timestamp": 1619434700
    },
    {
        "content": "<p>A finger tree:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">datatype</span> <span class=\"n n-Type\">'a</span> <span class=\"n\">digit</span> <span class=\"o\">=</span> <span class=\"n\">One</span> <span class=\"n n-Type\">'a</span> <span class=\"o\">|</span> <span class=\"n\">Two</span> <span class=\"n n-Type\">'a</span> <span class=\"n n-Type\">'a</span> <span class=\"o\">|</span> <span class=\"n\">Three</span> <span class=\"n n-Type\">'a</span> <span class=\"n n-Type\">'a</span> <span class=\"n n-Type\">'a</span> <span class=\"o\">|</span> <span class=\"n\">Four</span> <span class=\"n n-Type\">'a</span> <span class=\"n n-Type\">'a</span> <span class=\"n n-Type\">'a</span> <span class=\"n n-Type\">'a</span>\n<span class=\"k\">datatype</span> <span class=\"n n-Type\">'a</span> <span class=\"n\">node</span> <span class=\"o\">=</span> <span class=\"n\">Node2</span> <span class=\"n n-Type\">'a</span> <span class=\"n n-Type\">'a</span> <span class=\"o\">|</span> <span class=\"n\">Node3</span> <span class=\"n n-Type\">'a</span> <span class=\"n n-Type\">'a</span> <span class=\"n n-Type\">'a</span>\n<span class=\"k\">datatype</span> <span class=\"n n-Type\">'a</span> <span class=\"n\">fingertree</span> <span class=\"o\">=</span> <span class=\"n\">Empty</span> <span class=\"o\">|</span> <span class=\"n\">Single</span> <span class=\"n n-Type\">'a</span> <span class=\"o\">|</span> <span class=\"n\">Deep</span> <span class=\"s\">\"'a digit\"</span> <span class=\"s\">\"'a node fingertree\"</span> <span class=\"s\">\"'a digit\"</span>\n</code></pre></div>",
        "id": 236154411,
        "sender_full_name": "Jan van Brügge",
        "timestamp": 1619435035
    },
    {
        "content": "<p>But I just wanted to quickly check a property of the haskell code, so any heavy encoding is probably not worth it as it strays too far from the original definition</p>",
        "id": 236154580,
        "sender_full_name": "Jan van Brügge",
        "timestamp": 1619435125
    },
    {
        "content": "<p>There are finger trees in the AFP: <a href=\"https://www.isa-afp.org/browser_info/current/AFP/Finger-Trees/FingerTree.html\">https://www.isa-afp.org/browser_info/current/AFP/Finger-Trees/FingerTree.html</a></p>",
        "id": 236154969,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1619435364
    },
    {
        "content": "<p>Although that may not help you.</p>",
        "id": 236155075,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1619435421
    },
    {
        "content": "<p>Yes, I saw that, but as said, I tried to prove something about the haskell code, so a completely different definition is not really helpful</p>",
        "id": 236155077,
        "sender_full_name": "Jan van Brügge",
        "timestamp": 1619435423
    },
    {
        "content": "<p>So following the approach from our paper you would end up with the following definitions</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">datatype</span> <span class=\"n n-Type\">'a</span> <span class=\"n\">digit</span> <span class=\"o\">=</span> <span class=\"n\">One</span> <span class=\"n n-Type\">'a</span> <span class=\"o\">|</span> <span class=\"n\">Two</span> <span class=\"n n-Type\">'a</span> <span class=\"n n-Type\">'a</span> <span class=\"o\">|</span> <span class=\"n\">Three</span> <span class=\"n n-Type\">'a</span> <span class=\"n n-Type\">'a</span> <span class=\"n n-Type\">'a</span> <span class=\"o\">|</span> <span class=\"n\">Four</span> <span class=\"n n-Type\">'a</span> <span class=\"n n-Type\">'a</span> <span class=\"n n-Type\">'a</span> <span class=\"n n-Type\">'a</span>\n<span class=\"k\">datatype</span> <span class=\"n n-Type\">'a</span> <span class=\"n\">node</span> <span class=\"o\">=</span> <span class=\"n\">Node2</span> <span class=\"n n-Type\">'a</span> <span class=\"n n-Type\">'a</span> <span class=\"o\">|</span> <span class=\"n\">Node3</span> <span class=\"n n-Type\">'a</span> <span class=\"n n-Type\">'a</span> <span class=\"n n-Type\">'a</span>\n\n<span class=\"k\">datatype</span> <span class=\"o\">(</span><span class=\"n\">discs_sels</span><span class=\"o\">)</span> <span class=\"n n-Type\">'a</span> <span class=\"n\">sh</span> <span class=\"o\">=</span> <span class=\"n\">Leaf</span> <span class=\"n n-Type\">'a</span> <span class=\"o\">|</span> <span class=\"n\">Node</span> <span class=\"s\">\"'a sh node\"</span>\n<span class=\"k\">datatype</span> <span class=\"n n-Type\">'a</span> <span class=\"n\">raw</span> <span class=\"o\">=</span> <span class=\"n\">Empty0</span> <span class=\"o\">|</span> <span class=\"n\">Single0</span> <span class=\"s\">\"'a sh\"</span> <span class=\"o\">|</span> <span class=\"n\">Deep0</span> <span class=\"s\">\"('a sh) digit\"</span> <span class=\"s\">\"'a raw\"</span> <span class=\"s\">\"('a sh) digit\"</span>\n\n<span class=\"k\">inductive</span> <span class=\"n\">ok_sh</span> <span class=\"kp\">where</span>\n  <span class=\"s\">\"ok_sh 0 (Leaf x)\"</span>\n<span class=\"o\">|</span> <span class=\"s\">\"pred_node (ok_sh n) s ⟹ ok_sh (Suc n) (Node s)\"</span>\n<span class=\"kp\">monos</span> <span class=\"n\">node.pred_mono</span>\n\n<span class=\"k\">inductive</span> <span class=\"n\">ok</span> <span class=\"kp\">where</span>\n  <span class=\"s\">\"ok n Empty0\"</span>\n<span class=\"o\">|</span> <span class=\"s\">\"ok_sh n s ⟹ ok n (Single0 s)\"</span>\n<span class=\"o\">|</span> <span class=\"s\">\"pred_digit (ok_sh n) d1 ⟹ ok (Suc n) t ⟹ pred_digit (ok_sh n) d2 ⟹ ok n (Deep0 d1 t d2)\"</span>\n\n<span class=\"k\">primrec</span> <span class=\"n\">flat_sh</span> <span class=\"kp\">where</span>\n  <span class=\"s\">\"flat_sh (Leaf x) = Node (map_node Leaf x)\"</span>\n<span class=\"o\">|</span> <span class=\"s\">\"flat_sh (Node t) = Node (map_node flat_sh t)\"</span>\n\n<span class=\"k\">primrec</span> <span class=\"n\">flat</span> <span class=\"kp\">where</span>\n  <span class=\"s\">\"flat Empty0 = Empty0\"</span>\n<span class=\"o\">|</span> <span class=\"s\">\"flat (Single0 s) = Single0 (flat_sh s)\"</span>\n<span class=\"o\">|</span> <span class=\"s\">\"flat (Deep0 d1 t d2) = Deep0 (map_digit flat_sh d1) (flat t) (map_digit flat_sh d2)\"</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">ok_sh_flat_sh</span><span class=\"o\">:</span> <span class=\"s\">\"ok_sh n s ⟹ ok_sh (Suc n) (flat_sh s)\"</span>\n  <span class=\"k\">by</span> <span class=\"o\">(</span><span class=\"n\">induct</span> <span class=\"n\">n</span> <span class=\"n\">s</span> <span class=\"n\">rule</span><span class=\"o\">:</span> <span class=\"n\">ok_sh.induct</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">auto</span> <span class=\"n\">intro</span><span class=\"o\">!:</span> <span class=\"n\">ok_sh.intros</span> <span class=\"n\">simp</span><span class=\"o\">:</span> <span class=\"n\">node.set_map</span> <span class=\"n\">node.pred_set</span><span class=\"o\">)</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">ok_flat</span><span class=\"o\">:</span> <span class=\"s\">\"ok n t ⟹ ok (Suc n) (flat t)\"</span>\n  <span class=\"k\">by</span> <span class=\"o\">(</span><span class=\"n\">induct</span> <span class=\"n\">n</span> <span class=\"n\">t</span> <span class=\"n\">rule</span><span class=\"o\">:</span> <span class=\"n\">ok.induct</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">auto</span> <span class=\"n\">intro</span><span class=\"o\">!:</span> <span class=\"n\">ok.intros</span> <span class=\"n\">simp</span><span class=\"o\">:</span> <span class=\"n\">digit.set_map</span> <span class=\"n\">digit.pred_set</span> <span class=\"n\">ok_sh_flat_sh</span><span class=\"o\">)</span>\n\n<span class=\"kn\">typedef</span> <span class=\"n n-Type\">'a</span> <span class=\"n\">fingertree</span> <span class=\"o\">=</span> <span class=\"s\">\"{t :: 'a raw. ok 0 t}\"</span>\n  <span class=\"k\">by</span> <span class=\"o\">(</span><span class=\"n\">rule</span> <span class=\"n\">exI</span><span class=\"o\">[</span><span class=\"n\">of</span> <span class=\"o\">_</span> <span class=\"n\">Empty0</span><span class=\"o\">])</span> <span class=\"o\">(</span><span class=\"n\">auto</span> <span class=\"n\">intro</span><span class=\"o\">:</span> <span class=\"n\">ok.intros</span><span class=\"o\">)</span>\n\n<span class=\"k\">setup_lifting</span> <span class=\"n\">type_definition_fingertree</span>\n\n<span class=\"kn\">lift_definition</span> <span class=\"n\">Empty</span> <span class=\"o\">::</span> <span class=\"s\">\"'a fingertree\"</span> <span class=\"kp\">is</span> <span class=\"s\">\"Empty0\"</span>\n  <span class=\"k\">by</span> <span class=\"o\">(</span><span class=\"n\">auto</span> <span class=\"n\">intro</span><span class=\"o\">:</span> <span class=\"n\">ok.intros</span><span class=\"o\">)</span>\n\n<span class=\"kn\">lift_definition</span> <span class=\"n\">Single</span> <span class=\"o\">::</span> <span class=\"s\">\"'a ⇒ 'a fingertree\"</span> <span class=\"kp\">is</span> <span class=\"s\">\"Single0 o Leaf\"</span>\n  <span class=\"k\">by</span> <span class=\"o\">(</span><span class=\"n\">auto</span> <span class=\"n\">intro</span><span class=\"o\">:</span> <span class=\"n\">ok.intros</span> <span class=\"n\">ok_sh.intros</span><span class=\"o\">)</span>\n\n<span class=\"kn\">lift_definition</span> <span class=\"n\">Deep</span> <span class=\"o\">::</span> <span class=\"s\">\"'a digit ⇒ 'a node fingertree ⇒ 'a digit ⇒ 'a fingertree\"</span> <span class=\"kp\">is</span>\n  <span class=\"s\">\"λd1 t d2. Deep0 (map_digit Leaf d1) (flat t) (map_digit Leaf d1)\"</span>\n  <span class=\"k\">by</span> <span class=\"o\">(</span><span class=\"n\">auto</span> <span class=\"n\">intro</span><span class=\"o\">!:</span> <span class=\"n\">ok.intros</span> <span class=\"n\">ok_sh.intros</span> <span class=\"n\">simp</span><span class=\"o\">:</span> <span class=\"n\">digit.set_map</span> <span class=\"n\">digit.pred_set</span> <span class=\"n\">ok_flat</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>This possibly falls under what you call \"heavy encoding\" though. On the other hand the precise definition does not matter; what matters are the properties of Empty, Single, Deep (e.g., injectivity, distinctness) and with a little bit of work (also described in our paper) one can get them---then it does not matter how the type was defined.</p>",
        "id": 236180750,
        "sender_full_name": "Dmitriy Traytel",
        "timestamp": 1619446419
    }
]