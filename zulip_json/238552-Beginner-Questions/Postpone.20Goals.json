[
    {
        "content": "<p>Hi :) I am currently doing proofs in which similar goals are generated multiple times. As a simplified example, let's say I have the following code:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">context</span><span class=\"w\"> </span><span class=\"n\">cring</span><span class=\"w\"> </span><span class=\"k\">begin</span><span class=\"w\"></span>\n\n<span class=\"k\">definition</span><span class=\"w\"> </span><span class=\"n\">inc</span><span class=\"w\"> </span><span class=\"kp\">where</span><span class=\"w\"></span>\n<span class=\"s\">\"inc x ‚â° x ‚äï ùü≠\"</span><span class=\"w\"></span>\n\n<span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">inc_closed</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]:</span><span class=\"w\"> </span><span class=\"s\">\"x ‚àà carrier R ‚üπ inc x ‚àà carrier R\"</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">unfolding</span><span class=\"w\"> </span><span class=\"n\">inc_def</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">simp</span><span class=\"w\"></span>\n\n<span class=\"kn\">lemma</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"kp\">assumes</span><span class=\"w\"> </span><span class=\"s\">\"x ‚àà carrier R\"</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"kp\">shows</span><span class=\"w\"> </span><span class=\"s\">\"x ‚äó (inc (inc x)) ‚àà carrier R\"</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">intro</span><span class=\"w\"> </span><span class=\"n\">m_closed</span><span class=\"o\">)</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Then, the application of <code>intro</code>leaves these two subgoals:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"n\">goal</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">2</span><span class=\"w\"> </span><span class=\"n\">subgoals</span><span class=\"o\">):</span><span class=\"w\"></span>\n<span class=\"w\"> </span><span class=\"n\">1.</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">‚àà</span><span class=\"w\"> </span><span class=\"n\">carrier</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"w\"></span>\n<span class=\"w\"> </span><span class=\"n\">2.</span><span class=\"w\"> </span><span class=\"n\">inc</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">inc</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">‚àà</span><span class=\"w\"> </span><span class=\"n\">carrier</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"w\"></span>\n</code></pre></div>\n<p>I could now prove the first subgoal by writing <code>using assms apply simp</code>directly, but if I would start proving the second subgoal by <code>apply (intro inc_closed)</code>, this would generate exactly the same as the first subgoal. So, is there a way to postpone the first subgoal, so that I can simplify the second subgoal first and then solve the remaining equal goals at once?</p>",
        "id": 321664506,
        "sender_full_name": "Jakob Schulz",
        "timestamp": 1673882027
    },
    {
        "content": "<p>You can use <code>defer</code> but that is not good style.</p>",
        "id": 321669680,
        "sender_full_name": "Lukas Stevens",
        "timestamp": 1673883463
    },
    {
        "content": "<p>I think <code>apply(intro m_closed; (intro inc_closed)?)</code> should work</p>",
        "id": 321670070,
        "sender_full_name": "Lukas Stevens",
        "timestamp": 1673883585
    }
]