[
    {
        "content": "<p>Suppose I have a list of functions <code>[f1, f2, ..., fn]</code> that take a type <code>'a</code> element and returns a value of type <code>'a</code>.<br>\nNow that I have proven each function satisfied some invariant <code>G</code>, how do I combine these lemmas with a case split to prove these functions as a list still satisfy that invariant? Namely:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">f1_good</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"G a ==&gt; G (f1 a)\"</span>\n<span class=\"ow\">...</span>\n<span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">fn_good</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"G a ==&gt; G (fn a)\"</span>\n<span class=\"ow\">...</span>\n<span class=\"k\">done</span>\n\n<span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">together</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"G a ==&gt; a' </span><span class=\"ss\">\\&lt;in&gt;</span><span class=\"s\"> (concat (map (</span><span class=\"ss\">\\&lt;lambda&gt;</span><span class=\"s\">f. f a) [f1, f2, ..., fn]))</span>\n<span class=\"s\">==&gt; G a'\"</span>\n<span class=\"k\">proof</span>\n<span class=\"k\">case</span><span class=\"w\"> </span><span class=\"n\">f1</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">f1_good</span>\n<span class=\"k\">case</span><span class=\"w\"> </span><span class=\"n\">f2</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">f2_good</span>\n<span class=\"ow\">...</span>\n<span class=\"k\">qed</span>\n</code></pre></div>\n<p>For example, in the following MWE, how do I construct a case split in the <code>toplevel</code> lemma, such that each case defines a scenario where a specific element is chosen from a list?</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">definition</span><span class=\"w\"> </span><span class=\"s\">\"P n = even n\"</span>\n\n<span class=\"k\">definition</span><span class=\"w\"> </span><span class=\"s\">\"Q n =  (n ≥ 100)\"</span>\n\n<span class=\"k\">definition</span><span class=\"w\"> </span><span class=\"s\">\"Giant n = (P n ∧ Q n)\"</span>\n\n<span class=\"k\">definition</span><span class=\"w\"> </span><span class=\"s\">\"Rule2 n = (if n &gt; 40 then  [n + 2] else [])\"</span>\n\n<span class=\"k\">definition</span><span class=\"w\"> </span><span class=\"s\">\"Rule4 n = (if n &gt; 50 then [n + 4] else [])\"</span>\n\n<span class=\"k\">definition</span><span class=\"w\"> </span><span class=\"s\">\"Rule6 n = (if n &gt; 150 then [n + 6] else [])\"</span>\n\n<span class=\"k\">definition</span><span class=\"w\"> </span><span class=\"s\">\"lotsRules = [Rule2, Rule4, Rule6]\"</span>\n\n\n\n<span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">rule1</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kp\">assumes</span><span class=\"w\"> </span><span class=\"s\">\"P n\"</span><span class=\"w\"> </span><span class=\"s\">\"Q n\"</span><span class=\"w\"> </span><span class=\"kp\">shows</span><span class=\"w\"> </span><span class=\"s\">\"Ball (set (Rule2 n)) Giant\"</span>\n<span class=\"w\">  </span><span class=\"gr\">sorry</span>\n\n<span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">rule2</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kp\">assumes</span><span class=\"w\"> </span><span class=\"s\">\"P n\"</span><span class=\"w\"> </span><span class=\"s\">\"Q n\"</span><span class=\"w\"> </span><span class=\"kp\">shows</span><span class=\"w\"> </span><span class=\"s\">\"Ball (set (Rule4 n)) Giant\"</span>\n<span class=\"w\">  </span><span class=\"gr\">sorry</span>\n\n<span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">rule3</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kp\">assumes</span><span class=\"w\"> </span><span class=\"s\">\"P n\"</span><span class=\"w\"> </span><span class=\"s\">\"Q n\"</span><span class=\"w\"> </span><span class=\"kp\">shows</span><span class=\"w\"> </span><span class=\"s\">\"Ball (set (Rule6 n)) Giant\"</span>\n<span class=\"w\">  </span><span class=\"gr\">sorry</span>\n\n<span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">toplevel</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kp\">assumes</span><span class=\"w\"> </span><span class=\"s\">\"Giant n\"</span><span class=\"w\"> </span><span class=\"kp\">shows</span><span class=\"w\"> </span><span class=\"s\">\"n' ∈  set (concat (map (λrule. rule n) lotsRules)) ⟹ Giant n'\"</span>\n<span class=\"k\">proof</span><span class=\"w\"> </span><span class=\"o\">-</span>\n\n<span class=\"w\">  </span><span class=\"k\">from</span><span class=\"w\"> </span><span class=\"n\">assms</span><span class=\"o\">(</span><span class=\"n\">1</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"n\">i0</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"P n\"</span><span class=\"w\">   </span><span class=\"k\">unfolding</span><span class=\"w\"> </span><span class=\"n\">Giant_def</span><span class=\"w\"> </span><span class=\"kp\">apply</span><span class=\"o\">(</span><span class=\"n\">rule</span><span class=\"w\"> </span><span class=\"n\">conjE</span><span class=\"o\">)</span><span class=\"w\">  </span><span class=\"kp\">apply</span><span class=\"o\">(</span><span class=\"w\"> </span><span class=\"n\">assumption</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"k\">done</span>\n<span class=\"w\">  </span><span class=\"k\">from</span><span class=\"w\"> </span><span class=\"n\">assms</span><span class=\"o\">(</span><span class=\"n\">1</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"n\">i1</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"Q n\"</span><span class=\"w\">   </span><span class=\"k\">unfolding</span><span class=\"w\"> </span><span class=\"n\">Giant_def</span><span class=\"w\"> </span><span class=\"kp\">apply</span><span class=\"o\">(</span><span class=\"n\">rule</span><span class=\"w\"> </span><span class=\"n\">conjE</span><span class=\"o\">)</span><span class=\"w\">  </span><span class=\"kp\">apply</span><span class=\"o\">(</span><span class=\"w\"> </span><span class=\"n\">assumption</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"k\">done</span>\n<span class=\"w\">  </span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">thesis</span>\n<span class=\"k\">proof</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">cases</span><span class=\"w\"> </span><span class=\"n\">n'</span><span class=\"o\">)</span><span class=\"n\">―‹which</span><span class=\"w\"> </span><span class=\"n\">rules</span><span class=\"w\"> </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"n\">been</span><span class=\"w\"> </span><span class=\"n\">taken›</span>\n<span class=\"w\">  </span><span class=\"k\">case</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">rule</span><span class=\"w\"> </span><span class=\"n\">1</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"k\">case</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">rule</span><span class=\"w\"> </span><span class=\"n\">2</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"ow\">...</span>\n\n\n<span class=\"w\">  </span><span class=\"gr\">oops</span>\n</code></pre></div>",
        "id": 435445968,
        "sender_full_name": "Chengsong Tan",
        "timestamp": 1714070032
    },
    {
        "content": "<p><del>I would have written lots_of_rules as conjunction, completely avoiding the problem</del> okay your rules are not predicates</p>",
        "id": 435773798,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1714237594
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">toplevel</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kp\">assumes</span><span class=\"w\"> </span><span class=\"s\">\"Giant n\"</span><span class=\"w\"> </span><span class=\"kp\">shows</span><span class=\"w\"> </span><span class=\"s\">\"n' ∈  set (concat (map (λrule. rule n) lotsRules)) ⟹ Giant n'\"</span>\n<span class=\"k\">proof</span><span class=\"w\"> </span><span class=\"o\">-</span>\n\n<span class=\"w\">  </span><span class=\"k\">from</span><span class=\"w\"> </span><span class=\"n\">assms</span><span class=\"o\">(</span><span class=\"n\">1</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"n\">i0</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"P n\"</span><span class=\"w\">   </span><span class=\"k\">unfolding</span><span class=\"w\"> </span><span class=\"n\">Giant_def</span><span class=\"w\"> </span><span class=\"kp\">apply</span><span class=\"o\">(</span><span class=\"n\">rule</span><span class=\"w\"> </span><span class=\"n\">conjE</span><span class=\"o\">)</span><span class=\"w\">  </span><span class=\"kp\">apply</span><span class=\"o\">(</span><span class=\"w\"> </span><span class=\"n\">assumption</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"k\">done</span>\n<span class=\"w\">  </span><span class=\"k\">from</span><span class=\"w\"> </span><span class=\"n\">assms</span><span class=\"o\">(</span><span class=\"n\">1</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"n\">i1</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"Q n\"</span><span class=\"w\">   </span><span class=\"k\">unfolding</span><span class=\"w\"> </span><span class=\"n\">Giant_def</span><span class=\"w\"> </span><span class=\"kp\">apply</span><span class=\"o\">(</span><span class=\"n\">rule</span><span class=\"w\"> </span><span class=\"n\">conjE</span><span class=\"o\">)</span><span class=\"w\">  </span><span class=\"kp\">apply</span><span class=\"o\">(</span><span class=\"w\"> </span><span class=\"n\">assumption</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"k\">done</span>\n<span class=\"w\">  </span><span class=\"k\">assume</span><span class=\"w\"> </span><span class=\"s\">‹n' ∈  set (concat (map (λrule. rule n) lotsRules))›</span>\n<span class=\"w\">  </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">thesis</span>\n<span class=\"w\">    </span><span class=\"k\">unfolding</span><span class=\"w\"> </span><span class=\"n\">lotsRules_def</span><span class=\"w\"> </span><span class=\"n\">list.map</span><span class=\"w\"> </span><span class=\"n\">set_concat</span><span class=\"w\"> </span><span class=\"n\">set_simps</span><span class=\"w\"> </span><span class=\"n\">image_insert</span><span class=\"w\"> </span><span class=\"n\">Union_insert</span><span class=\"w\"> </span><span class=\"n\">Un_iff</span>\n<span class=\"k\">proof</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">elim</span><span class=\"w\"> </span><span class=\"n\">disjE</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">goal_cases</span><span class=\"o\">)</span><span class=\"n\">―‹which</span><span class=\"w\"> </span><span class=\"n\">rules</span><span class=\"w\"> </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"n\">been</span><span class=\"w\"> </span><span class=\"n\">taken›</span>\n<span class=\"w\">  </span><span class=\"k\">case</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">1</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"k\">case</span>\n<span class=\"w\">    </span><span class=\"gr\">sorry</span>\n<span class=\"k\">next</span>\n<span class=\"w\">  </span><span class=\"k\">case</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">2</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"k\">case</span>\n<span class=\"w\">    </span><span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 435774048,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1714237875
    },
    {
        "content": "<p>but again: is that really better than</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">definition</span><span class=\"w\"> </span><span class=\"s\">\"lotsRules x ≡ (Rule2 x @ Rule4 x @ Rule6 x)\"</span>\n</code></pre></div>",
        "id": 435774139,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1714237964
    },
    {
        "content": "<p>That being said, I am unsure why you could not find it by yourself</p>",
        "id": 435774851,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1714238726
    },
    {
        "content": "<p>I mean, you know <code>unfolding</code> and <code>find_theorems</code></p>",
        "id": 435774863,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1714238747
    },
    {
        "content": "<p>So coming up with the right lemmas does not sound hard to me</p>",
        "id": 435774900,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1714238764
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"233198\">Mathias Fleury</span> <a href=\"#narrow/stream/238552-Beginner-Questions/topic/Proof.20by.20cases.20of.20map.20on.20which.20list.20element/near/435774851\">said</a>:</p>\n<blockquote>\n<p>That being said, I am unsure why you could not find it by yourself</p>\n</blockquote>\n<p>Thank you very much, Mathias!<br>\nMy Isabelle/Isar dexterity does not yet get me anything like<br>\n<code> n' ∈ set (Rule2 n) ∨ n' ∈ set (Rule4 n) ∨ n' ∈ set (Rule6 n) ∨ n' ∈ ⋃ (set </code> {})<code>\nand also </code>goal_cases` in the proof method I cannot come up with myself.<br>\nNow I know them :)<br>\nAny advice on improving such dexterity to be able to write more succinct and idiomatic proofs like this?</p>",
        "id": 436582866,
        "sender_full_name": "Chengsong Tan",
        "timestamp": 1714602599
    },
    {
        "content": "<p><code>goal_cases</code> is something you cannot guess (and not everyone like it, because the resulting proof is not really structured)</p>",
        "id": 436616074,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1714625298
    },
    {
        "content": "<p>For elim, I suggest reading the chapter \"the rules of the game\" (chapter 5 <a href=\"https://isabelle.in.tum.de/doc/tutorial.pdf\">https://isabelle.in.tum.de/doc/tutorial.pdf</a>) to understand intro/dest</p>",
        "id": 436616108,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1714625357
    },
    {
        "content": "<p>and then it is just a matter of finding the theorems with <code>find_thm</code> or the panel</p>",
        "id": 436616122,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1714625376
    }
]