[
    {
        "content": "<p>Hi! I'm new to Isabelle and I'm struggling to understand how to prove something about mutual inductively defined propositions. My example is a bit more complicated, but the issue is the same as with this very simple example with odd/even as mutual inductive propositions:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">inductive</span>\n<span class=\"w\">  </span><span class=\"n\">even</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"nat ⇒ bool\"</span><span class=\"w\"> </span><span class=\"kp\">and</span>\n<span class=\"w\">  </span><span class=\"n\">odd</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"nat ⇒ bool\"</span>\n<span class=\"w\">  </span><span class=\"kp\">where</span>\n<span class=\"w\">  </span><span class=\"n\">Even_Zero</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"even 0\"</span><span class=\"w\"> </span><span class=\"o\">|</span>\n<span class=\"w\">  </span><span class=\"n\">Odd_Suc_Even</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"even n ⟹ odd (Suc n)\"</span><span class=\"w\"> </span><span class=\"o\">|</span>\n<span class=\"w\">  </span><span class=\"n\">Even_Suc_Odd</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"odd n ⟹ even (Suc n)\"</span>\n\n<span class=\"kn\">theorem</span><span class=\"w\"> </span><span class=\"s\">\"even n ⟹ even (n + 2)\"</span>\n<span class=\"k\">proof</span>\n<span class=\"w\">  </span><span class=\"o\">(</span><span class=\"n\">induction</span><span class=\"w\"> </span><span class=\"n\">rule</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">even_odd.induct</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>When I try to do a proof by induction here (which for non-mutual inductives works for doing inversion), I get an error:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"n\">Failed</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"n\">initial</span><span class=\"w\"> </span><span class=\"k\">proof</span><span class=\"w\"> </span><span class=\"n\">method⌂</span><span class=\"o\">:</span>\n<span class=\"n\">goal</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">1</span><span class=\"w\"> </span><span class=\"n\">subgoal</span><span class=\"o\">):</span>\n<span class=\"w\"> </span><span class=\"n\">1.</span><span class=\"w\"> </span><span class=\"n\">MyTheory.even</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"n\">⟹</span><span class=\"w\"> </span><span class=\"n\">MyTheory.even</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">2</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>How can I do this kind of inversion? (and/or where could I read more about it?)</p>",
        "id": 441720946,
        "sender_full_name": "Andrés Goens",
        "timestamp": 1717165532
    },
    {
        "content": "<p>Look at the conclusion of <code>even_odd.induct</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Union_Find_Rank_Int.even</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">x1.0</span><span class=\"w\"> </span><span class=\"n\">⟶</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">P1.0</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">x1.0</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">∧</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Union_Find_Rank_Int.odd</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">x2.0</span><span class=\"w\"> </span><span class=\"n\">⟶</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">P2.0</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">x2.0</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>This can't be unified to your goal <code>even (n + 2)</code>. You can instead use <code>even_odd.inducts(1)</code> to prove things about <code>even</code>. This theorem has a variable <code>?P2.0</code> that you don't care about so you can instantiate it with <code>taking</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">theorem</span><span class=\"w\"> </span><span class=\"s\">\"even n ⟹ even (Suc (Suc n))\"</span>\n<span class=\"k\">proof</span>\n<span class=\"w\">  </span><span class=\"o\">(</span><span class=\"n\">induction</span><span class=\"w\"> </span><span class=\"n\">taking</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"λx. True\"</span><span class=\"w\"> </span><span class=\"n\">rule</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">even_odd.inducts</span><span class=\"o\">(</span><span class=\"n\">1</span><span class=\"o\">))</span>\n<span class=\"w\">  </span><span class=\"k\">case</span><span class=\"w\"> </span><span class=\"n\">Even_Zero</span>\n<span class=\"w\">  </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"k\">case</span>\n<span class=\"w\">    </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"n\">add</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Even_Suc_Odd</span><span class=\"w\"> </span><span class=\"n\">Odd_Suc_Even</span><span class=\"w\"> </span><span class=\"n\">even_odd.Even_Zero</span><span class=\"o\">)</span>\n<span class=\"k\">next</span>\n<span class=\"w\">  </span><span class=\"k\">case</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Odd_Suc_Even</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"k\">case</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">simp</span>\n<span class=\"k\">next</span>\n<span class=\"w\">  </span><span class=\"k\">case</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Even_Suc_Odd</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"k\">case</span>\n<span class=\"w\">    </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"n\">add</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Odd_Suc_Even</span><span class=\"w\"> </span><span class=\"n\">even_odd.Even_Suc_Odd</span><span class=\"o\">)</span>\n<span class=\"k\">qed</span>\n</code></pre></div>",
        "id": 441724145,
        "sender_full_name": "Lukas Stevens",
        "timestamp": 1717166396
    },
    {
        "content": "<p>that's pretty neat (makes sense), thanks for the help!</p>",
        "id": 441724498,
        "sender_full_name": "Andrés Goens",
        "timestamp": 1717166503
    }
]