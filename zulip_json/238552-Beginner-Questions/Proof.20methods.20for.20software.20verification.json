[
    {
        "content": "<p>Hello everyone,</p>\n<p>I'm working in the field of software verification and try to use Isabelle to prove the equivalence between two formulas. I tried three lemmas and have some questions as follows:</p>\n<ol>\n<li>\n<p>lemma test1: \"(P 0 ⟶ ~P 1) ∧ (P 1 ⟶ ~P 0)  ⟹ ~P 0∨~P 1\"<br>\n  apply(auto)<br>\n  done<br>\nIt worked perfectly as I want.</p>\n</li>\n<li>\n<p>lemma test2: \"(P 0 --&gt; (~P 1 &amp; ~P 2)) &amp; (P 1 --&gt; (~P 0 &amp; ~P 2)) &amp; (P 2 --&gt; (~P 1 &amp; ~P 0))<br>\n==&gt; ((~P 1 &amp; ~P 2) | (~P 0 &amp; ~P 2) | (~P 1 &amp; ~P 0))\"<br>\n  apply(auto)<br>\n  done<br>\nWhen I added one more predicate \"P 2\", it run until out of memory. I don't think that the lemma is big enough unprovable like this.</p>\n</li>\n<li>\n<p>lemma test3: \"⋀i∈I.(P i ⟶ (⋀j∈I-{i}. ¬P j)) ⟹ ⋁i∈I.(⋀j∈I-{i}. ¬P j)\"<br>\n  apply (auto)<br>\n  done<br>\nI tested a generic case and the Isabelle showed that \"Failed to apply proof method\". I tried to add \"apply (induction)\" and the result is \"Failed to finish proof\". So I guess the problem is about applying the right proof method, right? Then, I tried some other like \"simp\" or \"rules\" but they didn't work.</p>\n</li>\n</ol>\n<p>P.s: the symbol \"bigvee\" and \"bigwedge\" are redefined as follows (<span class=\"user-mention\" data-user-id=\"233198\">@Mathias Fleury</span> re-defined it)<br>\n<a href=\"/user_uploads/14278/iyqQNX41jywBf1-1f7f3p5N0/Screenshot-2020-10-16-at-12.13.52.png\">Screenshot-2020-10-16-at-12.13.52.png</a> <br>\nCould you explain those questions, please? Thank you very much.</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/14278/iyqQNX41jywBf1-1f7f3p5N0/Screenshot-2020-10-16-at-12.13.52.png\" title=\"Screenshot-2020-10-16-at-12.13.52.png\"><img src=\"/user_uploads/14278/iyqQNX41jywBf1-1f7f3p5N0/Screenshot-2020-10-16-at-12.13.52.png\"></a></div>",
        "id": 213541471,
        "sender_full_name": "Trinh Le Khanh",
        "timestamp": 1602843322
    },
    {
        "content": "<p>As for 2, <code>auto</code> is not always the best way to go. In this particular case, it seems that the simplifier loops (no idea why). More specialised methods for logic/set theory like <code>blast</code> and <code>metis</code> and <code>smt</code> solve this almost instantly. There are also more obscure ones (<code>argo</code>, <code>sat</code>, <code>satx</code>) that do a good job here.</p>\n<p>As for the bigvee thing, please post the actual source could and not just a screenshot. It's a lot of text to copy from a screenshot by hand. I don't really understand what the advantage of <code>bigvee</code> and <code>bigwedge</code> are over <code>Bex</code> and <code>Ball</code>, i.e. <code>∃x∈A. P x</code> instead of <code>⋁x∈A. P x</code>.</p>",
        "id": 213542523,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1602844184
    },
    {
        "content": "<p>Zulip uses markdown as markup so you can use triple backticks for code like this:</p>\n<div class=\"codehilite\"><pre><span></span><code>f x = x\n</code></pre></div>",
        "id": 213542782,
        "sender_full_name": "Lukas Stevens",
        "timestamp": 1602844360
    },
    {
        "content": "<p>Also, I don't think 3 holds if <code>I</code> is the empty set. The following can easily be proven by blast:</p>\n<div class=\"codehilite\"><pre><span></span><code>∀i∈I. P i ⟶ (∀j∈I-{i}. ¬P j) ⟹ I ≠ {} ⟹ ∃i∈I. ∀j∈I-{i}. ¬P j\n</code></pre></div>",
        "id": 213542802,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1602844385
    },
    {
        "content": "<p>This is the source code:</p>\n<div class=\"codehilite\"><pre><span></span><code>theory test1\nimports Main\nbegin\n\ncontext comm_monoid_add (*commutative monoid with addition*)\nbegin\nsublocale bigvee: comm_monoid_set HOL.disj False\n  defines bigvee = bigvee.F and bigvee&#39; = bigvee.G\n  by standard auto\n\nabbreviation bigvee&#39;&#39; :: ‹bool set ⇒ bool› (&quot;⋁&quot;)\n  where &quot;⋁ ≡ bigvee (λx. x)&quot;\n\nsublocale bigwedge: comm_monoid_set HOL.conj True\n  defines bigwedge = bigwedge.F and bigwedge&#39; = bigwedge.G\n  by standard auto\n\nabbreviation bigwedge&#39;&#39; :: ‹bool set ⇒ bool› (&quot;⋀&quot;)\n  where &quot;⋀ ≡ bigwedge (λx. x)&quot;\n\nend\nsyntax (*Define pattern of bigwedge and bigvee*)\n  &quot;_bigwedge&quot; :: &quot;pttrn ⇒ &#39;a set ⇒ &#39;b ⇒ &#39;b::comm_monoid_add&quot;  (&quot;(2⋀(_/∈_)./ _)&quot; [0, 51, 10] 10)\ntranslations ― ‹Beware of argument permutation!›\n  &quot;⋀i∈A. b&quot; ⇌ &quot;CONST bigwedge (λi. b) A&quot;\n\nsyntax\n  &quot;_bigvee&quot; :: &quot;pttrn ⇒ &#39;a set ⇒ &#39;b ⇒ &#39;b::comm_monoid_add&quot;  (&quot;(2⋁(_/∈_)./ _)&quot; [0, 51, 10] 10)\ntranslations ― ‹Beware of argument permutation!› (*translation between parse rules or print rules*)\n  &quot;⋁i∈A. b&quot; ⇌ &quot;CONST bigvee (λi. b) A&quot;\n(*CONST ensures that the given identifier is treated as constant term*)\n\ninstantiation bool :: comm_monoid_add\nbegin\ndefinition zero_bool where\n[simp]: ‹zero_bool = False›\ndefinition plus_bool where\n[simp]: ‹plus_bool = (∨)›\ninstance\n  by standard auto\nend\nthm bigvee_def\nthm bigwedge_def\n\n(*meaningful name*)\ndefinition J :: &quot;nat set&quot; where\n&quot;J = {n . n &gt; 0}&quot;\ndefinition U :: &quot;nat set&quot; where\n&quot;U = {n . n &gt; 0}&quot;\ndefinition T :: &quot;nat set&quot; where\n&quot;T = {n . n &gt; 0}&quot;\ndefinition I :: &quot;nat set&quot; where\n&quot;I = {n . n &gt; 0}&quot;\ndefinition V :: &quot;nat set&quot; where\n&quot;V = {n . n &gt; 0}&quot;\ndefinition K :: &quot;nat set&quot; where\n&quot;K = {n . n &gt; 0}&quot;\ndefinition H :: &quot;nat set&quot; where\n&quot;H = {n . n &gt; 0}&quot;\ndefinition L :: &quot;nat set&quot; where\n&quot;L = {n . n &gt; 0}&quot;\ndefinition B :: &quot;nat set&quot; where\n  &quot;B = {1, 2, 3, 4}&quot;\n\nlemma ‹finite A ⟹ (⋁i∈A. f i) ⟷ (∃i ∈ A. f i)›\n  apply (induction rule: finite_induct)\n  apply (auto simp: )\n  done\n\nlemma ‹finite A ⟹ (⋀i∈A. f i) ⟷ A = {} ∨ (∀i ∈ A. f i)›\n  apply (induction rule: finite_induct)\n  apply (auto simp: )\n  done\n\nlemma ‹infinite A ⟹ (⋀i∈A. f i) ⟷ True›\n  by auto\n\nlemma test0:\n  ‹(⋀j∈J. ⋀u∈U. ⋀t∈T. ⋀l∈L. ⋀l⇩1∈L-{l}. ¬P j u t l⇩1) ∨\n   (⋁i∈I. ⋁v∈V. ⋀k∈K. ⋁h∈H. Q i v k h) ⟹\n   (⋁i∈I. ⋁v∈V. ⋀k∈K. ⋁h∈H. Q i v k h) ∨ (⋀j∈J. ⋀u∈U. ⋀t∈T. ⋀l⇩1∈-{l}. ¬P j u t l⇩1)›\n  apply auto\n  done\n\nlemma &quot;∀ x. P x ⟶ P x&quot;\napply (auto)\n  done\n\nlemma test1: &quot;(P 0 ⟶ ~P 1) ∧ (P 1 ⟶ ~P 0)  ⟹ ~P 0∨~P 1&quot;\n  apply(auto)\n  done\n\n(*\nlemma test2: &quot;(P 0 --&gt; (~P 1 &amp; ~P 2)) &amp; (P 1 --&gt; (~P 0 &amp; ~P 2)) &amp; (P 2 --&gt; (~P 1 &amp; ~P 0))\n==&gt; ((~P 1 &amp; ~P 2) | (~P 0 &amp; ~P 2) | (~P 1 &amp; ~P 0))&quot;\n  apply(auto)\n  done *)\n\nlemma test3: &quot;⋀i∈I.(P i ⟶ (⋀j∈I-{i}. ¬P j)) ⟹ ⋁i∈I.(⋀j∈I-{i}. ¬P j)&quot;\n  apply (induction)\n  apply (auto)\n  done\n</code></pre></div>",
        "id": 213542837,
        "sender_full_name": "Trinh Le Khanh",
        "timestamp": 1602844419
    },
    {
        "content": "<p>If you want to do induction, you should specify what you want to do induction over.</p>",
        "id": 213542930,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1602844470
    },
    {
        "content": "<p>I defined the set B with 4 elements and used it but the 3rd lemma returned the same result.</p>",
        "id": 213543007,
        "sender_full_name": "Trinh Le Khanh",
        "timestamp": 1602844550
    },
    {
        "content": "<p>Also note that <code>bigwedge</code> over an infinite set is always true and <code>bigvee</code> over an infinite set is always false. So 3 is trivially false because <code>I</code> is infinite.</p>",
        "id": 213543248,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1602844705
    },
    {
        "content": "<p>I think you really want to use <code>∀x∈I</code> etc.</p>",
        "id": 213543280,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1602844728
    },
    {
        "content": "<p>then you don't need induction either, it's straightforward set theory and <code>blast</code> can do it (as long as you feed in the fact that <code>I ≠ {}</code>).</p>",
        "id": 213543307,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1602844762
    },
    {
        "content": "<p>So if I have </p>\n<div class=\"codehilite\"><pre><span></span><code>I = {1, 2, 3, 4}\n</code></pre></div>\n\n\n<p>I can use this directly, right?</p>\n<div class=\"codehilite\"><pre><span></span><code>∀i∈I.⋀P i = P 1 ∧ P 2 ∧ P 3 ∧ P 4\n∀i∈I.⋁P i = P 1 ∨ P 2 ∨ P 3 ∨ P 4\n</code></pre></div>",
        "id": 213543730,
        "sender_full_name": "Trinh Le Khanh",
        "timestamp": 1602845085
    },
    {
        "content": "<p>You probably mean</p>\n<div class=\"codehilite\"><pre><span></span><code>(∀i∈I. P i) = P 1 ∧ P 2 ∧ P 3 ∧ P 4\n(∃i∈I. P i) = P 1 ∨ P 2 ∨ P 3 ∨ P 4\n</code></pre></div>\n\n\n<p>right?</p>\n<p>In that case: Yes. You just have to unfold the definition of <code>I</code> and then it simplifies to that.</p>",
        "id": 213545444,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1602846333
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 213546533,
        "sender_full_name": "Trinh Le Khanh",
        "timestamp": 1602847123
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232736\">Manuel Eberl</span> <a href=\"#narrow/stream/238552-Beginner-Questions/topic/Proof.20methods.20for.20software.20verification/near/213542802\">said</a>:</p>\n<blockquote>\n<p>Also, I don't think 3 holds if <code>I</code> is the empty set. The following can easily be proven by blast:</p>\n<div class=\"codehilite\"><pre><span></span><code>∀i∈I. P i ⟶ (∀j∈I-{i}. ¬P j) ⟹ I ≠ {} ⟹ ∃i∈I. ∀j∈I-{i}. ¬P j\n</code></pre></div>\n\n\n</blockquote>\n<p>Thank you. I tried this with <code>blast</code> and it worked.<br>\nI also tried that:</p>\n<ol>\n<li>I define set I = {1, 2, 3, 4}</li>\n</ol>\n<div class=\"codehilite\"><pre><span></span><code>definition I :: &quot;nat set&quot; where\n  &quot;I = {1, 2, 3, 4}&quot;\n</code></pre></div>\n\n\n<ol start=\"2\">\n<li>Then,  I write the lemma but remove the part <code>I ≠ {} </code></li>\n</ol>\n<div class=\"codehilite\"><pre><span></span><code>lemma test3: &quot;∀i∈I. P i ⟶ (∀j∈I-{i}. ¬P j) ⟹ ∃i∈I. ∀j∈I-{i}. ¬P j&quot;\n  apply (blast)\n  done\n</code></pre></div>\n\n\n<p>It's failed to prove. So <code>I ≠ {} </code>seems mandatory despite we define set I or not, right?</p>",
        "id": 213547617,
        "sender_full_name": "Trinh Le Khanh",
        "timestamp": 1602847914
    },
    {
        "content": "<p><code>blast</code> doesn't know how you defined the set.  You can e.g. unfold the definition like this:</p>\n<div class=\"codehilite\"><pre><span></span><code>lemma test3: &quot;∀i∈I. P i ⟶ (∀j∈I-{i}. ¬P j) ⟹ ∃i∈I. ∀j∈I-{i}. ¬P j&quot;\n  unfolding I_def by blast\n</code></pre></div>\n\n\n<p>Or you can prove that <code>I</code> is nonempty first and then supply that fact to blast:</p>\n<div class=\"codehilite\"><pre><span></span><code>lemma I_not_empty: &quot;I ≠ {}&quot;\n  by (auto simp: I_def)\n\nlemma test3: &quot;∀i∈I. P i ⟶ (∀j∈I-{i}. ¬P j) ⟹ ∃i∈I. ∀j∈I-{i}. ¬P j&quot;\n  using I_not_empty by blast\n</code></pre></div>",
        "id": 213548994,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1602848877
    },
    {
        "content": "<p>Wow, that's awesome. Thank you very much.</p>",
        "id": 213549978,
        "sender_full_name": "Trinh Le Khanh",
        "timestamp": 1602849489
    },
    {
        "content": "<p>If you want to learn Isabelle systematically, I suggest you work through the first half of the ‘Concrete Semantics’ books. It's online for free: <a href=\"http://www.concrete-semantics.org/\">http://www.concrete-semantics.org/</a></p>",
        "id": 213551883,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1602850667
    },
    {
        "content": "<p>Thank you for your suggestion. After putting my lemma and choosing to prove them using <code>metis</code>, the <code>metis</code> is highlighted in purple (and my computer's fans are running so hard). Do you know the meaning of this color? (I just know that red for error). <a href=\"/user_uploads/14278/us188qQszth-oJMFItzzS055/Screenshot-2020-10-16-at-14.19.08.png\">Screenshot-2020-10-16-at-14.19.08.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/14278/us188qQszth-oJMFItzzS055/Screenshot-2020-10-16-at-14.19.08.png\" title=\"Screenshot-2020-10-16-at-14.19.08.png\"><img src=\"/user_uploads/14278/us188qQszth-oJMFItzzS055/Screenshot-2020-10-16-at-14.19.08.png\"></a></div>",
        "id": 213552579,
        "sender_full_name": "Trinh Le Khanh",
        "timestamp": 1602851054
    },
    {
        "content": "<p>It means that the command is still running. Metis might not be good enough to do something this big. Other methods might be. If you paste the full example in here, I can have a look at it.</p>",
        "id": 213553445,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1602851554
    },
    {
        "content": "<p>Here you are. I tried blast first but it couldn't prove. Thus, I changed to metis.</p>\n<div class=\"codehilite\"><pre><span></span><code>theory MyMaths\n  imports Main\nbegin\ndefinition xor :: &quot;bool ⇒ bool ⇒ bool&quot; where\n&quot;xor A B ≡ (A &amp; ~B) | (~A &amp; B)&quot;\n\ndefinition J :: &quot;nat set&quot; where\n&quot;J = {n . n &gt; 0}&quot;\ndefinition U :: &quot;nat set&quot; where\n&quot;U = {n . n &gt; 0}&quot;\ndefinition T :: &quot;nat set&quot; where\n&quot;T = {n . n &gt; 0}&quot;\ndefinition I :: &quot;nat set&quot; where\n&quot;I = {n . n &gt; 0}&quot;\ndefinition V :: &quot;nat set&quot; where\n&quot;V = {n . n &gt; 0}&quot;\ndefinition K :: &quot;nat set&quot; where\n&quot;K = {n . n &gt; 0}&quot;\ndefinition H :: &quot;nat set&quot; where\n&quot;H = {n . n &gt; 0}&quot;\ndefinition L :: &quot;nat set&quot; where\n&quot;L = {n . n &gt; 0}&quot;\n\n\nlemma &quot;((∀l∈L.∀j∈J.∀u∈U.∀t∈T. ¬P j u t l) ∨ (∃h∈H.∃i∈I.∃v∈V.∀k∈K. (Q i v k h ∧ (∀h⇩1∈H-{h}. ¬Q i v k h⇩1))))\n∧ (∃l∈L.∃h∈H.((∀j∈J.∀u∈U.∀t∈T.∀l⇩1∈L-{l}. ¬P j u t l⇩1) ∧ (∃i∈I.∃v∈V.∀k∈K.∀h⇩1∈H-{h}. ¬Q i v k h⇩1)))\n⟹ (∃h∈H.((∀l∈L.∀j∈J.∀u∈U.∀t∈T. ¬P j u t l) ∧ (∀i∈I.∀v∈V.∀k∈K.∀h⇩1∈H-{h}.¬Q i v k h⇩1)))\n∨ (∃l∈L.∃h∈H.(∀j∈J.∀u∈U.∀t∈T.∀l⇩1∈L-{l}. ¬P j u t l⇩1) ∧ (∃i∈I.∃v∈V.∀k∈K.(Q i v k h ∧ (∀h⇩1∈H-{h}. ¬Q i v k h⇩1))))&quot;\n  unfolding I_def and V_def and K_def and H_def and J_def and U_def and T_def and L_def\n  using [[simp_trace]]\n  by metis\n\nend\n</code></pre></div>",
        "id": 213553768,
        "sender_full_name": "Trinh Le Khanh",
        "timestamp": 1602851777
    },
    {
        "content": "<p>Okay, now you're back to infinite sets again. That means things like SAT solvers cannot be used. The definitions of your sets don't really make the problem any easier either, so I don't think unfolding helps.</p>",
        "id": 213565052,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1602857528
    },
    {
        "content": "<p>Normally, I would say to tackle something like this with an SMT solver like Z3 or CVC4, but it seems this is too difficult for them.</p>",
        "id": 213565580,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1602857793
    },
    {
        "content": "<p>(then again, I am not sure if this holds in the first place)</p>",
        "id": 213565622,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1602857817
    },
    {
        "content": "<p>For two particular values of <code>P</code> and <code>Q</code>, I was able to prove the negation of your goal, so apparently it doesn't hold:</p>\n<div class=\"codehilite\"><pre><span></span><code>definition &quot;P = (λa b c d. False)&quot;\ndefinition &quot;Q = (λa b c d. a ≠ 1 ∧ (b = 1 ∧ c = 1 ∧ d = 1 ∨ b ≠ 1 ∧ c = 1 ∧ d ≠ 1))&quot;\n\nlemma &quot;¬(((∀l∈L.∀j∈J.∀u∈U.∀t∈T. ¬P j u t l) ∨ (∃h∈H.∃i∈I.∃v∈V.∀k∈K. (Q i v k h ∧ (∀h⇩1∈H-{h}. ¬Q i v k h⇩1))))\n∧ (∃l∈L.∃h∈H.((∀j∈J.∀u∈U.∀t∈T.∀l⇩1∈L-{l}. ¬P j u t l⇩1) ∧ (∃i∈I.∃v∈V.∀k∈K.∀h⇩1∈H-{h}. ¬Q i v k h⇩1)))\n⟶ (∃h∈H.((∀l∈L.∀j∈J.∀u∈U.∀t∈T. ¬P j u t l) ∧ (∀i∈I.∀v∈V.∀k∈K.∀h⇩1∈H-{h}.¬Q i v k h⇩1)))\n∨ (∃l∈L.∃h∈H.(∀j∈J.∀u∈U.∀t∈T.∀l⇩1∈L-{l}. ¬P j u t l⇩1) ∧ (∃i∈I.∃v∈V.∀k∈K.(Q i v k h ∧ (∀h⇩1∈H-{h}. ¬Q i v k h⇩1)))))&quot;\n  unfolding I_def and V_def and K_def and H_def and J_def and U_def and T_def and L_def P_def Q_def\n  apply auto\n  apply (rule exI[of _ 2])\n  apply auto\n  subgoal for h\n    apply (rule bexI[of _ &quot;h + 2&quot;])\n     apply auto\n    done\n</code></pre></div>\n\n\n<p>The proof isn't pretty, but it gets the point across. I found that particular counterexample for <code>P</code> and <code>Q</code> using the <code>nitpick</code> command.</p>",
        "id": 213567250,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1602858521
    },
    {
        "content": "<p>I might make something wrong when typing the formulas. I'll check it again.<br>\nTo make sure that they're not infinite sets. I re-defined as follows (each set has 99 elements): </p>\n<div class=\"codehilite\"><pre><span></span><code>definition J :: &quot;nat set&quot; where\n&quot;J = {n . n &lt; 100}&quot;\ndefinition U :: &quot;nat set&quot; where\n&quot;U = {n . n &lt; 100}&quot;\ndefinition T :: &quot;nat set&quot; where\n&quot;T = {n . n &lt; 100}&quot;\ndefinition I :: &quot;nat set&quot; where\n&quot;I = {n . n &lt; 100}&quot;\ndefinition V :: &quot;nat set&quot; where\n&quot;V = {n . n &lt; 100}&quot;\ndefinition K :: &quot;nat set&quot; where\n&quot;K = {n . n &lt; 100}&quot;\ndefinition H :: &quot;nat set&quot; where\n&quot;H = {n . n &lt; 100}&quot;\ndefinition L :: &quot;nat set&quot; where\n&quot;L = {n . n &lt; 100}&quot;\n</code></pre></div>",
        "id": 213569596,
        "sender_full_name": "Trinh Le Khanh",
        "timestamp": 1602859449
    },
    {
        "content": "<p>Nope.</p>\n<div class=\"codehilite\"><pre><span></span><code>definition J :: &quot;nat set&quot; where\n&quot;J = {n . n &lt; 100}&quot;\ndefinition U :: &quot;nat set&quot; where\n&quot;U = {n . n &lt; 100}&quot;\ndefinition T :: &quot;nat set&quot; where\n&quot;T = {n . n &lt; 100}&quot;\ndefinition I :: &quot;nat set&quot; where\n&quot;I = {n . n &lt; 100}&quot;\ndefinition V :: &quot;nat set&quot; where\n&quot;V = {n . n &lt; 100}&quot;\ndefinition K :: &quot;nat set&quot; where\n&quot;K = {n . n &lt; 100}&quot;\ndefinition H :: &quot;nat set&quot; where\n&quot;H = {n . n &lt; 100}&quot;\ndefinition L :: &quot;nat set&quot; where\n&quot;L = {n . n &lt; 100}&quot;\n\ndefinition &quot;P = (λa b c d. False)&quot;\ndefinition &quot;Q = (λa b c d. a ≠ 1 ∧ (b = 1 ∧ c = 1 ∧ d = 1 ∨ b ≠ 1 ∧ c = 1 ∧ d ≠ 1))&quot;\n\nlemma *: &quot;(∃x∈A - B. R x) ⟷ (∃x. x ∈ A ∧ x ∉ B ∧ R x)&quot;\n         &quot;(∀x∈A - B. R x) ⟷ (∀x. x ∉ A ∨ x ∈ B ∨ R x)&quot;\n  by auto\n\nlemma &quot;¬(((∀l∈L.∀j∈J.∀u∈U.∀t∈T. ¬P j u t l) ∨ (∃h∈H.∃i∈I.∃v∈V.∀k∈K. (Q i v k h ∧ (∀h⇩1∈H-{h}. ¬Q i v k h⇩1))))\n∧ (∃l∈L.∃h∈H.((∀j∈J.∀u∈U.∀t∈T.∀l⇩1∈L-{l}. ¬P j u t l⇩1) ∧ (∃i∈I.∃v∈V.∀k∈K.∀h⇩1∈H-{h}. ¬Q i v k h⇩1)))\n⟶ (∃h∈H.((∀l∈L.∀j∈J.∀u∈U.∀t∈T. ¬P j u t l) ∧ (∀i∈I.∀v∈V.∀k∈K.∀h⇩1∈H-{h}.¬Q i v k h⇩1)))\n∨ (∃l∈L.∃h∈H.(∀j∈J.∀u∈U.∀t∈T.∀l⇩1∈L-{l}. ¬P j u t l⇩1) ∧ (∃i∈I.∃v∈V.∀k∈K.(Q i v k h ∧ (∀h⇩1∈H-{h}. ¬Q i v k h⇩1)))))&quot;\n  unfolding I_def and V_def and K_def and H_def and J_def and U_def and T_def and L_def P_def Q_def\n  apply (auto simp: *)\n     apply presburger+\n  done\n</code></pre></div>",
        "id": 213570600,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1602859886
    },
    {
        "content": "<p>(<code>presburger</code> is a decision procedure for Presburger logic, i.e. linear arithmetic on integers plus quantifiers. It has pretty terrible performance, but in this case, it works pretty well.)</p>",
        "id": 213570755,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1602859951
    },
    {
        "content": "<p>Can you explain why did you define P and Q like this?</p>\n<div class=\"codehilite\"><pre><span></span><code>definition &quot;P = (λa b c d. False)&quot;\ndefinition &quot;Q = (λa b c d. a ≠ 1 ∧ (b = 1 ∧ c = 1 ∧ d = 1 ∨ b ≠ 1 ∧ c = 1 ∧ d ≠ 1))&quot;\n</code></pre></div>",
        "id": 213572904,
        "sender_full_name": "Trinh Le Khanh",
        "timestamp": 1602861003
    },
    {
        "content": "<p>Because it leads to a counterexample?</p>",
        "id": 213573004,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1602861058
    },
    {
        "content": "<p>The way you stated your lemma, <code>P</code> and <code>Q</code> were free variables, i.e. you claimed that it holds for all values of <code>P</code> and <code>Q</code>. I showed that there are two particular values for which it does not hold.</p>",
        "id": 213573063,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1602861099
    },
    {
        "content": "<p>But when you applied presburger+, it's solved, right?</p>",
        "id": 213573346,
        "sender_full_name": "Trinh Le Khanh",
        "timestamp": 1602861179
    },
    {
        "content": "<p>Ah, when I remove your definition of P and Q, it's unsolvable.</p>",
        "id": 213573726,
        "sender_full_name": "Trinh Le Khanh",
        "timestamp": 1602861274
    },
    {
        "content": "<p>I proved the <em>negation</em> of your lemma.</p>",
        "id": 213573754,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1602861290
    },
    {
        "content": "<p>If we call the statement of your lemma <code>foo(P,Q)</code>, you essentially claimed <code>∀P Q. foo(P,Q)</code>. I showed <code>∃P Q. ¬foo(P,Q)</code>.</p>",
        "id": 213573881,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1602861351
    },
    {
        "content": "<p>Yes, I see. So the problem is the correctness of my lemma, not the definition.</p>",
        "id": 213574033,
        "sender_full_name": "Trinh Le Khanh",
        "timestamp": 1602861411
    },
    {
        "content": "<blockquote>\n<p>The proof isn't pretty, but it gets the point across. I found that particular counterexample for P and Q using the <code>nitpick</code> command.</p>\n</blockquote>\n<p>Hi Manuel, how can you generate the definition of P and Q using the <code>nitpick</code> command? When I used this command, it showed hundreds of lines like this <a href=\"/user_uploads/14278/33bS7koDnprQcgMQ5yH6SW2v/Screenshot-2020-10-19-at-01.36.04.png\">Screenshot-2020-10-19-at-01.36.04.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/14278/33bS7koDnprQcgMQ5yH6SW2v/Screenshot-2020-10-19-at-01.36.04.png\" title=\"Screenshot-2020-10-19-at-01.36.04.png\"><img src=\"/user_uploads/14278/33bS7koDnprQcgMQ5yH6SW2v/Screenshot-2020-10-19-at-01.36.04.png\"></a></div>",
        "id": 213731803,
        "sender_full_name": "Trinh Le Khanh",
        "timestamp": 1603064250
    },
    {
        "content": "<p>I did it for the variant with <code>{n. n &gt; 0}</code>. Or rather, I think I even did it for the variant where all the sets where <code>UNIV</code> (which I think should be equivalent).</p>",
        "id": 213750536,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1603092237
    },
    {
        "content": "<p>I set up the variant with <code>{n. n&gt;0}</code> and the result is shown as follows:<br>\n<a href=\"/user_uploads/14278/yOUlRu7UchAgnlaa6uOva90k/Screenshot-2020-10-19-at-13.43.18.png\">Screenshot-2020-10-19-at-13.43.18.png</a> <br>\n<a href=\"/user_uploads/14278/ATVnzs31Pje9yFe08EXrjBGd/Screenshot-2020-10-19-at-13.43.48.png\">Screenshot-2020-10-19-at-13.43.48.png</a> <br>\nHow did you generate the definition of P and Q from them?</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/14278/yOUlRu7UchAgnlaa6uOva90k/Screenshot-2020-10-19-at-13.43.18.png\" title=\"Screenshot-2020-10-19-at-13.43.18.png\"><img src=\"/user_uploads/14278/yOUlRu7UchAgnlaa6uOva90k/Screenshot-2020-10-19-at-13.43.18.png\"></a></div><div class=\"message_inline_image\"><a href=\"/user_uploads/14278/ATVnzs31Pje9yFe08EXrjBGd/Screenshot-2020-10-19-at-13.43.48.png\" title=\"Screenshot-2020-10-19-at-13.43.48.png\"><img src=\"/user_uploads/14278/ATVnzs31Pje9yFe08EXrjBGd/Screenshot-2020-10-19-at-13.43.48.png\"></a></div><div class=\"codehilite\"><pre><span></span><code>definition &quot;P = (λa b c d. False)&quot;\ndefinition &quot;Q = (λa b c d. a ≠ 1 ∧ (b = 1 ∧ c = 1 ∧ d = 1 ∨ b ≠ 1 ∧ c = 1 ∧ d ≠ 1))&quot;\n</code></pre></div>",
        "id": 213773159,
        "sender_full_name": "Trinh Le Khanh",
        "timestamp": 1603107958
    },
    {
        "content": "<p>This is perhaps a bit tricky to read. If you look at the first one, you see that it's a predicate P a b c d that is defined to be false for all a, b, c, d ≤ 2 and unspecified everywhere else. So I went ahead and just defined it to be false everywhere.</p>",
        "id": 213801860,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1603120741
    },
    {
        "content": "<p>For Q you just have to see for which combinations of the values 0,1,2 for a,b,c,d it is true and then write down a definition that does exactly that</p>",
        "id": 213801931,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1603120775
    },
    {
        "content": "<p>Thank you :D. I have another question is that I'm testing my formulas with a small case. My code to setup is:</p>\n<div class=\"codehilite\"><pre><span></span><code>theory prog_2\n  imports Main\nbegin\n(*P*)\ndefinition J :: &quot;nat set&quot; where\n&quot;J = {0}&quot;\ndefinition U :: &quot;nat set&quot; where\n&quot;U = {0}&quot;\ndefinition T :: &quot;nat set&quot; where\n&quot;T = {0}&quot;\ndefinition L :: &quot;nat set&quot; where\n&quot;L = {0, 1}&quot;\n\n(*Q*)\ndefinition I :: &quot;nat set&quot; where\n&quot;I = {0, 1}&quot;\ndefinition V :: &quot;nat set&quot; where\n&quot;V = {0}&quot;\ndefinition K :: &quot;nat set&quot; where\n&quot;K = {0}&quot;\ndefinition H :: &quot;nat set&quot; where\n&quot;H = {0, 1}&quot;\n(*test*)\nvalue &quot;∃l∈L.∃h∈H.(∀j∈J.∀u∈U.(∀t∈T. P j u t l ⟶ (∃i∈I.∃v∈V.∀k∈K. Q i v k h)))&quot;\nend\n</code></pre></div>\n\n\n<p>The result is:</p>\n<div class=\"codehilite\"><pre><span></span><code>  (P 0 0 0 0 ⟶ Q 0 0 0 0 ∨ Q 1 0 0 0)\n∨ (P 0 0 0 0 ⟶ Q 0 0 0 1 ∨ Q 1 0 0 1)\n∨ (P 0 0 0 1 ⟶ Q 0 0 0 0 ∨ Q 1 0 0 0)\n∨ (P 0 0 0 1 ⟶ Q 0 0 0 1 ∨ Q 1 0 0 1)\n</code></pre></div>\n\n\n<p>But my expected output is:</p>\n<div class=\"codehilite\"><pre><span></span><code>  (P 0 0 0 0 ⟶ Q 0 0 0 0 ∨ Q 1 0 0 0)\n∨ (P 0 0 0 0 ⟶ Q 0 0 0 0 ∨ Q 1 0 0 1)\n∨ (P 0 0 0 0 ⟶ Q 0 0 0 1 ∨ Q 1 0 0 0)\n∨ (P 0 0 0 0 ⟶ Q 0 0 0 1 ∨ Q 1 0 0 1)\n∨ (P 0 0 0 1 ⟶ Q 0 0 0 0 ∨ Q 1 0 0 0)\n∨ (P 0 0 0 1 ⟶ Q 0 0 0 0 ∨ Q 1 0 0 1)\n∨ (P 0 0 0 1 ⟶ Q 0 0 0 1 ∨ Q 1 0 0 0)\n∨ (P 0 0 0 1 ⟶ Q 0 0 0 1 ∨ Q 1 0 0 1)\n</code></pre></div>\n\n\n<p>I know that because I put <code>∃h∈H</code> out of the first open bracket, so the result has the same value at the <code>h</code> position. I tried to move <code>∃h∈H</code> inside or use another variable like h1 but the result is not what I expected. Do you have any suggestion?</p>",
        "id": 213851122,
        "sender_full_name": "Trinh Le Khanh",
        "timestamp": 1603144345
    },
    {
        "content": "<p>My solution is that I added the formula for the different <code>h</code> like this</p>\n<div class=\"codehilite\"><pre><span></span><code>value &quot;∃l∈L.∃h∈H.(∀j∈J.∀u∈U.(∀t∈T. P j u t l ⟶ (∃i∈I.∃v∈V.∀k∈K.∃h1∈H-{h}. Q i v k h1))\n∨ (∀t∈T. P j u t l ⟶ (∃i∈I.∃v∈V.∀k∈K. Q i v k h)))&quot;\n</code></pre></div>\n\n\n<p>It works. It seems not the smart way, though.<br>\nUPDATE: It DOESN'T works. It duplicated the result :D</p>",
        "id": 213890001,
        "sender_full_name": "Trinh Le Khanh",
        "timestamp": 1603183562
    },
    {
        "content": "<p>I think that you are confusing <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∀</mi><mi mathvariant=\"normal\">∃</mi></mrow><annotation encoding=\"application/x-tex\">\\forall \\exists</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord\">∀</span><span class=\"mord\">∃</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∃</mi><mi mathvariant=\"normal\">∀</mi></mrow><annotation encoding=\"application/x-tex\">\\exists\\forall</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord\">∃</span><span class=\"mord\">∀</span></span></span></span>. You version is equivalent to putting the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∃</mi></mrow><annotation encoding=\"application/x-tex\">\\exists</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord\">∃</span></span></span></span> inside the implication symbol:</p>\n<div class=\"codehilite\"><pre><span></span><code>lemma &quot;(∃l∈L. (∀j∈J. ∀u∈U. (∀t∈T. (P j u t l ⟶ (∃h∈H. ∃i∈I.∃v∈V.∀k∈K. Q i v k h))))) ⟷\n(∃l∈L.∃h∈H.(∀j∈J.∀u∈U.(∀t∈T. P j u t l ⟶ (∃i∈I.∃v∈V.∀k∈K.∃h1∈H-{h}. Q i v k h1))\n∨ (∀t∈T. P j u t l ⟶ (∃i∈I.∃v∈V.∀k∈K. Q i v k h))))&quot;\n  unfolding L_def I_def J_def V_def H_def T_def K_def\n  apply auto\n  done\n</code></pre></div>",
        "id": 213890989,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1603184172
    },
    {
        "content": "<blockquote>\n<p>I think that you are confusing \\forall \\exists∀∃ and \\exists\\forall∃∀. You version is equivalent to putting the \\exists∃ inside the implication symbol</p>\n</blockquote>\n<p>Thank you. I know that but this is a small piece of my code. I need something like</p>\n<div class=\"codehilite\"><pre><span></span><code>((P 0 0 0 0 ⟶ Q 0 0 0 0 ∨ Q 1 0 0 0) ∧ ¬(all the others))\n∨ ((P 0 0 0 0 ⟶ Q 0 0 0 1 ∨ Q 1 0 0 1) ∧ ¬(all the others))\n∨ ((P 0 0 0 0 ⟶ Q 0 0 0 0 ∨ Q 1 0 0 1) ∧ ¬(all the others))\n∨ ((P 0 0 0 0 ⟶ Q 0 0 0 1 ∨ Q 1 0 0 0) ∧ ¬(all the others))\n</code></pre></div>\n\n\n<p>So if I put the \\exists inside, it looks like:</p>\n<div class=\"codehilite\"><pre><span></span><code>((P 0 0 0 0 ⟶ (Q 0 0 0 0 ∨ Q 1 0 0 0) ∨ Q 0 0 0 1 ∨ Q 1 0 0 1) ∧ ¬(all the others))\n</code></pre></div>\n\n\n<p>The two things are different.</p>",
        "id": 213894182,
        "sender_full_name": "Trinh Le Khanh",
        "timestamp": 1603186188
    }
]