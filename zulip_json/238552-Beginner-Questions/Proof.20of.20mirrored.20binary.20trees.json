[
    {
        "content": "<p>Hello again. When proving with Isabelle, I came across an issue of a simplification rule getting in the way of proving my main lemma \"mirror_proof\". If I delete the bolded code below, I get errors on proofs leading up to mirror_proof but mirror_proof can complete successfully  but if I leave it in, apply(auto) at mirror_proof becomes purple and subsequently red (Meaning it's failed I presume?). Is there any way I can prevent Isabelle from using a certain rule when proving a lemma?</p>\n<p>datatype 'a tree = Tip | Node \"'a tree\" 'a \" 'a tree\"</p>\n<p>fun mirror :: \"'a tree ⇒ 'a tree\" where<br>\n\"mirror Tip = Tip\" |<br>\n\"mirror (Node l a r ) = Node (mirror r ) a (mirror l)\"</p>\n<p>**lemma reverse_simp [simp] : \"reverse (snoc ys y) = Cons y (reverse ys)\"<br>\n  apply(induction ys)<br>\n  apply(auto)<br>\n  done**</p>\n<p>lemma mirror_simp [simp]: \"Cons x (reverse xs) =  (reverse (snoc xs x))\"<br>\n  apply(induction xs)<br>\n  apply(auto)<br>\n  done</p>\n<p>lemma mirror_simp__3 [simp]: \"snoc ys y = app ys (Cons y Nil)\"<br>\n  apply(induction ys)<br>\n  apply(auto)<br>\n  done</p>\n<p>lemma app_distributivity [simp]: \"app (app ys xs) zs = app ys (app xs zs)\"<br>\n  apply(induction ys)<br>\n   apply(auto)<br>\n  done</p>\n<p>lemma app_distributivity_v2 [simp]: \"xs = app xs Nil\"<br>\n  apply(induction xs)<br>\n   apply(auto)<br>\n  done</p>\n<p>lemma mirror_simp_distributive [simp]: \"reverse (app xs ys) = app (reverse ys) (reverse xs)\"<br>\n  apply(induction xs)<br>\n  apply(auto)<br>\n  done</p>\n<p>lemma mirror_proof : \"pre_order (mirror t) = reverse (post_order t)\"<br>\n  apply(induction t)<br>\n  apply(auto)<br>\n  done</p>",
        "id": 391618095,
        "sender_full_name": "Abu",
        "timestamp": 1695012617
    },
    {
        "content": "<p>In general: auto applies simp rules from left to right, so the right-hand side should be easier than the left-hand side</p>",
        "id": 391618418,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1695012827
    },
    {
        "content": "<p>So <code>app_distributivity_v2</code> does not fit this requirement</p>",
        "id": 391618558,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1695012872
    },
    {
        "content": "<p>Regarding Zulip communication: <span class=\"user-mention\" data-user-id=\"650821\">@Abu</span>, could you please prepend and append a line with three backticks to your code blocks? This way they get typeset as code, even with syntax highlighting. Putting code in posts as mere text makes your posts harder to read.</p>",
        "id": 391695685,
        "sender_full_name": "Wolfgang Jeltsch",
        "timestamp": 1695042401
    },
    {
        "content": "<p>Probably the most straightforward answer is to manually remove a rule  with <code>del</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kp\">apply</span><span class=\"o\">(</span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"n\">del</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">reverse_simp</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Another option is to remove the <code>[simp]</code> declarations from your lemmas. This adds them a simplification rules, and by omitting that they won't automatically be added to the simp set (set of all simplification rules). That effectively will require you to opt in to them.</p>\n<p>Another option is to use less powerful tactics. <code>simp</code> and <code>auto</code> are very powerful. This is great for effort, but not so great for control. You can apply inference rules directly with <code>rule</code>, <code>erule</code>, <code>drule</code> etc. <a href=\"https://isabelle.in.tum.de/doc/tutorial.pdf\">Chapter 5 in the Isabelle tutorial</a> has a ton of information there.</p>",
        "id": 391989983,
        "sender_full_name": "Alex Weisberger",
        "timestamp": 1695155306
    },
    {
        "content": "<p>Disclaimer: The Isabelle tutorial is considered “old”, meaning not everything there is recommended to be followed or even applies still. Generally, the <code>prog-prove</code> tutorial is to be preferred, but it is true that it doesn’t go very much into the lower-level proof methods, those that give you more control.</p>",
        "id": 391990840,
        "sender_full_name": "Wolfgang Jeltsch",
        "timestamp": 1695155675
    },
    {
        "content": "<p>Yea unfortunately <code>prog-prove</code> is ~1/4 the size of the tutorial. There's just a lot more info in the tutorial - I wonder if there's any plans to revitalize it.</p>",
        "id": 391992372,
        "sender_full_name": "Alex Weisberger",
        "timestamp": 1695156393
    }
]