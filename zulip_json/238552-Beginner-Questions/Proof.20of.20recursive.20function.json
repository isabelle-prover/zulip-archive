[
    {
        "content": "<p>I have this function</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">fx</span><span class=\"o\">::</span><span class=\"s\">\"fxrec ⇒ fxrec\"</span>\n<span class=\"w\">  </span><span class=\"kp\">where</span><span class=\"w\"> </span><span class=\"s\">\"fx r =  ⦇cnt = cnt r - 1, x = x r - 1, y = y r - 1⦈\"</span>\n\n<span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">fx_lemma</span><span class=\"o\">:</span>\n<span class=\"w\">  </span><span class=\"kp\">assumes</span><span class=\"w\"> </span><span class=\"s\">\"x r ≥ y r\"</span>\n<span class=\"w\">  </span><span class=\"kp\">shows</span><span class=\"w\"> </span><span class=\"s\">\"x (fx r) ≥ y (fx r)\"</span>\n<span class=\"k\">proof</span><span class=\"w\"> </span><span class=\"o\">-</span>\n<span class=\"w\">  </span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">thesis</span>\n<span class=\"w\">    </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">assms</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">simp</span>\n<span class=\"k\">qed</span>\n\n<span class=\"kn\">function</span><span class=\"w\"> </span><span class=\"n\">fx_loop</span><span class=\"o\">::</span><span class=\"s\">\"fxrec ⇒ fxrec\"</span><span class=\"w\"> </span><span class=\"kp\">where</span>\n<span class=\"s\">\"cnt r = 0 ⟹ fx_loop r = r\"</span><span class=\"w\"> </span><span class=\"o\">|</span>\n<span class=\"s\">\"cnt r &gt; 0 ⟹ fx_loop r = fx_loop (fx r)\"</span>\n<span class=\"w\">  </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">auto</span>\n\n<span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">fx_loop_lemma</span><span class=\"o\">:</span>\n<span class=\"w\">  </span><span class=\"kp\">fixes</span>\n<span class=\"w\">  </span><span class=\"n\">r</span><span class=\"o\">::</span><span class=\"s\">\"fxrec\"</span>\n<span class=\"w\">  </span><span class=\"kp\">assumes</span><span class=\"w\"> </span><span class=\"s\">\"x r &gt; y r\"</span>\n<span class=\"w\">  </span><span class=\"kp\">shows</span><span class=\"w\"> </span><span class=\"s\">\"x (fx_loop r) ≥ y (fx_loop r)\"</span>\n</code></pre></div>\n<p>I want to prove that the lemma holds for the loop, since it is only applying the first function more times. I think the best way is by induction on cnt, but if I induct on cnt how could I use the IH to prove my goal? Trying I just end up in a recursive calling that brings me nowhere.</p>",
        "id": 431128479,
        "sender_full_name": "Salvatore Francesco Rossetta",
        "timestamp": 1712160596
    },
    {
        "content": "<p>you have missing the termination proof. Then you also get the proper induction principle</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">termination</span><span class=\"w\"> </span><span class=\"gr\">sorry</span>\n\n<span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">fx_loop_lemma</span><span class=\"o\">:</span>\n<span class=\"w\">  </span><span class=\"kp\">fixes</span>\n<span class=\"w\">  </span><span class=\"n\">r</span><span class=\"o\">::</span><span class=\"s\">\"fxrec\"</span>\n<span class=\"w\">  </span><span class=\"kp\">assumes</span><span class=\"w\"> </span><span class=\"s\">\"x r &gt; y r\"</span>\n<span class=\"w\">  </span><span class=\"kp\">shows</span><span class=\"w\"> </span><span class=\"s\">\"x (fx_loop r) ≥ y (fx_loop r)\"</span>\n<span class=\"w\">  </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">assms</span>\n<span class=\"w\">  </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">induction</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"w\"> </span><span class=\"n\">rule</span><span class=\"o\">:</span><span class=\"n\">fx_loop.induct</span><span class=\"o\">)</span>\n<span class=\"w\">    </span><span class=\"n\">auto</span>\n</code></pre></div>",
        "id": 431129650,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1712160924
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"233198\">Mathias Fleury</span> <a href=\"#narrow/stream/238552-Beginner-Questions/topic/Proof.20of.20recursive.20function/near/431129650\">said</a>:</p>\n<blockquote>\n<p>you have missing the termination proof. Then you also get the proper induction principle</p>\n<p><div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">termination</span><span class=\"w\"> </span><span class=\"gr\">sorry</span>\n\n<span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">fx_loop_lemma</span><span class=\"o\">:</span>\n<span class=\"w\">  </span><span class=\"kp\">fixes</span>\n<span class=\"w\">  </span><span class=\"n\">r</span><span class=\"o\">::</span><span class=\"s\">\"fxrec\"</span>\n<span class=\"w\">  </span><span class=\"kp\">assumes</span><span class=\"w\"> </span><span class=\"s\">\"x r &gt; y r\"</span>\n<span class=\"w\">  </span><span class=\"kp\">shows</span><span class=\"w\"> </span><span class=\"s\">\"x (fx_loop r) ≥ y (fx_loop r)\"</span>\n<span class=\"w\">  </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">assms</span>\n<span class=\"w\">  </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">induction</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"w\"> </span><span class=\"n\">rule</span><span class=\"o\">:</span><span class=\"n\">fx_loop.induct</span><span class=\"o\">)</span>\n<span class=\"w\">    </span><span class=\"n\">auto</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>It works, but when I try to apply it to my real case, even if I have the same assumptions (copy and pasted), I still have some failed subgoal.</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">lemma1</span><span class=\"o\">:</span>\n<span class=\"w\">  </span><span class=\"kp\">fixes</span>\n<span class=\"w\">  </span><span class=\"n\">rec</span><span class=\"o\">::</span><span class=\"s\">\"('a::linorder, 'b) Divisor_Module\"</span><span class=\"w\"> </span><span class=\"kp\">and</span>\n<span class=\"w\">  </span><span class=\"n\">m</span><span class=\"o\">::</span><span class=\"s\">\"rat\"</span><span class=\"w\"> </span><span class=\"kp\">and</span>\n<span class=\"w\">  </span><span class=\"n\">party1</span><span class=\"o\">::</span><span class=\"s\">\"'b\"</span><span class=\"w\"> </span><span class=\"kp\">and</span><span class=\"w\"> </span><span class=\"n\">party2</span><span class=\"o\">::</span><span class=\"s\">\"'b\"</span><span class=\"w\"> </span><span class=\"kp\">and</span><span class=\"w\"> </span><span class=\"n\">parties</span><span class=\"o\">::</span><span class=\"s\">\"'b Parties\"</span>\n<span class=\"kp\">assumes</span><span class=\"w\"> </span><span class=\"s\">\"v1 &gt; v2\"</span>\n<span class=\"kp\">assumes</span><span class=\"w\"> </span><span class=\"s\">\"party1 ≠ party2\"</span>\n<span class=\"w\">  </span><span class=\"kp\">defines</span><span class=\"w\"> </span><span class=\"s\">\"i1 ≡ get_index_upd party1 (p rec)\"</span>\n<span class=\"w\">  </span><span class=\"kp\">defines</span><span class=\"w\"> </span><span class=\"s\">\"i2 ≡ get_index_upd party2 (p rec)\"</span>\n<span class=\"w\">  </span><span class=\"kp\">defines</span><span class=\"w\"> </span><span class=\"s\">\"fv1 ≡ v1 / (d rec) ! ((sl rec) ! i1)\"</span>\n<span class=\"w\">  </span><span class=\"kp\">defines</span><span class=\"w\"> </span><span class=\"s\">\"fv2 ≡ v2 / (d rec) ! ((sl rec) ! i2)\"</span>\n<span class=\"w\">  </span><span class=\"kp\">defines</span><span class=\"w\"> </span><span class=\"s\">\"winners ≡ get_winners (fv rec) (p rec)\"</span>\n<span class=\"w\">  </span><span class=\"kp\">assumes</span><span class=\"w\"> </span><span class=\"s\">\"sl rec ! i1 ≥ sl rec ! i2\"</span>\n<span class=\"w\">  </span><span class=\"kp\">assumes</span><span class=\"w\"> </span><span class=\"s\">\"i1 ≠ i2\"</span>\n<span class=\"w\">  </span><span class=\"kp\">assumes</span><span class=\"w\"> </span><span class=\"s\">\"i1 &lt; length (sl rec)\"</span>\n<span class=\"w\">  </span><span class=\"kp\">assumes</span><span class=\"w\"> </span><span class=\"s\">\"i2 &lt; length (sl rec)\"</span>\n<span class=\"kp\">shows</span><span class=\"w\"> </span><span class=\"s\">\"sl (assign_seats rec) ! i1 ≥ sl (assign_seats rec) ! i2\"</span>\n<span class=\"w\">  </span><span class=\"gr\">sorry</span>\n\n<span class=\"kn\">function</span><span class=\"w\"> </span><span class=\"n\">loop_o</span><span class=\"w\"> </span><span class=\"o\">::</span>\n<span class=\"w\">  </span><span class=\"s\">\"('a::linorder, 'b) Divisor_Module ⇒ ('a::linorder, 'b) Divisor_Module\"</span>\n<span class=\"w\">  </span><span class=\"kp\">where</span>\n<span class=\"w\">  </span><span class=\"s\">\"ns r = 0  ⟹ loop_o r = r\"</span><span class=\"w\"> </span><span class=\"o\">|</span>\n<span class=\"w\">  </span><span class=\"s\">\"ns r &gt; 0 ⟹ loop_o r = loop_o (assign_seats r)\"</span>\n<span class=\"w\">  </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">auto</span>\n<span class=\"kn\">termination</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">relation</span><span class=\"w\"> </span><span class=\"s\">\"measure (λr. ns r)\"</span><span class=\"o\">)</span>\n<span class=\"w\">               </span><span class=\"o\">(</span><span class=\"n\">auto</span><span class=\"w\"> </span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"n\">add</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Let_def</span><span class=\"w\"> </span><span class=\"n\">nseats_decreasing</span><span class=\"o\">)</span>\n<span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">code</span><span class=\"o\">]:</span><span class=\"w\"> </span><span class=\"s\">‹loop_o r = (if ns r = 0 then r else loop_o (assign_seats r))›</span>\n<span class=\"w\">  </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">cases</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">auto</span>\n\n<span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">loop_o_concordant</span><span class=\"o\">:</span>\n<span class=\"w\">  </span><span class=\"n\">/*</span><span class=\"w\"> </span><span class=\"n\">same</span><span class=\"w\"> </span><span class=\"n\">assms</span><span class=\"w\"> </span><span class=\"n\">as</span><span class=\"w\"> </span><span class=\"n\">lemma1</span><span class=\"w\"> </span><span class=\"n\">*/</span>\n<span class=\"w\">  </span><span class=\"kp\">shows</span><span class=\"w\"> </span><span class=\"s\">\"sl (loop_o rec) ! i1 ≥ sl (loop_o rec) ! i2\"</span>\n<span class=\"w\">  </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">assms</span><span class=\"w\"> </span><span class=\"n\">lemma1</span>\n<span class=\"w\">  </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">induction</span><span class=\"w\"> </span><span class=\"n\">rec</span><span class=\"w\"> </span><span class=\"n\">rule</span><span class=\"o\">:</span><span class=\"n\">loop_o.induct</span><span class=\"o\">)</span>\n<span class=\"w\">    </span><span class=\"n\">auto</span>\n</code></pre></div>\n<p>Isn't the \"skeleton\" of the function and of the lemmas the same as the example I provided in the question?</p>",
        "id": 431135618,
        "sender_full_name": "Salvatore Francesco Rossetta",
        "timestamp": 1712162901
    },
    {
        "content": "<p>Without error message or full example, no clue what the error message</p>",
        "id": 431158086,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1712171552
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"233198\">Mathias Fleury</span> <a href=\"#narrow/stream/238552-Beginner-Questions/topic/Proof.20of.20recursive.20function/near/431158086\">said</a>:</p>\n<blockquote>\n<p>Without error message or full example, no clue what the error message</p>\n</blockquote>\n<p>the error message is a failing of both subgoals (the two cases of the loop above) and is unfolding all the code, so it's just really long. I will try to recreate the error without having to paste the full example.</p>",
        "id": 431160364,
        "sender_full_name": "Salvatore Francesco Rossetta",
        "timestamp": 1712172443
    },
    {
        "content": "<p>I can also run the full example…</p>",
        "id": 431161249,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1712172751
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"233198\">Mathias Fleury</span> <a href=\"#narrow/stream/238552-Beginner-Questions/topic/Proof.20of.20recursive.20function/near/431161249\">said</a>:</p>\n<blockquote>\n<p>I can also run the full example…</p>\n</blockquote>\n<p>Thank you, I put everything in a file and cleaned some useless parts not related to this, at the end there is the lemma with the finished subgoals (and slightly above the example we talked about that works).</p>\n<p><a href=\"/user_uploads/14278/EnGeGxhMus3ADyQQKekv4658/Votes.thy\">Votes.thy</a></p>",
        "id": 431228390,
        "sender_full_name": "Salvatore Francesco Rossetta",
        "timestamp": 1712209156
    },
    {
        "content": "<p>So I started with:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"w\">  </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">induction</span><span class=\"w\"> </span><span class=\"n\">rec</span><span class=\"w\"> </span><span class=\"n\">rule</span><span class=\"o\">:</span><span class=\"n\">loop_o.induct</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"n\">subgoal</span><span class=\"w\"> </span><span class=\"kp\">for</span><span class=\"w\"> </span><span class=\"n\">r</span>\n<span class=\"w\">    </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">lemma1</span><span class=\"o\">[</span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">v2</span><span class=\"w\"> </span><span class=\"n\">v1</span><span class=\"w\"> </span><span class=\"n\">party1</span><span class=\"w\"> </span><span class=\"n\">party2</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"o\">]</span>\n<span class=\"w\">    </span><span class=\"kp\">apply</span><span class=\"w\">  </span><span class=\"o\">(</span><span class=\"n\">auto</span><span class=\"w\"> </span><span class=\"n\">simp</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Let_def</span><span class=\"w\"> </span><span class=\"n\">split</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">if_splits</span><span class=\"w\"> </span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"n\">del</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">assign_seats.simps</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>(I just use subgoal to focus on the first case, using Isar would be better but for exploration, I just use subgoal)</p>",
        "id": 431229465,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1712209922
    },
    {
        "content": "<p>From the look of the subgoal, I think I instantiated lemma1 wrong, but I don not have enough context (and enough time to think it)</p>",
        "id": 431229763,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1712210118
    },
    {
        "content": "<p>This is were I would start from here: find the right instantiation so that the conclusion of the assumption matches to conclusion of the theorem</p>",
        "id": 431230670,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1712210589
    },
    {
        "content": "<p>Then look at the assumption, so currently in <code>(sl r ! get_index_upd party2 (p r) ≤ sl r ! get_index_upd party1 (p r) ⟹\n     sl (assign_seats r) ! get_index_upd party2 (p r)\n     ≤ sl (assign_seats r) ! get_index_upd party1 (p r))</code>, you want the conclusion <code>sl (assign_seats r) ! get_index_upd party2 (p r)\n     ≤ sl (assign_seats r) ! get_index_upd party1 (p r))</code> to match <code> sl r ! get_index_upd party2 (p r) ≤ sl r ! get_index_upd party1 (p r)</code></p>",
        "id": 431230790,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1712210655
    },
    {
        "content": "<p>then the question is why is the assumption not discharged <code>(sl r ! get_index_upd party2 (p r) ≤ sl r ! get_index_upd party1 (p r)</code></p>",
        "id": 431230822,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1712210677
    },
    {
        "content": "<p>once it will be discharged, the theorem should go through</p>",
        "id": 431230841,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1712210687
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"233198\">Mathias Fleury</span> <a href=\"#narrow/stream/238552-Beginner-Questions/topic/Proof.20of.20recursive.20function/near/431230790\">said</a>:</p>\n<blockquote>\n<p>Then look at the assumption, so currently in <code>(sl r ! get_index_upd party2 (p r) ≤ sl r ! get_index_upd party1 (p r) ⟹\n     sl (assign_seats r) ! get_index_upd party2 (p r)\n     ≤ sl (assign_seats r) ! get_index_upd party1 (p r))</code>, you want the conclusion <code>sl (assign_seats r) ! get_index_upd party2 (p r)\n     ≤ sl (assign_seats r) ! get_index_upd party1 (p r))</code> to match <code> sl r ! get_index_upd party2 (p r) ≤ sl r ! get_index_upd party1 (p r)</code></p>\n</blockquote>\n<p>I am trying to solve this and in meantime I changed the code (to prove the first lemma I use that here I skipped with sorry). Now when I use induction provided by the function and instantiating the lemma I am using, auto is running without ending (it's highlighted). Instead, when I focus on the subgoal as you did it is giving me \"No subgoals!\". Shouldn't this mean that all the subgoals have been proved? Then why the induction proof is not working?</p>",
        "id": 431658536,
        "sender_full_name": "Salvatore Francesco Rossetta",
        "timestamp": 1712396382
    },
    {
        "content": "<p>\"no subgoal\" means that the subgoal was proven and you can go to the next one with the keyword <code>done</code></p>",
        "id": 431856945,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1712552054
    },
    {
        "content": "<p>and given your description, it is probably the second goal that is looping</p>",
        "id": 431857012,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1712552097
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"233198\">Mathias Fleury</span> <a href=\"#narrow/stream/238552-Beginner-Questions/topic/Proof.20of.20recursive.20function/near/431856945\">said</a>:</p>\n<blockquote>\n<p>\"no subgoal\" means that the subgoal was proven and you can go to the next one with the keyword <code>done</code></p>\n</blockquote>\n<p>I did and I rearranged variables in <code>[of r party1 party v1 v2]</code> because of some type errors, later I have been looking at the second case and I get a failed subgoal. I understand there is some problem with the assms but since <code>loop_o</code> does not appear in any of the assms I do not know how to proceed. Should I prove some lemma halfway between the loop and the function I am using in it? Here is the code, I think it's better than pasting the failed subgoal.</p>\n<p><a href=\"/user_uploads/14278/NdAlXLqngCzh4Chgo3h-VSmI/Votes.thy\">Votes.thy</a></p>",
        "id": 431864176,
        "sender_full_name": "Salvatore Francesco Rossetta",
        "timestamp": 1712555956
    },
    {
        "content": "<p>If you look at the goal you have:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"w\">     </span><span class=\"n\">0</span><span class=\"w\"> </span><span class=\"n\">&lt;</span><span class=\"w\"> </span><span class=\"n\">ns</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"w\"> </span><span class=\"n\">⟹</span>\n<span class=\"w\">      </span><span class=\"o\">(</span>\n<span class=\"w\">           </span><span class=\"n\">index</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">party1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">index</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">assign_seats</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"o\">))</span><span class=\"w\"> </span><span class=\"n\">party1</span><span class=\"w\"> </span><span class=\"n\">⟹</span>\n<span class=\"w\">          </span><span class=\"ow\">...</span><span class=\"w\"> </span><span class=\"n\">⟹</span>\n<span class=\"w\">         </span><span class=\"n\">sl</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">loop_o</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">assign_seats</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"o\">))</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"n\">index</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">assign_seats</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"o\">))</span><span class=\"w\"> </span><span class=\"n\">party2</span>\n<span class=\"w\">         </span><span class=\"n\">≤</span><span class=\"w\"> </span><span class=\"n\">sl</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">loop_o</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">assign_seats</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"o\">))</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"n\">index</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">assign_seats</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"o\">))</span><span class=\"w\"> </span><span class=\"n\">party1</span>\n<span class=\"w\">     </span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">⟹</span>\n<span class=\"w\">    </span><span class=\"n\">i1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">index</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">party1</span><span class=\"w\"> </span><span class=\"n\">⟹</span>\n<span class=\"w\">    </span><span class=\"ow\">...</span><span class=\"w\"> </span><span class=\"ow\">.</span><span class=\"n\">⟹</span>\n<span class=\"w\">    </span><span class=\"n\">sl</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">loop_o</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">assign_seats</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"o\">))</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"n\">index</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">party2</span><span class=\"w\"> </span><span class=\"n\">≤</span><span class=\"w\"> </span><span class=\"n\">sl</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">loop_o</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">assign_seats</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"o\">))</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"n\">index</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">party1</span>\n</code></pre></div>",
        "id": 432045977,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1712602350
    },
    {
        "content": "<p>So I expect that that either the instantiation are wrong  (<code>p (assign_seats r)</code> vs <code>p r</code>) or that it should simplify but it does not</p>",
        "id": 432046131,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1712602396
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"233198\">Mathias Fleury</span> <a href=\"#narrow/stream/238552-Beginner-Questions/topic/Proof.20of.20recursive.20function/near/432046131\">said</a>:</p>\n<blockquote>\n<p>So I expect that that either the instantiation are wrong  (<code>p (assign_seats r)</code> vs <code>p r</code>) or that it should simplify but it does not</p>\n</blockquote>\n<p>So I tried to add an assumption <code>p rec = p (assign_seats rec)</code> but it was working the opposite way, instead of simplifying it was \"adding\" another <code>assign_seats</code>. Then I tried to free \"p rec\" just instantiating a normal variable independent of recursion and I have the two matched like this</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"w\"> </span><span class=\"n\">sl</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">loop_o</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">assign_seats</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"o\">))</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"n\">index</span><span class=\"w\"> </span><span class=\"n\">parties</span><span class=\"w\"> </span><span class=\"n\">party2</span>\n<span class=\"w\">     </span><span class=\"n\">≤</span><span class=\"w\"> </span><span class=\"n\">sl</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">loop_o</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">assign_seats</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"o\">))</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"n\">index</span><span class=\"w\"> </span><span class=\"n\">parties</span><span class=\"w\"> </span><span class=\"n\">party1</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>but it is still not working.</p>",
        "id": 432070186,
        "sender_full_name": "Salvatore Francesco Rossetta",
        "timestamp": 1712611588
    },
    {
        "content": "<p>I am not sure to get what you did. You should add <code>p (assign_seats rec) = p rec</code> as assumption to your goal (which probably involves going to Isar instead of continuing with subgoal).</p>",
        "id": 432148834,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1712647083
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"233198\">Mathias Fleury</span> <a href=\"#narrow/stream/238552-Beginner-Questions/topic/Proof.20of.20recursive.20function/near/432148834\">said</a>:</p>\n<blockquote>\n<p>I am not sure to get what you did. You should add <code>p (assign_seats rec) = p rec</code> as assumption to your goal (which probably involves going to Isar instead of continuing with subgoal).</p>\n</blockquote>\n<p>Yes, yesterday in my messy message I wrote that I added  <code>p rec = p (assign_seats rec)</code> because it seemed the right thing to do but it still does not work. I get</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"w\"> </span><span class=\"n\">1.</span><span class=\"w\"> </span><span class=\"n\">0</span><span class=\"w\"> </span><span class=\"n\">&lt;</span><span class=\"w\"> </span><span class=\"n\">ns</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"w\"> </span><span class=\"n\">⟹</span>\n<span class=\"w\">    </span><span class=\"o\">(</span><span class=\"n\">fv</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"n\">index</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">party1</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">     </span><span class=\"n\">v1</span><span class=\"w\"> </span><span class=\"n\">/</span><span class=\"w\"> </span><span class=\"n\">rat_of_nat</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">d</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">assign_seats</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">sl</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">assign_seats</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"n\">index</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">party1</span><span class=\"o\">))</span><span class=\"w\"> </span><span class=\"n\">⟹</span>\n<span class=\"w\">     </span><span class=\"ow\">...</span><span class=\"w\"> </span><span class=\"n\">⟹</span>\n<span class=\"w\">     </span><span class=\"n\">sl</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">loop_o</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">assign_seats</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"o\">))</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"n\">index</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">party2</span>\n<span class=\"w\">     </span><span class=\"n\">≤</span><span class=\"w\"> </span><span class=\"n\">sl</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">loop_o</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">assign_seats</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"o\">))</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"n\">index</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">party1</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">⟹</span>\n<span class=\"w\">  </span><span class=\"ow\">...</span><span class=\"w\"> </span><span class=\"n\">⟹</span>\n<span class=\"w\">    </span><span class=\"n\">sl</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">loop_o</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">assign_seats</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"o\">))</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"n\">index</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">party2</span>\n<span class=\"w\">    </span><span class=\"n\">≤</span><span class=\"w\"> </span><span class=\"n\">sl</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">loop_o</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">assign_seats</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"o\">))</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"n\">index</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">party1</span>\n</code></pre></div>\n<p>So now these two match and it should work. Yet it does not</p>",
        "id": 432156389,
        "sender_full_name": "Salvatore Francesco Rossetta",
        "timestamp": 1712648919
    },
    {
        "content": "<p>Now is the point to look at the assumptions like <code>fv r ! index (p r) party1 =\n     v1 / rat_of_nat (d (assign_seats r) ! (sl (assign_seats r) ! index (p r) party1))</code>, because auto is not able to discharge them. Does that hold? If so why? My guess is that it is again an issue with <code>assign_seats r</code> vs <code>r</code> and that you add simp rules to simplify them, but I am not sure</p>",
        "id": 432157481,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1712649137
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"233198\">Mathias Fleury</span> <a href=\"#narrow/stream/238552-Beginner-Questions/topic/Proof.20of.20recursive.20function/near/432157481\">said</a>:</p>\n<blockquote>\n<p>Now is the point to look at the assumptions like <code>fv r ! index (p r) party1 =\n     v1 / rat_of_nat (d (assign_seats r) ! (sl (assign_seats r) ! index (p r) party1))</code>, because auto is not able to discharge them. Does that hold? If so why? My guess is that it is again an issue with <code>assign_seats r</code> vs <code>r</code> and that you add simp rules to simplify them, but I am not sure</p>\n</blockquote>\n<p>Well it does not hold, because it should hold this way instead <code>fv (assign_seats r) ! index (p r) party1 = ...</code>. If you look back at my code, I used a define <code>fv1 = fv rec ! index (p r) party1</code> and then subsequently I assumed <code>fv1 = ...</code>. So, if I understood correctly, while with the assumes \"rec\" is changing to \"assign_seats rec\" during induction, the defines stays at <code>fv1 = fv rec</code>, while I want it to change to <code>fv1 = fv (assign_seats rec)</code> and for this I should move this define to the assumptions, right?</p>",
        "id": 432166434,
        "sender_full_name": "Salvatore Francesco Rossetta",
        "timestamp": 1712651501
    },
    {
        "content": "<p>The definition are already included in assms. You can force the unfolding with:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"w\">  </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">assms</span><span class=\"o\">(</span><span class=\"n\">6</span><span class=\"o\">-)</span><span class=\"w\"> </span><span class=\"n\">assign_seats_concordant</span><span class=\"w\"> </span><span class=\"k\">unfolding</span><span class=\"w\"> </span><span class=\"n\">assms</span><span class=\"o\">(</span><span class=\"n\">1</span><span class=\"o\">-</span><span class=\"n\">5</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">induction</span><span class=\"w\"> </span><span class=\"n\">rec</span><span class=\"w\">  </span><span class=\"n\">rule</span><span class=\"o\">:</span><span class=\"n\">loop_o.induct</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"n\">subgoal</span><span class=\"w\"> </span><span class=\"kp\">for</span><span class=\"w\"> </span><span class=\"n\">r</span>\n<span class=\"w\">    </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">assign_seats_concordant</span><span class=\"o\">[</span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"w\"> </span><span class=\"n\">party1</span><span class=\"w\"> </span><span class=\"n\">party2</span><span class=\"w\"> </span><span class=\"n\">v1</span><span class=\"w\"> </span><span class=\"n\">v2</span><span class=\"o\">]</span>\n<span class=\"w\">    </span><span class=\"kp\">apply</span><span class=\"w\">  </span><span class=\"o\">(</span><span class=\"n\">auto</span><span class=\"w\"> </span><span class=\"n\">simp</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Let_def</span><span class=\"w\"> </span><span class=\"n\">split</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">if_splits</span><span class=\"w\"> </span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"n\">del</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">assign_seats.simps</span><span class=\"o\">)</span>\n<span class=\"w\">    </span><span class=\"k\">done</span>\n<span class=\"w\">  </span><span class=\"n\">subgoal</span><span class=\"w\"> </span><span class=\"kp\">for</span><span class=\"w\"> </span><span class=\"n\">r</span>\n<span class=\"w\">    </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">assign_seats_concordant</span><span class=\"o\">[</span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"w\"> </span><span class=\"n\">party1</span><span class=\"w\"> </span><span class=\"n\">party2</span><span class=\"w\"> </span><span class=\"n\">v1</span><span class=\"w\"> </span><span class=\"n\">v2</span><span class=\"o\">]</span>\n<span class=\"w\">    </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">auto</span><span class=\"w\"> </span><span class=\"n\">simp</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Let_def</span><span class=\"w\"> </span><span class=\"n\">split</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">if_splits</span><span class=\"w\"> </span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"n\">del</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">assign_seats.simps</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>but I have not spent enough trying to understand why it does not work (that is your job, not mine!)</p>",
        "id": 432216483,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1712664033
    },
    {
        "content": "<p>I cleaned my code and corrected some mistakes, now the first subgoal is working, while the second is missing one subgoal that is starting with this</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"w\"> </span><span class=\"n\">1.</span><span class=\"w\"> </span><span class=\"n\">ns</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">0</span><span class=\"w\"> </span><span class=\"n\">⟹</span>\n<span class=\"w\">    </span><span class=\"n\">0</span><span class=\"w\"> </span><span class=\"n\">&lt;</span><span class=\"w\"> </span><span class=\"n\">ns</span><span class=\"w\"> </span><span class=\"n\">ra_</span><span class=\"w\"> </span><span class=\"n\">⟹</span><span class=\"w\"> </span><span class=\"ow\">...</span>\n</code></pre></div>\n<p>What is this <code>ra_</code> refering to? I do not understand what case Isabelle is talking about concretely</p>",
        "id": 432281364,
        "sender_full_name": "Salvatore Francesco Rossetta",
        "timestamp": 1712678756
    },
    {
        "content": "<p>It should mean it cannot prove the subgoal <code>ns r = 0</code>, right? But how, if this case is  </p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"w\"> </span><span class=\"s\">\"ns r = 0  ⟹ loop_o r = r\"</span>\n</code></pre></div>\n<p>in my code?</p>",
        "id": 432282356,
        "sender_full_name": "Salvatore Francesco Rossetta",
        "timestamp": 1712678987
    },
    {
        "content": "<p>the first goal is the case <code>ns r = 0</code>.</p>",
        "id": 432301125,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1712684308
    },
    {
        "content": "<p>for <code>ra_</code> it could be that <code>subgoal for r</code> should be <code>subgoal for x r</code> (you name the variables, so make sure that you give the names you expect). Otherwise search for all occurrences, maybe auto split a variable and you have <code>r = Suc ra_</code> or something.</p>",
        "id": 432301792,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1712684556
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"233198\">Mathias Fleury</span> <a href=\"#narrow/stream/238552-Beginner-Questions/topic/Proof.20of.20recursive.20function/near/432301125\">said</a>:</p>\n<blockquote>\n<p>the first goal is the case <code>ns r = 0</code>.</p>\n</blockquote>\n<p>Yes, I noticed and worked on it today, now I am working with assumptions and I see that if I write <code>using assms</code> only the base case works but if I write <code>unfolding assms</code> then only the step case is working. Is there something in between I can use to solve?</p>",
        "id": 432329227,
        "sender_full_name": "Salvatore Francesco Rossetta",
        "timestamp": 1712692631
    }
]