[
    {
        "content": "<p>I have spent way too much time attempting to prove the following lemma without using an induction, i.e. directly or by contradiction. Could someone help me out?</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">datatype</span><span class=\"w\"> </span><span class=\"n n-Type\">'a</span><span class=\"w\"> </span><span class=\"n\">tree</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Leaf</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Node</span><span class=\"w\"> </span><span class=\"s\">\"'a tree\"</span><span class=\"w\"> </span><span class=\"n n-Type\">'a</span><span class=\"w\"> </span><span class=\"s\">\"'a tree\"</span>\n\n<span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">tree_set</span><span class=\"w\"> </span><span class=\"kp\">where</span>\n<span class=\"s\">\"tree_set Leaf = {}\"</span>\n<span class=\"o\">|</span><span class=\"w\"> </span><span class=\"s\">\"tree_set (Node l a r) = insert a (tree_set l) ∪ (tree_set r)\"</span>\n\n<span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">bst</span><span class=\"w\"> </span><span class=\"kp\">where</span>\n<span class=\"s\">\"bst Leaf = True\"</span>\n<span class=\"o\">|</span><span class=\"w\"> </span><span class=\"s\">\"bst (Node l a r) = ((∀x∈tree_set l. x &lt; a) ∧ bst l ∧ (∀x∈tree_set r. a &lt; x) ∧ bst r)\"</span>\n\n<span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">add_tree</span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"nat tree ⇒ nat\"</span><span class=\"w\"> </span><span class=\"kp\">where</span>\n<span class=\"s\">\"add_tree Leaf = 0\"</span><span class=\"w\"> </span><span class=\"o\">|</span>\n<span class=\"s\">\"add_tree (Node l n r) = add_tree l + n + add_tree r\"</span>\n\n<span class=\"kn\">lemma</span>\n<span class=\"w\">  </span><span class=\"kp\">shows</span><span class=\"w\"> </span><span class=\"s\">\"⟦bst t; add_tree t = 0⟧ ⟹ t = Leaf ∨ t = Node Leaf 0 Leaf\"</span>\n<span class=\"k\">proof</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">rule</span><span class=\"w\"> </span><span class=\"n\">ccontr</span><span class=\"o\">)</span>\n<span class=\"k\">assume</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"bst t\"</span>\n<span class=\"w\">  </span><span class=\"k\">assume</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"add_tree t = 0\"</span>\n<span class=\"w\">  </span><span class=\"k\">assume</span><span class=\"w\"> </span><span class=\"n\">as</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"¬ (t = Leaf ∨ t = Node Leaf 0 Leaf)\"</span>\n<span class=\"w\">  </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"k\">obtain</span><span class=\"w\"> </span><span class=\"n\">l</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"w\"> </span><span class=\"kp\">where</span>\n<span class=\"w\">    </span><span class=\"n\">s</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"t = Node l n r\"</span><span class=\"w\"> </span><span class=\"kp\">and</span>\n<span class=\"w\">    </span><span class=\"n\">t</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"l ≠ Leaf ∨ r ≠ Leaf ∨ n ≠ 0\"</span><span class=\"w\"> </span><span class=\"c\">(* does this step necessarily need an induction? *)</span>\n<span class=\"k\">by</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">induction</span><span class=\"w\"> </span><span class=\"n\">t</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">auto</span><span class=\"o\">)</span>\n<span class=\"c\">(* the rest of this attempt consists of a few applications of (cases ...) *)</span>\n</code></pre></div>",
        "id": 405934158,
        "sender_full_name": "David Wang",
        "timestamp": 1701733808
    },
    {
        "content": "<p><del>it seems to me that one reason you will need induction is that it's not immediately obvious <code>add_tree t = 0</code> implies all elements in the <code>tree_set</code> are <code>0</code></del></p>\n<p>ah I'm wrong, this works as a direct proof by case splitting, not sure if it's what you want:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span>\n<span class=\"w\">  </span><span class=\"kp\">shows</span><span class=\"w\"> </span><span class=\"s\">\"⟦bst t; add_tree t = 0⟧ ⟹ t = Leaf ∨ t = Node Leaf 0 Leaf\"</span>\n<span class=\"w\">  </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">cases</span><span class=\"w\"> </span><span class=\"n\">t;</span><span class=\"w\"> </span><span class=\"n\">simp</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"n\">subgoal</span><span class=\"w\"> </span><span class=\"kp\">for</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">y</span>\n<span class=\"w\">    </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">cases</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"o\">)</span>\n<span class=\"w\">    </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">cases</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"o\">)</span>\n<span class=\"w\">    </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">auto</span>\n</code></pre></div>",
        "id": 405944228,
        "sender_full_name": "Yong Kiam",
        "timestamp": 1701737979
    },
    {
        "content": "<p>Thank you</p>",
        "id": 405991905,
        "sender_full_name": "David Wang",
        "timestamp": 1701760831
    }
]