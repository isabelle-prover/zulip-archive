[
    {
        "content": "<p>Does it make sense to have the following goal?</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">double_negation_equivalence</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"A == (¬¬A)\"</span>\n</code></pre></div>\n<p>which results in </p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">proof</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">prove</span><span class=\"o\">)</span>\n<span class=\"n\">goal</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">1</span><span class=\"w\"> </span><span class=\"n\">subgoal</span><span class=\"o\">):</span>\n<span class=\"w\"> </span><span class=\"n\">1.</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"n\">≡</span><span class=\"w\"> </span><span class=\"n\">¬</span><span class=\"w\"> </span><span class=\"n\">¬</span><span class=\"w\"> </span><span class=\"n\">A</span>\n</code></pre></div>\n<p>and the command <code>proof</code> is not able to deconstruct it to LHS ==&gt; RHS and RHS ==&gt; LHS, as it would do for </p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">j2</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"A = (¬¬A)\"</span>\n<span class=\"k\">proof</span>\n</code></pre></div>\n<p>whose proof state is</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">proof</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">state</span><span class=\"o\">)</span>\n<span class=\"n\">goal</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">2</span><span class=\"w\"> </span><span class=\"n\">subgoals</span><span class=\"o\">):</span>\n<span class=\"w\"> </span><span class=\"n\">1.</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"n\">⟹</span><span class=\"w\"> </span><span class=\"n\">¬</span><span class=\"w\"> </span><span class=\"n\">¬</span><span class=\"w\"> </span><span class=\"n\">A</span>\n<span class=\"w\"> </span><span class=\"n\">2.</span><span class=\"w\"> </span><span class=\"n\">¬</span><span class=\"w\"> </span><span class=\"n\">¬</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"n\">⟹</span><span class=\"w\"> </span><span class=\"n\">A</span>\n</code></pre></div>\n<p>Is the only place I can use  ≡ in definitions, not goals?</p>",
        "id": 380639906,
        "sender_full_name": "Gergely Buday",
        "timestamp": 1690885597
    },
    {
        "content": "<p>The only place where you need ≡ is in abbreviations</p>",
        "id": 380655841,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1690888467
    },
    {
        "content": "<p>Everywhere else = works</p>",
        "id": 380655867,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1690888473
    },
    {
        "content": "<p>(although it might have the wrong priority)</p>",
        "id": 380655923,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1690888489
    },
    {
        "content": "<p>You can use <code>≡</code> also in goals, but you have to be aware that it is the “low-level”, that is, meta-level, equality, the one of Isabelle/Pure, which comes with different pre-proved facts and different configurations of proof methods.</p>\n<p>In your particular example, you can “cheat” by going from <code>≡</code> to <code>=</code> first:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">double_negation_equivalence</span><span class=\"o\">:</span>\n<span class=\"w\">  </span><span class=\"kp\">shows</span><span class=\"w\"> </span><span class=\"s\">\"A ≡ ¬ ¬ A\"</span>\n<span class=\"k\">proof</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">rule</span><span class=\"w\"> </span><span class=\"n\">eq_reflection</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">standard</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"k\">assume</span><span class=\"w\"> </span><span class=\"n\">A</span>\n<span class=\"w\">  </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"s\">\"¬ ¬ A\"</span>\n<span class=\"w\">    </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">simp</span>\n<span class=\"k\">next</span>\n<span class=\"w\">  </span><span class=\"k\">assume</span><span class=\"w\"> </span><span class=\"s\">\"¬ ¬ A\"</span>\n<span class=\"w\">  </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"n\">A</span>\n<span class=\"w\">    </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">simp</span>\n<span class=\"k\">qed</span>\n</code></pre></div>",
        "id": 380670879,
        "sender_full_name": "Wolfgang Jeltsch",
        "timestamp": 1690891268
    },
    {
        "content": "<blockquote>\n<p>Everywhere else = works (although it might have the wrong priority)</p>\n</blockquote>\n<p>The priority of = is often unfortunate in equalities of booleans (for example in definitions), as = binds stronger than the typical logical connectives. However, in these situations you can use ⟷ instead, which is just an abbreviation of = restricted to <em>bool</em> and which has a lower priority than operators like ∧.</p>",
        "id": 380674533,
        "sender_full_name": "Wolfgang Jeltsch",
        "timestamp": 1690891910
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"423655\">@Wolfgang Jeltsch</span> yes at some point I had to write</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">j2</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"A = (¬¬A)\"</span>\n</code></pre></div>\n<p>without the parentheses it would not even parse.</p>",
        "id": 380675225,
        "sender_full_name": "Gergely Buday",
        "timestamp": 1690892032
    },
    {
        "content": "<p>I would always use ⟷ in such cases, which is also what you would find in ordinary mathematical texts.</p>",
        "id": 380675493,
        "sender_full_name": "Wolfgang Jeltsch",
        "timestamp": 1690892075
    },
    {
        "content": "<p>By the way, I first tried to prove the above meta-level equality (<code>A ≡ ¬ ¬ A</code>) by boolean case distinction, trying to show it separately for <code>False</code> and <code>True</code>. However, this failed because the <code>case_split</code> fact, like probably all elimination rules in Isabelle/HOL, uses a conclusion that has type <code>bool</code>, while <code>≡</code> has result type <code>prop</code>. This is the type of propositions of Isabelle/Pure. Using <code>bool</code> for propositions in Isabelle/HOL works because there is an implicit conversion from <code>bool</code> to <code>prop</code>, but there is no conversion that would go in the other direction. So here is another reason why proving <code>≡</code>-statements is hard: the pre-proved Isabelle/HOL facts you might want to use work with <code>bool</code> instead of <code>prop</code>.</p>\n<p>I think, it’s best to adopt the following style:</p>\n<ul>\n<li>For implication, conjunction, and universal quantification use Isabelle/Pure operators whenever possible, because these work better with proof methods, for example.</li>\n<li>For equality, use the Isabelle/HOL operator whenever possible.</li>\n</ul>",
        "id": 380677079,
        "sender_full_name": "Wolfgang Jeltsch",
        "timestamp": 1690892370
    }
]