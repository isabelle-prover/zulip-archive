[
    {
        "content": "<p>Hi! I'm working with <a href=\"https://www.isa-afp.org/browser_info/current/AFP/Collections/outline.pdf\">Collections.Collections.hm</a> and trying to prove the following lemma:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">theory</span><span class=\"w\"> </span><span class=\"n\">hm_test</span>\n<span class=\"w\">  </span><span class=\"kp\">imports</span><span class=\"w\"> </span><span class=\"n\">Main</span><span class=\"w\"> </span><span class=\"s\">\"Collections.Collections\"</span>\n<span class=\"k\">begin</span>\n\n<span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">hashmap_eq_iff_impl_eq</span><span class=\"o\">:</span>\n<span class=\"w\">  </span><span class=\"s\">\"hm1 = hm2 ⟷ impl_of_RBT_HM hm1 = impl_of_RBT_HM hm2\"</span>\n<span class=\"w\">  </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">metis</span><span class=\"w\"> </span><span class=\"n\">impl_of_RBT_HM_inject</span><span class=\"o\">)</span>\n\n<span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">map_not_equal</span><span class=\"o\">:</span>\n<span class=\"w\">  </span><span class=\"kp\">assumes</span><span class=\"w\"> </span><span class=\"s\">\"m1 ≠ m2\"</span>\n<span class=\"w\">  </span><span class=\"kp\">shows</span><span class=\"w\"> </span><span class=\"s\">\"∃k. hm.lookup k m1 ≠ hm.lookup k m2\"</span>\n<span class=\"gr\">sorry</span>\n\n<span class=\"k\">end</span>\n</code></pre></div>\n<p>However I couldn't prove it. I am wondering if the issue might be because two hashmaps, even if they are not equal, do not necessarily have completely different key-value pairs. For example, two red black trees are structurally different but they actually have the same set of key-value pairs.</p>",
        "id": 442164179,
        "sender_full_name": "Liangrun Da",
        "timestamp": 1717397459
    },
    {
        "content": "<p>It feels like something that you should not have to prove. If you go for refinement, you should use a more abstract representation (mapping) where this would be easy to do</p>",
        "id": 442265178,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1717423882
    },
    {
        "content": "<p>So i am slightly wondering: why do you want that?</p>",
        "id": 442265274,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1717423903
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"233198\">Mathias Fleury</span> <a href=\"#narrow/stream/238552-Beginner-Questions/topic/Proving.20Inequality.20of.20Collections.2ECollections.2Ehm/near/442265178\">said</a>:</p>\n<blockquote>\n<p>It feels like something that you should not have to prove. If you go for refinement, you should use a more abstract representation (mapping) where this would be easy to do</p>\n</blockquote>\n<p>Thanks for answering. It was a long story, but a simple explanation is: I tried to generate code for a graph structure and I defined an inductive predicate on it. Since the inductive predicate can't be converted to executable code directly, I tried to refine the graph structure with <a href=\"http://Collections.hm\">Collections.hm</a>, in which I replace the inductive predicate with a recursively defined function on the hashmap. That's why I ended up with this lemma to be proved.</p>",
        "id": 442268146,
        "sender_full_name": "Liangrun Da",
        "timestamp": 1717424523
    },
    {
        "content": "<p>Maybe, but it still feels like the wrong approach. Iteration over the domain to check for equality seems the more structural approach</p>",
        "id": 442273654,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1717425811
    },
    {
        "content": "<p>at least to me</p>",
        "id": 442273688,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1717425817
    }
]