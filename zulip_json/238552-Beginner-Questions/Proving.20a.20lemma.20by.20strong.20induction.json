[
    {
        "content": "<p>Hello All!<br>\nThank you for your help sp far.</p>\n<p>I am trying to prove a lemma in Isabelle, </p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"o\">(</span><span class=\"kp\">in</span> <span class=\"n\">th2</span><span class=\"o\">)</span> <span class=\"n\">addMeaningF_4</span> <span class=\"o\">[</span><span class=\"n\">rule_format</span><span class=\"o\">]:</span> <span class=\"s\">\"⋀m. m ≤ n ⟹ m = (len x + len y) ⟹ (evalBinNum_1 (addBinNum x y) = plus (evalBinNum_1 x) (evalBinNum_1 y))\"</span>\n<span class=\"kp\">apply</span><span class=\"o\">(</span><span class=\"n\">induct</span> <span class=\"n\">n</span> <span class=\"n\">rule</span><span class=\"o\">:</span> <span class=\"n\">nat_less_induct</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>My subgoal is basically the same lemma again</p>\n<p>⋀n m. ∀m&lt;n. ∀xa≤m.<br>\n                    xa = len x + len y ⟶<br>\n                    evalBinNum_1 (addBinNum x y) =<br>\n                    plus (evalBinNum_1 x) (evalBinNum_1 y) ⟹<br>\n           m ≤ n ⟹<br>\n           m = len x + len y ⟹<br>\n           evalBinNum_1 (addBinNum x y) =<br>\n           plus (evalBinNum_1 x) (evalBinNum_1 y)</p>\n<p>I am worried I might have misunderstood something and hence unable to move forward with the proof.</p>\n<p>TIA!</p>",
        "id": 290366027,
        "sender_full_name": "Lekhani Ray",
        "timestamp": 1658404747
    },
    {
        "content": "<p>It is not the same goal again, since you have the \"∀xa≤m\".</p>",
        "id": 290366414,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1658404984
    },
    {
        "content": "<p>So the questions is more what did you expect?</p>",
        "id": 290366425,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1658404993
    },
    {
        "content": "<p>BTW,  tend to find this version of the induction lemma more natural than the default version:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">nat_less_induct_case</span><span class=\"o\">[</span><span class=\"n\">case_names</span> <span class=\"n\">0</span> <span class=\"n\">Suc</span><span class=\"o\">]:</span>\n  <span class=\"kp\">assumes</span>\n    <span class=\" -Symbol\">\\&lt;open&gt;</span><span class=\"n\">P</span> <span class=\"n\">0</span><span class=\" -Symbol\">\\&lt;close&gt;</span> <span class=\"kp\">and</span>\n    <span class=\" -Symbol\">\\&lt;open&gt;\\&lt;And&gt;</span><span class=\"n\">n.</span> <span class=\"o\">(</span><span class=\" -Symbol\">\\&lt;forall&gt;</span><span class=\"n\">m</span> <span class=\"err\">&lt;</span> <span class=\"n\">Suc</span> <span class=\"n\">n.</span> <span class=\"n\">P</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\" -Symbol\">\\&lt;Longrightarrow&gt;</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">Suc</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\" -Symbol\">\\&lt;close&gt;</span>\n  <span class=\"kp\">shows</span> <span class=\" -Symbol\">\\&lt;open&gt;</span><span class=\"n\">P</span> <span class=\"n\">n</span><span class=\" -Symbol\">\\&lt;close&gt;</span>\n  <span class=\"kp\">apply</span> <span class=\"o\">(</span><span class=\"n\">induction</span> <span class=\"n\">rule</span><span class=\"o\">:</span> <span class=\"n\">nat_less_induct</span><span class=\"o\">)</span>\n  <span class=\"k\">by</span> <span class=\"o\">(</span><span class=\"n\">rename_tac</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">case_tac</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">auto</span> <span class=\"n\">intro</span><span class=\"o\">:</span> <span class=\"n\">assms</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 290366635,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1658405137
    },
    {
        "content": "<p>This version has the case distinction  0/Suc, that I find more natural.</p>",
        "id": 290366728,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1658405186
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"233198\">Mathias Fleury</span> <a href=\"#narrow/stream/238552-Beginner-Questions/topic/Proving.20a.20lemma.20by.20strong.20induction/near/290366728\">said</a>:</p>\n<blockquote>\n<p>This version has the case distinction  0/Suc, that I find more natural.</p>\n</blockquote>\n<p>This does help, thank you so much.</p>\n<p>It breaks the proof into simpler cases, however, the second lemma is still a challenge for me.</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"o\">(</span><span class=\"kp\">in</span> <span class=\"n\">th2</span><span class=\"o\">)</span> <span class=\"n\">addMeaningF_4</span><span class=\"o\">:</span> <span class=\"s\">\"n = (len x + len y) ⟹ (evalBinNum_1 (addBinNum x y) = plus (evalBinNum_1 x) (evalBinNum_1 y))\"</span>\n<span class=\"k\">proof</span><span class=\"o\">(</span><span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"n\">rule</span><span class=\"o\">:</span> <span class=\"n\">nat_less_induct_case</span><span class=\"o\">)</span>\n  <span class=\"k\">case</span> <span class=\"n\">0</span>\n  <span class=\"k\">then</span> <span class=\"k\">show</span> <span class=\"o\">?</span><span class=\"k\">case</span>\n    <span class=\"k\">using</span> <span class=\"n\">len.elims</span> <span class=\"k\">by</span> <span class=\"n\">auto</span>\n<span class=\"k\">next</span>\n  <span class=\"k\">case</span> <span class=\"o\">(</span><span class=\"n\">Suc</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n  <span class=\"k\">then</span> <span class=\"k\">show</span> <span class=\"o\">?</span><span class=\"k\">case</span>\n<span class=\"k\">qed</span>\n</code></pre></div>\n<p>It gives me a subgoal <br>\n⋀n. ∀m&lt;Suc n. m = len x + len y ⟶ evalBinNum_1 (addBinNum x y) = plus (evalBinNum_1 x) (evalBinNum_1 y) ⟹<br>\n         Suc n = len x + len y ⟹ evalBinNum_1 (addBinNum x y) = plus (evalBinNum_1 x) (evalBinNum_1 y)</p>\n<p>I was wondering how this may be approached?</p>",
        "id": 290368140,
        "sender_full_name": "Lekhani Ray",
        "timestamp": 1658406185
    },
    {
        "content": "<p>My guess: you have to generalize over x and y too. Then from <code>Suc n = len x + len y</code> you know that either <code>len x</code> or <code>len y</code> is a Suc. You decompose that list into head/tail. And after some simplification, you can use the induction principle.</p>",
        "id": 290368729,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1658406524
    },
    {
        "content": "<p>although i am not sure what x and y exactly are</p>",
        "id": 290369069,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1658406731
    },
    {
        "content": "<p>x and y are Binary Numerals here</p>",
        "id": 290370409,
        "sender_full_name": "Lekhani Ray",
        "timestamp": 1658407457
    },
    {
        "content": "<p>I think the easiest way to prove your lemma is not by induction on the combined length of the arguments of <code>addBinNum</code> but by computation induction as follows:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"o\">(</span><span class=\"kp\">in</span> <span class=\"n\">th2</span><span class=\"o\">)</span> <span class=\"n\">addMeaningF_4</span><span class=\"o\">:</span> <span class=\"s\">\"evalBinNum_1 (addBinNum x y) = plus (evalBinNum_1 x) (evalBinNum_1 y)\"</span>\n  <span class=\"k\">using</span> <span class=\"n\">assoc</span> <span class=\"kp\">and</span> <span class=\"n\">commute</span> <span class=\"k\">by</span> <span class=\"o\">(</span><span class=\"n\">induction</span> <span class=\"n\">rule</span><span class=\"o\">:</span> <span class=\"n\">addBinNum.induct</span><span class=\"o\">,</span> <span class=\"n\">auto</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">metis</span> <span class=\"n\">arith_1</span><span class=\"o\">)+</span>\n</code></pre></div>\n<p>Please note that it's necessary to add both associativity and commutativity lemmas to your definition of <code>plus</code> in <code>th2</code> as follows (proofs are left as exercises):</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"o\">(</span><span class=\"kp\">in</span> <span class=\"n\">th2</span><span class=\"o\">)</span> <span class=\"n\">commute</span><span class=\"o\">:</span> <span class=\"s\">\"plus x y = plus y x\"</span>\n  <span class=\"gr\">sorry</span>\n\n<span class=\"kn\">lemma</span> <span class=\"o\">(</span><span class=\"kp\">in</span> <span class=\"n\">th2</span><span class=\"o\">)</span> <span class=\"n\">assoc</span><span class=\"o\">:</span> <span class=\"s\">\"plus (plus x y) z = plus x (plus y z)\"</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 290617232,
        "sender_full_name": "Javier Diaz",
        "timestamp": 1658587473
    }
]