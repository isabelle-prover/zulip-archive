[
    {
        "content": "<p>Hello!</p>\n<p>I am trying to prove a lemma for plus with definite description</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"o\">(</span><span class=\"kp\">in</span> <span class=\"n\">th8a</span><span class=\"o\">)</span> <span class=\"n\">th8_a</span><span class=\"o\">:</span> <span class=\"s\">\"∀f. q f ⟶ plus = f\"</span>\n  <span class=\"kp\">apply</span><span class=\"o\">(</span><span class=\"n\">simp</span> <span class=\"n\">add</span><span class=\"o\">:</span> <span class=\"n\">th8_a_2</span> <span class=\"n\">plus_def</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Isabelle cannot seem to recognize anything after this</p>\n<p>Supporting context:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">locale</span> <span class=\"n\">th8a</span> <span class=\"o\">=</span> <span class=\"n\">th1</span> <span class=\"o\">+</span>\n  <span class=\"kp\">assumes</span>\n    <span class=\"s\">\"((∀x . p zero ∧ (∀x. p x ⟶ p (suc x))) ⟶ (∀x. p x))\"</span>\n<span class=\"k\">begin</span>\n<span class=\"k\">definition</span>\n <span class=\"n\">plus</span> <span class=\"kp\">where</span> <span class=\"n\">plus_def</span><span class=\"o\">:</span> <span class=\"s\">\"plus = (THE f. ∀ x y. f x zero = x ∧ f x (suc y) = suc (f x y))\"</span>\n<span class=\"k\">definition</span>\n <span class=\"n\">times</span> <span class=\"kp\">where</span> <span class=\"s\">\"times = (THE g. ∀ x y. g x zero = zero ∧ g x (suc y) = plus (g x y) x)\"</span>\n<span class=\"k\">end</span>\n\n<span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"kp\">in</span> <span class=\"n\">th8a</span><span class=\"o\">)</span> <span class=\"n\">q</span> <span class=\"o\">::</span> <span class=\"s\">\"('a ⇒ 'a ⇒ 'a) ⇒ bool\"</span>\n  <span class=\"kp\">where</span>\n<span class=\"s\">\"q f = (∀ x y. (f x zero = x ∧ f x (suc y) = suc (f x y)))\"</span>\n\n<span class=\"kn\">lemma</span> <span class=\"o\">(</span><span class=\"kp\">in</span> <span class=\"n\">th8a</span><span class=\"o\">)</span> <span class=\"n\">th8_a_2</span><span class=\"o\">:</span> <span class=\"s\">\"plus = (THE f. q f)\"</span>\n  <span class=\"kp\">apply</span><span class=\"o\">(</span><span class=\"n\">simp</span> <span class=\"n\">add</span><span class=\"o\">:</span> <span class=\"n\">plus_def</span><span class=\"o\">)</span>\n  <span class=\"k\">done</span>\n</code></pre></div>\n<p>Any pointers on how to move forward with lemma th8_a_2?</p>",
        "id": 291244111,
        "sender_full_name": "Lekhani Ray",
        "timestamp": 1659038363
    },
    {
        "content": "<p>You probably need <code>theI</code></p>",
        "id": 291283966,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1659071022
    },
    {
        "content": "<p>But typically proofs on choice are very painful.</p>",
        "id": 291284011,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1659071050
    },
    {
        "content": "<p>My personal approach is:</p>\n<ol>\n<li>hide the operator behind a definition (using <code>definition</code> on toplevel or <code>define</code> in an Isar proof)</li>\n<li>prove unique exists (with the <code>∃!</code> operator)</li>\n<li>use the introduction rules for the operator (my favourite ones are <code>theI'</code>, <code>the1_equality</code>, and <code>someI_ex</code>) to prove the properties that you expect</li>\n<li>never unfold the definition of the operator again; just work with the derived properties</li>\n</ol>\n<p>That involves a little bit of boilerplate once, but it is fairly pain free.</p>",
        "id": 291315915,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1659098614
    },
    {
        "content": "<p>The boilerplate part is what I called »painful«</p>",
        "id": 291316365,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1659098936
    },
    {
        "content": "<p>There's also the <code>specification</code> command, but it's a bit old-fashioned and only works on the toplevel. One could perhaps write a more modern version of that at some point…</p>",
        "id": 291316704,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1659099161
    },
    {
        "content": "<p>In an Isar proof, you can often also get away just using <code>obtain</code> (possibly combined with an application of the axiom of choice, which e.g. <code>metis</code> does very well automatically) instead of using <code>SOME</code>.</p>",
        "id": 291316794,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1659099228
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232736\">Manuel Eberl</span> <a href=\"#narrow/stream/238552-Beginner-Questions/topic/Proving.20lemma.20with.20definite.20description/near/291315915\">said</a>:</p>\n<blockquote>\n<p>My personal approach is:</p>\n<ol>\n<li>hide the operator behind a definition (using <code>definition</code> on toplevel or <code>define</code> in an Isar proof)</li>\n<li>prove unique exists (with the <code>∃!</code> operator)</li>\n<li>use the introduction rules for the operator (my favourite ones are <code>theI'</code>, <code>the1_equality</code>, and <code>someI_ex</code>) to prove the properties that you expect</li>\n<li>never unfold the definition of the operator again; just work with the derived properties</li>\n</ol>\n<p>That involves a little bit of boilerplate once, but it is fairly pain free.</p>\n</blockquote>\n<p>Thank you both <span class=\"user-mention\" data-user-id=\"232736\">@Manuel Eberl</span> and <span class=\"user-mention\" data-user-id=\"233198\">@Mathias Fleury</span> for your comments.</p>\n<p>With respect to point 2:<br>\nI have started with </p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"o\">(</span><span class=\"kp\">in</span> <span class=\"n\">th8a</span><span class=\"o\">)</span> <span class=\"n\">th8_a2</span><span class=\"o\">:</span> <span class=\"s\">\"∃! f. q f\"</span>\n  <span class=\"kp\">apply</span><span class=\"o\">(</span><span class=\"n\">rule</span> <span class=\"n\">theI'</span> <span class=\"n\">the1_equality</span> <span class=\"n\">someI_ex</span><span class=\"o\">)</span>\n<span class=\"kp\">apply</span><span class=\"o\">(</span><span class=\"n\">simp</span> <span class=\"n\">add</span><span class=\"o\">:</span> <span class=\"n\">th8_a_2</span><span class=\"o\">)</span>\n  <span class=\"kp\">apply</span> <span class=\"n\">auto</span>\n</code></pre></div>\n<p>where th8_a_2 is</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"o\">(</span><span class=\"kp\">in</span> <span class=\"n\">th8a</span><span class=\"o\">)</span> <span class=\"n\">th8_a_2</span><span class=\"o\">:</span> <span class=\"s\">\"plus = (THE f. q f)\"</span>\n  <span class=\"kp\">apply</span><span class=\"o\">(</span><span class=\"n\">simp</span> <span class=\"n\">add</span><span class=\"o\">:</span> <span class=\"n\">plus_def</span><span class=\"o\">)</span>\n  <span class=\"k\">done</span>\n</code></pre></div>\n<p>Questions:</p>\n<ol>\n<li>Does the order of the applications matter? [eg. If I switch the order of theI', the1_equality etc)</li>\n<li>With every application of auto, the subgoals keep on increasing.  What may be the reason?</li>\n<li>Is the expression in the lemma the correct expression?</li>\n</ol>\n<p>Thank you!</p>",
        "id": 291900393,
        "sender_full_name": "Lekhani Ray",
        "timestamp": 1659551036
    },
    {
        "content": "<p>The <code>rule</code> method attempts the rules in the order given, from left to right. Put the most specific rules at the beginning.</p>\n<p>The <code>auto</code> method is designed to do all of its work in one call. With rare exceptions, a second application of <code>auto</code> with the same arguments should fail.</p>",
        "id": 293684111,
        "sender_full_name": "Lawrence Paulson",
        "timestamp": 1660643237
    }
]