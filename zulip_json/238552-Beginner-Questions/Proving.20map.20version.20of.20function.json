[
    {
        "content": "<p>I am trying to prove the <code>set_shuffles1</code> lemma which uses the <code>shuffle_map</code> function. I am able to prove the same lemma using the accumulator version of the function (<code>shuffles</code> and <code>shuffles'</code>) but I cannot see how to get around the map functions when proving the inductive subgoals, nor come up with a stronger lemma that will help with this. Could I please have some advice on this?</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">theory</span><span class=\"w\"> </span><span class=\"n\">Sample</span>\n<span class=\"w\">  </span><span class=\"kp\">imports</span><span class=\"w\"> </span><span class=\"n\">Main</span>\n<span class=\"k\">begin</span>\n<span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">shuffles'</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"'a list ⇒ 'a list ⇒ 'a list ⇒ 'a list list\"</span><span class=\"w\"> </span><span class=\"kp\">where</span>\n<span class=\"s\">\"shuffles' [] ys s = [s @ ys]\"</span><span class=\"w\"> </span><span class=\"o\">|</span>\n<span class=\"s\">\"shuffles' xs [] s = [s @ xs]\"</span><span class=\"w\"> </span><span class=\"o\">|</span>\n<span class=\"s\">\"shuffles' (x#xs) (y#ys) s = shuffles' xs (y#ys) (s @ [x]) @ shuffles' (x#xs) ys (s @ [y])\"</span>\n\n<span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">shuffles</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"'a list ⇒ 'a list ⇒ 'a list list\"</span><span class=\"w\"> </span><span class=\"kp\">where</span>\n<span class=\"s\">\"shuffles xs ys = shuffles' xs ys []\"</span>\n\n<span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">shuffles_map</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"'a list ⇒ 'a list ⇒ 'a list list\"</span><span class=\"w\"> </span><span class=\"kp\">where</span>\n<span class=\"w\">  </span><span class=\"s\">\"shuffles_map xs [] = [xs]\"</span>\n<span class=\"o\">|</span><span class=\"w\"> </span><span class=\"s\">\"shuffles_map [] ys = [ys]\"</span>\n<span class=\"o\">|</span><span class=\"w\"> </span><span class=\"s\">\"shuffles_map (x#xs) (y#ys) = map (λxs. x # xs) (shuffles_map xs (y#ys)) @ map (λys. y # ys) (shuffles_map (x#xs) ys)\"</span>\n\n<span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">set_shuffles'</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"zs ∈ set (shuffles' xs ys ss) ⟹ set zs = set xs ∪ set ys ∪ set ss\"</span>\n<span class=\"w\">  </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">induct</span><span class=\"w\"> </span><span class=\"n\">xs</span><span class=\"w\"> </span><span class=\"n\">ys</span><span class=\"w\"> </span><span class=\"n\">ss</span><span class=\"w\"> </span><span class=\"n\">rule</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">shuffles'.induct</span><span class=\"o\">)</span>\n<span class=\"w\">    </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"n\">auto</span>\n<span class=\"w\">  </span><span class=\"k\">done</span>\n\n<span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">set_shuffles</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"zs ∈ set (shuffles xs ys) ⟹ set zs = set xs ∪ set ys\"</span>\n<span class=\"w\">  </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">auto</span><span class=\"w\"> </span><span class=\"n\">simp</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">set_shuffles'</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"k\">done</span>\n\n<span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">l2</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"shuffles_map [] ys = [ys]\"</span>\n<span class=\"w\">  </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">metis</span><span class=\"w\"> </span><span class=\"n\">shuffles_map.simps</span><span class=\"o\">(</span><span class=\"n\">1</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">shuffles_map.simps</span><span class=\"o\">(</span><span class=\"n\">2</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">list.exhaust</span><span class=\"o\">)</span>\n\n<span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">set_shuffles1</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"zs ∈ set (shuffles_map xs ys) ⟹ set zs = set xs ∪ set ys\"</span>\n<span class=\"w\">  </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">induct</span><span class=\"w\"> </span><span class=\"n\">ys</span><span class=\"w\"> </span><span class=\"n\">xs</span><span class=\"w\"> </span><span class=\"n\">rule</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">shuffles_map.induct</span><span class=\"o\">)</span>\n<span class=\"w\">    </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">auto</span><span class=\"w\"> </span><span class=\"n\">simp</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">l2</span><span class=\"w\"> </span><span class=\"n\">map_def</span><span class=\"o\">)</span>\n<span class=\"k\">end</span>\n</code></pre></div>",
        "id": 497921973,
        "sender_full_name": "o7",
        "timestamp": 1738769765
    },
    {
        "content": "<p>Your <code>zs</code> parameter changes during the induction, so you need to generalize it:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">set_shuffles1</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"zs ∈ set (shuffles_map xs ys) ⟹ set zs = set xs ∪ set ys\"</span>\n<span class=\"w\">  </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">induct</span><span class=\"w\"> </span><span class=\"n\">xs</span><span class=\"w\"> </span><span class=\"n\">ys</span><span class=\"w\"> </span><span class=\"n\">arbitrary</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">zs</span><span class=\"w\"> </span><span class=\"n\">rule</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">shuffles_map.induct</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">auto</span>\n</code></pre></div>",
        "id": 497924452,
        "sender_full_name": "Jan van Brügge",
        "timestamp": 1738770350
    }
]