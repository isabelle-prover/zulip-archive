[
    {
        "content": "<p>Sometimes the metis call Sledgehammer suggests is displayed in purple when copied to the proof, meaning that the underlying process is working, so the metis call went into an infinite loop.</p>\n<p>What can I do in this situation, how can I figure out what had gone wrong, and how can I fix it?</p>",
        "id": 365607686,
        "sender_full_name": "Gergely Buday",
        "timestamp": 1686585230
    },
    {
        "content": "<p>I see three possibilities of what might cause this:</p>\n<p>One, there is a bug somewhere in sledgehammer (e.g. in one of its translations from HOL to simpler logics. That's probably something that should be investigated by the Sledgehammer team.</p>\n<p>Two, there is a bug in the external prover that found the \"proof\" and the \"proof\" is actally wrong. But I'm not sure if that could really cause this issue, because then I would expect Sledgehammer not to give you that \"metis\" call in the first place.</p>\n<p>Three, something is going wrong in the Sledgehammer part where it converts a proof found by one of the external provers to a <code>metis</code> call. I'm never quite sure whether it is expected that this might happen in some cases or whether it is an actual bug.</p>\n<p>I think it is probably best to ask one of the Sledgehammer experts like Jasmin Blanchette about this.</p>\n<p>As for how you can fix it, well, if it suggests more than one proof to you (which is often the case) then you can try one of the others that it suggests to you. If not then I suggest you proceed in the same way that you would if it gave you no proof: try to break the goal up into smaller, simpler steps and see if it can do those. Or just do the entire proof \"by hand\".</p>\n<p>But note that unless the proof it found is actually rubbish (due to e.g. a soundness bug in the translation or the external prover), the fact names occurring in the <code>metis</code> call often give you valuable information about what facts are actually crucial to the proof, often even enough to easily do the proof by hand. Just look at the list of facts it mentions, kick out all the ones whose content is \"obvious\" stuff like \"n + 0 = n\", and the remaining ones are probably the important ones.</p>",
        "id": 365805555,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1686649516
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232736\">@Manuel Eberl</span> after using the definition of id, Sledgehammer came up with a simp add proof, and that worked flawlessly. Something around metis is fishy, probably in Sledgehammer.</p>",
        "id": 365811666,
        "sender_full_name": "Gergely Buday",
        "timestamp": 1686650789
    },
    {
        "content": "<p>In that case please do try sending a minimal working example to Jasmin.</p>",
        "id": 365811737,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1686650814
    },
    {
        "content": "<p>Could be a higher-order translation issue. Perhaps there's a lambda in there somewhere that confuses Sledgehammer. Just speculation.</p>",
        "id": 365811912,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1686650848
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232736\">@Manuel Eberl</span>  I sent a problem report to him.</p>",
        "id": 365817798,
        "sender_full_name": "Gergely Buday",
        "timestamp": 1686652087
    },
    {
        "content": "<p>Most likely, the problem is that no proof method works and metis is the default method</p>",
        "id": 365910773,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1686670477
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"402444\">@Martin Desharnais</span> accidentally removed the <code>time out</code> that was marked before (and will be again in the next release)</p>",
        "id": 365911016,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1686670528
    },
    {
        "content": "<p>(or maybe he was not responsible for that, but he is the current expert :-))</p>",
        "id": 365911124,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1686670554
    },
    {
        "content": "<p>Mathias is correct, a <code>metis</code> proof is usually suggested when proof reconstruction as a mean to provide the list of lemmas to the user. It used to be stated explicitly that proof reconstruction failed, but the message was accidentally removed last year. It was noticed a few months later and is already back in the development version of Isabelle; so users can expect it back in Isabelle version 2023 at the end of the summer.</p>",
        "id": 366399980,
        "sender_full_name": "Martin Desharnais",
        "timestamp": 1686816726
    },
    {
        "content": "<p>Just out of curiosity: why does sledgehammer not try to use the proofs found by the ATPs to construct an Isabelle proof instead of trying to find a new proof from scratch?</p>",
        "id": 366719704,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1686900654
    },
    {
        "content": "<p>Is it too complicated to translate those proofs back given the logic encodings sledgehammer uses? Or is it simply not worth the effort because the current approach works almost all the time?</p>",
        "id": 366720097,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1686900740
    },
    {
        "content": "<p>Would this be a viable option given strong higher-other ATPs?</p>",
        "id": 366720187,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1686900768
    },
    {
        "content": "<p>this is done in two ways:</p>\n<p>- direct checking of the proof : that is the approach used by smt (for veriT and z3)<br>\n - usage of the steps : used to produce the Isar proof that Sledgehammer suggests</p>",
        "id": 366727395,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1686902421
    },
    {
        "content": "<p>The direct checking was never extended from SMT solvers to superposition, partly because the steps are more complicated to check (E can produce proof steps that even E is not able to check)</p>",
        "id": 366728246,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1686902594
    },
    {
        "content": "<p>But it requires a lot of work from the SMT developers to produce usable proofs</p>",
        "id": 366728901,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1686902710
    }
]