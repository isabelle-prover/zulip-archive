[
    {
        "content": "<p>By looking for the order.thy, I find the instance <code>instance \"fun\" :: (type, order) order proof\nqed (auto simp add: le_fun_def intro: order.antisym)</code>. There is a straight idea whether fun could extend to linorder too.</p>\n<p>Any help would be appreciated.</p>",
        "id": 380442670,
        "sender_full_name": "Hongjian Jiang",
        "timestamp": 1690826313
    },
    {
        "content": "<p>if could give idea to solve below lemma proving would be better</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">datatype</span><span class=\"w\"> </span><span class=\"n n-Type\">'a</span><span class=\"w\"> </span><span class=\"n\">rexp</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">  </span><span class=\"n\">is_Zero</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Zero</span><span class=\"w\"> </span><span class=\"o\">|</span>\n<span class=\"w\">  </span><span class=\"n\">is_One</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">One</span><span class=\"w\"> </span><span class=\"o\">|</span>\n<span class=\"w\">  </span><span class=\"n\">Sym</span><span class=\"w\"> </span><span class=\"s\">\"'a Predicate.pred\"</span><span class=\"o\">|</span>\n<span class=\"w\">  </span><span class=\"n\">Plus</span><span class=\"w\"> </span><span class=\"s\">\"('a rexp)\"</span><span class=\"w\"> </span><span class=\"s\">\"('a rexp)\"</span><span class=\"w\"> </span><span class=\"o\">|</span>\n<span class=\"w\">  </span><span class=\"n\">Times</span><span class=\"w\"> </span><span class=\"s\">\"('a rexp)\"</span><span class=\"w\"> </span><span class=\"s\">\"('a rexp)\"</span><span class=\"w\"> </span><span class=\"o\">|</span>\n<span class=\"w\">  </span><span class=\"n\">Star</span><span class=\"w\"> </span><span class=\"s\">\"('a rexp)\"</span>\n\n\n<span class=\"k\">instantiation</span><span class=\"w\"> </span><span class=\"n\">rexp</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">order</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"s\">\"{order}\"</span>\n<span class=\"k\">begin</span>\n\n<span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">le_rexp</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"('a::order) rexp ⇒ ('a::order) rexp ⇒ bool\"</span>\n<span class=\"kp\">where</span>\n<span class=\"w\">  </span><span class=\"s\">\"le_rexp Zero _ = True\"</span>\n<span class=\"o\">|</span><span class=\"w\"> </span><span class=\"s\">\"le_rexp _ Zero = False\"</span>\n<span class=\"o\">|</span><span class=\"w\"> </span><span class=\"s\">\"le_rexp One _ = True\"</span>\n<span class=\"o\">|</span><span class=\"w\"> </span><span class=\"s\">\"le_rexp _ One = False\"</span>\n<span class=\"o\">|</span><span class=\"w\"> </span><span class=\"s\">\"le_rexp (Sym a) (Sym b) = (Predicate.eval a ≤ Predicate.eval b)\"</span>\n<span class=\"o\">|</span><span class=\"w\"> </span><span class=\"s\">\"le_rexp (Sym _) _ = True\"</span>\n<span class=\"o\">|</span><span class=\"w\"> </span><span class=\"s\">\"le_rexp _ (Sym _) = False\"</span>\n<span class=\"o\">|</span><span class=\"w\"> </span><span class=\"s\">\"le_rexp (Star r) (Star s) = le_rexp r s\"</span>\n<span class=\"o\">|</span><span class=\"w\"> </span><span class=\"s\">\"le_rexp (Star _) _ = True\"</span>\n<span class=\"o\">|</span><span class=\"w\"> </span><span class=\"s\">\"le_rexp _ (Star _) = False\"</span>\n<span class=\"o\">|</span><span class=\"w\"> </span><span class=\"s\">\"le_rexp (Plus r r') (Plus s s') =</span>\n<span class=\"s\">    (if r = s then le_rexp r' s' else le_rexp r s)\"</span>\n<span class=\"o\">|</span><span class=\"w\"> </span><span class=\"s\">\"le_rexp (Plus _ _) _ = True\"</span>\n<span class=\"o\">|</span><span class=\"w\"> </span><span class=\"s\">\"le_rexp _ (Plus _ _) = False\"</span>\n<span class=\"o\">|</span><span class=\"w\"> </span><span class=\"s\">\"le_rexp (Times r r') (Times s s') =</span>\n<span class=\"s\">    (if r = s then le_rexp r' s' else le_rexp r s)\"</span>\n\n<span class=\"kt\">term</span><span class=\"w\"> </span><span class=\"s\">\"Predicate.eval a\"</span>\n\n<span class=\"k\">definition</span><span class=\"w\"> </span><span class=\"n\">less_eq_rexp</span><span class=\"w\"> </span><span class=\"kp\">where</span><span class=\"w\"> </span><span class=\"s\">\"r ≤ s ≡ le_rexp r s\"</span>\n<span class=\"k\">definition</span><span class=\"w\"> </span><span class=\"n\">less_rexp</span><span class=\"w\"> </span><span class=\"kp\">where</span><span class=\"w\"> </span><span class=\"s\">\"r &lt; s ≡ le_rexp r s ∧ r ≠ s\"</span>\n\n<span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">le_rexp_Zero</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"le_rexp r Zero ⟹ r = Zero\"</span>\n<span class=\"k\">by</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">induction</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">auto</span>\n\n<span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">le_rexp_refl</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"le_rexp r r\"</span>\n<span class=\"k\">by</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">induction</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">auto</span>\n\n<span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">le_rexp_antisym</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"⟦le_rexp r s; le_rexp s r⟧ ⟹ r = s\"</span>\n<span class=\"w\">  </span><span class=\"kp\">apply</span><span class=\"o\">(</span><span class=\"n\">induction</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"n\">rule</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">le_rexp.induct</span><span class=\"o\">)</span>\n<span class=\"w\">                      </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"n\">auto</span>\n<span class=\"w\">  </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">le_rexp_Zero</span><span class=\"w\"> </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"n\">auto</span><span class=\"o\">[</span><span class=\"n\">1</span><span class=\"o\">]</span>\n<span class=\"w\">  </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"n\">add</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">pred.expand</span><span class=\"o\">)</span>\n\n<span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">le_rexp_trans</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"⟦le_rexp r s; le_rexp s t⟧ ⟹ le_rexp r t\"</span>\n<span class=\"k\">proof</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">induction</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"n\">arbitrary</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">t</span><span class=\"w\"> </span><span class=\"n\">rule</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">le_rexp.induct</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"k\">fix</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"w\"> </span><span class=\"n\">t</span><span class=\"w\"> </span><span class=\"k\">assume</span><span class=\"w\"> </span><span class=\"s\">\"le_rexp (Sym v) t\"</span><span class=\"w\"> </span><span class=\"k\">thus</span><span class=\"w\"> </span><span class=\"s\">\"le_rexp One t\"</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">cases</span><span class=\"w\"> </span><span class=\"n\">t</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">auto</span>\n<span class=\"k\">next</span>\n<span class=\"w\">  </span><span class=\"k\">fix</span><span class=\"w\"> </span><span class=\"n\">s1</span><span class=\"w\"> </span><span class=\"n\">s2</span><span class=\"w\"> </span><span class=\"n\">t</span><span class=\"w\"> </span><span class=\"k\">assume</span><span class=\"w\"> </span><span class=\"s\">\"le_rexp (Plus s1 s2) t\"</span><span class=\"w\"> </span><span class=\"k\">thus</span><span class=\"w\"> </span><span class=\"s\">\"le_rexp One t\"</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">cases</span><span class=\"w\"> </span><span class=\"n\">t</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">auto</span>\n<span class=\"k\">next</span>\n<span class=\"w\">  </span><span class=\"k\">fix</span><span class=\"w\"> </span><span class=\"n\">s1</span><span class=\"w\"> </span><span class=\"n\">s2</span><span class=\"w\"> </span><span class=\"n\">t</span><span class=\"w\"> </span><span class=\"k\">assume</span><span class=\"w\"> </span><span class=\"s\">\"le_rexp (Times s1 s2) t\"</span><span class=\"w\"> </span><span class=\"k\">thus</span><span class=\"w\"> </span><span class=\"s\">\"le_rexp One t\"</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">cases</span><span class=\"w\"> </span><span class=\"n\">t</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">auto</span>\n<span class=\"k\">next</span>\n<span class=\"w\">  </span><span class=\"k\">fix</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"n\">t</span><span class=\"w\"> </span><span class=\"k\">assume</span><span class=\"w\"> </span><span class=\"s\">\"le_rexp (Star s) t\"</span><span class=\"w\"> </span><span class=\"k\">thus</span><span class=\"w\"> </span><span class=\"s\">\"le_rexp One t\"</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">cases</span><span class=\"w\"> </span><span class=\"n\">t</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">auto</span>\n<span class=\"k\">next</span>\n<span class=\"w\">  </span><span class=\"k\">fix</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"w\"> </span><span class=\"n\">u</span><span class=\"w\"> </span><span class=\"n\">t</span><span class=\"w\"> </span><span class=\"k\">assume</span><span class=\"w\"> </span><span class=\"s\">\"le_rexp (Sym v) (Sym u)\"</span><span class=\"w\"> </span><span class=\"s\">\"le_rexp (Sym u) t\"</span>\n<span class=\"w\">  </span><span class=\"k\">thus</span><span class=\"w\"> </span><span class=\"s\">\"le_rexp (Sym v) t\"</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">cases</span><span class=\"w\"> </span><span class=\"n\">t</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">auto</span>\n<span class=\"k\">next</span>\n<span class=\"w\">  </span><span class=\"k\">fix</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"w\"> </span><span class=\"n\">s1</span><span class=\"w\"> </span><span class=\"n\">s2</span><span class=\"w\"> </span><span class=\"n\">t</span><span class=\"w\"> </span><span class=\"k\">assume</span><span class=\"w\"> </span><span class=\"s\">\"le_rexp (Plus s1 s2) t\"</span><span class=\"w\"> </span><span class=\"k\">thus</span><span class=\"w\"> </span><span class=\"s\">\"le_rexp (Sym v) t\"</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">cases</span><span class=\"w\"> </span><span class=\"n\">t</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">auto</span>\n<span class=\"k\">next</span>\n<span class=\"w\">  </span><span class=\"k\">fix</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"w\"> </span><span class=\"n\">s1</span><span class=\"w\"> </span><span class=\"n\">s2</span><span class=\"w\"> </span><span class=\"n\">t</span><span class=\"w\"> </span><span class=\"k\">assume</span><span class=\"w\"> </span><span class=\"s\">\"le_rexp (Times s1 s2) t\"</span><span class=\"w\"> </span><span class=\"k\">thus</span><span class=\"w\"> </span><span class=\"s\">\"le_rexp (Sym v) t\"</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">cases</span><span class=\"w\"> </span><span class=\"n\">t</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">auto</span>\n<span class=\"k\">next</span>\n<span class=\"w\">  </span><span class=\"k\">fix</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"n\">t</span><span class=\"w\"> </span><span class=\"k\">assume</span><span class=\"w\"> </span><span class=\"s\">\"le_rexp (Star s) t\"</span><span class=\"w\"> </span><span class=\"k\">thus</span><span class=\"w\"> </span><span class=\"s\">\"le_rexp (Sym v) t\"</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">cases</span><span class=\"w\"> </span><span class=\"n\">t</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">auto</span>\n<span class=\"k\">next</span>\n<span class=\"w\">  </span><span class=\"k\">fix</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"n\">t</span>\n<span class=\"w\">  </span><span class=\"k\">assume</span><span class=\"w\"> </span><span class=\"n\">IH</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"⋀t. le_rexp r s ⟹ le_rexp s t ⟹ le_rexp r t\"</span>\n<span class=\"w\">    </span><span class=\"kp\">and</span><span class=\"w\"> </span><span class=\"s\">\"le_rexp (Star r) (Star s)\"</span><span class=\"w\"> </span><span class=\"s\">\"le_rexp (Star s) t\"</span>\n<span class=\"w\">  </span><span class=\"k\">thus</span><span class=\"w\"> </span><span class=\"s\">\"le_rexp (Star r) t\"</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">cases</span><span class=\"w\"> </span><span class=\"n\">t</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">auto</span>\n<span class=\"k\">next</span>\n<span class=\"w\">  </span><span class=\"k\">fix</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"w\"> </span><span class=\"n\">s1</span><span class=\"w\"> </span><span class=\"n\">s2</span><span class=\"w\"> </span><span class=\"n\">t</span><span class=\"w\"> </span><span class=\"k\">assume</span><span class=\"w\"> </span><span class=\"s\">\"le_rexp (Plus s1 s2) t\"</span><span class=\"w\"> </span><span class=\"k\">thus</span><span class=\"w\"> </span><span class=\"s\">\"le_rexp (Star r) t\"</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">cases</span><span class=\"w\"> </span><span class=\"n\">t</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">auto</span>\n<span class=\"k\">next</span>\n<span class=\"w\">  </span><span class=\"k\">fix</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"w\"> </span><span class=\"n\">s1</span><span class=\"w\"> </span><span class=\"n\">s2</span><span class=\"w\"> </span><span class=\"n\">t</span><span class=\"w\"> </span><span class=\"k\">assume</span><span class=\"w\"> </span><span class=\"s\">\"le_rexp (Times s1 s2) t\"</span><span class=\"w\"> </span><span class=\"k\">thus</span><span class=\"w\"> </span><span class=\"s\">\"le_rexp (Star r) t\"</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">cases</span><span class=\"w\"> </span><span class=\"n\">t</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">auto</span>\n<span class=\"k\">next</span>\n<span class=\"w\">  </span><span class=\"k\">fix</span><span class=\"w\"> </span><span class=\"n\">r1</span><span class=\"w\"> </span><span class=\"n\">r2</span><span class=\"w\"> </span><span class=\"n\">s1</span><span class=\"w\"> </span><span class=\"n\">s2</span><span class=\"w\"> </span><span class=\"n\">t</span>\n<span class=\"w\">  </span><span class=\"k\">assume</span><span class=\"w\"> </span><span class=\"s\">\"⋀t. r1 = s1 ⟹ le_rexp r2 s2 ⟹ le_rexp s2 t ⟹ le_rexp r2 t\"</span>\n<span class=\"w\">         </span><span class=\"s\">\"⋀t. r1 ≠ s1 ⟹ le_rexp r1 s1 ⟹ le_rexp s1 t ⟹ le_rexp r1 t\"</span>\n<span class=\"w\">         </span><span class=\"s\">\"le_rexp (Plus r1 r2) (Plus s1 s2)\"</span><span class=\"w\"> </span><span class=\"s\">\"le_rexp (Plus s1 s2) t\"</span>\n<span class=\"w\">  </span><span class=\"k\">thus</span><span class=\"w\"> </span><span class=\"s\">\"le_rexp (Plus r1 r2) t\"</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">cases</span><span class=\"w\"> </span><span class=\"n\">t</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">auto</span><span class=\"w\"> </span><span class=\"n\">split</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">if_split_asm</span><span class=\"w\"> </span><span class=\"n\">intro</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">le_rexp_antisym</span><span class=\"o\">)</span>\n<span class=\"k\">next</span>\n<span class=\"w\">  </span><span class=\"k\">fix</span><span class=\"w\"> </span><span class=\"n\">r1</span><span class=\"w\"> </span><span class=\"n\">r2</span><span class=\"w\"> </span><span class=\"n\">s1</span><span class=\"w\"> </span><span class=\"n\">s2</span><span class=\"w\"> </span><span class=\"n\">t</span><span class=\"w\"> </span><span class=\"k\">assume</span><span class=\"w\"> </span><span class=\"s\">\"le_rexp (Times s1 s2) t\"</span><span class=\"w\"> </span><span class=\"k\">thus</span><span class=\"w\"> </span><span class=\"s\">\"le_rexp (Plus r1 r2) t\"</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">cases</span><span class=\"w\"> </span><span class=\"n\">t</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">auto</span>\n<span class=\"k\">next</span>\n<span class=\"w\">  </span><span class=\"k\">fix</span><span class=\"w\"> </span><span class=\"n\">r1</span><span class=\"w\"> </span><span class=\"n\">r2</span><span class=\"w\"> </span><span class=\"n\">s1</span><span class=\"w\"> </span><span class=\"n\">s2</span><span class=\"w\"> </span><span class=\"n\">t</span>\n<span class=\"w\">  </span><span class=\"k\">assume</span><span class=\"w\"> </span><span class=\"s\">\"⋀t. r1 = s1 ⟹ le_rexp r2 s2 ⟹ le_rexp s2 t ⟹ le_rexp r2 t\"</span>\n<span class=\"w\">         </span><span class=\"s\">\"⋀t. r1 ≠ s1 ⟹ le_rexp r1 s1 ⟹ le_rexp s1 t ⟹ le_rexp r1 t\"</span>\n<span class=\"w\">         </span><span class=\"s\">\"le_rexp (Times r1 r2) (Times s1 s2)\"</span><span class=\"w\"> </span><span class=\"s\">\"le_rexp (Times s1 s2) t\"</span>\n<span class=\"w\">  </span><span class=\"k\">thus</span><span class=\"w\"> </span><span class=\"s\">\"le_rexp (Times r1 r2) t\"</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">cases</span><span class=\"w\"> </span><span class=\"n\">t</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">auto</span><span class=\"w\"> </span><span class=\"n\">split</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">if_split_asm</span><span class=\"w\"> </span><span class=\"n\">intro</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">le_rexp_antisym</span><span class=\"o\">)</span>\n<span class=\"k\">qed</span><span class=\"w\"> </span><span class=\"n\">auto</span>\n\n<span class=\"kn\">instance</span><span class=\"w\"> </span><span class=\"k\">proof</span>\n<span class=\"k\">qed</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">auto</span><span class=\"w\"> </span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"n\">add</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">less_eq_rexp_def</span><span class=\"w\"> </span><span class=\"n\">less_rexp_def</span>\n<span class=\"w\">       </span><span class=\"n\">intro</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">le_rexp_refl</span><span class=\"w\"> </span><span class=\"n\">le_rexp_antisym</span><span class=\"w\"> </span><span class=\"n\">le_rexp_trans</span><span class=\"o\">)</span>\n\n<span class=\"k\">end</span>\n\n<span class=\"k\">instantiation</span><span class=\"w\"> </span><span class=\"n\">rexp</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">linorder</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"s\">\"{linorder}\"</span>\n<span class=\"k\">begin</span>\n\n<span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">le_rexp_total</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"le_rexp (r :: 'a :: linorder rexp) s ∨ le_rexp s r\"</span>\n<span class=\"w\">  </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">induction</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"n\">rule</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">le_rexp.induct</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"n\">auto</span>\n<span class=\"w\">  </span><span class=\"gr\">sorry</span>\n\n<span class=\"kn\">instance</span><span class=\"w\"> </span><span class=\"k\">proof</span>\n<span class=\"k\">qed</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">unfold</span><span class=\"w\"> </span><span class=\"n\">less_eq_rexp_def</span><span class=\"w\"> </span><span class=\"n\">less_rexp_def</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">rule</span><span class=\"w\"> </span><span class=\"n\">le_rexp_total</span><span class=\"o\">)</span>\n\n<span class=\"k\">end</span>\n</code></pre></div>\n<p>How to prove the rexp is an instantiation of linorder.</p>",
        "id": 380465047,
        "sender_full_name": "Hongjian Jiang",
        "timestamp": 1690831013
    },
    {
        "content": "<p>Can you explain to the intuition why you would always have <code>a &lt;= b \\/ b &lt; a</code> (in order to have <code>Sym a  &lt;= Sym b</code>)?</p>",
        "id": 380471980,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1690832138
    },
    {
        "content": "<p>because that seems far from obvious to me</p>",
        "id": 380472179,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1690832170
    },
    {
        "content": "<p>My intuition is that if you take <code>a = (%x. even x)</code> and <code>b = (%x. prime x)</code>, you are going to have a hard timing finding whether a or b is larger…</p>",
        "id": 380473028,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1690832320
    },
    {
        "content": "<p>but maybe I am missing something in your definition</p>",
        "id": 380473140,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1690832342
    },
    {
        "content": "<p>I am trying to prove the predicate existing relationship of the linorder.</p>",
        "id": 380476024,
        "sender_full_name": "Hongjian Jiang",
        "timestamp": 1690832959
    },
    {
        "content": "<p>In such a case, I think a might be equal to b, according to the <code>predicate.eval</code></p>",
        "id": 380476315,
        "sender_full_name": "Hongjian Jiang",
        "timestamp": 1690833015
    },
    {
        "content": "<p>I am not very clear about the relation between the order and linorder. Because like (&lt;) in nat is an order, a &lt; b then a &lt; b or b &lt; a will be always established.</p>",
        "id": 380476872,
        "sender_full_name": "Hongjian Jiang",
        "timestamp": 1690833152
    },
    {
        "content": "<p>you have a linorder on <code>'a</code>, that does not say  anything on having an order on a function</p>",
        "id": 380478247,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1690833439
    },
    {
        "content": "<p>so the question should be recalled back to prove the linorder relation of predicate, whether I could understand in this way</p>",
        "id": 380479378,
        "sender_full_name": "Hongjian Jiang",
        "timestamp": 1690833685
    },
    {
        "content": "<p>No, the question is: what do you want to prove</p>",
        "id": 380479617,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1690833727
    },
    {
        "content": "<p>and what you want to model</p>",
        "id": 380479675,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1690833735
    },
    {
        "content": "<p>and how</p>",
        "id": 380479688,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1690833738
    },
    {
        "content": "<p>in general, total orders on base elements does not mean anything on a function on those elements</p>",
        "id": 380480480,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1690833912
    },
    {
        "content": "<p>even with lattices, you only get a partial order</p>",
        "id": 380480538,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1690833926
    },
    {
        "content": "<p>okay, I want to implement a symbolic automaton, in which transition is the predicate, thus I include the predicate in the rexp(Sym). And I built on the basic of regular set in afp. When the type of  character is nat, it belongs to the linear order. Currently, My theory could not handle such case, that's why I want to prove its linorder.</p>",
        "id": 380481121,
        "sender_full_name": "Hongjian Jiang",
        "timestamp": 1690834071
    },
    {
        "content": "<p>the original library is built on atom 'a, then linear order holds on</p>",
        "id": 380481334,
        "sender_full_name": "Hongjian Jiang",
        "timestamp": 1690834114
    },
    {
        "content": "<p>I see the predicate is a complete-lattices, but not linorder.</p>",
        "id": 380481525,
        "sender_full_name": "Hongjian Jiang",
        "timestamp": 1690834157
    },
    {
        "content": "<p>Wait let's go a step back before going onto the Isabelle part: what does it mean for an automata to have a total order?</p>",
        "id": 380482722,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1690834498
    },
    {
        "content": "<p>or do you want to express the subset relationship on the recognized languages?</p>",
        "id": 380482984,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1690834568
    },
    {
        "content": "<p>I use the method of derivative on regular expression</p>",
        "id": 380483004,
        "sender_full_name": "Hongjian Jiang",
        "timestamp": 1690834574
    },
    {
        "content": "<p>and it must be built on normal forms, and need some arbitrary total order on regular expressions</p>",
        "id": 380483435,
        "sender_full_name": "Hongjian Jiang",
        "timestamp": 1690834690
    },
    {
        "content": "<p>The relation \\le can be some arbitrary total order on regular expressions. Our concrete definition (omitted) works as follows. Expressions with different constructors at the root are compared according to some arbitrary fixed total order of the constructors. Expressions with the same constructor at the root are compared according to the lexicographic order of the arguments. Atoms are assumed to be totally ordered. More precisely,  \\le is restricted to regular expressions over natural numbers. cite <code>Proof Pearl: Regular Expression Equivalence and Relation Algebra</code></p>",
        "id": 380483755,
        "sender_full_name": "Hongjian Jiang",
        "timestamp": 1690834803
    },
    {
        "content": "<p>if you just need a total order, I think that you could ignore most of the Sym problem… something like <code>Sym a &lt; Sym b</code> iff <code>a 0 &lt; b 0</code></p>",
        "id": 380485233,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1690835251
    },
    {
        "content": "<p>but I am not sure at the moment.</p>",
        "id": 380485421,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1690835304
    },
    {
        "content": "<p>what you do not want is working on the function as a function to build an order</p>",
        "id": 380485458,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1690835321
    },
    {
        "content": "<p>Sorry, not understand the final sentence, not very familiar with the function on order.</p>\n<p>Why I need a total order or linear order lies on I could verify the bool value, but not for the nat value. So I guess the problem lies on the rexp doesn't support linear.  If available, I could email you the project and see where is the problem on.</p>",
        "id": 380486420,
        "sender_full_name": "Hongjian Jiang",
        "timestamp": 1690835624
    }
]