[
    {
        "content": "<p>I want to take a quotient of R^3 minus the origin to define the real projective 2-space RP^2. I did this once using <code>real×real×real</code>, but now I find that I'd like to use things like Analysis.Cross3, which seems to require vectors. </p>\n<p>I simply replaced the types everywhere (and I've \"sorry\"ed some proofs to make things shorter):</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">theory</span><span class=\"w\"> </span><span class=\"s\">\"Chapter1-2-alt-quo\"</span>\n<span class=\"w\">  </span><span class=\"kp\">imports</span><span class=\"w\"> </span><span class=\"n\">Complex_Main</span><span class=\"w\"> </span><span class=\"s\">\"HOL-Analysis.Cross3\"</span>\n<span class=\"k\">begin</span>\n\n<span class=\"k\">type_synonym</span><span class=\"w\"> </span><span class=\"n\">v3</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"real^3\"</span>\n<span class=\"k\">definition</span><span class=\"w\"> </span><span class=\"n\">map_vec</span><span class=\"w\"> </span><span class=\"kp\">where</span>\n<span class=\"s\">\"map_vec f g v = vec_lambda (map_fun g f (vec_nth v))\"</span>\n<span class=\"k\">functor</span><span class=\"w\"> </span><span class=\"n\">map_vec</span>\n<span class=\"w\">  </span><span class=\"k\">unfolding</span><span class=\"w\"> </span><span class=\"n\">map_vec_def</span>\n<span class=\"w\">   </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"n\">fastforce</span>\n<span class=\"w\">  </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">eq_id_iff</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">fastforce</span>\n\n<span class=\"k\">definition</span><span class=\"w\"> </span><span class=\"n\">projrel</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"v3 ⇒ v3 ⇒ bool\"</span>\n<span class=\"w\">  </span><span class=\"kp\">where</span><span class=\"w\"> </span><span class=\"s\">\"projrel = (λx y. (x ≠ 0 ∧ y ≠ 0) ∧  (∃ (c::real) . c ≠ 0 ∧ (x =  c *⇩R y)))\"</span>\n\n<span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">exists_projrel_refl</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"∃x. projrel x x\"</span>\n<span class=\"k\">proof</span><span class=\"w\"> </span><span class=\"o\">-</span>\n<span class=\"w\">  </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"s\">\"vector[1, 0, 0] =  1 *⇩R vector[1, 0, 0]\"</span><span class=\"w\">  </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">simp</span>\n<span class=\"w\">  </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">thesis</span><span class=\"w\"> </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">projrel_def</span><span class=\"w\"> </span><span class=\"n\">scaleR_one</span><span class=\"w\"> </span><span class=\"n\">zero_neq_one</span><span class=\"w\">  </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">metis</span>\n<span class=\"k\">qed</span>\n\n<span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">nonzero_inverse</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"((c::real) ≠ 0) ⟹ ((1/c) ≠ 0)\"</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">simp</span>\n\n<span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">divide_through</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"((c::real) ≠ 0) ⟹ (a = c*q) ⟹ ((1/c)*a = q)\"</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">simp</span>\n\n<span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">symp_projrel</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"symp projrel\"</span>\n<span class=\"k\">proof</span><span class=\"w\"> </span><span class=\"o\">-</span>\n<span class=\"w\">  </span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">thesis</span><span class=\"w\">  </span><span class=\"k\">unfolding</span><span class=\"w\"> </span><span class=\"n\">symp_def</span>\n<span class=\"w\">  </span><span class=\"k\">proof</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">clarify</span><span class=\"o\">)</span>\n<span class=\"w\">    </span><span class=\"k\">fix</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">y</span>\n<span class=\"w\">    </span><span class=\"k\">assume</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"projrel x y\"</span>\n<span class=\"w\">    </span><span class=\"k\">obtain</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"kp\">where</span><span class=\"w\"> </span><span class=\"n\">a1</span><span class=\"o\">:</span><span class=\"s\">\"(x ≠ 0 ∧ y ≠ 0) ∧   c ≠ 0 ∧</span>\n<span class=\"s\">         (x = c *⇩R y)\"</span><span class=\"w\"> </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">projrel_def</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">meson</span>\n<span class=\"w\">    </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"n\">inv</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"(1/c) * c = 1\"</span><span class=\"w\"> </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">a1</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">auto</span>\n<span class=\"w\">    </span><span class=\"k\">from</span><span class=\"w\"> </span><span class=\"n\">a1</span><span class=\"w\"> </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"s\">\"(1/c) *⇩R x = (1/c) *⇩R (c *⇩R y)\"</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">auto</span>\n<span class=\"w\">    </span><span class=\"k\">also</span><span class=\"w\"> </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"s\">\"... = 1 *⇩R y\"</span><span class=\"w\">  </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">inv</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">simp</span>\n<span class=\"w\">    </span><span class=\"k\">also</span><span class=\"w\"> </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"s\">\"... =  y\"</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">simp</span>\n<span class=\"w\">    </span><span class=\"k\">finally</span><span class=\"w\"> </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"s\">\"(1/c) *⇩R  x = y\"</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">auto</span>\n<span class=\"w\">    </span><span class=\"k\">then</span><span class=\"w\">  </span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"s\">\"projrel y x\"</span><span class=\"w\">  </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">metis</span><span class=\"w\"> </span><span class=\"n\">a1</span><span class=\"w\"> </span><span class=\"n\">projrel_def</span><span class=\"w\"> </span><span class=\"n\">scaleR_zero_left</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"k\">qed</span>\n<span class=\"k\">qed</span>\n\n<span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">transp_projrel</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"transp projrel\"</span>\n<span class=\"w\">  </span><span class=\"gr\">sorry</span>\n\n<span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">part_equivp_projrel</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"part_equivp projrel\"</span>\n<span class=\"w\">  </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">rule</span><span class=\"w\"> </span><span class=\"n\">part_equivpI</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">OF</span><span class=\"w\"> </span><span class=\"n\">exists_projrel_refl</span><span class=\"w\"> </span><span class=\"n\">symp_projrel</span><span class=\"w\"> </span><span class=\"n\">transp_projrel</span><span class=\"o\">])</span>\n\n<span class=\"kn\">quotient_type</span><span class=\"w\"> </span><span class=\"n\">rp2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">v3</span><span class=\"w\"> </span><span class=\"n\">/</span><span class=\"w\"> </span><span class=\"n\">partial</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"projrel\"</span>\n<span class=\"w\">  </span><span class=\"kp\">morphisms</span><span class=\"w\"> </span><span class=\"n\">Rep_Proj</span><span class=\"w\"> </span><span class=\"n\">Abs_Proj</span>\n<span class=\"w\">  </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">part_equivp_projrel</span><span class=\"w\"> </span><span class=\"ow\">.</span>\n\n<span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">Domainp_cr_proj</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">transfer_domain_rule</span><span class=\"o\">]:</span><span class=\"w\"> </span><span class=\"s\">\"Domainp pcr_rp2 = (λx .( (x ≠ 0) ∧ projrel x x))\"</span>\n<span class=\"w\">  </span><span class=\"k\">using</span><span class=\"w\">  </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"kt\">sledgehammer</span>\n\n<span class=\"c\">(*  by (simp add: projrel_def rp2.domain_eq) *)</span>\n\n<span class=\"k\">end</span>\n</code></pre></div>\n<p>But after making the quotient type, I get an error</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"n\">Generation</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">parametrized</span><span class=\"w\"> </span><span class=\"n\">correspondence</span><span class=\"w\"> </span><span class=\"n\">relation</span><span class=\"w\"> </span><span class=\"n\">failed.</span>\n<span class=\"n\">Reason</span><span class=\"o\">:</span><span class=\"w\">  </span><span class=\"n\">No</span><span class=\"w\"> </span><span class=\"n\">relator</span><span class=\"w\"> </span><span class=\"kp\">for</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">type</span><span class=\"w\"> </span><span class=\"s\">\"Numeral_Type.bit1\"</span><span class=\"w\"> </span><span class=\"n\">found.</span>\n</code></pre></div>\n<p>(the <code>map_vec</code> definition near the top is inserted because of an answer to an earlier version of this question at <a class=\"stream-topic\" data-stream-id=\"238552\" href=\"/#narrow/channel/238552-Beginner-Questions/topic/Quotient.20Basics.20and.20warnings/with/528733443\">#Beginner Questions &gt; Quotient Basics and warnings</a> )</p>\n<p>As a novice, I have no idea what Numeral_Type.bit1 is, or why it would arise here. But more important, whatever is going on seems to have messed things up enough that <code>rp2.domain_eq</code>, which was automatically defined when I used <code>real×real×real</code>,is no longer available, so the commented-out proof at the end no longer works. </p>\n<p>Is my situation hopeless? Does Isabelle not want me to make quotients of real vector spaces?</p>",
        "id": 542992032,
        "sender_full_name": "John  Hughes",
        "timestamp": 1759511850
    },
    {
        "content": "<p>Just FYI, I do have a version of the cross product development that I intend to put in the distribution instead of the current one. Mine is strictly more general; it works for any three-dimensional real vector space with distinguished x, y, z axis.</p>",
        "id": 543600502,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1759862785
    },
    {
        "content": "<p>I eagerly await that. I'd still like to be able to do the quotient on <code>real^3</code>, but given the lack of answers to earlier questions, that may have to await another life where I have the time and energy to learn about dead variables and bounded natural functors, etc.</p>",
        "id": 543637830,
        "sender_full_name": "John  Hughes",
        "timestamp": 1759880517
    },
    {
        "content": "<p>Oh and by the way, I think you can ignore the message about the \"parametrized correspondence relation\". I don't think you need that.</p>",
        "id": 543818336,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1759951094
    },
    {
        "content": "<p>By altering that last lemma to </p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">Domainp_cr_proj</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">transfer_domain_rule</span><span class=\"o\">]:</span><span class=\"w\"> </span><span class=\"s\">\"Domainp cr_rp2 = (λx .( (x ≠ 0) ∧ projrel x x))\"</span>\n<span class=\"w\">  </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">projrel_def</span><span class=\"w\"> </span><span class=\"n\">rp2.domain</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">presburger</span>\n</code></pre></div>\n<p>we actually get a quotient that's usable. (The difference is between <code>pcr_rp2</code> and <code>cr_rp2</code> for those who don't feel like playing \"Where's Waldo\" with the code.) </p>\n<p>My thanks to Richard Schmoetten for showing this to me.</p>",
        "id": 543995388,
        "sender_full_name": "John  Hughes",
        "timestamp": 1760024904
    }
]