[
    {
        "content": "<p>Hi. In some proof I'm conducting, <code>apply (simp)</code> simplifies the goal further than I had expected and intended. I've now prefixed the step with <code>using [[simp_trace=true]]</code> and am looking at the simp trace to understand which perhaps erroneously <code>simp</code>-declared rule is applied . However, there appears to be a 'jump' at the decisive simplification: In step N, I see <code>rewriting {term N} == {term N+1}</code>, and both sides are OK (= simplifications I want). But in step N+1, it says <code>[1] SIMPLIFIER INVOKED ON THE FOLLOWING TERM: {term M}</code>, where <code>term M</code> is _not_ <code>term N+1</code>, and instead, in between <code>term N+1</code> and <code>term M</code> the simplification I want to avoid seems to have been applied without mentioning / indication of where that was coming from. Can someone help?</p>\n<p>The simplification in question itself hoists out a HOL <code>if</code> out of a rather complex definition, which then shortly after leads to a splitting of the goal -- both is what I want to avoid since one can keep on reasoning uniformly for a while. Is there a way to prevent such hoisting of <code>if</code>s?</p>",
        "id": 326318907,
        "sender_full_name": "Hanno Becker",
        "timestamp": 1675763141
    },
    {
        "content": "<p>Ah... it looks like it's <code>if_split</code> that I didn't want, and <code>simp split del:if_split</code> helps.</p>",
        "id": 326323222,
        "sender_full_name": "Hanno Becker",
        "timestamp": 1675764499
    },
    {
        "content": "<p>In general, I use </p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"w\">  </span><span class=\"n\">supply</span><span class=\"w\"> </span><span class=\"o\">[[</span><span class=\"n\">simp_trace</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">simp_trace_depth_limit</span><span class=\"o\">=</span><span class=\"n\">5</span><span class=\"o\">]]</span>\n</code></pre></div>",
        "id": 326407782,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1675788583
    },
    {
        "content": "<p>For more desparate cases, there <code>simp_debug</code></p>",
        "id": 326408085,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1675788662
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"233198\">@Mathias Fleury</span> !</p>",
        "id": 326734772,
        "sender_full_name": "Hanno Becker",
        "timestamp": 1675921504
    }
]