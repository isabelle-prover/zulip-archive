[
    {
        "content": "<p>Here I got the answer that I did not specify correctly that my function myle belongs to the type class at the beginning:</p>\n<p><a href=\"https://stackoverflow.com/questions/62891358/proving-a-type-classed-theorem-in-isabelle\">https://stackoverflow.com/questions/62891358/proving-a-type-classed-theorem-in-isabelle</a></p>\n<p>How can I specify that a function of type `'a =&gt; 'a =&gt; bool\" conforms the type class specification, other than referring to the function name in the type class definition?</p>",
        "id": 205892932,
        "sender_full_name": "Gergely Buday",
        "timestamp": 1596538333
    },
    {
        "content": "<p>As Peter wrote in the SO Post, the function mle as you wrote it down refers to any function that takes two 'b of class order and returns a bool. What you want is to prove the theorem \"x ≼ x\". Note that the operator ≼ is locally fixed so outside of the context you can instantiate it with any other concrete operator (e.g. myle) that fulfils the axioms of the order typeclass.</p>",
        "id": 205895566,
        "sender_full_name": "Lukas Stevens",
        "timestamp": 1596540633
    },
    {
        "content": "<p>This can be done with the command <code>interpretation</code>.</p>",
        "id": 205895749,
        "sender_full_name": "Lukas Stevens",
        "timestamp": 1596540773
    },
    {
        "content": "<p>Or <code>instantiation</code> if you want to instantiate the class for a whole type.</p>",
        "id": 205896350,
        "sender_full_name": "Lukas Stevens",
        "timestamp": 1596541308
    },
    {
        "content": "<p>I want to prove this theorem: for any myle function that conforms my type class, and for any x,  x &lt;= x. Can I state this in Isabelle?</p>",
        "id": 205896465,
        "sender_full_name": "Gergely Buday",
        "timestamp": 1596541388
    },
    {
        "content": "<p>That is exactly \"x ≼ x\". When you leave the context after <code>end</code> the theorem is automatically generalised.</p>",
        "id": 205896625,
        "sender_full_name": "Lukas Stevens",
        "timestamp": 1596541538
    },
    {
        "content": "<p>You can see this if you type <code>thm order.refl</code> after <code>end</code>.</p>",
        "id": 205896715,
        "sender_full_name": "Lukas Stevens",
        "timestamp": 1596541596
    },
    {
        "content": "<p>For a detailed introduction to type classes and locales read the documentation: <a href=\"https://isabelle.in.tum.de/documentation.html\">https://isabelle.in.tum.de/documentation.html</a></p>",
        "id": 205896898,
        "sender_full_name": "Lukas Stevens",
        "timestamp": 1596541744
    },
    {
        "content": "<p>What you also can do is write \"(x::'a::order) ≼ x\" after <code>end</code>.</p>",
        "id": 205897084,
        "sender_full_name": "Lukas Stevens",
        "timestamp": 1596541918
    },
    {
        "content": "<p>I'm getting to it.</p>\n<p>Now,</p>\n<p>lemma (in order) \"lesseq x x\"<br>\nproof -<br>\n  show ?thesis by (rule local.refl)<br>\nqed</p>\n<p>works smoothly, while</p>\n<p>theorem \"order myle ⟹ myle x x\"<br>\nproof -<br>\n  show ?thesis by (rule order.refl)<br>\nqed</p>\n<p>says</p>\n<p>show myle x x <br>\nSuccessful attempt to solve goal by exported rule:<br>\n  myle x x <br>\nproof (state)<br>\nthis:<br>\n  myle x x</p>\n<p>goal:<br>\nNo subgoals! <br>\nFailed to finish proof⌂:<br>\ngoal (1 subgoal):</p>\n<ol>\n<li>ProofsAndFormalizations.class.order (λa b. b)</li>\n</ol>\n<p>Again something similar as at my first attempt.</p>\n<p>What is wrong here?</p>",
        "id": 205897324,
        "sender_full_name": "Gergely Buday",
        "timestamp": 1596542138
    },
    {
        "content": "<p>The second one works if you use locale instead of class.</p>",
        "id": 205897586,
        "sender_full_name": "Lukas Stevens",
        "timestamp": 1596542357
    },
    {
        "content": "<p>But the first one is the canonical way to do it.</p>",
        "id": 205897595,
        "sender_full_name": "Lukas Stevens",
        "timestamp": 1596542369
    },
    {
        "content": "<p>And works in both cases.</p>",
        "id": 205897702,
        "sender_full_name": "Lukas Stevens",
        "timestamp": 1596542429
    },
    {
        "content": "<p>I'm afraid it does not work for me, not even with locale:</p>\n<p>theory Locale</p>\n<p>imports Main </p>\n<p>begin</p>\n<p>locale order =<br>\n  fixes lesseq :: \" 'a ⇒ 'a ⇒ bool\" (infix \"≼\" 50)<br>\n  assumes refl:    \"x ≼ x\"<br>\n      and trans:   \"x ≼ y ⟹ y ≼ z ⟹ x ≼ z\"<br>\n      and antisym: \"x ≼ y ⟹ y ≼ x ⟹ x = y\"</p>\n<p>theorem ‹order (myle :: 'a ⇒ 'a ⇒ bool) ⟹ myle x x›<br>\nproof -<br>\n  show ?thesis by (rule order.refl)<br>\nqed</p>\n<p>end</p>\n<p>Failed to finish proof⌂:<br>\ngoal (1 subgoal):</p>\n<ol>\n<li>order (λa b. b)</li>\n</ol>\n<p>How does the K* combinator pop up here?</p>",
        "id": 205899365,
        "sender_full_name": "Gergely Buday",
        "timestamp": 1596543652
    },
    {
        "content": "<p>theorem assumes \"order myle\"<br>\n          shows \"myle x x\"<br>\nproof -<br>\n  from assms show ?thesis by (rule order.refl)<br>\nqed</p>\n<p>did the trick.</p>",
        "id": 205900006,
        "sender_full_name": "Gergely Buday",
        "timestamp": 1596544120
    }
]