[
    {
        "content": "<p>Ich möchte ∃c::In. (Foo c) auf Foo cin vereinfachen da In als typedef In = \"{cin}\" definiert ist. Wahrscheinlich übersehe ich etwas, aber ich finde kein Regel was ich dafür anwenden kann. Hat jemand einen Tip?</p>",
        "id": 304060336,
        "sender_full_name": "Isaac Freund",
        "timestamp": 1665761854
    },
    {
        "content": "<p>(answering in English)</p>\n<p><code>Foo cin</code> does not make sense as ti does not type.  But you can the use the lifting (default name <code>Abs_In</code>) to convert the type. For example:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">typedef</span><span class=\"w\"> </span><span class=\"n\">test</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"{False}\"</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">auto</span><span class=\"w\"></span>\n\n<span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"s\">\"(∃x :: test. P x) = P (Abs_test False)\"</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">metis</span><span class=\"o\">(</span><span class=\"n\">full_types</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">Rep_test</span><span class=\"w\"> </span><span class=\"n\">Rep_test_inject</span><span class=\"w\"> </span><span class=\"n\">singletonD</span><span class=\"o\">)</span><span class=\"w\"></span>\n</code></pre></div>\n<p>(Sledgehammer is great)</p>",
        "id": 304062454,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1665762439
    },
    {
        "content": "<p>My bad, I meant to edit to English before pressing enter. The actual subgoal I'm working with is somewhat more complex</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"w\"> </span><span class=\"n\">1.</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">LEAST</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"o\">::</span><span class=\"n\">lnat.</span><span class=\"w\"> </span><span class=\"n\">∃c</span><span class=\"o\">::</span><span class=\"n\">In.</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">#⇩√</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Abs_sb</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">λc</span><span class=\"o\">::</span><span class=\"n\">In.</span><span class=\"w\"> </span><span class=\"n\">↑</span><span class=\"o\">(</span><span class=\"n\">Timed</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">TOne</span><span class=\"w\"> </span><span class=\"n\">True</span><span class=\"o\">)))</span><span class=\"w\">  </span><span class=\"n\">▸</span><span class=\"w\">  </span><span class=\"n\">c</span><span class=\"o\">))</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">1</span><span class=\"o\">::</span><span class=\"n\">lnat</span><span class=\"o\">)</span><span class=\"w\"></span>\n</code></pre></div>\n<p>It seems like singletonD may be useful though thanks</p>",
        "id": 304065066,
        "sender_full_name": "Isaac Freund",
        "timestamp": 1665763130
    }
]