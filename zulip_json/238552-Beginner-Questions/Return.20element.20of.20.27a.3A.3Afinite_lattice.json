[
    {
        "content": "<p>I want to write a function that reverses the order of a lattice</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">fun</span> <span class=\"n\">reverse_lattice</span> <span class=\"o\">::</span> <span class=\"s\">\"'a::finite_lattice =&gt; 'a::finite_lattice\"</span>\n</code></pre></div>\n<p>But I am not sure how to work with an element of that type or how to even create such. Is that even possible?</p>",
        "id": 296080388,
        "sender_full_name": "waynee95",
        "timestamp": 1661858410
    },
    {
        "content": "<p>No, at least not like this. The order of the lattice comes from the type class and is thus fixed for any given type. What you <em>can</em> do is to define a type constructor <code>dual</code> that takes a type parameter <code>'a</code> and then instantiates the type class with the order reversed. You also get morphisms <code>to_dual :: 'a ⇒ 'a dual</code> and <code>from_dual :: 'a dual ⇒ 'a</code> that map between the type's copy and the type itself. The <code>to_dual</code> sort of corresponds to the <code>reverse_lattice</code> you tried to define above.</p>\n<p>This requires quite a bit of boilerplate to set up, but it's not that hard if you know what needs to be done. In fact, I think something like this should probably be put into <code>HOL-Library</code> (if it doesn't exist already).</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">typedef</span> <span class=\"n n-Type\">'a</span> <span class=\"n\">dual</span> <span class=\"o\">=</span> <span class=\"s\">\"UNIV :: 'a set\"</span>\n  <span class=\"kp\">morphisms</span> <span class=\"n\">from_dual</span> <span class=\"n\">to_dual</span> <span class=\"k\">by</span> <span class=\"n\">blast</span>\n\n<span class=\"k\">setup_lifting</span> <span class=\"n\">type_definition_dual</span>\n\n\n<span class=\"k\">instantiation</span> <span class=\"n\">dual</span> <span class=\"o\">::</span> <span class=\"o\">(</span><span class=\"n\">ord</span><span class=\"o\">)</span> <span class=\"n\">ord</span>\n<span class=\"k\">begin</span>\n\n<span class=\"kn\">lift_definition</span> <span class=\"n\">less_eq_dual</span> <span class=\"o\">::</span> <span class=\"s\">\"'a dual ⇒ 'a dual ⇒ bool\"</span> <span class=\"kp\">is</span> <span class=\"s\">\"(≥)\"</span> <span class=\"ow\">.</span>\n<span class=\"kn\">lift_definition</span> <span class=\"n\">less_dual</span> <span class=\"o\">::</span> <span class=\"s\">\"'a dual ⇒ 'a dual ⇒ bool\"</span> <span class=\"kp\">is</span> <span class=\"s\">\"(&gt;)\"</span> <span class=\"ow\">.</span>\n\n<span class=\"kn\">instance</span> <span class=\"ow\">..</span>\n\n<span class=\"k\">end</span>\n\n\n<span class=\"kn\">instance</span> <span class=\"n\">dual</span> <span class=\"o\">::</span> <span class=\"o\">(</span><span class=\"n\">order</span><span class=\"o\">)</span> <span class=\"n\">order</span>\n  <span class=\"k\">by</span> <span class=\"n\">standard</span> <span class=\"o\">(</span><span class=\"n\">transfer</span><span class=\"err\">;</span> <span class=\"n\">force</span><span class=\"o\">)+</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">dual</span> <span class=\"o\">::</span> <span class=\"o\">(</span><span class=\"n\">preorder</span><span class=\"o\">)</span> <span class=\"n\">preorder</span>\n  <span class=\"k\">by</span> <span class=\"n\">standard</span> <span class=\"o\">(</span><span class=\"n\">transfer</span><span class=\"err\">;</span> <span class=\"n\">force</span> <span class=\"n\">simp</span><span class=\"o\">:</span> <span class=\"n\">less_le_not_le</span> <span class=\"n\">intro</span><span class=\"o\">:</span> <span class=\"n\">order.trans</span><span class=\"o\">)+</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">dual</span> <span class=\"o\">::</span> <span class=\"o\">(</span><span class=\"n\">linorder</span><span class=\"o\">)</span> <span class=\"n\">linorder</span>\n  <span class=\"k\">by</span> <span class=\"n\">standard</span> <span class=\"o\">(</span><span class=\"n\">transfer</span><span class=\"err\">;</span> <span class=\"n\">force</span><span class=\"o\">)+</span>\n\n\n<span class=\"k\">instantiation</span> <span class=\"n\">dual</span> <span class=\"o\">::</span> <span class=\"o\">(</span><span class=\"n\">sup</span><span class=\"o\">)</span> <span class=\"n\">inf</span>\n<span class=\"k\">begin</span>\n<span class=\"kn\">lift_definition</span> <span class=\"n\">inf_dual</span> <span class=\"o\">::</span> <span class=\"s\">\"'a dual ⇒ 'a dual ⇒ 'a dual\"</span> <span class=\"kp\">is</span> <span class=\"n\">sup</span> <span class=\"ow\">.</span>\n<span class=\"kn\">instance</span> <span class=\"ow\">..</span>\n<span class=\"k\">end</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">dual</span> <span class=\"o\">::</span> <span class=\"o\">(</span><span class=\"n\">semilattice_sup</span><span class=\"o\">)</span> <span class=\"n\">semilattice_inf</span>\n  <span class=\"k\">by</span> <span class=\"n\">standard</span> <span class=\"o\">(</span><span class=\"n\">transfer</span><span class=\"err\">;</span> <span class=\"n\">simp</span><span class=\"o\">)+</span>\n\n<span class=\"k\">instantiation</span> <span class=\"n\">dual</span> <span class=\"o\">::</span> <span class=\"o\">(</span><span class=\"n\">inf</span><span class=\"o\">)</span> <span class=\"n\">sup</span>\n<span class=\"k\">begin</span>\n<span class=\"kn\">lift_definition</span> <span class=\"n\">sup_dual</span> <span class=\"o\">::</span> <span class=\"s\">\"'a dual ⇒ 'a dual ⇒ 'a dual\"</span> <span class=\"kp\">is</span> <span class=\"n\">inf</span> <span class=\"ow\">.</span>\n<span class=\"kn\">instance</span> <span class=\"ow\">..</span>\n<span class=\"k\">end</span>\n\n<span class=\"k\">instantiation</span> <span class=\"n\">dual</span> <span class=\"o\">::</span> <span class=\"o\">(</span><span class=\"n\">Sup</span><span class=\"o\">)</span> <span class=\"n\">Inf</span>\n<span class=\"k\">begin</span>\n<span class=\"kn\">lift_definition</span> <span class=\"n\">Inf_dual</span> <span class=\"o\">::</span> <span class=\"s\">\"'a dual set ⇒ 'a dual\"</span> <span class=\"kp\">is</span> <span class=\"n\">Sup</span> <span class=\"ow\">.</span>\n<span class=\"kn\">instance</span> <span class=\"ow\">..</span>\n<span class=\"k\">end</span>\n\n<span class=\"k\">instantiation</span> <span class=\"n\">dual</span> <span class=\"o\">::</span> <span class=\"o\">(</span><span class=\"n\">Inf</span><span class=\"o\">)</span> <span class=\"n\">Sup</span>\n<span class=\"k\">begin</span>\n<span class=\"kn\">lift_definition</span> <span class=\"n\">Sup_dual</span> <span class=\"o\">::</span> <span class=\"s\">\"'a dual set ⇒ 'a dual\"</span> <span class=\"kp\">is</span> <span class=\"n\">Inf</span> <span class=\"ow\">.</span>\n<span class=\"kn\">instance</span> <span class=\"ow\">..</span>\n<span class=\"k\">end</span>\n\n<span class=\"k\">instantiation</span> <span class=\"n\">dual</span> <span class=\"o\">::</span> <span class=\"o\">(</span><span class=\"n\">top</span><span class=\"o\">)</span> <span class=\"n\">bot</span>\n<span class=\"k\">begin</span>\n<span class=\"kn\">lift_definition</span> <span class=\"n\">bot_dual</span> <span class=\"o\">::</span> <span class=\"s\">\"'a dual\"</span> <span class=\"kp\">is</span> <span class=\"n\">top</span> <span class=\"ow\">.</span>\n<span class=\"kn\">instance</span> <span class=\"ow\">..</span>\n<span class=\"k\">end</span>\n\n<span class=\"k\">instantiation</span> <span class=\"n\">dual</span> <span class=\"o\">::</span> <span class=\"o\">(</span><span class=\"n\">bot</span><span class=\"o\">)</span> <span class=\"n\">top</span>\n<span class=\"k\">begin</span>\n<span class=\"kn\">lift_definition</span> <span class=\"n\">top_dual</span> <span class=\"o\">::</span> <span class=\"s\">\"'a dual\"</span> <span class=\"kp\">is</span> <span class=\"n\">bot</span> <span class=\"ow\">.</span>\n<span class=\"kn\">instance</span> <span class=\"ow\">..</span>\n<span class=\"k\">end</span>\n\n\n<span class=\"kn\">instance</span> <span class=\"n\">dual</span> <span class=\"o\">::</span> <span class=\"o\">(</span><span class=\"n\">semilattice_inf</span><span class=\"o\">)</span> <span class=\"n\">semilattice_sup</span>\n  <span class=\"k\">by</span> <span class=\"n\">standard</span> <span class=\"o\">(</span><span class=\"n\">transfer</span><span class=\"err\">;</span> <span class=\"n\">simp</span><span class=\"o\">)+</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">dual</span> <span class=\"o\">::</span> <span class=\"o\">(</span><span class=\"n\">lattice</span><span class=\"o\">)</span> <span class=\"n\">lattice</span>\n  <span class=\"k\">by</span> <span class=\"n\">standard</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">dual</span> <span class=\"o\">::</span> <span class=\"o\">(</span><span class=\"n\">distrib_lattice</span><span class=\"o\">)</span> <span class=\"n\">distrib_lattice</span>\n  <span class=\"k\">by</span> <span class=\"n\">standard</span> <span class=\"o\">(</span><span class=\"n\">transfer</span><span class=\"err\">;</span> <span class=\"n\">simp</span> <span class=\"n\">add</span><span class=\"o\">:</span> <span class=\"n\">inf_sup_distrib1</span><span class=\"o\">)</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">dual</span> <span class=\"o\">::</span> <span class=\"o\">(</span><span class=\"n\">complete_lattice</span><span class=\"o\">)</span> <span class=\"n\">complete_lattice</span>\n  <span class=\"k\">by</span> <span class=\"n\">standard</span> <span class=\"o\">(</span><span class=\"n\">transfer</span><span class=\"err\">;</span> <span class=\"n\">force</span> <span class=\"n\">intro</span><span class=\"o\">:</span> <span class=\"n\">Sup_upper</span> <span class=\"n\">Inf_lower</span> <span class=\"n\">simp</span><span class=\"o\">:</span> <span class=\"n\">Sup_le_iff</span> <span class=\"n\">le_Inf_iff</span><span class=\"err\">;</span> <span class=\"n\">fail</span><span class=\"o\">)+</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">dual</span> <span class=\"o\">::</span> <span class=\"o\">(</span><span class=\"n\">finite_lattice</span><span class=\"o\">)</span> <span class=\"n\">finite_lattice</span>\n  <span class=\"k\">by</span> <span class=\"n\">standard</span> <span class=\"o\">(</span><span class=\"n\">transfer</span><span class=\"err\">;</span> <span class=\"n\">simp</span><span class=\"err\">;</span> <span class=\"n\">fail</span><span class=\"o\">)+</span>\n\n\n<span class=\"kn\">lemma</span> <span class=\"n\">from_dual_le_iff</span> <span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]:</span> <span class=\"s\">\"from_dual x ≤ from_dual y ⟷ x ≥ y\"</span>\n  <span class=\"k\">by</span> <span class=\"n\">transfer</span> <span class=\"n\">auto</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">from_dual_less_iff</span> <span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]:</span> <span class=\"s\">\"from_dual x &lt; from_dual y ⟷ x &gt; y\"</span>\n  <span class=\"k\">by</span> <span class=\"n\">transfer</span> <span class=\"n\">auto</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">to_dual_le_iff</span> <span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]:</span> <span class=\"s\">\"to_dual x ≤ to_dual y ⟷ x ≥ y\"</span>\n  <span class=\"k\">by</span> <span class=\"n\">transfer</span> <span class=\"n\">auto</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">to_dual_less_iff</span> <span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]:</span> <span class=\"s\">\"to_dual x &lt; to_dual y ⟷ x &gt; y\"</span>\n  <span class=\"k\">by</span> <span class=\"n\">transfer</span> <span class=\"n\">auto</span>\n</code></pre></div>",
        "id": 296092765,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1661863289
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232736\">@Manuel Eberl</span> I already feared that it might be more involved to do that. How would I use <code>to_dual</code>?</p>\n<p>Maybe I can give a bit more context on what I am trying to do in Isabelle.</p>\n<p>I have these datatypes</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">datatype</span> <span class=\"n\">variance</span> <span class=\"o\">=</span>\n  <span class=\"n\">Plus</span>\n  <span class=\"o\">|</span> <span class=\"n\">Minus</span>\n  <span class=\"o\">|</span> <span class=\"n\">PlusMinus</span>\n\n<span class=\"k\">datatype</span> <span class=\"n\">ty</span> <span class=\"o\">=</span>\n  <span class=\"n\">Base</span>\n  <span class=\"o\">|</span> <span class=\"n\">Fun</span> <span class=\"n\">ty</span> <span class=\"n\">variance</span> <span class=\"n\">ty</span>\n</code></pre></div>\n<p>The variances are used to specify the dependency of the values of a function on their arguments, e.g. <code>Plus</code> indicates a _monotonic_ dependency. </p>\n<p>We can mathematically define the following constructions on complete lattices: inverse, flattening, product of lattices and creating the lattice of component-wise ordered monotonic functions between two lattices. </p>\n<p>These constructions are then used to associate with each <code>ty</code> a complete lattice.</p>\n<p>So to continue I need to figure out to achieve these constructions in Isabelle.</p>",
        "id": 296176496,
        "sender_full_name": "waynee95",
        "timestamp": 1661880516
    }
]