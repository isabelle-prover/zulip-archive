[
    {
        "content": "<p>Hi all, I noticed it is possible to reuse isabelle's unary minus syntax by instantiating the uminus typeclass for my type. Is something similar possible for the set contains (∈) syntax? It seems that in Set.thy the syntax is not separated out into a separate typeclass, so I'm suspecting it's not possible</p>",
        "id": 356262861,
        "sender_full_name": "Bob Rubbens",
        "timestamp": 1683368239
    },
    {
        "content": "<p>It's not possible in a way that I would recommend.</p>\n<p>If you really want to do it there is one option: you can remove the existing notation for ∈ and introduce a new one using a mechanism like <code>adhoc_overloading</code>. There are two reasons why this is a bad idea:</p>\n<ol>\n<li>redefining such basic syntax from the library is discouraged</li>\n<li><code>adhoc_overloading</code> does not always work that well; in particular, it often leads to very incomprehensible error messages when there is a type error (and type checking can fail due to syntactic ambiguities)</li>\n</ol>\n<p>Note that the type class approach that you mentioned does not work here, since the type of a ‘contains’ operation is typically something like <code>'a ⇒ 'a my_type ⇒ bool</code> and type classes cannot handle something like this. The raw overloading mechanism that is underneath type classes <em>can</em> handle this in principle, but then you would have to specify the operation as <code>'a ⇒ 'b ⇒ bool</code> and that would lead to you having to annotate a lot of types in practice.</p>",
        "id": 356355915,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1683398287
    },
    {
        "content": "<p>What I would recommend is that you either define a function <code>set_my_type :: 'a my_type ⇒ 'a set</code> and then simply write <code>foo ∈ set_my_type bar</code> instead of the <code>foo ∈ bar</code> that you wanted.</p>",
        "id": 356355947,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1683398329
    },
    {
        "content": "<p>You could also define some custom syntax like a <code>∈</code> with some extra symbol/letter in the index. That is completely unproblematic and is almost exactly the thing you wanted, save for the extra symbol/letter. This is what is e.g. done for multisets, where we write <code>x ∈# A</code>.</p>",
        "id": 356356040,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1683398393
    },
    {
        "content": "<p>(and <code>x ∈# A</code> is just an abbreviation for <code>x ∈ set_mset A</code>)</p>",
        "id": 356356100,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1683398409
    },
    {
        "content": "<p>Thanks! I wound up using the subscript workaround, works like a charm.</p>",
        "id": 356363594,
        "sender_full_name": "Bob Rubbens",
        "timestamp": 1683402599
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232736\">@Manuel Eberl</span>, what is the difference between <code>overloading</code> and <code>adhoc_overloading</code>? Unfortunately, the documentation of <code>adhoc_overloading</code> in The Isabelle/Isar Reference Manual is very terse; so I can’t surely tell. From the theory <code>Adhoc_Overloading_Examples</code>, I get the impression that both <code>overloading</code> and <code>adhoc_overloading</code> use the same underlying overloading mechanism and the difference is just that <code>overloading</code> lets you define the constants to overload with in a local context while <code>adhoc_overloading</code> allows overloading with already existing constants. Is that correct?</p>",
        "id": 356376933,
        "sender_full_name": "Wolfgang Jeltsch",
        "timestamp": 1683411915
    }
]