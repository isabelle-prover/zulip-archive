[
    {
        "content": "<p>I wonder how to introduce a subgoal in Isar (or, <em>proof(state)</em> mode)  like the tactic <code>subgoal_tac</code> did, in an elegant way<span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span>.<br>\nHere is <a href=\"https://github.com/seL4/l4v/blob/master/proof/invariant-abstract/CSpaceInv_AI.thy\">the example</a>, commented existing <code>apply ...</code> steps, as well as my current attempt:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"w\"> </span><span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">gen_obj_refs_subset</span><span class=\"o\">:</span>\n<span class=\"w\">  </span><span class=\"s\">\"(gen_obj_refs cap ⊆ gen_obj_refs cap')</span>\n<span class=\"s\">       = (obj_refs cap ⊆ obj_refs cap'</span>\n<span class=\"s\">             ∧ cap_irqs cap ⊆ cap_irqs cap'</span>\n<span class=\"s\">             ∧ arch_gen_refs cap ⊆ arch_gen_refs cap')\"</span>\n<span class=\"w\">  </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"n\">add</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">gen_obj_refs_def</span><span class=\"o\">)</span>\n<span class=\"c\">(*    apply (subgoal_tac \"∀x y. Inl x ≠ Inr y\") *)</span>\n<span class=\"c\">(*   apply blast</span>\n<span class=\"c\">  apply simp *)</span>\n<span class=\"k\">proof</span><span class=\"w\"> </span><span class=\"o\">-</span>\n<span class=\"w\">  </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"(∀x y. Inl x ≠ Inr y) ⟹ ((ObjRef ` obj_refs cap ⊆ ObjRef ` obj_refs cap' ∪ IRQRef ` cap_irqs cap' ∪ ArchRef ` arch_gen_refs cap' ∧</span>\n<span class=\"s\">     IRQRef ` cap_irqs cap ⊆ ObjRef ` obj_refs cap' ∪ IRQRef ` cap_irqs cap' ∪ ArchRef ` arch_gen_refs cap' ∧</span>\n<span class=\"s\">     ArchRef ` arch_gen_refs cap ⊆ ObjRef ` obj_refs cap' ∪ IRQRef ` cap_irqs cap' ∪ ArchRef ` arch_gen_refs cap') =</span>\n<span class=\"s\">    (obj_refs cap ⊆ obj_refs cap' ∧ cap_irqs cap ⊆ cap_irqs cap' ∧ arch_gen_refs cap ⊆ arch_gen_refs cap'))\"</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">blast</span>\n<span class=\"w\">  </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"∀x y. Inl x ≠ Inr y\"</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">simp</span>\n<span class=\"w\">  </span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"s\">\"(ObjRef ` obj_refs cap ⊆ ObjRef ` obj_refs cap' ∪ IRQRef ` cap_irqs cap' ∪ ArchRef ` arch_gen_refs cap' ∧</span>\n<span class=\"s\">     IRQRef ` cap_irqs cap ⊆ ObjRef ` obj_refs cap' ∪ IRQRef ` cap_irqs cap' ∪ ArchRef ` arch_gen_refs cap' ∧</span>\n<span class=\"s\">     ArchRef ` arch_gen_refs cap ⊆ ObjRef ` obj_refs cap' ∪ IRQRef ` cap_irqs cap' ∪ ArchRef ` arch_gen_refs cap') =</span>\n<span class=\"s\">    (obj_refs cap ⊆ obj_refs cap' ∧ cap_irqs cap ⊆ cap_irqs cap' ∧ arch_gen_refs cap ⊆ arch_gen_refs cap')\"</span>\n<span class=\"w\">    </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"n\">add</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"o\">)</span>\n<span class=\"w\">    </span><span class=\"k\">done</span>\n<span class=\"k\">qed</span>\n</code></pre></div>\n<p><code>(ObjRef ` obj_refs cap ⊆  ...</code> is just copied from the IDE output and its meaning does not matter.</p>",
        "id": 547635902,
        "sender_full_name": "ws",
        "timestamp": 1761718547
    },
    {
        "content": "<p>In this case <code>\"∀x y. Inl x ≠ Inr y\"</code> is already a theorem and you can just do <code>using Sum_type.Inl_not_Inr by blast</code></p>",
        "id": 547696883,
        "sender_full_name": "irvin",
        "timestamp": 1761739259
    },
    {
        "content": "<p>I don't know exactly how subgoal tac works, but this looks like something you could do with presume:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"kp\">assumes</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">P</span>\n<span class=\"w\">  </span><span class=\"kp\">and</span><span class=\"w\"> </span><span class=\"n\">pq</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"P ⟹ Q\"</span>\n<span class=\"w\">  </span><span class=\"kp\">and</span><span class=\"w\"> </span><span class=\"kt\">pr</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"P ⟹ R\"</span>\n<span class=\"w\">  </span><span class=\"kp\">and</span><span class=\"w\"> </span><span class=\"n\">rqs</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"R ⟹ Q ⟹ S\"</span>\n<span class=\"w\">  </span><span class=\"kp\">and</span><span class=\"w\"> </span><span class=\"n\">st</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"S ⟹ T\"</span>\n<span class=\"kp\">shows</span><span class=\"w\"> </span><span class=\"n\">T</span>\n<span class=\"k\">proof</span><span class=\"w\"> </span><span class=\"o\">-</span>\n<span class=\"w\">  </span><span class=\"k\">presume</span><span class=\"w\"> </span><span class=\"n\">S</span>\n<span class=\"w\">  </span><span class=\"k\">thus</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"w\"> </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">st</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">simp</span>\n<span class=\"k\">next</span>\n<span class=\"w\">  </span><span class=\"k\">presume</span><span class=\"w\"> </span><span class=\"s\">\"R ∧ Q\"</span>\n<span class=\"w\">  </span><span class=\"k\">thus</span><span class=\"w\"> </span><span class=\"n\">S</span><span class=\"w\"> </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">rqs</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">simp</span>\n<span class=\"k\">next</span>\n<span class=\"w\">  </span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"s\">\"R ∧ Q\"</span><span class=\"w\"> </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"kt\">pr</span><span class=\"w\"> </span><span class=\"n\">pq</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">simp</span>\n<span class=\"k\">qed</span>\n\n<span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"kp\">assumes</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">P</span>\n<span class=\"w\">  </span><span class=\"kp\">and</span><span class=\"w\"> </span><span class=\"n\">pq</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"P ⟹ Q\"</span>\n<span class=\"w\">  </span><span class=\"kp\">and</span><span class=\"w\"> </span><span class=\"kt\">pr</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"P ⟹ R\"</span>\n<span class=\"w\">  </span><span class=\"kp\">and</span><span class=\"w\"> </span><span class=\"n\">rqs</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"R ⟹ Q ⟹ S\"</span>\n<span class=\"w\">  </span><span class=\"kp\">and</span><span class=\"w\"> </span><span class=\"n\">st</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"S ⟹ T\"</span>\n<span class=\"kp\">shows</span><span class=\"w\"> </span><span class=\"n\">T</span>\n<span class=\"w\">  </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">subgoal_tac</span><span class=\"w\"> </span><span class=\"s\">\"S\"</span><span class=\"o\">)</span>\n<span class=\"w\">   </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">rule</span><span class=\"w\"> </span><span class=\"n\">st</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">assumption</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">subgoal_tac</span><span class=\"w\"> </span><span class=\"s\">\"R ∧ Q\"</span><span class=\"o\">)</span>\n<span class=\"w\">   </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">rule</span><span class=\"w\"> </span><span class=\"n\">rqs</span><span class=\"o\">)</span>\n<span class=\"w\">    </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">erule</span><span class=\"w\"> </span><span class=\"n\">conjE</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">assumption</span><span class=\"o\">)</span>\n<span class=\"w\">   </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">erule</span><span class=\"w\"> </span><span class=\"n\">conjE</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">assumption</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">rule</span><span class=\"w\"> </span><span class=\"n\">conjI</span><span class=\"o\">)</span>\n<span class=\"w\">   </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">rule</span><span class=\"w\"> </span><span class=\"kt\">pr</span><span class=\"o\">)</span>\n<span class=\"w\">   </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">rule</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">rule</span><span class=\"w\"> </span><span class=\"n\">pq</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">rule</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 547795523,
        "sender_full_name": "David Wang",
        "timestamp": 1761765536
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"655321\">David Wang</span> <a href=\"#narrow/channel/238552-Beginner-Questions/topic/Rewrting.20.60subgoal_tac.60.20in.20Isar/near/547795523\">said</a>:</p>\n<blockquote>\n<p>I don't know exactly how subgoal tac works, but this looks like something you could do with presume:</p>\n<p><div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"kp\">assumes</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">P</span>\n<span class=\"w\">  </span><span class=\"kp\">and</span><span class=\"w\"> </span><span class=\"n\">pq</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"P ⟹ Q\"</span>\n<span class=\"w\">  </span><span class=\"kp\">and</span><span class=\"w\"> </span><span class=\"kt\">pr</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"P ⟹ R\"</span>\n<span class=\"w\">  </span><span class=\"kp\">and</span><span class=\"w\"> </span><span class=\"n\">rqs</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"R ⟹ Q ⟹ S\"</span>\n<span class=\"w\">  </span><span class=\"kp\">and</span><span class=\"w\"> </span><span class=\"n\">st</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"S ⟹ T\"</span>\n<span class=\"kp\">shows</span><span class=\"w\"> </span><span class=\"n\">T</span>\n<span class=\"k\">proof</span><span class=\"w\"> </span><span class=\"o\">-</span>\n<span class=\"w\">  </span><span class=\"k\">presume</span><span class=\"w\"> </span><span class=\"n\">S</span>\n<span class=\"w\">  </span><span class=\"k\">thus</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"w\"> </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">st</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">simp</span>\n<span class=\"k\">next</span>\n<span class=\"w\">  </span><span class=\"k\">presume</span><span class=\"w\"> </span><span class=\"s\">\"R ∧ Q\"</span>\n<span class=\"w\">  </span><span class=\"k\">thus</span><span class=\"w\"> </span><span class=\"n\">S</span><span class=\"w\"> </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">rqs</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">simp</span>\n<span class=\"k\">next</span>\n<span class=\"w\">  </span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"s\">\"R ∧ Q\"</span><span class=\"w\"> </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"kt\">pr</span><span class=\"w\"> </span><span class=\"n\">pq</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">simp</span>\n<span class=\"k\">qed</span>\n\n<span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"kp\">assumes</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">P</span>\n<span class=\"w\">  </span><span class=\"kp\">and</span><span class=\"w\"> </span><span class=\"n\">pq</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"P ⟹ Q\"</span>\n<span class=\"w\">  </span><span class=\"kp\">and</span><span class=\"w\"> </span><span class=\"kt\">pr</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"P ⟹ R\"</span>\n<span class=\"w\">  </span><span class=\"kp\">and</span><span class=\"w\"> </span><span class=\"n\">rqs</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"R ⟹ Q ⟹ S\"</span>\n<span class=\"w\">  </span><span class=\"kp\">and</span><span class=\"w\"> </span><span class=\"n\">st</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"S ⟹ T\"</span>\n<span class=\"kp\">shows</span><span class=\"w\"> </span><span class=\"n\">T</span>\n<span class=\"w\">  </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">subgoal_tac</span><span class=\"w\"> </span><span class=\"s\">\"S\"</span><span class=\"o\">)</span>\n<span class=\"w\">   </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">rule</span><span class=\"w\"> </span><span class=\"n\">st</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">assumption</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">subgoal_tac</span><span class=\"w\"> </span><span class=\"s\">\"R ∧ Q\"</span><span class=\"o\">)</span>\n<span class=\"w\">   </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">rule</span><span class=\"w\"> </span><span class=\"n\">rqs</span><span class=\"o\">)</span>\n<span class=\"w\">    </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">erule</span><span class=\"w\"> </span><span class=\"n\">conjE</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">assumption</span><span class=\"o\">)</span>\n<span class=\"w\">   </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">erule</span><span class=\"w\"> </span><span class=\"n\">conjE</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">assumption</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">rule</span><span class=\"w\"> </span><span class=\"n\">conjI</span><span class=\"o\">)</span>\n<span class=\"w\">   </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">rule</span><span class=\"w\"> </span><span class=\"kt\">pr</span><span class=\"o\">)</span>\n<span class=\"w\">   </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">rule</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">rule</span><span class=\"w\"> </span><span class=\"n\">pq</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">rule</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"o\">)</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>this looks nice! thanks</p>",
        "id": 547839421,
        "sender_full_name": "ws",
        "timestamp": 1761788237
    }
]