[
    {
        "content": "<p>Is it possible to get a list of all theorems in my context having a certain attribute? For instance <code>[simp]</code> or <code>[transfer_rule]</code>.</p>",
        "id": 389059811,
        "sender_full_name": "Artem Khovanov",
        "timestamp": 1693865693
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">lemmas</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"n\">d</span><span class=\"w\"> </span><span class=\"n\">e</span>\n</code></pre></div>",
        "id": 389107661,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1693891776
    },
    {
        "content": "<p>or multiple labels:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">lemmas</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">transfer_rule</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"n\">d</span><span class=\"w\"> </span><span class=\"n\">e</span>\n</code></pre></div>",
        "id": 389107782,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1693891821
    },
    {
        "content": "<p>I think Mathias might have misread the question and explained how you can apply attributes to multiple theorems.</p>\n<p>You cannot search for theorems that got applied to an arbitrary attribute because, in general, an attribute is just a function <code>context * thm -&gt; context * thm</code> (reference to <a href=\"https://isabelle.in.tum.de/doc/implementation.pdf#section.7.3\">implementation manual</a>).<br>\nYou can ctrl+click on the attribute and, most of the time, you will end up in an ML module that also exposes a function returning the theorems applied to the attribute in question.<br>\nHere are the relevant functions for <code>simp</code> and <code>transfer_rule</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">ML</span><span class=\"s\">‹</span>\n<span class=\"s\">  val simps = simpset_of @{context} |&gt; dest_simps</span>\n<span class=\"s\">  val transfers = Transfer.get_transfer_raw @{context}</span>\n<span class=\"s\">›</span>\n</code></pre></div>",
        "id": 389120981,
        "sender_full_name": "Kevin Kappelmann",
        "timestamp": 1693898100
    },
    {
        "content": "<p>ah yeah I misread sorry</p>",
        "id": 389121173,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1693898170
    },
    {
        "content": "<p>One addition: newer attributes are usually declared with <code>named_theorems</code> and  you can view then like normal theorems <code>thm no_atp</code></p>",
        "id": 389121605,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1693898396
    },
    {
        "content": "<p>but this does not work for simp and transfer</p>",
        "id": 389121671,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1693898407
    },
    {
        "content": "<p>at least for simp you need some transformations on the theorems, so it is not only about declaring the theorem, but also massaging it in the right form</p>",
        "id": 389121765,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1693898456
    },
    {
        "content": "<p>Ah OK, yeah I see, not being able to search by attribute makes sense.</p>",
        "id": 389188454,
        "sender_full_name": "Artem Khovanov",
        "timestamp": 1693920078
    }
]