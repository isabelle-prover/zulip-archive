[
    {
        "content": "<p>I'm trying to show that each item of some datatype lies in 3 of the subsets in a list of subsets of that datatype:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">theory</span><span class=\"w\"> </span><span class=\"n\">test</span>\n<span class=\"w\">  </span><span class=\"kp\">imports</span><span class=\"w\"> </span><span class=\"n\">Main</span>\n<span class=\"k\">begin</span>\n<span class=\"k\">datatype</span><span class=\"w\"> </span><span class=\"n\">pointD</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Hd</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Ad</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Bd</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Cd</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Dd</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Ed</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Fd</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Pd</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Qd</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">Rd</span>\n\n<span class=\"k\">definition</span><span class=\"w\"> </span><span class=\"n\">LinesD</span><span class=\"o\">::</span><span class=\"s\">\"pointD set set\"</span><span class=\"w\">  </span><span class=\"kp\">where</span>\n<span class=\"w\">  </span><span class=\"s\">\"LinesD ={{Ad,Bd, Pd}, {Bd, Cd,Rd}, {Cd, Ad, Qd}, {Dd, Ed, Pd}, {Ed, Fd, Rd}, {Fd, Dd, Qd},</span>\n<span class=\"s\">            {Hd, Ad, Dd}, {Hd, Bd, Ed}, {Hd, Cd, Fd}, {Pd, Qd, Rd}}\"</span>\n\n<span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">desargues_three_lines</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"c\">(* every pt lies on 3 lines *)</span>\n<span class=\"w\">  </span><span class=\"kp\">fixes</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"o\">::</span><span class=\"s\">\"pointD\"</span>\n<span class=\"w\">  </span><span class=\"kp\">assumes</span><span class=\"w\"> </span><span class=\"s\">\"X = Ad\"</span><span class=\"w\"> </span><span class=\"c\">(* an extreme case...can we prove this even with X known *)</span>\n<span class=\"w\">  </span><span class=\"kp\">shows</span><span class=\"w\"> </span><span class=\"s\">\"∃ l m n . distinct[l, m, n] ∧</span>\n<span class=\"s\">   X ∈ l ∧  X ∈ m ∧  X ∈ n ∧</span>\n<span class=\"s\">   l ∈ LinesD ∧ m ∈ LinesD ∧ n ∈ LinesD\"</span>\n<span class=\"w\">  </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">LinesD_def</span><span class=\"w\"> </span><span class=\"n\">pointD.exhaust</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"kt\">sledgehammer</span>\n<span class=\"k\">end</span>\n</code></pre></div>\n<p>This claim seems completely evident to me, but sledgehammer is getting nowhere. As you can see, I've tried to reduce the problem by a factor of ten and simple show that the point <code>Ad</code> lies in three of the \"Lines\"; even this seems to be too much. (The lines are right there: <code>{Ad,Bd, Pd}, {Cd, Ad, Qd}, {Hd, Ad, Dd}</code>, but apparently I don't have the right magic to make it easy for Isabelle to see this.) </p>\n<p>Of course, I'd like to show the 10-times-harder claim that leaves out that assumption. </p>\n<p>Can someone nudge me in the right direction? (BTW, I'm trying to do this with Isar rather than apply-style proofs, although I'm not sure how I'd do it even if I <em>were</em> using <code>apply</code>.)</p>",
        "id": 540856979,
        "sender_full_name": "John  Hughes",
        "timestamp": 1758560534
    },
    {
        "content": "<p>Ahh my favorite kind of proofs: the useless proofs where you fight the simplifier and auto to do the right thing. I managed to get it a 40s (!) one-liner:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">desargues_three_lines</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"c\">(* every pt lies on 3 lines *)</span>\n<span class=\"w\">  </span><span class=\"kp\">fixes</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"o\">::</span><span class=\"s\">\"pointD\"</span>\n<span class=\"w\">  </span><span class=\"kp\">shows</span><span class=\"w\"> </span><span class=\"s\">\"∃ l m n . distinct[l, m, n] ∧</span>\n<span class=\"s\">   X ∈ l ∧  X ∈ m ∧  X ∈ n ∧</span>\n<span class=\"s\">   l ∈ LinesD ∧ m ∈ LinesD ∧ n ∈ LinesD\"</span>\n<span class=\"k\">proof</span><span class=\"w\"> </span><span class=\"o\">-</span>\n<span class=\"w\">  </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]:</span>\n<span class=\"w\">    </span><span class=\"s\">‹{Hd, Cd, Fd} ≠ {Hd, Bd, Ed}›</span>\n<span class=\"w\">    </span><span class=\"s\">‹{Hd, Cd, Fd} ≠ {Hd, Ad, Dd}›</span>\n<span class=\"w\">    </span><span class=\"s\">‹{Hd, Bd, Ed} ≠ {Hd, Ad, Dd}›</span>\n<span class=\"w\">    </span><span class=\"s\">‹{Hd, Ad, Dd} ≠ {Cd, Ad, Qd}›</span>\n<span class=\"w\">    </span><span class=\"s\">‹{Hd, Ad, Dd} ≠ {Ad, Bd, Pd}›</span>\n<span class=\"w\">    </span><span class=\"s\">‹{Cd, Ad, Qd} ≠ {Ad, Bd, Pd}›</span>\n<span class=\"w\">    </span><span class=\"s\">‹ {Hd, Bd, Ed} ≠ {Bd, Cd, Rd}›</span>\n<span class=\"w\">    </span><span class=\"s\">‹{Hd, Bd, Ed} ≠ {Ad, Bd, Pd}›</span>\n<span class=\"w\">    </span><span class=\"s\">‹{Bd, Cd, Rd} ≠ {Ad, Bd, Pd}›</span>\n<span class=\"w\">    </span><span class=\"s\">‹{Hd, Cd, Fd} ≠ {Cd, Ad, Qd}›</span>\n<span class=\"w\">    </span><span class=\"s\">‹{Hd, Cd, Fd} ≠ {Bd, Cd, Rd}›</span>\n<span class=\"w\">    </span><span class=\"s\">‹{Cd, Ad, Qd} ≠ {Bd, Cd, Rd}›</span>\n<span class=\"w\">    </span><span class=\"s\">‹{Hd, Ad, Dd} ≠ {Fd, Dd, Qd}›</span>\n<span class=\"w\">    </span><span class=\"s\">‹{Hd, Ad, Dd} ≠ {Dd, Ed, Pd}›</span>\n<span class=\"w\">    </span><span class=\"s\">‹{Fd, Dd, Qd} ≠ {Dd, Ed, Pd}›</span>\n<span class=\"w\">    </span><span class=\"s\">‹{Hd, Bd, Ed} ≠ {Ed, Fd, Rd}›</span>\n<span class=\"w\">    </span><span class=\"s\">‹{Hd, Bd, Ed} ≠ {Dd, Ed, Pd}›</span>\n<span class=\"w\">    </span><span class=\"s\">‹{Ed, Fd, Rd} ≠ {Dd, Ed, Pd}›</span>\n<span class=\"w\">    </span><span class=\"s\">‹{Hd, Cd, Fd} ≠ {Fd, Dd, Qd}›</span>\n<span class=\"w\">    </span><span class=\"s\">‹{Hd, Cd, Fd} ≠ {Ed, Fd, Rd}›</span>\n<span class=\"w\">    </span><span class=\"s\">‹{Fd, Dd, Qd} ≠ {Ed, Fd, Rd}›</span>\n<span class=\"w\">    </span><span class=\"s\">‹{Pd, Qd, Rd} ≠ {Dd, Ed, Pd}›</span>\n<span class=\"w\">    </span><span class=\"s\">‹{Pd, Qd, Rd} ≠ {Ad, Bd, Pd}›</span>\n<span class=\"w\">    </span><span class=\"s\">‹{Dd, Ed, Pd} ≠ {Ad, Bd, Pd}›</span>\n<span class=\"w\">    </span><span class=\"s\">‹{Pd, Qd, Rd} ≠ {Fd, Dd, Qd}›</span>\n<span class=\"w\">    </span><span class=\"s\">‹{Pd, Qd, Rd} ≠ {Cd, Ad, Qd}›</span>\n<span class=\"w\">    </span><span class=\"s\">‹{Fd, Dd, Qd} ≠ {Cd, Ad, Qd}›</span>\n<span class=\"w\">    </span><span class=\"s\">‹{Pd, Qd, Rd} ≠ {Ed, Fd, Rd}›</span>\n<span class=\"w\">    </span><span class=\"s\">‹{Pd, Qd, Rd} ≠ {Bd, Cd, Rd}›</span>\n<span class=\"w\">    </span><span class=\"s\">‹{Ed, Fd, Rd} ≠ {Bd, Cd, Rd}›</span>\n<span class=\"w\">    </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">auto</span>\n<span class=\"w\">  </span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">thesis</span>\n<span class=\"w\">    </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">cases</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"o\">)</span>\n<span class=\"w\">     </span><span class=\"o\">(</span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"n\">only</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">insert_iff</span><span class=\"w\"> </span><span class=\"n\">empty_iff</span><span class=\"w\"> </span><span class=\"n\">LinesD_def</span><span class=\"w\"> </span><span class=\"n\">conj_disj_distribL</span><span class=\"w\"> </span><span class=\"n\">conj_disj_distribR</span><span class=\"w\"> </span><span class=\"n\">ex_disj_distrib</span>\n<span class=\"w\">          </span><span class=\"n\">simp_thms</span><span class=\"o\">(</span><span class=\"n\">39</span><span class=\"o\">)</span><span class=\"n\">;</span><span class=\"w\"> </span><span class=\"n\">simp;</span><span class=\"w\"> </span><span class=\"n\">fail</span><span class=\"o\">)+</span>\n<span class=\"k\">qed</span>\n</code></pre></div>",
        "id": 540863740,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1758563196
    },
    {
        "content": "<p>If you are not afraid of using normalization oracles:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">desargues_three_lines</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"c\">(* every pt lies on 3 lines *)</span>\n<span class=\"w\">  </span><span class=\"kp\">fixes</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"n\">pointD</span>\n<span class=\"w\">  </span><span class=\"kp\">shows</span><span class=\"w\"> </span><span class=\"s\">\"∃(l, m, n) ∈ LinesD × LinesD × LinesD. distinct [l, m, n] ∧ X ∈ l ∧  X ∈ m ∧  X ∈ n\"</span>\n<span class=\"w\">  </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">cases</span><span class=\"w\"> </span><span class=\"n\">X;</span><span class=\"w\"> </span><span class=\"n\">hypsubst</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"n\">normalization</span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"c\">(*or eval*)</span>\n<span class=\"w\">  </span><span class=\"k\">done</span>\n</code></pre></div>",
        "id": 540876723,
        "sender_full_name": "Kevin Kappelmann",
        "timestamp": 1758567691
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"233198\">Mathias Fleury</span> <a href=\"#narrow/channel/238552-Beginner-Questions/topic/Set.20containment/near/540863740\">said</a>:</p>\n<blockquote>\n<p>Ahh my favorite kind of proofs: the useless proofs where you fight the simplifier and auto to do the right thing. I managed to get it a 40s (!) one-liner:<br>\n...</p>\n</blockquote>\n<p>Now I'm thankful that the Desargues configuration is the most complex I need to discuss. :) I'm astounded that the first fact -- that all those triples are distinct -- needs to be supplied to <code>simp</code>.  The  <code>by (cases X) ...</code> proof uses a structure that I've never seen . In my limited worldview, <code>by</code> is followed by a prover-name (like <code>metis</code> or <code>simp</code> or <code>auto</code> and possibly some arguments. I guess that the <code>(simp only:...)</code> is an instance of that. The <code>+</code> at the end presumably means \"do it over and over\" --- that's nice. But the <code>(by cases)</code> is something I'd expect to see only in the form</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">thesis</span>\n<span class=\"k\">proof</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">cases</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"o\">)</span>\n<span class=\"w\">   </span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">thesis</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"n\">only</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"ow\">...</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>I guess I'm headed back to the reference manual to learn a few more constructs. Thanks for both (1) pushing me towards learning a few new things and (2) confirming that this is really just as annoying as it appeared to be!</p>",
        "id": 540882309,
        "sender_full_name": "John  Hughes",
        "timestamp": 1758569877
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"233154\">Kevin Kappelmann</span> <a href=\"#narrow/channel/238552-Beginner-Questions/topic/Set.20containment/near/540876723\">said</a>:</p>\n<blockquote>\n<p><div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">desargues_three_lines</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"c\">(* every pt lies on 3 lines *)</span>\n<span class=\"w\">  </span><span class=\"kp\">fixes</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"n\">pointD</span>\n<span class=\"w\">  </span><span class=\"kp\">shows</span><span class=\"w\"> </span><span class=\"s\">\"∃(l, m, n) ∈ LinesD × LinesD × LinesD. distinct [l, m, n] ∧ X ∈ l ∧  X ∈ m ∧  X ∈ n\"</span>\n<span class=\"w\">  </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">cases</span><span class=\"w\"> </span><span class=\"n\">X;</span><span class=\"w\"> </span><span class=\"n\">hypsubst</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"n\">normalization</span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"c\">(*or eval*)</span>\n<span class=\"w\">  </span><span class=\"k\">done</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>I've managed to rewrite this in Isar without the slightest understanding of what I've done, by patching together your answer with Mathias's:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">proof</span><span class=\"w\"> </span><span class=\"o\">-</span>\n<span class=\"w\">  </span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">thesis</span>\n<span class=\"w\">    </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">cases</span><span class=\"w\"> </span><span class=\"n\">X;</span><span class=\"w\"> </span><span class=\"n\">hypsubst;</span><span class=\"w\"> </span><span class=\"n\">normalization</span><span class=\"o\">+)</span>\n<span class=\"k\">end</span>\n</code></pre></div>\n<p>Now I just have to go decode whatever it is I've managed to do! Thank you!</p>",
        "id": 540883943,
        "sender_full_name": "John  Hughes",
        "timestamp": 1758570509
    }
]