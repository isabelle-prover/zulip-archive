[
    {
        "content": "<p>(I suspect it would be not possible since I was taught recently that Isar is designed exactly for making the proof readable, whereas tactic application will generate something which are only visible in the interactive window. So if it is possible, you can tell me directly).</p>\n<p>I find that it is not possible to write a \"have\" after the tactic application. Like this:<br>\n<a href=\"/user_uploads/14278/IRr_NKqyRA5obOI7RY3BJIEa/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/14278/IRr_NKqyRA5obOI7RY3BJIEa/image.png\" title=\"image.png\"><img data-original-dimensions=\"1840x1148\" src=\"/user_uploads/thumbnail/14278/IRr_NKqyRA5obOI7RY3BJIEa/image.png/840x560.webp\"></a></div>",
        "id": 470504620,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1726475288
    },
    {
        "content": "<p>Without even knowing the definitions it would be clear what I am trying to do: The goal is <code>phi in P</code>, and the assumptions says <code>A x -&gt; phi in x</code>, so I want to reduce the goal into A P.</p>",
        "id": 470505308,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1726475419
    },
    {
        "content": "<p>For HOL4 users this is <code>first_x_assum irule</code> (or <code>first_assum irule</code> if you want to keep your assumptions).</p>",
        "id": 470505634,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1726475482
    },
    {
        "content": "<p>Such a thing does not obviously exist. So I naively tried to state the <code>A P</code>, and MP with it with <code>A P -&gt; phi in P</code>.</p>",
        "id": 470506117,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1726475580
    },
    {
        "content": "<p>Which seems not allowed. How can I carry out such a step here?</p>",
        "id": 470506371,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1726475629
    },
    {
        "content": "<p>instead of <code>show ?thesis using 7</code> use <code>show ?thesis apply (rule 7)</code>?</p>",
        "id": 470509629,
        "sender_full_name": "Yong Kiam",
        "timestamp": 1726476247
    },
    {
        "content": "<p><a href=\"/user_uploads/14278/giMhBI_fjZ_y8c1cDVn5MsFo/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/14278/giMhBI_fjZ_y8c1cDVn5MsFo/image.png\" title=\"image.png\"><img data-original-dimensions=\"1840x1148\" src=\"/user_uploads/thumbnail/14278/giMhBI_fjZ_y8c1cDVn5MsFo/image.png/840x560.webp\"></a></div>",
        "id": 470509914,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1726476315
    },
    {
        "content": "<p>It is not accepted. What would rule 7 be expected to be? It is not an implication itself.</p>",
        "id": 470510105,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1726476354
    },
    {
        "content": "<p>ah wait I didn't read <code>7</code> carefully... you need to massage it into an implication</p>",
        "id": 470510172,
        "sender_full_name": "Yong Kiam",
        "timestamp": 1726476363
    },
    {
        "content": "<p>Any canonical way to do this?</p>",
        "id": 470510301,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1726476388
    },
    {
        "content": "<p>try <code>7[unfolded NMLG_def,rule_format]</code>?</p>",
        "id": 470510364,
        "sender_full_name": "Yong Kiam",
        "timestamp": 1726476403
    },
    {
        "content": "<p><a href=\"/user_uploads/14278/U0XjXteYiq_CCswaQCHi3PRf/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/14278/U0XjXteYiq_CCswaQCHi3PRf/image.png\" title=\"image.png\"><img data-original-dimensions=\"1840x1264\" src=\"/user_uploads/thumbnail/14278/U0XjXteYiq_CCswaQCHi3PRf/image.png/840x560.webp\"></a></div>",
        "id": 470510571,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1726476455
    },
    {
        "content": "<p><a href=\"/user_uploads/14278/-gIhoiJHhntRJUxW6lW-8N12/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/14278/-gIhoiJHhntRJUxW6lW-8N12/image.png\" title=\"image.png\"><img data-original-dimensions=\"1840x814\" src=\"/user_uploads/thumbnail/14278/-gIhoiJHhntRJUxW6lW-8N12/image.png/840x560.webp\"></a></div>",
        "id": 470510786,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1726476497
    },
    {
        "content": "<p>add <code>simplified</code>?</p>",
        "id": 470510850,
        "sender_full_name": "Yong Kiam",
        "timestamp": 1726476513
    },
    {
        "content": "<p>So it does the unfolding, but maybe failed to transform it into an implication?</p>",
        "id": 470510863,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1726476515
    },
    {
        "content": "<p>add <code>simplified</code> before <code>rule_format</code> I mean</p>",
        "id": 470510981,
        "sender_full_name": "Yong Kiam",
        "timestamp": 1726476547
    },
    {
        "content": "<p><a href=\"/user_uploads/14278/ca4GEDgqUHe9z34bw0ifm-Li/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/14278/ca4GEDgqUHe9z34bw0ifm-Li/image.png\" title=\"image.png\"><img data-original-dimensions=\"1840x814\" src=\"/user_uploads/thumbnail/14278/ca4GEDgqUHe9z34bw0ifm-Li/image.png/840x560.webp\"></a></div>",
        "id": 470511267,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1726476617
    },
    {
        "content": "<p>That works. And I see why it should be before rule_format.</p>",
        "id": 470511349,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1726476632
    },
    {
        "content": "<p>great, I'm not sure whether this would be the recommended way of doing things though...</p>",
        "id": 470511469,
        "sender_full_name": "Yong Kiam",
        "timestamp": 1726476651
    },
    {
        "content": "<p>If it is after rule_format then it gives me a HOL quantification instead of a schematic variable.</p>",
        "id": 470511501,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1726476655
    },
    {
        "content": "<p>So what would be the recommendation?</p>",
        "id": 470511596,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1726476671
    },
    {
        "content": "<p>I am advised to get used to Isar's style.</p>",
        "id": 470511751,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1726476693
    },
    {
        "content": "<p>write the expanded argument in Isar, probably</p>",
        "id": 470511752,
        "sender_full_name": "Yong Kiam",
        "timestamp": 1726476693
    },
    {
        "content": "<p>Let me try if I can do it in an efficient way.</p>",
        "id": 470512019,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1726476736
    },
    {
        "content": "<p>i.e., before <code>show ?thesis</code> write <code>have \"is_NML P\" ... have \"G \\subset P\" ...</code></p>",
        "id": 470512059,
        "sender_full_name": "Yong Kiam",
        "timestamp": 1726476744
    },
    {
        "content": "<p>then use sledgehammer at your <code>show ?thesis</code> it'll figure that out</p>",
        "id": 470512160,
        "sender_full_name": "Yong Kiam",
        "timestamp": 1726476760
    },
    {
        "content": "<p>Let me try if sledgehammer can do it.</p>",
        "id": 470512381,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1726476798
    },
    {
        "content": "<p><a href=\"/user_uploads/14278/UO6gH0GL9MyLu1nM5etv5S5U/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/14278/UO6gH0GL9MyLu1nM5etv5S5U/image.png\" title=\"image.png\"><img data-original-dimensions=\"1840x992\" src=\"/user_uploads/thumbnail/14278/UO6gH0GL9MyLu1nM5etv5S5U/image.png/840x560.webp\"></a></div>",
        "id": 470513124,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1726476937
    },
    {
        "content": "<p>Wow it does. Thank you!</p>",
        "id": 470513160,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1726476945
    },
    {
        "content": "<p>So I have trouble proving \"is_NML P\".<br>\n<a href=\"/user_uploads/14278/zeBMjazskcykZW6f4jraXrEi/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/14278/zeBMjazskcykZW6f4jraXrEi/image.png\" title=\"image.png\"><img data-original-dimensions=\"1840x1714\" src=\"/user_uploads/thumbnail/14278/zeBMjazskcykZW6f4jraXrEi/image.png/840x560.webp\"></a></div>",
        "id": 470522707,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1726478583
    },
    {
        "content": "<p>After unfolding the definitions I expect simp with assumption 1:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"s\">\"(⋀form. ptaut form ⟹ form ∈ P)\"</span>\n</code></pre></div>\n<p>to kill the first conjunct of the goal:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">proof</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">prove</span><span class=\"o\">)</span>\n<span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">this</span><span class=\"o\">:</span>\n<span class=\"w\">    </span><span class=\"n\">ptaut</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">form</span><span class=\"w\"> </span><span class=\"n\">⟹</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">form</span><span class=\"w\"> </span><span class=\"n\">∈</span><span class=\"w\"> </span><span class=\"n\">P</span>\n<span class=\"w\">    </span><span class=\"n\">BOX</span><span class=\"w\"> </span><span class=\"o\">(?</span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"n\">→</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">q</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">→</span><span class=\"w\"> </span><span class=\"n\">BOX</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"n\">→</span><span class=\"w\"> </span><span class=\"n\">BOX</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">q</span><span class=\"w\"> </span><span class=\"n\">∈</span><span class=\"w\"> </span><span class=\"n\">P</span>\n<span class=\"w\">    </span><span class=\"n\">DIAM</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"n\">→</span><span class=\"w\"> </span><span class=\"n\">NOT</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">BOX</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">NOT</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">p</span><span class=\"o\">))</span><span class=\"w\"> </span><span class=\"n\">∈</span><span class=\"w\"> </span><span class=\"n\">P</span>\n<span class=\"w\">    </span><span class=\"o\">?</span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"n\">∈</span><span class=\"w\"> </span><span class=\"n\">P</span><span class=\"w\"> </span><span class=\"n\">⟹</span><span class=\"w\"> </span><span class=\"n\">BOX</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"n\">∈</span><span class=\"w\"> </span><span class=\"n\">P</span>\n<span class=\"w\">    </span><span class=\"n\">NOT</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">BOX</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">NOT</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">p</span><span class=\"o\">))</span><span class=\"w\"> </span><span class=\"n\">→</span><span class=\"w\"> </span><span class=\"n\">DIAM</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"n\">∈</span><span class=\"w\"> </span><span class=\"n\">P</span>\n<span class=\"w\">    </span><span class=\"o\">?</span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"n\">∈</span><span class=\"w\"> </span><span class=\"n\">P</span><span class=\"w\"> </span><span class=\"n\">⟶</span><span class=\"w\"> </span><span class=\"n\">subst</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"n\">∈</span><span class=\"w\"> </span><span class=\"n\">P</span>\n<span class=\"w\">    </span><span class=\"o\">?</span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"n\">→</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">B</span><span class=\"w\"> </span><span class=\"n\">∈</span><span class=\"w\"> </span><span class=\"n\">P</span><span class=\"w\"> </span><span class=\"n\">∧</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"n\">∈</span><span class=\"w\"> </span><span class=\"n\">P</span><span class=\"w\"> </span><span class=\"n\">⟹</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">B</span><span class=\"w\"> </span><span class=\"n\">∈</span><span class=\"w\"> </span><span class=\"n\">P</span>\n\n<span class=\"n\">goal</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">1</span><span class=\"w\"> </span><span class=\"n\">subgoal</span><span class=\"o\">):</span>\n<span class=\"w\"> </span><span class=\"n\">1.</span><span class=\"w\"> </span><span class=\"n\">∀A</span><span class=\"w\"> </span><span class=\"n\">B</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"n\">q</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"n\">form.</span>\n<span class=\"w\">       </span><span class=\"n\">ptaut</span><span class=\"w\"> </span><span class=\"n\">form</span><span class=\"w\"> </span><span class=\"n\">⟶</span>\n<span class=\"w\">       </span><span class=\"n\">form</span><span class=\"w\"> </span><span class=\"n\">∈</span><span class=\"w\"> </span><span class=\"n\">P</span><span class=\"w\"> </span><span class=\"n\">∧</span>\n<span class=\"w\">       </span><span class=\"n\">BOX</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"n\">→</span><span class=\"w\"> </span><span class=\"n\">q</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">→</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">BOX</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"n\">→</span><span class=\"w\"> </span><span class=\"n\">BOX</span><span class=\"w\"> </span><span class=\"n\">q</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">∈</span><span class=\"w\"> </span><span class=\"n\">P</span><span class=\"w\"> </span><span class=\"n\">∧</span>\n<span class=\"w\">       </span><span class=\"n\">DIAM</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"n\">→</span><span class=\"w\"> </span><span class=\"n\">NOT</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">BOX</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">NOT</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"o\">))</span><span class=\"w\"> </span><span class=\"n\">∈</span><span class=\"w\"> </span><span class=\"n\">P</span><span class=\"w\"> </span><span class=\"n\">∧</span>\n<span class=\"w\">       </span><span class=\"n\">NOT</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">BOX</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">NOT</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"o\">))</span><span class=\"w\"> </span><span class=\"n\">→</span><span class=\"w\"> </span><span class=\"n\">DIAM</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"n\">∈</span><span class=\"w\"> </span><span class=\"n\">P</span><span class=\"w\"> </span><span class=\"n\">∧</span>\n<span class=\"w\">       </span><span class=\"o\">(</span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"n\">∈</span><span class=\"w\"> </span><span class=\"n\">P</span><span class=\"w\"> </span><span class=\"n\">⟶</span><span class=\"w\"> </span><span class=\"n\">subst</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"n\">∈</span><span class=\"w\"> </span><span class=\"n\">P</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">∧</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"n\">∈</span><span class=\"w\"> </span><span class=\"n\">P</span><span class=\"w\"> </span><span class=\"n\">⟶</span><span class=\"w\"> </span><span class=\"n\">BOX</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"n\">∈</span><span class=\"w\"> </span><span class=\"n\">P</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">∧</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"n\">→</span><span class=\"w\"> </span><span class=\"n\">B</span><span class=\"w\"> </span><span class=\"n\">∈</span><span class=\"w\"> </span><span class=\"n\">P</span><span class=\"w\"> </span><span class=\"n\">∧</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"n\">∈</span><span class=\"w\"> </span><span class=\"n\">P</span><span class=\"w\"> </span><span class=\"n\">⟶</span><span class=\"w\"> </span><span class=\"n\">B</span><span class=\"w\"> </span><span class=\"n\">∈</span><span class=\"w\"> </span><span class=\"n\">P</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 470523290,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1726478704
    },
    {
        "content": "<p>But it is always purple. Is this behaviour expected?</p>",
        "id": 470523344,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1726478716
    },
    {
        "content": "<p>Oh I may miss a (). Let me try.</p>",
        "id": 470523706,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1726478793
    },
    {
        "content": "<p>Does not work. I am still in trouble.</p>",
        "id": 470523970,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1726478860
    },
    {
        "content": "<p>purple for a long time probably means it is looping... you have to be careful with what you're passing <code>simp</code></p>",
        "id": 470657272,
        "sender_full_name": "Yong Kiam",
        "timestamp": 1726502616
    },
    {
        "content": "<p>As mentioned in the prog-prove:</p>\n<blockquote>\n<p>Simplification can run forever, for example if both f x = g x and g x = f x are simplification rules. It is the user’s responsibility not to include simplification rules that can lead to nontermination, either on their own or in combination with other simplification rules. The right-hand side of a simplification rule should  lways be “simpler” than the left-hand side — in some sense. But since termination is undecidable, such a check cannot be automated completely and Isabelle makes little attempt to detect nontermination. When conditional simplification rules are applied, their preconditions are proved first. Hence all preconditions need to be simpler than the left-hand side of the conclusion. </p>\n</blockquote>",
        "id": 470657822,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1726502719
    },
    {
        "content": "<p>Not all your rules fulfill that</p>",
        "id": 470658003,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1726502757
    },
    {
        "content": "<p>I do not see if there is any chance to have a loop here. I will spend some time try to debug.</p>",
        "id": 470674869,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1726505874
    },
    {
        "content": "<p>As for simp, I do not expect it to simp equality here. I give it an implication. And I expect the normalization to turn it into <br>\n<code>A &lt;=&gt; True</code>.  Here <code>A</code> will be the first conjunct in the goal, namely:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"n\">ptaut</span><span class=\"w\"> </span><span class=\"n\">form</span><span class=\"w\"> </span><span class=\"n\">⟶</span><span class=\"w\"> </span><span class=\"n\">form</span><span class=\"w\"> </span><span class=\"n\">∈</span><span class=\"w\"> </span><span class=\"n\">P</span>\n</code></pre></div>\n<p>I added \"()\" around the above and still does not work.</p>",
        "id": 470675764,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1726506009
    },
    {
        "content": "<p>last rule of the assumption</p>",
        "id": 470675765,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1726506010
    },
    {
        "content": "<p>it is an exploding rule</p>",
        "id": 470676076,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1726506055
    },
    {
        "content": "<p>So do you mean, when it see <code>A ==&gt; B</code>, instead of turning it into <code>(A ==&gt; B) &lt;=&gt; True</code>, it trys to prove <code>A</code>, and want to use it as <code>A ==&gt; (B &lt;=&gt; True)</code> instead?</p>",
        "id": 470676322,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1726506101
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"754515\">Yiming Xu</span> <a href=\"#narrow/stream/238552-Beginner-Questions/topic/Setup.20subgoals.20after.20tactic.20application.20in.20Isar/near/470676322\">said</a>:</p>\n<blockquote>\n<p>So do you mean, when it see <code>A ==&gt; B</code>, instead of turning it into <code>(A ==&gt; B) &lt;=&gt; True</code>, it trys to prove <code>A</code>, and want to use it as <code>A ==&gt; (B &lt;=&gt; True)</code> instead?</p>\n</blockquote>\n<p>Yes</p>",
        "id": 470676582,
        "sender_full_name": "Lukas Stevens",
        "timestamp": 1726506142
    },
    {
        "content": "<p>…and that seems a lot more natural to me</p>",
        "id": 470676637,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1726506153
    },
    {
        "content": "<p>...Oh my.</p>",
        "id": 470676641,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1726506154
    },
    {
        "content": "<p>It would be different for A --&gt; B though. which is why you should never have that as simplification rule</p>",
        "id": 470676796,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1726506189
    },
    {
        "content": "<p>Okay, if I write <code>A--&gt;B</code>, instead of <code>A==&gt;B</code> instead?</p>",
        "id": 470676818,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1726506195
    },
    {
        "content": "<p>I am just about to ask it.</p>",
        "id": 470676866,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1726506204
    },
    {
        "content": "<p>I think you predicted my question...</p>",
        "id": 470676912,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1726506212
    },
    {
        "content": "<p>So I expect if I write <code>A--&gt;B</code> at HOL level, then it will simply turn it into <code>(A--&gt;B) \\equiv True</code>.</p>",
        "id": 470677380,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1726506295
    },
    {
        "content": "<p>Yes, except that most tactic will transform a goal like \"A --&gt; B\" into \"A ==&gt; B\". So a simp lemma like \"A--&gt;B\" is a very useless rule</p>",
        "id": 470677815,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1726506365
    },
    {
        "content": "<p>That means, the <code>A --&gt;B</code> in <code>A --&gt;B \\equiv True</code> would tend to be converted into <code>A ==&gt;B \\equiv True</code>before it get applied?</p>",
        "id": 470679367,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1726506625
    },
    {
        "content": "<p>No, only in the proof you are trying to prove</p>",
        "id": 470679443,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1726506644
    },
    {
        "content": "<p>I am not sure if I understand you. Do you mean the last assumption is a useless rule here in terms of automatic simplification?</p>",
        "id": 470679933,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1726506747
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"w\"> </span><span class=\"n\">5</span><span class=\"o\">:</span><span class=\"s\">\"(⋀ A B. (A → B) ∈ P ∧ A ∈ P ⟹ B ∈ P)\"</span>\n</code></pre></div>",
        "id": 470680020,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1726506771
    },
    {
        "content": "<p>This one is useless as a rule during the proof.</p>",
        "id": 470680081,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1726506787
    },
    {
        "content": "<p>ah no actually it does rewrite it before declaring it as simp</p>",
        "id": 470680370,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1726506846
    },
    {
        "content": "<p>I had forgotten that behavior</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span>\n<span class=\"w\">  </span><span class=\"kp\">assumes</span><span class=\"w\"> </span><span class=\"s\">\"A ⟶ B\"</span>\n<span class=\"w\">  </span><span class=\"kp\">shows</span><span class=\"w\"> </span><span class=\"s\">‹A ⟶ B›</span>\n<span class=\"w\">  </span><span class=\"n\">supply</span><span class=\"w\"> </span><span class=\"o\">[[</span><span class=\"n\">simp_trace</span><span class=\"o\">]]</span>\n<span class=\"w\">  </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"n\">add</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">assms</span><span class=\"o\">)</span>\n<span class=\"c\">(*</span>\n<span class=\"c\">[0]Adding rewrite rule \"local.assms\":</span>\n<span class=\"c\">A ⟹ B ≡ True</span>\n<span class=\"c\">*)</span>\n</code></pre></div>",
        "id": 470680596,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1726506888
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"754515\">Yiming Xu</span> <a href=\"#narrow/stream/238552-Beginner-Questions/topic/Setup.20subgoals.20after.20tactic.20application.20in.20Isar/near/470680020\">said</a>:</p>\n<blockquote>\n<p><div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"w\"> </span><span class=\"n\">5</span><span class=\"o\">:</span><span class=\"s\">\"(⋀ A B. (A → B) ∈ P ∧ A ∈ P ⟹ B ∈ P)\"</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>actually the simplifier can decide to guess a good A and try to instantiate it</p>",
        "id": 470680751,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1726506915
    },
    {
        "content": "<p>The \"-&gt;\" is not \"--&gt;\", this is an infix I declared for modal formula implication, I do not think it is making any attempt instantiating this.</p>",
        "id": 470681434,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1726507051
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"233198\">Mathias Fleury</span> <a href=\"#narrow/stream/238552-Beginner-Questions/topic/Setup.20subgoals.20after.20tactic.20application.20in.20Isar/near/470680596\">said</a>:</p>\n<blockquote>\n<p>I had forgotten that behavior</p>\n<p><div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span>\n<span class=\"w\">  </span><span class=\"kp\">assumes</span><span class=\"w\"> </span><span class=\"s\">\"A ⟶ B\"</span>\n<span class=\"w\">  </span><span class=\"kp\">shows</span><span class=\"w\"> </span><span class=\"s\">‹A ⟶ B›</span>\n<span class=\"w\">  </span><span class=\"n\">supply</span><span class=\"w\"> </span><span class=\"o\">[[</span><span class=\"n\">simp_trace</span><span class=\"o\">]]</span>\n<span class=\"w\">  </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"n\">add</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">assms</span><span class=\"o\">)</span>\n<span class=\"c\">(*</span>\n<span class=\"c\">[0]Adding rewrite rule \"local.assms\":</span>\n<span class=\"c\">A ⟹ B ≡ True</span>\n<span class=\"c\">*)</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Is meta implication/equiv left or right assoc?</p>",
        "id": 470681818,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1726507116
    },
    {
        "content": "<p>the not/box &lt;--&gt; diamond is also looping</p>",
        "id": 470681901,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1726507130
    },
    {
        "content": "<p>(rules 3 and 7)</p>",
        "id": 470682015,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1726507149
    },
    {
        "content": "<p>If you control-click on the ==&gt; you will find an <code>infixr</code> on that line. So right associative</p>",
        "id": 470682400,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1726507217
    },
    {
        "content": "<p>Means it is used as <code>A ==&gt; (B \\equiv T)</code> when being applied. Funny.</p>",
        "id": 470682835,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1726507307
    },
    {
        "content": "<p>I remember I read something relevant in prog-prove telling me to watch out the antecedent of the implication. I was confused.</p>",
        "id": 470683051,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1726507349
    },
    {
        "content": "<p>For me it makes a lot of sense: you use the condition to simplify the goal, and only have to prove the preconditions</p>",
        "id": 470683063,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1726507351
    },
    {
        "content": "<p>the other direction would make the solver much much weaker</p>",
        "id": 470683192,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1726507378
    },
    {
        "content": "<p>So Isabelle's is trying to make sure that every theorem added to simp when calling simp add is actually used? Otherwise the implications will just fail?</p>",
        "id": 470683422,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1726507433
    },
    {
        "content": "<p>So, for Isabelle, such an implication can be used only if we can prove the antecedent.</p>",
        "id": 470683831,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1726507508
    },
    {
        "content": "<p>HOL4 will just ignore a theorem added to simp if it cannot be useful for the goal. The user's responsibility is heavier here...</p>",
        "id": 470684091,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1726507557
    },
    {
        "content": "<p>no isabelle also ignores it</p>",
        "id": 470684208,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1726507572
    },
    {
        "content": "<p>but it applies rewrites only if there is no new assumptions</p>",
        "id": 470684372,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1726507606
    },
    {
        "content": "<p>Otherwise no rule like \"finite A ==&gt; ...\" would be possible</p>",
        "id": 470684479,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1726507627
    },
    {
        "content": "<p>But for an implication, when it is normalized, Isabelle will try to do the back-chain to maximal its attempt to discard at least amount of theorems once possible?</p>",
        "id": 470684697,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1726507668
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"233198\">Mathias Fleury</span> <a href=\"#narrow/stream/238552-Beginner-Questions/topic/Setup.20subgoals.20after.20tactic.20application.20in.20Isar/near/470684479\">said</a>:</p>\n<blockquote>\n<p>Otherwise no rule like \"finite A ==&gt; ...\" would be possible</p>\n</blockquote>\n<p>I do not understand this example, could you please elaborate a bit on this?</p>",
        "id": 470684877,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1726507698
    },
    {
        "content": "<p>I am not sure we are talking about the same thing:<br>\n   - rewrite only happens if all the assumptions can be proved. simp will not pick one and create a new goal that you cannot prove (like my <code>finite A ==&gt; ...</code> example: the simplifier will never ask you to prove <code>finite A</code>. Either it can do it or it will not simplify)</p>\n<p>- when trying proving an assumption, the simplifier will call itself recursively, potentially looping</p>",
        "id": 470685537,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1726507872
    },
    {
        "content": "<p>I see. Your first point here explains in which case should an implication theorem fed to simp will be ignored.</p>",
        "id": 470685994,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1726507986
    },
    {
        "content": "<p>So for my <code>!A B. (A-&gt;B) in P /\\ A in P ==&gt; B in P</code>, since there is a forall, when it is trying to prove B in P, it tries to reduce it into (A -&gt;B in P) and A in P, and it tries to prove <code>A-&gt;B in P</code>, and <code>B in P</code>, also using <code>!A B. (A-&gt;B) in P /\\ A in P ==&gt; B in P</code>?</p>",
        "id": 470686861,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1726508166
    },
    {
        "content": "<p>that is my guess</p>",
        "id": 470687015,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1726508194
    },
    {
        "content": "<p>If it is the case it seems not natural, the LHS has more variables!</p>",
        "id": 470687024,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1726508196
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"233198\">Mathias Fleury</span> <a href=\"#narrow/stream/238552-Beginner-Questions/topic/Setup.20subgoals.20after.20tactic.20application.20in.20Isar/near/470681901\">said</a>:</p>\n<blockquote>\n<p>the not/box &lt;--&gt; diamond is also looping</p>\n</blockquote>\n<p>although that one is also looping</p>",
        "id": 470687105,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1726508209
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"754515\">Yiming Xu</span> <a href=\"#narrow/stream/238552-Beginner-Questions/topic/Setup.20subgoals.20after.20tactic.20application.20in.20Isar/near/470687024\">said</a>:</p>\n<blockquote>\n<p>If it is the case it seems not natural, the LHS has more variable!</p>\n</blockquote>\n<p>simp can try B repeatedly</p>",
        "id": 470687256,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1726508237
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"233198\">Mathias Fleury</span> <a href=\"#narrow/stream/238552-Beginner-Questions/topic/Setup.20subgoals.20after.20tactic.20application.20in.20Isar/near/470687256\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"754515\">Yiming Xu</span> <a href=\"#narrow/stream/238552-Beginner-Questions/topic/Setup.20subgoals.20after.20tactic.20application.20in.20Isar/near/470687024\">said</a>:</p>\n<blockquote>\n<p>If it is the case it seems not natural, the LHS has more variable!</p>\n</blockquote>\n<p>simp can try B repeatedly</p>\n</blockquote>\n<p>In which sense?</p>",
        "id": 470687484,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1726508277
    },
    {
        "content": "<p>Or I misunderstand your B? B is a modal formula (a schemvar for a modal formula).</p>",
        "id": 470687797,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1726508320
    },
    {
        "content": "<p>To prove  <code>B in P</code> <br>\nyou have to prove that <code>(B-&gt;B) in P /\\ B in P</code><br>\n<code>B-&gt;B</code> is true (I guess at least)<br>\nhence it is sufficient to prove <code>B in P</code></p>",
        "id": 470688052,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1726508357
    },
    {
        "content": "<p>Oh you mean it picks an existing term instead of generating a random free variable.</p>",
        "id": 470688561,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1726508433
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span>\n<span class=\"w\">  </span><span class=\"kp\">assumes</span><span class=\"w\"> </span><span class=\"s\">‹⋀A B. (A⟶B) ∈ P ∧ A ∈ P ⟹ B ∈ P›</span><span class=\"w\"> </span><span class=\"s\">‹⋀A. A ⟶ A ∈ P›</span>\n<span class=\"w\">  </span><span class=\"kp\">shows</span><span class=\"w\"> </span><span class=\"s\">‹B ∈ P›</span>\n<span class=\"w\">  </span><span class=\"n\">supply</span><span class=\"w\"> </span><span class=\"o\">[[</span><span class=\"n\">simp_trace</span><span class=\"o\">,</span><span class=\"n\">simp_trace_depth_limit</span><span class=\"o\">=</span><span class=\"n\">2</span><span class=\"o\">]]</span>\n<span class=\"w\">  </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"n\">add</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">assms</span><span class=\"o\">)</span>\n<span class=\"c\">(*</span>\n<span class=\"c\">[0]Adding rewrite rule \"local.assms_1\":</span>\n<span class=\"c\">(?A1 ⟶ ?B1) ∈ P ∧ ?A1 ∈ P ⟹ ?B1 ∈ P ≡ True</span>\n<span class=\"c\">[0]Adding rewrite rule \"local.assms_2\":</span>\n<span class=\"c\">?A4 ⟹ ?A4 ∈ P ≡ True</span>\n<span class=\"c\">[0]Adding rewrite rule \"local.assms_1\":</span>\n<span class=\"c\">(?A1 ⟶ ?B1) ∈ P ∧ ?A1 ∈ P ⟹ ?B1 ∈ P ≡ True</span>\n<span class=\"c\">[0]Adding rewrite rule \"local.assms_2\":</span>\n<span class=\"c\">?A4 ⟹ ?A4 ∈ P ≡ True</span>\n<span class=\"c\">[1]SIMPLIFIER INVOKED ON THE FOLLOWING TERM:</span>\n<span class=\"c\">B ∈ P</span>\n<span class=\"c\">[1]Applying instance of rewrite rule \"local.assms_1\":</span>\n<span class=\"c\">(?A1 ⟶ ?B1) ∈ P ∧ ?A1 ∈ P ⟹ ?B1 ∈ P ≡ True</span>\n<span class=\"c\">[1]Trying to rewrite:</span>\n<span class=\"c\">(?A1 ⟶ B) ∈ P ∧ ?A1 ∈ P ⟹ B ∈ P ≡ True</span>\n<span class=\"c\">[2]SIMPLIFIER INVOKED ON THE FOLLOWING TERM:</span>\n<span class=\"c\">(?A1 ⟶ B) ∈ P ∧ ?A1 ∈ P</span>\n<span class=\"c\">[2]Applying congruence rule:</span>\n<span class=\"c\">?A1 ≡ ?P'2 ⟹ (?P'2 ⟹ B ≡ ?Q'2) ⟹ ?A1 ⟶ B ≡ ?P'2 ⟶ ?Q'2</span>\n<span class=\"c\">simp_trace_depth_limit exceeded!</span>\n<span class=\"c\">simp_trace_depth_limit exceeded!</span>\n<span class=\"c\">[2]SUCCEEDED</span>\n<span class=\"c\">?A1 ⟶ B ≡ ?A1 ⟶ B</span>\n<span class=\"c\">[2]Applying instance of rewrite rule \"local.assms_1\":</span>\n<span class=\"c\">(?A1 ⟶ ?B1) ∈ P ∧ ?A1 ∈ P ⟹ ?B1 ∈ P ≡ True</span>\n<span class=\"c\">[2]Trying to rewrite:</span>\n<span class=\"c\">(?A3 ⟶ ?A1 ⟶ B) ∈ P ∧ ?A3 ∈ P ⟹ (?A1 ⟶ B) ∈ P ≡ True</span>\n<span class=\"c\">*)</span>\n</code></pre></div>",
        "id": 470688706,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1726508455
    },
    {
        "content": "<p>I lost here</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"o\">[</span><span class=\"n\">2</span><span class=\"o\">]</span><span class=\"n\">Applying</span><span class=\"w\"> </span><span class=\"n\">congruence</span><span class=\"w\"> </span><span class=\"n\">rule</span><span class=\"o\">:</span>\n<span class=\"o\">?</span><span class=\"n\">A1</span><span class=\"w\"> </span><span class=\"n\">≡</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">P'2</span><span class=\"w\"> </span><span class=\"n\">⟹</span><span class=\"w\"> </span><span class=\"o\">(?</span><span class=\"n\">P'2</span><span class=\"w\"> </span><span class=\"n\">⟹</span><span class=\"w\"> </span><span class=\"n\">B</span><span class=\"w\"> </span><span class=\"n\">≡</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">Q'2</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">⟹</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">A1</span><span class=\"w\"> </span><span class=\"n\">⟶</span><span class=\"w\"> </span><span class=\"n\">B</span><span class=\"w\"> </span><span class=\"n\">≡</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">P'2</span><span class=\"w\"> </span><span class=\"n\">⟶</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">Q'2</span>\n</code></pre></div>",
        "id": 470690748,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1726508822
    },
    {
        "content": "<p>So it is generating unification var P'2 and Q'2. Not obvious to me it is doing the back-chaining on the two conjuncts respectively.</p>",
        "id": 470691222,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1726508888
    },
    {
        "content": "<p>Seems your example traps sledgehammer.</p>",
        "id": 470691929,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1726509003
    },
    {
        "content": "<p>No, almost traps it. <br>\n<a href=\"/user_uploads/14278/cp6NvFkZ2_26XEqSlNA50uCq/image.png\">image.png</a><br>\nIt solves that, but takes very long.</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/14278/cp6NvFkZ2_26XEqSlNA50uCq/image.png\" title=\"image.png\"><img data-original-dimensions=\"1840x736\" src=\"/user_uploads/thumbnail/14278/cp6NvFkZ2_26XEqSlNA50uCq/image.png/840x560.webp\"></a></div>",
        "id": 470692126,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1726509030
    },
    {
        "content": "<p>Is there any canonical way to solve this goal then...?</p>",
        "id": 470692269,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1726509051
    },
    {
        "content": "<p>That is not provable as far as I can see</p>",
        "id": 470692772,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1726509128
    },
    {
        "content": "<p>it is made to make rule application loop</p>",
        "id": 470692866,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1726509141
    },
    {
        "content": "<p>I do not know what your <code>a_is_b</code> is, but I am very suspicious that it is actually incorrect</p>",
        "id": 470693133,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1726509184
    },
    {
        "content": "<p>Maybe it is indeed incorrect...<br>\n<a href=\"/user_uploads/14278/aLyd3mtOT6zPngeYoLS1eOOS/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/14278/aLyd3mtOT6zPngeYoLS1eOOS/image.png\" title=\"image.png\"><img data-original-dimensions=\"1840x1624\" src=\"/user_uploads/thumbnail/14278/aLyd3mtOT6zPngeYoLS1eOOS/image.png/840x560.webp\"></a></div>",
        "id": 470693501,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1726509240
    },
    {
        "content": "<p>Well it indicates that cvc4 found a proof that verit could not find</p>",
        "id": 470693928,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1726509300
    },
    {
        "content": "<p>And yes a_is_b is something nonsense made up for another test:<br>\nlemma a_is_b: \"3 \\&lt;equiv&gt; 5\" sorry <br>\ncompletely irrelevant.</p>",
        "id": 470694127,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1726509332
    },
    {
        "content": "<p>Means sledgehammer is messed up.</p>",
        "id": 470694227,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1726509347
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"233198\">Mathias Fleury</span> <a href=\"#narrow/stream/238552-Beginner-Questions/topic/Setup.20subgoals.20after.20tactic.20application.20in.20Isar/near/470692772\">said</a>:</p>\n<blockquote>\n<p>That is not provable as far as I can see</p>\n</blockquote>\n<p>I really hope it is not as it implies false:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">H</span><span class=\"o\">:</span>\n<span class=\"w\">  </span><span class=\"kp\">assumes</span><span class=\"w\"> </span><span class=\"s\">‹⋀A B. (A⟶B) ∈ P ⟹ A ∈ P ⟹ B ∈ P›</span><span class=\"w\"> </span><span class=\"s\">‹⋀A. A ⟶ A ∈ P›</span>\n<span class=\"w\">  </span><span class=\"kp\">shows</span><span class=\"w\"> </span><span class=\"s\">‹B ∈ P›</span>\n<span class=\"w\">  </span><span class=\"gr\">sorry</span>\n<span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">False</span>\n<span class=\"w\">  </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">H</span><span class=\"o\">[</span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"s\">‹{True}›</span><span class=\"w\"> </span><span class=\"n\">False</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">simplified</span><span class=\"o\">]</span>\n<span class=\"w\">  </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">simp</span>\n</code></pre></div>",
        "id": 470694690,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1726509416
    },
    {
        "content": "<p>Take the set of P to be the set of tautologies. Then if (T --&gt;F in P /\\ T in P) it will imply F in P. Indeed P does not contain everything.</p>",
        "id": 470697477,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1726509877
    },
    {
        "content": "<p>Oh yes I misread it as <code>!!A. A in P</code>.</p>",
        "id": 470697640,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1726509914
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span>\n<span class=\"w\">  </span><span class=\"kp\">assumes</span><span class=\"w\"> </span><span class=\"s\">‹⋀A B. (A⟶B) ∈ P ∧ A ∈ P ⟹ B ∈ P›</span><span class=\"w\"> </span><span class=\"s\">‹⋀A. A ∈ P›</span>\n<span class=\"w\">  </span><span class=\"kp\">shows</span><span class=\"w\"> </span><span class=\"s\">‹B ∈ P›</span>\n<span class=\"w\">  </span><span class=\"n\">supply</span><span class=\"w\"> </span><span class=\"o\">[[</span><span class=\"n\">simp_trace</span><span class=\"o\">,</span><span class=\"n\">simp_trace_depth_limit</span><span class=\"o\">=</span><span class=\"n\">2</span><span class=\"o\">]]</span>\n<span class=\"w\">  </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"n\">add</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">assms</span><span class=\"o\">(</span><span class=\"n\">2</span><span class=\"o\">))</span>\n\n<span class=\"o\">[</span><span class=\"n\">0</span><span class=\"o\">]</span><span class=\"n\">Adding</span><span class=\"w\"> </span><span class=\"n\">rewrite</span><span class=\"w\"> </span><span class=\"n\">rule</span><span class=\"w\"> </span><span class=\"s\">\"local.assms_2\"</span><span class=\"o\">:</span>\n<span class=\"o\">?</span><span class=\"n\">A1</span><span class=\"w\"> </span><span class=\"n\">∈</span><span class=\"w\"> </span><span class=\"n\">P</span><span class=\"w\"> </span><span class=\"n\">≡</span><span class=\"w\"> </span><span class=\"n\">True</span>\n<span class=\"o\">[</span><span class=\"n\">0</span><span class=\"o\">]</span><span class=\"n\">Adding</span><span class=\"w\"> </span><span class=\"n\">rewrite</span><span class=\"w\"> </span><span class=\"n\">rule</span><span class=\"w\"> </span><span class=\"s\">\"local.assms_2\"</span><span class=\"o\">:</span>\n<span class=\"o\">?</span><span class=\"n\">A1</span><span class=\"w\"> </span><span class=\"n\">∈</span><span class=\"w\"> </span><span class=\"n\">P</span><span class=\"w\"> </span><span class=\"n\">≡</span><span class=\"w\"> </span><span class=\"n\">True</span>\n<span class=\"o\">[</span><span class=\"n\">0</span><span class=\"o\">]</span><span class=\"n\">Adding</span><span class=\"w\"> </span><span class=\"n\">rewrite</span><span class=\"w\"> </span><span class=\"n\">rule</span><span class=\"w\"> </span><span class=\"s\">\"local.assms_2\"</span><span class=\"o\">:</span>\n<span class=\"o\">?</span><span class=\"n\">A1</span><span class=\"w\"> </span><span class=\"n\">∈</span><span class=\"w\"> </span><span class=\"n\">P</span><span class=\"w\"> </span><span class=\"n\">≡</span><span class=\"w\"> </span><span class=\"n\">True</span>\n<span class=\"kn\">theorem</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">⋀A</span><span class=\"w\"> </span><span class=\"n\">B.</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"n\">⟶</span><span class=\"w\"> </span><span class=\"n\">B</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">∈</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">P</span><span class=\"w\"> </span><span class=\"n\">∧</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"n\">∈</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">P</span><span class=\"w\"> </span><span class=\"n\">⟹</span><span class=\"w\"> </span><span class=\"n\">B</span><span class=\"w\"> </span><span class=\"n\">∈</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">P</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">⟹</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">⋀A.</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"n\">∈</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">P</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">⟹</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">B</span><span class=\"w\"> </span><span class=\"n\">∈</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">P</span>\n<span class=\"o\">[</span><span class=\"n\">1</span><span class=\"o\">]</span><span class=\"n\">SIMPLIFIER</span><span class=\"w\"> </span><span class=\"n\">INVOKED</span><span class=\"w\"> </span><span class=\"n\">ON</span><span class=\"w\"> </span><span class=\"n\">THE</span><span class=\"w\"> </span><span class=\"n\">FOLLOWING</span><span class=\"w\"> </span><span class=\"n\">TERM</span><span class=\"o\">:</span>\n<span class=\"n\">B</span><span class=\"w\"> </span><span class=\"n\">∈</span><span class=\"w\"> </span><span class=\"n\">P</span>\n<span class=\"o\">[</span><span class=\"n\">1</span><span class=\"o\">]</span><span class=\"n\">Applying</span><span class=\"w\"> </span><span class=\"kn\">instance</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">rewrite</span><span class=\"w\"> </span><span class=\"n\">rule</span><span class=\"w\"> </span><span class=\"s\">\"local.assms_2\"</span><span class=\"o\">:</span>\n<span class=\"o\">?</span><span class=\"n\">A1</span><span class=\"w\"> </span><span class=\"n\">∈</span><span class=\"w\"> </span><span class=\"n\">P</span><span class=\"w\"> </span><span class=\"n\">≡</span><span class=\"w\"> </span><span class=\"n\">True</span>\n<span class=\"o\">[</span><span class=\"n\">1</span><span class=\"o\">]</span><span class=\"n\">Rewriting</span><span class=\"o\">:</span>\n<span class=\"n\">B</span><span class=\"w\"> </span><span class=\"n\">∈</span><span class=\"w\"> </span><span class=\"n\">P</span><span class=\"w\"> </span><span class=\"n\">≡</span><span class=\"w\"> </span><span class=\"n\">True</span>\n</code></pre></div>\n<p>As expected, good.</p>\n<p>Return to my original aim. The lesson I just learnt is to not only to use the simplified...</p>",
        "id": 470700503,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1726510454
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">definition</span><span class=\"w\"> </span><span class=\"n\">is_NML1_def</span><span class=\"w\"> </span><span class=\"o\">:</span>\n<span class=\"w\"> </span><span class=\"s\">\"is_NML1 s ≡</span>\n<span class=\"s\">  (∀ A B p q f form.</span>\n<span class=\"s\">  ptaut form ⟶ form ∈ s ∧</span>\n<span class=\"s\">  (IMP (BOX (IMP p q)) (IMP (BOX p) (BOX q))) ∈ s ∧</span>\n<span class=\"s\">  (A ∈ s ⟶ (subst f A) ∈ s) ∧</span>\n<span class=\"s\">  (A ∈ s ⟶ (BOX A) ∈ s)∧</span>\n<span class=\"s\">  ((A → B) ∈ s ∧ A ∈ s ⟶ B ∈ s))</span>\n<span class=\"s\">  \"</span>\n\n<span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">foo1</span><span class=\"w\"> </span><span class=\"o\">:</span>\n<span class=\"w\">  </span><span class=\"kp\">assumes</span>\n<span class=\"w\">    </span><span class=\"n\">1</span><span class=\"o\">:</span><span class=\"s\">\"(⋀form. ptaut form ⟹ form ∈ P)\"</span><span class=\"w\"> </span><span class=\"kp\">and</span>\n<span class=\"w\">    </span><span class=\"n\">s</span><span class=\"o\">:</span><span class=\"s\">\"(⋀ A f. A ∈ P ⟶ (subst f A) ∈ P)\"</span><span class=\"w\"> </span><span class=\"kp\">and</span>\n<span class=\"w\">    </span><span class=\"n\">2</span><span class=\"o\">:</span><span class=\"s\">\"⋀ p q. (IMP (BOX (IMP p q)) (IMP (BOX p) (BOX q))) ∈ P \"</span><span class=\"w\"> </span><span class=\"kp\">and</span>\n<span class=\"w\">    </span><span class=\"n\">4</span><span class=\"o\">:</span><span class=\"s\">\"(⋀ A. A ∈ P ⟹ BOX A ∈ P)\"</span><span class=\"w\"> </span><span class=\"kp\">and</span>\n<span class=\"w\">    </span><span class=\"n\">5</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"(⋀A B. (IMP A B) ∈ P ∧ A ∈ P ⟶ B ∈ P)\"</span>\n<span class=\"w\">  </span><span class=\"kp\">shows</span>\n<span class=\"w\">    </span><span class=\"s\">\"is_NML1 P\"</span>\n<span class=\"k\">proof</span><span class=\"w\"> </span><span class=\"o\">-</span>\n<span class=\"w\">  </span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">thesis</span>\n<span class=\"w\">    </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">metis</span><span class=\"w\"> </span><span class=\"s\">\"1\"</span><span class=\"w\"> </span><span class=\"s\">\"2\"</span><span class=\"w\"> </span><span class=\"s\">\"4\"</span><span class=\"w\"> </span><span class=\"s\">\"5\"</span><span class=\"w\"> </span><span class=\"n\">is_NML1_def</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"o\">)</span>\n<span class=\"k\">qed</span>\n</code></pre></div>",
        "id": 470700611,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1726510480
    },
    {
        "content": "<p>metis solves this, as expected. What a peaceful world.</p>",
        "id": 470700652,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1726510493
    },
    {
        "content": "<p>The above is very slow, is there any thing to do to help metis to do it faster?</p>",
        "id": 470816134,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1726542600
    },
    {
        "content": "<p>In HOL4 it is possible to add additional theorems to make metis works it out quicker.</p>",
        "id": 470816260,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1726542623
    },
    {
        "content": "<p>try Sledgehammer, or writing some steps out yourself</p>",
        "id": 470816495,
        "sender_full_name": "Yong Kiam",
        "timestamp": 1726542683
    },
    {
        "content": "<p>Sledgehammer does not give a quick proof either. For \"write out some steps\", I do not think there is any possible intermediate step in this particular case.</p>",
        "id": 470816863,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1726542753
    },
    {
        "content": "<p>The assumptions and the definition looks identical (modulo meta/object language).</p>",
        "id": 470816997,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1726542779
    },
    {
        "content": "<p>you can try to feed more theorems into <code>metis</code> like you would in <code>HOL4</code></p>",
        "id": 470817020,
        "sender_full_name": "Yong Kiam",
        "timestamp": 1726542782
    },
    {
        "content": "<p>In this case, may I please ask what to fed into metis?</p>",
        "id": 470817353,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1726542849
    },
    {
        "content": "<p>you can also split the conjuncts after unfolding <code>is_NML1</code> and doing each one separately</p>",
        "id": 470817371,
        "sender_full_name": "Yong Kiam",
        "timestamp": 1726542853
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"754515\">Yiming Xu</span> <a href=\"#narrow/stream/238552-Beginner-Questions/topic/Setup.20subgoals.20after.20tactic.20application.20in.20Isar/near/470816260\">said</a>:</p>\n<blockquote>\n<p>In HOL4 it is possible to add additional theorems to make metis works it out quicker.</p>\n</blockquote>\n<p>^ I mean whatever you would feed it in HOL4</p>",
        "id": 470817435,
        "sender_full_name": "Yong Kiam",
        "timestamp": 1726542869
    },
    {
        "content": "<p>They are basically intermediate theorems about concrete notions, we rarely feed metis proof rules.</p>",
        "id": 470817816,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1726542955
    },
    {
        "content": "<p>Let me try if I can split the conjuncts.</p>",
        "id": 470817917,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1726542969
    },
    {
        "content": "<p>Do you mean like this?</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">foo1</span><span class=\"w\"> </span><span class=\"o\">:</span>\n<span class=\"w\">  </span><span class=\"kp\">assumes</span>\n<span class=\"w\">    </span><span class=\"n\">1</span><span class=\"o\">:</span><span class=\"s\">\"(⋀form. ptaut form ⟹ form ∈ P)\"</span><span class=\"w\"> </span><span class=\"kp\">and</span>\n<span class=\"w\">    </span><span class=\"n\">s</span><span class=\"o\">:</span><span class=\"s\">\"(⋀ A f. A ∈ P ⟶ (subst f A) ∈ P)\"</span><span class=\"w\"> </span><span class=\"kp\">and</span>\n<span class=\"w\">    </span><span class=\"n\">2</span><span class=\"o\">:</span><span class=\"s\">\"⋀ p q. (IMP (BOX (IMP p q)) (IMP (BOX p) (BOX q))) ∈ P \"</span><span class=\"w\"> </span><span class=\"kp\">and</span>\n<span class=\"w\">    </span><span class=\"n\">4</span><span class=\"o\">:</span><span class=\"s\">\"(⋀ A. A ∈ P ⟹ BOX A ∈ P)\"</span><span class=\"w\"> </span><span class=\"kp\">and</span>\n<span class=\"w\">    </span><span class=\"n\">5</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"(⋀A B. (IMP A B) ∈ P ∧ A ∈ P ⟶ B ∈ P)\"</span>\n<span class=\"w\">  </span><span class=\"kp\">shows</span>\n<span class=\"w\">    </span><span class=\"s\">\"is_NML1 P\"</span>\n<span class=\"k\">proof</span><span class=\"w\"> </span><span class=\"o\">-</span>\n<span class=\"w\">    </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"s\">\"ptaut form ⟶</span>\n<span class=\"s\">       form ∈ P\"</span><span class=\"w\"> </span><span class=\"k\">proof</span>\n<span class=\"w\">    </span><span class=\"k\">fix</span><span class=\"w\"> </span><span class=\"s\">\"A\"</span><span class=\"w\"> </span><span class=\"s\">\"B\"</span><span class=\"w\"> </span><span class=\"s\">\"p\"</span><span class=\"w\"> </span><span class=\"s\">\"q\"</span><span class=\"w\"> </span><span class=\"s\">\"f\"</span><span class=\"w\"> </span><span class=\"s\">\"form\"</span>\n<span class=\"w\"> </span><span class=\"ow\">...</span>\n<span class=\"k\">qed</span>\n</code></pre></div>",
        "id": 470818772,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1726543203
    },
    {
        "content": "<p>probably do <code>unfolding is_NML1_def proof standard</code> instead and see what that does</p>",
        "id": 470818942,
        "sender_full_name": "Yong Kiam",
        "timestamp": 1726543274
    },
    {
        "content": "<p>I tried:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">foo1</span><span class=\"w\"> </span><span class=\"o\">:</span>\n<span class=\"w\">  </span><span class=\"kp\">assumes</span>\n<span class=\"w\">    </span><span class=\"n\">1</span><span class=\"o\">:</span><span class=\"s\">\"(⋀form. ptaut form ⟹ form ∈ P)\"</span><span class=\"w\"> </span><span class=\"kp\">and</span>\n<span class=\"w\">    </span><span class=\"n\">s</span><span class=\"o\">:</span><span class=\"s\">\"(⋀ A f. A ∈ P ⟶ (subst f A) ∈ P)\"</span><span class=\"w\"> </span><span class=\"kp\">and</span>\n<span class=\"w\">    </span><span class=\"n\">2</span><span class=\"o\">:</span><span class=\"s\">\"⋀ p q. (IMP (BOX (IMP p q)) (IMP (BOX p) (BOX q))) ∈ P \"</span><span class=\"w\"> </span><span class=\"kp\">and</span>\n<span class=\"w\">    </span><span class=\"n\">4</span><span class=\"o\">:</span><span class=\"s\">\"(⋀ A. A ∈ P ⟹ BOX A ∈ P)\"</span><span class=\"w\"> </span><span class=\"kp\">and</span>\n<span class=\"w\">    </span><span class=\"n\">5</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"(⋀A B. (IMP A B) ∈ P ∧ A ∈ P ⟶ B ∈ P)\"</span>\n<span class=\"w\">  </span><span class=\"kp\">shows</span>\n<span class=\"w\">    </span><span class=\"s\">\"is_NML1 P\"</span>\n<span class=\"w\">  </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"n\">add</span><span class=\"o\">:</span><span class=\"n\">is_NML1_def</span><span class=\"o\">)</span>\n<span class=\"k\">proof</span>\n<span class=\"w\">    </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"s\">\"ptaut form ⟶</span>\n<span class=\"s\">       form ∈ P\"</span><span class=\"w\">  </span><span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>Let me try yours.</p>",
        "id": 470819075,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1726543326
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">foo1</span><span class=\"w\"> </span><span class=\"o\">:</span>\n<span class=\"w\">  </span><span class=\"kp\">assumes</span>\n<span class=\"w\">    </span><span class=\"n\">1</span><span class=\"o\">:</span><span class=\"s\">\"(⋀form. ptaut form ⟹ form ∈ P)\"</span><span class=\"w\"> </span><span class=\"kp\">and</span>\n<span class=\"w\">    </span><span class=\"n\">s</span><span class=\"o\">:</span><span class=\"s\">\"(⋀ A f. A ∈ P ⟶ (subst f A) ∈ P)\"</span><span class=\"w\"> </span><span class=\"kp\">and</span>\n<span class=\"w\">    </span><span class=\"n\">2</span><span class=\"o\">:</span><span class=\"s\">\"⋀ p q. (IMP (BOX (IMP p q)) (IMP (BOX p) (BOX q))) ∈ P \"</span><span class=\"w\"> </span><span class=\"kp\">and</span>\n<span class=\"w\">    </span><span class=\"n\">4</span><span class=\"o\">:</span><span class=\"s\">\"(⋀ A. A ∈ P ⟹ BOX A ∈ P)\"</span><span class=\"w\"> </span><span class=\"kp\">and</span>\n<span class=\"w\">    </span><span class=\"n\">5</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"(⋀A B. (IMP A B) ∈ P ∧ A ∈ P ⟶ B ∈ P)\"</span>\n<span class=\"w\">  </span><span class=\"kp\">shows</span>\n<span class=\"w\">    </span><span class=\"s\">\"is_NML1 P\"</span>\n<span class=\"k\">unfolding</span><span class=\"w\"> </span><span class=\"n\">is_NML1_def</span><span class=\"w\"> </span><span class=\"k\">proof</span><span class=\"w\"> </span><span class=\"n\">standard</span>\n<span class=\"w\">    </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"s\">\"ptaut form ⟶</span>\n<span class=\"s\">       form ∈ P\"</span><span class=\"w\">  </span><span class=\"gr\">sorry</span>\n\n\n<span class=\"k\">have</span><span class=\"w\"> </span><span class=\"n\">ptaut</span><span class=\"w\"> </span><span class=\"n\">form</span><span class=\"w\"> </span><span class=\"n\">⟶</span><span class=\"w\"> </span><span class=\"n\">form</span><span class=\"w\"> </span><span class=\"n\">∈</span><span class=\"w\"> </span><span class=\"n\">P</span>\n<span class=\"k\">proof</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">state</span><span class=\"o\">)</span>\n<span class=\"n\">this</span><span class=\"o\">:</span>\n<span class=\"w\">  </span><span class=\"n\">ptaut</span><span class=\"w\"> </span><span class=\"n\">form</span><span class=\"w\"> </span><span class=\"n\">⟶</span><span class=\"w\"> </span><span class=\"n\">form</span><span class=\"w\"> </span><span class=\"n\">∈</span><span class=\"w\"> </span><span class=\"n\">P</span>\n\n<span class=\"n\">goal</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">1</span><span class=\"w\"> </span><span class=\"n\">subgoal</span><span class=\"o\">):</span>\n<span class=\"w\"> </span><span class=\"n\">1.</span><span class=\"w\"> </span><span class=\"n\">⋀A.</span><span class=\"w\"> </span><span class=\"n\">∀B</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"n\">q</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"n\">form.</span>\n<span class=\"w\">            </span><span class=\"n\">ptaut</span><span class=\"w\"> </span><span class=\"n\">form</span><span class=\"w\"> </span><span class=\"n\">⟶</span>\n<span class=\"w\">            </span><span class=\"n\">form</span><span class=\"w\"> </span><span class=\"n\">∈</span><span class=\"w\"> </span><span class=\"n\">P</span><span class=\"w\"> </span><span class=\"n\">∧</span>\n<span class=\"w\">            </span><span class=\"n\">BOX</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"n\">→</span><span class=\"w\"> </span><span class=\"n\">q</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">→</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">BOX</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"n\">→</span><span class=\"w\"> </span><span class=\"n\">BOX</span><span class=\"w\"> </span><span class=\"n\">q</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">∈</span><span class=\"w\"> </span><span class=\"n\">P</span><span class=\"w\"> </span><span class=\"n\">∧</span>\n<span class=\"w\">            </span><span class=\"o\">(</span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"n\">∈</span><span class=\"w\"> </span><span class=\"n\">P</span><span class=\"w\"> </span><span class=\"n\">⟶</span><span class=\"w\"> </span><span class=\"n\">subst</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"n\">∈</span><span class=\"w\"> </span><span class=\"n\">P</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">∧</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"n\">∈</span><span class=\"w\"> </span><span class=\"n\">P</span><span class=\"w\"> </span><span class=\"n\">⟶</span><span class=\"w\"> </span><span class=\"n\">BOX</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"n\">∈</span><span class=\"w\"> </span><span class=\"n\">P</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">∧</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"n\">→</span><span class=\"w\"> </span><span class=\"n\">B</span><span class=\"w\"> </span><span class=\"n\">∈</span><span class=\"w\"> </span><span class=\"n\">P</span><span class=\"w\"> </span><span class=\"n\">∧</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"n\">∈</span><span class=\"w\"> </span><span class=\"n\">P</span><span class=\"w\"> </span><span class=\"n\">⟶</span><span class=\"w\"> </span><span class=\"n\">B</span><span class=\"w\"> </span><span class=\"n\">∈</span><span class=\"w\"> </span><span class=\"n\">P</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 470819170,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1726543380
    },
    {
        "content": "<p>same.</p>",
        "id": 470819225,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1726543402
    },
    {
        "content": "<p>what about <code>proof safe</code> instead?</p>",
        "id": 470819383,
        "sender_full_name": "Yong Kiam",
        "timestamp": 1726543453
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">proof</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">state</span><span class=\"o\">)</span>\n<span class=\"n\">goal</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">5</span><span class=\"w\"> </span><span class=\"n\">subgoals</span><span class=\"o\">):</span>\n<span class=\"w\"> </span><span class=\"n\">1.</span><span class=\"w\"> </span><span class=\"n\">⋀A</span><span class=\"w\"> </span><span class=\"n\">B</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"n\">q</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"n\">form.</span><span class=\"w\"> </span><span class=\"n\">ptaut</span><span class=\"w\"> </span><span class=\"n\">form</span><span class=\"w\"> </span><span class=\"n\">⟹</span><span class=\"w\"> </span><span class=\"n\">form</span><span class=\"w\"> </span><span class=\"n\">∈</span><span class=\"w\"> </span><span class=\"n\">P</span>\n<span class=\"w\"> </span><span class=\"n\">2.</span><span class=\"w\"> </span><span class=\"n\">⋀A</span><span class=\"w\"> </span><span class=\"n\">B</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"n\">q</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"n\">form.</span><span class=\"w\"> </span><span class=\"n\">BOX</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"n\">→</span><span class=\"w\"> </span><span class=\"n\">q</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">→</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">BOX</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"n\">→</span><span class=\"w\"> </span><span class=\"n\">BOX</span><span class=\"w\"> </span><span class=\"n\">q</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">∈</span><span class=\"w\"> </span><span class=\"n\">P</span>\n<span class=\"w\"> </span><span class=\"n\">3.</span><span class=\"w\"> </span><span class=\"n\">⋀A</span><span class=\"w\"> </span><span class=\"n\">B</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"n\">q</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"n\">form.</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"n\">∈</span><span class=\"w\"> </span><span class=\"n\">P</span><span class=\"w\"> </span><span class=\"n\">⟹</span><span class=\"w\"> </span><span class=\"n\">subst</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"n\">∈</span><span class=\"w\"> </span><span class=\"n\">P</span>\n<span class=\"w\"> </span><span class=\"n\">4.</span><span class=\"w\"> </span><span class=\"n\">⋀A</span><span class=\"w\"> </span><span class=\"n\">B</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"n\">q</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"n\">form.</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"n\">∈</span><span class=\"w\"> </span><span class=\"n\">P</span><span class=\"w\"> </span><span class=\"n\">⟹</span><span class=\"w\"> </span><span class=\"n\">BOX</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"n\">∈</span><span class=\"w\"> </span><span class=\"n\">P</span>\n<span class=\"w\"> </span><span class=\"n\">5.</span><span class=\"w\"> </span><span class=\"n\">⋀A</span><span class=\"w\"> </span><span class=\"n\">B</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"n\">q</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"n\">form.</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"n\">→</span><span class=\"w\"> </span><span class=\"n\">B</span><span class=\"w\"> </span><span class=\"n\">∈</span><span class=\"w\"> </span><span class=\"n\">P</span><span class=\"w\"> </span><span class=\"n\">⟹</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"n\">∈</span><span class=\"w\"> </span><span class=\"n\">P</span><span class=\"w\"> </span><span class=\"n\">⟹</span><span class=\"w\"> </span><span class=\"n\">B</span><span class=\"w\"> </span><span class=\"n\">∈</span><span class=\"w\"> </span><span class=\"n\">P</span>\n</code></pre></div>",
        "id": 470819458,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1726543479
    },
    {
        "content": "<p>That's better!</p>",
        "id": 470819475,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1726543486
    },
    {
        "content": "<p>there you go, prove those one-by-one</p>",
        "id": 470819477,
        "sender_full_name": "Yong Kiam",
        "timestamp": 1726543487
    },
    {
        "content": "<p>So from here:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"n\">goal</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">1</span><span class=\"w\"> </span><span class=\"n\">subgoal</span><span class=\"o\">):</span>\n<span class=\"w\"> </span><span class=\"n\">1.</span><span class=\"w\"> </span><span class=\"n\">⋀A.</span><span class=\"w\"> </span><span class=\"n\">∀B</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"n\">q</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"n\">form.</span>\n<span class=\"w\">            </span><span class=\"n\">ptaut</span><span class=\"w\"> </span><span class=\"n\">form</span><span class=\"w\"> </span><span class=\"n\">⟶</span>\n<span class=\"w\">            </span><span class=\"n\">form</span><span class=\"w\"> </span><span class=\"n\">∈</span><span class=\"w\"> </span><span class=\"n\">P</span><span class=\"w\"> </span><span class=\"n\">∧</span>\n<span class=\"w\">            </span><span class=\"n\">BOX</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"n\">→</span><span class=\"w\"> </span><span class=\"n\">q</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">→</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">BOX</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"n\">→</span><span class=\"w\"> </span><span class=\"n\">BOX</span><span class=\"w\"> </span><span class=\"n\">q</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">∈</span><span class=\"w\"> </span><span class=\"n\">P</span><span class=\"w\"> </span><span class=\"n\">∧</span>\n<span class=\"w\">            </span><span class=\"o\">(</span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"n\">∈</span><span class=\"w\"> </span><span class=\"n\">P</span><span class=\"w\"> </span><span class=\"n\">⟶</span><span class=\"w\"> </span><span class=\"n\">subst</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"n\">∈</span><span class=\"w\"> </span><span class=\"n\">P</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">∧</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"n\">∈</span><span class=\"w\"> </span><span class=\"n\">P</span><span class=\"w\"> </span><span class=\"n\">⟶</span><span class=\"w\"> </span><span class=\"n\">BOX</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"n\">∈</span><span class=\"w\"> </span><span class=\"n\">P</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">∧</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"n\">→</span><span class=\"w\"> </span><span class=\"n\">B</span><span class=\"w\"> </span><span class=\"n\">∈</span><span class=\"w\"> </span><span class=\"n\">P</span><span class=\"w\"> </span><span class=\"n\">∧</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"n\">∈</span><span class=\"w\"> </span><span class=\"n\">P</span><span class=\"w\"> </span><span class=\"n\">⟶</span><span class=\"w\"> </span><span class=\"n\">B</span><span class=\"w\"> </span><span class=\"n\">∈</span><span class=\"w\"> </span><span class=\"n\">P</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 470819554,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1726543512
    },
    {
        "content": "<p>How can I strip all the quantifiers and split the conjunctions?</p>",
        "id": 470819609,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1726543527
    },
    {
        "content": "<p>(I may have seen it somewhere, I am sorry I forgot. To much things to grab.)</p>",
        "id": 470819819,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1726543569
    },
    {
        "content": "<p>I suppose maybe some repetition of rule application by hand. But in HOL4, it is rw[]. Stripping away all quantifiers and split conjunctions.</p>",
        "id": 470820628,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1726543809
    },
    {
        "content": "<p>apply safe, I guess?</p>",
        "id": 470821370,
        "sender_full_name": "Yong Kiam",
        "timestamp": 1726543950
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">foo1</span><span class=\"w\"> </span><span class=\"o\">:</span>\n<span class=\"w\">  </span><span class=\"kp\">assumes</span>\n<span class=\"w\">    </span><span class=\"n\">1</span><span class=\"o\">:</span><span class=\"s\">\"(⋀form. ptaut form ⟹ form ∈ P)\"</span><span class=\"w\"> </span><span class=\"kp\">and</span>\n<span class=\"w\">    </span><span class=\"n\">s</span><span class=\"o\">:</span><span class=\"s\">\"(⋀ A f. A ∈ P ⟶ (subst f A) ∈ P)\"</span><span class=\"w\"> </span><span class=\"kp\">and</span>\n<span class=\"w\">    </span><span class=\"n\">2</span><span class=\"o\">:</span><span class=\"s\">\"⋀ p q. (IMP (BOX (IMP p q)) (IMP (BOX p) (BOX q))) ∈ P \"</span><span class=\"w\"> </span><span class=\"kp\">and</span>\n<span class=\"w\">    </span><span class=\"n\">4</span><span class=\"o\">:</span><span class=\"s\">\"(⋀ A. A ∈ P ⟹ BOX A ∈ P)\"</span><span class=\"w\"> </span><span class=\"kp\">and</span>\n<span class=\"w\">    </span><span class=\"n\">5</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"(⋀A B. (IMP A B) ∈ P ∧ A ∈ P ⟶ B ∈ P)\"</span>\n<span class=\"w\">  </span><span class=\"kp\">shows</span>\n<span class=\"w\">    </span><span class=\"s\">\"is_NML1 P\"</span>\n<span class=\"k\">unfolding</span><span class=\"w\"> </span><span class=\"n\">is_NML1_def</span><span class=\"w\"> </span><span class=\"k\">proof</span><span class=\"w\"> </span><span class=\"n\">standard</span>\n<span class=\"w\">    </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"s\">\"ptaut form ⟶</span>\n<span class=\"s\">       form ∈ P\"</span><span class=\"w\">  </span><span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>After the proof standard, can I still write \"apply safe\" in some manner?</p>",
        "id": 470821724,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1726544045
    },
    {
        "content": "<p>If I put it after proof standard it will be a syntax error.</p>",
        "id": 470821813,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1726544066
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"234226\">Yong Kiam</span> <a href=\"#narrow/stream/238552-Beginner-Questions/topic/Setup.20subgoals.20after.20tactic.20application.20in.20Isar/near/470821370\">said</a>:</p>\n<blockquote>\n<p>apply safe, I guess?</p>\n</blockquote>\n<p>Also I am curious, the \"guess\" means you do not need it. To me, it seems like very standard operations in the goal, but when I ask around recently, people just tell me \"we never use Isar like this\". So what do people often try to deal with such a situation, I wonder. <br>\n(I understand for mature users who have already forgotten how they grabbed this stuff, it is hard to tell, feel free to not answer it if it is too hard!)</p>",
        "id": 470825584,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1726544861
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">proof</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">intro</span><span class=\"w\"> </span><span class=\"n\">allI</span><span class=\"w\"> </span><span class=\"n\">impI</span><span class=\"w\"> </span><span class=\"n\">conjI</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 470862890,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1726547423
    },
    {
        "content": "<p>So \"safe\" means \"applying all safe rules once possible\"?</p>",
        "id": 470863840,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1726547704
    },
    {
        "content": "<p>Isar-ref p92-93: </p>\n<p>Also available is clarsimp, a method that interleaves clarify and simp. Also there is safe, which like clarify performs obvious steps but even applies those that split goals.</p>\n<p>Leave it here just for a reference later. Do not think I would look at the code.</p>",
        "id": 470883745,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1726555253
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"233198\">Mathias Fleury</span> <a href=\"#narrow/stream/238552-Beginner-Questions/topic/Setup.20subgoals.20after.20tactic.20application.20in.20Isar/near/470688052\">said</a>:</p>\n<blockquote>\n<p>To prove  <code>B in P</code> <br>\nyou have to prove that <code>(B-&gt;B) in P /\\ B in P</code><br>\n<code>B-&gt;B</code> is true (I guess at least)<br>\nhence it is sufficient to prove <code>B in P</code></p>\n</blockquote>\n<p>For a reference later. <a href=\"http://concrete-semantics.org/slides-isabelle.pdf\">http://concrete-semantics.org/slides-isabelle.pdf</a> page 67 explains conditional rw and I find it pretty clear.</p>",
        "id": 472173835,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1727082983
    }
]