[
    {
        "content": "<p><a href=\"https://isabelle.in.tum.de/library/HOL/HOL-Algebra/Group.html#Group.monoid.mult|const\">In HOL-Algebra, algebraic objects are typically implemented as a record and then a locale. For example, monoids are defined like this:</a></p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">record</span><span class=\"w\"> </span><span class=\"n n-Type\">'a</span><span class=\"w\"> </span><span class=\"n\">monoid</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\">  </span><span class=\"s\">\"'a partial_object\"</span><span class=\"w\"> </span><span class=\"o\">+</span>\n<span class=\"w\">  </span><span class=\"n\">mult</span><span class=\"w\">    </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"['a, 'a] ⇒ 'a\"</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"kp\">infixl</span><span class=\"w\"> </span><span class=\"s\">\"⊗ı\"</span><span class=\"w\"> </span><span class=\"n\">70</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"n\">one</span><span class=\"w\">     </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"n n-Type\">'a</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"s\">\"𝟭ı\"</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>With the corresponding locale a little bit later:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">locale</span><span class=\"w\"> </span><span class=\"n\">monoid</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">  </span><span class=\"kp\">fixes</span><span class=\"w\"> </span><span class=\"n\">G</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"kp\">structure</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"kp\">assumes</span><span class=\"w\"> </span><span class=\"n\">m_closed</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">intro</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">simp</span><span class=\"o\">]:</span>\n<span class=\"w\">         </span><span class=\"s\">\"⟦x ∈ carrier G; y ∈ carrier G⟧ ⟹ x ⊗ y ∈ carrier G\"</span>\n<span class=\"w\">      </span><span class=\"kp\">and</span><span class=\"w\"> </span><span class=\"n\">m_assoc</span><span class=\"o\">:</span>\n<span class=\"w\">         </span><span class=\"s\">\"⟦x ∈ carrier G; y ∈ carrier G; z ∈ carrier G⟧</span>\n<span class=\"s\">          ⟹ (x ⊗ y) ⊗ z = x ⊗ (y ⊗ z)\"</span>\n<span class=\"w\">      </span><span class=\"kp\">and</span><span class=\"w\"> </span><span class=\"n\">one_closed</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">intro</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">simp</span><span class=\"o\">]:</span><span class=\"w\"> </span><span class=\"s\">\"𝟭 ∈ carrier G\"</span>\n<span class=\"w\">      </span><span class=\"kp\">and</span><span class=\"w\"> </span><span class=\"n\">l_one</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]:</span><span class=\"w\"> </span><span class=\"s\">\"x ∈ carrier G ⟹ 𝟭 ⊗ x = x\"</span>\n<span class=\"w\">      </span><span class=\"kp\">and</span><span class=\"w\"> </span><span class=\"n\">r_one</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]:</span><span class=\"w\"> </span><span class=\"s\">\"x ∈ carrier G ⟹ x ⊗ 𝟭 = x\"</span>\n</code></pre></div>\n<p>If I were defining monoids myself, my naive instinct might be to just define the locale monoid as a locale fixing the relevant data directly:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">locale</span><span class=\"w\"> </span><span class=\"n\">monoid</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">  </span><span class=\"kp\">fixes</span>\n<span class=\"w\">    </span><span class=\"n\">carrier</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"'a set\"</span>\n<span class=\"w\">    </span><span class=\"n\">mult</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"['a, 'a] ⇒ 'a\"</span>\n<span class=\"w\">    </span><span class=\"n\">one</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"n n-Type\">'a</span>\n<span class=\"w\">  </span><span class=\"kp\">assumes</span>\n<span class=\"w\">    </span><span class=\"ow\">...</span>\n</code></pre></div>\n<p>One minor advantage of this would be the ability to write <code>carrier</code> instead of <code>carrier G</code> all of the time.</p>\n<p>I know there must be a good reason why HOL-Algebra is set up the way that it is, but I don't have a good enough grasp of structuring larger projects to see it. Why is this done this way, and would there ever be a situation in which I would want to just fix the data in the locale directly?</p>",
        "id": 424140500,
        "sender_full_name": "James Hanson",
        "timestamp": 1709256280
    },
    {
        "content": "<p>This is exactly what Clemens Ballarin's new algebra approach does: <a href=\"https://www.isa-afp.org/entries/Jacobson_Basic_Algebra.html\">https://www.isa-afp.org/entries/Jacobson_Basic_Algebra.html</a> There is also an accompanying paper. You might also find some interesting discussion on that approach in the paper by <span class=\"user-mention\" data-user-id=\"228778\">@Anthony Bordg</span>  et al. about schemes.</p>\n<p>One advantage of the record-style approach of HOL-Algebra is that it is easier to make a function that returns e.g. a group. Another might be that syntax is more uniform, although it has to be said that the syntax can become quite cumbersome quite quickly with HOL-Algebra as well…</p>",
        "id": 424251909,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1709303867
    },
    {
        "content": "<p>At the end of the day I would say that both approaches are valid and have their pros and cons. I personally am a bit more in favour of the old HOL-Algebra style with records, but I'm not super happy with either approach.</p>",
        "id": 424252136,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1709303910
    },
    {
        "content": "<p>Using a record is fine as long as you don't abuse the inheritance feature of it as discussed in <a href=\"https://link.springer.com/article/10.1007/s10817-019-09537-9\">Ballarin's paper</a>.</p>",
        "id": 424326190,
        "sender_full_name": "Wenda Li",
        "timestamp": 1709327421
    }
]