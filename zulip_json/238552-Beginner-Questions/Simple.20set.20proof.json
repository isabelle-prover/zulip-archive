[
    {
        "content": "<p>I'm in the middle of a more complex proof where my state looked like this:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">proof</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">state</span><span class=\"o\">)</span>\n<span class=\"n\">goal</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">4</span><span class=\"w\"> </span><span class=\"n\">subgoals</span><span class=\"o\">):</span>\n<span class=\"w\"> </span><span class=\"n\">1.</span><span class=\"w\"> </span><span class=\"n\">⋀P</span><span class=\"w\"> </span><span class=\"n\">Q.</span><span class=\"w\"> </span><span class=\"n\">P</span><span class=\"w\"> </span><span class=\"n\">≠</span><span class=\"w\"> </span><span class=\"n\">Q</span><span class=\"w\"> </span><span class=\"n\">⟹</span>\n<span class=\"w\">           </span><span class=\"n\">P</span><span class=\"w\"> </span><span class=\"n\">∈</span><span class=\"w\"> </span><span class=\"n\">A4Points</span><span class=\"w\"> </span><span class=\"n\">⟹</span>\n<span class=\"w\">           </span><span class=\"n\">Q</span><span class=\"w\"> </span><span class=\"n\">∈</span><span class=\"w\"> </span><span class=\"n\">A4Points</span><span class=\"w\"> </span><span class=\"n\">⟹</span>\n<span class=\"w\">           </span><span class=\"n\">A4join</span><span class=\"w\"> </span><span class=\"n\">P</span><span class=\"w\"> </span><span class=\"n\">Q</span><span class=\"w\"> </span><span class=\"n\">∈</span><span class=\"w\"> </span><span class=\"n\">A4Lines</span><span class=\"w\"> </span><span class=\"n\">∧</span>\n<span class=\"w\">           </span><span class=\"n\">A4meets</span><span class=\"w\"> </span><span class=\"n\">P</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">A4join</span><span class=\"w\"> </span><span class=\"n\">P</span><span class=\"w\"> </span><span class=\"n\">Q</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">∧</span>\n<span class=\"w\">           </span><span class=\"n\">A4meets</span><span class=\"w\"> </span><span class=\"n\">Q</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">A4join</span><span class=\"w\"> </span><span class=\"n\">P</span><span class=\"w\"> </span><span class=\"n\">Q</span><span class=\"o\">)</span>\n<span class=\"w\"> </span><span class=\"n\">2.</span><span class=\"w\"> </span><span class=\"n\">⋀P</span><span class=\"w\"> </span><span class=\"n\">Q</span><span class=\"w\"> </span><span class=\"n\">m.</span>\n<span class=\"w\">       </span><span class=\"n\">P</span><span class=\"w\"> </span><span class=\"n\">≠</span><span class=\"w\"> </span><span class=\"n\">Q</span><span class=\"w\"> </span><span class=\"n\">⟹</span>\n<span class=\"w\">       </span><span class=\"n\">P</span><span class=\"w\"> </span><span class=\"n\">∈</span><span class=\"w\"> </span><span class=\"n\">A4Points</span><span class=\"w\"> </span><span class=\"n\">⟹</span>\n<span class=\"w\">       </span><span class=\"n\">Q</span><span class=\"w\"> </span><span class=\"n\">∈</span><span class=\"w\"> </span><span class=\"n\">A4Points</span><span class=\"w\"> </span><span class=\"n\">⟹</span>\n<span class=\"w\">       </span><span class=\"n\">A4meets</span><span class=\"w\"> </span><span class=\"n\">P</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"w\"> </span><span class=\"n\">⟹</span>\n<span class=\"w\">       </span><span class=\"n\">A4meets</span><span class=\"w\"> </span><span class=\"n\">Q</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"w\"> </span><span class=\"n\">⟹</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">A4join</span><span class=\"w\"> </span><span class=\"n\">P</span><span class=\"w\"> </span><span class=\"n\">Q</span>\n<span class=\"w\"> </span><span class=\"n\">3.</span><span class=\"w\"> </span><span class=\"n\">⋀P</span><span class=\"w\"> </span><span class=\"n\">l.</span><span class=\"w\"> </span><span class=\"n\">¬</span><span class=\"w\"> </span><span class=\"n\">A4meets</span><span class=\"w\"> </span><span class=\"n\">P</span><span class=\"w\"> </span><span class=\"n\">l</span><span class=\"w\"> </span><span class=\"n\">⟹</span>\n<span class=\"w\">           </span><span class=\"n\">P</span><span class=\"w\"> </span><span class=\"n\">∈</span><span class=\"w\"> </span><span class=\"n\">A4Points</span><span class=\"w\"> </span><span class=\"n\">⟹</span>\n<span class=\"w\">           </span><span class=\"n\">l</span><span class=\"w\"> </span><span class=\"n\">∈</span><span class=\"w\"> </span><span class=\"n\">A4Lines</span><span class=\"w\"> </span><span class=\"n\">⟹</span>\n<span class=\"w\">           </span><span class=\"n\">A4find_parallel</span><span class=\"w\"> </span><span class=\"n\">l</span><span class=\"w\"> </span><span class=\"n\">P</span>\n<span class=\"w\">           </span><span class=\"n\">∈</span><span class=\"w\"> </span><span class=\"n\">A4Lines</span><span class=\"w\"> </span><span class=\"n\">∧</span>\n<span class=\"w\">           </span><span class=\"n\">affine_plane_data.parallel</span>\n<span class=\"w\">            </span><span class=\"n\">A4Points</span><span class=\"w\"> </span><span class=\"n\">A4Lines</span><span class=\"w\"> </span><span class=\"n\">A4meets</span>\n<span class=\"w\">            </span><span class=\"o\">(</span><span class=\"n\">A4find_parallel</span><span class=\"w\"> </span><span class=\"n\">l</span><span class=\"w\"> </span><span class=\"n\">P</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">l</span><span class=\"w\"> </span><span class=\"n\">∧</span>\n<span class=\"w\">           </span><span class=\"n\">A4meets</span><span class=\"w\"> </span><span class=\"n\">P</span>\n<span class=\"w\">            </span><span class=\"o\">(</span><span class=\"n\">A4find_parallel</span><span class=\"w\"> </span><span class=\"n\">l</span><span class=\"w\"> </span><span class=\"n\">P</span><span class=\"o\">)</span>\n<span class=\"w\"> </span><span class=\"n\">4.</span><span class=\"w\"> </span><span class=\"n\">∃P</span><span class=\"w\"> </span><span class=\"n\">Q</span><span class=\"w\"> </span><span class=\"n\">R.</span>\n<span class=\"w\">       </span><span class=\"n\">P</span><span class=\"w\"> </span><span class=\"n\">∈</span><span class=\"w\"> </span><span class=\"n\">A4Points</span><span class=\"w\"> </span><span class=\"n\">∧</span>\n<span class=\"w\">       </span><span class=\"n\">Q</span><span class=\"w\"> </span><span class=\"n\">∈</span><span class=\"w\"> </span><span class=\"n\">A4Points</span><span class=\"w\"> </span><span class=\"n\">∧</span>\n<span class=\"w\">       </span><span class=\"n\">R</span><span class=\"w\"> </span><span class=\"n\">∈</span><span class=\"w\"> </span><span class=\"n\">A4Points</span><span class=\"w\"> </span><span class=\"n\">∧</span>\n<span class=\"w\">       </span><span class=\"n\">P</span><span class=\"w\"> </span><span class=\"n\">≠</span><span class=\"w\"> </span><span class=\"n\">Q</span><span class=\"w\"> </span><span class=\"n\">∧</span>\n<span class=\"w\">       </span><span class=\"n\">P</span><span class=\"w\"> </span><span class=\"n\">≠</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"w\"> </span><span class=\"n\">∧</span>\n<span class=\"w\">       </span><span class=\"n\">Q</span><span class=\"w\"> </span><span class=\"n\">≠</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"w\"> </span><span class=\"n\">∧</span>\n<span class=\"w\">       </span><span class=\"n\">¬</span><span class=\"w\"> </span><span class=\"n\">affine_plane_data.collinear</span>\n<span class=\"w\">           </span><span class=\"n\">A4Points</span><span class=\"w\"> </span><span class=\"n\">A4Lines</span><span class=\"w\"> </span><span class=\"n\">A4meets</span><span class=\"w\"> </span><span class=\"n\">P</span><span class=\"w\"> </span><span class=\"n\">Q</span>\n<span class=\"w\">           </span><span class=\"n\">R</span>\n</code></pre></div>\n<p>and because the 4th subgoal looked simple enough, I thought I'd try to prove that. It wasn't simple, and I tried proving something simpler, namely just the assertion that there's a P in A4Points. I couldn't even do that, so I set about finding the smallest thing that I couldn't prove using a theorem-proof kind of approach (i.e., not the one-liner kind of proof you get with <code>theorem \"stuff\" by simp</code>). </p>\n<p>Here's what I got to:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">theory</span><span class=\"w\"> </span><span class=\"n\">Affine1confusion</span>\n<span class=\"w\">  </span><span class=\"kp\">imports</span><span class=\"w\"> </span><span class=\"n\">Complex_Main</span>\n<span class=\"k\">begin</span>\n\n<span class=\"k\">datatype</span><span class=\"w\"> </span><span class=\"n\">a4pt</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Pa</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Qa</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Ra</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Sa</span>\n<span class=\"k\">definition</span><span class=\"w\">  </span><span class=\"s\">\"A4Points = {Pa, Qa, Ra, Sa}\"</span>\n\n<span class=\"kn\">theorem</span><span class=\"w\"> </span><span class=\"n\">test_case</span><span class=\"o\">:</span><span class=\"w\">  </span><span class=\"s\">\"Pa ∈ A4Points\"</span>\n</code></pre></div>\n<p>If I use <code>try</code> right after this, I find that <code>  by (simp add: A4Points_def)</code> will work. But if I try to do a more Isar-like proof (one suitable for my 4-part goal above, so it starts with  <code>proof</code>) then <code>try</code> suggests <code>apply blast</code>; when I paste that in, I get the dreaded \"Illegal application of proof command in \"state\" mode\" error. </p>\n<p>Recalling that I'm supposed to offer up an approach to the proof, I tried <code>proof -</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">theorem</span><span class=\"w\"> </span><span class=\"n\">test_case</span><span class=\"o\">:</span><span class=\"w\">  </span><span class=\"s\">\"Pa ∈ A4Points\"</span>\n<span class=\"k\">proof</span><span class=\"w\"> </span><span class=\"o\">-</span>\n<span class=\"w\">  </span><span class=\"kt\">try</span>\n</code></pre></div>\n<p>bit that results in \"tried in vain\".</p>\n<p>Any suggestions?</p>",
        "id": 425727772,
        "sender_full_name": "John  Hughes",
        "timestamp": 1710028008
    },
    {
        "content": "<p>Here try does nothing, because there is no goal at that point:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">theorem</span><span class=\"w\"> </span><span class=\"n\">test_case</span><span class=\"o\">:</span><span class=\"w\">  </span><span class=\"s\">\"Pa ∈ A4Points\"</span>\n<span class=\"k\">proof</span><span class=\"w\"> </span><span class=\"o\">-</span>\n<span class=\"w\">  </span><span class=\"kt\">try</span>\n</code></pre></div>",
        "id": 425750703,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1710054059
    },
    {
        "content": "<p>Try this instead:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">theorem</span><span class=\"w\"> </span><span class=\"n\">test_case</span><span class=\"o\">:</span><span class=\"w\">  </span><span class=\"s\">\"Pa ∈ A4Points\"</span>\n<span class=\"k\">proof</span><span class=\"w\"> </span><span class=\"o\">-</span>\n<span class=\"w\">  </span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">thesis</span>\n<span class=\"w\">     </span><span class=\"kt\">try</span>\n</code></pre></div>",
        "id": 425750712,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1710054077
    },
    {
        "content": "<p>Or this, without the <code>proof</code> to have a goal:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">theorem</span><span class=\"w\"> </span><span class=\"n\">test_case</span><span class=\"o\">:</span><span class=\"w\">  </span><span class=\"s\">\"Pa ∈ A4Points\"</span>\n<span class=\"w\">  </span><span class=\"kt\">try</span>\n</code></pre></div>",
        "id": 425750741,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1710054115
    },
    {
        "content": "<p>Thanks.  But I'm puzzled by your \"there is no goal\" assertion. Here's what  the interface shows:<br>\n<a href=\"/user_uploads/14278/GgiFe3cFONXduYEbA3PuIhHx/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/14278/GgiFe3cFONXduYEbA3PuIhHx/image.png\" title=\"image.png\"><img src=\"/user_uploads/14278/GgiFe3cFONXduYEbA3PuIhHx/image.png\"></a></div><p>Over on the right, I can clearly see a \"goal\" in the Output panel. </p>\n<p>I suspect that this has something to do with the \"proof (state)\" and \"proof (prove)\" distinction, which I have never managed to understand. In \"proof (state)\", is the word \"state\" a noun, as in \"I'm showing you the current state of the proof\", or an imperative verb, as in \"we're doing a proof, and now it's time for you to <em>state</em> something\"?</p>\n<p>In general the keywords in Isar seems to have this peculiar characteristic that they're similar to things mathematicians write during proofs, but actually mean something a little different; I'm trying to gradually grasp the subtle differences. At the very most basic, after I write a theorem and then the word \"Proof: \", I usually set about proving the thing claimed by the theorem. But in Isar, I have to start using these imperative verb like \"show\" or \"obtain\", as if I were directing some other person/entity to do the proving. This constantly trips me up.</p>",
        "id": 425776834,
        "sender_full_name": "John  Hughes",
        "timestamp": 1710080126
    },
    {
        "content": "<p>I was never careful enough to realize that <code>state</code> and <code>proof</code> are different…</p>",
        "id": 425777906,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1710080892
    },
    {
        "content": "<p>Anyhow, I think of proof of theorems like as either <code>by some obvious arguments</code> or <code>Proof. First step1. Then step2. Finally the theorem holds</code></p>",
        "id": 425777983,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1710080970
    },
    {
        "content": "<p>If you look at this for example <a href=\"https://en.wikipedia.org/wiki/Square_root_of_2#Proof_by_unique_factorization\">https://en.wikipedia.org/wiki/Square_root_of_2#Proof_by_unique_factorization</a>, every sentence is one intermediate step.</p>",
        "id": 425778162,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1710081117
    },
    {
        "content": "<p>And remark that Isabelle is an ITP, so you are directing Isabelle to do the proof for you…</p>",
        "id": 425778483,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1710081410
    },
    {
        "content": "<p>The proof state are the goals which are still open</p>",
        "id": 425778543,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1710081481
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span>\n<span class=\"w\">  </span><span class=\"kp\">shows</span><span class=\"w\"> </span><span class=\"s\">‹P ∧ (R ⟶ Q)›</span>\n<span class=\"k\">proof</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">intro</span><span class=\"w\"> </span><span class=\"n\">allI</span><span class=\"w\"> </span><span class=\"n\">conjI</span><span class=\"w\"> </span><span class=\"n\">impI</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">―‹I</span><span class=\"w\"> </span><span class=\"n\">sometimes</span><span class=\"w\"> </span><span class=\"n\">uses</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">intro</span><span class=\"w\"> </span><span class=\"n\">allI</span><span class=\"w\"> </span><span class=\"n\">conjI</span><span class=\"w\"> </span><span class=\"n\">impI</span><span class=\"o\">)</span><span class=\"n\">›</span>\n<span class=\"c\">(*</span>\n<span class=\"c\">proof (state)</span>\n<span class=\"c\">goal (2 subgoals):</span>\n<span class=\"c\"> 1. P</span>\n<span class=\"c\"> 2. R ⟹ Q</span>\n<span class=\"c\">*)</span>\n<span class=\"w\">  </span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"n\">P</span>\n<span class=\"w\">    </span><span class=\"gr\">sorry</span>\n<span class=\"c\">(*</span>\n<span class=\"c\">proof (state)</span>\n<span class=\"c\">this:</span>\n<span class=\"c\">  P</span>\n\n<span class=\"c\">goal (1 subgoal):</span>\n<span class=\"c\"> 1. R ⟹ Q</span>\n<span class=\"c\">*)</span>\n<span class=\"k\">next</span><span class=\"w\"> </span><span class=\"c\">(*actually optional*)</span>\n<span class=\"c\">(*</span>\n<span class=\"c\">proof (state)</span>\n<span class=\"c\">goal (1 subgoal):</span>\n<span class=\"c\"> 1. R ⟹ Q</span>\n<span class=\"c\">*)</span>\n<span class=\"w\">  </span><span class=\"k\">assume</span><span class=\"w\"> </span><span class=\"n\">R</span>\n<span class=\"w\">  </span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"n\">Q</span>\n<span class=\"w\">    </span><span class=\"gr\">sorry</span>\n<span class=\"c\">(*proof (state)</span>\n<span class=\"c\">this:</span>\n<span class=\"c\">  Q</span>\n\n<span class=\"c\">goal:</span>\n<span class=\"c\">No subgoals!*)</span>\n<span class=\"k\">qed</span>\n</code></pre></div>",
        "id": 425778672,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1710081568
    },
    {
        "content": "<p>(<code>this</code> is the last fact the proof chain)</p>",
        "id": 425778686,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1710081588
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"233198\">Mathias Fleury</span> <a href=\"#narrow/stream/238552-Beginner-Questions/topic/Simple.20set.20proof/near/425778483\">said</a>:</p>\n<blockquote>\n<p>And remark that Isabelle is an ITP, so you are directing Isabelle to do the proof for you…</p>\n</blockquote>\n<p>I confess that after my initial foray into using Isabelle, I tended to think of it as a \"proof obstructor\" rather than \"assistant.\" I kept getting to situations where I had shown some statement <code>P</code>, and my goal was <code>P</code>, and I couldn't get Isabelle to say \"OK, you're done.\" That made it just about the worst \"assistant\" imaginable. :) </p>\n<p>Your example, and the annotation of it, are really helpful, and I've played around with a bunch of variations on it to better understand what's going on by seeing what results various things produced. </p>\n<p>Returning to the example:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span>\n<span class=\"w\">  </span><span class=\"kp\">shows</span><span class=\"w\"> </span><span class=\"s\">‹P ∧ (R ⟶ Q)›</span>\n<span class=\"k\">proof</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">intro</span><span class=\"w\"> </span><span class=\"n\">allI</span><span class=\"w\"> </span><span class=\"n\">conjI</span><span class=\"w\"> </span><span class=\"n\">impI</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">―‹I</span><span class=\"w\"> </span><span class=\"n\">sometimes</span><span class=\"w\"> </span><span class=\"n\">uses</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">intro</span><span class=\"w\"> </span><span class=\"n\">allI</span><span class=\"w\"> </span><span class=\"n\">conjI</span><span class=\"w\"> </span><span class=\"n\">impI</span><span class=\"o\">)</span><span class=\"n\">›</span>\n<span class=\"c\">(*</span>\n<span class=\"c\">proof (state)</span>\n<span class=\"c\">goal (2 subgoals):</span>\n<span class=\"c\"> 1. P</span>\n<span class=\"c\"> 2. R ⟹ Q</span>\n<span class=\"c\">*)</span>\n<span class=\"w\">  </span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"n\">P</span>\n<span class=\"w\">    </span><span class=\"gr\">sorry</span>\n<span class=\"c\">(*</span>\n<span class=\"c\">proof (state)</span>\n<span class=\"c\">this:</span>\n<span class=\"c\">  P</span>\n\n<span class=\"c\">goal (1 subgoal):</span>\n<span class=\"c\"> 1. R ⟹ Q</span>\n<span class=\"c\">*)</span>\n</code></pre></div>\n<p>I have a range of questions from the trivial to higher level. </p>\n<ol>\n<li>\n<p>You did some  mumbo-jumbo with the <code>intro allI conjI impI</code> at the start, and I can see what that achieves, but it feels a lot like a  apply-script. Is that common in Isar proofs, that there's a little bit of shuffling like this at the start to put the goals into a state that you like? </p>\n</li>\n<li>\n<p>When it came to <code>show P</code> in your proof, could you have instead chosen to show something else that you might need later? Am I right in thinking that if I want to do that, I should say \"have\" rather than \"show\"? That is to say, I can use <code>have</code> (with names perhaps) to marshal a bunch of facts that I'll use later, doing something like <code>  have sillyFact:\"True\" by simp</code>. Is that right? </p>\n</li>\n<li>\n<p>In your proof, you could have chosen to show the <em>other</em> goal, right? I did that with </p>\n</li>\n</ol>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span>\n<span class=\"w\">  </span><span class=\"kp\">shows</span><span class=\"w\"> </span><span class=\"s\">‹P ∧ (R ⟶ Q)›</span>\n<span class=\"k\">proof</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">intro</span><span class=\"w\"> </span><span class=\"n\">allI</span><span class=\"w\"> </span><span class=\"n\">conjI</span><span class=\"w\"> </span><span class=\"n\">impI</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">―‹I</span><span class=\"w\"> </span><span class=\"n\">sometimes</span><span class=\"w\"> </span><span class=\"n\">uses</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">intro</span><span class=\"w\"> </span><span class=\"n\">allI</span><span class=\"w\"> </span><span class=\"n\">conjI</span><span class=\"w\"> </span><span class=\"n\">impI</span><span class=\"o\">)</span><span class=\"n\">›</span>\n<span class=\"w\">  </span><span class=\"k\">show</span><span class=\"w\">  </span><span class=\"s\">\"R ⟹ Q\"</span>\n<span class=\"w\">    </span><span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>and ended up with $P$ as my only remaining goal. But I had to put double-quotes around <code>R ⟹ Q</code>. I take it that there's a 'single names don't need quotes' 'rule here or something. Would it be weird to write</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"s\">\"P\"</span>\n</code></pre></div>\n<p>i.e., to <em>always</em> use double-quotes around the thing I want to show? </p>\n<ol start=\"4\">\n<li>Am I right that \"?thesis\" always refers to the <code>shows</code> item in the theorem? No amount of proving that we've already done changes its value? It doesn't, for instance, become the current goal after we've done a few steps, right?</li>\n<li>Returning to item 1 above, my own approach to proving something like your lemma is one that's failed me repeatedly, although I've never really understood why. It looks something like this:</li>\n</ol>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span>\n<span class=\"w\">  </span><span class=\"kp\">shows</span><span class=\"w\"> </span><span class=\"s\">‹P ∧(R ⟶ Q)›</span>\n<span class=\"k\">proof</span><span class=\"w\"> </span><span class=\"o\">-</span>\n<span class=\"w\">  </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"n\">factP</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">P</span>\n<span class=\"w\">    </span><span class=\"gr\">sorry</span>\n<span class=\"w\">  </span><span class=\"k\">also</span><span class=\"w\"> </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"n\">factQ</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"R ⟶ Q\"</span>\n<span class=\"w\">    </span><span class=\"gr\">sorry</span>\n\n<span class=\"w\">  </span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">thesis</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">factP</span><span class=\"w\"> </span><span class=\"n\">factQ</span><span class=\"o\">)</span>\n<span class=\"k\">qed</span>\n<span class=\"sx\">``</span>\n<span class=\"kp\">where</span><span class=\"w\"> </span><span class=\"n\">that</span><span class=\"w\"> </span><span class=\"n\">last</span><span class=\"w\"> </span><span class=\"sx\">`show`</span><span class=\"w\"> </span><span class=\"n\">line</span><span class=\"w\"> </span><span class=\"n\">isn't</span><span class=\"w\"> </span><span class=\"n\">even</span><span class=\"w\"> </span><span class=\"n\">syntactically</span><span class=\"w\"> </span><span class=\"n\">correct...maybe</span><span class=\"w\"> </span><span class=\"n\">I</span><span class=\"w\"> </span><span class=\"n\">need</span><span class=\"w\"> </span><span class=\"sx\">`using`</span><span class=\"w\"> </span><span class=\"n\">or</span><span class=\"w\"> </span><span class=\"n\">something.</span><span class=\"w\"> </span><span class=\"n\">It</span><span class=\"w\"> </span><span class=\"n\">certainly</span><span class=\"w\"> </span><span class=\"n\">feels</span><span class=\"w\"> </span><span class=\"n\">as</span><span class=\"w\"> </span><span class=\"kp\">if</span><span class=\"w\"> </span><span class=\"n\">knowing</span><span class=\"w\"> </span><span class=\"n\">factP</span><span class=\"w\"> </span><span class=\"kp\">and</span><span class=\"w\"> </span><span class=\"n\">factQ</span><span class=\"w\"> </span><span class=\"n\">should</span><span class=\"w\"> </span><span class=\"n\">be</span><span class=\"w\"> </span><span class=\"n\">enough</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">allow</span><span class=\"w\"> </span><span class=\"n\">me</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">conclude</span><span class=\"w\"> </span><span class=\"n\">their</span><span class=\"w\"> </span><span class=\"n\">conjunction.</span><span class=\"w\"> </span><span class=\"n\">Is</span><span class=\"w\"> </span><span class=\"n\">there</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">way</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">do</span><span class=\"w\"> </span><span class=\"n\">this</span><span class=\"w\"> </span><span class=\"k\">proof</span><span class=\"w\"> </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">general</span><span class=\"w\"> </span><span class=\"kp\">structure</span><span class=\"w\"> </span><span class=\"n\">I've</span><span class=\"w\"> </span><span class=\"n\">outlined</span><span class=\"w\"> </span><span class=\"n\">here</span><span class=\"o\">?</span>\n\n<span class=\"n\">5.</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">trivial</span><span class=\"o\">!)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">In</span><span class=\"w\"> </span><span class=\"n\">your</span><span class=\"w\"> </span><span class=\"kn\">lemma</span><span class=\"o\">-</span><span class=\"n\">statement</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">thesis</span><span class=\"w\"> </span><span class=\"kp\">is</span><span class=\"w\"> </span><span class=\"n\">shown</span><span class=\"w\"> </span><span class=\"n\">between</span><span class=\"w\"> </span><span class=\"s\">\"&lt;\"</span><span class=\"w\"> </span><span class=\"kp\">and</span><span class=\"w\"> </span><span class=\"s\">\"&gt;\"</span><span class=\"w\"> </span><span class=\"n\">signs</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">but</span><span class=\"w\"> </span><span class=\"n\">not</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">standard</span><span class=\"w\"> </span><span class=\"n\">ones;</span><span class=\"w\"> </span><span class=\"n\">I</span><span class=\"w\"> </span><span class=\"n\">think</span><span class=\"w\"> </span><span class=\"n\">these</span><span class=\"w\"> </span><span class=\"n\">are</span><span class=\"w\"> </span><span class=\"n\">what</span><span class=\"w\"> </span><span class=\"n\">are</span><span class=\"w\"> </span><span class=\"n\">called</span><span class=\"w\"> </span><span class=\"n\">cartouches.</span><span class=\"w\"> </span><span class=\"n\">What</span><span class=\"w\"> </span><span class=\"n\">ASCII</span><span class=\"w\"> </span><span class=\"n\">key</span><span class=\"o\">-</span><span class=\"n\">combo</span><span class=\"w\"> </span><span class=\"n\">produces</span><span class=\"w\"> </span><span class=\"n\">these</span><span class=\"o\">?</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">just</span><span class=\"w\"> </span><span class=\"n\">after</span><span class=\"w\"> </span><span class=\"sx\">`proof`</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">there's</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">comment</span><span class=\"w\"> </span><span class=\"n\">introduced</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">something</span><span class=\"w\"> </span><span class=\"n\">that</span><span class=\"w\"> </span><span class=\"n\">looks</span><span class=\"w\"> </span><span class=\"n\">like</span><span class=\"w\"> </span><span class=\"n\">an</span><span class=\"w\"> </span><span class=\"n\">en</span><span class=\"o\">-</span><span class=\"n\">dash</span><span class=\"w\"> </span><span class=\"n\">followed</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"k\">cartouche</span><span class=\"n\">;</span><span class=\"w\"> </span><span class=\"n\">what</span><span class=\"w\"> </span><span class=\"n\">ASCII</span><span class=\"w\"> </span><span class=\"n\">key</span><span class=\"o\">-</span><span class=\"n\">combo</span><span class=\"w\"> </span><span class=\"n\">produces</span><span class=\"w\"> </span><span class=\"n\">that</span><span class=\"o\">?</span>\n\n<span class=\"n\">6.</span><span class=\"w\"> </span><span class=\"n\">Regarding</span><span class=\"w\"> </span><span class=\"sx\">`proof(prove)`</span><span class=\"w\"> </span><span class=\"n\">vs</span><span class=\"w\">  </span><span class=\"sx\">`proof (state)`</span><span class=\"w\"> </span><span class=\"ow\">...</span><span class=\"w\"> </span><span class=\"n\">I'm</span><span class=\"w\"> </span><span class=\"n\">still</span><span class=\"w\"> </span><span class=\"n\">not</span><span class=\"w\"> </span><span class=\"n\">certain</span><span class=\"w\"> </span><span class=\"n\">about</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">noun/verb</span><span class=\"w\"> </span><span class=\"n\">distinction.</span><span class=\"w\"> </span><span class=\"n\">And</span><span class=\"w\"> </span><span class=\"n\">I</span><span class=\"w\"> </span><span class=\"k\">assume</span><span class=\"w\"> </span><span class=\"n\">that</span><span class=\"w\"> </span><span class=\"n\">when</span><span class=\"w\"> </span><span class=\"n\">you</span><span class=\"w\"> </span><span class=\"n\">talk</span><span class=\"w\"> </span><span class=\"n\">about</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">goal</span><span class=\"w\"> </span><span class=\"n\">being</span><span class=\"w\"> </span><span class=\"s\">\"open\"</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">operationally</span><span class=\"w\"> </span><span class=\"n\">you</span><span class=\"w\"> </span><span class=\"n\">mean</span><span class=\"w\"> </span><span class=\"s\">\"it appears in the list of goals/subgoal in the output panel\"</span><span class=\"ow\">.</span><span class=\"w\"> </span><span class=\"n\">Is</span><span class=\"w\"> </span><span class=\"n\">that</span><span class=\"w\"> </span><span class=\"n\">right</span><span class=\"o\">?</span>\n\n<span class=\"n\">7.</span><span class=\"w\"> </span><span class=\"n\">I'm</span><span class=\"w\"> </span><span class=\"n\">still</span><span class=\"w\"> </span><span class=\"n\">confused</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"s\">\"there is no goal\"</span><span class=\"w\"> </span><span class=\"n\">claim</span><span class=\"w\"> </span><span class=\"n\">vs.</span><span class=\"w\"> </span><span class=\"n\">my</span><span class=\"w\"> </span><span class=\"n\">screenshot.</span>\n</code></pre></div>",
        "id": 425783302,
        "sender_full_name": "John  Hughes",
        "timestamp": 1710085660
    },
    {
        "content": "<blockquote>\n<p>You did some mumbo-jumbo with the intro allI conjI impI at the start, and I can see what that achieves, but it feels a lot like a apply-script. Is that common in Isar proofs, that there's a little bit of shuffling like this at the start to put the goals into a state that you like? </p>\n</blockquote>\n<p>This usually arises in definitions with HOL.forall quantifiers intead of Pure.forall quantifiers (because you want a bool instead of prop). And even then, rarely.</p>",
        "id": 425786197,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1710088331
    },
    {
        "content": "<blockquote>\n<p>When it came to show P in your proof, could you have instead chosen to show something else that you might need later? Am I right in thinking that if I want to do that, I should say \"have\" rather than \"show\"? That is to say, I can use have (with names perhaps) to marshal a bunch of facts that I'll use later, doing something like   have sillyFact:\"True\" by simp. Is that right? </p>\n</blockquote>\n<p>Exactly</p>",
        "id": 425786229,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1710088366
    },
    {
        "content": "<blockquote>\n<p>[Double quotes]</p>\n</blockquote>\n<p>I prefer cartouches over quotes, but there are more annoying to type. So I tend to skip them, because I am too lazy. But it does not matter</p>",
        "id": 425786366,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1710088510
    },
    {
        "content": "<blockquote>\n<p>Am I right that \"?thesis\" always refers to the shows item in the theorem? No amount of proving that we've already done changes its value? It doesn't, for instance, become the current goal after we've done a few steps, right?</p>\n</blockquote>\n<p>It refers to the last fact before a <code>proof</code> keyword.</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span>\n<span class=\"w\">  </span><span class=\"kp\">shows</span><span class=\"w\"> </span><span class=\"n\">P</span>\n<span class=\"k\">proof</span><span class=\"w\"> </span><span class=\"o\">-</span>\n<span class=\"w\">  </span><span class=\"kt\">term</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">thesis</span><span class=\"w\"> </span><span class=\"c\">(*P*)</span>\n<span class=\"w\">  </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"s\">\"A = 1\"</span><span class=\"w\"> </span><span class=\"kp\">for</span><span class=\"w\"> </span><span class=\"n\">A</span>\n<span class=\"w\">  </span><span class=\"k\">proof</span><span class=\"w\"> </span><span class=\"o\">-</span>\n<span class=\"w\">    </span><span class=\"kt\">term</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">thesis</span><span class=\"w\"> </span><span class=\"c\">(*A = 1*)</span>\n<span class=\"w\">    </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"s\">\"A = A\"</span>\n<span class=\"w\">    </span><span class=\"k\">proof</span><span class=\"w\"> </span><span class=\"o\">-</span>\n<span class=\"w\">      </span><span class=\"kt\">term</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">thesis</span><span class=\"w\"> </span><span class=\"c\">(*A = A*)</span>\n</code></pre></div>",
        "id": 425786498,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1710088643
    },
    {
        "content": "<blockquote>\n<p>Returning to item 1 above, my own approach to proving something like your lemma is one that's failed me repeatedly, although I've never really understood why. It looks something like this:</p>\n</blockquote>\n<p>Your <code>(by factP factQ)</code> is not valid isabelle. This is a working proof:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span>\n<span class=\"w\">  </span><span class=\"kp\">shows</span><span class=\"w\"> </span><span class=\"s\">‹P ∧(R ⟶ Q) ∧ S›</span>\n<span class=\"k\">proof</span><span class=\"w\"> </span><span class=\"o\">-</span>\n<span class=\"w\">  </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"n\">factP</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">P</span>\n<span class=\"w\">    </span><span class=\"gr\">sorry</span>\n<span class=\"w\">  </span><span class=\"k\">moreover</span><span class=\"w\"> </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"s\">\"R ⟶ Q\"</span>\n<span class=\"w\">    </span><span class=\"gr\">sorry</span>\n<span class=\"w\">  </span><span class=\"k\">moreover</span><span class=\"w\"> </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"s\">\"S\"</span>\n<span class=\"w\">    </span><span class=\"gr\">sorry</span>\n<span class=\"w\">  </span><span class=\"k\">ultimately</span><span class=\"w\"> </span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">thesis</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">intro</span><span class=\"w\"> </span><span class=\"n\">conjI</span><span class=\"o\">)</span>\n<span class=\"k\">qed</span>\n</code></pre></div>\n<p><code>conjI</code> decomposes <code>P ∧(R ⟶ Q)∧ S</code> into <code>P</code> and <code>R ⟶ Q</code> and <code>S</code> which are then picked from the context (the ultimately adds all those facts to the context)</p>",
        "id": 425786828,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1710088929
    },
    {
        "content": "<blockquote>\n<p>Cartouche</p>\n</blockquote>\n<p>Isabelle/jedit should give the cartouche as completion for <code>\"</code> (it just takes a while)</p>",
        "id": 425786871,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1710088997
    },
    {
        "content": "<p>The other is <code>\\&lt;comment&gt;</code></p>",
        "id": 425786928,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1710089054
    },
    {
        "content": "<p>Isabelle is optimistic, if you write a show, it will assume that it worked and will produce a <code>No subgoals!</code>, even if it obviously does not:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span>\n<span class=\"w\">  </span><span class=\"kp\">shows</span><span class=\"w\"> </span><span class=\"s\">‹False›</span>\n<span class=\"k\">proof</span><span class=\"w\"> </span><span class=\"o\">-</span>\n<span class=\"w\">  </span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">thesis</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">intro</span><span class=\"w\"> </span><span class=\"n\">conjI</span><span class=\"o\">)</span>\n<span class=\"k\">qed</span>\n</code></pre></div>\n<p>This is necessary for the multi-threaded model</p>",
        "id": 425786978,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1710089147
    },
    {
        "content": "<p>LOok at the figure <a href=\"https://cca.informatik.uni-freiburg.de/fleury/tutorial-wien23/06-Isar.pdf\">https://cca.informatik.uni-freiburg.de/fleury/tutorial-wien23/06-Isar.pdf</a> on page 8 (I have taken it from the Isabelle documentation, although I do not refind it currently), maybe this helps for the prove/state stuff</p>",
        "id": 425787140,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1710089321
    },
    {
        "content": "<p>Thanks. I think that answers about 90% of my questions....which means I'll be back with others soon. :)</p>",
        "id": 425788708,
        "sender_full_name": "John  Hughes",
        "timestamp": 1710090760
    }
]