[
    {
        "content": "<p>Hi, <br>\nI am on Isabelle 2023 and I am trying to prove the following with Sledgehammer.</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">theory</span><span class=\"w\"> </span><span class=\"n\">category</span>\n<span class=\"w\">  </span><span class=\"kp\">imports</span><span class=\"w\"> </span><span class=\"n\">Main</span>\n<span class=\"k\">begin</span>\n\n<span class=\"k\">locale</span><span class=\"w\"> </span><span class=\"n\">category</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">  </span><span class=\"kp\">fixes</span><span class=\"w\">   </span><span class=\"n\">E</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"'a ⇒ bool\"</span><span class=\"w\"> </span><span class=\"kp\">and</span>\n<span class=\"w\">  </span><span class=\"n\">composition_law</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"'a ⇒ 'a ⇒ 'a\"</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"kp\">infix</span><span class=\"w\"> </span><span class=\"s\">\"⋅\"</span><span class=\"w\"> </span><span class=\"n\">60</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"c\">(* Existence predicate *)</span>\n<span class=\"w\">  </span><span class=\"c\">(* Domain *)</span>\n<span class=\"w\">  </span><span class=\"kp\">and</span><span class=\"w\"> </span><span class=\"n\">dom</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"'a ⇒ 'a\"</span>\n<span class=\"w\">  </span><span class=\"c\">(* Codomain *)</span>\n<span class=\"w\">  </span><span class=\"kp\">and</span><span class=\"w\"> </span><span class=\"n\">cod</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"'a ⇒ 'a\"</span>\n<span class=\"w\">  </span><span class=\"kp\">assumes</span><span class=\"w\"> </span><span class=\"n\">assoc</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"f ⋅ (g ⋅ h) = (f ⋅ g) ⋅ h\"</span>\n<span class=\"w\">  </span><span class=\"kp\">and</span>\n<span class=\"w\">  </span><span class=\"s\">\"⟦ E f ⟧ ⟹ (dom f) ⋅ f = f\"</span><span class=\"w\"> </span><span class=\"kp\">and</span>\n<span class=\"w\">  </span><span class=\"s\">\"⟦ E f ⟧ ⟹ f ⋅ (cod f) = f\"</span><span class=\"w\"> </span><span class=\"kp\">and</span>\n<span class=\"w\">  </span><span class=\"s\">\"⟦ E f ; E g ; cod f = dom g ⟧ ⟹ E (f ⋅ g)\"</span><span class=\"w\"> </span><span class=\"kp\">and</span>\n<span class=\"w\">  </span><span class=\"s\">\"⟦ E f ; E g ; cod f = dom g ⟧ ⟹ dom (f ⋅ g) = dom f\"</span><span class=\"w\"> </span><span class=\"kp\">and</span>\n<span class=\"w\">  </span><span class=\"s\">\"⟦ E f ; E g ; cod f = dom g ⟧ ⟹ cod (f ⋅ g) = cod g\"</span><span class=\"w\"> </span><span class=\"kp\">and</span>\n<span class=\"w\">  </span><span class=\"s\">\"⟦ E (f ⋅ g) ⟧ ⟹ E g\"</span><span class=\"w\"> </span><span class=\"kp\">and</span>\n<span class=\"w\">  </span><span class=\"s\">\"⟦ E (f ⋅ g) ⟧ ⟹ E f\"</span><span class=\"w\"> </span><span class=\"kp\">and</span>\n<span class=\"w\">  </span><span class=\"s\">\"⟦ E f ⟧ ⟹ cod (dom f) = dom f\"</span>\n\n<span class=\"kn\">theorem</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"kp\">in</span><span class=\"w\"> </span><span class=\"n\">category</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">codid</span><span class=\"w\"> </span><span class=\"o\">:</span>\n<span class=\"w\"> </span><span class=\"s\">\"⟦ E f ; E g; cod f = cod g ⟧ ⟹ g ⋅ (cod f) = g\"</span>\n<span class=\"kt\">sledgehammer</span>\n</code></pre></div>\n<p>When I run sledgehammer it says that cvc4, verit and zipperposition found a proof.<br>\ncvc4 says \"Try this: <code>by (smt (verit) category_axioms category_def)</code>\" but when I do this verit fails and says</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"n\">Failure</span><span class=\"w\"> </span><span class=\"n\">node</span>\n<span class=\"n\">Enter</span><span class=\"w\"> </span><span class=\"n\">MATCH</span>\n</code></pre></div>\n<p>and then returns a huge verit proof-term that is too big to copy and paste here.<br>\nzipperposition says: \"One-line proof reconstruction failed: <code>by (metis category_axioms category_def)</code>\" and doesn't give anything more.</p>\n<p>Something seems wrong here. This theorem seems easy and it should be fine for sledgehammer to reconstruct it.<br>\nShould I reinstall Isabelle or what? <br>\nCan anybody else reproduce this error?</p>",
        "id": 398779151,
        "sender_full_name": "Patrick Nicodemus",
        "timestamp": 1698360958
    },
    {
        "content": "<p>This seems messed up, like something is wrong with the way I installed verit or a configuration problem. How can I debug this?</p>",
        "id": 398963671,
        "sender_full_name": "Patrick Nicodemus",
        "timestamp": 1698438239
    },
    {
        "content": "<p>Ah i see what the problem is, i didn't name my locale assumptions and that breaks things apparently. Adding names to the locale assumptions makes everything work. However I do think that this should be an error or a warning for the user at the time the locale is defined! it is very confusing that it accepts the locale definition and then later code just doesn't work</p>",
        "id": 398973575,
        "sender_full_name": "Patrick Nicodemus",
        "timestamp": 1698443955
    },
    {
        "content": "<p>This is a problem in the reconstruction, but not one we can fix. In the reconstruction there is one rule where we call auto and then its unifiers starts looping (causing your error message)</p>",
        "id": 399009364,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1698467615
    },
    {
        "content": "<p>z3 instead works</p>",
        "id": 399009399,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1698467644
    },
    {
        "content": "<p>This has nothing to do with the locale name, you just entered the non-determinism of Sledgehammer suggestions…</p>",
        "id": 399009455,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1698467694
    },
    {
        "content": "<p>With</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">theorem</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"kp\">in</span><span class=\"w\"> </span><span class=\"n\">category</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">codid</span><span class=\"w\"> </span><span class=\"o\">:</span>\n<span class=\"w\"> </span><span class=\"s\">\"⟦ E g; cod f = cod g ⟧ ⟹ g ⋅ (cod f) = g\"</span>\n<span class=\"w\">  </span><span class=\"n\">supply</span><span class=\"w\"> </span><span class=\"o\">[[</span><span class=\"n\">smt_trace</span><span class=\"o\">]]</span>\n<span class=\"w\">  </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">smt</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">verit</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">category_axioms</span><span class=\"w\"> </span><span class=\"n\">category_def</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>you can see the proof steps</p>",
        "id": 399009507,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1698467761
    },
    {
        "content": "<p>Ok. So when I fixed the problem by giving specific names to the assumptions, do you have any idea how that would have made that resolve the issues?</p>",
        "id": 399061520,
        "sender_full_name": "Patrick Nicodemus",
        "timestamp": 1698506927
    }
]