[
    {
        "content": "<p>I do not want to sound too greedy in expecting too much of the magic Sledgehammer tool, I just want to understand its limitations.<br>\nIt seems to me that Sledgehammer has a bias against unfolding locale definitions even when the theorem for the locale definition is explicitly passed.</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"w\">    </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"n\">t</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"category E\"</span><span class=\"w\"> </span><span class=\"c\">(* need to know that E is an instance of the locale before we can apply the definition of the locale. *)</span>\n<span class=\"w\">    </span><span class=\"k\">from</span><span class=\"w\"> </span><span class=\"n\">this</span><span class=\"w\"> </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"s\">\"x ∈ obj E ⟹ precategory.id E x ∈ hom E x x\"</span>\n<span class=\"w\">      </span><span class=\"kt\">sledgehammer</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">add</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">category_def</span><span class=\"w\"> </span><span class=\"n\">t</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"c\">(* This eventually finds a proof after about 2 or 3 minutes. *)</span>\n<span class=\"w\">     </span><span class=\"kt\">sledgehammer</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">add</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">category_def</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"c\">(* Same, doesn't matter whether we pass the proof that E is a category. *)</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"w\">    </span><span class=\"k\">from</span><span class=\"w\"> </span><span class=\"n\">this</span><span class=\"w\"> </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"s\">\"x ∈ obj E ⟹ precategory.id E x ∈ hom E x x\"</span>\n<span class=\"w\">      </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">add</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">category_def</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"c\">(* 0ms. *)</span>\n</code></pre></div>\n<p>Is my interpretation correct here, that Sledgehammer just strongly prefers to avoid unfolding locale definitions?</p>\n<p>Why is this? Or otherwise how should I interpret these results?</p>",
        "id": 399319341,
        "sender_full_name": "Patrick Nicodemus",
        "timestamp": 1698677934
    },
    {
        "content": "<p>In general, ATPs tend to rarely unfold definitions as you make terms much bigger</p>",
        "id": 399325669,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1698679678
    },
    {
        "content": "<p>moreover, this could be one of the cases where HO provers would perform better than FO provers</p>",
        "id": 399325889,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1698679733
    },
    {
        "content": "<p>but this would be related to this goal in particular</p>",
        "id": 399326125,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1698679790
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"233198\">Mathias Fleury</span> <a href=\"#narrow/stream/238552-Beginner-Questions/topic/Sledgehammer.20and.20locales.3F/near/399325669\">said</a>:</p>\n<blockquote>\n<p>In general, ATPs tend to rarely unfold definitions as you make terms much bigger</p>\n</blockquote>\n<p>and I should add: they will never unfold many of them. Hence it makes sense to unfold + apply auto at the beginning (if this leads usually to bad proofs)</p>",
        "id": 399326351,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1698679833
    }
]