[
    {
        "content": "<p>I'm trying to formalize some basic results about Henkin-Tarski-Monk cylindric algebras in Isabelle/HOL for practice. When I try to run sledgehammer in this following context (with <code>cvc4 verit z3 e spass vampire zipperposition</code> as the list of provers), it says <code>Unknown ATP: agsyhol</code>. This is in Isabelle2023 on Linux.</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">theory</span><span class=\"w\"> </span><span class=\"n\">Cylindric_Algebras</span>\n<span class=\"w\">  </span><span class=\"kp\">imports</span><span class=\"w\"> </span><span class=\"n\">HOL.Nat</span><span class=\"w\"> </span><span class=\"n\">HOL.Boolean_Algebras</span>\n<span class=\"k\">begin</span>\n\n<span class=\"k\">locale</span><span class=\"w\"> </span><span class=\"n\">cylindric_algebra</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">boolean_algebra</span><span class=\"w\"> </span><span class=\"o\">+</span>\n<span class=\"w\">  </span><span class=\"kp\">fixes</span><span class=\"w\"> </span><span class=\"n\">cyl</span><span class=\"w\">  </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"nat ⇒ 'a ⇒ 'a\"</span><span class=\"w\"> </span><span class=\"kp\">and</span>\n<span class=\"w\">        </span><span class=\"n\">diag</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"nat ⇒ nat ⇒ 'a\"</span>\n<span class=\"w\">  </span><span class=\"kp\">assumes</span><span class=\"w\"> </span><span class=\"n\">Cyl_ax_0</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"cyl b zero = zero\"</span><span class=\"w\"> </span><span class=\"kp\">and</span>\n<span class=\"w\">          </span><span class=\"n\">Cyl_ax_1</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"x ≤ (cyl a x)\"</span><span class=\"w\"> </span><span class=\"kp\">and</span>\n<span class=\"w\">          </span><span class=\"n\">Cyl_ax_2</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"cyl a (x ⊓ (cyl a y)) = (cyl a x) ⊓ (cyl a y)\"</span><span class=\"w\"> </span><span class=\"kp\">and</span>\n<span class=\"w\">          </span><span class=\"n\">Cyl_ax_3</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"cyl a (cyl b x) = cyl b (cyl a x)\"</span><span class=\"w\"> </span><span class=\"kp\">and</span>\n<span class=\"w\">          </span><span class=\"n\">Cyl_ax_4</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"diag a a = one\"</span><span class=\"w\"> </span><span class=\"kp\">and</span>\n<span class=\"w\">          </span><span class=\"n\">Cyl_ax_5</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"a ≠ b ⟶ b ≠ c ⟶ diag a c = cyl b ((diag a b) ⊓ (diag b c))\"</span><span class=\"w\"> </span><span class=\"kp\">and</span>\n<span class=\"w\">          </span><span class=\"n\">Cyl_ax_6</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"a ≠ b ⟶ (cyl a ((diag a b) ⊓ x)) ⊓ (cyl a ((diag a b) ⊓ (-x))) = zero\"</span>\n<span class=\"k\">begin</span>\n\n<span class=\"kn\">theorem</span><span class=\"w\"> </span><span class=\"n\">thm_1_2_1</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"cyl a x = zero ⟶ x = zero\"</span>\n<span class=\"k\">proof</span>\n</code></pre></div>\n<p>I tried varying the list of provers and nothing changed. I'm guessing that somehow one of the imported libraries is making sledgehammer look for agsyhol, which seems to be no longer included with Isabelle, but what is actually going on?</p>",
        "id": 420297298,
        "sender_full_name": "James Hanson",
        "timestamp": 1707324570
    },
    {
        "content": "<p>In general: do not import anything starting with <code>HOL.</code>. Import  <code>Main</code> instead</p>",
        "id": 420297865,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1707324744
    },
    {
        "content": "<p>I think that this will solve your issue</p>",
        "id": 420298082,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1707324805
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"233198\">@Mathias Fleury</span> Thank you. If it's appropriate I have a minor followup question. Why can't I use any of the defined notation from the Boolean algebras library? It's not accepting <code>⊓ </code> for instance.</p>",
        "id": 420303593,
        "sender_full_name": "James Hanson",
        "timestamp": 1707326446
    },
    {
        "content": "<p>You probably need to be proving a lemma in the abstract_boolean_algebra context before you can get access to the notation it defines</p>",
        "id": 420349489,
        "sender_full_name": "Christian Pardillo Laursen",
        "timestamp": 1707342812
    },
    {
        "content": "<p>Although if you're talking about ⊓ for lattices, then unbundle lattice_syntax should work</p>",
        "id": 420350069,
        "sender_full_name": "Christian Pardillo Laursen",
        "timestamp": 1707343068
    }
]