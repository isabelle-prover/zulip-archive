[
    {
        "content": "<p>In \"Three Years of Experience with Sledgehammer, a Practical Link<br>\nbetween Automatic and Interactive Theorem Provers\" it is mentioned in the end that they plan to make a version of sledgehammer for Isabelle/ZF. I can't find it, but there is so much info about Isabelle, so I might have missed it. Anybody knows?</p>",
        "id": 267166789,
        "sender_full_name": "Dan Synek",
        "timestamp": 1641547204
    },
    {
        "content": "<p>It never happened.</p>",
        "id": 267167946,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1641547905
    },
    {
        "content": "<p>Thanks! I wonder if it is because of lack of interest or because automatic theorem proving is harder for set theory. Anyway, thanks again for your quick reply!</p>",
        "id": 267172296,
        "sender_full_name": "Dan Synek",
        "timestamp": 1641550714
    },
    {
        "content": "<p>maybe <span class=\"user-mention\" data-user-id=\"402444\">@Martin Desharnais</span> knows better, but I believe it is a combination of lack of interest (very few users and Jasmin Blanchette is not one of them) and lack of publicability (publishing sledgehammer papers is very hard nowadays, because it is a very mature -- there are still open problems [e.g., dependent types], but no very interesting ones expected for Isabelle/ZF)</p>",
        "id": 267177637,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1641554210
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"233198\">@Mathias Fleury</span> basically nailed it. On top of that, porting Sledgehammer to another logic would require a lot of non-trivial refactoring for which we are missing the contributor resources.</p>",
        "id": 267192359,
        "sender_full_name": "Martin Desharnais",
        "timestamp": 1641564299
    },
    {
        "content": "<p>What a good group. Thanks for the explanation. I suppose all the work on transforming higher order to first order which had to be done for HOL would be wasted on Isabelle/ZF since it is already first order. And I think I read somewhere in the TPTP documentation that set theory is known to be hard for automatic theorem provers - on the hand, if I remember correctly many of the Mizar theorems can now be proved automatically, so perhaps that has changed. Anyway, thanks again!</p>",
        "id": 267200903,
        "sender_full_name": "Dan Synek",
        "timestamp": 1641568799
    },
    {
        "content": "<p>Hello! I am currently working with functions and I have a problem with their termination. With my current code Isabelle seems to be unable to identify that the function is over and I am a little confused with the section.<br>\ncode looks like this and it says failed to finish subgoal.<br>\ntheory th1_th8_new<br>\n  imports Main<br>\nbegin</p>\n<p>datatype BinNum =  Zero | One | JoinZero BinNum | JoinOne BinNum <br>\ndatatype Var = Var nat  <br>\ndatatype Term = V Var | Z | S Term | Plus Term Term | Times Term Term<br>\ndatatype Form = Eq Term Term | Neg Form | Imp Form Form | And Form Form | Or Form Form | All Var Form</p>\n<p>fun len :: \"BinNum ⇒ nat\"<br>\n  where<br>\n    \"len Zero = 1\"|<br>\n    \"len One = 1\"|<br>\n    \"len (JoinZero x) = len x + 1\"|<br>\n    \"len (JoinOne x) = len x + 1\"</p>\n<p>function addBinNum :: \"BinNum ⇒ BinNum ⇒ BinNum\"<br>\nwhere<br>\n  \"addBinNum Zero x = x\"|<br>\n  \"addBinNum x Zero = x\"|<br>\n  \"addBinNum One One = JoinZero One\"|<br>\n  \"addBinNum One  (JoinZero x) = JoinOne x\"|<br>\n  \"addBinNum One (JoinOne x) = JoinZero(addBinNum One x)\"|<br>\n  \"addBinNum(JoinZero x) One = JoinOne x\"|<br>\n  \"addBinNum(JoinOne x) One = JoinZero(addBinNum One x)\"|<br>\n  \"addBinNum(JoinZero x) (JoinZero y) = JoinZero(addBinNum x y)\"|<br>\n  \"addBinNum(JoinZero x) (JoinOne y) = JoinOne(addBinNum x y)\"|<br>\n  \"addBinNum(JoinOne x) (JoinZero y) = JoinOne(addBinNum x y)\"|<br>\n  \"addBinNum(JoinOne x) (JoinOne y) = JoinZero(addBinNum(addBinNum x y) One)\"<br>\n  by pat_completeness auto</p>\n<p>termination addBinNum<br>\n  by(relation \"measure (λ(x,y). len x + len y)\") auto</p>",
        "id": 267645418,
        "sender_full_name": "Lekhani Ray",
        "timestamp": 1641935417
    },
    {
        "content": "<p>Your termination proof does not complete and Isabelle tells you where it gets stuck:</p>\n<div class=\"codehilite\"><pre><span></span><code>Failed to finish proof⌂:\ngoal (1 subgoal):\n 1. ⋀x y. addBinNum_dom (x, y) ⟹ len (addBinNum x y) &lt; Suc (len x + len y)\n</code></pre></div>\n<p>As the value of <code>addBinNum x y</code> depends on what <code>x</code> and <code>y</code>are, an induction proof might help. In fact this works as a termination proof:</p>\n<div class=\"codehilite\"><pre><span></span><code>apply (relation &quot;measure (λ(x,y). len x + len y)&quot;)\napply auto\nsubgoal for x y by (induction x y rule: addBinNum.pinduct) (auto simp add: addBinNum.psimps)\ndone\n</code></pre></div>\n<p>As there is no termination proof done yet, this uses the partial versions of the induction and simplification rules.<br>\nYou can also proof termination by just applying the <code>size_change</code> method</p>",
        "id": 267658870,
        "sender_full_name": "Simon Roßkopf",
        "timestamp": 1641941927
    }
]