[
    {
        "content": "<p>I am proving the following. I defined:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">definition</span><span class=\"w\"> </span><span class=\"n\">nbisim</span><span class=\"w\"> </span><span class=\"o\">::</span>\n<span class=\"w\"> </span><span class=\"s\">\"(nat ⇒ 'a ⇒ 'b ⇒ bool) ⇒ nat ⇒</span>\n<span class=\"s\">  ('m,'p,'a) model ⇒ ('m,'p,'b) model ⇒</span>\n<span class=\"s\">  'a ⇒ 'b ⇒ bool\"</span><span class=\"w\"> </span><span class=\"kp\">where</span>\n<span class=\"w\"> </span><span class=\"s\">\"nbisim Z n M M' w w' ≡</span>\n<span class=\"s\">  (∀i v v'. Z i v v' ⟶ i ≤ n ∧ v ∈ world M ∧ v' ∈ world M') ∧</span>\n<span class=\"s\">  (∀i v v'. i + 1 ≤ n --&gt; Z (i + 1) v v' ⟶ Z i v v') ∧</span>\n<span class=\"s\">  (∀v v' p. Z 0 v v' ⟶ valt M p v = valt M' p v') ∧</span>\n<span class=\"s\">  (∀i v v' ul m.</span>\n<span class=\"s\">    i + 1 ≤ n ∧ Z (i + 1) v v' ∧ rel M m (v # ul) ⟶</span>\n<span class=\"s\">    (∃ul'.</span>\n<span class=\"s\">      rel M' m (v' # ul') ∧</span>\n<span class=\"s\">      (∀u u'. (u,u') ∈ set (zip ul ul') ⟶ Z i u u'))) ∧</span>\n<span class=\"s\">  (∀i v v' ul' m.</span>\n<span class=\"s\">    i + 1 ≤ n ∧ Z (i + 1) v v' ∧ rel M' m (v' # ul') ⟶</span>\n<span class=\"s\">    (∃ul.</span>\n<span class=\"s\">      rel M' m (v' # ul') ∧</span>\n<span class=\"s\">      (∀u u'. (u,u') ∈ set (zip ul ul') ⟶ Z i u u'))) ∧</span>\n<span class=\"s\">  Z n w w'</span>\n<span class=\"s\">  \"</span>\n</code></pre></div>\n<p>and want to prove:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">nbisim_on_worlds</span><span class=\"o\">:</span>\n<span class=\"w\">  </span><span class=\"kp\">assumes</span><span class=\"w\"> </span><span class=\"s\">\"nbisim Z n M M' w w'\"</span><span class=\"w\"> </span><span class=\"kp\">and</span><span class=\"w\"> </span><span class=\"s\">\"Z m v v'\"</span>\n<span class=\"w\">  </span><span class=\"kp\">shows</span><span class=\"w\"> </span><span class=\"s\">\"v ∈ world M\"</span>\n<span class=\"w\">  </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">assms</span><span class=\"w\"> </span><span class=\"n\">nbisim_def</span><span class=\"w\"> </span><span class=\"kt\">sledgehammer</span>\n</code></pre></div>\n<p>sledgehammer found the proof very quicky, it says:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"n\">Sledgehammering...</span>\n<span class=\"n\">verit</span><span class=\"w\"> </span><span class=\"n\">found</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"k\">proof</span><span class=\"ow\">...</span>\n<span class=\"n\">cvc4</span><span class=\"w\"> </span><span class=\"n\">found</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"k\">proof</span><span class=\"ow\">...</span>\n<span class=\"n\">cvc4</span><span class=\"w\"> </span><span class=\"n\">found</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"k\">proof</span><span class=\"ow\">...</span>\n<span class=\"n\">vampire</span><span class=\"w\"> </span><span class=\"n\">found</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"k\">proof</span><span class=\"ow\">...</span>\n<span class=\"n\">spass</span><span class=\"w\"> </span><span class=\"n\">found</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"k\">proof</span><span class=\"ow\">...</span>\n<span class=\"n\">cvc4</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Try</span><span class=\"w\"> </span><span class=\"n\">this</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">smt</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">verit</span><span class=\"o\">))</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">&gt;</span><span class=\"w\"> </span><span class=\"n\">1.0</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">timed</span><span class=\"w\"> </span><span class=\"n\">out</span><span class=\"o\">)</span>\n<span class=\"n\">verit</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Duplicate</span><span class=\"w\"> </span><span class=\"k\">proof</span>\n<span class=\"n\">cvc4</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Duplicate</span><span class=\"w\"> </span><span class=\"k\">proof</span>\n<span class=\"n\">vampire</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Try</span><span class=\"w\"> </span><span class=\"n\">this</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">metis</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">&gt;</span><span class=\"w\"> </span><span class=\"n\">1.0</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">timed</span><span class=\"w\"> </span><span class=\"n\">out</span><span class=\"o\">)</span>\n<span class=\"n\">spass</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Duplicate</span><span class=\"w\"> </span><span class=\"k\">proof</span>\n<span class=\"n\">Done</span>\n</code></pre></div>\n<p>This is a particularly easy proof-even without looking at what are the relevant definitions are, it should be killed by metis, I expected. But both of the proofs gives by sledgehammer does not work. May I please ask what should I try?</p>",
        "id": 480291863,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1730624820
    },
    {
        "content": "<p>As the first obvious thing to try, I tried to restrict the searching space to a part of the definition nbisim_def. I went:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">equivD1</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"A ≡ B ⟹ A ⟹ B\"</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">simp</span>\n\n<span class=\"kt\">thm</span><span class=\"w\"> </span><span class=\"n\">nbisim_def</span><span class=\"o\">[</span><span class=\"n\">THEN</span><span class=\"w\"> </span><span class=\"n\">equivD1</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">THEN</span><span class=\"w\"> </span><span class=\"n\">conjunct1</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>This gives me </p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"n\">nbisim</span><span class=\"w\"> </span><span class=\"o\">(?</span><span class=\"n\">Z2</span><span class=\"o\">::</span><span class=\"n\">nat</span><span class=\"w\"> </span><span class=\"n\">⇒</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n n-Type\">'a2</span><span class=\"w\"> </span><span class=\"n\">⇒</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n n-Type\">'b2</span><span class=\"w\"> </span><span class=\"n\">⇒</span><span class=\"w\"> </span><span class=\"n\">bool</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(?</span><span class=\"n\">n2</span><span class=\"o\">::</span><span class=\"n\">nat</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(?</span><span class=\"n\">M2</span><span class=\"o\">::?</span><span class=\"n n-Type\">'a2</span><span class=\"w\"> </span><span class=\"n\">set</span><span class=\"w\"> </span><span class=\"n\">×</span><span class=\"w\"> </span><span class=\"o\">(?</span><span class=\"n n-Type\">'m2</span><span class=\"w\"> </span><span class=\"n\">⇒</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n n-Type\">'a2</span><span class=\"w\"> </span><span class=\"n\">list</span><span class=\"w\"> </span><span class=\"n\">⇒</span><span class=\"w\"> </span><span class=\"n\">bool</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">×</span><span class=\"w\"> </span><span class=\"o\">(?</span><span class=\"n n-Type\">'p2</span><span class=\"w\"> </span><span class=\"n\">⇒</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n n-Type\">'a2</span><span class=\"w\"> </span><span class=\"n\">⇒</span><span class=\"w\"> </span><span class=\"n\">bool</span><span class=\"o\">))</span>\n<span class=\"w\"> </span><span class=\"o\">(?</span><span class=\"n\">M'2</span><span class=\"o\">::?</span><span class=\"n n-Type\">'b2</span><span class=\"w\"> </span><span class=\"n\">set</span><span class=\"w\"> </span><span class=\"n\">×</span><span class=\"w\"> </span><span class=\"o\">(?</span><span class=\"n n-Type\">'m2</span><span class=\"w\"> </span><span class=\"n\">⇒</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n n-Type\">'b2</span><span class=\"w\"> </span><span class=\"n\">list</span><span class=\"w\"> </span><span class=\"n\">⇒</span><span class=\"w\"> </span><span class=\"n\">bool</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">×</span><span class=\"w\"> </span><span class=\"o\">(?</span><span class=\"n n-Type\">'p2</span><span class=\"w\"> </span><span class=\"n\">⇒</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n n-Type\">'b2</span><span class=\"w\"> </span><span class=\"n\">⇒</span><span class=\"w\"> </span><span class=\"n\">bool</span><span class=\"o\">))</span><span class=\"w\"> </span><span class=\"o\">(?</span><span class=\"n\">w2</span><span class=\"o\">::?</span><span class=\"n n-Type\">'a2</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(?</span><span class=\"n\">w'2</span><span class=\"o\">::?</span><span class=\"n n-Type\">'b2</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">⟹</span>\n<span class=\"n\">∀</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">::</span><span class=\"n\">nat</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">v</span><span class=\"o\">::?</span><span class=\"n n-Type\">'a2</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">v'</span><span class=\"o\">::?</span><span class=\"n n-Type\">'b2.</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">Z2</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"w\"> </span><span class=\"n\">v'</span><span class=\"w\"> </span><span class=\"n\">⟶</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"n\">≤</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">n2</span><span class=\"w\"> </span><span class=\"n\">∧</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"w\"> </span><span class=\"n\">∈</span><span class=\"w\"> </span><span class=\"n\">world</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">M2</span><span class=\"w\"> </span><span class=\"n\">∧</span><span class=\"w\"> </span><span class=\"n\">v'</span><span class=\"w\"> </span><span class=\"n\">∈</span><span class=\"w\"> </span><span class=\"n\">world</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">M'2</span>\n</code></pre></div>",
        "id": 480292432,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1730625412
    },
    {
        "content": "<p>I think I can just apply function to extract relevant part of this definition to obtain the theorem I want. But it does not accept another step of \"THEN conjunct2\". I think it is because \"THEN conjunct2\" does not go underneath the non-meta quantification and implication.</p>",
        "id": 480292556,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1730625526
    },
    {
        "content": "<p>From:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"n\">nbisim</span><span class=\"w\"> </span><span class=\"o\">(?</span><span class=\"n\">Z2</span><span class=\"o\">::</span><span class=\"n\">nat</span><span class=\"w\"> </span><span class=\"n\">⇒</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n n-Type\">'a2</span><span class=\"w\"> </span><span class=\"n\">⇒</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n n-Type\">'b2</span><span class=\"w\"> </span><span class=\"n\">⇒</span><span class=\"w\"> </span><span class=\"n\">bool</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(?</span><span class=\"n\">n2</span><span class=\"o\">::</span><span class=\"n\">nat</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(?</span><span class=\"n\">M2</span><span class=\"o\">::?</span><span class=\"n n-Type\">'a2</span><span class=\"w\"> </span><span class=\"n\">set</span><span class=\"w\"> </span><span class=\"n\">×</span><span class=\"w\"> </span><span class=\"o\">(?</span><span class=\"n n-Type\">'m2</span><span class=\"w\"> </span><span class=\"n\">⇒</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n n-Type\">'a2</span><span class=\"w\"> </span><span class=\"n\">list</span><span class=\"w\"> </span><span class=\"n\">⇒</span><span class=\"w\"> </span><span class=\"n\">bool</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">×</span><span class=\"w\"> </span><span class=\"o\">(?</span><span class=\"n n-Type\">'p2</span><span class=\"w\"> </span><span class=\"n\">⇒</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n n-Type\">'a2</span><span class=\"w\"> </span><span class=\"n\">⇒</span><span class=\"w\"> </span><span class=\"n\">bool</span><span class=\"o\">))</span>\n<span class=\"w\"> </span><span class=\"o\">(?</span><span class=\"n\">M'2</span><span class=\"o\">::?</span><span class=\"n n-Type\">'b2</span><span class=\"w\"> </span><span class=\"n\">set</span><span class=\"w\"> </span><span class=\"n\">×</span><span class=\"w\"> </span><span class=\"o\">(?</span><span class=\"n n-Type\">'m2</span><span class=\"w\"> </span><span class=\"n\">⇒</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n n-Type\">'b2</span><span class=\"w\"> </span><span class=\"n\">list</span><span class=\"w\"> </span><span class=\"n\">⇒</span><span class=\"w\"> </span><span class=\"n\">bool</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">×</span><span class=\"w\"> </span><span class=\"o\">(?</span><span class=\"n n-Type\">'p2</span><span class=\"w\"> </span><span class=\"n\">⇒</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n n-Type\">'b2</span><span class=\"w\"> </span><span class=\"n\">⇒</span><span class=\"w\"> </span><span class=\"n\">bool</span><span class=\"o\">))</span><span class=\"w\"> </span><span class=\"o\">(?</span><span class=\"n\">w2</span><span class=\"o\">::?</span><span class=\"n n-Type\">'a2</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(?</span><span class=\"n\">w'2</span><span class=\"o\">::?</span><span class=\"n n-Type\">'b2</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">⟹</span>\n<span class=\"n\">∀</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">::</span><span class=\"n\">nat</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">v</span><span class=\"o\">::?</span><span class=\"n n-Type\">'a2</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">v'</span><span class=\"o\">::?</span><span class=\"n n-Type\">'b2.</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">Z2</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"w\"> </span><span class=\"n\">v'</span><span class=\"w\"> </span><span class=\"n\">⟶</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"n\">≤</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">n2</span><span class=\"w\"> </span><span class=\"n\">∧</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"w\"> </span><span class=\"n\">∈</span><span class=\"w\"> </span><span class=\"n\">world</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">M2</span><span class=\"w\"> </span><span class=\"n\">∧</span><span class=\"w\"> </span><span class=\"n\">v'</span><span class=\"w\"> </span><span class=\"n\">∈</span><span class=\"w\"> </span><span class=\"n\">world</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">M'2</span>\n</code></pre></div>\n<p>I tried </p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">PULL_metaall</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"(A ⟹ (∀x. B)) ⟹ (⋀ x. A ⟹ B)\"</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">simp</span>\n</code></pre></div>\n<p>But for the next step, the theorem cannot be unified with PULL_metaall:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kt\">thm</span><span class=\"w\"> </span><span class=\"n\">nbisim_def</span><span class=\"o\">[</span><span class=\"n\">THEN</span><span class=\"w\"> </span><span class=\"n\">equivD1</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">THEN</span><span class=\"w\"> </span><span class=\"n\">conjunct1</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">THEN</span><span class=\"w\"> </span><span class=\"n\">PULL_metaall</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>does not work.</p>\n<p>The error message is:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"n\">exception</span><span class=\"w\"> </span><span class=\"n\">THM</span><span class=\"w\"> </span><span class=\"n\">1</span><span class=\"w\"> </span><span class=\"n\">raised</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">line</span><span class=\"w\"> </span><span class=\"n\">2601</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"s\">\"thm.ML\"</span><span class=\"o\">):</span>\n<span class=\"w\">  </span><span class=\"n\">RSN</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">no</span><span class=\"w\"> </span><span class=\"n\">unifiers</span>\n<span class=\"w\">  </span><span class=\"n\">nbisim</span><span class=\"w\"> </span><span class=\"o\">(?</span><span class=\"n\">Z2</span><span class=\"o\">::</span><span class=\"n\">nat</span><span class=\"w\"> </span><span class=\"n\">⇒</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n n-Type\">'a2</span><span class=\"w\"> </span><span class=\"n\">⇒</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n n-Type\">'b2</span><span class=\"w\"> </span><span class=\"n\">⇒</span><span class=\"w\"> </span><span class=\"n\">bool</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(?</span><span class=\"n\">n2</span><span class=\"o\">::</span><span class=\"n\">nat</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(?</span><span class=\"n\">M2</span><span class=\"o\">::?</span><span class=\"n n-Type\">'a2</span><span class=\"w\"> </span><span class=\"n\">set</span><span class=\"w\"> </span><span class=\"n\">×</span><span class=\"w\"> </span><span class=\"o\">(?</span><span class=\"n n-Type\">'m2</span><span class=\"w\"> </span><span class=\"n\">⇒</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n n-Type\">'a2</span><span class=\"w\"> </span><span class=\"n\">list</span><span class=\"w\"> </span><span class=\"n\">⇒</span><span class=\"w\"> </span><span class=\"n\">bool</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">×</span><span class=\"w\"> </span><span class=\"o\">(?</span><span class=\"n n-Type\">'p2</span><span class=\"w\"> </span><span class=\"n\">⇒</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n n-Type\">'a2</span><span class=\"w\"> </span><span class=\"n\">⇒</span><span class=\"w\"> </span><span class=\"n\">bool</span><span class=\"o\">))</span>\n<span class=\"w\">   </span><span class=\"o\">(?</span><span class=\"n\">M'2</span><span class=\"o\">::?</span><span class=\"n n-Type\">'b2</span><span class=\"w\"> </span><span class=\"n\">set</span><span class=\"w\"> </span><span class=\"n\">×</span><span class=\"w\"> </span><span class=\"o\">(?</span><span class=\"n n-Type\">'m2</span><span class=\"w\"> </span><span class=\"n\">⇒</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n n-Type\">'b2</span><span class=\"w\"> </span><span class=\"n\">list</span><span class=\"w\"> </span><span class=\"n\">⇒</span><span class=\"w\"> </span><span class=\"n\">bool</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">×</span><span class=\"w\"> </span><span class=\"o\">(?</span><span class=\"n n-Type\">'p2</span><span class=\"w\"> </span><span class=\"n\">⇒</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n n-Type\">'b2</span><span class=\"w\"> </span><span class=\"n\">⇒</span><span class=\"w\"> </span><span class=\"n\">bool</span><span class=\"o\">))</span><span class=\"w\"> </span><span class=\"o\">(?</span><span class=\"n\">w2</span><span class=\"o\">::?</span><span class=\"n n-Type\">'a2</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(?</span><span class=\"n\">w'2</span><span class=\"o\">::?</span><span class=\"n n-Type\">'b2</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">⟹</span>\n<span class=\"w\">  </span><span class=\"n\">∀</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">::</span><span class=\"n\">nat</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">v</span><span class=\"o\">::?</span><span class=\"n n-Type\">'a2</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">v'</span><span class=\"o\">::?</span><span class=\"n n-Type\">'b2.</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">Z2</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"w\"> </span><span class=\"n\">v'</span><span class=\"w\"> </span><span class=\"n\">⟶</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"n\">≤</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">n2</span><span class=\"w\"> </span><span class=\"n\">∧</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"w\"> </span><span class=\"n\">∈</span><span class=\"w\"> </span><span class=\"n\">world</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">M2</span><span class=\"w\"> </span><span class=\"n\">∧</span><span class=\"w\"> </span><span class=\"n\">v'</span><span class=\"w\"> </span><span class=\"n\">∈</span><span class=\"w\"> </span><span class=\"n\">world</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">M'2</span>\n<span class=\"w\">  </span><span class=\"o\">(?</span><span class=\"n\">A</span><span class=\"o\">::</span><span class=\"n\">bool</span><span class=\"w\"> </span><span class=\"n\">⟹</span><span class=\"w\"> </span><span class=\"n\">∀x</span><span class=\"o\">::?</span><span class=\"n n-Type\">'a.</span><span class=\"w\"> </span><span class=\"o\">(?</span><span class=\"n\">B</span><span class=\"o\">::</span><span class=\"n\">bool</span><span class=\"o\">))</span><span class=\"w\"> </span><span class=\"n\">⟹</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"n\">⟹</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">B</span>\n</code></pre></div>\n<p>Maybe a screenshot with color makes more sense.<br>\n<a href=\"/user_uploads/14278/qFXhd-xTI16xrVduE5t0MgRx/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/14278/qFXhd-xTI16xrVduE5t0MgRx/image.png\" title=\"image.png\"><img data-original-dimensions=\"1537x347\" src=\"/user_uploads/thumbnail/14278/qFXhd-xTI16xrVduE5t0MgRx/image.png/840x560.webp\"></a></div>",
        "id": 480292994,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1730625965
    },
    {
        "content": "<p>May I please ask why the unification fail? (I guess because of multiple quantifiers?) <br>\nCan we do something to force the unifcation?</p>",
        "id": 480293020,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1730626004
    },
    {
        "content": "<p>I don't think your <code>PULL_metaall</code> is doing what you want</p>",
        "id": 480296392,
        "sender_full_name": "Yong Kiam",
        "timestamp": 1730629530
    },
    {
        "content": "<p>look carefully at the types: <code>?B</code> is a constant while you want it to be a predicate in order to unify</p>",
        "id": 480296476,
        "sender_full_name": "Yong Kiam",
        "timestamp": 1730629584
    },
    {
        "content": "<p>Thanks for the swift reply and sorry I am afraid that I do not get it. The \"?B\" is of type \"bool\", in which sense is it a constant, and in which sense is a predicate required?</p>\n<p>It seems unexpected to me because I see \"?B\" is asking for a bool, and the thing below the first quantifier, i.e.</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kt\">term</span><span class=\"w\"> </span><span class=\"s\">\"∀(v::'a2) v'::'b2. Z2 i v v' ⟶ i ≤ n2 ∧ v ∈ world M2 ∧ v' ∈ world M'2\"</span>\n</code></pre></div>\n<p>is indeed of type bool.</p>",
        "id": 480296855,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1730629989
    },
    {
        "content": "<p>it is of type bool, but the term has a free variable <code>i</code></p>",
        "id": 480298720,
        "sender_full_name": "Yong Kiam",
        "timestamp": 1730631821
    },
    {
        "content": "<p><code>∀x. B</code> &lt;-- here <code>B</code> is of type <code>bool</code> which means it is a predicate independent of <code>x</code></p>",
        "id": 480298808,
        "sender_full_name": "Yong Kiam",
        "timestamp": 1730631904
    },
    {
        "content": "<p>Thank you! I see. now it works and gives me:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"o\">(?</span><span class=\"n\">A</span><span class=\"o\">::</span><span class=\"n\">bool</span><span class=\"w\"> </span><span class=\"n\">⟹</span>\n<span class=\"w\"> </span><span class=\"n\">nbisim</span><span class=\"w\"> </span><span class=\"o\">(?</span><span class=\"n\">Z3</span><span class=\"o\">::</span><span class=\"n\">nat</span><span class=\"w\"> </span><span class=\"n\">⇒</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n n-Type\">'a3</span><span class=\"w\"> </span><span class=\"n\">⇒</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n n-Type\">'b3</span><span class=\"w\"> </span><span class=\"n\">⇒</span><span class=\"w\"> </span><span class=\"n\">bool</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(?</span><span class=\"n\">n3</span><span class=\"o\">::</span><span class=\"n\">nat</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(?</span><span class=\"n\">M3</span><span class=\"o\">::?</span><span class=\"n n-Type\">'a3</span><span class=\"w\"> </span><span class=\"n\">set</span><span class=\"w\"> </span><span class=\"n\">×</span><span class=\"w\"> </span><span class=\"o\">(?</span><span class=\"n n-Type\">'m3</span><span class=\"w\"> </span><span class=\"n\">⇒</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n n-Type\">'a3</span><span class=\"w\"> </span><span class=\"n\">list</span><span class=\"w\"> </span><span class=\"n\">⇒</span><span class=\"w\"> </span><span class=\"n\">bool</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">×</span><span class=\"w\"> </span><span class=\"o\">(?</span><span class=\"n n-Type\">'p3</span><span class=\"w\"> </span><span class=\"n\">⇒</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n n-Type\">'a3</span><span class=\"w\"> </span><span class=\"n\">⇒</span><span class=\"w\"> </span><span class=\"n\">bool</span><span class=\"o\">))</span>\n<span class=\"w\">  </span><span class=\"o\">(?</span><span class=\"n\">M'3</span><span class=\"o\">::?</span><span class=\"n n-Type\">'b3</span><span class=\"w\"> </span><span class=\"n\">set</span><span class=\"w\"> </span><span class=\"n\">×</span><span class=\"w\"> </span><span class=\"o\">(?</span><span class=\"n n-Type\">'m3</span><span class=\"w\"> </span><span class=\"n\">⇒</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n n-Type\">'b3</span><span class=\"w\"> </span><span class=\"n\">list</span><span class=\"w\"> </span><span class=\"n\">⇒</span><span class=\"w\"> </span><span class=\"n\">bool</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">×</span><span class=\"w\"> </span><span class=\"o\">(?</span><span class=\"n n-Type\">'p3</span><span class=\"w\"> </span><span class=\"n\">⇒</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n n-Type\">'b3</span><span class=\"w\"> </span><span class=\"n\">⇒</span><span class=\"w\"> </span><span class=\"n\">bool</span><span class=\"o\">))</span><span class=\"w\"> </span><span class=\"o\">(?</span><span class=\"n\">w3</span><span class=\"o\">::?</span><span class=\"n n-Type\">'a3</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(?</span><span class=\"n\">w'3</span><span class=\"o\">::?</span><span class=\"n n-Type\">'b3</span><span class=\"o\">))</span><span class=\"w\"> </span><span class=\"n\">⟹</span>\n<span class=\"o\">?</span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"n\">⟹</span><span class=\"w\"> </span><span class=\"n\">∀</span><span class=\"o\">(</span><span class=\"n\">v</span><span class=\"o\">::?</span><span class=\"n n-Type\">'a3</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">v'</span><span class=\"o\">::?</span><span class=\"n n-Type\">'b3.</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">Z3</span><span class=\"w\"> </span><span class=\"o\">(?</span><span class=\"n\">x</span><span class=\"o\">::</span><span class=\"n\">nat</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"w\"> </span><span class=\"n\">v'</span><span class=\"w\"> </span><span class=\"n\">⟶</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">≤</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">n3</span><span class=\"w\"> </span><span class=\"n\">∧</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"w\"> </span><span class=\"n\">∈</span><span class=\"w\"> </span><span class=\"n\">world</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">M3</span><span class=\"w\"> </span><span class=\"n\">∧</span><span class=\"w\"> </span><span class=\"n\">v'</span><span class=\"w\"> </span><span class=\"n\">∈</span><span class=\"w\"> </span><span class=\"n\">world</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">M'3</span>\n</code></pre></div>",
        "id": 480298947,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1730632059
    },
    {
        "content": "<p>That is what I expected.</p>",
        "id": 480298954,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1730632066
    },
    {
        "content": "<p>It seems not such a common approach though. May I please ask if there is a quicker way to, from:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"n\">nbisim</span><span class=\"w\"> </span><span class=\"n\">Z</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"n\">M</span><span class=\"w\"> </span><span class=\"n\">M'</span><span class=\"w\"> </span><span class=\"n\">w</span><span class=\"w\"> </span><span class=\"n\">w'</span><span class=\"w\"> </span><span class=\"n\">≡</span>\n<span class=\"w\">  </span><span class=\"o\">(</span><span class=\"n\">∀i</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"w\"> </span><span class=\"n\">v'.</span><span class=\"w\"> </span><span class=\"n\">Z</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"w\"> </span><span class=\"n\">v'</span><span class=\"w\"> </span><span class=\"n\">⟶</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"n\">≤</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"n\">∧</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"w\"> </span><span class=\"n\">∈</span><span class=\"w\"> </span><span class=\"n\">world</span><span class=\"w\"> </span><span class=\"n\">M</span><span class=\"w\"> </span><span class=\"n\">∧</span><span class=\"w\"> </span><span class=\"n\">v'</span><span class=\"w\"> </span><span class=\"n\">∈</span><span class=\"w\"> </span><span class=\"n\">world</span><span class=\"w\"> </span><span class=\"n\">M'</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">∧</span>\n<span class=\"w\">  </span><span class=\"o\">(</span><span class=\"n\">∀i</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"w\"> </span><span class=\"n\">v'.</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">1</span><span class=\"w\"> </span><span class=\"n\">≤</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Z</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">1</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"w\"> </span><span class=\"n\">v'</span><span class=\"w\"> </span><span class=\"n\">⟶</span><span class=\"w\"> </span><span class=\"n\">Z</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"w\"> </span><span class=\"n\">v'</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">∧</span>\n<span class=\"w\">  </span><span class=\"o\">(</span><span class=\"n\">∀v</span><span class=\"w\"> </span><span class=\"n\">v'</span><span class=\"w\"> </span><span class=\"n\">p.</span><span class=\"w\"> </span><span class=\"n\">Z</span><span class=\"w\"> </span><span class=\"n\">0</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"w\"> </span><span class=\"n\">v'</span><span class=\"w\"> </span><span class=\"n\">⟶</span><span class=\"w\"> </span><span class=\"n\">valt</span><span class=\"w\"> </span><span class=\"n\">M</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">valt</span><span class=\"w\"> </span><span class=\"n\">M'</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"n\">v'</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">∧</span>\n<span class=\"w\">  </span><span class=\"o\">(</span><span class=\"n\">∀i</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"w\"> </span><span class=\"n\">v'</span><span class=\"w\"> </span><span class=\"n\">ul</span><span class=\"w\"> </span><span class=\"n\">m.</span>\n<span class=\"w\">    </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">1</span><span class=\"w\"> </span><span class=\"n\">≤</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"n\">∧</span><span class=\"w\"> </span><span class=\"n\">Z</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">1</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"w\"> </span><span class=\"n\">v'</span><span class=\"w\"> </span><span class=\"n\">∧</span><span class=\"w\"> </span><span class=\"n\">rel</span><span class=\"w\"> </span><span class=\"n\">M</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">v</span><span class=\"w\"> </span><span class=\"n\">#</span><span class=\"w\"> </span><span class=\"n\">ul</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">⟶</span>\n<span class=\"w\">    </span><span class=\"o\">(</span><span class=\"n\">∃ul'.</span>\n<span class=\"w\">      </span><span class=\"n\">rel</span><span class=\"w\"> </span><span class=\"n\">M'</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">v'</span><span class=\"w\"> </span><span class=\"n\">#</span><span class=\"w\"> </span><span class=\"n\">ul'</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">∧</span>\n<span class=\"w\">      </span><span class=\"o\">(</span><span class=\"n\">∀u</span><span class=\"w\"> </span><span class=\"n\">u'.</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">u</span><span class=\"o\">,</span><span class=\"n\">u'</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">∈</span><span class=\"w\"> </span><span class=\"n\">set</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">zip</span><span class=\"w\"> </span><span class=\"n\">ul</span><span class=\"w\"> </span><span class=\"n\">ul'</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">⟶</span><span class=\"w\"> </span><span class=\"n\">Z</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"n\">u</span><span class=\"w\"> </span><span class=\"n\">u'</span><span class=\"o\">)))</span><span class=\"w\"> </span><span class=\"n\">∧</span>\n<span class=\"w\">  </span><span class=\"o\">(</span><span class=\"n\">∀i</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"w\"> </span><span class=\"n\">v'</span><span class=\"w\"> </span><span class=\"n\">ul'</span><span class=\"w\"> </span><span class=\"n\">m.</span>\n<span class=\"w\">    </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">1</span><span class=\"w\"> </span><span class=\"n\">≤</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"n\">∧</span><span class=\"w\"> </span><span class=\"n\">Z</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">1</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"w\"> </span><span class=\"n\">v'</span><span class=\"w\"> </span><span class=\"n\">∧</span><span class=\"w\"> </span><span class=\"n\">rel</span><span class=\"w\"> </span><span class=\"n\">M'</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">v'</span><span class=\"w\"> </span><span class=\"n\">#</span><span class=\"w\"> </span><span class=\"n\">ul'</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">⟶</span>\n<span class=\"w\">    </span><span class=\"o\">(</span><span class=\"n\">∃ul.</span>\n<span class=\"w\">      </span><span class=\"n\">rel</span><span class=\"w\"> </span><span class=\"n\">M'</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">v'</span><span class=\"w\"> </span><span class=\"n\">#</span><span class=\"w\"> </span><span class=\"n\">ul'</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">∧</span>\n<span class=\"w\">      </span><span class=\"o\">(</span><span class=\"n\">∀u</span><span class=\"w\"> </span><span class=\"n\">u'.</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">u</span><span class=\"o\">,</span><span class=\"n\">u'</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">∈</span><span class=\"w\"> </span><span class=\"n\">set</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">zip</span><span class=\"w\"> </span><span class=\"n\">ul</span><span class=\"w\"> </span><span class=\"n\">ul'</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">⟶</span><span class=\"w\"> </span><span class=\"n\">Z</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"n\">u</span><span class=\"w\"> </span><span class=\"n\">u'</span><span class=\"o\">)))</span><span class=\"w\"> </span><span class=\"n\">∧</span>\n<span class=\"w\">  </span><span class=\"n\">Z</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"n\">w</span><span class=\"w\"> </span><span class=\"n\">w'</span>\n</code></pre></div>\n<p>get </p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"n\">nbisim</span><span class=\"w\"> </span><span class=\"n\">Z</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"n\">M</span><span class=\"w\"> </span><span class=\"n\">M'</span><span class=\"w\"> </span><span class=\"n\">w</span><span class=\"w\"> </span><span class=\"n\">w'</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"n\">&gt;</span>\n<span class=\"w\">  </span><span class=\"o\">(</span><span class=\"n\">∀i</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"w\"> </span><span class=\"n\">v'.</span><span class=\"w\"> </span><span class=\"n\">Z</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"w\"> </span><span class=\"n\">v'</span><span class=\"w\"> </span><span class=\"n\">⟶</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"n\">≤</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">)</span>\n</code></pre></div>\n<p>(or other equivalent form, up to meta-equivalence)</p>\n<p>I prefer the function-application approach in that case, can this be done in a quicker way?</p>",
        "id": 480299133,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1730632211
    },
    {
        "content": "<p>you could use mkide</p>",
        "id": 480299285,
        "sender_full_name": "irvin",
        "timestamp": 1730632364
    },
    {
        "content": "<p><a href=\"https://www.isa-afp.org/entries/Intro_Dest_Elim.html\">https://www.isa-afp.org/entries/Intro_Dest_Elim.html</a></p>",
        "id": 480299309,
        "sender_full_name": "irvin",
        "timestamp": 1730632409
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"714722\">irvin</span> <a href=\"#narrow/channel/238552-Beginner-Questions/topic/Sledgehammer.20proof.20found.20quickly.20but.20not.20work/near/480299285\">said</a>:</p>\n<blockquote>\n<p>you could use mkide</p>\n</blockquote>\n<p>I have not heard about this. Thanks for directing! Is there any minimal working example?</p>",
        "id": 480299315,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1730632414
    },
    {
        "content": "<p><a href=\"https://www.isa-afp.org/sessions/intro_dest_elim/#IDE_Reference\">https://www.isa-afp.org/sessions/intro_dest_elim/#IDE_Reference</a></p>",
        "id": 480299384,
        "sender_full_name": "irvin",
        "timestamp": 1730632482
    },
    {
        "content": "<p>Let me check. I see there is a documentation, but seems very minimal.</p>",
        "id": 480299391,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1730632494
    },
    {
        "content": "<p>it does simple generation of intro dest and elim rules for definitions of the form A = B /\\ C .. /\\ N</p>",
        "id": 480299454,
        "sender_full_name": "irvin",
        "timestamp": 1730632550
    },
    {
        "content": "<p>Thanks! It seems relevant. I will read it.</p>",
        "id": 480299617,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1730632703
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"754515\">Yiming Xu</span> <a href=\"#narrow/channel/238552-Beginner-Questions/topic/Sledgehammer.20proof.20found.20quickly.20but.20not.20work/near/480299133\">said</a>:</p>\n<blockquote>\n<p>It seems not such a common approach though. May I please ask if there is a quicker way to, from:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"n\">nbisim</span><span class=\"w\"> </span><span class=\"n\">Z</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"n\">M</span><span class=\"w\"> </span><span class=\"n\">M'</span><span class=\"w\"> </span><span class=\"n\">w</span><span class=\"w\"> </span><span class=\"n\">w'</span><span class=\"w\"> </span><span class=\"n\">≡</span>\n<span class=\"w\">  </span><span class=\"o\">(</span><span class=\"n\">∀i</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"w\"> </span><span class=\"n\">v'.</span><span class=\"w\"> </span><span class=\"n\">Z</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"w\"> </span><span class=\"n\">v'</span><span class=\"w\"> </span><span class=\"n\">⟶</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"n\">≤</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"n\">∧</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"w\"> </span><span class=\"n\">∈</span><span class=\"w\"> </span><span class=\"n\">world</span><span class=\"w\"> </span><span class=\"n\">M</span><span class=\"w\"> </span><span class=\"n\">∧</span><span class=\"w\"> </span><span class=\"n\">v'</span><span class=\"w\"> </span><span class=\"n\">∈</span><span class=\"w\"> </span><span class=\"n\">world</span><span class=\"w\"> </span><span class=\"n\">M'</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">∧</span>\n<span class=\"w\">  </span><span class=\"o\">(</span><span class=\"n\">∀i</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"w\"> </span><span class=\"n\">v'.</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">1</span><span class=\"w\"> </span><span class=\"n\">≤</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Z</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">1</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"w\"> </span><span class=\"n\">v'</span><span class=\"w\"> </span><span class=\"n\">⟶</span><span class=\"w\"> </span><span class=\"n\">Z</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"w\"> </span><span class=\"n\">v'</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">∧</span>\n<span class=\"w\">  </span><span class=\"o\">(</span><span class=\"n\">∀v</span><span class=\"w\"> </span><span class=\"n\">v'</span><span class=\"w\"> </span><span class=\"n\">p.</span><span class=\"w\"> </span><span class=\"n\">Z</span><span class=\"w\"> </span><span class=\"n\">0</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"w\"> </span><span class=\"n\">v'</span><span class=\"w\"> </span><span class=\"n\">⟶</span><span class=\"w\"> </span><span class=\"n\">valt</span><span class=\"w\"> </span><span class=\"n\">M</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">valt</span><span class=\"w\"> </span><span class=\"n\">M'</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"n\">v'</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">∧</span>\n<span class=\"w\">  </span><span class=\"o\">(</span><span class=\"n\">∀i</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"w\"> </span><span class=\"n\">v'</span><span class=\"w\"> </span><span class=\"n\">ul</span><span class=\"w\"> </span><span class=\"n\">m.</span>\n<span class=\"w\">    </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">1</span><span class=\"w\"> </span><span class=\"n\">≤</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"n\">∧</span><span class=\"w\"> </span><span class=\"n\">Z</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">1</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"w\"> </span><span class=\"n\">v'</span><span class=\"w\"> </span><span class=\"n\">∧</span><span class=\"w\"> </span><span class=\"n\">rel</span><span class=\"w\"> </span><span class=\"n\">M</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">v</span><span class=\"w\"> </span><span class=\"n\">#</span><span class=\"w\"> </span><span class=\"n\">ul</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">⟶</span>\n<span class=\"w\">    </span><span class=\"o\">(</span><span class=\"n\">∃ul'.</span>\n<span class=\"w\">      </span><span class=\"n\">rel</span><span class=\"w\"> </span><span class=\"n\">M'</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">v'</span><span class=\"w\"> </span><span class=\"n\">#</span><span class=\"w\"> </span><span class=\"n\">ul'</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">∧</span>\n<span class=\"w\">      </span><span class=\"o\">(</span><span class=\"n\">∀u</span><span class=\"w\"> </span><span class=\"n\">u'.</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">u</span><span class=\"o\">,</span><span class=\"n\">u'</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">∈</span><span class=\"w\"> </span><span class=\"n\">set</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">zip</span><span class=\"w\"> </span><span class=\"n\">ul</span><span class=\"w\"> </span><span class=\"n\">ul'</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">⟶</span><span class=\"w\"> </span><span class=\"n\">Z</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"n\">u</span><span class=\"w\"> </span><span class=\"n\">u'</span><span class=\"o\">)))</span><span class=\"w\"> </span><span class=\"n\">∧</span>\n<span class=\"w\">  </span><span class=\"o\">(</span><span class=\"n\">∀i</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"w\"> </span><span class=\"n\">v'</span><span class=\"w\"> </span><span class=\"n\">ul'</span><span class=\"w\"> </span><span class=\"n\">m.</span>\n<span class=\"w\">    </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">1</span><span class=\"w\"> </span><span class=\"n\">≤</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"n\">∧</span><span class=\"w\"> </span><span class=\"n\">Z</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">1</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"w\"> </span><span class=\"n\">v'</span><span class=\"w\"> </span><span class=\"n\">∧</span><span class=\"w\"> </span><span class=\"n\">rel</span><span class=\"w\"> </span><span class=\"n\">M'</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">v'</span><span class=\"w\"> </span><span class=\"n\">#</span><span class=\"w\"> </span><span class=\"n\">ul'</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">⟶</span>\n<span class=\"w\">    </span><span class=\"o\">(</span><span class=\"n\">∃ul.</span>\n<span class=\"w\">      </span><span class=\"n\">rel</span><span class=\"w\"> </span><span class=\"n\">M'</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">v'</span><span class=\"w\"> </span><span class=\"n\">#</span><span class=\"w\"> </span><span class=\"n\">ul'</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">∧</span>\n<span class=\"w\">      </span><span class=\"o\">(</span><span class=\"n\">∀u</span><span class=\"w\"> </span><span class=\"n\">u'.</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">u</span><span class=\"o\">,</span><span class=\"n\">u'</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">∈</span><span class=\"w\"> </span><span class=\"n\">set</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">zip</span><span class=\"w\"> </span><span class=\"n\">ul</span><span class=\"w\"> </span><span class=\"n\">ul'</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">⟶</span><span class=\"w\"> </span><span class=\"n\">Z</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"n\">u</span><span class=\"w\"> </span><span class=\"n\">u'</span><span class=\"o\">)))</span><span class=\"w\"> </span><span class=\"n\">∧</span>\n<span class=\"w\">  </span><span class=\"n\">Z</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"n\">w</span><span class=\"w\"> </span><span class=\"n\">w'</span>\n</code></pre></div>\n<p>get </p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"n\">nbisim</span><span class=\"w\"> </span><span class=\"n\">Z</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"n\">M</span><span class=\"w\"> </span><span class=\"n\">M'</span><span class=\"w\"> </span><span class=\"n\">w</span><span class=\"w\"> </span><span class=\"n\">w'</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"n\">&gt;</span>\n<span class=\"w\">  </span><span class=\"o\">(</span><span class=\"n\">∀i</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"w\"> </span><span class=\"n\">v'.</span><span class=\"w\"> </span><span class=\"n\">Z</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"w\"> </span><span class=\"n\">v'</span><span class=\"w\"> </span><span class=\"n\">⟶</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"n\">≤</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">)</span>\n</code></pre></div>\n<p>(or other equivalent form, up to meta-equivalence)</p>\n<p>I prefer the function-application approach in that case, can this be done in a quicker way?</p>\n</blockquote>\n<p>You can also destroy the equivalence by hand with</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"n\">nbisim_def</span><span class=\"o\">[</span><span class=\"n\">THEN</span><span class=\"w\"> </span><span class=\"n\">iffD1</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 480319336,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1730651042
    },
    {
        "content": "<p>Yes, but it takes multiple steps. I tried several layers and during proof I wrote sth like</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"n\">nbs</span><span class=\"o\">[</span><span class=\"n\">unfolded</span><span class=\"w\"> </span><span class=\"n\">nbisim_def</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">THEN</span><span class=\"w\"> </span><span class=\"n\">conjunct2</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">THEN</span><span class=\"w\"> </span><span class=\"n\">conjunct2</span><span class=\"o\">,</span>\n<span class=\"w\">              </span><span class=\"n\">THEN</span><span class=\"w\"> </span><span class=\"n\">conjunct1</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 480319421,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1730651095
    },
    {
        "content": "<p>It would be nice if we have something like \"conjunct3, conjunct4,etc\".</p>",
        "id": 480319474,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1730651137
    },
    {
        "content": "<p>Oh I remember it is not the main thing I am complaining about!</p>",
        "id": 480319542,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1730651169
    },
    {
        "content": "<p>I am not satisfied with the fact that there is no obvious way to pass the quantifier and implication to get into \"i &lt;= n\" in the first conjunct.</p>",
        "id": 480319592,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1730651207
    },
    {
        "content": "<p>It is easy to get </p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"n\">nbisim</span><span class=\"w\"> </span><span class=\"n\">Z</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"n\">M</span><span class=\"w\"> </span><span class=\"n\">M'</span><span class=\"w\"> </span><span class=\"n\">w</span><span class=\"w\"> </span><span class=\"n\">w'</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"n\">&gt;</span>\n<span class=\"w\">  </span><span class=\"o\">(</span><span class=\"n\">∀i</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"w\"> </span><span class=\"n\">v'.</span><span class=\"w\"> </span><span class=\"n\">Z</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"w\"> </span><span class=\"n\">v'</span><span class=\"w\"> </span><span class=\"n\">⟶</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"n\">≤</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"n\">∧</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"w\"> </span><span class=\"n\">∈</span><span class=\"w\"> </span><span class=\"n\">world</span><span class=\"w\"> </span><span class=\"n\">M</span><span class=\"w\"> </span><span class=\"n\">∧</span><span class=\"w\"> </span><span class=\"n\">v'</span><span class=\"w\"> </span><span class=\"n\">∈</span><span class=\"w\"> </span><span class=\"n\">world</span><span class=\"w\"> </span><span class=\"n\">M'</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 480319621,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1730651223
    },
    {
        "content": "<p>My problem is mainly how to easily get from the above to </p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"n\">nbisim</span><span class=\"w\"> </span><span class=\"n\">Z</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"n\">M</span><span class=\"w\"> </span><span class=\"n\">M'</span><span class=\"w\"> </span><span class=\"n\">w</span><span class=\"w\"> </span><span class=\"n\">w'</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"n\">&gt;</span>\n<span class=\"w\">  </span><span class=\"n\">Z</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"w\"> </span><span class=\"n\">v'</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">&gt;</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"n\">≤</span><span class=\"w\"> </span><span class=\"n\">n</span>\n</code></pre></div>",
        "id": 480319667,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1730651270
    },
    {
        "content": "<p>Or sth like</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"n\">nbisim</span><span class=\"w\"> </span><span class=\"n\">Z</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"n\">M</span><span class=\"w\"> </span><span class=\"n\">M'</span><span class=\"w\"> </span><span class=\"n\">w</span><span class=\"w\"> </span><span class=\"n\">w'</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"n\">&gt;</span>\n<span class=\"w\">  </span><span class=\"n\">Z</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"w\"> </span><span class=\"n\">v'</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"n\">&gt;</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"n\">≤</span><span class=\"w\"> </span><span class=\"n\">n</span>\n</code></pre></div>",
        "id": 480319726,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1730651293
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"n\">nbisim</span><span class=\"w\"> </span><span class=\"n\">Z</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"n\">M</span><span class=\"w\"> </span><span class=\"n\">M'</span><span class=\"w\"> </span><span class=\"n\">w</span><span class=\"w\"> </span><span class=\"n\">w'</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"n\">&gt;</span>\n<span class=\"w\"> </span><span class=\"o\">!!</span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"w\"> </span><span class=\"n\">v.</span><span class=\"w\"> </span><span class=\"n\">Z</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"w\"> </span><span class=\"n\">v'</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"n\">&gt;</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"n\">≤</span><span class=\"w\"> </span><span class=\"n\">n</span>\n</code></pre></div>\n<p>(maybe this one is illegal...) (edit: yes it is illegal and the i's are not the same, silly me.)</p>",
        "id": 480319764,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1730651336
    },
    {
        "content": "<p>First, you could change your definition to use <code>!!</code></p>",
        "id": 480319882,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1730651410
    },
    {
        "content": "<p>It then seems to me that it would help to have a function that takes a theorem, and destroy it apart into as-meta-as-possible version, since it seems to me that conjunct1 can get underneath meta connectives.</p>",
        "id": 480319951,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1730651467
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"233198\">Mathias Fleury</span> <a href=\"#narrow/channel/238552-Beginner-Questions/topic/Sledgehammer.20proof.20found.20quickly.20but.20not.20work/near/480319882\">said</a>:</p>\n<blockquote>\n<p>First, you could change your definition to use <code>!!</code></p>\n</blockquote>\n<p>Let me try a bit the syntax...</p>",
        "id": 480319978,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1730651492
    },
    {
        "content": "<p>Second, once only one conjunct remain, you can use</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">Q</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">‹nbisim Z n M M' w w' ==&gt;</span>\n<span class=\"s\">  (∀i v v'. Z i v v' ⟶ i ≤ n ∧ v ∈ world M ∧ v' ∈ world M')</span>\n<span class=\"s\">›</span>\n<span class=\"w\">  </span><span class=\"gr\">sorry</span>\n<span class=\"kt\">thm</span><span class=\"w\"> </span><span class=\"n\">Q</span><span class=\"o\">[</span><span class=\"n\">rule_format</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 480319992,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1730651503
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"754515\">Yiming Xu</span> <a href=\"#narrow/channel/238552-Beginner-Questions/topic/Sledgehammer.20proof.20found.20quickly.20but.20not.20work/near/480319978\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"233198\">Mathias Fleury</span> <a href=\"#narrow/channel/238552-Beginner-Questions/topic/Sledgehammer.20proof.20found.20quickly.20but.20not.20work/near/480319882\">said</a>:</p>\n<blockquote>\n<p>First, you could change your definition to use <code>!!</code></p>\n</blockquote>\n<p>Let me try a bit the syntax...</p>\n</blockquote>\n<p>A bit tricky. May I please ask, say I have 2 conjuncts:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">definition</span><span class=\"w\"> </span><span class=\"n\">nbisim</span><span class=\"w\"> </span><span class=\"o\">::</span>\n<span class=\"w\"> </span><span class=\"s\">\"(nat ⇒ 'a ⇒ 'b ⇒ bool) ⇒ nat ⇒</span>\n<span class=\"s\">  ('m,'p,'a) model ⇒ ('m,'p,'b) model ⇒</span>\n<span class=\"s\">  'a ⇒ 'b ⇒ bool\"</span><span class=\"w\"> </span><span class=\"kp\">where</span>\n<span class=\"w\"> </span><span class=\"s\">\"nbisim Z n M M' w w' ≡</span>\n<span class=\"s\">  (∀i v v'. Z i v v' ⟶ i ≤ n ∧ v ∈ world M ∧ v' ∈ world M') ∧</span>\n<span class=\"s\">  (∀i v v'. i + 1 ≤ n --&gt; Z (i + 1) v v' ⟶ Z i v v')\"</span>\n</code></pre></div>\n<p>How would I define it use \"!!\"?</p>",
        "id": 480320180,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1730651626
    },
    {
        "content": "<p>(but maybe read: <a href=\"https://proofcraft.org/blog/isabelle-style-part2.html\">https://proofcraft.org/blog/isabelle-style-part2.html</a>)</p>",
        "id": 480320237,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1730651645
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"233198\">Mathias Fleury</span> <a href=\"#narrow/channel/238552-Beginner-Questions/topic/Sledgehammer.20proof.20found.20quickly.20but.20not.20work/near/480319992\">said</a>:</p>\n<blockquote>\n<p>Second, once only one conjunct remain, you can use</p>\n<p><div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">Q</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">‹nbisim Z n M M' w w' ==&gt;</span>\n<span class=\"s\">  (∀i v v'. Z i v v' ⟶ i ≤ n ∧ v ∈ world M ∧ v' ∈ world M')</span>\n<span class=\"s\">›</span>\n<span class=\"w\">  </span><span class=\"gr\">sorry</span>\n<span class=\"kt\">thm</span><span class=\"w\"> </span><span class=\"n\">Q</span><span class=\"o\">[</span><span class=\"n\">rule_format</span><span class=\"o\">]</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>I see, it seems like rule_format is exactly the function I am asking for. i.e. make a theorem as meta-as-possible.</p>",
        "id": 480320276,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1730651685
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"n\">Avoid</span><span class=\"w\"> </span><span class=\"kn\">theorem</span><span class=\"o\">-</span><span class=\"n\">transforming</span><span class=\"w\"> </span><span class=\"n\">attributes</span><span class=\"w\"> </span><span class=\"n\">such</span><span class=\"w\"> </span><span class=\"n\">as</span><span class=\"w\"> </span><span class=\"sx\">`[simplified]`</span><span class=\"w\"> </span><span class=\"kp\">and</span><span class=\"w\"> </span><span class=\"sx\">`[rule_format]`</span><span class=\"w\"> </span><span class=\"kp\">in</span><span class=\"w\"> </span><span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">statements.</span>\n</code></pre></div>",
        "id": 480320423,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1730651776
    },
    {
        "content": "<p>Sad...</p>",
        "id": 480320430,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1730651781
    },
    {
        "content": "<p>But is there any concrete reason that rule_format is bad?</p>",
        "id": 480320455,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1730651806
    },
    {
        "content": "<p>It seems to be predictable to me. Unlike the simplifier that changes over time, I expect it to stay the same because it is very clear that what it is supposed to do.</p>",
        "id": 480320526,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1730651861
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"754515\">Yiming Xu</span> <a href=\"#narrow/channel/238552-Beginner-Questions/topic/Sledgehammer.20proof.20found.20quickly.20but.20not.20work/near/480320455\">said</a>:</p>\n<blockquote>\n<p>But is there any concrete reason that rule_format is bad?</p>\n</blockquote>\n<p>from a maintainers point of view: the output can change in different Isabelle version, hence you have to look at the old version to find what changed, which is annoying</p>",
        "id": 480320558,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1730651877
    },
    {
        "content": "<p>but the main reason is that it goes a bit against the idea of nice Isar proofs</p>",
        "id": 480320629,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1730651910
    },
    {
        "content": "<p>It is helpful to have. Thank you and then I will try to only use it for proof exploration then!</p>",
        "id": 480320717,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1730651995
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"754515\">Yiming Xu</span> <a href=\"#narrow/channel/238552-Beginner-Questions/topic/Sledgehammer.20proof.20found.20quickly.20but.20not.20work/near/480320180\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"754515\">Yiming Xu</span> <a href=\"#narrow/channel/238552-Beginner-Questions/topic/Sledgehammer.20proof.20found.20quickly.20but.20not.20work/near/480319978\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"233198\">Mathias Fleury</span> <a href=\"#narrow/channel/238552-Beginner-Questions/topic/Sledgehammer.20proof.20found.20quickly.20but.20not.20work/near/480319882\">said</a>:</p>\n<blockquote>\n<p>First, you could change your definition to use <code>!!</code></p>\n</blockquote>\n<p>Let me try a bit the syntax...</p>\n</blockquote>\n<p>A bit tricky. May I please ask, say I have 2 conjuncts:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">definition</span><span class=\"w\"> </span><span class=\"n\">nbisim</span><span class=\"w\"> </span><span class=\"o\">::</span>\n<span class=\"w\"> </span><span class=\"s\">\"(nat ⇒ 'a ⇒ 'b ⇒ bool) ⇒ nat ⇒</span>\n<span class=\"s\">  ('m,'p,'a) model ⇒ ('m,'p,'b) model ⇒</span>\n<span class=\"s\">  'a ⇒ 'b ⇒ bool\"</span><span class=\"w\"> </span><span class=\"kp\">where</span>\n<span class=\"w\"> </span><span class=\"s\">\"nbisim Z n M M' w w' ≡</span>\n<span class=\"s\">  (∀i v v'. Z i v v' ⟶ i ≤ n ∧ v ∈ world M ∧ v' ∈ world M') ∧</span>\n<span class=\"s\">  (∀i v v'. i + 1 ≤ n --&gt; Z (i + 1) v v' ⟶ Z i v v')\"</span>\n</code></pre></div>\n<p>How would I define it use \"!!\"?</p>\n</blockquote>\n<p>ah that is really ugly because there is no conjunction in Pure. Use induction is probably better at that point</p>",
        "id": 480320774,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1730652004
    },
    {
        "content": "<p>I mean this is really ugly:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">definition</span><span class=\"w\"> </span><span class=\"n\">nbisim</span><span class=\"w\">  </span><span class=\"kp\">where</span>\n<span class=\"w\"> </span><span class=\"s\">\"nbisim Z n M M' w w' ≡</span>\n<span class=\"s\">  (⋀thesis. (⋀i v v'. Z i v v' ⟶ i ≤ n ∧ v ∈ world M ∧ v' ∈ world M') ⟹</span>\n<span class=\"s\">  (⋀i v v'. i + 1 ≤ n --&gt; Z (i + 1) v v' ⟶ Z i v v') ⟹ thesis)\"</span>\n</code></pre></div>",
        "id": 480320818,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1730652040
    },
    {
        "content": "<p>This is unfortunately not an inductive definition.</p>",
        "id": 480320819,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1730652040
    },
    {
        "content": "<p>every definition is also an inductive definition</p>",
        "id": 480320842,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1730652059
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"233198\">Mathias Fleury</span> <a href=\"#narrow/channel/238552-Beginner-Questions/topic/Sledgehammer.20proof.20found.20quickly.20but.20not.20work/near/480320818\">said</a>:</p>\n<blockquote>\n<p>I mean this is really ugly:</p>\n<p><div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">definition</span><span class=\"w\"> </span><span class=\"n\">nbisim</span><span class=\"w\">  </span><span class=\"kp\">where</span>\n<span class=\"w\"> </span><span class=\"s\">\"nbisim Z n M M' w w' ≡</span>\n<span class=\"s\">  (⋀thesis. (⋀i v v'. Z i v v' ⟶ i ≤ n ∧ v ∈ world M ∧ v' ∈ world M') ⟹</span>\n<span class=\"s\">  (⋀i v v'. i + 1 ≤ n --&gt; Z (i + 1) v v' ⟶ Z i v v') ⟹ thesis)\"</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>In this sense I will agree (since it is a shape of an inductive principle). I am not aware that such a thing is generated.</p>",
        "id": 480320876,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1730652075
    },
    {
        "content": "<p>How would you suggest reshaping it or is it even possible? I was proving little lemmas like:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">nbisim_bound</span><span class=\"w\"> </span><span class=\"o\">:</span>\n<span class=\"w\">  </span><span class=\"kp\">assumes</span><span class=\"w\"> </span><span class=\"n\">nbs</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"nbisim Z n M M' w w'\"</span>\n<span class=\"w\">     </span><span class=\"kp\">and</span><span class=\"w\"> </span><span class=\"n\">Z</span><span class=\"o\">:</span><span class=\"s\">\"Z i v v'\"</span><span class=\"w\"> </span><span class=\"kp\">shows</span><span class=\"w\"> </span><span class=\"s\">\"i ≤ n\"</span>\n<span class=\"w\">  </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">nbs</span><span class=\"o\">[</span><span class=\"n\">unfolded</span><span class=\"w\"> </span><span class=\"n\">nbisim_def</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">THEN</span><span class=\"w\"> </span><span class=\"n\">conjunct1</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"n\">Z</span><span class=\"w\">  </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">blast</span>\n\n<span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">nbisim_Z_world1</span><span class=\"w\"> </span><span class=\"o\">:</span>\n<span class=\"w\">  </span><span class=\"kp\">assumes</span><span class=\"w\"> </span><span class=\"n\">nbs</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"nbisim Z n M M' w w'\"</span>\n<span class=\"w\">     </span><span class=\"kp\">and</span><span class=\"w\"> </span><span class=\"n\">Z</span><span class=\"o\">:</span><span class=\"s\">\"Z i v v'\"</span><span class=\"w\"> </span><span class=\"kp\">shows</span><span class=\"w\"> </span><span class=\"s\">\"v ∈ world M\"</span>\n<span class=\"w\">  </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">nbs</span><span class=\"o\">[</span><span class=\"n\">unfolded</span><span class=\"w\"> </span><span class=\"n\">nbisim_def</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">THEN</span><span class=\"w\"> </span><span class=\"n\">conjunct1</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"n\">Z</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">simp</span>\n\n\n<span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">nbisim_Z_world2</span><span class=\"w\"> </span><span class=\"o\">:</span>\n<span class=\"w\">  </span><span class=\"kp\">assumes</span><span class=\"w\"> </span><span class=\"n\">nbs</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"nbisim Z n M M' w w'\"</span>\n<span class=\"w\">     </span><span class=\"kp\">and</span><span class=\"w\"> </span><span class=\"n\">Z</span><span class=\"o\">:</span><span class=\"s\">\"Z i v v'\"</span><span class=\"w\"> </span><span class=\"kp\">shows</span><span class=\"w\"> </span><span class=\"s\">\"v' ∈ world M'\"</span>\n<span class=\"w\">  </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">nbs</span><span class=\"o\">[</span><span class=\"n\">unfolded</span><span class=\"w\"> </span><span class=\"n\">nbisim_def</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">THEN</span><span class=\"w\"> </span><span class=\"n\">conjunct1</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"n\">Z</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">simp</span>\n\n<span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">nbisim_valt</span><span class=\"o\">:</span>\n<span class=\"w\">  </span><span class=\"kp\">assumes</span><span class=\"w\"> </span><span class=\"n\">nbs</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"nbisim Z n M M' w w'\"</span>\n<span class=\"w\">     </span><span class=\"kp\">and</span><span class=\"w\"> </span><span class=\"n\">Z</span><span class=\"o\">:</span><span class=\"s\">\"Z i v v'\"</span><span class=\"w\"> </span><span class=\"kp\">shows</span><span class=\"w\"> </span><span class=\"s\">\"valt M p v = valt M' p v'\"</span>\n<span class=\"k\">proof</span><span class=\"w\"> </span><span class=\"o\">-</span>\n<span class=\"w\">  </span><span class=\"k\">from</span><span class=\"w\"> </span><span class=\"n\">assms</span><span class=\"w\"> </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"s\">\"Z 0 v v'\"</span><span class=\"w\"> </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">nbisim_chain</span><span class=\"o\">[</span><span class=\"n\">OF</span><span class=\"w\"> </span><span class=\"n\">nbs</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"n\">nbisim_bound</span><span class=\"o\">[</span><span class=\"n\">OF</span><span class=\"w\"> </span><span class=\"n\">nbs</span><span class=\"w\"> </span><span class=\"n\">Z</span><span class=\"o\">]</span>\n<span class=\"w\">    </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">blast</span>\n<span class=\"w\">  </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">thesis</span>\n<span class=\"w\">    </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">nbs</span><span class=\"o\">[</span><span class=\"n\">unfolded</span><span class=\"w\"> </span><span class=\"n\">nbisim_def</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">THEN</span><span class=\"w\"> </span><span class=\"n\">conjunct2</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">THEN</span><span class=\"w\"> </span><span class=\"n\">conjunct2</span><span class=\"o\">,</span>\n<span class=\"w\">              </span><span class=\"n\">THEN</span><span class=\"w\"> </span><span class=\"n\">conjunct1</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">blast</span>\n<span class=\"k\">qed</span>\n</code></pre></div>\n<p>to take out the conjuncts and reshape them into rules...</p>",
        "id": 480321006,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1730652164
    },
    {
        "content": "<p>Umm? In which sense do we not have conjunction in Pure? We have the <code>&amp;&amp;&amp;</code>.</p>",
        "id": 480321381,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1730652476
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">inductive</span><span class=\"w\"> </span><span class=\"n\">nbisim</span><span class=\"w\"> </span><span class=\"kp\">for</span><span class=\"w\"> </span><span class=\"n\">Z</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"n\">M</span><span class=\"w\"> </span><span class=\"n\">M'</span><span class=\"w\"> </span><span class=\"n\">w</span><span class=\"w\"> </span><span class=\"n\">w'</span><span class=\"w\"> </span><span class=\"kp\">where</span>\n<span class=\"n\">1</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">‹nbisim Z n M M' w w'›</span>\n<span class=\"kp\">if</span><span class=\"w\"> </span><span class=\"s\">‹⋀i v v'. Z i v v' ⟹ i ≤ n ∧ v ∈ world M ∧ v' ∈ world M'›</span><span class=\"w\"> </span><span class=\"kp\">and</span>\n<span class=\"w\">   </span><span class=\"s\">‹⋀i v v'. i + 1 ≤ n ⟹ Z (i + 1) v v' ⟹ Z i v v'›</span>\n\n<span class=\"kn\">inductive_cases</span><span class=\"w\"> </span><span class=\"n\">nbisimE</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">‹nbisim Z n M M' w w'›</span>\n\n<span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">nbisim_bound</span><span class=\"o\">:</span>\n<span class=\"w\">  </span><span class=\"kp\">assumes</span><span class=\"w\">  </span><span class=\"s\">‹nbisim Z n M M' w w'›</span>\n<span class=\"w\">  </span><span class=\"kp\">shows</span><span class=\"w\"> </span><span class=\"s\">‹⋀i v v'. Z i v v' ⟹ i ≤ n ∧ v ∈ world M ∧ v' ∈ world M'›</span>\n<span class=\"w\">  </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">assms</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">rule</span><span class=\"w\"> </span><span class=\"n\">nbisim.cases</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">blast</span>\n\n<span class=\"kt\">thm</span><span class=\"w\"> </span><span class=\"n\">nbisim_bound</span><span class=\"o\">[</span><span class=\"n\">THEN</span><span class=\"w\"> </span><span class=\"n\">conjunct2</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 480321484,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1730652538
    },
    {
        "content": "<p>Wow black technology!!!</p>",
        "id": 480321764,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1730652730
    },
    {
        "content": "<p>So it would have the same effect as the iff, where the \"inductive clauses\" gives \"_ /\\ _ ....==&gt; nbisim\" and the induction principle gives \"nbisim ==&gt; ... /\\ ...\".</p>",
        "id": 480321850,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1730652826
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"754515\">Yiming Xu</span> <a href=\"#narrow/channel/238552-Beginner-Questions/topic/Sledgehammer.20proof.20found.20quickly.20but.20not.20work/near/480321381\">said</a>:</p>\n<blockquote>\n<p>Umm? In which sense do we not have conjunction in Pure? We have the <code>&amp;&amp;&amp;</code>.</p>\n</blockquote>\n<p>ah try I forgot that:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">definition</span><span class=\"w\"> </span><span class=\"n\">nbisim'</span><span class=\"w\">  </span><span class=\"kp\">where</span>\n<span class=\"w\"> </span><span class=\"s\">\"nbisim' Z n M M' w w' ≡</span>\n<span class=\"s\">  ((⋀i v v'. Z i v v' ⟹ i ≤ n ∧ v ∈ world M ∧ v' ∈ world M') &amp;&amp;&amp;</span>\n<span class=\"s\">  (⋀i v v'. i + 1 ≤ n ⟹ Z (i + 1) v v' ⟹ Z i v v'))\"</span>\n\n<span class=\"kt\">thm</span><span class=\"w\"> </span><span class=\"n\">equal_elim_rule1</span><span class=\"o\">[</span><span class=\"n\">OF</span><span class=\"w\"> </span><span class=\"n\">nbisim'_def</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">THEN</span><span class=\"w\"> </span><span class=\"n\">conjunctionD1</span><span class=\"o\">]</span>\n<span class=\"kt\">thm</span><span class=\"w\"> </span><span class=\"n\">equal_elim_rule1</span><span class=\"o\">[</span><span class=\"n\">OF</span><span class=\"w\"> </span><span class=\"n\">nbisim'_def</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">THEN</span><span class=\"w\"> </span><span class=\"n\">conjunctionD2</span><span class=\"o\">]</span>\n<span class=\"kt\">thm</span><span class=\"w\"> </span><span class=\"n\">iffD1</span><span class=\"w\"> </span><span class=\"n\">conjunct2</span>\n</code></pre></div>\n<p>EDIT: with ⟹</p>",
        "id": 480321856,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1730652833
    },
    {
        "content": "<p>Ahh it works...</p>",
        "id": 480321972,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1730652936
    },
    {
        "content": "<p>Tried that meta-logic is happy even with</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">definition</span><span class=\"w\"> </span><span class=\"n\">nbisim'</span><span class=\"w\">  </span><span class=\"kp\">where</span>\n<span class=\"w\"> </span><span class=\"s\">\"nbisim' Z n M M' w w' ≡</span>\n<span class=\"s\">  ((⋀i v v'. Z i v v' ⟹ i ≤ n &amp;&amp;&amp; v ∈ world M &amp;&amp;&amp; v' ∈ world M') &amp;&amp;&amp;</span>\n<span class=\"s\">  (⋀i v v'. i + 1 ≤ n ⟹ Z (i + 1) v v' ⟹ Z i v v'))\"</span>\n</code></pre></div>",
        "id": 480322106,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1730653023
    },
    {
        "content": "<p>But maybe a better idea is just to split them up into different conjuncts...</p>",
        "id": 480322137,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1730653046
    },
    {
        "content": "<p>I have trouble stating theorems with the new definition:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">nbisim_below</span><span class=\"o\">:</span>\n<span class=\"w\"> </span><span class=\"kp\">assumes</span><span class=\"w\"> </span><span class=\"n\">M</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"is_model sig M\"</span>\n<span class=\"w\">      </span><span class=\"kp\">and</span><span class=\"w\"> </span><span class=\"n\">M'</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"is_model sig M'\"</span>\n<span class=\"w\">      </span><span class=\"kp\">and</span><span class=\"w\"> </span><span class=\"n\">nbs</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"nbisim' Z n M M' w w'\"</span>\n<span class=\"w\">      </span><span class=\"kp\">and</span><span class=\"w\"> </span><span class=\"n\">k</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"k ≤ n\"</span>\n<span class=\"w\">    </span><span class=\"kp\">shows</span><span class=\"w\"> </span><span class=\"s\">\"nbisim' Z1 k M M' w w'\"</span>\n</code></pre></div>\n<p>reports error.</p>\n<p>with error message:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"n\">Type</span><span class=\"w\"> </span><span class=\"n\">unification</span><span class=\"w\"> </span><span class=\"n\">failed</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Clash</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">types</span><span class=\"w\"> </span><span class=\"s\">\"prop\"</span><span class=\"w\"> </span><span class=\"kp\">and</span><span class=\"w\"> </span><span class=\"s\">\"bool\"</span>\n\n<span class=\"n\">Type</span><span class=\"w\"> </span><span class=\"n\">error</span><span class=\"w\"> </span><span class=\"kp\">in</span><span class=\"w\"> </span><span class=\"n\">application</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">incompatible</span><span class=\"w\"> </span><span class=\"n\">operand</span><span class=\"w\"> </span><span class=\"n\">type</span>\n\n<span class=\"n\">Operator</span><span class=\"o\">:</span><span class=\"w\">  </span><span class=\"n\">Trueprop</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"n\">bool</span><span class=\"w\"> </span><span class=\"n\">⇒</span><span class=\"w\"> </span><span class=\"kt\">prop</span>\n<span class=\"n\">Operand</span><span class=\"o\">:</span><span class=\"w\">   </span><span class=\"n\">nbisim'</span><span class=\"w\"> </span><span class=\"n\">Z</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"n\">M</span><span class=\"w\"> </span><span class=\"n\">M'</span><span class=\"w\"> </span><span class=\"n\">w</span><span class=\"w\"> </span><span class=\"n\">w'</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"kt\">prop</span>\n</code></pre></div>",
        "id": 480404238,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1730713608
    },
    {
        "content": "<p>What might be wrong here?</p>",
        "id": 480404256,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1730713616
    },
    {
        "content": "<p>I defined:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">definition</span><span class=\"w\"> </span><span class=\"n\">nbisim'</span><span class=\"w\">  </span><span class=\"kp\">where</span>\n<span class=\"w\"> </span><span class=\"s\">\"nbisim' Z n M M' w w' ≡</span>\n<span class=\"s\">  ((⋀i v v'. Z i v v' ⟹ i ≤ n &amp;&amp;&amp; v ∈ world M &amp;&amp;&amp; v' ∈ world M') &amp;&amp;&amp;</span>\n<span class=\"s\">  (⋀i v v'. i + 1 ≤ n ⟹ Z (i + 1) v v' ⟹ Z i v v') &amp;&amp;&amp;</span>\n<span class=\"s\">  (⋀v v' p. Z 0 v v' ⟹ valt M p v = valt M' p v') &amp;&amp;&amp;</span>\n<span class=\"s\">   (⋀i v v' ul m.</span>\n<span class=\"s\">    i + 1 ≤ n ⟹ Z (i + 1) v v' ⟹ rel M m (v # ul) ⟹</span>\n<span class=\"s\">    (∃ul'.</span>\n<span class=\"s\">      rel M' m (v' # ul') ∧</span>\n<span class=\"s\">      (∀u u'. (u,u') ∈ set (zip ul ul') ⟶ Z i u u'))) &amp;&amp;&amp;</span>\n<span class=\"s\">  (⋀i v v' ul' m.</span>\n<span class=\"s\">    i + 1 ≤ n ⟹ Z (i + 1) v v' ⟹ rel M' m (v' # ul') ⟹</span>\n<span class=\"s\">    (∃ul.</span>\n<span class=\"s\">      rel M' m (v' # ul') ∧</span>\n<span class=\"s\">      (∀u u'. (u,u') ∈ set (zip ul ul') ⟶ Z i u u'))) &amp;&amp;&amp;</span>\n<span class=\"s\">  Z n w w')\"</span>\n</code></pre></div>",
        "id": 480404304,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1730713632
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">definition</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">‹_›</span><span class=\"w\"> </span><span class=\"kp\">where</span>\n<span class=\"s\">‹X ≡ Trueprop True›</span>\n\n<span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"kp\">shows</span><span class=\"w\"> </span><span class=\"s\">\"PROP X\"</span>\n</code></pre></div>",
        "id": 480405123,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1730713837
    },
    {
        "content": "<p>There is an implicit conversion from bool (the HOL thing) to prop (the Pure thing) , which is bad in this case</p>",
        "id": 480405284,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1730713883
    },
    {
        "content": "<p>There is no easy way around that</p>",
        "id": 480405386,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1730713913
    },
    {
        "content": "<p>I checked \"PROP\" is not a term, so PROP is not a HOL-level function.</p>",
        "id": 480406026,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1730714096
    },
    {
        "content": "<p>Trueprop is the implicit conversion</p>",
        "id": 480406121,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1730714139
    },
    {
        "content": "<p>I think I am confused by these subtle things. Where is the position that \"Trueprop\" is implicitly inserted in </p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">nbisim_below</span><span class=\"o\">:</span>\n<span class=\"w\"> </span><span class=\"kp\">assumes</span><span class=\"w\"> </span><span class=\"n\">M</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"is_model sig M\"</span>\n<span class=\"w\">      </span><span class=\"kp\">and</span><span class=\"w\"> </span><span class=\"n\">M'</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"is_model sig M'\"</span>\n<span class=\"w\">      </span><span class=\"kp\">and</span><span class=\"w\"> </span><span class=\"n\">nbs</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"nbisim' Z n M M' w w'\"</span>\n<span class=\"w\">      </span><span class=\"kp\">and</span><span class=\"w\"> </span><span class=\"n\">k</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"k ≤ n\"</span>\n<span class=\"w\">    </span><span class=\"kp\">shows</span><span class=\"w\"> </span><span class=\"s\">\"nbisim' Z1 k M M' w w'\"</span>\n</code></pre></div>\n<p>?</p>",
        "id": 480406181,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1730714160
    },
    {
        "content": "<p>It is parsed as</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"w\"> </span><span class=\"kp\">shows</span><span class=\"w\"> </span><span class=\"s\">\"Trueprop (nbisim' Z1 k M M' w w')\"</span>\n</code></pre></div>\n<p>(like <code>shows \"Trueprop True\"</code>)</p>",
        "id": 480406341,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1730714210
    },
    {
        "content": "<p>It is (nearly) always the right thing</p>",
        "id": 480406512,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1730714270
    },
    {
        "content": "<p>I see, so for the meta-definition, it defines <code>nbisim' Z1 k M M' w w'</code> to be a prop instead of bool. And if there is any way to get rid of that, that would be to force it not to parse it as \"<code>Trueprop (nbisim' Z1 k M M' w w')</code>\", i.e. to insert the Trueprop, but to keep the original <code>nbisim' Z1 k M M' w w'</code>. Is that correct?</p>",
        "id": 480406659,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1730714313
    },
    {
        "content": "<p>And it would be tricky because parsing is at implementation level...</p>",
        "id": 480406708,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1730714333
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"754515\">Yiming Xu</span> <a href=\"#narrow/channel/238552-Beginner-Questions/topic/Sledgehammer.20proof.20found.20quickly.20but.20not.20work/near/480406659\">said</a>:</p>\n<blockquote>\n<p>I see, so for the meta-definition, it defines <code>nbisim' Z1 k M M' w w'</code> to be a prop instead of bool. And if there is any way to get rid of that, that would be to force it not to parse it as \"<code>Trueprop (nbisim' Z1 k M M' w w')</code>\", i.e. to insert the Trueprop, but to keep the original <code>nbisim' Z1 k M M' w w'</code>. Is that correct?</p>\n</blockquote>\n<p>that is what the PROP does yes</p>",
        "id": 480406957,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1730714413
    },
    {
        "content": "<p>lemma nbisim_below: <br>\n assumes M: \"is_model sig M\"<br>\n      and M': \"is_model sig M'\"<br>\n      and nbs: \"nbisim' Z n M M' w w'\"<br>\n      and k: \"k ≤ n\"<br>\n    shows \"PROP (nbisim' Z1 k M M' w w')\" </p>\n<p>still not accepted, with the same error message. A bit unfortunate.</p>",
        "id": 480407195,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1730714505
    },
    {
        "content": "<p>I can live with the original definition. Thank you! That is good to know!</p>",
        "id": 480407319,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1730714537
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kp\">and</span><span class=\"w\"> </span><span class=\"n\">nbs</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"nbisim' Z n M M' w w'\"</span>\n</code></pre></div>\n<p>needs to be fixed too</p>",
        "id": 480407408,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1730714576
    },
    {
        "content": "<p>Vielen Danke that works!</p>",
        "id": 480407672,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1730714660
    },
    {
        "content": "<p>lemma nbisim_below: <br>\n assumes M: \"(is_model sig M)\"<br>\n      and M': \"(is_model sig M')\"<br>\n      and nbs: \"PROP (nbisim' Z n M M' w w')\"<br>\n      and k: \"k ≤ n\"<br>\n    shows \"PROP (nbisim' Z1 k M M' w w')\" unfolding nbisim'_def</p>\n<p>That is what is accepted.</p>",
        "id": 480407728,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1730714676
    }
]