[
    {
        "content": "<p>If I want to define some super using:</p>\n<p>type_synonym 'a double_word = 'a bit0 word</p>\n<p>It seems whenever I want to use 'a double_word as a type in a function or lemma, I need to specify ('a::len0) </p>\n<p>Is there some way around this just to improve readability?</p>",
        "id": 235828734,
        "sender_full_name": "Ian Blumenfeld",
        "timestamp": 1619179556
    },
    {
        "content": "<p>No (see <a href=\"https://lists.cam.ac.uk/pipermail/cl-isabelle-users/2012-August/msg00106.html\">https://lists.cam.ac.uk/pipermail/cl-isabelle-users/2012-August/msg00106.html</a>)</p>",
        "id": 235838494,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1619183922
    },
    {
        "content": "<p>There is one thing you can do:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">context</span>\n  <span class=\"kp\">assumes</span> <span class=\"s\">\"SORT_CONSTRAINT('a :: len0)\"</span>\n<span class=\"k\">begin</span>\n<span class=\"err\">…</span>\n<span class=\"k\">end</span>\n</code></pre></div>\n<p>Inside that context, the type variable <code>'a</code> will always have a <code>len0</code> attached to it. Note however that the <code>'a</code> is fixed in this entire context. That means that if you prove some theorem involving <code>'a</code>, you will not be able to use it for any other type before you leave the context (i.e. the implicit polymorphism only comes into effect once you leave the context).</p>",
        "id": 235838953,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1619184110
    },
    {
        "content": "<p>Just one of those little-known Isabelle hacks that I saw somewhere once and thought ‘Wow, this is terrible. I will start using it immediately!’</p>",
        "id": 235839151,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1619184179
    }
]