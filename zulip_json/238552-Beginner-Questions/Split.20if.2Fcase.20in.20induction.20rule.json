[
    {
        "content": "<p>Say I have a function </p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"'a list =&gt; 'a list\"</span><span class=\"w\"> </span><span class=\"kp\">where</span>\n<span class=\"s\">\"f [] = []\"</span>\n<span class=\"s\">\"f (x#xs) = (if P x then x # f (g xs) else x # f (h xs))\"</span>\n</code></pre></div>\n<p>How can I get an induction rule that creates individual cases for P x and ~P x respectively?</p>",
        "id": 434502696,
        "sender_full_name": "Christian Zimmerer",
        "timestamp": 1713620889
    },
    {
        "content": "<p>You'll have to prove it yourself:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">f_induct</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">case_names</span><span class=\"w\"> </span><span class=\"n\">Nil</span><span class=\"w\"> </span><span class=\"n\">Cons1</span><span class=\"w\"> </span><span class=\"n\">Cons2</span><span class=\"o\">]:</span>\n<span class=\"w\">  </span><span class=\"kp\">assumes</span><span class=\"w\"> </span><span class=\"s\">\"Q []\"</span>\n<span class=\"w\">  </span><span class=\"kp\">assumes</span><span class=\"w\"> </span><span class=\"s\">\"⋀x xs. P x ⟹ Q (g xs) ⟹ Q (x # xs)\"</span>\n<span class=\"w\">  </span><span class=\"kp\">assumes</span><span class=\"w\"> </span><span class=\"s\">\"⋀x xs. ¬P x ⟹ Q (h xs) ⟹ Q (x # xs)\"</span>\n<span class=\"w\">  </span><span class=\"kp\">shows</span><span class=\"w\">   </span><span class=\"s\">\"Q xs\"</span>\n<span class=\"w\">  </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">assms</span><span class=\"w\"> </span><span class=\"n\">f.induct</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">metis</span>\n</code></pre></div>\n<p>You can also prove such induction rules from scratch using the <code>induction_schema</code> tactic:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">f_induct</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">case_names</span><span class=\"w\"> </span><span class=\"n\">Nil</span><span class=\"w\"> </span><span class=\"n\">Cons1</span><span class=\"w\"> </span><span class=\"n\">Cons2</span><span class=\"o\">]:</span>\n<span class=\"w\">  </span><span class=\"kp\">assumes</span><span class=\"w\"> </span><span class=\"s\">\"Q []\"</span>\n<span class=\"w\">  </span><span class=\"kp\">assumes</span><span class=\"w\"> </span><span class=\"s\">\"⋀x xs. P x ⟹ Q (g xs) ⟹ Q (x # xs)\"</span>\n<span class=\"w\">  </span><span class=\"kp\">assumes</span><span class=\"w\"> </span><span class=\"s\">\"⋀x xs. ¬P x ⟹ Q (h xs) ⟹ Q (x # xs)\"</span>\n<span class=\"w\">  </span><span class=\"kp\">shows</span><span class=\"w\">   </span><span class=\"s\">\"Q xs\"</span>\n<span class=\"w\">  </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">assms</span>\n<span class=\"w\">  </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"n\">induction_schema</span>\n<span class=\"w\">    </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">list.exhaust_sel</span><span class=\"w\"> </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"n\">blast</span>\n<span class=\"w\">    </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">rule</span><span class=\"w\"> </span><span class=\"n\">wf_measure</span><span class=\"o\">[</span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">length</span><span class=\"o\">])</span>\n<span class=\"w\">     </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"n\">auto</span>\n<span class=\"w\">    </span><span class=\"k\">done</span>\n</code></pre></div>\n<p>Lastly, you can also write the function with explicit different cases from the beginning and the generated induction rule will be the one you want. The downside is that code generation will not work anymore (at least not by itself; you'll have to prove the original function definition as a separate code equation):</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">function</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"'a list =&gt; 'a list\"</span><span class=\"w\"> </span><span class=\"kp\">where</span>\n<span class=\"w\">  </span><span class=\"s\">\"f [] = []\"</span>\n<span class=\"o\">|</span><span class=\"w\"> </span><span class=\"s\">\"P x ⟹ f (x#xs) = x # f (g xs)\"</span>\n<span class=\"o\">|</span><span class=\"w\"> </span><span class=\"s\">\"¬P x ⟹ f (x # xs) = x # f (h xs)\"</span>\n<span class=\"w\">  </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">list.exhaust_sel</span><span class=\"w\"> </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"n\">blast</span>\n<span class=\"w\">  </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"n\">auto</span>\n<span class=\"w\">  </span><span class=\"k\">done</span>\n<span class=\"kn\">termination</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">lexicographic_order</span>\n\n<span class=\"kt\">thm</span><span class=\"w\"> </span><span class=\"n\">f.induct</span>\n\n<span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">f_code</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">code</span><span class=\"o\">]:</span>\n<span class=\"w\">  </span><span class=\"s\">\"f [] = []\"</span>\n<span class=\"w\">  </span><span class=\"s\">\"f (x # xs) = (if P x then x # f (g xs) else x # f (h xs))\"</span>\n<span class=\"w\">  </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">auto</span>\n</code></pre></div>",
        "id": 434505182,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1713623036
    },
    {
        "content": "<p>Thank you very much. Sadly, it seems like this is not trivial for the function that I am working with, so I'll have to stick to the ugly induction scheme.</p>",
        "id": 434509604,
        "sender_full_name": "Christian Zimmerer",
        "timestamp": 1713626457
    },
    {
        "content": "<p>if you think you'll use the induction principle with the split cases multiple times, it might be worth proving it once and for all (first one <span class=\"user-mention\" data-user-id=\"232736\">@Manuel Eberl</span>  suggested)</p>",
        "id": 434514745,
        "sender_full_name": "Yong Kiam",
        "timestamp": 1713629564
    },
    {
        "content": "<p>I did it :&gt;</p>",
        "id": 435071705,
        "sender_full_name": "Christian Zimmerer",
        "timestamp": 1713908204
    }
]