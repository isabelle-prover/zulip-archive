[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">datatype</span><span class=\"w\"> </span><span class=\"n\">form</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">VAR</span><span class=\"w\"> </span><span class=\"s\">\"num\"</span>\n<span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">FALSE</span>\n<span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">DISJ</span><span class=\"w\"> </span><span class=\"s\">\"form\"</span><span class=\"w\"> </span><span class=\"s\">\"form\"</span>\n<span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">NOT</span><span class=\"w\"> </span><span class=\"s\">\"form\"</span>\n<span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">DIAM</span><span class=\"w\"> </span><span class=\"s\">\"form\"</span>\n\n<span class=\"k\">record</span><span class=\"w\"> </span><span class=\"n n-Type\">'a</span><span class=\"w\"> </span><span class=\"n\">frame</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">  </span><span class=\"n\">world</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"'a ⇒ bool\"</span>\n<span class=\"w\">  </span><span class=\"n\">rel</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"'a ⇒ 'a ⇒ bool\"</span>\n\n\n<span class=\"k\">record</span><span class=\"w\"> </span><span class=\"n n-Type\">'a</span><span class=\"w\"> </span><span class=\"n\">model</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"'a frame\"</span><span class=\"w\"> </span><span class=\"o\">+</span>\n<span class=\"w\">  </span><span class=\"n\">valt</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"num ⇒ 'a ⇒ bool\"</span>\n\n<span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">satis</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"'a model ⇒ 'a ⇒ form ⇒ bool\"</span>\n<span class=\"kp\">where</span>\n<span class=\"s\">\"satis M w (VAR p) ⟷ (valt M p w ∧ world M w)\"</span>\n<span class=\"o\">|</span><span class=\"w\"> </span><span class=\"s\">\"satis M w FALSE ⟷ False\"</span>\n<span class=\"o\">|</span><span class=\"w\"> </span><span class=\"s\">\"satis M w (NOT f) ⟷ world M w ∧ ¬ satis M w f\"</span>\n<span class=\"o\">|</span><span class=\"w\"> </span><span class=\"s\">\"satis M w (DISJ f1 f2) ⟷ satis M w f1 ∨ satis M w f2\"</span>\n<span class=\"o\">|</span><span class=\"w\"> </span><span class=\"s\">\"satis M w (DIAM f) ⟷ world M w ∧ (∃ v. rel M w v ∧ world M v ∧ satis M v f)\"</span>\n\n\n<span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">satis_in_worlds</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"satis M w f ⟹ world M w\"</span>\n<span class=\"k\">proof</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">induct</span><span class=\"w\"> </span><span class=\"n\">rule</span><span class=\"o\">:</span><span class=\"n\">form.induct</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"k\">case</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">DISJ</span><span class=\"w\"> </span><span class=\"n\">x1a</span><span class=\"w\"> </span><span class=\"n\">x2</span><span class=\"o\">)</span>\n<span class=\"w\"> </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"k\">case</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">auto</span><span class=\"w\"> </span><span class=\"c\">(* not sure if this works, but auto is roughly simp + blast *)</span>\n<span class=\"k\">next</span>\n<span class=\"w\">  </span><span class=\"k\">case</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">DIAM</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"k\">case</span>\n<span class=\"w\">  </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">fastforce</span>\n<span class=\"k\">qed</span><span class=\"w\"> </span><span class=\"n\">simp_all</span>\n\n<span class=\"k\">definition</span><span class=\"w\"> </span><span class=\"n\">BOX_def</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"BOX f = NOT (DIAM (NOT f))\"</span>\n\n<span class=\"k\">definition</span><span class=\"w\"> </span><span class=\"n\">AND_def</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"AND f1 f2 = NOT (DISJ (NOT f1) (NOT f2))\"</span>\n\n<span class=\"k\">definition</span><span class=\"w\"> </span><span class=\"n\">TRUE_def</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"TRUE = NOT FALSE\"</span>\n\n<span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">subst</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"(num ⇒ form) ⇒ form ⇒ form\"</span>\n<span class=\"w\">  </span><span class=\"kp\">where</span>\n<span class=\"w\">   </span><span class=\"s\">\"subst s FALSE = FALSE\"</span>\n<span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"s\">\"subst s (VAR p) = s p\"</span>\n<span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"s\">\"subst s (DISJ f1 f2) = DISJ (subst s f1) (subst s f2)\"</span>\n<span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"s\">\"subst s (NOT f) = NOT (subst s f)\"</span>\n<span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"s\">\"subst s (DIAM f) = DIAM (subst s f)\"</span>\n\n<span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">subst_BOX</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"subst f (BOX form) = BOX (subst f form)\"</span>\n<span class=\"w\">  </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"n\">add</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">BOX_def</span><span class=\"o\">)</span>\n\n<span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">satis_AND</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"satis M w (AND f1 f2) ⟷ satis M w f1 ∧ satis M w f2\"</span>\n<span class=\"k\">proof</span><span class=\"w\"> </span><span class=\"o\">-</span>\n<span class=\"w\">  </span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">thesis</span><span class=\"w\"> </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"n\">add</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">AND_def</span><span class=\"o\">)</span>\n<span class=\"w\">    </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">meson</span><span class=\"w\"> </span><span class=\"n\">satis_in_worlds</span><span class=\"o\">)</span>\n<span class=\"k\">qed</span>\n\n<span class=\"k\">definition</span><span class=\"w\"> </span><span class=\"n\">satis_set_def</span><span class=\"w\"> </span><span class=\"o\">:</span>\n<span class=\"s\">\"satis_set M w Σ ≡ (⋀a. a ∈ Σ ⟹ satis M w a)\"</span>\n\n<span class=\"c\">(*</span>\n\n<span class=\"c\">val demodalize_def = Define`</span>\n<span class=\"c\">demodalize FALSE = FALSE /\\</span>\n<span class=\"c\">demodalize (VAR p) = VAR p /\\</span>\n<span class=\"c\">demodalize (DISJ form1 form2) = DISJ (demodalize form1) (demodalize form2) /\\</span>\n<span class=\"c\">demodalize (NOT form) = NOT (demodalize form) /\\</span>\n<span class=\"c\">demodalize (DIAM form) = demodalize form`;</span>\n\n<span class=\"c\">*)</span>\n\n<span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">demodalize</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"form ⇒ form\"</span>\n<span class=\"w\">  </span><span class=\"kp\">where</span>\n<span class=\"w\">    </span><span class=\"s\">\"demodalize FALSE = FALSE\"</span>\n<span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"s\">\"demodalize (VAR p) = VAR p\"</span>\n<span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"s\">\"demodalize (DISJ form1 form2) = DISJ (demodalize form1) (demodalize form2)\"</span>\n<span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"s\">\"demodalize (NOT form) = NOT (demodalize form)\"</span>\n<span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"s\">\"demodalize (DIAM form) = demodalize form\"</span>\n\n<span class=\"kt\">thm</span><span class=\"w\"> </span><span class=\"n\">HOL.eq_reflection</span>\n\n<span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">propform</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"form ⇒ bool\"</span>\n<span class=\"w\">  </span><span class=\"kp\">where</span>\n<span class=\"w\">   </span><span class=\"s\">\"propform FALSE = True\"</span>\n<span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"s\">\"propform (VAR p) = True\"</span>\n<span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"s\">\"propform (DISJ f1 f2) = (propform f1 ∧ propform f2)\"</span>\n<span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"s\">\"propform (NOT f) = propform f\"</span>\n<span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"s\">\"propform (DIAM f) = False\"</span>\n\n<span class=\"k\">definition</span><span class=\"w\"> </span><span class=\"n\">IMP_def</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"IMP f1 f2 = DISJ (NOT f1) f2\"</span>\n\n<span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">peval</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"(num ⇒ bool) ⇒ form ⇒ bool\"</span><span class=\"w\"> </span><span class=\"kp\">where</span>\n<span class=\"w\">   </span><span class=\"s\">\"peval σ (VAR p) = σ p\"</span>\n<span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"s\">\"peval σ (DISJ f1 f2) = (peval σ f1 ∨ peval σ f2)\"</span>\n<span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"s\">\"peval σ FALSE = False\"</span>\n<span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"s\">\"peval σ (NOT f) = (¬ peval σ f)\"</span>\n<span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"s\">\"peval σ (DIAM f) = False\"</span>\n\n<span class=\"k\">definition</span><span class=\"w\"> </span><span class=\"n\">ptaut_def</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"ptaut f ⟷ propform f ∧ (∀σ. peval σ f)\"</span>\n\n<span class=\"k\">inductive</span><span class=\"w\"> </span><span class=\"n\">Kproof</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"form list ⇒ bool\"</span><span class=\"w\"> </span><span class=\"kp\">where</span>\n<span class=\"w\">   </span><span class=\"s\">\"Kproof []\"</span>\n<span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"s\">\"Kproof p ∧ List.member p (IMP f1 f2) ∧ List.member p f1 ⟹ Kproof (p @ [f2])\"</span>\n<span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"s\">\"Kproof p ∧ List.member p f ⟹ Kproof (p @ [subst σ f])\"</span>\n<span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"s\">\"Kproof p ∧ List.member p f ⟹ Kproof (p @ [BOX f])\"</span>\n<span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"s\">\"Kproof p ⟹ Kproof (p @ [IMP (BOX (IMP form1 form2)) (IMP (BOX form1) (BOX form2))])\"</span>\n<span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"s\">\"Kproof p ⟹  Kproof (p @ [IMP (DIAM form) (NOT (BOX (NOT form)))])\"</span>\n<span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"s\">\"Kproof p ∧ ptaut f ⟹ Kproof (p @ [f])\"</span>\n\n<span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">demodalize_IMP</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"demodalize (IMP f1 f2) = IMP (demodalize f1) (demodalize f2)\"</span>\n<span class=\"k\">proof</span><span class=\"w\"> </span><span class=\"o\">-</span>\n<span class=\"w\">  </span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">thesis</span>\n<span class=\"w\">  </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"n\">add</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">IMP_def</span><span class=\"o\">)</span>\n<span class=\"k\">qed</span>\n\n<span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">ptaut_MP</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kp\">assumes</span><span class=\"w\"> </span><span class=\"n\">a1</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"ptaut (IMP f1 f2)\"</span><span class=\"w\"> </span><span class=\"kp\">and</span><span class=\"w\"> </span><span class=\"n\">a2</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"ptaut f1\"</span><span class=\"w\"> </span><span class=\"kp\">shows</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"ptaut f2\"</span>\n<span class=\"k\">proof</span><span class=\"w\"> </span><span class=\"o\">-</span>\n<span class=\"w\">  </span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">thesis</span><span class=\"w\"> </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">a1</span><span class=\"w\"> </span><span class=\"n\">a2</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"n\">add</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">IMP_def</span><span class=\"w\"> </span><span class=\"n\">ptaut_def</span><span class=\"o\">)</span>\n<span class=\"k\">qed</span>\n\n<span class=\"kt\">find_theorems</span><span class=\"w\"> </span><span class=\"s\">\"List.member (a @ [b])\"</span>\n\n\n\n\n<span class=\"k\">definition</span><span class=\"w\"> </span><span class=\"n\">valid_frame_state_def</span><span class=\"o\">:</span>\n<span class=\"s\">\"valid_frame_state Fr w phi ≡ (⋀M. frame.truncate M = Fr ⟹ satis M w phi)\"</span>\n\n\n<span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">propform_demodalize</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"ptaut f ⟹ ptaut (demodalize f)\"</span>\n<span class=\"w\">  </span><span class=\"gr\">sorry</span>\n\n<span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">demodalize_subst</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"demodalize (subst f form) = demodalize (subst f (demodalize form))\"</span>\n<span class=\"w\">  </span><span class=\"gr\">sorry</span>\n\n<span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">peval_demodalize_subst_eq</span><span class=\"w\"> </span><span class=\"o\">:</span>\n<span class=\"w\"> </span><span class=\"s\">\" propform form ⟹</span>\n<span class=\"s\">  (peval σ (demodalize (subst f form)) </span><span class=\"ss\">\\&lt;equiv&gt;</span><span class=\"s\"> peval (peval σ o demodalize o f) form)\"</span>\n<span class=\"w\">  </span><span class=\"gr\">sorry</span>\n<span class=\"kt\">thm</span><span class=\"w\"> </span><span class=\"n\">disjE</span>\n\n\n<span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">exercise_1_6_2</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"Kproof p ⟹ List.member p f ⟹ ptaut (demodalize f)\"</span>\n<span class=\"k\">proof</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">induction</span><span class=\"w\"> </span><span class=\"n\">arbitrary</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"n\">rule</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Kproof.induct</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"k\">case</span><span class=\"w\"> </span><span class=\"n\">1</span>\n<span class=\"w\">  </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"k\">case</span>\n<span class=\"w\">  </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">member_rec</span><span class=\"o\">(</span><span class=\"n\">2</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">force</span>\n<span class=\"k\">next</span>\n<span class=\"w\">  </span><span class=\"k\">case</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"o\">:(</span><span class=\"n\">2</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"n\">f1</span><span class=\"w\"> </span><span class=\"n\">f2</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"k\">hence</span><span class=\"w\"> </span><span class=\"n\">a1</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"List.member p f ∨ f = f2\"</span>\n<span class=\"w\">    </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">metis</span><span class=\"w\"> </span><span class=\"n\">in_set_member</span><span class=\"w\"> </span><span class=\"n\">rotate1.simps</span><span class=\"o\">(</span><span class=\"n\">2</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">set_ConsD</span><span class=\"w\"> </span><span class=\"n\">set_rotate1</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"k\">then</span>\n<span class=\"w\">  </span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"k\">case</span>\n<span class=\"w\">    </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">metis</span><span class=\"w\"> </span><span class=\"n\">a.IH</span><span class=\"w\"> </span><span class=\"n\">demodalize_IMP</span><span class=\"w\"> </span><span class=\"n\">ptaut_MP</span><span class=\"o\">)</span>\n<span class=\"k\">next</span>\n<span class=\"w\">  </span><span class=\"k\">case</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">3</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"n\">σ</span><span class=\"w\"> </span><span class=\"n\">g</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"k\">hence</span><span class=\"w\"> </span><span class=\"n\">a1</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"List.member p g ∨ g = subst σ f\"</span>\n<span class=\"w\">   </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">metis</span><span class=\"w\"> </span><span class=\"n\">member_def</span><span class=\"w\"> </span><span class=\"n\">rotate1.simps</span><span class=\"o\">(</span><span class=\"n\">2</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">set_ConsD</span><span class=\"w\"> </span><span class=\"n\">set_rotate1</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"k\">with</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"k\">case</span>\n<span class=\"w\">  </span><span class=\"k\">proof</span>\n<span class=\"w\">    </span><span class=\"k\">assume</span><span class=\"w\"> </span><span class=\"s\">\"List.member p g\"</span><span class=\"w\"> </span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"k\">case</span><span class=\"w\"> </span><span class=\"gr\">sorry</span>\n<span class=\"w\">  </span><span class=\"k\">next</span>\n<span class=\"w\">    </span><span class=\"k\">assume</span><span class=\"w\"> </span><span class=\"s\">\"g = subst σ f\"</span><span class=\"w\"> </span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"k\">case</span><span class=\"w\"> </span><span class=\"gr\">sorry</span>\n<span class=\"w\">  </span><span class=\"k\">qed</span>\n<span class=\"w\">    </span><span class=\"c\">(*apply (rule disjE)*)</span>\n<span class=\"k\">next</span>\n<span class=\"w\">  </span><span class=\"k\">case</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">4</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"k\">case</span><span class=\"w\"> </span><span class=\"gr\">sorry</span>\n<span class=\"k\">next</span>\n<span class=\"w\">  </span><span class=\"k\">case</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">5</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"n\">form1</span><span class=\"w\"> </span><span class=\"n\">form2</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"k\">case</span><span class=\"w\"> </span><span class=\"gr\">sorry</span>\n<span class=\"k\">next</span>\n<span class=\"w\">  </span><span class=\"k\">case</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">6</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"n\">form</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"k\">case</span><span class=\"w\"> </span><span class=\"gr\">sorry</span>\n<span class=\"k\">next</span>\n<span class=\"w\">  </span><span class=\"k\">case</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">7</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"k\">case</span><span class=\"w\"> </span><span class=\"gr\">sorry</span>\n<span class=\"k\">qed</span>\n</code></pre></div>",
        "id": 469840902,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1726199833
    },
    {
        "content": "<p>The last theorem is where I am messed up.</p>",
        "id": 469840928,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1726199854
    },
    {
        "content": "<p>I proved \"A \\/ B\", and want to do case splitting.</p>",
        "id": 469841015,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1726199881
    },
    {
        "content": "<p>I tried writing:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">case</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">3</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"n\">σ</span><span class=\"w\"> </span><span class=\"n\">g</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"k\">hence</span><span class=\"w\"> </span><span class=\"n\">a1</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"List.member p g ∨ g = subst σ f\"</span>\n<span class=\"w\">   </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">metis</span><span class=\"w\"> </span><span class=\"n\">member_def</span><span class=\"w\"> </span><span class=\"n\">rotate1.simps</span><span class=\"o\">(</span><span class=\"n\">2</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">set_ConsD</span><span class=\"w\"> </span><span class=\"n\">set_rotate1</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"k\">with</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"k\">case</span>\n<span class=\"w\">  </span><span class=\"k\">proof</span>\n<span class=\"w\">    </span><span class=\"k\">assume</span><span class=\"w\"> </span><span class=\"s\">\"List.member p g\"</span><span class=\"w\"> </span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"k\">case</span><span class=\"w\"> </span><span class=\"gr\">sorry</span>\n<span class=\"w\">  </span><span class=\"k\">next</span>\n<span class=\"w\">    </span><span class=\"k\">assume</span><span class=\"w\"> </span><span class=\"s\">\"g = subst σ f\"</span><span class=\"w\"> </span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"k\">case</span><span class=\"w\"> </span><span class=\"gr\">sorry</span>\n<span class=\"w\">  </span><span class=\"k\">qed</span>\n</code></pre></div>\n<p>following prog-prove page 45.</p>",
        "id": 469841202,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1726199928
    },
    {
        "content": "<p>the usual pattern (I use, see <span class=\"user-mention\" data-user-id=\"233198\">@Mathias Fleury</span> 's below) is:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">moreover</span><span class=\"w\"> </span><span class=\"ow\">{</span>\n<span class=\"w\">  </span><span class=\"k\">assume</span><span class=\"w\"> </span><span class=\"n\">A</span>\n<span class=\"w\">  </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"s\">\"foo\"</span>\n<span class=\"ow\">}</span>\n<span class=\"k\">moreover</span><span class=\"w\"> </span><span class=\"ow\">{</span>\n<span class=\"w\">  </span><span class=\"k\">assume</span><span class=\"w\"> </span><span class=\"n\">B</span>\n<span class=\"w\">  </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"s\">\"foo\"</span>\n<span class=\"ow\">}</span>\n<span class=\"k\">ultimately</span><span class=\"w\"> </span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"s\">\"foo\"</span>\n</code></pre></div>",
        "id": 469841252,
        "sender_full_name": "Yong Kiam",
        "timestamp": 1726199940
    },
    {
        "content": "<p><a href=\"/user_uploads/14278/6Mx6uFcQSmC10ia97DdqG4W8/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/14278/6Mx6uFcQSmC10ia97DdqG4W8/image.png\" title=\"image.png\"><img data-original-dimensions=\"2134x1548\" src=\"/user_uploads/thumbnail/14278/6Mx6uFcQSmC10ia97DdqG4W8/image.png/840x560.webp\"></a></div>",
        "id": 469841382,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1726199984
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"234226\">Yong Kiam</span> <a href=\"#narrow/stream/238552-Beginner-Questions/topic/Splitting.20disjunction.20.28seems.20to.20be.20syntax.20error.29/near/469841252\">said</a>:</p>\n<blockquote>\n<p>the usual pattern is:</p>\n<p><div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">moreover</span><span class=\"w\"> </span><span class=\"ow\">{</span>\n<span class=\"w\">  </span><span class=\"k\">assume</span><span class=\"w\"> </span><span class=\"n\">A</span>\n<span class=\"w\">  </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"s\">\"foo\"</span>\n<span class=\"ow\">}</span>\n<span class=\"k\">moreover</span><span class=\"w\"> </span><span class=\"ow\">{</span>\n<span class=\"w\">  </span><span class=\"k\">assume</span><span class=\"w\"> </span><span class=\"n\">B</span>\n<span class=\"w\">  </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"s\">\"foo\"</span>\n<span class=\"ow\">}</span>\n<span class=\"k\">ultimately</span><span class=\"w\"> </span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"s\">\"foo\"</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Thanks! I will try this one as well.</p>",
        "id": 469841436,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1726200001
    },
    {
        "content": "<p>In one min. I still want to know why the syntax I wrote is wrong.</p>",
        "id": 469841580,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1726200024
    },
    {
        "content": "<p>I tried apply as well: <br>\n<a href=\"/user_uploads/14278/3k-iR8NSOW9Gfemy1n3F-K3f/image.png\">image.png</a><br>\nDoes not work either.</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/14278/3k-iR8NSOW9Gfemy1n3F-K3f/image.png\" title=\"image.png\"><img data-original-dimensions=\"2134x1548\" src=\"/user_uploads/thumbnail/14278/3k-iR8NSOW9Gfemy1n3F-K3f/image.png/840x560.webp\"></a></div>",
        "id": 469841767,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1726200075
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"234226\">Yong Kiam</span> <a href=\"#narrow/stream/238552-Beginner-Questions/topic/Splitting.20disjunction.20.28seems.20to.20be.20syntax.20error.29/near/469841252\">said</a>:</p>\n<blockquote>\n<p>the usual pattern is:</p>\n<p><div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">moreover</span><span class=\"w\"> </span><span class=\"ow\">{</span>\n<span class=\"w\">  </span><span class=\"k\">assume</span><span class=\"w\"> </span><span class=\"n\">A</span>\n<span class=\"w\">  </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"s\">\"foo\"</span>\n<span class=\"ow\">}</span>\n<span class=\"k\">moreover</span><span class=\"w\"> </span><span class=\"ow\">{</span>\n<span class=\"w\">  </span><span class=\"k\">assume</span><span class=\"w\"> </span><span class=\"n\">B</span>\n<span class=\"w\">  </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"s\">\"foo\"</span>\n<span class=\"ow\">}</span>\n<span class=\"k\">ultimately</span><span class=\"w\"> </span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"s\">\"foo\"</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p><a href=\"/user_uploads/14278/Xt49s_3fWjy63NCFR9uKWwIv/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/14278/Xt49s_3fWjy63NCFR9uKWwIv/image.png\" title=\"image.png\"><img data-original-dimensions=\"2134x1548\" src=\"/user_uploads/thumbnail/14278/Xt49s_3fWjy63NCFR9uKWwIv/image.png/840x560.webp\"></a></div><p>May I please ask what is wrong here?</p>",
        "id": 469842405,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1726200264
    },
    {
        "content": "<p>In general I prefer the consider pattern or relying on cases to do the splitting</p>",
        "id": 469843454,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1726200699
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"754515\">Yiming Xu</span> <a href=\"#narrow/stream/238552-Beginner-Questions/topic/Splitting.20disjunction.20.28seems.20to.20be.20syntax.20error.29/near/469842405\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"234226\">Yong Kiam</span> <a href=\"#narrow/stream/238552-Beginner-Questions/topic/Splitting.20disjunction.20.28seems.20to.20be.20syntax.20error.29/near/469841252\">said</a>:</p>\n<blockquote>\n<p>the usual pattern is:</p>\n<p><div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">moreover</span><span class=\"w\"> </span><span class=\"ow\">{</span>\n<span class=\"w\">  </span><span class=\"k\">assume</span><span class=\"w\"> </span><span class=\"n\">A</span>\n<span class=\"w\">  </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"s\">\"foo\"</span>\n<span class=\"ow\">}</span>\n<span class=\"k\">moreover</span><span class=\"w\"> </span><span class=\"ow\">{</span>\n<span class=\"w\">  </span><span class=\"k\">assume</span><span class=\"w\"> </span><span class=\"n\">B</span>\n<span class=\"w\">  </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"s\">\"foo\"</span>\n<span class=\"ow\">}</span>\n<span class=\"k\">ultimately</span><span class=\"w\"> </span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"s\">\"foo\"</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p><a href=\"/user_uploads/14278/Xt49s_3fWjy63NCFR9uKWwIv/image.png\">image.png</a></p>\n<p>May I please ask what is wrong here?</p>\n</blockquote>\n<p>Did you read the error message?</p>",
        "id": 469843508,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1726200717
    },
    {
        "content": "<p>the error message says \"I am expecting a proof here\", not Isar commands</p>",
        "id": 469843618,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1726200733
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"233198\">Mathias Fleury</span> <a href=\"#narrow/stream/238552-Beginner-Questions/topic/Splitting.20disjunction.20.28seems.20to.20be.20syntax.20error.29/near/469843454\">said</a>:</p>\n<blockquote>\n<p>In general I prefer the consider pattern or relying on cases to do the splitting</p>\n</blockquote>\n<p>ah it looks like <code>consider</code> is nicer indeed, thanks</p>",
        "id": 469843874,
        "sender_full_name": "Yong Kiam",
        "timestamp": 1726200792
    },
    {
        "content": "<p><a href=\"/user_uploads/14278/1i3MY1HIvoJPHHtHizeCVE-M/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/14278/1i3MY1HIvoJPHHtHizeCVE-M/image.png\" title=\"image.png\"><img data-original-dimensions=\"2134x1548\" src=\"/user_uploads/thumbnail/14278/1i3MY1HIvoJPHHtHizeCVE-M/image.png/840x560.webp\"></a></div>",
        "id": 469843984,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1726200819
    },
    {
        "content": "<p>yes, but the error is 3 lines above: you didn't finish the proof of the <code>have</code></p>",
        "id": 469844127,
        "sender_full_name": "Yong Kiam",
        "timestamp": 1726200844
    },
    {
        "content": "<p>like in nearly every system on earth: the first error message is the most important one…</p>",
        "id": 469844248,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1726200869
    },
    {
        "content": "<p>I am mostly copying from the examples, which line caused the proof mode?</p>",
        "id": 469844260,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1726200872
    },
    {
        "content": "<p>which of the lines should be followed by a proof?</p>",
        "id": 469844369,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1726200899
    },
    {
        "content": "<p>by.</p>",
        "id": 469844470,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1726200922
    },
    {
        "content": "<p>There are only 2 options: assume or have</p>",
        "id": 469844482,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1726200925
    },
    {
        "content": "<p><a href=\"/user_uploads/14278/GVA1407bfz5pOHwMlY_chSrF/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/14278/GVA1407bfz5pOHwMlY_chSrF/image.png\" title=\"image.png\"><img data-original-dimensions=\"2134x1548\" src=\"/user_uploads/thumbnail/14278/GVA1407bfz5pOHwMlY_chSrF/image.png/840x560.webp\"></a></div>",
        "id": 469844704,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1726200970
    },
    {
        "content": "<p>I see.</p>",
        "id": 469844720,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1726200973
    },
    {
        "content": "<p>I was just about to say by is apply...done so I will be confused if it cause it...</p>",
        "id": 469844826,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1726201000
    },
    {
        "content": "<p><a href=\"/user_uploads/14278/p1A9oHpMzq-6y8IXI-oGv69J/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/14278/p1A9oHpMzq-6y8IXI-oGv69J/image.png\" title=\"image.png\"><img data-original-dimensions=\"2134x1362\" src=\"/user_uploads/thumbnail/14278/p1A9oHpMzq-6y8IXI-oGv69J/image.png/840x560.webp\"></a></div>",
        "id": 469846511,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1726201512
    },
    {
        "content": "<p>That is the apply one.</p>",
        "id": 469846539,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1726201521
    },
    {
        "content": "<p><a href=\"/user_uploads/14278/1Bco0KWE0NIqGnvzXfqfsUAs/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/14278/1Bco0KWE0NIqGnvzXfqfsUAs/image.png\" title=\"image.png\"><img data-original-dimensions=\"2134x1554\" src=\"/user_uploads/thumbnail/14278/1Bco0KWE0NIqGnvzXfqfsUAs/image.png/840x560.webp\"></a></div>",
        "id": 469846988,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1726201660
    },
    {
        "content": "<p>That is the one in prog-prove. I see. Thank you!</p>",
        "id": 469847026,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1726201674
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"754515\">Yiming Xu</span> <a href=\"#narrow/stream/238552-Beginner-Questions/topic/Splitting.20disjunction.20.28seems.20to.20be.20syntax.20error.29/near/469846988\">said</a>:</p>\n<blockquote>\n<p><a href=\"/user_uploads/14278/1Bco0KWE0NIqGnvzXfqfsUAs/image.png\">image.png</a></p>\n</blockquote>\n<p>this one uses unrestricted <code>proof</code> which is frowned upon by some people... maybe <code>proof (rule disj1E)</code> or something instead</p>",
        "id": 469852719,
        "sender_full_name": "Yong Kiam",
        "timestamp": 1726204053
    },
    {
        "content": "<p>Thanks! I will avoid this style and type up the rules explicitly.</p>",
        "id": 469852825,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1726204128
    }
]