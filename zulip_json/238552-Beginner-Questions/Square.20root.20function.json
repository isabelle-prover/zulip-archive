[
    {
        "content": "<p>I am trying to use the square root function in Isabelle. For example, I wrote the following</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">theory</span><span class=\"w\"> </span><span class=\"n\">square_root_example</span>\n<span class=\"kp\">imports</span><span class=\"w\"> </span><span class=\"n\">Main</span><span class=\"w\"> </span><span class=\"n\">HOL.Real</span>\n<span class=\"k\">begin</span>\n\n<span class=\"kt\">value</span><span class=\"w\"> </span><span class=\"s\">\"sqrt (4::real)\"</span>\n\n<span class=\"k\">end</span>\n</code></pre></div>\n<p>However, the output for the line starting with \"value\" is</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"'a\"</span>\n</code></pre></div>\n<p>indicating that the function represented by \"sqrt\" is not defined. After searching the web, I found the sqrt function only needed the libraries \"HOL.Real\" and \"Main\", which strangely do not work in my case. I am using Isabelle 2023 for MacOS. What should I import in order to use the \"sqrt\" function?</p>",
        "id": 443580512,
        "sender_full_name": "Tingyou PAN",
        "timestamp": 1717927906
    },
    {
        "content": "<p>HOL-Analysis.Analysis should work but might be too much</p>",
        "id": 443593521,
        "sender_full_name": "Yong Kiam",
        "timestamp": 1717938329
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"234226\">Yong Kiam</span> <a href=\"#narrow/stream/238552-Beginner-Questions/topic/Square.20root.20function/near/443593521\">said</a>:</p>\n<blockquote>\n<p>HOL-Analysis.Analysis should work but might be too much</p>\n</blockquote>\n<p>Thank you for your suggestions. Unfortunately, after I imported the files, which took about ten minutes to verify on my computer, I still couldn't use the \"sqrt\" function. This time, when I entered </p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kt\">value</span><span class=\"w\"> </span><span class=\"s\">\"sqrt (4::real)\"</span>\n</code></pre></div>\n<p>the output was something related to wellsortedness error.  Is there some other ways that I can use this function? Thanks again for your help.</p>",
        "id": 443600200,
        "sender_full_name": "Tingyou PAN",
        "timestamp": 1717943619
    },
    {
        "content": "<p>what do you expect? And what do you expect for sqrt 2?</p>",
        "id": 443600500,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1717943868
    },
    {
        "content": "<p>Because if you are only interested in perfect squares the solution will be different from let's say an algorithm to compute an approximation</p>",
        "id": 443600744,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1717944042
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"233198\">Mathias Fleury</span> <a href=\"#narrow/stream/238552-Beginner-Questions/topic/Square.20root.20function/near/443600500\">said</a>:</p>\n<blockquote>\n<p>what do you expect? And what do you expect for sqrt 2?</p>\n</blockquote>\n<p>For example, for</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kt\">value</span><span class=\"w\"> </span><span class=\"s\">\"sqrt (4::real)\"</span>\n</code></pre></div>\n<p>I was expecting something like 2. As for sqrt 2, perhaps something without error messages. I am trying to prove something related to square roots of arbitrary positive real numbers.</p>",
        "id": 443600794,
        "sender_full_name": "Tingyou PAN",
        "timestamp": 1717944095
    },
    {
        "content": "<p>regarding your 10minutes-to-verify problem, I would suggest restarting Isabelle with <code>-l HOL-Analysis</code> to create the appropriate heap so that next time you load it up it'll be fsater</p>",
        "id": 443601087,
        "sender_full_name": "Yong Kiam",
        "timestamp": 1717944298
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"725068\">Tingyou PAN</span> <a href=\"#narrow/stream/238552-Beginner-Questions/topic/Square.20root.20function/near/443600794\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"233198\">Mathias Fleury</span> <a href=\"#narrow/stream/238552-Beginner-Questions/topic/Square.20root.20function/near/443600500\">said</a>:</p>\n<blockquote>\n<p>what do you expect? And what do you expect for sqrt 2?</p>\n</blockquote>\n<p>For example, for</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kt\">value</span><span class=\"w\"> </span><span class=\"s\">\"sqrt (4::real)\"</span>\n</code></pre></div>\n<p>I was expecting something like 2. As for sqrt 2, perhaps something without error messages. I am trying to prove something related to square roots of arbitrary positive real numbers.</p>\n</blockquote>\n<p>I don't think that this is possible with the code generator.</p>",
        "id": 443601662,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1717944792
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"234226\">Yong Kiam</span> <a href=\"#narrow/stream/238552-Beginner-Questions/topic/Square.20root.20function/near/443601087\">said</a>:</p>\n<blockquote>\n<p>regarding your 10minutes-to-verify problem, I would suggest restarting Isabelle with <code>-l HOL-Analysis</code> to create the appropriate heap so that next time you load it up it'll be fsater</p>\n</blockquote>\n<p>Thanks, I will definitely try this.</p>",
        "id": 443601677,
        "sender_full_name": "Tingyou PAN",
        "timestamp": 1717944812
    },
    {
        "content": "<p>Is it possible though, if I just want to  use the sqrt function to verify trivial things like \"sqrt 2 + sqrt 3 &lt; 4\"? I saw some similar simple examples on the Internet, but they all seem to only import \"HOL.Real\".</p>",
        "id": 443601901,
        "sender_full_name": "Tingyou PAN",
        "timestamp": 1717945007
    },
    {
        "content": "<p>something concrete like this should be doable using the approximation tactics automatically</p>",
        "id": 443602241,
        "sender_full_name": "Yong Kiam",
        "timestamp": 1717945223
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">theory</span><span class=\"w\"> </span><span class=\"n\">Scratch</span>\n<span class=\"w\">  </span><span class=\"kp\">imports</span><span class=\"w\"> </span><span class=\"s\">\"HOL-Decision_Procs.Approximation\"</span>\n<span class=\"k\">begin</span>\n\n<span class=\"k\">approximate</span><span class=\"w\"> </span><span class=\"s\">\"sqrt 2 + sqrt 3 - 5\"</span>\n<span class=\"c\">(*</span>\n<span class=\"c\">\"{- 1853735634 / 10 ^ 9..- 1853735629 / 10 ^ 9}\"</span>\n<span class=\"c\">  :: \"real set\"</span>\n<span class=\"c\">*)</span>\n</code></pre></div>",
        "id": 443602962,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1717945643
    },
    {
        "content": "<p>I am not sure how to generate a theorem out of it</p>",
        "id": 443603061,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1717945684
    },
    {
        "content": "<p>but I also spent around 1min scrolling through the Approximation file</p>",
        "id": 443603095,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1717945705
    },
    {
        "content": "<p>state the inequality then <code>approximation X</code> where <code>X</code> is a precision parameter</p>",
        "id": 443603129,
        "sender_full_name": "Yong Kiam",
        "timestamp": 1717945731
    },
    {
        "content": "<p>Thank you very much for this example using approximation! I guess I will stick to this method for now.</p>",
        "id": 443603606,
        "sender_full_name": "Tingyou PAN",
        "timestamp": 1717945885
    },
    {
        "content": "<p>For a more exact approach, you can perhaps check Rene Thiemann's <a href=\"https://www.isa-afp.org/entries/Real_Impl.html\">field extensions of the form Q[sqrt(b)]</a>, which enables us to do the following evaluations:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kt\">value</span><span class=\"w\"> </span><span class=\"s\">\"⌊101.1 * (sqrt 18 + 6 * sqrt 0.5)⌋\"</span>\n<span class=\"kt\">value</span><span class=\"w\"> </span><span class=\"s\">\"⌊324 * sqrt 7 + 0.001⌋\"</span>\n<span class=\"kt\">value</span><span class=\"w\"> </span><span class=\"s\">\"101.1 * (sqrt 18 + 6 * sqrt 0.5) = 324 * sqrt 7 + 0.001\"</span>\n<span class=\"kt\">value</span><span class=\"w\"> </span><span class=\"s\">\"101.1 * (sqrt 18 + 6 * sqrt 0.5) &gt; 324 * sqrt 7 + 0.001\"</span>\n<span class=\"kt\">value</span><span class=\"w\"> </span><span class=\"s\">\"show (101.1 * (sqrt 18 + 6 * sqrt 0.5))\"</span>\n<span class=\"kt\">value</span><span class=\"w\"> </span><span class=\"s\">\"(sqrt 0.1 ∈ ℚ, sqrt (- 0.09) ∈ ℚ)\"</span>\n</code></pre></div>\n<p>As an overkill, you may even want to check the <a href=\"https://www.isa-afp.org/entries/Algebraic_Numbers.html\">Algebraic Numbers entry</a>, which allows us to do symbolic calculation using algebraic numbers (like in modern computer algebra systems).</p>",
        "id": 443723175,
        "sender_full_name": "Wenda Li",
        "timestamp": 1718011685
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"246083\">Wenda Li</span> <a href=\"#narrow/stream/238552-Beginner-Questions/topic/Square.20root.20function/near/443723175\">said</a>:</p>\n<blockquote>\n<p>For a more exact approach, you can perhaps check Rene Thiemann's <a href=\"https://www.isa-afp.org/entries/Real_Impl.html\">field extensions of the form Q[sqrt(b)]</a>, which enables us to do the following evaluations:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kt\">value</span><span class=\"w\"> </span><span class=\"s\">\"⌊101.1 * (sqrt 18 + 6 * sqrt 0.5)⌋\"</span>\n<span class=\"kt\">value</span><span class=\"w\"> </span><span class=\"s\">\"⌊324 * sqrt 7 + 0.001⌋\"</span>\n<span class=\"kt\">value</span><span class=\"w\"> </span><span class=\"s\">\"101.1 * (sqrt 18 + 6 * sqrt 0.5) = 324 * sqrt 7 + 0.001\"</span>\n<span class=\"kt\">value</span><span class=\"w\"> </span><span class=\"s\">\"101.1 * (sqrt 18 + 6 * sqrt 0.5) &gt; 324 * sqrt 7 + 0.001\"</span>\n<span class=\"kt\">value</span><span class=\"w\"> </span><span class=\"s\">\"show (101.1 * (sqrt 18 + 6 * sqrt 0.5))\"</span>\n<span class=\"kt\">value</span><span class=\"w\"> </span><span class=\"s\">\"(sqrt 0.1 ∈ ℚ, sqrt (- 0.09) ∈ ℚ)\"</span>\n</code></pre></div>\n<p>As an overkill, you may even want to check the <a href=\"https://www.isa-afp.org/entries/Algebraic_Numbers.html\">Algebraic Numbers entry</a>, which allows us to do symbolic calculation using algebraic numbers (like in modern computer algebra systems).</p>\n</blockquote>\n<p>Seems really interesting! They might be a bit advanced for me, but I found it really helpful. Thank you very much for these!</p>",
        "id": 443791104,
        "sender_full_name": "Tingyou PAN",
        "timestamp": 1718031702
    }
]