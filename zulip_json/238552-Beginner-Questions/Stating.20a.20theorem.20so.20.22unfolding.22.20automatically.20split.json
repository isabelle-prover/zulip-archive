[
    {
        "content": "<p>I have </p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"s\">\"csatis sig M w (cDIAM m fl) =</span>\n<span class=\"s\">  (m ∈ mops sig ∧</span>\n<span class=\"s\">   marity sig m = length fl ∧</span>\n<span class=\"s\">   w ∈ world M ∧</span>\n<span class=\"s\">   (∃vl. length vl = length fl ∧ rel M m (w # vl) ∧</span>\n<span class=\"s\">   (∀i&lt;length vl. csatis sig M (vl ! i) (fl ! i))))\"</span>\n</code></pre></div>\n<p>If I unfold it, it will give:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">proof</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">prove</span><span class=\"o\">)</span>\n<span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">this</span><span class=\"o\">:</span>\n<span class=\"w\">    </span><span class=\"n\">m</span><span class=\"w\"> </span><span class=\"n\">∈</span><span class=\"w\"> </span><span class=\"n\">mops</span><span class=\"w\"> </span><span class=\"n\">sig</span><span class=\"w\"> </span><span class=\"n\">∧</span>\n<span class=\"w\">    </span><span class=\"n\">marity</span><span class=\"w\"> </span><span class=\"n\">sig</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">length</span><span class=\"w\"> </span><span class=\"n\">fl</span><span class=\"w\"> </span><span class=\"n\">∧</span>\n<span class=\"w\">    </span><span class=\"n\">w</span><span class=\"w\"> </span><span class=\"n\">∈</span><span class=\"w\"> </span><span class=\"n\">world</span><span class=\"w\"> </span><span class=\"n\">M</span><span class=\"w\"> </span><span class=\"n\">∧</span>\n<span class=\"w\">    </span><span class=\"o\">(</span><span class=\"n\">∃vl.</span><span class=\"w\"> </span><span class=\"n\">length</span><span class=\"w\"> </span><span class=\"n\">vl</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">length</span><span class=\"w\"> </span><span class=\"n\">fl</span><span class=\"w\"> </span><span class=\"n\">∧</span>\n<span class=\"w\">          </span><span class=\"n\">rel</span><span class=\"w\"> </span><span class=\"n\">M</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">w</span><span class=\"w\"> </span><span class=\"n\">#</span><span class=\"w\"> </span><span class=\"n\">vl</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">∧</span>\n<span class=\"w\">          </span><span class=\"o\">(</span><span class=\"n\">∀i&lt;length</span><span class=\"w\"> </span><span class=\"n\">vl.</span><span class=\"w\"> </span><span class=\"n\">csatis</span><span class=\"w\"> </span><span class=\"n\">sig</span><span class=\"w\"> </span><span class=\"n\">M</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">vl</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">fl</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"o\">)))</span>\n</code></pre></div>\n<p>Is there any thing I can do to let \"unfold\" automatically give me, instead of a conjunction, a list of assumptions instead, like:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">this</span><span class=\"o\">:</span>\n<span class=\"w\">    </span><span class=\"n\">m</span><span class=\"w\"> </span><span class=\"n\">∈</span><span class=\"w\"> </span><span class=\"n\">mops</span><span class=\"w\"> </span><span class=\"n\">sig</span>\n\n<span class=\"w\">    </span><span class=\"n\">marity</span><span class=\"w\"> </span><span class=\"n\">sig</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">length</span><span class=\"w\"> </span><span class=\"n\">fl</span>\n\n<span class=\"w\">    </span><span class=\"n\">w</span><span class=\"w\"> </span><span class=\"n\">∈</span><span class=\"w\"> </span><span class=\"n\">world</span><span class=\"w\"> </span><span class=\"n\">M</span>\n\n<span class=\"w\">    </span><span class=\"o\">(</span><span class=\"n\">∃vl.</span><span class=\"w\"> </span><span class=\"n\">length</span><span class=\"w\"> </span><span class=\"n\">vl</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">length</span><span class=\"w\"> </span><span class=\"n\">fl</span><span class=\"w\"> </span><span class=\"n\">∧</span>\n<span class=\"w\">          </span><span class=\"n\">rel</span><span class=\"w\"> </span><span class=\"n\">M</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">w</span><span class=\"w\"> </span><span class=\"n\">#</span><span class=\"w\"> </span><span class=\"n\">vl</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">∧</span>\n<span class=\"w\">          </span><span class=\"o\">(</span><span class=\"n\">∀i&lt;length</span><span class=\"w\"> </span><span class=\"n\">vl.</span><span class=\"w\"> </span><span class=\"n\">csatis</span><span class=\"w\"> </span><span class=\"n\">sig</span><span class=\"w\"> </span><span class=\"n\">M</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">vl</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">fl</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"o\">)))</span>\n</code></pre></div>\n<p>?</p>",
        "id": 480658422,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1730792833
    },
    {
        "content": "<p>I don't fully get the question, but I think you are looking for <code>apply(intro conjI)</code></p>",
        "id": 480673115,
        "sender_full_name": "Balazs Toth",
        "timestamp": 1730798037
    },
    {
        "content": "<p>This is about intro but about elim, sorry for my poor presentation of the question.</p>",
        "id": 480676787,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1730799262
    },
    {
        "content": "<p>If we have a definition like:<br>\n<code>sth a b c \\equiv A /\\ B</code></p>\n<p>and there is an assumption (assumption, not the target) <code>sth a b c</code>. Say, we are proving:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"n\">sth</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"n\">&gt;</span><span class=\"w\"> </span><span class=\"n\">D</span>\n</code></pre></div>\n<p>Then if we unfold sth_def, it  will turn it into</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"n\">/\\</span><span class=\"w\"> </span><span class=\"n\">B</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"n\">&gt;</span><span class=\"w\"> </span><span class=\"n\">D</span>\n</code></pre></div>\n<p>But I do not like this, I want the goal to look like</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"n\">assumptions</span><span class=\"o\">:</span>\n<span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">A</span>\n<span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">B</span>\n<span class=\"n\">target</span><span class=\"o\">:</span>\n<span class=\"n\">D</span>\n</code></pre></div>",
        "id": 480677362,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1730799450
    },
    {
        "content": "<p>However, it seems not possible without opening another proof-qed block. There is \"elim conjE', but it only applies to a separate proof-read block.</p>",
        "id": 480677591,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1730799518
    },
    {
        "content": "<p>If it is tricky or even impossible then that is also understandable. I think it might be tricks to state definitions with conjunctions such that an \"unfold\" will not give a conjunction, but give a list of conjuncts that build up to the definition.</p>",
        "id": 480678010,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1730799646
    },
    {
        "content": "<p>I don't understand what <code>elim conjE</code> is not doing but you want</p>",
        "id": 480679329,
        "sender_full_name": "Balazs Toth",
        "timestamp": 1730799947
    },
    {
        "content": "<p>Just because I do not want to open a proof-qed block. Otherwise it is what I want.</p>",
        "id": 480681082,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1730800463
    },
    {
        "content": "<p>Since sometimes if I can take the conjuncts out, then I can finish it off by using (some_thm[OF some_conjunct]) with a dot. So a proof-qed block can be bulky in this case.</p>",
        "id": 480681258,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1730800514
    },
    {
        "content": "<p><code>OF conjI</code></p>",
        "id": 480708650,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1730809453
    },
    {
        "content": "<p>Full example:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">context</span>\n<span class=\"w\">  </span><span class=\"kp\">fixes</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"n\">B</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"n\">bool</span>\n<span class=\"k\">begin</span>\n<span class=\"k\">definition</span><span class=\"w\"> </span><span class=\"n\">t</span><span class=\"w\"> </span><span class=\"kp\">where</span>\n<span class=\"w\">  </span><span class=\"s\">‹t ≡ (A ∧ B)›</span>\n\n<span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">H</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">‹t ⟹ A›</span>\n<span class=\"w\">  </span><span class=\"gr\">sorry</span>\n<span class=\"kt\">thm</span><span class=\"w\"> </span><span class=\"n\">H</span><span class=\"o\">[</span><span class=\"n\">unfolded</span><span class=\"w\"> </span><span class=\"n\">t_def</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">OF</span><span class=\"w\"> </span><span class=\"n\">conjI</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 480708720,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1730809479
    },
    {
        "content": "<p>Thanks! My original question is actually asking, if we start the proof using t_def, then is there any method to write the definition of \"t\" such that </p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">H</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"t ⟹ A\"</span>\n<span class=\"w\">  </span><span class=\"k\">unfolding</span><span class=\"w\"> </span><span class=\"n\">t_def</span>\n</code></pre></div>\n<p>does not give </p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">proof</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">prove</span><span class=\"o\">)</span>\n<span class=\"n\">goal</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">1</span><span class=\"w\"> </span><span class=\"n\">subgoal</span><span class=\"o\">):</span>\n<span class=\"w\"> </span><span class=\"n\">1.</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"n\">∧</span><span class=\"w\"> </span><span class=\"n\">B</span><span class=\"w\"> </span><span class=\"n\">⟹</span><span class=\"w\"> </span><span class=\"n\">A</span>\n</code></pre></div>\n<p>but instead, to give:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">proof</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">prove</span><span class=\"o\">)</span>\n<span class=\"n\">goal</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">1</span><span class=\"w\"> </span><span class=\"n\">subgoal</span><span class=\"o\">):</span>\n<span class=\"w\"> </span><span class=\"n\">assumptions</span>\n<span class=\"o\">-</span><span class=\"n\">A</span>\n<span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">B</span>\n\n<span class=\"n\">target</span><span class=\"w\">  </span><span class=\"n\">A</span>\n</code></pre></div>\n<p>Knowing the \"conjI\" still makes me very happy. It is very useful!</p>",
        "id": 480711387,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1730810322
    },
    {
        "content": "<p>Maybe some technology can be developed using induction principle of t I guess.</p>",
        "id": 480711505,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1730810366
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"n\">A/\\</span><span class=\"w\"> </span><span class=\"n\">B</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"n\">&gt;</span><span class=\"w\"> </span><span class=\"n\">C</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"n\">&gt;</span><span class=\"w\"> </span><span class=\"n\">t</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"n\">&gt;</span><span class=\"w\"> </span><span class=\"n\">C</span>\n</code></pre></div>\n<p>And use conjI to curry the A/\\B maybe?</p>",
        "id": 480711732,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1730810432
    },
    {
        "content": "<p>Seems to me that OF conjI strips only the first conjunct. Any thing to do to repeat the conjI until it cannot go any further?</p>",
        "id": 480712111,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1730810568
    },
    {
        "content": "<p>I often start proofs with</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">proof</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">intro</span><span class=\"w\"> </span><span class=\"n\">conjI</span><span class=\"w\"> </span><span class=\"n\">impI</span><span class=\"w\"> </span><span class=\"n\">allI</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 480713229,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1730810943
    },
    {
        "content": "<p>And/or this thing:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"n\">method</span><span class=\"w\"> </span><span class=\"n\">normalize_goal</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">  </span><span class=\"o\">(</span><span class=\"n\">match</span><span class=\"w\"> </span><span class=\"n\">premises</span><span class=\"w\"> </span><span class=\"kp\">in</span>\n<span class=\"w\">    </span><span class=\"n\">J</span><span class=\"o\">[</span><span class=\"n\">thin</span><span class=\"o\">]:</span><span class=\"w\"> </span><span class=\"ss\">\\&lt;open&gt;\\&lt;exists&gt;</span><span class=\"s\">x. _</span><span class=\"ss\">\\&lt;close&gt;</span><span class=\"w\"> </span><span class=\" -Symbol\">\\&lt;Rightarrow&gt;</span><span class=\"w\"> </span><span class=\"ss\">\\&lt;open&gt;</span><span class=\"s\">rule exE[OF J]</span><span class=\"ss\">\\&lt;close&gt;</span>\n<span class=\"w\">  </span><span class=\" -Symbol\">\\&lt;bar&gt;</span><span class=\"w\"> </span><span class=\"n\">J</span><span class=\"o\">[</span><span class=\"n\">thin</span><span class=\"o\">]:</span><span class=\"w\"> </span><span class=\"ss\">\\&lt;open&gt;</span><span class=\"s\">_ </span><span class=\"ss\">\\&lt;and&gt;</span><span class=\"s\"> _</span><span class=\"ss\">\\&lt;close&gt;</span><span class=\"w\"> </span><span class=\" -Symbol\">\\&lt;Rightarrow&gt;</span><span class=\"w\"> </span><span class=\"ss\">\\&lt;open&gt;</span><span class=\"s\">rule conjE[OF J]</span><span class=\"ss\">\\&lt;close&gt;</span>\n<span class=\"w\">  </span><span class=\"o\">)</span>\n<span class=\"ow\">....</span>\n\n<span class=\"k\">proof</span><span class=\"w\"> </span><span class=\"n\">normalize_goal</span><span class=\"o\">+</span>\n</code></pre></div>",
        "id": 480713321,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1730810969
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"233198\">Mathias Fleury</span> <a href=\"#narrow/channel/238552-Beginner-Questions/topic/Stating.20a.20theorem.20so.20.22unfolding.22.20automatically.20split/near/480713321\">said</a>:</p>\n<blockquote>\n<p>And/or this thing:</p>\n<p><div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"n\">method</span><span class=\"w\"> </span><span class=\"n\">normalize_goal</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">  </span><span class=\"o\">(</span><span class=\"n\">match</span><span class=\"w\"> </span><span class=\"n\">premises</span><span class=\"w\"> </span><span class=\"kp\">in</span>\n<span class=\"w\">    </span><span class=\"n\">J</span><span class=\"o\">[</span><span class=\"n\">thin</span><span class=\"o\">]:</span><span class=\"w\"> </span><span class=\"ss\">\\&lt;open&gt;\\&lt;exists&gt;</span><span class=\"s\">x. _</span><span class=\"ss\">\\&lt;close&gt;</span><span class=\"w\"> </span><span class=\"-Symbol\">\\&lt;Rightarrow&gt;</span><span class=\"w\"> </span><span class=\"ss\">\\&lt;open&gt;</span><span class=\"s\">rule exE[OF J]</span><span class=\"ss\">\\&lt;close&gt;</span>\n<span class=\"w\">  </span><span class=\"-Symbol\">\\&lt;bar&gt;</span><span class=\"w\"> </span><span class=\"n\">J</span><span class=\"o\">[</span><span class=\"n\">thin</span><span class=\"o\">]:</span><span class=\"w\"> </span><span class=\"ss\">\\&lt;open&gt;</span><span class=\"s\">_ </span><span class=\"ss\">\\&lt;and&gt;</span><span class=\"s\"> _</span><span class=\"ss\">\\&lt;close&gt;</span><span class=\"w\"> </span><span class=\"-Symbol\">\\&lt;Rightarrow&gt;</span><span class=\"w\"> </span><span class=\"ss\">\\&lt;open&gt;</span><span class=\"s\">rule conjE[OF J]</span><span class=\"ss\">\\&lt;close&gt;</span>\n<span class=\"w\">  </span><span class=\"o\">)</span>\n<span class=\"ow\">....</span>\n\n<span class=\"k\">proof</span><span class=\"w\"> </span><span class=\"n\">normalize_goal</span><span class=\"o\">+</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Isabelle does not accept this code. the <code>method</code> seems not recognised as a keyword.<br>\n<a href=\"/user_uploads/14278/u6WPfJP9vRXvcWRjT2lG6e55/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/14278/u6WPfJP9vRXvcWRjT2lG6e55/image.png\" title=\"image.png\"><img data-original-dimensions=\"1537x167\" src=\"/user_uploads/thumbnail/14278/u6WPfJP9vRXvcWRjT2lG6e55/image.png/840x560.webp\"></a></div>",
        "id": 480715554,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1730811626
    },
    {
        "content": "<p>If opening a proof block then I can just use elim. Nevertheless I have not seen the <code>method</code> thing and now I am curious what it is.</p>",
        "id": 480715748,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1730811683
    },
    {
        "content": "<p>You need Eisabach for that</p>",
        "id": 480715858,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1730811716
    },
    {
        "content": "<p><code>HOL-Eisbach.Eisbach_Tools</code> (see <a href=\"https://isabelle.in.tum.de/website-Isabelle2024/dist/library/HOL/HOL-Eisbach/Example_Metric.html\">https://isabelle.in.tum.de/website-Isabelle2024/dist/library/HOL/HOL-Eisbach/Example_Metric.html</a> for an example)</p>",
        "id": 480716070,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1730811777
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"233198\">Mathias Fleury</span> <a href=\"#narrow/channel/238552-Beginner-Questions/topic/Stating.20a.20theorem.20so.20.22unfolding.22.20automatically.20split/near/480713229\">said</a>:</p>\n<blockquote>\n<p>I often start proofs with</p>\n<p><div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">proof</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">intro</span><span class=\"w\"> </span><span class=\"n\">conjI</span><span class=\"w\"> </span><span class=\"n\">impI</span><span class=\"w\"> </span><span class=\"n\">allI</span><span class=\"o\">)</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Aha I have it, it is in front of my office (Joking, I have heard that this is a thing for tactic writing.    :-) .)</p>",
        "id": 480716179,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1730811809
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"233198\">Mathias Fleury</span> <a href=\"#narrow/channel/238552-Beginner-Questions/topic/Stating.20a.20theorem.20so.20.22unfolding.22.20automatically.20split/near/480716070\">said</a>:</p>\n<blockquote>\n<p><code>HOL-Eisbach.Eisbach_Tools</code> (see <a href=\"https://isabelle.in.tum.de/website-Isabelle2024/dist/library/HOL/HOL-Eisbach/Example_Metric.html\">https://isabelle.in.tum.de/website-Isabelle2024/dist/library/HOL/HOL-Eisbach/Example_Metric.html</a> for an example)</p>\n</blockquote>\n<p>Thanks a lot and I will check it!</p>",
        "id": 480716219,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1730811823
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"233198\">Mathias Fleury</span> <a href=\"#narrow/channel/238552-Beginner-Questions/topic/Stating.20a.20theorem.20so.20.22unfolding.22.20automatically.20split/near/480713229\">said</a>:</p>\n<blockquote>\n<p>I often start proofs with</p>\n<p><div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">proof</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">intro</span><span class=\"w\"> </span><span class=\"n\">conjI</span><span class=\"w\"> </span><span class=\"n\">impI</span><span class=\"w\"> </span><span class=\"n\">allI</span><span class=\"o\">)</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>why not <code>proof (standard)</code>?</p>",
        "id": 480949139,
        "sender_full_name": "Yong Kiam",
        "timestamp": 1730908091
    },
    {
        "content": "<p>standard can do too much</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"s\">\"A⇧*⇧* x y\"</span>\n<span class=\"k\">proof</span><span class=\"w\"> </span><span class=\"n\">standard</span>\n<span class=\"c\">(*</span>\n<span class=\"c\">proof (state)</span>\n<span class=\"c\">goal (2 subgoals):</span>\n<span class=\"c\"> 1. A⇧*⇧* x ?b</span>\n<span class=\"c\"> 2. A ?b y</span>\n<span class=\"c\">*)</span>\n</code></pre></div>",
        "id": 480953622,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1730909389
    },
    {
        "content": "<p>and too little</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"s\">\"∃x. A x ⟹ (∀x. B x ⟶ Q x)\"</span>\n<span class=\"k\">proof</span><span class=\"w\"> </span><span class=\"n\">standard</span>\n<span class=\"c\">(*⋀x. ∃x. A x ⟹ B x ⟶ Q x*)</span>\n</code></pre></div>",
        "id": 480953766,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1730909434
    },
    {
        "content": "<p>so you want standard+ actually</p>",
        "id": 480953796,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1730909445
    },
    {
        "content": "<p>which is also doing too much:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"s\">\"∃x. A x ⟹ (∀x. B x ⟶ rtranclp Q x y)\"</span>\n<span class=\"k\">proof</span><span class=\"w\"> </span><span class=\"n\">standard</span><span class=\"o\">+</span>\n<span class=\"c\">(*</span>\n<span class=\"c\">⋀x. ∃x. A x ⟹ B x ⟹ Q x y</span>\n<span class=\"c\">*)</span>\n</code></pre></div>",
        "id": 480953939,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1730909487
    },
    {
        "content": "<p>and it is sometimes unintuitive:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"s\">\"A⇧*⇧* x y\"</span>\n<span class=\"k\">proof</span><span class=\"w\"> </span><span class=\"n\">standard</span><span class=\"o\">+</span>\n<span class=\"c\">(*</span>\n<span class=\"c\">A⇧*⇧* x y</span>\n<span class=\"c\">*)</span>\n</code></pre></div>\n<p>(first example again with a +)</p>",
        "id": 480956778,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1730910409
    },
    {
        "content": "<p>I have not encountered \"standard\". I see! The behavior on<code>A^**</code> indeed looks confusing. </p>\n<p>I sometimes use <code>safe</code>.</p>",
        "id": 480967154,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1730913756
    },
    {
        "content": "<p>But it does not do the elimination.</p>",
        "id": 480967167,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1730913767
    },
    {
        "content": "<p>thanks for the examples!</p>",
        "id": 481035675,
        "sender_full_name": "Yong Kiam",
        "timestamp": 1730948360
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"754515\">Yiming Xu</span> <a href=\"#narrow/channel/238552-Beginner-Questions/topic/Stating.20a.20theorem.20so.20.22unfolding.22.20automatically.20split/near/480967154\">said</a>:</p>\n<blockquote>\n<p>I have not encountered \"standard\". I see! The behavior on<code>A^**</code> indeed looks confusing. </p>\n<p>I sometimes use <code>safe</code>.</p>\n</blockquote>\n<p><code>proof</code> is the same as <code>proof standard</code>. So it is usually not spelled out explicitly unless you really want to apply it several times</p>",
        "id": 481050404,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1730959144
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"233198\">Mathias Fleury</span> <a href=\"#narrow/channel/238552-Beginner-Questions/topic/Stating.20a.20theorem.20so.20.22unfolding.22.20automatically.20split/near/481050404\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"754515\">Yiming Xu</span> <a href=\"#narrow/channel/238552-Beginner-Questions/topic/Stating.20a.20theorem.20so.20.22unfolding.22.20automatically.20split/near/480967154\">said</a>:</p>\n<blockquote>\n<p>I have not encountered \"standard\". I see! The behavior on<code>A^**</code> indeed looks confusing. </p>\n<p>I sometimes use <code>safe</code>.</p>\n</blockquote>\n<p><code>proof</code> is the same as <code>proof standard</code>. So it is usually not spelled out explicitly unless you really want to apply it several times</p>\n</blockquote>\n<p>I see. That is the \"proof -\" is getting rid of.</p>",
        "id": 481109051,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1730982509
    }
]