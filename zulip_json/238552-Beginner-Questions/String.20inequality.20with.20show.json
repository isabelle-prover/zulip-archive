[
    {
        "content": "<p>I'm trying to generate unique strings and thought the best way might be using Show. However, I'm having a hard time understanding the implementation and got stuck here:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">theory</span><span class=\"w\"> </span><span class=\"n\">String_Shenanigans</span>\n<span class=\"kp\">imports</span><span class=\"w\"> </span><span class=\"n\">Main</span><span class=\"w\"> </span><span class=\"s\">\"Show.Show_Instances\"</span>\n<span class=\"k\">begin</span>\n\n<span class=\"kn\">lemma</span>\n<span class=\"w\">  </span><span class=\"kp\">fixes</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"n\">nat</span><span class=\"w\"> </span><span class=\"kp\">and</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"n\">nat</span>\n<span class=\"w\">  </span><span class=\"kp\">assumes</span><span class=\"w\"> </span><span class=\"s\">\"a ≠ b\"</span>\n<span class=\"w\">  </span><span class=\"kp\">shows</span><span class=\"w\"> </span><span class=\"s\">\"show a ≠ show b\"</span>\n<span class=\"w\">  </span><span class=\"gr\">oops</span>\n\n<span class=\"k\">end</span>\n</code></pre></div>",
        "id": 499482304,
        "sender_full_name": "Maximilian Vollath",
        "timestamp": 1739455740
    },
    {
        "content": "<p>I don't know whether there's a better way to achieve your goal of generating unique strings than via show.<br>\nHowever, I tried to prove it myself just for fun, so here you go:</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>Proofs</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">div_mod_imp_eq</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">‹(a :: nat) div n = b div n ⟹ a mod n = b mod n ⟹ a = b›</span>\n<span class=\"w\">  </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">metis</span><span class=\"w\"> </span><span class=\"n\">div_mult_mod_eq</span><span class=\"o\">)</span>\n\n<span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">string_of_digit_inj</span><span class=\"o\">:</span>\n<span class=\"w\">  </span><span class=\"kp\">assumes</span><span class=\"w\"> </span><span class=\"s\">‹a ≠ (b :: nat)›</span><span class=\"w\"> </span><span class=\"s\">‹a &lt; 10›</span><span class=\"w\"> </span><span class=\"s\">‹b &lt; 10›</span>\n<span class=\"w\">  </span><span class=\"kp\">shows</span><span class=\"w\"> </span><span class=\"s\">‹string_of_digit a ≠ string_of_digit b›</span>\n<span class=\"k\">proof</span><span class=\"w\"> </span><span class=\"o\">-</span>\n<span class=\"w\">  </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"s\">‹a ∈ {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}›</span>\n<span class=\"w\">    </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"s\">‹a &lt; 10›</span>\n<span class=\"w\">    </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">auto</span>\n<span class=\"w\">  </span><span class=\"k\">thus</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">thesis</span>\n<span class=\"w\">    </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"s\">‹a ≠ b›</span><span class=\"w\"> </span><span class=\"s\">‹b &lt; 10›</span>\n<span class=\"w\">    </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">auto</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">auto</span><span class=\"w\"> </span><span class=\"n\">split</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">if_splits</span><span class=\"w\"> </span><span class=\"n\">simp</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">string_of_digit_def</span><span class=\"o\">)</span>\n<span class=\"k\">qed</span>\n\n<span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">shows_prec_nat</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">‹shows_prec p n '''' = (if n &lt; 10 then string_of_digit n</span>\n<span class=\"s\">    else shows_prec p (n div 10) '''' @ string_of_digit (n mod 10))›</span>\n<span class=\"w\">  </span><span class=\"k\">unfolding</span><span class=\"w\"> </span><span class=\"n\">shows_prec_nat_def</span>\n<span class=\"k\">proof</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">induction</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"n\">rule</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">showsp_nat.induct</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"k\">case</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">1</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"k\">case</span>\n<span class=\"w\">    </span><span class=\"k\">unfolding</span><span class=\"w\"> </span><span class=\"n\">shows_string_def</span><span class=\"w\"> </span><span class=\"n\">showsp_nat.simps</span><span class=\"o\">[</span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"o\">]</span>\n<span class=\"w\">    </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">auto</span><span class=\"w\"> </span><span class=\"n\">simp</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">shows_prec_append</span><span class=\"o\">[</span><span class=\"n\">symmetric</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"n\">shows_prec_nat_def</span><span class=\"o\">[</span><span class=\"n\">symmetric</span><span class=\"o\">])</span>\n<span class=\"k\">qed</span>\n\n<span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">show_nat</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">‹show n = (if n &lt; 10 then string_of_digit n</span>\n<span class=\"s\">    else show (n div 10) @ string_of_digit (n mod 10))›</span>\n<span class=\"w\">  </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">shows_prec_nat</span><span class=\"w\"> </span><span class=\"ow\">.</span>\n\n<span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">show_nat_induct</span><span class=\"o\">:</span>\n<span class=\"w\">  </span><span class=\"s\">‹(⋀n. (⋀z. ¬ n &lt; 10 ⟹ z ∈ range (shows_string (string_of_digit (n mod 10))) ⟹ P (n div 10)) ⟹ P n) ⟹ P n›</span>\n<span class=\"w\">  </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">rule</span><span class=\"w\"> </span><span class=\"n\">showsp_nat.induct</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">blast</span>\n\n<span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">length_string_of_digit</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]:</span><span class=\"w\"> </span><span class=\"s\">‹length (string_of_digit n) = 1›</span>\n<span class=\"w\">  </span><span class=\"k\">unfolding</span><span class=\"w\"> </span><span class=\"n\">string_of_digit_def</span>\n<span class=\"w\">  </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">auto</span>\n\n<span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">len_show_ge10</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">‹(n :: nat) ≥ 10 ⟹ length (show n) ≥ 2›</span>\n<span class=\"w\">  </span><span class=\"k\">unfolding</span><span class=\"w\"> </span><span class=\"n\">show_nat</span><span class=\"o\">[</span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"n\">show_nat</span><span class=\"o\">[</span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"s\">‹(n div 10)›</span><span class=\"o\">]</span>\n<span class=\"w\">  </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">auto</span>\n\n<span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">len_show_lt10</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">‹(n :: nat) &lt; 10 ⟹ length (show n) = 1›</span>\n<span class=\"w\">  </span><span class=\"k\">unfolding</span><span class=\"w\"> </span><span class=\"n\">show_nat</span><span class=\"o\">[</span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"o\">]</span>\n<span class=\"w\">  </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">auto</span>\n\n<span class=\"kn\">lemma</span>\n<span class=\"w\">  </span><span class=\"kp\">fixes</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"n\">nat</span>\n<span class=\"w\">  </span><span class=\"kp\">assumes</span><span class=\"w\"> </span><span class=\"s\">‹a ≠ b›</span>\n<span class=\"w\">  </span><span class=\"kp\">shows</span><span class=\"w\"> </span><span class=\"s\">‹show a ≠ show b›</span>\n<span class=\"w\">  </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">assms</span>\n<span class=\"k\">proof</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">induction</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">arbitrary</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"n\">rule</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">show_nat_induct</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"k\">case</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">1</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"k\">hence</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"k\">case</span><span class=\"w\"> </span><span class=\"kp\">if</span><span class=\"w\"> </span><span class=\"s\">‹¬n &lt; 10›</span><span class=\"w\"> </span><span class=\"s\">‹¬b &lt; 10›</span>\n<span class=\"w\">    </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">that</span><span class=\"w\"> </span><span class=\"n\">div_mod_imp_eq</span><span class=\"o\">[</span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"n\">10</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"n\">string_of_digit_inj</span><span class=\"o\">[</span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"s\">‹n mod 10›</span><span class=\"w\"> </span><span class=\"s\">‹b mod 10›</span><span class=\"o\">]</span>\n<span class=\"w\">    </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">cases</span><span class=\"w\"> </span><span class=\"s\">‹n div 10 = b div 10›</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">auto</span><span class=\"w\"> </span><span class=\"n\">simp</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">show_nat</span><span class=\"o\">[</span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"n\">show_nat</span><span class=\"o\">[</span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"o\">])</span>\n<span class=\"w\">  </span><span class=\"k\">moreover</span><span class=\"w\"> </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"k\">case</span><span class=\"w\"> </span><span class=\"kp\">if</span><span class=\"w\"> </span><span class=\"s\">‹n &lt; 10›</span><span class=\"w\"> </span><span class=\"s\">‹b &lt; 10›</span>\n<span class=\"w\">    </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">1</span><span class=\"w\"> </span><span class=\"n\">string_of_digit_inj</span><span class=\"w\"> </span><span class=\"n\">that</span>\n<span class=\"w\">    </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">auto</span><span class=\"w\"> </span><span class=\"n\">simp</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">show_nat</span><span class=\"o\">[</span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"n\">show_nat</span><span class=\"o\">[</span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"o\">])</span>\n<span class=\"w\">  </span><span class=\"k\">moreover</span><span class=\"w\"> </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"k\">case</span><span class=\"w\"> </span><span class=\"kp\">if</span><span class=\"w\"> </span><span class=\"s\">‹((n :: nat) &lt; 10) ≠ ((b :: nat) &lt; 10)›</span>\n<span class=\"w\">    </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">that</span><span class=\"w\"> </span><span class=\"n\">len_show_ge10</span><span class=\"o\">[</span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"n\">len_show_lt10</span><span class=\"o\">[</span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"n\">len_show_ge10</span><span class=\"o\">[</span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"n\">len_show_lt10</span><span class=\"o\">[</span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"o\">]</span>\n<span class=\"w\">    </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">auto</span>\n<span class=\"w\">  </span><span class=\"k\">ultimately</span><span class=\"w\"> </span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"k\">case</span>\n<span class=\"w\">    </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">blast</span>\n<span class=\"k\">qed</span>\n</code></pre></div>\n</div></div>",
        "id": 500270718,
        "sender_full_name": "Maximilian Schäffeler",
        "timestamp": 1739824731
    },
    {
        "content": "<p>if it's not important how the strings look like, how about just <code>replicate a CHR''a''</code>? Then even simp can prove they are distinct:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"s\">\"a ≠ b ⟹ replicate a CHR ''a'' ≠ replicate b CHR ''a''\"</span>\n<span class=\"w\">  </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">simp</span>\n</code></pre></div>",
        "id": 500435144,
        "sender_full_name": "terru",
        "timestamp": 1739894211
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"433149\">@Maximilian Schäffeler</span>  That's awesome, thank you!</p>",
        "id": 503067679,
        "sender_full_name": "Maximilian Vollath",
        "timestamp": 1741018583
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"485021\">terru</span> <a href=\"#narrow/channel/238552-Beginner-Questions/topic/String.20inequality.20with.20show/near/500435144\">said</a>:</p>\n<blockquote>\n<p>if it's not important how the strings look like, how about just <code>replicate a CHR''a''</code>?</p>\n</blockquote>\n<p>That's what I ended up doing as a band-aid, you're right. I just wanted it to look cleaner.</p>",
        "id": 503068299,
        "sender_full_name": "Maximilian Vollath",
        "timestamp": 1741018721
    }
]