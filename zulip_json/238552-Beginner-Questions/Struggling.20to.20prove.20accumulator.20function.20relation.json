[
    {
        "content": "<p>I have the following function and lemma:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">shuffles'</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"'a list ⇒ 'a list ⇒ 'a list ⇒ 'a list list\"</span><span class=\"w\"> </span><span class=\"kp\">where</span>\n<span class=\"s\">\"shuffles' [] ys s = [s @ ys]\"</span><span class=\"w\"> </span><span class=\"o\">|</span>\n<span class=\"s\">\"shuffles' xs [] s = [s @ xs]\"</span><span class=\"w\"> </span><span class=\"o\">|</span>\n<span class=\"s\">\"shuffles' (x#xs) (y#ys) s = shuffles' xs (y#ys) (s @ [x]) @ shuffles' (x#xs) ys (s @ [y])\"</span>\n\n<span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">shuffles</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"'a list ⇒ 'a list ⇒ 'a list list\"</span><span class=\"w\"> </span><span class=\"kp\">where</span>\n<span class=\"s\">\"shuffles xs ys = shuffles' xs ys []\"</span>\n\n<span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">l13</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"zs ∈ set (shuffles' xs ys ss) ⟹ length zs = length xs + length ys + length ss\"</span>\n<span class=\"w\">  </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">induct</span><span class=\"w\"> </span><span class=\"n\">xs</span><span class=\"w\"> </span><span class=\"n\">arbitrary</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">ys</span><span class=\"w\"> </span><span class=\"n\">ss</span><span class=\"o\">)</span>\n<span class=\"w\">   </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"n\">auto</span>\n<span class=\"w\">  </span><span class=\"gr\">sorry</span>\n\n<span class=\"kn\">theorem</span><span class=\"w\"> </span><span class=\"s\">\"zs ∈ set (shuffles xs ys) ⟹ length zs = length xs + length ys\"</span>\n<span class=\"w\">  </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">induct</span><span class=\"w\"> </span><span class=\"n\">xs</span><span class=\"w\"> </span><span class=\"n\">arbitrary</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">ys</span><span class=\"o\">)</span>\n<span class=\"w\">   </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">auto</span><span class=\"w\"> </span><span class=\"n\">simp</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">l13</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"k\">done</span>\n</code></pre></div>\n<p>Unfortunately I am struggling to find an intermediate lemma that will help prove <code>l13</code>.  I have tried using <code>case_tac ys</code> but it only seems that the proof would only continue expanding in size. Could I please have some help with this?</p>",
        "id": 497584537,
        "sender_full_name": "o7",
        "timestamp": 1738645810
    },
    {
        "content": "<p>When you do an induction over the parameter of a function, you should use the induction principle from the function</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">induct</span><span class=\"w\"> </span><span class=\"n\">xs</span><span class=\"w\"> </span><span class=\"n\">ys</span><span class=\"w\"> </span><span class=\"n\">ss</span><span class=\"w\"> </span><span class=\"n\">rule</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">shuffles'.induct</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 497588943,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1738648896
    }
]