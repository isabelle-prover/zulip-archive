[
    {
        "content": "<p>I am struggling with a function (\"cut\") where for some reason I cannot use its definition in my proofs.</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"c\">(* I do not believe this definition is needed but I write it here for completeness *)</span>\n<span class=\"k\">definition</span><span class=\"w\"> </span><span class=\"n\">cols</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"('a * 'b) set set  ⇒ 'a set\"</span><span class=\"w\"> </span><span class=\"kp\">where</span>\n<span class=\"w\">  </span><span class=\"s\">\"cols R = { n | n r. r ∈ R ∧ (∃ v. (n, v) ∈ r) }\"</span>\n\n<span class=\"k\">definition</span><span class=\"w\"> </span><span class=\"n\">cut</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"('a * 'b) set ⇒ ('a * 'b) set set ⇒ ('a * 'b) set set ⇒ ('a * 'b) set\"</span><span class=\"w\"> </span><span class=\"kp\">where</span>\n<span class=\"w\">  </span><span class=\"s\">\"cut r1 R1 R2 = { (n, v) | n v. (n, v) ∈ r1 ∧ n ∈ (cols R1 - cols R2) }\"</span>\n\n<span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"s\">\"cut r1 R1 {} = { (n, v) | n v. (n, v) ∈ r1 ∧ n ∈ (cols R1 - cols {}) }\"</span>\n<span class=\"w\">  </span><span class=\"kp\">apply</span><span class=\"o\">(</span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"n\">add</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">cut_def</span><span class=\"o\">[</span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"s\">\"r1\"</span><span class=\"w\"> </span><span class=\"s\">\"R1\"</span><span class=\"w\"> </span><span class=\"s\">\"{}\"</span><span class=\"o\">])</span>\n</code></pre></div>\n<p>Using apply(simp add: cut_def[of \"r1\" \"R1\" \"{}\"]), I manage to go from the goal</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"s\">\"cut r1 R1 {} =</span>\n<span class=\"s\"> { (n, v) | n v. (n, v) ∈ r1 ∧ n ∈ (cols R1 - cols {}) }\"</span>\n</code></pre></div>\n<p>to the goal</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"s\">\"{(n, v). (n, v) ∈ r1 ∧ n ∈ cols R1 ∧ n ∉ cols {}} =</span>\n<span class=\"s\">  {(n, v). (n, v) ∈ r1 ∧ n ∈ cols R1 ∧ n ∉ cols {}}\"</span>\n</code></pre></div>\n<p>which to me seems trivial (\"a = a\"), but I can't make it to work (I am trying blast, fastforce, auto, .. nothing works)<br>\nWhat rule do I need to use to finish this goal? What am I missing?</p>",
        "id": 493811247,
        "sender_full_name": "ZDHKLV",
        "timestamp": 1736931518
    },
    {
        "content": "<p>I just found out that applying the rule \"cols {} = {}\" (proved by auto) makes my proof succeed. Why is it required when I was clearly dealing with \"a = a\" to begin with?</p>",
        "id": 493817505,
        "sender_full_name": "ZDHKLV",
        "timestamp": 1736933458
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"s\">\"cut r1 R1 {} = { (n, v) | n v. (n, v) ∈ r1 ∧ n ∈ (cols R1 - cols {}) }\"</span>\n<span class=\"w\">  </span><span class=\"kp\">apply</span><span class=\"o\">(</span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"n\">add</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">cut_def</span><span class=\"o\">[</span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"s\">\"r1\"</span><span class=\"w\"> </span><span class=\"s\">\"R1\"</span><span class=\"w\"> </span><span class=\"s\">\"{}\"</span><span class=\"o\">])</span>\n<span class=\"w\">  </span><span class=\"n\">supply</span><span class=\"w\"> </span><span class=\"o\">[[</span><span class=\"n\">unify_trace_failure</span><span class=\"o\">]]</span>\n<span class=\"w\">  </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">rule</span><span class=\"w\"> </span><span class=\"n\">refl</span><span class=\"o\">)</span>\n<span class=\"c\">(*</span>\n<span class=\"c\">The following types do not unify:</span>\n<span class=\"c\">('a × 'b) set set ⇒ 'a set</span>\n<span class=\"c\">('a × 'c) set set ⇒ 'a set</span>\n<span class=\"c\">*)</span>\n</code></pre></div>",
        "id": 493820145,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1736934291
    },
    {
        "content": "<p>If you control-hover over the <code>cols</code>in your theory file, you will see where the <code>'c</code> is</p>",
        "id": 493820264,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1736934326
    },
    {
        "content": "<p>And this also explains why this is not <code>a=a</code>and why unfolding works</p>",
        "id": 493820361,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1736934360
    },
    {
        "content": "<p>Mathias beat me to it. Here's essentially the same information again:</p>\n<p>Your goal isn't <code>a=a</code> if you check the types. The type of the first <code>{}</code> is <code>'a x 'b set set</code> while the type of the second one is <code>'a x 'c set set</code> since Isabelle infers the most general types. Unfortunately, Isabelle doesn't print the type of <code>{}</code> even if you use <code>declare [[show_types]]</code>. Mathias showed you a nice way to use the unifier to find the mismatch though. </p>\n<p>Now it is up to you to decide whether you actually want the second <code>{}</code> to be of the same type as the first one or you provide the equation <code>cols {} = {}</code> as an additional rule to close the goal while keeping the types as they are.</p>",
        "id": 493821496,
        "sender_full_name": "Kevin Kappelmann",
        "timestamp": 1736934700
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"233154\">Kevin Kappelmann</span> <a href=\"#narrow/channel/238552-Beginner-Questions/topic/Struggling.20with.20a.20trivial.20set.20equality/near/493821496\">said</a>:</p>\n<blockquote>\n<p>Unfortunately, Isabelle doesn't print the type of <code>{}</code> even if you use <code>declare [[show_types]]</code>.</p>\n</blockquote>\n<p>If you really want to see the complete goal including all types, you can use this:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">declare</span><span class=\"o\">[[</span><span class=\"n\">show_types</span><span class=\"o\">,</span><span class=\"n\">show_sorts</span><span class=\"o\">,</span><span class=\"n\">ML_print_depth</span><span class=\"o\">=</span><span class=\"n\">10000</span><span class=\"o\">]]</span>\n<span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"s\">\"cut r1 R1 {} = { (n, v) | n v. (n, v) ∈ r1 ∧ n ∈ (cols R1 - cols {}) }\"</span>\n<span class=\"w\">  </span><span class=\"kp\">apply</span><span class=\"o\">(</span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"n\">add</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">cut_def</span><span class=\"o\">[</span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"s\">\"r1\"</span><span class=\"w\"> </span><span class=\"s\">\"R1\"</span><span class=\"w\"> </span><span class=\"s\">\"{}\"</span><span class=\"o\">])</span>\n<span class=\"kt\">ML_command</span><span class=\"w\"> </span><span class=\"s\">‹</span>\n<span class=\"s\">  @{Isar.goal} |&gt; #goal |&gt; Thm.full_prop_of |&gt; @{print}</span>\n<span class=\"s\">›</span>\n</code></pre></div>",
        "id": 493822015,
        "sender_full_name": "Kevin Kappelmann",
        "timestamp": 1736934850
    },
    {
        "content": "<p>It makes perfect sense! Thank you very much to the both of you and thank you for the tips to print the types!</p>",
        "id": 493888056,
        "sender_full_name": "ZDHKLV",
        "timestamp": 1736935295
    }
]