[
    {
        "content": "<p>Where is the exact point in the HOL library where it is proven that if the type <code>'a</code> has an instance as a real_vector then functions valued in <code>'a</code> also do? How do I find out these kind of things? On Lean ctrl+click on + takes you to the instance where that type has been given addition but in Isabelle it takes you to the point where + is introduced in Isabelle</p>",
        "id": 242247969,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1623348806
    },
    {
        "content": "<p>There is no <code>real_vector</code> instance for functions in either <code>HOL</code> or <code>HOL-Analysis</code>. What library are you using exactly?</p>",
        "id": 242260093,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1623354341
    },
    {
        "content": "<p>There is one in <code>Lp.Functional_Spaces</code> in the AFP…</p>",
        "id": 242260429,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1623354504
    },
    {
        "content": "<p>I don't know if there is a general way to find out where exactly a particular typeclass instance for a particular type constructor was proven.</p>",
        "id": 242260491,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1623354541
    },
    {
        "content": "<p>I am using the smooth manifolds library. I guess</p>\n<div class=\"codehilite\"><pre><span></span><code>instance &quot;fun&quot; :: (type, real_vector) real_vector\n  by standard (auto simp: scaleR_fun_def algebra_simps)\n</code></pre></div>\n<p>is then the point where such instance is defined... What is exactly the syntax <code> \"fun\" :: (type, real_vector)</code>?</p>",
        "id": 242281608,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1623365419
    },
    {
        "content": "<p><code>instance a :: (b, c) d</code> means that <code>'t 'u a :: d</code> if <code>'t :: b</code> and <code>'u :: c</code></p>",
        "id": 242281962,
        "sender_full_name": "Jakub Kądziołka",
        "timestamp": 1623365732
    },
    {
        "content": "<p>And \"fun\" is the internal name of the function type constructor. When you write <code>'a ⇒ 'b</code>, the internal representation of that type is <code>('a, 'b) fun</code>.</p>",
        "id": 242317117,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1623401568
    },
    {
        "content": "<p>I see, the Smooth Manifold entry defines its own vector space instance for functions – presumably in the same way as the <code>Lp</code> entry.</p>",
        "id": 242317199,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1623401628
    },
    {
        "content": "<p>Can I write the instantiation in an equivalent way as</p>\n<div class=\"codehilite\"><pre><span></span><code>instantiation &quot;&#39;a ⇒ (&#39;b :: real_vector)&quot; :: real_vector\n</code></pre></div>\n<p>somehow? It tells me <code>Undefined type name: \"'a ⇒ ('b :: real_vector)\"</code></p>",
        "id": 242328860,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1623408682
    },
    {
        "content": "<p>No, you have to write <code>instantiation \"fun\" :: (type, real_vector) real_vector</code>. The bit before the <code>::</code> has to be a type constructor.</p>",
        "id": 242329031,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1623408789
    },
    {
        "content": "<p>Ok, my final goal is to put an instance of <code>real_vector</code> on the type <code>('a × (('a ⇒ real) ⇒ real))</code> which ignores the first coordinate and treats pairs as if they were they second coordinate. Does this mean that I have to put an instance on a generic product of a type and a real vector space? This will probably collide with the instance of product of vector spaces which is more standard I guess</p>",
        "id": 242329340,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1623409026
    },
    {
        "content": "<p>Indeed it says</p>\n<div class=\"codehilite\"><pre><span></span><code>Conflict of type arities:\n  prod :: (type, real_vector) cancel_ab_semigroup_add and\n  prod :: (cancel_ab_semigroup_add, cancel_ab_semigroup_add) cancel_ab_semigroup_add\n</code></pre></div>",
        "id": 242329462,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1623409105
    },
    {
        "content": "<p>You cannot do that in Isabelle. Typeclass instances must <em>always</em> be for a type constructor.</p>",
        "id": 242329468,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1623409114
    },
    {
        "content": "<p>What you are trying to do would require something like <code>FlexibleInstances</code> and <code>OverlappingInstances</code> in Haskell, which the Isabelle type class system just doesn't support.</p>",
        "id": 242329503,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1623409154
    },
    {
        "content": "<p>The only way around this would be to introduce a type clone of <code>'a × (('a ⇒ real) ⇒ real)</code> with <code>type_definition</code>, then you can instantiate it in whichever way you want</p>",
        "id": 242329530,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1623409183
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232736\">Manuel Eberl</span> <a href=\"#narrow/stream/238552-Beginner-Questions/topic/Sum.20of.20functions/near/242329530\">said</a>:</p>\n<blockquote>\n<p>The only way around this would be to introduce a type clone of <code>'a × (('a ⇒ real) ⇒ real)</code> with <code>type_definition</code>, then you can instantiate it in whichever way you want</p>\n</blockquote>\n<p>Ok thanks this is what I was looking for!</p>",
        "id": 242329605,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1623409223
    },
    {
        "content": "<p>Sorry, type classes in Isabelle are just not very flexible… It's a known problem.</p>",
        "id": 242329631,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1623409246
    },
    {
        "content": "<p>It would be nice to have some kind of deriving via typedef mechanism like in Haskell. This wouldn't require any changes to the core typeclass mechanism.</p>",
        "id": 242330060,
        "sender_full_name": "Lukas Stevens",
        "timestamp": 1623409616
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"233155\">Lukas Stevens</span> <a href=\"#narrow/stream/238552-Beginner-Questions/topic/Sum.20of.20functions/near/242330060\">said</a>:</p>\n<blockquote>\n<p>It would be nice to have some kind of deriving via typedef mechanism like in Haskell. This wouldn't require any changes to the core typeclass mechanism.</p>\n</blockquote>\n<p>A topic for a student perhaps?</p>",
        "id": 242345016,
        "sender_full_name": "Lukas Stevens",
        "timestamp": 1623418265
    }
]