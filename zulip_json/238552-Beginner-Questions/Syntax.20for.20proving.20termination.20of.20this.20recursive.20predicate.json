[
    {
        "content": "<p>Code for copy and paste:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">datatype</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n n-Type\">'m</span><span class=\"o\">,</span><span class=\"n n-Type\">'p</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">cform</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">cVAR</span><span class=\"w\"> </span><span class=\"s\">\"'p\"</span>\n<span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">cFALSE</span>\n<span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">cDISJ</span><span class=\"w\"> </span><span class=\"s\">\"('m,'p) cform\"</span><span class=\"w\"> </span><span class=\"s\">\"('m,'p) cform\"</span>\n<span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">cNOT</span><span class=\"w\"> </span><span class=\"s\">\"('m,'p) cform\"</span>\n<span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">cDIAM</span><span class=\"w\"> </span><span class=\"n n-Type\">'m</span><span class=\"w\"> </span><span class=\"s\">\"(('m,'p) cform) list\"</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"s\">\"♢_ _\"</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">0</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">0</span><span class=\"o\">])</span>\n\n\n<span class=\"k\">abbreviation</span><span class=\"w\"> </span><span class=\"n\">ops</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"'m set × ('m ⇒ nat) ⇒ 'm set\"</span><span class=\"w\"> </span><span class=\"kp\">where</span>\n<span class=\"s\">\"ops τ ≡ fst τ\"</span>\n\n<span class=\"k\">abbreviation</span><span class=\"w\"> </span><span class=\"n\">arity</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"'m set × ('m ⇒ nat) ⇒ ('m ⇒ nat)\"</span><span class=\"w\"> </span><span class=\"kp\">where</span>\n<span class=\"s\">\"arity τ ≡ snd τ\"</span>\n\n<span class=\"k\">type_synonym</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n n-Type\">'m</span><span class=\"o\">,</span><span class=\"n n-Type\">'p</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">sig</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"s\">\"('m set × ('m ⇒ nat)) × 'p set \"</span>\n\n<span class=\"k\">abbreviation</span><span class=\"w\"> </span><span class=\"n\">props</span><span class=\"w\"> </span><span class=\"o\">::</span>\n<span class=\"s\">\"('m set × ('m ⇒ nat)) × 'p set ⇒ 'p set\"</span><span class=\"w\"> </span><span class=\"kp\">where</span>\n<span class=\"s\">\"props sig ≡ snd sig\"</span>\n\n<span class=\"k\">abbreviation</span><span class=\"w\"> </span><span class=\"n\">mops</span><span class=\"w\"> </span><span class=\"o\">::</span>\n<span class=\"s\">\"('m set × ('m ⇒ nat)) × 'p set ⇒ 'm set\"</span><span class=\"w\"> </span><span class=\"kp\">where</span>\n<span class=\"s\">\"mops sig ≡ fst (fst sig)\"</span>\n\n<span class=\"k\">abbreviation</span><span class=\"w\"> </span><span class=\"n\">marity</span><span class=\"w\"> </span><span class=\"o\">::</span>\n<span class=\"s\">\"('m set × ('m ⇒ nat)) × 'p set ⇒ 'm ⇒ nat\"</span><span class=\"w\"> </span><span class=\"kp\">where</span>\n<span class=\"s\">\"marity sig ≡ snd (fst sig)\"</span>\n\n<span class=\"k\">inductive</span><span class=\"w\"> </span><span class=\"n\">wff</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">‹('m set × ('m ⇒ nat)) × 'p set ⇒ ('m, 'p) cform ⇒ bool›</span>\n<span class=\"w\">  </span><span class=\"kp\">for</span><span class=\"w\"> </span><span class=\"n\">sig</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"('m set × ('m ⇒ nat)) × 'p set\"</span>\n<span class=\"w\">  </span><span class=\"kp\">where</span>\n<span class=\"w\">    </span><span class=\"s\">\"wff sig cFALSE\"</span>\n<span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"s\">\"p ∈ props sig ⟹ wff sig (cVAR p) \"</span>\n<span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"s\">\"wff sig (cDIAM m fl) \"</span>\n<span class=\"w\">    </span><span class=\"kp\">if</span><span class=\"w\"> </span><span class=\"s\">\"m ∈ mops sig\"</span><span class=\"w\"> </span><span class=\"s\">\"length fl = (marity sig m)\"</span><span class=\"w\"> </span><span class=\"s\">\"∀f. f ∈ list.set fl ⟹</span>\n<span class=\"s\">      wff sig f\"</span>\n<span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"s\">\"wff sig (cNOT f)\"</span><span class=\"w\"> </span><span class=\"kp\">if</span><span class=\"w\"> </span><span class=\"s\">\"wff sig f\"</span>\n<span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"s\">\"wff sig (cDISJ f1 f2)\"</span><span class=\"w\"> </span><span class=\"kp\">if</span><span class=\"w\"> </span><span class=\"s\">\"wff sig f1\"</span>\n<span class=\"w\">  </span><span class=\"s\">\"wff sig f2 \"</span>\n\n<span class=\"k\">type_synonym</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n n-Type\">'m</span><span class=\"o\">,</span><span class=\"n n-Type\">'p</span><span class=\"o\">,</span><span class=\"n n-Type\">'a</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">model</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"s\">\"'a set × ('m ⇒ 'a list ⇒ bool) × ('p ⇒ 'a ⇒ bool)\"</span>\n\n<span class=\"k\">abbreviation</span><span class=\"w\"> </span><span class=\"n\">world</span><span class=\"w\"> </span><span class=\"o\">::</span>\n<span class=\"s\">\"'a set × ('m ⇒ 'a list ⇒ bool) × ('p ⇒ 'a ⇒ bool)</span>\n<span class=\"s\"> ⇒ 'a set\"</span><span class=\"w\"> </span><span class=\"kp\">where</span>\n<span class=\"s\">\"world M ≡ fst M\"</span>\n\n<span class=\"k\">abbreviation</span>\n<span class=\"n\">rel</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"'a set × ('m ⇒ 'a list ⇒ bool) × ('p ⇒ 'a ⇒ bool)</span>\n<span class=\"s\"> ⇒ ('m ⇒ 'a list ⇒ bool)\"</span><span class=\"w\"> </span><span class=\"kp\">where</span>\n<span class=\"s\">\"rel τ ≡ fst (snd τ)\"</span>\n\n<span class=\"k\">abbreviation</span>\n<span class=\"n\">valt</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"'a set × ('m ⇒ 'a list ⇒ bool) × ('p ⇒ 'a ⇒ bool)</span>\n<span class=\"s\">⇒ ('p ⇒ 'a ⇒ bool)\"</span><span class=\"w\"> </span><span class=\"kp\">where</span>\n<span class=\"s\">\"valt τ ≡ snd (snd τ)\"</span>\n\n\n<span class=\"kn\">function</span><span class=\"w\"> </span><span class=\"n\">csatis</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"('m set × ('m ⇒ nat)) × 'p set ⇒ 'a set × ('m ⇒ 'a list ⇒ bool) × ('p ⇒ 'a ⇒ bool) ⇒</span>\n<span class=\"s\">              'a ⇒ ('m,'p) cform ⇒ bool\"</span>\n<span class=\"w\">  </span><span class=\"kp\">where</span>\n<span class=\"w\">   </span><span class=\"s\">\"csatis sig M w cFALSE ⟷ False\"</span>\n<span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"s\">\"csatis sig M w (cVAR p) ⟷ p ∈ props sig ∧ w ∈ world M ∧ valt M p w\"</span>\n<span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"s\">\"csatis sig M w (cDISJ f1 f2) = (csatis sig M w f1 ∨ csatis sig M w f2)\"</span>\n<span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"s\">\"csatis sig M w (cNOT f) = (w ∈ world M  ∧ ¬ csatis sig M w f)\"</span>\n<span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"s\">\"csatis sig M w (cDIAM m fl) =</span>\n<span class=\"s\">   (m ∈ mops sig ∧ marity sig m = length fl ∧</span>\n<span class=\"s\">     w ∈ world M ∧ (∃vl. length vl = length fl ∧ rel M m (w # vl) ∧</span>\n<span class=\"s\">     (∀i. i &lt; length vl ⟶ csatis sig M (vl ! i) (fl ! i))))\"</span>\n<span class=\"w\"> </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"n\">auto</span>\n<span class=\"w\">  </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">cform.exhaust</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">blast</span>\n<span class=\"kn\">termination</span><span class=\"w\"> </span><span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>I define the predicate csatis and have trouble proving its termination. The goal is as follows:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">proof</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">state</span><span class=\"o\">)</span>\n<span class=\"n\">goal</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">5</span><span class=\"w\"> </span><span class=\"n\">subgoals</span><span class=\"o\">):</span>\n<span class=\"w\"> </span><span class=\"n\">1.</span><span class=\"w\"> </span><span class=\"n\">wf</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">R</span>\n<span class=\"w\"> </span><span class=\"n\">2.</span><span class=\"w\"> </span><span class=\"n\">⋀sig</span><span class=\"w\"> </span><span class=\"n\">M</span><span class=\"w\"> </span><span class=\"n\">w</span><span class=\"w\"> </span><span class=\"n\">f1</span><span class=\"w\"> </span><span class=\"n\">f2.</span><span class=\"w\"> </span><span class=\"o\">((</span><span class=\"n\">sig</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">M</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">w</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">f1</span><span class=\"o\">),</span><span class=\"w\"> </span><span class=\"n\">sig</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">M</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">w</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">cDISJ</span><span class=\"w\"> </span><span class=\"n\">f1</span><span class=\"w\"> </span><span class=\"n\">f2</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">∈</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">R</span>\n<span class=\"w\"> </span><span class=\"n\">3.</span><span class=\"w\"> </span><span class=\"n\">⋀sig</span><span class=\"w\"> </span><span class=\"n\">M</span><span class=\"w\"> </span><span class=\"n\">w</span><span class=\"w\"> </span><span class=\"n\">f1</span><span class=\"w\"> </span><span class=\"n\">f2.</span><span class=\"w\"> </span><span class=\"o\">((</span><span class=\"n\">sig</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">M</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">w</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">f2</span><span class=\"o\">),</span><span class=\"w\"> </span><span class=\"n\">sig</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">M</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">w</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">cDISJ</span><span class=\"w\"> </span><span class=\"n\">f1</span><span class=\"w\"> </span><span class=\"n\">f2</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">∈</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">R</span>\n<span class=\"w\"> </span><span class=\"n\">4.</span><span class=\"w\"> </span><span class=\"n\">⋀sig</span><span class=\"w\"> </span><span class=\"n\">M</span><span class=\"w\"> </span><span class=\"n\">w</span><span class=\"w\"> </span><span class=\"n\">f.</span><span class=\"w\"> </span><span class=\"o\">((</span><span class=\"n\">sig</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">M</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">w</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"o\">),</span><span class=\"w\"> </span><span class=\"n\">sig</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">M</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">w</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">cNOT</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">∈</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">R</span>\n<span class=\"w\"> </span><span class=\"n\">5.</span><span class=\"w\"> </span><span class=\"n\">⋀sig</span><span class=\"w\"> </span><span class=\"n\">M</span><span class=\"w\"> </span><span class=\"n\">w</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"w\"> </span><span class=\"n\">fl</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">xa.</span><span class=\"w\"> </span><span class=\"n\">xa</span><span class=\"w\"> </span><span class=\"n\">&lt;</span><span class=\"w\"> </span><span class=\"n\">length</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">⟹</span><span class=\"w\"> </span><span class=\"o\">((</span><span class=\"n\">sig</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">M</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"n\">xa</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">fl</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"n\">xa</span><span class=\"o\">),</span><span class=\"w\"> </span><span class=\"n\">sig</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">M</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">w</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">♢m</span><span class=\"w\"> </span><span class=\"n\">fl</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">∈</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">R</span>\n</code></pre></div>\n<p>I believe the relation ?R should be on the size of the formula. I would like to write:<br>\n \"wf {((a,b,c,d),e,f,g,h). size d &lt; size h}\", then I would have <code>size f1 &lt; size (cDISJ f1 f2)</code>, etc.</p>\n<p>I am not sure if it is the canonical flow for doing these sort of things. For the proof, I tried to write</p>\n<p>have \"wf {((a,b,c,d),e,f,g,h). size d &lt; size h}\" apply auto</p>\n<p>to see what remains. But Isabelle refuses to apply auto for me, and complains </p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"n\">Failed</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"k\">proof</span><span class=\"w\"> </span><span class=\"n\">method⌂</span><span class=\"o\">:</span>\n<span class=\"n\">goal</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">1</span><span class=\"w\"> </span><span class=\"n\">subgoal</span><span class=\"o\">):</span>\n<span class=\"w\"> </span><span class=\"n\">1.</span><span class=\"w\"> </span><span class=\"n\">wf</span><span class=\"w\"> </span><span class=\"ow\">{</span><span class=\"o\">((</span><span class=\"n\">a</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">d</span><span class=\"o\">),</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">g</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">h</span><span class=\"o\">)</span><span class=\"ow\">.</span><span class=\"w\"> </span><span class=\"n\">size</span><span class=\"w\"> </span><span class=\"n\">d</span><span class=\"w\"> </span><span class=\"n\">&lt;</span><span class=\"w\"> </span><span class=\"n\">size</span><span class=\"w\"> </span><span class=\"n\">h</span><span class=\"ow\">}</span>\n</code></pre></div>\n<p>May I please ask what I am suggested to do here?</p>\n<p>I tried type \"termination\" to look for examples, but I opened several files and only find this word on the comment... If someone would think there is a good example, it would be helpful to give the name of the file I should look at as well.</p>",
        "id": 479833634,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1730365984
    },
    {
        "content": "<p><a href=\"https://search.isabelle.in.tum.de/#search/default_Isabelle2024_AFP2024?page=%5B%5D&amp;q=%7B%22term%22%3A%22termination%22%2C%22fields%22%3A%5B%7B%22field%22%3A%22Command%22%2C%22match%22%3A%22OneOf%22%2C%22terms%22%3A%5B%22function%22%5D%7D%5D%7D\">Here are some termination examples</a></p>",
        "id": 479839408,
        "sender_full_name": "Fabian Huch",
        "timestamp": 1730368110
    },
    {
        "content": "<p>It is a very useful website, thanks a lot for sharing! I am making progress by looking at it.</p>",
        "id": 479848539,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1730371356
    },
    {
        "content": "<p>You're welcome -- have a look at <a href=\"https://isabelle.systems/\">isabelle.systems</a> for an overview over helpful Isabelle resources!</p>",
        "id": 479848949,
        "sender_full_name": "Fabian Huch",
        "timestamp": 1730371514
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"348400\">Fabian Huch</span> <a href=\"#narrow/channel/238552-Beginner-Questions/topic/Syntax.20for.20proving.20termination.20of.20this.20recursive.20predicate/near/479848949\">said</a>:</p>\n<blockquote>\n<p>You're welcome -- have a look at <a href=\"https://isabelle.systems/\">isabelle.systems</a> for an overview over helpful Isabelle resources!</p>\n</blockquote>\n<p>Thanks again!</p>",
        "id": 479849503,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1730371715
    },
    {
        "content": "<p>I tried to use \"measure\" on formula size and here is the only subgoal that is not killed by auto:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"n\">goal</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">1</span><span class=\"w\"> </span><span class=\"n\">subgoal</span><span class=\"o\">):</span>\n<span class=\"w\"> </span><span class=\"n\">1.</span><span class=\"w\"> </span><span class=\"n\">⋀sig</span><span class=\"w\"> </span><span class=\"n\">M</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"w\"> </span><span class=\"n\">fl</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">xa.</span>\n<span class=\"w\">       </span><span class=\"n\">xa</span><span class=\"w\"> </span><span class=\"n\">&lt;</span><span class=\"w\"> </span><span class=\"n\">length</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">⟹</span>\n<span class=\"w\">       </span><span class=\"n\">size_cform</span><span class=\"w\"> </span><span class=\"n\">sig</span><span class=\"w\"> </span><span class=\"n\">M</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">fl</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"n\">xa</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">&lt;</span><span class=\"w\"> </span><span class=\"n\">Suc</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">sig</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">size_list</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">size_cform</span><span class=\"w\"> </span><span class=\"n\">sig</span><span class=\"w\"> </span><span class=\"n\">M</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">fl</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>I expect to be able to use a lemma saying each item in the list has smaller size than the whole list. I tried \" sledgehammer(add:cform.size(5) Groups_List.monoid_add_class.size_list_conv_sum_list)\" but it finds nothing. I expect this to be a common pattern, what do people do for this?</p>",
        "id": 479849931,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1730371856
    },
    {
        "content": "<p>I can try fix ... assume... show... Let me see how it goes...</p>",
        "id": 479850499,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1730372045
    },
    {
        "content": "<p>have \"size_cform sig M (fl ! xa) ≤ size_list (size_cform sig M) fl\"<br>\n      using Groups_List.monoid_add_class.size_list_conv_sum_list<br>\n      sledgehammer<br>\nfound no proof. I think I need help here.</p>",
        "id": 479851127,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1730372264
    },
    {
        "content": "<p>First: most theorems in Isabelle are written with ?x ∈ set ?xs instead of list, so searching for a useful lemma requires to try both.<br>\n~&gt; size_list_estimation' is helpful here</p>",
        "id": 479879915,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1730381963
    },
    {
        "content": "<p>Second: there is an issue in the lemma, which explains why sledgehammer cannot prove it. Either you can see it or you will find when proving:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"s\">‹... ⟹ ...›</span>\n<span class=\"w\">  </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">size_list_estimation'</span><span class=\"o\">[</span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"s\">‹fl ! xa›</span><span class=\"w\"> </span><span class=\"n\">fl</span><span class=\"w\"> </span><span class=\"s\">‹size_cform sig M (fl ! xa)›</span><span class=\"w\">  </span><span class=\"s\">‹size_cform sig M›</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">OF</span><span class=\"w\"> </span><span class=\"n\">nth_mem</span><span class=\"o\">]</span>\n<span class=\"w\">  </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">auto</span>\n</code></pre></div>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<p>Is the nth well-formed?</p>\n</div></div>",
        "id": 479880403,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1730382096
    },
    {
        "content": "<p>Maybe rewriting the forall as <code>∀(x,y) ∈ set (zip vl fl). csatis sig M x y</code> helps</p>",
        "id": 479881789,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1730382472
    },
    {
        "content": "<p>I just saw that! But why it is giving xa &lt; length x instead of fl? I expect the generated goal for my definition to have the pre-condition xa &lt; length fl.</p>",
        "id": 479882109,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1730382549
    },
    {
        "content": "<p>My definition says  <code> (∀i. i &lt; length vl ⟶ csatis sig M (vl ! i) (fl ! i)))</code>.</p>",
        "id": 479882203,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1730382582
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"233198\">Mathias Fleury</span> <a href=\"#narrow/channel/238552-Beginner-Questions/topic/Syntax.20for.20proving.20termination.20of.20this.20recursive.20predicate/near/479881789\">said</a>:</p>\n<blockquote>\n<p>Maybe rewriting the forall as <code>∀(x,y) ∈ set (zip vl fl). csatis sig M x y</code> helps</p>\n</blockquote>\n<p>Does it mean editing the definition in terms of zip?</p>",
        "id": 479882472,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1730382650
    },
    {
        "content": "<p>Or is it possible within the goal?</p>",
        "id": 479882988,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1730382795
    },
    {
        "content": "<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>full</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<p>lemma csatis_termination_helper: ‹(ac, bc) ∈ set (zip x fl) ⟹ size bc &lt; Suc (size_list size fl)›<br>\n  apply (induction fl arbitrary: x)<br>\n  subgoal by auto<br>\n  subgoal for x fl xs<br>\n    by (meson Suc_n_not_le_n in_set_zipE linorder_le_less_linear size_list_estimation')<br>\n  done</p>\n<p>lemma wf_size_csatis: \"wf {((a, b, c, d), e, f, g, h). size d &lt; size h}\"<br>\n  unfolding wfP_wf_eq[symmetric]<br>\n  by (rule wfP_if_convertible_to_nat[of _ ‹λ(a, b, c, d). size d›])<br>\n   auto</p>\n<p>function csatis :: \"('m set × ('m ⇒ nat)) × 'p set ⇒ 'a set × ('m ⇒ 'a list ⇒ bool) × ('p ⇒ 'a ⇒ bool) ⇒<br>\n              'a ⇒ ('m,'p) cform ⇒ bool\"<br>\n  where<br>\n   \"csatis sig M w cFALSE ⟷ False\"<br>\n | \"csatis sig M w (cVAR p) ⟷ p ∈ props sig ∧ w ∈ world M ∧ valt M p w\"<br>\n | \"csatis sig M w (cDISJ f1 f2) = (csatis sig M w f1 ∨ csatis sig M w f2)\"<br>\n | \"csatis sig M w (cNOT f) = (w ∈ world M  ∧ ¬ csatis sig M w f)\"<br>\n | \"csatis sig M w (cDIAM m fl) =<br>\n   (m ∈ mops sig ∧ marity sig m = length fl ∧<br>\n     w ∈ world M ∧ (∃vl. length vl = length fl ∧ rel M m (w # vl) ∧<br>\n     (∀(x,y) ∈ set (zip vl fl). csatis sig M x y)))\"<br>\n apply auto<br>\n  using cform.exhaust by blast<br>\ntermination<br>\n  by (relation ‹{((a,b,c,d),e,f,g,h). size d &lt; size h}›)<br>\n    (auto simp: csatis_termination_helper wf_size_csatis)</p>\n</div></div>",
        "id": 479883840,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1730383015
    },
    {
        "content": "<p>If I edit the definition it will give me a provable goal. But I think I like the original one better. Does it seem possible to keep the original definition? Otherwise I should prove the original version as derived.</p>",
        "id": 479883868,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1730383025
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"n\">goal</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">5</span><span class=\"w\"> </span><span class=\"n\">subgoals</span><span class=\"o\">):</span>\n<span class=\"w\"> </span><span class=\"n\">1.</span><span class=\"w\"> </span><span class=\"n\">wf</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">R</span>\n<span class=\"w\"> </span><span class=\"n\">2.</span><span class=\"w\"> </span><span class=\"n\">⋀sig</span><span class=\"w\"> </span><span class=\"n\">M</span><span class=\"w\"> </span><span class=\"n\">w</span><span class=\"w\"> </span><span class=\"n\">f1</span><span class=\"w\"> </span><span class=\"n\">f2.</span><span class=\"w\"> </span><span class=\"o\">((</span><span class=\"n\">sig</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">M</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">w</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">f1</span><span class=\"o\">),</span><span class=\"w\"> </span><span class=\"n\">sig</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">M</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">w</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">cDISJ</span><span class=\"w\"> </span><span class=\"n\">f1</span><span class=\"w\"> </span><span class=\"n\">f2</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">∈</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">R</span>\n<span class=\"w\"> </span><span class=\"n\">3.</span><span class=\"w\"> </span><span class=\"n\">⋀sig</span><span class=\"w\"> </span><span class=\"n\">M</span><span class=\"w\"> </span><span class=\"n\">w</span><span class=\"w\"> </span><span class=\"n\">f1</span><span class=\"w\"> </span><span class=\"n\">f2.</span><span class=\"w\"> </span><span class=\"o\">((</span><span class=\"n\">sig</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">M</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">w</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">f2</span><span class=\"o\">),</span><span class=\"w\"> </span><span class=\"n\">sig</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">M</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">w</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">cDISJ</span><span class=\"w\"> </span><span class=\"n\">f1</span><span class=\"w\"> </span><span class=\"n\">f2</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">∈</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">R</span>\n<span class=\"w\"> </span><span class=\"n\">4.</span><span class=\"w\"> </span><span class=\"n\">⋀sig</span><span class=\"w\"> </span><span class=\"n\">M</span><span class=\"w\"> </span><span class=\"n\">w</span><span class=\"w\"> </span><span class=\"n\">f.</span><span class=\"w\"> </span><span class=\"o\">((</span><span class=\"n\">sig</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">M</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">w</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"o\">),</span><span class=\"w\"> </span><span class=\"n\">sig</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">M</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">w</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">cNOT</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">∈</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">R</span>\n<span class=\"w\"> </span><span class=\"n\">5.</span><span class=\"w\"> </span><span class=\"n\">⋀sig</span><span class=\"w\"> </span><span class=\"n\">M</span><span class=\"w\"> </span><span class=\"n\">w</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"w\"> </span><span class=\"n\">fl</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">xa</span><span class=\"w\"> </span><span class=\"n\">xb.</span>\n<span class=\"w\">       </span><span class=\"o\">(</span><span class=\"n\">xa</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">xb</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">∈</span><span class=\"w\"> </span><span class=\"n\">list.set</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">zip</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">fl</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">⟹</span><span class=\"w\"> </span><span class=\"o\">((</span><span class=\"n\">sig</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">M</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">xa</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">xb</span><span class=\"o\">),</span><span class=\"w\"> </span><span class=\"n\">sig</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">M</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">w</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">♢m</span><span class=\"w\"> </span><span class=\"n\">fl</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">∈</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">R</span>\n</code></pre></div>",
        "id": 479883879,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1730383030
    },
    {
        "content": "<p>It would be helpful to know according to which principle does Isabelle generate the goals for termination. Seems not written down anywhere.</p>",
        "id": 479884279,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1730383126
    },
    {
        "content": "<p>I do not really know why termination is doing this. I just have learned over the years to use as few nth as possible</p>",
        "id": 479884337,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1730383141
    },
    {
        "content": "<p>I am curious, except for the generated goals, is there any other thing that nth is bad to work with?</p>",
        "id": 479884576,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1730383200
    },
    {
        "content": "<p>It is loosely documented <a href=\"https://isabelle.in.tum.de/doc/functions.pdf\">https://isabelle.in.tum.de/doc/functions.pdf</a> for user</p>",
        "id": 479884734,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1730383220
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"754515\">Yiming Xu</span> <a href=\"#narrow/channel/238552-Beginner-Questions/topic/Syntax.20for.20proving.20termination.20of.20this.20recursive.20predicate/near/479884576\">said</a>:</p>\n<blockquote>\n<p>I am curious, except for the generated goals, is there any other thing that nth is bad to work with?</p>\n</blockquote>\n<p>Generally everything that forces an order on things when the order is not relevant. Like list vs set.</p>",
        "id": 479885022,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1730383294
    },
    {
        "content": "<p>(or list vs multiset to be more accurate)</p>",
        "id": 479885093,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1730383313
    },
    {
        "content": "<p>Emmm... I am not sure if I get it. For my cases, I do need the order on the list vl and fl and they need to match up. But indeed, the point of  <code>(∀i. i &lt; length vl ⟶ csatis sig M (vl ! i) (fl ! i))</code> is just to pair things up. So the relation R cares the order, but  <code>(∀i. i &lt; length vl ⟶ csatis sig M (vl ! i) (fl ! i))</code> does not.</p>",
        "id": 479886681,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1730383683
    },
    {
        "content": "<p>I am going to try this since I feel like it may make me more comfortable. Thanks for the elaboration on this!</p>",
        "id": 479887390,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1730383881
    },
    {
        "content": "<p>Is that a better style for practical reason to write \"∀(x,y) ∈ set (zip vl fl). csatis sig M x y\" over \"∀x y. (x,y)∈ set (zip vl fl). csatis sig M x y\", or is it purely atheistical?</p>",
        "id": 479887728,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1730383989
    },
    {
        "content": "<p>On paper, I am used to the first notation (like in math proof with \"\\in \\R\"), so I usually go for the first one</p>",
        "id": 479887991,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1730384075
    },
    {
        "content": "<p>but internally they are the same</p>",
        "id": 479888006,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1730384082
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"754515\">Yiming Xu</span> <a href=\"#narrow/channel/238552-Beginner-Questions/topic/Syntax.20for.20proving.20termination.20of.20this.20recursive.20predicate/near/479886681\">said</a>:</p>\n<blockquote>\n<p>Emmm... I am not sure if I get it. For my cases, I do need the order on the list vl and fl and they need to match up. But indeed, the point of  <code>(∀i. i &lt; length vl ⟶ csatis sig M (vl ! i) (fl ! i))</code> is just to pair things up. So the relation R cares the order, but  <code>(∀i. i &lt; length vl ⟶ csatis sig M (vl ! i) (fl ! i))</code> does not.</p>\n</blockquote>\n<p>Not really right? once you paired the elements, the order in the list does not matter anymore</p>",
        "id": 479888174,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1730384135
    },
    {
        "content": "<p>It is indeed true that once I pair the elements, the order in the list does not matter anymore. It seems to be a convincing argument to avoid anything related to ordering here. We only need the order to make sure to pair a world with a formula in a way that only correct pairs are created. But once we have done the procedure of pairing, the order in the zip list does not matter anymore.</p>",
        "id": 479889766,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1730384632
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"233198\">Mathias Fleury</span> <a href=\"#narrow/channel/238552-Beginner-Questions/topic/Syntax.20for.20proving.20termination.20of.20this.20recursive.20predicate/near/479888006\">said</a>:</p>\n<blockquote>\n<p>but internally they are the same</p>\n</blockquote>\n<p>I see. That's good to know.</p>",
        "id": 479889917,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1730384672
    }
]