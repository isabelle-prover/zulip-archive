[
    {
        "content": "<p>I am currently reading TAPL and formalizing a few of the exercises in Isabelle/HOL.</p>\n<p>I am struggling to proof the following lemma:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">datatype</span> <span class=\"n\">t</span> <span class=\"o\">=</span>\n  <span class=\"n\">TTrue</span>\n  <span class=\"o\">|</span> <span class=\"n\">FFalse</span>\n  <span class=\"o\">|</span> <span class=\"n\">Zero</span>\n  <span class=\"o\">|</span> <span class=\"n\">Succ</span> <span class=\"n\">t</span>\n  <span class=\"o\">|</span> <span class=\"n\">Pred</span> <span class=\"n\">t</span>\n  <span class=\"o\">|</span> <span class=\"n\">IsZero</span> <span class=\"n\">t</span>\n  <span class=\"o\">|</span> <span class=\"n\">IfElse</span> <span class=\"n\">t</span> <span class=\"n\">t</span> <span class=\"n\">t</span> <span class=\"o\">(</span><span class=\"s\">\"If _ Then _ Else _\"</span> <span class=\"o\">[</span><span class=\"n\">85</span><span class=\"o\">,</span><span class=\"n\">85</span><span class=\"o\">,</span><span class=\"n\">85</span><span class=\"o\">]</span> <span class=\"n\">80</span><span class=\"o\">)</span>\n\n<span class=\"c\">(* 3.2.5 *)</span>\n<span class=\"k\">fun</span> <span class=\"n\">terms</span> <span class=\"o\">::</span> <span class=\"s\">\"nat ⇒ t set\"</span> <span class=\"kp\">where</span>\n<span class=\"s\">\"terms 0 = {}\"</span> <span class=\"o\">|</span>\n<span class=\"s\">\"terms (Suc n) =</span>\n<span class=\"s\">  {TTrue,FFalse,Zero}</span>\n<span class=\"s\">  ∪ {Succ t | t. t ∈ terms n} ∪ {Pred t | t. t ∈ terms n} ∪ {IsZero t | t. t ∈ terms n}</span>\n<span class=\"s\">  ∪ {IfElse t1 t2 t3 | t1 t2 t3. t2 ∈ terms n ∧ t2 ∈ terms n ∧ t3 ∈ terms n}\"</span>\n\n<span class=\"kn\">lemma</span> <span class=\"s\">\"terms n ⊆ terms (Suc n)\"</span>\n</code></pre></div>\n<p>I started the proof with</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">proof</span> <span class=\"o\">(</span><span class=\"n\">induction</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n  <span class=\"k\">case</span> <span class=\"n\">0</span>\n  <span class=\"k\">then</span> <span class=\"k\">show</span> <span class=\"o\">?</span><span class=\"k\">case</span>\n    <span class=\"k\">by</span> <span class=\"n\">simp</span>\n<span class=\"k\">next</span>\n  <span class=\"k\">case</span> <span class=\"o\">(</span><span class=\"n\">Suc</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n  <span class=\"k\">have</span> <span class=\"s\">\"⋀t. t ∈ terms (Suc n) ⟹ t ∈ terms (Suc (Suc n))\"</span>\n    <span class=\"gr\">sorry</span>\n  <span class=\"k\">then</span> <span class=\"k\">show</span> <span class=\"o\">?</span><span class=\"k\">case</span>\n    <span class=\"k\">by</span> <span class=\"n\">blast</span>\n<span class=\"k\">qed</span>\n</code></pre></div>\n<p>The solution of the exercise didn't help me either, since I cannot seem to translate it to Isabelle.</p>",
        "id": 297020238,
        "sender_full_name": "waynee95",
        "timestamp": 1662226875
    },
    {
        "content": "<p>I found a proof </p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"c\">(* 3.2.5 *)</span>\n<span class=\"k\">fun</span> <span class=\"n\">terms</span> <span class=\"o\">::</span> <span class=\"s\">\"nat ⇒ t set\"</span> <span class=\"kp\">where</span>\n<span class=\"s\">\"terms 0 = {}\"</span> <span class=\"o\">|</span>\n<span class=\"s\">\"terms (Suc n) =</span>\n<span class=\"s\">  {TTrue,FFalse,Zero}</span>\n<span class=\"s\">  ∪ {Succ t | t. t ∈ terms n} ∪ {Pred t | t. t ∈ terms n} ∪ {IsZero t | t. t ∈ terms n}</span>\n<span class=\"s\">  ∪ {IfElse t1 t2 t3 | t1 t2 t3. let termsn = terms n in t1 ∈ termsn ∧ t2 ∈ termsn ∧ t3 ∈ termsn}\"</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">succ</span><span class=\"o\">:</span> <span class=\"s\">\"Succ t ∈ terms (Suc n) ⟷ t ∈ terms n\"</span>\n  <span class=\"k\">by</span> <span class=\"o\">(</span><span class=\"n\">induction</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">auto</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">pred</span><span class=\"o\">:</span> <span class=\"s\">\"Pred t ∈ terms (Suc n) ⟷ t ∈ terms n\"</span>\n  <span class=\"k\">by</span> <span class=\"o\">(</span><span class=\"n\">induction</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">auto</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">iszero</span><span class=\"o\">:</span> <span class=\"s\">\"IsZero t ∈ terms (Suc n) ⟷ t ∈ terms n\"</span>\n  <span class=\"k\">by</span> <span class=\"o\">(</span><span class=\"n\">induction</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">auto</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">ifelse</span><span class=\"o\">:</span> <span class=\"s\">\"IfElse t1 t2 t3 ∈ terms (Suc n) ⟷ t1 ∈ terms n ∧ t2 ∈ terms n ∧ t3 ∈ terms n\"</span>\n  <span class=\"k\">by</span> <span class=\"o\">(</span><span class=\"n\">induction</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">auto</span>\n\n<span class=\"kn\">lemma</span> <span class=\"s\">\"terms n ⊆ terms (Suc n)\"</span>\n<span class=\"k\">proof</span> <span class=\"o\">(</span><span class=\"n\">induction</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n  <span class=\"k\">case</span> <span class=\"n\">0</span>\n  <span class=\"k\">then</span> <span class=\"k\">show</span> <span class=\"o\">?</span><span class=\"k\">case</span>\n    <span class=\"k\">by</span> <span class=\"n\">simp</span>\n<span class=\"k\">next</span>\n  <span class=\"k\">case</span> <span class=\"o\">(</span><span class=\"n\">Suc</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n  <span class=\"k\">have</span> <span class=\"s\">\"t ∈ terms (Suc n) ⟹ t ∈ terms (Suc (Suc n))\"</span> <span class=\"kp\">for</span> <span class=\"n\">t</span>\n  <span class=\"k\">proof</span> <span class=\"o\">(</span><span class=\"n\">induction</span> <span class=\"n\">t</span><span class=\"o\">)</span>\n    <span class=\"k\">case</span> <span class=\"o\">(</span><span class=\"n\">Succ</span> <span class=\"n\">t</span><span class=\"o\">)</span>\n    <span class=\"k\">then</span> <span class=\"k\">show</span> <span class=\"o\">?</span><span class=\"k\">case</span>\n      <span class=\"k\">using</span> <span class=\"n\">Suc.IH</span>\n      <span class=\"k\">by</span> <span class=\"o\">(</span><span class=\"n\">meson</span> <span class=\"n\">in_mono</span> <span class=\"n\">succ</span><span class=\"o\">)</span>\n  <span class=\"k\">next</span>\n    <span class=\"k\">case</span> <span class=\"o\">(</span><span class=\"n\">Pred</span> <span class=\"n\">t</span><span class=\"o\">)</span>\n    <span class=\"k\">then</span> <span class=\"k\">show</span> <span class=\"o\">?</span><span class=\"k\">case</span>\n      <span class=\"k\">using</span> <span class=\"n\">Suc.IH</span>\n      <span class=\"k\">by</span> <span class=\"o\">(</span><span class=\"n\">meson</span> <span class=\"n\">in_mono</span> <span class=\"n\">pred</span><span class=\"o\">)</span>\n  <span class=\"k\">next</span>\n    <span class=\"k\">case</span> <span class=\"o\">(</span><span class=\"n\">IsZero</span> <span class=\"n\">t</span><span class=\"o\">)</span>\n    <span class=\"k\">then</span> <span class=\"k\">show</span> <span class=\"o\">?</span><span class=\"k\">case</span>\n      <span class=\"k\">using</span> <span class=\"n\">Suc.IH</span>\n      <span class=\"k\">by</span> <span class=\"o\">(</span><span class=\"n\">meson</span> <span class=\"n\">in_mono</span> <span class=\"n\">iszero</span><span class=\"o\">)</span>\n  <span class=\"k\">next</span>\n    <span class=\"k\">case</span> <span class=\"o\">(</span><span class=\"n\">IfElse</span> <span class=\"n\">t1</span> <span class=\"n\">t2</span> <span class=\"n\">t3</span><span class=\"o\">)</span>\n    <span class=\"k\">then</span> <span class=\"k\">show</span> <span class=\"o\">?</span><span class=\"k\">case</span>\n      <span class=\"k\">using</span> <span class=\"n\">Suc.IH</span>\n      <span class=\"k\">by</span> <span class=\"o\">(</span><span class=\"n\">meson</span> <span class=\"n\">in_mono</span> <span class=\"n\">ifelse</span><span class=\"o\">)</span>\n  <span class=\"k\">qed</span> <span class=\"n\">auto</span>\n  <span class=\"k\">then</span> <span class=\"k\">show</span> <span class=\"o\">?</span><span class=\"k\">case</span>\n    <span class=\"k\">by</span> <span class=\"n\">blast</span>\n<span class=\"k\">qed</span>\n</code></pre></div>",
        "id": 297094114,
        "sender_full_name": "waynee95",
        "timestamp": 1662293800
    },
    {
        "content": "<p>I've never seen the syntax: <code>qed auto</code>. Does that just mean that <code>auto</code> gets applied to all of the remaining cases? Because the cases with explicit proofs here don't add up to all of variants in type <code>t</code>.</p>",
        "id": 297131807,
        "sender_full_name": "Alex Weisberger",
        "timestamp": 1662317740
    },
    {
        "content": "<p>That's called final proof method. You can place a proof method after a qed block and it will finish off all open subgoals. Since the remaining ones are trivial, they don't need to be explicitly handled in the qed block</p>",
        "id": 297137366,
        "sender_full_name": "waynee95",
        "timestamp": 1662322152
    }
]