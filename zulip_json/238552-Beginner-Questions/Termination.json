[
    {
        "content": "<p>Hi, sorry for long question, I have this function </p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">function</span><span class=\"w\"> </span><span class=\"n\">loop_divisor_outer</span><span class=\"w\"> </span><span class=\"o\">::</span>\n<span class=\"w\">  </span><span class=\"s\">\"'a::linorder Result × ('a::linorder, 'b) Divisor_Module_Params × 'a::linorder Termination_Condition × nat ⇒ ('a::linorder, 'b) Divisor_Module_Params\"</span>\n<span class=\"kp\">where</span>\n<span class=\"w\">  </span><span class=\"s\">\"loop_divisor_outer (r, p, t, n) =</span>\n<span class=\"s\">     (if n ≤ 0 then defer_divisor p</span>\n<span class=\"s\">      else let (n', p') = main_function (r, p, t, n) in loop_divisor_outer (r, p', t, n'))\"</span>\n<span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">pat_completeness</span><span class=\"w\"> </span><span class=\"n\">auto</span>\n</code></pre></div>\n<p>I would like to prove that it reaches an end (n = 0) proving that n' &lt; n for every iteration. i \"know\" this because in main_function i calculate n' as n' = n - length max_votes_parties, which is a non empty list. <br>\ncode for reference: </p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">main_function</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"('a::linorder Result × ('a::linorder, 'b) Divisor_Module_Params × 'a::linorder Termination_Condition × nat) ⇒</span>\n<span class=\"s\">   (nat × ('a::linorder, 'b) Divisor_Module_Params)\"</span><span class=\"w\"> </span><span class=\"kp\">where</span>\n<span class=\"s\">\"main_function (r, p, t, n::nat) =</span>\n<span class=\"s\">  (let (result, parties, indexes, s, votes, v, ps) = p;</span>\n<span class=\"s\">    (ass, rej, def) = result;</span>\n<span class=\"s\">    max_votes_parties = find_max_votes v parties</span>\n<span class=\"s\">    in</span>\n<span class=\"s\">    if max_votes_parties = [] then</span>\n<span class=\"s\">        (0, (result, parties, indexes, s, votes, v, ps))</span>\n<span class=\"s\">    else</span>\n<span class=\"s\">    if (length max_votes_parties) ≤ n then</span>\n<span class=\"s\">        let</span>\n<span class=\"s\">         n = n - length max_votes_parties;</span>\n<span class=\"s\">         res_params = loop_divisor_composition (max_votes_parties,</span>\n<span class=\"s\">                            (r, max_votes_parties, indexes, s,</span>\n<span class=\"s\">                            votes, v, ps));</span>\n<span class=\"s\">         res = fst(res_params)</span>\n<span class=\"s\">           in</span>\n<span class=\"s\">           (n, res_params)</span>\n<span class=\"s\">      else</span>\n<span class=\"s\">        let (res, seats) = divisor_module_for_tie_breaking (ass, rej, def) max_votes_parties s</span>\n<span class=\"s\">        in</span>\n<span class=\"s\">        (0, (res, parties, indexes, seats, votes, v, ps)))\"</span>\n</code></pre></div>\n<p>Isabelle cannot automatically prove that this value (n/n') will decrease until it gets to zero. That's why when I write termination for loop this way</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">termination</span>\n<span class=\"k\">proof</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">relation</span><span class=\"w\"> </span><span class=\"s\">\"measure (</span><span class=\"ss\">\\&lt;lambda&gt;</span><span class=\"s\">(_, _, _, n). n)\"</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">goal_cases</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"k\">case</span><span class=\"w\"> </span><span class=\"n\">1</span>\n<span class=\"w\">  </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"k\">case</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">auto</span>\n<span class=\"k\">next</span>\n<span class=\"w\">  </span><span class=\"k\">case</span><span class=\"w\"> </span><span class=\"n\">2</span>\n<span class=\"w\">  </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"k\">case</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">auto</span>\n<span class=\"k\">qed</span>\n</code></pre></div>\n<p>of course case 2 (when n will decrease) is not proven with auto, so I have to do it manually. what's the cleanest way to prove it? can i do some assumptions? should i start proving functions inside this? thanks in advance</p>",
        "id": 416660434,
        "sender_full_name": "Salvatore Francesco Rossetta",
        "timestamp": 1705617079
    },
    {
        "content": "<p>You should have already all the assumption in the '2' case</p>",
        "id": 416712943,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1705643702
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"233198\">Mathias Fleury</span> <a href=\"#narrow/stream/238552-Beginner-Questions/topic/Termination/near/416712943\">said</a>:</p>\n<blockquote>\n<p>You should have already all the assumption in the '2' case</p>\n</blockquote>\n<p>Do you mean my code should already work? Because at the moment there's a failed subgoal prove:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"o\">((</span><span class=\"n\">r_</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">y_</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">t_</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">xa_</span><span class=\"o\">),</span><span class=\"w\"> </span><span class=\"n\">r_</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">p_</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">t_</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">n_</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">∈</span><span class=\"w\"> </span><span class=\"n\">measure</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">λ</span><span class=\"o\">(</span><span class=\"n\">uu_</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">uu_</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">uu_</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"o\">)</span><span class=\"ow\">.</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"o\">)</span>\n<span class=\"n\">Successful</span><span class=\"w\"> </span><span class=\"n\">attempt</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">solve</span><span class=\"w\"> </span><span class=\"n\">goal</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">exported</span><span class=\"w\"> </span><span class=\"n\">rule</span><span class=\"o\">:</span>\n<span class=\"w\">  </span><span class=\"o\">(</span><span class=\"n\">¬</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">n3</span><span class=\"w\"> </span><span class=\"n\">≤</span><span class=\"w\"> </span><span class=\"n\">0</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">⟹</span>\n<span class=\"w\">  </span><span class=\"o\">(?</span><span class=\"n\">x3</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">main_function</span><span class=\"w\"> </span><span class=\"o\">(?</span><span class=\"n\">r3</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">p3</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">t3</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">n3</span><span class=\"o\">))</span><span class=\"w\"> </span><span class=\"n\">⟹</span>\n<span class=\"w\">  </span><span class=\"o\">((?</span><span class=\"n\">xa3</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">y3</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">x3</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">⟹</span>\n<span class=\"w\">  </span><span class=\"o\">((?</span><span class=\"n\">r3</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">y3</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">t3</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">xa3</span><span class=\"o\">),</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">r3</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">p3</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">t3</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">n3</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">∈</span><span class=\"w\"> </span><span class=\"n\">measure</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">λ</span><span class=\"o\">(</span><span class=\"n\">uu_</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">uu_</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">uu_</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"o\">)</span><span class=\"ow\">.</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"o\">)</span>\n<span class=\"k\">proof</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">state</span><span class=\"o\">)</span>\n<span class=\"n\">this</span><span class=\"o\">:</span>\n<span class=\"w\">  </span><span class=\"o\">((</span><span class=\"n\">r_</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">y_</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">t_</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">xa_</span><span class=\"o\">),</span><span class=\"w\"> </span><span class=\"n\">r_</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">p_</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">t_</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">n_</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">∈</span><span class=\"w\"> </span><span class=\"n\">measure</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">λ</span><span class=\"o\">(</span><span class=\"n\">uu_</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">uu_</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">uu_</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"o\">)</span><span class=\"ow\">.</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"o\">)</span>\n\n<span class=\"n\">goal</span><span class=\"o\">:</span>\n<span class=\"n\">No</span><span class=\"w\"> </span><span class=\"n\">subgoals</span><span class=\"o\">!</span>\n<span class=\"n\">Failed</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">finish</span><span class=\"w\"> </span><span class=\"k\">proof</span><span class=\"n\">⌂</span><span class=\"o\">:</span>\n<span class=\"n\">goal</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">1</span><span class=\"w\"> </span><span class=\"n\">subgoal</span><span class=\"o\">):</span>\n<span class=\"w\"> </span><span class=\"n\">1.</span><span class=\"w\"> </span><span class=\"n\">0</span><span class=\"w\"> </span><span class=\"n\">&lt;</span><span class=\"w\"> </span><span class=\"n\">n_</span><span class=\"w\"> </span><span class=\"n\">⟹</span>\n<span class=\"w\">    </span><span class=\"n\">x_</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">    </span><span class=\"o\">(</span><span class=\"k\">case</span><span class=\"w\"> </span><span class=\"n\">p_</span><span class=\"w\"> </span><span class=\"n\">of</span>\n<span class=\"w\">     </span><span class=\"o\">(</span><span class=\"n\">result</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">parties</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">indexes</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">votes</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">ps</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">⇒</span>\n<span class=\"w\">       </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">max_votes_parties</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">find_max_votes</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"w\"> </span><span class=\"n\">parties</span>\n<span class=\"w\">       </span><span class=\"kp\">in</span><span class=\"w\"> </span><span class=\"kp\">if</span><span class=\"w\"> </span><span class=\"n\">max_votes_parties</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">[]</span><span class=\"w\"> </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">0</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">result</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">parties</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">indexes</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">votes</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">ps</span><span class=\"o\">)</span>\n<span class=\"w\">          </span><span class=\"n\">else</span><span class=\"w\"> </span><span class=\"kp\">if</span><span class=\"w\"> </span><span class=\"n\">length</span><span class=\"w\"> </span><span class=\"n\">max_votes_parties</span><span class=\"w\"> </span><span class=\"n\">≤</span><span class=\"w\"> </span><span class=\"n\">n_</span>\n<span class=\"w\">               </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">n_</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">length</span><span class=\"w\"> </span><span class=\"n\">max_votes_parties;</span>\n<span class=\"w\">                        </span><span class=\"n\">res_params</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">                          </span><span class=\"n\">loop_divisor_composition</span>\n<span class=\"w\">                           </span><span class=\"o\">(</span><span class=\"n\">max_votes_parties</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">r_</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">max_votes_parties</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">indexes</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">votes</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">ps</span><span class=\"o\">)</span><span class=\"n\">;</span>\n<span class=\"w\">                        </span><span class=\"n\">res</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">fst</span><span class=\"w\"> </span><span class=\"n\">res_params</span>\n<span class=\"w\">                    </span><span class=\"kp\">in</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">res_params</span><span class=\"o\">)</span>\n<span class=\"w\">               </span><span class=\"n\">else</span><span class=\"w\"> </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">res</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">seats</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">                          </span><span class=\"n\">divisor_module_for_tie_breaking</span><span class=\"w\"> </span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"n\">max_votes_parties</span><span class=\"w\"> </span><span class=\"n\">s</span>\n<span class=\"w\">                    </span><span class=\"kp\">in</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">0</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">res</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">parties</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">indexes</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">seats</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">votes</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">ps</span><span class=\"o\">))</span><span class=\"w\"> </span><span class=\"n\">⟹</span>\n<span class=\"w\">    </span><span class=\"o\">(</span><span class=\"n\">xa_</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">y_</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">    </span><span class=\"o\">(</span><span class=\"k\">case</span><span class=\"w\"> </span><span class=\"n\">p_</span><span class=\"w\"> </span><span class=\"n\">of</span>\n<span class=\"w\">     </span><span class=\"o\">(</span><span class=\"n\">result</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">parties</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">indexes</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">votes</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">ps</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">⇒</span>\n<span class=\"w\">       </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">max_votes_parties</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">find_max_votes</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"w\"> </span><span class=\"n\">parties</span>\n<span class=\"w\">       </span><span class=\"kp\">in</span><span class=\"w\"> </span><span class=\"kp\">if</span><span class=\"w\"> </span><span class=\"n\">max_votes_parties</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">[]</span><span class=\"w\"> </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">0</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">result</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">parties</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">indexes</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">votes</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">ps</span><span class=\"o\">)</span>\n<span class=\"w\">          </span><span class=\"n\">else</span><span class=\"w\"> </span><span class=\"kp\">if</span><span class=\"w\"> </span><span class=\"n\">length</span><span class=\"w\"> </span><span class=\"n\">max_votes_parties</span><span class=\"w\"> </span><span class=\"n\">≤</span><span class=\"w\"> </span><span class=\"n\">n_</span>\n<span class=\"w\">               </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">n_</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">length</span><span class=\"w\"> </span><span class=\"n\">max_votes_parties;</span>\n<span class=\"w\">                        </span><span class=\"n\">res_params</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">                          </span><span class=\"n\">loop_divisor_composition</span>\n<span class=\"w\">                           </span><span class=\"o\">(</span><span class=\"n\">max_votes_parties</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">r_</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">max_votes_parties</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">indexes</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">votes</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">ps</span><span class=\"o\">)</span><span class=\"n\">;</span>\n<span class=\"w\">                        </span><span class=\"n\">res</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">fst</span><span class=\"w\"> </span><span class=\"n\">res_params</span>\n<span class=\"w\">                    </span><span class=\"kp\">in</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">res_params</span><span class=\"o\">)</span>\n<span class=\"w\">               </span><span class=\"n\">else</span><span class=\"w\"> </span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">res</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">seats</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">                          </span><span class=\"n\">divisor_module_for_tie_breaking</span><span class=\"w\"> </span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"n\">max_votes_parties</span><span class=\"w\"> </span><span class=\"n\">s</span>\n<span class=\"w\">                    </span><span class=\"kp\">in</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">0</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">res</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">parties</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">indexes</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">seats</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">votes</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">ps</span><span class=\"o\">))</span><span class=\"w\"> </span><span class=\"n\">⟹</span>\n<span class=\"w\">    </span><span class=\"n\">xa_</span><span class=\"w\"> </span><span class=\"n\">&lt;</span><span class=\"w\"> </span><span class=\"n\">n_</span>\n</code></pre></div>\n<p>The error is on the \"by auto\" of the second case</p>",
        "id": 416736051,
        "sender_full_name": "Salvatore Francesco Rossetta",
        "timestamp": 1705655489
    },
    {
        "content": "<p>No, I mean that there is no need to add an assumption…</p>",
        "id": 416736269,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1705655580
    },
    {
        "content": "<p>From the goal, I would try a <code>auto split: prod.splits simp: Let_def</code>… but you have not provided any context to help you much.</p>",
        "id": 416736475,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1705655668
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"233198\">Mathias Fleury</span> <a href=\"#narrow/stream/238552-Beginner-Questions/topic/Termination/near/416736269\">said</a>:</p>\n<blockquote>\n<p>No, I mean that there is no need to add an assumption…</p>\n</blockquote>\n<p>BTW, you question currently boils down to: \"How do I do  a proof?\"</p>",
        "id": 416736649,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1705655741
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"233198\">Mathias Fleury</span> <a href=\"#narrow/stream/238552-Beginner-Questions/topic/Termination/near/416736649\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"233198\">Mathias Fleury</span> <a href=\"#narrow/stream/238552-Beginner-Questions/topic/Termination/near/416736269\">said</a>:</p>\n<blockquote>\n<p>No, I mean that there is no need to add an assumption…</p>\n</blockquote>\n<p>BTW, you question currently boils down to: \"How do I do  a proof?\"</p>\n</blockquote>\n<p>Actually it's the very first time I ever try to write a proof ever, that's why I may seem confused, I still have to understand clearly all the steps to write a proof. Thanks for the help anyway</p>",
        "id": 416780077,
        "sender_full_name": "Salvatore Francesco Rossetta",
        "timestamp": 1705671645
    },
    {
        "content": "<p>Then I would suggest starting with the tutorial at: <a href=\"https://isabelle.in.tum.de/doc/prog-prove.pdf\">https://isabelle.in.tum.de/doc/prog-prove.pdf</a></p>",
        "id": 416781221,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1705672032
    },
    {
        "content": "<p>The page seem to be currently down, but in the documentation panel in Isabelle/jEdit &gt; prog-prove</p>",
        "id": 416781304,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1705672063
    }
]