[
    {
        "content": "<p>Hi all,<br>\nI am a new guy coming from Lean Prover. I want to know whether the usual way we do proving is to give all the subgoals of a proof in the form </p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"w\">  </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"s\">\"...\"</span><span class=\"w\"> </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"s\">\"...\"</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"kt\">sledgehammer</span>\n</code></pre></div>\n<p>Compare with Lean, in lean we don't need to give any subgoal of the proof, but just need to use the tactic. After using the tacitc, the remained goals or conditions will change. But when I am using Isabelle, I found that lots of example didn't give the names to these subgoals. It seems that the it has a magic to combine all the conditions and find the proofs.</p>\n<p>I want to know what is the correct way to use Isabelle. I am using it to finish the mathematical proofs in MiniF2F (IMO questions)</p>",
        "id": 462333598,
        "sender_full_name": "Chen Dongheng",
        "timestamp": 1723638000
    },
    {
        "content": "<p>Isabelle has both the structured language (Isar) and the unstructured <del>forward</del> backward reasoning (apply-style)</p>",
        "id": 462336447,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1723638998
    },
    {
        "content": "<p>the structured language is much nicer and much closer to what a human would write and a lot more readable</p>",
        "id": 462336521,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1723639027
    },
    {
        "content": "<p>Due to the structured language and the better tactics (auto is unmatched), it is less important to name any hypothesis</p>",
        "id": 462336644,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1723639082
    },
    {
        "content": "<p>because you can  usually just let auto figure it auto</p>",
        "id": 462336752,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1723639112
    },
    {
        "content": "<p>And the magic to combine all of the conditions is just unification: Anything you write with <code>show</code> inside a scope will be used to discharge what you have to prove at <code>qed</code></p>",
        "id": 462337063,
        "sender_full_name": "Fabian Huch",
        "timestamp": 1723639216
    },
    {
        "content": "<p>Thanks!!!<br>\nAnd I want to know how to use forward reasoning mode in ISAR proof. For example</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">theory</span><span class=\"w\"> </span><span class=\"n\">Scratch</span>\n<span class=\"w\">  </span><span class=\"kp\">imports</span><span class=\"w\"> </span><span class=\"n\">Complex_Main</span>\n<span class=\"w\">   </span><span class=\"s\">\"HOL-Number_Theory.Cong\"</span>\n<span class=\"k\">begin</span>\n\n<span class=\"kt\">find_theorems</span><span class=\"w\"> </span><span class=\"n\">name</span><span class=\"o\">:</span><span class=\"s\">\"mod\"</span>\n\n<span class=\"c\">(* lemma 1: Proving that for n &gt;= 2, the last two digits of 5^n are 25. *)</span>\n<span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">last_two_digits_of_5_power</span><span class=\"o\">:</span>\n<span class=\"w\">  </span><span class=\"kp\">fixes</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"n\">nat</span>\n<span class=\"w\">  </span><span class=\"kp\">shows</span><span class=\"w\"> </span><span class=\"s\">\"((5::nat)^(n + 2)) mod (100::nat) = (25::nat)\"</span>\n\n<span class=\"k\">proof</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">induction</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"k\">case</span><span class=\"w\"> </span><span class=\"n\">0</span>\n<span class=\"w\">  </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"k\">case</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">simp</span>\n<span class=\"k\">next</span>\n<span class=\"w\">  </span><span class=\"k\">case</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Suc</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"o\">)</span>\n\n<span class=\"w\">    </span><span class=\"c\">(* Calculate 5^(n+1) = 5^n * 5 *)</span>\n<span class=\"w\">    </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"n\">temp</span><span class=\"o\">:</span><span class=\"s\">\"(5^((n::nat) + 1)) = (5^n * (5::nat))\"</span>\n<span class=\"w\">      </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">auto</span>\n<span class=\"w\">    </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"s\">\"(5^(n + 1)) mod (100::nat) = (5^n * 5) mod (100::nat)\"</span>\n<span class=\"w\">      </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">temp</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">arith</span>\n\n<span class=\"w\">    </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"n\">h2</span><span class=\"o\">:</span><span class=\"s\">\"cong (5^(n + 1)) (5^n * 5) 100 \"</span>\n<span class=\"w\">    </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">metis</span><span class=\"w\"> </span><span class=\"n\">cong_refl</span><span class=\"w\"> </span><span class=\"n\">power_add</span><span class=\"w\"> </span><span class=\"n\">power_one_right</span><span class=\"o\">)</span>\n\n<span class=\"w\">  </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"n\">h0</span><span class=\"o\">:</span><span class=\"s\">\"[(25::nat) = (25*5::nat)] (mod (100::nat))\"</span>\n<span class=\"w\">    </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"n\">add</span><span class=\"o\">:</span><span class=\"n\">cong_def</span><span class=\"o\">)</span>\n\n<span class=\"w\">  </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"k\">case</span>\n<span class=\"w\">  </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">metis</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">mono_tags</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">lifting</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">Suc</span><span class=\"w\"> </span><span class=\"n\">add_2_eq_Suc'</span><span class=\"w\"> </span><span class=\"n\">cong_def</span><span class=\"w\"> </span><span class=\"n\">mod_mod_trivial</span><span class=\"w\"> </span><span class=\"n\">mod_mult_left_eq</span><span class=\"w\"> </span><span class=\"n\">power_Suc2</span><span class=\"o\">)</span>\n<span class=\"k\">qed</span>\n\n\n<span class=\"c\">(* Main theorem: We can now use the lemma to show that 5^2005 mod 100 = 25. *)</span>\n<span class=\"kn\">theorem</span><span class=\"w\"> </span><span class=\"n\">mathd_numbertheory_198</span><span class=\"o\">:</span>\n<span class=\"w\">  </span><span class=\"s\">\"(5^2005) mod 100 = (25::nat)\"</span>\n<span class=\"k\">proof</span><span class=\"w\"> </span><span class=\"o\">-</span>\n<span class=\"w\">  </span><span class=\"c\">(* Apply the lemma for n = 2005 *)</span>\n<span class=\"w\">  </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"s\">\"(5^2005) mod 100 = 25\"</span>\n<span class=\"w\">    </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">last_two_digits_of_5_power</span><span class=\"o\">[</span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">2005</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"n\">add</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">le_trans</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"c\">(* Conclude the proof *)</span>\n<span class=\"w\">  </span><span class=\"k\">thus</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">thesis</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">simp</span>\n<span class=\"k\">qed</span>\n<span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">mwe</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"⟦a = 1+1 ∧ b = 2+1 ∧ c = 3+1 ⟧ ⟹ a = 2 ∧ b = 3 ∧ c = 4\"</span>\n<span class=\"w\">  </span><span class=\"kp\">apply</span><span class=\"o\">(</span><span class=\"n\">simp</span><span class=\"o\">)</span>\n<span class=\"k\">end</span>\n</code></pre></div>\n<p>I want to know how to change this line into forward reasoning proof</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"s\">\"(5^2005) mod 100 = 25\"</span>\n<span class=\"w\">    </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">last_two_digits_of_5_power</span><span class=\"o\">[</span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">2005</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"n\">add</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">le_trans</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Thanks!</p>",
        "id": 462360818,
        "sender_full_name": "Chen Dongheng",
        "timestamp": 1723646698
    },
    {
        "content": "<p>I consider simp to be forward and backward reasoning, as it only applies rewriting.</p>",
        "id": 462361251,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1723646848
    },
    {
        "content": "<p>Why don't like that proof?</p>",
        "id": 462361283,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1723646861
    },
    {
        "content": "<p>or to say it differently, what you expect in Lean?</p>",
        "id": 462361394,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1723646889
    },
    {
        "content": "<p>Ah I see there was a typo in my earlier message: isar is forward (you start with the assumption and go to the goal) while apply is backward (you go from the goal back to things that are true)</p>",
        "id": 462361634,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1723646976
    },
    {
        "content": "<p>Oh, when I try to write apply-style proof, I often met the error </p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"n\">Illegal</span><span class=\"w\"> </span><span class=\"n\">application</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"k\">proof</span><span class=\"w\"> </span><span class=\"n\">command</span><span class=\"w\"> </span><span class=\"kp\">in</span><span class=\"w\"> </span><span class=\"s\">\"state\"</span><span class=\"w\"> </span><span class=\"n\">mode</span>\n</code></pre></div>\n<p>I would like to know how many modes are there in Isabelle, and how to change the mode. I just find a easy example to learn how to switch the mode.</p>",
        "id": 462370301,
        "sender_full_name": "Chen Dongheng",
        "timestamp": 1723649647
    },
    {
        "content": "<p>By default (after lemma / have / show / ...) you are in apply mode</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">mwe</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"⟦a = 1+1 ∧ b = 2+1 ∧ c = 3+1 ⟧ ⟹ a = 2 ∧ b = 3 ∧ c = 4\"</span>\n<span class=\"w\">  </span><span class=\"kp\">apply</span><span class=\"o\">(</span><span class=\"n\">simp</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"k\">done</span>\n</code></pre></div>\n<p>and with <code>proof</code> you switch to Isar mode</p>",
        "id": 462370624,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1723649756
    },
    {
        "content": "<p>I suggest reading a tutorial on Isabelle like the prog-prove, available in the documentation panel of Isabelle/jEdit</p>",
        "id": 462370796,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1723649807
    },
    {
        "content": "<p>OK! Thanks. I have read that book, but I didn't get this point.</p>",
        "id": 462370882,
        "sender_full_name": "Chen Dongheng",
        "timestamp": 1723649843
    }
]