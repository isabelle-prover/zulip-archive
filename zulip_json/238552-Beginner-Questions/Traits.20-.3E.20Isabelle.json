[
    {
        "content": "<p>I want to model the following Rust code, but in Isabelle:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Ballot</span><span class=\"o\">&lt;</span><span class=\"n\">A</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">fn</span> <span class=\"nf\">on_options</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Set</span><span class=\"o\">&lt;</span><span class=\"n\">A</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">fn</span> <span class=\"nf\">prefers</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">a</span>: <span class=\"nc\">A</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">b</span>: <span class=\"nc\">A</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">bool</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"c1\">// assumes reflexivity, etc</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">struct</span> <span class=\"nc\">Profile</span><span class=\"o\">&lt;</span><span class=\"n\">A</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">T</span>: <span class=\"nc\">Ballot</span><span class=\"o\">&lt;</span><span class=\"n\">A</span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">ballots</span>: <span class=\"nc\">List</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>I tried to do it with typeclasses, but I think I'm on the wrong path:</p>\n<div class=\"codehilite\"><pre><span></span><code>class ballot =\n  fixes on_options :: &quot;&#39;a set&quot;\n  fixes prefers :: &quot;&#39;a ⇒ &#39;a ⇒ bool&quot;\n  assumes (* ... *)\n</code></pre></div>\n<p>Help?</p>",
        "id": 249023486,
        "sender_full_name": "Max Nowak",
        "timestamp": 1628623191
    },
    {
        "content": "<p>It depends what you are trying to achieve:</p>\n<ul>\n<li>if you intend to do that for a single problem, then I would use locales instead of classes.</li>\n<li>if you are trying to do that for arbitrary Rust programs, then locales will not work (or you need to generate them programatically and I don't believe that will scale) .</li>\n</ul>",
        "id": 249333002,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1628841628
    },
    {
        "content": "<p>Yeah it's intended for a conrete problem, not an arbitrary Rust program. Thank you!</p>",
        "id": 249343999,
        "sender_full_name": "Max Nowak",
        "timestamp": 1628850383
    }
]