[
    {
        "content": "<p>Problem:<br>\n<a href=\"/user_uploads/14278/dajooSX8AYrkqRcaPGAM_2OF/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/14278/dajooSX8AYrkqRcaPGAM_2OF/image.png\" title=\"image.png\"><img data-original-dimensions=\"2138x1064\" src=\"/user_uploads/thumbnail/14278/dajooSX8AYrkqRcaPGAM_2OF/image.png/840x560.webp\"></a></div>",
        "id": 469917115,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1726221239
    },
    {
        "content": "<p>Code:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">datatype</span><span class=\"w\"> </span><span class=\"n\">form</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">VAR</span><span class=\"w\"> </span><span class=\"s\">\"num\"</span>\n<span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">FALSE</span>\n<span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">DISJ</span><span class=\"w\"> </span><span class=\"s\">\"form\"</span><span class=\"w\"> </span><span class=\"s\">\"form\"</span>\n<span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">NOT</span><span class=\"w\"> </span><span class=\"s\">\"form\"</span>\n<span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">DIAM</span><span class=\"w\"> </span><span class=\"s\">\"form\"</span>\n\n<span class=\"k\">record</span><span class=\"w\"> </span><span class=\"n n-Type\">'a</span><span class=\"w\"> </span><span class=\"n\">frame</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">  </span><span class=\"n\">world</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"'a ⇒ bool\"</span>\n<span class=\"w\">  </span><span class=\"n\">rel</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"'a ⇒ 'a ⇒ bool\"</span>\n\n\n<span class=\"k\">record</span><span class=\"w\"> </span><span class=\"n n-Type\">'a</span><span class=\"w\"> </span><span class=\"n\">model</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"'a frame\"</span><span class=\"w\"> </span><span class=\"o\">+</span>\n<span class=\"w\">  </span><span class=\"n\">valt</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"num ⇒ 'a ⇒ bool\"</span>\n\n<span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">satis</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"'a model ⇒ 'a ⇒ form ⇒ bool\"</span>\n<span class=\"kp\">where</span>\n<span class=\"s\">\"satis M w (VAR p) ⟷ (valt M p w ∧ world M w)\"</span>\n<span class=\"o\">|</span><span class=\"w\"> </span><span class=\"s\">\"satis M w FALSE ⟷ False\"</span>\n<span class=\"o\">|</span><span class=\"w\"> </span><span class=\"s\">\"satis M w (NOT f) ⟷ world M w ∧ ¬ satis M w f\"</span>\n<span class=\"o\">|</span><span class=\"w\"> </span><span class=\"s\">\"satis M w (DISJ f1 f2) ⟷ satis M w f1 ∨ satis M w f2\"</span>\n<span class=\"o\">|</span><span class=\"w\"> </span><span class=\"s\">\"satis M w (DIAM f) ⟷ world M w ∧ (∃ v. rel M w v ∧ world M v ∧ satis M v f)\"</span>\n\n\n<span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">satis_in_worlds</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"satis M w f ⟹ world M w\"</span>\n<span class=\"k\">proof</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">induct</span><span class=\"w\"> </span><span class=\"n\">rule</span><span class=\"o\">:</span><span class=\"n\">form.induct</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"k\">case</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">DISJ</span><span class=\"w\"> </span><span class=\"n\">x1a</span><span class=\"w\"> </span><span class=\"n\">x2</span><span class=\"o\">)</span>\n<span class=\"w\"> </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"k\">case</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">auto</span><span class=\"w\"> </span><span class=\"c\">(* not sure if this works, but auto is roughly simp + blast *)</span>\n<span class=\"k\">next</span>\n<span class=\"w\">  </span><span class=\"k\">case</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">DIAM</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"k\">case</span>\n<span class=\"w\">  </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">fastforce</span>\n<span class=\"k\">qed</span><span class=\"w\"> </span><span class=\"n\">simp_all</span>\n\n<span class=\"k\">definition</span><span class=\"w\"> </span><span class=\"n\">BOX_def</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"BOX f = NOT (DIAM (NOT f))\"</span>\n\n<span class=\"k\">definition</span><span class=\"w\"> </span><span class=\"n\">AND_def</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"AND f1 f2 = NOT (DISJ (NOT f1) (NOT f2))\"</span>\n\n<span class=\"k\">definition</span><span class=\"w\"> </span><span class=\"n\">TRUE_def</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"TRUE = NOT FALSE\"</span>\n\n<span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">subst</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"(num ⇒ form) ⇒ form ⇒ form\"</span>\n<span class=\"w\">  </span><span class=\"kp\">where</span>\n<span class=\"w\">   </span><span class=\"s\">\"subst s FALSE = FALSE\"</span>\n<span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"s\">\"subst s (VAR p) = s p\"</span>\n<span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"s\">\"subst s (DISJ f1 f2) = DISJ (subst s f1) (subst s f2)\"</span>\n<span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"s\">\"subst s (NOT f) = NOT (subst s f)\"</span>\n<span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"s\">\"subst s (DIAM f) = DIAM (subst s f)\"</span>\n\n<span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">subst_BOX</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"subst f (BOX form) = BOX (subst f form)\"</span>\n<span class=\"w\">  </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"n\">add</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">BOX_def</span><span class=\"o\">)</span>\n\n<span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">satis_AND</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"satis M w (AND f1 f2) ⟷ satis M w f1 ∧ satis M w f2\"</span>\n<span class=\"k\">proof</span><span class=\"w\"> </span><span class=\"o\">-</span>\n<span class=\"w\">  </span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">thesis</span><span class=\"w\"> </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"n\">add</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">AND_def</span><span class=\"o\">)</span>\n<span class=\"w\">    </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">meson</span><span class=\"w\"> </span><span class=\"n\">satis_in_worlds</span><span class=\"o\">)</span>\n<span class=\"k\">qed</span>\n\n<span class=\"k\">definition</span><span class=\"w\"> </span><span class=\"n\">satis_set_def</span><span class=\"w\"> </span><span class=\"o\">:</span>\n<span class=\"s\">\"satis_set M w Σ ≡ (⋀a. a ∈ Σ ⟹ satis M w a)\"</span>\n\n<span class=\"c\">(*</span>\n\n<span class=\"c\">val demodalize_def = Define`</span>\n<span class=\"c\">demodalize FALSE = FALSE /\\</span>\n<span class=\"c\">demodalize (VAR p) = VAR p /\\</span>\n<span class=\"c\">demodalize (DISJ form1 form2) = DISJ (demodalize form1) (demodalize form2) /\\</span>\n<span class=\"c\">demodalize (NOT form) = NOT (demodalize form) /\\</span>\n<span class=\"c\">demodalize (DIAM form) = demodalize form`;</span>\n\n<span class=\"c\">*)</span>\n\n<span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">demodalize</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"form ⇒ form\"</span>\n<span class=\"w\">  </span><span class=\"kp\">where</span>\n<span class=\"w\">    </span><span class=\"s\">\"demodalize FALSE = FALSE\"</span>\n<span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"s\">\"demodalize (VAR p) = VAR p\"</span>\n<span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"s\">\"demodalize (DISJ form1 form2) = DISJ (demodalize form1) (demodalize form2)\"</span>\n<span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"s\">\"demodalize (NOT form) = NOT (demodalize form)\"</span>\n<span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"s\">\"demodalize (DIAM form) = demodalize form\"</span>\n\n<span class=\"kt\">thm</span><span class=\"w\"> </span><span class=\"n\">HOL.eq_reflection</span>\n\n<span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">propform</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"form ⇒ bool\"</span>\n<span class=\"w\">  </span><span class=\"kp\">where</span>\n<span class=\"w\">   </span><span class=\"s\">\"propform FALSE = True\"</span>\n<span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"s\">\"propform (VAR p) = True\"</span>\n<span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"s\">\"propform (DISJ f1 f2) = (propform f1 ∧ propform f2)\"</span>\n<span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"s\">\"propform (NOT f) = propform f\"</span>\n<span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"s\">\"propform (DIAM f) = False\"</span>\n\n<span class=\"k\">definition</span><span class=\"w\"> </span><span class=\"n\">IMP_def</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"IMP f1 f2 = DISJ (NOT f1) f2\"</span>\n\n<span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">peval</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"(num ⇒ bool) ⇒ form ⇒ bool\"</span><span class=\"w\"> </span><span class=\"kp\">where</span>\n<span class=\"w\">   </span><span class=\"s\">\"peval σ (VAR p) = σ p\"</span>\n<span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"s\">\"peval σ (DISJ f1 f2) = (peval σ f1 ∨ peval σ f2)\"</span>\n<span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"s\">\"peval σ FALSE = False\"</span>\n<span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"s\">\"peval σ (NOT f) = (¬ peval σ f)\"</span>\n<span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"s\">\"peval σ (DIAM f) = False\"</span>\n\n<span class=\"k\">definition</span><span class=\"w\"> </span><span class=\"n\">ptaut_def</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"ptaut f ⟷ propform f ∧ (∀σ. peval σ f)\"</span>\n\n<span class=\"k\">inductive</span><span class=\"w\"> </span><span class=\"n\">Kproof</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"form list ⇒ bool\"</span><span class=\"w\"> </span><span class=\"kp\">where</span>\n<span class=\"w\">   </span><span class=\"s\">\"Kproof []\"</span>\n<span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"s\">\"Kproof p ∧ List.member p (IMP f1 f2) ∧ List.member p f1 ⟹ Kproof (p @ [f2])\"</span>\n<span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"s\">\"Kproof p ∧ List.member p f ⟹ Kproof (p @ [subst σ f])\"</span>\n<span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"s\">\"Kproof p ∧ List.member p f ⟹ Kproof (p @ [BOX f])\"</span>\n<span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"s\">\"Kproof p ⟹ Kproof (p @ [IMP (BOX (IMP form1 form2)) (IMP (BOX form1) (BOX form2))])\"</span>\n<span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"s\">\"Kproof p ⟹  Kproof (p @ [IMP (DIAM form) (NOT (BOX (NOT form)))])\"</span>\n<span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"s\">\"Kproof p ∧ ptaut f ⟹ Kproof (p @ [f])\"</span>\n\n\n\n\n<span class=\"kt\">value</span><span class=\"w\"> </span><span class=\"s\">\"demodalize (IMP (BOX (IMP form1 form2)) (IMP (BOX form1) (BOX form2)))\"</span>\n\n<span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">demodalize_IMP</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"demodalize (IMP f1 f2) = IMP (demodalize f1) (demodalize f2)\"</span>\n<span class=\"k\">proof</span><span class=\"w\"> </span><span class=\"o\">-</span>\n<span class=\"w\">  </span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">thesis</span>\n<span class=\"w\">  </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"n\">add</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">IMP_def</span><span class=\"o\">)</span>\n<span class=\"k\">qed</span>\n\n<span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">ptaut_MP</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kp\">assumes</span><span class=\"w\"> </span><span class=\"n\">a1</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"ptaut (IMP f1 f2)\"</span><span class=\"w\"> </span><span class=\"kp\">and</span><span class=\"w\"> </span><span class=\"n\">a2</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"ptaut f1\"</span><span class=\"w\"> </span><span class=\"kp\">shows</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"ptaut f2\"</span>\n<span class=\"k\">proof</span><span class=\"w\"> </span><span class=\"o\">-</span>\n<span class=\"w\">  </span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">thesis</span><span class=\"w\"> </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">a1</span><span class=\"w\"> </span><span class=\"n\">a2</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"n\">add</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">IMP_def</span><span class=\"w\"> </span><span class=\"n\">ptaut_def</span><span class=\"o\">)</span>\n<span class=\"k\">qed</span>\n\n<span class=\"kt\">find_theorems</span><span class=\"w\"> </span><span class=\"s\">\"List.member (a @ [b])\"</span>\n\n\n\n\n<span class=\"k\">definition</span><span class=\"w\"> </span><span class=\"n\">valid_frame_state_def</span><span class=\"o\">:</span>\n<span class=\"s\">\"valid_frame_state Fr w phi ≡ (⋀M. frame.truncate M = Fr ⟹ satis M w phi)\"</span>\n\n\n<span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">propform_demodalize</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"propform (demodalize f)\"</span>\n<span class=\"w\">  </span><span class=\"gr\">sorry</span>\n\n<span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">demodalize_subst</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"demodalize (subst f form) = demodalize (subst f (demodalize form))\"</span>\n<span class=\"w\">  </span><span class=\"gr\">sorry</span>\n\n<span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">peval_demodalize_subst_eq</span><span class=\"o\">:</span>\n<span class=\"w\">    </span><span class=\"s\">\"propform form ⟹</span>\n<span class=\"s\">     (peval σ (demodalize (subst f form))</span>\n<span class=\"s\">    ≡ peval (peval σ o demodalize o f) form)\"</span>\n<span class=\"k\">proof</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">induct</span><span class=\"w\"> </span><span class=\"n\">rule</span><span class=\"o\">:</span><span class=\"n\">form.induct</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"k\">qed</span><span class=\"w\"> </span><span class=\"n\">simp_all</span>\n\n<span class=\"c\">(*</span>\n<span class=\"c\">lemma peval_demodalize_subst_eq :</span>\n<span class=\"c\"> \" propform form ⟹</span>\n<span class=\"c\">  (peval σ (demodalize (subst f form)) \\&lt;equiv&gt; peval (peval σ o demodalize o f) form)\"</span>\n<span class=\"c\">  sorry*)</span>\n<span class=\"kt\">thm</span><span class=\"w\"> </span><span class=\"n\">disjE</span>\n\n<span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">demodalize_BOX</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"demodalize (BOX form) = NOT (NOT (demodalize form))\"</span>\n<span class=\"w\">  </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"n\">add</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">BOX_def</span><span class=\"o\">)</span>\n\n<span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">peval_not_not</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"peval σ (NOT (NOT f)) = peval σ f\"</span>\n<span class=\"w\">  </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">simp</span>\n\n<span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">ptaut_not_not</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"ptaut f ⟹ ptaut (NOT (NOT f))\"</span>\n<span class=\"w\">  </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"n\">add</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">ptaut_def</span><span class=\"o\">)</span>\n\n\n<span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">demodalize_ax1_ptaut</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"ptaut (demodalize (IMP (BOX (IMP form1 form2)) (IMP (BOX form1) (BOX form2))))\"</span>\n<span class=\"k\">proof</span><span class=\"w\"> </span><span class=\"o\">-</span>\n<span class=\"w\">  </span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">thesis</span><span class=\"w\"> </span><span class=\"k\">unfolding</span><span class=\"w\"> </span><span class=\"n\">ptaut_def</span><span class=\"w\"> </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"n\">add</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">propform_demodalize</span><span class=\"o\">)</span>\n<span class=\"w\">    </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"n\">add</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">IMP_def</span><span class=\"w\"> </span><span class=\"n\">demodalize_BOX</span><span class=\"o\">)</span>\n<span class=\"k\">qed</span>\n\n<span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">demodalize_ax2_ptaut</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"ptaut (demodalize (IMP (DIAM form) (NOT (BOX (NOT form)))))\"</span>\n<span class=\"k\">proof</span><span class=\"w\"> </span><span class=\"o\">-</span>\n<span class=\"w\">  </span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">thesis</span><span class=\"w\"> </span><span class=\"k\">unfolding</span><span class=\"w\"> </span><span class=\"n\">ptaut_def</span><span class=\"w\"> </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"n\">add</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">propform_demodalize</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"n\">add</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">IMP_def</span><span class=\"w\"> </span><span class=\"n\">demodalize_BOX</span><span class=\"o\">)</span>\n<span class=\"k\">qed</span>\n\n<span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">demodalize_ax3_ptaut</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"ptaut (demodalize (IMP (NOT (BOX (NOT form))) (DIAM form)))\"</span>\n<span class=\"k\">proof</span><span class=\"w\"> </span><span class=\"o\">-</span>\n<span class=\"w\">  </span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">thesis</span><span class=\"w\"> </span><span class=\"k\">unfolding</span><span class=\"w\"> </span><span class=\"n\">ptaut_def</span><span class=\"w\"> </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"n\">add</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">propform_demodalize</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"n\">add</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">IMP_def</span><span class=\"w\"> </span><span class=\"n\">demodalize_BOX</span><span class=\"o\">)</span>\n<span class=\"k\">qed</span>\n\n\n\n<span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">exercise_1_6_2</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"Kproof p ⟹ List.member p f ⟹ ptaut (demodalize f)\"</span>\n<span class=\"k\">proof</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">induction</span><span class=\"w\"> </span><span class=\"n\">arbitrary</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"n\">rule</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Kproof.induct</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"k\">case</span><span class=\"w\"> </span><span class=\"n\">1</span>\n<span class=\"w\">  </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"k\">case</span>\n<span class=\"w\">  </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">member_rec</span><span class=\"o\">(</span><span class=\"n\">2</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">force</span>\n<span class=\"k\">next</span>\n<span class=\"w\">  </span><span class=\"k\">case</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"o\">:(</span><span class=\"n\">2</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"n\">f1</span><span class=\"w\"> </span><span class=\"n\">f2</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"k\">hence</span><span class=\"w\"> </span><span class=\"n\">a1</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"List.member p f ∨ f = f2\"</span>\n<span class=\"w\">    </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">metis</span><span class=\"w\"> </span><span class=\"n\">in_set_member</span><span class=\"w\"> </span><span class=\"n\">rotate1.simps</span><span class=\"o\">(</span><span class=\"n\">2</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">set_ConsD</span><span class=\"w\"> </span><span class=\"n\">set_rotate1</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"k\">then</span>\n<span class=\"w\">  </span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"k\">case</span>\n<span class=\"w\">    </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">metis</span><span class=\"w\"> </span><span class=\"n\">a.IH</span><span class=\"w\"> </span><span class=\"n\">demodalize_IMP</span><span class=\"w\"> </span><span class=\"n\">ptaut_MP</span><span class=\"o\">)</span>\n<span class=\"k\">next</span>\n<span class=\"w\">  </span><span class=\"k\">case</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">3</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"n\">σ</span><span class=\"w\"> </span><span class=\"n\">g</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"k\">hence</span><span class=\"w\"> </span><span class=\"n\">a1</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"List.member p g ∨ g = subst σ f\"</span>\n<span class=\"w\">   </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">metis</span><span class=\"w\"> </span><span class=\"n\">member_def</span><span class=\"w\"> </span><span class=\"n\">rotate1.simps</span><span class=\"o\">(</span><span class=\"n\">2</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">set_ConsD</span><span class=\"w\"> </span><span class=\"n\">set_rotate1</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"k\">case</span><span class=\"w\"> </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">rule</span><span class=\"w\"> </span><span class=\"n\">disjE</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">OF</span><span class=\"w\"> </span><span class=\"s\">\"a1\"</span><span class=\"o\">])</span><span class=\"w\"> </span><span class=\"gr\">sorry</span>\n\n<span class=\"k\">next</span>\n<span class=\"w\">  </span><span class=\"k\">case</span><span class=\"w\"> </span><span class=\"n\">c4</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">4</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"n\">f0</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"k\">hence</span><span class=\"w\"> </span><span class=\"n\">a2</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"List.member p f ∨ f = BOX f0\"</span>\n<span class=\"w\">  </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">metis</span><span class=\"w\"> </span><span class=\"n\">in_set_member</span><span class=\"w\"> </span><span class=\"n\">rotate1.simps</span><span class=\"o\">(</span><span class=\"n\">2</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">set_ConsD</span><span class=\"w\"> </span><span class=\"n\">set_rotate1</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"k\">case</span><span class=\"w\"> </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">rule</span><span class=\"w\"> </span><span class=\"n\">disjE</span><span class=\"o\">[</span><span class=\"n\">OF</span><span class=\"w\"> </span><span class=\"s\">\"a2\"</span><span class=\"o\">])</span>\n<span class=\"w\">  </span><span class=\"k\">proof</span><span class=\"w\"> </span><span class=\"o\">-</span>\n<span class=\"w\">    </span><span class=\"k\">assume</span><span class=\"w\"> </span><span class=\"n\">dj1</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"List.member p f\"</span><span class=\"w\"> </span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"k\">case</span><span class=\"w\"> </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">c4</span><span class=\"w\"> </span><span class=\"n\">dj1</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">simp</span>\n<span class=\"w\">  </span><span class=\"k\">next</span>\n<span class=\"w\">    </span><span class=\"k\">assume</span><span class=\"w\"> </span><span class=\"n\">dj2</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"f = BOX f0\"</span>\n<span class=\"w\">    </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"s\">\"ptaut (demodalize f0)\"</span><span class=\"w\"> </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">c4</span><span class=\"w\"> </span><span class=\"n\">dj2</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">blast</span>\n<span class=\"w\">    </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"k\">case</span><span class=\"w\"> </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">dj2</span>\n<span class=\"w\">      </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"n\">add</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">demodalize_BOX</span><span class=\"w\"> </span><span class=\"n\">ptaut_not_not</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"k\">qed</span>\n<span class=\"k\">next</span>\n<span class=\"w\">  </span><span class=\"k\">case</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">5</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"n\">form1</span><span class=\"w\"> </span><span class=\"n\">form2</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"k\">case</span><span class=\"w\"> </span><span class=\"gr\">sorry</span>\n<span class=\"k\">next</span>\n<span class=\"w\">  </span><span class=\"k\">case</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">6</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"n\">form</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"k\">case</span><span class=\"w\"> </span><span class=\"gr\">sorry</span>\n<span class=\"k\">next</span>\n<span class=\"w\">  </span><span class=\"k\">case</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">7</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"k\">case</span><span class=\"w\"> </span><span class=\"gr\">sorry</span>\n<span class=\"k\">qed</span>\n</code></pre></div>",
        "id": 469917204,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1726221250
    },
    {
        "content": "<p>For the goal in the screenshot, I want to say: as f is a member of p @[g], either f in p or f = g. And in the first case, the goal will be killed by the second item in the list of \"this\".</p>",
        "id": 469917559,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1726221324
    },
    {
        "content": "<p>But I do not have a way of a neat treatment. You can see from above I always state hence \"... \\/ ...\", and solve each case by hand.</p>",
        "id": 469917680,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1726221358
    },
    {
        "content": "<p>I believe there is a neater treatment for mature users, could you please teach me?</p>",
        "id": 469917810,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1726221384
    },
    {
        "content": "<p>Use \"p \\&lt;in&gt; set f\"</p>",
        "id": 469947159,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1726228860
    },
    {
        "content": "<p>Sorry, do you mean <code>f in (set p)</code>, where <code>p</code> is the list? How does it  help?</p>",
        "id": 469968933,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1726234719
    },
    {
        "content": "<p>You will stop fighting the automation provided by auto</p>",
        "id": 469970943,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1726235072
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"w\">  </span><span class=\"k\">case</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">5</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"n\">form1</span><span class=\"w\"> </span><span class=\"n\">form2</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"k\">case</span>\n<span class=\"w\">    </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">demodalize_ax1_ptaut</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">force</span><span class=\"w\"> </span><span class=\"n\">simp</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">List.member_def</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 469971950,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1726235342
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"w\">  </span><span class=\"k\">case</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">5</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"n\">form1</span><span class=\"w\"> </span><span class=\"n\">form2</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"n\">consider</span>\n<span class=\"w\">    </span><span class=\"o\">(</span><span class=\"n\">f_IMP</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"s\">\"f = IMP (BOX (IMP form1 form2))</span>\n<span class=\"s\">        (IMP (BOX form1) (BOX form2))\"</span><span class=\"w\"> </span><span class=\"o\">|</span>\n<span class=\"w\">    </span><span class=\"o\">(</span><span class=\"n\">pf</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"s\">\"List.member p f\"</span>\n<span class=\"w\">    </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">auto</span><span class=\"w\"> </span><span class=\"n\">simp</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">List.member_def</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"k\">case</span>\n<span class=\"w\">  </span><span class=\"k\">proof</span><span class=\"w\"> </span><span class=\"n\">cases</span>\n<span class=\"w\">    </span><span class=\"k\">case</span><span class=\"w\"> </span><span class=\"n\">pf</span>\n<span class=\"w\">    </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">thesis</span><span class=\"w\"> </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">5</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">auto</span>\n<span class=\"w\">  </span><span class=\"k\">next</span>\n<span class=\"w\">    </span><span class=\"k\">case</span><span class=\"w\"> </span><span class=\"n\">f_IMP</span>\n<span class=\"w\">    </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">thesis</span>\n<span class=\"w\">      </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">demodalize_ax1_ptaut</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">force</span>\n<span class=\"w\">  </span><span class=\"k\">qed</span>\n</code></pre></div>",
        "id": 469972832,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1726235490
    },
    {
        "content": "<p>Thank you! I see. Found in page 24 of <a href=\"https://isabelle.in.tum.de/doc/isar-ref.pdf\">https://isabelle.in.tum.de/doc/isar-ref.pdf</a> !</p>",
        "id": 469975476,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1726235903
    }
]