[
    {
        "content": "<p>Are there any tricks for performing arithmetic? I just want to prove that <code>(x + x^2)^2 &lt;= 4 * x^4</code> given that <code>x &gt;= 1</code> but I need several reasoning steps for that. I would expect that this can be solved in one or two steps.</p>",
        "id": 282916031,
        "sender_full_name": "Lukas Stevens",
        "timestamp": 1652960585
    },
    {
        "content": "<p><code>x :: nat</code></p>",
        "id": 282916086,
        "sender_full_name": "Lukas Stevens",
        "timestamp": 1652960633
    },
    {
        "content": "<p>The problem is much easier when x is a real number. It might be possible to build an incomplete procedure to first prove the result on reals and then transfer the result to naturals...</p>",
        "id": 282917033,
        "sender_full_name": "Wenda Li",
        "timestamp": 1652961177
    },
    {
        "content": "<p>I also tried using real numbers but didn't manage to solve it in one step.</p>",
        "id": 282917092,
        "sender_full_name": "Lukas Stevens",
        "timestamp": 1652961214
    },
    {
        "content": "<p>What is \"it\"?</p>",
        "id": 282917163,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1652961243
    },
    {
        "content": "<p>In principle, this is of course decidable, but I would not expect any of our standard proof methods to be able to solve this. It's nonlinear, after all.</p>",
        "id": 282917184,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1652961262
    },
    {
        "content": "<p>Sturm's method can almost solve it (it can solve it if you replace the ≥ with &gt;), but that is of course overkill here.</p>",
        "id": 282917221,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1652961290
    },
    {
        "content": "<p>It really isn't <em>that</em> simple of a problem, I do think you at least need something like Sturm's theorem to deal with this. In the multivariate case, something like CAD.</p>",
        "id": 282917363,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1652961365
    },
    {
        "content": "<p>Not sure why Sturm can't solve this; it was too long ago. But even then, it relies on code reflection, which seems like overkill.</p>",
        "id": 282917406,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1652961400
    },
    {
        "content": "<p>Are all of the standard methods + Sturm complete?</p>",
        "id": 282917455,
        "sender_full_name": "Lukas Stevens",
        "timestamp": 1652961424
    },
    {
        "content": "<p>My usual approach is: show that the difference is nonnegative by factoring it, like this:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span>\n  <span class=\"kp\">assumes</span> <span class=\"s\">\"x ≥ (1 :: real)\"</span>\n  <span class=\"kp\">shows</span>   <span class=\"s\">\"(x + x^2)^2 ≤ 4 * x^4\"</span>\n  <span class=\"k\">using</span> <span class=\"n\">assms</span>\n<span class=\"k\">proof</span> <span class=\"o\">-</span>\n  <span class=\"k\">have</span> <span class=\"s\">\"4 * x^4 - (x + x^2)^2 = x ^ 2 * (x - 1) * (3 * x + 1)\"</span>\n    <span class=\"k\">by</span> <span class=\"o\">(</span><span class=\"n\">simp</span> <span class=\"n\">add</span><span class=\"o\">:</span> <span class=\"n\">algebra_simps</span> <span class=\"n\">power4_eq_xxxx</span> <span class=\"n\">power2_eq_square</span><span class=\"o\">)</span>\n  <span class=\"k\">also</span> <span class=\"k\">have</span> <span class=\"s\">\"… ≥ 0\"</span>\n    <span class=\"k\">using</span> <span class=\"n\">assms</span> <span class=\"k\">by</span> <span class=\"o\">(</span><span class=\"n\">intro</span> <span class=\"n\">mult_nonneg_nonneg</span><span class=\"o\">)</span> <span class=\"n\">auto</span>\n  <span class=\"k\">finally</span> <span class=\"k\">show</span> <span class=\"o\">?</span><span class=\"n\">thesis</span>\n    <span class=\"k\">by</span> <span class=\"n\">simp</span>\n<span class=\"k\">qed</span>\n</code></pre></div>",
        "id": 282917491,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1652961449
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"233155\">Lukas Stevens</span> <a href=\"#narrow/stream/238552-Beginner-Questions/topic/Tricks.20for.20arithmetic/near/282917455\">said</a>:</p>\n<blockquote>\n<p>Are all of the standard methods + Sturm complete?</p>\n</blockquote>\n<p>Not sure what you mean by that.</p>",
        "id": 282917512,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1652961463
    },
    {
        "content": "<p>In principle, Sturm should be able to prove anything of the form <code>∀x∈{a..b}. p(x) ≤ q(x)</code> and the same if you replace any of the ≤ with &lt;.</p>",
        "id": 282917624,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1652961529
    },
    {
        "content": "<p>Now if my implementation is complete, that is a different question… that was done a very long time ago and nobody ever really used it much (I think Larry uses it at some point)</p>",
        "id": 282917666,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1652961553
    },
    {
        "content": "<p>I mean would it help to have something like this: <a href=\"https://arxiv.org/abs/cs/0601134\">https://arxiv.org/abs/cs/0601134</a></p>",
        "id": 282917702,
        "sender_full_name": "Lukas Stevens",
        "timestamp": 1652961582
    },
    {
        "content": "<p>You proposed this as reading material at some point, right?</p>",
        "id": 282917712,
        "sender_full_name": "Lukas Stevens",
        "timestamp": 1652961593
    },
    {
        "content": "<p>But yeah Sturm's theorem should be complete for the universal case</p>",
        "id": 282917716,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1652961596
    },
    {
        "content": "<p>univariate CAD should be complete for universal and existential (I think Wenda did something like this at some point, but I cannot find it in the AFP)</p>",
        "id": 282917810,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1652961617
    },
    {
        "content": "<p>then there's multivariate CAD of course, which is an entirely different beast (but also complete)</p>",
        "id": 282917860,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1652961633
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"233155\">Lukas Stevens</span> <a href=\"#narrow/stream/238552-Beginner-Questions/topic/Tricks.20for.20arithmetic/near/282917712\">said</a>:</p>\n<blockquote>\n<p>You proposed this as reading material at some point, right?</p>\n</blockquote>\n<p>I don't think that was me.</p>",
        "id": 282917887,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1652961649
    },
    {
        "content": "<p>Okay I must be missing something</p>",
        "id": 282918169,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1652961801
    },
    {
        "content": "<p>Why isn't <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>T</mi><mo stretchy=\"false\">[</mo><mi>Q</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">T[Q]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">Q</span><span class=\"mclose\">]</span></span></span></span> exactly Tarski arithmetic?</p>",
        "id": 282918212,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1652961827
    },
    {
        "content": "<p>Ah, probably because you can also have additional functions</p>",
        "id": 282918470,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1652961952
    },
    {
        "content": "<p>I see</p>",
        "id": 282918472,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1652961953
    },
    {
        "content": "<p>I'm not sure how practically useful this procedure is. For instance, it seems that it cannot do distributivity, which means it won't be able to do your example above either.</p>",
        "id": 282918599,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1652962034
    },
    {
        "content": "<p>This paper is cited in the one you posted, perhaps this might be more practical: <a href=\"https://link.springer.com/chapter/10.1007/11532231_22\">https://link.springer.com/chapter/10.1007/11532231_22</a></p>",
        "id": 282918786,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1652962135
    },
    {
        "content": "<p>I think CAD combined clause learning is very practical. The use that all the time in SMT solvers</p>",
        "id": 282918798,
        "sender_full_name": "Mohammad Abdulaziz",
        "timestamp": 1652962144
    },
    {
        "content": "<p>There is a famous paper by Leo de Moura about that. But implementing that is non-trivial</p>",
        "id": 282918934,
        "sender_full_name": "Mohammad Abdulaziz",
        "timestamp": 1652962226
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232736\">Manuel Eberl</span> <a href=\"#narrow/stream/238552-Beginner-Questions/topic/Tricks.20for.20arithmetic/near/282918786\">said</a>:</p>\n<blockquote>\n<p>This paper is cited in the one you posted, perhaps this might be more practical: <a href=\"https://link.springer.com/chapter/10.1007/11532231_22\">https://link.springer.com/chapter/10.1007/11532231_22</a></p>\n</blockquote>\n<p>I don't think this is CAD though. This is probably more something akin to Tarskis's original procedure, which has abysmal running time.</p>",
        "id": 282919012,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1652962283
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"233155\">Lukas Stevens</span> <a href=\"#narrow/stream/238552-Beginner-Questions/topic/Tricks.20for.20arithmetic/near/282917712\">said</a>:</p>\n<blockquote>\n<p>You proposed this as reading material at some point, right?</p>\n</blockquote>\n<p>I meant this paper <a href=\"https://arxiv.org/pdf/1404.4410.pdf\">https://arxiv.org/pdf/1404.4410.pdf</a></p>",
        "id": 282919212,
        "sender_full_name": "Lukas Stevens",
        "timestamp": 1652962387
    },
    {
        "content": "<p>But yeah for univariate stuff I'm pretty sure Wenda implemented all of that using something like Mathematica to provide certificates that are then replayed in Isabelle.</p>",
        "id": 282919240,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1652962412
    },
    {
        "content": "<p>Ah yes, here: <a href=\"https://arxiv.org/abs/1506.08238\">https://arxiv.org/abs/1506.08238</a></p>",
        "id": 282919278,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1652962441
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"233155\">Lukas Stevens</span> <a href=\"#narrow/stream/238552-Beginner-Questions/topic/Tricks.20for.20arithmetic/near/282919212\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"233155\">Lukas Stevens</span> <a href=\"#narrow/stream/238552-Beginner-Questions/topic/Tricks.20for.20arithmetic/near/282917712\">said</a>:</p>\n<blockquote>\n<p>You proposed this as reading material at some point, right?</p>\n</blockquote>\n<p>I meant this paper <a href=\"https://arxiv.org/pdf/1404.4410.pdf\">https://arxiv.org/pdf/1404.4410.pdf</a></p>\n</blockquote>\n<p>Hmm, that vaguely rings a bell, but I can't remember having read or suggested it. But I'll believe you. <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 282919378,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1652962491
    },
    {
        "content": "<p>I'm an old man, my memory isn't what it once was.</p>",
        "id": 282919386,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1652962497
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232736\">@Manuel Eberl</span> what is CAD?</p>",
        "id": 282919708,
        "sender_full_name": "Jonathan Julian Huerta y Munive",
        "timestamp": 1652962708
    },
    {
        "content": "<p>Cylindric Algebraic Decomposition</p>",
        "id": 282919732,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1652962725
    },
    {
        "content": "<p>It's (as far as I know) the fastest known algorithm for real arithmetic</p>",
        "id": 282919742,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1652962735
    },
    {
        "content": "<p>but it's still exponential</p>",
        "id": 282919754,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1652962740
    },
    {
        "content": "<p>(in the number of, I forgot… quantifier alternations probably)</p>",
        "id": 282919774,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1652962755
    },
    {
        "content": "<p>How difficult is it to implement?</p>",
        "id": 282919791,
        "sender_full_name": "Lukas Stevens",
        "timestamp": 1652962766
    },
    {
        "content": "<p>Doubly exponential even!</p>",
        "id": 282919818,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1652962785
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"233155\">Lukas Stevens</span> <a href=\"#narrow/stream/238552-Beginner-Questions/topic/Tricks.20for.20arithmetic/near/282919791\">said</a>:</p>\n<blockquote>\n<p>How difficult is it to implement?</p>\n</blockquote>\n<p>I honestly don't know that much about it. You should ask <span class=\"user-mention\" data-user-id=\"246083\">@Wenda Li</span> .</p>",
        "id": 282919839,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1652962802
    },
    {
        "content": "<p>I think he had plans to do multivariate CAD in Isabelle at some point.</p>",
        "id": 282919893,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1652962812
    },
    {
        "content": "<p>But it's certainly a big project. Even the univariate one was a decently-sized paper.</p>",
        "id": 282919950,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1652962857
    },
    {
        "content": "<p>Assia Mahboubi's PhD thesis was to do Tarskis's procedure (which I think is considerably simpler than CAD, but again, I'm not an expert) in Coq.</p>",
        "id": 282920007,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1652962893
    },
    {
        "content": "<p>So that's another indicator that it's probably quite a bit of work… (unless we're willing to believe that everything is much harder to do in Coq)</p>",
        "id": 282920035,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1652962914
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232736\">Manuel Eberl</span> <a href=\"#narrow/stream/238552-Beginner-Questions/topic/Tricks.20for.20arithmetic/near/282919950\">said</a>:</p>\n<blockquote>\n<p>But it's certainly a big project. Even the univariate one was a decently-sized paper.</p>\n</blockquote>\n<p>But this is with verification in Isabelle, right?</p>",
        "id": 282920165,
        "sender_full_name": "Lukas Stevens",
        "timestamp": 1652962965
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"233155\">@Lukas Stevens</span>  we are developing simple tactics for arithmetical reasoning for our hybrid systems verification components in <a href=\"https://github.com/isabelle-utp/Hybrid-Verification\">https://github.com/isabelle-utp/Hybrid-Verification</a>. Nothing too complex yet. The lemma you showed can be solved with two of our tactics plus sledgehammer. To call them you would just need the file <code>Real_Arith_Tactics.thy</code></p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span>\n  <span class=\"kp\">assumes</span> <span class=\"s\">\"x ≥ (1 :: real)\"</span>\n  <span class=\"kp\">shows</span>   <span class=\"s\">\"(x + x^2)^2 ≤ 4 * x^4\"</span>\n  <span class=\"kp\">apply</span> <span class=\"n\">bin_unfold</span>\n  <span class=\"kp\">apply</span> <span class=\"n\">mon_pow_simp</span>\n  <span class=\"k\">by</span> <span class=\"o\">(</span><span class=\"n\">smt</span> <span class=\"o\">(</span><span class=\"n\">verit</span><span class=\"o\">,</span> <span class=\"n\">ccfv_SIG</span><span class=\"o\">)</span> <span class=\"n\">assms</span> <span class=\"n\">le_add1</span> <span class=\"n\">nat_add_1_add_1</span> <span class=\"n\">numeral_Bit0</span> <span class=\"n\">numeral_Bit1</span> <span class=\"n\">power_increasing</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 282920205,
        "sender_full_name": "Jonathan Julian Huerta y Munive",
        "timestamp": 1652962988
    },
    {
        "content": "<p>For this problem in particular, our build-in sum-of-squares method suffices (<code>HOL-Library.Sum_of_Squares</code>):</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span>\n  <span class=\"kp\">assumes</span> <span class=\"s\">\"(x::real) ≥1\"</span>\n  <span class=\"kp\">shows</span> <span class=\"s\">\"(x + x^2)^2 &lt;= 4 * x^4\"</span>\n  <span class=\"k\">using</span> <span class=\"n\">assms</span>\n  <span class=\"k\">by</span> <span class=\"n\">sos</span>\n</code></pre></div>\n<p>Univariate CAD should be preferable if the degree of the polynomial is too high. You can try my certificate-based univariate CAD here: <a href=\"https://github.com/Wenda302/RCF_Decision_Procedures\">https://github.com/Wenda302/RCF_Decision_Procedures</a>. I haven't put it into the AFP as it requires Mathematica installed for finding a certificate. </p>\n<p>Multivariate CAD is still on the way, which may take a bit time but I am super excited about it!</p>",
        "id": 282920390,
        "sender_full_name": "Wenda Li",
        "timestamp": 1652963094
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232736\">@Manuel Eberl</span> thanks for the background info! Very useful and very interested in this!</p>",
        "id": 282920393,
        "sender_full_name": "Jonathan Julian Huerta y Munive",
        "timestamp": 1652963095
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"246083\">Wenda Li</span> <a href=\"#narrow/stream/238552-Beginner-Questions/topic/Tricks.20for.20arithmetic/near/282920390\">said</a>:</p>\n<blockquote>\n<p>For this problem in particular, our build-in sum-of-squares method suffices (<code>HOL-Library.Sum_of_Squares</code>):</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span>\n  <span class=\"kp\">assumes</span> <span class=\"s\">\"(x::real) ≥1\"</span>\n  <span class=\"kp\">shows</span> <span class=\"s\">\"(x + x^2)^2 &lt;= 4 * x^4\"</span>\n  <span class=\"k\">using</span> <span class=\"n\">assms</span>\n  <span class=\"k\">by</span> <span class=\"n\">sos</span>\n</code></pre></div>\n<p>Univariate CAD should be preferable if the degree of the polynomial is too high. You can try my certificate-based univariate CAD here: <a href=\"https://github.com/Wenda302/RCF_Decision_Procedures\">https://github.com/Wenda302/RCF_Decision_Procedures</a>. I haven't put it into the AFP as it requires Mathematica installed for finding a certificate. </p>\n<p>Multivariate CAD is still on the way, which may take a bit time but I am super excited about it!</p>\n</blockquote>\n<p>Also based on certificates?</p>",
        "id": 282920713,
        "sender_full_name": "Lukas Stevens",
        "timestamp": 1652963270
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232736\">Manuel Eberl</span> <a href=\"#narrow/stream/238552-Beginner-Questions/topic/Tricks.20for.20arithmetic/near/282920007\">said</a>:</p>\n<blockquote>\n<p>Assia Mahboubi's PhD thesis was to do Tarskis's procedure (which I think is considerably simpler than CAD, but again, I'm not an expert) in Coq.</p>\n</blockquote>\n<p>Assia Mahboubi implemented CAD in Coq but as far as I know the proof is yet to finish. Cyril Cohen and Assia Mahboubi implemented and verified Tarski's quantifier-elimination procedure in Coq, which is more of theoretical interest as the procedure has non-elementary complexity.</p>",
        "id": 282920865,
        "sender_full_name": "Wenda Li",
        "timestamp": 1652963358
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"233155\">Lukas Stevens</span> <a href=\"#narrow/stream/238552-Beginner-Questions/topic/Tricks.20for.20arithmetic/near/282920713\">said</a>:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"n\">Also</span> <span class=\"n\">based</span> <span class=\"n\">on</span> <span class=\"n\">certificates</span><span class=\"o\">?</span>\n</code></pre></div>\n<p>Certificate-based is my short-term solution. In the long term, I am planning to have both certificate-based and non-certificate-based ones, but non-certificate-based ones might be slower as it really takes time to catch up with years of accumulated optimisation in modern CAS.</p>",
        "id": 282921313,
        "sender_full_name": "Wenda Li",
        "timestamp": 1652963595
    },
    {
        "content": "<p>Maybe it would be a good idea to hand out porting some implementation of CAD to ML <strong>to a student</strong>? Then, one can use that as a fallback for Mathematica. <del>Or is that what you are planning to do anyway, i.e. not verifying the procedure but sticking to the certificated-based approach?</del></p>",
        "id": 282921582,
        "sender_full_name": "Lukas Stevens",
        "timestamp": 1652963751
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232736\">Manuel Eberl</span> <a href=\"#narrow/stream/238552-Beginner-Questions/topic/Tricks.20for.20arithmetic/near/282919754\">said</a>:</p>\n<blockquote>\n<p>but it's still exponential</p>\n</blockquote>\n<p>Double-exponential actually. For the univariate case, it is polynomial though.</p>",
        "id": 282921720,
        "sender_full_name": "Wenda Li",
        "timestamp": 1652963813
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"233155\">Lukas Stevens</span> <a href=\"#narrow/stream/238552-Beginner-Questions/topic/Tricks.20for.20arithmetic/near/282921582\">said</a>:</p>\n<blockquote>\n<p>Maybe it would be a good idea to hand out porting some implementation of CAD to ML <strong>to a student</strong>? Then, one can use that as a fallback for Mathematica. <del>Or is that what you are planning to do anyway, i.e. not verifying the procedure but sticking to the certificated-based approach?</del></p>\n</blockquote>\n<p>For univariate CAD, the crucial part is a highly-efficient univariate polynomial isolation procedure (which itself would be nice paper). I am still working on that procedure. Once it is finished, we can expect a non-certificate-based univariate CAD tactic as well as a standalone extracted program. </p>\n<p>Yes, I am already outsourcing some of the problems to students, but it still would take some time.</p>",
        "id": 282922896,
        "sender_full_name": "Wenda Li",
        "timestamp": 1652964297
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232736\">Manuel Eberl</span> <a href=\"#narrow/stream/238552-Beginner-Questions/topic/Tricks.20for.20arithmetic/near/282919012\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"232736\">Manuel Eberl</span> <a href=\"#narrow/stream/238552-Beginner-Questions/topic/Tricks.20for.20arithmetic/near/282918786\">said</a>:</p>\n<blockquote>\n<p>This paper is cited in the one you posted, perhaps this might be more practical: <a href=\"https://link.springer.com/chapter/10.1007/11532231_22\">https://link.springer.com/chapter/10.1007/11532231_22</a></p>\n</blockquote>\n<p>I don't think this is CAD though. This is probably more something akin to Tarskis's original procedure, which has abysmal running time.</p>\n</blockquote>\n<p>Yes, to me that implementation is more close to Tarski's original quantifier elimination---it has some optimisation but the overall complexity should stay the same (i.e., non-elementary in terms of the number of variables). PVS has this procedure (<a href=\"https://shemesh.larc.nasa.gov/fm/pvs/Tarski/\">https://shemesh.larc.nasa.gov/fm/pvs/Tarski/</a>), though they only use it for solving univariate problems. Isabelle also has something very similar: <a href=\"https://www.isa-afp.org/entries/BenOr_Kozen_Reif.html\">https://www.isa-afp.org/entries/BenOr_Kozen_Reif.html</a>.</p>",
        "id": 282924581,
        "sender_full_name": "Wenda Li",
        "timestamp": 1652965088
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"246083\">Wenda Li</span> <a href=\"#narrow/stream/238552-Beginner-Questions/topic/Tricks.20for.20arithmetic/near/282922896\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"233155\">Lukas Stevens</span> <a href=\"#narrow/stream/238552-Beginner-Questions/topic/Tricks.20for.20arithmetic/near/282921582\">said</a>:</p>\n<blockquote>\n<p>Maybe it would be a good idea to hand out porting some implementation of CAD to ML <strong>to a student</strong>? Then, one can use that as a fallback for Mathematica. <del>Or is that what you are planning to do anyway, i.e. not verifying the procedure but sticking to the certificated-based approach?</del></p>\n</blockquote>\n<p>For univariate CAD, the crucial part is a highly-efficient univariate polynomial isolation procedure (which itself would be nice paper). I am still working on that procedure. Once it is finished, we can expect a non-certificate-based univariate CAD tactic as well as a standalone extracted program. </p>\n<p>Yes, I am already outsourcing some of the problems to students, but it still would take some time.</p>\n</blockquote>\n<p>Non-verified, I assume? Just running in ML?</p>",
        "id": 282929221,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1652967362
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"246083\">Wenda Li</span> <a href=\"#narrow/stream/238552-Beginner-Questions/topic/Tricks.20for.20arithmetic/near/282920390\">said</a>:</p>\n<blockquote>\n<p>For this problem in particular, our build-in sum-of-squares method suffices (<code>HOL-Library.Sum_of_Squares</code>):</p>\n<p><div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span>\n  <span class=\"kp\">assumes</span> <span class=\"s\">\"(x::real) ≥1\"</span>\n  <span class=\"kp\">shows</span> <span class=\"s\">\"(x + x^2)^2 &lt;= 4 * x^4\"</span>\n  <span class=\"k\">using</span> <span class=\"n\">assms</span>\n  <span class=\"k\">by</span> <span class=\"n\">sos</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Oh, right! I thought about <code>sos</code> but didn't realise it also worked with assumptions like <code>x ≥ 1</code>. I wonder how that even works.</p>",
        "id": 282929382,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1652967432
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"233155\">Lukas Stevens</span> <a href=\"#narrow/stream/238552-Beginner-Questions/topic/Tricks.20for.20arithmetic/near/282920165\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>But it's certainly a big project. Even the univariate one was a decently-sized paper.</p>\n</blockquote>\n<p>But this is with verification in Isabelle, right?</p>\n</blockquote>\n<p>Well, a proof-producing method typically has to do some work inside Isabelle and some work in ML to plug the theorems together (plus possibly some external work to compute certificates).</p>",
        "id": 282929645,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1652967555
    },
    {
        "content": "<p>I think for CAD there will always be a significant amount of work to be done inside Isabelle to get to the point where you can implement a proof-producing procedure in ML.</p>",
        "id": 282929687,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1652967590
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232736\">Manuel Eberl</span> <a href=\"#narrow/stream/238552-Beginner-Questions/topic/Tricks.20for.20arithmetic/near/282929221\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"246083\">Wenda Li</span> <a href=\"#narrow/stream/238552-Beginner-Questions/topic/Tricks.20for.20arithmetic/near/282922896\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"233155\">Lukas Stevens</span> <a href=\"#narrow/stream/238552-Beginner-Questions/topic/Tricks.20for.20arithmetic/near/282921582\">said</a>:</p>\n<blockquote>\n<p>Maybe it would be a good idea to hand out porting some implementation of CAD to ML <strong>to a student</strong>? Then, one can use that as a fallback for Mathematica. <del>Or is that what you are planning to do anyway, i.e. not verifying the procedure but sticking to the certificated-based approach?</del></p>\n</blockquote>\n<p>For univariate CAD, the crucial part is a highly-efficient univariate polynomial isolation procedure (which itself would be nice paper). I am still working on that procedure. Once it is finished, we can expect a non-certificate-based univariate CAD tactic as well as a standalone extracted program. </p>\n<p>Yes, I am already outsourcing some of the problems to students, but it still would take some time.</p>\n</blockquote>\n<p>Non-verified, I assume? Just running in ML?</p>\n</blockquote>\n<p>What do you mean by 'non-verified' here?</p>",
        "id": 282930318,
        "sender_full_name": "Wenda Li",
        "timestamp": 1652967883
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232736\">Manuel Eberl</span> <a href=\"#narrow/stream/238552-Beginner-Questions/topic/Tricks.20for.20arithmetic/near/282929382\">said</a>:</p>\n<blockquote>\n<p>Oh, right! I thought about <code>sos</code> but didn't realise it also worked with assumptions like <code>x ≥ 1</code>. I wonder how that even works.</p>\n</blockquote>\n<p>SOS is supposed to be complete for univariate (and bivariate, if my memory serves me) problems, considering we factor out the numerical issue in the SDP solver.</p>",
        "id": 282930633,
        "sender_full_name": "Wenda Li",
        "timestamp": 1652968016
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232736\">Manuel Eberl</span> <a href=\"#narrow/stream/238552-Beginner-Questions/topic/Tricks.20for.20arithmetic/near/282929687\">said</a>:</p>\n<blockquote>\n<p>I think for CAD there will always be a significant amount of work to be done inside Isabelle to get to the point where you can implement a proof-producing procedure in ML.</p>\n</blockquote>\n<p>I am a huge fan of proof-by-reflection. This should be the future :-)</p>",
        "id": 282930741,
        "sender_full_name": "Wenda Li",
        "timestamp": 1652968062
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"246083\">Wenda Li</span> <a href=\"#narrow/stream/238552-Beginner-Questions/topic/Tricks.20for.20arithmetic/near/282930318\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"232736\">Manuel Eberl</span> <a href=\"#narrow/stream/238552-Beginner-Questions/topic/Tricks.20for.20arithmetic/near/282929221\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"246083\">Wenda Li</span> <a href=\"#narrow/stream/238552-Beginner-Questions/topic/Tricks.20for.20arithmetic/near/282922896\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"233155\">Lukas Stevens</span> <a href=\"#narrow/stream/238552-Beginner-Questions/topic/Tricks.20for.20arithmetic/near/282921582\">said</a>:</p>\n<blockquote>\n<p>Maybe it would be a good idea to hand out porting some implementation of CAD to ML <strong>to a student</strong>? Then, one can use that as a fallback for Mathematica. <del>Or is that what you are planning to do anyway, i.e. not verifying the procedure but sticking to the certificated-based approach?</del></p>\n</blockquote>\n<p>For univariate CAD, the crucial part is a highly-efficient univariate polynomial isolation procedure (which itself would be nice paper). I am still working on that procedure. Once it is finished, we can expect a non-certificate-based univariate CAD tactic as well as a standalone extracted program. </p>\n<p>Yes, I am already outsourcing some of the problems to students, but it still would take some time.</p>\n</blockquote>\n<p>Non-verified, I assume? Just running in ML?</p>\n</blockquote>\n<p>What do you mean by 'non-verified' here?</p>\n</blockquote>\n<p>Well, you gave the student the task of building a polynomial root isolation procedure, right? For your purposes, that procedure doesn't have to be a verified procedure in HOL, right? It would be enough to have some unverified ML code that just produces the numbers and then you check them in HOL by plugging in the numbers and verifying that they have alternating signs.</p>",
        "id": 282931537,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1652968383
    },
    {
        "content": "<p>(Assuming that the polynomials are squarefree, which is easy to guarantee because you can just run a squarefree factorisation)</p>",
        "id": 282931573,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1652968399
    },
    {
        "content": "<p>Okay well you probably do need more than that I suppose, some root-counting stuff like Sturm sequences or whatever, but you know more about that than I do.</p>",
        "id": 282931692,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1652968443
    },
    {
        "content": "<p>Ahh, I see your point, Manuel! Yes, that could be an intermediate solution, but I have been planning for a fully verified real root isolation procedure, which could drop the certificate-verification overhead entirely. </p>\n<p>Calculating Sturm sequences would be a huge pain when the coefficient size is large.</p>",
        "id": 282934101,
        "sender_full_name": "Wenda Li",
        "timestamp": 1652969452
    },
    {
        "content": "<p>Also, if I remember correctly, calculating square-free polynomials might not be a cheap operation in many cases...</p>",
        "id": 282934701,
        "sender_full_name": "Wenda Li",
        "timestamp": 1652969684
    }
]