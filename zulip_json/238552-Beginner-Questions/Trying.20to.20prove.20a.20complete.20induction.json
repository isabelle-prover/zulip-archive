[
    {
        "content": "<p>I recently encountered a proof by complete induction in a book that I wanted to formalize using the <code>less_induct</code> induction rule. The proof is for a simple statement about terms in a programming language. Here's a stripped down version of the code and proof that exposes the issue that I'm seeing:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">datatype</span><span class=\"w\"> </span><span class=\"n\">small_term</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">suc</span><span class=\"w\"> </span><span class=\"n\">small_term</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">zero</span><span class=\"w\"></span>\n\n<span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">consts_st</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"small_term ⇒ small_term set\"</span><span class=\"w\"> </span><span class=\"kp\">where</span><span class=\"w\"></span>\n<span class=\"s\">\"consts_st zero = {zero}\"</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"s\">\"consts_st (suc t1) = consts_st t1\"</span><span class=\"w\"></span>\n\n<span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">size_st</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"small_term ⇒ nat\"</span><span class=\"w\"> </span><span class=\"kp\">where</span><span class=\"w\"></span>\n<span class=\"s\">\"size_st zero = 1\"</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"s\">\"size_st (suc t1) = (size_st t1) + 1\"</span><span class=\"w\"></span>\n\n<span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">depth_st</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"small_term ⇒ nat\"</span><span class=\"w\"> </span><span class=\"kp\">where</span><span class=\"w\"></span>\n<span class=\"s\">\"depth_st  zero = 1\"</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"s\">\"depth_st (suc t1) = (depth_st t1) + 1\"</span><span class=\"w\"></span>\n\n<span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"s\">\"⟦depth_st t = d⟧ ⟹ card (consts_st t) ≤ size_st t\"</span><span class=\"w\"></span>\n<span class=\"k\">proof</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">induction</span><span class=\"w\"> </span><span class=\"n\">d</span><span class=\"w\"> </span><span class=\"n\">rule</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">less_induct</span><span class=\"o\">)</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">case</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">less</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"o\">)</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"k\">case</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">proof</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">cases</span><span class=\"w\"> </span><span class=\"n\">t</span><span class=\"o\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">case</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">suc</span><span class=\"w\"> </span><span class=\"n\">x1</span><span class=\"o\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">thesis</span><span class=\"w\"> </span><span class=\"gr\">sorry</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">next</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">case</span><span class=\"w\"> </span><span class=\"n\">zero</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">thesis</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">simp</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">qed</span><span class=\"w\"></span>\n<span class=\"k\">qed</span><span class=\"w\"></span>\n</code></pre></div>\n<p>The book suggests using the technique of using \"induction on the depth of terms\" to prove a property about all terms. Here, the property is that the number of constants in a term is always less than or equal to the size of the term (number of nodes in the AST).</p>\n<p>The <code>(suc x1)</code> case is where I'm stuck. This case should be trivial to prove using the  induction hypothesis, but since I'm in an inner proof the IH is not automatically present in the proof state at this point. So I tried explicitly assuming the IH:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">proof</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">cases</span><span class=\"w\"> </span><span class=\"n\">t</span><span class=\"o\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">case</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">suc</span><span class=\"w\"> </span><span class=\"n\">x1</span><span class=\"o\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">from</span><span class=\"w\"> </span><span class=\"n\">less.IH</span><span class=\"w\"> </span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">thesis</span><span class=\"w\"> </span><span class=\"gr\">sorry</span><span class=\"w\"></span>\n</code></pre></div>\n<p>This brings the proof state at <code>?thesis</code> to:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">proof</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">prove</span><span class=\"o\">)</span><span class=\"w\"></span>\n<span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">this</span><span class=\"o\">:</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"o\">?</span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"n\">&lt;</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">⟹</span><span class=\"w\"> </span><span class=\"n\">depth_st</span><span class=\"w\"> </span><span class=\"n\">t</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"n\">⟹</span><span class=\"w\"> </span><span class=\"n\">card</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">consts_st</span><span class=\"w\"> </span><span class=\"n\">t</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">≤</span><span class=\"w\"> </span><span class=\"n\">size_st</span><span class=\"w\"> </span><span class=\"n\">t</span><span class=\"w\"></span>\n\n<span class=\"n\">goal</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">1</span><span class=\"w\"> </span><span class=\"n\">subgoal</span><span class=\"o\">):</span><span class=\"w\"></span>\n<span class=\"w\"> </span><span class=\"n\">1.</span><span class=\"w\"> </span><span class=\"n\">card</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">consts_st</span><span class=\"w\"> </span><span class=\"n\">t</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">≤</span><span class=\"w\"> </span><span class=\"n\">size_st</span><span class=\"w\"> </span><span class=\"n\">t</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Because this case is inside of the outer complete induction case, I believe that <code>?y &lt; x</code> and <code>depth_st t = ?y</code> should already be known in this state, but they are not. Is there a way for me to pull in those facts into the inner proof?</p>",
        "id": 298670973,
        "sender_full_name": "Alex Weisberger",
        "timestamp": 1663104847
    },
    {
        "content": "<ol>\n<li>You are missing a generalization over t</li>\n<li>You are missing the <code>less.prems</code> facts</li>\n<li><code>from</code> is not the same as <code>with</code></li>\n</ol>",
        "id": 298699928,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1663128900
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"s\">\"⟦depth_st t = d⟧ ⟹ card (consts_st t) ≤ size_st t\"</span><span class=\"w\"></span>\n<span class=\"k\">proof</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">induction</span><span class=\"w\"> </span><span class=\"n\">d</span><span class=\"w\"> </span><span class=\"n\">arbitrary</span><span class=\"o\">:</span><span class=\"n\">t</span><span class=\"w\"> </span><span class=\"n\">rule</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">less_induct</span><span class=\"o\">)</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">case</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">less</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"o\">)</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"k\">case</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">proof</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">cases</span><span class=\"w\"> </span><span class=\"n\">t</span><span class=\"o\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">case</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">suc</span><span class=\"w\"> </span><span class=\"n\">x1</span><span class=\"o\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">with</span><span class=\"w\"> </span><span class=\"n\">less.IH</span><span class=\"w\"> </span><span class=\"n\">less.prems</span><span class=\"w\"> </span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">thesis</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">force</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">next</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">case</span><span class=\"w\"> </span><span class=\"n\">zero</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">thesis</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">simp</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">qed</span><span class=\"w\"></span>\n<span class=\"k\">qed</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 298699938,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1663128914
    },
    {
        "content": "<p>That’s exactly how I thought the proof should be written - thank you.</p>\n<p>Is there any documentation about the rules that get introduced in cases like this? I forgot about less.prems, and I feel like there are other useful ones that get introduced that I don’t know about.</p>",
        "id": 298760891,
        "sender_full_name": "Alex Weisberger",
        "timestamp": 1663158355
    },
    {
        "content": "<p>The <code>prems</code> come from the premises that are piped into the inductive proof with <code>using</code> and the <code>hyps</code> are the assumptions of the inductive cases (i.e. they depend on the induction rule). The <code>hyps</code> should thus contain the <code>IH</code> (?). As for the <code>.IH</code>, I am not really sure.</p>",
        "id": 298764240,
        "sender_full_name": "Lukas Stevens",
        "timestamp": 1663159723
    },
    {
        "content": "<p>In any case, you can use <code>print_theorems</code> after <code>case</code> to see the theorems that are generated.</p>",
        "id": 298772167,
        "sender_full_name": "Lukas Stevens",
        "timestamp": 1663162572
    }
]