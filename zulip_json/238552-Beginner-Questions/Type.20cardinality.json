[
    {
        "content": "<p>Hi, I have a function f, which takes a type parameter <code>'a itself =&gt; ... =&gt; ('a::finite)</code> and in a proof of the form <code>f t ... = ...</code> I want to access the cardinality of t <code>CARD('a)</code> in the sense of <code>CARD(t)</code>, but that does not work. I suspect there might be a function like <code>itself_card t</code>, but I could find nothing.</p>",
        "id": 370673142,
        "sender_full_name": "Maximilian Spitz",
        "timestamp": 1688025426
    },
    {
        "content": "<p>Hi,</p>\n<p>could you describe what you mean by \"cardinality of t\"? If you want the cardinality of the set of all elements of type <code>'a itself</code>you could get it by using <code>card (UNIV :: 'a itself set)</code>, but I think this is unspecified(iirc itself is just there so the embedding of types into terms has one canonical representative <code>TYPE('a)</code> and nothing else is specified). If you want the cardinality of the set of elements of type <code>'a</code>you can use <code>`card (UNIV :: 'a set)</code></p>",
        "id": 370676385,
        "sender_full_name": "Simon Roßkopf",
        "timestamp": 1688026146
    },
    {
        "content": "<p>Thank you, I should clarify: I have a function with a type variable, which is constrained as enum, so a type with finitely many instances. In the function definition I have access to 'a, but not in the proof. In the proof I have only t, which has type 'a itself and from t I want to get CARD('a) somehow, but I cannot access it directly. In short: I cannot mention 'a in the proof</p>",
        "id": 370677889,
        "sender_full_name": "Maximilian Spitz",
        "timestamp": 1688026457
    },
    {
        "content": "<p>I still don't really understand the problem. You should be able to access that type variable in the proof. But it's hard to say without having a concrete example.</p>\n<p>But if you want you can define a <code>card_of</code> function yourself, e.g. as an input abbreviation:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">abbreviation</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">input</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">card_of</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"'a ⇒ nat\"</span><span class=\"w\"> </span><span class=\"kp\">where</span>\n<span class=\"w\">  </span><span class=\"s\">\"card_of _ ≡ card (UNIV :: 'a set)\"</span>\n</code></pre></div>\n<p>(or something like that; not sure what a good name would be)</p>",
        "id": 370683505,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1688027585
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232736\">Manuel Eberl</span> <a href=\"#narrow/stream/238552-Beginner-Questions/topic/Type.20cardinality/near/370683505\">said</a>:</p>\n<blockquote>\n<p>I still don't really understand the problem. You should be able to access that type variable in the proof. But it's hard to say without having a concrete example.</p>\n<p>But if you want you can define a <code>card_of</code> function yourself, e.g. as an input abbreviation:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">abbreviation</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">input</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">card_of</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"'a ⇒ nat\"</span><span class=\"w\"> </span><span class=\"kp\">where</span>\n<span class=\"w\">  </span><span class=\"s\">\"card_of _ ≡ card (UNIV :: 'a set)\"</span>\n</code></pre></div>\n<p>(or something like that; not sure what a good name would be)</p>\n</blockquote>\n<p>Thank you, that works fine.</p>",
        "id": 370690095,
        "sender_full_name": "Maximilian Spitz",
        "timestamp": 1688028876
    }
]