[
    {
        "content": "<p>I defined the equality type class and am trying to prove that usual natural number equality fits this type class:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">theory</span><span class=\"w\"> </span><span class=\"n\">EqualityClass</span>\n\n<span class=\"kp\">imports</span><span class=\"w\"> </span><span class=\"n\">Main</span>\n\n<span class=\"k\">begin</span>\n\n<span class=\"k\">class</span><span class=\"w\"> </span><span class=\"n\">eq</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">  </span><span class=\"kp\">fixes</span><span class=\"w\"> </span><span class=\"n\">eq</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"'a ⇒ 'a ⇒ bool\"</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"kp\">infixl</span><span class=\"w\"> </span><span class=\"s\">\"=eq=\"</span><span class=\"w\"> </span><span class=\"n\">60</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"kp\">assumes</span><span class=\"w\"> </span><span class=\"n\">refl</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"x =eq= x\"</span>\n<span class=\"w\">      </span><span class=\"kp\">and</span><span class=\"w\"> </span><span class=\"n\">symm</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"x =eq= y ⟹ y =eq= x\"</span>\n<span class=\"w\">      </span><span class=\"kp\">and</span><span class=\"w\"> </span><span class=\"n\">trans</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"x =eq= y ⟹ y =eq= z ⟹ x =eq= z\"</span>\n\n<span class=\"k\">instantiation</span><span class=\"w\"> </span><span class=\"n\">nat</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"n\">eq</span>\n\n<span class=\"k\">begin</span>\n\n<span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">nat_eq</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"nat ⇒ nat ⇒ bool\"</span>\n<span class=\"w\">  </span><span class=\"kp\">where</span>\n<span class=\"w\">  </span><span class=\"s\">\"nat_eq 0 0 = True\"</span>\n<span class=\"o\">|</span><span class=\"w\"> </span><span class=\"s\">\"nat_eq 0 _ = False\"</span>\n<span class=\"o\">|</span><span class=\"w\"> </span><span class=\"s\">\"nat_eq _ 0 = False\"</span>\n<span class=\"o\">|</span><span class=\"w\"> </span><span class=\"s\">\"nat_eq (Suc n) (Suc m) = nat_eq n m\"</span>\n\n\n<span class=\"kn\">instance</span>\n<span class=\"k\">proof</span>\n<span class=\"w\">  </span><span class=\"k\">fix</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"n\">nat</span>\n<span class=\"w\">  </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"s\">\"nat_eq n n\"</span>\n<span class=\"w\">  </span><span class=\"k\">proof</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">induct</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"o\">)</span>\n<span class=\"w\">    </span><span class=\"k\">case</span><span class=\"w\"> </span><span class=\"n\">0</span>\n<span class=\"w\">    </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"k\">case</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">simp</span>\n<span class=\"w\">  </span><span class=\"k\">next</span>\n<span class=\"w\">    </span><span class=\"k\">case</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Suc</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"o\">)</span>\n<span class=\"w\">    </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"k\">case</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">simp</span>\n<span class=\"w\">  </span><span class=\"k\">qed</span>\n<span class=\"w\">  </span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"s\">\"⋀x. x =eq= x\"</span>\n</code></pre></div>\n<p>It is not clear how could I feed that the reflexivity of nat_eq foots the bill for the equality class reflexivity prescription. How can I have a proper show statement there? For the type class tutorial example, this was</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">class</span><span class=\"w\"> </span><span class=\"n\">semigroup</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">  </span><span class=\"kp\">fixes</span><span class=\"w\"> </span><span class=\"n\">mult</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"'a ⇒ 'a ⇒ 'a\"</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"kp\">infixl</span><span class=\"w\"> </span><span class=\"s\">\"⊗\"</span><span class=\"w\"> </span><span class=\"n\">70</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"kp\">assumes</span><span class=\"w\"> </span><span class=\"n\">assoc</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"(x ⊗ y) ⊗ z = x ⊗ (y ⊗ z)\"</span>\n\n<span class=\"k\">instantiation</span><span class=\"w\"> </span><span class=\"n\">int</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"n\">semigroup</span>\n\n<span class=\"k\">begin</span>\n\n<span class=\"k\">definition</span><span class=\"w\"> </span><span class=\"n\">mult_int_def</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"i ⊗ j = i + (j::int)\"</span>\n\n<span class=\"kn\">instance</span>\n<span class=\"k\">proof</span>\n<span class=\"w\">  </span><span class=\"k\">fix</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"n\">j</span><span class=\"w\"> </span><span class=\"n\">k</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"n\">int</span>\n<span class=\"w\">  </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"s\">\"(i+j) + k = i + (j+k)\"</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">simp</span>\n<span class=\"w\">  </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"s\">\"(i ⊗ j) ⊗ k = i ⊗ (j ⊗ k)\"</span><span class=\"w\"> </span><span class=\"k\">unfolding</span><span class=\"w\"> </span><span class=\"n\">mult_int_def</span><span class=\"w\"> </span><span class=\"ow\">.</span>\n<span class=\"k\">qed</span>\n</code></pre></div>",
        "id": 380364931,
        "sender_full_name": "Gergely Buday",
        "timestamp": 1690813450
    },
    {
        "content": "<p><code>nat_eq</code> vs <code>mult_int</code> in the example</p>",
        "id": 380368441,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1690813960
    },
    {
        "content": "<p>you swapped the names</p>",
        "id": 380368494,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1690813969
    },
    {
        "content": "<p>it should be <code>eq_nat</code></p>",
        "id": 380368563,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1690813979
    },
    {
        "content": "<p>I see, so it is a fixed syntax. I corrected it but now the induction proof fails. I wonder how a name change can affect that.</p>",
        "id": 380373718,
        "sender_full_name": "Gergely Buday",
        "timestamp": 1690814816
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">class</span><span class=\"w\"> </span><span class=\"n\">eq</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">  </span><span class=\"kp\">fixes</span><span class=\"w\"> </span><span class=\"n\">eq</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"'a ⇒ 'a ⇒ bool\"</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"kp\">infixl</span><span class=\"w\"> </span><span class=\"s\">\"=eq=\"</span><span class=\"w\"> </span><span class=\"n\">60</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"kp\">assumes</span><span class=\"w\"> </span><span class=\"n\">refl</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"x =eq= x\"</span>\n<span class=\"w\">      </span><span class=\"kp\">and</span><span class=\"w\"> </span><span class=\"n\">symm</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"x =eq= y ⟹ y =eq= x\"</span>\n<span class=\"w\">      </span><span class=\"kp\">and</span><span class=\"w\"> </span><span class=\"n\">trans</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"x =eq= y ⟹ y =eq= z ⟹ x =eq= z\"</span>\n\n<span class=\"k\">instantiation</span><span class=\"w\"> </span><span class=\"n\">nat</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"n\">eq</span>\n<span class=\"k\">begin</span>\n\n<span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">nat_eq</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"nat ⇒ nat ⇒ bool\"</span>\n<span class=\"w\">  </span><span class=\"kp\">where</span>\n<span class=\"w\">  </span><span class=\"s\">\"nat_eq 0 0 = True\"</span>\n<span class=\"o\">|</span><span class=\"w\"> </span><span class=\"s\">\"nat_eq 0 _ = False\"</span>\n<span class=\"o\">|</span><span class=\"w\"> </span><span class=\"s\">\"nat_eq _ 0 = False\"</span>\n<span class=\"o\">|</span><span class=\"w\"> </span><span class=\"s\">\"nat_eq (Suc n) (Suc m) = nat_eq n m\"</span>\n\n\n<span class=\"k\">definition</span><span class=\"w\"> </span><span class=\"n\">eq_nat</span><span class=\"w\"> </span><span class=\"kp\">where</span>\n<span class=\"s\">‹eq_nat = nat_eq›</span>\n\n<span class=\"kn\">instance</span>\n<span class=\"k\">proof</span>\n<span class=\"w\">  </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"s\">\"nat_eq n n\"</span><span class=\"w\"> </span><span class=\"kp\">for</span><span class=\"w\"> </span><span class=\"n\">n</span>\n<span class=\"w\">  </span><span class=\"k\">proof</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">induct</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"o\">)</span>\n<span class=\"w\">    </span><span class=\"k\">case</span><span class=\"w\"> </span><span class=\"n\">0</span>\n<span class=\"w\">    </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"k\">case</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">simp</span>\n<span class=\"w\">  </span><span class=\"k\">next</span>\n<span class=\"w\">    </span><span class=\"k\">case</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Suc</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"o\">)</span>\n<span class=\"w\">    </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"k\">case</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">simp</span>\n<span class=\"w\">  </span><span class=\"k\">qed</span>\n<span class=\"w\">  </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"s\">\"x =eq= x\"</span><span class=\"w\"> </span><span class=\"kp\">for</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"n\">nat</span>\n<span class=\"w\">    </span><span class=\"k\">unfolding</span><span class=\"w\"> </span><span class=\"n\">eq_nat_def</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">blast</span>\n</code></pre></div>",
        "id": 380386222,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1690816752
    },
    {
        "content": "<p>Or</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">instantiation</span><span class=\"w\"> </span><span class=\"n\">nat</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"n\">eq</span>\n<span class=\"k\">begin</span>\n\n<span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">eq_nat</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"nat ⇒ nat ⇒ bool\"</span>\n<span class=\"w\">  </span><span class=\"kp\">where</span>\n<span class=\"w\">  </span><span class=\"s\">\"eq_nat 0 0 = True\"</span>\n<span class=\"o\">|</span><span class=\"w\"> </span><span class=\"s\">\"eq_nat 0 _ = False\"</span>\n<span class=\"o\">|</span><span class=\"w\"> </span><span class=\"s\">\"eq_nat _ 0 = False\"</span>\n<span class=\"o\">|</span><span class=\"w\"> </span><span class=\"s\">\"eq_nat (Suc n) (Suc m) = eq_nat n m\"</span>\n\n\n<span class=\"kn\">instance</span>\n<span class=\"k\">proof</span>\n<span class=\"w\">  </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"s\">\"n =eq= n\"</span><span class=\"w\"> </span><span class=\"kp\">for</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"n\">nat</span>\n<span class=\"w\">  </span><span class=\"k\">proof</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">induct</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"o\">)</span>\n<span class=\"w\">    </span><span class=\"k\">case</span><span class=\"w\"> </span><span class=\"n\">0</span>\n<span class=\"w\">    </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"k\">case</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">simp</span>\n<span class=\"w\">  </span><span class=\"k\">next</span>\n<span class=\"w\">    </span><span class=\"k\">case</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Suc</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"o\">)</span>\n<span class=\"w\">    </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"k\">case</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">simp</span>\n<span class=\"w\">  </span><span class=\"k\">qed</span>\n<span class=\"w\">  </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"s\">\"x =eq= x\"</span><span class=\"w\"> </span><span class=\"kp\">for</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"n\">nat</span>\n<span class=\"w\">    </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">blast</span>\n</code></pre></div>",
        "id": 380386499,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1690816792
    },
    {
        "content": "<p>no clue what error you are talking about…</p>",
        "id": 380386689,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1690816816
    }
]