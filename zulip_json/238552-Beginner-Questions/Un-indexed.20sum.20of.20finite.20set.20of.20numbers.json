[
    {
        "content": "<p>Hi community,</p>\n<p>I am looking for ways to represent functions (maps) on a finite domain and be able to count certain entries in that map easily.<br>\nSay I want to express a system which has two blocks which can be in different states. Such a system can be expressed by a function which we call <code>block_map</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">datatype</span><span class=\"w\"> </span><span class=\"n\">BlockID</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Block1</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Block2</span>\n<span class=\"k\">datatype</span><span class=\"w\"> </span><span class=\"n\">MESI_State</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Modified</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Exclusive</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Shared</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Invalid</span>\n\n<span class=\"k\">type_synonym</span><span class=\"w\"> </span><span class=\"n\">block_map</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"BlockID ⇒ MESI_State\"</span>\n</code></pre></div>\n<p>It is clear that <code>block_map</code> is defined on a finite domain.<br>\nNow if we define a function that count the number of blocks that are in a <code>Shared</code> state, it would look like the following:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">count_sharers</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"block_map ⇒ nat\"</span>\n<span class=\"w\">  </span><span class=\"kp\">where</span><span class=\"w\"> </span><span class=\"s\">\"count_sharers f = finite_sum ((λstate. case state of Shared ⇒ (1::nat) | _ ⇒ 0) ` (f ` (UNIV::BlockID set)))\"</span>\n</code></pre></div>\n<p>It is not sure how the function <code>finite_sum</code> which sums all numbers in a finite set should be defined.<br>\nA search in the FiniteSet theory entry did not give anything useful.<br>\nAn alternative is to define the datatype of a <code>BlockID</code> which takes a natural number parameter, and then doing an indexed sum over the blocks. The natural number parameter needs to be restricted to a finite subset of nat to make the sum finite:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">datatype</span><span class=\"w\"> </span><span class=\"n\">BlockIDSet2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">nat</span><span class=\"ow\">{..</span><span class=\"w\"> </span><span class=\"n\">&lt;</span><span class=\"w\"> </span><span class=\"n\">2</span><span class=\"ow\">}</span>\n<span class=\"k\">datatype</span><span class=\"w\"> </span><span class=\"n\">BlockID2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Block2</span><span class=\"w\"> </span><span class=\"n\">BlockIDSet2</span>\n\n\n<span class=\"k\">type_synonym</span><span class=\"w\"> </span><span class=\"n\">block_map2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"BlockID2 ⇒ MESI_State\"</span>\n\n<span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">count_sharers2</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"block_map2 ⇒ nat\"</span>\n<span class=\"w\">  </span><span class=\"kp\">where</span><span class=\"w\"> </span><span class=\"s\">\"count_sharers2 f = (∑i::nat=0..&lt;2.  (λstate. case state of Shared ⇒ (1::nat) | _ ⇒ 0) (f (Block2 i))   )\"</span>\n</code></pre></div>\n<p>Again I am not sure how to make this finite restriction on datatypes work for Isabelle.</p>\n<p>A MWE code snippet:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">theory</span><span class=\"w\"> </span><span class=\"n\">mweFiniteSum</span><span class=\"w\"> </span><span class=\"kp\">imports</span>\n<span class=\"w\">  </span><span class=\"n\">Main</span>\n<span class=\"k\">begin</span>\n\n\n<span class=\"k\">datatype</span><span class=\"w\"> </span><span class=\"n\">BlockID</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Block1</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Block2</span>\n\n<span class=\"k\">datatype</span><span class=\"w\"> </span><span class=\"n\">MESI_State</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Modified</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Exclusive</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Shared</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Invalid</span>\n\n<span class=\"k\">type_synonym</span><span class=\"w\"> </span><span class=\"n\">block_map</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"BlockID ⇒ MESI_State\"</span>\n\n<span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">count_sharers</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"block_map ⇒ nat\"</span>\n<span class=\"w\">  </span><span class=\"kp\">where</span><span class=\"w\"> </span><span class=\"s\">\"count_sharers f = finite_sum ((λstate. case state of Shared ⇒ (1::nat) | _ ⇒ 0) ` (f ` (UNIV::BlockID set)))\"</span>\n\n\n\n<span class=\"k\">datatype</span><span class=\"w\"> </span><span class=\"n\">BlockIDSet2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">nat</span><span class=\"ow\">{..</span><span class=\"w\"> </span><span class=\"n\">&lt;</span><span class=\"w\"> </span><span class=\"n\">2</span><span class=\"ow\">}</span>\n<span class=\"k\">datatype</span><span class=\"w\"> </span><span class=\"n\">BlockID2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Block2</span><span class=\"w\"> </span><span class=\"n\">BlockIDSet2</span>\n\n\n<span class=\"k\">type_synonym</span><span class=\"w\"> </span><span class=\"n\">block_map2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"BlockID2 ⇒ MESI_State\"</span>\n\n<span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">count_sharers2</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"block_map2 ⇒ nat\"</span>\n<span class=\"w\">  </span><span class=\"kp\">where</span><span class=\"w\"> </span><span class=\"s\">\"count_sharers2 f = (∑i::nat=0..&lt;2.  (λstate. case state of Shared ⇒ (1::nat) | _ ⇒ 0) (f (Block2 i))   )\"</span>\n\n\n<span class=\"k\">end</span>\n</code></pre></div>\n<p>Thanks a lot in advance for your help!</p>",
        "id": 360505839,
        "sender_full_name": "Chengsong Tan",
        "timestamp": 1684842378
    },
    {
        "content": "<p>Maybe <code>Finite_Set.fold</code>?</p>",
        "id": 360807791,
        "sender_full_name": "Kevin Kappelmann",
        "timestamp": 1684938660
    },
    {
        "content": "<p>Or summing over the set directly:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">count_sharers</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"block_map ⇒ nat\"</span>\n<span class=\"w\">  </span><span class=\"kp\">where</span><span class=\"w\"> </span><span class=\"s\">\"count_sharers f = (∑i ∈ (UNIV::BlockID set). if f i = Shared then 1 else 0)\"</span>\n</code></pre></div>",
        "id": 360809243,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1684938983
    },
    {
        "content": "<p>Remark that infinite sets are not really a problem, the sum just becomes empty</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kt\">thm</span><span class=\"w\"> </span><span class=\"n\">Groups_Big.comm_monoid_add_class.sum.infinite</span>\n<span class=\"w\"> </span><span class=\"n\">infinite</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"n\">⟹</span><span class=\"w\"> </span><span class=\"n\">sum</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">g</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">0</span>\n</code></pre></div>",
        "id": 360809910,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1684939137
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"233198\">Mathias Fleury</span> <a href=\"#narrow/stream/238552-Beginner-Questions/topic/Un-indexed.20sum.20of.20finite.20set.20of.20numbers/near/360809243\">said</a>:</p>\n<blockquote>\n<p>Or summing over the set directly:</p>\n<p><div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">count_sharers</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"block_map ⇒ nat\"</span>\n<span class=\"w\">  </span><span class=\"kp\">where</span><span class=\"w\"> </span><span class=\"s\">\"count_sharers f = (∑i ∈ (UNIV::BlockID set). if f i = Shared then 1 else 0)\"</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Thank you! That works. I forgot to emphasise that I wanted to generate executable code. But this works perfectly regardless.</p>",
        "id": 361280075,
        "sender_full_name": "Chengsong Tan",
        "timestamp": 1685096680
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"233154\">Kevin Kappelmann</span> <a href=\"#narrow/stream/238552-Beginner-Questions/topic/Un-indexed.20sum.20of.20finite.20set.20of.20numbers/near/360807791\">said</a>:</p>\n<blockquote>\n<p>Maybe <code>Finite_Set.fold</code>?</p>\n</blockquote>\n<p>Thank you for the pointer!</p>",
        "id": 361280139,
        "sender_full_name": "Chengsong Tan",
        "timestamp": 1685096699
    }
]