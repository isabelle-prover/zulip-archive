[
    {
        "content": "<p>Hello everyone!</p>\n<p>I want to use aencrypt and adecrypt Elgamal from Game Based Crypto (<a href=\"https://www.isa-afp.org/sessions/game_based_crypto/#Elgamal\">https://www.isa-afp.org/sessions/game_based_crypto/#Elgamal</a>) to encrypt/decrypt lists:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">theory</span><span class=\"w\"> </span><span class=\"n\">verifyPlurality</span><span class=\"w\"> </span><span class=\"kp\">imports</span>\n\n<span class=\"s\">\"Game_Based_Crypto.Elgamal\"</span>\n\n<span class=\"k\">begin</span>\n\n<span class=\"k\">context</span><span class=\"w\"> </span><span class=\"n\">ind_cpa</span>\n\n<span class=\"k\">begin</span>\n\n<span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">ballotEncrypt</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"'grp pub_key ⇒ 'a list ⇒ 'a cipher list spmf\"</span>\n\n<span class=\"w\">  </span><span class=\"kp\">where</span>\n\n<span class=\"w\">   </span><span class=\"n\">ballotEncryptNil</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"ballotEncrypt pk [] = []\"</span><span class=\"w\"> </span><span class=\"o\">|</span>\n\n<span class=\"w\">   </span><span class=\"n\">ballotEncryptCons</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"ballotEncrypt pk (x # xs) = (aencrypt pk x) # ballotEncrypt pk  xs\"</span>\n\n<span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">ballotDecrypt</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"'a priv_key ⇒ 'a cipher list ⇒ 'a option\"</span>\n\n<span class=\"w\">  </span><span class=\"kp\">where</span>\n\n<span class=\"w\">    </span><span class=\"n\">ballotDecryptNil</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"ballotDecrypt sk [] = []\"</span><span class=\"w\"> </span><span class=\"o\">|</span>\n\n<span class=\"w\">    </span><span class=\"n\">ballotDecryptCons</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"ballotDecrypt  sk(x # xs) = (adecrypt sk x) # ballotDecrypt sk xs\"</span>\n\n<span class=\"k\">end</span>\n\n<span class=\"k\">end</span>\n</code></pre></div>\n<p>I get this error (same for \"priv_key\", \"cipher\" and \"plain\"):</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"n\">Undefined</span><span class=\"w\"> </span><span class=\"n\">type</span><span class=\"w\"> </span><span class=\"n\">name</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"pub_key\"</span><span class=\"n\">⌂</span>\n\n<span class=\"n\">Failed</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">parse</span><span class=\"w\"> </span><span class=\"n\">type</span>\n</code></pre></div>\n<p>I added \"context ind_cpa\" but it does not seem to help. </p>\n<p>If I copy this</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">type_synonym</span><span class=\"w\"> </span><span class=\"n n-Type\">'grp'</span><span class=\"w\"> </span><span class=\"n\">pub_key</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"'grp'\"</span>\n\n<span class=\"k\">type_synonym</span><span class=\"w\"> </span><span class=\"n n-Type\">'grp'</span><span class=\"w\"> </span><span class=\"n\">priv_key</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">nat</span>\n\n<span class=\"k\">type_synonym</span><span class=\"w\"> </span><span class=\"n n-Type\">'grp'</span><span class=\"w\"> </span><span class=\"n\">plain</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n n-Type\">'grp'</span>\n\n<span class=\"k\">type_synonym</span><span class=\"w\"> </span><span class=\"n n-Type\">'grp'</span><span class=\"w\"> </span><span class=\"n\">cipher</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"'grp' × 'grp'\"</span>\n</code></pre></div>\n<p>from Elgamal.thy into my code, I get other errors.<br>\n... at ballotEncrypt:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"n\">Type</span><span class=\"w\"> </span><span class=\"n\">unification</span><span class=\"w\"> </span><span class=\"n\">failed</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Clash</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">types</span><span class=\"w\"> </span><span class=\"s\">\"_ list\"</span><span class=\"w\"> </span><span class=\"kp\">and</span><span class=\"w\"> </span><span class=\"s\">\"_ pmf\"</span>\n\n<span class=\"n\">Type</span><span class=\"w\"> </span><span class=\"n\">error</span><span class=\"w\"> </span><span class=\"kp\">in</span><span class=\"w\"> </span><span class=\"n\">application</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">incompatible</span><span class=\"w\"> </span><span class=\"n\">operand</span><span class=\"w\"> </span><span class=\"n\">type</span>\n\n<span class=\"n\">Operator</span><span class=\"o\">:</span><span class=\"w\">  </span><span class=\"o\">(=)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">ballotEncrypt</span><span class=\"w\"> </span><span class=\"n\">pk</span><span class=\"w\"> </span><span class=\"o\">[])</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n n-Type\">'a</span><span class=\"w\"> </span><span class=\"n\">×</span><span class=\"w\"> </span><span class=\"n n-Type\">'a</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">list</span><span class=\"w\"> </span><span class=\"n\">spmf</span><span class=\"w\"> </span><span class=\"n\">⇒</span><span class=\"w\"> </span><span class=\"n\">bool</span>\n\n<span class=\"n\">Operand</span><span class=\"o\">:</span><span class=\"w\">   </span><span class=\"o\">[]</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"o\">??</span><span class=\"n n-Type\">'a</span><span class=\"w\"> </span><span class=\"n\">list</span>\n\n<span class=\"n\">Coercion</span><span class=\"w\"> </span><span class=\"n\">Inference</span><span class=\"o\">:</span>\n\n<span class=\"n\">Local</span><span class=\"w\"> </span><span class=\"n\">coercion</span><span class=\"w\"> </span><span class=\"n\">insertion</span><span class=\"w\"> </span><span class=\"n\">on</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">operand</span><span class=\"w\"> </span><span class=\"n\">failed</span><span class=\"o\">:</span>\n\n<span class=\"n\">No</span><span class=\"w\"> </span><span class=\"n\">coercion</span><span class=\"w\"> </span><span class=\"n\">known</span><span class=\"w\"> </span><span class=\"kp\">for</span><span class=\"w\"> </span><span class=\"n\">type</span><span class=\"w\"> </span><span class=\"n\">constructors</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"list\"</span><span class=\"w\"> </span><span class=\"kp\">and</span><span class=\"w\"> </span><span class=\"s\">\"pmf\"</span>\n</code></pre></div>\n<p>... at ballotDecrypt:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"n\">Type</span><span class=\"w\"> </span><span class=\"n\">unification</span><span class=\"w\"> </span><span class=\"n\">failed</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Clash</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">types</span><span class=\"w\"> </span><span class=\"s\">\"_ list\"</span><span class=\"w\"> </span><span class=\"kp\">and</span><span class=\"w\"> </span><span class=\"s\">\"_ option\"</span>\n\n<span class=\"n\">Type</span><span class=\"w\"> </span><span class=\"n\">error</span><span class=\"w\"> </span><span class=\"kp\">in</span><span class=\"w\"> </span><span class=\"n\">application</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">incompatible</span><span class=\"w\"> </span><span class=\"n\">operand</span><span class=\"w\"> </span><span class=\"n\">type</span>\n\n<span class=\"n\">Operator</span><span class=\"o\">:</span><span class=\"w\">  </span><span class=\"o\">(=)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">ballotDecrypt</span><span class=\"w\"> </span><span class=\"n\">sk</span><span class=\"w\"> </span><span class=\"o\">[])</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"n n-Type\">'a</span><span class=\"w\"> </span><span class=\"n\">option</span><span class=\"w\"> </span><span class=\"n\">⇒</span><span class=\"w\"> </span><span class=\"n\">bool</span>\n<span class=\"n\">Operand</span><span class=\"o\">:</span><span class=\"w\">   </span><span class=\"o\">[]</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"o\">??</span><span class=\"n n-Type\">'a</span><span class=\"w\"> </span><span class=\"n\">list</span>\n\n<span class=\"n\">Coercion</span><span class=\"w\"> </span><span class=\"n\">Inference</span><span class=\"o\">:</span>\n\n<span class=\"n\">Local</span><span class=\"w\"> </span><span class=\"n\">coercion</span><span class=\"w\"> </span><span class=\"n\">insertion</span><span class=\"w\"> </span><span class=\"n\">on</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">operand</span><span class=\"w\"> </span><span class=\"n\">failed</span><span class=\"o\">:</span>\n<span class=\"n\">No</span><span class=\"w\"> </span><span class=\"n\">coercion</span><span class=\"w\"> </span><span class=\"n\">known</span><span class=\"w\"> </span><span class=\"kp\">for</span><span class=\"w\"> </span><span class=\"n\">type</span><span class=\"w\"> </span><span class=\"n\">constructors</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"list\"</span><span class=\"w\"> </span><span class=\"kp\">and</span><span class=\"w\"> </span><span class=\"s\">\"option\"</span>\n</code></pre></div>\n<p>Can anyone help with these issues? Thank you very much!</p>",
        "id": 435795879,
        "sender_full_name": "Jamie",
        "timestamp": 1714258868
    },
    {
        "content": "<p><code>pub_key</code> is part of <code>elgamal_base</code> not of <code>ind_cpa</code></p>",
        "id": 435834334,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1714283129
    },
    {
        "content": "<p>The typing error message is clear isn't it? you have set the type to be a spmf, but you want to return a list <code>[]</code> which is not a spmf</p>",
        "id": 435834830,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1714283253
    },
    {
        "content": "<p>so either you change your return type to a list</p>",
        "id": 435834860,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1714283261
    },
    {
        "content": "<p>or you return a spmf</p>",
        "id": 435834891,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1714283268
    },
    {
        "content": "<p>your <code>ballotEncrypt/Decrypt</code> should be written in the <code>spmf</code> monad I recommend reading the tutorial associated with CryptHOL if you're unfamiliar with that</p>",
        "id": 435835902,
        "sender_full_name": "Yong Kiam",
        "timestamp": 1714284032
    },
    {
        "content": "<p>Thank you for the help everyone! :)</p>",
        "id": 436953646,
        "sender_full_name": "Jamie",
        "timestamp": 1714767801
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"234226\">Yong Kiam</span> <a href=\"#narrow/stream/238552-Beginner-Questions/topic/Undefined.20type.20names.20and.20failed.20type.20unification/near/435835902\">schrieb</a>:</p>\n<blockquote>\n<p>your <code>ballotEncrypt/Decrypt</code> should be written in the <code>spmf</code> monad I recommend reading the tutorial associated with CryptHOL if you're unfamiliar with that</p>\n</blockquote>\n<p>Thank you, I already looked it up. Why do you recommend the smpf monad over my first idea? I thought it would be sufficient to encrypt/decrypt lists. It currently looks like this (probably no suprises, but fixed the unification):</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">theory</span><span class=\"w\"> </span><span class=\"n\">verifyPlurality</span><span class=\"w\"> </span><span class=\"kp\">imports</span>\n<span class=\"s\">\"Game_Based_Crypto.Elgamal\"</span>\n<span class=\"k\">begin</span>\n<span class=\"k\">context</span><span class=\"w\"> </span><span class=\"n\">elgamal_base</span>\n<span class=\"k\">begin</span>\n\n<span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">ballotEncrypt</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"'grp pub_key =&gt; 'grp list =&gt; 'grp cipher spmf list\"</span>\n<span class=\"w\">  </span><span class=\"kp\">where</span>\n<span class=\"w\">   </span><span class=\"n\">ballotEncryptNil</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"ballotEncrypt pk [] = []\"</span><span class=\"w\"> </span><span class=\"o\">|</span>\n<span class=\"w\">   </span><span class=\"n\">ballotEncryptCons</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"ballotEncrypt pk (x # xs) = (aencrypt pk x) # ballotEncrypt pk xs\"</span>\n\n<span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">ballotDecrypt</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"'grp priv_key =&gt; 'grp cipher list =&gt; 'grp option list\"</span>\n<span class=\"w\">  </span><span class=\"kp\">where</span>\n<span class=\"w\">    </span><span class=\"n\">ballotDecryptNil</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"ballotDecrypt sk [] = []\"</span><span class=\"w\"> </span><span class=\"o\">|</span>\n<span class=\"w\">    </span><span class=\"n\">ballotDecryptCons</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"ballotDecrypt sk (x # xs) = (adecrypt sk x) # ballotDecrypt sk xs\"</span>\n<span class=\"k\">end</span>\n<span class=\"k\">end</span>\n</code></pre></div>",
        "id": 436954522,
        "sender_full_name": "Jamie",
        "timestamp": 1714768239
    },
    {
        "content": "<p>Isn't it generally more secure to encrypt the entire message instead of each part separately?</p>",
        "id": 437219475,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1714985102
    },
    {
        "content": "<p>At least with your method you leak the length of the list</p>",
        "id": 437219516,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1714985116
    },
    {
        "content": "<p>That's right, but I want to encrypt/decrypt a ballot paper that is structured as a list (most favoured option at the beginning, least favoured option at the end), the length of the list is the number of options/candidates and is therefore known anyway.<br>\nI also have to add up the ballots homomorphically at the end and I thought the best way to do this was to encode everything individually.</p>",
        "id": 437351629,
        "sender_full_name": "Jamie",
        "timestamp": 1715036775
    }
]