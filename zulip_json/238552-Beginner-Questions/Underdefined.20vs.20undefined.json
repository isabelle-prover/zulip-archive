[
    {
        "content": "<p>Hello <span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> There is a quote from the \"Concrete semantics\" book:<br>\n<code>HOL is a logic of total functions, hd [] is defined, but we do not know what the result is. That is, hd [] is not undefined but underdefined</code><br>\nCan someone clarify difference between those notions?</p>",
        "id": 308984476,
        "sender_full_name": "Nikola Katić",
        "timestamp": 1668085677
    },
    {
        "content": "<p>Hi, there is a really good blog post here: <a href=\"https://www.joachim-breitner.de/blog/732-Isabelle_functions__Always_total%2C_sometimes_undefined\">https://www.joachim-breitner.de/blog/732-Isabelle_functions__Always_total%2C_sometimes_undefined</a></p>",
        "id": 308984693,
        "sender_full_name": "Robert Soeldner",
        "timestamp": 1668085751
    },
    {
        "content": "<p>I hoped there is a more direct explanation <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span> After skim reading it, I saw comparisons with Coq and Haskell, which is nice, since I have some background in those. I'll definitely save it and read it carefully. Thanks for the article!</p>",
        "id": 308987833,
        "sender_full_name": "Nikola Katić",
        "timestamp": 1668086800
    },
    {
        "content": "<p>Well, the short answer is: ‘undefined’ suggests that <code>hd []</code> is something that we are not even allowed to write down. And that perhaps we can test whether or not <code>hd []</code> is defined or not. But we can't.</p>",
        "id": 309037446,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1668100999
    },
    {
        "content": "<p>Rather, the situation is such that we know that <code>hd ([] :: nat list)</code> is some natural number, but we don't know which one it is. So in that sense, the <code>hd</code> function is underdefined. The system gives us some function <code>nat ⇒ nat list</code>, and for non-empty lists we know exactly what it is, but for the empty list as an input we know absolutely nothing (other than that it will be some natural number).</p>",
        "id": 309037739,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1668101071
    },
    {
        "content": "<p>Jasmin once described it to me along the lines of: \"<code>hd []</code> has a value, but it changes every time Isabelle restarts\"</p>",
        "id": 309038606,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1668101297
    },
    {
        "content": "<p>haha, that's a good one. <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 309039634,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1668101599
    },
    {
        "content": "<p>The value of <code>hd []</code> is only available with Isabelle Professional or Isabelle Enterprise Edition.</p>",
        "id": 309039830,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1668101648
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"233198\">Mathias Fleury</span> <a href=\"#narrow/stream/238552-Beginner-Questions/topic/Underdefined.20vs.20undefined/near/309038606\">said</a>:</p>\n<blockquote>\n<p>Jasmin once described it to me along the lines of: \"<code>hd []</code> has a value, but it changes every time Isabelle restarts\"</p>\n</blockquote>\n<p>Well, I think this explanation is misleading; the underdefinedness has nothing to do with Isabelle runs. I rather see it like this: The HOL theory (what you get if you use Isabelle/HOL) is just a theory; it gives only logical statement about what holds and what not. This theory can have several models: several assignments of concrete values to variables like <code>hd</code>. With one model <code>hd [] :: nat</code> is <code>0</code>, with another one it is <code>1000</code>, and so on. All these different models (different “definitions” of <code>hd</code>) are compatible with what Isabelle/HOL states.</p>",
        "id": 309055939,
        "sender_full_name": "Wolfgang Jeltsch",
        "timestamp": 1668106490
    },
    {
        "content": "<p>I think the core of my message is this: In a functional programming language, like Haskell, you always <em>define</em> variables. For example, you say what <code>head</code> (Haskell’s equivalent of Isabelle’s <code>hd</code>) is: <code>head [0]</code>, for instance, is <code>0</code> and <code>head []</code> is <code>⊥</code>, a special value that is of the natural number type, but is different from any true natural number. In Isabelle, on the other hand, you provide an, often partial, specification of properties of your variables. For example, you say that <code>hd [0]</code> is <code>0</code>, but you say absolutely nothing about <code>hd []</code>. It must be one true natural number (as there is no <code>⊥</code>), but it is simply not known which one it is.</p>",
        "id": 309056699,
        "sender_full_name": "Wolfgang Jeltsch",
        "timestamp": 1668106750
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"423655\">Wolfgang Jeltsch</span> <a href=\"#narrow/stream/238552-Beginner-Questions/topic/Underdefined.20vs.20undefined/near/309055939\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"233198\">Mathias Fleury</span> <a href=\"#narrow/stream/238552-Beginner-Questions/topic/Underdefined.20vs.20undefined/near/309038606\">said</a>:</p>\n<blockquote>\n<p>Jasmin once described it to me along the lines of: \"<code>hd []</code> has a value, but it changes every time Isabelle restarts\"</p>\n</blockquote>\n<p>Well, I think this explanation is misleading; the underdefinedness has nothing to do with Isabelle runs. I rather see it like this: The HOL theory (what you get if you use Isabelle/HOL) is just a theory; it gives only logical statement about what holds and what not. This theory can have several models: several assignments of concrete values to variables like <code>hd</code>. With one model <code>hd [] :: nat</code> is <code>0</code>, with another one it is <code>1000</code>, and so on. All these different models (different “definitions” of <code>hd</code>) are compatible with what Isabelle/HOL states.</p>\n</blockquote>\n<p>Yeah, but you within one isabelle run, the value is constant (<code>hd ([]::'a list) = hd ([] :: 'a list)</code>).  You need a restart for the value to change. Hence it has something to do with Isabelle runs.</p>",
        "id": 309057067,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1668106856
    },
    {
        "content": "<p>although you are right and  it has nothing to do with isabelle runs</p>",
        "id": 309057166,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1668106892
    },
    {
        "content": "<p>Note that the approach of using “underdefinedness” has some interesting consequences. Take <code>undefined</code> which has the polymorphic value <code>'a</code> and for each concrete type is some value about which we don’t know anything (the name might be misleading, specifically if you come from Haskell). You can prove the statement <code>undefined = False ∨ undefined = True</code> (<code>'a</code> being specialized to <code>bool</code> via type inference here), but you don’t know which of the booleans it is. Also, you can prove <code>undefined = undefined</code>, because in each concrete model there is a concrete <code>undefined</code> (otherwise, referential transparency wouldn’t hold), but if you defined another constant, say <code>undefined'</code>, about which you don’t say anything, then <code>undefined = undefined'</code> wouldn’t be provable.</p>",
        "id": 309057589,
        "sender_full_name": "Wolfgang Jeltsch",
        "timestamp": 1668107029
    },
    {
        "content": "<blockquote>\n<p>Yeah, but you within one isabelle run, the value is constant (hd ([]::'a list) = hd ([] :: 'a list)).</p>\n</blockquote>\n<p>My view is different: There is just not <em>the</em> value of <code>hd</code>, not even within a single Isabelle run. There is a set of permissible assignments of concrete values to the constants of the HOL theory (like <code>hd</code>). However, the statement <code>(hd ([]::'a list) = hd ([] :: 'a list)</code> is still true, because being true means being true for each particular permissible assignment, and each particular assignment has a single value for <code>hd []</code>.</p>\n<p>Note that this view has an advantage when it comes to contradictions, which you can introduce when stating axioms. Say you write the following:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">axiomatization</span><span class=\"w\"> </span><span class=\"kp\">where</span><span class=\"w\"> </span><span class=\"n\">contradiction</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"hd [] = 0 ∧ hd [] = 1\"</span><span class=\"w\"></span>\n</code></pre></div>\n<p>What value does <code>hd []</code> have now for you current Isabelle run? There can’t be any. However, it is still true that, for example, <code>(hd ([]::'a list) = hd ([] :: 'a list)</code> holds for every model of your theory: there is just no model of your theory; so any statement holds.</p>",
        "id": 309060383,
        "sender_full_name": "Wolfgang Jeltsch",
        "timestamp": 1668107926
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"233198\">Mathias Fleury</span> <a href=\"#narrow/stream/238552-Beginner-Questions/topic/Underdefined.20vs.20undefined/near/309038606\">said</a>:</p>\n<blockquote>\n<p>Jasmin once described it to me along the lines of: \"<code>hd []</code> has a value, but it changes every time Isabelle restarts\"</p>\n</blockquote>\n<p>Can't remember saying that! :)</p>",
        "id": 309583841,
        "sender_full_name": "Jasmin Blanchette",
        "timestamp": 1668427475
    }
]