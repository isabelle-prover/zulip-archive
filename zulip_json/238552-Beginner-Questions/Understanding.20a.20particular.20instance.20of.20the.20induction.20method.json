[
    {
        "content": "<p>I've stumbled across a use of an induction rule I don't quite understand and got stuck there. The Original is found in $AFP/thy/Goodstein_Lambda/Goodstein_Lambda.thy@554</p>\n<p>It is an Instance of <code>less_Suc_induct</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"n\">less_Suc_induct</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">consumes</span><span class=\"w\"> </span><span class=\"n\">1</span><span class=\"o\">]:</span>\n<span class=\"w\">  </span><span class=\"kp\">assumes</span><span class=\"w\"> </span><span class=\"n\">less</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"i &lt; j\"</span>\n<span class=\"w\">    </span><span class=\"kp\">and</span><span class=\"w\"> </span><span class=\"n\">step</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"⋀i. P i (Suc i)\"</span>\n<span class=\"w\">    </span><span class=\"kp\">and</span><span class=\"w\"> </span><span class=\"n\">trans</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"⋀i j k. i &lt; j ⟹ j &lt; k ⟹ P i j ⟹ P j k ⟹ P i k\"</span>\n<span class=\"w\">  </span><span class=\"kp\">shows</span><span class=\"w\"> </span><span class=\"s\">\"P i j\"</span>\n</code></pre></div>\n<p>and takes the form (plus auxiliary facts with free variables <code>n</code>, <code>m</code>, which I've dropped for simplicity)</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"n\">const</span><span class=\"w\"> </span><span class=\"n\">evalC</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"nat =&gt; 'a =&gt; nat\"</span>\n\n<span class=\"k\">show</span><span class=\"w\"> </span><span class=\"s\">\"evalC (Suc b) n &lt; evalC (Suc b) m\"</span><span class=\"w\"> </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"s\">‹evalC b n &lt; evalC b m›</span>\n<span class=\"k\">proof</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">induct</span><span class=\"w\"> </span><span class=\"s\">\"evalC b n\"</span><span class=\"w\"> </span><span class=\"s\">\"evalC b m\"</span><span class=\"w\"> </span><span class=\"n\">arbitrary</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"w\"> </span><span class=\"n\">rule</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">less_Suc_induct</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>and returns the goal state</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"w\"> </span><span class=\"n\">1.</span><span class=\"w\"> </span><span class=\"n\">⋀n</span><span class=\"w\"> </span><span class=\"n\">m.</span><span class=\"w\"> </span><span class=\"n\">Suc</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">evalC</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">evalC</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"w\"> </span><span class=\"n\">⟹</span>\n<span class=\"w\">           </span><span class=\"n\">evalC</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Suc</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"n\">&lt;</span><span class=\"w\"> </span><span class=\"n\">evalC</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Suc</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">m</span>\n<span class=\"w\"> </span><span class=\"n\">2.</span><span class=\"w\"> </span><span class=\"n\">⋀j</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"n\">m.</span>\n<span class=\"w\">       </span><span class=\"n\">⟦evalC</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"n\">&lt;</span><span class=\"w\"> </span><span class=\"n\">j;</span><span class=\"w\"> </span><span class=\"n\">j</span><span class=\"w\"> </span><span class=\"n\">&lt;</span><span class=\"w\"> </span><span class=\"n\">evalC</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"n\">m;</span>\n<span class=\"w\">        </span><span class=\"n\">⋀na</span><span class=\"w\"> </span><span class=\"n\">m.</span><span class=\"w\"> </span><span class=\"n\">⟦evalC</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">evalC</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"n\">na;</span><span class=\"w\"> </span><span class=\"n\">j</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">evalC</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"n\">m⟧</span><span class=\"w\"> </span><span class=\"n\">⟹</span><span class=\"w\"> </span><span class=\"n\">evalC</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Suc</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">na</span><span class=\"w\"> </span><span class=\"n\">&lt;</span><span class=\"w\"> </span><span class=\"n\">evalC</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Suc</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"w\"> </span><span class=\"n\">;</span>\n<span class=\"w\">        </span><span class=\"n\">⋀n</span><span class=\"w\"> </span><span class=\"n\">ma.</span><span class=\"w\"> </span><span class=\"n\">⟦j</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">evalC</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"n\">n;</span><span class=\"w\"> </span><span class=\"n\">evalC</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">evalC</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"n\">ma⟧</span><span class=\"w\"> </span><span class=\"n\">⟹</span><span class=\"w\"> </span><span class=\"n\">evalC</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Suc</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"n\">&lt;</span><span class=\"w\"> </span><span class=\"n\">evalC</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Suc</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">ma⟧</span>\n<span class=\"w\">       </span><span class=\"n\">⟹</span><span class=\"w\"> </span><span class=\"n\">evalC</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Suc</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"n\">&lt;</span><span class=\"w\"> </span><span class=\"n\">evalC</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Suc</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">m</span>\n</code></pre></div>\n<p>Naively, <code>i</code> and <code>j</code> in the induction rule would be \"evalC b n\" and \"evalC b m\" respectively, but how would write down P then, since i'd have to deconstruct a function application? <br>\n(Sidenote: in fact, the rule doesn't add any premises, if  \"evalC b n\" and \"evalC b m\" are not explicitly given)</p>\n<p>My best guess is that isabelle interprets this a kind of measure function we are inducting along, but what is actually happening here?</p>",
        "id": 520305133,
        "sender_full_name": "Alexander Pach",
        "timestamp": 1748189680
    },
    {
        "content": "<p>When induct over a term, <code>induct</code> essentially introduces an equality for that term in <code>P</code> and inducts over the variable, i.e. the instantiation of the rule is something like (missing the generalization):</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kt\">thm</span><span class=\"w\"> </span><span class=\"n\">less_Suc_induct</span><span class=\"o\">[</span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"s\">\"Suc b\"</span><span class=\"w\"> </span><span class=\"s\">\"λxi xj. (xi = evalC b n ∧ xj = evalC b m ∧ evalC b n &lt; evalC b m ⟶ evalC (Suc b) n &lt; evalC (Suc b) m)\"</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 530752505,
        "sender_full_name": "Fabian Huch",
        "timestamp": 1753442738
    }
]