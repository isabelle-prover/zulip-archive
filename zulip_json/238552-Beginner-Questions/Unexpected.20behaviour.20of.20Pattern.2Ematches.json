[
    {
        "content": "<p>I am using <code>Pattern.matches</code> like so</p>\n<div class=\"codehilite\" data-code-language=\"Standard ML\"><pre><span></span><code><span class=\"kr\">val</span> <span class=\"nv\">binop_pat</span> <span class=\"p\">=</span> <span class=\"nn\">Proof_Context</span><span class=\"p\">.</span><span class=\"n\">read_term_pattern</span> <span class=\"n\">ctxt</span> <span class=\"s2\">\"?x ?y ?z\"</span>\n\n<span class=\"kr\">fun</span> <span class=\"nf\">f</span> <span class=\"n\">args</span> <span class=\"p\">=</span>\n  <span class=\"p\">...</span>\n  <span class=\"kr\">else</span> <span class=\"kr\">if</span> <span class=\"nn\">Pattern</span><span class=\"p\">.</span><span class=\"n\">matches</span> <span class=\"n\">thy</span> <span class=\"p\">(</span><span class=\"n\">binop_pat</span><span class=\"p\">,</span> <span class=\"n\">t</span><span class=\"p\">)</span> <span class=\"kr\">then</span> <span class=\"p\">(</span><span class=\"kr\">case</span> <span class=\"n\">t</span> <span class=\"kr\">of</span> <span class=\"p\">(</span><span class=\"n\">t1</span> <span class=\"n\">$</span> <span class=\"n\">t2</span> <span class=\"n\">$</span> <span class=\"n\">t3</span><span class=\"p\">)</span> <span class=\"p\">=&gt;</span> <span class=\"p\">...)</span>\n  <span class=\"p\">...</span>\n</code></pre></div>\n<p>Somehow the match succeeds but the <code>t</code> does not have the form <code>t1 $ t2 $ t3</code>. How can that be?</p>",
        "id": 222449687,
        "sender_full_name": "Lukas Stevens",
        "timestamp": 1610466459
    },
    {
        "content": "<p>Wild guess without running Isabelle: <code>(t1 $ t2 ) $ t3</code>?</p>",
        "id": 222450162,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1610466639
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>ML ‹\nval ctxt = @{context}\nval binop_pat = Proof_Context.read_term_pattern ctxt &quot;?x ?y ?z&quot;;\nval thy = @{theory};\nval t = @{term ‹ab›};\nval _= if Pattern.matches thy (binop_pat, t) then\n   (case t of t1 $ t2 $ t3 =&gt;\n      @{print} (&quot;yes&quot;, t1)\n  | _ =&gt; @{print} (&quot;no case&quot;, t))\nelse @{print} (&quot;not matching&quot;, t)\n›\n</code></pre></div>\n<p>prints \"not matching\" as expected. What  kind of t do you have?</p>",
        "id": 222451410,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1610467132
    },
    {
        "content": "<p>I was hoping that there may be a glaring oversight by me which can be easily explained :D. I will investigate what the term is now.</p>",
        "id": 222451543,
        "sender_full_name": "Lukas Stevens",
        "timestamp": 1610467183
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>(@{print} t; raise Fail &quot;&quot;)\n</code></pre></div>\n<p>is very useful for such cases</p>",
        "id": 222451848,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1610467292
    },
    {
        "content": "<p><code>@{term \"λx. f y z x\"}</code> should match your pattern</p>",
        "id": 222454329,
        "sender_full_name": "Simon Roßkopf",
        "timestamp": 1610468124
    },
    {
        "content": "<p>This means that I should eta-contract <code>t</code> before destructuring it, I guess?</p>",
        "id": 222455544,
        "sender_full_name": "Lukas Stevens",
        "timestamp": 1610468637
    },
    {
        "content": "<p>Thanks, that seems to work.</p>",
        "id": 222459573,
        "sender_full_name": "Lukas Stevens",
        "timestamp": 1610470185
    }
]