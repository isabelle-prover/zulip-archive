[
    {
        "content": "<p>If I have <br>\n<code>definition (in A) B where \"B = t\"</code><br>\nwhere <code>A</code>is a locale, <code>B</code> is a new constant, and <code>t</code> is a term, then how do I later unfold the definition of <code>B</code> in a proof?<br>\nI can't figure out the syntax. </p>\n<p>I want to prove<br>\n<code>theorem mythm: \"X ==&gt; B ==&gt; C\"</code><br>\nwhere <code>X</code> is some assumption which is strong enough to let me prove the locale predicate for <code>A</code> and let me unfold the definition of <code>B.</code><br>\nBut I don't declare <code>(in locale A)</code>.</p>\n<p>Do I have to use the \"interpretation\" keyword?</p>",
        "id": 400832429,
        "sender_full_name": "Patrick Nicodemus",
        "timestamp": 1699399328
    },
    {
        "content": "<p>I want to prove</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">theorem</span><span class=\"w\"> </span><span class=\"n\">nat_trans_assoc</span><span class=\"w\"> </span><span class=\"o\">:</span>\n<span class=\"s\">\"nat_trans C D F1 F2 τ ⟹ nat_trans C D F2 F3 σ ⟹ nat_trans C D F3 F4 ρ ⟹</span>\n<span class=\"s\">  nat_trans_comp C D F1 F3 F4 (nat_trans_comp C D F1 F2 F3 τ σ) ρ =</span>\n<span class=\"s\">  nat_trans_comp C D F1 F2 F4 τ (nat_trans_comp C D F2 F3 F4 σ ρ)\"</span>\n<span class=\"k\">proof</span>\n</code></pre></div>\n<p>Here, <code>nat_trans_comp</code> is a definition which lives in a locale called <code>nat_trans_comp_context</code>.<br>\nIn order to unfold the definition of <code>nat_trans_comp</code>, I assumed I would just have to prove </p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"w\">  </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"n\">p1</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"nat_trans_comp_context C D F1 F2 F3 τ σ\"</span>\n</code></pre></div>\n<p>and then do something like</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"w\">    </span><span class=\"kp\">apply</span><span class=\"o\">(</span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"n\">add</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">p1</span><span class=\"w\"> </span><span class=\"n\">nat_trans_comp_context.nat_trans_comp_def</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>or</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">p1</span>\n<span class=\"w\">    </span><span class=\"k\">unfolding</span><span class=\"w\"> </span><span class=\"n\">nat_trans_comp_context.nat_trans_comp_def</span>\n</code></pre></div>\n<p>but neither of these seem to give me what I want.</p>",
        "id": 400832682,
        "sender_full_name": "Patrick Nicodemus",
        "timestamp": 1699399482
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">locale</span><span class=\"w\"> </span><span class=\"n\">test</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">  </span><span class=\"kp\">fixes</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"n\">nat</span>\n<span class=\"w\">  </span><span class=\"kp\">assumes</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"a = 3\"</span>\n\n<span class=\"k\">definition</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"kp\">in</span><span class=\"w\"> </span><span class=\"n\">test</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">mycst</span><span class=\"w\"> </span><span class=\"kp\">where</span>\n<span class=\"w\">  </span><span class=\"s\">‹mycst = a * a›</span>\n\n<span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"kp\">in</span><span class=\"w\"> </span><span class=\"n\">test</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">a_squared</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"a *a = 9\"</span>\n<span class=\"w\">  </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">auto</span>\n\n\n<span class=\"kn\">lemma</span>\n<span class=\"w\">  </span><span class=\"kp\">fixes</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"n\">nat</span>\n<span class=\"w\">  </span><span class=\"kp\">assumes</span><span class=\"w\"> </span><span class=\"s\">\"a = 3\"</span>\n<span class=\"w\">  </span><span class=\"kp\">shows</span><span class=\"w\"> </span><span class=\"s\">\"a*a=9\"</span>\n<span class=\"k\">proof</span><span class=\"w\"> </span><span class=\"o\">-</span>\n<span class=\"w\">  </span><span class=\"k\">interpret</span><span class=\"w\"> </span><span class=\"n\">test</span><span class=\"w\"> </span><span class=\"n\">a</span>\n<span class=\"w\">    </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"n\">unfold_locales</span>\n<span class=\"w\">    </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">use</span><span class=\"w\"> </span><span class=\"n\">assms</span><span class=\"w\"> </span><span class=\"kp\">in</span><span class=\"w\"> </span><span class=\"n\">auto</span><span class=\"o\">)</span>\n<span class=\"w\">    </span><span class=\"k\">done</span>\n<span class=\"w\">  </span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">thesis</span>\n<span class=\"w\">    </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">rule</span><span class=\"w\"> </span><span class=\"n\">a_squared</span><span class=\"o\">)</span>\n<span class=\"k\">qed</span>\n</code></pre></div>",
        "id": 400875778,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1699423104
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"233198\">Mathias Fleury</span> <a href=\"#narrow/stream/238552-Beginner-Questions/topic/Unfolding.20definitions.20in.20locale/near/400875778\">said</a>:</p>\n<blockquote>\n<p><div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">locale</span><span class=\"w\"> </span><span class=\"n\">test</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">  </span><span class=\"kp\">fixes</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"n\">nat</span>\n<span class=\"w\">  </span><span class=\"kp\">assumes</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"a = 3\"</span>\n\n<span class=\"k\">definition</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"kp\">in</span><span class=\"w\"> </span><span class=\"n\">test</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">mycst</span><span class=\"w\"> </span><span class=\"kp\">where</span>\n<span class=\"w\">  </span><span class=\"s\">‹mycst = a * a›</span>\n\n<span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"kp\">in</span><span class=\"w\"> </span><span class=\"n\">test</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">a_squared</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"a *a = 9\"</span>\n<span class=\"w\">  </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">auto</span>\n\n\n<span class=\"kn\">lemma</span>\n<span class=\"w\">  </span><span class=\"kp\">fixes</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"n\">nat</span>\n<span class=\"w\">  </span><span class=\"kp\">assumes</span><span class=\"w\"> </span><span class=\"s\">\"a = 3\"</span>\n<span class=\"w\">  </span><span class=\"kp\">shows</span><span class=\"w\"> </span><span class=\"s\">\"a*a=9\"</span>\n<span class=\"k\">proof</span><span class=\"w\"> </span><span class=\"o\">-</span>\n<span class=\"w\">  </span><span class=\"k\">interpret</span><span class=\"w\"> </span><span class=\"n\">test</span><span class=\"w\"> </span><span class=\"n\">a</span>\n<span class=\"w\">    </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"n\">unfold_locales</span>\n<span class=\"w\">    </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">use</span><span class=\"w\"> </span><span class=\"n\">assms</span><span class=\"w\"> </span><span class=\"kp\">in</span><span class=\"w\"> </span><span class=\"n\">auto</span><span class=\"o\">)</span>\n<span class=\"w\">    </span><span class=\"k\">done</span>\n<span class=\"w\">  </span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">thesis</span>\n<span class=\"w\">    </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">rule</span><span class=\"w\"> </span><span class=\"n\">a_squared</span><span class=\"o\">)</span>\n<span class=\"k\">qed</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Thank you I think I have it now</p>",
        "id": 400938281,
        "sender_full_name": "Patrick Nicodemus",
        "timestamp": 1699448195
    },
    {
        "content": "<p>.</p>",
        "id": 400938403,
        "sender_full_name": "Patrick Nicodemus",
        "timestamp": 1699448247
    }
]