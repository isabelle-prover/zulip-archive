[
    {
        "content": "<p>Hi :) I am using the time monad from <code>Root_Balanced_Tree.Time_Monad</code>, and having trouble with proving termination for one function. The following is a minimal example:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">theory</span><span class=\"w\"> </span><span class=\"n\">Scratch</span>\n<span class=\"w\">  </span><span class=\"kp\">imports</span><span class=\"w\"> </span><span class=\"n\">Root_Balanced_Tree.Time_Monad</span>\n<span class=\"k\">begin</span>\n\n<span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">drop_tm</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"nat ⇒ 'a list ⇒ 'a list tm\"</span><span class=\"w\"> </span><span class=\"kp\">where</span>\n<span class=\"s\">\"drop_tm n [] =1 return []\"</span>\n<span class=\"o\">|</span><span class=\"w\"> </span><span class=\"s\">\"drop_tm n (x # xs) =1 (case n of 0 ⇒ return (x # xs) | Suc m ⇒</span>\n<span class=\"s\">    do {</span>\n<span class=\"s\">      r ← drop_tm m xs;</span>\n<span class=\"s\">      return r</span>\n<span class=\"s\">    })\"</span>\n\n<span class=\"kn\">function</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">sequential</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">test</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"'a list ⇒ 'a list list tm\"</span><span class=\"w\"> </span><span class=\"kp\">where</span>\n<span class=\"s\">\"test [] = return []\"</span>\n<span class=\"o\">|</span><span class=\"w\"> </span><span class=\"s\">\"test xs = do {</span>\n<span class=\"s\">    s ← drop_tm 1 xs;</span>\n<span class=\"s\">    r ← (test s);</span>\n<span class=\"s\">    return r</span>\n<span class=\"s\">  }\"</span>\n<span class=\"w\">  </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">pat_completeness</span><span class=\"w\"> </span><span class=\"n\">auto</span>\n<span class=\"kn\">termination</span>\n<span class=\"w\">  </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">relation</span><span class=\"w\"> </span><span class=\"s\">\"measure length\"</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"n\">subgoal</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">simp</span>\n<span class=\"w\">  </span><span class=\"n\">subgoal</span><span class=\"w\"> </span><span class=\"kp\">for</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">xs</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">cases</span><span class=\"w\"> </span><span class=\"n\">xs;</span><span class=\"w\"> </span><span class=\"n\">simp</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"k\">done</span>\n\n<span class=\"k\">end</span>\n</code></pre></div>\n<p>The termination proof fails, because the second subgoal generated by <code>apply (relation \"measure length\")</code> is unsolvable.  If I rewrite the <code>test</code>-function to</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"s\">\"test xs = do {</span>\n<span class=\"s\">    s ← drop_tm 1 xs;</span>\n<span class=\"s\">    r ← (test (val (drop_tm 1 xs)));</span>\n<span class=\"s\">    return r</span>\n<span class=\"s\">  }\"</span>\n</code></pre></div>\n<p>(i.e. just change <code>s</code> to <code>val (drop_tm 1 xs)</code>) then the termination-proof succeeds flawlessly. What's going on here?</p>",
        "id": 350202898,
        "sender_full_name": "Jakob Schulz",
        "timestamp": 1681583540
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"431446\">@Emin Karayel</span> was able to solve this problem :) For future reference: the trick was to prove the following congruence rule:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">bind_tm_cong</span><span class=\"o\">[</span><span class=\"n\">fundef_cong</span><span class=\"o\">]:</span>\n<span class=\"w\">  </span><span class=\"kp\">assumes</span><span class=\"w\"> </span><span class=\"s\">\"f1 = f2\"</span>\n<span class=\"w\">  </span><span class=\"kp\">assumes</span><span class=\"w\"> </span><span class=\"s\">\"g1 (val f1) = g2 (val f2)\"</span>\n<span class=\"w\">  </span><span class=\"kp\">shows</span><span class=\"w\"> </span><span class=\"s\">\"f1 ⤜ g1 = f2 ⤜ g2\"</span>\n<span class=\"w\">  </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">assms</span><span class=\"w\"> </span><span class=\"k\">unfolding</span><span class=\"w\"> </span><span class=\"n\">bind_tm_def</span>\n<span class=\"w\">  </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">cases</span><span class=\"w\"> </span><span class=\"n\">f1;cases</span><span class=\"w\"> </span><span class=\"n\">f2</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">auto</span>\n</code></pre></div>\n<p>After declaring this lemma as <code>fundef_cong</code>(see section 10 of <a href=\"https://isabelle.in.tum.de/doc/functions.pdf\">https://isabelle.in.tum.de/doc/functions.pdf</a>), the termination proof succeeds.</p>",
        "id": 350602064,
        "sender_full_name": "Jakob Schulz",
        "timestamp": 1681760537
    }
]