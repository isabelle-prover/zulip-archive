[
    {
        "content": "<p>I have made a definition involving Inf and I got very confused. I am stating my confusion here and would like mature users to help identify what I missed about critical things to know for using Inf.</p>\n<p>I defined:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">inductive</span><span class=\"w\"> </span><span class=\"n\">height_le</span><span class=\"w\"> </span><span class=\"o\">::</span>\n<span class=\"w\"> </span><span class=\"s\">\"'a ⇒ 'm set ⇒ ('m ⇒ 'a list ⇒ bool) ⇒ 'a ⇒ nat ⇒ bool\"</span>\n<span class=\"w\">  </span><span class=\"kp\">for</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"n n-Type\">'a</span><span class=\"w\"> </span><span class=\"kp\">and</span><span class=\"w\"> </span><span class=\"n\">Op</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"'m set\"</span><span class=\"w\"> </span><span class=\"kp\">and</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"('m ⇒ 'a list ⇒ bool)\"</span>\n<span class=\"w\">  </span><span class=\"kp\">where</span>\n<span class=\"w\">   </span><span class=\"n\">root</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"height_le r Op R r 0\"</span>\n<span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">rel</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"height_le r Op R w n ⟹ m ∈ Op ⟹ R m (w # vl) ⟹ v ∈ set vl</span>\n<span class=\"s\">        ⟹ height_le r Op R v (n+1)\"</span>\n\n<span class=\"k\">definition</span><span class=\"w\"> </span><span class=\"n\">height</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"'a ⇒ 'm set ⇒ ('m ⇒ 'a list ⇒ bool) ⇒ 'a ⇒ nat\"</span><span class=\"w\"> </span><span class=\"kp\">where</span>\n<span class=\"s\">\"height r Op R w = Inf {n. height_le r Op R w n}\"</span>\n</code></pre></div>\n<p>It says R is a family of relations indexed by Op. Think about just one binary relation, then in this case if we fix an element r as a root element, then r has height 0, and for each of its immediate successor, i.e. R r w, we say \"w's height is at most 1\". The \"at most\" instead of \"is\" is because in the case we have a 1-path [r,w] and a 2-path [r,w0,w], then we can will count w twice, through w0 or not, then we have \"w has height at most 1\" and \"w has height at most 2\", and we will take \"1\" as the height of w, since it is the smallest.<br>\nI then proved:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">height_le_root</span><span class=\"o\">:</span>\n<span class=\"s\">\"height_le r τ R w 0 ≡ w = r\"</span>\n<span class=\"w\">   </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">height_le.simps</span>\n<span class=\"w\">   </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">smt</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">verit</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">ccfv_threshold</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">add_is_0</span><span class=\"w\"> </span><span class=\"n\">zero_neq_one</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>But I cannot prove </p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">height_root</span><span class=\"o\">:</span>\n<span class=\"s\">\"height r τ R w = 0 ⟷ w = r\"</span>\n<span class=\"w\">  </span><span class=\"k\">unfolding</span><span class=\"w\"> </span><span class=\"n\">height_def</span>\n</code></pre></div>\n<p>I tried:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">height_root</span><span class=\"o\">:</span>\n<span class=\"s\">\"height r τ R w = 0 ⟷ w = r\"</span>\n<span class=\"w\">  </span><span class=\"k\">unfolding</span><span class=\"w\"> </span><span class=\"n\">height_def</span>\n<span class=\"k\">proof</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">safe</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"k\">assume</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"(Inf (Collect (height_le r τ R w)) = 0)\"</span>\n<span class=\"w\">  </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"s\">\"finite (Collect (height_le r τ R w))\"</span><span class=\"w\"> </span><span class=\"gr\">sorry</span>\n<span class=\"w\">  </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"s\">\"height_le r τ R w 0\"</span>\n<span class=\"w\">    </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">height_le_root</span><span class=\"w\"> </span><span class=\"n\">Inf_nat_def</span><span class=\"w\"> </span><span class=\"n\">Inf_nat_def1</span><span class=\"w\"> </span><span class=\"kt\">sledgehammer</span>\n</code></pre></div>\n<p>and sledgehammer fails here. May I please ask for possible reasons?</p>",
        "id": 488988161,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1734177768
    },
    {
        "content": "<p>Oops. I should not have the \"sorry\" since it is not necessarily true. But still I am surprised that sledgehammer fails.</p>",
        "id": 488989197,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1734178611
    },
    {
        "content": "<p>I think an inductive argument from left and right would work, trying...</p>",
        "id": 488989218,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1734178628
    },
    {
        "content": "<p>Inf is very hard for sledgehammer because the inf is not guaranteed to be in the set (well here it is, but this is hard to figure out). This is where you as a human must add extra steps.</p>\n<p>I managed something, but I had to add an extra condition:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">inductive</span><span class=\"w\"> </span><span class=\"n\">height_le</span><span class=\"w\"> </span><span class=\"o\">::</span>\n<span class=\"w\"> </span><span class=\"s\">\"'a ⇒ 'm set ⇒ ('m ⇒ 'a list ⇒ bool) ⇒ 'a ⇒ nat ⇒ bool\"</span>\n<span class=\"w\">  </span><span class=\"kp\">for</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"n n-Type\">'a</span><span class=\"w\"> </span><span class=\"kp\">and</span><span class=\"w\"> </span><span class=\"n\">Op</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"'m set\"</span><span class=\"w\"> </span><span class=\"kp\">and</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"('m ⇒ 'a list ⇒ bool)\"</span>\n<span class=\"w\">  </span><span class=\"kp\">where</span>\n<span class=\"w\">   </span><span class=\"n\">root</span><span class=\"o\">[</span><span class=\"n\">intro</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"height_le r Op R r 0\"</span>\n<span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">rel</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"height_le r Op R w n ⟹ m ∈ Op ⟹ R m (w # vl) ⟹ v ∈ set vl</span>\n<span class=\"s\">        ⟹ height_le r Op R v (n+1)\"</span>\n\n<span class=\"k\">definition</span><span class=\"w\"> </span><span class=\"n\">height</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"'a ⇒ 'm set ⇒ ('m ⇒ 'a list ⇒ bool) ⇒ 'a ⇒ nat\"</span><span class=\"w\"> </span><span class=\"kp\">where</span>\n<span class=\"s\">\"height r Op R w = Inf {n. height_le r Op R w n}\"</span>\n\n<span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">height_le_root</span><span class=\"o\">:</span>\n<span class=\"s\">\"height_le r τ R w 0 ≡ w = r\"</span>\n<span class=\"w\">   </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">height_le.simps</span>\n<span class=\"w\">   </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">smt</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">verit</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">ccfv_threshold</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">add_is_0</span><span class=\"w\"> </span><span class=\"n\">zero_neq_one</span><span class=\"o\">)</span>\n\n<span class=\"kn\">inductive_cases</span><span class=\"w\"> </span><span class=\"n\">heightE</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">‹height_le r τ R w 0›</span>\n\n<span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">height_root</span><span class=\"o\">:</span>\n<span class=\"w\">  </span><span class=\"kp\">assumes</span><span class=\"w\"> </span><span class=\"s\">‹height_le r τ R w n›</span>\n<span class=\"w\">  </span><span class=\"kp\">shows</span><span class=\"w\"> </span><span class=\"s\">\"height r τ R w = 0 ⟷ w = r\"</span>\n<span class=\"k\">proof</span><span class=\"w\"> </span><span class=\"o\">-</span>\n<span class=\"w\">  </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"s\">‹w=r›</span><span class=\"w\"> </span><span class=\"kp\">if</span><span class=\"w\"> </span><span class=\"s\">‹Inf (Collect (height_le r τ R w)) = 0›</span>\n<span class=\"w\">  </span><span class=\"k\">proof</span><span class=\"w\"> </span><span class=\"o\">-</span>\n<span class=\"w\">    </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"s\">‹height_le r τ R w 0›</span>\n<span class=\"w\">      </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">that</span>\n<span class=\"w\">        </span><span class=\"n\">wellorder_InfI</span><span class=\"o\">[</span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"s\">‹Collect (height_le r τ R w)›</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">simplified</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"n\">assms</span>\n<span class=\"w\">      </span><span class=\"k\">unfolding</span><span class=\"w\"> </span><span class=\"n\">height_def</span>\n<span class=\"w\">      </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">auto</span><span class=\"w\"> </span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"n\">del</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"o\">)</span>\n<span class=\"w\">    </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">thesis</span>\n<span class=\"w\">      </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">wellorder_InfI</span><span class=\"o\">[</span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">0</span><span class=\"w\"> </span><span class=\"s\">‹Collect (height_le r τ R w)›</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">simplified</span><span class=\"o\">]</span>\n<span class=\"w\">      </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">auto</span><span class=\"w\"> </span><span class=\"n\">elim</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">heightE</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"k\">qed</span>\n<span class=\"w\">  </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">thesis</span>\n<span class=\"w\">    </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">cInf_eq_minimum</span><span class=\"o\">[</span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">0</span><span class=\"w\"> </span><span class=\"s\">‹Collect (height_le r τ R w)›</span><span class=\"o\">]</span>\n<span class=\"w\">    </span><span class=\"k\">unfolding</span><span class=\"w\"> </span><span class=\"n\">height_def</span>\n<span class=\"w\">    </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">auto</span><span class=\"w\"> </span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"n\">del</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"o\">)</span>\n<span class=\"k\">qed</span>\n</code></pre></div>",
        "id": 488989566,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1734178874
    },
    {
        "content": "<p>So I think all we need would be nonemptyness.</p>",
        "id": 488989754,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1734179014
    },
    {
        "content": "<p>Once the set is nonempty, we can have Inf is in the set, is that true?</p>",
        "id": 488989843,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1734179084
    },
    {
        "content": "<p>Oh I can just find_theorems...</p>",
        "id": 488989852,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1734179096
    },
    {
        "content": "<p>For natural numbers : yes</p>",
        "id": 488989868,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1734179105
    },
    {
        "content": "<p>in general : no</p>",
        "id": 488989881,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1734179113
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"n\">found</span><span class=\"w\"> </span><span class=\"n\">4</span><span class=\"w\"> </span><span class=\"kn\">theorem</span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">):</span>\n<span class=\"w\">  </span><span class=\"n\">Conditionally_Complete_Lattices.wellorder_InfI</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">k</span><span class=\"w\"> </span><span class=\"n\">∈</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"n\">⟹</span><span class=\"w\"> </span><span class=\"n\">Inf</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"n\">∈</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">A</span>\n<span class=\"w\">  </span><span class=\"n\">Conditionally_Complete_Lattices.Inf_nat_def1</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">K</span><span class=\"w\"> </span><span class=\"n\">≠</span><span class=\"w\"> </span><span class=\"ow\">{}</span><span class=\"w\"> </span><span class=\"n\">⟹</span><span class=\"w\"> </span><span class=\"n\">Inf</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">K</span><span class=\"w\"> </span><span class=\"n\">∈</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">K</span>\n<span class=\"w\">  </span><span class=\"n\">Zorn.Inter_in_chain</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">finite</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">ℬ</span><span class=\"w\"> </span><span class=\"n\">⟹</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">ℬ</span><span class=\"w\"> </span><span class=\"n\">≠</span><span class=\"w\"> </span><span class=\"ow\">{}</span><span class=\"w\"> </span><span class=\"n\">⟹</span><span class=\"w\"> </span><span class=\"n\">subset.chain</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">𝒜</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">ℬ</span><span class=\"w\"> </span><span class=\"n\">⟹</span><span class=\"w\"> </span><span class=\"n\">⋂</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">ℬ</span><span class=\"w\"> </span><span class=\"n\">∈</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">ℬ</span>\n<span class=\"w\">  </span><span class=\"n\">Finite_Set.complete_lattice_class.finite_Inf_in</span><span class=\"o\">:</span>\n<span class=\"w\">    </span><span class=\"n\">finite</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"n\">⟹</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"n\">≠</span><span class=\"w\"> </span><span class=\"ow\">{}</span><span class=\"w\"> </span><span class=\"n\">⟹</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">⋀x</span><span class=\"w\"> </span><span class=\"n\">y.</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">∈</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"n\">⟹</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"n\">∈</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"n\">⟹</span><span class=\"w\"> </span><span class=\"n\">inf</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"n\">∈</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">A</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">⟹</span><span class=\"w\"> </span><span class=\"n\">Inf</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"n\">∈</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">A</span>\n</code></pre></div>",
        "id": 488989887,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1734179122
    },
    {
        "content": "<p>(like integers or stuff like {x \\in Q. x &gt; sqrt(2)})</p>",
        "id": 488989909,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1734179147
    },
    {
        "content": "<p>Not every set has the wellorder property</p>",
        "id": 488989964,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1734179176
    },
    {
        "content": "<p>Ah yes. So infiniteness is a problem from that aspect.</p>",
        "id": 488989967,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1734179184
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">height_height_le</span><span class=\"o\">:</span>\n<span class=\"s\">\" height_le r τ R w m ⟹ height r τ R w = n ⟹ height_le r τ R w n\"</span>\n<span class=\"w\">  </span><span class=\"k\">unfolding</span><span class=\"w\"> </span><span class=\"n\">height_def</span>\n<span class=\"w\">  </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">metis</span><span class=\"w\"> </span><span class=\"n\">generated_set_height_height_le</span><span class=\"w\"> </span><span class=\"n\">height_def</span><span class=\"w\"> </span><span class=\"n\">height_le_generated_set</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 488990116,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1734179312
    },
    {
        "content": "<p>I see, the problem is truly about nonemptyness. With the nonemptiness sledgehammer is fast enough.</p>",
        "id": 488990130,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1734179334
    },
    {
        "content": "<p>(does not even ask me to do an induction.)</p>",
        "id": 488990142,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1734179351
    },
    {
        "content": "<p>Thanks! That is good to know.</p>",
        "id": 488990153,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1734179367
    }
]