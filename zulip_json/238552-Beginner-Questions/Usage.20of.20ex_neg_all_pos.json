[
    {
        "content": "<p>I want to use ex_neg_all_pos to refine the following goal:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">proof</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">state</span><span class=\"o\">)</span>\n<span class=\"n\">goal</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">2</span><span class=\"w\"> </span><span class=\"n\">subgoals</span><span class=\"o\">):</span>\n<span class=\"w\"> </span><span class=\"n\">1.</span><span class=\"w\"> </span><span class=\"n\">⋀M</span><span class=\"w\"> </span><span class=\"n\">w.</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">⋀f1</span><span class=\"w\"> </span><span class=\"n\">f2.</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">f1</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">f2</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">∈</span><span class=\"w\"> </span><span class=\"n\">set</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">zip</span><span class=\"w\"> </span><span class=\"n\">fl1</span><span class=\"w\"> </span><span class=\"n\">fl2</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">⟹</span><span class=\"w\"> </span><span class=\"n\">∀M</span><span class=\"w\"> </span><span class=\"n\">w.</span><span class=\"w\"> </span><span class=\"n\">asatis</span><span class=\"w\"> </span><span class=\"n\">M</span><span class=\"w\"> </span><span class=\"n\">w</span><span class=\"w\"> </span><span class=\"n\">f1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">asatis</span><span class=\"w\"> </span><span class=\"n\">M</span><span class=\"w\"> </span><span class=\"n\">w</span><span class=\"w\"> </span><span class=\"n\">f2</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">⟹</span>\n<span class=\"w\">           </span><span class=\"n\">length</span><span class=\"w\"> </span><span class=\"n\">fl1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">length</span><span class=\"w\"> </span><span class=\"n\">fl2</span><span class=\"w\"> </span><span class=\"n\">⟹</span>\n<span class=\"w\">           </span><span class=\"o\">(</span><span class=\"n\">⋀f1</span><span class=\"w\"> </span><span class=\"n\">f2.</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">f1</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">f2</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">∈</span><span class=\"w\"> </span><span class=\"n\">set</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">zip</span><span class=\"w\"> </span><span class=\"n\">fl1</span><span class=\"w\"> </span><span class=\"n\">fl2</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">⟹</span><span class=\"w\"> </span><span class=\"n\">∀M</span><span class=\"w\"> </span><span class=\"n\">w.</span><span class=\"w\"> </span><span class=\"n\">asatis</span><span class=\"w\"> </span><span class=\"n\">M</span><span class=\"w\"> </span><span class=\"n\">w</span><span class=\"w\"> </span><span class=\"n\">f1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">asatis</span><span class=\"w\"> </span><span class=\"n\">M</span><span class=\"w\"> </span><span class=\"n\">w</span><span class=\"w\"> </span><span class=\"n\">f2</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">⟹</span>\n<span class=\"w\">           </span><span class=\"n\">length</span><span class=\"w\"> </span><span class=\"n\">fl1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">length</span><span class=\"w\"> </span><span class=\"n\">fl2</span><span class=\"w\"> </span><span class=\"n\">⟹</span>\n<span class=\"w\">           </span><span class=\"n\">w</span><span class=\"w\"> </span><span class=\"n\">∈</span><span class=\"w\"> </span><span class=\"n\">world</span><span class=\"w\"> </span><span class=\"n\">M</span><span class=\"w\"> </span><span class=\"n\">⟹</span>\n<span class=\"w\">           </span><span class=\"n\">∃vl.</span><span class=\"w\"> </span><span class=\"n\">length</span><span class=\"w\"> </span><span class=\"n\">vl</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">length</span><span class=\"w\"> </span><span class=\"n\">fl1</span><span class=\"w\"> </span><span class=\"n\">∧</span><span class=\"w\"> </span><span class=\"n\">rel</span><span class=\"w\"> </span><span class=\"n\">M</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">w</span><span class=\"w\"> </span><span class=\"n\">#</span><span class=\"w\"> </span><span class=\"n\">vl</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">∧</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">∀x</span><span class=\"w\"> </span><span class=\"n\">y.</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">∈</span><span class=\"w\"> </span><span class=\"n\">set</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">zip</span><span class=\"w\"> </span><span class=\"n\">vl</span><span class=\"w\"> </span><span class=\"n\">fl1</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">⟶</span><span class=\"w\"> </span><span class=\"n\">asatis</span><span class=\"w\"> </span><span class=\"n\">M</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">⟹</span>\n<span class=\"w\">           </span><span class=\"n\">w</span><span class=\"w\"> </span><span class=\"n\">∈</span><span class=\"w\"> </span><span class=\"n\">world</span><span class=\"w\"> </span><span class=\"n\">M</span><span class=\"w\"> </span><span class=\"n\">∧</span>\n<span class=\"w\">           </span><span class=\"o\">(</span><span class=\"n\">∃vl.</span><span class=\"w\"> </span><span class=\"n\">length</span><span class=\"w\"> </span><span class=\"n\">vl</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">length</span><span class=\"w\"> </span><span class=\"n\">fl2</span><span class=\"w\"> </span><span class=\"n\">∧</span><span class=\"w\"> </span><span class=\"n\">rel</span><span class=\"w\"> </span><span class=\"n\">M</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">w</span><span class=\"w\"> </span><span class=\"n\">#</span><span class=\"w\"> </span><span class=\"n\">vl</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">∧</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">∀x</span><span class=\"w\"> </span><span class=\"n\">y.</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">∈</span><span class=\"w\"> </span><span class=\"n\">set</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">zip</span><span class=\"w\"> </span><span class=\"n\">vl</span><span class=\"w\"> </span><span class=\"n\">fl2</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">⟶</span><span class=\"w\"> </span><span class=\"n\">asatis</span><span class=\"w\"> </span><span class=\"n\">M</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>I unfold with ex_neg_all_pos, and want to eliminate the<code> ∃vl.</code> in <br>\n<code>∃vl. length vl = length fl1 ∧ rel M m (w # vl) ∧ (∀x y. (x, y) ∈ set (zip vl fl1) ⟶ asatis M x y) </code><br>\nIt does not work. How can I get it to work, in the sense of pulling the existential to the very front?</p>\n<p>Ideally I want the same effect as rewriting with PULL_EXISTS in HOL4:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"n\">PULL_EXISTS;</span>\n<span class=\"n\">val</span><span class=\"w\"> </span><span class=\"n\">it</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">   </span><span class=\"n\">⊢</span><span class=\"w\"> </span><span class=\"n\">∀P</span><span class=\"w\"> </span><span class=\"n\">Q.</span>\n<span class=\"w\">       </span><span class=\"o\">((</span><span class=\"n\">∃x.</span><span class=\"w\"> </span><span class=\"n\">P</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">⇒</span><span class=\"w\"> </span><span class=\"n\">Q</span><span class=\"w\"> </span><span class=\"n\">⇔</span><span class=\"w\"> </span><span class=\"n\">∀x.</span><span class=\"w\"> </span><span class=\"n\">P</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">⇒</span><span class=\"w\"> </span><span class=\"n\">Q</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">∧</span><span class=\"w\"> </span><span class=\"o\">((</span><span class=\"n\">∃x.</span><span class=\"w\"> </span><span class=\"n\">P</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">∧</span><span class=\"w\"> </span><span class=\"n\">Q</span><span class=\"w\"> </span><span class=\"n\">⇔</span><span class=\"w\"> </span><span class=\"n\">∃x.</span><span class=\"w\"> </span><span class=\"n\">P</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">∧</span><span class=\"w\"> </span><span class=\"n\">Q</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">∧</span>\n<span class=\"w\">       </span><span class=\"o\">(</span><span class=\"n\">Q</span><span class=\"w\"> </span><span class=\"n\">∧</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">∃x.</span><span class=\"w\"> </span><span class=\"n\">P</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">⇔</span><span class=\"w\"> </span><span class=\"n\">∃x.</span><span class=\"w\"> </span><span class=\"n\">Q</span><span class=\"w\"> </span><span class=\"n\">∧</span><span class=\"w\"> </span><span class=\"n\">P</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"o\">):</span><span class=\"w\"> </span><span class=\"n\">them</span>\n</code></pre></div>",
        "id": 486922601,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1733729778
    },
    {
        "content": "<p>Another example that I want to use ex_neg_all_pos:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">proof</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">prove</span><span class=\"o\">)</span>\n<span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">this</span><span class=\"o\">:</span>\n<span class=\"w\">    </span><span class=\"n\">∃m</span><span class=\"w\"> </span><span class=\"n\">fl.</span><span class=\"w\"> </span><span class=\"n\">phi</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">♢m</span><span class=\"w\"> </span><span class=\"n\">fl</span><span class=\"w\"> </span><span class=\"n\">∧</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"w\"> </span><span class=\"n\">∈</span><span class=\"w\"> </span><span class=\"n\">ops</span><span class=\"w\"> </span><span class=\"n\">sig</span><span class=\"w\"> </span><span class=\"n\">∧</span><span class=\"w\"> </span><span class=\"n\">length</span><span class=\"w\"> </span><span class=\"n\">fl</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">arity</span><span class=\"w\"> </span><span class=\"n\">sig</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"w\"> </span><span class=\"n\">∧</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">∀f.</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"n\">∈</span><span class=\"w\"> </span><span class=\"n\">set</span><span class=\"w\"> </span><span class=\"n\">fl</span><span class=\"w\"> </span><span class=\"n\">⟶</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"n\">∈</span><span class=\"w\"> </span><span class=\"n\">deg_wffs</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"n\">sig</span><span class=\"o\">)</span>\n<span class=\"w\">    </span><span class=\"o\">?</span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"n\">∈</span><span class=\"w\"> </span><span class=\"n\">quotient'</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">deg_wffs</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"n\">sig</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">cequivr</span><span class=\"w\"> </span><span class=\"n\">TYPE</span><span class=\"o\">(</span><span class=\"n n-Type\">'a</span><span class=\"o\">))</span><span class=\"w\"> </span><span class=\"n\">⟹</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"n\">∈</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">c</span>\n\n<span class=\"n\">goal</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">1</span><span class=\"w\"> </span><span class=\"n\">subgoal</span><span class=\"o\">):</span>\n<span class=\"w\"> </span><span class=\"n\">1.</span><span class=\"w\"> </span><span class=\"n\">∃phi0.</span><span class=\"w\"> </span><span class=\"n\">phi0</span><span class=\"w\"> </span><span class=\"n\">∈</span><span class=\"w\"> </span><span class=\"n\">cDIAMs_comb</span><span class=\"w\"> </span><span class=\"n\">sig</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"sx\">` quotient' (deg_wffs n sig) (cequivr TYPE('a))) ∧ cequiv TYPE('a) phi phi0</span>\n</code></pre></div>\n<p>I want to eliminate <code>?m fl</code> in</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"n\">∃m</span><span class=\"w\"> </span><span class=\"n\">fl.</span><span class=\"w\"> </span><span class=\"n\">phi</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">♢m</span><span class=\"w\"> </span><span class=\"n\">fl</span><span class=\"w\"> </span><span class=\"n\">∧</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"w\"> </span><span class=\"n\">∈</span><span class=\"w\"> </span><span class=\"n\">ops</span><span class=\"w\"> </span><span class=\"n\">sig</span><span class=\"w\"> </span><span class=\"n\">∧</span><span class=\"w\"> </span><span class=\"n\">length</span><span class=\"w\"> </span><span class=\"n\">fl</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">arity</span><span class=\"w\"> </span><span class=\"n\">sig</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"w\"> </span><span class=\"n\">∧</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">∀f.</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"n\">∈</span><span class=\"w\"> </span><span class=\"n\">set</span><span class=\"w\"> </span><span class=\"n\">fl</span><span class=\"w\"> </span><span class=\"n\">⟶</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"n\">∈</span><span class=\"w\"> </span><span class=\"n\">deg_wffs</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"n\">sig</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 486925223,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1733730646
    },
    {
        "content": "<p>When I see such a long goal, my reaction is:</p>\n<p>1. either auto will solve it with some help (auto + sledgehammer + combining the two tactics in one line). In this case, the question is not really relevant<br>\n  2. or auto will not work, in which case you want Isar. And in this case, the question is not really relevant either, because you can use obtain.</p>\n<p>So, why?</p>",
        "id": 486936700,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1733734040
    },
    {
        "content": "<p>For trying it out, this works:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"s\">‹P ⟹ (∃x. Q x ⟹ H) ›</span>\n<span class=\"w\">  </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"n\">clarify</span>\n</code></pre></div>",
        "id": 486936907,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1733734102
    },
    {
        "content": "<p>But again, auto is doing it too</p>",
        "id": 486936965,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1733734118
    },
    {
        "content": "<p>Clarify works, thanks and this is what I want. Just discovered that I can do:<br>\n<code>proof (intro impI allI iffI,elim conjE, auto)  </code>, i.e. use auto without the apply mode.</p>",
        "id": 486938409,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1733734560
    },
    {
        "content": "<p>Yeah but no, do not do that</p>",
        "id": 486938514,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1733734581
    },
    {
        "content": "<p>This is really bad for maintenance</p>",
        "id": 486938569,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1733734595
    },
    {
        "content": "<p>So is clarify better?</p>",
        "id": 486938626,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1733734612
    },
    {
        "content": "<p>The output of auto can change across version (or if you later add a simp rule)</p>",
        "id": 486938641,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1733734618
    },
    {
        "content": "<p>Or I should just use \"obtain\" to make it easier for maintenance?</p>",
        "id": 486938695,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1733734633
    },
    {
        "content": "<p>obtain is better</p>",
        "id": 486938745,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1733734649
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"233198\">Mathias Fleury</span> <a href=\"#narrow/channel/238552-Beginner-Questions/topic/Usage.20of.20ex_neg_all_pos/near/486938641\">said</a>:</p>\n<blockquote>\n<p>The output of auto can change across version (or if you later add a simp rule)</p>\n</blockquote>\n<p>How can I add a simp rule that pulling all the existential to the very top?</p>",
        "id": 486938843,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1733734677
    },
    {
        "content": "<p>clarify is useful for exploration (is there a way to get this done fast?)</p>",
        "id": 486938919,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1733734685
    },
    {
        "content": "<p>I think I like the aspect of Isar that keeps critical points of proofs clearer, but I am annoyed when I need to use Isar just to treat the logical operations.</p>",
        "id": 486939082,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1733734738
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"754515\">Yiming Xu</span> <a href=\"#narrow/channel/238552-Beginner-Questions/topic/Usage.20of.20ex_neg_all_pos/near/486938843\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"233198\">Mathias Fleury</span> <a href=\"#narrow/channel/238552-Beginner-Questions/topic/Usage.20of.20ex_neg_all_pos/near/486938641\">said</a>:</p>\n<blockquote>\n<p>The output of auto can change across version (or if you later add a simp rule)</p>\n</blockquote>\n<p>How can I add a simp rule that pulling all the existential to the very top?</p>\n</blockquote>\n<p>The very point of simp rules is that they work for HOL stuff, aka not across <code>==&gt;</code> (yes there is a Pure.simp, but it is very limited)</p>",
        "id": 486939122,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1733734750
    },
    {
        "content": "<p>Not across <code>==&gt;</code> is very unfortunate...</p>",
        "id": 486939394,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1733734814
    },
    {
        "content": "<p>Should not be too hard to get some volunteer implement it. But it would be another story.</p>",
        "id": 486939525,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1733734850
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"754515\">Yiming Xu</span> <a href=\"#narrow/channel/238552-Beginner-Questions/topic/Usage.20of.20ex_neg_all_pos/near/486939082\">said</a>:</p>\n<blockquote>\n<p>I think I like the aspect of Isar that keeps critical points of proofs clearer, but I am annoyed when I need to use Isar just to treat the logical operations.</p>\n</blockquote>\n<p>why would you? For such a goal, I would:</p>\n<ol>\n<li>call clarify + simp or auto</li>\n<li>think about the cal</li>\n<li>call sledgehammer</li>\n<li>if SH finds a proof: try to compress it</li>\n<li>if not, I will need Isar anyway, so I can name my assumptions with lets and so on</li>\n</ol>",
        "id": 486939559,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1733734862
    },
    {
        "content": "<p>Especially since the original goal looks like an induction of some sort, using <code>(is _)</code> to name things is not hard at all.</p>",
        "id": 486939976,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1733734966
    },
    {
        "content": "<p>I would think an ideal way of using Isar is \"only write the steps that tells the real story of the proof\". But I will admit that this is my excuse of being lazy.</p>",
        "id": 486940143,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1733735015
    },
    {
        "content": "<p>I will learn to live with it. I do use some \"is\", but often forget that.</p>",
        "id": 486940382,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1733735083
    },
    {
        "content": "<p>Also: you are not using <code>list_induct2</code> for the prof right?</p>",
        "id": 486940425,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1733735099
    },
    {
        "content": "<p>No, but what's the story of <code>list_induct2</code>?</p>",
        "id": 486940546,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1733735132
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"754515\">Yiming Xu</span> <a href=\"#narrow/channel/238552-Beginner-Questions/topic/Usage.20of.20ex_neg_all_pos/near/486940382\">said</a>:</p>\n<blockquote>\n<p>I will learn to live with it. I do use some \"is\", but often forget that.</p>\n</blockquote>\n<p>BTW, one trick that I learned after way too long: <code>is _ is _ is _</code> works</p>",
        "id": 486940584,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1733735145
    },
    {
        "content": "<p>for naming several things at once</p>",
        "id": 486940628,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1733735160
    },
    {
        "content": "<p>Ha? What is the syntax?</p>",
        "id": 486940731,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1733735181
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"754515\">Yiming Xu</span> <a href=\"#narrow/channel/238552-Beginner-Questions/topic/Usage.20of.20ex_neg_all_pos/near/486940546\">said</a>:</p>\n<blockquote>\n<p>No, but what's the story of <code>list_induct2</code>?</p>\n</blockquote>\n<p>It should just be a better induction principle for what you are trying to do</p>",
        "id": 486940739,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1733735185
    },
    {
        "content": "<p>I was not using any sort of induction but this principle sounds sensible. I think I can do a inductive argument using this as well... Let me try.</p>",
        "id": 486941010,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1733735279
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span>\n<span class=\"w\">  </span><span class=\"kp\">assumes</span><span class=\"w\"> </span><span class=\"s\">‹((f1, f2) ∈ set (zip fl1 fl2) ⟹ ∀M w. asatis M w f1 = asatis M w f2)›</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"kp\">is</span><span class=\"w\"> </span><span class=\"s\">‹?P ⟹ ?Q›</span><span class=\"w\"> </span><span class=\"kp\">is</span><span class=\"w\">  </span><span class=\"s\">‹_ ∈ ?H ⟹ _›</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"kp\">shows</span><span class=\"w\"> </span><span class=\"n\">P</span>\n<span class=\"k\">proof</span><span class=\"w\"> </span><span class=\"o\">-</span>\n<span class=\"w\">  </span><span class=\"kt\">term</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">H</span>\n<span class=\"w\">  </span><span class=\"kt\">term</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">P</span>\n<span class=\"w\">  </span><span class=\"kt\">term</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">Q</span>\n</code></pre></div>",
        "id": 486941168,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1733735319
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"754515\">Yiming Xu</span> <a href=\"#narrow/channel/238552-Beginner-Questions/topic/Usage.20of.20ex_neg_all_pos/near/486941010\">said</a>:</p>\n<blockquote>\n<p>I was not using any sort of induction but this principle sounds sensible. I think I can do a inductive argument using this as well... Let me try.</p>\n</blockquote>\n<p><code>(⋀f1 f2. (f1, f2) ∈ set (zip fl1 fl2) ⟹ ∀M w. asatis M w f1 = asatis M w f2) </code> looks a lot like an induction principle to me</p>",
        "id": 486941302,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1733735354
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"233198\">Mathias Fleury</span> <a href=\"#narrow/channel/238552-Beginner-Questions/topic/Usage.20of.20ex_neg_all_pos/near/486941168\">said</a>:</p>\n<blockquote>\n<p><div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span>\n<span class=\"w\">  </span><span class=\"kp\">assumes</span><span class=\"w\"> </span><span class=\"s\">‹((f1, f2) ∈ set (zip fl1 fl2) ⟹ ∀M w. asatis M w f1 = asatis M w f2)›</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"kp\">is</span><span class=\"w\"> </span><span class=\"s\">‹?P ⟹ ?Q›</span><span class=\"w\"> </span><span class=\"kp\">is</span><span class=\"w\">  </span><span class=\"s\">‹_ ∈ ?H ⟹ _›</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"kp\">shows</span><span class=\"w\"> </span><span class=\"n\">P</span>\n<span class=\"k\">proof</span><span class=\"w\"> </span><span class=\"o\">-</span>\n<span class=\"w\">  </span><span class=\"kt\">term</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">H</span>\n<span class=\"w\">  </span><span class=\"kt\">term</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">P</span>\n<span class=\"w\">  </span><span class=\"kt\">term</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">Q</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>I see this is wonderful.</p>",
        "id": 486941606,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1733735443
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"233198\">Mathias Fleury</span> <a href=\"#narrow/channel/238552-Beginner-Questions/topic/Usage.20of.20ex_neg_all_pos/near/486941302\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"754515\">Yiming Xu</span> <a href=\"#narrow/channel/238552-Beginner-Questions/topic/Usage.20of.20ex_neg_all_pos/near/486941010\">said</a>:</p>\n<blockquote>\n<p>I was not using any sort of induction but this principle sounds sensible. I think I can do a inductive argument using this as well... Let me try.</p>\n</blockquote>\n<p><code>(⋀f1 f2. (f1, f2) ∈ set (zip fl1 fl2) ⟹ ∀M w. asatis M w f1 = asatis M w f2) </code> looks a lot like an induction principle to me</p>\n</blockquote>\n<p>I think you are right, lists sort-of born for an induction.</p>",
        "id": 486941685,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1733735465
    }
]