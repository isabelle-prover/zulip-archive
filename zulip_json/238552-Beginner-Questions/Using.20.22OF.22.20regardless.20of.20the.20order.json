[
    {
        "content": "<p>Sometimes I would encounter such a situation. I have an assumption looks like:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">1</span><span class=\"w\"> </span><span class=\"n\">≤</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">1</span><span class=\"w\"> </span><span class=\"n\">⟹</span>\n<span class=\"w\">  </span><span class=\"n\">Z</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">1</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">w</span><span class=\"w\"> </span><span class=\"n\">w'</span><span class=\"w\"> </span><span class=\"n\">⟹</span>\n<span class=\"w\">  </span><span class=\"n\">rel</span><span class=\"w\"> </span><span class=\"n\">M</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">m</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">w</span><span class=\"w\"> </span><span class=\"n\">#</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">ul</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">⟹</span>\n<span class=\"w\">  </span><span class=\"n\">∃ul'.</span><span class=\"w\"> </span><span class=\"n\">rel</span><span class=\"w\"> </span><span class=\"n\">M'</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">m</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">w'</span><span class=\"w\"> </span><span class=\"n\">#</span><span class=\"w\"> </span><span class=\"n\">ul'</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">∧</span>\n<span class=\"w\">        </span><span class=\"o\">(</span><span class=\"n\">∀u</span><span class=\"w\"> </span><span class=\"n\">u'.</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">u</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">u'</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">∈</span><span class=\"w\"> </span><span class=\"n\">set</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">zip</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">ul</span><span class=\"w\"> </span><span class=\"n\">ul'</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">⟶</span><span class=\"w\"> </span><span class=\"n\">Z</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"n\">u</span><span class=\"w\"> </span><span class=\"n\">u'</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>The first assumption is very easy to kill, and I may have in the local context only <code>rel w ul</code> but not <code>Z (n+1) w w'</code> yet, and I would like turn it into:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">1</span><span class=\"w\"> </span><span class=\"n\">≤</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">1</span><span class=\"w\"> </span><span class=\"n\">⟹</span>\n<span class=\"n\">Z</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">1</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">w</span><span class=\"w\"> </span><span class=\"n\">w'</span><span class=\"w\"> </span><span class=\"n\">⟹</span>\n<span class=\"w\">  </span><span class=\"n\">∃ul'.</span><span class=\"w\"> </span><span class=\"n\">rel</span><span class=\"w\"> </span><span class=\"n\">M'</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">m</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">w'</span><span class=\"w\"> </span><span class=\"n\">#</span><span class=\"w\"> </span><span class=\"n\">ul'</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">∧</span>\n<span class=\"w\">        </span><span class=\"o\">(</span><span class=\"n\">∀u</span><span class=\"w\"> </span><span class=\"n\">u'.</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">u</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">u'</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">∈</span><span class=\"w\"> </span><span class=\"n\">set</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">zip</span><span class=\"w\"> </span><span class=\"n\">ul</span><span class=\"w\"> </span><span class=\"n\">ul'</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">⟶</span><span class=\"w\"> </span><span class=\"n\">Z</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"n\">u</span><span class=\"w\"> </span><span class=\"n\">u'</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>i.e. to skip the first two assumptions and call OF on the third assumption. Would that be possible?</p>",
        "id": 480672247,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1730797767
    },
    {
        "content": "<p>You can do <code>some_lemma[OF _ _ some_other_lemma]</code></p>",
        "id": 480672914,
        "sender_full_name": "Balazs Toth",
        "timestamp": 1730797968
    },
    {
        "content": "<p>Aha that works! Thanks!</p>",
        "id": 480676623,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1730799231
    },
    {
        "content": "<p>You can also use <code>rotated</code> e.g. <code>thm Relation.single_valuedpD Relation.single_valuedpD[rotated -1, OF ] Relation.single_valuedpD[rotated 1, OF ]</code></p>",
        "id": 480700319,
        "sender_full_name": "Jonathan Julian Huerta y Munive",
        "timestamp": 1730806639
    },
    {
        "content": "<p>Thanks! I just tried to see how it works! This is particularly good when there is only one assumption blocking the rest, in which case we can rotate it to the very end.</p>",
        "id": 480702394,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1730807427
    },
    {
        "content": "<p>It would be helpful if all these things like \"rotated\" \"unfolded\" \"rule_format\" \"THEN iffD1\"... i.e. functions, are documented somewhere.</p>",
        "id": 480702669,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1730807524
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"754515\">Yiming Xu</span> <a href=\"#narrow/channel/238552-Beginner-Questions/topic/Using.20.22OF.22.20regardless.20of.20the.20order/near/480702669\">said</a>:</p>\n<blockquote>\n<p>It would be helpful if all these things like \"rotated\" \"unfolded\" \"rule_format\" \"THEN iffD1\"... i.e. functions, are documented somewhere.</p>\n</blockquote>\n<p>they are documented here <a href=\"https://isabelle.in.tum.de/doc/isar-ref.pdf\">https://isabelle.in.tum.de/doc/isar-ref.pdf</a></p>",
        "id": 480705561,
        "sender_full_name": "Kevin Kappelmann",
        "timestamp": 1730808469
    },
    {
        "content": "<p>Thanks! I see. The terminology of all these things is called \"attribute\".</p>",
        "id": 480706337,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1730808715
    }
]