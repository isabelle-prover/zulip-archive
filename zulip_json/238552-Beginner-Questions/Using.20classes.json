[
    {
        "content": "<p>I was trying to get familiar with classes and made classes for semigroup and<br>\nmonoid.</p>\n<p>Then I wanted to show that the type of pairs of monoids is also a monoid.<br>\nHow can that be shown.</p>\n<p>This is what I had been trying:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">theory</span><span class=\"w\"> </span><span class=\"n\">Example</span>\n<span class=\"w\">  </span><span class=\"kp\">imports</span><span class=\"w\"> </span><span class=\"n\">Main</span>\n<span class=\"k\">begin</span>\n\n<span class=\"w\">  </span><span class=\"k\">class</span><span class=\"w\"> </span><span class=\"n\">semigroup</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">    </span><span class=\"kp\">fixes</span><span class=\"w\"> </span><span class=\"n\">sgop</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">‚Äπ'a ‚áí 'a ‚áí 'a‚Ä∫</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"kp\">infixl</span><span class=\"w\"> </span><span class=\"s\">‚Äπ‚äó‚Ä∫</span><span class=\"w\"> </span><span class=\"n\">70</span><span class=\"o\">)</span>\n<span class=\"w\">    </span><span class=\"kp\">assumes</span><span class=\"w\"> </span><span class=\"n\">assoc</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">‚Äπ(x ‚äó y) ‚äó z = x ‚äó (y ‚äó z)‚Ä∫</span>\n\n<span class=\"w\">  </span><span class=\"k\">class</span><span class=\"w\"> </span><span class=\"n\">monoid</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">semigroup</span><span class=\"w\"> </span><span class=\"o\">+</span>\n<span class=\"w\">    </span><span class=\"kp\">fixes</span><span class=\"w\"> </span><span class=\"n\">unit</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">‚Äπ'a‚Ä∫</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"s\">‚Äπùü≠‚Ä∫</span><span class=\"o\">)</span>\n<span class=\"w\">    </span><span class=\"kp\">assumes</span><span class=\"w\"> </span><span class=\"n\">unitl</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">‚Äπunit ‚äó x = x‚Ä∫</span>\n<span class=\"w\">    </span><span class=\"kp\">assumes</span><span class=\"w\"> </span><span class=\"n\">unitr</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">‚Äπx ‚äó unit = x‚Ä∫</span>\n\n<span class=\"w\">  </span><span class=\"k\">instantiation</span><span class=\"w\"> </span><span class=\"n\">prod</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">monoid</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">monoid</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">monoid</span>\n<span class=\"w\">  </span><span class=\"k\">begin</span>\n<span class=\"w\">    </span><span class=\"kn\">instance</span><span class=\"w\"> </span><span class=\"k\">proof</span>\n<span class=\"w\">      </span><span class=\"k\">fix</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">‚Äπ'a::monoid √ó 'b::monoid‚Ä∫</span>\n<span class=\"w\">      </span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"s\">‚Äπp ‚äó ùü≠ = p‚Ä∫</span>\n<span class=\"w\">    </span><span class=\"c\">(* What can be done next? *)</span>\n<span class=\"w\">        </span><span class=\"c\">(* unfolding unit-prod-def *)</span>\n<span class=\"w\">  </span><span class=\"k\">end</span>\n<span class=\"k\">end</span>\n</code></pre></div>",
        "id": 500853497,
        "sender_full_name": "Julin Shaji",
        "timestamp": 1740050299
    },
    {
        "content": "<p>you need to also define what <code>sgop</code> and <code>unit</code> are for products, then a few calls to simp can prove that products are an instance of your monoid class:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">instantiation</span><span class=\"w\"> </span><span class=\"n\">prod</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">monoid</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">monoid</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">monoid</span>\n<span class=\"k\">begin</span>\n\n<span class=\"k\">definition</span><span class=\"w\"> </span><span class=\"n\">sgop_prod</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"'a √ó 'b ‚áí 'a √ó 'b ‚áí 'a √ó 'b\"</span><span class=\"w\"> </span><span class=\"kp\">where</span>\n<span class=\"w\"> </span><span class=\"s\">\"sgop_prod a b = (case a of (a‚á©1, a‚á©2) ‚áí case b of (b‚á©1, b‚á©2) ‚áí (a‚á©1 ‚äó b‚á©1, a‚á©2 ‚äó b‚á©2))\"</span>\n\n<span class=\"k\">definition</span><span class=\"w\"> </span><span class=\"n\">unit_prod</span><span class=\"w\"> </span><span class=\"kp\">where</span><span class=\"w\"> </span><span class=\"s\">\"unit_prod ‚â° (unit, unit)\"</span>\n\n<span class=\"kn\">instance</span>\n<span class=\"w\">  </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">standard</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"n\">add</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">assoc</span><span class=\"w\"> </span><span class=\"n\">case_prod_unfold</span><span class=\"w\"> </span><span class=\"n\">sgop_prod_def</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"n\">add</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">sgop_prod_def</span><span class=\"w\"> </span><span class=\"n\">unit_prod_def</span><span class=\"w\"> </span><span class=\"n\">unitl</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"n\">add</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">sgop_prod_def</span><span class=\"w\"> </span><span class=\"n\">unit_prod_def</span><span class=\"w\"> </span><span class=\"n\">unitr</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"k\">done</span>\n<span class=\"k\">end</span>\n</code></pre></div>\n<p>(but note that you might want to move <code>sgop_prod</code> into an instance specific to <code>semigroup</code>, so it can also be used for things which aren't also monoids)</p>",
        "id": 500872623,
        "sender_full_name": "terru",
        "timestamp": 1740056576
    },
    {
        "content": "<p>For pattern matching on products, can we directly do like</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">definition</span><span class=\"w\"> </span><span class=\"n\">sgop_prod</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"'a √ó 'b ‚áí 'a √ó 'b ‚áí 'a √ó 'b\"</span><span class=\"w\"> </span><span class=\"kp\">where</span>\n<span class=\"w\">  </span><span class=\"s\">\"sgop_prod ((a1, b1), (a2, b2)) = (a1 ‚äó a2, b1 ‚äó b2)\"</span>\n</code></pre></div>\n<p>instead of separately doing <code>case</code>?</p>",
        "id": 500892261,
        "sender_full_name": "Julin Shaji",
        "timestamp": 1740061595
    },
    {
        "content": "<p>I'm not sure if there's a good way to do that with <code>definition</code>. But you can do it if you define <code>sgop_prod</code> using something like <code>fun</code>, for example.</p>",
        "id": 500897819,
        "sender_full_name": "terru",
        "timestamp": 1740062977
    },
    {
        "content": "<p>Is there any difference between doing <code>instance</code> and <code>instance proof</code>?</p>",
        "id": 500937025,
        "sender_full_name": "Julin Shaji",
        "timestamp": 1740073502
    },
    {
        "content": "<p>Something about prove mode and state mode.</p>",
        "id": 500937108,
        "sender_full_name": "Julin Shaji",
        "timestamp": 1740073530
    },
    {
        "content": "<p><code>proof</code> starts a structured isar proof (instead of the simple apply-script style proof i gave above)</p>",
        "id": 500942511,
        "sender_full_name": "terru",
        "timestamp": 1740075378
    },
    {
        "content": "<p>When should we use the isar version? Is there some convention?</p>",
        "id": 501018269,
        "sender_full_name": "Julin Shaji",
        "timestamp": 1740111761
    },
    {
        "content": "<p>Also, how would the same proof with isar look like?</p>",
        "id": 501018280,
        "sender_full_name": "Julin Shaji",
        "timestamp": 1740111771
    },
    {
        "content": "<p>I tried:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">theory</span><span class=\"w\"> </span><span class=\"n\">Example</span>\n<span class=\"w\">  </span><span class=\"kp\">imports</span><span class=\"w\"> </span><span class=\"n\">Main</span>\n<span class=\"k\">begin</span>\n<span class=\"w\">  </span><span class=\"k\">class</span><span class=\"w\"> </span><span class=\"n\">semigroup</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">    </span><span class=\"kp\">fixes</span><span class=\"w\"> </span><span class=\"n\">sgop</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">‚Äπ'a ‚áí 'a ‚áí 'a‚Ä∫</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"kp\">infixl</span><span class=\"w\"> </span><span class=\"s\">‚Äπ‚äó‚Ä∫</span><span class=\"w\"> </span><span class=\"n\">70</span><span class=\"o\">)</span>\n<span class=\"w\">    </span><span class=\"kp\">assumes</span><span class=\"w\"> </span><span class=\"n\">assoc</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">‚Äπ(x ‚äó y) ‚äó z = x ‚äó (y ‚äó z)‚Ä∫</span>\n\n<span class=\"w\">  </span><span class=\"k\">class</span><span class=\"w\"> </span><span class=\"n\">monoid</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">semigroup</span><span class=\"w\"> </span><span class=\"o\">+</span>\n<span class=\"w\">    </span><span class=\"kp\">fixes</span><span class=\"w\"> </span><span class=\"n\">unit</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">‚Äπ'a‚Ä∫</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"s\">‚Äπùü≠‚Ä∫</span><span class=\"o\">)</span>\n<span class=\"w\">    </span><span class=\"kp\">assumes</span><span class=\"w\"> </span><span class=\"n\">unitl</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">‚Äπunit ‚äó x = x‚Ä∫</span>\n<span class=\"w\">      </span><span class=\"kp\">and</span><span class=\"w\"> </span><span class=\"n\">unitr</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">‚Äπx ‚äó unit = x‚Ä∫</span>\n\n<span class=\"w\">  </span><span class=\"k\">instantiation</span><span class=\"w\"> </span><span class=\"n\">prod</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">semigroup</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">semigroup</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">semigroup</span>\n<span class=\"w\">  </span><span class=\"k\">begin</span>\n<span class=\"w\">    </span><span class=\"k\">definition</span><span class=\"w\"> </span><span class=\"n\">sgop_prod</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"'a √ó 'b ‚áí 'a √ó 'b ‚áí 'a √ó 'b\"</span><span class=\"w\"> </span><span class=\"kp\">where</span>\n<span class=\"w\">      </span><span class=\"s\">\"sgop_prod x y =</span>\n<span class=\"s\">        (case x of (a1, b1) ‚áí</span>\n<span class=\"s\">          (case y of (a2, b2) ‚áí (a1 ‚äó a2, b1 ‚äó b2)))\"</span>\n\n<span class=\"w\">    </span><span class=\"kn\">instance</span><span class=\"w\"> </span><span class=\"k\">proof</span>\n<span class=\"w\">      </span><span class=\"k\">fix</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">‚Äπ'a::semigroup √ó 'b::semigroup‚Ä∫</span>\n<span class=\"w\">      </span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"s\">‚Äπp ‚äó ùü≠ = p‚Ä∫</span>\n<span class=\"w\">      </span><span class=\"c\">(*</span>\n<span class=\"c\">proof (state)</span>\n<span class=\"c\">goal (1 subgoal):</span>\n<span class=\"c\"> 1. ‚ãÄx y z. x ‚äó y ‚äó z = x ‚äó (y ‚äó z)</span>\n<span class=\"c\">Type unification failed: No type arity prod :: monoid</span>\n\n<span class=\"c\">Type error in application: incompatible operand type</span>\n\n<span class=\"c\">Operator:  (‚äó) p :: 'a √ó 'b ‚áí 'a √ó 'b</span>\n<span class=\"c\">Operand:   ùü≠ :: ??'a</span>\n<span class=\"c\">       *)</span>\n</code></pre></div>\n<p>Looks like it is not realizing that I wanted to talk about semigroup instead of monoid.</p>",
        "id": 501018496,
        "sender_full_name": "Julin Shaji",
        "timestamp": 1740111942
    },
    {
        "content": "<p>Oh wait.. I think I got the statement wrong.</p>",
        "id": 501018616,
        "sender_full_name": "Julin Shaji",
        "timestamp": 1740112007
    },
    {
        "content": "<p>Is this right?</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">instance</span><span class=\"w\"> </span><span class=\"k\">proof</span>\n<span class=\"w\">    </span><span class=\"k\">fix</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"n\">q</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">‚Äπ'a::semigroup √ó 'b::semigroup‚Ä∫</span>\n<span class=\"w\">    </span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"s\">‚Äπ(p ‚äó q) ‚äó r = p ‚äó (q ‚äó r)‚Ä∫</span>\n<span class=\"w\">      </span><span class=\"k\">unfolding</span><span class=\"w\"> </span><span class=\"n\">sgop_prod_def</span>\n<span class=\"w\">      </span><span class=\"k\">unfolding</span><span class=\"w\"> </span><span class=\"n\">case_prod_unfold</span>\n<span class=\"w\">      </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">simp</span>\n</code></pre></div>\n<p>(I edited this comment a few times)</p>",
        "id": 501018700,
        "sender_full_name": "Julin Shaji",
        "timestamp": 1740112080
    },
    {
        "content": "<p>How do we know a proof method named <code>case_prod_unfold</code> is available? <br>\nIs it something that isabelle automatically derives for a given class?</p>",
        "id": 501019008,
        "sender_full_name": "Julin Shaji",
        "timestamp": 1740112257
    },
    {
        "content": "<p>Is there someplace where we can see the list of such autogenerated definitions?</p>",
        "id": 501019046,
        "sender_full_name": "Julin Shaji",
        "timestamp": 1740112283
    },
    {
        "content": "<p>There's the \"What's in main\" document that comes with isabelle. Find it in the documentation panel of jEdit, under the reference manuals section. In there is a type <code>case_prod</code>. (I found it by first searching for <code>case_prod</code> in the isar reference manual, and then in the what's in main document) In this case, <code>case_prod_unfold</code> is not auto generated, e.g. the type <code>curry</code> that is also defined there does not have <code>curry_unfold</code>. Also if you control-click it you go to the definition. There is, however, <code>curry_case_prod</code>.</p>\n<p>For completeness: you can inspect these definitions with e.g. <code>thm case_prod_unfold</code> (at the global level). I found the <code>curry_case_prod</code> definition using <code>find_theorems name: curry_</code>.</p>\n<p>I guess in your specific case, you would've needed the insight that your proof was about tuples, and hence that looking up all lemmas related to <code>case_prod</code> would be helpful... Maybe it's me but those kinds of insights I never have on my own :p</p>",
        "id": 501044010,
        "sender_full_name": "Bob Rubbens",
        "timestamp": 1740125232
    }
]