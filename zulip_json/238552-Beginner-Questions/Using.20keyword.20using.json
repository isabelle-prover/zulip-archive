[
    {
        "content": "<p>At <a href=\"https://isabelle.systems/cookbook/src/proofs/methods/Chained_Facts.thy\">Chained_Facts.thy</a> there is a simple apply script</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span>\n<span class=\"w\">  </span><span class=\"s\">\"∃x::nat. x &gt; 0\"</span>\n<span class=\"w\">  </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">zero_less_one</span>\n<span class=\"w\">  </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">rule</span><span class=\"w\"> </span><span class=\"n\">exI</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"k\">done</span>\n</code></pre></div>\n<p>demonstrating the chaining of the fact <code>zero_less_one</code></p>\n<p>I tried to transform this into a structured Isar proof but I could not prove my first goal in the forward proof:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span>\n<span class=\"w\">  </span><span class=\"s\">\"∃x::nat. x &gt; 0\"</span>\n<span class=\"k\">proof</span><span class=\"w\"> </span><span class=\"o\">-</span>\n<span class=\"w\">  </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"s\">\"(0::nat) &lt; 1\"</span>\n<span class=\"w\">    </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">zero_less_one</span>\n</code></pre></div>\n<p>How could I prove this with an elementary rule? <code>by (rule ...)</code></p>",
        "id": 343634485,
        "sender_full_name": "Gergely Buday",
        "timestamp": 1679481192
    },
    {
        "content": "<p>You can do it like this</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"s\">\"∃x::nat. x &gt; 0\"</span>\n<span class=\"k\">proof</span><span class=\"w\"> </span><span class=\"o\">-</span>\n<span class=\"w\">  </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"s\">\"(0::nat) &lt; 1\"</span>\n<span class=\"w\">    </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">zero_less_one</span><span class=\"w\"> </span><span class=\"ow\">.</span>\n<span class=\"w\">  </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">thesis</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">rule</span><span class=\"w\"> </span><span class=\"n\">exI</span><span class=\"o\">)</span>\n<span class=\"k\">qed</span>\n</code></pre></div>\n<p>The <code>.</code> here means \"immediate proof\". </p>\n<p>Alternatively, this works too</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"s\">\"∃x::nat. x &gt; 0\"</span>\n<span class=\"k\">proof</span><span class=\"w\"> </span><span class=\"o\">-</span>\n<span class=\"w\">  </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"s\">\"(0::nat) &lt; 1\"</span>\n<span class=\"w\">    </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">rule</span><span class=\"w\"> </span><span class=\"n\">zero_less_one</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">thesis</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">rule</span><span class=\"w\"> </span><span class=\"n\">exI</span><span class=\"o\">)</span>\n<span class=\"k\">qed</span>\n</code></pre></div>",
        "id": 343640002,
        "sender_full_name": "waynee95",
        "timestamp": 1679482508
    },
    {
        "content": "<p>I can not use datatype tree.<br>\ndatatype 'a tree = Tip | Node \"'a tree\" 'a \"'a tree\"<br>\nThen I try: <br>\nvalue \"Node(Tip, 1, Tip)\" or  value \"Node([], 1, [])\" or something else like this. Evry time I have error masage. Hope<br>\nsomebody can help me.</p>",
        "id": 344561165,
        "sender_full_name": "Andrei Koltsov",
        "timestamp": 1679783328
    },
    {
        "content": "<p>You do not need a tuple for a datatype constructor,  try </p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kt\">value</span><span class=\"w\"> </span><span class=\"s\">\"Node Tip (1::nat) Tip\"</span>\n<span class=\"c\">(*Still have to tell Isabelle the type of 1*)</span>\n</code></pre></div>\n<p>If you want to use a tuple for the constructor, it may look like this</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">datatype</span><span class=\"w\"> </span><span class=\"n n-Type\">'a</span><span class=\"w\"> </span><span class=\"n\">tree</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Tip</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Node</span><span class=\"w\"> </span><span class=\"s\">\"'a tree * 'a * 'a tree\"</span>\n</code></pre></div>",
        "id": 344612181,
        "sender_full_name": "Zixuan Fan",
        "timestamp": 1679818694
    },
    {
        "content": "<p>Yes, data constructors in Isabelle/HOL use Currying.</p>",
        "id": 344665086,
        "sender_full_name": "Wolfgang Jeltsch",
        "timestamp": 1679838650
    },
    {
        "content": "<p>El ladrón debió entrar por la puerta y uno de los sirvientes está implicado</p>",
        "id": 345304648,
        "sender_full_name": "Zakaria El mezamzi",
        "timestamp": 1680071398
    }
]