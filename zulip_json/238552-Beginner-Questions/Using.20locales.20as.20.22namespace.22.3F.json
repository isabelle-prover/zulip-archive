[
    {
        "content": "<p>I would like to use locales as a kind of \"namespace\", to define functions for a general type first and then be able to concretize them for a number of different types after, like so:</p>\n<div class=\"codehilite\"><pre><span></span><code>locale Id =\n  fixes t :: &#39;a\nbegin\ndefinition id&#39; :: &quot;&#39;a ⇒ &#39;a&quot; where &quot;id&#39; ≡ id&quot;\nend\n\nlocale IdInt = Id &quot;(0::int)&quot;\nlocale IdNat = Id &quot;(0::nat)&quot;\n</code></pre></div>\n\n\n<p>And indeed, <code>Id.id'</code> is accessible at this point, but sadly <code>IdInt.id'</code> and <code>IdNat.id</code> are not.<br>\nWhat's the right way to go about this?</p>",
        "id": 213275774,
        "sender_full_name": "Max Kirchmeier",
        "timestamp": 1602675597
    },
    {
        "content": "<p>why not use abbreviation for that?</p>",
        "id": 213276501,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1602676083
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"324414\">Max Kirchmeier</span> <a href=\"#narrow/stream/238552-Beginner-Questions/topic/Using.20locales.20as.20.22namespace.22.3F/near/213275774\">said</a>:<br>\n<code>Id.id'</code> is accessible at this point, but sadly <code>IdInt.id'</code> is not.</p>\n<p>That is the behavior I expected from locales actually. If you don't introduce a new definition, why would a locale spontaneously introduce a new symbol?</p>",
        "id": 213276632,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1602676199
    },
    {
        "content": "<p>Yes, that's precisely the problem, I would like the locale to introduce new symbols for things that have gotten \"more concrete\" :D<br>\n(I've also edited the first post to make it clear I want to be able to concretize the locale for a number of different types and not just one.)</p>",
        "id": 213276806,
        "sender_full_name": "Max Kirchmeier",
        "timestamp": 1602676307
    },
    {
        "content": "<p>I am not sure why you would want to do that (you also have to duplicate all theorems)</p>",
        "id": 213277179,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1602676535
    },
    {
        "content": "<p>Ah, I think I've solved it:</p>\n<div class=\"codehilite\"><pre><span></span><code>interpretation IdInt : Id &quot;0::int&quot;\n  done\n</code></pre></div>",
        "id": 213277212,
        "sender_full_name": "Max Kirchmeier",
        "timestamp": 1602676560
    },
    {
        "content": "<p><del>ahahah no</del> good try</p>",
        "id": 213277278,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1602676577
    },
    {
        "content": "<p>that lasts only in the current block</p>",
        "id": 213277303,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1602676594
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"233198\">Mathias Fleury</span> <a href=\"#narrow/stream/238552-Beginner-Questions/topic/Using.20locales.20as.20.22namespace.22.3F/near/213277179\">said</a>:</p>\n<blockquote>\n<p>I am not sure why you would want to do that (you also have to duplicate all theorems)</p>\n</blockquote>\n<p>I want to do that because I have a number of operations that I would like to define for machine-words of different sizes simultaneously without re-defining everything for every word size.</p>",
        "id": 213277379,
        "sender_full_name": "Max Kirchmeier",
        "timestamp": 1602676645
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"233198\">Mathias Fleury</span> <a href=\"#narrow/stream/238552-Beginner-Questions/topic/Using.20locales.20as.20.22namespace.22.3F/near/213277303\">said</a>:</p>\n<blockquote>\n<p>that lasts only in the current block</p>\n</blockquote>\n<p>Also, it seems to work, <code>IdInt.id'</code> is accessible even in other theories :P</p>",
        "id": 213277526,
        "sender_full_name": "Max Kirchmeier",
        "timestamp": 1602676730
    },
    {
        "content": "<p>Depends where it is defined:</p>\n<div class=\"codehilite\"><pre><span></span><code>locale IdInt\nbegin\ninterpretation H: Id where t = ‹0 :: int›\n  .\nlemma H: ‹H.id&#39; x = x›\n  sorry\nend\n\ncontext IdInt\nbegin\nthm H\n(*Id.id&#39; ?x = ?x*)\nend\n</code></pre></div>",
        "id": 213277634,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1602676794
    },
    {
        "content": "<p>Ah no, I'm not wrapping the <code>interpretation</code> in a locale:</p>\n<div class=\"codehilite\"><pre><span></span><code>locale Id =\n  fixes t :: &#39;a\nbegin\ndefinition id&#39; :: &quot;&#39;a ⇒ &#39;a&quot; where &quot;id&#39; ≡ id&quot;\n\nlemma id&#39;: &quot;id&#39; x = x&quot; unfolding id&#39;_def by simp\nend\n\ninterpretation IdInt : Id &quot;0::int&quot;\n  done\n\nprint_statement IdInt.id&#39;\n</code></pre></div>",
        "id": 213277915,
        "sender_full_name": "Max Kirchmeier",
        "timestamp": 1602676944
    },
    {
        "content": "<p>there is <code>global_interpretation</code></p>",
        "id": 213277967,
        "sender_full_name": "maximilian p.l. haslbeck",
        "timestamp": 1602676984
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"233151\">maximilian p.l. haslbeck</span> <a href=\"#narrow/stream/238552-Beginner-Questions/topic/Using.20locales.20as.20.22namespace.22.3F/near/213277967\">said</a>:</p>\n<blockquote>\n<p>there is <code>global_interpretation</code></p>\n</blockquote>\n<p>Yep, although <code>interpretation</code> seems to work the same when used at theory-level:</p>\n<blockquote>\n<p>When used on the level of a global theory, there is no end of a<br>\ncurrent context block, hence interpretation behaves identically to<br>\nglobal_interpretation then.</p>\n</blockquote>",
        "id": 213278310,
        "sender_full_name": "Max Kirchmeier",
        "timestamp": 1602677193
    }
]