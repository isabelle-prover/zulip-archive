[
    {
        "content": "<p>I want to prove finiteness using a surjection. i.e.<br>\n\"if f is a surjection from A to B, where A:'a set, B:'b set, then if A is finite, then B is finite\".</p>\n<p>But there is no surj_on predicate, the only thing that I can find is about surjections on the universe. May I please ask if there exist any theorem I can appeal to?</p>",
        "id": 485209166,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1732957029
    },
    {
        "content": "<p>Aha I find this...</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"n\">Finite_Set.finite_vimageD'</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">finite</span><span class=\"w\"> </span><span class=\"o\">(?</span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"sx\">` ?A) ⟹ ?A ⊆ range ?f ⟹ finite ?A</span>\n</code></pre></div>\n<p>Please let me know if it is not conventionally the best one for this case.</p>",
        "id": 485209331,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1732957187
    },
    {
        "content": "<p>Oh it is not what I want because it requires the collection of elements of f(A), regardless whether it comes from A or not, is finite. I am still in trouble.</p>",
        "id": 485209824,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1732957624
    },
    {
        "content": "<p>Okay... I can do:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">surj_on_finite_lemma</span><span class=\"o\">:</span>\n<span class=\"w\">  </span><span class=\"kp\">assumes</span><span class=\"w\"> </span><span class=\"s\">\"⋀b . b ∈ B  ⟹ ∃ a. a ∈ A ∧ f a = b\"</span>\n<span class=\"w\">     </span><span class=\"kp\">and</span><span class=\"w\"> </span><span class=\"s\">\"finite A\"</span>\n<span class=\"w\">   </span><span class=\"kp\">shows</span><span class=\"w\"> </span><span class=\"s\">\"finite B\"</span>\n<span class=\"k\">proof</span><span class=\"w\"> </span><span class=\"o\">-</span>\n<span class=\"w\">  </span><span class=\"k\">obtain</span><span class=\"w\"> </span><span class=\"n\">g</span><span class=\"w\"> </span><span class=\"kp\">where</span><span class=\"w\"> </span><span class=\"s\">\"⋀b. b ∈ B ⟹ g b ∈ A ∧ (f (g b)) = b\"</span>\n<span class=\"w\">    </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">metis</span><span class=\"w\"> </span><span class=\"n\">assms</span><span class=\"o\">(</span><span class=\"n\">1</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">f_inv_into_f</span><span class=\"w\"> </span><span class=\"n\">imageI</span><span class=\"w\"> </span><span class=\"n\">inv_into_into</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"s\">\"inj_on g B\"</span>\n<span class=\"w\">    </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">metis</span><span class=\"w\">  </span><span class=\"n\">inj_on_inverseI</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">thesis</span><span class=\"w\"> </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">finite_vimage_IntI</span><span class=\"o\">[</span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"n\">g</span><span class=\"w\"> </span><span class=\"n\">B</span><span class=\"o\">]</span>\n\n<span class=\"w\">    </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"n\">add</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Int_absorb2</span><span class=\"w\"> </span><span class=\"s\">‹⋀b. b ∈ B ⟹ g b ∈ A ∧ f (g b) = b›</span>\n<span class=\"w\">  </span><span class=\"s\">‹inj_on g B›</span><span class=\"w\"> </span><span class=\"n\">assms</span><span class=\"o\">(</span><span class=\"n\">2</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">inf_commute</span><span class=\"w\"> </span><span class=\"n\">subset_iff</span><span class=\"o\">)</span>\n<span class=\"k\">qed</span>\n</code></pre></div>\n<p>But I am very surprised why it is already a lemma written there.</p>",
        "id": 485211213,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1732958881
    },
    {
        "content": "<p>I also find it a pity that we don't have a <code>surj_on</code> predicate in the standard library. I defined my own definitions I work with:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">abbreviation</span><span class=\"w\"> </span><span class=\"n\">surj_on</span><span class=\"w\"> </span><span class=\"kp\">where</span>\n<span class=\"w\">  </span><span class=\"s\">\"surj_on f domain ≡ (∀y. ∃x ∈ domain. y = f x)\"</span>\n\n<span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">surj_on_alternative</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"surj_on f domain ⟷ f ` domain = UNIV\"</span>\n<span class=\"w\">  </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">auto</span>\n</code></pre></div>\n<p>These work quite well with the lemmas I need.</p>\n<p>For your exact problem, a lemma that will probably work for you is: <code>Finite_Set.finite_surj</code></p>",
        "id": 485211422,
        "sender_full_name": "Balazs Toth",
        "timestamp": 1732959069
    },
    {
        "content": "<p>Aha this is what I want exactly!!! Thank you!</p>",
        "id": 485212083,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1732959647
    }
]