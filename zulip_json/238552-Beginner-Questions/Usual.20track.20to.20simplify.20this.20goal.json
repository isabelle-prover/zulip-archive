[
    {
        "content": "<p>I encounter something massive like this</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">∈</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">λ</span><span class=\"o\">(</span><span class=\"n\">v</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">w</span><span class=\"o\">)</span><span class=\"ow\">.</span><span class=\"w\"> </span><span class=\"n\">w</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"sx\">`</span>\n<span class=\"sx\">         ({w |w. nth_world M r s cwl n w} ×</span>\n<span class=\"sx\">          s ×</span>\n<span class=\"sx\">          ⋃ (set `</span>\n<span class=\"w\">              </span><span class=\"n\">uncurry</span><span class=\"w\"> </span><span class=\"n\">cwl</span><span class=\"w\"> </span><span class=\"sx\">`</span>\n<span class=\"sx\">              (s ×</span>\n<span class=\"sx\">               {w |w. nth_world M r s cwl n w})))</span>\n</code></pre></div>",
        "id": 487327684,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1733859421
    },
    {
        "content": "<p>My aim is to convert this to a predicate on x. What would mature users' attack on this?</p>",
        "id": 487328069,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1733859521
    },
    {
        "content": "<p>My way to do it in HOL4 would be simplifying with the definition of Image, uncurrying and products. I naively tried some unfolding, and got this:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">∈</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">λ</span><span class=\"o\">(</span><span class=\"n\">v</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">w</span><span class=\"o\">)</span><span class=\"ow\">.</span><span class=\"w\"> </span><span class=\"n\">w</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"sx\">`</span>\n<span class=\"sx\">         ({w |w. nth_world M r s cwl n w} ×</span>\n<span class=\"sx\">          s ×</span>\n<span class=\"sx\">          ⋃ (set `</span>\n<span class=\"w\">              </span><span class=\"o\">(</span><span class=\"n\">λpair.</span>\n<span class=\"w\">                  </span><span class=\"n\">cwl</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">fst</span><span class=\"w\"> </span><span class=\"n\">pair</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">snd</span><span class=\"w\"> </span><span class=\"n\">pair</span><span class=\"o\">))</span><span class=\"w\"> </span><span class=\"sx\">`</span>\n<span class=\"sx\">              (s ×</span>\n<span class=\"sx\">               {w |w. nth_world M r s cwl n w})))</span>\n</code></pre></div>",
        "id": 487328299,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1733859620
    },
    {
        "content": "<p>Note the <code>\\lambda pair. ...</code>. Is there something to do to tell Isabelle to split the pair?</p>",
        "id": 487328376,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1733859648
    },
    {
        "content": "<p><code>apply (auto simp: image_iff)</code></p>",
        "id": 487329194,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1733859992
    },
    {
        "content": "<p>Thanks! It works perfectly, and my proof now look like this:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"ow\">...</span>\n<span class=\"w\">  </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"s\">\"x ∈ (λ(v, f, w). w) `</span>\n<span class=\"s\">              ({w |w. nth_world M r s cwl n w} ×</span>\n<span class=\"s\">               s ×</span>\n<span class=\"s\">               ⋃ (set `</span>\n<span class=\"s\">                   uncurry cwl `</span>\n<span class=\"s\">                   (s ×</span>\n<span class=\"s\">                    {w |w.</span>\n<span class=\"s\">                     nth_world M r s cwl n w})))\"</span>\n<span class=\"w\">    </span><span class=\"k\">unfolding</span>\n<span class=\"w\">    </span><span class=\"n\">mem_Sigma_iff</span><span class=\"w\"> </span><span class=\"n\">mem_Collect_eq</span><span class=\"w\"> </span><span class=\"n\">uncurry_def</span>\n<span class=\"w\">    </span><span class=\"n\">Bex_def</span><span class=\"w\"> </span><span class=\"n\">bex_triv</span><span class=\"w\"> </span><span class=\"n\">UN_iff</span><span class=\"w\"> </span><span class=\"n\">image_iff</span>\n<span class=\"w\">    </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">auto</span><span class=\"w\"> </span><span class=\"n\">simp</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">image_iff</span><span class=\"w\"> </span><span class=\"o\">)</span>\n<span class=\"w\">    </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">xw</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">blast</span>\n</code></pre></div>",
        "id": 487330092,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1733860419
    },
    {
        "content": "<p>I am a bit overwhelmed how to turn it into Isar. I will try a bit...</p>",
        "id": 487330241,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1733860471
    },
    {
        "content": "<p>my intuition says that <code>show ... using xw by (fastforce simp: image_iff)</code> should work (or maybe force), making it possible to write all that in one line</p>",
        "id": 487330276,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1733860489
    },
    {
        "content": "<p>So what do you know about \"fastforce\" and \"force\" that helps you to make this conjecture?</p>",
        "id": 487330509,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1733860572
    },
    {
        "content": "<p>fastforce and force try harder than auto</p>",
        "id": 487330611,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1733860617
    },
    {
        "content": "<p>so usually auto + blast can be combined in one step of fastforce or force</p>",
        "id": 487330652,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1733860632
    },
    {
        "content": "<p>sledgehammer(add: mem_Sigma_iff mem_Collect_eq uncurry_def <br>\n    Bex_def bex_triv UN_iff image_iff xw) fails.</p>",
        "id": 487330670,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1733860640
    },
    {
        "content": "<p>Yeah but rewriting using the simplifier is not exactly sledgehammer strength.</p>",
        "id": 487330748,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1733860670
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"233198\">Mathias Fleury</span> <a href=\"#narrow/channel/238552-Beginner-Questions/topic/Usual.20track.20to.20simplify.20this.20goal/near/487330652\">said</a>:</p>\n<blockquote>\n<p>so usually auto + blast can be combined in one step of fastforce or force</p>\n</blockquote>\n<p>Thanks! That is good to know. <br>\nFYI this time both of them does not work this time.</p>",
        "id": 487330777,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1733860682
    },
    {
        "content": "<p>Sad <span aria-label=\"frown\" class=\"emoji emoji-1f641\" role=\"img\" title=\"frown\">:frown:</span></p>",
        "id": 487330906,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1733860722
    },
    {
        "content": "<p>but happens</p>",
        "id": 487330916,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1733860729
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"233198\">Mathias Fleury</span> <a href=\"#narrow/channel/238552-Beginner-Questions/topic/Usual.20track.20to.20simplify.20this.20goal/near/487330748\">said</a>:</p>\n<blockquote>\n<p>Yeah but rewriting using the simplifier is not exactly sledgehammer strength.</p>\n</blockquote>\n<p>I am in the era that sledgehammer is already there, so I hardly know anything about apply style yet. That is why I do not even know what to try.</p>",
        "id": 487330985,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1733860765
    },
    {
        "content": "<p>I will try to chop the goal into smaller pieces...</p>",
        "id": 487331069,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1733860796
    }
]