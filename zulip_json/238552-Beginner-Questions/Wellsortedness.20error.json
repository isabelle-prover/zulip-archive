[
    {
        "content": "<p>Hello, I am new to Isabelle and I have a Wellsortedness error on \"nat\" type.<br>\nI am using this function (which i cannot change):</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">rank</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"'a Preference_Relation ⇒ 'a ⇒ nat\"</span><span class=\"w\"> </span><span class=\"kp\">where</span>\n<span class=\"w\">  </span><span class=\"s\">\"rank r a = card (above r a)\"</span>\n</code></pre></div>\n<p>which returns the number of ranking of \"a\" in the Preference Relation (which is a 'a rel) \"r\" of  type 'a.<br>\nI tried using it in the simplest way writing:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kt\">value</span><span class=\"w\"> </span><span class=\"s\">\"rank {(3,4), (4,5), (5,6)} 5\"</span>\n</code></pre></div>\n<p>but i get this error: </p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"s\">\"Wellsortedness error:</span>\n<span class=\"s\">Type 'a not of sort {enum,equal}</span>\n<span class=\"s\">Cannot derive subsort relation numeral &lt; {enum,equal}\"</span>\n</code></pre></div>\n<p>So i thought the problem was to not explicitly defining the types and I updated my code:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">definition</span><span class=\"w\"> </span><span class=\"n\">my_pr</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"nat Preference_Relation\"</span><span class=\"w\"> </span><span class=\"kp\">where</span>\n<span class=\"s\">\"my_pr = {(3,4), (4,5), (5,6)}\"</span>\n\n<span class=\"kt\">value</span><span class=\"w\"> </span><span class=\"s\">\"rank my_pr 5\"</span>\n</code></pre></div>\n<p>but I get this error</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"n\">Wellsortedness</span><span class=\"w\"> </span><span class=\"n\">error</span><span class=\"o\">:</span>\n<span class=\"n\">Type</span><span class=\"w\"> </span><span class=\"n\">nat</span><span class=\"w\"> </span><span class=\"n\">not</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">sort</span><span class=\"w\"> </span><span class=\"ow\">{</span><span class=\"n\">enum</span><span class=\"o\">,</span><span class=\"n\">equal</span><span class=\"ow\">}</span>\n<span class=\"n\">No</span><span class=\"w\"> </span><span class=\"n\">type</span><span class=\"w\"> </span><span class=\"n\">arity</span><span class=\"w\"> </span><span class=\"n\">nat</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"n\">enum</span>\n</code></pre></div>\n<p>Doesn't this mean that nat does not have enum and equals? but I think it does and I cannot understand how to solve it. I looked for some answers here and I only found one which I don't think fits my case but I am a beginner so maybe I just didn't understand. Thanks in advance</p>",
        "id": 405564601,
        "sender_full_name": "Salvatore Francesco Rossetta",
        "timestamp": 1701549202
    },
    {
        "content": "<p>nat is not enumerable, because you cannot enumerate all values in finite time</p>",
        "id": 405565021,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1701549599
    },
    {
        "content": "<p>just think of <code>?x::nat. P x</code>: there is no finite-time solution to know if this holds or not</p>",
        "id": 405565107,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1701549661
    },
    {
        "content": "<p>However in your case, you can reformulate the problem:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">definition</span><span class=\"w\"> </span><span class=\"n\">above_set</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"_ ⇒ 'a ⇒ 'a set\"</span>\n<span class=\"w\">  </span><span class=\"kp\">where</span><span class=\"w\"> </span><span class=\"s\">\"above_set r a ≡ above (set r) a\"</span>\n\n<span class=\"k\">lemmas</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">code</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">above_set_def</span><span class=\"o\">[</span><span class=\"n\">symmetric</span><span class=\"o\">]</span>\n<span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">code</span><span class=\"o\">]:</span>\n<span class=\"w\">  </span><span class=\"s\">‹above_set [] a = {}›</span>\n<span class=\"w\">  </span><span class=\"s\">‹above_set ((x,y)#xs) a = (if x=a then {y} else {}) ∪ above_set xs a›</span>\n<span class=\"w\">  </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">auto</span><span class=\"w\"> </span><span class=\"n\">simp</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">above_set_def</span><span class=\"w\"> </span><span class=\"n\">above_def</span><span class=\"o\">)</span>\n\n<span class=\"kt\">value</span><span class=\"w\"> </span><span class=\"s\">\"(above (set [(3,4), (4,5), (5,6)]) (5::nat))\"</span>\n</code></pre></div>",
        "id": 405565492,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1701550051
    },
    {
        "content": "<p>but I think there is a better way</p>",
        "id": 405565588,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1701550128
    },
    {
        "content": "<p>Turns out that I do not remember enough how the setup of sets work, to make the following work:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">code</span><span class=\"o\">]:</span>\n<span class=\"w\">  </span><span class=\"s\">‹above (insert x xs) a = (if a=fst x then {snd x} else {}) ∪ above xs a›</span>\n<span class=\"w\">  </span><span class=\"s\">‹above {x} a = (if a=fst x then {snd x} else {})›</span>\n<span class=\"w\">  </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">cases</span><span class=\"w\"> </span><span class=\"n\">x;auto</span><span class=\"w\"> </span><span class=\"n\">simp</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">above_set_def</span><span class=\"w\"> </span><span class=\"n\">above_def</span><span class=\"o\">)+</span>\n</code></pre></div>",
        "id": 405566611,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1701550976
    },
    {
        "content": "<p>Actually, when I paste the second lemma you wrote it's giving me an error</p>\n<p>\"Set.insert\" is not a constructor, on left hand side of equation, in theorem:<br>\nabove (insert ?x bot_set_inst.bot_set) ?a ≡<br>\nif ?a = fst ?x then insert (snd ?x) bot_set_inst.bot_set else bot_set_inst.bot_set</p>\n<p>While if I don't, it seems to work and the value command gives as output \"6\", which is indeed the set above \"5\"</p>",
        "id": 405628183,
        "sender_full_name": "Salvatore Francesco Rossetta",
        "timestamp": 1701596503
    },
    {
        "content": "<p>Yeah that what I meant with the fact that I do not manage to make it work…</p>",
        "id": 405750456,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1701669247
    },
    {
        "content": "<p>I think you meant to do the following:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">code</span><span class=\"o\">]:</span>\n<span class=\"w\">  </span><span class=\"s\">‹above (set []) a = {}›</span>\n<span class=\"w\">  </span><span class=\"s\">‹above (set ((x,y)#xs)) a = (if x=a then {y} else {}) ∪ above (set xs) a›</span>\n<span class=\"w\">  </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">auto</span><span class=\"w\"> </span><span class=\"n\">simp</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">above_def</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>This works because <code>set</code> and <code>coset</code> are constructors for sets in generated code. The setup was done using</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">code_datatype</span><span class=\"w\"> </span><span class=\"n\">set</span><span class=\"w\"> </span><span class=\"n\">coset</span>\n</code></pre></div>\n<p>See the codegen tutorial for more info on how this works in general. You can also rewrite the function in terms of <code>Set.filter</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">code</span><span class=\"o\">]:</span><span class=\"w\"> </span><span class=\"s\">‹above r a = snd ` Set.filter (λ(x, y). x = a) r›</span>\n<span class=\"w\">  </span><span class=\"k\">unfolding</span><span class=\"w\"> </span><span class=\"n\">above_def</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">force</span>\n</code></pre></div>",
        "id": 405766447,
        "sender_full_name": "Maximilian Schäffeler",
        "timestamp": 1701676619
    },
    {
        "content": "<p>Just FYI, there are already some bits of social choice theory in the AFP that you could build on.</p>",
        "id": 405778362,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1701680691
    },
    {
        "content": "<p>Feel free to ask me about them.</p>",
        "id": 405778391,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1701680700
    }
]