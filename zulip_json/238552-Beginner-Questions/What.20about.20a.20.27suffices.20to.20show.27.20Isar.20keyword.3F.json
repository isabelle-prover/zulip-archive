[
    {
        "content": "<p>I find myself repeatedly longing for a nice way to write</p>\n<p><code>Instead of the current goal, it is enough to instead show bla (since [easy justification])</code></p>\n<p>Is there a <code>suffices</code> keyword or similar (that would change the goal)?</p>\n<p>I see that there exists the 'presume' keyword, but that does the wrong thing.</p>",
        "id": 489101166,
        "sender_full_name": "Moritz R",
        "timestamp": 1734284144
    },
    {
        "content": "<p>Sure, one can just write <br>\n<code>have bla by [easy justification]</code> right at the <em>end</em> of the proof, but i find that often leaves a ready confused to what will be happening for the earlier part of the proof - it doesnt <em>communicate</em> what i want to communicate.</p>",
        "id": 489101299,
        "sender_full_name": "Moritz R",
        "timestamp": 1734284267
    },
    {
        "content": "<p>I am not aware of any keyword to do that. How about starting the proof with</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"w\">  </span><span class=\"k\">fix</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"n\">B</span><span class=\"w\"> </span><span class=\"n\">C</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"n\">bool</span>\n<span class=\"w\">  </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"n\">H</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">thesis</span><span class=\"w\">  </span><span class=\"kp\">if</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"kp\">and</span><span class=\"w\"> </span><span class=\"n\">B</span><span class=\"w\"> </span><span class=\"kp\">and</span><span class=\"w\"> </span><span class=\"n\">C</span>\n<span class=\"w\">    </span><span class=\"gr\">sorry</span><span class=\"w\"> </span><span class=\"c\">(*easy justification*)</span>\n\n<span class=\"c\">(*then either application of the theorem to have the shows*)</span>\n<span class=\"w\">  </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"n\">thesis</span>\n<span class=\"w\">  </span><span class=\"k\">proof</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">rule</span><span class=\"w\"> </span><span class=\"n\">H</span><span class=\"o\">)</span>\n<span class=\"w\">    </span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"n\">A</span>\n<span class=\"w\">      </span><span class=\"gr\">sorry</span>\n<span class=\"w\">    </span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"n\">B</span>\n<span class=\"w\">      </span><span class=\"gr\">sorry</span>\n<span class=\"w\">    </span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"n\">C</span>\n<span class=\"w\">      </span><span class=\"gr\">sorry</span>\n<span class=\"w\">  </span><span class=\"k\">qed</span>\n\n<span class=\"c\">(*or you go for*)</span>\n<span class=\"w\">  </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"n\">A</span>\n<span class=\"w\">    </span><span class=\"gr\">sorry</span>\n<span class=\"w\">  </span><span class=\"k\">moreover</span><span class=\"w\"> </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"n\">B</span>\n<span class=\"w\">    </span><span class=\"gr\">sorry</span>\n<span class=\"w\">  </span><span class=\"k\">moreover</span><span class=\"w\"> </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"n\">C</span>\n<span class=\"w\">    </span><span class=\"gr\">sorry</span>\n<span class=\"w\">  </span><span class=\"k\">ultimately</span><span class=\"w\"> </span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"n\">thesis</span>\n<span class=\"w\">    </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">H</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">blast</span>\n</code></pre></div>",
        "id": 489104181,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1734286617
    },
    {
        "content": "<p>For this one still has to write A multiple times :/ but already better than quietly appending it at the end and pretending we only did forward reasoning the whole time :D</p>",
        "id": 489120177,
        "sender_full_name": "Moritz R",
        "timestamp": 1734301689
    },
    {
        "content": "<p>Why not use <code>is</code>? (and give a better name than goal1 obviously, but it is easier on real examples to come up with names)</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"w\">  </span><span class=\"k\">fix</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"n\">B</span><span class=\"w\"> </span><span class=\"n\">C</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"n\">bool</span>\n<span class=\"w\">  </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"n\">H</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">thesis</span><span class=\"w\">  </span><span class=\"kp\">if</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"kp\">is</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">goal1</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"kp\">and</span><span class=\"w\"> </span><span class=\"n\">B</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"kp\">is</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">goal2</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"kp\">and</span><span class=\"w\"> </span><span class=\"n\">C</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"kp\">is</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">goal3</span><span class=\"o\">)</span>\n<span class=\"w\">    </span><span class=\"gr\">sorry</span>\n<span class=\"w\">  </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"n\">thesis</span>\n<span class=\"w\">  </span><span class=\"k\">proof</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">rule</span><span class=\"w\"> </span><span class=\"n\">H</span><span class=\"o\">)</span>\n<span class=\"w\">    </span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">goal1</span>\n<span class=\"w\">      </span><span class=\"gr\">sorry</span>\n<span class=\"w\">    </span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">goal2</span>\n<span class=\"w\">      </span><span class=\"gr\">sorry</span>\n<span class=\"w\">    </span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">goal3</span>\n<span class=\"w\">      </span><span class=\"gr\">sorry</span>\n<span class=\"w\">  </span><span class=\"k\">qed</span>\n</code></pre></div>",
        "id": 489152412,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1734328483
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"768294\">Moritz R</span> <a href=\"#narrow/channel/238552-Beginner-Questions/topic/What.20about.20a.20'suffices.20to.20show'.20Isar.20keyword.3F/near/489101166\">said</a>:</p>\n<blockquote>\n<p>I find myself repeatedly longing for a nice way to write</p>\n<p><code>Instead of the current goal, it is enough to instead show bla (since [easy justification])</code></p>\n<p>Is there a <code>suffices</code> keyword or similar (that would change the goal)?</p>\n<p>I see that there exists the 'presume' keyword, but that does the wrong thing.</p>\n</blockquote>\n<p>One of the problems with that is that Isar does not have a concept of ‘the current goal’. At any given point there may be more than one goal and you can solve them in whatever order you want. So if you wanted to have a keyword like that, you would have to specify both the new goal and the old goal that you want to replace with it.</p>\n<p>I don't know enough about the internals of Isar to say if something like that would be possible, but I would imagine so. Not sure how useful it would be in that form though.</p>",
        "id": 490032516,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1734635745
    },
    {
        "content": "<p>In some cases you can also do something like that with an induction rule; consider e.g. the rule <code>linorder_wlog</code>, which allows you to prove <code>P x y</code> where <code>x</code> and <code>y</code> are of type <code>'a :: linorder</code> by  additionally assuming <code>x ≤ y</code> and showing that <code>P</code> is symmetric.</p>",
        "id": 490032819,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1734635872
    }
]