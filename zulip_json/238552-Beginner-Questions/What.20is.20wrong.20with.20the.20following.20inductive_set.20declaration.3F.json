[
    {
        "content": "<p>I am attempting to write such a definition:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">inductive_set</span><span class=\"w\"> </span><span class=\"n\">nth_worlds</span><span class=\"o\">::</span>\n<span class=\"w\"> </span><span class=\"s\">\"('m,'p,'a) model ⇒'a ⇒</span>\n<span class=\"s\">  (nat ⇒ ('m,'p) cform set) ⇒ (('m,'p) cform ⇒ 'a list) ⇒</span>\n<span class=\"s\">  nat ⇒ 'a set\"</span>\n<span class=\"w\"> </span><span class=\"kp\">for</span><span class=\"w\"> </span><span class=\"n\">M</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"('m,'p,'a) model\"</span><span class=\"w\"> </span><span class=\"kp\">and</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"n n-Type\">'a</span>\n<span class=\"w\"> </span><span class=\"kp\">and</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"nat ⇒ ('m,'p) cform set\"</span>\n<span class=\"w\"> </span><span class=\"kp\">and</span><span class=\"w\"> </span><span class=\"n\">cwl</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"('m,'p) cform ⇒ 'a list\"</span>\n<span class=\"w\">  </span><span class=\"kp\">where</span>\n<span class=\"w\">   </span><span class=\"n\">zero</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"w = r ⟹ w ∈ nth_worlds M r f cwl 0 \"</span>\n<span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">suc</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"v ∈ nth_worlds M r f cwl n ⟹</span>\n<span class=\"s\">         cDIAM m fl ∈ f n ⟹</span>\n<span class=\"s\">         asatis M v (cDIAM m fl) ⟹</span>\n<span class=\"s\">         w ∈ set (cwl (cDIAM m fl))</span>\n<span class=\"s\"> ⟹ w ∈ nth_worlds M r f cwl  (n+1)\"</span>\n</code></pre></div>\n<p>That is, I am trying to define a family of sets indexed by natural numbers (the last argument among the inductive set inputs). And Isabelle is complaining:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"n\">Argument</span><span class=\"w\"> </span><span class=\"n\">types</span>\n<span class=\"n n-Type\">'a</span><span class=\"w\"> </span><span class=\"n\">set</span><span class=\"w\"> </span><span class=\"n\">×</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n n-Type\">'m</span><span class=\"w\"> </span><span class=\"n\">⇒</span><span class=\"w\"> </span><span class=\"n n-Type\">'a</span><span class=\"w\"> </span><span class=\"n\">list</span><span class=\"w\"> </span><span class=\"n\">⇒</span><span class=\"w\"> </span><span class=\"n\">bool</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">×</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n n-Type\">'p</span><span class=\"w\"> </span><span class=\"n\">⇒</span><span class=\"w\"> </span><span class=\"n n-Type\">'a</span><span class=\"w\"> </span><span class=\"n\">⇒</span><span class=\"w\"> </span><span class=\"n\">bool</span><span class=\"o\">),</span><span class=\"w\"> </span><span class=\"n n-Type\">'a</span><span class=\"o\">,</span>\n<span class=\"w\">  </span><span class=\"n\">nat</span><span class=\"w\"> </span><span class=\"n\">⇒</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n n-Type\">'m</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n n-Type\">'p</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">cform</span><span class=\"w\"> </span><span class=\"n\">set</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n n-Type\">'m</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n n-Type\">'p</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">cform</span><span class=\"w\"> </span><span class=\"n\">⇒</span><span class=\"w\"> </span><span class=\"n n-Type\">'a</span><span class=\"w\"> </span><span class=\"n\">list</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">nat</span>\n<span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">nth_worlds</span><span class=\"w\"> </span><span class=\"n\">do</span><span class=\"w\"> </span><span class=\"n\">not</span><span class=\"w\"> </span><span class=\"n\">agree</span><span class=\"w\"> </span><span class=\"k\">with</span><span class=\"w\"> </span><span class=\"n\">types</span>\n<span class=\"n n-Type\">'a</span><span class=\"w\"> </span><span class=\"n\">set</span><span class=\"w\"> </span><span class=\"n\">×</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n n-Type\">'m</span><span class=\"w\"> </span><span class=\"n\">⇒</span><span class=\"w\"> </span><span class=\"n n-Type\">'a</span><span class=\"w\"> </span><span class=\"n\">list</span><span class=\"w\"> </span><span class=\"n\">⇒</span><span class=\"w\"> </span><span class=\"n\">bool</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">×</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n n-Type\">'p</span><span class=\"w\"> </span><span class=\"n\">⇒</span><span class=\"w\"> </span><span class=\"n n-Type\">'a</span><span class=\"w\"> </span><span class=\"n\">⇒</span><span class=\"w\"> </span><span class=\"n\">bool</span><span class=\"o\">),</span><span class=\"w\"> </span><span class=\"n n-Type\">'a</span><span class=\"o\">,</span>\n<span class=\"w\">  </span><span class=\"n\">nat</span><span class=\"w\"> </span><span class=\"n\">⇒</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n n-Type\">'m</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n n-Type\">'p</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">cform</span><span class=\"w\"> </span><span class=\"n\">set</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n n-Type\">'m</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n n-Type\">'p</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">cform</span><span class=\"w\"> </span><span class=\"n\">⇒</span><span class=\"w\"> </span><span class=\"n n-Type\">'a</span><span class=\"w\"> </span><span class=\"n\">list</span>\n<span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">declared</span><span class=\"w\"> </span><span class=\"n\">parameters</span>\n</code></pre></div>",
        "id": 487202260,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1733823748
    },
    {
        "content": "<p>May I please ask what is wrong here? The error message from Isabelle is not always helpful.</p>",
        "id": 487202350,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1733823775
    },
    {
        "content": "<p>Or am I allowed to declare indexed inductive sets at all? Should it be an inductive predicate on pairs instead?</p>",
        "id": 487202468,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1733823816
    },
    {
        "content": "<p>This one works for me:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">inductive_set</span><span class=\"w\"> </span><span class=\"n\">nth_worlds</span><span class=\"o\">::</span>\n<span class=\"w\"> </span><span class=\"s\">\"('m,'p,'a) model ⇒'a ⇒</span>\n<span class=\"s\">  (nat ⇒ (('m,'p) cform) set) ⇒ (('m,'p) cform ⇒ 'a list) ⇒</span>\n<span class=\"s\">  (nat×'a) set\"</span>\n<span class=\"w\"> </span><span class=\"kp\">for</span><span class=\"w\"> </span><span class=\"n\">M</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"('m,'p,'a) model\"</span><span class=\"w\"> </span><span class=\"kp\">and</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"n n-Type\">'a</span>\n<span class=\"w\"> </span><span class=\"kp\">and</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"nat ⇒ ('m,'p) cform set\"</span>\n<span class=\"w\"> </span><span class=\"kp\">and</span><span class=\"w\"> </span><span class=\"n\">cwl</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"('m,'p) cform ⇒ 'a list\"</span>\n<span class=\"w\">  </span><span class=\"kp\">where</span>\n<span class=\"w\">   </span><span class=\"n\">zero</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"w = r ⟹ (0,w) ∈ nth_worlds M r f cwl \"</span>\n<span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">suc</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"(n,v) ∈ nth_worlds M r f cwl⟹</span>\n<span class=\"s\">         cDIAM m fl ∈ f n ⟹</span>\n<span class=\"s\">         asatis M v (cDIAM m fl) ⟹</span>\n<span class=\"s\">         w ∈ set (cwl (cDIAM m fl))</span>\n<span class=\"s\"> ⟹ (n+1,w) ∈ nth_worlds M r f cwl\"</span>\n</code></pre></div>",
        "id": 487203842,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1733824213
    },
    {
        "content": "<p>But I am still not clear if it is the heart of the problem, can we vary a parameter when making a inductive_set declaration?</p>",
        "id": 487203961,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1733824257
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"n\">$</span><span class=\"w\"> </span><span class=\"n\">git</span><span class=\"w\"> </span><span class=\"n\">diff</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">no</span><span class=\"o\">-</span><span class=\"n\">index</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">word</span><span class=\"o\">-</span><span class=\"n\">diff</span><span class=\"w\"> </span><span class=\"n\">/tmp/a.txt</span><span class=\"w\"> </span><span class=\"n\">/tmp/b.txt</span>\n<span class=\"n\">diff</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">git</span><span class=\"w\"> </span><span class=\"n\">a/tmp/a.txt</span><span class=\"w\"> </span><span class=\"n\">b/tmp/b.txt</span>\n<span class=\"n\">index</span><span class=\"w\"> </span><span class=\"n\">6656e1b8..22872e0e</span><span class=\"w\"> </span><span class=\"n\">100644</span>\n<span class=\"o\">---</span><span class=\"w\"> </span><span class=\"n\">a/tmp/a.txt</span>\n<span class=\"o\">+++</span><span class=\"w\"> </span><span class=\"n\">b/tmp/b.txt</span>\n<span class=\"n\">@@</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">1</span><span class=\"o\">,</span><span class=\"n\">3</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"n\">1</span><span class=\"o\">,</span><span class=\"n\">3</span><span class=\"w\"> </span><span class=\"n\">@@</span>\n<span class=\"o\">[-</span><span class=\"n\">Argument</span><span class=\"o\">-]</span><span class=\"ow\">{</span><span class=\"o\">+</span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">nth_worlds</span><span class=\"w\"> </span><span class=\"n\">do</span><span class=\"w\"> </span><span class=\"n\">not</span><span class=\"w\"> </span><span class=\"n\">agree</span><span class=\"w\"> </span><span class=\"k\">with</span><span class=\"o\">+</span><span class=\"ow\">}</span><span class=\"w\"> </span><span class=\"n\">types</span>\n<span class=\"n n-Type\">'a</span><span class=\"w\"> </span><span class=\"n\">set</span><span class=\"w\"> </span><span class=\"n\">×</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n n-Type\">'m</span><span class=\"w\"> </span><span class=\"n\">⇒</span><span class=\"w\"> </span><span class=\"n n-Type\">'a</span><span class=\"w\"> </span><span class=\"n\">list</span><span class=\"w\"> </span><span class=\"n\">⇒</span><span class=\"w\"> </span><span class=\"n\">bool</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">×</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n n-Type\">'p</span><span class=\"w\"> </span><span class=\"n\">⇒</span><span class=\"w\"> </span><span class=\"n n-Type\">'a</span><span class=\"w\"> </span><span class=\"n\">⇒</span><span class=\"w\"> </span><span class=\"n\">bool</span><span class=\"o\">),</span><span class=\"w\"> </span><span class=\"n n-Type\">'a</span><span class=\"o\">,</span>\n<span class=\"w\">  </span><span class=\"n\">nat</span><span class=\"w\"> </span><span class=\"n\">⇒</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n n-Type\">'m</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n n-Type\">'p</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">cform</span><span class=\"w\"> </span><span class=\"n\">set</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n n-Type\">'m</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n n-Type\">'p</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">cform</span><span class=\"w\"> </span><span class=\"n\">⇒</span><span class=\"w\"> </span><span class=\"n n-Type\">'a</span><span class=\"w\"> </span><span class=\"o\">[-</span><span class=\"n\">list</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">nat</span><span class=\"o\">-]</span><span class=\"ow\">{</span><span class=\"o\">+</span><span class=\"n\">list</span><span class=\"o\">+</span><span class=\"ow\">}</span>\n</code></pre></div>\n<p>(a: typed, b: declared)</p>",
        "id": 487251819,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1733837926
    },
    {
        "content": "<p>So it is matter of last argument</p>",
        "id": 487252444,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1733838103
    },
    {
        "content": "<p>MMMhhhh, I did not know that you need to declarre all arguments:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">inductive_set</span><span class=\"w\"> </span><span class=\"n\">nth_worlds</span><span class=\"w\"> </span><span class=\"o\">::</span>\n<span class=\"w\"> </span><span class=\"s\">\"'b ⇒ 'a set\"</span>\n<span class=\"c\">(* for M :: 'b (*does not work without*) *)</span>\n<span class=\"w\">  </span><span class=\"kp\">where</span>\n<span class=\"w\">   </span><span class=\"n\">zero</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"(w::'a) ∈ (nth_worlds (M::'b) :: 'a set)\"</span>\n</code></pre></div>",
        "id": 487254377,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1733838616
    },
    {
        "content": "<p>But apparently you do need to put all the variable in a for</p>",
        "id": 487254685,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1733838704
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"233198\">Mathias Fleury</span> <a href=\"#narrow/channel/238552-Beginner-Questions/topic/What.20is.20wrong.20with.20the.20following.20inductive_set.20declaration.3F/near/487254685\">said</a>:</p>\n<blockquote>\n<p>But apparently you do need to put all the variable in a for</p>\n</blockquote>\n<p>Ha? put all variables in which sense? I did get this work:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">inductive</span><span class=\"w\"> </span><span class=\"n\">height_le</span><span class=\"w\"> </span><span class=\"o\">::</span>\n<span class=\"w\"> </span><span class=\"s\">\"'a ⇒ 'm set ⇒ ('m ⇒ 'a list ⇒ bool) ⇒ 'a ⇒ nat ⇒ bool\"</span>\n<span class=\"w\">  </span><span class=\"kp\">for</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"n n-Type\">'a</span><span class=\"w\"> </span><span class=\"kp\">and</span><span class=\"w\"> </span><span class=\"n\">Op</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"'m set\"</span><span class=\"w\"> </span><span class=\"kp\">and</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"('m ⇒ 'a list ⇒ bool)\"</span>\n<span class=\"w\">  </span><span class=\"kp\">where</span>\n<span class=\"w\">   </span><span class=\"n\">root</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"height_le r Op R r 0\"</span>\n<span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">rel</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"height_le r Op R w n ⟹ m ∈ Op ⟹ R m (w # vl) ⟹ v ∈ set vl</span>\n<span class=\"s\">        ⟹ height_le r Op R v (n+1)\"</span>\n</code></pre></div>",
        "id": 487255954,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1733839028
    },
    {
        "content": "<p>Yup, but this is <code>inductive</code>, not <code>inductive_set</code></p>",
        "id": 487256057,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1733839062
    },
    {
        "content": "<p>I see. So inductive_set is not happy with defining a indexed family. But <code>inductive</code> would be enough to give me an indexed family effectively.</p>",
        "id": 487256360,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1733839149
    },
    {
        "content": "<p>Good to know. I will just go for inductive predicate then.</p>",
        "id": 487256578,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1733839205
    },
    {
        "content": "<p>BTW nth_words seems to be a variation of a standard concept:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">inductive</span><span class=\"w\"> </span><span class=\"n\">suc_world</span><span class=\"w\"> </span><span class=\"o\">::</span>\n<span class=\"w\"> </span><span class=\"s\">\"('m,'p,'a) model ⇒</span>\n<span class=\"s\">  (nat ⇒ ('m,'p) cform set) ⇒ (('m,'p) cform ⇒ 'a list) ⇒</span>\n<span class=\"s\">  'a ⇒ 'a ⇒ bool\"</span><span class=\"w\"> </span><span class=\"kp\">where</span>\n<span class=\"c\">(* readd this, but I do not have cDIAM defined:</span>\n<span class=\"c\">cDIAM m fl ∈ f n ⟹</span>\n<span class=\"c\">  asatis M v (cDIAM m fl) ⟹</span>\n<span class=\"c\">  w ∈ set (cwl (cDIAM m fl)) ⟹ *)</span><span class=\"s\">‹suc_world M f cwl r v›</span>\n\n<span class=\"kt\">term</span><span class=\"w\"> </span><span class=\"s\">\"rtranclp^^n (suc_world  M f cwl)\"</span>\n</code></pre></div>",
        "id": 487257001,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1733839312
    },
    {
        "content": "<p>Do you mean like this?</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">inductive</span><span class=\"w\"> </span><span class=\"n\">suc_world</span><span class=\"w\"> </span><span class=\"o\">::</span>\n<span class=\"w\"> </span><span class=\"s\">\"('m,'p,'a) model ⇒</span>\n<span class=\"s\">  (nat ⇒ ('m,'p) cform set) ⇒ (('m,'p) cform ⇒ 'a list) ⇒</span>\n<span class=\"s\">  'a ⇒ 'a ⇒ bool\"</span><span class=\"w\"> </span><span class=\"kp\">where</span>\n\n<span class=\"s\">\"cDIAM m fl ∈ f n ⟹</span>\n<span class=\"s\">  asatis M v (cDIAM m fl) ⟹</span>\n<span class=\"s\">  w ∈ set (cwl (cDIAM m fl)) ⟹ suc_world M f cwl r v\"</span>\n</code></pre></div>\n<p>?</p>",
        "id": 487257856,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1733839514
    },
    {
        "content": "<p>Yes (I get some 'a itself because cDIAM and asatis are not defined in my theories)</p>",
        "id": 487258090,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1733839566
    },
    {
        "content": "<p>The set version works the same way actually:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">inductive_set</span><span class=\"w\"> </span><span class=\"n\">suc_world</span><span class=\"w\"> </span><span class=\"o\">::</span>\n<span class=\"w\"> </span><span class=\"s\">\"('m,'p,'a) model ⇒</span>\n<span class=\"s\">  (nat ⇒ ('m,'p) cform set) ⇒ (('m,'p) cform ⇒ 'a list) ⇒</span>\n<span class=\"s\">  ('a × 'a) set\"</span>\n<span class=\"w\"> </span><span class=\"kp\">for</span><span class=\"w\"> </span><span class=\"n\">M</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"('m,'p,'a) model\"</span>\n<span class=\"w\"> </span><span class=\"kp\">and</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"nat ⇒ ('m,'p) cform set\"</span>\n<span class=\"w\"> </span><span class=\"kp\">and</span><span class=\"w\"> </span><span class=\"n\">cwl</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"('m,'p) cform ⇒ 'a list\"</span><span class=\"w\">  </span><span class=\"kp\">where</span>\n<span class=\"c\">(* readd this, but I do not have cDIAM defined:</span>\n<span class=\"c\">cDIAM m fl ∈ f n ⟹</span>\n<span class=\"c\">  asatis M v (cDIAM m fl) ⟹</span>\n<span class=\"c\">  w ∈ set (cwl (cDIAM m fl)) ⟹ *)</span><span class=\"s\">‹ (r,v) ∈ suc_world M f cwl›</span>\n\n<span class=\"kt\">term</span><span class=\"w\"> </span><span class=\"s\">\"rtrancl^^n (suc_world  M f cwl)\"</span>\n</code></pre></div>",
        "id": 487258588,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1733839696
    },
    {
        "content": "<p>Seems sensible because I am defining a family indexed by n which is reachable from r in n steps.</p>",
        "id": 487258972,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1733839803
    },
    {
        "content": "<p>Thanks and I will think about the rtrancl stuff!</p>",
        "id": 487259201,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1733839862
    }
]