[
    {
        "content": "<p>In trying to understand how to do 'backwards\" proofs in Isar, I set about mimicking some things in the Isar section of ProgProve and in the Isar Reference, and that brought me to a situation that's often frustrated me before. </p>\n<p>I wanted to mimic the idea of a proof where we say \"To show (for positive n) that 2n+1 &gt; n + 1, it suffices to show that 2n &gt; n,\" and then go on to show the simpler thing. I didn't get that far, but instead started with a simpler notion: suppose I know that [[A, B]] =&gt; C and I want to prove C. In mathematical writing, I might say \"Here's a reason why A is true; with this in mind, we know that B =&gt; C, so I'd like to show B and I'll be done.\" [OK, I admit that's not great writing!]</p>\n<p>All that aside, I tried copying the example from section 1.4.5 of the Isar Reference Manual, converting from notepad to an explicit lemma, and using just the first example of how one might prove such a thing. I got to this situation:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">theory</span><span class=\"w\"> </span><span class=\"n\">backwardsTest</span>\n<span class=\"kp\">imports</span><span class=\"w\"> </span><span class=\"n\">Main</span>\n<span class=\"k\">begin</span>\n<span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">testing</span><span class=\"o\">:</span>\n<span class=\"w\">  </span><span class=\"kp\">fixes</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"n\">B</span><span class=\"w\"> </span><span class=\"n\">C</span>\n<span class=\"w\">  </span><span class=\"kp\">assumes</span><span class=\"w\"> </span><span class=\"n\">r1</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"A ⟹ B ⟹ C\"</span>\n<span class=\"w\">  </span><span class=\"kp\">assumes</span><span class=\"w\"> </span><span class=\"n\">A</span>\n<span class=\"w\">  </span><span class=\"kp\">assumes</span><span class=\"w\"> </span><span class=\"n\">B</span>\n<span class=\"w\">  </span><span class=\"kp\">shows</span><span class=\"w\"> </span><span class=\"n\">C</span>\n<span class=\"k\">proof</span><span class=\"w\"> </span><span class=\"o\">-</span>\n<span class=\"w\">  </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"n\">A</span>\n<span class=\"w\">  </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">assms</span><span class=\"o\">(</span><span class=\"n\">2</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">auto</span>\n<span class=\"w\">  </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"s\">\"C\"</span>\n<span class=\"w\">  </span><span class=\"k\">proof</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">rule</span><span class=\"w\"> </span><span class=\"n\">r1</span><span class=\"o\">)</span>\n<span class=\"w\">    </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"n\">B</span><span class=\"w\"> </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">assms</span><span class=\"o\">(</span><span class=\"n\">3</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">auto</span>\n<span class=\"w\">    </span><span class=\"kt\">try</span>\n\n<span class=\"w\">  </span><span class=\"k\">qed</span>\n<span class=\"w\"> </span><span class=\"k\">end</span>\n<span class=\"k\">end</span>\n</code></pre></div>\n<p>If I place my cursor just before the word \"try\", I am in a state where \"this\" is B and the \"goal\" is B. \"try\" tells me that the current goal \"can be solved directly\" with local.assms(3) or local.this, but doesn't suggest the actual syntax for doing so. \"try0\" gives up.  My various attempts  with different Isar fragments are probably not worth repeating here. My question is \"how do I complete the proof of \"B\" using local.this at the point where I currently have 'try'?\" </p>\n<p>I recognize that doing this might not be the thing I <em>should</em> do or <em>need</em> to do, but since it's been a repeated frustration for me, I'd appreciate knowing how to get past this particular roadblock.</p>",
        "id": 430586908,
        "sender_full_name": "John  Hughes",
        "timestamp": 1711975376
    },
    {
        "content": "<p>I believe in order to actually resolve the goal, you need to use <code>show</code> instead of <code>have</code>. The <code>try</code> can be replaced by e.g. <code>then show B by this</code>. More directly, you can also use <code>show B using assms(3) by auto</code> as the \"body\" of the inner <code>proof</code> block.</p>",
        "id": 430588164,
        "sender_full_name": "Sebastian Paarmann",
        "timestamp": 1711976022
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"652764\">Sebastian Paarmann</span> <a href=\"#narrow/stream/238552-Beginner-Questions/topic/What.20to.20do.20when.20.3Fthis.20and.20the.20goal.20are.20identical/near/430588164\">said</a>:</p>\n<blockquote>\n<p>I believe in order to actually resolve the goal, you need to use <code>show</code> instead of <code>have</code>. The <code>try</code> can be replaced by e.g. <code>then show B by this</code>. More directly, you can also use <code>show B using assms(3) by auto</code> as the \"body\" of the inner <code>proof</code> block.</p>\n</blockquote>\n<p>Thank you! very much! My slightly more compact final form is </p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"n\">heory</span><span class=\"w\"> </span><span class=\"n\">backwardsTest</span>\n<span class=\"kp\">imports</span><span class=\"w\"> </span><span class=\"n\">Main</span>\n<span class=\"k\">begin</span>\n<span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">testing</span><span class=\"o\">:</span>\n<span class=\"w\">  </span><span class=\"kp\">fixes</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"n\">B</span><span class=\"w\"> </span><span class=\"n\">C</span>\n<span class=\"w\">  </span><span class=\"kp\">assumes</span><span class=\"w\"> </span><span class=\"n\">r1</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"A ⟹ B ⟹ C\"</span>\n<span class=\"w\">  </span><span class=\"kp\">assumes</span><span class=\"w\"> </span><span class=\"n\">A</span>\n<span class=\"w\">  </span><span class=\"kp\">assumes</span><span class=\"w\"> </span><span class=\"n\">B</span>\n<span class=\"w\">  </span><span class=\"kp\">shows</span><span class=\"w\"> </span><span class=\"n\">C</span>\n<span class=\"k\">proof</span><span class=\"w\"> </span><span class=\"o\">-</span>\n<span class=\"w\">  </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"n\">A</span>\n<span class=\"w\">  </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">assms</span><span class=\"o\">(</span><span class=\"n\">2</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">auto</span>\n<span class=\"w\">  </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"s\">\"C\"</span>\n<span class=\"w\">  </span><span class=\"k\">proof</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">rule</span><span class=\"w\"> </span><span class=\"n\">r1</span><span class=\"o\">)</span>\n<span class=\"w\">    </span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"n\">B</span><span class=\"w\"> </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">assms</span><span class=\"o\">(</span><span class=\"n\">3</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">auto</span>\n<span class=\"w\">  </span><span class=\"k\">qed</span>\n<span class=\"k\">qed</span>\n<span class=\"k\">end</span>\n</code></pre></div>\n<p>which emphasizes (for me at least!) that the way to get rid of \"goals\" is to use 'show' .</p>",
        "id": 430592008,
        "sender_full_name": "John  Hughes",
        "timestamp": 1711977711
    }
]