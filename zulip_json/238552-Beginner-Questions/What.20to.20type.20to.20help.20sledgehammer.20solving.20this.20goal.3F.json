[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">datatype</span><span class=\"w\"> </span><span class=\"n\">form</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">VAR</span><span class=\"w\"> </span><span class=\"s\">\"num\"</span>\n<span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">FALSE</span>\n<span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">DISJ</span><span class=\"w\"> </span><span class=\"s\">\"form\"</span><span class=\"w\"> </span><span class=\"s\">\"form\"</span>\n<span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">NOT</span><span class=\"w\"> </span><span class=\"s\">\"form\"</span>\n<span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">DIAM</span><span class=\"w\"> </span><span class=\"s\">\"form\"</span>\n\n<span class=\"k\">record</span><span class=\"w\"> </span><span class=\"n n-Type\">'a</span><span class=\"w\"> </span><span class=\"n\">frame</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">  </span><span class=\"n\">world</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"'a ⇒ bool\"</span>\n<span class=\"w\">  </span><span class=\"n\">rel</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"'a ⇒ 'a ⇒ bool\"</span>\n\n\n<span class=\"k\">record</span><span class=\"w\"> </span><span class=\"n n-Type\">'a</span><span class=\"w\"> </span><span class=\"n\">model</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"'a frame\"</span><span class=\"w\"> </span><span class=\"o\">+</span>\n<span class=\"w\">  </span><span class=\"n\">valt</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"num ⇒ 'a ⇒ bool\"</span>\n\n<span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">satis</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"'a model ⇒ 'a ⇒ form ⇒ bool\"</span>\n<span class=\"kp\">where</span>\n<span class=\"s\">\"satis M w (VAR p) ⟷ (valt M p w ∧ world M w)\"</span>\n<span class=\"o\">|</span><span class=\"w\"> </span><span class=\"s\">\"satis M w FALSE ⟷ False\"</span>\n<span class=\"o\">|</span><span class=\"w\"> </span><span class=\"s\">\"satis M w (NOT f) ⟷ world M w ∧ ¬ satis M w f\"</span>\n<span class=\"o\">|</span><span class=\"w\"> </span><span class=\"s\">\"satis M w (DISJ f1 f2) ⟷ satis M w f1 ∨ satis M w f2\"</span>\n<span class=\"o\">|</span><span class=\"w\"> </span><span class=\"s\">\"satis M w (DIAM f) ⟷ world M w ∧ (∃ v. rel M w v ∧ world M v ∧ satis M v f)\"</span>\n\n\n<span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">satis_in_worlds</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"satis M w f ⟹ world M w\"</span>\n<span class=\"k\">proof</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">induct</span><span class=\"w\"> </span><span class=\"n\">rule</span><span class=\"o\">:</span><span class=\"n\">form.induct</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"k\">case</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">DISJ</span><span class=\"w\"> </span><span class=\"n\">x1a</span><span class=\"w\"> </span><span class=\"n\">x2</span><span class=\"o\">)</span>\n<span class=\"w\"> </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"k\">case</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">auto</span>\n<span class=\"k\">next</span>\n<span class=\"w\">  </span><span class=\"k\">case</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">DIAM</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"k\">case</span>\n<span class=\"w\">  </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">fastforce</span>\n<span class=\"k\">qed</span><span class=\"w\"> </span><span class=\"n\">simp_all</span>\n\n<span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">plts</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"form ⇒ num set\"</span><span class=\"w\"> </span><span class=\"kp\">where</span>\n<span class=\"w\">  </span><span class=\"s\">\"plts (VAR a) = {a}\"</span>\n<span class=\"o\">|</span><span class=\"w\"> </span><span class=\"s\">\"plts FALSE = {}\"</span>\n<span class=\"o\">|</span><span class=\"w\"> </span><span class=\"s\">\"plts (NOT f) = plts f\"</span>\n<span class=\"o\">|</span><span class=\"w\"> </span><span class=\"s\">\"plts (DISJ f1 f2) = union (plts f1) (plts f2) \"</span>\n<span class=\"o\">|</span><span class=\"w\"> </span><span class=\"s\">\"plts (DIAM f) = plts f\"</span>\n\n<span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">exercise_1_3_1</span><span class=\"w\"> </span><span class=\"o\">:</span>\n<span class=\"s\">\"frame.truncate M1 = frame.truncate M2 ⟹</span>\n<span class=\"s\"> (⋀p. p ∈ plts f ⟹ valt M1 p = valt M2 p) ⟹</span>\n<span class=\"s\">(satis M1 w f ≡ satis M2 w f)\"</span>\n<span class=\"k\">proof</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">induct</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"n\">rule</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">form.induct</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"k\">case</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">VAR</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"k\">case</span><span class=\"w\"> </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"gr\">sorry</span>\n<span class=\"k\">next</span>\n<span class=\"w\">  </span><span class=\"k\">case</span><span class=\"w\"> </span><span class=\"n\">FALSE</span>\n<span class=\"w\">  </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"k\">case</span><span class=\"w\"> </span><span class=\"gr\">sorry</span>\n<span class=\"k\">next</span>\n<span class=\"w\">  </span><span class=\"k\">case</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">DISJ</span><span class=\"w\"> </span><span class=\"n\">x1a</span><span class=\"w\"> </span><span class=\"n\">x2</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"k\">case</span><span class=\"w\"> </span><span class=\"gr\">sorry</span>\n<span class=\"k\">next</span>\n<span class=\"w\">  </span><span class=\"k\">case</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">NOT</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"k\">case</span><span class=\"w\"> </span><span class=\"gr\">sorry</span>\n<span class=\"k\">next</span>\n<span class=\"w\">  </span><span class=\"k\">case</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">DIAM</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"k\">case</span><span class=\"w\"> </span><span class=\"gr\">sorry</span>\n<span class=\"k\">qed</span>\n</code></pre></div>",
        "id": 470037685,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1726256068
    },
    {
        "content": "<p>On the goal</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">case</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">VAR</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"k\">case</span><span class=\"w\"> </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>sledgehammer does not solve it, but I believe it is straightforward. What can sledgehammer see? I think maybe because I do not expand some theorems relevant to the record type?</p>",
        "id": 470037912,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1726256168
    },
    {
        "content": "<p><a href=\"/user_uploads/14278/BNPzlft0SDkpTQisk0gX2HxY/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/14278/BNPzlft0SDkpTQisk0gX2HxY/image.png\" title=\"image.png\"><img data-original-dimensions=\"2160x862\" src=\"/user_uploads/thumbnail/14278/BNPzlft0SDkpTQisk0gX2HxY/image.png/840x560.webp\"></a></div>",
        "id": 470037982,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1726256208
    },
    {
        "content": "<p>It is saying: if we evaluate two modal formulas on two models with only differs on valuation of propositional letters (and the underlying set and the relation on the underlying set are both the same). Then if the two models agree on all the propositional letter in a formula f, then M1,w |= f iff M2,w |=f.</p>",
        "id": 470038165,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1726256301
    },
    {
        "content": "<p>The hard lesson to learn: Sledgehammer is not magic</p>",
        "id": 470039069,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1726256746
    },
    {
        "content": "<p>It is great, but it is not magic</p>",
        "id": 470039081,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1726256753
    },
    {
        "content": "<p>There are a lot of things it is bad at</p>",
        "id": 470039149,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1726256770
    },
    {
        "content": "<p>including records</p>",
        "id": 470039158,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1726256776
    },
    {
        "content": "<p>At some point you have to look at the theorem and wonder: how can I prove this on paper</p>",
        "id": 470039268,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1726256839
    },
    {
        "content": "<p>Then you search for useful lemmas, like:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kt\">find_theorems</span><span class=\"w\"> </span><span class=\"n\">world</span><span class=\"w\"> </span><span class=\"n\">frame.truncate</span>\n</code></pre></div>",
        "id": 470039323,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1726256871
    },
    {
        "content": "<p>Okay! Sledgehammer is already very impressive (in a positive sense, in contrast to the induction stuff).</p>",
        "id": 470039526,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1726256965
    },
    {
        "content": "<p>So:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"n\">found</span><span class=\"w\"> </span><span class=\"n\">1</span><span class=\"w\"> </span><span class=\"kn\">theorem</span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">):</span>\n<span class=\"w\">  </span><span class=\"n\">test.frame.defs</span><span class=\"o\">(</span><span class=\"n\">4</span><span class=\"o\">):</span><span class=\"w\"> </span><span class=\"n\">frame.truncate</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">r</span><span class=\"w\"> </span><span class=\"n\">≡</span><span class=\"w\"> </span><span class=\"n\">⦇world</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">world</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">r</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">rel</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">rel</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">r⦈</span>\n</code></pre></div>\n<p>is what I can only get.</p>",
        "id": 470039571,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1726256989
    },
    {
        "content": "<p>… yeah and now you have to use it ;-)</p>",
        "id": 470039676,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1726257027
    },
    {
        "content": "<p>I do not want to spoil it, I think learning it is part of the experience</p>",
        "id": 470039741,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1726257067
    },
    {
        "content": "<p>Let me try it tomorrow! Thanks for teaching this command:<br>\n<code>find_theorems world frame.truncate</code><br>\nmultiple patterns, very helpful.</p>",
        "id": 470039779,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1726257089
    },
    {
        "content": "<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>if you really do not manage, but please try to</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<p>case (VAR x)<br>\n  then show ?case by (auto simp: frame.defs(4))</p>\n</div></div>",
        "id": 470039789,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1726257096
    },
    {
        "content": "<p>Thanks! I swear I will not click it before trying it enough by myself!</p>",
        "id": 470039885,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1726257143
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"233198\">Mathias Fleury</span> <a href=\"#narrow/stream/238552-Beginner-Questions/topic/What.20to.20type.20to.20help.20sledgehammer.20solving.20this.20goal.3F/near/470039789\">said</a>:</p>\n<blockquote>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>if you really do not manage, but please try to</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<p>case (VAR x)<br>\n  then show ?case by (auto simp: frame.defs(4))</p>\n<p></div></div><br>\n</p>\n</blockquote>\n<p>I solved it, but mine is a bit different. I searched the application of unfolding:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"w\"> </span><span class=\"k\">case</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">VAR</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"k\">case</span><span class=\"w\"> </span><span class=\"k\">unfolding</span><span class=\"w\"> </span><span class=\"n\">test.frame.defs</span><span class=\"o\">(</span><span class=\"n\">4</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">simp</span>\n</code></pre></div>",
        "id": 470111206,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1726294751
    },
    {
        "content": "<p>The meaning is a bit different. You unfold then simplify, I simplify and allow to unfold, but the effect is the same: the goal is solved!</p>",
        "id": 470111483,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1726294840
    },
    {
        "content": "<p>I am not very consistent with it, but usually I try to write it as: <code>unfolding important_stuff_from_my_development by (simp add: boring_background_stuff)</code></p>",
        "id": 470111541,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1726294902
    },
    {
        "content": "<p>I see. I appreciate the style of remarking on significant things.</p>",
        "id": 470111631,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1726294964
    }
]