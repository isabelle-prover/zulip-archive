[
    {
        "content": "<p>As an abridged version:<br>\nMy original goal looks like (A /\\ B ==&gt; C). Such a subgoal is generated by a proof method application. I want to refer to \"A\" and \"B\" separately, so I typed:<br>\nassume \"A /\\ B\" show \"C\" proof (elim conjI)</p>\n<p>The goal turns to \"A ==&gt;B ==&gt; C\", as I expected.<br>\nHowever, I then typed \"from B obtain ...\"<br>\nIsabelle complains and gives me: \"Failed to retrieve literal fact: B\"</p>\n<p>Why is that?</p>\n<p>Concrete version of the problem:</p>\n<p>My goal originally looks like this:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"n\">goal</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">1</span><span class=\"w\"> </span><span class=\"n\">subgoal</span><span class=\"o\">):</span>\n<span class=\"w\"> </span><span class=\"n\">1.</span><span class=\"w\"> </span><span class=\"n\">w</span><span class=\"w\"> </span><span class=\"n\">∈</span><span class=\"w\"> </span><span class=\"n\">elts</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">world</span><span class=\"w\"> </span><span class=\"n\">M</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">∧</span>\n<span class=\"w\">    </span><span class=\"o\">(</span><span class=\"n\">∃vl.</span><span class=\"w\"> </span><span class=\"n\">rel</span><span class=\"w\"> </span><span class=\"n\">M</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">w</span><span class=\"w\"> </span><span class=\"n\">#</span><span class=\"w\"> </span><span class=\"n\">vl</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">∧</span>\n<span class=\"w\">          </span><span class=\"n\">Truel</span>\n<span class=\"w\">           </span><span class=\"o\">(</span><span class=\"n\">map</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">λf</span><span class=\"w\"> </span><span class=\"n\">v.</span><span class=\"w\"> </span><span class=\"n\">adSts</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Gframe.truncate</span><span class=\"w\"> </span><span class=\"n\">M</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">valt</span><span class=\"w\"> </span><span class=\"n\">M</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"o\">)</span>\n<span class=\"w\">             </span><span class=\"n\">fl</span><span class=\"o\">)</span>\n<span class=\"w\">           </span><span class=\"n\">vl</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">⟹</span>\n<span class=\"w\">    </span><span class=\"n\">∃vl.</span><span class=\"w\"> </span><span class=\"n\">rel</span><span class=\"w\"> </span><span class=\"n\">Mf</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">sEqc</span><span class=\"w\"> </span><span class=\"n\">M</span><span class=\"w\"> </span><span class=\"n\">Σ</span><span class=\"w\"> </span><span class=\"n\">w</span><span class=\"w\"> </span><span class=\"n\">#</span><span class=\"w\"> </span><span class=\"n\">vl</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">∧</span>\n<span class=\"w\">         </span><span class=\"n\">Truel</span>\n<span class=\"w\">          </span><span class=\"o\">(</span><span class=\"n\">map</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">λf</span><span class=\"w\"> </span><span class=\"n\">v.</span><span class=\"w\"> </span><span class=\"n\">adSts</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Gframe.truncate</span><span class=\"w\"> </span><span class=\"n\">Mf</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">valt</span><span class=\"w\"> </span><span class=\"n\">Mf</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">v</span>\n<span class=\"w\">                       </span><span class=\"n\">f</span><span class=\"o\">)</span>\n<span class=\"w\">            </span><span class=\"n\">fl</span><span class=\"o\">)</span>\n<span class=\"w\">          </span><span class=\"n\">vl</span>\n</code></pre></div>\n<p>I typed:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">assume</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"w ∈ elts (world M) ∧</span>\n<span class=\"s\">    (∃vl. rel M m (w # vl) ∧</span>\n<span class=\"s\">          Truel</span>\n<span class=\"s\">           (map (λf v. adSts (Gframe.truncate M) (valt M) v f)</span>\n<span class=\"s\">             fl)</span>\n<span class=\"s\">           vl)\"</span>\n<span class=\"w\">      </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"s\">\"∃vl. rel Mf m (sEqc M Σ w # vl) ∧</span>\n<span class=\"s\">         Truel</span>\n<span class=\"s\">          (map (λf v. adSts (Gframe.truncate Mf) (valt Mf) v</span>\n<span class=\"s\">                       f)</span>\n<span class=\"s\">            fl)</span>\n<span class=\"s\">          vl\"</span>\n<span class=\"w\">      </span><span class=\"k\">proof</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">elim</span><span class=\"w\"> </span><span class=\"n\">conjE</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>to turn it into:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"n\">w</span><span class=\"w\"> </span><span class=\"n\">∈</span><span class=\"w\"> </span><span class=\"n\">elts</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">world</span><span class=\"w\"> </span><span class=\"n\">M</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">⟹</span>\n<span class=\"w\">    </span><span class=\"n\">∃vl.</span><span class=\"w\"> </span><span class=\"n\">rel</span><span class=\"w\"> </span><span class=\"n\">M</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">w</span><span class=\"w\"> </span><span class=\"n\">#</span><span class=\"w\"> </span><span class=\"n\">vl</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">∧</span>\n<span class=\"w\">         </span><span class=\"n\">Truel</span>\n<span class=\"w\">          </span><span class=\"o\">(</span><span class=\"n\">map</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">λf</span><span class=\"w\"> </span><span class=\"n\">v.</span><span class=\"w\"> </span><span class=\"n\">adSts</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Gframe.truncate</span><span class=\"w\"> </span><span class=\"n\">M</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">valt</span><span class=\"w\"> </span><span class=\"n\">M</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"o\">)</span>\n<span class=\"w\">            </span><span class=\"n\">fl</span><span class=\"o\">)</span>\n<span class=\"w\">          </span><span class=\"n\">vl</span><span class=\"w\"> </span><span class=\"n\">⟹</span>\n<span class=\"w\">    </span><span class=\"n\">∃vl.</span><span class=\"w\"> </span><span class=\"n\">rel</span><span class=\"w\"> </span><span class=\"n\">Mf</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">sEqc</span><span class=\"w\"> </span><span class=\"n\">M</span><span class=\"w\"> </span><span class=\"n\">Σ</span><span class=\"w\"> </span><span class=\"n\">w</span><span class=\"w\"> </span><span class=\"n\">#</span><span class=\"w\"> </span><span class=\"n\">vl</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">∧</span>\n<span class=\"w\">         </span><span class=\"n\">Truel</span>\n<span class=\"w\">          </span><span class=\"o\">(</span><span class=\"n\">map</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">λf</span><span class=\"w\"> </span><span class=\"n\">v.</span><span class=\"w\"> </span><span class=\"n\">adSts</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Gframe.truncate</span><span class=\"w\"> </span><span class=\"n\">Mf</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">valt</span><span class=\"w\"> </span><span class=\"n\">Mf</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">v</span>\n<span class=\"w\">                       </span><span class=\"n\">f</span><span class=\"o\">)</span>\n<span class=\"w\">            </span><span class=\"n\">fl</span><span class=\"o\">)</span>\n<span class=\"w\">          </span><span class=\"n\">vl</span>\n</code></pre></div>\n<p>I hope I can then refer to \"w ∈ elts (world M) \" and \"∃vl. rel M m (w # vl) ∧<br>\n         Truel<br>\n          (map (λf v. adSts (Gframe.truncate M) (valt M) v f)<br>\n            fl)<br>\n          vl \" separately.<br>\nHowever, after the \"proof (elim conjE)\", when I type:</p>\n<p>from ‹ (∃vl. rel M m (w # vl) ∧<br>\n          Truel<br>\n           (map (λf v. adSts (Gframe.truncate M) (valt M) v f)<br>\n             fl)<br>\n           vl)› </p>\n<p>obtain vl <br>\n         where \"rel M m (w # vl) ∧<br>\n         Truel<br>\n          (map (λf v. adSts (Gframe.truncate M) (valt M) v f)<br>\n            fl)<br>\n          vl\"</p>\n<p>it complains:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"n\">Failed</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">retrieve</span><span class=\"w\"> </span><span class=\"n\">literal</span><span class=\"w\"> </span><span class=\"n\">fact⌂</span><span class=\"o\">:</span>\n<span class=\"n\">∃vl.</span><span class=\"w\"> </span><span class=\"n\">rel</span><span class=\"w\"> </span><span class=\"n\">M</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">w</span><span class=\"w\"> </span><span class=\"n\">#</span><span class=\"w\"> </span><span class=\"n\">vl</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">∧</span>\n<span class=\"w\">     </span><span class=\"n\">Truel</span>\n<span class=\"w\">      </span><span class=\"o\">(</span><span class=\"n\">map</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">λf</span><span class=\"w\"> </span><span class=\"n\">v.</span><span class=\"w\"> </span><span class=\"n\">adSts</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Gframe.truncate</span><span class=\"w\"> </span><span class=\"n\">M</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">valt</span><span class=\"w\"> </span><span class=\"n\">M</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">fl</span><span class=\"o\">)</span>\n<span class=\"w\">      </span><span class=\"n\">vl</span>\n</code></pre></div>",
        "id": 473409715,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1727583366
    },
    {
        "content": "<p>How can I split and refer to the long conjunct separately?</p>",
        "id": 473409729,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1727583399
    },
    {
        "content": "<p>You need to assume it</p>",
        "id": 473419080,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1727591969
    },
    {
        "content": "<p>When you type <code>B</code> it is looking at a fact in the Isar proof. This is the entire point of Isar: the proof text is sufficient</p>",
        "id": 473419153,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1727592020
    },
    {
        "content": "<p>and only <code>show</code> and <code>qed</code> look at the concrete proof goal</p>",
        "id": 473419176,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1727592043
    },
    {
        "content": "<p>I see, thanks! I forgot (again) that assume is for and only for the things that are generated during the proof.</p>",
        "id": 473421597,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1727594162
    },
    {
        "content": "<p>BTW you can also decompose the assumptions directly with</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">assume</span><span class=\"w\"> </span><span class=\"s\">\"A /\\ B\"</span>\n<span class=\"k\">then</span><span class=\"w\"> </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"kp\">and</span><span class=\"w\"> </span><span class=\"n\">B</span>\n<span class=\"w\">  </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">fast</span><span class=\"o\">+</span>\n</code></pre></div>",
        "id": 473422466,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1727594918
    },
    {
        "content": "<p>avoiding a nesting of <code>proof</code> (and hence indentation and so on)</p>",
        "id": 473422503,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1727594965
    },
    {
        "content": "<p>Or the version with term naming to avoid repeating terms:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">assume</span><span class=\"w\"> </span><span class=\"s\">\"A /\\ B\"</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"kp\">is</span><span class=\"w\"> </span><span class=\"s\">\"?w_in_word /\\ ?succs\"</span><span class=\"o\">)</span>\n<span class=\"k\">then</span><span class=\"w\"> </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">w_in_word</span><span class=\"w\"> </span><span class=\"kp\">and</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">succs</span>\n<span class=\"w\">  </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">fast</span><span class=\"o\">+</span>\n</code></pre></div>\n<p>As usual in naming during programming: ?A is a cool name for examples, but not a good one for proof maintainability.</p>",
        "id": 473422668,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1727595091
    },
    {
        "content": "<p>Sorry, what does the name with \"?\" break for sack of maintainability?</p>",
        "id": 473422899,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1727595255
    },
    {
        "content": "<p>I do not manage to come up with a good example, but if you use <code>?A</code> and by accident it starts referring to another term, it is much harder to remember what it should point to</p>",
        "id": 473423483,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1727595797
    },
    {
        "content": "<p>In your example  you have two assumptions:<code>w ∈ elts (world M)</code> and<br>\n<code>    ∃vl. rel M m (w # vl) ∧\n         Truel\n          (map (λf v. adSts (Gframe.truncate M) (valt M) v f)\n            fl)\n          vl </code>. Which one is more naturally an <code>?A</code> and which one a <code>?B</code>?</p>",
        "id": 473423859,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1727596138
    },
    {
        "content": "<p>I think I will just call the first conjunct ?A and the second conjunct ?B, so in my case ?A is <code>w ∈ elts (world M)</code> and <code>∃vl. rel M m (w # vl) ∧ Truel (map (λf v. adSts (Gframe.truncate M) (valt M) v f) fl) vl</code> is ?B.</p>",
        "id": 473424317,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1727596400
    },
    {
        "content": "<p>I think one possible thing to do is not to use sth like \"A\" but a longer thing to keep all of them distinguished. Say, call the first one <code>?w_wd</code> and the second one <code>?exvl</code>.</p>",
        "id": 473424589,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1727596527
    }
]