[
    {
        "content": "<p>When I try to unfold a definition from inside a locale, Isabelle doesn't throw any errors but it also doesn't actually unfold the definition. What is happening here?</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">locale</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">  </span><span class=\"kp\">fixes</span>\n<span class=\"w\">    </span><span class=\"n\">foo</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"n n-Type\">'a</span><span class=\"w\"> </span><span class=\"kp\">and</span>\n<span class=\"w\">    </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"'a </span><span class=\"ss\">\\&lt;Rightarrow&gt;</span><span class=\"s\"> 'a\"</span>\n<span class=\"w\">  </span><span class=\"kp\">assumes</span>\n<span class=\"w\">    </span><span class=\"n\">foo_fixed</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"f foo = foo\"</span>\n\n<span class=\"k\">definition</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"kp\">in</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"n\">f5</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"'a </span><span class=\"ss\">\\&lt;Rightarrow&gt;</span><span class=\"s\"> 'a\"</span>\n<span class=\"w\">  </span><span class=\"kp\">where</span><span class=\"w\"> </span><span class=\"s\">\"f5 x </span><span class=\"ss\">\\&lt;equiv&gt;</span><span class=\"s\"> f (f (f (f (f x))))\"</span>\n\n<span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"s\">\"0 = 1\"</span>\n<span class=\"k\">proof</span><span class=\"w\"> </span><span class=\"o\">-</span>\n<span class=\"w\">  </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"s\">\"foo.f5 = foo.f5 </span><span class=\"ss\">\\&lt;circ&gt;</span><span class=\"s\"> foo.f5\"</span>\n<span class=\"w\">    </span><span class=\"k\">unfolding</span><span class=\"w\"> </span><span class=\"n\">foo.f5_def</span>\n</code></pre></div>\n<p>At this point the proof state is still this:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">proof</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">prove</span><span class=\"o\">)</span>\n<span class=\"n\">goal</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">1</span><span class=\"w\"> </span><span class=\"n\">subgoal</span><span class=\"o\">):</span>\n<span class=\"w\"> </span><span class=\"n\">1.</span><span class=\"w\"> </span><span class=\"n\">foo.f5</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">foo.f5</span><span class=\"w\"> </span><span class=\"n\">∘</span><span class=\"w\"> </span><span class=\"n\">foo.f5</span>\n</code></pre></div>",
        "id": 430844386,
        "sender_full_name": "James Hanson",
        "timestamp": 1712080579
    },
    {
        "content": "<p><code>unfolding</code> will not throw an error even if Isabelle cannot progress. By examining the definition of <code>f5</code> with</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kt\">thm</span><span class=\"w\"> </span><span class=\"n\">foo.f5_def</span>\n</code></pre></div>\n<p>we know <code>foo.f5_def</code> is <code>foo ?foo ?f ⟹ foo.f5 ?f ?x ≡ ?f (?f (?f (?f (?f ?x))))</code>, which is a conditional rewrite. Normally, the <code>unfolding</code> keyword requires us to eliminate the conditions first. However, a more serious problem here is that even a manual rewrite will fail:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">subst</span><span class=\"w\"> </span><span class=\"n\">foo.f5_def</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>This means that <code>foo.f5 ?f ?x</code> (the left hand side of <code>foo.f5_def</code>) cannot be unified with any sub-expression of the target proposition <code>foo.f5 = foo.f5 \\&lt;circ&gt; foo.f5</code>. </p>\n<p>To summarise, the problem here is less about locale (which may introduce extra assumptions like <code>foo ?foo ?f</code> that makes a certain definition unsuitable for <code>unfolding</code>); instead, it is that the target proposition (<code>foo.f5 = foo.f5 \\&lt;circ&gt; foo.f5</code>) cannot be rewritten with <code>foo.f5_def</code>.</p>",
        "id": 430852203,
        "sender_full_name": "Wenda Li",
        "timestamp": 1712083447
    },
    {
        "content": "<p>Thank you. I hadn't appreciated the fact that definitions inside locales were conditional on the locale predicate.</p>",
        "id": 431386432,
        "sender_full_name": "James Hanson",
        "timestamp": 1712258436
    },
    {
        "content": "<p>BTW, this is the reason why you often see one locale name <code>XX_opts</code> (no assumptions) and the real one called <code>XX</code>(with assumptions). So definition are put in the <code>XX_opts</code> to make unfolding easy.</p>",
        "id": 431391356,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1712260491
    }
]