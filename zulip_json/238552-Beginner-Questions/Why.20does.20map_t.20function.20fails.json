[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">datatype</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">atoms</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n n-Type\">'a</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">rexp</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">  </span><span class=\"n\">is_Zero</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Zero</span><span class=\"w\"> </span><span class=\"o\">|</span>\n<span class=\"w\">  </span><span class=\"n\">is_One</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">One</span><span class=\"w\"> </span><span class=\"o\">|</span>\n<span class=\"w\">  </span><span class=\"n\">Symbol</span><span class=\"w\"> </span><span class=\"s\">\"'a ⇒ bool\"</span><span class=\"w\"> </span><span class=\"o\">|</span>\n<span class=\"w\">  </span><span class=\"n\">Plus</span><span class=\"w\"> </span><span class=\"s\">\"('a rexp)\"</span><span class=\"w\"> </span><span class=\"s\">\"('a rexp)\"</span><span class=\"w\"> </span><span class=\"o\">|</span>\n<span class=\"w\">  </span><span class=\"n\">Times</span><span class=\"w\"> </span><span class=\"s\">\"('a rexp)\"</span><span class=\"w\"> </span><span class=\"s\">\"('a rexp)\"</span><span class=\"w\"> </span><span class=\"o\">|</span>\n<span class=\"w\">  </span><span class=\"n\">Star</span><span class=\"w\"> </span><span class=\"s\">\"('a rexp)\"</span>\n</code></pre></div>\n<p>I have defined regular expression type, but I found the function of <code>map_rexp</code>, <code>rexp.map_comp</code>are both failed.</p>\n<p>Why does this happen, how to fix it.</p>",
        "id": 378468928,
        "sender_full_name": "Hongjian Jiang",
        "timestamp": 1690290489
    },
    {
        "content": "<p>And I am sure that you tried your example, reduced it (by removing branches) until map was generated. So you realized that the problem is <code>Symbol \"'a ⇒ bool\"</code>.</p>",
        "id": 378471956,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1690291081
    },
    {
        "content": "<p>So what was the question?</p>",
        "id": 378472107,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1690291098
    },
    {
        "content": "<p>My initial idea is the Symbol means a predicate, take any input, then return a boolean value.</p>",
        "id": 378473069,
        "sender_full_name": "Hongjian Jiang",
        "timestamp": 1690291277
    },
    {
        "content": "<p>Is that such definition not work in the datatype context</p>",
        "id": 378473253,
        "sender_full_name": "Hongjian Jiang",
        "timestamp": 1690291309
    },
    {
        "content": "<p>how would you define it?</p>",
        "id": 378473558,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1690291359
    },
    {
        "content": "<p>Your map has type <code>('a ⇒ 'b) ⇒ 'a rexp ⇒ 'b rexp</code></p>",
        "id": 378473713,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1690291384
    },
    {
        "content": "<p>how would you convert a function <code>'a ⇒  bool</code>?</p>",
        "id": 378473870,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1690291406
    },
    {
        "content": "<p>This is a real question, I have absolutely no clue</p>",
        "id": 378473959,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1690291419
    },
    {
        "content": "<p>if the type was <code>('a ⇒ 'a) ⇒ 'a rexp ⇒ 'a rexp</code> then I can image function composition in Symbol, but not here</p>",
        "id": 378474207,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1690291458
    },
    {
        "content": "<p>I have seen an example <code>datatype ('a, 'b) ite = ITE \"'a ⇒ bool\" \"'a ⇒ 'b\" \"'a ⇒ 'b\"</code> here</p>",
        "id": 378475147,
        "sender_full_name": "Hongjian Jiang",
        "timestamp": 1690291603
    },
    {
        "content": "<p>it takes a predicate in the condition</p>",
        "id": 378475256,
        "sender_full_name": "Hongjian Jiang",
        "timestamp": 1690291621
    },
    {
        "content": "<p>Sorry for unfamilr with the type function</p>",
        "id": 378475399,
        "sender_full_name": "Hongjian Jiang",
        "timestamp": 1690291648
    },
    {
        "content": "<p>maybe this would work, if you have any suggestion.</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">datatype</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">atoms</span><span class=\"o\">:</span><span class=\"n n-Type\">'a</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n n-Type\">'b</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">rexp</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">  </span><span class=\"n\">is_Zero</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Zero</span><span class=\"w\"> </span><span class=\"o\">|</span>\n<span class=\"w\">  </span><span class=\"n\">is_One</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">One</span><span class=\"w\"> </span><span class=\"o\">|</span>\n<span class=\"w\">  </span><span class=\"n\">Symbol</span><span class=\"w\"> </span><span class=\"s\">\"'a ⇒ bool\"</span><span class=\"w\"> </span><span class=\"o\">|</span>\n<span class=\"w\">  </span><span class=\"n\">Plus</span><span class=\"w\"> </span><span class=\"s\">\"('a, 'b) rexp\"</span><span class=\"w\"> </span><span class=\"s\">\"('a, 'b) rexp\"</span><span class=\"w\"> </span><span class=\"o\">|</span>\n<span class=\"w\">  </span><span class=\"n\">Times</span><span class=\"w\"> </span><span class=\"s\">\"('a, 'b) rexp\"\"('a, 'b) rexp\"</span><span class=\"w\"> </span><span class=\"o\">|</span>\n<span class=\"w\">  </span><span class=\"n\">Star</span><span class=\"w\"> </span><span class=\"s\">\"('a, 'b) rexp\"</span>\n</code></pre></div>",
        "id": 378476648,
        "sender_full_name": "Hongjian Jiang",
        "timestamp": 1690291843
    },
    {
        "content": "<p>Then you should report this to the mailing list…</p>",
        "id": 378477788,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1690292057
    },
    {
        "content": "<p>maybe <span class=\"user-mention\" data-user-id=\"402444\">@Martin Desharnais</span> or <span class=\"user-mention\" data-user-id=\"361271\">@Dmitriy Traytel</span>   know why adding a second type parameter makes the map function work suddenly</p>",
        "id": 378478039,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1690292114
    },
    {
        "content": "<p>I do not think it is possible to generate such a map function. As Mathias said: How would such a function look.</p>\n<p>Note that the map function for your <code>ITE</code> example only maps over the return types of the functions (the <code>'b</code>s). There is no mapping over the <code>'a</code>s happening there</p>",
        "id": 378545892,
        "sender_full_name": "Simon Roßkopf",
        "timestamp": 1690304122
    },
    {
        "content": "<p>that what I though too, but for the second version with the 'b it works…</p>",
        "id": 378554559,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1690305962
    },
    {
        "content": "<p>(but I did not check how the definition looks like)</p>",
        "id": 378554744,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1690305999
    },
    {
        "content": "<p>It does generate a map function, but only one mapping over the second type argument.</p>\n<p><code>\"map_rexp\"  :: \"('a ⇒ 'b) ⇒ ('c, 'a) rexp ⇒ ('c, 'b) rexp</code></p>",
        "id": 378559200,
        "sender_full_name": "Simon Roßkopf",
        "timestamp": 1690307018
    }
]