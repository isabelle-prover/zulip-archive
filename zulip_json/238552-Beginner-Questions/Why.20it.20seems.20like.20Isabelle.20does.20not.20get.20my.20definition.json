[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">datatype</span><span class=\"w\"> </span><span class=\"n\">form</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">VAR</span><span class=\"w\"> </span><span class=\"s\">\"num\"</span>\n<span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">FALSE</span>\n<span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">DISJ</span><span class=\"w\"> </span><span class=\"s\">\"form\"</span><span class=\"w\"> </span><span class=\"s\">\"form\"</span>\n<span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">NOT</span><span class=\"w\"> </span><span class=\"s\">\"form\"</span>\n<span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">DIAM</span><span class=\"w\"> </span><span class=\"s\">\"form\"</span>\n\n\n<span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">demodalize</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"form ⇒ form\"</span>\n<span class=\"w\">  </span><span class=\"kp\">where</span>\n<span class=\"w\">    </span><span class=\"s\">\"demodalize FALSE = FALSE\"</span>\n<span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"s\">\"demodalize (VAR p) = VAR p\"</span>\n<span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"s\">\"demodalize (DISJ form1 form2) = DISJ (demodalize form1) (demodalize form2)\"</span>\n<span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"s\">\"demodalize (NOT form) = NOT (demodalize form)\"</span>\n<span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"s\">\"demodalize (DIAM form) = demodalize form\"</span>\n\n\n<span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">propform</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"form ⇒ bool\"</span>\n<span class=\"w\">  </span><span class=\"kp\">where</span>\n<span class=\"w\">   </span><span class=\"s\">\"propform FALSE = True\"</span>\n<span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"s\">\"propform (VAR p) = True\"</span>\n<span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"s\">\"propform (DISJ f1 f2) = (propform f1 ∧ propform f2)\"</span>\n<span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"s\">\"propform (NOT f) = propform f\"</span>\n<span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"s\">\"propform (DIAM f) = False\"</span>\n</code></pre></div>",
        "id": 470007893,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1726244347
    },
    {
        "content": "<p>Problem is:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">propform_demodalize</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"propform (demodalize f)\"</span>\n<span class=\"k\">proof</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">induct</span><span class=\"w\"> </span><span class=\"n\">rule</span><span class=\"o\">:</span><span class=\"n\">form.induct</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"k\">case</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">VAR</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"k\">case</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">simp</span>\n<span class=\"k\">next</span>\n<span class=\"w\">  </span><span class=\"k\">case</span><span class=\"w\"> </span><span class=\"n\">FALSE</span>\n<span class=\"w\">  </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"k\">case</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">simp</span>\n<span class=\"k\">next</span>\n<span class=\"w\">  </span><span class=\"k\">case</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">DISJ</span><span class=\"w\"> </span><span class=\"n\">x1a</span><span class=\"w\"> </span><span class=\"n\">x2</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"k\">case</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">simp</span>\n<span class=\"k\">next</span>\n<span class=\"w\">  </span><span class=\"k\">case</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">NOT</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"k\">case</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">simp</span>\n<span class=\"k\">next</span>\n<span class=\"w\">  </span><span class=\"k\">case</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">DIAM</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"k\">case</span><span class=\"w\"> </span><span class=\"gr\">sorry</span>\n<span class=\"k\">qed</span>\n</code></pre></div>",
        "id": 470007925,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1726244356
    },
    {
        "content": "<p>\"propform\" says a modal formula is a propositional formula. \"demodalize\" discards all modal operators \"DIAM\" of a formula.</p>",
        "id": 470008220,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1726244442
    },
    {
        "content": "<p>It seems like it does not understand the definition of demodalize because it thinks I should prove:<br>\n<a href=\"/user_uploads/14278/mPU1zl2udzvqF2ZYfvo9cpFf/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/14278/mPU1zl2udzvqF2ZYfvo9cpFf/image.png\" title=\"image.png\"><img data-original-dimensions=\"2134x1276\" src=\"/user_uploads/thumbnail/14278/mPU1zl2udzvqF2ZYfvo9cpFf/image.png/840x560.webp\"></a></div>",
        "id": 470008406,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1726244499
    },
    {
        "content": "<p>It seems to completely ignore the \"demodalize\", and asks to prove every formula is propositional. Here is the goal list generated:<br>\n<a href=\"/user_uploads/14278/L6rcLj6oN1A-Ufg2SawbP_AR/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/14278/L6rcLj6oN1A-Ufg2SawbP_AR/image.png\" title=\"image.png\"><img data-original-dimensions=\"2134x906\" src=\"/user_uploads/thumbnail/14278/L6rcLj6oN1A-Ufg2SawbP_AR/image.png/840x560.webp\"></a></div>",
        "id": 470009152,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1726244739
    },
    {
        "content": "<p>It should not happen and may be my stupid, but I do not see now.</p>",
        "id": 470009201,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1726244756
    },
    {
        "content": "<p>Specify the variable you are doing induction on instead of letting Isabelle guessing it (which sometimes like here goes wrong)…</p>",
        "id": 470012001,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1726245741
    },
    {
        "content": "<p><del>Actually <code>(induction rule: demodalize.induct)</code> is probably the most natural induction principle and then the guess is correct…</del> ah no</p>",
        "id": 470012143,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1726245805
    },
    {
        "content": "<p>But here is only one variable? What does it guess?</p>",
        "id": 470012316,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1726245857
    },
    {
        "content": "<p><a href=\"/user_uploads/14278/0tEIdzJ-S-4evGXO3vPnV5_Z/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/14278/0tEIdzJ-S-4evGXO3vPnV5_Z/image.png\" title=\"image.png\"><img data-original-dimensions=\"1630x1114\" src=\"/user_uploads/thumbnail/14278/0tEIdzJ-S-4evGXO3vPnV5_Z/image.png/840x560.webp\"></a></div>",
        "id": 470012426,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1726245900
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"233198\">Mathias Fleury</span> <a href=\"#narrow/stream/238552-Beginner-Questions/topic/Why.20it.20seems.20like.20Isabelle.20does.20not.20get.20my.20definition/near/470012143\">said</a>:</p>\n<blockquote>\n<p><del>Actually <code>(induction rule: demodalize.induct)</code> is probably the most natural induction principle and then the guess is correct…</del> ah no</p>\n</blockquote>\n<p>Why no ... Let me try.</p>",
        "id": 470012520,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1726245932
    },
    {
        "content": "<p>it still picks the wrong thing</p>",
        "id": 470012567,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1726245955
    },
    {
        "content": "<p>If I write \"(induct f rule:form.induct)\" instead, it does work!</p>",
        "id": 470012688,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1726245993
    },
    {
        "content": "<p>I am just curious why it can even make a wrong guess.</p>",
        "id": 470012734,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1726246009
    },
    {
        "content": "<p>Small list of stupid thinks to induce on:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">induction</span><span class=\"w\"> </span><span class=\"s\">\"demodalize f\"</span><span class=\"o\">)</span>\n<span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">induction</span><span class=\"w\"> </span><span class=\"s\">\"propform f\"</span><span class=\"o\">)</span>\n<span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">induction</span><span class=\"w\"> </span><span class=\"s\">\"propform (demodalize f)\"</span><span class=\"o\">)</span>\n<span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">induction</span><span class=\"w\"> </span><span class=\"s\">\"demodalize (demodalize f)\"</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 470012749,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1726246014
    },
    {
        "content": "<p>all of these inductions are possible</p>",
        "id": 470012780,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1726246024
    },
    {
        "content": "<p>and the induction has some heuristics to pick the right one</p>",
        "id": 470012806,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1726246036
    },
    {
        "content": "<p>Ah? I told it to use rule: form.induct.</p>",
        "id": 470012824,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1726246042
    },
    {
        "content": "<p>Yeah and? form.induct works on everything of type form</p>",
        "id": 470012894,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1726246075
    },
    {
        "content": "<p><a href=\"/user_uploads/14278/hIcCr_6Q4h3tRddxHlPflzRI/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/14278/hIcCr_6Q4h3tRddxHlPflzRI/image.png\" title=\"image.png\"><img data-original-dimensions=\"1630x574\" src=\"/user_uploads/thumbnail/14278/hIcCr_6Q4h3tRddxHlPflzRI/image.png/840x560.webp\"></a></div>",
        "id": 470012898,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1726246076
    },
    {
        "content": "<p>So Isabelle is not doing unification with the theorem in the screenshot?!</p>",
        "id": 470013004,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1726246112
    },
    {
        "content": "<p>sure it does</p>",
        "id": 470013049,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1726246134
    },
    {
        "content": "<p>but there are many possible P</p>",
        "id": 470013067,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1726246142
    },
    {
        "content": "<p>P is the whole goal, right? I am proving by induction on <code>propform (demodalize f)</code>.</p>",
        "id": 470013158,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1726246191
    },
    {
        "content": "<p>Take <code>P = %_. propform (demodalize f)</code></p>",
        "id": 470013236,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1726246204
    },
    {
        "content": "<p>then you are doing induction on a variable that is not in the goal</p>",
        "id": 470013267,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1726246218
    },
    {
        "content": "<p>Oh it then thinks the f is a fixed free variable... And want to unify with \"!x. propform (demodalize f)\"?</p>",
        "id": 470013383,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1726246260
    },
    {
        "content": "<p>That is exactly why you can specify the variable with <code>(induction f rule: form.induct)</code>. Avoid confusing</p>",
        "id": 470013471,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1726246298
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"233198\">Mathias Fleury</span> <a href=\"#narrow/stream/238552-Beginner-Questions/topic/Why.20it.20seems.20like.20Isabelle.20does.20not.20get.20my.20definition/near/470013267\">said</a>:</p>\n<blockquote>\n<p>then you are doing induction on a variable that is not in the goal</p>\n</blockquote>\n<p>That's awful... I wonder if there exists a case of \"inducting on a variable that is not in the goal\" to be useful.</p>",
        "id": 470013596,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1726246335
    },
    {
        "content": "<p>Never which is why induction did not pick that ;-)</p>",
        "id": 470013638,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1726246352
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"233198\">Mathias Fleury</span> <a href=\"#narrow/stream/238552-Beginner-Questions/topic/Why.20it.20seems.20like.20Isabelle.20does.20not.20get.20my.20definition/near/470013471\">said</a>:</p>\n<blockquote>\n<p>That is exactly why you can specify the variable with <code>(induction f rule: form.induct)</code>. Avoid confusing</p>\n</blockquote>\n<p>Given the situation, surely I will from now on...</p>",
        "id": 470013673,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1726246366
    },
    {
        "content": "<p>instead it decided to generalize the <code>demodalize f</code> to <code>form</code> and do induction on that</p>",
        "id": 470013728,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1726246388
    },
    {
        "content": "<p>Although in general <code>induction f rule: demodalize.induct</code> is better here as you pick the version adapted to demodalize</p>",
        "id": 470013868,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1726246446
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"233198\">Mathias Fleury</span> <a href=\"#narrow/stream/238552-Beginner-Questions/topic/Why.20it.20seems.20like.20Isabelle.20does.20not.20get.20my.20definition/near/470013728\">said</a>:</p>\n<blockquote>\n<p>instead it decided to generalize the <code>demodalize f</code> to <code>form</code> and do induction on that</p>\n</blockquote>\n<p>Ah? So what happens is that it is proving !f. f = demodalize form ==&gt; propform (demodalize form)?</p>",
        "id": 470013914,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1726246470
    },
    {
        "content": "<p>Try this silly version of the definition to see what happens:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">propform</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"form ⇒ bool\"</span>\n<span class=\"w\">  </span><span class=\"kp\">where</span>\n<span class=\"w\">   </span><span class=\"s\">\"propform FALSE = True\"</span>\n<span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"s\">\"propform (VAR p) = True\"</span>\n<span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"s\">\"propform (DISJ (VAR f1) f2) = (propform f2)\"</span>\n<span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"s\">\"propform (DISJ f1 f2) = (propform f1 ∧ propform f2)\"</span>\n<span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"s\">\"propform (NOT f) = propform f\"</span>\n<span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"s\">\"propform (DIAM f) = False\"</span>\n</code></pre></div>",
        "id": 470013994,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1726246501
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"754515\">Yiming Xu</span> <a href=\"#narrow/stream/238552-Beginner-Questions/topic/Why.20it.20seems.20like.20Isabelle.20does.20not.20get.20my.20definition/near/470013914\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"233198\">Mathias Fleury</span> <a href=\"#narrow/stream/238552-Beginner-Questions/topic/Why.20it.20seems.20like.20Isabelle.20does.20not.20get.20my.20definition/near/470013728\">said</a>:</p>\n<blockquote>\n<p>instead it decided to generalize the <code>demodalize f</code> to <code>form</code> and do induction on that</p>\n</blockquote>\n<p>Ah? So what happens is that it is proving !f. f = demodalize form ==&gt; propform (demodalize form)?</p>\n</blockquote>\n<p>No, as you though it is proving that <code>propform form</code></p>",
        "id": 470014082,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1726246535
    },
    {
        "content": "<p>(do not ask me why, I have no interest to check the code of the induction tactic)</p>",
        "id": 470014140,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1726246557
    },
    {
        "content": "<p>I won't. I will just try your example and I may check later...</p>",
        "id": 470014241,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1726246591
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"233198\">Mathias Fleury</span> <a href=\"#narrow/stream/238552-Beginner-Questions/topic/Why.20it.20seems.20like.20Isabelle.20does.20not.20get.20my.20definition/near/470014082\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"754515\">Yiming Xu</span> <a href=\"#narrow/stream/238552-Beginner-Questions/topic/Why.20it.20seems.20like.20Isabelle.20does.20not.20get.20my.20definition/near/470013914\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"233198\">Mathias Fleury</span> <a href=\"#narrow/stream/238552-Beginner-Questions/topic/Why.20it.20seems.20like.20Isabelle.20does.20not.20get.20my.20definition/near/470013728\">said</a>:</p>\n<blockquote>\n<p>instead it decided to generalize the <code>demodalize f</code> to <code>form</code> and do induction on that</p>\n</blockquote>\n<p>Ah? So what happens is that it is proving !f. f = demodalize form ==&gt; propform (demodalize form)?</p>\n</blockquote>\n<p>No, as you though it is proving that <code>propform form</code></p>\n</blockquote>\n<p>I will remember, this is an impressive design...</p>",
        "id": 470014388,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1726246643
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"233198\">Mathias Fleury</span> <a href=\"#narrow/stream/238552-Beginner-Questions/topic/Why.20it.20seems.20like.20Isabelle.20does.20not.20get.20my.20definition/near/470013994\">said</a>:</p>\n<blockquote>\n<p>Try this silly version of the definition to see what happens:</p>\n<p><div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">propform</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"form ⇒ bool\"</span>\n<span class=\"w\">  </span><span class=\"kp\">where</span>\n<span class=\"w\">   </span><span class=\"s\">\"propform FALSE = True\"</span>\n<span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"s\">\"propform (VAR p) = True\"</span>\n<span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"s\">\"propform (DISJ (VAR f1) f2) = (propform f2)\"</span>\n<span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"s\">\"propform (DISJ f1 f2) = (propform f1 ∧ propform f2)\"</span>\n<span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"s\">\"propform (NOT f) = propform f\"</span>\n<span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"s\">\"propform (DIAM f) = False\"</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>You mean use this and use induction f rule: demodalize.induct?</p>",
        "id": 470014451,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1726246667
    },
    {
        "content": "<p>Take that definition and compare:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">propform_demodalize</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"propform (demodalize f)\"</span>\n<span class=\"w\">  </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">induction</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"n\">rule</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">form.induct</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"n\">auto</span>\n<span class=\"w\">  </span><span class=\"gr\">oops</span>\n\n\n<span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">propform_demodalize</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"propform (demodalize f)\"</span>\n<span class=\"w\">  </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">induction</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"n\">rule</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">demodalize.induct</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"n\">auto</span>\n<span class=\"w\">  </span><span class=\"gr\">oops</span>\n</code></pre></div>",
        "id": 470014613,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1726246738
    },
    {
        "content": "<p>ah no sorry wait</p>",
        "id": 470014694,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1726246779
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">demodalize</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"form ⇒ form\"</span>\n<span class=\"w\">  </span><span class=\"kp\">where</span>\n<span class=\"w\">    </span><span class=\"s\">\"demodalize FALSE = FALSE\"</span>\n<span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"s\">\"demodalize (VAR p) = VAR p\"</span>\n<span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"s\">\"demodalize (DISJ (VAR form1) form2) = DISJ (VAR form1) (demodalize form2)\"</span>\n<span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"s\">\"demodalize (DISJ form1 form2) = DISJ (demodalize form1) (demodalize form2)\"</span>\n<span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"s\">\"demodalize (NOT form) = NOT (demodalize form)\"</span>\n<span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"s\">\"demodalize (DIAM form) = demodalize form\"</span>\n\n\n<span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">propform</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"form ⇒ bool\"</span>\n<span class=\"w\">  </span><span class=\"kp\">where</span>\n<span class=\"w\">   </span><span class=\"s\">\"propform FALSE = True\"</span>\n<span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"s\">\"propform (VAR p) = True\"</span>\n<span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"s\">\"propform (DISJ f1 f2) = (propform f1 ∧ propform f2)\"</span>\n<span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"s\">\"propform (NOT f) = propform f\"</span>\n<span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"s\">\"propform (DIAM f) = False\"</span>\n\n<span class=\"kt\">thm</span><span class=\"w\"> </span><span class=\"n\">form.induct</span>\n<span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">propform_demodalize</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"propform (demodalize f)\"</span>\n<span class=\"w\">  </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">induction</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"n\">rule</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">demodalize.induct</span><span class=\"o\">)</span>\n<span class=\"w\">          </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"n\">auto</span>\n<span class=\"w\">  </span><span class=\"gr\">oops</span>\n\n\n<span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">propform_demodalize</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"propform (demodalize f)\"</span>\n<span class=\"w\">  </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">induction</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"n\">rule</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">form.induct</span><span class=\"o\">)</span>\n<span class=\"w\">          </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"n\">auto</span>\n<span class=\"w\">  </span><span class=\"gr\">oops</span>\n</code></pre></div>",
        "id": 470014866,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1726246827
    },
    {
        "content": "<p><a href=\"/user_uploads/14278/crtDEL6Z5ndR4VF5rpdYNnTb/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/14278/crtDEL6Z5ndR4VF5rpdYNnTb/image.png\" title=\"image.png\"><img data-original-dimensions=\"2160x784\" src=\"/user_uploads/thumbnail/14278/crtDEL6Z5ndR4VF5rpdYNnTb/image.png/840x560.webp\"></a></div>",
        "id": 470015611,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1726247137
    },
    {
        "content": "<p>I think this is what I expected? Identical to HOL4.</p>",
        "id": 470015710,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1726247167
    },
    {
        "content": "<p>Oh I see.</p>",
        "id": 470015869,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1726247229
    },
    {
        "content": "<p>If the definition of demodalize is changed, than if we induct on formula, we need to do case splitting on DISJ case.</p>",
        "id": 470015951,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1726247265
    },
    {
        "content": "<p>But if we just induct on demodalize, then the IH does the case splitting.</p>",
        "id": 470016040,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1726247286
    },
    {
        "content": "<p>Yes I agree! In that case, inducting with demodalize will be better.</p>",
        "id": 470016214,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1726247359
    },
    {
        "content": "<p>I am not confident enough to claim \"it works better &lt;=&gt; the inductive definition of a constructor of the datatype requires a case splitting\". But so far I believe.</p>",
        "id": 470016324,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1726247401
    }
]