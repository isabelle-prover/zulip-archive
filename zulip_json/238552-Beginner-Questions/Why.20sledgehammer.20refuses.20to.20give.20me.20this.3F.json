[
    {
        "content": "<p>I want to prove:</p>\n<p>proof (prove)<br>\nusing this:<br>\n    u = ul ! j<br>\n    (u, u') ∈ set (zip ul ul')<br>\n    j &lt; length ul<br>\n    length ul = length ul'</p>\n<p>goal (1 subgoal):</p>\n<ol>\n<li>u' = ul' ! j</li>\n</ol>\n<p>sledgehammer gives nothing, which is surprising. What is wrong here?</p>",
        "id": 498525051,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1739039954
    },
    {
        "content": "<p>I think I see what is wrong. All my bad! Never minds.</p>",
        "id": 498528107,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1739042389
    },
    {
        "content": "<p><code>ul = replicate 250 1</code><br>\n<code>ul' = [0..&lt;250]</code><br>\n<code>u = 1</code><br>\n<code>j=1</code></p>",
        "id": 498533959,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1739046909
    },
    {
        "content": "<p><code>u' = 249</code></p>",
        "id": 498533967,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1739046918
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span>\n<span class=\"w\">  </span><span class=\"kp\">assumes</span><span class=\"w\"> </span><span class=\"s\">\"u = ul ! j\"</span>\n<span class=\"kp\">assumes</span><span class=\"w\"> </span><span class=\"s\">\"(u, u') ∈ set (zip ul ul')\"</span>\n<span class=\"kp\">assumes</span><span class=\"w\"> </span><span class=\"s\">\"j &lt; length ul\"</span>\n<span class=\"kp\">assumes</span><span class=\"w\"> </span><span class=\"s\">\"length ul = length ul'\"</span>\n<span class=\"kp\">shows</span><span class=\"w\"> </span><span class=\"s\">\"u' = ul' ! j\"</span>\n<span class=\"kt\">nitpick</span>\n<span class=\"c\">(*</span>\n<span class=\"c\">Nitpicking formula...</span>\n<span class=\"c\">Nitpick found a counterexample for card 'a = 3 and card 'b = 3:</span>\n<span class=\"c\">  Free variables:</span>\n<span class=\"c\">    j = 0</span>\n<span class=\"c\">    u = a⇩1</span>\n<span class=\"c\">    u' = b⇩1</span>\n<span class=\"c\">    ul = [a⇩1, a⇩1]</span>\n<span class=\"c\">    ul' = [b⇩2, b⇩1]</span>\n<span class=\"c\">*)</span>\n</code></pre></div>",
        "id": 498534085,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1739047001
    },
    {
        "content": "<p>with distinct it works</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span>\n<span class=\"w\">  </span><span class=\"kp\">assumes</span><span class=\"w\"> </span><span class=\"s\">\"u = ul ! j\"</span><span class=\"w\"> </span><span class=\"s\">\"distinct ul\"</span>\n<span class=\"kp\">assumes</span><span class=\"w\"> </span><span class=\"s\">\"(u, u') ∈ set (zip ul ul')\"</span>\n<span class=\"kp\">assumes</span><span class=\"w\"> </span><span class=\"s\">\"j &lt; length ul\"</span>\n<span class=\"kp\">assumes</span><span class=\"w\"> </span><span class=\"s\">\"length ul = length ul'\"</span>\n<span class=\"kp\">shows</span><span class=\"w\"> </span><span class=\"s\">\"u' = ul' ! j\"</span>\n<span class=\"w\">  </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">assms</span>\n<span class=\"w\">  </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"n\">auto</span>\n<span class=\"w\">  </span><span class=\"c\">(*thank you sledgehammer*)</span>\n<span class=\"w\">  </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">smt</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">verit</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">Pair_inject</span><span class=\"w\"> </span><span class=\"n\">in_set_conv_nth</span><span class=\"w\"> </span><span class=\"n\">length_zip</span><span class=\"w\"> </span><span class=\"n\">min.idem</span><span class=\"w\"> </span><span class=\"n\">nth_eq_iff_index_eq</span><span class=\"w\"> </span><span class=\"n\">nth_zip</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 498534242,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1739047104
    },
    {
        "content": "<p>Thanks! Eventually I remember to use nitpick for the thing that confuses me...</p>",
        "id": 498536097,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1739048833
    },
    {
        "content": "<p>For simple list theorems, I always assume that sledgehammer will either prove it or the theorem is incorrect</p>",
        "id": 498536244,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1739048939
    },
    {
        "content": "<p>So the important question is what is a \"simple list theorem...\"</p>",
        "id": 498536509,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1739049191
    },
    {
        "content": "<p>everything that does only involves list operator from HOL.List or your own definitions</p>",
        "id": 498536527,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1739049214
    },
    {
        "content": "<p>(HOL.List is nearly all useful functions)</p>",
        "id": 498536536,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1739049232
    },
    {
        "content": "<p>I see. I should not under estimate sledgehammer.</p>",
        "id": 498536605,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1739049296
    },
    {
        "content": "<p>It is more: you should not underestimate the amount of hours users have put into writing all the useful theorems</p>",
        "id": 498536907,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1739049572
    },
    {
        "content": "<p>Surely I am not. But I fail to find useful thms on iterated zips... I hope it just indicates I should not ever need them...</p>",
        "id": 498537032,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1739049658
    }
]