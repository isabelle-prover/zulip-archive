[
    {
        "content": "<p>I have the following goal:<br>\n<a href=\"/user_uploads/14278/A76_99LVCPoNnHUZBMcqcpvR/image.png\">image.png</a><br>\nIt seems to be straightforward but all of simp/auto/metis fails.<br>\nAs a naive guess, I think it is because the implications here are all meta-implications and I maybe they have to be put in the assumption list before automatic tools can use them in the intended way. So how should I do this?</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/14278/A76_99LVCPoNnHUZBMcqcpvR/image.png\" title=\"image.png\"><img data-original-dimensions=\"2072x996\" src=\"/user_uploads/thumbnail/14278/A76_99LVCPoNnHUZBMcqcpvR/image.png/840x560.webp\"></a></div>",
        "id": 469483265,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1726080363
    },
    {
        "content": "<p>First it is easier to include the code here for copy-paste</p>",
        "id": 469483669,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1726080526
    },
    {
        "content": "<p><code>forall x. P x \\/ Q x</code> is not the same as <code>(forall x. P x) \\/ (forall x. Q x)</code></p>",
        "id": 469483718,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1726080554
    },
    {
        "content": "<p>datatype form = VAR \"num\"<br>\n| FALSE<br>\n| DISJ \"form\" \"form\"<br>\n| NOT \"form\"<br>\n| DIAM \"form\"</p>\n<p>record 'a frame =<br>\nworld :: \"'a ⇒ bool\"<br>\nrel :: \"'a ⇒ 'a ⇒ bool\"</p>\n<p>record 'a model = \"'a frame\" +<br>\nvalt :: \"num ⇒ 'a ⇒ bool\"</p>\n<p>fun satis :: \"'a model ⇒ 'a ⇒ form ⇒ bool\" <br>\nwhere<br>\n  \"satis M w (VAR p) ⟷ (valt M p w ∧ world M w)\" <br>\n| \"satis M w FALSE ⟷ False\"<br>\n| \"satis M w (NOT f) ⟷ world M w ∧ ¬ satis M w f\"<br>\n| \"satis M w (DISJ f1 f2) ⟷ satis M w f1 ∨ satis M w f2\"<br>\n| \"satis M w (DIAM f) ⟷ world M w ∧ (∃ v. rel M w v ∧ world M v ∧ satis M v f)\"</p>\n<p>lemma satis_only_in_worlds: \"∀w. satis M w f ⟹ world M w\"<br>\nproof (induct rule:form.induct)<br>\n  case (VAR x)<br>\n  then show ?case by simp<br>\nnext<br>\n  case FALSE<br>\n  then show ?case by simp<br>\nnext<br>\n  case (DISJ x1a x2)<br>\n  then show ?case apply simp  done  sorry<br>\nnext<br>\n  case (NOT x)<br>\n  then show ?case by simp<br>\nnext<br>\n  case (DIAM x)<br>\n  then show ?case simp<br>\nqed</p>",
        "id": 469483790,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1726080591
    },
    {
        "content": "<p>think of <code>forall n::natural number. even n \\/ odd n</code>.</p>",
        "id": 469483796,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1726080593
    },
    {
        "content": "<p>Oh the second w is blue!</p>",
        "id": 469483957,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1726080634
    },
    {
        "content": "<p>I see, I need more parentheses.</p>",
        "id": 469483998,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1726080649
    },
    {
        "content": "<p>Actually, the easiest solution is to drop the forall completely</p>",
        "id": 469484060,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1726080679
    },
    {
        "content": "<p>stuff get explicitly meta-quantified</p>",
        "id": 469484096,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1726080694
    },
    {
        "content": "<p>and yes green = bound, blue = free</p>",
        "id": 469484137,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1726080710
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"w\"> </span><span class=\"k\">case</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">DISJ</span><span class=\"w\"> </span><span class=\"n\">x1a</span><span class=\"w\"> </span><span class=\"n\">x2</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"k\">case</span><span class=\"w\"> </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"n\">simp</span>\n<span class=\"w\">    </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">blast</span>\n</code></pre></div>",
        "id": 469484369,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1726080795
    },
    {
        "content": "<p>That works. But how would a mature user write it?</p>",
        "id": 469484420,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1726080815
    },
    {
        "content": "<p>\"by\" should be an abbreviation of apply and done. But if I change it, Isabelle complains about the syntax again.</p>",
        "id": 469484624,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1726080896
    },
    {
        "content": "<p><a href=\"/user_uploads/14278/KBd1XzlaRyxS6-ZdwteyHVQo/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/14278/KBd1XzlaRyxS6-ZdwteyHVQo/image.png\" title=\"image.png\"><img data-original-dimensions=\"2254x1092\" src=\"/user_uploads/thumbnail/14278/KBd1XzlaRyxS6-ZdwteyHVQo/image.png/840x560.webp\"></a></div>",
        "id": 469484744,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1726080948
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"233198\">Mathias Fleury</span> <a href=\"#narrow/stream/238552-Beginner-Questions/topic/Why.20this.20goal.20cannot.20be.20solved.20automatically.3F/near/469484096\">said</a>:</p>\n<blockquote>\n<p>stuff get explicitly meta-quantified</p>\n</blockquote>\n<p>Great reminder, I should do that.</p>",
        "id": 469484966,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1726081034
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">satis_only_in_worlds</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"satis M w f ⟹ world M w\"</span>\n<span class=\"k\">proof</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">induct</span><span class=\"w\"> </span><span class=\"n\">rule</span><span class=\"o\">:</span><span class=\"n\">form.induct</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"k\">case</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">VAR</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"k\">case</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">simp</span>\n<span class=\"k\">next</span>\n<span class=\"w\">  </span><span class=\"k\">case</span><span class=\"w\"> </span><span class=\"n\">FALSE</span>\n<span class=\"w\">  </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"k\">case</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">simp</span>\n<span class=\"k\">next</span>\n<span class=\"w\">  </span><span class=\"k\">case</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">DISJ</span><span class=\"w\"> </span><span class=\"n\">x1a</span><span class=\"w\"> </span><span class=\"n\">x2</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"k\">case</span><span class=\"w\"> </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">blast</span>\n<span class=\"k\">next</span>\n<span class=\"w\">  </span><span class=\"k\">case</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">NOT</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"k\">case</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">simp</span>\n<span class=\"k\">next</span>\n<span class=\"w\">  </span><span class=\"k\">case</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">DIAM</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"k\">case</span>\n<span class=\"w\">  </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">fastforce</span>\n<span class=\"k\">qed</span>\n</code></pre></div>",
        "id": 469485179,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1726081130
    },
    {
        "content": "<p>So here is a complete Isar proof that merely works! I had no experience with Isar and actually, any theorem prover that supports forward, readable proof. I would like suggestions to make this proof neater according to Isar conventions.</p>",
        "id": 469485498,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1726081250
    },
    {
        "content": "<p>What I usually do in cases like this where I have a bunch of cases that are just calls to <code>simp</code>,  is to do them all at the end:</p>\n<div class=\"codehilite\" data-code-language=\"Diff\"><pre><span></span><code>lemma satis_only_in_worlds: \"satis M w f ⟹ world M w\"\nproof (induct rule:form.induct)\n<span class=\"gd\">-  case (VAR x)</span>\n<span class=\"gd\">-  then show ?case by simp</span>\n<span class=\"gd\">-next</span>\n<span class=\"gd\">-  case FALSE</span>\n<span class=\"gd\">-  then show ?case by simp</span>\n<span class=\"gd\">-next</span>\n<span class=\"w\"> </span> case (DISJ x1a x2)\n<span class=\"gd\">-  then show ?case apply simp by blast</span>\n<span class=\"gi\">+  then show ?case by auto (* not sure if this works, but auto is roughly simp + blast *)</span>\n<span class=\"gd\">-next</span>\n<span class=\"gd\">-  case (NOT x)</span>\n<span class=\"gd\">-  then show ?case by simp</span>\nnext\n<span class=\"w\"> </span> case (DIAM x)\n<span class=\"w\"> </span> then show ?case\n<span class=\"w\"> </span> by fastforce\n<span class=\"gd\">-qed</span>\n<span class=\"gi\">+qed simp_all</span>\n</code></pre></div>",
        "id": 469508199,
        "sender_full_name": "Jan van Brügge",
        "timestamp": 1726089426
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"392255\">Jan van Brügge</span> <a href=\"#narrow/stream/238552-Beginner-Questions/topic/Why.20this.20goal.20cannot.20be.20solved.20automatically.3F/near/469508199\">said</a>:</p>\n<blockquote>\n<p>What I usually do in cases like this where I have a bunch of cases that are just calls to <code>simp</code>,  is to do them all at the end:</p>\n<p><div class=\"codehilite\" data-code-language=\"Diff\"><pre><span></span><code>lemma satis_only_in_worlds: \"satis M w f ⟹ world M w\"\nproof (induct rule:form.induct)\n<span class=\"gd\">-  case (VAR x)</span>\n<span class=\"gd\">-  then show ?case by simp</span>\n<span class=\"gd\">-next</span>\n<span class=\"gd\">-  case FALSE</span>\n<span class=\"gd\">-  then show ?case by simp</span>\n<span class=\"gd\">-next</span>\n<span class=\"w\"> </span> case (DISJ x1a x2)\n<span class=\"gd\">-  then show ?case apply simp by blast</span>\n<span class=\"gi\">+  then show ?case by auto (* not sure if this works, but auto is roughly simp + blast *)</span>\n<span class=\"gd\">-next</span>\n<span class=\"gd\">-  case (NOT x)</span>\n<span class=\"gd\">-  then show ?case by simp</span>\nnext\n<span class=\"w\"> </span> case (DIAM x)\n<span class=\"w\"> </span> then show ?case\n<span class=\"w\"> </span> by fastforce\n<span class=\"gd\">-qed</span>\n<span class=\"gi\">+qed simp_all</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Thanks! The auto works. That is good to know.</p>",
        "id": 469583651,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1726126663
    },
    {
        "content": "<p>in general you can use <code>try0</code> at a proof to see what isabelle methods can finish the proof</p>",
        "id": 469746884,
        "sender_full_name": "Jan van Brügge",
        "timestamp": 1726164204
    },
    {
        "content": "<p>Thanks! I will try out how powerful it is soon.</p>",
        "id": 469747309,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1726164279
    }
]