[
    {
        "content": "<p>I have a goal looks like this:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"n\">⋀a</span><span class=\"w\"> </span><span class=\"n\">b.</span><span class=\"w\"> </span><span class=\"n\">∃x.</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">∈</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"n\">∧</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">cVAR</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">⟹</span>\n<span class=\"w\">           </span><span class=\"n\">∃x.</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">∈</span><span class=\"w\"> </span><span class=\"n\">tau</span><span class=\"w\"> </span><span class=\"n\">∧</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">∃xa.</span><span class=\"w\"> </span><span class=\"n\">xa</span><span class=\"w\"> </span><span class=\"n\">∈</span><span class=\"w\"> </span><span class=\"ow\">{</span><span class=\"n\">fl.</span><span class=\"w\"> </span><span class=\"n\">∀f.</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"n\">∈</span><span class=\"w\"> </span><span class=\"n\">set</span><span class=\"w\"> </span><span class=\"n\">fl</span><span class=\"w\"> </span><span class=\"n\">⟶</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"n\">∈</span><span class=\"w\"> </span><span class=\"n\">DPM</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"n\">tau</span><span class=\"ow\">}</span><span class=\"w\"> </span><span class=\"n\">∧</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">♢x</span><span class=\"w\"> </span><span class=\"n\">xa</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">⟹</span>\n<span class=\"w\">           </span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">∉</span><span class=\"w\"> </span><span class=\"n\">cequivr</span><span class=\"w\"> </span><span class=\"n\">TYPE</span><span class=\"o\">(</span><span class=\"n n-Type\">'a</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>I want to eliminate:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"o\">(</span><span class=\"n\">∃xa.</span><span class=\"w\"> </span><span class=\"n\">xa</span><span class=\"w\"> </span><span class=\"n\">∈</span><span class=\"w\"> </span><span class=\"ow\">{</span><span class=\"n\">fl.</span><span class=\"w\"> </span><span class=\"n\">∀f.</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"n\">∈</span><span class=\"w\"> </span><span class=\"n\">set</span><span class=\"w\"> </span><span class=\"n\">fl</span><span class=\"w\"> </span><span class=\"n\">⟶</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"n\">∈</span><span class=\"w\"> </span><span class=\"n\">DPM</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"n\">tau</span><span class=\"ow\">}</span><span class=\"w\"> </span><span class=\"n\">∧</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">♢x</span><span class=\"w\"> </span><span class=\"n\">xa</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>But I tried both bex_triv and Bex_def and none of them works.</p>\n<p>As a reminder:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"w\">  </span><span class=\"n\">Set.Bex_def</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Bex</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">P</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">∃x.</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">∈</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"n\">∧</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">P</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"n\">Set.bex_triv</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">∃x∈</span><span class=\"o\">?</span><span class=\"n\">A.</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">P</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">((</span><span class=\"n\">∃x.</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">∈</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">A</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">∧</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">P</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>May I please ask why <code> unfolding bex_triv Bex_def</code> does not make change on this goal?</p>",
        "id": 486680286,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1733586224
    },
    {
        "content": "<p>Side remark: there is no Bex in <code>(∃xa. xa ∈ {fl. ∀f. f ∈ set fl ⟶ f ∈ DPM n s tau} ∧ b = ♢x xa)</code>, so unfolding will not (and cannot) do anything.</p>",
        "id": 486681242,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1733586876
    },
    {
        "content": "<p>Side remark 2: unfolding is <em>not</em> what you want. You want to replace <code>∃x. P x ==&gt; thesis</code> by <code>!!x. P x ==&gt; thesis</code>. This is not something unfolding can do (not equivalence preserving).</p>",
        "id": 486681304,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1733586938
    },
    {
        "content": "<p>And now you know that you want an elim rule and not an unfolding: <code>apply (elim exE)</code></p>",
        "id": 486681433,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1733587059
    },
    {
        "content": "<p>There is a <code>bexE</code> with the meaning you can guess if you a <code>bex</code> instead of an <code>ex</code> quantifier</p>",
        "id": 486681531,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1733587146
    },
    {
        "content": "<p>Oh I did not note that I have already eliminated the Bex! Silly me! Alles klar.</p>",
        "id": 486682078,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1733587520
    },
    {
        "content": "<p>But as for \"elim exE\", I am repeatedly told to avoid apply. And I would do the unfolding before opening a proof-qed block.</p>",
        "id": 486682175,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1733587578
    },
    {
        "content": "<p>Let me try to find an iff thm that does this for me.</p>",
        "id": 486682221,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1733587615
    },
    {
        "content": "<p>I find this:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"w\">  </span><span class=\"n\">HOL.atomize_exL</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">⋀x.</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">P</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">⟹</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">Q</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">≡</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">∃x.</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">P</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">⟹</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">Q</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 486682373,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1733587720
    },
    {
        "content": "<p>I like this one but its direction is wrong for unfolding. Is that any function that flips an equality that I can call without go to ML level?</p>",
        "id": 486682422,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1733587766
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"754515\">Yiming Xu</span> <a href=\"#narrow/channel/238552-Beginner-Questions/topic/Why.20unfolding.20Bex_def.2C.20bex_triv.20does.20not.20work.20here.3F/near/486682175\">said</a>:</p>\n<blockquote>\n<p>But as for \"elim exE\", I am repeatedly told to avoid apply. And I would do the unfolding before opening a proof-qed block.</p>\n</blockquote>\n<p>Can't you do<br>\nproof(elim exE)<br>\n....</p>",
        "id": 486682522,
        "sender_full_name": "irvin",
        "timestamp": 1733587828
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"233198\">Mathias Fleury</span> <a href=\"#narrow/channel/238552-Beginner-Questions/topic/Why.20unfolding.20Bex_def.2C.20bex_triv.20does.20not.20work.20here.3F/near/486681304\">said</a>:</p>\n<blockquote>\n<p>Side remark 2: unfolding is <em>not</em> what you want. You want to replace <code>∃x. P x ==&gt; thesis</code> by <code>!!x. P x ==&gt; thesis</code>. This is not something unfolding can do (not equivalence preserving).</p>\n</blockquote>\n<p>I think this is \"((?x. P x) ==&gt; ?thesis)\\equiv (!!x. P x ==&gt; ?thesis)\", so we can retrieve an equivalence.</p>",
        "id": 486682574,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1733587870
    },
    {
        "content": "<p>If you want an isar block you can also do something like<br>\nlemma\"∃x. P x\"<br>\nproof -<br>\n  fix x<br>\n  have \"P x\"<br>\n    by sorry<br>\n  then show \"∃x. P x\"<br>\n    by(rule exI)<br>\nqed</p>",
        "id": 486682818,
        "sender_full_name": "irvin",
        "timestamp": 1733588004
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"714722\">irvin</span> <a href=\"#narrow/channel/238552-Beginner-Questions/topic/Why.20unfolding.20Bex_def.2C.20bex_triv.20does.20not.20work.20here.3F/near/486682522\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"754515\">Yiming Xu</span> <a href=\"#narrow/channel/238552-Beginner-Questions/topic/Why.20unfolding.20Bex_def.2C.20bex_triv.20does.20not.20work.20here.3F/near/486682175\">said</a>:</p>\n<blockquote>\n<p>But as for \"elim exE\", I am repeatedly told to avoid apply. And I would do the unfolding before opening a proof-qed block.</p>\n</blockquote>\n<p>Can't you do<br>\nproof(elim exE)<br>\n....</p>\n</blockquote>\n<p>I can do that as well. Thank you! Using more equivalence might just be my personal preference.</p>",
        "id": 486682860,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1733588035
    },
    {
        "content": "<p>Since the HOL4 style tends to prefer simplification (i.e. iff) than implication...</p>",
        "id": 486682936,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1733588069
    },
    {
        "content": "<p>After 3 months, I find the style I prefer in Isar is to avoid opening a proof block once possible and keep using equality for reasoning. I tend to believe that looks neater. (Sadly I need more time to actually achieve this...)</p>",
        "id": 486683182,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1733588259
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"714722\">irvin</span> <a href=\"#narrow/channel/238552-Beginner-Questions/topic/Why.20unfolding.20Bex_def.2C.20bex_triv.20does.20not.20work.20here.3F/near/486682818\">said</a>:</p>\n<blockquote>\n<p>If you want an isar block you can also do something like<br>\nlemma\"∃x. P x\"<br>\nproof -<br>\n  fix x<br>\n  have \"P x\"<br>\n    by sorry<br>\n  then show \"∃x. P x\"<br>\n    by(rule exI)<br>\nqed</p>\n</blockquote>\n<p><code>obtain x where \"P x\"</code> is the syntax you are looking for.</p>",
        "id": 486683520,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1733588486
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"233198\">Mathias Fleury</span> <a href=\"#narrow/channel/238552-Beginner-Questions/topic/Why.20unfolding.20Bex_def.2C.20bex_triv.20does.20not.20work.20here.3F/near/486683520\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"714722\">irvin</span> <a href=\"#narrow/channel/238552-Beginner-Questions/topic/Why.20unfolding.20Bex_def.2C.20bex_triv.20does.20not.20work.20here.3F/near/486682818\">said</a>:</p>\n<blockquote>\n<p>If you want an isar block you can also do something like<br>\nlemma\"∃x. P x\"<br>\nproof -<br>\n  fix x<br>\n  have \"P x\"<br>\n    by sorry<br>\n  then show \"∃x. P x\"<br>\n    by(rule exI)<br>\nqed</p>\n</blockquote>\n<p><code>obtain x where \"P x\"</code> is the syntax you are looking for.</p>\n</blockquote>\n<p>oh my bad yup mathias is right<br>\nfor clarification</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span>\n<span class=\"w\">  </span><span class=\"s\">\"∃x. P x ⟹ Q\"</span>\n<span class=\"k\">proof</span><span class=\"w\"> </span><span class=\"o\">-</span>\n<span class=\"w\">  </span><span class=\"k\">assume</span><span class=\"w\"> </span><span class=\"s\">\"∃x. P x\"</span>\n<span class=\"w\">  </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"k\">obtain</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"kp\">where</span><span class=\"w\"> </span><span class=\"s\">\"P x\"</span><span class=\"w\"> </span><span class=\"ow\">..</span>\n\n<span class=\"w\">  </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"s\">\"Q\"</span>\n<span class=\"w\">    </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"gr\">sorry</span>\n<span class=\"k\">qed</span>\n</code></pre></div>",
        "id": 486683734,
        "sender_full_name": "irvin",
        "timestamp": 1733588653
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"754515\">Yiming Xu</span> <a href=\"#narrow/channel/238552-Beginner-Questions/topic/Why.20unfolding.20Bex_def.2C.20bex_triv.20does.20not.20work.20here.3F/near/486682574\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"233198\">Mathias Fleury</span> <a href=\"#narrow/channel/238552-Beginner-Questions/topic/Why.20unfolding.20Bex_def.2C.20bex_triv.20does.20not.20work.20here.3F/near/486681304\">said</a>:</p>\n<blockquote>\n<p>Side remark 2: unfolding is <em>not</em> what you want. You want to replace <code>∃x. P x ==&gt; thesis</code> by <code>!!x. P x ==&gt; thesis</code>. This is not something unfolding can do (not equivalence preserving).</p>\n</blockquote>\n<p>I think this is \"((?x. P x) ==&gt; ?thesis)\\equiv (!!x. P x ==&gt; ?thesis)\", so we can retrieve an equivalence.</p>\n</blockquote>\n<p>Yeah you are right that it is equivalent, but the scope of <code>x</code> changes from only <code>P x</code> to the entire formula.</p>",
        "id": 486683783,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1733588710
    },
    {
        "content": "<p>This is the equivalence you are looking for:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">unfolding</span><span class=\"w\"> </span><span class=\"n\">ex_neg_all_pos</span>\n</code></pre></div>",
        "id": 486683914,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1733588810
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"714722\">irvin</span> <a href=\"#narrow/channel/238552-Beginner-Questions/topic/Why.20unfolding.20Bex_def.2C.20bex_triv.20does.20not.20work.20here.3F/near/486683734\">said</a>:<br>\nfor clarification</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span>\n<span class=\"w\">  </span><span class=\"s\">\"∃x. P x ⟹ Q\"</span>\n<span class=\"k\">proof</span><span class=\"w\"> </span><span class=\"o\">-</span>\n<span class=\"w\">  </span><span class=\"k\">assume</span><span class=\"w\"> </span><span class=\"s\">\"∃x. P x\"</span>\n<span class=\"w\">  </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"k\">obtain</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"kp\">where</span><span class=\"w\"> </span><span class=\"s\">\"P x\"</span><span class=\"w\"> </span><span class=\"ow\">..</span>\n\n<span class=\"w\">  </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"s\">\"Q\"</span>\n<span class=\"w\">    </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"gr\">sorry</span>\n<span class=\"k\">qed</span>\n</code></pre></div>\n<p>If you go for Isar, let's use full Isar:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span>\n<span class=\"w\">  </span><span class=\"kp\">assumes</span><span class=\"w\"> </span><span class=\"n\">P</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"∃x. P x\"</span>\n<span class=\"w\">  </span><span class=\"kp\">shows</span><span class=\"w\"> </span><span class=\"s\">\"Q\"</span>\n<span class=\"k\">proof</span><span class=\"w\"> </span><span class=\"o\">-</span>\n<span class=\"w\">  </span><span class=\"k\">obtain</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"kp\">where</span><span class=\"w\"> </span><span class=\"s\">\"P x\"</span><span class=\"w\"> </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">P</span><span class=\"w\"> </span><span class=\"ow\">..</span>\n\n<span class=\"w\">  </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"s\">\"Q\"</span>\n<span class=\"w\">    </span><span class=\"gr\">sorry</span>\n<span class=\"k\">qed</span>\n</code></pre></div>",
        "id": 486684024,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1733588898
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"714722\">irvin</span> <a href=\"#narrow/channel/238552-Beginner-Questions/topic/Why.20unfolding.20Bex_def.2C.20bex_triv.20does.20not.20work.20here.3F/near/486683734\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"233198\">Mathias Fleury</span> <a href=\"#narrow/channel/238552-Beginner-Questions/topic/Why.20unfolding.20Bex_def.2C.20bex_triv.20does.20not.20work.20here.3F/near/486683520\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"714722\">irvin</span> <a href=\"#narrow/channel/238552-Beginner-Questions/topic/Why.20unfolding.20Bex_def.2C.20bex_triv.20does.20not.20work.20here.3F/near/486682818\">said</a>:</p>\n<blockquote>\n<p>If you want an isar block you can also do something like<br>\nlemma\"∃x. P x\"<br>\nproof -<br>\n  fix x<br>\n  have \"P x\"<br>\n    by sorry<br>\n  then show \"∃x. P x\"<br>\n    by(rule exI)<br>\nqed</p>\n</blockquote>\n<p><code>obtain x where \"P x\"</code> is the syntax you are looking for.</p>\n</blockquote>\n<p>oh my bad yup mathias is right<br>\nfor clarification</p>\n<p><div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span>\n<span class=\"w\">  </span><span class=\"s\">\"∃x. P x ⟹ Q\"</span>\n<span class=\"k\">proof</span><span class=\"w\"> </span><span class=\"o\">-</span>\n<span class=\"w\">  </span><span class=\"k\">assume</span><span class=\"w\"> </span><span class=\"s\">\"∃x. P x\"</span>\n<span class=\"w\">  </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"k\">obtain</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"kp\">where</span><span class=\"w\"> </span><span class=\"s\">\"P x\"</span><span class=\"w\"> </span><span class=\"ow\">..</span>\n\n<span class=\"w\">  </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"s\">\"Q\"</span>\n<span class=\"w\">    </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"gr\">sorry</span>\n<span class=\"k\">qed</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Incidently, I would like to ask about the difference between \"rule\" and \"intro\". Sometimes \"intro thm\" works but \"rule thm\" does not. Why is the case?</p>",
        "id": 486692050,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1733595222
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"233198\">Mathias Fleury</span> <a href=\"#narrow/channel/238552-Beginner-Questions/topic/Why.20unfolding.20Bex_def.2C.20bex_triv.20does.20not.20work.20here.3F/near/486683783\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"754515\">Yiming Xu</span> <a href=\"#narrow/channel/238552-Beginner-Questions/topic/Why.20unfolding.20Bex_def.2C.20bex_triv.20does.20not.20work.20here.3F/near/486682574\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"233198\">Mathias Fleury</span> <a href=\"#narrow/channel/238552-Beginner-Questions/topic/Why.20unfolding.20Bex_def.2C.20bex_triv.20does.20not.20work.20here.3F/near/486681304\">said</a>:</p>\n<blockquote>\n<p>Side remark 2: unfolding is <em>not</em> what you want. You want to replace <code>∃x. P x ==&gt; thesis</code> by <code>!!x. P x ==&gt; thesis</code>. This is not something unfolding can do (not equivalence preserving).</p>\n</blockquote>\n<p>I think this is \"((?x. P x) ==&gt; ?thesis)\\equiv (!!x. P x ==&gt; ?thesis)\", so we can retrieve an equivalence.</p>\n</blockquote>\n<p>Yeah you are right that it is equivalent, but the scope of <code>x</code> changes from only <code>P x</code> to the entire formula.</p>\n</blockquote>\n<p>Yes, you can omit the brackets because the meta implication separates its LHS and RHS.</p>",
        "id": 486692151,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1733595317
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"754515\">Yiming Xu</span> <a href=\"#narrow/channel/238552-Beginner-Questions/topic/Why.20unfolding.20Bex_def.2C.20bex_triv.20does.20not.20work.20here.3F/near/486692050\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"714722\">irvin</span> <a href=\"#narrow/channel/238552-Beginner-Questions/topic/Why.20unfolding.20Bex_def.2C.20bex_triv.20does.20not.20work.20here.3F/near/486683734\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"233198\">Mathias Fleury</span> <a href=\"#narrow/channel/238552-Beginner-Questions/topic/Why.20unfolding.20Bex_def.2C.20bex_triv.20does.20not.20work.20here.3F/near/486683520\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"714722\">irvin</span> <a href=\"#narrow/channel/238552-Beginner-Questions/topic/Why.20unfolding.20Bex_def.2C.20bex_triv.20does.20not.20work.20here.3F/near/486682818\">said</a>:</p>\n<blockquote>\n<p>If you want an isar block you can also do something like<br>\nlemma\"∃x. P x\"<br>\nproof -<br>\n  fix x<br>\n  have \"P x\"<br>\n    by sorry<br>\n  then show \"∃x. P x\"<br>\n    by(rule exI)<br>\nqed</p>\n</blockquote>\n<p><code>obtain x where \"P x\"</code> is the syntax you are looking for.</p>\n</blockquote>\n<p>oh my bad yup mathias is right<br>\nfor clarification</p>\n<p><div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span>\n<span class=\"w\">  </span><span class=\"s\">\"∃x. P x ⟹ Q\"</span>\n<span class=\"k\">proof</span><span class=\"w\"> </span><span class=\"o\">-</span>\n<span class=\"w\">  </span><span class=\"k\">assume</span><span class=\"w\"> </span><span class=\"s\">\"∃x. P x\"</span>\n<span class=\"w\">  </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"k\">obtain</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"kp\">where</span><span class=\"w\"> </span><span class=\"s\">\"P x\"</span><span class=\"w\"> </span><span class=\"ow\">..</span>\n\n<span class=\"w\">  </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"s\">\"Q\"</span>\n<span class=\"w\">    </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"gr\">sorry</span>\n<span class=\"k\">qed</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Incidently, I would like to ask about the difference between \"rule\" and \"intro\". Sometimes \"intro thm\" works but \"rule thm\" does not. Why is the case?</p>\n</blockquote>\n<p>IIRC the main difference comes from the handling of the facts in the context: <code>using YY apply (rule X)</code> requires X to generate an assumption that can be matched with <code>YY</code></p>",
        "id": 486692666,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1733595774
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"233198\">Mathias Fleury</span> <a href=\"#narrow/channel/238552-Beginner-Questions/topic/Why.20unfolding.20Bex_def.2C.20bex_triv.20does.20not.20work.20here.3F/near/486692666\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"754515\">Yiming Xu</span> <a href=\"#narrow/channel/238552-Beginner-Questions/topic/Why.20unfolding.20Bex_def.2C.20bex_triv.20does.20not.20work.20here.3F/near/486692050\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"714722\">irvin</span> <a href=\"#narrow/channel/238552-Beginner-Questions/topic/Why.20unfolding.20Bex_def.2C.20bex_triv.20does.20not.20work.20here.3F/near/486683734\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"233198\">Mathias Fleury</span> <a href=\"#narrow/channel/238552-Beginner-Questions/topic/Why.20unfolding.20Bex_def.2C.20bex_triv.20does.20not.20work.20here.3F/near/486683520\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"714722\">irvin</span> <a href=\"#narrow/channel/238552-Beginner-Questions/topic/Why.20unfolding.20Bex_def.2C.20bex_triv.20does.20not.20work.20here.3F/near/486682818\">said</a>:</p>\n<blockquote>\n<p>If you want an isar block you can also do something like<br>\nlemma\"∃x. P x\"<br>\nproof -<br>\n  fix x<br>\n  have \"P x\"<br>\n    by sorry<br>\n  then show \"∃x. P x\"<br>\n    by(rule exI)<br>\nqed</p>\n</blockquote>\n<p><code>obtain x where \"P x\"</code> is the syntax you are looking for.</p>\n</blockquote>\n<p>oh my bad yup mathias is right<br>\nfor clarification</p>\n<p><div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span>\n<span class=\"w\">  </span><span class=\"s\">\"∃x. P x ⟹ Q\"</span>\n<span class=\"k\">proof</span><span class=\"w\"> </span><span class=\"o\">-</span>\n<span class=\"w\">  </span><span class=\"k\">assume</span><span class=\"w\"> </span><span class=\"s\">\"∃x. P x\"</span>\n<span class=\"w\">  </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"k\">obtain</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"kp\">where</span><span class=\"w\"> </span><span class=\"s\">\"P x\"</span><span class=\"w\"> </span><span class=\"ow\">..</span>\n\n<span class=\"w\">  </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"s\">\"Q\"</span>\n<span class=\"w\">    </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"gr\">sorry</span>\n<span class=\"k\">qed</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Incidently, I would like to ask about the difference between \"rule\" and \"intro\". Sometimes \"intro thm\" works but \"rule thm\" does not. Why is the case?</p>\n</blockquote>\n<p>IIRC the main difference comes from the handling of the facts in the context: <code>using YY apply (rule X)</code> requires X to generate an assumption that can be matched with <code>YY</code></p>\n</blockquote>\n<p>So, in the case that there is no assumption in the context at all, does it mean that I cannot use <code>rule</code> at all?</p>",
        "id": 486711956,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1733611922
    },
    {
        "content": "<p>You can. But <em>if</em> you have one, it must match.</p>",
        "id": 486740716,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1733639174
    },
    {
        "content": "<p>Try this with and without the <code>using P</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span>\n<span class=\"w\">  </span><span class=\"kp\">assumes</span><span class=\"w\"> </span><span class=\"n\">P</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"∃x. P x\"</span>\n<span class=\"w\">  </span><span class=\"kp\">shows</span><span class=\"w\"> </span><span class=\"s\">\"Q ⟶ Q\"</span>\n<span class=\"w\">  </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">P</span>\n<span class=\"w\">  </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">rule</span><span class=\"w\"> </span><span class=\"n\">impI</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 486740781,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1733639243
    },
    {
        "content": "<p>And then replace the <code>rule</code> by <code>intro</code> with the <code>using P</code></p>",
        "id": 486740797,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1733639271
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"233198\">Mathias Fleury</span> <a href=\"#narrow/channel/238552-Beginner-Questions/topic/Why.20unfolding.20Bex_def.2C.20bex_triv.20does.20not.20work.20here.3F/near/486740781\">said</a>:</p>\n<blockquote>\n<p>Try this with and without the <code>using P</code>:</p>\n<p><div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span>\n<span class=\"w\">  </span><span class=\"kp\">assumes</span><span class=\"w\"> </span><span class=\"n\">P</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"∃x. P x\"</span>\n<span class=\"w\">  </span><span class=\"kp\">shows</span><span class=\"w\"> </span><span class=\"s\">\"Q ⟶ Q\"</span>\n<span class=\"w\">  </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">P</span>\n<span class=\"w\">  </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">rule</span><span class=\"w\"> </span><span class=\"n\">impI</span><span class=\"o\">)</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>With <code>using P</code> it does not work, it works only without <code>using P</code>.<br>\nI guess it it because with the P the goal is <code>(?x. P x) ==&gt; Q --&gt; Q</code>, so the top level is a <code>==&gt;</code>, not <code>--&gt;</code>, so it does not find a match. (let me rethink.)</p>",
        "id": 486741256,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1733639718
    },
    {
        "content": "<p>And for intro, both with and without P works.</p>",
        "id": 486741335,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1733639764
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"754515\">Yiming Xu</span> <a href=\"#narrow/channel/238552-Beginner-Questions/topic/Why.20unfolding.20Bex_def.2C.20bex_triv.20does.20not.20work.20here.3F/near/486741256\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"233198\">Mathias Fleury</span> <a href=\"#narrow/channel/238552-Beginner-Questions/topic/Why.20unfolding.20Bex_def.2C.20bex_triv.20does.20not.20work.20here.3F/near/486740781\">said</a>:</p>\n<blockquote>\n<p>Try this with and without the <code>using P</code>:</p>\n<p><div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span>\n<span class=\"w\">  </span><span class=\"kp\">assumes</span><span class=\"w\"> </span><span class=\"n\">P</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"∃x. P x\"</span>\n<span class=\"w\">  </span><span class=\"kp\">shows</span><span class=\"w\"> </span><span class=\"s\">\"Q ⟶ Q\"</span>\n<span class=\"w\">  </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">P</span>\n<span class=\"w\">  </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">rule</span><span class=\"w\"> </span><span class=\"n\">impI</span><span class=\"o\">)</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>With <code>using P</code> it does not work, it works only without <code>using P</code>.<br>\nI guess it it because with the P the goal is <code>(?x. P x) ==&gt; Q --&gt; Q</code>, so the top level is a <code>==&gt;</code>, not <code>--&gt;</code>, so it does not find a match. (let me rethink.)</p>\n</blockquote>\n<p>No that is not it. <code>Q --&gt; Q</code> is transformed by rule into <code>Q ==&gt; Q</code>. So rule is now checking if <code>(?x. P x)</code> matches the first goal: it does not, so it is failing.</p>\n<p>Here is a working example:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span>\n<span class=\"w\">  </span><span class=\"kp\">assumes</span><span class=\"w\"> </span><span class=\"n\">P</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"∃x. P x\"</span>\n<span class=\"w\">  </span><span class=\"kp\">shows</span><span class=\"w\"> </span><span class=\"s\">\"(∃x. P x) ⟶ (∃x. P x)\"</span>\n<span class=\"w\">  </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">P</span>\n<span class=\"w\">  </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">rule</span><span class=\"w\"> </span><span class=\"n\">impI</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 486741509,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1733639984
    },
    {
        "content": "<p>So, for using rule, with<br>\nimpI: <code>(P ⟹ Q) ⟹ P ⟶ Q</code><br>\non the goal<br>\n<code>(?x. P x) ==&gt; Q --&gt; Q</code><br>\nWe want the application of the rule impI to generate an assumption that matches <code>(?x. P x)</code>.<br>\nBut the application will generate the assumption <code>Q</code>.</p>",
        "id": 486741511,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1733639987
    },
    {
        "content": "<p>And Q is not an existential.</p>",
        "id": 486741574,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1733640033
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"233198\">Mathias Fleury</span> <a href=\"#narrow/channel/238552-Beginner-Questions/topic/Why.20unfolding.20Bex_def.2C.20bex_triv.20does.20not.20work.20here.3F/near/486741509\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"754515\">Yiming Xu</span> <a href=\"#narrow/channel/238552-Beginner-Questions/topic/Why.20unfolding.20Bex_def.2C.20bex_triv.20does.20not.20work.20here.3F/near/486741256\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"233198\">Mathias Fleury</span> <a href=\"#narrow/channel/238552-Beginner-Questions/topic/Why.20unfolding.20Bex_def.2C.20bex_triv.20does.20not.20work.20here.3F/near/486740781\">said</a>:</p>\n<blockquote>\n<p>Try this with and without the <code>using P</code>:</p>\n<p><div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span>\n<span class=\"w\">  </span><span class=\"kp\">assumes</span><span class=\"w\"> </span><span class=\"n\">P</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"∃x. P x\"</span>\n<span class=\"w\">  </span><span class=\"kp\">shows</span><span class=\"w\"> </span><span class=\"s\">\"Q ⟶ Q\"</span>\n<span class=\"w\">  </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">P</span>\n<span class=\"w\">  </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">rule</span><span class=\"w\"> </span><span class=\"n\">impI</span><span class=\"o\">)</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>With <code>using P</code> it does not work, it works only without <code>using P</code>.<br>\nI guess it it because with the P the goal is <code>(?x. P x) ==&gt; Q --&gt; Q</code>, so the top level is a <code>==&gt;</code>, not <code>--&gt;</code>, so it does not find a match. (let me rethink.)</p>\n</blockquote>\n<p>No that is not it. <code>Q --&gt; Q</code> is transformed by rule into <code>Q ==&gt; Q</code>. So rule is now checking if <code>(?x. P x)</code> matches the first goal: it does not, so it is failing.</p>\n<p>Here is a working example:</p>\n<p><div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span>\n<span class=\"w\">  </span><span class=\"kp\">assumes</span><span class=\"w\"> </span><span class=\"n\">P</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"∃x. P x\"</span>\n<span class=\"w\">  </span><span class=\"kp\">shows</span><span class=\"w\"> </span><span class=\"s\">\"(∃x. P x) ⟶ (∃x. P x)\"</span>\n<span class=\"w\">  </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">P</span>\n<span class=\"w\">  </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">rule</span><span class=\"w\"> </span><span class=\"n\">impI</span><span class=\"o\">)</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Aha I think that is what I got just a few seconds ago! Now I think I get it!</p>",
        "id": 486741616,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1733640083
    },
    {
        "content": "<p>Thanks a lot! These comparisons are always helpful.</p>",
        "id": 486741629,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1733640101
    }
]