[
    {
        "content": "<p>I have a definition that uses \"Least\" but I cannot get a witness from it. Here's a little repro that hopefully should get to the core of my problem, it depends on the LTS package from the AFP.</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">theory</span><span class=\"w\"> </span><span class=\"n\">HanoiRepro</span>\n<span class=\"w\">  </span><span class=\"kp\">imports</span><span class=\"w\"> </span><span class=\"n\">Main</span><span class=\"w\"> </span><span class=\"s\">\"Labeled_Transition_Systems.LTS\"</span>\n<span class=\"k\">begin</span>\n\n<span class=\"k\">context</span><span class=\"w\"> </span><span class=\"n\">LTS</span>\n<span class=\"k\">begin</span>\n\n<span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"'state ⇒ 'state ⇒ nat\"</span><span class=\"w\"> </span><span class=\"kp\">where</span>\n<span class=\"s\">\"T p q = (LEAST i. ∃ls. (length ls = i ∧ (p, ls, q) ∈ trans_star))\"</span>\n\n<span class=\"kn\">lemma</span>\n<span class=\"w\">  </span><span class=\"kp\">assumes</span><span class=\"w\"> </span><span class=\"n\">h</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"1 &lt; n\"</span><span class=\"w\"> </span><span class=\"s\">\"p ≠ q\"</span>\n<span class=\"w\">  </span><span class=\"kp\">shows</span><span class=\"w\"> </span><span class=\"n\">T_n</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"T p q = ((2 * (T p q)) + 1)\"</span>\n<span class=\"k\">proof</span><span class=\"w\"> </span><span class=\"o\">-</span>\n<span class=\"w\">  </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"n\">upper_bound</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"T p q ≤ 2 * T p q + 1\"</span>\n<span class=\"w\">  </span><span class=\"k\">proof</span><span class=\"w\"> </span><span class=\"o\">-</span>\n<span class=\"w\">    </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"n\">witness_for_T</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"∃ls. (T p q = length ls ∧ (p, ls, q) ∈ trans_star)\"</span><span class=\"w\"> </span><span class=\"gr\">sorry</span>\n<span class=\"w\">    </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">thesis</span><span class=\"w\"> </span><span class=\"gr\">sorry</span>\n<span class=\"w\">  </span><span class=\"k\">qed</span>\n<span class=\"w\">  </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"n\">lower_bound</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"T p q ≥ 2 * T p q + 1\"</span><span class=\"w\"> </span><span class=\"gr\">sorry</span>\n<span class=\"w\">  </span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">thesis</span><span class=\"w\"> </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">lower_bound</span><span class=\"w\"> </span><span class=\"n\">upper_bound</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">linarith</span>\n<span class=\"k\">qed</span>\n\n<span class=\"k\">end</span>\n\n<span class=\"k\">end</span>\n</code></pre></div>\n<p>Basically, I want to prove a recurrence relation over the function T (more or less following the outline on the proof wiki for the towers of hanoi proof: <a href=\"https://proofwiki.org/wiki/Tower_of_Hanoi#Setting_up_a_Recurrence_Rule\">https://proofwiki.org/wiki/Tower_of_Hanoi#Setting_up_a_Recurrence_Rule</a>). My plan was to, given some \"T a b\", get the \"ls\" associated with that and somehow convince isabelle of the lower and upper bounds.</p>\n<p>My question is two-fold: </p>\n<ol>\n<li>On a practical level, how do I get a witness for the value that T returns? This essentially boils down to proving the witness_for_t fact in the example, I think.</li>\n<li>On a more theoretical level, is this the right way to go? Should I reformulate my T, or maybe not use \"Least\" at all?</li>\n</ol>\n<p>For completeness, the T I'm using in the actual theory development looks like this:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"nat ⇒ location ⇒ location ⇒ nat\"</span><span class=\"w\"> </span><span class=\"kp\">where</span>\n<span class=\"s\">\"T n a b = (LEAST i. ∃ms. (length ms = i ∧ ([0..&lt;n] ⊣ a, ms, [0..&lt;n] ⊣ b) ∈ hanoi⇧*))\"</span>\n</code></pre></div>\n<p>Where <code>([0..&lt;n] ⊣ a, ms, [0..&lt;n] ⊣ b) ∈ hanoi⇧*</code> means, a full tower on location a, using moves ms, to a full tower on location b, is an actual trace in the game of hanoi, implying ordered stacks and non-duplicate rings. I am not sure yet how I will prove something like \"we <em>must</em> have moved the n−1 disks above it onto a vacant peg\", but at least I'm pretty sure all the information I need is in the \"hanoi⇧*\" relation... I think at this point I might have to look at an existing formalization...!</p>\n<p>The only example I've been able to find is <a href=\"https://lawrencecpaulson.github.io/2022/06/08/baby-descriptions.html\">https://lawrencecpaulson.github.io/2022/06/08/baby-descriptions.html</a>, but that did not work for me. \"try\" just never completed the witness_for_t proof :/</p>",
        "id": 500009623,
        "sender_full_name": "Bob Rubbens",
        "timestamp": 1739711386
    },
    {
        "content": "<p>As usual, I'll refer to this thread: <a href=\"#narrow/channel/238552-Beginner-Questions/topic/Proving.20lemma.20with.20definite.20description/near/291315915\">https://isabelle.zulipchat.com/#narrow/channel/238552-Beginner-Questions/topic/Proving.20lemma.20with.20definite.20description/near/291315915</a></p>",
        "id": 500012196,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1739713568
    },
    {
        "content": "<p>The pendant of <code>(LEAST i. P i)</code> is first <code>∃i. P i</code>. This gives you a witness meaning that at least one element exists (depending of the type<code>i</code>, that also means that there is a least)</p>",
        "id": 500012236,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1739713651
    },
    {
        "content": "<blockquote>\n<p>As usual, I'll refer to this thread</p>\n</blockquote>\n<p>That is helpful, thank you!</p>\n<blockquote>\n<p>The pendant of <code>(LEAST i. P i)</code> is first <code>∃i. P i</code>.</p>\n</blockquote>\n<p>This is also a useful tip. Somehow I could only get a proof for this using <code>sledgehammer</code>. <code>try</code> would not find it for some reason. I'm guessing I have a few declarations that should be definitions instead of functions... Proof search has been deteriorating anyway.</p>",
        "id": 500038642,
        "sender_full_name": "Bob Rubbens",
        "timestamp": 1739734773
    }
]