[
    {
        "content": "<p>After applying a <code>frule</code>, the proof state has an 'anonymous type conversion' that looks like <code>(?A18::'a ⇒ 'A ) a</code> in the consequent of the goal, which makes it look like i have to prove something impossible (it would be a type error). What could this mean?</p>",
        "id": 364866719,
        "sender_full_name": "Naso",
        "timestamp": 1686319304
    },
    {
        "content": "<p>it is a variable that you have to instantiate. From your comment, I assume that you wand the identity here?</p>",
        "id": 365439566,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1686546208
    },
    {
        "content": "<p>If this is a goal that you think is \"wrong\" but you are confident that your statement is correct and the rules you are applying are also correct then one possibility is also simply that your application of <code>frule</code> picked a different unifier from the one you had in mind. Proof methods like <code>rule</code>, <code>frule</code>, etc. perform higher order unification, and sometimes there are many different unifiers and it can be hard to predict which one will be picked.</p>\n<p>You can backtrack through the other unifiers by putting one or more invocations of <code>back</code> after your <code>frule</code> application. But note that use of <code>back</code> is considered appropriate for experiments/debugging only because it is quite brittle. Also, in general, I would say that using something as low-level as <code>frule</code> in proofs is somewhat unusual these days. For exploration (i.e. \"why does this proof not go through?\", \"how can I proceed here?\") it's fine, but it is not rarely part of a finished proof. Of course, I don't know what your use case is and it might be perfectly appropriate for what you are doing – that's for you to judge. <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 365806790,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1686649795
    },
    {
        "content": "<p>Also, it is my impression that working explicitly on goals with schematic variables in them is generally something people don't do much anymore these days. The automation sometimes interacts with them in unpredictable ways, it is often not nice to deal with them in an Isar proof, and there is also no easy way to instantiate them manually; you always have to do it implicitly using unification.</p>\n<p>Again, I'm sure some people will disagree with me and say that they do that sort of thing all the time, and I'm sure that there are circumstances where it makes sense. But since this is the \"Beginner Questions\" section I just wanted to point out to any beginners reading this that in my opinion, this is not really the mode in which most people use Isabelle these days.</p>",
        "id": 365807647,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1686649991
    },
    {
        "content": "<p>As for your concrete problem, it would be much easier to give you a concrete answer that actually helps you if you could provide more context on what you are doing. For example: a minimum working example that we can \"play around with\".</p>",
        "id": 365807918,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1686650046
    }
]