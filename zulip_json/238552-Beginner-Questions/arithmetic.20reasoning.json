[
    {
        "content": "<p>Sorry, I always cannot get the point why isabelle cannot reason such a easy equation:</p>\n<div class=\"codehilite\"><pre><span></span><code>lemma delta4:\n  fixes a b c ::real\n  assumes&quot;⋀t . a * t^2 + b * t + c ≥ 0&quot;\n  shows&quot;b^2 ≤ 4 * a * c&quot;\nproof cases\n  assume &quot;a = 0&quot;\n  with assms have&quot;⋀t . b * t + c ≥ 0&quot;\n    by auto\n  have &quot;b ≠ 0 ⟹ ∃t . b * t + c &lt; 0&quot;\n  proof\n    fix b c t::real\n    assume &quot;b ≠ 0&quot;\n    hence &quot;t = (-1 - c) / b ⟷ b * t = -1 - c&quot;\n      by auto\n</code></pre></div>",
        "id": 236340482,
        "sender_full_name": "zibo yang",
        "timestamp": 1619531638
    },
    {
        "content": "<p>What you need to understand is that <code>auto</code> is not magic. It is not an automated theorem prover that uses everything at its disposal to prove what you give to it. It is a tool that uses only the facts that you give to it, plus various standard techniques (most importantly rewriting with the simplifier).</p>\n<p>Your question is basically how to do arithmetic reasoning. The answer is to add suitable rewrite rules. There are a number of collections of such rewrite rules for arithmetic reasoning:</p>\n<ul>\n<li><code>algebra_simps</code> contains basic algebraic facts for rings, such as commutativity, associativity, distributivity.</li>\n<li><code>field_simps</code> additionally contains facts about division in fields and performs e.g. cross-multiplication <em>but only</em> when it can show that the divisor is non-zero.</li>\n<li><code>divide_simps</code> does a bit less than <code>field_simps</code> (notably no distributivity) and unlike <code>field_simps</code> does a case distinction for the zeroness of the divisor. This can sometimes make the automation work better, but for most cases I would just go with <code>field_simps</code>.</li>\n</ul>\n<p>So in your case, the statement should go through with <code>by (auto simp: field_simps)</code>.</p>",
        "id": 236341325,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1619531954
    },
    {
        "content": "<p>As a side note, you are not allowed to do <code>fix b c t</code> in that subproof. That would only be allowed if these variables were universally quantified, which they are not. Plus you're not allowed to fix <code>t</code>, rather you have to provide a suitable value for <code>t</code>. In any case, I am not sure what you are trying to achieve with that existential statement anyway.</p>",
        "id": 236341707,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1619532083
    },
    {
        "content": "<p>(Or if you're lazy like me, just do <code>try</code> or <code>sledgehammer</code> and let Isabelle do the work for you :P)</p>",
        "id": 236343184,
        "sender_full_name": "Max Nowak",
        "timestamp": 1619532612
    },
    {
        "content": "<p>Thanks, but what should I do to prove the existence of t since it fails at blast:</p>\n<div class=\"codehilite\"><pre><span></span><code> have &quot;b ≠ 0 ⟹ ∃t . b * t + c &lt; 0&quot;\n  proof-\n    assume &quot;b ≠ 0&quot;\n    hence &quot;(t1::real) = (-1 - c) / b ⟷ b * t1 + c = -1&quot;\n      by (simp add: field_simps)\n    thus &quot;∃t. b * t + c &lt; 0&quot;\n      by blast\n  qed\n</code></pre></div>",
        "id": 236344270,
        "sender_full_name": "zibo yang",
        "timestamp": 1619532976
    },
    {
        "content": "<p>Thanks, I get the prove</p>",
        "id": 236347703,
        "sender_full_name": "zibo yang",
        "timestamp": 1619534070
    }
]