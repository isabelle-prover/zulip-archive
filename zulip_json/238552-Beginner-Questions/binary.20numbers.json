[
    {
        "content": "<p>Hello. :) I'm trying to make a little theory of binary numbers and I could use some help. </p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">datatype</span> <span class=\"n\">bin</span> <span class=\"o\">=</span> <span class=\"n\">Z</span> <span class=\"o\">|</span> <span class=\"n\">Q</span> <span class=\"n\">bin</span> <span class=\"o\">|</span> <span class=\"n\">I</span> <span class=\"n\">bin</span>\n\n<span class=\"k\">fun</span> <span class=\"n\">nb</span> <span class=\"o\">::</span> <span class=\"s\">\"bin ⇒ nat\"</span> <span class=\"kp\">where</span>\n  <span class=\"s\">\"nb   Z = 0\"</span>\n<span class=\"o\">|</span> <span class=\"s\">\"nb (Q x) = 2 * (nb x)\"</span>\n<span class=\"o\">|</span> <span class=\"s\">\"nb (I x) = 2 * (nb x) + 1\"</span>\n\n<span class=\"k\">fun</span> <span class=\"n\">bn</span> <span class=\"o\">::</span> <span class=\"s\">\"nat ⇒ bin\"</span> <span class=\"kp\">where</span>\n  <span class=\"s\">\"bn 0 = Z\"</span>\n<span class=\"o\">|</span> <span class=\"s\">\"bn (Suc 0) = (I Z)\"</span>\n<span class=\"o\">|</span> <span class=\"s\">\"bn x = (if even x then Q (bn (x div 2))</span>\n<span class=\"s\">           else I (bn ((x-1) div 2)))\"</span>\n</code></pre></div>\n<ol>\n<li>\n<p>I want to use the constructors <code>O x</code> to represent the operation \"2<em>x\" and <code>I x</code> to represent \"1+2</em>x\", but <code>O</code> is already defined as an infix operator, so I'm using <code>Q x</code>... Can I hide the pre-existing <code>O</code> ?</p>\n</li>\n<li>\n<p>The syntax of data constructors forces me to write by binary numbers backwards : to write the value <code>0b1010</code>, I have to say <code>Q I Q I Z</code> ... Is there a way for me to define a lexer rule that lets me write something like <code>0b1010</code> (or at least arrange the bits in the traditional order)?</p>\n</li>\n</ol>",
        "id": 243452762,
        "sender_full_name": "tangentstorm",
        "timestamp": 1624315652
    },
    {
        "content": "<p>Oh wow it's even worse. I have to write it with a set of parens for each bit. :/</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"s\">\"10 = nb(Q(I(Q(I Z))))\"</span> <span class=\"k\">by</span> <span class=\"n\">simp</span>\n</code></pre></div>",
        "id": 243453702,
        "sender_full_name": "tangentstorm",
        "timestamp": 1624316147
    },
    {
        "content": "<p>Any reason not to use the existing definitions?</p>\n<div class=\"codehilite\"><pre><span></span><code>lemma\n  ‹0b00011 = 3› (*binary*)\n  ‹0x0000F = 15› (*hexa*)\n  by simp_all\n</code></pre></div>",
        "id": 243471529,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1624336540
    },
    {
        "content": "<p>Well, two reasons. :) 1. I didn't know that was already in the lexer, :) and 2. I want a syntax for constructing the data structure <code>I(I(Q(Q(Q Z))))</code> not the number 3.</p>",
        "id": 243474924,
        "sender_full_name": "tangentstorm",
        "timestamp": 1624341589
    },
    {
        "content": "<ol>\n<li>Hiding the notation:</li>\n</ol>\n<div class=\"codehilite\"><pre><span></span><code>no_notation relcomp (infixr &quot;O&quot; 75)\n</code></pre></div>",
        "id": 243475182,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1624341885
    },
    {
        "content": "<p>But I don't know if there is a solution for 2…</p>",
        "id": 243475226,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1624341961
    },
    {
        "content": "<p>I would side-step the problem by converting a numeral to a <code>bin</code> using your <code>bn</code> function whenever needed.</p>",
        "id": 243475276,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1624341989
    },
    {
        "content": "<p>You should be able to create a syntax following the string syntax (<code>typ string</code> and control-click <code>string</code>). But that seems too much if you don't really use a lot of numbers…</p>",
        "id": 243475464,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1624342213
    },
    {
        "content": "<p>You may have a point there. I might do it just for the learning experience though. :)</p>",
        "id": 243475567,
        "sender_full_name": "tangentstorm",
        "timestamp": 1624342364
    },
    {
        "content": "<p>So it seems Isabelle already comes with a theory of binary numbers: <a href=\"https://isabelle.in.tum.de/repos/isabelle/file/7e2a9a8c2b85/src/HOL/Num.thy\">https://isabelle.in.tum.de/repos/isabelle/file/7e2a9a8c2b85/src/HOL/Num.thy</a></p>\n<p>Interestingly, it doesn't have a concept of zero (probably to avoid between 0b1, 0b01, 0b001  etc.)</p>",
        "id": 244005180,
        "sender_full_name": "tangentstorm",
        "timestamp": 1624699653
    }
]