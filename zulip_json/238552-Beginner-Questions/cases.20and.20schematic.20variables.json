[
    {
        "content": "<p>I am quite confused about the <code>cases</code> method. I want to specify some <code>case_names</code> for a lemma and then apply it to a goal using <code>cases</code>. However, <code>cases</code> either complains and does not apply the theorem or does not correctly assign the <code>?cases</code> schematic variables (I think). Any ideas if this an error on my side or the fault of <code>cases</code>?</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">theory</span> <span class=\"n\">Scratch</span>\n  <span class=\"kp\">imports</span> <span class=\"n\">Main</span>\n<span class=\"k\">begin</span>\n\n<span class=\"k\">consts</span> <span class=\"n\">P</span> <span class=\"o\">::</span> <span class=\"s\">\"'a ⇒ bool\"</span>\n<span class=\"k\">consts</span> <span class=\"n\">Q</span> <span class=\"o\">::</span> <span class=\"s\">\"'a ⇒ bool\"</span>\n<span class=\"k\">consts</span> <span class=\"n\">R</span> <span class=\"o\">::</span> <span class=\"s\">\"'a ⇒ 'a ⇒ bool\"</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">my_cases</span> <span class=\"o\">[</span><span class=\"n\">case_names</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">]:</span>\n  <span class=\"kp\">assumes</span> <span class=\"s\">\"P x\"</span>\n  <span class=\"kp\">and</span> <span class=\"s\">\"Q y\"</span>\n  <span class=\"kp\">shows</span> <span class=\"s\">\"R x y\"</span>\n  <span class=\"gr\">sorry</span>\n\n<span class=\"kn\">lemma</span> <span class=\"s\">\"R t1 t2\"</span>\n<span class=\"k\">proof</span> <span class=\"o\">(</span><span class=\"n\">cases</span> <span class=\"n\">rule</span><span class=\"o\">:</span> <span class=\"n\">my_cases</span><span class=\"o\">)</span>\n<span class=\"c\">(*the proof state correctly shows</span>\n<span class=\"c\">1. P t1</span>\n<span class=\"c\">2. Q t2</span>\n<span class=\"c\">*)</span>\n<span class=\"c\">(*the output panel suggests the following outline:*)</span>\n  <span class=\"k\">case</span> <span class=\"n\">a</span>\n  <span class=\"k\">then</span> <span class=\"k\">show</span> <span class=\"o\">?</span><span class=\"n\">thesis</span> <span class=\"gr\">sorry</span> <span class=\"c\">(*Failed to refine any pending goal*)</span>\n<span class=\"k\">next</span>\n  <span class=\"k\">case</span> <span class=\"n\">b</span>\n  <span class=\"k\">then</span> <span class=\"k\">show</span> <span class=\"o\">?</span><span class=\"n\">thesis</span> <span class=\"gr\">sorry</span>\n<span class=\"gr\">oops</span>\n\n<span class=\"kn\">lemma</span> <span class=\"s\">\"R t1 t2\"</span>\n<span class=\"k\">proof</span> <span class=\"o\">(</span><span class=\"n\">cases</span> <span class=\"n\">t1</span> <span class=\"n\">rule</span><span class=\"o\">:</span> <span class=\"n\">my_cases</span><span class=\"o\">)</span>\n<span class=\"kt\">print_cases</span>\n<span class=\"c\">(*Prints the following (note the schematic variable ?y)</span>\n<span class=\"c\">a:</span>\n<span class=\"c\">let \"?case\" = \"P t1\"</span>\n<span class=\"c\">b:</span>\n<span class=\"c\">let \"?case\" = \"Q ?y\"</span>\n<span class=\"c\">*)</span>\n  <span class=\"k\">case</span> <span class=\"n\">a</span>\n  <span class=\"k\">then</span> <span class=\"k\">show</span> <span class=\"o\">?</span><span class=\"k\">case</span> <span class=\"gr\">sorry</span> <span class=\"c\">(*this works*)</span>\n<span class=\"k\">next</span>\n  <span class=\"k\">case</span> <span class=\"n\">b</span>\n  <span class=\"k\">then</span> <span class=\"k\">show</span> <span class=\"o\">?</span><span class=\"k\">case</span> <span class=\"gr\">sorry</span> <span class=\"c\">(*Unbound schematic variable: ?case*)</span>\n<span class=\"gr\">oops</span>\n\n<span class=\"kn\">lemma</span> <span class=\"s\">\"R t1 t2\"</span>\n<span class=\"k\">proof</span> <span class=\"o\">(</span><span class=\"n\">cases</span> <span class=\"n\">t1</span> <span class=\"n\">t2</span> <span class=\"n\">rule</span><span class=\"o\">:</span> <span class=\"n\">my_cases</span><span class=\"o\">)</span> <span class=\"c\">(*Rule has fewer variables than instantiations given*)</span>\n<span class=\"gr\">oops</span>\n\n<span class=\"k\">end</span>\n</code></pre></div>",
        "id": 290373809,
        "sender_full_name": "Kevin Kappelmann",
        "timestamp": 1658409430
    },
    {
        "content": "<p>For your last example, directly instantiating the theorem works: </p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">proof</span> <span class=\"o\">(</span><span class=\"n\">cases</span> <span class=\"n\">rule</span><span class=\"o\">:</span> <span class=\"n\">my_cases</span><span class=\"o\">[</span><span class=\"n\">of</span> <span class=\"n\">t1</span> <span class=\"n\">t2</span><span class=\"o\">])</span>\n  <span class=\"k\">case</span> <span class=\"n\">a</span>\n  <span class=\"k\">then</span> <span class=\"k\">show</span> <span class=\"o\">?</span><span class=\"k\">case</span> <span class=\"gr\">sorry</span>\n<span class=\"k\">next</span>\n  <span class=\"k\">case</span> <span class=\"n\">b</span>\n  <span class=\"k\">then</span> <span class=\"k\">show</span> <span class=\"o\">?</span><span class=\"k\">case</span> <span class=\"gr\">sorry</span>\n<span class=\"k\">qed</span>\n</code></pre></div>\n<p>No idea why it won't accept the two instantiations directly, though.</p>",
        "id": 290374613,
        "sender_full_name": "Fabian Huch",
        "timestamp": 1658409857
    },
    {
        "content": "<p>It also works with</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">proof</span> <span class=\"o\">(</span><span class=\"n\">induction</span> <span class=\"n\">rule</span><span class=\"o\">:</span> <span class=\"n\">my_cases</span><span class=\"o\">)</span>\n  <span class=\"k\">case</span> <span class=\"n\">a</span>\n  <span class=\"k\">then</span> <span class=\"k\">show</span> <span class=\"o\">?</span><span class=\"k\">case</span> <span class=\"gr\">sorry</span>\n<span class=\"k\">next</span>\n  <span class=\"k\">case</span> <span class=\"n\">b</span>\n  <span class=\"k\">then</span> <span class=\"k\">show</span> <span class=\"o\">?</span><span class=\"k\">case</span> <span class=\"gr\">sorry</span>\n<span class=\"k\">qed</span>\n</code></pre></div>",
        "id": 290374642,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1658409872
    },
    {
        "content": "<p>My guess is that cases is only meant to add assumption, not to change the goal</p>",
        "id": 290374710,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1658409901
    },
    {
        "content": "<p>Yup. If it changes the goal, it's an induction rule. Compare e.g. something like <code>linorder_wlog</code>.</p>",
        "id": 290883764,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1658838550
    }
]