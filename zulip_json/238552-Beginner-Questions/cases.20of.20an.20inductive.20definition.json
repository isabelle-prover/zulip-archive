[
    {
        "content": "<p>inductive trc :: \"(conf ⇒ conf ⇒ bool) ⇒ (conf ⇒ conf ⇒ bool)\" for virtm :: \"conf ⇒ conf ⇒ bool\"<br>\n  where<br>\n    refl: \"trc virtm c c\" |<br>\n    step: \"virtm c d ⟹ (trc virtm) d e ⟹ (trc virtm) c e\"</p>\n<p>definition trcvm where \"trcvm = rtranclp vm\"</p>\n<p>definition trcvm' where \"trcvm' = trc vm\"</p>\n<p>notation trcvm' (infix \"-&gt;&gt;\" 80) </p>\n<p>lemma assumes \"(c -&gt; d)\" shows \"(c -&gt;&gt; d)\" <br>\nproof -<br>\n  have \"d -&gt;&gt; d\" using trc.refl trcvm'_def by simp<br>\n  then show \"?thesis\" using assms trc.step trcvm'_def by simp<br>\nqed</p>\n<p>lemma assumes \"c -&gt;&gt; d\" <br>\n      assumes \"d -&gt;&gt; e\"<br>\n      shows \"c -&gt;&gt; e\"<br>\nproof (induct  rule: trc.induct) </p>\n<p>I used my own transitive closure definition as I was better able to refer to its parts than of the more professional HOL rtanclp predicate definition.</p>\n<p>I stuck at how to properly set up induction for the \"c -&gt;&gt; e\" goal. Do you have an advice?</p>",
        "id": 207969798,
        "sender_full_name": "Gergely Buday",
        "timestamp": 1598365715
    },
    {
        "content": "<p>I can give you the answer:</p>\n<div class=\"codehilite\"><pre><span></span><code>lemmas trcvm&#39;_induct =\n  trc.induct[of vm, unfolded trcvm&#39;_def[symmetric], consumes 1, case_names refl stop]\n\nlemma assumes &quot;c -&gt;&gt; d&quot;\nassumes &quot;d -&gt;&gt; e&quot;\nshows &quot;c -&gt;&gt; e&quot;\n  using assms\nproof (induct rule: trcvm&#39;_induct)\n</code></pre></div>\n\n\n<p>but it would be more interesting for you to follow the Isabelle part of the concrete semantics where you would learn that you have to unfold definition before doing induction or define your own induction principle (as I do here)</p>\n<p>EDIT: I forgot to name the cases</p>",
        "id": 207980371,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1598370413
    },
    {
        "content": "<p>Thanks. From your solution it seems that this is far from trivial and so I better asked this.</p>",
        "id": 208055882,
        "sender_full_name": "Gergely Buday",
        "timestamp": 1598422142
    },
    {
        "content": "<p>The easier solution is</p>\n<div class=\"codehilite\"><pre><span></span><code>lemma assumes &quot;c -&gt;&gt; d&quot;\nassumes &quot;d -&gt;&gt; e&quot;\nshows &quot;c -&gt;&gt; e&quot;\n  using assms unfolding trcvm&#39;_def\nproof (induct rule: trc.induct)\n</code></pre></div>\n\n\n<p>(or variants with unfolding only one of the <code>-&gt;&gt;</code> symbols)</p>",
        "id": 208060854,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1598427389
    },
    {
        "content": "<p>This is more close to what I thought I should do: \"unpack the definition of -&gt;&gt; and prove by induction\". I see that I should unpack, i.e. unfold the definition of trcvm' instead and then I can use trc's induction rule directly, without the square bracket magic.</p>",
        "id": 208061639,
        "sender_full_name": "Gergely Buday",
        "timestamp": 1598428024
    }
]