[
    {
        "content": "<p>I am using Eisbach to write a method that uses rules to add premises. Using it repeatedly will insert duplicate premises and I also don't want the method to be applicable multiple times without changes in between applications,  so that for example <code>method+</code> doesn't infinite loop. </p>\n<p>I've come up with</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">dupl</span><span class=\"o\">:</span> <span class=\"s\">\"X ⟹ (X ⟹ Y) ⟹ Y\"</span> <span class=\"k\">by</span> <span class=\"n\">simp</span>\n\n<span class=\"n\">method</span> <span class=\"n\">thin_duplicate</span> <span class=\"o\">=</span>\n  <span class=\"n\">match</span> <span class=\"n\">premises</span> <span class=\"kp\">in</span> <span class=\"n\">P</span><span class=\"o\">[</span><span class=\"n\">thin</span><span class=\"o\">]:</span> <span class=\"n\">Q</span> <span class=\"kp\">for</span> <span class=\"n\">Q</span> <span class=\"err\">⇒</span>\n  <span class=\"err\">‹</span><span class=\"n\">match</span> <span class=\"n\">premises</span> <span class=\"kp\">in</span> <span class=\"n\">Q</span> <span class=\"err\">⇒</span> <span class=\"err\">‹</span><span class=\"n\">rule</span> <span class=\"n\">dupl</span><span class=\"o\">[</span><span class=\"n\">OF</span> <span class=\"n\">P</span><span class=\"o\">]</span><span class=\"err\">››</span>\n\n<span class=\"n\">method</span> <span class=\"n\">thin_all_duplicates</span> <span class=\"o\">=</span> <span class=\"n\">thin_duplicate</span><span class=\"o\">+</span>\n\n<span class=\"n\">method</span> <span class=\"n\">my_method</span> <span class=\"o\">=</span> <span class=\"n\">changed</span> <span class=\"err\">‹</span><span class=\"n\">my_method'</span><span class=\"err\">›</span>\n</code></pre></div>\n<p>The problem is that <code>thin_all_duplicates</code> does not preserve the order of premises. Is there a way to remove duplicate premises in a way that does not reorder the existing ones? Or alternatively, a way to check whether premises changed independently of their order?</p>\n<p>Note that I know next to no ML or even Isabelle/ML.</p>\n<p>edit: I also just noticed that <code>thin_all_duplicates</code> sometimes infinite loops, but I haven't figured out why yet. It looks like <code>[thin]</code> sometimes removes only one occurrence of the premise, but sometimes also both, which is why I introduced the <code>dupl</code> rule in the first place.</p>",
        "id": 288062875,
        "sender_full_name": "Leander Behr",
        "timestamp": 1656610789
    },
    {
        "content": "<p>I think one way to solve this would be to use <code>thin_tac</code> within <code>thin_duplicate</code>, as it appears to consistently remove only one premise. But I couldn't find a way to provide a pattern to it. It appears that it takes neither terms nor facts. That is neither <code>method X  for t = thin_tac t</code> nor <code>method X uses t = thin_tac t</code> work.</p>",
        "id": 288156014,
        "sender_full_name": "Leander Behr",
        "timestamp": 1656675140
    }
]