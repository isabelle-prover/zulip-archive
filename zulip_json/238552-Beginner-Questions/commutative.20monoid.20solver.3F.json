[
    {
        "content": "<p>Hi, I am wondering if there is a decision procedure for deciding whether two expressions from the same commutative monoid are equal? in a sense, it is also a permutation decision procedure. if not, how do I write such procedure?</p>",
        "id": 296685362,
        "sender_full_name": "Jason Hu",
        "timestamp": 1662060307
    },
    {
        "content": "<p>What is your setting here? Are you using a typeclass like <code>comm_monoid_mult</code> or are you in HOL-Algebra?</p>",
        "id": 296691265,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1662062597
    },
    {
        "content": "<p>In either case, isn't this decidable simply be adding the ac rules (associativity and commutativity) and the neutral element rules to the simp set and running the simplifier?</p>",
        "id": 296691443,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1662062656
    },
    {
        "content": "<p>is that this easy? the simplifier can solve this?</p>",
        "id": 296733675,
        "sender_full_name": "Jason Hu",
        "timestamp": 1662082114
    },
    {
        "content": "<p>yes: the simplifer (with AC) will reorder terms in canonical form (getting <code>a + b + c + ...</code> where a is larger (for a certain order) than b, itself larger than c and so one). So something like <code>simp add: ac_simps</code> or similar should work</p>",
        "id": 296764130,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1662103587
    },
    {
        "content": "<p>Or just <code>simp add: algebra_simps</code>.</p>",
        "id": 296858037,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1662137347
    }
]