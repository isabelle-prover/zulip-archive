[
    {
        "content": "<p>I have an induction proof where I want to induct over <code>i</code> while keeping the forall quantification of <code>list</code>. how do I do this?</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">nth_opt</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">‹['a list, nat] ⇒ 'a option›</span><span class=\"w\"> </span><span class=\"kp\">where</span>\n<span class=\"w\">  </span><span class=\"s\">‹nth_opt [] _ = None›</span><span class=\"w\"> </span><span class=\"o\">|</span>\n<span class=\"w\">  </span><span class=\"s\">‹nth_opt (head # tail) 0 = Some head›</span><span class=\"w\"> </span><span class=\"o\">|</span>\n<span class=\"w\">  </span><span class=\"s\">‹nth_opt (head # tail) n = nth_opt tail (n-1)›</span>\n\n<span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">nth_opt_len_some</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kp\">shows</span><span class=\"w\"> </span><span class=\"s\">‹(i &lt; length list ⟷ (∃v. nth_opt list i = Some v))›</span>\n<span class=\"k\">proof</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">induction</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 425968052,
        "sender_full_name": "Jonathan Lindegaard Starup",
        "timestamp": 1710176021
    },
    {
        "content": "<p><code>induction i arbitrary: list</code></p>",
        "id": 425969666,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1710176435
    },
    {
        "content": "<p>Remark that you are not keeping the forall quantifiers: in the lemma <code>list</code> is fixed. You are <em>adding</em> a quantifier.</p>",
        "id": 425969799,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1710176470
    },
    {
        "content": "<p>That makes sense. I hit this issue again while using <code>induction rule:...</code> and it doesn't seem that <code>arbitrary: ...</code> works. With more complicated examples would you recommend adding quantifiers to the lemma statement (not using <code>assumes \"...\" shows \"...\"</code>) or just initially introduce quantifiers as needed before starting the induction proof?</p>",
        "id": 426075101,
        "sender_full_name": "Jonathan Lindegaard Starup",
        "timestamp": 1710232155
    },
    {
        "content": "<p>the arbitrary has to go before the rule that should work</p>",
        "id": 426116079,
        "sender_full_name": "Jan van Brügge",
        "timestamp": 1710247296
    }
]