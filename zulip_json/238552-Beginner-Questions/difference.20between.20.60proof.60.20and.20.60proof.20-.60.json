[
    {
        "content": "<p>What is the difference between these when starting a proof?<br>\ne.g.</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">test</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"∃ x . x = 0\"</span>\n<span class=\"k\">proof</span>\n</code></pre></div>\n<p>has</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">proof</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">state</span><span class=\"o\">)</span>\n<span class=\"n\">goal</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">1</span><span class=\"w\"> </span><span class=\"n\">subgoal</span><span class=\"o\">):</span>\n<span class=\"w\"> </span><span class=\"n\">1.</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">0</span>\n</code></pre></div>\n<p>whereas </p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">test</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"∃ x . x = 0\"</span>\n<span class=\"k\">proof</span><span class=\"w\"> </span><span class=\"o\">-</span>\n</code></pre></div>\n<p>has state</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">proof</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">state</span><span class=\"o\">)</span>\n<span class=\"n\">goal</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">1</span><span class=\"w\"> </span><span class=\"n\">subgoal</span><span class=\"o\">):</span>\n<span class=\"w\"> </span><span class=\"n\">1.</span><span class=\"w\"> </span><span class=\"n\">∃x.</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">0</span>\n</code></pre></div>\n<p>a pointer to where this is documented in the manual will be mch appreciated as i could not find it myself</p>",
        "id": 375437655,
        "sender_full_name": "Naso",
        "timestamp": 1689391478
    },
    {
        "content": "<p>The relevant sections in isar-ref.pdf are 6.4.2 and 6.4.3 (pages 146-152). Basically, <code>proof -</code> just starts the proof but does not perform any actual proof steps, whereas <code>proof</code> starts a \"default proof\", i.e. it will perform one standard reduction step based on the form of the statement to be shown. For example, if the statement is a conjunction, it will split the statement into two subgoals, if the statement is a negation, it will start a proof which assumes the argument of the negation and tries to derive <code>False</code>, etc.</p>",
        "id": 375558828,
        "sender_full_name": "Adem Rimpapa",
        "timestamp": 1689430295
    },
    {
        "content": "<p>The rather precise, technical explanation is that <code>proof</code> is the same as <code>proof standard</code> and thus applies the <code>standard</code> proof method, which does something “reasonable” based on the goal, while <code>proof -</code> applies, well, the proof method <code>-</code>, which <em>almost</em> does nothing: it actually does something, namely adding chained facts to the goal as extra premises (occasionally handy if you write custom proof methods with Eisbach and otherwise often not harmful).</p>",
        "id": 375625530,
        "sender_full_name": "Wolfgang Jeltsch",
        "timestamp": 1689454524
    },
    {
        "content": "<p>Regarding your example with the existential quantifier, note that when just using <code>proof</code> you get a goal with a schematic variable. For a long time I was confused by these but then discovered how useful these are: you can just show the statement for a concrete term to replace this variable, and Isabelle will automatically instantiate the variable for you. As a contrived example, look at this (untested) one:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">test</span><span class=\"o\">:</span>\n<span class=\"w\">  </span><span class=\"kp\">shows</span><span class=\"w\"> </span><span class=\"s\">\"∃n :: nat. n = 0\"</span>\n<span class=\"k\">proof</span>\n<span class=\"w\">  </span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"s\">\"(1 - 1 :: nat) = 0\"</span>\n<span class=\"w\">    </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">simp</span>\n<span class=\"k\">qed</span>\n</code></pre></div>\n<p>Here you implicitly say what your example <code>n</code> is by just mentioning it in the statement after <code>show</code>.</p>\n<p>If you happen to have several subgoals that share schematic variables, instantiating the variable for one of them automatically instantiates them for the others. Again a somewhat contrived (and untested) example:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span>\n<span class=\"w\">  </span><span class=\"kp\">shows</span><span class=\"w\"> </span><span class=\"s\">\"∃n :: nat. n = 0 ∧ n &lt; 1\"</span>\n<span class=\"k\">proof</span><span class=\"w\"> </span><span class=\"n\">standard</span><span class=\"o\">+</span>\n<span class=\"w\">  </span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"s\">\"(1 - 1 :: nat) = 0\"</span>\n<span class=\"w\">    </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">simp</span>\n<span class=\"k\">qed</span><span class=\"w\"> </span><span class=\"n\">simp</span>\n</code></pre></div>\n<p>After you have proved the first subgoal with <code>show</code>, the second subgoal is not <code>?n &lt; 1</code> anymore but <code>1 - 1 &lt; 1</code>, which the <code>simp</code> after <code>qed</code> can (hopefully) prove.</p>",
        "id": 375626388,
        "sender_full_name": "Wolfgang Jeltsch",
        "timestamp": 1689454970
    },
    {
        "content": "<p>Why does the second version <code>test2</code> below not work?</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">test1</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"∃x. x = x\"</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"kp\">is</span><span class=\"w\"> </span><span class=\"s\">\"∃x. ?P x\"</span><span class=\"o\">)</span>\n<span class=\"k\">proof</span><span class=\"w\"> </span><span class=\"o\">-</span>\n<span class=\"w\">  </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"s\">\"∃x. ?P x\"</span>\n<span class=\"w\">    </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">simp</span>\n<span class=\"w\">  </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"k\">obtain</span><span class=\"w\"> </span><span class=\"s\">\"x\"</span><span class=\"w\"> </span><span class=\"kp\">where</span><span class=\"w\"> </span><span class=\"s\">\"?P x\"</span>\n<span class=\"w\">    </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">simp</span>\n<span class=\"w\">  </span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"s\">\"∃ x. ?P x\"</span>\n<span class=\"w\">    </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">simp</span>\n<span class=\"k\">qed</span>\n\n<span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">test2</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"∃x. x = x\"</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"kp\">is</span><span class=\"w\"> </span><span class=\"s\">\"∃x. ?P x\"</span><span class=\"o\">)</span>\n<span class=\"k\">proof</span>\n<span class=\"w\">  </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"s\">\"∃x. ?P x\"</span>\n<span class=\"w\">    </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">simp</span>\n<span class=\"w\">  </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"k\">obtain</span><span class=\"w\"> </span><span class=\"s\">\"x\"</span><span class=\"w\"> </span><span class=\"kp\">where</span><span class=\"w\"> </span><span class=\"s\">\"?P x\"</span>\n<span class=\"w\">    </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">simp</span>\n<span class=\"w\">  </span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"s\">\"?P x\"</span><span class=\"w\"> </span><span class=\"c\">(* error *)</span>\n</code></pre></div>\n<p>the proof state is </p>\n<div class=\"codehilite\" data-code-language=\"proof\"><pre><span></span><code>this:\n  x = x\n\ngoal (1 subgoal):\n 1. ?x = ?x\nResult contains obtained parameters: x\nLocal statement fails to refine any pending goal\n</code></pre></div>\n<p>Edit: ok I think I found the answer here: <a href=\"https://groups.google.com/g/fa.isabelle/c/ZdSGteleBnk\">https://groups.google.com/g/fa.isabelle/c/ZdSGteleBnk</a></p>\n<p>It seems that one cannot use <code>obtain</code> when using the <code>proof</code> method for existential proofs (i.e. without the <code>-</code>), if I understood correctly. I'll leave my question ehre in case anyone wants to add anything :)</p>",
        "id": 375874338,
        "sender_full_name": "Naso",
        "timestamp": 1689562312
    },
    {
        "content": "<p>Very interesting, thanks for sharing! I was wondering about this peculiarity for quite some while, but never bothered to investigate.</p>",
        "id": 376380358,
        "sender_full_name": "Alexandra Graß",
        "timestamp": 1689692219
    }
]