[
    {
        "content": "<p>when I code like:</p>\n<div class=\"codehilite\"><pre><span></span><code>lemma delta2:&quot;b^2 / a^2 = (b / a)^2&quot;\nproof-\n  have &quot;b*b / (a*a) = (b / a)*(b / a)&quot;\n    using\n          Fields.field_class.times_divide_times_eq[of b a b a]\n    by auto\n</code></pre></div>\n<p>why does it fail like:</p>\n<div class=\"codehilite\"><pre><span></span><code>Type unification failed: Variable &#39;b::{inverse,power} not of sort field\n\nFailed to meet type constraint:\n\nTerm:  b :: &#39;b\nType:  ??&#39;a\n\nCoercion Inference:\n\nLocal coercion insertion on the operand failed:\nVariable &#39;b::{inverse,power} not of sort field\n\nNow trying to infer coercions globally.\n\nCoercion inference failed:\nsort mismatch\n</code></pre></div>\n<p>can someone explain the description here?</p>",
        "id": 236201273,
        "sender_full_name": "zibo yang",
        "timestamp": 1619453280
    },
    {
        "content": "<p>Types have so-called sorts, which are extra-constraints over types. Isabelle computes the minimum required types and sorts to type a lemma.</p>\n<p>Here the type<code>'b</code> has sorts <code>inverse</code> (this is required to have division) and <code>power</code> (because of the <code>^2</code>). However you want to apply the theorem <code>field_class.times_divide_times_eq</code> that only works when <code>'b</code> has also the sort field (i.e., when <code>'b</code> is a field).</p>",
        "id": 236281927,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1619497737
    },
    {
        "content": "<p>The solution is to be more explicit about sorts:</p>\n<div class=\"codehilite\"><pre><span></span><code>lemma delta2:&quot;b^2 / a^2 = ((b::&#39;b :: {field,power}) / a)^2&quot;\n</code></pre></div>\n<p>or</p>\n<div class=\"codehilite\"><pre><span></span><code>lemma delta2:&quot;b^2 / a^2 = (b / a)^2&quot; for b:: &quot;&#39;b :: {field,power}&quot;\n</code></pre></div>",
        "id": 236281999,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1619497807
    },
    {
        "content": "<p>(untested but if you need the <code>inverse</code>, you know how to add it too)</p>",
        "id": 236282025,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1619497839
    }
]