[
    {
        "content": "<p>Hi community,<br>\nI have defined the function all_chars n by converting  all natural numbers in the range<br>\n[0...n] to chars by the char_of function:</p>\n<p><a href=\"/user_uploads/14278/NrnaKoTcTqCqK3rFl_sGQGBF/Screenshot-2022-03-01-at-17.56.02.png\">Screenshot-2022-03-01-at-17.56.02.png</a> </p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/14278/NrnaKoTcTqCqK3rFl_sGQGBF/Screenshot-2022-03-01-at-17.56.02.png\" title=\"Screenshot-2022-03-01-at-17.56.02.png\"><img src=\"/user_uploads/14278/NrnaKoTcTqCqK3rFl_sGQGBF/Screenshot-2022-03-01-at-17.56.02.png\"></a></div><p>How do I prove that by all_chars 256 I have enumerated all possible char values in Isabelle?<br>\nThis is a bit awkward as it is not constructor type. I tried case_tac and induct with no effect.</p>\n<p>Thanks a lot in advance!</p>",
        "id": 273683326,
        "sender_full_name": "Chengsong Tan",
        "timestamp": 1646157587
    },
    {
        "content": "<p><code>[..256]</code> is a list of int not nats.</p>\n<p>Sledgehammer provided me with a proof of a very similar lemma:</p>\n<div class=\"codehilite\"><pre><span></span><code>  lemma &quot;set (map char_of [0..&lt;(257)]) = UNIV&quot;\n    apply (auto simp: )\n    by (metis atLeastLessThan_iff bot_nat_0.extremum char_of_char eval_nat_numeral(3) imageI less_Suc_eq nat_of_char_less_256)\n</code></pre></div>",
        "id": 273685171,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1646158204
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"233198\">Mathias Fleury</span> <a href=\"#narrow/stream/238552-Beginner-Questions/topic/enumerate.20all.20chars.20and.20prove.20exhaustiveness/near/273685171\">said</a>:</p>\n<p>Thank you for the reply!<br>\nNice solution, how did you come up with this version of the lemma so sledgehammer actually solves it?<br>\nIs there a \"nicer\" way to prove this, it sounds so simple and should be solvable with some helper lemmas? But where does one<br>\nstart on such proofs? It feels uncomfortable to be not able to use induction and other strategies but have to rely on sledgehammer to bruteforce it.</p>",
        "id": 273686715,
        "sender_full_name": "Chengsong Tan",
        "timestamp": 1646158913
    },
    {
        "content": "<p>I started as you did: I did a <code>apply (cases c)</code> and wanted to unfold all values (i.e., enumerate all 256 values: it is slow but should work). But that failed because the type was an int...</p>",
        "id": 273687619,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1646159198
    },
    {
        "content": "<p>So I changed that and called sledgehammer…</p>",
        "id": 273687719,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1646159235
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"233198\">Mathias Fleury</span> <a href=\"#narrow/stream/238552-Beginner-Questions/topic/enumerate.20all.20chars.20and.20prove.20exhaustiveness/near/273687719\">said</a>:</p>\n<blockquote>\n<p>So I changed that and called sledgehammer…</p>\n</blockquote>\n<p>Can you think of a nicer way to enumerate chars? I am out of ideas....</p>\n<p><a href=\"/user_uploads/14278/FwYkWqahsxgzb_Jc906h7jrq/Screenshot-2022-03-01-at-18.33.14.png\">Screenshot-2022-03-01-at-18.33.14.png</a> <br>\nSomething like this wouldn't even parse.......</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/14278/FwYkWqahsxgzb_Jc906h7jrq/Screenshot-2022-03-01-at-18.33.14.png\" title=\"Screenshot-2022-03-01-at-18.33.14.png\"><img src=\"/user_uploads/14278/FwYkWqahsxgzb_Jc906h7jrq/Screenshot-2022-03-01-at-18.33.14.png\"></a></div>",
        "id": 273688340,
        "sender_full_name": "Chengsong Tan",
        "timestamp": 1646159423
    },
    {
        "content": "<p>The problems comes from the syntax <code>[..256]</code> not the CHR…</p>",
        "id": 273689458,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1646159906
    },
    {
        "content": "<p>Oh and BTW</p>\n<div class=\"codehilite\"><pre><span></span><code> lemma &quot;set (map char_of [0..&lt;(256::nat)]) = UNIV&quot;\n    apply (auto simp: )\n    by (metis atLeastLessThan_iff bot_nat_0.extremum char_of_char imageI nat_of_char_less_256)\n</code></pre></div>",
        "id": 273689620,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1646159981
    },
    {
        "content": "<p>the 256  bound is not reached</p>",
        "id": 273689648,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1646159992
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"233198\">Mathias Fleury</span> <a href=\"#narrow/stream/238552-Beginner-Questions/topic/enumerate.20all.20chars.20and.20prove.20exhaustiveness/near/273689620\">said</a>:</p>\n<blockquote>\n<p>Oh and BTW</p>\n<p><div class=\"codehilite\"><pre><span></span><code> lemma &quot;set (map char_of [0..&lt;(256::nat)]) = UNIV&quot;\n    apply (auto simp: )\n    by (metis atLeastLessThan_iff bot_nat_0.extremum char_of_char imageI nat_of_char_less_256)\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Yes because we start from 0 instead of 1</p>",
        "id": 273689798,
        "sender_full_name": "Chengsong Tan",
        "timestamp": 1646160036
    },
    {
        "content": "<p><a href=\"/user_uploads/14278/dwD8SxCWt8TtPx-kcmpDitl7/Screenshot-2022-03-01-at-18.46.59.png\">Screenshot-2022-03-01-at-18.46.59.png</a><br>\nAnd somehow it was indeed CHR causing a parsing error.....can someone explain this <a href=\"/user_uploads/14278/s9TuWuLwQLNMGXfRJsOnIgey/Screenshot-2022-03-01-at-18.47.27.png\">Screenshot-2022-03-01-at-18.47.27.png</a> ?</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/14278/dwD8SxCWt8TtPx-kcmpDitl7/Screenshot-2022-03-01-at-18.46.59.png\" title=\"Screenshot-2022-03-01-at-18.46.59.png\"><img src=\"/user_uploads/14278/dwD8SxCWt8TtPx-kcmpDitl7/Screenshot-2022-03-01-at-18.46.59.png\"></a></div><div class=\"message_inline_image\"><a href=\"/user_uploads/14278/s9TuWuLwQLNMGXfRJsOnIgey/Screenshot-2022-03-01-at-18.47.27.png\" title=\"Screenshot-2022-03-01-at-18.47.27.png\"><img src=\"/user_uploads/14278/s9TuWuLwQLNMGXfRJsOnIgey/Screenshot-2022-03-01-at-18.47.27.png\"></a></div>",
        "id": 273690453,
        "sender_full_name": "Chengsong Tan",
        "timestamp": 1646160348
    },
    {
        "content": "<p>CHR is using the parsing translation and does not make sense without argument</p>",
        "id": 273691887,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1646160868
    }
]