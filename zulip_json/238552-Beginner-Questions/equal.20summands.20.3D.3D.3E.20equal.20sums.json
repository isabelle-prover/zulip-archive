[
    {
        "content": "<p>Suppose that f _i = g_i (where i is an indexing variable) we want to show that sum f_i = sum g_i <br>\nIs there an appropriate lemma for this?</p>",
        "id": 321438682,
        "sender_full_name": "Dustin Bryant",
        "timestamp": 1673756262
    },
    {
        "content": "<p><code>sum.cong</code></p>",
        "id": 321473798,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1673783607
    },
    {
        "content": "<p>Generally, theorems of the form ‘Given that x and x' are in some relation and y and y' are in some relation, <code>f x y = f x' y'</code> are called congruence rules.</p>",
        "id": 321473927,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1673783669
    },
    {
        "content": "<p>Typically that relation of the arguments is some kind of equality (and only then can the simplifier use it as congruence rules). But it can also be e.g. an equality with some extra assumptions, e.g. in your case <code>A = B ⟹ (⋀x. x ∈ B ⟹ g x = h x) ⟹ sum g A = sum h B</code>.</p>",
        "id": 321474122,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1673783769
    },
    {
        "content": "<p>Thank you that worked..... and last question if you can: How do I factor a constant out of a sum like sum c*f_i = c * sum f_i.</p>",
        "id": 321507319,
        "sender_full_name": "Dustin Bryant",
        "timestamp": 1673800471
    },
    {
        "content": "<p>you could use <code>find_theorem \"_ * sum _\"</code> to see what theorems fit. If there is none, you should be able to prove this via induction</p>",
        "id": 321508497,
        "sender_full_name": "Jan van Brügge",
        "timestamp": 1673801208
    },
    {
        "content": "<p>I really am very new so I apologize if my questions are basic: but this throws the following error (after adding s to end of  find_theorem):<br>\nType unification failed: No type arity fun :: times</p>\n<p>Type error in application: incompatible operand type</p>\n<p>Operator:  (*) _ :: ??'a ⇒ ??'a<br>\nOperand:   sum _ :: ??'b set ⇒ ??'c</p>\n<p>I suppose I could try proving this by induction but I feel it should be proven by now.  I imagine I need to specify types for the wild cards?</p>",
        "id": 321512960,
        "sender_full_name": "Dustin Bryant",
        "timestamp": 1673803791
    },
    {
        "content": "<p>I think I missed an extra underscore with <code>sum</code> (because it has two arguments, not one)</p>",
        "id": 321514830,
        "sender_full_name": "Jan van Brügge",
        "timestamp": 1673804892
    },
    {
        "content": "<p>That worked! thank you.  It was the first result and I simply had to change my sum from i=0...n to i \\in {0...n} to satisfy the theorem's requirements. Awesome.</p>",
        "id": 321515880,
        "sender_full_name": "Dustin Bryant",
        "timestamp": 1673805512
    },
    {
        "content": "<p><code>i=0..n</code> is the same as <code>i ∈ {0..n}</code>. It's just syntax; internally it's exactly the same.</p>",
        "id": 321518345,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1673807006
    }
]