[
    {
        "content": "<p>Actually, I was able to make some functions executable, e.g. running</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kt\">value</span> <span class=\"s\">\"Dang (fst r1)\"</span>\n</code></pre></div>\n<p>prints the correct behavior</p>\n<div class=\"codehilite\"><pre><span></span><code>&quot;⌈indeg ↝⇩V 3⌉ ⌈=⌉ ▹⇩I 1 ⌈∧⌉ ⌈outdeg ↝⇩V 3⌉ ⌈=⌉ ▹⇩I 0 ⌈∧⌉ form.T&quot;\n  :: &quot;form&quot;\n</code></pre></div>\n<p>but when trying to use the <code>Dang</code> fun in a theorem (equality in this case) like</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"s\">\"(Dang (fst r1)) = (⌈indeg  ↝⇩V 3⌉ ⌈=⌉ ▹⇩I 1 ⌈∧⌉ ⌈outdeg  ↝⇩V 3⌉ ⌈=⌉ ▹⇩I 0 ⌈∧⌉ form.T)\"</span>\n  <span class=\"kp\">apply</span> <span class=\"o\">(</span><span class=\"n\">simp</span>  <span class=\"n\">add</span><span class=\"o\">:</span> <span class=\"n\">r1_def</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>The remaining goal looks like</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"n\">goal</span> <span class=\"o\">(</span><span class=\"n\">1</span> <span class=\"n\">subgoal</span><span class=\"o\">):</span>\n <span class=\"n\">1</span><span class=\"ow\">.</span> <span class=\"o\">(</span><span class=\"n\">eval</span> <span class=\"n\">g</span> <span class=\"n\">undefined</span>\n      <span class=\"o\">(</span><span class=\"n\">foldr</span>\n        <span class=\"o\">(</span><span class=\"n\">λk</span> <span class=\"n\">a.</span> <span class=\"err\">⌈</span><span class=\"n\">indeg</span> <span class=\"err\">↝⇩</span><span class=\"n\">V</span> <span class=\"n\">k</span><span class=\"err\">⌉</span> <span class=\"err\">⌈</span><span class=\"o\">=</span><span class=\"err\">⌉</span>\n                <span class=\"err\">▹⇩</span><span class=\"n\">I</span> <span class=\"n\">foldr</span>\n                     <span class=\"o\">(</span><span class=\"n\">λka</span> <span class=\"n\">b.</span>\n                         <span class=\"kp\">if</span> <span class=\"n\">edge_trg</span>\n                             <span class=\"o\">(</span><span class=\"n\">the</span> <span class=\"o\">(</span><span class=\"kp\">if</span> <span class=\"n\">ka</span> <span class=\"o\">=</span> <span class=\"n\">Suc</span> <span class=\"n\">0</span> <span class=\"k\">then</span> <span class=\"n\">Some</span> <span class=\"err\">⦇</span><span class=\"n\">edge_src</span> <span class=\"o\">=</span> <span class=\"n\">Suc</span> <span class=\"n\">0</span><span class=\"o\">,</span> <span class=\"n\">edge_trg</span> <span class=\"o\">=</span> <span class=\"n\">2</span><span class=\"o\">,</span> <span class=\"n\">edge_mark</span> <span class=\"o\">=</span> <span class=\"n\">RuleMarkEdge_None</span><span class=\"o\">,</span> <span class=\"n\">edge_label</span> <span class=\"o\">=</span> <span class=\"o\">[</span><span class=\"n\">Var</span> <span class=\"n\">3</span><span class=\"o\">]</span><span class=\"err\">⦈</span>\n                                   <span class=\"n\">else</span> <span class=\"o\">[</span><span class=\"n\">2</span> <span class=\"err\">↦</span> <span class=\"err\">⦇</span><span class=\"n\">edge_src</span> <span class=\"o\">=</span> <span class=\"n\">Suc</span> <span class=\"n\">0</span><span class=\"o\">,</span> <span class=\"n\">edge_trg</span> <span class=\"o\">=</span> <span class=\"n\">3</span><span class=\"o\">,</span> <span class=\"n\">edge_mark</span> <span class=\"o\">=</span> <span class=\"n\">RuleMarkEdge_None</span><span class=\"o\">,</span> <span class=\"n\">edge_label</span> <span class=\"o\">=</span> <span class=\"o\">[</span><span class=\"n\">Var</span> <span class=\"n\">4</span><span class=\"o\">]</span><span class=\"err\">⦈</span><span class=\"o\">]</span> <span class=\"n\">ka</span><span class=\"o\">))</span> <span class=\"o\">=</span>\n                            <span class=\"n\">k</span>\n                         <span class=\"k\">then</span> <span class=\"n\">Suc</span> <span class=\"n\">b</span> <span class=\"n\">else</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n                     <span class=\"o\">(</span><span class=\"n\">Mapping.ordered_keys</span>\n                       <span class=\"o\">(</span><span class=\"n\">AList_Mapping.Mapping</span>\n                         <span class=\"o\">[(</span><span class=\"n\">Suc</span> <span class=\"n\">0</span><span class=\"o\">,</span> <span class=\"err\">⦇</span><span class=\"n\">edge_src</span> <span class=\"o\">=</span> <span class=\"n\">Suc</span> <span class=\"n\">0</span><span class=\"o\">,</span> <span class=\"n\">edge_trg</span> <span class=\"o\">=</span> <span class=\"n\">2</span><span class=\"o\">,</span> <span class=\"n\">edge_mark</span> <span class=\"o\">=</span> <span class=\"n\">RuleMarkEdge_None</span><span class=\"o\">,</span> <span class=\"n\">edge_label</span> <span class=\"o\">=</span> <span class=\"o\">[</span><span class=\"n\">Var</span> <span class=\"n\">3</span><span class=\"o\">]</span><span class=\"err\">⦈</span><span class=\"o\">),</span>\n                          <span class=\"o\">(</span><span class=\"n\">2</span><span class=\"o\">,</span> <span class=\"err\">⦇</span><span class=\"n\">edge_src</span> <span class=\"o\">=</span> <span class=\"n\">Suc</span> <span class=\"n\">0</span><span class=\"o\">,</span> <span class=\"n\">edge_trg</span> <span class=\"o\">=</span> <span class=\"n\">3</span><span class=\"o\">,</span> <span class=\"n\">edge_mark</span> <span class=\"o\">=</span> <span class=\"n\">RuleMarkEdge_None</span><span class=\"o\">,</span> <span class=\"n\">edge_label</span> <span class=\"o\">=</span> <span class=\"o\">[</span><span class=\"n\">Var</span> <span class=\"n\">4</span><span class=\"o\">]</span><span class=\"err\">⦈</span><span class=\"o\">)]))</span>\n                     <span class=\"n\">0</span> <span class=\"err\">⌈∧⌉</span>\n                <span class=\"err\">⌈</span><span class=\"n\">outdeg</span> <span class=\"err\">↝⇩</span><span class=\"n\">V</span> <span class=\"n\">k</span><span class=\"err\">⌉</span> <span class=\"err\">⌈</span><span class=\"o\">=</span><span class=\"err\">⌉</span>\n<span class=\"ow\">....</span>\n</code></pre></div>\n<p>I guess, some simplification rules are missing (e.g. Mapping.ordered_keys, or AList_Mapping.Mapping).  For me, the expected behavior would be that <code>simp</code> would equally evaluate. What peace am I missing?</p>",
        "id": 246754585,
        "sender_full_name": "Robert Soeldner",
        "timestamp": 1626889712
    },
    {
        "content": "<p>From <a href=\"https://isabelle.in.tum.de/dist/Isabelle2021/doc/codegen.pdf\">https://isabelle.in.tum.de/dist/Isabelle2021/doc/codegen.pdf</a>:</p>\n<p><code>apply code_simp</code>?</p>",
        "id": 246764328,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1626894316
    },
    {
        "content": "<p>yea ... actually this was what I was looking for, thanks again :-)</p>",
        "id": 246764580,
        "sender_full_name": "Robert Soeldner",
        "timestamp": 1626894473
    }
]