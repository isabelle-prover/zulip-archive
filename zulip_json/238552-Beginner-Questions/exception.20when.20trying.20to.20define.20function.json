[
    {
        "content": "<p>I am trying to define a recursive function, but for some reason I get an error:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"n\">exception</span> <span class=\"n\">TERM</span> <span class=\"n\">raised</span> <span class=\"o\">(</span><span class=\"n\">line</span> <span class=\"n\">272</span> <span class=\"n\">of</span> <span class=\"s\">\"~~/src/HOL/Tools/hologic.ML\"</span><span class=\"o\">):</span>\n  <span class=\"n\">dest_eq</span>\n  <span class=\"o\">|</span><span class=\"n\">supp</span> <span class=\"n\">id</span><span class=\"o\">|</span> <span class=\"err\">&lt;</span><span class=\"n\">o</span> <span class=\"o\">|</span><span class=\"n\">UNIV</span><span class=\"o\">|</span>\n</code></pre></div>\n<p>the function in question is this:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">function</span> <span class=\"n\">f</span> <span class=\"o\">::</span> <span class=\"s\">\"'a::var_τ_pre raw_τ ⇒ 'a ssfun ⇒ 'a τ\"</span> <span class=\"kp\">where</span>\n  <span class=\"s\">\"f (raw_τ_ctor x) p = CTOR (map_τ_pre id id (λt. (t, f t)) (λt. (t, f t)) (map_τ_pre id (pick0 x p) (rename_τ (pick0 x p)) id x)) p\"</span>\n</code></pre></div>\n<p>There are a few theorems that would require <code>|supp id| &lt;o |UNIV|</code> but I do not see how they would are involved here.</p>",
        "id": 291303290,
        "sender_full_name": "Jan van Brügge",
        "timestamp": 1659089055
    },
    {
        "content": "<p>Might be a good idea to enable the ML stack trace to see where that exception comes from exactly.</p>",
        "id": 291303601,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1659089277
    },
    {
        "content": "<p>I guess this means I need to load up this code in a pure session, because the stack traces do not work with a precompiled HOL session</p>",
        "id": 291303677,
        "sender_full_name": "Jan van Brügge",
        "timestamp": 1659089319
    },
    {
        "content": "<p>ah, yes, because the function package was defined in HOL…</p>",
        "id": 291303899,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1659089466
    },
    {
        "content": "<p>yeah you don't want to do this</p>",
        "id": 291303905,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1659089471
    },
    {
        "content": "<p>well, you can try</p>",
        "id": 291303917,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1659089488
    },
    {
        "content": "<p>it might work</p>",
        "id": 291303919,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1659089489
    },
    {
        "content": "<p>I remember running into some performance issues with the whole stack trace/debugger thing, but I don't remember exactly what I was doing at the time.</p>",
        "id": 291304014,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1659089545
    },
    {
        "content": "<p>I am somewhat surprised though; this looks like some sort of cardinality constraint that I would have expected to come perhaps from the datatype package, but not the function package.</p>",
        "id": 291304054,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1659089586
    },
    {
        "content": "<p>Or are you doing something where this <code>|supp id| &lt;o |UNIV|</code> might be coming from?</p>",
        "id": 291304065,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1659089599
    },
    {
        "content": "<p>The stuff I am working on is an extension of the datatype package. So yeah there are a few theorems like map_comp that require that, but I do not see how that is relevant for the function definition</p>",
        "id": 291304102,
        "sender_full_name": "Jan van Brügge",
        "timestamp": 1659089635
    },
    {
        "content": "<p>Well, currently HOL and HOL-Cardinals is loading, so let's see where this error actually comes from</p>",
        "id": 291304182,
        "sender_full_name": "Jan van Brügge",
        "timestamp": 1659089686
    },
    {
        "content": "<p>does the function package use the theorems of the datatype package?</p>",
        "id": 291304306,
        "sender_full_name": "Jan van Brügge",
        "timestamp": 1659089776
    },
    {
        "content": "<p>because that might explain it. I do register my datatypes as BNFs, but there are theorems already defined of the name <code>&lt;name&gt;.map_comp</code> that have those extra assumptions</p>",
        "id": 291304349,
        "sender_full_name": "Jan van Brügge",
        "timestamp": 1659089821
    },
    {
        "content": "<p>Hm, not sure. Maybe for the pattern matching. You could try expressing the pattern matching with a <code>case</code> expression and see what happens then.</p>",
        "id": 291305122,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1659090443
    },
    {
        "content": "<p>using a case expression does not change this. The stack trace tells me it happens when trying to find a congruence rule. I will investigate further once it has reloaded everything because I opened the ML files</p>",
        "id": 291305535,
        "sender_full_name": "Jan van Brügge",
        "timestamp": 1659090835
    }
]