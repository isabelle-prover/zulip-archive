[
    {
        "content": "<p>As the title suggests, how do we make small-step changes to the proof state, such as turning</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"n\">⟦¬</span><span class=\"w\"> </span><span class=\"n\">Owner</span><span class=\"w\"> </span><span class=\"n\">X;</span>\n<span class=\"w\">     </span><span class=\"kp\">if</span><span class=\"w\"> </span><span class=\"n\">B_c</span><span class=\"w\"> </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"n\">huge_term1</span>\n<span class=\"w\">         </span><span class=\"n\">else</span><span class=\"w\"> </span><span class=\"n\">huge_term2⟧</span>\n<span class=\"w\">    </span><span class=\"n\">⟹</span><span class=\"w\"> </span><span class=\"kp\">if</span><span class=\"w\"> </span><span class=\"n\">B_c</span><span class=\"w\"> </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"n\">huge_term3</span><span class=\"w\"> </span><span class=\"n\">else</span><span class=\"w\"> </span><span class=\"n\">huge_term4</span>\n</code></pre></div>\n<p>into </p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"n\">⟦¬</span><span class=\"w\"> </span><span class=\"n\">Owner</span><span class=\"w\"> </span><span class=\"n\">X;</span><span class=\"w\">           </span><span class=\"n\">huge_term2⟧</span>\n<span class=\"w\">    </span><span class=\"n\">⟹</span><span class=\"w\"> </span><span class=\"n\">huge_term4</span>\n</code></pre></div>\n<p>provided that <code>B_c</code> is a constant boolean value that evaluates to <code>False</code>?<br>\nI know for the goal (conclusion), we can first have something like <code>subgoal_tac \"B_c = False</code> and then <code>apply(erule ssubst)</code>,<br>\nand then using the rule <code>if_False</code>.<br>\nBut how do you do that for the premise so that the huge if-else expression is reduced to just <code>huge_term2</code>?</p>\n<p>Thanks a lot,<br>\nChengsong</p>",
        "id": 403039338,
        "sender_full_name": "Chengsong Tan",
        "timestamp": 1700418213
    },
    {
        "content": "<p>How about using Isar?</p>",
        "id": 403041210,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1700419285
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">H</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">‹b = False ⟹ (if b then P else Q) = Q›</span>\n<span class=\"w\">  </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">auto</span>\n<span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"s\">‹⟦¬ Owner X; ¬B_c;</span>\n<span class=\"s\">     if B_c then huge_term1</span>\n<span class=\"s\">         else huge_term2⟧</span>\n<span class=\"s\">    ⟹ if B_c then huge_term3 else huge_term4</span>\n<span class=\"s\">›</span>\n<span class=\"w\">  </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">subst</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">asm</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">H</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"n\">simp</span>\n</code></pre></div>",
        "id": 403041425,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1700419408
    },
    {
        "content": "<p>ah here we go without extra lemma:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"s\">‹⟦¬ Owner X; ¬B_c;</span>\n<span class=\"s\">     if B_c then huge_term1</span>\n<span class=\"s\">         else huge_term2⟧</span>\n<span class=\"s\">    ⟹ if B_c then huge_term3 else huge_term4</span>\n<span class=\"s\">›</span>\n<span class=\"w\">  </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">subst</span><span class=\"w\"> </span><span class=\"n\">if_cong</span><span class=\"o\">)</span>\n<span class=\"w\">       </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">subst</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">asm</span><span class=\"o\">)(</span><span class=\"n\">2</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">eq_False</span><span class=\"o\">[</span><span class=\"n\">symmetric</span><span class=\"o\">])</span>\n<span class=\"w\">     </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"n\">assumption</span>\n<span class=\"w\">    </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">rule</span><span class=\"w\"> </span><span class=\"n\">refl</span><span class=\"o\">)</span>\n<span class=\"w\">    </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">rule</span><span class=\"w\"> </span><span class=\"n\">refl</span><span class=\"o\">)</span>\n<span class=\"w\">    </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">subst</span><span class=\"w\"> </span><span class=\"n\">if_False</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"n\">simp</span>\n</code></pre></div>",
        "id": 403041817,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1700419662
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"233198\">Mathias Fleury</span> <a href=\"#narrow/stream/238552-Beginner-Questions/topic/fine-grained.20single-step.20rewrites.20for.20both.20premises.20and.20goal/near/403041817\">said</a>:</p>\n<blockquote>\n<p>ah here we go without extra lemma:</p>\n<p><div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"s\">‹⟦¬ Owner X; ¬B_c;</span>\n<span class=\"s\">     if B_c then huge_term1</span>\n<span class=\"s\">         else huge_term2⟧</span>\n<span class=\"s\">    ⟹ if B_c then huge_term3 else huge_term4</span>\n<span class=\"s\">›</span>\n<span class=\"w\">  </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">subst</span><span class=\"w\"> </span><span class=\"n\">if_cong</span><span class=\"o\">)</span>\n<span class=\"w\">       </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">subst</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">asm</span><span class=\"o\">)(</span><span class=\"n\">2</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">eq_False</span><span class=\"o\">[</span><span class=\"n\">symmetric</span><span class=\"o\">])</span>\n<span class=\"w\">     </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"n\">assumption</span>\n<span class=\"w\">    </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">rule</span><span class=\"w\"> </span><span class=\"n\">refl</span><span class=\"o\">)</span>\n<span class=\"w\">    </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">rule</span><span class=\"w\"> </span><span class=\"n\">refl</span><span class=\"o\">)</span>\n<span class=\"w\">    </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">subst</span><span class=\"w\"> </span><span class=\"n\">if_False</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"n\">simp</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Thanks Mathias! That works beautifully.</p>",
        "id": 403247887,
        "sender_full_name": "Chengsong Tan",
        "timestamp": 1700515500
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"233198\">Mathias Fleury</span> <a href=\"#narrow/stream/238552-Beginner-Questions/topic/fine-grained.20single-step.20rewrites.20for.20both.20premises.20and.20goal/near/403041210\">said</a>:</p>\n<blockquote>\n<p>How about using Isar?</p>\n</blockquote>\n<p>Maybe next time.... I doubt the Isar proof will be simple and intuitive as this apply script you gave.</p>",
        "id": 403248074,
        "sender_full_name": "Chengsong Tan",
        "timestamp": 1700515578
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"241231\">Chengsong Tan</span> <a href=\"#narrow/stream/238552-Beginner-Questions/topic/fine-grained.20single-step.20rewrites.20for.20both.20premises.20and.20goal/near/403248074\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"233198\">Mathias Fleury</span> <a href=\"#narrow/stream/238552-Beginner-Questions/topic/fine-grained.20single-step.20rewrites.20for.20both.20premises.20and.20goal/near/403041210\">said</a>:</p>\n<blockquote>\n<p>How about using Isar?</p>\n</blockquote>\n<p>Maybe next time.... I doubt the Isar proof will be simple and intuitive as this apply script you gave.</p>\n</blockquote>\n<p>Without having looked at your particular problem, I’m quite convinced that an appropriate Isar proof would be way more intuitive than this <code>apply</code> script.  <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 403249102,
        "sender_full_name": "Wolfgang Jeltsch",
        "timestamp": 1700515986
    }
]