[
    {
        "content": "<p>I'm trying to lead an inductive proof over a finite set, and I found the <code>Finite_Set.finite_induct</code> lemma which seems to be what I want (though I may in future need to induct over the elements in a specified linear order, but not yet). But I can't figure out how to start the proof, other than just <code>proof (rule finite_induct)</code>, but it feels like there should be a more idiomatic way of using it?</p>",
        "id": 229669128,
        "sender_full_name": "Max Nowak",
        "timestamp": 1615386613
    },
    {
        "content": "<p>I assume that you just forgot to add the <code>finite S</code> fact to the context:</p>\n<div class=\"codehilite\"><pre><span></span><code>  using `finite S`\nproof (induct rule: finite_induct)\n</code></pre></div>",
        "id": 229670712,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1615387085
    },
    {
        "content": "<p>Oh, yeap, that was it. Thanks!</p>",
        "id": 229670959,
        "sender_full_name": "Max Nowak",
        "timestamp": 1615387174
    },
    {
        "content": "<p>Is there a way to fold over elements in a finite set (with <code>Finite_Set.fold</code> or something similar) in a specified linear order? (And then that'll constrain the <code>finite_induct</code> proof as well I assume..)</p>",
        "id": 229671815,
        "sender_full_name": "Max Nowak",
        "timestamp": 1615387445
    },
    {
        "content": "<p>Though I guess at that point I might as well just use a list, but it'd be unhandy with the rest of my definitions &amp; lemmas..</p>",
        "id": 229672133,
        "sender_full_name": "Max Nowak",
        "timestamp": 1615387545
    },
    {
        "content": "<p>why would you want to do that?</p>",
        "id": 229673616,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1615388030
    },
    {
        "content": "<p>Yeah good question, guess that's a bad idea then.</p>",
        "id": 229673763,
        "sender_full_name": "Max Nowak",
        "timestamp": 1615388070
    },
    {
        "content": "<p>A set is by definitions unordered. If you need an order, then you don't have a set anymore…</p>",
        "id": 229673874,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1615388107
    },
    {
        "content": "<p>IIRC, there is a <code>sorted_list_of_list</code>or something like that to convert a set to an ordered list</p>",
        "id": 229673980,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1615388152
    },
    {
        "content": "<p>Yeah there is <code>List.sorted_list_of_set :: 'a set =&gt; 'a list</code>, but it takes no linear order as an argument, so I don't know how to call that..</p>",
        "id": 229715282,
        "sender_full_name": "Max Nowak",
        "timestamp": 1615400149
    },
    {
        "content": "<p><code>'a</code> is assumed to have a linear order</p>",
        "id": 229718419,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1615401309
    },
    {
        "content": "<p>Ah, hm, guess I'll finally have to dive into locales then</p>",
        "id": 229719376,
        "sender_full_name": "Max Nowak",
        "timestamp": 1615401655
    },
    {
        "content": "<p>but why do you need an order? For non-determinism, I would use an inductive predicate</p>",
        "id": 229722184,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1615402685
    },
    {
        "content": "<p>You can also always just \"obtain\" a list using the theorem <code>finite_list</code>. If you need this top-level for whatever reason (i.e. outside an Isar proof), you can use <code>SOME</code> in combination with that theorem (<code>SOME xs. set xs = A</code>). None of this is executable, of course (while <code>sorted_list_of_set</code>) ist.</p>",
        "id": 229830557,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1615460557
    },
    {
        "content": "<p>I would, however, generally avoid working with lists instead of finite sets unless you have a good reason for doing so.</p>",
        "id": 229830581,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1615460574
    },
    {
        "content": "<p>I am working with an existing framework which gives me a set of elected alternatives E, and for each alternative I want to do something. And the order in which I draw those candidates <em>may</em> affect the outcome, but I am not sure.</p>",
        "id": 229855475,
        "sender_full_name": "Max Nowak",
        "timestamp": 1615472512
    },
    {
        "content": "<p>If you are not sure and don't care, use an inductive predicate to express a nondetirministic fold…</p>",
        "id": 229855819,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1615472624
    },
    {
        "content": "<p>Oh sorry I had somehow missed your message yesterday.</p>",
        "id": 229856041,
        "sender_full_name": "Max Nowak",
        "timestamp": 1615472700
    },
    {
        "content": "<p><code>Library/Multiset_Permutations</code> also has <code>permutations_of_set</code> which gives you all the lists that are a permutation of a given finite set <code>A</code></p>",
        "id": 229856598,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1615472880
    },
    {
        "content": "<p>How would I use an inductive predicate to express some fold then? Right now I'm trying to define a <code>function</code> which computes my result (pattern matching on <code>{}</code> and <code>insert x xs</code>), but to be honest I have no clue what I'm doing.</p>",
        "id": 229862759,
        "sender_full_name": "Max Nowak",
        "timestamp": 1615474949
    },
    {
        "content": "<p><code>finite</code> is already an inductive predicate, so maybe that could be reused.</p>",
        "id": 229862869,
        "sender_full_name": "Max Nowak",
        "timestamp": 1615474990
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>function draw :: &quot;&#39;a set ⇒ &#39;a list&quot; where\n&quot;draw {} = []&quot; |\n&quot;finite (insert x xs) ⟹ draw (insert x xs) = x # draw xs&quot;\n</code></pre></div>\n<p>This is just a minimal example, something roughly like this is what I had in mind. (yes I know it's probably terribly wrong, please don't laugh :P)</p>",
        "id": 229863103,
        "sender_full_name": "Max Nowak",
        "timestamp": 1615475070
    },
    {
        "content": "<p>that is the whole point of the discussion: this is not possible.</p>",
        "id": 229874883,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1615478765
    },
    {
        "content": "<p>You cannot do that.</p>",
        "id": 229874920,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1615478769
    },
    {
        "content": "<p>The definition is not well defined</p>",
        "id": 229875087,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1615478807
    },
    {
        "content": "<p>What you can define is a fold-like predicate:</p>\n<div class=\"codehilite\"><pre><span></span><code>inductive fold_set :: ‹_ ⇒ &#39;b ⇒ &#39;a set ⇒ bool›\n  for f :: ‹&#39;b ⇒ &#39;a ⇒ &#39;b›\nwhere\n   &quot;fold_set f dflt {}&quot; |\n   &quot;fold_set f a S ⟹ fold_set f (f a b) (insert b S)&quot;\n</code></pre></div>",
        "id": 229876314,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1615479078
    },
    {
        "content": "<p><code>dflt</code> must be a meaningfull constant in you case or another parameter</p>",
        "id": 229877451,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1615479421
    },
    {
        "content": "<p>This is available as <code>Finite_Set.fold_graph</code></p>",
        "id": 229881336,
        "sender_full_name": "Jakub Kądziołka",
        "timestamp": 1615480724
    },
    {
        "content": "<p>ah, I did not know about that predicate. Thanks</p>",
        "id": 229886940,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1615482521
    },
    {
        "content": "<p>If your operation is commutative, i.e. the result doesn't depend on the order used (and you can prove it), then there's <code>Finite_Set.fold</code> which uses <code>THE</code> on <code>fold_graph</code></p>",
        "id": 229887823,
        "sender_full_name": "Jakub Kądziołka",
        "timestamp": 1615482805
    },
    {
        "content": "<p>I gave up on this last time, but the issue has come up again, and I'm at my wit's end to be honest. I have a set <code>A</code>, and a subset <code>S</code> of A. And I have a linear order <code>linord</code> on A. How do I get <code>S</code> transformed into a list according to the linear order? I know there is <code>List.sorted_list_of_set</code>, but it uses Locales and I have no time to dig into that for something this (seemingly) simple, sorry..</p>",
        "id": 236317369,
        "sender_full_name": "Max Nowak",
        "timestamp": 1619521531
    },
    {
        "content": "<p>Is the linear order on the type or or just the set <code>S</code>?</p>",
        "id": 236317531,
        "sender_full_name": "Lukas Stevens",
        "timestamp": 1619521622
    },
    {
        "content": "<p>Just on <code>A</code> (and S is a subset).</p>",
        "id": 236317564,
        "sender_full_name": "Max Nowak",
        "timestamp": 1619521644
    },
    {
        "content": "<p>can you use <code>SOME xs. set xs = A</code>?</p>",
        "id": 236317606,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1619521680
    },
    {
        "content": "<p>If it is on the set, then you are out of luck currently without resorting to <code>Types-To-Sets</code>. I have already relativised the <code>folding</code> locale to sets but the changes will be in the next release at the earliest.</p>",
        "id": 236317706,
        "sender_full_name": "Lukas Stevens",
        "timestamp": 1619521715
    },
    {
        "content": "<p>I have something like that in the AFP: <a href=\"https://www.isa-afp.org/browser_info/current/AFP/Comparison_Sort_Lower_Bound/Linorder_Relations.html\">https://www.isa-afp.org/browser_info/current/AFP/Comparison_Sort_Lower_Bound/Linorder_Relations.html</a></p>",
        "id": 236317739,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1619521740
    },
    {
        "content": "<p><code>sorted_wrt_list_of_set</code></p>",
        "id": 236317750,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1619521744
    },
    {
        "content": "<p>It uses its own notation of \"linear order\", but that should be easy to adapt.</p>",
        "id": 236317777,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1619521766
    },
    {
        "content": "<p>Looks like <code>linorder_on</code> is equivalent to <code>linear_order_on</code></p>",
        "id": 236318288,
        "sender_full_name": "Max Nowak",
        "timestamp": 1619522080
    },
    {
        "content": "<p>Looks like what I need then! I never used AFP before, is there a canonical way of importing theories from AFP? It also seems to depend on List_Index which is AFP-only as well by the looks of it</p>",
        "id": 236318495,
        "sender_full_name": "Max Nowak",
        "timestamp": 1619522200
    },
    {
        "content": "<p>The easiest way is to download the AFP, include it as a component (that's explained on the website) and then you can import it by writing <code>Comparison_Sort_Lower_Bound.Linorder_Relations</code>.</p>",
        "id": 236318743,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1619522332
    },
    {
        "content": "<p>You can also try just copying out whatever parts of the theory you need (no need to cite me or anything).</p>",
        "id": 236318792,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1619522353
    }
]