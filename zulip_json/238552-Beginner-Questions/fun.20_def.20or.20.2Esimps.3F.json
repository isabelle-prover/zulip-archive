[
    {
        "content": "<p>This might occurred previously. Isabelle seems not to know about myfunc_def anymore, only myfunc.simps .</p>\n<p>Is that the standard way of using its definition with keyword unfolding?</p>\n<p>theorem skip_implies_SKIP: <br>\n  assumes \"skip c\"<br>\n  shows   \"c ∼ SKIP\"<br>\n  using assms<br>\n  unfolding skip.simps</p>",
        "id": 222283377,
        "sender_full_name": "Gergely Buday",
        "timestamp": 1610363030
    },
    {
        "content": "<p>Only definition-s have _def? What about abbreviations? How can I refer to them in unfolding?</p>",
        "id": 222285275,
        "sender_full_name": "Gergely Buday",
        "timestamp": 1610364303
    },
    {
        "content": "<p>Indeed only definitions have a _def.  Primrec and fun don't have one. [1]</p>\n<p>Abbreviations only exists at pretty-printing. So unfolding the content of the abbreviation works.</p>\n<p>[1] the definition exists internally, but you should never use it.</p>",
        "id": 222285908,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1610364714
    },
    {
        "content": "<p>An example:</p>\n<div class=\"codehilite\"><pre><span></span><code>definition f :: ‹nat ⇒ nat ⇒ nat› where\n  ‹f x  y = x + 3 + y›\n\nabbreviation add4 :: ‹nat ⇒ nat› where\n  ‹add4 ≡ f 1›\n\nlemma ‹add4 x = x + 4›\n  unfolding f_def by auto\n</code></pre></div>",
        "id": 222286243,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1610364905
    },
    {
        "content": "<p><code>primrec</code> does produce an accessible <code>_def</code> theorem in terms of the primitive recursor and can <em>very occasionally</em> be useful (e.g. when you want to show measurability, parametricity, etc.)</p>",
        "id": 222286354,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1610364986
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"233198\">@Mathias Fleury</span> in your example you unfold f's definition explicitly, but not abbreviation add4. Does that happen because of the simp ingredient of auto?</p>",
        "id": 222307193,
        "sender_full_name": "Gergely Buday",
        "timestamp": 1610377212
    },
    {
        "content": "<p>theorem skip_implies_SKIP: <br>\n  assumes \"skip c\"<br>\n  shows   \"c ∼ SKIP\"<br>\n  using assms<br>\n  apply (simp)</p>\n<p>results in </p>\n<p>proof (prove)<br>\ngoal (1 subgoal):</p>\n<ol>\n<li>∀s. (c, s) ⇒ s ⟹ c ∼ SKIP</li>\n</ol>\n<p>so it unfolds skip but not ∼ </p>\n<p>how can I do the latter?</p>",
        "id": 222307705,
        "sender_full_name": "Gergely Buday",
        "timestamp": 1610377428
    },
    {
        "content": "<p>Isabelle never sees the abbreviations internally. They are unfolded while parsing (basically).</p>",
        "id": 222307793,
        "sender_full_name": "Lukas Stevens",
        "timestamp": 1610377457
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"234198\">Gergely Buday</span> <a href=\"#narrow/stream/238552-Beginner-Questions/topic/fun.20_def.20or.20.2Esimps.3F/near/222307193\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"233198\">Mathias Fleury</span> in your example you unfold f's definition explicitly, but not abbreviation add4. Does that happen because of the simp ingredient of auto?</p>\n</blockquote>\n<p>The abbrevation don't exist for Isabelle:</p>\n<div class=\"codehilite\"><pre><span></span><code>lemma ‹add4 x = x + 4›\n(*goal is ‹add4 x = x + 4› *)\n  unfolding f_def\n(*goal is ‹1 + 3 + x = x + 4› *)\nby auto\n(*no goal*)\n</code></pre></div>",
        "id": 222314008,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1610379908
    },
    {
        "content": "<p>otherwise, exactly what Lukas said.</p>",
        "id": 222314058,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1610379931
    },
    {
        "content": "<p>For ~: if it is the one from Big_Step. It is an abbreviation for <code>∀s t. (c,s) ⇒ t  =  (c',s) ⇒ t</code>, aka your lemma is equivalent to:</p>\n<div class=\"codehilite\"><pre><span></span><code>theorem skip_implies_SKIP:\nassumes &quot;skip c&quot;\nshows &quot;∀s t. (c,s) ⇒ t  =  (SKIP,s) ⇒ t&quot;\n</code></pre></div>\n<p>You could something like:</p>\n<div class=\"codehilite\"><pre><span></span><code>theorem skip_implies_SKIP:\nassumes &quot;skip c&quot;\nshows &quot;c ∼ SKIP&quot;\n  apply (intro allI)\n</code></pre></div>\n<p>or even <code>apply (intro allI impI)</code>.</p>",
        "id": 222315525,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1610380508
    },
    {
        "content": "<p>Thanks indeed.</p>",
        "id": 223345723,
        "sender_full_name": "Gergely Buday",
        "timestamp": 1611132725
    }
]