[
    {
        "content": "<p>I'm having a play learning isabelle/HOL by tinkering with the collatz conjecture. The central question is if a recursive function terminates or not. I've tried to capture it like this:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">collatz_step</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"nat ⇒ nat\"</span>\n<span class=\"kp\">where</span>\n<span class=\"s\">\"collatz_step n = (if even n then n div 2 else n * 3 + 1)\"</span>\n\n<span class=\"kn\">function</span><span class=\"w\"> </span><span class=\"n\">collatz_chain</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"nat ⇒ nat list\"</span>\n<span class=\"kp\">where</span>\n<span class=\"s\">\"collatz_chain 0                = [0]\"</span><span class=\"w\"> </span><span class=\"o\">|</span>\n<span class=\"s\">\"collatz_chain (Suc 0)          = [1]\"</span><span class=\"w\"> </span><span class=\"o\">|</span>\n<span class=\"s\">\"collatz_chain (Suc (Suc n))    = (Suc (Suc n)) # (collatz_chain (collatz_step (Suc (Suc n))))\"</span>\n<span class=\"k\">by</span>\n<span class=\"w\">    </span><span class=\"n\">pat_completeness</span>\n<span class=\"w\">    </span><span class=\"n\">auto</span>\n</code></pre></div>\n<p>However, obviously I don't have a proof that <code>collatz_chain</code> terminates. If I did, I'd have solved the conjecture already. How should I tell Isabelle the problem without needing to already have the solution? I'm open to alternative representations and using different language constructs.</p>\n<p>Thanks :D</p>",
        "id": 387168471,
        "sender_full_name": "Matthew Pocock",
        "timestamp": 1692914602
    },
    {
        "content": "<p>You could <code>sorry</code>the termination</p>",
        "id": 387207213,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1692938869
    },
    {
        "content": "<p>Or you work on a locale context where you assume that it terminates:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">locale</span><span class=\"w\"> </span><span class=\"n\">test</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">  </span><span class=\"kp\">assumes</span><span class=\"w\"> </span><span class=\"n\">t</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">‹⋀x. collatz_chain_dom x›</span>\n<span class=\"k\">begin</span>\n<span class=\"kn\">termination</span><span class=\"w\"> </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">t</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">auto</span>\n\n\n<span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"s\">‹A = tl (collatz_chain 3)›</span>\n<span class=\"w\">  </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">auto</span><span class=\"w\"> </span><span class=\"n\">simp</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">numeral_eq_Suc</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"gr\">sorry</span>\n<span class=\"k\">end</span>\n</code></pre></div>",
        "id": 387207765,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1692939261
    },
    {
        "content": "<p>However your definition is not terminating</p>",
        "id": 387207777,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1692939271
    },
    {
        "content": "<p>The argument of the function is never decreasing (3 -&gt; 5 -&gt; 7 -&gt; .... in the third branch of the function)</p>",
        "id": 387208111,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1692939544
    },
    {
        "content": "<p>(division by 2 is missing)</p>",
        "id": 387208630,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1692939881
    },
    {
        "content": "<p>Would it help to construct a potentially infinite list of all intermediate values and, if it exists, the final value? Then the Collatz conjecture would be that for all start values the corresponding list is finite. The <code>corec</code> tutorial defines a Collatz function similar to what I described as an example (it leaves out the downward steps, from what I remember).</p>",
        "id": 387273179,
        "sender_full_name": "Wolfgang Jeltsch",
        "timestamp": 1692968919
    },
    {
        "content": "<p>OK, so I think I'm going to re-write it as <code>function collatz_chain_bounded:: \"nat =&gt; nat =&gt; nat list\"</code> where the first nat is a counter. So instead of asking if it terminates at all, ask if it terminates within <code>n</code> steps, where we can choose n arbitrarily.</p>",
        "id": 387456459,
        "sender_full_name": "Matthew Pocock",
        "timestamp": 1693082222
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"423655\">Wolfgang Jeltsch</span> <a href=\"#narrow/stream/238552-Beginner-Questions/topic/functions.20that.20may.20not.20terminate/near/387273179\">said</a>:</p>\n<blockquote>\n<p>Would it help to construct a potentially infinite list of all intermediate values and, if it exists, the final value? </p>\n</blockquote>\n<p>Sorry for being an utter noob, but can you sketch what that would look like please?</p>",
        "id": 387528365,
        "sender_full_name": "Matthew Pocock",
        "timestamp": 1693141081
    },
    {
        "content": "<p>I guess Wolfgang means <a href=\"https://isabelle.in.tum.de/dist/Isabelle2022/doc/corec.pdf\">https://isabelle.in.tum.de/dist/Isabelle2022/doc/corec.pdf</a> (and page 7, search for Collatz)</p>",
        "id": 387528783,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1693141403
    },
    {
        "content": "<p>From there you could extract a everything until you reach a one or something like that</p>",
        "id": 387528875,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1693141461
    },
    {
        "content": "<p>Thanks :D Another thing I should read. But yes, the <code>stream</code> type seems like it much more naturally captures the way I'm thinking about this stuff than dealing with concrete lists. I think from this I can start to make some simple inductive proofs. Cheers.</p>",
        "id": 387529599,
        "sender_full_name": "Matthew Pocock",
        "timestamp": 1693142118
    },
    {
        "content": "<p>I seem to hit problems with streams. I'm probably doing something wrong. Here's my code. When evaluating the <code>value</code> line it barfs with:</p>\n<p><code>[Info  - 15:07:31] Warning - Unable to increase stack - interrupting thread</code></p>\n<p>I was expecting <code>stake</code> to just evaluate the minimum number of terms needed to construct the list, but it kind of seems like it is trying to evaluate the stream to termination. Is this a RTFM problem on my part? I'm finding the documentation quite difficult to follow in places so it could be.</p>\n<div class=\"codehilite\" data-code-language=\"theory\"><pre><span></span><code>imports\n    Main\n    \"HOL-Library.Stream\"\n    \"HOL-Library.BNF_Corec\"\nbegin\n\nfun collatz_step :: \"nat \\&lt;Rightarrow&gt; nat\" where\n    \"collatz_step n = (if even n then n div 2 else 3 * n + 1)\"\n\ncorec\n    collatz_chain :: \"nat \\&lt;Rightarrow&gt; nat stream\"\nwhere\n    \"collatz_chain n = SCons n (collatz_chain(collatz_step n))\"\n\nvalue \"stake 5 (collatz_chain 3)\"\n</code></pre></div>",
        "id": 387533642,
        "sender_full_name": "Matthew Pocock",
        "timestamp": 1693145457
    },
    {
        "content": "<p>The default code generator does not handle corecursive function nicely</p>",
        "id": 387534123,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1693145895
    },
    {
        "content": "<p>you probably have to export code to Haskell</p>",
        "id": 387534138,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1693145910
    },
    {
        "content": "<p>To do it in Isabelle directly, I had to do unfolding by hand:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"s\">\"A = stake 5 (collatz_chain 3)\"</span>\n<span class=\"w\">  </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">subst</span><span class=\"w\"> </span><span class=\"n\">collatz_chain.corec.code</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">subst</span><span class=\"w\"> </span><span class=\"n\">collatz_chain.corec.code</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">subst</span><span class=\"w\"> </span><span class=\"n\">collatz_chain.corec.code</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">subst</span><span class=\"w\"> </span><span class=\"n\">collatz_chain.corec.code</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">subst</span><span class=\"w\"> </span><span class=\"n\">collatz_chain.corec.code</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"n\">simp</span>\n<span class=\"w\">  </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"n\">add</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">numeral_eq_Suc</span><span class=\"w\"> </span><span class=\"o\">)</span>\n<span class=\"w\"> </span><span class=\"k\">done</span>\n</code></pre></div>",
        "id": 387534222,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1693145986
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"233198\">Mathias Fleury</span> <a href=\"#narrow/stream/238552-Beginner-Questions/topic/functions.20that.20may.20not.20terminate/near/387534138\">said</a>:</p>\n<blockquote>\n<p>To do it in Isabelle directly, I had to do unfolding by hand:</p>\n</blockquote>\n<p>Oh my! That's going to become a bit laborious. Thanks.</p>",
        "id": 387551502,
        "sender_full_name": "Matthew Pocock",
        "timestamp": 1693161588
    },
    {
        "content": "<p>I don't really know why it is so weird</p>",
        "id": 387551830,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1693161865
    },
    {
        "content": "<p>but you probably can solve the problem by a simp rules for <code>stake (Suc n) (collatz_chain (Suc z))</code></p>",
        "id": 387551873,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1693161910
    },
    {
        "content": "<p>The proper way would be to import  <code>HOL-Library.Code_Lazy</code> and add the line <code>code_lazy_type stream</code> somewhere before the <code>value</code> command.</p>",
        "id": 387609578,
        "sender_full_name": "Dmitriy Traytel",
        "timestamp": 1693205339
    },
    {
        "content": "<p>See also <a href=\"http://www.andreas-lochbihler.de/pub/lochbihler2018iw.pdf\">http://www.andreas-lochbihler.de/pub/lochbihler2018iw.pdf</a> for a description of how this works.</p>",
        "id": 387609744,
        "sender_full_name": "Dmitriy Traytel",
        "timestamp": 1693205417
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"361271\">Dmitriy Traytel</span> <a href=\"#narrow/stream/238552-Beginner-Questions/topic/functions.20that.20may.20not.20terminate/near/387609578\">said</a>:</p>\n<blockquote>\n<p>The proper way would be to import  <code>HOL-Library.Code_Lazy</code> and add the line <code>code_lazy_type stream</code> somewhere before the <code>value</code> command.</p>\n</blockquote>\n<p>Thank you - I will try this. I was about to start learning COQ :D</p>",
        "id": 387668789,
        "sender_full_name": "Matthew Pocock",
        "timestamp": 1693229229
    },
    {
        "content": "<p>Thank you for all your help. I feel a little less like I'm stumbling in the dark.</p>\n<p>I have written a function that defines reaching 1 in a collatz chain, and then two lemmas for chains starting at 1 and at n. I've managed to stumble through proofs for these. Is this idiomatic isabelle or can I structure the proofs in a neater or more compact way? It feels very manual, although I'm sure it is doing a lot of work under the hood.</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">reaches_1</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"nat </span><span class=\"ss\">\\&lt;Rightarrow&gt;</span><span class=\"s\"> bool\"</span>\n<span class=\"w\">  </span><span class=\"kp\">where</span><span class=\"w\"> </span><span class=\"s\">\"reaches_1 n = (1 </span><span class=\"ss\">\\&lt;in&gt;</span><span class=\"s\"> sset (collatz_chain n))\"</span>\n\n<span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">collatz_chain_of_1_reaches_1</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]:</span><span class=\"w\"> </span><span class=\"s\">\"reaches_1 1\"</span>\n<span class=\"w\">    </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"n\">simp</span>\n<span class=\"w\">    </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">subst</span><span class=\"w\"> </span><span class=\"n\">collatz_chain.corec.code</span><span class=\"o\">)</span>\n<span class=\"w\">    </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"n\">simp</span>\n<span class=\"k\">done</span>\n\n<span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">collatz_chain_induction</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]:</span><span class=\"w\"> </span><span class=\"s\">\"reaches_1 (collatz_step n) --&gt; reaches_1 n\"</span>\n<span class=\"w\">    </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"n\">auto</span>\n<span class=\"w\">    </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">subst</span><span class=\"w\"> </span><span class=\"n\">collatz_chain.corec.code</span><span class=\"o\">)</span>\n<span class=\"w\">    </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">subst</span><span class=\"w\"> </span><span class=\"n\">Collatz.collatz_step.simps</span><span class=\"o\">)</span>\n<span class=\"w\">    </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"n\">auto</span>\n<span class=\"w\">    </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">subst</span><span class=\"w\"> </span><span class=\"n\">collatz_chain.corec.code</span><span class=\"o\">)</span>\n<span class=\"w\">    </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">subst</span><span class=\"w\"> </span><span class=\"n\">Collatz.collatz_step.simps</span><span class=\"o\">)</span>\n<span class=\"w\">    </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"n\">auto</span>\n<span class=\"k\">done</span>\n</code></pre></div>",
        "id": 388113885,
        "sender_full_name": "Matthew Pocock",
        "timestamp": 1693403287
    }
]