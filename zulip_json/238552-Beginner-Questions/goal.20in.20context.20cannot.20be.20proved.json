[
    {
        "content": "<p>I have this Isar state</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">this</span><span class=\"o\">:</span>\n<span class=\"w\">  </span><span class=\"n\">constrained_to</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">renaming_subst</span><span class=\"w\"> </span><span class=\"n\">fr</span><span class=\"w\"> </span><span class=\"n\">too</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">χ</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">renaming_subst</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">map</span><span class=\"w\"> </span><span class=\"n\">fst</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">filter</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">λx.</span><span class=\"w\"> </span><span class=\"n\">fst</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">∈</span><span class=\"w\"> </span><span class=\"n\">χ</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">zip</span><span class=\"w\"> </span><span class=\"n\">fr</span><span class=\"w\"> </span><span class=\"n\">too</span><span class=\"o\">)))</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">map</span><span class=\"w\"> </span><span class=\"n\">snd</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">filter</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">λx.</span><span class=\"w\"> </span><span class=\"n\">fst</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">∈</span><span class=\"w\"> </span><span class=\"n\">χ</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">zip</span><span class=\"w\"> </span><span class=\"n\">fr</span><span class=\"w\"> </span><span class=\"n\">too</span><span class=\"o\">)))</span>\n\n<span class=\"n\">goal</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">1</span><span class=\"w\"> </span><span class=\"n\">subgoal</span><span class=\"o\">):</span>\n<span class=\"w\"> </span><span class=\"n\">1.</span><span class=\"w\"> </span><span class=\"n\">constrained_to</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">renaming_subst</span><span class=\"w\"> </span><span class=\"n\">fr</span><span class=\"w\"> </span><span class=\"n\">too</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">χ</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">renaming_subst</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">map</span><span class=\"w\"> </span><span class=\"n\">fst</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">filter</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">λx.</span><span class=\"w\"> </span><span class=\"n\">fst</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">∈</span><span class=\"w\"> </span><span class=\"n\">χ</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">zip</span><span class=\"w\"> </span><span class=\"n\">fr</span><span class=\"w\"> </span><span class=\"n\">too</span><span class=\"o\">)))</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">map</span><span class=\"w\"> </span><span class=\"n\">snd</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">filter</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">λx.</span><span class=\"w\"> </span><span class=\"n\">fst</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">∈</span><span class=\"w\"> </span><span class=\"n\">χ</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">zip</span><span class=\"w\"> </span><span class=\"n\">fr</span><span class=\"w\"> </span><span class=\"n\">too</span><span class=\"o\">)))</span>\n</code></pre></div>\n<p>I don't think that the definitions are relevant, but these two are exactly the same, shouldn't it be easily proved? try cannot find anything and netiher can I. I didn't think it allowed shadowing in the first place, but I don't think theres any shadowing in my proof. What could cause this?</p>\n<p>EDIT:<br>\nLesson Learned:</p>\n<ol>\n<li>check colors of variables are the same</li>\n<li>check that types of things match (using <code>declare [[show_types, show_sorts]]</code>)</li>\n<li>when showing types, pay special attention to unused type varibles listed, these could occur in types not shown<br>\nThe problem is that some of my functions have freely chosen type variables, which was not shown, and instantiated differently at each call.</li>\n</ol>",
        "id": 435365369,
        "sender_full_name": "Jonathan Lindegaard Starup",
        "timestamp": 1714043612
    },
    {
        "content": "<p>Do all variables have matching colors? Can you post a screenshot of Isabelle/Jedit?</p>",
        "id": 435365709,
        "sender_full_name": "Lukas Stevens",
        "timestamp": 1714043744
    },
    {
        "content": "<p>Good point, but yes, same colors<br>\n<a href=\"/user_uploads/14278/CM6bzoeQ_4wPU1FefnTtkF8R/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/14278/CM6bzoeQ_4wPU1FefnTtkF8R/image.png\" title=\"image.png\"><img src=\"/user_uploads/14278/CM6bzoeQ_4wPU1FefnTtkF8R/image.png\"></a></div>",
        "id": 435365845,
        "sender_full_name": "Jonathan Lindegaard Starup",
        "timestamp": 1714043783
    },
    {
        "content": "<p>You could also do <code>declare [[show_types,show_sorts]]</code>. Maybe something is wrong there.</p>",
        "id": 435366107,
        "sender_full_name": "Lukas Stevens",
        "timestamp": 1714043884
    },
    {
        "content": "<p>Oh I didn't know about that, good idea<br>\n<a href=\"/user_uploads/14278/zqBPtqdLb6eRiseSpHkuxVwc/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/14278/zqBPtqdLb6eRiseSpHkuxVwc/image.png\" title=\"image.png\"><img src=\"/user_uploads/14278/zqBPtqdLb6eRiseSpHkuxVwc/image.png\"></a></div><p>They are different in a confusing way</p>",
        "id": 435366596,
        "sender_full_name": "Jonathan Lindegaard Starup",
        "timestamp": 1714044076
    },
    {
        "content": "<p>Oh I see how it works, but then they agree right?</p>",
        "id": 435367284,
        "sender_full_name": "Jonathan Lindegaard Starup",
        "timestamp": 1714044348
    },
    {
        "content": "<p>The <code>'a</code> matches. But where does the <code>'d</code> come from?</p>",
        "id": 435367665,
        "sender_full_name": "Lukas Stevens",
        "timestamp": 1714044496
    },
    {
        "content": "<p>It doesn't show anywhere so I'm not sure. Do you know how I would find out?</p>",
        "id": 435368075,
        "sender_full_name": "Jonathan Lindegaard Starup",
        "timestamp": 1714044641
    },
    {
        "content": "<p>looking at everything in <code>Print Context</code> with context, cases, terms, and theorems, there is no <code>'d</code></p>",
        "id": 435368380,
        "sender_full_name": "Jonathan Lindegaard Starup",
        "timestamp": 1714044749
    },
    {
        "content": "<p>oh, <code>renaming_subst</code> has type <code>'a list ⇒ 'a list ⇒ 'a ⇒ ('b, 'a) Type.type</code> so the <code>'b</code> is unconstrained by the input, so I guess this <code>'b</code> is instantiated differently, not shown in the annotations. And I'm trying to prove equivalence independent on type instantiation.</p>",
        "id": 435369980,
        "sender_full_name": "Jonathan Lindegaard Starup",
        "timestamp": 1714045328
    },
    {
        "content": "<p>Annotations that force the type parameter worked. I'm not sure how to make it pretty but its a solution. Thank you :)</p>",
        "id": 435371451,
        "sender_full_name": "Jonathan Lindegaard Starup",
        "timestamp": 1714045906
    }
]