[
    {
        "content": "<p>This is all going to sound very vague but I am using a lot of functions and definitions I defined that are hard for others to make sense of, so I'll try my best to abstract the situation.<br>\nI'm trying to prove that given 2 lists that are finite,</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"n\">P</span><span class=\"w\"> </span><span class=\"n\">l1</span><span class=\"w\"> </span><span class=\"n\">l2</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"n\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Q</span><span class=\"w\"> </span><span class=\"n\">l1</span><span class=\"w\"> </span><span class=\"n\">l2</span>\n</code></pre></div>\n<p>using a lemma that states </p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"n\">lemma1</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">P</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">h1</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">h2</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"n\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Q</span><span class=\"w\"> </span><span class=\"n\">l1</span><span class=\"w\"> </span><span class=\"n\">l2</span>\n</code></pre></div>\n<p>by doing induction on the structure of the lists(using the regular list induction doesn't work so I defined my own induction hypothesis. The problem is that, Q is an existential quantifier, so when I use the lemma, I obtain two new lists, say n1 n2, on which I'd like to use my induction hypothesis on , but my induction hypothesis is constrained to using l1 l2 only. Ideally I'd like to use lemma1 to show Q  for all elements of l1 l2, then obtain the lists for those,  use my induction hypothesis on all those as well and so on and so forth.  I'm not sure if I can do this or if I should find a totally new approach or what.<br>\nTIA</p>",
        "id": 433719334,
        "sender_full_name": "ee",
        "timestamp": 1713348388
    },
    {
        "content": "<p>in <code>lemma1</code> what's the relationship of <code>h1</code> <code>h2</code> to <code>l1</code> <code>l2</code> ?</p>\n<p>did you mean <code>P [h1] [h2] ==&gt; Q [h1] [h2]</code> ? if so, if looks like you are defining something that should use <code>list_all2</code>?</p>\n<p>also, maybe adding <code>arbitrary: l1 l2</code> to your induction would help?</p>",
        "id": 433904301,
        "sender_full_name": "Yong Kiam",
        "timestamp": 1713406636
    },
    {
        "content": "<p>or using list_all2_induct</p>",
        "id": 433929079,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1713419899
    },
    {
        "content": "<p>From your description, this sounds like you are trying to prove:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span>\n<span class=\"w\">  </span><span class=\"kp\">assumes</span><span class=\"w\"> </span><span class=\"s\">‹list_all2 P x y›</span><span class=\"w\"> </span><span class=\"s\">‹Q [] [] []›</span>\n<span class=\"w\">    </span><span class=\"s\">‹⋀a b x y c d. Q [x] a b ⟹ Q y c d ⟹ Q (x#y) c d›</span>\n<span class=\"w\">  </span><span class=\"kp\">assumes</span><span class=\"w\"> </span><span class=\"s\">‹⋀x y. P x y ⟹ ∃a b. Q [x] a b›</span>\n<span class=\"w\">  </span><span class=\"kp\">shows</span><span class=\"w\"> </span><span class=\"s\">‹∃a b. Q x a b›</span>\n<span class=\"w\">  </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">assms</span>\n<span class=\"w\">  </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">induction</span><span class=\"w\"> </span><span class=\"n\">rule</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">list_all2_induct</span><span class=\"o\">)</span>\n<span class=\"w\">    </span><span class=\"n\">fastforce</span><span class=\"o\">+</span>\n</code></pre></div>",
        "id": 433931203,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1713420100
    },
    {
        "content": "<p>But: I totally fail to see what you tried and that did not work.</p>",
        "id": 433931621,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1713420134
    },
    {
        "content": "<p>Even if you do not know <code>list_all2_induct</code>, a bit of isar + induction on <code>x</code> + <code>arbitrary: y</code> should be enough…</p>",
        "id": 433931857,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1713420169
    },
    {
        "content": "<p>I do enjoy receiving ideas for homework for my students however…</p>",
        "id": 433932820,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1713420259
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"234226\">Yong Kiam</span> <a href=\"#narrow/stream/238552-Beginner-Questions/topic/how.20to.20adjust.20inductive.20hypothesis/near/433904301\">said</a>:</p>\n<blockquote>\n<p>in <code>lemma1</code> what's the relationship of <code>h1</code> <code>h2</code> to <code>l1</code> <code>l2</code> ?</p>\n<p>did you mean <code>P [h1] [h2] ==&gt; Q [h1] [h2]</code> ? if so, if looks like you are defining something that should use <code>list_all2</code>?</p>\n<p>also, maybe adding <code>arbitrary: l1 l2</code> to your induction would help?</p>\n</blockquote>\n<p>sorry about the late response. <code>P [h1] [h2] ==&gt; Q [h1] [h2]</code> is what I meant indeed. <br>\nQuestion about the arbitraries, when I do arbitrary:  l1 l2 and do the induction, I lose the structure of the list in the induction, what I'm trying to say is</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"w\">  </span><span class=\"k\">proof</span><span class=\"o\">(</span><span class=\"n\">induct</span><span class=\"w\"> </span><span class=\"n\">l1</span><span class=\"w\"> </span><span class=\"n\">arbitrary</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">l1</span><span class=\"w\"> </span><span class=\"n\">l2</span><span class=\"w\"> </span><span class=\"n\">rule</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">ind1</span><span class=\"o\">)</span>\n<span class=\"w\">    </span><span class=\"k\">case</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">sing</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"o\">)</span>\n<span class=\"w\">    </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"k\">case</span><span class=\"w\"> </span><span class=\"gr\">sorry</span>\n<span class=\"w\">  </span><span class=\"k\">next</span>\n<span class=\"w\">    </span><span class=\"k\">case</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">trip</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"o\">)</span>\n<span class=\"w\">    </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"s\">\"P l1 l2\"</span><span class=\"w\"> </span><span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>I do this, but it forgets that in this case l1 = trip x f y and then I can't have \"P (trip x f y ) l2 \", which  I need to do the proof properly(actually doing \"arbitrary: l1 l2\" enables me to rpove anything w/o using any of the lemmas I want to use <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span>) .But if I only do \"  proof(induct l1 arbitrary: l2 rule: ind1)\", the induction hypothesis is too tight for me to use with the new lists I obtain from the existential quantification</p>",
        "id": 434360661,
        "sender_full_name": "ee",
        "timestamp": 1713532567
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"233198\">Mathias Fleury</span> <a href=\"#narrow/stream/238552-Beginner-Questions/topic/how.20to.20adjust.20inductive.20hypothesis/near/433931621\">said</a>:</p>\n<blockquote>\n<p>But: I totally fail to see what you tried and that did not work.</p>\n</blockquote>\n<p>This is my main problem, I think. I tried defining a few other induction theorems yet they either never work from the beginning or run into similar issues.<br>\n<a href=\"#narrow/stream/238552-Beginner-Questions/topic/how.20to.20adjust.20inductive.20hypothesis/near/434360661\">https://isabelle.zulipchat.com/#narrow/stream/238552-Beginner-Questions/topic/how.20to.20adjust.20inductive.20hypothesis/near/434360661</a></p>\n<p>Also, if you have a class teaching Isabelle, or uses it heavily and it's open to participation by others, I'm super interested <span aria-label=\"eyes\" class=\"emoji emoji-1f440\" role=\"img\" title=\"eyes\">:eyes:</span></p>",
        "id": 434363495,
        "sender_full_name": "ee",
        "timestamp": 1713533432
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"687550\">ee</span> <a href=\"#narrow/stream/238552-Beginner-Questions/topic/how.20to.20adjust.20inductive.20hypothesis/near/434360661\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"234226\">Yong Kiam</span> <a href=\"#narrow/stream/238552-Beginner-Questions/topic/how.20to.20adjust.20inductive.20hypothesis/near/433904301\">said</a>:</p>\n<blockquote>\n<p>in <code>lemma1</code> what's the relationship of <code>h1</code> <code>h2</code> to <code>l1</code> <code>l2</code> ?</p>\n<p>did you mean <code>P [h1] [h2] ==&gt; Q [h1] [h2]</code> ? if so, if looks like you are defining something that should use <code>list_all2</code>?</p>\n<p>also, maybe adding <code>arbitrary: l1 l2</code> to your induction would help?</p>\n</blockquote>\n<p>sorry about the late response. <code>P [h1] [h2] ==&gt; Q [h1] [h2]</code> is what I meant indeed. <br>\nQuestion about the arbitraries, when I do arbitrary:  l1 l2 and do the induction, I lose the structure of the list in the induction, what I'm trying to say is</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"w\">  </span><span class=\"k\">proof</span><span class=\"o\">(</span><span class=\"n\">induct</span><span class=\"w\"> </span><span class=\"n\">l1</span><span class=\"w\"> </span><span class=\"n\">arbitrary</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">l1</span><span class=\"w\"> </span><span class=\"n\">l2</span><span class=\"w\"> </span><span class=\"n\">rule</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">ind1</span><span class=\"o\">)</span>\n<span class=\"w\">    </span><span class=\"k\">case</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">sing</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"o\">)</span>\n<span class=\"w\">    </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"k\">case</span><span class=\"w\"> </span><span class=\"gr\">sorry</span>\n<span class=\"w\">  </span><span class=\"k\">next</span>\n<span class=\"w\">    </span><span class=\"k\">case</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">trip</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"o\">)</span>\n<span class=\"w\">    </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"s\">\"P l1 l2\"</span><span class=\"w\"> </span><span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>I do this, but it forgets that in this case l1 = trip x f y and then I can't have \"P (trip x f y ) l2 \", which  I need to do the proof properly(actually doing \"arbitrary: l1 l2\" enables me to rpove anything w/o using any of the lemmas I want to use <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span>) .But if I only do \"  proof(induct l1 arbitrary: l2 rule: ind1)\", the induction hypothesis is too tight for me to use with the new lists I obtain from the existential quantification</p>\n</blockquote>\n<p>do not do induction on a variable and have that variable as arbitrary at the same time…</p>",
        "id": 434367459,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1713534711
    },
    {
        "content": "<p>(it makes not much sense from a logical point of view)</p>",
        "id": 434367808,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1713534827
    },
    {
        "content": "<p>without the actual definition it is very hard to see what is going wrong… If the proof is simply \"for each element, we pick the corresponding one given by the existential in Q\", then it is easy.</p>",
        "id": 434368469,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1713535021
    },
    {
        "content": "<p>As you are describing it, \"use with the new lists I obtain from the existential quantification\" does not apply since you are doing induction over the arguments of P and the existencial is only for Q…</p>",
        "id": 434368830,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1713535127
    }
]