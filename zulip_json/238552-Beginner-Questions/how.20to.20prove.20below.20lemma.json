[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">insert_sorted</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"'a :: linorder </span><span class=\"ss\">\\&lt;Rightarrow&gt;</span><span class=\"s\"> 'a list </span><span class=\"ss\">\\&lt;Rightarrow&gt;</span><span class=\"s\"> 'a list\"</span><span class=\"w\"> </span><span class=\"kp\">where</span>\n<span class=\"w\">  </span><span class=\"s\">\"insert_sorted x Nil = Cons x Nil\"</span>\n<span class=\"o\">|</span><span class=\"w\"> </span><span class=\"s\">\"insert_sorted x (Cons y ys) = (case x </span><span class=\"ss\">\\&lt;le&gt;</span><span class=\"s\"> y of</span>\n<span class=\"s\">      True </span><span class=\"ss\">\\&lt;Rightarrow&gt;</span><span class=\"s\"> Cons x (Cons y ys)</span>\n<span class=\"s\">    | False </span><span class=\"ss\">\\&lt;Rightarrow&gt;</span><span class=\"s\"> Cons y (insert_sorted x ys))\"</span>\n\n<span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">ins_sort</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"'a :: linorder list </span><span class=\"ss\">\\&lt;Rightarrow&gt;</span><span class=\"s\"> 'a list\"</span><span class=\"w\"> </span><span class=\"kp\">where</span>\n<span class=\"w\">  </span><span class=\"s\">\"ins_sort Nil = Nil\"</span>\n<span class=\"o\">|</span><span class=\"w\"> </span><span class=\"s\">\"ins_sort (Cons x xs) = insert_sorted x (ins_sort xs)\"</span>\n\n<span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">length_ins_sort</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"length (ins_sort xs) = length xs\"</span>\n</code></pre></div>",
        "id": 425100378,
        "sender_full_name": "Hongjian Jiang",
        "timestamp": 1709735573
    },
    {
        "content": "<p>this looks like a good exercise, what have you tried?</p>",
        "id": 425100613,
        "sender_full_name": "Yong Kiam",
        "timestamp": 1709735636
    },
    {
        "content": "<p>Yes, I am trying to learn isabelle from begining. I am really struggling to figure out auxiliary lemma. This lemma I try to prove by induction twice, and compare first two elements. But not work.</p>",
        "id": 425101331,
        "sender_full_name": "Hongjian Jiang",
        "timestamp": 1709735811
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">length_ins_sort</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"length (ins_sort xs) = length xs\"</span>\n<span class=\"k\">proof</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">induction</span><span class=\"w\"> </span><span class=\"n\">xs</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"k\">case</span><span class=\"w\"> </span><span class=\"n\">Nil</span>\n<span class=\"w\">  </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"k\">case</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">auto</span>\n<span class=\"k\">next</span>\n<span class=\"w\">  </span><span class=\"k\">case</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Cons</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">ys</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"k\">case</span><span class=\"w\"> </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"n\">auto</span>\n<span class=\"w\">  </span><span class=\"k\">proof</span><span class=\"o\">(</span><span class=\"n\">induct</span><span class=\"w\"> </span><span class=\"n\">ys</span><span class=\"o\">)</span>\n<span class=\"w\">    </span><span class=\"k\">case</span><span class=\"w\"> </span><span class=\"n\">Nil</span>\n<span class=\"w\">    </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"k\">case</span><span class=\"w\"> </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"n\">auto</span><span class=\"w\"> </span><span class=\"k\">done</span>\n<span class=\"w\">  </span><span class=\"k\">next</span>\n<span class=\"w\">    </span><span class=\"k\">case</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Cons</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"n\">zs</span><span class=\"o\">)</span>\n<span class=\"w\">    </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"k\">case</span>\n<span class=\"w\">    </span><span class=\"k\">proof</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">cases</span><span class=\"w\"> </span><span class=\"s\">\"a â‰¤ b\"</span><span class=\"o\">)</span>\n<span class=\"w\">      </span><span class=\"k\">case</span><span class=\"w\"> </span><span class=\"n\">True</span>\n<span class=\"w\">      </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">thesis</span><span class=\"w\">  </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"n\">simp</span><span class=\"w\">  </span><span class=\"gr\">sorry</span>\n<span class=\"w\">    </span><span class=\"k\">next</span>\n<span class=\"w\">      </span><span class=\"k\">case</span><span class=\"w\"> </span><span class=\"n\">False</span>\n<span class=\"w\">      </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">thesis</span><span class=\"w\"> </span><span class=\"gr\">sorry</span>\n<span class=\"w\">    </span><span class=\"k\">qed</span>\n<span class=\"w\">  </span><span class=\"k\">qed</span>\n<span class=\"k\">qed</span>\n</code></pre></div>",
        "id": 425101731,
        "sender_full_name": "Hongjian Jiang",
        "timestamp": 1709735905
    },
    {
        "content": "<p>you're on the right track: in this case, you probably want to start with an auxliary lemma about <code>insert_sorted</code> to keep things nicer --- you could think of a <code>length</code> property that holds for <code>insert_sorted</code></p>",
        "id": 425101842,
        "sender_full_name": "Yong Kiam",
        "timestamp": 1709735935
    },
    {
        "content": "<p>Thanks, it works now. Is there any basic idea to think about these auxiliar lemma?</p>",
        "id": 425102964,
        "sender_full_name": "Hongjian Jiang",
        "timestamp": 1709736236
    },
    {
        "content": "<p>in this case, <code>insert_sorted</code> is an auxiliary function for your insertion sort, so it makes sense that you would want to write an auxiliary lemma for it</p>",
        "id": 425103300,
        "sender_full_name": "Yong Kiam",
        "timestamp": 1709736303
    },
    {
        "content": "<p>Another question about proof : </p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">sqrt_2_irrational</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"</span><span class=\"ss\">\\&lt;not&gt;</span><span class=\"s\"> (</span><span class=\"ss\">\\&lt;exists&gt;</span><span class=\"s\"> q :: rat. q^2 = 2)\"</span>\n<span class=\"k\">proof</span>\n<span class=\"w\">  </span><span class=\"k\">text</span><span class=\"w\"> </span><span class=\"ss\">\\&lt;open&gt;</span><span class=\"s\">Each sorry can be removed by a proof search via @{command try} or @{command sledgehammer}.</span><span class=\"ss\">\\&lt;close&gt;</span>\n<span class=\"w\">  </span><span class=\"k\">assume</span><span class=\"w\"> </span><span class=\"s\">\"</span><span class=\"ss\">\\&lt;exists&gt;</span><span class=\"s\"> q :: rat. q^2 = 2\"</span>\n<span class=\"w\">  </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"k\">obtain</span><span class=\"w\"> </span><span class=\"n\">q</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"n\">rat</span><span class=\"w\"> </span><span class=\"kp\">where</span><span class=\"w\"> </span><span class=\"s\">\"q^2 = 2\"</span>\n<span class=\"w\">    </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">blast</span>\n<span class=\"w\">  </span><span class=\"k\">obtain</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"kp\">where</span><span class=\"w\"> </span><span class=\"s\">\"q = of_int m / of_int n\"</span><span class=\"w\">  </span><span class=\"s\">\"coprime m n\"</span>\n<span class=\"w\">    </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">metis</span><span class=\"w\"> </span><span class=\"n\">Fract_of_int_quotient</span><span class=\"w\"> </span><span class=\"n\">Rat_cases</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"s\">\"of_int m ^ 2 = (2::rat) * of_int n ^ 2\"</span>\n<span class=\"w\">    </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">metis</span><span class=\"w\"> </span><span class=\"s\">â€¹qâ‡§2 = 2â€º</span><span class=\"w\"> </span><span class=\"n\">divide_eq_0_iff</span><span class=\"w\"> </span><span class=\"n\">nonzero_eq_divide_eq</span><span class=\"w\"> </span><span class=\"n\">power_divide</span><span class=\"w\"> </span><span class=\"n\">zero_neq_numeral</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"s\">\"2 dvd m\"</span>\n<span class=\"w\">    </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">metis</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">mono_tags</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">lifting</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">even_mult_iff</span><span class=\"w\"> </span><span class=\"n\">even_numeral</span><span class=\"w\"> </span><span class=\"n\">of_int_eq_iff</span><span class=\"w\"> </span><span class=\"n\">of_int_mult</span><span class=\"w\"> </span><span class=\"n\">of_int_numeral</span><span class=\"w\"> </span><span class=\"n\">power2_eq_square</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"k\">obtain</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"w\"> </span><span class=\"kp\">where</span><span class=\"w\"> </span><span class=\"s\">\"m = 2*r\"</span>\n<span class=\"w\">    </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">blast</span>\n<span class=\"w\">  </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"s\">\"(2 :: rat) * of_int r ^ 2 = of_int n ^ 2\"</span>\n<span class=\"w\">    </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"s\">â€¹(rat_of_int m)â‡§2 = 2 * (rat_of_int n)â‡§2â€º</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">auto</span>\n<span class=\"w\">  </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"s\">\"2 dvd n\"</span>\n<span class=\"w\">    </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">metis</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">mono_tags</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">lifting</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">even_mult_iff</span><span class=\"w\"> </span><span class=\"n\">even_numeral</span><span class=\"w\"> </span><span class=\"n\">of_int_eq_iff</span><span class=\"w\"> </span><span class=\"n\">of_int_mult</span><span class=\"w\"> </span><span class=\"n\">of_int_numeral</span><span class=\"w\"> </span><span class=\"n\">power2_eq_square</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"n\">False</span>\n<span class=\"w\">    </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"s\">â€¹coprime m nâ€º</span><span class=\"w\"> </span><span class=\"s\">â€¹even mâ€º</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">auto</span>\n<span class=\"k\">qed</span>\n\n\n<span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">sqrt_2_irrational_main</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"</span><span class=\"ss\">\\&lt;not&gt;</span><span class=\"s\"> (</span><span class=\"ss\">\\&lt;exists&gt;</span><span class=\"s\"> (q :: real) </span><span class=\"ss\">\\&lt;in&gt;</span><span class=\"s\"> </span><span class=\"ss\">\\&lt;rat&gt;</span><span class=\"s\">. q^2 = 2)\"</span>\n<span class=\"w\">  </span><span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>Any helps would be appreciated.</p>",
        "id": 425259823,
        "sender_full_name": "Hongjian Jiang",
        "timestamp": 1709803482
    },
    {
        "content": "<p>what's the question?</p>",
        "id": 425330784,
        "sender_full_name": "Yong Kiam",
        "timestamp": 1709824713
    },
    {
        "content": "<p>My guess is that: if this is an Isabelle question, then the answer to the question is <code>Rats_cases</code>. If the question is \"how do I start here\", then the answer is: how would you start on paper?</p>",
        "id": 425332541,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1709825120
    }
]