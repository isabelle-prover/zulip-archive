[
    {
        "content": "<p>I'm having trouble setting up an induction when the goal is an <code>obtains</code>. Here is the simple lemma about lists that I am trying to prove:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">theory</span> <span class=\"n\">Untitled</span><span class=\"o\">-</span><span class=\"n\">1</span>\n<span class=\"kp\">imports</span> <span class=\"n\">Main</span>\n<span class=\"k\">begin</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">test</span><span class=\"o\">:</span>\n  <span class=\"kp\">assumes</span> <span class=\"s\">\"l1 ≠ l2\"</span> <span class=\"s\">\"length l1 = length l2\"</span>\n  <span class=\"kp\">obtains</span> <span class=\"n\">k</span> <span class=\"kp\">where</span> <span class=\"s\">\"l1 ! k ≠ l2 ! k\"</span> <span class=\"s\">\"drop (Suc k) l1 = drop (Suc k) l2\"</span>\n<span class=\"k\">using</span> <span class=\"n\">assms</span> <span class=\"k\">proof</span> <span class=\"o\">(</span><span class=\"n\">induction</span> <span class=\"n\">l1</span> <span class=\"n\">arbitrary</span><span class=\"o\">:</span> <span class=\"n\">l2</span><span class=\"o\">)</span>\n  <span class=\"k\">case</span> <span class=\"n\">Nil</span>\n  <span class=\"k\">thus</span> <span class=\"o\">?</span><span class=\"k\">case</span> <span class=\"k\">by</span> <span class=\"n\">simp</span>\n<span class=\"k\">next</span>\n  <span class=\"k\">case</span> <span class=\"o\">(</span><span class=\"n\">Cons</span> <span class=\"n\">a</span> <span class=\"n\">l</span><span class=\"o\">)</span>\n  <span class=\"k\">thus</span> <span class=\"o\">?</span><span class=\"k\">case</span> <span class=\"gr\">sorry</span>\n<span class=\"k\">qed</span>\n\n<span class=\"k\">end</span>\n</code></pre></div>\n<p>The <code>Cons</code> case introduces the following state:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"o\">(</span><span class=\"err\">⋀</span><span class=\"n\">k.</span> <span class=\"n\">l</span> <span class=\"o\">!</span> <span class=\"n\">k</span> <span class=\"err\">≠</span> <span class=\"o\">?</span><span class=\"n\">l2.0</span> <span class=\"o\">!</span> <span class=\"n\">k</span> <span class=\"err\">⟹</span> <span class=\"n\">drop</span> <span class=\"o\">(</span><span class=\"n\">Suc</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"n\">l</span> <span class=\"o\">=</span> <span class=\"n\">drop</span> <span class=\"o\">(</span><span class=\"n\">Suc</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">?</span><span class=\"n\">l2.0</span> <span class=\"err\">⟹</span> <span class=\"n\">thesis</span><span class=\"o\">)</span> <span class=\"err\">⟹</span> <span class=\"n\">l</span> <span class=\"err\">≠</span> <span class=\"o\">?</span><span class=\"n\">l2.0</span> <span class=\"err\">⟹</span> <span class=\"n\">length</span> <span class=\"n\">l</span> <span class=\"o\">=</span> <span class=\"n\">length</span> <span class=\"o\">?</span><span class=\"n\">l2.0</span> <span class=\"err\">⟹</span> <span class=\"n\">thesis</span>\n<span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"err\">#</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">!</span> <span class=\"o\">?</span><span class=\"n\">k</span> <span class=\"err\">≠</span> <span class=\"n\">l2</span> <span class=\"o\">!</span> <span class=\"o\">?</span><span class=\"n\">k</span> <span class=\"err\">⟹</span> <span class=\"n\">drop</span> <span class=\"o\">(</span><span class=\"n\">Suc</span> <span class=\"o\">?</span><span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"err\">#</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">=</span> <span class=\"n\">drop</span> <span class=\"o\">(</span><span class=\"n\">Suc</span> <span class=\"o\">?</span><span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"n\">l2</span> <span class=\"err\">⟹</span> <span class=\"n\">thesis</span>\n<span class=\"n\">a</span> <span class=\"err\">#</span> <span class=\"n\">l</span> <span class=\"err\">≠</span> <span class=\"n\">l2</span>\n<span class=\"n\">length</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"err\">#</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">=</span> <span class=\"n\">length</span> <span class=\"n\">l2</span>\n</code></pre></div>\n<p>The first hypothesis is not a helpful induction hypothesis: I would like something like the following:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"n\">l</span> <span class=\"err\">≠</span> <span class=\"o\">?</span><span class=\"n\">l2.0</span> <span class=\"err\">⟹</span> <span class=\"n\">length</span> <span class=\"n\">l</span> <span class=\"o\">=</span> <span class=\"n\">length</span> <span class=\"o\">?</span><span class=\"n\">l2.0</span> <span class=\"err\">⟹</span> <span class=\"o\">(</span><span class=\"err\">⋀</span><span class=\"n\">k.</span> <span class=\"n\">l</span> <span class=\"o\">!</span> <span class=\"n\">k</span> <span class=\"err\">≠</span> <span class=\"o\">?</span><span class=\"n\">l2.0</span> <span class=\"o\">!</span> <span class=\"n\">k</span> <span class=\"err\">⟹</span> <span class=\"n\">drop</span> <span class=\"o\">(</span><span class=\"n\">Suc</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"n\">l</span> <span class=\"o\">=</span> <span class=\"n\">drop</span> <span class=\"o\">(</span><span class=\"n\">Suc</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">?</span><span class=\"n\">l2.0</span> <span class=\"err\">⟹</span> <span class=\"n\">thesis</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>(i.e. I want to conclude existence of such a <code>k</code> by induction, rather than having to prove it from nothing).</p>\n<p>When I change to an existential conclusion (<code>shows \"∃k. l1 ! k ≠ l2 ! k ∧ drop (Suc k) l1 = drop (Suc k) l2\"</code>), the induction is set up correctly (albeit more messily). Am I doing something wrong, or is this a limitation of <code>obtains</code>?</p>",
        "id": 296413331,
        "sender_full_name": "Artem Khovanov",
        "timestamp": 1661966799
    },
    {
        "content": "<p>Personally, I usually prefer to induct on <code>shows \"∃k. l1 ! k ≠ l2 ! k ∧ drop (Suc k) l1 = drop (Suc k) l2\"</code> rather than on <code>obtains</code>...</p>",
        "id": 296476417,
        "sender_full_name": "Wenda Li",
        "timestamp": 1661992559
    },
    {
        "content": "<p>Yes, this works, but the induction is messier. I was wondering if you can use obtains properly somehow.</p>",
        "id": 296493705,
        "sender_full_name": "Artem Khovanov",
        "timestamp": 1661993849
    }
]