[
    {
        "content": "<p>Hi :)</p>\n<p>I have an inductive definition of the following form:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">definition</span><span class=\"w\"> </span><span class=\"n\">P</span><span class=\"w\"> </span><span class=\"kp\">where</span><span class=\"w\"> </span><span class=\"s\">\"P ≡ undefined\"</span>\n\n<span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"'a ⇒ nat\"</span><span class=\"w\"> </span><span class=\"kp\">where</span><span class=\"w\"> </span><span class=\"s\">\"f x = undefined\"</span>\n\n<span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"s\">\"P a b ⟹ f a &lt; f b\"</span>\n<span class=\"w\">  </span><span class=\"gr\">sorry</span>\n\n<span class=\"k\">inductive</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"kp\">where</span>\n<span class=\"s\">\"f a = 0 ⟹ i a\"</span>\n<span class=\"o\">|</span><span class=\"w\"> </span><span class=\"s\">\"P a b ⟹ ¬ i a ⟹ i b\"</span>\n</code></pre></div>\n<p>Isabelle now failes at the inductive definition: </p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"n\">Proof</span><span class=\"w\"> </span><span class=\"n\">failed.</span>\n<span class=\"w\"> </span><span class=\"n\">1.</span><span class=\"w\"> </span><span class=\"n\">⋀x</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"n\">xa</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">b.</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">(?</span><span class=\"n\">x24</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"n\">xa</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">⟶</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">(?</span><span class=\"n\">x24</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"n\">xa</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">⟹</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">⟶</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">a</span>\n<span class=\"n\">The</span><span class=\"w\"> </span><span class=\"n\">error</span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">above</span><span class=\"w\"> </span><span class=\"n\">occurred</span><span class=\"w\"> </span><span class=\"kp\">for</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">goal</span><span class=\"w\"> </span><span class=\"n\">statement⌂</span><span class=\"o\">:</span>\n<span class=\"n\">mono</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">λp</span><span class=\"w\"> </span><span class=\"n\">x.</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">∃a.</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">∧</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">0</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">∨</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">∃a</span><span class=\"w\"> </span><span class=\"n\">b.</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"n\">∧</span><span class=\"w\"> </span><span class=\"n\">P</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"n\">∧</span><span class=\"w\"> </span><span class=\"n\">¬</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>When I change the \"¬ i a\" to \"i a\", the definition succeeds. Does someone have an idea why this could be?</p>\n<p>Many thanks in advance :)</p>",
        "id": 510505283,
        "sender_full_name": "Jakob Schulz",
        "timestamp": 1743962095
    },
    {
        "content": "<p>It seems to be only the generation of the simplification theorem</p>",
        "id": 510506853,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1743963197
    },
    {
        "content": "<p>This already triggers it:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">inductive</span><span class=\"w\"> </span><span class=\"n\">j</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">‹nat ⇒ bool›</span><span class=\"w\"> </span><span class=\"kp\">where</span>\n<span class=\"w\"> </span><span class=\"s\">‹j (Suc b)›</span><span class=\"w\"> </span><span class=\"kp\">if</span><span class=\"w\">  </span><span class=\"s\">‹¬j b›</span>\n</code></pre></div>",
        "id": 510506947,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1743963245
    },
    {
        "content": "<p>You should probably report that on the mailing list</p>",
        "id": 510506965,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1743963259
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"233198\">Mathias Fleury</span> <a href=\"#narrow/channel/238552-Beginner-Questions/topic/inductive.20definition.20fails/near/510506853\">said</a>:</p>\n<blockquote>\n<p>It seems to be only the generation of the simplification theorem</p>\n</blockquote>\n<p>However, I am actually not sure that it is possible to generate those theorems</p>",
        "id": 510507022,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1743963308
    },
    {
        "content": "<p>Isn't the problem here that these rules are not monotonic? There is no fixpoint (and thus no inductive predicate) of the rules if they are not monotonic</p>",
        "id": 510524454,
        "sender_full_name": "Jan van Brügge",
        "timestamp": 1743977024
    },
    {
        "content": "<p>Thank you for your responses!</p>\n<p>Then it seems that an <code>inductive</code> definition might not be the correct choice here. I'm going to use a normal <code>function</code>instead:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">function</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"kp\">where</span>\n<span class=\"s\">\"i a = ((f a = 0) ∨ (∃b. P b a ∧ i b))\"</span>\n<span class=\"w\">  </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">simp_all</span>\n</code></pre></div>",
        "id": 510676504,
        "sender_full_name": "Jakob Schulz",
        "timestamp": 1744033713
    },
    {
        "content": "<p>Don't forget to prove termination of this</p>",
        "id": 510677031,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1744033823
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"233198\">Mathias Fleury</span> <a href=\"#narrow/channel/238552-Beginner-Questions/topic/inductive.20definition.20fails/near/510677031\">said</a>:</p>\n<blockquote>\n<p>Don't forget to prove termination of this</p>\n</blockquote>\n<p>Oh, I thought this would only be required if I actually evaluate the function? <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> </p>\n<p>I would not know how to do a termination proof in this case...the type of b is infinite, but there are only finitely many <code>b</code> that satisfy <code>P b a</code> (and they all satisfy <code>f b &lt; f a</code> by the lemma).</p>",
        "id": 510678435,
        "sender_full_name": "Jakob Schulz",
        "timestamp": 1744034092
    },
    {
        "content": "<blockquote>\n<p>Oh, I thought this would only be required if I actually evaluate the function? </p>\n</blockquote>\n<p>Or prove anything about it</p>",
        "id": 510678701,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1744034147
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"422558\">Jakob Schulz</span> <a href=\"#narrow/channel/238552-Beginner-Questions/topic/inductive.20definition.20fails/near/510678435\">said</a>:</p>\n<blockquote>\n<p>I would not know how to do a termination proof in this case...the type of b is infinite, but there are only finitely many <code>b</code> that satisfy <code>P b a</code> (and they all satisfy <code>f b &lt; f a</code> by the lemma).</p>\n</blockquote>\n<p>That sounds too weak to me. It should be possible to make it loop by having f 0 calling f 1 and f 1 calling f 0</p>",
        "id": 510679459,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1744034294
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"233198\">Mathias Fleury</span> <a href=\"#narrow/channel/238552-Beginner-Questions/topic/inductive.20definition.20fails/near/510678701\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>Oh, I thought this would only be required if I actually evaluate the function? </p>\n</blockquote>\n<p>Or prove anything about it</p>\n</blockquote>\n<p>Okay, in some cases you can get away with not proving termination, but having only termination on local fragments. But you need termination to even be able to unfold the definition.</p>",
        "id": 510681079,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1744034630
    }
]