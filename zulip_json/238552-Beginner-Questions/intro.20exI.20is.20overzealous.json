[
    {
        "content": "<p>I have a goal with the shape <code>∃l r. ?P l r</code>. I would like to provide the expressions to be used for l and r. I can do it like this:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code>    <span class=\"k\">show</span> <span class=\"o\">?</span><span class=\"n\">thesis</span>\n      <span class=\"kp\">apply</span> <span class=\"o\">(</span><span class=\"n\">rule</span> <span class=\"n\">exI</span><span class=\"o\">[</span><span class=\"n\">of</span> <span class=\"o\">_</span> <span class=\"s\">\"x # l\"</span><span class=\"o\">])</span>\n      <span class=\"kp\">apply</span> <span class=\"o\">(</span><span class=\"n\">rule</span> <span class=\"n\">exI</span><span class=\"o\">[</span><span class=\"n\">of</span> <span class=\"o\">_</span> <span class=\"n\">r</span><span class=\"o\">])</span>\n      <span class=\"k\">using</span> <span class=\"sx\">`x ≠ a`</span> <span class=\"err\">*</span> <span class=\"k\">by</span> <span class=\"n\">auto</span>\n</code></pre></div>\n<p>but that's really clumsy. Ideally I'd have a proof method with behavior in between <code>rule</code> and <code>intro</code>, in that it can deal with goals that have an extra assumption, but the rule is applied only once. For reference, here is the full proof:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">remove1_split</span><span class=\"o\">:</span>\n  <span class=\"kp\">assumes</span> <span class=\"s\">\"a ∈ set xs\"</span>\n  <span class=\"kp\">shows</span> <span class=\"s\">\"∃l r. xs = l @ a # r ∧ remove1 a xs = l @ r\"</span>\n<span class=\"k\">using</span> <span class=\"n\">assms</span> <span class=\"k\">proof</span> <span class=\"o\">(</span><span class=\"n\">induction</span> <span class=\"n\">xs</span><span class=\"o\">)</span>\n  <span class=\"k\">case</span> <span class=\"o\">(</span><span class=\"n\">Cons</span> <span class=\"n\">x</span> <span class=\"n\">xs</span><span class=\"o\">)</span>\n  <span class=\"k\">show</span> <span class=\"o\">?</span><span class=\"k\">case</span>\n  <span class=\"k\">proof</span> <span class=\"n\">cases</span>\n    <span class=\"k\">assume</span> <span class=\"s\">\"x = a\"</span>\n    <span class=\"k\">show</span> <span class=\"o\">?</span><span class=\"n\">thesis</span>\n      <span class=\"kp\">apply</span> <span class=\"o\">(</span><span class=\"n\">rule</span> <span class=\"n\">exI</span><span class=\"o\">[</span><span class=\"n\">of</span> <span class=\"o\">_</span> <span class=\"s\">\"[]\"</span><span class=\"o\">])</span>\n      <span class=\"k\">using</span> <span class=\"sx\">`x = a`</span> <span class=\"k\">by</span> <span class=\"n\">simp</span>\n  <span class=\"k\">next</span>\n    <span class=\"k\">assume</span> <span class=\"s\">\"x ≠ a\"</span>\n    <span class=\"k\">then</span> <span class=\"k\">have</span> <span class=\"s\">\"a ∈ set xs\"</span>\n      <span class=\"k\">using</span> <span class=\"sx\">`a ∈ set (x # xs)`</span>\n      <span class=\"k\">by</span> <span class=\"n\">simp</span>\n    <span class=\"k\">then</span> <span class=\"k\">obtain</span> <span class=\"n\">l</span> <span class=\"n\">r</span> <span class=\"kp\">where</span> <span class=\"err\">*</span><span class=\"o\">:</span> <span class=\"s\">\"xs = l @ a # r ∧ remove1 a xs = l @ r\"</span>\n      <span class=\"k\">using</span> <span class=\"n\">Cons.IH</span> <span class=\"k\">by</span> <span class=\"n\">auto</span>\n    <span class=\"k\">show</span> <span class=\"o\">?</span><span class=\"n\">thesis</span>\n      <span class=\"kp\">apply</span> <span class=\"o\">(</span><span class=\"n\">rule</span> <span class=\"n\">exI</span><span class=\"o\">[</span><span class=\"n\">of</span> <span class=\"o\">_</span> <span class=\"s\">\"x # l\"</span><span class=\"o\">])</span>\n      <span class=\"kp\">apply</span> <span class=\"o\">(</span><span class=\"n\">rule</span> <span class=\"n\">exI</span><span class=\"o\">[</span><span class=\"n\">of</span> <span class=\"o\">_</span> <span class=\"n\">r</span><span class=\"o\">])</span>\n      <span class=\"k\">using</span> <span class=\"sx\">`x ≠ a`</span> <span class=\"err\">*</span> <span class=\"k\">by</span> <span class=\"n\">auto</span>\n  <span class=\"k\">qed</span>\n<span class=\"k\">qed</span> <span class=\"n\">simp</span>\n</code></pre></div>",
        "id": 229966035,
        "sender_full_name": "Jakub Kądziołka",
        "timestamp": 1615517135
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>      by (rule exI[of _ &quot;[]&quot;])\n        (use `x = a` in auto)\n...\n\n      by (rule exI[of _ &quot;x # l&quot;], rule exI[of _ r])\n        (use `x ≠ a` * in auto)\n</code></pre></div>",
        "id": 229981813,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1615529466
    },
    {
        "content": "<p>Otherwise, you go for</p>\n<div class=\"codehilite\"><pre><span></span><code>      apply  (use `x ≠ a` * in ‹auto intro: exI[of _ &quot;x # l&quot;] exI[of _ r]›)\n</code></pre></div>",
        "id": 229981965,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1615529553
    },
    {
        "content": "<p>However, I don't believe that there is a rule that applies the theorems one-by-one.</p>",
        "id": 229982030,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1615529593
    },
    {
        "content": "<p>I wrote a method called <code>inst_existentials</code> for this once, it can be found e.g. in <code>HOL-Real_Asymp.Inst_Existentials</code>. Perhaps I should put it in a more prominent place at some point…</p>",
        "id": 229993294,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1615538054
    },
    {
        "content": "<p>It can also instantiate existentials nested inside conjunctions. I wrote it because in coinductive proofs, your goal can sometimes be of the shape that you have 6 existential quantifiers (sometimes nested in conjunctions) and once you instantiate them correctly the rest is automatic.</p>",
        "id": 229993399,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1615538127
    }
]