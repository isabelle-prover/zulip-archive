[
    {
        "content": "<p>Is this possible in Isabelle? Like in Haskell we can write <code>(+) a b = myfun a b</code> and use it as <code>a + b</code> within a local scope.</p>",
        "id": 377150956,
        "sender_full_name": "Naso",
        "timestamp": 1689903364
    },
    {
        "content": "<p>You can introduce notation with the <code>notation</code> command</p>",
        "id": 377202585,
        "sender_full_name": "Lukas Stevens",
        "timestamp": 1689925531
    },
    {
        "content": "<p><code>notation myfun (infixl \"+\" 50)</code></p>",
        "id": 377202815,
        "sender_full_name": "Lukas Stevens",
        "timestamp": 1689925590
    },
    {
        "content": "<p>Unlike with Haskell, you even can introduce notation locally, using <code>write</code>.</p>",
        "id": 377349629,
        "sender_full_name": "Wolfgang Jeltsch",
        "timestamp": 1689955134
    },
    {
        "content": "<p>I should clarify. I often have binary operators that take an additional parameter, e.g.<br>\n<code>comb V a b</code></p>\n<p>In the context of a proof, <code>V</code> is fixed, so I would like to write something (in haskell notation)</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"o\">(+)</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">comb</span><span class=\"w\"> </span><span class=\"n\">V</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">b</span>\n</code></pre></div>\n<p>so that within the local context of the proof, I can use the infix operator <code>+</code> instead of <code>comb V</code>. Is this possible?</p>",
        "id": 377489398,
        "sender_full_name": "Naso",
        "timestamp": 1690003250
    },
    {
        "content": "<p>I don’t know whether <code>write</code> can handle partial applications. Maybe you have to locally define a new constant that is equal to the partial application and give it the operator notation, something like the following:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"n\">define</span><span class=\"w\"> </span><span class=\"n\">add</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"kp\">infixl</span><span class=\"w\"> </span><span class=\"n\">…</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"kp\">where</span><span class=\"w\"> </span><span class=\"n\">add</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">comb</span><span class=\"w\"> </span><span class=\"n\">V</span>\n</code></pre></div>\n<p>However, this means that you have to use the defining equation in proofs to tell Isabelle that <code>add</code> and <code>comb V</code> are the same thing. For proof methods involving the simplifier, this can be done once and for all by prefixing the defining equation with <code>[simp]:</code>.</p>",
        "id": 377632558,
        "sender_full_name": "Wolfgang Jeltsch",
        "timestamp": 1690040526
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"423655\">Wolfgang Jeltsch</span> <a href=\"#narrow/stream/238552-Beginner-Questions/topic/local.20infix.20operator.20definition/near/377632558\">said</a>:</p>\n<blockquote>\n<p>I don’t know whether <code>write</code> can handle partial applications. Maybe you have to locally define a new constant that is equal to the partial application and give it the operator notation, something like the following:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"n\">define</span><span class=\"w\"> </span><span class=\"n\">add</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"kp\">infixl</span><span class=\"w\"> </span><span class=\"n\">…</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"kp\">where</span><span class=\"w\"> </span><span class=\"n\">add</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">comb</span><span class=\"w\"> </span><span class=\"n\">V</span>\n</code></pre></div>\n<p>However, this means that you have to use the defining equation in proofs to tell Isabelle that <code>add</code> and <code>comb V</code> are the same thing. For proof methods involving the simplifier, this can be done once and for all by prefixing the defining equation with <code>[simp]:</code>.</p>\n</blockquote>\n<p>Thanks! I'm not completely sure what you mean though. I've tried this in a <code>proof - </code> context and I have an error:</p>\n<p><a href=\"/user_uploads/14278/iepYvj1YQV0Jzm4Gkj7Sh-Ks/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/14278/iepYvj1YQV0Jzm4Gkj7Sh-Ks/image.png\" title=\"image.png\"><img src=\"/user_uploads/14278/iepYvj1YQV0Jzm4Gkj7Sh-Ks/image.png\"></a></div><p>Maybe I have misunderstood what was supposed to go in your ellipses?</p>\n<p>Actually a more preferable place to make this definition would be in the statement of the lemma, in a <code>defines</code>. is that possible? Either way would be great though!</p>",
        "id": 377703668,
        "sender_full_name": "Naso",
        "timestamp": 1690072210
    },
    {
        "content": "<p>You are not using the syntax correctly:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"w\">  </span><span class=\"n\">define</span><span class=\"w\"> </span><span class=\"n\">comb</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">‹nat ⇒ nat ⇒ nat ⇒ nat›</span><span class=\"w\"> </span><span class=\"kp\">where</span><span class=\"w\"> </span><span class=\"s\">‹comb = undefined›</span>\n<span class=\"w\">  </span><span class=\"n\">define</span><span class=\"w\"> </span><span class=\"n\">V</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">‹nat›</span><span class=\"w\"> </span><span class=\"kp\">where</span><span class=\"w\"> </span><span class=\"s\">‹V = undefined›</span>\n<span class=\"w\">  </span><span class=\"n\">define</span><span class=\"w\"> </span><span class=\"s\">\"add\"</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"kp\">infixl</span><span class=\"w\"> </span><span class=\"s\">‹combV›</span><span class=\"w\"> </span><span class=\"n\">55</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"kp\">where</span><span class=\"w\"> </span><span class=\"s\">\"a combV b = comb V a b\"</span><span class=\"w\"> </span><span class=\"kp\">for</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">b</span>\n<span class=\"w\">  </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"s\">‹a combV b = comb V b a›</span><span class=\"w\"> </span><span class=\"kp\">for</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">b</span>\n<span class=\"w\">    </span><span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 377738757,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1690090561
    },
    {
        "content": "<p>I would suggest using bold + (C-e rightarrow for bold) if you need a new operator instead of +</p>",
        "id": 377739071,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1690090690
    }
]