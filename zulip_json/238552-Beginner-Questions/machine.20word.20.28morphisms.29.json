[
    {
        "content": "<p>Hi, I'm new to Isabelle and I'm trying to understand a bit about the theory of machine words.</p>\n<p>The first definition in the file \"HOL/Word/Word.thy\" is the following:</p>\n<div class=\"codehilite\"><pre><span></span><code>typedef (overloaded) &#39;a word = &quot;{(0::int) ..&lt; 2 ^ LENGTH(&#39;a::len0)}&quot;\nmorphisms uint Abs_word by auto\n</code></pre></div>\n<p>Experimenting a bit I was able to conclude that uint is a function that receives a word and return the unsigned int encoded by that word.</p>\n<p>Can someone clarify to me what is happening here? What is overloaded and morphisms in this context?  What about uint / Abs_word? Where are they defined?</p>\n<p>Thanks!</p>",
        "id": 225842548,
        "sender_full_name": "Bruno Reis",
        "timestamp": 1612967018
    },
    {
        "content": "<p><code>typedef</code> defines a new type <code>'a word</code> out of the specified <code>{(0::int) ..&lt; 2 ^ LENGTH('a::len0)}</code> set.  The morphisms are the functions that convert between the type of the elements in the set (true integers) and the newly-defined type</p>",
        "id": 225843220,
        "sender_full_name": "Jakub Kądziołka",
        "timestamp": 1612967269
    },
    {
        "content": "<p>But where are the definitions of those functions that defines that this morphism is actually possible? Also, what (and where) is the definition of a morphism in Isabelle? Is it Just an injective function, or something more deep like an isomorphism?</p>",
        "id": 225844116,
        "sender_full_name": "Bruno Reis",
        "timestamp": 1612967578
    },
    {
        "content": "<p>note that <code>Abs_word</code> will return the corresponding value only if the argument is actually in the set. In other cases, there is no corresponding <code>word</code> and the value of the function is unspecified</p>",
        "id": 225844766,
        "sender_full_name": "Jakub Kądziołka",
        "timestamp": 1612967811
    },
    {
        "content": "<p>Here's some more details on this kind of a partially-undefined function in Isabelle: <a href=\"https://www.joachim-breitner.de/blog/732-Isabelle_functions__Always_total,_sometimes_undefined\">https://www.joachim-breitner.de/blog/732-Isabelle_functions__Always_total,_sometimes_undefined</a></p>",
        "id": 225844858,
        "sender_full_name": "Jakub Kądziołka",
        "timestamp": 1612967853
    },
    {
        "content": "<p>the <code>morphisms</code> here doesn't have any logical properties</p>",
        "id": 225844913,
        "sender_full_name": "Jakub Kądziołka",
        "timestamp": 1612967874
    },
    {
        "content": "<p>(you probably don't want to use Abs_word in your everyday formalizations, I suppose there is a function that takes the input integer modulo 2^n first)</p>",
        "id": 225845147,
        "sender_full_name": "Jakub Kądziołka",
        "timestamp": 1612967957
    },
    {
        "content": "<blockquote>\n<p>But where are the definitions of those functions that defines that this morphism is actually possible?</p>\n</blockquote>\n<p>AFAIK, subset type definitions are an axiom in Isabelle. They certainly are in HOL Light.</p>",
        "id": 225845301,
        "sender_full_name": "Jakub Kądziołka",
        "timestamp": 1612968015
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"380931\">@Jakub Kądziołka</span>  Thanks a lot. I'll read that blog post and think about what you wrote. After that, if I still have some questions, I'll continue writing in this topic! Thank you :)</p>",
        "id": 225846449,
        "sender_full_name": "Bruno Reis",
        "timestamp": 1612968491
    },
    {
        "content": "<p>See also section 11.7 of <a href=\"https://isabelle.in.tum.de/dist/Isabelle2020/doc/isar-ref.pdf\">https://isabelle.in.tum.de/dist/Isabelle2020/doc/isar-ref.pdf</a></p>",
        "id": 225846765,
        "sender_full_name": "Jakub Kądziołka",
        "timestamp": 1612968624
    },
    {
        "content": "<p>Yes, type definitions are axiomatic.</p>",
        "id": 225849416,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1612969693
    }
]