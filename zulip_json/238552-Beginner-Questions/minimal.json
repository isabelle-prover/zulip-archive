[
    {
        "content": "<p>Is there any function like min::\"int set =&gt; int\" to get the minimal element in one int set</p>",
        "id": 241146757,
        "sender_full_name": "zibo yang",
        "timestamp": 1622639861
    },
    {
        "content": "<p>It's called <code>Min</code>, but it only works for finite sets. There's also <code>Inf</code>, the infimum, which also works on infinite sets as long as they are bounded from below.</p>",
        "id": 241146951,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1622639944
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232736\">Manuel Eberl</span> <a href=\"#narrow/stream/238552-Beginner-Questions/topic/minimal/near/241146951\">said</a>:</p>\n<blockquote>\n<p>It's called <code>Min</code>, but it only works for finite sets. There's also <code>Inf</code>, the infimum, which also works on infinite sets as long as they are bounded from below.</p>\n</blockquote>\n<p>thanks. that is what I want</p>",
        "id": 241153127,
        "sender_full_name": "zibo yang",
        "timestamp": 1622642579
    },
    {
        "content": "<p>Hello, does there also exist a function of type \"('a =&gt; 'a =&gt; bool) =&gt; 'a set =&gt; 'a\"? I need both the order ('a =&gt; 'a =&gt; bool) and the (finite) set ('a set) to be variable...</p>",
        "id": 289974311,
        "sender_full_name": "Taro Yoshioka",
        "timestamp": 1658155106
    },
    {
        "content": "<p>According to</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kt\">find_theorems</span> <span class=\"s\">\"_ :: ('a =&gt; 'a =&gt; bool) =&gt; 'a set =&gt; 'a\"</span>\n</code></pre></div>",
        "id": 289975533,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1658155607
    },
    {
        "content": "<p>there is <code>linorder.Min</code></p>",
        "id": 289975558,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1658155616
    },
    {
        "content": "<p>but I am not sure how easy it is to use</p>",
        "id": 289975621,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1658155634
    },
    {
        "content": "<p>If there is a unique minimum, you can indeed use that, yes.</p>",
        "id": 289976435,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1658155966
    },
    {
        "content": "<p>And if your relation is indeed a linear ordering on the <em>entire</em> type.</p>",
        "id": 289976489,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1658155995
    },
    {
        "content": "<p>Which may be too strong a requirement, alas…</p>",
        "id": 289976508,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1658156010
    },
    {
        "content": "<p>Otherwise you can use something I made: <a href=\"https://www.isa-afp.org/theories/randomised_social_choice/#Order_Predicates.html#Order_Predicates.Max_wrt_among_def|fact\">Link to AFP entry</a></p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">definition</span> <span class=\"n\">Max_wrt_among</span> <span class=\"o\">::</span> <span class=\"s\">\"'a relation ⇒ 'a set ⇒ 'a set\"</span> <span class=\"kp\">where</span>\n  <span class=\"s\">\"Max_wrt_among R A = {x∈A. R x x ∧ (∀y∈A. R x y ⟶ R y x)}\"</span>\n</code></pre></div>\n<p>Here, <code>'a relation</code> is just a type synonym for <code>'a ⇒ 'a ⇒ bool</code>.</p>\n<p>It should be easy to adapt this to minimum (e.g. by applying it to the dual relation).</p>\n<p>Note that this returns a <em>set</em>, not a single element. You'd then have to define a version for linear orderings that just returns a single element (<code>Max_wrt_among</code> or <code>Min_wrt_among</code> will then always be singleton sets, so you can use e.g. <code>the_elem</code> to get that element)</p>",
        "id": 289976709,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1658156104
    },
    {
        "content": "<p>wow thanks I will try out! (yes in general it's only an order on the provided set)</p>",
        "id": 289979214,
        "sender_full_name": "Taro Yoshioka",
        "timestamp": 1658157103
    }
]