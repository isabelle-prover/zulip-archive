[
    {
        "content": "<p>As I understand, a <code>proof ... qed</code> block automatically applies a standard introduction rule to the goal, allowing constructions like</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"s\">\"∀x. P x\"</span>\n<span class=\"k\">proof</span>\n<span class=\"w\">  </span><span class=\"k\">fix</span><span class=\"w\"> </span><span class=\"n\">x</span>\n<span class=\"w\">  </span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"n\">P</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"gr\">sorry</span>\n<span class=\"k\">qed</span>\n</code></pre></div>\n<p>I know that I can supress this introduction rule application by using <code>proof -</code>. However, in certain cases I would like to chain together multiple standard introduction rules automatically. For instance, I would like to prove the following:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">add_transfer</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">transfer_rule</span><span class=\"o\">]:</span>\n<span class=\"w\">  </span><span class=\"kp\">includes</span><span class=\"w\"> </span><span class=\"n\">lifting_syntax</span>\n<span class=\"w\">  </span><span class=\"kp\">shows</span><span class=\"w\"> </span><span class=\"s\">\"(poly_compare R ===&gt; poly_compare R ===&gt; poly_compare R)</span>\n<span class=\"s\">    (⊕⇘poly_ring R⇙) (⊕⇘UP R⇙)\"</span>\n<span class=\"k\">unfolding</span><span class=\"w\"> </span><span class=\"n\">rel_fun_def</span>\n</code></pre></div>\n<p>This gives me the state <br>\n<code>∀x y. poly_compare R x y ⟶\n          (∀z w.\n              poly_compare R z w ⟶\n              poly_compare R (x ⊕⇘poly_ring R⇙ z) (y ⊕⇘UP R⇙ w))</code><br>\nI want to do something like</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">proof</span>\n<span class=\"w\">  </span><span class=\"k\">fix</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"n\">z</span><span class=\"w\"> </span><span class=\"n\">w</span><span class=\"w\"> </span><span class=\"k\">assume</span><span class=\"w\"> </span><span class=\"s\">\"poly_compare R x y\"</span><span class=\"w\"> </span><span class=\"s\">\"poly_compare R z w\"</span>\n<span class=\"w\">  </span><span class=\"k\">thus</span><span class=\"w\"> </span><span class=\"s\">\"poly_compare R (x ⊕⇘poly_ring R⇙ z) (y ⊕⇘UP R⇙ w))\"</span><span class=\"w\"> </span><span class=\"gr\">sorry</span>\n<span class=\"k\">qed</span>\n</code></pre></div>\n<p>which requires applying 6 of these \"obvious\" introduction rules in order. I have managed to apply these rules by using 6 nested <code>proof</code> environments, but somehow I suspect this is not the idiomatic solution...</p>\n<p>How can I write this proof in this natural way?</p>",
        "id": 376799377,
        "sender_full_name": "Artem Khovanov",
        "timestamp": 1689804040
    },
    {
        "content": "<p>I've now found an answer to my problem by looking at the example given here:<br>\n<a href=\"#narrow/stream/238552-Beginner-Questions/topic/difference.20between.20.60proof.60.20and.20.60proof.20-.60/near/375626388\">https://isabelle.zulipchat.com/#narrow/stream/238552-Beginner-Questions/topic/difference.20between.20.60proof.60.20and.20.60proof.20-.60/near/375626388</a><br>\nAs I understand, <code>proof standard+</code> applies as many of these standard natural deduction rules as it can. So in my case the following works:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">proof</span><span class=\"w\"> </span><span class=\"n\">standard</span><span class=\"o\">+</span>\n<span class=\"w\">  </span><span class=\"k\">fix</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"n\">z</span><span class=\"w\"> </span><span class=\"n\">w</span><span class=\"w\"> </span><span class=\"k\">assume</span><span class=\"w\"> </span><span class=\"s\">\"poly_compare R x y\"</span><span class=\"w\"> </span><span class=\"s\">\"poly_compare R z w\"</span>\n<span class=\"w\">  </span><span class=\"k\">thus</span><span class=\"w\"> </span><span class=\"s\">\"poly_compare R (x ⊕⇘poly_ring R⇙ z) (y ⊕⇘UP R⇙ w))\"</span><span class=\"w\"> </span><span class=\"gr\">sorry</span>\n<span class=\"k\">qed</span>\n</code></pre></div>\n<p>However, looking in the reference manual section 6.4.2 (p. 146), I cannot find any reference to this <code>standard+</code> method for the initial refinement step. Does anyone know where I can find full documentation of relevant initial proof methods?</p>",
        "id": 376802559,
        "sender_full_name": "Artem Khovanov",
        "timestamp": 1689805471
    },
    {
        "content": "<p>Well, at the end of said subsection, on page 148, it says the following:</p>\n<blockquote>\n<p>In Isabelle/Pure, <em>standard</em> performs elementary introduction / elimination steps (<em>rule</em>), introduction of type classes (<em>intro_classes</em>) and locales (<em>intro_locales</em>).</p>\n<p>In Isabelle/HOL, <em>standard</em> also takes classical rules into account (cf. §9.4).</p>\n</blockquote>",
        "id": 376809607,
        "sender_full_name": "Wolfgang Jeltsch",
        "timestamp": 1689809380
    },
    {
        "content": "<p><code>+</code> just means repeats until an error happens</p>",
        "id": 376846309,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1689828554
    },
    {
        "content": "<p>you can write <code>(rule exI)+</code> … or whatever</p>",
        "id": 376846356,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1689828591
    },
    {
        "content": "<p><code>standard+</code> is not a new tactic</p>",
        "id": 376846440,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1689828614
    },
    {
        "content": "<p>thanks both, I understand now!</p>",
        "id": 377026471,
        "sender_full_name": "Artem Khovanov",
        "timestamp": 1689867293
    }
]