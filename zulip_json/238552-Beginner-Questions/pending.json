[
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code> with ar_nonempty have &quot;a ≠ 0&quot;\n    proof-\n      assume &quot;Ar ≠ {}&quot; and &quot;enat a = stop_at init x target&quot; and &quot;a = 0&quot;\n      then have &quot;0 ∈ reach_steps init x target&quot;\n        using a_def stop_at.simps[of init x target]\n              infm.simps[of &quot;reach_steps init x target&quot;]\n              ar_nonempty\n              assms(2)\n              enat_0_iff[of a]\n              enat.inject[of a &quot;⨅ reach_steps init x target&quot;]\n              Inf_nat_def1[of Ar]\n        by auto\n      then have &quot;geom_proc init x 0 ∈ {0,target}&quot;\n        using reach_steps_def[of init x target]\n        by (simp add: zero_enat_def)\n      then have &quot;init ∈ {0,target}&quot;\n        using geometric_process[of init x 0]\n              gambler_rand_walk.simps[of 1 &quot;-1&quot; init 0 x]\n        by (simp add: zero_enat_def)\n      then have False\n        using assms by auto\n      then show False\n</code></pre></div>\n<p>I have already proved False, but I still got the error message like:</p>\n<div class=\"codehilite\"><pre><span></span><code>proof (chain)\npicking this:\n  False\nFailed to refine any pending goal\nLocal statement fails to refine any pending goal\nFailed attempt to solve goal by exported rule:\n  (Ar ≠ {}) ⟹ (enat a = stop_at init x target) ⟹ (a = 0) ⟹ False\n</code></pre></div>",
        "id": 242054083,
        "sender_full_name": "zibo yang",
        "timestamp": 1623240173
    },
    {
        "content": "<p>The beginning proof goal is </p>\n<div class=\"codehilite\"><pre><span></span><code>proof (state)\ngoal (1 subgoal):\n 1. Ar ≠ {} ⟹ enat a = stop_at init x target ⟹ a ≠ 0\n</code></pre></div>",
        "id": 242054171,
        "sender_full_name": "zibo yang",
        "timestamp": 1623240228
    },
    {
        "content": "<p>So why it fails using show rather than have</p>",
        "id": 242054259,
        "sender_full_name": "zibo yang",
        "timestamp": 1623240270
    },
    {
        "content": "<p>You should really read the Progprove tutorial...</p>",
        "id": 242059361,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1623243062
    },
    {
        "content": "<p><code>proof</code> instead of <code>proof -</code></p>",
        "id": 242059384,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1623243076
    },
    {
        "content": "<p>and why <code>\"Ar ≠ {}\" and \"enat a = stop_at init x target\"</code> instead of naming the two facts (<code>ar</code> is one name)</p>",
        "id": 242059559,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1623243151
    },
    {
        "content": "<p>but It fails using proof rather than proof- like:</p>\n<div class=\"codehilite\"><pre><span></span><code>Failed to apply initial proof method:\nusing this:\n    Ar ≠ {}\n    enat a = stop_at init x target\ngoal (1 subgoal):\n 1. a ≠ 0\n</code></pre></div>",
        "id": 242061144,
        "sender_full_name": "zibo yang",
        "timestamp": 1623243904
    },
    {
        "content": "<p>remove the extra assumptions and it will work</p>",
        "id": 242062125,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1623244396
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code> assume ar_nonempty:&quot;Ar ≠ {}&quot;\n    obtain a::nat where a_def:&quot;a = stop_at init x target&quot;\n      unfolding stop_at.simps\n      using only_inf_infm[of Ar] ar_nonempty assms(2) not_infinity_eq[of &quot;infm Ar&quot;]\n      by (auto simp add: not_infinity_eq)\n    from ar_nonempty have &quot;a ≠ 0&quot;\n    proof\n      assume &quot;Ar ≠ {}&quot; and &quot;a = 0&quot;\n      then have &quot;0 ∈ reach_steps init x target&quot;\n        using a_def stop_at.simps[of init x target]\n              infm.simps[of &quot;reach_steps init x target&quot;]\n              ar_nonempty\n              assms(2)\n              enat_0_iff[of a]\n              enat.inject[of a &quot;⨅ reach_steps init x target&quot;]\n              Inf_nat_def1[of Ar]\n        by auto\n      then have &quot;geom_proc init x 0 ∈ {0,target}&quot;\n        using reach_steps_def[of init x target]\n        by (simp add: zero_enat_def)\n      then have &quot;init ∈ {0,target}&quot;\n        using geometric_process[of init x 0]\n              gambler_rand_walk.simps[of 1 &quot;-1&quot; init 0 x]\n        by (simp add: zero_enat_def)\n      then have False\n        using assms by auto\n      then show ?thesis\n</code></pre></div>\n<p>It still doesn't work</p>",
        "id": 242065590,
        "sender_full_name": "zibo yang",
        "timestamp": 1623245739
    },
    {
        "content": "<p>the strange thing is that it indicates the proof goal is </p>\n<div class=\"codehilite\"><pre><span></span><code>proof (state)\ngoal (1 subgoal):\n 1. Ar ≠ {} ⟹ Ar = {}\n</code></pre></div>",
        "id": 242065866,
        "sender_full_name": "zibo yang",
        "timestamp": 1623245832
    },
    {
        "content": "<p>under adding \"-\" behind proof,  the goal changes to </p>\n<div class=\"codehilite\"><pre><span></span><code>proof (state)\ngoal (1 subgoal):\n 1. Ar ≠ {} ⟹ a ≠ 0\n</code></pre></div>",
        "id": 242066049,
        "sender_full_name": "zibo yang",
        "timestamp": 1623245895
    },
    {
        "content": "<p>\"show\" line still implies the same error as before</p>",
        "id": 242066201,
        "sender_full_name": "zibo yang",
        "timestamp": 1623245969
    },
    {
        "content": "<p>I think the more straightforward simple question is that:</p>\n<div class=\"codehilite\"><pre><span></span><code>assume ar_nonempty:&quot;Ar ≠ {}&quot;\n    obtain a::nat where a_def:&quot;a = stop_at init x target&quot;\n      unfolding stop_at.simps\n      using only_inf_infm[of Ar] ar_nonempty assms(2) not_infinity_eq[of &quot;infm Ar&quot;]\n      by (auto simp add: not_infinity_eq)\n    from ‹Ar ≠ {}› have &quot;a ≠ 0&quot;\n    proof\n      assume&quot;Ar ≠ {}&quot; &quot;a = 0&quot;\n      then show False\n</code></pre></div>\n<p>why the proof goal after \"proof\" is:</p>\n<div class=\"codehilite\"><pre><span></span><code> Ar ≠ {} ⟹ Ar = {}\n</code></pre></div>\n<p>and why it still shows \"Failed to refine any pending goal \" for the last line.</p>",
        "id": 242069457,
        "sender_full_name": "zibo yang",
        "timestamp": 1623247189
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>(*no from*)\nhave &quot;a ≠ 0&quot;\nproof\n   assume &quot;a = 0&quot;\n</code></pre></div>",
        "id": 242070818,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1623247676
    },
    {
        "content": "<p>ok it works</p>",
        "id": 242071179,
        "sender_full_name": "zibo yang",
        "timestamp": 1623247794
    }
]