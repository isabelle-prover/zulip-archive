[
    {
        "content": "<p>Is it possible to somehow \"one line\" a proof by cases/induction, where the proof in each case is easy? I ask because these proofs feel quite redundant. Here is an example of a proof I wrote with this issue (the cases are <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">{</mo><mi>a</mi><mo>≤</mo><mi>x</mi><mo>≤</mo><mi>b</mi><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">\\{a\\leq x\\leq b\\}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7719em;vertical-align:-0.136em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mclose\">}</span></span></span></span>, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">{</mo><mi>a</mi><mo>≤</mo><mi>x</mi><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">\\{a \\leq x\\}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">}</span></span></span></span>, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">{</mo><mi>x</mi><mo>≤</mo><mi>b</mi><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">\\{x \\leq b\\}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mclose\">}</span></span></span></span> and the whole space):</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">open_interval_connected</span><span class=\"o\">:</span>\n  <span class=\"kp\">assumes</span> <span class=\"s\">\"open_interval I\"</span> <span class=\"s\">\"x ∈ I\"</span> <span class=\"s\">\"y ∈ I\"</span> <span class=\"s\">\"z ∈ carrier L\"</span> <span class=\"s\">\"z between x y\"</span>\n  <span class=\"kp\">shows</span> <span class=\"s\">\"z ∈ I\"</span>\n<span class=\"k\">using</span> <span class=\"n\">assms</span> <span class=\"k\">proof</span> <span class=\"o\">(</span><span class=\"n\">induction</span> <span class=\"n\">rule</span><span class=\"o\">:</span> <span class=\"n\">open_interval.induct</span><span class=\"o\">)</span>\n  <span class=\"k\">case</span> <span class=\"o\">(</span><span class=\"n\">both</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n  <span class=\"k\">thus</span> <span class=\"o\">?</span><span class=\"k\">case</span> <span class=\"k\">by</span> <span class=\"o\">(</span><span class=\"n\">metis</span> <span class=\"o\">(</span><span class=\"n\">no_types</span><span class=\"o\">,</span> <span class=\"n\">lifting</span><span class=\"o\">)</span> <span class=\"n\">btw_def</span> <span class=\"n\">lless_eq</span> <span class=\"n\">lless_trans</span> <span class=\"n\">mem_Collect_eq</span><span class=\"o\">)</span>\n<span class=\"k\">next</span>\n  <span class=\"k\">case</span> <span class=\"o\">(</span><span class=\"n\">lower</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n  <span class=\"k\">thus</span> <span class=\"o\">?</span><span class=\"k\">case</span> <span class=\"k\">by</span> <span class=\"o\">(</span><span class=\"n\">metis</span> <span class=\"o\">(</span><span class=\"n\">no_types</span><span class=\"o\">,</span> <span class=\"n\">lifting</span><span class=\"o\">)</span> <span class=\"n\">btw_def</span> <span class=\"n\">lless_eq</span> <span class=\"n\">lless_trans</span> <span class=\"n\">mem_Collect_eq</span><span class=\"o\">)</span>\n<span class=\"k\">next</span>\n  <span class=\"k\">case</span> <span class=\"o\">(</span><span class=\"n\">upper</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n  <span class=\"k\">thus</span> <span class=\"o\">?</span><span class=\"k\">case</span> <span class=\"k\">by</span> <span class=\"o\">(</span><span class=\"n\">metis</span> <span class=\"o\">(</span><span class=\"n\">no_types</span><span class=\"o\">,</span> <span class=\"n\">lifting</span><span class=\"o\">)</span> <span class=\"n\">btw_def</span> <span class=\"n\">lless_eq</span> <span class=\"n\">lless_trans</span> <span class=\"n\">mem_Collect_eq</span><span class=\"o\">)</span>\n<span class=\"k\">next</span>\n  <span class=\"k\">case</span> <span class=\"n\">carrier</span>\n  <span class=\"k\">then</span> <span class=\"k\">show</span> <span class=\"o\">?</span><span class=\"k\">case</span> <span class=\"k\">by</span> <span class=\"n\">blast</span>\n<span class=\"k\">qed</span>\n</code></pre></div>",
        "id": 294492600,
        "sender_full_name": "Artem Khovanov",
        "timestamp": 1661040095
    },
    {
        "content": "<p>Something like this?</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">open_interval_connected</span><span class=\"o\">:</span>\n  <span class=\"kp\">assumes</span> <span class=\"s\">\"open_interval I\"</span> <span class=\"s\">\"x ∈ I\"</span> <span class=\"s\">\"y ∈ I\"</span> <span class=\"s\">\"z ∈ carrier L\"</span> <span class=\"s\">\"z between x y\"</span>\n  <span class=\"kp\">shows</span> <span class=\"s\">\"z ∈ I\"</span>\n<span class=\"k\">using</span> <span class=\"n\">assms</span> <span class=\"k\">by</span> <span class=\"o\">(</span><span class=\"n\">induction</span> <span class=\"n\">rule</span><span class=\"o\">:</span> <span class=\"n\">open_interval.induct</span><span class=\"err\">;</span> <span class=\"o\">(</span><span class=\"n\">metis</span> <span class=\"o\">(</span><span class=\"n\">no_types</span><span class=\"o\">,</span> <span class=\"n\">lifting</span><span class=\"o\">)</span> <span class=\"n\">btw_def</span> <span class=\"n\">lless_eq</span> <span class=\"n\">lless_trans</span> <span class=\"n\">mem_Collect_eq</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 294495478,
        "sender_full_name": "Wenda Li",
        "timestamp": 1661042973
    },
    {
        "content": "<p>You could place a method after the <code>qed</code> to solve all remaining cases. Something like</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"s\">\"foo\"</span>\n<span class=\"k\">proof</span><span class=\"o\">(</span><span class=\"n\">induction</span> <span class=\"ow\">...</span><span class=\"o\">)</span>\n    <span class=\"k\">case</span> <span class=\"n\">1</span>\n    <span class=\"err\">&lt;</span><span class=\"n\">complicated</span> <span class=\"k\">proof</span><span class=\"err\">&gt;</span>\n<span class=\"k\">qed</span> <span class=\"o\">(</span><span class=\"n\">something</span> <span class=\"n\">that</span> <span class=\"n\">solves</span> <span class=\"n\">all</span> <span class=\"n\">other</span> <span class=\"n\">suboals</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 294495604,
        "sender_full_name": "Simon Roßkopf",
        "timestamp": 1661043109
    }
]