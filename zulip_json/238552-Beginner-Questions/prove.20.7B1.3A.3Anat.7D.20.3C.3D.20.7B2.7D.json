[
    {
        "content": "<p>is there possible to compare arbitrary set in total order? </p>\n<p>Like the first step, I want to calculate <code>{1::nat} &lt;= {2}</code> holds on, because it's obviously held for numbers.</p>",
        "id": 380734156,
        "sender_full_name": "Hongjian Jiang",
        "timestamp": 1690902033
    },
    {
        "content": "<p>Concrete syntax for what?</p>",
        "id": 380740400,
        "sender_full_name": "Wolfgang Jeltsch",
        "timestamp": 1690902959
    },
    {
        "content": "<p>trying to prove the comparison between two predicates.</p>",
        "id": 380744780,
        "sender_full_name": "Hongjian Jiang",
        "timestamp": 1690903609
    },
    {
        "content": "<p>Sorry, wrong thread.</p>",
        "id": 380745087,
        "sender_full_name": "Wolfgang Jeltsch",
        "timestamp": 1690903654
    },
    {
        "content": "<p>I see, thank you</p>",
        "id": 380745181,
        "sender_full_name": "Hongjian Jiang",
        "timestamp": 1690903666
    },
    {
        "content": "<p>I am not aware of any total ordering on sets</p>",
        "id": 380753346,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1690904960
    },
    {
        "content": "<p>Thanks, then I think I need to search another way</p>",
        "id": 380820852,
        "sender_full_name": "Hongjian Jiang",
        "timestamp": 1690919205
    },
    {
        "content": "<p>Well, there might be a way to define a total order on sets for element types that are totally ordered. You probably want the element type to be totally ordered anyhow when thinking about a total order on sets, but the total order on the element type allows you to turn sets into lists if the sets are finite. You can then use the lexicographic order to compare the resulting lists, which in effect gives you a total order on finite sets. It might be possible to extend this to infinite sets.</p>",
        "id": 380822743,
        "sender_full_name": "Wolfgang Jeltsch",
        "timestamp": 1690919752
    },
    {
        "content": "<p>Just to mention something I tried on the theories you sent me: changing the definition of the ordering to have \"le_rexp (Sym _) (Sym _) = True\"</p>",
        "id": 380823231,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1690919883
    },
    {
        "content": "<p>Let’s think how to extend this to infinite sets. If you just compare lists lexicographically, you start with their respective first elements and compare them. With sets you don’t necessarily have a good notion of first element. However, it’s immediately clear that one list is smaller than the other if its first element is smaller than the first element of the other. You could equivalently say that one list is smaller than the other if it contains an element that is smaller than any element of the other list. This is something you can generalize to sets.</p>",
        "id": 380823282,
        "sender_full_name": "Wolfgang Jeltsch",
        "timestamp": 1690919891
    },
    {
        "content": "<p>but there were more changes to do (you also have some \"if r=r' then _ else _ \" in the definition which is not executable</p>",
        "id": 380823402,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1690919923
    },
    {
        "content": "<p>Going on with my idea, we can see that the only case left is when neither set has elements that are smaller than all elements of the other set. But then we can just look for a maximal part “at the bottom” of both sets and cut it off. What’s left are two sets where either one set has an element smaller than all the elements in the other set with some elements actually being there, or one two sets where at least one is empty. It’s then sort of clear which one should be considered the smaller one.</p>\n<p>I’m not sure whether I’ve overlooked something. It might be fun to try defining this order in Isabelle and prove that it’s total.</p>",
        "id": 380824205,
        "sender_full_name": "Wolfgang Jeltsch",
        "timestamp": 1690920133
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"423655\">Wolfgang Jeltsch</span> <a href=\"#narrow/stream/238552-Beginner-Questions/topic/prove.20.7B1.3A.3Anat.7D.20.3C.3D.20.7B2.7D/near/380824205\">said</a>:</p>\n<blockquote>\n<p>I’m not sure whether I’ve overlooked something. It might be fun to try defining this order in Isabelle and prove that it’s total.</p>\n</blockquote>\n<p>I tried to come up with such a definition and proof and finally had to conclude that I’ve overlooked something. <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> Consider the set of even integers and the set of odd integers. These don’t have a common part at the bottom, so there’s nothing to cut off. Still, it’s not the case that one of these sets has an element smaller than all elements of the other set.</p>",
        "id": 380838537,
        "sender_full_name": "Wolfgang Jeltsch",
        "timestamp": 1690924216
    },
    {
        "content": "<p>So totally ordering infinite sets seems problematic. Finite sets are a different matter, though: you should be able to apply the approach sketched above, where you first convert the sets to lists and then order the resulting lists lexicographically.</p>",
        "id": 380838730,
        "sender_full_name": "Wolfgang Jeltsch",
        "timestamp": 1690924281
    },
    {
        "content": "<p>Another thing is coming up with a <em>partial</em> order. Here you can just define that one set is smaller than the other exactly if all elements in the former are smaller than all elements in the latter. This should give you a partial order even if the elements are only partially ordered.</p>",
        "id": 380839125,
        "sender_full_name": "Wolfgang Jeltsch",
        "timestamp": 1690924433
    },
    {
        "content": "<p>I could have a try on finite set  in this way, thanks</p>",
        "id": 380845373,
        "sender_full_name": "Hongjian Jiang",
        "timestamp": 1690926389
    },
    {
        "content": "<p>in this way, lemma le_rexp_antisym<code>\"⟦le_rexp r s; le_rexp s r⟧ ⟹ r = s\"</code> will fail. </p>\n<p>with the conterexample of <code>r = Sym {}</code> and <code>s = Sym UNIV</code></p>",
        "id": 380846086,
        "sender_full_name": "Hongjian Jiang",
        "timestamp": 1690926642
    }
]