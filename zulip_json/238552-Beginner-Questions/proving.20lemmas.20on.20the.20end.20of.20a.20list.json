[
    {
        "content": "<p>I have functions defined on lists case splitting the regular way \"Nil | Cons (h ## t)\", but I'd like to prove lemmas on a \"t @ [h]\" structure(assuming finite length lists)<br>\nI tried defining my own inductive hyptohesis but Isablelle wont let me use those, says it's ill-instantiated. <br>\nI tried using the regular rev_induct but it doesn't give me what I need.<br>\n I also tried defining a function case splitting from the end by defining a local variable hoping to be able to show extensional equality but that didn't work either.<br>\n Is there any way I can do this w/o just assuming that it holds?<br>\nTIA</p>",
        "id": 437410662,
        "sender_full_name": "ee",
        "timestamp": 1715072795
    },
    {
        "content": "<blockquote>\n<p>I tried using the regular rev_induct but it doesn't give me what I need.</p>\n</blockquote>\n<p>Can you be more precise here?</p>",
        "id": 437410954,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1715072891
    },
    {
        "content": "<blockquote>\n<p>I tried defining my own inductive hyptohesis but Isablelle wont let me use those, says it's ill-instantiated. </p>\n</blockquote>\n<p>Without showing it, it is not possible to say what is wrong…</p>",
        "id": 437411008,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1715072921
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"233198\">Mathias Fleury</span> <a href=\"#narrow/stream/238552-Beginner-Questions/topic/proving.20lemmas.20on.20the.20end.20of.20a.20list/near/437410954\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>I tried using the regular rev_induct but it doesn't give me what I need.</p>\n</blockquote>\n<p>Can you be more precise here?</p>\n</blockquote>\n<p>The inductive hypothesis depends on something I can't prove, as the function has 3 arguments and if I have ' P a b (xs @ [x])', I can't  prove 'P a b xs'(the latter I need to use the inductive hypothesis produced by rev_induct)</p>",
        "id": 437418903,
        "sender_full_name": "ee",
        "timestamp": 1715075957
    },
    {
        "content": "<p>So what induction principle would you want to have?</p>",
        "id": 437429891,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1715080468
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"233198\">Mathias Fleury</span> <a href=\"#narrow/stream/238552-Beginner-Questions/topic/proving.20lemmas.20on.20the.20end.20of.20a.20list/near/437429891\">said</a>:</p>\n<blockquote>\n<p>So what induction principle would you want to have?</p>\n</blockquote>\n<p>Sorry about the late response. I basically have a function that boils down to</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">f1</span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"'a ⇒ 'a ⇒ 'a list ⇒ bool\"</span><span class=\"w\"> </span><span class=\"kp\">where</span>\n<span class=\"w\">  </span><span class=\"n\">ni</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"f1 x y Nil = (x=y)\"</span>\n<span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">co</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"f1 x y (a#ll) = ((f2 a = x ∧ f1 (f2 a)  y ll) ∨ ((f3 a) = x ∧ f1 (f3 a) y ll))\"</span>\n<span class=\"sx\">``` and I just want to prove that if I know that this holds for some list of finite length, the \"f2 a = x \" etc equalities should hold for the elements at the end of the list, but I can't  :upside_down:</span>\n</code></pre></div>",
        "id": 437786011,
        "sender_full_name": "ee",
        "timestamp": 1715243290
    },
    {
        "content": "<p>What are you trying to prove exactly? This is what I understand:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">definition</span><span class=\"w\"> </span><span class=\"n\">f2</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">‹'a ⇒ 'a›</span><span class=\"w\"> </span><span class=\"kp\">where</span>\n<span class=\"s\">‹f2 a = undefined›</span>\n\n<span class=\"k\">definition</span><span class=\"w\"> </span><span class=\"n\">f3</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">‹'a ⇒ 'a›</span><span class=\"w\"> </span><span class=\"kp\">where</span>\n<span class=\"s\">‹f3 a = undefined›</span>\n\n<span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">f1</span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"'a ⇒ 'a ⇒ 'a list ⇒ bool\"</span><span class=\"w\"> </span><span class=\"kp\">where</span>\n<span class=\"w\">  </span><span class=\"n\">ni</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"f1 x y Nil = (x=y)\"</span>\n<span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">co</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"f1 x y (a#ll) = ((f2 a = x ∧ f1 (f2 a)  y ll) ∨ ((f3 a) = x ∧ f1 (f3 a) y ll))\"</span>\n\n<span class=\"kn\">lemma</span>\n<span class=\"w\"> </span><span class=\"s\">‹f1 x y xs ⟹ xs ≠ [] ⟹ f2 (last xs) = y ∨ f3 (last xs) = y›</span>\n<span class=\"w\">  </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">induction</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"n\">xs</span><span class=\"w\"> </span><span class=\"n\">rule</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">f1.induct</span><span class=\"o\">)</span>\n<span class=\"w\">    </span><span class=\"n\">auto</span>\n</code></pre></div>",
        "id": 437809599,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1715256953
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"233198\">Mathias Fleury</span> <a href=\"#narrow/stream/238552-Beginner-Questions/topic/proving.20lemmas.20on.20the.20end.20of.20a.20list/near/437809599\">said</a>:</p>\n<blockquote>\n<p><div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span>\n<span class=\"w\"> </span><span class=\"s\">‹f1 x y xs ⟹ xs ≠ [] ⟹ f2 (last xs) = y ∨ f3 (last xs) = y›</span>\n<span class=\"w\">  </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">induction</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"n\">xs</span><span class=\"w\"> </span><span class=\"n\">rule</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">f1.induct</span><span class=\"o\">)</span>\n<span class=\"w\">    </span><span class=\"n\">auto</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Thank you!! I didn't know I could use three variables to do induction that was the problem <span aria-label=\"melting face\" class=\"emoji emoji-1fae0\" role=\"img\" title=\"melting face\">:melting_face:</span></p>",
        "id": 437947882,
        "sender_full_name": "ee",
        "timestamp": 1715331082
    }
]