[
    {
        "content": "<p>Hi, I have some trouble proving set equalities. Currently I am using <code>auto</code> to simplify goals for me but I suppose this is not a good style. I think I should apply <code>Lifting_Set.rel_set_eq</code>, but this requires rewriting from the opposite direction. what am I missing here? how should I get started to prove two sets are equal?</p>",
        "id": 293198563,
        "sender_full_name": "Jason Hu",
        "timestamp": 1660340968
    },
    {
        "content": "<p>Hi Jason, proving set equalities is usually not an easy goal. Depending on the situations, we can manually choose some introduction rules to make progress. For example, the following rules could be quite handy:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code>  <span class=\"n\">Set.subset_antisym</span><span class=\"o\">:</span> <span class=\"o\">?</span><span class=\"n\">A</span> <span class=\"err\">⊆</span> <span class=\"o\">?</span><span class=\"n\">B</span> <span class=\"err\">⟹</span> <span class=\"o\">?</span><span class=\"n\">B</span> <span class=\"err\">⊆</span> <span class=\"o\">?</span><span class=\"n\">A</span> <span class=\"err\">⟹</span> <span class=\"o\">?</span><span class=\"n\">A</span> <span class=\"o\">=</span> <span class=\"o\">?</span><span class=\"n\">B</span>\n  <span class=\"n\">Set.set_eqI</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"err\">⋀</span><span class=\"n\">x.</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"o\">?</span><span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">=</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"o\">?</span><span class=\"n\">B</span><span class=\"o\">))</span> <span class=\"err\">⟹</span> <span class=\"o\">?</span><span class=\"n\">A</span> <span class=\"o\">=</span> <span class=\"o\">?</span><span class=\"n\">B</span>\n  <span class=\"n\">Finite_Set.card_subset_eq</span><span class=\"o\">:</span> <span class=\"n\">finite</span> <span class=\"o\">?</span><span class=\"n\">B</span> <span class=\"err\">⟹</span> <span class=\"o\">?</span><span class=\"n\">A</span> <span class=\"err\">⊆</span> <span class=\"o\">?</span><span class=\"n\">B</span> <span class=\"err\">⟹</span> <span class=\"n\">card</span> <span class=\"o\">?</span><span class=\"n\">A</span> <span class=\"o\">=</span> <span class=\"n\">card</span> <span class=\"o\">?</span><span class=\"n\">B</span> <span class=\"err\">⟹</span> <span class=\"o\">?</span><span class=\"n\">A</span> <span class=\"o\">=</span> <span class=\"o\">?</span><span class=\"n\">B</span>\n  <span class=\"n\">Finite_Set.card_seteq</span><span class=\"o\">:</span> <span class=\"n\">finite</span> <span class=\"o\">?</span><span class=\"n\">B</span> <span class=\"err\">⟹</span> <span class=\"o\">?</span><span class=\"n\">A</span> <span class=\"err\">⊆</span> <span class=\"o\">?</span><span class=\"n\">B</span> <span class=\"err\">⟹</span> <span class=\"n\">card</span> <span class=\"o\">?</span><span class=\"n\">B</span> <span class=\"err\">≤</span> <span class=\"n\">card</span> <span class=\"o\">?</span><span class=\"n\">A</span> <span class=\"err\">⟹</span> <span class=\"o\">?</span><span class=\"n\">A</span> <span class=\"o\">=</span> <span class=\"o\">?</span><span class=\"n\">B</span>\n</code></pre></div>\n<p>We can apply those introduction rules using the <code>rule</code> tactic (e.g., <code>apply (rule Set.subset_antisym)</code>).</p>\n<p>As for <code>Lifting_Set.rel_set_eq</code>, it is not meant to be used in this situation -- it is mainly for the <a href=\"https://www21.in.tum.de/~kuncar/documents/huffman-kuncar-cpp2013.pdf\">lift and transfer framework</a> in Isabelle (i.e., a way to exploit relational parametricity).</p>",
        "id": 293238883,
        "sender_full_name": "Wenda Li",
        "timestamp": 1660377616
    }
]