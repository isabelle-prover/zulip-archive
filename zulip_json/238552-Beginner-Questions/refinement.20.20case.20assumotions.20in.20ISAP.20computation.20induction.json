[
    {
        "content": "<p>Where are the refinement assumptions in the computation induction in structured ISAR proofs?</p>\n<p>Let we have next minimum theory:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">theory</span><span class=\"w\"> </span><span class=\"n\">ComputationInductionExample</span>\n<span class=\"w\">  </span><span class=\"kp\">imports</span><span class=\"w\"> </span><span class=\"n\">Main</span>\n<span class=\"k\">begin</span>\n\n<span class=\"k\">datatype</span><span class=\"w\"> </span><span class=\"n\">TpExpr</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">AnyTp</span>\n<span class=\"w\">                 </span><span class=\"o\">|</span>\n<span class=\"w\">                  </span><span class=\"n\">ScalarTp</span>\n<span class=\"w\">                 </span><span class=\"o\">|</span>\n<span class=\"w\">                  </span><span class=\"n\">ArrowTp</span><span class=\"w\"> </span><span class=\"n\">TpExpr</span><span class=\"w\"> </span><span class=\"n\">TpExpr</span>\n<span class=\"w\">                 </span><span class=\"o\">|</span>\n<span class=\"w\">                  </span><span class=\"n\">ErrorTp</span>\n\n\n<span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">isCorrect</span><span class=\"o\">::</span><span class=\"s\">\"TpExpr ⇒ bool\"</span><span class=\"w\"> </span><span class=\"kp\">where</span>\n<span class=\"w\">  </span><span class=\"s\">\"isCorrect AnyTp = True\"</span>\n<span class=\"o\">|</span><span class=\"w\"> </span><span class=\"s\">\"isCorrect ScalarTp = True\"</span>\n<span class=\"o\">|</span><span class=\"w\"> </span><span class=\"s\">\"isCorrect (ArrowTp x y) =  ((isCorrect x)∧(isCorrect y))\"</span>\n<span class=\"o\">|</span><span class=\"w\"> </span><span class=\"s\">\"isCorrect ErrorTp = False\"</span>\n\n<span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">lub</span><span class=\"o\">::</span><span class=\"s\">\"TpExpr ⇒ TpExpr ⇒ TpExpr\"</span><span class=\"w\"> </span><span class=\"kp\">where</span>\n<span class=\"w\">  </span><span class=\"s\">\"lub ErrorTp y = ErrorTp\"</span>\n<span class=\"o\">|</span><span class=\"w\"> </span><span class=\"s\">\"lub x ErrorTp = ErrorTp\"</span>\n<span class=\"o\">|</span><span class=\"w\"> </span><span class=\"s\">\"lub (ArrowTp a1 b1) (ArrowTp a2 b2) = (</span>\n<span class=\"s\">  if (isCorrect a1)∧(isCorrect b1)∧(isCorrect a2)∧(isCorrect b2)</span>\n<span class=\"s\">  then (if (a1=a2) then (ArrowTp a1 (lub b1 b2)) else AnyTp)</span>\n<span class=\"s\">  else AnyTp</span>\n<span class=\"s\"> )\"</span>\n<span class=\"o\">|</span><span class=\"w\"> </span><span class=\"s\">\"lub (ArrowTp a1 b1) y = (if (isCorrect a1)∧(isCorrect b1) then AnyTp else ErrorTp)\"</span>\n<span class=\"o\">|</span><span class=\"w\"> </span><span class=\"s\">\"lub x (ArrowTp a2 b2) = (if (isCorrect a2)∧(isCorrect b2) then AnyTp else ErrorTp)\"</span>\n<span class=\"o\">|</span><span class=\"w\"> </span><span class=\"s\">\"lub ScalarTp ScalarTp = ScalarTp\"</span>\n<span class=\"o\">|</span><span class=\"w\"> </span><span class=\"s\">\"lub x y = AnyTp\"</span>\n\n<span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">lum_correct_forward</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kp\">fixes</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"n\">TpExpr</span>\n<span class=\"w\">  </span><span class=\"kp\">assumes</span><span class=\"w\"> </span><span class=\"s\">\"isCorrectTp x\"</span><span class=\"w\"> </span><span class=\"kp\">and</span><span class=\"w\"> </span><span class=\"s\">\"isCorrectTp y\"</span>\n<span class=\"w\">  </span><span class=\"kp\">shows</span><span class=\"w\"> </span><span class=\"s\">\"isCorrectTp (lub x y)\"</span>\n<span class=\"k\">proof</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">induct</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\">  </span><span class=\"n\">rule</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">lub.induct</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"k\">case</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">1</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"s\">\"x=ErrorTp\"</span>\n<span class=\"w\">    </span><span class=\"c\">(* where to get informatin that x=ErrorTp</span>\n<span class=\"c\">       or that (isCorrectTp ErrorTp) is in assumptions</span>\n<span class=\"c\">       for this case ?</span>\n<span class=\"c\">    *)</span>\n<span class=\"w\">    </span><span class=\"gr\">sorry</span>\n<span class=\"w\">  </span><span class=\"kt\">thm</span><span class=\"w\"> </span><span class=\"n\">lub.induct</span>\n<span class=\"w\">  </span><span class=\"kt\">thm</span><span class=\"w\"> </span><span class=\"s\">\"1\"</span>\n<span class=\"w\">  </span><span class=\"kt\">thm</span><span class=\"w\"> </span><span class=\"s\">\"1.prems\"</span>\n<span class=\"w\">  </span><span class=\"c\">(*  thm \"1.IH\". --  no IH. ?*)</span>\n<span class=\"w\">  </span><span class=\"c\">(*  thm \"1.hyps\"  --  no hyps ?*)</span>\n<span class=\"w\">  </span><span class=\"kt\">thm</span><span class=\"w\"> </span><span class=\"n\">assms</span>\n<span class=\"w\">  </span><span class=\"kt\">thm</span><span class=\"w\"> </span><span class=\"n\">this</span>\n<span class=\"k\">next</span>\n<span class=\"w\">  </span><span class=\"gr\">oops</span>\n\n<span class=\"k\">end</span>\n</code></pre></div>\n<p>I can't understand - when I am situated inside a case for computation induction, there somewhere should be information about the binding of x and y relative to the current case.  (i.e. should be or. \" x=ErrorTp\". in context or  \"isCorrecctTp ErrorTp\" in assms.   But it is not.  What I missing, and how to bind variables in assumptions with the current case?</p>\n<p>Thanks!</p>",
        "id": 399172753,
        "sender_full_name": "Ruslan Shevchenko",
        "timestamp": 1698601036
    },
    {
        "content": "<p>Without trying to really understand your example: The \"induct\" proof method does not know about the assumptions of your lemma. If you add them explicitly and start your proof with <code>using assms proof (induct x y  rule: lub.induct)</code> everything should work as expected</p>",
        "id": 399174100,
        "sender_full_name": "Simon Roßkopf",
        "timestamp": 1698602309
    },
    {
        "content": "<p>Thanks,  it helped!</p>",
        "id": 399174855,
        "sender_full_name": "Ruslan Shevchenko",
        "timestamp": 1698602877
    },
    {
        "content": "<p>Also note that using <code>induction</code> instead of <code>induct</code> gives you slightly nicer names for the case assumptions. See the Isabelle/Isar Reference Manual for details.</p>",
        "id": 402720616,
        "sender_full_name": "Wolfgang Jeltsch",
        "timestamp": 1700234456
    }
]