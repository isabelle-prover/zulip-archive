[
    {
        "content": "<p>Dear Isabelle Community, I would like to better understand the 'setup_lifting' command and have spelled out a detailed question about this command here: <a href=\"https://stackoverflow.com/questions/72392804/how-to-setup-lifitng-with-custom-types-aka-how-to-define-a-relator\">https://stackoverflow.com/questions/72392804/how-to-setup-lifitng-with-custom-types-aka-how-to-define-a-relator</a><br>\nI would much appreciate your help!</p>",
        "id": 284007490,
        "sender_full_name": "Marco David",
        "timestamp": 1653572747
    },
    {
        "content": "<p>Hi Marco,</p>\n<p>The setup_lifting is only useful if you intend to use the lifting-and-transfer framework, for the details of which you can read <a href=\"https://www21.in.tum.de/~kuncar/documents/huffman-kuncar-cpp2013.pdf\">Huffman and Kuncar's CPP paper</a>. Some recent progress in this framework is mostly related to bounded natural functors, for which you can have a look at <a href=\"https://arxiv.org/abs/2104.05348\">this paper</a>.</p>\n<p>Proposing suitable relators requires insight of the data type. Here <code>setup_lifting</code> gives us some relatively easy relator theorems for free.</p>",
        "id": 284010644,
        "sender_full_name": "Wenda Li",
        "timestamp": 1653574217
    },
    {
        "content": "<p>I appreciate the reference to the theory behind this framework (an interesting glimpse into Isabelle history), but I care about using this framework for a specific example in formalizing mathematics — polynomials —, where two <code>typedef</code>s build on top of each other. Unfortunately, neither of two links above seems to be of much help to learn how to use the framework.</p>\n<p>In the CPP paper, there are two examples of quotient theorems for relators — apparently the type of theorem I should care about — at the beginning of section 3.2. However, the next paragraph immediately states</p>\n<blockquote>\n<p>Users generally will not prove the Quotient theorem manually for new types, as special commands exist to automate the process. The command quotient type defines a new quotient type, internally proves the corresponding Quotient theorem and registers it with setup lifting. <strong>We also support types defined by the command typedef.</strong> The theorem type_definition Rep Abs {x. P x}, which axiomatizes the newly defined subtype, <em>can be supplied to setup_lifting.</em>*<br>\n(emphasis mine)</p>\n</blockquote>\n<p>As explained on StackOverflow, I am working with the <code>typedef</code> command. How can I supply this \"Quotient theorem\" about my monom type to setup_lifting?</p>",
        "id": 284129128,
        "sender_full_name": "Marco David",
        "timestamp": 1653656511
    },
    {
        "content": "<p>Then I guess you are running into the problem of proposing a relator for some concrete types, which again can be <strong><em>highly non-trivial</em></strong> and sometimes even impossible... I have been working on the relator for the topology type and asked a similar question in the mailing list -- not sure if you can find the discussions online.</p>\n<p>For a starting point of self-proposing a relator, you can have a look at the relator for <a href=\"https://isabelle.in.tum.de/dist/library/HOL/HOL/Lifting_Set.html\">sets</a> and that for <a href=\"https://isabelle.in.tum.de/dist/library/HOL/HOL/Filter.html\">filters</a>. Essentially, you need to propose a relation <code>rel_monom</code> of type <code>('a =&gt; 'b =&gt; bool) =&gt; 'a mono =&gt; 'b monom =&gt; bool</code> and then prove properties like </p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">rel_monom_eq</span><span class=\"o\">[</span><span class=\"n\">relator_eq</span><span class=\"o\">]:</span>  <span class=\"s\">\"rel_monom (=) = (=)\"</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">rel_monom_mono</span><span class=\"o\">[</span><span class=\"n\">relator_mono</span><span class=\"o\">]:</span> <span class=\"s\">\"rel_monom R ≤ rel_monom S\"</span> <span class=\"kp\">if</span> <span class=\"s\">\"R ≤ S\"</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">rel_monom_distr</span> <span class=\"o\">[</span><span class=\"n\">relator_distr</span><span class=\"o\">]:</span> <span class=\"s\">\"rel_monom A OO rel_monom B = rel_monom (A OO B)\"</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">Quotient_monom</span> <span class=\"o\">[</span><span class=\"n\">quot_map</span><span class=\"o\">]:</span>\n  <span class=\"s\">\"Quotient R Abs Rep T ⟹ Quotient (rel_monom R) (monom_map Abs) (monom_map Rep) (rel_monom T)\"</span>\n</code></pre></div>",
        "id": 284139318,
        "sender_full_name": "Wenda Li",
        "timestamp": 1653661181
    },
    {
        "content": "<p>Thank you for the concrete pointers and lemma statements, that looks very useful! It is surprising that quotient types and subtypes of lists, sets etc work so seamlessly but as soon as you stack type definitions, it becomes much more complicated suddenly.</p>",
        "id": 284141176,
        "sender_full_name": "Marco David",
        "timestamp": 1653662119
    }
]