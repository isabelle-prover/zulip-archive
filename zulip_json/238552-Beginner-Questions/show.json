[
    {
        "content": "<p>What does \"Rule has fewer conclusions than the arguments given\" mean exactly? I am trying to mutually induct over a inductive, but somehow I am messing up. I even tried explicity instanciating the goals:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">fresh_in_context_term_var</span><span class=\"o\">:</span>\n  <span class=\"kp\">assumes</span> <span class=\"s\">\"atom (x::var) ♯ Γ\"</span>\n  <span class=\"kp\">shows</span> <span class=\"s\">\"Γ , Δ ⊢ e : τ ⟶ atom x ♯ e\"</span>\n  <span class=\"kp\">and</span> <span class=\"s\">\"Alts Γ Δ T σs τ1 alts τ ⟶ atom x ♯ alts\"</span>\n  <span class=\"k\">using</span> <span class=\"n\">assms</span> <span class=\"k\">proof</span> <span class=\"o\">(</span><span class=\"n\">induction</span> <span class=\"n\">Γ</span> <span class=\"n\">Δ</span> <span class=\"n\">e</span> <span class=\"n\">τ</span> <span class=\"kp\">and</span> <span class=\"n\">Γ</span> <span class=\"n\">Δ</span> <span class=\"n\">T</span> <span class=\"n\">σs</span> <span class=\"n\">τ1</span> <span class=\"n\">alts</span> <span class=\"n\">τ</span> <span class=\"n\">rule</span><span class=\"o\">:</span> <span class=\"n\">Tm_Alts.induct</span><span class=\"o\">[</span><span class=\"n\">of</span> <span class=\"s\">\"λ_ _ e _. atom x ♯ e\"</span> <span class=\"s\">\"λ_ _ _ _ _ alts _. atom x ♯ alts\"</span><span class=\"o\">])</span>\n</code></pre></div>",
        "id": 234480603,
        "sender_full_name": "Jan van Brügge",
        "timestamp": 1618398772
    },
    {
        "content": "<p>If possible, please post a full example (including all the relevant definitions, or at least dummies for the constants/notation used) so that people can try it out themselves.</p>",
        "id": 234481613,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1618399388
    },
    {
        "content": "<p>In any case, I think instantiating the induction rule manually like this is only going to confuse the <code>induction</code> method. If you want to instantiate stuff by hand for debugging purposes, you can try applying the induction rule manually with e.g. <code>rule</code>.</p>",
        "id": 234481704,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1618399450
    },
    {
        "content": "<p>I tried it first without instantiating, but with the same error. I pushed the code and this is the lemma: <a href=\"https://github.com/jvanbruegge/isabelle-lambda-calculus/blob/case-expressions/Typing.thy#L214\">https://github.com/jvanbruegge/isabelle-lambda-calculus/blob/case-expressions/Typing.thy#L214</a></p>",
        "id": 234482292,
        "sender_full_name": "Jan van Brügge",
        "timestamp": 1618399814
    },
    {
        "content": "<p>It works if I use <code>proof (rule Tm_Alts.induct, goal_cases)</code>, but why not with the induction method?</p>",
        "id": 234483796,
        "sender_full_name": "Jan van Brügge",
        "timestamp": 1618400632
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">fresh_in_context_term_var</span><span class=\"o\">:</span>\n  <span class=\"kp\">assumes</span> <span class=\"s\">\"atom (x::var) ♯ Γ\"</span>\n  <span class=\"kp\">shows</span> <span class=\"s\">\"Γ , Δ ⊢ e : τ ⟹ atom x ♯ e\"</span>\n  <span class=\"kp\">and</span> <span class=\"s\">\"Alts Γ Δ T σs τ1 alts τ ⟹ atom x ♯ alts\"</span>\n<span class=\"k\">proof</span> <span class=\"o\">-</span>\n  <span class=\"k\">have</span> <span class=\"s\">\"(Γ , Δ ⊢ e : τ ⟶ (atom x ♯ Γ ⟶ atom x ♯ e)) ∧ (Alts Γ Δ T σs τ1 alts τ ⟶ (atom x ♯ Γ ⟶ atom x ♯ alts))\"</span>\n  <span class=\"k\">proof</span> <span class=\"o\">(</span><span class=\"n\">rule</span> <span class=\"n\">Tm_Alts.induct</span><span class=\"o\">,</span> <span class=\"n\">goal_cases</span><span class=\"o\">)</span>\n    <span class=\"c\">(* ... *)</span>\n  <span class=\"k\">qed</span>\n\n  <span class=\"k\">then</span> <span class=\"k\">show</span> <span class=\"s\">\"Γ , Δ ⊢ e : τ ⟹ atom x ♯ e\"</span> <span class=\"kp\">and</span> <span class=\"s\">\"Alts Γ Δ T σs τ1 alts τ ⟹ atom x ♯ alts\"</span> <span class=\"k\">using</span> <span class=\"n\">assms</span> <span class=\"k\">by</span> <span class=\"n\">auto</span>\n<span class=\"k\">qed</span>\n</code></pre></div>",
        "id": 234484455,
        "sender_full_name": "Jan van Brügge",
        "timestamp": 1618401000
    },
    {
        "content": "<p>the induction tactic might be having a problem with a goal shaped <code>shows X and Y</code></p>",
        "id": 234484661,
        "sender_full_name": "Jakub Kądziołka",
        "timestamp": 1618401105
    },
    {
        "content": "<p>no, it works for other lemmas: <a href=\"https://github.com/jvanbruegge/isabelle-lambda-calculus/blob/case-expressions/Lemmas.thy#L178\">https://github.com/jvanbruegge/isabelle-lambda-calculus/blob/case-expressions/Lemmas.thy#L178</a></p>",
        "id": 234484861,
        "sender_full_name": "Jan van Brügge",
        "timestamp": 1618401212
    },
    {
        "content": "<p>do the induction rules in question have the right number of conclusions?</p>",
        "id": 234485061,
        "sender_full_name": "Jakub Kądziołka",
        "timestamp": 1618401313
    },
    {
        "content": "<p>yes, it looks like this:</p>\n<div class=\"codehilite\"><pre><span></span><code>(?x1.0 , ?x2.0 ⊢ ?x3.0 : ?x4.0 ⟶ ?P1.0 ?x1.0 ?x2.0 ?x3.0 ?x4.0) ∧ (Alts ?x5.0 ?x6.0 ?x7.0 ?x8.0 ?x9.0 ?x10.0 ?x11.0 ⟶ ?P2.0 ?x5.0 ?x6.0 ?x7.0 ?x8.0 ?x9.0 ?x10.0 ?x11.0)\n</code></pre></div>",
        "id": 234485125,
        "sender_full_name": "Jan van Brügge",
        "timestamp": 1618401345
    },
    {
        "content": "<p>The problem is the <code>and</code>.</p>",
        "id": 234485653,
        "sender_full_name": "Lukas Stevens",
        "timestamp": 1618401612
    },
    {
        "content": "<p>ok, this works, but as soon as I try to add <code>using assms proof</code> it fails again with \"Failed to apply initial proof method\"</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">fresh_in_context_term_var</span><span class=\"o\">:</span>\n  <span class=\"kp\">assumes</span> <span class=\"s\">\"atom (x::var) ♯ Γ\"</span>\n  <span class=\"kp\">shows</span> <span class=\"s\">\"(Γ , Δ ⊢ e : τ ⟶ atom x ♯ e) ∧ (Alts Γ Δ T σs τ1 alts τ ⟶ atom x ♯ alts)\"</span>\n<span class=\"k\">proof</span> <span class=\"o\">(</span><span class=\"n\">induction</span> <span class=\"n\">rule</span><span class=\"o\">:</span> <span class=\"n\">Tm_Alts.induct</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 234486351,
        "sender_full_name": "Jan van Brügge",
        "timestamp": 1618401947
    },
    {
        "content": "<p>Because the induction rule probably does not consume/eliminate <code>\"atom (x::var) ♯ Γ\"</code></p>",
        "id": 234486969,
        "sender_full_name": "Lukas Stevens",
        "timestamp": 1618402260
    },
    {
        "content": "<p>Yes, but formulating the goal like this is annoying to prove because of the extra implication</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"s\">\"(Γ , Δ ⊢ e : τ ⟶ (atom x ♯ Γ ⟶ atom x ♯ e)) ∧ (Alts Γ Δ T σs τ1 alts τ ⟶ (atom x ♯ Γ ⟶ atom x ♯ alts))\"</span>\n</code></pre></div>",
        "id": 234487027,
        "sender_full_name": "Jan van Brügge",
        "timestamp": 1618402307
    },
    {
        "content": "<p>I guess it can't be helped</p>",
        "id": 234487409,
        "sender_full_name": "Jan van Brügge",
        "timestamp": 1618402514
    },
    {
        "content": "<p>You could  define a new induction rule that consumes the assumption and puts it into the hypothesis. Doesn't make sense for a one-off though.</p>",
        "id": 234487596,
        "sender_full_name": "Lukas Stevens",
        "timestamp": 1618402605
    },
    {
        "content": "<p>But <code>induct</code>/<code>induction</code> normally work without consuming all the facts as well, right?</p>",
        "id": 234496864,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1618406391
    },
    {
        "content": "<p>section ‹Abelian Groups›</p>\n<p>context abelian_group<br>\nbegin</p>\n<p>definition minus:: \"'a ⇒ 'a ⇒ 'a\" (infixl \"‐\" 70)<br>\n  where \"x ‐ y ≡ x ⋅ inverse y \"</p>\n<p>lemma vsdf:\"x ⋅ y = 𝟭 ⟹ x  = inverse y\"<br>\nproof(unfold_locales,auto)<br>\n  assume xg:\"x ∈ G\" and yg:\"y ∈ G\"\" x ⋅ y = 𝟭\"<br>\n  from this have \"y ⋅ x = 𝟭\" by (simp add: commutative)<br>\n  from this and xg and yg show\"x = inverse y\" by (simp add:inverse_equality)<br>\nqed</p>\n<p>end (* abelian_group*)</p>\n<p>can someone help me with why it indicates:</p>\n<p>Failed to refine any pending goal <br>\nLocal statement fails to refine any pending goal<br>\nFailed attempt to solve goal by exported rule:<br>\n  (x ∈ G) ⟹<br>\n  (y ∈ G) ⟹ (x ⋅ y = 𝟭) ⟹ x = local.inverse y</p>\n<p>when I use \"show\" in the last line but it's ok if \"show\" is replaced by \"have\"?</p>",
        "id": 234497019,
        "sender_full_name": "zibo yang",
        "timestamp": 1618406436
    },
    {
        "content": "<p>(Note: if you're just interested in the group, you'll want <code>comm_group</code> instead. The <code>abelian_group</code> locale talks about the additive group of a ring)</p>",
        "id": 234497832,
        "sender_full_name": "Jakub Kądziołka",
        "timestamp": 1618406733
    },
    {
        "content": "<p>(also, paste your code inside</p>\n<div class=\"codehilite\"><pre><span></span><code> ```isabelle\n ...\n ```\n</code></pre></div>\n<p>to make it look nice and preserve indentation)</p>",
        "id": 234498106,
        "sender_full_name": "Jakub Kądziołka",
        "timestamp": 1618406830
    },
    {
        "content": "<p>okay now that I've loaded up Isabelle with HOL-Algebra it seems that you're defining your own <code>abelian_group</code> locale. Leaving aside why you'd want to do that, there isn't really a good way to check the code out locally and poke around...</p>",
        "id": 234498388,
        "sender_full_name": "Jakub Kądziołka",
        "timestamp": 1618406942
    },
    {
        "content": "<p>anyway, this error usually means that you <code>assume</code>d something that isn't part of the goal</p>",
        "id": 234498475,
        "sender_full_name": "Jakub Kądziołka",
        "timestamp": 1618406973
    },
    {
        "content": "<p>you shouldn't need <code>unfold_locales</code> unless you're proving a statement with the shape <code>locale_name some_object</code></p>",
        "id": 234498792,
        "sender_full_name": "Jakub Kądziołka",
        "timestamp": 1618407069
    },
    {
        "content": "<p>fundamentally, the issue is that your <code>xg</code> and <code>yg</code> assumptions are unfounded, I think. You might be interested in how <code>HOL-Algebra</code> solves this problem: <a href=\"https://github.com/NieDzejkob/isabelle-math-contests/blob/master/NOTES.md#the-two-definitions-of-a-group\">https://github.com/NieDzejkob/isabelle-math-contests/blob/master/NOTES.md#the-two-definitions-of-a-group</a></p>",
        "id": 234499007,
        "sender_full_name": "Jakub Kądziołka",
        "timestamp": 1618407143
    },
    {
        "content": "<p>also, some Isar style tips: <code>from this have</code> = <code>hence</code>; <code>from this and xg and yg show</code> = <code>with xg and yg show</code> or <code>with xg yg show</code></p>",
        "id": 234499143,
        "sender_full_name": "Jakub Kądziołka",
        "timestamp": 1618407187
    },
    {
        "content": "<p>I found something very interesting but strange is that: when I add [ x \\&lt;in &gt; G; y \\&lt;in&gt; G] into the lemma, it works.  but why does Isabelle think it reasonable when I state nothing like [ x \\&lt;in &gt; G; y \\&lt;in&gt; G]?  I always think when I state x \\&lt;cdot&gt; y, it should indicate  [ x \\&lt;in &gt; G; y \\&lt;in&gt; G].......</p>",
        "id": 234499723,
        "sender_full_name": "zibo yang",
        "timestamp": 1618407390
    },
    {
        "content": "<p>why <em>would</em> it automatically assume <code>x \\&lt;in&gt; G</code>?</p>",
        "id": 234499789,
        "sender_full_name": "Jakub Kądziołka",
        "timestamp": 1618407428
    },
    {
        "content": "<p>because \\&lt;cdot&gt; should be the type\"G -&gt; G -&gt; G\" when it was initialized, isabelle should infer x \\&lt;in&gt; G</p>",
        "id": 234500547,
        "sender_full_name": "zibo yang",
        "timestamp": 1618407718
    },
    {
        "content": "<p>Every expression in Isabelle has some type, and if you don't specify it (for example with <code>fixes a :: nat and S :: \"nat set\"</code> in the lemma statement), the most general type will be inferred (in a lemma, based on its statement. For example <code>a :: 'a</code> and <code>S :: 'a set</code>, for any type variable <code>'a</code>). However, <code>G</code> is not a type here, but a set — simply, a value of type <code>'something set</code>. The multiplication is defined (like all functions in HOL) on an entire type, not just a set.</p>",
        "id": 234500677,
        "sender_full_name": "Jakub Kądziołka",
        "timestamp": 1618407757
    },
    {
        "content": "<p>ok. I am a bit clear with that. so it's the same reason why we need to clarify the type (1::nat) + 1?</p>",
        "id": 234501281,
        "sender_full_name": "zibo yang",
        "timestamp": 1618408003
    },
    {
        "content": "<p>yeah, kinda — inference will give both your <code>1</code>s the type <code>'a</code> with a sort constraint <code>'a::{plus, and_probably_something_else_I_forget}</code></p>",
        "id": 234501431,
        "sender_full_name": "Jakub Kądziołka",
        "timestamp": 1618408068
    },
    {
        "content": "<p>BTW, are you creating your own algebra library because you're unaware of the existing one, or on purpose as practice?</p>",
        "id": 234501552,
        "sender_full_name": "Jakub Kądziołka",
        "timestamp": 1618408112
    },
    {
        "content": "<p>the situation is more closed to practice but I still wanna refer that lemma in another file</p>",
        "id": 234501853,
        "sender_full_name": "zibo yang",
        "timestamp": 1618408220
    },
    {
        "content": "<p>what is the difference between unfolding and using</p>",
        "id": 234512390,
        "sender_full_name": "zibo yang",
        "timestamp": 1618412082
    },
    {
        "content": "<p><code>unfolding some_fact</code> where <code>some_fact</code> is of the form <code>A = B</code> will replace all occurences of <code>A</code> with <code>B</code> in your goal before running the tactic. <code>using</code> will simply pass on the fact to the tactic. They have quite a similar effect if you're using, for example, <code>by simp</code></p>",
        "id": 234512742,
        "sender_full_name": "Jakub Kądziołka",
        "timestamp": 1618412196
    }
]