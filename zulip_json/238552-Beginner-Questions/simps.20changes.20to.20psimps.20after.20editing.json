[
    {
        "content": "<p>I corrected a wrong definition. After the correction, Isabelle cannot automatically prove it is a function, and hence requires me to change from <code>fun</code> to <code>function</code>. Moreover, after the editing, I find the definition is not applied automatically by <code>simp</code> anymore, causing some proof to break.</p>",
        "id": 476582223,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1728802340
    },
    {
        "content": "<p>The <strong>correct</strong> definition, i.e., the new version, is like this:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">function</span><span class=\"w\"> </span><span class=\"n\">satis</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"('m set × ('m ⇒ nat)) × 'p set ⇒ 'a set × ('m ⇒ 'a list ⇒ bool) × ('p ⇒ 'a ⇒ bool) ⇒</span>\n<span class=\"s\">              'a ⇒ ('m,'p) form ⇒ bool\"</span>\n<span class=\"w\">  </span><span class=\"kp\">where</span>\n<span class=\"w\">   </span><span class=\"s\">\"satis (τ,Φ) (W,R,V) w TRUE ⟷ w ∈ W\"</span>\n<span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"s\">\"satis (τ,Φ) (W,R,V) w FALSE ⟷ False\"</span>\n<span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"s\">\"satis (τ,Φ) (W,R,V) w (VAR p) ⟷ p ∈ Φ ∧ w ∈ W ∧ V p w\"</span>\n<span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"s\">\"satis (τ,Φ) (W,R,V) w (CONJ f1 f2) =</span>\n<span class=\"s\">   (satis (τ,Φ) (W,R,V) w f1 ∧ satis (τ,Φ) (W,R,V) w f2)\"</span>\n<span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"s\">\"satis (τ,Φ) (W,R,V) w (DISJ f1 f2) =</span>\n<span class=\"s\">   (satis (τ,Φ) (W,R,V) w f1 ∨ satis (τ,Φ) (W,R,V) w f2)\"</span>\n<span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"s\">\"satis (τ,Φ) (W,R,V) w (IMP f1 f2) ⟷ w ∈ W ∧</span>\n<span class=\"s\">   (satis (τ,Φ) (W,R,V) w f1 ⟶ satis (τ,Φ) (W,R,V) w f2)\"</span>\n<span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"s\">\"satis (τ,Φ) (W,R,V) w (NOT f) ⟷ (w ∈ W  ∧ ¬ satis (τ,Φ) (W,R,V) w f)\"</span>\n<span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"s\">\"satis (τ,Φ) (W,R,V) w (BOX m fl) ⟷</span>\n<span class=\"s\">    (m ∈ fst τ ∧ (snd τ) m = length fl ∧</span>\n<span class=\"s\">     w ∈ W ∧ (∀vl. length vl = length fl ∧ R m (w # vl) ⟶</span>\n<span class=\"s\">     (∃i. i &lt; length vl ∧</span>\n<span class=\"s\">     satis (τ,Φ) (W,R,V) (vl ! i) (fl ! i))))\"</span>\n<span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"s\">\"satis (τ,Φ) (W,R,V) w (DIAM m fl) ⟷</span>\n<span class=\"s\">    (m ∈ fst τ ∧ (snd τ) m = length fl ∧</span>\n<span class=\"s\">     w ∈ W ∧ (∃vl. length vl = length fl ∧ R m (w # vl) ∧</span>\n<span class=\"s\">     list_all2 (λ f v. satis (τ,Φ) (W,R,V) v f) fl vl))\"</span>\n<span class=\"w\"> </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"n\">auto</span>\n<span class=\"w\">  </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">form.exhaust</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">blast</span>\n</code></pre></div>",
        "id": 476582235,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1728802368
    },
    {
        "content": "<p>The only difference between it and the previous one is on the clause for \"BOX\". Previously, I had:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"n\">satis</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">τ</span><span class=\"o\">,</span><span class=\"n\">Φ</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">W</span><span class=\"o\">,</span><span class=\"n\">R</span><span class=\"o\">,</span><span class=\"n\">V</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">w</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">BOX</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"w\"> </span><span class=\"n\">fl</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">⟷</span>\n<span class=\"w\">    </span><span class=\"o\">(</span><span class=\"n\">m</span><span class=\"w\"> </span><span class=\"n\">∈</span><span class=\"w\"> </span><span class=\"n\">fst</span><span class=\"w\"> </span><span class=\"n\">τ</span><span class=\"w\"> </span><span class=\"n\">∧</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">snd</span><span class=\"w\"> </span><span class=\"n\">τ</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">length</span><span class=\"w\"> </span><span class=\"n\">fl</span><span class=\"w\"> </span><span class=\"n\">∧</span>\n<span class=\"w\">     </span><span class=\"n\">w</span><span class=\"w\"> </span><span class=\"n\">∈</span><span class=\"w\"> </span><span class=\"n\">W</span><span class=\"w\"> </span><span class=\"n\">∧</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">∀vl.</span><span class=\"w\"> </span><span class=\"n\">length</span><span class=\"w\"> </span><span class=\"n\">vl</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">length</span><span class=\"w\"> </span><span class=\"n\">fl</span><span class=\"w\"> </span><span class=\"n\">∧</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">w</span><span class=\"w\"> </span><span class=\"n\">#</span><span class=\"w\"> </span><span class=\"n\">vl</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">⟶</span>\n<span class=\"w\">     </span><span class=\"n\">list_all2</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">λ</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"n\">v.</span><span class=\"w\"> </span><span class=\"n\">satis</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">τ</span><span class=\"o\">,</span><span class=\"n\">Φ</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">W</span><span class=\"o\">,</span><span class=\"n\">R</span><span class=\"o\">,</span><span class=\"n\">V</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">fl</span><span class=\"w\"> </span><span class=\"n\">vl</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">)</span><span class=\"s\">\"</span>\n</code></pre></div>",
        "id": 476582307,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1728802470
    },
    {
        "content": "<p>And the previous version can be automatically proved to be a function.</p>",
        "id": 476582316,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1728802488
    },
    {
        "content": "<p><code>function</code> requires you to also prove termination (<code>fun</code> does it automatically).<br>\nOnly after you prove termination, you will have access to <code>simps</code>.<br>\nYou can find more details in the tutorial \"Defining Recursive Functions in Isabelle/HOL\" (in jedit on the left, click on Documentation, then Isabelle Tutorials, then functions.</p>",
        "id": 476582632,
        "sender_full_name": "Maximilian Schäffeler",
        "timestamp": 1728802855
    },
    {
        "content": "<p>May I please ask for suggestions on how to deal with that? I would like simp to automatically work for it. I tried \"grep\" with \"function\" and \"simp\" on my mac to see how to add the definition to the simp set, but zsh does not find the command, indicating maybe it does not find the correct path... </p>\n<p>Also if I can write is a fun instead of function, it might automatically change back to <code>simp</code>?</p>",
        "id": 476582634,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1728802856
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"433149\">Maximilian Schäffeler</span> <a href=\"#narrow/stream/238552-Beginner-Questions/topic/simps.20changes.20to.20psimps.20after.20editing/near/476582632\">said</a>:</p>\n<blockquote>\n<p><code>function</code> requires you to also prove termination (<code>fun</code> does it automatically).<br>\nOnly after you prove termination, you will have access to <code>simps</code>.<br>\nYou can find more details in the tutorial \"Defining Recursive Functions in Isabelle/HOL\" (in jedit on the left, click on Documentation, then Isabelle Tutorials, then functions.</p>\n</blockquote>\n<p>Thank you very much! But it seems to me that Isabelle is already happy with the termination?</p>",
        "id": 476582675,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1728802921
    },
    {
        "content": "<p>Here is the interactive window, it accepts it as a constant and does not give me any goal.</p>",
        "id": 476582754,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1728802942
    },
    {
        "content": "<p><a href=\"/user_uploads/14278/9xywhZJQRHqUYyM1D7HlpC9H/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/14278/9xywhZJQRHqUYyM1D7HlpC9H/image.png\" title=\"image.png\"><img data-original-dimensions=\"2816x1476\" src=\"/user_uploads/thumbnail/14278/9xywhZJQRHqUYyM1D7HlpC9H/image.png/840x560.webp\"></a></div>",
        "id": 476582769,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1728802970
    },
    {
        "content": "<p>Yes, it accepts it as a constant, but the <code>psimp</code> lemmas have an additional assumption, that basically states that the function terminates on this input.</p>",
        "id": 476582796,
        "sender_full_name": "Maximilian Schäffeler",
        "timestamp": 1728802999
    },
    {
        "content": "<p>Oh I see, despite the fact that Isabelle does not ask, I have to write:<br>\ntermination proof - <br>\n  show ?thesis  sorry<br>\nqed<br>\nto start the proof.</p>",
        "id": 476582871,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1728803060
    },
    {
        "content": "<p>You may also prove termination much later, or never at all. The only problem is that in this case, you know much less about how <code>satis</code> behaves on arbitrary inputs.</p>",
        "id": 476582875,
        "sender_full_name": "Maximilian Schäffeler",
        "timestamp": 1728803065
    },
    {
        "content": "<p>Thanks! I see. I  think the quantification on <code>vl</code> might be the reason it cannot automatically proved to terminate.</p>",
        "id": 476582990,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1728803171
    },
    {
        "content": "<p>I am hesitating whether I would change to <code>inductive</code> instead. It will take some thoughts...</p>",
        "id": 476583043,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1728803220
    },
    {
        "content": "<p>Note that if you use <code>function</code>, Isabelle does not even try to prove termination automatically.</p>",
        "id": 476588555,
        "sender_full_name": "Maximilian Schäffeler",
        "timestamp": 1728807783
    },
    {
        "content": "<p>Thanks! I recently learned that if termination can be proved automatically, then <code>fun</code> is enough, but I was indeed not aware of the other way around: i.e. if fun is not enough then I have to type \"termination\" by hand. It i good to know.</p>",
        "id": 476588679,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1728807957
    }
]