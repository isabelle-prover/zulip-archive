[
    {
        "content": "<p><code>Define a function count :: 'a ⇒ 'a list ⇒ nat that counts the number of occurrences of an element in a list. Prove count x xs ≤ length xs.</code></p>\n<div class=\"codehilite\" data-code-language=\"fun\"><pre><span></span><code>  \"count x [] = 0\"\n| \"count x (y#xs) = (if (x=y) then (1 + count x xs) else (count x xs))\"\n\nlemma count_cons: \"count x (y#xs) ≤ 1 + count x xs\"\nproof (induction xs)\n  case Nil\n  then show ?case by simp\nnext\n  case (Cons a xs)\n  then show ?case by simp\nqed\n\nlemma count_less: \"count x xs ≤ length xs\"\nproof (induction xs)\n  case Nil\n  then show ?case by simp\nnext\n  case (Cons a xs)\n  then show ?case by (simp add:count_cons)\nqed\n</code></pre></div>\n<p>This does not work on the Cons case. by auto works but that is not very readable or elegant.</p>\n<p>Can you give me a hint what is missing? Not a solution.</p>",
        "id": 223351565,
        "sender_full_name": "Gergely Buday",
        "timestamp": 1611136672
    },
    {
        "content": "<p>What is unreadable about <code>by auto</code>?</p>",
        "id": 223351924,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1611136888
    },
    {
        "content": "<p>update: ```Failed to finish proof⌂:<br>\ngoal (1 subgoal):</p>\n<ol>\n<li>count x xs ≤ length xs ⟹ x = a ⟶ count a xs ≤ length xs```</li>\n</ol>\n<p><span class=\"user-mention\" data-user-id=\"233198\">@Mathias Fleury</span> I would like to show the used lemmas other than trivial arithmetic equalities.</p>",
        "id": 223352071,
        "sender_full_name": "Gergely Buday",
        "timestamp": 1611136953
    },
    {
        "content": "<p>Also, one of the goals of theorem proving is to understand what's going on and that is not possible with auto.</p>",
        "id": 223352174,
        "sender_full_name": "Gergely Buday",
        "timestamp": 1611137005
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>lemma count_less: &quot;count x xs ≤ length xs&quot;\n  by (induction xs) auto\n</code></pre></div>\n<p>works on Isabelle2020 and RC2.</p>",
        "id": 223353277,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1611137777
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"234198\">Gergely Buday</span> <a href=\"#narrow/stream/238552-Beginner-Questions/topic/something.20better.20than.20auto/near/223352174\">said</a>:</p>\n<blockquote>\n<p>Also, one of the goals of theorem proving is to understand what's going on and that is not possible with auto.</p>\n</blockquote>\n<p>So you prefer</p>\n<div class=\"codehilite\"><pre><span></span><code>lemma count_less: &quot;count x xs ≤ length xs&quot;\n  by (induction xs) (simp, smt?)+\n</code></pre></div>\n<p>because you can understand what is going on?</p>",
        "id": 223353640,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1611138004
    },
    {
        "content": "<p>Oh well.</p>",
        "id": 223354010,
        "sender_full_name": "Gergely Buday",
        "timestamp": 1611138262
    }
]