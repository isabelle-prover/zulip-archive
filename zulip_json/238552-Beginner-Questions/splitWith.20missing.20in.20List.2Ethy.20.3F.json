[
    {
        "content": "<p>I was looking for <code>splitWith</code>, like<br>\n<code>fun splitWith :: \"'a list ⇒ ('a ⇒ bool) ⇒ 'a list × 'a list\" where\n\"splitWith t p = foldr (λe (l,r). if p e then (e#l,r) else (l, e#r)) t ([],[])\"\n</code><br>\nany reason it (and friends) are not in the List theory?</p>",
        "id": 244968914,
        "sender_full_name": "Robert Soeldner",
        "timestamp": 1625514642
    },
    {
        "content": "<p>You're looking for <code>partition</code>.</p>",
        "id": 244969073,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1625514795
    },
    {
        "content": "<p>ha :-) thank you</p>",
        "id": 244969128,
        "sender_full_name": "Robert Soeldner",
        "timestamp": 1625514843
    },
    {
        "content": "<p>If you want to export code, note that the default code equations from the library may not be terribly efficient depending on your target language.</p>",
        "id": 244969291,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1625514967
    },
    {
        "content": "<p>(The definition/code equations are basically equivalent to your fold.)</p>",
        "id": 244969329,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1625515015
    },
    {
        "content": "<p>good to know, thank you</p>",
        "id": 244969374,
        "sender_full_name": "Robert Soeldner",
        "timestamp": 1625515075
    }
]