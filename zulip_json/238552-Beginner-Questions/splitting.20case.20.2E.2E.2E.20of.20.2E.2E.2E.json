[
    {
        "content": "<p>Hello,</p>\n<p>I have the following statement:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"o\">(</span><span class=\"k\">case</span><span class=\"w\"> </span><span class=\"n\">bfold</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"n\">t</span><span class=\"w\"> </span><span class=\"n\">of</span>\n<span class=\"w\">   </span><span class=\"n\">Bc</span><span class=\"w\"> </span><span class=\"n\">True</span><span class=\"w\"> </span><span class=\"n\">⇒</span><span class=\"w\"> </span><span class=\"n\">bdefs</span><span class=\"w\"> </span><span class=\"n\">c1</span><span class=\"w\"> </span><span class=\"n\">t</span><span class=\"w\"> </span><span class=\"o\">|</span>\n<span class=\"w\">   </span><span class=\"n\">Bc</span><span class=\"w\"> </span><span class=\"n\">False</span><span class=\"w\"> </span><span class=\"n\">⇒</span><span class=\"w\"> </span><span class=\"n\">bdefs</span><span class=\"w\"> </span><span class=\"n\">c2</span><span class=\"w\"> </span><span class=\"n\">t</span><span class=\"w\"> </span><span class=\"o\">|</span>\n<span class=\"w\">   </span><span class=\"o\">_</span><span class=\"w\"> </span><span class=\"n\">⇒</span><span class=\"w\"> </span><span class=\"n\">merge</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">bdefs</span><span class=\"w\"> </span><span class=\"n\">c1</span><span class=\"w\"> </span><span class=\"n\">t</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">bdefs</span><span class=\"w\"> </span><span class=\"n\">c2</span><span class=\"w\"> </span><span class=\"n\">t</span><span class=\"o\">)</span>\n<span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"sx\">`(- (lvars c1 ∪ lvars c2))</span>\n</code></pre></div>\n<p>I have show shown that each of the cases simplifies to:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"n\">t</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"sx\">` (-(lvars c1 ∪ lvars c2))</span>\n</code></pre></div>\n<p>How do I show that the original statement must simplify to the same statement?</p>",
        "id": 406417173,
        "sender_full_name": "David Wang",
        "timestamp": 1701910140
    },
    {
        "content": "<p>does using the split theorem for your datatype work? it should be named something like <code>foo.split</code></p>",
        "id": 406417684,
        "sender_full_name": "Yong Kiam",
        "timestamp": 1701910352
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"234226\">Yong Kiam</span> <a href=\"#narrow/stream/238552-Beginner-Questions/topic/splitting.20case.20.2E.2E.2E.20of.20.2E.2E.2E/near/406417684\">said</a>:</p>\n<blockquote>\n<p>does using the split theorem for your datatype work? it should be named something like <code>foo.split</code></p>\n</blockquote>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"w\">  </span><span class=\"k\">case</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">If</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"n\">c1</span><span class=\"w\"> </span><span class=\"n\">c2</span><span class=\"o\">)</span>\n<span class=\"ow\">...</span>\n<span class=\"w\">  </span><span class=\"k\">hence</span><span class=\"w\"> </span><span class=\"n\">1</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"bdefs c1 t |` (-(lvars c1 ∪ lvars c2))</span>\n<span class=\"s\">    = t |` (-(lvars c1 ∪ lvars c2))\"</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">auto</span>\n<span class=\"ow\">...</span>\n<span class=\"w\">  </span><span class=\"k\">hence</span><span class=\"w\"> </span><span class=\"n\">2</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"bdefs c2 t |` (-(lvars c1 ∪ lvars c2))</span>\n<span class=\"s\">    = t |` (-(lvars c1 ∪ lvars c2))\"</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">auto</span>\n\n<span class=\"w\">  </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"n\">3</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"merge (bdefs c1 t) (bdefs c2 t) |` (-(lvars c1 ∪ lvars c2))</span>\n<span class=\"s\">    = t |` (-(lvars c1 ∪ lvars c2))\"</span>\n<span class=\"w\">    </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">1</span><span class=\"w\"> </span><span class=\"n\">2</span><span class=\"w\"> </span><span class=\"n\">merge_restrict</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">blast</span>\n<span class=\"ow\">...</span>\n<span class=\"w\">  </span><span class=\"k\">also</span><span class=\"w\"> </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"s\">\"... = (case (bfold b t) of</span>\n<span class=\"s\">  (Bc True)   ⇒ bdefs c1 t |</span>\n<span class=\"s\">  (Bc False)  ⇒ bdefs c2 t |</span>\n<span class=\"s\">  _           ⇒ merge (bdefs c1 t) (bdefs c2 t)</span>\n<span class=\"s\">  ) |` (-(lvars c1 ∪ lvars c2))\"</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">simp</span>\n<span class=\"w\">  </span><span class=\"k\">also</span><span class=\"w\"> </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"s\">\"... = t |` (-(lvars c1 ∪ lvars c2))\"</span>\n<span class=\"w\">    </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">1</span><span class=\"w\"> </span><span class=\"n\">2</span><span class=\"w\"> </span><span class=\"n\">3</span>\n<span class=\"w\">    </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">auto</span><span class=\"w\"> </span><span class=\"n\">split</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">bexp.split</span><span class=\"o\">)</span>\n<span class=\"c\">(* or using 1 2 3 bexp.split sledgehammer *)</span>\n</code></pre></div>\n<p>Surprisingly not.</p>",
        "id": 406419355,
        "sender_full_name": "David Wang",
        "timestamp": 1701911094
    },
    {
        "content": "<p>do you mean the above <code>auto split: bexp.split</code> line doesn't work?</p>",
        "id": 406419610,
        "sender_full_name": "Yong Kiam",
        "timestamp": 1701911216
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"234226\">Yong Kiam</span> <a href=\"#narrow/stream/238552-Beginner-Questions/topic/splitting.20case.20.2E.2E.2E.20of.20.2E.2E.2E/near/406419610\">said</a>:</p>\n<blockquote>\n<p>do you mean the above <code>auto split: bexp.split</code> line doesn't work?</p>\n</blockquote>\n<p>This worked in the end: </p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"o\">(</span><span class=\"n\">auto</span><span class=\"w\"> </span><span class=\"n\">split</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">bexp.split</span><span class=\"w\"> </span><span class=\"n\">bool.split</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 406419687,
        "sender_full_name": "David Wang",
        "timestamp": 1701911262
    },
    {
        "content": "<p>Thank you.</p>",
        "id": 406419766,
        "sender_full_name": "David Wang",
        "timestamp": 1701911293
    }
]