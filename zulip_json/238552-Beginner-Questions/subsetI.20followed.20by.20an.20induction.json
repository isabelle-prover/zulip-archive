[
    {
        "content": "<p>I would like to prove:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">gen_set_subset_world</span><span class=\"w\"> </span><span class=\"o\">:</span>\n<span class=\"w\">  </span><span class=\"kp\">assumes</span><span class=\"w\"> </span><span class=\"n\">M</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"is_model sig M\"</span><span class=\"w\"> </span><span class=\"kp\">and</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"X ⊆ world M\"</span>\n<span class=\"w\">  </span><span class=\"kp\">shows</span><span class=\"w\"> </span><span class=\"s\">\"gen_set (rel M) X  ⊆ world M\"</span>\n</code></pre></div>\n<p>I want to start with <code>proof (intro subsetI,induction rule:gen_set.induct)</code> but it complains \"Failed to apply initial proof method\". May I please ask why? <br>\nIf I delete <code>induction rule:gen_set.induct</code>, then <code>intro subsetI</code> works correctly, and gives the goal:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"w\"> </span><span class=\"n\">1.</span><span class=\"w\"> </span><span class=\"n\">⋀x.</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">∈</span><span class=\"w\"> </span><span class=\"n\">gen_set</span><span class=\"w\"> </span><span class=\"n\">Op</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">rel</span><span class=\"w\"> </span><span class=\"n\">M</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"w\"> </span><span class=\"n\">⟹</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">∈</span><span class=\"w\"> </span><span class=\"n\">world</span><span class=\"w\"> </span><span class=\"n\">M</span>\n</code></pre></div>\n<p>The induction principle looks gen_set.induct looks like this:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"o\">?</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">∈</span><span class=\"w\"> </span><span class=\"n\">gen_set</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">Op</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">R</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">X</span><span class=\"w\"> </span><span class=\"n\">⟹</span>\n<span class=\"o\">(</span><span class=\"n\">⋀x.</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">∈</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">X</span><span class=\"w\"> </span><span class=\"n\">⟹</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">P</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">⟹</span>\n<span class=\"o\">(</span><span class=\"n\">⋀w</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"w\"> </span><span class=\"n\">ul</span><span class=\"w\"> </span><span class=\"n\">u.</span>\n<span class=\"w\">    </span><span class=\"n\">w</span><span class=\"w\"> </span><span class=\"n\">∈</span><span class=\"w\"> </span><span class=\"n\">gen_set</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">Op</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">R</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">X</span><span class=\"w\"> </span><span class=\"n\">⟹</span>\n<span class=\"w\">    </span><span class=\"o\">?</span><span class=\"n\">P</span><span class=\"w\"> </span><span class=\"n\">w</span><span class=\"w\"> </span><span class=\"n\">⟹</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"w\"> </span><span class=\"n\">∈</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">Op</span><span class=\"w\"> </span><span class=\"n\">⟹</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">R</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">w</span><span class=\"w\"> </span><span class=\"n\">#</span><span class=\"w\"> </span><span class=\"n\">ul</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">⟹</span><span class=\"w\"> </span><span class=\"n\">u</span><span class=\"w\"> </span><span class=\"n\">∈</span><span class=\"w\"> </span><span class=\"n\">list.set</span><span class=\"w\"> </span><span class=\"n\">ul</span><span class=\"w\"> </span><span class=\"n\">⟹</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">P</span><span class=\"w\"> </span><span class=\"n\">u</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">⟹</span>\n<span class=\"o\">?</span><span class=\"n\">P</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">x</span>\n</code></pre></div>\n<p>Any attempt to help would be very appreciated!</p>",
        "id": 477868545,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1729402430
    },
    {
        "content": "<p>The problem is the <code>⋀</code>. The high-level tactics do not unify the <code>x</code> from the theorem with the <code>x</code> from the assumptions. So either you go for the more low-level version:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">proof</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">intro</span><span class=\"w\"> </span><span class=\"n\">subsetI</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">induct_tac</span><span class=\"w\"> </span><span class=\"n\">rule</span><span class=\"o\">:</span><span class=\"n\">gen_set.induct</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">assumption</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>(<code>_tac</code> is the low-level version and you need to unify with <code>assumption</code>)</p>",
        "id": 477872878,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1729407167
    },
    {
        "content": "<p>Or you go with a nested proof block:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">gen_set_subset_world</span><span class=\"w\"> </span><span class=\"o\">:</span>\n<span class=\"w\">  </span><span class=\"kp\">assumes</span><span class=\"w\"> </span><span class=\"n\">M</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"is_model sig M\"</span><span class=\"w\"> </span><span class=\"kp\">and</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"X ⊆ world M\"</span>\n<span class=\"w\">  </span><span class=\"kp\">shows</span><span class=\"w\"> </span><span class=\"s\">\"gen_set (rel M) X  ⊆ world M\"</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"kp\">is</span><span class=\"w\"> </span><span class=\"s\">‹?set ⊆ ?W›</span><span class=\"o\">)</span>\n<span class=\"k\">proof</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">intro</span><span class=\"w\"> </span><span class=\"n\">subsetI</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"k\">fix</span><span class=\"w\"> </span><span class=\"n\">x</span>\n<span class=\"w\">  </span><span class=\"k\">assume</span><span class=\"w\"> </span><span class=\"s\">‹x ∈ ?set›</span>\n<span class=\"w\">  </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"s\">‹x ∈ ?W›</span>\n<span class=\"w\">  </span><span class=\"k\">proof</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">induction</span><span class=\"w\"> </span><span class=\"n\">rule</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">gen_set.induct</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 477872968,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1729407245
    },
    {
        "content": "<p>Thanks! I see. (For terminology, I conceive \"high-level\" means HOL level, and \"low level\" means \"meta-level\" here. Thanks for correcting me if I misunderstand.)</p>",
        "id": 477873426,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1729407761
    },
    {
        "content": "<p>Isabelle has this distinction between nice \"user-level\" tactics (induction, rule, ...) and the \"older lower-level\" version of them (induct_tac, rule_tac, ...), which allow you to write things that are bad.</p>\n<p>For example: you can write <code>rule_tac x=x in exI</code> to provide the witness, but this <code>x</code> can refer to an internal name, meaning that if the naming convention ever changes, the proof might break.</p>",
        "id": 477873896,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1729408258
    },
    {
        "content": "<p>I am not sure if there is a proper name for this distinction</p>",
        "id": 477873908,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1729408275
    },
    {
        "content": "<p>I see. Then it might be safer to avoid the low-level versions, but it is very good to know. <br>\nSeems to me that the user-level tactics might be packed up from the low-level ones though.</p>",
        "id": 477874187,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1729408585
    },
    {
        "content": "<blockquote>\n<p>Seems to me that the user-level tactics might be packed up from the low-level ones though.</p>\n</blockquote>\n<p>They are</p>",
        "id": 477897674,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1729432981
    },
    {
        "content": "<p>Aha, a lucky guess! Thank you that is good to know.</p>",
        "id": 477898190,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1729433457
    }
]