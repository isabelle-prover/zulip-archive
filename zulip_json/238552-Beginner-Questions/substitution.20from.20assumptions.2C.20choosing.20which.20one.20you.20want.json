[
    {
        "content": "<p>Hi,</p>\n<p>I am trying to use the <code>erule ssubst</code> command<br>\nto use an equality from the assumption<br>\nto do a rewriting to the goal,<br>\nbut I can't get Isabelle to select the second rather than the first assumption to do that<br>\nrewriting:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">theory</span><span class=\"w\"> </span><span class=\"n\">Example</span><span class=\"w\"> </span><span class=\"kp\">imports</span><span class=\"w\"> </span><span class=\"n\">Main</span><span class=\"w\"> </span><span class=\"k\">begin</span>\n<span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">Lexists_nonEmpty</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"'a list ⇒ ('a ⇒ bool) ⇒ bool\"</span><span class=\"w\"> </span><span class=\"kp\">where</span>\n<span class=\"w\">  </span><span class=\"s\">\"Lexists_nonEmpty [] p  = False\"</span>\n<span class=\"o\">|</span><span class=\"w\"> </span><span class=\"s\">\"Lexists_nonEmpty [a] p = (p a)\"</span>\n<span class=\"o\">|</span><span class=\"w\"> </span><span class=\"s\">\"Lexists_nonEmpty (a # as) p = (p a ∨ Lexists_nonEmpty as p)\"</span>\n\n\n<span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">Lexists_nonEmpty_concat</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kp\">shows</span><span class=\"w\"> </span><span class=\"s\">\"Lexists_nonEmpty (rs @ rs2) p = (Lexists_nonEmpty rs p ∨ Lexists_nonEmpty rs2 p)\"</span>\n\n<span class=\"w\">  </span><span class=\"kp\">apply</span><span class=\"o\">(</span><span class=\"n\">induct</span><span class=\"w\"> </span><span class=\"n\">rs</span><span class=\"w\">  </span><span class=\"o\">)</span>\n<span class=\"w\">   </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"n\">simp</span><span class=\"o\">+</span>\n<span class=\"w\">  </span><span class=\"kp\">apply</span><span class=\"o\">(</span><span class=\"n\">subgoal_tac</span><span class=\"w\"> </span><span class=\"s\">\"Lexists_nonEmpty (a # rs @ rs2) p = p a ∨ Lexists_nonEmpty (rs @ rs2) p\"</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"kp\">apply</span><span class=\"o\">(</span><span class=\"n\">erule</span><span class=\"w\"> </span><span class=\"n\">ssubst</span><span class=\"o\">(</span><span class=\"n\">2</span><span class=\"o\">))</span>\n\n\n<span class=\"w\">  </span><span class=\"gr\">sorry</span>\n\n<span class=\"k\">end</span>\n</code></pre></div>\n<p>Any ideas?</p>\n<p>thanks a lot!<br>\nChengsong</p>",
        "id": 402897733,
        "sender_full_name": "Chengsong Tan",
        "timestamp": 1700329445
    },
    {
        "content": "<p>First: <code>ssubst(2)</code> means the second theorem of <code>ssubst</code>, like in every context</p>",
        "id": 402897975,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1700329686
    },
    {
        "content": "<p>Second: you can reorder assumptions with rotate_tac</p>",
        "id": 402898168,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1700329880
    },
    {
        "content": "<p>Third: it makes no difference here, because only one assumption is an equality. So I do not get what you are trying to achieve</p>",
        "id": 402898186,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1700329913
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"n\">Lexists_nonEmpty</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">rs</span><span class=\"w\"> </span><span class=\"n\">@</span><span class=\"w\"> </span><span class=\"n\">rs2</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Lexists_nonEmpty</span><span class=\"w\"> </span><span class=\"n\">rs</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"n\">∨</span><span class=\"w\"> </span><span class=\"n\">Lexists_nonEmpty</span><span class=\"w\"> </span><span class=\"n\">rs2</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">⟹</span>\n<span class=\"w\">       </span><span class=\"n\">Lexists_nonEmpty</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">#</span><span class=\"w\"> </span><span class=\"n\">rs</span><span class=\"w\"> </span><span class=\"n\">@</span><span class=\"w\"> </span><span class=\"n\">rs2</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">∨</span><span class=\"w\"> </span><span class=\"n\">Lexists_nonEmpty</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">rs</span><span class=\"w\"> </span><span class=\"n\">@</span><span class=\"w\"> </span><span class=\"n\">rs2</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"n\">⟹</span>\n<span class=\"w\">       </span><span class=\"n\">Lexists_nonEmpty</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">#</span><span class=\"w\"> </span><span class=\"n\">rs</span><span class=\"w\"> </span><span class=\"n\">@</span><span class=\"w\"> </span><span class=\"n\">rs2</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Lexists_nonEmpty</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">#</span><span class=\"w\"> </span><span class=\"n\">rs</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"n\">∨</span><span class=\"w\"> </span><span class=\"n\">Lexists_nonEmpty</span><span class=\"w\"> </span><span class=\"n\">rs2</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 402898332,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1700330032
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"233198\">Mathias Fleury</span> <a href=\"#narrow/stream/238552-Beginner-Questions/topic/substitution.20from.20assumptions.2C.20choosing.20which.20one.20you.20want/near/402898186\">said</a>:</p>\n<blockquote>\n<p>Third: it makes no difference here, because only one assumption is an equality. So I do not get what you are trying to achieve</p>\n</blockquote>\n<p>Hi Mathias,</p>\n<p>I was trying to use the equality which I just inserted using <code>subgoal_tac</code>, namely</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"n\">Lexists_nonEmpty</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">#</span><span class=\"w\"> </span><span class=\"n\">rs</span><span class=\"w\"> </span><span class=\"n\">@</span><span class=\"w\"> </span><span class=\"n\">rs2</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">∨</span><span class=\"w\"> </span><span class=\"n\">Lexists_nonEmpty</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">rs</span><span class=\"w\"> </span><span class=\"n\">@</span><span class=\"w\"> </span><span class=\"n\">rs2</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">p</span>\n</code></pre></div>",
        "id": 402898847,
        "sender_full_name": "Chengsong Tan",
        "timestamp": 1700330421
    },
    {
        "content": "<p>So I would like to turn the  LHS <code>Lexists_nonEmpty (a # rs @ rs2) p</code> into <code>p a \\/ .......</code></p>",
        "id": 402899092,
        "sender_full_name": "Chengsong Tan",
        "timestamp": 1700330558
    },
    {
        "content": "<p>(Using bracket mode) the proof state looks like this:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">proof</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">prove</span><span class=\"o\">)</span>\n<span class=\"n\">goal</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">2</span><span class=\"w\"> </span><span class=\"n\">subgoals</span><span class=\"o\">):</span>\n<span class=\"w\"> </span><span class=\"n\">1.</span><span class=\"w\"> </span><span class=\"n\">⋀a</span><span class=\"w\"> </span><span class=\"n\">rs.</span>\n<span class=\"w\">       </span><span class=\"n\">⟦Lexists_nonEmpty</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">rs</span><span class=\"w\"> </span><span class=\"n\">@</span><span class=\"w\"> </span><span class=\"n\">rs2</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Lexists_nonEmpty</span><span class=\"w\"> </span><span class=\"n\">rs</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"n\">∨</span><span class=\"w\"> </span><span class=\"n\">Lexists_nonEmpty</span><span class=\"w\"> </span><span class=\"n\">rs2</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"o\">)</span><span class=\"n\">;</span>\n<span class=\"w\">        </span><span class=\"n\">Lexists_nonEmpty</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">#</span><span class=\"w\"> </span><span class=\"n\">rs</span><span class=\"w\"> </span><span class=\"n\">@</span><span class=\"w\"> </span><span class=\"n\">rs2</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">∨</span><span class=\"w\"> </span><span class=\"n\">Lexists_nonEmpty</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">rs</span><span class=\"w\"> </span><span class=\"n\">@</span><span class=\"w\"> </span><span class=\"n\">rs2</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">p⟧</span>\n<span class=\"w\">       </span><span class=\"n\">⟹</span><span class=\"w\"> </span><span class=\"n\">Lexists_nonEmpty</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">#</span><span class=\"w\"> </span><span class=\"n\">rs</span><span class=\"w\"> </span><span class=\"n\">@</span><span class=\"w\"> </span><span class=\"n\">rs2</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Lexists_nonEmpty</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">#</span><span class=\"w\"> </span><span class=\"n\">rs</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"n\">∨</span><span class=\"w\"> </span><span class=\"n\">Lexists_nonEmpty</span><span class=\"w\"> </span><span class=\"n\">rs2</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"o\">)</span>\n<span class=\"ow\">.......</span>\n</code></pre></div>\n<p>so I am a bit puzzled why after <code>erule ssubst</code> the inductive hypothesis got deleted instead of the second premise in this proof state.</p>",
        "id": 402899402,
        "sender_full_name": "Chengsong Tan",
        "timestamp": 1700330773
    },
    {
        "content": "<p>This <code>Lexists_nonEmpty (a # rs @ rs2) p = p a ∨ Lexists_nonEmpty (rs @ rs2) p</code> is <code>(_ = _) ∨ _</code></p>",
        "id": 402900606,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1700331553
    },
    {
        "content": "<p>So no equality here</p>",
        "id": 402900616,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1700331565
    },
    {
        "content": "<p>erule always eliminates the assumption.</p>",
        "id": 402900806,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1700331691
    },
    {
        "content": "<p>erule is here looking at all the possible assumptions (there is only one), instantiate the theorem and rewrites it. As it is HO unification, the term ?s does not appear in the goal, so the function is <code>(%_. x) ?s</code> and you do not see any difference</p>",
        "id": 402900938,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1700331775
    },
    {
        "content": "<p>If you try</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">Lexists_nonEmpty_concat</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kp\">shows</span><span class=\"w\"> </span><span class=\"s\">\"Lexists_nonEmpty (rs @ rs2) p = (Lexists_nonEmpty rs p ∨ Lexists_nonEmpty rs2 p)\"</span>\n\n<span class=\"w\">  </span><span class=\"kp\">apply</span><span class=\"o\">(</span><span class=\"n\">induct</span><span class=\"w\"> </span><span class=\"n\">rs</span><span class=\"w\">  </span><span class=\"o\">)</span>\n<span class=\"w\">   </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"n\">simp</span><span class=\"o\">+</span>\n<span class=\"w\">  </span><span class=\"kp\">apply</span><span class=\"o\">(</span><span class=\"n\">subgoal_tac</span><span class=\"w\"> </span><span class=\"s\">\"Lexists_nonEmpty (a # rs @ rs2) p = (p a ∨ Lexists_nonEmpty (rs @ rs2) p)\"</span><span class=\"o\">)</span>\n<span class=\"w\">   </span><span class=\"kp\">apply</span><span class=\"o\">(</span><span class=\"n\">erule</span><span class=\"w\"> </span><span class=\"n\">ssubst</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>you will see the rewriting making more sense</p>",
        "id": 402900985,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1700331822
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"233198\">Mathias Fleury</span> <a href=\"#narrow/stream/238552-Beginner-Questions/topic/substitution.20from.20assumptions.2C.20choosing.20which.20one.20you.20want/near/402900616\">said</a>:</p>\n<blockquote>\n<p>So no equality here</p>\n</blockquote>\n<p>Nicely spotted</p>",
        "id": 402908247,
        "sender_full_name": "Chengsong Tan",
        "timestamp": 1700337119
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"233198\">Mathias Fleury</span> <a href=\"#narrow/stream/238552-Beginner-Questions/topic/substitution.20from.20assumptions.2C.20choosing.20which.20one.20you.20want/near/402900938\">said</a>:</p>\n<blockquote>\n<p>erule is here looking at all the possible assumptions (there is only one), instantiate the theorem and rewrites it. As it is HO unification, the term ?s does not appear in the goal, so the function is <code>(%_. x) ?s</code> and you do not see any difference</p>\n</blockquote>\n<p>Sorry if this seems obvious but which term are you referring to  is <code>(%_. x) ?s</code>?</p>",
        "id": 402908749,
        "sender_full_name": "Chengsong Tan",
        "timestamp": 1700337574
    },
    {
        "content": "<p>The function in the conclusion of ssubst rule</p>",
        "id": 402913426,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1700341280
    },
    {
        "content": "<p>[Quoting…]</p>\n<p>Just to rephrase it to double-check my understanding,<br>\nthe <code>x</code> means the term <code>Lexists_nonEmpty (rs @ rs2) p = (Lexists_nonEmpty (a # rs) p \\/ Lexists_nonEmpty rs2 p)</code> right?<br>\nAnd ?s and ?t have been instantiated to the LHS and RHS of the I.H., though they are discarded by the function and therefore the output remains to be <code>x</code>.</p>",
        "id": 403004778,
        "sender_full_name": "Chengsong Tan",
        "timestamp": 1700395704
    },
    {
        "content": "<p>yes exactly</p>",
        "id": 403005899,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1700396752
    }
]