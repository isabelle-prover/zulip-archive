[
    {
        "content": "<p>I want to develop a more elegant symbolic system for my work.  I want to provide syntax for <code>Apure bexp</code>, so I tried as <code>Apure bexp      (\"⟨_⟩\" [40] 40)  </code>. It works fine. However,  If I want to do some composition, for instance, conjunction or disjunction, I need to write something like <code> (⟨b1⟩)  /\\ (⟨b2⟩)  </code> which looks unclear. So can I define a syntax for <code>(Apure bexp)</code> with brackets so that I don't need annoying brackets in my expression.</p>",
        "id": 314465890,
        "sender_full_name": "HuanSun",
        "timestamp": 1670422713
    },
    {
        "content": "<p>If you increase the numbers in your syntax definition it will bind tighter. You could try 60 instead of 40</p>",
        "id": 314912537,
        "sender_full_name": "Jan van Brügge",
        "timestamp": 1670597789
    },
    {
        "content": "<p>I think you could actually leave out any binding information altogether. This way, Isabelle will accept terms with any binding strength within the brackets (the binding strength of the argument terms has to be at least the smallest possible binding strength, which is <code>0</code>) and will consider the term with the brackets to have the largest possible binding strength, which is <code>1000</code>. That’s generally the best approach towards bracketing structures, I think, as the brackets leave no room for ambiguities.</p>",
        "id": 314960685,
        "sender_full_name": "Wolfgang Jeltsch",
        "timestamp": 1670612049
    }
]