[
    {
        "content": "<p>I have a function like this where I can prove termination:</p>\n<div class=\"codehilite\"><pre><span></span><code>function to_dtree_aux :: &quot;&#39;a ⇒ (&#39;a,&#39;b) dtree&quot; where\n  &quot;to_dtree_aux r = Node r (Abs_fset {(x,e).\n    (if e ∈ out_arcs T r then x = to_dtree_aux (head T e) else False)})&quot;\n</code></pre></div>\n<p>I would expect this to be equivalent to (\"if P then Q else False\" replaced by \"P and Q\"):</p>\n<div class=\"codehilite\"><pre><span></span><code>function to_dtree_aux :: &quot;&#39;a ⇒ (&#39;a,&#39;b) dtree&quot; where\n  &quot;to_dtree_aux r = Node r (Abs_fset {(x,e).\n    (e ∈ out_arcs T r ∧ x = to_dtree_aux (head T e))})&quot;\n</code></pre></div>\n<p>But for the second function, I can't prove termination because the assumption <code>e ∈ out_arcs T r</code> is missing in the goal. Is there a better way to introduce this assumption than using a \"if P then Q else False\" construct?<br>\nThe goals generated by <code>apply(relation \"measure (λr. Finite_Set.card {x. r →⇧*⇘T⇙ x})\")</code> look like this:</p>\n<div class=\"codehilite\"><pre><span></span><code>⋀r x xa. xa ∈ out_arcs T r ⟹ (head T xa, r) ∈ measure (λr. card {x. r →⇧*⇘T⇙ x})\n⋀r x xa. (head T xa, r) ∈ measure (λr. card {x. r →⇧*⇘T⇙ x})\n</code></pre></div>",
        "id": 255056011,
        "sender_full_name": "Bernhard Stöckl",
        "timestamp": 1632752500
    }
]