[
    {
        "content": "<p>Hi, I wrote this for termination of this function</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">function</span><span class=\"w\"> </span><span class=\"n\">loop_divisor_outer</span><span class=\"w\"> </span><span class=\"o\">::</span>\n<span class=\"w\">  </span><span class=\"s\">\"('a::linorder, 'b) Divisor_Module ⇒ ('a::linorder, 'b) Divisor_Module\"</span>\n<span class=\"w\">  </span><span class=\"kp\">where</span>\n<span class=\"w\">  </span><span class=\"s\">\"ns r = 0 ⟹ loop_divisor_outer r = defer_divisor r\"</span><span class=\"w\"> </span><span class=\"o\">|</span>\n<span class=\"w\">  </span><span class=\"s\">\"ns r &gt; 0 ⟹ loop_divisor_outer r = loop_divisor_outer (main_function r)\"</span>\n<span class=\"w\">  </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">auto</span>\n\n<span class=\"kn\">termination</span>\n<span class=\"k\">proof</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">relation</span><span class=\"w\"> </span><span class=\"s\">\"measure (λr. ns r)\"</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">goal_cases</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"k\">case</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">1</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"k\">case</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">simp</span>\n<span class=\"k\">next</span>\n<span class=\"w\">  </span><span class=\"k\">case</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">2</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"k\">assume</span><span class=\"w\"> </span><span class=\"s\">\"p r ≠ []\"</span>\n<span class=\"w\">  </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"s\">\"ns (main_function r) &lt; ns (r)\"</span>\n<span class=\"w\">  </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">nseats_decreasing_main_function</span><span class=\"w\"> </span><span class=\"s\">\"2\"</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">blast</span>\n<span class=\"w\">  </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"k\">case</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">simp</span>\n<span class=\"k\">qed</span>\n</code></pre></div>\n<p>Where lemma \"nseats_decreasing_main_function\" proves that \"ns (main_function r) &lt; ns r\". Here:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">main_function</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"('a::linorder, 'b) Divisor_Module ⇒</span>\n<span class=\"s\">   ('a::linorder, 'b) Divisor_Module\"</span><span class=\"w\"> </span><span class=\"kp\">where</span>\n<span class=\"s\">\"main_function rec =</span>\n<span class=\"s\">      assigning_seats (rec⦇p := ( find_max_votes (fv rec) (p rec))⦈)\"</span>\n\n<span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">nseats_decreasing_main</span><span class=\"o\">:</span>\n<span class=\"w\">  </span><span class=\"kp\">assumes</span><span class=\"w\"> </span><span class=\"n\">non_empty_parties</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"p rec ≠ []\"</span>\n<span class=\"w\">  </span><span class=\"kp\">assumes</span><span class=\"w\"> </span><span class=\"n\">n_positive</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"ns rec &gt; 0\"</span>\n<span class=\"w\">  </span><span class=\"kp\">shows</span><span class=\"w\"> </span><span class=\"s\">\"ns (assigning_seats rec) &lt; ns rec\"</span>\n<span class=\"k\">proof</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">cases</span><span class=\"w\"> </span><span class=\"s\">\"length (p rec) ≤ ns rec\"</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"k\">case</span><span class=\"w\"> </span><span class=\"n\">True</span>\n<span class=\"w\">  </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"s\">\"ns (assigning_seats rec) = ns rec - length (p rec)\"</span>\n<span class=\"w\">    </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">auto</span><span class=\"w\"> </span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"n\">add</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Let_def</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"k\">also</span><span class=\"w\"> </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"s\">\"... &lt; ns rec\"</span><span class=\"w\"> </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">True</span><span class=\"w\"> </span><span class=\"n\">n_positive</span><span class=\"w\"> </span><span class=\"n\">non_empty_parties</span>\n<span class=\"w\">    </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">simp</span>\n<span class=\"w\">  </span><span class=\"k\">finally</span><span class=\"w\"> </span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">thesis</span><span class=\"w\"> </span><span class=\"ow\">.</span>\n<span class=\"k\">next</span>\n<span class=\"w\">  </span><span class=\"k\">case</span><span class=\"w\"> </span><span class=\"n\">False</span>\n<span class=\"w\">  </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"s\">\"ns (assigning_seats rec) = 0\"</span>\n<span class=\"w\">    </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">auto</span><span class=\"w\"> </span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"n\">add</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Let_def</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"k\">also</span><span class=\"w\"> </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"s\">\"... &lt; ns rec\"</span><span class=\"w\"> </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">n_positive</span>\n<span class=\"w\">    </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">simp</span>\n<span class=\"w\">  </span><span class=\"k\">finally</span><span class=\"w\"> </span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">thesis</span><span class=\"w\"> </span><span class=\"ow\">.</span>\n<span class=\"k\">qed</span>\n\n<span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">nseats_decreasing_main_function</span><span class=\"o\">:</span>\n<span class=\"w\">  </span><span class=\"kp\">assumes</span><span class=\"w\"> </span><span class=\"n\">non_empty_parties</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"p rec ≠ []\"</span>\n<span class=\"w\">  </span><span class=\"kp\">assumes</span><span class=\"w\"> </span><span class=\"n\">n_positive</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"ns rec &gt; 0\"</span>\n<span class=\"w\">  </span><span class=\"kp\">shows</span><span class=\"w\"> </span><span class=\"s\">\"ns (main_function rec) &lt; ns rec\"</span>\n<span class=\"k\">proof</span><span class=\"w\"> </span><span class=\"o\">-</span>\n<span class=\"w\">  </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"s\">\"main_function rec = assigning_seats (rec⦇p := find_max_votes (fv rec) (p rec)⦈)\"</span>\n<span class=\"w\">    </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">simp</span>\n<span class=\"w\">  </span><span class=\"k\">also</span><span class=\"w\"> </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"s\">\"ns ( assigning_seats (rec⦇p := find_max_votes (fv rec) (p rec)⦈)) &lt; ns rec\"</span><span class=\"w\"> </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">non_empty_parties</span><span class=\"w\"> </span><span class=\"n\">n_positive</span>\n<span class=\"w\">    </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"n\">add</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Let_def</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"k\">finally</span><span class=\"w\"> </span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">thesis</span>\n<span class=\"w\">    </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">assms</span><span class=\"w\"> </span><span class=\"n\">nseats_decreasing_main</span><span class=\"w\"> </span><span class=\"n\">nseats_decreasing</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">auto</span>\n<span class=\"k\">qed</span>\n</code></pre></div>\n<p>But on the first termination proof, after \"show\", I get this </p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"n\">picking</span><span class=\"w\"> </span><span class=\"n\">this</span><span class=\"o\">:</span>\n<span class=\"w\">  </span><span class=\"n\">ns</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">main_function</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">&lt;</span><span class=\"w\"> </span><span class=\"n\">ns</span><span class=\"w\"> </span><span class=\"n\">r</span>\n<span class=\"n\">Failed</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">refine</span><span class=\"w\"> </span><span class=\"n\">any</span><span class=\"w\"> </span><span class=\"n\">pending</span><span class=\"w\"> </span><span class=\"n\">goal</span>\n<span class=\"n\">Local</span><span class=\"w\"> </span><span class=\"n\">statement</span><span class=\"w\"> </span><span class=\"n\">fails</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">refine</span><span class=\"w\"> </span><span class=\"n\">any</span><span class=\"w\"> </span><span class=\"n\">pending</span><span class=\"w\"> </span><span class=\"n\">goal</span>\n<span class=\"n\">Failed</span><span class=\"w\"> </span><span class=\"n\">attempt</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">solve</span><span class=\"w\"> </span><span class=\"n\">goal</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">exported</span><span class=\"w\"> </span><span class=\"n\">rule</span><span class=\"o\">:</span>\n<span class=\"w\">  </span><span class=\"o\">(</span><span class=\"n\">0</span><span class=\"w\"> </span><span class=\"n\">&lt;</span><span class=\"w\"> </span><span class=\"n\">ns</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">r2</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">⟹</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">r2</span><span class=\"w\"> </span><span class=\"n\">≠</span><span class=\"w\"> </span><span class=\"o\">[])</span><span class=\"w\"> </span><span class=\"n\">⟹</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">main_function</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">r2</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">r2</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">∈</span><span class=\"w\"> </span><span class=\"n\">measure</span><span class=\"w\"> </span><span class=\"n\">ns</span>\n</code></pre></div>\n<p>if it is picking my lemma how can it not proof the thesis? maybe mistake is on variables because of that \"r2\"  but I don't know exactly how to fix. Or maybe the above lemmas are not correct somehow? Thanks in advance</p>",
        "id": 419499530,
        "sender_full_name": "Salvatore Francesco Rossetta",
        "timestamp": 1706893937
    },
    {
        "content": "<p>Maybe you need <code>show ?thesis</code> instead of <code>show ?case</code>?</p>",
        "id": 419870271,
        "sender_full_name": "Lukas Stevens",
        "timestamp": 1707148101
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"233155\">Lukas Stevens</span> <a href=\"#narrow/stream/238552-Beginner-Questions/topic/termination.20proof.20on.20measure/near/419870271\">said</a>:</p>\n<blockquote>\n<p>Maybe you need <code>show ?thesis</code> instead of <code>show ?case</code>?</p>\n</blockquote>\n<p>if i change it i get this error, i think because from a case i cannot prove the full thesis</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">proof</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">chain</span><span class=\"o\">)</span>\n<span class=\"n\">picking</span><span class=\"w\"> </span><span class=\"n\">this</span><span class=\"o\">:</span>\n<span class=\"w\">  </span><span class=\"n\">ns</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">main_function</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">&lt;</span><span class=\"w\"> </span><span class=\"n\">ns</span><span class=\"w\"> </span><span class=\"n\">r</span>\n<span class=\"n\">Failed</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">refine</span><span class=\"w\"> </span><span class=\"n\">any</span><span class=\"w\"> </span><span class=\"n\">pending</span><span class=\"w\"> </span><span class=\"n\">goal</span>\n<span class=\"n\">Local</span><span class=\"w\"> </span><span class=\"n\">statement</span><span class=\"w\"> </span><span class=\"n\">fails</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">refine</span><span class=\"w\"> </span><span class=\"n\">any</span><span class=\"w\"> </span><span class=\"n\">pending</span><span class=\"w\"> </span><span class=\"n\">goal</span>\n<span class=\"n\">Failed</span><span class=\"w\"> </span><span class=\"n\">attempt</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">solve</span><span class=\"w\"> </span><span class=\"n\">goal</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">exported</span><span class=\"w\"> </span><span class=\"n\">rule</span><span class=\"o\">:</span>\n<span class=\"w\">  </span><span class=\"o\">(</span><span class=\"n\">0</span><span class=\"w\"> </span><span class=\"n\">&lt;</span><span class=\"w\"> </span><span class=\"n\">ns</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">r2</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">⟹</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">r2</span><span class=\"w\"> </span><span class=\"n\">≠</span><span class=\"w\"> </span><span class=\"o\">[])</span><span class=\"w\"> </span><span class=\"n\">⟹</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">0</span><span class=\"w\"> </span><span class=\"n\">&lt;</span><span class=\"w\"> </span><span class=\"n\">ns</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">r2</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">⟹</span><span class=\"w\"> </span><span class=\"n\">All</span><span class=\"w\"> </span><span class=\"n\">loop_divisor_outer_dom</span>\n</code></pre></div>",
        "id": 419875441,
        "sender_full_name": "Salvatore Francesco Rossetta",
        "timestamp": 1707149447
    },
    {
        "content": "<p>Never put an assume if you have a case</p>",
        "id": 419879031,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1707150315
    },
    {
        "content": "<p>Never</p>",
        "id": 419879040,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1707150316
    },
    {
        "content": "<p>(yes it sometimes work. In the best case it is useless but bad taste. In the worst case, it leads to an error like here)</p>",
        "id": 419879306,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1707150375
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"233198\">Mathias Fleury</span> <a href=\"#narrow/stream/238552-Beginner-Questions/topic/termination.20proof.20on.20measure/near/419879031\">said</a>:</p>\n<blockquote>\n<p>Never put an assume if you have a case</p>\n</blockquote>\n<p>So how should I proceed? Because if I remove assms the error I get is about \"simp\" unrolling all the functions inside while I am looking for something \"simpler\", because looking back at my code it seems the last step is enough to prove the thesis</p>",
        "id": 419887556,
        "sender_full_name": "Salvatore Francesco Rossetta",
        "timestamp": 1707152606
    },
    {
        "content": "<p>I don't know. But you cannot add assumptions out of thin air. This is not how proof work.</p>",
        "id": 419888800,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1707152993
    },
    {
        "content": "<p>Otherwise just assume False and every proof will be trivial</p>",
        "id": 419888948,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1707153023
    },
    {
        "content": "<p>or do a case distinction whether the list is empty or not</p>",
        "id": 419889043,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1707153059
    }
]