[
    {
        "content": "<p>If <code>from_nat</code> is restricted to the same type, shouldn't this behave as the identity?</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"s\">‹to_nat ((from_nat x) :: nat) = (x :: nat)›</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"gr\">sorry</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 305382244,
        "sender_full_name": "Robert Soeldner",
        "timestamp": 1666366415
    },
    {
        "content": "<p>I don't think this holds. <br>\n<code>to_nat</code> is defined as <code>to_nat = (SOME f. inj f)\"</code>, i.e. some arbitrary injection embedding the elements of a type  into nat. <code>from_nat</code> is just the inverse of <code>to_nat</code>. Even if you restrict yourself to going from <code>nat</code> to <code>nat</code>, <code>to_nat</code> could still happen to be for example <code>(λn :: nat . 2*n)</code>. Then <code>from_nat 3</code> would be undefined for example.</p>",
        "id": 305398250,
        "sender_full_name": "Simon Roßkopf",
        "timestamp": 1666370200
    },
    {
        "content": "<p>No. <code>to_nat :: 'a :: countable ⇒ nat</code> is defined via the choice operator as ‘some injective function from 'a to <code>nat</code>’. It is not required to be bijective (that would only work for countably infinite types, but we only assumed countable).</p>\n<p>Now, because of that, even <code>to_nat :: nat ⇒ nat</code> can only be assumed to be injective, but not surjective. So there can be natural numbers <code>x</code> that are not in the range of <code>to_nat</code>, and for those your statement clearly cannot hold.</p>",
        "id": 305398392,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1666370248
    },
    {
        "content": "<p>Note that the <code>to_nat_on</code> function from <code>HOL-Library.Countable_Set</code> indeed provides a bijection, not just an injection.</p>",
        "id": 305398791,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1666370358
    }
]