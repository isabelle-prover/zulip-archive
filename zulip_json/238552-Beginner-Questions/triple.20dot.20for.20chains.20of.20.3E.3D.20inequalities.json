[
    {
        "content": "<p>I want to prove an inequality with transitive chains:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"s\">\"a &gt;= 0\"</span>\n<span class=\"k\">proof</span><span class=\"w\"> </span><span class=\"o\">-</span>\n<span class=\"w\">  </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"s\">\"a &gt;= x\"</span><span class=\"w\"> </span><span class=\"gr\">sorry</span>\n<span class=\"w\">  </span><span class=\"k\">also</span><span class=\"w\"> </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"s\">\"... &gt;= y\"</span><span class=\"w\"> </span><span class=\"gr\">sorry</span>\n<span class=\"w\">  </span><span class=\"k\">also</span><span class=\"w\"> </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"s\">\"... &gt;= 0\"</span><span class=\"w\"> </span><span class=\"n\">sorrry</span>\n<span class=\"w\">  </span><span class=\"k\">finally</span><span class=\"w\"> </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">thesis</span><span class=\"w\"> </span><span class=\"ow\">.</span>\n<span class=\"k\">qed</span>\n</code></pre></div>\n<p>But this doesn't work, since \"...\" abbreviates LHS instead of RHS of its previous expression, due to Isabelle/HOL's way of defining &gt;= and &lt;=.</p>\n<p>I don't want to rephrase the proposition into \"0 &lt;= a\" and reverse the proof chain, since it would be quite artificial to prove \"0 &lt;= y\" first, where y comes from no where.</p>\n<p>Is there any way to use the \"...\" syntax for chained proof of &gt;= inequalities?</p>",
        "id": 467938294,
        "sender_full_name": "John Park",
        "timestamp": 1725559269
    },
    {
        "content": "<p>Besides naming it explicitly, no:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"s\">\"a &gt;= 0\"</span>\n<span class=\"k\">proof</span><span class=\"w\"> </span><span class=\"o\">-</span>\n<span class=\"w\">  </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"s\">\"a &gt;= x\"</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"kp\">is</span><span class=\"w\"> </span><span class=\"s\">\"_ &gt;= ?x\"</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"gr\">sorry</span>\n<span class=\"w\">  </span><span class=\"k\">also</span><span class=\"w\"> </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"s\">\"?x &gt;= y\"</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"kp\">is</span><span class=\"w\"> </span><span class=\"s\">\"_ &gt;= ?x\"</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"gr\">sorry</span>\n<span class=\"w\">  </span><span class=\"k\">also</span><span class=\"w\"> </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"s\">\"?x &gt;= 0\"</span><span class=\"w\"> </span><span class=\"n\">sorrry</span>\n<span class=\"w\">  </span><span class=\"k\">finally</span><span class=\"w\"> </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">thesis</span><span class=\"w\"> </span><span class=\"ow\">.</span>\n<span class=\"k\">qed</span>\n</code></pre></div>",
        "id": 467960701,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1725564210
    },
    {
        "content": "<p>Another option, if you do not mind a local definition and using \"moreover, ultimate\":</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span>\n<span class=\"w\">  </span><span class=\"kp\">fixes</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"'a :: {zero, linorder}\"</span>\n<span class=\"w\">  </span><span class=\"kp\">shows</span><span class=\"w\"> </span><span class=\"s\">\"0 ≤ a\"</span>\n<span class=\"k\">proof</span><span class=\"o\">-</span>\n<span class=\"w\">  </span><span class=\"n\">define</span><span class=\"w\"> </span><span class=\"n\">greater_or_equal</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"kp\">infix</span><span class=\"w\"> </span><span class=\"s\">\"geq\"</span><span class=\"w\"> </span><span class=\"n\">50</span><span class=\"o\">)</span>\n<span class=\"w\">    </span><span class=\"kp\">where</span><span class=\"w\"> </span><span class=\"s\">\"(x1::'a) geq x2 ≡ x2 ≤ x1\"</span>\n<span class=\"w\">  </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"s\">\"a geq x\"</span>\n<span class=\"w\">    </span><span class=\"gr\">sorry</span>\n<span class=\"w\">  </span><span class=\"k\">moreover</span><span class=\"w\"> </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"s\">\"... geq y\"</span>\n<span class=\"w\">    </span><span class=\"gr\">sorry</span>\n<span class=\"w\">  </span><span class=\"k\">moreover</span><span class=\"w\"> </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"s\">\"... geq 0\"</span>\n<span class=\"w\">    </span><span class=\"gr\">sorry</span>\n<span class=\"w\">  </span><span class=\"k\">ultimately</span><span class=\"w\"> </span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"s\">\"a geq 0\"</span>\n<span class=\"w\">    </span><span class=\"gr\">sorry</span>\n<span class=\"k\">qed</span>\n</code></pre></div>",
        "id": 468717513,
        "sender_full_name": "Jonathan Julian Huerta y Munive",
        "timestamp": 1725870451
    },
    {
        "content": "<p>that's a nice trick!</p>",
        "id": 468717914,
        "sender_full_name": "Yong Kiam",
        "timestamp": 1725870545
    },
    {
        "content": "<p>yeah but it breaks the entire automation (you have to unfold it each time)</p>",
        "id": 468718164,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1725870609
    },
    {
        "content": "<p>would putting <code>[simp]</code> work?</p>",
        "id": 468718690,
        "sender_full_name": "Yong Kiam",
        "timestamp": 1725870742
    },
    {
        "content": "<p>It depends. I had to reshape the definition but simp unfolds it, if written as below:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span>\n<span class=\"w\">  </span><span class=\"kp\">fixes</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"'a :: {zero, linorder}\"</span>\n<span class=\"w\">  </span><span class=\"kp\">shows</span><span class=\"w\"> </span><span class=\"s\">\"0 ≤ a\"</span>\n<span class=\"k\">proof</span><span class=\"o\">-</span>\n<span class=\"w\">  </span><span class=\"n\">define</span><span class=\"w\"> </span><span class=\"n\">greater_or_equal</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"kp\">infix</span><span class=\"w\"> </span><span class=\"s\">\"geq\"</span><span class=\"w\"> </span><span class=\"n\">50</span><span class=\"o\">)</span>\n<span class=\"w\">    </span><span class=\"kp\">where</span><span class=\"w\"> </span><span class=\"n\">geq_def</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]:</span><span class=\"w\"> </span><span class=\"s\">\"greater_or_equal ≡ (λ(x1::'a) x2. x2 ≤ x1)\"</span>\n<span class=\"w\">  </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"s\">\"a geq x\"</span>\n<span class=\"w\">    </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"n\">simp</span>\n<span class=\"w\">    </span><span class=\"gr\">sorry</span>\n<span class=\"w\">  </span><span class=\"k\">moreover</span><span class=\"w\"> </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"s\">\"... geq y\"</span>\n<span class=\"w\">    </span><span class=\"gr\">sorry</span>\n<span class=\"w\">  </span><span class=\"k\">moreover</span><span class=\"w\"> </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"s\">\"... geq 0\"</span>\n<span class=\"w\">    </span><span class=\"gr\">sorry</span>\n<span class=\"w\">  </span><span class=\"k\">ultimately</span><span class=\"w\"> </span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"s\">\"a geq 0\"</span>\n<span class=\"w\">    </span><span class=\"gr\">sorry</span>\n<span class=\"k\">qed</span>\n</code></pre></div>",
        "id": 468721231,
        "sender_full_name": "Jonathan Julian Huerta y Munive",
        "timestamp": 1725871463
    },
    {
        "content": "<p>You can also avoid the lambda with for:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"n\">define</span><span class=\"w\"> </span><span class=\"n\">greater_or_equal</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"kp\">infix</span><span class=\"w\"> </span><span class=\"s\">\"geq\"</span><span class=\"w\"> </span><span class=\"n\">50</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"kp\">where</span><span class=\"w\"> </span><span class=\"n\">geq_def</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]:</span><span class=\"w\"> </span><span class=\"s\">\"greater_or_equal  x1 x2 ≡ (x2 ≤ x1)\"</span><span class=\"w\"> </span><span class=\"kp\">for</span><span class=\"w\"> </span><span class=\"n\">x1</span><span class=\"w\"> </span><span class=\"n\">x2</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">‹'a :: ord›</span>\n</code></pre></div>",
        "id": 468721705,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1725871594
    },
    {
        "content": "<p>and yes simp works, but it could negatively impact sledgehammer (because there is one more symbol, although it probably does not matter too much)</p>",
        "id": 468721876,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1725871647
    },
    {
        "content": "<p>Based on <span class=\"user-mention\" data-user-id=\"233198\">@Mathias Fleury</span> 's first solution:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"s\">\"(a::int) &gt;= 0\"</span>\n<span class=\"k\">proof</span><span class=\"w\"> </span><span class=\"o\">-</span>\n<span class=\"w\">  </span><span class=\"k\">note</span><span class=\"w\"> </span><span class=\"n\">order_trans</span><span class=\"o\">[</span><span class=\"n\">rotated</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">trans</span><span class=\"o\">]</span>\n\n<span class=\"w\">  </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"s\">\"a &gt;= xxx\"</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"kp\">is</span><span class=\"w\"> </span><span class=\"s\">\"_ &gt;= ?rhs\"</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"gr\">sorry</span>\n<span class=\"w\">  </span><span class=\"k\">also</span><span class=\"w\"> </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"s\">\"?rhs &gt;= yyy\"</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"kp\">is</span><span class=\"w\"> </span><span class=\"s\">\"_ &gt;= ?rhs\"</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"gr\">sorry</span>\n<span class=\"w\">  </span><span class=\"k\">also</span><span class=\"w\"> </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"s\">\"?rhs &gt;= 0\"</span><span class=\"w\"> </span><span class=\"gr\">sorry</span>\n<span class=\"w\">  </span><span class=\"k\">finally</span><span class=\"w\"> </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">thesis</span><span class=\"w\"> </span><span class=\"ow\">.</span>\n<span class=\"k\">qed</span>\n</code></pre></div>",
        "id": 468838328,
        "sender_full_name": "John Park",
        "timestamp": 1725896320
    }
]