[
    {
        "content": "<p>How does the _destructor view_ (datatypes, section 5.1.6) work exactly/what am I doing wrong? Following the example defined:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">codatatype</span><span class=\"w\"> </span><span class=\"n n-Type\">'a</span><span class=\"w\"> </span><span class=\"n\">llist'</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">lnil'</span><span class=\"o\">:</span><span class=\"n\">LNil'</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">LCons'</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">hd'</span><span class=\"o\">:</span><span class=\"n n-Type\">'a</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">tl'</span><span class=\"o\">:</span><span class=\"s\">\"'a llist'\"</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">LConsZ'</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">ntl'</span><span class=\"o\">:</span><span class=\"s\">\"'a llist'\"</span><span class=\"o\">)</span><span class=\"w\"></span>\n\n<span class=\"kn\">primcorecursive</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">sequential</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">lzip'</span><span class=\"w\">  </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"'a llist' ⇒ 'b llist' ⇒ ('a × 'b) llist'\"</span><span class=\"w\"> </span><span class=\"kp\">where</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"s\">\"⟦lnil' x; lnil' y⟧ ⟹ lnil' (lzip' x y)\"</span><span class=\"w\"></span>\n</code></pre></div>\n<p>which works. but now I am struggling to give it the remaining equations. adding <code>| \"hd' (lzip' x y) = (hd' x, hd' y)\"</code> leaves me with \"No subgoals!\" but closing it with <code>done</code> leads to:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"n\">Proof</span><span class=\"w\"> </span><span class=\"n\">failed.</span><span class=\"w\"></span>\n<span class=\"w\"> </span><span class=\"n\">1.</span><span class=\"w\"> </span><span class=\"n\">⋀x</span><span class=\"w\"> </span><span class=\"n\">y.</span><span class=\"w\"> </span><span class=\"n\">¬</span><span class=\"w\"> </span><span class=\"n\">lnil'</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">∨</span><span class=\"w\"> </span><span class=\"n\">¬</span><span class=\"w\"> </span><span class=\"n\">lnil'</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"n\">⟹</span><span class=\"w\"> </span><span class=\"n\">False</span><span class=\"w\"></span>\n<span class=\"w\"> </span><span class=\"n\">2.</span><span class=\"w\"> </span><span class=\"n\">⋀x</span><span class=\"w\"> </span><span class=\"n\">y.</span><span class=\"w\"> </span><span class=\"n\">¬</span><span class=\"w\"> </span><span class=\"n\">lnil'</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">∨</span><span class=\"w\"> </span><span class=\"n\">¬</span><span class=\"w\"> </span><span class=\"n\">lnil'</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"n\">⟹</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">hd'</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">fst</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"o\">)),</span><span class=\"w\"> </span><span class=\"n\">hd'</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">snd</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"o\">)))</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">hd'</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">hd'</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"o\">)</span><span class=\"w\"></span>\n<span class=\"n\">The</span><span class=\"w\"> </span><span class=\"n\">error</span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">above</span><span class=\"w\"> </span><span class=\"n\">occurred</span><span class=\"w\"> </span><span class=\"kp\">for</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">goal</span><span class=\"w\"> </span><span class=\"n\">statement⌂</span><span class=\"o\">:</span><span class=\"w\"></span>\n<span class=\"n\">⋀x</span><span class=\"w\"> </span><span class=\"n\">y.</span><span class=\"w\"> </span><span class=\"n\">¬</span><span class=\"w\"> </span><span class=\"n\">lnil'</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">∨</span><span class=\"w\"> </span><span class=\"n\">¬</span><span class=\"w\"> </span><span class=\"n\">lnil'</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"n\">⟹</span><span class=\"w\"> </span><span class=\"n\">hd'</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">lzip'</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">hd'</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">hd'</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"o\">)</span><span class=\"w\"></span>\n</code></pre></div>\n<p>So I guess the remaining equations need some conditions, but this gives me other errors: adding <code>⟦is_LCons' x; is_LCons' y⟧ ⟹ </code> to the second equation leads to \"Unexpected condition in selector formula\".</p>",
        "id": 320269880,
        "sender_full_name": "Carlos",
        "timestamp": 1673281820
    },
    {
        "content": "<p>For what it is worth I can defining zipping on regular llist with two constructors. and also this definition <code>lzip'</code> by using <code>case</code> worked, I am just wondering about that view.</p>",
        "id": 320270407,
        "sender_full_name": "Carlos",
        "timestamp": 1673281928
    },
    {
        "content": "<p>With my limited knowledge, my goal was to define</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"n\">lnil'</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"n\">&gt;</span><span class=\"w\"> </span><span class=\"n\">lnil'</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"n\">&gt;</span><span class=\"w\"> </span><span class=\"n\">lnil'</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">lzip'</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"o\">)</span><span class=\"w\"></span>\n<span class=\"n\">hd'</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">lzip'</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">hd'</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">hd'</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"o\">)</span><span class=\"w\">              </span><span class=\"o\">--</span><span class=\"w\"> </span><span class=\"n\">since</span><span class=\"w\"> </span><span class=\"n\">@</span><span class=\"ow\">{</span><span class=\"kt\">term</span><span class=\"w\"> </span><span class=\"s\">\"hd' x\"</span><span class=\"ow\">}</span><span class=\"w\"> </span><span class=\"kp\">and</span><span class=\"w\"> </span><span class=\"n\">@</span><span class=\"ow\">{</span><span class=\"kt\">term</span><span class=\"w\"> </span><span class=\"s\">\"hd' y\"</span><span class=\"ow\">}</span><span class=\"w\"> </span><span class=\"n\">exist</span><span class=\"w\"> </span><span class=\"n\">it</span><span class=\"w\"> </span><span class=\"n\">should</span><span class=\"w\"> </span><span class=\"n\">be</span><span class=\"w\"> </span><span class=\"n\">clear</span><span class=\"w\"> </span><span class=\"n\">that</span><span class=\"w\"> </span><span class=\"n\">@</span><span class=\"ow\">{</span><span class=\"kt\">thm</span><span class=\"w\"> </span><span class=\"s\">\"is_LCons' x\"</span><span class=\"ow\">}</span><span class=\"w\"> </span><span class=\"kp\">and</span><span class=\"w\"> </span><span class=\"n\">@</span><span class=\"ow\">{</span><span class=\"kt\">thm</span><span class=\"w\"> </span><span class=\"s\">\"is_LCons' y\"</span><span class=\"ow\">}</span><span class=\"w\"></span>\n<span class=\"n\">tl'</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">lzip'</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">lzip'</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">tl'</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">tl'</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"o\">)</span><span class=\"w\">       </span><span class=\"o\">--</span><span class=\"w\"> </span><span class=\"n\">similar</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">above</span><span class=\"w\"> </span><span class=\"n\">there</span><span class=\"w\"> </span><span class=\"n\">should</span><span class=\"w\"> </span><span class=\"n\">be</span><span class=\"w\"> </span><span class=\"n\">no</span><span class=\"w\"> </span><span class=\"n\">pre</span><span class=\"o\">-</span><span class=\"n\">condition</span><span class=\"w\"></span>\n<span class=\"n\">ntl'</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">lzip'</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">lzip'</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">ntl'</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">ntl'</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"o\">)</span><span class=\"w\">    </span><span class=\"o\">--</span><span class=\"w\"> </span><span class=\"n\">ditto</span><span class=\"w\"> </span><span class=\"n\">but</span><span class=\"w\"> </span><span class=\"kp\">for</span><span class=\"w\"> </span><span class=\"n\">@</span><span class=\"ow\">{</span><span class=\"kt\">term</span><span class=\"w\"> </span><span class=\"n\">is_LConsZ'</span><span class=\"ow\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 320274190,
        "sender_full_name": "Carlos",
        "timestamp": 1673282909
    },
    {
        "content": "<p>It is not clear what you are attempting to specify. From your four equations that you give it is not clear when the output should be an LCons' and when it should be an LConsZ'.  For a codatatype with 3 constructors, primcorec expects to see 2 discriminator specifications. Something like the following works (even with plain primcorec):</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">codatatype</span><span class=\"w\"> </span><span class=\"n n-Type\">'a</span><span class=\"w\"> </span><span class=\"n\">llist'</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">lnil'</span><span class=\"o\">:</span><span class=\"n\">LNil'</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">lcons'</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">LCons'</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">hd'</span><span class=\"o\">:</span><span class=\"n n-Type\">'a</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">tl'</span><span class=\"o\">:</span><span class=\"s\">\"'a llist'\"</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">LConsZ'</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">ntl'</span><span class=\"o\">:</span><span class=\"s\">\"'a llist'\"</span><span class=\"o\">)</span><span class=\"w\"></span>\n\n<span class=\"k\">abbreviation</span><span class=\"w\"> </span><span class=\"s\">\"n_tl x ≡ (if lcons' x then tl' x else ntl' x)\"</span><span class=\"w\"></span>\n\n<span class=\"k\">primcorec</span><span class=\"w\"> </span><span class=\"n\">lzip'</span><span class=\"w\">  </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"'a llist' ⇒ 'b llist' ⇒ ('a × 'b) llist'\"</span><span class=\"w\"> </span><span class=\"kp\">where</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"s\">\"⟦lnil' x ∨ lnil' y⟧ ⟹ lnil' (lzip' x y)\"</span><span class=\"w\"></span>\n<span class=\"o\">|</span><span class=\"w\"> </span><span class=\"s\">\"⟦lcons' x ∧ lcons' y⟧ ⟹ lcons' (lzip' x y)\"</span><span class=\"w\"></span>\n<span class=\"o\">|</span><span class=\"w\"> </span><span class=\"s\">\"hd' (lzip' x y) = (hd' x, hd' y)\"</span><span class=\"w\"></span>\n<span class=\"o\">|</span><span class=\"w\"> </span><span class=\"s\">\"tl' (lzip' x y) = lzip' (tl' x) (tl' y)\"</span><span class=\"w\"></span>\n<span class=\"o\">|</span><span class=\"w\"> </span><span class=\"s\">\"ntl' (lzip' x y) = lzip' (n_tl x) (n_tl y)\"</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Note that I've changed and 'and' for and 'or' in the lnil discriminator equation as I believe this is more meaningful for zip.</p>",
        "id": 320471073,
        "sender_full_name": "Dmitriy Traytel",
        "timestamp": 1673362938
    },
    {
        "content": "<p>Of course from the point of view of primcorec(ursive), the low level tactic error should not reach the user (and be replaced by a friendlier error message).</p>",
        "id": 320471309,
        "sender_full_name": "Dmitriy Traytel",
        "timestamp": 1673363005
    },
    {
        "content": "<blockquote>\n<p>For a codatatype with 3 constructors, primcorec expects to see 2 discriminator specifications.</p>\n</blockquote>\n<p>This is the crucial bit I missed, thank you! And indeed the first specification should use ∨, that was not intentional.</p>",
        "id": 320473983,
        "sender_full_name": "Carlos",
        "timestamp": 1673363642
    }
]