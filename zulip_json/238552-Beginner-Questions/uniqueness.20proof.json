[
    {
        "content": "<p>I'm trying to prove the following statement (uniqueness in division lemma):</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">context</span> <span class=\"n\">euclidean_domain</span>\n<span class=\"k\">begin</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">div_unique</span><span class=\"o\">:</span>\n  <span class=\"kp\">assumes</span> <span class=\"s\">\"a ‚àà carrier R - { ùü¨ }\"</span> <span class=\"s\">\"b ‚àà carrier R - { ùü¨ }\"</span>\n  <span class=\"kp\">shows</span> <span class=\"s\">\"‚àÉ!q. ‚àÉ!r. q ‚àà carrier R ‚àß r ‚àà carrier R ‚àß a = (b ‚äó q) ‚äï r ‚àß ((r = ùü¨) ‚à® (œÜ r &lt; œÜ b))\"</span>\n    <span class=\"o\">(</span><span class=\"kp\">is</span> <span class=\"s\">\"‚àÉ!q. ‚àÉ!r. ?quot_rem q r\"</span><span class=\"o\">)</span>\n<span class=\"k\">proof</span>\n  <span class=\"k\">obtain</span> <span class=\"n\">q</span> <span class=\"kp\">where</span> <span class=\"s\">\"‚àÉr. ?quot_rem q r\"</span> <span class=\"k\">using</span> <span class=\"n\">euclidean_function</span> <span class=\"n\">assms</span> <span class=\"k\">by</span> <span class=\"n\">presburger</span>\n  <span class=\"k\">show</span> <span class=\"s\">\"‚àÉ!r. ?quot_rem q r\"</span> <span class=\"gr\">sorry</span>\n  <span class=\"k\">show</span> <span class=\"s\">\"‚ãÄq'. ‚àÉ!r.?quot_rem q' r ‚üπ q' = q\"</span> <span class=\"gr\">sorry</span>\n<span class=\"k\">qed</span>\n\n<span class=\"k\">end</span>\n</code></pre></div>\n<p>The automatic proof rule (sensibly) gives goals<br>\n<code>‚àÉ!r. ?quot_rem ?q r</code> and <code>‚ãÄq'. ‚àÉ!r. ?quot_rem q' r ‚üπ q' = ?q</code>.<br>\nHowever, when I attempt to pass in the <code>obtain</code>ed variable <code>q</code> for <code>?q</code> as above, I get the error<br>\n<code>Result contains obtained parameters: q. Local statement fails to refine any pending goal</code><br>\nWhat am I doing wrong? How can I pass the variable from an existential operator into another proof?</p>",
        "id": 291580165,
        "sender_full_name": "Artem Khovanov",
        "timestamp": 1659362823
    },
    {
        "content": "<p>Here's a more minimal (trivial) example of the issue:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">test</span><span class=\"o\">:</span>\n  <span class=\"kp\">assumes</span> <span class=\"s\">\"‚àÉ x. P x\"</span>\n  <span class=\"kp\">shows</span> <span class=\"s\">\"‚àÉx. P x\"</span>\n<span class=\"k\">proof</span>\n  <span class=\"k\">obtain</span> <span class=\"n\">x</span> <span class=\"kp\">where</span> <span class=\"s\">\"P x\"</span> <span class=\"k\">using</span> <span class=\"n\">assms</span> <span class=\"k\">by</span> <span class=\"n\">auto</span>\n  <span class=\"k\">thus</span> <span class=\"s\">\"P x\"</span> <span class=\"k\">by</span> <span class=\"n\">auto</span>\n<span class=\"k\">qed</span>\n</code></pre></div>\n<p>gives the same error at <code>thus</code>.</p>",
        "id": 291580642,
        "sender_full_name": "Artem Khovanov",
        "timestamp": 1659363021
    },
    {
        "content": "<p>An easy fix for that is to first <code>have</code> your property with the obtained variable, then show the existence statement from that:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">proof</span> <span class=\"o\">-</span>\n  <span class=\"k\">obtain</span> <span class=\"n\">x</span> <span class=\"kp\">where</span> <span class=\"s\">\"P x\"</span> <span class=\"k\">using</span> <span class=\"n\">assms</span> <span class=\"k\">by</span> <span class=\"n\">auto</span>\n  <span class=\"k\">then</span> <span class=\"k\">have</span> <span class=\"s\">\"P x\"</span> <span class=\"k\">by</span> <span class=\"n\">auto</span>\n  <span class=\"k\">thus</span> <span class=\"s\">\"‚àÉx. P x\"</span> <span class=\"k\">by</span> <span class=\"n\">auto</span>\n<span class=\"k\">qed</span>\n</code></pre></div>\n<p>I don't know if there is a more elegant way though.</p>",
        "id": 291581870,
        "sender_full_name": "Fabian Huch",
        "timestamp": 1659363632
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"348400\">Fabian Huch</span> <a href=\"#narrow/stream/238552-Beginner-Questions/topic/uniqueness.20proof/near/291581870\">said</a>:</p>\n<blockquote>\n<p>An easy fix for that is to first <code>have</code> your property with the obtained variable, then show the existence statement from that:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">proof</span> <span class=\"o\">-</span>\n  <span class=\"k\">obtain</span> <span class=\"n\">x</span> <span class=\"kp\">where</span> <span class=\"s\">\"P x\"</span> <span class=\"k\">using</span> <span class=\"n\">assms</span> <span class=\"k\">by</span> <span class=\"n\">auto</span>\n  <span class=\"k\">then</span> <span class=\"k\">have</span> <span class=\"s\">\"P x\"</span> <span class=\"k\">by</span> <span class=\"n\">auto</span>\n  <span class=\"k\">thus</span> <span class=\"s\">\"‚àÉx. P x\"</span> <span class=\"k\">by</span> <span class=\"n\">auto</span>\n<span class=\"k\">qed</span>\n</code></pre></div>\n<p>I don't know if there is a more elegant way though.</p>\n</blockquote>\n<p>Hmm.. but then in the first (existence + uniqueness) case I can't unpack the operator into existence and uniqueness bits, because then it'll unpack the existence part too far for this fix to work.</p>",
        "id": 291582165,
        "sender_full_name": "Artem Khovanov",
        "timestamp": 1659363779
    },
    {
        "content": "<p>For example, if I would like to prove</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">test</span><span class=\"o\">:</span>\n  <span class=\"kp\">assumes</span> <span class=\"s\">\"‚àÉ x. P x\"</span> <span class=\"s\">\"‚ü¶P a; P b‚üß ‚üπ a = b\"</span>\n  <span class=\"kp\">shows</span> <span class=\"s\">\"‚àÉ!x. P x\"</span>\n<span class=\"k\">proof</span>\n  <span class=\"k\">obtain</span> <span class=\"n\">x</span> <span class=\"kp\">where</span> <span class=\"s\">\"P x\"</span> <span class=\"k\">using</span> <span class=\"n\">assms</span> <span class=\"k\">by</span> <span class=\"n\">auto</span>\n  <span class=\"k\">show</span> <span class=\"s\">\"P x\"</span> <span class=\"k\">by</span> <span class=\"n\">auto</span>\n  <span class=\"k\">thus</span> <span class=\"s\">\"‚ãÄx'. P x' ‚üπ x' = x\"</span> <span class=\"k\">by</span> <span class=\"n\">auto</span>\n<span class=\"k\">qed</span>\n</code></pre></div>",
        "id": 291582540,
        "sender_full_name": "Artem Khovanov",
        "timestamp": 1659363936
    },
    {
        "content": "<p>Well you can do the same thing:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code>  <span class=\"k\">have</span> <span class=\"s\">\"P x\"</span> <span class=\"gr\">sorry</span>\n  <span class=\"k\">moreover</span> <span class=\"k\">have</span> <span class=\"s\">\"‚ãÄy. P y ‚üπ y = x\"</span> <span class=\"gr\">sorry</span>\n  <span class=\"k\">ultimately</span> <span class=\"k\">have</span> <span class=\"s\">\"‚àÉ!x. P x\"</span> <span class=\"k\">by</span> <span class=\"n\">blast</span>\n</code></pre></div>\n<p>Ultimately, it shouldn't matter except for style - you can always first <code>have</code> what you <code>show</code>.</p>",
        "id": 291583503,
        "sender_full_name": "Fabian Huch",
        "timestamp": 1659364364
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"348400\">Fabian Huch</span> <a href=\"#narrow/stream/238552-Beginner-Questions/topic/uniqueness.20proof/near/291583503\">said</a>:</p>\n<blockquote>\n<p>Well you can do the same thing:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code>  <span class=\"k\">have</span> <span class=\"s\">\"P x\"</span> <span class=\"gr\">sorry</span>\n  <span class=\"k\">moreover</span> <span class=\"k\">have</span> <span class=\"s\">\"‚ãÄy. P y ‚üπ y = x\"</span> <span class=\"gr\">sorry</span>\n  <span class=\"k\">ultimately</span> <span class=\"k\">have</span> <span class=\"s\">\"‚àÉ!x. P x\"</span> <span class=\"k\">by</span> <span class=\"n\">blast</span>\n</code></pre></div>\n<p>Ultimately, it shouldn't matter except for style - you can always first <code>have</code> what you <code>show</code>.</p>\n</blockquote>\n<p>Ah right yep thanks!</p>",
        "id": 291583603,
        "sender_full_name": "Artem Khovanov",
        "timestamp": 1659364420
    },
    {
        "content": "<p>Here is another workaround I found (it looks silly here, but is good for longer proofs):</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">test</span><span class=\"o\">:</span>\n  <span class=\"kp\">assumes</span> <span class=\"s\">\"‚àÉ x. P x\"</span>\n  <span class=\"kp\">shows</span> <span class=\"s\">\"‚àÉx. P x\"</span>\n<span class=\"k\">proof</span><span class=\"o\">-</span>\n  <span class=\"k\">obtain</span> <span class=\"n\">x</span> <span class=\"kp\">where</span> <span class=\"s\">\"P x\"</span> <span class=\"k\">using</span> <span class=\"n\">assms</span> <span class=\"k\">by</span> <span class=\"n\">auto</span>\n  <span class=\"k\">show</span> <span class=\"s\">\"‚àÉx. P x\"</span>\n  <span class=\"k\">proof</span>\n    <span class=\"k\">show</span> <span class=\"s\">\"P x\"</span> <span class=\"k\">using</span> <span class=\"sx\">`P x`</span> <span class=\"ow\">.</span>\n  <span class=\"k\">qed</span>\n<span class=\"k\">qed</span>\n</code></pre></div>",
        "id": 291586647,
        "sender_full_name": "Artem Khovanov",
        "timestamp": 1659365788
    },
    {
        "content": "<p>This is maybe a bit shorter:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">test</span><span class=\"o\">:</span>\n  <span class=\"kp\">assumes</span> <span class=\"s\">\"‚àÉ x. P x\"</span>\n  <span class=\"kp\">shows</span> <span class=\"s\">\"‚àÉx. P x\"</span>\n<span class=\"k\">proof</span><span class=\"o\">-</span>\n  <span class=\"k\">obtain</span> <span class=\"n\">x</span> <span class=\"kp\">where</span> <span class=\"s\">\"P x\"</span> <span class=\"o\">(</span><span class=\"kp\">is</span> <span class=\"s\">\"?P x\"</span><span class=\"o\">)</span> <span class=\"k\">using</span> <span class=\"n\">assms</span> <span class=\"k\">by</span> <span class=\"n\">auto</span>\n  <span class=\"k\">show</span> <span class=\"s\">\"‚àÉx. P x\"</span> <span class=\"k\">by</span> <span class=\"o\">(</span><span class=\"n\">rule</span> <span class=\"n\">exI</span><span class=\"o\">[</span><span class=\"n\">of</span> <span class=\"o\">?</span><span class=\"n\">P</span><span class=\"o\">,</span> <span class=\"n\">OF</span> <span class=\"sx\">`?P x`</span><span class=\"o\">])</span>\n<span class=\"k\">qed</span>\n</code></pre></div>",
        "id": 291590011,
        "sender_full_name": "Jan van Br√ºgge",
        "timestamp": 1659367317
    }
]