[
    {
        "content": "<p>I need help getting <code>using</code> and <code>rule</code> to work together:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">definition</span> <span class=\"s\">&quot;P ≡ False&quot;</span> <span class=\"c\">(* this is not important *)</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">myLem</span><span class=\"o\">:</span> <span class=\"s\">&quot;P ⟹ A&quot;</span> <span class=\"c\">(* a rule I want to use *)</span>\n  <span class=\"k\">unfolding</span> <span class=\"n\">P_def</span> <span class=\"k\">by</span> <span class=\"n\">simp</span>\n\n<span class=\"kn\">lemma</span> <span class=\"kp\">assumes</span> <span class=\"s\">&quot;A&quot;</span> <span class=\"s\">&quot;A ⟹ P&quot;</span> <span class=\"kp\">shows</span> <span class=\"s\">&quot;C&quot;</span>\n  <span class=\"k\">using</span> <span class=\"n\">assms</span> <span class=\"k\">by</span> <span class=\"o\">(</span><span class=\"n\">rule</span> <span class=\"n\">myLem</span><span class=\"o\">)</span> <span class=\"c\">(* Failed to apply initial proof method - how can I make it work? *)</span>\n\n<span class=\"kn\">lemma</span> <span class=\"s\">&quot;⟦A; A ⟹ P⟧ ⟹ C&quot;</span>\n  <span class=\"k\">by</span> <span class=\"o\">(</span><span class=\"n\">rule</span> <span class=\"n\">myLem</span><span class=\"o\">)</span> <span class=\"c\">(* Works just fine *)</span>\n</code></pre></div>",
        "id": 198997577,
        "sender_full_name": "Kevin Kappelmann",
        "timestamp": 1590656354
    },
    {
        "content": "<p>Note: I want to insert assms with <code>using</code> because in my actual application, the <code>(rule myLem)</code> command is followed by an <code>auto</code> (or something more complicated) that needs to use <code>assms</code>.</p>",
        "id": 198997695,
        "sender_full_name": "Kevin Kappelmann",
        "timestamp": 1590656406
    },
    {
        "content": "<p>I always forget this issue and keep running into it too. <code>rule</code> does some funny thing with facts from <code>using</code>, try <code>intro</code> instead.</p>",
        "id": 198997898,
        "sender_full_name": "Josh Chen",
        "timestamp": 1590656560
    },
    {
        "content": "<p><code>intro</code> loops because <code>A</code> is arbitrary :/</p>",
        "id": 198997945,
        "sender_full_name": "Kevin Kappelmann",
        "timestamp": 1590656588
    },
    {
        "content": "<p>what about <code>apply(rule myLem) using assms by auto</code>?</p>",
        "id": 198998135,
        "sender_full_name": "Lukas Stevens",
        "timestamp": 1590656714
    },
    {
        "content": "<p>that surely works, but I'd like to avoid apply</p>",
        "id": 198998195,
        "sender_full_name": "Kevin Kappelmann",
        "timestamp": 1590656753
    },
    {
        "content": "<p>apply - apply rule</p>",
        "id": 198998543,
        "sender_full_name": "maximilian p.l. haslbeck",
        "timestamp": 1590656996
    },
    {
        "content": "<p>I guess <code>by (rule myLem) (auto intro: assms)</code> would work.</p>",
        "id": 198998651,
        "sender_full_name": "Josh Chen",
        "timestamp": 1590657067
    },
    {
        "content": "<p><del>but then just <code>auto intro: assms</code> works as well, so... <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></del> No it doesn't! What?...</p>",
        "id": 198998692,
        "sender_full_name": "Josh Chen",
        "timestamp": 1590657115
    },
    {
        "content": "<p>hmm, what's actually going on if I do <code>using facts by auto</code>? In what way is <code>auto</code> picking up <code>facts</code>? As <code>simp</code> rules?</p>",
        "id": 198998780,
        "sender_full_name": "Kevin Kappelmann",
        "timestamp": 1590657172
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"228839\">Josh Chen</span> <a href=\"#narrow/stream/238552-Beginner-Questions/topic/using.20and.20applying.20rule/near/198998692\">said</a>:</p>\n<blockquote>\n<p><del>but then just <code>auto intro: assms</code> works as well, so... <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></del> No it doesn't! What?...</p>\n</blockquote>\n<p>Because it does not know about <code>myLem</code></p>",
        "id": 198998843,
        "sender_full_name": "Kevin Kappelmann",
        "timestamp": 1590657240
    },
    {
        "content": "<p>D'oh! <code>auto intro: myLem assms</code> works.</p>",
        "id": 198998932,
        "sender_full_name": "Josh Chen",
        "timestamp": 1590657284
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"233154\">Kevin Kappelmann</span> <a href=\"#narrow/stream/238552-Beginner-Questions/topic/using.20and.20applying.20rule/near/198998780\">said</a>:</p>\n<blockquote>\n<p>hmm, what's actually going on if I do <code>using facts by auto</code>? In what way is <code>auto</code> picking up <code>facts</code>? As <code>simp</code> rules?</p>\n</blockquote>\n<p>I want to know this too, maybe it's in the docs somewhere, but I don't recall having seen something about <strong>exactly</strong> how <code>using</code> uses facts.</p>",
        "id": 198998986,
        "sender_full_name": "Josh Chen",
        "timestamp": 1590657333
    },
    {
        "content": "<p>Here's a relevant <a href=\"https://lists.cam.ac.uk/mailman/htdig/cl-isabelle-users/2011-February/msg00019.html\">e-mail thread</a> about the difference between <code>using facts by auto</code> and <code>auto simp: facts</code>.</p>",
        "id": 198999588,
        "sender_full_name": "Kevin Kappelmann",
        "timestamp": 1590657763
    },
    {
        "content": "<p>with some interesting insights like <code>using</code> fixing type variables and hence instantiation can fail (though not relevant in my case) and facts in <code>using</code> being simplified but not if added as a simp rule.</p>",
        "id": 198999779,
        "sender_full_name": "Kevin Kappelmann",
        "timestamp": 1590657910
    },
    {
        "content": "<p>But still, my 2 questions are open:</p>\n<ol>\n<li>can I replace <code>rule</code> with some tactic <code>X</code> such that <code>using assms by (X myLem) auto</code> works?</li>\n<li>how is <code>auto</code> picking up facts/assumptions in the goal state (e.g. inserted with <code>using</code>)? Are they used as <code>simp</code> rules? If so, I would replace <code>using assms by (X myLem)</code> by <code>by (X myLem) (auto simp: assms)</code></li>\n</ol>",
        "id": 199000103,
        "sender_full_name": "Kevin Kappelmann",
        "timestamp": 1590658133
    },
    {
        "content": "<p>(Note: I could also do <code>by (rule myLem, insert assms) auto</code>, but that gives me bad feelings, haha)</p>",
        "id": 199000430,
        "sender_full_name": "Kevin Kappelmann",
        "timestamp": 1590658342
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"233154\">Kevin Kappelmann</span> <a href=\"#narrow/stream/238552-Beginner-Questions/topic/using.20and.20applying.20rule/near/199000103\">said</a>:</p>\n<blockquote>\n<p>how is <code>auto</code> picking up facts/assumptions in the goal state (e.g. inserted with <code>using</code>)? Are they used as <code>simp</code> rules? If so, I would replace <code>using assms by (X myLem)</code> by <code>by (X myLem) (auto simp: assms)</code></p>\n</blockquote>\n<p>I guess the answer is no - when <code>assms</code> are used for some registered <code>dest</code> rule, I get different results.</p>",
        "id": 199001984,
        "sender_full_name": "Kevin Kappelmann",
        "timestamp": 1590659451
    },
    {
        "content": "<p>Does this help you? <a href=\"https://github.com/isabelle-prover/cookbook/blob/master/src/proofs/methods/Chained_Facts.thy\">https://github.com/isabelle-prover/cookbook/blob/master/src/proofs/methods/Chained_Facts.thy</a></p>",
        "id": 199009413,
        "sender_full_name": "Simon Wimmer",
        "timestamp": 1590665076
    },
    {
        "content": "<p>I think at least part of the issues are covered there</p>",
        "id": 199009424,
        "sender_full_name": "Simon Wimmer",
        "timestamp": 1590665091
    },
    {
        "content": "<p>But now it seems that I even need to add more information</p>",
        "id": 199009452,
        "sender_full_name": "Simon Wimmer",
        "timestamp": 1590665120
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"233154\">Kevin Kappelmann</span> <a href=\"#narrow/stream/238552-Beginner-Questions/topic/using.20and.20applying.20rule/near/199000103\">said</a>:</p>\n<blockquote>\n<p>But still, my 2 questions are open:</p>\n<ol>\n<li>can I replace <code>rule</code> with some tactic <code>X</code> such that <code>using assms by (X myLem) auto</code> works?</li>\n<li>how is <code>auto</code> picking up facts/assumptions in the goal state (e.g. inserted with <code>using</code>)? Are they used as <code>simp</code> rules? If so, I would replace <code>using assms by (X myLem)</code> by <code>by (X myLem) (auto simp: assms)</code></li>\n</ol>\n</blockquote>\n<p>Following the terminology I use in the cookbook entry, <code>auto</code> should be a simple method, hence the facts should be inserted into the goal state. This means that the classical-reasoner part of <code>auto</code> should do nothing special with them, and the simplifier part should use them for rewriting in the same way that <code>simp</code> does.</p>",
        "id": 199009606,
        "sender_full_name": "Simon Wimmer",
        "timestamp": 1590665254
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"228839\">Josh Chen</span> <a href=\"#narrow/stream/238552-Beginner-Questions/topic/using.20and.20applying.20rule/near/198998932\">said</a>:</p>\n<blockquote>\n<p>D'oh! <code>auto intro: myLem assms</code> works.</p>\n</blockquote>\n<p>Btw, you will also find cases where <code>by (rule myLem) (auto intro: assms)</code> works but <code>by (auto intro: myLem assms)</code> won't. The reason is that afaik per default <code>auto</code>  uses the classical reasoner with a search depth of 2. Thus <code>by (auto 4 3 intro: myLem assms)</code> should be a more robust translation. The first parameter sets the search depth for <code>blast</code> and the second the sets the search depth of the classical reasoner. And even then, <code>by (auto 4 3 intro: myLem assms)</code> may not terminate in some cases, while  <code>by (rule myLem) (auto intro: assms)</code> will.</p>",
        "id": 199009930,
        "sender_full_name": "Simon Wimmer",
        "timestamp": 1590665510
    },
    {
        "content": "<p>(note that this may still contain some slight inaccuracies, it is just inferred from my understanding of these things that I gathered over the years)</p>",
        "id": 199010026,
        "sender_full_name": "Simon Wimmer",
        "timestamp": 1590665575
    },
    {
        "content": "<p>(And we should certainly add an entry about <code>auto</code> and friends to the cookbook)</p>",
        "id": 199010130,
        "sender_full_name": "Simon Wimmer",
        "timestamp": 1590665653
    },
    {
        "content": "<p>Damn, I didn't know you could adjust the search depth.</p>",
        "id": 199010405,
        "sender_full_name": "Lukas Stevens",
        "timestamp": 1590665888
    },
    {
        "content": "<p>That cookbook entry is fantastic! Helped me understanding things so much better - thank you! <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 199086489,
        "sender_full_name": "Kevin Kappelmann",
        "timestamp": 1590699871
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"233154\">Kevin Kappelmann</span> <a href=\"#narrow/stream/238552-Beginner-Questions/topic/using.20and.20applying.20rule/near/199000103\">said</a>:</p>\n<blockquote>\n<p>But still, my 2 questions are open:</p>\n<ol>\n<li>can I replace <code>rule</code> with some tactic <code>X</code> such that <code>using assms by (X myLem) auto</code> works?</li>\n<li>how is <code>auto</code> picking up facts/assumptions in the goal state (e.g. inserted with <code>using</code>)? Are they used as <code>simp</code> rules? If so, I would replace <code>using assms by (X myLem)</code> by <code>by (X myLem) (auto simp: assms)</code></li>\n</ol>\n</blockquote>\n<p>I usually use <code>X = intro</code> in these cases. Doesn't do exactly the same as <code>rule</code> (it applies the intro-rule repeatedly), but it usually gets the job done. Another possibility is <code>by (rule myLem) (use assms in auto)</code>. Note however that if you want to give additional arguments to the <code>auto</code> in the last one, it has to be put in cartouches.</p>",
        "id": 201378721,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1592566812
    }
]