[
    {
        "content": "<p>Hi, I have this function</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">assign_seats</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"('a::linorder, 'b) Divisor_Module</span>\n<span class=\"s\">                        ⇒ ('a::linorder, 'b) Divisor_Module\"</span><span class=\"w\"> </span><span class=\"kp\">where</span>\n<span class=\"s\">\"assign_seats rec = (</span>\n<span class=\"s\">      let winners = get_winners (fv rec) (p rec) in</span>\n<span class=\"s\">      if length winners ≤ ns rec then</span>\n<span class=\"s\">        let rec' =  (divisor_module [hd winners] rec) in</span>\n<span class=\"s\">                    ⦇res = (res rec'), p = (p rec'), i = (i rec'),  s = (s rec'),</span>\n<span class=\"s\">                         ns = ((ns rec') - 1), v = (v rec'), fv = (fv rec'), sl = (sl rec'),  d = (d rec')</span>\n<span class=\"s\">                        ⦈</span>\n<span class=\"s\">      else</span>\n<span class=\"s\">         let rec'' = (break_tie winners rec) in</span>\n<span class=\"s\">                       ⦇res = (res rec''),  p = (p rec''),</span>\n<span class=\"s\">                         i = (i rec''), s = (s rec''),</span>\n<span class=\"s\">                         ns = 0, v = (v rec''), fv = (fv rec''), sl = (sl rec''), d = (d rec'')</span>\n<span class=\"s\">                        ⦈)\"</span>\n</code></pre></div>\n<p>for which i want to prove this lemma</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">assign_seats_seats_increased</span><span class=\"o\">:</span>\n<span class=\"w\">   </span><span class=\"kp\">fixes</span>\n<span class=\"w\">  </span><span class=\"n\">rec</span><span class=\"o\">::</span><span class=\"s\">\"('a::linorder, 'b) Divisor_Module\"</span>\n<span class=\"kp\">defines</span><span class=\"w\"> </span><span class=\"s\">\"winners ≡ get_winners (fv rec) (p rec)\"</span>\n<span class=\"kp\">defines</span><span class=\"w\"> </span><span class=\"s\">\"party ≡ hd winners\"</span>\n<span class=\"kp\">defines</span><span class=\"w\"> </span><span class=\"s\">\"index ≡ get_index_upd party (p rec)\"</span>\n<span class=\"kp\">defines</span><span class=\"w\"> </span><span class=\"s\">\"rec' ≡ (divisor_module [hd winners] rec)\"</span>\n<span class=\"kp\">assumes</span><span class=\"w\"> </span><span class=\"s\">\"length winners ≤ ns rec\"</span>\n<span class=\"kp\">assumes</span><span class=\"w\"> </span><span class=\"s\">\"index &lt; length (sl rec)\"</span>\n<span class=\"kp\">shows</span><span class=\"w\"> </span><span class=\"s\">\"sl (assign_seats rec) ! index = sl rec ! index + 1\"</span>\n<span class=\"k\">proof</span><span class=\"w\"> </span><span class=\"o\">-</span>\n<span class=\"w\">  </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"s\">\"sl (assign_seats rec) =  sl (⦇res = (res rec'),</span>\n<span class=\"s\">                         p = (p rec'),</span>\n<span class=\"s\">                         i = (i rec'),</span>\n<span class=\"s\">                         s = (s rec'),</span>\n<span class=\"s\">                         ns = ((ns rec') - 1),</span>\n<span class=\"s\">                         v = (v rec'),</span>\n<span class=\"s\">                         fv = (fv rec'),</span>\n<span class=\"s\">                         sl = (sl rec'),</span>\n<span class=\"s\">                         d = (d rec')</span>\n<span class=\"s\">                        ⦈)\"</span>\n<span class=\"w\">    </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">assms</span><span class=\"w\"> </span><span class=\"n\">assign_seats_update</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">metis</span>\n<span class=\"w\">  </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"s\">\"sl (assign_seats rec) ! index = (sl rec') ! index\"</span>\n<span class=\"w\">    </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">simp</span>\n<span class=\"w\">  </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"s\">\"... = sl (divisor_module [hd winners] rec) ! index\"</span><span class=\"w\"> </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">assms</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">simp</span>\n<span class=\"w\">  </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"s\">\"... = (list_update (sl rec) index ((sl rec) ! index + 1))</span>\n<span class=\"s\">                   ! index\"</span><span class=\"w\"> </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">assms</span><span class=\"w\"> </span><span class=\"n\">divisor_module_sl_update</span>\n<span class=\"w\">    </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">metis</span><span class=\"w\"> </span><span class=\"n\">list.sel</span><span class=\"o\">(</span><span class=\"n\">1</span><span class=\"o\">))</span>\n<span class=\"w\">  </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"s\">\"... = sl rec ! index + 1\"</span>\n<span class=\"w\">    </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">nth_list_update_eq</span><span class=\"w\"> </span><span class=\"n\">assms</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">simp</span>\n<span class=\"w\">  </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"s\">\"sl (assign_seats rec) ! index = sl rec ! index + 1\"</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">simp</span>\n<span class=\"w\">  </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">thesis</span><span class=\"w\"> </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"s\">‹sl (assign_seats rec) ! index = sl rec ! index + 1›</span>\n<span class=\"w\">  </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">simp</span>\n<span class=\"k\">qed</span>\n</code></pre></div>\n<p>The step  <code> then have \"sl (assign_seats rec) ! index = sl rec ! index + 1\" by simp </code> is not working (failed to finish subgoal). How is that possible, if I spent the previous steps proving this equivalence? Is there something I am missing? All the previous steps are working, so I don't think it's necessary to share also code about previous functions or lemmas.</p>",
        "id": 429381722,
        "sender_full_name": "Salvatore Francesco Rossetta",
        "timestamp": 1711369985
    },
    {
        "content": "<p><code>finally</code> not <code>then</code></p>",
        "id": 429383658,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1711370301
    },
    {
        "content": "<p>then threads only the last used fact, while you want to have all of then combined…</p>",
        "id": 429384032,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1711370367
    },
    {
        "content": "<p>The first string of <code>then</code>s should be <code>also</code>s; the last one a <code>finally</code>.</p>",
        "id": 429403774,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1711373444
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232736\">Manuel Eberl</span> <a href=\"#narrow/stream/238552-Beginner-Questions/topic/using.20lemma.20in.20later.20proof/near/429403774\">said</a>:</p>\n<blockquote>\n<p>The first string of <code>then</code>s should be <code>also</code>s; the last one a <code>finally</code>.</p>\n</blockquote>\n<p>Thank you, since Isabelle was not giving any error I thought it was legit. Not it works.</p>",
        "id": 429480900,
        "sender_full_name": "Salvatore Francesco Rossetta",
        "timestamp": 1711390196
    }
]