[
    {
        "content": "<p>Hi, I did this question in previous thread but it got lost. I have an induction proof in which one subgoal (0) is working if i write  only <code>using assms </code>, while the other subgoal (n) is working only for <code>unfolding assms</code>, both do not work if I put the other way. Is there a way I can solve this?</p>",
        "id": 432536896,
        "sender_full_name": "Salvatore Francesco Rossetta",
        "timestamp": 1712764708
    },
    {
        "content": "<p>do you mean</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">assms</span>\n<span class=\"k\">proof</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">induction</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>versus:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">unfolding</span><span class=\"w\"> </span><span class=\"n\">assms</span>\n<span class=\"k\">proof</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">induction</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>If that's the case, then I'm afraid you have to stick to one (probably the former)</p>\n<p>otherwise I assume you may be doing something like:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">induction</span><span class=\"o\">)</span>\n<span class=\"k\">using</span><span class=\"n\">/unfolding</span><span class=\"w\"> </span><span class=\"n\">assms</span><span class=\"w\"> </span><span class=\"n\">FOO</span>\n</code></pre></div>\n<p>in that case, you can try:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">induction</span><span class=\"o\">)</span>\n<span class=\"n\">subgoal</span><span class=\"w\"> </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">assms</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"ow\">...</span>\n<span class=\"k\">unfolding</span><span class=\"w\"> </span><span class=\"n\">assms</span><span class=\"w\"> </span><span class=\"ow\">...</span>\n</code></pre></div>",
        "id": 432616620,
        "sender_full_name": "Yong Kiam",
        "timestamp": 1712801721
    },
    {
        "content": "<p><code>using assms(6-) unfolding assms(1-5)</code></p>",
        "id": 432627127,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1712810299
    },
    {
        "content": "<p><code>using assms</code> and <code>unfolding assms</code> are very different for non definition</p>",
        "id": 432627146,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1712810331
    },
    {
        "content": "<p>Consider:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span>\n<span class=\"w\">   </span><span class=\"kp\">defines</span><span class=\"w\"> </span><span class=\"s\">\"q == f n\"</span>\n<span class=\"w\">   </span><span class=\"kp\">assumes</span><span class=\"w\"> </span><span class=\"s\">\"P n\"</span>\n<span class=\"w\">   </span><span class=\"kp\">shows</span><span class=\"w\"> </span><span class=\"s\">\"Q q n\"</span>\n</code></pre></div>\n<p>when doing induction without unfolding the assumptions, you are going to need <code>arbitrary: q</code> otherwise the q is fixed across the subgoals</p>",
        "id": 432627230,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1712810417
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"234226\">Yong Kiam</span> <a href=\"#narrow/stream/238552-Beginner-Questions/topic/using.2Funfolding.20assms/near/432616620\">said</a>:</p>\n<blockquote>\n<p>do you mean</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">assms</span>\n<span class=\"k\">proof</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">induction</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>versus:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">unfolding</span><span class=\"w\"> </span><span class=\"n\">assms</span>\n<span class=\"k\">proof</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">induction</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>If that's the case, then I'm afraid you have to stick to one (probably the former)</p>\n<p>otherwise I assume you may be doing something like:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">induction</span><span class=\"o\">)</span>\n<span class=\"k\">using</span><span class=\"n\">/unfolding</span><span class=\"w\"> </span><span class=\"n\">assms</span><span class=\"w\"> </span><span class=\"n\">FOO</span>\n</code></pre></div>\n<p>in that case, you can try:</p>\n<p><div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">induction</span><span class=\"o\">)</span>\n<span class=\"n\">subgoal</span><span class=\"w\"> </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">assms</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"ow\">...</span>\n<span class=\"k\">unfolding</span><span class=\"w\"> </span><span class=\"n\">assms</span><span class=\"w\"> </span><span class=\"ow\">...</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>This is the case </p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"w\">  </span><span class=\"k\">using</span><span class=\"n\">/unfolding</span><span class=\"w\"> </span><span class=\"n\">assms</span>\n<span class=\"w\">  </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">induction</span><span class=\"w\"> </span><span class=\"n\">rec</span><span class=\"w\"> </span><span class=\"n\">rule</span><span class=\"o\">:</span><span class=\"n\">loop_o.induct</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"n\">subgoal</span><span class=\"w\"> </span><span class=\"kp\">for</span><span class=\"w\"> </span><span class=\"n\">r</span>\n<span class=\"w\">    </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">auto</span><span class=\"w\"> </span><span class=\"n\">split</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">if_splits</span><span class=\"w\"> </span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"n\">del</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">assign_seats.simps</span><span class=\"o\">)</span>\n<span class=\"w\">    </span><span class=\"k\">done</span>\n<span class=\"w\">    </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">auto</span><span class=\"w\"> </span><span class=\"n\">simp</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Let_def</span><span class=\"w\"> </span><span class=\"n\">split</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">if_splits</span><span class=\"w\"> </span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"n\">del</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">assign_seats.simps</span><span class=\"o\">)</span>\n<span class=\"w\">    </span><span class=\"k\">done</span>\n</code></pre></div>\n<p>So I think I am in the second case you said, right? I tried this but it does not work</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"w\"> </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">induction</span><span class=\"w\"> </span><span class=\"n\">rec</span><span class=\"w\"> </span><span class=\"n\">rule</span><span class=\"o\">:</span><span class=\"n\">loop_o.induct</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"n\">subgoal</span><span class=\"w\"> </span><span class=\"kp\">for</span><span class=\"w\"> </span><span class=\"n\">r</span>\n<span class=\"w\">    </span><span class=\"k\">unfolding</span><span class=\"w\"> </span><span class=\"n\">assms</span><span class=\"w\"> </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">auto</span><span class=\"w\"> </span><span class=\"n\">split</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">if_splits</span><span class=\"w\"> </span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"n\">del</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">assign_seats.simps</span><span class=\"o\">)</span>\n<span class=\"w\">    </span><span class=\"k\">done</span>\n<span class=\"w\">    </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">assms</span><span class=\"w\"> </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">auto</span><span class=\"w\"> </span><span class=\"n\">simp</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Let_def</span><span class=\"w\"> </span><span class=\"n\">split</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">if_splits</span><span class=\"w\"> </span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"n\">del</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">assign_seats.simps</span><span class=\"o\">)</span>\n<span class=\"w\">    </span><span class=\"k\">done</span>\n</code></pre></div>\n<p>Moreover, the case not working (if I understood correctly) is this one </p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"w\">  </span><span class=\"s\">\"ns r = 0  ⟹ loop_o r = r\"</span>\n</code></pre></div>\n<p>so if I write in the assumptions <code> P r</code> it should work, so this subcase actually only needs one assms. But if I write <br>\n<code> using assms(1) unfolding assms(2-) </code> then the second case also is looking for an unfolded assms(1) (i can see it in the error message).</p>",
        "id": 432630452,
        "sender_full_name": "Salvatore Francesco Rossetta",
        "timestamp": 1712813209
    },
    {
        "content": "<p>as <span class=\"user-mention\" data-user-id=\"233198\">@Mathias Fleury</span>  said, <code>using</code> and <code>unfolding</code> is very different, especially when you are using it BEFORE your induction</p>\n<p>I would say that DO NOT USE THIS:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">unfolding</span><span class=\"w\"> </span><span class=\"n\">assms</span>\n<span class=\"k\">proof</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">induction</span><span class=\"w\"> </span><span class=\"ow\">...</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>USE THIS:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">assms</span>\n<span class=\"k\">proof</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">induction</span><span class=\"w\"> </span><span class=\"ow\">...</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>and then fix your proof as needed</p>\n<p>(edit: this is assuming your <code>assms</code> are needed in the induction, you can also choose only some of them that are relevant)</p>",
        "id": 432630767,
        "sender_full_name": "Yong Kiam",
        "timestamp": 1712813449
    },
    {
        "content": "<p>Yes, indeed I noticed that only one <code>assms</code> is really needed and creating the conflict. So it is something even simpler, because now I have  </p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kp\">assumes</span><span class=\"w\">  </span><span class=\"s\">\"...\"</span>\n<span class=\"kp\">shows</span><span class=\"w\"> </span><span class=\"s\">\"...\"</span>\n<span class=\"w\">  </span><span class=\"k\">using</span><span class=\"n\">/unfolding</span><span class=\"w\"> </span><span class=\"n\">assms</span><span class=\"o\">(</span><span class=\"n\">1</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">induction</span><span class=\"w\"> </span><span class=\"n\">rec</span><span class=\"w\"> </span><span class=\"n\">rule</span><span class=\"o\">:</span><span class=\"n\">loop_o.induct</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"n\">subgoal</span><span class=\"w\"> </span><span class=\"kp\">for</span><span class=\"w\"> </span><span class=\"n\">r</span>\n<span class=\"w\">    </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">auto</span><span class=\"w\"> </span><span class=\"n\">split</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">if_splits</span><span class=\"w\"> </span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"n\">del</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">assign_seats.simps</span><span class=\"o\">)</span>\n<span class=\"w\">    </span><span class=\"k\">done</span>\n<span class=\"w\">    </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">auto</span><span class=\"w\"> </span><span class=\"n\">simp</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Let_def</span><span class=\"w\"> </span><span class=\"n\">split</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">if_splits</span><span class=\"w\"> </span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"n\">del</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">assign_seats.simps</span><span class=\"o\">)</span>\n<span class=\"w\">    </span><span class=\"k\">done</span>\n</code></pre></div>\n<p>As you said, I will use <code>using assms</code> and not <code>unfolding</code>. But I do not understand, how should I fix my proof then? Can't I unfold this only assms only in the second subgoal?</p>",
        "id": 432631454,
        "sender_full_name": "Salvatore Francesco Rossetta",
        "timestamp": 1712813983
    },
    {
        "content": "<p>it depends on what you need in the second goal, probably it should be</p>\n<p><code>unfolding ... apply (...)</code></p>\n<p>you will need to pick the correct name to <code>unfold</code> if it is from the inductive hypothesis (or use a structured proof)</p>",
        "id": 432631642,
        "sender_full_name": "Yong Kiam",
        "timestamp": 1712814110
    },
    {
        "content": "<p>I tried writing <code>unfolding ... apply (...)</code> and I get a failed subgoal </p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"n\">goal</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">1</span><span class=\"w\"> </span><span class=\"n\">subgoal</span><span class=\"o\">):</span>\n<span class=\"w\"> </span><span class=\"n\">1.</span><span class=\"w\"> </span><span class=\"n\">0</span><span class=\"w\"> </span><span class=\"n\">&lt;</span><span class=\"w\"> </span><span class=\"n\">ns</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"w\"> </span><span class=\"n\">⟹</span>\n<span class=\"w\">    </span><span class=\"o\">(</span><span class=\"n\">sl</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">assign_seats</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"n\">i2</span>\n<span class=\"w\">     </span><span class=\"n\">≤</span><span class=\"w\"> </span><span class=\"n\">sl</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">assign_seats</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"n\">i1</span><span class=\"w\"> </span><span class=\"n\">⟹</span>\n<span class=\"w\">     </span><span class=\"n\">sl</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">loop_o</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">assign_seats</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"o\">))</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"n\">i2</span>\n<span class=\"w\">     </span><span class=\"n\">≤</span><span class=\"w\"> </span><span class=\"n\">sl</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">loop_o</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">assign_seats</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"o\">))</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"n\">i1</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">⟹</span>\n<span class=\"w\">    </span><span class=\"n\">sl</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"n\">i2</span><span class=\"w\"> </span><span class=\"n\">≤</span><span class=\"w\"> </span><span class=\"n\">sl</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"n\">i1</span><span class=\"w\"> </span><span class=\"n\">⟹</span>\n<span class=\"w\">    </span><span class=\"n\">sl</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">loop_o</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">assign_seats</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"o\">))</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"n\">i2</span>\n<span class=\"w\">    </span><span class=\"n\">≤</span><span class=\"w\"> </span><span class=\"n\">sl</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">loop_o</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">assign_seats</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"o\">))</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"n\">i1</span>\n</code></pre></div>\n<p>The problem is the mismatch between <code>sl r ! i2 ≤ sl r ! i1</code> and <code>sl (assign_seats r) ! i2 ≤ sl (assign_seats r) ! i1</code>, right? But with a lemma <code>sl r ! i2 ≤ sl r ! i1 ⟹ sl (assign_seats r) ! i2 ≤ sl (assign_seats r) ! i1</code> it should work?</p>",
        "id": 432633346,
        "sender_full_name": "Salvatore Francesco Rossetta",
        "timestamp": 1712815381
    },
    {
        "content": "<p>I don't really know your problem at hand, so I don't know the answer... but you should try it I suppose..</p>\n<p>or maybe just use sledgehammer to see if it finds anything?</p>\n<p>edit: your proposed lemma looks reasonable for solving the goal (not sure if it is true for your definition)</p>",
        "id": 432633598,
        "sender_full_name": "Yong Kiam",
        "timestamp": 1712815525
    },
    {
        "content": "<p>I have the lemma, it is</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">a_s_c</span><span class=\"o\">:</span>\n<span class=\"w\">  </span><span class=\"kp\">fixes</span><span class=\"w\"> </span><span class=\"s\">\"...\"</span>\n<span class=\"kp\">assumes</span>\n<span class=\"w\">  </span><span class=\"n\">/*</span><span class=\"w\"> </span><span class=\"n\">other</span><span class=\"w\"> </span><span class=\"n\">assms</span><span class=\"w\"> </span><span class=\"n\">*/</span>\n<span class=\"w\">  </span><span class=\"s\">\"sl rec ! i1 ≥ sl rec ! i2\"</span>\n<span class=\"kp\">shows</span><span class=\"w\"> </span><span class=\"s\">\"sl (assign_seats rec) ! i1 ≥</span>\n<span class=\"s\">       sl (assign_seats rec) ! i2\"</span>\n</code></pre></div>\n<p>To use this lemma in my induction proof, I have to write add <code>other assms</code> in my first theorem, right?</p>",
        "id": 432634371,
        "sender_full_name": "Salvatore Francesco Rossetta",
        "timestamp": 1712816000
    },
    {
        "content": "<p>it depends on what they are... you should include any necessary ones, yes, but anything you can prove within the context of your previously mentioned subgoal, no</p>",
        "id": 432634473,
        "sender_full_name": "Yong Kiam",
        "timestamp": 1712816062
    },
    {
        "content": "<p>I would like to remind that:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span>\n<span class=\"w\">  </span><span class=\"kp\">fixes</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"n\">f</span>\n<span class=\"w\">   </span><span class=\"kp\">defines</span><span class=\"w\"> </span><span class=\"s\">\"q == f n\"</span>\n<span class=\"w\">   </span><span class=\"kp\">assumes</span><span class=\"w\"> </span><span class=\"s\">\"P n\"</span>\n<span class=\"w\">   </span><span class=\"kp\">shows</span><span class=\"w\"> </span><span class=\"s\">\"Q q n\"</span>\n<span class=\"w\">  </span><span class=\"kt\">thm</span><span class=\"w\"> </span><span class=\"n\">assms</span><span class=\"o\">(</span><span class=\"n\">1</span><span class=\"o\">)</span>\n<span class=\"c\">(*q = f n*)</span>\n</code></pre></div>",
        "id": 432635868,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1712816907
    },
    {
        "content": "<p>assms(1) is not the first assumption</p>",
        "id": 432636199,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1712817088
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"233198\">Mathias Fleury</span> <a href=\"#narrow/stream/238552-Beginner-Questions/topic/using.2Funfolding.20assms/near/432636199\">said</a>:</p>\n<blockquote>\n<p>assms(1) is not the first assumption</p>\n</blockquote>\n<p>I know, I have no defines</p>",
        "id": 432636972,
        "sender_full_name": "Salvatore Francesco Rossetta",
        "timestamp": 1712817510
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"234226\">Yong Kiam</span> <a href=\"#narrow/stream/238552-Beginner-Questions/topic/using.2Funfolding.20assms/near/432634473\">said</a>:</p>\n<blockquote>\n<p>it depends on what they are... you should include any necessary ones, yes, but anything you can prove within the context of your previously mentioned subgoal, no</p>\n</blockquote>\n<p>I added lemma and assumptions and I have </p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"w\"> </span><span class=\"n\">1.</span><span class=\"w\"> </span><span class=\"n\">0</span><span class=\"w\"> </span><span class=\"n\">&lt;</span><span class=\"w\"> </span><span class=\"n\">ns</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"w\"> </span><span class=\"n\">⟹</span>\n<span class=\"w\">    </span><span class=\"ow\">...</span><span class=\"w\"> </span><span class=\"n\">⟹</span>\n<span class=\"w\">    </span><span class=\"n\">sl</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">loop_o</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">assign_seats</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"o\">))</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"n\">index</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">party2</span>\n<span class=\"w\">    </span><span class=\"n\">≤</span><span class=\"w\"> </span><span class=\"n\">sl</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">loop_o</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">assign_seats</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"o\">))</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"n\">index</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">party1</span>\n</code></pre></div>\n<p>Why (p r) is not written as (p (assign_seats r))? <br>\nAdding assms <code> p rec = p (assign_seats rec)</code> as <span class=\"user-mention\" data-user-id=\"233198\">@Mathias Fleury</span>  suggested actually makes things worse because then my other assumptions start to unfold \"too much\".</p>\n<p>P.S: trying to cut the problem at the beginning: if I know that this parameter is never changing, putting it outside of this structure but just as a normal parameter should make the lemma work?</p>",
        "id": 432641819,
        "sender_full_name": "Salvatore Francesco Rossetta",
        "timestamp": 1712819844
    },
    {
        "content": "<p>Update: I put this parameter outside the structure, having now </p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kp\">shows</span><span class=\"w\"> </span><span class=\"s\">\"sl (loop_o p rec) ! i1 ≥</span>\n<span class=\"s\">       sl (loop_o p rec) ! i2\"</span>\n</code></pre></div>\n<p>Using the rule loop_o.induct,  how do I specify that the induction should be only on <code>rec</code> and <code>p</code> should be fixed?</p>",
        "id": 432644029,
        "sender_full_name": "Salvatore Francesco Rossetta",
        "timestamp": 1712820820
    },
    {
        "content": "<p>Update 2 (I am really trying): The first case, <code>ns r &gt; 0</code> seems to work and I am trying the other case <code>ns r = 0</code> by hand.</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"w\">  </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">induction</span><span class=\"w\"> </span><span class=\"n\">rec</span><span class=\"w\"> </span><span class=\"n\">rule</span><span class=\"o\">:</span><span class=\"n\">loop_o.induct</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"n\">subgoal</span><span class=\"w\"> </span><span class=\"kp\">for</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"w\"> </span><span class=\"n\">parties</span>\n<span class=\"w\">    </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">auto</span><span class=\"w\"> </span><span class=\"n\">simp</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Let_def</span><span class=\"w\"> </span><span class=\"n\">split</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">if_splits</span><span class=\"w\"> </span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"n\">del</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">assign_seats.simps</span><span class=\"o\">)</span>\n<span class=\"w\">    </span><span class=\"k\">done</span>\n<span class=\"w\">  </span><span class=\"n\">subgoal</span><span class=\"w\"> </span><span class=\"kp\">for</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"w\"> </span><span class=\"n\">parties</span>\n<span class=\"w\">    </span><span class=\"k\">proof</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"s\">\"ns r = 0\"</span><span class=\"w\"> </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">assms</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">simp</span>\n<span class=\"w\">    </span><span class=\"k\">done</span>\n</code></pre></div>\n<p>Why I cannot retrieve \"ns r = 0\" if it is the subgoal I am in?</p>",
        "id": 432651692,
        "sender_full_name": "Salvatore Francesco Rossetta",
        "timestamp": 1712823807
    },
    {
        "content": "<p>sorry it is very hard to see what your problem is without the code or a minimal example....</p>\n<p>what do you mean cannot retriev <code>ns r = 0</code>?</p>",
        "id": 432662516,
        "sender_full_name": "Yong Kiam",
        "timestamp": 1712827417
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"234226\">Yong Kiam</span> <a href=\"#narrow/stream/238552-Beginner-Questions/topic/using.2Funfolding.20assms/near/432662516\">said</a>:</p>\n<blockquote>\n<p>sorry it is very hard to see what your problem is without the code or a minimal example....</p>\n<p>what do you mean cannot retriev <code>ns r = 0</code>?</p>\n</blockquote>\n<p>You are right, I am sorry. This is the function </p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">function</span><span class=\"w\"> </span><span class=\"n\">loop_o</span><span class=\"w\"> </span><span class=\"o\">::</span>\n<span class=\"w\">  </span><span class=\"s\">\"'b list ⇒ ('a::linorder, 'b) Divisor_Module ⇒ ('a::linorder, 'b) Divisor_Module\"</span>\n<span class=\"w\">  </span><span class=\"kp\">where</span>\n<span class=\"w\">  </span><span class=\"s\">\"ns r &gt; 0 ⟹ loop_o p r = loop_o p (assign_seats p r)\"</span><span class=\"w\"> </span><span class=\"o\">|</span>\n<span class=\"w\">  </span><span class=\"s\">\"ns r = 0  ⟹ loop_o p r = r\"</span>\n</code></pre></div>\n<p>The first subgoal is working, the second not. I try to do it by hand</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"w\">  </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">induction</span><span class=\"w\"> </span><span class=\"n\">rec</span><span class=\"w\"> </span><span class=\"n\">rule</span><span class=\"o\">:</span><span class=\"n\">loop_o.induct</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"n\">subgoal</span><span class=\"w\"> </span><span class=\"kp\">for</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"w\"> </span><span class=\"n\">parties</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">working</span><span class=\"o\">)</span>\n<span class=\"w\">    </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">auto</span><span class=\"w\"> </span><span class=\"n\">simp</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Let_def</span><span class=\"w\"> </span><span class=\"n\">split</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">if_splits</span><span class=\"w\"> </span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"n\">del</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">assign_seats.simps</span><span class=\"o\">)</span>\n<span class=\"w\">    </span><span class=\"k\">done</span>\n<span class=\"w\">  </span><span class=\"n\">subgoal</span><span class=\"w\"> </span><span class=\"kp\">for</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"w\"> </span><span class=\"n\">parties</span><span class=\"w\"> </span><span class=\"n\">&lt;</span><span class=\"o\">----</span>\n<span class=\"w\">    </span><span class=\"k\">proof</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"s\">\"ns r = 0\"</span><span class=\"w\"> </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">assms</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">simp</span>\n<span class=\"w\">    </span><span class=\"k\">done</span>\n</code></pre></div>\n<p>I cannot <code>have \"ns r = 0\"</code> but why if I am in this subgoal? Is it something with variables that I am forgetting?<br>\nBecause when I put the cursor on the subgoal I see</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"n\">goal</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">1</span><span class=\"w\"> </span><span class=\"n\">subgoal</span><span class=\"o\">):</span>\n<span class=\"w\"> </span><span class=\"n\">1.</span><span class=\"w\"> </span><span class=\"n\">ns</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">0</span><span class=\"w\"> </span><span class=\"n\">⟹</span><span class=\"w\"> </span><span class=\"ow\">....</span>\n</code></pre></div>\n<p>I hope I was clear</p>",
        "id": 432665549,
        "sender_full_name": "Salvatore Francesco Rossetta",
        "timestamp": 1712828439
    },
    {
        "content": "<p>PS: if I was not clear, here's the code</p>\n<p><a href=\"/user_uploads/14278/Ln7h9-6Bt4SnysTEtiJuIbiQ/Votes.thy\">Votes.thy</a></p>",
        "id": 432668972,
        "sender_full_name": "Salvatore Francesco Rossetta",
        "timestamp": 1712829496
    },
    {
        "content": "<p>you should write <code>assume \"ns r = 0\" ... show ...</code> if you want to use a structured proof</p>",
        "id": 432679427,
        "sender_full_name": "Yong Kiam",
        "timestamp": 1712833348
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"234226\">Yong Kiam</span> <a href=\"#narrow/stream/238552-Beginner-Questions/topic/using.2Funfolding.20assms/near/432679427\">said</a>:</p>\n<blockquote>\n<p>you should write <code>assume \"ns r = 0\" ... show ...</code> if you want to use a structured proof</p>\n</blockquote>\n<p>Thank you, I wrote it but I understood that...</p>",
        "id": 432681690,
        "sender_full_name": "Salvatore Francesco Rossetta",
        "timestamp": 1712834189
    },
    {
        "content": "<p>... the problem boils down to: one subgoal needs <code>assms</code> to work, the other subgoal does not work with <code>assms</code> (but it does without). I can not tell the second case not to consider the assumption? It's weird that there is no syntax to solve this</p>",
        "id": 432685326,
        "sender_full_name": "Salvatore Francesco Rossetta",
        "timestamp": 1712835485
    },
    {
        "content": "<p>You can skip assumptions</p>",
        "id": 432708415,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1712842817
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"n\">subgoal</span><span class=\"w\"> </span><span class=\"n\">premises</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"kp\">for</span><span class=\"w\"> </span><span class=\"n\">r</span>\n<span class=\"w\">   </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"o\">(</span><span class=\"n\">1</span><span class=\"o\">,</span><span class=\"n\">3</span><span class=\"o\">,</span><span class=\"n\">5</span><span class=\"o\">,</span><span class=\"n\">19</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"ow\">...</span>\n</code></pre></div>\n<p>(for Isar this is obvious)</p>",
        "id": 432708475,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1712842845
    },
    {
        "content": "<p>I finally took a look at your Votes.thy the problem is this:</p>\n<p>currently it does not have any <code>assms</code> before <code>apply (induction ...)</code></p>\n<p>I recommend that you look <em>very</em> carefully at what goals you get with and without <code>using assms</code></p>",
        "id": 432709900,
        "sender_full_name": "Yong Kiam",
        "timestamp": 1712843305
    },
    {
        "content": "<p>to make sure you understand the difference, perhaps look at this simpler example:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">ls_induction_1</span><span class=\"o\">:</span>\n<span class=\"w\">  </span><span class=\"kp\">assumes</span><span class=\"w\"> </span><span class=\"s\">\"P xs\"</span>\n<span class=\"w\">  </span><span class=\"kp\">shows</span><span class=\"w\"> </span><span class=\"s\">\"Q (xs::'a list)\"</span>\n<span class=\"w\">  </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">induction</span><span class=\"w\"> </span><span class=\"n\">xs</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"gr\">oops</span>\n\n<span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">ls_induction_2</span><span class=\"o\">:</span>\n<span class=\"w\">  </span><span class=\"kp\">assumes</span><span class=\"w\"> </span><span class=\"s\">\"P xs\"</span>\n<span class=\"w\">  </span><span class=\"kp\">shows</span><span class=\"w\"> </span><span class=\"s\">\"Q (xs::'a list)\"</span>\n<span class=\"w\">  </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">assms</span>\n<span class=\"w\">  </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">induction</span><span class=\"w\"> </span><span class=\"n\">xs</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"gr\">oops</span>\n</code></pre></div>\n<p>have a look at the difference between the two goals you get</p>\n<p>in <code>ls_induction_1</code>, the <code>P xs</code> assumption will not help you at all in the induction because the <code>xs</code> is not quantified (see the parallel with your theorem)</p>\n<p>in <code>ls_induction_2</code>, you get <code>P (x # xs)</code> as an assumption, but in return you need to prove <code>P</code> for an appropriate list in the IH</p>",
        "id": 432711151,
        "sender_full_name": "Yong Kiam",
        "timestamp": 1712843650
    },
    {
        "content": "<p>in other words, these are two different inductions that you are trying to do in your proof... it's not as simple as \"one works with <code>using assms</code>\" and one doesn't -- you need to know which induction you're trying to do</p>",
        "id": 432711852,
        "sender_full_name": "Yong Kiam",
        "timestamp": 1712843831
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"234226\">Yong Kiam</span> <a href=\"#narrow/stream/238552-Beginner-Questions/topic/using.2Funfolding.20assms/near/432711852\">said</a>:</p>\n<blockquote>\n<p>in other words, these are two different inductions that you are trying to do in your proof... it's not as simple as \"one works with <code>using assms</code>\" and one doesn't -- you need to know which induction you're trying to do</p>\n</blockquote>\n<p>Your example was clear, I think I understood. So how should I proceed?</p>",
        "id": 432712374,
        "sender_full_name": "Salvatore Francesco Rossetta",
        "timestamp": 1712843968
    },
    {
        "content": "<p>well... you need to know what inductive argument you are making here....</p>\n<p>at minimum, I believe every assumption that mentions <code>parties</code> and <code>rec</code> should be inside the induction i.e., you should <code>using assms(...)</code> where (...) refers to the assumptions involving those two</p>",
        "id": 432712958,
        "sender_full_name": "Yong Kiam",
        "timestamp": 1712844128
    },
    {
        "content": "<p>a third possibility which I should have mentioned above:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">ls_induction_3</span><span class=\"o\">:</span>\n<span class=\"w\">  </span><span class=\"kp\">assumes</span><span class=\"w\"> </span><span class=\"s\">\"⋀xs. P xs\"</span>\n<span class=\"w\">  </span><span class=\"kp\">shows</span><span class=\"w\"> </span><span class=\"s\">\"Q (xs::'a list)\"</span>\n<span class=\"w\">  </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">induction</span><span class=\"w\"> </span><span class=\"n\">xs</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"gr\">oops</span>\n</code></pre></div>\n<p>this is another way you might need to setup your lemma ... do you want to assume <code>P</code> FORALL <code>xs</code> or only the <code>xs</code> in the conclusion?</p>",
        "id": 432713422,
        "sender_full_name": "Yong Kiam",
        "timestamp": 1712844264
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"234226\">Yong Kiam</span> <a href=\"#narrow/stream/238552-Beginner-Questions/topic/using.2Funfolding.20assms/near/432712958\">said</a>:</p>\n<blockquote>\n<p>well... you need to know what inductive argument you are making here....</p>\n<p>at minimum, I believe every assumption that mentions <code>parties</code> and <code>rec</code> should be inside the induction i.e., you should <code>using assms(...)</code> where (...) refers to the assumptions involving those two</p>\n</blockquote>\n<p>Well, my idea was induction over <code>rec</code>, also I I thought it was needed one assumption (the one in the file I uploaded here), just because it was giving me \"no subgoals\", but maybe I should add also all the assumptions from the previous lemma that I want to use during the induction?</p>",
        "id": 432715215,
        "sender_full_name": "Salvatore Francesco Rossetta",
        "timestamp": 1712844770
    },
    {
        "content": "<p>well yes, but as you can see from <code>ls_induction_2</code> adding more assumptions to the induction means that you also need to <em>prove</em> more things before you can apply an induction hypothesis</p>",
        "id": 432715830,
        "sender_full_name": "Yong Kiam",
        "timestamp": 1712844947
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"234226\">Yong Kiam</span> <a href=\"#narrow/stream/238552-Beginner-Questions/topic/using.2Funfolding.20assms/near/432715830\">said</a>:</p>\n<blockquote>\n<p>well yes, but as you can see from <code>ls_induction_2</code> adding more assumptions to the induction means that you also need to <em>prove</em> more things before you can apply an induction hypothesis</p>\n</blockquote>\n<p>Of course, so always referencing <code>ls_induction_2</code>, knowing <code>P(x # xs)</code> I should prove <code>P(x)</code>, so I get as implication <code>Q(x)</code> and therefore  <code> Q (x # xs)</code></p>",
        "id": 432718550,
        "sender_full_name": "Salvatore Francesco Rossetta",
        "timestamp": 1712845658
    },
    {
        "content": "<p>yes, but you need to figure out the analogous argument for the result you want here</p>",
        "id": 432718848,
        "sender_full_name": "Yong Kiam",
        "timestamp": 1712845723
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"234226\">Yong Kiam</span> <a href=\"#narrow/stream/238552-Beginner-Questions/topic/using.2Funfolding.20assms/near/432718848\">said</a>:</p>\n<blockquote>\n<p>yes, but you need to figure out the analogous argument for the result you want here</p>\n</blockquote>\n<p>Well, I have a first lemma that is proving one \"time\" case <code>A(x)  ⟹ P(x)</code>. Then I want to prove a second lemma that is a loop, so maybe something like <code>A (... ( A (x) ) ) ⟹ P(x)</code>? And at this point maybe I need a quantifier on the first lemma, like <code>∀x. A(x)  ⟹ P(x)</code>? I don't know if what I wrote makes sense</p>",
        "id": 432722288,
        "sender_full_name": "Salvatore Francesco Rossetta",
        "timestamp": 1712846604
    },
    {
        "content": "<p>your first lemma is already implicitly quantified over <code>x</code></p>",
        "id": 432722974,
        "sender_full_name": "Yong Kiam",
        "timestamp": 1712846772
    },
    {
        "content": "<p>what I mean is that for the second lemma, you need to figure out what the induction argument looks like</p>",
        "id": 432723039,
        "sender_full_name": "Yong Kiam",
        "timestamp": 1712846790
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"234226\">Yong Kiam</span> <a href=\"#narrow/stream/238552-Beginner-Questions/topic/using.2Funfolding.20assms/near/432723039\">said</a>:</p>\n<blockquote>\n<p>what I mean is that for the second lemma, you need to figure out what the induction argument looks like</p>\n</blockquote>\n<p>Well, I think it makes sense to be  <code>ns r</code> because it is a nat constantly decreasing or maybe also the list of parties but I think it would be harder</p>",
        "id": 432724625,
        "sender_full_name": "Salvatore Francesco Rossetta",
        "timestamp": 1712847177
    },
    {
        "content": "<p>with <code>loop_o.induct</code> you're using the induction principle for <code>loop_o</code></p>\n<p>it's a similar idea: you need to figure out what assumptions you can/cannot add to the induction for it to go through</p>\n<p>it's always a fine balance between finding just the right induction</p>",
        "id": 432725875,
        "sender_full_name": "Yong Kiam",
        "timestamp": 1712847497
    },
    {
        "content": "<p>one thing you can try (not sure it works), do:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">assms</span>\n<span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">induction</span><span class=\"w\"> </span><span class=\"ow\">....</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>in the case that fails, figure out what goes wrong when you try to apply the induction hypothesis</p>",
        "id": 432726603,
        "sender_full_name": "Yong Kiam",
        "timestamp": 1712847691
    },
    {
        "content": "<p>and one more comment: if you want to try this above, I recommend exploring the proof in a structured way instead of using an <code>apply</code>-style proof... it'll be much clearer where the proof is going wrong</p>",
        "id": 432729180,
        "sender_full_name": "Yong Kiam",
        "timestamp": 1712848418
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"234226\">Yong Kiam</span> <a href=\"#narrow/stream/238552-Beginner-Questions/topic/using.2Funfolding.20assms/near/432729180\">said</a>:</p>\n<blockquote>\n<p>and one more comment: if you want to try this above, I recommend exploring the proof in a structured way instead of using an <code>apply</code>-style proof... it'll be much clearer where the proof is going wrong</p>\n</blockquote>\n<p>Yes, I just thought that being the loop a simple n times application of a function that has a property, then it would be easy to use the induction within the function itself.<br>\nSo since my induction argument is decreasing, is there any way isabelle allows me to induct \"in reverse\"?</p>",
        "id": 432736645,
        "sender_full_name": "Salvatore Francesco Rossetta",
        "timestamp": 1712850438
    },
    {
        "content": "<p>I'm not sure what you mean here, but this just sounds like regular induction to me... I think <code>loop_o.induct</code> is what you want here (which you're already using)</p>",
        "id": 432812721,
        "sender_full_name": "Yong Kiam",
        "timestamp": 1712884721
    }
]