[
    {
        "content": "<p>I'm trying to do the \"Fold\" problem from Proof Ground 2019. I did the first 4/6 theorems, but I am confused as to what was intended. The description states:</p>\n<blockquote>\n<p>Using the universal property, prove that <code>filter</code> and <code>fold_left</code> can be rewritten as a fold.</p>\n</blockquote>\n<p>However, I do not use the universal property for this at all. In fact, I am confused as to how it's useful. Instead, I simply instantiate the existentials manually:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">filter_with_fold</span><span class=\"o\">:</span>\n  <span class=\"kp\">fixes</span> <span class=\"n\">p</span> <span class=\"o\">::</span> <span class=\"s\">\"'a ⇒ bool\"</span>\n  <span class=\"kp\">shows</span>            <span class=\"s\">\"∃a g. (∀xs. filter p xs = foldr g xs a)\"</span>\n  <span class=\"kp\">apply</span> <span class=\"o\">(</span><span class=\"n\">rule</span> <span class=\"n\">exI</span><span class=\"o\">[</span><span class=\"n\">of</span> <span class=\"o\">_</span> <span class=\"s\">\"[]\"</span><span class=\"o\">])</span>\n  <span class=\"kp\">apply</span> <span class=\"o\">(</span><span class=\"n\">rule</span> <span class=\"n\">exI</span><span class=\"o\">[</span><span class=\"n\">of</span> <span class=\"o\">_</span> <span class=\"s\">\"λx ys. if p x then x # ys else ys\"</span><span class=\"o\">])</span>\n  <span class=\"kp\">apply</span> <span class=\"o\">(</span><span class=\"n\">rule</span> <span class=\"n\">allI</span><span class=\"o\">)</span>\n  <span class=\"n\">subgoal</span> <span class=\"kp\">for</span> <span class=\"n\">xs</span>\n    <span class=\"kp\">apply</span> <span class=\"o\">(</span><span class=\"n\">induction</span> <span class=\"n\">xs</span><span class=\"o\">)</span>\n    <span class=\"k\">by</span> <span class=\"n\">auto</span>\n  <span class=\"k\">done</span>\n</code></pre></div>\n<p>Is it just poor wording of the problem, or is there a clever solution I'm not seeing?</p>",
        "id": 243590353,
        "sender_full_name": "Jakub Kądziołka",
        "timestamp": 1624403710
    },
    {
        "content": "<p>Well, that's how <em>Sledgehammer Squad</em> did it (the team consisting of <span class=\"user-mention\" data-user-id=\"324415\">@Peter Lammich</span> and me):</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">filter_with_fold</span><span class=\"o\">:</span>\n  <span class=\"kp\">fixes</span> <span class=\"n\">p</span> <span class=\"o\">::</span> <span class=\"s\">\"'a ⇒ bool\"</span>\n  <span class=\"kp\">shows</span> <span class=\"s\">\"∃a g. (∀xs. filter p xs = foldr g xs a)\"</span>\n  <span class=\"kp\">apply</span> <span class=\"o\">(</span><span class=\"n\">rule</span> <span class=\"n\">exI</span><span class=\"o\">[</span><span class=\"kp\">where</span> <span class=\"n\">x</span><span class=\"o\">=</span><span class=\"s\">\"[]\"</span><span class=\"o\">])</span>\n  <span class=\"kp\">apply</span> <span class=\"o\">(</span><span class=\"n\">rule</span> <span class=\"n\">exI</span><span class=\"o\">[</span><span class=\"kp\">where</span> <span class=\"n\">x</span><span class=\"o\">=</span><span class=\"s\">\"λx xs. if p x then x#xs else xs\"</span><span class=\"o\">])</span>\n  <span class=\"kp\">apply</span> <span class=\"n\">clarify</span>\n  <span class=\"kp\">apply</span> <span class=\"o\">(</span><span class=\"n\">rule</span> <span class=\"n\">universal_property_foldI2</span><span class=\"o\">)</span>\n  <span class=\"kp\">apply</span> <span class=\"n\">auto</span>\n  <span class=\"k\">done</span>\n</code></pre></div>",
        "id": 243626819,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1624440612
    },
    {
        "content": "<p>Actually, pretty sure it was Peter who wrote this.</p>",
        "id": 243626878,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1624440651
    }
]