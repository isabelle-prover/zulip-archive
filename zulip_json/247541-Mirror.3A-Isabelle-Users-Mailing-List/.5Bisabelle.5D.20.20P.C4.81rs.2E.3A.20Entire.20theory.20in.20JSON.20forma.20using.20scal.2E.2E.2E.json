[
    {
        "content": "<p>From: Alex Meyer &lt;<a href=\"mailto:alex153@outlook.lv\">alex153@outlook.lv</a>&gt;<br>\nTo be sure - the JSON tree of term object is not AST either:</p>\n<p>code:</p>\n<p>val term = Term(ctxt, \"x+0 = (y::nat)*1\")<br>\n    val jsonString2 = write(term)<br>\n    println(jsonString2)</p>\n<p>gives the structure that does not resmble AST, there is no evidence, that this term contains some structure, syntax tree, subelements:</p>\n<p>{<br>\n    \"mlValue\": {<br>\n        \"id\": {<br>\n            \"_fun\": {},<br>\n            \"_ec\": {},<br>\n            \"_arg\": null,<br>\n            \"_xform\": 2<br>\n        }<br>\n    },<br>\n    \"isabelle\": {<br>\n        \"setup\": {<br>\n            \"isabelleHome\": {<br>\n                \"fs\": {<br>\n                    \"provider\": {}<br>\n                },<br>\n                \"type\": {},<br>\n                \"root\": \"C:\\\\\",<br>\n                \"path\": \"C:\\\\Homes\\\\Isabelle2020\\\\Isabelle2020\"<br>\n            },<br>\n            \"logic\": \"HOL\",<br>\n            \"workingDirectory\": {<br>\n                \"fs\": {<br>\n                    \"provider\": {}<br>\n                },<br>\n                \"type\": {},<br>\n                \"root\": \"\",<br>\n                \"path\": \"\"<br>\n            },<br>\n            \"sessionRoots\": [],<br>\n            \"build\": false,<br>\n            \"verbose\": false,<br>\n            \"isabelleCommandHandler\": {}<br>\n        }<br>\n    },<br>\n    \"ec\": {}<br>\n}</p>\n<p>It was my expectation that Term object will have this structure (tree like structure) over which I could wander and build up my AST or let JSON serializer do it for me in default manner.</p>\n<p>OK, I studying this, but - if there is quick suggestion, then it would be nice to hear.</p>\n<p>A.</p>\n<hr>\n<p>No: Alex Meyer<br>\nNosūtīts: svētdiena, 2021. gada 14. marts 18:38<br>\nKam: Isabelle Users &lt;<a href=\"mailto:isabelle-users@cl.cam.ac.uk\">isabelle-users@cl.cam.ac.uk</a>&gt;<br>\nTēma: Entire theory in JSON forma using scala-isabelle?</p>\n<p>I had this question <a href=\"https://lists.cam.ac.uk/pipermail/cl-isabelle-users/2021-January/msg00187.html\">https://lists.cam.ac.uk/pipermail/cl-isabelle-users/2021-January/msg00187.html</a> at the end of January, and there where some follow-up discussion in February and scala-isabelle emerged as fine library for this.</p>\n<p>I had quick idea to get theory (as isabelle AST) in JSON format and for that  tried the code:</p>\n<p>val ctxt = Context(\"HOL.Imperative_HOL.ex.Imperative_Quicksort\")</p>\n<p>import net.liftweb.json._<br>\nimport net.liftweb.json.Serialization.write</p>\n<p>implicit val formats = net.liftweb.json.DefaultFormatsval jsonString = write(ctxt)<br>\nprintln(\"before jsonString\")<br>\nprintln(jsonString)<br>\nprintln(\"after jsonString\")</p>\n<p>but the output it scarce (my full stackoverflow question is <a href=\"https://stackoverflow.com/questions/66626741/isabelle-hol-theory-hol-imperative-hol-ex-imperative-quicksort-as-json-with-sc\">https://stackoverflow.com/questions/66626741/isabelle-hol-theory-hol-imperative-hol-ex-imperative-quicksort-as-json-with-sc</a>):</p>\n<p>before jsonString<br>\n{\"mlValue\":{\"id\":{\"_fun\":{},\"_ec\":{},\"_arg\":null,\"_xform\":2}}}<br>\nafter jsonString</p>\n<p>Maybe I a overstretching the framework (error about which I have been extensively warned in the mentioned thread), but just quick qustion - is it possible to get AST JSON tree for the entire theory in scala-isabelle?</p>\n<p>The quick thought is that I can load theory in string and then try to load it like term in the conext that is preloaded by the same theory. But maybe it is not good ide.</p>\n<p>I am reading documentation, experimenting, doing some reasoning, etc.</p>\n<p>But maybe there is answer in couple of words that can shortcut my path?</p>\n<p>Alex</p>",
        "id": 230254044,
        "sender_full_name": "Email Gateway",
        "timestamp": 1615740896
    }
]