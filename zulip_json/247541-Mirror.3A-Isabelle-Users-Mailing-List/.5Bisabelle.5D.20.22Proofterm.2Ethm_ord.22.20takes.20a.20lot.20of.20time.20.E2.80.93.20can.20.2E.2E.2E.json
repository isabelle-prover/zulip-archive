[
    {
        "content": "<p>From: Manuel Eberl &lt;<a href=\"mailto:manuel@pruvisto.org\">manuel@pruvisto.org</a>&gt;<br>\nHello,</p>\n<p>I am currently working on a project where I have to plug a <em>lot</em> of <br>\ntheorems together (using Thm.implies_elim). \"A lot\" is about 6 million.</p>\n<p>I noticed that the larger propositions of the theorems get, the slower <br>\neverything gets. One optimisation I therefore did was to introduce local <br>\ndefinitions (with Local_Defs.define).</p>\n<p>I then noticed that a lot of time was being spent taking care of the <br>\nhyps of the theorems when they are combined, so I did some preprocessing <br>\nto make sure that the \"hyps\" lists of all the theorems are <br>\npointer-equal. That already helped a lot.</p>\n<p>Now it seems that the majority (60%) of the time is spent in these two <br>\nfunctions:</p>\n<p>13627 Proofterm.thm_ord-(2)<br>\n        17530 Ord_List.union(3)unio(2)</p>\n<p>I suspect that these both come from Proofterm.unions_thms, which in turn <br>\nprobably comes from \"Proofterm.fulfill_norm_proof\".</p>\n<p>Is there anything I can do to make this any faster?</p>\n<p>If not, it's not a deal breaker (the code is still acceptably fast), but <br>\nI was still a bit perplexed at the factor 14 slowdown I got when I used <br>\nactual terms instead of just dummy variables for everything…</p>\n<p>Cheers,</p>\n<p>Manuel</p>",
        "id": 283126010,
        "sender_full_name": "Email Gateway",
        "timestamp": 1653080442
    }
]