[
    {
        "content": "<p>From: \"Max W. Haslbeck\" &lt;<a href=\"mailto:max.haslbeck@gmx.de\">max.haslbeck@gmx.de</a>&gt;<br>\nHi,</p>\n<p>Consider the following .thy file (I’m using Isabelle2020 and an up to date AFP-2020 (rev: c645808bafa7)):</p>\n<div class=\"codehilite\"><pre><span></span><code>theory Scratch\n  imports\n    &quot;HOL-Library.Numeral_Type&quot;\n    &quot;Containers.Containers&quot;\nbegin\n\ndefinition card_test :: &quot;&#39;a set ⇒ nat&quot; where\n &quot;card_test = card&quot;\n\nexport_code card_test in Haskell module_name Test\n\nend\n</code></pre></div>\n\n\n<p>The generated Haskell module Test.hs contains the following code equations:</p>\n<div class=\"codehilite\"><pre><span></span><code>…\ncard :: forall a. (Card_UNIV a) =&gt; Set a -&gt; Nat;\ncard = card;\n\ncard_test :: Set Nat -&gt; Nat;\ncard_test = card;\n...\n</code></pre></div>\n\n\n<p>The programming language chosen in the <code>export_code</code> command doesn’t seem to matter. You will get also get a broken definition of <code>card</code>. Removing one of the two imports leads to working exported code. Importing <code>HOL-Library.Cardinality</code> (which is the only import of <code>HOL-Library.Numeral_Type</code>) instead of <code>HOL-Library.Numeral_Type</code> also leads to working code equations.</p>\n<p>This problem came up when working with IsaFoR. IsaFoR uses Containers for code export and imports <code>HOL-Library.Numeral_Type</code> [1,2] at some point by importing AFP/Collections. </p>\n<p>Any help or pointers on what’s going on here would be appreciated.</p>\n<p>Gruß<br>\nMax</p>\n<p>[1]: <a href=\"http://cl2-informatik.uibk.ac.at/rewriting/mercurial.cgi/IsaFoR/file/e4b1e20b0880/thys/Proof_Checker/Container_Setup.thy\">http://cl2-informatik.uibk.ac.at/rewriting/mercurial.cgi/IsaFoR/file/e4b1e20b0880/thys/Proof_Checker/Container_Setup.thy</a> &lt;<a href=\"http://cl2-informatik.uibk.ac.at/rewriting/mercurial.cgi/IsaFoR/file/e4b1e20b0880/thys/Proof_Checker/Container_Setup.thy\">http://cl2-informatik.uibk.ac.at/rewriting/mercurial.cgi/IsaFoR/file/e4b1e20b0880/thys/Proof_Checker/Container_Setup.thy</a>&gt;<br>\n[2]: Container_Setup -&gt; TA.Tree_Automata_Det_Container -&gt; TA.Tree_Automata_Det_Impl -&gt; TA.Tree_Automata_Wit_Impl -&gt; TA.Tree_Automata_Autoref_Setup -&gt; Collections.Refine_Dflt -&gt; Collections.GenCF -&gt; Collections.Impl_Array_Hash_Map -&gt; \"Collections.HashCode\" -&gt; \"Native_Word.Uint32\" -&gt; \"Native_Word.Code_Target_Word_Base\" -&gt; \"HOL-Word.Word\" -&gt; \"HOL-Library.Type_Length\" -&gt; \"HOL-Library.Numeral_Type\"</p>",
        "id": 206684984,
        "sender_full_name": "Email Gateway",
        "timestamp": 1597233622
    },
    {
        "content": "<p>From: \"Max W. Haslbeck\" &lt;<a href=\"mailto:max.haslbeck@gmx.de\">max.haslbeck@gmx.de</a>&gt;<br>\nHi,</p>\n<p>Consider the following .thy file (I’m using Isabelle2020 and an up to date AFP-2020 (rev: c645808bafa7)):</p>\n<div class=\"codehilite\"><pre><span></span><code>theory Scratch\n  imports\n    &quot;HOL-Library.Numeral_Type&quot;\n    &quot;Containers.Containers&quot;\nbegin\n\ndefinition card_test :: &quot;&#39;a set ⇒ nat&quot; where\n &quot;card_test = card&quot;\n\nexport_code card_test in Haskell module_name Test\n\nend\n</code></pre></div>\n\n\n<p>The generated Haskell module Test.hs contains the following code equations:</p>\n<div class=\"codehilite\"><pre><span></span><code>…\ncard :: forall a. (Card_UNIV a) =&gt; Set a -&gt; Nat;\ncard = card;\n\ncard_test :: Set Nat -&gt; Nat;\ncard_test = card;\n...\n</code></pre></div>\n\n\n<p>The programming language chosen in the <code>export_code</code> command doesn’t seem to matter. You will get also get a broken definition of <code>card</code>. Removing one of the two imports leads to working exported code. Importing <code>HOL-Library.Cardinality</code> (which is the only import of <code>HOL-Library.Numeral_Type</code>) instead of <code>HOL-Library.Numeral_Type</code> also leads to working code equations.</p>\n<p>This problem came up when working with IsaFoR. IsaFoR uses Containers for code export and imports <code>HOL-Library.Numeral_Type</code> [1,2] at some point by importing AFP/Collections. </p>\n<p>Any help or pointers on what’s going on here would be appreciated.</p>\n<p>Gruß<br>\nMax</p>\n<p>[1]: <a href=\"http://cl2-informatik.uibk.ac.at/rewriting/mercurial.cgi/IsaFoR/file/e4b1e20b0880/thys/Proof_Checker/Container_Setup.thy\">http://cl2-informatik.uibk.ac.at/rewriting/mercurial.cgi/IsaFoR/file/e4b1e20b0880/thys/Proof_Checker/Container_Setup.thy</a> &lt;<a href=\"http://cl2-informatik.uibk.ac.at/rewriting/mercurial.cgi/IsaFoR/file/e4b1e20b0880/thys/Proof_Checker/Container_Setup.thy\">http://cl2-informatik.uibk.ac.at/rewriting/mercurial.cgi/IsaFoR/file/e4b1e20b0880/thys/Proof_Checker/Container_Setup.thy</a>&gt;<br>\n[2]: Container_Setup -&gt; TA.Tree_Automata_Det_Container -&gt; TA.Tree_Automata_Det_Impl -&gt; TA.Tree_Automata_Wit_Impl -&gt; TA.Tree_Automata_Autoref_Setup -&gt; Collections.Refine_Dflt -&gt; Collections.GenCF -&gt; Collections.Impl_Array_Hash_Map -&gt; \"Collections.HashCode\" -&gt; \"Native_Word.Uint32\" -&gt; \"Native_Word.Code_Target_Word_Base\" -&gt; \"HOL-Word.Word\" -&gt; \"HOL-Library.Type_Length\" -&gt; \"HOL-Library.Numeral_Type\"</p>",
        "id": 206685307,
        "sender_full_name": "Email Gateway",
        "timestamp": 1597233894
    },
    {
        "content": "<p>From: Andreas Lochbihler &lt;<a href=\"mailto:mail@andreas-lochbihler.de\">mail@andreas-lochbihler.de</a>&gt;<br>\nDear Max,</p>\n<p>Thanks for the report. Containers non-monotonically changes the code setup for card, <br>\nfinite and Set.member. However, HOL-Library.Numeral_Type imports HOL-Library.Cardinality <br>\nand therefore all the code declarations from Cardinality are back in place. You'd have to <br>\nmanually remove the offending declarations after the theories have been joined, e.g. with <br>\nthe following</p>\n<p>lemma [code_unfold del, symmetric, code_post del]:<br>\n   \"x ∈ set xs ≡ List.member xs x\"<br>\n   by(simp add: List.member_def)</p>\n<p>lemma [code_unfold del, symmetric, code_post del]:<br>\n   \"finite ≡ Cardinality.finite'\" by(simp)</p>\n<p>lemma [code_unfold del, symmetric, code_post del]:<br>\n   \"card ≡ Cardinality.card'\" by simp</p>\n<p>Unfortunately, there's not much I can do about this right now due to how code equations <br>\nare merged when theories are joined. You'll just have remove those equations again and again.</p>\n<p>Hope this helps<br>\nAndreas</p>",
        "id": 207069123,
        "sender_full_name": "Email Gateway",
        "timestamp": 1597580125
    },
    {
        "content": "<p>From: Florian Haftmann &lt;<a href=\"mailto:florian.haftmann@informatik.tu-muenchen.de\">florian.haftmann@informatik.tu-muenchen.de</a>&gt;<br>\nIf your applications needs both those sessions with a conflicting code<br>\nsetup, it's best to provide your individual theory within your<br>\napplication session which joins the code setup as seen above and base<br>\nyour application entirely on that theory.</p>\n<p>Hope this helps,<br>\n    Florian<br>\n<a href=\"/user_uploads/14278/eMrCVrfpN5wMC-p3Oo-5EPsj/signature.asc\">signature.asc</a></p>",
        "id": 207072636,
        "sender_full_name": "Email Gateway",
        "timestamp": 1597586249
    }
]