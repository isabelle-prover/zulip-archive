[
    {
        "content": "<p>From: Mario Carneiro &lt;<a href=\"mailto:di.gama@gmail.com\">di.gama@gmail.com</a>&gt;<br>\nIs it possible to access the current proof state (of type \"state\" or<br>\n\"goal\") from an ML or ML_val block? For example:</p>\n<p>theory Scratch<br>\n  imports Pure<br>\nbegin</p>\n<p>lemma ex:<br>\n  assumes \"PROP P ⟹ PROP Q\" and \"PROP P\"<br>\n  shows \"PROP Q\"<br>\n  ML_val‹<br>\nIsar_Cmd.ml_diag true ‹goal› (* returns a transition -&gt; transition but I'm<br>\nnot sure how to apply it to the current proof context *)<br>\n›</p>\n<p>Mario</p>",
        "id": 206255187,
        "sender_full_name": "Email Gateway",
        "timestamp": 1596806178
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nLike this:</p>\n<p>val ctxt = @{context};</p>\n<p>See also the various explanations and examples in the \"implementation\" manual.</p>\n<p>You can forget about command transitions like Isar_Cmd.ml_diag: that is only<br>\nrelevant for composing new command transactions, when defining outer syntax<br>\ncommands.</p>\n<p>Makarius</p>",
        "id": 206272434,
        "sender_full_name": "Email Gateway",
        "timestamp": 1596814787
    },
    {
        "content": "<p>From: Mario Carneiro &lt;<a href=\"mailto:di.gama@gmail.com\">di.gama@gmail.com</a>&gt;<br>\nI was aware of the @{context} command, but it seems like this only gives<br>\nyou the \"Proof.context\" type. Is there a way to get a \"state\" or \"goal\" out<br>\nof that, as if I was in an Isar tactic? For example, in that context I<br>\nbelieve there should be some goal state theorem saying that ([PROP P ⟹ PROP<br>\nQ; PROP P] ⟹ PROP Q) ⟹ ?thesis or something to that effect, where Isar<br>\ncommands modify the left hand side of this implication. How do I access<br>\nthis theorem from the current context?</p>\n<p>Mario</p>",
        "id": 206278190,
        "sender_full_name": "Email Gateway",
        "timestamp": 1596817611
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nOn 07/08/2020 18:26, Mario Carneiro wrote:</p>\n<blockquote>\n<p>I was aware of the @{context} command, but it seems like this only gives<br>\nyou the \"Proof.context\" type.</p>\n</blockquote>\n<p>This thing is called \"ML antiquotation\", not command. You can figure out the<br>\nformal kind (and name) of everything by C-hover in the Prover IDE.</p>\n<blockquote>\n<p>Is there a way to get a \"state\" or \"goal\" out&gt; of that, as if I was in an<br>\nIsar tactic? For example, in that context I<br>\nbelieve there should be some goal state theorem saying that ([PROP P ⟹ PROP<br>\nQ; PROP P] ⟹ PROP Q) ⟹ ?thesis or something to that effect, where Isar<br>\ncommands modify the left hand side of this implication. How do I access<br>\nthis theorem from the current context?</p>\n</blockquote>\n<p>Goal refinement operations are called \"proof method\" or just \"method\" in Isar,<br>\nnot \"tactic\" --- that is a more low-level concept, before the emergence of<br>\nstructured reasoning in Isar.</p>\n<p>An Isar command like 'apply' takes a proof method as argument, and modifies<br>\nthe proof state in the manner of goal-directed reasoning, as you have sketched<br>\nabove.</p>\n<p>You can experiment with the mechanics of it, by using the 'ML_val' command<br>\ntogether with antiquotation @{Isar.goal} (or @{Isar.state} if you really want<br>\nto have the full \"toplevel\" state in your hand).</p>\n<p>You can read more on it and try it interactively as follows:</p>\n<p>isabelle jedit src/Doc/Implementation/Isar.thy</p>\n<p>The PDF version of this material is available as \"implementation\" entry in the<br>\nDocumentation panel of Isabelle/jEdit, or via \"isabelle doc implementation\".</p>\n<p>Makarius</p>",
        "id": 206282822,
        "sender_full_name": "Email Gateway",
        "timestamp": 1596819862
    }
]