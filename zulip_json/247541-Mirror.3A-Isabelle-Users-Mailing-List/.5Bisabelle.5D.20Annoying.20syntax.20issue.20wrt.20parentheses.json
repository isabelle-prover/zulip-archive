[
    {
        "content": "<p>From: Angeliki Koutsoukou Argyraki &lt;<a href=\"mailto:ak2110@cam.ac.uk\">ak2110@cam.ac.uk</a>&gt;<br>\nDear all,</p>\n<p>this is a very minor thing indeed (and similar instances of this have caught my attention many times before)<br>\nbut I think it may be worth looking into:</p>\n<p>Sometimes, and in particular very often when summations are involved,<br>\nthe user is expected to put parentheses where their lack wouldn't cause any ambiguity.</p>\n<p>Here is a striking example.</p>\n<p>This gives an error:<br>\n \" a ≤ ∑x ∈X. f x  \" (\"inner syntax error/failed to parse prop\")</p>\n<p>while this is fine:</p>\n<p>\" a ≤  ( ∑x ∈X. f x )  \"</p>\n<p>One wouldn't/ shouldn't expect the first version to be problematic as the lack of parentheses<br>\nwould not be causing any ambiguity.</p>\n<p>Any thoughts?</p>\n<p>Thanks,<br>\nAngeliki</p>",
        "id": 283789964,
        "sender_full_name": "Email Gateway",
        "timestamp": 1653418441
    },
    {
        "content": "<p>From: Alex Weisberger &lt;<a href=\"mailto:alex.m.weisberger@gmail.com\">alex.m.weisberger@gmail.com</a>&gt;<br>\nI remember being surprised that if and case expressions require parentheses<br>\nlike this as well, and reading that it has to do operator / syntax<br>\nprecedence:<br>\n<a href=\"https://stackoverflow.com/a/60466980\">https://stackoverflow.com/a/60466980</a>.</p>\n<p>Surrounding ambiguous expressions with parens seems reasonable. It might be<br>\nunambiguous to the eye, but source code has to be parsed by a machine.</p>",
        "id": 283822698,
        "sender_full_name": "Email Gateway",
        "timestamp": 1653438168
    },
    {
        "content": "<p>From: Michael Norrish &lt;<a href=\"mailto:cl-isabelle-users@lists.cam.ac.uk\">cl-isabelle-users@lists.cam.ac.uk</a>&gt;<br>\nThough possible in principle, it’s very hard to write the context-free grammar that would allow this.</p>\n<p>It is something that otherwise annoyingly weak precedence parsers can give you.</p>\n<p>Michael<br>\n<a href=\"/user_uploads/14278/Bbz9RTDCiCXWZjCKt5PnhicW/signature.asc\">signature.asc</a></p>",
        "id": 283824112,
        "sender_full_name": "Email Gateway",
        "timestamp": 1653439698
    },
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\nAs two other readers already pointed out, this is a grammar/parser issue. I made <br>\nthis choice intentionally, but what my intentions where I cannot remember. The <br>\nchoice is unform (eg f x = (if ...), P --&gt; (ALL x. ...) etc) and I was certainly <br>\naware of the need for parentheses. In principle, an Earley parser can handle <br>\nthis w/o parentheses, and Isabelle uses Earley, but it may just be that the <br>\nrequired grammar is the issue (as Michael mentioned).</p>\n<p>Tobias<br>\n<a href=\"/user_uploads/14278/ThDcIJgfqaq2h3IjnQZdJYq8/smime.p7s\">smime.p7s</a></p>",
        "id": 283839719,
        "sender_full_name": "Email Gateway",
        "timestamp": 1653457276
    },
    {
        "content": "<p>From: Stepan Holub &lt;<a href=\"mailto:holub@karlin.mff.cuni.cz\">holub@karlin.mff.cuni.cz</a>&gt;<br>\nAll those binders are very weak, with preference 10.</p>\n<p>It would be enough to increase the preference. For example, one needs at <br>\nleast 51 to beat ≤</p>\n<p>See:</p>\n<p>abbreviation Sum (\"MYSUM\")<br>\n   where \"MYSUM ≡ sum (λx. x)\"</p>\n<p>syntax<br>\n   \"_sum\" :: \"pttrn ⇒ 'a set ⇒ 'b ⇒ 'b::comm_monoid_add\" <br>\n(\"(2MYSUM(_/∈_)./ _)\" [0, 51, 10] 51)</p>\n<p>lemma \" a ≤ MYSUM x ∈X. f x\"</p>\n<p>For implication, at least 25 is needed:</p>\n<p>definition myAll :: \"('a ⇒ bool) ⇒ bool\"  (binder \"MYALL\" 25)<br>\n   where \"myAll P ≡ (P = (λx. True))\"</p>\n<p>lemma \"P ⟶ MYALL x. Q x\"</p>\n<p>Stepan</p>",
        "id": 283842439,
        "sender_full_name": "Email Gateway",
        "timestamp": 1653460189
    },
    {
        "content": "<p>From: Michael Norrish &lt;<a href=\"mailto:cl-isabelle-users@lists.cam.ac.uk\">cl-isabelle-users@lists.cam.ac.uk</a>&gt;<br>\nThis approach will lead to undesired behaviour if the binder/quantifier is to the left of the infix.   In particular:</p>\n<p>Binder x. foo(x) &lt;= z</p>\n<p>will put the &lt;= as the top level operator.</p>\n<p>Michael</p>",
        "id": 283952381,
        "sender_full_name": "Email Gateway",
        "timestamp": 1653520789
    },
    {
        "content": "<p>From: Stepan Holub &lt;<a href=\"mailto:holub@karlin.mff.cuni.cz\">holub@karlin.mff.cuni.cz</a>&gt;</p>\n<blockquote>\n<p>This approach will lead to undesired behaviour if the <br>\nbinder/quantifier is to the left of the infix.   In particular:</p>\n<p>Binder x. foo(x) &lt;= z</p>\n<p>will put the &lt;= as the top level operator.</p>\n<p>Michael<br>\n</p>\n</blockquote>\n<p>Michael, not sure what you mean. This works fine:</p>\n<p>definition myAll :: \"('a ⇒ bool) ⇒ bool\"  (binder \"MYALL\" 25)<br>\n    where \"myAll P ≡ (P = (λx. True))\"</p>\n<p>lemma \"(∀ x. x ≤ y) ⟶ MYALL x. x ≤ y\"<br>\n   by (simp add: myAll_def)</p>\n<p>But to be clear, I do not suggest any change. Just wanted to Illustrate <br>\nthe behavior.<br>\nAny order of preferences will require parentheses in some cases, that is <br>\nwhy we have them.</p>\n<p>For example, low preference of ∀ makes sense, compare</p>\n<p>lemma: \"∀ x. x ≤ y ⟶ x ≤ y\"<br>\n   by simp</p>\n<p>lemma: \"MYALL x. (x ≤ y ⟶ x ≤ y)\"<br>\n   by (simp add: myAll_def)</p>\n<p>(In the original case of sum, higher preference maybe makes better sense.)</p>\n<p>Best</p>\n<p>Stepan</p>\n<blockquote>\n<p>*From: *cl-isabelle-users-request@lists.cam.ac.uk <br>\n&lt;<a href=\"mailto:cl-isabelle-users-request@lists.cam.ac.uk\">cl-isabelle-users-request@lists.cam.ac.uk</a>&gt; on behalf of Stepan Holub <br>\n&lt;<a href=\"mailto:holub@karlin.mff.cuni.cz\">holub@karlin.mff.cuni.cz</a>&gt;<br>\n*Date: *Wednesday, 25 May 2022 at 16:30<br>\n*To: *cl-isabelle-users@lists.cam.ac.uk <br>\n&lt;<a href=\"mailto:cl-isabelle-users@lists.cam.ac.uk\">cl-isabelle-users@lists.cam.ac.uk</a>&gt;<br>\n*Subject: *Re: [isabelle] Annoying syntax issue wrt parentheses</p>\n<p>All those binders are very weak, with preference 10.</p>\n<p>It would be enough to increase the preference. For example, one needs at<br>\nleast 51 to beat ≤</p>\n<p>See:</p>\n<p>abbreviation Sum (\"MYSUM\")<br>\n   where \"MYSUM ≡ sum (λx. x)\"</p>\n<p>syntax<br>\n   \"_sum\" :: \"pttrn ⇒'a set ⇒'b ⇒'b::comm_monoid_add\"<br>\n(\"(2MYSUM(_/∈_)./ _)\" [0, 51, 10] 51)</p>\n<p>lemma \" a ≤ MYSUM x ∈X. f x\"</p>\n<p>For implication, at least 25 is needed:</p>\n<p>definition myAll :: \"('a ⇒bool) ⇒bool\"  (binder \"MYALL\" 25)<br>\n   where \"myAll P ≡ (P = (λx. True))\"</p>\n<p>lemma \"P ⟶MYALL x. Q x\"</p>\n<p>Stepan</p>\n<p>On 25-May-22 7:40 AM, Tobias Nipkow wrote:</p>\n<blockquote>\n<p>As two other readers already pointed out, this is a grammar/parser<br>\nissue. I made this choice intentionally, but what my intentions where<br>\nI cannot remember. The choice is unform (eg f x = (if ...), P --&gt; (ALL<br>\nx. ...) etc) and I was certainly aware of the need for parentheses. In<br>\nprinciple, an Earley parser can handle this w/o parentheses, and<br>\nIsabelle uses Earley, but it may just be that the required grammar is<br>\nthe issue (as Michael mentioned).</p>\n<p>Tobias<br>\n</p>\n</blockquote>\n<p>On 24/05/2022 20:53, Angeliki Koutsoukou Argyraki wrote:</p>\n<blockquote>\n<blockquote>\n<p>Dear all,</p>\n<p>this is a very minor thing indeed (and similar instances of this have<br>\ncaught my attention many times before)<br>\nbut I think it may be worth looking into:</p>\n<p>Sometimes, and in particular very often when summations are involved,<br>\nthe user is expected to put parentheses where their lack wouldn't<br>\ncause any ambiguity.</p>\n<p>Here is a striking example.</p>\n<p>This gives an error:<br>\n  \" a ≤ ∑x ∈X. f x  \" (\"inner syntax error/failed to parse prop\")</p>\n<p>while this is fine:</p>\n<p>\" a ≤  ( ∑x ∈X. f x )  \"</p>\n<p>One wouldn't/ shouldn't expect the first version to be problematic as<br>\nthe lack of parentheses<br>\nwould not be causing any ambiguity.</p>\n<p>Any thoughts?</p>\n<p>Thanks,<br>\nAngeliki</p>\n</blockquote>\n</blockquote>\n<p>-- <br>\nTento e-mail byl zkontrolován na viry programem AVG.<br>\n<a href=\"https://aus01.safelinks.protection.outlook.com/?url=http%3A%2F%2Fwww.avg.cz%2F&amp;data=05%7C01%7Cmichael.norrish%40anu.edu.au%7Cc24731260c694275eccf08da3e17f50d%7Ce37d725cab5c46249ae5f0533e486437%7C0%7C0%7C637890570010616781%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C3000%7C%7C%7C&amp;sdata=sdb5INUlWrxARAdrh%2F%2BQkTBcYZSnDv3VbSNczoS6QSg%3D&amp;reserved=0\">https://aus01.safelinks.protection.outlook.com/?url=http%3A%2F%2Fwww.avg.cz%2F&amp;data=05%7C01%7Cmichael.norrish%40anu.edu.au%7Cc24731260c694275eccf08da3e17f50d%7Ce37d725cab5c46249ae5f0533e486437%7C0%7C0%7C637890570010616781%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C3000%7C%7C%7C&amp;sdata=sdb5INUlWrxARAdrh%2F%2BQkTBcYZSnDv3VbSNczoS6QSg%3D&amp;reserved=0</a> <br>\n&lt;<a href=\"https://aus01.safelinks.protection.outlook.com/?url=http%3A%2F%2Fwww.avg.cz%2F&amp;data=05%7C01%7Cmichael.norrish%40anu.edu.au%7Cc24731260c694275eccf08da3e17f50d%7Ce37d725cab5c46249ae5f0533e486437%7C0%7C0%7C637890570010616781%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C3000%7C%7C%7C&amp;sdata=sdb5INUlWrxARAdrh%2F%2BQkTBcYZSnDv3VbSNczoS6QSg%3D&amp;reserved=0\">https://aus01.safelinks.protection.outlook.com/?url=http%3A%2F%2Fwww.avg.cz%2F&amp;data=05%7C01%7Cmichael.norrish%40anu.edu.au%7Cc24731260c694275eccf08da3e17f50d%7Ce37d725cab5c46249ae5f0533e486437%7C0%7C0%7C637890570010616781%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C3000%7C%7C%7C&amp;sdata=sdb5INUlWrxARAdrh%2F%2BQkTBcYZSnDv3VbSNczoS6QSg%3D&amp;reserved=0</a>&gt;</p>\n</blockquote>",
        "id": 283978178,
        "sender_full_name": "Email Gateway",
        "timestamp": 1653550254
    },
    {
        "content": "<p>From: Michael Norrish &lt;<a href=\"mailto:cl-isabelle-users@lists.cam.ac.uk\">cl-isabelle-users@lists.cam.ac.uk</a>&gt;<br>\nThe latter is exactly what I meant by “undesired\": you had to parenthesise the body of the term under MYALL.</p>\n<p>Michael<br>\n<a href=\"/user_uploads/14278/dQgOuLyET6Kdb_hatKg3rxSq/signature.asc\">signature.asc</a></p>",
        "id": 284076945,
        "sender_full_name": "Email Gateway",
        "timestamp": 1653609869
    }
]