[
    {
        "content": "<p>From: Lawrence Paulson &lt;<a href=\"mailto:lp15@cam.ac.uk\">lp15@cam.ac.uk</a>&gt;<br>\nWe are allowed to use the “induction” (or “induct”) proof method when there are side formulas in the goal:</p>\n<p>lemma \"P l ⟹ l ∈ lists X ⟹ map f l ∈ lists (f ` X)\"<br>\n  apply (induction l)</p>\n<p>At least, it’s allowed if the induction rule comes from a datatype (here, “‘a list”). And occurrences of the induction variable are instantiated correctly in the resulting subgoals.</p>\n<p>But the analogous step not allowed if the induction rule comes from an inductive definition:</p>\n<p>lemma \"True ⟹ l ∈ lists X ⟹ map f l ∈ lists (f ` X)\"<br>\n  apply (induction l rule: lists.induct)</p>\n<p>Even though this side formula doesn’t mention the induction variable, the proof method still fails.</p>\n<p>The behaviour is identical in the current repository version and in Isabelle2021-01. Note that the induction rules lists.induct and list.induct differ in form, since with an inductive definition the rule has an explicit major premise.</p>\n<p>Larry</p>",
        "id": 303892425,
        "sender_full_name": "Email Gateway",
        "timestamp": 1665683551
    },
    {
        "content": "<p>From: Manuel Eberl &lt;<a href=\"mailto:manuel@pruvisto.org\">manuel@pruvisto.org</a>&gt;<br>\nI think the real difference is that induction rules that come from <br>\ninductive predicates are declared with \"consumes 1\". Thus, <br>\n\"lists.induct\" expects the <em>first</em> premise to be of the form \"_ ∈ lists _\".</p>\n<p>If you swap your two premises so that the \"l ∈ lists X\" is in the front <br>\neverything works.</p>\n<p>Cheers,</p>\n<p>Manuel</p>",
        "id": 303896546,
        "sender_full_name": "Email Gateway",
        "timestamp": 1665685091
    },
    {
        "content": "<p>From: Lawrence Paulson &lt;<a href=\"mailto:lp15@cam.ac.uk\">lp15@cam.ac.uk</a>&gt;<br>\nThanks for the explanation. This looks like an example of the difference between early Isabelle (where the required assumption could be grabbed from anywhere, as still happens with erule, and you can even backtrack on the choice) and Isar, where facts can be piped in from the previous step and must be used in order.</p>\n<p>Larry</p>",
        "id": 304000045,
        "sender_full_name": "Email Gateway",
        "timestamp": 1665742188
    }
]