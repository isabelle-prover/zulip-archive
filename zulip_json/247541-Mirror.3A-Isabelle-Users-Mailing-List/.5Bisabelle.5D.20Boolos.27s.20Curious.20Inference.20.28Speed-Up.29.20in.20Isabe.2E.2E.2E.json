[
    {
        "content": "<p>From: Jeffrey Ketland &lt;<a href=\"mailto:jeffreyketland@gmail.com\">jeffreyketland@gmail.com</a>&gt;<br>\nI thought I might pass on this Isabelle/HOL formalization of Boolos’s \"curious inference” to Isabelle users.</p>\n<p>In 1987, George Boolos gave an inference I, which is valid in first-order logic, but he noted that its shortest derivation, for the system he considered, is gigantc — e.g., it has at least 2^{2^{2^{…..^2}…..}}} symbols, where there are 65,536 iterations of exponentiation. The inference I is:</p>\n<p>A1: \"F(x, e) = s(e)\"<br>\n    A2: \"F(e, s(y)) = s(s(F(e, y)))\"<br>\n    A3: \"F(s(x), s(y)) = F(x, F(s(x), y))\"<br>\n    A4: \"D(e)\"<br>\n    A5: \"D(x) ⟶ D(s(x))”<br>\n    ----------------------<br>\n   Therefore: \"D(F(s(s(s(s(e)))), s(s(s(s(e))))))”</p>\n<p>Though this is formalized, one might think of “e” as 1, and “s” as the successor operation, and “F” as an Ackermann-like function which grows very rapidly. Then A4 and A5 say that the set denoted by “D” is inductive. We want to prove that the number F(s(s(s(s(e)))), s(s(s(s(e))))) is in the set D. However, this number is gigantic, and the size of the required derivation in then gigantic too. Roughly, the first-order derivation has to reduce the term \"F(s(s(s(s(e)))), s(s(s(s(e)))))” to a successor term (a numeral),</p>\n<p>F(s(s(s(s(e)))), s(s(s(s(e))))) = s(s(s( ….. (s (e))….)))</p>\n<p>But this is going to require a gigantic number of s’s! At least an exponential stack of 2, of height 65,536.<br>\nBoolos pointed out that there is a reasonably short second-order logic derivation, which would fit in a few pages, if fully formalized. This is an example of “speed-up”, an idea first noticed by Kurt Gödel in 1936. <br>\nBoolos called this a “curious inference”.</p>\n<p>[1] Boolos, G. 1987: “A Curious Inference”. Journal of Philosophical Logic.<br>\n<a href=\"https://www.jstor.org/stable/30226368?seq=1#metadata_info_tab_contents\">https://www.jstor.org/stable/30226368?seq=1#metadata_info_tab_contents</a></p>\n<p>I decided to see if I can put this into Isabelle/HOL and see if it can find the second-order derivation, so long as I used the right definitions. The main definition needed is: <br>\n   \"N = {x. (∀Y. (induct Y ⟶ x ∈ Y))}”,<br>\nwhere a set is called “inductive” if it contains e and is closed under s. So, N is “the intersection of all inductive sets”. The main idea of the second-order proof is to show, by a double induction, that if x and y are in N, then F(x, y) is also in N. It’s easy to show s(s(s(s(e)))) is in N. So, we conclude F(s(s(s(s(e)))), s(s(s(s(e))))) is also in N. And since it’s easy to show, by induction, that N is a subset of D, it follows that F(s(s(s(s(e)))), s(s(s(s(e))))) is in D, which is the conclusion. <br>\nWith some definitions and some coaxing, Isabelle finds the component derivations. <br>\nI used 14 lemmas to get the final conclusion.</p>\n<p>I didn’t realise this until yesterday, but I noticed the Boolos inference has also been put into MIZAR and OMEGA in 2007,</p>\n<p>[2] Benzmüller, C. &amp; Brown, C. 2007: “The curious inference of Boolos in MIZAR and OMEGA”, <br>\nIn Roman Matuszewski &amp; Anna Zalewska (eds.), From Insight to Proof -- Festschrift in Honour of Andrzej Trybulec. The University of Bialystok, Poland. pp. 299-388 (2007)<br>\n<a href=\"http://mizar.org/trybulec65/20.pdf\">http://mizar.org/trybulec65/20.pdf</a></p>\n<p>Since the Isabelle/HOL proof sketch is pretty short, I thought I’d post it here.</p>\n<p>—————<br>\ntheory Boolos imports Main<br>\nbegin<br>\ntext ‹Boolos's inference›<br>\nlocale bool_ax =<br>\n  fixes F :: \"'a × 'a ⇒ 'a\"<br>\n  fixes s :: \"'a ⇒ 'a\"<br>\n  fixes D :: \"'a ⇒ bool\"<br>\n  fixes e :: \"'a\"<br>\n  assumes A1: \"F(x, e) = s(e)\"<br>\n  and A2: \"F(e, s(y)) = s(s(F(e, y)))\"<br>\n  and A3: \"F(s(x), s(y)) = F(x, F(s(x), y))\"<br>\n  and A4: \"D(e)\"<br>\n  and A5: \"D(x) ⟶ D(s(x))\"<br>\ncontext bool_ax<br>\nbegin<br>\ndefinition (in bool_ax) induct :: \"'a set ⇒ bool\" <br>\n  where \"induct X ≡ e ∈ X ∧ (∀x. (x ∈ X ⟶ s(x) ∈ X))\"<br>\ndefinition (in bool_ax) N :: \"'a set\"<br>\n  where \"N = {x. (∀Y. (induct Y ⟶ x ∈ Y))}\"<br>\ndefinition (in bool_ax) P1 :: \"'a  ⇒ 'a ⇒ bool\"<br>\n  where \"P1 x y ≡ F(x,y) ∈ N\"<br>\ndefinition (in bool_ax) P2 :: \"'a ⇒ bool\"<br>\n  where \"P2 x ≡ N ⊆ {y. P1 x y}\"</p>\n<p>lemma lem1: \"induct X ⟶ N ⊆ X\" using N_def by auto<br>\nlemma lem2: \"induct N\" by (simp add: N_def induct_def)<br>\nlemma lem3: \"induct {x. D(x)}\" using A4 A5 induct_def by auto<br>\nlemma lem4: \"s(s(s(s(e)))) ∈ N\" using induct_def lem2 by auto</p>\n<p>lemma lem5: \"P1 e e\" using A1 P1_def induct_def lem2 by auto<br>\nlemma lem6: \"P1 e x ⟶ P1 e (s(x))\" using A2 P1_def induct_def lem2 by auto<br>\nlemma lem7: \"induct {x. P1 e x}\" using induct_def lem5 lem6 by auto</p>\n<p>lemma lem8: \"P1 (s(x)) e\" using A1 P1_def induct_def lem2 by auto<br>\nlemma lem9: \"P2 e\" by (simp add: P2_def lem1 lem7)<br>\nlemma lem10: \"P2 x ⟶ (∀y. (P1 (s(x)) y ⟶ P1 (s(x)) (s(y))))\" using A3 P1_def P2_def by auto<br>\nlemma lem11: \"P2 x ⟶ P2 (s(x))\" using P2_def induct_def lem1 lem8 lem10 by auto<br>\nlemma lem12: \"induct {x. P2 x}\" using induct_def lem9 lem11 by auto</p>\n<p>lemma lem13: \"x ∈ N ∧ y ∈ N ⟶ F(x,y) ∈ N\" using N_def P1_def P2_def lem12 by auto</p>\n<p>lemma lem14: \"D(F(s(s(s(s(e)))), s(s(s(s(e))))))\" using N_def lem3 lem4 lem13 by auto</p>\n<p>end</p>\n<p>Best regards, Jeff Ketland</p>\n<p>————————<br>\nDr Jeffrey Ketland<br>\nInstitute of Philosophy<br>\nUniversity of Warsaw<br>\n<a href=\"mailto:jeffreyketland@gmail.com\">jeffreyketland@gmail.com</a></p>",
        "id": 225815625,
        "sender_full_name": "Email Gateway",
        "timestamp": 1612951833
    },
    {
        "content": "<p>From: Jakub Kądziołka &lt;<a href=\"mailto:kuba@kadziolka.net\">kuba@kadziolka.net</a>&gt;<br>\nYou might want to consider publishing it in the AFP:<br>\n<a href=\"https://www.isa-afp.org/\">https://www.isa-afp.org/</a></p>\n<p>The submission process is quite straightforward, and that way others<br>\nwill be able to find your formalization much easier.</p>\n<p>Regards,<br>\nJakub Kądziołka</p>",
        "id": 225836583,
        "sender_full_name": "Email Gateway",
        "timestamp": 1612964447
    }
]