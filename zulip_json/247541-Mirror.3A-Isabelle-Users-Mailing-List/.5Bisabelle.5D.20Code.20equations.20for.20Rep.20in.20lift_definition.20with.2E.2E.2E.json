[
    {
        "content": "<p>From: \"C.A. Watt\" &lt;<a href=\"mailto:caw77@cam.ac.uk\">caw77@cam.ac.uk</a>&gt;<br>\nDear list</p>\n<p>I am stuck trying to get an example to generate executable code. A <br>\nstripped down version is attached. I define a type \"my_nat\", set up as a <br>\ntrivial quotient of nat. I lift a definition</p>\n<p>definition all_zeros :: \"nat list =&gt; bool\"</p>\n<p>to</p>\n<p>lift_definition my_all_zeros :: \"my_nat list =&gt; bool\" is all_zeros .</p>\n<p>When I attempt to export the code of the lifted function, I get the <br>\nerror \"No code equations for Rep_my_nat\".</p>\n<p>It looks like this is caused by the code equation for my_all_zeros <br>\nworking out as</p>\n<p>my_all_zeros ?xa ≡ all_zeros (map Rep_my_nat ?xa)</p>\n<p>Is there a way to make code generation work with this quotient/lifting <br>\nsetup? I found the \"code_dt\" flag to lift_definition, which seems to be <br>\ndocumented in isar-ref as dealing with something vaguely related, but it <br>\ndoesn't affect the behaviour here.</p>\n<p>Best wishes<br>\nConrad Watt<br>\n<a href=\"/user_uploads/14278/HDgTu9Fj6pmMrcFh-MFmOLl0/Test.thy\">Test.thy</a></p>",
        "id": 242443098,
        "sender_full_name": "Email Gateway",
        "timestamp": 1623494528
    },
    {
        "content": "<p>From: \"C.A. Watt\" &lt;<a href=\"mailto:caw77@cam.ac.uk\">caw77@cam.ac.uk</a>&gt;<br>\nTo follow up, Mark Wassell pointed out to me that changing the <br>\ndefinition of my_nat to</p>\n<p>typedef my_nat = \"{ n :: nat . True }\" by auto</p>\n<p>causes code generation to work as expected. It seems that, as part of <br>\nthe above definition, a lemma</p>\n<p>Rep_my_nat: \"Rep_my_nat (Abs_my_nat ?x) ≡ ?x\"</p>\n<p>is generated and used as a code equation, allowing extraction to work.</p>\n<p>The declaration in my original example</p>\n<p>typedef my_nat = \"UNIV :: (nat) set\" ..</p>\n<p>also causes a lemma of the same name to be generated, but of a very <br>\ndifferent form, which presumably can't be used as a code equation, hence <br>\nmy issues:</p>\n<p>Rep_my_nat: \"Rep_my_nat ?x \\in UNIV\"</p>\n<p>If I prove the lemma generated by Mark's definition myself and declare <br>\nit as [code], extraction works as desired. Does anyone have any insight <br>\nas to why these two typedef forms have different behaviour here?</p>\n<p>Best wishes<br>\nConrad</p>",
        "id": 242522656,
        "sender_full_name": "Email Gateway",
        "timestamp": 1623606978
    }
]