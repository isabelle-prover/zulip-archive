[
    {
        "content": "<p>From: David Kretzmer &lt;<a href=\"mailto:david.k@posteo.de\">david.k@posteo.de</a>&gt;<br>\nHi all,</p>\n<p>I have defined the transitive closure of an inductive predicate as follows:</p>\n<p>inductive less_equal_step :: \"nat ⇒ nat ⇒ bool\"  where<br>\n    \"a + 1 = b ⟹ less_equal_step a b\"</p>\n<p>definition less_equal :: \"nat ⇒ nat ⇒ bool\" where<br>\n    (* Define the transitive closure using the provided <code>rtranclp</code> *)<br>\n    \"less_equal a b ≡ (rtranclp less_equal_step) a b\"</p>\n<p>code_pred(modes: i ⇒ i ⇒ bool, i ⇒ o ⇒ bool) less_equal_step .</p>\n<p>code_pred<br>\n    (modes: i ⇒ i ⇒ bool, i ⇒ o ⇒ bool)<br>\n    [inductify]<br>\n    less_equal .</p>\n<p>(* Terminates *)<br>\n  value \"less_equal 1 2\"</p>\n<p>(* Does not terminate *)<br>\n  value \"less_equal 2 1\"</p>\n<p>Whenever <code>less_equal</code> does not hold execution does not terminate.</p>\n<p>In an older email<br>\n(<a href=\"https://lists.cam.ac.uk/mailman/htdig/cl-isabelle-users/2009-April/msg00051.html\">https://lists.cam.ac.uk/mailman/htdig/cl-isabelle-users/2009-April/msg00051.html</a>)<br>\nI read that this is being worked on. Then in Section 2.3 of the paper<br>\n\"Animating the Formalised Semanticsof a Java-like Language\"<br>\n(<a href=\"https://pp.ipd.kit.edu/uploads/publikationen/lochbihler11itp.pdf\">https://pp.ipd.kit.edu/uploads/publikationen/lochbihler11itp.pdf</a>) it<br>\nsounds like a tabled version has already been implemented. Do I have to<br>\nactivate this feature somehow? Or are there other problems with the<br>\nabove inductive predicate?</p>\n<p>Best regards,<br>\nDavid</p>",
        "id": 215564180,
        "sender_full_name": "Email Gateway",
        "timestamp": 1604486139
    },
    {
        "content": "<p>From: Lukas Bulwahn &lt;<a href=\"mailto:lukas.bulwahn@gmail.com\">lukas.bulwahn@gmail.com</a>&gt;<br>\nThere is no automatic tabled execution support; that would be actually<br>\ninteresting but quite tricky to get properly done in full generality.</p>\n<p>However, I think even a tabled version would not terminate because the<br>\ntable would just be filled with infinite entries following this<br>\nsequence (2, 1), (3, 1), (4, 1), (5, 1), ... and never terminate.</p>\n<p>For this simple example, it is of course better to just use a<br>\ndifferent but equivalent definition of less_equal_step, that<br>\nterminates under all modes.</p>\n<p>Non-terminating rules are well known in Logic Programming; it is a<br>\nprogramming language paradigm that provides enough rope to hang<br>\nyourself, and it requires some knowledge of the underlying execution<br>\nprinciples to get a program that is reasonable executable.</p>\n<p>I hope that helps.</p>\n<p>Lukas</p>",
        "id": 215569165,
        "sender_full_name": "Email Gateway",
        "timestamp": 1604489733
    },
    {
        "content": "<p>From: David Kretzmer &lt;<a href=\"mailto:david.k@posteo.de\">david.k@posteo.de</a>&gt;<br>\nThanks, good to know! The example I gave apparently doesn't really<br>\ncapture my use case, which is defining a subclass relation for a<br>\nprogramming language (slightly simplified version below). Since there<br>\nexists a top-most class from which all other classes derive the problem<br>\nof infinite sequences should not arise, I think.</p>\n<p>Do you know what one has to do to get tabled execution?</p>\n<div class=\"codehilite\"><pre><span></span><code>  type_synonym class_name = string\n\n  record class_def =\n    cname :: class_name\n    super :: &quot;class_name option&quot;\n\n  type_synonym program = &quot;class_def list&quot;\n\n  definition lookup_class :: &quot;program ⇒ class_name ⇒ class_def option&quot; where\n    &quot;lookup_class P C ≡ find (λcl. (class_def.cname cl) = C) P&quot;\n\n  inductive is_subclass1 :: &quot;program ⇒ class_name ⇒ class_name ⇒ bool&quot;\nwhere\n    &quot;⟦\n      Some cl = lookup_class P C;\n      (class_def.super cl) = Some C&#39;\n    ⟧ ⟹ is_subclass1 P C C&#39;&quot;\n\n\n  definition is_subclass_rtc :: &quot;program ⇒ class_name ⇒ class_name ⇒\nbool&quot; where\n    &quot;is_subclass_rtc P C C&#39; ≡ (is_subclass1 P)⇧*⇧* C C&#39;&quot;\n\n\n  code_pred(modes: i ⇒ i ⇒ i ⇒ bool, i ⇒ i ⇒ o ⇒ bool) is_subclass1 .\n\n  code_pred\n    (modes: i ⇒ i ⇒ i ⇒ bool, i ⇒ i ⇒ o ⇒ bool)\n    [inductify]\n    is_subclass_rtc .\n</code></pre></div>",
        "id": 215590552,
        "sender_full_name": "Email Gateway",
        "timestamp": 1604501431
    },
    {
        "content": "<p>From: Andreas Lochbihler &lt;<a href=\"mailto:mail@andreas-lochbihler.de\">mail@andreas-lochbihler.de</a>&gt;<br>\nDear David,</p>\n<p>The tabled execution for the reflexive transitive closure is implemented in the theory <br>\n\"HOL-Library.Transitive_Closure_Table\", so you have to import the theory. You may also <br>\nwant to have a look at the theories in JinjaThreads, where I've used tabulation for a <br>\nsimilar subclass relation. In particular,</p>\n<p><a href=\"https://www.isa-afp.org/browser_info/current/AFP/JinjaThreads/TypeRel.html\">https://www.isa-afp.org/browser_info/current/AFP/JinjaThreads/TypeRel.html</a></p>\n<p>Section \"Code Generation\".</p>\n<p>Hope this helps<br>\nAndreas</p>",
        "id": 215633291,
        "sender_full_name": "Email Gateway",
        "timestamp": 1604519809
    },
    {
        "content": "<p>From: David Kretzmer &lt;<a href=\"mailto:david.k@posteo.de\">david.k@posteo.de</a>&gt;<br>\nHello Andreas,</p>\n<p>I imported \"HOL-Library.Transitive_Closure_Table\" and it just worked.<br>\nThank you! I will also have a look at JinjaThreads.</p>\n<p>Best regards,<br>\nDavid</p>",
        "id": 215636182,
        "sender_full_name": "Email Gateway",
        "timestamp": 1604521306
    }
]