[
    {
        "content": "<p>From: Florian Haftmann &lt;<a href=\"mailto:florian.haftmann@informatik.tu-muenchen.de\">florian.haftmann@informatik.tu-muenchen.de</a>&gt;<br>\nHi all,</p>\n<p>I stumbled over an ancient combinator dating back to 2005.</p>\n<p>There is the »modifying swap«<br>\n    ‹Fun.swap a b f = f (a := f b, b:= f a)›</p>\n<p>However most applications need the canonical swap<br>\n    ‹swap a b x = (if x = a then b else if x = b then a else x)›</p>\n<p>and help themselves by writing<br>\n    ‹Fun.swap a b id›</p>\n<p>hence avoiding the pain to introduce another combinator.</p>\n<p>for that.</p>\n<p>Given that the modifying swap can simply expressed as (*)<br>\n    ‹Fun.swap a b f = f o swap a b›</p>\n<p>it is tempting to change Fun.swap to the canonical swap and replace<br>\nremaining occurrences of the modifying swap using (*).</p>\n<p>Any suggestions?</p>\n<p>Florian<br>\n<a href=\"/user_uploads/14278/WLrhK-ldleNnvYlUzIbJf7g7/OpenPGP_signature\">OpenPGP_signature</a></p>",
        "id": 232154563,
        "sender_full_name": "Email Gateway",
        "timestamp": 1616923272
    },
    {
        "content": "<p>From: Lawrence Paulson &lt;<a href=\"mailto:lp15@cam.ac.uk\">lp15@cam.ac.uk</a>&gt;<br>\nSounds good to me! It’s good to reduce the number of easily inter-definable primitives.<br>\nLarry</p>",
        "id": 232170638,
        "sender_full_name": "Email Gateway",
        "timestamp": 1616942068
    },
    {
        "content": "<p>From: Florian Haftmann &lt;<a href=\"mailto:florian.haftmann@informatik.tu-muenchen.de\">florian.haftmann@informatik.tu-muenchen.de</a>&gt;<br>\nTo conclude this thread: this will be part of the next Isabelle release.</p>\n<p>Florian<br>\n<a href=\"/user_uploads/14278/sMtfVeRUpd2iaOLDZeaWro2-/OpenPGP_signature\">OpenPGP_signature</a></p>",
        "id": 239849509,
        "sender_full_name": "Email Gateway",
        "timestamp": 1621664772
    }
]