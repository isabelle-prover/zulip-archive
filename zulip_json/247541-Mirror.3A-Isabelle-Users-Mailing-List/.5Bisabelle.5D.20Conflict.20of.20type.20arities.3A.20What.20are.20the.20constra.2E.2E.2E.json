[
    {
        "content": "<p>From: Peter Lammich &lt;<a href=\"mailto:lammich@in.tum.de\">lammich@in.tum.de</a>&gt;<br>\nHi List,</p>\n<p>I have naively tried to define a type-class for types that have more<br>\nthan one element. However, when trying to make the obvious<br>\ninstantiations, I get stuck with \"Conflict of type arities\" error<br>\nmessages. I could not find any documentation on what the restrictions<br>\nare that I'm violating here, and how they are motivated. Any pointers?</p>\n<p>instance prod :: (not_singleton,type) not_singleton ..<br>\n  instance prod :: (type,not_singleton) not_singleton </p>\n<p>Conflict of type arities:<br>\n  prod :: (type, not_singleton) not_singleton and<br>\n  prod :: (not_singleton, type) not_singleton</p>\n<p>Peter</p>",
        "id": 226509070,
        "sender_full_name": "Email Gateway",
        "timestamp": 1613479960
    },
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\nThe type system requires that your type constructor signatures satisfy a <br>\nproperty called coregularity. If you have two type constructor signatures<br>\nkappa :: (S1,...) C<br>\nkappa :: (T1,...) D<br>\nand D is a subclass of C then Ti must be a subsort of Si. Otherwise terms do not <br>\nhave the principal types. With your two declarations you would lose the pricipal <br>\ntypes property.</p>\n<p>Tobias<br>\n<a href=\"/user_uploads/14278/jNlQF1_VIX3DQLg-I__29snO/smime.p7s\">smime.p7s</a></p>",
        "id": 226510222,
        "sender_full_name": "Email Gateway",
        "timestamp": 1613480701
    },
    {
        "content": "<p>From: Jakub Kądziołka &lt;<a href=\"mailto:kuba@kadziolka.net\">kuba@kadziolka.net</a>&gt;<br>\nOn Tue Feb 16, 2021 at 1:52 PM CET, Peter Lammich wrote:</p>\n<blockquote>\n<p>Hi List,</p>\n<p>I have naively tried to define a type-class for types that have more<br>\nthan one element. However, when trying to make the obvious<br>\ninstantiations, I get stuck with \"Conflict of type arities\" error<br>\nmessages. I could not find any documentation on what the restrictions<br>\nare that I'm violating here, and how they are motivated. Any pointers?</p>\n</blockquote>\n<p>The restriction in question is that each ground type has at most one<br>\ninstance of a type class.</p>\n<blockquote>\n<p>instance prod :: (not_singleton,type) not_singleton ..<br>\n  instance prod :: (type,not_singleton) not_singleton </p>\n</blockquote>\n<p>In your example, a product of two non-singleton types would apply to<br>\nboth instances.</p>\n<p>The motivation for this restriction is that if your typeclass defines a<br>\nconstant, then the overlapping instances would constitute potentially<br>\ncontradictory definitions.</p>\n<p>Regards,<br>\nJakub Kądziołka</p>",
        "id": 226522635,
        "sender_full_name": "Email Gateway",
        "timestamp": 1613487391
    },
    {
        "content": "<p>From: Jeremy Dawson &lt;<a href=\"mailto:Jeremy.Dawson@anu.edu.au\">Jeremy.Dawson@anu.edu.au</a>&gt;<br>\nthe way I have understood this - correct me if I am wrong - is that to <br>\nprove that ('a, 'b) tycon is in some type class, the system needs to <br>\nknow unambiguously what type classes 'a amd 'b have to be in - there is <br>\nno backtracking / trying multiple possibilities - presumably for <br>\nefficiency reasons</p>\n<p>Jeremy</p>",
        "id": 226600167,
        "sender_full_name": "Email Gateway",
        "timestamp": 1613522910
    }
]