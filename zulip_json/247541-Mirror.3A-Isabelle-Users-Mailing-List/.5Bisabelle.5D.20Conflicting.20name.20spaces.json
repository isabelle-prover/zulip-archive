[
    {
        "content": "<p>From: Lawrence Paulson &lt;<a href=\"mailto:lp15@cam.ac.uk\">lp15@cam.ac.uk</a>&gt;<br>\nWe use qualified names to disambiguate when the same identifier is used in multiple theories. But sometimes a slight change to the theory hierarchy causes a new name space to predominate, requiring substantial changes to qualify all the names that had referred to the other name space. In the case of datatype constructors, one can even have conflicting names within a single theory. Is there, or could there be, a way to set a default name space in a particular context?</p>\n<p>Larry</p>",
        "id": 544505350,
        "sender_full_name": "Email Gateway",
        "timestamp": 1760348587
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nOn 13/10/2025 11:42, Lawrence Paulson wrote:</p>\n<blockquote>\n<p>We use qualified names to disambiguate when the same identifier is used in <br>\nmultiple theories. But sometimes a slight change to the theory hierarchy <br>\ncauses a new name space to predominate, requiring substantial changes to <br>\nqualify all the names that had referred to the other name space. In the case <br>\nof datatype constructors, one can even have conflicting names within a single <br>\ntheory. Is there, or could there be, a way to set a default name space in a <br>\nparticular context?</p>\n</blockquote>\n<p>I don't quite understand the phrase \"set a default name space\" in the context <br>\nof Isabelle. Is that a notion from different proof assistants (or programming <br>\nlanguages). Isabelle name spaces and access policies work quite differently <br>\n--- and not easily changed.</p>\n<p>Further, the same principle applies as for performance tuning (last time with <br>\nclassical.ML). We do need explicit empirical proof of actual problems, e.g. as <br>\npublic entries in AFP. Odd applications that are nowhere visible are by <br>\ndefinition non-existant.</p>\n<p>Very often, such applications can be done in a better way. There is even the <br>\n'alias' command for unusual situations.</p>\n<p>Makarius</p>",
        "id": 544518445,
        "sender_full_name": "Email Gateway",
        "timestamp": 1760352661
    },
    {
        "content": "<p>From: Manuel Eberl &lt;<a href=\"mailto:manuel@pruvisto.org\">manuel@pruvisto.org</a>&gt;<br>\nI think what Larry is referring to is that when the short name of a <br>\nconstant or theorem (mostly it is constants that cause this problem) is <br>\nnot unique then which constant you get when you type the short name is <br>\nsomewhat unpredictable. Then you have to use the long, qualified name to <br>\ndisambiguate.</p>\n<p>This can be quite annoying when, during refactoring, you have to import <br>\nan additional theory and suddenly lots of constants get resolved <br>\ndifferently and you have to change every single occurrence to the new name.</p>\n<p>The classic example that keeps bothering me is polynomials: there are <br>\nconstants called \"smult\", \"degree\", etc. both for the univariate <br>\npolynomials in HOL-Computational_Algebra (arguably the most important <br>\nones) and for multivariate polynomials (in the AFP entry of the same <br>\nname) and for the univariate polynomials in HOL-Algebra. If you do maths <br>\nin Isabelle/HOL, you will sooner or later end up transitively importing <br>\nHOL-Algebra, and suddenly \"smult\" is the \"smult\" from HOL-Algebra, which <br>\nis rarely the one you want since the HOL-Computational_Algebra <br>\npolynomials are used <em>much</em> more.</p>\n<p>Thus, it would be nice to specify that \"smult\" should by default always <br>\nmean \"Polynomial.smult\" (the one from HOL-Computational_Algebra), either <br>\nglobally or at least within some context.</p>\n<p>I don't have any concrete occurrences of this, but if you search the AFP <br>\nfor \"Polynomial.smult\" or \"<a href=\"http://Polynomial.degree\">Polynomial.degree</a>\" there are hundreds of matches.</p>\n<p>Cheers,</p>\n<p>Manuel</p>\n<p>On 13/10/2025 12:43, Makarius wrote:</p>\n<blockquote>\n<p>On 13/10/2025 11:42, Lawrence Paulson wrote:</p>\n<blockquote>\n<p>We use qualified names to disambiguate when the same identifier is <br>\nused in multiple theories. But sometimes a slight change to the <br>\ntheory hierarchy causes a new name space to predominate, requiring <br>\nsubstantial changes to qualify all the names that had referred to the <br>\nother name space. In the case of datatype constructors, one can even <br>\nhave conflicting names within a single theory. Is there, or could <br>\nthere be, a way to set a default name space in a particular context?</p>\n</blockquote>\n<p>I don't quite understand the phrase \"set a default name space\" in the <br>\ncontext of Isabelle. Is that a notion from different proof assistants <br>\n(or programming languages). Isabelle name spaces and access policies <br>\nwork quite differently --- and not easily changed.</p>\n<p>Further, the same principle applies as for performance tuning (last <br>\ntime with classical.ML). We do need explicit empirical proof of actual <br>\nproblems, e.g. as public entries in AFP. Odd applications that are <br>\nnowhere visible are by definition non-existant.</p>\n<p>Very often, such applications can be done in a better way. There is <br>\neven the 'alias' command for unusual situations.</p>\n<p>Makarius</p>\n</blockquote>",
        "id": 544525952,
        "sender_full_name": "Email Gateway",
        "timestamp": 1760354972
    }
]