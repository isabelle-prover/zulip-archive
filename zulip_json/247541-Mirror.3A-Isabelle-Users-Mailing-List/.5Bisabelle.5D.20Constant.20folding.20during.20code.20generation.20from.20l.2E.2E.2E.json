[
    {
        "content": "<p>From: <a href=\"mailto:hannobecker@posteo.de\">hannobecker@posteo.de</a><br>\nHi,</p>\n<p>I am running into issues with code generation in the context of nested <br>\nlocales and sublocales.</p>\n<p>Even a minimal example is rather elaborate, but focusing on the <br>\nhigh-level structure, the context is:</p>\n<ul>\n<li>Locale A = ... standalone ...</li>\n<li>Locale B = Locale A + ... additional parameters ...</li>\n<li>Locale C = ... standalone ...</li>\n<li>Sublocale B \\subseteq C</li>\n<li>global_interpretation X: A paramsX</li>\n<li>global_interpretation Y: B paramX paramsY</li>\n</ul>\n<p>Using <code>defines ...</code> clauses for <code>X</code>, code-extractable global constants <br>\nare established. However, trying to export code for definitions from <code>C</code> <br>\nin <code>Y</code> using <code>defines</code> and <code>rewrites</code> fails because the constants from <br>\n<code>X</code> are not appropriately folded.</p>\n<p>Please see below for a minimal example -- it's a toy example only, the <br>\nreal application context is much more complicated and has nothing to do <br>\nwith endomorphisms used in the example.</p>\n<p>One can hack things manually as demonstrated in the example as well, but <br>\nit seems against the point of <code>global_interpretation</code>. Is there a way to <br>\nget the example to work without manual constant folding and provisioning <br>\nof code equations?</p>\n<p>Thanks for your help,<br>\nHanno</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">theory</span><span class=\"w\"> </span><span class=\"n\">Scratch</span>\n<span class=\"w\">   </span><span class=\"kp\">imports</span><span class=\"w\"> </span><span class=\"n\">Main</span>\n<span class=\"k\">begin</span>\n\n<span class=\"k\">locale</span><span class=\"w\"> </span><span class=\"n\">Endo</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">   </span><span class=\"kp\">fixes</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">‹'a ⇒ 'a›</span>\n<span class=\"w\">   </span><span class=\"kp\">assumes</span><span class=\"w\"> </span><span class=\"s\">‹f=f›</span>\n<span class=\"k\">begin</span>\n<span class=\"w\">   </span><span class=\"k\">definition</span><span class=\"w\"> </span><span class=\"n\">ff</span><span class=\"w\"> </span><span class=\"kp\">where</span><span class=\"w\"> </span><span class=\"s\">‹ff ≡ f∘f›</span>\n<span class=\"k\">end</span>\n\n<span class=\"k\">locale</span><span class=\"w\"> </span><span class=\"n\">EndoCopy</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">   </span><span class=\"kp\">fixes</span><span class=\"w\"> </span><span class=\"n\">h</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">‹'a ⇒ 'a›</span>\n<span class=\"w\">   </span><span class=\"kp\">assumes</span><span class=\"w\"> </span><span class=\"s\">‹h=h›</span>\n<span class=\"k\">begin</span>\n<span class=\"w\">   </span><span class=\"k\">definition</span><span class=\"w\"> </span><span class=\"n\">hh</span><span class=\"w\"> </span><span class=\"kp\">where</span><span class=\"w\"> </span><span class=\"s\">‹hh ≡ h∘h›</span>\n<span class=\"k\">end</span>\n\n<span class=\"k\">locale</span><span class=\"w\"> </span><span class=\"n\">CommutingEndos</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Endo</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"kp\">for</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">‹'a ⇒ 'a›</span><span class=\"w\"> </span><span class=\"o\">+</span>\n<span class=\"w\">   </span><span class=\"kp\">fixes</span><span class=\"w\"> </span><span class=\"n\">g</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">‹'a ⇒ 'a›</span>\n<span class=\"w\">   </span><span class=\"kp\">assumes</span><span class=\"w\"> </span><span class=\"s\">‹f ∘ g = g ∘ f›</span>\n<span class=\"k\">begin</span>\n<span class=\"k\">definition</span><span class=\"w\"> </span><span class=\"n\">gg</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">‹'a ⇒ 'a›</span><span class=\"w\"> </span><span class=\"kp\">where</span><span class=\"w\"> </span><span class=\"s\">‹gg = g ∘ g›</span>\n<span class=\"k\">end</span>\n\n<span class=\"k\">definition</span><span class=\"w\"> </span><span class=\"n\">p1</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">‹nat ⇒ nat›</span><span class=\"w\"> </span><span class=\"kp\">where</span><span class=\"w\"> </span><span class=\"s\">‹p1 ≡ (+) 1›</span>\n<span class=\"k\">definition</span><span class=\"w\"> </span><span class=\"n\">p2</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">‹nat ⇒ nat›</span><span class=\"w\"> </span><span class=\"kp\">where</span><span class=\"w\"> </span><span class=\"s\">‹p2 ≡ (+) 2›</span>\n<span class=\"k\">definition</span><span class=\"w\"> </span><span class=\"n\">p3</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">‹nat ⇒ nat›</span><span class=\"w\"> </span><span class=\"kp\">where</span><span class=\"w\"> </span><span class=\"s\">‹p3 ≡ (+) 3›</span>\n\n<span class=\"kn\">sublocale</span><span class=\"w\"> </span><span class=\"n\">CommutingEndos</span><span class=\"w\"> </span><span class=\"n\">⊆</span><span class=\"w\"> </span><span class=\"n\">EndoCopy</span><span class=\"w\"> </span><span class=\"s\">‹ff ∘ gg›</span>\n<span class=\"w\">   </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"n\">add</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">EndoCopy.intro</span><span class=\"o\">)</span>\n\n<span class=\"n\">global_interpretation</span><span class=\"w\"> </span><span class=\"n\">I0</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Endo</span><span class=\"w\"> </span><span class=\"s\">‹p1›</span>\n<span class=\"w\">   </span><span class=\"kp\">defines</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">‹I0.ff›</span>\n<span class=\"w\">   </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"n\">add</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Endo.intro</span><span class=\"w\"> </span><span class=\"n\">p1_def</span><span class=\"o\">)</span>\n\n<span class=\"kt\">thm</span><span class=\"w\"> </span><span class=\"n\">I0.ff_def</span><span class=\"w\"> </span><span class=\"c\">(* OK: x ≡ p1 ∘ p1 *)</span>\n\n<span class=\"n\">global_interpretation</span><span class=\"w\"> </span><span class=\"n\">I1</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">CommutingEndos</span><span class=\"w\"> </span><span class=\"n\">p1</span><span class=\"w\"> </span><span class=\"n\">p2</span>\n<span class=\"w\">   </span><span class=\"kp\">defines</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">‹I1.hh›</span>\n<span class=\"w\">       </span><span class=\"kp\">and</span><span class=\"w\"> </span><span class=\"n\">z</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">‹I1.gg›</span>\n<span class=\"w\">   </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"n\">add</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">CommutingEndos_axioms.intro</span><span class=\"w\"> </span><span class=\"n\">CommutingEndos_def</span>\n<span class=\"n\">Endo.intro</span><span class=\"w\"> </span><span class=\"n\">o_def</span><span class=\"w\"> </span><span class=\"n\">p1_def</span><span class=\"w\"> </span><span class=\"n\">p2_def</span><span class=\"o\">)</span>\n\n<span class=\"kt\">thm</span><span class=\"w\"> </span><span class=\"n\">I1.gg_def</span><span class=\"w\"> </span><span class=\"c\">(* OK: z = p2 ∘ p2 *)</span>\n<span class=\"kt\">thm</span><span class=\"w\"> </span><span class=\"n\">z_def</span><span class=\"w\">     </span><span class=\"c\">(* z ≡ CommutingEndos.gg p2 *)</span>\n\n<span class=\"kt\">thm</span><span class=\"w\"> </span><span class=\"n\">I1.hh_def</span><span class=\"w\"> </span><span class=\"c\">(* BAD: I1.gg ≡ Endo.ff p1 ∘ z ∘ (Endo.ff p1 ∘ z) *)</span>\n<span class=\"kt\">thm</span><span class=\"w\"> </span><span class=\"n\">y_def</span><span class=\"w\">     </span><span class=\"c\">(* BAD: y ≡ EndoCopy.hh (Endo.ff p1 ∘ CommutingEndos.gg</span>\n<span class=\"c\">p2) *)</span>\n\n<span class=\"k\">export_code</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"kp\">in</span><span class=\"w\"> </span><span class=\"n\">OCaml</span><span class=\"w\"> </span><span class=\"c\">(* No code equation for y *)</span>\n\n<span class=\"c\">(* Can force it manually, but I thought the point of</span>\n<span class=\"c\">global_interpretation is that</span>\n<span class=\"c\">    this manual fiddling is not necessary: *)</span>\n<span class=\"kt\">thm</span><span class=\"w\"> </span><span class=\"n\">y_def</span><span class=\"o\">[</span><span class=\"n\">folded</span><span class=\"w\"> </span><span class=\"n\">z_def</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">simplified</span><span class=\"w\"> </span><span class=\"n\">I1.hh_def</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">folded</span><span class=\"w\"> </span><span class=\"n\">x_def</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"c\">(* y ≡ x ∘ z</span>\n<span class=\"c\">∘ (x ∘ z) *)</span>\n<span class=\"k\">declare</span><span class=\"w\"> </span><span class=\"n\">y_def</span><span class=\"o\">[</span><span class=\"n\">folded</span><span class=\"w\"> </span><span class=\"n\">z_def</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">simplified</span><span class=\"w\"> </span><span class=\"n\">I1.hh_def</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">folded</span><span class=\"w\"> </span><span class=\"n\">x_def</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">code</span><span class=\"o\">]</span>\n\n<span class=\"k\">export_code</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"kp\">in</span><span class=\"w\"> </span><span class=\"n\">OCaml</span><span class=\"w\"> </span><span class=\"c\">(* OK *)</span>\n\n<span class=\"c\">(* Manually adding a `rewrites` clause does not help either,</span>\n<span class=\"c\">unfortunately: *)</span>\n<span class=\"n\">global_interpretation</span><span class=\"w\"> </span><span class=\"n\">I2</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">CommutingEndos</span><span class=\"w\"> </span><span class=\"n\">p1</span><span class=\"w\"> </span><span class=\"n\">p3</span>\n<span class=\"w\">   </span><span class=\"n\">rewrites</span><span class=\"w\"> </span><span class=\"s\">‹Endo.ff p1 = x›</span>\n<span class=\"w\">   </span><span class=\"kp\">defines</span><span class=\"w\"> </span><span class=\"n\">y'</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">‹I2.hh›</span>\n<span class=\"w\">       </span><span class=\"kp\">and</span><span class=\"w\"> </span><span class=\"n\">z'</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">‹I2.gg›</span>\n<span class=\"w\">   </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">auto</span><span class=\"w\"> </span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"n\">add</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">CommutingEndos_axioms.intro</span><span class=\"w\"> </span><span class=\"n\">CommutingEndos_def</span>\n<span class=\"n\">Endo.intro</span><span class=\"w\"> </span><span class=\"n\">o_def</span>\n<span class=\"w\">     </span><span class=\"n\">p1_def</span><span class=\"w\"> </span><span class=\"n\">p3_def</span><span class=\"w\"> </span><span class=\"n\">x_def</span><span class=\"o\">)</span>\n\n<span class=\"kt\">thm</span><span class=\"w\"> </span><span class=\"n\">I2.gg_def</span><span class=\"w\">  </span><span class=\"c\">(* OK: z' = p3 ∘ p3 *)</span>\n<span class=\"kt\">thm</span><span class=\"w\"> </span><span class=\"n\">z'_def</span><span class=\"w\">     </span><span class=\"c\">(* z ≡ CommutingEndos.gg p3 *)</span>\n\n<span class=\"kt\">thm</span><span class=\"w\"> </span><span class=\"n\">I2.hh_def</span><span class=\"w\"> </span><span class=\"c\">(* Better, but still not expected: I1.gg ≡  x ∘ z' ∘ (x ∘</span>\n<span class=\"c\">z')</span>\n<span class=\"c\">                  Need LHS to be folded into y'! *)</span>\n<span class=\"kt\">thm</span><span class=\"w\"> </span><span class=\"n\">y'_def</span><span class=\"w\">     </span><span class=\"c\">(* BAD: y ≡ EndoCopy.hh (Endo.ff p1 ∘ CommutingEndos.gg</span>\n<span class=\"c\">p3) *)</span>\n\n<span class=\"k\">export_code</span><span class=\"w\"> </span><span class=\"n\">y'</span><span class=\"w\"> </span><span class=\"kp\">in</span><span class=\"w\"> </span><span class=\"n\">OCaml</span><span class=\"w\"> </span><span class=\"c\">(* No code equation for y *)</span>\n\n<span class=\"c\">(* Similar hacking still needed *)</span>\n<span class=\"kt\">thm</span><span class=\"w\"> </span><span class=\"n\">y'_def</span><span class=\"o\">[</span><span class=\"n\">folded</span><span class=\"w\"> </span><span class=\"n\">x_def</span><span class=\"w\"> </span><span class=\"n\">z'_def</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">simplified</span><span class=\"w\"> </span><span class=\"n\">I2.hh_def</span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"c\">(* y' ≡ x ∘ z' ∘</span>\n<span class=\"c\">(x ∘ z') *)</span>\n<span class=\"k\">lemmas</span><span class=\"w\"> </span><span class=\"n\">y'_def</span><span class=\"o\">[</span><span class=\"n\">folded</span><span class=\"w\"> </span><span class=\"n\">x_def</span><span class=\"w\"> </span><span class=\"n\">z'_def</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">simplified</span><span class=\"w\"> </span><span class=\"n\">I2.hh_def</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">code</span><span class=\"o\">]</span>\n\n<span class=\"k\">export_code</span><span class=\"w\"> </span><span class=\"n\">y'</span><span class=\"w\"> </span><span class=\"kp\">in</span><span class=\"w\"> </span><span class=\"n\">OCaml</span><span class=\"w\"> </span><span class=\"c\">(* OK *)</span>\n\n<span class=\"k\">end</span>\n</code></pre></div>",
        "id": 418401931,
        "sender_full_name": "Email Gateway",
        "timestamp": 1706346246
    },
    {
        "content": "<p>From: Florian Haftmann &lt;<a href=\"mailto:florian.haftmann@informatik.tu-muenchen.de\">florian.haftmann@informatik.tu-muenchen.de</a>&gt;<br>\nHi Hanno,</p>\n<p>this is an interesting example.</p>\n<p>The explicit rewrite is definitely necessary – mixin rewrites do not <br>\npropagate along local hierarchies.</p>\n<p>Why that still fails to apply as desired I cannot explain at the moment. <br>\n  It might be that internally the composition ‹_ ∘ _› is blurred by <br>\nimplicit eta-expansion which might ruin something, but that is entirely <br>\nspeculative.</p>\n<p>Cheers,<br>\n    Florian</p>\n<p><a href=\"/user_uploads/14278/iYINudnF-1WxgUCQGdGs5HNt/Scratch.thy\">Scratch.thy</a><br>\n<a href=\"/user_uploads/14278/WQE6OdzXtjNWuZBAGQkMODat/OpenPGP_0xA707172232CFA4E9.asc\">OpenPGP_0xA707172232CFA4E9.asc</a><br>\n<a href=\"/user_uploads/14278/KeAZeY0qsB-PLFCvzPf1kCf8/OpenPGP_signature.asc\">OpenPGP_signature.asc</a></p>",
        "id": 419238040,
        "sender_full_name": "Email Gateway",
        "timestamp": 1706791348
    },
    {
        "content": "<p>From: <a href=\"mailto:hannobecker@posteo.de\">hannobecker@posteo.de</a><br>\nHi Florian,</p>\n<p>Thanks for the reply!</p>",
        "id": 419391381,
        "sender_full_name": "Email Gateway",
        "timestamp": 1706855114
    },
    {
        "content": "<p>From: <a href=\"mailto:hannobecker@posteo.de\">hannobecker@posteo.de</a><br>\nHi Florian, all,</p>\n<p>Can we follow up on this? The behaviour is rather unexpected (seeing <br>\nthat hierarchies of <code>global_interpretation</code> do work with code <br>\ngeneration, as below), and cumbersome to work around.</p>\n<p>It would be great if the example in the initial post could be supported <br>\nin Isabelle2024.</p>\n<p>Thanks!<br>\nHanno</p>",
        "id": 421114670,
        "sender_full_name": "Email Gateway",
        "timestamp": 1707767092
    },
    {
        "content": "<p>From: Florian Haftmann &lt;<a href=\"mailto:florian.haftmann@informatik.tu-muenchen.de\">florian.haftmann@informatik.tu-muenchen.de</a>&gt;<br>\nHi Hanno,</p>\n<p>unfortunately, things are not that easy.</p>\n<p>The module system of Isabelle is a very delicate part of the system.</p>\n<p>Sorting out unclear behavior there requires considerable time and <br>\nconcentration for a thorough analysis and if analysis suggests <br>\nmodifications, these have to be discussed and evaluated diligently.</p>\n<p>This is not realistic in a short time period. At the moment I cannot <br>\nforsee when I personally will be able to have a closer look at it.</p>\n<p>Regards,<br>\n    Florian</p>\n<p><a href=\"/user_uploads/14278/lqhUhoCmzFnDf3v4KIUgV5n8/OpenPGP_0xA707172232CFA4E9.asc\">OpenPGP_0xA707172232CFA4E9.asc</a><br>\n<a href=\"/user_uploads/14278/Pcq8u1vdTsa_7m1K0KFmXZi8/OpenPGP_signature.asc\">OpenPGP_signature.asc</a></p>",
        "id": 421993745,
        "sender_full_name": "Email Gateway",
        "timestamp": 1708159479
    },
    {
        "content": "<p>From: <a href=\"mailto:hannobecker@posteo.de\">hannobecker@posteo.de</a><br>\nHi Florian,</p>\n<blockquote>\n<p>This is not realistic in a short time period.</p>\n</blockquote>\n<p>Got it, thanks for setting expectations.</p>\n<p>Regards,<br>\nHanno</p>",
        "id": 422067167,
        "sender_full_name": "Email Gateway",
        "timestamp": 1708232530
    }
]