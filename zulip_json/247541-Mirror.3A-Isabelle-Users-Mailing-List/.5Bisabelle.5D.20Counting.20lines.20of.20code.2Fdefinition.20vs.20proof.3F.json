[
    {
        "content": "<p>From: Jason Gross &lt;<a href=\"mailto:jasongross9@gmail.com\">jasongross9@gmail.com</a>&gt;<br>\nHi,</p>\n<p>Is there a tool that can tell me how many lines in a .thy file are<br>\nwhitespace/comments vs definitions vs proofs?  (I'm looking for something<br>\nanalogous to coqwc.)</p>\n<p>Thanks,<br>\nJason</p>",
        "id": 216704690,
        "sender_full_name": "Email Gateway",
        "timestamp": 1605327083
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nI would say that classic existence holds: people surely have their own tools<br>\nfor particular projects, without making it explicit.</p>\n<p>The general approach is to use Isabelle/Scala for such \"systems programming\"<br>\naround Isabelle. This gives proper access to the structure of sessions,<br>\ntheories, commands within theories etc. including the all-important \"outer<br>\nsyntax\".</p>\n<p>(Note that Isabelle syntax can be augmented locally, e.g. Isabelle/ZF has<br>\nslightly different commands s different Isabelle/HOL, or applications can add<br>\ntheir own commands on the spot.)</p>\n<p>To demonstrate this in practice, I've put together such a tool on the spot, as<br>\nexternal Isabelle/Scala script wc.scala in the sense of the Isabelle \"system\"<br>\nmanual, section 1.2.</p>\n<p>To activate that, you can put it e.g. into $ISABELLE_HOME_USER/Tools/wc.scala<br>\nand register the enclosing directory in $ISABELLE_HOME_USER/etc/settings like<br>\nthis:</p>\n<p>ISABELLE_TOOLS=\"$ISABELLE_TOOLS:$ISABELLE_HOME_USER/Tools\"</p>\n<p>(The location of $ISABELLE_HOME_USER is platform-specific, but you can open<br>\nthat symbolic name literally in Isabelle/jEdit directory browser, or you use<br>\n\"Isabelle2020/bin/isabelle getenv ISABELLE_HOME_USER\" on the command line.)</p>\n<p>Here are some example invocations:</p>\n<p>Isabelle2020/bin/isabelle wc -D '~~/src/FOL'</p>\n<p>Isabelle2020/bin/isabelle wc -a</p>\n<p>Isabelle2020/bin/isabelle wc -d afp-2020/thys -a</p>\n<p>(The latter requires a clone/download of<br>\n<a href=\"https://foss.heptapod.net/isa-afp/afp-2020\">https://foss.heptapod.net/isa-afp/afp-2020</a> )</p>\n<p>If you want to understand Isabelle/Scala concepts and modules, you can use<br>\n\"isabelle scala_project\" together with IntelliJ IDEA and Gradle, as explained<br>\nin the \"system\" manual, section 5.5.</p>\n<p>If you want to make a statically compiled Isabelle/Scala addon-tool, it is<br>\nbetter to wait a few weeks until the release process for Isabelle2021 starts:<br>\nthat will provide official interfaces to add Scala jar modules in user space.</p>\n<p>The actual counting of things within a theory node is a different question:<br>\nthe structure is quite complex, this is not \"program code\" with comments as in<br>\nthe 1970ies. There are first-class document commands like 'text', 'section',<br>\n'chapter', as well as embedded formal and informal comments. In my example<br>\nimplementation, I've merely explored \"command spans\" in the sense of good-old<br>\n(and retired) Proof General.</p>\n<p>An alternative is to look e.g. into<br>\n<a href=\"https://isabelle.sketis.net/repos/isabelle/file/Isabelle2020/src/Pure/Isar/document_structure.scala\">https://isabelle.sketis.net/repos/isabelle/file/Isabelle2020/src/Pure/Isar/document_structure.scala</a></p>\n<p>Or you can be more ambitious and inspect theory content after formal<br>\nprocessing by the Isabelle/ML prover process. The \"isabelle dump\" tool is an<br>\nexample for that, without doing anything in particular, see<br>\n<a href=\"https://isabelle.sketis.net/repos/isabelle/file/Isabelle2020/src/Pure/Tools/dump.scala\">https://isabelle.sketis.net/repos/isabelle/file/Isabelle2020/src/Pure/Tools/dump.scala</a></p>\n<p>Makarius<br>\n<a href=\"/user_uploads/14278/TyChlF4L50_EvyGX-DBMT3OL/wc.scala\">wc.scala</a></p>",
        "id": 217271744,
        "sender_full_name": "Email Gateway",
        "timestamp": 1605794131
    }
]