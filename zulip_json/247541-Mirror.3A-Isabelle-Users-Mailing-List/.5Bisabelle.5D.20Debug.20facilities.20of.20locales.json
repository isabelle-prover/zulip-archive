[
    {
        "content": "<p>From: Clemens Ballarin &lt;<a href=\"mailto:ballarin@in.tum.de\">ballarin@in.tum.de</a>&gt;<br>\nLocales do not have many means for debugging a development. But even the <br>\ntools that are available seem not as widely known as I thought. I would <br>\nlike to highlight two:</p>\n<ul>\n<li>\n<p>Method 'intro_locales'. Unlike its sibling 'unfold_locales' it does <br>\nnot descend into locale assumptions but leaves statements involving <br>\nlocale predicates in the goal state. This makes immediately clear which <br>\nlocale instances the goals originate from. While 'unfold_locales' is <br>\npart of the default method of 'proof' and often invoked behind the <br>\nscenes, 'intro_locales' needs to be invoked manually.</p>\n</li>\n<li>\n<p>Attribute 'trace_locales'. This is a recent addition (Isabelle 2020). <br>\nWhen set to 'true', prints the locale instances activated during <br>\nroundup. This can be helpful when locale commands yield obscure errors <br>\ndue to conflicting syntax or for understanding local theories created by <br>\ncomplex locale hierarchies.</p>\n</li>\n</ul>\n<p>I have amended the Isar Reference Manual (development version) <br>\naccordingly, so these hints will become part of the documentation.</p>\n<p>Clemens</p>",
        "id": 219898525,
        "sender_full_name": "Email Gateway",
        "timestamp": 1607978228
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nSomething to read and try in the current release candidate:<br>\n<a href=\"https://isabelle.in.tum.de/website-Isabelle2021-RC2\">https://isabelle.in.tum.de/website-Isabelle2021-RC2</a></p>\n<p>Makarius</p>",
        "id": 222234134,
        "sender_full_name": "Email Gateway",
        "timestamp": 1610303237
    }
]