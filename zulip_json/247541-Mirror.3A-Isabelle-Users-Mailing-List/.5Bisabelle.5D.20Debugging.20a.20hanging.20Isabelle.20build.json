[
    {
        "content": "<p>From: Dominic Mulligan &lt;<a href=\"mailto:cl-isabelle-users@lists.cam.ac.uk\">cl-isabelle-users@lists.cam.ac.uk</a>&gt;<br>\nHi,</p>\n<p>I am working with Isabelle/HOL on a fairly large development (tens of<br>\nthousands of lines of code).  As part of our build process we have a CI<br>\nsetup using a Docker container and Gitlab runners.  Unfortunately, this has<br>\nsuddenly started hanging after adding <code>Word_Lib</code> from the AFP as an<br>\nexternal dependency via the Isabelle components mechanism, as recommended<br>\non the AFP website.</p>\n<p>Mysteriously, this development builds locally on our Apple M1 Mac Pros that<br>\nwe use for development but is now hanging when it is about to complete the<br>\nchecking of one of our sessions (which is the first to use <code>Word_Lib</code> as a<br>\ndependency).  There is nothing particularly complex about this session–––in<br>\nfact it is one of our simplest, as it merely consists of around five theory<br>\nfiles containing definitions and some modest theorems.  It should not<br>\ntherefore be particularly taxing to check.  Nevertheless, CI now reliably<br>\nstalls when completing the checking of this session, as attested by running<br>\n<code>isabelle build</code> with the verbose flag option.  This shows all theories in<br>\nthe session (and those relevant in <code>Word_Lib</code>) being gradually checked by<br>\nIsabelle but then fails to progress any further in the build when it is<br>\njust about to complete checking.  After one hour of stalled checking our CI<br>\nrun times out–––the full development only takes approximately 30 minutes to<br>\ncheck locally.</p>\n<p>We have tried bumping up the resource limits on the Gitlab runner to no<br>\navail (it is running on our largest available runner with memory resources<br>\nfar in excess of what our laptops offer).  Both development and Gitlab<br>\nrunner are using the same instruction set architecture (AArch64).  I've<br>\ntried reducing the maximum number of parallel jobs down to the default and<br>\nthat hasn't helped either.</p>\n<p>Is there anything further that can be done to narrow down what, exactly, is<br>\ngoing wrong with the build?</p>\n<p>Thanks,<br>\nDominic</p>",
        "id": 341693401,
        "sender_full_name": "Email Gateway",
        "timestamp": 1678794178
    },
    {
        "content": "<p>From: Fabian Huch &lt;<a href=\"mailto:huch@in.tum.de\">huch@in.tum.de</a>&gt;<br>\nYou can always attach a debugger to the Isabelle/Scala JVM process and <br>\nsee where it pauses.</p>\n<p>Do you use the official docker image? If not, I would generally assume <br>\nthat the environment in the container is misconfigured - e.g., <br>\nfile-system, user permission problems, missing system packages.</p>\n<p>If you are using the official image, I would check if SElinux is <br>\npreventing files in the docker environment from being written <br>\n(temporarily disabling it may give you answers).</p>\n<p>Fabian</p>",
        "id": 341822318,
        "sender_full_name": "Email Gateway",
        "timestamp": 1678806415
    },
    {
        "content": "<p>From: Dominic Mulligan &lt;<a href=\"mailto:cl-isabelle-users@lists.cam.ac.uk\">cl-isabelle-users@lists.cam.ac.uk</a>&gt;<br>\nHi Fabian,</p>\n<p>Thanks for the suggestions.  We are not using the official Docker image but<br>\none that we developed ourselves.  After more experimentation I'm fairly<br>\nconfident that the problem is not in the Docker container.  In the end I<br>\nmanaged to fix the hanging build by reconfiguring our build system to use<br>\nan AMD64 runner rather than AArch64 with no other changes.  Obviously<br>\nthe fix is confounded somewhat by the need to use a different build of<br>\nIsabelle, along with a different Ubuntu build–––and its attendant<br>\nuserspace–––in the two containers, but it's somewhat suggestive that<br>\nthere's something potentially deeper going on to cause the apparent<br>\ndeadlock...</p>\n<p>Thanks,<br>\nDominic</p>",
        "id": 342014315,
        "sender_full_name": "Email Gateway",
        "timestamp": 1678876393
    },
    {
        "content": "<p>From: Fabian Huch &lt;<a href=\"mailto:huch@in.tum.de\">huch@in.tum.de</a>&gt;<br>\nIf that's the case, the problem is probably either a missing or broken <br>\nsystem package for the aarch64 environment. Generally, on an Ubuntu <br>\ncontainer you would need something like:</p>\n<p>- m4<br>\n       - mercurial<br>\n       - curl<br>\n       - libgomp1<br>\n       - libgmp-dev<br>\n       - unzip<br>\n       - swi-prolog<br>\n       - lib32stdc++6<br>\n       - texlive-full<br>\n       - libzarith-ocaml</p>\n<p>To run all Isabelle sessions. Often minimal docker images are missing <br>\nsome of those. Maybe this helps.</p>\n<p>Fabian</p>",
        "id": 342033301,
        "sender_full_name": "Email Gateway",
        "timestamp": 1678881407
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nRecall that Isabelle arm64-linux/darwin still has experimental status: some <br>\ncomponents are just missing, others are not as stable as we are used to for <br>\nx86_64.</p>\n<p>Here are the cumulative NEWS announcements of the past releases on this topic:</p>\n<p>New in Isabelle2022 (October 2022)</p>\n<hr>\n<ul>\n<li>The system option \"ML_system_apple\" controls the use of native<br>\nApple/ARM64 for Poly/ML: default \"true\". Like \"ML_system_64\" this only<br>\nworks when saved in \"$ISABELLE_HOME_USER/etc/preferences\" (e.g. after<br>\nshutdown of Isabelle/jEdit).</li>\n</ul>\n<p>New in Isabelle2021-1 (December 2021)</p>\n<hr>\n<ul>\n<li>Almost complete support for arm64-linux platform. The reference<br>\nplatform is Raspberry Pi 4 with 8 GB RAM running Pi OS (64 bit).</li>\n</ul>\n<p>New in Isabelle2021 (February 2021)</p>\n<hr>\n<ul>\n<li>\n<p>Experimental support for arm64-linux platform. The reference platform<br>\nis Raspberry Pi 4 with 8 GB RAM running Pi OS (64 bit).</p>\n</li>\n<li>\n<p>Support for Apple Silicon, using mostly x86_64-darwin runtime<br>\ntranslation via Rosetta 2 (e.g. Poly/ML and external provers), but also<br>\nsome native arm64-darwin executables (e.g. Java).</p>\n</li>\n</ul>\n<p>The \"reference platform\" is very important: so far, I only managed to get hold <br>\non Raspberry Pi 4 (approx. 120 EUR). It would be better to have something like <br>\nApple Studio in the backyard, to be used together with Linux on Docker.</p>\n<p>The \"almost complete support\" still applies to Poly/ML: current repository <br>\nversions work well most of the time, but not always. A recent change by David <br>\nMatthews after the Isabelle2022 release improves the situation for really big <br>\napplications of native arm64 (instead of arm64_32), see also <br>\n<a href=\"https://isabelle-dev.sketis.net/rISABELLE014c3d00e0f\">https://isabelle-dev.sketis.net/rISABELLE014c3d00e0f</a></p>\n<p>It might also help to upgrade Java: these guys are still in the progress to <br>\npolish ARM64 support. See also <br>\n<a href=\"https://isabelle-dev.sketis.net/rISABELLE39f8051f71d4\">https://isabelle-dev.sketis.net/rISABELLE39f8051f71d4</a></p>\n<p>Note that there will be no \"patch-releases\" for Isabelle: it is a concession <br>\nto efficient use of our own resources.</p>\n<p>If you want to use alternative components for regular Isabelle releases, the <br>\nsimplest way is probably to use a repository clone (for the release, not an <br>\narbitrary \"latest\" one), and make minimal changes to Admin/components/main.</p>\n<p>Here is an example project to work with the Isabelle repository in such a <br>\nwell-defined manner: <br>\n<a href=\"https://makarius.sketis.net/repos/narration/file/1c8aa0855611/README.md\">https://makarius.sketis.net/repos/narration/file/1c8aa0855611/README.md</a> (it <br>\nalso shows how to make your own Isabelle/Scala command-line tools.)</p>\n<p>Makarius</p>",
        "id": 342059846,
        "sender_full_name": "Email Gateway",
        "timestamp": 1678887581
    },
    {
        "content": "<p>From: Dominic Mulligan &lt;<a href=\"mailto:cl-isabelle-users@lists.cam.ac.uk\">cl-isabelle-users@lists.cam.ac.uk</a>&gt;<br>\nYes, this was my working hypothesis when I decided to move us over to<br>\nAMD64–––namely we were seeing some potential instability owing to our use<br>\nof the relatively untested AArch64 platform.  My colleagues and I have also<br>\nobserved spurious failures of SMT solvers and the PolyML runtime<br>\noccasionally raising assertion failures in the garbage collector (from<br>\nmemory), and this was the final push to move us onto AMD64 until things<br>\nhave settled down further with Arm.</p>\n<p>Fabian, when I come to try and move us back to Arm in the future I will<br>\nbear in mind that I need to include all of those components in the Docker<br>\ncontainer.</p>\n<p>Thanks!<br>\nDominic</p>",
        "id": 342069544,
        "sender_full_name": "Email Gateway",
        "timestamp": 1678889661
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nSome further side-remarks:</p>\n<p>The regular \"isabelle build_docker\" tool provides some Isabelle/Scala entry <br>\npoints that might be useful for manual setup of foreign Linux distributions.</p>\n<p>E.g. like this via \"isabelle scala\":</p>\n<p>scala&gt; isabelle.Build_Docker.packages.mkString(\" \")<br>\nval res1: String = curl less libfontconfig1 libgomp1 openssh-client pwgen <br>\nrsync unzip</p>\n<p>scala&gt; val res2: String = curl less libfontconfig1 libgomp1 openssh-client <br>\npwgen rsync unzip libx11-6 libxext6 libxrender1 libxtst6 libxi6 <br>\ntexlive-fonts-extra texlive-font-utils texlive-latex-extra texlive-science</p>\n<p>Mercurial is nice to have, e.g. to navigate history, but it requires Python3.</p>\n<p>Plain \"curl\" is de-facto sufficient to get arbitrary version. See these links <br>\nfor \"hg archive\" running on the server:</p>\n<p>* tagged version:</p>\n<p><a href=\"https://isabelle.sketis.net/repos/isabelle/archive/Isabelle2022.tar.gz\">https://isabelle.sketis.net/repos/isabelle/archive/Isabelle2022.tar.gz</a></p>\n<p>* arbitrary version:</p>\n<p><a href=\"https://isabelle.sketis.net/repos/isabelle/archive/1ac2416e8432.tar.gz\">https://isabelle.sketis.net/repos/isabelle/archive/1ac2416e8432.tar.gz</a></p>\n<p>* similar for AFP:</p>\n<p><a href=\"https://isabelle.sketis.net/repos/afp-2022/archive/\">https://isabelle.sketis.net/repos/afp-2022/archive/</a>...</p>\n<p><a href=\"https://isabelle.sketis.net/repos/afp-devel/archive/\">https://isabelle.sketis.net/repos/afp-devel/archive/</a>...</p>\n<p>Isabelle tools like \"isabelle version -i\" work correctly for such repository <br>\narchive downloads. (\"Rogue clones\" on Github etc. don't work properly, because <br>\nformal versions are wrong.)</p>\n<p>Makarius</p>",
        "id": 342081169,
        "sender_full_name": "Email Gateway",
        "timestamp": 1678892081
    }
]