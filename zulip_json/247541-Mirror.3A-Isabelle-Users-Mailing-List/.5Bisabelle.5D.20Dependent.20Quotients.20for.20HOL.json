[
    {
        "content": "<p>From: Steven Obua &lt;<a href=\"mailto:obua@practal.com\">obua@practal.com</a>&gt;<br>\nThere has been going on a lot of work on quotient types for Isabelle/HOL, but when trying to use it for my formalisation of Abstraction Logic in Isabelle/HOL (<a href=\"https://github.com/practal/AL-in-HOL\">https://github.com/practal/AL-in-HOL</a> &lt;<a href=\"https://github.com/practal/AL-in-HOL/blob/main/Quotients.thy\">https://github.com/practal/AL-in-HOL/blob/main/Quotients.thy</a>&gt;), I couldn't, because my quotients would depend on values. </p>\n<p>So I rolled my own theory (<a href=\"https://github.com/practal/AL-in-HOL/blob/main/Quotients.thy\">https://github.com/practal/AL-in-HOL/blob/main/Quotients.thy</a>) based on HOL.Equiv-Relations, which adds a nice twist on top: It defines a new type</p>\n<p>typedef 'a quotient = { r::'a rel. ∃ A. equiv A r }</p>\n<p>which is similar to 'a set, but allows a custom equivalence relation for each individual set. This has the advantage that you can now introduce notation like </p>\n<p>u /∈ q </p>\n<p>u = v (mod q)</p>\n<p>where u and v have type 'a, and q has type 'a quotient. You can furthermore easily build up new quotients from existing ones, for example the quotient </p>\n<p>p /⇒ q</p>\n<p>which has type ('a ⇒ 'b) quotient, given that p has type 'a quotient, and q has type 'b quotient. Then for the normal composition operator for example, the following theorem holds:</p>\n<p>(◦) /∈ (q /⇒ r) /⇒ (p /⇒ q) /⇒ (p /⇒ r)</p>\n<p>As another example, q /^ n represents the vectors of length n with elements in q, and has type ('a list) quotient, where q has type 'a quotient. </p>\n<p>So this makes reasoning modulo an equivalence relation quite straightforward and convenient, and I am relying heavily on it now for my formalisation. </p>\n<p>Now my question: Does anyone know of similar work in HOL? I've seen that this is known as \"setoid\" in constructive mathematics and type theory, but I see it rather as a practical way of working around the limitations of simple types in classical HOL: Instead of using 'a set for a formalisation, use 'a quotient instead. In that sense, is there other work out there in HOL following this approach?   </p>\n<p>Cheers,</p>\n<p>Steven</p>",
        "id": 287349064,
        "sender_full_name": "Email Gateway",
        "timestamp": 1656085953
    }
]