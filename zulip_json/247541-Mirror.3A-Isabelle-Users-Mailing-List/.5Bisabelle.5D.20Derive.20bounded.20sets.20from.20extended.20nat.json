[
    {
        "content": "<p>From: \"Kruse, Kevin\" &lt;<a href=\"mailto:kevin.kruse@rwth-aachen.de\">kevin.kruse@rwth-aachen.de</a>&gt;<br>\nHi,</p>\n<p>I’m trying to execute the following code snippet:</p>\n<p>value \"(∀n::nat. (enat n) ≤ (4::enat) ⟶ (n≤6))\"</p>\n<p>To do this, I use the following code abbreviation, which transforms the universal quantifier into an bounded set (for the non-infinite case):</p>\n<p>lemma bounded_enat_exec [code_abbrev]:\"(if ((x::enat)=∞) then (∀n. P n)<br>\n                    else ((∀n∈{0..(the_enat(x))}. P n))) = (∀n::nat. enat n ≤ (x::enat) ⟶ P n)\"<br>\n  sorry</p>\n<p>However, I can’t explain the behavior of Isabelle: If I’m writing e.g. “False” in the first if branch (which should never be entered), the code will execute (but the lemma is not provable). If I’m writing what I stated above, the code won’t execute (Error, that nat is not enumerable).</p>\n<p>Is there an explanation, why this happens? (… and hopefully a solution?)</p>\n<p>All the best,<br>\nKevin</p>",
        "id": 223100605,
        "sender_full_name": "Email Gateway",
        "timestamp": 1610964231
    },
    {
        "content": "<p>From: Manuel Eberl &lt;<a href=\"mailto:eberlm@in.tum.de\">eberlm@in.tum.de</a>&gt;<br>\nCode generation happens statically, so if you cannot generate code for<br>\nthe \"False\" branch, you cannot generate code for the whole thing. Even<br>\nif the branch can never be entered in practice.</p>\n<p>What you can do is to use <code>Code.abort</code> in the False branch. Basically,<br>\n<code>Code.abort s f</code> is defined to be equal to <code>f ()</code> but does not generate<br>\ncode for f. Instead, whenever Code.abort is encountered at run time, you<br>\nget an exception with the message s.</p>\n<p>For your case, this works:</p>\n<p>lemma bounded_enat_exec [code_unfold]:<br>\n  \"(∀n::nat. enat n ≤ x ⟶ P n) =<br>\n      (if (x::enat) = ∞ then Code.abort STR ''infinite'' (λ_. ∀n∈UNIV. P n)<br>\n       else (∀n∈{0..the_enat x}. P n))\"<br>\n  by auto</p>\n<p>definition P :: \"enat ⇒ bool\" where \"P x = (∀n::nat. enat n ≤ x ⟶ x ^ 2<br>\n= x)\"</p>\n<p>value \"P 1\"</p>\n<p>I'm a bit puzzled why it doesn't work with just \"∀n. P n\" instead of<br>\n\"∀n∈UNIV. P n\". Perhaps one of our code generation experts can comment<br>\non this (I CC'ed Florian).</p>\n<p>Manuel<br>\n<a href=\"/user_uploads/14278/w6Duu6BFAm0FAAaWcqJvxjvw/smime.p7s\">smime.p7s</a></p>",
        "id": 223102582,
        "sender_full_name": "Email Gateway",
        "timestamp": 1610965527
    },
    {
        "content": "<p>From: Kevin Kruse &lt;<a href=\"mailto:kevin.kruse@rwth-aachen.de\">kevin.kruse@rwth-aachen.de</a>&gt;<br>\nHi Manuel, thanks for the explanation/hint!  </p>\n<p>All the best<br>\nKevin</p>",
        "id": 223167924,
        "sender_full_name": "Email Gateway",
        "timestamp": 1611007601
    }
]