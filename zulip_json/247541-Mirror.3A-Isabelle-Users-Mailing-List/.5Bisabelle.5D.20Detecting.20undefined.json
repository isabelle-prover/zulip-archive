[
    {
        "content": "<p>From: David Kretzmer &lt;<a href=\"mailto:david.k@posteo.de\">david.k@posteo.de</a>&gt;<br>\nHello,</p>\n<p>I am developing an executable operational semantics for a programming<br>\nlanguage in Isabelle/HOL. One area that makes me a bit uneasy is the<br>\nexistence of <code>undefined</code>. Since the occurrence of <code>undefined</code> may<br>\nindicate a bug in the semantics (e.g., an off-by-one error when indexing<br>\ninto a list) and also raises an exception during execution, I would like<br>\nto prove that any final execution state obtained by the transition<br>\nrelation is independent of <code>undefined</code>.</p>\n<p>However, as <code>undefined</code> is a undetermined yet legal value there does not<br>\nseem a way to express this property. The only alternative I see is to<br>\nprove the much stronger property that any final execution state is part<br>\nof a set of known, valid states. However, I would like to start with the<br>\nsimpler property (i.e., no <code>undefined</code>). Is this possible?</p>\n<p>Best regards,<br>\nDavid</p>",
        "id": 222185568,
        "sender_full_name": "Email Gateway",
        "timestamp": 1610220737
    },
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\nUndefined means \"underdefined\" - it is some value, but we don't know which one. <br>\nProving that something is different from undefined is not very meaningful. For <br>\nexample, you can prove \"Suc undefined ~= undefined\", but what good does that do? <br>\nYou have to prove the \"stronger property\" you talk about.</p>\n<p>Tobias<br>\n<a href=\"/user_uploads/14278/IzP3lGnFuEdlLODL4s4qJEb3/smime.p7s\">smime.p7s</a></p>",
        "id": 222286286,
        "sender_full_name": "Email Gateway",
        "timestamp": 1610364940
    },
    {
        "content": "<p>From: Manuel Eberl &lt;<a href=\"mailto:eberlm@in.tum.de\">eberlm@in.tum.de</a>&gt;<br>\nFor polymorphic functions, one can at least prove parametricity, which<br>\n(by some extra-logical meta argument) should imply that the function<br>\ndoes not produce any \"undefined\"s unless they were already present in<br>\nthe input.</p>\n<p>I don't think that is very applicable in your case though. And it might<br>\nnot be any more useful than just going through the definitions by hand<br>\nand checking that they don't call any partial functions like \"hd\" (there<br>\nare not /that/ many operations that can crash in the standard code setup<br>\nfor HOL, I think).</p>\n<p>In any case, HOL is a logic, not a programming language. It doesn't have<br>\nany notion of \"execution\". I therefore think that anything you do inside<br>\nthe logic will never be able to capture statements about what happens<br>\nduring execution faithfully.</p>\n<p>Even if your definition logically does not produce \"undefined\", even if<br>\nyou prove that it always retuns \"42\", you could still have a code<br>\nequation somewhere that does something silly like \"if undefined =<br>\n(undefined :: nat) then … else …\" that crashes at run time. Or<br>\nnon-termination.</p>\n<p>I think the only way to get any real guarantees would be to have a<br>\nsemantics of the target language (that you export your code into) and<br>\nthen reason about execution with that. Or do the opposite: take an<br>\nimplementation of your algorithm and prove it equivalent to the HOL<br>\ndefinition through some verification framework.</p>\n<p>Something like a verified code generator that certifies termination and<br>\nexception-freedom would also work. I think Lars Hupel's verified code<br>\ngenerator to CakeML went into that direction, but I don't know if he<br>\nproved these properties. Plus it would probably not be able to handle an<br>\nexample as big as yours is likely to be.</p>\n<p>Manuel<br>\n<a href=\"/user_uploads/14278/rUoCMpwaOmdiIm4UDn7ZgIxE/smime.p7s\">smime.p7s</a></p>",
        "id": 222287215,
        "sender_full_name": "Email Gateway",
        "timestamp": 1610365685
    },
    {
        "content": "<p>From: David Kretzmer &lt;<a href=\"mailto:david.k@posteo.de\">david.k@posteo.de</a>&gt;<br>\nIt is true that I'm currently using Isabelle/HOL with a mindset based on<br>\nexecutable programming languages, and in this context \"undefined\" feels<br>\na bit like the danger of dereferencing an invalid pointer. However,<br>\nsince the exceptional behavior of \"undefined\" is only part of the target<br>\nlanguage it makes sense that you cannot reason about it in Isabelle/HOL.</p>\n<p>Also, without code generation, I guess the only thing you care about a<br>\n(function) definition is what you can prove about it. If the property<br>\nyou want to prove uses parts of the definition that unexpectedly depend<br>\non \"undefined\", then the proof may fail and you have to fix the<br>\ndefinition. On the other hand, if \"undefined\" occurs only in parts of<br>\nthe definition that are irrelevant for the proof, then you don't care.</p>\n<p>So the difference between the proof language perspective and the<br>\nprogramming language perspective seems to be that in the former, you<br>\ndeal with \"undefined\" when you encounter it (in this sense \"undefined\"<br>\nmay just indicates an error in the definition, no different from other<br>\npossible definition errors), while in the programming language<br>\nperspective you want to ensure from the start that you <em>never</em> encounter<br>\n\"undefined\".</p>\n<p>Anyway, thanks for the detailed responses!</p>",
        "id": 222301529,
        "sender_full_name": "Email Gateway",
        "timestamp": 1610374465
    },
    {
        "content": "<p>From: Lawrence Paulson &lt;<a href=\"mailto:lp15@cam.ac.uk\">lp15@cam.ac.uk</a>&gt;<br>\nPerhaps it would work better if you formalised a more traditional operational semantics, making explicit the idea of an execution becoming stuck (due to either an error in the semantics or a runtime error). Presumably an evaluation function could be refined from that.</p>\n<p>Larry</p>",
        "id": 222302364,
        "sender_full_name": "Email Gateway",
        "timestamp": 1610374915
    },
    {
        "content": "<p>From: David Kretzmer &lt;<a href=\"mailto:david.k@posteo.de\">david.k@posteo.de</a>&gt;<br>\nDo I understand correctly that by \"more traditional\" you mean defining<br>\nthe semantics by a transition relation using, e.g., an inductive<br>\npredicate? Initially the semantics actually was defined using an<br>\ninductive predicate, and then \"undefined\" is indeed not a problem.<br>\nHowever, the semantics needs to detect and handle many different runtime<br>\nerrors, which led to many similar but slightly different rules in the<br>\ntransition relation. For me, defining the same semantics in a functional<br>\nstyle was more concise.</p>",
        "id": 222331967,
        "sender_full_name": "Email Gateway",
        "timestamp": 1610387301
    }
]