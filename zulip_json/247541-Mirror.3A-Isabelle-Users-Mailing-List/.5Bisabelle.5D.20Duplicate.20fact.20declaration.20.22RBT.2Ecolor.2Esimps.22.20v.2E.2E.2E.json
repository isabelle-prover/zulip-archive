[
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\nIf I declare both a datatype and a function of the same name t in the same <br>\ntheory, I get</p>\n<p>Duplicate fact declaration \"t.simps\" vs. \"t.simps\"</p>\n<p>because both commands declare a fact collection of that name. Command hide_fact <br>\ndoesn't help. Any way around this? Maybe witn some ML name space magic?</p>\n<p>Thanks<br>\nTobias<br>\n<a href=\"/user_uploads/14278/W0OWBDCa2dV5ifJY_xo1bFMe/smime.p7s\">smime.p7s</a></p>",
        "id": 206929146,
        "sender_full_name": "Email Gateway",
        "timestamp": 1597411960
    },
    {
        "content": "<p>From: Peter Lammich &lt;<a href=\"mailto:lammich@in.tum.de\">lammich@in.tum.de</a>&gt;<br>\ndatatype t = FOO | BAR</p>\n<p>setup ‹Sign.mandatory_path \"foo\"›<br>\n  fun t :: \"nat ⇒ nat\" where \"t x = Suc x\"<br>\n  setup ‹Sign.parent_path›</p>\n<p>thm t.simps<br>\n  thm foo.t.simps</p>",
        "id": 206931192,
        "sender_full_name": "Email Gateway",
        "timestamp": 1597413149
    },
    {
        "content": "<p>From: Peter Lammich &lt;<a href=\"mailto:lammich@in.tum.de\">lammich@in.tum.de</a>&gt;<br>\nAnd here the properly localised version:</p>\n<p>datatype t = FOO | BAR</p>\n<p>context begin<br>\n    local_setup ‹Local_Theory.map_background_naming<br>\n(Name_Space.mandatory_path \"foo\")›    <br>\n    fun t :: \"nat ⇒ nat\" where \"t x = Suc x\"<br>\n  end</p>\n<p>thm t.simps<br>\n  thm foo.t.simps</p>",
        "id": 206931731,
        "sender_full_name": "Email Gateway",
        "timestamp": 1597413501
    }
]