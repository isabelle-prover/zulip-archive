[
    {
        "content": "<p>From: Alexandra Graß &lt;<a href=\"mailto:alexandra.grass@tum.de\">alexandra.grass@tum.de</a>&gt;<br>\nHello,</p>\n<p>while trying to define a function, I encountered an error <code>Tactic failed</code> when introducing a let-binding using <code>inf</code> and <code>sup</code> operators. This problem was already discussed on Zulip [1] as well.</p>\n<p>Thanks to the help of Mathias Fleury, I managed to construct a minimal example highlighting the problem:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">function</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">sequential</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"nat set ⇒ nat set\"</span><span class=\"w\"> </span><span class=\"kp\">where</span>\n<span class=\"w\">  </span><span class=\"s\">\"foo old = (</span>\n<span class=\"s\">      let new = old ∩ old in</span>\n<span class=\"s\">      if new = old then</span>\n<span class=\"s\">          foo new</span>\n<span class=\"s\">      else</span>\n<span class=\"s\">        foo new)\"</span>\n<span class=\"w\">  </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">pat_completeness</span><span class=\"w\"> </span><span class=\"n\">auto</span>\n</code></pre></div>\n<p>does show the <code>Tactic failed</code> error, but</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">function</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">sequential</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"nat set ⇒ nat set\"</span><span class=\"w\"> </span><span class=\"kp\">where</span>\n<span class=\"w\">  </span><span class=\"s\">\"foo old = (</span>\n<span class=\"s\">      let new = old ∩ old in</span>\n<span class=\"s\">      if new = old then</span>\n<span class=\"s\">          foo old ∩ old</span>\n<span class=\"s\">      else</span>\n<span class=\"s\">        foo new)\"</span>\n<span class=\"w\">  </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">pat_completeness</span><span class=\"w\"> </span><span class=\"n\">auto</span>\n</code></pre></div>\n<p>does not. Replacing <code>new</code> (i.e. copy-pasting the rhs of the let binding) in any of the other lines does not fix the problem. Other trivial operations such as <code>old ∪ {}</code> do the job (i.e. invoking the error) as well.</p>\n<p>Is this a known issue? Copy-pasting definitions is not really an option for the algorithm I'm trying to formalize, as it would seriously clutter the code &amp; obfuscate the algorithm's mechanism.</p>\n<p>Any suggestions are highly appreciated.</p>\n<p>Thanks in advance,<br>\nAlex</p>\n<p>[1] <a href=\"#narrow/stream/238552-Beginner-Questions/topic/Mutual.20.26.20partial.20recursion.20.E2.80.93.20Tactic.20failed&lt;https://isabelle.zulipchat.com/#narrow/stream/238552-Beginner-Questions/topic/Mutual.20.26.20partial.20recursion.20.E2.80.93.20Tactic.20failed\">https://isabelle.zulipchat.com/#narrow/stream/238552-Beginner-Questions/topic/Mutual.20.26.20partial.20recursion.20.E2.80.93.20Tactic.20failed&lt;https://isabelle.zulipchat.com/#narrow/stream/238552-Beginner-Questions/topic/Mutual.20.26.20partial.20recursion.20.E2.80.93.20Tactic.20failed</a>&gt;</p>",
        "id": 389270545,
        "sender_full_name": "Email Gateway",
        "timestamp": 1693944030
    }
]