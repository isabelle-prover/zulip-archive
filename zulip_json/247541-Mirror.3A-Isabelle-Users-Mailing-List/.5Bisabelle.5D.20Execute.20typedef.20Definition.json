[
    {
        "content": "<p>From: \"Stüber, Sebastian\" &lt;<a href=\"mailto:stueber@se-rwth.de\">stueber@se-rwth.de</a>&gt;<br>\nDear all,<br>\nI am trying to use a \"typedef\" datatype for code execution.<br>\nWhen I am executing the definition, it fails with an \"Abstraction violation\".</p>\n<p>Can I add code-lemmata so that the definition \"conv\" (see below) is executable?</p>\n<p>The theory:<br>\ntypedef evenNat = \"{x::nat | x. even x}\"<br>\n  by auto<br>\nsetup_lifting type_definition_evenNat</p>\n<p>definition conv::\"nat list ⇒ evenNat list\" where<br>\n\"conv = map Abs_evenNat o filter even\"</p>\n<p>value \"conv [1::nat, 2::nat]\" (* Fails with: \"Abstraction violation\" *)</p>\n<p>Sincerely,<br>\nSebastian</p>\n<hr>\n<p>Sebastian Stüber, M.Sc.RWTH           |    Software Engineering<br>\nLehrstuhl für Software Engineering    |  RWTH Aachen University<br>\nAhornstr. 55, 52074 Aachen, Germany   |  <a href=\"https://www.se-rwth.de\">https://www.se-rwth.de</a><br>\nPhone ++49 241 80-21352<br>\n<a href=\"/user_uploads/14278/0lKJJ1kPVvCaz3VJRtvywXQy/Scratch.thy\">Scratch.thy</a></p>",
        "id": 242572030,
        "sender_full_name": "Email Gateway",
        "timestamp": 1623662905
    },
    {
        "content": "<p>From: \"C.A. Watt\" &lt;<a href=\"mailto:caw77@cam.ac.uk\">caw77@cam.ac.uk</a>&gt;<br>\nDear Sebastian</p>\n<p>My understanding is that you must define conv by way of <br>\n\"lift_definition\". Intuitively, in your current setup you have not <br>\nproven that you are applying Abs_evenNat to only elements of nat that <br>\nare within the evenNat set. So instead of your current definition, you <br>\nshould state:</p>\n<p>lift_definition(code_dt) conv :: \"nat list =&gt; evenNat list\" is \"filter <br>\neven\"<br>\n   by (simp add: list_all_def)</p>\n<p>The proof obligation is exactly the fact that the result of \"filter <br>\neven\" is always within the set that defines evenNat. Note that the <br>\n\"code_dt\" parameter is necessary to allow extraction/execution of conv, <br>\nbecause the abstract type evenNat occuring in the return type has a type <br>\nconstructor applied to it. I don't understand all the technical details <br>\nof this parameter, but it's documented in isar-ref.</p>\n<p>Best wishes<br>\nConrad</p>",
        "id": 242578180,
        "sender_full_name": "Email Gateway",
        "timestamp": 1623666927
    }
]