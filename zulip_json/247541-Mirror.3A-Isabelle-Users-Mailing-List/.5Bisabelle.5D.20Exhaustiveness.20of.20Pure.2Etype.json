[
    {
        "content": "<p>From: Mikhail Mandrykin &lt;<a href=\"mailto:mandrykin@ispras.ru\">mandrykin@ispras.ru</a>&gt;<br>\nHello!</p>\n<p>I've recently noticed an unexpected thing about the quite common type <br>\nproxy ‹Pure.type›. My understanding is that it's convenient to use for <br>\ndefining type-dependent polymorphic constants, including type class <br>\nmembers with no normal parameters (say, some abstract number ascribed to <br>\na type such as its assumed physical size). The thing is, I can't find <br>\nany exhaustiveness theorem related to the constant ‹Pure.type› and its <br>\ntype ‹'a itself› e.g. \"x ≡ Pure.type\" or \"(x ≡ Pure.type ⟹ P) ⟹ P\". <br>\nAnalogous lemma exists for the unit type in HOL and the type itself <br>\nlooks similar enough to Haskell's Proxy datatype with a single Proxy <br>\nconstructor (which should imply exhaustiveness as with other datatypes). <br>\nThe non-exhaustiveness of ‹'a itself› causes a problem when one <br>\naccidentally defines some class axiom with an extra term variable ‹t :: <br>\n'a itself› in place of the ‹Pure.type› constant, sometimes the axiom <br>\nthen cannot be proved if the corresponding instance definition is <br>\nspecified using the ‹Pure.type› constant, since the definition in the <br>\ngoal can be neither unfolded nor refined using the exhaustiveness <br>\nrewrite/elimination rule. Is this situation intentional due to some <br>\nlogical limitations I'm not aware of? Of course ‹Pure.type› is part of <br>\nPure and not even HOL, so it's not technically related to datatypes, but <br>\nis such exhaustiveness axiom incompatible with something important?</p>\n<p>Regards, Mikhail</p>",
        "id": 234905426,
        "sender_full_name": "Email Gateway",
        "timestamp": 1618599980
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nThere is indeed no logical specification of 'a itself as \"polymorphic unit<br>\ntype\" in Pure. It could be added in principle, but it is not required:<br>\nde-facto the only term used in specifications should be Pure.type.</p>\n<p>If there is an \"accident\" in user-space theory libraries somewhere, why not<br>\nrepair it where it actually happened?</p>\n<p>Makarius</p>",
        "id": 238982112,
        "sender_full_name": "Email Gateway",
        "timestamp": 1621175037
    },
    {
        "content": "<p>From: Mikhail Mandrykin &lt;<a href=\"mailto:mandrykin@ispras.ru\">mandrykin@ispras.ru</a>&gt;<br>\nMakarius писал 2021-05-16 17:23:</p>\n<blockquote>\n<p>de-facto the only term used in specifications should be Pure.type.<br>\nIf only the ‹Pure.type› form syntactically occurs in terms then there's <br>\nindeed no issue. I initially got confused because of the quite <br>\nstraightforward analogy with types like Proxy and thought just a term ‹t <br>\n:: 'a itself› can also be given e.g. in definitions like ‹rep_length t  <br>\n≡ length (layout_of t)› for \"t :: 'a itself\" and therefore tried to make <br>\nthe class axioms more general to account for such definitions, but still <br>\nmissed some cases. So without extending Pure the correct approach is <br>\njust that such \"t\" shorthands should not even occur</p>\n</blockquote>\n<p>Mikhail</p>",
        "id": 239093131,
        "sender_full_name": "Email Gateway",
        "timestamp": 1621259785
    }
]