[
    {
        "content": "<p>From: Wolfgang Jeltsch &lt;<a href=\"mailto:wolfgang-it@jeltsch.info\">wolfgang-it@jeltsch.info</a>&gt;<br>\nHello!</p>\n<p>I want to define a locale that (among other things) fixes a type <code>'a</code><br>\nand assumes that the type <code>'a</code> is infinite but doesn’t fix any variables<br>\nwith types that include <code>'a</code>.</p>\n<p>I can write the following:</p>\n<p>locale l = assumes \"infinite (UNIV :: 'a set)\"</p>\n<p>This results in the following output:</p>\n<p>locale l<br>\n      assumes \"l TYPE('a)\" <br>\n    Additional type variable(s) in locale specification \"l\": 'a</p>\n<p>Unfortunately, it seems that I cannot really make use of this type<br>\nvariable later. Let’s say I add the following declaration to the locale<br>\ncontext:</p>\n<p>type_synonym t = \"'a ⇒ 'a\"</p>\n<p>This results in the following output, of which the “Extra variables”<br>\npart is an error message:</p>\n<p>Ignoring sort constraints in type variables(s): \"'a\"<br>\n    in type abbreviation \"t\" <br>\n    Extra variables on rhs: \"'a\"<br>\n    The error(s) above occurred in type abbreviation \"t\"</p>\n<p>I can also try out the following declaration:</p>\n<p>type_synonym 'a t = \"'a ⇒ 'a\"</p>\n<p>However, this results in the following error message:</p>\n<p>Locally fixed type arguments \"'a\" in type declaration \"t\"</p>\n<p>How can I achieve what I want?</p>\n<p>All the best,<br>\nWolfgang</p>",
        "id": 228408139,
        "sender_full_name": "Email Gateway",
        "timestamp": 1614691434
    },
    {
        "content": "<p>From: Christian Sternagel &lt;<a href=\"mailto:c.sternagel@gmail.com\">c.sternagel@gmail.com</a>&gt;<br>\nDear Wolfgang,</p>\n<p>On Tue, Mar 2, 2021, 14:25 Wolfgang Jeltsch &lt;<a href=\"mailto:wolfgang-it@jeltsch.info\">wolfgang-it@jeltsch.info</a>&gt;<br>\nwrote:</p>\n<blockquote>\n<p>Hello!</p>\n<p>I want to define a locale that (among other things) fixes a type <code>'a</code><br>\nand assumes that the type <code>'a</code> is infinite but doesn’t fix any variables<br>\nwith types that include <code>'a</code>.</p>\n<p>I can write the following:</p>\n<p>locale l = assumes \"infinite (UNIV :: 'a set)\"<br>\n</p>\n</blockquote>\n<p>I think this assumption is fine. The problems below result from incorrect<br>\nusage of type_synonym. But that is not really related to the initial<br>\nquestion of fixing a type variable for some infinite type.</p>\n<p>I don't think that type_synonym is localized (and I'm unsure whether it<br>\ncould be made so). If that assumption is correct then type_synonym only<br>\nmakes sense in a global context.</p>\n<p>cheers</p>\n<p>chris</p>\n<blockquote>\n<p>This results in the following output:</p>\n<p>locale l<br>\n      assumes \"l TYPE('a)\"<br>\n    Additional type variable(s) in locale specification \"l\": 'a</p>\n<p>Unfortunately, it seems that I cannot really make use of this type<br>\nvariable later. Let’s say I add the following declaration to the locale<br>\ncontext:</p>\n<p>type_synonym t = \"'a ⇒ 'a\"</p>\n</blockquote>\n<blockquote>\n<p>This results in the following output, of which the “Extra variables”<br>\npart is an error message:</p>\n<p>Ignoring sort constraints in type variables(s): \"'a\"<br>\n    in type abbreviation \"t\"<br>\n    Extra variables on rhs: \"'a\"<br>\n    The error(s) above occurred in type abbreviation \"t\"</p>\n<p>I can also try out the following declaration:</p>\n<p>type_synonym 'a t = \"'a ⇒ 'a\"</p>\n<p>However, this results in the following error message:</p>\n<p>Locally fixed type arguments \"'a\" in type declaration \"t\"</p>\n<p>How can I achieve what I want?</p>\n<p>All the best,<br>\nWolfgang</p>\n</blockquote>",
        "id": 228409863,
        "sender_full_name": "Email Gateway",
        "timestamp": 1614692167
    },
    {
        "content": "<p>From: \"Thiemann, René\" &lt;<a href=\"mailto:Rene.Thiemann@uibk.ac.at\">Rene.Thiemann@uibk.ac.at</a>&gt;<br>\nDear Wolfgang,</p>\n<p>you can get rid of the warning of the locale declaration by added some dummy argument that<br>\nfixes the type. For example,</p>\n<p>locale l = <br>\n  fixes ty :: \"'a itself” <br>\n  assumes \"infinite (UNIV :: 'a set)”</p>\n<p>as for the type_synonym problem, I think that Chris already hit the point.</p>\n<p>Best,<br>\nRené</p>",
        "id": 228413436,
        "sender_full_name": "Email Gateway",
        "timestamp": 1614693626
    },
    {
        "content": "<p>From: Wolfgang Jeltsch &lt;<a href=\"mailto:wolfgang-it@jeltsch.info\">wolfgang-it@jeltsch.info</a>&gt;<br>\nAh, that makes sense. Thanks for this explanation.</p>\n<p>Initially I thought that the impossibility of using <code>type_synonym</code> in<br>\nthe way I wanted would pose a problem, but it seems that it can be<br>\nworked around. My solution is to leave the locale context immediately<br>\nafter declaring the locale, declare the type synonym outside the locale<br>\ncontext, and add <code>(in l)</code> to every lemma that needs the infinity<br>\nconstraint. This seems to work fine for me.</p>\n<p>All the best,<br>\nWolfgang</p>",
        "id": 228419195,
        "sender_full_name": "Email Gateway",
        "timestamp": 1614695670
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nNote that you can re-enter the locale context at any time, using</p>\n<p>context l<br>\nbegin</p>\n<p>lemma ...</p>\n<p>lemma ...</p>\n<p>end</p>\n<p>Makarius</p>",
        "id": 228574858,
        "sender_full_name": "Email Gateway",
        "timestamp": 1614770151
    },
    {
        "content": "<p>From: Wolfgang Jeltsch &lt;<a href=\"mailto:wolfgang-it@jeltsch.info\">wolfgang-it@jeltsch.info</a>&gt;<br>\nYes, that’s possible too, and is actually what I used to do in such<br>\nsituations. However, I discovered that in this particular formalization<br>\nI often don’t need the infinity constraint, so that it seemed even more<br>\nnatural to me to use <code>(in l)</code> in the relevant places.</p>\n<p>All the best,<br>\nWolfgang</p>",
        "id": 228597844,
        "sender_full_name": "Email Gateway",
        "timestamp": 1614780844
    }
]