[
    {
        "content": "<p>From: Thomas Sewell &lt;<a href=\"mailto:tals4@cam.ac.uk\">tals4@cam.ac.uk</a>&gt;<br>\nI've come across a really annoying situation in which the simplifier went into a loop.</p>\n<p>After a lot of fiddling, I can exhibit a minimised example:</p>\n<p>lemma<br>\n  \"P (f x) ==&gt; f x = f y ==&gt; y = x ==&gt; Q\"<br>\n  apply simp</p>\n<p>This seems to put the simplifier into a cycle, rewriting \"f x -&gt; f y\" and then \"y -&gt; x\" back again. Curiously, of the six possible orders of the three assumptions in this goal, this is the only one that results in this cycle.</p>\n<p>Of course, this actual goal isn't very interesting. Also, it can be normalised into a safe form by calling clarify or hypsubst or similar before calling the simplifier.</p>\n<p>In the actual problem I have, the problematic pattern above is exposed by doing some simplification, starting from a case that looks a bit more like this:</p>\n<p>lemma<br>\n  \"    nodes (next_C prev_old) = Some nd'd ==&gt;<br>\n       nodes (next_C nd'd) = Some nd' ==&gt;<br>\n       nodes (prev_C nd'd) = Some nd'a ==&gt;<br>\n       nodes (prev_C nd'a) = Some nd'e ==&gt;<br>\n       next_C nd'e = prev_C nd'd ==&gt;<br>\n       nodes (prev_C nd'd) = Some nd_old ==&gt;<br>\n       nodes (prev_C nd_old) = Some prev_old ==&gt;<br>\n       prev_C nd_old = prev_C nd' ==&gt;<br>\n       prev_C nd' = next_C ==&gt;<br>\n       Q\"<br>\n  apply simp</p>\n<p>As might be obvious, this is about some kind of doubly-linked list implementation. The proof requires a case division based on whether some of the pointers might alias. It happens that this kind of list permits small cycles, so those cases cannot be ruled out by separation arguments or similar. This creates a lot of trivial special cases, and one of those cases happens to include the a version of this simplifier-looping behaviour. This can be solved, eventually, by doing some steps by hand, but both the final proof and the process of producing it are unpleasant.</p>\n<p>I'm raising this to ask if anyone has any idea what might be possible in this kind of situation? I'm hoping for some kind of tweak to the automation that gets rid of this pattern or lets the simplifier cope with it. Obviously the simplifier is a bit unsafe to use blindly in a general setting, since there may be assumptions in the goal which lead to loops when they're used as rewrites. I've made some progress in the past by using variants like (simp(no_asm_simp)) and (simp(no_asm_use)), or controlling what the simplifier can do with (simp only: ...). None of that seems to be much help here, as different simp configurations will either fail to make any useful progress or expose the problematic case. Maybe metis or meson could solve the whole problem if supplied with enough rules about the relevant datatypes, but I haven't managed to get that to work. In general, it seems to be a problem that, once the simplifier is misbehaving, it's a lot of work to replace it with any other automation.</p>\n<p>Any thoughts?</p>\n<p>Update: I've found one solution to my own problem, using repeat_new from one of the Eisbach libraries to repeat (safe | simp(no_asm_use) | simp only:). I wonder if anyone can think of something better.</p>\n<p>Best regards to all,<br>\n    Thomas.</p>",
        "id": 290765875,
        "sender_full_name": "Email Gateway",
        "timestamp": 1658759423
    },
    {
        "content": "<p>From: Thomas Sewell &lt;<a href=\"mailto:tals4@cam.ac.uk\">tals4@cam.ac.uk</a>&gt;<br>\nMy apologies, there was a typo in the larger of those two pasted goal statements.</p>\n<p>The second one should read:</p>\n<p>lemma<br>\n  \"    nodes (next_C prev_old) = Some nd'd ==&gt;<br>\n       nodes (next_C nd'd) = Some nd' ==&gt;<br>\n       nodes (prev_C nd'd) = Some nd'a ==&gt;<br>\n       nodes (prev_C nd'a) = Some nd'e ==&gt;<br>\n       next_C nd'e = prev_C nd'd ==&gt;<br>\n       nodes (prev_C nd'd) = Some nd_old ==&gt;<br>\n       nodes (prev_C nd_old) = Some prev_old ==&gt;<br>\n       prev_C nd_old = prev_C nd' ==&gt;<br>\n       prev_C nd' = next_C prev_old ==&gt;<br>\n       Q\"<br>\n  apply simp</p>\n<p>Also, I should mention that I've tested that this behaviour in a recent Isabelle repository version and also in the 2020 release. I'm guessing that the relevant parts of the simplifier have been stable for quite a while.</p>\n<p>Best regards again,<br>\n    Thomas.</p>",
        "id": 290768136,
        "sender_full_name": "Email Gateway",
        "timestamp": 1658760378
    }
]