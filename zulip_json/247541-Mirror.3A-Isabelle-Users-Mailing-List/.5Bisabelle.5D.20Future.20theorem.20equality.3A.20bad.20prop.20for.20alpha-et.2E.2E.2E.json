[
    {
        "content": "<p>From: Kevin Kappelmann &lt;<a href=\"mailto:kevin.kappelmann@tum.de\">kevin.kappelmann@tum.de</a>&gt;<br>\nDear all,</p>\n<p>Attached you can find an example that works in Isabelle/jEdit, builds <br>\nwith a single thread (passing the <code>-o threads=1</code> option) but does not <br>\nbuild using multi-threaded builds.</p>\n<p>The problem here is that function <code>future_result</code> in <code>thm.ML</code> compares <br>\nthe original proposition to its future counterpart using <br>\nalpha-equivalence, not alpha-eta-equivalence:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"n\">val</span><span class=\"w\"> </span><span class=\"o\">_</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"kt\">prop</span><span class=\"w\"> </span><span class=\"n\">aconv</span><span class=\"w\"> </span><span class=\"n\">orig_prop</span><span class=\"w\"> </span><span class=\"n\">orelse</span><span class=\"w\"> </span><span class=\"n\">err</span><span class=\"w\"> </span><span class=\"s\">\"bad prop\"</span>\n</code></pre></div>\n<p>I propose to change this line to use alpha-eta-equivalence:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"n\">val</span><span class=\"w\"> </span><span class=\"o\">_</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Envir.aeconv</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"kt\">prop</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">orig_prop</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">orelse</span><span class=\"w\"> </span><span class=\"n\">err</span><span class=\"w\"> </span><span class=\"s\">\"bad prop\"</span><span class=\"n\">;</span>\n</code></pre></div>\n<p>A corresponding patch is attached. To reproduce the error, unzip the <br>\nattached session and run <code>isabelle build -vbD &lt;path_to_session&gt;</code>.</p>\n<p>The following error is shown:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"n\">Thm_Eq</span><span class=\"w\"> </span><span class=\"n\">FAILED</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">see</span><span class=\"w\"> </span><span class=\"k\">also</span><span class=\"w\"> </span><span class=\"s\">\"isabelle build_log -H Error Thm_Eq\"</span><span class=\"o\">)</span>\n<span class=\"n\">***</span><span class=\"w\"> </span><span class=\"n\">exception</span><span class=\"w\"> </span><span class=\"n\">THM</span><span class=\"w\"> </span><span class=\"n\">0</span><span class=\"w\"> </span><span class=\"n\">raised</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">line</span><span class=\"w\"> </span><span class=\"n\">832</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"s\">\"thm.ML\"</span><span class=\"o\">):</span><span class=\"w\"> </span><span class=\"n\">future_result</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">bad</span><span class=\"w\"> </span><span class=\"kt\">prop</span>\n<span class=\"n\">Unfinished</span><span class=\"w\"> </span><span class=\"n\">session</span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">):</span><span class=\"w\"> </span><span class=\"n\">Thm_Eq</span>\n</code></pre></div>\n<p>Using a single-threaded build (<code>isabelle build -vbD &lt;path_to_session&gt; -o \nthreads=1</code>) or opening the attached theory in Isabelle/jEdit works as <br>\nexpected.</p>\n<p>This refers to Isabelle rev. b73df63e0f52 (current development version).</p>\n<p>Best wishes,</p>\n<p>Kevin</p>\n<p>PS. The attached example might seem a bit artificial, but the same <br>\nproblem is triggered in a different context in a formalisation of mine.</p>\n<p><a href=\"/user_uploads/14278/cQabPSRJEzELcMAqWgwhkYj3/future_thm_eq_aeconv.patch\">future_thm_eq_aeconv.patch</a><br>\n<a href=\"/user_uploads/14278/T4aLXrjBdh4X14scYYcRuURM/Future_Thm_Eq.zip\">Future_Thm_Eq.zip</a></p>",
        "id": 433862937,
        "sender_full_name": "Email Gateway",
        "timestamp": 1713383173
    },
    {
        "content": "<p>From: Peter Lammich &lt;<a href=\"mailto:lammich@in.tum.de\">lammich@in.tum.de</a>&gt;<br>\nI remember problems with PARALLEL_ALLGOALS, that also behaved <br>\ndifferently in sequential and parallel builds ... there, I got the reply <br>\nthat I was using it outside its specification anyway... and thus it is <br>\nacceptable for it to fail or not depending on your machine/build config. <br>\nBut your example looks like it should be valid in any case.</p>",
        "id": 433864112,
        "sender_full_name": "Email Gateway",
        "timestamp": 1713383631
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nOn 17/04/2024 21:38, Kevin Kappelmann wrote:</p>\n<blockquote>\n<p>The problem here is that function <code>future_result</code> in <code>thm.ML</code> compares the <br>\noriginal proposition to its future counterpart using alpha-equivalence, not <br>\nalpha-eta-equivalence:</p>\n</blockquote>\n<p>Alpha-equivalence is what the inference kernel usually does. Deviating from <br>\nthat needs very thorough investigations and argumentation based on the history <br>\nof the sources etc. \"I prefer to have it differently\" is not sufficient.</p>\n<blockquote>\n<p>The following error is shown:</p>\n<p><code>\nThm_Eq FAILED (see also \"isabelle build_log -H Error Thm_Eq\")\n*** exception THM 0 raised (line 832 of \"thm.ML\"): future_result: bad prop\nUnfinished session(s): Thm_Eq\n</code></p>\n<p>Using a single-threaded build (<code>isabelle build -vbD &lt;path_to_session&gt; -o \nthreads=1</code>) or opening the attached theory in Isabelle/jEdit works as expected.</p>\n<p>This refers to Isabelle rev. b73df63e0f52 (current development version).</p>\n</blockquote>\n<p>I've briefly tested it with the last 4-5 official releases, and they are all <br>\nthe same in this respect.</p>\n<p>Thus this feature-request needs to be postponed after the Isabelle2024 <br>\nrelease: incidently, I plan to re-open some old proof object / proof term <br>\nquestions then (but not now).</p>\n<blockquote>\n<p>PS. The attached example might seem a bit artificial, but the same problem is <br>\ntriggered in a different context in a formalisation of mine.</p>\n</blockquote>\n<p>The example is indeed vacuous. It is possible to make the system break down in <br>\nmany ways.</p>\n<p>Can you show your real applications? (Right now I am busy working towards <br>\nIsabelle2024, though.)</p>\n<p>Makarius</p>",
        "id": 433866316,
        "sender_full_name": "Email Gateway",
        "timestamp": 1713384433
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\n(While waiting for Isabelle2024-RC2 to build ...)</p>\n<p>Note that the \"implementation\" manual section \"4.2. Tactics\" explicitly states <br>\nsome semantic well-formedness conditions, including the remark:</p>\n<p>\"Some of these conditions are checked by higher-level goal infrastructure<br>\n(§6.3); others are not checked explicitly, and violating them merely results<br>\nin ill-behaved tactics experienced by the user\".</p>\n<p>So my guess from a distance is that the application uses tactics or Isar proof <br>\nmethods that are not well-formed in that sense. (The above example is an <br>\nexample for that, because it changes the main conclusion at will.)</p>\n<p>Makarius</p>",
        "id": 434028481,
        "sender_full_name": "Email Gateway",
        "timestamp": 1713440932
    },
    {
        "content": "<p>From: Kevin Kappelmann &lt;<a href=\"mailto:kevin.kappelmann@tum.de\">kevin.kappelmann@tum.de</a>&gt;<br>\nI changed the tactic in question to produce results that are <br>\nalpha-equivalent and not just alpha-eta equivalent. This fixes the <br>\nproblem in my case.</p>\n<p>In general though, the single-threaded and multi-threaded build should <br>\nuse the same notion of equality. Currently, the single-threaded build <br>\nseems to accept theorems up to alpha-beta-eta equivalence while the <br>\nmulti-threaded build seems to accept up to alpha-beta equivalence, as <br>\nthe theory below illustrates.</p>\n<p>Best wishes,</p>\n<p>Kevin</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">theory</span><span class=\"w\"> </span><span class=\"n\">Thm_Eq</span>\n<span class=\"w\">   </span><span class=\"kp\">imports</span><span class=\"w\"> </span><span class=\"n\">Pure</span>\n<span class=\"k\">begin</span>\n\n<span class=\"k\">declare</span><span class=\"w\"> </span><span class=\"o\">[[</span><span class=\"n\">eta_contract</span><span class=\"o\">=</span><span class=\"n\">false</span><span class=\"o\">]]</span>\n\n<span class=\"k\">axiomatization</span><span class=\"w\"> </span><span class=\"n\">P</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"(prop ⇒ prop) ⇒ prop\"</span><span class=\"w\"> </span><span class=\"kp\">and</span><span class=\"w\"> </span><span class=\"n\">Q</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"prop ⇒ prop\"</span>\n<span class=\"kp\">where</span><span class=\"w\"> </span><span class=\"n\">PQ</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"PROP P Q\"</span>\n\n<span class=\"c\">(*works in all cases*)</span>\n<span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">beta_PQ</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"PROP (λx. x) (P Q)\"</span>\n<span class=\"w\">   </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"w\"> </span><span class=\"s\">‹fn thm =&gt; Seq.single (Goal.protect 0 @{thm PQ})›</span><span class=\"o\">)</span>\n<span class=\"w\">   </span><span class=\"k\">done</span>\n\n<span class=\"c\">(*only works with threads=1*)</span>\n<span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">eta_PQ</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"PROP P (λx. Q x)\"</span>\n<span class=\"w\">   </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"w\"> </span><span class=\"s\">‹fn thm =&gt; Seq.single (Goal.protect 0 @{thm PQ})›</span><span class=\"o\">)</span>\n<span class=\"w\">   </span><span class=\"k\">done</span>\n\n<span class=\"c\">(*only works with threads=1*)</span>\n<span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">beta_eta_PQ</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"PROP (λx. x) (P (λx. Q x))\"</span>\n<span class=\"w\">   </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"w\"> </span><span class=\"s\">‹fn thm =&gt; Seq.single (Goal.protect 0 @{thm PQ})›</span><span class=\"o\">)</span>\n<span class=\"w\">   </span><span class=\"k\">done</span>\n\n<span class=\"k\">end</span>\n</code></pre></div>",
        "id": 435218512,
        "sender_full_name": "Email Gateway",
        "timestamp": 1713972549
    }
]