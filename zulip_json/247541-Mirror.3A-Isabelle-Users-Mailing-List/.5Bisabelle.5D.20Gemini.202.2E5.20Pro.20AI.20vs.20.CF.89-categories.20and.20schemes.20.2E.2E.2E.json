[
    {
        "content": "<p>From: Christopher Mary &lt;<a href=\"mailto:christopher.mary@outlook.com\">christopher.mary@outlook.com</a>&gt;<br>\nDear Larry Paulson, <br>\nDear Isabelle list,</p>\n<p>Thank you for the report and raw data. I would also like to mimick Larry and share a report of my such experiments, for the interest of the Isabelle community who may not be up to date to the latest weekly non-expected benefits of AI:</p>\n<p>The topic of computational methods for categories, ω-categories, sheaves and schemes dates back to authors such as David Rydeheard, Tatsuya Hagino, and Kosta Dosen.</p>\n<p>A key challenge, even for those specialists expert-authors, has always been how to quickly scaffold and prototype a specialist computer experiment, without literally becoming software engineers pros themselves.</p>\n<p>I can share my experience report that, with tools such as Gemini 2.5 Pro AI released last month, you don't need to be a \"pro\" to bring your specialists math synthesized ideas into usable prototypes for further experiment and theoretical discovery:</p>\n<p>« Emdash: A Dependently Typed Logical Framework for Computational Synthetic Category Theory and Functorial Elaboration »</p>\n<p><a href=\"https://github.com/hotdocx/emdash/blob/main/docs/emdash.pdf\">https://github.com/hotdocx/emdash/blob/main/docs/emdash.pdf</a></p>\n<p><code>emdash</code> is a new functorial programming language for ω-categories and schemes implemented in Typescript. <code>emdash</code> features a bidirectional type checker with higher-order unification-based hole solving for interactive proof, definitional equality via βδι-reduction (including user-supplied rewrite rules and unification rules), Higher-Order Abstract Syntax (HOAS) for binders, and features a new \"functorial elaboration\" paradigm where coherence laws (e.g., functoriality, naturality) for kernel constructors are definitionally verified via Kosta Dosen techniques. <code>emdash</code> was 99% generated by Gemini 2.5 Pro based on my deep specification of the <code>emdash</code> kernel written in the <code>Lambdapi</code> proof assistant:</p>\n<p><a href=\"https://github.com/1337777/cartier/blob/master/cartierSolution18.lp\">https://github.com/1337777/cartier/blob/master/cartierSolution18.lp</a></p>\n<p>A one-liner description of this spec is as follows: for the functoriality rule  <code>(F b) ∘&gt; (F a)  ↪  F (b ∘&gt; a)</code> it is clear that the size of the composition term <code>(b ∘&gt; a)</code> in the RHS is smaller/decreasing; but for the naturality rule  <code>(ϵ._X) ∘&gt; (G a)  ↪  (F a) _∘&gt; (ϵ._Y)</code> it is not clear how to make the computation progress towards a smaller RHS, and the key insight by Kosta Dosen is that the RHS <code>_∘&gt;</code> is actually a Yoneda/hom action/transport which is syntactically distinct than (but semantically equivalent to) the usual composition <code>∘&gt;</code> ... Moreover there is strong evidence that similar insights can be extended to computer implementations for simplicial-cubical ω-categories, sheaves and schemes (but I will try hard to stay agreeable, and stop here to what everyone can agree to, lol) </p>\n<p>You can try and experiment with <code>emdash</code> functorial programming within the <code>hotdocx</code> publisher web app:</p>\n<p><a href=\"https://hotdocx.github.io/#/hdx/25188CHRI27000\">https://hotdocx.github.io/#/hdx/25188CHRI27000</a></p>\n<hr>\n<p>À bientôt,</p>\n<p>Christopher Mary</p>\n<p>P.S. <code>hotdocx</code>, the hottest fastest calendared marketplace publisher, was also 99% generated by Gemini 2.5 AI and is an open-source GitHub sponsored project: <a href=\"https://github.com/sponsors/hotdocx\">https://github.com/sponsors/hotdocx</a></p>",
        "id": 528654339,
        "sender_full_name": "Email Gateway",
        "timestamp": 1752497324
    }
]