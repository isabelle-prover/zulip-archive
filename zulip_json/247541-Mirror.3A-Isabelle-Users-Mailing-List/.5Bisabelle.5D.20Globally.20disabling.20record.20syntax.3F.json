[
    {
        "content": "<p>From: Dominic Mulligan &lt;<a href=\"mailto:cl-isabelle-users@lists.cam.ac.uk\">cl-isabelle-users@lists.cam.ac.uk</a>&gt;<br>\nHi,</p>\n<p>For a project we are systematically using the <code>datatype_record</code> package in<br>\nHOL-Library as opposed to the standard <code>record</code> type.  Unfortunately, when<br>\nusing <code>datatype_record</code> we suffer ambiguity everywhere when trying to use<br>\nrecord syntax owing to the use of the same functional record update syntax<br>\nfor both record packages.  Is there an easy way to globally disable the<br>\nsyntax in <code>Record.thy</code> throughout a project to avoid this?</p>\n<p><code>HOL-Library.Datatype_Records.thy</code> contains a <code>no_syntax</code> declaration that<br>\nseems to try to do this, however in practice this doesn't seem to work.</p>\n<p>Thanks,<br>\nDominic</p>",
        "id": 400783104,
        "sender_full_name": "Email Gateway",
        "timestamp": 1699376954
    },
    {
        "content": "<p>From: Thomas Sewell &lt;<a href=\"mailto:tals4@cam.ac.uk\">tals4@cam.ac.uk</a>&gt;<br>\nI haven't investigated whether this applies to record syntax, but this general advice might be relevant.</p>\n<p>Does the <code> no_syntax </code> declaration work the Datatype_Records theory itself, or in any other theory that only includes that one? If so, the difficulty might be with theory merges.</p>\n<p>Many things are a little awkward to disable in Isabelle because of the way theory/context merges work. The various datasets are combined into something like a union. So, if a problematic simp rule is added to the simpset in library theory A, and explicitly removed in theory B, a later theory C which imports both B and other parts of the library will tend to have the problematic rule appear again, because it will be present in the combined simpset if it was present in any of the simpsets to be merged, i.e. if there's any theory inclusion path from A-&gt;C which doesn't go via the deletion in B.</p>\n<p>It's possible you can make the notation deletion work by ensuring that all the library inclusions in your development go through a small number of include theories, and that they explicitly do the necessary deletions.</p>\n<p>One could imagine a system that tried to respect explicit deletions downstream, but this would require a more complex datastructure. Usually what's simpler is to try to avoid ever needing deletions. Have you considered using update notation that is similar but uses a different bit of syntax to the builtin datatype one?</p>\n<p>Best regards,<br>\n    Thomas.</p>",
        "id": 400921384,
        "sender_full_name": "Email Gateway",
        "timestamp": 1699441533
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nWe have that already: declarations wrt. local contexts, e.g. 'locale' or 'bundle'.</p>\n<p>This does not work for raw 'syntax' or 'no_syntax', because it is too low-level.</p>\n<p>Makarius</p>",
        "id": 400940986,
        "sender_full_name": "Email Gateway",
        "timestamp": 1699449036
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nActually, these commands are already \"localized\" since Isabelle2021-1 <br>\n(December 2021). See NEWS:</p>\n<ul>\n<li>Commands 'syntax' and 'no_syntax' now work in a local theory context,<br>\nbut in contrast to 'notation' and 'no_notation' there is no proper way<br>\nto refer to local entities. Note that local syntax works well with<br>\n'bundle', e.g. see \"lattice_syntax\" vs. \"no_lattice_syntax\" in theory<br>\nMain of Isabelle/HOL.</li>\n</ul>\n<p>(This is merely a side-alley of this thread.)</p>\n<p>Makarius</p>",
        "id": 400942918,
        "sender_full_name": "Email Gateway",
        "timestamp": 1699449689
    },
    {
        "content": "<p>From: Dominic Mulligan &lt;<a href=\"mailto:cl-isabelle-users@lists.cam.ac.uk\">cl-isabelle-users@lists.cam.ac.uk</a>&gt;<br>\nThanks for the replies.</p>\n<p>The <code>no_syntax</code> command appears in <code>Datatype_Records.thy</code> in HOL-Library.<br>\nWe surmised that this was related to different theories importing the HOL<br>\nlibrary and the <code>Datatype_Records.thy</code> ftheory and therefore causing a<br>\nclash between the <code>syntax</code> and <code>no_syntax</code> commands.  Unfortunately it will<br>\nbe hard to rearrange our theory files to try to address this that way, I<br>\nthink.  If there's currently no easy way to handle this other than that<br>\napproach then I think we will consider introducing our own custom syntax or<br>\ncontinue living with the syntax ambiguity which isn't a major problem.</p>\n<p>Thanks,<br>\nDominic</p>",
        "id": 400950291,
        "sender_full_name": "Email Gateway",
        "timestamp": 1699452177
    }
]