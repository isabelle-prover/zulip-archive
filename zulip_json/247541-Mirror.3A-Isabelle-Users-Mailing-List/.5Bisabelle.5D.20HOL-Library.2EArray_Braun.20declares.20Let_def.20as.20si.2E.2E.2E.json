[
    {
        "content": "<p>From: Dominic Mulligan &lt;<a href=\"mailto:cl-isabelle-users@lists.cam.ac.uk\">cl-isabelle-users@lists.cam.ac.uk</a>&gt;<br>\nHi,</p>\n<p>Just a small note observing that the HOL-Library.Array_Braun theory adds<br>\nLet_def to the simpset with a declare:</p>\n<p><a href=\"https://isabelle.in.tum.de/library/HOL/HOL-Data_Structures/Array_Braun.html\">https://isabelle.in.tum.de/library/HOL/HOL-Data_Structures/Array_Braun.html</a></p>\n<p>This has an annoying effect on automation when importing this theory, and<br>\nperhaps should be removed or limited in its scope with a notes, or similar?</p>\n<p>Thanks,<br>\nDominic</p>",
        "id": 420689651,
        "sender_full_name": "Email Gateway",
        "timestamp": 1707496720
    },
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\nDominic,</p>\n<p>The theories in HOL-Data_Structures are all about functional programs and many <br>\nof them declare Let_def [simp]</p>\n<p>Cant't you just disable it with [simp del]?</p>\n<p>Tobias</p>\n<p><a href=\"/user_uploads/14278/UkkCsZ6TpVf6HnEQUdRsHsXQ/smime.p7s\">smime.p7s</a></p>",
        "id": 420960321,
        "sender_full_name": "Email Gateway",
        "timestamp": 1707719432
    },
    {
        "content": "<p>From: Dominic Mulligan &lt;<a href=\"mailto:cl-isabelle-users@lists.cam.ac.uk\">cl-isabelle-users@lists.cam.ac.uk</a>&gt;<br>\nHi Tobias,</p>\n<blockquote>\n<p>The theories in HOL-Data_Structures are all about functional programs and<br>\nmany<br>\nof them declare Let_def [simp]</p>\n</blockquote>\n<p>Yes.  My quibble was this simpset modification having a global—rather than<br>\nlocalised—effect, not the need for the simpset change.</p>\n<blockquote>\n<p>Cant't you just disable it with [simp del]?</p>\n</blockquote>\n<p>Yes, this would work in a narrow technical sense.  However, I don't think<br>\nthis is a practical way of working:</p>\n<p>- We need to remember to do that every time we import the theory, in<br>\naddition to performing point-fixes for suboptimal simpset, notation, and<br>\nwhatever else, setups we inherit from theories distributed with<br>\nIsabelle/HOL and our other external dependencies.  As an Isabelle user I<br>\nsurely should be able to expect that theories distributed with the base<br>\nsystem set up notation and automation in a generally useful state.</p>\n<p>- We incur technical debt as our code becomes littered with point fixes<br>\nfor problems inherited from upstream which—six months in the future—nobody<br>\ncan remember the need for or understand whether they're still relevant.</p>\n<p>- It's just another (minor) hassle when theorem proving and issues like<br>\nthis are why, over time, an increasing amount of brain cycles on large<br>\nproof efforts comes to be dominated by issues related to the theorem<br>\nproving tool itself, rather than the proof at hand.</p>\n<p>- This particular style of working is discouraged by the Isabelle linter<br>\nwhich has an explicit lint dedicated to spotting these types of global<br>\nsimpset changes in \"global_attribute_changes\".</p>\n<p>In this respect, it's far better if problems like this are fixed upstream<br>\nwhen they are noticed.</p>\n<p>Thanks,<br>\nDominic</p>\n<p>On Mon, 12 Feb 2024 at 06:30, Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt; wrote:</p>\n<blockquote>\n<p>Dominic,</p>\n<p>The theories in HOL-Data_Structures are all about functional programs and<br>\nmany<br>\nof them declare Let_def [simp]</p>\n<p>Cant't you just disable it with [simp del]?</p>\n<p>Tobias</p>\n<p>On 09/02/2024 17:38, Dominic Mulligan (via cl-isabelle-users Mailing List)<br>\nwrote:</p>\n<blockquote>\n<p>Hi,</p>\n<p>Just a small note observing that the HOL-Library.Array_Braun theory adds<br>\nLet_def<br>\nto the simpset with a declare:</p>\n<p><a href=\"https://isabelle.in.tum.de/library/HOL/HOL-Data_Structures/Array_Braun.html\">https://isabelle.in.tum.de/library/HOL/HOL-Data_Structures/Array_Braun.html</a><br>\n&lt;<br>\n<a href=\"https://isabelle.in.tum.de/library/HOL/HOL-Data_Structures/Array_Braun.html\">https://isabelle.in.tum.de/library/HOL/HOL-Data_Structures/Array_Braun.html</a></p>\n<p>This has an annoying effect on automation when importing this theory,<br>\nand<br>\nperhaps should be removed or limited in its scope with a notes, or<br>\nsimilar?</p>\n<p>Thanks,<br>\nDominic<br>\n</p>\n</blockquote>\n</blockquote>",
        "id": 421210086,
        "sender_full_name": "Email Gateway",
        "timestamp": 1707818169
    },
    {
        "content": "<p>From: <a href=\"mailto:hannobecker@posteo.de\">hannobecker@posteo.de</a><br>\nHi all,</p>\n<p>FWIW, I agree with Dominic. I don't think a general purpose library such <br>\nas Array_Braun should make global modifications to the attributes of <br>\nexternal theorems, esp. something as ubiquitous as <code>Let_def</code>.</p>\n<p>Is it not an option to <code>declare Let_def[simp del]</code> at the end of <br>\n<code>Array_Braun</code> for now (or bracket everything in a <code>context notes \nLet_def[simp] begin ... end</code> block), and adjust the (hopefully few) <br>\nplaces that depend on Array_Braun and have ossified around <code>Let_def</code> <br>\nbeing in the simpset?</p>\n<p>Best,<br>\nHanno</p>",
        "id": 422960346,
        "sender_full_name": "Email Gateway",
        "timestamp": 1708672014
    },
    {
        "content": "<p>From: Lawrence Paulson &lt;<a href=\"mailto:lp15@cam.ac.uk\">lp15@cam.ac.uk</a>&gt;<br>\nYes – agree.</p>\n<p>Hardly any theories import Array_Braun directly. But one of them is Code_Setup, so it will be interesting to see what changes turn out to be necessary.</p>\n<p>Larry</p>",
        "id": 422980212,
        "sender_full_name": "Email Gateway",
        "timestamp": 1708680910
    },
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\nI beg to differ. When you import a library you import a design philosophy, in <br>\nthis case the conviction, born out of long experience, that in the context of <br>\nthe verification of functional programs you almost always want to expand \"let\". <br>\nMoreover, it can be reversed easily and we even have comments in Isabelle to <br>\nremind you why you reversed it.</p>\n<p>You may also be interested to learn that the basic setup expands let's in <br>\ncertain situations via a simproc that may (or may not) be easy to turn off. In <br>\nfact, it is not easy to work out what those situations are.</p>\n<p>If anything, you may complain that not all theories in Data_Structures activate <br>\nLet_def. I'd be happy to make that more uniform.</p>\n<p>Tobias</p>\n<p><a href=\"/user_uploads/14278/V1ZkaUzqkkFsleAQWwtqCO7T/smime.p7s\">smime.p7s</a></p>",
        "id": 422985568,
        "sender_full_name": "Email Gateway",
        "timestamp": 1708682886
    },
    {
        "content": "<p>From: Peter Lammich &lt;<a href=\"mailto:lammich@in.tum.de\">lammich@in.tum.de</a>&gt;<br>\nThere's another view on it:</p>\n<p>when you import a library into a bigger project, you do <em>not</em> want to <br>\nimport its (internal) design philosophy, which might be very nice for <br>\nproving data structures, but get in the way for other things. Actually, <br>\nyou want to import as few as possible, in particular no changes that <br>\n'pollute' the global state.</p>\n<p>What you want to import if you use the trees is: an abstraction function <br>\n(invar ideally hidden in typedef), operations, and lemmas that concrete <br>\noperations commute with abstract ones (these would typically be in the <br>\nsimpset, as they only affect concepts defined by this library). That's <br>\nit. Everything internal used to prove these lemmas should be hidden by <br>\ndefault, and require some manual effort to get back (like manually <br>\naugmenting the simpset).</p>",
        "id": 423017473,
        "sender_full_name": "Email Gateway",
        "timestamp": 1708695433
    },
    {
        "content": "<p>From: Florian Haftmann &lt;<a href=\"mailto:florian.haftmann@informatik.tu-muenchen.de\">florian.haftmann@informatik.tu-muenchen.de</a>&gt;<br>\nHi all,</p>\n<p>just a remark on the mail subject: the theory we are talking about is <br>\nbetter referred to as HOL-Data_Structures.Array_Braun rather than <br>\nHOL-Library.Array_Braun.</p>\n<p>Having said that, there are basically two options for development-local <br>\ndeclarations like Let_def [simp]:</p>\n<ul>\n<li>Organize them in bundles. This is nowadays a powerful but IMHO still <br>\noften neglected possibility.</li>\n</ul>\n<p>(+) Keeps particularities really local.<br>\n(+) Easy to get right.<br>\n(-) Clutters developments with some incantations.</p>\n<ul>\n<li>Provide one singleton entrance point to the development which imports <br>\neverything and reverts any development-local declaration.</li>\n</ul>\n<p>(+) Repeated incantations not necessary.<br>\n(-) No (officically supported) selective use of single theories from the <br>\ndevelopment.<br>\n(-) Brittle to maintain, inconsistencies might leak over time.</p>\n<p>Just my contribution to the ongoing discussion.</p>\n<p>Cheers,<br>\n    Florian</p>\n<p>Am 09.02.24 um 17:38 schrieb Dominic Mulligan (via cl-isabelle-users <br>\nMailing List):</p>\n<p><a href=\"/user_uploads/14278/BuW_O2DQ76MURGlrLUXrx6pN/OpenPGP_0xA707172232CFA4E9.asc\">OpenPGP_0xA707172232CFA4E9.asc</a><br>\n<a href=\"/user_uploads/14278/EpeB6zA93TVfxntz96Ggx3rI/OpenPGP_signature.asc\">OpenPGP_signature.asc</a></p>",
        "id": 423172131,
        "sender_full_name": "Email Gateway",
        "timestamp": 1708783071
    },
    {
        "content": "<p>From: Dominic Mulligan &lt;<a href=\"mailto:cl-isabelle-users@lists.cam.ac.uk\">cl-isabelle-users@lists.cam.ac.uk</a>&gt;<br>\nHi,</p>\n<p>Yes, sorry for any unintended confusion—I did in fact mean<br>\nHOL-Data_Structures.Array_Braun rather than HOL-Library.Array_Braun.</p>\n<p>Thanks,<br>\nDominic</p>",
        "id": 424247676,
        "sender_full_name": "Email Gateway",
        "timestamp": 1709302826
    }
]