[
    {
        "content": "<p>From: Ghilain Bergeron &lt;<a href=\"mailto:ghilain.bergeron@inria.fr\">ghilain.bergeron@inria.fr</a>&gt;<br>\nHello. </p>\n<p>I am having a bit of a problem with sledgehammer. <br>\nIt seems that sometimes, the memory it used isn't being reclaimed (through GC, I guess). <br>\nThis leads me to having very high memory usage (e.g. a polyml process with 16GB of RAM used) and the <br>\nlonger it happens for, the more likely it is that sledgehammer is going to crash the LSP server <br>\n(note: it also happens within the JEdit interface). <br>\nDoes anyone have any idea how to try and debug this? Or is this expected behavior when running <br>\nsledgehammer often? </p>\n<p>Thanks in advance, <br>\nGhilain.</p>",
        "id": 352810658,
        "sender_full_name": "Email Gateway",
        "timestamp": 1682517824
    },
    {
        "content": "<p>From: Dominic Mulligan &lt;<a href=\"mailto:cl-isabelle-users@lists.cam.ac.uk\">cl-isabelle-users@lists.cam.ac.uk</a>&gt;<br>\nHi,</p>\n<p>To add another observation: I, along with multiple colleagues, have also<br>\nnoticed a similar and perhaps related effect with Isabelle2022 on Apple M1<br>\nMacs.  After prolonged use Isabelle performance seems to significantly<br>\ndegrade, including that of Sledgehammer, to the point where it struggles to<br>\nfind proofs for anything and even invoking the external provers seems to<br>\ntake an age.  Killing Isabelle and restarting seems to fix the problem.</p>\n<p>Thanks,<br>\nDominic</p>",
        "id": 352813660,
        "sender_full_name": "Email Gateway",
        "timestamp": 1682518370
    },
    {
        "content": "<p>From: Jasmin Blanchette &lt;<a href=\"mailto:jasmin.blanchette@ifi.lmu.de\">jasmin.blanchette@ifi.lmu.de</a>&gt;<br>\nDear Ghilain,</p>\n<p>This is definitely not the intended behavior. I suspect the issue might be related to your platform. Are you using Windows? Also, do you know which prover(s) this happens with, e.g. by investigating the list of running processes?</p>\n<p>In principle, provers are invoked with a soft and a hard timeout, so they should terminate, but there has been reports before of provers keeping on running.</p>\n<p>Best,<br>\nJasmin</p>",
        "id": 352815984,
        "sender_full_name": "Email Gateway",
        "timestamp": 1682518809
    },
    {
        "content": "<p>From: Ghilain Bergeron &lt;<a href=\"mailto:ghilain.bergeron@inria.fr\">ghilain.bergeron@inria.fr</a>&gt;<br>\nHi Jasmin! </p>\n<p>I am using NixOS version 22.11, with Isabelle2022. There does not seem to be any prover left running <br>\nwhen sledgehammer finishes, according to my system monitor. <br>\nHowever, all I can see is a \"poly\" process slowly filling up my RAM each time I call sledgehammer, although <br>\nfrom time to time there seems to be a GC run (not frequently at all; currently the process takes 13.5GB of my RAM <br>\nand I ran sledgehammer like 5 times on a fairly complex goal). <br>\nFrom what I can see, here's the list of provers running on my machine: z3, cvc4, SPASS, veriT, vampire, <br>\neprover-ho and zipperposition. </p>\n<p>I also have noticed the same issue that Dominic Mulligan is reporting (in a follow-up mail), regarding degrading performance <br>\ndue to prolonged Isabelle use. Not sure if this is relevant to this problem though. </p>\n<p>Regards, <br>\nGhilain</p>",
        "id": 352818565,
        "sender_full_name": "Email Gateway",
        "timestamp": 1682519299
    },
    {
        "content": "<p>From: \"Eugene W. Stark\" &lt;<a href=\"mailto:isabelle-users@starkeffect.com\">isabelle-users@starkeffect.com</a>&gt;<br>\nTo add to this: it is my experience and belief that, under certain modes of use, Sledgehammer causes<br>\nPoly/ML to leak heap space, resulting in the heap utilization eventually bumping up against the limit<br>\nand causing frequent garbage collection and poor performance.  At that point, restarting Isabelle is<br>\nnecessary to restore performance.</p>\n<p>This occurs for me on Linux (Ubuntu 22.04).  It might be related to the long-standing issue with some<br>\nof the external provers not handling signals correctly and popping up notifications that the external<br>\nprogram has crashed.</p>\n<p>- Gene Stark</p>",
        "id": 352850920,
        "sender_full_name": "Email Gateway",
        "timestamp": 1682523539
    },
    {
        "content": "<p>From: Jasmin Blanchette &lt;<a href=\"mailto:jasmin.blanchette@ifi.lmu.de\">jasmin.blanchette@ifi.lmu.de</a>&gt;<br>\nI suspect the issues are related to the Poly/ML platform or to the Isabelle/ML infrastructure. Perhaps Makarius can comment on this thread?</p>\n<p>Best,<br>\nJasmin</p>",
        "id": 353126392,
        "sender_full_name": "Email Gateway",
        "timestamp": 1682579352
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nWe need something reproducible to work with.</p>\n<ul>\n<li>\n<p>Specifications of the hardware and OS version.</p>\n</li>\n<li>\n<p>Examples that are publicly available somewhere.</p>\n</li>\n</ul>\n<p>Generally note that ARM64 is still not fully supported: On macOS Intel <br>\nbinaries work out of the box, but I don't know if and how the implicit <br>\ntranslation via Rosetta 2 can interfere with run times and interruptibility.</p>\n<p>Makarius</p>",
        "id": 353188314,
        "sender_full_name": "Email Gateway",
        "timestamp": 1682587758
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nOn 26/04/2023 16:28, Ghilain Bergeron wrote:</p>\n<blockquote>\n<p>I am using NixOS version 22.11, with Isabelle2022. There does not seem to be <br>\nany prover left running<br>\nwhen sledgehammer finishes, according to my system monitor.</p>\n</blockquote>\n<p>NixOS is not on the list of officially supported Isabelle platforms, see also <br>\n<a href=\"https://isabelle.in.tum.de/installation.html\">https://isabelle.in.tum.de/installation.html</a></p>\n<p>So it must be a package provided privately by someone else (Who should also <br>\ntake responsiblitity for it).</p>\n<p>Can you provide a source for that? I would be interested so see how it was <br>\ndone, to say if there is a chance of it working properly.</p>\n<blockquote>\n<p>However, all I can see is a \"poly\" process slowly filling up my RAM each time <br>\nI call sledgehammer, although<br>\nfrom time to time there seems to be a GC run (not frequently at all; currently <br>\nthe process takes 13.5GB of my RAM<br>\nand I ran sledgehammer like 5 times on a fairly complex goal).</p>\n</blockquote>\n<p>Going towards 16 GB is always critical, because ML GC times are getting long <br>\nand can interfere with the interaction. 16 GB is a hard limit of the default <br>\nPoly/ML platform.</p>\n<p>It might be better to set ML_system_64 = \"true\" in <br>\n$ISABELLE_HOME_USER/etc/preferences (while the PIDE is not running) and try <br>\nwith a machine that has 64 GB, or so.</p>\n<p>Anyway, are these proof problems somewhere publicly available, e.g. on <br>\nIsabelle/AFP?</p>\n<p>Makarius</p>",
        "id": 353189689,
        "sender_full_name": "Email Gateway",
        "timestamp": 1682587949
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nOn 26/04/2023 17:30, Eugene W. Stark wrote:</p>\n<blockquote>\n<p>To add to this: it is my experience and belief that, under certain modes of <br>\nuse, Sledgehammer causes<br>\nPoly/ML to leak heap space, resulting in the heap utilization eventually <br>\nbumping up against the limit<br>\nand causing frequent garbage collection and poor performance.Â  At that point, <br>\nrestarting Isabelle is<br>\nnecessary to restore performance.</p>\n</blockquote>\n<p>As you have plenty of public examples on Isabelle/AFP, can you find a <br>\nsituation where it is somehow reproducible?</p>\n<p>We also need a specification of the hardware resources (RAM, CPU cores).</p>\n<blockquote>\n<p>It might be related to the <br>\nlong-standing issue with some<br>\nof the external provers not handling signals correctly and popping up <br>\nnotifications that the external<br>\nprogram has crashed.</p>\n</blockquote>\n<p>What exactly is the signal / return code of the crash?</p>\n<p>Maybe this is just an out-of-memory situation in Linux.</p>\n<p>Makarius</p>",
        "id": 353193392,
        "sender_full_name": "Email Gateway",
        "timestamp": 1682588517
    },
    {
        "content": "<p>From: Ghilain Bergeron &lt;<a href=\"mailto:ghilain.bergeron@inria.fr\">ghilain.bergeron@inria.fr</a>&gt;<br>\nThe original package for Isabelle2021 is on nixpkgs: [ <a href=\"https://github.com/NixOS/nixpkgs/blob/nixos-22.11/pkgs/applications/science/logic/isabelle/default.nix\">https://github.com/NixOS/nixpkgs/blob/nixos-22.11/pkgs/applications/science/logic/isabelle/default.nix</a> | <a href=\"https://github.com/NixOS/nixpkgs/blob/nixos-22.11/pkgs/applications/science/logic/isabelle/default.nix\">https://github.com/NixOS/nixpkgs/blob/nixos-22.11/pkgs/applications/science/logic/isabelle/default.nix</a> ] <br>\nHowever, I have modified it a bit for Isabelle2022: [ <a href=\"https://github.com/Mesabloo/nix-config/blob/master/extra/nix-overlays/packages/isabelle.nix\">https://github.com/Mesabloo/nix-config/blob/master/extra/nix-overlays/packages/isabelle.nix</a> | <a href=\"https://github.com/Mesabloo/nix-config/blob/master/extra/nix-overlays/packages/isabelle.nix\">https://github.com/Mesabloo/nix-config/blob/master/extra/nix-overlays/packages/isabelle.nix</a> ] <br>\nNote that I am not using Poly/ML from nixpkgs either: [ <a href=\"https://github.com/Mesabloo/nix-config/blob/master/extra/nix-overlays/packages/polyml.nix\">https://github.com/Mesabloo/nix-config/blob/master/extra/nix-overlays/packages/polyml.nix</a> | <a href=\"https://github.com/Mesabloo/nix-config/blob/master/extra/nix-overlays/packages/polyml.nix\">https://github.com/Mesabloo/nix-config/blob/master/extra/nix-overlays/packages/polyml.nix</a> ] as it doesn't have the option \"--enable-intinf-as-int\", which makes it so that Isabelle cannot be built. Perhaps I am missing some other configuration flag? </p>\n<p>My \"custom\" Nix script for Isabelle uses the Isabelle installation in [ <a href=\"https://github.com/m-fleury/isabelle-emacs\">https://github.com/m-fleury/isabelle-emacs</a> | <a href=\"https://github.com/m-fleury/isabelle-emacs\">https://github.com/m-fleury/isabelle-emacs</a> ] although this should change close to nothing regarding Isabelle itself, as it mainly is a mirror + some modifications to the LSP server + a LSP mode for emacs. </p>\n<blockquote>\n<p>It might be better to set ML_system_64 = \"true\" in <br>\n$ISABELLE_HOME_USER/etc/preferences (while the PIDE is not running) and try <br>\nwith a machine that has 64 GB, or so. </p>\n</blockquote>\n<p>Unfortunately, I don't have access to such a machine, only 32 GB of RAM. </p>\n<blockquote>\n<p>Anyway, are these proof problems somewhere publicly available, e.g. on <br>\nIsabelle/AFP? </p>\n</blockquote>\n<p>Currently they aren't, and I don't know how long they won't be. However, it shouldn't matter much, as long as the project is not very small, and the proofs are not easy to find for sledgehammer. </p>\n<p>Cheers, <br>\nGhilain. </p>\n<p>De: \"Makarius\" &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt; <br>\nÃ: \"Ghilain Bergeron\" &lt;<a href=\"mailto:ghilain.bergeron@inria.fr\">ghilain.bergeron@inria.fr</a>&gt;, \"Jasmin Blanchette\" &lt;<a href=\"mailto:jasmin.blanchette@ifi.lmu.de\">jasmin.blanchette@ifi.lmu.de</a>&gt; <br>\nCc: \"cl-isabelle-users\" &lt;<a href=\"mailto:cl-isabelle-users@lists.cam.ac.uk\">cl-isabelle-users@lists.cam.ac.uk</a>&gt; <br>\nEnvoyÃ©: Jeudi 27 Avril 2023 11:25:54 <br>\nObjet: Re: [isabelle] Heavy memory use with sledgehammer </p>\n<p>BQ_BEGIN<br>\nOn 26/04/2023 16:28, Ghilain Bergeron wrote: </p>\n<p>BQ_BEGIN</p>\n<p>I am using NixOS version 22.11, with Isabelle2022. There does not seem to be <br>\nany prover left running <br>\nwhen sledgehammer finishes, according to my system monitor. <br>\nBQ_END</p>\n<p>NixOS is not on the list of officially supported Isabelle platforms, see also <br>\n<a href=\"https://isabelle.in.tum.de/installation.html\">https://isabelle.in.tum.de/installation.html</a> </p>\n<p>So it must be a package provided privately by someone else (Who should also <br>\ntake responsiblitity for it). </p>\n<p>Can you provide a source for that? I would be interested so see how it was <br>\ndone, to say if there is a chance of it working properly. </p>\n<p>BQ_BEGIN<br>\nHowever, all I can see is a \"poly\" process slowly filling up my RAM each time <br>\nI call sledgehammer, although <br>\nfrom time to time there seems to be a GC run (not frequently at all; currently <br>\nthe process takes 13.5GB of my RAM <br>\nand I ran sledgehammer like 5 times on a fairly complex goal). <br>\nBQ_END</p>\n<p>Going towards 16 GB is always critical, because ML GC times are getting long <br>\nand can interfere with the interaction. 16 GB is a hard limit of the default <br>\nPoly/ML platform. </p>\n<p>It might be better to set ML_system_64 = \"true\" in <br>\n$ISABELLE_HOME_USER/etc/preferences (while the PIDE is not running) and try <br>\nwith a machine that has 64 GB, or so. </p>\n<p>Anyway, are these proof problems somewhere publicly available, e.g. on <br>\nIsabelle/AFP? </p>\n<p>Makarius <br>\nBQ_END</p>",
        "id": 353194601,
        "sender_full_name": "Email Gateway",
        "timestamp": 1682588695
    },
    {
        "content": "<p>From: Jan van BrÃ¼gge &lt;<a href=\"mailto:jan@vanbruegge.de\">jan@vanbruegge.de</a>&gt;</p>\n<blockquote>\n<p>Can you provide a source for that? I would be interested so see how it was done, to say if there is a chance of it working properly.</p>\n</blockquote>\n<p>I am packaging Isabelle for NixOS. The packaging instructions are here: <a href=\"https://github.com/NixOS/nixpkgs/blob/master/pkgs/applications/science/logic/isabelle/default.nix#L88\">https://github.com/NixOS/nixpkgs/blob/master/pkgs/applications/science/logic/isabelle/default.nix#L88</a></p>\n<p>To summarize: I take the official Isabelle release, replace the bundled polyml with a version built by nix (but based off the same commit as the Isabelle release), and patch the bundled ATPs so they can find libc and other dependencies.</p>\n<p>Apr 27, 2023 10:32:23 AM Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;:</p>\n<blockquote>\n<p>On 26/04/2023 16:28, Ghilain Bergeron wrote:</p>\n<blockquote>\n<p>I am using NixOS version 22.11, with Isabelle2022. There does not seem to be any prover left running<br>\nwhen sledgehammer finishes, according to my system monitor.</p>\n</blockquote>\n<p>NixOS is not on the list of officially supported Isabelle platforms, see also <a href=\"https://isabelle.in.tum.de/installation.html\">https://isabelle.in.tum.de/installation.html</a></p>\n<p>So it must be a package provided privately by someone else (Who should also take responsiblitity for it).</p>\n<p>Can you provide a source for that? I would be interested so see how it was done, to say if there is a chance of it working properly.</p>\n<blockquote>\n<p>However, all I can see is a \"poly\" process slowly filling up my RAM each time I call sledgehammer, although<br>\nfrom time to time there seems to be a GC run (not frequently at all; currently the process takes 13.5GB of my RAM<br>\nand I ran sledgehammer like 5 times on a fairly complex goal).</p>\n</blockquote>\n<p>Going towards 16 GB is always critical, because ML GC times are getting long and can interfere with the interaction. 16 GB is a hard limit of the default Poly/ML platform.</p>\n<p>It might be better to set ML_system_64 = \"true\" in $ISABELLE_HOME_USER/etc/preferences (while the PIDE is not running) and try with a machine that has 64 GB, or so.</p>\n<p>Anyway, are these proof problems somewhere publicly available, e.g. on Isabelle/AFP?</p>\n<p>Makarius</p>\n</blockquote>",
        "id": 353197340,
        "sender_full_name": "Email Gateway",
        "timestamp": 1682589042
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nExternal processes are actually managed in Isabelle/Scala: Isabelle/ML makes <br>\nan explicit protocol invocation it for that, e.g. see <br>\n<a href=\"https://isabelle.sketis.net/repos/isabelle-release/file/tip/src/Pure/System/isabelle_system.ML\">https://isabelle.sketis.net/repos/isabelle-release/file/tip/src/Pure/System/isabelle_system.ML</a></p>\n<p>This already supports a timeout parameter, but historically most Isabelle/ML <br>\napplications (including Sledgehammer) use Timeout.apply on the ML side: which <br>\nis also subject to GC times.</p>\n<p>For heavy computations within Isabelle/ML it is often better to use <br>\nTimeout.apply_physical, e.g. the change <br>\n<a href=\"https://isabelle.sketis.net/repos/isabelle-release/rev/d54b3c96ee50\">https://isabelle.sketis.net/repos/isabelle-release/rev/d54b3c96ee50</a> --- but <br>\nthis is probably not relevant for Sledgehammer.</p>\n<p>Below is a minimal example to show the difference of ML vs. Scala timeouts, <br>\neven including a protocol trace. For the latter, you need to edit <br>\n$ISABELLE_HOME_USER/etc/preferences <em>before</em> starting the Prover IDE as follows:</p>\n<p>bash_process_debugging = \"true\"</p>\n<p>Then you start \"isabelle jedit\" on the terminal and process the subsequent ML <br>\nsnippets in some theory context as usual:</p>\n<p>ML â¹val script = \"sleep 10\"; val timeout = seconds 2.0;âº</p>\n<p>text â¹timeout managed in Isabelle/ML:âº<br>\nML â¹Timeout.apply timeout Isabelle_System.bash_process (Bash.script script)âº</p>\n<p>text â¹timeout managed in Isabelle/Scala:âº<br>\nML â¹Isabelle_System.bash_process (Bash.script script |&gt; Bash.timeout timeout)âº</p>\n<p>(*<br>\n11:55:34 AM [Isabelle.client] [error] client: start \"bash_process\" <br>\n(uuid=66aac7fa-2db8-411a-8fd2-7b2bcefe1e6b, timeout=0.0)<br>\n11:55:36 AM [Isabelle.client] [error] client: kill <br>\n66aac7fa-2db8-411a-8fd2-7b2bcefe1e6b<br>\n11:55:36 AM [Isabelle.client] [error] client: start \"bash_process\" <br>\n(uuid=fdcf8608-ca94-46b4-9a6c-3d1416ed2755, timeout=2.0)<br>\n11:55:36 AM [Isabelle.bash_process] [error] bash_process: stop \"bash_process\" <br>\n(uuid=66aac7fa-2db8-411a-8fd2-7b2bcefe1e6b, return_code=130)<br>\n11:55:38 AM [Isabelle.bash_process] [error] bash_process: stop \"bash_process\" <br>\n(uuid=fdcf8608-ca94-46b4-9a6c-3d1416ed2755, return_code=142)<br>\n11:55:38 AM [Isabelle.client] [error] client: kill <br>\nfdcf8608-ca94-46b4-9a6c-3d1416ed2755<br>\n*)</p>\n<p>Return code 130 is SIGINT, originating from the Isabelle/ML implementation of <br>\nTimeout.apply.</p>\n<p>Return code 142 is SIGALRM, originating from Isabelle/Scala --- not the <br>\nexternal process. See also <br>\n<a href=\"https://isabelle.sketis.net/repos/isabelle-release/file/tip/src/Pure/System/bash.scala#l322\">https://isabelle.sketis.net/repos/isabelle-release/file/tip/src/Pure/System/bash.scala#l322</a></p>\n<p>Sledgehammer might benefit from moving the timeout from ML into Scala, because <br>\nthat is closer to the actual process and the \"watchdog\" is not subject to the <br>\nhealth of the ML runtime system.</p>\n<p>It is also interesting to run Sledgehammer examples with the above system <br>\noptions bash_process_debugging = \"true\" to see rather mixed return codes.</p>\n<p>(One day, Isabelle/PIDE will include a GUI panel for bash processes, but not now.)</p>\n<p>Makarius</p>",
        "id": 353207109,
        "sender_full_name": "Email Gateway",
        "timestamp": 1682590375
    },
    {
        "content": "<p>From: \"Eugene W. Stark\" &lt;<a href=\"mailto:isabelle-users@starkeffect.com\">isabelle-users@starkeffect.com</a>&gt;<br>\n[Resend to list only, because my previous send had a From address other than the subscribed one.]</p>\n<p>On 4/27/23 05:31, Makarius wrote:</p>\n<blockquote>\n<p>On 26/04/2023 17:30, Eugene W. Stark wrote:</p>\n<blockquote>\n<p>To add to this: it is my experience and belief that, under certain modes of use, Sledgehammer causes<br>\nPoly/ML to leak heap space, resulting in the heap utilization eventually bumping up against the limit<br>\nand causing frequent garbage collection and poor performance.Â  At that point, restarting Isabelle is<br>\nnecessary to restore performance.</p>\n</blockquote>\n<p>As you have plenty of public examples on Isabelle/AFP, can you find a situation where it is somehow reproducible?</p>\n<p>We also need a specification of the hardware resources (RAM, CPU cores).</p>\n</blockquote>\n<p>I currently experience this on the following platform:</p>\n<p>Intel i9-10850K (10 cores)<br>\n    128GB RAM<br>\n        JEDIT_JAVA_OPTIONS=\"-Xmx16384m\"<br>\n        ML_OPTIONS=\"--maxheap 64G\"<br>\n    Ubuntu 22.04:<br>\n        Linux 5.19.0-40-generic #41~22.04.1-Ubuntu SMP PREEMPT_DYNAMIC Fri Mar 31 16:00:14 UTC 2 x86_64 x86_64 x86_64 GNU/Linux</p>\n<p>There isn't a cookbook recipe for reproducing this.  The problem typically occurs after a long session<br>\nwith heavy use of \"try\" and/or the Sledgehammer panel.</p>\n<p>To my mind, the problem is consistent with some kind of situation where weak references or the like<br>\nare created into the ML heap as a result of running the external provers, and then these references are<br>\nsometimes lost, resulting in a leak over time.  However, I have no specific knowledge of how the<br>\nexternal provers are interfaced with ML.  If there in fact are some kind of weak references of this<br>\nnature, I would think that instrumenting their creation and reclamation could potentially<br>\nindicate if there are leaks involving them.</p>\n<blockquote>\n<blockquote>\n<p>It might be related to the long-standing issue with some<br>\nof the external provers not handling signals correctly and popping up notifications that the external<br>\nprogram has crashed.</p>\n</blockquote>\n<p>What exactly is the signal / return code of the crash?</p>\n<p>Maybe this is just an out-of-memory situation in Linux.</p>\n</blockquote>\n<p>No, it is not an out-of-memory situation.  We have discussed this issue in this forum some years ago.<br>\nI did some investigation at that time and found that some of the provers under certain situations do<br>\nnot properly handle signals sent to them to cause them to terminate, resulting in the OS kernel flagging<br>\nan abnormal termination.  Under Ubuntu, at least, this causes a pop-up notification<br>\n(\"A system program has failed\", or the like).   Frequently after an extended session using Sledgehammer<br>\nI have to clear several (sometimes many) of these notifications, which accumulate underneath the<br>\napplication windows. In at least one case, I did trace the origin of the problem to a signal handler<br>\nthat was either part of the external prover code or part of some \"glue\" code that interfaced the Isabelle<br>\nsystem to that external prover -- I don't remember which.  I think the signal involved might have been<br>\nSIGABRT, but again I don't recall for sure at this time.  It was a signal whose default disposition<br>\nis to cause a core dump, because otherwise a notification would not be generated by the OS.</p>\n<p>If I recall correctly, the result of the previous thread and my own investigation was that<br>\n\"It is the fault of the external prover implementers\" and that my problem report should be directed at<br>\nthem.  Getting involved in that was not consistent with my own goals in using the system, so I did not<br>\npursue it further at that time, but the problem still exists.  The reason I mentioned this again in<br>\nthe current thread is that I speculate that the abnormal termination of an external prover in this way<br>\ncould be the origin of leaked storage in the ML heap.</p>\n<p>- Gene Stark</p>",
        "id": 353210854,
        "sender_full_name": "Email Gateway",
        "timestamp": 1682590920
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nNote that \"Isabelle itself\" is everything that we bundle in the official <br>\nrelease. This also includes OpenJDK and Scala, now even VSCode/Electron/Node.js.</p>\n<p>There are reasons for that: over the decades, strange problems have occurred <br>\nwith arbitrary versions of such system components seen in the wild.</p>\n<p>So a proper version of the NixOS package would take everything from the <br>\nofficial Isabelle download, without any censorship.</p>\n<p>Isabelle actually shares the approach of NixOS to include just one specific <br>\nversion of (almost) everything.</p>\n<p>Makarius</p>",
        "id": 353212902,
        "sender_full_name": "Email Gateway",
        "timestamp": 1682591203
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nThat is an interesting high-end configuration.</p>\n<p>From a distance, I would say that ML GC times become so long that the overall <br>\nmodel of Sledgehammer timeout no longer fits.</p>\n<p>It could be resolved by moving timeouts from ML to Scala, as I have sketched <br>\nearlier.</p>\n<p>Makarius</p>",
        "id": 353215861,
        "sender_full_name": "Email Gateway",
        "timestamp": 1682591624
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nThis is very complex. I am not going to study nor to review it.</p>\n<p>It is your responsible to sort out problems stemming from the disassembly of <br>\nall Isabelle components and reassembly in a slightly different manner.</p>\n<p>Makarius</p>",
        "id": 353216779,
        "sender_full_name": "Email Gateway",
        "timestamp": 1682591757
    },
    {
        "content": "<p>From: Dominique Unruh &lt;<a href=\"mailto:cl-isabelle-users@lists.cam.ac.uk\">cl-isabelle-users@lists.cam.ac.uk</a>&gt;<br>\nHi,</p>\n<p>I also have experienced over the years (i.e., in multiple versions) that <br>\nthere Isabelle tends to slow down a lot after heavy use (involving lots <br>\nof sledgehammers, interrupted and restarted sledgehammers due to edits <br>\nfurther up in the code, rerunning proofs (again, because of editing <br>\nfragments higher than the bottom of the visible part of the document).</p>\n<p>The problem is that this is not something that can be easily reproduced. <br>\nThe theory file we have at that point is not to blame (restarting <br>\nIsabelle fixes the problem on the same file). It is more the interaction <br>\nthat somehow leads to a problem.</p>\n<p>I have the following observations:</p>\n<p>* It's not jEdit that's stuck (because unloading the plugin and<br>\n    reloading it tends to resolve the problem).</p>\n<p>* There seems to be frequent GC once Isabelle is in this state.<br>\n  * It does not seem to be due to the load of the running sledghammers<br>\n    itself (because sometimes I have waited a long time to give it a<br>\n    chance to finish with whatever it is doing, to no avail).</p>\n<p>* Sometimes, it's not just a slowdown but Isabelle completely stops<br>\n    doing anything (one can edit, but colors/output tab are not<br>\n    updated). However, I don't know if it's the same issue.</p>\n<p>Since it is almost impossible to produce something reproducible here <br>\nexcept something like \"work for a few hours and intensively edit and run <br>\nsledgehammer or try after every goal\", I think what we need is the <br>\nfollowing:</p>\n<p>Is there some way to produce some post-mortem analysis? I.e., next time <br>\nI observe this, would there be something I can do to get a core-dump or <br>\nthread-dump or whatever that would be helpful (for Makarius, I assume) <br>\nto diagnose what is happening or at least what further inquiries need to <br>\nbe made?</p>\n<p>Best wishes,<br>\nDominique.</p>",
        "id": 353219585,
        "sender_full_name": "Email Gateway",
        "timestamp": 1682592150
    },
    {
        "content": "<p>From: \"Eugene W. Stark\" &lt;<a href=\"mailto:isabelle-users@starkeffect.com\">isabelle-users@starkeffect.com</a>&gt;<br>\nThe quoted message mentions some things that I have observed that I consider to be (potentially)<br>\nseparate issues from the main one that this thread has been addressing.  These are:</p>\n<p>(1)  An instability that occurs in which Isabelle queues up tens or hundreds of thousands<br>\n        of \"Future Tasks\" (as indicated by the monitor panel), which do not get cancelled<br>\n        even after the \"Cancel\" button on the Sledgehammer panel has been pressed or the<br>\n        \"try\" has been deleted from the JEdit editing buffer.  This situation can take<br>\n        many minutes (or longer) to resolve itself.  This behavior is also long-standing,<br>\n        though it does not occur as frequently as it did a few years ago (from my point of<br>\n        view).</p>\n<p>(2)  Extreme time taken by Poly/ML for an apparent major GC.  \"ML Cleanup\" shows in the<br>\n        JEdit window and although JEdit remains responsive, nothing gets updated that<br>\n        requires output from ML.  This situation can persist for many minutes or longer.<br>\n        Sometimes I have gone away for perhaps an hour and come back to find it still<br>\n        in that state, whereupon I give up and just restart Isabelle.</p>\n<p>It is possible, I suppose that this is \"expected\" behavior; however, in some<br>\n        cases it has more the appearance of a deadlock situation.</p>\n<p>- Gene Stark</p>",
        "id": 353225457,
        "sender_full_name": "Email Gateway",
        "timestamp": 1682592925
    },
    {
        "content": "<p>From: \"Eugene W. Stark\" &lt;<a href=\"mailto:isabelle-users@starkeffect.com\">isabelle-users@starkeffect.com</a>&gt;<br>\n[CC to original recipients]</p>\n<p>The quoted message mentions some things that I have observed that I consider to be (potentially)<br>\nseparate issues from the main one that this thread has been addressing.  These are:</p>\n<p>(1)  An instability that occurs in which Isabelle queues up tens or hundreds of thousands<br>\n        of \"Future Tasks\" (as indicated by the monitor panel), which do not get cancelled<br>\n        even after the \"Cancel\" button on the Sledgehammer panel has been pressed or the<br>\n        \"try\" has been deleted from the JEdit editing buffer.  This situationcan take<br>\n        many minutes (or longer) to resolve itself.  This behavior is also long-standing,<br>\n        though it does not occur as frequently as it did a few years ago (from my point of<br>\n        view).</p>\n<p>(2)  Extreme time taken by Poly/ML for an apparent major GC.  \"ML Cleanup\" shows in the<br>\n        JEdit window and although JEdit remains responsive, nothing gets updated that<br>\n        requires output from ML.  This situation can persist for many minutesor longer.<br>\n        Sometimes I have gone away for perhaps an hour and come back to find it still<br>\n        in that state, whereupon I give up and just restart Isabelle.</p>\n<p>It is possible, I suppose that this is \"expected\" behavior; however, in some<br>\n        cases it has more the appearance of a deadlock situation.</p>\n<p>- Gene Stark</p>",
        "id": 353226410,
        "sender_full_name": "Email Gateway",
        "timestamp": 1682593057
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nI would say it is better to do live monitoring with more details: ML tasks, ML <br>\nthreads, bash processes shown in the Prover IDE as some kind of \"task manager\".</p>\n<p>Overall this is not a single program, but a parallel system consisting of many <br>\ndifferent components.</p>\n<p>Makarius</p>",
        "id": 353265038,
        "sender_full_name": "Email Gateway",
        "timestamp": 1682598330
    },
    {
        "content": "<p>From: Dominique Unruh &lt;<a href=\"mailto:cl-isabelle-users@lists.cam.ac.uk\">cl-isabelle-users@lists.cam.ac.uk</a>&gt;<br>\nHi,<br>\nOf course. But I cannot interpret those things myself, so the question <br>\nis: what of these would I send to the mailing list in case of a partly <br>\nstuck Isabelle?</p>\n<p>Best wishes,<br>\nDominique.</p>",
        "id": 353265981,
        "sender_full_name": "Email Gateway",
        "timestamp": 1682598451
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nA text snapshot of such a live monitor state.</p>\n<p>Makarius</p>",
        "id": 353284701,
        "sender_full_name": "Email Gateway",
        "timestamp": 1682600879
    },
    {
        "content": "<p>From: Lex Bailey &lt;<a href=\"mailto:cl-isabelle-users@lists.cam.ac.uk\">cl-isabelle-users@lists.cam.ac.uk</a>&gt;<br>\nI have experienced the same on an M1 Mac, additionally I have found that<br>\nother applications are affected.<br>\nMusic stutters when using sledgehammer, and eventually the MacOS OOM killer<br>\ntakes action (although it normally kills other programs before Isabelle,<br>\ncuriously)</p>",
        "id": 354650050,
        "sender_full_name": "Email Gateway",
        "timestamp": 1682849590
    },
    {
        "content": "<p>From: \"Eugene W. Stark\" &lt;<a href=\"mailto:stark@cs.stonybrook.edu\">stark@cs.stonybrook.edu</a>&gt;<br>\nOn 4/27/23 05:31, Makarius wrote:</p>\n<blockquote>\n<p>On 26/04/2023 17:30, Eugene W. Stark wrote:</p>\n<blockquote>\n<p>To add to this: it is my experience and belief that, under certain modes of use, Sledgehammer causes<br>\nPoly/ML to leak heap space, resulting in the heap utilization eventually bumping up against the limit<br>\nand causing frequent garbage collection and poor performance.Â  At that point, restarting Isabelle is<br>\nnecessary to restore performance.</p>\n</blockquote>\n<p>As you have plenty of public examples on Isabelle/AFP, can you find a situation where it is somehow reproducible?</p>\n<p>We also need a specification of the hardware resources (RAM, CPU cores).</p>\n</blockquote>\n<p>I currently experience this on the following platform:</p>\n<p>Intel i9-10850K (10 cores)<br>\n    128GB RAM<br>\n        JEDIT_JAVA_OPTIONS=\"-Xmx16384m\"<br>\n        ML_OPTIONS=\"--maxheap 64G\"<br>\n    Ubuntu 22.04:<br>\n        Linux 5.19.0-40-generic #41~22.04.1-Ubuntu SMP PREEMPT_DYNAMIC Fri Mar 31 16:00:14 UTC 2 x86_64 x86_64 x86_64 GNU/Linux</p>\n<p>There isn't a cookbook recipe for reproducing this.  The problem typically occurs after a long session<br>\nwith heavy use of \"try\" and/or the Sledgehammer panel.</p>\n<p>To my mind, the problem is consistent with some kind of situation where weak references or the like<br>\nare created into the ML heap as a result of running the external provers, and then these references are<br>\nsometimes lost, resulting in a leak over time.  However, I have no specific knowledge of how the<br>\nexternal provers are interfaced with ML.  If there in fact are some kind of weak references of this<br>\nnature, I would think that instrumenting their creation and reclamation could potentially<br>\nindicate if there are leaks involving them.</p>\n<blockquote>\n<blockquote>\n<p>It might be related to the long-standing issue with some<br>\nof the external provers not handling signals correctly and popping up notifications that the external<br>\nprogram has crashed.</p>\n</blockquote>\n<p>What exactly is the signal / return code of the crash?</p>\n<p>Maybe this is just an out-of-memory situation in Linux.</p>\n</blockquote>\n<p>No, it is not an out-of-memory situation.  We have discussed this issue in this forum some years ago.<br>\nI did some investigation at that time and found that some of the provers under certain situations do<br>\nnot properly handle signals sent to them to cause them to terminate, resulting in the OS kernel flagging<br>\nan abnormal termination.  Under Ubuntu, at least, this causes a pop-up notification<br>\n(\"A system program has failed\", or the like).   Frequently after an extended session using Sledgehammer<br>\nI have to clear several (sometimes many) of these notifications, which accumulate underneath the<br>\napplication windows. In at least one case, I did trace the origin of the problem to a signal handler<br>\nthat was either part of the external prover code or part of some \"glue\" code that interfaced the Isabelle<br>\nsystem to that external prover -- I don't remember which.  I think the signal involved might have been<br>\nSIGABRT, but again I don't recall for sure at this time.  It was a signal whose default disposition<br>\nis to cause a core dump, because otherwise a notification would not be generated by the OS.</p>\n<p>If I recall correctly, the result of the previous thread and my own investigation was that<br>\n\"It is the fault of the external prover implementers\" and that my problem report should be directed at<br>\nthem.  Getting involved in that was not consistent with my own goals in using the system, so I did not<br>\npursue it further at that time, but the problem still exists.  The reason I mentioned this again in<br>\nthe current thread is that I speculate that the abnormal termination of an external prover in this way<br>\ncould be the origin of leaked storage in the ML heap.</p>\n<p>- Gene Stark</p>\n<p><a href=\"/user_uploads/14278/ioD53IMerCysU3hvDfSc4Qrt/OpenPGP_signature\">OpenPGP_signature</a></p>",
        "id": 354650052,
        "sender_full_name": "Email Gateway",
        "timestamp": 1682849591
    },
    {
        "content": "<p>From: \"Eugene W. Stark\" &lt;<a href=\"mailto:isabelle-users@starkeffect.com\">isabelle-users@starkeffect.com</a>&gt;<br>\nSince doing live monitoring was suggested, I've attached a screenshot showing an example of the<br>\n\"ML Cleanup lockup\" situation.  I went away and was eating dinner and watching television<br>\n(on a different computer) and I came back after about an hour to see this.  There are 10 cores<br>\nrunning full tilt, according to \"top\", but the monitor panel does not seem to show anything<br>\nhappening.  The JEdit window shows \"ML Cleanup\".  ML heap size is near the maximum of 64G<br>\nthat I have set.</p>\n<p>There previously was a \"try\" in the JEdit editor panel, and you can see the vestigial<br>\n\"No proof found\" in the Output panel.  I had deleted the \"try\", but this does not recover<br>\nthe session.  JEdit remains responsive, but gets no updates from ML.</p>\n<p>- Gene Stark</p>\n<p><a href=\"/user_uploads/14278/KKs8XErvGstJtt-88R7drE9m/Screenshot-from-2023-05-01-20-23-22.png\">Screenshot from 2023-05-01 20-23-22.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/14278/KKs8XErvGstJtt-88R7drE9m/Screenshot-from-2023-05-01-20-23-22.png\" title=\"Screenshot from 2023-05-01 20-23-22.png\"><img src=\"/user_uploads/14278/KKs8XErvGstJtt-88R7drE9m/Screenshot-from-2023-05-01-20-23-22.png\"></a></div>",
        "id": 354999701,
        "sender_full_name": "Email Gateway",
        "timestamp": 1682987299
    }
]