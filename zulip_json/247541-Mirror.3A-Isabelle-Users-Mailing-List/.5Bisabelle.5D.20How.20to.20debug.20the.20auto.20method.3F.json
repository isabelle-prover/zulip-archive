[
    {
        "content": "<p>From: Karolis Petrauskas &lt;<a href=\"mailto:k.petrauskas@gmail.com\">k.petrauskas@gmail.com</a>&gt;<br>\nI'm trying to debug the TLA+ proof system (TLAPS), which uses Isabelle as a<br>\nbackend.<br>\nThe lemma below is proved by <code>simp</code> but fails to be proved by <code>auto</code>.<br>\nWhile I can set the proof method manually, multiple existing proofs use<br>\n<code>auto</code> as the default.<br>\nHow can I find out why the auto method fails?</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">theory</span><span class=\"w\"> </span><span class=\"n\">tlapm_e6d04a_debug</span>\n<span class=\"w\">  </span><span class=\"kp\">imports</span><span class=\"w\"> </span><span class=\"n\">Constant</span><span class=\"w\"> </span><span class=\"n\">Zenon</span>\n<span class=\"k\">begin</span>\n\n<span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">ob1</span><span class=\"o\">:</span>\n<span class=\"w\">  </span><span class=\"kp\">fixes</span><span class=\"w\"> </span><span class=\"n\">S</span>\n<span class=\"w\">    </span><span class=\"kp\">and</span><span class=\"w\"> </span><span class=\"n\">op</span>\n<span class=\"w\">    </span><span class=\"kp\">and</span><span class=\"w\"> </span><span class=\"n\">IsFiniteSet</span>\n<span class=\"w\">    </span><span class=\"kp\">and</span><span class=\"w\"> </span><span class=\"n\">CardSum</span>\n<span class=\"w\">  </span><span class=\"kp\">assumes</span><span class=\"w\"> </span><span class=\"n\">a1</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"IsFiniteSet (S)\"</span>\n<span class=\"w\">      </span><span class=\"kp\">and</span><span class=\"w\"> </span><span class=\"n\">a2</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"∀ e ∈ (S) : op (e) ∈ Nat\"</span>\n<span class=\"w\">      </span><span class=\"kp\">and</span><span class=\"w\"> </span><span class=\"n\">a4</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"CardSum ((S), (op)) = 0\"</span>\n<span class=\"w\">      </span><span class=\"kp\">and</span><span class=\"w\"> </span><span class=\"n\">a5</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"</span>\n<span class=\"s\">        ⋀ S' :: c. (</span>\n<span class=\"s\">          (IsFiniteSet (S')) ⟹ (⋀ op :: c =&gt; c. (</span>\n<span class=\"s\">            (∀ e ∈ (S') :  (op (e)) ∈ Nat) ⟹ (</span>\n<span class=\"s\">              ((CardSum ((S'), (op))) = 0) ⟹ (</span>\n<span class=\"s\">                ∀ e ∈ S' : (op (e)) = 0</span>\n<span class=\"s\">              )</span>\n<span class=\"s\">            )</span>\n<span class=\"s\">          ))</span>\n<span class=\"s\">        )\"</span>\n<span class=\"w\">  </span><span class=\"kp\">shows</span><span class=\"w\"> </span><span class=\"s\">\"∀ e ∈ S : op (e) = 0\"</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"kp\">is</span><span class=\"w\"> </span><span class=\"s\">\"PROP ?P\"</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">assms</span>\n<span class=\"w\">  </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">auto</span><span class=\"w\"> </span><span class=\"c\">(* NOTE: simp works here *)</span>\n<span class=\"k\">end</span>\n</code></pre></div>\n<p>This fragment is a cleaned-up version of a theory generated by TLAPS; the<br>\noriginal version can be found here (<br>\n<a href=\"https://gist.github.com/kape1395/84562bf5679fe9f9f65c4d85715b7827\">https://gist.github.com/kape1395/84562bf5679fe9f9f65c4d85715b7827</a>).</p>\n<p>This proof is done in the context of the TLA+ theory that can be found here:<br>\n<a href=\"https://github.com/tlaplus/tlapm/tree/isabelle2020-dune-2024RC2/isabelle\">https://github.com/tlaplus/tlapm/tree/isabelle2020-dune-2024RC2/isabelle</a></p>\n<p>The behavior looks the same in Isabelle2023 and Isabelle2024-RC2.</p>\n<p>Karolis Petrauskas</p>",
        "id": 434492349,
        "sender_full_name": "Email Gateway",
        "timestamp": 1713611810
    },
    {
        "content": "<p>From: \"Eugene W. Stark\" &lt;<a href=\"mailto:isabelle-users@starkeffect.com\">isabelle-users@starkeffect.com</a>&gt;<br>\nI'm certainly not an expert on how \"auto\" works under the covers, but I can offer some<br>\npractical advice based on my experience.</p>\n<p>If the goal can be proved with simp but not with auto, then some of the extra things that<br>\nauto does beyond simp are getting in the way.  Sometimes this can be lemmas that are<br>\ndeclared as \"intro\", \"elim\", or \"dest\" that are ill-formed for the type of reasoning<br>\nthey are declared for.  Sometimes this can be the result of case splitting that auto<br>\ndoes but simp does not.  Another thing that I have sometimes seen is that although<br>\nauto has a certain capability for \"solving\" things by instantiating schematic variables,<br>\nsometimes it will choose the wrong instance as a \"solution\", thereby rendering the<br>\nresulting set of subgoals that are derived from this choice to be unprovable.</p>\n<p>The first major distinction to make is whether auto \"loops\" or actually terminates with<br>\na failure (you didn't say in your posting).  If it \"loops\", it could be that ill-formed<br>\n\"intro\", \"elim\", etc. rules are the culprit.  Or, it could have embarked on a case-splitting<br>\nadventure in which it spends a lot of time chopping things up into a huge number of<br>\nsmall cases.  It's hard to give a general strategy for figuring out what is going on<br>\nif auto is not terminating, because you don't get any output.  If you declared your own<br>\n\"intro\", \"elim\", etc. rules that were not in the base package that you were using, then<br>\nyou might try commenting some of those declarations to see if you can get auto to terminate.<br>\nOf course, it could be the underlying package that you are using, but presumably someone<br>\nhas worked with that longer and there is less likelihood of looping problems remaining.<br>\nCase splitting issues often tend to occur when working with function or datatype<br>\ndefinitions.  However, those are not evident in the example you posted.</p>\n<p>If \"auto\" terminates, then the failed subgoals it outputs upon termination are the place<br>\nto start.  I would look at them closely to make sure that they are actually true<br>\nand that some kind of choice has not been made that created unprovable subgoals,<br>\nas I mentioned above.  That strikes me as the most likely thing that would result in<br>\nauto terminating with failure when simp succeeds.  If that is what is occurred,<br>\nthen it might be possible to rewrite whatever rules auto is using, so the unification<br>\nor whatever it is doing to find the instantiations will not result in unprovable<br>\nsubgoals.</p>\n<p>I hope that is at least a little bit helpful and not totally off the mark!</p>",
        "id": 434496092,
        "sender_full_name": "Email Gateway",
        "timestamp": 1713615101
    },
    {
        "content": "<p>From: Karolis Petrauskas &lt;<a href=\"mailto:k.petrauskas@gmail.com\">k.petrauskas@gmail.com</a>&gt;<br>\nThanks for the hints! They are useful.<br>\nI'm still debugging those failures, but now things look clearer.<br>\nLogging like <code>simp_trace</code> would be nice to have for the \"classical<br>\nreasoner\" as well.</p>\n<p>Karolis</p>",
        "id": 437105250,
        "sender_full_name": "Email Gateway",
        "timestamp": 1714910030
    }
]