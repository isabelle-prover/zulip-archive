[
    {
        "content": "<p>From: Kangfeng Ye &lt;<a href=\"mailto:cl-isabelle-users@lists.cam.ac.uk\">cl-isabelle-users@lists.cam.ac.uk</a>&gt;<br>\nDear all,</p>\n<p>I would like to define a new data type for a finite set of natural numbers,<br>\nand it is also parametric in its size.</p>\n<ol>\n<li>Something like below.</li>\n</ol>\n<p>abbreviation \"max_agents ≡ 2\"<br>\ntypedef snat = \"{0..&lt;max_agents}::nat set\"<br>\n  morphisms nat_of_snat snat_of_nat<br>\n  by (rule_tac x=\"0\" in exI, auto)</p>\n<p>There is one problem here because max_agents is not a parameter for snat. So<br>\nit couldn't be instantiated to types with different sizes.</p>\n<ol start=\"2\">\n<li>I have tried the finite type variable below.</li>\n</ol>\n<p>typedef ('s, 'n::finite) snat = \"{0..&lt;CARD('n)}::nat set\"<br>\n  morphisms nat_of_snat snat_of_nat<br>\n  by (rule_tac x=\"0\" in exI, auto)</p>\n<p>But there are two problems:</p>\n<ul>\n<li>\n<p>I cannot use \"derive linorder\" to instantiate linorder for the type (I want<br>\nto use the sort for the type)</p>\n</li>\n<li>\n<p>an error in code generation \"Finite_Set.hs:21:1-52: Non-exhaustive patterns<br>\nin function card\"</p>\n</li>\n</ul>\n<ol start=\"3\">\n<li>Then I tried locale as well like below.</li>\n</ol>\n<p>locale T1 =<br>\n  fixes max_agents :: \"nat\"<br>\nbegin<br>\ntypedef snat = \"{0..&lt;max_agents}\"<br>\n  morphisms nat_of_snat snat_of_nat<br>\n  by (rule_tac x=\"0\" in exI, auto)<br>\nend</p>\n<p>This also caused an error:</p>\n<ul>\n<li>Illegal variables in representing set: \"max_agents\"</li>\n</ul>\n<p>It seems related to \"closed term\" as mentioned in<br>\n<a href=\"https://www21.in.tum.de/~kuncar/documents/kuncar-phdthesis.pdf\">https://www21.in.tum.de/~kuncar/documents/kuncar-phdthesis.pdf</a></p>\n<p>By the way, I am using Isabelle2023 now.</p>\n<p>Any suggestions?</p>\n<p>Thanks,<br>\nKangfeng</p>",
        "id": 503132674,
        "sender_full_name": "Email Gateway",
        "timestamp": 1741039434
    },
    {
        "content": "<p>From: Fabian Huch &lt;<a href=\"mailto:huch@in.tum.de\">huch@in.tum.de</a>&gt;<br>\nIn HOL (and Isabelle/HOL in particular), types cannot depend on terms, <br>\nso #1 and #3 are not possible -- you can only do #2, commonly called the <br>\n'Harrison Trick' [1].</p>\n<p>Why the Haskell code-gen isn't set up for CARD is a different question <br>\n(that I can't answer).</p>\n<p>Fabian</p>\n<p>[1]: Kunčar, O., Popescu, A. (2016). From Types to Sets by Local Type <br>\nDefinitions in Higher-Order Logic. In: Blanchette, J., Merz, S. (eds) <br>\nInteractive Theorem Proving. ITP 2016. Lecture Notes in Computer <br>\nScience(), vol 9807. Springer, Cham. <br>\n<a href=\"https://doi.org/10.1007/978-3-319-43144-4_13\">https://doi.org/10.1007/978-3-319-43144-4_13</a></p>\n<p>On 3/3/25 23:03, Kangfeng Ye (via cl-isabelle-users Mailing List) wrote:</p>\n<blockquote>\n<p>Dear all,</p>\n<p>I would like to define a new data type for a finite set of natural numbers,<br>\nand it is also parametric in its size.</p>\n<ol>\n<li>Something like below.</li>\n</ol>\n<p>abbreviation \"max_agents ≡ 2\"<br>\ntypedef snat = \"{0..&lt;max_agents}::nat set\"<br>\n   morphisms nat_of_snat snat_of_nat<br>\n   by (rule_tac x=\"0\" in exI, auto)</p>\n<p>There is one problem here because max_agents is not a parameter for snat. So<br>\nit couldn't be instantiated to types with different sizes.</p>\n<ol start=\"2\">\n<li>I have tried the finite type variable below.</li>\n</ol>\n<p>typedef ('s, 'n::finite) snat = \"{0..&lt;CARD('n)}::nat set\"<br>\n   morphisms nat_of_snat snat_of_nat<br>\n   by (rule_tac x=\"0\" in exI, auto)</p>\n<p>But there are two problems:<br>\n- I cannot use \"derive linorder\" to instantiate linorder for the type (I want<br>\nto use the sort for the type)<br>\n- an error in code generation \"Finite_Set.hs:21:1-52: Non-exhaustive patterns<br>\nin function card\"</p>\n<ol start=\"3\">\n<li>Then I tried locale as well like below.</li>\n</ol>\n<p>locale T1 =<br>\n   fixes max_agents :: \"nat\"<br>\nbegin<br>\ntypedef snat = \"{0..&lt;max_agents}\"<br>\n   morphisms nat_of_snat snat_of_nat<br>\n   by (rule_tac x=\"0\" in exI, auto)<br>\nend</p>\n<p>This also caused an error:<br>\n- Illegal variables in representing set: \"max_agents\"</p>\n<p>It seems related to \"closed term\" as mentioned in<br>\n<a href=\"https://www21.in.tum.de/~kuncar/documents/kuncar-phdthesis.pdf\">https://www21.in.tum.de/~kuncar/documents/kuncar-phdthesis.pdf</a></p>\n<p>By the way, I am using Isabelle2023 now.</p>\n<p>Any suggestions?</p>\n<p>Thanks,<br>\nKangfeng</p>\n</blockquote>",
        "id": 503242522,
        "sender_full_name": "Email Gateway",
        "timestamp": 1741087717
    },
    {
        "content": "<p>From: Kangfeng Ye &lt;<a href=\"mailto:cl-isabelle-users@lists.cam.ac.uk\">cl-isabelle-users@lists.cam.ac.uk</a>&gt;<br>\nFabian,</p>\n<p>That's what I thought. Thanks for confirming it and I will focus on #2 and<br>\ntry to figure out the problem with the code generation.</p>\n<p>Cheers,<br>\nKangfeng</p>\n<p>On Tue, 4 Mar 2025, 12:28 Fabian Huch, &lt;<a href=\"mailto:huch@in.tum.de\">huch@in.tum.de</a>&gt; wrote:</p>\n<blockquote>\n<p>In HOL (and Isabelle/HOL in particular), types cannot depend on terms,<br>\nso #1 and #3 are not possible -- you can only do #2, commonly called the<br>\n'Harrison Trick' [1].</p>\n<p>Why the Haskell code-gen isn't set up for CARD is a different question<br>\n(that I can't answer).</p>\n<p>Fabian</p>\n<p>[1]: Kunčar, O., Popescu, A. (2016). From Types to Sets by Local Type<br>\nDefinitions in Higher-Order Logic. In: Blanchette, J., Merz, S. (eds)<br>\nInteractive Theorem Proving. ITP 2016. Lecture Notes in Computer<br>\nScience(), vol 9807. Springer, Cham.<br>\n<a href=\"https://doi.org/10.1007/978-3-319-43144-4_13\">https://doi.org/10.1007/978-3-319-43144-4_13</a></p>\n<p>On 3/3/25 23:03, Kangfeng Ye (via cl-isabelle-users Mailing List) wrote:</p>\n<blockquote>\n<p>Dear all,</p>\n<p>I would like to define a new data type for a finite set of natural<br>\nnumbers,<br>\nand it is also parametric in its size.</p>\n<ol>\n<li>Something like below.</li>\n</ol>\n<p>abbreviation \"max_agents ≡ 2\"<br>\ntypedef snat = \"{0..&lt;max_agents}::nat set\"<br>\n   morphisms nat_of_snat snat_of_nat<br>\n   by (rule_tac x=\"0\" in exI, auto)</p>\n<p>There is one problem here because max_agents is not a parameter for<br>\nsnat. So<br>\nit couldn't be instantiated to types with different sizes.</p>\n<ol start=\"2\">\n<li>I have tried the finite type variable below.</li>\n</ol>\n<p>typedef ('s, 'n::finite) snat = \"{0..&lt;CARD('n)}::nat set\"<br>\n   morphisms nat_of_snat snat_of_nat<br>\n   by (rule_tac x=\"0\" in exI, auto)</p>\n<p>But there are two problems:<br>\n- I cannot use \"derive linorder\" to instantiate linorder for the type (I<br>\nwant<br>\nto use the sort for the type)<br>\n- an error in code generation \"Finite_Set.hs:21:1-52: Non-exhaustive<br>\npatterns<br>\nin function card\"</p>\n<ol start=\"3\">\n<li>Then I tried locale as well like below.</li>\n</ol>\n<p>locale T1 =<br>\n   fixes max_agents :: \"nat\"<br>\nbegin<br>\ntypedef snat = \"{0..&lt;max_agents}\"<br>\n   morphisms nat_of_snat snat_of_nat<br>\n   by (rule_tac x=\"0\" in exI, auto)<br>\nend</p>\n<p>This also caused an error:<br>\n- Illegal variables in representing set: \"max_agents\"</p>\n<p>It seems related to \"closed term\" as mentioned in<br>\n<a href=\"https://www21.in.tum.de/~kuncar/documents/kuncar-phdthesis.pdf\">https://www21.in.tum.de/~kuncar/documents/kuncar-phdthesis.pdf</a></p>\n<p>By the way, I am using Isabelle2023 now.</p>\n<p>Any suggestions?</p>\n<p>Thanks,<br>\nKangfeng<br>\n</p>\n</blockquote>\n</blockquote>",
        "id": 503254225,
        "sender_full_name": "Email Gateway",
        "timestamp": 1741091327
    },
    {
        "content": "<p>From: Gerwin Klein &lt;<a href=\"mailto:cl-isabelle-users@lists.cam.ac.uk\">cl-isabelle-users@lists.cam.ac.uk</a>&gt;<br>\nI would recommend looking at HOL/Library/Numeral_Type.thy -- it implements types with n elements. These types are then just called \"n\".</p>\n<p>I.e. you can write \"x :: 10\" and x will be a variable that can take on values 0..9. They support a decent amount of arithmetic modulo the type size, e.g. \"5 + 5 = (0::10)\".</p>\n<p>There is a bit of additional library for it in <a href=\"https://github.com/seL4/l4v/blob/master/lib/More_Numeral_Type.thy\">https://github.com/seL4/l4v/blob/master/lib/More_Numeral_Type.thy</a></p>\n<p>Cheers,<br>\nGerwin</p>\n<p>On 4 Mar 2025, at 23:28, Kangfeng Ye &lt;<a href=\"mailto:cl-isabelle-users@lists.cam.ac.uk\">cl-isabelle-users@lists.cam.ac.uk</a>&gt; wrote:</p>\n<p>Fabian,</p>\n<p>That's what I thought. Thanks for confirming it and I will focus on #2 and try to figure out the problem with the code generation.</p>\n<p>Cheers,<br>\nKangfeng</p>\n<p>On Tue, 4 Mar 2025, 12:28 Fabian Huch, &lt;huch@in.tum.de&lt;mailto:<a href=\"mailto:huch@in.tum.de\">huch@in.tum.de</a>&gt;&gt; wrote:<br>\nIn HOL (and Isabelle/HOL in particular), types cannot depend on terms,<br>\nso #1 and #3 are not possible -- you can only do #2, commonly called the<br>\n'Harrison Trick' [1].</p>\n<p>Why the Haskell code-gen isn't set up for CARD is a different question<br>\n(that I can't answer).</p>\n<p>Fabian</p>\n<p>[1]: Kunčar, O., Popescu, A. (2016). From Types to Sets by Local Type<br>\nDefinitions in Higher-Order Logic. In: Blanchette, J., Merz, S. (eds)<br>\nInteractive Theorem Proving. ITP 2016. Lecture Notes in Computer<br>\nScience(), vol 9807. Springer, Cham.<br>\n<a href=\"https://doi.org/10.1007/978-3-319-43144-4_13\">https://doi.org/10.1007/978-3-319-43144-4_13</a></p>\n<p>On 3/3/25 23:03, Kangfeng Ye (via cl-isabelle-users Mailing List) wrote:</p>\n<blockquote>\n<p>Dear all,</p>\n<p>I would like to define a new data type for a finite set of natural numbers,<br>\nand it is also parametric in its size.</p>\n<ol>\n<li>Something like below.</li>\n</ol>\n<p>abbreviation \"max_agents ≡ 2\"<br>\ntypedef snat = \"{0..&lt;max_agents}::nat set\"<br>\n   morphisms nat_of_snat snat_of_nat<br>\n   by (rule_tac x=\"0\" in exI, auto)</p>\n<p>There is one problem here because max_agents is not a parameter for snat. So<br>\nit couldn't be instantiated to types with different sizes.</p>\n<ol start=\"2\">\n<li>I have tried the finite type variable below.</li>\n</ol>\n<p>typedef ('s, 'n::finite) snat = \"{0..&lt;CARD('n)}::nat set\"<br>\n   morphisms nat_of_snat snat_of_nat<br>\n   by (rule_tac x=\"0\" in exI, auto)</p>\n<p>But there are two problems:<br>\n- I cannot use \"derive linorder\" to instantiate linorder for the type (I want<br>\nto use the sort for the type)<br>\n- an error in code generation \"Finite_Set.hs:21:1-52: Non-exhaustive patterns<br>\nin function card\"</p>\n<ol start=\"3\">\n<li>Then I tried locale as well like below.</li>\n</ol>\n<p>locale T1 =<br>\n   fixes max_agents :: \"nat\"<br>\nbegin<br>\ntypedef snat = \"{0..&lt;max_agents}\"<br>\n   morphisms nat_of_snat snat_of_nat<br>\n   by (rule_tac x=\"0\" in exI, auto)<br>\nend</p>\n<p>This also caused an error:<br>\n- Illegal variables in representing set: \"max_agents\"</p>\n<p>It seems related to \"closed term\" as mentioned in<br>\n<a href=\"https://www21.in.tum.de/~kuncar/documents/kuncar-phdthesis.pdf\">https://www21.in.tum.de/~kuncar/documents/kuncar-phdthesis.pdf</a></p>\n<p>By the way, I am using Isabelle2023 now.</p>\n<p>Any suggestions?</p>\n<p>Thanks,<br>\nKangfeng</p>\n</blockquote>",
        "id": 503372681,
        "sender_full_name": "Email Gateway",
        "timestamp": 1741125586
    },
    {
        "content": "<p>From: Kangfeng Ye &lt;<a href=\"mailto:cl-isabelle-users@lists.cam.ac.uk\">cl-isabelle-users@lists.cam.ac.uk</a>&gt;<br>\nGerwin,</p>\n<p>I would recommend looking at HOL/Library/Numeral_Type.thy -- it implements</p>\n<blockquote>\n<p>types with n elements. These types are then just called \"n\".</p>\n</blockquote>\n<p>I.e. you can write \"x :: 10\" and x will be a variable that can take on</p>\n<blockquote>\n<p>values 0..9. They support a decent amount of arithmetic modulo the type<br>\nsize, e.g. \"5 + 5 = (0::10)\".</p>\n</blockquote>\n<p>I did use the Numeral_Type.thy for the 'a::finite and I usually instantiate<br>\nthe type \"('s, 'a::finite) snat\" as \"(T, 2) snat\". Then I got the error in<br>\ncode generation \"Finite_Set.hs:21:1-52: Non-exhaustive patterns\".<br>\nAt the moment, I have received suggestions from other people about using<br>\nType_Length (as used in Saturated.thy or Word.thy).  I am trying this<br>\napproach.</p>\n<p>There is a bit of additional library for it in</p>\n<blockquote>\n<p><a href=\"https://github.com/seL4/l4v/blob/master/lib/More_Numeral_Type.thy\">https://github.com/seL4/l4v/blob/master/lib/More_Numeral_Type.thy</a></p>\n</blockquote>\n<p>Glad to know this additional library.</p>\n<p>Cheers,<br>\nKangfeng</p>",
        "id": 503392793,
        "sender_full_name": "Email Gateway",
        "timestamp": 1741134581
    },
    {
        "content": "<p>From: Kangfeng Ye &lt;<a href=\"mailto:cl-isabelle-users@lists.cam.ac.uk\">cl-isabelle-users@lists.cam.ac.uk</a>&gt;<br>\nBased on Peter Gammie, Fabian, and others' suggestions, I have found a<br>\nworkable solution using #2. I have attached the theory for your reference.</p>\n<p>A little bit of information about the scenario. I would like to use the<br>\nfinite set of natural numbers to define finite agents, finite messages and<br>\nchannels.</p>\n<p>For example,</p>\n<blockquote>\n<p>datatype ('a::len) dagent =  Agent (ag: \"'a ssnat\")</p>\n</blockquote>\n<p>datatype ('k::len,'s::len) dkey = Kp (kp: \"ssnat['k]\") | Ks (ks:</p>\n<blockquote>\n<p>\"ssnat['s]\")<br>\n</p>\n</blockquote>\n<p>Then for each protocol, they are instantiated to specific finite types.</p>\n<p>type_synonym max_agents = 4</p>\n<blockquote>\n<p>type_synonym max_pks = 4<br>\ntype_synonym max_sks = 4<br>\ntype_synonym dagent = \"max_agents dagent\"</p>\n</blockquote>\n<p>type_synonym dkey = \"(max_pks, max_sks) dkey\"</p>\n<p>This is what I want to have: it is parametric in sizes and can generate<br>\nright Haskell code.</p>\n<p>Thanks for all your help.</p>\n<p>Cheers,<br>\nKangfeng</p>\n<p>On Wed, 5 Mar 2025 at 01:28, Kangfeng Ye &lt;<a href=\"mailto:kangfeng.ye@york.ac.uk\">kangfeng.ye@york.ac.uk</a>&gt; wrote:</p>\n<blockquote>\n<p>Gerwin,</p>\n<p>I would recommend looking at HOL/Library/Numeral_Type.thy -- it implements</p>\n<blockquote>\n<p>types with n elements. These types are then just called \"n\".</p>\n</blockquote>\n<p>I.e. you can write \"x :: 10\" and x will be a variable that can take on</p>\n<blockquote>\n<p>values 0..9. They support a decent amount of arithmetic modulo the type<br>\nsize, e.g. \"5 + 5 = (0::10)\".</p>\n</blockquote>\n<p>I did use the Numeral_Type.thy for the 'a::finite and I usually<br>\ninstantiate the type \"('s, 'a::finite) snat\" as \"(T, 2) snat\". Then I got<br>\nthe error in code generation \"Finite_Set.hs:21:1-52: Non-exhaustive<br>\npatterns\".<br>\nAt the moment, I have received suggestions from other people about using<br>\nType_Length (as used in Saturated.thy or Word.thy).  I am trying this<br>\napproach.</p>\n<p>There is a bit of additional library for it in</p>\n<blockquote>\n<p><a href=\"https://github.com/seL4/l4v/blob/master/lib/More_Numeral_Type.thy\">https://github.com/seL4/l4v/blob/master/lib/More_Numeral_Type.thy</a></p>\n</blockquote>\n<p>Glad to know this additional library.</p>\n<p>Cheers,<br>\nKangfeng</p>\n</blockquote>\n<p><a href=\"/user_uploads/14278/KiJYr3y93CFB9S-by3GDQnjB/FSNat.thy\">FSNat.thy</a></p>",
        "id": 503924776,
        "sender_full_name": "Email Gateway",
        "timestamp": 1741309734
    }
]