[
    {
        "content": "<p>From: \"N. Raghavendra\" &lt;<a href=\"mailto:nyraghu27132@gmail.com\">nyraghu27132@gmail.com</a>&gt;<br>\nI am using Isabelle for the first time.  I would like to verify<br>\nproperties of simple SML programs.  For example, I have an SML file<br>\nwith the following content:</p>\n<p>-- foo.sml</p>\n<p>fun foldr _ y [] = y<br>\n  | foldr f y (x :: xs) = f (x, (foldr f y xs))</p>\n<p>fun foldl _ y [] = y<br>\n  | foldl f y (x :: xs) = foldl f (f (x, y)) xs</p>\n<p>-- end of file</p>\n<p>I am able to import this SML from an Isabelle file like this</p>\n<p>-- foo.thy</p>\n<p>theory foo<br>\n  imports Pure<br>\nbegin</p>\n<p>SML_file ‹foo.sml›</p>\n<p>end</p>\n<p>-- end of file</p>\n<p>Now how do I prove, e.g., that</p>\n<p>foldl f y xs = foldr f y (rev xs)</p>\n<p>Thanks!</p>\n<p>Raghu.</p>",
        "id": 255856106,
        "sender_full_name": "Email Gateway",
        "timestamp": 1633166354
    },
    {
        "content": "<p>From: Jakub Kądziołka &lt;<a href=\"mailto:kuba@kadziolka.net\">kuba@kadziolka.net</a>&gt;<br>\nThe workflow of producing a verified program in Isabelle goes the other<br>\nway around — you define the functions in your Isabelle code, and then<br>\ninstruct Isabelle to generate the corresponding code in SML, OCaml,<br>\nHaskell, or Scala, by using the export_code command (see<br>\n<a href=\"https://isabelle.in.tum.de/dist/Isabelle2021/doc/codegen.pdf\">https://isabelle.in.tum.de/dist/Isabelle2021/doc/codegen.pdf</a>).</p>\n<p>The SML_file command imports your definitions on the meta level — they<br>\ncan be used to write automation for finding the proofs, but are<br>\ncompletely outside of the logic and nothing can be proved about them.</p>\n<p>Hope this helps.</p>\n<p>Regards,<br>\nJakub Kądziołka</p>",
        "id": 255856481,
        "sender_full_name": "Email Gateway",
        "timestamp": 1633166731
    },
    {
        "content": "<p>From: \"N. Raghavendra\" &lt;<a href=\"mailto:nyraghu27132@gmail.com\">nyraghu27132@gmail.com</a>&gt;<br>\nThanks for the clarification.  I'll see the program extraction manual.</p>\n<p>Regards,<br>\nRaghu.</p>\n<hr>\n<p>At 2021-10-02T11:20:12+02:00, Jakub Kądziołka wrote:</p>",
        "id": 255924763,
        "sender_full_name": "Email Gateway",
        "timestamp": 1633238155
    },
    {
        "content": "<p>From: \"N. Raghavendra\" &lt;<a href=\"mailto:nyraghu27132@gmail.com\">nyraghu27132@gmail.com</a>&gt;<br>\nAt 2021-10-02T13:35:27+02:00, Buday Gergely István wrote:</p>\n<blockquote>\n<p>If you wanted to verify ML programs you might take a look at CakeML<br>\nwhere you can verify ML programs down to machine code using HOL4.</p>\n</blockquote>\n<p>Thanks for the pointer.  It seems a bit far from my interests now.</p>\n<p>Regards,<br>\nRaghu.</p>",
        "id": 255924846,
        "sender_full_name": "Email Gateway",
        "timestamp": 1633238242
    }
]