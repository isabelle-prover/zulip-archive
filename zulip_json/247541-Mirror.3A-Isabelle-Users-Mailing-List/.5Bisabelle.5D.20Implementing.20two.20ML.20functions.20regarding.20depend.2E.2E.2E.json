[
    {
        "content": "<p>From: <a href=\"mailto:qj213@cam.ac.uk\">qj213@cam.ac.uk</a><br>\nHi,</p>\n<p>I'd like to implement two functions in ML, to extract the lemmas and<br>\ndefinitions certain theorems and definitions depend upon. If someone can give<br>\nme some pointers to how they should be implemented I would be very grateful.</p>\n<ol>\n<li>A function that extracts the lemmas used in a theorem's proof.</li>\n</ol>\n<p>Suppose I have the theorem<br>\ntheorem test: \"True\"<br>\n  by simp</p>\n<p>I'd like a function that works similarly to 'thm_deps test' that gives me a<br>\nlist of lemma names that are used in the proof of \"test\".<br>\nConcretely a function of the type Toplevel.state =&gt; string =&gt; string list. It<br>\ntakes the current top level state and the name of the theorem as the<br>\narguments, and returns the list [\"HOL.TrueI\", \"Drule.protectD\",<br>\n\"Drule.protectI\"].</p>\n<ol start=\"2\">\n<li>A function that extracts the types and definitions used to state a new<br>\ndefinition.</li>\n</ol>\n<p>Suppose I define a function<br>\nfun f :: \"nat ⇒ nat\" where<br>\n\"f 0 = 0\" |<br>\n\"f (Suc n) = Suc (f n)\"</p>\n<p>I'd like a function that has the type Toplevel.state =&gt; string =&gt; (string *\nstring) list. It takes the current top level state and the name of the<br>\ndefinition as the arguments, and returns the entities used in the definition.<br>\nIn this case I'd like the function to return<br>\n[(\"nat\", \"typedef nat = \"{n. Nat n}\"\\n morphisms Rep_Nat Abs_Nat\\n using<br>\nNat.Zero_RepI by auto\"),<br>\n (\"0\", \"class zero =\\n fixes zero :: 'a  (\"0\")\"),<br>\n (\"Suc\", \"definition Suc :: \"nat ⇒ nat\"\\n where \"Suc n = Abs_Nat (Suc_Rep<br>\n(Rep_Nat n))\"\")]</p>\n<p>I didn't find anything that is similar to what I'm trying to do here.</p>\n<p>Again, many thanks if you can give a hint or point me to the right direction!</p>\n<p>Best,<br>\nAlbert</p>",
        "id": 285063298,
        "sender_full_name": "Email Gateway",
        "timestamp": 1654474537
    },
    {
        "content": "<p>From: Talia Ringer &lt;<a href=\"mailto:tringer@cs.washington.edu\">tringer@cs.washington.edu</a>&gt;<br>\nHi all, talking to each other, we found <code>thm_deps</code> in the Isabelle<br>\ndocumentation. But we aren't sure exactly which dependencies it's<br>\nprinting---is it just those of the theorem, or those of the theorem and<br>\nproof, or just those of the proof?</p>\n<p>I'm diving into the ML source code for thm_deps to try to figure out how to<br>\nwrite other functions to get dependencies in different ways. If anyone<br>\nknows this code well, guidance is appreciated :)</p>\n<p>Talia</p>",
        "id": 285183869,
        "sender_full_name": "Email Gateway",
        "timestamp": 1654556399
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nInstead of diving reductionistically into Isabelle/ML, you should step back <br>\nand look holistically at Isabelle/Scala.</p>\n<p>The latter has access to formal markup (for occurrences of entities in source <br>\ntext), and also at foundational theory content.</p>\n<p>The latter is accessible via the module Export_Theory in Scala. Here is an <br>\nexample that makes use of it: <a href=\"https://github.com/Deducteam/isabelle_dedukti\">https://github.com/Deducteam/isabelle_dedukti</a></p>\n<p>Isabelle/Deducti uses proof terms, but this is not required here (and does not <br>\nscale beyond the most basic prefix of Isabelle/HOL).</p>\n<p>Makarius</p>",
        "id": 285227143,
        "sender_full_name": "Email Gateway",
        "timestamp": 1654595841
    },
    {
        "content": "<p>From: Talia Ringer &lt;<a href=\"mailto:tringer@cs.washington.edu\">tringer@cs.washington.edu</a>&gt;<br>\nThanks, I'll take a look at Dedukti as well!</p>",
        "id": 285269891,
        "sender_full_name": "Email Gateway",
        "timestamp": 1654616238
    }
]