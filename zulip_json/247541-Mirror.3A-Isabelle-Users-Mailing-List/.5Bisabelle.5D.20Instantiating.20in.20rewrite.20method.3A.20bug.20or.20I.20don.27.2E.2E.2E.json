[
    {
        "content": "<p>From: Dominique Unruh &lt;<a href=\"mailto:cl-isabelle-users@lists.cam.ac.uk\">cl-isabelle-users@lists.cam.ac.uk</a>&gt;<br>\nDear all,</p>\n<p>I am trying to use the <em>rewrite</em> method to instantiate a subterm. The <br>\nrewrite rule *sum_single *has a free parameter <em>i</em> (i.e., that does not <br>\noccur in the lhs), and I would like to specify what it should be <br>\ninstantiated to.</p>\n<p>The documentation (<a href=\"https://arxiv.org/pdf/2111.04082.pdf\">https://arxiv.org/pdf/2111.04082.pdf</a>) claims that <br>\nthere is a syntax <em>rewrite ... sum_single where ?i=x</em> to substitute <br>\n<em>?</em><em>i</em> with something bound by <em>rewrite</em>. Unfortunately, this features <br>\nhas been removed.</p>\n<p>That is, I cannot simply write *  apply (rewrite at ‹∑x∈UNIV. ⌑› <br>\nsum_single where ?i=x)*.</p>\n<p>My best guess was that I need to recreate enough of the rhs of <br>\n<em>sum_single</em> to indirectly specify *i *by pattern match. I am using<br>\n<em>apply (rewrite at ‹∑x∈UNIV. ⌑› to ‹if x∈_ then _ else _› sum_single)</em></p>\n<p>Details are in the attached theory.</p>\n<p>Unfortunately, this throws an <em>exception Pattern</em>. (In RC2.)</p>\n<p>* Did I use this feature incorrectly? (Or is this a bug?)<br>\n  * Is there some simpler way to instantiate <em>i</em> without having to<br>\n    specify a pattern? (It would be a lot easier to just say something<br>\n    like <em>?i=x</em> as the documentation promises.)</p>\n<p>Best wishes,<br>\nDominique.</p>\n<p><a href=\"/user_uploads/14278/a6HfI2fEk0XjgMevM328zI25/Scratch.thy\">Scratch.thy</a></p>",
        "id": 381291353,
        "sender_full_name": "Email Gateway",
        "timestamp": 1691009191
    },
    {
        "content": "<p>From: Peter Lammich &lt;<a href=\"mailto:lammich@in.tum.de\">lammich@in.tum.de</a>&gt;<br>\nHi,</p>\n<p>you can use</p>\n<p>apply (rewrite at ‹∑x∈UNIV. ⌑› sum_single[where ?i=x])</p>\n<p>this yields an instantiation, however, with an ugly internal name for x. <br>\nMoreover, the unifier cannot get the extra variable x into f, yielding <br>\nthe (unprovable) subgoals</p>\n<p>1. ⋀x. finite UNIV<br>\n  2. ⋀xa j. ⟦j ≠ x__; j ∈ UNIV⟧ ⟹ of_bool (xa = j) = 0<br>\n  3. (∑xa∈UNIV. if x__ ∈ UNIV then of_bool (xa = x__) else 0) = 2</p>\n<p>Note that, in subgoal 2, the unifier has inserted a new variable xa. I <br>\ndon't completely understand this effect, but it's most likely that x is  <br>\nnot a parameter to f in the original rule.</p>",
        "id": 381381318,
        "sender_full_name": "Email Gateway",
        "timestamp": 1691047949
    },
    {
        "content": "<p>From: Dominique Unruh &lt;<a href=\"mailto:cl-isabelle-users@lists.cam.ac.uk\">cl-isabelle-users@lists.cam.ac.uk</a>&gt;<br>\nDear all,</p>\n<p>I tried transforming a working example with bound variable instantiation <br>\nfrom Rewrite_Examples.thy into one that fails and got a different (but <br>\nprobably related problem): A call to *rewrite *that succeeds but <br>\ninstantiates the free variable of the rule with something that comes <br>\nfrom a totally unrelated part of the subgoal. The example is attached. <br>\nMy best guess from the various errors is that the *rewrite *method does <br>\nthe pattern match (against the *to *argument) with the wrong term.</p>\n<p>Best wishes,<br>\nDominique.</p>\n<p><a href=\"/user_uploads/14278/rbJDDY1mpQzKc-lJt1QiwjCP/Scratch.thy\">Scratch.thy</a></p>",
        "id": 381408065,
        "sender_full_name": "Email Gateway",
        "timestamp": 1691053786
    },
    {
        "content": "<p>From: Dominique Unruh &lt;<a href=\"mailto:cl-isabelle-users@lists.cam.ac.uk\">cl-isabelle-users@lists.cam.ac.uk</a>&gt;<br>\nHi Peter,</p>\n<p>yes, I tried that, too. The problem is that this simply passes a rewrite <br>\nrule with a fixed Var *x *to the rewrite tactic. In contrast, the <em>x</em> <br>\ncoming from the pattern match is a new Var that is supposed to be fresh <br>\n(i.e., distinct from accidentally same-named variables that already <br>\nexist in the context somewhere). The name <em>x__</em> is, I think, purely a <br>\nprinting artifact; in reality, the <em>x</em> passed to <em>where</em> stays the same, <br>\nand the <em>x</em> from the binder becomes mangled internally.</p>\n<p>The paper describing the *rewrite *method (called <em>patsubst</em> in the <br>\npaper) addresses a specific parameter <em>where</em> to the <em>rewrite</em> method to <br>\novercome this. I assume it has later been replaced by the <em>to</em> <br>\nparameter. Which is a little unfortunately because I think the <em>to</em> <br>\nparameter should be /in addition/ to the possibility of using <em>where</em> <br>\nbecause it is sometimes hard to emulate <em>where</em> using <em>to</em>.</p>\n<p>Best wishes,<br>\nDominique.</p>",
        "id": 381448214,
        "sender_full_name": "Email Gateway",
        "timestamp": 1691062364
    }
]