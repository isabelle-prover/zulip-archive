[
    {
        "content": "<p>From: \"Eugene W. Stark\" &lt;<a href=\"mailto:isabelle-users@starkeffect.com\">isabelle-users@starkeffect.com</a>&gt;<br>\nFor an investigation I was trying to pursue, I just found myself proving the following:</p>\n<p>lemma hypergeometric_combinatorial_property:<br>\n   assumes \"finite (U ∪ S)\" and \"U ∩ S = {}\"<br>\n   shows \"card {T. T ⊆ U ∪ S ∧ card T = n ∧ card (S ∩ T) = k} =<br>\n          (if n &gt; card (U ∪ S) ∨ k &gt; n then 0 else (card S choose k) * (card U choose (n - k)))\"</p>\n<p>As my proof is kind of long and ugly (it even took a while just to figure out the way of formulating<br>\nthe boundary cases so that the induction would go through), I wonder if there is perhaps a collection<br>\nof already-distilled basic facts like this, concerning counting properties related to common discrete<br>\nprobability distributions.  I had a look in what seemed obvious places in the HOL-Library, but only<br>\ncame up with a few facts of this type.</p>\n<p>Thanks for any hints.</p>\n<p>- Gene Stark</p>",
        "id": 288918057,
        "sender_full_name": "Email Gateway",
        "timestamp": 1657272940
    },
    {
        "content": "<p>From: Lawrence Paulson &lt;<a href=\"mailto:lp15@cam.ac.uk\">lp15@cam.ac.uk</a>&gt;<br>\nI’m not aware of such a thing. It’s surely useful to collect combinatorial identities however.</p>\n<p>Larry</p>",
        "id": 288938354,
        "sender_full_name": "Email Gateway",
        "timestamp": 1657286103
    },
    {
        "content": "<p>From: Manuel Eberl &lt;<a href=\"mailto:manuel@pruvisto.org\">manuel@pruvisto.org</a>&gt;<br>\nThere is Lukas Bulwahn's AFP entry on the Twelvefold Way. is that the <br>\nsort of thing you have in mind?</p>\n<p><a href=\"https://www.isa-afp.org/entries/Twelvefold_Way.html\">https://www.isa-afp.org/entries/Twelvefold_Way.html</a></p>\n<p>Manuel</p>",
        "id": 288938516,
        "sender_full_name": "Email Gateway",
        "timestamp": 1657286180
    },
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\nAs others have already stated, there is currently no specific library for such <br>\nlemmas. However, the lemma looks interesting enough that I would suggest to move <br>\nit to the finite set theory in HOL: <br>\n<a href=\"https://isabelle.in.tum.de/dist/library/HOL/HOL/Finite_Set.html\">https://isabelle.in.tum.de/dist/library/HOL/HOL/Finite_Set.html</a> (see, for <br>\nexample, dvd_partition)</p>\n<p>Unless somebody has better suggestion, I'll be happy to do it.</p>\n<p>Tobias<br>\n<a href=\"/user_uploads/14278/4mCpmYt_QIU_Srz22AY-J60U/smime.p7s\">smime.p7s</a></p>",
        "id": 288960987,
        "sender_full_name": "Email Gateway",
        "timestamp": 1657296704
    },
    {
        "content": "<p>From: Manuel Eberl &lt;<a href=\"mailto:manuel@pruvisto.org\">manuel@pruvisto.org</a>&gt;<br>\nI don't know <em>how</em> \"long and ugly\" Gene's proof is, but here's a fairly <br>\nstraightforward one in 72 lines based on proving a bijection. I did <br>\nmodify the statement a bit since one of the case distinctions was <br>\nredundant. It could be even shorter, but the automation is not good with <br>\ncardinalities it seems…</p>\n<p>In combinatorics, I would generally always prefer a bijection-based <br>\nproof over a recursive one if at all possible. Or even better, a <br>\ngenerating-function proof (although that introduces a dependency to <br>\nHOL-Computational_Algebra).</p>\n<p>Manuel</p>\n<p>lemma hypergeometric_combinatorial_property:<br>\n   assumes \"finite (U ∪ S)\" and \"U ∩ S = {}\"<br>\n   shows \"card {T. T ⊆ U ∪ S ∧ card T = n ∧ card (S ∩ T) = k} =<br>\n            (if k &gt; n then 0 else (card S choose k) * (card U choose (n </p>\n<ul>\n<li>k)))\"<br>\n     (is \"card ?A = ?rhs\")<br>\nproof -<br>\n   define f where \"f = (λT. (T ∩ S, T ∩ U))\"<br>\n   define g where \"g = (λ(X::'a set, Y). X ∪ Y)\"<br>\n   let ?B = \"{X. X ⊆ S ∧ card X = k} × {Y. Y ⊆ U ∧ card Y + k = n}\"</li>\n</ul>\n<p>have \"bij_betw f ?A ?B\"<br>\n   proof (rule bij_betwI[of _ _ _ g], goal_cases)<br>\n     case 1<br>\n     show ?case<br>\n     proof<br>\n       fix T assume T: \"T ∈ ?A\"<br>\n       have \"n = card T\"<br>\n         using T by auto<br>\n       also have \"T = (T ∩ U) ∪ (T ∩ S)\"<br>\n         using T by auto<br>\n       also have \"card … = card (T ∩ U) + k\"<br>\n         using T assms by (subst card_Un_disjoint) (auto simp: Int_commute)<br>\n       finally have \"card (T ∩ U) + k = n\" ..<br>\n       thus \"f T ∈ ?B\" using T<br>\n         by (auto simp: f_def g_def Int_commute)<br>\n     qed<br>\n   next<br>\n     case 2<br>\n     show ?case<br>\n     proof<br>\n       fix XY assume XY: \"XY ∈ ?B\"<br>\n       then obtain X Y where [simp]: \"XY = (X, Y)\"<br>\n         by (cases XY)<br>\n       have XY: \"X ⊆ S\" \"Y ⊆ U\" \"card X = k\" \"card Y + k = n\"<br>\n         using XY by auto<br>\n       have 1: \"g (X, Y) ⊆ U ∪ S\"<br>\n         using XY by (auto simp: g_def)<br>\n       have \"card (g (X, Y)) = card (X ∪ Y)\"<br>\n         by (auto simp: g_def)<br>\n       also have \"… = card X + card Y\"<br>\n         by (rule card_Un_disjoint) (use XY assms in ‹auto dest: <br>\nfinite_subset›)<br>\n       finally have 2: \"card (g (X, Y)) = n\"<br>\n         using XY by simp<br>\n       have \"S ∩ g (X, Y) = X\"<br>\n         using XY assms by (auto simp: g_def)<br>\n       hence 3: \"card (S ∩ g (X, Y)) = k\"<br>\n         using XY by auto<br>\n       from 1 2 3 show \"g XY ∈ ?A\"<br>\n         by simp<br>\n     qed<br>\n   qed (use assms in ‹auto simp: f_def g_def›)<br>\n   hence \"card ?A = card ?B\"<br>\n     by (rule bij_betw_same_card)</p>\n<p>also have \"card ?B = ?rhs\"<br>\n   proof (cases \"k &gt; n\")<br>\n     case False<br>\n     hence \"card Y + k = n ⟷ card Y = n - k\" for Y :: \"'a set\"<br>\n       by linarith<br>\n     hence \"?B = {X. X ⊆ S ∧ card X = k} × {Y. Y ⊆ U ∧ card Y = n - k}\"<br>\n       by simp<br>\n     also have \"card … = (card S choose k) * (card U choose (n - k))\"<br>\n       unfolding card_cartesian_product using assms by (subst (1 2) <br>\nn_subsets) auto<br>\n     finally show ?thesis<br>\n       using False by simp<br>\n   next<br>\n     case True<br>\n     hence \"card Y + k ≠ n\" for Y :: \"'a set\"<br>\n       by linarith<br>\n     hence \"?B = {}\"<br>\n       by simp<br>\n     with True show ?thesis<br>\n       by simp<br>\n   qed</p>\n<p>finally show ?thesis .<br>\nqed</p>",
        "id": 288965504,
        "sender_full_name": "Email Gateway",
        "timestamp": 1657298994
    },
    {
        "content": "<p>From: \"Thiemann, René\" &lt;<a href=\"mailto:Rene.Thiemann@uibk.ac.at\">Rene.Thiemann@uibk.ac.at</a>&gt;<br>\nHi Gene,</p>\n<p>here is another counting lemma which is hidden in some AFP entry.</p>\n<p><a href=\"https://www.isa-afp.org/theories/clique_and_monotone_circuits/#Preliminaries.html#Preliminaries.card_inj_on_subset_funcset|fact\">https://www.isa-afp.org/theories/clique_and_monotone_circuits/#Preliminaries.html#Preliminaries.card_inj_on_subset_funcset|fact</a></p>\n<p>Perhaps it is of interest.</p>\n<p>Best,<br>\nRené</p>",
        "id": 288965621,
        "sender_full_name": "Email Gateway",
        "timestamp": 1657299052
    },
    {
        "content": "<p>From: \"Eugene W. Stark\" &lt;<a href=\"mailto:isabelle-users@starkeffect.com\">isabelle-users@starkeffect.com</a>&gt;<br>\nWell, Manuel, you truly are the master ;-)  I have already learned a few new tricks from your proof.</p>\n<p>Mine was 324 lines for a direct brute-force induction on the cardinality of U ∪ S, and I had not<br>\nmade any attempt to replace uses of smt, which I allowed liberally while banging it out.<br>\nSo I am obviously not going to publish that version.  The redundant case that you removed was<br>\nprobably a vestige of the inductive version internal to the proof that I used.</p>\n<p>The \"higher-level\" bijection idea is clearly an improvement, and I will keep that in mind.</p>\n<p>So, basically, I guess all I have to contribute to this is the (imperfect) statement of the Lemma :-(</p>\n<p>My original thoughts were along the following lines:  Basic probability books have a bunch of<br>\n'ball and urn' examples, to illustrate the origins of various important probability distributions.<br>\nThe examples are counting problems, but then the probability mass functions are then expressed<br>\nas formulas using things like binomial coefficients.  If, as happened in my case, the counting problem<br>\npops out of something else you are trying to do (such as manipulate a summation), then you end up<br>\nwanting/needing the lemma that relates the counting problem to the associated formula.  Although my<br>\ncombinatorics skills are embarrassingly poor, I did manage to figure out before too long that<br>\nwhat I had got was related to the hypergeometric distribution.  I figured I might be lucky and<br>\nthere would be a formal probability development somewhere that would have a list of facts about basic<br>\ndistributions like this.  (But I also didn't mind working out a proof myself, because I was<br>\nusing some parts of Isabelle that I hadn't tried much before.)</p>\n<p>Anyway, I was imagining some kind of table of basic distributions, together with facts like the<br>\nfollowing:</p>\n<p>relation between the underlying counting problem and the probability mass function</p>\n<p>generating functions</p>\n<p>formulas for moments</p>\n<p>(probably other things that I am not thinking of right now)</p>\n<p>It might be that a fair bit of what I was looking for could already be derived from some of the<br>\nmore abstract developments pointed out in this thread (e.g. the \"Twelve Ways\").  But I doubt<br>\nthat someone like me would be able to spot it if it were.</p>\n<p>I would think that trying to start some kind of collection like this would make a relatively accessible<br>\nproject for a student who wanted to develop some facility with formal theorem proving.</p>\n<p>- Gene Stark</p>",
        "id": 288971828,
        "sender_full_name": "Email Gateway",
        "timestamp": 1657302354
    },
    {
        "content": "<p>From: Manuel Eberl &lt;<a href=\"mailto:manuel@pruvisto.org\">manuel@pruvisto.org</a>&gt;<br>\nOn 08/07/2022 19:45, Eugene W. Stark wrote:</p>\n<blockquote>\n<p>My original thoughts were along the following lines:  Basic <br>\nprobability books have a bunch of<br>\n'ball and urn' examples</p>\n</blockquote>\n<p>I think most of the \"ball and urn\" things are contained in the <br>\nTwelvefold Way.</p>\n<blockquote>\n<p>Anyway, I was imagining some kind of table of basic distributions, <br>\ntogether with facts like the<br>\nfollowing:</p>\n<p>relation between the underlying counting problem and the <br>\nprobability mass function</p>\n</blockquote>\n<p>Well, in HOL-Probability there is \"pmf_of_set\" (the uniform distribution <br>\nfor discrete sets), where the probability of any one element is simply <br>\none over the cardinality of the set that you're choosing from. There are <br>\nalso a number of other basic distributions, such as Bernoulli, binomial, <br>\nnegative binomial, geometric, Poisson.</p>\n<blockquote>\n<p>generating functions</p>\n</blockquote>\n<p>Generating functions are simply the formal power series in <br>\nHOL-Computational_Algebra. There are a few example applications in the <br>\ndistribution and a few more in the AFP (see e.g. Catalan Numbers and <br>\nBernoulli numbers).</p>\n<blockquote>\n<p>formulas for moments</p>\n</blockquote>\n<p>What exactly are you looking for?</p>\n<p>In any case, as with most of our material, it is perhaps a bit difficult <br>\nto find. Having good documentation for the libraries is a long-standing <br>\nproblem that we have not solved yet.</p>\n<p>Manuel</p>",
        "id": 288974056,
        "sender_full_name": "Email Gateway",
        "timestamp": 1657303534
    },
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\nNow that we have a short proof, could we also have a better name than <br>\nhypergeometric_combinatorial_property? Eg card_subsets_disj_Un, but maybe there <br>\nis a more abstract name.</p>\n<p>Tobias<br>\n<a href=\"/user_uploads/14278/wbKlYeXSx8J05KSYEx6fDVUt/smime.p7s\">smime.p7s</a></p>",
        "id": 288983593,
        "sender_full_name": "Email Gateway",
        "timestamp": 1657308677
    },
    {
        "content": "<p>From: Chelsea Edmonds &lt;<a href=\"mailto:cle47@cam.ac.uk\">cle47@cam.ac.uk</a>&gt;<br>\nI've also come across a similar problem in my own work formalising proofs for hypergraphs/combinatorial design theory. Coming up with some tricks/common lemmas/proof patterns to help simplify these kinds of proofs is something I've been thinking about doing at some point, so would be great to hear if anyone else has started on something similar already (or does so following this thread!). I've found there tend to be two main challenges: firstly, translating the intuition of a counting proof into a more formal representation, and secondly actually working with the resulting sets (as Manuel identified - the automation for reasoning on cardinality of sets can be rather poor, and this is even more so the case for multiset sizes from experience).</p>\n<p>As a note, there are several examples of counting proofs (often involving multisets) in the library here: <a href=\"https://www.isa-afp.org/entries/Design_Theory.html\">https://www.isa-afp.org/entries/Design_Theory.html</a></p>\n<p>Also an example of a generating proof approach as an alternative for combinatorial arguments here: <a href=\"https://www.isa-afp.org/entries/Lucas_Theorem.html\">https://www.isa-afp.org/entries/Lucas_Theorem.html</a> As Manuel pointed out this does introduce a dependency on the Computational Algebra library, but is relatively easy to work with once you get familiar with the fps representation (and the generating function approach was certainly more of a direct translation to Isabelle then the intuitive combinatorial proof on paper).</p>\n<p>Best,<br>\nChelsea</p>",
        "id": 289059184,
        "sender_full_name": "Email Gateway",
        "timestamp": 1657395881
    },
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\nDear Chelsea,</p>\n<p>Thanks for these further examples. They make me wonder if I should really stick <br>\nthe other counting lemmas that was posted into Finite_Set theory or if there <br>\nshould be a dedicated library?</p>\n<p>Tobias<br>\n<a href=\"/user_uploads/14278/8IffFzrDiJ8ysGewkjY9xwIu/smime.p7s\">smime.p7s</a></p>",
        "id": 289092672,
        "sender_full_name": "Email Gateway",
        "timestamp": 1657445602
    },
    {
        "content": "<p>From: Manuel Eberl &lt;<a href=\"mailto:manuel@pruvisto.org\">manuel@pruvisto.org</a>&gt;<br>\nNote that there <em>is</em> a HOL-Combinatorics session now.</p>\n<p>Manuel</p>",
        "id": 289095718,
        "sender_full_name": "Email Gateway",
        "timestamp": 1657449932
    },
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\nGood point. But I am not sure which of the counting lemmas, e.g. the one you <br>\nposted, should go where - but I trust you will put yours in the right place? It <br>\nalso seems that there cannot be one bucket for all of them because some of them <br>\ntalk about sets, some about multisets and some about functions, and some use <br>\nadditional libraries like FPS...</p>\n<p>Tobias<br>\n<a href=\"/user_uploads/14278/zvuhpuuVl-bp1Q4sL2wPV8KQ/smime.p7s\">smime.p7s</a></p>",
        "id": 289097772,
        "sender_full_name": "Email Gateway",
        "timestamp": 1657452616
    },
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\nOn 08/07/2022 18:50, Thiemann, René wrote:</p>\n<blockquote>\n<p>Hi Gene,</p>\n<p>here is another counting lemma which is hidden in some AFP entry.</p>\n<p><a href=\"https://www.isa-afp.org/theories/clique_and_monotone_circuits/#Preliminaries.html#Preliminaries.card_inj_on_subset_funcset|fact\">https://www.isa-afp.org/theories/clique_and_monotone_circuits/#Preliminaries.html#Preliminaries.card_inj_on_subset_funcset|fact</a></p>\n<p>Perhaps it is of interest.</p>\n</blockquote>\n<p>It is certainly of interest. I have moved it to theory FuncSet.</p>\n<p>There are further interesting theorems in your theory ... I would really love to <br>\nhave a tool that goes through AFP entries and suggests lemmas that could be <br>\nmoved to the distribution and suggests where they might go.</p>\n<p>Tobias</p>\n<blockquote>\n<p>Best,<br>\nRené</p>\n<blockquote>\n<p>Am 08.07.2022 um 11:35 schrieb Eugene W. Stark &lt;<a href=\"mailto:isabelle-users@starkeffect.com\">isabelle-users@starkeffect.com</a>&gt;:</p>\n<p>For an investigation I was trying to pursue, I just found myself proving the following:</p>\n<p>lemma hypergeometric_combinatorial_property:<br>\n  assumes \"finite (U ∪ S)\" and \"U ∩ S = {}\"<br>\n  shows \"card {T. T ⊆ U ∪ S ∧ card T = n ∧ card (S ∩ T) = k} =<br>\n         (if n &gt; card (U ∪ S) ∨ k &gt; n then 0 else (card S choose k) * (card U choose (n - k)))\"</p>\n<p>As my proof is kind of long and ugly (it even took a while just to figure out the way of formulating<br>\nthe boundary cases so that the induction would go through), I wonder if there is perhaps a collection<br>\nof already-distilled basic facts like this, concerning counting properties related to common discrete<br>\nprobability distributions.  I had a look in what seemed obvious places in the HOL-Library, but only<br>\ncame up with a few facts of this type.</p>\n<p>Thanks for any hints.</p>\n<p>- Gene Stark<br>\n</p>\n</blockquote>\n<p><a href=\"/user_uploads/14278/KBNo3QpczjgZkWKclCjCh-uT/smime.p7s\">smime.p7s</a></p>\n</blockquote>",
        "id": 289164057,
        "sender_full_name": "Email Gateway",
        "timestamp": 1657530699
    }
]