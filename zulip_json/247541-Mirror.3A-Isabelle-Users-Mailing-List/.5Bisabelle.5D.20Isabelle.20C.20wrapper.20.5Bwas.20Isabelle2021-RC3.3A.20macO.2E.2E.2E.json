[
    {
        "content": "<p>From: \"Fernandez, Matthew\" &lt;<a href=\"mailto:matthew.fernandez@intel.com\">matthew.fernandez@intel.com</a>&gt;<br>\nA bit OT, but it looks like there's an unchecked allocation and a dead store in this code. HTH.</p>\n<p>--- Isabelle.c  2021-01-26 08:06:45.916458951 -0800<br>\n+++ Isabelle1.c 2021-01-26 08:07:31.720458189 -0800<br>\n@@ -24,12 +24,12 @@ int main(int argc, char *argv[])<br>\n   int i = 0;</p>\n<p>dcmd = strdup(argv[0]);</p>\n<ul>\n<li>\n<p>if (dcmd == NULL) fail(\"Failed to allocate command line\");<br>\n   dname = dirname(dcmd);</p>\n<p>cmd_line = malloc(sizeof(char *) * (argc + 1));<br>\n if (cmd_line == NULL) fail(\"Failed to allocate command line\");</p>\n</li>\n<li>\n<p>cmd = cmd_line[0];<br>\n   cmd = malloc(strlen(dname) + strlen(\"/lib/scripts/Isabelle_app\") + 1);<br>\n   if (cmd == NULL) fail(\"Failed to allocate command name\");<br>\n   sprintf(cmd, \"%s/lib/scripts/Isabelle_app\", dname);</p>\n</li>\n</ul>",
        "id": 224063265,
        "sender_full_name": "Email Gateway",
        "timestamp": 1611677988
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nThanks. I will take it into account when reworking it once again.</p>\n<p>I actually stopped using C in 1992, after reading the first edition of Larry's<br>\nbook \"ML for the working programmer\".</p>\n<p>Maybe I should have done it in Go or Rust.</p>\n<p>Makarius</p>",
        "id": 224066286,
        "sender_full_name": "Email Gateway",
        "timestamp": 1611679174
    },
    {
        "content": "<p>From: Frédéric Boulanger &lt;<a href=\"mailto:frederic.boulanger@lri.fr\">frederic.boulanger@lri.fr</a>&gt;<br>\nI have setup a very simple wrapper that just invokes sh on the original shell script.</p>\n<p><a href=\"https://github.com/Frederic-Boulanger-UPS/FatIsabelleLauncher\">https://github.com/Frederic-Boulanger-UPS/FatIsabelleLauncher</a> &lt;<a href=\"https://github.com/Frederic-Boulanger-UPS/FatIsabelleLauncher\">https://github.com/Frederic-Boulanger-UPS/FatIsabelleLauncher</a>&gt;</p>\n<p>The first time you try to open a file in the \"Documents\" folder after patching Isabelle2021-RC3 is a bit long, but you are finally asked if you want to allow the access, and the authorization is then remembered between launches.</p>\n<p>The patch consists in renaming the Isabelle2021-RC3 script to <a href=\"http://Isabelle2021-RC3.sh\">Isabelle2021-RC3.sh</a>, and replacing the original script with the fat binary.</p>\n<p>The C++ program simply finds the application bundle directory from argv[0] and then invokes sh on the <a href=\"http://Isabelle2021-RC3.sh\">Isabelle2021-RC3.sh</a> file in the bundle directory.<br>\nI used C++ to avoid the awkwardness of handling memory buffers to copy and join strings the old plain C way...<br>\nIt is necessary to use c++17 to benefit from std::filesystem::path for finding the bundle directory path.</p>\n<p>The C++ source is compiled to both the x86_64 and arm64 targets, and the two executables are combined with lipo into a:</p>\n<p>Mach-O universal binary with 2 architectures: [x86_64:Mach-O 64-bit executable x86_64] [arm64:Mach-O 64-bit executable arm64]</p>\n<p>as revealed by a call to the file command.<br>\nThe Makefile takes care of building and combining the executables.</p>\n<p>I hope this can make Isabelle more usable on Big Sur with the next release candidate.</p>\n<p>Frédéric</p>\n<p>Frédéric Boulanger<br>\nCentraleSupélec - Département Informatique  Laboratoire Méthodes Formelles (LMF)<br>\n3 rue Joliot-Curie, 91192 Gif-sur-Yvette cedex  Bât. 650 - 1 rue Raimond Castaing, 91190 Gif-sur-Yvette<br>\n+33 [0]1 69 85 14 84</p>",
        "id": 224097720,
        "sender_full_name": "Email Gateway",
        "timestamp": 1611692752
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nThanks for the example. C++ is even more foreign to me than C.</p>\n<p>I am presently experimenting with a brushed-up version of plain Isabelle.c:<br>\n<a href=\"https://isabelle.sketis.net/repos/isabelle-release/annotate/02973da6180a/Admin/Linux/Isabelle.c\">https://isabelle.sketis.net/repos/isabelle-release/annotate/02973da6180a/Admin/Linux/Isabelle.c</a></p>\n<p>It turns out that having a native x86_64-darwin program execute a shell script<br>\nhas the desired effect:</p>\n<p>* The security system accepts it as a proper app and asks for permissions to<br>\naccess \"Documents\" etc.</p>\n<p>* It is still multi-platform capable, due to the intermission of the shell,<br>\nand my earlier change to detect the overall platform despite the x86_64<br>\ncontext:<br>\n<a href=\"https://isabelle.sketis.net/repos/isabelle-release/annotate/bf573ed376ef/lib/scripts/isabelle-platform\">https://isabelle.sketis.net/repos/isabelle-release/annotate/bf573ed376ef/lib/scripts/isabelle-platform</a></p>\n<p>I will finish the exploration and come back with a fully-integrated macOS app<br>\nsoon --- unless there are further surprises.</p>\n<p>Makarius</p>",
        "id": 224102789,
        "sender_full_name": "Email Gateway",
        "timestamp": 1611695024
    },
    {
        "content": "<p>From: \"Fernandez, Matthew\" &lt;<a href=\"mailto:matthew.fernandez@intel.com\">matthew.fernandez@intel.com</a>&gt;<br>\nFYI std::filesystem is still quite poorly supported on some OSes. Though maybe none of them are supported dev environments for Isabelle.</p>",
        "id": 224103441,
        "sender_full_name": "Email Gateway",
        "timestamp": 1611695322
    }
]