[
    {
        "content": "<p>From: David Fuenmayor &lt;<a href=\"mailto:davfuenmayor@gmail.com\">davfuenmayor@gmail.com</a>&gt;<br>\nDear experts,</p>\n<p>In trying to connect Isabelle with the external world I need to extract a<br>\n<em>plain</em> string representation of a term for further processing. However, to<br>\nmy surprise, the function \"Syntax.string_of_term @{context}\" still<br>\ngenerates markup. I have tried several other similar functions (e.g.<br>\n\"Pretty.unformatted_string_of\") and all of them keep generating markup<br>\n(which I cannot further transform into something external systems would<br>\nunderstand).<br>\nCan someone please help me here?</p>\n<p>More generally, I would be thankful to anyone indicating me the correct way<br>\nto export/import <em>plain text</em> term/thm representations in Isabelle/ML (I<br>\nhave spent indeed days looking at the documentation and still cannot wrap<br>\nmy head around how to do such \"basic\" stuff).</p>\n<p>Thanks for your help<br>\nDavid</p>",
        "id": 411957083,
        "sender_full_name": "Email Gateway",
        "timestamp": 1704813891
    },
    {
        "content": "<p>From: Jasmin Blanchette &lt;<a href=\"mailto:jasmin.blanchette@ifi.lmu.de\">jasmin.blanchette@ifi.lmu.de</a>&gt;<br>\nDear David,</p>\n<p>The solution I use in Sledgehammer, and which has served me well, is encapsulated in the following code:</p>\n<p>fun hackish_string_of_term ctxt =<br>\n      Print_Mode.setmp [] (Syntax.string_of_term ctxt)<br>\n      #&gt; YXML.content_of<br>\n      #&gt; Sledgehammer_Util.simplify_spaces</p>\n<p>I hope this helps.</p>\n<p>Best,<br>\nJasmin</p>",
        "id": 411966117,
        "sender_full_name": "Email Gateway",
        "timestamp": 1704816598
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nOn 09/01/2024 16:24, David Fuenmayor wrote:</p>\n<blockquote>\n<p>In trying to connect Isabelle with the external world I need to extract a <br>\n<em>plain</em> string representation of a term for further processing.</p>\n</blockquote>\n<p>Can you say more about this \"external world\"?</p>\n<p>Normally, Isabelle/ML is the \"internal world\" of Isabelle, and Isabelle/Scala <br>\nis the external world. From there you can connect to further outlying islands.</p>\n<p>Trying to connect Isabelle/ML to the outside world without Isabelle/Scala is a <br>\nbad idea.</p>\n<blockquote>\n<p>More generally, I would be thankful to anyone indicating me the correct way to <br>\nexport/import <em>plain text</em> term/thm representations in Isabelle/ML</p>\n</blockquote>\n<p>Isabelle/Scala already provides programming interfaces to work e.g. with <br>\nExport_Theory material. It corresponds to \"isabelle build -o export_theory\".</p>\n<p>The \"system\" manual has a brief explanation of \"isabelle scala_project\", which <br>\nsimplifies the exploration of Isabelle/Scala sources and APIs e.g. via <br>\nIntelliJ IDEA: unfortunately its Scala3 plugin has degraded a lot in recent <br>\nyears (or I just don't understand how to use it properly).</p>\n<p>Next time, I will integrate a proper Isabelle/Scala IDE into Isabelle/PIDE, <br>\nbypassing IntelliJ IDEA.</p>\n<p>Here is also a recent demo to make an Isabelle command-line tool in <br>\nIsabelle/Scala: <br>\n<a href=\"https://isabelle-dev.sketis.net/source/isabelle/browse/default/src/Tools/Demo\">https://isabelle-dev.sketis.net/source/isabelle/browse/default/src/Tools/Demo</a> <br>\n--- it should work with Isabelle2023 and will be officially part of <br>\nIsabelle2024 (May 2024).</p>\n<p>Makarius</p>",
        "id": 411975825,
        "sender_full_name": "Email Gateway",
        "timestamp": 1704819677
    },
    {
        "content": "<p>From: David Fuenmayor &lt;<a href=\"mailto:davfuenmayor@gmail.com\">davfuenmayor@gmail.com</a>&gt;<br>\nDear Makarius:</p>\n<p>Can you say more about this \"external world\"?<br>\nI basically want to use CAS (e.g. Sage) to simplify polynomials in finite<br>\nfields (among others).</p>\n<p>At first I want to approach the problem in a generic way (see file<br>\nattached):<br>\nCreate a method (via method_setup) that sends the current goal (as a<br>\nstring) to some CLI tool which transforms it and gives back another string<br>\nwhich shall somehow become the new goal, I assume, by parsing it into a<br>\nprop (for an initial PoC I am willing to trust the CAS as an oracle).</p>\n<p>The first step of extracting a plain string representation for the goal is<br>\nsolved (thanks to Jasmin Blanchette suggestion in previous email).<br>\nI must now figure out how to 'replace' the current goal with what I am<br>\ngetting back from the CAS.</p>\n<p>Attached is a file with the essential parts of my code. I will be very<br>\ngrateful if you (or anyone) can make comments/suggestions.<br>\nBtw, I apologize if my approach seems too crude. I just started exploring<br>\nthe solution space (without any knowledge of Isabelle/ML).</p>\n<p>Best<br>\nDavid</p>\n<p><a href=\"/user_uploads/14278/dAalnTtrrbrgTY-w5NQKKcDr/Example.thy\">Example.thy</a></p>",
        "id": 412033756,
        "sender_full_name": "Email Gateway",
        "timestamp": 1704844943
    },
    {
        "content": "<p>From: Wenda Li &lt;<a href=\"mailto:wenda.li@ed.ac.uk\">wenda.li@ed.ac.uk</a>&gt;<br>\nDear David,</p>\n<p>A few years ago, we were using Mathematica to construct checkable certificates to solve univariate polynomial problems: <a href=\"https://github.com/Wenda302/RCF_Decision_Procedures\">https://github.com/Wenda302/RCF_Decision_Procedures</a>. Much of the pipeline is certainly not idiomatic to today’s standard but may serve as a super crude reference.</p>\n<p>Regards,<br>\nWenda</p>\n<p>Wenda Li<br>\nLecturer in Hybrid AI<br>\nInformatics Forum<br>\nUniversity of Edinburgh<br>\nSite: <a href=\"https://wenda302.github.io\">https://wenda302.github.io</a><br>\nEmail: <a href=\"mailto:wli8@ed.ac.uk\">wli8@ed.ac.uk</a></p>\n<p>On 10 Jan 2024, at 00:01, David Fuenmayor &lt;<a href=\"mailto:davfuenmayor@gmail.com\">davfuenmayor@gmail.com</a>&gt; wrote:</p>\n<p>Dear Makarius:</p>\n<p>Can you say more about this \"external world\"?<br>\nI basically want to use CAS (e.g. Sage) to simplify polynomials in finite fields (among others).</p>\n<p>At first I want to approach the problem in a generic way (see file attached):<br>\nCreate a method (via method_setup) that sends the current goal (as a string) to some CLI tool which transforms it and gives back another string which shall somehow become the new goal, I assume, by parsing it into a prop (for an initial PoC I am willing to trust the CAS as an oracle).</p>\n<p>The first step of extracting a plain string representation for the goal is solved (thanks to Jasmin Blanchette suggestion in previous email).<br>\nI must now figure out how to 'replace' the current goal with what I am getting back from the CAS.</p>\n<p>Attached is a file with the essential parts of my code. I will be very grateful if you (or anyone) can make comments/suggestions.<br>\nBtw, I apologize if my approach seems too crude. I just started exploring the solution space (without any knowledge of Isabelle/ML).</p>\n<p>Best<br>\nDavid</p>\n<p>On Tue, Jan 9, 2024 at 6:01 PM Makarius &lt;makarius@sketis.net&lt;mailto:<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;&gt; wrote:<br>\nOn 09/01/2024 16:24, David Fuenmayor wrote:</p>\n<blockquote>\n<p>In trying to connect Isabelle with the external world I need to extract a<br>\n<em>plain</em> string representation of a term for further processing.</p>\n</blockquote>\n<p>Can you say more about this \"external world\"?</p>\n<p>Normally, Isabelle/ML is the \"internal world\" of Isabelle, and Isabelle/Scala<br>\nis the external world. From there you can connect to further outlying islands.</p>\n<p>Trying to connect Isabelle/ML to the outside world without Isabelle/Scala is a<br>\nbad idea.</p>\n<blockquote>\n<p>More generally, I would be thankful to anyone indicating me the correct way to<br>\nexport/import <em>plain text</em> term/thm representations in Isabelle/ML</p>\n</blockquote>\n<p>Isabelle/Scala already provides programming interfaces to work e.g. with<br>\nExport_Theory material. It corresponds to \"isabelle build -o export_theory\".</p>\n<p>The \"system\" manual has a brief explanation of \"isabelle scala_project\", which<br>\nsimplifies the exploration of Isabelle/Scala sources and APIs e.g. via<br>\nIntelliJ IDEA: unfortunately its Scala3 plugin has degraded a lot in recent<br>\nyears (or I just don't understand how to use it properly).</p>\n<p>Next time, I will integrate a proper Isabelle/Scala IDE into Isabelle/PIDE,<br>\nbypassing IntelliJ IDEA.</p>\n<p>Here is also a recent demo to make an Isabelle command-line tool in<br>\nIsabelle/Scala:<br>\n<a href=\"https://isabelle-dev.sketis.net/source/isabelle/browse/default/src/Tools/Demo\">https://isabelle-dev.sketis.net/source/isabelle/browse/default/src/Tools/Demo</a><br>\n--- it should work with Isabelle2023 and will be officially part of<br>\nIsabelle2024 (May 2024).</p>\n<p>Makarius</p>\n<p>&lt;Example.thy&gt;</p>\n<p>The University of Edinburgh is a charitable body, registered in Scotland, with registration number SC005336. Is e buidheann carthannais a th’ ann an Oilthigh Dhùn Èideann, clàraichte an Alba, àireamh clàraidh SC005336.</p>",
        "id": 412063107,
        "sender_full_name": "Email Gateway",
        "timestamp": 1704862432
    },
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\nDear David,</p>\n<p>I connected Isabelle to Sage a few months ago, the other way around. I generated <br>\ncode from the AFP article \"The Factorization Algorithm of Berlekamp and <br>\nZassenhaus\" by Jose Divasón, Sebastiaan J. C. Joosten, René Thiemann and Akihisa <br>\nYamada and wrote a python wrapper for making it a Sage command (i.e. a verified <br>\npolynomial factorization command). I am attaching an email I sent to the above <br>\nauthors in case they were interested in adding my code to their AFP entry (but I <br>\ndon't think it has happened yet).</p>\n<p>I suspect my code will not help you but since your raised the Isabelle-CAS issue <br>\nI thought I'd advertise my work ;-)</p>\n<p>Tobias</p>\n<p><a href=\"/user_uploads/14278/R10AZoffoAM1pRNcexqCPPNC/Fact_Poly.thy\">Fact_Poly.thy</a><br>\n<a href=\"/user_uploads/14278/VqP_IJUqPOOeODCpeliMS90x/Main.hs\">Main.hs</a><br>\n<a href=\"/user_uploads/14278/QiNxFbPW9iM4kxUrzP7rXufR/factor_polynomial_verified.sage\">factor_polynomial_verified.sage</a><br>\n<a href=\"/user_uploads/14278/4VgPNohOopiBmZ9j4rxGxFSi/FactorsPolyZVerified.g\">FactorsPolyZVerified.g</a><br>\n<a href=\"/user_uploads/14278/fVejlCW2Ax3QKULb7lBH66Ux/smime.p7s\">smime.p7s</a><br>\n<a href=\"/user_uploads/14278/tbVbh9f2onKJquHTqP81nZom/smime.p7s\">smime.p7s</a></p>",
        "id": 412083685,
        "sender_full_name": "Email Gateway",
        "timestamp": 1704872882
    },
    {
        "content": "<p>From: David Fuenmayor &lt;<a href=\"mailto:davfuenmayor@gmail.com\">davfuenmayor@gmail.com</a>&gt;<br>\nThank you all (Jasmin, Makarius, Wenda, Tobias) for your timely sugestions!<br>\nThey have been very helpful in getting a better picture of the problem.<br>\nIn the meanwhile, I have made some progress with interfacing with Sage but<br>\nstill need help to get through the last mile (I plan to share the stuff in<br>\ngithub in the next days/weeks if I manage get things to work).</p>\n<p>I basically need to write the following tactic \"replace_goal_tac\" that<br>\nmodifies the proof state by replacing the current goal: a (possibly<br>\nequational) term of the form \"A (= B)\", with a (possibly equational)<br>\n'newgoal' term of the form \"C (= D)\", and also adds the intermediate<br>\nsubgoal(s): \"A = C\" (possibly also \"B = D\").</p>\n<p>ML‹ fun replace_goal_tac (ctxt : Proof.context) (current_goal : term)<br>\n(new_goal : term) = all_tac ›</p>\n<p>Thanks for your help!<br>\nDavid</p>",
        "id": 412536325,
        "sender_full_name": "Email Gateway",
        "timestamp": 1705062943
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nOn 12/01/2024 13:35, David Fuenmayor wrote:</p>\n<blockquote>\n<p>Thank you all (Jasmin, Makarius, Wenda, Tobias) for your timely sugestions! <br>\nThey have been very helpful in getting a better picture of the problem.<br>\nIn the meanwhile, I have made some progress with interfacing with Sage but <br>\nstill need help to get through the last mile (I plan to share the stuff in <br>\ngithub in the next days/weeks if I manage get things to work).</p>\n</blockquote>\n<p>I did not find time yet to comment further on the material from this thread, <br>\nbecause there were so many deviations from decades of Isabelle culture and <br>\ntradition. If you publish your ongoing experiments, I will take another look <br>\neventually.</p>\n<blockquote>\n<p>I basically need to write the following tactic \"replace_goal_tac\" that <br>\nmodifies the proof state by replacing the current goal: a (possibly <br>\nequational) term of the form \"A (= B)\", with a (possibly equational) 'newgoal' <br>\nterm of the form \"C (= D)\", and also adds the intermediate subgoal(s): \"A = C\" <br>\n(possibly also \"B = D\").</p>\n<p>ML‹ fun replace_goal_tac (ctxt : Proof.context) (current_goal : term) <br>\n(new_goal : term) = all_tac ›</p>\n</blockquote>\n<p>So what is the logical relationship between the new and old goal?</p>\n<p>Tactical theorem proving usually works by backwards refinement of goal <br>\nstatements, based on previously proven facts (theorems).</p>\n<p>If the fact happens to be an equation (equivalence), you can apply it e.g. via <br>\nConv.gconv_rule. (You can do a hypersearch over all *.{ML,thy} files to see <br>\ntypical uses, including examples and documentation.) If the fact is a rule A1 <br>\n... ==&gt; An ==&gt; B, you can apply it e.g. via resolve_tac.</p>\n<p>There are many more possibilities beyond that. It depends on what you try to <br>\ndo exactly.</p>\n<p>Getting proven equations or rules is another problem. In the scenario of the <br>\nexternal tool, you will probably just \"invent\" or \"postulate\" theorems via an <br>\noracle. E.g. see the isar-ref manual, section 5.14 on the 'oracle' Isar <br>\ncommand. (Oracles are by default incorrect and not to be seriously trusted: a <br>\nbit too many things can usually go wrong. We will discuss that further, when <br>\nyou have your concrete implementation.)</p>\n<p>Makarius</p>",
        "id": 412544592,
        "sender_full_name": "Email Gateway",
        "timestamp": 1705066080
    }
]