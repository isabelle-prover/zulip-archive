[
    {
        "content": "<p>From: \"Eugene W. Stark\" &lt;<a href=\"mailto:isabelle-users@starkeffect.com\">isabelle-users@starkeffect.com</a>&gt;<br>\nRunning Isabelle2021-1-RC1 on Ubuntu 20.04, when using Sledgehammer I now frequently see output like<br>\nthe following:</p>\n<blockquote>\n<p>\"cvc4\": Timed out <br>\n\"verit\": Prover error:<br>\nAbnormal termination with exit code 14 <br>\n\"z3\": Timed out <br>\n\"e\": Timed out <br>\n\"spass\": Timed out <br>\n\"vampire\": Timed out <br>\n\"zipperposition\": Timed out</p>\n</blockquote>\n<p>The \"Abnormal termination\" message for verit seems to be new with recent Isabelle release candidates.<br>\nThe \"exit code 14\" looks suspiciously like it really means \"signal 14\" (i.e. SIGALRM).<br>\nI looked in the veriT sources and I see (in src/src/utils/veriT-signal.c):</p>\n<blockquote>\n<p>#ifdef CAPTURE_SIGNALS<br>\nstatic void<br>\nveriT_signal_handle(int signum)<br>\n{<br>\n  unsigned i;<br>\n  for (i = 0; i &lt; stack_size(veriT_sigfun_stack); i++)<br>\n      stack_get(veriT_sigfun_stack, i)();<br>\n  switch (signum) {<br>\n      case SIGINT:<br>\n          if (veriT_print_report) {<br>\n              stats_fprint_formats(stdout);<br>\n              stats_fprint(stdout);<br>\n              fflush(stdout);<br>\n          }<br>\n          break;<br>\n      case SIGILL: fprintf(stderr, \"Illegal Instruction\\n\"); break;<br>\n      case SIGFPE: fprintf(stderr, \"Floating point exception\\n\"); break;<br>\n      case SIGSEGV: fprintf(stderr, \"Invalid memory reference\\n\"); break;<br>\n      case SIGPIPE: fprintf(stderr, \"Broken pipe\\n\"); break;<br>\n      case SIGALRM:<br>\n          fprintf(stderr, \"Time limit exceeded\\n\");<br>\n          if (veriT_print_report) {<br>\n              stats_fprint_formats(stdout);<br>\n              stats_fprint(stdout);<br>\n              fflush(stdout);<br>\n          }</p>\n<p>break;<br>\n      case SIGXCPU:<br>\n          fprintf(stderr, \"CPU time limit exceeded\\n\");<br>\n          if (veriT_print_report) {<br>\n              stats_fprint_formats(stdout);<br>\n              stats_fprint(stdout);<br>\n              fflush(stdout);<br>\n          }</p>\n<p>break;<br>\n  }</p>\n<p>_exit(signum);<br>\n}<br>\n#endif</p>\n</blockquote>\n<p>The handler exits with the signal number as the exit status, so that supports my theory.<br>\nLooking further in the same file, I see:</p>\n<blockquote>\n<p>void<br>\nveriT_signal_init(void)<br>\n{<br>\n#ifdef CAPTURE_SIGNALS<br>\n  stack_INIT(veriT_sigfun_stack);<br>\n  memset(&amp;new_act, 0, sizeof(new_act)); /* memset necessaire pour flags=0 */<br>\n  new_act.sa_handler = veriT_signal_handle;<br>\n  sigemptyset(&amp;new_act.sa_mask);<br>\n  sigaddset(&amp;new_act.sa_mask, SIGINT);<br>\n  sigaddset(&amp;new_act.sa_mask, SIGQUIT);<br>\n  sigaddset(&amp;new_act.sa_mask, SIGILL);<br>\n  sigaddset(&amp;new_act.sa_mask, SIGABRT);<br>\n  sigaddset(&amp;new_act.sa_mask, SIGFPE);<br>\n  sigaddset(&amp;new_act.sa_mask, SIGSEGV);<br>\n  sigaddset(&amp;new_act.sa_mask, SIGPIPE);<br>\n  sigaddset(&amp;new_act.sa_mask, SIGTERM);<br>\n  sigaction(SIGINT, &amp;new_act, &amp;old);<br>\n  sigaction(SIGQUIT, &amp;new_act, &amp;old);<br>\n  sigaction(SIGILL, &amp;new_act, &amp;old);<br>\n  sigaction(SIGABRT, &amp;new_act, &amp;old);<br>\n  sigaction(SIGFPE, &amp;new_act, &amp;old);<br>\n  sigaction(SIGSEGV, &amp;new_act, &amp;old);<br>\n  sigaction(SIGPIPE, &amp;new_act, &amp;old);<br>\n  sigaction(SIGTERM, &amp;new_act, &amp;old);<br>\n  sigaction(SIGXCPU, &amp;new_act, &amp;old);<br>\n  sigaction(SIGALRM, &amp;new_act, &amp;old);<br>\n#endif<br>\n}</p>\n<p>void<br>\nveriT_signal_done(void)<br>\n{<br>\n#ifdef CAPTURE_SIGNALS<br>\n  new_act.sa_handler = SIG_DFL;<br>\n  sigaction(SIGINT, &amp;new_act, &amp;old);<br>\n  sigaction(SIGQUIT, &amp;new_act, &amp;old);<br>\n  sigaction(SIGILL, &amp;new_act, &amp;old);<br>\n  sigaction(SIGABRT, &amp;new_act, &amp;old);<br>\n  sigaction(SIGFPE, &amp;new_act, &amp;old);<br>\n  sigaction(SIGSEGV, &amp;new_act, &amp;old);<br>\n  sigaction(SIGPIPE, &amp;new_act, &amp;old);<br>\n  sigaction(SIGTERM, &amp;new_act, &amp;old);<br>\n  sigaction(SIGXCPU, &amp;new_act, &amp;old);<br>\n  stack_free(veriT_sigfun_stack);<br>\n#endif<br>\n}</p>\n</blockquote>\n<p>I wonder why the handler for SIGALRM is not treated the same as the others here?  It doesn't seem<br>\nright, especially given that they are freeing something that is used in the handler.  A possible<br>\nmechanism for the observed behavior is that veriT is attempting to terminate, it uninstalls the<br>\nhandlers, except for the SIGALRM handler, and then receives a SIGALRM, causing the handler to be<br>\ninvoked and _exit() to be called with argument SIGALRM (== 14).</p>\n<p>I suppose it might be that the authors wanted to leave the alarm handler in place so that SIGALRM<br>\nwould still cause veriT to exit even if it is the process of already trying to exit.  But then<br>\nthere is at least a race here between normal termination and the SIGALRM, and it also possibly<br>\nindicates a deadlock or something else that is slowing down termination once all the handlers<br>\nhave been uninstalled.</p>",
        "id": 260570133,
        "sender_full_name": "Email Gateway",
        "timestamp": 1636286683
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nThe veriT guys have done something about it for Isabelle2021-1-RC2. Maybe that<br>\nis already sufficient, and covers all your very detailed observations.</p>\n<p>Makarius</p>",
        "id": 260591862,
        "sender_full_name": "Email Gateway",
        "timestamp": 1636314040
    },
    {
        "content": "<p>From: Martin Desharnais &lt;<a href=\"mailto:martin.desharnais@posteo.de\">martin.desharnais@posteo.de</a>&gt;<br>\nHi Eugene,</p>\n<p>thank you very much for this detailed report!</p>\n<p>As Makarius wrote on 2021-11-07, the abnormal termination was noticed <br>\nsome time ago and the veriT team recently released version 2021.06.1-rmx <br>\nwith the following change.</p>",
        "id": 260636038,
        "sender_full_name": "Email Gateway",
        "timestamp": 1636365759
    }
]