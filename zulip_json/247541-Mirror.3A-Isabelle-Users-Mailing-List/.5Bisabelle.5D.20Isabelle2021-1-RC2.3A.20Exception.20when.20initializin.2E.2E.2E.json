[
    {
        "content": "<p>From: Dominique Unruh &lt;<a href=\"mailto:unruh@ut.ee\">unruh@ut.ee</a>&gt;<br>\nHi,</p>\n<p>when initializing Isabelle in a situation where the classpath contains a <br>\ndirectory (not only jars), and exception is thrown. (This can happen, <br>\nfor example, if Isabelle is initialized via Isabelle/Scala in a project <br>\nthat does not have a pure JAR classpath.)</p>\n<p>java.io.FileNotFoundException:<br>\n    /home/unruh/svn/qrhl-tool/scala-isabelle/target/scala-2.13/test-classes<br>\n    (Is a directory)<br>\n         at java.base/java.io.RandomAccessFile.open0(Native Method)<br>\n         at<br>\n    java.base/java.io.RandomAccessFile.open(RandomAccessFile.java:343)<br>\n         at<br>\n    java.base/java.io.RandomAccessFile.&lt;init&gt;(RandomAccessFile.java:258)<br>\n         at<br>\n    java.base/java.io.RandomAccessFile.&lt;init&gt;(RandomAccessFile.java:213)<br>\n         at java.base/java.util.zip.ZipFile$Source.&lt;init&gt;(ZipFile.java:1260)<br>\n         at java.base/java.util.zip.ZipFile$Source.get(ZipFile.java:1225)<br>\n         at<br>\n    java.base/java.util.zip.ZipFile$CleanableResource.&lt;init&gt;(ZipFile.java:706)<br>\n         at java.base/java.util.zip.ZipFile.&lt;init&gt;(ZipFile.java:240)<br>\n         at java.base/java.util.zip.ZipFile.&lt;init&gt;(ZipFile.java:171)<br>\n         at java.base/java.util.jar.JarFile.&lt;init&gt;(JarFile.java:349)<br>\n         at java.base/java.util.jar.JarFile.&lt;init&gt;(JarFile.java:320)<br>\n         at java.base/java.util.jar.JarFile.&lt;init&gt;(JarFile.java:286)<br>\n         at PIDEWrapper@1//isabelle.setup.Build.get_services(Build.java:342)<br>\n         at<br>\n    PIDEWrapper@1//isabelle.Isabelle_System$.from_jar$1(isabelle_system.scala:81)<br>\n         at<br>\n    PIDEWrapper@1//isabelle.Isabelle_System$.$anonfun$make_services$4(isabelle_system.scala:83)<br>\n         at<br>\n    PIDEWrapper@1//scala.collection.immutable.List.flatMap(List.scala:293)<br>\n         at<br>\n    PIDEWrapper@1//isabelle.Isabelle_System$.make_services(isabelle_system.scala:83)<br>\n         at<br>\n    PIDEWrapper@1//isabelle.Isabelle_System$.init(isabelle_system.scala:89)</p>\n<p>The reason is the following:</p>\n<p>Isabelle_System.make_services calls isabelle.setup.Build.get_services <br>\nwith every classpath element. get_services calls new JarFile if that <br>\nclasspath element exists in the filesystem. However, if the classpath <br>\nelement exists but is a directory, then new JarFile raises an exception.</p>\n<p>I assume the easiest fix would be to invoke new JarFile only on regular <br>\nfiles (i.e., replace Files.exists(jar_path) by <br>\nFiles.isRegularFile(jar_path) in get_services). This would simply ignore <br>\ndirectory-classpath-elements (i.e., services can only be loaded from <br>\njars but Isabelle does not fail in the presence of <br>\ndirectory-classpath-elements).</p>\n<p>Best wishes,<br>\nDominique.</p>",
        "id": 260765752,
        "sender_full_name": "Email Gateway",
        "timestamp": 1636445740
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nOK, I have made this more robust via Files.isRegularFile here:<br>\n<a href=\"https://isabelle-dev.sketis.net/rISABELLEcba1da393958ac15a155abaadf5d3472705d83ff\">https://isabelle-dev.sketis.net/rISABELLEcba1da393958ac15a155abaadf5d3472705d83ff</a></p>\n<p>Can you say where the directory in the your classpath is coming from?</p>\n<p>Note that the isabelle.setup module is a step towards better integration (or<br>\nassimilation) of Java/Scala into Isabelle (not Isabelle into Java/Scala).<br>\nThere will be further steps after the coming release, e.g. jars as exports<br>\nwithin the session database --- e.g. for services that build the document.</p>\n<p>The current state is documented in the \"system\" manual, see \"isabelle<br>\nscala_project\" and \"isabelle scala_build\". The \"build.props\" file is where<br>\neverything comes together.</p>\n<p>Makarius</p>",
        "id": 260780855,
        "sender_full_name": "Email Gateway",
        "timestamp": 1636455170
    },
    {
        "content": "<p>From: Dominique Unruh &lt;<a href=\"mailto:unruh@ut.ee\">unruh@ut.ee</a>&gt;</p>\n<blockquote>\n<p>Yes, we've had long discussions about the obsolete scala-isabelle <br>\nlibrary already.</p>\n</blockquote>\n<p>I would disagree that it is obsolete.</p>\n<p>At least not in the sense that there is a different approach that covers <br>\nthe same needs, to my knowledge.</p>\n<p>The core Isabelle framework, as far as I can tell, covers the following <br>\nuse cases well:</p>\n<p>* Invoking Scala code from a standalone Isabelle process (e.g.,<br>\n    Isabelle services)</p>\n<p>* Invoking Isabelle from other tools as a more-or-less standalone<br>\n    process with coarse operations (such as building a session)</p>\n<p>What is not supported (as far as I can tell) is:</p>\n<p>* Running an Isabelle process as a slave to an existing application<br>\n    (where the application has its own toplevel interface, be it GUI,<br>\n    command line, or REPL).</p>\n<p>* Invoking fine grained operation (e.g., constructing a term, proving<br>\n    a theorem).</p>\n<p>If there is a mechanism that covers those things, then I'd be happy to <br>\nuse that mechanism. (Ideally, scala-isabelle would be nothing than a <br>\nsimpler to use helper library that just passes through everything to <br>\nIsabelle/Scala.)</p>\n<p>I'm also happy to use the \"proper way\" of invoking Isabelle inside the <br>\nlibrary.</p>\n<p>(Note that, if I wouldn't use the library, I would still have exactly <br>\nthe same problems because in the qrhl-tool theorem prover, I need to <br>\ninvoke Isabelle, and if I do it by calling Isabelle/Scala directly, I <br>\nwill still have exactly the same questions.)</p>\n<p>Best wishes,<br>\nDominique.</p>",
        "id": 260785722,
        "sender_full_name": "Email Gateway",
        "timestamp": 1636458153
    }
]