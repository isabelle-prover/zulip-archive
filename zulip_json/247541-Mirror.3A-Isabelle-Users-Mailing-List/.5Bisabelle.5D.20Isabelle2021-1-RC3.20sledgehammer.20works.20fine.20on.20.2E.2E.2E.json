[
    {
        "content": "<p>From: Frédéric Boulanger &lt;<a href=\"mailto:frederic.boulanger@centralesupelec.fr\">frederic.boulanger@centralesupelec.fr</a>&gt;<br>\nHello,</p>\n<p>I just installed the RC3 release for arm64 in a Docker container running <br>\non an Apple M1 chip, and the issues I had with sledgehammer in RC1 seem <br>\nto be fixed.</p>\n<p>It works fine and provides better proofs than in Isabelle2021 on an <br>\nIntel chip.</p>\n<p>Many thanks for this!</p>\n<p>The MacOS version works fine on both Intel and M1 machines, but I wonder <br>\nif it takes advantage of the M1 chip. It is shown as an Intel <br>\napplication on both platforms, but I see arm64-darwin directories in the <br>\npackaged polyml-5.9 and jdk-17 distributions, so the support for the M1 <br>\nchip may be quite good although the NEWS file let me think that the <br>\nIntel version of Poly/ML is still used through Rosetta 2.</p>\n<p>Frédéric</p>",
        "id": 261314805,
        "sender_full_name": "Email Gateway",
        "timestamp": 1636753445
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nOn 12/11/2021 22:43, Frédéric Boulanger wrote:</p>\n<blockquote>\n<p>I just installed the RC3 release for arm64 in a Docker container running on an<br>\nApple M1 chip, and the issues I had with sledgehammer in RC1 seem to be fixed.</p>\n<p>It works fine and provides better proofs than in Isabelle2021 on an Intel chip.</p>\n<p>Many thanks for this!</p>\n</blockquote>\n<p>Great. The thanks need to be directed towards David Matthews, who is refining<br>\nPoly/ML 5.9 towards a release where ARM will work natively (on Linux, macOS,<br>\nWindows), but be still somewhat inefficiently due to lack of code optimization.</p>\n<blockquote>\n<p>The MacOS version works fine on both Intel and M1 machines, but I wonder if it<br>\ntakes advantage of the M1 chip. It is shown as an Intel application on both<br>\nplatforms, but I see arm64-darwin directories in the packaged polyml-5.9 and<br>\njdk-17 distributions, so the support for the M1 chip may be quite good<br>\nalthough the NEWS file let me think that the Intel version of Poly/ML is still<br>\nused through Rosetta 2.</p>\n</blockquote>\n<p>I have already built many components for arm64-linux, and a few for<br>\narm64-darwin (external provers etc.).</p>\n<p>Java 15 in Isabelle2021 has already been native arm64-darwin, and this<br>\ncontinues with Java 17 in Isabelle2021-1.</p>\n<p>In contrast, the native Poly/ML arm64_32-darwin (and arm64-darwin) is only<br>\nthere for testing, to sort out remaining problems. On macOS, x86_64_32-darwin<br>\nperforms much better with Rosetta 2 and will remain the default for now.</p>\n<p>You can try ARM by augmenting $ISABELLE_HOME_USER/etc/settings like this:</p>\n<p>ML_PLATFORM=\"arm64_32-darwin\"<br>\nML_HOME=\"$POLYML_HOME/$ML_PLATFORM\"</p>\n<p>This will build an image for Isabelle/HOL on startup of Isabelle/jEdit.</p>\n<p>Makarius</p>",
        "id": 261317569,
        "sender_full_name": "Email Gateway",
        "timestamp": 1636754848
    },
    {
        "content": "<p>From: David Matthews &lt;<a href=\"mailto:dm@prolingua.co.uk\">dm@prolingua.co.uk</a>&gt;<br>\nI'm pleased it works well for you.  The ARM64 port involves quite a few <br>\ncomponents.  The focus so far has been on getting the essential parts <br>\nworking, tested and fixing bugs.  Register optimisation isn't critical <br>\nso that has been left for the moment.  As a result the ARM64 port <br>\ndoesn't perform quite as well as the X86 version with Rosetta. <br>\nHopefully that will change when there has been time to work on optimisation.</p>\n<p>David</p>",
        "id": 261371266,
        "sender_full_name": "Email Gateway",
        "timestamp": 1636824827
    },
    {
        "content": "<p>From: Frédéric Boulanger &lt;<a href=\"mailto:frederic.boulanger@centralesupelec.fr\">frederic.boulanger@centralesupelec.fr</a>&gt;<br>\nThank you for the explanations, and the good work!</p>\n<p>I provide my students with a Docker image containing all the software <br>\nthey need for the year, and some of them have MacBooks with M1 chips so <br>\nthey need the arm64-linux version of the image.</p>\n<p>I did not make extensive tests and only checked that what I need for my <br>\ncourses works. I also managed to build the Why3 &lt;<a href=\"http://why3.lri.fr/\">http://why3.lri.fr/</a>&gt; <br>\nIsabelle session in which many proofs \"by smt\" failed with RC1, so I <br>\nguess it is all the interface with smt solvers that benefits from the <br>\nwork on Poly/ML.</p>\n<p>Frédéric</p>",
        "id": 261379956,
        "sender_full_name": "Email Gateway",
        "timestamp": 1636837540
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nPoly/ML on arm64 is one thing, and external provers are another thing. I have<br>\nsuccessfully built most tools for arm64-linux, with the following exceptions:</p>\n<p>. cvc4<br>\n    . z3<br>\n    . nunchaku<br>\n    . smbc</p>\n<p>The default for the \"smt\" proof method is z3, but veriT is getting more and<br>\nmore significant, which is already on arm64-linux.</p>\n<p>After spending many hours with z3-4.4.0 and z3-4.4.1, which are both quite old<br>\nbut close to our current component z3-4.4.0pre-3, I've come to the conclusion<br>\nthat supporting z3 on arm64-linux requires a proper update to a current<br>\nversion <a href=\"https://github.com/Z3Prover/z3/tags\">https://github.com/Z3Prover/z3/tags</a></p>\n<p>We cannot warp the underlying z3 several years from distant past into the<br>\npresent, without significant work on the Isabelle side.</p>\n<p>So for Isabelle2021-1-RC1 nothing is going to happen --- unless you come up<br>\nwith a patch for z3-4.4.0 or z3-4.4.1 (based on the included one for 4.4.1).</p>\n<p>Makarius<br>\n<a href=\"/user_uploads/14278/GkWtTPrQzlVI7W4vkX1ed0o1/a.patch\">a.patch</a></p>",
        "id": 261540239,
        "sender_full_name": "Email Gateway",
        "timestamp": 1637001435
    },
    {
        "content": "<p>From: Florian Märkl &lt;<a href=\"mailto:isabelle-users@florianmaerkl.de\">isabelle-users@florianmaerkl.de</a>&gt;<br>\nHello Makarius,</p>\n<blockquote>\n<p>So for Isabelle2021-1-RC1 nothing is going to happen --- unless you come up<br>\nwith a patch for z3-4.4.0 or z3-4.4.1 (based on the included one for 4.4.1).</p>\n</blockquote>\n<p>I have compiled the old z3-4.4.0 a while ago for playing around with native arm64 Isabelle.<br>\nLuckily I just found my patches are still there, so I have attached them.<br>\nIirc, in addition to very similar patches as you have done already, I just did a recursive sed replacing __in by __z3_in and __out by __z3_out.<br>\nIt can be built like this:</p>\n<p>CC=clang CXX=clang++ python scripts/mk_make.py &amp;&amp; \\<br>\nsed -i 's/-msse2//g' build/config.mk &amp;&amp; \\<br>\nsed -i 's/-msse//g' build/config.mk &amp;&amp; \\<br>\nsed -i 's/-mfpmath=sse//g' build/config.mk &amp;&amp; \\<br>\ncd build &amp;&amp; \\<br>\nmake -j8</p>\n<p>I didn’t bother messing around in their python build system code and instead just remove the x86-specific flags manually in the generated files.<br>\nAt least this works for me on Gentoo/glibc.</p>\n<p>In any case though...</p>\n<blockquote>\n<p>I've come to the conclusion<br>\nthat supporting z3 on arm64-linux requires a proper update to a current<br>\nversion <a href=\"https://github.com/Z3Prover/z3/tags\">https://github.com/Z3Prover/z3/tags</a></p>\n<p>We cannot warp the underlying z3 several years from distant past into the<br>\npresent, without significant work on the Isabelle side.<br>\nI do agree on this in the long run. These are really just dirty hacks.</p>\n</blockquote>\n<p>Florian<br>\n<a href=\"/user_uploads/14278/9v48lzzhjlEKCLrfYruWot3u/0001-arm64-patches.patch\">0001-arm64-patches.patch</a></p>",
        "id": 261548116,
        "sender_full_name": "Email Gateway",
        "timestamp": 1637005129
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nOn 15/11/2021 20:38, Florian Märkl wrote:</p>\n<blockquote>\n<blockquote>\n<p>So for Isabelle2021-1-RC1 nothing is going to happen --- unless you come up<br>\nwith a patch for z3-4.4.0 or z3-4.4.1 (based on the included one for 4.4.1).</p>\n</blockquote>\n<p>I have compiled the old z3-4.4.0 a while ago for playing around with native arm64 Isabelle.<br>\nLuckily I just found my patches are still there, so I have attached them.<br>\nIirc, in addition to very similar patches as you have done already, I just did a recursive sed replacing __in by __z3_in and __out by __z3_out.</p>\n</blockquote>\n<p>Can you explain the purpose of __z3_in and __z3_out?</p>\n<blockquote>\n<p>It can be built like this:</p>\n<p>CC=clang CXX=clang++ python scripts/mk_make.py &amp;&amp; \\<br>\nsed -i 's/-msse2//g' build/config.mk &amp;&amp; \\<br>\nsed -i 's/-msse//g' build/config.mk &amp;&amp; \\<br>\nsed -i 's/-mfpmath=sse//g' build/config.mk &amp;&amp; \\<br>\ncd build &amp;&amp; \\<br>\nmake -j8</p>\n</blockquote>\n<p>I did not try the alternative clang setup yet.</p>\n<p>With the default gcc incantations, it all builds, but in the very end there is<br>\na final error:</p>\n<p>ontend.o shell/main.o shell/mem_initializer.o shell/smtlib_frontend.o<br>\nshell/gparams_register_modules.o api/api.a opt/opt.a parsers/smt/smtparser.a<br>\ntactic/portfolio/portfolio.a sat/sat_solver/sat_solver.a<br>\ntactic/ufbv/ufbv_tactic.a tactic/fpa/fpa_tactics.a<br>\ntactic/smtlogics/smtlogic_tactics.a tactic/nlsat_smt/nlsat_smt_tactic.a<br>\nmuz/fp/fp.a muz/duality/duality_intf.a muz/ddnf/ddnf.a muz/bmc/bmc.a<br>\nmuz/tab/tab.a muz/clp/clp.a muz/pdr/pdr.a muz/rel/rel.a<br>\nmuz/transforms/transforms.a muz/dataflow/dataflow.a muz/base/muz.a<br>\nduality/duality.a qe/qe.a tactic/sls/sls_tactic.a smt/tactic/smt_tactic.a<br>\ntactic/bv/bv_tactics.a smt/user_plugin/user_plugin.a smt/smt.a<br>\nsmt/proto_model/proto_model.a smt/params/smt_params.a<br>\nast/rewriter/bit_blaster/bit_blaster.a ast/pattern/pattern.a<br>\nast/macros/macros.a ast/fpa/fpa.a ast/simplifier/simplifier.a<br>\nast/proof_checker/proof_checker.a parsers/smt2/smt2parser.a<br>\ncmd_context/extra_cmds/extra_cmds.a cmd_context/cmd_context.a interp/interp.a<br>\nsolver/solver.a tactic/aig/aig_tactic.a<br>\nmath/subpaving/tactic/subpaving_tactic.a nlsat/tactic/nlsat_tactic.a<br>\ntactic/arith/arith_tactics.a sat/tactic/sat_tactic.a<br>\ntactic/core/core_tactics.a math/euclid/euclid.a math/grobner/grobner.a<br>\nparsers/util/parser_util.a ast/substitution/substitution.a tactic/tactic.a<br>\nmodel/model.a ast/normal_forms/normal_forms.a ast/rewriter/rewriter.a<br>\nast/ast.a math/subpaving/subpaving.a math/realclosure/realclosure.a<br>\nmath/interval/interval.a math/simplex/simplex.a math/hilbert/hilbert.a<br>\nnlsat/nlsat.a sat/sat.a math/polynomial/polynomial.a util/util.a  -lpthread<br>\n-fopenmp -lrt<br>\n/usr/bin/ld: smt/smt.a(smt_statistics.o): Relocations in generic ELF (EM: 62)<br>\n/usr/bin/ld: smt/smt.a(smt_statistics.o): Relocations in generic ELF (EM: 62)<br>\n/usr/bin/ld: smt/smt.a(smt_statistics.o): Relocations in generic ELF (EM: 62)<br>\n/usr/bin/ld: smt/smt.a: error adding symbols: file in wrong format<br>\ncollect2: error: ld returned 1 exit status<br>\nmake: *** [Makefile:3520: z3] Error 1</p>\n<p>I will try clang, but it takes all very long on this tiny Raspberrypi device.</p>\n<p>Makarius</p>",
        "id": 261551100,
        "sender_full_name": "Email Gateway",
        "timestamp": 1637006504
    },
    {
        "content": "<p>From: Florian Märkl &lt;<a href=\"mailto:isabelle-users@florianmaerkl.de\">isabelle-users@florianmaerkl.de</a>&gt;</p>\n<blockquote>\n<p>Am 15.11.2021 um 21:01 schrieb Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;:</p>\n<p>On 15/11/2021 20:38, Florian Märkl wrote:</p>\n<blockquote>\n<blockquote>\n<p>So for Isabelle2021-1-RC1 nothing is going to happen --- unless you come up<br>\nwith a patch for z3-4.4.0 or z3-4.4.1 (based on the included one for 4.4.1).</p>\n</blockquote>\n<p>I have compiled the old z3-4.4.0 a while ago for playing around with native arm64 Isabelle.<br>\nLuckily I just found my patches are still there, so I have attached them.<br>\nIirc, in addition to very similar patches as you have done already, I just did a recursive sed replacing __in by __z3_in and __out by __z3_out.</p>\n</blockquote>\n<p>Can you explain the purpose of __z3_in and __z3_out?</p>\n</blockquote>\n<p>Just from a quick glance at the code I think they are just hints for the reader to mark function arguments as inputs or outputs.<br>\nThey are defined to nothing and my assumption seems to match their usage. So they could essentially be removed entirely as well.</p>\n<blockquote>\n<p>I will try clang, but it takes all very long on this tiny Raspberrypi device.</p>\n</blockquote>\n<p>The clang version I used, in case it helps:<br>\nclang version 12.0.1<br>\nTarget: aarch64-unknown-linux-gnu<br>\nThread model: posix<br>\nInstalledDir: /usr/lib/llvm/12/bin<br>\nSelected GCC installation: /usr/lib/gcc/aarch64-unknown-linux-gnu/11.1.0<br>\nCandidate multilib: .;@m64<br>\nSelected multilib: .;@m64</p>\n<p>Florian</p>",
        "id": 261552856,
        "sender_full_name": "Email Gateway",
        "timestamp": 1637007353
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nThis is all a bit tedious: my Pi OS installation lacks clang/clang++.</p>\n<p>Luckily, there is an existing executable here:<br>\n<a href=\"https://packages.debian.org/stretch/arm64/z3/download\">https://packages.debian.org/stretch/arm64/z3/download</a></p>\n<p>So I will just bundle the binaries as Isabelle component z3-4.4.1 and continue<br>\nwith that --- so far it looks good.</p>\n<p>Makarius</p>",
        "id": 261564086,
        "sender_full_name": "Email Gateway",
        "timestamp": 1637012818
    }
]