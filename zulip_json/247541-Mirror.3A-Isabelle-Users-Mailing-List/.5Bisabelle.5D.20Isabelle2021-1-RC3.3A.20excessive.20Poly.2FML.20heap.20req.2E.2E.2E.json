[
    {
        "content": "<p>From: Lars Hupel &lt;<a href=\"mailto:lars.hupel@innoq.com\">lars.hupel@innoq.com</a>&gt;<br>\nDear list,</p>\n<p>I'm porting a small but substantial application (~ 7kLOC, but no custom <br>\ntactics or commands) to Isabelle2021-1.</p>\n<p>I noticed during regular development with Isabelle/jEdit that Poly/ML <br>\nquite aggressively allocates memory. I have a quad-core machine with 24 <br>\nGB of memory, and it is not uncommon for me to see heap sizes &gt; 10 GB.</p>\n<p>Normally, that wouldn't be a problem, however the GC/ML cleanup can take <br>\na long time, during which my entire laptop freezes (unless the OOM <br>\nkiller chimes in). Just now I saw a GC phase that took ~50 seconds with <br>\nan ML heap size of 2 GB.</p>\n<p>Cheers<br>\nLars</p>",
        "id": 262557772,
        "sender_full_name": "Email Gateway",
        "timestamp": 1637742470
    },
    {
        "content": "<p>From: Lars Hupel &lt;<a href=\"mailto:lars.hupel@innoq.com\">lars.hupel@innoq.com</a>&gt;<br>\nAfter a bit more use, I noticed another strange pattern. Poly/ML <br>\naccumulates heap very quickly, but if I manually run</p>\n<p>PIDE.session.protocol_command(\"ML_Heap.full_gc\")</p>\n<p>in the Console dockable, thus forcing a GC run, it completes within a <br>\nfew seconds (as expected).</p>\n<p>Curiously enough, when an automatic GC run happens, Poly/ML does not <br>\nappear to release memory back to the OS, but running the above command does.</p>",
        "id": 262591529,
        "sender_full_name": "Email Gateway",
        "timestamp": 1637762339
    },
    {
        "content": "<p>From: Lars Hupel &lt;<a href=\"mailto:lars.hupel@innoq.com\">lars.hupel@innoq.com</a>&gt;</p>\n<blockquote>\n<p>What is your OS version?</p>\n</blockquote>\n<p>Arch, approximately kernel 5.15</p>\n<blockquote>\n<p>Can you can try this with other versions of Poly/ML? Here are some formal<br>\ncomponent names:</p>\n</blockquote>\n<p>I haven't had a chance yet but it turns out that setting --max-heap to <br>\n4G allows me to work without interruption. I will try other Poly/ML next.</p>",
        "id": 262788589,
        "sender_full_name": "Email Gateway",
        "timestamp": 1637927562
    },
    {
        "content": "<p>From: Dominique Unruh &lt;<a href=\"mailto:unruh@ut.ee\">unruh@ut.ee</a>&gt;</p>\n<blockquote>\n<p>I haven't had a chance yet but it turns out that setting --max-heap to <br>\n4G allows me to work without interruption. I will try other Poly/ML next.</p>\n</blockquote>\n<p>I have tried to build HOL-Analysis on a 4GB Mac and it completely failed <br>\n(i.e., did not finish within a day or two, probably stuck due to <br>\nconstant swapping). Setting --max-heap to 2G made it work in a few hours <br>\n(it was an old system). So it seems that the polyml defaults do not <br>\nnecessarily use the machine optimally. Maybe you had a similar <br>\nsituation, just scaled up by a factor of two.</p>\n<p>Best wishes,<br>\nDominique.</p>",
        "id": 262838600,
        "sender_full_name": "Email Gateway",
        "timestamp": 1637965031
    },
    {
        "content": "<p>From: Lars Hupel &lt;<a href=\"mailto:lars.hupel@innoq.com\">lars.hupel@innoq.com</a>&gt;</p>\n<blockquote>\n<p>The question: Is this really a new problem for Isabelle2021-1 that was absent<br>\nin Isabelle2021?</p>\n</blockquote>\n<p>Yes, this problem is new. As I said, I've ported the application to <br>\nIsabelle2021-1 and never experienced that kind of excessive heap usage <br>\nbefore.</p>",
        "id": 262927184,
        "sender_full_name": "Email Gateway",
        "timestamp": 1638103806
    },
    {
        "content": "<p>From: Lars Hupel &lt;<a href=\"mailto:lars.hupel@innoq.com\">lars.hupel@innoq.com</a>&gt;<br>\nThey seem to behave differently:</p>\n<ul>\n<li>\n<p>polyml-5.8.2 has smaller heap requirements and frequently runs fast GC <br>\nphases.</p>\n</li>\n<li>\n<p>polyml-test-f86ae3dc1686 appears to also not demand a large heap, but <br>\nI've observed long-running GC pauses (similar to the ones I've described <br>\nin my original mail)</p>\n</li>\n</ul>\n<p>I tried loading the same theories in the same way to test the hypothesis.</p>",
        "id": 262980721,
        "sender_full_name": "Email Gateway",
        "timestamp": 1638176293
    },
    {
        "content": "<p>From: Lars Hupel &lt;<a href=\"mailto:lars.hupel@innoq.com\">lars.hupel@innoq.com</a>&gt;</p>\n<blockquote>\n<p>We need some tangible empirical results to proceed.</p>\n</blockquote>\n<p>I also tried out RC4 and the problem became much worse. I've seen GC <br>\npauses exceeding a minute or more, both with --maxheap 2G and --maxheap 4G.</p>\n<p>My laptop has 24G RAM, so theoretically I could increase --maxheap, but <br>\nI don't see how that could help if GC pauses grow with more memory.</p>",
        "id": 263029914,
        "sender_full_name": "Email Gateway",
        "timestamp": 1638202469
    },
    {
        "content": "<p>From: Manuel Eberl &lt;<a href=\"mailto:manuel@pruvisto.org\">manuel@pruvisto.org</a>&gt;<br>\nSomeone on Zulip had a similar problem today, both with Isabelle 2020 <br>\nand with Isabelle 2021, that we eventually tracked down to \"auto <br>\nquickcheck\": there was a goal that involved \"2 ^ 129 :: nat\", which <br>\ncauses auto quickcheck to try to evaluate \"2 ^ 129\" in successor <br>\narithmetic and leads to horrific memory consumption and freezing.</p>\n<p>Since you also only spoke of the problem appearing in Isabelle/jEdit (if <br>\nI see correctly), I do wonder: does it also happen if you switch off <br>\nauto quickcheck in the settings?</p>\n<p>Manuel</p>",
        "id": 263032167,
        "sender_full_name": "Email Gateway",
        "timestamp": 1638203357
    },
    {
        "content": "<p>From: Lars Hupel &lt;<a href=\"mailto:lars.hupel@innoq.com\">lars.hupel@innoq.com</a>&gt;<br>\nI just checked that out and indeed it does not when disabling Auto <br>\nQuickcheck. I also tried running the \"quickcheck\" command and could <br>\nconfirm that it is the culprit.</p>\n<p>However, I wonder why I never stumbled upon that problem before, given <br>\nthat this definition appears in my code (and has been for a long time):</p>\n<p>definition max_value :: ‹nat› where<br>\n‹max_value = 2147483647›</p>",
        "id": 263032658,
        "sender_full_name": "Email Gateway",
        "timestamp": 1638203568
    },
    {
        "content": "<p>From: Manuel Eberl &lt;<a href=\"mailto:manuel@pruvisto.org\">manuel@pruvisto.org</a>&gt;<br>\nIt really is quite odd. I can never remember having run into problems <br>\nlike this.</p>\n<p>My guess is that some piece of code is supposed to kill auto quickcheck <br>\nquickly when it does not find a result (and/or consumes to much memory) <br>\nand that this fails under certain circumstances, and perhaps these <br>\ncircumstances have become more frequent recently.</p>\n<p>In any case, the credit belongs to Matthew Torrence. He came up with the <br>\nminimal (non-)working example and also figured out that it might have <br>\nsomething to do with auto quickcheck: <br>\n<a href=\"#narrow/stream/202961-General/topic/ML.20cleanup.20problems\">https://isabelle.zulipchat.com/#narrow/stream/202961-General/topic/ML.20cleanup.20problems</a></p>\n<p>He was going to post about it on the mailing list soon.</p>\n<p>Manuel</p>",
        "id": 263033472,
        "sender_full_name": "Email Gateway",
        "timestamp": 1638203897
    },
    {
        "content": "<p>From: Manuel Eberl &lt;<a href=\"mailto:manuel@pruvisto.org\">manuel@pruvisto.org</a>&gt;<br>\nAddendum: If one imports HOL-Library.Code_Target_Numeral, this problem <br>\n(unsurprisingly) does not happen.</p>\n<p>But what is perhaps surprising (at least to me) is that if one then <br>\nquickchecks a theorem involving the term \"replicate (2^32) True\", this <br>\ndoes <em>not</em> lead to the same behaviour (consuming tonnes of memory, whole <br>\nsystem becomes unresponsive) but rather fails very quickly, with the <br>\n\"quickcheck\" command being highlighted with a red background in <br>\nIsabelle/jEdit.</p>\n<p>It is a complete mystery to me why successor-arithmetic natural numbers <br>\nbehave so differently from lists. And why the natural-number example <br>\ndoes not also simply crash due to out-of-memory very quickly.</p>\n<p>But perhaps these observations will at least allow the rest of you to <br>\npin down what is going on better.</p>\n<p>On a related note, I also recall an unresolved post by myself from a few <br>\nyears ago where I found that running the \"approximate\" command/tactic on <br>\ncertain pathological terms. The numbers involved become so huge that <br>\ntrying to run the command/tactic took down the entire system. (I <br>\ncouldn't find the thread anymore though)</p>\n<p><a href=\"https://lists.cam.ac.uk/pipermail/cl-isabelle-users/2018-March/msg00008.html\">https://lists.cam.ac.uk/pipermail/cl-isabelle-users/2018-March/msg00008.html</a></p>\n<p>Manuel</p>",
        "id": 263034785,
        "sender_full_name": "Email Gateway",
        "timestamp": 1638204489
    },
    {
        "content": "<p>From: \"Eugene W. Stark\" &lt;<a href=\"mailto:isabelle-users@starkeffect.com\">isabelle-users@starkeffect.com</a>&gt;<br>\nSome additional comments that might or might not be helpful...</p>\n<p>I have been running for some months now on a system with 128GB RAM, with the following settings:</p>",
        "id": 263043836,
        "sender_full_name": "Email Gateway",
        "timestamp": 1638208315
    }
]