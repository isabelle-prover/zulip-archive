[
    {
        "content": "<p>From: Peter Lammich &lt;<a href=\"mailto:lammich@in.tum.de\">lammich@in.tum.de</a>&gt;<br>\nWhere's the <em>syntactic</em> signed_division type class gone.</p>\n<p>I remember that it was a convention to have syntactic type-classes that <br>\ndefine the operators, and make no assumptions.</p>\n<p>This used to be the case for signed_division <br>\n(HOL-Library.Signed_Division), but has changed now, and the sdiv and <br>\nsmod are defined only in a typeclass with assumptions.</p>\n<p>This breaks my formalization, with the only workarounds being to use <br>\ndifferent infix operators, or to hide and overload the ones defined by <br>\nsigned-division</p>\n<p>... both inferior solutions to simply using sdiv/smod to express signed <br>\ndivision (however in a type where it's only partially defined, and thus <br>\ndoes not satisfy the class assumptions)</p>\n<p>Any particular reason for that change? Or just by accident?</p>",
        "id": 301412463,
        "sender_full_name": "Email Gateway",
        "timestamp": 1664448224
    },
    {
        "content": "<p>From: Florian Haftmann &lt;<a href=\"mailto:florian.haftmann@informatik.tu-muenchen.de\">florian.haftmann@informatik.tu-muenchen.de</a>&gt;<br>\nHi Peter et. al.,</p>\n<p>for the moment being it is not a big deal to introduce dedicated <br>\nsyntactic type classes for _ sdiv _ and _ smod _.</p>\n<p>A change is underway, but I have to await the test results of that and a <br>\npredecessor; this will hopefully happen during today, otherways I will <br>\nsend a dedicated change to Makarius.</p>\n<p>The state-of-the-art device for managing reusable syntax are bundles, <br>\nand some examples can now be found in the distribution, notably the <br>\ninfix bit operations.  Their applications still requires boilerplate, <br>\nand I would definitely not suggest to use them for pervasive syntax like </p>\n<ul>\n<li>\n<ul>\n<li>\n<ul>\n<li>at the moment, but for more exotic notations everything should <br>\nwork out fine already.</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>More instances of that pattern will bring suggestions what is needed to <br>\nmake it even more convenient. (think loudly – sth. like default bundles <br>\nscoped to a theory could be an idea).</p>\n<p>Cheers,<br>\n    Florian<br>\n<a href=\"/user_uploads/14278/iKlnkheC5-3CB76_lAY5iimY/OpenPGP_0xA707172232CFA4E9.asc\">OpenPGP_0xA707172232CFA4E9.asc</a><br>\n<a href=\"/user_uploads/14278/kg8gF1yRsqnGVkIforY7okcD/OpenPGP_signature\">OpenPGP_signature</a></p>",
        "id": 301785826,
        "sender_full_name": "Email Gateway",
        "timestamp": 1664613275
    },
    {
        "content": "<p>From: Peter Lammich &lt;<a href=\"mailto:lammich@in.tum.de\">lammich@in.tum.de</a>&gt;<br>\nHi Florian.</p>\n<blockquote>\n<p>A change is underway,</p>\n</blockquote>\n<p>great!</p>\n<blockquote>\n<p>The state-of-the-art device for managing reusable syntax are bundles, <br>\nand some examples can now be found in the distribution, notably the <br>\ninfix bit operations.  Their applications still requires boilerplate, <br>\nand I would definitely not suggest to use them for pervasive syntax <br>\nlike + * - at the moment, but for more exotic notations everything <br>\nshould work out fine already.</p>\n</blockquote>\n<p>They have the disadvantage that you cannot have multiple bundles with <br>\nthe same syntax unbundled.</p>\n<p>In my case, I am working with lemmas of the form:</p>\n<p>bitsize a = bitsize b ==&gt; a sdiv b = to_int a sdiv to_int b</p>\n<p>you could argue that this dual use of sdiv, as partial function and as <br>\ntotal function, might be confusing, and you should introduce another <br>\nname. But that's a design decision, and depends on many factors. Not <br>\nhaving a syntactic type-class forces this decision one way.</p>\n<p>And, similarly, for other theories (I use regularly), e.g., <br>\nSeparation_Algebra, where + is overloaded to have partial meaning.</p>\n<p>Also an opinion: sdiv and smod being one of the basic operations on <br>\nwords, I do not consider them particularly 'exotic'.</p>",
        "id": 301790437,
        "sender_full_name": "Email Gateway",
        "timestamp": 1664615829
    },
    {
        "content": "<p>From: Florian Haftmann &lt;<a href=\"mailto:florian.haftmann@informatik.tu-muenchen.de\">florian.haftmann@informatik.tu-muenchen.de</a>&gt;</p>\n<blockquote>\n<p>They have the disadvantage that you cannot have multiple bundles with <br>\nthe same syntax unbundled.</p>\n</blockquote>\n<p>That's right. We have no syntactic overloading yet. Until them, we have <br>\nto work with funny combinations of lettes and glyphs.</p>\n<blockquote>\n<p>Also an opinion: sdiv and smod being one of the basic operations on <br>\nwords, I do not consider them particularly 'exotic'.</p>\n</blockquote>\n<p>With »exotic« I mean not the the operations are »uncanonical« but are <br>\nnot pervasively used in arbitrary theories like e. g. addition.</p>\n<p>Cheers,<br>\n    Florian<br>\n<a href=\"/user_uploads/14278/whudAZ1HbDoKC8vnP79T42Us/OpenPGP_0xA707172232CFA4E9.asc\">OpenPGP_0xA707172232CFA4E9.asc</a><br>\n<a href=\"/user_uploads/14278/aUXTcClmrTnRbaQoktivWfBF/OpenPGP_signature\">OpenPGP_signature</a></p>",
        "id": 301937247,
        "sender_full_name": "Email Gateway",
        "timestamp": 1664718336
    },
    {
        "content": "<p>From: Dominique Unruh &lt;<a href=\"mailto:cl-isabelle-users@lists.cam.ac.uk\">cl-isabelle-users@lists.cam.ac.uk</a>&gt;<br>\nHi Florian,</p>\n<blockquote>\n<p>The state-of-the-art device for managing reusable syntax are bundles, <br>\nand some examples can now be found in the distribution, notably the <br>\ninfix bit operations.  Their applications still requires boilerplate, <br>\nand I would definitely not suggest to use them for pervasive syntax <br>\nlike + * - at the moment, but for more exotic notations everything <br>\nshould work out fine already.</p>\n</blockquote>\n<p>I'd like to stress that \"syntactic type classes\" are not purely useful <br>\nfor input syntax but can have useful logical implications related to <br>\ntype-classes.</p>\n<p>As a slightly contrived example:</p>\n<p>Assume we write a new type class \"ordered_enum\".</p>\n<p>Which has the axioms:</p>\n<p>enum_ordered: \"forall x,y: x &lt;= y ==&gt; exists i,j with i &lt;= j: enum!i <br>\n= x /\\ enum!j = y\"  (basically: enum is an ordered list of all elements <br>\nof the type)</p>\n<p>enum_unique: \"unique enum\" (no duplicates)</p>\n<p>If there were a syntactic type class for enum, I could write</p>\n<p>class ordered_enum = linorder + *syntactic_enum *+ assumes <br>\nenum_ordered: \"....\" and enum_unique: \"....\"</p>\n<p>and then later prove \"subclass ordered_enum &lt;= enum\" (because the enum <br>\naxioms easily follow from the stronger ones given here).</p>\n<p>But since we do not have a syntactic enum, we have to write (as far as I <br>\ncan tell):</p>\n<p>class ordered_enum = linorder + *enum *+ assumes enum_ordered: <br>\n\"....\" and enum_unique: \"....\"</p>\n<p>This gives the same effect in the end, except that now in every instance <br>\nproof of ordered_enum, we need to additionally prove the enum axioms. <br>\nThis increases redundancy unnecessarily.</p>\n<p>Even more problematic is when someone wants to introduce additional <br>\ntypeclasses that have less requirements than the existing ones. Imagine <br>\nthe syntactic \"ord\" would not exist (i.e., \"order\" would be the first <br>\ntype class defining less_eq), then it would not be possible to introduce <br>\na type-class quasiorder that, say, does not have antisymmetry. (Or, it <br>\nwould be possible, but it would be impossible to make it a superclass of <br>\n\"order\".)</p>\n<p>So I would advocate keeping the syntactic classes even if fancy syntax <br>\nextensions become possible in the future.</p>\n<p>Best wishes,<br>\nDominique.</p>\n<blockquote>\n<p>More instances of that pattern will bring suggestions what is needed <br>\nto make it even more convenient. (think loudly – sth. like default <br>\nbundles scoped to a theory could be an idea).</p>\n<p>Cheers,<br>\n    Florian</p>\n<p>Am 29.09.22 um 12:43 schrieb Peter Lammich:</p>\n<blockquote>\n<p>Where's the <em>syntactic</em> signed_division type class gone.</p>\n<p>I remember that it was a convention to have syntactic type-classes <br>\nthat define the operators, and make no assumptions.</p>\n<p>This used to be the case for signed_division <br>\n(HOL-Library.Signed_Division), but has changed now, and the sdiv and <br>\nsmod are defined only in a typeclass with assumptions.</p>\n<p>This breaks my formalization, with the only workarounds being to use <br>\ndifferent infix operators, or to hide and overload the ones defined <br>\nby signed-division</p>\n<p>... both inferior solutions to simply using sdiv/smod to express <br>\nsigned division (however in a type where it's only partially defined, <br>\nand thus does not satisfy the class assumptions)</p>\n<p>Any particular reason for that change? Or just by accident?</p>\n<p>-- </p>\n<p>Peter</p>\n</blockquote>\n<p>On 18/09/2022 16:04, Makarius wrote:</p>\n<blockquote>\n<blockquote>\n<p>Dear Isabelle users,</p>\n<p>we are making quick progress with the Isabelle2022, which is to be <br>\nfinalized until 23-Oct-2022.</p>\n<p>The release process is continuously documented on the blog entry<br>\n<a href=\"https://isabelle-dev.sketis.net/phame/post/view/58/release_candidates_for_isabelle2022\">https://isabelle-dev.sketis.net/phame/post/view/58/release_candidates_for_isabelle2022</a> <br>\n--- this includes a list of notable changes.</p>\n<p>The current release candidate is<br>\n<a href=\"https://isabelle.sketis.net/website-Isabelle2022-RC2\">https://isabelle.sketis.net/website-Isabelle2022-RC2</a></p>\n<p>A corresponding version of the Archive of Formal Proofs is<br>\n<a href=\"https://isabelle.sketis.net/repos/afp-devel/rev/34a31d29f666\">https://isabelle.sketis.net/repos/afp-devel/rev/34a31d29f666</a>.</p>\n<p>Any feedback about Isabelle release candidates should be posted with <br>\na meaningful Subject  (not just a clone of the announcement).</p>\n<p>Makarius<br>\n</p>\n</blockquote>\n</blockquote>\n</blockquote>",
        "id": 302008751,
        "sender_full_name": "Email Gateway",
        "timestamp": 1664780766
    },
    {
        "content": "<p>From: Florian Haftmann &lt;<a href=\"mailto:florian.haftmann@informatik.tu-muenchen.de\">florian.haftmann@informatik.tu-muenchen.de</a>&gt;<br>\nHi Dominique,</p>\n<blockquote>\n<p>I'd like to stress that \"syntactic type classes\" are not purely useful <br>\nfor input syntax but can have useful logical implications related to <br>\ntype-classes.</p>\n</blockquote>\n<p>I did not stress that issue in my last e-mail, but I am aware of this<br>\n– one concrete example requiring the same pattern in the distribution is <br>\n»gcd«.</p>\n<blockquote>\n<p>So I would advocate keeping the syntactic classes even if fancy syntax <br>\nextensions become possible in the future.</p>\n</blockquote>\n<p>I don't think that there will be even the chance of any massive movement in<br>\nthe distribution to abolish syntactic type classes.</p>\n<p>On the other side I don't think it is a good idea to introduce syntactic<br>\ntype classes unconditionally, but follow an on-demand approach here.</p>\n<p>Cheers,<br>\n    Florian<br>\n<a href=\"/user_uploads/14278/_HSsCx5SD21PQg_wHQdTZyud/OpenPGP_0xA707172232CFA4E9.asc\">OpenPGP_0xA707172232CFA4E9.asc</a><br>\n<a href=\"/user_uploads/14278/z7QuldLUmGnsypnePM1u891v/OpenPGP_signature\">OpenPGP_signature</a></p>",
        "id": 302640555,
        "sender_full_name": "Email Gateway",
        "timestamp": 1665059282
    }
]