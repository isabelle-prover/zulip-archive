[
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nHere are some a notable NEWS items.</p>\n<p><strong>* General </strong>*</p>\n<ul>\n<li>ML heap usage and stored heap size has been significantly reduced,<br>\nespecially for applications with a lot 'locale' or 'class' context<br>\nswitches, e.g. \"definition (in loc)\". The shrink factor is usually in<br>\nthe range 1.1 .. 2.0, but a factor 2 .. 25 has been seen as well. This<br>\noften allows big applications to return to the \"small\" 64_32 memory<br>\nmodel with its hard limit of 16 GiB, and thus reduce the heap size by<br>\nanother factor 1.8.</li>\n</ul>\n<p><strong>* ML </strong>*</p>\n<ul>\n<li>\n<p>Improved implementations and signatures of functor Table() and<br>\ncorresponding functor Set().</p>\n<ul>\n<li>\n<p>Specific Set().T supersedes Table().set = unit table, with concrete<br>\n   instances Intset, Symset, Termset etc.</p>\n</li>\n<li>\n<p>Data representation is more compact than before, approx. 85% .. 110%<br>\n   of a plain list (e.g. see structure AList or Ord_List, respectively).</p>\n</li>\n<li>\n<p>The new \"size\" operation works with constant time complexity and<br>\n   minimal space overhead: small structures have no size descriptor.</p>\n</li>\n</ul>\n</li>\n<li>\n<p>Operations ML_Heap.sizeof1 and ML_Heap.sizeof determine the object<br>\nsize on the heap in bytes. The latter works simultaneously on multiple<br>\nobjects, taking implicit sharing of values into account. Examples for<br>\nthe default 64_32 platform (4 bytes per machine word):</p>\n<p>val s = \"aaaabbbbcccc\";<br>\n val a = ML_Heap.sizeof1 s;<br>\n   (<em>20: 2 words descriptor + 3 words content</em>)<br>\n val b = ML_Heap.sizeof [s, s];<br>\n   (<em>20: shared values without list structure</em>)<br>\n val c = ML_Heap.sizeof1 [s, s];<br>\n   (*44 = 20 + 24: shared values + 2 * 3 words per list cons*)</p>\n</li>\n</ul>\n<p>That emerged recently on request of some high-end users with really huge ML <br>\nheaps. Many applications in AFP benefit as well, like the Category Theory <br>\nsessions by Eugine Stark, e.g. see \"stored_heap\" in <br>\n<a href=\"https://isabelle.sketis.net/devel/build_status/AFP/Category3.csv\">https://isabelle.sketis.net/devel/build_status/AFP/Category3.csv</a></p>\n<p>The numbers are for batch-builds, i.e. the parent heap hierarchy for a running <br>\nIsabelle/PIDE session. I did not make any measurements on the ML heap of the <br>\nrunning PIDE session yet.</p>\n<p>(I don't plan to do anything further for the Isabelle2023 release: a factor <br>\n1.1 .. 25 is good enough and other things are more pressing.)</p>\n<p>Makarius</p>",
        "id": 364376065,
        "sender_full_name": "Email Gateway",
        "timestamp": 1686165655
    }
]