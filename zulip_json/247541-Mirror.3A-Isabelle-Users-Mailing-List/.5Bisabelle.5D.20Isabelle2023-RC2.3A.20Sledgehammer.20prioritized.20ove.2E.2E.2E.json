[
    {
        "content": "<p>From: Dominique Unruh &lt;<a href=\"mailto:cl-isabelle-users@lists.cam.ac.uk\">cl-isabelle-users@lists.cam.ac.uk</a>&gt;<br>\nHello,</p>\n<p>in RC2 (and also prior RCs), when I run sledgehammer (as a command), <br>\nthen Isabelle uses all available threads to do the sledgehammer, without <br>\ncontinuing to parse the document after the sledgehammer.</p>\n<p>The following example (also attached as a .thy) illustrates this:</p>\n<p>Until the sledgehammer is finished, nothing happens in the rest of the <br>\nproof.</p>\n<p>In Isabelle 2022, the behavior was different (on the same system). Even <br>\nwith a sledgehammer command still running, parsing of the rest of the <br>\ndocument would continue. Even methods would be evaluated (e.g., apply <br>\nsimp etc.) albeit a bit slower.</p>\n<p>The previous behavior was highly convenient: It was possible leave <br>\nsledgehammer running on some subgoals while already working on the goals <br>\nbelow, considerably speeding up the proof and removing idle times.</p>\n<p><a href=\"/user_uploads/14278/XPNYwdUBpUw6BjuIlGdqQ3-V/VyA8ivCdj4PBBrnA.png\">VyA8ivCdj4PBBrnA.png</a><br>\n<a href=\"/user_uploads/14278/SQP2bl_JYVwPzUEKFIzZyOIx/Scratch.thy\">Scratch.thy</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/14278/XPNYwdUBpUw6BjuIlGdqQ3-V/VyA8ivCdj4PBBrnA.png\" title=\"VyA8ivCdj4PBBrnA.png\"><img src=\"/user_uploads/14278/XPNYwdUBpUw6BjuIlGdqQ3-V/VyA8ivCdj4PBBrnA.png\"></a></div>",
        "id": 379985741,
        "sender_full_name": "Email Gateway",
        "timestamp": 1690712222
    },
    {
        "content": "<p>From: Jasmin Blanchette &lt;<a href=\"mailto:jasmin.blanchette@ifi.lmu.de\">jasmin.blanchette@ifi.lmu.de</a>&gt;<br>\nDear Dominique,</p>\n<p>I wasn't aware of the back-and-forth of behavior you are describing. I suspect the behavior is originating from Isabelle/PIDE, because even when the user invokes Sledgehammer with the \"dont_slice\" option (which instructs Sledgehammer to use only one thread), with recent development versions processing does not continue. This is the behavior I'm familiar with, but I can see why the other behavior is useful.</p>\n<p>Have you tried the Sledgehammer panel? It should allow you to continue with your proof. (If you prefer the command to the panel, I'd be curious to hear why.)</p>\n<p>Best,<br>\nJasmin</p>",
        "id": 380222881,
        "sender_full_name": "Email Gateway",
        "timestamp": 1690789019
    },
    {
        "content": "<p>From: Dominique Unruh &lt;<a href=\"mailto:cl-isabelle-users@lists.cam.ac.uk\">cl-isabelle-users@lists.cam.ac.uk</a>&gt;<br>\nDear Jasmin,</p>\n<p>indeed, the panel seems to block the processing less for some reason. <br>\n(It's hard to tell whether the amount of blocking is the same as it was <br>\nin 2022, but at least processing continues.)</p>\n<p>I have stopped using the panel at some point and started using the <br>\ncommand because the following workflow enables a very fast use of <br>\nsledgehammer that the panel cannot keep up with:</p>\n<p>* I write my Isar proof steps one by one (e.g., have \"...\" also have<br>\n    \"...\" also have \"...\" etc.)</p>\n<p>* After each proof step, I insert a sledgehammer command (via<br>\n    configured abbreviation /sl//ctrl-;/ which inserts three lines /try0<br>\n    sledgehammer by -///).</p>\n<p>* In steps that sledgehammer cannot process, I can also add some<br>\n    method calls before the sledgehammer command.</p>\n<p>The advantages of this:</p>\n<p>* I can start several sledgehammers at once. Of course, only I have a<br>\n    very powerful machine they will be processed one by one anyway, but<br>\n    at least I don't need to manually trigger one when the previous<br>\n    finishes as I would do with the panel.</p>\n<p>* I can see due to the coloring which ones have finished.<br>\n  * Should I notice a problem with some proof step higher up  and fix<br>\n    it, the sledgehammers of steps below it will restart automatically,<br>\n    I don't need to restart them as I would with the panel.</p>\n<p>* For changes that break a bunch of proof steps throughout the theory<br>\n    (e.g., minor change in a definition), it is a highly efficient<br>\n    process to first go through all broken steps and put the<br>\n    sledgehammer command there, go away for a while, and then come back<br>\n    when all is done and see which steps need manual attention.<br>\n    (Important: go through the finished sledgehammers last-to-first,<br>\n    otherwise all the others restart.)</p>\n<p>It may sound a little complicated, but this workflow speeds things up a <br>\nlot for heavy sledgehammer use. It would be quite sad if the blocking <br>\nbehavior of the sledgehammer command would be permanent... I understand <br>\ntoo little of PIDE to see how it happens.</p>\n<p>Best wishes,<br>\nDominique.</p>",
        "id": 380234055,
        "sender_full_name": "Email Gateway",
        "timestamp": 1690791184
    },
    {
        "content": "<p>From: Peter Lammich &lt;<a href=\"mailto:lammich@in.tum.de\">lammich@in.tum.de</a>&gt;<br>\nI'm indeed using a very similar workflow, copying in lines of the form</p>\n<p>subgoal sledgehammer sorry</p>\n<p>into my apply scripts, getting myself a coffee, and then see how many <br>\ngoals I still have to solve myself. Very useful on subgoals prodcued <br>\nfrom verification condition generators. (The ideal feature here would be <br>\nan option to sledgehammer to stop processing as soon as the first proof <br>\nhas been found)</p>",
        "id": 380239341,
        "sender_full_name": "Email Gateway",
        "timestamp": 1690792103
    },
    {
        "content": "<p>From: Jasmin Blanchette &lt;<a href=\"mailto:jasmin.blanchette@ifi.lmu.de\">jasmin.blanchette@ifi.lmu.de</a>&gt;<br>\nHi Peter,</p>\n<p>Have you tried \"sledgehammer [max_proofs = 1]\"? You can also set it once and for all globally as</p>\n<p>sledgehammer_params [max_proofs = 1]</p>\n<p>in your theory file.</p>\n<p>Best,<br>\nJasmin</p>",
        "id": 380250894,
        "sender_full_name": "Email Gateway",
        "timestamp": 1690794100
    },
    {
        "content": "<p>From: Peter Lammich &lt;<a href=\"mailto:lammich@in.tum.de\">lammich@in.tum.de</a>&gt;<br>\nAddendum:</p>\n<p>I also observe the reported blocking behaviour in my workflow. In 2022, <br>\nIsabelle would process about four \"subgoal sledgehammer sorry\" lines in <br>\nparallel, while they are now processed one by one.</p>\n<p>This is a regression against 2022 (at least for my main-usage pattern of <br>\nsledgehammer)</p>\n<p>Also parameters like [dont_slice, max_proofs=1] have no effect any more. <br>\nIn the below example, 2022 would process all subgoals in parallel, while <br>\n2023 goes through them one-by-one, utilizing only one thread.</p>",
        "id": 380336899,
        "sender_full_name": "Email Gateway",
        "timestamp": 1690809017
    },
    {
        "content": "<p>From: Dominique Unruh &lt;<a href=\"mailto:cl-isabelle-users@lists.cam.ac.uk\">cl-isabelle-users@lists.cam.ac.uk</a>&gt;<br>\nDear all,</p>\n<p>one thing that maybe helps to narrow this down: The same effect happens <br>\nwith <em>try0</em>. It's harder to notice because <em>try0</em> usually is quite fast, <br>\nbut sometimes it does take several seconds. So it seems it is not <br>\nsomething related to sledgehammer itself.</p>\n<p>Best wishes,<br>\nDominique.</p>\n<p><a href=\"/user_uploads/14278/KLsjM2cIrIi1wvu4YQGGxNDK/VyA8ivCdj4PBBrnA.png\">VyA8ivCdj4PBBrnA.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/14278/KLsjM2cIrIi1wvu4YQGGxNDK/VyA8ivCdj4PBBrnA.png\" title=\"VyA8ivCdj4PBBrnA.png\"><img src=\"/user_uploads/14278/KLsjM2cIrIi1wvu4YQGGxNDK/VyA8ivCdj4PBBrnA.png\"></a></div>",
        "id": 380984913,
        "sender_full_name": "Email Gateway",
        "timestamp": 1690972639
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nThis sounds like another case for \"hg bisect\" together with isabelle/Admin/init</p>\n<p>Without tangible evidence from the history, discussions make hardly any sense.</p>\n<p>Makarius</p>",
        "id": 382361922,
        "sender_full_name": "Email Gateway",
        "timestamp": 1691328292
    },
    {
        "content": "<p>From: Peter Lammich &lt;<a href=\"mailto:lammich@in.tum.de\">lammich@in.tum.de</a>&gt;<br>\nI get</p>\n<p>The first bad revision is:<br>\nchangeset:   76406:40a365360680<br>\nuser:        wenzelm<br>\ndate:        Wed Nov 02 11:34:24 2022 +0100<br>\nsummary:     more accurate outer syntax keywords (see also <br>\n94b2690ad494): base session could be anything, e.g. ZF vs. HOL;</p>\n<p>Note that this is the same changeset that introduced the regression with <br>\nproof state not being displayed!</p>\n<p>Here's a summary if the regressions that have been reported, and the <br>\nfirst bad revisions:</p>\n<p>print-theorems displays too much: at 76813:92a547feec88<br>\nno proof-state in Output after commands (other than lemma): 40a365360680<br>\nsledgehammer blocks all threads: 76406:40a365360680</p>",
        "id": 382553616,
        "sender_full_name": "Email Gateway",
        "timestamp": 1691400027
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nYes, because 'sledgehammer' needs to be categorized as \"diag\" command in order <br>\nto be made parallel by default.</p>\n<p>So the change <br>\n<a href=\"https://isabelle.sketis.net/repos/isabelle-release/rev/40d50936484c\">https://isabelle.sketis.net/repos/isabelle-release/rev/40d50936484c</a> restores <br>\nthe parallel \"subgoal sledgehammer [dont_slice,max_proofs=1] sorry\" of yours.</p>\n<p>I don't know of the other fine points that have been discussion on this thread <br>\nhave changed as well.</p>\n<p>If someone wants to try the above release repository version and finds <br>\nremaining regressions from Isabelle2022, then \"hg bisect\" will greatly help to <br>\nsort it out.</p>\n<p>(There are &lt; 48h left to produce Isabelle2023-RC3 and I am still busy in other <br>\ncorners.)</p>\n<p>Makarius</p>",
        "id": 383008378,
        "sender_full_name": "Email Gateway",
        "timestamp": 1691510544
    },
    {
        "content": "<p>From: Dominique Unruh &lt;<a href=\"mailto:cl-isabelle-users@lists.cam.ac.uk\">cl-isabelle-users@lists.cam.ac.uk</a>&gt;<br>\nHello,</p>\n<p>I can confirm that the problem disappeared for me in RC3. :)</p>\n<p>Best wishes,<br>\nDominique.</p>",
        "id": 384011278,
        "sender_full_name": "Email Gateway",
        "timestamp": 1691767967
    }
]