[
    {
        "content": "<p>From: Lars Hupel &lt;<a href=\"mailto:lars@hupel.info\">lars@hupel.info</a>&gt;<br>\nDear list,</p>\n<p>I noticed that new flags are now required to compile generated Scala code.</p>\n<p>For example, when exporting something involving equality on lists, the <br>\n\"equal_list\" function breaks unfortunately as follows:</p>\n<p>def equal_list<a href=\"http://x0%20:%20List[A],%20x1%20:%20List[A]\">A : equal</a> : Boolean = (x0, <br>\nx1) match&lt;linebreak&gt;<br>\n   {</p>\n<p>Due to Scala 3's new indentation-sensitive syntax, this is now a compile <br>\nerror:</p>\n<p>[error] -- [E040] Syntax Error: export1.scala:494:2<br>\n[error] 494 |  {<br>\n[error]     |  ^<br>\n[error]     |  'case' expected, but '{' found</p>\n<p>The workaround is quite simple, in our case we had to supply the <br>\nfollowing additional compiler flags:</p>\n<p>-source 3.3 -old-syntax</p>\n<p>When using \"checking Scala\" in Isabelle, these are automatically <br>\nsupplied, as is \"-no-indent\" (which was not required in our application).</p>\n<p>The example above can be reproduced with:</p>\n<p>definition cmp_list :: ‹'a::_ list ⇒ _ ⇒ bool› where<br>\n‹cmp_list xs ys ⟷ xs = ys›</p>\n<p>code_identifier<br>\n   code_module HOL ⇀ (Scala) Test<br>\n   | code_module Scratch ⇀ (Scala) Test<br>\n   | code_module List ⇀ (Scala) Test</p>\n<p>export_code cmp_list<br>\n   in Scala</p>\n<p>There is probably no immediate need to act for the Isabelle2024 release, <br>\nbut I found this to be surprising. The NEWS entry about Scala 3.3 only <br>\nrefers to Isabelle/Scala itself, not the generated code.</p>\n<p>A future challenge might arise should the Scala team decide to drop <br>\n\"-old-syntax\" as a flag.</p>\n<p>Cheers<br>\nLars</p>",
        "id": 431297901,
        "sender_full_name": "Email Gateway",
        "timestamp": 1712232641
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nOn 04/04/2024 14:04, Lars Hupel wrote:</p>\n<blockquote>\n<p>I noticed that new flags are now required to compile generated Scala code.</p>\n<p>For example, when exporting something involving equality on lists, the <br>\n\"equal_list\" function breaks unfortunately as follows:</p>\n<p>def equal_list<a href=\"http://x0%20:%20List[A],%20x1%20:%20List[A]\">A : equal</a> : Boolean = (x0, x1) <br>\nmatch&lt;linebreak&gt;<br>\n   {<br>\n</p>\n</blockquote>\n<blockquote>\n<p>The workaround is quite simple, in our case we had to supply the following <br>\nadditional compiler flags:</p>\n<p>-source 3.3 -old-syntax</p>\n</blockquote>\n<p>Thank you for testing Isabelle2024-RC1 now, where there is still time to <br>\nrefine things for the release.</p>\n<p>I have briefly tried your example with Isabelle2022, Isabelle2023, and <br>\nIsabelle2024-RC1, but did not see a difference.</p>\n<p>The full options for scalac are provided via ISABELLE_SCALAC_OPTIONS and used <br>\nfrom there in the regular codegen setup. The key options are now \"-source 3.3 <br>\n-old-syntax\" or before \"-source 3.1 -old-syntax\".</p>\n<blockquote>\n<p>The example above can be reproduced with:</p>\n<p>definition cmp_list :: ‹'a::_ list ⇒ _ ⇒ bool› where<br>\n‹cmp_list xs ys ⟷ xs = ys›</p>\n<p>code_identifier<br>\n   code_module HOL ⇀ (Scala) Test<br>\n   | code_module Scratch ⇀ (Scala) Test<br>\n   | code_module List ⇀ (Scala) Test</p>\n<p>export_code cmp_list<br>\n   in Scala</p>\n</blockquote>\n<p>This works for me with \"scalac -old-syntax\" in all 3 Isabelle versions. The <br>\noptions \"-source 3.1\" or \"-source 3.3\" don't make a difference.</p>\n<blockquote>\n<p>A future challenge might arise should the Scala team decide to drop <br>\n\"-old-syntax\" as a flag.</p>\n</blockquote>\n<p>That would mean to change a few things in Scala code generation, and to <br>\nautomatically rewrite all Isabelle/Scala sources (quite a lot of material).</p>\n<p>It would be indeed an inconvenient, annoying, and ultimately pointless move, <br>\nbut no big challenge.</p>\n<p>Makarius</p>",
        "id": 431486446,
        "sender_full_name": "Email Gateway",
        "timestamp": 1712309803
    },
    {
        "content": "<p>From: Lars Hupel &lt;<a href=\"mailto:lars@hupel.info\">lars@hupel.info</a>&gt;</p>\n<blockquote>\n<p>I have briefly tried your example with Isabelle2022, Isabelle2023, and <br>\nIsabelle2024-RC1, but did not see a difference.</p>\n</blockquote>\n<p>There is a subtle difference. In older Isabelle versions, this is <br>\nprinted as follows:</p>\n<p>def equal_list[A : equal](x0: List[A], x1: List[A]): Boolean = (x0, x1) <br>\nmatch {&lt;linebreak&gt;</p>\n<p>Notice the fewer spaces. This was introduced here:</p>\n<p>changeset:   78594:1cce41dc0c41<br>\nuser:        wenzelm<br>\ndate:        Tue Aug 29 15:23:06 2023 +0200<br>\nsummary:     clarified generated Scala, for the sake of \"scalac -source <br>\n3.3\";</p>\n<p>... presumably to work around some other incompatibility between Scala <br>\n3.1 and 3.3.</p>\n<p>Code generated from Isabelle2023 could be compiled with Scala 3.1 <br>\nwithout <em>any</em> flags (at least in our application). Now, we need flags. <br>\n(Another example is \"divmod_nat\", where the extra spaces also lead to a <br>\ndifference in line breaking.)</p>\n<p>Presumably because ISABELLE_SCALAC_OPTIONS are always set this subtle <br>\nincompatibility never surfaced in testing (i.e. when using \"checking <br>\nScala\").</p>\n<blockquote>\n<p>This works for me with \"scalac -old-syntax\" in all 3 Isabelle versions. <br>\nThe options \"-source 3.1\" or \"-source 3.3\" don't make a difference.</p>\n</blockquote>\n<p>You're right, \"-old-syntax\" is sufficient.</p>\n<p>For our application I will just set this flag and hope that it keeps <br>\nworking in the future.</p>",
        "id": 431491616,
        "sender_full_name": "Email Gateway",
        "timestamp": 1712311625
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nOn 05/04/2024 12:06, Lars Hupel wrote:</p>\n<blockquote>\n<p>Code generated from Isabelle2023 could be compiled with Scala 3.1 without <br>\n<em>any</em> flags (at least in our application). Now, we need flags. (Another <br>\nexample is \"divmod_nat\", where the extra spaces also lead to a difference in <br>\nline breaking.)</p>\n<p>Presumably because ISABELLE_SCALAC_OPTIONS are always set this subtle <br>\nincompatibility never surfaced in testing (i.e. when using \"checking Scala\").</p>\n</blockquote>\n<p>OK, I now understand the situation: the generated Scala code worked by <br>\naccident both with -new-syntax and -old-syntax, although I only had one <br>\nvariant in mind: the one of Isabelle/Scala modules.</p>\n<p>I think we can make this accidental flexibility official: a suitable change <br>\nfor Isabelle2024-RC2 (next week) is in the pipeline. That works, because 'if' <br>\nstatements are normally not used in generated Scala.</p>\n<blockquote>\n<p>You're right, \"-old-syntax\" is sufficient.</p>\n<p>For our application I will just set this flag and hope that it keeps working <br>\nin the future.</p>\n</blockquote>\n<p>As long as the Scala version (and basic options) are those of the underlying <br>\nIsabelle version, it will always work, regardless of future changes of Scala. <br>\nThat is a consequence of the \"static closure\" on all contributing components <br>\n(Java, Scala, whatever).</p>\n<p>Makarius</p>",
        "id": 431557430,
        "sender_full_name": "Email Gateway",
        "timestamp": 1712332717
    }
]