[
    {
        "content": "<p>From: David &lt;<a href=\"mailto:davfuenmayor@gmail.com\">davfuenmayor@gmail.com</a>&gt;<br>\nDear Makarius/developers,</p>\n<p>I saw this issue has been recently mentioned, but I still cannot figure out<br>\nthe correct way (as in intended by developers) to hide syntax/notation in<br>\nthe new Isabelle version. For instance:</p>\n<p>Before (Isabelle2024):<br>\nno_notation Set.subset  (\"'(⊂')\") and Set.subset  (\"(_/ ⊂ _)\" [51, 51] 50)</p>\n<p>Now (Isabelle2025):<br>\n???</p>\n<p>Thanks and best regards<br>\nDavid</p>",
        "id": 497766000,
        "sender_full_name": "Email Gateway",
        "timestamp": 1738706984
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nOn 04/02/2025 23:09, David wrote:</p>\n<blockquote>\n<p>Dear Makarius/developers,</p>\n<p>I saw this issue has been recently mentioned, but I still cannot figure out <br>\nthe correct way (as in intended by developers) to hide syntax/notation in the <br>\nnew Isabelle version. For instance:</p>\n<p>Before (Isabelle2024):<br>\nno_notation Set.subset  (\"'(⊂')\") and Set.subset  (\"(_/ ⊂ _)\" [51, 51] 50)</p>\n<p>Now (Isabelle2025):<br>\n???</p>\n</blockquote>\n<p>Now is Isabelle2025-RC1, not yet Isabelle2025.</p>\n<p>The 'no_syntax' and 'no_notation' commands themselves did not change: you need <br>\nto specify the syntax clauses precisely as in the original 'syntax' and <br>\n'notation' commands of the underlying library theories. The latter has changed <br>\nin many situations, see this explanation in NEWS:</p>\n<p>\"\"\"</p>\n<ul>\n<li>Blocks in mixfix annotations now support properties [...]<br>\nOccasional INCOMPATIBILITY for 'no_syntax' or 'no_notation'<br>\ndeclarations in user applications: the mixfix template needs to be<br>\nadapted accordingly, but it is often better to use \"unbundle no<br>\nfoobar_syntax\", as explained for HOL libraries below.<br>\n\"\"\"</li>\n</ul>\n<p>The recommendation to \"use unbundle no foobar_syntax\" depends on the library <br>\nproviding such bundles, e.g. via 'open_bundle'. I have introduced several such <br>\nbundles for syntax that is likely to be replaced, according to things seen in <br>\nAFP. If no suitable bundle is available, you need to copy-paste suitable parts <br>\nfrom the original syntax specifications, as before. This is a bit fragile, of <br>\ncourse.</p>\n<p>Alternatively, you can make a convincing argument, which additional syntax <br>\nbundles should be added now, before Isabelle2025 is finalized.</p>\n<p>Concerning basic notation of HOL predicate logic and sets, I would say that <br>\napplications should rather not touch that. We already have the \\&lt;^bold&gt; <br>\ncontrol-symbol to introduce copies of popular symbols without causing conflicts.</p>\n<p>So now we at the usual meta-question: What are you trying to do? What is your <br>\napplication?</p>\n<p>Makarius</p>",
        "id": 498200943,
        "sender_full_name": "Email Gateway",
        "timestamp": 1738872123
    },
    {
        "content": "<p>From: David &lt;<a href=\"mailto:davfuenmayor@gmail.com\">davfuenmayor@gmail.com</a>&gt;<br>\nThanks for your answer!</p>\n<p>Alternatively, you can make a convincing argument, which additional syntax<br>\nbundles should be added now, before Isabelle2025 is finalized.</p>\n<p>I would argue for the following two syntax bundles:<br>\n1) All syntax introduced in HOL libraries that goes beyond the basic HOL<br>\nlogical connectives (i.e. boolean operators, quantifiers, descriptions &amp;<br>\nco).<br>\n2) All syntax at all (not even HOL connectives, though maybe<br>\nequality/disequality symbols may remain).<br>\nMy (convincing?) argument is to allow for users working on \"vanilla HOL\"<br>\n(i.e. STLC + equality; cf. Andrews system Q) to use Isabelle as their proof<br>\neditor.<br>\nSuch users often need to provide their own custom versions of basic<br>\nlibraries, both for pedagogical and pragmatic ATP-related reasons.<br>\nIn my case, I do not use anything from the Isabelle libraries (well,<br>\nindirectly the things required by auto, metis, nitpick &amp; co. to work).</p>\n<p>So now we at the usual meta-question: What are you trying to do? What is<br>\nyour<br>\napplication?<br>\nRight now I am developing a library with use in (shallow) encodings of<br>\nmodal and non-classical logics (<br>\n<a href=\"https://github.com/davfuenmayor/logic-bricks/\">https://github.com/davfuenmayor/logic-bricks/</a>).<br>\nI provide there my own libraries for sets, relations, etc., and often<br>\nstruggle with syntax collisions with the Isabelle/HOL library.</p>\n<p>Best<br>\nDavid</p>\n<p>On Thu, Feb 6, 2025 at 9:01 PM Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt; wrote:</p>\n<blockquote>\n<p>On 04/02/2025 23:09, David wrote:</p>\n<blockquote>\n<p>Dear Makarius/developers,</p>\n<p>I saw this issue has been recently mentioned, but I still cannot figure<br>\nout<br>\nthe correct way (as in intended by developers) to hide syntax/notation<br>\nin the<br>\nnew Isabelle version. For instance:</p>\n<p>Before (Isabelle2024):<br>\nno_notation Set.subset  (\"'(⊂')\") and Set.subset  (\"(_/ ⊂ _)\" [51, 51]<br>\n50)</p>\n<p>Now (Isabelle2025):<br>\n???</p>\n</blockquote>\n<p>Now is Isabelle2025-RC1, not yet Isabelle2025.</p>\n<p>The 'no_syntax' and 'no_notation' commands themselves did not change: you<br>\nneed<br>\nto specify the syntax clauses precisely as in the original 'syntax' and<br>\n'notation' commands of the underlying library theories. The latter has<br>\nchanged<br>\nin many situations, see this explanation in NEWS:</p>\n<p>\"\"\"<br>\n* Blocks in mixfix annotations now support properties [...]<br>\nOccasional INCOMPATIBILITY for 'no_syntax' or 'no_notation'<br>\ndeclarations in user applications: the mixfix template needs to be<br>\nadapted accordingly, but it is often better to use \"unbundle no<br>\nfoobar_syntax\", as explained for HOL libraries below.<br>\n\"\"\"</p>\n<p>The recommendation to \"use unbundle no foobar_syntax\" depends on the<br>\nlibrary<br>\nproviding such bundles, e.g. via 'open_bundle'. I have introduced several<br>\nsuch<br>\nbundles for syntax that is likely to be replaced, according to things seen<br>\nin<br>\nAFP. If no suitable bundle is available, you need to copy-paste suitable<br>\nparts<br>\nfrom the original syntax specifications, as before. This is a bit fragile,<br>\nof<br>\ncourse.</p>\n<p>Alternatively, you can make a convincing argument, which additional syntax<br>\nbundles should be added now, before Isabelle2025 is finalized.</p>\n<p>Concerning basic notation of HOL predicate logic and sets, I would say<br>\nthat<br>\napplications should rather not touch that. We already have the \\&lt;^bold&gt;<br>\ncontrol-symbol to introduce copies of popular symbols without causing<br>\nconflicts.</p>\n<p>So now we at the usual meta-question: What are you trying to do? What is<br>\nyour<br>\napplication?</p>\n<p>Makarius</p>\n</blockquote>",
        "id": 499115469,
        "sender_full_name": "Email Gateway",
        "timestamp": 1739315875
    }
]