[
    {
        "content": "<p>From: Niels Mündler &lt;<a href=\"mailto:n.muendler@tum.de\">n.muendler@tum.de</a>&gt;<br>\nHello everyone,</p>\n<p>Working with the latest Isabelle distribution, I have encountered an <br>\ninternal exception when using <code>pattern_aliases</code> in combination with <br>\n<code>let</code> statements. As a minimal breaking example, the function <br>\n\"weird_swin\" can be found  in the code appended. Thanks to Manuel Eberl, <br>\na non-breaking version could be formulated which can also be found, <br>\nnamed \"not_so_weird_swin\".</p>\n<p>I am just curious whether this issue is known and suggest that the issue <br>\nshould be fixed, myself having no clue what caused it.</p>\n<p>Best regards,<br>\nNiels Mündler<br>\n<a href=\"/user_uploads/14278/KpIZZkOqXgaQbF-MemqQWbjY/Breaking.thy\">Breaking.thy</a></p>",
        "id": 207064616,
        "sender_full_name": "Email Gateway",
        "timestamp": 1597572542
    },
    {
        "content": "<p>From: Manuel Eberl &lt;<a href=\"mailto:eberlm@in.tum.de\">eberlm@in.tum.de</a>&gt;<br>\nI tried to track it down but failed so far. Even with ML exception trace<br>\nand ML exception debugger enabled (and Pure + HOL rebuilt), I see no<br>\ntrace for the exception. Rebuilding HOL with the full ML debugger is not<br>\nfeasible (doesn't terminate).</p>\n<p>I did find out, however, that it is /not/ a problem with the function<br>\npackage but rather a problem with pattern aliases. The function<br>\ndefinition does not use pattern aliases at all, and if you just disable<br>\npattern aliases, the exception goes away.</p>\n<p>Manuel</p>",
        "id": 207139464,
        "sender_full_name": "Email Gateway",
        "timestamp": 1597668985
    },
    {
        "content": "<p>From: Manuel Eberl &lt;<a href=\"mailto:eberlm@in.tum.de\">eberlm@in.tum.de</a>&gt;<br>\nOkay, I managed to get somewhere. First of all, the problem doesn't seem<br>\nto be pattern aliases as such but a fundef_cong rule it declares:</p>\n<p>lemma let_cong_unfolding [fundef_cong]:<br>\n  \"M = N ⟹ f N = g N ⟹ Let M f = Let N g\"<br>\n  by simp</p>\n<p>The problem is probably due to the combination of \"Let\" and \"case\", but<br>\nI cannot see what exactly the problem is.</p>\n<p>Minimal breaking example and exception trace below.</p>\n<p>Manuel</p>\n<p>theory Foo<br>\nimports \"~~/src/HOL/Fun_Def\"<br>\nbegin</p>\n<p>lemma let_cong_unfolding [fundef_cong]:<br>\n  \"M = N ⟹ f N = g N ⟹ Let M f = Let N g\"<br>\n  by simp</p>\n<p>fun foo :: \"nat ⇒ unit × unit\" where<br>\n \"foo 0 = undefined\" |<br>\n \"foo (Suc n) = (let (a', l') = foo n in undefined)\"</p>\n<p>end</p>\n<p>Exception trace - exception THM 1 raised (line 700 of \"drule.ML\"): COMP<br>\n  Function_Context_Tree.rewrite_by_tree(5)rewrite_help (line 244 of<br>\n\"~~/src/HOL/Tools/Function/function_context_tree.ML\")<br>\n  Function_Context_Tree.rewrite_by_tree (line 242 of<br>\n\"~~/src/HOL/Tools/Function/function_context_tree.ML\")<br>\n  Function_Core.mk_replacement_lemma (line 256 of<br>\n\"~~/src/HOL/Tools/Function/function_core.ML\")<br>\n  Function_Core.prove_stuff (line 390 of<br>\n\"~~/src/HOL/Tools/Function/function_core.ML\")<br>\n  Function_Core.prepare_function (line 825 of<br>\n\"~~/src/HOL/Tools/Function/function_core.ML\")<br>\n  Function_Mutual.prepare_function_mutual (line 303 of<br>\n\"~~/src/HOL/Tools/Function/mutual.ML\")<br>\n  Function.prepare_function (line 72 of<br>\n\"~~/src/HOL/Tools/Function/function.ML\")<br>\n  Function.gen_add_function (line 139 of<br>\n\"~~/src/HOL/Tools/Function/function.ML\")<br>\n  Function_Fun.gen_add_fun (line 155 of \"~~/src/HOL/Tools/Function/fun.ML\")</p>\n<p>exception THM 1 raised (line 700 of \"drule.ML\"):<br>\n  COMP<br>\n  (case h_fd n of (a', l') ⇒ undefined) = (case foo_sumC n of (a', l') ⇒<br>\nundefined)<br>\n    [⋀z. foo_rel z x_fd ⟹ ∃!y. foo_graph z y, x_fd = Suc n, foo_graph n<br>\n(h_fd n),<br>\n      foo_rel ≡ ??.Foo.foo_rel, foo_sumC ≡ ??.Foo.foo_sumC, foo_graph ≡<br>\n??.Foo.foo_graph]<br>\n  (case foo_sumC n of (a', l') ⇒ undefined) = (case foo_sumC n of (a',<br>\nl') ⇒ undefined) ⟹<br>\n  let (a', l') = h_fd n in undefined ≡ let (a', l') = foo_sumC n in<br>\nundefined<br>\n    [⋀z. foo_rel z x_fd ⟹ ∃!y. foo_graph z y, x_fd = Suc n, foo_graph n<br>\n(h_fd n),<br>\n      foo_rel ≡ ??.Foo.foo_rel, foo_sumC ≡ ??.Foo.foo_sumC, foo_graph ≡<br>\n??.Foo.foo_graph]</p>",
        "id": 207141613,
        "sender_full_name": "Email Gateway",
        "timestamp": 1597669915
    }
]