[
    {
        "content": "<p>From: Simon Foster via Cl-isabelle-users &lt;<a href=\"mailto:cl-isabelle-users@lists.cam.ac.uk\">cl-isabelle-users@lists.cam.ac.uk</a>&gt;<br>\nDear all,</p>\n<p>I've been experimenting with SML code generation for lazy evaluated<br>\ncodatatypes using the theory Code_Lazy. It's a very nice development, and<br>\nit works pretty well on some examples. However, I've hit an issue with<br>\ngenerated code that seems to be related to polymorphism.</p>\n<p>Consider the following example. First, I create the following codatatype<br>\nand set up the lazy code generator:</p>\n<p>codatatype ('e, 'r) itree = Ret 'r | Tau \"('e, 'r) itree\" | Vis \"'e â‡€ ('e,<br>\n'r) itree\"<br>\ncode_lazy_type itree</p>\n<p>then I create a simple definition</p>\n<p>definition deadlock :: \"('e, 'r) itree\" where \"deadlock = Vis Map.empty\"</p>\n<p>Finally, I try to evaluate this, which invokes the code generator:</p>\n<p>value \"deadlock :: (int, int) itree\"</p>\n<p>This raises an error in the generated code:</p>\n<p>Error: Type ('a, 'b) itree includes a free type variable<br>\nval deadlock : ('a, 'b) itree = Lazy_itree (Lazy.lazy (fn ... =&gt; ...))<br>\nAt (line 155 of \"generated code\")<br>\nError: Type error in function application.<br>\n   Function: term_of_itree typerep_int term_of_int :<br>\n      ('a, inta) itree -&gt; term<br>\n   Argument: deadlock : ('a, 'b) itree<br>\n   Reason: Can't unify inta to 'a (Cannot unify with explicit type variable)</p>\n<p>There seems to be an issue with the polymorphic type of deadlock, which<br>\ncannot be specialised when used in another definition. I attach a minimal<br>\nexample that exhibits this behaviour. I can code generate Haskell for this<br>\nexample (excluding Code_Lazy) without issue. Moreover, if I turn itree into<br>\na datatype (i.e. inductive) and don't use code_lazy_type, the code also<br>\nworks correctly.</p>\n<p>Is there a workaround for this issue?</p>\n<p>Regards,</p>\n<p>Simon.<br>\n<a href=\"/user_uploads/14278/V9WbWT2_Ladrz1VO5RrMW7Y8/Lazy.thy\">Lazy.thy</a></p>",
        "id": 246089420,
        "sender_full_name": "Email Gateway",
        "timestamp": 1626353876
    },
    {
        "content": "<p>From: Andreas Lochbihler &lt;<a href=\"mailto:mail@andreas-lochbihler.de\">mail@andreas-lochbihler.de</a>&gt;<br>\nDear Simon,</p>\n<p>You're running into SML's value restriction, which is independent of codatatypes and <br>\ncode_lazy. See <a href=\"http://users.cis.fiu.edu/~smithg/cop4555/valrestr.html\">http://users.cis.fiu.edu/~smithg/cop4555/valrestr.html</a> for an explanation. <br>\nDeadlock's right-hand side consists of a number of function applications and is therefore <br>\nnot a syntactic ML value. So SML will not treat it as a polymorphic value.</p>\n<p>The standard way around is to introduce a unit closure:</p>\n<p>definition deadlock :: \"unit =&gt; ('e, 'r) itree\" where \"deadlock _ = Vis Map.empty\"</p>\n<p>Then export_code for deadlock results in a <code>fun</code> instead of a <code>val</code> and <code>fun</code> always is a <br>\nsyntactic ML value. If you don't want to clutter your formalization with those unit <br>\nclosures, you can also instruct the code generator's preprocessor to introduce those <br>\nclosures. See the construction of Fail' in CryptHOL.Generative_Probabilistic_Value in the <br>\nAFP for a very similar example:</p>\n<p><a href=\"https://www.isa-afp.org/browser_info/current/AFP/CryptHOL/Generative_Probabilistic_Value.html\">https://www.isa-afp.org/browser_info/current/AFP/CryptHOL/Generative_Probabilistic_Value.html</a></p>\n<p>Hope this helps<br>\nAndreas</p>",
        "id": 246202091,
        "sender_full_name": "Email Gateway",
        "timestamp": 1626427746
    }
]