[
    {
        "content": "<p>From: Christoph Sprenger &lt;<a href=\"mailto:sprenger@inf.ethz.ch\">sprenger@inf.ethz.ch</a>&gt;<br>\nDear all, </p>\n<p>I have run into the following problem with a locale interpretation (thanks to my colleague Joshua Schneider for minimizing a larger example):</p>\n<p>locale test = fixes x :: \"'a list\"<br>\nbegin<br>\ndefinition is_empty :: bool where \"is_empty ⟷ x = []\"<br>\nend</p>\n<p>definition alist :: \"'a ⇒ 'a list\" where \"alist a = [a]\"</p>\n<p>interpretation atest: test \"alist a\" for a :: 'a .</p>\n<p>term \"test.is_empty (alist a)\"           ― ‹@{typ \"bool\"}›<br>\nterm atest.is_empty                         ― ‹@{typ \"'a itself ⇒ 'a ⇒ bool\"}›<br>\nterm \"atest.is_empty TYPE('a)\"       ― ‹@{typ “‘a ⇒ bool”}›</p>\n<p>I would expect atest.is_empty to have type “'a ⇒ bool”. Why do we see the additional parameter of type “‘a itself” here? Also, is there a way to obtain the type I am expecting?</p>\n<p>I am aware that such additional parameters of type “‘a itself” appear in connection with hidden polymorphism, as for example in </p>\n<p>consts f :: \"'a ⇒ 'b\"<br>\ndefinition g :: \"'a ⇒ 'c\" where \"g = f o f\"<br>\nterm g     ― ‹@{typ \"'a itself ⇒ 'b ⇒ 'c”}›</p>\n<p>but I cannot see any hidden polymorphism in the first example above, as the type variable ‘a actually does occur in the second parameter of atest.is_empty. </p>\n<p>Thank you in advance for any help on this!</p>\n<p>Best,<br>\nChristoph</p>",
        "id": 329412203,
        "sender_full_name": "Email Gateway",
        "timestamp": 1677068369
    },
    {
        "content": "<p>From: Florian Haftmann &lt;<a href=\"mailto:florian.haftmann@informatik.tu-muenchen.de\">florian.haftmann@informatik.tu-muenchen.de</a>&gt;<br>\nHi Christoph!</p>\n<p>The hidden polymorphism enters the stage in the definition inside the <br>\nlocale already.</p>\n<p>Although the interpretation eliminates the hidden morphism, the shape of <br>\nthe originating definition determine the shape of definition after <br>\ninterpretation also.</p>\n<p>Hope this helps,<br>\n    Florian</p>\n<p><a href=\"/user_uploads/14278/7B0FZ_onZvP-nyufKATkr83f/OpenPGP_0xA707172232CFA4E9.asc\">OpenPGP_0xA707172232CFA4E9.asc</a><br>\n<a href=\"/user_uploads/14278/9IglmDtihnQa9FyvpMT4v5qh/OpenPGP_signature\">OpenPGP_signature</a></p>",
        "id": 337954490,
        "sender_full_name": "Email Gateway",
        "timestamp": 1677314866
    },
    {
        "content": "<p>From: Joshua Schneider &lt;<a href=\"mailto:dev@jshs.de\">dev@jshs.de</a>&gt;<br>\nHi Florian,</p>\n<p>I don't understand your explanation.</p>\n<p>The constant as defined in the background theory has an explicit <br>\nargument of type \"'a list\", hence there should be no hidden <br>\npolymorphism. The interpretation instantiates the argument with a <br>\ndifferent one, which still contains the type variable.</p>\n<p>My confusion arises because the snippet below does not have or need the <br>\nadditional 'a itself argument.</p>\n<p>context fixes x :: \"'a list\"<br>\nbegin<br>\ndefinition is_empty :: bool where \"is_empty ⟷ x = []\"<br>\nend<br>\ndefinition alist :: \"'a ⇒ 'a list\" where \"alist a = [a]\"<br>\nabbreviation \"atest_is_empty a ≡ is_empty (alist a)\"<br>\nterm atest_is_empty</p>\n<p>Shouldn't this be equivalent to Christoph's example (ignoring the locale <br>\nregistration and instantiated definition theorem)?</p>\n<p>Cheers,<br>\nJoshua</p>",
        "id": 338943762,
        "sender_full_name": "Email Gateway",
        "timestamp": 1677701067
    },
    {
        "content": "<p>From: Florian Haftmann &lt;<a href=\"mailto:florian.haftmann@informatik.tu-muenchen.de\">florian.haftmann@informatik.tu-muenchen.de</a>&gt;<br>\nHi Joshua,</p>\n<blockquote>\n<p>I don't understand your explanation.</p>\n</blockquote>\n<blockquote>\n<blockquote>\n<p>The hidden polymorphism enters the stage in the definition inside the <br>\nlocale already.</p>\n<p>Although the interpretation eliminates the hidden morphism, the shape <br>\nof the originating definition determine the shape of definition after <br>\ninterpretation also.</p>\n</blockquote>\n</blockquote>\n<p>after reconsidering this thread, here follows an attempt of a more <br>\naccurate description.</p>\n<p>Logically, there is no hidden polymorphism.  The additional TYPE('a) <br>\nargument is an artifact of the internal processing of the definition.</p>\n<p>I do not know whether this implementation could be amended easily.</p>\n<blockquote>\n<p>My confusion arises because the snippet below does not have or need the <br>\nadditional 'a itself argument.</p>\n<p>context fixes x :: \"'a list\"<br>\nbegin<br>\ndefinition is_empty :: bool where \"is_empty ⟷ x = []\"<br>\nend<br>\ndefinition alist :: \"'a ⇒ 'a list\" where \"alist a = [a]\"<br>\nabbreviation \"atest_is_empty a ≡ is_empty (alist a)\"<br>\nterm atest_is_empty</p>\n<p>Shouldn't this be equivalent to Christoph's example (ignoring the locale <br>\nregistration and instantiated definition theorem)?</p>\n</blockquote>\n<p>The locale registration is indeed the hot spot where the implementation <br>\nsophistication comes in.  Hence, your example is logically equivalent, <br>\nbut technically far less involved than Christoph’s.</p>\n<p>Cheers,<br>\n    Florian</p>\n<p><a href=\"/user_uploads/14278/S6tFtlk7yo3zQCo5DDSmffYG/OpenPGP_0xA707172232CFA4E9.asc\">OpenPGP_0xA707172232CFA4E9.asc</a><br>\n<a href=\"/user_uploads/14278/JGyG7O8dz2yYELBq5wbiPwQE/OpenPGP_signature\">OpenPGP_signature</a></p>",
        "id": 383245297,
        "sender_full_name": "Email Gateway",
        "timestamp": 1691580893
    }
]