[
    {
        "content": "<p>From: Jaap Boender &lt;<a href=\"mailto:jaapb@kerguelen.org\">jaapb@kerguelen.org</a>&gt;<br>\nHi list,</p>\n<p>I've been playing around with ML and the Cookbook, trying to learn how to <br>\nwrite a definitional package. It's working out reasonably well, but I've got <br>\ntwo problems I'd like to ask for help on:</p>\n<p>1) At some point, I need to create an application of the form \"s t\", where tye <br>\ntypes of both s and t contain type variables. So I can't just get the terms <br>\nand use $, I need to unify the types first. At the moment, I'm doing it like <br>\nfollows (this code is fragile and not very nice, of course, but it's a first <br>\nattempt):</p>\n<p>fun add_is_valid t thy =<br>\nlet<br>\n    val Const (is_valid_c, tiv) = Proof_Context.read_term_pattern @{context} t<br>\n    val (no_wrap_c, Type (\"fun\", [tnw1, tnw2])) = Consts.the_const <br>\n(Proof_Context.consts_of @{context}) @{const_name is_valid_imp_no_wrap}<br>\n    val (tenv, _) = Sign.typ_unify @{theory} (tnw1, tiv) (Vartab.empty, 0)<br>\n    val tnw1' = Envir.norm_type tenv tnw1<br>\n    val tiv' = Envir.norm_type tenv tiv</p>\n<p>and then I can use (Const (no_wrap_c, tnw1' --&gt; tnw2) $ Const (is_valid_c, <br>\ntiv')) for the term I need.<br>\nThis works, but I have the feeling it's needlessly complicated. Is there an <br>\neasier way to do this?</p>\n<p>2) After using Goal.prove to create a proof of the term created above, I'd <br>\nlike to add it to the local theory; currently I'm doing this:</p>\n<p>Local_Theory.note (((<a href=\"http://Binding.name\">Binding.name</a> (t ^ \"_no_wrap\")), []), [nw_proof]) </p>\n<p>which works, but then when I try to find the lemma, it turns out to have the <br>\nname<br>\nis_valid_int_element_record_C_no_wrapkind=factlocal.is_valid_int_element_record_C_no_wrap</p>\n<p>which isn't very useful. What am I doing wrong? The problem also occurs if I <br>\ndo other things, like using the @binding antiquotation.</p>\n<p>(I am still using Isabelle2020, if that makes any difference).</p>\n<p>Thanks in advance for any advice!</p>\n<p>Jaap Boender</p>",
        "id": 229807713,
        "sender_full_name": "Email Gateway",
        "timestamp": 1615448824
    },
    {
        "content": "<p>From: Thomas Sewell &lt;<a href=\"mailto:tals4@cam.ac.uk\">tals4@cam.ac.uk</a>&gt;<br>\nHello.</p>\n<p>In partial answer to 1, yes, that's all a bit complicated. You shouldn't <br>\nneed<br>\nto parse the term and then modify that. If it really is a constant, it's <br>\ntypical<br>\nto construct polymorphic constant applications using something like</p>\n<p>Const (@{const_name myconst}, ty) $ x $ y</p>\n<p>where ty is computed from the types of x and y. There are a lot of <br>\nexamples of<br>\nthis floating around in the sources.</p>\n<p>Erm, your question 2 is simpler, it looks like the string t you're using <br>\nto create<br>\nthe name is the wrong string for this purpose.</p>\n<p>Best regards,<br>\n     Thomas.</p>",
        "id": 230153641,
        "sender_full_name": "Email Gateway",
        "timestamp": 1615631183
    },
    {
        "content": "<p>From: Peter Lammich &lt;<a href=\"mailto:lammich@in.tum.de\">lammich@in.tum.de</a>&gt;<br>\nOn Sat, 2021-03-13 at 10:25 +0000, Thomas Sewell wrote:</p>\n<blockquote>\n<p>Hello.</p>\n<p>In partial answer to 1, yes, that's all a bit complicated. You<br>\nshouldn't <br>\nneed<br>\nto parse the term and then modify that. If it really is a constant,<br>\nit's <br>\ntypical<br>\nto construct polymorphic constant applications using something like</p>\n<p>Const (@{const_name myconst}, ty) $ x $ y</p>\n</blockquote>\n<p>A quite general solution is, e.g., in <br>\n<a href=\"https://www.isa-afp.org/browser_info/current/AFP/Automatic_Refinement/Mk_Term_Antiquot.html\">https://www.isa-afp.org/browser_info/current/AFP/Automatic_Refinement/Mk_Term_Antiquot.html</a></p>\n<p>You basically write @{mk_term \"myconst ?x ?y\"}, where the ?x and ?y<br>\nmust be ML-variables in scope. This will do all type-computation for<br>\nyou, or inform you that it's not possible (for more complex things than<br>\njust function application)</p>\n<p>If there's interest, I'm open for suggestions how to improve on the<br>\nslightly hacky workaround to use schematic variables to map on ML<br>\nidentifiers.</p>",
        "id": 230156004,
        "sender_full_name": "Email Gateway",
        "timestamp": 1615634215
    }
]