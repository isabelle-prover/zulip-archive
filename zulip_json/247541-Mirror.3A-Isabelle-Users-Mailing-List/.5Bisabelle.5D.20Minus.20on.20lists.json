[
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\nLarry recently needed a subtraction function on lists. Of course it is easy to <br>\ndefine, but there are at least two alternatives:</p>\n<p>definition minus_list_set :: \"'a list ⇒ 'a list ⇒ 'a list\" where<br>\n\"minus_list_set xs ys = filter (λx. x ∉ set ys) xs\"</p>\n<p>definition minus_list_mset :: \"'a list ⇒ 'a list ⇒ 'a list\" where<br>\n\"minus_list_mset xs ys = foldr remove1 ys xs\"</p>\n<p>One is geared towards sets, the othe one towards multisets. (Larry remarked that <br>\nthe latter turns lists into a monus = monoid with minus, but we don't use the <br>\nclass system on lists).</p>\n<p>Any comments? Should we have both of them? Names? Notation? Definition vs <br>\nabbreviation (definitions require more thms that are for free with abbrev.)? ...</p>\n<p>Tobias</p>\n<p><a href=\"/user_uploads/14278/v8PfBNEe_ClHv-DJJCzNOu8S/smime.p7s\">smime.p7s</a></p>",
        "id": 521930197,
        "sender_full_name": "Email Gateway",
        "timestamp": 1748937451
    },
    {
        "content": "<p>From: Stepan Holub &lt;<a href=\"mailto:cl-isabelle-users@lists.cam.ac.uk\">cl-isabelle-users@lists.cam.ac.uk</a>&gt;<br>\nI like both, although both are ignoring the non-commutative nature of <br>\nthe subtracted lists and, as Tobias said, they are more about sets <br>\n(therefore it is not clear to me immediately in  what sense we would get <br>\na monus on lists).</p>\n<p>How about the third one geared towards non-commutativity of lists:</p>\n<p>fun minus_list_list :: \"'a list ⇒ 'a list ⇒ 'a list\" where<br>\n\"minus_list_list xs [] = xs\" |<br>\n\"minus_list_list [] ys = []\" |<br>\n\"minus_list_list (x # xs) (y # ys) = (if x = y then minus_list_list xs <br>\nys else x # (minus_list_list xs (y #  ys)))\"</p>\n<p>I believe any of them should be a definition (if introduced), not <br>\nabbreviation. Not sure they deserve a special notation, but that would <br>\ndepend on applications.</p>\n<p>Stepan</p>\n<p>On 03-Jun-25 9:57 AM, Tobias Nipkow wrote:</p>\n<blockquote>\n<p>Larry recently needed a subtraction function on lists. Of course it is <br>\neasy to define, but there are at least two alternatives:</p>\n<p>definition minus_list_set :: \"'a list ⇒ 'a list ⇒ 'a list\" where<br>\n\"minus_list_set xs ys = filter (λx. x ∉ set ys) xs\"</p>\n<p>definition minus_list_mset :: \"'a list ⇒ 'a list ⇒ 'a list\" where<br>\n\"minus_list_mset xs ys = foldr remove1 ys xs\"</p>\n<p>One is geared towards sets, the othe one towards multisets. (Larry <br>\nremarked that the latter turns lists into a monus = monoid with minus, <br>\nbut we don't use the class system on lists).</p>\n<p>Any comments? Should we have both of them? Names? Notation? Definition <br>\nvs abbreviation (definitions require more thms that are for free with <br>\nabbrev.)? ...</p>\n<p>Tobias</p>\n</blockquote>",
        "id": 522198765,
        "sender_full_name": "Email Gateway",
        "timestamp": 1748978163
    },
    {
        "content": "<p>From: 山田晃久 &lt;<a href=\"mailto:cl-isabelle-users@lists.cam.ac.uk\">cl-isabelle-users@lists.cam.ac.uk</a>&gt;<br>\nHello,</p>\n<p>I'd like to remark that minus_list_mset x y and minus_list_list x y are left divisors y\\x rather than right x/y for @, in the sense</p>\n<ul>\n<li>x = y@(y\\x) if y is a prefix of x, and</li>\n<li>x = y\\(y@x).</li>\n</ul>\n<p>In this sense, the arguments may be flipped. Then minus_list_mset  would just be \"foldr remove1\" for which an abbreviation would suffice.<br>\n(of course, I do not propose \\ as notation.)</p>\n<p>For naming, I'd propose something related to (left) factors. \"minus\" would be confusing when one sees strings as regular expressions.</p>\n<p>Best,<br>\nAkihisa</p>\n<hr>\n<p>From: <a href=\"mailto:cl-isabelle-users-request@lists.cam.ac.uk\">cl-isabelle-users-request@lists.cam.ac.uk</a> &lt;<a href=\"mailto:cl-isabelle-users-request@lists.cam.ac.uk\">cl-isabelle-users-request@lists.cam.ac.uk</a>&gt; on behalf of Stepan Holub &lt;<a href=\"mailto:cl-isabelle-users@lists.cam.ac.uk\">cl-isabelle-users@lists.cam.ac.uk</a>&gt;<br>\nSent: Wednesday, June 4, 2025 4:15<br>\nTo: <a href=\"mailto:cl-isabelle-users@lists.cam.ac.uk\">cl-isabelle-users@lists.cam.ac.uk</a> &lt;<a href=\"mailto:cl-isabelle-users@lists.cam.ac.uk\">cl-isabelle-users@lists.cam.ac.uk</a>&gt;<br>\nSubject: Re: [isabelle] Minus on lists</p>\n<p>I like both, although both are ignoring the non-commutative nature of<br>\nthe subtracted lists and, as Tobias said, they are more about sets<br>\n(therefore it is not clear to me immediately in  what sense we would get<br>\na monus on lists).</p>\n<p>How about the third one geared towards non-commutativity of lists:</p>\n<p>fun minus_list_list :: \"'a list ⇒ 'a list ⇒ 'a list\" where<br>\n\"minus_list_list xs [] = xs\" |<br>\n\"minus_list_list [] ys = []\" |<br>\n\"minus_list_list (x # xs) (y # ys) = (if x = y then minus_list_list xs<br>\nys else x # (minus_list_list xs (y #  ys)))\"</p>\n<p>I believe any of them should be a definition (if introduced), not<br>\nabbreviation. Not sure they deserve a special notation, but that would<br>\ndepend on applications.</p>\n<p>Stepan</p>\n<p>On 03-Jun-25 9:57 AM, Tobias Nipkow wrote:</p>\n<blockquote>\n<p>Larry recently needed a subtraction function on lists. Of course it is<br>\neasy to define, but there are at least two alternatives:</p>\n<p>definition minus_list_set :: \"'a list ⇒ 'a list ⇒ 'a list\" where<br>\n\"minus_list_set xs ys = filter (λx. x ∉ set ys) xs\"</p>\n<p>definition minus_list_mset :: \"'a list ⇒ 'a list ⇒ 'a list\" where<br>\n\"minus_list_mset xs ys = foldr remove1 ys xs\"</p>\n<p>One is geared towards sets, the othe one towards multisets. (Larry<br>\nremarked that the latter turns lists into a monus = monoid with minus,<br>\nbut we don't use the class system on lists).</p>\n<p>Any comments? Should we have both of them? Names? Notation? Definition<br>\nvs abbreviation (definitions require more thms that are for free with<br>\nabbrev.)? ...</p>\n<p>Tobias</p>\n</blockquote>",
        "id": 522311539,
        "sender_full_name": "Email Gateway",
        "timestamp": 1749029776
    },
    {
        "content": "<p>From: Florian Haftmann &lt;<a href=\"mailto:florian.haftmann@cit.tum.de\">florian.haftmann@cit.tum.de</a>&gt;<br>\nAm 03.06.25 um 09:57 schrieb Tobias Nipkow:</p>\n<blockquote>\n<p>Larry recently needed a subtraction function on lists. Of course it is <br>\neasy to define, but there are at least two alternatives:</p>\n<p>definition minus_list_set :: \"'a list ⇒ 'a list ⇒ 'a list\" where<br>\n\"minus_list_set xs ys = filter (λx. x ∉ set ys) xs\"</p>\n<p>definition minus_list_mset :: \"'a list ⇒ 'a list ⇒ 'a list\" where<br>\n\"minus_list_mset xs ys = foldr remove1 ys xs\"</p>\n</blockquote>\n<p>Just two further remarks:</p>\n<ul>\n<li>\n<p>In Isabelle/ML, there is a counterpart to minus_list_set names <br>\nsubtract <br>\n<a href=\"https://isabelle.sketis.net/repos/isabelle/file/tip/src/Pure/library.ML#l179\">https://isabelle.sketis.net/repos/isabelle/file/tip/src/Pure/library.ML#l179</a></p>\n</li>\n<li>\n<p>I don’t know the envisaged application, but it can also be defined as <br>\nsymmetric difference:</p>\n</li>\n</ul>\n<p>definition symmetric_remove1 :: ‹'a ⇒ 'a list ⇒ 'a list›<br>\n   where ‹symmetric_remove1 x xs =<br>\n     (if x \\&lt;in&gt; set xs then remove1 x xs else x # xs)›</p>\n<p>definition symmetric_subtract :: ‹'a list ⇒ 'a list ⇒ 'a list›<br>\n   where ‹symmetric_subtract = foldr symmetric_remove1›</p>\n<p>value ‹symmetric_subtract [2, 3, 4, 3] [1, 2, 3, 2, 1 :: int]›</p>\n<p>Florian</p>\n<p><a href=\"/user_uploads/14278/Z90FTTODCeOzbvVoYz0dqTyF/OpenPGP_0xA707172232CFA4E9.asc\">OpenPGP_0xA707172232CFA4E9.asc</a><br>\n<a href=\"/user_uploads/14278/nNE4qfbYlkTSHld7g5uBQAFB/OpenPGP_signature.asc\">OpenPGP_signature.asc</a></p>",
        "id": 522440082,
        "sender_full_name": "Email Gateway",
        "timestamp": 1749066988
    },
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\nStepan,</p>\n<p>Do you have some application of minus_list_list in mind or was it more for <br>\ncompleteness?</p>\n<p>Tobias</p>\n<p>On 03/06/2025 21:15, Stepan Holub (via cl-isabelle-users Mailing List) wrote:</p>\n<blockquote>\n<p>I like both, although both are ignoring the non-commutative nature of the <br>\nsubtracted lists and, as Tobias said, they are more about sets (therefore it is <br>\nnot clear to me immediately in  what sense we would get a monus on lists).</p>\n<p>How about the third one geared towards non-commutativity of lists:</p>\n<p>fun minus_list_list :: \"'a list ⇒ 'a list ⇒ 'a list\" where<br>\n\"minus_list_list xs [] = xs\" |<br>\n\"minus_list_list [] ys = []\" |<br>\n\"minus_list_list (x # xs) (y # ys) = (if x = y then minus_list_list xs ys else x </p>\n<h1>(minus_list_list xs (y #  ys)))\"</h1>\n<p>I believe any of them should be a definition (if introduced), not abbreviation. <br>\nNot sure they deserve a special notation, but that would depend on applications.</p>\n<p>Stepan</p>\n<p>On 03-Jun-25 9:57 AM, Tobias Nipkow wrote:</p>\n<blockquote>\n<p>Larry recently needed a subtraction function on lists. Of course it is easy to <br>\ndefine, but there are at least two alternatives:</p>\n<p>definition minus_list_set :: \"'a list ⇒ 'a list ⇒ 'a list\" where<br>\n\"minus_list_set xs ys = filter (λx. x ∉ set ys) xs\"</p>\n<p>definition minus_list_mset :: \"'a list ⇒ 'a list ⇒ 'a list\" where<br>\n\"minus_list_mset xs ys = foldr remove1 ys xs\"</p>\n<p>One is geared towards sets, the othe one towards multisets. (Larry remarked <br>\nthat the latter turns lists into a monus = monoid with minus, but we don't use <br>\nthe class system on lists).</p>\n<p>Any comments? Should we have both of them? Names? Notation? Definition vs <br>\nabbreviation (definitions require more thms that are for free with abbrev.)? ...</p>\n<p>Tobias</p>\n</blockquote>\n</blockquote>\n<p><a href=\"/user_uploads/14278/btulyeeq1k2HC0F1Lo8moItd/smime.p7s\">smime.p7s</a></p>",
        "id": 522704334,
        "sender_full_name": "Email Gateway",
        "timestamp": 1749185765
    },
    {
        "content": "<p>From: Stepan Holub &lt;<a href=\"mailto:cl-isabelle-users@lists.cam.ac.uk\">cl-isabelle-users@lists.cam.ac.uk</a>&gt;<br>\nI have no direct application in mind. My motivation:</p>\n<ul>\n<li>\n<p>it occurred to me as the most natural meaning of \"minus on lists\" <br>\n(/qua /lists)</p>\n</li>\n<li>\n<p>it is closely related to the ordering \"(scattered) subword\": x - y <br>\nthen means \"remove the first scattered occurrence of (a prefix of) y from x\"<br>\nThat ordering, needless to say, is important, see for example<br>\n<a href=\"https://link.springer.com/chapter/10.1007/978-3-540-85780-8_38\">https://link.springer.com/chapter/10.1007/978-3-540-85780-8_38</a></p>\n</li>\n</ul>\n<p>Stepan</p>\n<p>On 06-Jun-25 6:55 AM, Tobias Nipkow wrote:</p>\n<blockquote>\n<p>Stepan,</p>\n<p>Do you have some application of minus_list_list in mind or was it more <br>\nfor completeness?</p>\n<p>Tobias</p>\n<p>On 03/06/2025 21:15, Stepan Holub (via cl-isabelle-users Mailing List) <br>\nwrote:</p>\n<blockquote>\n<p>I like both, although both are ignoring the non-commutative nature of <br>\nthe subtracted lists and, as Tobias said, they are more about sets <br>\n(therefore it is not clear to me immediately in  what sense we would <br>\nget a monus on lists).</p>\n<p>How about the third one geared towards non-commutativity of lists:</p>\n<p>fun minus_list_list :: \"'a list ⇒ 'a list ⇒ 'a list\" where<br>\n\"minus_list_list xs [] = xs\" |<br>\n\"minus_list_list [] ys = []\" |<br>\n\"minus_list_list (x # xs) (y # ys) = (if x = y then minus_list_list <br>\nxs ys else x # (minus_list_list xs (y #  ys)))\"</p>\n<p>I believe any of them should be a definition (if introduced), not <br>\nabbreviation. Not sure they deserve a special notation, but that <br>\nwould depend on applications.</p>\n<p>Stepan</p>\n<p>On 03-Jun-25 9:57 AM, Tobias Nipkow wrote:</p>\n<blockquote>\n<p>Larry recently needed a subtraction function on lists. Of course it <br>\nis easy to define, but there are at least two alternatives:</p>\n<p>definition minus_list_set :: \"'a list ⇒ 'a list ⇒ 'a list\" where<br>\n\"minus_list_set xs ys = filter (λx. x ∉ set ys) xs\"</p>\n<p>definition minus_list_mset :: \"'a list ⇒ 'a list ⇒ 'a list\" where<br>\n\"minus_list_mset xs ys = foldr remove1 ys xs\"</p>\n<p>One is geared towards sets, the othe one towards multisets. (Larry <br>\nremarked that the latter turns lists into a monus = monoid with <br>\nminus, but we don't use the class system on lists).</p>\n<p>Any comments? Should we have both of them? Names? Notation? <br>\nDefinition vs abbreviation (definitions require more thms that are <br>\nfor free with abbrev.)? ...</p>\n<p>Tobias</p>\n</blockquote>\n</blockquote>\n</blockquote>",
        "id": 522708293,
        "sender_full_name": "Email Gateway",
        "timestamp": 1749188863
    },
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\nI have now added</p>\n<p>definition minus_list_mset :: \"'a list ⇒ 'a list ⇒ 'a list\" where<br>\n\"minus_list_mset xs ys = foldr remove1 ys xs\"</p>\n<p>definition minus_list_set :: \"'a list ⇒ 'a list ⇒ 'a list\" where<br>\n\"minus_list_set xs ys = foldr removeAll ys xs\"</p>\n<p>(and supporting lemmas) to theory List. I have also located a few theories in <br>\nthe AFP that defined their own versions of the above and replaced the local <br>\nversions. [Fabian's flexible search tool <a href=\"https://search.isabelle.in.tum.de/\">https://search.isabelle.in.tum.de/</a> was <br>\nvery helpful here.]</p>\n<p>Enjoy.</p>\n<p>Tobias</p>\n<p>On 03/06/2025 09:57, Tobias Nipkow wrote:</p>\n<blockquote>\n<p>Larry recently needed a subtraction function on lists. Of course it is easy to <br>\ndefine, but there are at least two alternatives:</p>\n<p>definition minus_list_set :: \"'a list ⇒ 'a list ⇒ 'a list\" where<br>\n\"minus_list_set xs ys = filter (λx. x ∉ set ys) xs\"</p>\n<p>definition minus_list_mset :: \"'a list ⇒ 'a list ⇒ 'a list\" where<br>\n\"minus_list_mset xs ys = foldr remove1 ys xs\"</p>\n<p>One is geared towards sets, the othe one towards multisets. (Larry remarked that <br>\nthe latter turns lists into a monus = monoid with minus, but we don't use the <br>\nclass system on lists).</p>\n<p>Any comments? Should we have both of them? Names? Notation? Definition vs <br>\nabbreviation (definitions require more thms that are for free with abbrev.)? ...</p>\n<p>Tobias</p>\n</blockquote>\n<p><a href=\"/user_uploads/14278/xOKSg2I7SyQ_-QldqcnTjwIK/smime.p7s\">smime.p7s</a></p>",
        "id": 524064883,
        "sender_full_name": "Email Gateway",
        "timestamp": 1749907390
    }
]