[
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\nThis is what I defined locally:</p>\n<p>definition hom :: ‹('a list ⇒ 'b list) ⇒ bool› where<br>\n‹hom h = ((∀a b. h (a @ b) = (h a) @ h b) ∧ h [] = [])›</p>\n<p>Maybe it exists already? Maybe as part of the monoid class? I couldn't find <br>\nanything. Maybe it should be added to theory List (named hom_list)?</p>\n<p>Tobias</p>\n<p><a href=\"/user_uploads/14278/eT-gAtlE4pvT6riWfx9V0AcT/smime.p7s\">smime.p7s</a></p>",
        "id": 521035662,
        "sender_full_name": "Email Gateway",
        "timestamp": 1748503406
    },
    {
        "content": "<p>From: Stepan Holub &lt;<a href=\"mailto:cl-isabelle-users@lists.cam.ac.uk\">cl-isabelle-users@lists.cam.ac.uk</a>&gt;<br>\nI have this:</p>\n<p><a href=\"https://www.isa-afp.org/sessions/combinatorics_words/#Morphisms\">https://www.isa-afp.org/sessions/combinatorics_words/#Morphisms</a></p>\n<p>Note, for example, that the empty to empty is a consequence.</p>\n<p>Stepan</p>\n<p>On 5/29/2025 9:23 AM, Tobias Nipkow wrote:</p>\n<blockquote>\n<p>This is what I defined locally:</p>\n<p>definition hom :: ‹('a list ⇒ 'b list) ⇒ bool› where<br>\n‹hom h = ((∀a b. h (a @ b) = (h a) @ h b) ∧ h [] = [])›</p>\n<p>Maybe it exists already? Maybe as part of the monoid class? I couldn't <br>\nfind anything. Maybe it should be added to theory List (named hom_list)?</p>\n<p>Tobias</p>\n</blockquote>",
        "id": 521085253,
        "sender_full_name": "Email Gateway",
        "timestamp": 1748521893
    },
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\nThank you Stepan,</p>\n<p>The first place I looked was your AFP entry, but I made the mistake of grepping <br>\nfor \"hom\", not \"morphism\" ;-)</p>\n<p>Tobias</p>\n<p>On 29/05/2025 14:31, Stepan Holub (via cl-isabelle-users Mailing List) wrote:</p>\n<blockquote>\n<p>I have this:</p>\n<p><a href=\"https://www.isa-afp.org/sessions/combinatorics_words/#Morphisms\">https://www.isa-afp.org/sessions/combinatorics_words/#Morphisms</a></p>\n<p>Note, for example, that the empty to empty is a consequence.</p>\n<p>Stepan</p>\n<p>On 5/29/2025 9:23 AM, Tobias Nipkow wrote:</p>\n<blockquote>\n<p>This is what I defined locally:</p>\n<p>definition hom :: ‹('a list ⇒ 'b list) ⇒ bool› where<br>\n‹hom h = ((∀a b. h (a @ b) = (h a) @ h b) ∧ h [] = [])›</p>\n<p>Maybe it exists already? Maybe as part of the monoid class? I couldn't find <br>\nanything. Maybe it should be added to theory List (named hom_list)?</p>\n<p>Tobias</p>\n</blockquote>\n</blockquote>\n<p><a href=\"/user_uploads/14278/RHqMuVNn_4fQYf0_Gay2AxLZ/smime.p7s\">smime.p7s</a></p>",
        "id": 521105428,
        "sender_full_name": "Email Gateway",
        "timestamp": 1748528741
    },
    {
        "content": "<p>From: Stepan Holub &lt;<a href=\"mailto:cl-isabelle-users@lists.cam.ac.uk\">cl-isabelle-users@lists.cam.ac.uk</a>&gt;<br>\nNot sure why, but the term \"morphism\" is canonical in combinatorics on <br>\nwords, see<br>\n<a href=\"https://link.springer.com/chapter/10.1007/978-3-642-59136-5_7\">https://link.springer.com/chapter/10.1007/978-3-642-59136-5_7</a><br>\nfor example.</p>\n<p>Stepan</p>\n<p>On 29-May-25 4:25 PM, Tobias Nipkow wrote:</p>\n<blockquote>\n<p>Thank you Stepan,</p>\n<p>The first place I looked was your AFP entry, but I made the mistake of <br>\ngrepping for \"hom\", not \"morphism\" ;-)</p>\n<p>Tobias</p>\n<p>On 29/05/2025 14:31, Stepan Holub (via cl-isabelle-users Mailing List) <br>\nwrote:</p>\n<blockquote>\n<p>I have this:</p>\n<p><a href=\"https://www.isa-afp.org/sessions/combinatorics_words/#Morphisms\">https://www.isa-afp.org/sessions/combinatorics_words/#Morphisms</a></p>\n<p>Note, for example, that the empty to empty is a consequence.</p>\n<p>Stepan</p>\n<p>On 5/29/2025 9:23 AM, Tobias Nipkow wrote:</p>\n<blockquote>\n<p>This is what I defined locally:</p>\n<p>definition hom :: ‹('a list ⇒ 'b list) ⇒ bool› where<br>\n‹hom h = ((∀a b. h (a @ b) = (h a) @ h b) ∧ h [] = [])›</p>\n<p>Maybe it exists already? Maybe as part of the monoid class? I <br>\ncouldn't find anything. Maybe it should be added to theory List <br>\n(named hom_list)?</p>\n<p>Tobias</p>\n</blockquote>\n</blockquote>\n</blockquote>",
        "id": 521124445,
        "sender_full_name": "Email Gateway",
        "timestamp": 1748534623
    }
]