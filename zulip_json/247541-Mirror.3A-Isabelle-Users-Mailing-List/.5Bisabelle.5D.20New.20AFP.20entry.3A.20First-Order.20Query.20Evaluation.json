[
    {
        "content": "<p>From: Andreas Lochbihler &lt;<a href=\"mailto:mail@andreas-lochbihler.de\">mail@andreas-lochbihler.de</a>&gt;<br>\nI'm happy to announce another AFP entry by Martin Raszyk: First-Order Query Evaluation</p>\n<p>Abstract:<br>\nWe formalize first-order query evaluation over an infinite domain with equality. We first <br>\ndefine the syntax and semantics of first-order logic with equality. Next we define a <br>\nlocale eval_fo abstracting a representation of a potentially infinite set of tuples <br>\nsatisfying a first-order query over finite relations. Inside the locale, we define a <br>\nfunction eval checking if the set of tuples satisfying a first-order query over a database <br>\n(an interpretation of the query's predicates) is finite (i.e., deciding relative safety) <br>\nand computing the set of satisfying tuples if it is finite. Altogether the function eval <br>\nsolves capturability (Avron and Hirshfeld, 1991) of first-order logic with equality. We <br>\nalso use the function eval to prove a code equation for the semantics of first-order <br>\nlogic, i.e., the function checking if a first-order query over a database is satisfied by <br>\na variable assignment.<br>\nWe provide an interpretation of the locale eval_fo based on the approach by Ailamazyan et <br>\nal. A core notion in the interpretation is the active domain of a query and a database <br>\nthat contains all domain elements that occur in the database or interpret the query's <br>\nconstants. We prove the main theorem of Ailamazyan et al. relating the satisfaction of a <br>\nfirst-order query over an infinite domain to the satisfaction of this query over a finite <br>\ndomain consisting of the active domain and a few additional domain elements (outside the <br>\nactive domain) whose number only depends on the query. In our interpretation of the locale <br>\neval_fo, we use a potentially higher number of the additional domain elements, but their <br>\nnumber still only depends on the query and thus has no effect on the data complexity <br>\n(Vardi, 1982) of query evaluation. Our interpretation yields an executable function eval. <br>\nThe time complexity of eval on a query is linear in the total number of tuples in the <br>\nintermediate relations for the subqueries. Specifically, we build a database index to <br>\nevaluate a conjunction. We also optimize the case of a negated subquery in a conjunction. <br>\nFinally, we export code for the infinite domain of natural numbers.</p>\n<p>You find it online at <a href=\"https://www.isa-afp.org/entries/Eval_FO.html\">https://www.isa-afp.org/entries/Eval_FO.html</a>.</p>\n<p>Andreas</p>",
        "id": 272647584,
        "sender_full_name": "Email Gateway",
        "timestamp": 1645425911
    }
]