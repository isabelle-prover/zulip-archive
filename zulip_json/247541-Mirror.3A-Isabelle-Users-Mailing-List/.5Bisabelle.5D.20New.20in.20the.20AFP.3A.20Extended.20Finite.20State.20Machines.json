[
    {
        "content": "<p>From: \"Thiemann, René\" &lt;<a href=\"mailto:Rene.Thiemann@uibk.ac.at\">Rene.Thiemann@uibk.ac.at</a>&gt;<br>\nDear all,</p>\n<p>I’m happy to announce two AFP entries on extended finite state machines<br>\nby Michael Foster, Achim D. Brucker, Ramsay G. Taylor and John Derrick.</p>\n<p>Enjoy,<br>\nRené</p>\n<p>A Formal Model of Extended Finite State Machines</p>\n<p>In this AFP entry, we provide a formalisation of extended finite state machines<br>\n(EFSMs) where models are represented as finite sets of transitions between<br>\nstates. EFSMs execute traces to produce observable outputs. We also define<br>\nvarious simulation and equality metrics for EFSMs in terms of traces and prove<br>\ntheir strengths in relation to each other. Another key contribution is a<br>\nframework of function definitions such that LTL properties can be phrased over<br>\nEFSMs. Finally, we provide a simple example case study in the form of a drinks<br>\nmachine.</p>\n<p><a href=\"https://www.isa-afp.org/entries/Extended_Finite_State_Machines.html\">https://www.isa-afp.org/entries/Extended_Finite_State_Machines.html</a></p>\n<p>Inference of Extended Finite State Machines</p>\n<p>In this AFP entry, we provide a formal implementation of a state-merging<br>\ntechnique to infer extended finite state machines (EFSMs), complete with output<br>\nand update functions, from black-box traces. In particular, we define the<br>\nsubsumption in context relation as a means of determining whether one transition<br>\nis able to account for the behaviour of another. Building on this, we define the<br>\ndirect subsumption relation, which lifts the subsumption in context relation to<br>\nEFSM level such that we can use it to determine whether it is safe to merge a<br>\ngiven pair of transitions. Key proofs include the conditions necessary for<br>\nsubsumption to occur and that subsumption and direct subsumption are preorder<br>\nrelations. We also provide a number of different heuristics which can be used to<br>\nabstract away concrete values into registers so that more states and transitions<br>\ncan be merged and provide proofs of the various conditions which must hold for<br>\nthese abstractions to subsume their ungeneralised counterparts. A Code Generator<br>\nsetup to create executable Scala code is also defined.</p>\n<p><a href=\"https://www.isa-afp.org/entries/Extended_Finite_State_Machine_Inference.html\">https://www.isa-afp.org/entries/Extended_Finite_State_Machine_Inference.html</a><br>\n<a href=\"/user_uploads/14278/k6N9EhkhiLawFkm1d_Emxhm4/signature.asc\">signature.asc</a></p>",
        "id": 210600137,
        "sender_full_name": "Email Gateway",
        "timestamp": 1600496541
    }
]