[
    {
        "content": "<p>From: Andreas Lochbihler &lt;<a href=\"mailto:mail@andreas-lochbihler.de\">mail@andreas-lochbihler.de</a>&gt;<br>\nIsabelle/Solidity: A Deep Embedding of Solidity in Isabelle/HOL<br>\nDiego Marmsoler and Achim D. Brucker</p>\n<p>Smart contracts are automatically executed programs, usually representing legal agreements <br>\nsuch as financial transactions. Thus, bugs in smart contracts can lead to large financial <br>\nlosses. For example, an incorrectly initialized contract was the root cause of the Parity <br>\nWallet bug that saw $280M worth of Ether destroyed. Ether is the cryptocurrency of the <br>\nEthereum blockchain that uses Solidity for expressing smart contracts. We address this <br>\nproblem by formalizing an executable denotational semantics for Solidity in the <br>\ninteractive theorem prover Isabelle/HOL. This formal semantics builds the foundation of an <br>\ninteractive program verification environment for Solidity programs and allows for <br>\ninspecting them by (symbolic) execution. We combine the latter with grammar based fuzzing <br>\nto ensure that our formal semantics complies to the Solidity implementation on the <br>\nEthereum Blockchain. Finally, we demonstrate the formal verification of Solidity programs <br>\nby two examples: constant folding and a simple verified token.</p>\n<p><a href=\"https://www.isa-afp.org/entries/Solidity.html\">https://www.isa-afp.org/entries/Solidity.html</a></p>\n<p>Enjoy!</p>",
        "id": 293169464,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660328973
    }
]