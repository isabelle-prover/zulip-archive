[
    {
        "content": "<p>From: Dmitriy Traytel &lt;<a href=\"mailto:traytel@di.ku.dk\">traytel@di.ku.dk</a>&gt;<br>\nHi all,</p>\n<p>We have a new AFP entry in the Tools category, which constitutes a substantial extension to our favorite rule/erule/drule repertoire (and more):</p>\n<p>Unification Utilities for Isabelle/ML<br>\nby Kevin Kappelmann</p>\n<p>Abstract:</p>\n<p>This article provides various unification utilities for Isabelle/ML, most prominently:</p>\n<ol>\n<li>First-order and higher-order pattern E-unification and E-matching. While unifiers in Isabelle/ML only consider the alpha-beta-eta-equational theory of the lambda-calculus, unifiers in this article may take an extra background theory, in the form of an equational prover, into account. For example, the unification problem \"n+1 == ?m + Suc 0\" may be solved by providing a prover for the background theory \"!n. n+1 == n + Suc 0\".</li>\n<li>Tactics, methods, and attributes with adjustable unifiers (e.g. resolution, fact, assumption, OF).</li>\n<li>A generalisation of unification hints. Unification hints are a flexible extension for unifiers. Among other things, they can be used for reflective tactics, to provide canonical unification instances, or to simply strengthen the background theory of a unifier in a controlled manner.</li>\n<li>Simplifier integration for e-unifiers.</li>\n<li>Practical combinations of unification algorithms, e.g. a combination of first-order and higher-order pattern unification.</li>\n<li>A hierarchical logger for Isabelle/ML, including per logger configurations with log levels, output channels, message filters.</li>\n</ol>\n<p>While this entry works with every object logic, some extra setup for Isabelle/HOL and application examples are provided. All unifiers are tested with SpecCheck.</p>\n<p><a href=\"https://www.isa-afp.org/entries/ML_Unification.html\">https://www.isa-afp.org/entries/ML_Unification.html</a></p>\n<p>Good entry points are the example theories:</p>\n<p><a href=\"https://www.isa-afp.org/theories/ml_unification/#E_Unification_Examples\">https://www.isa-afp.org/theories/ml_unification/#E_Unification_Examples</a><br>\n<a href=\"https://www.isa-afp.org/theories/ml_unification/#Unification_Hints_Reification_Examples\">https://www.isa-afp.org/theories/ml_unification/#Unification_Hints_Reification_Examples</a></p>\n<p>Enjoy!<br>\nDmitriy</p>",
        "id": 394872186,
        "sender_full_name": "Email Gateway",
        "timestamp": 1696435306
    },
    {
        "content": "<p>From: Lawrence Paulson &lt;<a href=\"mailto:lp15@cam.ac.uk\">lp15@cam.ac.uk</a>&gt;<br>\nThis looks like fun! But I hope there is a paper explaining the ideas.</p>\n<p>Larry</p>",
        "id": 395017106,
        "sender_full_name": "Email Gateway",
        "timestamp": 1696503941
    },
    {
        "content": "<p>From: Kevin Kappelmann &lt;<a href=\"mailto:kevin.kappelmann@tum.de\">kevin.kappelmann@tum.de</a>&gt;<br>\nI am afraid, I do not have time to publish anything on this matter at <br>\npresent. But much of it can be understood as a generalisation of <br>\nunification hints, introduced by Asperti et al. in \"Hints in <br>\nUnification\" (TPHOLs 2009):<br>\n<a href=\"https://link.springer.com/chapter/10.1007/978-3-642-03359-9_8\">https://link.springer.com/chapter/10.1007/978-3-642-03359-9_8</a></p>\n<p>And of course, I am happy to help people that are interested in using <br>\nparts of this entry.</p>\n<p>Kevin</p>",
        "id": 395854610,
        "sender_full_name": "Email Gateway",
        "timestamp": 1696934566
    }
]