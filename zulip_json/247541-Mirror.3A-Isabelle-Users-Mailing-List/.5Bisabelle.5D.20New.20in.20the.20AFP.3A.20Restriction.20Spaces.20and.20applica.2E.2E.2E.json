[
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\nRestriction Spaces: a Fixed-Point Theory<br>\nBenoît Ballenghien, Benjamin Puyobro and Burkhart Wolff</p>\n<p>Fixed-point constructions are fundamental to defining recursive and co-recursive <br>\nfunctions. However, a general axiom Y f = f(Y f) leads to inconsistency, and <br>\ndefinitions must therefore be based on theories guaranteeing existence under <br>\nsuitable conditions. In Isabelle/HOL, these constructions are typically based on <br>\nsets, well-founded orders or domain-theoretic models such as for example HOLCF. <br>\nIn this submission we introduce a formalization of restriction spaces i.e. <br>\nspaces equipped with a so-called restriction, satifying three properties ....<br>\nThey turn out to be cartesian closed and admit natural notions of <br>\nconstructiveness and completeness, enabling the definition of a fixed-point <br>\noperator under verifiable side-conditions. This is achieved in our entry, from <br>\ntopological definitions to induction principles. Additionally, we configure the <br>\nsimplifier so that it can automatically solve both constructiveness and <br>\nadmissibility subgoals, as long as users write higher-order rules for their <br>\noperators. Since our implementation relies on axiomatic type classes, the <br>\nresulting library is a fully abstract, flexible and reusable framework.</p>\n<p><a href=\"https://www.isa-afp.org/entries/Restriction_Spaces.html\">https://www.isa-afp.org/entries/Restriction_Spaces.html</a></p>\n<hr>\n<p>Examples of Restriction Spaces<br>\nBenoît Ballenghien, Benjamin Puyobro and Burkhart Wolff</p>\n<p>In this session, a number of examples are provided to illustrate how the <br>\nRestriction_Spaces library works. The simple cases are, of course, covered: <br>\ntrivial restriction, booleans, integers, option type, and so on. But we also <br>\nexplore more elaborate constructions, such as formal power series and a trace <br>\nmodel of the CSP process algebra. Additionally, we provide a lightweight <br>\nintegration with HOLCF, equipping restriction spaces with the inherited partial <br>\norder structure when needed.</p>\n<p><a href=\"https://www.isa-afp.org/entries/Restriction_Spaces-Examples.html\">https://www.isa-afp.org/entries/Restriction_Spaces-Examples.html</a></p>\n<hr>\n<p>Ultrametric Structure for Restriction Spaces<br>\nBenoît Ballenghien, Benjamin Puyobro and Burkhart Wolff</p>\n<p>In this entry, we explore the relationship between restriction spaces and usual <br>\nmetric structures by instantiating the former as ultrametric spaces. This is <br>\nclassically captured by defining the distance as<br>\nbut we actually generalize this perspective by introducing a hierarchy of <br>\nincreasingly refined type classes to systematically relate ultrametric and <br>\nrestriction-based notions. This layered approach enables a precise comparison of <br>\nstructural and topological properties. In the end, our main result establishes <br>\nthat completeness in the sense of restriction spaces coincides with standard <br>\nmetric completeness, thus bridging the gap between our framework and Banach's <br>\nfixed-point theorem established in HOL-Analysis.</p>\n<p><a href=\"https://www.isa-afp.org/entries/Restriction_Spaces-Ultrametric.html\">https://www.isa-afp.org/entries/Restriction_Spaces-Ultrametric.html</a></p>\n<hr>\n<p>CSP Semantics over Restriction Spaces<br>\nBenoît Ballenghien and Burkhart Wolff</p>\n<p>We use the Restriction_Spaces library as a semantic foundation for the process <br>\nalgebra framework HOL-CSP, offering a complementary backend to the existing <br>\nHOLCF infrastructure. The type of processes is instantiated as a restriction <br>\nspace, and we prove that it is complete in this setting. This enables the <br>\nconstruction of fixed points for recursive process definitions without having to <br>\nrely exclusively on a pointed complete partial order. Notably, some operators <br>\nare constructive without being Scott-continuous, and vice versa, illustrating <br>\nthe genuine complementarity between the two approaches. We also show that key <br>\nCSP operators are either constructive or non-destructive, and verify the <br>\nadmissibility of several predicates, thereby supporting automated reasoning over <br>\nrecursive specifications.</p>\n<p><a href=\"https://www.isa-afp.org/entries/HOL-CSP_RS.html\">https://www.isa-afp.org/entries/HOL-CSP_RS.html</a></p>\n<p>Enjoy them all!</p>\n<p><a href=\"/user_uploads/14278/KFDAN5bBBHd9t9ZeGxUbXpX3/smime.p7s\">smime.p7s</a></p>",
        "id": 521782907,
        "sender_full_name": "Email Gateway",
        "timestamp": 1748879652
    }
]