[
    {
        "content": "<p>From: Sander van Rijnswou &lt;<a href=\"mailto:svanrijnswou@gmail.com\">svanrijnswou@gmail.com</a>&gt;<br>\nHi,</p>\n<p>I ran into a case where Nitpick finds a counterexample to a true lemma. The<br>\nproof checks out, so apparently I can't use Nitpick in this situation? I<br>\ndon't understand why though. This was posted earlier on Zulip, but it was<br>\nsuggested to repost here.</p>\n<p>Thanks for your comments,</p>\n<p>lemma<br>\n  fixes   a b:: int<br>\n  assumes \"b≠0\"<br>\n  shows \"rat_of_int a  * (Fract 1 b) = (Fract  a b)\"<br>\n    (* nitpick finds a counterexample; sometimes a=0, b=3 sometimes a=2,<br>\nb=2*)<br>\n    nitpick<br>\n    (* sledgehammer finds a proof *)<br>\n    by (metis Fract_of_int_eq mult.commute mult.left_neutral mult_rat)</p>\n<p>The thy file is attached.<br>\n<a href=\"/user_uploads/14278/ryIHGLnnGuO7sflQumsxtvGZ/question.thy\">question.thy</a></p>",
        "id": 228565017,
        "sender_full_name": "Email Gateway",
        "timestamp": 1614765665
    },
    {
        "content": "<p>From: Stepan Holub &lt;<a href=\"mailto:holub@karlin.mff.cuni.cz\">holub@karlin.mff.cuni.cz</a>&gt;<br>\nHi,</p>\n<p>in order to understand what is happening in Nitpick you can add <br>\nparameters (see the User's Guide in the Isabelle documentation).<br>\nIn your example, putting<br>\nnitpick[show_all, eval =  \"rat_of_int a * Fract 1 b\" \"Fract  a b\" \"λ x <br>\ny. Fract x y\"]<br>\nI obtain</p>\n<p>Nitpick found a counterexample:<br>\n   Free variables:<br>\n     a = 2<br>\n     b = 2<br>\n   Evaluated terms:<br>\n     rat_of_int a * Fract 1 b = 1<br>\n     Fract a b = _\n     Fract =<br>\n       (λx. _)<br>\n       (- 1 := (λx. _)(0 := 0), 0 := (λx. _)(0 := 0, 1 := 0),<br>\n        1 := (λx. _)(0 := 0, 1 := 1, 2 := 1 div 2), 2 := (λx. _)(0 := 0, <br>\n1 := 2))<br>\n   Types:<br>\n     nat = {0, 1, 2, 3, …}<br>\n     int = {- 1, 0, 1, 2, …}<br>\n     rat = {0, 1 / 2, 1, 2, …}</p>\n<p>You can see here that Nitpick approximates infinite types with a small <br>\nmodel, where ... represents a single additional element.<br>\n From the output you see how Fract is defined in this model.  While <br>\nFract 1 2 = 1 div 2,  Fract 2 2 is undefined. Whence the fake <br>\ncounterexample.</p>\n<p>Best</p>\n<p>Stepan</p>",
        "id": 229081355,
        "sender_full_name": "Email Gateway",
        "timestamp": 1615021391
    }
]