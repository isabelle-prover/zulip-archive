[
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\nThe expression \"concat(replicate n xs)\" occurs frequently in the area of formal <br>\nlanguages / combinatorics on words. That is why Stepan Holub and friends have <br>\ndefined an infix operator</p>\n<p>\"xs \\&lt;^sup&gt;@n = concat(replicate n xs)\"</p>\n<p>Because it has also cropped up in other places, I would like to define this <br>\noperator already in List (i.e. Main) and am wondering about the syntax:</p>\n<p>^@ or ^^</p>\n<p>The latter exists and is overloaded, which may require type annotations in a few <br>\nplaces but means it is more `standard'.</p>\n<p>Any feedback on this proposal?</p>\n<p>Tobias</p>\n<p><a href=\"/user_uploads/14278/cu21MN9Xq6PJuQIjjkQtkpPe/smime.p7s\">smime.p7s</a></p>",
        "id": 493651897,
        "sender_full_name": "Email Gateway",
        "timestamp": 1736882215
    },
    {
        "content": "<p>From: Stepan Holub &lt;<a href=\"mailto:cl-isabelle-users@lists.cam.ac.uk\">cl-isabelle-users@lists.cam.ac.uk</a>&gt;<br>\nIn fact, I am myself rather neutral in this respect. I got used to the <br>\nnotation ^@ we introduced to avoid conflicts, but I am still aware of <br>\nits being pretty non-standard.</p>\n<p>Stepan</p>\n<p>On 14-Jan-25 8:16 PM, Tobias Nipkow wrote:</p>\n<blockquote>\n<p>The expression \"concat(replicate n xs)\" occurs frequently in the area <br>\nof formal languages / combinatorics on words. That is why Stepan Holub <br>\nand friends have defined an infix operator</p>\n<p>\"xs \\&lt;^sup&gt;@n = concat(replicate n xs)\"</p>\n<p>Because it has also cropped up in other places, I would like to define <br>\nthis operator already in List (i.e. Main) and am wondering about the <br>\nsyntax:</p>\n<p>^@ or ^^</p>\n<p>The latter exists and is overloaded, which may require type <br>\nannotations in a few places but means it is more `standard'.</p>\n<p>Any feedback on this proposal?</p>\n<p>Tobias</p>\n</blockquote>",
        "id": 493656560,
        "sender_full_name": "Email Gateway",
        "timestamp": 1736883811
    },
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;</p>\n<p>On 14/01/2025 20:43, Stepan Holub (via cl-isabelle-users Mailing List) wrote:</p>\n<blockquote>\n<p>In fact, I am myself rather neutral in this respect. I got used to the notation <br>\n^@ we introduced to avoid conflicts, but I am still aware of its being pretty <br>\nnon-standard.</p>\n</blockquote>\n<p>You already tried some other overloaded notation (maybe ^^?) and found there <br>\nwere too many ambiguities that needed to be resolved?</p>\n<p>Tobias</p>\n<blockquote>\n<p>Stepan</p>\n<p>On 14-Jan-25 8:16 PM, Tobias Nipkow wrote:</p>\n<blockquote>\n<p>The expression \"concat(replicate n xs)\" occurs frequently in the area of <br>\nformal languages / combinatorics on words. That is why Stepan Holub and <br>\nfriends have defined an infix operator</p>\n<p>\"xs \\&lt;^sup&gt;@n = concat(replicate n xs)\"</p>\n<p>Because it has also cropped up in other places, I would like to define this <br>\noperator already in List (i.e. Main) and am wondering about the syntax:</p>\n<p>^@ or ^^</p>\n<p>The latter exists and is overloaded, which may require type annotations in a <br>\nfew places but means it is more `standard'.</p>\n<p>Any feedback on this proposal?</p>\n<p>Tobias</p>\n</blockquote>\n</blockquote>\n<p><a href=\"/user_uploads/14278/RXp-D88Z2CcSJ9o6diFp8Ra-/smime.p7s\">smime.p7s</a></p>",
        "id": 493674822,
        "sender_full_name": "Email Gateway",
        "timestamp": 1736890457
    },
    {
        "content": "<p>From: Stepan Holub &lt;<a href=\"mailto:cl-isabelle-users@lists.cam.ac.uk\">cl-isabelle-users@lists.cam.ac.uk</a>&gt;<br>\nI tried it now, and annotations are needed only very exceptionally.</p>\n<p>Stepan</p>\n<p>On 14-Jan-25 10:33 PM, Tobias Nipkow wrote:</p>\n<blockquote>\n<p>On 14/01/2025 20:43, Stepan Holub (via cl-isabelle-users Mailing List) <br>\nwrote:</p>\n<blockquote>\n<p>In fact, I am myself rather neutral in this respect. I got used to <br>\nthe notation ^@ we introduced to avoid conflicts, but I am still <br>\naware of its being pretty non-standard.</p>\n</blockquote>\n<p>You already tried some other overloaded notation (maybe ^^?) and found <br>\nthere were too many ambiguities that needed to be resolved?</p>\n<p>Tobias</p>\n<blockquote>\n<p>Stepan</p>\n<p>On 14-Jan-25 8:16 PM, Tobias Nipkow wrote:</p>\n<blockquote>\n<p>The expression \"concat(replicate n xs)\" occurs frequently in the <br>\narea of formal languages / combinatorics on words. That is why <br>\nStepan Holub and friends have defined an infix operator</p>\n<p>\"xs \\&lt;^sup&gt;@n = concat(replicate n xs)\"</p>\n<p>Because it has also cropped up in other places, I would like to <br>\ndefine this operator already in List (i.e. Main) and am wondering <br>\nabout the syntax:</p>\n<p>^@ or ^^</p>\n<p>The latter exists and is overloaded, which may require type <br>\nannotations in a few places but means it is more `standard'.</p>\n<p>Any feedback on this proposal?</p>\n<p>Tobias</p>\n</blockquote>\n</blockquote>\n</blockquote>",
        "id": 493889310,
        "sender_full_name": "Email Gateway",
        "timestamp": 1736935705
    },
    {
        "content": "<p>From: Stepan Holub &lt;<a href=\"mailto:cl-isabelle-users@lists.cam.ac.uk\">cl-isabelle-users@lists.cam.ac.uk</a>&gt;<br>\nA propos: a more ambitious question, certainly considered before, is <br>\nwhether lists with append and Nil deserve to be instantiated as <br>\nmonoid_mult. After all, they are /the/ free monoid. Then we would simply <br>\nhave ^.</p>\n<p>Stepan</p>\n<p>On 14-Jan-25 8:16 PM, Tobias Nipkow wrote:</p>\n<blockquote>\n<p>The expression \"concat(replicate n xs)\" occurs frequently in the area <br>\nof formal languages / combinatorics on words. That is why Stepan Holub <br>\nand friends have defined an infix operator</p>\n<p>\"xs \\&lt;^sup&gt;@n = concat(replicate n xs)\"</p>\n<p>Because it has also cropped up in other places, I would like to define <br>\nthis operator already in List (i.e. Main) and am wondering about the <br>\nsyntax:</p>\n<p>^@ or ^^</p>\n<p>The latter exists and is overloaded, which may require type <br>\nannotations in a few places but means it is more `standard'.</p>\n<p>Any feedback on this proposal?</p>\n<p>Tobias</p>\n</blockquote>",
        "id": 495972713,
        "sender_full_name": "Email Gateway",
        "timestamp": 1737902620
    },
    {
        "content": "<p>From: Florian Haftmann &lt;<a href=\"mailto:florian.haftmann@cit.tum.de\">florian.haftmann@cit.tum.de</a>&gt;</p>\n<blockquote>\n<p>A propos: a more ambitious question, certainly considered before, is <br>\nwhether lists with append and Nil deserve to be instantiated as <br>\nmonoid_mult. After all, they are /the/ free monoid. Then we would simply <br>\nhave ^.</p>\n</blockquote>\n<p>The interpretation is already there: <br>\n<a href=\"https://isabelle.sketis.net/repos/isabelle/file/tip/src/HOL/List.thy#l945\">https://isabelle.sketis.net/repos/isabelle/file/tip/src/HOL/List.thy#l945</a></p>\n<p>I don’t recall whether there was once a deliberate decision not to make <br>\nit a full type class instance – but beware that this will preclude any <br>\ndifferent instantiation users might want for specific applications.</p>\n<p>But there is nothing wrong providing that instantiation in a separate <br>\nlibrary theory.</p>\n<p>Cheers,<br>\n    Florian</p>\n<p><a href=\"/user_uploads/14278/rn_ag2XRLJl49-7-pKu5HByv/OpenPGP_0xA707172232CFA4E9.asc\">OpenPGP_0xA707172232CFA4E9.asc</a><br>\n<a href=\"/user_uploads/14278/YOx33RJ5qrRWjwpBKyFBKk-d/OpenPGP_signature.asc\">OpenPGP_signature.asc</a></p>",
        "id": 495973727,
        "sender_full_name": "Email Gateway",
        "timestamp": 1737903436
    },
    {
        "content": "<p>From: Stepan Holub &lt;<a href=\"mailto:cl-isabelle-users@lists.cam.ac.uk\">cl-isabelle-users@lists.cam.ac.uk</a>&gt;<br>\nYes, I fully understand that instantiation policy should be cautious and <br>\nconservative, although I wonder whether concatenation is not the only <br>\nreasonable instance of monoid multiplication for lists. My point was <br>\nthat full instantiation would solve Tobias's question about concat <br>\nreplicate in a simple and natural way.</p>\n<p>Stepan</p>\n<p>On 26-Jan-25 3:56 PM, Florian Haftmann wrote:</p>\n<blockquote>\n<blockquote>\n<p>A propos: a more ambitious question, certainly considered before, is <br>\nwhether lists with append and Nil deserve to be instantiated as <br>\nmonoid_mult. After all, they are /the/ free monoid. Then we would <br>\nsimply have ^.</p>\n</blockquote>\n<p>The interpretation is already there: <br>\n<a href=\"https://isabelle.sketis.net/repos/isabelle/file/tip/src/HOL/List.thy#l945\">https://isabelle.sketis.net/repos/isabelle/file/tip/src/HOL/List.thy#l945</a></p>\n<p>I don’t recall whether there was once a deliberate decision not to <br>\nmake it a full type class instance – but beware that this will <br>\npreclude any different instantiation users might want for specific <br>\napplications.</p>\n<p>But there is nothing wrong providing that instantiation in a separate <br>\nlibrary theory.</p>\n<p>Cheers,<br>\n    Florian<br>\n</p>\n</blockquote>",
        "id": 495974844,
        "sender_full_name": "Email Gateway",
        "timestamp": 1737904423
    },
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\nPlease note that I have very recently defined ^^ on lists and ported some of <br>\nStepan's lemmas to List. However, this is not a final decision. I would be just <br>\nas happy with ^. In fact, I agree that this subtheory (with ^ or ^^) should go <br>\ninto a separate theory. I would put it into the AFP for visibility (and because <br>\nList-Index is already there).</p>\n<p>From the previous discussion it seems to me there should be a separate theory <br>\nList_Power that defines ^ on lists. Same as Stepan, I would argue it is the only <br>\nreasonable interpretation for ^ on lists. Moreover, there is still ^^ for other <br>\ninterpretations.</p>\n<p>Any objections?</p>\n<p>Tobias</p>\n<p>On 26/01/2025 16:13, Stepan Holub (via cl-isabelle-users Mailing List) wrote:</p>\n<blockquote>\n<p>Yes, I fully understand that instantiation policy should be cautious and <br>\nconservative, although I wonder whether concatenation is not the only reasonable <br>\ninstance of monoid multiplication for lists. My point was that full <br>\ninstantiation would solve Tobias's question about concat replicate in a simple <br>\nand natural way.</p>\n<p>Stepan</p>\n<p>On 26-Jan-25 3:56 PM, Florian Haftmann wrote:</p>\n<blockquote>\n<blockquote>\n<p>A propos: a more ambitious question, certainly considered before, is whether <br>\nlists with append and Nil deserve to be instantiated as monoid_mult. After <br>\nall, they are /the/ free monoid. Then we would simply have ^.</p>\n</blockquote>\n<p>The interpretation is already there: <a href=\"https://isabelle.sketis.net/repos/\">https://isabelle.sketis.net/repos/</a> <br>\nisabelle/file/tip/src/HOL/List.thy#l945</p>\n<p>I don’t recall whether there was once a deliberate decision not to make it a <br>\nfull type class instance – but beware that this will preclude any different <br>\ninstantiation users might want for specific applications.</p>\n<p>But there is nothing wrong providing that instantiation in a separate library <br>\ntheory.</p>\n<p>Cheers,<br>\n    Florian<br>\n</p>\n</blockquote>\n</blockquote>\n<p><a href=\"/user_uploads/14278/R6Xw374DOvQOKvhQTeoPH87x/smime.p7s\">smime.p7s</a></p>",
        "id": 495977872,
        "sender_full_name": "Email Gateway",
        "timestamp": 1737906872
    },
    {
        "content": "<p>From: Florian Haftmann &lt;<a href=\"mailto:florian.haftmann@cit.tum.de\">florian.haftmann@cit.tum.de</a>&gt;</p>\n<blockquote>\n<p>From the previous discussion it seems to me there should be a separate <br>\ntheory List_Power that defines ^ on lists. Same as Stepan, I would argue <br>\nit is the only reasonable interpretation for ^ on lists. Moreover, there <br>\nis still ^^ for other interpretations.</p>\n</blockquote>\n<p>Sounds fine to me.</p>\n<p>Florian</p>\n<p><a href=\"/user_uploads/14278/U5aVankh1c5toTYIEvJnGtK6/OpenPGP_0xA707172232CFA4E9.asc\">OpenPGP_0xA707172232CFA4E9.asc</a><br>\n<a href=\"/user_uploads/14278/it-pIwylYnMnu6qwhaCIoEys/OpenPGP_signature.asc\">OpenPGP_signature.asc</a></p>",
        "id": 495977924,
        "sender_full_name": "Email Gateway",
        "timestamp": 1737906933
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nOn 26/01/2025 16:52, Tobias Nipkow wrote:</p>\n<blockquote>\n<p>Please note that I have very recently defined ^^ on lists and ported some of <br>\nStepan's lemmas to List. However, this is not a final decision. I would be <br>\njust as happy with ^. In fact, I agree that this subtheory (with ^ or ^^) <br>\nshould go into a separate theory. I would put it into the AFP for visibility <br>\n(and because List-Index is already there).</p>\n</blockquote>\n<p>There is 1 week left to figure out the final form of that, for <br>\nIsabelle2025-RC1. See also <br>\n<a href=\"https://isabelle-dev.sketis.net/phame/post/view/85/release_candidates_for_isabelle2025\">https://isabelle-dev.sketis.net/phame/post/view/85/release_candidates_for_isabelle2025</a></p>\n<p>Makarius</p>",
        "id": 495980248,
        "sender_full_name": "Email Gateway",
        "timestamp": 1737908721
    },
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\nAfter some more discussions I/we decided against the type class version of the <br>\nlist power operator: although having (^) is attractive, it would also give us 1 <br>\nand (*) on lists (defined as [] and (@)). Although mathemtically reasonable, it <br>\nis problematic because lists and their notation are so basic. Thus I have opted <br>\nfor the overloaded ^^ operator that will be available as a separate theory.</p>\n<p>Tobias</p>\n<p>On 26/01/2025 16:52, Tobias Nipkow wrote:</p>\n<blockquote>\n<p>Please note that I have very recently defined ^^ on lists and ported some of <br>\nStepan's lemmas to List. However, this is not a final decision. I would be just <br>\nas happy with ^. In fact, I agree that this subtheory (with ^ or ^^) should go <br>\ninto a separate theory. I would put it into the AFP for visibility (and because <br>\nList-Index is already there).</p>\n<p>From the previous discussion it seems to me there should be a separate theory <br>\nList_Power that defines ^ on lists. Same as Stepan, I would argue it is the only <br>\nreasonable interpretation for ^ on lists. Moreover, there is still ^^ for other <br>\ninterpretations.</p>\n<p>Any objections?</p>\n<p>Tobias</p>\n<p>On 26/01/2025 16:13, Stepan Holub (via cl-isabelle-users Mailing List) wrote:</p>\n<blockquote>\n<p>Yes, I fully understand that instantiation policy should be cautious and <br>\nconservative, although I wonder whether concatenation is not the only <br>\nreasonable instance of monoid multiplication for lists. My point was that full <br>\ninstantiation would solve Tobias's question about concat replicate in a simple <br>\nand natural way.</p>\n<p>Stepan</p>\n<p>On 26-Jan-25 3:56 PM, Florian Haftmann wrote:</p>\n<blockquote>\n<blockquote>\n<p>A propos: a more ambitious question, certainly considered before, is whether <br>\nlists with append and Nil deserve to be instantiated as monoid_mult. After <br>\nall, they are /the/ free monoid. Then we would simply have ^.</p>\n</blockquote>\n<p>The interpretation is already there: <a href=\"https://isabelle.sketis.net/repos/\">https://isabelle.sketis.net/repos/</a> <br>\nisabelle/file/tip/src/HOL/List.thy#l945</p>\n<p>I don’t recall whether there was once a deliberate decision not to make it a <br>\nfull type class instance – but beware that this will preclude any different <br>\ninstantiation users might want for specific applications.</p>\n<p>But there is nothing wrong providing that instantiation in a separate library <br>\ntheory.</p>\n<p>Cheers,<br>\n    Florian<br>\n</p>\n</blockquote>\n</blockquote>\n</blockquote>\n<p><a href=\"/user_uploads/14278/1lf-HC2m5mw88vKf41BN2V_B/smime.p7s\">smime.p7s</a></p>",
        "id": 496425027,
        "sender_full_name": "Email Gateway",
        "timestamp": 1738098620
    },
    {
        "content": "<p>From: Stepan Holub &lt;<a href=\"mailto:cl-isabelle-users@lists.cam.ac.uk\">cl-isabelle-users@lists.cam.ac.uk</a>&gt;<br>\nMakes sense. I support your decision by roughly 51:49.</p>\n<p>Stepan</p>\n<p>On 1/28/2025 10:09 PM, Tobias Nipkow wrote:</p>\n<blockquote>\n<p>After some more discussions I/we decided against the type class <br>\nversion of the list power operator: although having (^) is attractive, <br>\nit would also give us 1 and (*) on lists (defined as [] and (@)). <br>\nAlthough mathemtically reasonable, it is problematic because lists and <br>\ntheir notation are so basic. Thus I have opted for the overloaded ^^ <br>\noperator that will be available as a separate theory.</p>\n<p>Tobias</p>\n<p>On 26/01/2025 16:52, Tobias Nipkow wrote:</p>\n<blockquote>\n<p>Please note that I have very recently defined ^^ on lists and ported <br>\nsome of Stepan's lemmas to List. However, this is not a final <br>\ndecision. I would be just as happy with ^. In fact, I agree that this <br>\nsubtheory (with ^ or ^^) should go into a separate theory. I would <br>\nput it into the AFP for visibility (and because List-Index is already <br>\nthere).</p>\n<p>From the previous discussion it seems to me there should be a <br>\nseparate theory List_Power that defines ^ on lists. Same as Stepan, I <br>\nwould argue it is the only reasonable interpretation for ^ on lists. <br>\nMoreover, there is still ^^ for other interpretations.</p>\n<p>Any objections?</p>\n<p>Tobias</p>\n<p>On 26/01/2025 16:13, Stepan Holub (via cl-isabelle-users Mailing <br>\nList) wrote:</p>\n<blockquote>\n<p>Yes, I fully understand that instantiation policy should be cautious <br>\nand conservative, although I wonder whether concatenation is not the <br>\nonly reasonable instance of monoid multiplication for lists. My <br>\npoint was that full instantiation would solve Tobias's question <br>\nabout concat replicate in a simple and natural way.</p>\n<p>Stepan</p>\n<p>On 26-Jan-25 3:56 PM, Florian Haftmann wrote:</p>\n<blockquote>\n<blockquote>\n<p>A propos: a more ambitious question, certainly considered before, <br>\nis whether lists with append and Nil deserve to be instantiated as <br>\nmonoid_mult. After all, they are /the/ free monoid. Then we would <br>\nsimply have ^.</p>\n</blockquote>\n<p>The interpretation is already there: <br>\n<a href=\"https://isabelle.sketis.net/repos/\">https://isabelle.sketis.net/repos/</a> <br>\nisabelle/file/tip/src/HOL/List.thy#l945</p>\n<p>I don’t recall whether there was once a deliberate decision not to <br>\nmake it a full type class instance – but beware that this will <br>\npreclude any different instantiation users might want for specific <br>\napplications.</p>\n<p>But there is nothing wrong providing that instantiation in a <br>\nseparate library theory.</p>\n<p>Cheers,<br>\n    Florian<br>\n</p>\n</blockquote>\n</blockquote>\n</blockquote>\n</blockquote>",
        "id": 496555563,
        "sender_full_name": "Email Gateway",
        "timestamp": 1738159428
    }
]