[
    {
        "content": "<p>From: Georgy Dunaev &lt;<a href=\"mailto:georgedunaev@gmail.com\">georgedunaev@gmail.com</a>&gt;<br>\nDear all,</p>\n<p>I'd like to report that in Isabelle/ZF session I noticed that this<br>\ndefinition is good:</p>\n<p>definition PROPFALSE1 :: \"prop\"<br>\n  where ‹PROPFALSE1 == Pure.all (%(P::o). Trueprop(P))›</p>\n<p>and this is a bad definition:</p>\n<p>definition PROPFALSE2 :: \"prop\"<br>\n  where ‹PROPFALSE == (⋀P::o. (Trueprop(P)))›</p>\n<p>While, I think, they should mean exactly the same.<br>\nError message:</p>\n<p>Type unification failed: Clash of types \"prop\" and \"o\"<br>\nType error in application: incompatible operand type<br>\nOperator:  Trueprop :: o ⇒ prop<br>\nOperand:   P :: prop</p>\n<p>I don't have an explanation of such behaviour, do you?</p>\n<p>Sincerely Yours,<br>\nGeorgy Dunaev</p>",
        "id": 207508220,
        "sender_full_name": "Email Gateway",
        "timestamp": 1597919268
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nOn 20/08/2020 12:27, Georgy Dunaev wrote:</p>\n<blockquote>\n<p>I'd like to report that in Isabelle/ZF session I noticed that this<br>\ndefinition is good:</p>\n<p>definition PROPFALSE1 :: \"prop\"<br>\n  where ‹PROPFALSE1 == Pure.all (%(P::o). Trueprop(P))›</p>\n<p>and this is a bad definition:</p>\n<p>definition PROPFALSE2 :: \"prop\"<br>\n  where ‹PROPFALSE == (⋀P::o. (Trueprop(P)))›</p>\n<p>While, I think, they should mean exactly the same.<br>\nError message:</p>\n</blockquote>\n<p>This is how to do it properly:</p>\n<p>definition PROPFALSE1 :: \"prop\"<br>\n  where ‹PROPFALSE1 ≡ Pure.all (λP::o. Trueprop(P))›</p>\n<p>definition PROPFALSE2 :: \"prop\"<br>\n  where ‹PROPFALSE2 ≡ (⋀P::o. P)›</p>\n<blockquote>\n<p>I don't have an explanation of such behaviour, do you?</p>\n</blockquote>\n<p>Logical syntax inserts the implicit Trueprop already (you can use PROP to<br>\nsuppress that). The body of a quantification is logical syntax, but plain<br>\napplication/abstraction of lambda calculus is not.</p>\n<p>See also the isar-ref manual chapter 8, especially section 8.4.3 .</p>\n<p>(Side-remark: \"bug\" and \"feature\" are both mostly equivalent and meaningless.<br>\nComplexity and confusion is something else.)</p>\n<p>Makarius</p>",
        "id": 207515404,
        "sender_full_name": "Email Gateway",
        "timestamp": 1597925764
    }
]