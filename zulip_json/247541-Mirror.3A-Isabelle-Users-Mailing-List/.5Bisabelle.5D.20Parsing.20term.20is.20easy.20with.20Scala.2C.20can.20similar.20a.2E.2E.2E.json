[
    {
        "content": "<p>From: Alex Meyer &lt;<a href=\"mailto:alex153@outlook.lv\">alex153@outlook.lv</a>&gt;<br>\nI have came up with the code (using <a href=\"https://github.com/dominique-unruh/scala-isabelle/\">https://github.com/dominique-unruh/scala-isabelle/</a>) that parses term into tree-like structure:</p>\n<p>val setup = Isabelle.Setup(isabelleHome = Path.of(isabelleHome), logic = \"HOL\", build=false)<br>\n    implicit val isabelle: Isabelle = new Isabelle(setup)<br>\n    val ctxt = Context(\"HOL.Imperative_HOL.ex.Imperative_Quicksort\")</p>\n<p>val test_term = Term(ctxt, \"two_integer_max_case_def a b = (case a &gt; b of True \\\\&lt;Rightarrow&gt; a | False \\\\&lt;Rightarrow&gt; b)\")<br>\n    println(\"After test term\")<br>\n    println(test_term.getClass())<br>\n    println(\"test_term: \" + test_term.pretty(ctxt))<br>\n    val jsonString = write(test_term)<br>\n    println(\"After write test term\")</p>\n<p>def t_report2(term: Term, curr_string: String): String = term match {<br>\n      case Const(p_name, p_type) =&gt; curr_string + \" [Const \" + p_name + \"] \"<br>\n      case Free(p_name, p_type) =&gt; curr_string + \" [Free \" + p_name + \"] \"<br>\n      case Var(p_name, p_index, p_type) =&gt; curr_string + \" [Var \" + p_name + p_index + \"] \"<br>\n      case Abs(p_name, p_type, p_body_term) =&gt; curr_string + \" [Abs \" + p_name + p_body_term.pretty(ctxt) + t_report2(p_body_term, curr_string) + \"] \"<br>\n      case Bound(p_index) =&gt; curr_string + \" [Bound \" + p_index + \"] \"<br>\n      case App(p_term_1, p_term_2) =&gt; curr_string + \" [App \" + p_term_1.pretty(ctxt) + t_report2(p_term_1, curr_string) + \" ||| \" + p_term_2.pretty(ctxt) + t_report2(p_term_2, curr_string) + \"] \"<br>\n      //final case class Const(name: String, typ: Typ)            // Corresponds to ML constructor 'Const'<br>\n      //final case class Free(name: String, typ: Typ)             // Corresponds to ML constructor 'Free'<br>\n      //final case class Var(name: String, index: Int, typ: Typ)  // Corresponds to ML constructor 'Var'<br>\n      //final case class Abs(name: String, typ: Typ, body: Term)  // Corresponds to ML constructor 'Abs'<br>\n      //final case class Bound private (index: Int)               // Corresponds to ML constructor 'Bound'<br>\n      //final case class App private (fun: Term, arg: Term)       // Corresponds to ML constructor '$'<br>\n      case _ =&gt; curr_string + \" [Other] \"<br>\n    }<br>\n    println(t_report2(test_term, \"\"))</p>\n<p>The resulting string representation is something like (I am still doing the right indentation):</p>\n<p>[App (=) (two_integer_max_case_def a b)</p>\n<p>[App (=) [Const HOL.eq] |||</p>\n<p>two_integer_max_case_def a b</p>\n<p>[App two_integer_max_case_def a</p>\n<p>[App two_integer_max_case_def</p>\n<p>[Free two_integer_max_case_def] |||</p>\n<p>a [Free a]</p>\n<p>] |||</p>\n<p>b [Free b]</p>\n<p>]</p>\n<p>] |||</p>\n<p>case b &lt; a of True ⇒ a | False ⇒ b</p>\n<p>[App case_bool a b</p>\n<p>[App case_bool a</p>\n<p>[App case_bool</p>\n<p>[Const Product_Type.bool.case_bool] |||</p>\n<p>a [Free a]</p>\n<p>] ||| b [Free b] ] ||| b &lt; a [App (&lt;) b [App (&lt;) [Const Orderings.ord_class.less] ||| b [Free b] ] ||| a [Free a] ] ] ]</p>\n<p>This is the result which I tried to find all the time! And now I am wondering - what I am missing here? Why so many people have told me that this endeavour is so hard? But, currently, unfortunatly, it applies to the terms (inner syntax) only. Such can is possible because of the (from <a href=\"https://javadoc.io/doc/de.unruh/scala-isabelle_2.13/latest/de/unruh/isabelle/pure/Term.html\">https://javadoc.io/doc/de.unruh/scala-isabelle_2.13/latest/de/unruh/isabelle/pure/Term.html</a>):</p>\n<p>sealed abstract class Term<br>\nfinal case class Const(name: String, typ: Typ)            // Corresponds to ML constructor 'Const'<br>\nfinal case class Free(name: String, typ: Typ)             // Corresponds to ML constructor 'Free'<br>\nfinal case class Var(name: String, index: Int, typ: Typ)  // Corresponds to ML constructor 'Var'<br>\nfinal case class Abs(name: String, typ: Typ, body: Term)  // Corresponds to ML constructor 'Abs'<br>\nfinal case class Bound private (index: Int)               // Corresponds to ML constructor 'Bound'<br>\nfinal case class App private (fun: Term, arg: Term)       // Corresponds to ML constructor '$'</p>\n<p>(And I am still digesting what it means because in Java someone has have introspection/reflection into the function name and arguments but not into function body/code content, but this Scala approach seemingly allows to dive into the content of the body of the class or function!).</p>\n<p>My question is - is there similar code (with mathc) possible for parsing theory? i.e. is there<br>\nsealed abstract class Theory (or MLValue)<br>\nfinal case class Theorem(...)<br>\nfinal case class Definition(...)</p>\n<p>Something like that? Or something completely different one should use for the theory (outer syntax)?</p>\n<p>Isabelle provides parsing and pretty-printing facilities for the terms.</p>\n<p>Alex</p>",
        "id": 233078681,
        "sender_full_name": "Email Gateway",
        "timestamp": 1617539844
    },
    {
        "content": "<p>From: Dominique Unruh &lt;<a href=\"mailto:unruh@ut.ee\">unruh@ut.ee</a>&gt;<br>\nHello,</p>\n<blockquote>\n<p>And now I am wondering - what I am missing here? Why so many people have<br>\ntold me that this endeavour is so hard?</p>\n</blockquote>\n<p>I don't think anyone said that it is hard to parse a term. That is easy and<br>\nwell-supported both in Isabelle/ML and via scala-isabelle.</p>\n<p>What is difficult is to translate a <em>theory</em> into a data-structure.</p>\n<p>So, to summarize, what is available is (both in ML and Scala):</p>\n<p>- Converting a string into a term object (parsing)<br>\n   - Inspecting a term (because a term is a datastructure).<br>\n   - Creating theorem objects (e.g., by proving them, or by loading them<br>\n   from an existing theory).</p>\n<p>- Inspecting a theorem object (namely by getting the term corresponding<br>\n   to it).</p>\n<p>- Creating theory objects (e.g., by executing a .thy file).<br>\n   - Getting all theorems from a theory. (And then inspecting them as<br>\n   above.)</p>\n<p>- Splitting a theory file into commands (like \"lemma ...\" or \"apply<br>\n   ...\").</p>\n<p>- Parsing a command (but not into an inspectable datastructure, you<br>\n   simply get a function that can be applied to the the current state of a<br>\n   theory)</p>\n<p>What is not available (to the best of my knowledge):</p>\n<p>- Get an AST-like datastructure from parsing a theory. That is because<br>\n   this is just never creating in the process of parsing a .thy file.</p>\n<p>What is available (but I don't know how to best extract it, for this<br>\nMakarius' emails are relevant):</p>\n<p>- Getting the PIDE markup of a theory. Basically, this is some<br>\n   annotation of the theory (e.g., it might say something like \"characters<br>\n   5-15 are the name of a theorem\" and \"character 100-101 are the name of a<br>\n   variable of type nat\"). I don't know the extent of information available<br>\n   here.</p>\n<p>Best wishes,<br>\nDominique.</p>",
        "id": 233122387,
        "sender_full_name": "Email Gateway",
        "timestamp": 1617581360
    }
]