[
    {
        "content": "<p>From: Norbert Schirmer &lt;<a href=\"mailto:cl-isabelle-users@lists.cam.ac.uk\">cl-isabelle-users@lists.cam.ac.uk</a>&gt;<br>\nDear all,</p>\n<p>When declaring a simproc within a locale with simproc_setup the invocation might fail in case of multiple active interpretations of the locale.<br>\nThis is illustrated in the attached theory.</p>\n<p>The technical reason is that the term net which indexes the simprocs does not take the pattern of the simproc into account for its equality check, but only considers the stamp for the ML function.</p>\n<p>In the example given, the first interpretation is inserted into the net, whereas the second one is ignored as it is considered a duplicate.<br>\nThe simplifier will then reject to apply the simproc to instances of the second interpretation as the pattern of the first interpretation does not match.</p>\n<p>The relevant parts of raw_simplifier.ML:</p>\n<p>Net.insert_term eq_proc (lhs, proc) procs</p>\n<p>fun eq_proc (Proc {stamp = stamp1, ...}, Proc {stamp = stamp2, ...}) = stamp1 = stamp2;</p>\n<p>Regards,<br>\nNorbert</p>\n<p><a href=\"/user_uploads/14278/Ik6_F1MHu84JhF7e7n-Lff20/Simproc.thy\">Simproc.thy</a></p>",
        "id": 393715828,
        "sender_full_name": "Email Gateway",
        "timestamp": 1695907322
    },
    {
        "content": "<p>From: Lawrence Paulson &lt;<a href=\"mailto:lp15@cam.ac.uk\">lp15@cam.ac.uk</a>&gt;<br>\nPresumably it should be something like</p>\n<p>fun eq_proc (Proc {stamp = stamp1, lhs = lhs1, ...}, Proc {stamp = stamp2, lhs = lhs2, ...}) = stamp1 = stamp2 andalso lhs1 aconv lhs2;</p>\n<p>You could give that a try and see if it helps. However, the simplifier is Tobiasâ€™s baby</p>\n<p>Larry</p>",
        "id": 394462324,
        "sender_full_name": "Email Gateway",
        "timestamp": 1696261146
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nThat part is my responsibility, but I did not look at it yet. I need to <br>\nfigure out if there is actually something wrong, as usual.</p>\n<p>Since we are after a release, and not before a release, there is no <br>\nparticular need to rush to resolve it.</p>\n<p>(I am presently on travel.)</p>\n<p>Makarius</p>",
        "id": 394480514,
        "sender_full_name": "Email Gateway",
        "timestamp": 1696267553
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;</p>\n<blockquote>\n<p>On 28 Sep 2023 at 14:22 +0100, <a href=\"mailto:nschirmer@apple.com\">nschirmer@apple.com</a> &lt;<a href=\"mailto:nschirmer@apple.com\">nschirmer@apple.com</a>&gt;, <br>\nwrote:</p>\n<blockquote>\n<p>The relevant parts of raw_simplifier.ML:</p>\n<p>Net.insert_term eq_proc (lhs, proc) procs</p>\n<p>fun eq_proc (Proc {stamp = stamp1, ...}, Proc {stamp = stamp2, ...}) =<br>\nstamp1 = stamp2;</p>\n</blockquote>\n</blockquote>\n<p>This is not sufficient: the pattern is just an approximation and could be <br>\nrather general, and insufficient to distinguish simproc instances.</p>\n<p>In the past we actually had an explicit \"identifier\" for the intended formal <br>\ntheory of a simproc. It was never used and thus \"garbage collected\" in <br>\nIsabelle/13252110a6fe:</p>\n<p>changeset:   62913:13252110a6fe<br>\nuser:        wenzelm<br>\ndate:        Fri Apr 08 20:15:20 2016 +0200<br>\ndescription:<br>\neliminated unused simproc identifier;</p>\n<p>This points back at much more ambitious \"localized\" proof tools from 10 years <br>\nearlier, but only recently Norbert has re-opened this game.</p>\n<p>I will take closer look to see how we can again put it into proper shape.</p>\n<p>(Side-remark: Now that we have pseudo-intelligent machines to produce <br>\ninsufficient / superficial / wrong answers mechanically, we are free again to <br>\nwork thoroughly and diligently, based on proper understanding of problems.)</p>\n<p>Makarius</p>",
        "id": 397082684,
        "sender_full_name": "Email Gateway",
        "timestamp": 1697540175
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nI have now reworked that quite a bit for the next release. The \"identifier\" is <br>\nback, see Isabelle/9d44cc361f19 and <br>\n<a href=\"https://isabelle-dev.sketis.net/phame/post/view/74/ml_antiquotation_for_simproc_setup\">https://isabelle-dev.sketis.net/phame/post/view/74/ml_antiquotation_for_simproc_setup</a></p>\n<p>I now recall the reason why I had \"garbage collected\" this unused feature in <br>\nIsabelle/13252110a6fe: it was hard to generate ML source from the abstract <br>\ntype (thm list), without the formal context of ML antiquotations.</p>\n<p>Side-remark: if you do need this for Isabelle2023, you should get along with <br>\nLocal_Theory.declaration and Simplifier.make_simproc, to produce a new simproc <br>\nfor each morphism instance.</p>\n<p>Makarius</p>",
        "id": 398070797,
        "sender_full_name": "Email Gateway",
        "timestamp": 1698062830
    },
    {
        "content": "<p>From: Norbert Schirmer &lt;<a href=\"mailto:cl-isabelle-users@lists.cam.ac.uk\">cl-isabelle-users@lists.cam.ac.uk</a>&gt;<br>\nThank you. It now works fine for my purposes.</p>\n<p>Regards,<br>\nNorbert</p>",
        "id": 398627973,
        "sender_full_name": "Email Gateway",
        "timestamp": 1698304616
    }
]