[
    {
        "content": "<p>From: Manuel Eberl &lt;<a href=\"mailto:manuel@pruvisto.org\">manuel@pruvisto.org</a>&gt;<br>\nHello,</p>\n<p>the other day I noticed that polyml-x86_64_32-linux in the version used <br>\nin Isabelle 2021-1 has an allocation limit of 2^24-1, i.e. you cannot <br>\nhave an .array whose size is more than ≈17 million. That seems <br>\nsurprisingly low to me. Is this intentional, e.g. some restriction <br>\ninherent to 64_32?</p>\n<p>My current workaround is to just nest the arrays to effectively square <br>\nthat allocation limit, which works fine. But I'm still curious.</p>\n<p>Somewhat relatedly, is there anything in the Isabelle/ML library for <br>\ndynamically growing arrays or mutable hash maps etc.?</p>\n<p>Cheers,</p>\n<p>Manuel</p>",
        "id": 281691127,
        "sender_full_name": "Email Gateway",
        "timestamp": 1652106027
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nOn 09/05/2022 16:19, Manuel Eberl wrote:</p>\n<blockquote>\n<p>Hello,</p>\n<p>the other day I noticed that polyml-x86_64_32-linux in the version used in <br>\nIsabelle 2021-1 has an allocation limit of 2^24-1, i.e. you cannot have an <br>\n.array whose size is more than ≈17 million. That seems surprisingly low to me. <br>\nIs this intentional, e.g. some restriction inherent to 64_32?</p>\n</blockquote>\n<p>This is a limit of the Poly/ML runtime system. David Matthews can explain the <br>\ndetails.</p>\n<p>Abstractly, certain limitations make things more performant, in the space of <br>\npossibilities that are important for symbolic applications like Isabelle.</p>\n<blockquote>\n<p>Somewhat relatedly, is there anything in the Isabelle/ML library for <br>\ndynamically growing arrays or mutable hash maps etc.?</p>\n</blockquote>\n<p>Why use arrays and mutable hash maps at all?</p>\n<p>These old things were already obsolete when I learned ML for the first time <br>\nfrom the first edition of Larry's book (1992).</p>\n<p>Makarius</p>",
        "id": 281692763,
        "sender_full_name": "Email Gateway",
        "timestamp": 1652106649
    },
    {
        "content": "<p>From: Manuel Eberl &lt;<a href=\"mailto:manuel@pruvisto.org\">manuel@pruvisto.org</a>&gt;<br>\nI'm replaying some big SAT proofs in Isabelle/HOL, and mutable arrays <br>\nare the natural data structure for that.</p>\n<p>When I say \"big\", I mean that the formula and the proofs are in the <br>\nrange of hundreds of Megabytes, with millions of clauses and variables.</p>\n<p>This actually works surprisingly well. I replayed a proof of a 27 MB <br>\nproof on a formula with 6 million clauses in less than 20 seconds.</p>\n<p>Manuel</p>",
        "id": 281693407,
        "sender_full_name": "Email Gateway",
        "timestamp": 1652106922
    },
    {
        "content": "<p>From: David Matthews &lt;<a href=\"mailto:dm@prolingua.co.uk\">dm@prolingua.co.uk</a>&gt;<br>\nEvery cell in Poly/ML has a word before it that is needed for the <br>\ngarbage collector.  The top byte contains flag bits and the remainder is <br>\nthe length.  That means that cells in native 32-bit systems or 32-in-64 <br>\nare limited to 2^24-1 words.  For native 64-bit systems, though, the <br>\nlength occupies 56 bits so if you use native 64-bits you could have <br>\narrays of up to 2^56-1 words, but you're likely to run out of memory <br>\nlong before you reach that.</p>\n<p>David</p>",
        "id": 281924904,
        "sender_full_name": "Email Gateway",
        "timestamp": 1652251729
    },
    {
        "content": "<p>From: Manuel Eberl &lt;<a href=\"mailto:manuel@pruvisto.org\">manuel@pruvisto.org</a>&gt;<br>\nThanks for the explanation!</p>\n<p>@Makarius: I am currently trying to figure out how to properly generate <br>\na text file from Isabelle, basically the same thing that the export_code <br>\ncommand does. I couldn't find any documentation of the ML interface in <br>\nthe Implementation Manual, but my guess is that I have to use <br>\n\"Export.export\" and possibly \"Generated_Files.add_files\" (not sure what <br>\nthe second one does, but the code generator uses it).</p>\n<p>I noticed, however, that both of these use just a single string for the <br>\nfile content, which means that this whole mechanism is limited to a file <br>\nsize of 16 MB in Poly/ML x86_64_32.</p>\n<p>Now, this is not really a problem for me because my files are only a few <br>\nMB, but I thought I'd mention this because it might cause some problems <br>\nin the future for other people.</p>\n<p>Manuel</p>",
        "id": 283119570,
        "sender_full_name": "Email Gateway",
        "timestamp": 1653077098
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nFirst note that the limit is 64 MB, not 16 MB.</p>\n<p>Since we have seen applications hitting the 64 MB boundary occasionally, I've <br>\nspent several days to introduce a scalable type Bytes.T in many places as <br>\nabove. The present situation is Isabelle/c8263ac985e1 (just for the record).</p>\n<p>In Sep-2022 we will start moving towards the next official release, where this <br>\nwill become standard.</p>\n<p>Makarius</p>",
        "id": 287764126,
        "sender_full_name": "Email Gateway",
        "timestamp": 1656444292
    }
]