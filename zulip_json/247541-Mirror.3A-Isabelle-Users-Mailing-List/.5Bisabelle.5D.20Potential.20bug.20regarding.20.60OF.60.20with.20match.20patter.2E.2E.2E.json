[
    {
        "content": "<p>From: Wolfgang Jeltsch &lt;<a href=\"mailto:wolfgang@well-typed.com\">wolfgang@well-typed.com</a>&gt;<br>\nHi!</p>\n<p>I’d like to report a behavior of the <code>OF</code> attribute with match pattern<br>\nfacts that seems like a bug to me.</p>\n<p>Consider the following contrived example of a lemma:</p>\n<p>lemma<br>\n      assumes \"Suc n &lt; Suc m\"<br>\n      shows \"n &lt; m\"<br>\n      by (simp only: Suc_less_SucD [OF assms])</p>\n<p>The proof is accepted, which is to be expected, as the fact<br>\n<code>Suc_less_SucD [OF assms]</code> is precisely what is to be proved.</p>\n<p>Now let’s make this a bit more complicated, using some Eisbach:</p>\n<p>lemma<br>\n      assumes \"Suc n &lt; Suc m\"<br>\n      shows \"n &lt; m\"<br>\n      by (<br>\n        match assms in assumption: _ ⇒<br>\n          ‹simp only: Suc_less_SucD [OF assumption]›<br>\n      )</p>\n<p>The proof in this example fails. When debugging with <code>simp_trace</code>, it<br>\nbecomes apparent that the rewrite rule added to the simplifier is not<br>\n<code>n &lt; m ≡ True</code> but <code>Suc n &lt; Suc m ≡ True</code>. Apparently, the computation<br>\nof the fact <code>Suc_less_SucD [OF assumption]</code> goes completely wrong, and<br>\n<code>assumption</code> itself is returned as the result.</p>\n<p>If <code>simp only: Suc_less_SucD [OF assumption]</code> is replaced by <code>insert\nSuc_less_SucD [OF assumption]</code>, the proof is accepted again. So it seems<br>\nthe above-mentioned behavior has to do with particularities of <code>simp</code>.</p>\n<p>Interestingly, the problem goes away when outsourcing the proof method<br>\nexpression to a custom method. The following code works as it should:</p>\n<p>method nat_less_solver uses Suc_less_Suc = (<br>\n      match Suc_less_Suc in assumption: _ ⇒<br>\n        ‹simp only: Suc_less_SucD [OF assumption]›<br>\n    )</p>\n<p>lemma<br>\n      assumes \"Suc n &lt; Suc m\"<br>\n      shows \"n &lt; m\"<br>\n      by (nat_less_solver Suc_less_Suc: assms)</p>\n<p>All the best,<br>\nWolfgang</p>",
        "id": 271521923,
        "sender_full_name": "Email Gateway",
        "timestamp": 1644544907
    },
    {
        "content": "<p>From: Peter Lammich &lt;<a href=\"mailto:lammich@in.tum.de\">lammich@in.tum.de</a>&gt;<br>\nThis behaviour is, indeed, weird.</p>\n<p>This works:</p>\n<p>apply (<br>\n        match assms in assumptionX: _ ⇒<br>\n          ‹rule Suc_less_SucD[OF assumptionX]›<br>\n      )</p>\n<p>with simp only:, it doesn't. Further investigation reveals, that the<br>\nOF-attribute is, actually, never applied (where things get really<br>\nweird):</p>\n<p>attribute_setup myOF = ‹Attrib.thms &gt;&gt; (fn Bs =&gt; Thm.rule_attribute Bs<br>\n(fn _ =&gt; fn A =&gt; A OF (@{print} Bs)))›</p>\n<p>apply ( match assms in assumptionX: _ ⇒  ‹rule Suc_less_SucD[myOF<br>\nassumptionX]› )</p>\n<p>Proves the goal, and prints [\"Suc n &lt; Suc m\"]⌂</p>\n<p>apply ( match assms in assumptionX: _ ⇒  ‹simp only: Suc_less_SucD[myOF<br>\nassumptionX]› )</p>\n<p>Fails, no printout ...</p>\n<p>This hints at the Method.section concept. With<br>\nsetup ‹Config.put_global Method.old_section_parser false›</p>\n<p>we get a printout, but the fact is still not added to the simplifier,<br>\nnor is the OF attribute interpreted correctly (it's still Suc _ &lt; Suc _\nafter the OF ...) At this point, I'm giving up, and hope someone who<br>\nknows more about why section-parser has been updated, and the subtle<br>\ninteractions with Eisbach, can take over</p>",
        "id": 271558363,
        "sender_full_name": "Email Gateway",
        "timestamp": 1644576270
    },
    {
        "content": "<p>From: Peter Lammich &lt;<a href=\"mailto:lammich@in.tum.de\">lammich@in.tum.de</a>&gt;<br>\nAddendum: the behaviour I reported below was with the import order<br>\nimports \"HOL-Eisbach.Eisbach\" Main</p>\n<p>When I change to<br>\nimports Main \"HOL-Eisbach.Eisbach\"</p>\n<p>then the following will prove the goal:</p>\n<p>theory Scratch<br>\nimports Main \"HOL-Eisbach.Eisbach\"<br>\nbegin</p>\n<p>setup ‹Config.put_global Method.old_section_parser true›</p>\n<p>lemma<br>\n  assumes \"Suc n &lt; Suc m\"<br>\n  shows \"n &lt; m\"<br>\n  by ( match assms in assumptionX: _ ⇒  ‹simp only: Suc_less_SucD[OF<br>\nassumptionX]› )</p>",
        "id": 271558918,
        "sender_full_name": "Email Gateway",
        "timestamp": 1644576628
    }
]