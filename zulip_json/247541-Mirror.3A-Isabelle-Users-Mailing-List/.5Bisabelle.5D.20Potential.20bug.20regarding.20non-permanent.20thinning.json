[
    {
        "content": "<p>From: Wolfgang Jeltsch &lt;<a href=\"mailto:wolfgang@well-typed.com\">wolfgang@well-typed.com</a>&gt;<br>\nHi!</p>\n<p>I’d like to report another potential buggy behavior, this time about<br>\nthinning being non-permanent.</p>\n<p>Consider the following code:</p>\n<p>lemma \"A ⟹ B ⟹ C ⟹ D\"<br>\n      apply (<br>\n        match premises in a [thin]: _ ⇒ ‹<br>\n          match premises in b [thin]: _ ⇒ ‹<br>\n            succeed<br>\n          ›<br>\n        ›<br>\n      )<br>\n      oops</p>\n<p>After the application of the proof method, the goal is <code>C ⟹ D</code>, as<br>\nexpected.</p>\n<p>Now let’s add some superfluous matching:</p>\n<p>lemma \"A ⟹ B ⟹ C ⟹ D\"<br>\n      apply (<br>\n        match premises in a [thin]: _ ⇒ ‹<br>\n          match (\"()\") in \"()\" ⇒ ‹<br>\n            match premises in b [thin]: _ ⇒ ‹<br>\n              succeed<br>\n            ›<br>\n          ›<br>\n        ›<br>\n      )<br>\n      oops</p>\n<p>This time, the generated goal is not <code>C ⟹ D</code>, but <code>B ⟹ C ⟹ D</code>, which it<br>\nshouldn’t be.</p>\n<p>Let’s add some debugging code:</p>\n<p>lemma \"A ⟹ B ⟹ C ⟹ D\"<br>\n      apply (<br>\n        match premises in a [thin]: _ ⇒ ‹<br>\n          match (\"()\") in \"()\" ⇒ ‹<br>\n            match premises in b [thin]: _ ⇒ ‹<br>\n              match premises in prems: _ (multi) ⇒ ‹<br>\n                print_fact prems<br>\n              ›<br>\n            ›<br>\n          ›<br>\n        ›<br>\n      )<br>\n      oops</p>\n<p>We get <code>C</code> as the content of <code>prems</code>, which is correct, while the<br>\ngenerated goal is still <code>B ⟹ C ⟹ D</code>.</p>\n<p>Apparently, the removal of <code>B</code> from the list of premises, while being<br>\nlocally observable, is not reflected outside of the <code>match</code> invocation<br>\nthat performs the superfluous matching. Changing this <code>match</code> invocation<br>\nto use a different term or a fact as its match target leads to the same<br>\noutcome. However, if <code>premises</code> or <code>conclusion</code> is used as the match<br>\ntarget of this <code>match</code> invocation, the generated goal is again <code>C ⟹ D</code>.<br>\nIt seems that <code>match</code> invocations that don’t perform subgoal focusing<br>\nintroduce some sort of barrier that the effect of thinning cannot<br>\ntranscend.</p>\n<p>All the best,<br>\nWolfgang</p>",
        "id": 271522258,
        "sender_full_name": "Email Gateway",
        "timestamp": 1644545236
    }
]