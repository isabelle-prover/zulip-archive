[
    {
        "content": "<p>From: Florian Märkl &lt;<a href=\"mailto:isabelle-users@florianmaerkl.de\">isabelle-users@florianmaerkl.de</a>&gt;<br>\nHello,</p>\n<p>I am trying to replicate something like discussed in<br>\n<a href=\"https://lists.cam.ac.uk/mailman/htdig/cl-isabelle-users/2020-November/msg00013.html\">https://lists.cam.ac.uk/mailman/htdig/cl-isabelle-users/2020-November/msg00013.html</a><br>\n(the part of the JinjaThreads theory), i.e. generating code for a<br>\nreflexive transitive closure predicate, however the [inductify] option<br>\nthat I have to use on code_pred currently seems to give me some headaches.</p>\n<p>In essence, what I have in my project is something like this:</p>\n<p>theory \"Scratch\"</p>\n<p>imports \"HOL-Library.Transitive_Closure_Table\" Main</p>\n<p>begin</p>\n<p>typedef mynat = \"{n :: nat. True}\" by auto</p>\n<p>setup_lifting type_definition_mynat</p>\n<p>definition P :: \"mynat ⇒ mynat ⇒ bool\" where</p>\n<p>\"P a b ≡ Rep_mynat a = Suc (Rep_mynat b)\"</p>\n<p>definition t where \"t = (P)^**\"</p>\n<p>(* Fails with: \"No specification for Rep_mynat\" *)</p>\n<p>code_pred (modes: i ⇒ i ⇒ bool, i ⇒ o ⇒ bool) [inductify] t .</p>\n<p>(* The final goal *)</p>\n<p>export_code t in SML</p>\n<p>end</p>\n<p>I have some executable predicate P over which I want to execute the<br>\nreflexive transitive closure t.</p>\n<p>Now from what I understand (please correct me if I am wrong), the<br>\n[inductify] option here is necessary so code_pred understands that this<br>\nis actually an inductive predicate by digging into the definitions.</p>\n<p>But that also means it will go even deeper and try to inspect Rep_mynat<br>\nfor example, which fails.</p>\n<p>What I intuitively would want it to do is to only unfold the t, but then<br>\nconsider P an opaque constant.</p>\n<p>I have seen that code_pred has quite a few more undocumented options,<br>\nbut didn't find anything yet that did what I need. Is something like<br>\nthis possible somehow or am I misunderstanding the inner workings of the<br>\npredicate compiler here?</p>\n<p>Florian</p>",
        "id": 226966805,
        "sender_full_name": "Email Gateway",
        "timestamp": 1613743454
    },
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\n\"No specification for Rep_mynat\": I suspect the code generator just cannot <br>\nhandle types specified by \"typedef\".</p>\n<p>Tobias<br>\n<a href=\"/user_uploads/14278/kpgjRZnmXYZ6CWmZuuD2uvWW/smime.p7s\">smime.p7s</a></p>",
        "id": 227104362,
        "sender_full_name": "Email Gateway",
        "timestamp": 1613840898
    },
    {
        "content": "<p>From: Florian Märkl &lt;<a href=\"mailto:isabelle-users@florianmaerkl.de\">isabelle-users@florianmaerkl.de</a>&gt;<br>\nHello Tobias,</p>\n<p>in my larger project I could probably get rid of the typdefd types in<br>\nthis specific predicate by just duplicating the code of what is called P<br>\nhere, operating directly on the underying type of the typedef.</p>\n<p>However after doing this, I end up with another issue that can be seen<br>\nin this example:</p>\n<p>theory \"Scratch\"<br>\n  imports \"HOL-Library.Transitive_Closure_Table\" Main<br>\nbegin</p>\n<p>definition P :: \"nat ⇒ nat ⇒ bool\" where \"P a b ≡ a ∈ set [b]\"<br>\ndefinition t where \"t ≡ (P)^**\"</p>\n<p>(* Fails with:<br>\nexception TERM raised (line 80 of<br>\n\"~~/src/HOL/Tools/Predicate_Compile/predicate_compile_data.ML\"):<br>\n  defining_const_of_introrule failed: Not a constant<br>\n  {x. x ∈ ?z} ≡ ?z<br>\n*)<br>\ncode_pred (modes: i ⇒ i ⇒ bool, i ⇒ o ⇒ bool) [inductify, show_steps,<br>\nshow_intermediate_results] t .</p>\n<p>(* The final goal *)<br>\nexport_code t in SML</p>\n<p>end</p>\n<p>So it seems there is an issue with the ∈ operator now, which might be<br>\npossible to eliminate too (here by operating on the list [b], probably<br>\nsimilar in the real project) but this also brings me back to the<br>\noriginal problem: Is it somehow possible to use code_pred on a<br>\ndefinition like \"t ≡ (P)^**\" that does not use the \"inductive\" command<br>\nat the top level, without code_pred having to recurse through every<br>\nlittle definition that it contains?</p>\n<p>Florian</p>",
        "id": 227109080,
        "sender_full_name": "Email Gateway",
        "timestamp": 1613845966
    },
    {
        "content": "<p>From: Andreas Lochbihler &lt;<a href=\"mailto:mail@andreas-lochbihler.de\">mail@andreas-lochbihler.de</a>&gt;<br>\nHi Florian,</p>\n<p>code_pred's [inductify] option has its quirks and doesn't always work; in particular set <br>\ncomprehensions and set membership are tricky (code_pred was developed when \"'a set\" was a <br>\ntype abbreviation for \"'a =&gt; bool\"). What you can do is to do the inductification <br>\nmanually. In your example with the typedef, the following makes code_pred generate the <br>\nright equations (of course, you should manually fill in the sorrys)</p>\n<p>lemma P_intro [code_pred_intro]: \"P n m\"<br>\n   if \"Rep_mynat n ≠ 0\" \"m = Abs_mynat (Rep_mynat n - 1)\" sorry</p>\n<p>code_pred (modes: i ⇒ i ⇒ bool, i ⇒ o ⇒ bool) P sorry</p>\n<p>code_pred (modes: i ⇒ i ⇒ bool, i ⇒ o ⇒ bool) [inductify] t .</p>\n<p>Now, however, export_code gives you a well-sortedness error that mynat isn't an instance <br>\nof equal. But that's something you probably want to provide anyway; I'm actually surprised <br>\nthat the setup_lifting doesn't generate such an instance.</p>\n<p>Hope this helps,<br>\nAndreas</p>",
        "id": 227151871,
        "sender_full_name": "Email Gateway",
        "timestamp": 1613895043
    },
    {
        "content": "<p>From: Florian Märkl &lt;<a href=\"mailto:isabelle-users@florianmaerkl.de\">isabelle-users@florianmaerkl.de</a>&gt;<br>\nHello Andreas,</p>\n<p>thank you very much, this does bring me one step forward.<br>\nNow considering the set example again, this is what I have now:</p>\n<p>theory \"Scratch\"<br>\n  imports \"HOL-Library.Transitive_Closure_Table\" Main<br>\nbegin</p>\n<p>definition P :: \"nat ⇒ nat ⇒ bool\" where \"P a b ≡ a ∈ set [b]\"<br>\ndefinition t where \"t ≡ (P)^**\"</p>\n<p>lemma P_intro [code_pred_intro]: \"P a b\"<br>\n  if \"a ∈ set [b]\" unfolding P_def using that .</p>\n<p>code_pred (modes: i ⇒ i ⇒ bool) P<br>\n  using P_def by auto</p>\n<p>(*<br>\nOutput:<br>\n  Inferred modes:<br>\n  Scratch.t:<br>\n*)<br>\ncode_pred (* errors: (modes: i ⇒ i ⇒ bool, i ⇒ o ⇒ bool)*) [inductify,<br>\nshow_modes] t .</p>\n<p>export_code t in SML module_name Scratch<br>\n(*<br>\nexception Fail raised (line 26 of \"generated code\"):<br>\nTransitive_Closure.rtranclp<br>\nwhich is no wonder becuause the code is essentially this:</p>\n<p>fun rtranclp _ _ _ = raise Fail \"Transitive_Closure.rtranclp\";<br>\n  fun t x = rtranclp p x;<br>\n*)<br>\nvalue \"t 0 1\"</p>\n<p>end</p>\n<p>So in the end, with HOL-Library.Transitive_Closure_Table, the rtranclp<br>\nfunction ist just a one-liner raising an exception here.<br>\nWhat seems fishy to me is that the code_pred for t in this case does not<br>\ninfer any modes at all, but I am not really sure what to make of this.</p>\n<p>Florian</p>",
        "id": 227178776,
        "sender_full_name": "Email Gateway",
        "timestamp": 1613925265
    },
    {
        "content": "<p>From: Andreas Lochbihler &lt;<a href=\"mailto:mail@andreas-lochbihler.de\">mail@andreas-lochbihler.de</a>&gt;<br>\nHi Florian,</p>\n<p>For the predicate P, you've only inferred the mode i =&gt; i =&gt; bool, but that's not enough <br>\nto compute a transitive closure (as nat is infinite). If you add [show_mode] to the <br>\ncode_pred rtranclp invocation in Transitive_Closure_Table, you'll see that the relation <br>\nmust have mode i =&gt; o =&gt; bool. So you need to provide introduction rules for P that yield <br>\nsuch a mode. In your artificial example, you get this via</p>\n<p>lemma [code_pred_intro]: \"P a b\" if \"a = b\"</p>\n<p>Another example: If P was defined as \"P a b = a : set [b, b + 1]\", you'd get there via</p>\n<p>lemma [code_pred_intro]: \"a = b ==&gt; P a b\" \"a = b + 1 ==&gt; P a b\"</p>\n<p>Hope this helps,<br>\nAndreas</p>",
        "id": 227188120,
        "sender_full_name": "Email Gateway",
        "timestamp": 1613935269
    }
]