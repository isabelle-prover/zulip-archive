[
    {
        "content": "<p>From: Andreas Lochbihler &lt;<a href=\"mailto:mail@andreas-lochbihler.de\">mail@andreas-lochbihler.de</a>&gt;<br>\nDear primrec experts,</p>\n<p>In the attached theory for Isabelle2021, I'm trying to define a simple primitively <br>\nrecursive function over a datatype. However, primrec complains about \"extra variables on <br>\nrhs\" in the underlying foundational definition. It looks to me as if primrec does not <br>\ncorrectly construct the lambda abstraction for the second argument to the recursor. My <br>\ncurrent workaround is to use fun instead, but it would be nice to get the support for <br>\ntransfer rules from primrec.</p>\n<p>Best,<br>\nAndreas<br>\n<a href=\"/user_uploads/14278/pbzAJI0Pr7LH6pnO3DJA0Fhi/Scratch.thy\">Scratch.thy</a></p>",
        "id": 239088081,
        "sender_full_name": "Email Gateway",
        "timestamp": 1621257994
    },
    {
        "content": "<p>From: Mikhail Mandrykin &lt;<a href=\"mailto:mandrykin@ispras.ru\">mandrykin@ispras.ru</a>&gt;<br>\nAndreas Lochbihler писал 2021-05-17 16:26:</p>\n<blockquote>\n<p>My current workaround is to use fun instead, but it<br>\nwould be nice to get the support for transfer rules from primrec.<br>\nI'm not at all a primrec expert, but I was able to get the resulting <br>\nequations from primrec rather than fun by<br>\nusing another work-around:</p>\n</blockquote>\n<p>‹<br>\ndatatype 'a dt<br>\n   = C1 | C2 'a \"'a dt list\" \"'a dt\"</p>\n<p>primrec f :: \"'a ⇒ 'a dt list ⇒ 'a dt ⇒  'a dt list ⇒ 'a dt\" where<br>\n   f1: \"f n y C1 y' = C2 n (y @ y') C1\"<br>\n| f2[unfolded Let_def]: \"f n y (C2 n' y' co) y'' = (let r = λ x y. f x y <br>\nco in C2 n y (r n' y'  y''))\"</p>\n<p>thm f1 f2<br>\n›</p>\n<p>Regards, Mikhail</p>",
        "id": 239149317,
        "sender_full_name": "Email Gateway",
        "timestamp": 1621281111
    },
    {
        "content": "<p>From: Andreas Lochbihler &lt;<a href=\"mailto:mail@andreas-lochbihler.de\">mail@andreas-lochbihler.de</a>&gt;<br>\nDear Mikhail,</p>\n<p>Thanks for finding a workaround. This highlights that there is indeed some problem in the <br>\nprimrec implementation.</p>\n<p>Best,<br>\nAndreas</p>",
        "id": 239197843,
        "sender_full_name": "Email Gateway",
        "timestamp": 1621313435
    },
    {
        "content": "<p>From: Jasmin Blanchette via Cl-isabelle-users &lt;<a href=\"mailto:cl-isabelle-users@lists.cam.ac.uk\">cl-isabelle-users@lists.cam.ac.uk</a>&gt;<br>\nDear primrec user,</p>\n<p>Thank you for your report. I have now solved the issue in primrec so that your example should work in the next Isabelle release. I'm glad you have a workaround in the meantime.</p>\n<p>Cheers,</p>\n<p>Jasmin</p>",
        "id": 245930731,
        "sender_full_name": "Email Gateway",
        "timestamp": 1626249973
    }
]