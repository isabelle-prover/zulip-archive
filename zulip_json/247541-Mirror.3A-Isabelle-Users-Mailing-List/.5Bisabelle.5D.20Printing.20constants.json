[
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\nDear List,</p>\n<p>Is there a hook where one can modify the way that names of constants are printed?</p>\n<p>Thanks<br>\nTobias</p>\n<p><a href=\"/user_uploads/14278/K4rH5dVAfZ19RagfFbTSA-fe/smime.p7s\">smime.p7s</a></p>",
        "id": 479829307,
        "sender_full_name": "Email Gateway",
        "timestamp": 1730364420
    },
    {
        "content": "<p>From: Manuel Eberl &lt;<a href=\"mailto:manuel@pruvisto.org\">manuel@pruvisto.org</a>&gt;<br>\nOne simple thing that you could do that allows you great freedom is to <br>\njust add an unchecking phase that tags all constants (or, probably <br>\nbetter, all the constants you care about) with something. Then you can <br>\nmanipulate the printing of this tag in whatever way you want: <br>\n\"notation\", \"syntax\", \"print_translation\", \"print_ast_translation\", etc.</p>\n<p>Here's an example that prints all constants of type \"nat ⇒ nat ⇒ nat\" in <br>\nangle brackets:</p>\n<p>definition DUMMY :: \"'a ⇒ 'a\" where \"DUMMY x = x\"</p>\n<p>ML ‹<br>\nlocal<br>\n   val tag_consts_switch = Attrib.setup_config_bool <br>\n\\&lt;^binding&gt;‹tag_consts› (K false)</p>\n<p>fun tag_consts (t as Const (\\&lt;^const_name&gt;‹DUMMY›, _) $ _) = t<br>\n     | tag_consts (f $ x) = tag_consts f $ tag_consts x<br>\n     | tag_consts (Abs (x, T, t)) = Abs (x, T, tag_consts t)<br>\n     | tag_consts (t as Const (c, T)) =<br>\n         if c = \\&lt;^const_name&gt;‹DUMMY› orelse T &lt;&gt; \\&lt;^typ&gt;‹nat ⇒ nat ⇒ <br>\nnat› then t<br>\n         else \\&lt;^instantiate&gt;‹'a = ‹T› in term ‹DUMMY :: 'a ⇒ 'a›› $ t<br>\n     | tag_consts t = t<br>\nin<br>\nval _ =<br>\n   Context.&gt;&gt; (Syntax_Phases.term_uncheck 0 \"foo\"<br>\n     (fn ctxt =&gt; fn ts =&gt; if Config.get ctxt tag_consts_switch then map <br>\ntag_consts ts else ts))<br>\nend<br>\n›</p>\n<p>notation (output) DUMMY (\"⟨_⟩\")</p>\n<p>lemma \"(∑k≤n. k * k) = n * (n+1) * (2*n+1) div (6::nat)\"<br>\n   using [[tag_consts]]</p>\n<p>(* Output: (∑k≤n. ⟨(<em>)⟩ k k) = ⟨(div)⟩ (⟨(</em>)⟩ (⟨(*)⟩ n (⟨(+)⟩ n 1)) <br>\n(⟨(+)⟩ (⟨(*)⟩ 2 n) 1)) 6 *)</p>\n<p>Since there's no way to remove unchecking phases (as far as I am aware) <br>\nI added an attribute to switch the special printing on and off. I'm a <br>\nbit unsure about adding this unchecking phase with priority 0 (like the <br>\ninternal ones), but the abbreviation phase runs with priority 1 and <br>\nmight interfere with the tagging. So I guess it depends on what <br>\nbehaviour you want: if in the case of e.g. \"x ^ 2\" want to see the <br>\nunderlying constant \"^\" and modify that, you want to use priority 0 like <br>\nI did. If you want to see the abbreviation \"power2 x\" instead, use <br>\npriority 2 or higher.</p>\n<p>With something like a print translation or AST print translation you <br>\ncould probably do much nastier things like reversing the names of <br>\nparticular constants, or switching out one constant for another.</p>\n<p>Manuel</p>\n<p>On 31/10/2024 09:46, Tobias Nipkow wrote:</p>\n<blockquote>\n<p>Dear List,</p>\n<p>Is there a hook where one can modify the way that names of constants <br>\nare printed?</p>\n<p>Thanks<br>\nTobias</p>\n</blockquote>",
        "id": 479856547,
        "sender_full_name": "Email Gateway",
        "timestamp": 1730374310
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nOn 31/10/2024 09:46, Tobias Nipkow wrote:</p>\n<blockquote>\n<p>Is there a hook where one can modify the way that names of constants are printed?</p>\n</blockquote>\n<p>You did not say much about the purpose of the exercise.</p>\n<p>Here is another possible answer:</p>\n<p>alias flatMap = List.map_filter<br>\n   term List.map_filter</p>\n<p>Makarius</p>",
        "id": 480800738,
        "sender_full_name": "Email Gateway",
        "timestamp": 1730841091
    },
    {
        "content": "<p>From: Manuel Eberl &lt;<a href=\"mailto:manuel@pruvisto.org\">manuel@pruvisto.org</a>&gt;<br>\nI know a little bit about Tobias's use case: the idea is that he wants <br>\nto print some constants in different ways in the LaTeX output. For <br>\nexample, constants like \"T_foo\" should be printed as something like <br>\n\"\\textsf{T}_{\\textsf{foo}}\" and other constants \"bar\" should be printed <br>\nas \"\\textsf{bar}\".</p>\n<p>Right now we do roughly what I outlined in my last email, i.e. tagging <br>\nthe constants with a print_translation and then having a bunch of <br>\n\"notation (latex)\" commands to modify the way the tagged constants get <br>\nprinted.</p>\n<p>A better way to address this would probably be to somehow hook into <br>\ndocument preparation, but I don't know how to do that.</p>\n<p>Manuel</p>\n<p>On 05/11/2024 22:11, Makarius wrote:</p>\n<blockquote>\n<p>On 31/10/2024 09:46, Tobias Nipkow wrote:</p>\n<blockquote>\n<p>Is there a hook where one can modify the way that names of constants <br>\nare printed?</p>\n</blockquote>\n<p>You did not say much about the purpose of the exercise.</p>\n<p>Here is another possible answer:</p>\n<p>alias flatMap = List.map_filter<br>\n  term List.map_filter</p>\n<p>Makarius</p>\n</blockquote>",
        "id": 480888979,
        "sender_full_name": "Email Gateway",
        "timestamp": 1730889060
    },
    {
        "content": "<p>From: Manuel Eberl &lt;<a href=\"mailto:manuel@pruvisto.org\">manuel@pruvisto.org</a>&gt;<br>\nI guess the most robust option would be if the document system were to <br>\noutput constant names as something like \"\\isaconst{length}\" instead of <br>\njust \"length\", and perhaps similarly for free/bound variables, schematic <br>\nvariables, etc. This is already done e.g. for \\isadigit. Then one could <br>\nsimply tweak the definition of the \\isa* LaTeX macros to achieve <br>\nwhatever effect one wants.</p>\n<p>However, I don't know how this would work with more complex constant <br>\nnames including e.g. Greek letters or subscripts.</p>\n<p>Manuel</p>\n<p>On 06/11/2024 11:00, Manuel Eberl wrote:</p>\n<blockquote>\n<p>I know a little bit about Tobias's use case: the idea is that he wants <br>\nto print some constants in different ways in the LaTeX output. For <br>\nexample, constants like \"T_foo\" should be printed as something like <br>\n\"\\textsf{T}_{\\textsf{foo}}\" and other constants \"bar\" should be <br>\nprinted as \"\\textsf{bar}\".</p>\n<p>Right now we do roughly what I outlined in my last email, i.e. tagging <br>\nthe constants with a print_translation and then having a bunch of <br>\n\"notation (latex)\" commands to modify the way the tagged constants get <br>\nprinted.</p>\n<p>A better way to address this would probably be to somehow hook into <br>\ndocument preparation, but I don't know how to do that.</p>\n<p>Manuel</p>\n<p>On 05/11/2024 22:11, Makarius wrote:</p>\n<blockquote>\n<p>On 31/10/2024 09:46, Tobias Nipkow wrote:</p>\n<blockquote>\n<p>Is there a hook where one can modify the way that names of constants <br>\nare printed?</p>\n</blockquote>\n<p>You did not say much about the purpose of the exercise.</p>\n<p>Here is another possible answer:</p>\n<p>alias flatMap = List.map_filter<br>\n  term List.map_filter</p>\n<p>Makarius</p>\n</blockquote>\n</blockquote>",
        "id": 481139423,
        "sender_full_name": "Email Gateway",
        "timestamp": 1730991666
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nOn 07/11/2024 15:52, Manuel Eberl wrote:</p>\n<blockquote>\n<p>I guess the most robust option would be if the document system were to output <br>\nconstant names as something like \"\\isaconst{length}\" instead of just \"length\", <br>\nand perhaps similarly for free/bound variables, schematic variables, etc. This <br>\nis already done e.g. for \\isadigit. Then one could simply tweak the definition <br>\nof the \\isa* LaTeX macros to achieve whatever effect one wants.</p>\n</blockquote>\n<p>Yes, this observation is correct. I will take a look before the Isabelle2025 <br>\nprocess starts, to see if it can be done properly now --- after so many <br>\nchanges of the inner-syntax engine.</p>\n<p>Makarius</p>",
        "id": 481303420,
        "sender_full_name": "Email Gateway",
        "timestamp": 1731068551
    }
]