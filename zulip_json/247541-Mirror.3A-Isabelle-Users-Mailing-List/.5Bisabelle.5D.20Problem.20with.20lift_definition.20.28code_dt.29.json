[
    {
        "content": "<p>From: \"Thiemann, René\" &lt;<a href=\"mailto:Rene.Thiemann@uibk.ac.at\">Rene.Thiemann@uibk.ac.at</a>&gt;<br>\nDear all,</p>\n<p>I recently observed a problem with a lift_definition in combination with (code_dt):</p>\n<p>Here is a minimal example: </p>\n<p>theory Foo<br>\n  imports Main<br>\nbegin</p>\n<p>typedef bounded_int = \"{x :: int . 0 &lt; x &amp; x &lt; 10}\" by (intro exI[of _ 1], auto)</p>\n<p>setup_lifting type_definition_bounded_int</p>\n<p>lift_definition (code_dt) bounded_int_of_int :: \"int ⇒ bounded_int option\" <br>\n  is \"% x. if 0 &lt; x &amp; x &lt; 10 then Some x else None\" <br>\n  by auto</p>\n<p>(* <br>\nTactic failed<br>\nThe error(s) above occurred for the goal statement⌂:<br>\nrel_fun (eq_onp (pred_option (λx. 0 &lt; x ∧ x &lt; 10))) (eq_onp (λx. 0 &lt; x ∧ x &lt; 10)) (case_option (Rep_bounded_int undefined) (λx2. x2))<br>\n (case_option (Rep_bounded_int undefined) (λx2. x2))<br>\n*)</p>\n<p>Strangely, if I just use a one-sided bound, e.g., by dropping the “x &lt; 10” requirement, or if I encapsulate the conjunction in a separate <br>\ndefinition “bounded x = (0 &lt; x &amp; x &lt; 10) … typedef bounded_int = {x :: int. bounded x}” then everything works out nicely.</p>\n<p>Best,<br>\nRené</p>",
        "id": 285940624,
        "sender_full_name": "Email Gateway",
        "timestamp": 1655132605
    }
]