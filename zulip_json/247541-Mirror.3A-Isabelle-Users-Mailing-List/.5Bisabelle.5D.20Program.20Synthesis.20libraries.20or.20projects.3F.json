[
    {
        "content": "<p>From: Andrea Vezzosi &lt;<a href=\"mailto:vezzosi.ndr@gmail.com\">vezzosi.ndr@gmail.com</a>&gt;<br>\nHello,</p>\n<p>Are there Isabelle tools or formalizations in the area of program<br>\nsynthesis?</p>\n<p>Especially interested in ones for functional languages (e.g. (some subset<br>\nof) Haskell or ML), the end goal would be a tactic that given a<br>\nspecification and a partial program (i.e. with placeholders, aka typed<br>\nholes) produces a completed program, if possible.</p>\n<p>No particular constraints on the specification format, but the synthesis<br>\nshould be flexible in the form of programs that could be synthesized,<br>\nbecause I would like to support a variety of partial programs as inputs.</p>\n<p>Best regards,<br>\nAndrea</p>",
        "id": 533264874,
        "sender_full_name": "Email Gateway",
        "timestamp": 1754562968
    },
    {
        "content": "<p>From: Lawrence Paulson &lt;<a href=\"mailto:lp15@cam.ac.uk\">lp15@cam.ac.uk</a>&gt;<br>\nI am not aware of any. I played around with this sort of thing 40 years ago, in the context of Martin-LÃ¶f type theory. It was supposedly one of the main benefits of MLTT (as people argued at the time), but I found it really difficult.</p>\n<p>A bit later, a student of mine (Martin Coen) did some experiments and built what he called Classical Computational Logic for Untyped Lambda Calculus, which is still available in the distribution as Isabelle/CCL. His idea was to adopt some ideas from type theory while being classical, and giving up on the idea that the program you want will emerge from a natural proof. He was convinced (and I agree) that you are better off allowing the user to supply the program, which sounds a bit like what you are requesting. But nobody has touched this in 35 years. It's there if you want to take a look.</p>\n<p>Larry</p>\n<blockquote>\n<p>On 7 Aug 2025, at 11:35, Andrea Vezzosi &lt;<a href=\"mailto:vezzosi.ndr@gmail.com\">vezzosi.ndr@gmail.com</a>&gt; wrote:</p>\n<p>Are there Isabelle tools or formalizations in the area of program synthesis? </p>\n<p>Especially interested in ones for functional languages (e.g. (some subset of) Haskell or ML), the end goal would be a tactic that given a specification and a partial program (i.e. with placeholders, aka typed holes) produces a completed program, if possible.</p>\n<p>No particular constraints on the specification format, but the synthesis should be flexible in the form of programs that could be synthesized, because I would like to support a variety of partial programs as inputs.<br>\n</p>\n</blockquote>",
        "id": 533276151,
        "sender_full_name": "Email Gateway",
        "timestamp": 1754567128
    }
]