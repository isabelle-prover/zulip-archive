[
    {
        "content": "<p>From: wangsl &lt;<a href=\"mailto:cl-isabelle-users@lists.cam.ac.uk\">cl-isabelle-users@lists.cam.ac.uk</a>&gt;<br>\nDear Isabelle community,</p>\n<p>I'm using the verified ODE solver authored by Fabian Immler from the AFP <br>\nfor code generation:</p>\n<p>export_code one_step_until_time_impl_aform in SML</p>\n<p>then it produces the following error information:</p>\n<p>Dependency \"real\" :: \"metric_space\" -&gt; \"real\" :: \"t4_space\" would <br>\nresult in module dependency cycle</p>\n<p>I also tried the following:</p>\n<p>definition \"fs = one_step_until_time_impl_aform optnS 2 <br>\n(init_ode_ops False False (the_odo e1_fas true_form)) x0 False 1\"</p>\n<p>value fs</p>\n<p>It seems value generates code successfully but encounters an error at <br>\nrun time, part of the compile information is shown below:</p>\n<p>Warning: Value identifier (x) has not been referenced.<br>\n     At (line 10565 of \"generated code\")<br>\n     Warning: Value identifier (dummy) has not been referenced.<br>\n     At (line 10669 of \"generated code\")<br>\n     Exception- Fail \"division not by 2\" raised</p>\n<p>Has anyone encountered similar cycle dependency issues when exporting <br>\ncode from the verified ODE solver or similar AFP entries? Are there <br>\nknown workarounds for such export problems, particularly for numerical <br>\nODE solvers? I've observed that in the Isabelle libraries that <br>\nmetric_space is a subclass of t4_space, which aligns with our <br>\nmathematical understanding.</p>\n<p>Also, does there exist pre-generated code implementations for this ODE <br>\nsolver that we might have missed? We read Fabian Immler's work and <br>\nimplementaton and only find tactics for proving bounds on exact <br>\nsolutions of ODEs.</p>\n<p>Thank you very much for your time and help.</p>\n<p>Best regards,<br>\nShuling Wang<br>\nInstitute of Software, Chinese Academy of Sciences</p>",
        "id": 545261621,
        "sender_full_name": "Email Gateway",
        "timestamp": 1760611005
    },
    {
        "content": "<p>From: Florian Haftmann &lt;<a href=\"mailto:florian.haftmann@cit.tum.de\">florian.haftmann@cit.tum.de</a>&gt;<br>\nHi,</p>\n<blockquote>\n<p>I'm using the verified ODE solver authored by Fabian Immler from the AFP <br>\nfor code generation:</p>\n<p>export_code one_step_until_time_impl_aform in SML</p>\n<p>then it produces the following error information:</p>\n<p>Dependency \"real\" :: \"metric_space\" -&gt; \"real\" :: \"t4_space\" would <br>\nresult in module dependency cycle</p>\n</blockquote>\n<p>Try</p>\n<blockquote>\n<p>export_code one_step_until_time_impl_aform in SML module_name Example</p>\n</blockquote>\n<p>instead</p>\n<blockquote>\n<p>I also tried the following:</p>\n<p>definition \"fs = one_step_until_time_impl_aform optnS 2 <br>\n(init_ode_ops False False (the_odo e1_fas true_form)) x0 False 1\"</p>\n<p>value fs</p>\n<p>It seems value generates code successfully but encounters an error at <br>\nrun time, part of the compile information is shown below:</p>\n<p>Warning: Value identifier (x) has not been referenced.<br>\n     At (line 10565 of \"generated code\")<br>\n     Warning: Value identifier (dummy) has not been referenced.<br>\n     At (line 10669 of \"generated code\")<br>\n     Exception- Fail \"division not by 2\" raised</p>\n</blockquote>\n<p>It seems this can only be answered by the author of the entry providing <br>\nthat particular code setup <br>\n(<a href=\"https://www.isa-afp.org/entries/Affine_Arithmetic.html\">https://www.isa-afp.org/entries/Affine_Arithmetic.html</a>), which is also <br>\nFabian Immler.</p>\n<p>Cheers,<br>\n    Florian</p>\n<p><a href=\"/user_uploads/14278/hYGwWuj6RZBkpoJrZCCy4g_W/OpenPGP_0xA707172232CFA4E9.asc\">OpenPGP_0xA707172232CFA4E9.asc</a><br>\n<a href=\"/user_uploads/14278/ReWd-pUQiK6RQhCYmb2-qEXN/OpenPGP_signature.asc\">OpenPGP_signature.asc</a></p>",
        "id": 545276369,
        "sender_full_name": "Email Gateway",
        "timestamp": 1760613576
    },
    {
        "content": "<p>From: Manuel Eberl &lt;<a href=\"mailto:manuel@pruvisto.org\">manuel@pruvisto.org</a>&gt;<br>\nI don't know what this \"division not by 2\" error is about, but I can <br>\ntell you that the trick to solve the circular module dependency problem <br>\nis to do</p>\n<p>export_code one_step_until_time_impl_aform in SML module_name Foo</p>\n<p>where \"Foo\" is a name of your choice. That way, everything will be <br>\nexported into a single module and there will be no circular dependency <br>\nissues. If you export to a language like Haskell, this problem does not <br>\narise at all since Haskell has no problem with circular dependencies.</p>\n<p>Once you have successfully generated the code you can also search for <br>\n\"division not by 2\" in it and you might be able to figure out what the <br>\nissue is.</p>\n<p>Manuel</p>\n<p>On 16/10/2025 12:28, wangsl (via cl-isabelle-users Mailing List) wrote:</p>\n<blockquote>\n<p>Dear Isabelle community,</p>\n<p>I'm using the verified ODE solver authored by Fabian Immler from the <br>\nAFP for code generation:</p>\n<p>export_code one_step_until_time_impl_aform in SML</p>\n<p>then it produces the following error information:</p>\n<p>Dependency \"real\" :: \"metric_space\" -&gt; \"real\" :: \"t4_space\" would <br>\nresult in module dependency cycle</p>\n<p>I also tried the following:</p>\n<p>definition \"fs = one_step_until_time_impl_aform optnS 2 <br>\n(init_ode_ops False False (the_odo e1_fas true_form)) x0 False 1\"</p>\n<p>value fs</p>\n<p>It seems value generates code successfully but encounters an error at <br>\nrun time, part of the compile information is shown below:</p>\n<p>Warning: Value identifier (x) has not been referenced.<br>\n    At (line 10565 of \"generated code\")<br>\n    Warning: Value identifier (dummy) has not been referenced.<br>\n    At (line 10669 of \"generated code\")<br>\n    Exception- Fail \"division not by 2\" raised</p>\n<p>Has anyone encountered similar cycle dependency issues when exporting <br>\ncode from the verified ODE solver or similar AFP entries? Are there <br>\nknown workarounds for such export problems, particularly for numerical <br>\nODE solvers? I've observed that in the Isabelle libraries that <br>\nmetric_space is a subclass of t4_space, which aligns with our <br>\nmathematical understanding.</p>\n<p>Also, does there exist pre-generated code implementations for this ODE <br>\nsolver that we might have missed? We read Fabian Immler's work and <br>\nimplementaton and only find tactics for proving bounds on exact <br>\nsolutions of ODEs.</p>\n<p>Thank you very much for your time and help.</p>\n<p>Best regards,<br>\nShuling Wang<br>\nInstitute of Software, Chinese Academy of Sciences</p>\n</blockquote>",
        "id": 545276497,
        "sender_full_name": "Email Gateway",
        "timestamp": 1760613598
    },
    {
        "content": "<p>From: Fabian Immler &lt;<a href=\"mailto:fabian.immler@gmail.com\">fabian.immler@gmail.com</a>&gt;<br>\nHi,</p>\n<p>Glad to hear that you are trying to use my ODE solver :)</p>\n<p>My AFP entries modify the code setup for type “real”: reals are represented<br>\nas float, and not rat (as in the Isabelle distribution).<br>\nIn this code setup, division is only defined for powers of 2, and if your<br>\ncode attempts to divide by something else, it raises this exception.</p>\n<p>Did you perhaps specify some parameters in optnS (like stepsize or<br>\ntolerances) as a rational number (e.g. 0.1 or something like that)?</p>\n<p>Code for the ODE solver is generated only internally for the<br>\n@{computation_check …} oracle in theory Example_Utilities. If you do an<br>\nexport_code … in module …</p>\n<p>for any of the constants involved in that oracle declaration, you should<br>\nget the “right” code generated (assuming you import Example_Utilities to<br>\nget the correct code setup).</p>\n<p>Hope this helps, best wishes,</p>\n<p>Fabian</p>\n<p>On Thu, Oct 16, 2025 at 13:19 Florian Haftmann &lt;<a href=\"mailto:florian.haftmann@cit.tum.de\">florian.haftmann@cit.tum.de</a>&gt;<br>\nwrote:</p>\n<blockquote>\n<p>Hi,</p>\n<blockquote>\n<p>I'm using the verified ODE solver authored by Fabian Immler from the AFP<br>\nfor code generation:</p>\n<p>export_code one_step_until_time_impl_aform in SML</p>\n<p>then it produces the following error information:</p>\n<p>Dependency \"real\" :: \"metric_space\" -&gt; \"real\" :: \"t4_space\" would<br>\nresult in module dependency cycle</p>\n</blockquote>\n<p>Try</p>\n<blockquote>\n<p>export_code one_step_until_time_impl_aform in SML module_name Example</p>\n</blockquote>\n<p>instead</p>\n<blockquote>\n<p>I also tried the following:</p>\n<p>definition \"fs = one_step_until_time_impl_aform optnS 2<br>\n(init_ode_ops False False (the_odo e1_fas true_form)) x0 False 1\"</p>\n<p>value fs</p>\n<p>It seems value generates code successfully but encounters an error at<br>\nrun time, part of the compile information is shown below:</p>\n<p>Warning: Value identifier (x) has not been referenced.<br>\n     At (line 10565 of \"generated code\")<br>\n     Warning: Value identifier (dummy) has not been referenced.<br>\n     At (line 10669 of \"generated code\")<br>\n     Exception- Fail \"division not by 2\" raised</p>\n</blockquote>\n<p>It seems this can only be answered by the author of the entry providing<br>\nthat particular code setup<br>\n(<a href=\"https://www.isa-afp.org/entries/Affine_Arithmetic.html\">https://www.isa-afp.org/entries/Affine_Arithmetic.html</a>), which is also<br>\nFabian Immler.</p>\n<p>Cheers,<br>\n        Florian</p>\n</blockquote>",
        "id": 545758213,
        "sender_full_name": "Email Gateway",
        "timestamp": 1760796083
    },
    {
        "content": "<p>From: wangsl &lt;<a href=\"mailto:cl-isabelle-users@lists.cam.ac.uk\">cl-isabelle-users@lists.cam.ac.uk</a>&gt;<br>\nThank you all for your assistance.</p>\n<p>Following your suggestion, we have resolved the export_code question and <br>\ntry to debug the resulting runtime error.<br>\nWe are also checking if the error stems from the rational value setup in <br>\noptnS, as Fabian Immler (author of the ODE solver) mentioned in another <br>\nemail.</p>\n<p>Thanks,<br>\nShuling</p>\n<p>在 2025-10-16 19:19，Florian Haftmann 写道：</p>\n<blockquote>\n<p>Hi,</p>\n<blockquote>\n<p>I'm using the verified ODE solver authored by Fabian Immler from the <br>\nAFP for code generation:</p>\n<p>export_code one_step_until_time_impl_aform in SML</p>\n<p>then it produces the following error information:</p>\n<p>Dependency \"real\" :: \"metric_space\" -&gt; \"real\" :: \"t4_space\" would <br>\nresult in module dependency cycle</p>\n</blockquote>\n<p>Try</p>\n<blockquote>\n<p>export_code one_step_until_time_impl_aform in SML module_name Example</p>\n</blockquote>\n<p>instead</p>\n<blockquote>\n<p>I also tried the following:</p>\n<p>definition \"fs = one_step_until_time_impl_aform optnS 2 <br>\n(init_ode_ops False False (the_odo e1_fas true_form)) x0 False 1\"</p>\n<p>value fs</p>\n<p>It seems value generates code successfully but encounters an error at <br>\nrun time, part of the compile information is shown below:</p>\n<p>Warning: Value identifier (x) has not been referenced.<br>\n     At (line 10565 of \"generated code\")<br>\n     Warning: Value identifier (dummy) has not been referenced.<br>\n     At (line 10669 of \"generated code\")<br>\n     Exception- Fail \"division not by 2\" raised</p>\n</blockquote>\n<p>It seems this can only be answered by the author of the entry providing <br>\nthat particular code setup <br>\n(<a href=\"https://www.isa-afp.org/entries/Affine_Arithmetic.html\">https://www.isa-afp.org/entries/Affine_Arithmetic.html</a>), which is also <br>\nFabian Immler.</p>\n<p>Cheers,<br>\n  Florian</p>\n</blockquote>",
        "id": 545870047,
        "sender_full_name": "Email Gateway",
        "timestamp": 1760923394
    }
]