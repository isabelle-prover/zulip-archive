[
    {
        "content": "<p>From: \"\\\"Marmsoler, Diego\\\"\" &lt;<a href=\"mailto:cl-isabelle-users@lists.cam.ac.uk\">cl-isabelle-users@lists.cam.ac.uk</a>&gt;<br>\nHi List,</p>\n<p>I do have another question regarding the lifting/transfer package.<br>\nWhen I try to use the transfer proof method to transfer a lemma from one datatype to another it actually did not replace the terms accordingly.<br>\nI was able to do it by using transfer_step but it is a bit tedious and I am not sure if it is the way it is supposed to do it or if I am missing something here.</p>\n<p>Below is again a concrete example. The issue is with the proof of myfun2.</p>\n<p>(<strong>*</strong><strong>*</strong><strong>*</strong><strong>*</strong><strong>*</strong><strong>*</strong><strong>*</strong><strong>*</strong><strong>*</strong><strong>*</strong><strong>*</strong><strong>*</strong><strong>*</strong><strong>*</strong>)</p>\n<p>datatype 'a A =<br>\n  Value 'a</p>\n<p>datatype 'a B =<br>\n  Value 'a</p>\n<p>fun myfun1 where<br>\n  \"myfun1 (A.Value a) = a\"</p>\n<p>fun A_to_B where<br>\n  \"A_to_B (A.Value a) = (B.Value a)\"</p>\n<p>fun B_to_A where<br>\n  \"B_to_A (B.Value a) = (A.Value a)\"</p>\n<p>fun T where<br>\n  \"T (A.Value a) (B.Value b) = (a = b)\"</p>\n<p>lemma q: \" Quotient (=) A_to_B B_to_A T\"<br>\n  sorry</p>\n<p>setup_lifting q</p>\n<p>lift_definition myfun2::\"'a B ⇒ 'a\" is myfun1 .</p>\n<p>lemma myfun2: \"myfun2 (B.Value x) = x\"<br>\n  apply transfer_start<br>\n  apply (subgoal_tac \"Transfer.Rel (rel_fun (=) T) A.Value B.Value\", assumption)<br>\n  apply (simp add: Rel_def rel_funI)<br>\n  apply (subgoal_tac \"Transfer.Rel (rel_fun T (=)) myfun1 myfun2\",assumption)<br>\n  apply (metis B.pcr_cr_eq Rel_def myfun2.transfer)<br>\n  apply transfer_step<br>\n  apply transfer_step<br>\n  apply transfer_end<br>\n  by (simp add: transfer_forall_def)</p>\n<p>(<strong>*</strong><strong>*</strong><strong>*</strong><strong>*</strong><strong>*</strong><strong>*</strong><strong>*</strong><strong>*</strong><strong>*</strong><strong>*</strong><strong>*</strong><strong>*</strong><strong>*</strong><strong>*</strong>)</p>\n<p>Thanks a lot for your help!</p>\n<p>Diego</p>\n<p>Diego Marmsoler<br>\nSenior Lecturer (Education and Research), Computer Science<br>\nPI of Secure Smart Contracts with Isabelle/Solidity (<a href=\"https://sites.exeter.ac.uk/isabelle-solidity/\">https://sites.exeter.ac.uk/isabelle-solidity/</a>)<br>\nDeputy Director of Education and Student Experience<br>\nUniversity of Exeter, Innovation 1, Room 10<br>\nwww: marmsoler.com&lt;<a href=\"http://www.marmsoler.com/\">http://www.marmsoler.com/</a>&gt;<br>\nTwitter: @DiegoMarmsoler&lt;<a href=\"https://twitter.com/DiegoMarmsoler\">https://twitter.com/DiegoMarmsoler</a>&gt;</p>",
        "id": 525793321,
        "sender_full_name": "Email Gateway",
        "timestamp": 1750886915
    },
    {
        "content": "<p>From: Dmitriy Traytel &lt;<a href=\"mailto:cl-isabelle-users@lists.cam.ac.uk\">cl-isabelle-users@lists.cam.ac.uk</a>&gt;<br>\nHi Diego,</p>\n<p>You don’t have the transfer rule for B.Value that relates it to A.Value registered in your setup:</p>\n<p>lemma Value_transfer[transfer_rule]: \"rel_fun R (pcr_B R) A.Value B.Value\"<br>\n  by (auto simp: rel_fun_def pcr_B_def relcompp_apply intro!: exI[of _ \"A.Value _\"])</p>\n<p>Missing transfer rules are the main reason for transfer to fail. You can inspect existing transfer rules by looking at the theorem transfer_raw. E.g., when searching for B.Value you will see that there is only a parametricity rule for it (one that relates B.Value to another B.Value with a different type) if you do not issue the above declaration.</p>\n<p>Best wishes,<br>\nDmitriy</p>\n<p>On 25 Jun 2025, at 23.28, Marmsoler, Diego &lt;<a href=\"mailto:cl-isabelle-users@lists.cam.ac.uk\">cl-isabelle-users@lists.cam.ac.uk</a>&gt; wrote:</p>\n<p>Hi List,</p>\n<p>I do have another question regarding the lifting/transfer package.<br>\nWhen I try to use the transfer proof method to transfer a lemma from one datatype to another it actually did not replace the terms accordingly.<br>\nI was able to do it by using transfer_step but it is a bit tedious and I am not sure if it is the way it is supposed to do it or if I am missing something here.</p>\n<p>Below is again a concrete example. The issue is with the proof of myfun2.</p>\n<p>(<strong>*</strong><strong>*</strong><strong>*</strong><strong>*</strong><strong>*</strong><strong>*</strong><strong>*</strong><strong>*</strong><strong>*</strong><strong>*</strong><strong>*</strong><strong>*</strong><strong>*</strong><strong>*</strong>)</p>\n<p>datatype 'a A =<br>\n  Value 'a</p>\n<p>datatype 'a B =<br>\n  Value 'a</p>\n<p>fun myfun1 where<br>\n  \"myfun1 (A.Value a) = a\"</p>\n<p>fun A_to_B where<br>\n  \"A_to_B (A.Value a) = (B.Value a)\"</p>\n<p>fun B_to_A where<br>\n  \"B_to_A (B.Value a) = (A.Value a)\"</p>\n<p>fun T where<br>\n  \"T (A.Value a) (B.Value b) = (a = b)\"</p>\n<p>lemma q: \" Quotient (=) A_to_B B_to_A T\"<br>\n  sorry</p>\n<p>setup_lifting q</p>\n<p>lift_definition myfun2::\"'a B ⇒ 'a\" is myfun1 .</p>\n<p>lemma myfun2: \"myfun2 (B.Value x) = x\"<br>\n  apply transfer_start<br>\n  apply (subgoal_tac \"Transfer.Rel (rel_fun (=) T) A.Value B.Value\", assumption)<br>\n  apply (simp add: Rel_def rel_funI)<br>\n  apply (subgoal_tac \"Transfer.Rel (rel_fun T (=)) myfun1 myfun2\",assumption)<br>\n  apply (metis B.pcr_cr_eq Rel_def myfun2.transfer)<br>\n  apply transfer_step<br>\n  apply transfer_step<br>\n  apply transfer_end<br>\n  by (simp add: transfer_forall_def)</p>\n<p>(<strong>*</strong><strong>*</strong><strong>*</strong><strong>*</strong><strong>*</strong><strong>*</strong><strong>*</strong><strong>*</strong><strong>*</strong><strong>*</strong><strong>*</strong><strong>*</strong><strong>*</strong><strong>*</strong>)</p>\n<p>Thanks a lot for your help!</p>\n<p>Diego</p>\n<p>Diego Marmsoler<br>\nSenior Lecturer (Education and Research), Computer Science<br>\nPI of Secure Smart Contracts with Isabelle/Solidity (<a href=\"https://sites.exeter.ac.uk/isabelle-solidity/&lt;https://sites.exeter.ac.uk/isabelle-solidity/\">https://sites.exeter.ac.uk/isabelle-solidity/&lt;https://sites.exeter.ac.uk/isabelle-solidity/</a>&gt;)<br>\nDeputy Director of Education and Student Experience<br>\nUniversity of Exeter, Innovation 1, Room 10<br>\nwww: marmsoler.com&lt;<a href=\"http://www.marmsoler.com/\">http://www.marmsoler.com/</a>&gt;<br>\nTwitter: @DiegoMarmsoler&lt;<a href=\"https://twitter.com/DiegoMarmsoler\">https://twitter.com/DiegoMarmsoler</a>&gt;</p>",
        "id": 525827552,
        "sender_full_name": "Email Gateway",
        "timestamp": 1750916756
    }
]