[
    {
        "content": "<p>From: \"Luckhardt, Daniel\" &lt;<a href=\"mailto:daniel.luckhardt@mathematik.uni-goettingen.de\">daniel.luckhardt@mathematik.uni-goettingen.de</a>&gt;<br>\nHi,</p>\n<p>I want to tell Isabelle that the bounded linear functions from a real normed vector space to itself form a real normed algebra. My approach is to formalize it parallel to and basing on what is already in the theory Bounded_Linear_Function, namely</p>\n<p>typedef ‹tag important› (overloaded) ('a, 'b) blinfun (\"(_ ⇒⇩L /_)\" [22, 21] 21) =<br>\n  \"{f::'a::real_normed_vector⇒'b::real_normed_vector. bounded_linear f}\"<br>\n  morphisms blinfun_apply Blinfun<br>\n  by (blast intro: bounded_linear_intros)</p>\n<p>So my attempt is</p>\n<p>typedef ‹tag important› (overloaded) ('a) blinalg  =<br>\n  \"UNIV :: ('a ⇒⇩L 'a) set\"<br>\n  morphisms blinalg_apply Blinalg<br>\nby simp</p>\n<p>But unfortunately, when I want to do the instantiation</p>\n<p>instantiation blinalg :: (real_normed_vector) real_normed_algebra<br>\nbegin<br>\nlift_definition times_blinalg :: \"('a ⇒⇩L 'a) ⇒ ('a ⇒⇩L 'a) ⇒ ('a ⇒⇩L 'a)\" is \"λ a b x. a (b x)\"  by (rule bounded_linear_compose)</p>\n<p>lift_definition norm_blinalg :: \"'a ⇒⇩L 'a ⇒ real\" is onorm .<br>\n...<br>\nend</p>\n<p>there is a conflict with the instantiation of blinfun as real_normed_vector. The error message is</p>\n<p>Clash of specifications for norm:<br>\n  \"Play_type.norm_blinfun_inst.norm_blinfun_def\"⌂<br>\n  \"Bounded_Linear_Function.norm_blinfun_inst.norm_blinfun_def\"⌂<br>\nThe error(s) above occurred in definition \"norm_blinfun_def\":<br>\n  \"norm ≡ Play_type.norm_blinfun_inst.norm_blinfun\"</p>\n<p>How do I get around this?</p>\n<p>Secondary questions:</p>\n<p>1.  What is the function of  \"setup_lifting type_definition_blinfun\" where is it documented?<br>\n  2.  What is the difference (if it exists) between \"definition\" and \"lift_definition\" (besides that the syntax is a bit different)<br>\n  3.  What is the \"morphisms\" doing, where is it documented?</p>\n<p>Daniel</p>",
        "id": 238543371,
        "sender_full_name": "Email Gateway",
        "timestamp": 1620853101
    },
    {
        "content": "<p>From: Fabian Immler via Cl-isabelle-users &lt;<a href=\"mailto:cl-isabelle-users@lists.cam.ac.uk\">cl-isabelle-users@lists.cam.ac.uk</a>&gt;<br>\nHi Daniel,</p>\n<p>The AFP already contains such a formalisation, very similar to your approach:<br>\n<a href=\"https://www.isa-afp.org/browser_info/current/AFP/Ordinary_Differential_Equations/Bounded_Linear_Operator.html\">https://www.isa-afp.org/browser_info/current/AFP/Ordinary_Differential_Equations/Bounded_Linear_Operator.html</a> &lt;<a href=\"https://www.isa-afp.org/browser_info/current/AFP/Ordinary_Differential_Equations/Bounded_Linear_Operator.html\">https://www.isa-afp.org/browser_info/current/AFP/Ordinary_Differential_Equations/Bounded_Linear_Operator.html</a>&gt;</p>\n<p>setup_lifting is documented in the Isabelle/Isar Reference Manual (11.9.2 Lifting Package).<br>\n<a href=\"https://isabelle.in.tum.de/dist/Isabelle2021/doc/isar-ref.pdf\">https://isabelle.in.tum.de/dist/Isabelle2021/doc/isar-ref.pdf</a> &lt;<a href=\"https://isabelle.in.tum.de/dist/Isabelle2021/doc/isar-ref.pdf\">https://isabelle.in.tum.de/dist/Isabelle2021/doc/isar-ref.pdf</a>&gt;</p>\n<p>In your example, \"setup_lifting type_definition_blinalg\" sets up the Lifting Package such that you can define constants involving the type “‘a blinalg” in terms of constants involving the concrete type “(‘a, ‘a) blinfun”.</p>\n<p>For the instantiation of “norm_blinalg\", you have to provide a definition for the type that you want to instantiate (\"‘a blinalg”), i.e., the following should work (with \"setup_lifting type_definition_blinalg” after your typedef):</p>\n<p>lift_definition norm_blinalg :: \"'a blinalg ⇒ real\" is norm .</p>\n<p>Hope this helps,<br>\nFabian</p>",
        "id": 238784459,
        "sender_full_name": "Email Gateway",
        "timestamp": 1621006098
    }
]