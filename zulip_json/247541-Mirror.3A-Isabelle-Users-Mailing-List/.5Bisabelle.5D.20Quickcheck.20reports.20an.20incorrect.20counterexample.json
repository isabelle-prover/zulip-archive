[
    {
        "content": "<p>From: \"Eugene W. Stark\" &lt;<a href=\"mailto:isabelle-users@starkeffect.com\">isabelle-users@starkeffect.com</a>&gt;<br>\nFor lemma BAD below (theory also attached), Quickcheck reports an incorrect counterexample.<br>\nX = Var 0 and Y = Var 1 are not consistent with the hypothesis Src X = Var x ∧ Src Y = Var x.</p>\n<p>A checked proof of the supposedly incorrect lemma is given.</p>\n<p>- Gene Stark</p>\n<hr>\n<p>theory Barf<br>\nimports Main<br>\nbegin</p>\n<p>datatype lambda =<br>\n    Nil<br>\n  | Var nat<br>\n  | Lam lambda<br>\n  | App lambda lambda<br>\n  | App' lambda lambda</p>\n<p>fun Ide<br>\n  where \"Ide Nil = False\"<br>\n      | \"Ide (Var i) = True\"<br>\n      | \"Ide (Lam M) = Ide M\"<br>\n      | \"Ide (App X Y) = (Ide X ∧ Ide Y)\"<br>\n      | \"Ide (App' X Y) = False\"</p>\n<p>fun raise<br>\n  where \"raise Nil = Nil\"<br>\n      | \"raise (Var i) = Var (Suc i)\"<br>\n      | \"raise (Lam M) = Lam (raise M)\"<br>\n      | \"raise (App M N) = App (raise M) (raise N)\"<br>\n      | \"raise (App' M N) = App' (raise M) (raise N)\"</p>\n<p>fun subst<br>\n  where \"subst X Nil = Nil\"<br>\n      | \"subst X (Var 0) = X\"<br>\n      | \"subst X (Var i) = Var i\"<br>\n      | \"subst X (Lam M) = Lam (subst (raise X) M)\"<br>\n      | \"subst X (App M N) = App (subst X M) (subst X N)\"<br>\n      | \"subst X (App' M N) = App' (subst X M) (subst X N)\"</p>\n<p>fun Src<br>\n  where \"Src Nil = Nil\"<br>\n      | \"Src (Var i) = Var i\"<br>\n      | \"Src (Lam M) = Lam (Src M)\"<br>\n      | \"Src (App M N) = App (Src M) (Src N)\"<br>\n      | \"Src (App' M N) = App (Src M) (Src N)\"</p>\n<p>abbreviation Coinitial<br>\n  where \"Coinitial X Y ≡ Src X = Src Y\"</p>\n<p>fun resid<br>\n  where \"resid (Var i) (Var i') = (if i = i' then Var i else Nil)\"<br>\n      | \"resid (Lam M) (Lam M') = (if Coinitial M M' then Nil else Lam (resid M M'))\"<br>\n      | \"resid (App M N) (App M' N') = (if Coinitial M M' ∧ Coinitial N N'<br>\n                                        then App (resid M M') (resid N N') else Nil)\"<br>\n      | \"resid (App M N) (App' M' N') = (if Coinitial M M' ∧ Coinitial N N'<br>\n                                         then subst (resid M M') (resid N N') else Nil)\"<br>\n      | \"resid (App' M N) (App' M' N') = (if Coinitial M M' ∧ Coinitial N N'<br>\n                                         then subst (resid M M') (resid N N') else Nil)\"<br>\n      | \"resid (App' M N) (App M' N') = (if Coinitial M M' ∧ Coinitial N N'<br>\n                                         then App' (resid M M') (resid N N') else Nil)\"<br>\n      | \"resid _ _ = Nil\"</p>\n<p>lemma BAD:<br>\n  shows \"⋀x. Ide (Var x) ⟹ ∀X Y. Src X = Var x ∧ Src Y = Var x ⟶ resid X Y ≠ Nil\"<br>\n  (*<br>\n     proof (prove)<br>\n     goal (1 subgoal):</p>\n<p>1. ⋀x. Ide (Var x) ⟹ ∀X Y. Src X = Var x ∧ Src Y = Var x ⟶ resid X Y ≠ lambda.Nil<br>\n     Auto Quickcheck found a counterexample:<br>\n       x = 0<br>\n       X = Var 0<br>\n       Y = Var 1<br>\n   *)<br>\n  proof -<br>\n    fix x<br>\n    show \"∀X Y. Src X = Var x ∧ Src Y = Var x ⟶ resid X Y ≠ Nil\"<br>\n    proof (intro allI impI, elim conjE)<br>\n      fix X Y<br>\n      assume X: \"Src X = Var x\" and Y: \"Src Y = Var x\"<br>\n      show \"resid X Y ≠ Nil\"<br>\n        using X Y<br>\n        apply (cases X)<br>\n            apply auto<br>\n        apply (cases Y)<br>\n        by auto<br>\n    qed<br>\n  qed</p>\n<p>end<br>\n<a href=\"/user_uploads/14278/mlIuBWY8McCaLbe6d1k5MqFI/Barf.thy\">Barf.thy</a></p>",
        "id": 234046736,
        "sender_full_name": "Email Gateway",
        "timestamp": 1618149386
    },
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\nEugene,</p>\n<p>Thanks for this curious example. It looks like there is a bug in the treatment <br>\nof (outermost) universal quantifiers as opposed to free variables. When you <br>\nremove the !!x, the problem goes away. It seems nobody ever noticed because most <br>\nof the time one drops these outermost universals.</p>\n<p>Tobias</p>\n<p>On 11/04/2021 15:55, Eugene W. Stark wrote:</p>\n<blockquote>\n<p>For lemma BAD below (theory also attached), Quickcheck reports an incorrect counterexample.<br>\nX = Var 0 and Y = Var 1 are not consistent with the hypothesis Src X = Var x ∧ Src Y = Var x.</p>\n<p>A checked proof of the supposedly incorrect lemma is given.</p>\n<p>- Gene Stark</p>\n<hr>\n<p>theory Barf<br>\nimports Main<br>\nbegin</p>\n<p>datatype lambda =<br>\n     Nil<br>\n   | Var nat<br>\n   | Lam lambda<br>\n   | App lambda lambda<br>\n   | App' lambda lambda</p>\n<p>fun Ide<br>\n   where \"Ide Nil = False\"<br>\n       | \"Ide (Var i) = True\"<br>\n       | \"Ide (Lam M) = Ide M\"<br>\n       | \"Ide (App X Y) = (Ide X ∧ Ide Y)\"<br>\n       | \"Ide (App' X Y) = False\"</p>\n<p>fun raise<br>\n   where \"raise Nil = Nil\"<br>\n       | \"raise (Var i) = Var (Suc i)\"<br>\n       | \"raise (Lam M) = Lam (raise M)\"<br>\n       | \"raise (App M N) = App (raise M) (raise N)\"<br>\n       | \"raise (App' M N) = App' (raise M) (raise N)\"</p>\n<p>fun subst<br>\n   where \"subst X Nil = Nil\"<br>\n       | \"subst X (Var 0) = X\"<br>\n       | \"subst X (Var i) = Var i\"<br>\n       | \"subst X (Lam M) = Lam (subst (raise X) M)\"<br>\n       | \"subst X (App M N) = App (subst X M) (subst X N)\"<br>\n       | \"subst X (App' M N) = App' (subst X M) (subst X N)\"</p>\n<p>fun Src<br>\n   where \"Src Nil = Nil\"<br>\n       | \"Src (Var i) = Var i\"<br>\n       | \"Src (Lam M) = Lam (Src M)\"<br>\n       | \"Src (App M N) = App (Src M) (Src N)\"<br>\n       | \"Src (App' M N) = App (Src M) (Src N)\"</p>\n<p>abbreviation Coinitial<br>\n   where \"Coinitial X Y ≡ Src X = Src Y\"</p>\n<p>fun resid<br>\n   where \"resid (Var i) (Var i') = (if i = i' then Var i else Nil)\"<br>\n       | \"resid (Lam M) (Lam M') = (if Coinitial M M' then Nil else Lam (resid M M'))\"<br>\n       | \"resid (App M N) (App M' N') = (if Coinitial M M' ∧ Coinitial N N'<br>\n                                         then App (resid M M') (resid N <br>\nN') else Nil)\"<br>\n       | \"resid (App M N) (App' M' N') = (if Coinitial M M' ∧ <br>\nCoinitial N N'<br>\n                                          then subst (resid M M') (resid N N') else Nil)\"<br>\n       | \"resid (App' M N) (App' M' N') = (if Coinitial M M' ∧ <br>\nCoinitial N N'<br>\n                                          then subst (resid M M') (resid N N') else Nil)\"<br>\n       | \"resid (App' M N) (App M' N') = (if Coinitial M M' ∧ <br>\nCoinitial N N'<br>\n                                          then App' (resid M M') (resid <br>\nN N') else Nil)\"<br>\n       | \"resid _ _ = Nil\"</p>\n<p>lemma BAD:<br>\n   shows \"⋀x. Ide (Var x) ⟹ ∀X Y. Src X = Var <br>\nx ∧ Src Y = Var x ⟶ resid X Y ≠ Nil\"<br>\n   (*<br>\n      proof (prove)<br>\n      goal (1 subgoal):<br>\n       1. ⋀x. Ide (Var x) ⟹ ∀X Y. Src X = Var <br>\nx ∧ Src Y = Var x ⟶ resid X Y ≠ lambda.Nil<br>\n      Auto Quickcheck found a counterexample:<br>\n        x = 0<br>\n        X = Var 0<br>\n        Y = Var 1<br>\n    *)<br>\n   proof -<br>\n     fix x<br>\n     show \"∀X Y. Src X = Var x ∧ Src Y = Var x ⟶ resid X Y ≠ Nil\"<br>\n     proof (intro allI impI, elim conjE)<br>\n       fix X Y<br>\n       assume X: \"Src X = Var x\" and Y: \"Src Y = Var x\"<br>\n       show \"resid X Y ≠ Nil\"<br>\n         using X Y<br>\n         apply (cases X)<br>\n             apply auto<br>\n         apply (cases Y)<br>\n         by auto<br>\n     qed<br>\n   qed</p>\n<p>end</p>\n<p><a href=\"/user_uploads/14278/bsrxATkl7cuglp9nGPsUYJka/smime.p7s\">smime.p7s</a></p>\n</blockquote>",
        "id": 234127173,
        "sender_full_name": "Email Gateway",
        "timestamp": 1618218948
    },
    {
        "content": "<p>From: Florian Haftmann &lt;<a href=\"mailto:florian.haftmann@informatik.tu-muenchen.de\">florian.haftmann@informatik.tu-muenchen.de</a>&gt;<br>\nHi all,</p>\n<p>this is due to an erroneous handling of variable names in the quickcheck<br>\nframework, which will disappear in the next Isabelle release.</p>\n<p>See also <a href=\"https://isabelle.in.tum.de/repos/isabelle/rev/ed5226fdf89d\">https://isabelle.in.tum.de/repos/isabelle/rev/ed5226fdf89d</a></p>\n<p>Cheers,<br>\n    Florian<br>\n<a href=\"/user_uploads/14278/-0IisdyG44DqEPbOUSR10PyP/OpenPGP_signature\">OpenPGP_signature</a></p>",
        "id": 234796639,
        "sender_full_name": "Email Gateway",
        "timestamp": 1618550888
    }
]