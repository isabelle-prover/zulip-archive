[
    {
        "content": "<p>From: Jelena Markovic &lt;<a href=\"mailto:jelena.markovic.10.11@gmail.com\">jelena.markovic.10.11@gmail.com</a>&gt;<br>\nIs there some way to use quotient_type inside locale? Currently we use<br>\nquotient_type with axiomatization, but it's not what we wanted to do. Can<br>\nwe connect these two somehow?</p>",
        "id": 318477512,
        "sender_full_name": "Email Gateway",
        "timestamp": 1672343249
    },
    {
        "content": "<p>From: Florian Haftmann &lt;<a href=\"mailto:florian.haftmann@informatik.tu-muenchen.de\">florian.haftmann@informatik.tu-muenchen.de</a>&gt;<br>\nHi Jelena,</p>\n<p>Am 29.12.22 um 11:38 schrieb Jelena Markovic:</p>\n<blockquote>\n<p>Is there some way to use quotient_type inside locale? Currently we use <br>\nquotient_type with axiomatization, but it's not what we wanted to do. <br>\nCan we connect these two somehow?</p>\n</blockquote>\n<p>your question is very implicit.</p>\n<p>Can you show an example which illustrates your issue?</p>\n<p>In principle, quotient_type can be used within locales</p>\n<blockquote>\n<p>locale foo =<br>\n  fixes bar :: ‹'a itself ⇒ nat›<br>\n  assumes ‹even (bar TYPE('a))›<br>\nbegin</p>\n<p>quotient_type int = ‹nat × nat› / intrel<br>\n  morphisms Rep_Integ Abs_Integ<br>\nproof (rule equivpI)<br>\n  show ‹reflp intrel› <br>\n    by (auto simp: reflp_def)<br>\n  show ‹symp intrel›<br>\n    by (auto simp: symp_def)<br>\n  show ‹transp intrel›<br>\n    by (auto simp: transp_def)<br>\nqed</p>\n<p>end</p>\n</blockquote>\n<p>as long as it does not depend on context parameters.</p>\n<p>Cheers,<br>\n    Florian<br>\n<a href=\"/user_uploads/14278/MVsl1ND-AGwNnvhQtQ44wPBy/OpenPGP_0xA707172232CFA4E9.asc\">OpenPGP_0xA707172232CFA4E9.asc</a><br>\n<a href=\"/user_uploads/14278/UQirtctVFeluhQbxNZ6WfC7A/OpenPGP_signature\">OpenPGP_signature</a></p>",
        "id": 318705587,
        "sender_full_name": "Email Gateway",
        "timestamp": 1672478360
    }
]