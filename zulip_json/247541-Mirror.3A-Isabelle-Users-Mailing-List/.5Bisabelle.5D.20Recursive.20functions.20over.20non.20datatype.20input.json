[
    {
        "content": "<p>From: Leo Freitas &lt;<a href=\"mailto:leo.freitas@newcastle.ac.uk\">leo.freitas@newcastle.ac.uk</a>&gt;<br>\nHello,</p>\n<p>I am trying to find a scheme for certain recursive functions over specific structured (non-data) types. Namely, recursion over sets, integers, etc.</p>\n<p>For example, sum over elements of a set of nat</p>\n<p>function<br>\n  sum :: \"nat set ⇒ nat\"<br>\n  where<br>\n  \"sum {} = 0\"<br>\n| \"x ∉ s ⟹ sum ({x} ∪ s) = x + (sum s)\"</p>\n<p>This leads to more involved pattern/termination proofs than I was hoping for.</p>\n<p>I wonder whether are there examples of recursive function definitions over such structured (non-data) types?</p>\n<p>Best regards,<br>\nLeo</p>",
        "id": 265673090,
        "sender_full_name": "Email Gateway",
        "timestamp": 1640084924
    },
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\nHi Leo,</p>\n<p>Patter matching doesn't really work on non-free types. For integers, you can <br>\njust write your function as you would in any programming language, e.g. with <br>\n\"-1\" on the rhs. For sets see this thread:<br>\n<a href=\"https://lists.cam.ac.uk/mailman/htdig/cl-isabelle-users/2008-November/msg00024.html\">https://lists.cam.ac.uk/mailman/htdig/cl-isabelle-users/2008-November/msg00024.html</a><br>\nEssentially: use Finite_Set.fold<br>\nYou find some examples in HOL/Relation.thy.</p>\n<p>Tobias<br>\n<a href=\"/user_uploads/14278/agcMLMSEeIsRieojLLQOZc_S/smime.p7s\">smime.p7s</a></p>",
        "id": 265674853,
        "sender_full_name": "Email Gateway",
        "timestamp": 1640086187
    }
]