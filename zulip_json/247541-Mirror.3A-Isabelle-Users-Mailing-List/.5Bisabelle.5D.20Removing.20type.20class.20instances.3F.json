[
    {
        "content": "<p>From: Liam O'Connor &lt;<a href=\"mailto:l.oconnor@ed.ac.uk\">l.oconnor@ed.ac.uk</a>&gt;<br>\nHi Isabelle-users,</p>\n<p>I am working with the Complete_Partial_Order theory (<a href=\"https://isabelle.in.tum.de/library/HOL/HOL/Complete_Partial_Order.html\">https://isabelle.in.tum.de/library/HOL/HOL/Complete_Partial_Order.html</a>) and I want to make function types an instance of the ccpo class if their result is (via pointwise lifting):</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">instantiation</span><span class=\"w\"> </span><span class=\"s\">\"fun\"</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">type</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">ccpo</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">ccpo</span>\n<span class=\"k\">begin</span>\n</code></pre></div>\n<p>But, annoyingly, because the Complete_Partial_Order theory imports Complete_Lattices, and there is such an instance for complete lattices, and all complete lattices are complete partial orders, there already is an instance for \"fun\", just for \"fun\" :: (type, complete_lattice) complete_lattice.</p>\n<p>I don't want this type class instance, because the ccpo I want to work with is not a complete lattice. Can I remove this instance somehow? Or is there some way to replace it with a more general one?</p>\n<p>With best wishes,<br>\nLiam O'Connor<br>\nThe University of Edinburgh is a charitable body, registered in Scotland, with registration number SC005336. Is e buidheann carthannais a th’ ann an Oilthigh Dhùn Èideann, clàraichte an Alba, àireamh clàraidh SC005336.</p>",
        "id": 353843658,
        "sender_full_name": "Email Gateway",
        "timestamp": 1682685661
    },
    {
        "content": "<p>From: Thomas Sewell &lt;<a href=\"mailto:tals4@cam.ac.uk\">tals4@cam.ac.uk</a>&gt;<br>\nThat sounds like a flaw in the typing hierarchy (which might be tricky to fix).</p>\n<p>Maybe there's a clean way to proceed, but failing that, we should also mention a known workaround. You could just work via (approximately) a type synonym.</p>\n<p>In full, you can name a new type isomorphic to the function type you need, and expose its lambda and apply operations. Since the new type has a new name, it can be admitted to the various type classes via a new set of canonical rules.</p>\n<p>I hope that helps. Well, no, I hope someone has a better idea, and so I'm not helping at all.</p>\n<p>Best wishes,<br>\n    Thomas.</p>",
        "id": 353884789,
        "sender_full_name": "Email Gateway",
        "timestamp": 1682690316
    },
    {
        "content": "<p>From: \"YAMADA, Akihisa\" &lt;<a href=\"mailto:ayamada@trs.cm.is.nagoya-u.ac.jp\">ayamada@trs.cm.is.nagoya-u.ac.jp</a>&gt;<br>\nDear Liam,</p>\n<p>one can use `instance' in this case:</p>\n<p>instance \"fun\" :: (type, ccpo) ccpo</p>\n<p>`instantiation' is for defining operators but Sup and Inf for fun are <br>\nalready defined properly.</p>\n<p>Best,<br>\nAkihisa</p>",
        "id": 354095309,
        "sender_full_name": "Email Gateway",
        "timestamp": 1682726159
    }
]