[
    {
        "content": "<p>From: \"Achim D. Brucker\" &lt;<a href=\"mailto:adbrucker@0x5f.org\">adbrucker@0x5f.org</a>&gt;<br>\nDear all,<br>\nI would like to collect feedback of an experimental implementation <br>\nof a new target language for Isabelle: F#. F# is a member of the ML<br>\nlanguage family on the dotnet platform.</p>\n<p>The current implementation is available as a branch (\"feature-codegen-fsharp\")<br>\nin a fork of Isabelle's Mercurial repository (i.e., the latest development<br>\nversion):</p>\n<p><a href=\"https://hg.logicalhacking.com/isabelle/shortlog/feature-codegen-fsharp\">https://hg.logicalhacking.com/isabelle/shortlog/feature-codegen-fsharp</a></p>\n<p>The current implementation is \"mature\" enough to successfully generate code for<br>\nthe \"Generate_*\" theory files (i.e., I tested the sessions HOL, HOL-Library, and<br>\nImperative_HOL). Of course, it is by far not as well tested (and, due to lack of<br>\nhardware, I did not test it on OS X) as the already supported target languages.<br>\nStill, I hope it is mature enough to collect feedback and discuss its future.</p>\n<p>To use the F# target, please follow, after cloning the Mercurial repository, the<br>\ninstruction in the file \"README_REPOSITORY\", i.e., the standard installation for<br>\nthe repository version of Isabelle. After these steps have been completed<br>\nsuccessfully, there should be three new Isabelle tools:</p>\n<ul>\n<li><code>isabelle dotnet_setup</code> - install dotnet (for F# support)</li>\n<li><code>isabelle dotnet</code> - invoke the dotnet CLI tool within the Isabelle environment</li>\n<li><code>isabelle fsi</code> - invoke the F# top-level within the Isabelle environment</li>\n</ul>\n<p>For using F# as a target language, you need to install dotnet using the <br>\n<code>isabelle dotnet_setup</code> tool. Just calling this tool, e.g., if you are in the <br>\ntoplevel directory of your repository clone:</p>\n<p>bin/isabelle dotnet_setup</p>\n<p>will download the dotnet SDK and install it into the directory<br>\n<code>$ISABELLE_HOME_USER/dotnet</code> (note, this requires ca. 500MB of disk space and a<br>\nworking Internet connection). After the installation of the dotnet SDK, you <br>\nshould be able to use F# as a new code generator target, e.g.,</p>\n<div class=\"codehilite\" data-code-language=\"isar\"><pre><span></span><code>export_code gcd \"F#\"\n</code></pre></div>\n<p>There are clearly areas for improvements and open issues. For example:</p>\n<ul>\n<li>\n<p>F# uses indentation for block structures. To make the compiler happy, I used<br>\n  Pretty.unbreakable a few times. I would be happy to learn, if there are better<br>\n  ways of pretty printing languages with a rather strict requirements on <br>\n  concrete syntax formatting.</p>\n</li>\n<li>\n<p>Any further testing is helpful (I am sure, there are still bugs in the generated<br>\n  code)</p>\n</li>\n<li>\n<p>The setup tool uses an installation script (bash/powershell) for the headless<br>\n  installation of dotnet. I tested it rather thoroughly on Linux and did also<br>\n  some quick tests on Windows. It should work on OS X as well, but I sadly could<br>\n  not test it. In general, this tooling (which is currently in the \"user space\"<br>\n  is an area where feedback is particularly welcomed)</p>\n</li>\n<li>\n<p>I am keen to learn what the best way for future maintenance is (Isabelle<br>\n  component, integration into the Isabelle main distribution, etc.).</p>\n</li>\n</ul>\n<p>Thanks a lot!</p>\n<p>Best,<br>\n    Achim</p>\n<p>PS: I would like to thank Florian Haftmann for the already provided<br>\n    help and feedback!</p>",
        "id": 290284425,
        "sender_full_name": "Email Gateway",
        "timestamp": 1658344463
    }
]