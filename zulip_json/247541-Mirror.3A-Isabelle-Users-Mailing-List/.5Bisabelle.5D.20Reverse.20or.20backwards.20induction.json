[
    {
        "content": "<p>From: Jørgen Villadsen &lt;<a href=\"mailto:cl-isabelle-users@lists.cam.ac.uk\">cl-isabelle-users@lists.cam.ac.uk</a>&gt;<br>\nHi,</p>\n<p>Asta Halkjær From and I find the following \"backwards induction\" useful:</p>\n<p>lemma distinct_back_induct [case_names Full Distinct Drop]:<br>\n  assumes ‹P xs› ‹distinct xs› ‹⋀x xs. P (x # xs) ⟹ distinct (x # xs) ⟹ P xs›<br>\n  shows ‹P []›<br>\n  using assms by (induct xs) (fast, metis distinct.simps(2))</p>\n<p>Is it already in the distribution, perhaps generalized to properties other than distinct?</p>\n<p>Regards, Jørgen</p>",
        "id": 292248287,
        "sender_full_name": "Email Gateway",
        "timestamp": 1659783684
    },
    {
        "content": "<p>From: Lawrence Paulson &lt;<a href=\"mailto:lp15@cam.ac.uk\">lp15@cam.ac.uk</a>&gt;<br>\nSomewhat to my surprise, I can’t find any sort of backwards induction for lists in the List theory. If we decided to add one, I would simplify it to something like</p>\n<p>lemma back_induct [case_names Base Step]:<br>\n  assumes ‹P xs› ‹⋀x xs. P (x # xs) ⟹ P xs›<br>\n  shows ‹P []›<br>\n  using assms by (induct xs) auto</p>\n<p>There are lots of properties you could conjoin with P, not just distinct.</p>\n<p>Larry</p>",
        "id": 292385693,
        "sender_full_name": "Email Gateway",
        "timestamp": 1659955536
    },
    {
        "content": "<p>From: Tjark Weber &lt;<a href=\"mailto:tjark.weber@it.uu.se\">tjark.weber@it.uu.se</a>&gt;<br>\nNote that the conclusion ‹P []› could be generalized:</p>\n<p>lemma:<br>\n  assumes ‹P xs› ‹⋀x xs. P (x # xs) ⟹ P xs›<br>\n  shows ‹P (drop n xs)›<br>\n  using assms<br>\n  by (induct xs arbitrary: n,<br>\n    metis drop_Nil,<br>\n    metis drop0 drop_Suc_Cons nat.exhaust)</p>\n<p>Best,<br>\nTjark</p>\n<p>När du har kontakt med oss på Uppsala universitet med e-post så innebär det att vi behandlar dina personuppgifter. För att läsa mer om hur vi gör det kan du läsa här: <a href=\"http://www.uu.se/om-uu/dataskydd-personuppgifter/\">http://www.uu.se/om-uu/dataskydd-personuppgifter/</a></p>\n<p>E-mailing Uppsala University means that we will process your personal data. For more information on how this is performed, please read here: <a href=\"http://www.uu.se/en/about-uu/data-protection-policy\">http://www.uu.se/en/about-uu/data-protection-policy</a></p>",
        "id": 292391758,
        "sender_full_name": "Email Gateway",
        "timestamp": 1659959763
    },
    {
        "content": "<p>From: Thomas Sewell &lt;<a href=\"mailto:tals4@cam.ac.uk\">tals4@cam.ac.uk</a>&gt;<br>\nIt might be worth mentioning another way to do this.</p>\n<p>You can state the property \"P (drop i xs)\" and show it by induction on i. This gives the same proof steps, give or take some fiddling with theorems like drop_Suc and tl_drop.</p>\n<p>Of course, it's not as neat as the custom induction in this particular problem, but it generalises to a few others as well.</p>\n<p>Cheers,<br>\n    Thomas.</p>",
        "id": 292399462,
        "sender_full_name": "Email Gateway",
        "timestamp": 1659964384
    }
]