[
    {
        "content": "<p>From: Thomas Sewell &lt;<a href=\"mailto:tals4@cam.ac.uk\">tals4@cam.ac.uk</a>&gt;<br>\nI've been solving some word problems bitwise using the new bit_simps <br>\nnamed<br>\ntheorem set.</p>\n<p>It's handy that this solves the old headache of trying to remember the<br>\n(eccentric) names of all the relevant theorems. I've used this in manual <br>\nproofs<br>\nand also gone as far as implementing a replacement for the old <br>\nWord_Bitwise,<br>\navoiding bit lists and instead just rewriting with bit_simps.</p>\n<p>I'd like to suggest some minor tweaks, and I'm interested in any <br>\ndiscussion<br>\nabout that. I also think my additions might be worth adding to Isabelle, <br>\nwhich<br>\nperhaps might involve follow-up on the isabelle-dev list.</p>\n<p>The bit_simps theorems simplify manual bitwise proofs. I'd suggest that <br>\nperhaps<br>\nthe bitwise theorems in the old-style compatibility theories should also <br>\nbe<br>\nadded to the set, e.g. rules about test_bit and shiftl in<br>\nTraditional_Infix_Syntax.</p>\n<p>Some of the generic theorems in bit_simps are a bit more awkward than <br>\nthe<br>\nword-specific theorems they replace.</p>\n<p>In particular, there's a common pattern of testing whether 2 ^ n = 0 on <br>\nthe<br>\nright hand side. I think that this should be given a name, e.g. a new <br>\nconstant<br>\nbit_exists. Rewrites for this constant (e.g. a variant of<br>\nWord.exp_eq_zero_iff) could be faster than expanding 2 ^ n to a concrete <br>\nvalue.<br>\nIt would also avoid an issue in which bit_simps converts bit properties <br>\nto word<br>\nequalities, and thus cannot be used at the same time as handy rewrites <br>\n(e.g.<br>\nWord.bit_word_eqI) which rewrite word equalities to bit equalities.</p>\n<p>Another minor inconvenience is that the bit_simps rewrites for shiftr1 <br>\nand<br>\ndrop_bit might introduce impossible bit checks on the right hand side, <br>\nwithout<br>\nrechecking 2 ^ n = 0 etc. My new bitwise expansion gadget needs an extra <br>\nphase<br>\nto clean up impossible bit checks, for instance.</p>\n<p>This alternative bitwise expansion needs far less supporting theory. <br>\nInstead<br>\nof list operations, a new constant called the carry value is used to <br>\ncapture<br>\nthe way carry bits ripple up through an addition. The various word <br>\ninequalities<br>\ncan also be rewritten as functions of the carry value. The theory about<br>\ncarry_val runs to roughly 150 lines, and I propose adding it to Word.thy<br>\nitself.</p>\n<p>The new bitwise gadget runs to a few hundred lines of ML code, mostly <br>\ndoing<br>\nspecial treatment of let-bindings. These are used to capture common <br>\nsubterms<br>\nand avoid term size explosion. It turns out that avoiding duplication is <br>\na<br>\ncrucial design goal, one that was not understood in the previous<br>\nimplementation. I attach my current working version in case anyone is<br>\ninterested. I'm interested in whether there are any obvious obstacles to<br>\nincluding that in Isabelle in a future version.</p>\n<p>Sincerely,<br>\n     Thomas.</p>",
        "id": 249253546,
        "sender_full_name": "Email Gateway",
        "timestamp": 1628783724
    },
    {
        "content": "<p>From: Thomas Sewell &lt;<a href=\"mailto:tals4@cam.ac.uk\">tals4@cam.ac.uk</a>&gt;<br>\nMy apologies, the relevant attachments were lost in the previous for <br>\nannoying<br>\nreasons. Attached.</p>\n<p>Best regards,<br>\n     Thomas.<br>\n<a href=\"/user_uploads/14278/jkK1znu_s9yTvVWwoT0glvDA/Carry_Val.thy\">Carry_Val.thy</a><br>\n<a href=\"/user_uploads/14278/iOc06sW7U9me-FkLsBype4KK/Word_Bitwise_Eq.thy\">Word_Bitwise_Eq.thy</a></p>",
        "id": 249255166,
        "sender_full_name": "Email Gateway",
        "timestamp": 1628784526
    }
]