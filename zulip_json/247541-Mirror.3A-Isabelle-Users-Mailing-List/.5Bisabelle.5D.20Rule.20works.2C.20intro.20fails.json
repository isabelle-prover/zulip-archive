[
    {
        "content": "<p>From: Dominic Mulligan &lt;<a href=\"mailto:cl-isabelle-users@lists.cam.ac.uk\">cl-isabelle-users@lists.cam.ac.uk</a>&gt;<br>\nHi,</p>\n<p>We have a case where an introduction rule cannot be applied with the<br>\n<code>intro</code> tactic (in an apply-style backwards-directed proof) but the same<br>\nrule can be successfully applied with the <code>rule</code> tactic.  Based on my<br>\n(perhaps overly simplistic) mental model of what these tactics do I would<br>\nhave expected <code>intro</code> to successfully progress a proof in any context where<br>\n<code>rule</code> does.  Is this incorrect?  What are the additional circumstances in<br>\nwhich <code>intro</code> can fail?</p>\n<p>Thanks,<br>\nDominic</p>",
        "id": 348417494,
        "sender_full_name": "Email Gateway",
        "timestamp": 1681208708
    },
    {
        "content": "<p>From: Manuel Eberl &lt;<a href=\"mailto:manuel@pruvisto.org\">manuel@pruvisto.org</a>&gt;<br>\nHard to say without concrete context, but one thing I can think of off <br>\nthe top of my head: \"rule\" will instantiate schematic variables; \"intro\" <br>\nwill not. So if the rule application requires instantiating schematic <br>\nvariables, that would explain the behaviour. I would have thought this <br>\nwould be documented in isar-ref, but apparently it isn't.</p>\n<p>The behaviour of these proof methods can indeed be a bit confusion. Also <br>\ne.g. the behaviour of rule/intro w.r.t. chained facts (and in fact the <br>\nsemantics of chained facts) is a frequent source of confusion for people <br>\nwhen they start writing Isar proofs.</p>\n<p>Manuel</p>",
        "id": 348467251,
        "sender_full_name": "Email Gateway",
        "timestamp": 1681220945
    },
    {
        "content": "<p>From: Dominic Mulligan &lt;<a href=\"mailto:cl-isabelle-users@lists.cam.ac.uk\">cl-isabelle-users@lists.cam.ac.uk</a>&gt;<br>\nYes, it appears from off-list suggestions from other people that schematic<br>\nvariables are to blame for the difference in behaviour between the tactics<br>\nin our case.  Unfortunately there does not appear to be an out-of-the-box<br>\nproof method (or is there?) that maximally applies a set of introduction<br>\nrules, like <code>intro</code>, works well with chained facts without needing an<br>\nexplicit insertion step, and instantiates schematics like <code>rule</code>.  Both<br>\n<code>intro thms</code> and <code>(rule thms)+</code> only seem to satisfy two out of the three<br>\nrequirements, albeit a different two.</p>\n<p>Thanks,<br>\nDom</p>",
        "id": 348471805,
        "sender_full_name": "Email Gateway",
        "timestamp": 1681221892
    },
    {
        "content": "<p>From: Peter Lammich &lt;<a href=\"mailto:lammich@in.tum.de\">lammich@in.tum.de</a>&gt;<br>\nYou could use Eisbach and rule_tac which automatically inlines chained <br>\nfacts (if inlining them is what you mean by \"working well\"):</p>\n<p>imports ... \"HOL-Eisbach.Eisbach\" ...</p>\n<p>...</p>\n<p>apply (repeat_new ‹rule_tac thms›)</p>",
        "id": 348476981,
        "sender_full_name": "Email Gateway",
        "timestamp": 1681222970
    }
]