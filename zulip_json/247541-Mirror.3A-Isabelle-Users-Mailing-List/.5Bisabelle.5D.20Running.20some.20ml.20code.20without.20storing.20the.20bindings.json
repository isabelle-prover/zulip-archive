[
    {
        "content": "<p>From: i n &lt;<a href=\"mailto:cl-isabelle-users@lists.cam.ac.uk\">cl-isabelle-users@lists.cam.ac.uk</a>&gt;<br>\nHi all,<br>\n    I'm wondering if there's a method to execute ML code without keeping its bindings while keeping state changes.<br>\nThis is meant to replace code that was done by Fabian immler/Jonas Rädle in their HOL4 in isabelle which I'm working on for the use of it as an IDE for HOL4.</p>\n<p>The code in question does ML ‹fun with_temp_ML_env f x =<br>\n  let<br>\n    val context = Context.the_generic_context()<br>\n    val res = f x<br>\n    val () = Context.&gt;&gt; (ML_Env.inherit [context])<br>\n  in res end<br>\n›which I believe is wrong due to it messing up synchronized variables and making them unusable.</p>\n<p>I think I should be using a Proof context, is that the right path?.</p>\n<p>Thanks,<br>\nIrvin</p>",
        "id": 485045723,
        "sender_full_name": "Email Gateway",
        "timestamp": 1732869011
    },
    {
        "content": "<p>From: Fabian Immler &lt;<a href=\"mailto:fabian.immler@gmail.com\">fabian.immler@gmail.com</a>&gt;<br>\nHi Irvin,</p>\n<p>I‘m not entirely sure what you mean by “state changes”.<br>\nSynchronized variables (in the sense of Synchronized.var) are mutable<br>\nreference cells, i.e., a pointer to some memory location, and therefore not<br>\nmanaged by Isabelle/ML’s context. If your code uses those, Isabelle’s IDE<br>\nwill “mess” with the contents of those cells, as they are not tied to the<br>\ncommand that modifies them.</p>\n<p>As far as I know, this can only be achieved by storing the values of such<br>\n“variables” in the context. See section 3.1 of our paper [1]. There we<br>\ndescribe how we mapped the type “ref” to a context-managed variables<br>\n“Context_Var.var”. I believe that you could achieve similar things by<br>\nre-defining Synchronized.var for your purposes.</p>\n<p>But also note the trick that we describe in section 3.2: it is critical for<br>\nperformance and to avoid memory leaks to distinguish “local state”<br>\nvariables and mark them explicitly in the HOL4 sources as Uref.t. But if<br>\nthere was a need to declare a variable as synchronized, it’s probably not<br>\n“local” in that sense…</p>\n<p>Let me know if that information helps.</p>\n<p>Best wishes,<br>\nFabian</p>\n<p>[1]<br>\n<a href=\"https://drops.dagstuhl.de/storage/00lipics/lipics-vol141-itp2019/LIPIcs.ITP.2019.21/LIPIcs.ITP.2019.21.pdf\">https://drops.dagstuhl.de/storage/00lipics/lipics-vol141-itp2019/LIPIcs.ITP.2019.21/LIPIcs.ITP.2019.21.pdf</a></p>\n<p>On Fri, Nov 29, 2024 at 10:14 i n &lt;<a href=\"mailto:cl-isabelle-users@lists.cam.ac.uk\">cl-isabelle-users@lists.cam.ac.uk</a>&gt; wrote:</p>\n<blockquote>\n<p>Hi all,<br>\n    I'm wondering if there's a method to execute ML code without keeping<br>\nits bindings while keeping state changes.<br>\nThis is meant to replace code that was done by Fabian immler/Jonas Rädle<br>\nin their HOL4 in isabelle which I'm working on for the use of it as an IDE<br>\nfor HOL4.</p>\n<p>The code in question does</p>\n<p>ML ‹fun with_temp_ML_env f x =  let    val context = Context.the_generic_context()    val res = f x    val () = Context.&gt;&gt; (ML_Env.inherit [context])  in res end›</p>\n<p>which I believe is wrong due to it messing up synchronized variables and<br>\nmaking them unusable.</p>\n<p>I think I should be using a Proof context, is that the right path?.</p>\n<p>Thanks,<br>\nIrvin<br>\n</p>\n</blockquote>",
        "id": 485763281,
        "sender_full_name": "Email Gateway",
        "timestamp": 1733205946
    }
]