[
    {
        "content": "<p>From: \"Daniel v. Kirschten\" &lt;<a href=\"mailto:daniel.kirschten@tum.de\">daniel.kirschten@tum.de</a>&gt;<br>\nHi all,</p>\n<p>I found a situation where Isabelle reports a segmentation fault, and I was<br>\ntold that this mailing list is the correct place to report this.</p>\n<p>I'm using Isabelle 2023 on a x64 Windows 11 machine, and the segmentation<br>\nfault occurs in an instance of veriT spawned by the \"try\" command. Below is a<br>\nMWE demonstrating this - it already contains the offending \"try\" (line 43).<br>\n(There doesn't seem to be a way to attach files on this mailing list, that's<br>\nwhy I inlcuded it in this message's body - sorry.)</p>\n<p>The concrete error message appears in the output windows, and on my machine,<br>\nit is as follows (note that I replaced my username with \"xyz\"):</p>\n<blockquote>\n<p>/cygdrive/c/Users/xyz/AppData/Local/Temp/isabelle/<br>\nbash_script15875907052655868959: Zeile 4:   675 Segmentation fault /cygdrive/<br>\ne/Programme/Programmierung/Isabelle/Isabelle2023/contrib/verit-2021.06.2-rmx/<br>\nx86_64-windows/veriT --proof-with-sharing --proof-define-skolems --proof-prune<br>\n--proof-merge --disable-print-success --disable-banner --index-sorts --index-<br>\nfresh-sorts --triggers-new --triggers-sel-rm-specific --max-time\\=7500 C:\\<br>\n\\Users\\\\xyz\\\\AppData\\\\Local\\\\Temp\\\\isabelle\\\\process3811362632330976021\\<br>\n\\cache-io-5406120 &gt; /cygdrive/c/Users/xyz/AppData/Local/Temp/isabelle/<br>\nprocess3811362632330976021/cache-io-5406122 2&gt;&amp;1</p>\n</blockquote>\n<p>Steps to reproduce:</p>\n<ul>\n<li>Open Isabelle 2023.</li>\n<li>Open Segfault.thy in Isabelle.</li>\n<li>\n<p>Move the cursor to the \"try\" in line 43 and wait for all background<br>\ntheories to finish.</p>\n</li>\n<li>\n<p>Wait for the \"try\" to finish. Observe the the segmentation fault message in<br>\nthe Output view (note that cvc4 even finds some proof).</p>\n</li>\n</ul>\n<p>Is there any additional info you need? Is this a known problem? If this<br>\nmailing list isn't the correct place to report this, where else should I<br>\nreport this, if at all?</p>\n<p>Kind regards,<br>\nDaniel v. Kirschten</p>\n<p>PS: At least for me, this doesn't have any priority. I stumbled upon this<br>\nwhile doing some homework which I have solved by now regardless. Also, I<br>\nactually found several instances of such a segfault during this homework, but<br>\nI only extracted a MWE for the first of them.</p>\n<p>theory Segfault<br>\n  imports \"HOL-IMP.Big_Step\" \"HOL-Library.Extended_Nat\"<br>\nbegin</p>\n<p>inductive<br>\n  big_step_t :: \"com \\&lt;times&gt; state \\&lt;Rightarrow&gt; nat \\&lt;Rightarrow&gt; state<br>\n\\&lt;Rightarrow&gt; bool\"  (\"_ \\&lt;Rightarrow&gt;^/_ _\" 55)<br>\nwhere<br>\nSkip: \"(SKIP, s) \\&lt;Rightarrow&gt;^1 s\" |<br>\nAssign: \"(x ::= a,s) \\&lt;Rightarrow&gt;^1 s(x := aval a s)\" |<br>\nSeq: \"\\&lt;lbrakk&gt; (c\\&lt;^sub&gt;1,s\\&lt;^sub&gt;1) \\&lt;Rightarrow&gt;^n\\&lt;^sub&gt;1 s\\&lt;^sub&gt;2;  (c<br>\n\\&lt;^sub&gt;2,s\\&lt;^sub&gt;2) \\&lt;Rightarrow&gt;^n\\&lt;^sub&gt;2 s\\&lt;^sub&gt;3; n\\&lt;^sub&gt;1+n\\&lt;^sub&gt;2 = n<br>\n\\&lt;^sub&gt;3 \\&lt;rbrakk&gt; \\&lt;Longrightarrow&gt; (c\\&lt;^sub&gt;1;;c\\&lt;^sub&gt;2, s\\&lt;^sub&gt;1)<br>\n\\&lt;Rightarrow&gt;^n\\&lt;^sub&gt;3 s\\&lt;^sub&gt;3\" |<br>\nIfTrue: \"\\&lt;lbrakk&gt; bval b s;  (c\\&lt;^sub&gt;1,s) \\&lt;Rightarrow&gt;^n\\&lt;^sub&gt;1 t; n<br>\n\\&lt;^sub&gt;3 = Suc n\\&lt;^sub&gt;1 \\&lt;rbrakk&gt; \\&lt;Longrightarrow&gt; (IF b THEN c\\&lt;^sub&gt;1 ELSE<br>\nc\\&lt;^sub&gt;2, s) \\&lt;Rightarrow&gt;^n\\&lt;^sub&gt;3 t\" |<br>\nIfFalse: \"\\&lt;lbrakk&gt; \\&lt;not&gt;bval b s;  (c\\&lt;^sub&gt;2,s) \\&lt;Rightarrow&gt;^n\\&lt;^sub&gt;2 t;<br>\nn\\&lt;^sub&gt;3 = Suc n\\&lt;^sub&gt;2 \\&lt;rbrakk&gt; \\&lt;Longrightarrow&gt; (IF b THEN c\\&lt;^sub&gt;1<br>\nELSE c\\&lt;^sub&gt;2, s) \\&lt;Rightarrow&gt;^n\\&lt;^sub&gt;3 t\" |<br>\nWhileFalse: \"\\&lt;lbrakk&gt; \\&lt;not&gt;bval b s \\&lt;rbrakk&gt; \\&lt;Longrightarrow&gt; (WHILE b DO<br>\nc, s) \\&lt;Rightarrow&gt;^1 s\" |<br>\nWhileTrue:<br>\n\"\\&lt;lbrakk&gt; bval b s\\&lt;^sub&gt;1;  (c,s\\&lt;^sub&gt;1) \\&lt;Rightarrow&gt;^n\\&lt;^sub&gt;1 s\\&lt;^sub&gt;2;<br>\n(WHILE b DO c, s\\&lt;^sub&gt;2) \\&lt;Rightarrow&gt;^n\\&lt;^sub&gt;2 s\\&lt;^sub&gt;3; n\\&lt;^sub&gt;1+n<br>\n\\&lt;^sub&gt;2+1 = n\\&lt;^sub&gt;3 \\&lt;rbrakk&gt;<br>\n  \\&lt;Longrightarrow&gt; (WHILE b DO c, s\\&lt;^sub&gt;1) \\&lt;Rightarrow&gt;^n\\&lt;^sub&gt;3 s<br>\n\\&lt;^sub&gt;3\"</p>\n<p>inductive_cases If_tE[elim!]: \"(IF b THEN c\\&lt;^sub&gt;1 ELSE c\\&lt;^sub&gt;2,s)<br>\n\\&lt;Rightarrow&gt;^x t\"</p>\n<p>type_synonym qassn = \"state \\&lt;Rightarrow&gt; enat\"</p>\n<p>fun emb :: \"bool \\&lt;Rightarrow&gt; enat\" (\"\\&lt;down&gt;\") where<br>\n   \"emb False = \\&lt;infinity&gt;\"<br>\n | \"emb True = 0\"</p>\n<p>definition hoare_Qvalid :: \"qassn \\&lt;Rightarrow&gt; com \\&lt;Rightarrow&gt; qassn<br>\n\\&lt;Rightarrow&gt; bool\"<br>\n  (\"\\&lt;Turnstile&gt;\\&lt;^sub&gt;Q {(1_)}/ (_)/ {(1_)}\" 50) where<br>\n\"\\&lt;Turnstile&gt;\\&lt;^sub&gt;Q {P} c {Q}  \\&lt;longleftrightarrow&gt;  (\\&lt;forall&gt;s.  P s &lt;<br>\n\\&lt;infinity&gt; \\&lt;longrightarrow&gt; (\\&lt;exists&gt;t p. ((c,s) \\&lt;Rightarrow&gt;^p t) \\&lt;and&gt;<br>\nP s \\&lt;ge&gt; p + Q t))\"</p>\n<p>theorem If_sound:<br>\n    assumes \"\\&lt;Turnstile&gt;\\&lt;^sub&gt;Q {\\&lt;lambda&gt;a. P a + \\&lt;down&gt; (bval b a)} c<br>\n\\&lt;^sub&gt;1 {Q}\"<br>\n      and \" \\&lt;Turnstile&gt;\\&lt;^sub&gt;Q {\\&lt;lambda&gt;a. P a + \\&lt;down&gt; (\\&lt;not&gt; bval b a)}<br>\nc\\&lt;^sub&gt;2 {Q}\"<br>\n  shows \"\\&lt;Turnstile&gt;\\&lt;^sub&gt;Q {\\&lt;lambda&gt;a. eSuc (P a)} IF b THEN c\\&lt;^sub&gt;1<br>\nELSE c\\&lt;^sub&gt;2 {Q}\"<br>\nunfolding hoare_Qvalid_def proof(safe)<br>\n  fix s<br>\n  assume \"eSuc (P s) &lt; \\&lt;infinity&gt;\"<br>\n  then have Ps_fin: \"P s &lt; \\&lt;infinity&gt;\" by (metis eSuc_infinity eSuc_mono)<br>\n  show \"\\&lt;exists&gt;t p. ((IF b THEN c\\&lt;^sub&gt;1 ELSE c\\&lt;^sub&gt;2, s) \\&lt;Rightarrow&gt;^p<br>\nt) \\&lt;and&gt; enat p + Q t \\&lt;le&gt; eSuc (P s)\"<br>\n  proof(cases \"bval b s\")<br>\n    case True<br>\n    have \"P s + \\&lt;down&gt;(bval b s) &lt; \\&lt;infinity&gt; \\&lt;longrightarrow&gt; (\\&lt;exists&gt;t<br>\np. ((c\\&lt;^sub&gt;1, s) \\&lt;Rightarrow&gt;^p t) \\&lt;and&gt; enat p + Q t \\&lt;le&gt; P s +<br>\n\\&lt;down&gt;(bval b s))\"<br>\n      using assms(1) unfolding hoare_Qvalid_def by simp<br>\n    then obtain t p where \"(c\\&lt;^sub&gt;1, s) \\&lt;Rightarrow&gt;^p t\" and \"enat p + Q t<br>\n\\&lt;le&gt; eSuc (P s)\" using True Ps_fin try sorry<br>\n    then show ?thesis sorry<br>\n  next<br>\n    case False<br>\n    then show ?thesis sorry<br>\n  qed<br>\nqed</p>\n<p>end</p>",
        "id": 413038479,
        "sender_full_name": "Email Gateway",
        "timestamp": 1705357961
    },
    {
        "content": "<p>From: Daniel von Kirschten &lt;<a href=\"mailto:daniel.kirschten@tum.de\">daniel.kirschten@tum.de</a>&gt;<br>\nHi all,</p>\n<p>I found a situation where Isabelle reports a segmentation fault, and I <br>\nwas told that this mailing list is the correct place to report this.</p>\n<p>I'm using Isabelle 2023 on a x64 Windows 11 machine, and the <br>\nsegmentation fault occurs in an instance of veriT spawned by the \"try\" <br>\ncommand. Please find attached a MWE demonstrating this - it already <br>\ncontains the offending \"try\" (line 43).</p>\n<p>The concrete error message appears in the output windows, and on my <br>\nmachine, it is as follows (note that I replaced my username with \"xyz\"):</p>\n<blockquote>\n<p>/cygdrive/c/Users/xyz/AppData/Local/Temp/isabelle/bash_script15875907052655868959: <br>\nZeile 4:   675 Segmentation fault <br>\n/cygdrive/e/Programme/Programmierung/Isabelle/Isabelle2023/contrib/verit-2021.06.2-rmx/x86_64-windows/veriT <br>\n--proof-with-sharing --proof-define-skolems --proof-prune --proof-merge <br>\n--disable-print-success --disable-banner --index-sorts <br>\n--index-fresh-sorts --triggers-new --triggers-sel-rm-specific <br>\n--max-time\\=7500 <br>\nC:\\\\Users\\\\xyz\\\\AppData\\\\Local\\\\Temp\\\\isabelle\\\\process3811362632330976021\\\\cache-io-5406120 </p>\n<p>/cygdrive/c/Users/xyz/AppData/Local/Temp/isabelle/process3811362632330976021/cache-io-5406122 <br>\n2&gt;&amp;1</p>\n</blockquote>\n<p>Steps to reproduce:<br>\n  - Open Isabelle 2023.<br>\n  - Open Segfault.thy in Isabelle.<br>\n  - Move the cursor to the \"try\" in line 43 and wait for all background <br>\ntheories to finish.<br>\n  - Wait for the \"try\" to finish. Observe the the segmentation fault <br>\nmessage in the Output view (note that cvc4 even finds some proof).</p>\n<p>Is there any additional info you need? Is this a known problem? If this <br>\nmailing list isn't the correct place to report this, where else should I <br>\nreport this, if at all?</p>\n<p>Kind regards,<br>\nDaniel v. Kirschten</p>\n<p>PC: At least for me, this doesn't have any priority. I stumbled upon <br>\nthis while doing some homework which I have solved by now regardless. <br>\nAlso, I actually found several instances of such a segfault during this <br>\nhomework, but I only extracted a MWE for the first of them.</p>\n<p><a href=\"/user_uploads/14278/BzgErPVL-_gQGgSpUVGRYdDE/Segfault.thy\">Segfault.thy</a></p>",
        "id": 413038494,
        "sender_full_name": "Email Gateway",
        "timestamp": 1705357976
    },
    {
        "content": "<p>From: Jasmin Blanchette &lt;<a href=\"mailto:jasmin.blanchette@ifi.lmu.de\">jasmin.blanchette@ifi.lmu.de</a>&gt;<br>\nDear Daniel,</p>\n<p>Thanks for your report. I will send it to veriT's main developer, Pascal Fontaine, but since veriT is no longer the focus of his research (he's working on a new SMT solver), I suspect he might decide not to prioritize this.</p>\n<p>Best,<br>\nJasmin</p>",
        "id": 413103967,
        "sender_full_name": "Email Gateway",
        "timestamp": 1705394259
    }
]