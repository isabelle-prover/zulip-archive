[
    {
        "content": "<p>From: Pasquale Noce &lt;<a href=\"mailto:pasquale.noce.lavoro@gmail.com\">pasquale.noce.lavoro@gmail.com</a>&gt;<br>\nDear Isabelle users,</p>\n<p>The following code listing:</p>\n<p>datatype test = Test (num: nat)<br>\nvalue \"num (Test n)\"</p>\n<p>results in the following actual output of the value command:</p>\n<p>\"num (Test n)\"<br>\n  :: \"nat\"</p>\n<p>instead of the output that I was expecting, namely:</p>\n<p>\"n\"<br>\n  :: \"nat\"</p>\n<p>What am I missing here to make the value command compute this selector value?<br>\nThank you very much, best regards,<br>\nPasquale Noce</p>",
        "id": 514676638,
        "sender_full_name": "Email Gateway",
        "timestamp": 1745782307
    },
    {
        "content": "<p>From: Manuel Eberl &lt;<a href=\"mailto:manuel@pruvisto.org\">manuel@pruvisto.org</a>&gt;<br>\nIn Isabelle 2025, importing only HOL.Main, I get \"n\", which is what you <br>\nwant.</p>\n<p>But generally speaking, the \"value\" command's behaviour is sometimes a <br>\nbit weird when free variables are involved. By default, \"value\" uses the <br>\ncode generator. When free variables are involved, this is not possible, <br>\nand it instead relies on either \"normalisation by evaluation\" or using <br>\nthe simplifier. That sometimes leads odd-looking output, e.g. value \"n + <br>\n3\" gives \"n + (1 + 1 + 1)\".</p>\n<p>So, tl;dr ideally only use \"value\" on terms without free variables.</p>\n<p>Manuel</p>\n<p>On 27/04/2025 21:31, Pasquale Noce wrote:</p>\n<blockquote>\n<p>Dear Isabelle users,</p>\n<p>The following code listing:</p>\n<p>datatype test = Test (num: nat)<br>\nvalue \"num (Test n)\"</p>\n<p>results in the following actual output of the value command:</p>\n<p>\"num (Test n)\"<br>\n   :: \"nat\"</p>\n<p>instead of the output that I was expecting, namely:</p>\n<p>\"n\"<br>\n   :: \"nat\"</p>\n<p>What am I missing here to make the value command compute this selector value?<br>\nThank you very much, best regards,<br>\nPasquale Noce</p>\n</blockquote>",
        "id": 514691775,
        "sender_full_name": "Email Gateway",
        "timestamp": 1745793908
    },
    {
        "content": "<p>From: Pasquale Noce &lt;<a href=\"mailto:pasquale.noce.lavoro@gmail.com\">pasquale.noce.lavoro@gmail.com</a>&gt;<br>\nDear Manuel,</p>\n<p>Thanks a lot for your kind feedback.<br>\nActually, your answer that you got the expected output by importing Main made<br>\nme suspect that I overlooked some relevant piece of information in my previous<br>\nmessage, since I had imported Main in my example as well. So, I found out that<br>\nthe overlooked piece of information was that the unexpected outcome is<br>\nobtained if my code listing is placed inside a locale. That is to say, the<br>\ncode listing:</p>\n<p>datatype test = Test (num: nat)<br>\nvalue \"num (Test n)\"</p>\n<p>placed in the global context, generates the expected output, namely:</p>\n<p>\"n\"<br>\n  :: \"nat\"</p>\n<p>On the contrary, the code listing:</p>\n<p>locale temp<br>\nbegin</p>\n<p>datatype test = Test (num: nat)<br>\nvalue \"num (Test n)\"</p>\n<p>end</p>\n<p>generates the unexpected output, namely:</p>\n<p>\"num (Test n)\"<br>\n  :: \"nat\"</p>\n<p>Hence, my former, incomplete question can be reformulated as follows: how can<br>\nI get the expected output within a locale?<br>\nThank you very much, best regards,<br>\nPasquale</p>",
        "id": 514779368,
        "sender_full_name": "Email Gateway",
        "timestamp": 1745836996
    },
    {
        "content": "<p>From: \"Thiemann, René\" &lt;<a href=\"mailto:cl-isabelle-users@lists.cam.ac.uk\">cl-isabelle-users@lists.cam.ac.uk</a>&gt;<br>\nDear Pasquale,</p>\n<p>as far as I know, everything that is defined inside a locale does not have automatic<br>\ncode generation. So, in particular if you define a function foo inside a locale bar, <br>\nyou will need to declare</p>\n<p>declare bar.foo.simps[code]</p>\n<p>outside the locale, and similarly, you have to do this for definitions, partial_functions, etc. </p>\n<p>I imagine, that the situation is the same for datatypes.<br>\nPerhaps in your case </p>\n<p>declare locale_name.test.simps[code] </p>\n<p>will suffice, but I’m not sure.</p>\n<p>Best,<br>\nRené</p>\n<blockquote>\n<p>Am 28.04.2025 um 12:42 schrieb Pasquale Noce &lt;<a href=\"mailto:pasquale.noce.lavoro@gmail.com\">pasquale.noce.lavoro@gmail.com</a>&gt;:</p>\n<p>Dear Manuel,</p>\n<p>Thanks a lot for your kind feedback.<br>\nActually, your answer that you got the expected output by importing Main made<br>\nme suspect that I overlooked some relevant piece of information in my previous<br>\nmessage, since I had imported Main in my example as well. So, I found out that<br>\nthe overlooked piece of information was that the unexpected outcome is<br>\nobtained if my code listing is placed inside a locale. That is to say, the<br>\ncode listing:</p>\n<p>datatype test = Test (num: nat)<br>\nvalue \"num (Test n)\"</p>\n<p>placed in the global context, generates the expected output, namely:</p>\n<p>\"n\"<br>\n :: \"nat\"</p>\n<p>On the contrary, the code listing:</p>\n<p>locale temp<br>\nbegin</p>\n<p>datatype test = Test (num: nat)<br>\nvalue \"num (Test n)\"</p>\n<p>end</p>\n<p>generates the unexpected output, namely:</p>\n<p>\"num (Test n)\"<br>\n :: \"nat\"</p>\n<p>Hence, my former, incomplete question can be reformulated as follows: how can<br>\nI get the expected output within a locale?<br>\nThank you very much, best regards,<br>\nPasquale</p>\n</blockquote>",
        "id": 514789542,
        "sender_full_name": "Email Gateway",
        "timestamp": 1745840045
    },
    {
        "content": "<p>From: Pasquale Noce &lt;<a href=\"mailto:pasquale.noce.lavoro@gmail.com\">pasquale.noce.lavoro@gmail.com</a>&gt;<br>\nDear René,</p>\n<p>Thanks a lot for your kind feedback, too.<br>\nBased on it, I have finally found out that the following code listing (which I am posting here in case it may be useful to other Isabelle users as well):</p>\n<p>locale sketch<br>\nbegin</p>\n<p>datatype test = Test nat</p>\n<p>primrec test_num :: \"test =&gt; nat\" where<br>\n\"test_num (Test n) = n\"</p>\n<p>end</p>\n<p>code_datatype sketch.Test</p>\n<p>declare sketch.test_num.simps [code]</p>\n<p>value \"sketch.test_num (sketch.Test n)\"</p>\n<p>triggers the generation of the expected output on the part of the value command, namely:</p>\n<p>\"n\"<br>\n   :: \"nat\"</p>\n<p>Many thanks again to both you and Manuel.<br>\nBest regards,<br>\nPasquale</p>\n<p>Il 28/04/2025 13:21, Thiemann, René ha scritto:</p>\n<blockquote>\n<p>Dear Pasquale,</p>\n<p>as far as I know, everything that is defined inside a locale does not have automatic<br>\ncode generation. So, in particular if you define a function foo inside a locale bar,<br>\nyou will need to declare</p>\n<p>declare bar.foo.simps[code]</p>\n<p>outside the locale, and similarly, you have to do this for definitions, partial_functions, etc.</p>\n<p>I imagine, that the situation is the same for datatypes.<br>\nPerhaps in your case</p>\n<p>declare locale_name.test.simps[code]</p>\n<p>will suffice, but I’m not sure.</p>\n<p>Best,<br>\nRené</p>\n<blockquote>\n<p>Am 28.04.2025 um 12:42 schrieb Pasquale Noce &lt;<a href=\"mailto:pasquale.noce.lavoro@gmail.com\">pasquale.noce.lavoro@gmail.com</a>&gt;:</p>\n<p>Dear Manuel,</p>\n<p>Thanks a lot for your kind feedback.<br>\nActually, your answer that you got the expected output by importing Main made<br>\nme suspect that I overlooked some relevant piece of information in my previous<br>\nmessage, since I had imported Main in my example as well. So, I found out that<br>\nthe overlooked piece of information was that the unexpected outcome is<br>\nobtained if my code listing is placed inside a locale. That is to say, the<br>\ncode listing:</p>\n<p>datatype test = Test (num: nat)<br>\nvalue \"num (Test n)\"</p>\n<p>placed in the global context, generates the expected output, namely:</p>\n<p>\"n\"<br>\n  :: \"nat\"</p>\n<p>On the contrary, the code listing:</p>\n<p>locale temp<br>\nbegin</p>\n<p>datatype test = Test (num: nat)<br>\nvalue \"num (Test n)\"</p>\n<p>end</p>\n<p>generates the unexpected output, namely:</p>\n<p>\"num (Test n)\"<br>\n  :: \"nat\"</p>\n<p>Hence, my former, incomplete question can be reformulated as follows: how can<br>\nI get the expected output within a locale?<br>\nThank you very much, best regards,<br>\nPasquale<br>\n</p>\n</blockquote>\n</blockquote>",
        "id": 514888486,
        "sender_full_name": "Email Gateway",
        "timestamp": 1745868280
    },
    {
        "content": "<p>From: Florian Haftmann &lt;<a href=\"mailto:florian.haftmann@cit.tum.de\">florian.haftmann@cit.tum.de</a>&gt;<br>\n(This should have also gone to the list)</p>\n<p>-------- Weitergeleitete Nachricht --------<br>\nBetreff: Re: [isabelle] Selector value with the value command<br>\nDatum: Mon, 28 Apr 2025 20:25:44 +0200<br>\nVon: Florian Haftmann &lt;<a href=\"mailto:florian.haftmann@cit.tum.de\">florian.haftmann@cit.tum.de</a>&gt;<br>\nAn: Pasquale Noce &lt;<a href=\"mailto:pasquale.noce.lavoro@gmail.com\">pasquale.noce.lavoro@gmail.com</a>&gt;</p>\n<p>Hi Pasquale,</p>\n<p>note that there is no concept of »localized« code generation.</p>\n<p>You always get proper behavior after interpretation:</p>\n<blockquote>\n<p>locale triv<br>\nbegin</p>\n<p>datatype test = Test (num: nat)</p>\n<p>end</p>\n<p>interpretation I: triv .</p>\n<p>value ‹I.num (I.Test n)›</p>\n</blockquote>\n<p>How to proceed from here depends significantly on what you want to <br>\nachieve in the first place.</p>\n<p>Cheers,<br>\n    Florian</p>\n<p><a href=\"/user_uploads/14278/YBeTh2DAkZ6gfgXBlX26Dj7f/OpenPGP_0xA707172232CFA4E9.asc\">OpenPGP_0xA707172232CFA4E9.asc</a><br>\n<a href=\"/user_uploads/14278/9orRZQiOltWzJhiBSGOrA6nc/OpenPGP_signature.asc\">OpenPGP_signature.asc</a></p>",
        "id": 514888676,
        "sender_full_name": "Email Gateway",
        "timestamp": 1745868357
    },
    {
        "content": "<p>From: Pasquale Noce &lt;<a href=\"mailto:pasquale.noce.lavoro@gmail.com\">pasquale.noce.lavoro@gmail.com</a>&gt;<br>\nDear Florian,</p>\n<p>Thanks a lot for your feedback, too.<br>\nBest regards,<br>\nPasquale</p>",
        "id": 514889239,
        "sender_full_name": "Email Gateway",
        "timestamp": 1745868585
    },
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;</p>\n<p>On 27/04/2025 22:53, Manuel Eberl wrote:</p>\n<blockquote>\n<p>In Isabelle 2025, importing only HOL.Main, I get \"n\", which is what you want.</p>\n<p>But generally speaking, the \"value\" command's behaviour is sometimes a bit weird <br>\nwhen free variables are involved. By default, \"value\" uses the code generator. <br>\nWhen free variables are involved, this is not possible, and it instead relies on <br>\neither \"normalisation by evaluation\" or using the simplifier. That sometimes <br>\nleads odd-looking output, e.g. value \"n + 3\" gives \"n + (1 + 1 + 1)\".</p>\n<p>So, tl;dr ideally only use \"value\" on terms without free variables.</p>\n</blockquote>\n<p>Otherwise expect the unexpected ;-)</p>\n<p>Tobias</p>\n<blockquote>\n<p>Manuel</p>\n<p>On 27/04/2025 21:31, Pasquale Noce wrote:</p>\n<blockquote>\n<p>Dear Isabelle users,</p>\n<p>The following code listing:</p>\n<p>datatype test = Test (num: nat)<br>\nvalue \"num (Test n)\"</p>\n<p>results in the following actual output of the value command:</p>\n<p>\"num (Test n)\"<br>\n   :: \"nat\"</p>\n<p>instead of the output that I was expecting, namely:</p>\n<p>\"n\"<br>\n   :: \"nat\"</p>\n<p>What am I missing here to make the value command compute this selector value?<br>\nThank you very much, best regards,<br>\nPasquale Noce</p>\n</blockquote>\n</blockquote>\n<p><a href=\"/user_uploads/14278/OZHT-mI0xBNRcgxmLzlR8cOW/smime.p7s\">smime.p7s</a></p>",
        "id": 516367690,
        "sender_full_name": "Email Gateway",
        "timestamp": 1746516203
    }
]