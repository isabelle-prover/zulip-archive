[
    {
        "content": "<p>From: Klenze  Tobias &lt;<a href=\"mailto:tobias.klenze@inf.ethz.ch\">tobias.klenze@inf.ethz.ch</a>&gt;<br>\nHello everyone,</p>\n<p>how can I show a datatype containing a record to be countable?</p>\n<p>record 'a testrecord = field :: 'a</p>\n<p>datatype 'a testdatatype = F \"'a testrecord\"</p>\n<p>instance testdatatype :: (countable) countable<br>\n (* by countable_datatype *) <br>\n (* exception TYPE raised (line 87 of \"~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML\"):<br>\n     Type is not of sort countable<br>\n     'aa__ testrecord *)</p>\n<p>Thank you in advance!</p>\n<p>Best,<br>\nTobias</p>",
        "id": 275634428,
        "sender_full_name": "Email Gateway",
        "timestamp": 1647514417
    },
    {
        "content": "<p>From: Jasmin Blanchette &lt;<a href=\"mailto:cl-isabelle-users@lists.cam.ac.uk\">cl-isabelle-users@lists.cam.ac.uk</a>&gt;<br>\nDear Tobias,</p>\n<p>I can help you a little bit. For the tactic invocation to \"countable_datatype\" to succeed, you'll need first to show that your record is countable. Here's the proof, modulo a \"sorry\":</p>\n<p>instance testrecord_ext :: (countable, countable) countable<br>\n      sorry</p>\n<p>I'm not aware of any automation for proving records countable. I'm presuming it's not very difficult since there's no recursion involved.</p>\n<p>Cheers,</p>\n<p>Jasmin</p>",
        "id": 275635632,
        "sender_full_name": "Email Gateway",
        "timestamp": 1647515058
    },
    {
        "content": "<p>From: Christoph Sprenger &lt;<a href=\"mailto:sprenger@inf.ethz.ch\">sprenger@inf.ethz.ch</a>&gt;<br>\nHi Tobias, </p>\n<p>to connect to Jasmin’s reply, here is a solution that leverages the countable_datatype proof method. I am not sure, whether it is the prettiest solution, but it seems to generalize well to other countable record types and works with little proof effort.</p>\n<p>Cheers, <br>\nChristoph</p>\n<hr>\n<p>― ‹countable record types›</p>\n<p>record point = x :: nat y :: nat</p>\n<p>― ‹define an isomorphic datatype and inject the record type into it›</p>\n<p>datatype 'a pointt = Point nat nat 'a </p>\n<p>instance pointt :: (countable) countable<br>\n  by countable_datatype</p>\n<p>definition point_to_pointt :: \"'a point_ext ⇒ 'a pointt\" where<br>\n  \"point_to_pointt pt = Point (x pt) (y pt) (more pt)\"</p>\n<p>― ‹show that the record type is countable›</p>\n<p>instance point_ext :: (countable) countable<br>\nproof<br>\n  obtain pointt_to_nat :: \"('a::countable) pointt ⇒ nat\" where \"inj pointt_to_nat\" by auto<br>\n  then have \"inj (pointt_to_nat o point_to_pointt)\" <br>\n    by (auto simp add: point_to_pointt_def intro!: inj_compose intro: injI)<br>\n  then show \"∃to_nat::'a point_scheme ⇒ nat. inj to_nat\" by auto<br>\nqed</p>",
        "id": 275652416,
        "sender_full_name": "Email Gateway",
        "timestamp": 1647523992
    },
    {
        "content": "<p>From: Thomas Sewell &lt;<a href=\"mailto:tals4@cam.ac.uk\">tals4@cam.ac.uk</a>&gt;<br>\nJust for fun, here's a slightly more automatic version using the shape of a fact (f.splits) defined by the record package.</p>\n<p>record rec =<br>\n  rec_x :: nat rec_y :: nat</p>\n<p>lemma exists_to_prod:<br>\n  \"(∃a b. P a b) = (∃t. P (fst t) (snd t))\"<br>\n  by simp</p>\n<p>lemma exists_equiv_inj[rule_format]:<br>\n  \"(∀P. (∃x. P x) = (∃y. P (f y))) ⟹ surj f\"<br>\n  by auto</p>\n<p>instance rec_ext :: (countable)countable<br>\nproof -<br>\n  note surj = rec.splits(3)[simplified exists_to_prod, THEN exists_equiv_inj]<br>\n  note inj = surj_imp_inj_inv[OF surj]<br>\n  note inj_rec_to_nat = inj_compose[OF inj_to_nat inj]<br>\n  then show \"PROP ?thesis\"<br>\n    by intro_classes auto<br>\nqed</p>\n<p>Best regards,<br>\n    Thomas.</p>",
        "id": 275656897,
        "sender_full_name": "Email Gateway",
        "timestamp": 1647525812
    }
]