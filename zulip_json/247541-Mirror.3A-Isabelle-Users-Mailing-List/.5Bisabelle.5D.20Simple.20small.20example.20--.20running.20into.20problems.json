[
    {
        "content": "<p>From: Christoph Benzmueller &lt;<a href=\"mailto:c.benzmueller@gmail.com\">c.benzmueller@gmail.com</a>&gt;<br>\nDear Isabelle Users List,</p>\n<p>attached is a very simple example for sledgehammer that should be easy to<br>\nsolve and reconstruct, but this example seems to run into unexpected<br>\nproblems:</p>\n<p>[image: image.png]</p>\n<p>Best,<br>\n   Christoph</p>\n<p><a href=\"/user_uploads/14278/pYyBJbDZOEjipUJJTyn23OiV/image.png\">image.png</a><br>\n<a href=\"/user_uploads/14278/DS92eNLbT7NPP_ytSQB_0Naw/SimpleStuff.thy\">SimpleStuff.thy</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/14278/pYyBJbDZOEjipUJJTyn23OiV/image.png\" title=\"image.png\"><img src=\"/user_uploads/14278/pYyBJbDZOEjipUJJTyn23OiV/image.png\"></a></div>",
        "id": 411772557,
        "sender_full_name": "Email Gateway",
        "timestamp": 1704731232
    },
    {
        "content": "<p>From: Jasmin Blanchette &lt;<a href=\"mailto:jasmin.blanchette@ifi.lmu.de\">jasmin.blanchette@ifi.lmu.de</a>&gt;<br>\nDear Christoph,</p>\n<p>Thanks for reporting this issue! The spectacular failure of \"fastforce\" -- when Sledgehammer says \"18 ms\" -- is definitely worth investigating. I'm a bit overwhelmed the coming weeks, but I'll come back to you if I find a fix.</p>\n<p>Concerning the provers used by Sledgehammer:</p>\n<p>With Isabelle2022, I get that some remote provers, leo2 and agsyhol, can solve your example.</p>\n<p>With Isabelle2023, I get the same result as you.</p>\n<p>With a recent repository version of Isabelle, I get that E finds a proof.</p>\n<p>I don't understand why you call your problem \"a very simple problem\". It's very higher-order and as such unsuitable for most provers based on encodings, including \"metis\" -- and there's no automation we can use in Isabelle that can reconstruct these things. It is interesting, though, that Zipperposition fails where other higher-order provers succeed.</p>\n<p>Best,<br>\nJasmin</p>",
        "id": 411895365,
        "sender_full_name": "Email Gateway",
        "timestamp": 1704792778
    },
    {
        "content": "<p>From: Christoph Benzmueller &lt;<a href=\"mailto:c.benzmueller@gmail.com\">c.benzmueller@gmail.com</a>&gt;<br>\nHi Jasmin,</p>\n<p>no, worry, there is no time pressure to look at this failure of<br>\n\"fastforce\", but it clearly seems to be an issue to be resolved.</p>\n<p>The reason I named this \"SimpleStuff\" is that<br>\n(i) veteran higher-order provers like agsyHOL, Satallax and Leo-II can<br>\nsolve this very quickly (maybe even Leo-I could already, I need to check)<br>\n(ii) only a very limited amount of higher-order reasoning (e.g. in the form<br>\nof primitive substitutions) is needed, so this example (which is exemplary<br>\nfor a whole class of related examples) should not be neglected in the<br>\nsearch space of today's higher-order proof systems, given the great ongoing<br>\nprogress in this area.</p>\n<p>Best wishes,<br>\n   Christoph</p>",
        "id": 411913832,
        "sender_full_name": "Email Gateway",
        "timestamp": 1704798798
    },
    {
        "content": "<p>From: Manuel Eberl &lt;<a href=\"mailto:manuel@pruvisto.org\">manuel@pruvisto.org</a>&gt;<br>\nOut of curiosity, I took a look at what you mean by a \"spectacular <br>\nfailure of fastforce\" and found that you get an \"Enter Match\" message <br>\nand everything basically freezes up.</p>\n<p>I've never quite understood what this \"Enter Match\" thing is and whether <br>\nthe fact that it happens sometimes is something that we just have to <br>\nlive with. But the fact that there's a lot of nested occurrences of <br>\n\"remdups\" in that \"Enter Match\" message makes me wonder whether there is <br>\nperhaps a poorly-chosen rule involving \"remdups\" in the claset and <br>\nwhether someone ought to investigate this.</p>\n<p>Manuel</p>",
        "id": 411916614,
        "sender_full_name": "Email Gateway",
        "timestamp": 1704799874
    },
    {
        "content": "<p>From: Stepan Holub &lt;<a href=\"mailto:cl-isabelle-users@lists.cam.ac.uk\">cl-isabelle-users@lists.cam.ac.uk</a>&gt;<br>\nDear Christoph,</p>\n<p>I wonder  why you use the axiomatized type.<br>\nThe theorem holds for any type, and the sledgehammer finds the proof <br>\n(vampire):</p>\n<p>lemma \"∃ F :: ('a ⇒ bool) ⇒ 'a. ∀ t::'a. (∃ S. F S = t)\"<br>\n   by (metis some_sym_eq_trivial)</p>\n<p>As Manuel reports, the problem is with fastforce which is suggested by <br>\nzipperposition (and by try0), but it freezes the whole Isabelle.</p>\n<p>Stepan</p>\n<p><a href=\"/user_uploads/14278/LfqQHfpOGRAGjyo2GdObe-Kp/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/14278/LfqQHfpOGRAGjyo2GdObe-Kp/image.png\" title=\"image.png\"><img src=\"/user_uploads/14278/LfqQHfpOGRAGjyo2GdObe-Kp/image.png\"></a></div>",
        "id": 411973660,
        "sender_full_name": "Email Gateway",
        "timestamp": 1704819055
    },
    {
        "content": "<p>From: Christoph Benzmueller &lt;<a href=\"mailto:c.benzmueller@gmail.com\">c.benzmueller@gmail.com</a>&gt;<br>\nDear Stepan,</p>\n<p>as a reply to your suggestion/question I have a four comments:</p>\n<p>(i) Proving theorems automatically by generalisation and subsequent<br>\ninstantiation is a great research topic and there has been interesting work<br>\nin the past (e.g. in the context of inductive theorem proving). So, if you<br>\nhave (or will have) tools that automatically do what you suggest, then this<br>\nis really cool and I would like to learn more about it. (Replacing<br>\nautomatic proof by user-interaction/semi-automatic proof is not so much in<br>\nmy interest here).</p>\n<p>(ii) A slight variation of theorem T1 is theorem T2 below. For this one<br>\nyour generalisation recipe does (obviously) not work, since there is now a<br>\ncountermodel.</p>\n<p>[image: image.png]</p>\n<p>(iii) Such problems may come from concrete application contexts, where<br>\ninstead of reasoning with arbitrary cardinalities (as you suggest) one<br>\nmight be interested to reason with exactly controlled domain cardinalities<br>\n(like here for type i). Eg. in the context of our previous<br>\ncomputer-supported explorations in category theory (with Dana Scott) we<br>\nwere also interested in enumerating functors in a controlled way when<br>\nfixing certain domain cardinalities. Moreover, as (ii) shows,<br>\ngeneralisation may not be a general answer.</p>\n<p>(iv) Even if there are alternative solutions to problems like T1 or T2, it<br>\nnevertheless makes sense to make our proof assistants as robust and<br>\npowerful as possible.</p>\n<p>Best wishes,<br>\n   Christoph</p>\n<p><a href=\"/user_uploads/14278/haepSxClGYqhC7pokEuWJuK6/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/14278/haepSxClGYqhC7pokEuWJuK6/image.png\" title=\"image.png\"><img src=\"/user_uploads/14278/haepSxClGYqhC7pokEuWJuK6/image.png\"></a></div>",
        "id": 412096391,
        "sender_full_name": "Email Gateway",
        "timestamp": 1704878230
    },
    {
        "content": "<p>From: Stepan Holub &lt;<a href=\"mailto:cl-isabelle-users@lists.cam.ac.uk\">cl-isabelle-users@lists.cam.ac.uk</a>&gt;<br>\nIndeed, for T2 there is<br>\n\"zipperposition: One-line proof reconstruction failed: by metis\"<br>\nso this is a sledgehammer reconstruction problem going beyond the <br>\nstrange behavior of fastforce.</p>\n<p>S.</p>\n<p><a href=\"/user_uploads/14278/7Vqkeni3pOlgba8pHhtBpPbW/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/14278/7Vqkeni3pOlgba8pHhtBpPbW/image.png\" title=\"image.png\"><img src=\"/user_uploads/14278/7Vqkeni3pOlgba8pHhtBpPbW/image.png\"></a></div>",
        "id": 412108619,
        "sender_full_name": "Email Gateway",
        "timestamp": 1704882195
    },
    {
        "content": "<p>From: Lawrence Paulson &lt;<a href=\"mailto:lp15@cam.ac.uk\">lp15@cam.ac.uk</a>&gt;<br>\nThat message is higher-order unification talking to you. It's a sign that a nontrivial HO unification (i.e. something beyond pattern unification) is going deeper than usual. There was an issue on this mailing list within the past year caused by the unification depth bound being exceeded. By increasing the relevant depth parameter, the failure could be eliminated. It's possible that the mere output of tracing messages produces so much overhead that the proof will fail. </p>\n<p>We could also consider increasing the defaults. I'm not sure that they have increased much in nearly 40 years of Moore’s Law. </p>\n<p>Larry</p>",
        "id": 412120352,
        "sender_full_name": "Email Gateway",
        "timestamp": 1704885881
    }
]