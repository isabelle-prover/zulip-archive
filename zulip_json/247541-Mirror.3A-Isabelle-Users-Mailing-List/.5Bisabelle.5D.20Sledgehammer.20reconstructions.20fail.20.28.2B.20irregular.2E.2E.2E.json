[
    {
        "content": "<p>From: David Fuenmayor &lt;<a href=\"mailto:davfuenmayor@gmail.com\">davfuenmayor@gmail.com</a>&gt;<br>\nDear Isabelle users and experts:</p>\n<p>This is an instance of a recurrent problem I have been having, under<br>\ndifferent guises, with (1) Sledgehammer's suggested reconstructions not<br>\nworking (mostly involving metis), and (2) metis apparent irregular<br>\nbehaviour (at least to the non-initiated).</p>\n<p>As shown in the attached file (whose content I copy-paste below as well),<br>\nnot only is the metis command, as suggested by sledgehammer, unsuccessful<br>\n(without further massaging in the form of definitions' unfolding), but also<br>\nis metis behaviour per se irregular (e.g. changes when switching universal<br>\nwith existential quantifiers as in the example).<br>\nDo you have the same problem? or am I doing something wrong?<br>\n(Fyi, I am using Isabelle 2022 on linux.)</p>\n<p>Thanks for your help!<br>\nDavid</p>\n<p>theory example<br>\n  imports Main<br>\nbegin</p>\n<p>definition \"swap f ≡ λa b. f b a\"</p>\n<p>definition \"Ex2  r ≡ ∃a b. r a b\"<br>\ndefinition \"All2 r ≡ ∀a b. r a b\"</p>\n<p>(**<strong><em><strong><em>Case 1: Using Ex2 definition</em></strong></em></strong>)</p>\n<p>(*The metis reconstruction suggested by sledgehammer does not work out of<br>\nthe box*)<br>\nlemma \"Ex2 r = Ex2(swap r)\" sledgehammer (* by (metis Ex2_def swap_def) *)<br>\noops (* fails! *)</p>\n<p>(<em>Some 'massaging' in the form of definition unfolding is required</em>)<br>\nlemma \"Ex2 r = Ex2(swap r)\" (* using Ex2_def swap_def by metis <em>) oops (</em><br>\nfails too! *)<br>\nlemma \"Ex2 r = Ex2(swap r)\" unfolding swap_def (* by (metis Ex2_def)*) oops<br>\n(* fails too! *)<br>\nlemma \"Ex2 r = Ex2(swap r)\" unfolding Ex2_def by (metis swap_def) (*<br>\nsucceeds *)<br>\nlemma \"Ex2 r = Ex2(swap r)\" unfolding Ex2_def using swap_def by metis (*<br>\nsucceeds *)</p>\n<p>(<strong>*</strong><strong>*Case 2: Using All2 definition (no problem) </strong>****)</p>\n<p>(*By contrast, here the metis reconstruction suggested by sledgehammer<br>\nworks well out of the box*)<br>\nlemma \"All2 r = All2(swap r)\" sledgehammer by (metis All2_def swap_def) (*<br>\nsucceeds *)<br>\n(<em>and all other variants work too</em>)<br>\nlemma \"All2 r = All2(swap r)\" using All2_def swap_def by metis  (* succeeds<br>\n*)<br>\nlemma \"All2 r = All2(swap r)\" unfolding All2_def swap_def by metis  (*<br>\nsucceeds *)</p>\n<p>(**Questions:</p>\n<ul>\n<li>Why does sledgehammer suggested reconstruction fail in case 1?</li>\n<li>Why does metis work differently in cases 1 and 2?<br>\n*)</li>\n</ul>\n<p>end<br>\n<a href=\"/user_uploads/14278/eEpQvwKlTWkJoCfY_ZCAjg5l/example.thy\">example.thy</a></p>",
        "id": 321629577,
        "sender_full_name": "Email Gateway",
        "timestamp": 1673872356
    },
    {
        "content": "<p>From: David Fuenmayor &lt;<a href=\"mailto:davfuenmayor@gmail.com\">davfuenmayor@gmail.com</a>&gt;<br>\nI would like to recall this message (which apparently got lost among the<br>\nlatest ranting against rank1 polymorphism).</p>\n<p>As a grateful user of sledgehammer, I have come to believe that this sort<br>\nof tools really are the key to widespread (and game-changing!) adoption of<br>\nproof assistants in the mathematical world (more so than eg.<br>\novercomplicating the type system).<br>\nSo please interpret my previous message as a <em>constructive</em> bug(?)<br>\nreporting. I am open to suggestions on how to be a better user of this tool<br>\n(or even contribute to it?).</p>",
        "id": 322324758,
        "sender_full_name": "Email Gateway",
        "timestamp": 1674146148
    },
    {
        "content": "<p>From: \"\\\"Blanchette, J.C. (Jasmin Christian)\\\"\" &lt;<a href=\"mailto:cl-isabelle-users@lists.cam.ac.uk\">cl-isabelle-users@lists.cam.ac.uk</a>&gt;<br>\nDear David,</p>\n<p>First, I'm sorry for the big delay in answering your email. Part of the reason is that your email originally landed in my spam folder! Be assured that feedback about Sledgehammer's misbehaviors is always welcome.</p>\n<p>Now let's look at your theory:</p>\n<blockquote>\n<p>(<em>The metis reconstruction suggested by sledgehammer does not work out of the box</em>)<br>\nlemma \"Ex2 r = Ex2(swap r)\" sledgehammer (* by (metis Ex2_def swap_def) <em>) oops (</em> fails! *)</p>\n</blockquote>\n<p>This is visible from the fact that no time indication is printed next to the metis call (e.g. \"(0.4 s)\"). In the repository version of Isabelle (and hence, likely, in the next official version), this will be more explicitly labeled as \"(&gt; 1.0 s, timed out)\".</p>\n<p>To answer your questions:</p>\n<blockquote>\n<ul>\n<li>Why does sledgehammer suggested reconstruction fail in case 1?</li>\n</ul>\n</blockquote>\n<p>Because it fails. Or rather, it seems to take too much time. Reconstruction is not a perfect art, and because different encodings can be used by Sledgehammer and metis, there's no guarantee that a Sledgehammer/ATP proof will be reconstructible by metis. This is why Sledgehammer tests the metis calls (and other proof methods like \"auto\" and \"simp\") and suggests something that works if it can and that times out if it finds nothing.</p>\n<p>The lack of specific information in Isabelle2022 is unfortunate, and was also involuntary (older versions of Isabelle said \"(&gt; 1.0 s, timed out)\").</p>\n<blockquote>\n<ul>\n<li>Why does metis work differently in cases 1 and 2?</li>\n</ul>\n</blockquote>\n<p>Because it's a different proof goal. Metis is a highly heuristic prover and any change in the goal can lead it to perform wildly differently.</p>\n<p>Regards,<br>\nJasmin</p>\n<hr>\n<p>From: <a href=\"mailto:cl-isabelle-users-request@lists.cam.ac.uk\">cl-isabelle-users-request@lists.cam.ac.uk</a> &lt;<a href=\"mailto:cl-isabelle-users-request@lists.cam.ac.uk\">cl-isabelle-users-request@lists.cam.ac.uk</a>&gt; on behalf of David Fuenmayor &lt;<a href=\"mailto:davfuenmayor@gmail.com\">davfuenmayor@gmail.com</a>&gt;<br>\nSent: Thursday, January 19, 2023 17:35<br>\nTo: <a href=\"mailto:cl-isabelle-users@lists.cam.ac.uk\">cl-isabelle-users@lists.cam.ac.uk</a> &lt;<a href=\"mailto:cl-isabelle-users@lists.cam.ac.uk\">cl-isabelle-users@lists.cam.ac.uk</a>&gt;<br>\nSubject: Re: [isabelle] Sledgehammer reconstructions fail (+ irregular behaviour of metis)</p>\n<p>I would like to recall this message (which apparently got lost among the latest ranting against rank1 polymorphism).</p>\n<p>As a grateful user of sledgehammer, I have come to believe that this sort of tools really are the key to widespread (and game-changing!) adoption of proof assistants in the mathematical world (more so than eg. overcomplicating the type system).<br>\nSo please interpret my previous message as a <em>constructive</em> bug(?) reporting. I am open to suggestions on how to be a better user of this tool (or even contribute to it?).</p>\n<p>On Mon, 16 Jan 2023, 13:32 David Fuenmayor &lt;davfuenmayor@gmail.com&lt;mailto:<a href=\"mailto:davfuenmayor@gmail.com\">davfuenmayor@gmail.com</a>&gt;&gt; wrote:<br>\nDear Isabelle users and experts:</p>\n<p>This is an instance of a recurrent problem I have been having, under different guises, with (1) Sledgehammer's suggested reconstructions not working (mostly involving metis), and (2) metis apparent irregular behaviour (at least to the non-initiated).</p>\n<p>As shown in the attached file (whose content I copy-paste below as well), not only is the metis command, as suggested by sledgehammer, unsuccessful (without further massaging in the form of definitions' unfolding), but also is metis behaviour per se irregular (e.g. changes when switching universal with existential quantifiers as in the example).<br>\nDo you have the same problem? or am I doing something wrong?<br>\n(Fyi, I am using Isabelle 2022 on linux.)</p>\n<p>Thanks for your help!<br>\nDavid</p>\n<p>theory example<br>\n  imports Main<br>\nbegin</p>\n<p>definition \"swap f ≡ λa b. f b a\"</p>\n<p>definition \"Ex2  r ≡ ∃a b. r a b\"<br>\ndefinition \"All2 r ≡ ∀a b. r a b\"</p>\n<p>(**<strong><em><strong><em>Case 1: Using Ex2 definition</em></strong></em></strong>)</p>\n<p>(<em>The metis reconstruction suggested by sledgehammer does not work out of the box</em>)<br>\nlemma \"Ex2 r = Ex2(swap r)\" sledgehammer (* by (metis Ex2_def swap_def) <em>) oops (</em> fails! *)</p>\n<p>(<em>Some 'massaging' in the form of definition unfolding is required</em>)<br>\nlemma \"Ex2 r = Ex2(swap r)\" (* using Ex2_def swap_def by metis <em>) oops (</em> fails too! *)<br>\nlemma \"Ex2 r = Ex2(swap r)\" unfolding swap_def (* by (metis Ex2_def)<em>) oops (</em> fails too! *)<br>\nlemma \"Ex2 r = Ex2(swap r)\" unfolding Ex2_def by (metis swap_def) (* succeeds *)<br>\nlemma \"Ex2 r = Ex2(swap r)\" unfolding Ex2_def using swap_def by metis (* succeeds *)</p>\n<p>(<strong>*</strong><strong>*Case 2: Using All2 definition (no problem) </strong>****)</p>\n<p>(<em>By contrast, here the metis reconstruction suggested by sledgehammer works well out of the box</em>)<br>\nlemma \"All2 r = All2(swap r)\" sledgehammer by (metis All2_def swap_def) (* succeeds *)<br>\n(<em>and all other variants work too</em>)<br>\nlemma \"All2 r = All2(swap r)\" using All2_def swap_def by metis  (* succeeds *)<br>\nlemma \"All2 r = All2(swap r)\" unfolding All2_def swap_def by metis  (* succeeds *)</p>\n<p>(**Questions:</p>\n<ul>\n<li>Why does sledgehammer suggested reconstruction fail in case 1?</li>\n<li>Why does metis work differently in cases 1 and 2?<br>\n*)</li>\n</ul>\n<p>end</p>",
        "id": 327530793,
        "sender_full_name": "Email Gateway",
        "timestamp": 1676289851
    },
    {
        "content": "<p>From: \"\\\"Blanchette, J.C. (Jasmin Christian)\\\"\" &lt;<a href=\"mailto:cl-isabelle-users@lists.cam.ac.uk\">cl-isabelle-users@lists.cam.ac.uk</a>&gt;<br>\nDear David,</p>\n<p>I have looked more closely into the metis failure and found out that it was due to a misbehavior of the preprocessor (the clausifier). This is some really old code that failed when faced with nested lambdas where some inner lambda can be eta-reduced (as in \"%x y. r x y\"). I have now found a solution that doesn't break any proof in Isabelle or the AFP and that makes your example work. The patch is now part of the development version and will likely be part of the next release. Thanks again for your report.</p>\n<p>Best,<br>\nJasmin</p>\n<hr>\n<p>From: Blanchette, J.C. (Jasmin Christian) &lt;<a href=\"mailto:j.c.blanchette@vu.nl\">j.c.blanchette@vu.nl</a>&gt;<br>\nSent: Monday, February 13, 2023 13:03<br>\nTo: David Fuenmayor &lt;<a href=\"mailto:davfuenmayor@gmail.com\">davfuenmayor@gmail.com</a>&gt;; <a href=\"mailto:cl-isabelle-users@lists.cam.ac.uk\">cl-isabelle-users@lists.cam.ac.uk</a> &lt;<a href=\"mailto:cl-isabelle-users@lists.cam.ac.uk\">cl-isabelle-users@lists.cam.ac.uk</a>&gt;<br>\nSubject: Re: [isabelle] Sledgehammer reconstructions fail (+ irregular behaviour of metis)</p>\n<p>Dear David,</p>\n<p>First, I'm sorry for the big delay in answering your email. Part of the reason is that your email originally landed in my spam folder! Be assured that feedback about Sledgehammer's misbehaviors is always welcome.</p>\n<p>Now let's look at your theory:</p>\n<blockquote>\n<p>(<em>The metis reconstruction suggested by sledgehammer does not work out of the box</em>)<br>\nlemma \"Ex2 r = Ex2(swap r)\" sledgehammer (* by (metis Ex2_def swap_def) <em>) oops (</em> fails! *)</p>\n</blockquote>\n<p>This is visible from the fact that no time indication is printed next to the metis call (e.g. \"(0.4 s)\"). In the repository version of Isabelle (and hence, likely, in the next official version), this will be more explicitly labeled as \"(&gt; 1.0 s, timed out)\".</p>\n<p>To answer your questions:</p>\n<blockquote>\n<ul>\n<li>Why does sledgehammer suggested reconstruction fail in case 1?</li>\n</ul>\n</blockquote>\n<p>Because it fails. Or rather, it seems to take too much time. Reconstruction is not a perfect art, and because different encodings can be used by Sledgehammer and metis, there's no guarantee that a Sledgehammer/ATP proof will be reconstructible by metis. This is why Sledgehammer tests the metis calls (and other proof methods like \"auto\" and \"simp\") and suggests something that works if it can and that times out if it finds nothing.</p>\n<p>The lack of specific information in Isabelle2022 is unfortunate, and was also involuntary (older versions of Isabelle said \"(&gt; 1.0 s, timed out)\").</p>\n<blockquote>\n<ul>\n<li>Why does metis work differently in cases 1 and 2?</li>\n</ul>\n</blockquote>\n<p>Because it's a different proof goal. Metis is a highly heuristic prover and any change in the goal can lead it to perform wildly differently.</p>\n<p>Regards,<br>\nJasmin</p>\n<hr>\n<p>From: <a href=\"mailto:cl-isabelle-users-request@lists.cam.ac.uk\">cl-isabelle-users-request@lists.cam.ac.uk</a> &lt;<a href=\"mailto:cl-isabelle-users-request@lists.cam.ac.uk\">cl-isabelle-users-request@lists.cam.ac.uk</a>&gt; on behalf of David Fuenmayor &lt;<a href=\"mailto:davfuenmayor@gmail.com\">davfuenmayor@gmail.com</a>&gt;<br>\nSent: Thursday, January 19, 2023 17:35<br>\nTo: <a href=\"mailto:cl-isabelle-users@lists.cam.ac.uk\">cl-isabelle-users@lists.cam.ac.uk</a> &lt;<a href=\"mailto:cl-isabelle-users@lists.cam.ac.uk\">cl-isabelle-users@lists.cam.ac.uk</a>&gt;<br>\nSubject: Re: [isabelle] Sledgehammer reconstructions fail (+ irregular behaviour of metis)</p>\n<p>I would like to recall this message (which apparently got lost among the latest ranting against rank1 polymorphism).</p>\n<p>As a grateful user of sledgehammer, I have come to believe that this sort of tools really are the key to widespread (and game-changing!) adoption of proof assistants in the mathematical world (more so than eg. overcomplicating the type system).<br>\nSo please interpret my previous message as a <em>constructive</em> bug(?) reporting. I am open to suggestions on how to be a better user of this tool (or even contribute to it?).</p>\n<p>On Mon, 16 Jan 2023, 13:32 David Fuenmayor &lt;davfuenmayor@gmail.com&lt;mailto:<a href=\"mailto:davfuenmayor@gmail.com\">davfuenmayor@gmail.com</a>&gt;&gt; wrote:<br>\nDear Isabelle users and experts:</p>\n<p>This is an instance of a recurrent problem I have been having, under different guises, with (1) Sledgehammer's suggested reconstructions not working (mostly involving metis), and (2) metis apparent irregular behaviour (at least to the non-initiated).</p>\n<p>As shown in the attached file (whose content I copy-paste below as well), not only is the metis command, as suggested by sledgehammer, unsuccessful (without further massaging in the form of definitions' unfolding), but also is metis behaviour per se irregular (e.g. changes when switching universal with existential quantifiers as in the example).<br>\nDo you have the same problem? or am I doing something wrong?<br>\n(Fyi, I am using Isabelle 2022 on linux.)</p>\n<p>Thanks for your help!<br>\nDavid</p>\n<p>theory example<br>\n  imports Main<br>\nbegin</p>\n<p>definition \"swap f ≡ λa b. f b a\"</p>\n<p>definition \"Ex2  r ≡ ∃a b. r a b\"<br>\ndefinition \"All2 r ≡ ∀a b. r a b\"</p>\n<p>(**<strong><em><strong><em>Case 1: Using Ex2 definition</em></strong></em></strong>)</p>\n<p>(<em>The metis reconstruction suggested by sledgehammer does not work out of the box</em>)<br>\nlemma \"Ex2 r = Ex2(swap r)\" sledgehammer (* by (metis Ex2_def swap_def) <em>) oops (</em> fails! *)</p>\n<p>(<em>Some 'massaging' in the form of definition unfolding is required</em>)<br>\nlemma \"Ex2 r = Ex2(swap r)\" (* using Ex2_def swap_def by metis <em>) oops (</em> fails too! *)<br>\nlemma \"Ex2 r = Ex2(swap r)\" unfolding swap_def (* by (metis Ex2_def)<em>) oops (</em> fails too! *)<br>\nlemma \"Ex2 r = Ex2(swap r)\" unfolding Ex2_def by (metis swap_def) (* succeeds *)<br>\nlemma \"Ex2 r = Ex2(swap r)\" unfolding Ex2_def using swap_def by metis (* succeeds *)</p>\n<p>(<strong>*</strong><strong>*Case 2: Using All2 definition (no problem) </strong>****)</p>\n<p>(<em>By contrast, here the metis reconstruction suggested by sledgehammer works well out of the box</em>)<br>\nlemma \"All2 r = All2(swap r)\" sledgehammer by (metis All2_def swap_def) (* succeeds *)<br>\n(<em>and all other variants work too</em>)<br>\nlemma \"All2 r = All2(swap r)\" using All2_def swap_def by metis  (* succeeds *)<br>\nlemma \"All2 r = All2(swap r)\" unfolding All2_def swap_def by metis  (* succeeds *)</p>\n<p>(**Questions:</p>\n<ul>\n<li>Why does sledgehammer suggested reconstruction fail in case 1?</li>\n<li>Why does metis work differently in cases 1 and 2?<br>\n*)</li>\n</ul>\n<p>end</p>",
        "id": 327619430,
        "sender_full_name": "Email Gateway",
        "timestamp": 1676313775
    },
    {
        "content": "<p>From: David Fuenmayor &lt;<a href=\"mailto:davfuenmayor@gmail.com\">davfuenmayor@gmail.com</a>&gt;<br>\nDear Jasmin<br>\nThat was really quick. Thank you!<br>\nI take the opportunity to ask you about a possibly (un)related issue:<br>\nI have noticed that 'massaging' the goals by manually unfolding definitions<br>\ntends to significantly improve both sledgehammer's performance (external<br>\nATPs now finding proofs) and metis reconstructions (which otherwise fail<br>\nwhen the relevant XX_def(s) are only provided as an argument). In many<br>\ncases unfolding the first 'layer' of definitions already works wonders. So<br>\nI was wondering whether some sort of 'heuristic definitions unfolding'<br>\ncould be part of sledgehammer's repertoire? Does this make sense from your<br>\nperspective?</p>\n<p>Best<br>\nDavid</p>",
        "id": 327639691,
        "sender_full_name": "Email Gateway",
        "timestamp": 1676320023
    },
    {
        "content": "<p>From: \"\\\"Blanchette, J.C. (Jasmin Christian)\\\"\" &lt;<a href=\"mailto:cl-isabelle-users@lists.cam.ac.uk\">cl-isabelle-users@lists.cam.ac.uk</a>&gt;<br>\nDear David,</p>\n<p>The idea makes sense, but it's a bit of a can of worms: What and how far should we unfold? Maybe it's something that should be implemented in a higher-order prover like Zipperposition instead of a preprocessor, although admittedly for reconstruction to work optimally we should then unfold the same definitions as during proof search. I'm taking a note.</p>\n<p>Best,<br>\nJasmin</p>\n<hr>\n<p>From: David Fuenmayor &lt;<a href=\"mailto:davfuenmayor@gmail.com\">davfuenmayor@gmail.com</a>&gt;<br>\nSent: Monday, February 13, 2023 21:26<br>\nTo: Blanchette, J.C. (Jasmin Christian) &lt;<a href=\"mailto:j.c.blanchette@vu.nl\">j.c.blanchette@vu.nl</a>&gt;<br>\nCc: <a href=\"mailto:cl-isabelle-users@lists.cam.ac.uk\">cl-isabelle-users@lists.cam.ac.uk</a> &lt;<a href=\"mailto:cl-isabelle-users@lists.cam.ac.uk\">cl-isabelle-users@lists.cam.ac.uk</a>&gt;<br>\nSubject: Re: [isabelle] Sledgehammer reconstructions fail (+ irregular behaviour of metis)</p>\n<p>Dear Jasmin<br>\nThat was really quick. Thank you!<br>\nI take the opportunity to ask you about a possibly (un)related issue:<br>\nI have noticed that 'massaging' the goals by manually unfolding definitions tends to significantly improve both sledgehammer's performance (external ATPs now finding proofs) and metis reconstructions (which otherwise fail when the relevant XX_def(s) are only provided as an argument). In many cases unfolding the first 'layer' of definitions already works wonders. So I was wondering whether some sort of 'heuristic definitions unfolding' could be part of sledgehammer's repertoire? Does this make sense from your perspective?</p>\n<p>Best<br>\nDavid</p>\n<p>On Mon, Feb 13, 2023 at 7:42 PM Blanchette, J.C. (Jasmin Christian) &lt;j.c.blanchette@vu.nl&lt;mailto:<a href=\"mailto:j.c.blanchette@vu.nl\">j.c.blanchette@vu.nl</a>&gt;&gt; wrote:<br>\nDear David,</p>\n<p>I have looked more closely into the metis failure and found out that it was due to a misbehavior of the preprocessor (the clausifier). This is some really old code that failed when faced with nested lambdas where some inner lambda can be eta-reduced (as in \"%x y. r x y\"). I have now found a solution that doesn't break any proof in Isabelle or the AFP and that makes your example work. The patch is now part of the development version and will likely be part of the next release. Thanks again for your report.</p>\n<p>Best,<br>\nJasmin</p>\n<hr>\n<p>From: Blanchette, J.C. (Jasmin Christian) &lt;j.c.blanchette@vu.nl&lt;mailto:<a href=\"mailto:j.c.blanchette@vu.nl\">j.c.blanchette@vu.nl</a>&gt;&gt;<br>\nSent: Monday, February 13, 2023 13:03<br>\nTo: David Fuenmayor &lt;davfuenmayor@gmail.com&lt;mailto:<a href=\"mailto:davfuenmayor@gmail.com\">davfuenmayor@gmail.com</a>&gt;&gt;; cl-isabelle-users@lists.cam.ac.uk&lt;mailto:<a href=\"mailto:cl-isabelle-users@lists.cam.ac.uk\">cl-isabelle-users@lists.cam.ac.uk</a>&gt; &lt;cl-isabelle-users@lists.cam.ac.uk&lt;mailto:<a href=\"mailto:cl-isabelle-users@lists.cam.ac.uk\">cl-isabelle-users@lists.cam.ac.uk</a>&gt;&gt;<br>\nSubject: Re: [isabelle] Sledgehammer reconstructions fail (+ irregular behaviour of metis)</p>\n<p>Dear David,</p>\n<p>First, I'm sorry for the big delay in answering your email. Part of the reason is that your email originally landed in my spam folder! Be assured that feedback about Sledgehammer's misbehaviors is always welcome.</p>\n<p>Now let's look at your theory:</p>\n<blockquote>\n<p>(<em>The metis reconstruction suggested by sledgehammer does not work out of the box</em>)<br>\nlemma \"Ex2 r = Ex2(swap r)\" sledgehammer (* by (metis Ex2_def swap_def) <em>) oops (</em> fails! *)</p>\n</blockquote>\n<p>This is visible from the fact that no time indication is printed next to the metis call (e.g. \"(0.4 s)\"). In the repository version of Isabelle (and hence, likely, in the next official version), this will be more explicitly labeled as \"(&gt; 1.0 s, timed out)\".</p>\n<p>To answer your questions:</p>\n<blockquote>\n<ul>\n<li>Why does sledgehammer suggested reconstruction fail in case 1?</li>\n</ul>\n</blockquote>\n<p>Because it fails. Or rather, it seems to take too much time. Reconstruction is not a perfect art, and because different encodings can be used by Sledgehammer and metis, there's no guarantee that a Sledgehammer/ATP proof will be reconstructible by metis. This is why Sledgehammer tests the metis calls (and other proof methods like \"auto\" and \"simp\") and suggests something that works if it can and that times out if it finds nothing.</p>\n<p>The lack of specific information in Isabelle2022 is unfortunate, and was also involuntary (older versions of Isabelle said \"(&gt; 1.0 s, timed out)\").</p>\n<blockquote>\n<ul>\n<li>Why does metis work differently in cases 1 and 2?</li>\n</ul>\n</blockquote>\n<p>Because it's a different proof goal. Metis is a highly heuristic prover and any change in the goal can lead it to perform wildly differently.</p>\n<p>Regards,<br>\nJasmin</p>\n<hr>\n<p>From: cl-isabelle-users-request@lists.cam.ac.uk&lt;mailto:<a href=\"mailto:cl-isabelle-users-request@lists.cam.ac.uk\">cl-isabelle-users-request@lists.cam.ac.uk</a>&gt; &lt;cl-isabelle-users-request@lists.cam.ac.uk&lt;mailto:<a href=\"mailto:cl-isabelle-users-request@lists.cam.ac.uk\">cl-isabelle-users-request@lists.cam.ac.uk</a>&gt;&gt; on behalf of David Fuenmayor &lt;davfuenmayor@gmail.com&lt;mailto:<a href=\"mailto:davfuenmayor@gmail.com\">davfuenmayor@gmail.com</a>&gt;&gt;<br>\nSent: Thursday, January 19, 2023 17:35<br>\nTo: cl-isabelle-users@lists.cam.ac.uk&lt;mailto:<a href=\"mailto:cl-isabelle-users@lists.cam.ac.uk\">cl-isabelle-users@lists.cam.ac.uk</a>&gt; &lt;cl-isabelle-users@lists.cam.ac.uk&lt;mailto:<a href=\"mailto:cl-isabelle-users@lists.cam.ac.uk\">cl-isabelle-users@lists.cam.ac.uk</a>&gt;&gt;<br>\nSubject: Re: [isabelle] Sledgehammer reconstructions fail (+ irregular behaviour of metis)</p>\n<p>I would like to recall this message (which apparently got lost among the latest ranting against rank1 polymorphism).</p>\n<p>As a grateful user of sledgehammer, I have come to believe that this sort of tools really are the key to widespread (and game-changing!) adoption of proof assistants in the mathematical world (more so than eg. overcomplicating the type system).<br>\nSo please interpret my previous message as a <em>constructive</em> bug(?) reporting. I am open to suggestions on how to be a better user of this tool (or even contribute to it?).</p>\n<p>On Mon, 16 Jan 2023, 13:32 David Fuenmayor &lt;davfuenmayor@gmail.com&lt;mailto:<a href=\"mailto:davfuenmayor@gmail.com\">davfuenmayor@gmail.com</a>&gt;&gt; wrote:<br>\nDear Isabelle users and experts:</p>\n<p>This is an instance of a recurrent problem I have been having, under different guises, with (1) Sledgehammer's suggested reconstructions not working (mostly involving metis), and (2) metis apparent irregular behaviour (at least to the non-initiated).</p>\n<p>As shown in the attached file (whose content I copy-paste below as well), not only is the metis command, as suggested by sledgehammer, unsuccessful (without further massaging in the form of definitions' unfolding), but also is metis behaviour per se irregular (e.g. changes when switching universal with existential quantifiers as in the example).<br>\nDo you have the same problem? or am I doing something wrong?<br>\n(Fyi, I am using Isabelle 2022 on linux.)</p>\n<p>Thanks for your help!<br>\nDavid</p>\n<p>theory example<br>\n  imports Main<br>\nbegin</p>\n<p>definition \"swap f ≡ λa b. f b a\"</p>\n<p>definition \"Ex2  r ≡ ∃a b. r a b\"<br>\ndefinition \"All2 r ≡ ∀a b. r a b\"</p>\n<p>(**<strong><em><strong><em>Case 1: Using Ex2 definition</em></strong></em></strong>)</p>\n<p>(<em>The metis reconstruction suggested by sledgehammer does not work out of the box</em>)<br>\nlemma \"Ex2 r = Ex2(swap r)\" sledgehammer (* by (metis Ex2_def swap_def) <em>) oops (</em> fails! *)</p>\n<p>(<em>Some 'massaging' in the form of definition unfolding is required</em>)<br>\nlemma \"Ex2 r = Ex2(swap r)\" (* using Ex2_def swap_def by metis <em>) oops (</em> fails too! *)<br>\nlemma \"Ex2 r = Ex2(swap r)\" unfolding swap_def (* by (metis Ex2_def)<em>) oops (</em> fails too! *)<br>\nlemma \"Ex2 r = Ex2(swap r)\" unfolding Ex2_def by (metis swap_def) (* succeeds *)<br>\nlemma \"Ex2 r = Ex2(swap r)\" unfolding Ex2_def using swap_def by metis (* succeeds *)</p>\n<p>(<strong>*</strong><strong>*Case 2: Using All2 definition (no problem) </strong>****)</p>\n<p>(<em>By contrast, here the metis reconstruction suggested by sledgehammer works well out of the box</em>)<br>\nlemma \"All2 r = All2(swap r)\" sledgehammer by (metis All2_def swap_def) (* succeeds *)<br>\n(<em>and all other variants work too</em>)<br>\nlemma \"All2 r = All2(swap r)\" using All2_def swap_def by metis  (* succeeds *)<br>\nlemma \"All2 r = All2(swap r)\" unfolding All2_def swap_def by metis  (* succeeds *)</p>\n<p>(**Questions:</p>\n<ul>\n<li>Why does sledgehammer suggested reconstruction fail in case 1?</li>\n<li>Why does metis work differently in cases 1 and 2?<br>\n*)</li>\n</ul>\n<p>end</p>",
        "id": 327769542,
        "sender_full_name": "Email Gateway",
        "timestamp": 1676379689
    }
]