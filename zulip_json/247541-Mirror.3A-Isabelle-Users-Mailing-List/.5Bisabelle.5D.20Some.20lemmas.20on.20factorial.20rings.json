[
    {
        "content": "<p>From: Jakub Kądziołka &lt;<a href=\"mailto:kuba@kadziolka.net\">kuba@kadziolka.net</a>&gt;<br>\nHello,</p>\n<p>I have proven a number of lemmas today that, I believe, should be<br>\nincluded in the distribution.</p>\n<p>Regards,<br>\nJakub Kądziołka</p>\n<p>P.S. My previous suggestion regarding a HOL-Algebra lemma [1] went without a<br>\nresponse. I'd appreciate someone looking into it.</p>\n<p>[1]: <a href=\"https://lists.cam.ac.uk/mailman/htdig/cl-isabelle-users/2020-November/msg00043.html\">https://lists.cam.ac.uk/mailman/htdig/cl-isabelle-users/2020-November/msg00043.html</a></p>\n<p>context factorial_semiring<br>\nbegin</p>\n<p>lemma infinite_unit_divisor_powers:<br>\n  assumes \"y ≠ 0\"<br>\n  assumes \"is_unit x\"<br>\n  shows \"infinite {n. x^n dvd y}\"<br>\nproof -<br>\n  from <code>is_unit x</code> have \"is_unit (x^n)\" for n<br>\n    using is_unit_power_iff by auto<br>\n  hence \"x^n dvd y\" for n<br>\n    by auto<br>\n  hence \"{n. x^n dvd y} = UNIV\"<br>\n    by auto<br>\n  thus ?thesis<br>\n    by auto<br>\nqed</p>\n<p>corollary is_unit_iff_infinite_divisor_powers:<br>\n  assumes \"y ≠ 0\"<br>\n  shows \"is_unit x ⟷ infinite {n. x^n dvd y}\"<br>\n  using infinite_unit_divisor_powers finite_divisor_powers assms by auto</p>\n<p>lemma multiplicity_zero_left [simp]: \"multiplicity 0 x = 0\"<br>\n  apply (cases \"x = 0\")<br>\n  by (auto intro: not_dvd_imp_multiplicity_0)</p>\n<p>lemma multiplicity_dvd_iff_dvd:<br>\n  assumes \"x ≠ 0\"<br>\n  shows \"p^k dvd x ⟷ p^k dvd p^multiplicity p x\"<br>\nproof (cases \"is_unit p\")<br>\n  case True<br>\n  then have \"is_unit (p^k)\"<br>\n    using is_unit_power_iff by simp<br>\n  hence \"p^k dvd x\"<br>\n    by auto<br>\n  moreover from <code>is_unit p</code> have \"p^k dvd p^multiplicity p x\"<br>\n    using multiplicity_unit_left is_unit_power_iff by simp<br>\n  ultimately show ?thesis by simp<br>\nnext<br>\n  case False<br>\n  show ?thesis<br>\n  proof (cases \"p = 0\")<br>\n    case True<br>\n    then have \"p^multiplicity p x = 1\"<br>\n      by simp<br>\n    moreover have \"p^k dvd x ⟹ k = 0\"<br>\n    proof (rule ccontr)<br>\n      assume \"p^k dvd x\" and \"k ≠ 0\"<br>\n      with <code>p = 0</code> have \"p^k = 0\" by auto<br>\n      with <code>p^k dvd x</code> have \"0 dvd x\" by auto<br>\n      hence \"x = 0\" by auto<br>\n      with <code>x ≠ 0</code> show False by auto<br>\n    qed<br>\n    ultimately show ?thesis<br>\n      by (auto simp add: is_unit_power_iff <code>¬ is_unit p</code>)<br>\n  next<br>\n    case False<br>\n    with <code>x ≠ 0</code> <code>¬ is_unit p</code> show ?thesis<br>\n      by (simp add: power_dvd_iff_le_multiplicity dvd_power_iff multiplicity_same_power)<br>\n  qed<br>\nqed</p>\n<p>lemma multiplicity_decomposeI:<br>\n  assumes \"x = p^k * x'\" and \"¬ p dvd x'\" and \"p ≠ 0\"<br>\n  shows \"multiplicity p x = k\"<br>\nproof (rule multiplicity_eqI)<br>\n  from assms show \"p^k dvd x\" by auto<br>\n  from assms have \"x = x' * p^k\" by (simp add: ac_simps)<br>\n  with <code>¬ p dvd x'</code> and <code>p ≠ 0</code> show \"¬ p^Suc k dvd x\"<br>\n    by simp<br>\nqed</p>\n<p>lemma multiplicity_sum_lt:<br>\n  assumes \"multiplicity p a &lt; multiplicity p b\" \"a ≠ 0\" \"b ≠ 0\"<br>\n  shows \"multiplicity p (a + b) = multiplicity p a\"<br>\nproof -<br>\n  let ?vp = \"multiplicity p\"<br>\n  have unit: \"¬ is_unit p\"<br>\n  proof<br>\n    assume \"is_unit p\"<br>\n    then have \"?vp a = 0\" and \"?vp b = 0\" using multiplicity_unit_left by auto<br>\n    with assms show False by auto<br>\n  qed</p>\n<p>from multiplicity_decompose' obtain a' where a': \"a = p^?vp a * a'\" \"¬ p dvd a'\"<br>\n    using unit assms by metis<br>\n  from multiplicity_decompose' obtain b' where b': \"b = p^?vp b * b'\"<br>\n    using unit assms by metis</p>\n<p>show \"?vp (a + b) = ?vp a\"<br>\n    ― ‹Use the rule here, after we obtained @{term a'} and @{term b'}, to avoid the<br>\n          \"Result contains obtained parameters\" error›<br>\n  proof (rule multiplicity_decomposeI)<br>\n    let ?k = \"?vp b - ?vp a\"<br>\n    from assms have k: \"?k &gt; 0\" by simp<br>\n    with b' have \"b = p^?vp a * p^?k * b'\"<br>\n      by (simp flip: power_add)<br>\n    with a' show *: \"a + b = p^?vp a * (a' + p^?k * b')\"<br>\n      by (simp add: ac_simps distrib_left)</p>\n<p>moreover show \"¬ p dvd a' + p^?k * b'\"<br>\n      using a' k dvd_add_left_iff by auto</p>\n<p>show \"p ≠ 0\" using assms by auto<br>\n  qed<br>\nqed</p>\n<p>corollary multiplicity_sum_min:<br>\n  assumes \"multiplicity p a ≠ multiplicity p b\" \"a ≠ 0\" \"b ≠ 0\"<br>\n  shows \"multiplicity p (a + b) = min (multiplicity p a) (multiplicity p b)\"<br>\nproof -<br>\n  let ?vp = \"multiplicity p\"<br>\n  from assms have \"?vp a &lt; ?vp b ∨ ?vp a &gt; ?vp b\"<br>\n    by auto<br>\n  then show ?thesis<br>\n    by (metis assms multiplicity_sum_lt min.commute add_commute min.strict_order_iff)    <br>\nqed</p>\n<p>end</p>",
        "id": 222661404,
        "sender_full_name": "Email Gateway",
        "timestamp": 1610580075
    },
    {
        "content": "<p>From: Florian Haftmann &lt;<a href=\"mailto:florian.haftmann@informatik.tu-muenchen.de\">florian.haftmann@informatik.tu-muenchen.de</a>&gt;<br>\nHi Jakub,</p>\n<p>thanks for contributing this.</p>\n<p>I will put it into the distribution after the upcoming Isabelle2021 release.</p>\n<p>Cheers,<br>\n    Florian<br>\n<a href=\"/user_uploads/14278/DXCcxHbQnE_-DgUFb7sLaA9I/signature.asc\">signature.asc</a></p>",
        "id": 222732641,
        "sender_full_name": "Email Gateway",
        "timestamp": 1610638113
    }
]