[
    {
        "content": "<p>From: Gergely Buday &lt;<a href=\"mailto:cl-isabelle-users@lists.cam.ac.uk\">cl-isabelle-users@lists.cam.ac.uk</a>&gt;<br>\nHi there,</p>\n<p>I would like to have this syntax for lambda abstraction:</p>\n<p>exp | x ≡ λx. exp</p>\n<p>How could I define this in Isabelle? I got the advice to use abbreviation,<br>\nbut it takes values and here x is not a value but a variable.</p>\n<p>It's also not clear how I could use a mixfix syntax for this for the same<br>\nreason.</p>\n<ul>\n<li>Gergely</li>\n</ul>",
        "id": 441458099,
        "sender_full_name": "Email Gateway",
        "timestamp": 1717076059
    },
    {
        "content": "<p>From: Mike Stannett &lt;<a href=\"mailto:cl-isabelle-users@lists.cam.ac.uk\">cl-isabelle-users@lists.cam.ac.uk</a>&gt;<br>\nHi Gergely - using the following approach seems to work. [I've not used<br>\nsyntax/translations before so if this is wrong, someone please correct me!]</p>\n<p>syntax<br>\n  \"_Bindme\" :: \"term  ⇒ idt  ⇒ term\"    (\"( _ ¦ _ )\")</p>\n<p>translations<br>\n   \"(exp ¦ x)\" ⇌ \"(λx. exp)\"</p>\n<p>lemma bindme_binds: \"∀ exp x v  . ( exp ¦ x ) v = (λ x . exp) v\"<br>\n  by simp</p>\n<p>(* Example *)<br>\nvalue \"((x<em>x) ¦ x) (2::nat)\" (</em> = 4   *)<br>\nvalue \"((x<em>x) ¦ y) (2::nat)\" (</em> = x*x *)</p>\n<p>Mike</p>",
        "id": 441570490,
        "sender_full_name": "Email Gateway",
        "timestamp": 1717107527
    },
    {
        "content": "<p>From: Gergely Buday &lt;<a href=\"mailto:cl-isabelle-users@lists.cam.ac.uk\">cl-isabelle-users@lists.cam.ac.uk</a>&gt;<br>\nDear Mike,</p>\n<p>thanks. Now I discovered a paragraph at section 8.5.2 of the Isar Reference<br>\nManual that states</p>\n<p>Raw syntax and translations provides a slightly more low-level access to<br>\nthe grammar and the form of resulting parse trees. It is often possible<br>\nto avoid this untyped macro mechanism, and use type-safe abbreviation<br>\nor notation instead. Some important situations where syntax and<br>\ntranslations are really need are as follows:</p>\n<p>• Iterated replacement via recursive translations. For example, con-<br>\nsider list enumeration [a, b, c, d] as defined in theory HOL.List.</p>\n<p>• Change of binding status of variables: anything beyond the built-in<br>\nbinder mixfix annotation requires explicit syntax translations. For<br>\nexample, consider the set comprehension syntax {x. P} as defined in<br>\ntheory HOL.Set.</p>\n<hr>\n<p>so indeed syntax and translations should be used here, abbreviation and<br>\nnotation are not suitable.</p>\n<ul>\n<li>Gergely</li>\n</ul>",
        "id": 441644922,
        "sender_full_name": "Email Gateway",
        "timestamp": 1717142866
    },
    {
        "content": "<p>From: Gergely Buday &lt;<a href=\"mailto:cl-isabelle-users@lists.cam.ac.uk\">cl-isabelle-users@lists.cam.ac.uk</a>&gt;<br>\nMy syntax/translations code works when in the main context of Isabelle, but<br>\nwhen I try to use it in a locale it complains about a bad context:</p>\n<p>theory SyntaxTranslations</p>\n<p>imports Main</p>\n<p>begin</p>\n<p>locale A begin</p>\n<p>typedecl 'a M</p>\n<p>consts mmap :: \"('a ⇒ 'b) ⇒ ('a M ⇒ 'b M)\"  (* Bad context for command<br>\n\"consts\" *)</p>\n<p>syntax<br>\n  \"_mmap_comprehension\" :: \"term ⇒ idt ⇒ term ⇒ term\" (\"[ _ | _ &lt;- _ ]\")</p>\n<p>translations                                          (* Bad context for<br>\ncommand \"translations\" *)<br>\n  \"[ exp | x &lt;- e ]\" ⇌ \"CONST mmap (λx. exp) e\"</p>\n<hr>\n<p>It complains not only at translations but at consts as well. Are these too<br>\nlow-level to be used in a locale?</p>\n<ul>\n<li>Gergely</li>\n</ul>",
        "id": 441666669,
        "sender_full_name": "Email Gateway",
        "timestamp": 1717149723
    }
]