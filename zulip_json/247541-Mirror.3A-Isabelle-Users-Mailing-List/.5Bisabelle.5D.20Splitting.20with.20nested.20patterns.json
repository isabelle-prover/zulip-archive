[
    {
        "content": "<p>From: Wolfgang Jeltsch &lt;<a href=\"mailto:wolfgang@well-typed.com\">wolfgang@well-typed.com</a>&gt;<br>\nHi!</p>\n<p>The split rules that are generated by datatype declarations deal only<br>\nwith <code>case</code> expressions that use patterns with one constructor each.<br>\nHowever, I’m dealing with goals that contain <code>case</code> expressions that use<br>\npatterns with multiple constructors. For example, there may be <code>case</code><br>\nexpressions of the following form:</p>\n<p>case x of None ⇒ … | Some False ⇒ … | Some True ⇒ …</p>\n<p>My experience is that the Simplifier cannot really cope with such case<br>\nexpressions. How can I assist it?</p>\n<p>By the way, how are such <code>case</code> expressions represented internally? My<br>\nimpression is that they are just syntactic sugar for more fundamental<br>\nexpressions, but I don’t know what these expressions are.</p>\n<p>All the best,<br>\nWolfgang</p>",
        "id": 384257893,
        "sender_full_name": "Email Gateway",
        "timestamp": 1691845102
    },
    {
        "content": "<p>From: Wolfgang Jeltsch &lt;<a href=\"mailto:wolfgang@well-typed.com\">wolfgang@well-typed.com</a>&gt;<br>\nHi, again!</p>\n<p>Through some study and experiments I probably found out how the<br>\ndesugaring of such <code>case</code> expressions works. Apparently, <code>case</code><br>\nexpressions with one constructor per pattern are internally represented<br>\nas full applications of <code>case_⟨type-of-scrutinee⟩</code> and <code>case</code><br>\nexpressions with multiple constructors per pattern, like the above one,<br>\nare internally represented as nested applications of such eliminator<br>\nfunctions, for example <code>case_option … (case_bool … …) x</code>. This, in turn,<br>\nshould mean that also such more complex <code>case</code> expressions work with the<br>\ndefault split rules.</p>\n<p>Maybe I have to search for other reasons why simplification of my goals<br>\ndoesn’t work. If anyone has some idea what else could go wrong in the<br>\npresence of such <code>case</code> expressions, please tell me.</p>\n<p>All the best,<br>\nWolfgang</p>",
        "id": 384272709,
        "sender_full_name": "Email Gateway",
        "timestamp": 1691848651
    },
    {
        "content": "<p>From: Thomas Sewell &lt;<a href=\"mailto:tals4@cam.ac.uk\">tals4@cam.ac.uk</a>&gt;<br>\nIndeed, there is one case constant per datatype.</p>\n<p>Its name is usually obvious, e.g. \"term case_option\" in a theory file will tell you the type of the case constant for option.</p>\n<p>To break up a goal with a multi-level case structure, you probably just need to add the split rules for all the case constants that are involved, e.g. both option and bool in the case you showed.</p>\n<p>If that doesn't work, you probably need to inspect the goal after the splitting and try to figure out what is blocking the simplifier from taking further steps.</p>\n<p>The ML sublanguage of Isabelle sometimes helps in learning which constants are involved in certain syntax. For instance, the below makes it clear that a constant called Option.option.case_option is applied to various terms to make a case split:</p>\n<p>ML ‹ @{term \"case x of None =&gt; 1 | _ =&gt; 2\"} ›</p>\n<p>Good luck with it,<br>\n    Thomas.</p>",
        "id": 384494825,
        "sender_full_name": "Email Gateway",
        "timestamp": 1691932981
    },
    {
        "content": "<p>From: Wolfgang Jeltsch &lt;<a href=\"mailto:wolfgang@well-typed.com\">wolfgang@well-typed.com</a>&gt;<br>\nWait, I need to explicitly add these split rules? I thought the split<br>\nrules that have been automatically generated for a datatype are already<br>\nregistered to be taken into account by the Simplifier, analogously to<br>\nthe datatype’s simplification rules already being part of the simpset.<br>\nIs this not the case?</p>\n<p>All the best,<br>\nWolfgang</p>",
        "id": 384801466,
        "sender_full_name": "Email Gateway",
        "timestamp": 1692023834
    },
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\nOn 14/08/2023 16:37, Wolfgang Jeltsch wrote:</p>\n<blockquote>\n<p>Am Sonntag, dem 13.08.2023 um 13:22 +0000 schrieb Thomas Sewell:</p>\n<blockquote>\n<p>To break up a goal with a multi-level case structure, you probably<br>\njust need to add the split rules for all the case constants that are<br>\ninvolved, e.g. both option and bool in the case you showed.</p>\n</blockquote>\n<p>Wait, I need to explicitly add these split rules? I thought the split<br>\nrules that have been automatically generated for a datatype are already<br>\nregistered to be taken into account by the Simplifier, analogously to<br>\nthe datatype’s simplification rules already being part of the simpset.<br>\nIs this not the case?</p>\n</blockquote>\n<p>No.</p>\n<p>Tobias</p>\n<blockquote>\n<p>All the best,<br>\nWolfgang</p>\n</blockquote>\n<p><a href=\"/user_uploads/14278/1qDmYXJ0DM5i6Hw8LaTr0G5q/smime.p7s\">smime.p7s</a></p>",
        "id": 384825946,
        "sender_full_name": "Email Gateway",
        "timestamp": 1692028238
    }
]