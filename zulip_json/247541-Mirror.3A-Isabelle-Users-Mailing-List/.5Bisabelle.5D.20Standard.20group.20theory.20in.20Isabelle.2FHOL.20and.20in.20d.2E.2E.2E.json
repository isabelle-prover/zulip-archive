[
    {
        "content": "<p>From: Ken Kubota &lt;<a href=\"mailto:mail@kenkubota.de\">mail@kenkubota.de</a>&gt;<br>\nFirst, thank you very much for the extensive explanation, and the reference to Ballarin's paper at <a href=\"https://doi.org/10.1007/s10817-019-09537-9\">https://doi.org/10.1007/s10817-019-09537-9</a> &lt;<a href=\"https://doi.org/10.1007/s10817-019-09537-9\">https://doi.org/10.1007/s10817-019-09537-9</a>&gt;, which I have read.</p>\n<p>Let me focus on two points on how abstract algebra is implemented in Isabelle/HOL.</p>\n<p>A. Using locales and meta-logical implication for expressing type dependencies</p>\n<p>Best suited for comparison is the monoid definition</p>\n<p>locale monoid =<br>\n    fixes M and composition (infixl \"·\" 70) and unit (\"1\")</p>\n<p>assumes composition_closed: \"[ a ∈ M; b ∈ M ] 􏰀⇒ a · b ∈ M\"</p>\n<p>and unit_closed: \"1 ∈ M\"</p>\n<p>and associative:\"[ a ∈ M ; b ∈ M ; c ∈ M ] 􏰀⇒ (a · b) · c = a · (b · c)\"    </p>\n<p>and left_unit:\"a ∈ M 􏰀⇒ 1 · a = a\"<br>\n        and right_unit:\"a ∈ M 􏰀⇒ a · 1  = a\" </p>\n<p>as presented by Ballarin (p. 3) and similar to that actually used in HOL-Algebra<br>\n<a href=\"https://isabelle.in.tum.de/library/HOL/HOL-Algebra/Group.html\">https://isabelle.in.tum.de/library/HOL/HOL-Algebra/Group.html</a><br>\nsince the group definition itself there has only an abbreviated definition as monoid + inverse element.</p>\n<p>The dependencies (Isabelle: \"fixes\") are the same as in this expression of R0:</p>\n<h2>Group property identity element only (with identity element abstracted)</h2>\n<p>:= GrpIdO [λgτ .<a href=\"http://og(ggg)\">λlggg.[λeg.GrpIdyo](og)</a>]</p>\n<h1>wff 270 : [λg.[λl.[λe.GrpIdy]]]o\\3(\\4\\4\\3)τ := GrpIdO</h1>\n<p><a href=\"https://www.owlofminerva.net/files/formulae.pdf#page=362\">https://www.owlofminerva.net/files/formulae.pdf#page=362</a> &lt;<a href=\"https://www.owlofminerva.net/files/formulae.pdf#page=362\">https://www.owlofminerva.net/files/formulae.pdf#page=362</a>&gt;</p>\n<p>The variables bound by lambda are: g, l, e<br>\nmeaning the set (carrier, type), the operation, and the identity element (unit),<br>\nand correspond to: M, composition (infixl \"·\" 70), and unit (\"1\") in this example.<br>\nThe type dependency here is represented by g which occurs both at the type level and the term level (type abstraction): [λgτ .[λlggg.[λeg. ...]]]</p>\n<p>Since type abstraction is not available in Isabelle/HOL, one cannot naturally express the closure of the operation with the typed expression lggg (l : g -&gt; g -&gt; g),<br>\nbut one has to use the assumption composition_closed: \"[ a ∈ M; b ∈ M ] 􏰀⇒ a · b ∈ M\"<br>\ncontrary to the concept of type theory to code such type assumptions syntactically as types.<br>\nUsing the element relation of set theory (a ∈ M) or some alternative formulation (Ma) is what you usually want to avoid in type theory.<br>\nMoreover, since the symbol ⇒ is the meta-logical implication (‘meta-implication’) of Isabelle's meta-logic (and not the logical implication of the object logic Isabelle/HOL), it becomes clear that the formal system (simple or polymorphic type theory) itself is insufficient, but some extension, in this case Isabelle's meta-logic, is required for expressing this type restriction.</p>\n<p>In summary:</p>\n<ol>\n<li>Simple or polymorphic type theory (e.g., Q0, HOL, HOL4) alone is clearly insufficient for expressing abstract algebra (e.g., group theory).</li>\n<li>\n<p>At least some kind of extension is required, in this case Isabelle's meta-logic is employed<br>\n    (using the ‘meta-implication’ as described on p. 4 of <a href=\"https://www.cl.cam.ac.uk/techreports/UCAM-CL-TR-130.pdf\">https://www.cl.cam.ac.uk/techreports/UCAM-CL-TR-130.pdf</a> &lt;<a href=\"https://www.cl.cam.ac.uk/techreports/UCAM-CL-TR-130.pdf\">https://www.cl.cam.ac.uk/techreports/UCAM-CL-TR-130.pdf</a>&gt;).</p>\n</li>\n<li>\n<p>Even then – with the use of some extension (as a workaround) – the coding of the type restrictions is very clumsy in comparison to the natural expression using type abstraction and the substitution of types via lambda conversion (e.g., with N for the natural numbers you would have: [λgτ .[λlggg.[λeg. ...]]]N = [λlNNN.[λeN. ...]], i.e., the closure of the operation l and of the identity element e as syntactical prerequisites).</p>\n</li>\n</ol>\n<p>In other words, what could be easily and naturally represented with type abstraction within the formal language, in Isabelle/HOL also requires the meta-logic as an extension for implementing only a workaround, and moreover requires maybe some dependencies encoded in the \"locales\".</p>\n<p>\"Locales are extra-logical. The functors they represent are not encoded in Isabelle’s logic. Instead, whenever a locale is visited—that is, a context block entered—the locale is activated:<br>\n– The locale graph is traversed and all reachable locale instances are activated recursively.<br>\n– The body of the locale is added to the context, making its declarations available.\" (Ballarin's paper, p. 5)</p>\n<p>\"Locales provide means for structuring formal developments, but they do not change the underlying logic, so they do not increase expressiveness. This is a fundamental limitation. On the other hand, locales work on top of any logic provided there is substitution [6, Section 3.1], so they could be provided for a wide range of provers.\" (p. 26)</p>\n<p>It seems that the substitution of types via lambda conversion (using type abstraction) here is replaced by locales.</p>\n<p>B. Instantiation</p>\n<p>Some substitution must take place in the step from the theorem of the uniqueness of the identity element in groups to that of a particular group.<br>\nHow is this done in Isabelle/HOL?<br>\nPresumably this also requires Isabelle's meta-logic.</p>\n<p>How can one obtain the fully expanded internal version of a statement as shown on p. 19 of Ballarin's paper?</p>\n<hr>\n<p>Ken Kubota<br>\n<a href=\"https://doi.org/10.4444/100\">https://doi.org/10.4444/100</a></p>",
        "id": 204923331,
        "sender_full_name": "Email Gateway",
        "timestamp": 1595601457
    }
]