[
    {
        "content": "<p>From: Dominic Mulligan &lt;<a href=\"mailto:cl-isabelle-users@lists.cam.ac.uk\">cl-isabelle-users@lists.cam.ac.uk</a>&gt;<br>\nHi,</p>\n<p>What is the current \"state-of-the-art\" for generating executable code for<br>\nfunctions defined in locales?  I have done some searching and came across<br>\nthe following thread on this mailing list from 14 years ago:</p>\n<p><a href=\"https://fa.isabelle.narkive.com/yg28DBD6/isabelle-code-generation-for-functions-defined-in-locales\">https://fa.isabelle.narkive.com/yg28DBD6/isabelle-code-generation-for-functions-defined-in-locales</a></p>\n<p>Florian's answer there appears to work (albeit \"where\" is now \"rewrites\").<br>\nHowever this technique is also quite cumbrous, especially as the number of<br>\nfunctions defined within the scope of a locale grows.  Is there a more<br>\nstreamlined approach to handling this today?</p>\n<p>Thanks,<br>\nDominic</p>",
        "id": 311255679,
        "sender_full_name": "Email Gateway",
        "timestamp": 1669027260
    },
    {
        "content": "<p>From: Peter Lammich &lt;<a href=\"mailto:lammich@in.tum.de\">lammich@in.tum.de</a>&gt;<br>\nNowadays, you can use global_interpretation, and manually list all constants<br>\nin the defines part... But the basic problem of having to write boilerplate<br>\nfor every constant persists. While ad hoc solutions for simple cases are<br>\ncertainly possible (<a href=\"https://www.isa-\">https://www.isa-</a><br>\n<a href=\"http://afp.org/theories/collections/#Locale_Code_Ex\">afp.org/theories/collections/#Locale_Code_Ex</a>), I understand that a general<br>\nsolution accounting for the full power of locale expressions would be<br>\nproblematic.</p>\n<p>Peter Lammich</p>",
        "id": 311267058,
        "sender_full_name": "Email Gateway",
        "timestamp": 1669031617
    },
    {
        "content": "<p>From: Dominic Mulligan &lt;<a href=\"mailto:cl-isabelle-users@lists.cam.ac.uk\">cl-isabelle-users@lists.cam.ac.uk</a>&gt;<br>\nMany thanks, Peter, for the speedy reply!  I will look into <code>defines</code> for<br>\n<code>global_interpretation</code>.</p>",
        "id": 311278640,
        "sender_full_name": "Email Gateway",
        "timestamp": 1669036121
    },
    {
        "content": "<p>From: Mohammad Abdulaziz &lt;<a href=\"mailto:mohammad.abdulaziz8@gmail.com\">mohammad.abdulaziz8@gmail.com</a>&gt;<br>\nHi Peter,</p>\n<p>do you have pointers to limitations of a fully general solution?</p>\n<p>best,<br>\nMohammad<br>\n<a href=\"/user_uploads/14278/cgq8dpKx6s6fWmFahMQL7Cgl/OpenPGP_0x1524AD6775B326EC.asc\">OpenPGP_0x1524AD6775B326EC.asc</a><br>\n<a href=\"/user_uploads/14278/6tCEDTVnUi83y6Y3PS-Z1hLa/OpenPGP_signature\">OpenPGP_signature</a></p>",
        "id": 311281126,
        "sender_full_name": "Email Gateway",
        "timestamp": 1669037036
    },
    {
        "content": "<p>From: Peter Lammich &lt;<a href=\"mailto:lammich@in.tum.de\">lammich@in.tum.de</a>&gt;<br>\nno. I vaguely remember a discussion with Makarius (or maybe Florian) <br>\nsome 12 years ago, who doubted that <br>\n<a href=\"https://www.isa-afp.org/theories/collections/#Locale_Code_Ex\">https://www.isa-afp.org/theories/collections/#Locale_Code_Ex</a> can be done <br>\nin a clean way ...</p>",
        "id": 311420968,
        "sender_full_name": "Email Gateway",
        "timestamp": 1669048495
    }
]