[
    {
        "content": "<p>From: Dominic Mulligan &lt;<a href=\"mailto:cl-isabelle-users@lists.cam.ac.uk\">cl-isabelle-users@lists.cam.ac.uk</a>&gt;<br>\nHi,</p>\n<p>We are working on a proof that makes use of the HOL-Word finite machine<br>\nword library and the associated AFP Word_Lib library [1].  We have found<br>\nworking with machine words to be cumbersome with Isabelle's<br>\nautomation—including Sledgehammer—surprisingly poor at solving problems<br>\ninvolving machine words.  Often our proofs devolve into fairly painstaking<br>\nmanual proof steps, and we have now built up a quite-extensive suite of<br>\nproject-specific word-related lemmas as a testament to past battles.<br>\nNaively, perhaps, we would have thought most if not all problems we are<br>\ndealing with are well within the capabilities of a modern SMT solver.</p>\n<p>Is this expected, or are we somehow configuring these libraries, or<br>\nSledgehammer, incorrectly?  (Fairly old) papers like [2] would suggest that<br>\nintegration between the various HOL machine word libraries and SMT solvers<br>\nmaybe should be better than what we are experiencing?</p>\n<p>Thanks,<br>\nDominic</p>\n<p>[1]: <a href=\"https://www.isa-afp.org/entries/Word_Lib.html\">https://www.isa-afp.org/entries/Word_Lib.html</a><br>\n[2]: <a href=\"https://user.it.uu.se/~tjawe125/publications/boehme11reconstruction.pdf\">https://user.it.uu.se/~tjawe125/publications/boehme11reconstruction.pdf</a></p>",
        "id": 393687107,
        "sender_full_name": "Email Gateway",
        "timestamp": 1695900105
    },
    {
        "content": "<p>From: Thomas Sewell &lt;<a href=\"mailto:tals4@cam.ac.uk\">tals4@cam.ac.uk</a>&gt;<br>\nAutomation for the word library has never been good.</p>\n<p>Some of the basics are in the simplifier, but, as I understand it, some default inequality/transitivity reasoning that the simplifier does for integers and naturals is not available. This may be because the relevant logic has more side conditions for words, or just an omission, I'm not sure.</p>\n<p>The old work got as far as encoding bitvector problems to SMT consistently, and replaying the proofs of an ancient version of Z3 inconsistently. I don't think there has been further progress on that. Without a reliable replay mechanism, the solver would have to be trusted as an oracle, and this is not done by default. I managed to activate it for a project a couple of years ago. Scanning the relevant theory, it looks like these settings in particular may be relevant:</p>\n<p>declare [[smt_oracle, z3_extensions]]</p>\n<p>Good luck,<br>\n    Thomas.</p>",
        "id": 393689876,
        "sender_full_name": "Email Gateway",
        "timestamp": 1695900897
    },
    {
        "content": "<p>From: Dominic Mulligan &lt;<a href=\"mailto:cl-isabelle-users@lists.cam.ac.uk\">cl-isabelle-users@lists.cam.ac.uk</a>&gt;<br>\nMany thanks for the reply and pointing us to those configuration options!</p>\n<p>Out of interest: how much work would be needed to get comprehensive SMT<br>\nreplay support for the machine words library, would you estimate, for<br>\nsomebody who knows what they are doing?</p>\n<p>Thanks,<br>\nDominic</p>",
        "id": 393710692,
        "sender_full_name": "Email Gateway",
        "timestamp": 1695905935
    },
    {
        "content": "<p>From: Mathias Fleury &lt;<a href=\"mailto:mathias.fleury12@gmail.com\">mathias.fleury12@gmail.com</a>&gt;<br>\nHi all</p>\n<blockquote>\n<p>On Thu, 28 Sept 2023 at 12:34, Thomas Sewell &lt;<a href=\"mailto:tals4@cam.ac.uk\">tals4@cam.ac.uk</a>&gt; wrote:</p>\n<p>The old work got as far as encoding bitvector problems to SMT<br>\n    consistently, and replaying the proofs of an ancient version of Z3<br>\n    inconsistently.</p>\n<p>There never was any parsing from SMT-Lib back to Isabelle (and don't let <br>\nthe paper let you believe there ever was).</p>\n</blockquote>\n<blockquote>\n<p>I don't think there has been further progress on that. Without a<br>\n    reliable replay mechanism, the solver would have to be trusted as<br>\n    an oracle, and this is not done by default. I managed to activate<br>\n    it for a project a couple of years ago. Scanning the relevant<br>\n    theory, it looks like these settings in particular may be relevant:</p>\n<p>declare [[smt_oracle, z3_extensions]]</p>\n<p>Good luck,<br>\n        Thomas.</p>\n<p>------------------------------------------------------------------------<br>\n<em>From:</em> <a href=\"mailto:cl-isabelle-users-request@lists.cam.ac.uk\">cl-isabelle-users-request@lists.cam.ac.uk</a><br>\n    &lt;<a href=\"mailto:cl-isabelle-users-request@lists.cam.ac.uk\">cl-isabelle-users-request@lists.cam.ac.uk</a>&gt; on behalf of Dominic<br>\n    Mulligan &lt;<a href=\"mailto:cl-isabelle-users@lists.cam.ac.uk\">cl-isabelle-users@lists.cam.ac.uk</a>&gt;<br>\n<em>Sent:</em> 28 September 2023 12:16<br>\n<em>To:</em> Isabelle-Users Mailinglist &lt;<a href=\"mailto:isabelle-users@cl.cam.ac.uk\">isabelle-users@cl.cam.ac.uk</a>&gt;<br>\n<em>Subject:</em> [isabelle] Status of automation for machine words<br>\n    Hi,</p>\n<p>We are working on a proof that makes use of the HOL-Word finite<br>\n    machine word library and the associated AFP Word_Lib library [1]. <br>\n    We have found working with machine words to be cumbersome with<br>\n    Isabelle's automation—including Sledgehammer—surprisingly poor at<br>\n    solving problems involving machine words.  Often our proofs<br>\n    devolve into fairly painstaking manual proof steps, and we have<br>\n    now built up a quite-extensive suite of project-specific<br>\n    word-related lemmas as a testament to past battles.  Naively,<br>\n    perhaps, we would have thought most if not all problems we are<br>\n    dealing with are well within the capabilities of a modern SMT solver.</p>\n<p>Is this expected, or are we somehow configuring these libraries,<br>\n    or Sledgehammer, incorrectly? (Fairly old) papers like [2] would<br>\n    suggest that integration between the various HOL machine word<br>\n    libraries and SMT solvers maybe should be better than what we are<br>\n    experiencing?</p>\n<p>Thanks,<br>\n    Dominic</p>\n<p>[1]: <a href=\"https://www.isa-afp.org/entries/Word_Lib.html\">https://www.isa-afp.org/entries/Word_Lib.html</a><br>\n    [2]:<br>\n<a href=\"https://user.it.uu.se/~tjawe125/publications/boehme11reconstruction.pdf\">https://user.it.uu.se/~tjawe125/publications/boehme11reconstruction.pdf</a></p>\n</blockquote>\n<blockquote>\n<p>Out of interest: how much work would be needed to get comprehensive <br>\nSMT replay support for the machine words library, would you estimate, <br>\nfor somebody who knows what they are doing?</p>\n</blockquote>\n<p>cvc5 is trying to do that for fixed size vectors (so 32 words or 64 <br>\nwords but not 'a word). There is ongoing work (outside of the Isabelle <br>\ntree because there is too much work going on) to make it work. This <br>\ninvolves:</p>\n<ol>\n<li>\n<p>changing parts of SMT: like the current version is assuming<br>\n    monotonicity in the features (this is not the case if you support<br>\n    cvc5 and veriT and z3)</p>\n</li>\n<li>\n<p>adapting the reconstruction of cvc5 proofs in Isabelle</p>\n</li>\n<li>changing cvc5 to produce useful proofs</li>\n</ol>\n<p>I don't understand exactly how 3 works (Hanna in CC knows everything <br>\nabout that), but it requires changes in the interface (e.g., with RaRe <br>\nrules that \"configure\" cvc5) and in the output to make it work. As long <br>\nas 3 is not fixed, 2 cannot fully work either.</p>\n<p>And problem 1 is challenging because of surprising issues. I backport <br>\nchanges to the distribution around once a year for that.</p>\n<p>So all together, not easy to do…</p>\n<p>Mathias</p>\n<blockquote>\n<p>Thanks,<br>\nDominic</p>\n<p>On Thu, 28 Sept 2023 at 12:34, Thomas Sewell &lt;<a href=\"mailto:tals4@cam.ac.uk\">tals4@cam.ac.uk</a>&gt; wrote:</p>\n<p>Automation for the word library has never been good.</p>\n<p>Some of the basics are in the simplifier, but, as I understand it,<br>\n    some default inequality/transitivity reasoning that the simplifier<br>\n    does for integers and naturals is not available. This may be<br>\n    because the relevant logic has more side conditions for words, or<br>\n    just an omission, I'm not sure.</p>\n<p>The old work got as far as encoding bitvector problems to SMT<br>\n    consistently, and replaying the proofs of an ancient version of Z3<br>\n    inconsistently. I don't think there has been further progress on<br>\n    that. Without a reliable replay mechanism, the solver would have<br>\n    to be trusted as an oracle, and this is not done by default. I<br>\n    managed to activate it for a project a couple of years ago.<br>\n    Scanning the relevant theory, it looks like these settings in<br>\n    particular may be relevant:</p>\n<p>declare [[smt_oracle, z3_extensions]]</p>\n<p>Good luck,<br>\n        Thomas.</p>\n<p>------------------------------------------------------------------------<br>\n<em>From:</em> <a href=\"mailto:cl-isabelle-users-request@lists.cam.ac.uk\">cl-isabelle-users-request@lists.cam.ac.uk</a><br>\n    &lt;<a href=\"mailto:cl-isabelle-users-request@lists.cam.ac.uk\">cl-isabelle-users-request@lists.cam.ac.uk</a>&gt; on behalf of Dominic<br>\n    Mulligan &lt;<a href=\"mailto:cl-isabelle-users@lists.cam.ac.uk\">cl-isabelle-users@lists.cam.ac.uk</a>&gt;<br>\n<em>Sent:</em> 28 September 2023 12:16<br>\n<em>To:</em> Isabelle-Users Mailinglist &lt;<a href=\"mailto:isabelle-users@cl.cam.ac.uk\">isabelle-users@cl.cam.ac.uk</a>&gt;<br>\n<em>Subject:</em> [isabelle] Status of automation for machine words<br>\n    Hi,</p>\n<p>We are working on a proof that makes use of the HOL-Word finite<br>\n    machine word library and the associated AFP Word_Lib library [1]. <br>\n    We have found working with machine words to be cumbersome with<br>\n    Isabelle's automation—including Sledgehammer—surprisingly poor at<br>\n    solving problems involving machine words.  Often our proofs<br>\n    devolve into fairly painstaking manual proof steps, and we have<br>\n    now built up a quite-extensive suite of project-specific<br>\n    word-related lemmas as a testament to past battles.  Naively,<br>\n    perhaps, we would have thought most if not all problems we are<br>\n    dealing with are well within the capabilities of a modern SMT solver.</p>\n<p>Is this expected, or are we somehow configuring these libraries,<br>\n    or Sledgehammer, incorrectly? (Fairly old) papers like [2] would<br>\n    suggest that integration between the various HOL machine word<br>\n    libraries and SMT solvers maybe should be better than what we are<br>\n    experiencing?</p>\n<p>Thanks,<br>\n    Dominic</p>\n<p>[1]: <a href=\"https://www.isa-afp.org/entries/Word_Lib.html\">https://www.isa-afp.org/entries/Word_Lib.html</a><br>\n    [2]:<br>\n<a href=\"https://user.it.uu.se/~tjawe125/publications/boehme11reconstruction.pdf\">https://user.it.uu.se/~tjawe125/publications/boehme11reconstruction.pdf</a></p>\n</blockquote>",
        "id": 393715601,
        "sender_full_name": "Email Gateway",
        "timestamp": 1695907255
    },
    {
        "content": "<p>From: Thomas Sewell &lt;<a href=\"mailto:tals4@cam.ac.uk\">tals4@cam.ac.uk</a>&gt;<br>\nWe did have a somewhat working reconstruction from a Z3 proof format to Isabelle back around 2010. SMT-Lib did not specify a proof format at the time, so it was specific to Z3, and probably specific to an old Z3 version. It's possible it was never in the main Isabelle repository, in which case I no longer know where to find it.</p>\n<p>That experiment got thrown together fairly quickly, and could probably be re-done for a new prover, with better engineering, in 1-3 months, I'd guess.</p>\n<p>The bigger problem was in the nature of the proofs. When replaying Z3 proofs for boolean problems and integer problems, the proofs were of manageable size and mostly contained simple steps. When bitvectors were present, though, the solver's proof strategy tended toward brute force, and the proofs grew larger. Moreover, some of the steps themselves required brute force on our end. The performance trends didn't look good, and we left the project on hold. If I remember right, the main part of that experiment that got used elsewhere was the bitwise conversion.</p>\n<p>Best regards,<br>\n    Thomas.</p>",
        "id": 393729587,
        "sender_full_name": "Email Gateway",
        "timestamp": 1695909955
    }
]