[
    {
        "content": "<p>From: Manuel Eberl &lt;<a href=\"mailto:eberlm@in.tum.de\">eberlm@in.tum.de</a>&gt;<br>\nSomebody asked a question of StackOverflow [1] about why the \"subst\"<br>\nmethod (which should only affect the first subgoal) implicitly<br>\ndischarges duplicate subgoals. I checked the code and found that it<br>\nsomehow calls \"distinct_subgoals_tac\" somewhere, although I find the<br>\ncode very difficult to read:</p>\n<p>fun eqsubst_tac ctxt occs thms i st =<br>\n  let val nprems = Thm.nprems_of st in<br>\n    if nprems &lt; i then Seq.empty else<br>\n    let<br>\n      val thmseq = Seq.of_list thms;<br>\n      fun apply_occ occ st =<br>\n        thmseq |&gt; Seq.maps (fn r =&gt;<br>\n          eqsubst_tac' ctxt<br>\n            (skip_first_occs_search occ searchf_lr_unify_valid) r<br>\n            (i + (Thm.nprems_of st - nprems)) st);<br>\n      val sorted_occs = Library.sort (rev_order o int_ord) occs;<br>\n    in<br>\n      Seq.maps distinct_subgoals_tac (Seq.EVERY (map apply_occ<br>\nsorted_occs) st)<br>\n    end<br>\n  end;</p>\n<p>In any case, it seems to me that this violates the usual contract that a<br>\ntactic that takes a subgoal index should only affect that one subgoal.</p>\n<p>I have no idea why it calls distinct_subgoals_tac in the first place. A<br>\nsimple solution would be to just wrap the entire thing in a<br>\n\"SELECT_GOAL\". The performance impact should be minimal since this<br>\ntactic is typically used very sparingly for single rewrite steps; any<br>\nheavy rewriting is done with the simplifier anyway.</p>\n<p>Any other opinions on this?</p>\n<p>Manuel</p>\n<p>[1]:<br>\n<a href=\"https://stackoverflow.com/questions/63657976/subst-refl-closing-duplicate-subgoals-whats-going-on/63658319#63658319\">https://stackoverflow.com/questions/63657976/subst-refl-closing-duplicate-subgoals-whats-going-on/63658319#63658319</a></p>",
        "id": 208487182,
        "sender_full_name": "Email Gateway",
        "timestamp": 1598797152
    },
    {
        "content": "<p>From: Andreas Lochbihler &lt;<a href=\"mailto:mail@andreas-lochbihler.de\">mail@andreas-lochbihler.de</a>&gt;<br>\nHi Manuel,</p>\n<p>when you apply a conditional rewrite rule in several places with</p>\n<p>apply(subst (1 2 3) cond_rule)</p>\n<p>where the assumptions of the rule end up as the same subgoal, then the <br>\ndistinct_subgoals_tac ensures that the user has to discharge the assumptions only once. So <br>\nthere's a point in eliminating repeated goals. But I agree with you that this should be <br>\nconfined to the subgoal on which subst is operating.</p>\n<p>Andreas</p>",
        "id": 208487508,
        "sender_full_name": "Email Gateway",
        "timestamp": 1598797654
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nI have looked at the history: this odd behaviour goes back to 2005 (by Lucas<br>\nDixon), see <a href=\"https://isabelle-dev.sketis.net/rISABELLE366d39e95d3c\">https://isabelle-dev.sketis.net/rISABELLE366d39e95d3c</a></p>\n<p>In later years we've got sufficiently well-established means to make proof<br>\ntools behave the proper way.</p>\n<p>It actually turned out very easy to amend that on the spot, see the following<br>\nchanges for next Isabelle release:</p>\n<p><a href=\"https://isabelle-dev.sketis.net/rISABELLEe5fcbf6dc687\">https://isabelle-dev.sketis.net/rISABELLEe5fcbf6dc687</a><br>\n<a href=\"https://isabelle-dev.sketis.net/rAFPcb48e644eda2\">https://isabelle-dev.sketis.net/rAFPcb48e644eda2</a></p>\n<p>(As usual, AFP serves as a sanity check to see if a hypothetical change should<br>\nbecome real.)</p>\n<p>Makarius</p>",
        "id": 208611840,
        "sender_full_name": "Email Gateway",
        "timestamp": 1598906107
    }
]