[
    {
        "content": "<p>From: Benoit Ballenghien &lt;<a href=\"mailto:cl-isabelle-users@lists.cam.ac.uk\">cl-isabelle-users@lists.cam.ac.uk</a>&gt;<br>\nHi,<br>\nWhile working with HOLCF, Burkhart and I noticed that the simplifier often fails to automatically prove continuity goals of the form \"cont (λx. f x z)\", \"cont (λx. f x y)\", \"cont (λx. f x y z)\", etc. These continuity goals frequently act as a bottleneck: when the simplifier can't discharge them, it fails to make further progress on more complex goals that depend on them.<br>\nTo address this, I’ve developed a simproc_setup that dynamically constructs the appropriate continuity rule (proved on the fly using metis). You’ll find it attached.<br>\nWould this be something worth integrating into HOLCF in future versions of Isabelle? Or is there perhaps an existing approach I've overlooked?<br>\nBest regards,<br>\nBenoît</p>\n<p><a href=\"/user_uploads/14278/n-9AMVXk1zJkr88nI08MTHDs/HOLCF_simproc.thy\">HOLCF_simproc.thy</a></p>",
        "id": 516856678,
        "sender_full_name": "Email Gateway",
        "timestamp": 1746698468
    },
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\nBenoit,</p>\n<p>Thanks for this, it looks very useful but I need to take a closer look first. <br>\nI'll be back.</p>\n<p>Tobias</p>\n<p>On 08/05/2025 12:00, Benoit Ballenghien (via cl-isabelle-users Mailing List) wrote:</p>\n<blockquote>\n<p>Hi,<br>\nWhile working with HOLCF, Burkhart and I noticed that the simplifier often fails <br>\nto automatically prove continuity goals of the form |\"cont (λx. f x z)\"|, \"|cont <br>\n(λx. f x y)\"|, \"|cont (λx. f x y z)\"|, etc. These continuity goals <br>\nfrequently act as a bottleneck: when the simplifier can't discharge them, it <br>\nfails to make further progress on more complex goals that depend on them.<br>\nTo address this, I’ve developed a |simproc_setup| that dynamically constructs <br>\nthe appropriate continuity rule (proved on the fly using metis). You’ll find it <br>\nattached.<br>\nWould this be something worth integrating into HOLCF in future versions of <br>\nIsabelle? Or is there perhaps an existing approach I've overlooked?<br>\nBest regards,<br>\nBenoît</p>\n</blockquote>\n<p><a href=\"/user_uploads/14278/TOitM5TiSjYb8LST3Y85qnIc/smime.p7s\">smime.p7s</a></p>",
        "id": 517279759,
        "sender_full_name": "Email Gateway",
        "timestamp": 1746900274
    },
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\nHi Benoit,</p>\n<p>This looks very useful and I don't think there is anything that you overlooked. <br>\nIt should definitely be integrated into HOLCF. We'll discuss that offline.</p>\n<p>Many thanks<br>\nTobias</p>\n<p>On 08/05/2025 12:00, Benoit Ballenghien (via cl-isabelle-users Mailing List) wrote:</p>\n<blockquote>\n<p>Hi,<br>\nWhile working with HOLCF, Burkhart and I noticed that the simplifier often fails <br>\nto automatically prove continuity goals of the form |\"cont (λx. f x z)\"|, \"|cont <br>\n(λx. f x y)\"|, \"|cont (λx. f x y z)\"|, etc. These continuity goals <br>\nfrequently act as a bottleneck: when the simplifier can't discharge them, it <br>\nfails to make further progress on more complex goals that depend on them.<br>\nTo address this, I’ve developed a |simproc_setup| that dynamically constructs <br>\nthe appropriate continuity rule (proved on the fly using metis). You’ll find it <br>\nattached.<br>\nWould this be something worth integrating into HOLCF in future versions of <br>\nIsabelle? Or is there perhaps an existing approach I've overlooked?<br>\nBest regards,<br>\nBenoît</p>\n</blockquote>\n<p><a href=\"/user_uploads/14278/9UsLugh_S77Mu-NnQ6SNg5tZ/smime.p7s\">smime.p7s</a></p>",
        "id": 517450843,
        "sender_full_name": "Email Gateway",
        "timestamp": 1747034766
    }
]