[
    {
        "content": "<p>From: <a href=\"mailto:hannobecker@posteo.de\">hannobecker@posteo.de</a><br>\nHi,</p>\n<p>I observe the following unexpected behaviour of the simplifier (both in <br>\nIsabelle2023 and in Isabelle2024-RC2):</p>\n<p>The following goal solves <code>by simp</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"n\">schematic_goal</span>\n<span class=\"w\">   </span><span class=\"s\">‹(⋂(r :: 'a). let bar = ?foo r in bar) = ⋂ (range ?foo)›</span>\n<span class=\"w\">   </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">simp</span>\n</code></pre></div>\n<p>However, when specializing <code>'a</code> to <code>unit</code>, it does no longer. The simp <br>\ntrace indicates that the issue may be related to the <code>unit</code> parameter <br>\nbeing elided from the schematic variable.</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"n\">schematic_goal</span>\n<span class=\"w\">   </span><span class=\"s\">‹(⋂(r :: unit). let bar = ?foo r in bar) = ⋂ (range ?foo)›</span>\n<span class=\"w\">   </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"c\">(* No luck *)</span>\n<span class=\"w\">   </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"o\">[[</span><span class=\"n\">simp_trace</span><span class=\"o\">]]</span>\n<span class=\"w\">   </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"n\">simp</span>\n<span class=\"w\">   </span><span class=\"c\">(* [1]Proved wrong theorem (bad subgoaler?)</span>\n<span class=\"c\">        range (λr. let bar = ?g7 in bar) ≡ range (λa. ?g7)</span>\n<span class=\"c\">      Should have proved:</span>\n<span class=\"c\">        range (λr. let bar = ?foo r in bar)</span>\n<span class=\"c\">      [1]Congruence proof failed.  Should not have proved</span>\n<span class=\"c\">        range (λr. let bar = ?g7 in bar) ≡ range (λa. ?g7)</span>\n<span class=\"c\">      [1]Applying congruence rule:</span>\n<span class=\"c\">        UNIV ≡ ?N1 ⟹ (⋀x. x ∈ ?N1 =simp=&gt; ?foo x ≡ ?g1 x) ⟹ range ?foo ≡</span>\n<span class=\"c\">?g1 ` ?N1 *)</span>\n<span class=\"w\">   </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"n\">cong</span><span class=\"w\"> </span><span class=\"n\">del</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">image_cong</span><span class=\"o\">)</span>\n<span class=\"w\">   </span><span class=\"k\">done</span>\n</code></pre></div>\n<p>The above is a minimal example derived from a real-world instance <br>\narising in our large-scale application of Isabelle. As indicated, the <br>\nproblem disappears when removing the <code>image_cong</code> congruence rule, but <br>\nthat may cause us surprises elsewhere, so I would prefer an alternative <br>\nsolution if possible.</p>\n<p>As always, thanks for help,<br>\nHanno</p>",
        "id": 436756178,
        "sender_full_name": "Email Gateway",
        "timestamp": 1714675745
    },
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\nHanno,</p>\n<p>Thanks for the notification. I will look into this, but not before the release.</p>\n<p>Tobias</p>\n<p><a href=\"/user_uploads/14278/5bX_0ySRNqwayKKmjyjA6gMu/smime.p7s\">smime.p7s</a></p>",
        "id": 437211342,
        "sender_full_name": "Email Gateway",
        "timestamp": 1714981775
    },
    {
        "content": "<p>From: hannobecker &lt;<a href=\"mailto:hannobecker@posteo.de\">hannobecker@posteo.de</a>&gt;<br>\nTobias, all,The above seems to persist in Isabelle2025-RC2 -- any chance it can be fixed before the release?Best,Hanno<br>\n-------- Original message --------From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt; Date: 06/05/2024  08:49  (GMT+00:00) To: <a href=\"mailto:cl-isabelle-users@lists.cam.ac.uk\">cl-isabelle-users@lists.cam.ac.uk</a> Subject: Re: [isabelle] Surprising <code>simp</code> behaviour for image-sets Hanno,Thanks for the notification. I will look into this, but not before the release.TobiasOn 02/05/2024 20:42, <a href=\"mailto:hannobecker@posteo.de\">hannobecker@posteo.de</a> wrote:&gt; Hi,&gt; &gt; I observe the following unexpected behaviour of the simplifier (both in &gt; Isabelle2023 and in Isabelle2024-RC2):&gt; &gt; The following goal solves <code>by simp</code>:&gt; &gt; <code>&gt; schematic_goal&gt;    ‹(⋂(r :: 'a). let bar = ?foo r in bar) = ⋂ (range ?foo)›&gt;    by simp&gt; </code>&gt; &gt; However, when specializing <code>'a</code> to <code>unit</code>, it does no longer. The simp trace &gt; indicates that the issue may be related to the <code>unit</code> parameter being elided &gt; from the schematic variable.&gt; &gt; <code>&gt; schematic_goal&gt;    ‹(⋂(r :: unit). let bar = ?foo r in bar) = ⋂ (range ?foo)›&gt;    apply simp (* No luck *)&gt;    using [[simp_trace]]&gt;    apply simp&gt;    (* [1]Proved wrong theorem (bad subgoaler?)&gt;         range (λr. let bar = ?g7 in bar) ≡ range (λa. ?g7)&gt;       Should have proved:&gt;         range (λr. let bar = ?foo r in bar)&gt;       [1]Congruence proof failed.  Should not have proved&gt;         range (λr. let bar = ?g7 in bar) ≡ range (λa. ?g7)&gt;       [1]Applying congruence rule:&gt;         UNIV ≡ ?N1 ⟹ (⋀x. x ∈ ?N1 =simp=&gt; ?foo x ≡ ?g1 x) ⟹ range ?foo ≡ ?g1 ` &gt; ?N1 *)&gt;    apply (simp cong del: image_cong)&gt;    done&gt; </code>&gt; &gt; The above is a minimal example derived from a real-world instance arising in our &gt; large-scale application of Isabelle. As indicated, the problem disappears when &gt; removing the <code>image_cong</code> congruence rule, but that may cause us surprises &gt; elsewhere, so I would prefer an alternative solution if possible.&gt; &gt; As always, thanks for help,&gt; Hanno&gt; &gt; &gt;</p>",
        "id": 500615579,
        "sender_full_name": "Email Gateway",
        "timestamp": 1739961002
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nOn 19/02/2025 11:21, hannobecker wrote:</p>\n<blockquote>\n<p>The above seems to persist in Isabelle2025-RC2 -- any chance it can be fixed <br>\nbefore the release?</p>\n</blockquote>\n<blockquote>\n<blockquote>\n<p>I observe the following unexpected behaviour of the simplifier (both in<br>\nIsabelle2023 and in Isabelle2024-RC2):</p>\n</blockquote>\n</blockquote>\n<p>Since that is not a regression wrt. Isabelle2023 and Isabelle2024, it is now <br>\ntoo late for Isabelle2025.</p>\n<p>Makarius</p>",
        "id": 500618157,
        "sender_full_name": "Email Gateway",
        "timestamp": 1739961745
    },
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\nHanno,</p>\n<p>I had forgotten about this but took a look now. However, I could not really <br>\nfigure out precisely what is going on. The problem is obviously the schamtic <br>\nvariable - the \"let\" is innocent. This goal already shows the effect:</p>\n<p>sschematic_goal ‹P((λr :: unit. ?foo r) ` UNIV)›</p>\n<p>I would need to study the code in more detail to figure out where and why \"?foo <br>\n()\" becomes ?g7 ...</p>\n<p>Tobias</p>\n<p>On 19/02/2025 11:21, hannobecker wrote:</p>\n<blockquote>\n<p>Tobias, all,</p>\n<p>The above seems to persist in Isabelle2025-RC2 -- any chance it can be fixed <br>\nbefore the release?</p>\n<p>Best,<br>\nHanno</p>\n<p>-------- Original message --------<br>\nFrom: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\nDate: 06/05/2024 08:49 (GMT+00:00)<br>\nTo: <a href=\"mailto:cl-isabelle-users@lists.cam.ac.uk\">cl-isabelle-users@lists.cam.ac.uk</a><br>\nSubject: Re: [isabelle] Surprising <code>simp</code> behaviour for image-sets</p>\n<p>Hanno,</p>\n<p>Thanks for the notification. I will look into this, but not before the release.</p>\n<p>Tobias</p>\n<p>On 02/05/2024 20:42, <a href=\"mailto:hannobecker@posteo.de\">hannobecker@posteo.de</a> wrote:</p>\n<blockquote>\n<p>Hi,</p>\n<p>I observe the following unexpected behaviour of the simplifier (both in<br>\nIsabelle2023 and in Isabelle2024-RC2):</p>\n<p>The following goal solves <code>by simp</code>:</p>\n<p><code>\nschematic_goal\n    ‹(⋂(r :: 'a). let bar = ?foo r in bar) = ⋂ (range ?foo)›\n    by simp\n</code></p>\n<p>However, when specializing <code>'a</code> to <code>unit</code>, it does no longer. The simp trace<br>\nindicates that the issue may be related to the <code>unit</code> parameter being elided<br>\nfrom the schematic variable.</p>\n<p><code>\nschematic_goal\n    ‹(⋂(r :: unit). let bar = ?foo r in bar) = ⋂ (range ?foo)›\n    apply simp (* No luck *)\n    using [[simp_trace]]\n    apply simp\n    (* [1]Proved wrong theorem (bad subgoaler?)\n         range (λr. let bar = ?g7 in bar) ≡ range (λa. ?g7)\n       Should have proved:\n         range (λr. let bar = ?foo r in bar)\n       [1]Congruence proof failed.  Should not have proved\n         range (λr. let bar = ?g7 in bar) ≡ range (λa. ?g7)\n       [1]Applying congruence rule:\n         UNIV ≡ ?N1 ⟹ (⋀x. x ∈ ?N1 =simp=&gt; ?foo x ≡ ?g1 x) ⟹ range ?foo ≡ ?g1 `\n?N1 *)\n    apply (simp cong del: image_cong)\n    done\n</code></p>\n<p>The above is a minimal example derived from a real-world instance arising in our<br>\nlarge-scale application of Isabelle. As indicated, the problem disappears when<br>\nremoving the <code>image_cong</code> congruence rule, but that may cause us surprises<br>\nelsewhere, so I would prefer an alternative solution if possible.</p>\n<p>As always, thanks for help,<br>\nHanno</p>\n</blockquote>\n</blockquote>\n<p><a href=\"/user_uploads/14278/-b6T6bNy6YeU4q1ufOr39DHF/smime.p7s\">smime.p7s</a></p>",
        "id": 500671819,
        "sender_full_name": "Email Gateway",
        "timestamp": 1739977378
    },
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;</p>\n<p>On 19/02/2025 16:27, Norbert Schirmer wrote:</p>\n<blockquote>\n<p>Hi,</p>\n<p>The simproc unit_eq seems to be responsible:</p>\n</blockquote>\n<p>Yes, unit and (thus that simproc) triggers it, as Hanno already pointed out, but <br>\nI don't understand why it is responsible for that replacement of \"?foo ()\" by <br>\nthis new ?g7 that breaks things. But maybe I am barking up the wrong tree.</p>\n<p>Tobias</p>\n<blockquote>\n<p>schematic_goal<br>\n  ‹(⋂(r :: unit). let bar = ?foo r in bar) = ⋂ (range ?foo)›<br>\n  supply [[simproc del: unit_eq]]<br>\n   apply simp<br>\n   done</p>\n<p>Regards,<br>\nNorbert</p>\n<p>--</p>\n<p>Norbert Schirmer (<a href=\"mailto:nschirmer@apple.com\">nschirmer@apple.com</a>)<br>\n SEG Formal Verification</p>\n<blockquote>\n<p>On 19. Feb 2025, at 16:02, Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt; wrote:</p>\n<p>Hanno,</p>\n<p>I had forgotten about this but took a look now. However, I could not really <br>\nfigure out precisely what is going on. The problem is obviously the schamtic <br>\nvariable - the \"let\" is innocent. This goal already shows the effect:</p>\n<p>sschematic_goal ‹P((λr :: unit. ?foo r) ` UNIV)›</p>\n<p>I would need to study the code in more detail to figure out where and why \"? <br>\nfoo ()\" becomes ?g7 ...</p>\n<p>Tobias</p>\n<p>On 19/02/2025 11:21, hannobecker wrote:</p>\n<blockquote>\n<p>Tobias, all,<br>\nThe above seems to persist in Isabelle2025-RC2 -- any chance it can be fixed <br>\nbefore the release?<br>\nBest,<br>\nHanno<br>\n-------- Original message --------<br>\nFrom: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\nDate: 06/05/2024 08:49 (GMT+00:00)<br>\nTo: <a href=\"mailto:cl-isabelle-users@lists.cam.ac.uk\">cl-isabelle-users@lists.cam.ac.uk</a><br>\nSubject: Re: [isabelle] Surprising <code>simp</code> behaviour for image-sets<br>\nHanno,<br>\nThanks for the notification. I will look into this, but not before the release.<br>\nTobias<br>\nOn 02/05/2024 20:42, <a href=\"mailto:hannobecker@posteo.de\">hannobecker@posteo.de</a> wrote:</p>\n<blockquote>\n<p>Hi,</p>\n<p>I observe the following unexpected behaviour of the simplifier (both in<br>\nIsabelle2023 and in Isabelle2024-RC2):</p>\n<p>The following goal solves <code>by simp</code>:</p>\n<p><code>\nschematic_goal\n    ‹(⋂(r :: 'a). let bar = ?foo r in bar) = ⋂ (range ?foo)›\n    by simp\n</code></p>\n<p>However, when specializing <code>'a</code> to <code>unit</code>, it does no longer. The simp trace<br>\nindicates that the issue may be related to the <code>unit</code> parameter being elided<br>\nfrom the schematic variable.</p>\n<p><code>\nschematic_goal\n    ‹(⋂(r :: unit). let bar = ?foo r in bar) = ⋂ (range ?foo)›\n    apply simp (* No luck *)\n    using [[simp_trace]]\n    apply simp\n    (* [1]Proved wrong theorem (bad subgoaler?)\n         range (λr. let bar = ?g7 in bar) ≡ range (λa. ?g7)\n       Should have proved:\n         range (λr. let bar = ?foo r in bar)\n       [1]Congruence proof failed.  Should not have proved\n         range (λr. let bar = ?g7 in bar) ≡ range (λa. ?g7)\n       [1]Applying congruence rule:\n         UNIV ≡ ?N1 ⟹ (⋀x. x ∈ ?N1 =simp=&gt; ?foo x ≡ ?g1 x) ⟹ range ?foo ≡ ?g1 `\n?N1 *)\n    apply (simp cong del: image_cong)\n    done\n</code></p>\n<p>The above is a minimal example derived from a real-world instance arising <br>\nin our<br>\nlarge-scale application of Isabelle. As indicated, the problem disappears when<br>\nremoving the <code>image_cong</code> congruence rule, but that may cause us surprises<br>\nelsewhere, so I would prefer an alternative solution if possible.</p>\n<p>As always, thanks for help,<br>\nHanno</p>\n</blockquote>\n</blockquote>\n</blockquote>\n</blockquote>\n<p><a href=\"/user_uploads/14278/FYrj-6xDsBqvSZic1NSVtClQ/smime.p7s\">smime.p7s</a></p>",
        "id": 500691759,
        "sender_full_name": "Email Gateway",
        "timestamp": 1739982450
    },
    {
        "content": "<p>From: Norbert Schirmer &lt;<a href=\"mailto:cl-isabelle-users@lists.cam.ac.uk\">cl-isabelle-users@lists.cam.ac.uk</a>&gt;<br>\nHi,</p>\n<p>The simproc unit_eq seems to be responsible:</p>\n<p>schematic_goal<br>\n ‹(⋂(r :: unit). let bar = ?foo r in bar) = ⋂ (range ?foo)›<br>\n supply [[simproc del: unit_eq]]<br>\n  apply simp<br>\n  done</p>\n<p>Regards,<br>\nNorbert</p>\n<p>--</p>\n<p>Norbert Schirmer (<a href=\"mailto:nschirmer@apple.com\">nschirmer@apple.com</a>)<br>\n SEG Formal Verification</p>\n<blockquote>\n<p>On 19. Feb 2025, at 16:02, Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt; wrote:</p>\n<p>Hanno,</p>\n<p>I had forgotten about this but took a look now. However, I could not really figure out precisely what is going on. The problem is obviously the schamtic variable - the \"let\" is innocent. This goal already shows the effect:</p>\n<p>sschematic_goal ‹P((λr :: unit. ?foo r) ` UNIV)›</p>\n<p>I would need to study the code in more detail to figure out where and why \"?foo ()\" becomes ?g7 ...</p>\n<p>Tobias</p>\n<p>On 19/02/2025 11:21, hannobecker wrote:</p>\n<blockquote>\n<p>Tobias, all,<br>\nThe above seems to persist in Isabelle2025-RC2 -- any chance it can be fixed before the release?<br>\nBest,<br>\nHanno<br>\n-------- Original message --------<br>\nFrom: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\nDate: 06/05/2024 08:49 (GMT+00:00)<br>\nTo: <a href=\"mailto:cl-isabelle-users@lists.cam.ac.uk\">cl-isabelle-users@lists.cam.ac.uk</a><br>\nSubject: Re: [isabelle] Surprising <code>simp</code> behaviour for image-sets<br>\nHanno,<br>\nThanks for the notification. I will look into this, but not before the release.<br>\nTobias<br>\nOn 02/05/2024 20:42, <a href=\"mailto:hannobecker@posteo.de\">hannobecker@posteo.de</a> wrote:</p>\n<blockquote>\n<p>Hi,</p>\n<p>I observe the following unexpected behaviour of the simplifier (both in<br>\nIsabelle2023 and in Isabelle2024-RC2):</p>\n<p>The following goal solves <code>by simp</code>:</p>\n<p><code>\nschematic_goal\n   ‹(⋂(r :: 'a). let bar = ?foo r in bar) = ⋂ (range ?foo)›\n   by simp\n</code></p>\n<p>However, when specializing <code>'a</code> to <code>unit</code>, it does no longer. The simp trace<br>\nindicates that the issue may be related to the <code>unit</code> parameter being elided<br>\nfrom the schematic variable.</p>\n<p><code>\nschematic_goal\n   ‹(⋂(r :: unit). let bar = ?foo r in bar) = ⋂ (range ?foo)›\n   apply simp (* No luck *)\n   using [[simp_trace]]\n   apply simp\n   (* [1]Proved wrong theorem (bad subgoaler?)\n        range (λr. let bar = ?g7 in bar) ≡ range (λa. ?g7)\n      Should have proved:\n        range (λr. let bar = ?foo r in bar)\n      [1]Congruence proof failed.  Should not have proved\n        range (λr. let bar = ?g7 in bar) ≡ range (λa. ?g7)\n      [1]Applying congruence rule:\n        UNIV ≡ ?N1 ⟹ (⋀x. x ∈ ?N1 =simp=&gt; ?foo x ≡ ?g1 x) ⟹ range ?foo ≡ ?g1 `\n?N1 *)\n   apply (simp cong del: image_cong)\n   done\n</code></p>\n<p>The above is a minimal example derived from a real-world instance arising in our<br>\nlarge-scale application of Isabelle. As indicated, the problem disappears when<br>\nremoving the <code>image_cong</code> congruence rule, but that may cause us surprises<br>\nelsewhere, so I would prefer an alternative solution if possible.</p>\n<p>As always, thanks for help,<br>\nHanno</p>\n</blockquote>\n</blockquote>\n</blockquote>",
        "id": 500691932,
        "sender_full_name": "Email Gateway",
        "timestamp": 1739982494
    },
    {
        "content": "<p>From: Norbert Schirmer &lt;<a href=\"mailto:cl-isabelle-users@lists.cam.ac.uk\">cl-isabelle-users@lists.cam.ac.uk</a>&gt;</p>\n<blockquote>\n<p>On 19. Feb 2025, at 17:27, Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt; wrote:</p>\n<p>Yes, unit and (thus that simproc) triggers it, as Hanno already pointed out, but I don't understand why it is responsible for that replacement of \"?foo ()\" by this new ?g7 that breaks things. But maybe I am barking up the wrong tree.<br>\n</p>\n</blockquote>\n<p>I took a closer look and the reason is the combination of solving the preconditions of a congruence rule and the simproc unit_eq:</p>\n<p>schematic_goal ‹P((λr :: unit. ?foo r) ` UNIV)›<br>\n  supply [[simp_trace, simp_trace_depth_limit=10]]<br>\n  apply simp</p>\n<p>[1]Applying congruence rule:<br>\nUNIV ≡ ?N1 ⟹<br>\n(⋀x. x ∈ ?N1 =simp=&gt; ?foo x ≡ ?g1 x) ⟹ range ?foo ≡ ?g1 ` ?N1 </p>\n<p>When the simplifier is invoked on the precondition of the congruence rule:</p>\n<p>(1)  (⋀x. x ∈ ?N1 =simp=&gt; ?foo x ≡ ?g1 x)</p>\n<p>the simproc unit_eq rewrites x to ()</p>\n<p>so it ultimately comes up with this equation for the precondition:</p>\n<p>(⋀x. True =simp=&gt; ?foo () ≡ ?g1 ()) ≡ (True =simp=&gt; ?foo () ≡ ?g1 ()) </p>\n<p>Now the RHS of that meta equality is unified with (1) which seems to <br>\nintroduce instantiations ?foo: (λr. ?g7) and ?g1:  (λa. ?g7)  </p>\n<p>Regards,<br>\nNorbert</p>\n<p>--</p>\n<p>Norbert Schirmer (<a href=\"mailto:nschirmer@apple.com\">nschirmer@apple.com</a>)<br>\n SEG Formal Verification</p>\n<blockquote>\n<p>Tobias</p>\n<blockquote>\n<p>schematic_goal<br>\n ‹(⋂(r :: unit). let bar = ?foo r in bar) = ⋂ (range ?foo)›<br>\n supply [[simproc del: unit_eq]]<br>\n  apply simp<br>\n  done<br>\nRegards,<br>\nNorbert<br>\n--<br>\nNorbert Schirmer (<a href=\"mailto:nschirmer@apple.com\">nschirmer@apple.com</a>)<br>\n SEG Formal Verification</p>\n<blockquote>\n<p>On 19. Feb 2025, at 16:02, Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt; wrote:</p>\n<p>Hanno,</p>\n<p>I had forgotten about this but took a look now. However, I could not really figure out precisely what is going on. The problem is obviously the schamtic variable - the \"let\" is innocent. This goal already shows the effect:</p>\n<p>sschematic_goal ‹P((λr :: unit. ?foo r) ` UNIV)›</p>\n<p>I would need to study the code in more detail to figure out where and why \"? foo ()\" becomes ?g7 ...</p>\n<p>Tobias</p>\n<p>On 19/02/2025 11:21, hannobecker wrote:</p>\n<blockquote>\n<p>Tobias, all,<br>\nThe above seems to persist in Isabelle2025-RC2 -- any chance it can be fixed before the release?<br>\nBest,<br>\nHanno<br>\n-------- Original message --------<br>\nFrom: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\nDate: 06/05/2024 08:49 (GMT+00:00)<br>\nTo: <a href=\"mailto:cl-isabelle-users@lists.cam.ac.uk\">cl-isabelle-users@lists.cam.ac.uk</a><br>\nSubject: Re: [isabelle] Surprising <code>simp</code> behaviour for image-sets<br>\nHanno,<br>\nThanks for the notification. I will look into this, but not before the release.<br>\nTobias<br>\nOn 02/05/2024 20:42, <a href=\"mailto:hannobecker@posteo.de\">hannobecker@posteo.de</a> wrote:</p>\n<blockquote>\n<p>Hi,</p>\n<p>I observe the following unexpected behaviour of the simplifier (both in<br>\nIsabelle2023 and in Isabelle2024-RC2):</p>\n<p>The following goal solves <code>by simp</code>:</p>\n<p><code>\nschematic_goal\n   ‹(⋂(r :: 'a). let bar = ?foo r in bar) = ⋂ (range ?foo)›\n   by simp\n</code></p>\n<p>However, when specializing <code>'a</code> to <code>unit</code>, it does no longer. The simp trace<br>\nindicates that the issue may be related to the <code>unit</code> parameter being elided<br>\nfrom the schematic variable.</p>\n<p><code>\nschematic_goal\n   ‹(⋂(r :: unit). let bar = ?foo r in bar) = ⋂ (range ?foo)›\n   apply simp (* No luck *)\n   using [[simp_trace]]\n   apply simp\n   (* [1]Proved wrong theorem (bad subgoaler?)\n        range (λr. let bar = ?g7 in bar) ≡ range (λa. ?g7)\n      Should have proved:\n        range (λr. let bar = ?foo r in bar)\n      [1]Congruence proof failed.  Should not have proved\n        range (λr. let bar = ?g7 in bar) ≡ range (λa. ?g7)\n      [1]Applying congruence rule:\n        UNIV ≡ ?N1 ⟹ (⋀x. x ∈ ?N1 =simp=&gt; ?foo x ≡ ?g1 x) ⟹ range ?foo ≡ ?g1 `\n?N1 *)\n   apply (simp cong del: image_cong)\n   done\n</code></p>\n<p>The above is a minimal example derived from a real-world instance arising in our<br>\nlarge-scale application of Isabelle. As indicated, the problem disappears when<br>\nremoving the <code>image_cong</code> congruence rule, but that may cause us surprises<br>\nelsewhere, so I would prefer an alternative solution if possible.</p>\n<p>As always, thanks for help,<br>\nHanno</p>\n</blockquote>\n</blockquote>\n</blockquote>\n</blockquote>\n</blockquote>",
        "id": 500864968,
        "sender_full_name": "Email Gateway",
        "timestamp": 1740054158
    }
]