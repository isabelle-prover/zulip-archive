[
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\nThere is an awful lot of special purpose syntax (eg \"f(x |-&gt; y)\" instead of \"f(x <br>\n:= Some y)\") declared in the theory Map which is part of Main. I would like to <br>\nget rid of most if not all of it (by default, but with ways of including it). If <br>\nyou think it is a good or a bad idea, voice your opinion here. If you would like <br>\nto be included in a separate discussion of what to remove and how, let me know <br>\n(possibly by a private email).</p>\n<p>Tobias</p>\n<p><a href=\"/user_uploads/14278/DCu-xygpyDH0jkjQA_7SIvGR/smime.p7s\">smime.p7s</a></p>",
        "id": 327046325,
        "sender_full_name": "Email Gateway",
        "timestamp": 1676034563
    },
    {
        "content": "<p>From: Florian Haftmann &lt;<a href=\"mailto:florian.haftmann@informatik.tu-muenchen.de\">florian.haftmann@informatik.tu-muenchen.de</a>&gt;<br>\nHi Tobias,</p>\n<p>just a thought from a decade ago:</p>\n<p>The only operation which is used pervasively seems to be map_of<br>\n(I have found no notes but I remember quite confidently that this was <br>\nthe result of a closer analysis); map_of could be separated (e. g. going <br>\nto List.thy) and Map.thy moved to HOL-Library.</p>\n<p>There are alternatives to map_of for constructing functions from <br>\nexplicit key-value-tables, but that is a different story.</p>\n<p>Cheers,<br>\n    Florian</p>\n<p><a href=\"/user_uploads/14278/v5-pkH8-GLSAvSnwdcLQ9qB_/OpenPGP_0xA707172232CFA4E9.asc\">OpenPGP_0xA707172232CFA4E9.asc</a><br>\n<a href=\"/user_uploads/14278/rGFhNC7g0yASjziEluN_6A7b/OpenPGP_signature\">OpenPGP_signature</a></p>",
        "id": 327211004,
        "sender_full_name": "Email Gateway",
        "timestamp": 1676107163
    },
    {
        "content": "<p>From: \"C. Diekmann\" &lt;<a href=\"mailto:diekmann@net.in.tum.de\">diekmann@net.in.tum.de</a>&gt;<br>\nHi Tobias,</p>\n<p>To be honest, I like the map syntax with |-&gt; very much. This includes the<br>\nfollowing:</p>\n<p>Map update: m(x |-&gt; y)<br>\nMap update multiple: m(x1 |-&gt; y1, x2 |-&gt; y2, ...)<br>\nMap initialization: [ x1 |-&gt; y1, x2 |-&gt; y2, ...  ]</p>\n<p>Having this syntax helps me during modeling when dealing with data.<br>\nAnd it looks super nice to write down some initial examples this way.<br>\nHaving maps as a first class citizen in the standard lib with nice syntax<br>\nalso helps me to pick them whenever I need a finite data store. It's always<br>\nhard to overcome my initial resistance when I know I want some storage-like<br>\nobject like a list or a dictionary to pick the least intuitive data<br>\nstructure: a partial function. But this usually turns out to be the right<br>\nchoice. And having some nice syntax along the way really helps me to feel<br>\nthat I'm modelling stuff correctly here.</p>\n<p>So I really like all the |-&gt; syntax, even though <code>:= Some</code> would do the<br>\nsame. <em>Technically</em>, the |-&gt; syntax provides little value, but for me<br>\npersonally, this syntax has enormous *mental *value, since it helps me to<br>\ndo the *mental *lifting to pick a partial function when I'm actually<br>\nlooking for a dictionary-like data structure.</p>\n<p>Anecdotally, at least for me, very often, it turns out later that I<br>\nactually don't need a partial function at all and modelling things with a<br>\nnormal function makes the whole theory simpler. That's why I probably use<br>\nthe |-&gt; syntax less during later stages of development or even get rid<br>\nof it. And I probably never used any of the other map syntax, like map<br>\ncomposition or map subset. Those can go away. But, at least for me, the |-&gt;<br>\nsyntax should remain to help with the mental transition from data to<br>\nfunction.</p>\n<p>I hope this helps. I just had some years where I barely used Isabelle, but<br>\nI started again recently. Since I was somehow out of practice, I tried to<br>\nlook very closely at what kinds of mistakes I make or where I get stuck.<br>\nAnd dealing with data in Isabelle models was one of those and<br>\nre-discovering the concepts of maps really unblocked me there.</p>\n<p>Cheers,<br>\n  Cornelius</p>",
        "id": 327225655,
        "sender_full_name": "Email Gateway",
        "timestamp": 1676113092
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nJust a technical side-remark: In the past decades we often found changes of <br>\nmixfix syntax infeasible, such that historic notation often got stuck for no <br>\nparticular reason. Most ASCII replacement syntax falls into this category, <br>\ne.g. \"x : A\" instead of \"x \\&lt;in&gt; A\" (and all its derivative forms).</p>\n<p>Now the we have an improved \"isabelle update\" tool that scales to all of <br>\nIsabelle + AFP and has access to PIDE markup to guide the replacement. E.g. <br>\nsee this spot in the Isabelle repository <br>\n<a href=\"https://isabelle-dev.sketis.net/source/isabelle/browse/default/src/Pure/Tools/update.scala;9107e103754c$14\">https://isabelle-dev.sketis.net/source/isabelle/browse/default/src/Pure/Tools/update.scala;9107e103754c$14</a></p>\n<p>It is a bit of an art to find correct and complete XML markup tree structure <br>\nfor particular update tasks, but it usually works.</p>\n<p>There is no general scheme for mixfix syntax yet. E.g. there could be an <br>\nupdate specification as part of the normal syntax for mixfix annotations, <br>\nwhich the \"isabelle update\" tool will use accordingly. One day this will be <br>\navailable, but not now.</p>\n<p>Concerning the spring cleaning of theory HOL.Map, this is merely an <br>\nencouragement to be more bold and ambitious than usual in fresh ideas. <br>\nAfterwards, we can see if and how to update all existing sources, while <br>\navoiding the infamous \"SOMEthing went utterly wrong\" problem --- wild <br>\nreplacements in plain text without a formal context.</p>\n<p>Makarius</p>",
        "id": 327280055,
        "sender_full_name": "Email Gateway",
        "timestamp": 1676133878
    },
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\nCornelius,</p>\n<p>Thanks for your feedback. I had not planned to get rid of the |-&gt; syntax <br>\ncompletely but at most to make it optional. Now it looks like you would only <br>\nhave to import Map explicitly.</p>\n<p>Tobias</p>\n<p><a href=\"/user_uploads/14278/-F9nFEZEpX31GsGIUTBFE71u/smime.p7s\">smime.p7s</a></p>",
        "id": 327511976,
        "sender_full_name": "Email Gateway",
        "timestamp": 1676283831
    },
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\nFlorian,</p>\n<p>That seems like a plan: move map_of to List and Map.thy to Library.</p>\n<p>Thanks<br>\nTobias</p>\n<p><a href=\"/user_uploads/14278/465zMa7iqU2uj7oKYhbl53GY/smime.p7s\">smime.p7s</a></p>",
        "id": 327512267,
        "sender_full_name": "Email Gateway",
        "timestamp": 1676283916
    },
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\nIt turns out that practically all Map operators and syntax are used widely <br>\nenough that it is better to leave things as they are. With the exception of some <br>\nclumsy ASCII syntax. One could get rid of</p>\n<p>|`    for the symbol \\&lt;restriction&gt;<br>\n|-&gt;   for the symbol \\&lt;mapsto&gt;</p>\n<p>However, I am not an expert for udate tools and leave this to somebody who is ;-)</p>\n<p>Tobias</p>\n<p><a href=\"/user_uploads/14278/ov9xwGt8GLLpMzlkgLr34tF-/smime.p7s\">smime.p7s</a></p>",
        "id": 329207575,
        "sender_full_name": "Email Gateway",
        "timestamp": 1676990429
    }
]