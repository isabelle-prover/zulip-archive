[
    {
        "content": "<p>From: Stepan Holub &lt;<a href=\"mailto:holub@karlin.mff.cuni.cz\">holub@karlin.mff.cuni.cz</a>&gt;<br>\nDear all,</p>\n<p>can anybody explain why the error</p>\n<p>\"Term to be evaluated contains free dictionaries\"</p>\n<p>appears in the following minimal example:</p>\n<p>================<br>\ntheory Scratch</p>\n<p>imports Main</p>\n<p>begin</p>\n<p>context ord<br>\nbegin<br>\nfun foo :: \"'a list ⇒ bool\"<br>\n   where \"foo xs = True\"<br>\nend</p>\n<p>value \"foo Nil\"</p>\n<p>\"Term to be evaluated contains free dictionaries\"</p>\n<p>end<br>\n=============</p>\n<p>Thanks.</p>\n<p>Stepan</p>",
        "id": 236478012,
        "sender_full_name": "Email Gateway",
        "timestamp": 1619602878
    },
    {
        "content": "<p>From: Jakub Kądziołka &lt;<a href=\"mailto:kuba@kadziolka.net\">kuba@kadziolka.net</a>&gt;<br>\nA dictionary is the implicit structure used to pass around constants and<br>\nfunctions defined by a type class. For `ord', the dictionary would<br>\ncontain (&lt;) and (&lt;=).</p>\n<p>A dictionary is free if the corresponding type variable is free. So, the<br>\nerror essentially says \"The value of this term depends on what ordered<br>\ntype you instantiate it to, and you haven't specified that\". In your<br>\nsimple example, the result would be the same either way, but Isabelle<br>\ndoesn't have a way of handling this special case.</p>\n<p>Regards,<br>\nJakub Kądziołka</p>",
        "id": 236478890,
        "sender_full_name": "Email Gateway",
        "timestamp": 1619603313
    },
    {
        "content": "<p>From: Stepan Holub &lt;<a href=\"mailto:holub@karlin.mff.cuni.cz\">holub@karlin.mff.cuni.cz</a>&gt;<br>\nThank you. This makes sense, except:</p>\n<p>the term is evaluated successfully for</p>\n<p>value \"foo xs\"</p>\n<p>where the type of xs is inferred as 'a list.<br>\nThe same inference is made for Nil.</p>\n<p>The difference in the result is therefore still not clear to me.</p>\n<p>Stepan</p>",
        "id": 236481125,
        "sender_full_name": "Email Gateway",
        "timestamp": 1619604381
    },
    {
        "content": "<p>From: Manuel Eberl &lt;<a href=\"mailto:eberlm@in.tum.de\">eberlm@in.tum.de</a>&gt;<br>\nThe dictionary error that you saw comes from the code generator, which<br>\nis the evaluation backend that the value command normally uses.</p>\n<p>When you write \"foo xs\", there is a free variable in the term, so code<br>\ngeneration cannot work at all. Therefore, the \"value\" command falls back<br>\nto one of its other evaluators (probably \"nbe\", normalisation by<br>\nevaluation). There is also a simplifier-backed backend.</p>\n<p>You can tell the value command precisely which evaluator to use:</p>\n<p>value [code] \"foo Nil\" (* free dictionary error *)<br>\n  value [nbe] \"foo Nil\" (* True *)<br>\n  value [simp] \"foo Nil\" (* True *)</p>\n<p>By the way, when you do something like</p>\n<p>value \"Nil\"</p>\n<p>you see the error</p>\n<p>Wellsortedness error:<br>\n  Type 'a not of sort term_of<br>\n  Cannot derive subsort relation {} &lt; term_of</p>\n<p>This is also an error caused by polymorphism in the term to be<br>\nevaluated, but this time, the problem is not that there are dictionaries<br>\nfrom type classes flying around, but simply that Isabelle does not know<br>\nhow to convert the result (which is an ML term) back into a HOL term<br>\n(this only works for concrete types that are instances of the \"term_of\"<br>\nclass).</p>\n<p>Manuel<br>\n<a href=\"/user_uploads/14278/SdSsFi_SaPVGQsq_uRE0VVOw/smime.p7s\">smime.p7s</a></p>",
        "id": 236487981,
        "sender_full_name": "Email Gateway",
        "timestamp": 1619608124
    }
]