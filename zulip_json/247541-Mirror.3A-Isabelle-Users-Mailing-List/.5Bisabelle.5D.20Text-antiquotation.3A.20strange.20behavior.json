[
    {
        "content": "<p>From: Nicolas Meric &lt;<a href=\"mailto:cl-isabelle-users@lists.cam.ac.uk\">cl-isabelle-users@lists.cam.ac.uk</a>&gt;<br>\nDear Isabelle's users,</p>\n<p>I have a strange behavior when processing a text-antiquotation.</p>\n<p>Here is a small example that defines a text-antiquotation:</p>\n<p>theory Test_Text_Antiquotation<br>\n   imports Main<br>\nbegin</p>\n<p>ML‹</p>\n<p>fun check ctxt s pos name  =<br>\n   let<br>\n     val s' = Syntax.read_typ ctxt s<br>\n               |&gt; Syntax.string_of_typ ctxt<br>\n               |&gt; YXML.content_of<br>\n     val typ = Syntax.read_typ ctxt s      ― ‹&lt;--- Works!›<br>\n     (<em>val typ = Syntax.read_typ ctxt s'</em>) ― ‹&lt;--- Fails!›<br>\n     val _ = if type_of name &lt;&gt; typ<br>\n             then error(\"Wrong type: \" ^ (Syntax.string_of_term ctxt <br>\nname) ^ (<a href=\"http://Position.here\">Position.here</a> pos))<br>\n             else ()<br>\n   in () end</p>\n<p>val docitem_antiquotation_parser = Scan.lift Parse.embedded_input : <br>\nInput.source context_parser;</p>\n<p>fun pretty_docitem_antiquotation_generic s ctxt src =<br>\n     let val (term,pos) = Input.source_content src<br>\n                         |&gt; apfst (Syntax.read_term ctxt)<br>\n         val _ = check ctxt s pos term<br>\n     in  (Latex.text (Syntax.string_of_term ctxt term, pos))<br>\n     end</p>\n<p>fun docitem_antiquotation bind typ =<br>\n  Document_Output.antiquotation_raw bind docitem_antiquotation_parser<br>\n(pretty_docitem_antiquotation_generic typ)</p>\n<p>val _ = Theory.setup (docitem_antiquotation \\&lt;^binding&gt;‹int› \"int\")<br>\n›</p>\n<p>text‹@{int ‹2::int›}›</p>\n<p>end</p>\n<p>In the check function, if I use the string \" s \" to read the type for <br>\nthe val \" typ \",<br>\nthen the parsing of the text-antiquotation in the text command works.</p>\n<p>But if I use the string \" s' \", then the parsing fails with the error:</p>\n<p>Inner syntax error: unexpected end of input<br>\nFailed to parse type</p>\n<p>If I use the code that generates the \" s' \" string<br>\n\"outside\" of a text-antiquotation context, everything works fine.</p>\n<p>For example, when in an standard ML context, this code works:</p>\n<p>ML‹<br>\nval ctxt = \\&lt;^context&gt;<br>\nval s = \"int\"<br>\nval s' = Syntax.read_typ ctxt s<br>\n           |&gt; Syntax.string_of_typ ctxt<br>\n           |&gt; YXML.content_of<br>\nval typ = Syntax.read_typ ctxt s'<br>\n›</p>\n<p>So, is this an expected behavior, or do I do something wrong?</p>\n<p>Best regards.</p>\n<p>Nicolas Méric</p>",
        "id": 372835287,
        "sender_full_name": "Email Gateway",
        "timestamp": 1688637506
    }
]