[
    {
        "content": "<p>From: Li Yongjian &lt;<a href=\"mailto:lyj238@gmail.com\">lyj238@gmail.com</a>&gt;<br>\nDear authors:<br>\n  Here I want to ask questions on the internal implementation of Isabelle<br>\n(ML)<br>\n  terms.</p>\n<p>let t= a+b in<br>\n    t*t;</p>\n<p>(a+b)*(a+b)</p>\n<p>the first term contains only one copy of (a+b), but the second term<br>\ncontains two copies of (a+b).</p>\n<p>In my understanding, the first term is stored as figure (a), the second<br>\nis stored as figure (b).</p>\n<p>Is my understanding correct?</p>\n<p>[image: image.png]</p>\n<p>regards!<br>\nlyj<br>\n<a href=\"/user_uploads/14278/sVJ_TOJk3Jq0_X8rV5QBUdUb/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/14278/sVJ_TOJk3Jq0_X8rV5QBUdUb/image.png\" title=\"image.png\"><img src=\"/user_uploads/14278/sVJ_TOJk3Jq0_X8rV5QBUdUb/image.png\"></a></div>",
        "id": 277530676,
        "sender_full_name": "Email Gateway",
        "timestamp": 1648907373
    },
    {
        "content": "<p>From: Peter Lammich &lt;<a href=\"mailto:lammich@in.tum.de\">lammich@in.tum.de</a>&gt;<br>\nHi Li,</p>\n<p>this depends on the internals of the underlying SML implementation.</p>\n<p>PolyML will share some terms, but that's not guaranteed. From the view <br>\nof ML, this kind of sharing is not visible.<br>\n<a href=\"/user_uploads/14278/TMR3uMqoKy5TXatSY2vv0jIb/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/14278/TMR3uMqoKy5TXatSY2vv0jIb/image.png\" title=\"image.png\"><img src=\"/user_uploads/14278/TMR3uMqoKy5TXatSY2vv0jIb/image.png\"></a></div>",
        "id": 277530829,
        "sender_full_name": "Email Gateway",
        "timestamp": 1648907534
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nThis depends on many side-conditions, e.g. expanding the let via (simp add: <br>\nLet_def) will rather quickly cause duplications.</p>\n<p>And on the contrary: a term with duplicate subterms can be stored in memory <br>\nwithout duplicates (the ML program will not see this).</p>\n<p>Or maybe you just want to see the symbolic datatype of terms (or types)? You <br>\ncan do it like this:</p>\n<p>ML ‹<br>\nval t1 = @{term \"let t= a+b in t*t\"};<br>\nval t2 = @{term \"(a+b)*(a+b)\"};<br>\n›</p>\n<p>See also the \"implementation\" manual, chapter 2.</p>\n<p>Makarius</p>",
        "id": 277530983,
        "sender_full_name": "Email Gateway",
        "timestamp": 1648907689
    }
]