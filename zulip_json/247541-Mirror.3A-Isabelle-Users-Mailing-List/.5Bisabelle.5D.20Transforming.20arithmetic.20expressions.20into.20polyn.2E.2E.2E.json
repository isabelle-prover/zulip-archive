[
    {
        "content": "<p>From: Eero Pomell &lt;<a href=\"mailto:eero.the.engineer@gmail.com\">eero.the.engineer@gmail.com</a>&gt;<br>\nHi, I'm trying to implement code that transforms an arithmetic expression<br>\ninto a polynomial which is represented as a list of its coefficients. For<br>\nexample 1 + 2x + 3x^2 would be [1,2,3], a single variable 'x' would be<br>\n[0,1] and a constant 'n' would be [n].</p>\n<p><em>The algorithm works as follows:</em></p>\n<ul>\n<li>\n<p>'coeffs' takes as input an expression and outputs the list, it works<br>\nrecursively on complex expressions like 1 + 2x + 3x^2</p>\n</li>\n<li>\n<p>'addcoef' does list addition by adding the corresponding coefficients in<br>\nthe two lists, for example the polynomials 1 + 2x and 3 + 4x are [1,2] and<br>\n[3,4], and their addition [1,2] + [3,4] = [4,6], since (1 + 2x) + (3 + 4x)<br>\n= 4 + 6x</p>\n</li>\n<li>\n<p>'multcoef' does list multiplication. For each coefficient in the first<br>\nlist, it multiplies by every term in the second list; these lists are then<br>\nadded together. For example [1,2] * [3,4] = [1<em>3,1</em>4] + 0 # [2<em>3,2</em>4]; It<br>\nworks recursively and the '0' is appended to take into account the power of<br>\nthe coefficients.</p>\n</li>\n</ul>\n<p><em>The code that implements the algorithm</em></p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">datatype</span><span class=\"w\"> </span><span class=\"n\">exp</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Var</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Const</span><span class=\"w\"> </span><span class=\"n\">int</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Add</span><span class=\"w\"> </span><span class=\"n\">exp</span><span class=\"w\"> </span><span class=\"n\">exp</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Mult</span><span class=\"w\"> </span><span class=\"n\">exp</span><span class=\"w\"> </span><span class=\"n\">exp</span>\n\n<span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">addcoef</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"int list ⇒ int list ⇒ int list\"</span><span class=\"w\"> </span><span class=\"kp\">where</span>\n<span class=\"w\">  </span><span class=\"s\">\"addcoef xs [] = xs\"</span><span class=\"w\"> </span><span class=\"o\">|</span>\n<span class=\"w\">  </span><span class=\"s\">\"addcoef [] xs = xs\"</span><span class=\"w\"> </span><span class=\"o\">|</span>\n<span class=\"w\">  </span><span class=\"s\">\"addcoef (x#xs) (y#ys) = (x + y) # addcoef xs ys\"</span>\n\n<span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">multcoef</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"int list ⇒ int list ⇒ int list\"</span><span class=\"w\"> </span><span class=\"kp\">where</span>\n<span class=\"w\">  </span><span class=\"s\">\"multcoef [] _ = []\"</span><span class=\"w\"> </span><span class=\"o\">|</span>\n<span class=\"w\">  </span><span class=\"s\">\"multcoef _ [] = []\"</span><span class=\"w\"> </span><span class=\"o\">|</span>\n<span class=\"w\">  </span><span class=\"s\">\"multcoef (x#xs) ys = addcoef (map (λy. x * y) ys) (0 # multcoef xs ys)\"</span>\n\n<span class=\"k\">primrec</span><span class=\"w\"> </span><span class=\"n\">coeffs</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"exp ⇒ int list\"</span><span class=\"w\"> </span><span class=\"kp\">where</span>\n<span class=\"w\">  </span><span class=\"s\">\"coeffs Var = [0,1]\"</span><span class=\"w\"> </span><span class=\"o\">|</span>\n<span class=\"w\">  </span><span class=\"s\">\"coeffs (Const n) = [n]\"</span><span class=\"w\"> </span><span class=\"o\">|</span>\n<span class=\"w\">  </span><span class=\"s\">\"coeffs (Add e1 e2) = addcoef (coeffs e1) (coeffs e2)\"</span><span class=\"w\"> </span><span class=\"o\">|</span>\n<span class=\"w\">  </span><span class=\"s\">\"coeffs (Mult e1 e2) = multcoef (coeffs e1) (coeffs e2)\"</span>\n</code></pre></div>\n<p><em>The problem</em><br>\nI have these functions for evaluating expressions and polynomials:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">primrec</span><span class=\"w\"> </span><span class=\"n\">eval</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"exp ⇒ int ⇒ int\"</span><span class=\"w\"> </span><span class=\"kp\">where</span>\n<span class=\"w\">  </span><span class=\"s\">\"eval Var x = x\"</span><span class=\"w\"> </span><span class=\"o\">|</span>\n<span class=\"w\">  </span><span class=\"s\">\"eval (Const a) x = a\"</span><span class=\"w\"> </span><span class=\"o\">|</span>\n<span class=\"w\">  </span><span class=\"s\">\"eval (Add a b) x = eval a x + eval b x\"</span><span class=\"w\"> </span><span class=\"o\">|</span>\n<span class=\"w\">  </span><span class=\"s\">\"eval (Mult a b) x = eval a x * eval b x\"</span>\n\n<span class=\"k\">primrec</span><span class=\"w\"> </span><span class=\"n\">evalp</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"int list ⇒ int ⇒ int\"</span><span class=\"w\"> </span><span class=\"kp\">where</span>\n<span class=\"w\">  </span><span class=\"s\">\"evalp [] x = 0\"</span><span class=\"w\"> </span><span class=\"o\">|</span>\n<span class=\"w\">  </span><span class=\"s\">\"evalp (a#as) x = a + x * evalp as x\"</span>\n</code></pre></div>\n<p>I'm trying to prove that <code>coeffs</code> preserves the value of the expression by<br>\nproving: lemma \"∀ x. evalp (coeffs e) x = eval e x\"<br>\nI haven't been able to prove the 'multcoef' case.<br>\nHere is the code and at the end are details about remaining proof state:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"c\">(* needed for addcoef_evalp *)</span>\n<span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]:</span><span class=\"w\"> </span><span class=\"s\">\"addcoef [] xs = xs\"</span>\n<span class=\"w\">  </span><span class=\"kp\">apply</span><span class=\"o\">(</span><span class=\"n\">induction</span><span class=\"w\"> </span><span class=\"n\">xs</span><span class=\"o\">)</span>\n<span class=\"w\">   </span><span class=\"kp\">apply</span><span class=\"o\">(</span><span class=\"n\">auto</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"k\">done</span>\n\n<span class=\"c\">(* needed for the main lemma *)</span>\n<span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">addcoef_evalp</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]:</span><span class=\"w\"> </span><span class=\"s\">\"∀ x. evalp (addcoef xs ys) x = evalp xs x +</span>\n<span class=\"s\">evalp ys x\"</span>\n<span class=\"w\">  </span><span class=\"kp\">apply</span><span class=\"o\">(</span><span class=\"n\">induction</span><span class=\"w\"> </span><span class=\"n\">xs</span><span class=\"w\"> </span><span class=\"n\">rule</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">addcoef.induct</span><span class=\"o\">)</span>\n<span class=\"w\">    </span><span class=\"kp\">apply</span><span class=\"o\">(</span><span class=\"n\">simp_all</span><span class=\"w\"> </span><span class=\"n\">add</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">algebra_simps</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"k\">done</span>\n\n<span class=\"c\">(* for multcoef_evalp *)</span>\n<span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]:</span><span class=\"w\"> </span><span class=\"s\">\"multcoef xs [] = []\"</span>\n<span class=\"w\">  </span><span class=\"kp\">apply</span><span class=\"o\">(</span><span class=\"n\">induction</span><span class=\"w\"> </span><span class=\"n\">xs</span><span class=\"o\">)</span>\n<span class=\"w\">   </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"n\">auto</span>\n<span class=\"w\">  </span><span class=\"k\">done</span>\n\n<span class=\"c\">(* for main lemma *)</span>\n<span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">multcoef_evalp</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]:</span><span class=\"w\"> </span><span class=\"s\">\"∀ x. evalp (multcoef xs ys) x = evalp xs x *</span>\n<span class=\"s\">evalp ys x\"</span>\n<span class=\"w\">  </span><span class=\"kp\">apply</span><span class=\"o\">(</span><span class=\"n\">induction</span><span class=\"w\"> </span><span class=\"n\">xs</span><span class=\"w\"> </span><span class=\"n\">rule</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">multcoef.induct</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"kp\">apply</span><span class=\"o\">(</span><span class=\"n\">auto</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"gr\">oops</span>\n\n<span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"s\">\"∀ x. evalp (coeffs e) x = eval e x\"</span>\n<span class=\"w\">  </span><span class=\"kp\">apply</span><span class=\"o\">(</span><span class=\"n\">induction</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"kp\">apply</span><span class=\"o\">(</span><span class=\"n\">auto</span>\n</code></pre></div>\n<p>At the multcoef_evalp, the proof state is:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">proof</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">prove</span><span class=\"o\">)</span>\n<span class=\"n\">goal</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">1</span><span class=\"w\"> </span><span class=\"n\">subgoal</span><span class=\"o\">):</span>\n<span class=\"w\"> </span><span class=\"n\">1.</span><span class=\"w\"> </span><span class=\"n\">⋀x</span><span class=\"w\"> </span><span class=\"n\">xs</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"w\"> </span><span class=\"n\">va</span><span class=\"w\"> </span><span class=\"n\">xa.</span>\n<span class=\"w\">       </span><span class=\"n\">∀x.</span><span class=\"w\"> </span><span class=\"n\">evalp</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">multcoef</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">v</span><span class=\"w\"> </span><span class=\"n\">#</span><span class=\"w\"> </span><span class=\"n\">va</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">xs</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">           </span><span class=\"o\">(</span><span class=\"n\">v</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">*</span><span class=\"w\"> </span><span class=\"n\">evalp</span><span class=\"w\"> </span><span class=\"n\">va</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">*</span><span class=\"w\"> </span><span class=\"n\">evalp</span><span class=\"w\"> </span><span class=\"n\">xs</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">⟹</span>\n<span class=\"w\">       </span><span class=\"n\">v</span><span class=\"w\"> </span><span class=\"n\">*</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">+</span>\n<span class=\"w\">       </span><span class=\"n\">xa</span><span class=\"w\"> </span><span class=\"n\">*</span>\n<span class=\"w\">       </span><span class=\"o\">(</span><span class=\"n\">evalp</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">map</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"c\">(*) v) xs) xa +</span>\n<span class=\"c\">        evalp (multcoef va (x # xs)) xa) =</span>\n<span class=\"c\">       (v + xa * evalp va xa) * (x + xa * evalp xs xa)</span>\n</code></pre></div>\n<p>At the main lemma, the proof state is:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">proof</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">prove</span><span class=\"o\">)</span>\n<span class=\"n\">goal</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">1</span><span class=\"w\"> </span><span class=\"n\">subgoal</span><span class=\"o\">):</span>\n<span class=\"w\"> </span><span class=\"n\">1.</span><span class=\"w\"> </span><span class=\"n\">⋀e1</span><span class=\"w\"> </span><span class=\"n\">e2</span><span class=\"w\"> </span><span class=\"n\">x.</span>\n<span class=\"w\">       </span><span class=\"n\">⟦∀x.</span><span class=\"w\"> </span><span class=\"n\">evalp</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">coeffs</span><span class=\"w\"> </span><span class=\"n\">e1</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">eval</span><span class=\"w\"> </span><span class=\"n\">e1</span><span class=\"w\"> </span><span class=\"n\">x;</span>\n<span class=\"w\">        </span><span class=\"n\">∀x.</span><span class=\"w\"> </span><span class=\"n\">evalp</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">coeffs</span><span class=\"w\"> </span><span class=\"n\">e2</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">eval</span><span class=\"w\"> </span><span class=\"n\">e2</span><span class=\"w\"> </span><span class=\"n\">x⟧</span>\n<span class=\"w\">       </span><span class=\"n\">⟹</span><span class=\"w\"> </span><span class=\"n\">evalp</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">multcoef</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">coeffs</span><span class=\"w\"> </span><span class=\"n\">e1</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">coeffs</span><span class=\"w\"> </span><span class=\"n\">e2</span><span class=\"o\">))</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">           </span><span class=\"n\">eval</span><span class=\"w\"> </span><span class=\"n\">e1</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">*</span><span class=\"w\"> </span><span class=\"n\">eval</span><span class=\"w\"> </span><span class=\"n\">e2</span><span class=\"w\"> </span><span class=\"n\">x</span>\n</code></pre></div>\n<p>Therefore the only thing I have left to prove is the multcoef_evalp lemma.<br>\nHow could I prove it?</p>",
        "id": 396077518,
        "sender_full_name": "Email Gateway",
        "timestamp": 1697027011
    },
    {
        "content": "<p>From: Wenda Li &lt;<a href=\"mailto:wl302@cam.ac.uk\">wl302@cam.ac.uk</a>&gt;<br>\nHi Eero,</p>\n<p>As you are working with univariate polynomials, proofs from HOL-Computational_Algebra.Polynomial (<a href=\"https://isabelle.in.tum.de/dist/library/HOL/HOL-Computational_Algebra/Polynomial.html\">https://isabelle.in.tum.de/dist/library/HOL/HOL-Computational_Algebra/Polynomial.html</a>) might give you some hints about how to progress.</p>\n<p>Best,<br>\nWenda</p>",
        "id": 396079440,
        "sender_full_name": "Email Gateway",
        "timestamp": 1697027695
    },
    {
        "content": "<p>From: Stepan Holub &lt;<a href=\"mailto:cl-isabelle-users@lists.cam.ac.uk\">cl-isabelle-users@lists.cam.ac.uk</a>&gt;<br>\nHi,</p>\n<p>did you study<br>\nHOL/Algebra/Polynomials.thy<br>\nfrom the distribution?<br>\nA polynomial multiplication is defined there. It could also help you to <br>\nunderstand problems with your own code.<br>\nIn general, before implementing anything, in particular something as <br>\nbasic as polynomials, it is a good idea to look at what is already <br>\navailable.<br>\nBoth to use it, and to learn.</p>\n<p>Stepan</p>",
        "id": 396867125,
        "sender_full_name": "Email Gateway",
        "timestamp": 1697450937
    }
]