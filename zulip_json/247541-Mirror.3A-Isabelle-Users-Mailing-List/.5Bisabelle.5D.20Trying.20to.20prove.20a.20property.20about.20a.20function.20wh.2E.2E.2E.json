[
    {
        "content": "<p>From: Eero Pomell &lt;<a href=\"mailto:eero.the.engineer@gmail.com\">eero.the.engineer@gmail.com</a>&gt;<br>\nHello,</p>\n<p><em>Problem</em><br>\nLet datatype 'a tree = Tip | Node \"'a tree\" 'a \"'a tree\"<br>\nI have the functions:</p>\n<ul>\n<li>\n<p>ord :: \"int tree ⟹ bool\"<br>\n    checks if tree is ordered</p>\n</li>\n<li>\n<p>ins :: \"int ⟹ int tree ⟹ int tree\"<br>\n    inserts an integer into an ordered tree</p>\n</li>\n</ul>\n<p>I'm trying to prove that if a tree is ordered, then inserting preserves the<br>\norderedness.<br>\nhere's what I have:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"s\">\"ord t ⟹ ord (ins i t)\"</span>\n<span class=\"w\">  </span><span class=\"kp\">apply</span><span class=\"o\">(</span><span class=\"n\">induction</span><span class=\"w\"> </span><span class=\"n\">t</span><span class=\"o\">)</span>\n<span class=\"w\">   </span><span class=\"kp\">apply</span><span class=\"o\">(</span><span class=\"n\">auto</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>the proof state:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">proof</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">prove</span><span class=\"o\">)</span>\n<span class=\"n\">goal</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">2</span><span class=\"w\"> </span><span class=\"n\">subgoals</span><span class=\"o\">):</span>\n<span class=\"w\"> </span><span class=\"n\">1.</span><span class=\"w\"> </span><span class=\"n\">⋀t1</span><span class=\"w\"> </span><span class=\"n\">x2</span><span class=\"w\"> </span><span class=\"n\">t2.</span>\n<span class=\"w\">       </span><span class=\"n\">⟦ord</span><span class=\"w\"> </span><span class=\"n\">t1</span><span class=\"w\"> </span><span class=\"n\">⟹</span><span class=\"w\"> </span><span class=\"n\">ord</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">ins</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"n\">t1</span><span class=\"o\">)</span><span class=\"n\">;</span><span class=\"w\"> </span><span class=\"n\">ord</span><span class=\"w\"> </span><span class=\"n\">t2</span><span class=\"w\"> </span><span class=\"n\">⟹</span><span class=\"w\"> </span><span class=\"n\">ord</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">ins</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"n\">t2</span><span class=\"o\">)</span><span class=\"n\">;</span>\n<span class=\"w\">        </span><span class=\"n\">ord_list</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">flatten</span><span class=\"w\"> </span><span class=\"n\">t1</span><span class=\"w\"> </span><span class=\"n\">@</span><span class=\"w\"> </span><span class=\"n\">x2</span><span class=\"w\"> </span><span class=\"n\">#</span><span class=\"w\"> </span><span class=\"n\">flatten</span><span class=\"w\"> </span><span class=\"n\">t2</span><span class=\"o\">)</span><span class=\"n\">;</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"n\">&lt;</span><span class=\"w\"> </span><span class=\"n\">x2⟧</span>\n<span class=\"w\">       </span><span class=\"n\">⟹</span><span class=\"w\"> </span><span class=\"n\">ord_list</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">flatten</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">ins</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"n\">t1</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">@</span><span class=\"w\"> </span><span class=\"n\">x2</span><span class=\"w\"> </span><span class=\"n\">#</span><span class=\"w\"> </span><span class=\"n\">flatten</span><span class=\"w\"> </span><span class=\"n\">t2</span><span class=\"o\">)</span>\n<span class=\"w\"> </span><span class=\"n\">2.</span><span class=\"w\"> </span><span class=\"n\">⋀t1</span><span class=\"w\"> </span><span class=\"n\">x2</span><span class=\"w\"> </span><span class=\"n\">t2.</span>\n<span class=\"w\">       </span><span class=\"n\">⟦ord</span><span class=\"w\"> </span><span class=\"n\">t1</span><span class=\"w\"> </span><span class=\"n\">⟹</span><span class=\"w\"> </span><span class=\"n\">ord</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">ins</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"n\">t1</span><span class=\"o\">)</span><span class=\"n\">;</span><span class=\"w\"> </span><span class=\"n\">ord</span><span class=\"w\"> </span><span class=\"n\">t2</span><span class=\"w\"> </span><span class=\"n\">⟹</span><span class=\"w\"> </span><span class=\"n\">ord</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">ins</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"n\">t2</span><span class=\"o\">)</span><span class=\"n\">;</span>\n<span class=\"w\">        </span><span class=\"n\">ord_list</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">flatten</span><span class=\"w\"> </span><span class=\"n\">t1</span><span class=\"w\"> </span><span class=\"n\">@</span><span class=\"w\"> </span><span class=\"n\">x2</span><span class=\"w\"> </span><span class=\"n\">#</span><span class=\"w\"> </span><span class=\"n\">flatten</span><span class=\"w\"> </span><span class=\"n\">t2</span><span class=\"o\">)</span><span class=\"n\">;</span><span class=\"w\"> </span><span class=\"n\">¬</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"n\">&lt;</span><span class=\"w\"> </span><span class=\"n\">x2;</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"n\">≠</span><span class=\"w\"> </span><span class=\"n\">x2⟧</span>\n<span class=\"w\">       </span><span class=\"n\">⟹</span><span class=\"w\"> </span><span class=\"n\">ord_list</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">flatten</span><span class=\"w\"> </span><span class=\"n\">t1</span><span class=\"w\"> </span><span class=\"n\">@</span><span class=\"w\"> </span><span class=\"n\">x2</span><span class=\"w\"> </span><span class=\"n\">#</span><span class=\"w\"> </span><span class=\"n\">flatten</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">ins</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"n\">t2</span><span class=\"o\">))</span>\n</code></pre></div>\n<p><em>Questions</em></p>\n<ul>\n<li>\n<p>Looking at the subgoal (1) above, it seems a good idea to prove ord_list<br>\nxs @ ys ⟹ ord_list xs /\\ ord_list ys</p>\n</li>\n<li>\n<p>If I prove that lemma and add [simp] attribute, then the apply(auto) in<br>\nthe original lemma goes into a loop; why?</p>\n</li>\n<li>\n<p>How should I proceed here?<br>\n  I feel like the definition of ord (it first flattens the tree and then<br>\ncalls ord_list) is maybe complicating it too much, so should I redefine<br>\n<code>ord</code>?</p>\n</li>\n<li>\n<p>The entire code is below, are there any general isabelle mistakes that<br>\nI'm making that should be avoided?</p>\n</li>\n</ul>\n<p>Entire code:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">datatype</span><span class=\"w\"> </span><span class=\"n n-Type\">'a</span><span class=\"w\"> </span><span class=\"n\">tree</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Tip</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Node</span><span class=\"w\"> </span><span class=\"s\">\"'a tree\"</span><span class=\"w\"> </span><span class=\"n n-Type\">'a</span><span class=\"w\"> </span><span class=\"s\">\"'a tree\"</span>\n\n\n<span class=\"c\">(* Flatten a binary tree into a list in infix order *)</span>\n<span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">flatten</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"'a tree ⇒ 'a list\"</span><span class=\"w\"> </span><span class=\"kp\">where</span>\n<span class=\"w\">  </span><span class=\"s\">\"flatten Tip = []\"</span><span class=\"w\"> </span><span class=\"o\">|</span>\n<span class=\"w\">  </span><span class=\"s\">\"flatten (Node l x r) = flatten l @ [x] @ flatten r\"</span>\n\n<span class=\"c\">(* Check if an integer list is ordered *)</span>\n<span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">ord_list</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"int list ⇒ bool\"</span><span class=\"w\"> </span><span class=\"kp\">where</span>\n<span class=\"w\">  </span><span class=\"s\">\"ord_list [] = True\"</span><span class=\"w\"> </span><span class=\"o\">|</span>\n<span class=\"w\">  </span><span class=\"s\">\"ord_list [x] = True\"</span><span class=\"w\"> </span><span class=\"o\">|</span>\n<span class=\"w\">  </span><span class=\"s\">\"ord_list (x#xs) = ((x &lt; hd xs) ∧ (ord_list xs))\"</span>\n\n<span class=\"c\">(* Check if a binary tree of integers is ordered *)</span>\n<span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">ord</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"int tree ⇒ bool\"</span><span class=\"w\"> </span><span class=\"kp\">where</span>\n<span class=\"w\">  </span><span class=\"s\">\"ord Tip = True\"</span><span class=\"w\"> </span><span class=\"o\">|</span>\n<span class=\"w\">  </span><span class=\"s\">\"ord (Node l x r) = ord_list(flatten (Node l x r))\"</span>\n\n<span class=\"c\">(* Insert an integer into an ordered binary tree *)</span>\n<span class=\"k\">fun</span><span class=\"w\"> </span><span class=\"n\">ins</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"int ⇒ int tree ⇒ int tree\"</span><span class=\"w\"> </span><span class=\"kp\">where</span>\n<span class=\"w\">  </span><span class=\"s\">\"ins x Tip = Node Tip x Tip\"</span><span class=\"w\"> </span><span class=\"o\">|</span>\n<span class=\"w\">  </span><span class=\"s\">\"ins x (Node l a r) =</span>\n<span class=\"s\">    (if x = a then</span>\n<span class=\"s\">       Node l a r</span>\n<span class=\"s\">     else if x &lt; a then</span>\n<span class=\"s\">       Node (ins x l) a r</span>\n<span class=\"s\">     else</span>\n<span class=\"s\">       Node l a (ins x r))\"</span>\n\n\n<span class=\"c\">(* Lemma needed for lemma below *)</span>\n<span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">ord_list_dist</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"ord_list (xs @ ys) ⟹ (ord_list xs ∧ ord_list ys)\"</span>\n<span class=\"w\">  </span><span class=\"kp\">apply</span><span class=\"o\">(</span><span class=\"n\">induction</span><span class=\"w\"> </span><span class=\"n\">xs</span><span class=\"w\"> </span><span class=\"n\">rule</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">ord_list.induct</span><span class=\"o\">)</span>\n<span class=\"w\">    </span><span class=\"kp\">apply</span><span class=\"o\">(</span><span class=\"n\">auto</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"kp\">apply</span><span class=\"o\">(</span><span class=\"n\">induction</span><span class=\"w\"> </span><span class=\"n\">ys</span><span class=\"o\">)</span>\n<span class=\"w\">   </span><span class=\"kp\">apply</span><span class=\"o\">(</span><span class=\"n\">auto</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"k\">done</span>\n\n<span class=\"c\">(* Lemma proving ordered property holds after insertion *)</span>\n<span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"s\">\"ord t ⟹ ord (ins i t)\"</span>\n<span class=\"w\">  </span><span class=\"kp\">apply</span><span class=\"o\">(</span><span class=\"n\">induction</span><span class=\"w\"> </span><span class=\"n\">t</span><span class=\"o\">)</span>\n<span class=\"w\">   </span><span class=\"kp\">apply</span><span class=\"o\">(</span><span class=\"n\">auto</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"k\">done</span>\n</code></pre></div>\n<p>Thanks.</p>",
        "id": 396372371,
        "sender_full_name": "Email Gateway",
        "timestamp": 1697148629
    },
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\nThe approach works in principle, read Chapter 5 of <br>\n<a href=\"https://functional-algorithms-verified.org/\">https://functional-algorithms-verified.org/</a>. Do not reinvent but reuse.</p>\n<p>Tobias</p>\n<p><a href=\"/user_uploads/14278/ASnoYDaTBCMkyDzPQz_5Mus0/smime.p7s\">smime.p7s</a></p>",
        "id": 396868798,
        "sender_full_name": "Email Gateway",
        "timestamp": 1697451347
    }
]