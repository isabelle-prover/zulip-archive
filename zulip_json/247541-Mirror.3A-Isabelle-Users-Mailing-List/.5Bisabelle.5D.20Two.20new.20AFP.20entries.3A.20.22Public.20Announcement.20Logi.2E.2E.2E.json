[
    {
        "content": "<p>From: \"Thiemann, René\" &lt;<a href=\"mailto:Rene.Thiemann@uibk.ac.at\">Rene.Thiemann@uibk.ac.at</a>&gt;<br>\nDear all, </p>\n<p>I’m happy to announce two new AFP entries.</p>\n<p>Public Announcement Logic <br>\n  by Asta Halkjær</p>\n<p>This work is a formalization of public announcement logic with<br>\ncountably many agents. It includes proofs of soundness and<br>\ncompleteness for a variant of the axiom system PA + DIST! + NEC!. The<br>\ncompleteness proof builds on the Epistemic Logic theory.</p>\n<p><a href=\"https://www.isa-afp.org/entries/Public_Announcement_Logic.html\">https://www.isa-afp.org/entries/Public_Announcement_Logic.html</a></p>\n<p>MiniSail - A kernel language for the ISA specification language SAIL<br>\n  by Mark Wassell</p>\n<p>MiniSail is a kernel language for Sail, an instruction set<br>\narchitecture (ISA) specification language. Sail is an imperative<br>\nlanguage with a light-weight dependent type system similar to<br>\nrefinement type systems. From an ISA specification, the Sail compiler<br>\ncan generate theorem prover code and C (or OCaml) to give an<br>\nexecutable emulator for an architecture. The idea behind MiniSail is<br>\nto capture the key and novel features of Sail in terms of their<br>\nsyntax, typing rules and operational semantics, and to confirm that<br>\nthey work together by proving progress and preservation lemmas. We use<br>\nthe Nominal2 library to handle binding.</p>\n<p><a href=\"https://www.isa-afp.org/entries/MiniSail.html\">https://www.isa-afp.org/entries/MiniSail.html</a></p>\n<p>Enjoy,<br>\nRené</p>",
        "id": 243896946,
        "sender_full_name": "Email Gateway",
        "timestamp": 1624615975
    }
]