[
    {
        "content": "<p>From: Guilherme Silva &lt;<a href=\"mailto:guilhermegfsilva@gmail.com\">guilhermegfsilva@gmail.com</a>&gt;<br>\nHello,</p>\n<p>I'm wondering how to declare an arity for a new type that I've declared in<br>\nIsabelle. I've tried following the examples in these two documents:</p>\n<p>Old Introduction to Isabelle:<br>\n<a href=\"https://isabelle.in.tum.de/dist/Isabelle2023/doc/intro.pdf\">https://isabelle.in.tum.de/dist/Isabelle2023/doc/intro.pdf</a> (Section 11.2)</p>\n<p>The Isabelle Reference Manual:<br>\n<a href=\"https://www.cl.cam.ac.uk/~lp15/papers/Reports/ref97.pdf\">https://www.cl.cam.ac.uk/~lp15/papers/Reports/ref97.pdf</a> (Section 6.1.2)</p>\n<p>But Isabelle doesn't recognize the keyword \"arities\", so I can't proceed.<br>\nFor context, I want to define a new type using typedecl and declare its<br>\narity as being of sort \"enum\" and \"equal\" so I can export code using said<br>\ntype without getting a \"wellsortedness error\".</p>\n<p>Thanks,<br>\nGuilherme Silva</p>",
        "id": 400783103,
        "sender_full_name": "Email Gateway",
        "timestamp": 1699376954
    },
    {
        "content": "<p>From: Dominique Unruh &lt;<a href=\"mailto:cl-isabelle-users@lists.cam.ac.uk\">cl-isabelle-users@lists.cam.ac.uk</a>&gt;<br>\nHello,</p>\n<p>there may be better ways (without using sorry), but at least the <br>\nfollowing works:</p>\n<p>typedecl x</p>\n<p>instance x :: enum sorry</p>\n<p>Of course, due to the sorry, you can also declare a type with impossible <br>\nsorts, e.g., instance x :: \"{infinite,finite}\" or similar.</p>\n<p>Best wishes,<br>\nDominique.</p>",
        "id": 400787300,
        "sender_full_name": "Email Gateway",
        "timestamp": 1699378580
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nIt is better to be honest about the axiomatization. E.g. see this example from <br>\n$ISABELLE_HOME/src/HOL/HOLCF/ex/Focus_ex.thy :</p>\n<p>typedecl ('a, 'b) tc<br>\naxiomatization where tc_arity: \"OFCLASS(('a::pcpo, 'b::pcpo) tc, pcop_class)\"<br>\ninstance tc :: (pcpo, pcpo) pcpo by (rule tc_arity)</p>\n<p>Makarius</p>",
        "id": 400913827,
        "sender_full_name": "Email Gateway",
        "timestamp": 1699438855
    },
    {
        "content": "<p>From: Guilherme Silva &lt;<a href=\"mailto:guilhermegfsilva@gmail.com\">guilhermegfsilva@gmail.com</a>&gt;<br>\nUnfortunately, when trying to use these methods, I still get the following<br>\nerror:</p>\n<p>\"No code equations for equal_x_inst.equal_x, enum_x_inst.enum_all_x,<br>\nenum_x_inst.enum_ex_x\", etc.</p>\n<p>How can I define the code equations I need?</p>\n<p>Also, is there a way to define the arity of a type as belonging to multiple<br>\nclasses (e.g. enum and equal) in just one axiom? If I try to use two<br>\nseparate axioms, like as follows, they conflict with each other.</p>\n<p>axiomatization where x_arity: \"OFCLASS(x, enum_class)\"<br>\naxiomatization where x_arity: \"OFCLASS(x, equal_class)\"</p>",
        "id": 400942600,
        "sender_full_name": "Email Gateway",
        "timestamp": 1699449579
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;</p>\n<blockquote>\n<p>Unfortunately, when trying to use these methods, I still get the following <br>\nerror:</p>\n<p>\"No code equations for equal_x_inst.equal_x, enum_x_inst.enum_all_x,<br>\nenum_x_inst.enum_ex_x\", etc.</p>\n<p>How can I define the code equations I need?</p>\n<p>Also, is there a way to define the arity of a type as belonging to multiple<br>\nclasses (e.g. enum and equal) in just one axiom? If I try to use two separate<br>\naxioms, like as follows, they conflict with each other.</p>\n<p>axiomatization where x_arity: \"OFCLASS(x, enum_class)\"<br>\naxiomatization where x_arity: \"OFCLASS(x, equal_class)\"</p>\n</blockquote>\n<p>Now it becomes more clear what you actually had in mind. It is not about \"type <br>\narity declaration\" (from many decades ago), but \"type class instantiation\".</p>\n<p>If you make a hypersearch in Isabelle/jEdit over the directory <br>\n$ISABELLE_HOME/src and its subdirectories, file pattern *.thy and regexp <br>\ninstantiation.*enum you will find some examples.</p>\n<p>This will also provide more (con)text how things work in practice.</p>\n<p>Makarius</p>",
        "id": 400944091,
        "sender_full_name": "Email Gateway",
        "timestamp": 1699450098
    }
]