[
    {
        "content": "<p>From: \"Joshua K.\" &lt;<a href=\"mailto:j.kobschaetzki@campus.tu-berlin.de\">j.kobschaetzki@campus.tu-berlin.de</a>&gt;<br>\nHi,</p>\n<p>I've recently started working on writing a k6[^0] adapter[^1] for <br>\nstress-testing a server compatible with the isabelle server protocol. <br>\nThe main purpose of the adapter is to analyze the performance <br>\ncharacteristics and behavior of Isabelle server with multiple users and <br>\nsessions. During the initial testing phase, I encountered some <br>\nunexpected behavior related to the session_stop command. It seems to <br>\ntrigger a race-condition or edge case, especially when called in quick <br>\nsuccession after start_session, use_theories, and purge_theories[^2] in <br>\na loop. Typically, this occurs on the second to fourth iteration.</p>\n<p>Here are the observed stack traces from the Isabelle server's stdout:</p>\n<ol>\n<li>observed with a single user:</li>\n</ol>\n<p>Exception in thread \"event_timer\"<br>\n*** Inactive prover input thread for command <br>\n\"Document.discontinue_execution\"<br>\n     at isabelle.Exn$ERROR$.apply(exn.scala:25)<br>\n     at isabelle.Exn$.error(exn.scala:29)<br>\n     at isabelle.package$.$init$$$anonfun$1(ROOT.scala:9)<br>\n     at isabelle.Prover.protocol_command_raw(prover.scala:296)<br>\n     at isabelle.Prover.protocol_command_args(prover.scala:301)<br>\n     at isabelle.Prover.protocol_command(prover.scala:305)<br>\n     at isabelle.Protocol.discontinue_execution(protocol.scala:395)<br>\n     at isabelle.Protocol.discontinue_execution$(protocol.scala:306)<br>\n     at isabelle.Prover.discontinue_execution(prover.scala:71)<br>\n     at isabelle.Session.handle_raw_edits$1(session.scala:397)<br>\n     at isabelle.Session.$init$$$anonfun$3(session.scala:648)<br>\n     at <br>\nisabelle.Consumer_Thread$.consume_single$1$$anonfun$1(consumer_thread.scala:28)<br>\n     at isabelle.Exn$.capture(exn.scala:60)<br>\n     at isabelle.Consumer_Thread$.consume_single$1(consumer_thread.scala:28)<br>\n     at isabelle.Consumer_Thread$.fork$$anonfun$2(consumer_thread.scala:34)<br>\n     at isabelle.Consumer_Thread.process(consumer_thread.scala:90)<br>\n     at isabelle.Consumer_Thread.main_loop(consumer_thread.scala:108)<br>\n     at isabelle.Consumer_Thread.$init$$$anonfun$1(consumer_thread.scala:50)<br>\n     at <br>\nisabelle.Consumer_Thread.$init$$$anonfun$adapted$1(consumer_thread.scala:50)<br>\n     at scala.Function0.apply$mcV$sp(Function0.scala:42)<br>\n     at isabelle.Isabelle_Thread$.$anonfun$2(isabelle_thread.scala:64)<br>\n     at isabelle.Isabelle_Thread.run(isabelle_thread.scala:140)</p>\n<ol start=\"2\">\n<li>Also observed, but only when concurrently applying the same commands <br>\nwith 2 or more \"users\":</li>\n</ol>\n<p>Exception in thread \"event_timer\"<br>\n*** Consumer thread not active: \"Isabelle.Session.manager\"<br>\n     at isabelle.Exn$ERROR$.apply(exn.scala:25)<br>\n     at isabelle.Exn$.error(exn.scala:29)<br>\n     at isabelle.package$.$init$$$anonfun$1(ROOT.scala:9)<br>\n     at isabelle.Consumer_Thread.request(consumer_thread.scala:78)<br>\n     at isabelle.Consumer_Thread.send_wait(consumer_thread.scala:118)<br>\n     at isabelle.Session.update(session.scala:760)<br>\n     at <br>\nisabelle.Headless$Resources.load_theories$$anonfun$1(headless.scala:675)<br>\n     at isabelle.Synchronized.change(synchronized.scala:67)<br>\n     at isabelle.Headless$Resources.load_theories(headless.scala:676)<br>\n     at <br>\nisabelle.Headless$Session.check_state$1$$anonfun$3(headless.scala:338)<br>\n     at scala.runtime.function.JProcedure1.apply(JProcedure1.java:15)<br>\n     at scala.runtime.function.JProcedure1.apply(JProcedure1.java:10)<br>\n     at scala.Option$WithFilter.foreach(Option.scala:437)<br>\n     at isabelle.Headless$Session.check_state$1(headless.scala:338)<br>\n     at <br>\nisabelle.Headless$Session.check_progress$lzyINIT1$1$$anonfun$1(headless.scala:347)<br>\n     at <br>\nisabelle.Headless$Session.check_progress$lzyINIT1$1$$anonfun$adapted$1(headless.scala:349)<br>\n     at scala.Function0.apply$mcV$sp(Function0.scala:42)<br>\n     at isabelle.Event_Timer$$anon$1.run(event_timer.scala:28)<br>\n     at java.base/java.util.TimerThread.mainLoop(Timer.java:566)<br>\n     at java.base/java.util.TimerThread.run(Timer.java:516)</p>\n<p>Interestingly, during testing, the specific theory for use_theories <br>\ndidn't seem to affect the outcome.</p>\n<p>However, the exception doesn't occur if a delay of &gt;2-3 seconds is <br>\ninserted between session_stop and use_theories calls. This led me to <br>\nsuspect a race condition, but I couldn't pinpoint the exact cause in the <br>\nServer code.</p>\n<p>I would greatly appreciate any advice or guidance on how to address this <br>\nbehavior. Is there a way to navigate the timer issues without resorting <br>\nto delaying the execution on the client?</p>\n<p>Best regards,<br>\nJoshua Kobschätzki</p>\n<p>[^0]: <a href=\"https://k6.io/open-source/\">https://k6.io/open-source/</a></p>\n<p>[^1]: <a href=\"https://git.tu-berlin.de/cobalt.rocks/isa-bench\">https://git.tu-berlin.de/cobalt.rocks/isa-bench</a>, a MRE, if <br>\nrequested, can be made available</p>\n<p>[^2]: Command log -- executed after successful client&lt;&gt;server handshake:</p>\n<h1>executed in a loop -- exception occurred at 2-4 iteration</h1>\n<p>session_start {\"session\": \"HOL\", \"options\": <br>\n[\"headless_consolidate_delay=0.5\", \"headless_prune_delay=5\", <br>\n\"show_states\"]}\\n</p>\n<h1>await session start, retrieve session id</h1>\n<p>use_theories {\"session_id\": \"{{ previously retrieved session id }}\", <br>\n\"theories\": [\"{{ some theory, the specific theory didn't matter during <br>\ntesting }}\"], \"master_dir\": \"{{ theory path }}\"}\\n</p>\n<h1>await use_theories</h1>\n<p>purge_theories {\"session_id\": \"{{ previously retrieved session id }}\", <br>\n\"all\": true}\\n</p>\n<h1>await purge_theories</h1>\n<p>session_stop {\"session_id\": \"{{ previously retrieved session id }}\"}\\n</p>\n<h1>await session_stop, if exception occurs:</h1>\n<h1>FAILED {\"kind\": \"error\", \"message\": \"java.lang.IllegalStateException:</h1>\n<p>Timer already cancelled.\",\"task\": \"&lt;task id for session_close&gt;\"}</p>\n<h1>the stack trace will be dispalyed in the corresponding server stdout</h1>",
        "id": 411702017,
        "sender_full_name": "Email Gateway",
        "timestamp": 1704707081
    }
]