[
    {
        "content": "<p>From: Kevin Kappelmann &lt;<a href=\"mailto:kevin.kappelmann@tum.de\">kevin.kappelmann@tum.de</a>&gt;<br>\nDear list,</p>\n<p>I am using Isabelle2025 and want to report an unexpected behaviour of <br>\nthe printing of terms containing nested prop functions (form <br>\nIsabelle/Pure).</p>\n<p>A minimal example is \"PROP (f :: prop ⇒ prop) PROP ((g :: prop ⇒ prop) <br>\nPROP x)\", which is printed as \"PROP f PROP g PROP x\", which can be <br>\nmisinterpreted as \"f g x\".</p>\n<p>Some possible outputs that are less prone to misinterpretation:</p>\n<ol>\n<li>\"PROP f PROP (g PROP x)\"</li>\n<li>\"PROP f (g x)\"</li>\n<li>\"PROP f PROP (g x)\"<br>\nNote that all these cases can already correctly be used as input.</li>\n</ol>\n<p>Below, you can find a corresponding theory file.</p>\n<p>Best wishes,</p>\n<p>Kevin</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">theory</span><span class=\"w\"> </span><span class=\"n\">Scratch</span>\n<span class=\"w\">   </span><span class=\"kp\">imports</span><span class=\"w\"> </span><span class=\"n\">Pure</span>\n<span class=\"k\">begin</span>\n\n<span class=\"kt\">term</span><span class=\"w\"> </span><span class=\"s\">\"PROP (f :: prop ⇒ prop) PROP ((g :: prop ⇒ prop) PROP x)\"</span>\n<span class=\"c\">(*</span>\n<span class=\"c\">This prints \"PROP f PROP g PROP x\", which can be misinterpreted as \"f g x\".</span>\n<span class=\"c\">*)</span>\n\n<span class=\"k\">end</span>\n</code></pre></div>",
        "id": 534196550,
        "sender_full_name": "Email Gateway",
        "timestamp": 1755079087
    },
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\nKevin,</p>\n<p>I think I am to blame for PROP and the grammar may indeed be suboptimal. I'll <br>\ntake a look soon.</p>\n<p>Tobias</p>\n<p>On 13/08/2025 11:50, Kevin Kappelmann wrote:</p>\n<blockquote>\n<p>Dear list,</p>\n<p>I am using Isabelle2025 and want to report an unexpected behaviour of the <br>\nprinting of terms containing nested prop functions (form Isabelle/Pure).</p>\n<p>A minimal example is \"PROP (f :: prop ⇒ prop) PROP ((g :: prop ⇒ prop) PROP x)\", <br>\nwhich is printed as \"PROP f PROP g PROP x\", which can be misinterpreted as \"f g x\".</p>\n<p>Some possible outputs that are less prone to misinterpretation:<br>\n1. \"PROP f PROP (g PROP x)\"<br>\n2. \"PROP f (g x)\"<br>\n3. \"PROP f PROP (g x)\"<br>\nNote that all these cases can already correctly be used as input.</p>\n<p>Below, you can find a corresponding theory file.</p>\n<p>Best wishes,</p>\n<p>Kevin</p>\n<p>```isabelle<br>\ntheory Scratch<br>\n   imports Pure<br>\nbegin</p>\n<p>term \"PROP (f :: prop ⇒ prop) PROP ((g :: prop ⇒ prop) PROP x)\"<br>\n(*<br>\nThis prints \"PROP f PROP g PROP x\", which can be misinterpreted as \"f g x\".<br>\n*)</p>\n<p>end<br>\n```</p>\n</blockquote>\n<p><a href=\"/user_uploads/14278/YP23Ii6hey3CjA7C79GcbCJ-/smime.p7s\">smime.p7s</a></p>",
        "id": 534452274,
        "sender_full_name": "Email Gateway",
        "timestamp": 1755167893
    },
    {
        "content": "<p>From: Lawrence Paulson &lt;<a href=\"mailto:lp15@cam.ac.uk\">lp15@cam.ac.uk</a>&gt;<br>\nDear Kevin, as I guess you know, Isabelle maintains a separation between the object-logic and the meta-logic by relying on an embedding from the former to the latter, which is hidden from users for the sake of readability. The drawback is that a rule such as P ==&gt; P becomes ambiguous as to whether P has (assuming Isabelle/HOL) type bool or type prop. Therefore, the notation “PROP term\" is provided to suppress the default embedding and ensure that in “PROP P\" the variable has type prop. So I'm not even sure why you need three PROPs in f(g x); I would expect “PROP f (g x)\".</p>\n<p>Things have changed massively in the past 30 years or so, and I see that the syntax is now defined as follows:</p>\n<p>(\"_aprop\",      typ \"aprop ⇒ prop\",<br>\n      Mixfix.mixfix \"(‹open_block notation=‹prefix PROP››PROP _)\"),</p>\n<p>Maybe something can be tweaked in Pure/pure_thy.ML.</p>\n<p>Larry</p>\n<blockquote>\n<p>On 13 Aug 2025, at 10:50, Kevin Kappelmann &lt;<a href=\"mailto:kevin.kappelmann@tum.de\">kevin.kappelmann@tum.de</a>&gt; wrote:</p>\n<p>Dear list,</p>\n<p>I am using Isabelle2025 and want to report an unexpected behaviour of the printing of terms containing nested prop functions (form Isabelle/Pure).</p>\n<p>A minimal example is \"PROP (f :: prop ⇒ prop) PROP ((g :: prop ⇒ prop) PROP x)\", which is printed as \"PROP f PROP g PROP x\", which can be misinterpreted as \"f g x\".</p>\n<p>Some possible outputs that are less prone to misinterpretation:<br>\n1. \"PROP f PROP (g PROP x)\"<br>\n2. \"PROP f (g x)\"<br>\n3. \"PROP f PROP (g x)\"<br>\nNote that all these cases can already correctly be used as input.</p>\n<p>Below, you can find a corresponding theory file.</p>\n<p>Best wishes,</p>\n<p>Kevin</p>\n<p>```isabelle<br>\ntheory Scratch<br>\n imports Pure<br>\nbegin</p>\n<p>term \"PROP (f :: prop ⇒ prop) PROP ((g :: prop ⇒ prop) PROP x)\"<br>\n(*<br>\nThis prints \"PROP f PROP g PROP x\", which can be misinterpreted as \"f g x\".<br>\n*)</p>\n<p>end<br>\n```</p>\n</blockquote>",
        "id": 534452597,
        "sender_full_name": "Email Gateway",
        "timestamp": 1755168032
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nOn 14/08/2025 12:40, Lawrence Paulson wrote:</p>\n<blockquote>\n<p>Things have changed massively in the past 30 years or so, and I see that the syntax is now defined as follows:</p>\n<p>(\"_aprop\",      typ \"aprop ⇒ prop\",<br>\n       Mixfix.mixfix \"(‹open_block notation=‹prefix PROP››PROP _)\"),</p>\n<p>Maybe something can be tweaked in Pure/pure_thy.ML.</p>\n</blockquote>\n<p>Indeed, things have changed a lot in the past decades. I am responsible for <br>\nalmost everything there, and I won't accept arbitrary patches.</p>\n<p>I am presently busy elsewhere to look myself. The motivation of the example is <br>\nrather weak.</p>\n<p>Makarius</p>",
        "id": 534638506,
        "sender_full_name": "Email Gateway",
        "timestamp": 1755257755
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nOn 13/08/2025 11:50, Kevin Kappelmann wrote:</p>\n<blockquote>\n<p>I am using Isabelle2025 and want to report an unexpected behaviour of the <br>\nprinting of terms containing nested prop functions (form Isabelle/Pure).</p>\n<p>```isabelle<br>\ntheory Scratch<br>\n   imports Pure<br>\nbegin</p>\n<p>term \"PROP (f :: prop ⇒ prop) PROP ((g :: prop ⇒ prop) PROP x)\"<br>\n(*<br>\nThis prints \"PROP f PROP g PROP x\", which can be misinterpreted as \"f g x\".<br>\n*)</p>\n<p>end<br>\n```</p>\n</blockquote>\n<p>Side remark: PIDE markup in Isabelle2025 effectively highlights subexpressions <br>\nof inner syntax in input and output (although it is technically about mixfix <br>\nsyntax blocks instead of actual lambda-term expressions).</p>\n<p>So using the normal C-mouse hovering in Isabelle/jEdit (not Isabelle/VSCode), <br>\nyou will see the structure of the term.</p>\n<p>Moreover, output does not require the C modifier for mouse hovering, so casual <br>\nusers will quickly see, what they did not explicitly ask for.</p>\n<p>Here is my version of the example:</p>\n<p>theory Scratch<br>\n   imports Pure<br>\nbegin</p>\n<p>notepad<br>\nbegin<br>\n   fix f :: \"prop ⇒ prop\"<br>\n   and g :: \"prop ⇒ prop\"<br>\n   and x :: \"prop\"<br>\n   term \"PROP f PROP g PROP x\"<br>\nend</p>\n<p>end</p>\n<p>Despite the ambiguity of the syntax, the Prover IDE makes clear what the <br>\nstructure of the underlying term application really is.</p>\n<p>(The deeper reason why PROP syntax for the special \"aprop\" category has many <br>\nodd side-conditions is that this hardly ever occurs in regular applications. <br>\nAn when it does occur, there are more oddities to be expected from the logical <br>\nside.)</p>\n<p>Makarius</p>",
        "id": 534639823,
        "sender_full_name": "Email Gateway",
        "timestamp": 1755258537
    },
    {
        "content": "<p>From: Manuel Eberl &lt;<a href=\"mailto:manuel@pruvisto.org\">manuel@pruvisto.org</a>&gt;<br>\nSide note: there is some other syntax that is also a bit odd. For <br>\nexample, if you have a function applied to \"CARD('a)\", that gets <br>\nrendered as \"f CARD('a)\". So the CARD basically looks like a function, <br>\nbut it isn't. And it binds more strongly than a function application, in <br>\nsome sense.</p>\n<p>Not a huge issue or anything, but definitely confusing. But at least <br>\nnowadays, the CARD syntax is ctrl+clickable, so someone who is not <br>\nfamiliar with it can quickly find out what it means.</p>\n<p>Manuel</p>\n<p>On 15/08/2025 13:48, Makarius wrote:</p>\n<blockquote>\n<p>On 13/08/2025 11:50, Kevin Kappelmann wrote:</p>\n<blockquote>\n<p>I am using Isabelle2025 and want to report an unexpected behaviour of <br>\nthe printing of terms containing nested prop functions (form <br>\nIsabelle/Pure).</p>\n<p>```isabelle<br>\ntheory Scratch<br>\n   imports Pure<br>\nbegin</p>\n<p>term \"PROP (f :: prop ⇒ prop) PROP ((g :: prop ⇒ prop) PROP x)\"<br>\n(*<br>\nThis prints \"PROP f PROP g PROP x\", which can be misinterpreted as \"f <br>\ng x\".<br>\n*)</p>\n<p>end<br>\n```</p>\n</blockquote>\n<p>Side remark: PIDE markup in Isabelle2025 effectively highlights <br>\nsubexpressions of inner syntax in input and output (although it is <br>\ntechnically about mixfix syntax blocks instead of actual lambda-term <br>\nexpressions).</p>\n<p>So using the normal C-mouse hovering in Isabelle/jEdit (not <br>\nIsabelle/VSCode), you will see the structure of the term.</p>\n<p>Moreover, output does not require the C modifier for mouse hovering, <br>\nso casual users will quickly see, what they did not explicitly ask for.</p>\n<p>Here is my version of the example:</p>\n<p>theory Scratch<br>\n  imports Pure<br>\nbegin</p>\n<p>notepad<br>\nbegin<br>\n  fix f :: \"prop ⇒ prop\"<br>\n  and g :: \"prop ⇒ prop\"<br>\n  and x :: \"prop\"<br>\n  term \"PROP f PROP g PROP x\"<br>\nend</p>\n<p>end</p>\n<p>Despite the ambiguity of the syntax, the Prover IDE makes clear what <br>\nthe structure of the underlying term application really is.</p>\n<p>(The deeper reason why PROP syntax for the special \"aprop\" category <br>\nhas many odd side-conditions is that this hardly ever occurs in <br>\nregular applications. An when it does occur, there are more oddities <br>\nto be expected from the logical side.)</p>\n<p>Makarius</p>\n</blockquote>",
        "id": 534650410,
        "sender_full_name": "Email Gateway",
        "timestamp": 1755263524
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nOn 15/08/2025 15:09, Manuel Eberl wrote:</p>\n<blockquote>\n<p>Side note: there is some other syntax that is also a bit odd. For example, if <br>\nyou have a function applied to \"CARD('a)\", that gets rendered as \"f CARD('a)\". <br>\nSo the CARD basically looks like a function, but it isn't. And it binds more <br>\nstrongly than a function application, in some sense.</p>\n</blockquote>\n<p>This kind of \"quasi-first-order application\" stems from a time before <br>\nIsabelle/HOL, as we know it today. See all other object-logics to get a sense <br>\nof the original Isabelle framework.</p>\n<p>I have my own list of things that could be improved at some indefinite point <br>\nin the future.</p>\n<p>Now that we have so much markup, we could eventually come up with <br>\nIsabelle/Scala tools to do inner-syntax updates systematically --- no crappy \"AI\".</p>\n<p>Makarius</p>",
        "id": 534716001,
        "sender_full_name": "Email Gateway",
        "timestamp": 1755293785
    }
]