[
    {
        "content": "<p>From: Mike Stannett &lt;<a href=\"mailto:cl-isabelle-users@lists.cam.ac.uk\">cl-isabelle-users@lists.cam.ac.uk</a>&gt;<br>\nWe've been looking at the behaviour of polymorphic constants, and have<br>\nderived something that seems a bit anomalous. The following proof,<br>\ninvolving a polymorphic constant called polyval, shows that</p>\n<p>\"polyval = (0::nat) ∧ polyval = (True::bool)\"</p>\n<p>which seems to say that polyval is two different constants, of different<br>\ntypes, at the same time. Is this intended?, i.e. does the declaration of<br>\npolyval as a polymorphic constant mean \"polyval is a constant whose type is<br>\nas yet undetermined\" or \"each type is declared to contain its own constant<br>\ncalled polyval\"?</p>\n<p>fun demo :: \"nat ⇒ bool ⇒ nat\"<br>\n      where \"demo x y = (if y then x + 1 else 0)\"</p>\n<p>consts polyval :: \"'a\"</p>\n<p>abbreviation polyresult :: \"nat\"<br>\n      where \"polyresult ≡ demo (polyval :: nat) (polyval :: bool)\"</p>\n<p>lemma michael:<br>\n      assumes \"polyresult = 1\"<br>\n      shows   \"polyval = (True::bool)\"<br>\n      by (metis assms demo.elims zero_neq_one)</p>\n<p>lemma mps:<br>\n      assumes \"polyresult = 1\"<br>\n      shows   \"polyval = (0 :: nat)\"<br>\n      using assms michael by fastforce</p>\n<p>lemma unexpected:<br>\n      assumes \"polyresult = 1\"<br>\n      shows   \"polyval = (0::nat) ∧ polyval = (True::bool)\"<br>\n    proof -<br>\n      have lhs: \"polyval = (0::nat)\" using assms mps by blast<br>\n      have rhs: \"polyval = (True::bool)\" using assms michael by blast<br>\n      show ?thesis using lhs rhs by blast<br>\n    qed</p>\n<p>Regards, Michael Foster/Mike Stannett</p>",
        "id": 424268765,
        "sender_full_name": "Email Gateway",
        "timestamp": 1709307279
    },
    {
        "content": "<p>From: Peter Lammich &lt;<a href=\"mailto:lammich@in.tum.de\">lammich@in.tum.de</a>&gt;<br>\nThat's the expected behavior of Isabelle's top-level polymorphism: the <br>\npolymorphic types can be instantiated to whatever (sort-compatible) type.</p>\n<p>Note however, that this does not hold for fixed/bound variables, e.g. in</p>\n<p>\"let polyval::'a = undefined in  (polyval::nat) &lt; 5\"</p>\n<p>you get a type-error, as 'a is not equal to nat.</p>",
        "id": 424296514,
        "sender_full_name": "Email Gateway",
        "timestamp": 1709314835
    },
    {
        "content": "<p>From: Lawrence Paulson &lt;<a href=\"mailto:lp15@cam.ac.uk\">lp15@cam.ac.uk</a>&gt;<br>\nThis is how overloading works. Your ability to write x+y without knowing whether + refers to addition on natural numbers, integers, rationals, reals, complex numbers, quaternions, etc, hinges on it. </p>\n<p>And thanks to the axiomatic type class system, things are organised such that innumerable arithmetic laws are made available to all types satisfying the necessary underlying axioms. And similarly for overloading in other domains. </p>\n<p>Larry Paulson</p>",
        "id": 424412005,
        "sender_full_name": "Email Gateway",
        "timestamp": 1709386663
    }
]