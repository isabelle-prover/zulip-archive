[
    {
        "content": "<p>From: Manuel Eberl &lt;<a href=\"mailto:eberlm@in.tum.de\">eberlm@in.tum.de</a>&gt;<br>\nPrompted by a question from a student of mine, I am wondering why free<br>\nargument variables on the left-hand side of a function definition with<br>\n\"define\" have to be fixed manually with \"for\" for it to work:</p>\n<p>define a :: \"nat ⇒ nat\" where \"a x = 2 * x\"</p>\n<p>When writing it like this, the \"x\" is not fixed and therefore the<br>\n\"definition\" does not work. When you add a \"for x\", it seems to work.</p>\n<p>Is there a reason for this behaviour? Would it be possible to fix such<br>\nvariables automatically, mirroring the behaviour of e.g. the<br>\n\"definition\" command?</p>\n<p>Manuel<br>\n<a href=\"/user_uploads/14278/1FhIYO-Dbd2h-kRgG1F6xMOt/smime.p7s\">smime.p7s</a></p>",
        "id": 227255933,
        "sender_full_name": "Email Gateway",
        "timestamp": 1613995439
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nSuch \"auto fixes\" only work for toplevel specification commands, and that is<br>\nalready quite delicate and sometimes fragile.</p>\n<p>Within the Isar proof languages with its arbitrary nesting of scopes, local<br>\nparameters need to be properly fixed. Note that the above \"x\" could be a<br>\n\"constant\" from an outer scope.</p>\n<p>Further note that our ultra-flexible term syntax makes it impossible to say<br>\ne.g. that \"a\" wants to bind its argument (in contrast to ML: \"fun a x = ...\").</p>\n<p>Much more could be said about the overall language design and resulting<br>\ndecisions. In retrospect over more than 20-25 years, I would be now slightly<br>\nmore explicit in the scopes: implicit variable declarations are often<br>\nconfusing, both for the system and the human using it. (The more recent 'for'<br>\ncontext for various language elements make things more robust and flexible.)</p>\n<p>Makarius</p>",
        "id": 227258097,
        "sender_full_name": "Email Gateway",
        "timestamp": 1613996614
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nSuch \"auto fixes\" only work for toplevel specification commands, and that is<br>\nalready quite delicate and sometimes fragile.</p>\n<p>Within the Isar proof languages with its arbitrary nesting of scopes, local<br>\nparameters need to be properly fixed. Note that the above \"x\" could be a<br>\n\"constant\" from an outer scope.</p>\n<p>Further note that our ultra-flexible term syntax makes it impossible to say<br>\ne.g. that \"a\" wants to bind its argument (in contrast to ML: \"fun a x = ...\").</p>\n<p>Much more could be said about the overall language design and resulting<br>\ndecisions. In retrospect over more than 20-25 years, I would be now slightly<br>\nmore explicit in the scopes: implicit variable declarations are often<br>\nconfusing, both for the system and the human using it. (The more recent 'for'<br>\ncontext for various language elements make things more robust and flexible.)</p>\n<p>Makarius</p>",
        "id": 227258098,
        "sender_full_name": "Email Gateway",
        "timestamp": 1613996614
    },
    {
        "content": "<p>From: Jakub Kądziołka &lt;<a href=\"mailto:kuba@kadziolka.net\">kuba@kadziolka.net</a>&gt;<br>\nI agree that changing the behavior could be infeasible. However, perhaps<br>\nit would be enough to emit a warning message when one uses 'define'<br>\nwithout 'for'?</p>\n<p>Regards,<br>\nJakub Kądziołka</p>",
        "id": 227258533,
        "sender_full_name": "Email Gateway",
        "timestamp": 1613996844
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nWarnings are generally bad design: the system needs to be strict about its<br>\nsyntax and emit proper errors.</p>\n<p>Within the Prover IDE, such errors could contain completion information to<br>\nhelp the user get the input right, but that is quite some extra work and not<br>\nalways done.</p>\n<p>Makarius</p>",
        "id": 227258727,
        "sender_full_name": "Email Gateway",
        "timestamp": 1613996959
    },
    {
        "content": "<p>From: Manuel Eberl &lt;<a href=\"mailto:eberlm@in.tum.de\">eberlm@in.tum.de</a>&gt;<br>\nIs there any context in which <code>define f where \"f x y = …\"</code> makes any<br>\nsense without a \"for x y\" afterwards?</p>\n<p>Manuel<br>\n<a href=\"/user_uploads/14278/09vyZDnjPtwjpbt2BvfXXe_M/smime.p7s\">smime.p7s</a></p>",
        "id": 227265666,
        "sender_full_name": "Email Gateway",
        "timestamp": 1614000592
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nE.g. when x y are absent.</p>\n<p>(Are you proposing special cases to complicate things?)</p>\n<p>Makarius</p>",
        "id": 227273771,
        "sender_full_name": "Email Gateway",
        "timestamp": 1614004003
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nMaybe part of the confusion is from mistaking Isabelle/HOL as a functional<br>\nprogramming language, where definitions have a special syntactic status. In<br>\ncontrast Isabelle definitions are logical specifications based on equations.<br>\n(Definitions like 'inductive' are again more general in this respect.)</p>\n<p>Here is a fun-fact that may help to see the difference more clearly. The<br>\nsuccessor function defined in ML, Haskell, Scala:</p>\n<p>fun a a = a + 1;</p>\n<p>a :: Int -&gt; Int<br>\n  a a = a + 1</p>\n<p>def a(a: Int): Int = a + 1</p>\n<p>The lambda-term language of the Isabelle logical framework works quite<br>\ndifferently, it cannot (and should) not imitate that.</p>\n<p>Makarius</p>",
        "id": 227275805,
        "sender_full_name": "Email Gateway",
        "timestamp": 1614004753
    }
]