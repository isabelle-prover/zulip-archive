[
    {
        "content": "<p>From: Martin Raszyk &lt;<a href=\"mailto:m.raszyk@gmail.com\">m.raszyk@gmail.com</a>&gt;<br>\nDear Tobias,</p>\n<p>thank you very much for pointing me towards the existing theory<br>\nSet2_Join_RBT. Unfortunately, I could not use it directly, because its<br>\nRBTs use the tree datatype from the Tree theory in the HOL-Library<br>\nwhile the RBTs from Containers use the rbt datatype from the RBT_Impl<br>\ntheory in the HOL-Library. Since registering a new set implementation<br>\nin Containers would be tedious and the algorithm from the<br>\nSet2_Join_RBT theory is only faster in particular cases (for two sets<br>\nthat are not of \"roughly\" equal size and none of which is small), I've<br>\ndecided to port the definitions and proofs from the existing theory<br>\nSet2_Join_RBT into a new theory called RBT_set_opt that can be found<br>\nin the GitHub repository [1].</p>\n<p>As you can easily check using the code exported with the old and<br>\noptimized code equations, the performance of my counter-example did<br>\nimprove significantly. I've also added checks for the cases of one RBT<br>\nbeing \"small\", but the case of both RBTs being of \"roughly\" equal size<br>\nis still pending. I believe that storing the black height and/or the<br>\nsize of an RBT in its nodes could help to guide the decision of which<br>\nalgorithm to use. Yet it is not clear how to set the thresholds for an<br>\nRBT being \"small\" or two RBTs being of \"roughly\" equal size. Here an<br>\nempirical evaluation of the performance seems inevitable to me.</p>\n<p>Now I would be interested in your opinion again on how to proceed with<br>\nthe integration of my theory RBT_set_opt into Containers. In<br>\nparticular, with regard to storing the black height and/or the size of<br>\nan RBT in its nodes and setting the thresholds.</p>\n<p>Best regards,<br>\nMartin</p>\n<p>[1] <a href=\"https://github.com/mraszyk/RBT_height\">https://github.com/mraszyk/RBT_height</a></p>",
        "id": 206727467,
        "sender_full_name": "Email Gateway",
        "timestamp": 1597254649
    },
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\nDear Martin,</p>\n<p>The theories in Data_Structure have more of a textbook quality and thus I am not <br>\nsuprised you needed to make a copy.</p>\n<p>Concerning the integration with Containers - what do you mean by \"Containers\"? <br>\nPeter Lammich's Collections Framework? In which case you have to talk to him. If <br>\nyou meant \"Data_Structures\", I don't think it would be the right place, but we <br>\ncan discuss that privately.</p>\n<p>Tobias<br>\n<a href=\"/user_uploads/14278/9Yz1oOpB7-g2cW-HvIVfgaS9/smime.p7s\">smime.p7s</a></p>",
        "id": 206803024,
        "sender_full_name": "Email Gateway",
        "timestamp": 1597317450
    }
]