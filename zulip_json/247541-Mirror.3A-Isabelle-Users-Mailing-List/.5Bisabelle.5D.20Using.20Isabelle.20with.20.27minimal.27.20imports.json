[
    {
        "content": "<p>From: David Fuenmayor &lt;<a href=\"mailto:davfuenmayor@gmail.com\">davfuenmayor@gmail.com</a>&gt;<br>\nI would like to use Isabelle with the 'minimal' possible library imports<br>\n(and therefore not importing Main).<br>\nBy 'minimal' I mean this: using Isabelle as a proof assistant for simple<br>\ntype theory (+ choice, prefix polymorphism, etc.) in such a way that<br>\nNitpick and the integration with external ATPs (via Sledgehammer + proof<br>\nreconstruction with metis, smt &amp; co.) still work, and nothing more.</p>\n<p>One motivation is (i) being able to invoke Sledgehammer with as few facts<br>\nas possible, without \"polluting\" invocations with facts from the libraries<br>\n(for which I have no use at present). Other motivation (ii) is improving<br>\nperformance in general (also for Nitpick), e.g. when using Isabelle in<br>\nheadless mode.</p>\n<p>I know that for (i) one can manually select which facts are passed to<br>\nSledgehammer (though I wouldn't like to always think about this). As for<br>\n(ii) I would like to know whether there are (or not) any differences.</p>\n<p>Thanks for the help (and happy Christmas time!)</p>\n<p>David</p>",
        "id": 265809868,
        "sender_full_name": "Email Gateway",
        "timestamp": 1640182809
    },
    {
        "content": "<p>From: Fabian Huch &lt;<a href=\"mailto:huch@in.tum.de\">huch@in.tum.de</a>&gt;<br>\nOn 12/22/21 15:19, David Fuenmayor wrote:</p>\n<blockquote>\n<p>I would like to use Isabelle with the 'minimal' possible library <br>\nimports (and therefore not importing Main).<br>\nBy 'minimal' I mean this: using Isabelle as a proof assistant for <br>\nsimple type theory (+ choice, prefix polymorphism, etc.) in such a way <br>\nthat Nitpick and the integration with external ATPs (via Sledgehammer <br>\n+ proof reconstruction with metis, smt &amp; co.) still work, and nothing <br>\nmore.<br>\nThe minimal import of Isabelle is Pure. However, sledgehammer and <br>\nnitpick are implemented in HOL. You can import just those tools and <br>\ntheir dependencies; you don't need to use Main. But if you want to have <br>\nthose tools in another object logic, you'll have to implement them there.</p>\n</blockquote>\n<blockquote>\n<p>Other motivation (ii) is improving performance in general (also for <br>\nNitpick), e.g. when using Isabelle in headless mode.</p>\n</blockquote>\n<p>For that, build a minimal session which contains just the (closure of) <br>\nimports of those tools.</p>\n<blockquote>\n<p>One motivation is (i) being able to invoke Sledgehammer with as few <br>\nfacts as possible, without \"polluting\" invocations with facts from the <br>\nlibraries (for which I have no use at present).<br>\nI know that for (i) one can manually select which facts are passed to <br>\nSledgehammer (though I wouldn't like to always think about this).</p>\n</blockquote>\n<p>You can easily achieve this by writing a sledgehammer' command which <br>\nexcludes the facts that you don't want.</p>\n<p>Fabian</p>",
        "id": 265895279,
        "sender_full_name": "Email Gateway",
        "timestamp": 1640249434
    },
    {
        "content": "<p>From: Lawrence Paulson &lt;<a href=\"mailto:lp15@cam.ac.uk\">lp15@cam.ac.uk</a>&gt;<br>\nI would be surprised if this minimal system delivered many benefits. On the other hand, it would be interesting to find out. I hope you will report back with some measurements in a couple of months.</p>\n<p>Larry</p>",
        "id": 265904955,
        "sender_full_name": "Email Gateway",
        "timestamp": 1640256518
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nOn 22/12/2021 15:19, David Fuenmayor wrote:</p>\n<blockquote>\n<p>I would like to use Isabelle with the 'minimal' possible library imports (and<br>\ntherefore not importing Main).</p>\n</blockquote>\n<p>This is not officially supported. The canonical entry points for Isabelle<br>\napplications are:</p>\n<p>* Pure: minimal higher-order logic as a logical framework for object-logics,<br>\nor complete different applications based on ML and lambda-calculus.</p>\n<p>* Main: full higher-order logic with \"batteries included\", i.e. many<br>\nfundamental concepts expected from logic and functional programming (this is<br>\nnot yet \"library\").</p>\n<p>* Complex_Main: add-ons to Main from classic mathematics (rat, real, complex).</p>\n<p>Anything between Pure -- Main -- Complex_Main is an implementation detail, and<br>\nto be considered \"private\" (as in a Java or Scala library).</p>\n<p>Only on top of HOL Main and Complex_Main we can speak of genuine libraries:<br>\nhere you import the subgraphs that you require.</p>\n<p>Sometimes such libraries are wrapped-up in a similar manner as Main, e.g.<br>\nHOL-Analysis.Analysis: It would be better if Isabelle would support an<br>\nofficial \"private\" marker to theories and libraries would use that.</p>\n<blockquote>\n<p>One motivation is (i) being able to invoke Sledgehammer with as few facts as<br>\npossible, without \"polluting\" invocations with facts from the libraries (for<br>\nwhich I have no use at present). Other motivation (ii) is improving<br>\nperformance in general (also for Nitpick), e.g. when using Isabelle in<br>\nheadless mode.</p>\n</blockquote>\n<p>Isabelle tools are normally constructed to work in large theory contexts,<br>\nbecause this is the normal situation. It is unlikely that a deconstruction of<br>\nworks substantially better, just by stripping away things.</p>\n<p>Anyway, what exactly do you mean by \"performance ... in headless mode\"? What<br>\nis the hardware behind that? Something like Raspberry Pi or a regular cloud<br>\nnode (e.g. 2 CPU cores + 8 GB should be just fine for small applications)?</p>\n<blockquote>\n<p>I know that for (i) one can manually select which facts are passed to<br>\nSledgehammer (though I wouldn't like to always think about this). As for (ii)<br>\nI would like to know whether there are (or not) any differences.</p>\n</blockquote>\n<p>Fact selection is a special topic for Sledgehammer. The makers of that great<br>\ntool can tell you what are potential approaches to improve on that.</p>\n<p>Makarius</p>",
        "id": 265906496,
        "sender_full_name": "Email Gateway",
        "timestamp": 1640257560
    },
    {
        "content": "<p>From: David Fuenmayor &lt;<a href=\"mailto:davfuenmayor@gmail.com\">davfuenmayor@gmail.com</a>&gt;<br>\nThanks for the answers. I understand that there is little that can be done<br>\nfor my case.</p>\n<p>I found out that by importing only the theory \"Nitpick\" I can get to run<br>\nall of my current experiments (a formalization of basic topology).<br>\nIn fact, I noticed that I don't even need to import theory \"Sledgehammer\",<br>\nwhich is a direct import of theory \"List\", since the latter ends up being a<br>\ntransitive dependency of \"Nitpick\".<br>\nI must admit that I don't always understand the reasons behind these<br>\ndependencies. In any case, it seems that I just cannot use nitpick without<br>\nloading a lot of HOL libraries (sets, lists, numbers, etc) and<br>\ninfrastructure (for codegen, lifting, etc,) for which I don't have any use<br>\nin my work.</p>\n<p>@Fabian:<br>\nYou can easily achieve this by writing a sledgehammer' command which<br>\nexcludes the facts that you don't want.</p>\n<p>Right. I think I will now manually put my facts in \"named_theorems\" and<br>\npass exclusively the latter to sledgehammer.</p>\n<p>@Makarius<br>\nAnyway, what exactly do you mean by \"performance ... in headless mode\"? What<br>\nis the hardware behind that? Something like Raspberry Pi or a regular cloud<br>\nnode (e.g. 2 CPU cores + 8 GB should be just fine for small applications)?</p>\n<p>I am working with container-based, pay-as-you-go (aka. \"serverless\")<br>\ncomputing infrastructure. For instance, in AWS Fargate you pay per used<br>\nvCPU and GB RAM (<a href=\"https://aws.amazon.com/fargate/pricing/\">https://aws.amazon.com/fargate/pricing/</a>), also in AWS<br>\nLambda computing nodes start already with 128Mb RAM (<br>\n<a href=\"https://aws.amazon.com/lambda/pricing/\">https://aws.amazon.com/lambda/pricing/</a>). Other providers (azure, google.<br>\netc.) have similar offerings. Cloud computing is forcing software engineers<br>\nto become stingy again!</p>\n<p>Fact selection is a special topic for Sledgehammer. The makers of that great<br>\ntool can tell you what are potential approaches to improve on that.</p>\n<p>I have to admit that mesh, mepo &amp; co. do a great job! So I have been able<br>\nto mindlessly hammer my way through so far :)</p>",
        "id": 266011127,
        "sender_full_name": "Email Gateway",
        "timestamp": 1640362296
    }
]