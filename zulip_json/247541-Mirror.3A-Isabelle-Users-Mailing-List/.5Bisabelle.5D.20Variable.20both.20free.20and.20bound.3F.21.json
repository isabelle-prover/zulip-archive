[
    {
        "content": "<p>From: Jakub Kądziołka &lt;<a href=\"mailto:kuba@kadziolka.net\">kuba@kadziolka.net</a>&gt;<br>\nHello,</p>\n<p>consider the following theory:</p>\n<p>theory Scratch<br>\n  imports Main<br>\nbegin</p>\n<p>fun inc :: \"nat ⇒ nat\" where<br>\n  \"inc x = Suc x\"</p>\n<p>definition inc' :: \"nat ⇒ nat\" where<br>\n  \"inc' x = Suc x\"</p>\n<p>end</p>\n<p>When you hover over either of the x's in fun inc (with Ctrl held), the<br>\nfollowing tooltip appears:</p>\n<p>free variable<br>\n  bound variable<br>\n  :: nat</p>\n<p>Similarily, the tooltip for the x's in definition inc' is:</p>\n<p>free variable<br>\n  :: nat<br>\n  bound variable</p>\n<p>(these observations are equally valid for both Isabelle2020 and<br>\nIsabelle2021-RC1)</p>\n<p>I find this quite curious, as 'free' and 'bound' seem to be polar<br>\nopposites...</p>\n<p>Kind regards,<br>\nJakub Kądziołka</p>",
        "id": 222134991,
        "sender_full_name": "Email Gateway",
        "timestamp": 1610145285
    },
    {
        "content": "<p>From: Buday Gergely István via Cl-isabelle-users &lt;<a href=\"mailto:cl-isabelle-users@lists.cam.ac.uk\">cl-isabelle-users@lists.cam.ac.uk</a>&gt;<br>\nThe set of free and bound variables are not necessarily distinct.</p>\n<p>See this example:</p>\n<p>(\\x.x) (\\y.x)</p>\n<p>Here x is bound in \\x.x because of \\x but it is also free in the \\y.x part.</p>\n<ul>\n<li>Gergely</li>\n</ul>\n<p>Idézet (Jakub Kądziołka &lt;<a href=\"mailto:kuba@kadziolka.net\">kuba@kadziolka.net</a>&gt;):</p>",
        "id": 222229820,
        "sender_full_name": "Email Gateway",
        "timestamp": 1610296681
    },
    {
        "content": "<p>From: Jakub Kądziołka &lt;<a href=\"mailto:kuba@kadziolka.net\">kuba@kadziolka.net</a>&gt;<br>\nI am aware. However, in my example, Isabelle claims that a particular<br>\nuse of the name x is both free and bound at the same time.</p>\n<p>Regards,<br>\nJakub Kądziołka</p>",
        "id": 222229910,
        "sender_full_name": "Email Gateway",
        "timestamp": 1610296794
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nOn 08/01/2021 23:24, Jakub Kądziołka wrote:</p>\n<blockquote>\n<p>fun inc :: \"nat ⇒ nat\" where<br>\n  \"inc x = Suc x\"</p>\n<p>When you hover over either of the x's in fun inc (with Ctrl held), the<br>\nfollowing tooltip appears:</p>\n<p>free variable<br>\n  bound variable<br>\n  :: nat</p>\n</blockquote>\n<p>As a general principle, the Prover IDE reveals aspects of the formal status of<br>\ntext processed by the prover. This processing often has several stages, and a<br>\npiece of text may get cumulative markup as a trace of the internal stages.</p>\n<p>There is considerable complexity in the internals as well as in the external<br>\nrepresentation of terms. Over the past decade, I have tried hard to expose<br>\nthat in the IDE such that it makes somehow sense.</p>\n<p>In the concrete situation above, the body of the function definition has<br>\nimplicitly bound frees: x is fresh in the scope and later closed like this:</p>\n<p>fun inc :: \"nat ⇒ nat\"<br>\n  where \"⋀x. inc x = Suc x\"</p>\n<p>There are other situations where seemingly free variables are treated like<br>\nimplicit bounds, e.g. in simplifier traces.</p>\n<blockquote>\n<p>I find this quite curious, as 'free' and 'bound' seem to be polar<br>\nopposites...</p>\n</blockquote>\n<p>Just from the wording of it, in mathematics a set can be both \"open\" and<br>\n\"closed\" (in the sense of topology).</p>\n<p>In formal logic, the words \"free\" vs. \"bound\" are traditional, but to some<br>\nextent also misleading: \"bound\" actually means the binder is within the term,<br>\nor somehow tightly attached to it; \"free\" means the binder is further outside<br>\nor implicit.</p>\n<p>Further note that Isabelle/Isar also has light-brown Skolem constants: these<br>\nare local variables of a proof context --- technically \"free\" but morally \"bound\".</p>\n<p>Makarius</p>",
        "id": 222233875,
        "sender_full_name": "Email Gateway",
        "timestamp": 1610302878
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nHere is a formally checked version of the example:</p>\n<p>theory Scratch<br>\n  imports Main<br>\nbegin</p>\n<p>term ‹(λx. x, λy. x)›</p>\n<p>end</p>\n<p>C-hovering in the Prover IDE reveals that the double use of a name \"x\" is<br>\nmerely superficial: the variables have different scopes and different<br>\nmost-general types. These are two independent variables.</p>\n<p>Further details can be inspected in Isabelle/ML: ML ‹val t = @{term ‹(λx. x,<br>\nλy. x)›}›</p>\n<p>It shows that bound \"x\" is actually just a nameley de-Bruijn index, together<br>\nwith a comment-field for parsing and printing.</p>\n<p>Makarius</p>",
        "id": 222234481,
        "sender_full_name": "Email Gateway",
        "timestamp": 1610303688
    }
]