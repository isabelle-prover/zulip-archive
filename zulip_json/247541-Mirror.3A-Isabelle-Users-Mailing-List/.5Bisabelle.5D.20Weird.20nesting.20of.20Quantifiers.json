[
    {
        "content": "<p>From: Peter Lammich &lt;<a href=\"mailto:lammich@in.tum.de\">lammich@in.tum.de</a>&gt;<br>\nHi List,</p>\n<p>in my current formalization, I frequently end up with goals that I feel<br>\nshould be solvable by auto or blast, but they get stuck due to<br>\ncontaining a precondition similar to this:</p>\n<p>(∀a. (∃x y. a = f x y ∧ P x y) ⟶ Q a) </p>\n<p>The exact precondition can vary in the number of universal and<br>\nexistential quantified variables, and the position and number of the<br>\ndetermining a = ... conjuncts, e.g.</p>\n<p>(∀a b. (∃x y. a = f x y ∧ P x y ∧ b=g x) ⟶ Q a b)</p>\n<p>Anyway, the above preconditions are, obviously, equal to the following<br>\nsimpler ones:</p>\n<p>\"∀x y. P x y ⟶ Q (f x y)\"<br>\n\"∀x y. P x y ⟶ Q (f x y) (g x)\"</p>\n<p>currently, I have to manually prove these equivalences, for every<br>\ninstance of quantified variables, etc, and then can solve the goal<br>\neasily by rewriting and auto.</p>\n<p>Is there any way, e.g. a simproc or so, to automate this process, or is<br>\nmy only solution to bloat up the otherwise fully automatic proofs by<br>\nthose weird auxiliary lemmas (of which I could, of course, prove<br>\ninstances for the most common cases globally and add them to the<br>\nsimpset)</p>",
        "id": 226310459,
        "sender_full_name": "Email Gateway",
        "timestamp": 1613317528
    },
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\nHi Peter,</p>\n<p>I don't think there is any automation for this. I automated \"(∀x. x = t --&gt; P x) <br>\n= P t\" and variations on this, but without nested quantifiers. I am sure the <br>\nlatter could be added and it would be worth it, but somebody would need to do <br>\nit. I am happy to provide pointers...</p>\n<p>Tobias<br>\n<a href=\"/user_uploads/14278/ihUuE82sXJpAgFWo481MUkAV/smime.p7s\">smime.p7s</a></p>",
        "id": 226316944,
        "sender_full_name": "Email Gateway",
        "timestamp": 1613325536
    },
    {
        "content": "<p>From: Thomas Sewell &lt;<a href=\"mailto:tals4@cam.ac.uk\">tals4@cam.ac.uk</a>&gt;<br>\nYou can pull the existentials up so that there are only foralls using<br>\nthe symmetric versions of the all_simps rewrites.</p>\n<p>Try out<br>\napply (simp only: all_simps[symmetric] cong: imp_cong)</p>\n<p>I'm not sure how consistently that will work, but that followed by<br>\nregular simplification got me the expected result in all the simple<br>\ntest cases I typed.</p>\n<p>BTW, I have a dim recollection that I used to see goals like this more<br>\noften. The \"a = ..\" and \"b = ..\" looks like it came from \"(a, b)\" being<br>\nin the image of some projection, maybe. I think I managed to get more<br>\nimage/map type constructions to simplify a bit before quantifiers <br>\nappeared.</p>\n<p>Best regards,<br>\n     Thomas.</p>",
        "id": 226365677,
        "sender_full_name": "Email Gateway",
        "timestamp": 1613384215
    },
    {
        "content": "<p>From: Lawrence Paulson &lt;<a href=\"mailto:lp15@cam.ac.uk\">lp15@cam.ac.uk</a>&gt;<br>\nTry this:</p>\n<p>apply (simp flip: ex_simps all_simps)</p>\n<p>Your example is a rare case in which prenexing is actually a good idea.</p>\n<p>Larry</p>",
        "id": 226367558,
        "sender_full_name": "Email Gateway",
        "timestamp": 1613385386
    },
    {
        "content": "<p>From: Peter Lammich &lt;<a href=\"mailto:lammich@in.tum.de\">lammich@in.tum.de</a>&gt;<br>\nThanks Larry and Thomas, that works a treat for my examples!</p>",
        "id": 226506906,
        "sender_full_name": "Email Gateway",
        "timestamp": 1613478438
    }
]