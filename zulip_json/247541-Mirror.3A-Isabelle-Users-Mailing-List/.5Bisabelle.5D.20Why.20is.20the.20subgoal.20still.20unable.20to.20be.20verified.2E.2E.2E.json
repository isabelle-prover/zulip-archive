[
    {
        "content": "<p>From: \"\\\"DongZe Su\\\"\" &lt;<a href=\"mailto:cl-isabelle-users@lists.cam.ac.uk\">cl-isabelle-users@lists.cam.ac.uk</a>&gt;<br>\nWe now have lemma,</p>\n<p>lemma can_not_eq_self[simp]:\"∀(k::word32). y * k &lt; y ⟹ 0 &lt; y * k ⟹ x = y * k ⟹<br>\nFalse\"<br>\nproof (induct k)<br>\n  case zero<br>\n  then show ?case by auto<br>\nnext<br>\n  case (suc k)<br>\n  then show ?case<br>\n    by (metis mult.right_neutral order_less_irrefl)<br>\nqed</p>\n<p>and I wish to prove lemma:</p>\n<p>lemma \"<br>\n(x::word32) &lt; y∧<br>\nx &gt; 0 ⟶<br>\n¬(y dvd x)<br>\n\"<br>\n  apply(auto)<br>\n  apply(simp add: dvd_def)<br>\n  apply(auto)</p>\n<p>The subgoal is<br>\nproof (prove)<br>\ngoal (1 subgoal):</p>\n<ol>\n<li>⋀k. y * k &lt; y ⟹ 0 &lt; y * k ⟹ x = y * k ⟹ False</li>\n</ol>\n<p>why can’t it be verified using auto?</p>",
        "id": 430241274,
        "sender_full_name": "Email Gateway",
        "timestamp": 1711711125
    },
    {
        "content": "<p>From: Lawrence Paulson &lt;<a href=\"mailto:lp15@cam.ac.uk\">lp15@cam.ac.uk</a>&gt;<br>\nHere you declare can_not_eq_self as [simp], but it does not have the form of a simplification rule: in particular, it depends on conditions such as y*k&lt;y, when those variables are not mentioned in the conclusion (which is just False). So [simp] has no useful effect. Arguably, a warning should be given in such cases. </p>\n<p>But anyway, get rid of [simp] and try</p>\n<p>using can_not_eq_self<br>\n    apply auto</p>\n<p>or instead simply try sledgehammer.</p>\n<p>Larry Paulson</p>",
        "id": 430468025,
        "sender_full_name": "Email Gateway",
        "timestamp": 1711882451
    },
    {
        "content": "<p>From: Lawrence Paulson &lt;<a href=\"mailto:lp15@cam.ac.uk\">lp15@cam.ac.uk</a>&gt;<br>\nYour problem is here:</p>\n<blockquote>\n<p>lemma can_not_eq_self:<br>\n\"∀(k::word32). y * k &lt; y ⟹ 0 &lt; y * k ⟹ x = y * k ⟹ False\"</p>\n</blockquote>\n<p>The scope of ∀ is local to ∀(k::word32). y * k &lt; y, so in particular there’s no connection between the k in that formula and the other instances of k.</p>\n<p>It works if you write your lemma like this:</p>\n<p>lemma can_not_eq_self:<br>\n\"⋀(k::word32). y * k &lt; y ⟹ 0 &lt; y * k ⟹ x = y * k ⟹ False\"</p>\n<p>Or equivalently and more clearly,</p>\n<p>lemma can_not_eq_self:<br>\n  fixes k::word32<br>\n  assumes \"y * k &lt; y\" \"0 &lt; y * k\" \"x = y * k\"<br>\n  shows \"False\"</p>",
        "id": 430573022,
        "sender_full_name": "Email Gateway",
        "timestamp": 1711966637
    }
]