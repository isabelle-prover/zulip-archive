[
    {
        "content": "<p>From: \"\\\"Mulder, Ike\\\"\" &lt;<a href=\"mailto:cl-isabelle-users@lists.cam.ac.uk\">cl-isabelle-users@lists.cam.ac.uk</a>&gt;<br>\nHello,</p>\n<p>When using Word_Lib.More_Word (or anything that imports it), proving inequalities between concrete words can take an unacceptable amount of time. Consider</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">theory</span><span class=\"w\"> </span><span class=\"n\">Scratch</span>\n<span class=\"w\">  </span><span class=\"kp\">imports</span>\n<span class=\"w\">    </span><span class=\"n\">Word_Lib.Word_Lib_Sumo</span>\n<span class=\"k\">begin</span>\n\n<span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">slow_ineq</span><span class=\"o\">:</span>\n<span class=\"w\">  </span><span class=\"kp\">shows</span><span class=\"w\"> </span><span class=\"s\">‹(0xC00000 :: 64 word) ≠ 0xC10000›</span>\n<span class=\"w\">  </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">simp</span>\n<span class=\"k\">end</span>\n</code></pre></div>\n<p>The cause seems to be an unfortunate interaction between the <code>unsigned_norm</code> simprocs, and the simplification rule <code>word_eq_numeral_iff_iszero</code> from the HOL.Word standard library. This simplification rule is basically <code>(a = b) &lt;-&gt; (a – b = 0)</code>. When this subtraction is further simplified, the word normalization procedure kicks in n times for words of length n, causing the slowdown.</p>\n<p>We have used two possible ‘fixes’ in our proofs so far:</p>\n<p>*   Disable the simprocs with <code>notes [[simproc del: unsigned_norm unsigned_norm_neg0 unsigned_norm_neg1]]</code><br>\n  *   Swap out <code> word_eq_numeral_iff_iszero</code> for <code>word_unat_eq_iff [where ?v=‹numeral _› and ?w=‹numeral _›]</code>. This avoids the subtraction – it normalizes the words, then compares them as naturals.</p>\n<p>For 64-bit words, these options seem to be about 34x faster and 13x faster than the default on my machine, respectively. The latter option keeps the normalization procedure around, so I think that one has the least impact on proofs, besides a possible speedup.</p>\n<p>I have also tried to modify the simpset used by <code>unsigned_word</code> to a completely determined one. This speeds up the normalization procedure itself about 3x, but is still very slow in conjunction with <code> word_eq_numeral_iff_iszero</code>. For reference, I ended up with something like <code>val ss = simpset_of (put_simpset HOL_ss @{context} addsimps @{thms bintrunc_numeral len_bit0 len_num1 One_nat_def mult_Suc_right mult_0_right add.right_neutral mult_num_simps numeral_times_numeral pred_numeral_simps bin_last_numeral_simps of_bool_eq Num.BitM.simps numeral_div_numeral divmod_cancel divmod_trivial prod.case prod.sel div_0 take_bit_0 times_int_code mult_1_right add.left_neutral one_plus_numeral add_num_simps minus_numeral_div_numeral minus_one_div_numeral Parity.adjust_div_eq odd_neg_numeral1 numeral_One one_neq_zero bintrunc_Suc_numeral of_int_numeral})</code>.</p>\n<p>If anyone else knows of a better solution, we’d be interested to hear it. A downside to both of our fixes is that I don’t think they propagate across theory files, since ‘simp del’ does not persist.</p>\n<p>Best, Ike</p>",
        "id": 511714590,
        "sender_full_name": "Email Gateway",
        "timestamp": 1744397362
    },
    {
        "content": "<p>From: Florian Haftmann &lt;<a href=\"mailto:florian.haftmann@cit.tum.de\">florian.haftmann@cit.tum.de</a>&gt;<br>\nHi Ike,</p>\n<p>thanks for figuring that out.</p>\n<p>As far I can see, the best solution is to disregard <br>\nword_eq_numeral_iff_iszero [simp] and calculate equality on word values <br>\nin the same manner as &lt;= and &lt; is calculated by default in HOL-Library.Word.</p>\n<p>@list Any objections?</p>\n<blockquote>\n<p>* Swap out <code> word_eq_numeral_iff_iszero</code> for <code>word_unat_eq_iff[where ?\n    v=‹numeral _› and ?w=‹numeral _›]</code>. This avoids the subtraction – it<br>\n    normalizes the words, then compares them as naturals.</p>\n</blockquote>\n<blockquote>\n<p>I have also tried to modify the simpset used by <code>unsigned_word</code> to a <br>\ncompletely determined one. This speeds up the normalization procedure <br>\nitself about 3x, but is still very slow in conjunction with <code> \nword_eq_numeral_iff_iszero</code>. For reference, I ended up with something <br>\nlike <code>val ss = simpset_of (put_simpset HOL_ss @{context} addsimps @{thms \nbintrunc_numeral len_bit0 len_num1 One_nat_def mult_Suc_right \nmult_0_right add.right_neutral mult_num_simps numeral_times_numeral \npred_numeral_simps bin_last_numeral_simps of_bool_eq Num.BitM.simps \nnumeral_div_numeral divmod_cancel divmod_trivial prod.case prod.sel \ndiv_0 take_bit_0 times_int_code mult_1_right add.left_neutral \none_plus_numeral add_num_simps minus_numeral_div_numeral \nminus_one_div_numeral Parity.adjust_div_eq odd_neg_numeral1 numeral_One \none_neq_zero bintrunc_Suc_numeral of_int_numeral})</code>.</p>\n</blockquote>\n<p>By »completely determined« you mean static, with no effect of later simp <br>\ndeclarations? This would indeed by interesting to be included by default.</p>\n<p>@list Opinions?</p>\n<p>Cheers,<br>\n    Florian</p>\n<p><a href=\"/user_uploads/14278/kaAwjx8Dutae1LvP6rVw9bNQ/OpenPGP_0xA707172232CFA4E9.asc\">OpenPGP_0xA707172232CFA4E9.asc</a><br>\n<a href=\"/user_uploads/14278/YlUH-bn-wtB7dVlnqKF-NQkE/OpenPGP_signature.asc\">OpenPGP_signature.asc</a></p>",
        "id": 512251742,
        "sender_full_name": "Email Gateway",
        "timestamp": 1744703660
    },
    {
        "content": "<p>From: Gerwin Klein &lt;<a href=\"mailto:cl-isabelle-users@lists.cam.ac.uk\">cl-isabelle-users@lists.cam.ac.uk</a>&gt;</p>\n<blockquote>\n<p>On 15 Apr 2025, at 17:53, Florian Haftmann &lt;<a href=\"mailto:florian.haftmann@cit.tum.de\">florian.haftmann@cit.tum.de</a>&gt; wrote:</p>\n<p>As far I can see, the best solution is to disregard word_eq_numeral_iff_iszero [simp] and calculate equality on word values in the same manner as &lt;= and &lt; is calculated by default in HOL-Library.Word.</p>\n<p>@list Any objections?</p>\n</blockquote>\n<p>Yes, I think that makes sense. Generally word_eq_numeral_iff_iszero as [simp] has popped up as inconvenient a few times for us as well. </p>\n<blockquote>\n<blockquote>\n<ul>\n<li>Swap out <code> word_eq_numeral_iff_iszero</code> for <code>word_unat_eq_iff[where ?\n   v=‹numeral _› and ?w=‹numeral _›]</code>. This avoids the subtraction – it<br>\n   normalizes the words, then compares them as naturals.</li>\n</ul>\n</blockquote>\n<blockquote>\n<p>I have also tried to modify the simpset used by <code>unsigned_word</code> to a completely determined one. This speeds up the normalization procedure itself about 3x, but is still very slow in conjunction with <code> word_eq_numeral_iff_iszero</code>. For reference, I ended up with something like <code>val ss = simpset_of (put_simpset HOL_ss @{context} addsimps @{thms bintrunc_numeral len_bit0 len_num1 One_nat_def mult_Suc_right mult_0_right add.right_neutral mult_num_simps numeral_times_numeral pred_numeral_simps bin_last_numeral_simps of_bool_eq Num.BitM.simps numeral_div_numeral divmod_cancel divmod_trivial prod.case prod.sel div_0 take_bit_0 times_int_code mult_1_right add.left_neutral one_plus_numeral add_num_simps minus_numeral_div_numeral minus_one_div_numeral Parity.adjust_div_eq odd_neg_numeral1 numeral_One one_neq_zero bintrunc_Suc_numeral of_int_numeral})</code>.</p>\n</blockquote>\n<p>By »completely determined« you mean static, with no effect of later simp declarations? This would indeed by interesting to be included by default.</p>\n</blockquote>\n<p>Inside the unsigned_word procedure? Yes, having the simp set explicit there as above sounds like a good idea in any case — at least if there are good enough test cases to spot it breaking down if something changes in the background implementation (which hopefully is rare these days). It might even be useful to give this list of lemmas a name outside the procedure (just with lemmas ..  = ..),</p>\n<p>Cheers,<br>\nGerwin</p>",
        "id": 512266222,
        "sender_full_name": "Email Gateway",
        "timestamp": 1744707931
    }
]