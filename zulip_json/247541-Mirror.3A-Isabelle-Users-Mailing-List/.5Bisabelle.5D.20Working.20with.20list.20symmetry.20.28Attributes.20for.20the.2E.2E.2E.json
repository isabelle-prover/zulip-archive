[
    {
        "content": "<p>From: Martin Raška &lt;<a href=\"mailto:RaskaMartin@seznam.cz\">RaskaMartin@seznam.cz</a>&gt;<br>\nHello,</p>\n<p>while working on formalization of combinatorics on words, we face the phenomenon that most of the definitions and theorems about lists have symmetric versions obtained by isomorphism<br>\nrev:: 'a list ⇒ 'a list.</p>\n<p>Although in the theory Sublist.thy the reverse-symmetry is treated by simple repeating the symmetric claims, we would like to approach the problem in a more systematic way, since we face this phenomenon to a greater extent.</p>\n<p>My question is whether it is good practice to create a rule attribute [reversed] for transforming theorems about lists to their reverse-symmetric versions.</p>\n<p>Simple example (mostly from Sublist.thy):</p>\n<p>definition prefix :: \"'a list ⇒ 'a list ⇒ bool\"<br>\nwhere \"prefix xs ys ⟷ (∃zs. ys = xs @ zs)\"</p>\n<p>symmetric definition:<br>\ndefinition suffix :: \"'a list ⇒ 'a list ⇒ bool\"<br>\nwhere \"suffix xs ys = (∃zs. ys = zs @ xs)\"</p>\n<p>example theorem:<br>\nlemma prefixE: prefix xs ys ⟹ (⋀zs. ys = xs @ zs ⟹ thesis) ⟹ thesis</p>\n<p>consider following \"reversal\" rules:<br>\nlemma \"(⋀x. PROP P x) ≡ (⋀x. PROP P (rev x))\"<br>\nlemma rev_append [symmetric]: \"rev ys @ rev xs = rev (xs @ ys)\"<br>\nlemma rev_is_rev_conv: \"(rev xs = rev ys) = (xs = ys)\"<br>\nlemma suffix_to_prefix [symmetric]: \"prefix (rev xs) (rev ys) ⟷ suffix xs ys\"</p>\n<p>Then by instantiations xs=\"rev xs\" ys=\"rev ys\" in prefixE and rewritings according to reversal rules, we obtain symmetric<br>\nlemma suffixE: suffix xs ys ⟹ (⋀zs. ys = zs @ xs ⟹ thesis) ⟹ thesis</p>\n<p>From this follows my approach:<br>\nI started writing a declaration attribute [reversal_rule] for storing the rules performing rewritings and a rule attribute [reversed] which transforms theorem by instantiating list-type schematic variables xs to \"rev xs\" and by performing rewritings according to the current list of reversal rules.</p>\n<p>After that, we could write:<br>\nlemma suffixE: suffix xs ys ⟹ (⋀zs. ys = zs @ xs ⟹ thesis) ⟹ thesis<br>\nby (fact prefixE[reversed])<br>\nor<br>\nlemmas suffixE = prefixE[reversed]<br>\nor simply use prefixE[reversed] in proofs without having binding suffixE at all.</p>\n<p>Is there a better/canonical way to treat this?</p>\n<p>Best regards,<br>\nMartin Raska</p>",
        "id": 228386977,
        "sender_full_name": "Email Gateway",
        "timestamp": 1614681195
    }
]