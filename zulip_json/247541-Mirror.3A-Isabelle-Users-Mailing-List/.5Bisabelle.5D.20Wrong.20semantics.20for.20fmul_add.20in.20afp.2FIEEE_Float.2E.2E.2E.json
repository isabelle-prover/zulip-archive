[
    {
        "content": "<p>From: Peter Lammich &lt;<a href=\"mailto:lammich@in.tum.de\">lammich@in.tum.de</a>&gt;<br>\nHi List (cc Fabian who's to hg-blame for this),</p>\n<p>when trying to prove properties of the IEEE fused-multiply-add<br>\noperation as formalized in the AFP entry IEEE_Floating_Point, I came<br>\nacross an oddity in the corner <br>\ncase of rounding to -\\infinity, where a positive actual result<br>\n(resulting from non-negative operands) gets rounded down to zero. <br>\nIn this case, the formalized operation returns -0, but I believe it<br>\nmust be 0 (and so does Intel's AVX512  _mm_fmadd_round_sd instruction).</p>\n<p>I'm writing this lengthy mail, as the formalization looks like this<br>\nbehaviour has been built in on purpose. The relevant code in IEEE.thy<br>\nis:</p>\n<p>float_round mode<br>\n                (if (r1 = 0) ∧ (r2 = 0) ∧ (signP = sign z) then<br>\n                   signP = 1<br>\n                 else mode = To_ninfinity) (r1 + r2))</p>\n<p>This will explicitly select a negative zero for To_ninfinity rounding<br>\nmode!</p>\n<p>Any comments? <br>\nWhat was the intention behind this? <br>\nAm I (and Intel-AVX) interpreting the standard wrongly? Or should I try<br>\nto fix this?</p>",
        "id": 259564620,
        "sender_full_name": "Email Gateway",
        "timestamp": 1635531822
    },
    {
        "content": "<p>From: Peter Lammich &lt;<a href=\"mailto:lammich@in.tum.de\">lammich@in.tum.de</a>&gt;<br>\nHi Fabian,</p>\n<p>I have now fixed the issue.</p>\n<p>I have also built an executable result checker, which will check the <br>\nsemantics against a proposed result. With this, the fixed semantics (see <br>\nattached) now passes the IBM fpgen test suite <br>\n(<a href=\"https://research.ibm.com/haifa/projects/verification/fpgen/ieeets.shtml\">https://research.ibm.com/haifa/projects/verification/fpgen/ieeets.shtml</a>) <br>\nand coincides with the output of AVX512f, and std::fma in C++ (however <br>\nthat gets translated on my laptop ;) ). I have also tested the <br>\n+,-,/,*,sqrt operations, which also pass fpgen.</p>\n<p>Shall I commit a patch to afp-devel?<br>\n<a href=\"/user_uploads/14278/6ZSwIVjf-sFg8WEKE6KyZJLQ/IEEE.thy\">IEEE.thy</a></p>",
        "id": 275832073,
        "sender_full_name": "Email Gateway",
        "timestamp": 1647622643
    },
    {
        "content": "<p>From: Fabian Immler &lt;<a href=\"mailto:cl-isabelle-users@lists.cam.ac.uk\">cl-isabelle-users@lists.cam.ac.uk</a>&gt;</p>\n<blockquote>\n<p>On 18. Mar 2022, at 17:54, Peter Lammich &lt;<a href=\"mailto:lammich@in.tum.de\">lammich@in.tum.de</a>&gt; wrote:</p>\n<p>Hi Fabian,</p>\n<p>I have now fixed the issue.</p>\n<p>I have also built an executable result checker, which will check the semantics against a proposed result. With this, the fixed semantics (see attached) now passes the IBM fpgen test suite (<a href=\"https://research.ibm.com/haifa/projects/verification/fpgen/ieeets.shtml\">https://research.ibm.com/haifa/projects/verification/fpgen/ieeets.shtml</a> &lt;<a href=\"https://research.ibm.com/haifa/projects/verification/fpgen/ieeets.shtml\">https://research.ibm.com/haifa/projects/verification/fpgen/ieeets.shtml</a>&gt;) and coincides with the output of AVX512f, and std::fma in C++ (however that gets translated on my laptop ;) ). I have also tested the +,-,/,*,sqrt operations, which also pass fpgen.</p>\n<p>Nice!<br>\nShall I commit a patch to afp-devel?</p>\n<p>Yes, looks good to me.</p>\n</blockquote>\n<p>Best wishes,<br>\nFabian</p>",
        "id": 275856038,
        "sender_full_name": "Email Gateway",
        "timestamp": 1647634042
    }
]