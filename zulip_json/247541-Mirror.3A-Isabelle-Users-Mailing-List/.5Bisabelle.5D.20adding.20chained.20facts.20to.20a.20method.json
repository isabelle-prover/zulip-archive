[
    {
        "content": "<p>From: Stepan Holub &lt;<a href=\"mailto:holub@karlin.mff.cuni.cz\">holub@karlin.mff.cuni.cz</a>&gt;<br>\nDear all,</p>\n<p>this is likely a repeated question, but I cannot find what is the <br>\ncurrent canonical way of adding chained facts into a method.<br>\nSo that I can write<br>\nby my_method<br>\ninstead of<br>\nby - my_method.</p>\n<p>Thanks</p>\n<p>Stepan</p>",
        "id": 263586619,
        "sender_full_name": "Email Gateway",
        "timestamp": 1638541562
    },
    {
        "content": "<p>From: Manuel Eberl &lt;<a href=\"mailto:manuel@pruvisto.org\">manuel@pruvisto.org</a>&gt;<br>\nI always use the SIMPLE_METHOD/SIMPLE_METHOD' combinators to turn a <br>\ntactic into a method. They take care of this.</p>\n<p>Or are you talking about an already existing method like \"rule\" that you <br>\nwant to wrap?</p>\n<p>Manuel</p>",
        "id": 263592817,
        "sender_full_name": "Email Gateway",
        "timestamp": 1638544215
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nMaybe the \"use\" method is what you want, see also isar-ref manual. There is<br>\nalso the dynamic fact \"method_facts\". Some examples are in the vicinity of<br>\nEisbach.</p>\n<p>The most basic applications are like this:</p>\n<p>from a have B by (use nothing in rule r, simp)</p>\n<p>have A<br>\n  proof ...<br>\n     ...<br>\n  qed (use a in method)</p>\n<p>Makarius</p>",
        "id": 263619877,
        "sender_full_name": "Email Gateway",
        "timestamp": 1638556365
    },
    {
        "content": "<p>From: Martin Raška &lt;<a href=\"mailto:RaskaMartin@seznam.cz\">RaskaMartin@seznam.cz</a>&gt;<br>\nHi,</p>\n<p>thanks for the answers. I would like to be more specific about Stepan's <br>\nquestion and write how we solved the problem.</p>\n<p>'my_method' is defined using Eisbach by method combinators. This method <br>\nassumes that all chained facts have been moved to the premises of the goal, <br>\nsince leaving theorems in chained facts would for instance lead to <br>\nrepetitive insertion in the goal in sequential compositions.</p>\n<p>This has been achieved by</p>\n<p>using assms by - my_method</p>\n<p>where insertion of facts to the goal is done by '-' method while removal <br>\nfrom chained facts is done by 'by' command after initial proof method.</p>\n<p>Question is how to modify Eisbach definition to my_method1 which starts by <br>\nmoving chained facts to the goal, so that we could write </p>\n<p>by my_method1</p>\n<p>instead of</p>\n<p>by - my_method.</p>\n<p>We solved it by:</p>\n<p>method my_method1 = (-, use nothing in ‹my_method›)</p>\n<p>or more explicitly</p>\n<p>method my_method2 = (insert method_facts, use nothing in ‹my_method›)</p>\n<p>(Although 'use nothing in' does not remove chained facts, it hides them for <br>\nmy_method.)</p>\n<p>Martin Raška</p>\n<p>---------- Původní e-mail ----------<br>\nOd: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nKomu: Stepan Holub &lt;<a href=\"mailto:holub@karlin.mff.cuni.cz\">holub@karlin.mff.cuni.cz</a>&gt;, isabelle-users &lt;cl-isabelle-<br>\n<a href=\"mailto:users@lists.cam.ac.uk\">users@lists.cam.ac.uk</a>&gt;<br>\nDatum: 3. 12. 2021 19:42:57<br>\nPředmět: Re: [isabelle] adding chained facts to a method <br>\n\"<br>\nMaybe the \"use\" method is what you want, see also isar-ref manual. There is <br>\nalso the dynamic fact \"method_facts\". Some examples are in the vicinity of <br>\nEisbach. </p>\n<p>The most basic applications are like this: </p>\n<p>from a have B by (use nothing in rule r, simp) </p>\n<p>have A <br>\nproof ... <br>\n... <br>\nqed (use a in method) </p>\n<p>Makarius </p>\n<p>\"</p>",
        "id": 263791049,
        "sender_full_name": "Email Gateway",
        "timestamp": 1638741095
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nOn 05/12/2021 22:51, Martin Raška wrote:</p>\n<blockquote>\n<p>'my_method' is defined using Eisbach by method combinators. This method<br>\nassumes that all chained facts have been moved to the premises of the goal,<br>\nsince leaving theorems in chained facts would for instance lead to repetitive<br>\ninsertion in the goal in sequential compositions.</p>\n</blockquote>\n<p>Note that this is how the Isar proof language works: proof methods get exposed<br>\nto certain chained facts, but cannot \"consume\" them. Subsequent methods in the<br>\nsame expression will get them as well.</p>\n<blockquote>\n<p>We solved it by:<br>\nmethod my_method1 = (-, use nothing in ‹my_method›)<br>\nor more explicitly<br>\nmethod my_method2 = (insert method_facts, use nothing in ‹my_method›)</p>\n</blockquote>\n<p>This looks fine. The second form looks very canonical to me.</p>\n<p>Makarius</p>",
        "id": 263831234,
        "sender_full_name": "Email Gateway",
        "timestamp": 1638786682
    }
]