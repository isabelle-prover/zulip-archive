[
    {
        "content": "<p>From: Walther Neuper &lt;<a href=\"mailto:walther.neuper@jku.at\">walther.neuper@jku.at</a>&gt;<br>\nreading isar-ref.pdf and src/Pure gives me the impression, that<br>\ncartouches are NOT designed to contain outer syntax.</p>\n<p>Is that impression correct?</p>\n<p>If \"yes\", then I'll proceed with implementation.pdf \"§3. Concrete syntax<br>\nand type-checking\",<br>\nif \"no\": please, point me to an example, where a cartouche contains<br>\nouter syntax.</p>\n<p>Many thanks in advance,</p>\n<p>Walther</p>",
        "id": 209181946,
        "sender_full_name": "Email Gateway",
        "timestamp": 1599318013
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nHere is an example that contains outer syntax keywords:</p>\n<p>text ‹<br>\n  @{theory_text ‹term x›}<br>\n›</p>\n<p>You can use C-hover click on \"theory_text\" to see how it is implemented (as<br>\ntext antiquotation).</p>\n<p>Of course, you can use embedded cartouches in other languages as well.</p>\n<p>Makarius</p>",
        "id": 209195931,
        "sender_full_name": "Email Gateway",
        "timestamp": 1599339829
    },
    {
        "content": "<p>From: Walther Neuper &lt;<a href=\"mailto:walther.neuper@jku.at\">walther.neuper@jku.at</a>&gt;<br>\nOn 05.09.20 23:03, Makarius wrote:</p>\n<blockquote>\n<p>On 05/09/2020 16:59, Walther Neuper wrote:</p>\n<blockquote>\n<p>reading isar-ref.pdf and src/Pure gives me the impression, that<br>\ncartouches are NOT designed to contain outer syntax.<br>\n[...]<br>\nHere is an example that contains outer syntax keywords:</p>\n</blockquote>\n<p>text ‹<br>\n  @{theory_text ‹term x›}<br>\n›</p>\n<p>You can use C-hover click on \"theory_text\" to see how it is implemented (as<br>\ntext antiquotation).</p>\n<p>Of course, you can use embedded cartouches in other languages as well.</p>\n<p>Makarius</p>\n</blockquote>\n<p>Thank you!</p>\n<p>So it's next to find out, why</p>\n<blockquote>\n<p>text ‹ @{theory_text ‹ ISAC ‹ Problem (\"Biegelinie\", [\"Biegelinien\"])<br>\n\"y x = q_0 * L ^ 2 / (4 * EI)\" › ›} › </p>\n</blockquote>\n<p>does not render quoted text red the same way as it is done with<br>\n\"immediate\"  theory_text, e.g.</p>\n<blockquote>\n<p>ISAC ‹<br>\n      Problem (\"Biegelinie\", [\"Biegelinien\"])<br>\n      \"y x = q_0 * L ^ 2 / (4 * EI)\"<br>\n    ›</p>\n</blockquote>\n<p>in the theory body without further surroundings given the definition</p>\n<blockquote>\n<p>val _ = Outer_Syntax.command @{command_keyword ISAC} \"embedded ISAC<br>\nlanguage\" ((Parse.input Parse.cartouche) &gt;&gt; (fn input =&gt; Toplevel.keep<br>\n(fn _ =&gt; ignore (ML_Lex.read_source input)))) </p>\n</blockquote>\n<p>Good training in how to read and investigate Isabelle code.</p>\n<p>Walther</p>",
        "id": 209213004,
        "sender_full_name": "Email Gateway",
        "timestamp": 1599375833
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nThis is because the @{theory_text} document antiquotation only takes the outer<br>\nsyntax tokens into account; there is no evaluation of commands, and thus no<br>\nmarkup from the command semantics.</p>\n<p>The included definition of @{theory_commands} improves on this in an adhoc<br>\nmanner, using Outer_Syntax.parse_text and Toplevel.command_exception --- this<br>\nbasically works, but causes some duplication of markup.</p>\n<p>Before I do the usual fine-tuning to get PIDE markup to the point, without<br>\nduplicates: Can you say what your actual application is? Do you need a<br>\ndocument antiquotation at all, or something else?</p>\n<p>Makarius</p>",
        "id": 209241318,
        "sender_full_name": "Email Gateway",
        "timestamp": 1599425832
    },
    {
        "content": "<p>From: Walther Neuper &lt;<a href=\"mailto:walther.neuper@jku.at\">walther.neuper@jku.at</a>&gt;<br>\nOn 06.09.20 22:56, Makarius wrote:</p>\n<blockquote>\n<p>On 06/09/2020 09:03, Walther Neuper wrote:</p>\n<blockquote>\n<p>So it's next to find out, why</p>\n<blockquote>\n<p>text ‹ @{theory_text ‹ ISAC ‹ Problem (\"Biegelinie\", [\"Biegelinien\"])<br>\n\"y x = q_0 * L ^ 2 / (4 * EI)\" › ›} › <br>\ndoes not render quoted text red the same way as it is done with<br>\n\"immediate\"  theory_text, e.g.<br>\n    ISAC ‹<br>\n      Problem (\"Biegelinie\", [\"Biegelinien\"])<br>\n      \"y x = q_0 * L ^ 2 / (4 * EI)\"<br>\n    ›<br>\nin the theory body without further surroundings given the definition<br>\nthank you for the explanation of how the antiquotation works ..<br>\nThis is because the @{theory_text} document antiquotation only takes the outer<br>\nsyntax tokens into account; there is no evaluation of commands, and thus no<br>\nmarkup from the command semantics.<br>\n.. and the hints for continuing that way ..<br>\nThe included definition of @{theory_commands} (*) improves on this in an adhoc<br>\nmanner, using Outer_Syntax.parse_text and Toplevel.command_exception --- this<br>\nbasically works, but causes some duplication of markup.</p>\n</blockquote>\n</blockquote>\n<p>Before I do the usual fine-tuning to get PIDE markup to the point, without<br>\nduplicates: <br>\n... but I suppose now, that it will be more straight forward to go to<br>\ninner syntax directly:<br>\nCan you say what your actual application is? Do you need a<br>\ndocument antiquotation at all, or something else?<br>\nWe need a cartouche like ISAC above, where the cartouche contains a<br>\nspecific format of forward proof (a variant of Back's \"structured<br>\nderivation\") initalised by an explicit formal specification of<br>\npre-condition and post-condition (within the same cartouche).</p>\n</blockquote>\n<p>Thus now I plan to follow implementation.pdf §3.\"Concrete syntax and<br>\ntype-checking\" and investigate Isabelle's standard code dealing with<br>\n\"proof\" in order to provide semantics to new keywords in inner syntax.</p>\n<p>Thank you for all,</p>\n<p>Walther</p>\n<p>PS(*): cannot find \"theory_commands\" at the actual<br>\n<a href=\"https://isabelle.in.tum.de/repos/isabelle\">https://isabelle.in.tum.de/repos/isabelle</a>; but there is<br>\n\"local_theory_command\" with \"local_theory_to_proof\" which sounds promising.</p>\n<p>PPS: Following your hint at the Isabelle workshop, to study<br>\nIsabelle_Naproche, I am impressed by the many new possibilities (e.g.<br>\ndelegate parsing via Isabelle server) which we are not going to fully<br>\nexploit in this phase of development.</p>",
        "id": 209280575,
        "sender_full_name": "Email Gateway",
        "timestamp": 1599474774
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nOops, I've forgotten the attached theory.</p>\n<p>Makarius<br>\n<a href=\"/user_uploads/14278/KTgJgzYHSpybvrUgEgG39Hov/Theory_Commands.thy\">Theory_Commands.thy</a></p>",
        "id": 209314681,
        "sender_full_name": "Email Gateway",
        "timestamp": 1599498331
    },
    {
        "content": "<p>From: Walther Neuper &lt;<a href=\"mailto:walther.neuper@jku.at\">walther.neuper@jku.at</a>&gt;<br>\nthank you, the theory looks interesting, while I don't really understand<br>\nthe details --- so it's hard for me to decide whether to place parsing<br>\nand interpreting in outer syntax or in inner syntax.</p>\n<p>Before I come up with the many questions I already see, I'll go into<br>\ntrials with inner syntax for some time.</p>\n<p>Walther</p>",
        "id": 209367498,
        "sender_full_name": "Email Gateway",
        "timestamp": 1599559835
    }
]