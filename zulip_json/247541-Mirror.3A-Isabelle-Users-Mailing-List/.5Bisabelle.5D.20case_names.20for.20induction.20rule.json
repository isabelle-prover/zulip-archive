[
    {
        "content": "<p>From: \"\\\"Putti, Edoardo (UT-EEMCS)\\\"\" &lt;<a href=\"mailto:cl-isabelle-users@lists.cam.ac.uk\">cl-isabelle-users@lists.cam.ac.uk</a>&gt;<br>\nI'm trying to set up the names of cases to use during a computation induction proof.<br>\nThe reference manual says this can be done by using the case_names attribute,<br>\nunfortunately I'm not able to set it up correctly.</p>\n<p>Here's my example. In the last lemma I set up induction, but the names declared<br>\nbefore the lemma are not picked up. Is there a way to debug this myself? Is there a command<br>\nto print all attributes for a constant?</p>\n<p>theory Scratch<br>\n  imports Main<br>\nbegin</p>\n<p>type_synonym flag = bool<br>\nabbreviation (input) \"ShouldContinue ≡ True\"<br>\nabbreviation (input) \"ShouldCancel   ≡ False\"</p>\n<p>datatype event = Continue | Stop | Cancel<br>\ntype_synonym actions = \"event list\"</p>\n<p>fun valid :: \"flag ⇒ actions ⇒ bool\" where<br>\n  \"valid f [] = True\"<br>\n| \"valid f (Continue # xs) ⟷ f = ShouldContinue ∧ valid ShouldContinue xs\"<br>\n| \"valid f (Stop # xs)          ⟷ f = ShouldCancel      ∧ valid ShouldCancel   xs\"<br>\n| \"valid f (Cancel # xs)    ⟷                                                valid ShouldCancel   xs\"</p>\n<p>declare valid.induct [case_names A B C D]</p>\n<p>lemma \"valid ShouldContinue t ⟹ undefined\"<br>\nproof(induction rule: valid.induct)<br>\n  print_cases<br>\nend</p>",
        "id": 430010580,
        "sender_full_name": "Email Gateway",
        "timestamp": 1711611234
    },
    {
        "content": "<p>From: Thomas Sewell &lt;<a href=\"mailto:tals4@cam.ac.uk\">tals4@cam.ac.uk</a>&gt;<br>\nYou're close to the right syntax, but theorems aren't mutable.</p>\n<p>Doing declare X[case_names ...] doesn't put the modified theorem anywhere, i.e. it doesn't do anything useful.</p>\n<p>You could save the modified theorem with lemmas Y = X[case_names ...].</p>\n<p>Alternatively, you can use it on the spot with apply (induct rule: X[case_names ...]).</p>\n<p>Unfortunately, in this situation where the function package has generated an rule that isn't quite the one you want, there isn't a nice simple way to modify and replace it. You can save a variant, but users will tend to find the original thanks to its standard name.</p>\n<p>Curiously, the function package parser seems to support naming each of the cases of the function, but this information doesn't seem to go anywhere.</p>\n<p>Hope that helps,<br>\n    Thomas.</p>",
        "id": 430021826,
        "sender_full_name": "Email Gateway",
        "timestamp": 1711616207
    },
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\nHi Thoams,</p>\n<p>If the standard name is x.induct, I name my variant x_induct, which works well <br>\nfor searches with \"name:induct\".</p>\n<p>Tobias</p>\n<p><a href=\"/user_uploads/14278/5mQtxTNpzYP8_msgUiQmauLw/smime.p7s\">smime.p7s</a></p>",
        "id": 430026958,
        "sender_full_name": "Email Gateway",
        "timestamp": 1711618065
    }
]