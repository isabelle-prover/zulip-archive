[
    {
        "content": "<p>From: \"Fernandez, Matthew\" &lt;<a href=\"mailto:matthew.fernandez@intel.com\">matthew.fernandez@intel.com</a>&gt;<br>\nHello Isabelle experts,</p>\n<p>Consider the following (admittedly silly) definition of two pairs of mutually recursive functions. Either is fine on its own, but they can not be admitted together. The problem is that various generated things derive their names from the mangling &lt;fun1&gt;_&lt;fun2&gt;. E.g. foo_bar_baz.pinduct. I think the core one is foo_bar_baz_graph, which is identified in error messages.</p>\n<p>My question is, is the user simply not supposed to write such things? This came up in the context of a generated Isabelle theory. I am thinking about how much I need to teach the generator in order for it to produce output that has a chance of being accepted by Isabelle.</p>\n<p>function foo_bar :: \"nat ⇒ bool\" and baz :: \"nat ⇒ bool\" where<br>\n      \"foo_bar 0 = True\"<br>\n    | \"foo_bar (Suc n) = baz n\"<br>\n    | \"baz 0 = False\"<br>\n    | \"baz (Suc n) = foo_bar n\"<br>\n      by pat_completeness auto</p>\n<p>function foo :: \"nat ⇒ bool\" and bar_baz :: \"nat ⇒ bool\" where<br>\n      \"foo 0 = True\"<br>\n    | \"foo (Suc n) = bar_baz n\"<br>\n    | \"bar_baz 0 = False\"<br>\n    | \"bar_baz (Suc n) = foo n\"<br>\n      by pat_completeness auto</p>\n<p>Thanks,<br>\nMatt</p>",
        "id": 213489150,
        "sender_full_name": "Email Gateway",
        "timestamp": 1602796656
    }
]