[
    {
        "content": "<p>From: Peter Lammich &lt;<a href=\"mailto:lammich@in.tum.de\">lammich@in.tum.de</a>&gt;<br>\nHow do I access the files generated by code_reflect, and import them<br>\ninto the system runtime?</p>\n<p>I tried</p>\n<p>code_reflect XXX ... file_prefix foo</p>\n<p>this logs a nice clickable link in jedit, that directs to some </p>\n<p>isabelle-export:Draft.mythyname/code/foo</p>\n<p>I can view that in jedit, OK. But when doing</p>\n<p>ML_file \"isabelle-export:Draft.mythyname/code/foo\"  </p>\n<p>I just get:</p>\n<p>Illegal character \":\" in path element \"isabelle-export:Draft.mythyname\"<br>\nThe error(s) above occurred in \"isabelle-<br>\nexport:Draft.mythyname/code/foo\"</p>\n<p>Thanks in advance for any help.<br>\n  Peter</p>\n<p>ps: the core issue that I'm trying to solve is to debug the exported<br>\ncode. CTRL-Click on a reflected ML function leads to an empty jedit<br>\nbuffer, so I thought iot might work if the code is in a file.</p>\n<p>pps: the code generator tutorial is outdated: in section 8.1 it<br>\nmentions a file argument (which does not exist), and the example only<br>\nshows a file_prefix argument. Also it promises the purpose of separate<br>\ncompilation is \"This merely generates the referenced code to the given<br>\nfile which can be<br>\nincluded into the system runtime later on\" but lacks any documentation<br>\nor pointer to how this can be done.</p>",
        "id": 271453406,
        "sender_full_name": "Email Gateway",
        "timestamp": 1644509322
    },
    {
        "content": "<p>From: Florian Haftmann &lt;<a href=\"mailto:florian.haftmann@informatik.tu-muenchen.de\">florian.haftmann@informatik.tu-muenchen.de</a>&gt;<br>\nHi Peter,</p>\n<blockquote>\n<p>How do I access the files generated by code_reflect, and import them<br>\ninto the system runtime?</p>\n</blockquote>\n<p>there is<br>\n<a href=\"https://isabelle.in.tum.de/repos/isabelle/file/tip/Admin/lib/Tools/regenerate_cooper\">https://isabelle.in.tum.de/repos/isabelle/file/tip/Admin/lib/Tools/regenerate_cooper</a><br>\nwhich demonstrates<br>\nthe canonical and AFAIK only example.  Luckily enough most applications<br>\nof code_reflect do not need that indirection.</p>\n<blockquote>\n<p>pps: the code generator tutorial is outdated: in section 8.1 it<br>\nmentions a file argument (which does not exist), and the example only<br>\nshows a file_prefix argument. Also it promises the purpose of separate<br>\ncompilation is \"This merely generates the referenced code to the given<br>\nfile which can be<br>\nincluded into the system runtime later on\" but lacks any documentation<br>\nor pointer to how this can be done.</p>\n</blockquote>\n<p>Thanks for the hint, I streamlined this in<br>\n<a href=\"https://isabelle.in.tum.de/repos/isabelle/rev/78c2a92a8be4\">https://isabelle.in.tum.de/repos/isabelle/rev/78c2a92a8be4</a></p>\n<p>Cheers,<br>\n    Florian<br>\n<a href=\"/user_uploads/14278/Ui4atNLtXK16KdvVwQbQzSim/OpenPGP_signature\">OpenPGP_signature</a></p>",
        "id": 271674070,
        "sender_full_name": "Email Gateway",
        "timestamp": 1644649065
    }
]