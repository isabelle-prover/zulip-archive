[
    {
        "content": "<p>From: Phil Rieckmann &lt;<a href=\"mailto:phirie@uni-bremen.de\">phirie@uni-bremen.de</a>&gt;<br>\nDear Isabelle users,</p>\n<p>i had a problem with a proof that can be shown with this example:</p>\n<p>datatype( 'a, 'e) state_result =<br>\n     Value \" 'a \"<br>\n     | Ex \" ( 'e )\"</p>\n<p>definition u :: \"(int, 'e)state_result set\" where<br>\n   \"u ≡ undefined\"</p>\n<p>lemma existence:<br>\n   \"∃v. u  =  {Value(v)}\"<br>\n   sorry</p>\n<p>lemma something: \"A\"<br>\nproof -<br>\n   obtain v where v_def: \"u  =  {Value(v)}\"<br>\n     using existence by blast<br>\n   hence \"u  =  {Value(v)}\"<br>\n     try</p>\n<p>The last formula does not seem provable (with try).<br>\nI don't understand how v is influenced by 'e, v is always of type int.<br>\nIf i change 'e to int, auto can proof it. I'm still using Isabelle2022.</p>\n<p>Can someone explain me, whats happening here?</p>\n<p>Phil</p>",
        "id": 499437746,
        "sender_full_name": "Email Gateway",
        "timestamp": 1739443223
    },
    {
        "content": "<p>From: Jan van Brügge &lt;<a href=\"mailto:jan@vanbruegge.de\">jan@vanbruegge.de</a>&gt;<br>\nHi,</p>\n<p>if you ctrl-hover over both u in your proof, you see that one has type <br>\n(int, 'a) state_result set while the other is (int, 'b) state_result set.</p>\n<p>Adding a type annotation makes this work:</p>\n<p>lemma something: \"A\"<br>\nproof -<br>\n   obtain v where v_def: \"(u::(int, 'a) state_result set)  = {Value(v)}\"<br>\n     using existence by blast<br>\n   hence \"(u::(int, 'a) state_result set)  =  {Value(v)}\"<br>\n     by simp</p>\n<p>Cheers,<br>\nJan</p>\n<p>Am 13.02.25 um 10:12 schrieb Phil Rieckmann:</p>\n<blockquote>\n<p>Dear Isabelle users,</p>\n<p>i had a problem with a proof that can be shown with this example:</p>\n<p>datatype( 'a, 'e) state_result =<br>\n    Value \" 'a \"<br>\n    | Ex \" ( 'e )\"</p>\n<p>definition u :: \"(int, 'e)state_result set\" where<br>\n  \"u ≡ undefined\"</p>\n<p>lemma existence:<br>\n  \"∃v. u  =  {Value(v)}\"<br>\n  sorry</p>\n<p>lemma something: \"A\"<br>\nproof -<br>\n  obtain v where v_def: \"u  =  {Value(v)}\"<br>\n    using existence by blast<br>\n  hence \"u  =  {Value(v)}\"<br>\n    try</p>\n<p>The last formula does not seem provable (with try).<br>\nI don't understand how v is influenced by 'e, v is always of type int.<br>\nIf i change 'e to int, auto can proof it. I'm still using Isabelle2022.</p>\n<p>Can someone explain me, whats happening here?</p>\n<p>Phil</p>\n</blockquote>",
        "id": 499439835,
        "sender_full_name": "Email Gateway",
        "timestamp": 1739443782
    },
    {
        "content": "<p>From: \"Thiemann, René\" &lt;<a href=\"mailto:cl-isabelle-users@lists.cam.ac.uk\">cl-isabelle-users@lists.cam.ac.uk</a>&gt;</p>\n<blockquote>\n<p>Am 13.02.2025 um 11:12 schrieb Phil Rieckmann &lt;<a href=\"mailto:phirie@uni-bremen.de\">phirie@uni-bremen.de</a>&gt;:</p>\n<p>Dear Isabelle users,</p>\n<p>i had a problem with a proof that can be shown with this example:</p>\n<p>datatype( 'a, 'e) state_result =<br>\n    Value \" 'a \"<br>\n    | Ex \" ( 'e )\"</p>\n<p>definition u :: \"(int, 'e)state_result set\" where<br>\n  \"u ≡ undefined\"</p>\n<p>lemma existence:<br>\n  \"∃v. u  =  {Value(v)}\"<br>\n  sorry</p>\n<p>lemma something: \"A\"<br>\nproof -<br>\n  obtain v where v_def: \"u  =  {Value(v)}\"<br>\n    using existence by blast<br>\n  hence \"u  =  {Value(v)}\"<br>\n    try</p>\n<p>The last formula does not seem provable (with try).<br>\nI don't understand how v is influenced by 'e, v is always of type int.<br>\nIf i change 'e to int, auto can proof it. I'm still using Isabelle2022.</p>\n<p>Can someone explain me, whats happening here?</p>\n</blockquote>\n<p>v can be influence by ‘e. Have a look at the following modified version <br>\nof the definition of u. If one replaces your try by sorry, then one can prove<br>\nanything.</p>\n<p>definition u :: \"(int, 'e)state_result set\" where<br>\n  \"u ≡ {Value (int (card(UNIV :: 'e set)))}\"</p>\n<p>lemma existence:<br>\n  \"∃v. u  =  {Value(v)}\"<br>\n  unfolding u_def by auto</p>\n<p>lemma something: \"A\"<br>\nproof -<br>\n  let ?u1 = \"u :: (int, bool) state_result set\" <br>\n  let ?u2 = \"u :: (int, unit) state_result set\" <br>\n  obtain v where v_def: \"?u1  =  {Value(v)}\"<br>\n    using existence by blast<br>\n  hence \"?u2  =  {Value(v)}\" sorry<br>\n  hence \"v = 1\" unfolding u_def by auto<br>\n  moreover from v_def have \"v = 2\" unfolding u_def by auto<br>\n  ultimately show A by auto<br>\nqed</p>\n<p>Best,<br>\nRené</p>",
        "id": 499441039,
        "sender_full_name": "Email Gateway",
        "timestamp": 1739444121
    }
]