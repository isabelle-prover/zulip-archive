[
    {
        "content": "<p>From: Gunnar Teege &lt;<a href=\"mailto:gunnar.teege@unibw.de\">gunnar.teege@unibw.de</a>&gt;<br>\nHello all,</p>\n<p>I observed an unexpected behavior when using the cases method with an <br>\nelimination rule attributed by [consumes 1], such as the trivial example</p>\n<p>lemma elim1[consumes 1]: \"⟦Q; Q ⟹ P⟧ ⟹ P\" by blast</p>\n<p>When applied in the form<br>\n   lemma \"X ⟹ Y\" proof (cases rule: elim1)<br>\nthe resulting goal state is</p>\n<p>1. X ⟹ ?Q<br>\n  2. ⟦X; ?Q⟧ ⟹ Y<br>\nwhich means that the major premise Q has not been consumed.</p>\n<p>The induct method works as expected:<br>\n   lemma \"X ⟹ Y\" proof (induct rule: elim1)<br>\nresults in the goal state</p>\n<p>1. X ⟹ Y</p>\n<p>It works for the cases method if X is passed as input:<br>\n   lemma assumes \"X\" shows \"Y\" using assms proof (cases rule: elim1)<br>\nresults in the goal state</p>\n<p>1. X ⟹ Y</p>\n<p>Is that behavior intended?</p>\n<p>Background: I was just curious whether elimination rule application can <br>\nbe combined with creating named contexts for the cases.</p>\n<p>Best regards</p>\n<p>Gunnar Teege</p>\n<p><a href=\"/user_uploads/14278/iKIIe9vHyroDx8tHrYtYuq_4/smime.p7s\">smime.p7s</a></p>",
        "id": 412195382,
        "sender_full_name": "Email Gateway",
        "timestamp": 1704910359
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nOn 10/01/2024 19:10, Gunnar Teege wrote:</p>\n<blockquote>\n<p>Hello all,</p>\n<p>I observed an unexpected behavior when using the cases method with an <br>\nelimination rule attributed by [consumes 1], such as the trivial example</p>\n<p>lemma elim1[consumes 1]: \"⟦Q; Q ⟹ P⟧ ⟹ P\" by blast</p>\n<p>When applied in the form<br>\n   lemma \"X ⟹ Y\" proof (cases rule: elim1)<br>\nthe resulting goal state is<br>\n  1. X ⟹ ?Q<br>\n  2. ⟦X; ?Q⟧ ⟹ Y<br>\nwhich means that the major premise Q has not been consumed.</p>\n</blockquote>\n<p>This is correct in the sense of the Pure rule calculus, introduced by Paulson <br>\n1989 and turned into Isar proof text and proof methods by Wenzel 1999.</p>\n<p>It is intendend, and the proper approach is indeed:</p>\n<blockquote>\n<p>It works for the cases method if X is passed as input:<br>\n   lemma assumes \"X\" shows \"Y\" using assms proof (cases rule: elim1)<br>\nresults in the goal state<br>\n  1. X ⟹ Y</p>\n<p>Is that behavior intended?</p>\n</blockquote>\n<blockquote>\n<p>The induct method works as expected:<br>\n   lemma \"X ⟹ Y\" proof (induct rule: elim1)<br>\nresults in the goal state<br>\n  1. X ⟹ Y</p>\n</blockquote>\n<p>The various proof methods for induction and coinduction actually violate a few <br>\nprinciples of Pure rule composition. The idea is to pass the goal context <br>\nproperly through the induction principle (and a few other tricks). That is <br>\npractically important, but makes the whole setup a bit dense and hard to <br>\nexplain / understand.</p>\n<blockquote>\n<p>Background: I was just curious whether elimination rule application can be <br>\ncombined with creating named contexts for the cases.</p>\n</blockquote>\n<p>Maybe you want to check the isar-ref manual concerning the command 'subgoal' <br>\nor proof method \"goal_cases\". Both are outside proper Isar, though: the <br>\npuristic approach is to write statements such you have the context-particles <br>\nin your hand already, e.g. via 'obtains' / 'obtain' / 'consider'.</p>\n<p>Makarius</p>",
        "id": 412577114,
        "sender_full_name": "Email Gateway",
        "timestamp": 1705076518
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nMore possibilities:</p>\n<p>have A if B<br>\n       using that by method</p>\n<p>have A if B<br>\n       using that<br>\n     proof method</p>\n<p>The postfix 'if' corresponds to prefix 'assumes' in toplevel statements. It is <br>\na \"recent\" addition to Isar (from 2015).</p>\n<p>Makarius</p>",
        "id": 412590906,
        "sender_full_name": "Email Gateway",
        "timestamp": 1705081196
    }
]