[
    {
        "content": "<p>From: Peter Gammie &lt;<a href=\"mailto:peteg42@gmail.com\">peteg42@gmail.com</a>&gt;<br>\nHello,</p>\n<p>I find myself with a sea of conversions of the form exhibited by <code>filter_empty_conv</code>. <code>HOL.List</code> is missing its obvious friend:</p>\n<p>lemma empty_filter_conv:<br>\n  shows \"([] = filter P xs) = (\\&lt;forall&gt;x\\&lt;in&gt;set xs. \\&lt;not&gt; P x)\"<br>\nby (induct xs) simp_all</p>\n<p>which could also be derived via a rule of the form:</p>\n<p>(x = y) = z ==&gt; (y = x) = z</p>\n<p>(and so forth for other symmetric or commutative operators such as inf and sup).</p>\n<p>One could imagine defining an attribute <code>symconv</code> like <code>symmetric</code> to handle this:</p>\n<p>lemmas empty_filter_conv = filter_empty_conv[symconv]</p>\n<p>But in my ideal world I wouldn’t need to type this out and make up another name, but would instead bind both theorems to the same name, e.g.</p>\n<p>lemma empty_filter_conv[symconv]:<br>\n  shows \"([] = filter P xs) = (\\&lt;forall&gt;x\\&lt;in&gt;set xs. \\&lt;not&gt; P x)”<br>\n…</p>\n<p>thm empty_filter_conv</p>\n<blockquote>\n<p>([] = filter P xs) = (\\&lt;forall&gt;x\\&lt;in&gt;set xs. \\&lt;not&gt; P x)<br>\n(filter P xs = []) = (\\&lt;forall&gt;x\\&lt;in&gt;set xs. \\&lt;not&gt; P x)</p>\n</blockquote>\n<p>However AIUI attributes map a single theorem to a single theorem, so this isn’t going to work.</p>\n<p>All I can think of is to create another keyword like <code>lemma</code> that does a bit of post-processing before the binding is made. This feels a bit heavyweight.</p>\n<p>Has anyone got a better solution? It might help to make these sorts of lemma pairs more systematic in the distribution.</p>\n<p>cheers,<br>\npeter</p>",
        "id": 260790892,
        "sender_full_name": "Email Gateway",
        "timestamp": 1636461283
    },
    {
        "content": "<p>From: Peter Lammich &lt;<a href=\"mailto:lammich@in.tum.de\">lammich@in.tum.de</a>&gt;<br>\nI second Peter that having attributes that create more than one lemma as<br>\noutput may be a useful thing. I also often write things like [simp, THEN xxx,<br>\nsimp], to register two simp rules derived from the same lemma.</p>\n<p>Peter</p>",
        "id": 260796941,
        "sender_full_name": "Email Gateway",
        "timestamp": 1636464535
    },
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\nPeter,</p>\n<p>This is really funny, I was in the middle of implementing the first part of what <br>\nyou suggested. There is now the lemma eq_iff_swap: (x = y) = P ==&gt; (y = x) = P <br>\nand I have simplified a number of proofs in List as a result. I have also added <br>\na handful of lemmas that were missing. Strangely enough, I missed your <br>\nempty_filter_conv. Or maybe I tried and it did more harm than good - it took a <br>\ncouple of iterations to smooth things out. I'll double-check.</p>\n<p>Note that one should not apply eq_iff_swap blindly: one may want to swap some <br>\nequations in P as well.</p>\n<p>Tobias<br>\n<a href=\"/user_uploads/14278/NbUJdI5-9d8Ogjm_H587Dury/smime.p7s\">smime.p7s</a></p>",
        "id": 260953934,
        "sender_full_name": "Email Gateway",
        "timestamp": 1636529274
    },
    {
        "content": "<p>From: Peter Gammie &lt;<a href=\"mailto:peteg42@gmail.com\">peteg42@gmail.com</a>&gt;<br>\nTobias,</p>\n<p>Thanks for doing that. I’ll reiterate my concern that things aren’t particularly systematic. For instance we have this pair:</p>\n<p>filter_eq_Cons_iff<br>\nCons_eq_filter_iff</p>\n<p>and this pair:</p>\n<p>take_eq_Nil<br>\ntake_eq_Nil2</p>\n<p>Can we settle on:</p>\n<ul>\n<li>suffix <code>_iff</code> vs <code>_conv</code> vs nothing</li>\n<li>suffix <code>2</code> vs flipping the constant names around <code>_eq_</code></li>\n<li>...</li>\n</ul>\n<p>As I remarked before, it’d be great if we could just have a single name for each of these pairs as the common case is that you just want to use whatever works (which in my case would give more robust proofs as I rework the foundations of things). In the rarer case that you need just one or the other I think e.g. filter_eq_Cons_iff(1) is not so bad.</p>\n<p>Perhaps this is not typically an issue once the relevant simpset is sufficiently mature.</p>\n<p>cheers,<br>\npeter</p>",
        "id": 261386628,
        "sender_full_name": "Email Gateway",
        "timestamp": 1636846883
    },
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\nPeter,</p>\n<p>I amy fine tune these names when I feel really bored, but not at this point in time.</p>\n<p>Best<br>\nTobias<br>\n<a href=\"/user_uploads/14278/2m8bWJtQG_Qksv4c0P8741l5/smime.p7s\">smime.p7s</a></p>",
        "id": 261436329,
        "sender_full_name": "Email Gateway",
        "timestamp": 1636921138
    }
]