[
    {
        "content": "<p>From: Stepan Holub &lt;<a href=\"mailto:holub@karlin.mff.cuni.cz\">holub@karlin.mff.cuni.cz</a>&gt;<br>\nDear all,</p>\n<p>the definition of the lexicographical product &lt;<em>lex</em>&gt; in HOL <br>\n(Wellfounded.thy) is counter-intuitive for any relation with nonempty <br>\ndiagonal. In particular, we have</p>\n<p>lemma \"(a,a) ∈ r ⟹ ((a,b),(a,c)) ∈ r &lt;<em>lex</em>&gt; s\"<br>\n   by simp</p>\n<p>that is, the product is not even an order (only a preorder) if r is not <br>\nirreflexive. I wonder whether this was intended or whether the <br>\nalternative definition</p>\n<p>definition lex_prod' :: \"('a ×'a) set ⇒ ('b × 'b) set ⇒ (('a × 'b) × ('a <br>\n× 'b)) set\"<br>\n       where \"lex_prod' ra  rb = {((a, b), (a', b')).  a ≠ a' ∧ (a, a') <br>\n∈ ra ∨ a = a' ∧ (b, b') ∈ rb}\"</p>\n<p>would be more natural.</p>\n<p>I understand that, in the context of wellfoundedness, the irreflexivity <br>\ncondition is implicit. However, &lt;<em>lex</em>&gt;  is naturally used even in other <br>\ncontexts. For example, the effect is inherited by the ordinary lenlex in <br>\nList.thy,</p>\n<p>lemma \"(a, a) ∈ r ⟹ length xs = length ys ⟹ (a # xs, a # ys) ∈ lenlex r\"<br>\n   by (simp add: Cons_lenlex_iff)</p>\n<p>Even lexord, where wellfoundedness of r is lost anyway, is explicitly <br>\ndefined this way, and we have</p>\n<p>lemma \"(a, a) ∈ r ⟹ (a # xs, a # ys) ∈ lexord r\"<br>\n   by simp</p>\n<p>so it is probably by design. What is the motivation?</p>\n<p>Again I would expect the following definition of lexord which works <br>\nperfectly in the usual context of a linear order on letters:</p>\n<p>definition lexord :: \"('a × 'a) set ⇒ ('a list × 'a list) set\" where<br>\n\"lexord r = {(x,y). ∃ a v. y = x @ a # v ∨<br>\n             (∃ u a b v w. (a,b) ∈ r ∧ a ≠ b ∧ x = u @ (a # v) ∧ y = u @ <br>\n(b # w))}\"</p>\n<p>Best regards</p>\n<p>Stepan</p>",
        "id": 206468349,
        "sender_full_name": "Email Gateway",
        "timestamp": 1597070494
    },
    {
        "content": "<p>From: Bertram Felgenhauer via Cl-isabelle-users &lt;<a href=\"mailto:cl-isabelle-users@lists.cam.ac.uk\">cl-isabelle-users@lists.cam.ac.uk</a>&gt;<br>\nStepan Holub wrote:</p>\n<blockquote>\n<p>Dear all,</p>\n<p>the definition of the lexicographical product &lt;<em>lex</em>&gt; in HOL<br>\n(Wellfounded.thy) is counter-intuitive for any relation with nonempty<br>\ndiagonal. In particular, we have</p>\n<p>lemma \"(a,a) ∈ r ⟹ ((a,b),(a,c)) ∈ r &lt;<em>lex</em>&gt; s\"<br>\n  by simp</p>\n</blockquote>\n<p>Sorry for the late reply... I wish I had seen this sooner.</p>\n<p>I'd guess that the definition of lex_prod was chosen with strict<br>\npartial orders in mind. This is not much of a limitation; you can<br>\nalways extract the strict part of the first relation before using<br>\n&lt;<em>lex</em>&gt;, where <code>strict_part R = R - R¯</code>. One could (and I would) also<br>\nargue that while surprising, the construction does something useful<br>\nand interesting for preorders.</p>\n<p>Changing the definition now causes considerable pain (see<br>\nisabelle-dev), partly because the extra inequality check messes up<br>\nexisting proofs, and partly because it's actually being used for<br>\npreorders (and has nice properties like preserving transitivity) that<br>\nthe change loses. I think the former speaks strongly against <em>any</em><br>\nchange of the lex_prod definition now.</p>\n<p>If it is changed, it should properly extract the strict part of the<br>\nrelation rather than just adding a disequality check (which is only<br>\nequivalent for partial orders).</p>\n<blockquote>\n<p>so it is probably by design. What is the motivation?</p>\n</blockquote>\n<p>I think the motivation was to keep the definition as simple as<br>\npossible for the use case it was designed for (strict orders);<br>\nany complication will end up making proofs more difficult.</p>\n<p>And, by now, people (like myself) have come to rely on its behavior<br>\nfor preorders. I never imagined anybody would touch this widely used<br>\ndefinition, ever...</p>\n<p>Cheers,</p>\n<p>Bertram</p>",
        "id": 207610689,
        "sender_full_name": "Email Gateway",
        "timestamp": 1597998805
    }
]