[
    {
        "content": "<p>From: Kevin Kappelmann &lt;<a href=\"mailto:kevin.kappelmann@tum.de\">kevin.kappelmann@tum.de</a>&gt;<br>\nHello,</p>\n<p>Unlike Parse.enum1, the definition of Parse.enum1' does not include a <br>\ncut. This causes unhelpful error messages down the road, as exemplified <br>\nin below theory (tested with Isabelle version 3032bc7d613d (i.e. latest <br>\ndevelopment version)).</p>\n<p>Would it be possible to include \"!!!+\" and \"enum1'\" from below theory in <br>\nthe standard distribution (in parse.ML)?</p>\n<p>Best wishes,</p>\n<p>Kevin</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">theory</span><span class=\"w\"> </span><span class=\"n\">Scratch</span>\n<span class=\"w\">   </span><span class=\"kp\">imports</span>\n<span class=\"w\">     </span><span class=\"n\">Main</span>\n<span class=\"k\">begin</span>\n\n<span class=\"k\">ML</span><span class=\"s\">‹</span>\n<span class=\"s\">fun get_tokens_pos [] = \" (end-of-input)\"</span>\n<span class=\"s\">   | get_tokens_pos (tok :: _) = Position.here (Token.pos_of tok);</span>\n\n<span class=\"s\">(*generalisation of Parse.cut*)</span>\n<span class=\"s\">fun cut get_pos kind scan =</span>\n<span class=\"s\">   let</span>\n<span class=\"s\">     fun err (x, NONE) = (fn () =&gt; kind ^ get_pos x)</span>\n<span class=\"s\">       | err (x, SOME msg) =</span>\n<span class=\"s\">           (fn () =&gt;</span>\n<span class=\"s\">             let val s = msg () in</span>\n<span class=\"s\">               if String.isPrefix kind s then s</span>\n<span class=\"s\">               else kind ^ get_pos x ^ \": \" ^ s</span>\n<span class=\"s\">             end);</span>\n<span class=\"s\">   in Scan.!! err scan end;</span>\n\n<span class=\"s\">local</span>\n<span class=\"s\">val error_msg = \"Outer syntax error\";</span>\n<span class=\"s\">in</span>\n<span class=\"s\">fun !!! scan = cut get_tokens_pos error_msg scan;</span>\n<span class=\"s\">(*!!! for context parsers (currently missing in the standard distribution)*)</span>\n<span class=\"s\">fun !!!+ scan = cut (get_tokens_pos o snd) error_msg scan;</span>\n<span class=\"s\">end</span>\n\n<span class=\"s\">(*same definition as Parse.enum1*)</span>\n<span class=\"s\">fun enum1 sep scan = scan ::: Scan.repeat (Parse.$$$ sep |-- !!! scan);</span>\n<span class=\"s\">(*now including cuts (unlike Parse.enum1')*)</span>\n<span class=\"s\">fun enum1' sep scan = scan ::: Scan.repeat (Scan.lift (Parse.$$$ sep)</span>\n<span class=\"s\">|-- !!!+ scan);</span>\n<span class=\"s\">(*current definition of Parse.enum1'*)</span>\n<span class=\"s\">(* fun enum1' sep scan = scan ::: Scan.repeat (Scan.lift ($$$ sep) |--</span>\n<span class=\"s\">scan); *)</span>\n\n<span class=\"s\">(*example attributes to show parsing differences*)</span>\n<span class=\"s\">val _ =</span>\n<span class=\"s\">   Theory.setup (</span>\n<span class=\"s\">     Attrib.setup </span><span class=\"ss\">\\&lt;^binding&gt;</span><span class=\"s\">‹withcut›</span>\n<span class=\"s\">       (enum1' \"and\" (Scan.lift Parse.nat) |-- Scan.succeed (K (NONE,</span>\n<span class=\"s\">NONE)))</span>\n<span class=\"s\">       \"withcut\"</span>\n<span class=\"s\">     #&gt; Attrib.setup </span><span class=\"ss\">\\&lt;^binding&gt;</span><span class=\"s\">‹withoutcut›</span>\n<span class=\"s\">       (Parse.enum1' \"and\" (Scan.lift Parse.nat) |-- Scan.succeed (K</span>\n<span class=\"s\">(NONE, NONE)))</span>\n<span class=\"s\">       \"withoutcut\"</span>\n<span class=\"s\">   )</span>\n<span class=\"s\">›</span>\n\n<span class=\"c\">(*</span>\n<span class=\"c\">error/squiggly line at \"this is not a nat\"; error message:</span>\n<span class=\"c\">Outer syntax error⌂: natural number expected,</span>\n<span class=\"c\">but quoted string \"this is not a nat\"⌂ was found</span>\n<span class=\"c\">*)</span>\n<span class=\"k\">declare</span><span class=\"w\"> </span><span class=\"o\">[[</span><span class=\"n\">withcut</span><span class=\"w\"> </span><span class=\"n\">0</span><span class=\"w\"> </span><span class=\"kp\">and</span><span class=\"w\"> </span><span class=\"s\">\"this is not a nat\"</span><span class=\"o\">]]</span>\n<span class=\"c\">(*</span>\n<span class=\"c\">error/squiggly line at \"withoutcut\"; error message:</span>\n<span class=\"c\">Bad arguments for attribute \"withoutcut\"⌂:</span>\n<span class=\"c\">   and \"this is not a nat\"</span>\n<span class=\"c\">*)</span>\n<span class=\"k\">declare</span><span class=\"w\"> </span><span class=\"o\">[[</span><span class=\"n\">withoutcut</span><span class=\"w\"> </span><span class=\"n\">0</span><span class=\"w\"> </span><span class=\"kp\">and</span><span class=\"w\"> </span><span class=\"s\">\"this is not a nat\"</span><span class=\"o\">]]</span>\n\n<span class=\"k\">end</span>\n</code></pre></div>",
        "id": 390729066,
        "sender_full_name": "Email Gateway",
        "timestamp": 1694613328
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nThanks for the hint. That omission goes back to 1998 (Isabelle/769abc29bb8e), <br>\nwhen the \"Args\" parsing was quite different from Isar output syntax (\"Parse\").</p>\n<p>I have now improved the situation for the next release in Isabelle/b8775a63cb35.</p>\n<p>Side-remark: \"the latest development version\" is already long past <br>\n3032bc7d613d. In other words: that expression is ill-defined, it falsely <br>\nassumes a real-time communication channel with synchronisation against the <br>\nrepository history.</p>\n<p>Makarius</p>",
        "id": 398074245,
        "sender_full_name": "Email Gateway",
        "timestamp": 1698064072
    }
]