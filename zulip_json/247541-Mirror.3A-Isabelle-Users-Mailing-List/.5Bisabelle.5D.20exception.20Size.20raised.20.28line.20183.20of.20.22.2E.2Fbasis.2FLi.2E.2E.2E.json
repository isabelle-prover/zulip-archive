[
    {
        "content": "<p>From: Peter Lammich &lt;<a href=\"mailto:cl-isabelle-users@lists.cam.ac.uk\">cl-isabelle-users@lists.cam.ac.uk</a>&gt;<br>\nHi List,</p>\n<p>an innocent print_codesetup (at the end of some sizeable development) <br>\nwill fail with exception Size raised (line 183 of <br>\n\"./basis/LibrarySupport.sml\").</p>\n<p>Just under Main it works fine. What is happening here? And can I still <br>\ninspect the code setup?</p>\n<p>Example:</p>\n<p>theory Scratch<br>\nimports Refine_Imperative_HOL.IICF (* from AFP *)<br>\nbegin</p>\n<p>print_codesetup</p>\n<p>(<em>exception Size raised (line 183 of \"./basis/LibrarySupport.sml\")</em>)<br>\nend</p>\n<p>--</p>\n<p>Peter</p>",
        "id": 518364122,
        "sender_full_name": "Email Gateway",
        "timestamp": 1747330812
    },
    {
        "content": "<p>From: Jan van Br√ºgge &lt;<a href=\"mailto:jan@vanbruegge.de\">jan@vanbruegge.de</a>&gt;<br>\nHi Peter,</p>\n<p>this error is thrown when there is not enough memory for the ML process. <br>\nBy default Isabelle uses the 32-bit version of PolyML, so switching on <br>\nthe option \"ML_system_64\" should fix that.</p>\n<p>Cheers,<br>\nJan</p>\n<p>Am 15.05.25 um 18:39 schrieb Peter Lammich (via cl-isabelle-users <br>\nMailing List):</p>\n<blockquote>\n<p>Hi List,</p>\n<p>an innocent print_codesetup (at the end of some sizeable development) <br>\nwill fail with exception Size raised (line 183 of <br>\n\"./basis/LibrarySupport.sml\").</p>\n<p>Just under Main it works fine. What is happening here? And can I still <br>\ninspect the code setup?</p>\n<p>Example:</p>\n<p>theory Scratch<br>\nimports Refine_Imperative_HOL.IICF (* from AFP *)<br>\nbegin</p>\n<p>print_codesetup</p>\n<p>(<em>exception Size raised (line 183 of \"./basis/LibrarySupport.sml\")</em>)<br>\nend</p>\n<p>-- </p>\n<p>Peter</p>\n</blockquote>",
        "id": 518366675,
        "sender_full_name": "Email Gateway",
        "timestamp": 1747331676
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nOn 15/05/2025 19:39, Peter Lammich (via cl-isabelle-users Mailing List) wrote:</p>\n<blockquote>\n<p>Hi List,</p>\n<p>an innocent print_codesetup (at the end of some sizeable development) will <br>\nfail with exception Size raised (line 183 of \"./basis/LibrarySupport.sml\").</p>\n<p>Just under Main it works fine. What is happening here? And can I still inspect <br>\nthe code setup?</p>\n</blockquote>\n<p>This problem is new in Isabelle2025, because that provides much more markup in <br>\npretty-printed output (types, terms, theorems etc.). You can avoid it by <br>\ndisabling most markup like this:</p>\n<p>declare [[show_markup = false]]</p>\n<p>The underlying problem is a size limit for Poly/ML strings, which is 64MB for <br>\nthe default 64_32 memory model. The limit is much larger for bulky 64 bit <br>\nmode. So ML_system_64 = true in etc/preferences is an alternative approach.</p>\n<p>In the meantime I have refined the situation in various respects. The <br>\nnon-scalability of print_codesetup is addressed here:</p>\n<p>changeset:   82586:7415414bd9d8<br>\nuser:        wenzelm<br>\ndate:        Fri Apr 25 11:22:25 2025 +0200<br>\nfiles:       src/HOL/Library/code_lazy.ML <br>\nsrc/HOL/SPARK/Tools/spark_commands.ML <br>\nsrc/HOL/Tools/Quickcheck/find_unused_assms.ML src/HOL/Tools/inductive.ML <br>\nsrc/Provers/classical.ML src/Pure/General/pretty.ML src/Pure/Isar/attrib.ML <br>\nsrc/Pure/Isar/bundle.ML src/Pure/Isar/calculation.ML src/Pure/Isar/class.ML <br>\nsrc/Pure/Isar/code.ML src/Pure/Isar/context_rules.ML src/Pure/Isar/method.ML <br>\nsrc/Pure/Isar/outer_syntax.ML src/Pure/Isar/proof_context.ML src/Pure/Pure.thy <br>\nsrc/Pure/Syntax/syntax.ML src/Pure/Syntax/syntax_phases.ML <br>\nsrc/Pure/Thy/document_antiquotation.ML src/Tools/Code/code_preproc.ML <br>\nsrc/Tools/induct.ML src/Tools/subtyping.ML<br>\ndescription:<br>\nmore scalable: discontinue odd shortcuts from 6b3739fee456, which produce <br>\nbulky strings internally;</p>\n<blockquote>\n<p>Example:</p>\n<p>theory Scratch<br>\nimports Refine_Imperative_HOL.IICF (* from AFP *)<br>\nbegin</p>\n<p>print_codesetup</p>\n<p>(<em>exception Size raised (line 183 of \"./basis/LibrarySupport.sml\")</em>)<br>\nend</p>\n</blockquote>\n<p>Just for fun, I have measured the size of the output in current <br>\nIsabelle/b5b3082c9866 + AFP/d6aa42f2ef8d:</p>\n<p>* show_markup = true: approx. 70MB<br>\n   * show_markup = false: approx. 10MB</p>\n<p>That shows that my old saying when introducing markup in pretty-printing some <br>\ndecades ago is still correct: \"We don't print several GBs of text\". Java <br>\nString is actually limited by 1G, but both in Isabelle/ML and Isabelle/Scala <br>\nthe key types Pretty.T and XML.Tree are not limited by that. Transfer of <br>\nmessages now also works via Bytes.T, which can get very large.</p>\n<p>The remaining problems are nostalgic (and usually pointless) uses of type <br>\nstring, like we have seen here.</p>\n<p>Makarius</p>",
        "id": 519621196,
        "sender_full_name": "Email Gateway",
        "timestamp": 1747836225
    }
]