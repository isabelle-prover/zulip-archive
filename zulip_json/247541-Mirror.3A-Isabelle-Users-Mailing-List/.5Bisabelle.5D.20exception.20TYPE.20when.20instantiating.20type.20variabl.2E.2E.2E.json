[
    {
        "content": "<p>From: Kevin Kappelmann &lt;<a href=\"mailto:kevin.kappelmann@tum.de\">kevin.kappelmann@tum.de</a>&gt;<br>\nDear list,</p>\n<p>I am using a tactic that, among other things, instantiates type <br>\nvariables. Unfortunately, it seems that the instantiation of type <br>\nvariables as part of an Isar proof raises TYPE exceptions (\"Variable has <br>\ntwo distinct types\") in some cases. Below, you can find a minimal example.</p>\n<p>The exception is not raised by the tactic itself, as illustrated in the <br>\nminimal example. I suspect it is raised at some outer layer (maybe the <br>\nIsar toplevel?). I know very little of this side of Isabelle and find it <br>\nvery difficult to debug. Any help would be greatly appreciated!</p>\n<p>Isabelle version: f1f08ca40d96 (development version)</p>\n<p>Best wishes,</p>\n<p>Kevin</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">theory</span><span class=\"w\"> </span><span class=\"n\">Scratch</span>\n<span class=\"w\">   </span><span class=\"kp\">imports</span><span class=\"w\"> </span><span class=\"n\">Pure</span>\n<span class=\"k\">begin</span>\n\n<span class=\"k\">declare</span><span class=\"w\"> </span><span class=\"o\">[[</span><span class=\"n\">show_types</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">show_sorts</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">show_hyps</span><span class=\"o\">]]</span>\n<span class=\"k\">ML</span><span class=\"s\">‹</span>\n<span class=\"s\">   val inst_tac = Thm.instantiate</span>\n<span class=\"s\">     (TVars.make [(((\"'a\", 0), []), @{ctyp prop})], Vars.empty) #&gt;</span>\n<span class=\"s\">Seq.single</span>\n<span class=\"s\">›</span>\n\n<span class=\"n\">schematic_goal</span><span class=\"w\"> </span><span class=\"s\">\"PROP ((?f :: ?'a ⇒ _) (x :: ?'a))\"</span>\n<span class=\"w\">   </span><span class=\"c\">(*this works*)</span>\n<span class=\"w\">   </span><span class=\"kt\">ML_val</span><span class=\"s\">‹@{Isar.goal} |&gt; #goal |&gt; inst_tac |&gt; Seq.list_of›</span>\n<span class=\"w\">   </span><span class=\"c\">(*exception TYPE raised (line 116 of \"envir.ML\"): Variable has two</span>\n<span class=\"c\">distinct types*)</span>\n<span class=\"w\">   </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"w\"> </span><span class=\"s\">‹inst_tac›</span><span class=\"o\">)</span>\n<span class=\"w\">   </span><span class=\"gr\">oops</span>\n\n<span class=\"n\">schematic_goal</span><span class=\"w\"> </span><span class=\"s\">\"PROP ((f :: ?'a ⇒ _) (x :: ?'a))\"</span>\n<span class=\"w\">   </span><span class=\"c\">(*in contrast, this works*)</span>\n<span class=\"w\">   </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"w\"> </span><span class=\"s\">‹inst_tac›</span><span class=\"o\">)</span>\n<span class=\"w\">   </span><span class=\"gr\">oops</span>\n\n<span class=\"k\">end</span>\n</code></pre></div>",
        "id": 417711266,
        "sender_full_name": "Email Gateway",
        "timestamp": 1706123881
    },
    {
        "content": "<p>From: Kevin Kappelmann &lt;<a href=\"mailto:kevin.kappelmann@tum.de\">kevin.kappelmann@tum.de</a>&gt;<br>\nI was reminded that there is an ML exception trace option. Enabling it <br>\nprovides me with the following output, indicating a problem in <br>\n<code>Proof_Display.pretty_goal_inst</code>:</p>\n<p>Exception trace - exception TYPE raised (line 116 of \"envir.ML\"): <br>\nVariable has two distinct types<br>\n   Envir.var_clash (line 115 of \"envir.ML\")<br>\n   Envir.lookup_check (line 118 of \"envir.ML\")<br>\n   Envir.subst_term2(2)subst (line 361 of \"envir.ML\")<br>\n   Same.commit (line 33 of \"General/same.ML\")<br>\n   Proof_Display.pretty_goal_inst(3)prt_inst(1)inst (line 280 of <br>\n\"Isar/proof_display.ML\")<br>\n   Proof_Display.pretty_goal_inst(3)prt_inst (line 265 of <br>\n\"Isar/proof_display.ML\")<br>\n   Proof_Display.pretty_goal_inst (line 261 of \"Isar/proof_display.ML\")<br>\n   Proof.pretty_state(1)prt_goal (line 380 of \"Isar/proof.ML\")<br>\n   Proof.pretty_state (line 373 of \"Isar/proof.ML\")<br>\n   Toplevel.pretty_state (line 239 of \"Isar/toplevel.ML\")<br>\n   _-(4)(1)(1) (line 484 of \"PIDE/command.ML\")<br>\n   Command.make_print(8)process(1)(1) (line 327 of \"PIDE/command.ML\")</p>",
        "id": 418075025,
        "sender_full_name": "Email Gateway",
        "timestamp": 1706187856
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;</p>\n<blockquote>\n<p>On 24.01.24 20:17, Kevin Kappelmann wrote:</p>\n<blockquote>\n<p>I am using a tactic that, among other things, instantiates type variables. <br>\nUnfortunately, it seems that the instantiation of type variables as part of <br>\nan Isar proof raises TYPE exceptions (\"Variable has two distinct types\") in <br>\nsome cases. Below, you can find a minimal example.</p>\n<p>The exception is not raised by the tactic itself, as illustrated in the <br>\nminimal example. I suspect it is raised at some outer layer (maybe the Isar <br>\ntoplevel?). I know very little of this side of Isabelle and find it very <br>\ndifficult to debug. Any help would be greatly appreciated!</p>\n<p>Isabelle version: f1f08ca40d96 (development version)</p>\n</blockquote>\n</blockquote>\n<blockquote>\n<blockquote>\n<p>```isabelle</p>\n<p>theory Scratch<br>\n   imports Pure<br>\nbegin</p>\n<p>declare [[show_types, show_sorts, show_hyps]]<br>\nML‹<br>\n   val inst_tac = Thm.instantiate<br>\n     (TVars.make [(((\"'a\", 0), []), @{ctyp prop})], Vars.empty) #&gt; Seq.single<br>\n›</p>\n<p>schematic_goal \"PROP ((?f :: ?'a ⇒ _) (x :: ?'a))\"<br>\n   (<em>this works</em>)<br>\n   ML_val‹@{Isar.goal} |&gt; #goal |&gt; inst_tac |&gt; Seq.list_of›<br>\n   (*exception TYPE raised (line 116 of \"envir.ML\"): Variable has two <br>\ndistinct types*)<br>\n   apply (tactic ‹inst_tac›)<br>\n   oops</p>\n<p>schematic_goal \"PROP ((f :: ?'a ⇒ _) (x :: ?'a))\"<br>\n   (<em>in contrast, this works</em>)<br>\n   apply (tactic ‹inst_tac›)<br>\n   oops</p>\n<p>end</p>\n<p>```</p>\n</blockquote>\n</blockquote>\n<p><a href=\"/user_uploads/14278/NNA9vdXua1I51-n-ITimzLfY/ch\">ch</a></p>",
        "id": 418617313,
        "sender_full_name": "Email Gateway",
        "timestamp": 1706528057
    }
]