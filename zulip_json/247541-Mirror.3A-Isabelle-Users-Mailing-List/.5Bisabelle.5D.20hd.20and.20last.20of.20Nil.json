[
    {
        "content": "<p>From: Stepan Holub &lt;<a href=\"mailto:holub@karlin.mff.cuni.cz\">holub@karlin.mff.cuni.cz</a>&gt;<br>\nHi,</p>\n<p>it is true that hd [] = last [] (= undefined):</p>\n<p>lemma \"hd Nil = last Nil\"<br>\n   unfolding hd_def last_def by simp</p>\n<p>This in particular implies that both</p>\n<p>lemma hd_rev: \"xs ≠ [] ⟹ hd(rev xs) = last xs\"<br>\nand<br>\nlemma last_rev: \"xs ≠ [] ⟹ last(rev xs) = hd xs\"</p>\n<p>happen to hold without the assumption. Is this cheating?</p>\n<p>Best regards</p>\n<p>Stepan</p>",
        "id": 231703443,
        "sender_full_name": "Email Gateway",
        "timestamp": 1616617842
    },
    {
        "content": "<p>From: Lawrence Paulson &lt;<a href=\"mailto:lp15@cam.ac.uk\">lp15@cam.ac.uk</a>&gt;<br>\nI don’t think it’s cheating. I think it’s great!<br>\nLarry</p>",
        "id": 231712351,
        "sender_full_name": "Email Gateway",
        "timestamp": 1616621577
    },
    {
        "content": "<p>From: Manuel Eberl &lt;<a href=\"mailto:eberlm@in.tum.de\">eberlm@in.tum.de</a>&gt;<br>\nPhilosophically, I think it is not a good idea to rely on the behaviour<br>\nof functions outside their domain. From the point of view of robustness,<br>\nthis is also the case, since any change in this ‘unspecified behaviour’<br>\nwill break your proofs.</p>\n<p>From a practical point of view, I would say: if it makes your life<br>\neasier, go for it. The definitions of hd and tl are highly unlikely to<br>\nchange.</p>\n<p>Experience has shown that while it may seem more \"honest\" to leave<br>\nfunctions \"as unspecified as possible\" outside their domain, it just<br>\nmakes things unnecessarily different. This is why I e.g. like to give<br>\nfunctions some reasonable \"dummy\" value at points at which they are not<br>\ndefined, such as \"0\" for functions that return numbers. This is also<br>\nwhat we do for \"x / 0\". Every now and then, somebody comes along and<br>\ncomplains about it, but the reality is that it doesn't break anything<br>\nand makes some things in practice a little easier.</p>\n<p>(for example, if you let ln be <em>completely</em> undefined on the negative<br>\nnumbers, it would no longer be a unconditionally measurable function,<br>\nwhich confuses the automation for measurability to no end)</p>\n<p>Cheers,</p>\n<p>Manuel</p>",
        "id": 231714367,
        "sender_full_name": "Email Gateway",
        "timestamp": 1616622401
    },
    {
        "content": "<p>From: Stepan Holub &lt;<a href=\"mailto:holub@karlin.mff.cuni.cz\">holub@karlin.mff.cuni.cz</a>&gt;<br>\nFrom the practical point of view, this makes the reasoning about the <br>\nreversal symmetry a lot easier.</p>\n<p>Philosophically, the symmetry suggests that the dummy value for both hd <br>\nNil and last Nil should be the same in any eventual re-definition.</p>\n<p>It is interesting to note that the symmetry does not hold for nth. More <br>\nprecisely, the assumption in<br>\nlemma rev_nth:<br>\n   \"n &lt; size xs ⟹ rev xs ! n = xs ! (length xs - Suc n)\"<br>\ncannot be dropped.<br>\nIn this case, a dummy constant function for \"nth Nil\" would help.</p>\n<p>Stepan</p>",
        "id": 231757193,
        "sender_full_name": "Email Gateway",
        "timestamp": 1616657137
    },
    {
        "content": "<p>From: Tjark Weber &lt;<a href=\"mailto:tjark.weber@it.uu.se\">tjark.weber@it.uu.se</a>&gt;<br>\nStronger assumptions allow to prove more theorems, but they hold for<br>\nfewer models.</p>\n<p>Of course, nothing \"breaks\" as long as the thing you want to reason<br>\nabout satisfies these assumptions. But if you want to use Isabelle's hd<br>\nand last to formalize something, you'll now have to think twice to make<br>\nsure that \"hd [] = last []\" holds for your application; otherwise, your<br>\nformalization is unsound.</p>\n<p>Most importantly, you'll have to be aware that this is even an issue. I<br>\nthink this could be surprising to many users, especially since it is<br>\nnot obvious from the definitions of hd and last.</p>\n<p>(On the other hand, HOL is a logic of total functions, so hd [] and<br>\nlast [] would still exist even if they were left unspecified. I<br>\nacknowledge that this might already be surprising to some users.)</p>\n<p>Best,<br>\nTjark</p>\n<p>När du har kontakt med oss på Uppsala universitet med e-post så innebär det att vi behandlar dina personuppgifter. För att läsa mer om hur vi gör det kan du läsa här: <a href=\"http://www.uu.se/om-uu/dataskydd-personuppgifter/\">http://www.uu.se/om-uu/dataskydd-personuppgifter/</a></p>\n<p>E-mailing Uppsala University means that we will process your personal data. For more information on how this is performed, please read here: <a href=\"http://www.uu.se/en/about-uu/data-protection-policy\">http://www.uu.se/en/about-uu/data-protection-policy</a></p>",
        "id": 231775993,
        "sender_full_name": "Email Gateway",
        "timestamp": 1616667831
    },
    {
        "content": "<p>From: Manuel Eberl &lt;<a href=\"mailto:eberlm@in.tum.de\">eberlm@in.tum.de</a>&gt;<br>\nThat sentence was directed more at the recurring discussion of whether<br>\ndefining \"x / 0 = 0\" leads to logical inconsistencies (which it clearly<br>\ndoesn't).</p>\n<p>I agree that these choices do have <em>some</em> potentially negative<br>\nconsequences. But a total logic like HOL, especially combined with the<br>\nlack of dependent types, simply isn't made for dealing with undefined<br>\nthings properly.</p>\n<p>And even in systems that do have dependent types, I think people often<br>\nresort to \"dummy values\" for things like \"division by zero\" or instead<br>\nof restricting the input type.</p>\n<p>Manuel<br>\n<a href=\"/user_uploads/14278/U638bd7OjZo2-MOR4P53ghwp/smime.p7s\">smime.p7s</a></p>",
        "id": 231821520,
        "sender_full_name": "Email Gateway",
        "timestamp": 1616685833
    },
    {
        "content": "<p>From: Jeremy Dawson &lt;<a href=\"mailto:Jeremy.Dawson@anu.edu.au\">Jeremy.Dawson@anu.edu.au</a>&gt;<br>\nMaybe it \"clearly\" doesn't, but that's not the question which bugs me.</p>\n<p>the important question to me is: if you say x / 0 = 0, does this enable <br>\nyou to prove a theorem, which isn't true in ordinary arithmetic, and <br>\nwhich doesn't obviously contain some feature indicating that it relies <br>\non dividing by zero?</p>\n<p>If so, it is surely a rather dangerous thing to do.</p>\n<p>Jeremy</p>",
        "id": 231889108,
        "sender_full_name": "Email Gateway",
        "timestamp": 1616712984
    },
    {
        "content": "<p>From: \"John F. Hughes\" &lt;<a href=\"mailto:jfh@cs.brown.edu\">jfh@cs.brown.edu</a>&gt;<br>\nI was unhappy with this notion of \"total functions\" from my first moments<br>\nlearning Isabelle, but I sucked it up and tried anyhow. I'd love to see,<br>\nsay, two different versions of the most basic parts of Isabelle in which<br>\nstuff like this occurs, one of which defines x/0 to be 0, the other of<br>\nwhich defines it to be, say, 17. If the theorems you can prove are all<br>\nprovable in both situations, then I'd be a lot happier. Sure, it doesn't<br>\nensure Jeremy's criterion, but at least it'd help ease the minds of new<br>\nusers.</p>",
        "id": 231891115,
        "sender_full_name": "Email Gateway",
        "timestamp": 1616714137
    },
    {
        "content": "<p>From: Mario Carneiro &lt;<a href=\"mailto:di.gama@gmail.com\">di.gama@gmail.com</a>&gt;<br>\nNo it doesn't, and it's not hard to prove this either. As long as the<br>\n<em>statement</em> does not make direct use of the value of x / 0, you can replace<br>\nall occurrences of x / y with x /' y where x /' y has any other value you<br>\nlike at y=0, and all the same theorems will hold. Regardless of whether x /<br>\ny is used in the proof, because it is a definition which is a conservative<br>\nextension, it does not enhance the logical strength of the system so you<br>\ncan prove all the same theorems about x /' y. So for instance, if you prove<br>\nFLT relying on this definition of division, then you can also prove FLT<br>\nwithout that definition, or where the definition has some different<br>\nbehavior at 0, because FLT doesn't have a division sign in it. This is what<br>\nit means for a definition to be conservative.</p>\n<p>Mario Carneiro</p>",
        "id": 231892581,
        "sender_full_name": "Email Gateway",
        "timestamp": 1616715277
    },
    {
        "content": "<p>From: \"Norrish, Michael (Data61, Acton)\" &lt;<a href=\"mailto:Michael.Norrish@data61.csiro.au\">Michael.Norrish@data61.csiro.au</a>&gt;<br>\nThat won’t happen.  If inv 0 is defined to be zero, then you get the nice theorem</p>\n<p>inv (inv x) = x</p>\n<p>without a precondition.  Making inv 0 = 17 wrecks this (inv is no longer injective).</p>\n<p>Michael</p>",
        "id": 231892644,
        "sender_full_name": "Email Gateway",
        "timestamp": 1616715334
    },
    {
        "content": "<p>From: Tjark Weber &lt;<a href=\"mailto:tjark.weber@it.uu.se\">tjark.weber@it.uu.se</a>&gt;<br>\nOn Thu, 2021-03-25 at 19:15 -0400, John F. Hughes wrote:</p>\n<blockquote>\n<p>I was unhappy with this notion of \"total functions\" from my first<br>\nmoments learning Isabelle, but I sucked it up and tried anyhow. I'd<br>\nlove to see, say, two different versions of the most basic parts of<br>\nIsabelle in which stuff like this occurs, one of which defines x/0 to<br>\nbe 0, the other of which defines it to be, say, 17. If the theorems<br>\nyou can prove are all provable in both situations, then I'd be a lot<br>\nhappier. [...]</p>\n</blockquote>\n<p>That is (clearly) not the case. For starters, you'll be able to prove<br>\nx/0 = 0 in one theory and x/0 = 17 in the other.</p>\n<p>If you are willing to accept that x/0 denotes some value (because we<br>\nare working in a logic of total functions), but don't want theorems<br>\nthat depend on the specific value of x/0, the proper solution is to<br>\nleave the value of x/0 unspecified.</p>\n<p>Without further assumptions about x/0, you'll then only be able to<br>\nprove theorems that hold regardless of what the specific value of x/0<br>\nis.</p>\n<p>Best,<br>\nTjark</p>\n<blockquote>\n<p>On Thu, Mar 25, 2021 at 6:56 PM Jeremy Dawson &lt;<br>\n<a href=\"mailto:Jeremy.Dawson@anu.edu.au\">Jeremy.Dawson@anu.edu.au</a>&gt; wrote:<br>\n&gt;</p>\n<p>On 26/3/21 2:23 am, Manuel Eberl wrote:</p>\n<blockquote>\n<blockquote>\n<p>That sentence was directed more at the recurring discussion of<br>\nwhether<br>\ndefining \"x / 0 = 0\" leads to logical inconsistencies (which it<br>\nclearly<br>\ndoesn't).</p>\n</blockquote>\n<p>Maybe it \"clearly\" doesn't, but that's not the question which bugs<br>\nme.</p>\n<p>the important question to me is: if you say x / 0 = 0, does this<br>\nenable<br>\nyou to prove a theorem, which isn't true in ordinary arithmetic,<br>\nand<br>\nwhich doesn't obviously contain some feature indicating that it<br>\nrelies<br>\non dividing by zero?</p>\n<p>If so, it is surely a rather dangerous thing to do.</p>\n<p>Jeremy</p>\n</blockquote>\n</blockquote>\n<p>När du har kontakt med oss på Uppsala universitet med e-post så innebär det att vi behandlar dina personuppgifter. För att läsa mer om hur vi gör det kan du läsa här: <a href=\"http://www.uu.se/om-uu/dataskydd-personuppgifter/\">http://www.uu.se/om-uu/dataskydd-personuppgifter/</a></p>\n<p>E-mailing Uppsala University means that we will process your personal data. For more information on how this is performed, please read here: <a href=\"http://www.uu.se/en/about-uu/data-protection-policy\">http://www.uu.se/en/about-uu/data-protection-policy</a></p>",
        "id": 231946206,
        "sender_full_name": "Email Gateway",
        "timestamp": 1616756482
    },
    {
        "content": "<p>From: Thomas Sewell &lt;<a href=\"mailto:tals4@cam.ac.uk\">tals4@cam.ac.uk</a>&gt;<br>\nI have a suggestion.</p>\n<p>This sort of topic, about the oddness of totality in HOL, comes up at<br>\nleast three times a year, always provokes a medium-length discussion,<br>\nand the examples differ but the content of the discussion is otherwise<br>\nlargely the same.</p>\n<p>Is there some kind of a note, or wiki discussion, or published paper<br>\nwhich we could post as a reference during these discussions, so as to<br>\ntry to shrink these conversations and the associated effort involved<br>\ndown closer to novel contributions? I can't think of such a reference,<br>\ndoes anyone know of one? If not, would anyone be interested in writing<br>\none? I guess that one issue is that a good such reference ought to try<br>\nto gather the case for and against.</p>\n<p>Please don't take this as a rebuke to anyone wanting to think and write<br>\nabout this issue: HOL seems quite intuitive until one hits this aspect,<br>\nwhich is thoroughly alien to the way most of us were taught mathematics<br>\nin school. We all needed to process it for a while, and it's natural <br>\nthat<br>\nthis is a social process.</p>\n<p>Cheers,<br>\n     Thomas.</p>",
        "id": 231947147,
        "sender_full_name": "Email Gateway",
        "timestamp": 1616756980
    },
    {
        "content": "<p>From: Kevin Kappelmann &lt;<a href=\"mailto:kevin.kappelmann@tum.de\">kevin.kappelmann@tum.de</a>&gt;<br>\nI think the blog post by Joachim Breitner is a good reference:</p>\n<p><a href=\"https://www.joachim-breitner.de/blog/732-Isabelle_functions__Always_total%2C_sometimes_undefined\">https://www.joachim-breitner.de/blog/732-Isabelle_functions__Always_total%2C_sometimes_undefined</a></p>\n<p>Kevin</p>",
        "id": 231948232,
        "sender_full_name": "Email Gateway",
        "timestamp": 1616757582
    },
    {
        "content": "<p>From: Stepan Holub &lt;<a href=\"mailto:holub@karlin.mff.cuni.cz\">holub@karlin.mff.cuni.cz</a>&gt;<br>\nDear Thomas,</p>\n<p>I think this is not a question of new waves of surprised newcomers only.</p>\n<p>In addition to a wiki for those who need to digest that all functions <br>\nare total in HOL, it would be also nice to have a detailed documentation <br>\n(or another section on the wiki) for slightly advanced users.<br>\nConcerning primrec, for instance, the reference manual is a bit <br>\nenigmatic and says:<br>\n\" For missing constructors, the function is defined to return<br>\na default value, but this equation is made difficult to access for <br>\nusers.\" (Indeed!)</p>\n<p>Similarly, it is not clear whether \"undefined :: 'a ⇒ 'b\"<br>\nreturns \"undefined :: 'b\" for any value of type 'a or not.<br>\nI learned from this list that this is not the case (which is expected), <br>\nbut I also learned that this has changed at some point (a published <br>\npaper could be dangerous!).</p>\n<p>How about the unspecified values from \"fun\" which should be also set to <br>\n\"undefined\" according to the warning? Made even more difficult to access <br>\nfor users?</p>\n<p>Is there any documentation for this that one could easily consult <br>\n(instead of spamming this list)?<br>\nThe blog post by Joachim Breitner is useful to a great extent but it <br>\ndoes not answer the above questions.</p>\n<p>Best regards</p>\n<p>Stepan</p>",
        "id": 231972422,
        "sender_full_name": "Email Gateway",
        "timestamp": 1616768525
    },
    {
        "content": "<p>From: Thomas Sewell &lt;<a href=\"mailto:tals4@cam.ac.uk\">tals4@cam.ac.uk</a>&gt;<br>\nI seem to have brought an end to this round of the conversation,<br>\nwhich may or may not be a good thing.</p>\n<p>Thanks to Kevin Kappelmann for the link to Joachim Breitner's blog<br>\npost. I think that's a good reference, and makes the totality of<br>\nfunctions in HOL very clear.</p>\n<p>I think that there are still some common questions to be answered,<br>\nand/or lessons to be taught.</p>\n<p>The first is that, although it's possible to change things and use the<br>\noption type to make undefined values clearer, this is hardly<br>\ndesirable.</p>\n<p>The next is that, given that \"0 / 1\" and \"hd []\" must be normal values,<br>\nthere's not a lot to be gained from setting them to \"obscure\" values<br>\nlike 17, and a little bit to be gained by setting them to sensible<br>\ndefaults which reduce work in the steps of some proofs.</p>\n<p>A related point is that definitions are done in a conservative way, so<br>\nthe definition of the division function in the library is irrelevant to<br>\nthe truth or provability of any statement that doesn't explicitly <br>\nmention<br>\nit.</p>\n<p>Finally, there's Stepan Holub's more advanced question, which I think<br>\nis really about inspecting what the definitional packages have done, and<br>\nwhat hidden facts might exist in the logic. I think that print_theorems<br>\nafter a definitional step usually answers all of these questions, but I<br>\nappreciate that isn't a perfect answer.</p>\n<p>Does anyone feel that there are other topics that would be good to cover<br>\nin some overview or introduction to this issue?</p>\n<p>Cheers,<br>\n     Thomas.</p>",
        "id": 232253558,
        "sender_full_name": "Email Gateway",
        "timestamp": 1617017816
    }
]