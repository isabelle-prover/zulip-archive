[
    {
        "content": "<p>From: Guilherme Silva &lt;<a href=\"mailto:guilhermegfsilva@gmail.com\">guilhermegfsilva@gmail.com</a>&gt;<br>\nHello,</p>\n<p>I found several examples online of how to use the instantiation command to<br>\ndefine an enumeration for a type defined using datatype, such as this post:</p>\n<p><a href=\"https://stackoverflow.com/questions/54879738/how-to-generate-code-for-the-existential-quantifier\">https://stackoverflow.com/questions/54879738/how-to-generate-code-for-the-existential-quantifier</a></p>\n<p>or in these theories for Enum:</p>\n<p><a href=\"https://isabelle.in.tum.de/library/HOL/HOL/Enum.html\">https://isabelle.in.tum.de/library/HOL/HOL/Enum.html</a><br>\n<a href=\"https://www.isa-afp.org/browser_info/Isabelle2009-1/HOL/FinFun/Enum.html\">https://www.isa-afp.org/browser_info/Isabelle2009-1/HOL/FinFun/Enum.html</a></p>\n<p>My question is if it would be possible to define an instantiation for a<br>\ntype defined using typedecl instead, since due to the nature of typedecl we<br>\nknow nothing about the type itself at its definition. I've been trying to<br>\ndo it by defining a few constants to serve as the enumeration, but all I<br>\nhave so far is this, which isn't working.</p>\n<p>typedecl type1</p>\n<p>consts A :: type1<br>\nconsts B :: type1<br>\nconsts C :: type1</p>\n<p>instantiation type1 :: enum<br>\nbegin<br>\n  definition \"Enum.enum = [G,H,I]\"<br>\n  definition \"Enum.enum_all P = list_all P [G,H,I]\"<br>\n  definition \"Enum.enum_ex P = list_ex P [G,H,I]\"<br>\n  instance proof (* this is where I'm required to write the instance proof,<br>\nbut I'm not sure if it's possible based on what I know about type1. *)<br>\nend</p>\n<p>Could there be another way to do this? I'm required to use typedecl for the<br>\nproject I'm working on.</p>\n<p>Guilherme Silva</p>",
        "id": 397390527,
        "sender_full_name": "Email Gateway",
        "timestamp": 1697667580
    },
    {
        "content": "<p>From: Jan van Br√ºgge &lt;<a href=\"mailto:jan@vanbruegge.de\">jan@vanbruegge.de</a>&gt;<br>\nNo this cannot work. As you said yourself, you know nothing about the type, so you also don't know <em>if</em> it is enumerable.</p>\n<p>The only \"solution\" would be to add an axiom that the type is enumerable, but you should never add new axioms to the theory in your proofs.</p>\n<p>Cheers,<br>\nJan</p>\n<p>Oct 18, 2023 11:19:34 PM Guilherme Silva &lt;<a href=\"mailto:guilhermegfsilva@gmail.com\">guilhermegfsilva@gmail.com</a>&gt;:</p>",
        "id": 397395774,
        "sender_full_name": "Email Gateway",
        "timestamp": 1697671616
    }
]