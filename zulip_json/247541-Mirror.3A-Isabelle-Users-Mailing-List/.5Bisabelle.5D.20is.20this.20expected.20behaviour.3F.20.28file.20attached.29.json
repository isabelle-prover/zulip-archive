[
    {
        "content": "<p>From: David Fuenmayor &lt;<a href=\"mailto:davfuenmayor@gmail.com\">davfuenmayor@gmail.com</a>&gt;<br>\nDear fellow Isabelle users,</p>\n<p>as a non-expert, I am surprised to find out that the following is not a<br>\ntheorem in Isabelle/HOL (more details in attached theory file):</p>\n<p>consts A :: 'a ⇒ bool<br>\nlemma (∀x. A x) ⟶ (∀x. A x) -- counterexample by nitpick</p>\n<p>The reason is that A gets instantiated with one type in the antecedent and<br>\nother in the consequent.<br>\nI understand that this might be totally expected behavior (well, not for<br>\nme, but this is due to me still ignoring many things about how Isabelle<br>\nworks). The issue is that as formulas grow more complex this issue gives<br>\nrise to more subtle (and mean) problems as shown in the attached file.</p>\n<p>Can someone explain which of the illustrated behaviours are expected?<br>\n(and again, sorry for the newbie question ;)</p>\n<p>Best, David<br>\n<a href=\"/user_uploads/14278/W3pMOcEvXIBG7TfFQA1Zlrvf/ExpectedBehaviour.thy\">ExpectedBehaviour.thy</a></p>",
        "id": 256859807,
        "sender_full_name": "Email Gateway",
        "timestamp": 1633775787
    },
    {
        "content": "<p>From: Wenda Li &lt;<a href=\"mailto:wl302@cam.ac.uk\">wl302@cam.ac.uk</a>&gt;<br>\nDear David,</p>\n<p>This is an expected behaviour to me. </p>\n<p>In “consts A :: 'a ⇒ bool”, ‘a is a type variable that can be instantiated to concrete types like int or bool, or be unified with other type variables. In “ (∀x. A x) ⟶ (∀x. A x)”, without explicitly imposing constraints the two bounded variables x don’t have to be of the same type, which makes the statement unprovable. We can, of course, give some type constraints to make it true:</p>\n<p>lemma \"(∀x::'a. A x) ⟶ (∀x::'a. A x)\" by simp</p>\n<p>Cheers,<br>\nWenda</p>",
        "id": 256863633,
        "sender_full_name": "Email Gateway",
        "timestamp": 1633779602
    }
]