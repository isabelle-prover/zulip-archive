[
    {
        "content": "<p>From: Gerwin Klein &lt;<a href=\"mailto:kleing@unsw.edu.au\">kleing@unsw.edu.au</a>&gt;<br>\nX86 instruction semantics and basic block symbolic execution<br>\nby Freek Verbeek, Abhijith Bharadwaj, Joshua Bockenek, Ian Roessle, Timmy Weerwag and Binoy Ravindran</p>\n<p>This AFP entry provides semantics for roughly 120 different X86-64<br>\n  assembly instructions. These instructions include various moves,<br>\n  arithmetic/logical operations, jumps, call/return, SIMD extensions and<br>\n  others. External functions are supported by allowing a user to provide<br>\n  custom semantics for these calls. Floating-point operations are mapped<br>\n  to uninterpreted functions. The model provides semantics for register<br>\n  aliasing and a byte-level little-endian memory model. The semantics<br>\n  are purposefully incomplete, but overapproximative. For example, the<br>\n  precise effect of flags may be undefined for certain instructions, or<br>\n  instructions may simply have no semantics at all. In those cases, the<br>\n  semantics are mapped to universally quantified uninterpreted terms<br>\n  from a locale. Second, this entry provides a method to symbolic<br>\n  execution of basic blocks. The method, called<br>\n  ''se_step'' (for: symbolic execution step) fetches<br>\n  an instruction and updates the current symbolic state while keeping<br>\n  track of assumptions made over the memory model. A key component is a<br>\n  set of theorems that prove how reads from memory resolve after writes<br>\n  have occurred. Thirdly, this entry provides a parser that allows the<br>\n  user to copy-paste the output of the standard disassembly tool objdump<br>\n  into Isabelle/HOL. A couple small and explanatory examples are<br>\n  included, including functions from the word count program. Several<br>\n  examples can be supplied upon request (they are not included due to<br>\n  the running time of verification): functions from the floating-point<br>\n  modulo function from FDLIBM, the GLIBC strlen function and the<br>\n  CoreUtils SHA256 implementation.</p>\n<p><a href=\"https://www.isa-afp.org/entries/X86_Semantics.html\">https://www.isa-afp.org/entries/X86_Semantics.html</a></p>\n<p>Enjoy!<br>\nGerwin</p>",
        "id": 259767444,
        "sender_full_name": "Email Gateway",
        "timestamp": 1635653984
    }
]