[
    {
        "content": "<p>From: Peter Lammich &lt;<a href=\"mailto:lammich@in.tum.de\">lammich@in.tum.de</a>&gt;<br>\nHi,</p>\n<p>to debug a functional program implemented in Isabelle/HOL, I naively<br>\ntried to insert print-statements (as I would do with @{print} in<br>\nIsabelle-ML). The PolyML approach would be</p>\n<p>definition \"print x = x\"<br>\n  code_printing <br>\n  constant print ⇀ (SML) \"(PolyML.print)\"</p>\n<p>definition \"dummy ≡ print (0::integer)\"</p>\n<p>value dummy    <br>\n  ML_val ‹<br>\n    @{code dummy}<br>\n  › <br>\n  *** fails, PolyML.print not available</p>\n<p>However, I learned that since 2016-1, \"Low-level ML system structures<br>\n(like PolyML and RunCall) are no longer<br>\nexposed to Isabelle/ML user-space. Potential INCOMPATIBILITY.</p>\n<p>Also, if I use the same approach as @{print} or @{make_string}, via<br>\nML_system_pretty, I only get the output \"?\" instead of the expected<br>\n\"0\". </p>\n<p>Is there any way to get back a similar functionality, that would<br>\nconvert values of any type into some more or less readable string/trace<br>\noutput. As I only want to use it for debugging, the output strings need<br>\nnot be precise or clean or whatsoever.</p>",
        "id": 273082389,
        "sender_full_name": "Email Gateway",
        "timestamp": 1645705758
    },
    {
        "content": "<p>From: Andreas Lochbihler &lt;<a href=\"mailto:mail@andreas-lochbihler.de\">mail@andreas-lochbihler.de</a>&gt;<br>\nHi Peter,</p>\n<p>Are you aware of HOL-Library.Debug? This theory defines a constant <br>\n<code>flush</code> and code_prints it to Output.tracing in the Eval target. IIRC <br>\nthe @{code} antiquotation uses the code target Eval; if not, you'd have <br>\nto redo the code_printing declarations for SML.</p>\n<p>Hope this helps,<br>\nAndreas</p>",
        "id": 273156306,
        "sender_full_name": "Email Gateway",
        "timestamp": 1645740607
    }
]