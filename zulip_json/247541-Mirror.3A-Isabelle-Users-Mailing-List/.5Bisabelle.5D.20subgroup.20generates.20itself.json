[
    {
        "content": "<p>From: Stepan Holub &lt;<a href=\"mailto:cl-isabelle-users@lists.cam.ac.uk\">cl-isabelle-users@lists.cam.ac.uk</a>&gt;<br>\nHello,</p>\n<p>I needed to show that generators generate the group they generate as a <br>\nsubgroup. This is akin to m_inv_consistent et al.<br>\nOne of those claims that are too obvious until one tries to formalize <br>\nthem.  The proof is below.</p>\n<ol>\n<li>Is this of a general interest?</li>\n<li>Is there a simpler proof? (One could try the infimum condition <br>\ngen_subgroup_is_smallest_containing. The corresponding proof would <br>\napparently be of at least a similar complexity.)</li>\n</ol>\n<p>Stepan</p>\n<p>lemma (in group) gen_span_consistent: assumes \"X ⊆ carrier G\"<br>\n   shows \"⟨X⟩⇘G⦇carrier := (⟨X⟩⇘G⇙)⦈⇙ = ⟨X⟩\" (is \"⟨X⟩⇘?S⇙ = ⟨X⟩\")<br>\nproof<br>\n   have \"X ⊆ ⟨X⟩⇘G⇙\"<br>\n     using gen_span.gen_gens subset_eq by meson<br>\n   interpret span: group ?S<br>\n     using subgroup_imp_group[OF gen_subgroup_is_subgroup[OF assms]].<br>\n   show \"⟨X⟩⇘?S⇙ ⊆ ⟨X⟩\"<br>\n     using span.subgroupE(1)[OF span.gen_subgroup_is_subgroup] ‹X ⊆ <br>\n⟨X⟩⇘G⇙› by simp<br>\n   show \"⟨X⟩ ⊆ ⟨X⟩⇘?S⇙\"<br>\n   proof<br>\n     fix x<br>\n     assume \"x ∈ ⟨X⟩\"<br>\n     then show \"x ∈ ⟨X⟩⇘?S⇙\"<br>\n     apply (rule gen_span.induct)<br>\n     using gen_span.simps apply fastforce<br>\n     using gen_span.gen_gens  apply fastforce<br>\n     using gen_subgroup_is_subgroup[OF assms] gen_span.gen_inv <br>\nm_inv_consistent  apply fastforce<br>\n     using gen_subgroup_is_subgroup[OF assms] gen_span.gen_mult <br>\nsubgroup_mult_equality by fastforce<br>\nqed</p>",
        "id": 492126023,
        "sender_full_name": "Email Gateway",
        "timestamp": 1736177245
    }
]