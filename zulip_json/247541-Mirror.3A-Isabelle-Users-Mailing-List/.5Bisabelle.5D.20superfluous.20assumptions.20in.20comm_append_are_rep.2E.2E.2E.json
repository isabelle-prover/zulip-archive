[
    {
        "content": "<p>From: Stepan Holub &lt;<a href=\"mailto:holub@karlin.mff.cuni.cz\">holub@karlin.mff.cuni.cz</a>&gt;<br>\nDear all,</p>\n<p>assumptions<br>\n  xs ≠ [] and ys ≠ []<br>\nin lemma<br>\ncomm_append_are_replicate<br>\nfrom List.thy<br>\nare superfluous.</p>\n<p>An alternative proof follows.<br>\n(BTW, I wonder whether the way it breaks the symmetry between xs and ys <br>\nis a standard one. It is not the same one as in the original proof.)</p>\n<p>Best regards</p>\n<p>Stepan Holub</p>\n<p>lemma comm_append_are_replicate:<br>\n   \"⟦ xs @ ys = ys @ xs ⟧<br>\n   ⟹ ∃m n zs. concat (replicate m zs) = xs ∧ concat (replicate n zs) = ys\"<br>\nproof (induction \"length (xs @ ys) + length xs\" arbitrary: xs ys rule: <br>\nless_induct)<br>\n   case less<br>\n   consider \"length ys &lt; length xs\" | \"xs = []\" | \"length xs ≤ length ys <br>\n∧ xs ≠ []\"<br>\n     by linarith<br>\n   then show ?case<br>\n   proof (cases)<br>\n     assume \"length ys &lt; length xs\"<br>\n     then show ?thesis<br>\n       using less.hyps[OF _ less.prems[symmetric]] <br>\nnat_add_left_cancel_less by auto<br>\n   next<br>\n     assume \"xs = []\"<br>\n     then have \"concat (replicate 0 ys) = xs ∧ concat (replicate 1 ys) = ys\"<br>\n       by simp<br>\n     then show ?case<br>\n       by blast<br>\n   next<br>\n     assume \"length xs ≤ length ys ∧ xs ≠ []\"<br>\n     then have \"length xs ≤ length ys\" and \"xs ≠ []\"<br>\n       by blast+<br>\n     from ‹length xs ≤ length ys› and  ‹xs @ ys = ys @ xs›<br>\n     obtain ws where \"ys = xs @ ws\"<br>\n       by (auto simp: append_eq_append_conv2)<br>\n     from this and ‹xs ≠ []›<br>\n     have \"length ws &lt; length ys\"<br>\n       by simp<br>\n     from ‹xs @ ys = ys @ xs›[unfolded ‹ys = xs @ ws›]<br>\n     have \"xs @ ws = ws @ xs\"<br>\n       by simp<br>\n     from less.hyps[OF _ this] ‹length ws &lt; length ys›<br>\n     obtain m n' zs where \"concat (replicate m zs) = xs\" and  \"concat <br>\n(replicate n' zs) = ws\"<br>\n       by auto<br>\n     then have \"concat (replicate (m+n') zs) = ys\"<br>\n       using ‹ys = xs @ ws›<br>\n       by (simp add: replicate_add)<br>\n     then show ?case<br>\n       using ‹concat (replicate m zs) = xs› by blast<br>\n   qed<br>\nqed</p>",
        "id": 217997867,
        "sender_full_name": "Email Gateway",
        "timestamp": 1606395183
    },
    {
        "content": "<p>From: Lawrence Paulson &lt;<a href=\"mailto:lp15@cam.ac.uk\">lp15@cam.ac.uk</a>&gt;<br>\nMany thanks!<br>\nLarry</p>",
        "id": 218027684,
        "sender_full_name": "Email Gateway",
        "timestamp": 1606414248
    },
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\nI just commited this, thank you.</p>\n<p>Tobias<br>\n<a href=\"/user_uploads/14278/chPy72RddgwsTopvm7xe0Ip7/smime.p7s\">smime.p7s</a></p>",
        "id": 218029155,
        "sender_full_name": "Email Gateway",
        "timestamp": 1606415518
    }
]