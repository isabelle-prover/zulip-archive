[
    {
        "content": "<p>From: Dominique Unruh &lt;<a href=\"mailto:cl-isabelle-users@lists.cam.ac.uk\">cl-isabelle-users@lists.cam.ac.uk</a>&gt;<br>\nHello,</p>\n<p>I noticed the following behavior: If I have a theorem /test///that uses <br>\n/sorry/, then /thm_oracles test/ should (and usually does) mention <br>\n/skip_proof/ to indicate that /sorry /was used. (And any other oracles <br>\nthat were used.)</p>\n<p>However, when using the Types_To_Sets, the use of /sorry/ can be hidden. <br>\nFor example:</p>\n<p>lemma test: ‹∃Rep Abs. type_definition Rep Abs {0::nat} ⟹ 1=2› sorry<br>\n    lemmas test2 = test[cancel_type_definition]<br>\n    thm_oracles test2<em>(</em> Only shows the oracle<br>\n<strong>/cancel_type_definition/ not /skip_proof///</strong>*) *</p>\n<p>The likely reason for this is that <br>\n/Local_Typedef.cancel_type_definition/ takes the given theorem, checks <br>\nwhether it is suitable to derive the desired theorem, and then throws it <br>\naway and only returns the desired theorem, created via oracle. The <br>\nresult is that the original theorem and its proof are lost from the <br>\nproofterms.</p>\n<p>This also has negative effects on a hypothetical external proofchecker <br>\n(or proof-translator). If the original proofterm was still available, it <br>\ncould replay the proof of that and check externally whether <br>\n/cancel_type_definition///did the right thing. (For example, I am <br>\nworking on a converter to Lean. In the calculus of constructions, what <br>\nTypes_To_Sets does it most likely provable, but one does need the full <br>\nproof them.)</p>\n<p>I see two possible fixes:</p>\n<ol>\n<li>\n<p>Extend the datatype of proofterms in Isabelle such that the<br>\n    constructor /Proofterm.Oracle/ has an additional argument of type<br>\n    /thm list/ that can track all theorems that went into the oracle.<br>\n    This would be very nice because it would provide a general framework<br>\n    for oracles that has assumptions. But it needs changing the format<br>\n    of proofterms and is not a local change to Types_To_Sets.</p>\n</li>\n<li>\n<p>Or, change Types_To_Sets only: Change the ML function<br>\n    /cancel_type_definition_cterm/ /thm/ such that// when /thm/ is of<br>\n    the form /∃Rep Abs. type_definition Rep Abs S ==&gt; P/, it returns not<br>\n    /P/ as it does now, but instead /(//∃Rep Abs. type_definition Rep<br>\n    Abs S ==&gt; P) ==&gt; P/. And then change /cancel_type_definition/ so<br>\n    that it discharges the assumption using the theorem that was input.<br>\n    Logically, this is not \"more sound\" than what is done previously,<br>\n    but it makes sure the original theorem is still to be found in the<br>\n    proofterm (and /thm_oracles/ finds it.) If needed, I could help out<br>\n    this fix.</p>\n</li>\n</ol>\n<p>Best wishes,<br>\nDominique.</p>",
        "id": 310484298,
        "sender_full_name": "Email Gateway",
        "timestamp": 1668627112
    }
]