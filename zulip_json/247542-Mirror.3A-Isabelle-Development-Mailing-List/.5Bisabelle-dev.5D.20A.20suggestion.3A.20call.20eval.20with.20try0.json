[
    {
        "content": "<p>From: \"Dr A. Koutsoukou-Argyraki\" &lt;<a href=\"mailto:ak2110@cam.ac.uk\">ak2110@cam.ac.uk</a>&gt;<br>\nDear all,</p>\n<p>eval is not one of the many methods called by try0, and to my experience <br>\nso far Sledgehammer doesn't suggest it either.<br>\nI've noticed several very simple proofs that work just \"by eval\" and yet <br>\nautomation won't suggest any proof.</p>\n<p>Do people agree that it would be practical to include eval in the <br>\nmethods tried with try0?</p>\n<p>and would this be feasible ?</p>\n<p>Best wishes,<br>\nAngeliki</p>\n<hr>\n<p>isabelle-dev mailing list<br>\n<a href=\"mailto:isabelle-dev@in.tum.de\">isabelle-dev@in.tum.de</a><br>\n<a href=\"https://mailman46.in.tum.de/mailman/listinfo/isabelle-dev\">https://mailman46.in.tum.de/mailman/listinfo/isabelle-dev</a></p>",
        "id": 207023077,
        "sender_full_name": "Email Gateway",
        "timestamp": 1597499845
    },
    {
        "content": "<p>From: Jasmin Blanchette &lt;<a href=\"mailto:j.c.blanchette@vu.nl\">j.c.blanchette@vu.nl</a>&gt;<br>\nDear Angeliki,</p>\n<p>Technically, this would be very feasible. The question is more whether it's desirable to have \"try0\" and Sledgehammer suggest tactics that bypass the LCF-style kernel and its strong guarantees. These are not just \"academic\" worries. Just a few years ago, there was a debilitating bug in \"eval\" that made it succeed every time, even if your conjuecture was literally \"False\". (I can't find it in \"NEWS\", but I vividly remember the discussion on the mailing list.)</p>\n<p>Maybe a mention \"(oracle)\" next to \"eval\" would be enough? If it's clear enough that \"eval\" doesn't have the same status as the other tactics, I wouldn't mind enhancing \"try0\" in this way. Many users who rely on \"try0\" are novices that learn Isabelle and its tactics partly through \"try0\".</p>\n<p>Cheers,</p>\n<p>Jasmin</p>\n<p>P.S. I believe your email might interest other users of Isabelle. You might not reach them by writing to isabelle-dev.</p>\n<hr>\n<p>isabelle-dev mailing list<br>\n<a href=\"mailto:isabelle-dev@in.tum.de\">isabelle-dev@in.tum.de</a><br>\n<a href=\"https://mailman46.in.tum.de/mailman/listinfo/isabelle-dev\">https://mailman46.in.tum.de/mailman/listinfo/isabelle-dev</a></p>",
        "id": 207128001,
        "sender_full_name": "Email Gateway",
        "timestamp": 1597660573
    },
    {
        "content": "<p>From: \"<a href=\"mailto:lammich@in.tum.de\">lammich@in.tum.de</a>\" &lt;<a href=\"mailto:lammich@in.tum.de\">lammich@in.tum.de</a>&gt;</p>\n<hr>\n<p>isabelle-dev mailing list<br>\n<a href=\"mailto:isabelle-dev@in.tum.de\">isabelle-dev@in.tum.de</a><br>\n<a href=\"https://mailman46.in.tum.de/mailman/listinfo/isabelle-dev\">https://mailman46.in.tum.de/mailman/listinfo/isabelle-dev</a></p>",
        "id": 207132076,
        "sender_full_name": "Email Gateway",
        "timestamp": 1597663856
    },
    {
        "content": "<p>From: Manuel Eberl &lt;<a href=\"mailto:eberlm@in.tum.de\">eberlm@in.tum.de</a>&gt;<br>\nYes, that's called code_simp.</p>\n<p>The difference, however, is often several orders of magnitude, which<br>\nmakes code_simp unfeasible in most cases.</p>\n<p>I always wondered /why/ it is that slow and whether this is just not<br>\noptimised that well or whether it's some unavoidable bottleneck.</p>\n<p>Manuel</p>\n<hr>\n<p>isabelle-dev mailing list<br>\n<a href=\"mailto:isabelle-dev@in.tum.de\">isabelle-dev@in.tum.de</a><br>\n<a href=\"https://mailman46.in.tum.de/mailman/listinfo/isabelle-dev\">https://mailman46.in.tum.de/mailman/listinfo/isabelle-dev</a></p>",
        "id": 207132698,
        "sender_full_name": "Email Gateway",
        "timestamp": 1597664403
    },
    {
        "content": "<p>From: \"<a href=\"mailto:lammich@in.tum.de\">lammich@in.tum.de</a>\" &lt;<a href=\"mailto:lammich@in.tum.de\">lammich@in.tum.de</a>&gt;</p>\n<hr>\n<p>isabelle-dev mailing list<br>\n<a href=\"mailto:isabelle-dev@in.tum.de\">isabelle-dev@in.tum.de</a><br>\n<a href=\"https://mailman46.in.tum.de/mailman/listinfo/isabelle-dev\">https://mailman46.in.tum.de/mailman/listinfo/isabelle-dev</a></p>",
        "id": 207134704,
        "sender_full_name": "Email Gateway",
        "timestamp": 1597665850
    },
    {
        "content": "<p>From: Florian Haftmann &lt;<a href=\"mailto:florian.haftmann@informatik.tu-muenchen.de\">florian.haftmann@informatik.tu-muenchen.de</a>&gt;<br>\nThere is e.g. no proper counter part for abstract data types.  Nowadays<br>\nI would not consider code_simp a serious business any longer.</p>\n<p>Btw. this discussion would fit in scope to the Isabelle user mailing list.</p>\n<p>Cheers,<br>\n    Florian<br>\n<a href=\"/user_uploads/14278/snK1YtZ9bZ9lKihfJz1pDhqW/signature.asc\">signature.asc</a></p>",
        "id": 207171781,
        "sender_full_name": "Email Gateway",
        "timestamp": 1597685282
    }
]