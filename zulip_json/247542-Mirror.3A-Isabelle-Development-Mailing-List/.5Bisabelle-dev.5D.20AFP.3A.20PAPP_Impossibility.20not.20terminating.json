[
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nWe have a problem with PAPP_Impossibility for quite some time.</p>\n<p>I am presently running a bisection to see better where it actually happens: <br>\npresently the interval is Isabelle/f5aca3ed1adb .. 69ee23f83884 based on <br>\n<a href=\"https://isabelle.sketis.net/devel/build_status/AFP/PAPP_Impossibility.csv\">https://isabelle.sketis.net/devel/build_status/AFP/PAPP_Impossibility.csv</a></p>\n<p>Stay tuned ...</p>\n<p>Makarius</p>\n<hr>\n<p>isabelle-dev mailing list<br>\n<a href=\"mailto:isabelle-dev@in.tum.de\">isabelle-dev@in.tum.de</a><br>\n<a href=\"https://mailman46.in.tum.de/mailman/listinfo/isabelle-dev\">https://mailman46.in.tum.de/mailman/listinfo/isabelle-dev</a></p>",
        "id": 350505934,
        "sender_full_name": "Email Gateway",
        "timestamp": 1681736289
    },
    {
        "content": "<p>From: Fabian Huch &lt;<a href=\"mailto:huch@in.tum.de\">huch@in.tum.de</a>&gt;<br>\nFrom Jenkins, the tighter interval is Isabelle/3fb2c47a7605 .. <br>\nIsabelle/1a9decb8bfbc [1,2].</p>\n<p>Fabian</p>\n<p>[1]: <a href=\"https://ci.isabelle.systems/jenkins/job/isabelle-all/4411/\">https://ci.isabelle.systems/jenkins/job/isabelle-all/4411/</a></p>\n<p>[2]: <a href=\"https://ci.isabelle.systems/jenkins/job/isabelle-all/4412/\">https://ci.isabelle.systems/jenkins/job/isabelle-all/4412/</a></p>\n<hr>\n<p>isabelle-dev mailing list<br>\n<a href=\"mailto:isabelle-dev@in.tum.de\">isabelle-dev@in.tum.de</a><br>\n<a href=\"https://mailman46.in.tum.de/mailman/listinfo/isabelle-dev\">https://mailman46.in.tum.de/mailman/listinfo/isabelle-dev</a></p>",
        "id": 350517936,
        "sender_full_name": "Email Gateway",
        "timestamp": 1681738809
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nThe first bad revision is:<br>\nchangeset:   77808:b43ee37926a9<br>\nuser:        wenzelm<br>\ndate:        Mon Apr 10 22:38:18 2023 +0200<br>\nsummary:     performance tuning: replace Ord_List by Set();</p>\n<p>This is a change of the thm hyps field to make applications like <br>\nPAPP_Impossibility actually faster, but I did not notice that this is such an <br>\napplication, and that it becomes very slow.</p>\n<p>Even worse, it is not sufficient to take b43ee37926a9 back, because other <br>\nchanges on top appear to cause similar problems.</p>\n<p>I need to look more closely into the special SAT prover in PAPP_Impossibility, <br>\nto see what is really going on.</p>\n<p>Makarius</p>\n<hr>\n<p>isabelle-dev mailing list<br>\n<a href=\"mailto:isabelle-dev@in.tum.de\">isabelle-dev@in.tum.de</a><br>\n<a href=\"https://mailman46.in.tum.de/mailman/listinfo/isabelle-dev\">https://mailman46.in.tum.de/mailman/listinfo/isabelle-dev</a></p>",
        "id": 350619528,
        "sender_full_name": "Email Gateway",
        "timestamp": 1681767557
    },
    {
        "content": "<p>From: Manuel Eberl &lt;<a href=\"mailto:manuel@pruvisto.org\">manuel@pruvisto.org</a>&gt;<br>\nOh dear, that is unfortunate.</p>\n<p>PAPP_Impossibility is probably one of the most brutal benchmarks of <br>\nlow-level theorem operations we have. The SAT prover in that entry <br>\nessentially proves a large number of clauses (a few hundred thousand) <br>\nand then starts plugging them together in a specific, externally <br>\ndetermined way until it derives the empty clause. The first part is <br>\nquite fast and still works without any problems. The really <br>\nresource-intensive bit is the second part, and this is the part that <br>\ndoesn't terminate anymore (or more probably, takes much longer than it <br>\ndid before).</p>\n<p>I did notice at the time that the vast majority of the time was spent in <br>\ntaking the union of the hyps of the different theorems being combined, <br>\nso I made sure that when I create the theorems, they all have <br>\npointer-equal hyps, which sped things up phenomenally.</p>\n<p>Hope that helps. If you have any questions about the code, I'll be happy <br>\nto answer them. I should also still have a few smaller example <br>\napplications of that SAT solver lying around that one could use; there <br>\nthe difference between the old and the new version would perhaps not be <br>\n\"2 minutes\" vs \"non-termination\" but rather something like \"almost <br>\ninstant\" and \"half a minute\" or so, which may make debugging less painful.</p>\n<p>Manuel</p>\n<hr>\n<p>isabelle-dev mailing list<br>\n<a href=\"mailto:isabelle-dev@in.tum.de\">isabelle-dev@in.tum.de</a><br>\n<a href=\"https://mailman46.in.tum.de/mailman/listinfo/isabelle-dev\">https://mailman46.in.tum.de/mailman/listinfo/isabelle-dev</a></p>",
        "id": 350701376,
        "sender_full_name": "Email Gateway",
        "timestamp": 1681805244
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nOn 18/04/2023 10:07, Manuel Eberl wrote:</p>\n<blockquote>\n<p>I did notice at the time that the vast majority of the time was spent in <br>\ntaking the union of the hyps of the different theorems being combined, so I <br>\nmade sure that when I create the theorems, they all have pointer-equal hyps, <br>\nwhich sped things up phenomenally.</p>\n</blockquote>\n<p>Did you re-invent this yourself, or did you see it here? <br>\n<a href=\"https://isabelle-dev.sketis.net/source/isabelle/browse/default/src/HOL/Tools/sat.ML$348\">https://isabelle-dev.sketis.net/source/isabelle/browse/default/src/HOL/Tools/sat.ML$348</a></p>\n<blockquote>\n<p>I should also still have a few smaller example applications of <br>\nthat SAT solver lying around that one could use; there the difference between <br>\nthe old and the new version would perhaps not be \"2 minutes\" vs <br>\n\"non-termination\" but rather something like \"almost instant\" and \"half a <br>\nminute\" or so, which may make debugging less painful.</p>\n</blockquote>\n<p>It would be great to have such small benchmark examples. Please send them to <br>\nme privately.</p>\n<p>Makarius</p>\n<hr>\n<p>isabelle-dev mailing list<br>\n<a href=\"mailto:isabelle-dev@in.tum.de\">isabelle-dev@in.tum.de</a><br>\n<a href=\"https://mailman46.in.tum.de/mailman/listinfo/isabelle-dev\">https://mailman46.in.tum.de/mailman/listinfo/isabelle-dev</a></p>",
        "id": 350714802,
        "sender_full_name": "Email Gateway",
        "timestamp": 1681808724
    },
    {
        "content": "<p>From: Manuel Eberl &lt;<a href=\"mailto:manuel@pruvisto.org\">manuel@pruvisto.org</a>&gt;<br>\nI do know of that one as well, but it uses some old and rather obscure <br>\nSAT solvers (with some custom patches even, I think) and a different <br>\nproof format as well (that isn't really used by any modern SAT solvers, <br>\nI think). Also, as I recall there was only one suppoerted SAT solver <br>\nthat I managed to find, compile, and run. And then the approach didn't <br>\nreally scale to my kind of setting. In earlier versions of the same <br>\nentry I had SAT instances with 20 million clauses, which was simply too <br>\nmuch.</p>\n<p>My implementation uses the DRAT format, which seems to be a kind of <br>\nde-facto standard in the SAT community nowadays.</p>\n<p>I did take some inspiration from the implementation you linked though. I <br>\ndon't think they had to do any of the low-level fine-tuning with hyps <br>\nthat I had to do though.</p>\n<p>Manuel</p>\n<hr>\n<p>isabelle-dev mailing list<br>\n<a href=\"mailto:isabelle-dev@in.tum.de\">isabelle-dev@in.tum.de</a><br>\n<a href=\"https://mailman46.in.tum.de/mailman/listinfo/isabelle-dev\">https://mailman46.in.tum.de/mailman/listinfo/isabelle-dev</a></p>",
        "id": 350723316,
        "sender_full_name": "Email Gateway",
        "timestamp": 1681810668
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nOn 18/04/2023 11:37, Manuel Eberl wrote:</p>\n<blockquote>\n<p>I do know of that one as well, but it uses some old and rather obscure SAT <br>\nsolvers (with some custom patches even, I think) and a different proof format <br>\nas well (that isn't really used by any modern SAT solvers, I think). Also, as <br>\nI recall there was only one suppoerted SAT solver that I managed to find, <br>\ncompile, and run. And then the approach didn't really scale to my kind of <br>\nsetting. In earlier versions of the same entry I had SAT instances with 20 <br>\nmillion clauses, which was simply too much.</p>\n</blockquote>\n<p>It is clear that this old SAT implementation is not usable anymore.</p>\n<p>My question was more in the direction: How much old/obsolete things from <br>\nsat.ML are to be expected as clones in your version?</p>\n<p>Apparently little or none.</p>\n<blockquote>\n<p>My implementation uses the DRAT format, which seems to be a kind of de-facto <br>\nstandard in the SAT community nowadays.</p>\n<p>I did take some inspiration from the implementation you linked though. I don't <br>\nthink they had to do any of the low-level fine-tuning with hyps that I had to <br>\ndo though.</p>\n</blockquote>\n<p>OK, this already provides some clues.</p>\n<p>Makarius</p>\n<hr>\n<p>isabelle-dev mailing list<br>\n<a href=\"mailto:isabelle-dev@in.tum.de\">isabelle-dev@in.tum.de</a><br>\n<a href=\"https://mailman46.in.tum.de/mailman/listinfo/isabelle-dev\">https://mailman46.in.tum.de/mailman/listinfo/isabelle-dev</a></p>",
        "id": 350727023,
        "sender_full_name": "Email Gateway",
        "timestamp": 1681811550
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nI have now managed to revert several changes to make PAPP_Impossibility works <br>\nagain --- nothing pushed yet.</p>\n<p>Makarius</p>\n<hr>\n<p>isabelle-dev mailing list<br>\n<a href=\"mailto:isabelle-dev@in.tum.de\">isabelle-dev@in.tum.de</a><br>\n<a href=\"https://mailman46.in.tum.de/mailman/listinfo/isabelle-dev\">https://mailman46.in.tum.de/mailman/listinfo/isabelle-dev</a></p>",
        "id": 350738557,
        "sender_full_name": "Email Gateway",
        "timestamp": 1681814507
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nTo conclude this divergence, the situation in Isabelle/dd222e2af01a + <br>\nAFP/fcf84c1dcf9b is now as follows:</p>\n<p>* All my inference kernel changes concerning the improved Table() and Set() <br>\nfunctors have been reverted: they help for large persistent data, but not for <br>\ndata that changes dynamically a lot (e.g. the hyps in inferences, where merge <br>\nis critical).</p>\n<p>* There are some minor changes to <br>\nAFP/thys/PAPP_Impossibility/papp_impossibility.ML to make it faster than <br>\nbefore: this includes the version that you had sent me privately + plus some <br>\ntuning. The key changes are:</p>\n<p>changeset:   13550:317d450e66bc<br>\nuser:        wenzelm<br>\ndate:        Tue Apr 18 20:45:33 2023 +0200<br>\nfiles:       thys/PAPP_Impossibility/papp_impossibility.ML<br>\ndescription:<br>\nalternative version by Manuel Eberl, following the approach of <br>\nIsabelle2022/src/HOL/Tools/sat.ML with one big hyp;</p>\n<p>changeset:   13552:351b7b576892<br>\nuser:        wenzelm<br>\ndate:        Tue Apr 18 20:58:25 2023 +0200<br>\nfiles:       thys/PAPP_Impossibility/papp_impossibility.ML<br>\ndescription:<br>\neliminated pointless parallelism: approx. 1.3s as plain sequential ML;</p>\n<p>Here are some timings:</p>\n<ul>\n<li>before Isabelle/b43ee37926a9 + AFP/c9540530e3db:</li>\n</ul>\n<p>Finished PAPP_Impossibility (0:03:23 elapsed time, 0:04:51 cpu time, factor 1.43)</p>\n<ul>\n<li>current Isabelle/dd222e2af01a + AFP/fcf84c1dcf9b:<br>\nFinished PAPP_Impossibility (0:00:57 elapsed time, 0:02:18 cpu time, factor 2.40)</li>\n</ul>\n<p>Not bad for something that appeared like a huge monster proof.</p>\n<p>Makarius</p>\n<hr>\n<p>isabelle-dev mailing list<br>\n<a href=\"mailto:isabelle-dev@in.tum.de\">isabelle-dev@in.tum.de</a><br>\n<a href=\"https://mailman46.in.tum.de/mailman/listinfo/isabelle-dev\">https://mailman46.in.tum.de/mailman/listinfo/isabelle-dev</a></p>",
        "id": 350889282,
        "sender_full_name": "Email Gateway",
        "timestamp": 1681853873
    }
]