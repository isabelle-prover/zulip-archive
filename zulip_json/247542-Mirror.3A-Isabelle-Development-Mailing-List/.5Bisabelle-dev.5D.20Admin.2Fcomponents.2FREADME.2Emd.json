[
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nIsabelle/36e33d227bf0 now provides Admin/components/README.md as merged and <br>\nupdated version of former PLATFORMS + README in that directory.</p>\n<p>Using Markdown makes it look more fancy, but that is also difficult to do <br>\nproperly, because there are too many Markdown standards. This version is meant <br>\nto work for VSCode and Phabricator, e.g. see the bottom of <br>\n<a href=\"https://isabelle-dev.sketis.net/source/isabelle/browse/default/Admin/components/;36e33d227bf0\">https://isabelle-dev.sketis.net/source/isabelle/browse/default/Admin/components/;36e33d227bf0</a></p>\n<p>Concerning the text, the main addition is:</p>\n<p>\"\"\"</p>\n<h3>Repeatable component builds</h3>\n<p>Historically, Isabelle components have often been assembled manually, packaged<br>\nas <code>.tar.gz</code> and uploaded to the administrative directory. This model no<br>\nlonger fits the typical complexity of multi-platform tools.</p>\n<p>The current quality standard demands a separate tool in Isabelle/Scala, to<br>\nbuild a component in a repeatable manner: e.g. see <code>isabelle component_jdk</code> or<br>\n<code>isabelle component_e</code> with sources in <code>src/Pure/Admin</code>. Such tools often<br>\nrequire a Unix platform (Linux or macOS), or the specific platform for which<br>\nthe target is built. In the latter case, the component build tool is run<br>\nmanually in each operating-system context, using the base-line versions<br>\nspecified above (e.g. via Docker); all results are assembled into one big<br>\n<code>.tar.gz</code> archive.</p>\n<p>Multi-platform tools also require thorough testing on all platforms: base-line<br>\nand latest versions. It \"works for me on my system\" is not sufficient for the<br>\ngeneral public.<br>\n\"\"\"</p>\n<p>Makarius</p>\n<hr>\n<p>isabelle-dev mailing list<br>\n<a href=\"mailto:isabelle-dev@in.tum.de\">isabelle-dev@in.tum.de</a><br>\n<a href=\"https://mailman46.in.tum.de/mailman/listinfo/isabelle-dev\">https://mailman46.in.tum.de/mailman/listinfo/isabelle-dev</a></p>",
        "id": 429489487,
        "sender_full_name": "Email Gateway",
        "timestamp": 1711393440
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nHere is an updated version:<br>\n<a href=\"https://isabelle-dev.sketis.net/source/isabelle/browse/default/Admin/components/;ebd988ee1d57\">https://isabelle-dev.sketis.net/source/isabelle/browse/default/Admin/components/;ebd988ee1d57</a></p>\n<p>In particular:</p>\n<p>\"\"\"</p>\n<h3>Dynamic setup of large components</h3>\n<p>An alternative approach, especially for components that are very large and/or<br>\nrarely used, is to provide an Isabelle setup tool that interested users may<br>\nrun for themselves. This works particularly well for software products that<br>\nhave their own \"store\" of downloadable artifacts. For example, see<br>\n<code>isabelle dotnet_setup</code> as defined in <code>src/Pure/Tools/dotnet_setup.scala</code>.<br>\n\"\"\"</p>\n<p>Isabelle component management has become and art and an industry. There is <br>\nmore to say, especially for automated build setup (e.g. Setup_Tool service <br>\nclasses), but the text is already rather long.</p>\n<p>Makarius</p>\n<hr>\n<p>isabelle-dev mailing list<br>\n<a href=\"mailto:isabelle-dev@in.tum.de\">isabelle-dev@in.tum.de</a><br>\n<a href=\"https://mailman46.in.tum.de/mailman/listinfo/isabelle-dev\">https://mailman46.in.tum.de/mailman/listinfo/isabelle-dev</a></p>",
        "id": 429862588,
        "sender_full_name": "Email Gateway",
        "timestamp": 1711547166
    }
]