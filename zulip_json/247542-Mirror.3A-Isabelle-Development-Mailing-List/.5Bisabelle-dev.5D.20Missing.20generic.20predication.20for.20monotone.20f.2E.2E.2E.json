[
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\nInteresting. The generalization of the two would be something like</p>\n<p>definition mono_wrt_on :: \"('a ⇒ 'a ⇒ bool) ⇒ ('b ⇒ 'b ⇒ bool) ⇒ 'a set ⇒ ('a ⇒ <br>\n'b) ⇒ bool\"<br>\n   where \"mono_wrt_on orda ordb A f ⟷ (∀x∈A.∀y∈A. orda x y ⟶ ordb (f x) (f y))\"</p>\n<p>Possibly with the A first, to be able to recover \"monotone\" as \"mono_wrt_on UNIV\".<br>\nAnd it should not be hidden in Complete_Partial_Order.</p>\n<p>I guess locales could also help.</p>\n<p>Tobias<br>\n<a href=\"/user_uploads/14278/5RbLerU7PVmSHRnj_bcZAHj2/smime.p7s\">smime.p7s</a></p>",
        "id": 283121757,
        "sender_full_name": "Email Gateway",
        "timestamp": 1653078309
    },
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\nOn 16/05/2022 17:02, Martin Desharnais wrote:</p>\n<blockquote>\n<p>Dear Isabelle developers,</p>\n<p>the theory Orderings.thy defines the \"mono\" predicate in the context of the <br>\n\"order\" type class. However, in some situations, one cannot use type classes and <br>\nmust resort to an arbitrary ordering predicate. Some useful characterizing <br>\npredicates (e.g. reflp, transp, antisymp, inj) are already available in HOL, but <br>\nthere is nothing for monotonicity.</p>\n<p>I would like to introduce said missing predicate to, e.g., the Fun.thy theory. A <br>\nconcrete suggestion is attached at the end of this email.</p>\n</blockquote>\n<p>I wonder if it should also go into Orderings.thy, just to keep the two versions <br>\ncloser together? Or does Orderings.thy not work because it does not include <br>\nFun.thy and thus misses some necessary material (eg Sets)?</p>\n<p>Tobias</p>\n<blockquote>\n<p>Any opinion on the matter?</p>\n<p>Regards,<br>\nMartin</p>\n<p>subsubsection ‹Monotonicity›</p>\n<p>definition mono_wrt_on :: \"('a ⇒ 'a) ⇒ ('a ⇒ 'a ⇒ bool) ⇒ 'a set ⇒ bool\" where<br>\n   \"mono_wrt_on f R A ⟷ (∀x ∈ A. ∀y ∈ A. R x y ⟶ R (f x) (f y))\"</p>\n<p>abbreviation mono_wrt :: \"('a ⇒ 'a) ⇒ ('a ⇒ 'a ⇒ bool) ⇒ bool\" where<br>\n   \"mono_wrt f R ≡ mono_wrt_on f R UNIV\"</p>\n<p>lemma mono_wrt_onI:<br>\n   \"(⋀x y. x ∈ A ⟹ y ∈ A ⟹ R x y ⟹ R (f x) (f y)) ⟹ mono_wrt_on f R A\"<br>\n   by (simp add: mono_wrt_on_def)</p>\n<p>lemma mono_wrtI:<br>\n   \"(⋀x y. R x y ⟹ R (f x) (f y)) ⟹ mono_wrt f R\"<br>\n   by (simp add: mono_wrt_onI)</p>\n<p>lemma mono_wrt_onD: \"mono_wrt_on f R A ⟹ x ∈ A ⟹ y ∈ A ⟹ R x y ⟹ R (f x) (f y)\"<br>\n   by (simp add: mono_wrt_on_def)</p>\n<p>lemma mono_wrtD: \"mono_wrt f R ⟹ R x y ⟹ R (f x) (f y)\"<br>\n   by (simp add: mono_wrt_onD)</p>\n<hr>\n<p>isabelle-dev mailing list<br>\n<a href=\"mailto:isabelle-dev@in.tum.de\">isabelle-dev@in.tum.de</a><br>\n<a href=\"https://mailman46.in.tum.de/mailman/listinfo/isabelle-dev\">https://mailman46.in.tum.de/mailman/listinfo/isabelle-dev</a><br>\n<a href=\"/user_uploads/14278/cbfoMLYeFGvQFQtvUyHGK6e3/smime.p7s\">smime.p7s</a></p>\n</blockquote>",
        "id": 283122962,
        "sender_full_name": "Email Gateway",
        "timestamp": 1653078908
    },
    {
        "content": "<p>From: Peter Lammich &lt;<a href=\"mailto:lammich@in.tum.de\">lammich@in.tum.de</a>&gt;<br>\nThere is already Complete_Partial_Order.monotone, which you get via <br>\nHOL.Main.</p>\n<p>Is that what you are looking for?</p>",
        "id": 283122963,
        "sender_full_name": "Email Gateway",
        "timestamp": 1653078908
    },
    {
        "content": "<p>From: Martin Desharnais &lt;<a href=\"mailto:martin.desharnais@posteo.de\">martin.desharnais@posteo.de</a>&gt;<br>\nDear Isabelle developers,</p>\n<p>the theory Orderings.thy defines the \"mono\" predicate in the context of <br>\nthe \"order\" type class. However, in some situations, one cannot use type <br>\nclasses and must resort to an arbitrary ordering predicate. Some useful <br>\ncharacterizing predicates (e.g. reflp, transp, antisymp, inj) are <br>\nalready available in HOL, but there is nothing for monotonicity.</p>\n<p>I would like to introduce said missing predicate to, e.g., the Fun.thy <br>\ntheory. A concrete suggestion is attached at the end of this email.</p>\n<p>Any opinion on the matter?</p>\n<p>Regards,<br>\nMartin</p>\n<p>subsubsection ‹Monotonicity›</p>\n<p>definition mono_wrt_on :: \"('a ⇒ 'a) ⇒ ('a ⇒ 'a ⇒ bool) ⇒ 'a set ⇒ bool\" <br>\nwhere<br>\n   \"mono_wrt_on f R A ⟷ (∀x ∈ A. ∀y ∈ A. R x y ⟶ R (f x) (f y))\"</p>\n<p>abbreviation mono_wrt :: \"('a ⇒ 'a) ⇒ ('a ⇒ 'a ⇒ bool) ⇒ bool\" where<br>\n   \"mono_wrt f R ≡ mono_wrt_on f R UNIV\"</p>\n<p>lemma mono_wrt_onI:<br>\n   \"(⋀x y. x ∈ A ⟹ y ∈ A ⟹ R x y ⟹ R (f x) (f y)) ⟹ mono_wrt_on f R A\"<br>\n   by (simp add: mono_wrt_on_def)</p>\n<p>lemma mono_wrtI:<br>\n   \"(⋀x y. R x y ⟹ R (f x) (f y)) ⟹ mono_wrt f R\"<br>\n   by (simp add: mono_wrt_onI)</p>\n<p>lemma mono_wrt_onD: \"mono_wrt_on f R A ⟹ x ∈ A ⟹ y ∈ A ⟹ R x y ⟹ R (f x) <br>\n(f y)\"<br>\n   by (simp add: mono_wrt_on_def)</p>\n<p>lemma mono_wrtD: \"mono_wrt f R ⟹ R x y ⟹ R (f x) (f y)\"<br>\n   by (simp add: mono_wrt_onD)<br>\n<a href=\"/user_uploads/14278/ZX6bcBWtdBkay_AuIzhUm-mU/OpenPGP_0x58AE985FE188789A.asc\">OpenPGP_0x58AE985FE188789A.asc</a><br>\n<a href=\"/user_uploads/14278/a79nddvxP1Btp-KVkax2QRb2/OpenPGP_signature\">OpenPGP_signature</a></p>",
        "id": 283123573,
        "sender_full_name": "Email Gateway",
        "timestamp": 1653079208
    },
    {
        "content": "<p>From: Lawrence Paulson &lt;<a href=\"mailto:lp15@cam.ac.uk\">lp15@cam.ac.uk</a>&gt;<br>\nI certainly can’t object, if there’s nothing comparable there already.</p>\n<p>We are in fact faced with the Herculean task of seeing whether we can generalise the Analysis library away from type classes.</p>\n<p>Larry</p>\n<hr>\n<p>isabelle-dev mailing list<br>\n<a href=\"mailto:isabelle-dev@in.tum.de\">isabelle-dev@in.tum.de</a><br>\n<a href=\"https://mailman46.in.tum.de/mailman/listinfo/isabelle-dev\">https://mailman46.in.tum.de/mailman/listinfo/isabelle-dev</a></p>",
        "id": 283124132,
        "sender_full_name": "Email Gateway",
        "timestamp": 1653079508
    },
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\nI still prefer this argument order:</p>\n<p>mono_wrt_on :: \"('a ⇒ 'a ⇒ bool) ⇒ ('b ⇒ 'b ⇒ bool) ⇒ 'a set ⇒ ('a ⇒ 'b) ⇒ bool\"</p>\n<p>In the end, it is an attempt at a consistent order where the `actual' argument <br>\ncomes last. True, inj_on departs from this schema, possibly because \"inj_on f A\" <br>\nseems to read a bit better.</p>\n<p>Not sure if a good argument can be made either way, but not having to worry <br>\nabout it every time would be an advantage ;-)</p>\n<p>Tobias<br>\n<a href=\"/user_uploads/14278/sCQICthjUM5ElnYiyUbA_ZHI/smime.p7s\">smime.p7s</a></p>",
        "id": 283303405,
        "sender_full_name": "Email Gateway",
        "timestamp": 1653304815
    }
]