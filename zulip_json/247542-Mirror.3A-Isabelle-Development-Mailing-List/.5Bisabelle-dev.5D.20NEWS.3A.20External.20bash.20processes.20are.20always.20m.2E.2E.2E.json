[
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\n<strong>* ML </strong>*</p>\n<ul>\n<li>External bash processes are always managed by Isabelle/Scala, in<br>\ncontrast to Isabelle2021 where this was only done for macOS on Apple<br>\nSilicon.</li>\n</ul>\n<p>The main Isabelle/ML interface is Isabelle_System.bash_process with<br>\nresult type Process_Result.T (resembling class Process_Result in Scala);<br>\nderived operations Isabelle_System.bash and Isabelle_System.bash_output<br>\nprovide similar functionality as before. Rare INCOMPATIBILITY due to<br>\nsubtle semantic differences:</p>\n<p>- Processes invoked from Isabelle/ML actually run in the context of<br>\n    the Java VM of Isabelle/Scala. The settings environment and current<br>\n    working directory are usually the same on both sides, but there can be<br>\n    subtle corner cases (e.g. unexpected uses of \"cd\" or \"putenv\" in ML).</p>\n<p>- Output via stdout and stderr is line-oriented: Unix vs. Windows<br>\n    line-endings are normalized towards Unix; presence or absence of a<br>\n    final newline is irrelevant. The original lines are available as<br>\n    Process_Result.out_lines/err_lines; the concatenated versions<br>\n    Process_Result.out/err <em>omit</em> a trailing newline (using<br>\n    Library.trim_line, which was occasional seen in applications before,<br>\n    but is no longer necessary).</p>\n<p>- Output needs to be plain text encoded in UTF-8: Isabelle/Scala<br>\n    recodes it temporarily as UTF-16. This works for well-formed Unicode<br>\n    text, but not for arbitrary byte strings. In such cases, the bash<br>\n    script should write tempory files, managed by Isabelle/ML operations<br>\n    like Isabelle_System.with_tmp_file to create a file name and<br>\n<a href=\"http://File.read\">File.read</a> to retrieve its content.</p>\n<p>New Process_Result.timing works as in Isabelle/Scala, based on direct<br>\nmeasurements of the bash_process wrapper in C: elapsed time is always<br>\navailable, CPU time is only available on Linux and macOS, GC time is<br>\nunavailable.</p>\n<p>This refers to Isabelle/04c9a2cd7686, which provides these updated NEWS. A lot<br>\nof text for previously to adjust previous customs of weakly specified<br>\nbehaviour, or mere customs. Also an interesting consequence of providing Scala<br>\nfunction invocation in ML, and using it on the spot to avoid macOS/Rosetto<br>\nproblems with threads vs. processes (for Isabelle2021).</p>\n<p>There might be very fine points still to be sorted out, but conceptually it is<br>\nright to do the systems programming in Scala instead of ML. (A few more system<br>\noperations will move from ML to Scala soon.)</p>\n<p>Makarius</p>\n<hr>\n<p>isabelle-dev mailing list<br>\n<a href=\"mailto:isabelle-dev@in.tum.de\">isabelle-dev@in.tum.de</a><br>\n<a href=\"https://mailman46.in.tum.de/mailman/listinfo/isabelle-dev\">https://mailman46.in.tum.de/mailman/listinfo/isabelle-dev</a></p>",
        "id": 227356755,
        "sender_full_name": "Email Gateway",
        "timestamp": 1614036166
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nHere is another fine point:</p>\n<p>- Just like any other Scala function invoked from ML,<br>\n    Isabelle_System.bash_process requires a proper PIDE session context.<br>\n    This could be a regular batch session (e.g. \"isabelle build\"), a<br>\n    PIDE editor session (e.g. \"isabelle jedit\"), or headless PIDE (e.g.<br>\n    \"isabelle dump\" or \"isabelle server\"). Note that old \"isabelle<br>\n    console\" or raw \"isabelle process\" don't have that.</p>\n<p>See also Isabelle/637e3e85cd6f.</p>\n<p>In principle the requirement of a proper PIDE session context is already<br>\npresent in Isabelle2021, but there are hardly any relevant Scala functions<br>\ninvoked from ML.</p>\n<p>From now on there will be more and more coming, to do the hardcore system<br>\nprogramming properly in the physical world (Scala) instead of mathematics<br>\n(ML). (To download a file, copy a directory hierarchy etc.)</p>\n<p>I am still unsure what to do about \"isabelle console\" and \"isabelle process\".</p>\n<p>My main use of the console is with option -r, to bootstrap Pure in case of<br>\nerror, when the PIDE editing of Pure does not work. So it could be replaced by<br>\n\"isabelle bootstrap\" as administrative tool (unavailable in a regular Isabelle<br>\nrelease).</p>\n<p>The \"isabelle process\" was once our main \"isabelle\" script, e.g. for direct<br>\nTTY use or as inferior Emacs process. Now it is occasionally used for<br>\ngenerated code from the ML environment. So it could become another Scala<br>\nfunction from ML, using the ML_Process module in Isabelle/Scala. That would<br>\nmake it much lighter, because the surrounding Scala/JVM is already running,<br>\ni.e. the one of the required PIDE session context.</p>\n<p>So are there other remaining uses of \"isabelle console\" or \"isabelle process\"<br>\nthat don't fit into this picture? And that cannot be done more directly in<br>\nIsabelle/Scala, instead of old-fashioned scripting in bash/perl/python/...?</p>\n<p>Makarius</p>\n<hr>\n<p>isabelle-dev mailing list<br>\n<a href=\"mailto:isabelle-dev@in.tum.de\">isabelle-dev@in.tum.de</a><br>\n<a href=\"https://mailman46.in.tum.de/mailman/listinfo/isabelle-dev\">https://mailman46.in.tum.de/mailman/listinfo/isabelle-dev</a></p>",
        "id": 227514643,
        "sender_full_name": "Email Gateway",
        "timestamp": 1614118709
    },
    {
        "content": "<p>From: Florian Haftmann &lt;<a href=\"mailto:florian.haftmann@informatik.tu-muenchen.de\">florian.haftmann@informatik.tu-muenchen.de</a>&gt;<br>\nHi Makarius,</p>\n<blockquote>\n<p>My main use of the console is with option -r, to bootstrap Pure in case of<br>\nerror, when the PIDE editing of Pure does not work. So it could be replaced by<br>\n\"isabelle bootstrap\" as administrative tool (unavailable in a regular Isabelle<br>\nrelease).</p>\n</blockquote>\n<p>I also have an ancient tool which does something similar: check the Pure<br>\nsources and issue a parsable error message if something goes utterly wrong.</p>\n<p>I would appreciate an official tool for that.</p>\n<blockquote>\n<p>So are there other remaining uses of \"isabelle console\" or \"isabelle process\"<br>\nthat don't fit into this picture? And that cannot be done more directly in<br>\nIsabelle/Scala, instead of old-fashioned scripting in bash/perl/python/...?</p>\n</blockquote>\n<p>In my drawer I found the following funny one-line to find out how many<br>\nthreads PolyML thinks are available.</p>\n<blockquote>\n<p>isabelle process -e 'writeln (\"\\n~~~ \" ^ string_of_int (Thread.numProcessors ()) ^ \" ~~~\\n\")' | grep -Po '(?&lt;=~~~ )\\d+(?= ~~~)'</p>\n</blockquote>\n<p>To get a clue how the threads option could look like.</p>\n<p>Don't know whether this is still of general interest.</p>\n<p>Cheers,<br>\n    Florian<br>\n<a href=\"/user_uploads/14278/L-ED6q3m4Rz8Khg7M8CAq1U3/signature.asc\">signature.asc</a></p>",
        "id": 227790841,
        "sender_full_name": "Email Gateway",
        "timestamp": 1614268994
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nOn 25/02/2021 17:03, Florian Haftmann wrote:</p>\n<blockquote>\n<blockquote>\n<p>My main use of the console is with option -r, to bootstrap Pure in case of<br>\nerror, when the PIDE editing of Pure does not work. So it could be replaced by<br>\n\"isabelle bootstrap\" as administrative tool (unavailable in a regular Isabelle<br>\nrelease).</p>\n</blockquote>\n<p>I also have an ancient tool which does something similar: check the Pure<br>\nsources and issue a parsable error message if something goes utterly wrong.</p>\n</blockquote>\n<p>Do you want to show me that (privately)?</p>\n<blockquote>\n<blockquote>\n<p>So are there other remaining uses of \"isabelle console\" or \"isabelle process\"<br>\nthat don't fit into this picture? And that cannot be done more directly in<br>\nIsabelle/Scala, instead of old-fashioned scripting in bash/perl/python/...?</p>\n</blockquote>\n<p>In my drawer I found the following funny one-line to find out how many<br>\nthreads PolyML thinks are available.</p>\n<blockquote>\n<p>isabelle process -e 'writeln (\"\\n~~~ \" ^ string_of_int (Thread.numProcessors ()) ^ \" ~~~\\n\")' | grep -Po '(?&lt;=~~~ )\\d+(?= ~~~)'</p>\n</blockquote>\n<p>To get a clue how the threads option could look like.</p>\n</blockquote>\n<p>See the included scala script, to be placed in a directory mentioned in<br>\nISABELLE_TOOLS. I have used the stderr channel for clean output, without the<br>\nML toplevel interfering.</p>\n<p>Moreover, I have looked around where \"isabelle process\" still occurs in our<br>\nsources (Isabelle/736b8853189a):</p>\n<p>* In the \"system\" manual, section about \"The raw Isabelle ML process\" /<br>\n\"Batch mode\": it gives a wrong / outdated impression of being able to process<br>\ntheories etc: this strengthens my inclination to remove the tool altogether.</p>\n<p>* In src/Tools/Code/code_ml.ML to invoke an external ML process to compile<br>\ngenerated modules. This used to be similar in src/HOL/Library/code_test.ML,<br>\nuntil I changed that for the Isabelle2021 release, e.g. see:</p>\n<p><a href=\"https://isabelle-dev.sketis.net/rISABELLEdfe150a246e6\">https://isabelle-dev.sketis.net/rISABELLEdfe150a246e6</a></p>\n<p><a href=\"https://isabelle-dev.sketis.net/rISABELLE697e5688f370\">https://isabelle-dev.sketis.net/rISABELLE697e5688f370</a></p>\n<p>This approach to use the existing ML environment (and Scala, too) is much<br>\nsimpler and lighter. Could it be done for regular Code_Target.add_language as<br>\nwell?</p>\n<p>Thus the old \"isabelle process\" (and \"isabelle console\") could just disappear,<br>\nwithout any special tricks replacing them.</p>\n<p>Makarius<br>\n<a href=\"/user_uploads/14278/jLhTCPhOe4ERI_vQakq1yaUO/ml_processors.scala\">ml_processors.scala</a></p>",
        "id": 228063922,
        "sender_full_name": "Email Gateway",
        "timestamp": 1614438886
    }
]