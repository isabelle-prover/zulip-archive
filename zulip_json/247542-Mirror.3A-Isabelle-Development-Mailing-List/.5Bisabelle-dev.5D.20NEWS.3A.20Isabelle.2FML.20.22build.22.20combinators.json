[
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\n<strong>* ML </strong>*</p>\n<ul>\n<li>\n<p>The \"build\" combinators of various data structures help to build<br>\ncontent from bottom-up, by applying an \"add\" function the \"empty\" value.<br>\nFor example:</p>\n<ul>\n<li>type 'a Symtab.table etc.: build</li>\n<li>type 'a Names.table etc.: build</li>\n<li>type 'a list: build and build_rev</li>\n<li>type Buffer.T: build and build_content</li>\n</ul>\n</li>\n</ul>\n<p>For example, see src/Pure/PIDE/xml.ML:</p>\n<p>val content_of = Buffer.build_content o fold add_content;</p>\n<p>This refers to Isabelle/4974c3697fee.</p>\n<p>It may be seen as the final capstone for our approach to \"canonical argument<br>\norder\": it has turned out very beneficial to Isabelle/ML readability and<br>\nconciseness since 2005 (especially in contrast to the monadic bloat seen in<br>\nHaskell libraries).</p>\n<p>We did not have \"build\" combinators in the past, because most applications<br>\nwere for plain lists where \"empty\" is just []. For other data structures, it<br>\ndoes help to make the point more clear.</p>\n<p>Makarius</p>\n<hr>\n<p>isabelle-dev mailing list<br>\n<a href=\"mailto:isabelle-dev@in.tum.de\">isabelle-dev@in.tum.de</a><br>\n<a href=\"https://mailman46.in.tum.de/mailman/listinfo/isabelle-dev\">https://mailman46.in.tum.de/mailman/listinfo/isabelle-dev</a></p>",
        "id": 254346951,
        "sender_full_name": "Email Gateway",
        "timestamp": 1632307165
    }
]