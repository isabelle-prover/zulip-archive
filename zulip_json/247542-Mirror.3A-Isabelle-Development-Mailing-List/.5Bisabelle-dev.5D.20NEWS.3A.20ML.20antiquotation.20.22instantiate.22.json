[
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\n<strong>* ML </strong>*</p>\n<ul>\n<li>ML antiquotation \"instantiate\" allows to instantiate formal entities<br>\n(types, terms, theorems) with values given ML. This works uniformly for<br>\n\"typ\", \"term\", \"prop\", \"ctyp\", \"cterm\", \"cprop\", \"lemma\" --- given as a<br>\nkeyword after the instantiation. A mode \"(schematic)\" behind the keyword<br>\nmeans that some variables may remain uninstantiated (fixed in the<br>\nspecification and schematic in the result); by default, all variables<br>\nneed to be instantiated.</li>\n</ul>\n<p>Examples in HOL:</p>\n<p>fun make_assoc_type (A, B) =<br>\n    \\&lt;^instantiate&gt;‹'a = A and 'b = B in typ ‹('a × 'b) list››;</p>\n<p>val make_assoc_list =<br>\n    map (fn (x, y) =&gt;<br>\n      \\&lt;^instantiate&gt;‹'a = ‹fastype_of x› and 'b = ‹fastype_of y› and<br>\n        x and y in term ‹(x, y)› for x :: 'a and y :: 'b›);</p>\n<p>fun symmetry x y =<br>\n    \\&lt;^instantiate&gt;‹'a = ‹Thm.ctyp_of_cterm x› and x and y in<br>\n      lemma ‹x = y ⟹ y = x› for x y :: 'a by simp›</p>\n<p>fun symmetry_schematic A =<br>\n    \\&lt;^instantiate&gt;‹'a = A in<br>\n      lemma (schematic) ‹x = y ⟹ y = x› for x y :: 'a by simp›</p>\n<p>This refers to Isabelle/54085e37ce4d. Some applications are in the preceeding<br>\nchangesets.</p>\n<p>Proper documentation will follow shortly after Isabelle2021-1-RC1 (start of<br>\nnext week).</p>\n<p>Makarius</p>\n<hr>\n<p>isabelle-dev mailing list<br>\n<a href=\"mailto:isabelle-dev@in.tum.de\">isabelle-dev@in.tum.de</a><br>\n<a href=\"https://mailman46.in.tum.de/mailman/listinfo/isabelle-dev\">https://mailman46.in.tum.de/mailman/listinfo/isabelle-dev</a></p>",
        "id": 259444635,
        "sender_full_name": "Email Gateway",
        "timestamp": 1635451535
    }
]