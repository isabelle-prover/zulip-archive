[
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\n<strong>* ML </strong>*</p>\n<ul>\n<li>\n<p>ML antiquotation \"try\" provides variants of exception handling that<br>\navoids accidental capture of physical interrupts (which could affect ML<br>\nsemantics in unpredictable ways):</p>\n<p>\\&lt;^try&gt;‹EXPR catch HANDLER›<br>\n \\&lt;^try&gt;‹EXPR finally HANDLER›<br>\n \\&lt;^try&gt;‹EXPR›</p>\n</li>\n</ul>\n<p>See also the implementations Isabelle_Thread.try_catch / try_finally /<br>\ntry. The HANDLER always runs as uninterruptible, but the EXPR uses the<br>\nthe current thread attributes (normally interruptible). Various examples<br>\noccur in the Isabelle sources (.ML and .thy files).</p>\n<ul>\n<li>Isabelle/ML explicitly rejects 'handle' with catch-all patterns.<br>\nINCOMPATIBILITY, better use \\&lt;^try&gt;‹...› with 'catch' or 'finally', or<br>\nas last resort declare [[ML_catch_all]] within the theory context.</li>\n</ul>\n<p>This refers to Isabelle/fc0814e9f7a8 and AFP/9c5fe84ef108.</p>\n<p>Instead of friendly hints in the \"implementation\" manual (which still needs to <br>\nbe updated), there are now hard checks in the Isabelle/ML compiler setup and <br>\nproper antiquotations to get things right by construction.</p>\n<p>This is only the first stage of a substantial reform in exception handling. <br>\nThe next stage will be distinct Exn.Interrupt_Break (interactive thread <br>\nsignal) vs. Exn.Interrupt_Breakdown (resource problem in the ML runtime-system).</p>\n<p>Makarius</p>\n<hr>\n<p>isabelle-dev mailing list<br>\n<a href=\"mailto:isabelle-dev@in.tum.de\">isabelle-dev@in.tum.de</a><br>\n<a href=\"https://mailman46.in.tum.de/mailman/listinfo/isabelle-dev\">https://mailman46.in.tum.de/mailman/listinfo/isabelle-dev</a></p>",
        "id": 393920751,
        "sender_full_name": "Email Gateway",
        "timestamp": 1695990245
    }
]