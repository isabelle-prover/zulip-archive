[
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\n<strong>* ML </strong>*</p>\n<ul>\n<li>\n<p>Operations for Zstd compression (via Isabelle/Scala):</p>\n<p>Zstd.compress: Bytes.T -&gt; Bytes.T<br>\n Zstd.uncompress: Bytes.T -&gt; Bytes.T</p>\n</li>\n</ul>\n<p><strong>* System </strong>*</p>\n<ul>\n<li>Isabelle/Scala provides generic support for XZ and Zstd compression,<br>\nvia Compress.Options and Compress.Cache. Bytes.uncompress automatically<br>\ndetects the compression scheme.</li>\n</ul>\n<p>This refers to Isabelle/f2b98eb6a7a9. See also <br>\n<a href=\"https://github.com/luben/zstd-jni\">https://github.com/luben/zstd-jni</a> and <a href=\"https://github.com/facebook/zstd\">https://github.com/facebook/zstd</a></p>\n<p>Here is an example in Isabelle/ML (proper timing requires to re-check that 1-3 <br>\ntimes):</p>\n<p>theory Scratch<br>\n   imports Pure<br>\nbegin</p>\n<p>ML ‹<br>\n   val b1 = <a href=\"http://Bytes.read\">Bytes.read</a> @{file <br>\n‹~~/src/HOL/Analysis/Henstock_Kurzweil_Integration.thy›};<br>\n   val b2 = timeap Zstd.compress b1;<br>\n   val b3 = timeap Zstd.uncompress b2;<br>\n   @{assert} (Bytes.eq (b1, b3));<br>\n›</p>\n<p>ML ‹<br>\n   val b1 = <a href=\"http://Bytes.read\">Bytes.read</a> @{file <br>\n‹~~/src/HOL/Analysis/Henstock_Kurzweil_Integration.thy›};<br>\n   val b2 = timeap XZ.compress b1;<br>\n   val b3 = timeap XZ.uncompress b2;<br>\n   @{assert} (Bytes.eq (b1, b3));<br>\n›</p>\n<p>end</p>\n<p>This shows that Zstd (JNI library) is much faster than XZ (pure Java), while <br>\nthe compression ratio is only slightly lower.</p>\n<p>It remains to be seen how we can use this super-fast compression, e.g. for <br>\nblobs within build databases (presently XZ), or even for heaps of Poly/ML --- <br>\nfor the latter it might be better to see if this could be included in Poly/ML.</p>\n<p>Makarius</p>\n<hr>\n<p>isabelle-dev mailing list<br>\n<a href=\"mailto:isabelle-dev@in.tum.de\">isabelle-dev@in.tum.de</a><br>\n<a href=\"https://mailman46.in.tum.de/mailman/listinfo/isabelle-dev\">https://mailman46.in.tum.de/mailman/listinfo/isabelle-dev</a></p>",
        "id": 305415336,
        "sender_full_name": "Email Gateway",
        "timestamp": 1666375728
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nHere the same example for Isabelle/Scala, e.g. the Console/Scala plugin in <br>\nIsabelle/jEdit:</p>\n<p>val b1 = <br>\nBytes.read(Path.explode(\"~~/src/HOL/Analysis/Henstock_Kurzweil_Integration.thy\"))<br>\nval b2 = Timing.timeit() { b1.compress(Compress.Options_Zstd()) }<br>\nval b3 = Timing.timeit() { b2.uncompress() }</p>\n<p>val b1 = <br>\nBytes.read(Path.explode(\"~~/src/HOL/Analysis/Henstock_Kurzweil_Integration.thy\"))<br>\nval b2 = Timing.timeit() { b1.compress(Compress.Options_XZ()) }<br>\nval b3 = Timing.timeit() { b2.uncompress() }</p>\n<p>It shows how Isabelle/ML (world of mathematics) and Isabelle/Scala (world of <br>\nphysics) nicely work together. The ML functions from before actually invoke <br>\nthese Scala operations via the PIDE protocol channel, using a custom-made <br>\nBytes type on both sides (for better scalability).</p>\n<p>Makarius</p>\n<hr>\n<p>isabelle-dev mailing list<br>\n<a href=\"mailto:isabelle-dev@in.tum.de\">isabelle-dev@in.tum.de</a><br>\n<a href=\"https://mailman46.in.tum.de/mailman/listinfo/isabelle-dev\">https://mailman46.in.tum.de/mailman/listinfo/isabelle-dev</a></p>",
        "id": 305415461,
        "sender_full_name": "Email Gateway",
        "timestamp": 1666375775
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nHere are some more tests with Isabelle/cff0828c374f --- where large files work <br>\nmuch better. This is for Isabelle/jEdit with Console/Scala:</p>\n<p>def test_heap(name: String, options: Compress.Options): Unit = {<br>\n   val store = Sessions.store(Options.init())<br>\n   val heap = store.find_heap(name).getOrElse(error(\"Bad heap \" + quote(name)))<br>\n   val b = Timing.timeit(\"read\") { Bytes.read(heap) }<br>\n   val c = Timing.timeit(\"compress\") { b.compress(options, store.cache.compress) }<br>\n   val d = Timing.timeit(\"uncompress\") { c.uncompress(store.cache.compress) }<br>\n   Console.println(\"uncompressed size = \" + d.length + \"\\ncompressed size = \" </p>\n<ul>\n<li>c.length +<br>\n     \"\\nratio = \" + (d.length.toDouble / c.length.toDouble))<br>\n}</li>\n</ul>\n<p>scala&gt; test_heap(\"Pure\", Compress.Options_XZ(3))</p>\n<h3>read: 0.009s elapsed time</h3>\n<h3>compress: 1.792s elapsed time</h3>\n<h3>uncompress: 0.328s elapsed time</h3>\n<p>uncompressed size = 20848737<br>\ncompressed size = 3430468<br>\nratio = 6.077519743661798</p>\n<p>scala&gt; test_heap(\"Pure\", Compress.Options_Zstd(3))</p>\n<h3>read: 0.009s elapsed time</h3>\n<h3>compress: 0.081s elapsed time</h3>\n<h3>uncompress: 0.022s elapsed time</h3>\n<p>uncompressed size = 20848737<br>\ncompressed size = 4690553<br>\nratio = 4.444835608935663</p>\n<p>scala&gt; test_heap(\"Pure\", Compress.Options_Zstd(6))</p>\n<h3>read: 0.008s elapsed time</h3>\n<h3>compress: 0.206s elapsed time</h3>\n<h3>uncompress: 0.021s elapsed time</h3>\n<p>uncompressed size = 20848737<br>\ncompressed size = 4255723<br>\nratio = 4.898988256519515</p>\n<p>scala&gt; test_heap(\"HOL\", Compress.Options_XZ(3))</p>\n<h3>read: 0.148s elapsed time</h3>\n<h3>compress: 27.193s elapsed time</h3>\n<h3>uncompress: 6.162s elapsed time</h3>\n<p>uncompressed size = 340480517<br>\ncompressed size = 61810868<br>\nratio = 5.508424780574186</p>\n<p>scala&gt; test_heap(\"HOL\", Compress.Options_Zstd(3))</p>\n<h3>read: 0.370s elapsed time</h3>\n<h3>compress: 1.559s elapsed time</h3>\n<h3>uncompress: 0.511s elapsed time</h3>\n<p>uncompressed size = 340480517<br>\ncompressed size = 88856965<br>\nratio = 3.8317819767983297</p>\n<p>scala&gt; test_heap(\"HOL\", Compress.Options_Zstd(6))</p>\n<h3>read: 0.164s elapsed time</h3>\n<h3>compress: 3.594s elapsed time</h3>\n<h3>uncompress: 0.378s elapsed time</h3>\n<p>uncompressed size = 340480517<br>\ncompressed size = 82115162<br>\nratio = 4.146378192616852</p>\n<p>Makarius</p>\n<hr>\n<p>isabelle-dev mailing list<br>\n<a href=\"mailto:isabelle-dev@in.tum.de\">isabelle-dev@in.tum.de</a><br>\n<a href=\"https://mailman46.in.tum.de/mailman/listinfo/isabelle-dev\">https://mailman46.in.tum.de/mailman/listinfo/isabelle-dev</a></p>",
        "id": 305433410,
        "sender_full_name": "Email Gateway",
        "timestamp": 1666382477
    }
]