[
    {
        "content": "<p>From: \"Achim D. Brucker\" &lt;<a href=\"mailto:adbrucker@0x5f.org\">adbrucker@0x5f.org</a>&gt;<br>\nDear Isabelle Developers, <br>\n(CC Makarius and Florian - to ensure that you are aware of this email, as I assume you <br>\n    are likely to be the most qualified people to advise.)</p>\n<p>You might have seen my announcement on the Isabelle User's mailing list: I added F# <br>\nas a new target language to the code generator.  This includes initial system tooling <br>\nfor managing a \"sandboxed\" dotnet environment within Isabelle (similar to the setup <br>\nfor, e.g., OCaml). The changeset is available at (I am currently trying to update <br>\nit to the latest Isabelle development version every couple of days):</p>\n<p><a href=\"https://hg.logicalhacking.com/isabelle/shortlog/feature-codegen-fsharp\">https://hg.logicalhacking.com/isabelle/shortlog/feature-codegen-fsharp</a></p>\n<p>The current setup successfully passes the \"bin/isabelle build -a\" test on Linux (well <br>\ntested) and Windows (infrequent, tests on a VM running Windows 10). Due to lack of <br>\nhardware, I cannot test it on macOS (trusting the documentation from Microsoft, the <br>\nmacOS setup should work out of the box, sharing the configuration/implementation for <br>\nLinux).</p>\n<p>I would appreciate your general opinion on F# as a new code generator target and,<br>\nin particular, your opinion and recommendations on future maintenance/development<br>\nmodels. I see, in principle two approaches:</p>\n<p>1) integrating it into the main distribution of Isabelle or <br>\n2) keeping it as a separate \"component\" (theoretically, it could even be an AFP <br>\n   entry, if users install dotnet themselves and configure the ISABELLE_DOTNET <br>\n   environment variable - i.e., without the sandboxed dotnet installation) </p>\n<p>Integrating it into the main Isabelle distribution has the advantage that the code <br>\ngenerator setup for F# would \"live\" next to the setup for the other target languages. <br>\nThis could be beneficial for the future maintenance (if the setup for ML/OCaml changes, <br>\nit would be obvious that F# likely needs to be updated as well) and also would allow <br>\nfor using the \"ml_program_of_program\" function in the structure Code_ML without duplicating <br>\nit. The disadvantage is that it adds quite some weight to the Isabelle distribution and <br>\nits release process (i.e., a non-trivial component, namely dotnet, would be added). </p>\n<p>Keeping it separate has the advantage that it does not require any changes to the main <br>\ndistribution. The disadvantage that I see is that maintenance is most likely harder <br>\nand more error-prone (in the sense of following the Isabelle development is a more <br>\nmanual process) and installation for end-users is likely to be more inconvenient as <br>\nwell. </p>\n<p>I consider, personally, F# to be an interesting member of the ML-family, as it provides<br>\na step into the world of dotnet-based frameworks and languages (as Scala opens a door <br>\ninto the world of JVM-based languages and frameworks).</p>\n<p>Thanks a lot!</p>\n<p>Best,<br>\n    Achim</p>\n<p>PS: Just to be clear - my focus is to understand how to maintain such a component <br>\n    best, and if there is interest in shipping it as a part of Isabelle itself. My <br>\n    focus is not to just \"throw-it-over-the-fence\" and forget it (i.e., to <br>\n    off-load maintenance to somebody else).</p>\n<hr>\n<p>isabelle-dev mailing list<br>\n<a href=\"mailto:isabelle-dev@in.tum.de\">isabelle-dev@in.tum.de</a><br>\n<a href=\"https://mailman46.in.tum.de/mailman/listinfo/isabelle-dev\">https://mailman46.in.tum.de/mailman/listinfo/isabelle-dev</a></p>",
        "id": 294646742,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661164412
    },
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\nAchim, the code generator is part of Isabelle's trusted infrastructure. Thus I <br>\nrecommend you provide your F# code generator as an AFP entry in the Tools category.</p>\n<p>Tobias<br>\n<a href=\"/user_uploads/14278/RtBr1_96KdT-YMFac9nkyRsE/smime.p7s\">smime.p7s</a></p>",
        "id": 294841934,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661251823
    },
    {
        "content": "<p>From: Florian Haftmann &lt;<a href=\"mailto:florian.haftmann@informatik.tu-muenchen.de\">florian.haftmann@informatik.tu-muenchen.de</a>&gt;<br>\nHi Achim and Tobias &amp;al.,</p>\n<p>IMHO this argument on its own does not apply here.  The code generator<br>\nis modular: adding another target language does not<br>\naffect existing target languages and hence does not affect their<br>\ntrustworthiness, particularly not of Isabelle/ML (»Eval«)<br>\nwhich is at the core of all proof-replacing evaluation mechanisms.</p>\n<p>Concerning trustworthiness in general, the code generator by its<br>\narchitecture can never achieve the trustworthiness of e. g.<br>\nthe LCF-style inference kernel: you are always free to configure<br>\npointless or »unsound« things, sometimes burdening<br>\nusers to come up with an appropriate »interpretation« what generated<br>\ncode means in relaton to its originating theory;<br>\na prominent example from the distribution is<br>\nHOL/Library/Code_Real_Approx_By_Float.thy.</p>\n<p>Hence from my perspective it is difficult to argue that there are<br>\nfundamental differences between distribution<br>\nand AFP concerning trustworthiness of code generation.</p>\n<p>From a maintenance perspective, integration into the distribution seems<br>\nactually to be the more appropriate way:<br>\nwe have the tradition to setup target-language specific things in<br>\ntheories where their corresponding logical<br>\nnotions comes up (e. g. List.thy), and this makes things easier to<br>\nmaintain and re-check across all target languages.</p>\n<p>There might still be other issues suggesting the AFP.</p>\n<p>Cheers,<br>\n    Florian<br>\n<a href=\"/user_uploads/14278/6R4WfFCup2dliQE_OOMjPj7Z/OpenPGP_signature\">OpenPGP_signature</a></p>",
        "id": 294901235,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661271232
    },
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\nThe code generator is sensitive. Having an external contribution in the AFP <br>\nclearly delineates what comes from the core developers and what not.</p>\n<p>Tobias<br>\n<a href=\"/user_uploads/14278/iHgmnR4CYFOlqru7LSPnIHyC/smime.p7s\">smime.p7s</a></p>",
        "id": 294924328,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661279326
    },
    {
        "content": "<p>From: Florian Haftmann &lt;<a href=\"mailto:florian.haftmann@informatik.tu-muenchen.de\">florian.haftmann@informatik.tu-muenchen.de</a>&gt;</p>\n<blockquote>\n<p>Having an external contribution in the<br>\nAFP clearly delineates what comes from the core developers and what not.</p>\n</blockquote>\n<p>That could indeed by a criterion, although it sacrifices some aspects of<br>\nmaintainability.</p>\n<p>Florian</p>\n<blockquote>\n<p>Tobias</p>\n<p>On 23/08/2022 18:13, Florian Haftmann wrote:</p>\n<blockquote>\n<p>Hi Achim and Tobias &amp;al.,</p>\n<blockquote>\n<p>I would appreciate your general opinion on F# as a new code generator<br>\ntarget and,<br>\nin particular, your opinion and recommendations on future<br>\nmaintenance/development<br>\nmodels. I see, in principle two approaches:</p>\n<p>1) integrating it into the main distribution of Isabelle or<br>\n2) keeping it as a separate \"component\" (theoretically, it could even<br>\nbe an AFP<br>\n    entry, if users install dotnet themselves and configure the<br>\nISABELLE_DOTNET<br>\n    environment variable - i.e., without the sandboxed dotnet<br>\ninstallation)</p>\n</blockquote>\n<blockquote>\n<p>the code generator is part of Isabelle's trusted infrastructure. Thus<br>\nI recommend you provide your F# code generator as an AFP entry in the<br>\nTools category.</p>\n</blockquote>\n<p>IMHO this argument on its own does not apply here.  The code generator<br>\nis modular: adding another target language does not<br>\naffect existing target languages and hence does not affect their<br>\ntrustworthiness, particularly not of Isabelle/ML (»Eval«)<br>\nwhich is at the core of all proof-replacing evaluation mechanisms.</p>\n<p>Concerning trustworthiness in general, the code generator by its<br>\narchitecture can never achieve the trustworthiness of e. g.<br>\nthe LCF-style inference kernel: you are always free to configure<br>\npointless or »unsound« things, sometimes burdening<br>\nusers to come up with an appropriate »interpretation« what generated<br>\ncode means in relaton to its originating theory;<br>\na prominent example from the distribution is<br>\nHOL/Library/Code_Real_Approx_By_Float.thy.</p>\n<p>Hence from my perspective it is difficult to argue that there are<br>\nfundamental differences between distribution<br>\nand AFP concerning trustworthiness of code generation.</p>\n<p>From a maintenance perspective, integration into the distribution seems<br>\nactually to be the more appropriate way:<br>\nwe have the tradition to setup target-language specific things in<br>\ntheories where their corresponding logical<br>\nnotions comes up (e. g. List.thy), and this makes things easier to<br>\nmaintain and re-check across all target languages.</p>\n<p>There might still be other issues suggesting the AFP.</p>\n<p>Cheers,<br>\n    Florian<br>\n</p>\n</blockquote>\n<hr>\n<p>isabelle-dev mailing list<br>\n<a href=\"mailto:isabelle-dev@in.tum.de\">isabelle-dev@in.tum.de</a><br>\n<a href=\"https://mailman46.in.tum.de/mailman/listinfo/isabelle-dev\">https://mailman46.in.tum.de/mailman/listinfo/isabelle-dev</a><br>\n<a href=\"/user_uploads/14278/feZEBgZZFIlghv5zxxO_VOmF/OpenPGP_signature\">OpenPGP_signature</a></p>\n</blockquote>",
        "id": 295169154,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661408855
    },
    {
        "content": "<p>From: Burkhart Wolff &lt;<a href=\"mailto:wolff@lri.fr\">wolff@lri.fr</a>&gt;<br>\nHm, ich wusste nicht, das nur “Developer” mit dem Prädikat <br>\nIMG (in München gewesen) Beiträge an den Isabelle Bibliotheken<br>\nleisten können sollen dürfen. Auch wenn das der Isabelle Philosophie<br>\nvon Code-follows-Function zuwider läuft wie in diesem Fall.</p>\n<p>Da erscheint Larrys Anregung, gewisse Bibliothekskomponenten<br>\nin die AFP auszulagern in einem neuen (und vielleicht unerwuenschtem) Licht.</p>\n<p>Nun ja, schade. Um so wichtiger wird es, das die AFP zukünftig <br>\nMechanismen hat, wie auch Isabelle Komponenten zugelassen werden <br>\nkoennen. Vielleicht ist das ja in der Tat der bessere Weg.</p>\n<p>@Makarius/Florian: Gibt es diesbezüglich  Neuigkeiten ?<br>\nSollte man eine docker-aehnliche Infrastruktur in der AFP haben ?</p>\n<p>Liebe Grüsse aus dem sonnigen Paris,</p>\n<p>bu</p>",
        "id": 295198783,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661422933
    },
    {
        "content": "<p>From: \"Achim D. Brucker\" &lt;<a href=\"mailto:adbrucker@0x5f.org\">adbrucker@0x5f.org</a>&gt;<br>\nHi,<br>\nSorry for the longer answer to several aspects. Yesterday was pretty busy <br>\nfor me.</p>\n<p>On Thu, Aug 25, 2022 at 08:27:27AM +0200, Florian Haftmann wrote:</p>\n<blockquote>\n<blockquote>\n<p>Having an external contribution in the<br>\nAFP clearly delineates what comes from the core developers and what not.</p>\n</blockquote>\n</blockquote>\n<p>As the trustworthy argument, this is a valid argument.  And, of course, <br>\nas core maintainers, you need to decide what contribution you accept or <br>\nnow. I will not argue on that. </p>\n<p>Still, as Isabelle is an Open Source project, I would have hoped that \"pull requests\"<br>\n(to use the github terminology) are, in principle, welcomed. Again, I am happy to commit <br>\nto maintaining it and I am also willing to invest work on bringing it up to the <br>\nrequired level of quality.  Or maybe there is room for an 'incubator' concept (to <br>\nuse Eclipse terminology), i.e., let the code generator print a warning (both in <br>\nJEdit/VSCode and the generated code) that this is an externally (less trusted) <br>\ncontribution, whenever the F# target is used.</p>\n<p>If a formal copyright transfer statement needs to be signed (e.g., to assign <br>\ncopyright to TUM), I am more than happy to sign such an agreement. </p>\n<blockquote>\n<p>That could indeed by a criterion, although it sacrifices some aspects of<br>\nmaintainability.</p>\n</blockquote>\n<p>I thought a lot about this and, frankly speaking, I have right now no idea how an <br>\nAFP entry can be maintained while, at the same time, ensuring the required <br>\nquality:</p>\n<ul>\n<li>\n<p>the code generator setup for Scala, OCaml, and SML is done locally in<br>\n  the theories defining the formal concepts. This makes a lot of sense, as it<br>\n  keeps the formal definitions and the code generator setup close together<br>\n  and, by that, it is very easy to review that customized code_printings<br>\n  are consistent with the formal definitions.</p>\n</li>\n<li>\n<p>as the AFP does not run any generated code, an \"Isabelle/F#\" in the AFP<br>\n  would not benefit from the \"AFP as regression test\" for Isabelle feature,<br>\n  i.e., there would be no notifications whatsoever if changes in Isabelle<br>\n  would break anything - actually worse, most likely they would not break<br>\n  the F# code generation, they would just diverge silently. Also, users<br>\n  will need to follow additional installations steps manually, as Isabelle <br>\n  Tools cannot be distributed via the AFP.</p>\n</li>\n<li>\n<p>for me, maintaining an AFP entry would essentially mean that I would need<br>\n  to track all commits in the Isabelle repository and manually port changes<br>\n  to an external setup that contains a \"monolithic\" code generator setup.<br>\n  This would, IMHO, similar to the old code generator setup for Isabelle <br>\n  around 2005ish, when I did my first prototype of an F# target in the context<br>\n  of HOL-Testgen. I am sure there have been very good reasons why this<br>\n  setup has been phased out. </p>\n</li>\n<li>\n<p>Currently, by having it on a branch in the mercurial repository and providing<br>\n  it as deep integration (i.e., next to the SML/OCaml setup), I have the big<br>\n  benefit that I get all the updates to the SML/OCaml/Scala setup as hg commits<br>\n  and hg points me rather directly to the changes (they usually pop up as merge<br>\n  conflicts) and as F# is essentially a ML-dialect, updating the F# Setup only<br>\n  takes a few minutes. I do not see (again, help and ideas are appreciated) how<br>\n  I get a similar semi-automated setup working for setup that would be<br>\n  \"AFP ready\".</p>\n</li>\n</ul>\n<p>Thus, I fear that there are only two options with a realistic maintenance workload:<br>\neither an integration into Isabelle or the distributing as patch that users need<br>\nto apply (or, of course, re-packaging a Isabelle fork). The patch/fork option is, <br>\nif course, not attractive for regular users of Isabelle. </p>\n<p>Best,<br>\n        Achim</p>\n<hr>\n<p>isabelle-dev mailing list<br>\n<a href=\"mailto:isabelle-dev@in.tum.de\">isabelle-dev@in.tum.de</a><br>\n<a href=\"https://mailman46.in.tum.de/mailman/listinfo/isabelle-dev\">https://mailman46.in.tum.de/mailman/listinfo/isabelle-dev</a></p>",
        "id": 295203504,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661424936
    },
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\nI don't know who you wanted to address when you emailed \"Makarius Wenzel <br>\n&lt;<a href=\"mailto:isabelle-dev@in.tum.de\">isabelle-dev@in.tum.de</a>&gt;\", but please use English on this list.</p>\n<p>Tobias<br>\n<a href=\"/user_uploads/14278/hnDn95KMMoSbzBMLDWFyJ5eU/smime.p7s\">smime.p7s</a></p>",
        "id": 295216882,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661430525
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nOn 22/08/2022 12:32, Achim D. Brucker wrote:</p>\n<blockquote>\n<p>You might have seen my announcement on the Isabelle User's mailing list: I added F#<br>\nas a new target language to the code generator.  This includes initial system tooling<br>\nfor managing a \"sandboxed\" dotnet environment within Isabelle (similar to the setup<br>\nfor, e.g., OCaml). The changeset is available at (I am currently trying to update<br>\nit to the latest Isabelle development version every couple of days):</p>\n<p><a href=\"https://hg.logicalhacking.com/isabelle/shortlog/feature-codegen-fsharp\">https://hg.logicalhacking.com/isabelle/shortlog/feature-codegen-fsharp</a></p>\n</blockquote>\n<p>I don't see an isolated changeset here, only a very complex history, with <br>\nbranches and merges. Note that the Isabelle development model generally works <br>\nwithout branches (and only trivial merges): it is an easy exercise to do away <br>\nwith these vices.</p>\n<p>After some with your fork experimentation, I did manage to produce an isolated <br>\ndiff like this (using your version df48d77b38f7:</p>\n<p>hg diff --color=never -r default:feature-codegen-fsharp &gt; <br>\nfeature-codegen-fsharp.diff</p>\n<p>The result is attached here, for the record. So it is not that complex, after all.</p>\n<blockquote>\n<p>The current setup successfully passes the \"bin/isabelle build -a\" test on Linux (well<br>\ntested) and Windows (infrequent, tests on a VM running Windows 10). Due to lack of<br>\nhardware, I cannot test it on macOS (trusting the documentation from Microsoft, the<br>\nmacOS setup should work out of the box, sharing the configuration/implementation for<br>\nLinux).</p>\n</blockquote>\n<p>From my experience, macOS is never \"for free\". It usually works, but requires <br>\nsome care and tinkering. It also require a selection of real Mac hardware for <br>\ntesting: both x86_64-darwin and arm64-darwin.</p>\n<p>Looking only briefly at your material, I did not understand where the dotnet / <br>\nF# component actually is.</p>\n<p>De-facto, I am the universal maintainer of all multiplatform Isabelle <br>\ncomponents. At some point, I am certainly interested to understand how F# can <br>\nbe bundled, but right now is a very bad time for that --- approx. 2 weeks <br>\nbefore RC1 of the Isabelle2022 release.</p>\n<blockquote>\n<p>I consider, personally, F# to be an interesting member of the ML-family, as it provides<br>\na step into the world of dotnet-based frameworks and languages (as Scala opens a door<br>\ninto the world of JVM-based languages and frameworks).</p>\n</blockquote>\n<p>That could be true, but I have not used F# or dotnet so far.</p>\n<p>Note that in Isabelle2022 we will have the Node.js world as a newcomer, via <br>\nVSCode and Electron. At some later stage, scala.js might follow. So we already <br>\nhave a lot to digest to absorb such a huge platforms eventually.</p>\n<p>It is still unclear to me, how far this can go.</p>\n<p>For example, the absorption of GHC stack and OCaml opam some years ago did not <br>\nfully work out: these projects have there very own culture that does not fully <br>\nfit into Isabelle. We did not gain the stability and self-containedness of GHC <br>\nand OCaml that we were hoping for: it still requires manual tinkering <br>\noccasionally.</p>\n<p>Makarius<br>\n<a href=\"/user_uploads/14278/_npp849X1VxkEAt2MZPKzgXW/feature-codegen-fsharp.diff.gz\">feature-codegen-fsharp.diff.gz</a></p>",
        "id": 295317068,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661464801
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nOn 22/08/2022 12:32, Achim D. Brucker wrote:</p>\n<blockquote>\n<p>You might have seen my announcement on the Isabelle User's mailing list: I added F#<br>\nas a new target language to the code generator.  This includes initial system tooling<br>\nfor managing a \"sandboxed\" dotnet environment within Isabelle (similar to the setup<br>\nfor, e.g., OCaml). The changeset is available at (I am currently trying to update<br>\nit to the latest Isabelle development version every couple of days):</p>\n<p><a href=\"https://hg.logicalhacking.com/isabelle/shortlog/feature-codegen-fsharp\">https://hg.logicalhacking.com/isabelle/shortlog/feature-codegen-fsharp</a></p>\n</blockquote>\n<p>I don't see an isolated changeset here, only a very complex history, with <br>\nbranches and merges. Note that the Isabelle development model generally works <br>\nwithout branches (and only trivial merges): it is an easy exercise to do away <br>\nwith these vices.</p>\n<p>After some with your fork experimentation, I did manage to produce an isolated <br>\ndiff like this (using your version df48d77b38f7:</p>\n<p>hg diff --color=never -r default:feature-codegen-fsharp &gt; <br>\nfeature-codegen-fsharp.diff</p>\n<p>The result is attached here, for the record. So it is not that complex, after all.</p>\n<blockquote>\n<p>The current setup successfully passes the \"bin/isabelle build -a\" test on Linux (well<br>\ntested) and Windows (infrequent, tests on a VM running Windows 10). Due to lack of<br>\nhardware, I cannot test it on macOS (trusting the documentation from Microsoft, the<br>\nmacOS setup should work out of the box, sharing the configuration/implementation for<br>\nLinux).</p>\n</blockquote>\n<p>From my experience, macOS is never \"for free\". It usually works, but requires <br>\nsome care and tinkering. It also require a selection of real Mac hardware for <br>\ntesting: both x86_64-darwin and arm64-darwin.</p>\n<p>Looking only briefly at your material, I did not understand where the dotnet / <br>\nF# component actually is.</p>\n<p>De-facto, I am the universal maintainer of all multiplatform Isabelle <br>\ncomponents. At some point, I am certainly interested to understand how F# can <br>\nbe bundled, but right now is a very bad time for that --- approx. 2 weeks <br>\nbefore RC1 of the Isabelle2022 release.</p>\n<blockquote>\n<p>I consider, personally, F# to be an interesting member of the ML-family, as it provides<br>\na step into the world of dotnet-based frameworks and languages (as Scala opens a door<br>\ninto the world of JVM-based languages and frameworks).</p>\n</blockquote>\n<p>That could be true, but I have not used F# or dotnet so far.</p>\n<p>Note that in Isabelle2022 we will have the Node.js world as a newcomer, via <br>\nVSCode and Electron. At some later stage, scala.js might follow. So we already <br>\nhave a lot to digest to absorb such a huge platforms eventually.</p>\n<p>It is still unclear to me, how far this can go.</p>\n<p>For example, the absorption of GHC stack and OCaml opam some years ago did not <br>\nfully work out: these projects have there very own culture that does not fully <br>\nfit into Isabelle. We did not gain the stability and self-containedness of GHC <br>\nand OCaml that we were hoping for: it still requires manual tinkering <br>\noccasionally.</p>\n<p>Makarius<br>\n<a href=\"/user_uploads/14278/RE7IKAB_9uP_7f5nXLXXyP3t/feature-codegen-fsharp.diff.gz\">feature-codegen-fsharp.diff.gz</a></p>",
        "id": 295317690,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661465081
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nNo, we neither have git nor pull-requests. Instead, README_REPOSITORY and the <br>\nactual hg history should tell a lot how things work.</p>\n<p>Beyond that, it is better to discuss things with people who are responsible <br>\nfor the relevant part of the Isabelle platform, before doing too much on your <br>\nown account.</p>\n<p>Incidently, the Phabricator guys (1-3 people max.) had long texts in a similar <br>\ndirection (before they had to give up eventually, not being a huge software <br>\ncorporation): <br>\n<a href=\"https://isabelle-dev.sketis.net/book/phabcontrib/article/contributing_code\">https://isabelle-dev.sketis.net/book/phabcontrib/article/contributing_code</a></p>\n<p>Note again that I am in release mode, so anything that is not relevant for <br>\nthis release has to wait until that is published. (I am not going to <br>\nfork/branch/merge myself.)</p>\n<p>Makarius</p>\n<hr>\n<p>isabelle-dev mailing list<br>\n<a href=\"mailto:isabelle-dev@in.tum.de\">isabelle-dev@in.tum.de</a><br>\n<a href=\"https://mailman46.in.tum.de/mailman/listinfo/isabelle-dev\">https://mailman46.in.tum.de/mailman/listinfo/isabelle-dev</a></p>",
        "id": 295318943,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661465699
    },
    {
        "content": "<p>From: \"Achim D. Brucker\" &lt;<a href=\"mailto:adbrucker@0x5f.org\">adbrucker@0x5f.org</a>&gt;<br>\nHi,</p>\n<p>On Thu, Aug 25, 2022 at 11:54:39PM +0200, Makarius wrote:</p>\n<blockquote>\n<p>On 22/08/2022 12:32, Achim D. Brucker wrote:</p>\n<blockquote>\n<p>You might have seen my announcement on the Isabelle User's mailing list: I added F#<br>\nas a new target language to the code generator.  This includes initial system tooling<br>\nfor managing a \"sandboxed\" dotnet environment within Isabelle (similar to the setup<br>\nfor, e.g., OCaml). The changeset is available at (I am currently trying to update<br>\nit to the latest Isabelle development version every couple of days):</p>\n<p><a href=\"https://hg.logicalhacking.com/isabelle/shortlog/feature-codegen-fsharp\">https://hg.logicalhacking.com/isabelle/shortlog/feature-codegen-fsharp</a></p>\n</blockquote>\n<p>I don't see an isolated changeset here, only a very complex history, with<br>\nbranches and merges. Note that the Isabelle development model generally<br>\nworks without branches (and only trivial merges): it is an easy exercise to<br>\ndo away with these vices.</p>\n</blockquote>\n<p>yes, the link goes to a \"living\" branch that I keep (currently) in sync with the <br>\ndevelopment repository of Isabelle. Any isolated diff can only be static, hence, <br>\nI thought that a branch is more convenient and a diff can easily obtained from it. <br>\nBut I am neither a hg expert not do I know all the conventions of the Isabelle <br>\ndevelopment team.  </p>\n<blockquote>\n<p>After some with your fork experimentation, I did manage to produce an<br>\nisolated diff like this (using your version df48d77b38f7:</p>\n<p>hg diff --color=never -r default:feature-codegen-fsharp &gt;<br>\nfeature-codegen-fsharp.diff</p>\n<p>The result is attached here, for the record. So it is not that complex, after all.</p>\n</blockquote>\n<p>Indeed, the additions to the Isabelle code generator are not that large and also <br>\nnot that complex. F# is syntax-wise a mix of ML and Ocaml. The main challenge, so <br>\nto speak, was that F# requires indentation for block structures. This is implemented <br>\nin \"print_fsharp_stmt\" (which is based on print_ocaml_stmt) in the structure Code_ML.</p>\n<blockquote>\n<blockquote>\n<p>The current setup successfully passes the \"bin/isabelle build -a\" test on Linux (well<br>\ntested) and Windows (infrequent, tests on a VM running Windows 10). Due to lack of<br>\nhardware, I cannot test it on macOS (trusting the documentation from Microsoft, the<br>\nmacOS setup should work out of the box, sharing the configuration/implementation for<br>\nLinux).</p>\n</blockquote>\n<p>From my experience, macOS is never \"for free\". It usually works, but<br>\nrequires some care and tinkering. It also require a selection of real Mac<br>\nhardware for testing: both x86_64-darwin and arm64-darwin.</p>\n</blockquote>\n<p>yes, this is what I fear too (while it mostly should work, the occasional <br>\ntinkering and testing will be needed). Sadly, I do lack access to this setup <br>\nright now ... </p>\n<blockquote>\n<p>Looking only briefly at your material, I did not understand where the dotnet<br>\n/ F# component actually is.</p>\n</blockquote>\n<p>The dotnet component (actually, the full dotnet SDK) needs to be installed using </p>\n<p>isabelle dotnet_setup </p>\n<p>This is similar to \"isabelle ghc_setup\". The ghc_setup tool (in ./lib/Tools/dotnet_setup).<br>\nI did not touch the \"Admin\" component part. Firstly, this really only makes sense if the F# <br>\nsetup becomes integrated into the Isabelle distribution, and, secondly, the component <br>\nregistration is an area of Isabelle that I do not know well). </p>\n<p>Internally, the \"dotnet_setup\" tool obtains an installation script from a fixed domain provided <br>\nby Microsoft (i.e., this is promised to be a stable URL by Microsoft). There are two version of <br>\nthis script: a PowerShell script for Windows and a Bash script for Linux/macOS. After downloading <br>\nthis script, the \"dotnet_setup\" tool executes the script to install the dotnet runtime (without user <br>\nintervention) into $ISABELLE_DOTNET_ROOT (the current default value is <br>\n$ISABELLE_HOME_USER/dotnet-$ISABELLE_DOTNET_VERSION). </p>\n<p>This is somewhat similar to the ghc/ocaml setup where stack/opam is used for installing the <br>\nactual dotnet platform (SDK). The difference is that also the installation script is obtained<br>\n\"on demand\" - this seems to be recommended by Microsoft to ensure that always the latest <br>\ndotnet installation script is used (the version of the dotnet framework/SDK that is actually<br>\ninstalled is fixed to the version specified in the Isabelle settings). If this is the <br>\nbest approach for an Isabelle integration or if, e.g., integrating this install script <br>\nas a proper Isabelle component (as opam, if I understood the current setup correctly),<br>\nis something where I would love to hear your opinion on (when time permits). </p>\n<p>F# is one of the two first-class citizen of dotnet. Hence, as soon as the dotnet SDK <br>\nis installed, F# is available (e.g., by invoking \"dotnet fsi\"). </p>\n<p>I hope this clarifies the questions \"where the dotnet component actually is\" question. </p>\n<p>To be clear: I did not register dotnet in Admin/components. My approach is a kind of <br>\n\"user installation\", as I did not want to fiddle around with a part of the Isabelle <br>\nrepository that I do not understand well enough to do this with the necessary level<br>\nof confidence. </p>\n<blockquote>\n<p>De-facto, I am the universal maintainer of all multiplatform Isabelle<br>\ncomponents. At some point, I am certainly interested to understand how F#<br>\ncan be bundled, but right now is a very bad time for that --- approx. 2<br>\nweeks before RC1 of the Isabelle2022 release.</p>\n</blockquote>\n<p>Happy to postpone the discussion to after the Isabelle 2022 release. And, again, if <br>\nthere is a good technical setup allowing to maintain such a code generator configuration <br>\noutside of the Isabelle main repository - happy to hear about it. </p>\n<blockquote>\n<p>For example, the absorption of GHC stack and OCaml opam some years ago did<br>\nnot fully work out: these projects have there very own culture that does not<br>\nfully fit into Isabelle. We did not gain the stability and<br>\nself-containedness of GHC and OCaml that we were hoping for: it still<br>\nrequires manual tinkering occasionally.</p>\n</blockquote>\n<p>I do not want to hide the truth: while dotnet/F# is a stable platform that is used in <br>\nproduction, it has its own culture and tooling. The current setup only uses a tiny bit <br>\nof it, namely \"F# interactive\" (the REPL, so to speak). </p>\n<p>Without knowing exactly how much occasional manual tinkering GHC and Ocaml require, my <br>\nbest guess is that dotnet/F# would be in a similar ball park. Microsoft offers 3 years <br>\nof support for LTS releases of dotnet. Thus, some tinkering is required every 2-3 years <br>\nto switch to the latest LTS release. As the code generator setup maps to the (stable) <br>\ncore of the language and does not make use of any additional libraries, this should <br>\nstill fall into the \"little bit of manual tinkering\" category, hopefully. </p>\n<p>Achim  </p>\n<hr>\n<p>isabelle-dev mailing list<br>\n<a href=\"mailto:isabelle-dev@in.tum.de\">isabelle-dev@in.tum.de</a><br>\n<a href=\"https://mailman46.in.tum.de/mailman/listinfo/isabelle-dev\">https://mailman46.in.tum.de/mailman/listinfo/isabelle-dev</a></p>",
        "id": 295323748,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661468541
    },
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\nOn 25/08/2022 08:27, Florian Haftmann wrote:</p>\n<blockquote>\n<blockquote>\n<p>Having an external contribution in the<br>\nAFP clearly delineates what comes from the core developers and what not.</p>\n</blockquote>\n<p>That could indeed by a criterion, although it sacrifices some aspects of<br>\nmaintainability.</p>\n</blockquote>\n<p>It sounds to me like this could be overcome by a well-defined interface that <br>\nallows people to add their own code generator.</p>\n<p>Tobias</p>\n<blockquote>\n<p>Florian</p>\n<blockquote>\n<p>Tobias<br>\n</p>\n</blockquote>\n<p>On 23/08/2022 18:13, Florian Haftmann wrote:</p>\n<blockquote>\n<blockquote>\n<p>Hi Achim and Tobias &amp;al.,</p>\n<blockquote>\n<p>I would appreciate your general opinion on F# as a new code generator<br>\ntarget and,<br>\nin particular, your opinion and recommendations on future<br>\nmaintenance/development<br>\nmodels. I see, in principle two approaches:</p>\n<p>1) integrating it into the main distribution of Isabelle or<br>\n2) keeping it as a separate \"component\" (theoretically, it could even<br>\nbe an AFP<br>\n     entry, if users install dotnet themselves and configure the<br>\nISABELLE_DOTNET<br>\n     environment variable - i.e., without the sandboxed dotnet<br>\ninstallation)</p>\n</blockquote>\n<blockquote>\n<p>the code generator is part of Isabelle's trusted infrastructure. Thus<br>\nI recommend you provide your F# code generator as an AFP entry in the<br>\nTools category.</p>\n</blockquote>\n<p>IMHO this argument on its own does not apply here.  The code generator<br>\nis modular: adding another target language does not<br>\naffect existing target languages and hence does not affect their<br>\ntrustworthiness, particularly not of Isabelle/ML (»Eval«)<br>\nwhich is at the core of all proof-replacing evaluation mechanisms.</p>\n<p>Concerning trustworthiness in general, the code generator by its<br>\narchitecture can never achieve the trustworthiness of e. g.<br>\nthe LCF-style inference kernel: you are always free to configure<br>\npointless or »unsound« things, sometimes burdening<br>\nusers to come up with an appropriate »interpretation« what generated<br>\ncode means in relaton to its originating theory;<br>\na prominent example from the distribution is<br>\nHOL/Library/Code_Real_Approx_By_Float.thy.</p>\n<p>Hence from my perspective it is difficult to argue that there are<br>\nfundamental differences between distribution<br>\nand AFP concerning trustworthiness of code generation.</p>\n<p>From a maintenance perspective, integration into the distribution seems<br>\nactually to be the more appropriate way:<br>\nwe have the tradition to setup target-language specific things in<br>\ntheories where their corresponding logical<br>\nnotions comes up (e. g. List.thy), and this makes things easier to<br>\nmaintain and re-check across all target languages.</p>\n<p>There might still be other issues suggesting the AFP.</p>\n<p>Cheers,<br>\n     Florian<br>\n</p>\n</blockquote>\n<hr>\n<p>isabelle-dev mailing list<br>\n<a href=\"mailto:isabelle-dev@in.tum.de\">isabelle-dev@in.tum.de</a><br>\n<a href=\"https://mailman46.in.tum.de/mailman/listinfo/isabelle-dev\">https://mailman46.in.tum.de/mailman/listinfo/isabelle-dev</a></p>\n</blockquote>\n<p><a href=\"/user_uploads/14278/Y3wMn6yNihoowjkIJo0gjg4j/smime.p7s\">smime.p7s</a></p>\n</blockquote>",
        "id": 295353850,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661489547
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nThanks. From your explanations, I have learned many things about F# and dotnet.</p>\n<p>Can you also say what your applications are?</p>\n<p>Dotnet was once positioned as the next big thing, but recently we have seen <br>\nmore excitement elsewhere (even by Microsoft): e.g. Node.js/Electron.</p>\n<p>Makarius</p>\n<hr>\n<p>isabelle-dev mailing list<br>\n<a href=\"mailto:isabelle-dev@in.tum.de\">isabelle-dev@in.tum.de</a><br>\n<a href=\"https://mailman46.in.tum.de/mailman/listinfo/isabelle-dev\">https://mailman46.in.tum.de/mailman/listinfo/isabelle-dev</a></p>",
        "id": 295519235,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661551127
    },
    {
        "content": "<p>From: \"Achim D. Brucker\" &lt;<a href=\"mailto:adbrucker@0x5f.org\">adbrucker@0x5f.org</a>&gt;<br>\nOn Fri, Aug 26, 2022 at 11:58:17PM +0200, Makarius wrote:</p>\n<blockquote>\n<p>Thanks. From your explanations, I have learned many things about F# and dotnet.</p>\n<p>Can you also say what your applications are?</p>\n</blockquote>\n<p>Hard to summarize in a few sentences. My original interest (way back in 2007, when <br>\nfiddling with mono was still required on Linux) was driven by the need to interact,<br>\nfrom Isabelle generated code, with Microsoft APIs for which nice packages were only <br>\navailable on dotnet. Access to Microsoft tooling and APIs is still a big motivation.</p>\n<p>England, at least the South West, seems to be in a strong grip by Microsoft, i.e., <br>\nthe Uni IT and also local project partners (mostly SMEs, which is likely also a <br>\ncontributing factor) essentially require that one can interact with dotnet for joint <br>\nprojects. Positively, there is also a quite strong community of F# developers/companies  <br>\n(e.g., using the SAFE stack <a href=\"https://safe-stack.github.io/\">https://safe-stack.github.io/</a> that allows developing web <br>\napplications type-safe in F#) in England ... </p>\n<p>Personally, it's more the \"I can program in ML and have easy access to all the shiny <br>\nframeworks (via <a href=\"https://www.nuget.org/\">https://www.nuget.org/</a>), a reasonable well working package manager/build <br>\nsystems, and IDE support (e.g., Ionice in VSCode)\" that makes it an attractive platform. <br>\nA lot of the problems I solve with F# these days are \"mid-size\" data processing/conversions <br>\ntasks (that other people might solve in Python). </p>\n<p>The combination of having a strongly typed programming language with pattern matches <br>\nand also having access to databases, type providers for web scraping, and parser/validators<br>\nfor many formats available as libraries is a nice sweet spot. Overall, very similar <br>\nto Scala on the Java platform. Also very similar to Scala, F# also has the \"dualism\" of <br>\nlarger compiled programs and scripts that can directly be executed. </p>\n<p>While there are good web-stacks for F# (that essentially require nearly no JavaScript<br>\nprogramming), good cross-platform UIs for desktop apps did essentially not exists <br>\n(respectively, the ones that did exist were mostly generating Node.js/Electron<br>\napplications). This seems to change right now - also Microsoft seems to see a <br>\nneed for a cross-platform UI framework for dotnet. </p>\n<blockquote>\n<p>Dotnet was once positioned as the next big thing, but recently we have seen<br>\nmore excitement elsewhere (even by Microsoft): e.g. Node.js/Electron.</p>\n</blockquote>\n<p>It's clearly not as hyped as node.js/Electron. On the other hand, upgrades of <br>\nproject across major versions of the underlying framework have been less painless <br>\nfor F# than for the few node.js projects I am involved with ;-).</p>\n<p>Cheers,<br>\n    Achim </p>\n<hr>\n<p>isabelle-dev mailing list<br>\n<a href=\"mailto:isabelle-dev@in.tum.de\">isabelle-dev@in.tum.de</a><br>\n<a href=\"https://mailman46.in.tum.de/mailman/listinfo/isabelle-dev\">https://mailman46.in.tum.de/mailman/listinfo/isabelle-dev</a></p>",
        "id": 295759992,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661723406
    },
    {
        "content": "<p>From: Florian Haftmann &lt;<a href=\"mailto:florian.haftmann@informatik.tu-muenchen.de\">florian.haftmann@informatik.tu-muenchen.de</a>&gt;<br>\nThis thread is still unsettled.</p>\n<p>Without going into detail, at the moment I think it is best to postpone<br>\nthe discussion until the next Isabelle release is published.  We<br>\ndefinitely need Makarius have a look on the .NET components integration.</p>\n<p>Cheers,<br>\n    Florian<br>\n<a href=\"/user_uploads/14278/4lB3Zem-XRWBMcJqXmke7C64/OpenPGP_signature\">OpenPGP_signature</a></p>",
        "id": 297319427,
        "sender_full_name": "Email Gateway",
        "timestamp": 1662450799
    },
    {
        "content": "<p>From: Florian Haftmann &lt;<a href=\"mailto:florian.haftmann@informatik.tu-muenchen.de\">florian.haftmann@informatik.tu-muenchen.de</a>&gt;<br>\nHi all,</p>\n<p>after the Isabelle release there might now be an opportunity to revive <br>\nthis thread.</p>\n<p>Meanwhile in personal conversation Tobias and me finally agreed that, <br>\nconcerning code generation itself, the best solution is to follow <br>\nAchim’s original proposal and put the F# serializer into the distribution.</p>\n<p>@Makarius – while the .NET component setup looks promising for me, I am <br>\nno expert in that area and I think we need your final judgement on this.</p>\n<p>Cheers,<br>\n    Florian<br>\n<a href=\"/user_uploads/14278/RioKtmMSierv7hJyiMEp7sTe/OpenPGP_0xA707172232CFA4E9.asc\">OpenPGP_0xA707172232CFA4E9.asc</a><br>\n<a href=\"/user_uploads/14278/D209dZaB53oa0ZTL9wX9Tt17/OpenPGP_signature\">OpenPGP_signature</a></p>",
        "id": 308036429,
        "sender_full_name": "Email Gateway",
        "timestamp": 1667590853
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nI have spent some time with the \"isabelle dotnet_setup\" script by Achim and <br>\nhave turned the main ideas into proper \"lambda calculus for systems <br>\nprogramming\" (aka Scala): <br>\n<a href=\"https://isabelle-dev.sketis.net/source/isabelle/browse/default/src/Pure/Tools/dotnet_setup.scala;da85bffef443\">https://isabelle-dev.sketis.net/source/isabelle/browse/default/src/Pure/Tools/dotnet_setup.scala;da85bffef443</a></p>\n<p>The key by Microsoft documentation is here: <br>\n<a href=\"https://learn.microsoft.com/en-us/dotnet/core/tools/dotnet-install-script\">https://learn.microsoft.com/en-us/dotnet/core/tools/dotnet-install-script</a></p>\n<p>So this is our NEWS entry in Isabelle/da85bffef443:</p>\n<p><strong>* System </strong>*</p>\n<ul>\n<li>The command-line tools \"isabelle dotnet_setup\" and \"isabelle dotnet\"<br>\nsupport the Dotnet platform (.NET), which includes Fsharp (F#). This<br>\nworks uniformly on all Isabelle OS platforms, even as cross-platform<br>\ninstallation: \"isabelle dotnet_setup -p linux_arm,linux,macos,windows\".</li>\n</ul>\n<p>Example:</p>\n<p>isabelle dotnet_setup<br>\n   isabelle dotnet fsi</p>\n<blockquote>\n<p>1 + 1;;<br>\n#quit;;</p>\n</blockquote>\n<p>The multiplatform installation script from the Dotnet project looks fairly <br>\nrobust. At least the \"1 + 1\" example works smoothly on all Isabelle platforms.</p>\n<p>For the cross-platform installation of windows on linux, I have used the <br>\n\"powershell\" snap of Ubuntu 22.04 LTS, just for the fun of it.</p>\n<p>So the main remaining question for Isabelle/HOL codegen support is the proper <br>\nspelling of \"F#\". I would say it is \"Fsharp\" for the Isar command syntax and <br>\n\"fsharp\" in plain ML names.</p>\n<p>Makarius</p>\n<hr>\n<p>isabelle-dev mailing list<br>\n<a href=\"mailto:isabelle-dev@in.tum.de\">isabelle-dev@in.tum.de</a><br>\n<a href=\"https://mailman46.in.tum.de/mailman/listinfo/isabelle-dev\">https://mailman46.in.tum.de/mailman/listinfo/isabelle-dev</a></p>",
        "id": 308192954,
        "sender_full_name": "Email Gateway",
        "timestamp": 1667687387
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nI wonder if this is also relevant, but we are not using the regular installer <br>\nhere: <a href=\"https://learn.microsoft.com/en-us/dotnet/core/tools/telemetry\">https://learn.microsoft.com/en-us/dotnet/core/tools/telemetry</a></p>\n<p>Is there anything to do, in order to disable telemetry data sent to Microsoft?</p>\n<p>Makarius</p>\n<hr>\n<p>isabelle-dev mailing list<br>\n<a href=\"mailto:isabelle-dev@in.tum.de\">isabelle-dev@in.tum.de</a><br>\n<a href=\"https://mailman46.in.tum.de/mailman/listinfo/isabelle-dev\">https://mailman46.in.tum.de/mailman/listinfo/isabelle-dev</a></p>",
        "id": 308193512,
        "sender_full_name": "Email Gateway",
        "timestamp": 1667687840
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nI have now added this change, hoping that it is sufficient: <br>\n<a href=\"https://isabelle-dev.sketis.net/rISABELLE18c50ff16bbc\">https://isabelle-dev.sketis.net/rISABELLE18c50ff16bbc</a></p>\n<p>Makarius</p>\n<hr>\n<p>isabelle-dev mailing list<br>\n<a href=\"mailto:isabelle-dev@in.tum.de\">isabelle-dev@in.tum.de</a><br>\n<a href=\"https://mailman46.in.tum.de/mailman/listinfo/isabelle-dev\">https://mailman46.in.tum.de/mailman/listinfo/isabelle-dev</a></p>",
        "id": 308195857,
        "sender_full_name": "Email Gateway",
        "timestamp": 1667689819
    }
]