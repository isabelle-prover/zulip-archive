[
    {
        "content": "<p>From: Jasmin Blanchette &lt;<a href=\"mailto:jasmin.blanchette@ifi.lmu.de\">jasmin.blanchette@ifi.lmu.de</a>&gt;<br>\nDear colleagues,</p>\n<p>Sledgehammer invokes \"simp\" as part of proof reconstruction. I'm currently adding a mode, inspired by Magnushammer [1], where the simplifier is applied directly, without relying on an automatic theorem prover. However, for this to work, I need to call \"by (simp add: ...)\" with a timeout, where \"...\" is a potentially long list of lemmas that might lead to nontermination.</p>\n<p>What happens quite often is that the \"simp\" call (actually, a call to \"Goal.prove\" in ML) throws \"Interrupt\". This is propagated through Sledgehammer and leads to the \"sledgehammer\" command to stop working and turn pink.</p>\n<p>The issue is not restricted to \"simp\". \"using ... by auto\" can also lead to the same behavior.</p>\n<p>I can sometimes reproduce the issue without Sledgehammer, using repository version Isabelle/10d85056cf3b. I write \"sometimes\" because it's clearly nondeterministic. Here's a .thy file:</p>\n<p>theory Scratch<br>\n  imports Main<br>\nbegin</p>\n<p>lemma \"1 + 2 = 4\"<br>\n  apply (simp add: one_add_one numeral_plus_one one_plus_numeral numeral_eq_one_iff one_eq_numeral_iff semiring_norm(85) semiring_norm(83) numeral_plus_numeral add_numeral_left numeral_One numeral_Bit0 one_plus_numeral_commute Let_numeral numeral_eq_iff semiring_norm(87) semiring_norm(6) semiring_norm(2) numerals(1) nat_1_add_1 add_One_commute is_num_normalize(1) semiring_norm(82) dbl_simps(3) verit_eq_simplify(8) Let_1 add_right_cancel add_left_cancel verit_eq_simplify(10) add_neg_numeral_special(9) dbl_simps(5) neg_equal_iff_equal add.inverse_inverse verit_minus_simplify(4) neg_numeral_eq_iff Let_neg_numeral minus_add_distrib minus_add_cancel add_minus_cancel add_neg_numeral_simps(3) dbl_simps(1) neg_one_eq_numeral_iff numeral_eq_neg_one_iff semiring_norm(167) dbl_simps(4) add.inverse_distrib_swap group_cancel.neg1 minus_equation_iff equation_minus_iff verit_negate_coefficient(3) neg_numeral_neq_numeral numeral_neq_neg_numeral is_num_normalize(8) one_neq_neg_one numeral_neq_neg_one one_neq_neg_numeral dbl_def uminus_numeral_One ab_semigroup_add_class.add_ac(1) add_mono_thms_linordered_semiring(4) group_cancel.add1 group_cancel.add2 add.assoc add.left_cancel add.right_cancel add.commute)</p>\n<p>end</p>\n<p>The enclosed screenshots show what happens. If there's a way to call a tactic with a timeout as a blackbox, without risk of triggering fatal errors that lead Sledgehammer to entirely fail (i.e., become pink), I would be a taker.</p>\n<p>Best,<br>\nJasmin</p>\n<p>[1] <a href=\"https://arxiv.org/abs/2303.04488\">https://arxiv.org/abs/2303.04488</a></p>\n<p><a href=\"/user_uploads/14278/L2Sv8IuU9Oy6_AO8XYIHiBQZ/Screenshot-2023-08-28-at-17.22.13.png\">Screenshot 2023-08-28 at 17.22.13.png</a><br>\n<a href=\"/user_uploads/14278/ZbYUO68fpS8HgtwB1NeSpop4/Screenshot-2023-08-28-at-17.21.56.png\">Screenshot 2023-08-28 at 17.21.56.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/14278/L2Sv8IuU9Oy6_AO8XYIHiBQZ/Screenshot-2023-08-28-at-17.22.13.png\" title=\"Screenshot 2023-08-28 at 17.22.13.png\"><img src=\"/user_uploads/14278/L2Sv8IuU9Oy6_AO8XYIHiBQZ/Screenshot-2023-08-28-at-17.22.13.png\"></a></div><div class=\"message_inline_image\"><a href=\"/user_uploads/14278/ZbYUO68fpS8HgtwB1NeSpop4/Screenshot-2023-08-28-at-17.21.56.png\" title=\"Screenshot 2023-08-28 at 17.21.56.png\"><img src=\"/user_uploads/14278/ZbYUO68fpS8HgtwB1NeSpop4/Screenshot-2023-08-28-at-17.21.56.png\"></a></div>",
        "id": 387693714,
        "sender_full_name": "Email Gateway",
        "timestamp": 1693236700
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nThis Interrupt is probably a resource problem of the ML runtime system, <br>\npresumably stack overflow.</p>\n<p>Unlike the Java/VM we don't see the difference of an external event and such <br>\nan internal event of the Poly/ML RTS.</p>\n<p>I will make some further experiments to see if we can somewhat enhance the <br>\nconcept of Isabelle/ML thread, without having to ask David Matthews for <br>\nchanges in Poly/ML.</p>\n<p>Makarius</p>\n<hr>\n<p>isabelle-dev mailing list<br>\n<a href=\"mailto:isabelle-dev@in.tum.de\">isabelle-dev@in.tum.de</a><br>\n<a href=\"https://mailman46.in.tum.de/mailman/listinfo/isabelle-dev\">https://mailman46.in.tum.de/mailman/listinfo/isabelle-dev</a></p>",
        "id": 388084545,
        "sender_full_name": "Email Gateway",
        "timestamp": 1693394548
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nI got distracted elsewhere, especially for the release.</p>\n<p>Nonetheless, I have started to revisit and rethink the management of <br>\nIsabelle/ML threads. Traces of that process are already in <br>\nIsabelle/47d0c333d155 (and before).</p>\n<p>In the next 1-2 days, I will be busy again elsewhere. Stay tuned ...</p>\n<p>Makarius</p>\n<hr>\n<p>isabelle-dev mailing list<br>\n<a href=\"mailto:isabelle-dev@in.tum.de\">isabelle-dev@in.tum.de</a><br>\n<a href=\"https://mailman46.in.tum.de/mailman/listinfo/isabelle-dev\">https://mailman46.in.tum.de/mailman/listinfo/isabelle-dev</a></p>",
        "id": 389504462,
        "sender_full_name": "Email Gateway",
        "timestamp": 1694028786
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nIt has required a few weeks longer than expected, but now we have quite <br>\ndifferent interrupt handling in Isabelle/ML.</p>\n<p>Your isolated example works now like this in Isabelle/280a228dc2f1:</p>\n<p>theory Scratch<br>\n   imports Main<br>\nbegin</p>\n<p>lemma \"1 + 2 = 4\"<br>\n   apply (simp add: one_add_one numeral_plus_one one_plus_numeral <br>\nnumeral_eq_one_iff one_eq_numeral_iff semiring_norm(85) semiring_norm(83) <br>\nnumeral_plus_numeral add_numeral_left numeral_One numeral_Bit0 <br>\none_plus_numeral_commute Let_numeral numeral_eq_iff semiring_norm(87) <br>\nsemiring_norm(6) semiring_norm(2) numerals(1) nat_1_add_1 add_One_commute <br>\nis_num_normalize(1) semiring_norm(82) dbl_simps(3) verit_eq_simplify(8) Let_1 <br>\nadd_right_cancel add_left_cancel verit_eq_simplify(10) <br>\nadd_neg_numeral_special(9) dbl_simps(5) neg_equal_iff_equal <br>\nadd.inverse_inverse verit_minus_simplify(4) neg_numeral_eq_iff Let_neg_numeral <br>\nminus_add_distrib minus_add_cancel add_minus_cancel add_neg_numeral_simps(3) <br>\ndbl_simps(1) neg_one_eq_numeral_iff numeral_eq_neg_one_iff semiring_norm(167) <br>\ndbl_simps(4) add.inverse_distrib_swap group_cancel.neg1 minus_equation_iff <br>\nequation_minus_iff verit_negate_coefficient(3) neg_numeral_neq_numeral <br>\nnumeral_neq_neg_numeral is_num_normalize(8) one_neq_neg_one <br>\nnumeral_neq_neg_one one_neq_neg_numeral dbl_def uminus_numeral_One <br>\nab_semigroup_add_class.add_ac(1) add_mono_thms_linordered_semiring(4) <br>\ngroup_cancel.add1 group_cancel.add2 add.assoc add.left_cancel add.right_cancel <br>\nadd.commute)<br>\n   (<em>exception Interrupt_Breakdown raised</em>)<br>\n   oops</p>\n<p>end</p>\n<p>Note that the proper way to distinguish interrupts is Exn.is_interrupt, <br>\nExn.is_interrupt_proper, Exn.is_interrupt_breakdown.</p>\n<p>Some fine points might still be open, and to be reconsidered.</p>\n<p>Makarius</p>\n<hr>\n<p>isabelle-dev mailing list<br>\n<a href=\"mailto:isabelle-dev@in.tum.de\">isabelle-dev@in.tum.de</a><br>\n<a href=\"https://mailman46.in.tum.de/mailman/listinfo/isabelle-dev\">https://mailman46.in.tum.de/mailman/listinfo/isabelle-dev</a></p>",
        "id": 396357783,
        "sender_full_name": "Email Gateway",
        "timestamp": 1697141633
    }
]