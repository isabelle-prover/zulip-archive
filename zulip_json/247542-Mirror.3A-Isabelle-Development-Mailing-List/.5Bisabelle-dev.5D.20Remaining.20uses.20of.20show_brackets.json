[
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nAre there any remaining uses of show_brackets?</p>\n<p>Here is historical proof for this feature from many decades ago:</p>\n<p>changeset:   504:a4f09493d929<br>\nuser:        nipkow<br>\ndate:        Tue Aug 02 09:07:10 1994 +0200<br>\nfiles:       src/Pure/Syntax/printer.ML<br>\ndescription:<br>\nadded flag show_brackets for printinmg fully bracketed terms.</p>\n<p>changeset:   508:d8b6999ca364<br>\nuser:        lcp<br>\ndate:        Thu Aug 04 11:51:30 1994 +0200<br>\nfiles:       doc-src/Ref/introduction.tex<br>\ndescription:<br>\naddition of show_brackets</p>\n<p>The documentation in d8b6999ca364 says: \"show_brackets makes Isabelle show <br>\nfull bracketing.  This reveals the grouping of infix operators.\"</p>\n<p>We have that already via PIDE markup for pretty-blocks, see also <br>\nIsabelle/87f173836d56 --- and it works more accurately, too.</p>\n<p>So if there are no further uses of it, I will remove it shortly before the <br>\nIsabelle2025 release process starts (Jan-2025).</p>\n<p>Makarius</p>\n<hr>\n<p>isabelle-dev mailing list<br>\n<a href=\"mailto:isabelle-dev@in.tum.de\">isabelle-dev@in.tum.de</a><br>\n<a href=\"https://mailman46.in.tum.de/mailman/listinfo/isabelle-dev\">https://mailman46.in.tum.de/mailman/listinfo/isabelle-dev</a></p>",
        "id": 476193586,
        "sender_full_name": "Email Gateway",
        "timestamp": 1728584236
    },
    {
        "content": "<p>From: Lawrence Paulson &lt;<a href=\"mailto:lp15@cam.ac.uk\">lp15@cam.ac.uk</a>&gt;<br>\nYes – for anyone who wants their proof states to be legible. I always recommend it to students. </p>\n<p>It’s exactly the same principle as having [_,_,_] for lists instead of _::_::_::nil.</p>\n<p>Larry</p>\n<blockquote>\n<p>On 10 Oct 2024, at 19:16, Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt; wrote:</p>\n<p>Are there any remaining uses of show_brackets?</p>\n</blockquote>\n<hr>\n<p>isabelle-dev mailing list<br>\n<a href=\"mailto:isabelle-dev@in.tum.de\">isabelle-dev@in.tum.de</a><br>\n<a href=\"https://mailman46.in.tum.de/mailman/listinfo/isabelle-dev\">https://mailman46.in.tum.de/mailman/listinfo/isabelle-dev</a></p>",
        "id": 476195807,
        "sender_full_name": "Email Gateway",
        "timestamp": 1728584848
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nOn 10/10/2024 20:26, Lawrence Paulson wrote:</p>\n<blockquote>\n<p>Yes – for anyone who wants their proof states to be legible. I always recommend it to students.</p>\n</blockquote>\n<p>I don't understand what you mean by \"legible\". How is the following example <br>\nlegible?</p>\n<p>declare [[show_brackets]]<br>\nlemma ‹∀x y. P x y ⟶ Q y x›</p>\n<p>goal (1 subgoal):</p>\n<p>1. (∀(x y). ((P x y) ⟶ (Q y x)))</p>\n<p>The parentheses for the variable bindings are even wrong in the sense of the <br>\nformal syntax.</p>\n<blockquote>\n<p>It’s exactly the same principle as having [_,_,_] for lists instead of _::_::_::nil.</p>\n</blockquote>\n<p>I don't understand that either. Can you explain that, please?</p>\n<p>If I would understand the principle, I could say if cane be done via PIDE <br>\nrendering instead of occasionally bad parentheses.</p>\n<p>Makarius</p>\n<hr>\n<p>isabelle-dev mailing list<br>\n<a href=\"mailto:isabelle-dev@in.tum.de\">isabelle-dev@in.tum.de</a><br>\n<a href=\"https://mailman46.in.tum.de/mailman/listinfo/isabelle-dev\">https://mailman46.in.tum.de/mailman/listinfo/isabelle-dev</a></p>",
        "id": 476201887,
        "sender_full_name": "Email Gateway",
        "timestamp": 1728586328
    },
    {
        "content": "<p>From: Peter Lammich &lt;<a href=\"mailto:lammich@in.tum.de\">lammich@in.tum.de</a>&gt;</p>\n<hr>\n<p>isabelle-dev mailing list<br>\n<a href=\"mailto:isabelle-dev@in.tum.de\">isabelle-dev@in.tum.de</a><br>\n<a href=\"https://mailman46.in.tum.de/mailman/listinfo/isabelle-dev\">https://mailman46.in.tum.de/mailman/listinfo/isabelle-dev</a></p>",
        "id": 476207137,
        "sender_full_name": "Email Gateway",
        "timestamp": 1728587988
    },
    {
        "content": "<p>From: Lawrence Paulson &lt;<a href=\"mailto:lp15@cam.ac.uk\">lp15@cam.ac.uk</a>&gt;<br>\nOh, that one. I quite forgot it was there. But it’s occasionally useful when you aren’t sure about operator precedences. Is it hard to support?</p>\n<p>Larry</p>\n<blockquote>\n<p>On 10 Oct 2024, at 19:51, Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt; wrote:</p>\n<p>I don't understand what you mean by \"legible\". How is the following example legible?</p>\n<p>declare [[show_brackets]]<br>\nlemma ‹∀x y. P x y ⟶ Q y x›</p>\n<p>goal (1 subgoal):<br>\n1. (∀(x y). ((P x y) ⟶ (Q y x)))<br>\n</p>\n</blockquote>\n<hr>\n<p>isabelle-dev mailing list<br>\n<a href=\"mailto:isabelle-dev@in.tum.de\">isabelle-dev@in.tum.de</a><br>\n<a href=\"https://mailman46.in.tum.de/mailman/listinfo/isabelle-dev\">https://mailman46.in.tum.de/mailman/listinfo/isabelle-dev</a></p>",
        "id": 476222170,
        "sender_full_name": "Email Gateway",
        "timestamp": 1728593369
    },
    {
        "content": "<p>From: Lawrence Paulson &lt;<a href=\"mailto:lp15@cam.ac.uk\">lp15@cam.ac.uk</a>&gt;<br>\nYes – exactly and especially when implications are nested.<br>\nLarry</p>\n<blockquote>\n<p>On 10 Oct 2024, at 20:19, Peter Lammich &lt;<a href=\"mailto:lammich@in.tum.de\">lammich@in.tum.de</a>&gt; wrote:</p>\n<p>I think here's a confusion between the attribute that shows all parentheses and the print mode that switches printing of premises from a==&gt;b==&gt;... to [|a;b;...|]==&gt; </p>\n<p>Please do not remove the latter, as it has many users. It makes long subgoals more readable, as you don't have to find the last==&gt; to interpret the goal.<br>\n</p>\n</blockquote>\n<hr>\n<p>isabelle-dev mailing list<br>\n<a href=\"mailto:isabelle-dev@in.tum.de\">isabelle-dev@in.tum.de</a><br>\n<a href=\"https://mailman46.in.tum.de/mailman/listinfo/isabelle-dev\">https://mailman46.in.tum.de/mailman/listinfo/isabelle-dev</a></p>",
        "id": 476222230,
        "sender_full_name": "Email Gateway",
        "timestamp": 1728593397
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;</p>\n<blockquote>\n<blockquote>\n<p>On 10 Oct 2024, at 19:51, Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt; wrote:</p>\n<p>I don't understand what you mean by \"legible\". How is the following <br>\nexample legible?</p>\n<p>declare [[show_brackets]]<br>\nlemma ‹∀x y. P x y ⟶ Q y x›</p>\n<p>goal (1 subgoal):<br>\n1. (∀(x y). ((P x y) ⟶ (Q y x)))</p>\n</blockquote>\n</blockquote>\n<p>On 10/10/2024 22:48, Lawrence Paulson wrote:</p>\n<blockquote>\n<p>Oh, that one. I quite forgot it was there. But it’s occasionally useful when you aren’t sure about operator precedences. Is it hard to support?</p>\n</blockquote>\n<p>It is a totally adhoc feature from 30 years ago, and incorrect in certain <br>\nsituations.</p>\n<p>Can you try if the new mixfix markup works sufficiently well to replace this <br>\nidea? The new scheme works for parsed input source and pretty-printed output. <br>\nYou just C-hover over the text, and get feedback about its inner-syntax structure.</p>\n<p>People might call that a \"parse tree\", but it is better than a raw parse tree <br>\n(which contains a lot of irrelevant information).</p>\n<p>Makarius</p>\n<hr>\n<p>isabelle-dev mailing list<br>\n<a href=\"mailto:isabelle-dev@in.tum.de\">isabelle-dev@in.tum.de</a><br>\n<a href=\"https://mailman46.in.tum.de/mailman/listinfo/isabelle-dev\">https://mailman46.in.tum.de/mailman/listinfo/isabelle-dev</a></p>",
        "id": 476333398,
        "sender_full_name": "Email Gateway",
        "timestamp": 1728634465
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nOn 10/10/2024 21:19, Peter Lammich wrote:</p>\n<blockquote>\n<p>I think here's a confusion between the attribute that shows all parentheses <br>\nand the print mode that switches printing of premises from a==&gt;b==&gt;... to <br>\n[|a;b;...|]==&gt;</p>\n<p>Please do not remove the latter, as it has many users. It makes long subgoals <br>\nmore readable, as you don't have to find the last==&gt; to interpret the goal.</p>\n</blockquote>\n<p>That is unrelated to the current thread. The time to ask about its \"remaining <br>\nuses\" it not there yet, but it will come when the proof state output has been <br>\nwarped 20 yeards foreward. (That is not going to happen for Isabelle2025.)</p>\n<p>Makarius</p>\n<hr>\n<p>isabelle-dev mailing list<br>\n<a href=\"mailto:isabelle-dev@in.tum.de\">isabelle-dev@in.tum.de</a><br>\n<a href=\"https://mailman46.in.tum.de/mailman/listinfo/isabelle-dev\">https://mailman46.in.tum.de/mailman/listinfo/isabelle-dev</a></p>",
        "id": 476333748,
        "sender_full_name": "Email Gateway",
        "timestamp": 1728634568
    },
    {
        "content": "<p>From: Peter Lammich &lt;<a href=\"mailto:lammich@in.tum.de\">lammich@in.tum.de</a>&gt;</p>\n<p>On 11/10/2024 10:13, Makarius wrote:</p>\n<blockquote>\n<blockquote>\n<blockquote>\n<p>On 10 Oct 2024, at 19:51, Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt; wrote:</p>\n<p>I don't understand what you mean by \"legible\". How is the following <br>\nexample legible?</p>\n<p>declare [[show_brackets]]<br>\nlemma ‹∀x y. P x y ⟶ Q y x›</p>\n<p>goal (1 subgoal):<br>\n1. (∀(x y). ((P x y) ⟶ (Q y x)))</p>\n</blockquote>\n</blockquote>\n<p>On 10/10/2024 22:48, Lawrence Paulson wrote:</p>\n<blockquote>\n<p>Oh, that one. I quite forgot it was there. But it’s occasionally <br>\nuseful when you aren’t sure about operator precedences. Is it hard to <br>\nsupport?</p>\n</blockquote>\n</blockquote>\n<p>If I'm unsure about operator precedence, I usually go the other way <br>\nround: I manually add some parentheses, and see how/if the <br>\npretty-printed term changes</p>\n<p>--</p>\n<p>Peter</p>\n<blockquote>\n<p>It is a totally adhoc feature from 30 years ago, and incorrect in <br>\ncertain situations.</p>\n<p>Can you try if the new mixfix markup works sufficiently well to <br>\nreplace this idea? The new scheme works for parsed input source and <br>\npretty-printed output. You just C-hover over the text, and get <br>\nfeedback about its inner-syntax structure.</p>\n<p>People might call that a \"parse tree\", but it is better than a raw <br>\nparse tree (which contains a lot of irrelevant information).</p>\n<p>Makarius</p>\n<hr>\n<p>isabelle-dev mailing list<br>\n<a href=\"mailto:isabelle-dev@in.tum.de\">isabelle-dev@in.tum.de</a><br>\n<a href=\"https://mailman46.in.tum.de/mailman/listinfo/isabelle-dev\">https://mailman46.in.tum.de/mailman/listinfo/isabelle-dev</a></p>\n</blockquote>\n<hr>\n<p>isabelle-dev mailing list<br>\n<a href=\"mailto:isabelle-dev@in.tum.de\">isabelle-dev@in.tum.de</a><br>\n<a href=\"https://mailman46.in.tum.de/mailman/listinfo/isabelle-dev\">https://mailman46.in.tum.de/mailman/listinfo/isabelle-dev</a></p>",
        "id": 476339125,
        "sender_full_name": "Email Gateway",
        "timestamp": 1728636350
    },
    {
        "content": "<p>From: Lawrence Paulson &lt;<a href=\"mailto:lp15@cam.ac.uk\">lp15@cam.ac.uk</a>&gt;<br>\nI tried it on a set comprehension and got </p>\n<p>notation: mixfix \"set comprehension”</p>\n<p>This is pretty useful, because in the past there was no way to examine non-trivial syntax constructions, which in some cases were a complete mystery.</p>\n<p>If it's not too difficult, could it be possible to jump to the original definition?</p>\n<p>Larry</p>\n<blockquote>\n<p>On 11 Oct 2024, at 09:13, Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt; wrote:</p>\n<p>Can you try if the new mixfix markup works sufficiently well to replace this idea? The new scheme works for parsed input source and pretty-printed output. You just C-hover over the text, and get feedback about its inner-syntax structure.</p>\n</blockquote>\n<hr>\n<p>isabelle-dev mailing list<br>\n<a href=\"mailto:isabelle-dev@in.tum.de\">isabelle-dev@in.tum.de</a><br>\n<a href=\"https://mailman46.in.tum.de/mailman/listinfo/isabelle-dev\">https://mailman46.in.tum.de/mailman/listinfo/isabelle-dev</a></p>",
        "id": 476369199,
        "sender_full_name": "Email Gateway",
        "timestamp": 1728646903
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nOn 11/10/2024 13:41, Lawrence Paulson wrote:</p>\n<blockquote>\n<p>I tried it on a set comprehension and got</p>\n<p>notation: mixfix \"set comprehension”</p>\n<p>This is pretty useful, because in the past there was no way to examine non-trivial syntax constructions, which in some cases were a complete mystery.</p>\n<p>If it's not too difficult, could it be possible to jump to the original definition?</p>\n</blockquote>\n<p>That is also possible: I've actually had that before setting out for all this <br>\n\"notation=...\" markup. It is merely a matter of adding 'syntax_consts' <br>\ndeclarations, like I've always done for \"notation=binder\" to imitate regular <br>\n'binder' declarations. You can see that e.g. in prop \"∀x∈A. P x\"</p>\n<p>A minor disadvantage: the present PIDE rendering sometimes hides markup that <br>\nis stacked up too ambitiously, and there is no whitespace between tokens to <br>\nhover over it.</p>\n<p>So I will keep this on the TODO list to think about further ...</p>\n<p>Makarius</p>\n<hr>\n<p>isabelle-dev mailing list<br>\n<a href=\"mailto:isabelle-dev@in.tum.de\">isabelle-dev@in.tum.de</a><br>\n<a href=\"https://mailman46.in.tum.de/mailman/listinfo/isabelle-dev\">https://mailman46.in.tum.de/mailman/listinfo/isabelle-dev</a></p>",
        "id": 476370307,
        "sender_full_name": "Email Gateway",
        "timestamp": 1728647357
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nOn 11/10/2024 10:45, Peter Lammich wrote:</p>\n<blockquote>\n<blockquote>\n<p>On 10/10/2024 22:48, Lawrence Paulson wrote:</p>\n<blockquote>\n<p>Oh, that one. I quite forgot it was there. But it’s occasionally useful <br>\nwhen you aren’t sure about operator precedences. Is it hard to support?</p>\n</blockquote>\n</blockquote>\n<p>If I'm unsure about operator precedence, I usually go the other way round: I <br>\nmanually add some parentheses, and see how/if the pretty-printed term changes</p>\n</blockquote>\n<p>So now is a good oppurtinity to try the new markup scheme of <br>\nIsabelle/87f173836d56.</p>\n<p>It can save a lot of time, because things don't have to be printed to see the <br>\nterm structure.</p>\n<p>Makarius</p>\n<hr>\n<p>isabelle-dev mailing list<br>\n<a href=\"mailto:isabelle-dev@in.tum.de\">isabelle-dev@in.tum.de</a><br>\n<a href=\"https://mailman46.in.tum.de/mailman/listinfo/isabelle-dev\">https://mailman46.in.tum.de/mailman/listinfo/isabelle-dev</a></p>",
        "id": 476370826,
        "sender_full_name": "Email Gateway",
        "timestamp": 1728647548
    }
]