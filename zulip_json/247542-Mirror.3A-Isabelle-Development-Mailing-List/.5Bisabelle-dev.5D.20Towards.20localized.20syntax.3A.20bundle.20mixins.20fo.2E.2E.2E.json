[
    {
        "content": "<p>From: Florian Haftmann &lt;<a href=\"mailto:florian.haftmann@informatik.tu-muenchen.de\">florian.haftmann@informatik.tu-muenchen.de</a>&gt;<br>\nDear all,</p>\n<p>my recent re-working of parts of the local theory infrastructure has<br>\ninspired me to close a long-standing gap in our module system: the<br>\nability to organize syntax declarations into bundles and use them in<br>\nconfined nested blocks</p>\n<p>context<br>\n    includes bundles<br>\n  begin</p>\n<p>…</p>\n<p>end</p>\n<p>so far did not extend to class and locale specifications, which by their<br>\nvery nature are always given at the outermost specification layer.</p>\n<p>Taking the existing »includes« syntax as a base, the result looks as<br>\nfollows:</p>\n<p>locale / class foo = import +<br>\n    includes bundles<br>\n    fixes …<br>\n    assumes …<br>\n  begin</p>\n<p>…</p>\n<p>end</p>\n<p>The declarations from the given bundle(s) are active for the locale /<br>\nclass specification itself and the optional following context block.</p>\n<p>For consistency, also the syntax for re-opening of named contexts is<br>\nextended:</p>\n<p>context foo<br>\n    includes bundles<br>\n  begin</p>\n<p>…</p>\n<p>end</p>\n<p>This is effectively equal to</p>\n<p>context foo<br>\n  begin</p>\n<p>context<br>\n    includes bundles<br>\n  begin</p>\n<p>…</p>\n<p>end</p>\n<p>end</p>\n<p>See src/HOL/ex/Specifications_with_bundle_mixins.thy for examples.</p>\n<p>This refers to rev. 589645894305.</p>\n<p>NEWS entries and documentation updates have still to be written, but I<br>\nwant to discuss possible alternative syntactic notations in a separate<br>\nthread.</p>\n<p>Cheers,<br>\n    Florian<br>\n<a href=\"/user_uploads/14278/Tw9JKVIzwcFUUzX6TXAfyNTZ/signature.asc\">signature.asc</a></p>",
        "id": 215252113,
        "sender_full_name": "Email Gateway",
        "timestamp": 1604249542
    },
    {
        "content": "<p>From: Florian Haftmann &lt;<a href=\"mailto:florian.haftmann@informatik.tu-muenchen.de\">florian.haftmann@informatik.tu-muenchen.de</a>&gt;<br>\nDear all,</p>\n<p>currently the syntax for bundle mixins for locale / class specifications<br>\nlooks as follows:</p>\n<p>locale / class foo = import +<br>\n    includes bundles<br>\n    fixes …<br>\n    assumes …<br>\n  begin</p>\n<p>…</p>\n<p>end</p>\n<p>While this use of »includes« rests firmly on established traditions, it<br>\nis a little bit unsatisfactory since it also applies to the »import«<br>\nexpression, but is notated <em>after</em> it.</p>\n<p>I had thought about something like</p>\n<p>context<br>\n    includes bundles<br>\n  begin</p>\n<p>locale foo = import +<br>\n    fixes …<br>\n    assumes …<br>\n  begin</p>\n<p>…</p>\n<p>end</p>\n<p>end</p>\n<p>instead but this would require an artificial construction identifying<br>\nnested contexts as »morally being global« internally.</p>\n<p>A more inspiring solution could be to abandon the existing »includes«<br>\nsyntax entirely and replace it by a specific toplevel construct, e.g.</p>\n<p>including bundles lemma foo: ‹…› if ‹…› for …</p>\n<p>including bundles context group<br>\n  begin</p>\n<p>…</p>\n<p>end</p>\n<p>including bundles locale bar = …</p>\n<p>This looks charming but the progressive participle is reserved for<br>\nproofs.  For the same reason »with« won't do.</p>\n<p>Cheers,<br>\n    Florian<br>\n<a href=\"/user_uploads/14278/BWIRjA0z7vREMvbAD7TRDAYI/signature.asc\">signature.asc</a></p>",
        "id": 215252797,
        "sender_full_name": "Email Gateway",
        "timestamp": 1604250586
    }
]