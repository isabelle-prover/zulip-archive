[
    {
        "content": "<p>From: Florian Haftmann &lt;<a href=\"mailto:florian.haftmann@informatik.tu-muenchen.de\">florian.haftmann@informatik.tu-muenchen.de</a>&gt;<br>\nHi all,</p>\n<p>in the course of iterating through the accumulated theories on words, I<br>\ncame to the conclusion that it is high time to write up a guide to the<br>\nexisting material.</p>\n<p>Currently, this resides in theory Guide in session Word_Lib; find a<br>\ndocument excerpt here:<br>\n<a href=\"http://isabelle.in.tum.de/~haftmann/bits_and_word/primer.pdf\">http://isabelle.in.tum.de/~haftmann/bits_and_word/primer.pdf</a></p>\n<p>I want to excite feedback:</p>\n<ul>\n<li>\n<p>To my understanding, the base theories (Bit_Operations in HOL-Library<br>\nand Word in HOL-Word) now contain all the substantial ideas brought up<br>\nin informal sessions on HOL-Word, particularly: algebraic<br>\ncharacterization of operations, uniform notation for different types<br>\nusing type classes, proper setup of the Isabelle tools ab initio (),<br>\ngeneric conversions, avoiding unnecessary indirections in definitions<br>\netc.  Of course there is no claim that the corresponding lemmas are<br>\n»complete« in any sense, but such can easily be added incrementally.<br>\nPlease tell me if you thing something substantially is missing wrt.<br>\noperations.</p>\n</li>\n<li>\n<p>The guide is very terse on theories whose relevance I do not<br>\ncomprehend at the moment.  So I am open to feedback or extensions to the<br>\nguide.</p>\n</li>\n<li>\n<p>A question of organization remains that goes to the AFP editors.  The<br>\nfollowing final structure is envisaged:</p>\n<p>a) Isabelle distribution: theories Bit_Operations and Word.</p>\n<p>b) AFP session Word_Lib: further generic word theories.</p>\n<p>c) AFP session Native_Word: a self-contained entry.</p>\n</li>\n</ul>\n<p>Currently, the guide resides in theory Word_Lib.  Nevertheless IMHO it<br>\nshould cover the important library in session Native_Word also.  But to<br>\nmove it to Native_Word seems to be the wrong choice.</p>\n<p>A possible solution would be a dedicated overview session in the AFP.<br>\nBut this would be a precedence case.</p>\n<p>Cheers,<br>\n    Florian<br>\n<a href=\"/user_uploads/14278/7_bWnhv5qppRfLnO0nvfvwI4/signature.asc\">signature.asc</a></p>",
        "id": 212688135,
        "sender_full_name": "Email Gateway",
        "timestamp": 1602163329
    },
    {
        "content": "<p>From: \"Klein, Gerwin (Data61, Kensington NSW)\" &lt;<a href=\"mailto:Gerwin.Klein@data61.csiro.au\">Gerwin.Klein@data61.csiro.au</a>&gt;<br>\nHi Florian,</p>\n<p>Thanks for making a start with this, an overview for the Word libraries is long overdue.</p>\n<p>I’m happy to add a bit of material and design rationale to the document for parts of Word_Lib that seem unclear. Is there a repo I should contribute to?</p>\n<p>There are a few bits I disagree with, though, in particular the desire to replace operations like lsb, msb, etc with existing operations. That would be counter productive. If they can be made abbreviations on the word type, that is fine, and should probably be done, but the names are important. Programmers know what “lsb\" ist, but will have to really think about this being equivalent to “odd”. If you’re writing theorem statements or specifications that other people need to be able to understand, familiarity is important.</p>\n<p>Minor points: the tagging for word types with signedness (or not) is useful in program verification where you sometimes want to track what the compiler understands the type to be, so that you can later pick corresponding transformations based on that understanding. It doesn’t have any relevance to theorems you’d prove manually.</p>\n<p>Misc_Typedef: not sure it deserves the attribute “invasive”. I haven’t checked how it has developed, but it used to be a simple constant definition. I remember Jeremy introducing it to get simpler isomorphism results or something along that line. If it is not necessary any more, it’d be perfectly fine to eliminate.</p>\n<p>Reversed_Bit_Lists: they are rarely used for algebraic properties, but they are useful for more complex append and slicing operations as you sometimes find in hardware specs. In general, I wouldn’t make too many comments on use in the overview. Takes too long to explain and is very dependent on application.</p>\n<p>As for location: I’d be fine with the overview living in Word_Lib. From there it can reference everything in Word_Lib and HOL-Word, and it can provide a few comments on + a pointer to the Native_Word entry, which could contain its own overview.</p>\n<p>Cheers,<br>\nGerwin<br>\n<a href=\"/user_uploads/14278/b59QBRdTM8ii-_LPLTJ_g17P/signature.asc\">signature.asc</a></p>",
        "id": 212762767,
        "sender_full_name": "Email Gateway",
        "timestamp": 1602200398
    },
    {
        "content": "<p>From: Lawrence Paulson &lt;<a href=\"mailto:lp15@cam.ac.uk\">lp15@cam.ac.uk</a>&gt;<br>\nI totally agree with this point.<br>\nLarry</p>\n<hr>\n<p>isabelle-dev mailing list<br>\n<a href=\"mailto:isabelle-dev@in.tum.de\">isabelle-dev@in.tum.de</a><br>\n<a href=\"https://mailman46.in.tum.de/mailman/listinfo/isabelle-dev\">https://mailman46.in.tum.de/mailman/listinfo/isabelle-dev</a></p>",
        "id": 212813434,
        "sender_full_name": "Email Gateway",
        "timestamp": 1602243675
    },
    {
        "content": "<p>From: Florian Haftmann &lt;<a href=\"mailto:florian.haftmann@informatik.tu-muenchen.de\">florian.haftmann@informatik.tu-muenchen.de</a>&gt;<br>\nHi Gerwin,</p>\n<blockquote>\n<p>There are a few bits I disagree with, though, in particular the desire to replace operations like lsb, msb, etc with existing operations. That would be counter productive. If they can be made abbreviations on the word type, that is fine, and should probably be done, but the names are important. Programmers know what “lsb\" ist, but will have to really think about this being equivalent to “odd”. If you’re writing theorem statements or specifications that other people need to be able to understand, familiarity is important.</p>\n</blockquote>\n<p>I am happy to converge into that direction.  The critical question<br>\nremains whether they should be full or only input abbreviations.  In the<br>\nformer cases, it would be better to have them restricted to word,<br>\notherwise you would end up with ‹lsb (2 * k + 1)› for k :: int, which<br>\nwill not do.  If restricted to word, ‹msb› might even remain a dedicated<br>\noperation.</p>\n<blockquote>\n<p>Minor points: the tagging for word types with signedness (or not) is useful in program verification where you sometimes want to track what the compiler understands the type to be, so that you can later pick corresponding transformations based on that understanding. It doesn’t have any relevance to theorems you’d prove manually.</p>\n</blockquote>\n<p>Thanks, that makes the situation clear.</p>\n<blockquote>\n<p>Misc_Typedef: not sure it deserves the attribute “invasive”. I haven’t checked how it has developed, but it used to be a simple constant definition. I remember Jeremy introducing it to get simpler isomorphism results or something along that line. If it is not necessary any more, it’d be perfectly fine to eliminate.</p>\n</blockquote>\n<p>The morphisms in general can be exploited using the transfer method<br>\nnowadays.  This should indeed be the core message about Misc_Typedef.</p>\n<blockquote>\n<p>Reversed_Bit_Lists: they are rarely used for algebraic properties, but they are useful for more complex append and slicing operations as you sometimes find in hardware specs. In general, I wouldn’t make too many comments on use in the overview. Takes too long to explain and is very dependent on application.</p>\n</blockquote>\n<p>Yes, but the reverse order makes it painful to prove anything about it,<br>\n The definitions of append and slicing operations on word use the direct<br>\nformulation without any reversal already.</p>\n<blockquote>\n<p>As for location: I’d be fine with the overview living in Word_Lib. From there it can reference everything in Word_Lib and HOL-Word, and it can provide a few comments on + a pointer to the Native_Word entry, which could contain its own overview.</p>\n</blockquote>\n<p>OK.</p>\n<p>Cheers,<br>\n    Florian</p>\n<blockquote>\n<p><a href=\"/user_uploads/14278/p496ejGB2JgHOScc2ByogQrx/signature.asc\">signature.asc</a></p>\n</blockquote>",
        "id": 212814122,
        "sender_full_name": "Email Gateway",
        "timestamp": 1602244052
    },
    {
        "content": "<p>From: Florian Haftmann &lt;<a href=\"mailto:florian.haftmann@informatik.tu-muenchen.de\">florian.haftmann@informatik.tu-muenchen.de</a>&gt;<br>\nHi all,</p>\n<blockquote>\n<p>I’m happy to add a bit of material and design rationale to the document for parts of Word_Lib that seem unclear. Is there a repo I should contribute to?</p>\n</blockquote>\n<p>I forgot to answer: Guide.thy resides just in the regular AFP<br>\ndevelopment repository, session Word_Lib.</p>\n<blockquote>\n<p>There are a few bits I disagree with, though, in particular the desire to replace operations like lsb, msb, etc with existing operations. That would be counter productive. If they can be made abbreviations on the word type, that is fine, and should probably be done, but the names are important. Programmers know what “lsb\" ist, but will have to really think about this being equivalent to “odd”. If you’re writing theorem statements or specifications that other people need to be able to understand, familiarity is important.</p>\n<p>Minor points: the tagging for word types with signedness (or not) is useful in program verification where you sometimes want to track what the compiler understands the type to be, so that you can later pick corresponding transformations based on that understanding. It doesn’t have any relevance to theorems you’d prove manually.</p>\n<p>Misc_Typedef: not sure it deserves the attribute “invasive”. I haven’t checked how it has developed, but it used to be a simple constant definition. I remember Jeremy introducing it to get simpler isomorphism results or something along that line. If it is not necessary any more, it’d be perfectly fine to eliminate.</p>\n<p>Reversed_Bit_Lists: they are rarely used for algebraic properties, but they are useful for more complex append and slicing operations as you sometimes find in hardware specs. In general, I wouldn’t make too many comments on use in the overview. Takes too long to explain and is very dependent on application.</p>\n</blockquote>\n<p>I updated the guide with recent feedback.</p>\n<p>What seems worth further discussion is the lsb / msb issue.  Since there<br>\nare strong arguments / desires to keep them in the long run, currently<br>\nmy proposal would be:</p>\n<ul>\n<li>\n<p>Restrict lsb and msb to word type.</p>\n</li>\n<li>\n<p>lsb as regular abbreviation for odd.</p>\n</li>\n<li>\n<p>msb as dedicated operation.</p>\n</li>\n</ul>\n<p>Cheers,<br>\n    Florian<br>\n<a href=\"/user_uploads/14278/h-bg70Ijv-Wp9K5AIdedYArT/signature.asc\">signature.asc</a></p>",
        "id": 213662041,
        "sender_full_name": "Email Gateway",
        "timestamp": 1602956161
    },
    {
        "content": "<p>From: \"Klein, Gerwin (Data61, Kensington NSW)\" &lt;<a href=\"mailto:Gerwin.Klein@data61.csiro.au\">Gerwin.Klein@data61.csiro.au</a>&gt;</p>\n<blockquote>\n<p>On 18 Oct 2020, at 03:35, Florian Haftmann &lt;<a href=\"mailto:florian.haftmann@informatik.tu-muenchen.de\">florian.haftmann@informatik.tu-muenchen.de</a>&gt; wrote:</p>\n<blockquote>\n<p>I’m happy to add a bit of material and design rationale to the document for parts of Word_Lib that seem unclear. Is there a repo I should contribute to?</p>\n</blockquote>\n<p>I forgot to answer: Guide.thy resides just in the regular AFP<br>\ndevelopment repository, session Word_Lib.</p>\n</blockquote>\n<p>Thanks, I should have another look at it this week. (Sorry for the slowness, my employer has found it opportune to majorly distract me from proof work these past months)</p>\n<blockquote>\n<blockquote>\n<p>There are a few bits I disagree with, though, in particular the desire to replace operations like lsb, msb, etc with existing operations. That would be counter productive. If they can be made abbreviations on the word type, that is fine, and should probably be done, but the names are important. Programmers know what “lsb\" ist, but will have to really think about this being equivalent to “odd”. If you’re writing theorem statements or specifications that other people need to be able to understand, familiarity is important.</p>\n<p>Minor points: the tagging for word types with signedness (or not) is useful in program verification where you sometimes want to track what the compiler understands the type to be, so that you can later pick corresponding transformations based on that understanding. It doesn’t have any relevance to theorems you’d prove manually.</p>\n<p>Misc_Typedef: not sure it deserves the attribute “invasive”. I haven’t checked how it has developed, but it used to be a simple constant definition. I remember Jeremy introducing it to get simpler isomorphism results or something along that line. If it is not necessary any more, it’d be perfectly fine to eliminate.</p>\n<p>Reversed_Bit_Lists: they are rarely used for algebraic properties, but they are useful for more complex append and slicing operations as you sometimes find in hardware specs. In general, I wouldn’t make too many comments on use in the overview. Takes too long to explain and is very dependent on application.</p>\n</blockquote>\n<p>I updated the guide with recent feedback.</p>\n</blockquote>\n<p>Cool, thanks.</p>\n<blockquote>\n<p>What seems worth further discussion is the lsb / msb issue.  Since there<br>\nare strong arguments / desires to keep them in the long run, currently<br>\nmy proposal would be:</p>\n<ul>\n<li>\n<p>Restrict lsb and msb to word type.</p>\n</li>\n<li>\n<p>lsb as regular abbreviation for odd.</p>\n</li>\n<li>\n<p>msb as dedicated operation.</p>\n</li>\n</ul>\n</blockquote>\n<p>I’d be happy with that, yes.</p>\n<p>Cheers,<br>\nGerwin<br>\n<a href=\"/user_uploads/14278/qahUIyGWrlDBW0ZeZrbKJBF3/signature.asc\">signature.asc</a></p>",
        "id": 213730020,
        "sender_full_name": "Email Gateway",
        "timestamp": 1603061047
    }
]