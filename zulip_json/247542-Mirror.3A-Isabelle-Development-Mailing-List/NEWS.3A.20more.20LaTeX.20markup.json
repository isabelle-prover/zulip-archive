[
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\n<strong>* Document preparation </strong>*</p>\n<ul>\n<li>\n<p>LaTeX output from printed entities (types, terms, thms) now contains<br>\nadditional markup as follows:</p>\n<p>tclass    -- type class \"a\"<br>\n tconst    -- type constructor \"a\"<br>\n tfree     -- free type variable \"'a\"<br>\n tvar      -- schematic type variable \"?'a\"<br>\n const     -- constant \"a\"<br>\n free      -- free variable \"a\"<br>\n bound     -- bound variable \"a\"<br>\n skolem    -- skolem variable \"a\"<br>\n var       -- schematic variable \"?a\"</p>\n</li>\n</ul>\n<p>These markup names are turned into LaTeX macros using the prefix \"\\isa\",<br>\ne.g. \"\\isaconst{...}\" for \"const\". By default, these macros have no<br>\neffect, but may be defined in root.tex like this:</p>\n<p>\\renewcommand{\\isatconst}[1]{{\\color{darkgray}#1}}<br>\n   \\renewcommand{\\isaconst}[1]{\\textsl{\\color{darkgray}#1}}</p>\n<p>This refers to Isabelle/f8b28356ab94.</p>\n<p>It has required many decades to get to that point: I now recallthat in the <br>\nlate 1990ies, we could only get free/bound/var etc. but not the consts. Thanks <br>\nto major cleanup of the inner-syntax framework some months ago, this now <br>\nturned out reasonably easy.</p>\n<p>Makarius</p>",
        "id": 487679486,
        "sender_full_name": "Email Gateway",
        "timestamp": 1733878439
    },
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\nBrilliant, many thanks!</p>\n<p>Is there any way to obtain (in the document} \\isaconst{Nil} via some antiquotation?</p>\n<ul>\n<li>@{const Nil} produces []</li>\n<li>@{const [source] Nil} produces \\isa{Nil}</li>\n</ul>\n<p>Of course this is just an example standing for the many constants that have <br>\nassociated syntax.</p>\n<p>Tobias</p>\n<p>On 10/12/2024 22:13, Makarius wrote:</p>\n<blockquote>\n<p><strong>* Document preparation </strong>*</p>\n<ul>\n<li>LaTeX output from printed entities (types, terms, thms) now contains<br>\nadditional markup as follows:</li>\n</ul>\n<p>tclass    -- type class \"a\"<br>\n   tconst    -- type constructor \"a\"<br>\n   tfree     -- free type variable \"'a\"<br>\n   tvar      -- schematic type variable \"?'a\"<br>\n   const     -- constant \"a\"<br>\n   free      -- free variable \"a\"<br>\n   bound     -- bound variable \"a\"<br>\n   skolem    -- skolem variable \"a\"<br>\n   var       -- schematic variable \"?a\"</p>\n<p>These markup names are turned into LaTeX macros using the prefix \"\\isa\",<br>\ne.g. \"\\isaconst{...}\" for \"const\". By default, these macros have no<br>\neffect, but may be defined in root.tex like this:</p>\n<p>\\renewcommand{\\isatconst}[1]{{\\color{darkgray}#1}}<br>\n   \\renewcommand{\\isaconst}[1]{\\textsl{\\color{darkgray}#1}}</p>\n<p>This refers to Isabelle/f8b28356ab94.</p>\n<p>It has required many decades to get to that point: I now recallthat in the late <br>\n1990ies, we could only get free/bound/var etc. but not the consts. Thanks to <br>\nmajor cleanup of the inner-syntax framework some months ago, this now turned out <br>\nreasonably easy.</p>\n<p>Makarius</p>\n</blockquote>\n<p><a href=\"/user_uploads/14278/s6rZYOvZu2S3BaZHIPVMw_NZ/smime.p7s\">smime.p7s</a></p>",
        "id": 488137887,
        "sender_full_name": "Email Gateway",
        "timestamp": 1733934348
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nOn 11/12/2024 17:25, Tobias Nipkow wrote:</p>\n<blockquote>\n<p>Is there any way to obtain (in the document} \\isaconst{Nil} via some <br>\nantiquotation?<br>\n- @{const Nil} produces []<br>\n- @{const [source] Nil} produces \\isa{Nil}</p>\n<p>Of course this is just an example standing for the many constants that have <br>\nassociated syntax.</p>\n</blockquote>\n<p>@{const [source] NAME} presents the original input source, not pretty-printed <br>\noutput. It would require substantial reworking of the document preparation <br>\nsystem to use PIDE markup there: one happy day that will happen, but not now <br>\nand not for the coming release.</p>\n<p>If this is actually about printing formal entity names like the term <br>\npretty-printer does (without syntax), you can define a document antiquotation <br>\n@{const_name NAME} like this:</p>\n<p>setup ‹<br>\n   Document_Output.antiquotation_pretty_embedded \\&lt;^binding&gt;‹const_name›<br>\n     (Args.const {proper = true, strict = false})<br>\n     (fn ctxt =&gt; fn c =&gt; Pretty.mark_str (Markup.const, <br>\nProof_Context.extern_const ctxt c))<br>\n›</p>\n<p>Makarius</p>",
        "id": 488847339,
        "sender_full_name": "Email Gateway",
        "timestamp": 1734098645
    },
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\nThat was exactly what I needed, many thanks!</p>\n<p>Tobias</p>\n<p>On 13/12/2024 13:46, Makarius wrote:</p>\n<blockquote>\n<p>On 11/12/2024 17:25, Tobias Nipkow wrote:</p>\n<blockquote>\n<p>Is there any way to obtain (in the document} \\isaconst{Nil} via some <br>\nantiquotation?<br>\n- @{const Nil} produces []<br>\n- @{const [source] Nil} produces \\isa{Nil}</p>\n<p>Of course this is just an example standing for the many constants that have <br>\nassociated syntax.</p>\n</blockquote>\n<p>@{const [source] NAME} presents the original input source, not pretty-printed <br>\noutput. It would require substantial reworking of the document preparation <br>\nsystem to use PIDE markup there: one happy day that will happen, but not now and <br>\nnot for the coming release.</p>\n<p>If this is actually about printing formal entity names like the term pretty- <br>\nprinter does (without syntax), you can define a document antiquotation <br>\n@{const_name NAME} like this:</p>\n<p>setup ‹<br>\n   Document_Output.antiquotation_pretty_embedded \\&lt;^binding&gt;‹const_name›<br>\n     (Args.const {proper = true, strict = false})<br>\n     (fn ctxt =&gt; fn c =&gt; Pretty.mark_str (Markup.const, <br>\nProof_Context.extern_const ctxt c))<br>\n›</p>\n<p>Makarius<br>\n</p>\n</blockquote>\n<p><a href=\"/user_uploads/14278/UeRbLiq1X2nkes75EdKMNJmG/smime.p7s\">smime.p7s</a></p>",
        "id": 489229754,
        "sender_full_name": "Email Gateway",
        "timestamp": 1734353965
    },
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\nHi Makarius,</p>\n<p>I am using these new macros to modify the font for constants. This works very <br>\nwell except for one issue: in latex blocks with line breaks, the \\isaindent code <br>\ndoes not utilize these macros but includes the bare names only. As a result, the <br>\nindentation is a bit off. Here is an example of the generated latex code</p>\n<p>\\isaindent{{\\isacharequal}{\\kern0pt}\\ <br>\n{\\isacharparenleft}{\\kern0pt}}\\isaconst{LT}\\ {\\isasymRightarrow}\\ <br>\n\\isakeyword{let}\\ \\isabound{l{\\isacharprime}{\\kern0pt}}\\ <br>\n{\\isacharequal}{\\kern0pt}\\ \\isaconst{del}\\ \\isavar{x}\\ \\isavar{l}\\isanewline<br>\n\\isaindent{{\\isacharequal}{\\kern0pt}\\ {\\isacharparenleft}{\\kern0pt}LT\\ <br>\n{\\isasymRightarrow}\\ }</p>\n<p>\\isaconst{LT} vs plain LT inside an \\isaindent a few lines below.</p>\n<p>Tobias</p>\n<p>On 10/12/2024 22:13, Makarius wrote:</p>\n<blockquote>\n<p><strong>* Document preparation </strong>*</p>\n<ul>\n<li>LaTeX output from printed entities (types, terms, thms) now contains<br>\nadditional markup as follows:</li>\n</ul>\n<p>tclass    -- type class \"a\"<br>\n   tconst    -- type constructor \"a\"<br>\n   tfree     -- free type variable \"'a\"<br>\n   tvar      -- schematic type variable \"?'a\"<br>\n   const     -- constant \"a\"<br>\n   free      -- free variable \"a\"<br>\n   bound     -- bound variable \"a\"<br>\n   skolem    -- skolem variable \"a\"<br>\n   var       -- schematic variable \"?a\"</p>\n<p>These markup names are turned into LaTeX macros using the prefix \"\\isa\",<br>\ne.g. \"\\isaconst{...}\" for \"const\". By default, these macros have no<br>\neffect, but may be defined in root.tex like this:</p>\n<p>\\renewcommand{\\isatconst}[1]{{\\color{darkgray}#1}}<br>\n   \\renewcommand{\\isaconst}[1]{\\textsl{\\color{darkgray}#1}}</p>\n<p>This refers to Isabelle/f8b28356ab94.</p>\n<p>It has required many decades to get to that point: I now recallthat in the late <br>\n1990ies, we could only get free/bound/var etc. but not the consts. Thanks to <br>\nmajor cleanup of the inner-syntax framework some months ago, this now turned out <br>\nreasonably easy.</p>\n<p>Makarius</p>\n</blockquote>\n<p><a href=\"/user_uploads/14278/U7aXds2r6-n2VI_yYt1kQ7Qr/smime.p7s\">smime.p7s</a></p>",
        "id": 490475352,
        "sender_full_name": "Email Gateway",
        "timestamp": 1734942680
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nOn 23/12/2024 09:31, Tobias Nipkow wrote:</p>\n<blockquote>\n<p>I am using these new macros to modify the font for constants. This works very <br>\nwell except for one issue: in latex blocks with line breaks, the \\isaindent <br>\ncode does not utilize these macros but includes the bare names only.</p>\n</blockquote>\n<p>This should work better in recent Isabelle/9253dadbd4ac: I had to make <br>\nsignificant changes to pretty-printing with markup for that. A few more <br>\nchanges might be coming a bit later ...</p>\n<p>Makarius</p>",
        "id": 491798692,
        "sender_full_name": "Email Gateway",
        "timestamp": 1735931027
    },
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\nThanks Makarius, it works perfectly.</p>\n<p>Tobias</p>\n<p>On 03/01/2025 20:03, Makarius wrote:</p>\n<blockquote>\n<p>On 23/12/2024 09:31, Tobias Nipkow wrote:</p>\n<blockquote>\n<p>I am using these new macros to modify the font for constants. This works very <br>\nwell except for one issue: in latex blocks with line breaks, the \\isaindent <br>\ncode does not utilize these macros but includes the bare names only.</p>\n</blockquote>\n<p>This should work better in recent Isabelle/9253dadbd4ac: I had to make <br>\nsignificant changes to pretty-printing with markup for that. A few more changes <br>\nmight be coming a bit later ...</p>\n<p>Makarius<br>\n</p>\n</blockquote>\n<p><a href=\"/user_uploads/14278/EQe576WcWd68aAO7Q_QBG8NF/smime.p7s\">smime.p7s</a></p>",
        "id": 491942273,
        "sender_full_name": "Email Gateway",
        "timestamp": 1736059521
    },
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\nMakarius,</p>\n<p>Just one more thing: the field names in record updates are not enclosed in any <br>\nmacro, eg the field \"front\":</p>\n<p>\\isa{\\isafree{q}{\\isasymlparr}front\\ <br>\n{\\isacharcolon}{\\kern0pt}{\\isacharequal}{\\kern0pt}\\ <br>\n{\\isacharbrackleft}{\\kern0pt}{\\isacharbrackright}{\\kern0pt}{\\isasymrparr}}.</p>\n<p>Can you wrap them in \\isaconst (because the field selector is a function)?</p>\n<p>Thanks<br>\nTobias</p>\n<p>On 03/01/2025 20:03, Makarius wrote:</p>\n<blockquote>\n<p>On 23/12/2024 09:31, Tobias Nipkow wrote:</p>\n<blockquote>\n<p>I am using these new macros to modify the font for constants. This works very <br>\nwell except for one issue: in latex blocks with line breaks, the \\isaindent <br>\ncode does not utilize these macros but includes the bare names only.</p>\n</blockquote>\n<p>This should work better in recent Isabelle/9253dadbd4ac: I had to make <br>\nsignificant changes to pretty-printing with markup for that. A few more changes <br>\nmight be coming a bit later ...</p>\n<p>Makarius<br>\n</p>\n</blockquote>\n<p><a href=\"/user_uploads/14278/q8LOTurfL0Mi7F3XY6tTak8O/smime.p7s\">smime.p7s</a></p>",
        "id": 492256970,
        "sender_full_name": "Email Gateway",
        "timestamp": 1736235646
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nOn 07/01/2025 08:40, Tobias Nipkow wrote:</p>\n<blockquote>\n<p>Just one more thing: the field names in record updates are not enclosed in any <br>\nmacro, eg the field \"front\":</p>\n</blockquote>\n<blockquote>\n<p>Can you wrap them in \\isaconst (because the field selector is a function)?</p>\n</blockquote>\n<p>This turned out quite easy, using mixfix markup for the specific record <br>\nsyntax: <a href=\"https://isabelle-dev.sketis.net/rISABELLE4b739ed65946\">https://isabelle-dev.sketis.net/rISABELLE4b739ed65946</a></p>\n<p>I have also had a look at theory src/HOL/Library/Datatype_Records.thy but its <br>\noutput syntax appears to be somewhat unfinished anyway.</p>\n<p>Makarius</p>",
        "id": 492395813,
        "sender_full_name": "Email Gateway",
        "timestamp": 1736287496
    },
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\nSweet, thanks!</p>\n<p>Tobias</p>\n<p>On 07/01/2025 23:04, Makarius wrote:</p>\n<blockquote>\n<p>On 07/01/2025 08:40, Tobias Nipkow wrote:</p>\n<blockquote>\n<p>Just one more thing: the field names in record updates are not enclosed in any <br>\nmacro, eg the field \"front\":</p>\n</blockquote>\n<blockquote>\n<p>Can you wrap them in \\isaconst (because the field selector is a function)?</p>\n</blockquote>\n<p>This turned out quite easy, using mixfix markup for the specific record syntax: <br>\n<a href=\"https://isabelle-dev.sketis.net/rISABELLE4b739ed65946\">https://isabelle-dev.sketis.net/rISABELLE4b739ed65946</a></p>\n<p>I have also had a look at theory src/HOL/Library/Datatype_Records.thy but its <br>\noutput syntax appears to be somewhat unfinished anyway.</p>\n<p>Makarius<br>\n</p>\n</blockquote>\n<p><a href=\"/user_uploads/14278/xIDssCqNjD6FZrQzzxLbcVpZ/smime.p7s\">smime.p7s</a></p>",
        "id": 492471524,
        "sender_full_name": "Email Gateway",
        "timestamp": 1736330783
    }
]