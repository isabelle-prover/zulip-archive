[
    {
        "content": "<p>From: Florian Haftmann &lt;<a href=\"mailto:florian.haftmann@cit.tum.de\">florian.haftmann@cit.tum.de</a>&gt;<br>\nIn AFP entries Separation_Logic_Imperative_HOL, CAVA_Automata, <br>\nCollections and Ordinary_Differential_Equations, there were some <br>\n(indirect) imports of Code_* theories from HOL-Library where actually no <br>\ncode generation was involved.</p>\n<p>I have removed these in <br>\n<a href=\"https://foss.heptapod.net/isa-afp/afp-devel/-/commit/ccc0b81823579c3d522a916b165bcc0bdf0d1ffb\">https://foss.heptapod.net/isa-afp/afp-devel/-/commit/ccc0b81823579c3d522a916b165bcc0bdf0d1ffb</a> <br>\nwith no directly observable effect, but since these imports have been in <br>\nplace for quite a long time there might be applications where it is <br>\nappropriate to explicitly import HOL-Library.Code_Target_Numeral and <br>\nsimilar.</p>\n<p>Florian</p>\n<p><a href=\"/user_uploads/14278/zIaQ_q1KM3elK_LVOSw8MCMd/OpenPGP_0xA707172232CFA4E9.asc\">OpenPGP_0xA707172232CFA4E9.asc</a><br>\n<a href=\"/user_uploads/14278/G2dL3NKuE7djbLjQ0ee3DXEC/OpenPGP_signature.asc\">OpenPGP_signature.asc</a></p>",
        "id": 513669951,
        "sender_full_name": "Email Gateway",
        "timestamp": 1745344178
    },
    {
        "content": "<p>From: Peter Lammich &lt;<a href=\"mailto:lammich@in.tum.de\">lammich@in.tum.de</a>&gt;<br>\nHi Florian</p>\n<p>This sounds like a very fragile (and dangerous) change. It will affect <br>\nall code-exports in theories that depend on the changed theories.</p>\n<p>The observable effects may only be in the performance (and bindings to <br>\nexternal code), which you won't see in the standard AFP tests.</p>\n<p>I do not understand why you got rid of the Code_Target_ICF theory (and <br>\nyou could, along the same lines, get rid of CAVA_Code_Target). These <br>\ntheories where meant to provide a default sensible setup for the code <br>\ngenerator, by combining several Code_Target theories. You have now <br>\nremoved that abstraction, and inlined it where it was used</p>\n<p>--</p>\n<p>Peter</p>\n<p>On 22/04/2025 19:40, Florian Haftmann wrote:</p>\n<blockquote>\n<p>In AFP entries Separation_Logic_Imperative_HOL, CAVA_Automata, <br>\nCollections and Ordinary_Differential_Equations, there were some <br>\n(indirect) imports of Code_* theories from HOL-Library where actually <br>\nno code generation was involved.</p>\n<p>I have removed these in <br>\n<a href=\"https://foss.heptapod.net/isa-afp/afp-devel/-/commit/ccc0b81823579c3d522a916b165bcc0bdf0d1ffb\">https://foss.heptapod.net/isa-afp/afp-devel/-/commit/ccc0b81823579c3d522a916b165bcc0bdf0d1ffb</a> <br>\nwith no directly observable effect, but since these imports have been <br>\nin place for quite a long time there might be applications where it is <br>\nappropriate to explicitly import HOL-Library.Code_Target_Numeral and <br>\nsimilar.</p>\n<p>Florian</p>\n</blockquote>",
        "id": 513683216,
        "sender_full_name": "Email Gateway",
        "timestamp": 1745348299
    },
    {
        "content": "<p>From: Florian Haftmann &lt;<a href=\"mailto:florian.haftmann@cit.tum.de\">florian.haftmann@cit.tum.de</a>&gt;<br>\nHi Peter,</p>\n<blockquote>\n<p>These<br>\ntheories where meant to provide a default sensible setup for the code<br>\ngenerator, by combining several Code_Target theories. You have now<br>\nremoved that abstraction, and inlined it where it was used.</p>\n</blockquote>\n<p>The combination of several theories over time has boiled down to <br>\nHOL-Library.Code_Target_Numeral as the only one. This is an official <br>\nhook which users can import if they want that particular setup. This is <br>\na deliberate decision not supposed to be obscured by transitive imports.</p>\n<p>Why? Changing the code setup if non-monotonous. Technically, you get a <br>\ndefault setup if you do nothing special, and you may change that default <br>\nsetup by importing particular theories. But then there is no supported <br>\nway back again.</p>\n<p>Admittedly I have recently blurred that simple picture by introducing <br>\nHOL-Library.Code_Bit_Shifts_for_Arithmetic, but this is likely to be <br>\ntransient situation: if this theory proves what it promises it could be <br>\nincorporated into HOL-Library.Code_Target_Numeral.</p>\n<blockquote>\n<p>I do not understand why you got rid of the Code_Target_ICF theory (and<br>\nyou could, along the same lines, get rid of CAVA_Code_Target)</p>\n</blockquote>\n<p>CAVA_Code_Target is still there.</p>\n<blockquote>\n<p>This sounds like a very fragile (and dangerous) change. It will affect <br>\nall code-exports in theories that depend on the changed theories.</p>\n</blockquote>\n<p>Indeed. One of my aims is to get rid of transitive, unintentional <br>\nimports of HOL-Library.Code_Target_Numeral. I had a look at the <br>\nimmediate neighborhood of the affected places and tried best to identify <br>\nspots where the import of HOL-Library.Code_Target_Numeral is intentional <br>\n/ appropriate, but the situation got very intricate over the years and <br>\nthere might be subtle dependency paths.</p>\n<blockquote>\n<p>The observable effects may only be in the performance (and bindings to <br>\nexternal code), which you won't see in the standard AFP tests.</p>\n</blockquote>\n<p>There is an important observable effect of AFP test performance: the <br>\nduration of the long sessions as well as the ability to test the whole <br>\nAFP within reasonable time and resource limits.</p>\n<p>Of course there is a chance applications may degrade in performance <br>\nunnoticed, but for actively maintained applications there are still a <br>\nfew months before the next release where things can be ironed out.</p>\n<p>There have been so many re-arrangements of that material in recent times <br>\nthat the change in question only adds modestly to that general risk.</p>\n<p>Cheers,<br>\n    Florian</p>\n<blockquote>\n<p>On 22/04/2025 19:40, Florian Haftmann wrote:</p>\n<blockquote>\n<p>In AFP entries Separation_Logic_Imperative_HOL, CAVA_Automata, <br>\nCollections and Ordinary_Differential_Equations, there were some <br>\n(indirect) imports of Code_* theories from HOL-Library where actually <br>\nno code generation was involved.</p>\n<p>I have removed these in <a href=\"https://foss.heptapod.net/isa-afp/afp-devel/-/\">https://foss.heptapod.net/isa-afp/afp-devel/-/</a> <br>\ncommit/ccc0b81823579c3d522a916b165bcc0bdf0d1ffb with no directly <br>\nobservable effect, but since these imports have been in place for <br>\nquite a long time there might be applications where it is appropriate <br>\nto explicitly import HOL-Library.Code_Target_Numeral and similar.</p>\n<p>Florian</p>\n</blockquote>\n</blockquote>\n<p><a href=\"/user_uploads/14278/EuF4zyLzJCKanyI9InnUIpOa/OpenPGP_0xA707172232CFA4E9.asc\">OpenPGP_0xA707172232CFA4E9.asc</a><br>\n<a href=\"/user_uploads/14278/Z8avWjrcwgnKDx73SQK6p0BQ/OpenPGP_signature.asc\">OpenPGP_signature.asc</a></p>",
        "id": 513926043,
        "sender_full_name": "Email Gateway",
        "timestamp": 1745428791
    },
    {
        "content": "<p>From: Peter Lammich &lt;<a href=\"mailto:lammich@in.tum.de\">lammich@in.tum.de</a>&gt;<br>\nOk, if the goal is to only have one efficient code target theory, then I can<br>\nsee where these changes are going </p>\n<p>Peter </p>\n<p>On 23 Apr 2025 19:11, Florian Haftmann &lt;<a href=\"mailto:florian.haftmann@cit.tum.de\">florian.haftmann@cit.tum.de</a>&gt; wrote:  </p>\n<blockquote>\n<p>Hi Peter,  </p>\n<blockquote>\n<p>These  <br>\ntheories where meant to provide a default sensible setup for the code  <br>\ngenerator, by combining several Code_Target theories. You have now  <br>\nremoved that abstraction, and inlined it where it was used.  </p>\n</blockquote>\n<p>The combination of several theories over time has boiled down to  <br>\n HOL-Library.Code_Target_Numeral as the only one. This is an official  <br>\n hook which users can import if they want that particular setup. This is  <br>\n a deliberate decision not supposed to be obscured by transitive imports.  </p>\n<p>Why? Changing the code setup if non-monotonous. Technically, you get a  <br>\n default setup if you do nothing special, and you may change that default  <br>\n setup by importing particular theories. But then there is no supported  <br>\n way back again.  </p>\n<p>Admittedly I have recently blurred that simple picture by introducing  <br>\n HOL-Library.Code_Bit_Shifts_for_Arithmetic, but this is likely to be  <br>\n transient situation: if this theory proves what it promises it could be  <br>\n incorporated into HOL-Library.Code_Target_Numeral.  </p>\n<blockquote>\n<p>I do not understand why you got rid of the Code_Target_ICF theory (and  <br>\nyou could, along the same lines, get rid of CAVA_Code_Target)  </p>\n</blockquote>\n<p>CAVA_Code_Target is still there.  </p>\n<blockquote>\n<p>This sounds like a very fragile (and dangerous) change. It will affect  <br>\nall code-exports in theories that depend on the changed theories.  </p>\n</blockquote>\n<p>Indeed. One of my aims is to get rid of transitive, unintentional  <br>\n imports of HOL-Library.Code_Target_Numeral. I had a look at the  <br>\n immediate neighborhood of the affected places and tried best to identify  <br>\n spots where the import of HOL-Library.Code_Target_Numeral is intentional  <br>\n / appropriate, but the situation got very intricate over the years and  <br>\n there might be subtle dependency paths.  </p>\n<blockquote>\n<p>The observable effects may only be in the performance (and bindings to  <br>\nexternal code), which you won't see in the standard AFP tests.  </p>\n</blockquote>\n<p>There is an important observable effect of AFP test performance: the  <br>\n duration of the long sessions as well as the ability to test the whole  <br>\n AFP within reasonable time and resource limits.  </p>\n<p>Of course there is a chance applications may degrade in performance  <br>\n unnoticed, but for actively maintained applications there are still a  <br>\n few months before the next release where things can be ironed out.  </p>\n<p>There have been so many re-arrangements of that material in recent times  <br>\n that the change in question only adds modestly to that general risk.  </p>\n<p>Cheers,  <br>\n Florian  </p>\n<blockquote>\n<p>On 22/04/2025 19:40, Florian Haftmann wrote:  </p>\n<blockquote>\n<p>In AFP entries Separation_Logic_Imperative_HOL, CAVA_Automata,  <br>\nCollections and Ordinary_Differential_Equations, there were some  <br>\n(indirect) imports of Code_* theories from HOL-Library where actually  <br>\nno code generation was involved.  </p>\n<p>I have removed these in <a href=\"https://foss.heptapod.net/isa-afp/afp-devel/-/\">https://foss.heptapod.net/isa-afp/afp-devel/-/</a>  <br>\ncommit/ccc0b81823579c3d522a916b165bcc0bdf0d1ffb with no directly  <br>\nobservable effect, but since these imports have been in place for  <br>\nquite a long time there might be applications where it is appropriate  <br>\nto explicitly import HOL-Library.Code_Target_Numeral and similar.  </p>\n<p>Florian  </p>\n</blockquote>\n</blockquote>\n</blockquote>",
        "id": 513941357,
        "sender_full_name": "Email Gateway",
        "timestamp": 1745433632
    }
]