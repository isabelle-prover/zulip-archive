[
    {
        "content": "<p>Hey IRC people  (#isabelle on freenode)  and Zulip community (<a href=\"https://isabelle.zulipchat.com\">https://isabelle.zulipchat.com</a>)! :)<br>\nI tinkered with matterbridge (<a href=\"https://github.com/42wim/matterbridge\">https://github.com/42wim/matterbridge</a>) and it seems like we could now communicate with each other.<br>\nDo you like this idea? Do you have any concerns? Let me know! I would love to see the Isabelle community to get closer together :)</p>",
        "id": 230731351,
        "sender_full_name": "Kevin Kappelmann",
        "timestamp": 1616001559
    },
    {
        "content": "<p>@<strong>pruvisto[m]</strong>: The main concern is that we have to maybe rein in the trash talk a bit now. :P</p>",
        "id": 230731501,
        "sender_full_name": "IRC Bot",
        "timestamp": 1616001605
    },
    {
        "content": "<p>@<strong>pruvisto[m]</strong>: In any case, the channel hasn't been terribly active lately, so who knows when you'll get a reply to those question. :)</p>",
        "id": 230731533,
        "sender_full_name": "IRC Bot",
        "timestamp": 1616001621
    },
    {
        "content": "<p>haha, maybe I should put the IRC channel on Zulip on a different stream than \"General\" so people can choose whether they are interested in the IRC chat? :)</p>",
        "id": 230731838,
        "sender_full_name": "Kevin Kappelmann",
        "timestamp": 1616001718
    },
    {
        "content": "<p>@<strong>int-e</strong>: Uh, no more talk about bugs?</p>",
        "id": 230734006,
        "sender_full_name": "IRC Bot",
        "timestamp": 1616002532
    },
    {
        "content": "<p>@<strong>int-e</strong>: Bugs in Isabelle, I mean. <em>ducks</em></p>",
        "id": 230734147,
        "sender_full_name": "IRC Bot",
        "timestamp": 1616002564
    },
    {
        "content": "<p>@<strong>pruvisto[m]</strong>: I think that's okay. As of yet, Makarius still boycotts Zulip, I think?</p>",
        "id": 230734465,
        "sender_full_name": "IRC Bot",
        "timestamp": 1616002676
    },
    {
        "content": "<p>@<strong>int-e</strong>: it's hard to tell who's lurking behind the isabelle_zulip nick</p>",
        "id": 230734684,
        "sender_full_name": "IRC Bot",
        "timestamp": 1616002754
    },
    {
        "content": "<p>@<strong>pruvisto[m]</strong>: Yeah also Zulip is archived semi-publicly.</p>",
        "id": 230734869,
        "sender_full_name": "IRC Bot",
        "timestamp": 1616002810
    },
    {
        "content": "<p>That's indeed true!<br>\nSo I think the IRC community should decide if that's a big no-no.</p>\n<p>the isabelle_zulip user is just a bot run by me</p>",
        "id": 230735154,
        "sender_full_name": "Kevin Kappelmann",
        "timestamp": 1616002903
    },
    {
        "content": "<p>@<strong>pruvisto[m]</strong>: I don't even know who made this channel in the first place.</p>",
        "id": 230735325,
        "sender_full_name": "IRC Bot",
        "timestamp": 1616002956
    },
    {
        "content": "<p>@<strong>int-e</strong>: so hmm logging... that should be noted in the topic then (out of politeness and per Freenode policy... <a href=\"https://freenode.net/policies#public-logging\">https://freenode.net/policies#public-logging</a> \"Ensure that you notify users (by way of channel topic, channel entry message or similar) that the channel is being publicly logged\")</p>",
        "id": 230735485,
        "sender_full_name": "IRC Bot",
        "timestamp": 1616003016
    },
    {
        "content": "<p>@<strong>pruvisto[m]</strong>: But it is fairly common for IRC to be logged, and for parts of these logs surfacing on the web somewhere. So it's not like this channel was \"off the record\" before, strictly speaking.</p>",
        "id": 230735499,
        "sender_full_name": "IRC Bot",
        "timestamp": 1616003019
    },
    {
        "content": "<p>@<strong>int-e</strong>: (even if it requires registration it still is public to my mind)</p>",
        "id": 230735675,
        "sender_full_name": "IRC Bot",
        "timestamp": 1616003076
    },
    {
        "content": "<p>@<strong>int-e</strong>: Oh I'm an op here? I forgot...</p>",
        "id": 230735882,
        "sender_full_name": "IRC Bot",
        "timestamp": 1616003155
    },
    {
        "content": "<p>@<strong>pruvisto[m]</strong>: Yes, absolutely.</p>",
        "id": 230736134,
        "sender_full_name": "IRC Bot",
        "timestamp": 1616003245
    },
    {
        "content": "<p>@<strong>int-e</strong>: isabelle_zulip [Kevin]: Can isabelle_zulip tell us which users are online on the Zulip side? A command for private chat would be perfect, I think. But I have no clue how the thing works, obviously.</p>",
        "id": 230736774,
        "sender_full_name": "IRC Bot",
        "timestamp": 1616003463
    },
    {
        "content": "<p>@<strong>int-e</strong>: Uh. I mean, a command an IRC user could send to isabelle_zulip privately to get the current list of users on the IRC... topic?... on the Zulip server.</p>",
        "id": 230737149,
        "sender_full_name": "IRC Bot",
        "timestamp": 1616003604
    },
    {
        "content": "<p>@<strong>pruvisto[m]</strong>: You mean the people who are currently actively online there or the ones that are subscribed to the IRC stream?</p>",
        "id": 230737231,
        "sender_full_name": "IRC Bot",
        "timestamp": 1616003637
    },
    {
        "content": "<p>@<strong>int-e</strong>: In any case, personally I think we can try this out and see where it goes.</p>",
        "id": 230737284,
        "sender_full_name": "IRC Bot",
        "timestamp": 1616003643
    },
    {
        "content": "<p>@<strong>pruvisto[m]</strong>: (i.e. who see what is going on there?)</p>",
        "id": 230737299,
        "sender_full_name": "IRC Bot",
        "timestamp": 1616003648
    },
    {
        "content": "<p>@<strong>int-e</strong>: the latter I think</p>",
        "id": 230737329,
        "sender_full_name": "IRC Bot",
        "timestamp": 1616003658
    },
    {
        "content": "<p>@<strong>pruvisto[m]</strong>: but of course, if you subscribe to the stream at a later point, you are still able to see everything that was said before</p>",
        "id": 230737362,
        "sender_full_name": "IRC Bot",
        "timestamp": 1616003672
    },
    {
        "content": "<p>@<strong>int-e</strong>: people we might actually talk to if we catch there interest in the moment</p>",
        "id": 230737365,
        "sender_full_name": "IRC Bot",
        "timestamp": 1616003673
    },
    {
        "content": "<p>@<strong>int-e</strong>: *their</p>",
        "id": 230737385,
        "sender_full_name": "IRC Bot",
        "timestamp": 1616003683
    },
    {
        "content": "<p>@<strong>pruvisto[m]</strong>: in any case, Zulip is probably a better venue for any concrete questions</p>",
        "id": 230737395,
        "sender_full_name": "IRC Bot",
        "timestamp": 1616003686
    },
    {
        "content": "<p>@<strong>pruvisto[m]</strong>: because it is threaded and more searchable</p>",
        "id": 230737418,
        "sender_full_name": "IRC Bot",
        "timestamp": 1616003693
    },
    {
        "content": "<p>@<strong>pruvisto[m]</strong>: so if people have concrete questions, it would be better to ask on there</p>",
        "id": 230737434,
        "sender_full_name": "IRC Bot",
        "timestamp": 1616003700
    },
    {
        "content": "<p>@<strong>int-e</strong>: browser windows take up too much space</p>",
        "id": 230737476,
        "sender_full_name": "IRC Bot",
        "timestamp": 1616003715
    },
    {
        "content": "<p>@<strong>int-e</strong>: :P</p>",
        "id": 230737515,
        "sender_full_name": "IRC Bot",
        "timestamp": 1616003730
    },
    {
        "content": "<p>@<strong>pruvisto[m]</strong>: I usually have it as a pinned tab in Firefox</p>",
        "id": 230737555,
        "sender_full_name": "IRC Bot",
        "timestamp": 1616003739
    },
    {
        "content": "<p>@<strong>pruvisto[m]</strong>: (with Tree Style Tabs)</p>",
        "id": 230737659,
        "sender_full_name": "IRC Bot",
        "timestamp": 1616003763
    },
    {
        "content": "<p>@<strong>int-e</strong>: For IRC, I can have a terminal in a corner of the screen (with irssi) and see whether there's activity. The browser lives on a different virtual screen :P</p>",
        "id": 230737862,
        "sender_full_name": "IRC Bot",
        "timestamp": 1616003801
    },
    {
        "content": "<p>Seems like you cannot query for online users as of now. There was an issue about this <a href=\"https://github.com/42wim/matterbridge/issues/361\">https://github.com/42wim/matterbridge/issues/361</a> but it got closed in favour of another issue, which is still open</p>",
        "id": 230737875,
        "sender_full_name": "Kevin Kappelmann",
        "timestamp": 1616003803
    },
    {
        "content": "<p>@<strong>pruvisto[m]</strong>: Private messages are probably difficult because there is only one user on the Zulip side (Kevin's bot).</p>",
        "id": 230737944,
        "sender_full_name": "IRC Bot",
        "timestamp": 1616003819
    },
    {
        "content": "<p>@<strong>pruvisto[m]</strong>: The bot could easily forward private messages from IRC users to Zulip users, but the other direction, well, you would have to specify which IRC user it is supposed to go to on the Zulip side</p>",
        "id": 230738061,
        "sender_full_name": "IRC Bot",
        "timestamp": 1616003864
    },
    {
        "content": "<p>@<strong>pruvisto[m]</strong>: So it would probably be a bit awkward to use.</p>",
        "id": 230738082,
        "sender_full_name": "IRC Bot",
        "timestamp": 1616003869
    },
    {
        "content": "<p>@<strong>pruvisto[m]</strong>: actually even from the IRC side it would be awkward</p>",
        "id": 230738228,
        "sender_full_name": "IRC Bot",
        "timestamp": 1616003908
    },
    {
        "content": "<p>@<strong>pruvisto[m]</strong>: the same problem, you'd have to tell the bot which user the message is supposed to go to</p>",
        "id": 230738269,
        "sender_full_name": "IRC Bot",
        "timestamp": 1616003921
    },
    {
        "content": "<p>@<strong>pruvisto[m]</strong>: This is probably difficult to do with the current bridge.</p>",
        "id": 230738308,
        "sender_full_name": "IRC Bot",
        "timestamp": 1616003935
    },
    {
        "content": "<p>@<strong>int-e</strong>: pruvisto[m]: Yeah I realized that \"private chat\" was ambiguous... messaging Zulip users privately is different from what I asked.</p>",
        "id": 230738313,
        "sender_full_name": "IRC Bot",
        "timestamp": 1616003938
    },
    {
        "content": "<p>Here's the relevant thread about direct messaging containing some thoughts <a href=\"https://github.com/42wim/matterbridge/issues/191\">https://github.com/42wim/matterbridge/issues/191</a></p>",
        "id": 230738381,
        "sender_full_name": "Kevin Kappelmann",
        "timestamp": 1616003967
    },
    {
        "content": "<p>@<strong>pruvisto[m]</strong>: Then what did you mean?</p>",
        "id": 230738442,
        "sender_full_name": "IRC Bot",
        "timestamp": 1616003989
    },
    {
        "content": "<p>@<strong>int-e</strong>: I really wanted #361 only (see who's listening on the other side), not all the other things that are included in #191 (communicating directly with users across the bridge).</p>",
        "id": 230738754,
        "sender_full_name": "IRC Bot",
        "timestamp": 1616004081
    },
    {
        "content": "<p>@<strong>int-e</strong>: Anyway it's not a huge deal... as far as I can see right now.</p>",
        "id": 230738884,
        "sender_full_name": "IRC Bot",
        "timestamp": 1616004129
    },
    {
        "content": "<p>@<strong>int-e</strong>: As to this channel, it was founded by Ian Lynagh (possibly with some other Haskell folks?)... I assume back when he was working on formalizing a darcs-like theory of patches.</p>",
        "id": 230739362,
        "sender_full_name": "IRC Bot",
        "timestamp": 1616004305
    },
    {
        "content": "<p>@<strong>int-e</strong>: But I'm not sure... I joined much later.</p>",
        "id": 230739829,
        "sender_full_name": "IRC Bot",
        "timestamp": 1616004496
    },
    {
        "content": "<p>The archive lives here btw: <a href=\"https://isabelle.systems/zulip-archive/\">https://isabelle.systems/zulip-archive/</a></p>",
        "id": 230751562,
        "sender_full_name": "Kevin Kappelmann",
        "timestamp": 1616008932
    },
    {
        "content": "<p>@<strong>int-e</strong>: Odd. I thought I had extended that ban.</p>",
        "id": 230892624,
        "sender_full_name": "IRC Bot",
        "timestamp": 1616083816
    },
    {
        "content": "<p>@<strong>pruvisto[m]</strong>: hm?</p>",
        "id": 230895219,
        "sender_full_name": "IRC Bot",
        "timestamp": 1616084674
    },
    {
        "content": "<p>@<strong>int-e</strong>: wrong channel, my bad.</p>",
        "id": 230895244,
        "sender_full_name": "IRC Bot",
        "timestamp": 1616084693
    },
    {
        "content": "<p>I'm using Isabelle/jedit and it's working fine except that every few minutes, the cursor switches from red to brown and then I can't type anymore, I can only use the arrow keys, tab and backspace (perhaps others as well, not sure).</p>",
        "id": 234055096,
        "sender_full_name": "Ricardo Correia",
        "timestamp": 1618155385
    },
    {
        "content": "<p>The only way I know how to go back to normal is to click with the mouse in the text edit area... is there any other known workaround? This is a bit disruptive.</p>",
        "id": 234055128,
        "sender_full_name": "Ricardo Correia",
        "timestamp": 1618155421
    },
    {
        "content": "<p>@<strong>int-e</strong>: I know this effect from interacting with the find theorems/sledgehammer/etc. panels, but I don't think I've had it happen all by itself. But I'm not actively using Isabelle at the moment; maybe it got worse. And unfortunately clicking is the only way I know to get back to normal.</p>",
        "id": 234055443,
        "sender_full_name": "IRC Bot",
        "timestamp": 1618155696
    },
    {
        "content": "<p>Oh, I think you're right... it seems this happens when I focus another panel, I'm not entirely sure if it also happens by itself, but anyway... I just created a keyboard shortcut for the \"Go to text area\" action and it seems to fix the issue for me, i.e. I don't need to use the mouse anymore. Thanks!</p>",
        "id": 234055675,
        "sender_full_name": "Ricardo Correia",
        "timestamp": 1618155856
    },
    {
        "content": "<p>@<strong>int-e</strong>: I often thought that the experience would be less awful if the cursor keys would <em>not</em> work in that mode.</p>",
        "id": 234055686,
        "sender_full_name": "IRC Bot",
        "timestamp": 1618155869
    },
    {
        "content": "<p>@<strong>JCaesar</strong>: Hm, there was a way to do a computable fold on a set, if isabelle understands that that set is finite, right? Does anybody know how to pull that off from the top of their head?</p>",
        "id": 234636240,
        "sender_full_name": "IRC Bot",
        "timestamp": 1618474979
    },
    {
        "content": "<p>@<strong>pruvisto[m]</strong>: The operation also has to be commutative and associative</p>",
        "id": 234643594,
        "sender_full_name": "IRC Bot",
        "timestamp": 1618478726
    },
    {
        "content": "<p>@<strong>pruvisto[m]</strong>: then you can use Finite_Set.fold</p>",
        "id": 234643607,
        "sender_full_name": "IRC Bot",
        "timestamp": 1618478734
    },
    {
        "content": "<p>@<strong>pruvisto[m]</strong>: Take a look at the comp_fun_commute and comp_fun_idem locales, and how e.g. the sum function does it.</p>",
        "id": 234646879,
        "sender_full_name": "IRC Bot",
        "timestamp": 1618480310
    },
    {
        "content": "<p>@<strong>pruvisto[m]</strong>: (I think Lukas Stevens also recently made a relativised version that works when the operation is only commutative/associative on the set, but not the entire type)</p>",
        "id": 234646970,
        "sender_full_name": "IRC Bot",
        "timestamp": 1618480339
    },
    {
        "content": "<p>@<strong>JCaesar</strong>: ty.</p>",
        "id": 234651061,
        "sender_full_name": "IRC Bot",
        "timestamp": 1618482372
    },
    {
        "content": "<p>@<strong>aindilis</strong>: Is there a user group, mailing list or some such thing for people wanting to get started writing proofs using Isabelle, where remedial questions might be asked and answered?</p>",
        "id": 234949213,
        "sender_full_name": "IRC Bot",
        "timestamp": 1618623494
    },
    {
        "content": "<p>@<strong>pruvisto[m]</strong>: You should try the zulip</p>",
        "id": 234977225,
        "sender_full_name": "IRC Bot",
        "timestamp": 1618654012
    },
    {
        "content": "<p>@<strong>pruvisto[m]</strong>: <a href=\"http://isabelle.zulipchat.com\">isabelle.zulipchat.com</a></p>",
        "id": 234977257,
        "sender_full_name": "IRC Bot",
        "timestamp": 1618654036
    },
    {
        "content": "<p>@<strong>JCaesar</strong>: pruvisto: I tried Finite_Set.fold and others a bit, remembered the pain from a previous attempt, and ended up just doing everything with lists. (There was one slightly difficult set x = set y ==&gt; ?P x = ?P y proof I had to do, but overall, it's just easier...)</p>",
        "id": 234984494,
        "sender_full_name": "IRC Bot",
        "timestamp": 1618661545
    },
    {
        "content": "<p>@<strong>aindilis</strong>: pruvisto[m]: ty!</p>",
        "id": 235085331,
        "sender_full_name": "IRC Bot",
        "timestamp": 1618765229
    },
    {
        "content": "<p>@<strong>NieDzejkob</strong>: will the new EU regulations apply to proof assistants? (: <a href=\"https://statmodeling.stat.columbia.edu/2021/04/22/eu-proposing-to-regulate-the-use-of-bayesian-estimation/\">https://statmodeling.stat.columbia.edu/2021/04/22/eu-proposing-to-regulate-the-use-of-bayesian-estimation/</a></p>",
        "id": 236074867,
        "sender_full_name": "IRC Bot",
        "timestamp": 1619366323
    },
    {
        "content": "<p>Hm, somehow I can't post anything on this channel anymore through Matrix. &gt;_&gt;</p>",
        "id": 236084007,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1619375112
    },
    {
        "content": "<p>I was going to reply to what you said with \"You have got to be joking\"</p>",
        "id": 236084020,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1619375124
    },
    {
        "content": "<p>Hm, the messages also don't show up in my Matrix. Maybe the bridge is broken?</p>",
        "id": 236084040,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1619375150
    },
    {
        "content": "<p>@<strong>pruvisto[m]</strong>: Ah, I think I got it working again. :)</p>",
        "id": 236134241,
        "sender_full_name": "IRC Bot",
        "timestamp": 1619423944
    },
    {
        "content": "<p>@<strong>pruvisto[m]</strong>: Something was broken with my Matrix bridge and so I couldn't talk on #isabelle anymore</p>",
        "id": 236134437,
        "sender_full_name": "IRC Bot",
        "timestamp": 1619424036
    },
    {
        "content": "<p>@<strong>kit_ty_kate</strong>: hi, does anyone know where i can report issues/bugs by any chance?</p>",
        "id": 236247334,
        "sender_full_name": "IRC Bot",
        "timestamp": 1619472257
    },
    {
        "content": "<p>@<strong>kit_ty_kate</strong>: I haven't seen any mention of a bug tracker for Isabelle anywhere</p>",
        "id": 236247561,
        "sender_full_name": "IRC Bot",
        "timestamp": 1619472324
    },
    {
        "content": "<p>@<strong>NieDzejkob</strong>: you could send a mail to the isabelle-users mailing list</p>",
        "id": 236249140,
        "sender_full_name": "IRC Bot",
        "timestamp": 1619473080
    },
    {
        "content": "<p>@<strong>int-e</strong>: The isabelle-users mailing list is the usual place for odd behaviors.</p>",
        "id": 236249183,
        "sender_full_name": "IRC Bot",
        "timestamp": 1619473085
    },
    {
        "content": "<p>@<strong>int-e</strong>: (Makarius (the main Isabelle maintainer) likes to explain that there are no \"bugs\", or rather, that the term \"bug\" is meaningless. Call it \"odd behavior\" and you should avoid that trigger.)</p>",
        "id": 236249277,
        "sender_full_name": "IRC Bot",
        "timestamp": 1619473154
    },
    {
        "content": "<p>@<strong>kit_ty_kate</strong>: :D</p>",
        "id": 236250242,
        "sender_full_name": "IRC Bot",
        "timestamp": 1619473674
    },
    {
        "content": "<p>@<strong>pruvisto[m]</strong>: Of course, the IRC here or the Zulip (<a href=\"http://isabelle.zulipchat.com\">isabelle.zulipchat.com</a>) also works.</p>",
        "id": 236300808,
        "sender_full_name": "IRC Bot",
        "timestamp": 1619512341
    },
    {
        "content": "<p>@<strong>pruvisto[m]</strong>: As a first place to get some input on it (possibly more timely input than on the mailing list).</p>",
        "id": 236300844,
        "sender_full_name": "IRC Bot",
        "timestamp": 1619512362
    },
    {
        "content": "<p>@<strong>pruvisto[m]</strong>: Most of the \"bugs\" people find are indeed really only misunderstandings and both on IRC and Zulip, there are enough advanced users to explain what is going on in such cases.</p>",
        "id": 236300921,
        "sender_full_name": "IRC Bot",
        "timestamp": 1619512400
    },
    {
        "content": "<p>@<strong>pruvisto[m]</strong>: (\"should Isabelle have a bug tracker\" is also a long-standing point of contention with Makarius &gt;_&gt;)</p>",
        "id": 236300969,
        "sender_full_name": "IRC Bot",
        "timestamp": 1619512435
    },
    {
        "content": "<p>@<strong>pie_</strong>: ....wat. &lt;pruvisto[m]&gt; (\"should Isabelle have a bug tracker\" is also a long-standing point of contention with Makarius &gt;_&gt;)</p>",
        "id": 236663547,
        "sender_full_name": "IRC Bot",
        "timestamp": 1619698977
    },
    {
        "content": "<p>@<strong>NieDzejkob</strong>: hmm, looks like <a href=\"http://isabelle.in.tum.de\">isabelle.in.tum.de</a> and <a href=\"http://concrete-semantics.org\">concrete-semantics.org</a> are down</p>",
        "id": 236822020,
        "sender_full_name": "IRC Bot",
        "timestamp": 1619783038
    },
    {
        "content": "<p>@<strong>pruvisto[m]</strong>: sigh yes</p>",
        "id": 236822674,
        "sender_full_name": "IRC Bot",
        "timestamp": 1619783465
    },
    {
        "content": "<p>@<strong>pruvisto[m]</strong>: The Isabelle website at least is mirrored in a few places: <a href=\"https://www.cl.cam.ac.uk/research/hvg/Isabelle/\">https://www.cl.cam.ac.uk/research/hvg/Isabelle/</a></p>",
        "id": 236822687,
        "sender_full_name": "IRC Bot",
        "timestamp": 1619783476
    },
    {
        "content": "<p>@<strong>pruvisto[m]</strong>: I'd hoped those instability problems were resolved now that everything was moved to a new server</p>",
        "id": 236822705,
        "sender_full_name": "IRC Bot",
        "timestamp": 1619783499
    },
    {
        "content": "<p>@<strong>aindilis</strong>: are there any free online courses that teach mechanization at the same time as the subject itself?</p>",
        "id": 237233568,
        "sender_full_name": "IRC Bot",
        "timestamp": 1620076950
    },
    {
        "content": "<p>Nipkow's Concrete Semantics could fit that description.</p>",
        "id": 237308158,
        "sender_full_name": "Jakub Kądziołka",
        "timestamp": 1620128331
    },
    {
        "content": "<p>@<strong>pruvisto[m]</strong>: It's a book though, not a course as such.</p>",
        "id": 237309708,
        "sender_full_name": "IRC Bot",
        "timestamp": 1620129211
    },
    {
        "content": "<p>@<strong>Gurkenglas</strong>: Can I tell Isabelle to, like, poke something in order to do the obvious thing to it? If I poke that i know \"A /\\ B\", it should turn that into knowing A and B; If I poke that I need \"A -&gt; B\", it should turn that into knowing A and needing B; If I poke that I have \"A -&gt; B\", it should turn that into needing A and having B; etc.</p>",
        "id": 237393617,
        "sender_full_name": "IRC Bot",
        "timestamp": 1620160526
    },
    {
        "content": "<p>@<strong>pruvisto[m]</strong>: resolution with the right rule, e.g. conjI for \"and\", impI for implication</p>",
        "id": 237393883,
        "sender_full_name": "IRC Bot",
        "timestamp": 1620160640
    },
    {
        "content": "<p>@<strong>pruvisto[m]</strong>: i.e. \"rule conjI\"</p>",
        "id": 237393894,
        "sender_full_name": "IRC Bot",
        "timestamp": 1620160646
    },
    {
        "content": "<p>@<strong>pruvisto[m]</strong>: there's also \"safe\", which applies a number of sensible intro/elim rules</p>",
        "id": 237393914,
        "sender_full_name": "IRC Bot",
        "timestamp": 1620160659
    },
    {
        "content": "<p>@<strong>pruvisto[m]</strong>: in particular all the ones that you probably think about, but sometimes it does a bit too much for my taste</p>",
        "id": 237393955,
        "sender_full_name": "IRC Bot",
        "timestamp": 1620160676
    },
    {
        "content": "<p>@<strong>int-e</strong>: there's also <code>apply standard</code>, the thing that <code>proof</code> does by default</p>",
        "id": 237393958,
        "sender_full_name": "IRC Bot",
        "timestamp": 1620160677
    },
    {
        "content": "<p>@<strong>pruvisto[m]</strong>: and you can use \"intro\" to apply resolution with some rules exhaustively</p>",
        "id": 237394045,
        "sender_full_name": "IRC Bot",
        "timestamp": 1620160708
    },
    {
        "content": "<p>@<strong>int-e</strong>: (but it really doesn't come up in practice)</p>",
        "id": 237394062,
        "sender_full_name": "IRC Bot",
        "timestamp": 1620160722
    },
    {
        "content": "<p>@<strong>pruvisto[m]</strong>: I often write things like \"apply (intro conjI impI allI)</p>",
        "id": 237394069,
        "sender_full_name": "IRC Bot",
        "timestamp": 1620160725
    },
    {
        "content": "<p>@<strong>pruvisto[m]</strong>: to get basically a more \"controlled\" version of \"apply safe\"</p>",
        "id": 237394082,
        "sender_full_name": "IRC Bot",
        "timestamp": 1620160738
    },
    {
        "content": "<p>@<strong>int-e</strong>: Yeah I do (or did, not formalizing atm) that a lot as well.</p>",
        "id": 237394128,
        "sender_full_name": "IRC Bot",
        "timestamp": 1620160772
    },
    {
        "content": "<p>@<strong>int-e</strong>: I've done a good deal of  proof (intro conjI impI allI, goal_cases)</p>",
        "id": 237394341,
        "sender_full_name": "IRC Bot",
        "timestamp": 1620160873
    },
    {
        "content": "<p>@<strong>int-e</strong>: (usually assigning names to the cases when there were more than a couple)</p>",
        "id": 237394405,
        "sender_full_name": "IRC Bot",
        "timestamp": 1620160904
    },
    {
        "content": "<p>@<strong>Gurkenglas</strong>: I'm looking at <a href=\"https://github.com/seL4/isabelle/blob/master/src/HOL/Examples/Drinker.thy#L49\">https://github.com/seL4/isabelle/blob/master/src/HOL/Examples/Drinker.thy#L49</a>. I don't see how Isabelle follows that, can I make it show its work?</p>",
        "id": 237395138,
        "sender_full_name": "IRC Bot",
        "timestamp": 1620161241
    },
    {
        "content": "<p>it's just <code>rule exI</code></p>",
        "id": 237395334,
        "sender_full_name": "Jakub Kądziołka",
        "timestamp": 1620161321
    },
    {
        "content": "<p>@<strong>int-e</strong>: Right, it just goes from drunk a ⟶ (∀x. drunk x) to ∃x. drunk x ⟶ (∀x. drunk x).</p>",
        "id": 237395396,
        "sender_full_name": "IRC Bot",
        "timestamp": 1620161351
    },
    {
        "content": "<p>@<strong>pruvisto[m]</strong>: .. is roughly equivalent to \"by standard\"</p>",
        "id": 237395539,
        "sender_full_name": "IRC Bot",
        "timestamp": 1620161414
    },
    {
        "content": "<p>@<strong>pruvisto[m]</strong>: Which in this case just picks a suitable rule</p>",
        "id": 237395583,
        "sender_full_name": "IRC Bot",
        "timestamp": 1620161434
    },
    {
        "content": "<p>@<strong>pruvisto[m]</strong>: Which is indeed exI</p>",
        "id": 237395591,
        "sender_full_name": "IRC Bot",
        "timestamp": 1620161440
    },
    {
        "content": "<p>@<strong>pruvisto[m]</strong>: The introduction rule for the existential quantifier in HOL</p>",
        "id": 237395629,
        "sender_full_name": "IRC Bot",
        "timestamp": 1620161456
    },
    {
        "content": "<p>@<strong>int-e</strong>: (You can see the thing it shows in the proof state if your cursor is somewhere in the \"show ?thesis \" part)</p>",
        "id": 237395640,
        "sender_full_name": "IRC Bot",
        "timestamp": 1620161461
    },
    {
        "content": "<p>@<strong>int-e</strong>: the thing it shows = the relevant proof goal</p>",
        "id": 237395723,
        "sender_full_name": "IRC Bot",
        "timestamp": 1620161514
    },
    {
        "content": "<p>@<strong>Gurkenglas</strong>: int-e, right, that's the step I don't understand. How does it go from f(A)-&gt;B to ∃x.f(x)-&gt;B ?</p>",
        "id": 237396123,
        "sender_full_name": "IRC Bot",
        "timestamp": 1620161687
    },
    {
        "content": "<p>@<strong>int-e</strong>: A is a witness for the existential</p>",
        "id": 237396152,
        "sender_full_name": "IRC Bot",
        "timestamp": 1620161699
    },
    {
        "content": "<p>@<strong>int-e</strong>: exI is  P(a) -&gt; ∃ x. P(x)</p>",
        "id": 237396193,
        "sender_full_name": "IRC Bot",
        "timestamp": 1620161721
    },
    {
        "content": "<p>@<strong>Gurkenglas</strong>: yea but P-&gt;R and P-&gt;Q don't combine into Q-&gt;R</p>",
        "id": 237396229,
        "sender_full_name": "IRC Bot",
        "timestamp": 1620161744
    },
    {
        "content": "<p>@<strong>int-e</strong>: ?</p>",
        "id": 237396254,
        "sender_full_name": "IRC Bot",
        "timestamp": 1620161758
    },
    {
        "content": "<p>@<strong>int-e</strong>: P(x) is an implication here.</p>",
        "id": 237396306,
        "sender_full_name": "IRC Bot",
        "timestamp": 1620161766
    },
    {
        "content": "<p>@<strong>int-e</strong>: ∃x. drunk x ⟶ (∀x. drunk x) is ∃x. (drunk x ⟶ (∀x. drunk x))</p>",
        "id": 237396336,
        "sender_full_name": "IRC Bot",
        "timestamp": 1620161783
    },
    {
        "content": "<p>@<strong>Gurkenglas</strong>: Oh darn I tried to introduce P Q and R to distinguish it from previous terms</p>",
        "id": 237396343,
        "sender_full_name": "IRC Bot",
        "timestamp": 1620161787
    },
    {
        "content": "<p>@<strong>Gurkenglas</strong>: ohh i thought it was trying to prove (∃x. drunk x) -&gt; (∀x. drunk x)</p>",
        "id": 237396388,
        "sender_full_name": "IRC Bot",
        "timestamp": 1620161812
    },
    {
        "content": "<p>@<strong>int-e</strong>: but that would be false</p>",
        "id": 237396417,
        "sender_full_name": "IRC Bot",
        "timestamp": 1620161829
    },
    {
        "content": "<p>@<strong>Gurkenglas</strong>: indeed</p>",
        "id": 237396422,
        "sender_full_name": "IRC Bot",
        "timestamp": 1620161832
    },
    {
        "content": "<p>@<strong>Gurkenglas</strong>: I thought Isabelle was showing off some sort of pitfall that everybody needs to know about to not accidentally prove falsities which is apparently possible.</p>",
        "id": 237396460,
        "sender_full_name": "IRC Bot",
        "timestamp": 1620161855
    },
    {
        "content": "<p>@<strong>Gurkenglas</strong>: Haskell has that.</p>",
        "id": 237396502,
        "sender_full_name": "IRC Bot",
        "timestamp": 1620161875
    },
    {
        "content": "<p>well, haskell is not a very good proof assistant :P</p>",
        "id": 237396603,
        "sender_full_name": "Jakub Kądziołka",
        "timestamp": 1620161908
    },
    {
        "content": "<p>@<strong>pruvisto[m]</strong>: If you can prove falsity in Isabelle without introducing new axioms or using oracles, we'll all be very interested to hear about it ;)</p>",
        "id": 237396729,
        "sender_full_name": "IRC Bot",
        "timestamp": 1620161986
    },
    {
        "content": "<p>@<strong>pruvisto[m]</strong>: Should be worth one paper at least</p>",
        "id": 237396843,
        "sender_full_name": "IRC Bot",
        "timestamp": 1620162014
    },
    {
        "content": "<p>(it has happened before, can't recall whether it was 1 or 2 papers in the end)</p>",
        "id": 237397024,
        "sender_full_name": "Jakub Kądziołka",
        "timestamp": 1620162047
    },
    {
        "content": "<p>@<strong>gr0n</strong>: i have a quick question about fetching components from isabelle, specifically isabelle2021. when i run ./bin/isabelle components -a on that version of isabelle, it fails to fetch anything (there's a permission denied error on sketis)</p>",
        "id": 237570668,
        "sender_full_name": "IRC Bot",
        "timestamp": 1620249893
    },
    {
        "content": "<p>@<strong>gr0n</strong>: is there any way that one could bootstrap isabelle from the hg repository rather than downloading the pre-built binary for linux?</p>",
        "id": 237570786,
        "sender_full_name": "IRC Bot",
        "timestamp": 1620249926
    },
    {
        "content": "<p>@<strong>pruvisto[m]</strong>: Yes</p>",
        "id": 237571966,
        "sender_full_name": "IRC Bot",
        "timestamp": 1620250436
    },
    {
        "content": "<p>@<strong>pruvisto[m]</strong>: isabelle components -I</p>",
        "id": 237572034,
        "sender_full_name": "IRC Bot",
        "timestamp": 1620250452
    },
    {
        "content": "<p>@<strong>pruvisto[m]</strong>: isabelle components -a</p>",
        "id": 237572064,
        "sender_full_name": "IRC Bot",
        "timestamp": 1620250465
    },
    {
        "content": "<p>@<strong>gr0n</strong>: pruvisto[m]: yeah, but the URL that 2021 gets aren't accessible anymore</p>",
        "id": 237572073,
        "sender_full_name": "IRC Bot",
        "timestamp": 1620250474
    },
    {
        "content": "<p>@<strong>pruvisto[m]</strong>: Run that on the development version and you're set</p>",
        "id": 237572080,
        "sender_full_name": "IRC Bot",
        "timestamp": 1620250480
    },
    {
        "content": "<p>@<strong>pruvisto[m]</strong>: Ah</p>",
        "id": 237572091,
        "sender_full_name": "IRC Bot",
        "timestamp": 1620250486
    },
    {
        "content": "<p>@<strong>pruvisto[m]</strong>: No that's probably not possible</p>",
        "id": 237572104,
        "sender_full_name": "IRC Bot",
        "timestamp": 1620250492
    },
    {
        "content": "<p>@<strong>pruvisto[m]</strong>: Although</p>",
        "id": 237572110,
        "sender_full_name": "IRC Bot",
        "timestamp": 1620250497
    },
    {
        "content": "<p>@<strong>pruvisto[m]</strong>: I'm actually surprised</p>",
        "id": 237572119,
        "sender_full_name": "IRC Bot",
        "timestamp": 1620250502
    },
    {
        "content": "<p>@<strong>pruvisto[m]</strong>: Which component is the problem?</p>",
        "id": 237572138,
        "sender_full_name": "IRC Bot",
        "timestamp": 1620250514
    },
    {
        "content": "<p>@<strong>pruvisto[m]</strong>: But why can't you run the regular Isabelle2021 release?</p>",
        "id": 237572181,
        "sender_full_name": "IRC Bot",
        "timestamp": 1620250536
    },
    {
        "content": "<p>@<strong>pruvisto[m]</strong>: You shouldn't have to fetch any components for that</p>",
        "id": 237572215,
        "sender_full_name": "IRC Bot",
        "timestamp": 1620250551
    },
    {
        "content": "<p>@<strong>pruvisto[m]</strong>: They're all bundled with it</p>",
        "id": 237572226,
        "sender_full_name": "IRC Bot",
        "timestamp": 1620250558
    },
    {
        "content": "<p>@<strong>pruvisto[m]</strong>: The component fetching is only for the development version on mercurial</p>",
        "id": 237572293,
        "sender_full_name": "IRC Bot",
        "timestamp": 1620250572
    },
    {
        "content": "<p>@<strong>gr0n</strong>: pruvisto[m]: i'm trying to package isabelle into a linux distro that prefers building as much as possible due to supporting different libc versions and a lot of architectures</p>",
        "id": 237572336,
        "sender_full_name": "IRC Bot",
        "timestamp": 1620250597
    },
    {
        "content": "<p>@<strong>gr0n</strong>: so i'm just trying to take the most barebones thing and bootstrap as much of isabelle as possible manually</p>",
        "id": 237572358,
        "sender_full_name": "IRC Bot",
        "timestamp": 1620250611
    },
    {
        "content": "<p>@<strong>pruvisto[m]</strong>: Oof</p>",
        "id": 237572385,
        "sender_full_name": "IRC Bot",
        "timestamp": 1620250633
    },
    {
        "content": "<p>you might be interested in <a href=\"https://github.com/nspin/nix-isabelle\">https://github.com/nspin/nix-isabelle</a></p>",
        "id": 237572439,
        "sender_full_name": "Jakub Kądziołka",
        "timestamp": 1620250661
    },
    {
        "content": "<p>@<strong>pruvisto[m]</strong>: Yeah Makarius isn't a big fan of people don't that because it tends to cause weird problems (e.g. when the versions of the components are slightly wrong)</p>",
        "id": 237572456,
        "sender_full_name": "IRC Bot",
        "timestamp": 1620250672
    },
    {
        "content": "<p>@<strong>pruvisto[m]</strong>: People then want support for that on the mailing list and it takes time to figure out what the problem is</p>",
        "id": 237572520,
        "sender_full_name": "IRC Bot",
        "timestamp": 1620250694
    },
    {
        "content": "<p>@<strong>gr0n</strong>: pruvisto[m]: oh i'm keeping the isabelle contrib/ versions rather than using the system versions, i'm just trying to bootstrap it from within the isabelle repo itself (hence components -a)</p>",
        "id": 237572548,
        "sender_full_name": "IRC Bot",
        "timestamp": 1620250711
    },
    {
        "content": "<p>@<strong>pruvisto[m]</strong>: But of course I understand there are reasons for doing this</p>",
        "id": 237572554,
        "sender_full_name": "IRC Bot",
        "timestamp": 1620250712
    },
    {
        "content": "<p>@<strong>pruvisto[m]</strong>: I don't know how long Makarius keeps the components on the server</p>",
        "id": 237572597,
        "sender_full_name": "IRC Bot",
        "timestamp": 1620250745
    },
    {
        "content": "<p>@<strong>gr0n</strong>: also... it seems to be working now? i'm not sure why it wasn't a few minutes ago.</p>",
        "id": 237572603,
        "sender_full_name": "IRC Bot",
        "timestamp": 1620250749
    },
    {
        "content": "<p>@<strong>gr0n</strong>: maybe i hit a weird timing</p>",
        "id": 237572628,
        "sender_full_name": "IRC Bot",
        "timestamp": 1620250763
    },
    {
        "content": "<p>@<strong>pruvisto[m]</strong>: But I was under the impression that he does so pretty much indefinitely</p>",
        "id": 237572639,
        "sender_full_name": "IRC Bot",
        "timestamp": 1620250771
    },
    {
        "content": "<p>@<strong>pruvisto[m]</strong>: For one, we sometimes like to go back to old versions to figure out regressions</p>",
        "id": 237572665,
        "sender_full_name": "IRC Bot",
        "timestamp": 1620250792
    },
    {
        "content": "<p>@<strong>pruvisto[m]</strong>: However, even if you take the exact right commit in the development branch and fetch all the components, you will not end up with issbelle2021</p>",
        "id": 237572775,
        "sender_full_name": "IRC Bot",
        "timestamp": 1620250842
    },
    {
        "content": "<p>@<strong>pruvisto[m]</strong>: For one, it will keeps its files in .isabelle</p>",
        "id": 237572796,
        "sender_full_name": "IRC Bot",
        "timestamp": 1620250862
    },
    {
        "content": "<p>@<strong>pruvisto[m]</strong>: Not in .isabelle/Isabelle2021</p>",
        "id": 237572825,
        "sender_full_name": "IRC Bot",
        "timestamp": 1620250882
    },
    {
        "content": "<p>@<strong>gr0n</strong>: hmm, so the preferred approach would be just to fetch the -linux tar.gz and distribute that?</p>",
        "id": 237572857,
        "sender_full_name": "IRC Bot",
        "timestamp": 1620250901
    },
    {
        "content": "<p>@<strong>pruvisto[m]</strong>: And it will not display its name as Isabelle 2021 but as \"unspecified repository version\"</p>",
        "id": 237572878,
        "sender_full_name": "IRC Bot",
        "timestamp": 1620250914
    },
    {
        "content": "<p>@<strong>gr0n</strong>: right, that sounds pretty... unacceptable to say the least :)</p>",
        "id": 237572938,
        "sender_full_name": "IRC Bot",
        "timestamp": 1620250935
    },
    {
        "content": "<p>@<strong>pruvisto[m]</strong>: &lt;gr0n \"hmm, so the preferred approach w\"&gt; I would indeed recommend that if it is an option</p>",
        "id": 237572946,
        "sender_full_name": "IRC Bot",
        "timestamp": 1620250938
    },
    {
        "content": "<p>@<strong>gr0n</strong>: pruvisto[m]: i think given a good enough a reason, it is.</p>",
        "id": 237572965,
        "sender_full_name": "IRC Bot",
        "timestamp": 1620250951
    },
    {
        "content": "<p>@<strong>gr0n</strong>: and this seems like one</p>",
        "id": 237572970,
        "sender_full_name": "IRC Bot",
        "timestamp": 1620250955
    },
    {
        "content": "<p>@<strong>pruvisto[m]</strong>: But Jakub seems to know a thing or two about packaging Isabelle</p>",
        "id": 237572986,
        "sender_full_name": "IRC Bot",
        "timestamp": 1620250967
    },
    {
        "content": "<p>@<strong>pruvisto[m]</strong>: So if you prefer to look into alternatives, maybe have a look at the thing he linked</p>",
        "id": 237573014,
        "sender_full_name": "IRC Bot",
        "timestamp": 1620250986
    },
    {
        "content": "<p>@<strong>gr0n</strong>: oh i totally missed that link... the @** caught me off guard and i thought it was another conversation :)</p>",
        "id": 237573045,
        "sender_full_name": "IRC Bot",
        "timestamp": 1620251014
    },
    {
        "content": "<p>@<strong>gr0n</strong>: thnaks</p>",
        "id": 237573048,
        "sender_full_name": "IRC Bot",
        "timestamp": 1620251017
    },
    {
        "content": "<p>@<strong>pruvisto[m]</strong>: No it's just the zulip bridge</p>",
        "id": 237573058,
        "sender_full_name": "IRC Bot",
        "timestamp": 1620251026
    },
    {
        "content": "<p>@<strong>pruvisto[m]</strong>: That's what it looks like when someone writes on zulip</p>",
        "id": 237573092,
        "sender_full_name": "IRC Bot",
        "timestamp": 1620251044
    },
    {
        "content": "<p>@<strong>gr0n</strong>: yeah, i see it now but completely glossed over it before :D</p>",
        "id": 237573138,
        "sender_full_name": "IRC Bot",
        "timestamp": 1620251066
    },
    {
        "content": "<p>@<strong>pruvisto[m]</strong>: This big bundle is Makarius's solution to our very own dependency hell</p>",
        "id": 237573140,
        "sender_full_name": "IRC Bot",
        "timestamp": 1620251069
    },
    {
        "content": "<p>@<strong>pruvisto[m]</strong>: It's not perfect, but it works very well for almost everyone</p>",
        "id": 237573154,
        "sender_full_name": "IRC Bot",
        "timestamp": 1620251086
    },
    {
        "content": "<p>@<strong>gr0n</strong>: alright, that nix-isabelle thing is quite helpful. thanks for all the advice and information</p>",
        "id": 237573606,
        "sender_full_name": "IRC Bot",
        "timestamp": 1620251351
    },
    {
        "content": "<p>@<strong>int-e</strong>: any opinions on the libera/freenode split?</p>",
        "id": 239884961,
        "sender_full_name": "IRC Bot",
        "timestamp": 1621701701
    },
    {
        "content": "<p>@<strong>pruvisto[m]</strong>: Ugh</p>",
        "id": 239885927,
        "sender_full_name": "IRC Bot",
        "timestamp": 1621702758
    },
    {
        "content": "<p>@<strong>pruvisto[m]</strong>: Yeah we should probably switch to libera</p>",
        "id": 239885929,
        "sender_full_name": "IRC Bot",
        "timestamp": 1621702770
    },
    {
        "content": "<p>@<strong>int-e</strong>: ugh covers it well :-/</p>",
        "id": 239886153,
        "sender_full_name": "IRC Bot",
        "timestamp": 1621702925
    },
    {
        "content": "<p>@<strong>int-e</strong>: I honestly don't know. We'd almost inevitably split up an already small and very low traffic channel. And there's a good chance that Andrew Lee and his consorts will leave it well enough alone. It's all very unpleasant.</p>",
        "id": 239886354,
        "sender_full_name": "IRC Bot",
        "timestamp": 1621703074
    },
    {
        "content": "<p>@<strong>int-e</strong>: And of course there are other options... like OFTC, or giving up the IRC presence entirely (sniff)</p>",
        "id": 239886538,
        "sender_full_name": "IRC Bot",
        "timestamp": 1621703276
    },
    {
        "content": "<p>I wouldn't have found the zulip without IRC, so...</p>",
        "id": 239887295,
        "sender_full_name": "Jakub Kądziołka",
        "timestamp": 1621704070
    },
    {
        "content": "<p>@<strong>aweinstock</strong>: #haskell seems to be around halfway moved (~770 vs ~370 at the moment)</p>",
        "id": 239899335,
        "sender_full_name": "IRC Bot",
        "timestamp": 1621716679
    },
    {
        "content": "<p>@<strong>aweinstock</strong>: well, existent in both places, so not exactly moved</p>",
        "id": 239899344,
        "sender_full_name": "IRC Bot",
        "timestamp": 1621716699
    },
    {
        "content": "<p>@<strong>int-e</strong>: Note: It is now against Freenode policy to advertise <a href=\"http://libera.chat\">libera.chat</a> in the topic for project channels, and this is being enforced.</p>",
        "id": 240275334,
        "sender_full_name": "IRC Bot",
        "timestamp": 1621999084
    },
    {
        "content": "<p>@<strong>int-e</strong>: #isabelle exists on <a href=\"http://irc.libera.chat\">irc.libera.chat</a> does exist though in case anyone wants to meet up there.</p>",
        "id": 240275364,
        "sender_full_name": "IRC Bot",
        "timestamp": 1621999123
    },
    {
        "content": "<p>@<strong>int-e</strong>: details (as of now, policies seem to be chaning every few hours): <a href=\"https://freenode.net/policies#channel-ownership\">https://freenode.net/policies#channel-ownership</a></p>",
        "id": 240275383,
        "sender_full_name": "IRC Bot",
        "timestamp": 1621999170
    },
    {
        "content": "<p>@<strong>int-e</strong>: this obviously doesn't mention Libera anywhere, but it's considered <em>spam</em>.</p>",
        "id": 240275434,
        "sender_full_name": "IRC Bot",
        "timestamp": 1621999205
    },
    {
        "content": "<p>@<strong>pruvisto[m]</strong>: Libera does not have a Matrix bridge. :/</p>",
        "id": 240290809,
        "sender_full_name": "IRC Bot",
        "timestamp": 1622016263
    },
    {
        "content": "<p>@<strong>pruvisto[m]</strong>: otherwise I'd happily vote for switching to that.</p>",
        "id": 240290812,
        "sender_full_name": "IRC Bot",
        "timestamp": 1622016264
    },
    {
        "content": "<p>@<strong>pruvisto[m]</strong>: We are just moving another channel to oftc</p>",
        "id": 240290822,
        "sender_full_name": "IRC Bot",
        "timestamp": 1622016274
    },
    {
        "content": "<p>@<strong>pruvisto[m]</strong>: A Matrix–Libera bridge is in progress, according to official information.</p>",
        "id": 240291721,
        "sender_full_name": "IRC Bot",
        "timestamp": 1622016921
    },
    {
        "content": "<p>@<strong>pruvisto[m]</strong>: So I guess we should just move this thing to Libera and be done with it.</p>",
        "id": 240291742,
        "sender_full_name": "IRC Bot",
        "timestamp": 1622016938
    },
    {
        "content": "<p>@<strong>pruvisto[m]</strong>: It's a damn shame Freenode had to go out like this.</p>",
        "id": 240291766,
        "sender_full_name": "IRC Bot",
        "timestamp": 1622016957
    },
    {
        "content": "<p>Isn't libera using the same IRC protocol as is used on freenode and thus the same matrix bridge should work if you change the URL and port number?</p>",
        "id": 240295588,
        "sender_full_name": "Kevin Kappelmann",
        "timestamp": 1622019690
    },
    {
        "content": "<p>@<strong>pruvisto[m]</strong>: I don't know, but if it were that easy, they would already have done it.</p>",
        "id": 240295704,
        "sender_full_name": "IRC Bot",
        "timestamp": 1622019753
    },
    {
        "content": "<p>@<strong>pruvisto[m]</strong>: There's a Twitter post from two days ago saying that the <a href=\"http://matrix.org\">matrix.org</a> people and the Libera people are working on it.</p>",
        "id": 240295732,
        "sender_full_name": "IRC Bot",
        "timestamp": 1622019775
    },
    {
        "content": "<p>@<strong>pruvisto[m]</strong>: The problem, I think, is that the big Matrix bridges need some form of collaboration from the IRC side to work.</p>",
        "id": 240295768,
        "sender_full_name": "IRC Bot",
        "timestamp": 1622019799
    },
    {
        "content": "<p>@<strong>pruvisto[m]</strong>: If you just host your own small Matrix bridge, you can set it up to act just like a regular IRC client and everything's fine. But I haven't done that in the past. Because I'm lazy.</p>",
        "id": 240295795,
        "sender_full_name": "IRC Bot",
        "timestamp": 1622019826
    },
    {
        "content": "<p>The 'impersonation' feature where the bridge posts as many users with the [m] prefix might require collaboration</p>",
        "id": 240306118,
        "sender_full_name": "Jakub Kądziołka",
        "timestamp": 1622026356
    },
    {
        "content": "<p>@<strong>pruvisto[m]</strong>: Yes, that definitely. But there's normally also a limit on how many IRC connections can come from the same IRC address, which is not ideal for bigger bridges.</p>",
        "id": 240306204,
        "sender_full_name": "IRC Bot",
        "timestamp": 1622026432
    },
    {
        "content": "<p>@<strong>pruvisto[m]</strong>: So I guess the big Matrix bridges usually bundle these somehow, in circumvention of the \"normal\" IRC protocol</p>",
        "id": 240306261,
        "sender_full_name": "IRC Bot",
        "timestamp": 1622026454
    },
    {
        "content": "<p>@<strong>pruvisto[m]</strong>: at least that's what I gather from half-overheard remarks</p>",
        "id": 240306281,
        "sender_full_name": "IRC Bot",
        "timestamp": 1622026468
    },
    {
        "content": "<p>@<strong>pruvisto[m]</strong>: I'm still not sure why my name appears as \"pruvisto[m]\" and not as \"pruvisto\", seeing as I'm pretty sure I enabled puppeting on the bridge</p>",
        "id": 240306315,
        "sender_full_name": "IRC Bot",
        "timestamp": 1622026493
    },
    {
        "content": "<p>@<strong>pruvisto[m]</strong>: sigh</p>",
        "id": 240306320,
        "sender_full_name": "IRC Bot",
        "timestamp": 1622026494
    },
    {
        "content": "<p>@<strong>pruvisto[m]</strong>: They're hoping to get the Matrix bridge on Libera up tomorrow</p>",
        "id": 240387227,
        "sender_full_name": "IRC Bot",
        "timestamp": 1622061241
    },
    {
        "content": "<p>@<strong>pie_</strong>: -&gt; libera</p>",
        "id": 240701183,
        "sender_full_name": "IRC Bot",
        "timestamp": 1622293390
    },
    {
        "content": "<p>Just a test if the bridge to zulip works.</p>",
        "id": 240742382,
        "sender_full_name": "Kevin Kappelmann",
        "timestamp": 1622358209
    },
    {
        "content": "<p>@<strong>Guest8864</strong>: works here.</p>",
        "id": 240742384,
        "sender_full_name": "IRC Bot",
        "timestamp": 1622358221
    },
    {
        "content": "<p>@<strong>int-e</strong>: hi zulip</p>",
        "id": 240748271,
        "sender_full_name": "IRC Bot",
        "timestamp": 1622368699
    },
    {
        "content": "<p>@<strong>pruvisto</strong>: Test?</p>",
        "id": 240750293,
        "sender_full_name": "IRC Bot",
        "timestamp": 1622372258
    },
    {
        "content": "<p>@<strong>pruvisto</strong>: Ah okay it still works.</p>",
        "id": 240750297,
        "sender_full_name": "IRC Bot",
        "timestamp": 1622372268
    },
    {
        "content": "<p>@<strong>pruvisto</strong>: And my name even appears as \"pruvisto\", not as \"pruvisto[m]\". Yay!</p>",
        "id": 240750336,
        "sender_full_name": "IRC Bot",
        "timestamp": 1622372287
    },
    {
        "content": "<p>@<strong>pruvisto</strong>: int-e: Well I could take over the channel if you want me to.</p>",
        "id": 240750338,
        "sender_full_name": "IRC Bot",
        "timestamp": 1622372308
    },
    {
        "content": "<p>@<strong>pruvisto</strong>: I haven't been op of an IRC channel since, uh, I don't know. Many years ago. :D</p>",
        "id": 240750344,
        "sender_full_name": "IRC Bot",
        "timestamp": 1622372325
    },
    {
        "content": "<p>@<strong>pruvisto</strong>: But I could probably figure it out.</p>",
        "id": 240750346,
        "sender_full_name": "IRC Bot",
        "timestamp": 1622372333
    },
    {
        "content": "<p>@<strong>pruvisto</strong>: I'm not terribly eager to do it, but if you're even less eager I'd happily do it.</p>",
        "id": 240750349,
        "sender_full_name": "IRC Bot",
        "timestamp": 1622372345
    },
    {
        "content": "<p>@<strong>int-e</strong>: pruvisto: added you on chanserv. so /msg chanserv op #isabelle will work, for example.</p>",
        "id": 240753087,
        "sender_full_name": "IRC Bot",
        "timestamp": 1622376982
    },
    {
        "content": "<p>@<strong>pruvisto</strong>: thanks</p>",
        "id": 240753240,
        "sender_full_name": "IRC Bot",
        "timestamp": 1622377255
    },
    {
        "content": "<p>@<strong>wagle</strong>: Topic for #isabelle is \"Sorry, but because of spam, only registered users can talk; see <a href=\"https://freenode.net/kb/answer/registration\">https://freenode.net/kb/answer/registration</a> || Official channel for the Isabelle/HOL theorem prover: <a href=\"http://www.cl.cam.ac.uk/research/hvg/Isabelle/index.html\">http://www.cl.cam.ac.uk/research/hvg/Isabelle/index.html</a> || isabelle_zulip bridges to  <a href=\"\">https://isabelle.zulipchat.com/</a>  which keeps logs.\"</p>",
        "id": 240783495,
        "sender_full_name": "IRC Bot",
        "timestamp": 1622425198
    },
    {
        "content": "<p>@<strong>int-e</strong>: What was that about? Anyway I guess neither channel is official in any capacity... is the Isabelle website doesn't know any IRC channel at all. It does know about Zulip though.</p>",
        "id": 240788528,
        "sender_full_name": "IRC Bot",
        "timestamp": 1622433010
    },
    {
        "content": "<p>@<strong>pruvisto</strong>: I have no idea</p>",
        "id": 240801211,
        "sender_full_name": "IRC Bot",
        "timestamp": 1622446519
    },
    {
        "content": "<p>@<strong>pruvisto</strong>: Perhaps they thought we don't know about the other one?</p>",
        "id": 240801265,
        "sender_full_name": "IRC Bot",
        "timestamp": 1622446558
    },
    {
        "content": "<p>@<strong>pruvisto</strong>: We should put the information that this channel is bridged to zulip in the topic</p>",
        "id": 240801348,
        "sender_full_name": "IRC Bot",
        "timestamp": 1622446592
    },
    {
        "content": "<p>@<strong>int-e</strong>: right, I took that out because it was false at the time</p>",
        "id": 240801394,
        "sender_full_name": "IRC Bot",
        "timestamp": 1622446625
    },
    {
        "content": "<p>@<strong>pruvisto</strong>: fyi the word is \"unofficial\"</p>",
        "id": 240903343,
        "sender_full_name": "IRC Bot",
        "timestamp": 1622532106
    },
    {
        "content": "<p>@<strong>pruvisto</strong>: \"inofficial\", if it exists at all, is very rare</p>",
        "id": 240903405,
        "sender_full_name": "IRC Bot",
        "timestamp": 1622532133
    },
    {
        "content": "<p>@<strong>pruvisto</strong>: so you just outed yourself as a German speaker. ;)</p>",
        "id": 240903417,
        "sender_full_name": "IRC Bot",
        "timestamp": 1622532144
    },
    {
        "content": "<p>@<strong>int-e</strong>: just giving you an incentife to try out those op powers ;)</p>",
        "id": 240903443,
        "sender_full_name": "IRC Bot",
        "timestamp": 1622532172
    },
    {
        "content": "<p>@<strong>int-e</strong>: wow</p>",
        "id": 240903450,
        "sender_full_name": "IRC Bot",
        "timestamp": 1622532177
    },
    {
        "content": "<p>@<strong>int-e</strong>: incentive.</p>",
        "id": 240903452,
        "sender_full_name": "IRC Bot",
        "timestamp": 1622532178
    },
    {
        "content": "<p>@<strong>int-e</strong>: I need to wake up.</p>",
        "id": 240903463,
        "sender_full_name": "IRC Bot",
        "timestamp": 1622532182
    },
    {
        "content": "<p>@<strong>pruvisto</strong>: incentife sounds like something a French person might write. :D</p>",
        "id": 240903492,
        "sender_full_name": "IRC Bot",
        "timestamp": 1622532201
    },
    {
        "content": "<p>@<strong>pruvisto</strong>: In paper reviews you can often tell what country a person is from by the mistakes they make</p>",
        "id": 240903528,
        "sender_full_name": "IRC Bot",
        "timestamp": 1622532229
    },
    {
        "content": "<p>@<strong>pruvisto</strong>: I once had a reviewer tell me \"I was deceived by the presentation\", presumable French because \"décevoir\" = \"disappoint\"</p>",
        "id": 240903600,
        "sender_full_name": "IRC Bot",
        "timestamp": 1622532264
    },
    {
        "content": "<p>@<strong>int-e</strong>: that's an almost sinister shift in meaning</p>",
        "id": 240903647,
        "sender_full_name": "IRC Bot",
        "timestamp": 1622532306
    },
    {
        "content": "<p>@<strong>pruvisto</strong>: There, I did it</p>",
        "id": 240903753,
        "sender_full_name": "IRC Bot",
        "timestamp": 1622532366
    },
    {
        "content": "<p>@<strong>int-e</strong>: wee</p>",
        "id": 240903767,
        "sender_full_name": "IRC Bot",
        "timestamp": 1622532379
    },
    {
        "content": "<p>@<strong>pruvisto</strong>: Who was op of the old Freenode channel anyway?</p>",
        "id": 240911878,
        "sender_full_name": "IRC Bot",
        "timestamp": 1622537316
    },
    {
        "content": "<p>@<strong>pruvisto</strong>: Not sure how many regulars we lost in the move. And how many newbies.</p>",
        "id": 240911952,
        "sender_full_name": "IRC Bot",
        "timestamp": 1622537353
    },
    {
        "content": "<p>@<strong>pruvisto</strong>: I guess I can advertise the channel on Twitter</p>",
        "id": 240911960,
        "sender_full_name": "IRC Bot",
        "timestamp": 1622537362
    },
    {
        "content": "<p>@<strong>pruvisto</strong>: From the Isabelle account</p>",
        "id": 240911976,
        "sender_full_name": "IRC Bot",
        "timestamp": 1622537374
    },
    {
        "content": "<p>@<strong>pruvisto</strong>: I wonder if we can somehow plumb a Matrix room to this one…</p>",
        "id": 240912490,
        "sender_full_name": "IRC Bot",
        "timestamp": 1622537641
    },
    {
        "content": "<p>@<strong>int-e</strong>: pruvisto: larsh, Igloo, lispy, you, and I</p>",
        "id": 240924975,
        "sender_full_name": "IRC Bot",
        "timestamp": 1622545268
    },
    {
        "content": "<p>@<strong>pruvisto</strong>: Me? Huh.</p>",
        "id": 240925047,
        "sender_full_name": "IRC Bot",
        "timestamp": 1622545311
    },
    {
        "content": "<p>@<strong>int-e</strong>: Igloo founded it, I suspect because he wanted to formalize a darcs-like theory of patches.</p>",
        "id": 240925160,
        "sender_full_name": "IRC Bot",
        "timestamp": 1622545366
    },
    {
        "content": "<p>@<strong>int-e</strong>: then I got ops from lispy one day and I looked for more active people actually involved in Isabelle :P</p>",
        "id": 240925226,
        "sender_full_name": "IRC Bot",
        "timestamp": 1622545410
    },
    {
        "content": "<p>@<strong>int-e</strong>: And ended up picking larsh and you :P</p>",
        "id": 240925258,
        "sender_full_name": "IRC Bot",
        "timestamp": 1622545432
    },
    {
        "content": "<p>@<strong>aweinstock</strong>: win move 12</p>",
        "id": 245614328,
        "sender_full_name": "IRC Bot",
        "timestamp": 1626020227
    },
    {
        "content": "<p>@<strong>aweinstock</strong>: oops</p>",
        "id": 245614329,
        "sender_full_name": "IRC Bot",
        "timestamp": 1626020230
    },
    {
        "content": "<p>@<strong>int-e</strong>: /lose :-)</p>",
        "id": 245614333,
        "sender_full_name": "IRC Bot",
        "timestamp": 1626020241
    },
    {
        "content": "<p>@<strong>safinaskar</strong>: how to prove this?    (case f a of True ⇒ Some (a # b) | False ⇒ None) = Some s ⟹ a # b = s</p>",
        "id": 248550719,
        "sender_full_name": "IRC Bot",
        "timestamp": 1628206682
    },
    {
        "content": "<p>@<strong>pruvisto1</strong>: I would try `apply (auto split: option.splits)</p>",
        "id": 248553745,
        "sender_full_name": "IRC Bot",
        "timestamp": 1628209265
    },
    {
        "content": "<p>@<strong>pruvisto1</strong>: If you have a case expression over a datatype in a proof obligation, you pretty much always want to use the splits rules of the corresponding datatype</p>",
        "id": 248553776,
        "sender_full_name": "IRC Bot",
        "timestamp": 1628209300
    },
    {
        "content": "<p>@<strong>pruvisto1</strong>: uh, wait, in this case it's bool.splits</p>",
        "id": 248553789,
        "sender_full_name": "IRC Bot",
        "timestamp": 1628209319
    },
    {
        "content": "<p>@<strong>pruvisto1</strong>: why are you using a case expression on booleans anyway, instead of just an \"if\"?</p>",
        "id": 248553838,
        "sender_full_name": "IRC Bot",
        "timestamp": 1628209334
    },
    {
        "content": "<p>@<strong>pruvisto1</strong>: It's not wrong of course, but somewhat unusual</p>",
        "id": 248553842,
        "sender_full_name": "IRC Bot",
        "timestamp": 1628209340
    },
    {
        "content": "<p>@<strong>pruvisto1</strong>: the splitting rule for \"if\" is called if_splits</p>",
        "id": 248553849,
        "sender_full_name": "IRC Bot",
        "timestamp": 1628209348
    },
    {
        "content": "<p>@<strong>safinaskar</strong>: pruvisto1: thanks for answer</p>",
        "id": 248554187,
        "sender_full_name": "IRC Bot",
        "timestamp": 1628209690
    },
    {
        "content": "<p>@<strong>safinaskar</strong>: pruvisto1: i simply used \"try\" and then copied suggested proof to source</p>",
        "id": 248554195,
        "sender_full_name": "IRC Bot",
        "timestamp": 1628209713
    },
    {
        "content": "<p>@<strong>safinaskar</strong>: pruvisto1: is there a way to avoid copy? i. e. i want proof method which simply does same thing as \"try\"</p>",
        "id": 248554214,
        "sender_full_name": "IRC Bot",
        "timestamp": 1628209738
    },
    {
        "content": "<p>@<strong>pruvisto1</strong>: I don't know what you mean by that</p>",
        "id": 248554227,
        "sender_full_name": "IRC Bot",
        "timestamp": 1628209765
    },
    {
        "content": "<p>@<strong>pruvisto1</strong>: When \"try\" suggests something you can normally just click on it and it will copy it over</p>",
        "id": 248554231,
        "sender_full_name": "IRC Bot",
        "timestamp": 1628209779
    },
    {
        "content": "<p>@<strong>safinaskar</strong>: pruvisto1: yes, but then my source will contain this unreadable proof</p>",
        "id": 248554353,
        "sender_full_name": "IRC Bot",
        "timestamp": 1628209901
    },
    {
        "content": "<p>@<strong>safinaskar</strong>: pruvisto1: is there a way just to write something like \"try\" in my source? i don't want to have actual generated proof in my source</p>",
        "id": 248554405,
        "sender_full_name": "IRC Bot",
        "timestamp": 1628209931
    },
    {
        "content": "<p>@<strong>pruvisto1</strong>: uh, no</p>",
        "id": 248554641,
        "sender_full_name": "IRC Bot",
        "timestamp": 1628210186
    },
    {
        "content": "<p>@<strong>pruvisto1</strong>: that's probably a sledgehammer proof</p>",
        "id": 248554645,
        "sender_full_name": "IRC Bot",
        "timestamp": 1628210192
    },
    {
        "content": "<p>@<strong>pruvisto1</strong>: they tend to be something like \"apply (metis â€¦)\" or \"apply (smt â€¦)\" where the â€¦ is a list of facts</p>",
        "id": 248554654,
        "sender_full_name": "IRC Bot",
        "timestamp": 1628210208
    },
    {
        "content": "<p>@<strong>pruvisto1</strong>: they can get pretty big and ugly, that's why I try to avoid them</p>",
        "id": 248554674,
        "sender_full_name": "IRC Bot",
        "timestamp": 1628210235
    },
    {
        "content": "<p>@<strong>safinaskar</strong>: pruvisto1: ok, thanks a lot</p>",
        "id": 248554753,
        "sender_full_name": "IRC Bot",
        "timestamp": 1628210341
    },
    {
        "content": "<p>@<strong>safinaskar</strong>: is there a way to run two proof methods truly in parallel?</p>",
        "id": 248633506,
        "sender_full_name": "IRC Bot",
        "timestamp": 1628267212
    },
    {
        "content": "<p>@<strong>safinaskar</strong>: i can write \"by (auto|blast)\"</p>",
        "id": 248633529,
        "sender_full_name": "IRC Bot",
        "timestamp": 1628267223
    },
    {
        "content": "<p>@<strong>safinaskar</strong>: but it seems that this will run \"auto\" and if it fails, then blast</p>",
        "id": 248633556,
        "sender_full_name": "IRC Bot",
        "timestamp": 1628267235
    },
    {
        "content": "<p>@<strong>safinaskar</strong>: how to run them actually in parallel?</p>",
        "id": 248633572,
        "sender_full_name": "IRC Bot",
        "timestamp": 1628267242
    },
    {
        "content": "<p>@<strong>safinaskar</strong>: okey, maybe there is a way to run a proof method with a timeout?</p>",
        "id": 248633915,
        "sender_full_name": "IRC Bot",
        "timestamp": 1628267387
    },
    {
        "content": "<p>@<strong>safinaskar</strong>: i. e. is there a way to write \"by (auto|blast)\" such that \"auto\" is given 5 secs to terminate, and if it fails then \"blast\" starts?</p>",
        "id": 248634045,
        "sender_full_name": "IRC Bot",
        "timestamp": 1628267428
    },
    {
        "content": "<p>@<strong>pruvisto1</strong>: There's no such thing because that would ruin any chance of a reproducible build</p>",
        "id": 248634209,
        "sender_full_name": "IRC Bot",
        "timestamp": 1628267504
    },
    {
        "content": "<p>@<strong>pruvisto1</strong>: There is the stuff by Yutaka Nagashima: <a href=\"https://github.com/data61/PSL\">https://github.com/data61/PSL</a></p>",
        "id": 248634502,
        "sender_full_name": "IRC Bot",
        "timestamp": 1628267620
    },
    {
        "content": "<p>@<strong>pruvisto1</strong>: not sure if this runs in parallel but I think it does</p>",
        "id": 248634537,
        "sender_full_name": "IRC Bot",
        "timestamp": 1628267635
    },
    {
        "content": "<p>@<strong>pruvisto1</strong>: but I think this is intended more as a more advanced version of running \"try\", i.e. it finds a proof that you can then copypaste into your document</p>",
        "id": 248634622,
        "sender_full_name": "IRC Bot",
        "timestamp": 1628267662
    },
    {
        "content": "<p>@<strong>pruvisto1</strong>: I've never used it myself</p>",
        "id": 248634636,
        "sender_full_name": "IRC Bot",
        "timestamp": 1628267666
    },
    {
        "content": "<p>@<strong>safinaskar</strong>: pruvisto1: thanks</p>",
        "id": 248642001,
        "sender_full_name": "IRC Bot",
        "timestamp": 1628270889
    },
    {
        "content": "<p>@<strong>sthaan</strong>: hello :)</p>",
        "id": 252050540,
        "sender_full_name": "IRC Bot",
        "timestamp": 1630818070
    },
    {
        "content": "<p>@<strong>sthaan</strong>: is there a lexicographical order over finite sets in Isabelle?</p>",
        "id": 252050541,
        "sender_full_name": "IRC Bot",
        "timestamp": 1630818070
    },
    {
        "content": "<p>@<strong>sthaan</strong>: if no, how I can define an alternative \"≤\" order over \"nat set\" instead of the default subset relation \"⊆\"?</p>",
        "id": 252050542,
        "sender_full_name": "IRC Bot",
        "timestamp": 1630818070
    },
    {
        "content": "<p>@<strong>pruvisto</strong>: You can either to a clone of the set type and instantiate the \"order\" type class there, or you can interpret the \"order_class\" locale (I think that's what it's called) for your \"â‰¤\" relation.</p>",
        "id": 252085229,
        "sender_full_name": "IRC Bot",
        "timestamp": 1630857783
    },
    {
        "content": "<p>@<strong>pruvisto</strong>: The former is always a bit annoying to do.</p>",
        "id": 252085237,
        "sender_full_name": "IRC Bot",
        "timestamp": 1630857795
    },
    {
        "content": "<p>@<strong>pruvisto</strong>: The latter is nice but does not allow you to actually write \"≤\" (you'll have to come up with some notation of your own, e.g. ≤' or ≤ with something in the index</p>",
        "id": 252085254,
        "sender_full_name": "IRC Bot",
        "timestamp": 1630857826
    },
    {
        "content": "<p>@<strong>pruvisto</strong>: It also doesn't work with constants that require the \"order\" sort, since these will still take the \"â‰¤\" from the type class (which is the subset relation)</p>",
        "id": 252085315,
        "sender_full_name": "IRC Bot",
        "timestamp": 1630857869
    },
    {
        "content": "<p>@<strong>pruvisto</strong>: But usually the \"locale interpretation\" approach works pretty well for orderings</p>",
        "id": 252085326,
        "sender_full_name": "IRC Bot",
        "timestamp": 1630857886
    },
    {
        "content": "<p>@<strong>pruvisto</strong>: Something like that is e.g. done for multisets, see ~~/src/HOL/Library/Multiset.thy, search for \"global_interpretation subset_mset\"</p>",
        "id": 252085428,
        "sender_full_name": "IRC Bot",
        "timestamp": 1630858000
    },
    {
        "content": "<p>@<strong>pruvisto</strong>: Or also here, where I define a lexicographic ordering on the complex numbers: <a href=\"https://www.isa-afp.org/browser_info/current/AFP/Hermite_Lindemann/Complex_Lexorder.html\">https://www.isa-afp.org/browser_info/current/AFP/Hermite_Lindemann/Complex_Lexorder.html</a></p>",
        "id": 252085442,
        "sender_full_name": "IRC Bot",
        "timestamp": 1630858024
    },
    {
        "content": "<p>@<strong>sthaan</strong>: pruvisto‎, thank you very much for your detailed answer</p>",
        "id": 252248422,
        "sender_full_name": "IRC Bot",
        "timestamp": 1630987725
    },
    {
        "content": "<p>@<strong>zfnmxt</strong>: Is there any way to reverse an equality in Isabelle? That is, if I have some <code>lemma foo: \"left = right\"</code> can I get a <code>lemma blah: \"right = left\"</code> for free?</p>",
        "id": 252393985,
        "sender_full_name": "IRC Bot",
        "timestamp": 1631064606
    },
    {
        "content": "<p>@<strong>sthaan</strong>: zfnmxt: foo[symmetric]</p>",
        "id": 252409133,
        "sender_full_name": "IRC Bot",
        "timestamp": 1631079581
    },
    {
        "content": "<p>@<strong>zfnmxt</strong>: sthaan:  Thanks. :)</p>",
        "id": 252434655,
        "sender_full_name": "IRC Bot",
        "timestamp": 1631095456
    },
    {
        "content": "<p>@<strong>zfnmxt</strong>: I'm trying to prove <a href=\"https://gist.github.com/zfnmxt/86e90b4b310703f72158d164d33bf0c4\">https://gist.github.com/zfnmxt/86e90b4b310703f72158d164d33bf0c4</a> , is there any simplification rule that lets you move a function inside the bodies of an f? I.e. <code>f (if b then e1 else e2) = if b then f e1 else f e2</code>? And I tried searching for such a rule, but I just got  syntax errors trying things like \"if _ then _ else _\".</p>",
        "id": 252474212,
        "sender_full_name": "IRC Bot",
        "timestamp": 1631112735
    },
    {
        "content": "<p>@<strong>zfnmxt</strong>: s/of an f/of an if-then-else expression</p>",
        "id": 252474281,
        "sender_full_name": "IRC Bot",
        "timestamp": 1631112758
    },
    {
        "content": "<p>@<strong>zfnmxt</strong>: Oh, looks like <code>if_distrib</code> is what I was looking for, but I was only able to find it in a bit of a roundabout way. How can I more effectively search for this sort of thing?</p>",
        "id": 252476612,
        "sender_full_name": "IRC Bot",
        "timestamp": 1631113419
    },
    {
        "content": "<p>@<strong>sthaan</strong>: zfnmxt‎, you just forgot a bracket:</p>",
        "id": 252479540,
        "sender_full_name": "IRC Bot",
        "timestamp": 1631114363
    },
    {
        "content": "<p>@<strong>sthaan</strong>: <a href=\"https://upload.wiuwiu.de/share.php/1ec724eb-621c-497b-9636-c42c1a9292bd/20210909_00h19m31s_grim.png\">https://upload.wiuwiu.de/share.php/1ec724eb-621c-497b-9636-c42c1a9292bd/20210909_00h19m31s_grim.png</a></p>\n<div class=\"message_inline_image\"><a href=\"https://upload.wiuwiu.de/share.php/1ec724eb-621c-497b-9636-c42c1a9292bd/20210909_00h19m31s_grim.png\"><img src=\"https://uploads.zulipusercontent.net/f5e260dfcbff2af3dfe0f6e359ee5acfac209be8/68747470733a2f2f75706c6f61642e7769757769752e64652f73686172652e7068702f31656337323465622d363231632d343937622d393633362d6334326331613932393262642f32303231303930395f30306831396d3331735f6772696d2e706e67\"></a></div>",
        "id": 252479587,
        "sender_full_name": "IRC Bot",
        "timestamp": 1631114379
    },
    {
        "content": "<p>@<strong>zfnmxt</strong>: sthaan:  Ah, I see, thank you. :)</p>",
        "id": 252479732,
        "sender_full_name": "IRC Bot",
        "timestamp": 1631114414
    },
    {
        "content": "<p>@<strong>zfnmxt</strong>: One more question! I find myself constantly writing <code>simp only: _some_rule</code>. Is there any sort of shorthand for this thing where you're doing a rewrite with exactly one rule?</p>",
        "id": 252480661,
        "sender_full_name": "IRC Bot",
        "timestamp": 1631114725
    },
    {
        "content": "<p>subst _some_rule_ might help</p>",
        "id": 252480880,
        "sender_full_name": "Simon Roßkopf",
        "timestamp": 1631114794
    },
    {
        "content": "<p>@<strong>pruvisto</strong>: That does exactly one step</p>",
        "id": 252481133,
        "sender_full_name": "IRC Bot",
        "timestamp": 1631114898
    },
    {
        "content": "<p>@<strong>zfnmxt</strong>: Perfect, that's what I wanted. Thanks.</p>",
        "id": 252481196,
        "sender_full_name": "IRC Bot",
        "timestamp": 1631114928
    },
    {
        "content": "<p>@<strong>pruvisto</strong>: And it simply adds the preconditions as new goals</p>",
        "id": 252481224,
        "sender_full_name": "IRC Bot",
        "timestamp": 1631114940
    },
    {
        "content": "<p>@<strong>pruvisto</strong>: Whereas simp tries to solve them and fails if it can't</p>",
        "id": 252481275,
        "sender_full_name": "IRC Bot",
        "timestamp": 1631114959
    },
    {
        "content": "<p>@<strong>zfnmxt</strong>: Is there a good reference for everything you can do in an apply script/Isar proof? I've been reading \"Programming and Proving in Isabelle/HOL\" but all the information is a bit scattered through the prose.</p>",
        "id": 252481339,
        "sender_full_name": "IRC Bot",
        "timestamp": 1631114988
    },
    {
        "content": "<p>@<strong>pruvisto</strong>: Now that you need to supply additional parameters to subst if you want to rewrite in the assumptions or control precisely where in the term the rewrite happens</p>",
        "id": 252481438,
        "sender_full_name": "IRC Bot",
        "timestamp": 1631115014
    },
    {
        "content": "<p>@<strong>pruvisto</strong>: there's also the \"rewrite\" method somewhere in the library that allows for more sophisticated things</p>",
        "id": 252481546,
        "sender_full_name": "IRC Bot",
        "timestamp": 1631115061
    },
    {
        "content": "<p>@<strong>pruvisto</strong>: and there's \"unfolding\" which acts something like a \"simp only: \"</p>",
        "id": 252481564,
        "sender_full_name": "IRC Bot",
        "timestamp": 1631115073
    },
    {
        "content": "<p>@<strong>pruvisto</strong>: (mostly used for unfolding definitions)</p>",
        "id": 252481575,
        "sender_full_name": "IRC Bot",
        "timestamp": 1631115080
    },
    {
        "content": "<p>@<strong>pruvisto</strong>: zfnmxt: There's the Isabelle/Isar reference manual in the Isabelle documentation</p>",
        "id": 252481614,
        "sender_full_name": "IRC Bot",
        "timestamp": 1631115095
    },
    {
        "content": "<p>@<strong>pruvisto</strong>: There's also <a href=\"https://tips.isabelle.systems\">https://tips.isabelle.systems</a></p>",
        "id": 252481673,
        "sender_full_name": "IRC Bot",
        "timestamp": 1631115119
    },
    {
        "content": "<p>@<strong>pruvisto</strong>: e.g. <a href=\"https://isabelle.systems/cookbook/src/proofs/methods/\">https://isabelle.systems/cookbook/src/proofs/methods/</a></p>",
        "id": 252481749,
        "sender_full_name": "IRC Bot",
        "timestamp": 1631115132
    },
    {
        "content": "<p>@<strong>zfnmxt</strong>: Aha, that's also helpful, thanks.</p>",
        "id": 252481867,
        "sender_full_name": "IRC Bot",
        "timestamp": 1631115182
    },
    {
        "content": "<p>@<strong>zfnmxt</strong>: One more question! <a href=\"https://gist.github.com/zfnmxt/d668599b6dd870499b59dd0653ea4654\">https://gist.github.com/zfnmxt/d668599b6dd870499b59dd0653ea4654</a> Why does the goal try to move the equality into the bodies of the if-then-else expression?</p>",
        "id": 252485003,
        "sender_full_name": "IRC Bot",
        "timestamp": 1631116350
    },
    {
        "content": "<p>@<strong>sthaan</strong>: zfnmxt‎, try <code>rule if_distrib</code> instead of <code>simp only: if_distrib</code></p>",
        "id": 252485696,
        "sender_full_name": "IRC Bot",
        "timestamp": 1631116587
    },
    {
        "content": "<p>@<strong>zfnmxt</strong>: sthaan:  What exactly does <code>rule</code> do here?</p>",
        "id": 252486217,
        "sender_full_name": "IRC Bot",
        "timestamp": 1631116778
    },
    {
        "content": "<p>@<strong>sthaan</strong>: sadly, I do not know why it works, I'm just a beginner myself</p>",
        "id": 252486915,
        "sender_full_name": "IRC Bot",
        "timestamp": 1631117001
    },
    {
        "content": "<p>@<strong>zfnmxt</strong>: Is there any theorem that says something like <code>A &lt;===&gt; B  =&gt; A = B</code>? I'm trying to prove something similar to <code>A U B = B U A</code> using only rules, but it's unclear to me how to manipulate the equality to do so. <code>refl</code> and <code>subst</code> don't seem particularly useful here.</p>",
        "id": 253091525,
        "sender_full_name": "IRC Bot",
        "timestamp": 1631540723
    },
    {
        "content": "<p>@<strong>zfnmxt</strong>: Err, I realize now that <code>A &lt;===&gt; B =&gt; A = B?</code> is nonsensical. But my question of how to prove equalities with just rules remains :)</p>",
        "id": 253091714,
        "sender_full_name": "IRC Bot",
        "timestamp": 1631540785
    },
    {
        "content": "<p>@<strong>int-e</strong>: zfnmxt: what is &lt;===&gt;? There's &lt;--&gt; or âŸ·, but that's an abbreviation for =.</p>",
        "id": 253092087,
        "sender_full_name": "IRC Bot",
        "timestamp": 1631540926
    },
    {
        "content": "<p>@<strong>zfnmxt</strong>: int-e: Just ignore that bit of my question entirely, I confused myself. I just want to understand how to prove equalities like <code>A U B = B U A</code> via rules alone.</p>",
        "id": 253092334,
        "sender_full_name": "IRC Bot",
        "timestamp": 1631541017
    },
    {
        "content": "<p>@<strong>zfnmxt</strong>: Oh, I guess maybe I should just use <code>set_eq</code>.</p>",
        "id": 253092966,
        "sender_full_name": "IRC Bot",
        "timestamp": 1631541253
    },
    {
        "content": "<p>@<strong>zfnmxt</strong>: <code>set_eqI</code>, sorry.</p>",
        "id": 253093092,
        "sender_full_name": "IRC Bot",
        "timestamp": 1631541304
    },
    {
        "content": "<p>@<strong>int-e</strong>: yep</p>",
        "id": 253093353,
        "sender_full_name": "IRC Bot",
        "timestamp": 1631541405
    },
    {
        "content": "<p>@<strong>zfnmxt</strong>: Why is &lt;--&gt; an abbreviation for =?</p>",
        "id": 253093424,
        "sender_full_name": "IRC Bot",
        "timestamp": 1631541434
    },
    {
        "content": "<p>@<strong>int-e</strong>: Because it <em>is</em> equality on bools. Distinguishing between those notions would hinder rewriting.</p>",
        "id": 253093564,
        "sender_full_name": "IRC Bot",
        "timestamp": 1631541483
    },
    {
        "content": "<p>@<strong>zfnmxt</strong>: Is there a rule that says <code>[A -&gt; B; B -&gt; A] =&gt; (A &lt;-&gt; B)</code>?</p>",
        "id": 253093679,
        "sender_full_name": "IRC Bot",
        "timestamp": 1631541528
    },
    {
        "content": "<p>@<strong>int-e</strong>: Maybe? iffI is more useful, beecause it gives you meta implications directly</p>",
        "id": 253093815,
        "sender_full_name": "IRC Bot",
        "timestamp": 1631541584
    },
    {
        "content": "<p>@<strong>zfnmxt</strong>: Ah! <code>iffI</code> is exactly what I want, I think :)</p>",
        "id": 253094004,
        "sender_full_name": "IRC Bot",
        "timestamp": 1631541633
    },
    {
        "content": "<p>@<strong>int-e</strong>: There's also iff_conv_conj_imp for rewriting. Which I found by putting \"_ ⟶ _\" \"(_ ⟷ _) = (_ ∧ _)\" into the \"find theorems\" panel</p>",
        "id": 253094133,
        "sender_full_name": "IRC Bot",
        "timestamp": 1631541674
    },
    {
        "content": "<p>@<strong>zfnmxt</strong>: Is it possible to search for \"substrings\" via the query panel. E.g., \"⟷\" doesn't work and requires the addition of wildcards and such.</p>",
        "id": 253094373,
        "sender_full_name": "IRC Bot",
        "timestamp": 1631541751
    },
    {
        "content": "<p>@<strong>zfnmxt</strong>: Oh, what you wrote is a union of queries. I didn't know you could do that. Neat.</p>",
        "id": 253094531,
        "sender_full_name": "IRC Bot",
        "timestamp": 1631541802
    },
    {
        "content": "<p>@<strong>zfnmxt</strong>: How can you explicitly extend the set of intro (or elim) rules used by <code>proof</code> (when no arguments are supplied)?</p>",
        "id": 253133796,
        "sender_full_name": "IRC Bot",
        "timestamp": 1631556364
    },
    {
        "content": "<p>@<strong>sthaan</strong>: zfnmxt‎, I think by declaring your facts <code>[intro]</code> or <code>[elim]</code></p>",
        "id": 253134577,
        "sender_full_name": "IRC Bot",
        "timestamp": 1631556702
    },
    {
        "content": "<p>@<strong>zfnmxt</strong>: Is it not possible to add them afterwards? (And also remove them after?) I saw the ability to do so with simplification rules in one of the tutorials/manuals somewhere, so I figured it'd extend to intro/elim rules.</p>",
        "id": 253134972,
        "sender_full_name": "IRC Bot",
        "timestamp": 1631556877
    },
    {
        "content": "<p>@<strong>sthaan</strong>: declare your_fact[intro]</p>",
        "id": 253135641,
        "sender_full_name": "IRC Bot",
        "timestamp": 1631557172
    },
    {
        "content": "<p>@<strong>zfnmxt</strong>: sthaan: Ah, I misunderstood. I see. Thank you. :)</p>",
        "id": 253135824,
        "sender_full_name": "IRC Bot",
        "timestamp": 1631557242
    },
    {
        "content": "<p>@<strong>zfnmxt</strong>: Looks like <code>declare your_face[rule del]</code> removes it.</p>",
        "id": 253136554,
        "sender_full_name": "IRC Bot",
        "timestamp": 1631557535
    },
    {
        "content": "<p>@<strong>zfnmxt</strong>: s/face/fact</p>",
        "id": 253136670,
        "sender_full_name": "IRC Bot",
        "timestamp": 1631557563
    },
    {
        "content": "<p>@<strong>sthaan</strong>: Let's say I have a record type and some restrictions on it, like this:</p>",
        "id": 254320268,
        "sender_full_name": "IRC Bot",
        "timestamp": 1632291501
    },
    {
        "content": "<p>@<strong>sthaan</strong>: ```</p>",
        "id": 254320269,
        "sender_full_name": "IRC Bot",
        "timestamp": 1632291501
    },
    {
        "content": "<p>@<strong>sthaan</strong>: I now want to extend the record and add additional assumptions as well:</p>",
        "id": 254320270,
        "sender_full_name": "IRC Bot",
        "timestamp": 1632291501
    },
    {
        "content": "<p>@<strong>sthaan</strong>: locale wf_point =</p>",
        "id": 254320271,
        "sender_full_name": "IRC Bot",
        "timestamp": 1632291501
    },
    {
        "content": "<p>@<strong>sthaan</strong>:   fixes pt :: point (structure)</p>",
        "id": 254320272,
        "sender_full_name": "IRC Bot",
        "timestamp": 1632291502
    },
    {
        "content": "<p>@<strong>sthaan</strong>:   assumes \"x pt ≤ 100\" \"y pt ≤ 100\"</p>",
        "id": 254320273,
        "sender_full_name": "IRC Bot",
        "timestamp": 1632291502
    },
    {
        "content": "<p>@<strong>sthaan</strong>: ```</p>",
        "id": 254320275,
        "sender_full_name": "IRC Bot",
        "timestamp": 1632291502
    },
    {
        "content": "<p>@<strong>sthaan</strong>: record point = x :: nat y ::nat</p>",
        "id": 254320276,
        "sender_full_name": "IRC Bot",
        "timestamp": 1632291502
    },
    {
        "content": "<p>@<strong>sthaan</strong>: ```</p>",
        "id": 254320277,
        "sender_full_name": "IRC Bot",
        "timestamp": 1632291502
    },
    {
        "content": "<p>@<strong>sthaan</strong>: datatype color = Brown | Blue | Violet | Purple | Green</p>",
        "id": 254320278,
        "sender_full_name": "IRC Bot",
        "timestamp": 1632291502
    },
    {
        "content": "<p>@<strong>sthaan</strong>: record cpoint = point + col :: color</p>",
        "id": 254320279,
        "sender_full_name": "IRC Bot",
        "timestamp": 1632291503
    },
    {
        "content": "<p>@<strong>sthaan</strong>: locale wf_cpoint =</p>",
        "id": 254320280,
        "sender_full_name": "IRC Bot",
        "timestamp": 1632291503
    },
    {
        "content": "<p>@<strong>pruvisto</strong>: sthaan: Bit of a late response, but did you sort out your problem?</p>",
        "id": 257502530,
        "sender_full_name": "IRC Bot",
        "timestamp": 1634202130
    },
    {
        "content": "<p>@<strong>pruvisto</strong>: I don't even see what your problem is – did your message perhaps get cut off?</p>",
        "id": 257502544,
        "sender_full_name": "IRC Bot",
        "timestamp": 1634202138
    },
    {
        "content": "<p>@<strong>sthaan</strong>: pruvisto‎, looking at the logs it seems my message indeed was cut off after 11 lines.</p>",
        "id": 257503404,
        "sender_full_name": "IRC Bot",
        "timestamp": 1634202608
    },
    {
        "content": "<p>@<strong>sthaan</strong>: here is the full question:</p>",
        "id": 257503406,
        "sender_full_name": "IRC Bot",
        "timestamp": 1634202608
    },
    {
        "content": "<p>@<strong>sthaan</strong>: <a href=\"https://upload.wiuwiu.de/share.php/40b68d9a-a37f-4bae-b59f-4e9d44b16b29/message.txt\">https://upload.wiuwiu.de/share.php/40b68d9a-a37f-4bae-b59f-4e9d44b16b29/message.txt</a></p>",
        "id": 257503415,
        "sender_full_name": "IRC Bot",
        "timestamp": 1634202614
    },
    {
        "content": "<p>@<strong>pruvisto</strong>: Isabelle/HOL does not have subtyping</p>",
        "id": 257503525,
        "sender_full_name": "IRC Bot",
        "timestamp": 1634202691
    },
    {
        "content": "<p>@<strong>pruvisto</strong>: So if you have something that wants a <code>point</code>, you can't give it a <code>cpoint</code>. That's a type error.</p>",
        "id": 257503556,
        "sender_full_name": "IRC Bot",
        "timestamp": 1634202717
    },
    {
        "content": "<p>@<strong>pruvisto</strong>: Well, it does have… what is that called… parametric subtyping?</p>",
        "id": 257503630,
        "sender_full_name": "IRC Bot",
        "timestamp": 1634202745
    },
    {
        "content": "<p>@<strong>pruvisto</strong>: So e.g. <code>nat list</code> is a subtype of <code>'a list</code></p>",
        "id": 257503653,
        "sender_full_name": "IRC Bot",
        "timestamp": 1634202760
    },
    {
        "content": "<p>@<strong>pruvisto</strong>: and this is how record extension works in Isabelle/HOL</p>",
        "id": 257503663,
        "sender_full_name": "IRC Bot",
        "timestamp": 1634202766
    },
    {
        "content": "<p>@<strong>pruvisto</strong>: When you define your <code>point</code> record, it actually defines a record <code>'a :: point_scheme</code> which has all the fields of your record plus an additional field <code>more :: 'a</code></p>",
        "id": 257503761,
        "sender_full_name": "IRC Bot",
        "timestamp": 1634202822
    },
    {
        "content": "<p>@<strong>pruvisto</strong>: And then when you extend it to<code>cpoint</code>, it puts the new stuff (and another <code>more</code> field) into the <code>more</code> of the <code>point</code></p>",
        "id": 257503838,
        "sender_full_name": "IRC Bot",
        "timestamp": 1634202845
    },
    {
        "content": "<p>@<strong>pruvisto</strong>: So with this knowledge, I think the way to fix your locales is to do <code>fixes pt :: \"'a point_scheme\"</code></p>",
        "id": 257503880,
        "sender_full_name": "IRC Bot",
        "timestamp": 1634202869
    },
    {
        "content": "<p>@<strong>pruvisto</strong>: Where the <code>'a</code> has to be a fresh type variable (the name doesn't matter, Isabelle will normalise it anyway)</p>",
        "id": 257503923,
        "sender_full_name": "IRC Bot",
        "timestamp": 1634202898
    },
    {
        "content": "<p>@<strong>sthaan</strong>: pruvisto‎, thanks this solves my problem I think. Here's my example file, if anyone is interested:</p>",
        "id": 257531567,
        "sender_full_name": "IRC Bot",
        "timestamp": 1634216990
    },
    {
        "content": "<p>@<strong>sthaan</strong>: <a href=\"https://upload.wiuwiu.de/share.php/cbe2e5b3-40e2-4521-9d26-88bd61ba2b02/Records.thy\">https://upload.wiuwiu.de/share.php/cbe2e5b3-40e2-4521-9d26-88bd61ba2b02/Records.thy</a></p>",
        "id": 257531625,
        "sender_full_name": "IRC Bot",
        "timestamp": 1634217003
    },
    {
        "content": "<p>@<strong>suhr[m]</strong>: I want to prove the following lemma <code>split_nat: \"\\&lt;exists&gt; x y. (n::nat) = x + y \\&lt;and&gt; (x = y \\&lt;or&gt; y = x + 1)\"</code></p>",
        "id": 258871560,
        "sender_full_name": "IRC Bot",
        "timestamp": 1635071444
    },
    {
        "content": "<p>@<strong>suhr[m]</strong>: Using <code>proof(intro exI)</code> gives me <code>n = ?x + ?y1 ∧ (?x = ?y1 ∨ ?y1 = ?x + 1)</code> goal, but I don't know how to substitute <code>x = n div 2</code> and <code>y = n - x</code> and prove the new goal.</p>",
        "id": 258871625,
        "sender_full_name": "IRC Bot",
        "timestamp": 1635071543
    },
    {
        "content": "<p>@<strong>suhr[m]</strong>: I'm new to Isar proofs as well. Things used to be much more straightforward in dependently typed languages...</p>",
        "id": 258871646,
        "sender_full_name": "IRC Bot",
        "timestamp": 1635071616
    },
    {
        "content": "<p>@<strong>sthaan</strong>: suhr, in this case your goal can be solved with <code>by presburger</code></p>",
        "id": 258872208,
        "sender_full_name": "IRC Bot",
        "timestamp": 1635072597
    },
    {
        "content": "<p>@<strong>suhr[m]</strong>: Cool. But it's a lemma for an exercise in prog-prove, so this kind of proof is probably a bit overkill.</p>",
        "id": 258872284,
        "sender_full_name": "IRC Bot",
        "timestamp": 1635072698
    },
    {
        "content": "<p>@<strong>suhr[m]</strong>: Also, I still want to lean how to use structured proofs in Isabelle.</p>",
        "id": 258872329,
        "sender_full_name": "IRC Bot",
        "timestamp": 1635072727
    },
    {
        "content": "<p>@<strong>sthaan</strong>: you could also do it like this</p>",
        "id": 258872478,
        "sender_full_name": "IRC Bot",
        "timestamp": 1635072913
    },
    {
        "content": "<p>@<strong>sthaan</strong>: ```isabelle</p>",
        "id": 258872479,
        "sender_full_name": "IRC Bot",
        "timestamp": 1635072913
    },
    {
        "content": "<p>@<strong>sthaan</strong>: proof (intro exI)</p>",
        "id": 258872480,
        "sender_full_name": "IRC Bot",
        "timestamp": 1635072913
    },
    {
        "content": "<p>@<strong>sthaan</strong>: lemma split_nat: \"\\&lt;exists&gt; x y. (n::nat) = x + y \\&lt;and&gt; (x = y \\&lt;or&gt; y = x + 1)\"</p>",
        "id": 258872481,
        "sender_full_name": "IRC Bot",
        "timestamp": 1635072913
    },
    {
        "content": "<p>@<strong>sthaan</strong>:   let ?x = \"n div 2\"</p>",
        "id": 258872482,
        "sender_full_name": "IRC Bot",
        "timestamp": 1635072913
    },
    {
        "content": "<p>@<strong>sthaan</strong>:   let ?y1 = \"n - ?x\"</p>",
        "id": 258872483,
        "sender_full_name": "IRC Bot",
        "timestamp": 1635072913
    },
    {
        "content": "<p>@<strong>sthaan</strong>:   show \"n = ?x + ?y1 ∧ (?x = ?y1 ∨ ?y1 = ?x + 1)\" by auto</p>",
        "id": 258872484,
        "sender_full_name": "IRC Bot",
        "timestamp": 1635072914
    },
    {
        "content": "<p>@<strong>sthaan</strong>: qed</p>",
        "id": 258872485,
        "sender_full_name": "IRC Bot",
        "timestamp": 1635072914
    },
    {
        "content": "<p>@<strong>sthaan</strong>: ```</p>",
        "id": 258872486,
        "sender_full_name": "IRC Bot",
        "timestamp": 1635072915
    },
    {
        "content": "<p>@<strong>suhr[m]</strong>: Thanks.</p>",
        "id": 258872860,
        "sender_full_name": "IRC Bot",
        "timestamp": 1635073304
    },
    {
        "content": "<p>@<strong>suhr[m]</strong>: So even after let's, Isabelle shows the goal as <code>n = ?x + ?y1 ∧ (?x = ?y1 ∨ ?y1 = ?x + 1)</code>.</p>",
        "id": 258872914,
        "sender_full_name": "IRC Bot",
        "timestamp": 1635073358
    },
    {
        "content": "<p>@<strong>suhr[m]</strong>: And only after <code>show</code> everything is substituted.</p>",
        "id": 258872930,
        "sender_full_name": "IRC Bot",
        "timestamp": 1635073399
    },
    {
        "content": "<p>@<strong>suhr[m]</strong>: Well, I still have a problem applying this lemma.</p>",
        "id": 258873511,
        "sender_full_name": "IRC Bot",
        "timestamp": 1635074087
    },
    {
        "content": "<p>@<strong>suhr[m]</strong>: sent a code block: <a href=\"https://libera.ems.host/_matrix/media/r0/download/libera.chat/dd1421bf9b8e5fbf2c2bccfab0b172249dbe4582\">https://libera.ems.host/_matrix/media/r0/download/libera.chat/dd1421bf9b8e5fbf2c2bccfab0b172249dbe4582</a></p>",
        "id": 258873519,
        "sender_full_name": "IRC Bot",
        "timestamp": 1635074104
    },
    {
        "content": "<p>@<strong>suhr[m]</strong>: There's an error at <code>auto</code> for some reason.</p>",
        "id": 258873533,
        "sender_full_name": "IRC Bot",
        "timestamp": 1635074136
    },
    {
        "content": "<p>@<strong>suhr[m]</strong>: sent a code block: <a href=\"https://libera.ems.host/_matrix/media/r0/download/libera.chat/814bc07ed6459992521a964c09d87863018f1706\">https://libera.ems.host/_matrix/media/r0/download/libera.chat/814bc07ed6459992521a964c09d87863018f1706</a></p>",
        "id": 258874524,
        "sender_full_name": "IRC Bot",
        "timestamp": 1635075615
    },
    {
        "content": "<p>@<strong>suhr[m]</strong>: So close, and yet I still can't complete the goal because of ∃.</p>",
        "id": 258874602,
        "sender_full_name": "IRC Bot",
        "timestamp": 1635075744
    },
    {
        "content": "<p>@<strong>suhr[m]</strong>: If I replace <code>have</code> by show, I get <code>Result contains obtained parameters: ly</code></p>",
        "id": 258874613,
        "sender_full_name": "IRC Bot",
        "timestamp": 1635075798
    },
    {
        "content": "<p>@<strong>suhr[m]</strong>: Removing <code>(intro exI)</code> and adding <code>show ?thesis by blast</code> fixes the problem.</p>",
        "id": 258874728,
        "sender_full_name": "IRC Bot",
        "timestamp": 1635075981
    },
    {
        "content": "<p>@<strong>pruvisto</strong>: &lt;suhr[m]&gt; \"And only after <code>show</code> everything...\" &lt;- Yes, the <code>let</code> things are unnecessary</p>",
        "id": 258895685,
        "sender_full_name": "IRC Bot",
        "timestamp": 1635106029
    },
    {
        "content": "<p>@<strong>pruvisto</strong>: they only introduce an abbreviation</p>",
        "id": 258895688,
        "sender_full_name": "IRC Bot",
        "timestamp": 1635106034
    },
    {
        "content": "<p>@<strong>pruvisto</strong>: When you do a <code>intro exI</code> or <code>rule exI</code>, you get schematic variables in your goal. The standard way to instantiate these is with a <code>show</code> command.</p>",
        "id": 258895698,
        "sender_full_name": "IRC Bot",
        "timestamp": 1635106060
    },
    {
        "content": "<p>@<strong>pruvisto</strong>: You can also do something like <code>proof (rule exI[of _ \"take ly xs\"], rule exI[of _ \"drop ly xs\"])</code></p>",
        "id": 258895766,
        "sender_full_name": "IRC Bot",
        "timestamp": 1635106099
    },
    {
        "content": "<p>@<strong>pruvisto</strong>: And the thing you mentioned last is also a common pattern:</p>",
        "id": 258895776,
        "sender_full_name": "IRC Bot",
        "timestamp": 1635106124
    },
    {
        "content": "<p>@<strong>pruvisto</strong>: If your goal is <code>∃x y. P x y</code>, you can just prove <code>P x0 y0</code> for some concrete witnesses <code>x0</code> and <code>y0</code> and then show your actual goal with something like <code>by blast</code></p>",
        "id": 258895818,
        "sender_full_name": "IRC Bot",
        "timestamp": 1635106183
    },
    {
        "content": "<p>@<strong>pruvisto</strong>: I also made a <code>inst_existentials</code> tactic once that does essentially the same as these <code>rule exI[of _ foo]</code> I mentioned above for several variables at once and is a bit nicer to use, but it's not really in the standard set of tactics available in the standard distribution</p>",
        "id": 258895888,
        "sender_full_name": "IRC Bot",
        "timestamp": 1635106232
    },
    {
        "content": "<p>@<strong>sthaan</strong>: I'm getting a lot of typing errors like this lately</p>",
        "id": 260561609,
        "sender_full_name": "IRC Bot",
        "timestamp": 1636273560
    },
    {
        "content": "<p>@<strong>sthaan</strong>: <a href=\"https://upload.wiuwiu.de/share.php/945c7529-77a9-47aa-ac38-e69e1468eeaa/20211107_09h24m16s_grim.png\">https://upload.wiuwiu.de/share.php/945c7529-77a9-47aa-ac38-e69e1468eeaa/20211107_09h24m16s_grim.png</a></p>\n<div class=\"message_inline_image\"><a href=\"https://upload.wiuwiu.de/share.php/945c7529-77a9-47aa-ac38-e69e1468eeaa/20211107_09h24m16s_grim.png\"><img src=\"https://uploads.zulipusercontent.net/4788e9378eff7d378bd27faa348b52b37a377c6c/68747470733a2f2f75706c6f61642e7769757769752e64652f73686172652e7068702f39343563373532392d373761392d343761612d616333382d6536396531343638656561612f32303231313130375f30396832346d3136735f6772696d2e706e67\"></a></div>",
        "id": 260561648,
        "sender_full_name": "IRC Bot",
        "timestamp": 1636273567
    },
    {
        "content": "<p>@<strong>sthaan</strong>: is there any way to see what type for <code>M</code> is expected here?</p>",
        "id": 260561680,
        "sender_full_name": "IRC Bot",
        "timestamp": 1636273662
    },
    {
        "content": "<p>@<strong>sthaan</strong>: it's Ctrl-Mouseover :)</p>",
        "id": 260563701,
        "sender_full_name": "IRC Bot",
        "timestamp": 1636276803
    },
    {
        "content": "<p>@<strong>pruvisto</strong>: yup</p>",
        "id": 260627566,
        "sender_full_name": "IRC Bot",
        "timestamp": 1636360975
    },
    {
        "content": "<p>@<strong>pruvisto</strong>: Another thing I occasionally do is <code>using [[unify_trace_failure]]</code></p>",
        "id": 260627600,
        "sender_full_name": "IRC Bot",
        "timestamp": 1636360994
    },
    {
        "content": "<p>@<strong>pruvisto</strong>: that shows you where exactly the unification fails</p>",
        "id": 260627615,
        "sender_full_name": "IRC Bot",
        "timestamp": 1636361004
    },
    {
        "content": "<p>@<strong>pruvisto</strong>: can be a life saver if there's something subtle going on, like polymorphism</p>",
        "id": 260627661,
        "sender_full_name": "IRC Bot",
        "timestamp": 1636361036
    },
    {
        "content": "<p>@<strong>pruvisto</strong>: or a big term where the only difference is that in one place there's a y instead of an x</p>",
        "id": 260627726,
        "sender_full_name": "IRC Bot",
        "timestamp": 1636361057
    },
    {
        "content": "<p>@<strong>pruvisto</strong>: or a bound variable x instead of a free variable x</p>",
        "id": 260627740,
        "sender_full_name": "IRC Bot",
        "timestamp": 1636361066
    },
    {
        "content": "<p>@<strong>pruvisto</strong>: Wait, in what context are you working on Turing machines?</p>",
        "id": 260627791,
        "sender_full_name": "IRC Bot",
        "timestamp": 1636361093
    },
    {
        "content": "<p>@<strong>sthaan</strong>: pruvisto: thanks, I will try it out next time :)</p>",
        "id": 260634686,
        "sender_full_name": "IRC Bot",
        "timestamp": 1636365033
    },
    {
        "content": "<p>@<strong>sthaan</strong>: we are trying to formalize a paper in complexity theory</p>",
        "id": 260634945,
        "sender_full_name": "IRC Bot",
        "timestamp": 1636365184
    },
    {
        "content": "<p>@<strong>pruvisto</strong>: Who's \"we\"?</p>",
        "id": 260635195,
        "sender_full_name": "IRC Bot",
        "timestamp": 1636365345
    },
    {
        "content": "<p>@<strong>sthaan</strong>: Guest6716 and me :)</p>",
        "id": 260635437,
        "sender_full_name": "IRC Bot",
        "timestamp": 1636365480
    },
    {
        "content": "<p>@<strong>pruvisto</strong>: And are you students? Researchers? Sorry, just always curious when people do stuff in Isabelle.</p>",
        "id": 260635739,
        "sender_full_name": "IRC Bot",
        "timestamp": 1636365612
    },
    {
        "content": "<p>@<strong>pruvisto</strong>: Also I know at least three different people/groups working on similiar stuff.</p>",
        "id": 260635777,
        "sender_full_name": "IRC Bot",
        "timestamp": 1636365623
    },
    {
        "content": "<p>@<strong>pruvisto</strong>: You're either part of one of them or you ought to know about them ^^</p>",
        "id": 260635822,
        "sender_full_name": "IRC Bot",
        "timestamp": 1636365639
    },
    {
        "content": "<p>@<strong>sthaan</strong>: we are grad students working part-time on this project (lead Stefan Rass):</p>",
        "id": 260636132,
        "sender_full_name": "IRC Bot",
        "timestamp": 1636365832
    },
    {
        "content": "<p>@<strong>sthaan</strong>: <a href=\"https://www.syssec.at/en/projekte/cave-pnp\">https://www.syssec.at/en/projekte/cave-pnp</a></p>",
        "id": 260636133,
        "sender_full_name": "IRC Bot",
        "timestamp": 1636365833
    },
    {
        "content": "<p>@<strong>pruvisto</strong>: Ah, I think somebody told me about that recently.</p>",
        "id": 260636241,
        "sender_full_name": "IRC Bot",
        "timestamp": 1636365875
    },
    {
        "content": "<p>@<strong>pruvisto</strong>: I just moved to Innsbruck a few weeks ago</p>",
        "id": 260636282,
        "sender_full_name": "IRC Bot",
        "timestamp": 1636365900
    },
    {
        "content": "<p>@<strong>pruvisto</strong>: In any case: Mohammad Abdulaziz and some of his colleagues and students at TUM are working on formalising various NP-complete algorithms</p>",
        "id": 260636341,
        "sender_full_name": "IRC Bot",
        "timestamp": 1636365931
    },
    {
        "content": "<p>@<strong>pruvisto</strong>: I think they're using register machines though</p>",
        "id": 260636410,
        "sender_full_name": "IRC Bot",
        "timestamp": 1636365962
    },
    {
        "content": "<p>@<strong>pruvisto</strong>: René Thiemann has two Bachelor's students working on Turing machines</p>",
        "id": 260636426,
        "sender_full_name": "IRC Bot",
        "timestamp": 1636365963
    },
    {
        "content": "<p>@<strong>pruvisto</strong>: And then there were some people in Bremen who were also doing something with register machines, I think, but their goal was to show that diophantine equations are undecidable</p>",
        "id": 260636472,
        "sender_full_name": "IRC Bot",
        "timestamp": 1636365993
    },
    {
        "content": "<p>@<strong>sthaan</strong>: &gt; I just moved to Innsbruck a few weeks ago</p>",
        "id": 260636767,
        "sender_full_name": "IRC Bot",
        "timestamp": 1636366149
    },
    {
        "content": "<p>@<strong>sthaan</strong>: Innsbruck is a really nice city, I lived there for two years :)</p>",
        "id": 260636768,
        "sender_full_name": "IRC Bot",
        "timestamp": 1636366149
    },
    {
        "content": "<p>@<strong>sthaan</strong>: Thank you for the names, are they all using Isabelle?</p>",
        "id": 260636769,
        "sender_full_name": "IRC Bot",
        "timestamp": 1636366149
    },
    {
        "content": "<p>@<strong>pruvisto</strong>: yes</p>",
        "id": 260637326,
        "sender_full_name": "IRC Bot",
        "timestamp": 1636366461
    },
    {
        "content": "<p>@<strong>pruvisto</strong>: I think Mohammad might be most interesting to you</p>",
        "id": 260637376,
        "sender_full_name": "IRC Bot",
        "timestamp": 1636366494
    },
    {
        "content": "<p>@<strong>sthaan</strong>: thank you, we will get in touch :)</p>",
        "id": 260639308,
        "sender_full_name": "IRC Bot",
        "timestamp": 1636367540
    },
    {
        "content": "<p>@<strong>sthaan</strong>: Hi, I was wondering why interpretations are lost if I re-open a locale?</p>",
        "id": 261272265,
        "sender_full_name": "IRC Bot",
        "timestamp": 1636732640
    },
    {
        "content": "<p>@<strong>sthaan</strong>: <a href=\"https://upload.wiuwiu.de/share.php/cbe7e62b-5619-47d7-a1b5-2f30ac2eae41/SavingInterpretation.thy\">https://upload.wiuwiu.de/share.php/cbe7e62b-5619-47d7-a1b5-2f30ac2eae41/SavingInterpretation.thy</a></p>",
        "id": 261272308,
        "sender_full_name": "IRC Bot",
        "timestamp": 1636732658
    },
    {
        "content": "<p>@<strong>sthaan</strong>: here the seconde <code>thm one_is_one</code> fails because the interpretation of A is apparently lost</p>",
        "id": 261272793,
        "sender_full_name": "IRC Bot",
        "timestamp": 1636732847
    },
    {
        "content": "<p>@<strong>sthaan</strong>: here the second <code>thm one_is_one</code> fails because the interpretation of A is apparently lost</p>",
        "id": 261272821,
        "sender_full_name": "IRC Bot",
        "timestamp": 1636732860
    },
    {
        "content": "<p>@<strong>sthaan</strong>: okay we could solve this by using <code>sublocale</code> :)</p>",
        "id": 261280483,
        "sender_full_name": "IRC Bot",
        "timestamp": 1636736173
    },
    {
        "content": "<p>@<strong>sthaan</strong>: <a href=\"https://upload.wiuwiu.de/share.php/1bcfc4b0-8f69-4123-89e7-c51c0e34b81e/SavingInterpretation.thy\">https://upload.wiuwiu.de/share.php/1bcfc4b0-8f69-4123-89e7-c51c0e34b81e/SavingInterpretation.thy</a></p>",
        "id": 261281293,
        "sender_full_name": "IRC Bot",
        "timestamp": 1636736528
    },
    {
        "content": "<p>@<strong>pruvisto</strong>: yup</p>",
        "id": 261287343,
        "sender_full_name": "IRC Bot",
        "timestamp": 1636739476
    },
    {
        "content": "<p>@<strong>pruvisto</strong>: interpretations do not survive exiting the current context. sublocales do.</p>",
        "id": 261287361,
        "sender_full_name": "IRC Bot",
        "timestamp": 1636739486
    },
    {
        "content": "<p>@<strong>sthaan</strong>: is it possible to introduce terms into a locale using only existence?</p>",
        "id": 262070135,
        "sender_full_name": "IRC Bot",
        "timestamp": 1637330833
    },
    {
        "content": "<p>@<strong>sthaan</strong>: on the theory level I can use <code>consts</code> and <code>specification</code> to achieve this, but those are not allowed when I open a locale:</p>",
        "id": 262070136,
        "sender_full_name": "IRC Bot",
        "timestamp": 1637330833
    },
    {
        "content": "<p>@<strong>sthaan</strong>: <a href=\"https://upload.wiuwiu.de/share.php/ae99725f-3265-486a-b3e7-406b0023a952/local_specification.thy\">https://upload.wiuwiu.de/share.php/ae99725f-3265-486a-b3e7-406b0023a952/local_specification.thy</a></p>",
        "id": 262070151,
        "sender_full_name": "IRC Bot",
        "timestamp": 1637330850
    },
    {
        "content": "<p>@<strong>int-e</strong>: Not sure what the story is (whether <code>consts</code> just hasn't been localized or whether there's an actual reason for this omission), but there's  SOME x. P x  if all else fails</p>",
        "id": 262070606,
        "sender_full_name": "IRC Bot",
        "timestamp": 1637331047
    },
    {
        "content": "<p>@<strong>int-e</strong>: It's more cumbersome though: definition x where \"x == SOME x. x \\&lt;ge&gt; 3\"  and then prove \"x \\&lt;ge&gt; 3\" from that.</p>",
        "id": 262070814,
        "sender_full_name": "IRC Bot",
        "timestamp": 1637331142
    },
    {
        "content": "<p>@<strong>sthaan</strong>: int-e, thanks I didn't think of that!</p>",
        "id": 262073985,
        "sender_full_name": "IRC Bot",
        "timestamp": 1637332691
    },
    {
        "content": "<p>@<strong>sthaan</strong>: is there any other way to introduce terms from existence? I scared of <code>SOME</code></p>",
        "id": 262073986,
        "sender_full_name": "IRC Bot",
        "timestamp": 1637332691
    },
    {
        "content": "<p>@<strong>sthaan</strong>: int-e, thanks I didn't think of that!</p>",
        "id": 262074052,
        "sender_full_name": "IRC Bot",
        "timestamp": 1637332721
    },
    {
        "content": "<p>@<strong>sthaan</strong>: is there any other way to introduce terms from existence? I'm scared of <code>SOME</code></p>",
        "id": 262074053,
        "sender_full_name": "IRC Bot",
        "timestamp": 1637332721
    },
    {
        "content": "<p>@<strong>sthaan</strong>: ok I guess if I never unfold the definition, I get the same results :)</p>",
        "id": 262074637,
        "sender_full_name": "IRC Bot",
        "timestamp": 1637333004
    },
    {
        "content": "<p>@<strong>int-e</strong>: yes that's the idea</p>",
        "id": 262074765,
        "sender_full_name": "IRC Bot",
        "timestamp": 1637333059
    },
    {
        "content": "<p>@<strong>pruvisto</strong>: \"some\" and \"the\" aren't that scary</p>",
        "id": 262079492,
        "sender_full_name": "IRC Bot",
        "timestamp": 1637334976
    },
    {
        "content": "<p>@<strong>pruvisto</strong>: And the specification command probably uses them internally anyway</p>",
        "id": 262079514,
        "sender_full_name": "IRC Bot",
        "timestamp": 1637334990
    },
    {
        "content": "<p>@<strong>pruvisto</strong>: But I would indeed try to keep the definition folded and just work with the derived properties</p>",
        "id": 262079583,
        "sender_full_name": "IRC Bot",
        "timestamp": 1637335017
    },
    {
        "content": "<p>@<strong>pruvisto</strong>: The automation is not good at working with them</p>",
        "id": 262079618,
        "sender_full_name": "IRC Bot",
        "timestamp": 1637335028
    },
    {
        "content": "<p>@<strong>sthaan</strong>: &gt; \"some\" and \"the\" aren't that scary</p>",
        "id": 262080494,
        "sender_full_name": "IRC Bot",
        "timestamp": 1637335414
    },
    {
        "content": "<p>@<strong>sthaan</strong>: yes if I never unfold anything they aren't that scary I guess :D</p>",
        "id": 262080495,
        "sender_full_name": "IRC Bot",
        "timestamp": 1637335414
    },
    {
        "content": "<p>@<strong>pruvisto</strong>: They're a bit annoying to use, but otherwise…</p>",
        "id": 262086151,
        "sender_full_name": "IRC Bot",
        "timestamp": 1637337740
    },
    {
        "content": "<p>@<strong>pruvisto</strong>: oh there's also \"Least\"</p>",
        "id": 262086159,
        "sender_full_name": "IRC Bot",
        "timestamp": 1637337743
    },
    {
        "content": "<p>@<strong>pie_</strong>: has this been around <a href=\"http://math.andrej.com/2021/11/20/proof-assistants-stackexchange-site/\">http://math.andrej.com/2021/11/20/proof-assistants-stackexchange-site/</a></p>",
        "id": 262158608,
        "sender_full_name": "IRC Bot",
        "timestamp": 1637377766
    },
    {
        "content": "<p>@<strong>sthaan</strong>: It's a pitty we can't have <code>instantiation nat :: floor_ceiling</code></p>",
        "id": 265117556,
        "sender_full_name": "IRC Bot",
        "timestamp": 1639637087
    },
    {
        "content": "<p>@<strong>sthaan</strong>: one would think floor and ceiling should be well defined for nat...</p>",
        "id": 265117600,
        "sender_full_name": "IRC Bot",
        "timestamp": 1639637162
    },
    {
        "content": "<p>@<strong>zfnmxt</strong>: Does Isabelle have anything like haskell's \"@\" operator for binding a pattern to a variable? (e.g., myFun x@(Just k)  = ...)</p>",
        "id": 266577640,
        "sender_full_name": "IRC Bot",
        "timestamp": 1641074378
    },
    {
        "content": "<p>@<strong>pruvisto</strong>: Pattern aliases I think</p>",
        "id": 266578870,
        "sender_full_name": "IRC Bot",
        "timestamp": 1641075570
    },
    {
        "content": "<p>@<strong>pruvisto</strong>: There's something in the library to do this</p>",
        "id": 266578871,
        "sender_full_name": "IRC Bot",
        "timestamp": 1641075570
    },
    {
        "content": "<p>@<strong>zfnmxt</strong>: pruvisto: <a href=\"https://isabelle.in.tum.de/library/HOL/HOL-Library/Pattern_Aliases.html\">https://isabelle.in.tum.de/library/HOL/HOL-Library/Pattern_Aliases.html</a> yep, thank you :)</p>",
        "id": 266579932,
        "sender_full_name": "IRC Bot",
        "timestamp": 1641076825
    },
    {
        "content": "<p>@<strong>zfnmxt</strong>: I'm trying to prove something of the form <code>P1 -&gt; P2 -&gt; P3</code> with rule induction. The variable I'm doing induction over appears in both P1 and P3, but the inductive hypothesis only uses P2 and P3, so <code>induction</code> isn't instantiating the predicate which appears in the relevant induction rule with what I want--is there a way to specify it manually or something? I hope that's intelligible/sufficiently clear.</p>",
        "id": 268587885,
        "sender_full_name": "IRC Bot",
        "timestamp": 1642618991
    },
    {
        "content": "<p>@<strong>pruvisto</strong>: the best way to do it is to do something like <code>show P3 using P2 P1 proof (induction …)</code></p>",
        "id": 268588433,
        "sender_full_name": "IRC Bot",
        "timestamp": 1642619182
    },
    {
        "content": "<p>@<strong>pruvisto</strong>: if the induction rule has n premises, the <code>induction</code> method will unify the first n chained facts with them</p>",
        "id": 268588484,
        "sender_full_name": "IRC Bot",
        "timestamp": 1642619202
    },
    {
        "content": "<p>@<strong>pruvisto</strong>: and any remaining chained facts are then simply treated as part of the statement being proved</p>",
        "id": 268588526,
        "sender_full_name": "IRC Bot",
        "timestamp": 1642619220
    },
    {
        "content": "<p>@<strong>pruvisto</strong>: if that doesn't work you may have to post something more concrete</p>",
        "id": 268588578,
        "sender_full_name": "IRC Bot",
        "timestamp": 1642619238
    },
    {
        "content": "<p>@<strong>pruvisto</strong>: so I can understand what the problem is</p>",
        "id": 268588586,
        "sender_full_name": "IRC Bot",
        "timestamp": 1642619244
    },
    {
        "content": "<p>@<strong>zfnmxt</strong>: pruvisto: Thanks for your fast response. One sec, a bit of experimentation is in order!</p>",
        "id": 268589926,
        "sender_full_name": "IRC Bot",
        "timestamp": 1642619853
    },
    {
        "content": "<p>@<strong>zfnmxt</strong>: After taking a closer look at the induction rule, I realized that I had erroneous assumptions....so, my mistake! Thanks again for your help.</p>",
        "id": 268593271,
        "sender_full_name": "IRC Bot",
        "timestamp": 1642621491
    },
    {
        "content": "<p>@<strong>zfnmxt</strong>: Actually, just to make sure: if I have some inductive datatype D x y, the induction rule generated will always look something like <code>D x y -&gt;  (rules for the cases) -&gt; P x y</code>, right?</p>",
        "id": 268593376,
        "sender_full_name": "IRC Bot",
        "timestamp": 1642621559
    },
    {
        "content": "<p>@<strong>pruvisto</strong>: you mean an inductive predicate, right?</p>",
        "id": 268608919,
        "sender_full_name": "IRC Bot",
        "timestamp": 1642629274
    },
    {
        "content": "<p>@<strong>pruvisto</strong>: this ain't Coq :D</p>",
        "id": 268608951,
        "sender_full_name": "IRC Bot",
        "timestamp": 1642629294
    },
    {
        "content": "<p>@<strong>pruvisto</strong>: but yeah that looks right, for inductive predicates</p>",
        "id": 268609166,
        "sender_full_name": "IRC Bot",
        "timestamp": 1642629405
    },
    {
        "content": "<p>@<strong>pruvisto</strong>: the \"rules for the cases\" bit is the interesting part though, of course</p>",
        "id": 268609194,
        "sender_full_name": "IRC Bot",
        "timestamp": 1642629425
    },
    {
        "content": "<p>@<strong>zfnmxt</strong>: Yeah, that's what I meant. I learned with Coq so...I still try to frame everything through that :D</p>",
        "id": 268688072,
        "sender_full_name": "IRC Bot",
        "timestamp": 1642683798
    },
    {
        "content": "<p>@<strong>zfnmxt</strong>: Thanks for your help again.</p>",
        "id": 268688073,
        "sender_full_name": "IRC Bot",
        "timestamp": 1642683799
    },
    {
        "content": "<p>@<strong>sthaan</strong>: <a href=\"https://upload.wiuwiu.de/share.php/c3d4288a-ac64-4af1-9e7d-e04ca11ce27c/20220201_13h20m19s_grim.png\">https://upload.wiuwiu.de/share.php/c3d4288a-ac64-4af1-9e7d-e04ca11ce27c/20220201_13h20m19s_grim.png</a></p>\n<div class=\"message_inline_image\"><a href=\"https://upload.wiuwiu.de/share.php/c3d4288a-ac64-4af1-9e7d-e04ca11ce27c/20220201_13h20m19s_grim.png\"><img src=\"https://uploads.zulipusercontent.net/21f0ced18c5f357b82dd31e035ff420d959466dc/68747470733a2f2f75706c6f61642e7769757769752e64652f73686172652e7068702f63336434323838612d616336342d346166312d396537642d6530346361313163653237632f32303232303230315f31336832306d3139735f6772696d2e706e67\"></a></div>",
        "id": 270199154,
        "sender_full_name": "IRC Bot",
        "timestamp": 1643718036
    },
    {
        "content": "<p>@<strong>sthaan</strong>: what could cause this \"Bad number of arguments\" error, but only the second time?</p>",
        "id": 270199229,
        "sender_full_name": "IRC Bot",
        "timestamp": 1643718068
    },
    {
        "content": "<p>@<strong>pruvisto</strong>: huh</p>",
        "id": 270201720,
        "sender_full_name": "IRC Bot",
        "timestamp": 1643719175
    },
    {
        "content": "<p>@<strong>pruvisto</strong>: I never quite understood how \"(structure)\" works though</p>",
        "id": 270201721,
        "sender_full_name": "IRC Bot",
        "timestamp": 1643719175
    },
    {
        "content": "<p>@<strong>pruvisto</strong>: thatâ€¦ is an excellent question</p>",
        "id": 270201722,
        "sender_full_name": "IRC Bot",
        "timestamp": 1643719176
    },
    {
        "content": "<p>@<strong>sthaan</strong>: removing <code>(structure)</code> gives the same error :(</p>",
        "id": 270202412,
        "sender_full_name": "IRC Bot",
        "timestamp": 1643719465
    },
    {
        "content": "<p>@<strong>sthaan</strong>: also if I remove the second locale definition, the error starts appearing on the first locale</p>",
        "id": 270202413,
        "sender_full_name": "IRC Bot",
        "timestamp": 1643719465
    },
    {
        "content": "<p>Can you show a more complete example? Including at least the definition of TM?</p>",
        "id": 270204364,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1643720306
    },
    {
        "content": "<p>@<strong>pruvisto</strong>: Oops, that was me on Zulip. :D</p>",
        "id": 270204432,
        "sender_full_name": "IRC Bot",
        "timestamp": 1643720341
    },
    {
        "content": "<p>@<strong>int-e</strong>: Oh. The '@' is a bit unfortunate.</p>",
        "id": 270204518,
        "sender_full_name": "IRC Bot",
        "timestamp": 1643720388
    },
    {
        "content": "<p>My guess would be that the name <code>foo_TM</code> is already used internally somewhere, leading to the problem you observe.</p>",
        "id": 270204683,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1643720416
    },
    {
        "content": "<p>@<strong>pruvisto</strong>: Not sure why it does that. But what is the problem?</p>",
        "id": 270204702,
        "sender_full_name": "IRC Bot",
        "timestamp": 1643720420
    },
    {
        "content": "<p>@<strong>sthaan</strong>: <code>foo_TM</code> is not used anywhere else and a quick <code>grep -ri \"foo_TM\" /opt/Isabelle2021-1/src/</code> also gives no result</p>",
        "id": 270205586,
        "sender_full_name": "IRC Bot",
        "timestamp": 1643720809
    },
    {
        "content": "<p>unless foo_TM is generated as a name bei some package</p>",
        "id": 270205780,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1643720881
    },
    {
        "content": "<p>@<strong>pruvisto</strong>: I'd be surprised if that were the cause of this behaviour. But we'll only really be able to tell once we see more of the code.</p>",
        "id": 270206480,
        "sender_full_name": "IRC Bot",
        "timestamp": 1643721188
    },
    {
        "content": "<p>@<strong>sthaan</strong>: AHA! I found the problem: It was in a comment below</p>",
        "id": 270206746,
        "sender_full_name": "IRC Bot",
        "timestamp": 1643721340
    },
    {
        "content": "<p>@<strong>sthaan</strong>: Here's a minimal example</p>",
        "id": 270206768,
        "sender_full_name": "IRC Bot",
        "timestamp": 1643721353
    },
    {
        "content": "<p>@<strong>sthaan</strong>: <a href=\"https://upload.wiuwiu.de/share.php/79c53277-5393-479f-a5c8-c1b216ad0e50/Test.thy\">https://upload.wiuwiu.de/share.php/79c53277-5393-479f-a5c8-c1b216ad0e50/Test.thy</a></p>",
        "id": 270206783,
        "sender_full_name": "IRC Bot",
        "timestamp": 1643721361
    },
    {
        "content": "<p>@<strong>int-e</strong>: pruvisto: It clashes with the convention of using <code>@</code> for addressing people (indicating a target, rather than a source).</p>",
        "id": 270206886,
        "sender_full_name": "IRC Bot",
        "timestamp": 1643721406
    },
    {
        "content": "<p>@<strong>sthaan</strong>: Replacing <code>typ&gt;‹('a) R›</code> with <code>typ&gt;‹('a, 'b) R›</code> in the comment fixes the error</p>",
        "id": 270206936,
        "sender_full_name": "IRC Bot",
        "timestamp": 1643721448
    },
    {
        "content": "<p>@<strong>pruvisto</strong>: sthaan: Ah, so the error came from the typ antiquotation</p>",
        "id": 270206942,
        "sender_full_name": "IRC Bot",
        "timestamp": 1643721452
    },
    {
        "content": "<p>@<strong>sthaan</strong>: this is quite confusing as it breaks my intuition about where to look:</p>",
        "id": 270207394,
        "sender_full_name": "IRC Bot",
        "timestamp": 1643721650
    },
    {
        "content": "<p>@<strong>sthaan</strong>: * stuff below can't cause an error further up</p>",
        "id": 270207396,
        "sender_full_name": "IRC Bot",
        "timestamp": 1643721650
    },
    {
        "content": "<p>@<strong>sthaan</strong>: * comments do not matter</p>",
        "id": 270207398,
        "sender_full_name": "IRC Bot",
        "timestamp": 1643721650
    },
    {
        "content": "<p>@<strong>pruvisto</strong>: These kinds of comments are not comments like when you \"comment something out\" in Java</p>",
        "id": 270207572,
        "sender_full_name": "IRC Bot",
        "timestamp": 1643721722
    },
    {
        "content": "<p>@<strong>pruvisto</strong>: These comments are part of the formal proof document, so they are also checked (namely for type-correctness)</p>",
        "id": 270207666,
        "sender_full_name": "IRC Bot",
        "timestamp": 1643721747
    },
    {
        "content": "<p>@<strong>pruvisto</strong>: there are also the (* foo *) comments, which, to my knowledge, are not checked in any way</p>",
        "id": 270207728,
        "sender_full_name": "IRC Bot",
        "timestamp": 1643721769
    },
    {
        "content": "<p>@<strong>pruvisto</strong>: (they can, however, still cause \"errors\" occasionally because extremely long comments can mess with the parser in Isabelle/jEdit)</p>",
        "id": 270207794,
        "sender_full_name": "IRC Bot",
        "timestamp": 1643721788
    },
    {
        "content": "<p>@<strong>sthaan</strong>: still the error should have been shown on the antiquotation, not on the definition further up ðŸ¤”ï¸�</p>",
        "id": 270207935,
        "sender_full_name": "IRC Bot",
        "timestamp": 1643721837
    },
    {
        "content": "<p>@<strong>pruvisto</strong>: \"stuff below can't cause an error further up\", well, that can sometimes happen when you have a command invocation that spans multiple lines. Like, if you have a function definition that is 100 lines long and something fails in it, it might be the \"fun\" command at the very beginning that shows an error</p>",
        "id": 270207999,
        "sender_full_name": "IRC Bot",
        "timestamp": 1643721847
    },
    {
        "content": "<p>@<strong>pruvisto</strong>: however, why this happens in this particular case, I have no idea</p>",
        "id": 270208023,
        "sender_full_name": "IRC Bot",
        "timestamp": 1643721854
    },
    {
        "content": "<p>@<strong>pruvisto</strong>: I don't think it should</p>",
        "id": 270208033,
        "sender_full_name": "IRC Bot",
        "timestamp": 1643721857
    },
    {
        "content": "<p>@<strong>pruvisto</strong>: feel free to send this to the mailing list</p>",
        "id": 270208054,
        "sender_full_name": "IRC Bot",
        "timestamp": 1643721863
    },
    {
        "content": "<p>@<strong>pruvisto</strong>: I think Makarius does care about errors showing up in the right place</p>",
        "id": 270208086,
        "sender_full_name": "IRC Bot",
        "timestamp": 1643721875
    },
    {
        "content": "<p>@<strong>sthaan</strong>: ok, thank you, I will send this example to the mailing list :)</p>",
        "id": 270211683,
        "sender_full_name": "IRC Bot",
        "timestamp": 1643723168
    },
    {
        "content": "<p>@<strong>sthaan</strong>: I tried to send an email to <a href=\"mailto:isabelle-users@cl.cam.ac.uk\">isabelle-users@cl.cam.ac.uk</a>, but it doesn't show up in the archive, and I don't see any signs that it was received correctly. Do I need to be subscribed to the mailing list to send emails to it?</p>",
        "id": 271151154,
        "sender_full_name": "IRC Bot",
        "timestamp": 1644336810
    },
    {
        "content": "<p>@<strong>pruvisto</strong>: No but it might be waiting for moderator approval</p>",
        "id": 271161375,
        "sender_full_name": "IRC Bot",
        "timestamp": 1644341079
    },
    {
        "content": "<p>@<strong>sthaan</strong>: hm, I did not get any conformation that my message is subject to moderator approval ...</p>",
        "id": 271171988,
        "sender_full_name": "IRC Bot",
        "timestamp": 1644345413
    },
    {
        "content": "<p>@<strong>pruvisto</strong>: hm, it is odd that it still didn't go through</p>",
        "id": 271257284,
        "sender_full_name": "IRC Bot",
        "timestamp": 1644402970
    },
    {
        "content": "<p>@<strong>pruvisto</strong>: the address that I use is <a href=\"mailto:cl-isabelle-users@lists.cam.ac.uk\">cl-isabelle-users@lists.cam.ac.uk</a></p>",
        "id": 271257335,
        "sender_full_name": "IRC Bot",
        "timestamp": 1644403003
    },
    {
        "content": "<p>@<strong>pruvisto</strong>: not sure if yours works as well</p>",
        "id": 271257397,
        "sender_full_name": "IRC Bot",
        "timestamp": 1644403062
    },
    {
        "content": "<p>@<strong>sthaan</strong>: I got the address from <a href=\"https://isabelle.in.tum.de/\">https://isabelle.in.tum.de/</a> where it is shown without the <code>cl-</code></p>",
        "id": 271261563,
        "sender_full_name": "IRC Bot",
        "timestamp": 1644405274
    },
    {
        "content": "<p>@<strong>pruvisto</strong>: yeah maybe it's just an alias</p>",
        "id": 271261601,
        "sender_full_name": "IRC Bot",
        "timestamp": 1644405293
    },
    {
        "content": "<p>@<strong>sthaan</strong>: ok, i've sent it to <a href=\"mailto:cl-isabelle-users@lists.cam.ac.uk\">cl-isabelle-users@lists.cam.ac.uk</a> too now, let's see if it goes through</p>",
        "id": 271261715,
        "sender_full_name": "IRC Bot",
        "timestamp": 1644405354
    },
    {
        "content": "<p>@<strong>sthaan</strong>: hi, I sent an email to both <code>isabelle-users@cl.cam.ac.uk</code> and <code>cl-isabelle-users@lists.cam.ac.uk</code> on the 7th and 9th respectively and looking at the archives it seems like they didn't went through <span aria-label=\"frown\" class=\"emoji emoji-1f641\" role=\"img\" title=\"frown\">:frown:</span></p>",
        "id": 272925526,
        "sender_full_name": "IRC Bot",
        "timestamp": 1645609860
    },
    {
        "content": "<p>@<strong>sthaan</strong>: I got no mails indicating what the error could have been...</p>",
        "id": 272925761,
        "sender_full_name": "IRC Bot",
        "timestamp": 1645609997
    },
    {
        "content": "<p>@<strong>sthaan</strong>: any ideas what I could do about it?</p>",
        "id": 272925775,
        "sender_full_name": "IRC Bot",
        "timestamp": 1645610005
    },
    {
        "content": "<p>It seems like you are not the only one facing that problem. Please send an email to Larry Paulson and tell him that your emails are not getting through <a href=\"mailto:lp15@cam.ac.uk\">lp15@cam.ac.uk</a></p>",
        "id": 272926544,
        "sender_full_name": "Kevin Kappelmann",
        "timestamp": 1645610401
    },
    {
        "content": "<p>@<strong>sthaan</strong>: thank you, I will try that <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 272926917,
        "sender_full_name": "IRC Bot",
        "timestamp": 1645610536
    },
    {
        "content": "<p>I just saw that your email went through. Did it just get stuck or what happened? I am curious because I'd like to help people here on Zulip in case they have similar problems.</p>",
        "id": 272978474,
        "sender_full_name": "Kevin Kappelmann",
        "timestamp": 1645635984
    },
    {
        "content": "<p>@<strong>sthaan</strong>: Messages from non-subscribers used to be silently dropped. Larry Paulson kindly changed to policy and it seems like moderators can approve mails from non-subscribers now.</p>",
        "id": 273022643,
        "sender_full_name": "IRC Bot",
        "timestamp": 1645656367
    },
    {
        "content": "<p>@<strong>pruvisto</strong>: Urgh</p>",
        "id": 273022674,
        "sender_full_name": "IRC Bot",
        "timestamp": 1645656396
    },
    {
        "content": "<p>@<strong>pruvisto</strong>: Sorry about that bad experience.</p>",
        "id": 273022695,
        "sender_full_name": "IRC Bot",
        "timestamp": 1645656410
    },
    {
        "content": "<p>@<strong>sthaan</strong>: no need to be! we figured it out in the end, thank you for all the help :)</p>",
        "id": 273022932,
        "sender_full_name": "IRC Bot",
        "timestamp": 1645656571
    },
    {
        "content": "<p>@<strong>sthaan</strong>: but there might be other people whose mails have also been silently deleted</p>",
        "id": 273023264,
        "sender_full_name": "IRC Bot",
        "timestamp": 1645656762
    },
    {
        "content": "<p>@<strong>sthaan</strong>: is there a good way to stop blast from executing while I'm typing somewhere in the document?</p>",
        "id": 273949837,
        "sender_full_name": "IRC Bot",
        "timestamp": 1646301861
    },
    {
        "content": "<p>@<strong>sthaan</strong>: If I'm rewriting something the proof below needs, blast starts, doesn't find anything and uses up all CPU</p>",
        "id": 273949839,
        "sender_full_name": "IRC Bot",
        "timestamp": 1646301861
    },
    {
        "content": "<p>@<strong>pruvisto</strong>: I usually just comment it out and replace it with a sorry</p>",
        "id": 274136091,
        "sender_full_name": "IRC Bot",
        "timestamp": 1646404181
    },
    {
        "content": "<p>@<strong>sthaan</strong>: okay, i see, I'm doing something similar, but I thought maybe there's a better way to stop checking the document temporariliy</p>",
        "id": 274136944,
        "sender_full_name": "IRC Bot",
        "timestamp": 1646404516
    },
    {
        "content": "<p>Isn't there a switch to turn off continuous checking, cf 3.1.2 here <a href=\"https://isabelle.in.tum.de/dist/doc/jedit.pdf\">https://isabelle.in.tum.de/dist/doc/jedit.pdf</a></p>",
        "id": 274137648,
        "sender_full_name": "Kevin Kappelmann",
        "timestamp": 1646404826
    },
    {
        "content": "<p>@<strong>sthaan</strong>: Kevin Kappelmann, thank you, this works without commenting out stuff :)</p>",
        "id": 274194588,
        "sender_full_name": "IRC Bot",
        "timestamp": 1646431362
    },
    {
        "content": "<p>@<strong>TheHermann</strong>: hi, where i can find tutorial for first order logic in Isabelle?. I checked the official site but i didnt found useful tutorial.</p>",
        "id": 275839475,
        "sender_full_name": "IRC Bot",
        "timestamp": 1647625861
    },
    {
        "content": "<p>@<strong>sthaan</strong>: TheHermann, I think first order propositions can often be solved by means like <code>blast</code>, <code>auto</code>, ...</p>",
        "id": 275852701,
        "sender_full_name": "IRC Bot",
        "timestamp": 1647632268
    },
    {
        "content": "<p>@<strong>sthaan</strong>: What are you looking to prove?</p>",
        "id": 275852702,
        "sender_full_name": "IRC Bot",
        "timestamp": 1647632268
    },
    {
        "content": "<p>@<strong>TheHermann</strong>: sthaan, an security protocol with first order logic</p>",
        "id": 275869947,
        "sender_full_name": "IRC Bot",
        "timestamp": 1647642270
    },
    {
        "content": "<p>@<strong>TheHermann</strong>: but i dont undestand how use first order logic in Isabelle</p>",
        "id": 275870015,
        "sender_full_name": "IRC Bot",
        "timestamp": 1647642326
    },
    {
        "content": "<p>@<strong>TheHermann</strong>: hi</p>",
        "id": 276032925,
        "sender_full_name": "IRC Bot",
        "timestamp": 1647860007
    },
    {
        "content": "<p>@<strong>TheHermann</strong>: how use first order logic in Isabelle?</p>",
        "id": 276032941,
        "sender_full_name": "IRC Bot",
        "timestamp": 1647860016
    },
    {
        "content": "<p>Do you want to work in first-order logic or do you want to prove things about first-order logic?<br>\nFor the former, you can build your sessions on top of Isabelle/FOL, for the latter you might want to use Isabelle/HOL and an existing AFP entry for FOL: <a href=\"https://www.isa-afp.org/topics.html\">https://www.isa-afp.org/topics.html</a></p>",
        "id": 276037377,
        "sender_full_name": "Kevin Kappelmann",
        "timestamp": 1647862613
    },
    {
        "content": "<p>@<strong>TheHermann</strong>: isabelle_zulip_, i want to prove things about first order logic</p>",
        "id": 276060107,
        "sender_full_name": "IRC Bot",
        "timestamp": 1647873693
    },
    {
        "content": "<p>@<strong>TheHermann</strong>: I have to try to write the public key Needham-Schroeder protocol in FOL. but I didn't understand Isabelle's syntax.</p>",
        "id": 276072093,
        "sender_full_name": "IRC Bot",
        "timestamp": 1647877974
    },
    {
        "content": "<p>You should read a tutorial, for example this one: <a href=\"https://isabelle.in.tum.de/dist/Isabelle2021-1/doc/prog-prove.pdf\">https://isabelle.in.tum.de/dist/Isabelle2021-1/doc/prog-prove.pdf</a></p>",
        "id": 276072237,
        "sender_full_name": "Kevin Kappelmann",
        "timestamp": 1647878040
    },
    {
        "content": "<p>@<strong>TheHermann</strong>: ok...i try to read this tutorial thanks :). im new in Isabelle</p>",
        "id": 276077404,
        "sender_full_name": "IRC Bot",
        "timestamp": 1647879934
    },
    {
        "content": "<p>@<strong>TheHermann</strong>: are there any examples of protocols written in fol?</p>",
        "id": 276124214,
        "sender_full_name": "IRC Bot",
        "timestamp": 1647903383
    },
    {
        "content": "<p>there are examples of protocols in the afp <a href=\"https://www.isa-afp.org/topics.html\">https://www.isa-afp.org/topics.html</a><br>\nWhy do you need fol for your protocol? Can't you just formalise whatever rules of interaction you have in mind in Isabelle/HOL directly?</p>",
        "id": 276300331,
        "sender_full_name": "Kevin Kappelmann",
        "timestamp": 1648023791
    },
    {
        "content": "<p>@<strong>TheHermann</strong>: how write axiom like A send B the message A,B in Isabelle?</p>",
        "id": 276890647,
        "sender_full_name": "IRC Bot",
        "timestamp": 1648481467
    },
    {
        "content": "<p>@<strong>TheHermann</strong>: in FOL</p>",
        "id": 276902204,
        "sender_full_name": "IRC Bot",
        "timestamp": 1648486453
    },
    {
        "content": "<p>@<strong>int-e</strong>: There's a mismatch here. FOL just has quantifiers, function symbols, and predicates. There's nothing about messages. Presumably what you describe would be captured by a predicate. There's bound to be papers on this by people who've formalized cryptographic protocols, but I don't know anything about it.</p>",
        "id": 276903626,
        "sender_full_name": "IRC Bot",
        "timestamp": 1648487056
    },
    {
        "content": "<p>@<strong>int-e</strong>: The other oddity here is why you'd want to use FOL rather than HOL when doing this with Isabelle... HOL is more expressive and has much better support.</p>",
        "id": 276903713,
        "sender_full_name": "IRC Bot",
        "timestamp": 1648487103
    },
    {
        "content": "<p>@<strong>TheHermann</strong>: I have to use FOL, but i dont undestand how write functions and predicares in Isabelle</p>",
        "id": 276903997,
        "sender_full_name": "IRC Bot",
        "timestamp": 1648487241
    },
    {
        "content": "<p>@<strong>int-e</strong>: If you really want to use Isabelle/FOL, apparently the bool type is <code>o</code>. A predicate would be a function to o. For example, it declares eq :: ‹['a, 'a] ⇒ o› near the top of <a href=\"https://isabelle.in.tum.de/library/FOL/FOL/IFOL.html\">https://isabelle.in.tum.de/library/FOL/FOL/IFOL.html</a></p>",
        "id": 276904869,
        "sender_full_name": "IRC Bot",
        "timestamp": 1648487737
    },
    {
        "content": "<p>@<strong>int-e</strong>: Actually, even if your goal is to use Isabelle/FOL you should probably go through one of the Isabelle/HOL tutorials (like progprove, which somebody suggested earlier) first... there's a <em>lot</em> of syntax, semantics, tools, and quirks to learn before you can hope to use Isabelle/* for anything productively.</p>",
        "id": 276905096,
        "sender_full_name": "IRC Bot",
        "timestamp": 1648487843
    },
    {
        "content": "<p>@<strong>int-e</strong>: A lot of the syntax is actually established in Isabelle/Pure which is the foundation for both HOL and FOL (and a couple of others).</p>",
        "id": 276905223,
        "sender_full_name": "IRC Bot",
        "timestamp": 1648487899
    },
    {
        "content": "<p>@<strong>aweinstock</strong>: TheHermann: <a href=\"https://en.wikipedia.org/wiki/Burrows-Abadi-Needham_logic#Basic_rules\">https://en.wikipedia.org/wiki/Burrows-Abadi-Needham_logic#Basic_rules</a> looks like it's a set of predicates and axioms you can encode into first-order logic to start with, but it's allegedly unsound</p>",
        "id": 276914354,
        "sender_full_name": "IRC Bot",
        "timestamp": 1648492532
    },
    {
        "content": "<p>@<strong>aweinstock</strong>: things like <a href=\"https://eprint.iacr.org/2000/067.pdf\">https://eprint.iacr.org/2000/067.pdf</a> and <a href=\"https://eprint.iacr.org/2006/398.pdf\">https://eprint.iacr.org/2006/398.pdf</a> provider stronger guarantees than BAN logic, but they're much more involved to formalize</p>",
        "id": 276915476,
        "sender_full_name": "IRC Bot",
        "timestamp": 1648493158
    },
    {
        "content": "<p>@<strong>aweinstock</strong>: (they both involve encodings of computable functions and the plumbing to network them)</p>",
        "id": 276915582,
        "sender_full_name": "IRC Bot",
        "timestamp": 1648493203
    },
    {
        "content": "<p>@<strong>TheHermann</strong>: thanks for the replies</p>",
        "id": 276936077,
        "sender_full_name": "IRC Bot",
        "timestamp": 1648504466
    },
    {
        "content": "<p>@<strong>TheHermann</strong>: I go to sleep, night!!</p>",
        "id": 276936124,
        "sender_full_name": "IRC Bot",
        "timestamp": 1648504512
    },
    {
        "content": "<p>@<strong>TheHermann</strong>: hi, How do I know if there is already a rule on Isabelle that I can apply ?. Is there a list of all the FOL rules I can apply ?.</p>",
        "id": 277905615,
        "sender_full_name": "IRC Bot",
        "timestamp": 1649175916
    },
    {
        "content": "<p>@<strong>TheHermann</strong>: how works functions on Isabelle? is <a href=\"https://pastebin.com/P5nm68qc\">https://pastebin.com/P5nm68qc</a> functions or predicate?</p>",
        "id": 278397496,
        "sender_full_name": "IRC Bot",
        "timestamp": 1649493718
    },
    {
        "content": "<p>@<strong>TheHermann</strong>: Is it possible to prove a lemma using other preceding lemmas ?. Like I have to prove the lemma D but to do it I have to use the lemma A and the lemma B</p>",
        "id": 278417658,
        "sender_full_name": "IRC Bot",
        "timestamp": 1649521244
    },
    {
        "content": "<p>Of course. How that looks exactly depends on whether you're using Isar or tactic-style proofs.</p>",
        "id": 278437730,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1649548720
    },
    {
        "content": "<p>In Isar it's something like have \"a = b\" using mylemmy by some_proof_method</p>",
        "id": 278437744,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1649548752
    },
    {
        "content": "<p>*mylemma</p>",
        "id": 278437747,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1649548759
    },
    {
        "content": "<p>in tactic-style proofs it's… well actually exactly the same, also with \"using\"</p>",
        "id": 278437748,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1649548774
    },
    {
        "content": "<p>with respect to your other question, as has been said multiple times, you're probably not going to get a lot of answers if you ask questions about Isabelle/ZF (the fact that you have an \"o\" in your type indicates that that is the case).</p>",
        "id": 278437848,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1649548826
    },
    {
        "content": "<p>(or Isabelle/FOL in your case I guess)</p>",
        "id": 278437888,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1649548852
    },
    {
        "content": "<p>So the best approach is probably to learn a bit of Isabelle/HOL and then switch to ZF or FOL or whatever; by that point hopefully a lot of things will have become much clearer to you.</p>",
        "id": 278437897,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1649548865
    },
    {
        "content": "<p>@<strong>TheHermann</strong>: hi</p>",
        "id": 278973068,
        "sender_full_name": "IRC Bot",
        "timestamp": 1649946530
    },
    {
        "content": "<p>@<strong>TheHermann</strong>: how compare two predicate in isabelle?</p>",
        "id": 278973080,
        "sender_full_name": "IRC Bot",
        "timestamp": 1649946540
    },
    {
        "content": "<p>@<strong>hesse</strong>: I get Response_reference(TTP, B) from server and Store_id(A, B) from user A. how compare Response_reference(TTP, B) and Store_id(A, B) if the identity B returned by the server is equal to the identity B that A has?. I thought about using Response_reference and Store_id as predicate. i using only first order logic</p>",
        "id": 280691788,
        "sender_full_name": "IRC Bot",
        "timestamp": 1651267960
    },
    {
        "content": "<p>@<strong>int-e</strong>: This protocol verification (I guess) project feels so wrong. Squeezing protocol descriptions (and specifications?) into FOL is already a tall order, but then why target Isabelle/FOL? It's not exactly well developed...</p>",
        "id": 280717145,
        "sender_full_name": "IRC Bot",
        "timestamp": 1651295063
    },
    {
        "content": "<p>@<strong>TheHermann</strong>:  I get Response_reference(TTP, B) from server and Store_id(A, B) from user A. how compare Response_reference(TTP, B) and Store_id(A, B) if the identity B returned by the server is equal to the identity B that A has?. I thought about using Response_reference and Store_id as predicate. i using only first order logic</p>",
        "id": 280728894,
        "sender_full_name": "IRC Bot",
        "timestamp": 1651314351
    },
    {
        "content": "<p>@<strong>sthaan</strong>: hi, how would you go about contributing lemmas to the standard library?</p>",
        "id": 287316094,
        "sender_full_name": "IRC Bot",
        "timestamp": 1656068018
    },
    {
        "content": "<p>@<strong>sthaan</strong>: is there any policy about what is 'interesting enough' to qualify?</p>",
        "id": 287316096,
        "sender_full_name": "IRC Bot",
        "timestamp": 1656068018
    },
    {
        "content": "<p>Not really. It has to be of sufficient general interest.</p>",
        "id": 287319500,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1656070411
    },
    {
        "content": "<p>So if it's something fairly basic about lists, multisets, numbers, analysis, etc. that probably belongs in the algebra.</p>",
        "id": 287319524,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1656070439
    },
    {
        "content": "<p>If it's something interesting but big enough to be packaged in an AFP entry, an AFP entry is probably a better choice.</p>",
        "id": 287319573,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1656070456
    },
    {
        "content": "<p>Feel free to post something here and I can tell you what my opinion is.</p>",
        "id": 287319588,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1656070473
    },
    {
        "content": "<p>@<strong>sthaan</strong>: for example this</p>",
        "id": 287319920,
        "sender_full_name": "IRC Bot",
        "timestamp": 1656070707
    },
    {
        "content": "<p>@<strong>sthaan</strong>: ```isabelle</p>",
        "id": 287319921,
        "sender_full_name": "IRC Bot",
        "timestamp": 1656070707
    },
    {
        "content": "<p>@<strong>sthaan</strong>: lemma ae_word_length_iff[iff]:</p>",
        "id": 287319922,
        "sender_full_name": "IRC Bot",
        "timestamp": 1656070707
    },
    {
        "content": "<p>@<strong>sthaan</strong>:   fixes P :: \"'s::finite list ⇒ bool\"</p>",
        "id": 287319923,
        "sender_full_name": "IRC Bot",
        "timestamp": 1656070707
    },
    {
        "content": "<p>@<strong>sthaan</strong>:   shows \"Alm_all P ⟷ (∃n. ∀w. n ≤ length w ⟶ P w)\"</p>",
        "id": 287319925,
        "sender_full_name": "IRC Bot",
        "timestamp": 1656070708
    },
    {
        "content": "<p>@<strong>sthaan</strong>: ```</p>",
        "id": 287319926,
        "sender_full_name": "IRC Bot",
        "timestamp": 1656070708
    },
    {
        "content": "<p>@<strong>sthaan</strong>: ```isabelle</p>",
        "id": 287319985,
        "sender_full_name": "IRC Bot",
        "timestamp": 1656070771
    },
    {
        "content": "<p>@<strong>sthaan</strong>: lemma finite_imp_inj_to_nat_fix_one:</p>",
        "id": 287319987,
        "sender_full_name": "IRC Bot",
        "timestamp": 1656070771
    },
    {
        "content": "<p>@<strong>sthaan</strong>:   fixes A::\"'a set\" and x::'a and y::nat</p>",
        "id": 287319988,
        "sender_full_name": "IRC Bot",
        "timestamp": 1656070771
    },
    {
        "content": "<p>@<strong>sthaan</strong>:   assumes \"finite A\"</p>",
        "id": 287319989,
        "sender_full_name": "IRC Bot",
        "timestamp": 1656070771
    },
    {
        "content": "<p>@<strong>sthaan</strong>:   shows \"∃g. inj_on g A ∧ g x = y\"</p>",
        "id": 287319990,
        "sender_full_name": "IRC Bot",
        "timestamp": 1656070771
    },
    {
        "content": "<p>@<strong>sthaan</strong>: ```</p>",
        "id": 287319991,
        "sender_full_name": "IRC Bot",
        "timestamp": 1656070771
    },
    {
        "content": "<p>@<strong>sthaan</strong>: ```isabelle</p>",
        "id": 287320037,
        "sender_full_name": "IRC Bot",
        "timestamp": 1656070795
    },
    {
        "content": "<p>@<strong>sthaan</strong>: lemma nat_strict_mono_greatest:</p>",
        "id": 287320038,
        "sender_full_name": "IRC Bot",
        "timestamp": 1656070795
    },
    {
        "content": "<p>@<strong>sthaan</strong>:   fixes f::\"nat ⇒ nat\" and N::nat</p>",
        "id": 287320039,
        "sender_full_name": "IRC Bot",
        "timestamp": 1656070796
    },
    {
        "content": "<p>@<strong>sthaan</strong>:   assumes \"strict_mono f\" \"f 0 ≤ N\"</p>",
        "id": 287320040,
        "sender_full_name": "IRC Bot",
        "timestamp": 1656070796
    },
    {
        "content": "<p>@<strong>sthaan</strong>:   obtains n where \"f n ≤ N\" and \"∀m. f m ≤ N ⟶ m ≤ n\"</p>",
        "id": 287320041,
        "sender_full_name": "IRC Bot",
        "timestamp": 1656070796
    },
    {
        "content": "<p>@<strong>sthaan</strong>: ```</p>",
        "id": 287320042,
        "sender_full_name": "IRC Bot",
        "timestamp": 1656070796
    },
    {
        "content": "<p>Hmm I don't know, these seem a bit too specific for my taste.</p>",
        "id": 287320370,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1656071054
    },
    {
        "content": "<p>The third one seems fairly simple to me: for functions <code>nat ⇒ nat</code>, <code>strict_mono f</code> implies <code>filterlim f at_top sequentially</code> (i.e. the sequence <code>f</code> tends to ∞)</p>",
        "id": 287320582,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1656071233
    },
    {
        "content": "<p>Thus there exists some number <code>n</code> such that <code>f n &gt; N</code>, and thus there also exists a least <code>n</code> such that <code>f n &gt; N</code>.</p>",
        "id": 287320612,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1656071261
    },
    {
        "content": "<p>Doing it that way the proof shouldn't be more than like 5 lines or so.</p>",
        "id": 287320624,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1656071274
    },
    {
        "content": "<p>Your second lemma could easily be generalised to <code>countable</code> instead of <code>finite</code>, and in fact it could even be generalised to something like \"if A ⊆ B and B is countable, then any injective function f : A → ℕ can be extended to an injective function g : B → ℕ\"</p>",
        "id": 287320856,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1656071426
    },
    {
        "content": "<p>in that form one could potentially think of adding it to the library (if it doesn't already exist there in a similar form)</p>",
        "id": 287320882,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1656071460
    },
    {
        "content": "<p>(of course this could be generalised even further, but then one has to talk about cardinalities.)</p>",
        "id": 287320897,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1656071471
    },
    {
        "content": "<p>something like \"if A ⊆ B and |B| ≤ |C| as cardinal numbers, then any injective function f : A → C can be extended to an injective function f : A → C\"</p>",
        "id": 287321041,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1656071584
    },
    {
        "content": "<p>err, f : B → C at the end there</p>",
        "id": 287321074,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1656071606
    },
    {
        "content": "<p>actually g : B → C</p>",
        "id": 287321085,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1656071613
    },
    {
        "content": "<p>apparently COVID is eating away my brain</p>",
        "id": 287321095,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1656071621
    },
    {
        "content": "<p>So yeah in any case, that's another criterion: if you want to add it to the library, it should be as general as possible (within reason, of course – if the generalisation is much more complicated, maybe not)</p>",
        "id": 287321191,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1656071665
    },
    {
        "content": "<p>The first one is questionable… the \"finite\" typeclass makes it <em>very</em> restrictive since there aren't that many finite types that you typically use. But it might be somewhat useful. I'd say if it can be proven within just a few lines, I probably wouldn't add it to the library. Otherwise one might consider it.</p>",
        "id": 287321295,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1656071749
    },
    {
        "content": "<p>@<strong>sthaan</strong>: &gt; Thus there exists some number <code>n</code> such that <code>f n &gt; N</code>, and thus there also exists a least <code>n</code> such that <code>f n &gt; N</code>.</p>",
        "id": 287321938,
        "sender_full_name": "IRC Bot",
        "timestamp": 1656072224
    },
    {
        "content": "<p>@<strong>sthaan</strong>: Yes, but this is not the conclusion of nat_strict_mono_greatest?</p>",
        "id": 287321939,
        "sender_full_name": "IRC Bot",
        "timestamp": 1656072224
    },
    {
        "content": "<p>Okay well you still have to subtract 1 I guess.</p>",
        "id": 287322048,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1656072295
    },
    {
        "content": "<p>Or you just use the <code>GREATEST</code> operator instead.</p>",
        "id": 287322073,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1656072321
    },
    {
        "content": "<p>Should also work.</p>",
        "id": 287322080,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1656072325
    },
    {
        "content": "<p>Or indeed you just write <code>Max {n. f n ≤ N}</code>, which works because <code>{n. f n ≤ N} ⊆ {..&lt;n0}</code> which implies finiteness (where <code>n0</code> is that number we obtained where <code>f n0 &gt; N</code>)</p>",
        "id": 287322223,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1656072408
    },
    {
        "content": "<p>@<strong>sthaan</strong>: yes, that's kind of how we proved it :)</p>",
        "id": 287322431,
        "sender_full_name": "IRC Bot",
        "timestamp": 1656072557
    },
    {
        "content": "<p>@<strong>sthaan</strong>: <a href=\"https://upload.kikeriki.at:5281/file_share/CyLYWnTQcroiClZP2sqgb_Rf/nat_strict_mono_greatest.txt\">https://upload.kikeriki.at:5281/file_share/CyLYWnTQcroiClZP2sqgb_Rf/nat_strict_mono_greatest.txt</a></p>",
        "id": 287322452,
        "sender_full_name": "IRC Bot",
        "timestamp": 1656072575
    },
    {
        "content": "<p>@<strong>sthaan</strong>: ok this file got mangled somehow (?)</p>",
        "id": 287322679,
        "sender_full_name": "IRC Bot",
        "timestamp": 1656072702
    },
    {
        "content": "<p>@<strong>sthaan</strong>: <a href=\"https://upload.kikeriki.at:5281/file_share/V1QOjCVk71LJno_MLPvxp7Ex/nat_strict_mono_greatest.txt\">https://upload.kikeriki.at:5281/file_share/V1QOjCVk71LJno_MLPvxp7Ex/nat_strict_mono_greatest.txt</a></p>",
        "id": 287322745,
        "sender_full_name": "IRC Bot",
        "timestamp": 1656072725
    },
    {
        "content": "<p>@<strong>sthaan</strong>: ok the proof for <code>finite_imp_inj_to_nat_fix_one</code> for countable A is probably kind of lengthy...:</p>",
        "id": 287327928,
        "sender_full_name": "IRC Bot",
        "timestamp": 1656075961
    },
    {
        "content": "<p>@<strong>sthaan</strong>: <a href=\"https://upload.kikeriki.at:5281/file_share/4iltzEL5YrsLohGfv2NuhMWv/Contrib.thy\">https://upload.kikeriki.at:5281/file_share/4iltzEL5YrsLohGfv2NuhMWv/Contrib.thy</a></p>",
        "id": 287327974,
        "sender_full_name": "IRC Bot",
        "timestamp": 1656075966
    },
    {
        "content": "<p>@<strong>rawburt</strong>: hey all. i'm working through <a href=\"https://github.com/nipkow/fds_ss20/blob/master/ex01.pdf\">https://github.com/nipkow/fds_ss20/blob/master/ex01.pdf</a> and i'm having trouble proving the <code>lmax</code> function. (i'm not a student... just trying to learn through these resources :) i've tried a few helper lemmas and nothing seems to stick. i've created a few infinite loops. here's my code <a href=\"https://gist.github.com/rawburt/2e8596e44241b46aecfd5607988f4167\">https://gist.github.com/rawburt/2e8596e44241b46aecfd5607988f4167</a> it doesn't include any of the failed attempts. the hint in t</p>",
        "id": 295273950,
        "sender_full_name": "IRC Bot",
        "timestamp": 1661447580
    },
    {
        "content": "<p>@<strong>rawburt</strong>: the hint in the worksheet says \"you may need an auxiliary lemma about lmax and snoc\" and i'm failing to discover what the lemma may be. any nudges in the right direction would be much appreciated. thanks!</p>",
        "id": 295274029,
        "sender_full_name": "IRC Bot",
        "timestamp": 1661447616
    },
    {
        "content": "<p>I think a list to its reverse behave similar to # to snoc :)</p>",
        "id": 295278290,
        "sender_full_name": "Alexander Taepper",
        "timestamp": 1661449116
    },
    {
        "content": "<p>@<strong>rawburt</strong>: thanks! i'll poke around some more</p>",
        "id": 295287917,
        "sender_full_name": "IRC Bot",
        "timestamp": 1661452372
    },
    {
        "content": "<p>To expand a bit more on this: a common approach with these problems is to see where the simplifier gets stuck.</p>",
        "id": 295295619,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1661455273
    },
    {
        "content": "<p>If you have a goal where you have something like \"length (append xs ys)\", then that's a sign that you need to prove a lemma about how \"length\" and \"append\" interact. And that perhaps you even want to add that as a [simp] lemma.</p>",
        "id": 295295821,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1661455349
    },
    {
        "content": "<p>The situation here is probably similar, just with lmax and snoc.</p>",
        "id": 295295846,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1661455362
    },
    {
        "content": "<p>@<strong>rawburt</strong>: i've definitely been doing that. i'm quite new to it all so the full vision/intuition isn't quite there. but, that's why i'm working through these exercises :)</p>",
        "id": 295295942,
        "sender_full_name": "IRC Bot",
        "timestamp": 1661455406
    },
    {
        "content": "<p>@<strong>rawburt</strong>: i appreciate all the pointers and feedback</p>",
        "id": 295296025,
        "sender_full_name": "IRC Bot",
        "timestamp": 1661455438
    },
    {
        "content": "<p>Well if you need further hints feel free to ask.</p>",
        "id": 295296305,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1661455542
    },
    {
        "content": "<p>The learning curve for theorem provers is pretty horrible.</p>",
        "id": 295296391,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1661455566
    },
    {
        "content": "<p>@<strong>rawburt</strong>: yes it is, ha!</p>",
        "id": 295296877,
        "sender_full_name": "IRC Bot",
        "timestamp": 1661455751
    },
    {
        "content": "<p>@<strong>rawburt</strong>: but that's part of the fun... and the pain</p>",
        "id": 295296940,
        "sender_full_name": "IRC Bot",
        "timestamp": 1661455782
    },
    {
        "content": "<p>@<strong>shamelessshill</strong>: Sorry for asking this, but anybody in here?</p>",
        "id": 387810569,
        "sender_full_name": "IRC Bot",
        "timestamp": 1693286818
    },
    {
        "content": "<p>Hi, most people are on zulip (<a href=\"http://isabelle.zulipchat.com\">isabelle.zulipchat.com</a>) or on the mailing list.</p>",
        "id": 387828051,
        "sender_full_name": "Lukas Stevens",
        "timestamp": 1693296107
    },
    {
        "content": "<p>@<strong>zzai`ed</strong>: <a href=\"https://www.youtube.com/watch?v=sqSA-SY5Hro\">https://www.youtube.com/watch?v=sqSA-SY5Hro</a></p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"sqSA-SY5Hro\" href=\"https://www.youtube.com/watch?v=sqSA-SY5Hro\"><img src=\"https://uploads.zulipusercontent.net/06edf6f43312c47ed4a0fe32d7e863bc905a7294/68747470733a2f2f692e7974696d672e636f6d2f76692f737153412d53593548726f2f64656661756c742e6a7067\"></a></div>",
        "id": 395259478,
        "sender_full_name": "IRC Bot",
        "timestamp": 1696598634
    },
    {
        "content": "<p>@<strong>zzai`ed</strong>: God, if you’re 5 foot 3 and you’re 300 pounds</p>",
        "id": 395259480,
        "sender_full_name": "IRC Bot",
        "timestamp": 1696598635
    },
    {
        "content": "<p>@<strong>zzai`ed</strong>: Taxes ought not to pay for your bags of fudge rounds</p>",
        "id": 395259482,
        "sender_full_name": "IRC Bot",
        "timestamp": 1696598636
    },
    {
        "content": "<p>@<strong>zzai`ed</strong>: Young men are puttin’ themselves six feet in the ground</p>",
        "id": 395259487,
        "sender_full_name": "IRC Bot",
        "timestamp": 1696598637
    },
    {
        "content": "<p>@<strong>zzai`ed</strong>: ‘Cause all this damn country does is keep on kickin’ them down</p>",
        "id": 395259491,
        "sender_full_name": "IRC Bot",
        "timestamp": 1696598638
    },
    {
        "content": "<p>@<strong>zzai`ed</strong>: <a href=\"http://irc.supernets.org\">irc.supernets.org</a> #superbowl</p>",
        "id": 395259494,
        "sender_full_name": "IRC Bot",
        "timestamp": 1696598639
    },
    {
        "content": "<p>@**zzai<code>ed**: zzai</code>ed pie_ dagit landonf bfiedler int-e isabelle_zulip proidiot mal``</p>",
        "id": 395259497,
        "sender_full_name": "IRC Bot",
        "timestamp": 1696598640
    },
    {
        "content": "<p>@<strong>baruchel</strong>: Somebody here?</p>",
        "id": 407324550,
        "sender_full_name": "IRC Bot",
        "timestamp": 1702331041
    }
]