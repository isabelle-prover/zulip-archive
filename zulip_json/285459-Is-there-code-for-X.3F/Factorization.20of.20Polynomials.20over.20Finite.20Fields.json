[
    {
        "content": "<p>Hi, <br>\nI am trying to factorize polynomials over a finite field Fp (p is prime) into irreducible parts. <br>\nI am aware of the Berlekamp-Zassenhaus formalization, which covers integer polynomials, real polynomials, and square-free polynomials over finite fields, but I couldn't find a formalization for non-square-free polynomials over finite fields. <br>\nAdditionally, there seems to be no general formalization for an algorithm that separates a polynomial over a finite field into square-free parts, the Yun algorithm works only on a Field with characteristic 0, which doesn't hold for Fp (where char(Fp)=p).<br>\nAlthough the mathematical literature commonly refers to the conversion into square-free parts as \"easily done\", I find the formalization of such algorithms (namely the \"Square-free factorization\" algorithm and the \"Elimination of Repeated Factors\" algorithm) quite time-intensive, and hence would greatly appreciate any help :)</p>\n<p>Side note:<br>\nIf you know how to compute all roots (in the sense of x for \\&lt;phi&gt;(x) = 0) of a polynomial over a finite field, that would also solve the problem for me :)</p>",
        "id": 373316615,
        "sender_full_name": "Tobias Rothmann",
        "timestamp": 1688759800
    },
    {
        "content": "<p>Maybe try asking René Thiemann by email. He might know, but I don't think he reads Zulip much. I do think he's on holiday right now though, so you might not get an answer that quickly.</p>",
        "id": 373909629,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1688985480
    },
    {
        "content": "<p>Thanks for the hint, I'll contact him :)</p>",
        "id": 374535707,
        "sender_full_name": "Tobias Rothmann",
        "timestamp": 1689151924
    },
    {
        "content": "<p>(I'm really late to the answer here) did you get an answer to this? if not I believe Berlekamp-Zassenhaus can already do what you want, for example, <a href=\"https://en.wikipedia.org/wiki/Cantor%E2%80%93Zassenhaus_algorithm\">https://en.wikipedia.org/wiki/Cantor%E2%80%93Zassenhaus_algorithm</a> (see first line in Background section)</p>",
        "id": 393613217,
        "sender_full_name": "Yong Kiam",
        "timestamp": 1695874962
    },
    {
        "content": "<p>I think so, too, but you need to do a square free factorisation first</p>",
        "id": 393912741,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1695986917
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"234226\">Yong Kiam</span> <a href=\"#narrow/stream/285459-Is-there-code-for-X.3F/topic/Factorization.20of.20Polynomials.20over.20Finite.20Fields/near/393613217\">said</a>:</p>\n<blockquote>\n<p>(I'm really late to the answer here) did you get an answer to this? if not I believe Berlekamp-Zassenhaus can already do what you want, for example, <a href=\"https://en.wikipedia.org/wiki/Cantor%E2%80%93Zassenhaus_algorithm\">https://en.wikipedia.org/wiki/Cantor%E2%80%93Zassenhaus_algorithm</a> (see first line in Background section)</p>\n</blockquote>\n<p>Hi thanks for the answer! :)<br>\nAs Manuel said, I'm looking for \"non square-free\" factorization and the first line you're referring to says \"square-free polynomial\", right?</p>\n<blockquote>\n<p>The Cantor–Zassenhaus algorithm takes as input a square-free polynomial</p>\n</blockquote>",
        "id": 393936128,
        "sender_full_name": "Tobias Rothmann",
        "timestamp": 1695995862
    },
    {
        "content": "<p>The trick to check whether a polynomial is square-free is to compute the gcd of it with its formal derivative.</p>",
        "id": 393938828,
        "sender_full_name": "Emin Karayel",
        "timestamp": 1695996751
    },
    {
        "content": "<p>E.g. if f has a  square factor g then g will divide both f and f'.</p>",
        "id": 393939013,
        "sender_full_name": "Emin Karayel",
        "timestamp": 1695996793
    },
    {
        "content": "<p>I'm not sure whether you're using HOL-Algebra (I had defined formal polynomial derivates for them \"<a href=\"https://www.isa-afp.org/theories/finite_fields/#Formal_Polynomial_Derivatives\">https://www.isa-afp.org/theories/finite_fields/#Formal_Polynomial_Derivatives</a>\" )</p>",
        "id": 393939183,
        "sender_full_name": "Emin Karayel",
        "timestamp": 1695996844
    },
    {
        "content": "<p>There is also a library for formal derivatives in HOL-Computational_Algebra (if you're using the type-based approach)</p>",
        "id": 393939371,
        "sender_full_name": "Emin Karayel",
        "timestamp": 1695996875
    },
    {
        "content": "<p>It's called pderiv (defined in \"<a href=\"https://isabelle.in.tum.de/library/HOL/HOL-Computational_Algebra/Polynomial.html\">https://isabelle.in.tum.de/library/HOL/HOL-Computational_Algebra/Polynomial.html</a>\")</p>",
        "id": 393939669,
        "sender_full_name": "Emin Karayel",
        "timestamp": 1695996945
    },
    {
        "content": "<p>By repeatedly dividing by gcd(f,f') the polynomial can be split into a product of square-free polynomials.</p>",
        "id": 393941980,
        "sender_full_name": "Emin Karayel",
        "timestamp": 1695997629
    },
    {
        "content": "<p>Hi thanks for the answer!<br>\nBasically yes I think, but I think there is one more step with taking the p-th root (I think due to something with the characteristic of the Field being non-zero?).<br>\nSee the ERF (Elimination of Repeated Factors) algorithm here: <a href=\"https://carleton.ca/math/wp-content/uploads/Factoring-Polynomials-over-Finite-Fields_Melissa-Scott.pdf\">https://carleton.ca/math/wp-content/uploads/Factoring-Polynomials-over-Finite-Fields_Melissa-Scott.pdf</a><br>\nSeems like this algorithm has to be formalized at some point haha...<br>\nLuckily I already got some help from <span class=\"user-mention\" data-user-id=\"402404\">@Katharina Kreuzer</span>  who's trying to formalize the ERF in some spare time (thanks a lot again BTW :) ).</p>",
        "id": 393944202,
        "sender_full_name": "Tobias Rothmann",
        "timestamp": 1695998354
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"627272\">Tobias Rothmann</span> <a href=\"#narrow/stream/285459-Is-there-code-for-X.3F/topic/Factorization.20of.20Polynomials.20over.20Finite.20Fields/near/393944202\">said</a>:</p>\n<blockquote>\n<p>Hi thanks for the answer!<br>\nBasically yes I think, but I think there is one more step with taking the p-th root (I think due to something with the characteristic of the Field being non-zero?).<br>\nSee the ERF (Elimination of Repeated Factors) algorithm here: <a href=\"https://carleton.ca/math/wp-content/uploads/Factoring-Polynomials-over-Finite-Fields_Melissa-Scott.pdf\">https://carleton.ca/math/wp-content/uploads/Factoring-Polynomials-over-Finite-Fields_Melissa-Scott.pdf</a><br>\nSeems like this algorithm has to be formalized at some point haha...<br>\nLuckily I already got some help from <span class=\"user-mention silent\" data-user-id=\"402404\">Katharina Kreuzer</span>  who's trying to formalize the ERF in some spare time (thanks a lot again BTW :) ).</p>\n</blockquote>\n<p>Sounds good. Let me know if it works - and nice project btw. :)</p>",
        "id": 393946115,
        "sender_full_name": "Emin Karayel",
        "timestamp": 1695998989
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"431446\">Emin Karayel</span> <a href=\"#narrow/stream/285459-Is-there-code-for-X.3F/topic/Factorization.20of.20Polynomials.20over.20Finite.20Fields/near/393946115\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"627272\">Tobias Rothmann</span> <a href=\"#narrow/stream/285459-Is-there-code-for-X.3F/topic/Factorization.20of.20Polynomials.20over.20Finite.20Fields/near/393944202\">said</a>:</p>\n<blockquote>\n<p>Hi thanks for the answer!<br>\nBasically yes I think, but I think there is one more step with taking the p-th root (I think due to something with the characteristic of the Field being non-zero?).<br>\nSee the ERF (Elimination of Repeated Factors) algorithm here: <a href=\"https://carleton.ca/math/wp-content/uploads/Factoring-Polynomials-over-Finite-Fields_Melissa-Scott.pdf\">https://carleton.ca/math/wp-content/uploads/Factoring-Polynomials-over-Finite-Fields_Melissa-Scott.pdf</a><br>\nSeems like this algorithm has to be formalized at some point haha...<br>\nLuckily I already got some help from <span class=\"user-mention silent\" data-user-id=\"402404\">Katharina Kreuzer</span>  who's trying to formalize the ERF in some spare time (thanks a lot again BTW :) ).</p>\n</blockquote>\n<p>Sounds good. Let me know if it works - and nice project btw. :)</p>\n</blockquote>\n<p>Sure! And thanks a lot :)</p>",
        "id": 393946898,
        "sender_full_name": "Tobias Rothmann",
        "timestamp": 1695999254
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"627272\">Tobias Rothmann</span> <a href=\"#narrow/stream/285459-Is-there-code-for-X.3F/topic/Factorization.20of.20Polynomials.20over.20Finite.20Fields/near/393936128\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"234226\">Yong Kiam</span> <a href=\"#narrow/stream/285459-Is-there-code-for-X.3F/topic/Factorization.20of.20Polynomials.20over.20Finite.20Fields/near/393613217\">said</a>:</p>\n<blockquote>\n<p>(I'm really late to the answer here) did you get an answer to this? if not I believe Berlekamp-Zassenhaus can already do what you want, for example, <a href=\"https://en.wikipedia.org/wiki/Cantor%E2%80%93Zassenhaus_algorithm\">https://en.wikipedia.org/wiki/Cantor%E2%80%93Zassenhaus_algorithm</a> (see first line in Background section)</p>\n</blockquote>\n<p>Hi thanks for the answer! :)<br>\nAs Manuel said, I'm looking for \"non square-free\" factorization and the first line you're referring to says \"square-free polynomial\", right?</p>\n<blockquote>\n<p>The Cantor–Zassenhaus algorithm takes as input a square-free polynomial<br>\n</p>\n</blockquote>\n</blockquote>\n<p>ah sorry I hadn't checked the Zulip for a bit, I should have quoted this part of the Wikipedia sentence, which is what <span class=\"user-mention\" data-user-id=\"431446\">@Emin Karayel</span>  said </p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"o\">(</span><span class=\"n\">algorithms</span><span class=\"w\"> </span><span class=\"n\">exist</span><span class=\"w\"> </span><span class=\"kp\">for</span><span class=\"w\"> </span><span class=\"n\">efficiently</span><span class=\"w\"> </span><span class=\"n\">factoring</span><span class=\"w\"> </span><span class=\"n\">arbitrary</span><span class=\"w\"> </span><span class=\"n\">polynomials</span><span class=\"w\"> </span><span class=\"n\">into</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">product</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">polynomials</span><span class=\"w\"> </span><span class=\"n\">satisfying</span><span class=\"w\"> </span><span class=\"n\">these</span><span class=\"w\"> </span><span class=\"n\">conditions</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"kp\">for</span><span class=\"w\"> </span><span class=\"kn\">instance</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">/</span><span class=\"w\"> </span><span class=\"n\">gcd</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"n\">′</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"ow\">{</span><span class=\"n\">\\displaystyle</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span><span class=\"n\">/\\gcd</span><span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">),</span><span class=\"n\">f'</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">))</span><span class=\"ow\">}</span><span class=\"w\"> </span><span class=\"kp\">is</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">squarefree</span><span class=\"w\"> </span><span class=\"n\">polynomial</span><span class=\"w\"> </span><span class=\"k\">with</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">same</span><span class=\"w\"> </span><span class=\"n\">factors</span><span class=\"w\"> </span><span class=\"n\">as</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">),</span>\n</code></pre></div>",
        "id": 394287864,
        "sender_full_name": "Yong Kiam",
        "timestamp": 1696208697
    },
    {
        "content": "<p>It's a bit more difficult than that in finite characteristic, I fear, since taking the derivative might kill some or all of the coefficients in the polynomial. For example, in characteristic <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>p</mi></mrow><annotation encoding=\"application/x-tex\">p</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">p</span></span></span></span> the derivative of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>x</mi><mi>p</mi></msup></mrow><annotation encoding=\"application/x-tex\">x^p</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6644em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">p</span></span></span></span></span></span></span></span></span></span></span> is <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0</span></span></span></span> and therefore dividing out the GCD of the polynomial and its derivative would just give us <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span>.</p>",
        "id": 395044148,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1696512647
    },
    {
        "content": "<p>The ERF algorithm linked above detects this problem and fixes it. At least if I understood things correctly – I only skimmed it briefly.</p>",
        "id": 395044281,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1696512689
    },
    {
        "content": "<p>Just for the sake of completeness, this is now in the AFP:<br>\n<a href=\"https://www.isa-afp.org/entries/Perfect_Fields.html\">https://www.isa-afp.org/entries/Perfect_Fields.html</a><br>\n<a href=\"https://www.isa-afp.org/entries/Elimination_Of_Repeated_Factors.html\">https://www.isa-afp.org/entries/Elimination_Of_Repeated_Factors.html</a></p>",
        "id": 406022916,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1701771479
    }
]