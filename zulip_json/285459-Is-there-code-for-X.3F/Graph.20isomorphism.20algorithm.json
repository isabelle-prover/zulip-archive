[
    {
        "content": "<p>Hi,</p>\n<p>I am wondering if there is a verified graph isomorphism algorithm on the AFP.</p>\n<p>I came across some papers that seem to involve algorithms for isomorphism checking (<a href=\"https://isabelle.in.tum.de/~nipkow/pubs/itp11.pdf\">https://isabelle.in.tum.de/~nipkow/pubs/itp11.pdf</a>, <a href=\"https://pmc.ncbi.nlm.nih.gov/articles/PMC7324030/\">https://pmc.ncbi.nlm.nih.gov/articles/PMC7324030/</a>), but could not find these developments on the AFP.</p>\n<p>I am also aware of <a href=\"https://github.com/mabdula/Isabelle-Graph-Library\">https://github.com/mabdula/Isabelle-Graph-Library</a>, but did not see an isomorphism algorithm there.</p>",
        "id": 528490957,
        "sender_full_name": "Sage Binder",
        "timestamp": 1752364512
    },
    {
        "content": "<p>I don't think so. The positive answer is of course very easy to certify, and that's usually the one people care about. So perhaps the incentive to formalise an algorithm for this has not been too big. I don't know how much work you have to do to get significantly better performance than brute-forcing, but competitive GI solvers are quite complex, I think.</p>\n<p><span class=\"user-mention\" data-user-id=\"233212\">@Mohammad Abdulaziz</span> ought to know much more about this.</p>",
        "id": 528542112,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1752425505
    },
    {
        "content": "<p>As far as I know <a href=\"https://github.com/ciaranm/glasgow-subgraph-solver\">https://github.com/ciaranm/glasgow-subgraph-solver</a> is the most advanced certifying approach</p>",
        "id": 528544593,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1752427833
    },
    {
        "content": "<p>(but not verifiedâ€¦ from Ciaran McCreesh's talks it is not easy )</p>",
        "id": 528544638,
        "sender_full_name": "Mathias Fleury",
        "timestamp": 1752427881
    },
    {
        "content": "<p>I am certain there is a calculus for certifying graph isomorphism by Filip Maric. It is formalised and shown to indeed certify Naughty style isomorphism solvers in Isabelle, iirc. I wanted to integrate it with the graph library you pointed to above</p>",
        "id": 528562549,
        "sender_full_name": "Mohammad Abdulaziz",
        "timestamp": 1752446207
    },
    {
        "content": "<p>Here is a link:</p>\n<p><a href=\"https://lmcs.episciences.org/10892\">https://lmcs.episciences.org/10892</a></p>",
        "id": 528562560,
        "sender_full_name": "Mohammad Abdulaziz",
        "timestamp": 1752446219
    },
    {
        "content": "<p>Let me know if that is a topic you want to further explore</p>",
        "id": 528562614,
        "sender_full_name": "Mohammad Abdulaziz",
        "timestamp": 1752446292
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"233198\">Mathias Fleury</span> <a href=\"#narrow/stream/285459-Is-there-code-for-X.3F/topic/Graph.20isomorphism.20algorithm/near/528544593\">said</a>:</p>\n<blockquote>\n<p>As far as I know <a href=\"https://github.com/ciaranm/glasgow-subgraph-solver\">https://github.com/ciaranm/glasgow-subgraph-solver</a> is the most advanced certifying approach</p>\n</blockquote>\n<p>I think that <span class=\"user-mention\" data-user-id=\"234226\">@Yong Kiam</span> has a verified checker for that in HOL4</p>",
        "id": 528582263,
        "sender_full_name": "irvin",
        "timestamp": 1752467098
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"714722\">irvin</span> <a href=\"#narrow/channel/285459-Is-there-code-for-X.3F/topic/Graph.20isomorphism.20algorithm/near/528582263\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"233198\">Mathias Fleury</span> <a href=\"#narrow/stream/285459-Is-there-code-for-X.3F/topic/Graph.20isomorphism.20algorithm/near/528544593\">said</a>:</p>\n<blockquote>\n<p>As far as I know <a href=\"https://github.com/ciaranm/glasgow-subgraph-solver\">https://github.com/ciaranm/glasgow-subgraph-solver</a> is the most advanced certifying approach</p>\n</blockquote>\n<p>I think that <span class=\"user-mention silent\" data-user-id=\"234226\">Yong Kiam</span> has a verified checker for that in HOL4</p>\n</blockquote>\n<p>we can certify both positive/negative answers generated by the Glasgow subgraph solver.</p>\n<p>besides verified algorithms vs certifying algorithms, I think there's also a substantial difference if this thread is meant to be asking about verifying a real GI solver or something more on the theoretical end.</p>",
        "id": 528586965,
        "sender_full_name": "Yong Kiam",
        "timestamp": 1752470932
    },
    {
        "content": "<p>(if it is the former on verifying a real GI solver, I agree with <span class=\"user-mention\" data-user-id=\"233198\">@Mathias Fleury</span>'s assessment)</p>\n<p>edit: actually if it is the latter, I also guess it's not esay <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 528587157,
        "sender_full_name": "Yong Kiam",
        "timestamp": 1752471081
    },
    {
        "content": "<p>Thank you for the responses!</p>\n<p>I was interested in this problem in the context of graph enumeration up to isomorphism. I've seen, for instance, tree enumeration on the AFP, but in that case I believe isomorphic copies were avoided by construction. A little while ago, I was experimenting with enumerating a particular type of graph up to isomorphism, up to around 20 vertices, so I wrote the enumeration algorithm, including an isomorphism checker, in Isabelle (and verified the isomorphism checker part). The isomorphism checker does some hashing to improve performance, but is by no means advanced (and does not check for subgraph isomorphism). As I did not finish verification of the enumeration, nothing is on the AFP yet, but I was considering submitting the verified isomorphism checker by itself. But, I know that GI is a deep problem so I was wondering what other work is out there.</p>\n<p>Based on this thread, my understanding is that the main interest is going to be in certifying GI outputs rather than verifying a GI algorithm directly, since the state-of-the-art GI algorithms are very complex.</p>\n<p>I wonder how this certificate-based approach would extend to verified graph enumeration, though. The only instance of verified graph enumeration I've seen is the Nipkow paper previously linked (well, there is also the tree enumeration on the AFP, but again I believe that avoids isomorphic copies by construction).</p>\n<p>Anyways, perhaps a basic verified isomorphism checker can be useful to other users for experiments in graph enumeration, so I will try and submit that soon.</p>\n<p><span class=\"user-mention\" data-user-id=\"233212\">@Mohammad Abdulaziz</span> Yes, I am certainly interested in exploring verified graph algorithms! (By the way, will you be at ITP this year? I was hoping to have a chance to connect with you then.)</p>",
        "id": 528724760,
        "sender_full_name": "Sage Binder",
        "timestamp": 1752520469
    },
    {
        "content": "<p>Yes, I will be there. See you in September!</p>",
        "id": 529154345,
        "sender_full_name": "Mohammad Abdulaziz",
        "timestamp": 1752694246
    }
]