[
    {
        "content": "<p>Have multinomial coefficients and the <a href=\"https://en.wikipedia.org/wiki/Multinomial_theorem\">multinomial theorem</a> been formalized in Isabelle/HOL?</p>",
        "id": 314210372,
        "sender_full_name": "Marco David",
        "timestamp": 1670323750
    },
    {
        "content": "<p>I don't think so, but it should be very easy. Just an induction using the binomial theorem in each step.</p>",
        "id": 314211923,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1670324314
    },
    {
        "content": "<p>Alright, thanks.</p>",
        "id": 314212304,
        "sender_full_name": "Marco David",
        "timestamp": 1670324445
    },
    {
        "content": "<p>Most natural way to state it would probably be like this (using <code>HOL-Library.FuncSet</code>):</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">multinomial</span><span class=\"o\">:</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"s\">\"card {f∈A →⇩E B. ∀x∈B. card (f -` {x} ∩ A) = h x} * (∏x∈B. fact (h x)) =</span>\n<span class=\"s\">     fact (card A)\"</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 314212705,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1670324585
    },
    {
        "content": "<p>A direct proof is probably also possible by constructing a bijection</p>",
        "id": 314212730,
        "sender_full_name": "Manuel Eberl",
        "timestamp": 1670324596
    },
    {
        "content": "<p>in case it's helpful for anyone in the future, here's my version of it (sorry for the lateness as I just joined this Zulip chat)</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">finite_card_fixed_length_lists</span><span class=\"o\">:</span>\n<span class=\"w\">  </span><span class=\"kp\">assumes</span><span class=\"w\"> </span><span class=\"s\">\"finite X\"</span>\n<span class=\"w\">  </span><span class=\"kp\">shows</span>\n<span class=\"w\">    </span><span class=\"s\">\"finite {ls. length ls = n ∧ set ls ⊆ X}\"</span>\n<span class=\"w\">    </span><span class=\"s\">\"card {ls. length ls = n ∧ set ls ⊆ X} = card X ^ n\"</span>\n<span class=\"k\">proof</span><span class=\"w\"> </span><span class=\"o\">-</span>\n<span class=\"w\">  </span><span class=\"k\">obtain</span><span class=\"w\"> </span><span class=\"n\">xs</span><span class=\"w\"> </span><span class=\"kp\">where</span><span class=\"w\"> </span><span class=\"s\">\"X = set xs\"</span>\n<span class=\"w\">    </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">assms</span><span class=\"w\"> </span><span class=\"n\">finite_list</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">blast</span>\n<span class=\"w\">  </span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"s\">\"finite {ls. length ls = n ∧ set ls ⊆ X}\"</span>\n<span class=\"w\">    </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">smt</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">verit</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">Collect_mono_iff</span><span class=\"w\"> </span><span class=\"n\">assms</span><span class=\"w\"> </span><span class=\"n\">finite_lists_length_eq</span><span class=\"w\"> </span><span class=\"n\">rev_finite_subset</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"s\">\"card {ls. length ls = n ∧ set ls ⊆ X} = card X ^ n\"</span>\n<span class=\"w\">    </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">metis</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">no_types</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">lifting</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">Collect_cong</span><span class=\"w\"> </span><span class=\"n\">assms</span><span class=\"w\"> </span><span class=\"n\">card_lists_length_eq</span><span class=\"o\">)</span>\n<span class=\"k\">qed</span>\n\n<span class=\"c\">(* Multinomial coefficient:</span>\n<span class=\"c\">  this definition makes it slightly easier to prove the</span>\n<span class=\"c\">  multinomial theorem</span>\n<span class=\"c\">*)</span>\n<span class=\"k\">definition</span><span class=\"w\"> </span><span class=\"n\">multinomial</span><span class=\"w\"> </span><span class=\"o\">::</span><span class=\"w\"> </span><span class=\"s\">\"nat ⇒ nat list ⇒ nat\"</span><span class=\"w\">  </span><span class=\"o\">(</span><span class=\"kp\">infixl</span><span class=\"w\"> </span><span class=\"s\">\"mchoose\"</span><span class=\"w\"> </span><span class=\"n\">65</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"kp\">where</span><span class=\"w\"> </span><span class=\"s\">\"n mchoose ks =</span>\n<span class=\"s\">  fact n div prod_list (map fact ks)\"</span>\n\n<span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">prod_list_dvd_fact_sum_list</span><span class=\"o\">:</span>\n<span class=\"w\">  </span><span class=\"kp\">shows</span><span class=\"w\"> </span><span class=\"s\">\"prod_list (map fact ks) dvd fact (sum_list ks)\"</span>\n<span class=\"k\">proof</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">induction</span><span class=\"w\"> </span><span class=\"n\">ks</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"k\">case</span><span class=\"w\"> </span><span class=\"n\">Nil</span>\n<span class=\"w\">  </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"k\">case</span>\n<span class=\"w\">    </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">auto</span><span class=\"w\"> </span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"n\">add</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">dvd_def</span><span class=\"o\">)</span>\n<span class=\"k\">next</span>\n<span class=\"w\">  </span><span class=\"k\">case</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Cons</span><span class=\"w\"> </span><span class=\"n\">k</span><span class=\"w\"> </span><span class=\"n\">ks</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"k\">case</span>\n<span class=\"w\">    </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"n\">auto</span>\n<span class=\"w\">    </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">smt</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">verit</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">add_diff_cancel_left'</span><span class=\"w\"> </span><span class=\"n\">binomial_fact_lemma</span><span class=\"w\"> </span><span class=\"n\">dvd_def</span><span class=\"w\"> </span><span class=\"n\">le_add1</span><span class=\"w\"> </span><span class=\"n\">mult.assoc</span><span class=\"w\"> </span><span class=\"n\">of_nat_fact</span><span class=\"w\"> </span><span class=\"n\">of_nat_mult</span><span class=\"o\">)</span>\n<span class=\"k\">qed</span>\n\n<span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">multinomial_dvd</span><span class=\"o\">:</span>\n<span class=\"w\">  </span><span class=\"kp\">assumes</span><span class=\"w\"> </span><span class=\"s\">\"sum_list ks ≤ n\"</span>\n<span class=\"w\">  </span><span class=\"kp\">shows</span><span class=\"w\"> </span><span class=\"s\">\"prod_list (map fact ks) dvd fact n\"</span>\n<span class=\"w\">  </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">metis</span><span class=\"w\"> </span><span class=\"n\">assms</span><span class=\"w\"> </span><span class=\"n\">binomial_fact_lemma</span><span class=\"w\"> </span><span class=\"n\">dvd_def</span><span class=\"w\"> </span><span class=\"n\">mult.assoc</span><span class=\"w\"> </span><span class=\"n\">of_nat_fact</span><span class=\"w\"> </span><span class=\"n\">of_nat_mult</span><span class=\"w\"> </span><span class=\"n\">prod_list_dvd_fact_sum_list</span><span class=\"o\">)</span>\n\n<span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">finite_sum_list_eq</span><span class=\"o\">:</span>\n<span class=\"w\">  </span><span class=\"s\">\"finite {ks. length ks = x ∧ sum_list ks = (y::nat)}\"</span>\n<span class=\"k\">proof</span><span class=\"w\"> </span><span class=\"o\">-</span>\n<span class=\"w\">  </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"n\">*</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"{ks. length ks = x ∧ sum_list ks = (y::nat)} ⊆</span>\n<span class=\"s\">    {ks. length ks = x ∧ set ks ⊆ {0..y}}\"</span>\n<span class=\"w\">    </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"n\">auto</span>\n<span class=\"w\">    </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"n\">add</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">member_le_sum_list</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"s\">\"finite  {ks. length ks = x ∧ set ks ⊆ {0..y}}\"</span>\n<span class=\"w\">    </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">finite_card_fixed_length_lists</span>\n<span class=\"w\">    </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">blast</span>\n<span class=\"w\">  </span><span class=\"k\">thus</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">thesis</span><span class=\"w\"> </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">*</span>\n<span class=\"w\">    </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">meson</span><span class=\"w\"> </span><span class=\"n\">rev_finite_subset</span><span class=\"o\">)</span>\n<span class=\"k\">qed</span>\n\n<span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">sum_split_k</span><span class=\"o\">:</span>\n<span class=\"w\">  </span><span class=\"kp\">shows</span><span class=\"w\"> </span><span class=\"s\">\"sum f {ks. length ks = Suc x ∧ sum_list ks = n} =</span>\n<span class=\"s\">    (∑k≤n. sum (λks. f ((k::nat) # ks)) {ks. length ks = x ∧ sum_list ks = n - k})\"</span>\n<span class=\"k\">proof</span><span class=\"w\"> </span><span class=\"o\">-</span>\n<span class=\"w\">  </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"n\">*</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"{ks. length ks = Suc x ∧ sum_list ks = n} =</span>\n<span class=\"s\">    (⋃k≤n.</span>\n<span class=\"s\">    (λks. k # ks) `</span>\n<span class=\"s\">    {ks. length ks = x ∧ sum_list ks = n - k})\"</span>\n<span class=\"w\">    </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"n\">auto</span>\n<span class=\"w\">  </span><span class=\"k\">proof</span><span class=\"w\"> </span><span class=\"o\">-</span>\n<span class=\"w\">    </span><span class=\"k\">fix</span><span class=\"w\"> </span><span class=\"n\">ys</span>\n<span class=\"w\">    </span><span class=\"k\">assume</span><span class=\"w\"> </span><span class=\"n\">ys</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"length ys = Suc x\"</span><span class=\"w\"> </span><span class=\"s\">\"n = sum_list ys\"</span>\n<span class=\"w\">    </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"k\">obtain</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"n\">yss</span><span class=\"w\"> </span><span class=\"kp\">where</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"ys = y # yss\"</span>\n<span class=\"w\">      </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">metis</span><span class=\"w\"> </span><span class=\"n\">Suc_length_conv</span><span class=\"o\">)</span>\n<span class=\"w\">    </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"s\">\"y + sum_list yss = n\"</span><span class=\"w\"> </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">ys</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">auto</span>\n<span class=\"w\">    </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"n\">1</span><span class=\"o\">:</span><span class=\"s\">\"y ∈ {..sum_list ys}\"</span>\n<span class=\"w\">      </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"n\">add</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">ys</span><span class=\"o\">(</span><span class=\"n\">2</span><span class=\"o\">))</span>\n<span class=\"w\">    </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"n\">2</span><span class=\"o\">:</span><span class=\"s\">\"ys ∈ (#) y ` {ks. length ks = x ∧ sum_list ks = sum_list ys - y}\"</span>\n<span class=\"w\">      </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">auto</span><span class=\"w\"> </span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"n\">add</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">image_def</span><span class=\"o\">)</span>\n<span class=\"w\">      </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"n\">ys</span><span class=\"o\">(</span><span class=\"n\">1</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">fastforce</span>\n<span class=\"w\">    </span><span class=\"k\">thus</span><span class=\"w\"> </span><span class=\"s\">\"∃xb∈{..sum_list ys}.</span>\n<span class=\"s\">             ys ∈ (#) xb `</span>\n<span class=\"s\">                   {ks.</span>\n<span class=\"s\">                    length ks = x ∧</span>\n<span class=\"s\">                    sum_list ks = sum_list ys - xb}\"</span>\n<span class=\"w\">      </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">1</span><span class=\"w\"> </span><span class=\"n\">2</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">blast</span>\n<span class=\"w\">  </span><span class=\"k\">qed</span>\n<span class=\"w\">  </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"finite {ks. length ks = x ∧ sum_list ks = (y::nat)}\"</span><span class=\"w\"> </span><span class=\"kp\">for</span><span class=\"w\"> </span><span class=\"n\">y</span>\n<span class=\"w\">    </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">finite_sum_list_eq</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">auto</span>\n<span class=\"w\">  </span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">thesis</span>\n<span class=\"w\">    </span><span class=\"k\">unfolding</span><span class=\"w\"> </span><span class=\"n\">*</span>\n<span class=\"w\">    </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">subst</span><span class=\"w\"> </span><span class=\"n\">sum.UNION_disjoint</span><span class=\"o\">)</span>\n<span class=\"w\">       </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">auto</span><span class=\"w\"> </span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"n\">add</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"o\">)</span>\n<span class=\"w\">    </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">subst</span><span class=\"w\"> </span><span class=\"n\">sum.reindex</span><span class=\"o\">)</span>\n<span class=\"w\">    </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">auto</span>\n<span class=\"k\">qed</span>\n\n<span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">cross_multiply</span><span class=\"o\">:</span>\n<span class=\"w\">  </span><span class=\"kp\">assumes</span><span class=\"w\"> </span><span class=\"s\">\"a dvd c\"</span>\n<span class=\"w\">  </span><span class=\"kp\">assumes</span><span class=\"w\"> </span><span class=\"s\">\"d dvd (a::nat)\"</span>\n<span class=\"w\">  </span><span class=\"kp\">shows</span><span class=\"w\"> </span><span class=\"s\">\"a div d * c div a = c div d\"</span>\n<span class=\"w\">  </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">assms</span><span class=\"o\">(</span><span class=\"n\">1</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">assms</span><span class=\"o\">(</span><span class=\"n\">2</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">fastforce</span>\n\n<span class=\"kn\">lemma</span><span class=\"w\"> </span><span class=\"n\">mchoose_cons</span><span class=\"o\">:</span>\n<span class=\"w\">  </span><span class=\"kp\">assumes</span><span class=\"w\"> </span><span class=\"s\">\"sum_list (k # ks) ≤ n\"</span>\n<span class=\"w\">  </span><span class=\"kp\">shows</span><span class=\"w\"> </span><span class=\"s\">\"(n mchoose (k # ks)) =</span>\n<span class=\"s\">    (n-k mchoose ks) * (n choose k)\"</span>\n<span class=\"k\">proof</span><span class=\"w\"> </span><span class=\"o\">-</span>\n<span class=\"w\">  </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"n\">*</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"fact n div fact k = fact (n - k) * (n choose k)\"</span>\n<span class=\"w\">    </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">metis</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">no_types</span><span class=\"o\">,</span><span class=\"w\"> </span><span class=\"n\">lifting</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">assms</span><span class=\"w\"> </span><span class=\"n\">binomial_fact_lemma</span><span class=\"w\"> </span><span class=\"n\">fact_nonzero</span><span class=\"w\"> </span><span class=\"n\">le_add1</span><span class=\"w\"> </span><span class=\"n\">le_eq_less_or_eq</span><span class=\"w\"> </span><span class=\"n\">mult.assoc</span><span class=\"w\"> </span><span class=\"n\">nonzero_mult_div_cancel_left</span><span class=\"w\"> </span><span class=\"n\">order_le_less_trans</span><span class=\"w\"> </span><span class=\"n\">sum_list_simps</span><span class=\"o\">(</span><span class=\"n\">2</span><span class=\"o\">))</span>\n<span class=\"w\">  </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"s\">\"n mchoose (k # ks) =</span>\n<span class=\"s\">    fact n div prod_list (map fact (k # ks))\"</span>\n<span class=\"w\">    </span><span class=\"k\">unfolding</span><span class=\"w\"> </span><span class=\"n\">multinomial_def</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">auto</span>\n<span class=\"w\">  </span><span class=\"k\">moreover</span><span class=\"w\"> </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"s\">\"... = (fact n div fact k) div prod_list (map fact ks)\"</span>\n<span class=\"w\">    </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"n\">simp</span>\n<span class=\"w\">    </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">metis</span><span class=\"w\"> </span><span class=\"n\">div_mult2_eq</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"k\">moreover</span><span class=\"w\"> </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"s\">\"... = (fact (n - k) * (n choose k)) div prod_list (map fact ks)\"</span>\n<span class=\"w\">    </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">*</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">auto</span>\n<span class=\"w\">  </span><span class=\"k\">moreover</span><span class=\"w\"> </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"s\">\"... = (fact (n - k) div prod_list (map fact ks)) * (n choose k)\"</span>\n<span class=\"w\">    </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">metis</span><span class=\"w\"> </span><span class=\"n\">add_le_cancel_left</span><span class=\"w\"> </span><span class=\"n\">assms</span><span class=\"w\"> </span><span class=\"n\">binomial_eq_0</span><span class=\"w\"> </span><span class=\"n\">bits_div_0</span><span class=\"w\"> </span><span class=\"n\">div_mult_swap</span><span class=\"w\"> </span><span class=\"n\">le_add_diff_inverse</span><span class=\"w\"> </span><span class=\"n\">linorder_not_less</span><span class=\"w\"> </span><span class=\"n\">mult.commute</span><span class=\"w\"> </span><span class=\"n\">mult_zero_left</span><span class=\"w\"> </span><span class=\"n\">multinomial_dvd</span><span class=\"w\"> </span><span class=\"n\">sum_list.Cons</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"k\">ultimately</span><span class=\"w\"> </span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">thesis</span>\n<span class=\"w\">    </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">multinomial_def</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">presburger</span>\n<span class=\"k\">qed</span>\n\n<span class=\"kn\">theorem</span><span class=\"w\"> </span><span class=\"n\">multinomial_theorem</span><span class=\"o\">:</span>\n<span class=\"w\">  </span><span class=\"kp\">shows</span><span class=\"w\"> </span><span class=\"s\">\"(sum_list (xs::nat list)) ^ n =</span>\n<span class=\"s\">    sum (λks. (n mchoose ks) * prod_list (map2 (^) xs ks))</span>\n<span class=\"s\">    {ks. length ks = length xs ∧ sum_list ks = n}\"</span>\n<span class=\"k\">proof</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">induction</span><span class=\"w\"> </span><span class=\"n\">xs</span><span class=\"w\"> </span><span class=\"n\">arbitrary</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"k\">case</span><span class=\"w\"> </span><span class=\"n\">Nil</span>\n<span class=\"w\">  </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"n\">*</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s\">\"{ks. ks = [] ∧ (∀n∈set ks. n = 0)} = {[]}\"</span>\n<span class=\"w\">    </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">auto</span>\n<span class=\"w\">  </span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"k\">case</span>\n<span class=\"w\">    </span><span class=\"kp\">apply</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">cases</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"o\">)</span>\n<span class=\"w\">     </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">auto</span><span class=\"w\"> </span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"n\">add</span><span class=\"o\">:</span><span class=\"n\">multinomial_def</span><span class=\"w\"> </span><span class=\"n\">*</span><span class=\"o\">)</span>\n<span class=\"k\">next</span>\n<span class=\"w\">  </span><span class=\"k\">case</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">Cons</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">xs</span><span class=\"o\">)</span>\n\n<span class=\"w\">  </span><span class=\"c\">(* rhs *)</span>\n<span class=\"w\">  </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"s\">\"(∑ks | length ks = Suc (length xs) ∧</span>\n<span class=\"s\">            sum_list ks = n.</span>\n<span class=\"s\">       (n mchoose ks) *</span>\n<span class=\"s\">       prod_list (map2 (^) (x # xs) ks)) =</span>\n<span class=\"s\">    (∑k≤n.</span>\n<span class=\"s\">        ∑ks | length ks = length xs ∧</span>\n<span class=\"s\">               sum_list ks = n - k.</span>\n<span class=\"s\">          (n mchoose (k # ks)) *</span>\n<span class=\"s\">          prod_list (map2 (^) (x # xs) (k # ks)))\"</span>\n<span class=\"w\">    </span><span class=\"k\">unfolding</span><span class=\"w\"> </span><span class=\"n\">sum_split_k</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">auto</span>\n<span class=\"w\">  </span><span class=\"k\">moreover</span><span class=\"w\"> </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"s\">\"... =</span>\n<span class=\"s\">     (∑k≤n.</span>\n<span class=\"s\">        sum (λks.</span>\n<span class=\"s\">          ((n-k mchoose ks) * (n choose k)) *</span>\n<span class=\"s\">          (x ^ k * prod_list (map2 (^) xs ks)))</span>\n<span class=\"s\">        {ks. length ks = length xs ∧ sum_list ks = n - k})\"</span>\n<span class=\"w\">    </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">auto</span><span class=\"w\"> </span><span class=\"n\">intro</span><span class=\"o\">!:</span><span class=\"w\"> </span><span class=\"n\">sum.cong</span><span class=\"w\"> </span><span class=\"n\">simp</span><span class=\"w\"> </span><span class=\"n\">add</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">mchoose_cons</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"k\">moreover</span><span class=\"w\"> </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"s\">\"... =</span>\n<span class=\"s\">     (∑k≤n.</span>\n<span class=\"s\">        (n choose k) * x ^ k *</span>\n<span class=\"s\">        sum (λks.</span>\n<span class=\"s\">          (n-k mchoose ks) *</span>\n<span class=\"s\">          prod_list (map2 (^) xs ks))</span>\n<span class=\"s\">        {ks. length ks = length xs ∧ sum_list ks = n - k})\"</span>\n<span class=\"w\">    </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">smt</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"n\">z3</span><span class=\"o\">)</span><span class=\"w\"> </span><span class=\"n\">mult.assoc</span><span class=\"w\"> </span><span class=\"n\">mult.left_commute</span><span class=\"w\"> </span><span class=\"n\">sum.cong</span><span class=\"w\"> </span><span class=\"n\">sum_distrib_left</span><span class=\"o\">)</span>\n<span class=\"w\">  </span><span class=\"k\">moreover</span><span class=\"w\"> </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"s\">\"... =</span>\n<span class=\"s\">    (∑k≤n.</span>\n<span class=\"s\">        of_nat (n choose k) * x ^ k *</span>\n<span class=\"s\">        sum_list xs ^ (n - k))\"</span>\n<span class=\"w\">    </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">Cons</span>\n<span class=\"w\">    </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">of_nat_id</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">presburger</span>\n<span class=\"w\">  </span><span class=\"k\">moreover</span>\n<span class=\"w\">  </span><span class=\"k\">have</span><span class=\"w\"> </span><span class=\"s\">\"... = (x + sum_list xs) ^ n \"</span>\n<span class=\"w\">    </span><span class=\"k\">unfolding</span><span class=\"w\"> </span><span class=\"n\">binomial</span><span class=\"w\"> </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">auto</span>\n<span class=\"w\">  </span><span class=\"k\">ultimately</span><span class=\"w\"> </span><span class=\"k\">show</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"k\">case</span>\n<span class=\"w\">    </span><span class=\"k\">by</span><span class=\"w\"> </span><span class=\"n\">auto</span>\n<span class=\"k\">qed</span>\n</code></pre></div>",
        "id": 368402391,
        "sender_full_name": "Yong Kiam",
        "timestamp": 1687402322
    }
]