[
    {
        "content": "<p>From: José Manuel Rodriguez Caballero &lt;<a href=\"mailto:josephcmac@gmail.com\">josephcmac@gmail.com</a>&gt;<br>\nHello,<br>\n  All my research in elementary number theory was motivated by empirical<br>\ndata obtained in SAGE (a library of Python). It is more comfortable for me,<br>\nand maybe for other people looking for theorems from empirical data, to do<br>\nthe computation directly in Isabelle/HOL, in order to combine both<br>\nalgorithms with proofs. Nevertheless, it seems to me that computations in<br>\nSAGE are faster than in Isabelle/HOL. Is there a way to make computations<br>\nin Isabelle/HOL as fast as the computations in SAGE?</p>\n<p>For example, in order to compute the list of Fibonacci numbers in<br>\nIsabelle/HOL I use the function:</p>\n<p>fun SumLast2 :: ‹nat list  ⇒ nat› where<br>\n‹SumLast2 L = (if length L &lt; 2 then 0 else L!(length L - 1) + L!(length L -<br>\n2) )›</p>\n<p>(* OEIS A000045 *)<br>\nfun Fib :: ‹nat ⇒ nat list› where<br>\n  ‹Fib 0 = [0]›<br>\n| ‹Fib (Suc 0) = [0, 1]›<br>\n| ‹Fib (Suc (Suc n)) = (λ L. L @ [(SumLast2 L)] )  ( Fib (Suc n) )›</p>\n<p>value ‹Fib 40›</p>\n<p>Link:<br>\n<a href=\"https://raw.githubusercontent.com/josephcmac/miscellany/master/FiboElem.thy\">https://raw.githubusercontent.com/josephcmac/miscellany/master/FiboElem.thy</a></p>\n<p>On the other hand, the corresponding function in SAGE is:</p>\n<p>def SumLast2(X):<br>\n    return X+[X[len(X)-1]+X[len(X)-2]]</p>\n<p>def Fib(n):<br>\n    return [0] if n == 0 else ([0,1] if n == 1 else SumLast2(Fib(n-1)))</p>\n<p>print Fib(40)</p>\n<p>Link: <a href=\"https://raw.githubusercontent.com/josephcmac/miscellany/master/Fib.py\">https://raw.githubusercontent.com/josephcmac/miscellany/master/Fib.py</a></p>\n<p>Kind Regards,<br>\nJosé M.</p>",
        "id": 294748204,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661194372
    }
]