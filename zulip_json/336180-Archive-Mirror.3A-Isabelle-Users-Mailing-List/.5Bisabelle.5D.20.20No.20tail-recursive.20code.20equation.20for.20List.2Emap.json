[
    {
        "content": "<p>From: \"C. Diekmann\" &lt;<a href=\"mailto:diekmann@in.tum.de\">diekmann@in.tum.de</a>&gt;<br>\nHi,</p>\n<p>when I export list-based code to Scala and run it on huge inputs, it<br>\nalways gives me a StackOverflowException. Looking at the stack trace<br>\nand providing the following tail-recursive version of map, everything<br>\nworks fine.</p>\n<p>fun map_tailrec ::  \"('a ⇒ 'b) ⇒ 'a list ⇒ 'b list ⇒ 'b list\" where<br>\n  \"map_tailrec f [] accs = accs\" |<br>\n  \"map_tailrec f (a#as) accs = (map_tailrec f as ((f a)#accs))\"</p>\n<p>lemma map_tailrec_is_listmap:<br>\n  \"rev (map_tailrec f l accs) = (rev accs)@(<a href=\"http://List.map\">List.map</a> f l)\"<br>\n    apply(induction l accs rule: map_tailrec.induct)<br>\n    apply(simp_all)<br>\n    done</p>\n<p>definition efficient_map :: \"('a ⇒ 'b) ⇒ 'a list ⇒ 'b list\" where<br>\n    \"efficient_map f l ≡ rev (map_tailrec f l [])\"</p>\n<p>lemma[code]: \"<a href=\"http://List.map\">List.map</a> f l = efficient_map f l\"<br>\n   by(simp add: efficient_map_def map_tailrec_is_listmap)</p>\n<p>Why is there no tail-recursive code equation of <a href=\"http://List.map\">List.map</a> in the default library?</p>\n<p>Regards<br>\n  Cornelius</p>",
        "id": 294240423,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660906737
    }
]