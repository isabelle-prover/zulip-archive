[
    {
        "content": "<p>From: Peter Chapman &lt;<a href=\"mailto:pc@cs.st-and.ac.uk\">pc@cs.st-and.ac.uk</a>&gt;<br>\nThanks Christian</p>\n<p>This sounds like the kind of thing I want to do, but I've hit a snag  <br>\nin implementing your suggestion of writing the tactics in ML and then  <br>\nusing this directly in Isar.</p>\n<p>Say I have a lemma \" |- A --&gt; A --&gt; A --&gt; A\", then using the Isar  <br>\nmethod of doing things, I use</p>\n<p>apply ((rule impr)+)?</p>\n<p>which returns</p>\n<p>Subgoal:</p>\n<p>A, A, A |- A</p>\n<p>as expected.  However, if I use the direct tactic from Isabelle</p>\n<p>apply (tactic {* REPEAT (rtac impr 1) *} )</p>\n<p>I simply get back the original goal; the rule fails to be applied  <br>\neven once.  This was confirmed when I tried</p>\n<p>apply (tactic {* rtac impr 1 *} )</p>\n<p>which fails.  After scouring the manuals for both Isar (Appendix B:  <br>\nConverting between Isabelle and Isar) and Isabelle (Chapters 3 and  <br>\n4), I cannot figure out why the two representations do not have the  <br>\nsame behaviour.  If it is important, the theorems are declared in a  <br>\nfile called G3cp.thy, which is included in the file where I am  <br>\nactually performing the calculations, G3cpExamples.thy.</p>\n<p>Thanks</p>\n<p>Peter</p>",
        "id": 294047529,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660817937
    },
    {
        "content": "<p>From: Christian Urban &lt;<a href=\"mailto:urbanc@in.tum.de\">urbanc@in.tum.de</a>&gt;<br>\nAn offline discussion revealed that the problem was due to <br>\nnon-existing ML-bindings for theorems one proves in ones own <br>\ntheories. While theorems, like conjI from HOL, have an ML-binding <br>\nwith the same name, ones own theorems must be fetched from <br>\nthe theorem-database. This can be done with the functions <br>\n\"thm\" and \"get_thm\".</p>\n<p>Christian</p>\n<p>Peter Chapman writes:</p>\n<blockquote>\n<p>Thanks Christian</p>\n<p>This sounds like the kind of thing I want to do, but I've hit a snag  <br>\nin implementing your suggestion of writing the tactics in ML and then  <br>\nusing this directly in Isar.</p>\n<p>Say I have a lemma \" |- A --&gt; A --&gt; A --&gt; A\", then using the Isar  <br>\nmethod of doing things, I use</p>\n<p>apply ((rule impr)+)?</p>\n<p>which returns</p>\n<p>Subgoal:</p>\n<p>A, A, A |- A</p>\n<p>as expected.  However, if I use the direct tactic from Isabelle</p>\n<p>apply (tactic {* REPEAT (rtac impr 1) *} )</p>\n<p>I simply get back the original goal; the rule fails to be applied  <br>\neven once.  This was confirmed when I tried</p>\n<p>apply (tactic {* rtac impr 1 *} )</p>\n<p>which fails.  After scouring the manuals for both Isar (Appendix B:  <br>\nConverting between Isabelle and Isar) and Isabelle (Chapters 3 and  <br>\n4), I cannot figure out why the two representations do not have the  <br>\nsame behaviour.  If it is important, the theorems are declared in a  <br>\nfile called G3cp.thy, which is included in the file where I am  <br>\nactually performing the calculations, G3cpExamples.thy.</p>\n<p>Thanks</p>\n<p>Peter<br>\n</p>\n</blockquote>",
        "id": 294047605,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660817974
    }
]