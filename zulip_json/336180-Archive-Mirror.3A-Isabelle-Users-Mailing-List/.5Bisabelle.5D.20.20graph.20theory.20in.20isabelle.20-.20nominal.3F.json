[
    {
        "content": "<p>From: Christian Urban &lt;<a href=\"mailto:urbanc@in.tum.de\">urbanc@in.tum.de</a>&gt;<br>\nHi John,</p>\n<p>If I am allowed to throw in my 2 cents. I can confirm Ramana's <br>\npoint: Nominal does not help you much, except it does use some <br>\ngeneral lemmas about renaming things: like if you have a set of <br>\nnames, rename it to something else, avoiding some third set of <br>\nnames. This might be still handy for you. Comfortable Barendregt-style <br>\nreasoning is only supported for nominal datatypes, unfortunately.</p>\n<p>Also as Ramana and Thomas already pointed out, the quotient package <br>\nmight be of help to define the type of graphs you want. This might<br>\nneed a bit of theory-engineering to pull this off. If you make <br>\nany progress with this, Cezary and I would be very interested in <br>\nit.</p>\n<p>PS: Recently, we were also in need of defining the disjoint union<br>\nof (named) graphs for a formalisation of automata theory and<br>\nregularity of languages. We abandoned it, because it looked too ugly<br>\nto us. In the end, we just used regular expressions and proved <br>\nall what we wanted with them... never touching automata/graphs. ;o)</p>\n<p>Best wishes,<br>\nChristian  </p>\n<p>John Wickerson writes:</p>\n<blockquote>\n<p>Hello all,</p>\n<p>I want to formalise a little bit of graph theory in Isabelle. (Specifically, I'm interested in directed labelled multigraphs.) In particular, I need a (disjoint) union operation on graphs. Here is a typical definition of this operation, which I've copied from a random textbook on graph theory:</p>\n<blockquote>\n<p>Let G and H be two given graphs. The disjoint union of G and H, denoted by G \\union H, is defined to be the graph with vertex set V(G) \\union V(H), where V(G) and V(H) are made disjoint by renaming if necessary, and edge set E(G) \\union E(H).</p>\n</blockquote>\n<p>A couple of questions:</p>\n<ol>\n<li>\n<p>Is there already a theory of graphs in Isabelle? (A previous message [1] on this mailing list referred to a \"HOL/Library/Graphs.thy\" theory, but I couldn't find a theory at that location -- perhaps it's not there any more?)</p>\n</li>\n<li>\n<p>If there isn't a pre-existing theory, and I roll my own instead, does anybody have any tips on how best to go about it? The phrase \"made disjoint by renaming if necessary\" smells a lot like Barendregt's variable convention for the lambda-calculus. So I'm wondering if I need Nominal Isabelle to formalise graph theory -- is that the case?</p>\n</li>\n</ol>\n<p>Thanks very much,<br>\nJohn</p>\n<p>--<br>\n[1] <a href=\"https://lists.cam.ac.uk/pipermail/cl-isabelle-users/2007-April/msg00026.html\">https://lists.cam.ac.uk/pipermail/cl-isabelle-users/2007-April/msg00026.html</a></p>\n</blockquote>",
        "id": 294151225,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660849371
    }
]