[
    {
        "content": "<p>From: Gottfried Barrow &lt;<a href=\"mailto:gottfried.barrow@gmx.com\">gottfried.barrow@gmx.com</a>&gt;<br>\nHi,</p>\n<p>I do this with \"Auto Methods\" checked in the PIDE options:</p>\n<p>theorem<br>\n   \"(!!P. P::bool) ==&gt; PROP P\"<br>\noops</p>\n<p>The processes Isabelle2013-2.exe and poly.exe start taking close to 100% <br>\nof my CPU, and don't give up. The PIDE gets unresponsive, and I have to <br>\nterminate everthing.</p>\n<p>With \"Auto Methods\" unchecked, I can use \"try0\" and they go into <br>\noverdrive, but they slowly shut down over about 10 seconds.</p>\n<p>As a side note, I can run Sledgehammer, and the ATPs can be at over 96% <br>\nof the CPU, but the PIDE never gets unresponsive.</p>\n<p>I attach a screen shot.</p>\n<p>For anyone interested, here's what I use to look at \"Trueprop\", which is <br>\nshown in the screenshot:</p>\n<p>notation Trueprop (\"_\\&lt;Colon&gt;\\&lt;^sub&gt;T\" [1000] 1000)</p>\n<p>Forgetting about brackets, typing, and Trueprop can sometimes result in <br>\nme expending negative mental energy. Confused neurons, mucking about in <br>\nthe grey matter, too many to count, connecting the most embarrassing of <br>\nlogical dots.</p>\n<p>Thanks,<br>\nGB<br>\n<a href=\"/user_uploads/14278/_3o3aakaE41jod_Nd3oBZInR/131213_for_all_bool_hangs_pide.png\">131213_for_all_bool_hangs_pide.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/14278/_3o3aakaE41jod_Nd3oBZInR/131213_for_all_bool_hangs_pide.png\" title=\"131213_for_all_bool_hangs_pide.png\"><img src=\"/user_uploads/14278/_3o3aakaE41jod_Nd3oBZInR/131213_for_all_bool_hangs_pide.png\"></a></div>",
        "id": 294260015,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660914018
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\n\"Auto Methods\" is generally a bit fragile: it tends to suck up a lot of <br>\nCPU resources for various reasons, that are not fully sorted out yet.  It <br>\nwas a somewhat dormant feature over a few years, but now shows up in the <br>\nPIDE interaction model, with slightly different side-conditions.</p>\n<p>The particular problem above is \"blast\" failing repeatedly in a rather <br>\nnoise way.  You can try something like this:</p>\n<p>theorem \"(!!P. P::bool) ==&gt; PROP P\" by blast</p>\n<p>e.g. with \"isabelle tty\" on the Terminal.</p>\n<p>For the <em>next</em> release, we should avoid such noise and denial of service <br>\non the front-end.  Even terminal emulators occasionally get into a pitch <br>\nwith arbitrary volume of output.</p>\n<p>Makarius</p>",
        "id": 294260454,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660914176
    },
    {
        "content": "<p>From: Gottfried Barrow &lt;<a href=\"mailto:gottfried.barrow@gmx.com\">gottfried.barrow@gmx.com</a>&gt;<br>\nOn 12/16/2013 10:25 AM, Makarius wrote:</p>\n<blockquote>\n<p>The particular problem above is \"blast\" failing repeatedly in a rather <br>\nnoise way....</p>\n</blockquote>\n<p>I now have a practical example that causes the PIDE to go off and not <br>\ncome back, which is because of auto, blast, and declare commands.</p>\n<p>declare[[show_sorts=true]]<br>\nlemma \"(!!f. !!a. f = (%a. a | f a) ==&gt; (f a = a)) ==&gt; False\"<br>\napply(auto)<br>\noops</p>\n<p>I haven't completely figured it out, but it seems <br>\n\"declare[[show_sorts=true]]\" puts it over the edge. With it \"false\", <br>\nIsabelle2013-2.exe will jump up to about 50% of the CPU, but recover. <br>\nWith it \"true\", after \"auto\" runs long enough, the PIDE becomes <br>\nunresponsive, and it can't recover. It may not be particular to <br>\n\"show_sorts\".</p>\n<p>Using \"apply blast\" creates a bunch of messages, but it still proves the <br>\ntheorem, so it's the interaction between auto and blast.</p>\n<p>I suppose it's just more of the same. I attach and include a theory with <br>\nvariations that work or don't work.</p>\n<blockquote>\n<p>...You can try something like this:</p>\n<p>theorem \"(!!P. P::bool) ==&gt; PROP P\" by blast</p>\n<p>e.g. with \"isabelle tty\" on the Terminal.</p>\n</blockquote>\n<p>I tried the theorem in tty mode. It goes into a loop after getting to 6: <br>\n\"PROOF FAILED for depth 6\". If you're telling me that blast will prove <br>\n\"(!!P. P::bool) ==&gt; PROP P\", that would be important to know.</p>\n<p>Regarding that other list, I use Sourcetree on Windows for <a href=\"http://github.com\">github.com</a>. <br>\nIt's easy to install and use, and has way more features than the GitHub <br>\nWindows application. It allows me to keep from having to know much.</p>\n<p>I do my part as an imaginary power-user, a logical cult-of-one, peering <br>\nout from the curtains of my compound, waiting for the NSA and that <br>\nex-KGB agent, Vladimir Putin, to arrive at any moment.</p>\n<p>Regards,<br>\nGB</p>\n<p>(<strong>*</strong><strong>*</strong><strong>*</strong><strong>*</strong><strong>*</strong><strong>*</strong><strong>*</strong><strong>*</strong><strong>*</strong><strong>*</strong><strong>*</strong><strong>*</strong><strong>*</strong><strong>*</strong><strong>*</strong><strong>*</strong><strong>*</strong>***)<br>\ntheory i131214a__isaU_Trueprop_False_meta_eq_auto_hangs_PIDE<br>\nimports Complex_Main<br>\nbegin</p>\n<p>declare[[show_sorts=true]]<br>\ndeclare[[show_brackets=true]]<br>\ndeclare[[show_question_marks=true]]<br>\nnotation Trueprop (\"_∷⇩T\" [1000] 1000)</p>\n<p>(*With \"Auto Methods\" off, auto goes off and doesn't come back, if it's <br>\nallowed<br>\nto run very long.*)</p>\n<p>lemma \"Trueprop False == (!!f. !!a. f = (%a. a | f a) ==&gt; (f a = a))\"<br>\napply(rule equal_intr_rule)<br>\n(<em>apply(auto)</em>)<br>\noops</p>\n<p>(*This direction with auto is the problem. I need to terminate it within <br>\nless<br>\nthan about 5 seconds when I have \"show_sorts=true\".*)</p>\n<p>lemma \"(!!f. !!a. f = (%a. a | f a) ==&gt; (f a = a)) ==&gt; False\"<br>\n(<em>apply(auto)</em>)<br>\noops</p>\n<p>(<em>No problem with blast to prove ==, instead of auto.</em>)</p>\n<p>lemma \"Trueprop False == (!!f. !!a. f = (%a. a | f a) ==&gt; (f a = a))\"<br>\napply(rule equal_intr_rule)<br>\napply(blast)<br>\napply(blast) (<em>Failure messages here.</em>)<br>\ndone</p>\n<p>(<em>This direction with blast is okay, though there are failure messages.</em>)</p>\n<p>lemma \"(!!f. !!a. f = (%a. a | f a) ==&gt; (f a = a)) ==&gt; False\"<br>\napply(blast) (<em>Failure messages here.</em>)<br>\ndone</p>\n<p>(<em>The other direction with auto is okay.</em>)</p>\n<p>lemma \"False ==&gt; (!!f. !!a. f = (%a. a | f a) ==&gt; (f a = a))\"<br>\napply(auto)<br>\ndone</p>\n<p>end<br>\n<a href=\"/user_uploads/14278/ucT0AtMIHCizODWVJBlbH40W/i131214a__isaU_Trueprop_False_meta_eq_auto_hangs_PIDE.thy\">i131214a__isaU_Trueprop_False_meta_eq_auto_hangs_PIDE.thy</a></p>",
        "id": 294260669,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660914251
    }
]