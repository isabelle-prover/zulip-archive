[
    {
        "content": "<p>From: Eg Gloor &lt;<a href=\"mailto:egglue@gmail.com\">egglue@gmail.com</a>&gt;<br>\nOn Wed, Mar 30, 2011 at 9:01 PM, Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt; wrote:</p>\n<blockquote>\n<p>On Wed, 30 Mar 2011, <a href=\"mailto:egglue@gmail.com\">egglue@gmail.com</a> wrote:</p>\n<p>axiomatization</p>\n<blockquote>\n<blockquote>\n<p>f :: \"'a =&gt; 'b\" and<br>\ng :: \"nat =&gt; nat\" where<br>\nax : \"f = g\"<br>\n</p>\n</blockquote>\n<p>Why are 'a and 'b fixed under \"axiomatization\"?<br>\n</p>\n</blockquote>\n<p>The specification is considered as one logical unit, where f and g are<br>\nalways the same local entity, with fixed types.  The context is essentially<br>\nthis:</p>\n<p>fix_type 'a and 'b  -- \"implicit\"<br>\n fix g :: \"'a =&gt; 'b\" and g :: \"nat =&gt; nat\"<br>\n assume ax : \"f = g\"</p>\n<p>Later the types become arbitrary in the result, so the consts f and g in<br>\nthe target context can be used at different type.</p>\n<p>It is always the same game.  This is how naive polymorphism works.  There<br>\nis no type quantification.  (It would make the logic very complicated, or<br>\nbreak down).</p>\n<p>I see. So Isabelle/HOL isn't truly polymorphic since there isn't type<br>\nquantification. Could you provide some pointers to material explaining the<br>\nnaive polymorphism?</p>\n</blockquote>\n<p>Thanks<br>\nEg</p>\n<blockquote>\n<p>It seems that I can produce very much the same declaration with:</p>\n<blockquote>\n<p>axiomatization<br>\nf:: \"'a =&gt; 'b\" and<br>\ng :: \"nat =&gt; nat\"</p>\n<p>axioms<br>\nax : \"f = g\"</p>\n<p>Why is f polymorphic in \"axioms\" but not in \"axiomatization\"?<br>\n</p>\n</blockquote>\n<p>'axioms' is an obsolete form, better do it like this:</p>\n<p>axiomatization<br>\n f :: \"'a =&gt; 'b\" and<br>\n g :: \"nat =&gt; nat\"</p>\n<p>axiomatization where<br>\n ax : \"f = g\"</p>\n<p>Separate specifications have separate scopes wrt. polymorphism.  The consts<br>\naxiomatized in the first one can be used at different types at the second<br>\none.</p>\n<p>Makarius<br>\n</p>\n</blockquote>",
        "id": 294131907,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660843126
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nYou can probably find a lot of references just by searching through the <br>\narchives of the isabelle-users mailing list -- this is a recurrent topic.</p>\n<p>Just one arbitray paper where the topic is also mentioned <br>\n<a href=\"http://www4.in.tum.de/~wenzelm/papers/local-theory.pdf\">http://www4.in.tum.de/~wenzelm/papers/local-theory.pdf</a> -- it is about <br>\ngiving an impression of Hindley-Milner polymorphism in a system with plain <br>\nschematic types only.</p>\n<p>Makarius</p>",
        "id": 294131981,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660843157
    },
    {
        "content": "<p>From: Eg Gloor &lt;<a href=\"mailto:egglue@gmail.com\">egglue@gmail.com</a>&gt;<br>\nHello all,</p>\n<p>Does anyone know why the following gives an error saying: \"Coercion<br>\ninference failed: weak unification of subtype constraints fails\"?</p>\n<p>axiomatization<br>\nf :: \"'a =&gt; 'b\" and<br>\ng :: \"nat =&gt; nat\" where<br>\nax : \"f = g\"</p>\n<p>However,</p>\n<p>lemma \"f = g\"</p>\n<p>successfully goes through without giving an error.</p>\n<p>Any help will be appreciated.</p>\n<p>Eg</p>",
        "id": 294133673,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660843678
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nOn Wed, 30 Mar 2011, Eg Gloor wrote:</p>\n<blockquote>\n<p>axiomatization<br>\nf :: \"'a =&gt; 'b\" and<br>\ng :: \"nat =&gt; nat\" where<br>\nax : \"f = g\"</p>\n</blockquote>\n<p>Here 'a and 'b are fixed in the scope where \"f = g\" needs to type check.</p>\n<blockquote>\n<p>axiomatization<br>\nf :: \"'a =&gt; 'b\" and<br>\ng :: \"nat =&gt; nat\" where</p>\n</blockquote>\n<blockquote>\n<p>lemma \"f = g\"</p>\n</blockquote>\n<p>Here f is polymorphic and can be instantiated to \"nat =&gt; nat\".</p>\n<p>Makarius</p>",
        "id": 294133718,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660843684
    },
    {
        "content": "<p>From: <a href=\"mailto:egglue@gmail.com\">egglue@gmail.com</a><br>\nI see. Why are 'a and 'b fixed under \"axiomatization\"? It seems that I can  <br>\nproduce very much the same declaration with:</p>\n<p>axiomatization<br>\nf:: \"'a =&gt; 'b\" and<br>\ng :: \"nat =&gt; nat\"</p>\n<p>axioms<br>\nax : \"f = g\"</p>\n<p>Why is f polymorphic in \"axioms\" but not in \"axiomatization\"?</p>\n<p>Thanks</p>\n<p>Eg</p>",
        "id": 294133731,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660843691
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nOn Wed, 30 Mar 2011, <a href=\"mailto:egglue@gmail.com\">egglue@gmail.com</a> wrote:</p>\n<blockquote>\n<blockquote>\n<p>axiomatization<br>\nf :: \"'a =&gt; 'b\" and<br>\ng :: \"nat =&gt; nat\" where<br>\nax : \"f = g\"</p>\n</blockquote>\n</blockquote>\n<blockquote>\n<p>Why are 'a and 'b fixed under \"axiomatization\"?</p>\n</blockquote>\n<p>The specification is considered as one logical unit, where f and g are <br>\nalways the same local entity, with fixed types.  The context is <br>\nessentially this:</p>\n<p>fix_type 'a and 'b  -- \"implicit\"<br>\n   fix g :: \"'a =&gt; 'b\" and g :: \"nat =&gt; nat\"<br>\n   assume ax : \"f = g\"</p>\n<p>Later the types become arbitrary in the result, so the consts f and g in <br>\nthe target context can be used at different type.</p>\n<p>It is always the same game.  This is how naive polymorphism works.  There <br>\nis no type quantification.  (It would make the logic very complicated, or <br>\nbreak down).</p>\n<blockquote>\n<p>It seems that I can <br>\nproduce very much the same declaration with:</p>\n<p>axiomatization<br>\nf:: \"'a =&gt; 'b\" and<br>\ng :: \"nat =&gt; nat\"</p>\n<p>axioms<br>\nax : \"f = g\"</p>\n<p>Why is f polymorphic in \"axioms\" but not in \"axiomatization\"?</p>\n</blockquote>\n<p>'axioms' is an obsolete form, better do it like this:</p>\n<p>axiomatization<br>\n   f :: \"'a =&gt; 'b\" and<br>\n   g :: \"nat =&gt; nat\"</p>\n<p>axiomatization where<br>\n   ax : \"f = g\"</p>\n<p>Separate specifications have separate scopes wrt. polymorphism.  The <br>\nconsts axiomatized in the first one can be used at different types at the <br>\nsecond one.</p>\n<p>Makarius</p>",
        "id": 294133754,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660843697
    }
]