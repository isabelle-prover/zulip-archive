[
    {
        "content": "<p>From: Steve W &lt;<a href=\"mailto:s.wong.731@googlemail.com\">s.wong.731@googlemail.com</a>&gt;<br>\nHi,</p>\n<p>I'm experimenting with a simple proof, but I keep getting an error saying<br>\n\"PROOF FAILED for depth 4\". Here's my theory:</p>\n<p>consts<br>\ns :: real<br>\nf :: real<br>\nF :: \"real =&gt; real\"<br>\nY :: \"real =&gt; real\"<br>\nZ :: \"real =&gt; real\"</p>\n<p>axioms<br>\nax1 : \"F t = Y t + Z t\"<br>\nax2 : \"Y s = -1\"<br>\nax3 : \"Z s = 1\"</p>\n<p>lemma funczero: \"EX func t. func t = 0\"<br>\nusing ax1 ax2 ax3<br>\nby auto</p>\n<p>I suspect providing ax1 ax2 ax3 and using auto is not sufficient to prove<br>\nthe lemma. However, if I do:</p>\n<p>lemma te_zero: \"EX func t. func t = 0\"<br>\nproof<br>\n  show \"F s = 0\"</p>\n<p>I get an error saying:</p>\n<p>*** Local statement will fail to refine any pending goal<br>\n*** Failed attempt to solve goal by exported rule:<br>\n***   F s = 0<br>\n*** At command \"show\".</p>\n<p>Isn't \"F s = 0\" a witness for the existential statement?</p>\n<p>Thanks<br>\nSteve</p>",
        "id": 294105065,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660834945
    },
    {
        "content": "<p>From: Alexander Krauss &lt;<a href=\"mailto:krauss@in.tum.de\">krauss@in.tum.de</a>&gt;<br>\nHi Steve,</p>\n<p>The implicit step at the \"proof\" command introduces one existential <br>\nquantifier. Thus, in the body, you are expected to prove<br>\n\"EX t. ?func t = 0\" which does not match what you have in your <br>\nshow-statement. When experimenting, you can look at the goal state to <br>\nsee what you are expected to prove at a given point.</p>\n<p>Here are a few options that work:</p>\n<ul>\n<li>Replace the implicit step with an explicit method, which does what you <br>\nneed:</li>\n</ul>\n<p>lemma te_zero: \"EX func t. func t = 0\"<br>\nproof (intro exI)<br>\n   show \"F s = 0\"</p>\n<ul>\n<li>Explicitly decompose the goal step by step (tedious):</li>\n</ul>\n<p>lemma te_zero: \"EX func t. func t = 0\"<br>\nproof<br>\n   show \"EX t. F t = 0\"<br>\n   proof<br>\n     show \"F s = 0\"<br>\n       ...</p>\n<p>qed<br>\nqed</p>\n<ul>\n<li>Use an intermediate statement and let automation deal with quantifiers:</li>\n</ul>\n<p>lemma te_zero: \"EX func t. func t = 0\"<br>\nproof -<br>\n   have \"F s = 0\"<br>\n       ...</p>\n<p>then show ?thesis by blast<br>\nqed</p>\n<p>What you use depends on taste and the concrete problem.</p>\n<p>See also the Isar tutorial for Isar basics: <br>\n<a href=\"http://isabelle.in.tum.de/dist/Isabelle/doc/isar-overview.pdf\">http://isabelle.in.tum.de/dist/Isabelle/doc/isar-overview.pdf</a></p>\n<p>Alex</p>",
        "id": 294105083,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660834951
    },
    {
        "content": "<p>From: Alexander Krauss &lt;<a href=\"mailto:krauss@in.tum.de\">krauss@in.tum.de</a>&gt;<br>\nYou may need to add type annotations to make sure that the types in your <br>\nlemma statement are not more general than you want. Switch on \"Isabelle <br>\n-&gt; Settings -&gt; Show Types\".</p>\n<p>Alex</p>",
        "id": 294105109,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660834957
    },
    {
        "content": "<p>From: Alexander Krauss &lt;<a href=\"mailto:krauss@in.tum.de\">krauss@in.tum.de</a>&gt;<br>\nThe variable func is existentially quantified, but the type variables 'a <br>\nand 'b are (implicitly) universally quantified. So you cannot <br>\ninstantiate them.</p>\n<p>In HOL it is not possible to express existential quantification over types.</p>\n<p>Alex</p>",
        "id": 294105124,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660834963
    },
    {
        "content": "<p>From: Steve W &lt;<a href=\"mailto:s.wong.731@googlemail.com\">s.wong.731@googlemail.com</a>&gt;<br>\nOn Thu, Apr 8, 2010 at 12:34 PM, Alexander Krauss &lt;<a href=\"mailto:krauss@in.tum.de\">krauss@in.tum.de</a>&gt; wrote:</p>\n<blockquote>\n<blockquote>\n<p>lemma te_zero: \"EX func t. func t = 0\"</p>\n<blockquote>\n<p>proof (intro exI)</p>\n<p>show \"F s = 0\"</p>\n</blockquote>\n<p>Thanks for the help. Unfortunately, I get an error from this, saying that<br>\nit can't solve goal by exported rule: F s = 0. Any hint on this will be<br>\nappreciated.<br>\n</p>\n</blockquote>\n<p>You may need to add type annotations to make sure that the types in your<br>\nlemma statement are not more general than you want. Switch on \"Isabelle -&gt;<br>\nSettings -&gt; Show Types\".</p>\n<p>I see. However, why can't the types in the lemma be more general even the<br>\nfunction is existentially quantified? Can't a' and b' be instantiated to<br>\nreal for F s = 0 in the proof?</p>\n</blockquote>\n<p>Thanks<br>\nSteve</p>\n<blockquote>\n<p>Alex<br>\n</p>\n</blockquote>",
        "id": 294105139,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660834969
    }
]