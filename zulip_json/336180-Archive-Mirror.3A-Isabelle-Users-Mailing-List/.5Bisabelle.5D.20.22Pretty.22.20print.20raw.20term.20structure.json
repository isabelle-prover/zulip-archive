[
    {
        "content": "<p>From: Lars Noschinski &lt;<a href=\"mailto:noschinl@in.tum.de\">noschinl@in.tum.de</a>&gt;<br>\nHi everyone,</p>\n<p>exists a clean way for pretty printing terms disregarding all of the<br>\nmore advanced syntax constructs? Basically the syntax provided by Pure?</p>\n<p>Best regards, Lars</p>",
        "id": 294270901,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660917194
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nIn principle you could use the syntax of Pure.thy and the name spaces of <br>\nthe current context.  This might require some tinkering, similar to <br>\nProof_Syntax.pretty_proof, but in a non-monotonic way to take away <br>\nexisting syntax.</p>\n<p>The general question is where to draw the line for \"more advanced syntax <br>\nconstructs\".  On the one hand Pure has already quite advanced <br>\nabbreviations, and on the other hand main HOL has elementary things that <br>\nyou probably don't want to miss, e.g. numeral syntax.</p>\n<p>So we are back to the standard questions: What is the application behind <br>\nthis?  What do you actually need?</p>\n<p>Makarius</p>",
        "id": 294270973,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660917225
    },
    {
        "content": "<p>From: Lars Noschinski &lt;<a href=\"mailto:noschinl@in.tum.de\">noschinl@in.tum.de</a>&gt;<br>\nTogether with a student, I am currently looking at the flex-flex pairs<br>\ncreated by the unifier during resolution. For this it is quite useful to<br>\nsee the terms in a compact form on can mentally connect to the raw term<br>\nstructure. Unfamiliar syntax makes this hard -- for example, I was quite<br>\nconfused that ZF prints the term \"f a b\" as \"f(a,b)\".</p>\n<p>-- Lars</p>",
        "id": 294271062,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660917243
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nThe latter is actually the standard notation of the Isabelle Logical <br>\nFramework from 25 years ago.  Only later, due to the predominance of <br>\nIsabelle/HOL as main application of the same, there was a reform towards <br>\nsomething that people with HOL / ML / Haskell background would find <br>\nconvenient (while loosing most other people out there).</p>\n<p>Today, \"f a b\" is normal in Isabelle, and the old form is merely a special <br>\nfeature in Pure: see Pure_Thy.old_appl_syntax_setup.  In experiments one <br>\ncould try to do some tinkering there to make it look more familiar, but it <br>\nmight be helpful to become familiar with Isabelle in distant past.  The HO <br>\nunification is from the same period.</p>\n<p>Makarius</p>",
        "id": 294271091,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660917256
    },
    {
        "content": "<p>From: Stephan Merz &lt;<a href=\"mailto:Stephan.Merz@loria.fr\">Stephan.Merz@loria.fr</a>&gt;<br>\nPlease don't discontinue that syntax. As Lars noted, it is used in Isabelle/ZF. I am also happy that I can use standard first-order syntax for operator application in Isabelle/TLA+. The syntax is convenient in logics that do not have partial application (so in the above example, \"f a\" would be considered malformed). You might even want to consider renaming the attribute, say to Pure_Thy.first_order_appl_syntax_setup, to make it sound less pejorative.</p>\n<p>Thanks,</p>\n<p>Stephan</p>",
        "id": 294271114,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660917268
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nThere were never any plans to remove this old syntax, althouth it <br>\nsometimes causes small inconveniences.</p>\n<p>The old_appl_syntax_setup formalizes the distinction in a reasonably <br>\nrobust way.  Note that the notation is still higher-order, and admits <br>\npartial application.  So you can write partial applications f(a) or <br>\nf(a)(b). This old form of Isabelle has become again popular in Scala, <br>\nalthough I am personally more in favour of notations without lots of <br>\nredundant parentheses, and sometimes get confused in the Odersky world.</p>\n<p>\"Old\" in Isabelle jargon does not mean \"bad\", it just means old. <br>\nOtherwise the name of the ML function would have contained \"legacy\".</p>\n<p>Makarius</p>",
        "id": 294271129,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660917274
    }
]