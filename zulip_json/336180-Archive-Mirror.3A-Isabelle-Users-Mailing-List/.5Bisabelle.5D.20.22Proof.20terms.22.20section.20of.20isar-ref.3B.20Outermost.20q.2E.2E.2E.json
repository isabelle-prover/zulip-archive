[
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nThere two different things here:</p>\n<p>(1) Outermost quantifiers are circumvented, by writing things with fixed<br>\n     variables instead (\"eigen context\") and then make them arbitrary in<br>\n     the result.</p>\n<p>If you do write explicit quantifiers, which are escpecially required<br>\n     for things nested on the LHS (e.g. in assumptions), there is an<br>\n     explicit core inference that removes the quantifiers and expresses the<br>\n     generality in terms of schematic variables.</p>\n<p>Examples:</p>\n<p>theorem \"x = y ==&gt; y = z ==&gt; x = z\" by (rule trans)<br>\n       theorem \"⋀x y z. x = y ==&gt; y = z ==&gt; x = z\" by (rule trans)</p>\n<p>Note that this stripping of outermost quantifiers looses some<br>\n     information, but it is convenient, and quite essential for the<br>\n     implicit rule composition scheme of Isabelle.</p>\n<p>(2) [.] is notation in the cited paper for Trueprop.  Here is a<br>\n     copy-paste from an explanation that I have given in some Isabelle<br>\n     course at some point:</p>\n<p>text {*<br>\n   The object-logic is embedded into the Pure framework via an implicit<br>\n   derivability judgment @{term \"Trueprop :: bool ⇒ prop\"}.</p>\n<p>Thus any HOL formulae appears atomic to the Pure framework, while<br>\n   the rule structure outlines the corresponding proof pattern.</p>\n<p>This can be made explicit as follows:<br>\n*}</p>\n<p>notepad<br>\nbegin<br>\n   write Trueprop  (\"Tr\")</p>\n<p>thm conjI<br>\n   thm impI<br>\n   thm nat.induct<br>\nend</p>\n<p>Above you can also use a global 'notation' command, but making everything <br>\nlocal is more fun.</p>\n<p>Makarius</p>",
        "id": 294162951,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660853824
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nThe FOL and HOL-Proofs images have proof terms already included.  You can <br>\nsay something like \"Isabelle2012/build FOL\" or \"Isabelle2012/build -m <br>\nHOL-Proofs\" in the terminal; the latter takes quite long.</p>\n<p>Once your session is up and running with one of these images, you need to <br>\nenable proof terms again for your interactive session, e.g. like this:</p>\n<p>ML {* proofs := 2 *}</p>\n<p>Unfortunately, the manuals and the system are not in best shape for proof <br>\nterms, because they are so rarely used.</p>\n<p>Some examples are in src/HOL/Proofs/.</p>\n<p>Makarius</p>",
        "id": 294162961,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660853830
    },
    {
        "content": "<p>From: <a href=\"mailto:gottfried.barrow@gmx.com\">gottfried.barrow@gmx.com</a><br>\nIn Krauss &amp; Schropp's \"A Mechanized Translation from Higher-Order Logic <br>\nto Set Theory\", page 5, &lt;<a href=\"http://home.in.tum.de/~schropp/\">http://home.in.tum.de/~schropp/</a>&gt;, they say:</p>\n<p>In Isabelle, outermost quanti<br>\ners and the [.]-embedding are not<br>\n     printed...</p>\n<p>QUESTION 1: Is there a command to show these hidden meta-logic <br>\nquantifiers, or any other such hidden meta-logic? I suppose not.</p>\n<p>In looking for such a command, I was looking at the \"prf\" command on <br>\npage 141 of isar-ref.pdf. It says:</p>\n<p>Note that this requires proof terms to be switched on for the<br>\n     current object logic (see the \"Proof terms\" section of the<br>\n     Isabelle reference manual for information on how to do this).</p>\n<p>I did searches, looked around, and looked in the index of isar-ref.pdf, <br>\nbut I never found any \"Proof terms\" section that gave such information.</p>\n<p>QUESTION 2: Where does it tell me how to switch on proof terms for the <br>\ncurrent object logic?</p>\n<p>Thanks<br>\nGB</p>",
        "id": 294163605,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660854144
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nOn Fri, 29 Jun 2012, Gottfried Barrow wrote:</p>\n<blockquote>\n<blockquote>\n<p>Examples:</p>\n<p>theorem \"x = y ==&gt; y = z ==&gt; x = z\" by (rule trans)<br>\ntheorem \"⋀x y z. x = y ==&gt; y = z ==&gt; x = z\" by (rule trans)</p>\n<p>Note that this stripping of outermost quantifiers looses some<br>\ninformation, but it is convenient, and quite essential for the<br>\nimplicit rule composition scheme of Isabelle.</p>\n</blockquote>\n<p>But I typed in your 2 theorems above. For the first, in the output of step 0, <br>\nit shows x, y, and z as variables. For the second theorem, no variables are <br>\nshown in the step 0 output.</p>\n</blockquote>\n<p>That is because the second statement has all variables bound, so the goal <br>\nformula is closed and there are no free variables to display here.</p>\n<blockquote>\n<p>I have declare[[show_consts=true]], and this discussion is making some <br>\nsense of the constants that show up, which I talk about below in <br>\nrelation to Trueprop.</p>\n<p>Okay, all of this helps make sense of the mystery constants that show up in <br>\nthe output window:</p>\n<p>prop :: prop =&gt; prop, and<br>\n HOL.Trueprop :: HOL.bool =&gt; prop.</p>\n<p>They're being used, but it doesn't show explicitly how they're being used.</p>\n<p>Well, if the constant quantifier \\&lt;And&gt; is really being used, but not <br>\nexplicitly, then I'm guessing it should show up in the output, like <br>\nTrueprop.</p>\n</blockquote>\n<p>This is a misunderstanding inherited from the holzf.pdf that was cited <br>\nearlier on this thread.  The Pure \"all\" quantifier is always explicitly <br>\nvisible by the !! or \\&lt;And&gt; notation when it is there.  The system <br>\nexplicitly strips outermost quantifiers from result theorems, not by <br>\nsuppression in the syntax, but by changing the theorem via some <br>\ninferences.</p>\n<blockquote>\n<p>I tried</p>\n<p>notation prop (\"Pr\")</p>\n<p>to see how prop is being used, but that gives an error.</p>\n</blockquote>\n<p>You need to quote the \"prop\" above, to prevent its interpretation as <br>\ncommand keyword (as highlighted by Isabelle/jEdit).</p>\n<p>The \"prop\" constant is a bit more esoteric than Trueprop.  It normally <br>\ndoes not show up in user applications at all.  See section 2.3.2 of <br>\n<a href=\"http://isabelle.in.tum.de/dist/Isabelle2012/doc/implementation.pdf\">http://isabelle.in.tum.de/dist/Isabelle2012/doc/implementation.pdf</a> for <br>\nsome bits of explanations on it.</p>\n<blockquote>\n<p>I naively thought that every bool gets mapped to prop, but no, it's not <br>\nthat simple, as shown by \"P x\" above;</p>\n</blockquote>\n<p>Then there would be no reason to have Trueprop at all.  The purpose of it <br>\nis to indicate the boundary between the Pure framework (with its native <br>\nlanguage of natural deduction rules over \\&lt;And&gt; and ==&gt;) and the <br>\nobject-logic with its diversity of connectives.</p>\n<p>Makarius</p>",
        "id": 294218889,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660896364
    }
]