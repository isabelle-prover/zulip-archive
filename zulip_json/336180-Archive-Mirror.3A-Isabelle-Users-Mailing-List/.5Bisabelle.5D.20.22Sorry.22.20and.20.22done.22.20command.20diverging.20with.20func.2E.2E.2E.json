[
    {
        "content": "<p>From: Dominic Mulligan via Cl-isabelle-users &lt;<a href=\"mailto:cl-isabelle-users@lists.cam.ac.uk\">cl-isabelle-users@lists.cam.ac.uk</a>&gt;<br>\nHi,</p>\n<p>I am trying to define a recursive function over sets that will require<br>\na conditional termination proof, like so:</p>\n<p>...</p>\n<p>function (in model) (domintros) rla_exists_until :: \"'w set ⇒ 'w set ⇒<br>\n'w set\" where<br>\n  \"rla_exists_until S T =<br>\n     (let U = {s ∈ S - T. successors s ∩ T ≠ {}} in<br>\n        if U ≠ {} then<br>\n          rla_exists_until S (T ∪ {SOME x. x ∈ U})<br>\n      else T)\"</p>\n<p>...</p>\n<p>As usual, this opens a number of subgoals which appear to be solvable<br>\nusing pat_completeness followed by blast, i.e. applying those tactics<br>\nproduces the message \"No more subgoals\".  However, when typing \"done\"<br>\nafter this set of tactic invocations, the \"done\" command appears to<br>\ndiverge.  Further, replacing the pat_completeness and blast tactics<br>\nwith \"sorry\" also appears to diverge.</p>\n<p>I have tried to rewrite the function above in various different forms,<br>\ninlining the let, and so on, to no avail.  Is there a way to debug<br>\nwhat is going on, or any suggestion as to what the problem may be?  I<br>\nhave already written and proved conditionally terminating a function<br>\nvery similar to the one above with no problem, so there is clearly<br>\nsome sensitivity to the precise shape of the function definition...</p>\n<p>Thanks,<br>\nDominic</p>",
        "id": 294713795,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661183069
    },
    {
        "content": "<p>From: Andreas Lochbihler &lt;<a href=\"mailto:andreas.lochbihler@inf.ethz.ch\">andreas.lochbihler@inf.ethz.ch</a>&gt;<br>\nDear Dominic,</p>\n<p>Your function definition works for me in Isabelle2016-1 if I use the following locale:</p>\n<p>locale model = fixes successors :: \"'w ⇒ 'w set\"</p>\n<p>When done or sorry are processed, the function package internally carries out the <br>\ndefinition and derives all the theorems. This may take a while, but should terminate.</p>\n<p>Then, as you are using the context specification (in model), Isabelle will restore the <br>\nprevious context. So if you are inside some other large locale when you do this function <br>\ncommand, then after done or sorry, the other locale context will be restored, which can <br>\ntake quite some time when large contexts are involved. If this is the case, try to close <br>\nthe context before the definition and see if things improve.</p>\n<p>If this does not help, can you post a minimal example that includes all relevant <br>\ndefinitions of the locale model?</p>\n<p>Best,<br>\nAndreas</p>",
        "id": 294713979,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661183136
    },
    {
        "content": "<p>From: Dominic Mulligan via Cl-isabelle-users &lt;<a href=\"mailto:cl-isabelle-users@lists.cam.ac.uk\">cl-isabelle-users@lists.cam.ac.uk</a>&gt;<br>\nHi Andreas,</p>\n<p>Thanks for the reply.</p>\n<p>After playing around some more with my code I noticed that a<br>\ncopy-paste error meant that an induction principle was marked as a<br>\nsimp rule, by mistake.  After removing the simp attribute from that<br>\ntheorem the \"done\" command is now processed immediately.</p>\n<p>Thanks,<br>\nDominic</p>",
        "id": 294714182,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661183206
    }
]