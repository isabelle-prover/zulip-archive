[
    {
        "content": "<p>From: Lars Hupel &lt;<a href=\"mailto:hupel@in.tum.de\">hupel@in.tum.de</a>&gt;<br>\nDear BNF implementers,</p>\n<p>I'm currently working on some Isabelle/ML code which produces a bunch of<br>\ndatatype specifications, ultimately calling<br>\n'BNF_FP_Def_Sugar.co_datatypes' for all of them. This generally works<br>\nfine, but there appears to be some corner case. I've attached a minimal<br>\nfailing example. Loading this with Isabelle2015 gives the following error<br>\nmessage related to the declaration of the second data type:</p>\n<p>Undeclared hyps:<br>\n    size_String0 &#8801; size_String0<br>\n  The error(s) above occurred for the goal statement&#8962;:<br>\n  map_pre_Rational0 id = id</p>\n<p>(and some more along the same lines)</p>\n<p>If I put a call to 'Local_Theory.restore' in between, the error<br>\ndisappears. (Not that I have any idea why.)</p>\n<p>Cheers<br>\nLars<br>\n<a href=\"/user_uploads/14278/AemiUpqdwpZnhoWHQDUJqQcF/Reproducer.thy\">Reproducer.thy</a></p>",
        "id": 294651688,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661166322
    },
    {
        "content": "<p>From: Lars Hupel &lt;<a href=\"mailto:hupel@in.tum.de\">hupel@in.tum.de</a>&gt;<br>\nHello again,</p>\n<p>I have found another one of those corner cases. This time, it looks like I<br>\nmight be using the ML interface wrong. Once again, I've attached a theory<br>\nreproducing the error.</p>\n<p>It appears that there is some difference between dealing with a finished<br>\ntheory and a non-finished theory. Makarius, maybe you could shed some<br>\nlight on this. Is it generally not supported to modify finished theories<br>\nin Isabelle/ML?</p>\n<p>Cheers<br>\nLars<br>\n<a href=\"/user_uploads/14278/LmprX0yKeVOjXtqlkvaYdBxe/Reproducer.thy\">Reproducer.thy</a></p>",
        "id": 294651999,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661166475
    },
    {
        "content": "<p>From: Lars Hupel &lt;<a href=\"mailto:hupel@in.tum.de\">hupel@in.tum.de</a>&gt;<br>\nAfter some more investigation, I think I can answer that myself: Yes,<br>\nthere is a difference. If I, instead of using a finished theory directly,<br>\nfirst call 'Theory.begin_theory', everything works as expected.</p>\n<p>The underlying problem in the source file I attached wasn't that the<br>\ndatatype wasn't being created, but rather that it was created without<br>\nqualification. (It was just called 'String0'.) I've seen similar things<br>\nwith 'Local_Theory.define', that after some switching between local and<br>\nglobal theories the naming discipline stopped making sense, i.e. morphisms<br>\nproducing unqualified constant names. I still don't know whether this is<br>\nexpected or not, but after looking at the implementation manual I think it<br>\nprobably is (Sec 1.1.1):</p>\n<p>The begin operation starts a new theory by importing several parent<br>\ntheories<br>\n  and entering a special mode of nameless incremental updates, until the<br>\nfinal<br>\n  end operation is performed.</p>\n<p>I couldn't find anything about the 'end' operation though.</p>\n<p>Cheers<br>\nLars</p>",
        "id": 294652006,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661166481
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nLocal_Theory.restore essentially introduces a command-transaction <br>\nboundary, so the two invocations in ML behave like two Isar commands <br>\nwithin a theory file. I can't explain the deeper reason of the problem <br>\nseen here -- there might be something wrong with the context-discipline of <br>\nthe BNF implementation, which is rather complex.</p>\n<p>Dmitriy Traytel has recently updated that for the coming release, see <br>\n<a href=\"http://isabelle.in.tum.de/repos/isabelle/rev/7b915ca69af1\">http://isabelle.in.tum.de/repos/isabelle/rev/7b915ca69af1</a></p>\n<p>The motivation for that change was to allow the name space management of <br>\nIsabelle2015 via \"context begin private/qualified ... end\" work for <br>\n(co)datatype definitions as well, although a few more changes in the <br>\nrepository were required to get it into proper shape (e.g. 2618e7e3b5ea).</p>\n<p>As it happens, these changes also make the problems exposed in the example <br>\ndisappear. This might be an accident, though, and the true reasons for the <br>\nbreakdown still lingering in the dark.</p>\n<p>For now I recommend to keep the Local_Theory.restore workaround and try <br>\nagain when the first release candidates for Isabelle2016 emerge, <br>\npresumably at the start of the year 2016.</p>\n<p>Makarius</p>",
        "id": 294654517,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661167469
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nOn Wed, 12 Aug 2015, Lars Hupel wrote:</p>\n<blockquote>\n<blockquote>\n<p>It appears that there is some difference between dealing with a finished<br>\ntheory and a non-finished theory. Makarius, maybe you could shed some<br>\nlight on this. Is it generally not supported to modify finished theories<br>\nin Isabelle/ML?</p>\n</blockquote>\n<p>After some more investigation, I think I can answer that myself: Yes,<br>\nthere is a difference. If I, instead of using a finished theory directly,<br>\nfirst call 'Theory.begin_theory', everything works as expected.</p>\n</blockquote>\n<p>Theory updates always need to happen within a theory body, as defined by <br>\nTheory.begin_theory ... Theory.end_theory.  Under normal circumstances, <br>\nthe system does that for you, so there are not many words in the <br>\nimplementation manual what happens outside.  That behaviour is essentially <br>\nundefined (or arbitrary).</p>\n<blockquote>\n<p>The underlying problem in the source file I attached wasn't that the<br>\ndatatype wasn't being created, but rather that it was created without<br>\nqualification. (It was just called 'String0'.)</p>\n</blockquote>\n<p>That is an accidental effect of continuing updates after end_theory (of <br>\nthe existing theory Main), which is treated like a formal \"extend\" <br>\noperation.  Thus the naming policy is reset to a global default, without <br>\nany theory prefix yet.</p>\n<p>There could be more explicit checks and error messages.  I used to have <br>\nthat on my TODO list until approx. 15 years ago, and then removed it for <br>\nlack of practical relevance -- at least at that time in the past.</p>\n<p>Makarius</p>",
        "id": 294654527,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661167474
    },
    {
        "content": "<p>From: Lars Hupel &lt;<a href=\"mailto:hupel@in.tum.de\">hupel@in.tum.de</a>&gt;</p>\n<blockquote>\n<p>Theory updates always need to happen within a theory body, as defined by<br>\nTheory.begin_theory ... Theory.end_theory.  Under normal circumstances,<br>\nthe system does that for you, so there are not many words in the<br>\nimplementation manual what happens outside.  That behaviour is essentially<br>\nundefined (or arbitrary).</p>\n</blockquote>\n<p>Okay, that makes sense.</p>\n<blockquote>\n<p>There could be more explicit checks and error messages.  I used to have<br>\nthat on my TODO list until approx. 15 years ago, and then removed it for<br>\nlack of practical relevance -- at least at that time in the past.</p>\n</blockquote>\n<p>I would find more of these checks very helpful, since in my work I'm often<br>\nexercising parts of the system in perhaps unintended ways.</p>\n<p>Cheers<br>\nLars</p>",
        "id": 294654567,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661167499
    }
]