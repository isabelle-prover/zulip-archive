[
    {
        "content": "<p>From: Manuel Eberl &lt;<a href=\"mailto:eberlm@in.tum.de\">eberlm@in.tum.de</a>&gt;<br>\nHallo,</p>\n<p>I have been playing around with some analytic combinatorics lately,<br>\nasking questions like ‘How many values are there of a given datatype<br>\nwith a certain size?’</p>\n<p>For this, it is very convenient to view the definition of the algebraic<br>\ndatatype in terms of a (possibly recursive) sum of products. For<br>\ninstance, for binary trees, I have the following \"encodings\":</p>\n<p>datatype 'a bintree = Leaf 'a | Node \"'a bintree\" \"'a bintree\"</p>\n<p>primrec encode_bintree :: \"'a bintree ⇒ 'a + 'a bintree × 'a bintree\" where<br>\n  \"encode_bintree (Leaf x) = Inl x\"<br>\n| \"encode_bintree (Node l r) = Inr (l, r)\"</p>\n<p>fun decode_bintree :: \"'a + 'a bintree × 'a bintree ⇒ 'a bintree\" where<br>\n  \"decode_bintree (Inl x) = Leaf x\"<br>\n| \"decode_bintree (Inr (l, r)) = Node l r\"</p>\n<p>Essentially, I exploit the fact that ‘α bintree’ is a fixed point of<br>\n'λα. α + (α bintree)²' and therefore ‘α bintree’ is isomorphic to ‘α + α<br>\nbintree × α bintree’.</p>\n<p>My question is now: is there an easy way to generate these encode/decode<br>\nisomorphisms automatically and prove that they are inverses of one<br>\nanother? Is there perhaps a similar construction inside the internals of<br>\nthe datatype package already?</p>\n<p>Cheers,</p>\n<p>Manuel</p>",
        "id": 294659147,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661169272
    },
    {
        "content": "<p>From: Andreas Lochbihler &lt;<a href=\"mailto:andreas.lochbihler@inf.ethz.ch\">andreas.lochbihler@inf.ethz.ch</a>&gt;<br>\nHi Manuel,</p>\n<p>The BNF package internally generates such unfolding and folding constants. They are called <br>\nctor_&lt;typename&gt; and dtor_&lt;typename&gt;. Internally, it also proves that they are inverses of <br>\neach other, but AFAIK these theorems are only made available if the attribute bnf_note_all <br>\nis set at the declaration time of the datatype.</p>\n<p>Hope this helps,<br>\nAndreas</p>",
        "id": 294659156,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661169278
    },
    {
        "content": "<p>From: Jasmin Blanchette &lt;<a href=\"mailto:jasmin.blanchette@inria.fr\">jasmin.blanchette@inria.fr</a>&gt;<br>\nHi Manuel,</p>\n<p>Andreas gave you the most important pointer. Since you seem to be envisioning an ML command for generating them automatically, I suspect you will want to access the ML interfaces of the BNF package directly, and not use \"bnf_note_all\" (which is mostly useful for debugging and/or for sketching BNF extensions).</p>\n<p>The low-level theorems you'd need, e.g. \"ctor_dtor\", are stored in the BNF (co)datatype database:</p>\n<p>ML {*<br>\n    BNF_FP_Def_Sugar.fp_sugar_of @{context} @{type_name bintree}<br>\n    |&gt; the<br>\n    |&gt; #fp_res<br>\n    |&gt; #ctor_dtors<br>\n    |&gt; hd<br>\n    *}</p>\n<p>You might find the code in \"~~/src/HOL/Library/bnf_lfp_countable.ML\" a useful source of inspiration. The \"mk_encode_funs\" function constructs a \"to_nat\" function for a datatype (LFP) from \"to_nat\" functions about the types on which it depends. If you find that of any interest, I can send you the (more readable) theory files that mock up the construction performed at the ML level.</p>\n<p>Incidentally, I'm tempted to rename \"ctor\" to \"in\" and \"dtor\" to \"out\", in keeping with some of the literature, to avoid any confusion between the actual high-level constructors (called \"ctr\"s in the code and some theorems) and the low-level constructors. If anybody is against this renaming, please speak out now.</p>\n<p>Jasmin</p>",
        "id": 294659183,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661169290
    },
    {
        "content": "<p>From: Dmitriy Traytel &lt;<a href=\"mailto:traytel@inf.ethz.ch\">traytel@inf.ethz.ch</a>&gt;<br>\nI am against the renaming. Note that “in” is a keyword in ML and you would need to start decorating the identifiers in the ML code with “x”, “‘“ or “0”. Also in/out are much less symmetric than ctor/dtor. We have actual code that is parametric in the view (there the name xtor is used).</p>\n<p>Dmitriy</p>",
        "id": 294659223,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661169302
    },
    {
        "content": "<p>From: Jasmin Blanchette &lt;<a href=\"mailto:jasmin.blanchette@inria.fr\">jasmin.blanchette@inria.fr</a>&gt;</p>\n<blockquote>\n<p>I am against the renaming. Note that “in” is a keyword in ML and you would need to start decorating the identifiers in the ML code with “x”, “‘“ or “0”.</p>\n</blockquote>\n<p>We have clashes with many other names, e.g. \"rec\" (a keyword, or a recursor), \"map\", \"fold\" (ML functions one does not want to shadow), even \"in\"... (Grep \"recx\", \"mapx\", \"foldx\", \"inx\".) Such clashes, and their crude fix with an \"x\", are not pretty, but they are a reasonable price to pay for having the right names at the Isar level.</p>\n<p>But there is in fact a possible confusion at the ML level, which is much worse than the inelegant \"inx\": \"in\" is already used in the code for set membership (\\&lt;in&gt;), e.g.</p>\n<p>val inx = mk_in Asets sets T;</p>\n<p>So maybe statu quo is best for now.</p>\n<blockquote>\n<p>Also in/out are much less symmetric than ctor/dtor. We have actual code that is parametric in the view (there the name xtor is used).</p>\n</blockquote>\n<p>\"in/out\" are semantically very symmetric. I invented \"xtor\" out of sheer desperation and would happily trade it against \"inout\" or \"io\" or even \"thru\".</p>\n<p>Jasmin</p>",
        "id": 294659284,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661169327
    },
    {
        "content": "<p>From: Manuel Eberl &lt;<a href=\"mailto:eberlm@in.tum.de\">eberlm@in.tum.de</a>&gt;<br>\nThanks, that already looks like pretty much exactly what I want.</p>\n<p>Another problem is that I need a kind of parameterised ‘size’ function, <br>\nwhich simply adds together the size of all the contained objects while <br>\nignoring the structure of the datatype itself.</p>\n<p>Essentially, for a datatype ‘α foo’ with a single type parameter, the <br>\nbehaviour should be something like</p>\n<p>size_foo sz x = setsum sz (set_foo x)</p>\n<p>Or, in other words: I would something that works like datatype's builtin <br>\nsize_foo, but without counting the structure of the datatype itself. <br>\n(e.g. I would the size of ‘[0,0,0]’ to be 0, not 3)</p>\n<p>How would I best go about doing something like this generically for <br>\ndatatypes with arbitrarily many type parameters? This is not a very <br>\nurgent question; the above construction with set_foo works fine for one <br>\nparameter and one parameter is all I currently need, but it would be <br>\nnice to know.</p>\n<p>Cheers,</p>\n<p>Manuel</p>",
        "id": 294659329,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661169345
    },
    {
        "content": "<p>From: Manuel Eberl &lt;<a href=\"mailto:eberlm@in.tum.de\">eberlm@in.tum.de</a>&gt;</p>\n<blockquote>\n<p>size_foo sz x = setsum sz (set_foo x) <br>\nApologies, this is, of course, rubbish – multiple occurrences must, of <br>\ncourse, be counted multiple times!</p>\n</blockquote>",
        "id": 294659347,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661169352
    },
    {
        "content": "<p>From: Andreas Lochbihler &lt;<a href=\"mailto:andreas.lochbihler@inf.ethz.ch\">andreas.lochbihler@inf.ethz.ch</a>&gt;<br>\nHi Manuel,</p>\n<p>There is no generic construction like that at the moment in BNF, but it would be easy to <br>\ndefine. Have you looked at how the existing size function works? For polymorphic types <br>\nlike 'a list, there is a more general function size_list which takes a size function for <br>\nthe type argument. The size_list function sums the given function over all elements of a <br>\nlist and then adds the list structure to it. So if you just want the sum over the <br>\nelements, how about using list_size f xs - size xs? Alternatively, you can also copy the <br>\nsize plugin and change it to produce the function you need.</p>\n<p>Of course, this only works for datatypes for which the size plugin can generate size <br>\nfunctions. For example, I have not yet tried whether there is also a size function if the <br>\ndatatype contains finite sets and multisets.</p>\n<p>Best,<br>\nAndreas</p>",
        "id": 294659360,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661169358
    },
    {
        "content": "<p>From: Jasmin Blanchette &lt;<a href=\"mailto:jasmin.blanchette@inria.fr\">jasmin.blanchette@inria.fr</a>&gt;<br>\nAndreas wrote:</p>\n<blockquote>\n<p>Of course, this only works for datatypes for which the size plugin can generate size functions. For example, I have not yet tried whether there is also a size function if the datatype contains finite sets and multisets.</p>\n</blockquote>\n<p>Interesting examples. These actually work, thanks to a hook in the \"size\" plugin:</p>\n<p>HOL$ grep BNF_LFP_Size <em>/</em>thy<br>\nLibrary/FSet.thy:BNF_LFP_Size.register_size_global @{type_name fset} @{const_name size_fset}<br>\nLibrary/Multiset.thy:  BNF_LFP_Size.register_size_global @{type_name multiset} @{const_name size_multiset}</p>\n<p>Jasmin</p>",
        "id": 294659408,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661169363
    },
    {
        "content": "<p>From: Lars Hupel &lt;<a href=\"mailto:hupel@in.tum.de\">hupel@in.tum.de</a>&gt;<br>\nHi Jasmin,</p>\n<p>this is very nifty, thanks for the hint! Maybe at some point we can use<br>\nthis to support generic programming à la de Vries &amp; Löh<br>\n(&lt;<a href=\"http://www.andres-loeh.de/TrueSumsOfProducts/TrueSumsOfProducts.pdf\">http://www.andres-loeh.de/TrueSumsOfProducts/TrueSumsOfProducts.pdf</a>&gt;).</p>\n<p>Cheers<br>\nLars</p>",
        "id": 294659437,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661169370
    },
    {
        "content": "<p>From: Manuel Eberl &lt;<a href=\"mailto:eberlm@in.tum.de\">eberlm@in.tum.de</a>&gt;</p>\n<blockquote>\n<p>So if you just want the sum over the elements, how about using <br>\nlist_size f xs - size xs?</p>\n</blockquote>\n<p>That's a great idea. It may not be the most elegant solution, but it<br>\nsounds pretty foolproof. Thanks!</p>",
        "id": 294659473,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661169382
    },
    {
        "content": "<p>From: Jasmin Blanchette &lt;<a href=\"mailto:jasmin.blanchette@inria.fr\">jasmin.blanchette@inria.fr</a>&gt;<br>\nIncidentally, for the record, this would have led to off-by-one bugs with the old datatype package. From \"datatypes.pdf\":</p>\n<p>\"The size function has a slightly different definition. The new function returns 1 instead of 0 for some nonrecursive constructors. This departure from the old behavior made it possible to implement size in terms of the generic function t.size_t.\"</p>\n<p>In other words, the old package defined \"size\" and \"size_list\" (or rather, back then, \"list_size\") independently of each other, with some anomalies. IIRC, a constructor like \"C 'a\" used to count as 0 for \"size\" (instead of 1 now) and as \"1 + f a\" (where a is C's argument of type 'a) for \"size_list\". I thought this was crazy, but experience has shown that the old definition often gave better automation in termination proofs, as the IsaFoR developers discovered when porting their theories to the new package.</p>\n<p>Jasmin</p>",
        "id": 294659496,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661169388
    },
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\nOn 18/11/2015 10:01, Jasmin Blanchette wrote:</p>\n<blockquote>\n<blockquote>\n<p>On 18.11.2015, at 09:52, Manuel Eberl &lt;<a href=\"mailto:eberlm@in.tum.de\">eberlm@in.tum.de</a>&gt; wrote:</p>\n<blockquote>\n<p>So if you just want the sum over the elements, how about using<br>\nlist_size f xs - size xs?</p>\n</blockquote>\n<p>That's a great idea. It may not be the most elegant solution, but it<br>\nsounds pretty foolproof.</p>\n</blockquote>\n<p>Incidentally, for the record, this would have led to off-by-one bugs with the old datatype package. From \"datatypes.pdf\":</p>\n<p>\"The size function has a slightly different definition. The new function returns 1 instead of 0 for some nonrecursive constructors. This departure from the old behavior made it possible to implement size in terms of the generic function t.size_t.\"</p>\n</blockquote>\n<p>When I read \"some\" I wondered what that means. Experimentally I found:</p>\n<p>datatype t1 = A bool<br>\n==&gt; size (A True) = 0</p>\n<p>datatype 'a t2 = A 'a<br>\n==&gt; size (A True) = 1</p>\n<p>I understand why, but I am not convinced this difference in behaviour is <br>\nbeneficial for users of size.</p>\n<blockquote>\n<p>In other words, the old package defined \"size\" and \"size_list\" (or rather, back then, \"list_size\") independently of each other, with some anomalies. IIRC, a constructor like \"C 'a\" used to count as 0 for \"size\" (instead of 1 now) and as \"1 + f a\" (where a is C's argument of type 'a) for \"size_list\". I thought this was crazy, but experience has shown that the old definition often gave better automation in termination proofs, as the IsaFoR developers discovered when porting their theories to the new package.</p>\n</blockquote>\n<p>I could have told you that because that is one of the reasons for the old <br>\ndesign. Experience, not only doctrine.</p>\n<p>Tobias</p>\n<blockquote>\n<p>Jasmin</p>\n<p><a href=\"/user_uploads/14278/9TH_BRhMbUqk6PPIoPIEK6Mv/smime.p7s\">smime.p7s</a></p>\n</blockquote>",
        "id": 294659516,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661169395
    },
    {
        "content": "<p>From: Jasmin Blanchette &lt;<a href=\"mailto:jasmin.blanchette@inria.fr\">jasmin.blanchette@inria.fr</a>&gt;</p>\n<blockquote>\n<p>When I read \"some\" I wondered what that means. Experimentally I found:</p>\n<p>datatype t1 = A bool<br>\n==&gt; size (A True) = 0</p>\n<p>datatype 'a t2 = A 'a<br>\n==&gt; size (A True) = 1</p>\n<p>I understand why, but I am not convinced this difference in behaviour is beneficial for users of size.</p>\n</blockquote>\n<p>Beneficial as opposed to what? Returning 1 in both cases would be even less compatible (esp. for list), and returning 0 in both cases is -- well -- precisely the old behavior, which doesn't have the nice \"foolproof\" property mentioned by Andreas, and for which I can easily construct an example like yours above that exhibits an odd difference in behavior (which is even less regular and intelligible). And of course, the old way of doing things required two \"primrec\" definitions instead of one \"primrec\" and one simple \"definition\".</p>\n<p>If I could go back in time, I'm still not sure if we would go for 100% compatibility with the old package or for the current scheme, but I would have brought it up for discussion on \"isabelle-users\". I suspect the outcome of the discussion would have been \"don't fix it if it ain't broken\".</p>\n<blockquote>\n<blockquote>\n<p>In other words, the old package defined \"size\" and \"size_list\" (or rather, back then, \"list_size\") independently of each other, with some anomalies. IIRC, a constructor like \"C 'a\" used to count as 0 for \"size\" (instead of 1 now) and as \"1 + f a\" (where a is C's argument of type 'a) for \"size_list\". I thought this was crazy, but experience has shown that the old definition often gave better automation in termination proofs, as the IsaFoR developers discovered when porting their theories to the new package.</p>\n</blockquote>\n<p>I could have told you that because that is one of the reasons for the old design. Experience, not only doctrine.</p>\n</blockquote>\n<p>I believe you are mistaking lethargy for strategy.</p>\n<p>If the old design had been documented in any way, it might have helped me understand it and replicate it. But not only it wasn't documented, the odd behavior looked so much like an oversight (in terms of both behavior and code) that it didn't cross my mind to ask around. Had I realized for one second that there might be a deeper reason for the behavior, I would have not hesitated to bring this up.</p>\n<p>If there is a strong consensus in favor of restoring the old behavior, it wouldn't be terribly hard for me to change things to how they used to be. But from what I understand, the porting pains where not very big and are now behind us, and the new behavior is actually useful sometimes (cf. Andreas's solution and Manuel's \"foolproof\" comment).</p>\n<p>Jasmin</p>",
        "id": 294659533,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661169401
    },
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\nOn 18/11/2015 11:56, Jasmin Blanchette wrote:</p>\n<blockquote>\n<blockquote>\n<p>When I read \"some\" I wondered what that means. Experimentally I found:</p>\n<p>datatype t1 = A bool<br>\n==&gt; size (A True) = 0</p>\n<p>datatype 'a t2 = A 'a<br>\n==&gt; size (A True) = 1</p>\n<p>I understand why, but I am not convinced this difference in behaviour is beneficial for users of size.</p>\n</blockquote>\n<p>Beneficial as opposed to what?</p>\n</blockquote>\n<p>Detrimental. In the above example an abstraction step now changes the behaviour <br>\nof size.</p>\n<blockquote>\n<p>Returning 1 in both cases would be even less compatible (esp. for list), and returning 0 in both cases is -- well -- precisely the old behavior, which doesn't have the nice \"foolproof\" property mentioned by Andreas, and for which I can easily construct an example like yours above that exhibits an odd difference in behavior (which is even less regular and intelligible).</p>\n</blockquote>\n<p>I assume by \"exhibits an odd difference in behavior\" you mean some term <br>\ninvolving both size and size_t? They were never claimed or intended to have a <br>\nfixed relationship. You can of course view that as an advantage of the new <br>\ndefinition of size.</p>\n<blockquote>\n<p>And of course, the old way of doing things required two \"primrec\" definitions instead of one \"primrec\" and one simple \"definition\".</p>\n</blockquote>\n<p>That is an implementation advantage.</p>\n<p>The raison d'etre of the old size function were termination proofs and for those <br>\nit works slightly better than the new schema. On the other hand there is the <br>\nrelationship to size_t that seems to be useful in at least one case. Hence I am <br>\nnot saying we must go back to the previous definitions. But your argument that <br>\nthis feature was not documented and seemed crazy to you and that thus you felt <br>\nfree to change it shows a cavalier attitude towards source code. Let me assume <br>\nin your favour that the change had no negative effect in the distribution and <br>\nthe AFP and that the problems in IsaFor only showed up later.</p>\n<p>Tobias</p>\n<blockquote>\n<p>If I could go back in time, I'm still not sure if we would go for 100% compatibility with the old package or for the current scheme, but I would have brought it up for discussion on \"isabelle-users\". I suspect the outcome of the discussion would have been \"don't fix it if it ain't broken\".</p>\n<blockquote>\n<blockquote>\n<p>In other words, the old package defined \"size\" and \"size_list\" (or rather, back then, \"list_size\") independently of each other, with some anomalies. IIRC, a constructor like \"C 'a\" used to count as 0 for \"size\" (instead of 1 now) and as \"1 + f a\" (where a is C's argument of type 'a) for \"size_list\". I thought this was crazy, but experience has shown that the old definition often gave better automation in termination proofs, as the IsaFoR developers discovered when porting their theories to the new package.</p>\n</blockquote>\n<p>I could have told you that because that is one of the reasons for the old design. Experience, not only doctrine.</p>\n</blockquote>\n<p>I believe you are mistaking lethargy for strategy.</p>\n<p>If the old design had been documented in any way, it might have helped me understand it and replicate it. But not only it wasn't documented, the odd behavior looked so much like an oversight (in terms of both behavior and code) that it didn't cross my mind to ask around. Had I realized for one second that there might be a deeper reason for the behavior, I would have not hesitated to bring this up.</p>\n<p>If there is a strong consensus in favor of restoring the old behavior, it wouldn't be terribly hard for me to change things to how they used to be. But from what I understand, the porting pains where not very big and are now behind us, and the new behavior is actually useful sometimes (cf. Andreas's solution and Manuel's \"foolproof\" comment).</p>\n<p>Jasmin</p>\n<p><a href=\"/user_uploads/14278/AMVrMn9a2ugmUiPZ7eQ-USij/smime.p7s\">smime.p7s</a></p>\n</blockquote>",
        "id": 294659647,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661169438
    },
    {
        "content": "<p>From: Jasmin Blanchette &lt;<a href=\"mailto:jasmin.blanchette@inria.fr\">jasmin.blanchette@inria.fr</a>&gt;</p>\n<blockquote>\n<blockquote>\n<p>Returning 1 in both cases would be even less compatible (esp. for list), and returning 0 in both cases is -- well -- precisely the old behavior, which doesn't have the nice \"foolproof\" property mentioned by Andreas, and for which I can easily construct an example like yours above that exhibits an odd difference in behavior (which is even less regular and intelligible).</p>\n</blockquote>\n<p>I assume by \"exhibits an odd difference in behavior\" you mean some term involving both size and size_t? They were never claimed or intended to have a fixed relationship.</p>\n</blockquote>\n<p>If you define type U by nesting through type T, the \"size\" function of U will depend on \"size_T\" -- hence there is a connection between the two. The lack of uniformity of the old definition is visible in examples such as</p>\n<p>(* with Isabelle2014 *)</p>\n<p>datatype 'a x = X 'a</p>\n<p>thm x.size</p>\n<p>datatype 'a y = Y \"'a y x\" | Y'</p>\n<p>thm y.size</p>\n<p>value \"size (X Y')\"       -- \"returns 0\"<br>\n    value \"size (Y (X Y'))\"   -- \"returns 2\"</p>\n<blockquote>\n<p>But your argument that this feature was not documented and seemed crazy to you and that thus you felt free to change it shows a cavalier attitude towards source code.</p>\n</blockquote>\n<p>The tone of some of your emails reveals a cavalier attitude towards the people who work or worked for or with you. We have had instances of passive-aggressive emails from your part regarding minor points of datatypes (minor compared with the scale of the whole BNF entreprise), some of it on-list, some off-list. You will remember how this ended. Because you had the courage to apologize, you came out of the deal as an (even) greater man in my eyes than before.</p>\n<p>I had reasons to believe this would be the first and last time we would be going into that loop, but alas the same nonconstructive pattern is arising again -- and again in connection with the datatypes.</p>\n<p>I would greatly appreciate if you could keep your comments -- whether on-list or off-list -- to objective observations, as opposed to a procès d'intention. I don't know what I've done to you to deserve this; clearly, I must have done something to annoy you, but I doubt it has anything to do with the \"size\" function. I would appreciate if you could tell it to me frankly off-list rather than through insinuations on-list.</p>\n<p>I'm in Nancy this week. You can also pick up the phone if you think this would be more helpful. The phone number is on my web page.</p>\n<blockquote>\n<p>Let me assume in your favour</p>\n</blockquote>\n<p>(No comment on this condescending phrase.)</p>\n<blockquote>\n<p>that the change had no negative effect in the distribution and the AFP</p>\n</blockquote>\n<p>It had one negative effect on one AFP entry (Fitting), which was nearly trivial to work around.</p>\n<blockquote>\n<p>and that the problems in IsaFor only showed up later.</p>\n</blockquote>\n<p>That's correct.</p>\n<p>Jasmin</p>",
        "id": 294659694,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661169456
    },
    {
        "content": "<p>From: Jasmin Blanchette &lt;<a href=\"mailto:jasmin.blanchette@inria.fr\">jasmin.blanchette@inria.fr</a>&gt;</p>\n<blockquote>\n<p>But your argument that this feature was not documented and seemed crazy to you and that thus you felt free to change it shows a cavalier attitude towards source code.</p>\n</blockquote>\n<p>For the record: I did not change the source code. The code for the new package had to be rewritten from scratch (a few hundred lines), and we had to choose how to design it. Compatibility was a high concern, but I failed to realize that this apparently minor issue would have any impact at all on existing formalizations (failing to think that anything of the form \"0 &lt;= ...\" is trivial to prove), while leading to (in my eyes) a cleaner approach. Implementing the old approach wouldn't have been harder; but it just felt \"uglier\" and \"wrong\". Now I know better.</p>\n<p>Overall, we managed to achieve very high levels of backward compatibility and actually pulled it off. The ongoing \"Nominal2\" vs. \"Nominal\" is reminder of how hard it is to subsume and replace an existing Isabelle package. We (I) have made bona fide errors along the way, but I think our record is remarkable and deserves more praise than criticism.</p>\n<p>Jasmin</p>",
        "id": 294659715,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661169462
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nDefinitely.  I am impressed how the BNF datatype upgrade went through, <br>\nwhile the task was looking bigger and bigger as the years passed by.  One <br>\nof the greatest engineering projects since Stonehenge!</p>\n<p>Makarius</p>",
        "id": 294659725,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661169468
    },
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\nDear Jasmin,</p>\n<p>The only point I was trying to make is a very general one: In the absence of <br>\nexternal documentation, the source code should be taken seriously or questioned <br>\nbut not just changed. I am sure we agree on this but in the light of the size <br>\ndiscussion I felt it was worth reemphasizing on the list. No insult intended.</p>\n<p>Tobias<br>\n<a href=\"/user_uploads/14278/zvMOUGvkQJNFAzlz0liQW_Ft/smime.p7s\">smime.p7s</a></p>",
        "id": 294659850,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661169505
    },
    {
        "content": "<p>From: Andrei Popescu &lt;<a href=\"mailto:A.Popescu@mdx.ac.uk\">A.Popescu@mdx.ac.uk</a>&gt;<br>\nJasmin wrote:</p>\n<blockquote>\n<blockquote>\n<p>\"in/out\" are semantically very symmetric. I invented \"xtor\" out of sheer desperation and would happily trade it against \"inout\" or \"io\" or even \"thru\".</p>\n</blockquote>\n</blockquote>\n<p>I don't have a strong position about these names. Just a historic note: These were initially called \"fold\" and \"unfold,\" <br>\nwhich I still think are the most accurate names. Of course, they clash with traditional combinator names, and this is why we renounced them.</p>\n<p>All the best, <br>\n  Andrei </p>\n<p>-----Original Message-----<br>\nFrom: Jasmin Blanchette [mailto:jasmin.blanchette@inria.fr] <br>\nSent: 17 November 2015 15:16<br>\nTo: Dmitriy Traytel<br>\nCc: Manuel Eberl; <a href=\"mailto:cl-isabelle-users@lists.cam.ac.uk\">cl-isabelle-users@lists.cam.ac.uk</a>; Andrei Popescu<br>\nSubject: Re: [isabelle] \"Unfolding\" the sum-of-products encoding of datatypes</p>\n<blockquote>\n<p>I am against the renaming. Note that “in” is a keyword in ML and you would need to start decorating the identifiers in the ML code with “x”, “‘“ or “0”.</p>\n</blockquote>\n<p>We have clashes with many other names, e.g. \"rec\" (a keyword, or a recursor), \"map\", \"fold\" (ML functions one does not want to shadow), even \"in\"... (Grep \"recx\", \"mapx\", \"foldx\", \"inx\".) Such clashes, and their crude fix with an \"x\", are not pretty, but they are a reasonable price to pay for having the right names at the Isar level.</p>\n<p>But there is in fact a possible confusion at the ML level, which is much worse than the inelegant \"inx\": \"in\" is already used in the code for set membership (\\&lt;in&gt;), e.g.</p>\n<p>val inx = mk_in Asets sets T;</p>\n<p>So maybe statu quo is best for now.</p>\n<blockquote>\n<p>Also in/out are much less symmetric than ctor/dtor. We have actual code that is parametric in the view (there the name xtor is used).</p>\n</blockquote>\n<p>\"in/out\" are semantically very symmetric. I invented \"xtor\" out of sheer desperation and would happily trade it against \"inout\" or \"io\" or even \"thru\".</p>\n<p>Jasmin</p>",
        "id": 294659874,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661169517
    },
    {
        "content": "<p>From: Gerwin Klein &lt;<a href=\"mailto:Gerwin.Klein@nicta.com.au\">Gerwin.Klein@nicta.com.au</a>&gt;<br>\nTobias already clarified what he was aiming at, but let me chime in to say that I also was impressed with how professionally the new BNF datatypes were introduced and with the prompt support I got from Jasmin and everyone involved to help iron out the few issues it raised in our proofs.</p>\n<p>It does deserve praise, I don’t think anyone doubts that.</p>\n<p>Cheers,<br>\nGerwin</p>\n<hr>\n<p>The information in this e-mail may be confidential and subject to legal professional privilege and/or copyright. National ICT Australia Limited accepts no liability for any damage caused by this email or its attachments.</p>",
        "id": 294659892,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661169523
    }
]