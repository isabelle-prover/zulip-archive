[
    {
        "content": "<p>From: Lars Noschinski &lt;<a href=\"mailto:noschinl@in.tum.de\">noschinl@in.tum.de</a>&gt;<br>\nApart from adhoc-mechanisms on the ML level, there is no such thing in <br>\nIsabelle. There have been occasional requests for support of concepts <br>\nlike 'proof by analogy' or 'without loss of generality'. But to my <br>\nknowledge, there haven't been any efforts to implement such a thing.</p>\n<p>Support for the really simple cases (like your example, just replace <br>\nHeadMap by TailMap everwhere) would probably be just a technical <br>\nproblem, but often the mathematical notion of \"similarly\" is quite a bit <br>\nwider ...</p>\n<p>-- Lars</p>",
        "id": 294149643,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660848825
    },
    {
        "content": "<p>From: Jeremy Dawson &lt;<a href=\"mailto:jeremy@rsise.anu.edu.au\">jeremy@rsise.anu.edu.au</a>&gt;<br>\nJohn Wickerson wrote:<br>\nJohn,</p>\n<p>Where what varies is the choice of theorem you could get something like<br>\n(and this sort of thing is absolutely routine in my work):</p>\n<p>fun mtacs XMap = [ ... ] : tactic list ;</p>\n<p>Then use, one time, (EVERY (mtacs HeadMapThm))<br>\nand the other time (EVERY (mtacs TailMapThm)).</p>\n<p>In your case what differs between the two cases is the choice of the <br>\nconstant (?)<br>\nHeadMap or TailMap, to plug into a particular spot.  You could no doubt <br>\nwork something out involving a variable ?XMap (in place of HeadMap or <br>\nTailMap), a subgoal  ?XMap = ?XMap, and resolve this with theorems such as<br>\nHeadMap = HeadMap (in one instance), or TailMap = TailMap (in the other).</p>\n<p>Alternatively, what I have also done on occasions is to create different <br>\nstrings for use in subgoal_tac or similar</p>\n<p>fun string1 XMapstr =    .... ^ XMapstr ^ ....<br>\nand use<br>\nstring1 \"HeadMap\" or string1 \"TailMap\"</p>\n<p>You have to be using the ML interface to Isabelle to do this - which, I <br>\nunderstand, is what ML was originally designed for - and so is <br>\nparticularly well suited for.</p>\n<p>Cheers,</p>\n<p>Jeremy</p>",
        "id": 294149665,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660848834
    },
    {
        "content": "<p>From: John Wickerson &lt;<a href=\"mailto:jpw48@cam.ac.uk\">jpw48@cam.ac.uk</a>&gt;<br>\nHello,</p>\n<p>Is there a feature in Isabelle that corresponds to writing \"and similarly\" in an informal pen-and-paper proof? Specifically, here is a fragment of my proof script:</p>\n<p>The two blocks here are identical, except one uses \"HeadMap\" where the other uses \"TailMap\". (HeadMap and TailMap are both record constructors.) Is there a neat way to remove the duplication here? </p>\n<p>Thanks very much,<br>\nJohn</p>",
        "id": 294151351,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660849418
    },
    {
        "content": "<p>From: Steven Obua &lt;<a href=\"mailto:steven.obua@googlemail.com\">steven.obua@googlemail.com</a>&gt;<br>\nThis question made my day :-)</p>\n<p>Cheers,</p>\n<p>Steven</p>",
        "id": 294151355,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660849419
    },
    {
        "content": "<p>From: Ramana Kumar &lt;<a href=\"mailto:rk436@cam.ac.uk\">rk436@cam.ac.uk</a>&gt;<br>\nIf you were writing tactics (i.e. using \"apply-style\" proofs), you could<br>\nuse function abstraction. For example:<br>\nfun foo m = ...<br>\nthen in the proof:<br>\napply foo HeadMap<br>\nnext<br>\napply foo TailMap</p>\n<p>But this is not very robust, and I don't know if there's anything<br>\nequivalent in \"proper\" (structured) Isar.</p>",
        "id": 294151381,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660849426
    },
    {
        "content": "<p>From: Andreas Lochbihler &lt;<a href=\"mailto:andreas.lochbihler@kit.edu\">andreas.lochbihler@kit.edu</a>&gt;<br>\nHi John,</p>\n<p>the proofs look to me as if they are completely independent of HeadMap and <br>\nTailMap. Hence, Isar allows you to abstract over them and prove both goals in <br>\none go:</p>\n<p>next<br>\n   fix HeadOrTailMap<br>\n   assume \"opt1 fN \\&lt;circ&gt;  HeadOrTailMap g1 = HeadOrTailMap g2 \\&lt;circ&gt;  fA\"<br>\n      and \"opt1 fN' \\&lt;circ&gt;  HeadOrTailMap g2 = HeadOrTailMap g3 \\&lt;circ&gt;  fA'\"<br>\n   hence \"opt1 fN' \\&lt;circ&gt;  opt1 fN \\&lt;circ&gt;  HeadOrTailMap g1 =<br>\n          HeadOrTailMap g3 \\&lt;circ&gt;  fA' \\&lt;circ&gt;  fA\"<br>\n     using o_assoc[of \"opt1 fN'\" \"opt1 fN\" \"HeadOrTailMap g1\"]<br>\n     and o_assoc[of \"opt1 fN'\" \"HeadOrTailMap g2\" \"fA\"] by auto<br>\n   hence \"opt1 (fN' \\&lt;circ&gt;  fN) \\&lt;circ&gt;  HeadOrTailMap g1 =<br>\n          HeadOrTailMap g3 \\&lt;circ&gt;  (fA' \\&lt;circ&gt;  fA)\" (is ?thesis)<br>\n     using opt1_o[of \"fN'\" \"fN\"] by auto<br>\n   thus ?thesis and ?thesis by -<br>\nqed</p>\n<p>In order to solve both goals, you still must state the \"show\" or \"thus\" part <br>\ntwice, which is why I introduced the ?thesis abbreviation.</p>\n<p>Problems with distinct types might cause this approach to fail. In that case, <br>\nyou can state the above proof as a separate lemma X and then use</p>\n<p>qed(erule (2) X)+</p>\n<p>instead.</p>\n<p>Hope this helps,<br>\nAndreas</p>",
        "id": 294151391,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660849432
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nContemporary Isabelle does not really have anything that could be called <br>\n\"ML interface\".  There is Isabelle/ML and Isabelle/Isar, and both are <br>\nintertwined in a certain way: ML is used for the implementation of Isar, <br>\nand Isar embeds ML into its formal context later on in the bootstrapping.</p>\n<p>The primary \"interface\" to the user is the Isar source language (by <br>\ndefinition).  It can refer to ML in better ways than ever before in the <br>\nhistory of LCF-style theorem proving.  The current Prover IDE <br>\n(Isabelle/jEdit) even provides hyperlinks for ML entities and inferred <br>\ntypes.  The TTY loop is a bit more awkward here, and in fact close to <br>\nbeing useless.</p>\n<p>Taking Isabelle/Isar and Isabelle/ML together, it is possible to define <br>\nyour own proof methods, say to automate certain standard proof schemes. <br>\nThis transfers the old LCF idea of user-defined tactics into the world of <br>\nIsabelle/Isar, but not much more.</p>\n<p>What is conceptually missing is a systematic way to define proof patterns <br>\nin a more structured language.  Ltac of Coq marks some success in that <br>\nrespect: it allows users to define tactics quickly without embarking on <br>\ndetails about ML.</p>\n<p>Nonetheless, instead of adding a \"proof programming language\" to Isar, I <br>\nconceptually prefer to keep the language as is, and instead empower the <br>\nProver IDE around it.  With serious \"proof refactoring\", which is a <br>\nnon-trivial thing to provide, one could imaging certain \"and similarly <br>\n...\" operations on the source.</p>\n<p>Makarius</p>",
        "id": 294152260,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660849739
    }
]