[
    {
        "content": "<p>From: John Wickerson &lt;<a href=\"mailto:jpw48@cam.ac.uk\">jpw48@cam.ac.uk</a>&gt;<br>\nHi Isabelle,</p>\n<p>My theory file (see below) gets stuck at the word \"done\". On the line preceding \"done\", the proof state says...</p>\n<p>proof (prove): step 2</p>\n<p>goal:<br>\nNo subgoals! </p>\n<p>... so it feels like there is nothing left to do. What's going on?</p>\n<p>Thanks for any assistance,<br>\nJohn</p>\n<hr>\n<p>theory scratch imports<br>\n  Main<br>\nbegin</p>\n<p>definition fst3 :: \"'a × 'b × 'c ⇒ 'a\"<br>\nwhere \"fst3 ≡ fst\"</p>\n<p>definition snd3 :: \"'a × 'b × 'c ⇒ 'b\"<br>\nwhere \"snd3 ≡ fst ∘ snd\"</p>\n<p>definition thd3 :: \"'a × 'b × 'c ⇒ 'c\"<br>\nwhere \"thd3 ≡ snd ∘ snd\"</p>\n<p>typedecl assertion</p>\n<p>typedecl command<br>\nconsts Choose :: \"command ⇒ command ⇒ command\"<br>\nconsts Loop :: \"command ⇒ command\"<br>\nconsts Skip :: \"command\"<br>\nconsts Seq :: \"command ⇒ command ⇒ command\" (infixr \";;\" 55)</p>\n<p>typedecl node</p>\n<p>datatype assnode =<br>\n  Rib \"assertion\"<br>\n| Exists_dia \"string\" \"diagram\"<br>\nand comnode = <br>\n  Com \"command\"<br>\n| Choose_dia \"diagram\" \"diagram\"<br>\n| Loop_dia \"diagram\"<br>\nand diagram = <br>\n  Graph \"node list\" \"node ⇒ assnode\" \"(node list × comnode × node list) list\"<br>\ntype_synonym labelling = \"node ⇒ assnode\"<br>\ntype_synonym edge = \"node list × comnode × node list\"</p>\n<p>fun lins :: \"diagram ⇒ ((node + edge) list) set\"<br>\nwhere<br>\n\"lins (Graph V Λ E) = {π . <br>\n    (distinct π) <br>\n  ∧ (set π = (set V) &lt;+&gt; (set E)) <br>\n  ∧ (∀i j v e. <br>\n    i &lt; length π ∧ j &lt; length π ∧ π!i = Inl v ∧ π!j = Inr e ∧ v ∈ set (fst3 e) <br>\n    ⟶ i&lt;j) <br>\n  ∧ (∀j k w e. <br>\n    j &lt; length π ∧ k &lt; length π ∧ π!j = Inr e ∧ π!k = Inl w ∧ w ∈ set (thd3 e) <br>\n    ⟶ j&lt;k) }\"</p>\n<p>function<br>\n  coms_dia :: \"diagram ⇒ command set\" and<br>\n  coms_ass :: \"assnode ⇒ command set\" and<br>\n  coms_com :: \"comnode ⇒ command set\"<br>\nwhere<br>\n  \"coms_ass (Rib p) = {Skip}\"<br>\n| \"coms_ass (Exists_dia x G) = coms_dia G\"<br>\n| \"coms_com (Com c) = {c}\"<br>\n| \"coms_com (Choose_dia G H) = {Choose c d | c d . <br>\n  c ∈ coms_dia G ∧ d ∈ coms_dia H}\"<br>\n| \"coms_com (Loop_dia G) = { Loop c | c . c ∈ coms_dia G}\"<br>\n| \"coms_dia (Graph V Λ E) = { foldr (op ;;) cs Skip | cs .  <br>\n  ∃π ∈ lins (Graph V Λ E) . ∀i&lt;length cs. <br>\n  (cs!i) ∈ (case (π!i) of <br>\n  Inl v ⇒ coms_ass (Λ v) |<br>\n  Inr e ⇒ coms_com (snd3 e)) }\"<br>\napply pat_completeness <br>\napply clarify+<br>\ndone</p>\n<p>end</p>",
        "id": 294228984,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660901449
    },
    {
        "content": "<p>From: John Wickerson &lt;<a href=\"mailto:jpw48@cam.ac.uk\">jpw48@cam.ac.uk</a>&gt;<br>\nHi again,</p>\n<p>Just to add: I found that if I expand the final \"apply clarify\" into the full \"fix/assume/show\" version, then everything works fine. </p>\n<p>john</p>",
        "id": 294228993,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660901455
    },
    {
        "content": "<p>From: John Wickerson &lt;<a href=\"mailto:jpw48@cam.ac.uk\">jpw48@cam.ac.uk</a>&gt;<br>\noops, sorry, please ignore my last email. it's still broken actually.</p>",
        "id": 294229002,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660901461
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nThe 'done' is not a problem -- any other way to finish that proof puts the <br>\nfunction package in a bad situation, e.g. 'sorry' at its start.</p>\n<p>Technically, you are feeding a certain auxiliary result back into the <br>\ndefinitional package, but it cannot cope with it.  Someone who understands <br>\nthe function package better needs to take a closer look.</p>\n<p>Makarius</p>",
        "id": 294229194,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660901535
    }
]