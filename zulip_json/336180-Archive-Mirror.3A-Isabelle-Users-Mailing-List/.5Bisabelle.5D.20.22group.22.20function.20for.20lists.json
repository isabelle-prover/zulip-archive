[
    {
        "content": "<p>From: Manuel Eberl &lt;<a href=\"mailto:eberlm@in.tum.de\">eberlm@in.tum.de</a>&gt;<br>\nHallo,</p>\n<p>for a project of mine, I had to define a \"group\" function on lists, and<br>\nI think this might be of enough general interest to be added to the<br>\nlibrary; I am not entirely sure whom I am supposed to contact in these<br>\nmatters, so I thought it would be best to just post it on the mailing list.</p>\n<p>The function does something similar to Haskell's group function, but not<br>\nquite the same. The function \"merges\" all adjacent equal elements of a<br>\nlist, e.g. it turns [1,2,2,3,3,3,2,2,1] into [1,2,3,2,1].</p>\n<p>(This function has type 'a list ⇒ 'a list, whereas the Haskell function<br>\n\"group\" has type 'a list ⇒ 'a list list, it turns [1,2,2] not into<br>\n[1,2], like my function, but into [[1],[2,2]])</p>\n<p>I attached an Isabelle theory with the function definition and proofs<br>\nfor some basic properties.</p>\n<p>Cheers,<br>\nManuel<br>\n<a href=\"/user_uploads/14278/LVJCIlE8kpAFrNeQsVxR8Z-T/List_Group.thy\">List_Group.thy</a></p>",
        "id": 294250366,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660910493
    },
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\nThanks, I'll import it into List as merge_eq.</p>\n<p>Tobias</p>",
        "id": 294250386,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660910501
    }
]