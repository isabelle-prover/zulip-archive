[
    {
        "content": "<p>From: Daniel Raggi &lt;<a href=\"mailto:danielraggi@gmail.com\">danielraggi@gmail.com</a>&gt;<br>\nI'm experimenting with modifying theorems via attributes.<br>\nLet's say I make a function</p>\n<p>fun my_fun ctxt thm =<br>\n  Simplifier.simplify (modify_context ctxt) thm</p>\n<p>where modify_context adds a couple of simp rules via function<br>\naddsimps. I run the function at the ML level on an example theorem and<br>\nit does what I want.</p>\n<p>Then I make a function</p>\n<p>fun my_attr ctxt = Thm.rule_attribute (K (my_fun ctxt))</p>\n<p>and set it up in Isabelle:</p>\n<p>attribute_setup my_attr = {* Scan.succeed (my_attr @{context})*} \" \"</p>\n<p>This seems to succeed, but when I run \"thm some_theorem[my_attr]\" I<br>\nget an exception from the raw simplifier with message \"rewrite_cterm:<br>\nbad background theory\". Why would this be?</p>\n<p>Thanks.<br>\nDaniel</p>",
        "id": 294291310,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660923551
    },
    {
        "content": "<p>From: Florian Haftmann &lt;<a href=\"mailto:florian.haftmann@informatik.tu-muenchen.de\">florian.haftmann@informatik.tu-muenchen.de</a>&gt;<br>\nHi Daniel,</p>\n<blockquote>\n<p>attribute_setup my_attr = {* Scan.succeed (my_attr @{context})*} \" \"</p>\n</blockquote>\n<p>@{context} injects the <em>static</em> context, i. e. the context at the<br>\nposition you are writing your declaration.  But here you need the<br>\n<em>dynamic</em> context, e.g. via something like</p>\n<blockquote>\n<p>attribute_setup my_attr = {* Scan.peek (my_attr o Context.proof_of) *}</p>\n</blockquote>\n<p>Note that static contexts are rather seldom appropriate, mostly for<br>\nexperimenting.  The system is built in a way that the appropriate<br>\ndynamic contexts is provided for nearly all crucial slots as a<br>\nfunctional argument.</p>\n<p>AFAIR the Isabelle implementation manual provided more detail (I did not<br>\ntake a look quite now).</p>\n<p>Hope this helps,<br>\n    Florian<br>\n<a href=\"/user_uploads/14278/yeid1km6Re7ZjPL603CZAhYG/signature.asc\">signature.asc</a></p>",
        "id": 294291339,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660923558
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nThis is non-canonical in various respects, and thus fails as expected.<br>\nMoreover, the terminology \"the ML level\" for Isabelle/ML and \"Isabelle\"<br>\nfor Isabelle/Isar is suspicious, and probably stems from unreliably<br>\nsources of information.</p>\n<p>Here are some general principles of survival in Isabelle tool<br>\ndevelopment:</p>\n<p>* Look around what the official reference manuals say. Usually the<br>\n   \"isar-ref\" manual has an topmost entry point for each command,<br>\n   sometimes pointing to other manuals. The \"implementation\" manual is<br>\n   particularly important to understand the underlying principles of<br>\n   Isabelle/ML. It is often considered as dry, but contains a lot of<br>\n   relevant information in relatively little space.</p>\n<p>* Look around for applications that are analogous to what you are<br>\n   trying to do, and develop a sense how close they are to a standard<br>\n   approach, and what needs to be changed for your particular<br>\n   application. Stick to the Isabelle standards you see in canonical<br>\n   sources.</p>\n<p>The \"looking around\" is particularly easy with Isabelle/jEdit that<br>\nserves as Prover IDE and IDE for Isabelle tool development at the same<br>\ntime. Just use the hover-click idiom to figure out the definitions of<br>\nwell-known attributes from Isabelle/Pure or Isabelle/HOL. Or use<br>\nhyper-search for \"attribute_setup\" in authoritative sources: it quickly<br>\nyields some abstract examples of some rule attribute and declaration<br>\nattribute in $ISABELLE_HOME/src/Doc/Isar_Ref/Spec.thy namely:</p>\n<p>attribute_setup my_rule = {*<br>\n     Attrib.thms &gt;&gt; (fn ths =&gt;<br>\n       Thm.rule_attribute<br>\n         (fn context: Context.generic =&gt; fn th: thm =&gt;<br>\n           let val th' = th OF ths<br>\n           in th' end)) *}</p>\n<p>attribute_setup my_declaration = {*<br>\n     Attrib.thms &gt;&gt; (fn ths =&gt;<br>\n       Thm.declaration_attribute<br>\n         (fn th: thm =&gt; fn context: Context.generic =&gt;<br>\n           let val context' = context<br>\n           in context' end)) *}</p>\n<p>Makarius</p>",
        "id": 294308367,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660925024
    }
]