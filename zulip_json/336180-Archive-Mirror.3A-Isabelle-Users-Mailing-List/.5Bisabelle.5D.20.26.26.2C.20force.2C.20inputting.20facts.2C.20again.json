[
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nProper Isar does not provide fine-grained goal adressing, which is <br>\nconsidered part of the tactical world.  The using/apply form is as close <br>\nto that as you can get -- in the end it is up to the individual proof <br>\nmethods to make use of the offered facts in a sensible way, i.e. a method <br>\nthat operates on a single subgoal (force, blast, fast etc) will only <br>\ninsert the facts into that goal.</p>\n<p>In the \"insert\" above I actually overlooked that the facts get inserted <br>\ninto <em>all</em> subgoals.  There is relatively recent way to limit the scope of <br>\nmethod expressions to a prefix of the given subgoals, cf. the following <br>\n(old) entry in NEWS:</p>\n<ul>\n<li>Isar: the goal restriction operator [N] (default N = 1) evaluates a<br>\nmethod expression within a sandbox consisting of the first N<br>\nsub-goals, which need to exist.  For example, ``simp_all [3]''<br>\nsimplifies the first three sub-goals, while (rule foo, simp_all)[]<br>\nsimplifies all new goals that emerge from applying rule foo to the<br>\noriginally first one.</li>\n</ul>\n<p>Of course, as the method expressions get more and more complicated the <br>\nidea of nicely structured Isar proof texts is getting more and more <br>\ndiluted.  In fact, using just a comma in 'by' method statements is already <br>\nleaving the pure world of proof texts. (This is why I would prefer the <br>\ndouble using/apply form over the composition of four methods in the <br>\ninsert/force form).</p>\n<p>Makarius</p>",
        "id": 294063722,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660824671
    },
    {
        "content": "<p>From: <a href=\"mailto:rpollack@inf.ed.ac.uk\">rpollack@inf.ed.ac.uk</a><br>\nQuoting <a href=\"mailto:rpollack@inf.ed.ac.uk\">rpollack@inf.ed.ac.uk</a>:</p>\n<p>I was happy too soon.  This proof sends both facts to \"force\" on the <br>\nsecond goal, thus is slow.  The other proof you suggested</p>\n<p>using h[where S=\"{}\"] apply force<br>\n    using h[where S =\"UNIV::state set\"] apply force<br>\n    done</p>\n<p>is fast, and does the intended search, but isn't pure Isar.  Does Isar <br>\nhave a vernacular form that sends the first fact to the first goal, and <br>\nonly the second fact to the second goal, without restating the second <br>\ngoal?</p>\n<p>Best,<br>\nRandy</p>",
        "id": 294063762,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660824689
    }
]