[
    {
        "content": "<p>From: John Munroe &lt;<a href=\"mailto:munddr@gmail.com\">munddr@gmail.com</a>&gt;<br>\nHello all,</p>\n<p>I see that the 'symmetric' option is quite commonly use -- what does<br>\nit actually do? For example, from LocaleTest.thy:</p>\n<p>lemma rcancel:<br>\n  \"y <strong> x = z </strong> x &lt;-&gt; y = z\"<br>\nproof<br>\n  assume \"y <strong> x = z </strong> x\"<br>\n  then have \"y <strong> (x </strong> inv(x)) = z <strong> (x </strong> inv(x))\"<br>\n    by (simp add: assoc [symmetric])<br>\n  then show \"y = z\" by (simp add: rone rinv)<br>\nqed simp</p>\n<p>Is it the same as the 'symmetric' that is often found in the output of<br>\nfull_prf? Are 'combination', 'reflexive', 'transitive', etc. in full<br>\nproofs rules like 'exI'? What do these do/mean?</p>\n<p>Best,<br>\nJohn</p>",
        "id": 294110796,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660836752
    },
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\n`symmetric' is an attribute that acts on thms (excuse the fact that<br>\nattributes act). It turns \"R s t\" into \"R t s\", where R is some<br>\nsymmetric predicate. It works for both \"=\", \"~=\", \"^-1\" and \"==\" and can<br>\nbe extended with other symmetric predicates.</p>\n<p>Tobias</p>\n<p>John Munroe schrieb:</p>",
        "id": 294110803,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660836754
    },
    {
        "content": "<p>From: John Munroe &lt;<a href=\"mailto:munddr@gmail.com\">munddr@gmail.com</a>&gt;<br>\nOn Tue, Jun 22, 2010 at 9:18 AM, Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt; wrote:</p>\n<blockquote>\n<p>`symmetric' is an attribute that acts on thms (excuse the fact that<br>\nattributes act). It turns \"R s t\" into \"R t s\", where R is some<br>\nsymmetric predicate. It works for both \"=\", \"~=\", \"^-1\" and \"==\" and can<br>\nbe extended with other symmetric predicates.<br>\n</p>\n</blockquote>\n<p>I see. Do you know where 'symmetric' is defined? Also, how about 'combination'?</p>\n<p>John</p>\n<blockquote>\n<p>Tobias</p>\n<p>John Munroe schrieb:</p>\n<blockquote>\n<p>Hello all,</p>\n<p>I see that the 'symmetric' option is quite commonly use -- what does<br>\nit actually do? For example, from LocaleTest.thy:</p>\n<p>lemma rcancel:<br>\n  \"y <strong> x = z </strong> x &lt;-&gt; y = z\"<br>\nproof<br>\n  assume \"y <strong> x = z </strong> x\"<br>\n  then have \"y <strong> (x </strong> inv(x)) = z <strong> (x </strong> inv(x))\"<br>\n    by (simp add: assoc [symmetric])<br>\n  then show \"y = z\" by (simp add: rone rinv)<br>\nqed simp</p>\n<p>Is it the same as the 'symmetric' that is often found in the output of<br>\nfull_prf? Are 'combination', 'reflexive', 'transitive', etc. in full<br>\nproofs rules like 'exI'? What do these do/mean?</p>\n<p>Best,<br>\nJohn<br>\n</p>\n</blockquote>\n</blockquote>",
        "id": 294110872,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660836778
    },
    {
        "content": "<p>From: Florian Haftmann &lt;<a href=\"mailto:florian.haftmann@informatik.tu-muenchen.de\">florian.haftmann@informatik.tu-muenchen.de</a>&gt;<br>\nHi John,</p>\n<blockquote>\n<p>I see. Do you know where 'symmetric' is defined? Also, how about 'combination'?</p>\n</blockquote>\n<p>just to avoid confusion: symmetric and combination as appearing in proof<br>\nterms are rules (axioms) of the logical framework;  symmetric also<br>\nappears as theorem in theory Pure:</p>\n<p>thm Pure.symmetric</p>\n<p>These rules are implemented in the inference kernel of the system and<br>\nnot defined in an Isar theory.</p>\n<p>Distinguish from these the attribute \"symmetric\", which may apply one<br>\nrule of a larger set of symmetry theorems, one of these being<br>\nPure.symmetric.</p>\n<p>Hope this helps,<br>\n    Florian<br>\n<a href=\"/user_uploads/14278/ZrrFdNCKVlZM-Pj5DjZsPr4v/signature.asc\">signature.asc</a></p>",
        "id": 294111197,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660836877
    }
]