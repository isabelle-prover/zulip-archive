[
    {
        "content": "<p>From: Hauser  Bruno &lt;<a href=\"mailto:bhauser@student.ethz.ch\">bhauser@student.ethz.ch</a>&gt;<br>\nHi</p>\n<p>I want to prove the following lemma: ((i - (1::int)) * i div 2) + i = i * (i + 1) div 2. Proving the property for naturals succeeds. I now want to proof it for positive, nonzero integers. Trying to solve the lemma (i_equation_int) automatically with sledgehammer did not succeed. So, no \"trivial\" solution seems to exist yet.</p>\n<p>lemma i_equation_int: \"[|(n - (1::nat)) * n div 2 + n =  n * (n + 1) div 2; int n = i; i &gt; 0|] ==&gt; ((i - (1::int)) * i div 2) + i = i * (i + 1) div 2\"</p>\n<p>Can someone give me a hint how to proof it by (maybe) using the facts, that i &gt; 0 and the equation holds for naturals?</p>\n<p>Is there a general way for proofing lemmas like: (i&gt;0) &amp; (int n = i) &amp; P(n) ==&gt; P(i) ?</p>\n<p>Thank you,<br>\nBruno Hauser</p>",
        "id": 294069349,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660826641
    },
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\nHere is a direct proof, without preconditions:</p>\n<p>lemma \"(i - (1::int)) * i div 2 + i = i * (i + 1) div 2\"</p>\n<p>Tactic arith cannot deal with it because it contains multiplication in <br>\nan essential way. However, if you first multiply out, then arith can <br>\nsolve it:</p>\n<p>apply(simp add: ring_simps)<br>\napply arith<br>\ndone</p>\n<p>Regards<br>\nTobias</p>\n<p>Hauser Bruno wrote:</p>",
        "id": 294069564,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660826671
    },
    {
        "content": "<p>From: Jeremy Avigad &lt;<a href=\"mailto:avigad@cmu.edu\">avigad@cmu.edu</a>&gt;<br>\nHauser Bruno wrote:</p>\n<blockquote>\n<p>Is there a general way for proofing lemmas like: (i&gt;0) &amp; (int n = i)<br>\n&amp; P(n) ==&gt; P(i) ?</p>\n</blockquote>\n<p>Dear Bruno,</p>\n<p>The answer is \"yes\" and \"no.\" There are methods for transferring results <br>\nfrom the natural numbers to the integers and vice-versa, though they are <br>\nimperfect.</p>\n<p>Suppose you have a theorem of the form \"ALL (n::nat). P n\" and you want <br>\na theorem of the form \"ALL i &gt;= (0::int). P' i\", where P' is the <br>\ntranslation of P to the integers (e.g. nat functions and relations like <br>\n+, div, &lt; are replaced by the integer versions).</p>\n<p>First, use a general rule to convert \"ALL i &gt;= (0::int). P' i\" to \"ALL <br>\nn. P' (int n).\" Then using simplification rules like</p>\n<p>int n + int m = int (n + m)<br>\n   (int n) div (int m) = int (n div m)<br>\n   int n &lt; int m = n &lt; m</p>\n<p>and magically \"ALL n. P'(int n)\" is transformed to \"ALL n. P n,\" which <br>\nis what you have already proved. Amine Chaieb once described a similar <br>\nmethod on this mailing list.</p>\n<p>(Your question involved proving, more simply, P'(int n) from P n, which <br>\nonly needs the simplification rules.)</p>\n<p>I have been revising the number theory libraries and using this method <br>\nto make sure that all basic theorems are in place for both nats and <br>\nints. If you want, I can send you a file that works in the developer <br>\nversion of Isabelle, which uses the method above to transfer results <br>\ninvolving gcd, lcm, factorial, prime, congruence, choose, and fib. But <br>\nit is still tedious. Chaieb and I have been working on better ways of <br>\nautomating the procedure, and hope to have better methods soon.</p>\n<p>Jeremy</p>",
        "id": 294069596,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660826678
    }
]