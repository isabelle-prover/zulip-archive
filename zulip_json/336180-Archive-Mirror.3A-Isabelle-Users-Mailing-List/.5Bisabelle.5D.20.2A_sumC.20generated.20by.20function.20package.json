[
    {
        "content": "<p>From: Walther Neuper &lt;<a href=\"mailto:wneuper@ist.tugraz.at\">wneuper@ist.tugraz.at</a>&gt;<br>\nFirst steps with the function package were successful.</p>\n<p>Now I don't know how to remove a proof obligation containing a function <br>\nconstant named 'function_id_sumC', where 'function_id' is the function <br>\nunder consideration:</p>\n<p>2. ?primes last_p n primesa last_pa na.<br>\n        (primes, last_p, n) = (primesa, last_pa, na) ?<br>\n        (if primes ! (length primes - 1) &lt; n<br>\n         then<br>\n             if is_prime primes (last_p + 2)<br>\n             then make_prims_sumC (primes @ [last_p + 2], last_p + 2, n)<br>\n             else make_prims_sumC (primes, last_p + 2, n) else primes) =<br>\n        (if primesa ! (length primesa - 1) &lt; na<br>\n         then<br>\n             if is_prime primesa (last_pa + 2)<br>\n             then make_prims_sumC (primesa @ [last_pa + 2], last_pa + 2, <br>\nna)<br>\n             else make_prims_sumC (primesa, last_pa + 2, na)<br>\n         else primesa)</p>\n<p>Why did the function package generate this 'function_id_sumC' ?<br>\nAnd how can I prove the proof obligation ?</p>\n<p>Thanks for your help,<br>\nWalther</p>\n<p>PS: The function definition is in the attachment.<br>\n<a href=\"/user_uploads/14278/k5L-jEtoyYca-tPLepLDI_bS/GCD_1_Make_Primes.thy\">GCD_1_Make_Primes.thy</a></p>",
        "id": 294229704,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660901825
    },
    {
        "content": "<p>From: Lars Noschinski &lt;<a href=\"mailto:noschinl@in.tum.de\">noschinl@in.tum.de</a>&gt;<br>\nThis is what you get if you unfold function_id_def which is something <br>\nyou would never do in a normal proof.</p>\n<p>Using function_id.{simps,induct,cases} should suffice.</p>\n<p>-- Lars</p>",
        "id": 294229713,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660901829
    },
    {
        "content": "<p>From: Johannes Hölzl &lt;<a href=\"mailto:hoelzl@in.tum.de\">hoelzl@in.tum.de</a>&gt;<br>\nHow does your proof look like?</p>\n<p>Do you use make_prims_def ? &lt;func&gt;_def should be only used internally,<br>\nto unfold the function you should use make_prims.simps. The ...simps<br>\nrules are the one you use in your function specification.</p>\n<ul>\n<li>Johannes</li>\n</ul>",
        "id": 294229720,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660901836
    },
    {
        "content": "<p>From: Alexander Krauss &lt;<a href=\"mailto:krauss@in.tum.de\">krauss@in.tum.de</a>&gt;<br>\nHere, unfortunately, the internal encoding shines through. In your <br>\nconcrete case, the currying was converted to tuples, in other cases, <br>\nseveral mutual recursive functions may be converted to a function on a <br>\nsum type (hence the suffix).</p>\n<p>In your concrete case, the simplifier loops because the equation for <br>\nis_prime loops in the presence of the usual splitting of ifs.<br>\nThus, \"by pat_completeness (simp del: is_prime.simps)\" does the trick here.</p>\n<p>In general, you cannot prove much about the _sumC functions. The goals <br>\nare usually provable when treating them as uninterpreted.</p>\n<p>Alex</p>",
        "id": 294229788,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660901872
    },
    {
        "content": "<p>From: Walther Neuper &lt;<a href=\"mailto:wneuper@ist.tugraz.at\">wneuper@ist.tugraz.at</a>&gt;<br>\nSorry for not coming with my problem cut down to a minimal example --- <br>\nmy problem is the mass of tracing output from the simplifier.</p>\n<p>In particular, I'd appreciate hints, how to identify the culprit from <br>\nthe output created by</p>\n<p>declare [[simp_trace_depth_limit=9]]<br>\n    declare [[simp_trace=true]]</p>\n<p>when I activate the outcommented base case in the function below and <br>\nthus make the function package loop:</p>\n<p>(* dvd for univariate polynomials *)<br>\nfunction dvd_up :: \"unipoly ? unipoly ? bool\" (infixl \"dvd'_up\" 70) where<br>\n(* FIXME this makes the function package loop ......<br>\n   \"[d] dvd_up [i] =<br>\n     (if (¦d¦ ? ¦i¦) &amp; (i mod d = 0) then True else False)\"<br>\n|*) \"d dvd_up p =<br>\n     (let<br>\n       d = drop_lc0 d;<br>\n       p = drop_lc0 p;<br>\n       d000 = (List.replicate (List.length p - List.length d) 0) @ d;<br>\n       quot = (lc p) div2 (lc d000);<br>\n       rest = drop_lc0 (p minus_up (d000 div_ups quot))<br>\n     in<br>\n       if rest = [] then True<br>\n       else<br>\n         (if quot ? 0 &amp; List.length d ? List.length rest<br>\n         then d dvd_up rest<br>\n         else False))\"<br>\nby pat_completeness auto<br>\ntermination sorry</p>\n<p>I'd appreciate help not by a solution (like the one below -- thank you, <br>\nAlex!), but by hints how to find the culprit for looping myself.</p>\n<p>Walther</p>\n<p>PS: The auxiliary functions are in the appendix. Of course, they are all <br>\nchecked, see</p>\n<p>[1]https://intra.ist.tugraz.at/hg/isa/raw-file/913483f0582b/src/Tools/isac/Knowledge/GCD_Poly_FP.thy<br>\n<a href=\"/user_uploads/14278/QNWraJ4IplpgRtBkEBE4m5Qv/GCD_Poly_Test3.thy\">GCD_Poly_Test3.thy</a></p>",
        "id": 294232859,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660903359
    }
]