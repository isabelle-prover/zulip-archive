[
    {
        "content": "<p>From: Yuting Wang &lt;<a href=\"mailto:yuting@cs.umn.edu\">yuting@cs.umn.edu</a>&gt;<br>\nAbella version 2.0.0</p>\n<p><a href=\"http://abella-prover.org\">http://abella-prover.org</a></p>\n<p>We are pleased to announce a new major release of the Abella<br>\nproof-assistant. Abella is designed to reason about computational<br>\nsystems specified relationally and using lambda-tree syntax, also<br>\nknown as higher-order abstract syntax. A distinguishing feature of<br>\nAbella is that it uses generic quantification, a counterpart to the<br>\ndevices of nominal logic, to reflect the treatment of binding in the<br>\nrepresentation of syntactic objects into the reasoning process.</p>\n<p>The key features of this release include:</p>\n<ul>\n<li>\n<p>support for higher-order specifications</p>\n</li>\n<li>\n<p>the ability to reason inductively on dynamic contexts</p>\n</li>\n</ul>\n<p>These features remove many limitations in earlier versions of Abella.</p>\n<p>Abella excels at specifying and reasoning about such systems as<br>\nprogramming languages, process calculi, proof systems, and many kinds<br>\nof lambda calculi. Abella uses Church's simple theory of types, and is<br>\nbased on the two-level logic approach that consists of:</p>\n<ul>\n<li>\n<p>a specification logic, here the logic of higher-order hereditary<br>\n Harrop formulas (HH), to encode the objects and computations, and</p>\n</li>\n<li>\n<p>a reasoning logic that has support for inductive and co-inductive<br>\n definitions, generic quantification, and the ability to prove<br>\ntheorems by induction or co-induction. This logic is used to<br>\n reason about the encoded objects and computations in terms of<br>\nthe HH proof system.</p>\n</li>\n</ul>\n<p>A number of example developments are available from the Abella<br>\nweb-site. These include:</p>\n<ul>\n<li>\n<p>Solutions to the POPLmark challenge, including a new higher-order<br>\nsolution to a variant of challenge 1a</p>\n</li>\n<li>\n<p>Proofs of strong normalization for typed lambda calculi using<br>\ndifferent methods</p>\n</li>\n<li>\n<p>Formalized meta-theory of the lambda calculus: this release<br>\nincludes a new characterization of equivalence-upto-beta in<br>\n terms of an inductive notion of \"paths\"</p>\n</li>\n<li>\n<p>Highly declarative formalization of bisimulation and its<br>\n properties in process calculi, including calculi with binding and<br>\nmobility such as the pi calculus.</p>\n</li>\n</ul>\n<p>Abella is developed as part of a transatlantic collaboration between<br>\nINRIA Saclay (in the Parsifal team) in France and the University of<br>\nMinnesota in the USA. The principal developers of Abella are Andrew<br>\nGacek (Rockwell Collins, USA), Yuting Wang (University of Minnesota),<br>\nand Kaustuv Chaudhuri (INRIA, France), with a number of other<br>\ncontributors that are listed on the main web-site.</p>\n<p>Abella is actively used in a number of research projects around the<br>\nworld related to the formalized meta-theory of deductive and<br>\ncomputational systems.</p>\n<p>Some relevant URLs:</p>\n<ul>\n<li>\n<p>The GitHub repository for Abella<br>\n<a href=\"https://github.com/abella-prover/abella\">https://github.com/abella-prover/abella</a></p>\n</li>\n<li>\n<p>The Abella discussion list<br>\n<a href=\"http://groups.google.com/group/abella-theorem-prover\">http://groups.google.com/group/abella-theorem-prover</a></p>\n</li>\n</ul>",
        "id": 294246001,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660908945
    }
]