[
    {
        "content": "<p>From: Paolo Giarrusso &lt;<a href=\"mailto:p.giarrusso@gmail.com\">p.giarrusso@gmail.com</a>&gt;<br>\nHi all, I'm a software developer and a new Isabelle user, practicing with the <br>\ntutorial. I'm using Isabelle 2007.</p>\n<p>Note these two lines in the below theory (derived from ยง 2.5.6 of the <br>\ntutorial, <br>\n<a href=\"http://www.cl.cam.ac.uk/research/hvg/Isabelle/dist/Isabelle/doc/tutorial.pdf\">http://www.cl.cam.ac.uk/research/hvg/Isabelle/dist/Isabelle/doc/tutorial.pdf</a>):</p>\n<p>normal_form \"val (Const True)\"</p>\n<p>gives: </p>\n<p>\"True\"<br>\n  :: \"bool\"</p>\n<p>While<br>\nvalue \"val (Const True)\"  (* this fails *)<br>\nfails (and there are no variables, so there's no reason for this).</p>\n<p>Here's the theory:</p>\n<p>theory ExBoolexBugReport imports Main begin<br>\ndatatype boolex = Const bool | Neg boolex | And boolex boolex</p>\n<p>consts<br>\n  \"val\" :: \"boolex \\&lt;Rightarrow&gt; bool\"<br>\nprimrec<br>\n\"val (Const b) = b\"<br>\n\"val (Neg boolex) = (\\&lt;not&gt; (val boolex))\"<br>\n\"val (And b c) = ((val b) \\&lt;and&gt; (val c))\"</p>\n<p>value \"True\"</p>\n<p>normal_form \"val (Const True)\"<br>\nvalue \"val (Const True)\" (* this fails *)<br>\nvalue \"val (Const (True::bool))\"</p>\n<p>end</p>\n<p>Here's the error I get in the <em>responses</em> Emacs buffer.</p>\n<p>*** Error: in 'ML', line 11.<br>\n*** Can't unify bool with string * Term.typ (Incompatible types) Found near<br>\n***    $( Const( \"ExBoolexBugReport.boolex.Const\", ......), term_of_bool(x1))</p>\n<hr>\n<p>*** Error: in 'ML', line 11.<br>\n*** Can't unify Term.term with EvalTerm.Generated.boolex<br>\n***    (Different type constructors) Found near<br>\n***    $( Const( \"ExBoolexBugReport.boolex.Const\", ......), term_of_bool(x1))</p>\n<hr>\n<p>*** Error: in 'ML', line 14.<br>\n*** Can't unify bool with string * Term.typ (Incompatible types) Found near<br>\n***    $( Const( \"ExBoolexBugReport.boolex.Neg\", ......), term_of_boolex(x1))</p>\n<hr>\n<p>*** Error: in 'ML', line 14.<br>\n*** Can't unify Term.term with EvalTerm.Generated.boolex<br>\n***    (Different type constructors) Found near<br>\n***    $( Const( \"ExBoolexBugReport.boolex.Neg\", ......), term_of_boolex(x1))</p>\n<hr>\n<p>*** Error: in 'ML', line 19.<br>\n*** Can't unify bool with string * Term.typ (Incompatible types) Found near<br>\n***    $( $( Const( ...), ...(...)), term_of_boolex(x2))</p>\n<hr>\n<p>*** Error: in 'ML', line 19.<br>\n*** Can't unify Term.term with EvalTerm.Generated.boolex<br>\n***    (Different type constructors) Found near<br>\n***    $( $( Const( ...), ...(...)), term_of_boolex(x2))</p>\n<hr>\n<p>*** At command \"value\".</p>\n<p>If needed: I'm using ProofGeneral-3.7pre071112 and Emacs 22.1 as provided by <br>\nUbuntu 7.04, in case it makes any difference.</p>\n<p>Thanks in advance<br>\n<a href=\"/user_uploads/14278/n-vbg-bVUVzVHHIOMqABQryr/signature.asc\">signature.asc</a></p>",
        "id": 294059511,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660823048
    },
    {
        "content": "<p>From: Amine Chaieb &lt;<a href=\"mailto:chaieb@in.tum.de\">chaieb@in.tum.de</a>&gt;<br>\nHi,</p>\n<p>The problem appears to be with the constructor \"Const\" which is the same <br>\nname as the constructor \"Const\" for internal represaentation of Lambda <br>\nterms in Isabelle.</p>\n<p>Your theory works if you change Const into Cst. Maybe the Code generator <br>\nshould rename such constants before emitting ML Code for evaluation?</p>\n<p>Hope it helps,<br>\nAmine.</p>\n<p>Paolo Giarrusso wrote:</p>",
        "id": 294059521,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660823053
    },
    {
        "content": "<p>From: Paolo Giarrusso &lt;<a href=\"mailto:p.giarrusso@gmail.com\">p.giarrusso@gmail.com</a>&gt;<br>\nOn Thu, Apr 17, 2008 at 11:22 AM, Amine Chaieb &lt;<a href=\"mailto:chaieb@in.tum.de\">chaieb@in.tum.de</a>&gt; wrote:</p>\n<blockquote>\n<p>Hi,</p>\n</blockquote>\n<blockquote>\n<p>The problem appears to be with the constructor \"Const\" which is the same<br>\nname as the constructor \"Const\" for internal represaentation of Lambda terms<br>\nin Isabelle.</p>\n</blockquote>\n<blockquote>\n<p>Your theory works if you change Const into Cst.</p>\n</blockquote>\n<p>Yes, indeed.</p>\n<blockquote>\n<p>Maybe the Code generator<br>\nshould rename such constants before emitting ML Code for evaluation?</p>\n</blockquote>\n<p>Sorry for the late answer, but I thought that having a separate<br>\nnamespace altogether for all user-defined symbols could be nicer. Or<br>\nnot?<br>\nAnyway, is anybody working on a fix for this in the code?</p>\n<blockquote>\n<p>Hope it helps,<br>\nAmine.</p>\n</blockquote>",
        "id": 294060492,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660823463
    }
]