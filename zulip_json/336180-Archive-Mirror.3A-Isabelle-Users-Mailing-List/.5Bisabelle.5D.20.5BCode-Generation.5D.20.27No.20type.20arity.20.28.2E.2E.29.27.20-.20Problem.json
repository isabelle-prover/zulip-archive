[
    {
        "content": "<p>From: Sven Schneider &lt;<a href=\"mailto:svens@cs.tu-berlin.de\">svens@cs.tu-berlin.de</a>&gt;<br>\nDear all,</p>\n<p>I am not able to create code from the theory below. Unfortunately I <br>\ncan't understand the message (see bellow) that I get. I guess it has <br>\nsomething todo with the part 1.5.3 in the manual of the codegeneration <br>\n(Concerning operational equality).</p>\n<p>All the best<br>\n    Sven</p>\n<p>*** No type arity Label :: eq,<br>\n*** for constant eval<br>\n*** in defining equations<br>\n*** \"eval (Obj ?x) º card (dom ?x)\"<br>\n*** \"eval (Var ?n) º ?n\",<br>\n*** while preprocessing equations for constant(s) eval<br>\n*** At command \"export_code\".</p>\n<p>theory Gentest imports Main begin</p>\n<p>consts max_label :: nat<br>\ntypedef Label = \"{n :: nat. n &lt;= max_label }\" by fastsimp</p>\n<p>datatype dB =<br>\n   Var \"nat\"<br>\n   | Obj \"Label \\&lt;Rightarrow&gt; dB option\"</p>\n<p>constdefs compare :: \"Label \\&lt;Rightarrow&gt; Label \\&lt;Rightarrow&gt; bool\"<br>\n   \"compare k l \\&lt;equiv&gt; (Rep_Label k = Rep_Label l)\"</p>\n<p>consts eval :: \"dB \\&lt;Rightarrow&gt; nat\"<br>\nprimrec<br>\n   \"eval (Var n) = n\"<br>\n   \"eval (Obj x) = card (dom x)\"</p>\n<p>lemma \"eval (Obj(empty(Abs_label (0::nat) \\&lt;mapsto&gt;Var 2))) = ?x\" by simp</p>\n<p>export_code \"eval\" in \"SML\" file \"gen.ML\"<br>\nexport_code \"compare\" in \"SML\" file \"gen.ML\"</p>\n<p>end</p>",
        "id": 294053198,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660820471
    },
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\nI'm not sure about the arity problem. But</p>\n<blockquote>\n<p>\"eval (Obj x) = card (dom x)\"</p>\n</blockquote>\n<p>is unlikely to be executable: dom is defined by set comprehension, which <br>\nis not executable, and the definition of card has similar problems.</p>\n<p>If you need to compute dom and card, I suspect you need to replace <br>\nfunctions by a special data structure like an association list (see <br>\nLibrary/AssocList.thy) or even search trees.</p>\n<p>Tobias</p>\n<p>Sven Schneider schrieb:</p>",
        "id": 294053233,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660820486
    },
    {
        "content": "<p>From: Amine Chaieb &lt;<a href=\"mailto:chaieb@in.tum.de\">chaieb@in.tum.de</a>&gt;<br>\nEven with Tobias's suggestion, I suspect you wouldn't get executable <br>\ncode since your labels are \"parametrized\":</p>\n<blockquote>\n<blockquote>\n<p>consts max_label :: nat<br>\ntypedef Label = \"{n :: nat. n &lt;= max_label }\" by fastsimp</p>\n</blockquote>\n</blockquote>\n<p>Here you \"declare\" max_label but not define it. It you were to program <br>\nthis by yourself in ML, you would need the value max_label either as a <br>\nconstant or as a parameter.</p>\n<p>Amine.</p>\n<p>Tobias Nipkow wrote:</p>",
        "id": 294053237,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660820489
    },
    {
        "content": "<p>From: Florian Haftmann &lt;<a href=\"mailto:florian.haftmann@informatik.tu-muenchen.de\">florian.haftmann@informatik.tu-muenchen.de</a>&gt;<br>\nThe problem indeed is rooted in this declaration:</p>\n<blockquote>\n<p>consts max_label :: nat<br>\ntypedef Label = \"{n :: nat. n &lt;= max_label }\" by fastsimp</p>\n</blockquote>\n<p>Beside the problem with the hidden dependency on an unspecified constant<br>\n\"max_label\" pointed out by Amine, for typedefs there is no canonical<br>\ncode generator setup.</p>\n<p>Florian<br>\n<a href=\"/user_uploads/14278/SIDq20iPkkTkaDU0Asyobz2B/florian.haftmann.vcf\">florian.haftmann.vcf</a><br>\n<a href=\"/user_uploads/14278/LO6QupxJGYjDA28Abh75c_Xw/signature.asc\">signature.asc</a></p>",
        "id": 294053260,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660820495
    },
    {
        "content": "<p>From: Sven Schneider &lt;<a href=\"mailto:svens@cs.tu-berlin.de\">svens@cs.tu-berlin.de</a>&gt;<br>\nHi Amine,</p>\n<p>thats a good point.<br>\nDefining the max_label is definitely necessary though it is not the source <br>\nof 'type arity' problem.</p>\n<p>Thanks!</p>",
        "id": 294053272,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660820501
    },
    {
        "content": "<p>From: Sven Schneider &lt;<a href=\"mailto:svens@cs.tu-berlin.de\">svens@cs.tu-berlin.de</a>&gt;<br>\nHello Tobias,</p>\n<p>Not being able to transform anything to code that involes sets or <br>\nfunctions seems to be a very strong restriction to me. Even though<br>\n\"card (dom x)\" is just an example and changing it to \"0\" solves the<br>\n'type arity'-Problem changing it does not solve my initial problem.</p>\n<p>Is there a list of what can/can't be executed and what will/will not be <br>\nmade executable in the near future? If it is in the manual I missed it.</p>\n<p>I guess I have to thing about changing everything to lists or similar.</p>\n<p>Thanks a lot and have a nice day!<br>\n    Sven</p>",
        "id": 294053284,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660820507
    },
    {
        "content": "<p>From: Florian Haftmann &lt;<a href=\"mailto:florian.haftmann@informatik.tu-muenchen.de\">florian.haftmann@informatik.tu-muenchen.de</a>&gt;<br>\nSven Schneider wrote:</p>\n<blockquote>\n<p>Not being able to transform anything to code that involes sets or<br>\nfunctions seems to be a very strong restriction to me.<br>\nEven though<br>\n\"card (dom x)\" is just an example and changing it to \"0\" solves the<br>\n'type arity'-Problem changing it does not solve my initial problem.</p>\n</blockquote>\n<p>Indeed, adding the following code setup,</p>\n<p>lemmas [code func del] = card_def<br>\nlemma [code func]:<br>\n  \"Collect P = project P UNIV\"<br>\n  unfolding project_def by simp</p>\n<p>both card and dom turn executable (the latter only on finite types).<br>\nThe fact that there is no trivial solution to handle entities involving<br>\n\"infinity\" (like functions and sets) at the same generality as HOL<br>\npermits is due to the very nature of code generation.</p>\n<blockquote>\n<p>Is there a list of what can/can't be executed and what will/will not be<br>\nmade executable in the near future? If it is in the manual I missed it.</p>\n</blockquote>\n<p>There is an elaborate technical report on that:<br>\n<a href=\"http://www4.in.tum.de/~haftmann/pdf/codegen_isabelle_haftmann_nipkow_16pp.pdf\">http://www4.in.tum.de/~haftmann/pdf/codegen_isabelle_haftmann_nipkow_16pp.pdf</a></p>\n<p>Pragmatically spoken, as long as you restrict to the FP fragment of HOL<br>\n(class, datatype, executable constants specified by<br>\nfunctions/definitions only involving datatype constructors or executable<br>\nconstants), code generation shall be possible.  For specifications<br>\ninvolving inherently logical constructs (set comprehension, ...), it may<br>\nbe possible to provide an executable model by means of particular code<br>\ntheorems.</p>\n<p>Florian<br>\n<a href=\"/user_uploads/14278/xRF1dg_PSUDKRWzJgVsTVgFM/florian.haftmann.vcf\">florian.haftmann.vcf</a><br>\n<a href=\"/user_uploads/14278/W_HQlAmTFCvsL-67lE-pKcMO/signature.asc\">signature.asc</a></p>",
        "id": 294053382,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660820545
    }
]