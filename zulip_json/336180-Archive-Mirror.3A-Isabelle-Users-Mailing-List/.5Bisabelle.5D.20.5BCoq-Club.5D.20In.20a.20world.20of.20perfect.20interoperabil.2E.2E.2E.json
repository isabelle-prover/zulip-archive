[
    {
        "content": "<p>From: Abhishek Anand &lt;<a href=\"mailto:abhishek.anand.iitg@gmail.com\">abhishek.anand.iitg@gmail.com</a>&gt;<br>\nI'd like to understand why such a tool/setup doesn't exist.<br>\nBecause of technical difficulties?<br>\nBecause such projects won't be cool enough to publish in \"top conferences\"<br>\nand please the career gods?<br>\nI very vaguely remember hearing about attempts to make such tools, about<br>\n3-5 years ago. I'd love to hear their experience.</p>\n<p>Thanks,<br>\n-- Abhishek<br>\n<a href=\"http://www.cs.cornell.edu/~aa755/\">http://www.cs.cornell.edu/~aa755/</a></p>",
        "id": 294828133,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661245381
    },
    {
        "content": "<p>From: \"Klein, Gerwin (Data61, Kensington NSW)\" &lt;<a href=\"mailto:Gerwin.Klein@data61.csiro.au\">Gerwin.Klein@data61.csiro.au</a>&gt;<br>\nCompCert and seL4 would certainly be an attractive combination, because translation validation as we do now in seL4 is a proof every time, whereas CompCert has a once-and-for-all theorem (or at least once that is usable as such).</p>\n<p>Assuming HOL4 is also in the mix, which at least for Isabelle it is getting closer and closer to, running CakeML programs on top of that combination would get us a lot closer to end-to-end verified systems. Interoperability with the Verified Software Tool Chain on top of ComCert programs even more.</p>\n<p>One is allowed to dream, right? ;-)</p>\n<p>Cheers,<br>\nGerwin</p>",
        "id": 294829218,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661245816
    },
    {
        "content": "<p>From: Talia Ringer &lt;<a href=\"mailto:tringer@cs.washington.edu\">tringer@cs.washington.edu</a>&gt;<br>\nJust for clarity, I said \"tools\" which was a bit ambiguous, but I meant<br>\nmore along the lines of what Gerwin wrote. Appreciate the useful thoughts<br>\nfrom all regardless :)</p>",
        "id": 294829235,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661245822
    },
    {
        "content": "<p>From: roux cody &lt;<a href=\"mailto:cody.roux@gmail.com\">cody.roux@gmail.com</a>&gt;<br>\nIsabelle seems to really shine in proof automation, but obviously it<br>\ndoesn't hold much of a candle to automated theorem provers like Vampire,<br>\nZ3, Minisat, ACL2 (to a certain extent) etc.</p>\n<p>Coq has the remarkable advantage that a lot of it's extra structure, type<br>\nclasses, proof witnesses, computational reflection, come for free within<br>\nthe kernel (with the notable exception of modules). Of course this kernel<br>\nis quite complex, almost the opposite of HOL-light's, which is remarkably<br>\ntrustworthy.</p>\n<p>Almost every widely used tool has unique libraries and tactics which are<br>\nfound in no others, of course.</p>\n<p>It's hard to tell which of these differences are intrinsic tensions of the<br>\ntool designs and which are incidental. Contrary to similar debates about<br>\nprograming languages, however, it seems that every one of these can be<br>\nembedded in some, reasonably trustworthy, super-logic, roughly on par of<br>\nZFC + largish cardinal axiom. At the cost of some severe foundational<br>\ndebates though, I guess.</p>\n<p>Logics which are really useful and popular right now are linear, modal and<br>\nseperation logics, which have to be embedded into such a system along with<br>\na proof of soundness if you want the same level of trust. This is usually<br>\nextremely tedious, at least given my limited experience, both WRT notations<br>\nand proof conveniences. I've seen several examples of systems originally<br>\ndesigned as a deep embedding which were then turned into standalone tools<br>\nbecause of this tension (CertiCrypt springs to mind).</p>\n<p>I'm not sure this tension can be resolved, since there is no common ground<br>\nin this case (to my knowledge). Twelf might make such a claim as a unifier,<br>\nbut it is a very thin veneer over the astronomical amount of work required<br>\nto make the logic even remotely usable. There's a reason why in 99% of<br>\ncases the word \"Isabelle\" is followed by \"/HOL\". Logical frameworks have so<br>\nfar not lived up to their promise.</p>\n<p>As is usually the case in the PL world, usable languages are often usable<br>\nbecause of the quality of the libraries, and their ease of installation.<br>\nThis is largely a language specific effort, unfortunately. This makes me<br>\nsomething of a pessimist, as in most domains, but I guess someone's got to<br>\noccupy that quadrant.</p>\n<p>Thanks for the opportunity to rant,</p>\n<p>Cody</p>",
        "id": 294829276,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661245847
    },
    {
        "content": "<p>From: Mark Wassell &lt;<a href=\"mailto:mpwassell@gmail.com\">mpwassell@gmail.com</a>&gt;</p>\n<blockquote>\n<p>Most notably on the existing work that can span proof assistants, I<br>\nthink of the SAIL project for hardware architectures which has an Isabelle<br>\n(or HOL?) backend and a Coq backend (though it is a bit behind the other<br>\none).</p>\n</blockquote>\n<p>As an aside: From the same stable as Sail there is also Lem (<br>\n<a href=\"https://github.com/rems-project/lem\">https://github.com/rems-project/lem</a>) which follows the same idea of<br>\nexporting to multiple backends including multiple theorem provers<br>\n(Isabelle/HOL, HOL4 and Coq). Whilst targeted at \"lightweight executable<br>\nmathematics, for writing, managing, and publishing large-scale portable<br>\nsemantic\" this is after all what a lot of us use theorem provers for.</p>\n<p>Cheers</p>\n<p>Mark</p>",
        "id": 294829362,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661245896
    }
]