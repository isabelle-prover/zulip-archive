[
    {
        "content": "<p>From: Andrei Popescu &lt;<a href=\"mailto:A.Popescu@mdx.ac.uk\">A.Popescu@mdx.ac.uk</a>&gt;<br>\nHi Ramana,</p>\n<p>Thanks for the confirmation (and for the pointer). Yes, the base theories in your formalized  result do qualify as arbitrary in my terminology. :-) I assume \"arbitrary theories\" include the usual signature and axioms of polymorphic classical higher order logic with equality, Infinity and Choice. Your result is more general.</p>\n<p>Andrei</p>\n<hr>\n<p>From: Ramana Kumar &lt;<a href=\"mailto:Ramana.Kumar@cl.cam.ac.uk\">Ramana.Kumar@cl.cam.ac.uk</a>&gt;<br>\nSent: 25 October 2016 08:24<br>\nTo: Andrei Popescu<br>\nCc: Rob Arthan; Ondřej Kunčar; Prof. Andrew M. Pitts; Prof. Thomas F. Melham; <a href=\"mailto:cl-isabelle-users@lists.cam.ac.uk\">cl-isabelle-users@lists.cam.ac.uk</a>; Roger Bishop Jones; Prof. Peter B. Andrews; HOL-info list<br>\nSubject: [SPAM: 10.600] Re: [Hol-info] conservativity of HOL constant and type definitions</p>\n<p>Just to answer the question-mark in (2.1), I mechanised a proof that new_type_definition is model-theoretically conservative for standard models and arbitrary base theories. To be clear, the proof assumes the base theory contains \"fun\", \"bool\", and \"=\", and that it has a model that interprets these types/constants in the standard way. I presume this counts as \"arbitrary\", but maybe it doesn't :) (The proof is at <a href=\"https://github.com/CakeML/cakeml/blob/master/candle/standard/semantics/holExtensionScript.sml#L366\">https://github.com/CakeML/cakeml/blob/master/candle/standard/semantics/holExtensionScript.sml#L366</a>.)</p>\n<p>On 25 October 2016 at 09:06, Andrei Popescu &lt;A.Popescu@mdx.ac.uk&lt;mailto:<a href=\"mailto:A.Popescu@mdx.ac.uk\">A.Popescu@mdx.ac.uk</a>&gt;&gt; wrote:</p>\n<p>The counterexample I had in mind is due to Makarius Wenzel (<a href=\"https://www4.in.tum.de/~wenzelm/papers/axclass-TPHOLs97.pdf\">https://www4.in.tum.de/~wenzelm/papers/axclass-TPHOLs97.pdf</a>, page 8): The theory T containing the single HOL formula \"no type has cardinal 3\" has a Henkin model M; yet, M has no expansion to the theory T extended with the definition of the type {1,2,3}. But actually this extension is not proof-theoretically conservative either (as it even breaks consistency) ...</p>\n<p>In fact, now I see that I have not clearly spelled out all the assumptions of the statements in my summary. So let me try again, also factoring in the base (i.e., to-be-extended)  theory:</p>\n<p>(1) The constant definition mechanisms (including the more general ones) are known to be:<br>\n(1.1) model-theoretic conservative w.r.t. standard (Pitts) models and arbitrary base theories<br>\n(1.2) model-theoretic conservative w.r.t. Henkin models and arbitrary base theories<br>\n(1.3) proof-theoretic conservative and arbitrary base theories</p>\n<p>(2) The type definition mechanism is known to be:<br>\n(2.1) model-theoretic conservative w.r.t. standard models and arbitrary(?) base theories</p>\n<p>and known <em>not</em> to be:<br>\n(2.2) model-theoretic conservative w.r.t. Henkin models and arbitrary base theories<br>\n(2.3) proof-theoretic conservative w.r.t. Henkin models and arbitrary base theories</p>\n<p>On the other hand, it is of course legitimate to lower the expectation for typedefs, so we could ask what happens with (2.2) and (2.3) if we restrict to base theories that are themselves definitional. Here, the above counterexample does not work. And yes, Rob, without being able to follow your Heyting arithmetic analogy, I do see the similarity between a possible semantic proof of definitional-base-(2.2) and a possible syntactic proof of definitional-base-(2.3) (both revolving around the notion of relativization to sets).</p>\n<p>But I am surprised that a lot of attention has been given to the conservativity of constant definitions/specifications, but not to that of the old and venerable typedef.</p>\n<p>Best,<br>\n Andrei</p>\n<hr>\n<p>From: Rob Arthan &lt;rda@lemma-one.com&lt;mailto:<a href=\"mailto:rda@lemma-one.com\">rda@lemma-one.com</a>&gt;&gt;<br>\nSent: 24 October 2016 21:37<br>\nTo: Ondřej Kunčar<br>\nCc: Andrei Popescu; Prof. Andrew M. Pitts; Prof. Thomas F. Melham; cl-isabelle-users@lists.cam.ac.uk&lt;mailto:<a href=\"mailto:cl-isabelle-users@lists.cam.ac.uk\">cl-isabelle-users@lists.cam.ac.uk</a>&gt;; Roger Bishop Jones; Prof. Peter B. Andrews; HOL-info list<br>\nSubject: Re: conservativity of HOL constant and type definitions</p>\n<p>Ondrej,</p>\n<blockquote>\n<p>On 24 Oct 2016, at 20:32, Ondřej Kunčar &lt;kuncar@in.tum.de&lt;mailto:<a href=\"mailto:kuncar@in.tum.de\">kuncar@in.tum.de</a>&gt;&gt; wrote:</p>\n<p>On 10/24/2016 09:16 PM, Rob Arthan wrote:</p>\n<blockquote>\n<p>I am pretty sure nothing has been published and, if you are right about (2.2),<br>\nthen I don't think type definitions can be proof-theoretically conservative.<br>\nI made that sound too strong: I was just making a conjecture: for \"think\" read \"feel\".</p>\n</blockquote>\n</blockquote>\n<blockquote>\n<p>They could. You can try to argue by \"unfolding\" the type definitions.</p>\n</blockquote>\n<p>\"Unfolding\" of types is exactly what I had in mind when I mentioned<br>\nthe methods used in connect with Heyting arithmetic.</p>\n<blockquote>\n<p>Again, the model-theoretic conservativity is stronger than the proof-theoretic in general. And here you don't have an existential quantifier for type constructors so you [can't] use the approach as you did for constants.</p>\n</blockquote>\n<p>Yes, but if the unfolding approach works, you would have reduced the<br>\nessential properties of the type definition to a statement about the existence<br>\nof a certain subset of the representation type bearing a relationship with some<br>\nsiubsets of the parameter types and you would then be able to deduce<br>\nmodel-theoretic conservativeness. That's why I felt, that if Andrei is right that<br>\nthe type definition principle is not model-theoretically conservative w.r.t.<br>\nHenkin models (his point (2.2)), then it won't be proof-theoretically conservative<br>\neither, because the unfolding argument must break down somewhere.<br>\nIt would be very useful to see an example of a type definition that is not<br>\nconservative w.r.t. Henkin models.</p>\n<p>Regards,</p>\n<p>Rob.</p>\n<hr>\n<p>The Command Line: Reinvented for Modern Developers<br>\nDid the resurgence of CLI tooling catch you by surprise?<br>\nReconnect with the command line and become more productive.<br>\nLearn the new .NET and ASP.NET&lt;<a href=\"http://ASP.NET\">http://ASP.NET</a>&gt; CLI. Get your free copy!<br>\n<a href=\"http://sdm.link/telerik\">http://sdm.link/telerik</a></p>\n<hr>\n<p>hol-info mailing list<br>\nhol-info@lists.sourceforge.net&lt;mailto:<a href=\"mailto:hol-info@lists.sourceforge.net\">hol-info@lists.sourceforge.net</a>&gt;<br>\n<a href=\"https://lists.sourceforge.net/lists/listinfo/hol-info\">https://lists.sourceforge.net/lists/listinfo/hol-info</a></p>",
        "id": 294696203,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661178162
    }
]