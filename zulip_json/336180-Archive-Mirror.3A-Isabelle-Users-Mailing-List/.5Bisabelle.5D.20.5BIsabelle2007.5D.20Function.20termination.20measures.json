[
    {
        "content": "<p>From: George Karabotsos &lt;<a href=\"mailto:g_karab@cs.concordia.ca\">g_karab@cs.concordia.ca</a>&gt;<br>\nHello all,</p>\n<p>I am a bit confused with function termination.  In particular on the <br>\nmanner the sum of types for mutually recursive functions are defined.</p>\n<p>For example consider the attached toy theory (although none of them is <br>\nmutually recursive I believe they illustrate my confusion).  Can someone <br>\nshow me how I can prove termination for the quartet t1,t2,t3,and t4 <br>\nfunctions?  I know it can be proven using lexicographic_order.  However, <br>\nI am more interested in proving termination via a measure function in <br>\norder to additionally understand how the summation of the types is <br>\npackaged together.</p>\n<p>TIA,</p>\n<p>George<br>\n<a href=\"/user_uploads/14278/rH4V22O6ekEZrFuzmlcJbfn0/FunTerm.thy\">FunTerm.thy</a></p>",
        "id": 294057853,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660822353
    },
    {
        "content": "<p>From: Alexander Krauss &lt;<a href=\"mailto:krauss@in.tum.de\">krauss@in.tum.de</a>&gt;<br>\nGeorge Karabotsos wrote:<br>\nThe function package builds a balanced tree for the sum types: If you <br>\nhave four functions with argument types T1,... T4, then you have to <br>\nprovide a relation over the nested sum type</p>\n<p>(T1 + T2) + (T3 + T4)</p>\n<p>but your relation is on</p>\n<p>T1 + T2 + T3 + T4</p>\n<p>which is synonymous for</p>\n<p>T1 + (T2 + (T3 + T4))  .</p>\n<p>You can check what kind of relation you have to give by writing</p>\n<p>termination<br>\nproof</p>\n<p>Then the \"proof\" command applies the rule which is also applied by the <br>\n\"relation\" method, but without instantiating the relation. You can then, <br>\nsay, enable \"show types\"...</p>\n<p>Hope this helps,<br>\nAlex</p>",
        "id": 294057864,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660822359
    }
]