[
    {
        "content": "<p>From: Florian Haftmann &lt;<a href=\"mailto:florian.haftmann@informatik.tu-muenchen.de\">florian.haftmann@informatik.tu-muenchen.de</a>&gt;<br>\nThis refers to fa80d47c6857.</p>\n<p>When building the whole distribution once and then once again (build<br>\n-a), the build process blows up after excessive machine resource<br>\nconsumption (something like java.lang.OutOfMemoryError: Java heap<br>\nspace). I did not try to diagnose it by putting hands on the code but I<br>\nam quite sure that this happens due to the log file analysis in<br>\nPure/Tools/build.scala Build/build_results/load_timings.</p>\n<p>Maybe the mechanism itself is just not suitable to scale to the overall<br>\namount of tons of log files. Is there any option to skip the log parsing?</p>\n<p>My build runs take place on lxbroy10.</p>\n<p>Relevant settings might include:<br>\nISABELLE_POLYML=true<br>\nML_IDENTIFIER=polyml-5.5.1_x86-linux<br>\nML_OPTIONS=--heap 500<br>\nISABELLE_SCALA_BUILD_OPTIONS=-nowarn -target:jvm-1.5<br>\n-Xmax-classfile-name 130<br>\nISABELLE_BUILD_JAVA_OPTIONS=-Xmx1024m -Xss1m<br>\nISABELLE_JAVA_EXT=/home/haftmann/.isabelle/contrib/jdk-7u40/x86_64-linux/jre/lib/ext<br>\nISABELLE_JAVA_SYSTEM_OPTIONS=-Dfile.encoding=UTF-8 -server</p>\n<p>Florian</p>",
        "id": 294252307,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660911226
    },
    {
        "content": "<p>From: Florian Haftmann &lt;<a href=\"mailto:florian.haftmann@informatik.tu-muenchen.de\">florian.haftmann@informatik.tu-muenchen.de</a>&gt;</p>\n<blockquote>\n<p>When building the whole distribution once and then once again (build<br>\n-a)</p>\n</blockquote>\n<p>»whole distribution« is misleading.  It is the whole distribution plus<br>\nthe AFP.</p>\n<p>Florian</p>",
        "id": 294252317,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660911232
    },
    {
        "content": "<p>From: Stefan Berghofer &lt;<a href=\"mailto:berghofe@in.tum.de\">berghofe@in.tum.de</a>&gt;<br>\nFlorian Haftmann wrote:<br>\nHi Florian,</p>\n<p>I can confirm this problem. I just tried to rebuild the AFP, and admin/testall<br>\ncrashed after issuing several error messages like</p>\n<p>### Ignoring bad log file: \"$ISABELLE_OUTPUT/log/Ramsey-Infinite.gz\"<br>\n  java.lang.OutOfMemoryError: GC overhead limit exceeded</p>\n<p>Manually deleting the old AFP log files solved the problem.</p>\n<p>Greetings,<br>\nStefan</p>",
        "id": 294252413,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660911256
    },
    {
        "content": "<p>From: Gerwin Klein &lt;<a href=\"mailto:Gerwin.Klein@nicta.com.au\">Gerwin.Klein@nicta.com.au</a>&gt;<br>\nI've just observed this effect below on the old Isabelle2013 on MacOS (Mavericks).</p>\n<p>I even nondeterministically got \"out of heap memory\" and \"too small initial heap size\" while fiddling with the settings. The machine has 32G memory, and there were on the order of 10 log files only, so there's no way it actually ran out of memory parsing them.</p>\n<p>Long story short: I still have no idea what got java so upset, but after a plain reboot everything worked just fine as usual with the default values.</p>\n<p>Cheers,<br>\nGerwin</p>\n<hr>\n<p>The information in this e-mail may be confidential and subject to legal professional privilege and/or copyright. National ICT Australia Limited accepts no liability for any damage caused by this email or its attachments.</p>",
        "id": 294254658,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660912133
    },
    {
        "content": "<p>From: David Greenaway &lt;<a href=\"mailto:david.greenaway@nicta.com.au\">david.greenaway@nicta.com.au</a>&gt;<br>\nI have had to manually increase the Java heap size for jEdit for larger<br>\nproofs. One the commented out examples in \"src/Tools/jEdit/etc/settings\"<br>\nis:</p>\n<p>JEDIT_JAVA_OPTIONS=\"-Xms512m -Xmx4096m -Xss8m -Dactors.corePoolSize=4 -Dactors.enableForkJoin=false\"</p>\n<p>which adding to my \"~/.isabelle/etc/settings\" helps me to avoid the \"out<br>\nof heap memory\" errors.</p>\n<p>Cheers,<br>\nDavid</p>\n<hr>\n<p>The information in this e-mail may be confidential and subject to legal professional privilege and/or copyright. National ICT Australia Limited accepts no liability for any damage caused by this email or its attachments.</p>",
        "id": 294254667,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660912139
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nLast year or so some people running really big JVM jobs on x86_64 had <br>\nproblems that were not there on x86.  That was Linux and the solution was <br>\ndo install 32bit libraries and use the x86 version of the JVM, but this <br>\ndoes not work on Mac OS X since JDK is x86_64 only.</p>\n<p>Another possibility is to use the more recent jdk-7u40 from Isabelle2013-1 <br>\nfor Isabelle2013, which still has jdk-7u13.  Oracle actually did some <br>\nsignificant work in the meantime, so the situation might be generally <br>\nbetter.  (Some people have already noticed that the current jdk-7u40 no <br>\nlonger works with Snow Leopard.)</p>\n<p>Makarius</p>",
        "id": 294254706,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660912158
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nOn Fri, 25 Oct 2013, Florian Haftmann wrote:</p>\n<blockquote>\n<p>When building the whole distribution once and then once again (build<br>\n-a), the build process blows up after excessive machine resource<br>\nconsumption (something like java.lang.OutOfMemoryError: Java heap<br>\nspace). I did not try to diagnose it by putting hands on the code but I<br>\nam quite sure that this happens due to the log file analysis in<br>\nPure/Tools/build.scala Build/build_results/load_timings.</p>\n<p>My build runs take place on lxbroy10.</p>\n<p>Relevant settings might include:<br>\nISABELLE_POLYML=true<br>\nML_IDENTIFIER=polyml-5.5.1_x86-linux<br>\nML_OPTIONS=--heap 500<br>\nISABELLE_SCALA_BUILD_OPTIONS=-nowarn -target:jvm-1.5<br>\n-Xmax-classfile-name 130<br>\nISABELLE_BUILD_JAVA_OPTIONS=-Xmx1024m -Xss1m<br>\nISABELLE_JAVA_EXT=/home/haftmann/.isabelle/contrib/jdk-7u40/x86_64-linux/jre/lib/ext<br>\nISABELLE_JAVA_SYSTEM_OPTIONS=-Dfile.encoding=UTF-8 -server</p>\n</blockquote>\n<p>That is a huge 64-bit machine with 128 GB RAM, but the above are mostly <br>\ndefaults to have the system run almost everywhere.  Something like <br>\nISABELLE_BUILD_JAVA_OPTIONS=\"-Xmx4096m -Xss2m\" should make the JVM more <br>\ncomfortable.</p>\n<p>I don't know any better ways to configure JVM resources.  Maybe one needs <br>\nto pay Oracle for that.  It is a bit like Mac OS in the 1980/1990-ies: <br>\nbefore starting the program you need to give a limit for its resource <br>\nrequirements, but guessing wrong causes severe problems.</p>\n<blockquote>\n<p>Maybe the mechanism itself is just not suitable to scale to the overall<br>\namount of tons of log files. Is there any option to skip the log parsing?</p>\n</blockquote>\n<p>Just delete the log files manually, as Stefan did.</p>\n<p>Makarius</p>",
        "id": 294255314,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660912366
    }
]