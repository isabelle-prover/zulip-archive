[
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nThis looks strange, but it might be just the mailer messing up the<br>\nindentation. I am including my own experiment in Scratch.thy, which<br>\nlooks fine to me.</p>\n<p>(This is Isabelle2016-1-RC2 with clean defaults.)</p>\n<p>Makarius<br>\n<a href=\"/user_uploads/14278/-btgpkHE1NmmBUfc2WmxiQAI/Scratch.thy\">Scratch.thy</a></p>",
        "id": 294696750,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661178290
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nThere are actually two different effects seen in both 2. and 3.:</p>\n<p>(a) inner syntax vs. outer syntax<br>\n  (b) indendation of 'where'</p>\n<p>Inner syntax is not taken into account in indentation right now: it is<br>\nfar to complex and PIDE markup for its structure is mostly missing. To<br>\nclarify the non-observance of inner syntax further, I have made two<br>\nsmall changes in<br>\n<a href=\"https://bitbucket.org/isabelle_project/isabelle-release/commits/b87697eec2acb383b204d4874c9d8f9c25823fc1?w=1#chg-src/Tools/jEdit/src/text_structure.scala\">https://bitbucket.org/isabelle_project/isabelle-release/commits/b87697eec2acb383b204d4874c9d8f9c25823fc1?w=1#chg-src/Tools/jEdit/src/text_structure.scala</a></p>\n<p>The 'where' keyword is different. It belongs to a new category of \"quasi<br>\ncommands\"; other examples are 'imports', 'fixes', 'assumes', 'shows',<br>\n'obtains'. These keywords are indented like a secondary command that is<br>\nnested inside the main command. This explains the 4 instead of 2 spaces<br>\nhere:</p>\n<p>definition foo<br>\n  where<br>\n    \"foo x = x\"</p>\n<p>Here is definition with more clauses. It shows how everything fits<br>\nnicely together:</p>\n<p>fun bar :: \"nat ⇒ nat\"<br>\n  where<br>\n    \"bar 0 = 0\"<br>\n  | \"bar (Suc n) = n\"</p>\n<p>This indentation of 'imports', 'where', '|' is a change of what I have<br>\nconsidered canonical indentation over many years. But there was no<br>\nparticular reason for the former format. The reason for the new one is<br>\nmore uniformity: fewer rules and special cases are required to specify<br>\nhow indentation works.</p>\n<p>Makarius</p>",
        "id": 294696788,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661178303
    },
    {
        "content": "<p>From: Andreas Lochbihler &lt;<a href=\"mailto:andreas.lochbihler@inf.ethz.ch\">andreas.lochbihler@inf.ethz.ch</a>&gt;<br>\nHi Makarius,</p>\n<p>When I wrote my e-mail 1.5 weeks ago, I really got the indentation as shown in the quote <br>\nabove (with show starting in the first column). When I tried today again, I was not able <br>\nto reproduce this behaviour. I get the same indentation as you got. Strange.</p>\n<p>Andreas</p>",
        "id": 294696795,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661178309
    },
    {
        "content": "<p>From: Andreas Lochbihler &lt;<a href=\"mailto:andreas.lochbihler@inf.ethz.ch\">andreas.lochbihler@inf.ethz.ch</a>&gt;<br>\nHi Makarius,</p>\n<blockquote>\n<blockquote>\n<ol start=\"2\">\n<li>The keyword \"where\" in definitions is indented according to the<br>\nindentation of the type when the type spans several lines. For example,</li>\n</ol>\n<p>definition foo :: \"this_is_a_very ⇒<br>\n  (long_type,<br>\n   where_it_makes_sense_to_use ⇒ several_lines) type_constructor\"<br>\n   where<br>\n  \"foo = undefined\"</p>\n<p>Here, \"where\" is indented on space too far (three instead of two),<br>\nbecause the last line of the type is indented by one (which I find<br>\ndesireable, because it emphasizes that the return type of the function<br>\ngoes on).</p>\n<p>What is the point of aligning minor keywords like \"where\" with the<br>\nprevious line of inner syntax? IMO \"where\" belongs to the outer syntax<br>\nof \"definition\" and should therefore ignore any alignment of inner syntax.</p>\n<p>Of course, I can manually delete the space before \"where\", but whenever<br>\nI hit &lt;RET&gt; again on that line, it will insert it again. :-(</p>\n<ol start=\"3\">\n<li>Reformatting destroys all semantic indentation of inner syntax. For<br>\nexample, in the example of 2., when I mark the whole definition and<br>\npress C-C C-i, I get</li>\n</ol>\n<p>definition foo :: \"this_is_a_very ⇒<br>\n  (long_type,<br>\n  where_it_makes_sense_to_use ⇒ several_lines) type_constructor,\"<br>\n  where<br>\n    \"foo = undefined\"</p>\n<p>This seems wrong for two reasons: First, it has destroyed the formatting<br>\nof the type. Second, the specification equation is now indented by 4<br>\nspaces. Why should we indent specifications by 4 spaces? The position of<br>\nthe \"where\" (on the line of the type vs. on a new line) should not<br>\naffect the indentation, but apparently it does. Is there a good reason<br>\nfor this?</p>\n</blockquote>\n<p>There are actually two different effects seen in both 2. and 3.:</p>\n<p>(a) inner syntax vs. outer syntax<br>\n  (b) indendation of 'where'</p>\n<p>Inner syntax is not taken into account in indentation right now: it is<br>\nfar to complex and PIDE markup for its structure is mostly missing. To<br>\nclarify the non-observance of inner syntax further, I have made two<br>\nsmall changes in<br>\n<a href=\"https://bitbucket.org/isabelle_project/isabelle-release/commits/b87697eec2acb383b204d4874c9d8f9c25823fc1?w=1#chg-src/Tools/jEdit/src/text_structure.scala\">https://bitbucket.org/isabelle_project/isabelle-release/commits/b87697eec2acb383b204d4874c9d8f9c25823fc1?w=1#chg-src/Tools/jEdit/src/text_structure.scala</a></p>\n<p>I haven't tried this changes yet and I cannot tell from a quick look at the sources what <br>\nthey do. I hope that outer syntax now ignores the indentation of inner syntax (which was <br>\nnot the case in Isabelle2016-1-RC2).</p>\n</blockquote>\n<blockquote>\n<p>The 'where' keyword is different. It belongs to a new category of \"quasi<br>\ncommands\"; other examples are 'imports', 'fixes', 'assumes', 'shows',<br>\n'obtains'. These keywords are indented like a secondary command that is<br>\nnested inside the main command. This explains the 4 instead of 2 spaces<br>\nhere:</p>\n<p>definition foo<br>\n  where<br>\n    \"foo x = x\"</p>\n<p>Here is definition with more clauses. It shows how everything fits<br>\nnicely together:</p>\n<p>fun bar :: \"nat ⇒ nat\"<br>\n  where<br>\n    \"bar 0 = 0\"<br>\n  | \"bar (Suc n) = n\"</p>\n<p>This indentation of 'imports', 'where', '|' is a change of what I have<br>\nconsidered canonical indentation over many years. But there was no<br>\nparticular reason for the former format. The reason for the new one is<br>\nmore uniformity: fewer rules and special cases are required to specify<br>\nhow indentation works.<br>\nIndeed, one could argue forever whether</p>\n</blockquote>\n<p>fun bar :: \"nat =&gt; nat\" where<br>\n   \"bar 0 = 0\"<br>\n| \"bar (Suc n) = n\"</p>\n<p>or</p>\n<p>fun bar :: \"nat =&gt; nat\" where<br>\n     \"bar 0 = 0\"<br>\n   | \"bar (Suc n) = n\"</p>\n<p>is better. I prefer the former because it saves to spaces of indentation, so I can stick <br>\ntwo more characters onto a line. But that's not a strong argument.</p>\n<p>What I found confusing was that the level of indentation depends on whether \"where\" is on <br>\na line of its own or not. In Isabelle2016-1-RC2, I get the following indentation behaviour:</p>\n<p>definition bar :: \"nat ⇒ nat\" where<br>\n   \"bar = id\"</p>\n<p>definition bar :: \"nat ⇒ nat\"<br>\n   where<br>\n     \"bar = id\"</p>\n<p>This does <em>not</em> make sense to me and I find it quite annoying. Especially if the right <br>\nhand side spans several lines. Then, when I change the type, say because I have to add <br>\nanother parameter, and put the \"where\" quasi-command on a new line, I have to adjust the <br>\nindentation of the whole right hand side. For me, it's OK if we indent definitions by 4 <br>\nspaces, but it's not OK if the indentation depends on whether the \"where\" is on the same <br>\nline or not.</p>\n<p>By the way, the same applies to \"obtain\" inside Isar proofs. Here's such a silly example <br>\nof an indentation produced by C-c C-i:</p>\n<p>notepad begin<br>\n   obtain n :: nat where \"n = n\"<br>\n     and \"n = n\" sorry</p>\n<p>obtain n :: nat<br>\n     where \"n = n\"<br>\n       and \"n = n\" sorry</p>\n<p>I hope that your changeset above addresses these inconsistencies.</p>\n<p>Best,<br>\nAndreas</p>",
        "id": 294696811,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661178315
    },
    {
        "content": "<p>From: Andreas Lochbihler &lt;<a href=\"mailto:andreas.lochbihler@inf.ethz.ch\">andreas.lochbihler@inf.ethz.ch</a>&gt;<br>\nHi Makarius,</p>\n<p>A follow-up on this issue. I've now observed a similarly wrong indentation with context <br>\nblocks:</p>\n<p>context&lt;RET&gt;assumes \"True\"&lt;RET&gt;and \"True\"&lt;RET&gt;begin</p>\n<p>yields</p>\n<p>context<br>\n   assumes \"True\"<br>\n   and \"True\"<br>\nbegin</p>\n<p>rather than</p>\n<p>context<br>\n   assumes \"True\"<br>\n     and \"True\"<br>\nbegin</p>\n<p>This is on a freshly installed Isabelle2016-1-RC2 in an empty theory. If necessary, I can <br>\nalso try to shoot a short video of my screen.</p>\n<p>Andreas</p>",
        "id": 294696838,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661178327
    },
    {
        "content": "<p>From: Andreas Lochbihler &lt;<a href=\"mailto:andreas.lochbihler@inf.ethz.ch\">andreas.lochbihler@inf.ethz.ch</a>&gt;<br>\nDear Makarius,</p>\n<p>While testing (and working with) Isabelle2016-1-RC2, I've used the new automatic <br>\nindentation a lot (I have enabled the options \"Indent Newline\" and \"Indent Script\"). <br>\nOverall, my feeling is that at the moment I have to do about as much manual editing of the <br>\nindentation as before. Therefore. I'd like to share the issues I ran into. Apologies in <br>\nadvance for this lengthy post. I hope that it stirs some discussion about what is good <br>\nindentation and helps to improve the auto-indentation (ideally before the next release).</p>\n<ol>\n<li>Indentation does not work properly if I write a lemma statement from top to bottom.<br>\nFor example, put the curser at the beginning of a line in a theory and type the following <br>\n(&lt;RET&gt; denotes the return key which is bound to \"Newline with indentation of Isabelle <br>\nkeywords\"):</li>\n</ol>\n<p>lemma&lt;RET&gt;assumes \"True\"&lt;RET&gt;and \"True\"&lt;RET&gt;shows \"True\"&lt;RET&gt;</p>\n<p>Here is what the automatic indentation produces in the editor, which is clearly not what I <br>\nwant and would have expected. So I have to go over it again and adjust the indentation. <br>\nThis requires more typing than without automatic indentation.</p>\n<p>lemma<br>\n   assumes \"True\"<br>\n   and \"True\"<br>\nshows \"True\"</p>\n<ol start=\"2\">\n<li>The keyword \"where\" in definitions is indented according to the indentation of the type <br>\nwhen the type spans several lines. For example,</li>\n</ol>\n<p>definition foo :: \"this_is_a_very ⇒<br>\n   (long_type,<br>\n    where_it_makes_sense_to_use ⇒ several_lines) type_constructor\"<br>\n    where<br>\n   \"foo = undefined\"</p>\n<p>Here, \"where\" is indented on space too far (three instead of two), because the last line <br>\nof the type is indented by one (which I find desireable, because it emphasizes that the <br>\nreturn type of the function goes on).</p>\n<p>What is the point of aligning minor keywords like \"where\" with the previous line of inner <br>\nsyntax? IMO \"where\" belongs to the outer syntax of \"definition\" and should therefore <br>\nignore any alignment of inner syntax.</p>\n<p>Of course, I can manually delete the space before \"where\", but whenever I hit &lt;RET&gt; again <br>\non that line, it will insert it again. :-(</p>\n<ol start=\"3\">\n<li>Reformatting destroys all semantic indentation of inner syntax. For example, in the <br>\nexample of 2., when I mark the whole definition and press C-C C-i, I get</li>\n</ol>\n<p>definition foo :: \"this_is_a_very ⇒<br>\n   (long_type,<br>\n   where_it_makes_sense_to_use ⇒ several_lines) type_constructor,\"<br>\n   where<br>\n     \"foo = undefined\"</p>\n<p>This seems wrong for two reasons: First, it has destroyed the formatting of the type. <br>\nSecond, the specification equation is now indented by 4 spaces. Why should we indent <br>\nspecifications by 4 spaces? The position of the \"where\" (on the line of the type vs. on a <br>\nnew line) should not affect the indentation, but apparently it does. Is there a good <br>\nreason for this?</p>\n<ol start=\"4\">\n<li>\n<p>apply immediately before done should not be indented. For example, auto-indentation <br>\nproduces the following, but this just looks silly.</p>\n<p>have \"statement\"<br>\n   apply(rule a)<br>\n   apply(rule b)<br>\n   apply(rule rule_with_many_premises)<br>\n          apply(auto simp add: ...)<br>\n   done</p>\n</li>\n</ol>\n<p>The rule in the third apply produces many subgoals, all of which are solved in one go with <br>\nauto. IMO there is little reason to indent this single like like that. I'd prefer to have <br>\nsomething like</p>\n<p>have \"statement\"<br>\n     apply(rule a)<br>\n     apply(rule b)<br>\n     apply(rule rule_with_many_premises)<br>\n     apply(auto simp add: ...)<br>\n     done</p>\n<p>because it is clear that auto is supposed to solve all goals that are there. (I use such <br>\napply scripts a lot when I develop proof and my definitions are still unstable. <br>\nUltimately, I will go over this proof to polish it and probably collapse everything into a <br>\none-line proof. But I do so only when I know that I am not going to change my definitions <br>\nagain, which may take several weeks or months. Before that, there is no point in <br>\ncompressing such proof steps because I would have to manually reconstruct the apply script <br>\nagain when the definition changes and the proof breaks to see how I can fix it. For this <br>\nintermediate period of time, I'd prefer to avoid these silly indentations.)</p>\n<ol start=\"5\">\n<li>\n<p>Refinement proof steps (using/including) break the indentation of apply scripts when <br>\nthey are used in the middle of the proof script. When I develop my proofs, I frequenly <br>\nhave scripts that look like the following:</p>\n<p>have \"statement\"<br>\n   apply(rule rule_with_several_premises)<br>\n         apply(simp)<br>\n        using some_fact apply(clarsimp simp add: ...)<br>\n       apply simp<br>\n      including lifting_syntax<br>\n      apply transfer_prover_start</p>\n</li>\n</ol>\n<p>Unfortunately, this does not go well with the \"Indent Script\" option. This option pulls <br>\nthe \"using some_fact\" to the indentation level of the first apply (4 spaces here). But <br>\nthis is completely pointless, because the proof method clarsimp will only insert it into <br>\nthe current subgoal. Even worse, when I manually indent the \"using ...\" line as it is <br>\nshown in the example, all the subsequent apply's will be indented relative to the start of <br>\nusing. Can I somehow avoid this?</p>\n<p>Side remark 1: I know that there is the new apply(use some_fact in <br>\n\\&lt;open&gt;clarsimp\\&lt;close&gt;) syntax, but this is too cumbersome to type when I am just <br>\nexploring a proof. In the final, polished version, all of this will probably be deleted <br>\nagain. And it is much easier to just enter \"using some_fact \" before the \"apply clarsimp\" <br>\nthan to navigate the cursor to the start of the clarsimp and enter \"use some_fact <br>\n\\&lt;open&gt;\", then to navigate to the end of the line, move the cursor left by one character <br>\nand then enter \"\\&lt;close\".</p>\n<p>Side remark 2: I don't use \"subgoal using some_fact by(clarsimp simp add: ...)\" because <br>\nsubgoal transfers all goal parameters into fixed variables of the context. Often, these <br>\nparameters are tuples, which clarsimp then cannot split into their components any more, so <br>\nthe proof would fail.</p>\n<p>Andreas</p>",
        "id": 294700630,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661179070
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nI have refined that in<br>\n<a href=\"https://bitbucket.org/isabelle_project/isabelle-release/commits/e61de633a3eddc6\">https://bitbucket.org/isabelle_project/isabelle-release/commits/e61de633a3eddc6</a></p>\n<p>This makes indentation more uniform and predictable, but produces more<br>\nspaces in intermediate situations. The WhiteSpace plugin of jEdit helps<br>\nto remove trailing space systematically, e.g. on buffer save.</p>\n<p>I reckon there will be one more release candidate (RC5), before final<br>\nlift-off. If you want to test it right now, you need to use the above<br>\nrepository version: <a href=\"http://isabelle.in.tum.de/devel\">http://isabelle.in.tum.de/devel</a> is already back to<br>\npost-release mode and now delivers isabelle-dev snapshots instead of<br>\nrelease snapshots.</p>\n<p>Makarius</p>",
        "id": 294702360,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661179597
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nThe above apply-script indentation follows the traditional scheme from<br>\nabout 18 years ago. In recent years I've actually got used to unindented<br>\napply scripts. Since I was unsure if it is always such a good idea, I<br>\nhave provided the option \"indent_script\" to control that.</p>\n<p>So you could try disabling that and see how you feel about it.</p>\n<p>I think systematic apply-script indentation is today mainly used (and<br>\nenforced) by the seL4 people at Data61 (formerly NICTA). It would be<br>\ninteresting to get some feedback from Down Under like \"This is great\" or<br>\n\"This sucks\".</p>\n<p>Makarius</p>",
        "id": 294702380,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661179603
    },
    {
        "content": "<p>From: <a href=\"mailto:Gerwin.Klein@data61.csiro.au\">Gerwin.Klein@data61.csiro.au</a><br>\nThis is great :-)</p>\n<p>The indentation of auto looks a bit silly but carries information, and should be the way it is.</p>\n<p>This indentation is also what the AFP expects. We’re not going to argue (much) about this particular case, but it’s usually better to have consistency over beauty in code layout.</p>\n<p>Cheers,<br>\nGerwin</p>",
        "id": 294702430,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661179622
    },
    {
        "content": "<p>From: Lawrence Paulson &lt;<a href=\"mailto:lp15@cam.ac.uk\">lp15@cam.ac.uk</a>&gt;<br>\nI agree with Gerwin. The default indentation makes it clear how many subgoals are being solved at each point. It’s worth knowing that, even if it looks silly.</p>\n<p>Larry Paulson</p>",
        "id": 294702450,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661179628
    }
]