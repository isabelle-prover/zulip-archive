[
    {
        "content": "<p>From: Rustom Mody &lt;<a href=\"mailto:rustompmody@gmail.com\">rustompmody@gmail.com</a>&gt;<br>\nThanks Alfio and Daniel<br>\nAfter learning about induction instead of induct_tac some other proofs that<br>\nI was stuck with are not going through.<br>\nBut I really dont know what's happening :-)</p>\n<p>Can someone point me to references on the differences??</p>\n<p>Thanks again<br>\nRusi</p>",
        "id": 294673510,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661174143
    },
    {
        "content": "<p>From: Alfio Martini &lt;<a href=\"mailto:alfio.martini@acm.org\">alfio.martini@acm.org</a>&gt;<br>\nHi Daniel,<br>\n,<br>\nI am especially also interested in knowing why the structured proofs goes<br>\nthorugh using just the simplifier<br>\nand the script fails to succeed.  A lot of people in this list might be<br>\nable to give a sound explanation for it. I don't think it is related to the<br>\nuse of induct_tac instead of induction. But I can't say much about it.</p>\n<p>lemma \"(dfs1 xs)@l  = dfs2 xs l\"<br>\n   proof (induction xs arbitrary:l)<br>\n     case Tip<br>\n     show ?case by simp<br>\n  next<br>\n    case (Node tr1 a tr2)<br>\n    show ?case<br>\n      proof -<br>\n       have \"dfs1 (Node tr1 a tr2) @ l=((dfs1 tr1) @ (a# dfs1 tr2))@l\" by<br>\nsimp<br>\n       also have \"... = dfs1 tr1 @ ((a# dfs1 tr2)@l)\" by simp<br>\n       also have \"... = dfs1 tr1 @ (a # (dfs1 tr2 @l))\" by simp<br>\n       also have \"... = dfs1 tr1 @ (a # (dfs2 tr2 l))\" using Node.IH by<br>\nsimp<br>\n       also have \"... = dfs2 tr1 (a # (dfs2 tr2 l))\" using Node.IH by simp<br>\n       also have \"... = dfs2 (Node tr1 a tr2) l \" by simp<br>\n       finally show ?case by this<br>\n      qed<br>\n  qed</p>\n<p>lemma \" (dfs1 xs)@l  = dfs2 xs l\"<br>\n apply(induction xs arbitrary:l)<br>\n apply (simp_all)<br>\n oops</p>",
        "id": 294673532,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661174156
    },
    {
        "content": "<p>From: Alfio Martini &lt;<a href=\"mailto:alfio.martini@acm.org\">alfio.martini@acm.org</a>&gt;<br>\nHi Daniel,<br>\n,<br>\nIn this case, I am especially also interested in knowing why the structured<br>\nproofs goes thorugh using just the simplifier<br>\nand the script fails to succeed.  A lot of people in this list might be<br>\nable to give a sound explanation for it. I don't think it is related to the<br>\nuse of induct_tac instead of induction, but I can't say much about it.</p>\n<p>lemma \"(dfs1 xs)@l  = dfs2 xs l\"<br>\n   proof (induction xs arbitrary:l)<br>\n     case Tip<br>\n     show ?case by simp<br>\n  next<br>\n    case (Node tr1 a tr2)<br>\n    show ?case<br>\n      proof -<br>\n       have \"dfs1 (Node tr1 a tr2) @ l=((dfs1 tr1) @ (a# dfs1 tr2))@l\" by<br>\nsimp<br>\n       also have \"... = dfs1 tr1 @ ((a# dfs1 tr2)@l)\" by simp<br>\n       also have \"... = dfs1 tr1 @ (a # (dfs1 tr2 @l))\" by simp<br>\n       also have \"... = dfs1 tr1 @ (a # (dfs2 tr2 l))\" using Node.IH by<br>\nsimp<br>\n       also have \"... = dfs2 tr1 (a # (dfs2 tr2 l))\" using Node.IH by simp<br>\n       also have \"... = dfs2 (Node tr1 a tr2) l \" by simp<br>\n       finally show ?case by this<br>\n      qed<br>\n  qed</p>\n<p>lemma \" (dfs1 xs)@l  = dfs2 xs l\"<br>\n apply(induction xs arbitrary:l)<br>\n apply (simp_all)<br>\n oops</p>",
        "id": 294673572,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661174162
    },
    {
        "content": "<p>From: Daniel Horne &lt;<a href=\"mailto:d.horne@danielhorne.co.uk\">d.horne@danielhorne.co.uk</a>&gt;<br>\nThe best I've found is in the isar-ref document <br>\n(<a href=\"http://isabelle.in.tum.de/dist/Isabelle2016/doc/isar-ref.pdf\">http://isabelle.in.tum.de/dist/Isabelle2016/doc/isar-ref.pdf</a>) - <br>\ninduction is described on page 147, where induct_tac is on page 289.</p>",
        "id": 294673601,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661174168
    },
    {
        "content": "<p>From: Daniel Horne &lt;<a href=\"mailto:d.horne@danielhorne.co.uk\">d.horne@danielhorne.co.uk</a>&gt;<br>\nAlso, I had another look at doing it with induct_tac, as such:</p>\n<p>lemma \"âˆ€ list .(dfs1 xs)@list  = dfs2 xs list\"<br>\n  apply(induct_tac xs)<br>\n  apply(auto)<br>\nby (metis Cons_eq_appendI append_assoc)</p>\n<p>As induct_tac doesn't have the \"arbitrary\" parameter, I had to specify <br>\nthat by putting the universal quantifier on it instead.</p>\n<p>I've previously been cautioned against doing this, but it might help <br>\nunderstand the difference.</p>",
        "id": 294673620,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661174174
    },
    {
        "content": "<p>From: Bertram Felgenhauer via Cl-isabelle-users &lt;<a href=\"mailto:cl-isabelle-users@lists.cam.ac.uk\">cl-isabelle-users@lists.cam.ac.uk</a>&gt;<br>\nAlfio Martini wrote:<br>\nWhen faced with proving</p>\n<p>\"dfs1 (Node tr1 a tr2) @ xs = dfs2 (Node tr1 a tr2) xs\"</p>\n<p>the simplifier first unfolds the left-hand side to</p>\n<p>\"(dfs1 tr1 @ a # dfs1 tr2) @ xs\"</p>\n<p>At this point, there are two possibilities:</p>\n<p>a) use the induction hypothesis and rewrite that term further to</p>\n<p>\"dfs2 tr1 (a # dfs1 tr2) @ xs\"</p>\n<p>at which point the simplifier gets stuck; in fact it's hard to<br>\n  make progress from here because the xs is outside of the call<br>\n  \"dfs2 tr1 ...\", but the right-hand side will expand to<br>\n  \"dfs2 tr1 (a # dfs2 tr2 xs)\" with the xs inside of the<br>\n  \"dfs2 tr1 ...\" call.</p>\n<p>b) use the associativity of append and its definition to obtain</p>\n<p>\"dfs1 tr1 @ a # dfs1 tr2 @ xs\"</p>\n<p>and only then apply the induction hypothesis which results in</p>\n<p>\"dfs2 tr1 (a # dfs2 tr2 xs)\"</p>\n<p>Unfortunately, if the induction hypothesis is available for<br>\nsimplification, the simplifier prefers a) and the proof fails.</p>\n<p>The following works, but looks fragile:</p>\n<p>lemma \"dfs1 tr @ xs = dfs2 tr xs\"<br>\n  proof (induction tr arbitrary: xs)<br>\n    case Tip<br>\n    show ?case by simp<br>\n  next<br>\n    case (Node tr1 a tr2)<br>\n    show ?case<br>\n      apply simp<br>\n      apply (simp add: Node.IH)<br>\n    done<br>\n  qed</p>\n<p>I would prove the symmetric version of the lemma which avoids these<br>\ncomplications:</p>\n<p>lemma dfs2_dfs1_conv: \"dfs2 t xs = dfs1 t @ xs\"<br>\n  by (induct t arbitrary: xs) auto</p>\n<p>Cheers,</p>\n<p>Bertram</p>",
        "id": 294673644,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661174185
    },
    {
        "content": "<p>From: Alfio Martini &lt;<a href=\"mailto:alfio.martini@acm.org\">alfio.martini@acm.org</a>&gt;<br>\nVery nice explanation Bertram. Thanks a lot!</p>",
        "id": 294673660,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661174189
    },
    {
        "content": "<p>From: Rustom Mody &lt;<a href=\"mailto:rustompmody@gmail.com\">rustompmody@gmail.com</a>&gt;<br>\nTrying to prove a little proof on trees [thy attached]?<br>\nShould be trivial at least from informal pov.</p>\n<p>Any suggestions?<br>\n<a href=\"/user_uploads/14278/eis1bKAk4gzUk2jSyt7VsbUC/dfs.thy\">dfs.thy</a></p>",
        "id": 294675501,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661174812
    },
    {
        "content": "<p>From: Daniel Horne &lt;<a href=\"mailto:d.horne@danielhorne.co.uk\">d.horne@danielhorne.co.uk</a>&gt;<br>\nPlayed about with it a bit, and the following went through OK:</p>\n<p>lemma \"(dfs1 xs)@list  = dfs2 xs list\"<br>\n  apply(induction xs arbitrary:list)<br>\n  apply(auto)<br>\nby (metis Cons_eq_appendI append_assoc)</p>\n<p>induction is a newer method than induct_tac, though I don't know the <br>\ndetails. Once I'd changed that, sledgehammer came up with the..\"by <br>\n(metis Cons_eq_appendI append_assoc)\"</p>",
        "id": 294675527,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661174822
    },
    {
        "content": "<p>From: Alfio Martini &lt;<a href=\"mailto:alfio.martini@acm.org\">alfio.martini@acm.org</a>&gt;<br>\nHi Rustom and Daniel,</p>\n<p>This was my trial using a structured proof. It goes trough using just the<br>\nsimplifier.</p>\n<p>lemma \"(dfs1 xs)@l  = dfs2 xs l\"<br>\n   proof (induction xs arbitrary:l)<br>\n     case Tip<br>\n     show ?case by simp<br>\n  next<br>\n    case (Node tr1 a tr2)<br>\n    show ?case<br>\n      proof -<br>\n       have \"dfs1 (Node tr1 a tr2) @ l=((dfs1 tr1) @ (a# dfs1 tr2))@l\" by<br>\nsimp<br>\n       also have \"... = dfs1 tr1 @ ((a# dfs1 tr2)@l)\" by simp<br>\n       also have \"... = dfs1 tr1 @ (a # (dfs1 tr2 @l))\" by simp<br>\n       also have \"... = dfs1 tr1 @ (a # (dfs2 tr2 l))\" using Node.IH by simp<br>\n       also have \"... = dfs2 tr1 (a # (dfs2 tr2 l))\" using Node.IH by simp<br>\n       also have \"... = dfs2 (Node tr1 a tr2) l \" by simp<br>\n       finally show ?case by this<br>\n      qed<br>\n  qed</p>",
        "id": 294675532,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661174824
    },
    {
        "content": "<p>From: Rustom Mody &lt;<a href=\"mailto:rustompmody@gmail.com\">rustompmody@gmail.com</a>&gt;<br>\nThanks Alfio, Daniel for your suggestions</p>",
        "id": 294675579,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661174841
    }
]