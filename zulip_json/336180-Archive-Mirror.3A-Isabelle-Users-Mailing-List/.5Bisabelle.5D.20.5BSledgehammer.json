[
    {
        "content": "<p>From: Paulo Emílio de Vilhena &lt;<a href=\"mailto:pevilhena2@gmail.com\">pevilhena2@gmail.com</a>&gt;<br>\nDear Jasmin,</p>\n<p>Again, many thanks for your reply.</p>\n<p>I've attached two screenshots to visualize this situation exactly as it<br>\narrives to me.</p>\n<p>In the first one, you can see that the solution proposed by Sledgehammer<br>\ndoesn't finish the proof (\"by fastforce\" is in purple and Isabelle<br>\ncontinues to show the goal).</p>\n<p>The second screenshot is the situation, I described before.</p>\n<p>The code for this theory is open source and can be found on its github<br>\nrepository inside Cycles.thy theory:<br>\n<a href=\"https://github.com/DeVilhena-Paulo/GaloisCVC4/blob/master/Cycles.thy\">https://github.com/DeVilhena-Paulo/GaloisCVC4/blob/master/Cycles.thy</a>. The<br>\nline numbers for these situations can be read in the screenshots.</p>\n<p>To repeat the first situation, click on apply Sledgehammer right after<br>\n?thesis. To repeat the second, write \"using less\" right after ?thesis and<br>\napply Sledgehammer.</p>\n<p>Cheers,</p>\n<p>Paulo.<br>\n<a href=\"/user_uploads/14278/X7vTI2IDXhqv6-4W1s3aNRj4/Screenshot1-from-2018-05-02-12-47-17.png\">Screenshot1 from 2018-05-02 12-47-17.png</a><br>\n<a href=\"/user_uploads/14278/plhTQmxnBC7qVXBUFxQRS-tR/Screenshot2-from-2018-05-02-12-47-52.png\">Screenshot2 from 2018-05-02 12-47-52.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/14278/X7vTI2IDXhqv6-4W1s3aNRj4/Screenshot1-from-2018-05-02-12-47-17.png\" title=\"Screenshot1 from 2018-05-02 12-47-17.png\"><img src=\"/user_uploads/14278/X7vTI2IDXhqv6-4W1s3aNRj4/Screenshot1-from-2018-05-02-12-47-17.png\"></a></div><div class=\"message_inline_image\"><a href=\"/user_uploads/14278/plhTQmxnBC7qVXBUFxQRS-tR/Screenshot2-from-2018-05-02-12-47-52.png\" title=\"Screenshot2 from 2018-05-02 12-47-52.png\"><img src=\"/user_uploads/14278/plhTQmxnBC7qVXBUFxQRS-tR/Screenshot2-from-2018-05-02-12-47-52.png\"></a></div>",
        "id": 294731718,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661188310
    },
    {
        "content": "<p>From: Paulo Emílio de Vilhena &lt;<a href=\"mailto:pevilhena2@gmail.com\">pevilhena2@gmail.com</a>&gt;<br>\nHi,</p>\n<p>I found a problem with the usage of sledgehammer's proposed solutions:<br>\nsometimes, even if it states \"Proof found\" and it manages to output an<br>\none-line proof without the \"timed-out\" assertion, the proposed solution<br>\ndoes not work. This problem arrives to me with a certain frequency. Today,<br>\nfor example, It happened two times in the same proof.</p>\n<p>I am available to help solving this problem.</p>\n<p>Thanks,</p>\n<p>Paulo Emílio de Vilhena.</p>",
        "id": 294732593,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661188622
    },
    {
        "content": "<p>From: Paulo Emílio de Vilhena &lt;<a href=\"mailto:pevilhena2@gmail.com\">pevilhena2@gmail.com</a>&gt;<br>\nDear Jasmin,</p>\n<p>Thank you for your reply.</p>\n<p>Indeed, Sledgehammer is of great help and even not succeeding it helps<br>\nfinding relevant facts as you mentioned.</p>\n<p>It just feels awkward that, for me, most of the time when this behavior<br>\nappears is in very simple situations where the argument of<br>\nperformance wouldn't work at an intuitive level (I don't know the inner<br>\nfunctioning of Sledgehammer, I'm simply based on the size of the one-line<br>\nproof output as an user naively does). For example, there was a situation<br>\nwhere all the provers outputed \"by blast\" and Isabelle wasn't able to<br>\nfinish the proof with this command. Another example, to make things<br>\nconcrete, was the situation of yesterday: if I write \"using less\" to give<br>\nSledgehammer a hint, all the provers but one proposed \"empty by auto\" as<br>\nsolution, which failed, and the last proposed \"cycle_decomp.simps by auto\"<br>\nand also failed. What is bizarre is that if I don't write \"using less\"<br>\nSledgehammer manages to find solutions that work.</p>\n<p>I just repeated the experience today and the same behavior appeared. I also<br>\nnoticed that it was really fast to propose these faulty solutions so I<br>\ndon't think it is a performance problem (again, based on naive<br>\nobservations).</p>\n<p>To finish, I would like to suggest a modification to avoid this kind of<br>\nsituation, which is really annoying: I think it would be nice if<br>\nSledgehammer asks Isabelle to verify if the solution works instead of the<br>\nuser doing it by hand. If the solution doesn't work, it could just write an<br>\nassertion as in the case of \"Timed out\". I think it would be less<br>\nfrustrating.</p>\n<p>Cheers,</p>\n<p>Paulo.</p>",
        "id": 294733366,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661188892
    }
]