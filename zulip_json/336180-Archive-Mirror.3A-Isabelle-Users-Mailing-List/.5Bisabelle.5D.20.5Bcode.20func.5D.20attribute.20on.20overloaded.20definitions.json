[
    {
        "content": "<p>From: John Matthews &lt;<a href=\"mailto:matthews@galois.com\">matthews@galois.com</a>&gt;<br>\nHi,</p>\n<p>I am trying to generate executable code for some overloaded definitions:</p>\n<p>consts cplus :: \"'a =&gt; 'b =&gt; 'b\"</p>\n<p>defs (overloaded)<br>\n   cplus_nat_int_def[code func]:<br>\n     \"cplus (a::nat) (b::int) == int a + b\"<br>\n   cplus_int_nat_def[code func]:<br>\n     \"cplus (a::int) (b::nat) == nat a + b\"</p>\n<p>However, the code generator gives the following error:</p>\n<p>*** Type<br>\n*** nat =&gt; int =&gt; int<br>\n*** of defining equation<br>\n*** \"cplus ?a ?b == int ?a + ?b\"<br>\n*** is incompatible with declared function type<br>\n*** ?'a::type =&gt; ?'b::type =&gt; ?'b::type<br>\n*** At command \"defs\".</p>\n<p>What is the correct way to register code equations for overloaded  <br>\nfunctions?</p>\n<p>Thanks,<br>\n-john</p>",
        "id": 294060395,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660823408
    },
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\nI suspect that the presence of two type variables in the generic type of <br>\ncplus is to blame. The code generator can only deal with overloading <br>\nthat's resolved by a single type argument.</p>\n<p>Tobias</p>\n<p>John Matthews schrieb:</p>",
        "id": 294060405,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660823418
    },
    {
        "content": "<p>From: John Matthews &lt;<a href=\"mailto:matthews@galois.com\">matthews@galois.com</a>&gt;<br>\nThanks, Florian. But will this  work for autoquickcheck? I thought  <br>\nthat used a separate code generator.</p>\n<p>-john</p>",
        "id": 294060719,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660823555
    },
    {
        "content": "<p>From: <a href=\"mailto:florian.haftmann@in.tum.de\">florian.haftmann@in.tum.de</a><br>\nHi John,</p>\n<p>indeed you can use the preprocessor to deal with overloading:</p>\n<p>consts<br>\n   foo :: \"'a =&gt; 'b =&gt; int\"</p>\n<p>defs (overloaded)<br>\n   foo1_def: \"foo (n::nat) (k::int) == int n - k\"<br>\n   foo2_def: \"foo (k::int) (n::nat) == k + int n\"</p>\n<p>definition foo1 :: \"nat =&gt; int =&gt; int\" where<br>\n   foo1_aux_def: \"foo1 = foo\"</p>\n<p>definition foo2 :: \"int =&gt; nat =&gt; int\" where<br>\n   foo2_aux_def: \"foo2 = foo\"</p>\n<p>lemma [code func]:<br>\n   \"foo1 n k = int n - k\"<br>\n   \"foo2 k n = k + int n\"<br>\n   unfolding foo1_aux_def foo2_aux_def foo1_def foo2_def by rule+</p>\n<p>lemma [code inline]:<br>\n   \"foo = foo1\"<br>\n   \"foo = foo2\"<br>\n   unfolding foo1_aux_def foo2_aux_def by rule+</p>\n<p>This will eliminate ad-hoc overloading before the code generator  <br>\nactually \"sees\" it.  Note that this does <em>not</em> introduce any  <br>\npolymorphism due to overloading (for which you have to use type  <br>\nclasses).</p>\n<p>Hope this helps<br>\n     Florian</p>",
        "id": 294060820,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660823602
    }
]