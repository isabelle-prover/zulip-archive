[
    {
        "content": "<p>From: Lukas Bulwahn &lt;<a href=\"mailto:bulwahn@in.tum.de\">bulwahn@in.tum.de</a>&gt;<br>\nHello all,</p>\n<p>I am reporting on the continuation to remove the ancient code generator, <br>\nrelated to an earlier mail this July.</p>\n<p>We are getting closer to remove the ancient code generator.<br>\nIn this process, the preprocessing attributes of the code generator <br>\ncode_unfold and code_inline now have the same semantics. Hence, only one <br>\nhas to be kept.</p>\n<p>At the moment, there are four attributes related to code generation <br>\npreprocessing, code_unfold and code_inline, code_post and code_unfold_post.</p>\n<p>Florian and I are not sure if code_inline or code_unfold fit better to <br>\nthe intended behaviour of \"rewriting a code equation by some simplifying <br>\nequation\" (unfolding a term by its definition, or inlining the definition).</p>\n<p>Does anyone have a suggestion?</p>\n<p>Lukas</p>",
        "id": 294146028,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660847524
    },
    {
        "content": "<p>From: Andreas Lochbihler &lt;<a href=\"mailto:andreas.lochbihler@kit.edu\">andreas.lochbihler@kit.edu</a>&gt;<br>\nI opt for code_unfold because the code generator's preprocessor is more powerful <br>\nthan mere inlining of definitions. For example, you can</p>\n<ol>\n<li>\n<p>write a bottom-up-rewrite optimiser for terms (very useful for automatically <br>\ngenerated code equations such as those by code_pred), and</p>\n</li>\n<li>\n<p>use type restrictions or conditions in code_unfold theorems to redirect calls <br>\nto different implementations based on the calling context,.</p>\n</li>\n</ol>\n<p>Andreas</p>",
        "id": 294146045,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660847530
    },
    {
        "content": "<p>From: Jasmin Christian Blanchette &lt;<a href=\"mailto:jasmin.blanchette@gmail.com\">jasmin.blanchette@gmail.com</a>&gt;<br>\nI would also vote for \"code_unfold\", if nothing else for consistency with the similar \"nitpick_unfold\" tag.</p>\n<p>When I introduced \"nitpick_unfold\" I also considered \"nitpick_inline\", but concluded that the \"unfold\" terminology is from theorem proving and the \"inline\" terminology from the world of compilers. For the code generator, the argument swings both ways, though...</p>\n<p>Jasmin</p>",
        "id": 294146065,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660847536
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nGood that you have answered the mail by Lukas only on <em>one</em> of the two <br>\nmailing list, to avoid the duplication -- isabelle-dev should be a small <br>\nsubset of the larger audience of isabelle-users.</p>\n<p>Makarius</p>",
        "id": 294146080,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660847542
    }
]