[
    {
        "content": "<p>From: Traytel  Dmitriy &lt;<a href=\"mailto:traytel@inf.ethz.ch\">traytel@inf.ethz.ch</a>&gt;<br>\nHi Christian,</p>\n<p>(Replying on isabelle-users, because the dev mailing list is for discussions of the ongoing development. You report is about the official release.)</p>\n<p>Thanks for your report. This is a rather hard crash. With my setup, I don't even need the explicit quickcheck invocationâ€”Auto Quickcheck (which I have enabled) will lead to the same crash too.  I don't know what quickcheck does internally that leads to this (I'll let the quickcheck experts answer and look into this), but a workaround is to add</p>\n<p>code_lazy_type buggy_type</p>\n<p>After the datatype declaration. You will also need to import HOL-Libarary.Code_Lazy to do so.</p>\n<p>The command code_lazy_type will modify the code setup and is meant to avoid non-termination issues for code generation with codatatypes (into languages with strict evaluation). It seems also to help in the case of this non-recursive codatatype.</p>\n<p>Cheers,<br>\nDmitriy</p>",
        "id": 294768124,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661202907
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nThis is a hard crash of the code produced by the Poly/ML compiler ---<br>\nquickcheck generates some ML source and lets Poly/ML evaluate it on the spot.</p>\n<p>The problem first occurred in the transition from Poly/ML 5.6 to 5.7.1<br>\n(Isabelle changeset aefaaef29c58 from 26-Oct-2017). It has been there in<br>\nIsabelle2018 and Isabelle2019.</p>\n<p>I will contact David Matthews, the master of Poly/ML, to take a look at it<br>\n(with a slightly more detailed example).</p>\n<p>Makarius</p>",
        "id": 294821363,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661242300
    }
]