[
    {
        "content": "<p>From: Lars Noschinski &lt;<a href=\"mailto:noschinl@in.tum.de\">noschinl@in.tum.de</a>&gt;<br>\nHi Anja,</p>\n<blockquote>\n<p>bin Studenten an der Goethe-Uni in Frankfurt und besch√§ftige mich sehr<br>\nstark mit dem Isabelle Beweis-System.</p>\n</blockquote>\n<p>The usual language on the Isabelle mailing lists is english. Also, <br>\nplease note that this list is for discussions about the development _of_ <br>\nIsabelle. Using (or developing _in_ Isabelle) is on-topic on the <br>\n<a href=\"mailto:isabelle-users@cl.cam.ac.uk\">isabelle-users@cl.cam.ac.uk</a> mailing list[1]. I'm redirecting your post <br>\nthere.</p>\n<blockquote>\n<p>Currently I am sitting at the following problem in Isabelle.</p>\n<p>In the lemma \"subst_no_occ\" I get no further, I strongly suspect that I<br>\nam in the functions\"apply_subst\" and \"occ\" have overlooked something<br>\nimportant and something gets lost in the proof.</p>\n</blockquote>\n<blockquote>\n<p>lemma subst_no_occ: \"\\neg occ (Var v) t \\Longrightarrow Var v \\neq t<br>\n   \\Longrightarrow t \\triangleleft [(v,s)] = t\"</p>\n</blockquote>\n<p>You meant \"\\&lt;not&gt;\" instead of \"\\&lt;neg&gt;\" here, right?</p>\n<blockquote>\n<p>apply(induct t)<br>\napply(simp)<br>\napply(simp)<br>\napply(simp)<br>\napply(simp)<br>\ndone</p>\n</blockquote>\n<p>Your example is incomplete, so it is hard to give useful advice. I tried <br>\nto complete it as follows:</p>\n<hr>\n<p>datatype 'a trm = Var 'a | Fn 'a \"('a trm list)\"<br>\ntype_synonym 'a subst = \"('a \\&lt;times&gt; 'a trm) list\"</p>\n<p>abbreviation (input) eq where \"eq x \\&lt;equiv&gt; \\&lt;lambda&gt; y. x = y\"</p>\n<p>fun assoc :: \"'a \\&lt;Rightarrow&gt; 'a trm \\&lt;Rightarrow&gt; 'a subst <br>\n\\&lt;Rightarrow&gt; 'a trm\" where<br>\n   \"assoc v d [] = d\"<br>\n   | \"assoc v d ((u, t) # xs) = (if (v = u) then t else assoc v d xs)\"</p>\n<hr>\n<p>In this case, \"apply (induct t)\" introduces a new schematic variable <br>\ninto the goal, which is instantiated by the second \"simp\". The goals <br>\nwhich remains after the 4th simp is actually unsolvable; quickcheck <br>\nfinds a counter example.</p>\n<p>The problem is here that the definition of trm (and apply_subst) contain <br>\nnested recursion and hence you need to do induction over both <br>\napply_subst and apply_subst_list at the same time.</p>\n<p>-- Lars</p>\n<p>[1]: <a href=\"https://lists.cam.ac.uk/mailman/listinfo/cl-isabelle-users\">https://lists.cam.ac.uk/mailman/listinfo/cl-isabelle-users</a></p>",
        "id": 294141896,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660846121
    },
    {
        "content": "<p>From: Lars Noschinski &lt;<a href=\"mailto:noschinl@in.tum.de\">noschinl@in.tum.de</a>&gt;<br>\nHi Anja,</p>\n<p>On 13.07.2011 23:00, Anja Gerbes wrote:</p>\n<blockquote>\n<p>thanks for the reply.</p>\n<p>This problem was already known to me, so I've asked this question.</p>\n</blockquote>\n<p>You should have mentioned this in your question. It takes quite some <br>\ntime to identify a problem; in particular in someone's else theory.</p>\n<blockquote>\n<p>The problem is here that the definition of trm (and apply_subst)<br>\n    contain nested recursion and hence you need to do induction over<br>\n    both apply_subst and apply_subst_list at the same time.</p>\n</blockquote>\n<p>You can do simultaneous induction if you connect the goals by \"and\":</p>\n<p>lemma subst_no_occ:<br>\n   shows \"\\&lt;not&gt; occ (Var v) t<br>\n       \\&lt;Longrightarrow&gt; Var v \\&lt;noteq&gt; t<br>\n       \\&lt;Longrightarrow&gt; t \\&lt;triangleleft&gt; [(v,s)] = t\"<br>\n     and \"\\&lt;not&gt; occ_list (Var v) ts<br>\n       \\&lt;Longrightarrow&gt; (\\&lt;And&gt;u. u \\&lt;in&gt; set ts<br>\n         \\&lt;Longrightarrow&gt; Var v \\&lt;noteq&gt; u)<br>\n       \\&lt;Longrightarrow&gt; apply_subst_list ts [(v,s)] = ts\"<br>\nproof (induct rule: trm.inducts)<br>\n   ...</p>\n<p>-- Lars</p>",
        "id": 294141913,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660846126
    }
]