[
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nThis also belongs to isabelle-users.</p>\n<p>It does not make any sense to post questions both to isabelle-users and <br>\nisabelle-dev at the same time -- it just causes confusion.</p>\n<p>Makarius</p>\n<p>---------- Forwarded message ----------<br>\nDate: Wed, 22 May 2013 13:50:45 +0200<br>\nFrom: Manuel Eberl &lt;<a href=\"mailto:eberlm@in.tum.de\">eberlm@in.tum.de</a>&gt;<br>\nTo: <a href=\"mailto:isabelle-dev@mailbroy.informatik.tu-muenchen.de\">isabelle-dev@mailbroy.informatik.tu-muenchen.de</a><br>\nSubject: Re: [isabelle-dev] Partial functions</p>\n<p>Hallo,</p>\n<p>partial function in Isabelle are usually modelled as 'a ⇀ 'b, which is<br>\nan abbreviation for 'a ⇒ 'b option. There is syntax such as \"[1 ↦ 2, 3 ↦<br>\n4]\", meaning, basically, \"λx. if x = 1 then Some 2 else if x = 3 then<br>\nSome 4 else None\". There is also update syntax for such function, such<br>\nas \"f(1 ↦ 3)\", meaning \"λx. if x = 1 then 3 else f x\".</p>\n<p>You could therefore write something like<br>\ndefinition f :: \"nat ⇀ nat\" where \"f = [1 ↦ 4, 2 ↦ 4, 3 ↦ 5]\"</p>\n<p>You can find out the domain/range of such a partial function using dom<br>\nand ran. For instance, \"dom f\" is defined as {a. f a ≠ None}.</p>\n<p>If you want to apply such a function, you can either do \"case f x of<br>\nNone ⇒ … | Some y ⇒ …\", or you can simply write \"the (f x)\". \"the\" takes<br>\nan option value and extracts the \"y\" out of a \"Some y\" or returns<br>\n\"undefined\" if the option value is \"None\".</p>\n<p>I hope that answers your question.</p>\n<p>Cheers,<br>\nManuel</p>\n<p>On 22/05/13 13:35, Roger H. wrote:</p>\n<blockquote>\n<p>Hallo,</p>\n<p>i want to create a datatype that allows me to write functions from a<br>\nnat subset to another nat subset.<br>\nfor example i wanna be able to write:</p>\n<p>definition f: {1,2,3} =&gt; {4,5}<br>\n1 --&gt;4, 2--&gt;4, 3--&gt;5</p>\n<p>or another one:</p>\n<p>definition g : {6,8} =&gt; {2,3,4}</p>\n<p>So the thing i want to somehow parametrize is \"which subset of the nat<br>\nim using each time as domain and range\" ,</p>\n<p>I thought about creating a new datatype : 'a nat<br>\nThe problem with this is that 'a is instantiated with datatypes, and<br>\nnot sets like {1,2,3}.</p>\n<p>Following solutions are bad:</p>\n<ol>\n<li>\n<p>Everytime i want declare a new function, i have to declare by<br>\n\"typedef\" the nat subsets i want as domain and range</p>\n</li>\n<li>\n<p>definition f : \"nat =&gt; nat\" where<br>\n\"f x = (if x : {1,2,3} then .... else undefined)</p>\n</li>\n</ol>\n<p>This second approach is bad, cause i dont want the domain to be<br>\ndecided as late as the second line of the declaration, cause after<br>\nthis i want to be able to program a selector \"domain f\"<br>\nthat returns me the domain of f, thats why i want the domain of f to<br>\nbe somehow incapsulated (parametrized) in the first line \"f: nat =&gt;nat<br>\n\" so that i can use it later.</p>\n<p>What would you do in this situation?</p>\n<p>Many thanks!</p>\n<hr>\n<p>isabelle-dev mailing list<br>\n<a href=\"mailto:isabelle-dev@in.tum.de\">isabelle-dev@in.tum.de</a><br>\n<a href=\"https://mailmanbroy.informatik.tu-muenchen.de/mailman/listinfo/isabelle-dev\">https://mailmanbroy.informatik.tu-muenchen.de/mailman/listinfo/isabelle-dev</a></p>\n</blockquote>\n<hr>\n<p>isabelle-dev mailing list<br>\n<a href=\"mailto:isabelle-dev@in.tum.de\">isabelle-dev@in.tum.de</a><br>\n<a href=\"https://mailmanbroy.informatik.tu-muenchen.de/mailman/listinfo/isabelle-dev\">https://mailmanbroy.informatik.tu-muenchen.de/mailman/listinfo/isabelle-dev</a></p>",
        "id": 294240533,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660906795
    },
    {
        "content": "<p>From: Andreas Lochbihler &lt;<a href=\"mailto:andreas.lochbihler@inf.ethz.ch\">andreas.lochbihler@inf.ethz.ch</a>&gt;<br>\nHi Roger,</p>\n<p>Isabelle/HOL is a logic of total function, so very function is defined for all values of <br>\nthe argument type. So, if you declare the type \"nat =&gt; nat\", it is always defined on all <br>\nnatural numbers. As you have found out yourself, you can create types for subsets of <br>\nnatural numbers, but you won't get happy with that, because all of your formalisation will <br>\nbe cluttered with embeddings of one of these types into another.</p>\n<p>The standard way to model partiality is the following: Wrap the return type in \"option\" <br>\nand use the value None to denote undefinedness.</p>\n<p>For example,</p>\n<p>definition f :: \"nat =&gt; nat option\" where<br>\n   \"f x = (if x : {1,2,3} then Some .... else None)\"</p>\n<p>Then, \"dom f\" returns the domain of f as {1,2,3} and \"ran f\" the range of f. There are a <br>\nfew more operations defined in theory Map, in particular map_of. Option.bind in theory <br>\nOption is used for function composition.</p>\n<p>Best,<br>\nAndreas</p>\n<p>PS: This is a standard user's topic, so it belongs to the mailing list isabelle-users, not <br>\nisabelle-dev.</p>",
        "id": 294242149,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660907416
    },
    {
        "content": "<p>From: Gottfried Barrow &lt;<a href=\"mailto:gottfried.barrow@gmx.com\">gottfried.barrow@gmx.com</a>&gt;<br>\nI was looking at how to do a partial function with option, so I was <br>\nlooking at this old email thread.</p>\n<p>The two statements above make it sound like it should be easy to get <br>\n\"dom f = {1,2,3}\".</p>\n<p>I do this:<br>\ntheorem \"(dom f) = {1,2,3}\"<br>\napply(unfold dom_def)</p>\n<p>And I get a goal: \"{a. f a ≠ None} = {1, 2, 3}\", with no easy automatic <br>\nproof.</p>\n<p>Is there something simple I'm supposed to do get \"(dom f) = {1,2,3}\"?</p>\n<p>Thanks,<br>\nGB</p>",
        "id": 294252212,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660911181
    },
    {
        "content": "<p>From: Christian Sternagel &lt;<a href=\"mailto:c.sternagel@gmail.com\">c.sternagel@gmail.com</a>&gt;<br>\nHow about unfolding the definition of \"f\"?</p>\n<p>Then it should work, e.g., as follows</p>\n<p>definition f :: \"nat ⇒ nat option\"<br>\n   where<br>\n     \"f x = (if x ∈ {1, 2, 3} then Some 0 else None)\"</p>\n<p>lemma \"dom f = {1, 2, 3}\"<br>\n     by (force simp: f_def dom_def)</p>\n<p>cheers</p>\n<p>chris</p>",
        "id": 294252225,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660911187
    },
    {
        "content": "<p>From: Gottfried Barrow &lt;<a href=\"mailto:gottfried.barrow@gmx.com\">gottfried.barrow@gmx.com</a>&gt;<br>\nChristian,</p>\n<p>Thanks. I'll blame the simple oversight on trying to use and learn new <br>\nconcepts.</p>\n<p>I'm also working on trying to learn Scala. I did a lot of work to find <br>\nthe best scripting language, to finally find out that a powerful <br>\nscripting language is already in the Isabelle distribution: <br>\ncontrib\\scala-2.10.3</p>\n<p>People should try it out.</p>\n<p>Put the Isabelle2013 Java and Scala bin paths in the jEdit Console <br>\noptions path: contrib\\jdk\\x86-cygwin\\bin and contrib\\scala-2.10.3\\bin</p>\n<p>You can then run jEdit macros like these to run scala scripts in the <br>\nconsole panel:</p>\n<p>runInSystemShell(view,\"scala %f\");</p>\n<p>runInSystemShell(view,\"scala %p\\\\..\\\\work\\\\src\\\\i2t_pdoc.scala %p\");</p>\n<p>The variable %f is the current jEdit buffer file name, and %p is the <br>\nfolder set by the current project of the Project Viewer plugin.</p>\n<p>And there's the Scala IDE download, which is Eclipse completely set up <br>\nfor Scala:</p>\n<p><a href=\"http://scala-ide.org/\">http://scala-ide.org/</a></p>\n<p>Regards,<br>\nGB</p>",
        "id": 294252257,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660911202
    }
]