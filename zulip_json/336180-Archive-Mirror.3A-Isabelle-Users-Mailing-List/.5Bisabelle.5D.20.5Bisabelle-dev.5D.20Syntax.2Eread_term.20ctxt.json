[
    {
        "content": "<p>From: <a href=\"mailto:e0726734@student.tuwien.ac.at\">e0726734@student.tuwien.ac.at</a><br>\nthank you for looking at my question!<br>\nbut as far as i can see there seems to be a misunderstanding  <br>\n(#####################)<br>\nso i kindly ask once more:</p>\n<p>---- Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt; wrote:</p>\n<blockquote>\n<p>On Thu, 3 Mar 2011, <a href=\"mailto:bonzai@inode.at\">bonzai@inode.at</a> wrote:</p>\n<blockquote>\n<p>i studied isabelle/isar implementation, isabelle/isar reference  <br>\nmanual  and the isabelle cookbook.<br>\nwhat am i still doing wrong ?</p>\n<p>structure Data = Proof_Data<br>\n  (type T = term list<br>\n   fun init _ = []);<br>\nval ctxt =<br>\n  ProofContext.init_global @{theory} |&gt;<br>\n<a href=\"http://Data.map\">Data.map</a> (fn ts =&gt; @{term \"x::int\"}::ts);<br>\n#############################------######<br>\nData.get ctxt;</p>\n<p>Syntax.read_term ctxt \"x + 1 = 2\";<br>\n(* we get Free (\"x\", \"'a\") etc, but would expect ...<br>\n##############################----------------##<br>\nval it =<br>\n   Const (\"HOL.eq\", \"<a href=\"http://Int.int\">Int.int</a> \\&lt;Rightarrow&gt; <a href=\"http://Int.int\">Int.int</a> \\&lt;Rightarrow&gt;<br>\nHOL.bool\") $<br>\n     (Const (\"<a href=\"http://Groups.plus_class.plus\">Groups.plus_class.plus</a>\", \"<a href=\"http://Int.int\">Int.int</a> \\&lt;Rightarrow&gt; <a href=\"http://Int.int\">Int.int</a><br>\n\\&lt;Rightarrow&gt; <a href=\"http://Int.int\">Int.int</a>\") $<br>\n       Free (\"x\", \"<a href=\"http://Int.int\">Int.int</a>\") $ Const (\"<a href=\"http://Groups.one_class.one\">Groups.one_class.one</a>\", \"<a href=\"http://Int.int\">Int.int</a>\")) $<br>\n#################------###################<br>\n     (Const (\"Int.number_class.number_of\", \"<a href=\"http://Int.int\">Int.int</a> \\&lt;Rightarrow&gt;<br>\n<a href=\"http://Int.int\">Int.int</a>\") $<br>\n       (Const (\"Int.Bit0\", \"<a href=\"http://Int.int\">Int.int</a> \\&lt;Rightarrow&gt; <a href=\"http://Int.int\">Int.int</a>\") $<br>\n         (Const (\"...\", \"<a href=\"http://Int.int\">Int.int</a> \\&lt;Rightarrow&gt; <a href=\"http://Int.int\">Int.int</a>\") $<br>\n           Const (\"Int.Pls...\", \"<a href=\"http://Int.int\">Int.int</a>\")))):<br>\n   term<br>\n*)</p>\n</blockquote>\n<p>I cannot reproduce the problem.  This is the output of ML toplevel  <br>\ndeclarations produced here:</p>\n<p>structure Data : PROOF_DATA<br>\nval ctxt = &lt;context&gt;: Proof.context<br>\nval it = [Free (\"x\", \"Int.int\")]: Data.T<br>\nval it =<br>\n    Const (\"HOL.eq\", \"'a \\&lt;Rightarrow&gt; 'a \\&lt;Rightarrow&gt; HOL.bool\") $<br>\n      (Const (\"<a href=\"http://Groups.plus_class.plus\">Groups.plus_class.plus</a>\", \"'a \\&lt;Rightarrow&gt; 'a  <br>\n\\&lt;Rightarrow&gt; 'a\") $ Free (\"x\", \"'a\") $<br>\n###########################################################################-----####<br>\n(we would like to have <a href=\"http://Int.int\">Int.int</a> here<br>\n##################################################################################<br>\n        Const (\"<a href=\"http://Groups.one_class.one\">Groups.one_class.one</a>\", \"'a\")) $<br>\n      (Const (\"Int.number_class.number_of\", \"<a href=\"http://Int.int\">Int.int</a> \\&lt;Rightarrow&gt; 'a\") $<br>\n        (Const (\"Int.Bit0\", \"<a href=\"http://Int.int\">Int.int</a> \\&lt;Rightarrow&gt; <a href=\"http://Int.int\">Int.int</a>\") $<br>\n          (Const (\"...\", \"<a href=\"http://Int.int\">Int.int</a> \\&lt;Rightarrow&gt; <a href=\"http://Int.int\">Int.int</a>\") $ Const  <br>\n(\"Int.Pls...\", \"<a href=\"http://Int.int\">Int.int</a>\")))):<br>\n    term<br>\n[...]<br>\n   * You can ask questions about Isabelle/ML on the isabelle-users mailing<br>\n     list.  isabelle-dev means you are hooked on unofficial repository<br>\n     versions for some reason, in which case you should also say which<br>\n     one it is (e.g. via isabelle version -i).</p>\n<p>Makarius</p>\n</blockquote>\n<p>Thank you very much for any help,<br>\n   Mathias Lehnfeld</p>",
        "id": 294132103,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660843200
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nThis is getting increasingly hard to read.  Note that he private Data slot <br>\nis really just a list of terms that the system maintains for you in <br>\nProof.context.  Its meaning is determined by what you do with it in user <br>\ncode -- the system ignores it.</p>\n<p>This means the Syntax.read_term produces a term according to the regular <br>\ncontext, and there \"x\" is undeclared.  So \"x + 1 = 2\" gets a very general <br>\ntype.</p>\n<p>Here is an example (in Isabelle2011) that illustrates how to use the <br>\ncontext for locally fixed variables, potentially with type constraints <br>\n(these are two different things):</p>\n<p>notepad<br>\nbegin<br>\n   term \"x + 1 = 2\"  -- {* x undeclared; general type *}</p>\n<p>fix x :: int  -- {* x locally fixed, with type constraint *}<br>\n   term \"x + 1 = 2\"<br>\nend</p>\n<p>notepad<br>\nbegin<br>\n   ML_val {*<br>\n     val ctxt = @{context};<br>\n     val (_, ctxt') = ProofContext.add_fixes [(@{binding x}, SOME @{typ int}, NoSyn)] ctxt;<br>\n     val t = Syntax.read_term ctxt \"x + 1 = 2\";<br>\n     val t' = Syntax.read_term ctxt' \"x + 1 = 2\";<br>\n   *}<br>\nend</p>\n<p>As a general principle, whenever there is some surprise about results it <br>\nis often due to \"bad context\", cf. ctxt vs. ctxt' above.</p>\n<p>Makarius</p>",
        "id": 294132160,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660843206
    }
]