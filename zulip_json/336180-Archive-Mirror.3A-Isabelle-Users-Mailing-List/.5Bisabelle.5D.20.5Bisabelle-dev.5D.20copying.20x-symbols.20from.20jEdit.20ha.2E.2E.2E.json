[
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\n(This got stuck on isabelle-dev for quite some time, where it is basically <br>\noff-topic.  See also the brief descriptions of the mailing lists on the <br>\nmain Isabelle website.)</p>\n<p>Concerning \"x-symbols\", there is quite a bit of confusion, including this <br>\nterminology, which stems from an obsolete Emacs package of that name from <br>\na long time ago.  Even in current Proof General 4.x there are no x-symbols <br>\nanymore, but Unicode characters for rendering the special Isabelle symbols <br>\nlike \\&lt;alpha&gt;, \\&lt;forall&gt; etc.</p>\n<p>In contrast to Proof General 4.x, Isabelle/jEdit (and the underlying <br>\nIsabelle/Scala) platform do the rendering of symbols in physical unicode <br>\non the JVM by actual translation back and forth, now just by appearance. <br>\nThis then allows to copy-paste in the front-end space, including other <br>\nfront-end renderings like the Isabelle HTML output.  It also allows the <br>\neditor to search over files using the unicode that you see on the surface, <br>\nalthough the prover sources are still in this encoding-free ASCII format <br>\nof Isabelle symbols.  (The latter goes back to Isabelle98, and has <br>\nremained mostly stable since then, while there were several different <br>\nUnicode standards coming and going in the meantime.)</p>\n<p>So far so good.  Problems arise when you mix up front-end views (with <br>\nphysical unicode rendering) and back-end sources that are given to the <br>\nprover by a side entry, without a Isabelle/Scala compliant frontend in <br>\nbetween.  If you produce such a unicode .thy file accidentally, you can <br>\nconvert it by opening in Isabelle/jEdit and saving it again with the <br>\nUTF8-Isabelle encoding that should be enabled by default.  (jEdit also <br>\nallows to switch encodings explicitly, and tries to remember that choice <br>\nfor later.)</p>\n<p>Technically that encoding is managed by jEdit, independently of the raw <br>\nJava VM encoding concept for text.  At some point, I might move the <br>\nUTF8-Isabelle conversion down to the JVM itself.  I've also heard that the <br>\nJVM clipboard can be somehow made sensitive to encodings, with potential <br>\nalternatives.  The latter might make things work yet more smoothly in the <br>\nfuture, but it needs further investigation of Unicode on the JVM (which is <br>\nan endless topic).</p>\n<p>Makarius</p>",
        "id": 294163227,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660853977
    }
]