[
    {
        "content": "<p>From: Daniel Horne &lt;<a href=\"mailto:d.horne@danielhorne.co.uk\">d.horne@danielhorne.co.uk</a>&gt;<br>\nHi.</p>\n<p>I've found myself running into a few situations where I want to define a <br>\ntype as \"an object of (existing type a) for which (boolean expression is <br>\ntrue)\".</p>\n<p>Suppose, for example, that I want to represent identifiers in a language <br>\nI'm trying to model. Naturally, I'd think of using the primitives <br>\ndefined in string.thy, but as not all strings are valid identifiers, I'd <br>\ndefine a function such as</p>\n<p>fun is_identifier :: \"string =&gt; bool\"</p>\n<p>But thereafter I'd need to code it in lemmas as taking is_identifier as <br>\nan assumption. I'd tend to think it'd be neater to have identifier being <br>\na type defined as \"string which satisfies is_identifier\", and was <br>\nwondering if there was a way to do this?</p>\n<p>Thanks,</p>\n<p>Daniel Horne</p>",
        "id": 294680324,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661176481
    },
    {
        "content": "<p>From: Peter Lammich &lt;<a href=\"mailto:lammich@in.tum.de\">lammich@in.tum.de</a>&gt;<br>\ntypedef id = \"Collect is_identifier\" <br>\n  &lt;proof that there is at least one identifier&gt;</p>\n<p>does what you want. However, there is no true subtyping, so using<br>\nthe new type as string requires some manual work, which may be slightly<br>\nsimplified by the lifting/transfer package.</p>",
        "id": 294680344,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661176487
    },
    {
        "content": "<p>From: Lars Hupel &lt;<a href=\"mailto:hupel@in.tum.de\">hupel@in.tum.de</a>&gt;<br>\nHi Daniel,</p>\n<p>other people have suggested using \"typedef\" to introduce a new type.<br>\nThere is even a way to have the system automatically coerce an<br>\n\"identifier\" to a \"string\" where one is expected by virtue of coercions.<br>\n(The other way would technically be possible but virtually useless.)</p>\n<p>However, keep in mind that introducing a new type also requires logical<br>\neffort. For example, existing constants on strings need to be lifted to<br>\nthe new type (concatenation comes to mind). Also, you need to transfer<br>\nlemmas from the base type to the subtype using the \"transfer\" method.</p>\n<p>Another possibility would be to use an anonymous context:</p>\n<p>context<br>\n    fixes a b c :: string<br>\n    assumes a: \"is_identifier a\"<br>\n    assumes b: \"is_identifier b\"<br>\n    assumes c: \"is_identifier c\"<br>\n  begin</p>\n<p>...</p>\n<p>end</p>\n<p>This gives you a block in your theory where you can use these \"regular\"<br>\nvalues as identifiers. Of course this only works when you need a fixed<br>\nnumber of them. If that's the case, it's the solution which is much<br>\neasier to work with. (You might also want to look into the concept of<br>\n\"locales\" in Isabelle if you're deciding to go down that route.)</p>\n<p>Cheers<br>\nLars</p>",
        "id": 294680386,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661176503
    }
]