[
    {
        "content": "<p>From: Andreas Lochbihler &lt;<a href=\"mailto:andreas.lochbihler@inf.ethz.ch\">andreas.lochbihler@inf.ethz.ch</a>&gt;<br>\nThe error message \"Failed to refine any pending goal\" usually comes from one of the <br>\nfollowing mistakes:</p>\n<p>a) Your show statement does not match a conclusion of a goal (often there is a typo).<br>\nb) The assumption that you have \"assume\"d do not match the assumption of the goal that you <br>\nare trying to show with \"show\".</p>\n<p>In your case, it is mistake b). In the original lemma statement, the assumption \"2 dvd <br>\n(x::int)*x\" was part of the goal, so you have to assume it inside the block. When you <br>\nrewrite the statement to</p>\n<p>lemma<br>\n   fixes x :: int<br>\n   assumes s: \"2 dvd x*x\"<br>\n   shows \"2 dvd x\"</p>\n<p>then the assumption is already part of the context and no longer of the goal. You can <br>\nobserve this change also in the output buffer when you look at the raw goal state. <br>\nNevertheless, you still have the (now superfluous) assume 1: \"2 dvd x*x\" in your Isar <br>\nproof. That is, you are making an assumption that is no longer part of the goal state, so <br>\nyou get an error upon show. If you delete this assume and use the assumption from the <br>\nlemma statement instead, everything should work fine.</p>\n<p>Andreas</p>",
        "id": 294326525,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660928722
    },
    {
        "content": "<p>From: Andreas Lochbihler &lt;<a href=\"mailto:andreas.lochbihler@inf.ethz.ch\">andreas.lochbihler@inf.ethz.ch</a>&gt;<br>\nThe Isabelle/Isar reference manual (available from the documentation panel) explains the <br>\ngeneral syntax of mixfix syntax annotations. They are normally enclosed in parenthesis and <br>\ngo between the type declaration and the \"where\" clause of fun/definition/inductive, etc. <br>\nAlternatively, you can also use the command \"notation\" for functions that have already <br>\nbeen defined. Examples of \\&lt;^bsub&gt; \\&lt;^esub&gt; can be found in library in theory Map.thy for <br>\nthe function restrict_map.</p>\n<p>Best,<br>\nAndreas</p>",
        "id": 294328592,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660929458
    },
    {
        "content": "<p>From: Andreas Lochbihler &lt;<a href=\"mailto:andreas.lochbihler@inf.ethz.ch\">andreas.lochbihler@inf.ethz.ch</a>&gt;<br>\nOn 21/02/15 02:21, W. Douglas Maurer wrote:</p>\n<blockquote>\n<blockquote>\n<p>The Isabelle/Isar reference manual (available from the documentation panel) explains the<br>\ngeneral syntax of mixfix syntax annotations. They are normally enclosed in parenthesis<br>\nand go between the type declaration and the \"where\" clause of fun/definition/inductive,<br>\netc. Alternatively, you can also use the command \"notation\" for functions that have<br>\nalready been defined. Examples of \\&lt;^bsub&gt; \\&lt;^esub&gt; can be found in library in theory<br>\nMap.thy for the function restrict_map.</p>\n</blockquote>\n<p>Thanks. I'm not sure that I will ever do this myself, but I am going to show my students<br>\nhow to do it in case they would like to try it.<br>\nMeanwhile I'm putting together some proofs involving dvd and the even function, using<br>\ntheory Parity. One of the lemmas in Parity is lemma even_iff_2_dvd [algebra]: even a &lt;--&gt;<br>\n2 dvd a by (simp add: even_def dvd_eq_mod_eq_0). So I substituted 38 for a, obtaining<br>\n\"even((38::int)) &lt;--&gt; (2::int) dvd (38::int)\". Then I used try0, and try0 said: Try this:<br>\nby auto (auto, presburger, force: 0 ms; simp: 1 ms; fastforce: 8 ms). But one of the<br>\nmethods that try0 tried was algebra, and algebra is not on that list. So what does lemma<br>\neven_iff_2_dvd [algebra] mean, then? If it read [simp] instead of [algebra], that would<br>\nmean that this is a simprule, something that simp tries. So why doesn't [algebra] mean<br>\nthat this is something that algebra tries? And does that apply to other rule names in<br>\nsquare brackets, like [presburger]? Thanks! -WDMaurer<br>\nThe annotations in square brackets are called attributes and they have a variety of <br>\npurposes. In the case of [algebra] and [presburger], they indeed indicate that these rules <br>\nshould be used by these proof methods. From what I know, these two methods reason <br>\nabstractly, not for concrete numbers like 38. Moreover, I am not familiar with the <br>\ninternals of try or try0. If you want to see whether algebra can solve this, just write <br>\n\"by algebra\" and see whether this works, too.</p>\n</blockquote>\n<p>Andreas</p>\n<blockquote>\n<p>--<br>\nProf. W. Douglas Maurer       Washington, DC 20052, USA<br>\nDepartment of Computer Science         Tel. (1-202)994-5921<br>\nThe George Washington University Fax  (1-202)994-4875</p>\n</blockquote>",
        "id": 294328750,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660929507
    }
]