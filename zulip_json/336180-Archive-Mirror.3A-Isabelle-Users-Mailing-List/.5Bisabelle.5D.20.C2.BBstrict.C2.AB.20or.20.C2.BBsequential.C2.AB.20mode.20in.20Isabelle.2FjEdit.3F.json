[
    {
        "content": "<p>From: Florian Haftmann &lt;<a href=\"mailto:florian.haftmann@informatik.tu-muenchen.de\">florian.haftmann@informatik.tu-muenchen.de</a>&gt;<br>\nThis should fit my purpose, thanks.</p>\n<p>Florian<br>\n<a href=\"/user_uploads/14278/ERx12eNTAcDdj_e2dC1YLHey/signature.asc\">signature.asc</a></p>",
        "id": 294274654,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660918356
    },
    {
        "content": "<p>From: Florian Haftmann &lt;<a href=\"mailto:florian.haftmann@informatik.tu-muenchen.de\">florian.haftmann@informatik.tu-muenchen.de</a>&gt;<br>\nDuring fine-point tuning of a huge bunch of theories (e.g.<br>\nMultivariate_Analysis / Probability in Isabelle/HOL), I am often in the<br>\nsituation to incrementally adjust the sources following the error<br>\nreporting of Isabelle/jEdit (e.g. adding a simp rule and adjusting<br>\nsubsequent broken proofs).</p>\n<p>In this particular situation I experience two inconveniences with<br>\ncontinuous proof checking »as it is« in Isabelle/jEdit:</p>\n<ul>\n<li>\n<p>The prover tries to work hard to give early feedback on the current<br>\nfocus of the edit panel, e.g. leaving proofs unfinished in earlier<br>\ntheories and so on.  Thus the (expected) spots of problems get reported<br>\nquite late, and, after adjusting those spots, a lot of material which<br>\nfollows afterwards has to be re-checked.</p>\n</li>\n<li>\n<p>If existing proofs degenerate into non-termination, the risk is that<br>\nthese spots will consume a lot of resources and turn Isabelle/jEdit<br>\nlittle reactive until the spots are identified and interrupted by hard<br>\nedits.</p>\n</li>\n</ul>\n<p>What works as workaround is to set the number of threads temporarily to</p>\n<ol>\n<li>Beside the comparably deep path through GUI elements for switching<br>\nback and forth, parallelism (e.g. wrt. complete theories) is entirely lost.</li>\n</ol>\n<p>I'm not sure how relevant this is (how do other people experience such<br>\nsituations?), but maybe there is a different approach to the whole<br>\nscenaio which so far did not come to my mind.</p>\n<p>Cheers,<br>\n    Florian<br>\n<a href=\"/user_uploads/14278/HOIYgvzNvj0qe_Y1A_at59t9/signature.asc\">signature.asc</a></p>",
        "id": 294275745,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660918705
    },
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\nThe points reported by Florian trouble me less than the following, of which<br>\nonly the first relates to jedit, but both relate to maintenance:</p>\n<ul>\n<li>\n<p>Finding the error locations can be troublesome in big theories; somtimes the<br>\npresence of an error (in red) is only visible in the theory panel.</p>\n</li>\n<li>\n<p>Adjusting the AFP frequently leads me into the follwing situation: I run<br>\n\"afp_build -A\"; there is an error in some entry; I fix the error; I restart<br>\n\"afp_build -A\"; isabelle (more precisely java) dies with some out of memory<br>\nerror right away, sometimes blaming it on a corrupt log file. At this point I<br>\nneed to remove all log files and rerun <em>everything</em>.</p>\n</li>\n</ul>\n<p>I believe both points have been discussed already but I have no idea if I can<br>\navoid the problem with the AFP.</p>\n<p>Tobias</p>",
        "id": 294275780,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660918716
    },
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\nOn 22/04/2014 16:09, Makarius wrote:</p>\n<blockquote>\n<p>On Sun, 13 Apr 2014, Tobias Nipkow wrote:</p>\n<blockquote>\n<ul>\n<li>Adjusting the AFP frequently leads me into the follwing situation: I run<br>\n\"afp_build -A\"; there is an error in some entry; I fix the error; I restart<br>\n\"afp_build -A\"; isabelle (more precisely java) dies with some out of memory<br>\nerror right away, sometimes blaming it on a corrupt log file. At this point I<br>\nneed to remove all log files and rerun <em>everything</em>.</li>\n</ul>\n</blockquote>\n<p>You need to remove only the log file that is in the way, but that is still a bit<br>\nawkward.</p>\n<p>Maybe you just have the default ISABELLE_BUILD_JAVA_OPTIONS, which are meant to<br>\nwork on most systems without any bad surprise about JVM startup failure due to<br>\nlack of address space.  (The situation is complicated by having to guess at<br>\ntotal heap space and individual thread stack space.)</p>\n<p>To allow heavy-duty AFP maintenance, I use something like this in<br>\n$ISABELLE_HOME_USER/etc/settings:</p>\n<p>ISABELLE_BUILD_JAVA_OPTIONS=\"-Xmx4096m -Xss1m\"</p>\n<p>or like this:</p>\n<p>ISABELLE_BUILD_JAVA_OPTIONS=\"-Xmx4096m -Xss2m\"<br>\n</p>\n</blockquote>\n<p>I currently have what you had sent me some time ago:</p>\n<p>JEDIT_JAVA_OPTIONS=\"-Xms256m -Xmx4096m -Xss2m -Dactors.corePoolSize=8<br>\n-Dactors.enableForkJoin=false\"</p>\n<p>Is the above ISABELLE_BUILD_JAVA_OPTIONS independent to that, or does one imply<br>\nthe other?</p>\n<p>Tobias</p>\n<blockquote>\n<p>Makarius</p>\n</blockquote>",
        "id": 294277499,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660919262
    }
]