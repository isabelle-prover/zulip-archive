[
    {
        "content": "<p>From: Gottfried Barrow &lt;<a href=\"mailto:igbi@gmx.com\">igbi@gmx.com</a>&gt;<br>\nPRELIMINARY ERROR REPORT</p>\n<p>Rather than send two emails, I put this error report in here, because <br>\nit's no big deal.</p>\n<p>In my type class helper source, I had a subsection command immediately <br>\nfollowed by another subsection command, as shown below, where the first <br>\ncommand ended with a <code>)</code> instead of a <code>}</code>.</p>\n<p>What's shown below will cause no error in the PIDE. I only found the <br>\nerror when I inserted a <code>print_classes</code> after the wrongly terminated <br>\n<code>subsection</code> command. An inserted <code>print_classes</code> also doesn't cause an <br>\nerror; it just doesn't do anything.</p>\n<p>subsection{<em>test 1</em>)</p>\n<p>(<em>print_classes. This wasn't here at first.</em>)</p>\n<p>subsection{<em>test 2</em>}</p>\n<p>term \"int\"</p>\n<p>BACK TO THE TYPE CLASSES</p>\n<p>There are 179 type classes imported with Complex_Main (plus one more <br>\nimported with BNF), of which 82 are used for nat, 106 for int, 110 for <br>\nrat, 143 for real, and 88 for complex.</p>\n<p>Attached is a screenshot showing what the attached THY will show you <br>\nabout those 180 type classes. Use <code>print_locale!</code> instead of <br>\n<code>print_locale</code> to see all the theorems for a type class. For some type <br>\nclasses, <code>print_locale!</code> will take a long time to process.</p>\n<p>Those who love their 5mm mechanical pencils will someday also love type <br>\nclasses.</p>\n<p>Algebra type classes stay true to the \"abstract\" in \"abstract algebra\".</p>\n<p>Also, former 5mm-mechanical-pencil-addicts will love being able to do <br>\nabstract numeric calculations with numbers that have types of type <br>\nclasses, such as these:</p>\n<p>value \"1 + (2::'a::numeral)\"<br>\n   (* (1::'a::numeral) + 1 + 1 *)</p>\n<p>value \"1 + (2::'a::linordered_semidom)\"<br>\n   (* (1::'a::linordered_semidom) + 1 + 1 *)</p>\n<p>value \"1 + (2::'a::ring_1)\"<br>\n   (* (1::'a::ring_1) + 1 + 1 *)</p>\n<p>value \"1 + (2::'a::field)\"<br>\n   (* (1::'a::field) + 1 + 1 *)</p>\n<p>For concreteness, there is still nat, though the processing of the <br>\nsuccessor function can require the help of <code>n + 1 = Suc(n)</code> neurons:</p>\n<p>value \"1 + (2::nat)\"<br>\n   (* Suc (Suc (Suc (0::nat)) *)</p>\n<p>Regards,<br>\nGB<br>\n<a href=\"/user_uploads/14278/XUriO3fxzIS4O2jpgYPOqN7t/type_class_sidekick_helper.png\">type_class_sidekick_helper.png</a><br>\n<a href=\"/user_uploads/14278/8ibdt7vTxpMN1JEF00lwOK98/type_class_sidekick_helper.thy\">type_class_sidekick_helper.thy</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/14278/XUriO3fxzIS4O2jpgYPOqN7t/type_class_sidekick_helper.png\" title=\"type_class_sidekick_helper.png\"><img src=\"/user_uploads/14278/XUriO3fxzIS4O2jpgYPOqN7t/type_class_sidekick_helper.png\"></a></div>",
        "id": 294272904,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660917775
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nThere is no error in the Prover IDE, because the above is correct.  We <br>\ncan be glad that the editor and the prover mostly agree on the basic <br>\nsyntax of the sources.</p>\n<p>Isabelle outer syntax has a variety of \"delimited tokens\" with slightly <br>\ndifferent rules for nesting and escapes (or lack thereof):</p>\n<p>(* (* nested *) comments, without escapes *)</p>\n<p>{* non-nested verbatim text, without escapes *}</p>\n<p>\"double-quoted string, with escapes for \\\" and \\\\, but without nesting\"</p>\n<p><code>back-quoted string, with escapes for \\</code> and \\\\, but without nesting`</p>\n<p>That's mainly it, but still a bit complex, not to say complicated. The <br>\nlack of nesting and need for escapes introduces extra potential for <br>\nconfusion, as well as occasionaly need for {*} in latex inside <br>\nnon-nestable {* ... *} chunks.</p>\n<p>Incidents and confusion like this happen about 0.5 times per year on this <br>\nmailing list.  To make an end of this, I have introduced a new concept in <br>\nthe Isabelle repository version some weeks ago: uniform balanced quotes <br>\nthat don't need any escapes: the so-called \"text cartouches\".</p>\n<p>It is all ready to be actually used, lets say as a start for verbatim text <br>\nlike this</p>\n<p>section ‹abc›</p>\n<p>text ‹abc›</p>\n<p>in addition to existing {* abc *} or \"abc\" in these syntax slots.</p>\n<p>I am still hesitating because of an unknown number of people who are still <br>\nstuck with Proof General, which presently does not know about this change <br>\nof the token language.</p>\n<p>If there are remaining Proof General users who want to prove that this <br>\nancient thing is not quite dead yet, we can move over to <br>\n<a href=\"mailto:proofgeneral-devel@inf.ed.ac.uk\">proofgeneral-devel@inf.ed.ac.uk</a> to sort out the (simple) things that need <br>\nto be done to support text cartouches in Emacs as well.</p>\n<p>Alternatively, one could take the subtitle of the talk by Carst Tankink at <br>\nINRIA-MSR this week into serious considerations:</p>\n<p>The Last March of Proof General</p>\n<p>That was before an audience of Coq users, who were still confined to <br>\nprover interfaces from 15 years ago.</p>\n<p>Makarius</p>",
        "id": 294273027,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660917821
    },
    {
        "content": "<p>From: Gottfried Barrow &lt;<a href=\"mailto:igbi@gmx.com\">igbi@gmx.com</a>&gt;<br>\nOn 14-03-21 12:34, Makarius wrote:</p>\n<blockquote>\n<p>There is no error in the Prover IDE, because the above is correct.  We <br>\ncan be glad that the editor and the prover mostly agree on the basic <br>\nsyntax of the sources.</p>\n</blockquote>\n<p>Thanks for the explanation.</p>\n<p>I actually subscribe to the idea that for one to claim there are <br>\nsoftware errors or software bugs, one needs to understand the <br>\ndeveloper's intent and the software's purpose, unless the problem is <br>\nobvious, like the PIDE freezing. However, I can jump to conclusions, or <br>\nforget to cover myself with words like \"possible\" or \"could be\", and <br>\nemails sent in can't be edited later on.</p>\n<blockquote>\n<p>Incidents and confusion like this happen about 0.5 times per year on <br>\nthis mailing list. </p>\n</blockquote>\n<p>Though, if <code>lurker_multiplier =100</code>,  then there are <code>(100 * 0.5) - 0.5 \n= 49.5</code> unreported incidents of confusion like this per year, for those <br>\nwho never complain about problems, whether real or perceived.</p>\n<blockquote>\n<p>To make an end of this, I have introduced a new concept in the <br>\nIsabelle repository version some weeks ago: uniform balanced quotes <br>\nthat don't need any escapes: the so-called \"text cartouches\".</p>\n</blockquote>\n<p>I understand from this that ‹abc› is not a replacement for (<em>abc</em>).</p>\n<p>If you're taking requests, and another set of unused delimiter symbols <br>\nbecomes available, it would be nice to have something like that for <br>\ncomments, (<em>...</em>).</p>\n<p>In verbatim source, I exclusively use (<em>...</em>) for comments, which I also <br>\ndisplay in a PDF, using a typewriter font to control the spacing. I <br>\nnever use --{<em>...</em>} or --\"...\". The symbols (<em>...</em>) have symmetry, and <br>\n(<em>...</em>) works better with standard 2-space indentation.</p>\n<p>Here's an example, where the spaces may get lost here:</p>\n<p>(*This is stuff...<br>\n   and so forth...*)</p>\n<p>If I had ‹abc› for source comments, I could do something like this:</p>\n<p>‹|This is stuff...<br>\n   and so forth...|›</p>\n<p>Everything is still currently good.</p>\n<p>Regards,<br>\nGB</p>",
        "id": 294273076,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660917837
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nOn Mon, 24 Mar 2014, Gottfried Barrow wrote:</p>\n<blockquote>\n<p>I understand from this that ‹abc› is not a replacement for (<em>abc</em>).</p>\n</blockquote>\n<p>So far it is just some funny token syntax, in addition to what has already <br>\naccumulated in the past 20-30 years.  One could in principle do it like <br>\nLISP, and use just one kind of parentheses for everything, but that is <br>\nhardly readable.</p>\n<p>The intention of {* ... *} from 15 years ago was to provide a manner of <br>\n\"quoting\" informal text, such that formal material (types, terms, <br>\ntheorems) can be \"anti-quoted\" inside it, but without any conflict with <br>\nthe typical double-quotes of Isabelle inner syntax.  IIRC, {* ... *} was <br>\nnot made nestable for simplificity: Emacs did not support nested comments <br>\nat that time, so it happened to be the same for (* ... *), althouth the <br>\nlatter have alsways been nestable in Isabelle.</p>\n<p>Today the prover and editor agree on the Isabelle token language, so more <br>\nprecision matters.</p>\n<blockquote>\n<p>If you're taking requests, and another set of unused delimiter symbols <br>\nbecomes available, it would be nice to have something like that for comments, <br>\n(<em>...</em>).</p>\n<p>In verbatim source, I exclusively use (<em>...</em>) for comments, which I also <br>\ndisplay in a PDF, using a typewriter font to control the spacing. I never use <br>\n--{<em>...</em>} or --\"...\". The symbols (<em>...</em>) have symmetry, and (<em>...</em>) works <br>\nbetter with standard 2-space indentation.</p>\n</blockquote>\n<p>(* ... *) are just source comments, like % in LaTeX.</p>\n<p>Normally, you write comments semi-formally via \"-- {* ... *}\" or<br>\n\"text {* ... *}\" then they are also rendered by Isabelle document <br>\npreparation.  Source comments can have funny side-effects on whitespace <br>\nhere.</p>\n<p>The envisioned reform would cover all occurrences of {* ... *} uniformly, <br>\nso you could write something like this:</p>\n<p>-- ‹abc›</p>\n<p>That certainly has symmetry.  If you don't like the spacing of the Unicode <br>\ncharacters, you can use a different font, or even make your own with a <br>\nfont editor.</p>\n<p>This visual tinkering is more important for printed documents in LaTeX, <br>\nbut IIRC you have not even tried that yet.</p>\n<p>Makarius</p>",
        "id": 294273583,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660917980
    }
]