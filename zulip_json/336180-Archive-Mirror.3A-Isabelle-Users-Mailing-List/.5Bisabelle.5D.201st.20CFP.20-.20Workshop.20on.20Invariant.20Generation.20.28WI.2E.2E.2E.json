[
    {
        "content": "<p>From: Laura Kovacs &lt;<a href=\"mailto:laura.kovacs@inf.ethz.ch\">laura.kovacs@inf.ethz.ch</a>&gt;<br>\n[Please post - apologies for multiple copies.]</p>\n<p>First Call for Papers</p>\n<hr>\n<p>W I N G 2010</p>\n<p>3nd International Workshop on INvariant Generation</p>\n<hr>\n<p>July 21, 2010<br>\nUniversity of Edinburgh, UK<br>\nSatellite Workshop of FLoC 2010</p>\n<p><a href=\"http://research.microsoft.com/en-us/events/wing2010/\">http://research.microsoft.com/en-us/events/wing2010/</a></p>\n<p>General</p>\n<hr>\n<p>The ability to extract and synthesize auxiliary properties<br>\nof programs has had a profound effect on program analysis,<br>\ntesting and verification over the last several decades.<br>\nThe field of invariant generation draws on a multitude of<br>\ntechniques ranging from computer algebra, theorem proving,<br>\nconstraint solving, abstract interpretation techniques<br>\nand model-checking.<br>\nLikewise, the application areas are diversified from<br>\nbootstrapping static program analysis tools,<br>\nto test-case generation and into aiding the quest<br>\nfor verified software. So invariants are a key ingredient<br>\nin program analysis and understanding.<br>\nYet, invariant generation poses as many challenges as promises:<br>\nA key impediment for program verification<br>\nis the overhead associated with providing, debugging,<br>\nand verifying auxiliary invariant annotations.</p>\n<p>As the design and implementation of reliable software remains<br>\nan important issue, any progress in this area will be of utmost<br>\nimportance for future developments in verified software. In the<br>\ncontext of static analysis and test-case generation, suitable<br>\ninvariants have the potential of enabling sophisticated<br>\nautomatic program analysis and high-coverage test-case<br>\ngeneration.</p>\n<p>Several modern techniques for program termination and<br>\nexpected program execution time also rely heavily on<br>\nsuitable invariants (as relations) for the termination analysis.</p>\n<p>Automated discovery of inductive assertions is therefore<br>\none of the ultimate challenges for verification of safety and<br>\nsecurity properties of programs.</p>\n<p>The increasing power of automated theorem proving and<br>\ncomputer algebra has opened new perspectives for computer<br>\naided program verification; in particular for the automatic<br>\ngeneration of inductive assertions in order to reason about<br>\nloops and recursion. Especially promising breakthroughs are<br>\ninvariant generation techniques by Groebner bases,<br>\nquantifier elimination, and algorithmic combinatorics,<br>\nwhich can be used in conjunction with model checking,<br>\ntheorem proving, static analysis and abstract interpretation.</p>\n<p>Scope</p>\n<hr>\n<p>This workshop aims to bring together researchers from<br>\nseveral fields of abstract interpretation, computational<br>\nlogic and computer algebra to support reasoning about loops,<br>\nin particular, by using algorithmic combinatorics,<br>\n narrowing/widening techniques, static analysis,<br>\npolynomial algebra, quantifier elimination and model checking.</p>\n<p>We encourage submissions presenting work in progress,<br>\ntools under development, as well as research of PhD students,<br>\nsuch that the workshop can become a forum for active dialog<br>\nbetween the groups involved in this new research area.</p>\n<p>Relevant topics include (but are not limited to) the following:</p>\n<ul>\n<li>Program analysis and verification</li>\n<li>Inductive Assertion Generation</li>\n<li>Inductive Proofs for Reasoning about Loops</li>\n<li>Applications to Assertion Generation using the following tools:<ul>\n<li>Abstract Interpretation,</li>\n<li>Static Analysis,</li>\n<li>Model Checking,</li>\n<li>Theorem Proving,</li>\n<li>Algebraic Techniques</li>\n</ul>\n</li>\n<li>Tools for inductive assertion generation and verification</li>\n<li>Alternative techniques for reasoning about loops</li>\n</ul>\n<p>Keynote Speakers</p>\n<hr>\n<p>Sumit Gulwani (Microsoft Research, US)<br>\nHelmut Seidl  (Technical University of Munich, Germany)</p>\n<p>Committee</p>\n<hr>\n<p>Program Chairs:</p>\n<p>Nikolaj Bjorner (Microsoft Research, US)<br>\nLaura Kovacs (ETH Zurich, Switzerland)</p>\n<p>Program Committee:<br>\nEnric Rodrguez Carbonell (Technical University of Catalonia)<br>\nMartin Giese (University of Oslo, Norway)<br>\nJens  Knoop (Technical University of Vienna, Austria)<br>\nFrancesco Logozzo (Microsoft Research, USA)<br>\nWolfgang Schreiner (RISC-Linz, Austria)<br>\nAndrey Rybalchenko (Technical University of Munich, Germany)<br>\nHelmut Veith (Technical University of Vienna, Austria)<br>\nThomas Wies (IST, Austria)</p>\n<p>Important Dates</p>\n<hr>\n<p>March  8, 2010: Submission deadline<br>\nApril 11, 2010: Notification of acceptance<br>\nApril 23, 2010: Camera-ready copy deadline<br>\nJuly  21, 2010: WING 2010 in Edinburgh, UK</p>\n<p>Submission</p>\n<hr>\n<p>Submission is via EasyChair:</p>\n<p><a href=\"https://www.easychair.org/?conf=wing2010\">https://www.easychair.org/?conf=wing2010</a></p>\n<p>Please submit research reports up to 15 pages in PDF,<br>\nconforming to the format produced by LaTeX using the<br>\neasychair.cls class file of EasyChair.<br>\nThe class style may be downloaded at:</p>\n<p><a href=\"http://www.easychair.org/easychair.zip\">http://www.easychair.org/easychair.zip</a></p>\n<p>Publication</p>\n<hr>\n<p>All submissions will be peer-reviewed by the program committee.<br>\nAccepted contributions will be published in archived electronic notes,<br>\nas an EasyChair collection volume.</p>\n<p>A special issue of the Journal of Symbolic Computation with full versions<br>\nof selected papers will be published after the workshop.</p>",
        "id": 294098729,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660833120
    }
]