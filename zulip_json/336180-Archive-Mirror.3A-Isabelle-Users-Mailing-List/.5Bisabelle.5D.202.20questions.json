[
    {
        "content": "<p>From: Alexander Krauss &lt;<a href=\"mailto:krauss@in.tum.de\">krauss@in.tum.de</a>&gt;<br>\nOlaÂ´ Francisco, nice to hear from you again,</p>\n<p>Isn't the SUBGOAL tactical (see reference manual) what you need? <br>\nSomething like</p>\n<p>SUBGOAL (fn (t, i)=&gt; REPEAT_DETERM_N (complexity t) your_tactic)</p>\n<p>should do what you need...</p>\n<p>I leave \"b)\" to someone else :-)</p>\n<p>Alex</p>",
        "id": 293905210,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660745752
    },
    {
        "content": "<p>From: Lawrence Paulson &lt;<a href=\"mailto:lp15@cam.ac.uk\">lp15@cam.ac.uk</a>&gt;<br>\nI think you mean that you are looking for a tactic that applies the  <br>\nrule repeatedly until every occurrence of xRy has been used. You'd  <br>\nhave to write ML code to locate them and instantiate the rule  <br>\nappropriately, e.g. calling res_inst_tac, since unguided rule  <br>\napplications will always find the first occurrence of xRy.</p>\n<p>Larry Paulson</p>",
        "id": 293905284,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660745763
    }
]