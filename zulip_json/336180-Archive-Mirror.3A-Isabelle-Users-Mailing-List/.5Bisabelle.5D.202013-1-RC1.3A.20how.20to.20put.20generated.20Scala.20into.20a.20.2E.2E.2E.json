[
    {
        "content": "<p>From: Florian Haftmann &lt;<a href=\"mailto:florian.haftmann@informatik.tu-muenchen.de\">florian.haftmann@informatik.tu-muenchen.de</a>&gt;<br>\nHi Cornelius,</p>\n<p>instead of Code_Target.add_include, use Code_Target.set_printings<br>\n(Code_Symbol.Module …).</p>\n<p>Hope this helps,<br>\n    Florian<br>\n<a href=\"/user_uploads/14278/bmpPLQvq4gGY6s5ijo0Qki1k/signature.asc\">signature.asc</a></p>",
        "id": 294250813,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660910649
    },
    {
        "content": "<p>From: Florian Haftmann &lt;<a href=\"mailto:florian.haftmann@informatik.tu-muenchen.de\">florian.haftmann@informatik.tu-muenchen.de</a>&gt;<br>\nIt's correct, although the introducing »No« confuses me.</p>\n<p>Florian<br>\n<a href=\"/user_uploads/14278/1Eqluluid3V8yuX7F_kqhk6o/signature.asc\">signature.asc</a></p>",
        "id": 294250834,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660910655
    },
    {
        "content": "<p>From: \"C. Diekmann\" &lt;<a href=\"mailto:diekmann@in.tum.de\">diekmann@in.tum.de</a>&gt;<br>\nHello Florian,</p>\n<p>Could you provide a complete example for me please? And, is it<br>\npossible to add some sort of Isabelle version string (such as<br>\n\"Isabelle2013-1-RC3\") to the header?</p>\n<p>Thank you very much<br>\n  Cornelius</p>",
        "id": 294251431,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660910889
    },
    {
        "content": "<p>From: Christoph LANGE &lt;<a href=\"mailto:math.semantic.web@gmail.com\">math.semantic.web@gmail.com</a>&gt;<br>\nDear code generation wizards,</p>\n<p>to make generated Scala code more maintainable I would like to have it<br>\nin a named package.  (I'm actually making the code even more<br>\nmaintainable, albeit somewhat fragile, by splitting it into<br>\nobjects/classes using<br>\n<a href=\"https://github.com/formare/auctions/blob/master/isabelle/Auction/code/split-scala-modules.pl\">https://github.com/formare/auctions/blob/master/isabelle/Auction/code/split-scala-modules.pl</a>,<br>\nand this script relies on the package name.)</p>\n<p>So far I have been using the following setup for this:</p>\n<blockquote>\n<p>code_include Scala \"\"<br>\n{*package Foo<br>\n*}<br>\nexport_code def1 ... defN in Scala<br>\nfile \"code/Foo.scala\"</p>\n</blockquote>\n<p>Isabelle 2013-1-RC1 now warns me:</p>\n<blockquote>\n<p>Legacy feature! prefer \"code_printing\" for custom serialisations</p>\n</blockquote>\n<p>However code_printing works in the context of symbols IIUC; it can't<br>\njust output something at the beginning of the output file.</p>\n<p>Should I ignore this warning, or is there a more modern way to achieve<br>\nwhat I want?</p>\n<p>Cheers, and thanks in advance,</p>\n<p>Christoph</p>",
        "id": 294251554,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660910938
    },
    {
        "content": "<p>From: Florian Haftmann &lt;<a href=\"mailto:florian.haftmann@informatik.tu-muenchen.de\">florian.haftmann@informatik.tu-muenchen.de</a>&gt;<br>\nHi Cornelius,</p>\n<p>ML {*<br>\nfun scala_header thy =<br>\n  let<br>\n    val date = Date.toString (Date.fromTimeLocal (<a href=\"http://Time.now\">Time.now</a> ()));<br>\n    val package = \"package Foo\";<br>\n    val export_file = Context.theory_name thy ^ \".thy\";<br>\n    val header = package ^ \"\\n\" ^ \"// Generated by Isabelle (\" ^<br>\nDistribution.version ^ \") on \" ^ date ^ \"\\n\" ^ \"// src: \" ^ export_file<br>\n^ \"\\n\";<br>\n  in<br>\n    Code_Target.set_printings (Code_Symbol.Module (\"\", [(\"Scala\", SOME<br>\n(header, []))])) thy<br>\n  end<br>\n*}<br>\nsetup {* scala_header *}</p>\n<p>export_code distinct in Scala</p>\n<p>;-) Florian<br>\n<a href=\"/user_uploads/14278/Yxc3MROi72VkQcPVgw-DLTw9/signature.asc\">signature.asc</a></p>",
        "id": 294251908,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660911061
    },
    {
        "content": "<p>From: \"C. Diekmann\" &lt;<a href=\"mailto:diekmann@in.tum.de\">diekmann@in.tum.de</a>&gt;<br>\nHi Florian,</p>\n<p>Works like charm. Thank you!</p>\n<p>Cornelius</p>",
        "id": 294252238,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660911193
    },
    {
        "content": "<p>From: Andreas Lochbihler &lt;<a href=\"mailto:andreas.lochbihler@inf.ethz.ch\">andreas.lochbihler@inf.ethz.ch</a>&gt;<br>\nHi Christioph,</p>\n<p>The new way of writing this is with \"code_printing code_module\", e.g.:</p>\n<p>code_printing code_module \"\" =&gt; (Scala) {<em>package Foo</em>}</p>\n<p>Best,<br>\nAndreas</p>",
        "id": 294252475,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660911281
    },
    {
        "content": "<p>From: \"C. Diekmann\" &lt;<a href=\"mailto:diekmann@in.tum.de\">diekmann@in.tum.de</a>&gt;<br>\nHi Andreas,</p>\n<p>is there a way to translate the following into the new way?<br>\nML {*<br>\nval scala_header =<br>\n  let<br>\n    val package = \"package Foo\";<br>\n    val date = Date.toString (Date.fromTimeLocal (<a href=\"http://Time.now\">Time.now</a> ()))<br>\n    val export_file = Context.theory_name @{theory} ^ \".thy\"<br>\n    val header = package ^ \"\\n\" ^ \"// Generated by Isabelle on \" ^<br>\ndate ^ \"\\n\" ^ \"// src: \" ^ export_file ^ \"\\n\"<br>\n  in<br>\n    Code_Target.add_include \"Scala\" (\"\", SOME (header, []))<br>\n  end<br>\n*}<br>\n setup {* scala_header *}</p>\n<p>Cheers<br>\n  Cornelius</p>",
        "id": 294253075,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660911532
    },
    {
        "content": "<p>From: Andreas Lochbihler &lt;<a href=\"mailto:andreas.lochbihler@inf.ethz.ch\">andreas.lochbihler@inf.ethz.ch</a>&gt;<br>\nHi Cornelius,</p>\n<p>No, code_printing code_module can deal only with fixed strings. It is just a new front-end <br>\nsyntax for the same underlying machinery of code_include.</p>\n<p>@Florian: Please correct me if I am wrong.</p>\n<p>Best,<br>\nAndreas</p>",
        "id": 294253145,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660911557
    }
]