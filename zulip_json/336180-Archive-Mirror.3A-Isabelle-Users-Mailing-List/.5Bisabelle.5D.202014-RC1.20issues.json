[
    {
        "content": "<p>From: Peter Lammich &lt;<a href=\"mailto:lammich@in.tum.de\">lammich@in.tum.de</a>&gt;<br>\nHere is a list of issues that I encountered with RC1:</p>\n<ul>\n<li>\n<p>If a lemma is not properly closed, ie. the done or qed is missing,<br>\n  the next command only issues a warning and recovers the state. As<br>\n  warnings are omnipresent in Isabelle, it is very hard to spot such<br>\n  places when<br>\n  developing a theory. This leads to garbage accumulating in theory<br>\n  files and probably only being discovered upon batch-build.</p>\n<p>This feature may also cause surprises on bigger isar proofs, where it<br>\nis (in particuar as code-fold does not work) too easy to forget a qed.</p>\n</li>\n<li>\n<p>In the output buffer, the standard Ctrl-Ins for \"copy\" does not work,<br>\nwhile it works in the main text area. Can these shortcuts be configured<br>\nseparately? Or do I have to live with Ctrl-C?</p>\n</li>\n<li>\n<p>Odd behaviour when focus lays in output buffer or any other panel:<br>\nCursor movement and entering newlines still goes to the text area, but<br>\nother keyboard input goes to the panel (and may or may not be<br>\ninterpreted there). The only indication for this is a slightly changed<br>\ncolor of the cursor in the main window. </p>\n</li>\n<li>\n<p>No indentation feature. It is hard to keep track of big proofs and<br>\nindent them correctly, in particular as code-folding does not work<br>\nreliably.</p>\n<p>In PG, there was a nice auto-indentation feature that worked reliable<br>\nfor (almost) all cases.</p>\n</li>\n<li>\n<p>When developing proofs: <br>\n  The output window displays the current position<br>\n  by default ... if you are typing a new command, it usually displays<br>\n  \"Syntax error\". <br>\n  However, while typing your next method/isar step, you usually want to<br>\n  see the current goal state, not a the completely useless information<br>\n  \"syntax error\".</p>\n<p>In PG, the output was not updated before you explicitely processed<br>\nthe command. Maybe, this can be simulated by turning auto-update off<br>\nand bind update to a convenient shortcut.</p>\n</li>\n</ul>",
        "id": 294285440,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660921692
    },
    {
        "content": "<p>From: Lars Noschinski &lt;<a href=\"mailto:noschinl@in.tum.de\">noschinl@in.tum.de</a>&gt;<br>\nAnd a completion-related one: In a string context in a ML-context,<br>\nsymbol completion is enabled. So, changing</p>\n<p>setup {*<br>\n  ML_Antiquotation.inline @{binding fundef} (Scan.succeed \"raise Undefined\")<br>\n*}</p>\n<p>to</p>\n<p>setup {*<br>\n  ML_Antiquotation.inline @{binding fundef} (Scan.succeed \"fn _ =&gt; raise<br>\nUndefined\")<br>\n*}</p>\n<p>yields</p>\n<p>setup {*<br>\n  ML_Antiquotation.inline @{binding fundef} (Scan.succeed \"fn _ ⇒ raise<br>\nUndefined\")<br>\n*}</p>\n<p>instead with the default (immediate completion) settings.</p>",
        "id": 294285452,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660921698
    },
    {
        "content": "<p>From: Lars Noschinski &lt;<a href=\"mailto:noschinl@in.tum.de\">noschinl@in.tum.de</a>&gt;<br>\nHi,</p>\n<blockquote>\n<p>Here is a list of issues that I encountered with RC1:<br>\nAnother issue I encountered with RC1 today (I didn't encounter the issue<br>\nwith RC0, but my usage intensity might have been to low): I modified<br>\nsome file (in a ML block), did some jumping around (through other<br>\nbuffers), came back to the changed line and didn't see the change<br>\nanymore. I redid the change, which lead to an error message which made<br>\nit clear that the system saw something else than I was seeing in the<br>\nbuffer. I reloaded the buffer and the error went away.</p>\n</blockquote>\n<p>I haven't found a way to reproduce it yet.</p>\n<p>BTW: Does someone know a software which is able to record the last n<br>\nminutes of a window (basically a screen recorder with a ring buffer)? I<br>\noften thought this would be helpful to describe these kind of issues.</p>\n<p>-- Lars</p>",
        "id": 294285468,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660921704
    },
    {
        "content": "<p>From: Lars Noschinski &lt;<a href=\"mailto:noschinl@in.tum.de\">noschinl@in.tum.de</a>&gt;<br>\nAnd yet another issue: A method executing</p>\n<p>error \"\"</p>\n<p>produces an error marker in the right sidebar. However, the associated<br>\napply command does not get underlined in red and the error marker in the<br>\nleft sidebar is missing.</p>\n<p>Reproduce with:</p>\n<p>theory Scratch imports Pure begin</p>\n<p>lemma \"PROP P\"<br>\n  apply (tactic {* error \"\" *})<br>\n  oops</p>\n<p>end</p>",
        "id": 294285487,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660921709
    },
    {
        "content": "<p>From: Ondřej Kunčar &lt;<a href=\"mailto:kuncar@in.tum.de\">kuncar@in.tum.de</a>&gt;<br>\nAnd you can't see the error in the Output panel either.</p>",
        "id": 294285514,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660921716
    },
    {
        "content": "<p>From: Lars Noschinski &lt;<a href=\"mailto:noschinl@in.tum.de\">noschinl@in.tum.de</a>&gt;<br>\nIndeed. All of this is different to</p>\n<p>ML {* error \"\" *}</p>\n<p>which at least produces an empty red line as output (and thus gets the<br>\nother markers, too).</p>\n<p>BTW: I always use(d) \"error \"\"\" the way one uses \"undefined\" in Haskell.<br>\nThe following construct (which Makarius showed me at ITP) is a bit nicer<br>\n(you get a trace and can jump to the location of the error), but<br>\nrequires a few lines of initial setup:</p>\n<p>signature UTIL = sig<br>\n  exception Undefined<br>\n  val setup : theory -&gt; theory<br>\nend</p>\n<p>structure Util : UTIL = struct</p>\n<p>exception Undefined</p>\n<p>val setup =<br>\n  ML_Antiquotation.inline @{binding undef} (Scan.succeed \"raise<br>\nUtil.Undefined\")<br>\n  #&gt; ML_Antiquotation.inline @{binding fundef} (Scan.succeed \"fn _ =&gt;<br>\nraise Util.Undefined\")</p>\n<p>end</p>\n<p>BTW2: I assume there is no easy way to make Isabelle/ML accept ⊥ instead<br>\nof @{undef}?</p>\n<p>-- Lars</p>",
        "id": 294285525,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660921723
    },
    {
        "content": "<p>From: Peter Lammich &lt;<a href=\"mailto:lammich@in.tum.de\">lammich@in.tum.de</a>&gt;<br>\nAn another feature request:</p>\n<p>The sidekick panel is supposed to show an overview of the theory. <br>\nAt the top-level of the hierarchy, you can see the first lines of lemma,<br>\ndefinition, etc commands, which may or may not contain useful<br>\ninformation. In the worst case, you just see \"lemma\" or \"definition\".</p>\n<p>It is even worse if you look under a lemma command. This looks like:<br>\n+lemma<br>\n|- using<br>\n|- case<br>\n|- proof<br>\n|- apply <br>\n|- apply <br>\n|- done<br>\n|- qed</p>\n<p>i.e., almost completely useless information. </p>\n<p>The information that might be useful, i.e. the name and the proposition<br>\nof the lemma, is displayed nowhere!</p>\n<p>Attached is a screenshot from a current development of mine, that<br>\nillustrates the problem.<br>\n<a href=\"/user_uploads/14278/MkSmjd8i8fD5Leu31AKxw3MM/shot.png\">shot.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/14278/MkSmjd8i8fD5Leu31AKxw3MM/shot.png\" title=\"shot.png\"><img src=\"/user_uploads/14278/MkSmjd8i8fD5Leu31AKxw3MM/shot.png\"></a></div>",
        "id": 294285644,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660921760
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nOn Wed, 30 Jul 2014, Peter Lammich wrote:</p>\n<blockquote>\n<ul>\n<li>If a lemma is not properly closed, ie. the done or qed is missing, the<br>\n  next command only issues a warning and recovers the state. As warnings<br>\n  are omnipresent in Isabelle, it is very hard to spot such places when<br>\n  developing a theory. This leads to garbage accumulating in theory<br>\n  files and probably only being discovered upon batch-build.</li>\n</ul>\n</blockquote>\n<p>That is actually a contribution in Isabelle2014 to make error recovery a <br>\nbit more useful, without doing the real job of (sub)structural checking <br>\nyet.</p>\n<p>What do you mean by \"warnings are omnipresent in Isabelle\"?  The prover <br>\nIDE shows them more prominently than in the TTY past, but that could be <br>\ntaken as motivation to remove the reasons for warnings.  Not all such <br>\nspots are bad, but an avarage theory normally has only few warnings.</p>\n<blockquote>\n<ul>\n<li>In the output buffer, the standard Ctrl-Ins for \"copy\" does not work,<br>\nwhile it works in the main text area. Can these shortcuts be configured<br>\nseparately? Or do I have to live with Ctrl-C?</li>\n</ul>\n</blockquote>\n<p>I did not know about Ctrl-Ins yet.  What you observe here is merely the <br>\nknown and documented difference of the main jEdit text area with its <br>\nactions and shortscuts vs. regular Java Swing GUI components.  The latter <br>\nonly have basic Ctrl-C, and it actually works routinely, which is a big <br>\nstep forwards to the historic perspective.</p>\n<p>If Ctrl-C does <em>not</em> work somewhere, it is actually an issue that needs to <br>\nbe addressed.</p>\n<blockquote>\n<ul>\n<li>Odd behaviour when focus lays in output buffer or any other panel:<br>\n  Cursor movement and entering newlines still goes to the text area, but<br>\n  other keyboard input goes to the panel (and may or may not be<br>\n  interpreted there). The only indication for this is a slightly changed<br>\n  color of the cursor in the main window.</li>\n</ul>\n</blockquote>\n<p>This belongs to normal jEdit policies.  In Isabelle/jEdit for the coming <br>\nrelease I added the faint cursor to emphasize that -- normally it would be <br>\njust absent.</p>\n<blockquote>\n<ul>\n<li>No indentation feature. It is hard to keep track of big proofs and<br>\n  indent them correctly, in particular as code-folding does not work<br>\n  reliably.</li>\n</ul>\n<p>In PG, there was a nice auto-indentation feature that worked reliable <br>\nfor (almost) all cases.</p>\n</blockquote>\n<p>That is indeed a notable omission.  In 1998, I added indentation to PG 2.x <br>\nquite early, and earned the name \"The indentation Man\" in the inner circle <br>\nof PG developers.  In Isabelle/jEdit the lack of it has become a running <br>\ngag over the years: it needs to come one day, but so far I just wanted to <br>\nevade the wrath of users when the Prover IDE suddenly makes <em>standard</em> <br>\nindentation of Isar text by default.</p>\n<blockquote>\n<ul>\n<li>When developing proofs:<br>\n The output window displays the current position<br>\n by default ... if you are typing a new command, it usually displays<br>\n \"Syntax error\".<br>\n However, while typing your next method/isar step, you usually want to<br>\n see the current goal state, not a the completely useless information<br>\n \"syntax error\".</li>\n</ul>\n<p>In PG, the output was not updated before you explicitely processed<br>\n the command. Maybe, this can be simulated by turning auto-update off<br>\n and bind update to a convenient shortcut.</p>\n</blockquote>\n<p>Nothing new about this observation.  It belongs to general mismatch of <br>\nTTY/PG mechanics wrt. the document-oriented model.  Note that you can also <br>\nuse the Query panel to print proof states on demand and only on demand.</p>\n<p>Makarius</p>",
        "id": 294285706,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660921784
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nWhy is that an issue?  The language context switches symbols on for ML <br>\nstrings and comments, since both might use them.</p>\n<p>The examples shown here are about embedded ML code, which is not really <br>\nthe normal use of strings.</p>\n<p>In general, the \"guess what I mean\" functionality of the system will <br>\noccasionally guess wrong.  It is sometimes hard to get the defaults right, <br>\nbut so far I don't see an indication to change them in this case.</p>\n<p>Makarius</p>",
        "id": 294285723,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660921790
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nThat is an interesting boundary case, but it is the same in <br>\nIsabelle2013-2 an no regression.  It remains to be seen if it is an actual <br>\nproblem.</p>\n<p>The invocation of error \"\" is the same as raise ERROR \"\", which makes the <br>\nML code fail and the Isar toplevel wrapper print the exeptions.  The error <br>\nmessage is empty, which means it is vacous according to ancient Isabelle <br>\ntraditions, which hold until today.  The effect was not visible in the old <br>\nTTY times, because that adds a prefix of \"*** \" by default. Note that <br>\nthere are other situations where ML failure might lead to no error output, <br>\nnotably involving Exn.Interrupt.</p>\n<p>Such non-printing exceptions should not show up under normal circumstances <br>\n-- they indicate a programming mistake somewhere.</p>\n<p>The \"implementation\" manual explains the difference of user ERROR vs. <br>\nsystem Fail exceptions explicitly. The error function / ERROR exception <br>\nalways had the implicit assumption that messages are non-empty, as a <br>\nproper human-readable message.</p>\n<p>For your application of a meaningless ad-hoc failure, you could raise<br>\nFail \"\" or even raise Match (which are both printed as usual).  The <br>\n\"undefined\" function also does the latter.</p>\n<p>Makarius</p>",
        "id": 294285736,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660921796
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nWe need to keep an eye (or more) on this.  I've seen myself a situation <br>\nsome weeks ago were some ML_file was somehow out of sync.</p>\n<p>Makarius</p>",
        "id": 294285781,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660921802
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nOn Wed, 30 Jul 2014, Lars Noschinski wrote:</p>\n<blockquote>\n<p>BTW: I always use(d) \"error \"\"\" the way one uses \"undefined\" in Haskell.<br>\nThe following construct (which Makarius showed me at ITP) is a bit nicer<br>\n(you get a trace and can jump to the location of the error), but<br>\nrequires a few lines of initial setup:</p>\n<p>signature UTIL = sig<br>\n exception Undefined<br>\n val setup : theory -&gt; theory<br>\nend</p>\n<p>structure Util : UTIL = struct</p>\n<p>exception Undefined</p>\n<p>val setup =<br>\n ML_Antiquotation.inline @{binding undef} (Scan.succeed \"raise<br>\nUtil.Undefined\")<br>\n #&gt; ML_Antiquotation.inline @{binding fundef} (Scan.succeed \"fn _ =&gt;<br>\nraise Util.Undefined\")</p>\n<p>end</p>\n</blockquote>\n<p>After that ITP session, I recalled the more basic \"raise Match\" idiom, but <br>\ncould not tell you about it.  That is sufficiently short to be used <br>\nliterally.</p>\n<blockquote>\n<p>I assume there is no easy way to make Isabelle/ML accept ⊥ instead of <br>\n@{undef}?</p>\n</blockquote>\n<p>That is the old questions how much of actual Standard ML we have in <br>\nIsabelle/ML.  There is still the claim that there is no fundamental <br>\ndifference, apart from antiquotations, although many delicate details have <br>\naccumulated over the years.</p>\n<p>In the past, people have occasionally proposed actual syntactic <br>\nvariations, like an actual arrow for fun/fn/case =&gt; like in Isabelle/HOL <br>\nnotation, but I always tried to keep the divergence from actual SML in <br>\ncheck.</p>\n<p>Technically, the token language could be \"embraced and extended\" further, <br>\nbut I think fringe languages like ML should stay as faithful to their own <br>\nstandards as possible.  BTW, with symbols inside ML, the question of <br>\nlanguage context will show up again: You would probably expect completion <br>\nfor \\&lt;bottom&gt;, but not for =&gt;.</p>\n<p>Makarius</p>",
        "id": 294285811,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660921808
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nOn Wed, 30 Jul 2014, Peter Lammich wrote:</p>\n<blockquote>\n<p>The sidekick panel is supposed to show an overview of the theory.<br>\nAt the top-level of the hierarchy, you can see the first lines of lemma,<br>\ndefinition, etc commands, which may or may not contain useful<br>\ninformation. In the worst case, you just see \"lemma\" or \"definition\".</p>\n<p>It is even worse if you look under a lemma command. This looks like:<br>\n+lemma<br>\n|- using<br>\n|- case<br>\n|- proof<br>\n|- apply<br>\n|- apply<br>\n|- done<br>\n|- qed</p>\n<p>i.e., almost completely useless information.</p>\n</blockquote>\n<p>The enumeration of the commands as \"sections\" is indeed a bit pointless.</p>\n<p>The main use of Sidekick / isabelle is for document structure, with <br>\nchapter / section / subsection outline etc.  When writing Isabelle <br>\ndocumentation, papers, slides etc. I use that routinely to keep an <br>\noverview.</p>\n<p>More logical structure could be done in many ways, I have this on my list <br>\nfor several years already to be revisited eventually.</p>\n<blockquote>\n<p>The information that might be useful, i.e. the name and the proposition <br>\nof the lemma, is displayed nowhere!</p>\n</blockquote>\n<p>Depends how you write your source text.  jEdit folds and Sidekick trees <br>\nassume that the first line provides the main information.  This is also <br>\nthe reason why I write definitions and theorem statements these days a bit <br>\ndifferently than in the past, when Proof General was still there.</p>\n<p>Of course, one could replace SideKick by a quite different Preview panel <br>\nfor the proof document with its relevant structural information, even <br>\nproof state output according to certain policies of incremental editing of <br>\nsub-proofs, not scripts. That is just speculative at the moment -- too <br>\nmany marginal technical problems still in the way of bigger steps <br>\nforwards.</p>\n<p>Makarius</p>",
        "id": 294285833,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660921815
    },
    {
        "content": "<p>From: Lars Noschinski &lt;<a href=\"mailto:noschinl@in.tum.de\">noschinl@in.tum.de</a>&gt;<br>\nOn 30.07.2014 21:53, Makarius wrote:</p>\n<blockquote>\n<p>What do you mean by \"warnings are omnipresent in Isabelle\"?  The<br>\nprover IDE shows them more prominently than in the TTY past, but that<br>\ncould be taken as motivation to remove the reasons for warnings.  Not<br>\nall such spots are bad, but an avarage theory normally has only few<br>\nwarnings.<br>\nOften, the \"Ignoring duplicate rewrite rule/intro/...\" warnings get<br>\nannoying, as they are not always meaningful (for example, overwriting<br>\nintro by intro! triggers a warning). In particular, in certain<br>\nlocale-heavy theories (HOL-Algebra comes to mind), interpreting (or<br>\nopening) a locale gives you a number of these warning and there is not<br>\nalways a (nice) way around them (I'd even claim that these warnings are<br>\nmostly vacuous for theory interpretations, but this is another topic).</p>\n</blockquote>\n<p>I had some theories where these warnings were common enough to obscure<br>\nthe real ones.</p>\n<blockquote>\n<p>Nothing new about this observation.  It belongs to general mismatch of<br>\nTTY/PG mechanics wrt. the document-oriented model.  Note that you can<br>\nalso use the Query panel to print proof states on demand and only on<br>\ndemand.<br>\nOn the topic of the query panel: Some time in the future, I'd like to<br>\nsee the equivalent of the jEdit action bar (or, to phrase it<br>\ndifferently, a \"general\" query panel)  for Isabelle, where I enter an<br>\narbitrary (diagnostic) command and get the output in the panel.</p>\n</blockquote>\n<p>BTW: I just discovered that symbol completion works now in the<br>\ntext-boxes in the panels, very nice!</p>\n<p>-- Lars</p>",
        "id": 294285991,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660921871
    },
    {
        "content": "<p>From: Peter Lammich &lt;<a href=\"mailto:lammich@in.tum.de\">lammich@in.tum.de</a>&gt;</p>\n<blockquote>\n<p>What do you mean by \"warnings are omnipresent in Isabelle\"?  The prover <br>\nIDE shows them more prominently than in the TTY past, but that could be <br>\ntaken as motivation to remove the reasons for warnings.  Not all such <br>\nspots are bad, but an avarage theory normally has only few warnings.</p>\n</blockquote>\n<p>I mean that there are many warnings in my theories, usually from the<br>\nsimplifier/classical reasoner that inform me that I have added rules<br>\nthat were already present in the simpset/claset (including the spurious<br>\nwarning when using intro! for an [intro] - rule). </p>\n<p>Thus, in my case, it is difficult to write theories without warnings, or<br>\nto manually check every single warning whether it is bad (garbage in the<br>\ntheory) or not (just some spurious simplifier warning). </p>\n<p>The surprise will probably come in batch-build mode, as this will be the<br>\ntime when the garbage will make problems. </p>\n<p>I'm already looking forward to the tutorials of the semantics-lecture,<br>\nwhere students will definitely hand in lots of unfinished lemmas, many<br>\nof them convinced they actually have proven it ...<br>\nIn PG, or even in older isabelle/jedits, I could just give them the rule<br>\nof thumb: Your theory must not contain errors, sorrys, or oops. </p>\n<p>Also, I will have hard times checking the submissions, as I have to<br>\nmanually check every warning to see wether the proof is actually<br>\nclosed ...</p>\n<blockquote>\n<blockquote>\n<ul>\n<li>In the output buffer, the standard Ctrl-Ins for \"copy\" does not work,<br>\nwhile it works in the main text area. Can these shortcuts be configured<br>\nseparately? Or do I have to live with Ctrl-C?</li>\n</ul>\n</blockquote>\n<p>I did not know about Ctrl-Ins yet.  What you observe here is merely the <br>\nknown and documented difference of the main jEdit text area with its <br>\nactions and shortscuts vs. regular Java Swing GUI components.  The latter <br>\nonly have basic Ctrl-C, and it actually works routinely, which is a big <br>\nstep forwards to the historic perspective.</p>\n<p>If Ctrl-C does <em>not</em> work somewhere, it is actually an issue that needs to <br>\nbe addressed.</p>\n</blockquote>\n<p>Looks like I have to lower my expectations to modern user interfaces.<br>\nOne of these expectations is full configurability, not forcing the user<br>\nto some fixed shortcuts that, depending on typing habits, may or may not<br>\nbe convenient. Btw: the \"old-fashioned\" \"ancient\" emacs is fully<br>\nconfigurably in the above sense!</p>\n<blockquote>\n<blockquote>\n<ul>\n<li>Odd behaviour when focus lays in output buffer or any other panel:</li>\n</ul>\n</blockquote>\n</blockquote>\n<blockquote>\n<p>This belongs to normal jEdit policies.  In Isabelle/jEdit for the coming <br>\nrelease I added the faint cursor to emphasize that -- normally it would be <br>\njust absent.</p>\n</blockquote>\n<p>Ok, maybe its a jEdit feature. Personally, I find it very odd and I have<br>\nhard times getting used to it: Whenever I used a query/sledgehammer<br>\npanel, I regularly forget to click into the text-area before typing ...</p>\n<blockquote>\n<blockquote>\n<p>In PG, there was a nice auto-indentation feature that worked reliable <br>\nfor (almost) all cases.</p>\n</blockquote>\n<p>That is indeed a notable omission.  In 1998, I added indentation to PG 2.x <br>\nquite early, and earned the name \"The indentation Man\" in the inner circle <br>\nof PG developers.  </p>\n</blockquote>\n<p>It was a very useful feature, and I'm really missing it. As code-folding<br>\nalso does not work, there is currently no feature that assists in<br>\nkeeping track of the structure of big developments.</p>\n<blockquote>\n<blockquote>\n<ul>\n<li>When developing proofs:<br>\n The output window displays the current position<br>\n by default ... if you are typing a new command, it usually displays<br>\n \"Syntax error\".<br>\n However, while typing your next method/isar step, you usually want to<br>\n see the current goal state, not a the completely useless information<br>\n \"syntax error\".</li>\n</ul>\n<p>In PG, the output was not updated before you explicitely processed<br>\n the command. Maybe, this can be simulated by turning auto-update off<br>\n and bind update to a convenient shortcut.</p>\n</blockquote>\n<p>Nothing new about this observation.  It belongs to general mismatch of <br>\nTTY/PG mechanics wrt. the document-oriented model.  Note that you can also <br>\nuse the Query panel to print proof states on demand and only on demand.</p>\n</blockquote>\n<p>Let's hope I can bind these thing to some shortcuts ...</p>",
        "id": 294286005,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660921876
    },
    {
        "content": "<p>From: Peter Lammich &lt;<a href=\"mailto:lammich@in.tum.de\">lammich@in.tum.de</a>&gt;<br>\nThe question is \"why are these errors/interrupts not visible?\" <br>\nAs discussed earlier on this list, they make false theorems look as if<br>\nproven, when the proof tactics contain an programming error (or fail due<br>\nto a bug in the parallel proof scheduling). This behaviour is contrary<br>\nto the spirit of LCF-provers. Moreover, if those things are programming<br>\nmistakes and should not show up under normal circumstances anyway, there<br>\nis no point in not highlighting them as an error.</p>",
        "id": 294286024,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660921882
    },
    {
        "content": "<p>From: Peter Lammich &lt;<a href=\"mailto:lammich@in.tum.de\">lammich@in.tum.de</a>&gt;<br>\nMy main restriction when writing proof text comes from the document<br>\ngeneration to latex, where I want a readable layout. And this forces me<br>\nto have no lines longer than roughly 80 characters. As I have many<br>\nlonger lemma statements, I need to format them manually into multiple<br>\nlines.</p>",
        "id": 294286046,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660921894
    },
    {
        "content": "<p>From: Peter Lammich &lt;<a href=\"mailto:lammich@in.tum.de\">lammich@in.tum.de</a>&gt;<br>\nI think this was called \"issue prover command\" in PG (\"Ctrl-c v\" in<br>\nstandard config), and I used it from time to time. It only worked for<br>\ncommands that did not change the prover state, e.g., for all diagnostic<br>\ncommands. </p>\n<p>In jEdit this has been replaced by the more heavyweight query-panels,<br>\nthat only work for a small subset of the diagnostic commands, and<br>\nextending them to new commands is quite a big effort. So I would also<br>\nlike to have this lightweight low-level possibility of issuing<br>\ndiagnostic-commands, in addition to the heavyweight, high-level query<br>\npanels.</p>",
        "id": 294286058,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660921900
    },
    {
        "content": "<p>From: Lars Noschinski &lt;<a href=\"mailto:noschinl@in.tum.de\">noschinl@in.tum.de</a>&gt;<br>\nTake it as a data point for the long-term considerations about symbol<br>\ncompletion.</p>\n<p>But there is also something not totally smooth outside of strings:<br>\nYesterday, I occasionally had symbols complete in normal ML-code<br>\n(outside of strings; in a ML-block in a theory file). Typically, this<br>\nseemed to occur when I was typing pretty fast and changing the structure<br>\nof the code. It seemed unrelated to string literals.</p>\n<p>One way to trigger this is placing the cursor directly after the closing<br>\n} of an antiquotation and typing a symbol fast. I can even type a few<br>\nspaces before typing the symbol and it will still get completed.</p>\n<p>-- Lars</p>",
        "id": 294286075,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660921906
    },
    {
        "content": "<p>From: Lars Hupel &lt;<a href=\"mailto:hupel@in.tum.de\">hupel@in.tum.de</a>&gt;<br>\nThis would also greatly reduce the number of stray \"thm\" commands in our<br>\ntheory sources (as in<br>\n&lt;<a href=\"https://lists.cam.ac.uk/pipermail/cl-isabelle-users/2014-July/msg00239.html\">https://lists.cam.ac.uk/pipermail/cl-isabelle-users/2014-July/msg00239.html</a>&gt;)<br>\n:-)</p>",
        "id": 294286092,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660921913
    },
    {
        "content": "<p>From: Lars Noschinski &lt;<a href=\"mailto:noschinl@in.tum.de\">noschinl@in.tum.de</a>&gt;<br>\nAn issue with symlinks:</p>\n<p>Given file a file \"/home/lars/projekte/test.ML\" and symlink<br>\n\"/home/lars/P\" to \"projekte\" and a theory</p>\n<p>theory Scratch imports Pure<br>\nbegin</p>\n<p>ML_file \"/home/lars/P/test.ML\"</p>\n<p>end</p>\n<p>Then a click on the file name will open the correct file, but without<br>\nany annotations.</p>",
        "id": 294287845,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660922447
    },
    {
        "content": "<p>From: Lars Noschinski &lt;<a href=\"mailto:noschinl@in.tum.de\">noschinl@in.tum.de</a>&gt;<br>\nA type error in a ML_file disables ctrl+click and hovering for type<br>\nannotations. Errors and warnings are still present. This behaviour does<br>\nnot occur in a ML block.</p>\n<p>(Don't know whether this is a regression).</p>",
        "id": 294288050,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660922514
    },
    {
        "content": "<p>From: Lars Noschinski &lt;<a href=\"mailto:noschinl@in.tum.de\">noschinl@in.tum.de</a>&gt;<br>\nAn issue with the precedence of warnings and errors:</p>\n<p>Under certain circumstances, if a method emits a warning and the apply<br>\nfails (with an error), the line is only marked as a warning in the<br>\ntheories panel and the right side bar.</p>\n<p>Reconstruct with:</p>\n<p>theory Scratch imports Main begin</p>\n<p>method_setup foo = ‹<br>\n  Scan.succeed (fn ctxt =&gt; SIMPLE_METHOD' (warning \"warning\"; tracing<br>\n\"trace\"; K no_tac))<br>\n›</p>\n<p>lemma P apply foo</p>\n<p>end</p>\n<p>-- Lars</p>",
        "id": 294289102,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660922852
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nOn Thu, 31 Jul 2014, Peter Lammich wrote:</p>\n<blockquote>\n<blockquote>\n<p>The invocation of error \"\" is the same as raise ERROR \"\", which makes the<br>\nML code fail and the Isar toplevel wrapper print the exeptions.  The error<br>\nmessage is empty, which means it is vacous according to ancient Isabelle<br>\ntraditions, which hold until today.  The effect was not visible in the old<br>\nTTY times, because that adds a prefix of \"*** \" by default. Note that<br>\nthere are other situations where ML failure might lead to no error output,<br>\nnotably involving Exn.Interrupt.</p>\n<p>Such non-printing exceptions should not show up under normal circumstances<br>\n-- they indicate a programming mistake somewhere.</p>\n</blockquote>\n<p>The question is \"why are these errors/interrupts not visible?\"</p>\n</blockquote>\n<p>Interrupts are not program errors, but physical events.  The <br>\n\"implementation\" manual explains the difference in the important section <br>\n0.5, with clear guidelines how user-space tools need to work with <br>\ninterrupts, such that there are passed-through the code unhindered.  The <br>\nsystem uses interrupts internally in various ways to manage executions, <br>\nbut for this to work the user-space code needs to be done right.</p>\n<p>ERROR \"\" used to be a semantic ML programming error until yesterday, when <br>\nI incorporated the concept into the \"user error\" notion to simplify life. <br>\nRegular Isabelle sources never suffered from that mistake in the past <br>\ndecades to the best of my knowledge, but there is no problem here to make <br>\nthe system more resiliant against improper use and declare it proper.  So <br>\nin the next Isabelle2014-RC1 the error message will be \"Error\", both in ML <br>\nand Scala.</p>\n<p>Nonetheless, it is important that Isabelle/ML users read the <br>\nimplementation manual carefully, and more than just once in a life-time.</p>\n<blockquote>\n<p>As discussed earlier on this list, they make false theorems look as if <br>\nproven, when the proof tactics contain an programming error (or fail due <br>\nto a bug in the parallel proof scheduling). This behaviour is contrary <br>\nto the spirit of LCF-provers.</p>\n</blockquote>\n<p>The LCF approach in its strict sense is based on sucessully produced <br>\nvalues of some abstract datatype of theorems, not the absence of <br>\nuser-level errors.</p>\n<p>There is a general problem to ensure that errors actually reach the <br>\nend-user -- despite continuous efforts to make this as robust as feasible, <br>\nthere are routinely situations where messages get dropped, e.g. by odd <br>\nJava/Swing GUI components.</p>\n<p>This inherent unreliability of prover interfaces is well-known, it was the <br>\nsame in the old days of Proof General.</p>\n<p>The only official authentic check is a batch build.</p>\n<p>Makarius</p>",
        "id": 294289945,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660923121
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nSemantic completion (i.e. the language context) works via the asynchronous <br>\ndocument model, so typing fast means the physical editor state and the <br>\ndocument markup range may disagree.</p>\n<p>These delays are system options that may be adjusted as usual: most <br>\nnotably editor_input_delay and editor_output_delay.  Maybe you want to try <br>\nthese by a factor of 5 or 10 faster -- results also depend on the amount <br>\nof CPU cycles you can spend on interactive document processing and GUI <br>\nrendering.</p>\n<p>Makarius</p>",
        "id": 294290425,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660923263
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nThat is a consequence of the redirection of ML reports for external files, <br>\nwhich reuses the asynchronous print infrastructure that I had presented at <br>\nITP2014 in order to swap-in and swap-out massive IDE markups on demand.</p>\n<p>By making the print function non-strict wrt. the main eval phase, it can <br>\nreport static results even in the presence of failure: see d5b0fa6f1f7a, <br>\nor the next release candidate.</p>\n<p>Makarius</p>",
        "id": 294290862,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660923398
    },
    {
        "content": "<p>From: Richard Molitor &lt;<a href=\"mailto:gattschardo@googlemail.com\">gattschardo@googlemail.com</a>&gt;<br>\nAnd yet another issue: A method executing</p>\n<p>error \"\"</p>\n<p>produces an error marker in the right sidebar. However, the associated<br>\napply command does not get underlined in red and the error marker in the<br>\nleft sidebar is missing.</p>\n<p>Reproduce with:</p>\n<p>theory Scratch imports Pure begin</p>\n<p>lemma \"PROP P\"<br>\n  apply (tactic {* error \"\" *})<br>\n  oops</p>\n<p>end</p>",
        "id": 294291252,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660923534
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nThe prover will open the wrong file, i.e. the one that is stored on the <br>\nfile-system, instead of taking the buffer content from the editor as <br>\nexpected.  After some editing of the buffer, the divergence will become <br>\napparant.  The lack of detailed markup is a consequence of not going <br>\nthrough PIDE.</p>\n<p>The superficial reason for that is a small mistake how PIDE document node <br>\nnames are produced, with a disagreement about canonical forms due to <br>\nsymblinks.  This will work in the next release candidate.</p>\n<p>The deeper problem is a confusion about responsibilities: the prover still <br>\naccesses the file-system as a fall-back, when the Prover IDE did not do <br>\nthat.  Thus mistakes in providing file content are silently turned into <br>\nunintended behaviour.</p>\n<p>As explained earlier, this mixed responsibility is there to allow <br>\nIsabelle/HOL itself to be edited interactively on a small mobile device of <br>\nonly 4--8 GB.</p>\n<p>Makarius</p>",
        "id": 294291452,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660923601
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nIt should we OK in the right side bar -- according to <br>\n<a href=\"http://www.mail-archive.com/isabelle-dev@mailbroy.informatik.tu-muenchen.de/msg05328.html\">http://www.mail-archive.com/isabelle-dev@mailbroy.informatik.tu-muenchen.de/msg05328.html</a> <br>\nfrom May 2014. Back then I somehow forgot to apply the analogous change to <br>\nthe theories panel as well.</p>\n<p>My comment from that thread on isabelle-dev about the difficulty to pin <br>\ndown the notion of \"command status\" still applies: the Prover IDE merely <br>\nvisualizes certain aspects of very rich information; sometimes it might <br>\ncome out in a misleading way.</p>\n<p>Makarius</p>",
        "id": 294291882,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660923723
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nOn Thu, 31 Jul 2014, Peter Lammich wrote:</p>\n<blockquote>\n<blockquote>\n<p>On the topic of the query panel: Some time in the future, I'd like to<br>\nsee the equivalent of the jEdit action bar (or, to phrase it<br>\ndifferently, a \"general\" query panel)  for Isabelle, where I enter an<br>\narbitrary (diagnostic) command and get the output in the panel.</p>\n</blockquote>\n<p>I think this was called \"issue prover command\" in PG (\"Ctrl-c v\" in <br>\nstandard config), and I used it from time to time. It only worked for <br>\ncommands that did not change the prover state, e.g., for all diagnostic <br>\ncommands.</p>\n</blockquote>\n<p>Such a mini command-line within Query is an obvious extension, but there <br>\nare also conceptual differences.  There is no need to restrict it to <br>\ndiagnostic command, because it is all stateless anyway.  There is a need <br>\nto wrap up the hypothetical \"script\" a bit differently, to avoid spilling <br>\nof messages (wranings etc.) in the wrong place.  This is why it is not <br>\ndone yet -- the panel is new in the coming release anyway.</p>\n<blockquote>\n<p>In jEdit this has been replaced by the more heavyweight query-panels</p>\n</blockquote>\n<p>Again, and hopefully the last time, a quote from the Isabelle/jEdit <br>\nmanual:</p>\n<p>\\item [jEdit] is a sophisticated text editor implemented in Java</p>\n<p>\\item [Isabelle/jEdit] is the main example application of the PIDE<br>\n   framework and the default user-interface for Isabelle</p>\n<p>If you need a short name for the Prover IDE, you can say \"PIDE\" -- it is <br>\neven easier to pronounce (and spell) than \"jEdit\".  Yet another <br>\nalternative is to say just \"Isabelle\", according to the toplevel <br>\napplication name.</p>\n<p>Concerning the perceived heavyweightedness of the query panel: it is <br>\nactually relative simple, taking the whole conceptual complexity of <br>\ntimeless/stateless asynchronous parallel document processing into account.</p>\n<p>In contrast, issuing a single command on the spot is only simple under the <br>\nassumption of an existing TTY loop, which has its own complexities.  Once <br>\nthe TTY loop can be removed from Isabelle, great weights will disappear <br>\nfrom the overall system implementation.</p>\n<blockquote>\n<p>that only work for a small subset of the diagnostic commands, and <br>\nextending them to new commands is quite a big effort.</p>\n</blockquote>\n<p>The query panel is based on a general concept of query operation, which <br>\nare more flexible than old-style diagnostic commands, but also simpler.</p>\n<p>The \"Print Context\" tab in the Query panel is a restricted application of <br>\nthe general principle.  The following one-liner installs a new item to be <br>\nprinted there (without taking any arguments apart from the implicit <br>\nstate):</p>\n<p>ML ‹<br>\n     Print_Operation.register \"test\" \"test output\" (fn st =&gt; [Pretty.str \"test\"])<br>\n   ›</p>\n<p>After emitting that ML snippet in PIDE, the Query panel needs to be <br>\nre-docked and will then show another checkbox for \"test\" than can be <br>\nactivated on demand.</p>\n<p>Makarius</p>",
        "id": 294291914,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660923736
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nKeeping lines short (80-100 chars for source, 60-70 chars for LaTeX <br>\ndocuments) is important, but it is still possible to put relevant <br>\ninformation into the head-line of a fold or sidekick item, e.g. like this:</p>\n<p>lemma name: short_statement<br>\n     &lt;proof&gt;</p>\n<p>lemma name:<br>\n     long_statement<br>\n     &lt;proof&gt;</p>\n<p>definition name :: type_constraints<br>\n     where short_definition</p>\n<p>definition name :: type_constraints<br>\n     where<br>\n       short_definition</p>\n<p>Proper support for folds is still missing, but the general side-conditions <br>\nfor it are already given in jEdit.</p>\n<p>Makarius</p>",
        "id": 294291936,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660923744
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nOn Thu, 31 Jul 2014, Lars Noschinski wrote:</p>\n<blockquote>\n<p>Often, the \"Ignoring duplicate rewrite rule/intro/...\" warnings get <br>\nannoying, as they are not always meaningful (for example, overwriting <br>\nintro by intro! triggers a warning). In particular, in certain <br>\nlocale-heavy theories (HOL-Algebra comes to mind), interpreting (or <br>\nopening) a locale gives you a number of these warning and there is not <br>\nalways a (nice) way around them (I'd even claim that these warnings are <br>\nmostly vacuous for theory interpretations, but this is another topic).</p>\n</blockquote>\n<p>This touches general questions about these particular historic warnings.<br>\nMany other tools have already become smarter concerning relevance of <br>\nmessages.  It is a long term effort to sort this out further.</p>\n<p>The is already Context_Position.is_visible for tools to check if the <br>\nsituation is right for warnings.  The system does not always maintain that <br>\nproperly though, and many tools ignore it.</p>\n<blockquote>\n<p>BTW: I just discovered that symbol completion works now in the <br>\ntext-boxes in the panels, very nice!</p>\n</blockquote>\n<p>Did this behaviour change wrt. Isabelle2013-2?  It should be mostly the <br>\nsame as before.</p>\n<p>Makarius</p>",
        "id": 294291941,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660923748
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nOn Thu, 31 Jul 2014, Peter Lammich wrote:</p>\n<blockquote>\n<p>Thus, in my case, it is difficult to write theories without warnings, or <br>\nto manually check every single warning whether it is bad (garbage in the <br>\ntheory) or not (just some spurious simplifier warning).</p>\n<p>The surprise will probably come in batch-build mode, as this will be the <br>\ntime when the garbage will make problems.</p>\n<p>I'm already looking forward to the tutorials of the semantics-lecture,<br>\nwhere students will definitely hand in lots of unfinished lemmas, many<br>\nof them convinced they actually have proven it ...<br>\nIn PG, or even in older isabelle/jedits, I could just give them the rule<br>\nof thumb: Your theory must not contain errors, sorrys, or oops.</p>\n<p>Also, I will have hard times checking the submissions, as I have to <br>\nmanually check every warning to see wether the proof is actually closed <br>\n...</p>\n</blockquote>\n<p>First note that I have changed the regular warning to an error_message in <br>\n<a href=\"https://bitbucket.org/isabelle_project/isabelle-release/commits/ae3eac418c5f\">https://bitbucket.org/isabelle_project/isabelle-release/commits/ae3eac418c5f</a> <br>\nso it will be in the text release candidate.  Hopefully people will <br>\nactually test all that has accumulated.</p>\n<p>In general, we have always had the following situation:</p>\n<p>* Authentic checking of theories requires a batch build.  It was never<br>\n     easier than today to do that (see the \"system\" manual).</p>\n<p>People sometimes \"forget\" to make a proper ROOT for their stuff, or<br>\n     don't know how it is done or that it is important.  Whenever someone<br>\n     shows me some theories that are not just small snippets, my first<br>\n     reflex is to do the missing \"isabelle mkroot\" and then the batch<br>\n     build to see if they are correct.</p>\n<p>* Proof General in the past and Prover IDE front-ends in the present are<br>\n     only an approximation, with a lot of conveniences, but without the<br>\n     full detail of checking.</p>\n<p>Proof General even had quick_and_dirty on by default over most of its<br>\n     life time, until that broke by accident in the 3.x to 4.x transition.</p>\n<p>In situations where proper builds are too much for small experiments, it <br>\nis possible to use the new \"isabelle console\" together with plain use_thy <br>\nin raw ML (which is not Isabelle/ML); see also the \"system\" manual. Note <br>\nthat the old \"isabelle tty\" is already removed, although there is still <br>\n\"Isar.main()\" to invoke the old toplevel.</p>\n<blockquote>\n<blockquote>\n<p>If Ctrl-C does <em>not</em> work somewhere, it is actually an issue that needs <br>\nto be addressed.</p>\n</blockquote>\n<p>Looks like I have to lower my expectations to modern user interfaces. <br>\nOne of these expectations is full configurability, not forcing the user <br>\nto some fixed shortcuts that, depending on typing habits, may or may not <br>\nbe convenient.</p>\n</blockquote>\n<p>There is nothing modern about Java/AWT/Swing -- it is in fact legacy for <br>\nmany years -- like most other GUI frameworks.  Swing does have a lot of <br>\nconfigurability, but a bit too much for my taste, and I don't really <br>\nunderstand most of it.  jEdit has its own Swing add-ons and bypasses to <br>\nprovide a quite sane environment.</p>\n<p>For Isabelle/jEdit, I've spent extra care from the start to make <br>\ncopy-paste work almost universally.  I remember Proof General / Emacs as <br>\nsomething were this rarely worked on all platforms and all versions; I am <br>\nsurprised that it is now perceived differently.</p>\n<p>When Isabelle/jEdit was young and fresh in 2008/2009, there was a local <br>\npresentation of it at TUM.  Someone asked: \"What will be its main <br>\nfeatures?\"  My spontaneous response: \"reliable copy-paste\".</p>\n<blockquote>\n<p>It was a very useful feature, and I'm really missing it. As code-folding <br>\nalso does not work, there is currently no feature that assists in <br>\nkeeping track of the structure of big developments.</p>\n</blockquote>\n<p>jEdit also has explicit folds with funny {{{ }}} notation.</p>\n<p>Makarius</p>",
        "id": 294291958,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660923754
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nI have completed two rounds through the new auxiliary file management in <br>\nthe Prover IDE, and robustified it wrt. various fine points.  When the <br>\nnext release candidate is published, please keep an extra eye on that <br>\naspect.</p>\n<p>Makarius</p>",
        "id": 294292004,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660923766
    },
    {
        "content": "<p>From: Lars Noschinski &lt;<a href=\"mailto:noschinl@in.tum.de\">noschinl@in.tum.de</a>&gt;<br>\nI'm pretty sure, my original case had it wrong on the right side bar,<br>\ntoo. But indeed, my test case doesn't exhibit this behaviour and I<br>\ncannot reproduce what I rememeber to have seen. I'll keep an eye on this.</p>",
        "id": 294292043,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660923778
    },
    {
        "content": "<p>From: Lars Noschinski &lt;<a href=\"mailto:noschinl@in.tum.de\">noschinl@in.tum.de</a>&gt;<br>\nWhat I meant is that I can place the cursor directly after the closing<br>\nbrace, wait for an arbitrary amount of time (to give the system time to<br>\nconverge), and still get symbol completion if I type fast at that point<br>\n(see attached video).<br>\n<a href=\"/user_uploads/14278/bxVuE7r2EuHPJo1b085LZsjh/antiquotation-completion.mp4\">antiquotation-completion.mp4</a></p>",
        "id": 294292077,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660923786
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nThat is still within the convergence model sketched here, but there is an <br>\nadditional coincidence: completion sits right in the input event loop. <br>\nWhen you type something there is always an edit-distance, and the language <br>\ncontext of the closing delimiter is stretched into the new space.  Unless <br>\nthere is a completion delay, the semantic information needs to be <br>\nretrieved on the spot, but it can never be accurate.</p>\n<p>You can see the same effect when you insert new material quickly at the <br>\nend of some semantically marked up token (e.g. a free or bound variable). <br>\nIt does not matter so much there, since it is only a transient visual <br>\nglitch.</p>\n<p>In the next round of completion refinement (not for this release), one <br>\ncould try to mark only the interior with the specific language context, <br>\nnot the delimiters.</p>\n<p>Makarius</p>",
        "id": 294292294,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660923845
    },
    {
        "content": "<p>From: Lars Noschinski &lt;<a href=\"mailto:noschinl@in.tum.de\">noschinl@in.tum.de</a>&gt;<br>\nWhen writing more then a few lines of code, I prefer a separate<br>\n\"undefined\" value -- \"raise Match\" has a double meaning as telling the<br>\ncompiler not to bother me with warnings about inexhaustive cases.</p>\n<p>-- Lars</p>",
        "id": 294292354,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660923866
    },
    {
        "content": "<p>From: Lars Noschinski &lt;<a href=\"mailto:noschinl@in.tum.de\">noschinl@in.tum.de</a>&gt;<br>\nOn 30.07.2014 22:14, Makarius wrote:</p>\n<blockquote>\n<p>The invocation of error \"\" is the same as raise ERROR \"\", which makes<br>\nthe ML code fail and the Isar toplevel wrapper print the exeptions. <br>\nThe error message is empty, which means it is vacous according to<br>\nancient Isabelle traditions, which hold until today.  The effect was<br>\nnot visible in the old TTY times, because that adds a prefix of \"*** \"<br>\nby default. Note that there are other situations where ML failure<br>\nmight lead to no error output, notably involving Exn.Interrupt.</p>\n<p>Such non-printing exceptions should not show up under normal<br>\ncircumstances -- they indicate a programming mistake somewhere.<br>\nThe following is probably not relevant to the 2014 release anymore, but<br>\nfor the sake of completeness:</p>\n</blockquote>\n<p>I encountered such a case yesterday (with 2014-RC2) with a tactic with<br>\nresulted in a non-productive result sequence, i.e. the equivalent of</p>\n<p>ML &lt;<br>\n  fun inf_seq () = Seq.cons 0 (inf_seq ())<br>\n  val nonprod_seq = Seq.filter (K false) (inf_seq ())<br>\n&gt;</p>\n<p>After some looking around, I found that I get a little hint in the Raw<br>\nOutput panel -- if the panel is open while the failing code is executed.<br>\nI wonder whether the raw output panel could accumulate, say, the last 8k<br>\nworth of messages even if it is closed? Also, a \"clear\" button would be<br>\nnice (although closing/reopening works).</p>\n<p>Interestingly, asking for an exception trace (via<br>\n[[ML_exception_trace]]) for this code sends polyml into a another<br>\ndesperate quest for memory: It has been running on my machine a few<br>\nminutes with 4086M VIRT and 3956M RES -- so basically exhausting its<br>\nfull address space -- before giving up:</p>\n<p>Welcome to Isabelle/HOL (Isabelle2014-RC2: August 2014)<br>\n    Warning - Unable to increase stack - interrupting thread</p>\n<p>Warning - Unable to increase stack - interrupting thread</p>\n<p>Warning - Unable to increase stack - interrupting thread</p>\n<p>Warning - Unable to increase stack - interrupting thread</p>\n<p>Run out of store - interrupting threads</p>\n<p>Run out of store - interrupting threads</p>\n<p>Failed to recover - exiting</p>\n<p>message_output terminated<br>\n    standard_output terminated<br>\n    standard_error terminated<br>\n    process terminated<br>\n    command_input terminated<br>\n    process_manager terminated<br>\n    Return code: 1</p>\n<p>In these cases I could be useful to get at least at a partial trace<br>\n(which would probably already indicate which functions<br>\nwent into a loop).</p>",
        "id": 294294002,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660923993
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nOn Thu, 7 Aug 2014, Lars Noschinski wrote:</p>\n<blockquote>\n<p>I encountered such a case yesterday (with 2014-RC2) with a tactic with<br>\nresulted in a non-productive result sequence, i.e. the equivalent of</p>\n<p>ML &lt;<br>\n fun inf_seq () = Seq.cons 0 (inf_seq ())<br>\n val nonprod_seq = Seq.filter (K false) (inf_seq ())<br>\n&gt;</p>\n<p>After some looking around, I found that I get a little hint in the Raw<br>\nOutput panel -- if the panel is open while the failing code is executed.</p>\n</blockquote>\n<p>The above example provokes a <em>soft</em> breakdown of ML user code.  The <br>\nPoly/ML run-time systems maps that to an interrupt, which is not printed <br>\nin PIDE. There are other visual clues that something is wrong with the <br>\ncommand transaction. It is then left as an exercise to find section \"4.2 <br>\nLow-level output\" in the Isabelle/jEdit manual, and connect it <br>\nsemantically to such sitations.</p>\n<blockquote>\n<p>I wonder whether the raw output panel could accumulate, say, the last 8k <br>\nworth of messages even if it is closed?</p>\n</blockquote>\n<p>There is always the question how much technology is built around low-level <br>\nerrors.  They occurr so rarely that an incident can become a big desaster <br>\nif the error handling infrastructure itself gets overloaded.  This could <br>\nlead to spectacular events of \"total failure of existence\", which we've <br>\nhad occasionally had in the past.  (That phrase is from Starship Titanic <br>\ndue to Douglas Adams and Terry Jones, where it is called S.M.E.F. <br>\n\"Spontaneous Massive Existence Failure\".)</p>\n<p>Nonetheless, I have made some changes for the Isabelle2014 code base some <br>\nmonths ago concerning Syslog output -- to have a buffer and a limit on it, <br>\nwith some hope that bombing the front-end is avoided.  So there might be a <br>\nchance to print certain low-level messages on Syslog, instead of raw <br>\noutput, but such experiments are not for this release.</p>\n<blockquote>\n<p>Also, a \"clear\" button would be nice (although closing/reopening works).</p>\n</blockquote>\n<p>The panel is a plain Swing text area, so you can just select all text and <br>\ndeleted it.</p>\n<blockquote>\n<p>Interestingly, asking for an exception trace (via<br>\n[[ML_exception_trace]]) for this code sends polyml into a another<br>\ndesperate quest for memory: It has been running on my machine a few<br>\nminutes with 4086M VIRT and 3956M RES -- so basically exhausting its<br>\nfull address space -- before giving up:</p>\n<p>In these cases I could be useful to get at least at a partial trace <br>\n(which would probably already indicate which functions went into a <br>\nloop).</p>\n</blockquote>\n<p>This looks like a <em>hard</em> breakdown of the ML runtime system.  David <br>\nMatthews is the only one who can say more about it.</p>\n<p>Note that driving the system against a concrete wall routinely causes big <br>\ndamage.  In the past couple of years, David Matthews has managed to move <br>\nconcrete walls many times, but it is a never ending process.  (The JVM is <br>\neven more fragile under low-memory situations.)</p>\n<p>After 32bit address space is left behind -- presumably soon -- such VM <br>\nproblems will go away, and the good old disk-thrashing on swap space will <br>\ncome back.</p>\n<p>Makarius</p>",
        "id": 294294103,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660924036
    },
    {
        "content": "<p>From: David Matthews &lt;<a href=\"mailto:dm@prolingua.co.uk\">dm@prolingua.co.uk</a>&gt;<br>\nI would guess, and it is only a guess since I haven't actually tested <br>\nthis, is that there is an infinite or at least very deep recursion <br>\nthere.  The thread stacks are expanded until the process runs out of <br>\nspace.  The way exception-trace was done changed in Poly/ML 5.5.1. <br>\nException_trace now builds a list of the functions rather than directly <br>\nprinting them to standard output as it used to.  There is a problem, <br>\nthough, if there is no space to build the list.  I don't think there is <br>\na way to limit the size of the stacks (these are the stacks of ML data <br>\nmanaged by the Poly/ML run-time not the C stacks allocated by the <br>\nsystem).  Perhaps there should be.</p>\n<p>David</p>",
        "id": 294294142,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660924055
    },
    {
        "content": "<p>From: Lars Noschinski &lt;<a href=\"mailto:noschinl@in.tum.de\">noschinl@in.tum.de</a>&gt;<br>\nThis is indeed the case, so the the \"soft breakdown\", as Makarius put<br>\nit, is absolutely not surprising. I was mildly surprised when this<br>\nprevented the system from giving my some kind of trace.</p>",
        "id": 294294184,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660924073
    }
]