[
    {
        "content": "<p>From: Burkhart Wolff &lt;<a href=\"mailto:Burkhart.Wolff@lri.fr\">Burkhart.Wolff@lri.fr</a>&gt;<br>\nDear all,</p>\n<p>here are 3 new papers concerning \"Isabelle and Testing/Refinement\":</p>\n<p>[1]  Achim D. Brucker, Burkhart Wolff: On Theorem Prover-based Testing. Accepted the 07-08-2011. In Formal Aspects of Computing (FAOC). DOI: 10.1007/s00165-012-0222-y. Springer, 2012.<br>\n      Abstract: <br>\n      HOL-TestGen is a specification and test case generation environment extending the interactive theorem prover Isabelle/HOL. As such, HOL-TestGen allows for an integrated workflow supporting <br>\n      interactive theorem proving, test case generation, and test data generation. The HOL-TestGen method is two-staged: first, the original formula is partitioned into test cases by transformation into <br>\n      a normal form called test theorem. Second, the test cases are analyzed for ground instances (the test data) satisfying the constraints of the test cases. Particular emphasis is put on the control <br>\n      of explicit test-hypotheses which can be proven over concrete programs. Due to the generality of the underlying framework, our system can be used for black-box unit, sequence, reactive sequence <br>\n      and white-box test scenarios. Although based on particularly clean theoretical foundations, the system can be applied for substantial case-studies (see [2]).</p>\n<p>This reference supersedes all older papers concerning HOL-TestGen.<br>\n       (Like the original Fates Paper or the TAP 2007 paper).<br>\n       Link: <a href=\"http://www.lri.fr/~wolff/papers/journals/brucker.ea-hol-testgen-2008.rev-1.pdf\">http://www.lri.fr/~wolff/papers/journals/brucker.ea-hol-testgen-2008.rev-1.pdf</a></p>\n<p>[2]  Achim D. Brucker, Lukas Brügger, Paul Kearney, and Burkhart Wolff. An approach to modular and testable security models of real-world health-care applications. <br>\n      Proceedings of the ACM Symposium on Access control models and technologies, pages 133-142. ACM, 2011. SACMAT 2011. [ bib ]</p>\n<p>Abstract:<br>\n       We present a generic modular policy modelling framework and instantiate it with a substantial case study for model- based testing of some key security mechanisms of applica- tions and services of the NPfIT. <br>\n       NPfIT, the National Pro- gramme for IT, is a very large-scale development project aiming to modernise the IT infrastructure of the National Health Service (NHS) in England. Consisting of heterogeneous and distributed <br>\n       applications, it is an ideal target for model-based testing techniques of a large system exhibiting critical security features.<br>\n       We model the four information governance principles, com- prising a role-based access control model, as well as policy rules governing the concepts of patient consent, sealed envelopes and legitimate relationships. <br>\n       The model is given in Higher-order Logic (HOL) and processed together with suitable test specifications in the HOL-TestGen system, that generates test sequences according to them. Particular em- phasis is put on the <br>\n       modular description of security policies and their generic combination and its consequences for model-based testing.</p>\n<p>Link: <a href=\"http://www.brucker.ch/bibliography/download/2011/brucker.ea-model-based-2011.pdf\">http://www.brucker.ch/bibliography/download/2011/brucker.ea-model-based-2011.pdf</a></p>\n<p>[3]   Abderrahmane Feliachi, Marie-Claude Gaudel, and Burkhart Wolff. Isabelle/circus: A process specification and verification environment. <br>\n       In VSTTE, volume 7152 of Lecture Notes in Computer Science, pages 243-260, 2012. [ bib ]</p>\n<p>Abstract: TheCircus specification language combines elements for complex data and behavior specifications, using an integration of Z and CSP with a refinement calculus. Its semantics <br>\n       is based on Hoare and He’s unifying theories of programming (UTP). We develop a machine-checked, formal semantics based on a “shallow embedding” of Circus in Isabelle/UTP <br>\n       (our semantic theory of UTP based on Isabelle/HOL). We derive proof rules from this semantics and implement tactic support that finally allows for proofs of refinement for Circus processes <br>\n       (involving both data and behavioral aspects). This proof environment supports a syntax for the semantic definitions which is close to textbook presentations of Circus.</p>\n<p>Link: <a href=\"http://www.lri.fr/~wolff/papers/conf/VSTTE-IsabelleCircus11.pdf\">http://www.lri.fr/~wolff/papers/conf/VSTTE-IsabelleCircus11.pdf</a> </p>\n<p>Enjoy !</p>\n<p>bu</p>",
        "id": 294153804,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660850343
    },
    {
        "content": "<p>From: Thomas Genet &lt;<a href=\"mailto:thomas.genet@irisa.fr\">thomas.genet@irisa.fr</a>&gt;<br>\nDear all,</p>",
        "id": 294153838,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660850353
    },
    {
        "content": "<p>From: Burkhart Wolff &lt;<a href=\"mailto:Burkhart.Wolff@lri.fr\">Burkhart.Wolff@lri.fr</a>&gt;<br>\nAm 15.03.2012 um 13:39 schrieb Thomas Genet:</p>\n<blockquote>\n<p>Dear all,</p>\n<p>Le 14/03/12 18:39, Burkhart Wolff a écrit :</p>\n<blockquote>\n<p>Dear all,</p>\n<p>here are 3 new papers concerning \"Isabelle and Testing/Refinement\":</p>\n</blockquote>\n<p>maybe this is naive question, but how do HOL-testgen behaves w.r.t. quickcheck and nitpick tools of Isabelle/HOL?</p>\n</blockquote>\n<p>HOL-TestGen follows a completely independent symbolic approach to test-case generation (via normalization)<br>\nand test data selection. It has nothing to do with nitpick (essentially: counter-example generation for finitized <br>\ninterpretations of a formula), but uses potentially quickcheck and smt (i.e. Z3) in the test data selection phase.</p>\n<blockquote>\n<p>Is it likely to succeed to find a counterexample where a typical</p>\n<p>quickcheck [tester=narrowing]</p>\n<p>call fails?</p>\n</blockquote>\n<p>That depends from the application domain.<br>\nI can not make any statistical guessing here.<br>\nFor the problems we are mostly using it -<br>\nmodel-based testing in security related domains -<br>\nthere is no hope that the finitized interpretation method<br>\ndoes any good, though.</p>\n<p>bu</p>",
        "id": 294153855,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660850364
    }
]