[
    {
        "content": "<p>From: John Thingstad &lt;<a href=\"mailto:jpthing@online.no\">jpthing@online.no</a>&gt;<br>\n-------- Videresendt melding --------<br>\nThough it is true that we all dream of creating the best possible <br>\nsoftware this goal doesn't always meet real world demands. I suggest you <br>\nread:<br>\n<a href=\"https://www.dreamsongs.com/WorseIsBetter.html\">https://www.dreamsongs.com/WorseIsBetter.html</a></p>\n<p>Also testing is a real alternative to proving and one many software <br>\ncompanies are using today.</p>\n<p>For proving to be as unproblematic as testing you need for it to be <br>\neasier. Observe the following:</p>\n<ol>\n<li>\n<p>Modern languages like Haskell are declarative. So writing a proof is <br>\npointless. Your program IS the specification.</p>\n</li>\n<li>\n<p>So it becomes more like testing. You write assumptions about your <br>\nspecification and prove that they hold.</p>\n</li>\n</ol>\n<p>Modern proof systems are limited by their knowledge of their domain. A <br>\nlanguage that can prove assumptions effortlessly needs to know topology, <br>\nalgebra and category theory. Only by creating a mathematically sound <br>\ntype system in this matter can you make a statement and let the computer <br>\naccess it's validity without requiring you to add a large amount of <br>\nextra information.</p>\n<p>In Isabelle it is usual to see 5 lemmas to each proof. Each lemma just <br>\nstates something that is obvious to anyone to knows maths.</p>\n<p>I am working on a language I have chosen to call Formula which tries to <br>\nencompass these goals. Whether I succeed or not remains to be seen. In a <br>\nworld increasingly into parallel computation and distributed processing <br>\ntraditional testing is becoming increasingly difficult. Proof rather <br>\nthan testing avoids many of the problems of scaling a algorithm over <br>\nmultiple processors..</p>\n<p>Just some thoughts.</p>\n<p>John</p>",
        "id": 294661377,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661170030
    }
]