[
    {
        "content": "<p>From: Peter Chapman &lt;<a href=\"mailto:pc@cs.st-and.ac.uk\">pc@cs.st-and.ac.uk</a>&gt;<br>\nHi</p>\n<p>I have an inductive set, and I want to assert properties of members of  <br>\nthis set.  However, I am having trouble proving a seemingly trivial  <br>\nthing.  In essence, my problem is as follows</p>\n<p>inductive_set A :: \"('a list * bool) set\"<br>\n    where I[intro]: \"([], P i ) : A\"</p>\n<p>where i is some natural number, and P a (predefined) function from 'a  <br>\nto bool.</p>\n<p>Now, if I try to prove the following</p>\n<p>lemma test<br>\nassumes \"S : A\"<br>\nshows \"\\&lt;exists&gt; i. S = ([], P i)\"</p>\n<p>I reach an impasse:</p>\n<p>proof-<br>\nfrom assms and A.I[where i=i] show ?thesis<br>\n    apply (rule_tac x=i in exI)</p>\n<p>gives me the state</p>\n<p>[|  S : A ; ([], P i)  : A |] ==&gt; S = ( [] , P i )</p>\n<p>but this does not fall to any of the usual methods.  Since I is the  <br>\nonly formation rule, I would have thought the lemma would be easy to  <br>\nprove.  Usually I would just use \"by (cases) (auto)\" but in this case  <br>\nit did not work.</p>\n<p>Can any one see what I am doing wrong?  Am I trying to prove something  <br>\nthat is false, or is it a simple thing which I am doing incorrectly?</p>\n<p>Many thanks</p>\n<p>Peter</p>",
        "id": 294064068,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660824804
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nOn Fri, 18 Jul 2008, Peter Chapman wrote:</p>\n<blockquote>\n<p>I have an inductive set, and I want to assert properties of members of this<br>\nset.  However, I am having trouble proving a seemingly trivial thing.  In<br>\nessence, my problem is as follows</p>\n<p>inductive_set A :: \"('a list * bool) set\"<br>\n  where I[intro]: \"([], P i ) : A\"</p>\n<p>where i is some natural number, and P a (predefined) function from 'a to bool.</p>\n<p>Now, if I try to prove the following</p>\n<p>lemma test<br>\nassumes \"S : A\"<br>\nshows \"\\&lt;exists&gt; i. S = ([], P i)\"</p>\n<p>I reach an impasse:</p>\n<p>proof-<br>\nfrom assms and A.I[where i=i] show ?thesis<br>\n  apply (rule_tac x=i in exI)</p>\n<p>gives me the state</p>\n<p>[|  S : A ; ([], P i)  : A |] ==&gt; S = ( [] , P i )</p>\n<p>but this does not fall to any of the usual methods.</p>\n</blockquote>\n<p>You first need to eliminate the \"S : A\" fact, before trying to introduce <br>\nthe existential quantifier.</p>\n<blockquote>\n<p>Since I is the only formation rule, I would have thought the lemma would <br>\nbe easy to prove.</p>\n</blockquote>\n<p>This argument is exactly elimination S by splitting over the cases <br>\nstemming from the inductive definition, cf. the rule S.cases.</p>\n<blockquote>\n<p>Usually I would just use \"by (cases) (auto)\" but in this case it did not <br>\nwork.</p>\n</blockquote>\n<p>You need to present the membership judgment with an explicitly paired <br>\nargument.</p>\n<p>Here is my version of your example, which explains every single step <br>\nwithout any automagic:</p>\n<p>locale test =<br>\n  fixes P :: \"'a =&gt; bool\"<br>\nbegin</p>\n<p>inductive_set A :: \"('a list * bool) set\"<br>\n   where \"([], P i) : A\"</p>\n<p>lemma<br>\n  assumes \"S : A\"<br>\n  shows \"\\&lt;exists&gt;i. S = ([], P i)\"<br>\nproof -<br>\n  obtain x y where \"S = (x, y)\" by (cases S)<br>\n  with <code>S : A</code> have \"(x, y) : A\" by simp<br>\n  then obtain i where \"x = []\" and \"y = P i\" by cases<br>\n  with <code>S = (x, y)</code> have \"S = ([], P i)\" by simp<br>\n  then show ?thesis ..<br>\nqed</p>\n<p>end</p>\n<p>Makarius</p>",
        "id": 294064092,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660824812
    }
]