[
    {
        "content": "<p>From: Mathieu Giorgino &lt;<a href=\"mailto:giorgino@irit.fr\">giorgino@irit.fr</a>&gt;<br>\nHi,</p>\n<p>Written in this way, your lemma is equivalent to:<br>\n\"(f d = g d ) &amp; res f d x = res g d x --&gt; f = g\"</p>\n<p>and so your assumptions are in fact :<br>\nf x = g x &amp; f d = g d</p>\n<p>Some ways to write it correctly are:</p>\n<p>lemma Res_Split2: \"ALL x. (f d = g d) &amp;  res f d x = res g d x ==&gt; f = g\"</p>\n<p>lemma Res_Split2: \"(f d = g d) &amp; (ALL x. res f d x = res g d x) --&gt; f = g\"</p>\n<p>lemma Res_Split2: \"(f d = g d) &amp; res f d = res g d --&gt; f = g\"<br>\n  apply (clarsimp simp add:expand_fun_eq res_def)<br>\n  apply (case_tac \"x=d\")<br>\n  by simp_all</p>\n<p>Regards,</p>\n<p>Mathieu Giorgino</p>",
        "id": 294077073,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660829304
    },
    {
        "content": "<p>From: Richard Warburton &lt;<a href=\"mailto:richard.warburton@gmail.com\">richard.warburton@gmail.com</a>&gt;<br>\nHi,</p>\n<p>I have a simple definition for restricting functions:</p>\n<p>definition res :: \"('a ~=&gt; 'b) =&gt; 'a =&gt; 'a ~=&gt; 'b\" where<br>\n\"res f v x = (if (x=v) then None else (f x))\"</p>\n<p>About which I've proved a lemma that allows me to seperate some pieces<br>\nof information about the function:</p>\n<p>lemma Res_Split: \"ALL x. (f d = g d ) &amp; res f d x = res g d x --&gt; f x = g x\"<br>\n  apply (simp only: res_def)<br>\n  apply(split split_if)<br>\n  apply (simp)<br>\ndone</p>\n<p>However, I really want to prove an equivalence between the functions f and g:</p>\n<p>lemma Res_Split2: \"ALL x. (f d = g d ) &amp; res f d x = res g d x --&gt; f = g\"</p>\n<p>The problem I keep running into when doing this is that I try to use<br>\nextensionality of the functions f and g, I get a new binding scope<br>\n(and thus a different x).  For example if I take the above lemma and<br>\n'apply (simp only: expand_fun_eq)' then it leaves with the following<br>\nproof state:</p>\n<p>ALL x. f d = g d &amp; res f d x = res g d x --&gt; (ALL x. f x = g x)</p>\n<p>Apologies if I've missed something trivial here, but I can't see if<br>\nthere's a trick that can be used to reduce this state to Res_Split.<br>\nAny help on the matter would be most appreciated.</p>\n<p>regards,</p>\n<p>Richard Warburton</p>",
        "id": 294077929,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660829633
    },
    {
        "content": "<p>From: Brian Huffman &lt;<a href=\"mailto:brianh@cs.pdx.edu\">brianh@cs.pdx.edu</a>&gt;<br>\nHi Richard,</p>\n<p>I think that instead of<br>\nlemma Res_Split2: \"ALL x. (f d = g d ) &amp; res f d x = res g d x --&gt; f = g\"</p>\n<p>What you really meant to say was<br>\nlemma Res_Split2: \"(ALL x. (f d = g d ) &amp; res f d x = res g d x) --&gt; f = g\"</p>\n<p>Note the placement of the parentheses here; you really only want the<br>\nquantifier to range over the left side of the implication, not the whole<br>\nsubgoal.</p>\n<p>The parsing situation with quantification vs. implication is a little<br>\nconfusing in Isabelle, because there are object-logic and meta-logic<br>\nversions of each. Here's a summary of how all the combinations are parsed:</p>\n<p>\"ALL x. P x --&gt; Q x\" is parsed as \"ALL x. (P x --&gt; Q x)\"<br>\n\"ALL x. P x ==&gt; Q x\" is parsed as \"(ALL x. P x) ==&gt; Q x\"<br>\n\"!!x. P x ==&gt; Q x\" is parsed as \"!!x. (P x ==&gt; Q x)\"</p>\n<p>Hope this helps,</p>\n<ul>\n<li>Brian</li>\n</ul>",
        "id": 294078148,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660829701
    }
]