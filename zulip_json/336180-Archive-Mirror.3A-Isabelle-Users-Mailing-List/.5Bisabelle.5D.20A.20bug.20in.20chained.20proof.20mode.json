[
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nThat question is hard to answer in generality.  You need to be more <br>\nspecific what you have in mind, what is the application etc.</p>\n<p>Makarius</p>",
        "id": 294279693,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660919931
    },
    {
        "content": "<p>From: Eddy Westbrook &lt;<a href=\"mailto:westbrook@kestrel.edu\">westbrook@kestrel.edu</a>&gt;<br>\nHi,</p>\n<p>I think I have found a bug in the chained proof mode, that occurs for equality proofs if one of the proof used in the chain is a reflexive proof. As an example, the following proof fails, even though (as far as I understand the chain mode) it should succeed:</p>\n<p>lemma chain_bug: \"e1 = e2 ⟹ f e1 = f e2\"<br>\n proof -<br>\n   assume eq1: \"e1 = e2\"<br>\n   have \"f e1 = f e2\" by (rule arg_cong[OF eq1])<br>\n   also<br>\n   have \"f e2 = f e2\" by (simp)<br>\n   finally<br>\n   have \"f e1 = f e2\".<br>\n qed</p>\n<p>Although it may seem silly to write a proof that “f e2 = f e2”, the reason it comes up is that the proof is machine-generated, and sometimes it is easier to generate a proof that something equals itself rather than checking explicitly for that fact.</p>\n<p>Anyway, just thought I would report this.</p>\n<p>Thanks,<br>\n-Eddy</p>",
        "id": 294280586,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660920219
    },
    {
        "content": "<p>From: Lawrence Paulson &lt;<a href=\"mailto:lp15@cam.ac.uk\">lp15@cam.ac.uk</a>&gt;<br>\nOne possible explanation of your issue could be that the symbol f has a polymorphic type, so that the two instances don’t match. So it would be better if you could submit a self-contained theory.</p>\n<p>Larry Paulson</p>",
        "id": 294280628,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660920231
    },
    {
        "content": "<p>From: Lars Noschinski &lt;<a href=\"mailto:noschinl@in.tum.de\">noschinl@in.tum.de</a>&gt;<br>\nOn 11.06.2014 07:03, Eddy Westbrook wrote:</p>\n<blockquote>\n<p>Hi,</p>\n<p>I think I have found a bug in the chained proof mode, that occurs for equality proofs if one of the proof used in the chain is a reflexive proof. As an example, the following proof fails, even though (as far as I understand the chain mode) it should succeed:</p>\n<p>lemma chain_bug: \"e1 = e2 ⟹ f e1 = f e2\"<br>\n proof -<br>\n   assume eq1: \"e1 = e2\"<br>\n   have \"f e1 = f e2\" by (rule arg_cong[OF eq1])<br>\n   also<br>\n   have \"f e2 = f e2\" by (simp)<br>\n   finally<br>\n   have \"f e1 = f e2\".<br>\n qed<br>\nThis is intended behaviour (although I cannot find it in the<br>\ndocumentation right now):</p>\n</blockquote>\n<p><a href=\"https://lists.cam.ac.uk/pipermail/cl-isabelle-users/2010-September/msg00058.html\">https://lists.cam.ac.uk/pipermail/cl-isabelle-users/2010-September/msg00058.html</a></p>\n<p>Calculational reasoning not only works with equality, but also with a<br>\nlot of other transitivity rules (see the print_trans_rules) for the<br>\ncurrently registered rules. An \"also\" (or \"finally\") step applies the<br>\nfirst applicable transitivity rule. If this does not make progress<br>\n(i.e., the chained fact before and after is the same), it backtracks and<br>\ntries the next applicable rule.</p>\n<p>You get notified of this behaviour, if you explicitly request to use the<br>\nrule for transitivity of equality:</p>\n<p>assume eq1: \"e1 = e2\"<br>\n  have \"f e1 = f e2\" by (rule arg_cong[OF eq1])<br>\n  also<br>\n  have \"f e2 = f e2\" by (simp)<br>\n  finally (trans)<br>\n  have \"f e1 = f e2\".</p>\n<p>Gives you:</p>\n<p>Vacuous calculation result: f e1 = f e2<br>\n  derived as projection (1) from:<br>\n      f e1 = f e2<br>\n      f e2 = f e2</p>\n<p>at the finally step. A closer look at the output of print_trans_rules<br>\nshows the the next applicable rules are</p>\n<p>HOL.back_subst: ?P ?a ⟹ ?a = ?b ⟹ ?P ?b<br>\n  HOL.forw_subst: ?a = ?b ⟹ ?P ?b ⟹ ?P ?a</p>\n<p>HOL.back_subst produces the same, vacuous result, so finally proceeds to<br>\nHOL.forw_subst which then yields \"f e1 = f e1\" as you observed.</p>\n<blockquote>\n<p>Although it may seem silly to write a proof that “f e2 = f e2”, the reason it comes up is that the proof is machine-generated, and sometimes it is easier to generate a proof that something equals itself rather than checking explicitly for that fact.</p>\n</blockquote>\n<p>Automatically generating theory sources is fragile, in particular when<br>\nusing the usual user syntax for terms. Apparently, you can use YXML<br>\nsyntax for the terms instead. Also, it is possible to directly interact<br>\nwith the prover using Isabelle/Scala.</p>\n<p>-- Lars</p>",
        "id": 294280693,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660920244
    },
    {
        "content": "<p>From: Christian Sternagel &lt;<a href=\"mailto:c.sternagel@gmail.com\">c.sternagel@gmail.com</a>&gt;<br>\nDear Eddy,</p>\n<p>this actually is the intended behavior, the reason of which is explained in:</p>\n<p>G. Bauer and M. Wenzel. Calculational reasoning revisited - an<br>\nIsabelle/Isar experience. In R. J. Boulton and P. B. Jackson, editors,<br>\nTheorem Proving in Higher Order Logics: TPHOLs 2001, volume 2152 of<br>\nLecture Notes in Computer Science. Springer-Verlag, 2001.</p>\n<p>According to the isar-ref manual (see Section 2.2.4 \"Calculational <br>\nreasoning\") your example would translate into</p>\n<p>assume \"e1 = e2\"<br>\n   have \"f e1 = f e2\" ...<br>\n   note calculation = this (* \"f e1 = fe2\" *)<br>\n   have \"f e2 = f e2\" ...<br>\n   note calculation = &lt;TRANS&gt; [OF calculation this] (* \"f e1 = f e2\" *)<br>\n   from calculation<br>\n   have \"f e1 = f e2\"</p>\n<p>where the crucial spot is &lt;TRANS&gt;. That is, the actual content of <br>\n\"calculation\" depends on the chosen rule. And as explained in the above <br>\npaper this is done by trying all declared (via [trans] and [sym]; those <br>\ncan be consulted via \"print_trans_rules\") lemmas while discarding <br>\nresults that are mere projections.</p>\n<p>cheers</p>\n<p>chris</p>\n<p>Btw: <em>wispered</em> you should be careful when throwing around words like <br>\n\"bug\" ;)</p>",
        "id": 294280714,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660920250
    },
    {
        "content": "<p>From: Eddy Westbrook &lt;<a href=\"mailto:westbrook@kestrel.edu\">westbrook@kestrel.edu</a>&gt;<br>\nAll,</p>\n<p>Thanks for the replies! I understand more about the chained mode now, and will use your suggestions.</p>\n<p>Thanks again,<br>\n-Eddy</p>",
        "id": 294280819,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660920299
    },
    {
        "content": "<p>From: Eddy Westbrook &lt;<a href=\"mailto:westbrook@kestrel.edu\">westbrook@kestrel.edu</a>&gt;<br>\nLars,</p>\n<p>Just saw your note about the low-level ways to interact with Isabelle; thanks for the pointer, btw.</p>\n<p>Is there any way you could point me to any documentation of / introduction to these features? I found some of Makarius Wenzel’s papers and talks about asynchronous proof processing, which discuss the concepts at a high level, but I haven’t been able to find anything yet to help me figure out the low-level details of how to actually talk directly to Isabelle.</p>\n<p>Thanks again,<br>\n-Eddy</p>",
        "id": 294280864,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660920312
    }
]