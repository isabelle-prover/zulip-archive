[
    {
        "content": "<p>From: Lars Hupel &lt;<a href=\"mailto:hupel@in.tum.de\">hupel@in.tum.de</a>&gt;<br>\n(This is not an April Fool's joke ...)</p>\n<p>Dear list,</p>\n<p>I have a weird fold combinator, let's call it \"fold-left-right\". Here's<br>\nits definition:</p>\n<p>fun foldlr where<br>\n\"foldlr f [] init = init\" |<br>\n\"foldlr f (x # xs) init = f init x (foldlr f xs)\"</p>\n<p>In order to use it in functions, I stated a congruence rule:</p>\n<p>lemma foldlr_cong[fundef_cong]:<br>\n  assumes \"init1 = init2\" \"xs1 = xs2\"<br>\n  assumes \"⋀acc x. x ∈ set xs1 ⟹ f acc x = g acc x\"<br>\n  shows \"foldlr f xs1 init1 = foldlr g xs2 init2\"</p>\n<p>I started the proof as follows:</p>\n<p>using assms<br>\napply (induction f xs1 init1 arbitrary: init2 xs2 rule: foldlr.induct)<br>\napply auto</p>\n<p>... but got stuck and well, tried 'try0', which offered me to try<br>\n'presburger' (and nothing else!). What is it about 'presburger' that it<br>\ncan solve that goal, but other provers can't?</p>\n<p>Can anyone suggest a more elegant proof?</p>\n<p>Cheers<br>\nLars</p>",
        "id": 294671238,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661173455
    },
    {
        "content": "<p>From: Dmitriy Traytel &lt;<a href=\"mailto:traytel@inf.ethz.ch\">traytel@inf.ethz.ch</a>&gt;<br>\nHi Lars,</p>\n<p>nice April Fool’s joke ;-)</p>\n<p>Not sure if it is nicer than (auto, presburger) but the following also works:</p>\n<p>apply (auto simp: fun_eq_iff intro!: arg_cong[of _ _ \"g _ _”])</p>\n<p>Dmitriy</p>",
        "id": 294671549,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661173539
    }
]