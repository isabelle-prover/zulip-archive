[
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nIn preparation for the coming relase, I've gone through the sledgehammer <br>\nand nitpick connectivety again a few days ago, and refined it a little <br>\nbit.  There were some minor instabilities and potential race conditions <br>\nwrt. editor buffer content, but no fundamental problems as far as I could <br>\nsee.</p>\n<p>Public announcements for Isabelle2012 release candidates will come next <br>\nweek on this mailing list, so you can try again and report pending <br>\nproblems.</p>\n<p>Makarius</p>",
        "id": 294154534,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660850656
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nI have looked a bit through the course material.  What is always <br>\ninteresting is to see what users get as \"survival kit\" -- it provides some <br>\nhints what are the fine points that can be improved in the system itself, <br>\nfor people getting exposed to it the first time.</p>\n<p>The introduction of sledgehammer to \"Solve theorems in the Cloud\" is also <br>\nnice.  Someone told me he always explains the algebraic law of <br>\nassociativity in terms of the Google Map-Reduce framework :-)</p>\n<p>You mention OCaml occasionally in passing, as if it could be assumed as <br>\nbackground of French students.  Is this the case?  I am giving a 2-day <br>\nIsabelle/HOL tutorial in 2 weeks at Paris Sud, so it would be good to know <br>\nif OCaml can be taken for granted.</p>\n<p>What I have already learned is that Coq can <em>not</em> be taken for granted <br>\nhere in France, even though international conferences on theorem proving <br>\nsometimes give a different impression.</p>\n<p>Makarius</p>",
        "id": 294154605,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660850683
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nJust for the record, this is the website: <br>\n<a href=\"http://www.lri.fr/~wenzel/Isabelle_Orsay_2012\">http://www.lri.fr/~wenzel/Isabelle_Orsay_2012</a></p>\n<p>If anybody in the area wants to participate, or knows someone who might be <br>\ninterested, feel free to contact me via email.  (Although we are already <br>\nclose to being overbooked.)</p>\n<p>Makarius</p>",
        "id": 294154613,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660850690
    },
    {
        "content": "<p>From: Patrick Michel &lt;<a href=\"mailto:uni@pbmichel.de\">uni@pbmichel.de</a>&gt;<br>\nHi!</p>\n<blockquote>\n<p>I have looked a bit through the course material.  What is always interesting is to see what users get as \"survival kit\" -- it provides some hints what are the fine points that can be improved in the system itself, for people getting exposed to it the first time.</p>\n</blockquote>\n<p>I'd like to chime in on that by noting that we do a course on \"Specification and Verification with Higher-Order Logic\" in Isabelle/HOL as a Master's course.<br>\nLast year we set up a wiki (<a href=\"https://svhol.pbmichel.de\">https://svhol.pbmichel.de</a>) for the students, so we could dump in some knowledge about Isabelle/HOL, the proof general, HOL theory and general emacs.</p>\n<p>It was also mainly designed for the students to contribute; the wiki is world-editable. Feel free to contribute :-)</p>\n<p>Maybe the site is of some interested to one or the other. Regarding the above quote I'd say our FAQ - Ask Questions section might be of interest :)</p>\n<p>Patrick Michel<br>\nSoftware Technology Group<br>\nUniversity of Kaiserslautern</p>",
        "id": 294154695,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660850739
    },
    {
        "content": "<p>From: Thomas Genet &lt;<a href=\"mailto:thomas.genet@irisa.fr\">thomas.genet@irisa.fr</a>&gt;<br>\nLe 28/04/12 15:39, Makarius a écrit :</p>\n<blockquote>\n<p>You mention OCaml occasionally in passing, as if it could be assumed as<br>\nbackground of French students. Is this the case? I am giving a 2-day<br>\nIsabelle/HOL tutorial in 2 weeks at Paris Sud, so it would be good to<br>\nknow if OCaml can be taken for granted.</p>\n</blockquote>\n<p>For french students, I would say yes...</p>\n<blockquote>\n<p>What I have already learned is that Coq can <em>not</em> be taken for granted<br>\nhere in France, even though international conferences on theorem proving<br>\nsometimes give a different impression.</p>\n</blockquote>\n<p>Yes, it is true. The overall knowledge of Coq highly depends on the <br>\nuniversity where you come from. You are very much likely to be exposed <br>\nin \"Research\" Masters (you probably know this distinction we have in <br>\nFrance now that you are at LRI :-) ... The course that I gave was <br>\ndesigned for \"Professional\" Masters... which explains that it does not <br>\nput the stress on proofs tactics and so on.</p>\n<p>Best regards,</p>\n<p>Thomas</p>",
        "id": 294154791,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660850770
    },
    {
        "content": "<p>From: Johannes Hölzl &lt;<a href=\"mailto:hoelzl@in.tum.de\">hoelzl@in.tum.de</a>&gt;<br>\nHi Thomas,</p>\n<p>I added a link to your course material in the Community Wiki:</p>\n<p><a href=\"https://isabelle.in.tum.de/community/Course_Material\">https://isabelle.in.tum.de/community/Course_Material</a></p>\n<ul>\n<li>Johannes</li>\n</ul>",
        "id": 294155029,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660850880
    },
    {
        "content": "<p>From: Thomas Genet &lt;<a href=\"mailto:thomas.genet@irisa.fr\">thomas.genet@irisa.fr</a>&gt;<br>\nThanks a lot!</p>\n<p>Thomas</p>",
        "id": 294155079,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660850886
    },
    {
        "content": "<p>From: Thomas Genet &lt;<a href=\"mailto:thomas.genet@irisa.fr\">thomas.genet@irisa.fr</a>&gt;<br>\nDear all Isabelle users,</p>\n<p>as promised to Tobias and Jasmin here is some feedback and teaching <br>\nmaterial for a course that I gave this year on Formal Analysis and <br>\nDesign to students in a first year of Master in computer science.</p>\n<p>This course was designed for our \"professional\" master students i.e. <br>\nthat will end up developpers and not for \"research\" master students that <br>\nwill end up in PhD. Thus, I focused on functional programming <br>\n(Isabelle/HOL and Scala), first order logic (for defining program <br>\nproperties) and on counterexample finding (rather than on proof). The <br>\nfinal objective is to run Java+Scala programs with verified blocks, i.e. <br>\nwhose formally defined properties have been checked on the Isabelle <br>\ntheory using counterexample finders.</p>\n<p>The page of this course is here:</p>\n<p><a href=\"http://www.irisa.fr/celtique/genet/ACF/\">http://www.irisa.fr/celtique/genet/ACF/</a></p>\n<p>With regards to the experience the students had with Isabelle/HOL here <br>\nare some comments. I already sent them to Tobias and Jasmin but Jasmin <br>\nadvised me to send them on the mailing list.</p>\n<p>Good points:</p>\n<p>++ Though 80% of the students were initially allergic to functional<br>\n    programming, in the end they are almost all convinced that it is<br>\n    a convenient formalism to define and prove programs.<br>\n+++ Students allergic to logic ended up in writing relevant lemmas<br>\n     (this point deserves three +, because it was my main objective)<br>\n++ Most of the students allergic to logic ended up in being convinced<br>\n    that writing a lemma may replace writing a test<br>\n++ Some of the students ended up in being convinced that writing a<br>\n    lemma may replace writing a thousand tests :-)<br>\n+++ Counterexample generation makes it possible for the students to<br>\n     quickly figure out which of their definition (the lemma or the <br>\nfunction) was<br>\n     false.<br>\n++ The code export to Scala was very much appreciated ... it makes the<br>\n    formal verification of functional program sounding useful to <br>\ndeveloppers!<br>\n++ Counterexamples found by nitpick and quickcheck permitted to debug<br>\n    rather complex functions (see practicals in the following). They<br>\n    were intensively used by students.</p>\n<p>Bad points and suggested improvements:</p>\n<p>--- Function parser and error messages are sometimes very poor... which<br>\n     makes the debugging very difficult... especially for functions of more<br>\n     than 10 lines the error message just mention that there is an error<br>\n     somewhere... well, thanks :-)  At least, a line number for the error<br>\n     would be much appreciated.</p>\n<p>-- It is a bad idea to use a variable name like id in a function<br>\n   equation, e.g.:</p>\n<p>fun f:: \"nat =&gt; nat\"<br>\nwhere<br>\n\"f(id)=id\"</p>\n<p>OK, the error message says:<br>\n*** Type error in application: incompatible operand type</p>\n<hr>\n<p>*** Operator:  f :: nat =&gt; nat<br>\n*** Operand:   id :: ??'a =&gt; ??'a</p>\n<p>and a (careful) student may understand that 'id' is already defined as a<br>\n   function etc... however this is far more difficult to find when the<br>\n   function has 10 complex equations. What surprises me is that the<br>\n   left-hand side of the equation f(id) does not respect the restrictions<br>\n   for \"fun\" declarations and that it should be rejected anyway (with a<br>\n   more explicit error message). Am I right?</p>\n<ul>\n<li>Indentation of function equations (inside the \"...\") is simply <br>\nhorrible (in emacs) as soon as you have several if and case <br>\nconstructions, or I did not understand it.</li>\n</ul>\n<p>Best Regards,</p>\n<p>Thomas</p>",
        "id": 294156547,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660851438
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nThis is one of these scoping errors that then lead to a conflict with the <br>\ntype constraints imposed by already defined entities, and are thus <br>\ndiscovered indirectly.  The type checking phase could be a bit more <br>\nambitious to maintain precise position information and report that (which <br>\nis technically not so easy and might require one or two more release <br>\ncycles to materialize).</p>\n<p>But the actual scoping is already represented quite nicely in current <br>\nIsabelle2011-1 right now, if you use Isabelle/jEdit and rely in its <br>\n\"Haribo effect\".  This means the sources are painted in funny colors <br>\naccording to the role of identifiers.  The Prover IDE also has the magic <br>\nCONTROL (or COMMAND) key, which asks the system to explain the formal <br>\nstatus of some piece of source.</p>\n<p>So the above \"id\" would have come out black (constant) instead of the <br>\nexpected blue (free variable), and its tooltip would have said \"constant <br>\n<a href=\"http://Fun.id\">Fun.id</a>\", with a hyperlink to jump to its definition in main HOL.  So <br>\nstudents would have to spend less energy divinating the meaning of the <br>\ntext themselves.</p>\n<p>Makarius</p>",
        "id": 294156556,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660851444
    },
    {
        "content": "<p>From: Lukas Bulwahn &lt;<a href=\"mailto:bulwahn@in.tum.de\">bulwahn@in.tum.de</a>&gt;<br>\nHello Thomas,</p>\n<p>I am impressed that simply writing and validating specifications with <br>\nNitpick and Quickcheck could improve the correctness of the <br>\nimplementations by 45%.<br>\nAs you write, only 5% of the students got the right solution without <br>\nIsabelle in the beginning of the course, and 50% students ended up with <br>\nthe correct program within 2 hours using Isabelle at midterm.</p>\n<p>Can you say more why 45% succeeded at midterm? Was it simply the <br>\napplication of our counterexample generators and forcing students to <br>\nthink about their specification?<br>\nWhy did the remaining 50% fail? Did they never get the specifications <br>\nright? Or did Quickcheck and Nitpick fail to find counterexamples?</p>\n<p>Further Isabelle tools adressing the problems of the remaining 50% might <br>\nbe interesting to consider in the future.</p>\n<p>Lukas</p>",
        "id": 294156585,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660851450
    },
    {
        "content": "<p>From: Thomas Genet &lt;<a href=\"mailto:thomas.genet@irisa.fr\">thomas.genet@irisa.fr</a>&gt;<br>\nLe 26/04/12 17:21, Makarius a écrit :</p>\n<blockquote>\n<p>This is one of these scoping errors that then lead to a conflict with<br>\nthe type constraints imposed by already defined entities, and are thus<br>\ndiscovered indirectly. The type checking phase could be a bit more<br>\nambitious to maintain precise position information and report that<br>\n(which is technically not so easy and might require one or two more<br>\nrelease cycles to materialize).</p>\n</blockquote>\n<p>aouch... it sounds that it is unlikely to be present in Isabelle/HOL for <br>\nnext january, the next time I will give the lecture :-)</p>\n<blockquote>\n<p>But the actual scoping is already represented quite nicely in current<br>\nIsabelle2011-1 right now, if you use Isabelle/jEdit and rely in its<br>\n\"Haribo effect\". This means the sources are painted in funny colors<br>\naccording to the role of identifiers. The Prover IDE also has the magic<br>\nCONTROL (or COMMAND) key, which asks the system to explain the formal<br>\nstatus of some piece of source.</p>\n<p>So the above \"id\" would have come out black (constant) instead of the<br>\nexpected blue (free variable), and its tooltip would have said \"constant<br>\n<a href=\"http://Fun.id\">Fun.id</a>\", with a hyperlink to jump to its definition in main HOL. So<br>\nstudents would have to spend less energy divinating the meaning of the<br>\ntext themselves.</p>\n</blockquote>\n<p>Ok I'll try this... In fact, I was nearly ready to use jEdit for the <br>\nlabs but I found that jEdit was often getting stuck when using nitpick <br>\nand quickcheck, and since my labs strongly rely on those two tools it <br>\nwas a problem.</p>\n<p>However, I am convinced that students would love switching to jEdit <br>\nbecause they are really not comfortable with emacs :-)</p>\n<p>Best regards,</p>\n<p>Thomas</p>",
        "id": 294156638,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660851475
    },
    {
        "content": "<p>From: Thomas Genet &lt;<a href=\"mailto:thomas.genet@irisa.fr\">thomas.genet@irisa.fr</a>&gt;<br>\nDear all,</p>\n<p>Le 26/04/12 17:23, Lukas Bulwahn a écrit :</p>\n<blockquote>\n<p>Hello Thomas,</p>\n<p>I am impressed that simply writing and validating specifications with<br>\nNitpick and Quickcheck could improve the correctness of the<br>\nimplementations by 45%.<br>\nAs you write, only 5% of the students got the right solution without<br>\nIsabelle in the beginning of the course, and 50% students ended up with<br>\nthe correct program within 2 hours using Isabelle at midterm.</p>\n</blockquote>\n<p>If you look at the predicate I was asking for it was not that complex to <br>\nwrite in Isabelle/HOL (I realize that the subject of the lab is in <br>\nfrench... sorry, I can translate it in french if you want to try)... I <br>\nmean it is not straightforward but it only consists of 2 recursive <br>\nfunctions... However, I think that coming up with the good solution at <br>\nthe first try is difficult.</p>\n<blockquote>\n<p>Can you say more why 45% succeeded at midterm? Was it simply the<br>\napplication of our counterexample generators and forcing students to<br>\nthink about their specification?</p>\n</blockquote>\n<p>Yes!</p>\n<blockquote>\n<p>Why did the remaining 50% fail? Did they never get the specifications<br>\nright? Or did Quickcheck and Nitpick fail to find counterexamples?</p>\n</blockquote>\n<p>No they had a hard time finding the good algorithmic idea and they are <br>\nalso beginners in functional programming... it is thus hard for them in <br>\n2 hours.</p>\n<blockquote>\n<p>Further Isabelle tools adressing the problems of the remaining 50% might<br>\nbe interesting to consider in the future.</p>\n</blockquote>\n<p>except a tool automatically writing the functions from the specification <br>\n... I do not see how to help them :-)<br>\nThey were only lacking practice of functional programming. At the end of <br>\nthe course, they were more comfortable with this.</p>\n<p>Best regards,</p>\n<p>Thomas</p>",
        "id": 294156649,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660851480
    },
    {
        "content": "<p>From: Thomas Genet &lt;<a href=\"mailto:thomas.genet@irisa.fr\">thomas.genet@irisa.fr</a>&gt;<br>\nDear Makarius,</p>\n<p>I just played a bit with both the \"Haribo effect\" and the \"magic\" <br>\nCOMMAND key that are both very nice functionnalities! I will consider <br>\nswitching to jEdit. Can you tell me if the behavior of jEdit with <br>\nnitpick has been improved?</p>\n<p>Thanks in advance,</p>\n<p>Thomas</p>",
        "id": 294156708,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660851487
    },
    {
        "content": "<p>From: \"Charlie (Cheolgi) Kim\" &lt;<a href=\"mailto:cheolgi@gmail.com\">cheolgi@gmail.com</a>&gt;<br>\nThank you for the good resource.</p>\n<p>Indeed, I am using the material to teach myself Isabelle. The material is<br>\nawesome.<br>\nHowever, I found that myself cannot solve an exercise:<br>\nProve a property of the %-calculus: % x. f x = % y. f y<br>\nwhich looks trivial, but whatever I try to make a lemma, they make syntax<br>\nerrors.</p>\n<p>Can anybody guide me?</p>\n<p>Thank you.</p>\n<p>Best,</p>\n<p>Charlie Kim</p>",
        "id": 294158318,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660852165
    },
    {
        "content": "<p>From: Lawrence Paulson &lt;<a href=\"mailto:lp15@cam.ac.uk\">lp15@cam.ac.uk</a>&gt;<br>\nProbably you just need parentheses:  (% x. f x) = (% y. f y)</p>\n<p>The scope of a variable-binding operator is unlimited in both directions (left and right). This is a peculiarity of Isabelle's parser.</p>\n<p>Larry Paulson</p>",
        "id": 294158370,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660852192
    }
]