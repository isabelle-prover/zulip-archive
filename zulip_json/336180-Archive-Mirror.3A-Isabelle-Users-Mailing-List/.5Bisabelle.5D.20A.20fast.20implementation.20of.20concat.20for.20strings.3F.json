[
    {
        "content": "<p>From: \"C. Diekmann\" &lt;<a href=\"mailto:diekmann@in.tum.de\">diekmann@in.tum.de</a>&gt;<br>\nDear list,</p>\n<p>I recently learned that the Isabelle pretty printer for large datatype<br>\nconstructs can be quite slow.</p>\n<p>Andreas explained that not printing (only evaluating) the result<br>\nhelps, for example<br>\nvalue [code] \"let x = expression in ()\"</p>\n<p>To get some debug output, I started writing custom toString functions<br>\nin HOL to print some complicated datatypes. This was sufficiently<br>\nfast.</p>\n<p>value [code] \"let x = expression in something_toString x\"</p>\n<p>However, as datatypes get more complex, my toString functions also get<br>\nslow. My question: Is there a fast implementation of concat for<br>\nstrings?</p>\n<p>Currently, concat is a huge bottleneck:</p>\n<p>value[code] \"replicate 1000<br>\n''xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx''\"<br>\n(<em>5.895s</em>)</p>\n<p>value[code] \"concat (replicate 1000<br>\n''xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx'')\"<br>\n(<em>67.556s</em>)</p>\n<p>Best,<br>\n  Cornelius</p>",
        "id": 294654124,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661167315
    },
    {
        "content": "<p>From: Christian Sternagel &lt;<a href=\"mailto:c.sternagel@gmail.com\">c.sternagel@gmail.com</a>&gt;<br>\nDear Cornelius,</p>\n<p>are you aware of the \"Show\" AFP entry? Maybe the (at least in Haskell,<br>\nstandard) trick for \"constant time concatenation\" that is used there is of<br>\ninterest for you. Moreover it is possible to generate show-functions (what<br>\nyou call \"toString\") automatically for data types.</p>\n<p>cheers</p>\n<p>chris</p>",
        "id": 294654134,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661167321
    },
    {
        "content": "<p>From: \"C. Diekmann\" &lt;<a href=\"mailto:diekmann@in.tum.de\">diekmann@in.tum.de</a>&gt;<br>\nDear Christian,</p>\n<p>thanks for the pointer.</p>\n<p>But<br>\n  value[code] \"show (replicate 1000<br>\n''xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx'')\"<br>\ntook 56.196s (or 47.544s if not run in parallel with another<br>\nvalue[code]) on my machine.</p>\n<p>Am I using it wrong or is the string just too long?</p>\n<p>By the way, the dependency on the afp website to<br>\nDatatype_Order_Generator is wrong, it should be Deriving.</p>\n<p>Best,<br>\n  Cornelius</p>",
        "id": 294654230,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661167346
    },
    {
        "content": "<p>From: \"Thiemann, Rene\" &lt;<a href=\"mailto:Rene.Thiemann@uibk.ac.at\">Rene.Thiemann@uibk.ac.at</a>&gt;<br>\nDear Cornelius,</p>\n<p>something strange is going on here. I just tested your example in the generated code with „test 10000“ and even in „ghci“ the answer is immediate. So I’m currently confused why it takes so long in Isabelle.</p>\n<p>theory Test<br>\nimports Show<br>\n  \"~~/src/HOL/Library/Code_Char\"<br>\n  \"~~/src/HOL/Library/Code_Target_Int\"<br>\n  \"~~/src/HOL/Library/Code_Binary_Nat\"</p>\n<p>begin</p>\n<p>definition test :: \"integer ⇒ string\" where <br>\n  \"test n = show (replicate (nat (int_of_integer n))<br>\n    ''xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx'')\"</p>\n<p>export_code test in Haskell module_name Test file Code<br>\nend</p>\n<p>Cheers,<br>\nRené</p>",
        "id": 294654239,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661167352
    }
]