[
    {
        "content": "<p>From: Thomas Sewell &lt;<a href=\"mailto:Thomas.Sewell@nicta.com.au\">Thomas.Sewell@nicta.com.au</a>&gt;<br>\nI was sitting down to write an email about a unification bug, and it<br>\noccurred to me that Isabelle users might also be interested in the<br>\nstatus of our project.</p>\n<p>I've been working on the L4.verified project at NICTA (see<br>\n<a href=\"http://ertos.nicta.com.au/research/l4.verified/\">http://ertos.nicta.com.au/research/l4.verified/</a>). Our objective was to<br>\nuse Isabelle as an analysis tool in proving that an operating system<br>\nkernel satisfied certain conditions. I'm pleased to report that Isabelle<br>\nhas served us well and our project was completed successfully. You can<br>\nread the story in various places, including slashdot (see<br>\n<a href=\"http://tech.slashdot.org/story/09/08/13/0827231/Worlds-First-Formally\">http://tech.slashdot.org/story/09/08/13/0827231/Worlds-First-Formally</a>).</p>\n<p>With our project done, one of my follow-up jobs was to push our patch to <br>\nthe record package back upstream. The repository record package was<br>\neffectively unusable for records with more than 150 fields, a limit we <br>\nincrease to around 1000. I'm hoping the change will make it into the <br>\nnext Isabelle release.</p>\n<p>While cleaning up the mechanism by which certain facts about record <br>\nupdators were proven, I came across a charming unification bug.</p>\n<p>Suppose one were to define a predicate and some rules about it like so:</p>\n<p>constdefs<br>\n   somepredicate :: \"(('b =&gt; 'b) =&gt; ('a =&gt; 'a))<br>\n                               =&gt; 'a =&gt; 'b =&gt; bool\"<br>\n  \"somepredicate upd v x == True\"</p>\n<p>lemma somepredicate_idI:<br>\n   \"somepredicate id (f v) v\"<br>\n   by (simp add: somepredicate_def)</p>\n<p>lemma somepredicate_triv:<br>\n   \"somepredicate upd v x ==&gt; somepredicate upd v x\"<br>\n   by assumption</p>\n<p>We can resolve the two rules against each other:</p>\n<p>lemmas somepredicate_triv [OF somepredicate_idI]</p>\n<p>However, if we first instantiate 'a with a function type, we get a TERM<br>\nexception out of the bowels of the unifier:</p>\n<p>lemmas somepredicate_triv[where v=\"f :: nat =&gt; bool\", OF somepredicate_idI]</p>\n<p>*** exception TERM raised: fastype: expected function type<br>\n*** At command \"lemmas\".</p>\n<p>I've confirmed this issue exists in multiple versions of Isabelle<br>\nincluding a recent snapshot. Severity is medium, it being easy to work<br>\naround the issue once isolated but difficult to track down when it first<br>\nappeared (the first time I attempted to define a record with a<br>\nfunctional field type). Likelihood of anyone else tripping on this in <br>\nthe near future is low.</p>\n<p>Yours,<br>\n     Thomas.</p>",
        "id": 294083788,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660831505
    }
]