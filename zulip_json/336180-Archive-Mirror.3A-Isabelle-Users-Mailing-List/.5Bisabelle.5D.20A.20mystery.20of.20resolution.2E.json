[
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nHere is also the text from the \"implementation\" manual that has emerged<br>\nfrom such explanations over the years:</p>\n<p>➧ @{ML match_tac}, @{ML ematch_tac}, @{ML dmatch_tac}, and @{ML<br>\nbimatch_tac}<br>\n  are similar to @{ML resolve_tac}, @{ML eresolve_tac}, @{ML dresolve_tac},<br>\n  and @{ML biresolve_tac}, respectively, but do not instantiate schematic<br>\n  variables in the goal state.⁋‹Strictly speaking, matching means to<br>\ntreat the<br>\n  unknowns in the goal state as constants, but these tactics merely discard<br>\n  unifiers that would update the goal state. In rare situations (where the<br>\n  conclusion and goal state have flexible terms at the same position), the<br>\n  tactic will fail even though an acceptable unifier exists.› These tactics<br>\n  were written for a specific application within the classical reasoner.</p>\n<p>Flexible subgoals are not updated at will, but are left alone.</p>\n<p>For the purposes of matching in Isar 'is' patterns etc. there is a<br>\ndifferent front-end called Unify.matchers:<br>\n<a href=\"http://isabelle.in.tum.de/repos/isabelle/file/Isabelle2017/src/Pure/more_unify.ML\">http://isabelle.in.tum.de/repos/isabelle/file/Isabelle2017/src/Pure/more_unify.ML</a></p>\n<p>This has empirically evolved to something that works most of the time<br>\nfor the particular applications of structured proofs (Isar) and proof<br>\nmethods (Eisbach).</p>\n<p>Makarius</p>",
        "id": 294725359,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661186241
    },
    {
        "content": "<p>From: <a href=\"mailto:Thomas.Sewell@data61.csiro.au\">Thomas.Sewell@data61.csiro.au</a><br>\nThanks for the explanations, that explains what's going on entirely.</p>\n<p>I guess that I have fallen into the habit of assuming too much from the <br>\nunifier.</p>\n<p>Cheers,<br>\n     Thomas.</p>",
        "id": 294726507,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661186588
    },
    {
        "content": "<p>From: <a href=\"mailto:Thomas.Sewell@data61.csiro.au\">Thomas.Sewell@data61.csiro.au</a><br>\nI ran into this strange example recently.</p>\n<p>schematic_goal \"!!x y. True --&gt; ?Q y x z\"<br>\n   apply clarify<br>\n   apply (tactic {* match_tac @{context} [(@{thm impI})] 1 *})<br>\n   apply (tactic {* resolve_tac @{context} [@{thm impI}] 1 *})</p>\n<p>In essence, match_tac doesn't think that impI matches this goal, even <br>\nthough it clearly does. This prevents clarify/clarsimp/safe from acting <br>\non the goal. Shuffling the positions of the x/y/z premises leads to <br>\ndifferent outcomes, with some orders allowing clarify to succeed and <br>\nothers not.</p>\n<p>This is quite strange.</p>\n<p>I tried to dig into what Thm.biresolution is doing here, and got totally <br>\nlost. Does anyone more familiar with it want to investigate?</p>\n<p>Cheers,<br>\n     Thomas.</p>",
        "id": 294727641,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661186910
    },
    {
        "content": "<p>From: Lawrence Paulson &lt;<a href=\"mailto:lp15@cam.ac.uk\">lp15@cam.ac.uk</a>&gt;<br>\nI'm afraid that I have to call this behaviour correct, if weird and annoying.</p>\n<p>Matching is implemented by performing unification and then rejecting the result if it assigns to any variables present in the goal. In your example, resolution with impI replaces ?Q in the goal by </p>\n<p>%y x. ?Q5 x y z</p>\n<p>This is not matching. It seems clear that there is another way to do the unification without updating ?Q, but the code doesn’t offer that option. Unification is done without knowledge of whether the user is attempting to match or not. This particular unification involves a so-called flexflex pair, a messy situation.</p>\n<p>Larry</p>",
        "id": 294728058,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661187045
    }
]