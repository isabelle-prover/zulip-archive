[
    {
        "content": "<p>From: Rafal Kolanski &lt;<a href=\"mailto:rafalk@cse.unsw.edu.au\">rafalk@cse.unsw.edu.au</a>&gt;<br>\nDear Isabelle Gurus,</p>\n<p>I think I've reached the edge of Isabelle's type system again, but just <br>\nto be sure of that, I wanted to ask (Brian Huffman rode a white horse to <br>\nmy rescue just recently :). I've tried to make my question as generic as <br>\npossible.</p>\n<p>Let's say I have two parametrised types:<br>\ndatatype 'a paddr_t = PAddr 'a<br>\ndatatype 'a vaddr_t = VAddr 'a</p>\n<p>which I've made a member of a type class:</p>\n<p>class addrs = type<br>\ninstance paddr_t :: (type) addrs ..<br>\ninstance vaddr_t :: (type) addrs ..</p>\n<p>The issue is having an overloaded addr_val which will pull out the <br>\nvalue. Currently I instantiate the types first and so have:<br>\n   addr_val :: \"'a::addrs =&gt; 32 word\"<br>\n   where (overloaded)<br>\n   \"addr_val (x::(32 word) paddr_t) == paddr_val x\"<br>\n   \"addr_val (x::(32 word) vaddr_t) == vaddr_val x\"</p>\n<p>Is there any way to make this generic over the type contained in addresses?<br>\nIf I just say:<br>\n   addr_val :: \"'a::addrs =&gt; 'b\"<br>\nthen I can define the overloading with:<br>\n   \"addr_val (x::'b paddr_t) == (paddr_val x)::'b\"<br>\n   \"addr_val (x::'b vaddr_t) == (vaddr_val x)::'b\"<br>\nbut then Isabelle stops helping me whenever I try to use it during <br>\nspecification or simplification, as the return type is just anything.<br>\n From what I can tell, this isn't possible, even when for any particular <br>\ntype the return type can be inferred.</p>\n<p>For nearly all architectures, the 'b will be identical for both <br>\ndefinitions. I'm looking for a way to somehow stick it up there with the 'a.</p>\n<p>What I want to do is to define a type class which fixes some parameter <br>\nover multiple types. Intuitively, to go from \"'a set\" and \"'a list\" to <br>\n\"'a container\", which means something like \"'a (set OR list)\", so I <br>\ncould define:<br>\n   get_a_member :: \"('a container) =&gt; 'a\"<br>\n   and then overload it for<br>\n   \"get_a_member (x::'a list) == ...\" and<br>\n   \"get_a_member (x::'a set) == ...\"</p>\n<p>I know I could do this with<br>\n   datatype 'a container = Set ('a set) | List ('a list)<br>\nbut I want a conclusive answer whether it can be handled with just the <br>\ntype system.</p>\n<p>Could you offer some suggestions?</p>\n<p>Yours Sincerely,</p>\n<p>Rafal Kolanski.</p>",
        "id": 294071679,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660827407
    },
    {
        "content": "<p>From: Jeremy Dawson &lt;<a href=\"mailto:jeremy@rsise.anu.edu.au\">jeremy@rsise.anu.edu.au</a>&gt;<br>\nRafal Kolanski wrote:</p>\n<blockquote>\n<p>Dear Isabelle Gurus,</p>\n<p>...</p>\n</blockquote>\n<blockquote>\n<p>What I want to do is to define a type class which fixes some parameter <br>\nover multiple types. Intuitively, to go from \"'a set\" and \"'a list\" to <br>\n\"'a container\", which means something like \"'a (set OR list)\", so I <br>\ncould define:</p>\n<p>this looks like the issue of having (type) constructor classes as well <br>\nas just type classes, as was introduced into Haskell some time ago.</p>\n</blockquote>\n<p>Sadly Isabelle (and ML, unlike Haskell) has a language of _types_ which <br>\nis not higher order (ie, ('a, 'b) tycon, where tycon is not variable, in <br>\ncontrast to Haskell's tycon a b,<br>\nwhere a and b can be types (of kind TYPE), or type constructors (of kind <br>\nTYPE -&gt; TYPE), etc)</p>\n<p>Jeremy</p>",
        "id": 294071725,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660827423
    },
    {
        "content": "<p>From: Rafal Kolanski &lt;<a href=\"mailto:rafalk@cse.unsw.edu.au\">rafalk@cse.unsw.edu.au</a>&gt;<br>\nJeremy Dawson wrote:<br>\nThank you, Jeremy. I had a feeling that I'm at the edge of the type system.<br>\nI'm currently getting around the issue by performing the instantiation <br>\nin a separate theory which can be swapped to a different one. This sort <br>\nof \"modularity\" though relies heavily on documentation in plain English :)</p>\n<p>Sincerely,</p>\n<p>Rafal Kolanski.</p>",
        "id": 294071733,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660827425
    }
]