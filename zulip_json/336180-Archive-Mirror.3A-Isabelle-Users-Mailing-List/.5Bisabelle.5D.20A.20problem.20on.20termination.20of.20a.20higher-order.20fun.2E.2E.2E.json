[
    {
        "content": "<p>From: \"<a href=\"mailto:lyj238@ios.ac.cn\">lyj238@ios.ac.cn</a>\" &lt;<a href=\"mailto:lyj238@ios.ac.cn\">lyj238@ios.ac.cn</a>&gt;<br>\nDear experts:</p>\n<p>I meet a problem on the termination of a function, which is due to higher-order function:( map) and <br>\n(may be) uniterpretated functions.  I really appreciate if you can do me a favour.</p>\n<p>theory test imports Main Finite_Set <br>\nbegin <br>\ndatatype varType=Global string | Para string nat </p>\n<p>datatype expType= IVar varType | <br>\nConst nat | <br>\nIndex nat | <br>\niteForm formula expType expType | <br>\nfunExp string \"expType list\" | <br>\noracleFun string \"expType list\" </p>\n<p>and <br>\nformula = eqn expType expType| <br>\npred string \"expType list\" | <br>\noraclePred string \"expType list\" | <br>\nandForm formula formula | <br>\nneg formula| <br>\norForm formula formula | <br>\nimplyForm formula formula | <br>\nchaos <br>\ntype_synonym state= \"varType \\&lt;Rightarrow&gt; nat \" <br>\ntype_synonym expTypeList=\" expType list\" <br>\ntype_synonym natList=\" nat list\" </p>\n<p>consts oracleFunInterPretation::\"string \\&lt;Rightarrow&gt; nat list \\&lt;Rightarrow&gt;nat\" <br>\noraclePredInterPretation::\"string \\&lt;Rightarrow&gt; nat list\\&lt;Rightarrow&gt;bool\" </p>\n<p>function expEval :: \" state\\&lt;Rightarrow&gt; expType \\&lt;Rightarrow&gt; nat\" and <br>\nformEval :: \" state\\&lt;Rightarrow&gt;formula \\&lt;Rightarrow&gt;bool\" where </p>\n<p>evalIVar:\"expEval s (IVar ie) = ( s ie)\" | <br>\nevalConst:\"expEval s (Const i) = i\" | <br>\nevalIndex:\"expEval s (Index i) = i\" | <br>\nevalIteForm:\"expEval s (iteForm f e1 e2)= <br>\n( if (formEval s f ) then (expEval s e1) <br>\nelse (expEval s e2 ))\" | <br>\nevalFunExp:\"expEval s (funExp opStr exps)= <br>\n(if (opStr=''+'') then (expEval s (exps!0) ) + (expEval s (exps!1) ) <br>\nelse (expEval s (exps!0) ) - (expEval s (exps!1) ))\" | <br>\nevalOracleFunExp:\"expEval s (oracleFun opStr exps) = oracleFunInterPretation opStr (map (expEval s) exps)\"| </p>\n<p>evalOraclePred:\"formEval s (oraclePred opStr exps)= oraclePredInterPretation opStr (map (expEval s) exps)\"| <br>\n\"formEval s (pred opStr exps)= <br>\n(if (opStr=''&lt;'') then (expEval s (exps!0) ) &lt; (expEval s (exps!1) ) <br>\nelse if (opStr=''&gt;'') then (expEval s (exps!0) ) &gt; (expEval s (exps!1) ) <br>\nelse True)\" | <br>\nevalExp: \"formEval s (eqn e1 e2)= ((expEval s e1 ) = (expEval s e2 ))\" | <br>\nevalAnd: \"formEval s ( andForm f1 f2) =( (formEval s f1 ) \\&lt;and&gt; (formEval s f2 ))\"| <br>\nevalNeg: \"formEval s (neg f1 ) = ( \\&lt;not&gt;(formEval s f1 ))\"| <br>\nevalOr: \"formEval s (orForm f1 f2) =( (formEval s f1 ) \\&lt;or&gt; (formEval s f2 ))\"| <br>\nevalImp:\"formEval s (implyForm f1 f2) = ( (formEval s f1 ) \\&lt;longrightarrow&gt; (formEval s f2 ))\" | <br>\n\"formEval s chaos =True\" </p>\n<p>by pat_completeness auto <br>\ntermination by lexicographic_order </p>\n<p>For your convenience, I also   attaches the file. </p>\n<p>regards!</p>\n<p><a href=\"mailto:lyj238@ios.ac.cn\">lyj238@ios.ac.cn</a><br>\n<a href=\"/user_uploads/14278/ERzy1PP1ao4ACyvjo24wkOno/test.thy\">test.thy</a></p>",
        "id": 294632153,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661158730
    },
    {
        "content": "<p>From: \"<a href=\"mailto:lyj238@ios.ac.cn\">lyj238@ios.ac.cn</a>\" &lt;<a href=\"mailto:lyj238@ios.ac.cn\">lyj238@ios.ac.cn</a>&gt;<br>\nDear experts:</p>\n<p>I meet a problem on the termination of a function, which is due to higher-order function:( map) and <br>\n(may be) uniterpretated functions.  I really appreciate if you can do me a favour.</p>\n<p>theory test imports Main Finite_Set <br>\nbegin <br>\ndatatype varType=Global string | Para string nat </p>\n<p>datatype expType= IVar varType | <br>\nConst nat | <br>\nIndex nat | <br>\niteForm formula expType expType | <br>\nfunExp string \"expType list\" | <br>\noracleFun string \"expType list\" </p>\n<p>and <br>\nformula = eqn expType expType| <br>\npred string \"expType list\" | <br>\noraclePred string \"expType list\" | <br>\nandForm formula formula | <br>\nneg formula| <br>\norForm formula formula | <br>\nimplyForm formula formula | <br>\nchaos <br>\ntype_synonym state= \"varType \\&lt;Rightarrow&gt; nat \" <br>\ntype_synonym expTypeList=\" expType list\" <br>\ntype_synonym natList=\" nat list\" </p>\n<p>consts oracleFunInterPretation::\"string \\&lt;Rightarrow&gt; nat list \\&lt;Rightarrow&gt;nat\" <br>\noraclePredInterPretation::\"string \\&lt;Rightarrow&gt; nat list\\&lt;Rightarrow&gt;bool\" </p>\n<p>function expEval :: \" state\\&lt;Rightarrow&gt; expType \\&lt;Rightarrow&gt; nat\" and <br>\nformEval :: \" state\\&lt;Rightarrow&gt;formula \\&lt;Rightarrow&gt;bool\" where </p>\n<p>evalIVar:\"expEval s (IVar ie) = ( s ie)\" | <br>\nevalConst:\"expEval s (Const i) = i\" | <br>\nevalIndex:\"expEval s (Index i) = i\" | <br>\nevalIteForm:\"expEval s (iteForm f e1 e2)= <br>\n( if (formEval s f ) then (expEval s e1) <br>\nelse (expEval s e2 ))\" | <br>\nevalFunExp:\"expEval s (funExp opStr exps)= <br>\n(if (opStr=''+'') then (expEval s (exps!0) ) + (expEval s (exps!1) ) <br>\nelse (expEval s (exps!0) ) - (expEval s (exps!1) ))\" | <br>\nevalOracleFunExp:\"expEval s (oracleFun opStr exps) = oracleFunInterPretation opStr (map (expEval s) exps)\"| </p>\n<p>evalOraclePred:\"formEval s (oraclePred opStr exps)= oraclePredInterPretation opStr (map (expEval s) exps)\"| <br>\n\"formEval s (pred opStr exps)= <br>\n(if (opStr=''&lt;'') then (expEval s (exps!0) ) &lt; (expEval s (exps!1) ) <br>\nelse if (opStr=''&gt;'') then (expEval s (exps!0) ) &gt; (expEval s (exps!1) ) <br>\nelse True)\" | <br>\nevalExp: \"formEval s (eqn e1 e2)= ((expEval s e1 ) = (expEval s e2 ))\" | <br>\nevalAnd: \"formEval s ( andForm f1 f2) =( (formEval s f1 ) \\&lt;and&gt; (formEval s f2 ))\"| <br>\nevalNeg: \"formEval s (neg f1 ) = ( \\&lt;not&gt;(formEval s f1 ))\"| <br>\nevalOr: \"formEval s (orForm f1 f2) =( (formEval s f1 ) \\&lt;or&gt; (formEval s f2 ))\"| <br>\nevalImp:\"formEval s (implyForm f1 f2) = ( (formEval s f1 ) \\&lt;longrightarrow&gt; (formEval s f2 ))\" | <br>\n\"formEval s chaos =True\" </p>\n<p>by pat_completeness auto <br>\ntermination by lexicographic_order </p>\n<p>For your convenience, I also   attaches the file. </p>\n<p>regards!</p>\n<p><a href=\"mailto:lyj238@ios.ac.cn\">lyj238@ios.ac.cn</a><br>\n<a href=\"/user_uploads/14278/yRDttIbx2EBdWmYGDMAntszh/test.thy\">test.thy</a></p>",
        "id": 294632162,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661158735
    },
    {
        "content": "<p>From: Andreas Lochbihler &lt;<a href=\"mailto:andreas.lochbihler@inf.ethz.ch\">andreas.lochbihler@inf.ethz.ch</a>&gt;<br>\nThe problem is that your function might indeed not terminate. The problem is that your <br>\ncase for funExp takes a list of subexpressions, but there are no checks that there are <br>\nindeed sufficiently many operands in the list (which you access with ! 0 and ! 1). If, <br>\nsay, the list of subexpressions is empty, then ! 0 is not specified and could in theory <br>\nreturn the same expression again. Either you change your datatype to make sure that there <br>\nare always sufficiently many operands or include checks in the function definition.</p>\n<p>Hope this helps,<br>\nAndreas</p>",
        "id": 294632184,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661158741
    },
    {
        "content": "<p>From: Andreas Lochbihler &lt;<a href=\"mailto:andreas.lochbihler@inf.ethz.ch\">andreas.lochbihler@inf.ethz.ch</a>&gt;<br>\nThe problem is that your function might indeed not terminate. The problem is that your <br>\ncase for funExp takes a list of subexpressions, but there are no checks that there are <br>\nindeed sufficiently many operands in the list (which you access with ! 0 and ! 1). If, <br>\nsay, the list of subexpressions is empty, then ! 0 is not specified and could in theory <br>\nreturn the same expression again. Either you change your datatype to make sure that there <br>\nare always sufficiently many operands or include checks in the function definition.</p>\n<p>Hope this helps,<br>\nAndreas</p>",
        "id": 294632200,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661158747
    },
    {
        "content": "<p>From: \"<a href=\"mailto:lyj238@ios.ac.cn\">lyj238@ios.ac.cn</a>\" &lt;<a href=\"mailto:lyj238@ios.ac.cn\">lyj238@ios.ac.cn</a>&gt;<br>\nThanksï¼Œ </p>\n<p>I modify the thy file as  you pointed out</p>\n<p>it does work now.</p>\n<p><a href=\"mailto:lyj238@ios.ac.cn\">lyj238@ios.ac.cn</a><br>\n<a href=\"/user_uploads/14278/JN1JIWlEej-fUzr-NB9d12Qh/test.thy\">test.thy</a></p>",
        "id": 294632230,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661158760
    }
]