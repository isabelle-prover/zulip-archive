[
    {
        "content": "<p>From: Mikhail Chekhov &lt;<a href=\"mailto:mikhail.chekhov.w@gmail.com\">mikhail.chekhov.w@gmail.com</a>&gt;<br>\nDear All,</p>\n<p>I cannot seem to understand certain aspects of the locale interpretation<br>\nmechanism. Consider the following example (please try not to pay any<br>\nattention to the meaning of the locales, as this is a superficial<br>\nclose-to-minimal example) :</p>\n<p>theory Scratch<br>\n  imports Main<br>\nbegin</p>\n<p>locale graph =<br>\n  fixes G :: 'a and is_arr is_vertex dom cod<br>\n  assumes dom: \"is_arr G f ⟹ is_vertex G (dom G f)\"<br>\n    and cod: \"is_arr G f ⟹ is_vertex G (cod G f)\"</p>\n<p>locale op_graph = graph +<br>\n  fixes op<br>\n  assumes op_dom: \"is_arr (op G) f ⟹ is_vertex (op G) (dom (op G) f)\"<br>\n    and op_cod: \"is_arr (op G) f ⟹ is_vertex (op G) (cod (op G) f)\"<br>\nbegin</p>\n<p>sublocale opop: graph ‹op (op G)› is_arr is_vertex cod dom<br>\n  sorry</p>\n<p>thm opop.dom<br>\n(<em>is_arr (op (op G)) ?f ⟹ is_vertex (op (op G)) (cod (op (op G)) ?f)</em>)</p>\n<p>end</p>\n<p>interpretation op: op_graph G is_arr is_vertex dom cod op<br>\n  for G is_arr is_vertex dom cod op<br>\n  sorry</p>\n<p>print_theorems<br>\n(*<br>\n  op.cod: ?is_arr ?G ?f ⟹ ?is_vertex ?G (?cod ?G ?f)<br>\n  op.dom: ?is_arr ?G ?f ⟹ ?is_vertex ?G (?dom ?G ?f)<br>\n  op.graph_axioms: graph ?G ?is_arr ?is_vertex ?dom ?cod<br>\n  op.op_cod: ?is_arr (?op ?G) ?f ⟹ ?is_vertex (?op ?G) (?cod (?op ?G) ?f)<br>\n  op.op_dom: ?is_arr (?op ?G) ?f ⟹ ?is_vertex (?op ?G) (?dom (?op ?G) ?f)<br>\n  op.op_graph_axioms: op_graph ?G ?is_arr ?is_vertex ?dom ?cod ?op<br>\n*)<br>\nfind_theorems name: \".opop.\" (<em>found nothing</em>)<br>\nthm op.opop.dom (<em>Undefined fact</em>)</p>\n<p>end</p>\n<p>I find it difficult to understand why the theorems associated with the<br>\ninterpretation \"opop\" inside the context of the locale op_graph do not<br>\nappear in the global context after the interpretation of op_graph itself.<br>\nIn certain similar cases, the theorems associated with the interpretation<br>\ndo appear in the global context, as I would expect. Do there exist any<br>\nmethodologies for the interpretation that avoid this problem in the example<br>\npresented above?</p>\n<p>Kind Regards,<br>\nMikhail Chekhov</p>",
        "id": 294824392,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661243725
    },
    {
        "content": "<p>From: Andreas Lochbihler &lt;<a href=\"mailto:mail@andreas-lochbihler.de\">mail@andreas-lochbihler.de</a>&gt;<br>\nDear Mikhail,</p>\n<p>interpretation and sublocale skip the generation of theorem names if the new <br>\ninterpretation is subsumed by another interpretation. In your example, the interpretation <br>\nop first generates an interpretation with arbitrary parameters as they are all listed in <br>\nthe for clause. Therefore, when the sublocale declaration is inspected, it finds that <br>\nthere's no need for the nested op interpretation as this interpretation would create <br>\ntheorems that are instances of the more general ones that are aleady available. This is <br>\nhard-coded into the locale mechanism and cannot be configured. The details of this <br>\nround-up algorithm are described in Clemens Ballarin's JAR paper: <br>\n<a href=\"http://www21.in.tum.de/~ballarin/publications/jar2013.pdf\">http://www21.in.tum.de/~ballarin/publications/jar2013.pdf</a></p>\n<p>Best,<br>\nAndreas</p>",
        "id": 294824428,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661243743
    },
    {
        "content": "<p>From: Mikhail Chekhov &lt;<a href=\"mailto:mikhail.chekhov.w@gmail.com\">mikhail.chekhov.w@gmail.com</a>&gt;<br>\nDear Andreas Lochbihler,</p>\n<p>Thank you for the explanation and for providing the reference. Regrettably,<br>\nI was aware of the part of the algorithm that you mentioned. Therefore,<br>\nmost likely, at the time of asking, I became wrongly convinced that it is<br>\nnot applicable to my use case. Please accept my apologies for the confusion.</p>\n<p>Kind Regards,<br>\nMikhail Chekhov</p>",
        "id": 294824513,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661243767
    }
]