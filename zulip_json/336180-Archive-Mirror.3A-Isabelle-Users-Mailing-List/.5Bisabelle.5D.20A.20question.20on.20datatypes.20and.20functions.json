[
    {
        "content": "<p>From: \"Eugene W. Stark\" &lt;<a href=\"mailto:isabelle-users@starkeffect.com\">isabelle-users@starkeffect.com</a>&gt;<br>\nI have gotten a bit stuck on something, and would be grateful for any<br>\nadvice from people who are more experienced at using the datatype and<br>\nfunction package.</p>\n<p>My context is the following definitions (theory file attached),<br>\nwhich I have abstracted from a larger setting:</p>\n<p>datatype (discs_sels) 'a \"term\" =<br>\n      V 'a<br>\n    | U<br>\n    | T \"'a term * 'a term\"<br>\n    | C \"'a term * 'a term\"<br>\n    | L \"'a term\"<br>\n    | L' \"'a term\"<br>\n    | R \"'a term\"<br>\n    | R' \"'a term\"<br>\n    | A \"'a term * 'a term * 'a term\"<br>\n    | A' \"'a term * 'a term * 'a term\"</p>\n<p>primrec I :: \"'a term ⇒ bool\"<br>\n    where \"I (V x) = True\"<br>\n        | \"I U = True\"<br>\n        | \"I (T tu) = (λtu. fst tu ∧ snd tu) (map_prod I I tu)\"<br>\n        | \"I (C tu) = False\"<br>\n        | \"I (L t) = False\"<br>\n        | \"I (L' t) = False\"<br>\n        | \"I (R t) = False\"<br>\n        | \"I (R' t) = False\"<br>\n        | \"I (A tuv) = False\"<br>\n        | \"I (A' tuv) = False\"</p>\n<p>fun F :: \"'a term ⇒ 'a term\"<br>\n    where \"F (T (T (a, b), c)) = A (a, b, c)\"<br>\n        | \"F (T (U, b)) = L b\"<br>\n        | \"F (T (a, U)) = R a\"<br>\n        | \"F (T (a, b)) = (if I (F a) then T (a, F b) else T (F a, b))\"<br>\n        | \"F a = a\"</p>\n<p>I would like to prove the following lemma, which (hopefully) says that<br>\nif we don't match the first three cases in the definition of F, then<br>\nF (T (a, b)) is governed by the fourth case.</p>\n<p>lemma<br>\n    assumes \"¬is_T a\" and \"a ≠ U\" and \"b ≠ U\"<br>\n    shows \"F (T (a, b)) = (if I (F a) then T (a, F b) else T (F a, b))\"<br>\n      sorry</p>\n<p>I have not been successful at getting the system to prove this.  The definition<br>\nof F expands into a substantial number of cases, and I don't know how to<br>\nguide the system through these cases, have it eliminate the ones that are<br>\nruled out by the hypotheses, and verify the stated conclusion for the remaining<br>\nones.  I don't really want to type a long proof that involves the manual<br>\nenumeration of each of the cases in the expansion of F.</p>\n<p>I have tried various reformulations of the definitions, but pretty much keep<br>\ngetting stuck on the same thing.  Hopefully someone on the list can give me<br>\na hint as to how I could approach this.  Thanks for any help you can offer.</p>\n<p>- Gene Stark<br>\n<a href=\"/user_uploads/14278/eWaNH1WWdmou6ANuhFMLw-5M/Question.thy\">Question.thy</a></p>",
        "id": 294691209,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661177849
    },
    {
        "content": "<p>From: Dmitriy Traytel &lt;<a href=\"mailto:traytel@inf.ethz.ch\">traytel@inf.ethz.ch</a>&gt;<br>\nHi Gene,</p>\n<p>how about</p>\n<p>using assms by (cases a; cases b; simp)</p>\n<p>Dmitriy</p>",
        "id": 294691226,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661177855
    },
    {
        "content": "<p>From: \"Eugene W. Stark\" &lt;<a href=\"mailto:isabelle-users@starkeffect.com\">isabelle-users@starkeffect.com</a>&gt;<br>\nWell then, that is another trick for my toolbox.<br>\nThank you very much!</p>\n<p>- Gene Stark</p>",
        "id": 294691239,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661177861
    }
]