[
    {
        "content": "<p>From: <a href=\"mailto:munddr@googlemail.com\">munddr@googlemail.com</a><br>\nHi,</p>\n<p>I'm trying to just fix a functional variable in a proof as follows:</p>\n<p>typedecl S<br>\ntypedecl T</p>\n<p>consts<br>\nG :: \"S * T =&gt; real\"<br>\ns :: T<br>\nf :: T</p>\n<p>locale A =<br>\nfixes p :: Obj<br>\nassumes cons: \"!! t1 t2. G(p,t1) = G(p,t2)\"</p>\n<p>locale B =<br>\n...</p>\n<p>lemma A_B_inconsistent:<br>\nassumes \"A p\"<br>\nshows \"False\"<br>\nproof -<br>\nfix func<br>\ninterpret localA: A p<br>\nby fact<br>\ninterpret localB: B p<br>\nby fact<br>\nshow \"False\"<br>\nproof -<br>\nhave \"func(p,s) = func(p,f)\"<br>\nusing localA.cons<br>\nby auto<br>\nqed<br>\nnext<br>\n...</p>\n<p>Does anyone know how to unify 'func' to G and s/f to the second argument?  <br>\nWhy can't auto unify them?</p>\n<p>Any help will be much appreciated.</p>\n<p>Thank you<br>\nJohn</p>",
        "id": 294097352,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660832706
    },
    {
        "content": "<p>From: Lawrence Paulson &lt;<a href=\"mailto:lp15@cam.ac.uk\">lp15@cam.ac.uk</a>&gt;<br>\nIn your example, func is fixed and therefore it cannot be unified with anything.</p>\n<p>It isn't easy to introduce unifiable variables in Isar.<br>\nLarry Paulson</p>",
        "id": 294097375,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660832712
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nBecause auto (and the Isar proof language in general) observe the logical <br>\nscopes of abstract entities.  In the context of your proof, \"func\", \"G\", <br>\n\"s\", \"f\" are all fixed, to there is no way to instantiate them (via <br>\nunification or other means). While global \"consts\" can never be <br>\ninstantiated without leaving the background theory itself, a locally fixed <br>\nentity like \"func\" becomes arbitrary after leaving it scope.  Cf. the <br>\nfollowing canonical Isar pattern:</p>\n<p>{<br>\n     fix x<br>\n     have \"B x\" sorry<br>\n   }<br>\n   have \"B a\" by fact</p>\n<p>Anyway, I couldn't see what you where trying to do.  Can you explain the <br>\nreasoning informally?</p>\n<p>Makarius</p>",
        "id": 294097389,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660832718
    },
    {
        "content": "<p>From: John Munroe &lt;<a href=\"mailto:munddr@googlemail.com\">munddr@googlemail.com</a>&gt;<br>\nI see. What I'm trying to do is the following:</p>\n<p>Given the following locales (formalising some (possibly wrong) physics<br>\ntheories and (possibly wrong) experiments:</p>\n<p>typedecl Obj<br>\ntypedecl Energy<br>\ntypedecl Time</p>\n<p>consts<br>\nVel :: \"Obj * Time =&gt; real\"<br>\nHeight :: \"Obj * Time =&gt; real\"<br>\nTE :: \"Obj * Time =&gt; real\"<br>\nPE :: \"Obj * Time =&gt; real\"<br>\nKE :: \"Obj * Time =&gt; real\"<br>\nMass :: \"Obj =&gt; real\"<br>\nG :: real<br>\nstart :: Time<br>\nfinish :: Time</p>\n<p>locale A =<br>\n  fixes p :: Obj<br>\n  assumes te: \"!!t. TE(p,t) = PE(p,t) + KE(p,t)\"<br>\n  and pe: \"!!t. PE(p,t) = Mass(p)<em>G</em>Height(p,t)\"<br>\n  and ke: \"!!t. KE(p,t) = Mass(p)<em>Vel(p,t)</em>Vel(p,t)\"<br>\n  and cons: \"!! t1 t2. TE(p,t1) = TE(p,t2)\"</p>\n<p>locale B =<br>\n  fixes p :: Obj<br>\n  assumes vstart: \"Vel(p,start) = 0\"<br>\n  and vfinish: \"Vel(p,finish) = 0\"<br>\n  and hfinish: \"Height(p,finish) = 0\"<br>\n  and mass: \"Mass(p) &gt; 0\"<br>\n  and height: \"Height(p,start) &gt; 0\"</p>\n<p>I want to prove a theorem that relates the two, e.g., there's a<br>\nfunction such that it equals to v1 in locale A but equals to v2 in<br>\nlocale B, and v1 ~= v2. The two locales can't be merged because<br>\ntogether they would be inconsistent. Is it possible to do it with<br>\nIsar?</p>\n<p>Any help will be much appreciated.</p>\n<p>Thank you<br>\nJohn</p>",
        "id": 294097408,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660832725
    }
]