[
    {
        "content": "<p>From: \"Thiemann, Rene\" &lt;<a href=\"mailto:Rene.Thiemann@uibk.ac.at\">Rene.Thiemann@uibk.ac.at</a>&gt;<br>\nDear all,</p>\n<p>here is a short report on my experience after updating all of IsaFoR from <br>\nIsabelle 2017 to Isabelle 2018 RC0.</p>\n<ul>\n<li>\n<p>In total, the transition went quite smooth by using the information<br>\n  that was provided in the NEWS file. <br>\n  It took only 12 hours to update the 213k lines of theory files,<br>\n  including IsaFoR-compilation times. </p>\n</li>\n<li>\n<p>The tools “isabelle update_op”, Rafal Kolanski’s “goto_error” macro, and<br>\n  the indication of error-free theories via bold-boxes in the Theories-panel <br>\n  were all very helpful.</p>\n</li>\n<li>\n<p>The most tedious update task was changing all the occurrences of “def” <br>\n  into “define”. In particular, the duplication of the name was annoying,<br>\n  e.g., changing &lt; def \\&lt;sigma&gt; == some_exp &gt; into &lt; define \\&lt;sigma&gt; where \"\\&lt;sigma&gt; == some_exp” &gt;.<br>\n  If possible, it would be nice to have a short form available in Isabelle 2018 like<br>\n  it is possible with “definition”: &lt; define \"\\&lt;sigma&gt; = some_exp” &gt; would be nice.</p>\n</li>\n<li>\n<p>I would have expected a statement in the NEWS file <br>\n  on the necessary import of \"HOL-Library.Lattice_Syntax”.</p>\n</li>\n<li>\n<p>The most difficult update was the change of the “rewrites” and “defines” <br>\n  conditions in locale interpretations where it now does not seem possible<br>\n  anymore, to define “rewrite\"-rules that depend on newly defined constants<br>\n  from the “defines” part. <br>\n  (I wrote a separate e-mail to Clemens B. on this issue)</p>\n</li>\n<li>\n<p>The most visible impact from our side is the deletion of Code_Char.<br>\n  The result is that our generated code became</p>\n<ul>\n<li>3x larger: from 2575550 bytes to 7848600 bytes</li>\n<li>\n<p>much less readable: compare the previous string <br>\n       “ is symbol …” <br>\n  in the generated code which now became<br>\n       [Char False False False False False True False False,<br>\n        Char True False False True False True True False,<br>\n        Char True True False False True True True False,<br>\n        Char False False False False False True False False,<br>\n        Char True True False False True True True False, …]<br>\n  where every character is expanded into a whole line</p>\n</li>\n<li>\n<p>1.5x slower on average, when running on it on an 2359 examples (30 min before, now 45 min)</p>\n</li>\n</ul>\n</li>\n</ul>\n<p>Cheers,<br>\nRené</p>",
        "id": 294735396,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661189617
    },
    {
        "content": "<p>From: Florian Haftmann &lt;<a href=\"mailto:florian.haftmann@informatik.tu-muenchen.de\">florian.haftmann@informatik.tu-muenchen.de</a>&gt;<br>\nHi Rene,</p>\n<p>thanks for your feedback.</p>\n<blockquote>\n<ul>\n<li>The most tedious update task was changing all the occurrences of “def” &gt;   into “define”. In particular, the duplication of the name was<br>\nannoying,&gt;   e.g., changing &lt; def \\&lt;sigma&gt; == some_exp &gt; into &lt; define<br>\n\\&lt;sigma&gt; where \"\\&lt;sigma&gt; == some_exp” &gt;.&gt;   If possible, it would be<br>\nnice to have a short form available in Isabelle 2018 like&gt;   it is<br>\npossible with “definition”: &lt; define \"\\&lt;sigma&gt; = some_exp” &gt; would be nice.</li>\n</ul>\n</blockquote>\n<p>This coincides with my personal experience; but maybe it appears less<br>\ntedious when writing new proofs instead of migrating existing ones.</p>\n<blockquote>\n<ul>\n<li>I would have expected a statement in the NEWS file &gt;   on the necessary import of \"HOL-Library.Lattice_Syntax”.</li>\n</ul>\n</blockquote>\n<p>Well, this import has always been necessary. The only difference that<br>\nmight have slipped in is that an existing session used to import<br>\nLattice_Syntax and now no longer does; do you have more detail at hand<br>\n(or maybe point to a commit in IsaFoR where this had to be introduced)?</p>\n<blockquote>\n<ul>\n<li>The most difficult update was the change of the “rewrites” and “defines” &gt;   conditions in locale interpretations where it now does not seem<br>\npossible&gt;   anymore, to define “rewrite\"-rules that depend on newly<br>\ndefined constants&gt;   from the “defines” part. &gt;   (I wrote a separate<br>\ne-mail to Clemens B. on this issue)</li>\n</ul>\n</blockquote>\n<p>Admittedly when observing that refinement I didn't realize that the<br>\nchanged syntax would have that consequence.</p>\n<blockquote>\n<ul>\n<li>The most visible impact from our side is the deletion of Code_Char.&gt;   The result is that our generated code became&gt;   - 3x larger: from<br>\n2575550 bytes to 7848600 bytes&gt;   - much less readable: compare the<br>\nprevious string &gt;          “ is symbol …” &gt;     in the generated code<br>\nwhich now became&gt;          [Char False False False False False True<br>\nFalse False,&gt;           Char True False False True False True True<br>\nFalse,&gt;           Char True True False False True True True False,&gt;<br>\n     Char False False False False False True False False,&gt;<br>\nChar True True False False True True True False, …]&gt;     where every<br>\ncharacter is expanded into a whole line&gt;   - 1.5x slower on average,<br>\nwhen running on it on an 2359 examples (30 min before, now 45 min)</li>\n</ul>\n</blockquote>\n<p>What the NEWS file announces unspectacularly as »Clarified relationship<br>\nof characters, strings and code generation« is indeed the elimination of<br>\nan inconsistency in code generation (8-bit characters in Isabelle/HOL<br>\nvs. a lot of different notions about characters in target languages).<br>\nThe short answer is: if you want to have target language string<br>\nliterals, use type String.literal. For the longer story, maybe we could<br>\nhave a phone chat on that issue?</p>\n<p>Cheers,<br>\n    Florian<br>\n<a href=\"/user_uploads/14278/AD1COWxDfbC0Azc_MP4i6hxA/signature.asc\">signature.asc</a></p>",
        "id": 294735410,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661189623
    },
    {
        "content": "<p>From: \"Thiemann, Rene\" &lt;<a href=\"mailto:Rene.Thiemann@uibk.ac.at\">Rene.Thiemann@uibk.ac.at</a>&gt;<br>\nHi Florian,</p>\n<p>thanks for your answers. </p>\n<blockquote>\n<blockquote>\n<ul>\n<li>The most tedious update task was changing all the occurrences of “def”<br>\n  into “define”. </li>\n</ul>\n</blockquote>\n<p>This coincides with my personal experience; but maybe it appears less<br>\ntedious when writing new proofs instead of migrating existing ones.</p>\n</blockquote>\n<p>That might be the case. </p>\n<blockquote>\n<blockquote>\n<ul>\n<li>I would have expected a statement in the NEWS file on the necessary import<br>\n  of \"HOL-Library.Lattice_Syntax”.</li>\n</ul>\n</blockquote>\n<p>Well, this import has always been necessary. The only difference that<br>\nmight have slipped in is that an existing session used to import<br>\nLattice_Syntax and now no longer does; do you have more detail at hand<br>\n(or maybe point to a commit in IsaFoR where this had to be introduced)?</p>\n</blockquote>\n<p>Ah, I see. I figured out that the import of <br>\n\"HOL-Cardinals.Wellorder_Extension” was the reason: </p>\n<p>In Isabelle 2017, this transitively imports<br>\n  HOL-Cardinals.Order_Union -&gt; HOL.Order_Relation -&gt;* Lattice_Syntax</p>\n<p>whereas in Isabelle 2018 we have<br>\n  HOL-Cardinals.Order_Union -&gt; Main</p>\n<blockquote>\n<blockquote>\n<ul>\n<li>The most visible impact from our side is the deletion of Code_Char.</li>\n</ul>\n</blockquote>\n<p>What the NEWS file announces unspectacularly as »Clarified relationship<br>\nof characters, strings and code generation« is indeed the elimination of<br>\nan inconsistency in code generation (8-bit characters in Isabelle/HOL<br>\nvs. a lot of different notions about characters in target languages).</p>\n</blockquote>\n<p>Short remark on this: we also some input files which used 8-bit characters,<br>\ne.g., XML-files with comments having the name “René” in it.</p>\n<p>On these files, the current Haskell binary just crashes with a non-informative<br>\n\"Non-exhaustive patterns in function ord” error. Perhaps one can define<br>\nord in a way that leads to a more informative error message.</p>\n<blockquote>\n<p>The short answer is: if you want to have target language string<br>\nliterals, use type String.literal.</p>\n</blockquote>\n<p>Okay, this is a possible alternative, but it will become tedious for us: </p>\n<ul>\n<li>adjust all error messages within IsaFoR</li>\n<li>adjust the XML-Parser</li>\n<li>change the Show-AFP-entry and the show-class from “string” to “String.literal”?</li>\n</ul>\n<blockquote>\n<p>For the longer story, maybe we could have a phone chat on that issue?</p>\n</blockquote>\n<p>That would be nice, but first I also want to discuss this issue here in Innsbruck<br>\nto get a clear idea on possible actions and consequences. And this discussion won’t<br>\nhappen this week. </p>\n<p>Cheers,<br>\nRené</p>",
        "id": 294735425,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661189629
    },
    {
        "content": "<p>From: Florian Haftmann &lt;<a href=\"mailto:florian.haftmann@informatik.tu-muenchen.de\">florian.haftmann@informatik.tu-muenchen.de</a>&gt;<br>\nHi Rene,</p>\n<blockquote>\n<p>Ah, I see. I figured out that the import of &gt; \"HOL-Cardinals.Wellorder_Extension” was the reason: &gt; &gt; In Isabelle<br>\n2017, this transitively imports&gt;   HOL-Cardinals.Order_Union -&gt;<br>\nHOL.Order_Relation -&gt;* Lattice_Syntax&gt; &gt; whereas in Isabelle 2018 we<br>\nhave&gt;   HOL-Cardinals.Order_Union -&gt; Main</p>\n</blockquote>\n<p>I currently wonder how a corresponding generic, instructive and<br>\nsearchable (!) NEWS entry should look like.</p>\n<blockquote>\n<blockquote>\n<blockquote>\n<ul>\n<li>The most visible impact from our side is the deletion of Code_Char.</li>\n</ul>\n</blockquote>\n<p>What the NEWS file announces unspectacularly as »Clarified relationship<br>\nof characters, strings and code generation« is indeed the elimination of<br>\nan inconsistency in code generation (8-bit characters in Isabelle/HOL<br>\nvs. a lot of different notions about characters in target languages).</p>\n</blockquote>\n<p>Short remark on this: we also some input files which used 8-bit characters,<br>\ne.g., XML-files with comments having the name “René” in it.</p>\n<p>On these files, the current Haskell binary just crashes with a non-informative<br>\n\"Non-exhaustive patterns in function ord” error. Perhaps one can define<br>\nord in a way that leads to a more informative error message.</p>\n<blockquote>\n<p>The short answer is: if you want to have target language string<br>\nliterals, use type String.literal.</p>\n</blockquote>\n<p>Okay, this is a possible alternative, but it will become tedious for us: <br>\n- adjust all error messages within IsaFoR<br>\n- adjust the XML-Parser<br>\n- change the Show-AFP-entry and the show-class from “string” to “String.literal”?</p>\n</blockquote>\n<p>well, if the story is about <em>parsing</em>, String.literal might not be the<br>\nultimate solution.</p>\n<p>Is the application tailored towards Haskell?  Then a more specific<br>\nsolution could be established by mapping Isabelle/HOL's char to a really<br>\nspecific Haskell type.</p>\n<p>Cheers,<br>\n    Florian<br>\n<a href=\"/user_uploads/14278/a-n9gvGry502GcPdPx8hnI5w/signature.asc\">signature.asc</a></p>",
        "id": 294735470,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661189642
    }
]