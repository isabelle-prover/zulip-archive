[
    {
        "content": "<p>From: Marcin Zalewski &lt;<a href=\"mailto:marcin.zalewski@gmail.com\">marcin.zalewski@gmail.com</a>&gt;<br>\nDear Isabelle experts,</p>\n<p>This question might have been answered before, but it is rather<br>\ndifficult to search for a possible answer. I want to prove the<br>\nfollowing lemma:</p>\n<p>lemma silly: \"(1::nat) + 1 = 2\"</p>\n<p>I know that I can do \"by auto\" (or some other automatic tactic), but<br>\nthe catch is that I want to perform the proof explicitly for<br>\npedagogical reasons. It seems to be more difficult than I have<br>\nexpected. I am able to see the proof term generated by auto, but the<br>\nproof starts with equal_elim, which I have no idea how to apply. I<br>\nwould be extremely grateful for some direction on how to proceed with<br>\nan explicit proof of the above lemma. Is it even practical?</p>\n<p>Thank you,<br>\nMarcin</p>",
        "id": 294108840,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660836117
    },
    {
        "content": "<p>From: Lawrence Paulson &lt;<a href=\"mailto:lp15@cam.ac.uk\">lp15@cam.ac.uk</a>&gt;<br>\nI wonder what you mean by pedagogical reasons. If you want to teach the basics of Peano arithmetic, just do it on paper. You don't need Isabelle to carry out a two step proof. If you imagine that this would be a way to teach the use of Isabelle, I would disagree. The way to prove this sort of trivial fact is indeed using auto. There are plenty of other examples that you could use to demonstrate basic Isabelle skills.</p>\n<p>Even so, if you would like to step through the basics of this proof, I first suggest that you state the theorem explicitly using the successor function:</p>\n<p>lemma silly: \"(Suc 0) + (Suc 0) = (Suc (Suc 0))\"</p>\n<p>Then perform a couple of substitutions using the theorems add_0 and add_Suc.</p>\n<p>Larry Paulson</p>",
        "id": 294108867,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660836122
    },
    {
        "content": "<p>From: Lawrence Paulson &lt;<a href=\"mailto:lp15@cam.ac.uk\">lp15@cam.ac.uk</a>&gt;<br>\nI'm glad you were able to work things out.</p>\n<p>It's important to recognise that a proof generated by an automated procedure will seldom look natural or simple. Uniform proof procedures usually produce many unnecessary steps.</p>\n<p>Larry Paulson</p>",
        "id": 294108912,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660836128
    },
    {
        "content": "<p>From: Marcin Zalewski &lt;<a href=\"mailto:marcin.zalewski@gmail.com\">marcin.zalewski@gmail.com</a>&gt;<br>\nThanks.</p>\n<p>I actually figured out what I wanted soon after I have sent my<br>\nmessage. I used the two substitutions as you suggest (on the restated<br>\nlemma since I soon figured out that dealing with literals makes the<br>\nproof term too complex), followed by reflection, and interleaved this<br>\nwith full_prf between each step. That helped me to finally understand<br>\nexactly (I think) how Isabelle works under the hood. :) Seeing a full<br>\nproof term for this simple theorem, looking at thm.ML in Pure, and<br>\ngoing back to the current and the old manuals (the old one to<br>\nunderstand that prf %% prf corresponds to ==&gt;) helped me to get the<br>\n\"pedagogical\" effect of understanding Isabelle much better. Now I<br>\nunderstand that the foundations are not that complicated, but it<br>\nhelped to see things in action.</p>\n<p>--Marcin</p>",
        "id": 294108927,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660836134
    }
]