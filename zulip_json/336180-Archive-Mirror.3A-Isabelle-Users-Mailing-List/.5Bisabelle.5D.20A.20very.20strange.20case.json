[
    {
        "content": "<p>From: li yongjian &lt;<a href=\"mailto:lyj238@gmail.com\">lyj238@gmail.com</a>&gt;<br>\nDear Isabelle Expert,</p>\n<p>I meet a very strange case (in Isabelle2009):</p>\n<p>I can not prove the following simple lemma:</p>\n<p>lemma test:\"[|\\&lt;forall&gt; L0. (single_valued   (set (zip L L0 ))) |]<br>\n==&gt; (single_valued (set (zip L L0)))\"<br>\n  by(drule spec,simp)<br>\n  ----after using the command, Isabelle says failure.</p>\n<p>But I can prove a more general lemma;</p>\n<p>lemma test1:\"[|\\&lt;forall&gt; L0. (P   (set (zip L L0 ))) |]<br>\n\\&lt;Longrightarrow&gt;( P (set (zip L L0)))\"<br>\n  by(drule spec,simp)<br>\n  ---the command passes in Isabelle.</p>\n<p>I really can not understand this problem, is it a bug?</p>\n<p>Yongjian Li</p>",
        "id": 294108761,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660836085
    },
    {
        "content": "<p>From: Lawrence Paulson &lt;<a href=\"mailto:lp15@cam.ac.uk\">lp15@cam.ac.uk</a>&gt;<br>\nWhen this sort of thing happens, it is a good idea to enable \"show types\". You then discover that these two variables have got different types. </p>\n<p>goal (1 subgoal):</p>\n<ol>\n<li>single_valued (set (zip L ?L0.0)) ==&gt; single_valued (set (zip L L0))<br>\nvariables:<br>\n  L0 :: 'c list<br>\n  ?L0.0 :: 'a list<br>\n  L :: 'b list</li>\n</ol>\n<p>You can correct the situation by constraining their types explicitly.</p>\n<p>lemma test:\"[|\\&lt;forall&gt; L0::'a list. (single_valued   (set (zip L L0 ))) |]<br>\n==&gt; (single_valued (set (zip L (L0::'a list))))\"</p>\n<p>The polymorphism of the predicate single_valued allows your situation to occur. The abstract predicate P is not polymorphic.</p>\n<p>Larry Paulson</p>",
        "id": 294108776,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660836091
    }
]