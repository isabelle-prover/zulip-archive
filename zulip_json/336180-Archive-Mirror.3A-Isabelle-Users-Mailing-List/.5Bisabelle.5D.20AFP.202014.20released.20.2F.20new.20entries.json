[
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\nThe Archive of Formal proofs is now available for Isabelle2014 at <a href=\"http://afp.sf.net\">http://afp.sf.net</a>.</p>\n<p>The following development entries are now available as release versions from the<br>\nfront page:</p>\n<hr>\n<p>Skew Heap<br>\nTobias Nipkow</p>\n<p>Skew heaps are an amazingly simple and lightweight implementation of priority<br>\nqueues. They were invented by Sleator and Tarjan [SIAM 1986] and have<br>\nlogarithmic amortized complexity. This entry provides executable and verified<br>\nfunctional skew heaps. The amortized complexity of skew heaps is analyzed in the<br>\nAFP entry Amortized Complexity.<br>\n<a href=\"http://afp.sourceforge.net/entries/Skew_Heap.shtml\">http://afp.sourceforge.net/entries/Skew_Heap.shtml</a></p>\n<hr>\n<p>Splay Tree<br>\nTobias Nipkow</p>\n<p>Splay trees are self-adjusting binary search trees which were invented by<br>\nSleator and Tarjan [JACM 1985]. This entry provides executable and verified<br>\nfunctional splay trees. The amortized complexity of splay trees is analyzed in<br>\nthe AFP entry Amortized Complexity.<br>\n<a href=\"http://afp.sourceforge.net/entries/Splay_Tree.shtml\">http://afp.sourceforge.net/entries/Splay_Tree.shtml</a></p>\n<hr>\n<p>Amortized Complexity Verified<br>\nTobias Nipkow</p>\n<p>A framework for the analysis of the amortized complexity of (functional) data<br>\nstructures is formalized in Isabelle/HOL and applied to a number of standard<br>\nexamples and to two non-trivial ones: skew heaps and splay trees. In the same<br>\nspirit we show that the move-to-front algorithm for the list update problem is<br>\n2-competitive.</p>\n<p>A preliminary paper describing this research has been presented at the Isabelle<br>\nWorkshop 2014.<br>\n<a href=\"http://afp.sourceforge.net/entries/Amortized_Complexity.shtml\">http://afp.sourceforge.net/entries/Amortized_Complexity.shtml</a></p>\n<hr>\n<p>Haskell's Show-Class in Isabelle/HOL<br>\nChristian Sternagel and René Thiemann</p>\n<p>We implemented a type-class for pretty-printing, similar to Haskell's<br>\nShow-class. Moreover, we provide instantiations for Isabelle/HOL’s standard<br>\ntypes like bool, prod, sum, nats, ints, and rats. It is further possible, to<br>\nautomatically derive pretty-printer for arbitrary user defined datatypes similar<br>\nto Haskell's \"deriving Show\".<br>\n<a href=\"http://afp.sourceforge.net/entries/Show.shtml\">http://afp.sourceforge.net/entries/Show.shtml</a></p>\n<hr>\n<p>Formal Specification of a Generic Separation Kernel<br>\nFreek Verbeek, Sergey Tverdyshev, Oto Havle, Holger Blasum, Bruno Langenstein,<br>\nWerner Stephan, Yakoub Nemouchi, Abderrahmane Feliachi, Burkhart Wolff and<br>\nJulien Schmaltz</p>\n<p>Intransitive noninterference has been a widely studied topic in the last few<br>\ndecades. Several well-established methodologies apply interactive theorem<br>\nproving to formulate a noninterference theorem over abstract academic models. In<br>\njoint work with several industrial and academic partners throughout Europe, we<br>\nare helping in the certification process of PikeOS, an industrial separation<br>\nkernel developed at SYSGO. In this process, established theories could not be<br>\napplied. We present a new generic model of separation kernels and a new theory<br>\nof intransitive noninterference. The model is rich in detail, making it suitable<br>\nfor formal verification of realistic and industrial systems such as PikeOS.<br>\nUsing a refinement-based theorem proving approach, we ensure that proofs remain<br>\nmanageable.<br>\n<a href=\"http://afp.sourceforge.net/entries/CISC-Kernel.shtml\">http://afp.sourceforge.net/entries/CISC-Kernel.shtml</a></p>",
        "id": 294291555,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660923626
    },
    {
        "content": "<p>From: Christian Sternagel &lt;<a href=\"mailto:c.sternagel@gmail.com\">c.sternagel@gmail.com</a>&gt;<br>\nThe download link, although labeled afp-2014-08-29.tar.gz does still <br>\npoint to afp-2014-07-18.tar.gz.</p>\n<p>cheers</p>\n<p>chris</p>",
        "id": 294291598,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660923638
    }
]