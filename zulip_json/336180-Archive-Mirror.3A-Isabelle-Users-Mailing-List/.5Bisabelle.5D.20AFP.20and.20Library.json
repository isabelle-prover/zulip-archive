[
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\nHi Makarius,</p>\n<p>You have concerted many if not all AFP sessions that use theories from Library <br>\nsuch that they are now based on the Library image. This means that every time a <br>\nLibrary theory changes, sonething like half the AFP needs to be rebuilt even <br>\nthough only a few of the AFP sessions may import the modified Library theory. <br>\nThis happens fairly frequently and I wonder what your rational for the change was.</p>\n<p>Tobias<br>\n<a href=\"/user_uploads/14278/Hfa0s-9JO0ggBdS-TFdixcEe/smime.p7s\">smime.p7s</a></p>",
        "id": 294715830,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661183757
    },
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\nGerwin wrote:</p>\n<p>\"Most AFP entries were already based on that, because we’d otherwise be building <br>\nHOL-Library about 50 times or so instead of only once per test. It’s a trade-off.\"</p>\n<p>Well, we would only be building a few popular entries in Library multiple times. <br>\nIndeed it is a trade-off and we win a little(?) by starting from a Library image <br>\nbut we lose big time if only a single theory in Library changes. It is a bit <br>\nlike amortized complexity: on average, you win, but in real time you may have to <br>\nwait much longer. Since Library changes frequently, I do wonder about this <br>\ntrade-off.</p>\n<p>Tobias<br>\n<a href=\"/user_uploads/14278/WOGvOnpMbcCD_YHhy0t4qra4/smime.p7s\">smime.p7s</a></p>",
        "id": 294715891,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661183763
    },
    {
        "content": "<p>From: Lars Hupel &lt;<a href=\"mailto:hupel@in.tum.de\">hupel@in.tum.de</a>&gt;<br>\nJust as a side note for your consideration: Jenkins builds the AFP incrementally, i.e., only changed sessions. A change in HOL-Library will entail a lot of sessions being rebuilt, even if just a single theory has changed.</p>\n<p>Maybe we should look into which library theories change the most or split library into multiple sessions.</p>\n<p>Cheers<br>\nLars</p>",
        "id": 294715916,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661183768
    },
    {
        "content": "<p>From: Lars Hupel &lt;<a href=\"mailto:hupel@in.tum.de\">hupel@in.tum.de</a>&gt;<br>\nJust as a side note for your consideration: Jenkins builds the AFP incrementally, i.e., only changed sessions. A change in HOL-Library will entail a lot of sessions being rebuilt, even if just a single theory has changed.</p>\n<p>Maybe we should look into which library theories change the most or split library into multiple sessions.</p>\n<p>Cheers<br>\nLars</p>",
        "id": 294715934,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661183774
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nOn 28/08/17 08:15, Tobias Nipkow wrote:</p>\n<blockquote>\n<p>Gerwin wrote:</p>\n<p>\"Most AFP entries were already based on that, because we’d otherwise be<br>\nbuilding HOL-Library about 50 times or so instead of only once per test.<br>\nIt’s a trade-off.\"</p>\n</blockquote>\n<p>This is indeed the traditional explanation for providing various<br>\n\"library\" images in Isabelle and using them in the applications, e.g. in<br>\nAFP. In recent years we have seen a trend of increasing that quite<br>\nsubstantially.</p>\n<p>In particular, Isabelle2017 will have the following important starting<br>\npoints for applications:</p>\n<p>HOL<br>\n  HOL-Library<br>\n  HOL-Computational-Algebra<br>\n  HOL-Analysis | HOL-Algebra | HOL-Number_Theory | HOL-Nonstandard-Analysis</p>\n<p>After changing any of them, there will be substantial follow-up build<br>\ntimes of other sessions depending on them. This is a natural consequence<br>\nof providing good library sessions and getting lots of applications on top.</p>\n<p>There is a second aspect for the HOL-Library image only: it is somehow<br>\nthe canonical supplement to the main HOL image.</p>\n<p>Thus there are occasional tendencies in the applications to provide a<br>\nsession \"Foo\" and also \"Foo-Library\" that \"merges\" the HOL-Library<br>\naspect later on, even after building a whole stack of sessions. This<br>\ncomplicates session specifications and causes further multiplication of<br>\nbuild times. Since we cannot really merge session images, the main<br>\napproach to avoid the problem is to put HOL-Library at the very start of<br>\nthe session dependencies and to remove the Foo-Library variant eventually.</p>\n<blockquote>\n<p>Well, we would only be building a few popular entries in Library<br>\nmultiple times. Indeed it is a trade-off and we win a little(?) by<br>\nstarting from a Library image but we lose big time if only a single<br>\ntheory in Library changes.</p>\n</blockquote>\n<p>This sounds more like the file-based build model of Coq, but without<br>\nactual \"object files\" to store intermediate states.</p>\n<p>It is a theoretical question if we can move over there, practically we<br>\ncan't change the fundamental approache on the spot and expect that<br>\nthings still work afterwards.</p>\n<p>(I have occasionally discussed the inherent differences of the build<br>\nmodel with the Coq guys, and am still convinced that our tradition of<br>\ndoing it scales better. Empirical proof: size and complexity of AFP today.)</p>\n<p>I do agree that in the past 1-2 years there is an increasing pain to be<br>\nfelt in maintaining Isabelle + AFP, up to the point that less<br>\nmaintenance and fewer important reforms happen. In the past 3 years, the<br>\nsize of Isabelle + AFP material has doubled, while build and test<br>\ninfrastructure had stagnated since 2012. Only recently this has improved<br>\nagain (but I don't mean the Jenkins setup, which I simply ignore).</p>\n<p>What would greatly help is to have proper time measurement for nightly<br>\nbuilds of AFP within the regular Isabelle cronjob, with its persistent<br>\ndatabase support in the background (see also<br>\n<a href=\"http://isabelle.in.tum.de/devel/build_status\">http://isabelle.in.tum.de/devel/build_status</a>). The software is all there<br>\nin Isabelle/Scala; lacking is only some half-decent test hardware (e.g.<br>\na cloud node with 8 cores + 64 GB should be sufficient).</p>\n<p>At some point, \"isabelle build\" could use the persistent timing<br>\ninformation from the database to make better scheduling of big builds,<br>\nincluding adhoc changes to the actual session graph (e.g. changing<br>\nparent sessions vs. session imports).</p>\n<p>Makarius</p>",
        "id": 294715949,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661183781
    },
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\nOn 28/08/2017 09:07, Lars Hupel wrote:</p>\n<blockquote>\n<p>Maybe we should look into which library theories change the most or split <br>\nlibrary into multiple sessions.</p>\n</blockquote>\n<p>Thank you for this constructive suggestion. What would happen if there was an <br>\nAFP_Library with only those Library theories that are needed at least twice in <br>\nthe AFP? I analyzed the sources. Only half the theories in Library are used at <br>\nleast twice in the AFP. Then I analyzed the last 123 builds on Jenkins: 13 of <br>\nthem did not involve any theory in AFP_Library and the AFP build would have <br>\ncompleted much more quickly (often in a few minutes rater than 1 hour). There is <br>\nan argument here for a dedicated AFP_Library.</p>\n<p>Tobias</p>\n<blockquote>\n<p>Cheers<br>\nLars</p>\n<p>On 28 August 2017 08:15:10 CEST, Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt; wrote:</p>\n<p>Gerwin wrote:</p>\n<p>\"Most AFP entries were already based on that, because we’d otherwise be building<br>\n    HOL-Library about 50 times or so instead of only once per test. It’s a trade-off.\"</p>\n<p>Well, we would only be building a few popular entries in Library multiple times.<br>\n    Indeed it is a trade-off and we win a little(?) by starting from a Library image<br>\n    but we lose big time if only a single theory in Library changes. It is a bit<br>\n    like amortized complexity: on average, you win, but in real time you may have to<br>\n    wait much longer. Since Library changes frequently, I do wonder about this<br>\n    trade-off.</p>\n<p>Tobias</p>\n<p>On 27/08/2017 13:35, Tobias Nipkow wrote:</p>\n<p>Hi Makarius,</p>\n<p>You have concerted many if not all AFP sessions that use theories from<br>\n        Library<br>\n        such that they are now based on the Library image. This means that every<br>\n        time a<br>\n        Library theory changes, sonething like half the AFP needs to be rebuilt<br>\n        even<br>\n        though only a few of the AFP sessions may import the modified Library<br>\n        theory.<br>\n        This happens fairly frequently and I wonder what your rational for the<br>\n        change was.</p>\n<p>Tobias</p>\n<p><a href=\"/user_uploads/14278/4OrLEJqyqV4q9I2ezwhqASah/smime.p7s\">smime.p7s</a></p>\n</blockquote>",
        "id": 294717614,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661183800
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nSome more notes on this.</p>\n<p>The present reform of session-qualified theory names in Isabelle2017<br>\nstill allows old-fashioned unqualified imports from existing parent<br>\nsession images. It eases the upgrade of existing project sources, but it<br>\nmeans that the parent session structure still has an impact on the<br>\ntheory name space.</p>\n<p>Right after the Isabelle2017 release we can get rid of that, and parent<br>\nsessions vs. imported sessions (keyword 'sessions' in the ROOT) become<br>\ninterchangeable -- as far as logical theory names are concerned (not the<br>\ntime for loading theories).</p>\n<p>This opens many possibilities to rearrange things, either statically in<br>\nthe ROOT files, or dynamically by a smarter version of \"isabelle build\".<br>\nFor example, all AFP sessions with &lt; 30s runtime could be built in one<br>\nbig ML process, for improved parallel performance and to avoid loading<br>\nthe base session many times.</p>\n<p>There are many more possibilities, especially with full timing<br>\ninformation of all sessions, theories, commands available to the build<br>\nprocess.</p>\n<p>Makarius</p>",
        "id": 294717821,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661183854
    },
    {
        "content": "<p>From: Florian Haftmann &lt;<a href=\"mailto:florian.haftmann@informatik.tu-muenchen.de\">florian.haftmann@informatik.tu-muenchen.de</a>&gt;</p>\n<blockquote>\n<p>Maybe we should look into which library theories change the most or split library into multiple sessions.</p>\n</blockquote>\n<p>My personal experience suggests that substantial rebuilds after pull are<br>\nseldom triggered by changes to HOL-Library; most times, that is due to<br>\nchanges to HOL-Main / HOL-Complex theories — however this is not based<br>\non any accountable evidence, so it might indeed be interesting to know<br>\nwhich candidates in HOL-Library have considerable velocity.</p>\n<p>In the past, we occasionally split off sessions from HOL-Library<br>\n(sometimes also HOL-ex) as separate parts, the latest of these being<br>\nHOL-Computation_Algebra.  Though scalability always played a part in the<br>\nconsiderations, we always managed to find a conceptual distinction to<br>\nmake clear how the contents of the newly established session should look<br>\nlike.</p>\n<p>After a casual look at</p>\n<p>$ wc -l src/HOL/Library/*.thy | sort -n</p>\n<p>the following rough ideas come to my mind:</p>\n<p>a) Shift further material to Computational_Algebra, e. g. Extended* or<br>\nmaterial on orders and lattices.</p>\n<p>b) Shift material to Datastructures, e. g. RBT*</p>\n<p>c) Split off technical »utilities« like Simps_Case_Conv, Pattern_Aliases<br>\nand Code_ to  a separate session HOL-Utilities (»tools« is already used<br>\nby a different tradition).</p>\n<p>Cheers,<br>\n    Florian</p>\n<p>P. S. Since that is a post-release issue and the original issue not<br>\nrelevant for users working on stable releases, we should move this<br>\ndiscussion to isabelle-dev.<br>\n<a href=\"/user_uploads/14278/vmgd9wUybA-OBQt3xaIhliMO/signature.asc\">signature.asc</a></p>",
        "id": 294717875,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661183867
    },
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\nAs long as this is transparent, you are of course welcome to optimize \"isabelle <br>\nbuild\" for tasks like the AFP. Everything that involves changes to the AFP needs <br>\nto be discussed first.</p>\n<p>Tobias<br>\n<a href=\"/user_uploads/14278/uu9__xmXAK4CmHVU1lDOOw5V/smime.p7s\">smime.p7s</a></p>",
        "id": 294717893,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661183873
    },
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\nOn 31/08/2017 13:26, Florian Haftmann wrote:</p>\n<blockquote>\n<blockquote>\n<p>Maybe we should look into which library theories change the most or split library into multiple sessions.</p>\n</blockquote>\n<p>My personal experience suggests that substantial rebuilds after pull are<br>\nseldom triggered by changes to HOL-Library; most times, that is due to<br>\nchanges to HOL-Main / HOL-Complex theories — however this is not based<br>\non any accountable evidence, so it might indeed be interesting to know<br>\nwhich candidates in HOL-Library have considerable velocity.</p>\n</blockquote>\n<p>From my analysis of these 123 revisions, 10% of the builds could have been <br>\nreduced from 30-60 mins to a few minutes by a less bloated Library. This is <br>\nclearly not dramatic but it is helpful.</p>\n<blockquote>\n<p>In the past, we occasionally split off sessions from HOL-Library<br>\n(sometimes also HOL-ex) as separate parts, the latest of these being<br>\nHOL-Computation_Algebra.  Though scalability always played a part in the<br>\nconsiderations, we always managed to find a conceptual distinction to<br>\nmake clear how the contents of the newly established session should look<br>\nlike.</p>\n</blockquote>\n<p>I certainly support moving theories out of Library for conceptual reasons, and <br>\nit may also have the desired side effect.</p>\n<p>Concerning Data_Structures please note that this directory is dedicated to <br>\nconceptually clean and simple models of data structures and not to efficient <br>\nimplementations. Hence it is not the right home for Library/RBT*.</p>\n<p>Tobias</p>\n<blockquote>\n<p>After a casual look at</p>\n<p>$ wc -l src/HOL/Library/*.thy | sort -n</p>\n<p>the following rough ideas come to my mind:</p>\n<p>a) Shift further material to Computational_Algebra, e. g. Extended* or<br>\nmaterial on orders and lattices.</p>\n<p>b) Shift material to Datastructures, e. g. RBT*</p>\n<p>c) Split off technical »utilities« like Simps_Case_Conv, Pattern_Aliases<br>\nand Code_ to  a separate session HOL-Utilities (»tools« is already used<br>\nby a different tradition).</p>\n<p>Cheers,<br>\n  Florian</p>\n<p>P. S. Since that is a post-release issue and the original issue not<br>\nrelevant for users working on stable releases, we should move this<br>\ndiscussion to isabelle-dev.</p>\n<p><a href=\"/user_uploads/14278/oPzTdSJDoOpMV4DQ944Eq8ue/smime.p7s\">smime.p7s</a></p>\n</blockquote>",
        "id": 294717904,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661183879
    }
]