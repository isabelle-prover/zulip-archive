[
    {
        "content": "<p>From: Florian Haftmann &lt;<a href=\"mailto:florian.haftmann@informatik.tu-muenchen.de\">florian.haftmann@informatik.tu-muenchen.de</a>&gt;<br>\nHi,</p>\n<p>paths in Isabelle/ML, as observed in Isabelle2018, may contain ASCII NUL<br>\ncharacters.</p>\n<p>ML_val ‹Path.basic (chr 0)›</p>\n<p>That is not valid in POSIX. I'm uncertain whether this issue is critical.</p>\n<p>Cheers,<br>\n    Florian<br>\n<a href=\"/user_uploads/14278/lXK8b7RupYdTcdLnwgAPkgUm/signature.asc\">signature.asc</a></p>",
        "id": 294747646,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661194176
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nDid this show up in a practical application?</p>\n<p>Strings in Isabelle/ML and Isabelle/Scala may contain ASCII NUL, but the<br>\nC/C++ world out there usually excludes that.</p>\n<p>The ultimate interpretation of Path.T is up to the underlying<br>\nfile-system: Path.T cannot protect against arbitrary non-sense there.<br>\nE.g. I've occasionally seen corner cases with national \"code pages\" and<br>\narbitrary Unicode file names. It is normal and to be expected that file<br>\nnames are not 100% reliable.</p>\n<p>Makarius</p>",
        "id": 294747779,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661194219
    }
]