[
    {
        "content": "<p>From: Randy Pollack &lt;<a href=\"mailto:rpollack@inf.ed.ac.uk\">rpollack@inf.ed.ac.uk</a>&gt;<br>\nIs there syntax to abbreviate or define propositions?  E.g. I can<br>\nwrite:</p>\n<p>abbreviation<br>\n    Foo :: \"sometype =&gt; bool<br>\n  where<br>\n    \"Foo f == \\&lt;forall&gt; X Y. ... --&gt; ...\"</p>\n<p>but I would rather write something about the metalogic like:</p>\n<p>abbreviation<br>\n    Foo :: \"sometype =&gt; prop<br>\n  where<br>\n    \"Foo f == ... ==&gt; ...\"</p>\n<p>Hopefully the leading universal quantifiers are implicit, and<br>\nmeta-implication can be used in the body.</p>\n<p>Thanks,<br>\nRandy</p>",
        "id": 294076408,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660829062
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nYou can abbreviate Pure propositions, but there are some snags, because <br>\nthe concrete syntax layer assumes that prop consts are always <br>\nsyntactically distinguishable from plain terms.  You also need to quantify <br>\nexplicitly.</p>\n<p>Consider the following example:</p>\n<p>abbreviation \"TRUE == (!!A. PROP A ==&gt; PROP A)\"</p>\n<p>This defines abstract syntax for TRUE, but only at the term level, without <br>\nany embedding into the prop syntax.  You can say</p>\n<p>prop \"PROP TRUE\"</p>\n<p>but the pretty printer will not print the PROP, because TRUE as a const is <br>\nexpected to have its own distinguished notation.  Of course you can add <br>\nthat yourself, e.g. like this:</p>\n<p>notation TRUE  (\"TRUE\")</p>\n<p>Now the literal token \"TRUE\" is associated with that propositional <br>\nconstant.  As usual with mixfix syntax, you loose \"TRUE\" as plain <br>\nidentifier.</p>\n<p>Here is another example of definining a prop const via the locale <br>\nmechanism:</p>\n<p>locale FALSE = assumes \"PROP A\"</p>\n<p>In a local body free variables are implicitly quantified, and there are <br>\nspecial precautions to embed the constant into prop syntax, such that</p>\n<p>prop \"PROP FALSE\"</p>\n<p>works as expected, although it is a bit more cumbersome due to the <br>\nmandatory PROP marker.</p>\n<p>Makarius</p>",
        "id": 294076417,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660829069
    }
]