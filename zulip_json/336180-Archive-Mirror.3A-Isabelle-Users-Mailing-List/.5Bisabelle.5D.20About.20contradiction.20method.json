[
    {
        "content": "<p>From: Glauber Cabral &lt;<a href=\"mailto:glauber.sp@gmail.com\">glauber.sp@gmail.com</a>&gt;<br>\nHi everybody.</p>\n<p>I'm using Isabelle to prove HasCASL specifications and I'm still learning<br>\nhow to use both \"technologies\" to my master thesis. Sorry if this question<br>\nis too newbie, but I couldn't find any solution by myself.</p>\n<p>I've been writing proofs only with apply (method) because Isabelle is not<br>\nthe main focus right now and I thought it should be enough at this moment to<br>\nwrite proofs this way.</p>\n<p>The problem is that I could not find any example or explanation about how to<br>\nuse contradiction method. When I use it, I got 2 goals: P x y and not P x y,<br>\nand I couldn't find how to make Isabelle relates P with a function I've<br>\nalready created. Can anyone tell me where do I found any explanation or<br>\nexample to understand how it works?</p>\n<p>I'd like to ask something else that I'm not sure. If I escape a proof of a<br>\ntheorem/lemma with oops, I cannot use this thm/lemma in the next proofs,<br>\nright?Just to be sure, although I know using this without proving it would<br>\nnot make sense...</p>\n<p>Thanks in advance,<br>\nGlauber Cabral</p>",
        "id": 294062444,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660824224
    },
    {
        "content": "<p>From: Amine Chaieb &lt;<a href=\"mailto:chaieb@in.tum.de\">chaieb@in.tum.de</a>&gt;<br>\nGlauber Cabral wrote:<br>\nYes. If you want to use the fact, although unproven, you can use the <br>\n\"sorry\" method, which proves anything.</p>\n<p>Amine.</p>",
        "id": 294062525,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660824248
    },
    {
        "content": "<p>From: Lawrence Paulson &lt;<a href=\"mailto:lp15@cam.ac.uk\">lp15@cam.ac.uk</a>&gt;<br>\nYou will find it much easier if you read the examples in the Tutorial  <br>\nrather than just trying out all the different methods. The  <br>\ncontradiction method is not used very often.<br>\nLarry Paulson</p>",
        "id": 294062567,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660824260
    },
    {
        "content": "<p>From: Lawrence Paulson &lt;<a href=\"mailto:lp15@cam.ac.uk\">lp15@cam.ac.uk</a>&gt;<br>\nIf you wish to prove a theorem by contradiction, the usual approach is  <br>\nto begin with the following line:</p>\n<p>apply (rule ccontr)</p>\n<p>Its effect should be self explanatory.</p>\n<p>Larry Paulson</p>",
        "id": 294062602,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660824273
    },
    {
        "content": "<p>From: Amine Chaieb &lt;<a href=\"mailto:chaieb@in.tum.de\">chaieb@in.tum.de</a>&gt;<br>\nYou will find that the following \"scheme\" also works for Isar proofs:</p>\n<p>proof-<br>\n{assume \"~P\"<br>\n   have False &lt;proof&gt;}<br>\n  then show ?thesis by metis/blast/simp<br>\nqed</p>\n<p>Lawrence Paulson wrote:</p>",
        "id": 294062612,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660824279
    },
    {
        "content": "<p>From: Glauber Cabral &lt;<a href=\"mailto:glauber.sp@gmail.com\">glauber.sp@gmail.com</a>&gt;<br>\nDear Lawrence.</p>\n<p>I've already read the Isabelle tutorial. This method is not explained there<br>\n(as, you've told, it's not used often). And I've found only how to<br>\ninstantiate variables in a theorem, usin *rule_tac methods.</p>\n<p>I wanted to use contradiction method because proof by contradiction was the<br>\nonly way I found to prove Assymetry of Strict total order using only<br>\nIrreflexivity and Transitivity axioms.</p>\n<p>Thanks,<br>\nGlauber</p>",
        "id": 294062629,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660824291
    },
    {
        "content": "<p>From: Brian Huffman &lt;<a href=\"mailto:brianh@cs.pdx.edu\">brianh@cs.pdx.edu</a>&gt;<br>\nQuoting Glauber Cabral &lt;<a href=\"mailto:glauber.sp@gmail.com\">glauber.sp@gmail.com</a>&gt;:</p>\n<p>The \"contradiction\" method simply applies the not-elimination rule, notE:</p>\n<p>lemma notE: \"[| ~P;  P |] ==&gt; R\"</p>\n<p>Note that unlike most lemmas, the conclusion is totally unrelated to  <br>\nthe assumptions. If you write \"apply contradiction\" in an apply-style  <br>\nproof, Isabelle matches \"R\" against your current subgoal, but \"P\" is  <br>\nstill totally unconstrained, so your new subgoals will have schematic  <br>\nvariables (usually shown with question marks, like \"?P\"). In your  <br>\ncase, the \"?P\" schematic variable is parametrized over x and y because  <br>\nyour subgoal is universally quantified over those variables, and ?P is  <br>\nallowed to depend on them.</p>\n<p>Schematic variables can be instantiated at any time by matching them  <br>\nwith other rules or assumptions. For example, if you have a subgoal  <br>\nthat looks like \"~ foo ==&gt; ~ ?P\", you can discharge it by typing  <br>\n\"apply assumption\" which will instantiate ?P to foo. All occurrences  <br>\nof ?P in other subgoals will then be replaced by foo.</p>\n<p>Schematic variables can be awkward to deal with in apply-style proofs.  <br>\nInstead of \"apply contradiction\", you might prefer to explicitly  <br>\ninstantiate P using rule_tac, e.g. \"apply (rule_tac P=\"foo\" in notE)\".</p>\n<p>Alternatively, the \"contradiction\" method is more useful in Isar-style proofs:</p>\n<p>lemma<br>\n   fixes x y :: nat<br>\n   assumes A: \"x &lt; y\" and B: \"y &lt; x\"<br>\n   shows \"False\"<br>\nproof (contradiction)<br>\n   show \"x &lt; x\"<br>\n     using A B by (rule less_trans)<br>\n   show \"¬ x &lt; x\"<br>\n     by (rule less_not_refl)<br>\nqed</p>\n<p>lemma<br>\n   fixes x y :: nat<br>\n   assumes A: \"x &lt; y\" and B: \"y &lt; x\"<br>\n   shows \"False\"<br>\nproof -<br>\n   have 1: \"x &lt; x\"<br>\n     using A B by (rule less_trans)<br>\n   have 2: \"¬ x &lt; x\"<br>\n     by (rule less_not_refl)<br>\n   from 1 2 show \"False\"<br>\n     by contradiction<br>\nqed</p>\n<p>Hope this helps,</p>\n<ul>\n<li>Brian</li>\n</ul>",
        "id": 294062654,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660824301
    },
    {
        "content": "<p>From: Glauber Cabral &lt;<a href=\"mailto:glauber.sp@gmail.com\">glauber.sp@gmail.com</a>&gt;<br>\nHi Brian.</p>\n<p>Thank you for this explanation. It helped me me to understand how<br>\ncontradiction works. I've already tried to instantiate P with *rule_tac<br>\nmethods, but I guess I did some mistake and that didn't work.<br>\nThe ccontr worked for me, as it was told in the list.</p>\n<p>Best regards,<br>\nGlauber</p>",
        "id": 294062705,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660824322
    }
]