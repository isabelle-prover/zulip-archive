[
    {
        "content": "<p>From: Wenda Li &lt;<a href=\"mailto:wl302@cam.ac.uk\">wl302@cam.ac.uk</a>&gt;<br>\nDear Isabelle experts,</p>\n<p>As I have used the keyword \"undefined\" in my proofs, I am quite curious <br>\nabout its properties. The following lemma is easily proved:</p>\n<p>lemma \"(undefined::rat) ∈ ℚ  ∨ (undefined::rat) ∉ ℚ\" by auto</p>\n<p>but I cannot prove either of the following two lemmas:</p>\n<p>lemma \"(undefined::rat) ∈ ℚ\" oops</p>\n<p>lemma \"(undefined::rat) ∉ ℚ\" oops</p>\n<p>Is it true that both of the last two propositions are unprovable within <br>\nIsabelle? If it is, I think it is a fun fact about the <br>\nnon-constructivity in Isabelle.</p>\n<p>Any comment is appreciated,<br>\nWenda</p>",
        "id": 294331477,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660930415
    },
    {
        "content": "<p>From: Peter Lammich &lt;<a href=\"mailto:lammich@in.tum.de\">lammich@in.tum.de</a>&gt;<br>\nThis is true. Undefined is just some constant of type 'a <br>\n(instantiated to rat in your case), but there is no definition of it.<br>\nSo you can prove only things about undefined that you can prove for all<br>\nelements of its type. </p>\n<p>Your above example is an instance of the tautology \"P | ~P\", which is an<br>\naxiom of HOL, and completely independent of undefined or rat.</p>\n<p>In general, for some type of type variable T, you can prove \"P<br>\n(undefined::T)\", iff you can prove <br>\n\"ALL x::T. P x\". But note that this statement itself (i.e.<br>\n \"P (undefined::'a) &lt;--&gt; ALL x. P x\") <br>\nis not a theorem in HOL.</p>",
        "id": 294331506,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660930434
    },
    {
        "content": "<p>From: Christian Sternagel &lt;<a href=\"mailto:c.sternagel@gmail.com\">c.sternagel@gmail.com</a>&gt;<br>\nWell, actually, in your special case this <em>is</em> provable.</p>\n<p>lemma \"(undefined::rat) ∈ ℚ\"<br>\n     by (simp add: Rats_def)</p>\n<p>The point being that by the type constraint \"undefined::rat\" you also <br>\nconstrain \"Rats\" (i.e., ℚ) to type \"rat set\", for which we have \"Rats = <br>\n(UNIV::rat set)\".</p>\n<p>So as Peter mentioned, since this property holds for <em>any</em> rat, it also <br>\nholds for \"undefined\".</p>\n<p>cheers</p>\n<p>chris</p>",
        "id": 294331517,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660930440
    }
]