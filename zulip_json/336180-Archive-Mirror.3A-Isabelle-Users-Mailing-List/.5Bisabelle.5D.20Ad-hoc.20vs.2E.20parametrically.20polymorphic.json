[
    {
        "content": "<p>From: John Munroe &lt;<a href=\"mailto:munddr@gmail.com\">munddr@gmail.com</a>&gt;<br>\nHi</p>\n<p>I have a question about overloading. Suppose I have the following</p>\n<p>axiomatization<br>\nfoo :: \"'a =&gt; int\"</p>\n<p>locale L =<br>\nassumes<br>\nax1 : \"foo(x::nat) = 0\" and<br>\nax2 : \"foo(x::int) = 1\" and<br>\nax3 : \"foo(x::real) = 2\"</p>\n<p>Please correct or confirm my understanding of this: foo is declared as<br>\nbeing a parametrically polymorphic predicate, but the axioms in the<br>\nlocale L force foo to be ad-hoc polymorphic / overloaded. This is<br>\npossible because the assertions in a locale are hypothetical (since<br>\nthey're axioms), but within L, foo is ad-hoc polymorphic / overloaded<br>\nrather than parametrically polymorphic.</p>\n<p>So is defining foo as a method of a type class the best way to<br>\noverload foo? AFAIK type classes don't exactly implement ad-hoc<br>\npolymorphism. For instance, type classes are shown up as types and a<br>\ntype class does not need to explicitly state its behaviour for each<br>\ntype, because a type class could extend another type class. My<br>\nunderstanding of ad-hoc polymorphism / overloading is that the way a<br>\nfunction behaves must be explicitly defined for each type.</p>\n<p>Thanks</p>\n<p>John</p>",
        "id": 294221369,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660897676
    }
]