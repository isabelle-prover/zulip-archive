[
    {
        "content": "<p>From: \"Roger H.\" &lt;<a href=\"mailto:s57076@hotmail.com\">s57076@hotmail.com</a>&gt;<br>\nHi,<br>\ncan i add a definition to the simplifier?</p>\n<p>means, lets say i define a predicate \"continuous\"</p>\n<hr>\n<p>definition continuous :: ...<br>\n...</p>\n<hr>\n<p>All my lemmas need this, and everytime i need to prove lemmas , i have to add as proof method \"continuous_def\".</p>\n<p>it would be nicer if this was not neccesary to drag by every time, meaning that somehow this proof method is added to the simplifier.</p>\n<p>how can i do this?</p>\n<p>Thank you!</p>",
        "id": 294266798,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660915796
    },
    {
        "content": "<p>From: John Wickerson &lt;<a href=\"mailto:johnwickerson@cantab.net\">johnwickerson@cantab.net</a>&gt;<br>\nSomething like </p>\n<p>definition continuous where [simp]: \"continuous f = ...\"</p>\n<p>should work. Or make continuous a function (defined with \"fun\" rather than \"definition\") and it'll be added to the simplifier automatically.</p>\n<p>john</p>",
        "id": 294266813,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660915802
    },
    {
        "content": "<p>From: Manuel Eberl &lt;<a href=\"mailto:eberlm@in.tum.de\">eberlm@in.tum.de</a>&gt;<br>\nHallo,</p>\n<p>declare continuous_def[simp]</p>\n<p>Alternatively, you could also declare continuous an abbreviation instead<br>\nof a definition, then \"continuous\" would not be a separate constant, but<br>\nsimply a syntactic abbreviation for whatever it is that you defined it<br>\nto mean. However, this is mainly useful for things such as \"infinite A =<br>\n¬finite A\", I would not use it for more complex concepts.</p>\n<p>Personally, I find that adding def lemmas to the simpset is not a good<br>\nidea, since you often do not want proof methods to expand these things<br>\nby default; you lose some “control” and proof states get messy very quickly.</p>\n<p>Should you still want to add continuous_def to the simpset as described<br>\nabove, note that you can delete it from the simpset for individual<br>\ninvocations of simp, force, auto and so on with the \"del\" parameter,<br>\ne.g. \"apply (simp del: continuous_def)\" or \"apply (auto simp del:<br>\ncontinuous_def)\".</p>\n<p>Cheers,<br>\nManuel</p>",
        "id": 294266876,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660915814
    },
    {
        "content": "<p>From: Florian Haftmann &lt;<a href=\"mailto:florian.haftmann@informatik.tu-muenchen.de\">florian.haftmann@informatik.tu-muenchen.de</a>&gt;<br>\nHi Roger,</p>\n<p>On 10.01.2014 15:55, Roger H. wrote:</p>\n<blockquote>\n<p>can i add a definition to the simplifier?</p>\n<p>means, lets say i define a predicate \"continuous\"</p>\n<hr>\n<p>definition continuous :: ...<br>\n...</p>\n<hr>\n<p>All my lemmas need this, and everytime i need to prove lemmas , i have to add as proof method \"continuous_def\".</p>\n</blockquote>\n<p>you can (as others have already pointed out).</p>\n<p>But if you want to do this, maybe your definition does not make sense.<br>\nThe idea of a definition is that you establish a concept (the left hand<br>\nside) in terms of more primitive ones (the right hand side), then prove<br>\nproperties about that concept (inadvertently unfolding its definition),<br>\nbut then use those properties (which may be simp-rules, or intro-rules,<br>\nor…) to reason about that concept exclusively without doing unfolding<br>\nany longer.  If you always unfold something, it does not add any<br>\n»abstraction height« to your theory!</p>\n<p>E.g. have a look at the following examples from HOL/Nat.thy in<br>\nIsabelle2013-2:</p>\n<blockquote>\n<p>definition of_nat :: \"nat \\&lt;Rightarrow&gt; 'a\" where<br>\n  \"of_nat n = (plus 1 ^^ n) 0\"</p>\n<p>lemma of_nat_simps [simp]:<br>\n  shows of_nat_0: \"of_nat 0 = 0\"<br>\n    and of_nat_Suc: \"of_nat (Suc m) = 1 + of_nat m\"<br>\n  by (simp_all add: of_nat_def)</p>\n</blockquote>\n<p>You do not want the definition of of_nat to be unfolded, but rather the<br>\nrecursive rules in the lemma statement!</p>\n<p>For purely notational constants, you can use »abbreviation«s.</p>\n<p>Hope this helps,<br>\n    Florian<br>\n<a href=\"/user_uploads/14278/uji2jiXLnQR8_jyeZL88gYqj/signature.asc\">signature.asc</a></p>",
        "id": 294266923,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660915839
    }
]