[
    {
        "content": "<p>From: daniel de la concepción sáez &lt;<a href=\"mailto:danconsa@hotmail.com\">danconsa@hotmail.com</a>&gt;<br>\nHello,</p>\n<p>I’m trying to create a command for defining types from FOL, inspired from typedef.ML in HOL, but my axioms do not unify with the theorems because the new type have no sorts and “term” is needed.</p>\n<p>Can anybody help me with this?</p>\n<p>Thank you,</p>\n<p>Daniel de la Concepción</p>",
        "id": 294753417,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661196344
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\n(This thread is still open.)</p>\n<p>First note that a \"typedef\" in HOL is a certain axiom scheme that can be<br>\ninterpreted as a definition in the context particular semantics for HOL<br>\nthat allows to do that. That sounds a bit self-referential, but reflects<br>\nthe true situation.</p>\n<p>If you want to mimic that in FOL, you cannot assume such an<br>\ninterpretation a-priori, but FOL specifications are usually axiomatic<br>\nanyway. Thus it is better to call such a command something like<br>\n'subtype_axiomatization'.</p>\n<p>For the implementation in Isabelle/ML, the usual strategy is to look<br>\nvery closely how it is done elsewhere and transfer that carefully to<br>\nyour own application. That is a very abstract hint, in practice it needs<br>\nto be applied to concrete sources and concrete examples (which are<br>\nmissing here).</p>\n<p>Guessing blindly at your situation, I would say that it is a problem of<br>\nthe \"base sort\" of the object-logic. See also Typedecl.typedecl and the<br>\nfollowing description in header of that module:</p>\n<p>\"Type declarations (with object-logic arities) and type abbreviations.\"</p>\n<p>The relevant operations are Object_Logic.get_base_sort and<br>\nObject_Logic.add_base_sort -- the latter is used in src/HOL/HOL.thy at<br>\nthe start.</p>\n<p>That omission in FOL is not an accident: the logic works slightly<br>\ndifferently from HOL, not all types are automatically considered plain<br>\nthings.</p>\n<p>Thus we are back to the observation that transferring the peculiar HOL<br>\ntypedef to FOL requires to rethink the logic carefully.</p>\n<p>Makarius</p>",
        "id": 294757317,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661198075
    }
]