[
    {
        "content": "<p>From: Florian Haftmann &lt;<a href=\"mailto:florian.haftmann@informatik.tu-muenchen.de\">florian.haftmann@informatik.tu-muenchen.de</a>&gt;<br>\nSince this would issue warnings in the common case that default code<br>\nequations stemming from definitions are replaced by elaborated code<br>\nequations.</p>\n<p>Florian<br>\n<a href=\"/user_uploads/14278/qaZgqFnyNQwUMPqHzJDYhCDm/signature.asc\">signature.asc</a></p>",
        "id": 294250762,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660910637
    },
    {
        "content": "<p>From: Lars Hupel &lt;<a href=\"mailto:hupel@in.tum.de\">hupel@in.tum.de</a>&gt;<br>\n(Referring to both Isabelle2013 and Isabelle2013-1-RC2.)</p>\n<p>Assume the following clone of the <code>nat</code> datatype and its obvious<br>\ninstantiations for <code>zero</code> and <code>plus</code>, along with some auxiliary<br>\ndefinitions:</p>\n<p>datatype natt = Z | S natt</p>\n<p>instantiation natt :: \"{zero,plus}\" begin</p>\n<p>definition zero_natt_def:<br>\n  \"0 = Z\"</p>\n<p>primrec plus_natt where<br>\n  \"Z + x = x\" |<br>\n  \"(S m) + n = S (m + n)\"</p>\n<p>instance ..</p>\n<p>end</p>\n<p>fun f :: \"'a::plus &#8658; 'a\" where<br>\n  \"f x = x + x\"</p>\n<p>definition \"i &#8801; f (S Z)\"</p>\n<p>Now, exporting code for <code>i</code> works as expected, and</p>\n<p>value [code] i</p>\n<p>correctly yields <code>S (S Z)</code>.</p>\n<p>However, if I add this code equation:</p>\n<p>lemma [code]: \"x + Z = x\"<br>\n  by (induct x) auto</p>\n<p>... the generated code looks fishy (there is no warning of \"subsumed code<br>\nequations\" or the like):</p>\n<p>export_code i in SML</p>\n<p>fun plus_natta x Z = x;</p>\n<p>Invoking <code>value [code] i</code> again produces an error:</p>\n<p>Warning: Matches are not exhaustive.<br>\n  fun plus_natta x Z = x<br>\n  At (line 23 of \"generated code\")<br>\n  Exception- Match raised</p>\n<p>(Side note: <code>value [simp] i</code> fails to produce a normal form too, it just<br>\nprints <code>S Z + S Z</code>.)</p>\n<p>I have no idea why that happens. Is what I'm trying to do even supported?<br>\nI couldn't find a hint in the type class tutorial (nor in the code<br>\ngeneration tutorial).</p>",
        "id": 294253691,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660911759
    },
    {
        "content": "<p>From: Lars Hupel &lt;<a href=\"mailto:hupel@in.tum.de\">hupel@in.tum.de</a>&gt;<br>\nMy mail client mangled the Unicode symbols. I attached the theory file for<br>\nreproducing the problem.<br>\n<a href=\"/user_uploads/14278/XM0c4djD0WLl5YbWEAhzlIIl/Scratch.thy\">Scratch.thy</a></p>",
        "id": 294253719,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660911772
    },
    {
        "content": "<p>From: Andreas Lochbihler &lt;<a href=\"mailto:andreas.lochbihler@inf.ethz.ch\">andreas.lochbihler@inf.ethz.ch</a>&gt;<br>\nHi Lars,</p>\n<p>many packages implicitly declare some code equations for the constants you define. The <br>\ncode generator remembers that that these declarations have been implicity, so when you <br>\nexplicitly declare a new code equation, it silently drops the implicit ones. This <br>\nbehaviour is sensible in many cases because the user otherwise would have to manually <br>\ndelete the default equations first, which might not be that easy. Therefore, you have to <br>\ndeclare all the code equations you want. For example,</p>\n<p>declare plus_natt.simps [code]<br>\nlemma [code]: \"x + Z = x\" by (induct x) auto</p>\n<p>should give you what you expect. Note that the code generator sorts the cases in the <br>\nreverse order as you declare them.</p>\n<p>Best,<br>\nAndreas</p>",
        "id": 294253731,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660911778
    },
    {
        "content": "<p>From: Lars Hupel &lt;<a href=\"mailto:hupel@in.tum.de\">hupel@in.tum.de</a>&gt;<br>\nHello Andreas,</p>\n<p>thanks, that explanation makes perfect sense. I do wonder why there's <br>\n no warning in this case, though, just like the warning you get when <br>\n adding a code equation which subsumes others.</p>\n<p>Cheers<br>\n Lars</p>",
        "id": 294253795,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660911808
    }
]