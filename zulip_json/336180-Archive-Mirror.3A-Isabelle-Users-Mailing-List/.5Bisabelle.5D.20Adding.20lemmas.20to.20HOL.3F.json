[
    {
        "content": "<p>From: Christoph Dittmann &lt;<a href=\"mailto:f-isabellelist@yozora.eu\">f-isabellelist@yozora.eu</a>&gt;<br>\nHi,</p>\n<p>I am looking for lemmas that show that from every pair of lists you can<br>\nsplit off a maximal common prefix or suffix. I am looking for this:</p>\n<p>lemma maximal_common_prefix:<br>\n  shows \"∃ps xs' ys'. xs = ps @ xs' ∧ ys = ps @ ys'<br>\n         ∧ (xs' = [] ∨ ys' = [] ∨ hd xs' ≠ hd ys')\"<br>\n  by (induct xs ys rule: list_induct2', blast, blast, blast)<br>\n     (metis (no_types, hide_lams) append_Cons append_Nil list.sel(1))</p>\n<p>corollary maximal_common_suffix:<br>\n  shows \"∃ss xs' ys'. xs = xs' @ ss ∧ ys = ys' @ ss<br>\n         ∧ (xs' = Nil ∨ ys' = Nil ∨ last xs' ≠ last ys')\"<br>\n  using maximal_common_prefix[of \"rev xs\" \"rev ys\"]<br>\n  unfolding rev_swap rev_append by (metis last_rev rev_is_Nil_conv)</p>\n<p>The proofs work, but I would have expected that these statements already<br>\nexist somewhere in src/HOL/List.thy.  Unfortunately, I couldn't find<br>\nthese or something similar.  I would be glad if someone corrected me.</p>\n<p>These two lemmas look to me like they could be useful for many proofs<br>\nbecause they give a general way to decompose two lists.</p>\n<p>So my question is, what is the process to propose new lemmas for HOL?<br>\nDo these two lemmas look reasonable enough (assuming they don't already<br>\nexist)?</p>\n<p>Thanks,<br>\nChristoph</p>",
        "id": 294673363,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661174094
    },
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\nThey look indeed interesting, I'll probably add them in some form or another.</p>\n<p>Thanks!<br>\nTobias<br>\n<a href=\"/user_uploads/14278/fBwiQoZbAhbceanDMIv0YEyN/smime.p7s\">smime.p7s</a></p>",
        "id": 294673383,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661174101
    },
    {
        "content": "<p>From: Joachim Breitner &lt;<a href=\"mailto:breitner@kit.edu\">breitner@kit.edu</a>&gt;<br>\nHi,</p>\n<p>so much ∃ quantifiers. Given that for any two lists, the maximal common<br>\nprefix is unique, wouldn’t it make sense to give this a name, define it<br>\nstraight-forwardly using fun, and then possibly add lemmas?</p>\n<p>Greetings,<br>\nJoachim<br>\n<a href=\"/user_uploads/14278/5JKH8DS6aXYfFxNwLrlleMbx/signature.asc\">signature.asc</a></p>",
        "id": 294673451,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661174119
    },
    {
        "content": "<p>From: Andreas Lochbihler &lt;<a href=\"mailto:andreas.lochbihler@inf.ethz.ch\">andreas.lochbihler@inf.ethz.ch</a>&gt;<br>\nYou can define the longest common prefix with the existing functions in List:</p>\n<p>lcp xs ys = map fst (takeWhile (%(x, y). x = y) (zip xs ys))</p>\n<p>In AFP/Coinductive, I have defined an operation llcp to return the longest common prefix <br>\nof two possibly infinite lists. There are also a few lemmas about llcp.</p>\n<p>Andreas</p>",
        "id": 294673468,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661174125
    },
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\nI was thinking along those lines as well. Moreover, it makes sense on any set of <br>\nlists:</p>\n<p>\"GREATEST ps WRT length. ∀xs ∈ L. prefix ps xs\"</p>\n<p>Of course that one is not executable. I'll put something suitable together.</p>\n<p>Tobias<br>\n<a href=\"/user_uploads/14278/lKL-5VquF8ZNpqgwtLGLQ8XQ/smime.p7s\">smime.p7s</a></p>",
        "id": 294673497,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661174138
    },
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\nI have added your two lemmas (with \"longest\" instead of \"maximal\") to the <br>\ndistributiuon.</p>\n<p>For a more comprehensive treatment of longest common prefixes I have added two <br>\nfunctions</p>\n<p>Longest_common_prefix :: \"'a list set =&gt; 'a list\"<br>\nlongest_common_prefix :: \"'a list =&gt; 'a list =&gt; 'a list\"</p>\n<p>and their characteristic lemmas to Library/Sublist.</p>\n<p>(<a href=\"http://isabelle.in.tum.de/repos/isabelle/rev/3413b1cf30cd\">http://isabelle.in.tum.de/repos/isabelle/rev/3413b1cf30cd</a>)</p>\n<p>Thanks for you suggestion, Christoph!<br>\nTobias<br>\n<a href=\"/user_uploads/14278/enQv-oQllX4jrPspzUvQUNml/smime.p7s\">smime.p7s</a></p>",
        "id": 294673673,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661174193
    }
]