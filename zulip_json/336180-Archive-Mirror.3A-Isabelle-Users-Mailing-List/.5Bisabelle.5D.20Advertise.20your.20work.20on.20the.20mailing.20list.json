[
    {
        "content": "<p>From: Jasmin Christian Blanchette &lt;<a href=\"mailto:jasmin.blanchette@gmail.com\">jasmin.blanchette@gmail.com</a>&gt;<br>\nHi all,</p>\n<p>This is just a reminder that we are all encouraged to let the mailing list know about your Isabelle-based work on the mailing list. This is especially important if you publish your work elsewhere than at the ITP conference or on the Archive of Formal Proof. Other people on the mailing list might be doing something similar without knowing. (This happened recently with an Isabelle-related paper presented at LPAR.)</p>\n<p>Immodest example:</p>\n<p>Three Years of Experience with Sledgehammer, a Practical Link between Automatic and Interactive Theorem Provers<br>\nw/ Lawrence C. Paulson<br>\nIWIL 2010 (Yogyakarta, Indonesia)</p>\n<p>Sledgehammer is a highly successful subsystem of Isabelle/HOL that calls automatic theorem provers to assist with interactive proof construction. It requires no user configuration: it can be invoked with a single mouse gesture at any point in a proof. It automatically finds relevant lemmas from all those currently available. An unusual aspect of its architecture is its use of unsound translations, coupled with its delivery of results as Isabelle/HOL proof scripts: its output cannot be trusted, but it does not need to be trusted. Sledgehammer works well with Isar structured proofs and allows beginners to prove challenging theorems.</p>\n<p><a href=\"http://www4.in.tum.de/~blanchet/iwil2010-sledgehammer.pdf\">http://www4.in.tum.de/~blanchet/iwil2010-sledgehammer.pdf</a></p>\n<p>Now it's your turn!</p>\n<p>Jasmin</p>",
        "id": 294119548,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660839374
    },
    {
        "content": "<p>From: Timothy McKenzie &lt;<a href=\"mailto:tjm1983@gmail.com\">tjm1983@gmail.com</a>&gt;<br>\nI'm working on establishing that \"Euclid's Axiom\" in Tarski's <br>\naxiomatization of the plane is independent of the other axioms.  <br>\nI've already provided a (real, Cartesian) model for all of <br>\nTarski's axioms, thus establishing that they are consistent <br>\n(relative to Isabelle/HOL).</p>\n<p>My independence proof involves building the Beltrami-Klein model <br>\nof the hyperbolic plane and then establishing that Euclid's Axiom <br>\nis false in that model, but all the other axioms are true.</p>\n<p>Timothy<br>\n&lt;&gt;&lt;<br>\n<a href=\"/user_uploads/14278/7SP4xSi4uSSL1jTCroKiF0_L/signature.asc\">signature.asc</a></p>",
        "id": 294119588,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660839390
    },
    {
        "content": "<p>From: Christoph Sprenger &lt;<a href=\"mailto:sprenger@inf.ethz.ch\">sprenger@inf.ethz.ch</a>&gt;<br>\nHi all,</p>\n<blockquote>\n<p>Now it's your turn!</p>\n</blockquote>\n<p>here is another one:</p>\n<p>Developing Security Protocols by Refinement<br>\nChristoph Sprenger and David Basin</p>\n<p>Proceedings of the 17th ACM Conference on Computer and Communications  <br>\nSecurity (CCS)<br>\nChicago, IL, USA, October 4-8, 2010, pp. 361--374</p>\n<p>Abstract--- We propose a development method for security protocols  <br>\nbased on stepwise refinement. Our refinement strategy guides the  <br>\ntransformation of abstract security goals into protocols that are  <br>\nsecure when operating over an insecure channel controlled by a Dolev- <br>\nYao-style intruder. The refinement steps successively introduce local  <br>\nstates, an intruder, communication channels with security properties,  <br>\nand cryptographic operations realizing these channels. The  <br>\nabstractions used provide insights on how the protocols work and  <br>\nfoster the development of families of protocols sharing a common  <br>\nstructure and properties. In contrast to post-hoc verification  <br>\nmethods, protocols are developed together with their correctness  <br>\nproofs. We have implemented our method in Isabelle/HOL and used it to  <br>\ndevelop different entity authentication and key transport protocols.</p>\n<p><a href=\"http://people.inf.ethz.ch/csprenge/Publications_files/ccs10-sprenger-basin.pdf\">http://people.inf.ethz.ch/csprenge/Publications_files/ccs10-sprenger-basin.pdf</a><br>\n<a href=\"http://portal.acm.org/citation.cfm?id=1866307.1866349\">http://portal.acm.org/citation.cfm?id=1866307.1866349</a></p>\n<p>Best wishes,<br>\nChristoph</p>",
        "id": 294119716,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660839432
    },
    {
        "content": "<p>From: Simon Meier &lt;<a href=\"mailto:iridcode@gmail.com\">iridcode@gmail.com</a>&gt;<br>\nHi all,</p>\n<p>Now it's your turn!</p>\n<p>at CSF 2010, we published the following results stemming from our ongoing<br>\neffort to provide a simple framework for developing machine-checked protocol<br>\nsecurity proofs.</p>\n<p>*Meier, Cremers, Basin, \"Strong Invariants for the Efficient Construction of<br>\nMachine-Checked Protocol Security Proofs\", in CSF, 2010, pp. 231-245.*</p>\n<p><em>Abstract:</em> We embed an operational semantics for security protocols in the<br>\ninteractive theorem prover Isabelle/HOL and derive two strong<br>\nprotocol-independent invariants. These invariants allow us to reason about<br>\nthe possible origin of messages and justify a local typing assumption for<br>\nthe otherwise untyped protocol variables. The two rules form the core of a<br>\ntheory that is well-suited for interactively constructing natural,<br>\nhuman-readable, correctness proofs.  Moreover, we develop an algorithm that<br>\nautomatically generates proof scripts based on these invariants. Both<br>\ninteractive and automatic proof construction are faster than competing<br>\napproaches. Moreover, we have strong correctness guarantees since all<br>\nproofs, including those deriving the underlying theory from the semantics,<br>\nare machine checked.</p>\n<p>A pre-release of the our Isabelle theories and the proof generation tool<br>\nimplemented in Haskell can be found on Simon's homepage.</p>\n<p><a href=\"http://people.inf.ethz.ch/meiersi/espl/index.html\">http://people.inf.ethz.ch/meiersi/espl/index.html</a></p>\n<p>Many of you know Paulson's inductive approach to security protocol<br>\nverification [1]. Hence, we provide a short *comparison between the<br>\nInductive Approach and our approach.*</p>\n<p>In the Inductive Approach both the formalization of the intruder<br>\ncapabilities as well as the protocol specification are shallowly embedded in<br>\nthe definition of the inductive set of traces describing the protocol<br>\nexecution. The advantage of such a shallow embedding is that the<br>\nexpressivity for the protocol specification is limited by HOL only. However,<br>\nthe price one pays is that one has to come up with and prove more inductive<br>\ninvariants.</p>\n<p>In our approach, we use a deep embedding of a protocol specification<br>\nlanguage that represents protocols as a set of roles where a role is a<br>\nlinear sequence of send and receive steps. We formalize a protocol<br>\nindependent semantics as an inductive set of traces parametrized over the<br>\nprotocol being executed. This construction allows us to provide a set of<br>\nprotocol independent invariants strong enough for proving secrecy and<br>\nauthentication properties for \"classical authentication protocols\" (e.g.<br>\nKerberos or TLS or the protocols in the SPORE [2]) without resorting to<br>\ninduction over the traces.</p>\n<p>Due to our protocol independent invariants, security proof construction<br>\nbecomes (quite) mechanical. For secrecy and non-injective authentication<br>\nproperties, proof search is even that simple that we can automatically find<br>\ntheir proofs and output them as Isabelle proof scripts. Based on these<br>\nautomatically proven properties, more complex properties can then be proven<br>\ninteractively.</p>\n<p>Note that our invariants were inspired by the theory underlying the security<br>\nprotocol model checker Scyther [3]. Hence, our capability for automatic<br>\nproof generation comes to no surprise. The suprising fact is that a theory<br>\ndeveloped for automatic verification is also that well-suited for<br>\ninteractive use.</p>\n<p><em>The executive summary is the following:</em> If the protocol you are verifying<br>\ncan be specified as a set of linear roles and your security property can be<br>\nexpressed as a predicate on traces, then our approach might provide an<br>\nelegant way to construct your security proofs. If not, then Paulson's<br>\napproach might suit your problem better. Nevertheless, we would still like<br>\nto hear about your problem, as it may be that one of the extensions we are<br>\nworking on applies.</p>\n<p>best regards,<br>\nSimon, Cas, David</p>\n<p>[1] Paulson, \"The Inductive Approach to Verifying Cryptographic Protocols\",<br>\nJournal of Computer Security, vol. 6, pp. 85-128, 1998.</p>\n<p>[2] <a href=\"http://www.lsv.ens-cachan.fr/Software/spore/index.html\">http://www.lsv.ens-cachan.fr/Software/spore/index.html</a></p>\n<p>[3] <a href=\"http://people.inf.ethz.ch/cremersc/scyther/index.html\">http://people.inf.ethz.ch/cremersc/scyther/index.html</a></p>",
        "id": 294119748,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660839441
    },
    {
        "content": "<p>From: Joachim Breitner &lt;<a href=\"mailto:mail@joachim-breitner.de\">mail@joachim-breitner.de</a>&gt;<br>\nHi,<br>\n<a href=\"/user_uploads/14278/Zsrf9ajDK7HxCGfN6cxiZXwt/signature.asc\">signature.asc</a></p>",
        "id": 294119783,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660839454
    },
    {
        "content": "<p>From: Peter Lammich &lt;<a href=\"mailto:peter.lammich@uni-muenster.de\">peter.lammich@uni-muenster.de</a>&gt;<br>\nJasmin Christian Blanchette wrote:</p>\n<blockquote>\n<p>This is just a reminder that we are all encouraged to let the mailing<br>\nlist know about your Isabelle-based work on the mailing list. This is<br>\nespecially important if you publish your work elsewhere than at the ITP<br>\nconference or on the Archive of Formal Proof. Other people on the mailing<br>\nlist might be doing something similar without knowing. (This happened<br>\nrecently with an Isabelle-related paper presented at LPAR.)</p>\n</blockquote>\n<p>Hi all,  </p>\n<p>Apart from what we published on AFP and/or ITP (ProgramConflictAnalysis,<br>\nIsabelle Collection Framework, Tree Automata, BinomialQueues, FingerTrees)  <br>\n\\+ in Preparation: <strong>Dijkstra's algorithm</strong> as an example for using ICF and<br>\nPriorityQueues in a complex algorithm,  <br>\nwe work on program analysis for concurrent programs, and verify many of our<br>\ntechniques in Isabelle/HOL.  </p>\n<p>The document: <strong>Formalization of pre* for DPNs</strong> (&lt;<a href=\"http://cs.uni-\">http://cs.uni-</a><br>\n<a href=\"http://muenster.de/sev/staff/lammich/isabelle/#dpn_prestar\">muenster.de/sev/staff/lammich/isabelle/#dpn_prestar</a>&gt;) formalizes an automata-<br>\nbased model-checking algorithm for dynamic pushdown networks, and generates  <br>\n(very inefficient) executable code.  </p>\n<p>The technical report: *<em>Isabelle Formalization of Hedge-Constrained pre</em> and<br>\nDPNs with Locks** (&lt;<a href=\"http://cs.uni-\">http://cs.uni-</a><br>\n<a href=\"http://muenster.de/sev/staff/lammich/isabelle/#pca\">muenster.de/sev/staff/lammich/isabelle/#pca</a>&gt;) formalizes an analysis of<br>\nDynamic Pushdown Networks with Locks, an abstract model for parallel programs.<br>\nWe are currently extending the results there. On the Isabelle/HOL side, the<br>\nlong-term goal is to derive an executable analyser, that is specified as a<br>\ndatalog-like logical program, that can be efficiently solved with BDD-based<br>\ntechniques (cf. eg. the bddbddb - project)  </p>\n<p>Moreover, we are exploring how to combine approaches from <strong>separation logic</strong><br>\nwith the <strong>ImperativeHOL</strong> framework. The motivation is to develop a library<br>\nof efficient imperative datastructures for ImperativeHOL, that allows for<br>\nnice, modular proofs (An ImperativeHOL-analogon of the Isabelle Collection<br>\nFramework).  </p>\n<p>Best,  <br>\nPeter</p>",
        "id": 294119915,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660839484
    },
    {
        "content": "<p>From: Tjark Weber &lt;<a href=\"mailto:webertj@in.tum.de\">webertj@in.tum.de</a>&gt;<br>\nMathematizing C++ Concurrency (POPL 2011, joint work with Mark Batty,<br>\nScott Owens, Susmit Sarkar, and Peter Sewell, Cambridge University)</p>\n<p>Abstract (provisional):</p>\n<p>Shared-memory concurrency in C and C++ is pervasive in systems<br>\nprogramming, but has long been poorly defined. This motivated an ongoing<br>\nshared effort by the standards committees to specify concurrent<br>\nbehaviour in the next versions of both languages.  They aim to provide<br>\nstrong guarantees for race-free programs, together with new (but subtle)<br>\nrelaxed-memory atomic primitives for high-performance concurrent code.<br>\nHowever, the current draft standards, while the result of careful<br>\ndeliberation, are still rather far from clear and rigorous definitions.</p>\n<p>In this paper we establish a mathematical (yet readable) semantics for<br>\nC++ concurrency.  We aim to capture the intent of the current draft as<br>\nclosely as possible, but discuss a number of points where this is not<br>\nstraightforward.  We prove that a proposed x86 implementation of the<br>\nconcurrency primitives is correct with respect to the x86-TSO model, and<br>\ndescribe our Cppmem tool for exploring the semantics of examples, using<br>\ncode generated from our Isabelle/HOL definitions.</p>\n<p>This will aid discussion of any further changes to the draft standard,<br>\nprovide a correctness condition for compilers, and give a much-needed<br>\nbasis for analysis and verification of concurrent C and C++ programs.</p>\n<p>Special thanks to Jasmin Blanchette for his extensive help in getting<br>\nNitpick to work for us!</p>\n<p>Regards,<br>\nTjark</p>",
        "id": 294119939,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660839490
    },
    {
        "content": "<p>From: Lucas Dixon &lt;<a href=\"mailto:ldixon@inf.ed.ac.uk\">ldixon@inf.ed.ac.uk</a>&gt;<br>\nHi,</p>\n<p>Some stuff I'm involved with in Edinburgh...</p>\n<p>Automated theory exploration:<br>\nWe have two systems based on Isabelle/IsaPlanner which carry out <br>\nautomated theory exploration (IsaScheme and IsaCoSy). The idea is to see <br>\nhow much of in inductive theory can be generated automatically. It turns <br>\nout by using counter example finding and generating only irreducible <br>\nterms you get some cool stuff:<br>\n<a href=\"http://dream.inf.ed.ac.uk/projects/lemmadiscovery/\">http://dream.inf.ed.ac.uk/projects/lemmadiscovery/</a><br>\n<a href=\"http://dream.inf.ed.ac.uk/projects/isascheme/\">http://dream.inf.ed.ac.uk/projects/isascheme/</a><br>\nThe IsaCoSy papers to read for this stuff are:<br>\n<a href=\"http://www.springerlink.com/content/bk711q2u247mr967/\">http://www.springerlink.com/content/bk711q2u247mr967/</a><br>\n   (preprint available at: <br>\n<a href=\"http://dream.inf.ed.ac.uk/projects/isaplanner/papers/synth-ind-theories-draft-2010.pdf\">http://dream.inf.ed.ac.uk/projects/isaplanner/papers/synth-ind-theories-draft-2010.pdf</a> <br>\n)<br>\nand the IsaScheme stuff is described here:<br>\n<a href=\"http://dream.inf.ed.ac.uk/projects/isaplanner/papers/eswa10.pdf\">http://dream.inf.ed.ac.uk/projects/isaplanner/papers/eswa10.pdf</a></p>\n<p>An experiment using Isabelle by a working mathematician:<br>\nThis has resulted in two things. 1) a formalization of convex analysis, <br>\n(I'll let Bogdan say more about this) and 2) an \"Isabelle Primer for <br>\nMathematicians\" which is a quick introduction to Isabelle, highlighting <br>\nsome of the common difficulties and how to get around them. :)<br>\nThe Isabelle primer can be downloaded from:<br>\n<a href=\"http://dream.inf.ed.ac.uk/projects/isabelle/Isabelle_Primer.pdf\">http://dream.inf.ed.ac.uk/projects/isabelle/Isabelle_Primer.pdf</a><br>\nThe formalisation will be released in due course.</p>\n<p>Proof Planning/Inductive Theorem Proving in Isabelle:<br>\nwe've been developing an automated inductive theorem prover <br>\n(IsaPlanner). This is based on Rippling, and is primarily a research <br>\ntool for exploring extensions to the technique. We've also been <br>\nexperimenting with proof-plan/tactic languages a bit too, and with <br>\nsynthesis techniques based on Isabelle's schematic variables (and <br>\nmachinery to manage working with them). Some info and papers are <br>\navailable here:<br>\n<a href=\"http://dream.inf.ed.ac.uk/projects/isaplanner/\">http://dream.inf.ed.ac.uk/projects/isaplanner/</a></p>\n<p>Formalisation of Intuitionistic Linear Logic in Isabelle.<br>\nWe've carried out various formalisations of fragments of <br>\n(Intuitionistic) Linear Logic, with proof terms, in Isabelle using the <br>\nnominal package, and also experimented with some other forms of handling <br>\nbinding (Randy Pollack can say more about this perhaps?) We really ought <br>\nto tidy the linear logic stuff up and submit it to the AFP... (suddenly <br>\nfeeling guilty)</p>\n<p>In the pipeline: we're hoping to provide some re-factoring tools for <br>\n(Isar) proof scripts... still early days on that.</p>\n<p>best,<br>\nlucas</p>",
        "id": 294121158,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660839868
    }
]