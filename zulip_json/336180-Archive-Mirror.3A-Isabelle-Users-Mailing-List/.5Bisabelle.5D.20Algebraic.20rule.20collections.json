[
    {
        "content": "<p>From: Florian Haftmann &lt;<a href=\"mailto:florian.haftmann@informatik.tu-muenchen.de\">florian.haftmann@informatik.tu-muenchen.de</a>&gt;<br>\nHi all,</p>\n<p>in the context of<br>\n<a href=\"https://lists.cam.ac.uk/pipermail/cl-isabelle-users/2019-March/msg00017.html\">https://lists.cam.ac.uk/pipermail/cl-isabelle-users/2019-March/msg00017.html</a><br>\n(Conflicting rules in default simps vs. algebraic rule collections) I<br>\nrevisited existing *_simps collections particulary in the HOL theories,<br>\nwith the following insights:</p>\n<ul>\n<li>\n<p>Collections mult_compare_simps and unit_simps seem to be never used<br>\nneither in the distro nor the AFP and hence I would suggest to remove them.</p>\n</li>\n<li>\n<p>There is the well-established chain ac_simps ⊆ algebra_simps ⊆<br>\nfield_simps, which is also referenced in tutorials:</p>\n<ul>\n<li>ac_simps for AC</li>\n<li>algebra_simps for distributivity and such</li>\n<li>field_simps with specific rules for division, preferring common<br>\ndenominators.</li>\n</ul>\n</li>\n<li>\n<p>There are two somehow irregular variants:</p>\n<ul>\n<li>\n<p>divide_simps with more aggressive rewrites than field_simps wrt.<br>\ncase distinctions</p>\n</li>\n<li>\n<p>sign_simps introducing potential case splits on signs; this is<br>\nindeed quite old stuff dating back to at least 2f4be6844f7c in 2007,<br>\nwhich seems to have escaped any modernization or systematization so far,<br>\nbut is used in a couple of places.</p>\n</li>\n</ul>\n</li>\n</ul>\n<p>The rules in both these surely have their purpose, and it would be a<br>\ngood idea to make them available more prominently.</p>\n<p>So far my current thoughts on that:</p>\n<p>a) The traditional chain is extended: ac_simps ⊆ algebra_simps ⊆<br>\nfield_simps ⊆ field_split_simps, where field_split_simps adds the<br>\npotential case-splitting rules now in divide_simps and sign_simps.</p>\n<p>b) I am a little bit uncomfortable with the well-established name<br>\nfield_simps, though:</p>\n<p>* Most of its rules do not apply to fields but to the weaker<br>\ndivision_ring (which does not sound so odd for German speakers used to<br>\nthink about »Körper« and »Schiefkörper«).</p>\n<p>* My original motivation was to find a collection to store some rules<br>\nabout (partial) division in rings, and it is somehow strange that the<br>\nformally fitting collection is named after fields.</p>\n<p>Hence suggestions for a better naming for field_simps and<br>\nfield_split_simps are welcome.</p>\n<p>Cheers,<br>\n    Florian<br>\n<a href=\"/user_uploads/14278/bcdXTGXQGKkSfavKNzJgU-N2/signature.asc\">signature.asc</a></p>",
        "id": 294753493,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661196368
    },
    {
        "content": "<p>From: Florian Haftmann &lt;<a href=\"mailto:florian.haftmann@informatik.tu-muenchen.de\">florian.haftmann@informatik.tu-muenchen.de</a>&gt;<br>\nAfter a second study, I recognized that the whole story is a little bit<br>\nmore involved.</p>\n<p>Concerning ac_simps ⊆ algebra_simps ⊆ field_simps – this inclusion does<br>\njust not hold:</p>\n<p>a) ac_simps contains all kind of AC-rules (coprime, min, max, inf, sup,<br>\n…), but algebra_simps only those for + and *.</p>\n<p>b) field_simps is no superset of algebra_simps, and in some sense they<br>\nwork against each other:</p>\n<p>algebra_simps: (a + b) * c = a * c + b * c<br>\n        but not: (a + b) / c = a / c + b / c<br>\n    field_simps: a / c + b / c = (a + b) / c</p>\n<p>It will need some further rounds of thinking to understand where to go<br>\nfrom here.</p>\n<p>Cheers,<br>\n    Florian<br>\n<a href=\"/user_uploads/14278/3GmzI-7Spfd6DP88SfrevTPP/signature.asc\">signature.asc</a></p>",
        "id": 294753537,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661196386
    },
    {
        "content": "<p>From: Florian Haftmann &lt;<a href=\"mailto:florian.haftmann@informatik.tu-muenchen.de\">florian.haftmann@informatik.tu-muenchen.de</a>&gt;<br>\nAfter a third study and conversation with Tobias and Fabian, the<br>\nsituation presents itself as follows:</p>\n<p>a) algebra_simps and field_simps are deliberately designed to provide<br>\nsome kind of decision procedure based on simp rules and ought stay »as<br>\nthey are« both in naming and content.</p>\n<p>b) Currently, sign_simps is an ad-hoc collection consisting of<br>\nalgebra_simps plus</p>\n<p>lemma zero_less_mult_iff [sign_simps]:<br>\n  \"0 &lt; a * b ⟷ 0 &lt; a ∧ 0 &lt; b ∨ a &lt; 0 ∧ b &lt; 0\"</p>\n<p>lemma mult_less_0_iff [sign_simps]:<br>\n  \"a * b &lt; 0 ⟷ 0 &lt; a ∧ b &lt; 0 ∨ a &lt; 0 ∧ 0 &lt; b\"</p>\n<p>c) An intermediate post-release step is to turn sign_simps into a proper<br>\ncollection consisting solely of</p>\n<p>lemma zero_less_mult_iff [sign_simps]:<br>\n  \"0 &lt; a * b ⟷ 0 &lt; a ∧ 0 &lt; b ∨ a &lt; 0 ∧ b &lt; 0\"</p>\n<p>lemma mult_less_0_iff [sign_simps]:<br>\n  \"a * b &lt; 0 ⟷ 0 &lt; a ∧ b &lt; 0 ∨ a &lt; 0 ∧ 0 &lt; b\"</p>\n<p>and also</p>\n<p>lemma zero_le_mult_iff [sign_simps]:<br>\n  \"0 ≤ a * b ⟷ 0 ≤ a ∧ 0 ≤ b ∨ a ≤ 0 ∧ b ≤ 0\"</p>\n<p>lemma mult_le_0_iff [sign_simps]:<br>\n  \"a * b ≤ 0 ⟷ 0 ≤ a ∧ b ≤ 0 ∨ a ≤ 0 ∧ 0 ≤ b\"</p>\n<p>d) The specific property of sign_simps and divide_simps is that goals<br>\nmay be split.  Maybe this can be developed into a schema where each<br>\nalgebra_simps and field_simps are accompanied by splitting variants,<br>\nmaking sign_simps and divide_simp.  This needs to be discussed.</p>\n<p>Cheers,<br>\n    Florian<br>\n<a href=\"/user_uploads/14278/qTInkZXcsBH84xI3Ku3ehpeB/signature.asc\">signature.asc</a></p>",
        "id": 294755650,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661197344
    },
    {
        "content": "<p>From: Lawrence Paulson &lt;<a href=\"mailto:lp15@cam.ac.uk\">lp15@cam.ac.uk</a>&gt;<br>\nThe purpose of divide_simps is to eliminate division from arithmetic expressions in equations and inequalities. I introduced it in order to simplify the results of differentiation but it seems to have many other applications.</p>\n<p>Larry</p>",
        "id": 294755677,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661197368
    },
    {
        "content": "<p>From: Florian Haftmann &lt;<a href=\"mailto:florian.haftmann@informatik.tu-muenchen.de\">florian.haftmann@informatik.tu-muenchen.de</a>&gt;<br>\nHi all,</p>\n<p>the following tableaux shows that each rule in divide_simps corresponds<br>\nto one or two rules from field_simps; the key difference is that rules<br>\nin field_simps do not split goals whereas divide_simps does.</p>\n<p>thm divide_simps(1) field_simps(21)<br>\nthm divide_simps(2) field_simps(26)<br>\nthm divide_simps(3) field_simps(27)<br>\nthm divide_simps(4) field_simps(29)<br>\nthm divide_simps(5) field_simps(28)<br>\nthm divide_simps(6) field_simps(30)<br>\nthm divide_simps(7) field_simps(31)<br>\nthm divide_simps(8) field_simps(23)<br>\nthm divide_simps(9) field_simps(22)<br>\nthm divide_simps(10) field_simps(24)<br>\nthm divide_simps(11) field_simps(25)<br>\nthm divide_simps(12) field_simps(32) field_simps(35)<br>\nthm divide_simps(13) field_simps(36) field_simps(38)<br>\nthm divide_simps(14) field_simps(33) field_simps(34)<br>\nthm divide_simps(15) field_simps(37) field_simps(39)<br>\nthm divide_simps(16) field_simps(40) field_simps(41)<br>\nthm divide_simps(17) field_simps(46) field_simps(47)<br>\nthm divide_simps(18) field_simps(42) field_simps(43)<br>\nthm divide_simps(19) field_simps(44) field_simps(45)</p>\n<p>Hence I am still in favour to arrange everything as follows</p>\n<p>| conservative  | splitting</p>\n<hr>\n<p>for rings  | algebra_simps | algebra_split_simps<br>\nfor fields | field_simps   | field_split_simps</p>\n<p>where field_split_simps would be the successor of divide_simps, and<br>\nsign_simps be obsolete.</p>\n<p>Cheers,<br>\n    Florian<br>\n<a href=\"/user_uploads/14278/DdcZVfhqRG5i2f-qsTMa_mzt/signature.asc\">signature.asc</a></p>",
        "id": 294758070,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661198382
    },
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\nI support this change because the new names reflect the relationship to the <br>\npopular algebra_simps and field_simps and indicate that splitting may happen.</p>\n<p>Tobias<br>\n<a href=\"/user_uploads/14278/fhcNkolxcSpmYiaYNVvdohXI/smime.p7s\">smime.p7s</a></p>",
        "id": 294758090,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661198389
    }
]