[
    {
        "content": "<p>From: Lars Hupel &lt;<a href=\"mailto:hupel@in.tum.de\">hupel@in.tum.de</a>&gt;<br>\nHi René,</p>\n<p>as far as I can tell, there is no easy solution just yet. The<br>\nmedium-term goal is to automate publishing of artifacts from stable AFP<br>\nusing Jenkins. This will mean a publicly-browsable directory of all<br>\nPDFs, HTMLs, tars, ...</p>\n<p>Cheers<br>\nLars</p>",
        "id": 294675847,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661174917
    },
    {
        "content": "<p>From: Gerwin Klein &lt;<a href=\"mailto:Gerwin.Klein@nicta.com.au\">Gerwin.Klein@nicta.com.au</a>&gt;<br>\nThe solution is to do it the other way around.</p>\n<p>Algebraic_Numbers should be the session with everything, generating all documents. Then you add a separate small session without the tests that others can use if they need to conserve resources. This one doesn’t even have to produce a document at all.</p>\n<p>Cheers,<br>\nGerwin</p>\n<hr>\n<p>The information in this e-mail may be confidential and subject to legal professional privilege and/or copyright. National ICT Australia Limited accepts no liability for any damage caused by this email or its attachments.</p>",
        "id": 294676043,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661174984
    },
    {
        "content": "<p>From: Lars Hupel &lt;<a href=\"mailto:hupel@in.tum.de\">hupel@in.tum.de</a>&gt;</p>\n<blockquote>\n<p>Thanks for this easy solution. I just pushed a corresponding change<br>\nwith new target: Algebraic_Number_Lib</p>\n</blockquote>\n<p>Because of this we now have the unfortunate situation that a significant<br>\npart of Algebraic_Numbers is now being built twice, without any actual<br>\nneed to do so.</p>\n<p>Cheers<br>\nLars</p>",
        "id": 294676250,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661175039
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nIndeed. When there are bulky sessions, one should figure out how to make<br>\nthem less bulky, and not just duplicate bulkiness.</p>\n<p>Makarius</p>",
        "id": 294676356,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661175076
    },
    {
        "content": "<p>From: Gerwin Klein &lt;<a href=\"mailto:Gerwin.Klein@nicta.com.au\">Gerwin.Klein@nicta.com.au</a>&gt;<br>\nI thought the point was that the part that is duplicated is <em>not</em> bulky. If it is, we should think more, but I don’t have any better solutions ready.</p>\n<p>For comparison, we’re doing this already: since we can’t merge multiple parent sessions, all entries that re-use more than one other entry will currently definitely rebuild all of at least one parent anyway. Given that, and the effort I’m spending periodically to make sure the AFP does not rebuild HOL-Library 100 times each day, I don’t think the light part of one entry being rebuilt is a problem.</p>\n<p>Cheers,<br>\nGerwin</p>\n<hr>\n<p>The information in this e-mail may be confidential and subject to legal professional privilege and/or copyright. National ICT Australia Limited accepts no liability for any damage caused by this email or its attachments.</p>",
        "id": 294676367,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661175082
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nI think the worries of Lars Hupel are based on the rather weak<br>\nIsabelle/Jenkins testing hardware. My own worries are based on general<br>\nobservations that Algebraic_Numbers could be close to the infamous<br>\n\"invisible concrete wall\" (without detailed measurements yet).</p>\n<p>Here are some numbers on the fastest test machine that I have access to<br>\n(i.e. my own workstation):</p>\n<p>Isabelle/bcf4828bb125 + AFP/83c0fef83e3f<br>\nx86-linux, 6 threads</p>\n<p>Finished Algebraic_Number_Lib (0:00:48 elapsed time, 0:04:12 cpu time,<br>\nfactor 5.22)  ## without heap image<br>\nFinished Algebraic_Numbers (0:04:48 elapsed time, 0:22:56 cpu time,<br>\nfactor 4.78)  ## based on Pre_Algebraic_Numbers</p>\n<p>Now the same, but Algebraic_Numbers is based on Algebraic_Number_Lib,<br>\ni.e. the first session builds a heap and the second only runs the bulky<br>\ntests:</p>\n<p>Finished Algebraic_Number_Lib (0:01:17 elapsed time, 0:05:28 cpu time,<br>\nfactor 4.23)<br>\nFinished Algebraic_Numbers (0:03:54 elapsed time, 0:17:54 cpu time,<br>\nfactor 4.57)</p>\n<p>This makes some difference in overall CPU time usage.  It is reminiscent<br>\nof ancient times, when Jinja (not JinjaThreads) had to be split into two<br>\nsessions: the full compactification of the first heap makes the second<br>\none more comfortable. Although the effect today is not that important,<br>\ndue to online heap sharing.</p>\n<p>There are already AFP entries with more than one session, and also<br>\nadd-on documents. Maybe that is already sufficient to publish the tests<br>\nseparately, or maybe not. Lars Hupel might be able to say that.</p>\n<p>Stepping back further, the question is why Algebraic_Number_Tests<br>\nrequires so much persistent heap memory that sessions built on it might<br>\nget into problems. Maybe there is a deeper resource problem behind it.</p>\n<p>Makarius</p>",
        "id": 294676375,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661175088
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nBTW, for years I am trying to get to a situation where sessions and heap<br>\nimages are independent (also for document preparation). That would allow<br>\nto run many AFP sessions within the same Poly/ML process, providing a<br>\nchance that the big number of small sessions uses much less resources.</p>\n<p>Makarius</p>",
        "id": 294676383,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661175094
    },
    {
        "content": "<p>From: Gerwin Klein &lt;<a href=\"mailto:Gerwin.Klein@nicta.com.au\">Gerwin.Klein@nicta.com.au</a>&gt;<br>\nThat would be very useful!</p>\n<p>Cheers,<br>\nGerwin</p>\n<hr>\n<p>The information in this e-mail may be confidential and subject to legal professional privilege and/or copyright. National ICT Australia Limited accepts no liability for any damage caused by this email or its attachments.</p>",
        "id": 294676403,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661175100
    },
    {
        "content": "<p>From: Lars Hupel &lt;<a href=\"mailto:hupel@in.tum.de\">hupel@in.tum.de</a>&gt;</p>\n<blockquote>\n<p>I think the worries of Lars Hupel are based on the rather weak<br>\nIsabelle/Jenkins testing hardware. My own worries are based on general<br>\nobservations that Algebraic_Numbers could be close to the infamous<br>\n\"invisible concrete wall\" (without detailed measurements yet).</p>\n</blockquote>\n<p>Better hardware is on its way.</p>\n<blockquote>\n<p>There are already AFP entries with more than one session, and also<br>\nadd-on documents. Maybe that is already sufficient to publish the tests<br>\nseparately, or maybe not. Lars Hupel might be able to say that.</p>\n</blockquote>\n<p>Presently, all documents for the development version are built, but not<br>\npublished. The reason for that is that it turns out the disk space<br>\nrequirements to retain all HTML and PDF files is excessive (dozens of GB<br>\namassed during two or three weeks). I have a changeset to the build<br>\nserver in my pipeline which will retain the latest set of documents.</p>\n<p>(NB, build logs are retained and will be retained forever; they are<br>\nrelatively small due to compression.)</p>\n<p>The remaining question is how these documents will be presented in AFP.<br>\nCurrently only the documents of the main sessions are linked from the<br>\nentry pages.</p>\n<blockquote>\n<p>Stepping back further, the question is why Algebraic_Number_Tests<br>\nrequires so much persistent heap memory that sessions built on it might<br>\nget into problems. Maybe there is a deeper resource problem behind it.</p>\n</blockquote>\n<p>That is an excellent question. I still can't quite put my finger on it<br>\nas to why that single theory forces us to run AFP tests in bulky 64 bit<br>\nmode.</p>\n<p>Cheers<br>\nLars</p>",
        "id": 294676421,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661175107
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nI did not know that the situation is that bad.</p>\n<p>An important point if AFP tests is to see if everything still works<br>\nnicely in the small x86 heap model. That is one aspect of the \"invisible<br>\nconcrete wall\".</p>\n<p>Makarius</p>",
        "id": 294676434,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661175113
    },
    {
        "content": "<p>From: Gerwin Klein &lt;<a href=\"mailto:Gerwin.Klein@nicta.com.au\">Gerwin.Klein@nicta.com.au</a>&gt;</p>\n<blockquote>\n<p>Presently, all documents for the development version are built, but not<br>\npublished. The reason for that is that it turns out the disk space<br>\nrequirements to retain all HTML and PDF files is excessive (dozens of GB<br>\namassed during two or three weeks). I have a changeset to the build<br>\nserver in my pipeline which will retain the latest set of documents.</p>\n</blockquote>\n<p>That is a good idea, I don’t think we need to keep all artefacts.</p>\n<blockquote>\n<p>(NB, build logs are retained and will be retained forever; they are<br>\nrelatively small due to compression.)</p>\n</blockquote>\n<p>Good, these are worth keeping, at least for a moderately longer time span. They enable statistics etc.</p>\n<blockquote>\n<p>The remaining question is how these documents will be presented in AFP.<br>\nCurrently only the documents of the main sessions are linked from the<br>\nentry pages.</p>\n</blockquote>\n<p>Extra sessions and documents should be very rare, i.e. almost all AFP sessions should have exactly one document, which is the one that is linked.</p>\n<p>Is this not the case or am I misunderstanding the question?</p>\n<blockquote>\n<blockquote>\n<p>Stepping back further, the question is why Algebraic_Number_Tests<br>\nrequires so much persistent heap memory that sessions built on it might<br>\nget into problems. Maybe there is a deeper resource problem behind it.</p>\n</blockquote>\n<p>That is an excellent question. I still can't quite put my finger on it<br>\nas to why that single theory forces us to run AFP tests in bulky 64 bit<br>\nmode.</p>\n</blockquote>\n<p>Does sound worth investigating, I have no direct ideas either.</p>\n<p>Maybe it is indeed time to officially enable multiple sessions for AFP entries. That will take some infrastructure work, but it would give us more flexibility in treating things like this, for instance with the technique Makarius mentioned, which we used for Jinja years back.</p>\n<p>Cheers,<br>\nGerwin</p>\n<hr>\n<p>The information in this e-mail may be confidential and subject to legal professional privilege and/or copyright. National ICT Australia Limited accepts no liability for any damage caused by this email or its attachments.</p>",
        "id": 294676443,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661175119
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nThe split into two sessions had mainly the effect to enforce a full heap<br>\ncompaction (and reload). In contempory Poly/ML this can be done at<br>\nruntime, e.g. by putting this into a suitable place (e.g.<br>\nAlgebraic_Number_Tests.thy):</p>\n<p>ML_command %invisible \\&lt;open&gt;ML_Heap.share_common_data ()\\&lt;close&gt;</p>\n<p>Here are some measurements for Isabelle/d8884c111bca + AFP/44c49a721891<br>\non x86-linux with 6 threads.</p>\n<p>(0) standard setup:<br>\nFinished Algebraic_Numbers (0:04:21 elapsed time, 0:20:03 cpu time,<br>\nfactor 4.60)</p>\n<p>(1) ML_command share_common_data:<br>\nFinished Algebraic_Numbers (0:05:23 elapsed time, 0:23:52 cpu time,<br>\nfactor 4.43)</p>\n<p>(2) Algebraic_Numbers based on Algebraic_Number_Lib:<br>\nFinished Algebraic_Number_Lib (0:01:18 elapsed time, 0:05:31 cpu time,<br>\nfactor 4.21)<br>\nFinished Algebraic_Numbers (0:04:07 elapsed time, 0:17:55 cpu time,<br>\nfactor 4.34)</p>\n<p>The times for (1) are approximately equal to the sums of times for (2).</p>\n<p>Maybe Lars can try share_common_data on the AFP test hardware to see if<br>\nit still happens to work on 32bit architecture.</p>\n<p>Makarius</p>",
        "id": 294676505,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661175127
    },
    {
        "content": "<p>From: Manuel Eberl &lt;<a href=\"mailto:eberlm@in.tum.de\">eberlm@in.tum.de</a>&gt;<br>\nThe Algebraic_Numbers theory is notoriously big and resource-intensive. <br>\nI have a development that imports Algebraic_Numbers and then adds some <br>\nsmall things on top of it and exports code. Oddly, this then causes <br>\nstack overflows unless I switch to 64 bit Isabelle.</p>\n<p>I noticed that a huge chunk of the resource hunger of that development <br>\nactually comes from Algebraic_Number_Tests.thy, which one does not even <br>\nneed in order to use the development.</p>\n<p>I therefore propose removing this theory from the Algebraic_Numbers <br>\nsession and introducing a separate Algebraic_Number_Tests session for <br>\nit. I tried this locally and this is theh difference that it made:</p>\n<p>Before: Finished Algebraic_Numbers (0:04:33 elapsed time, 0:15:05 cpu <br>\ntime, factor 3.31)<br>\nAfter: Finished Algebraic_Numbers (0:01:18 elapsed time, 0:04:05 cpu <br>\ntime, factor 3.12)</p>\n<p>Now, I don't know if and by how much this reduces the memory <br>\nrequirements and I have no idea how to measure this reliably. In any <br>\ncase, I do not see any drawbacks of doing this.</p>\n<p>Any opinions?</p>\n<p>Cheers,</p>\n<p>Manuel</p>",
        "id": 294677328,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661175407
    },
    {
        "content": "<p>From: Florian Haftmann &lt;<a href=\"mailto:florian.haftmann@informatik.tu-muenchen.de\">florian.haftmann@informatik.tu-muenchen.de</a>&gt;<br>\nIMHO it is good style that things on which others are supposed to build<br>\nupon contain only libraries, not tests.  So, I would suggest to go ahead.</p>\n<p>Cheers,<br>\n    Florian Haftmann<br>\n<a href=\"/user_uploads/14278/XqfBOwERSlkqegV9fYbzk9mg/signature.asc\">signature.asc</a></p>",
        "id": 294677528,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661175475
    },
    {
        "content": "<p>From: \"Thiemann, Rene\" &lt;<a href=\"mailto:Rene.Thiemann@uibk.ac.at\">Rene.Thiemann@uibk.ac.at</a>&gt;<br>\nDear all,</p>\n<p>it is perfectly fine to me, to create a separate target in the ROOT file without the tests,<br>\ne.g., as indicated below. However, I’m unsure how the document preparation will work in this<br>\nway. Somehow both entries contribute to the final PDF, i.e., both parts should be displayed on<br>\nthe AFP-website.</p>\n<p>Does anybody know an easy solution to this?</p>\n<p>Cheers,<br>\nRené</p>\n<p>session Algebraic_Numbers_With_Tests (AFP) = Algebraic_Numbers +<br>\n  description {* Testing Algebraic Number *}<br>\n  options [timeout = 1200]<br>\n  theories<br>\n    \"Algebraic_Number_Tests\"<br>\n  document_files<br>\n    \"root.bib\"<br>\n    \"root.tex\"</p>\n<p>session Algebraic_Numbers (AFP) = Pre_Algebraic_Numbers +<br>\n  description {* Algebraic Numbers *}<br>\n  options [timeout = 600]<br>\n  theories<br>\n    \"Missing_Multiset\"<br>\n    \"Missing_List\"<br>\n    \"Compare_Complex\"<br>\n    \"Improved_Code_Equations\"<br>\n    \"Precomputation\"<br>\n    \"Is_Rat_To_Rat\"<br>\n    \"Ring_Hom_Poly\"<br>\n    \"Order_Polynomial\"<br>\n    \"Binary_Exponentiation\"<br>\n    \"Explicit_Roots\"<br>\n    \"Rational_Root_Test\"<br>\n    \"Kronecker_Factorization\"<br>\n    \"Square_Free_Factorization\"<br>\n    \"Berlekamp_Hensel_Factorization\"<br>\n    \"Rational_Factorization\"<br>\n    \"Real_Factorization\"<br>\n    \"Show_Real_Approx“<br>\n    \"Show_Real_Precise\"<br>\n  document_files<br>\n    \"root.bib\"<br>\n    \"root.tex\"<br>\n<a href=\"/user_uploads/14278/v-ScDY3EM3rZogUudIZm8Guk/signature.asc\">signature.asc</a></p>",
        "id": 294677745,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661175547
    }
]