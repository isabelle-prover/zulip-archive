[
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nThe expert on these things is Stefan Berghofer.</p>\n<p>Makarius</p>",
        "id": 294145582,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660847383
    },
    {
        "content": "<p>From: Stefan Berghofer &lt;<a href=\"mailto:berghofe@in.tum.de\">berghofe@in.tum.de</a>&gt;<br>\nQuoting John Munroe &lt;<a href=\"mailto:munddr@gmail.com\">munddr@gmail.com</a>&gt;:</p>\n<blockquote>\n<blockquote>\n<p>I'm trying to find a clause that is displayed by 'full_prf' in a proof<br>\nterm. For instance:</p>\n<p>[...]</p>\n<p>Now if I do:</p>\n<p>ML {*<br>\nval thm = @{thm \"lem1\"};<br>\nval prf = Thm.proof_of thm;<br>\nval prop = Thm.full_prop_of thm;<br>\nval prf' = Proofterm.rewrite_proof_notypes ([],[]) prf;<br>\nval prf'' = Reconstruct.reconstruct_proof @{theory} prop prf'<br>\n*}</p>\n<p>I get a massive proof term. If I want to find the line \"(transitive %<br>\nTYPE(bool) % f 0 = 1 | f 0 = 0 % False | True % True %%\", how do I<br>\nextract it from the proof term? I'm just trying to see which disjunct<br>\nis proved, so I thought if I could extract \"False | True\" then I can<br>\ninfer that the second disjunct is proved.</p>\n</blockquote>\n</blockquote>\n<p>Hi John,</p>\n<p>since your theorem has already been stored in the theorem database,<br>\nthe proof returned by Thm.proof_of has simply the form</p>\n<p>PThm (..., ((\"Theory_Name.lem1\", ..., ...), body))</p>\n<p>so you have to use Proofterm.strip_thm to obtain the actual proof. You can<br>\nthen search for the desired subproof by recursion on the structure of the<br>\nproof term datatype (see attached theory).</p>\n<p>Greetings,<br>\nStefan</p>\n<blockquote>\n<blockquote>\n<p>Any assistance or opinions will be much appreciated. Thanks.</p>\n<p>John<br>\n</p>\n</blockquote>\n<p><a href=\"/user_uploads/14278/KI6KL6KevpAhAUzhzQPTbivE/Munroe.thy\">Munroe.thy</a></p>\n</blockquote>",
        "id": 294145612,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660847392
    },
    {
        "content": "<p>From: John Munroe &lt;<a href=\"mailto:munddr@gmail.com\">munddr@gmail.com</a>&gt;<br>\nHi,</p>\n<p>I'm trying to find a clause that is displayed by 'full_prf' in a proof<br>\nterm. For instance:</p>\n<p>axiomatization<br>\nf :: \"nat =&gt; nat\"<br>\nwhere ax: \"f 0 = 0\"<br>\nand ax': \"f 0 = 1\"</p>\n<p>lemma lem1: \"f 0 = 1 | f 0 = 0\"<br>\nusing ax<br>\nby auto</p>\n<p>full_prf lem1</p>\n<p>gives the following proof:</p>\n<p>equal_elim % True % f 0 = 1 | f 0 = 0 %%<br>\n (symmetric % TYPE(prop) % f 0 = 1 | f 0 = 0 % True %%<br>\n   (combination % TYPE(bool) % TYPE(prop) % Trueprop % Trueprop %<br>\n     f 0 = 1 | f 0 = 0 %<br>\n     True %%<br>\n     (reflexive % TYPE(bool =&gt; prop) % Trueprop) %%<br>\n     (transitive % TYPE(bool) % f 0 = 1 | f 0 = 0 % False | True % True %% ...</p>\n<p>Now if I do:</p>\n<p>ML {*<br>\nval thm = @{thm \"lem1\"};<br>\nval prf = Thm.proof_of thm;<br>\nval prop = Thm.full_prop_of thm;<br>\nval prf' = Proofterm.rewrite_proof_notypes ([],[]) prf;<br>\nval prf'' = Reconstruct.reconstruct_proof @{theory} prop prf'<br>\n*}</p>\n<p>I get a massive proof term. If I want to find the line \"(transitive %<br>\nTYPE(bool) % f 0 = 1 | f 0 = 0 % False | True % True %%\", how do I<br>\nextract it from the proof term? I'm just trying to see which disjunct<br>\nis proved, so I thought if I could extract \"False | True\" then I can<br>\ninfer that the second disjunct is proved.</p>\n<p>Any assistance or opinions will be much appreciated. Thanks.</p>\n<p>John</p>",
        "id": 294145957,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660847513
    },
    {
        "content": "<p>From: John Munroe &lt;<a href=\"mailto:munddr@gmail.com\">munddr@gmail.com</a>&gt;<br>\nAnyone got any idea?</p>\n<p>Thanks<br>\nJohn</p>",
        "id": 294146896,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660847849
    },
    {
        "content": "<p>From: Jasmin Blanchette &lt;<a href=\"mailto:jasmin.blanchette@gmail.com\">jasmin.blanchette@gmail.com</a>&gt;<br>\nHi John,</p>\n<p>From the little I understand about proof terms, they inline all referenced lemmas, which would explain why they can be so huge when you print them at the ML level. The trick would be to write your own traversal function on proof terms that does not enter the lemmas. Hopefully somebody who knows them better can comment further on this.</p>\n<p>Regards,</p>\n<p>Jasmin</p>",
        "id": 294146937,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660847863
    }
]