[
    {
        "content": "<p>From: Peter Lammich &lt;<a href=\"mailto:peter.lammich@uni-muenster.de\">peter.lammich@uni-muenster.de</a>&gt;<br>\nI get the following warning in Isabelle 2005:</p>\n<h3>Ambiguous input \"ALL y&lt;(x::nat). P x\"</h3>\n<h3>produces 2 parse trees.</h3>\n<h3>(\"Trueprop\" (\"_lessAll\" y (\"_constrain\" x nat) (\"_applC\" P x)))</h3>\n<h3>(\"Trueprop\" (\"_setlessAll\" y (\"_constrain\" x nat) (\"_applC\" P x)))</h3>\n<h3>Fortunately, only one parse tree is type correct.</h3>\n<h3>You may still want to disambiguate your grammar or your input.</h3>\n<p>Should I simply ignore it, or is there a way to turn it off (While still <br>\nusing the ALL y&lt;x Syntax) ?</p>\n<p>Greetings and thanks in advance<br>\n  Peter</p>",
        "id": 294045094,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660816987
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nYou may ignore this as long as you only get warnings, but no errors. <br>\nAlternatively, the following declarations will disambiguate the grammer in <br>\nthis respect:</p>\n<p>no_syntax<br>\n  \"_setlessAll\" :: \"[idt, 'a, bool] =&gt; bool\"  (\"(3ALL _&lt;_./ _)\"  [0, 0, 10] 10)<br>\n  \"_setlessEx\"  :: \"[idt, 'a, bool] =&gt; bool\"  (\"(3EX _&lt;_./ _)\"  [0, 0, 10] 10)<br>\n  \"_setleAll\"   :: \"[idt, 'a, bool] =&gt; bool\"  (\"(3ALL _&lt;=_./ _)\" [0, 0, 10] 10)<br>\n  \"_setleEx\"    :: \"[idt, 'a, bool] =&gt; bool\"  (\"(3EX _&lt;=_./ _)\" [0, 0, 10] 10)</p>\n<p>no_syntax (HOL)<br>\n  \"_setlessAll\" :: \"[idt, 'a, bool] =&gt; bool\"   (\"(3! _&lt;_./ _)\"  [0, 0, 10] 10)<br>\n  \"_setlessEx\"  :: \"[idt, 'a, bool] =&gt; bool\"   (\"(3? _&lt;_./ _)\"  [0, 0, 10] 10)<br>\n  \"_setleAll\"   :: \"[idt, 'a, bool] =&gt; bool\"   (\"(3! _&lt;=_./ _)\" [0, 0, 10] 10)<br>\n  \"_setleEx\"    :: \"[idt, 'a, bool] =&gt; bool\"   (\"(3? _&lt;=_./ _)\" [0, 0, 10] 10)</p>\n<p>syntax (output)<br>\n  \"_setlessAll\" :: \"[idt, 'a, bool] =&gt; bool\"  (\"(3ALL _&lt;_./ _)\"  [0, 0, 10] 10)<br>\n  \"_setlessEx\"  :: \"[idt, 'a, bool] =&gt; bool\"  (\"(3EX _&lt;_./ _)\"  [0, 0, 10] 10)<br>\n  \"_setleAll\"   :: \"[idt, 'a, bool] =&gt; bool\"  (\"(3ALL _&lt;=_./ _)\" [0, 0, 10] 10)<br>\n  \"_setleEx\"    :: \"[idt, 'a, bool] =&gt; bool\"  (\"(3EX _&lt;=_./ _)\" [0, 0, 10] 10)</p>\n<p>syntax (HOL output)<br>\n  \"_setlessAll\" :: \"[idt, 'a, bool] =&gt; bool\"   (\"(3! _&lt;_./ _)\"  [0, 0, 10] 10)<br>\n  \"_setlessEx\"  :: \"[idt, 'a, bool] =&gt; bool\"   (\"(3? _&lt;_./ _)\"  [0, 0, 10] 10)<br>\n  \"_setleAll\"   :: \"[idt, 'a, bool] =&gt; bool\"   (\"(3! _&lt;=_./ _)\" [0, 0, 10] 10)<br>\n  \"_setleEx\"    :: \"[idt, 'a, bool] =&gt; bool\"   (\"(3? _&lt;=_./ _)\" [0, 0, 10] 10)</p>\n<p>Makarius</p>",
        "id": 294045486,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660817122
    }
]