[
    {
        "content": "<p>From: \"W. Douglas Maurer\" &lt;<a href=\"mailto:maurer@gwu.edu\">maurer@gwu.edu</a>&gt;<br>\nThis seems like a really simple question, but after weeks of <br>\nsearching with no success I finally have to ask the list, since my <br>\nstudent is waiting for the answer so he can finish his project: Where <br>\nis (P(0) and (for all (j::nat &gt; 0) there exists i &lt; j such that (P(i) <br>\nimplies P(j)))) implies P(n) for all n? Many thanks! -WDMaurer</p>",
        "id": 294637796,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661160876
    },
    {
        "content": "<p>From: \"Elsa L. Gunter\" &lt;<a href=\"mailto:egunter@illinois.edu\">egunter@illinois.edu</a>&gt;<br>\nI don't know if that exact theorem is embedded in in Isabelle somewhere, <br>\nbut it can be derived from strong induction (aka nat_less_induct) as <br>\nfollows:</p>\n<p>lemma strange_induct[rule_format]: \"(P (0::nat)) ⟶ (∀ j &gt; 0. ∃ i &lt; j. P <br>\ni ⟶ P j) ⟶ P n\"<br>\nproof (induct rule: nat_less_induct, auto)<br>\n  fix n<br>\n  assume A:\" ∀m&lt;n. P m\" and B: \"P 0\" and C: \" ∀j&gt;0∷nat. ∃i&lt;j. P i ⟶ P j\"<br>\n  from A and B and C<br>\n  show \"P n\"<br>\n  by (case_tac \"n = 0\", auto)<br>\nqed</p>\n<p>---Elsa</p>",
        "id": 294637809,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661160883
    },
    {
        "content": "<p>From: Christian Sternagel &lt;<a href=\"mailto:c.sternagel@gmail.com\">c.sternagel@gmail.com</a>&gt;<br>\nJust for the record, it is bad style to start a proof with an automatic <br>\nmethod (\"proof (..., auto)\" above), since basically the resulting <br>\nsubgoals can change at the whim of whoever is maintaining the theories <br>\nyour own development is based on.</p>\n<p>This can often be avoided by phrasing the lemma statement more <br>\n\"Isarish\", e.g.,</p>\n<p>lemma strange_induct:<br>\n   assumes \"P (0::nat)\"<br>\n     and \"∀j &gt; 0. ∃i &lt; j. P i ⟶ P j\"<br>\n   shows \"P n\"<br>\nproof (induct rule: nat_less_induct)<br>\n   fix n<br>\n   assume \" ∀m &lt; n. P m\"<br>\n   with assms show \"P n\" by (cases n) auto<br>\nqed</p>\n<p>Another possibility is to use a combination of raw proof blocks and a <br>\nfinal application of an automatic method:</p>\n<p>lemma strange_induct' [rule_format]:<br>\n   \"P (0::nat) ⟶ (∀ j &gt; 0. ∃ i &lt; j. P i ⟶ P j) ⟶ P n\"<br>\nproof -<br>\n   {<br>\n     fix n<br>\n     assume \"∀m &lt; n. P m\" and \"P 0\" and \" ∀ j &gt; 0. ∃ i &lt; j. P i ⟶ P j\"<br>\n     then have \"P n\" by (cases \"n = 0\") auto<br>\n   }<br>\n   then show ?thesis<br>\n     by (induct rule: nat_less_induct) blast<br>\nqed</p>\n<p>In that way you can just state what you <em>want</em> (as opposed to what you <br>\n<em>have</em> to state according to the current subgoal) and rely on automatic <br>\ntools to make sure that this corresponds to the current subgoal.</p>\n<p>cheers</p>\n<p>chris</p>",
        "id": 294637835,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661160894
    }
]