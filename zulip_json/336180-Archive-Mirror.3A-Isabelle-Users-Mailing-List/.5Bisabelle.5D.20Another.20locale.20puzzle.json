[
    {
        "content": "<p>From: \"Eugene W. Stark\" &lt;<a href=\"mailto:stark@cs.stonybrook.edu\">stark@cs.stonybrook.edu</a>&gt;<br>\nI wanted to use locales to represent a relationship between<br>\nthree classes of structures: A, B, and C, where C includes<br>\nall the constants and axioms of both A and B, and where<br>\nan instance of either A or B can be definitionally extended<br>\nto an instance of C.</p>\n<p>The code below abstracts what I was trying to do.<br>\nHowever, only one of the two sublocale declarations will succeed;<br>\nin the presence of one an attempt to introduce the second will<br>\nfail with a \"duplicate constant\" error.</p>\n<p>How should I think about what is happening here in order to<br>\nunderstand why there is a duplicate constant, and is there any<br>\nway to work around this to do what I was trying to do?</p>\n<p>Thanks for your forbearance and assistance.</p>\n<p>- Gene Stark</p>\n<p>theory Strange1<br>\nimports Main<br>\nbegin</p>\n<p>locale A =<br>\n   fixes a<br>\n   assumes \"a = a\"<br>\n   begin<br>\n     definition b' where \"b' = a\"<br>\n   end</p>\n<p>locale B =<br>\n   fixes b<br>\n   assumes \"b = b\"<br>\n   begin<br>\n     definition a' where \"a' = b\"<br>\n   end</p>\n<p>locale C = A a + B b<br>\n   for a :: 'a and b :: 'a +<br>\n   assumes \"a = b\"</p>\n<p>sublocale A ⊆ C a b'<br>\n   proof<br>\n     show \"b' = b'\" by auto<br>\n     show \"a = b'\" using b'_def by auto<br>\n   qed</p>\n<p>sublocale B ⊆ C a' b  (* Duplicate constant: local.a' vs. local.a' *)<br>\n   proof<br>\n     show \"a' = a'\" by auto<br>\n     show \"a' = b\" using a'_def by auto<br>\n   qed</p>\n<p>end</p>",
        "id": 294331455,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660930404
    },
    {
        "content": "<p>From: Andreas Lochbihler &lt;<a href=\"mailto:andreas.lochbihler@inf.ethz.ch\">andreas.lochbihler@inf.ethz.ch</a>&gt;<br>\nDear Eugene,</p>\n<p>In your example, you are creating a cycle in the sublocale graph (C is a sublocale of A <br>\nand B, and both A and B shall be sublocales of C). To see what happens, it is best to <br>\nexplore all the interpretations that you create. In the following picture, -&gt; denotes an <br>\nedge in the sublocale graph.</p>\n<p>C a b -&gt; A a -&gt; C a b' -&gt; A a (subsumed by previous interpretation)<br>\n   |                |<br>\n   |                +----&gt; B b' -&gt; C a' b -&gt; A a'<br>\n   |<br>\n   +----&gt; ...</p>\n<p>As you can see, with both sublocale commands, you try to interpret the locale A twice. <br>\nOnce with the parameter a, once with the parameter a'. Logically, both are the same by the <br>\ndefinition, but Isabelle cannot see this. Thus, when you open the locale context C a b, <br>\nyou would want to define a' from A with respect to the locale parameter a and once more <br>\nwith respect to the parameter a'. As a' can only be defined once, you get an error as <br>\nexpected.</p>\n<p>In general, I recommend to avoid cyclic locale dependencies. Except for rare cases, they <br>\nmost likely get you into trouble. If you want to have B extended to C definitionally, then <br>\ndefine a new locale B_extended and make only B_extended a sublocale of C. Then, you avoid <br>\nthe cycles and name space problems.</p>\n<p>Best,<br>\nAndreas</p>",
        "id": 294331587,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660930452
    }
]