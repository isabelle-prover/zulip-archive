[
    {
        "content": "<p>From: \"John F. Hughes\" &lt;<a href=\"mailto:jfh@cs.brown.edu\">jfh@cs.brown.edu</a>&gt;<br>\nI'd like to write an Isar proof about lines in the cartesian plane in a<br>\ndeliberately basic way.</p>\n<p>I've got distinct points (x0,y0) and (x1, y1), and want to show that<br>\nthere's a line between them. \"lines\" are represented either by a pair (m,<br>\nb), describing the line y = mx + b, or by a number c, representing the line<br>\nx = c.</p>\n<p>The natural proof for me as a mathematician splits into two cases: 1. where<br>\nx0 = x1 (in which case we know that y0 is not equal to y1, and can build<br>\nthe vertical line at x = x0) , or</p>\n<ol start=\"2\">\n<li>Where x0 is not equal to x1, in which case I can compute the slope and<br>\nintercept and construct an ordinary line to show existence.</li>\n</ol>\n<p>I've made choices about datatypes that you may find non-idiomatic, but I<br>\nmade them on purpose, and I suspect that every if they're not idiomatic,<br>\nthey should be usable --- they don't seem to me to express anything that's<br>\nan incorrect model of my geometric question. My <em>real</em> question is about<br>\nhow to write case-based proofs of the kind described above.</p>\n<p>So here's what I tried:</p>\n<p>datatype a2pt = A2Point \"real\" \"real\"</p>\n<p>datatype a2ln = A2Ordinary \"real\" \"real\"<br>\n                | A2Vertical \"real\"</p>\n<p>lemma A2_a1: \"P ≠ Q ⟹ ∃! l . a2meets P l ∧ a2meets Q l\"</p>\n<p>When I typed</p>\n<p>proof cases</p>\n<p>I was offered a template for case-proofs, namely<br>\nproof cases<br>\n    case True<br>\n    then show ?thesis sorry<br>\n  next<br>\n    case False<br>\n    then show ?thesis sorry<br>\n  qed</p>\n<p>but the line 'case True' (which I frankly don't understand) was highlighted<br>\nwith the response 'Illegal schematic variable(s) in case \"True\" '</p>\n<p>I tried editing a little, to<br>\nproof<br>\n    fix x0 y0 assume \"P = (A2Point x0 y0)\"<br>\n    fix x1 y1 assume \"Q = (A2Point x1 y1)\"<br>\n    proof cases</p>\n<p>...but that got me a \"Illegal application of proof command in \"state\" mode\"<br>\nerror, which I cannot find in any of the explanatory material I've seen<br>\nabout Isabelle (indeed, the term \"state mode\" eludes me as well).</p>\n<p>Putting the two \"fix\" lines within the cases proof helped a little:</p>\n<p>proof cases<br>\n    fix x0 y0 assume \"P = (A2Point x0 y0)\"<br>\n    fix x1 y1 assume \"Q = (A2Point x1 y1)\"<br>\n    case True<br>\n    then show ?thesis sorry...</p>\n<p>but the \"case True\" still produced an error. I thought maybe I could state<br>\na case that actually meant what I intended, so I tried</p>\n<p>lemma A2_a1: \"P ≠ Q ⟹ ∃! l . a2meets P l ∧ a2meets Q l\"<br>\nproof cases<br>\n    fix x0 y0 assume \"P = (A2Point x0 y0)\"<br>\n    fix x1 y1 assume \"Q = (A2Point x1 y1)\"<br>\n    case \"(x0 = x1)\"<br>\n    ...</p>\n<p>but that base statement generated an error \"Undefined case: \"(x0 = x1)\"⌂\".</p>\n<p>I'd appreciate any hints you can give.</p>",
        "id": 294752340,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661195925
    },
    {
        "content": "<p>From: \"John F. Hughes\" &lt;<a href=\"mailto:jfh@cs.brown.edu\">jfh@cs.brown.edu</a>&gt;<br>\nGene Stark points out that without the whole Theory file, it's not clear<br>\nwhat I'm up to. I've attached it here, in hopes that this gets it to the<br>\nrest of the distribution list.<br>\n-John<br>\n<a href=\"/user_uploads/14278/KYKcTy1iQ0AJofRfN6egfFW8/Question4.thy\">Question4.thy</a></p>",
        "id": 294752357,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661195931
    },
    {
        "content": "<p>From: Thomas Sewell &lt;<a href=\"mailto:sewell@chalmers.se\">sewell@chalmers.se</a>&gt;<br>\nHi John. It's raining where I am, so I had a go at your proof.</p>\n<p>BTW, when posting examples like this, it can be useful to include all relevant definitions. I had to guess at your definition of \"a2meets\", so it's possible my proof script below won't work for you.</p>\n<p>It looks like you've hit a few cases involving unexpected defaults.</p>\n<p>Firstly, to explain your problem, when you type \"proof cases\" the system has gone into a strange state involving a thing called a schematic variable. It's not actually irrecoverable, but you generally don't want this. Usually cases takes an argument, which is a term whose type has a case-division principle. In the absence of an argument, it's picked an unknown (schematic) value of type bool, with cases True and False.</p>\n<p>In one of your later attempts, BTW, you've hit another slightly unusual default. If you just type \"proof\" without saying what kind of proof, the system tries to perform one step by a default rule. Here it picked the rule ex1I, which you can have a look at ( type thm ex1I somewhere ). Until you understand the system better, I'd recommend you type \"proof -\", which is proof without any steps.</p>\n<p>One more note on your email, if you tick the \"Proof state\" box in the output panel, you'll see that parser for structure proofs alternates between \"proof (state)\" mode and \"proof (prove)\" mode. I would describe the first as forward-style, where you're expected to state some new fact to prove, and the second as backward-style, where you're expected to work on a goal that has been somehow stated.</p>\n<p>Anyway. Since we want to use ex1I eventually, I had a go at building a structured proof in which I construct the required premises. The thesis in each case is then proven \"by auto\", which knew to use the default rules. I haven't proven all the bits, and if your a2meets definition is different to mine then my proof steps might not apply. I hope that clarifies a bit.</p>\n<p>Cheers,</p>\n<p>Thomas.</p>\n<p>fun pt_x :: \"a2pt ⇒ real\" where<br>\n  \"pt_x (A2Point x y) = x\"</p>\n<p>fun pt_y :: \"a2pt ⇒ real\" where<br>\n  \"pt_y (A2Point x y) = y\"</p>\n<p>definition<br>\n  \"a2meets P l = (case l of A2Ordinary m b ⇒ pt_y P = (m * pt_x P) + b<br>\n    | A2Vertical c ⇒ pt_x P = c)\"</p>\n<p>lemma A2_a1: \"P ≠ Q ⟹ ∃! l . a2meets P l ∧ a2meets Q l\"<br>\nproof (cases \"pt_x P = pt_x Q\")<br>\n  case True<br>\n  assume PQ: \"P ≠ Q\"<br>\n  define l where \"l = A2Vertical (pt_x P)\"<br>\n  have meets: \"a2meets P l ∧ a2meets Q l\"<br>\n    by (simp add: l_def a2meets_def True)<br>\n  from PQ True have iff: \"a2meets P l' ∧ a2meets Q l' ⟶ l' = l\" for l'<br>\n    apply (clarsimp simp: a2meets_def l_def split: a2ln.split)<br>\n    apply (cases P; cases Q; clarsimp)<br>\n    done<br>\n  from meets iff show ?thesis<br>\n    by auto<br>\nnext<br>\n  case False<br>\n  define m where \"m = (pt_y Q - pt_y P) / (pt_x Q - pt_x P)\"<br>\n  have \"∃b. a2meets P (A2Ordinary m b) ∧ a2meets Q (A2Ordinary m b)\"<br>\n    apply (simp add: a2meets_def m_def)<br>\n    apply (simp add: algebra_simps)<br>\n    sorry<br>\n  then obtain b where b: \"a2meets P (A2Ordinary m b) ∧ a2meets Q (A2Ordinary m b)\"<br>\n    ..<br>\n  define l where \"l = A2Ordinary m b\"<br>\n  note meets = b[folded l_def]<br>\n  have iff: \"a2meets P l' ∧ a2meets Q l' ⟶ l' = l\" for l'<br>\n    sorry<br>\n  from meets iff show ?thesis<br>\n    by auto<br>\nqed</p>",
        "id": 294752376,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661195938
    },
    {
        "content": "<p>From: \"John F. Hughes\" &lt;<a href=\"mailto:jfh@cs.brown.edu\">jfh@cs.brown.edu</a>&gt;<br>\nThanks, this is great. I <em>do</em> seem to have a knack for colliding with the<br>\nrough edges of things, alas. Your explanations help here.</p>\n<p>You correctly guessed the meaning of a2meets, although my version</p>\n<p>fun a2meets :: \"a2pt ⇒ a2ln ⇒ bool\" where<br>\n    \"a2meets (A2Point x y) (A2Ordinary m b) = (y = m*x + b)\" |<br>\n    \"a2meets (A2Point x y) (A2Vertical xi) = (x = xi)\"</p>\n<p>is less pretty than yours.</p>\n<p>I think that with your structure, I can probably fill in the rest, but in<br>\nat least one respect, I'll be just copying-without-understanding. When you<br>\nwrite</p>\n<p>from PQ True have iff: \"a2meets P l' ∧ a2meets Q l' ⟶ l' = l\" for l'</p>\n<p>can you tell me what the \"for l' \" at the end means? It appears redundant<br>\nto me, but I'm sure it's not.</p>\n<p>--John</p>",
        "id": 294752392,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661195944
    },
    {
        "content": "<p>From: Thomas Sewell &lt;<a href=\"mailto:sewell@chalmers.se\">sewell@chalmers.se</a>&gt;<br>\nAh yes, it's really a for-all. It's another technicality. If you type a free variable in a normal lemma statement, it becomes free in the resulting theorem. The equivalent doesn't happen by default for inner statements within proof blocks because the variable scopes are a bit more complicated.</p>\n<p>It would have been simpler if I'd stated the goal as have iff: \"∀l'. a2meets P l' ∧ a2meets Q l' ⟶ l' = l\"</p>\n<p>Cheers,</p>\n<p>Thomas.</p>",
        "id": 294752419,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661195956
    },
    {
        "content": "<p>From: \"Eugene W. Stark\" &lt;<a href=\"mailto:isabelle-users@starkeffect.com\">isabelle-users@starkeffect.com</a>&gt;<br>\nJohn -</p>\n<p>I had a go at it as well, and came up with the attached.<br>\nI didn't try to streamline it more.  I am not very good at the use of the cases<br>\nfeature, so things are probably more verbose here than what they need to be.</p>\n<p>- Gene Stark</p>\n<p>theory Question4<br>\nimports Complex_Main<br>\nbegin<br>\n  datatype a2pt = A2Point \"real\" \"real\"<br>\n  datatype a2ln = A2Ordinary \"real\" \"real\"<br>\n                | A2Vertical \"real\"<br>\n  text \"Ordinary m b represents the line y = mx+b; Vertical xo is the line x = xo \"</p>\n<p>fun a2meets :: \"a2pt ⇒ a2ln ⇒ bool\" where<br>\n    \"a2meets (A2Point x y) (A2Ordinary m b) = (y = m*x + b)\" |<br>\n    \"a2meets (A2Point x y) (A2Vertical xi) = (x = xi)\"</p>\n<p>lemma A2_a1: \"P ≠ Q ⟹ ∃! l . a2meets P l ∧ a2meets Q l\"<br>\n  proof -<br>\n    assume P_ne_Q: \"P ≠ Q\"<br>\n    show \"∃! l . a2meets P l ∧ a2meets Q l\"<br>\n    proof (cases P, cases Q)<br>\n      fix px py qx qy<br>\n      assume P: \"P = A2Point px py\"<br>\n      assume Q: \"Q = A2Point qx qy\"<br>\n      show \"∃! l . a2meets P l ∧ a2meets Q l\"<br>\n      proof (cases \"px = qx\")<br>\n        assume eq: \"px = qx\"<br>\n        show \"∃!l. a2meets P l ∧ a2meets Q l\"<br>\n        proof<br>\n          show \"a2meets P (A2Vertical px) ∧ a2meets Q (A2Vertical px)\"<br>\n            using P Q eq by simp<br>\n          show \"⋀l. a2meets P l ∧ a2meets Q l ⟹ l = A2Vertical px\"<br>\n          proof -<br>\n            fix l<br>\n            show \"a2meets P l ∧ a2meets Q l ⟹ l = A2Vertical px\"<br>\n            proof (cases l)<br>\n              show \"⋀m b. a2meets P l ∧ a2meets Q l ⟹ l = A2Ordinary m b ⟹ l = A2Vertical px\"<br>\n                using P Q P_ne_Q eq by simp<br>\n              show \"⋀x. a2meets P l ∧ a2meets Q l ⟹ l = A2Vertical x ⟹ l = A2Vertical px\"<br>\n                using P by simp<br>\n            qed<br>\n          qed<br>\n        qed<br>\n        next<br>\n        assume neq: \"px ≠ qx\"<br>\n        show \"∃!l. a2meets P l ∧ a2meets Q l\"<br>\n        proof<br>\n          let ?m = \"(qy - py)/(qx - px)\"<br>\n          let ?b = \"py - ?m * px\"<br>\n          have *: \"py = ?m * px + ?b ∧ qy = ?m * qx + ?b\"<br>\n          proof -<br>\n            have \"?m * qx - ?m * px + py = ?m * (qx - px) + py\"<br>\n              by argo<br>\n            also have \"... = qy - py + py\"<br>\n              using neq by simp<br>\n            also have \"... = qy\"<br>\n              by simp<br>\n            finally show ?thesis by simp<br>\n          qed<br>\n          show \"a2meets P (A2Ordinary ?m ?b) ∧ a2meets Q (A2Ordinary ?m ?b)\"<br>\n            using * P Q by simp<br>\n          show \"⋀l. a2meets P l ∧ a2meets Q l ⟹ l = A2Ordinary ?m (py - ?m * px)\"<br>\n          proof -<br>\n            fix l<br>\n            assume l: \"a2meets P l ∧ a2meets Q l\"<br>\n            show \"l = A2Ordinary ?m (py - ?m * px)\"<br>\n            proof (cases l)<br>\n              case (A2Ordinary m b)<br>\n              assume 1: \"l = A2Ordinary m b\"<br>\n              have \"py = m * px + b ∧ qy = m * qx + b\"<br>\n                using P Q l 1 by simp<br>\n              hence \"m = ?m ∧ b = ?b\"<br>\n                using neq by (smt \"<em>\" crossproduct_noteq)  (</em> Found with sledgehammer *)<br>\n              thus \"l = A2Ordinary ?m ?b\"<br>\n                using 1 by simp<br>\n            next<br>\n              case (A2Vertical x)<br>\n              assume 1: \"l = A2Vertical x\"<br>\n              then show \"l = A2Ordinary ?m ?b\"<br>\n                (*</p>\n<p>* This is false, something of the form A2Vertical cannot equal<br>\n                 * something of the form A2Ordinary (the datatype is freely generated<br>\n                 * by its constructors).<br>\n                 *</p>\n<p>* So uniqueness fails because if l = A2Vertical x with x = px and x = qx<br>\n                 * then a2meets P l and a2meets Q l according to your definition.<br>\n                 *)<br>\n                sorry<br>\n            qed<br>\n          qed<br>\n        qed<br>\n      qed<br>\n    qed<br>\n  qed</p>\n<p>end<br>\n<a href=\"/user_uploads/14278/mP42Tg3Tx3OL2Qe-eAUwOi13/Question4.thy\">Question4.thy</a></p>",
        "id": 294752434,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661195963
    },
    {
        "content": "<p>From: \"Eugene W. Stark\" &lt;<a href=\"mailto:isabelle-users@starkeffect.com\">isabelle-users@starkeffect.com</a>&gt;<br>\nOops, it is true.  I was a bit too hasty and overlooked the assumption in force:</p>\n<p>next<br>\n              case (A2Vertical x)<br>\n              assume 1: \"l = A2Vertical x\"<br>\n              then show \"l = A2Ordinary ?m ?b\"<br>\n                using 1 P Q l neq by simp<br>\n            qed</p>\n<p>(erroneous previous posting)</p>",
        "id": 294752449,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661195969
    },
    {
        "content": "<p>From: \"Nagashima, Yutaka\" &lt;<a href=\"mailto:Yutaka.Nagashima@uibk.ac.at\">Yutaka.Nagashima@uibk.ac.at</a>&gt;<br>\nHi Dr. Wenzel and other Isabelle developers,</p>\n<blockquote>\n<p>One more note on your email, if you tick the \"Proof state\" box in the output panel, <br>\nyou'll see that parser for structure proofs alternates <br>\nbetween \"proof (state)\" mode and \"proof (prove)\" mode.</p>\n</blockquote>\n<p>Would it be possible to have this \"proof state\" box ticked by default in the next official Isabelle distribution?<br>\nIt is a small thing that could help new Isabelle users, I think.</p>\n<p>Last week I gave an introductory lecture about Isabelle to Mathematics students.<br>\nWith the \"proof state\" box unticked, all the four students were confused about their proof attempts,<br>\nuntil I looked into their displays and told them to tick the box.<br>\n...And it was their second Isabelle session.</p>\n<p>I saw a similar confusion when my (CS) colleagues installed Isabelle for the first time.</p>\n<p>Regards,<br>\nYutaka</p>",
        "id": 294752473,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661195980
    },
    {
        "content": "<p>From: Peter Lammich &lt;<a href=\"mailto:lammich@in.tum.de\">lammich@in.tum.de</a>&gt;<br>\nI second this request, but I remember that, a few years ago, there were<br>\nstrong arguments for using Isabelle without the output display at all,<br>\nand use mouse hovering over the squiggly lines to review errors and<br>\nwarnings ... I never got used to this, in particular b/c of the waiting<br>\ntime until the tooltip pops up after hovering and the keyboard/mouse<br>\nswitching. It simply interferes with my workflow.</p>",
        "id": 294752486,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661195987
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nI have introduced this default some years ago specifically for new users<br>\n(notable those who have not been spoilt yet by old-style TTY-based proof<br>\nassistants). At the same time I also introduced the State dockable as<br>\nalternative to it. Current users can rather trivially arrange their<br>\ndefault GUI for the preferred setup: either old-style Output with proof<br>\nstate enabled, or new-style State which is specifically for the proof state.</p>\n<p>I've given several 1-2 day courses of Isabelle where the first 1/2 day<br>\nworked very well without ever showing Output or its old-fashioned proof<br>\nstate within it. Recall that Isabelle/Isar is about proof documents, not<br>\n\"proof scripts\". So there is one main document editor where you compose<br>\nyour text; everything else is somewhere in the background.</p>\n<p>Further note that the State panel has various technological advantages<br>\nover implicit output of states via the Output panel: the State GUI can<br>\ninteract more directly with the prover, without requiring changes to<br>\ncommands in the text. In the next round of refinement, the State panel<br>\nwill get more buttons and options to help interactive development of<br>\nproof documents in the main buffer.</p>\n<p>The optional proof state in the Output panel will not participate in<br>\nfurther upgrades, and might eventually fall out of use.</p>\n<p>Makarius</p>",
        "id": 294752502,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661195993
    },
    {
        "content": "<p>From: \"Eugene W. Stark\" &lt;<a href=\"mailto:isabelle-users@starkeffect.com\">isabelle-users@starkeffect.com</a>&gt;<br>\nThe output panel is the most useful panel in the entire display.<br>\nMaybe even more useful than the source panel.</p>\n<p>- Gene Stark</p>",
        "id": 294752518,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661195999
    },
    {
        "content": "<p>From: Wolfgang Jeltsch &lt;<a href=\"mailto:wolfgang-it@jeltsch.info\">wolfgang-it@jeltsch.info</a>&gt;<br>\nUntil I read your e-mail I hadn’t known that there was a “State<br>\ndockable”: the output tab is visible by default, the state dockable is<br>\nnot.</p>\n<p>Now I tried out the State dockable and found that it showed either<br>\nnothing or the text that was also shown in the Output tab. Thus I don’t<br>\nknow currently what the advantage of the State dockable over the Output<br>\ntab is.</p>\n<p>All the best,<br>\nWolfgang</p>",
        "id": 294752565,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661196005
    },
    {
        "content": "<p>From: Christian Sternagel &lt;<a href=\"mailto:c.sternagel@gmail.com\">c.sternagel@gmail.com</a>&gt;<br>\nDear all,</p>\n<p>just as another data point.</p>\n<p>I am currently using the approach advertised (I think) by Makarius that<br>\nPeter mentioned before, in an Isabelle course.</p>\n<p>Up to now there was only a single (3 hour) session, but maybe the first<br>\none is most critical.</p>\n<p>In this session I never even opened either the output or state panels<br>\n(neither did I use \"apply\", for that matter).</p>\n<p>Instead I told students to start from a proof attempt along the lines of</p>\n<p>by (induction ...) auto</p>\n<p>and then consult the resulting error message (click on the squiggly<br>\nunderline) for what they might be missing.</p>\n<p>By the end of the session all (18) students had solved all exercises and<br>\nI am not aware of any confusion caused by not using the output panel.</p>\n<p>cheers</p>\n<p>chris</p>",
        "id": 294752614,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661196026
    },
    {
        "content": "<p>From: Lawrence Paulson &lt;<a href=\"mailto:lp15@cam.ac.uk\">lp15@cam.ac.uk</a>&gt;<br>\nI only use the output panel for one thing: the “explore” tool. (A very useful add-on: it transforms your current proof state into explicit Isar text for writing your structured proof.) That’s because the formatting is better from the output panel. I certainly hope that “explore” will find its way into a release soon.</p>\n<p>Larry</p>",
        "id": 294752667,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661196055
    },
    {
        "content": "<p>From: Nemouchi Yakoub &lt;<a href=\"mailto:y.nemouchi@gmail.com\">y.nemouchi@gmail.com</a>&gt;<br>\nDear all,</p>\n<p>Big proofs related to very low level operations like proofs on VAMPasm<br>\noperations in the VerifSoft project are almost impossible without an output<br>\npanel.<br>\nSimilar to any functional correctness proofs related to system level<br>\noperations.</p>\n<p>Best wishes,</p>\n<p>Yakoub.</p>",
        "id": 294752683,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661196061
    },
    {
        "content": "<p>From: Wolfgang Jeltsch &lt;<a href=\"mailto:wolfgang-it@jeltsch.info\">wolfgang-it@jeltsch.info</a>&gt;<br>\nThis means they have to use the mouse and explicitly close error message<br>\nwindows. Such a workflow would be pretty uncomfortable for me.</p>\n<p>In general, I’d appreciate it a lot if the Isabelle IDE could be made<br>\nmore comfortable for people who mostly use the keyboard and can get on<br>\nspeed with it. In particular, it would be great if the completion<br>\nmechanism could be improved.</p>\n<p>Currently you have to wait a bit before you can complete macros for<br>\nsymbols with the tab key. That’s very annoying if you are used to type<br>\nfluently, because you have to make artificial breaks in your typing. In<br>\norder to not delay your typing more than necessary, you have the<br>\nincentive to make those breaks as short as possible, but this may lead<br>\nto too short a break, with the consequence that you have to delete<br>\nseveral characters and start over again.</p>\n<p>Another problem with the completion mechanism is that a completion list<br>\nsometimes pops up when you don’t need it (typically after entering a<br>\nquotation mark), and then you cannot navigate the cursor up or down.</p>\n<p>Could this situation be improved, or are these things too much wired<br>\ninto jEdit?</p>\n<p>By the way, have there been any attempts so far to integrate Isabelle<br>\ninto Vim?</p>\n<p>All the best,<br>\nWolfgang</p>",
        "id": 294752717,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661196073
    },
    {
        "content": "<p>From: Nemouchi Yakoub &lt;<a href=\"mailto:y.nemouchi@gmail.com\">y.nemouchi@gmail.com</a>&gt;<br>\nFor auto completion, there is an option somewhere in preferences that make<br>\nit faster. And sorry could not remember where exactly (emailing from my<br>\nphone).</p>\n<p>Best wishes</p>",
        "id": 294752730,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661196078
    },
    {
        "content": "<p>From: Peter Lammich &lt;<a href=\"mailto:lammich@in.tum.de\">lammich@in.tum.de</a>&gt;<br>\nHi</p>\n<blockquote>\n<p>In general, I’d appreciate it a lot if the Isabelle IDE could be made<br>\nmore comfortable for people who mostly use the keyboard and can get<br>\non<br>\nspeed with it. In particular, it would be great if the completion<br>\nmechanism could be improved.</p>\n</blockquote>\n<p>You can set \"completion delay\" to 0 in the options ... that's one of<br>\nthe first things I do when I set up a new Isabelle version! The upside<br>\nis that hardcoded completions (eg unicode symbols) come up immediately.<br>\nThe downside is that dynamic completions (eg lemma names) that come<br>\nfrom Isabelle through PIDE are not yet there ... you'll have to press<br>\nCTRL-B (or whatever shortcut you have for auto-completion), to also<br>\nmake these completions appear.</p>\n<blockquote>\n<p>Another problem with the completion mechanism is that a completion<br>\nlist<br>\nsometimes pops up when you don’t need it (typically after entering a<br>\nquotation mark), and then you cannot navigate the cursor up or down.</p>\n</blockquote>\n<p>I think you can configure this in etc/symbols. The one on quotation<br>\nmarks was introduced to remember the user that cartouches should be<br>\nused where possible, instead of quots.</p>",
        "id": 294752759,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661196091
    },
    {
        "content": "<p>From: Wolfgang Jeltsch &lt;<a href=\"mailto:wolfgang-it@jeltsch.info\">wolfgang-it@jeltsch.info</a>&gt;<br>\nThis is the first time I hear that inner syntax parts can be enclosed by<br>\ncartouches instead of quotation marks. That also backquotes can be<br>\nreplaced by cartouches was something I learned only after using Isabelle<br>\nfor several months. Could the <code>prog-prove</code> tutorial be updated to<br>\nreflect these new conventions? I think this tutorial is the best<br>\ndocument to get into Isabelle and consequently should be up to date.</p>\n<p>All the best,<br>\nWolfgang</p>",
        "id": 294752818,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661196116
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nNo, Isabelle is moving in the opposite direction.</p>\n<p>I recommend HOL4 in that respect.</p>\n<p>Makarius</p>",
        "id": 294753866,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661196537
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nSee Isabelle2091-RC0/src/HOL/ex/Sketch_and_Explore.thy with these<br>\nexperimental commands by Florian Haftmann. The use of Output is<br>\naccidental: since these are old-fashioned commands typed into the source<br>\nbuffer, output is displayed as on a TTY.</p>\n<p>I've recently had a private discussion with Florian about this  topic.<br>\nWe both agreed that the proper way is to integrate such a feature into<br>\nthe State GUI panel, i.e. to continue it towards an interactive<br>\nsketchpad for goal-oriented proof development. When this happens, the<br>\nOutput panel will be de-emphasized one step further (because it will<br>\nstay unchanged and not follow this trend).</p>\n<p>Makarius</p>",
        "id": 294753996,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661196600
    },
    {
        "content": "<p>From: Mathias Fleury &lt;<a href=\"mailto:mathias.fleury12@gmail.com\">mathias.fleury12@gmail.com</a>&gt;</p>\n<blockquote>\n<p>On 5. Apr 2019, at 12:21, Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt; wrote:</p>\n<p>On 12/03/2019 17:15, Wolfgang Jeltsch wrote:</p>\n<blockquote>\n<p>By the way, have there been any attempts so far to integrate Isabelle<br>\ninto Vim?</p>\n</blockquote>\n<p>No, Isabelle is moving in the opposite direction.</p>\n</blockquote>\n<p>As long as Isabelle supports the language server protocol, it is possible to make vim interact with Isabelle (with some limitations; e.g., there are no colours in the equivalent of the 'buffer+output buffer'). However, the integration requires some work. I don't know anything about the internals of vim, but, at least in emacs, the lack of multithreading is an issue.</p>\n<p>Otherwise, VSCode probably has a mode with vim keybindings.</p>\n<p>Mathias</p>\n<blockquote>\n<p>I recommend HOL4 in that respect.</p>\n<p>Makarius<br>\n</p>\n</blockquote>",
        "id": 294754182,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661196672
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nOn 05/04/2019 13:31, Mathias Fleury wrote:</p>\n<blockquote>\n<p>As long as Isabelle supports the language server protocol, it is possible to make vim interact with Isabelle (with some limitations; e.g., there are no colours in the equivalent of the 'buffer+output buffer'). However, the integration requires some work. I don't know anything about the internals of vim, but, at least in emacs, the lack of multithreading is an issue.</p>\n</blockquote>\n<p>I would say that is rather theoretical. A really working Prover IDE<br>\nrequires a lot of polishing and finishing beyond such standardized (and<br>\nlimited) protocols.</p>\n<blockquote>\n<p>Otherwise, VSCode probably has a mode with vim keybindings.</p>\n</blockquote>\n<p>It has one, but vim users have told me that it is not very serious. I<br>\nalso see a vi mode in IntelliJ IDEA, but cannot say anything about its<br>\nquality.</p>\n<p>Generally, one needs to understand that Isabelle came out of an Emacs<br>\nenvironment, but in the past 7 years that has been lost its relevance.<br>\nSince 4.5 years there is no way to get back to it.</p>\n<p>Vi never had a role in the Isabelle community. It is a plain text<br>\neditor, not the basis of a multithreaded IDE.</p>\n<p>Makarius</p>",
        "id": 294754228,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661196698
    },
    {
        "content": "<p>From: Christian Sternagel &lt;<a href=\"mailto:c.sternagel@gmail.com\">c.sternagel@gmail.com</a>&gt;<br>\nJust as historic fun fact: in 2007 I supervised a bachelor project that<br>\ndeveloped a vim plugin (\"Plugvim\") for interacting with \"Isabelle\". It<br>\nkind of worked at that time (when Isabelle itself was in the end just a<br>\nREPL), but never for serious work. Anyway, it is long forgotten (or<br>\nrather never took of in the first place) and even though I am using vim<br>\nfor most everything except when working with Isabelle, I am not looking<br>\nback: The continuous and parallel proof checking and semantic<br>\ninformation that comes with the Prover IDE is just too valuable.</p>\n<p>cheers</p>\n<p>chris</p>",
        "id": 294754323,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661196729
    }
]