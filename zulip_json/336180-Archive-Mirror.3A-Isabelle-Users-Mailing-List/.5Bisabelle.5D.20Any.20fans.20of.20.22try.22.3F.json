[
    {
        "content": "<p>From: Jasmin Blanchette via Cl-isabelle-users &lt;<a href=\"mailto:cl-isabelle-users@lists.cam.ac.uk\">cl-isabelle-users@lists.cam.ac.uk</a>&gt;<br>\nDear all,</p>\n<p>The \"try0\" and \"try\" commands were introduced to give an easy way to try out various tactics and tools. \"try0\" only applies a selection of tactics, whereas \"try\" additionally runs \"solve_direct\", Quickcheck, and reduced versions of Nitpick and Sledgehammer.</p>\n<p>I know people use \"try0\", including some experts, but I'm trying to find out whether \"try\" is used. The feedback I have about it, as well as my own impression, is that it just uses too much CPU at the same time to be useful, making the machine overheat. Also, because Nitpick and Sledgehammer are not the real thing, after a failed \"try\" one might still want to run them (esp. Sledgehammer), so \"try\" is not helping much. Finally, \"solve_direct\" and Auto Quickcheck are run by default, and you can also enable Auto Nitpick (which I've done for years), so in the end, \"try\" is really just \"try0 + reduced Sledgehammer + lots of heat\".</p>\n<p>My proposal:</p>\n<ol>\n<li>\n<p>Remove the \"try\" command.</p>\n</li>\n<li>\n<p>Rename \"try0\" to \"try\".</p>\n</li>\n<li>\n<p>(Maybe?) Enable Auto Nitpick.</p>\n</li>\n</ol>\n<p>(Auto Nitpick is a reduced version of Nitpick that doesn't take that much CPU and won't run for more than 5 s. It's useful on nonexecutable conjectures like \"hd [] = 0\" and other problems with an axiomatic flavor.)</p>\n<p>Any opinions?</p>\n<p>Jasmin</p>",
        "id": 294827806,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661245272
    },
    {
        "content": "<p>From: Peter Lammich &lt;<a href=\"mailto:lammich@in.tum.de\">lammich@in.tum.de</a>&gt;<br>\nHi,</p>\n<p>I'm using try0 very often. I only use nitpick if I don't trust my<br>\nlemma.</p>\n<p>My typical sequence to find a proof to some lemma, which is simple<br>\nenough such that I can hope for a few lines apply script, goes as<br>\nfollows:</p>\n<p>unfolding relevant-defs<br>\nauto simp: relevant-simps<br>\nALLGOALS (try0 or sledgehammer)</p>\n<p>One feature that I miss most here would be a sledgehammer configuration<br>\nthat saves resources while focusing on proof-finding, i.e., when the<br>\nfirst prover has found a proof, suspend the other provers and try proof<br>\nreconstruction. When a proof reconstruction is found, terminate and<br>\ndon't use up resources any more.</p>\n<p>This configuration would be beneficial when sledgehammer is run on many<br>\ngoals in parallel, in my case, the many VCs that a verification<br>\ncondition generator has left over.</p>\n<p>For better usability, it could be combined with a sledgehammer<br>\n(allgoals) option, to prevent the current</p>\n<p>subgoal sledgehammer sorry<br>\n  subgoal sledgehammer sorry<br>\n  ...<br>\n  subgoal sledgehammer sorry</p>\n<p>boilerplate.</p>\n<p>I have requested this feature already two years ago</p>\n<p><a href=\"https://lists.cam.ac.uk/mailman/htdig/cl-isabelle-users/2018-February/msg00043.html\">https://lists.cam.ac.uk/mailman/htdig/cl-isabelle-users/2018-February/msg00043.html</a></p>\n<p>but only got a solution proposal that worked on an unofficial branch of<br>\nIsabelle.</p>",
        "id": 294827828,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661245277
    },
    {
        "content": "<p>From: \"Eugene W. Stark\" &lt;<a href=\"mailto:isabelle-users@starkeffect.com\">isabelle-users@starkeffect.com</a>&gt;<br>\nI use \"try\" routinely and find it essential.  Here are a few notes:</p>\n<p>(1)  I find it much more convenient to type in \"try\" directly into the input while trying<br>\n    to sketch out a proof development than to use the separate Sledgehammer interface.<br>\n    (To me, the latter seems to be more useful for searching for perhaps better or faster<br>\n    proofs without disturbing the existing text.)</p>\n<p>I use \"try\" during proof development to try to see if a proof step can be quickly<br>\n    verified as true, without necessarily having to tediously decompose it and write<br>\n    out all the steps.  I am willing to wait a little bit for this, though it tends to<br>\n    come with some risk of overloading the prover (more on this below).  Many times,<br>\n    a proof by \"smt\" is produced, which I keep temporarily and then later improve,<br>\n    either again using \"try\" or sledgehammer to find a better proof (which is often<br>\n    possible later due to additional facts that I added while fleshing out the theory),<br>\n    or by explicitly expanding the proof to eliminate the use of \"smt\".</p>\n<p>(2)  \"try\" is extremely helpful for becoming familiar with the behavior of the various<br>\n    proof methods, and with theories one has not used before.  Of course, one must<br>\n    not expect it to do magic, even though sometimes it seems like it does.</p>\n<p>(3)  \"try\" will find proofs that \"try0\" misses, due to apparent time limits in \"try0\".<br>\n    For example, \"try0\" will typically not find find proofs by \"force\" or \"fastforce\"<br>\n    that take ten seconds or more, even if all the necessary facts have been given.<br>\n    The limits seem to be removed in \"try\", which allows the long proofs to be found.</p>\n<p>(4)  There appear to be some strange anomalies in \"try\" regarding the scheduling of the<br>\n    various proof methods it tries.  One would expect that \"try\" would run the various<br>\n    methods concurrently as much as possible.  However, in some situations, \"try\" can<br>\n    run indefinitely without finding a proof, whereas \"try0\" will immediately report<br>\n    a proof by \"force\" or \"fastforce\" that takes only a few tens of milliseconds.</p>\n<p>(5)  \"Heat\" while using \"try\" seems to be related less to CPU usage than it does to memory<br>\n    usage.  Using \"try\" can quickly blow up the prover heap and put the computer into<br>\n    thrashing conditions, unless suitable limits have been imposed when invoking Isabelle.<br>\n    The desktop that I generally use for proof development has 24GB of RAM and runs Ubuntu.<br>\n    I have typically limited the ML heap to 8GB and the Java heap to 4GB and this generally<br>\n    allows me to do other things like browse the web and read email along with running<br>\n    Isabelle, without entering a thrashing situation.  Lately I have found it necessary<br>\n    to increase the ML heap limit to 12GB to avoid excessive garbage collection,<br>\n    and this will produce thrashing sometimes, especially in conjunction with the ridiculous<br>\n    memory consumption of Firefox and Thunderbird.</p>\n<p>Note that \"try\" can be less than useless on a memory-poor system.  Although I was<br>\n    successfully using a 6GB laptop for some time, I always had to be careful about using \"try\"<br>\n    with it, which put a significant hitch into my normal development routine.<br>\n    About two years ago I found that I was no longer able to do anything useful on<br>\n    that platform.  At the moment, 16GB is still a useful configuration, but barely.</p>\n<p>(6)  I believe there to be issues in the infrastructure regarding the cancellation of a<br>\n    \"try\" that has already been started.  With a fair amount of frequency, if you delete<br>\n    a running \"try\" from the document, the search will not be cancelled immediately,<br>\n    but rather Poly will run for arbitrarily long amounts of time at high CPU,<br>\n    apparently until the originally scheduled tasks have completed.  In previous<br>\n    versions of Isabelle, I have observed an apparent blow-up in the scheduling of<br>\n    future tasks that can produce a backlog that can take many minutes to clear, though<br>\n    this seems to have improved in recent Isabelle versions.</p>\n<p>It is difficult and frustrating to try to understand what is going on during periods<br>\n    of overload, because the \"Isabelle monitor\" does not get any data from Poly during<br>\n    precisely the periods of time when you want to know what is happening.<br>\n    So all you see is happy, normal behavior, computing is going on, garbage collection<br>\n    is taking place regularly and not too frequently, and the number of queued tasks is<br>\n    stable, and then when an overload sets in the display stops for the duration.<br>\n    When the overload clears, you just get a straight line drawn from the conditions before<br>\n    to the conditions after, so you learn nothing.</p>\n<p>(7)  When the prover seems to have been spammed as a result of \"try\", I often have to make a<br>\n    guess about whether it will be faster to wait for the overload to clear, or to just<br>\n    restart Isabelle and re-check the context from the beginning.</p>\n<p>My conclusion:  I find \"try\" to be extremely useful, and would be very unhappy to see it go away.<br>\nHowever, I suspect that fixes to some of the issues I have described above would make it less<br>\ntouchy to use.</p>\n<p>- Gene Stark</p>",
        "id": 294827847,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661245283
    },
    {
        "content": "<p>From: \"John F. Hughes\" &lt;<a href=\"mailto:jfh@cs.brown.edu\">jfh@cs.brown.edu</a>&gt;<br>\nAs a relative novice, I use \"try\" a lot, especially for Eugene Stark's<br>\nreason-2: it teaches me what the various solvers are good at. I also happen<br>\nto like \"nitpick,\" not so much because it finds errors in my theorems, but<br>\nbecause it finds errors in the way I've <em>stated</em> my theorems; they way we<br>\nwrite things in Isabelle is rather a lot like the way we write things in<br>\nmathematics, but not completely, and Nitpick often warns me that I've<br>\ntumbled into another of the rough spots.</p>\n<p>Another note in praise of nitpick: in doing some work in synthetic affine<br>\nand projective geometry, I wanted to exhibit a four-point affine plane. To<br>\ndo so required writing out the incidence relation (which points are on<br>\nwhich lines), which was a case-by-case nightmare to write and read. But<br>\nwhen instead I asked \"try\" to prove the theorem that every affine plane<br>\ncontains at least 5 points, nitpick instantly generated the standard<br>\n4-point affine plane for me. That's kind of a backwards approach, but it<br>\nwas, as I say, very useful.</p>",
        "id": 294827871,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661245293
    },
    {
        "content": "<p>From: Lawrence Paulson &lt;<a href=\"mailto:lp15@cam.ac.uk\">lp15@cam.ac.uk</a>&gt;<br>\nThis is amazing and shows that we are nearly able to do experimental mathematics.</p>\n<p>In fact, I have used nitpick in some tricky combinatorial proofs to check corner cases. It was very effective.</p>\n<p>Larry Paulson</p>",
        "id": 294827896,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661245301
    },
    {
        "content": "<p>From: Manuel Eberl &lt;<a href=\"mailto:eberlm@in.tum.de\">eberlm@in.tum.de</a>&gt;<br>\nFor my Master's Thesis (compiling functional programs to density<br>\nfunctions) I effectively had to implement a fragment of typed Lambda<br>\ncalculus and prove all kinds of rules about typing and substitution [1].</p>\n<p>These rules are somewhat intricate, and I effectively proved them by<br>\ncoming up with a plausible-looking conjecture and then tweaking it until<br>\nQuickCheck stopped complaining.</p>\n<p>I don't think I've used Nitpick that much, perhaps because I have less<br>\nintuition about what kinds of things one can expect it to work on well.<br>\nWith QuickCheck, I have a very clear idea of what kinds of propositions<br>\nit can and cannot do.</p>\n<p>Speaking of \"experimental mathematics\" in general, I converted a big<br>\nunreadable SMT proof from the area of social choice theory (that was<br>\nfound by other people) into a structured proof by experimentation in<br>\nIsabelle a few years ago [2]: I had a big list of facts that somehow<br>\nimplied False together (and \"by smt\" could show it), but no intuitive<br>\nidea /why/ they implied False.</p>\n<p>I then picked two or three of these facts and used \"auto\" to find out<br>\nwhat they boil down to together, deleted them from the list, and added<br>\nthat consequence instead and checked whether the list was still<br>\nunsatisfiable.</p>\n<p>Rinse and repeat until the list is a singleton and you have a structured<br>\nproof!</p>\n<p>Manuel</p>\n<p>[1]:<br>\n<a href=\"https://www.isa-afp.org/browser_info/current/AFP/Density_Compiler/PDF_Target_Semantics.html\">https://www.isa-afp.org/browser_info/current/AFP/Density_Compiler/PDF_Target_Semantics.html</a>,<br>\nsee e.g. \"free_vars_cexpr_subst_aux\"<br>\n[2]: <a href=\"https://link.springer.com/chapter/10.1007%2F978-3-030-29007-8_14\">https://link.springer.com/chapter/10.1007%2F978-3-030-29007-8_14</a></p>",
        "id": 294827921,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661245314
    },
    {
        "content": "<p>From: marco caminati via Cl-isabelle-users &lt;<a href=\"mailto:cl-isabelle-users@lists.cam.ac.uk\">cl-isabelle-users@lists.cam.ac.uk</a>&gt;<br>\nAlso used Nitpick to compute and exhibit compositions of event structures, basically using it as a constraint solver.<br>\nNice and faster than using other approaches, though some times you need to fiddle a bit with parameters.<br>\nLet's see who else :)</p>\n<p>Il martedì 26 maggio 2020, 15:45:01 GMT+1, Lawrence Paulson &lt;<a href=\"mailto:lp15@cam.ac.uk\">lp15@cam.ac.uk</a>&gt; ha scritto:  </p>\n<p>This is amazing and shows that we are nearly able to do experimental mathematics.</p>\n<p>In fact, I have used nitpick in some tricky combinatorial proofs to check corner cases. It was very effective.</p>\n<p>Larry Paulson</p>",
        "id": 294827939,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661245320
    },
    {
        "content": "<p>From: Jasmin Blanchette via Cl-isabelle-users &lt;<a href=\"mailto:cl-isabelle-users@lists.cam.ac.uk\">cl-isabelle-users@lists.cam.ac.uk</a>&gt;<br>\nHi Peter,</p>\n<blockquote>\n<p>For better usability, it could be combined with a sledgehammer<br>\n(allgoals) option, to prevent the current</p>\n<p>subgoal sledgehammer sorry<br>\n subgoal sledgehammer sorry<br>\n ...<br>\n subgoal sledgehammer sorry</p>\n<p>boilerplate.</p>\n<p>I have requested this feature already two years ago</p>\n<p><a href=\"https://lists.cam.ac.uk/mailman/htdig/cl-isabelle-users/2018-February/msg00043.html\">https://lists.cam.ac.uk/mailman/htdig/cl-isabelle-users/2018-February/msg00043.html</a></p>\n</blockquote>\n<p>I'm surprised I didn't answer, but as you can guess the patch wasn't ready for being pushed for a variety of reasons. With some work, it could have, though, but like Makarius, I had other reforms in mind that I wanted to do first, before complicating the code base. And, surely, there is no need to pollute the namespace with names like \"sledgehammer_first\" and \"sledgehammer_all\". In fact, believe this facility could have been built modularly on top of the existing code, without modifying Isabelle's code. (In ML, one can invoke Sledgehammer on a specific subgoal etc.)</p>\n<blockquote>\n<p>but only got a solution proposal that worked on an unofficial branch of Isabelle.</p>\n</blockquote>\n<p>I think it's a good idea indeed and that we have enough CPU to do it: Although the default Sledgehammer timeout is 30 seconds, most of the action happens in the first few seconds, and once <em>some</em> satisfactory proof is found for one of the goals, the CPU time could be allocated on the other goals instead of trying to improve on that proof (unless all goals have been proved and more time is available, at which point the old behavior is desirable).</p>\n<p>Sledgehammer desperately needs an overhaul from the old model \"one goal * 4 (or so) provers * 30 seconds\". Doing it right involves going back to the drawing board and refactoring code, as opposed to just adding code. The Sledgehammer code base is already complicated enough from all kinds of additions (mostly by me) and cannot take more ad hoc extensions. Since we have introduced time slicing (in 2010 already), to get better performance we should mix and match the provers, e.g. maybe we should give 40 seconds to Vampire and only 20 seconds to SPASS, and so on. A refactoring that would achieve this could also achieve the multiple-goal objective (and it could be any set of goals, not just all or a single one).</p>\n<p>The good news is that Martin Desharnais, who contributed thousands of virtually bug-free code to the (co)datatype package in 2014 during an internship at the TUM, has shown himself willing to take over Sledgehammer maintenance and development, at least for the next few years. So both the reform and your idea have been duly noted, and if Martin is so inclined and granted access to the Isabelle repository again, it might materialize -- hopefully before you've taken the matter into your own hands and written your own \"sledgehammer_all\" along the lines of what I wrote above. ;)</p>\n<p>Jasmin</p>",
        "id": 294830140,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661246241
    }
]