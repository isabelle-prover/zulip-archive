[
    {
        "content": "<p>From: Jasmin Blanchette &lt;<a href=\"mailto:jasmin.blanchette@inria.fr\">jasmin.blanchette@inria.fr</a>&gt;<br>\nHi all,</p>\n<p>The \"datatype\" command and the \"smt\" proof method were reimplemented in Isabelle2014. For compatibility, the old constructs are provided by \"<del>/src/HOL/Library/Old_Datatype.thy\" and \"</del>/src/HOL/Library/Old_SMT.thy\", as \"old_datatype\" and \"old_smt\".</p>\n<ol>\n<li>\n<p>Do you depend on either of these constructs?</p>\n</li>\n<li>\n<p>If so, why?</p>\n</li>\n<li>\n<p>Would you be sorry if \"old_datatype\", \"old_smt\", or both were to be missing in the next release (presumably Isabelle2017)?</p>\n</li>\n</ol>\n<p>If the answer to question 3 is yes, please reply.</p>\n<p>Jasmin</p>",
        "id": 294701964,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661179450
    },
    {
        "content": "<p>From: \"Urban, Christian\" &lt;<a href=\"mailto:christian.urban@kcl.ac.uk\">christian.urban@kcl.ac.uk</a>&gt;<br>\nDear Jasmin,</p>\n<p>I am not sure what the latest states of Nominal1 (in the distribution) and Nominal2 (in the AFP) are? If I remember correctly, they depend internally</p>\n<p>on old_datatype (heavily). I am not sure how easy it would be to port</p>\n<p>them to (new)datatype. It would certainly be desirable.</p>\n<p>Best wishes,</p>\n<p>Christian</p>",
        "id": 294701976,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661179456
    },
    {
        "content": "<p>From: Jasmin Blanchette &lt;<a href=\"mailto:jasmin.blanchette@inria.fr\">jasmin.blanchette@inria.fr</a>&gt;<br>\nHi Christian,</p>\n<blockquote>\n<p>I am not sure what the latest states of Nominal1 (in the distribution) and Nominal2 (in the AFP) are?</p>\n</blockquote>\n<p>I ported Nominal1 to the new datatypes back in 2014, using the compatibility interfaces (which are almost one-to-one with the old interfaces). As for Nominal2, I had run into a limitation in my code back then and didn't investigate further, but I could easily give it a new try (a lot of bugs were fixed since then). In any case, it's on my radar. I'm more worried about users in the non-Isabelle, non-AFP world.</p>\n<p>Jasmin</p>",
        "id": 294702001,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661179464
    },
    {
        "content": "<p>From: Burkhart Wolff &lt;<a href=\"mailto:Burkhart.Wolff@lri.fr\">Burkhart.Wolff@lri.fr</a>&gt;<br>\nDear all,</p>\n<p>we use indeed in a rather critical way the \"~~/src/HOL/Library/Old_Datatype.thy”<br>\npackage - we need a uniform way to extract splitting rules for arbitrary data-types <br>\nand a kind of abstract syntax for data-types to compute cycles in (indirect) type<br>\ndependencies. Neither of this is really existing in the 2016 version of the new-datatype<br>\npackage, although I tried quite hard to reconstruct this information (implicitly<br>\ndepending on naming conventions for theorems and the like.)</p>\n<p>bu</p>",
        "id": 294704040,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661180122
    },
    {
        "content": "<p>From: Jasmin Blanchette &lt;<a href=\"mailto:jasmin.blanchette@inria.fr\">jasmin.blanchette@inria.fr</a>&gt;<br>\nDear Burkhart,</p>\n<p>Thanks for answering my email.</p>\n<p>You wrote:</p>\n<blockquote>\n<p>we use indeed in a rather critical way the \"~~/src/HOL/Library/Old_Datatype.thy”<br>\npackage</p>\n</blockquote>\n<p>The old datatype package consists of several layers of .ML and .thy files. My email concerns only the last layer -- mainly, the \"old_datatype\" command provided by \"Old_Datatype.thy\" or the corresponding \"Old_Datatype.add_datatype\" ML command.</p>\n<p>In particular, excluded from the scope of my email are all the ML functions provided by modules called \"Old_Datatype_Xxx\" (for some nonempty \"Xxx\", e.g. \"Aux\"). For these, reform should also come some day, but let's proceed one step at a time.</p>\n<blockquote>\n<ul>\n<li>we need a uniform way to extract splitting rules for arbitrary data-types</li>\n</ul>\n</blockquote>\n<p>The new package certainly offers an interface for doing so:</p>\n<p>ML {*<br>\n  Ctr_Sugar.ctr_sugar_of @{context} @{type_name list}<br>\n  |&gt; the<br>\n  |&gt; #split<br>\n*}</p>\n<p>And if you're porting old code, or are prone to nostalgia, you can use the compatibility interfaces:</p>\n<p>ML {*<br>\n  BNF_LFP_Compat.the_info @{theory} [] @{type_name list}<br>\n  |&gt; #split<br>\n*}</p>\n<blockquote>\n<p>and a kind of abstract syntax for data-types to compute cycles in (indirect) type<br>\ndependencies.</p>\n</blockquote>\n<p>This is too abstract for me to understand what you want. Which old interface do you rely on exactly?</p>\n<blockquote>\n<p>Neither of this is really existing in the 2016 version of the new-datatype package,</p>\n</blockquote>\n<p>I can't judge for the \"kind of abstract syntax\", but for splitting rules they have been around since 2014.</p>\n<p>The compatibility interfaces were designed to be comprehensive and allowed us to port Isabelle's own tools and the AFP, and they themselves only use public APIs such as \"Ctr_Sugar.ctr_sugar_of\" and \"BNF_FP_Def_Sugar.fp_sugar_of\". Almost everything we know about a datatype is recorded somewhere in there.</p>\n<blockquote>\n<p>although I tried quite hard to reconstruct this information (implicitly<br>\ndepending on naming conventions for theorems and the like.)</p>\n</blockquote>\n<p>Could you tell us concretely what information about, say, \"list\", you cannot access using the public APIs? This would interest me a lot.</p>\n<p>Isabelle's interfaces are not perfect, but we've worked hard to make the new (co)datatype interfaces complete, and we use them ourselves for many tools, so I'm really puzzled by your comments.</p>\n<p>Cheers,</p>\n<p>Jasmin</p>",
        "id": 294704524,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661180253
    }
]