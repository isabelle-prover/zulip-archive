[
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nConcerning the old-style addXX declarations there is a subtle point here, <br>\nthat I've only realized rather late in 1998/99 when introducing the <br>\nattribute-based concept.</p>\n<p>When you write in Isar</p>\n<p>(fast intro: thm1 thm2)</p>\n<p>the order of declarations is from left to right, so the later one takes <br>\nprecedence: thm2 before thm1.</p>\n<p>When you write in ML</p>\n<p>fast_tac (cs addSIs [thm1, thm2])</p>\n<p>the declaration order is inside out (using fold_rev internally), so you <br>\nget thm1 before thm2.</p>\n<p>This provided some potential for actual confusion 10 years ago, but now <br>\nthe old addXX declarations are so rare in practice that it is much less <br>\nsignificant.</p>\n<p>Makarius</p>",
        "id": 294137472,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660844819
    },
    {
        "content": "<p>From: Peter Lammich &lt;<a href=\"mailto:peter.lammich@uni-muenster.de\">peter.lammich@uni-muenster.de</a>&gt;<br>\nHi all,</p>\n<p>I have a list of lemmas:<br>\n  lemmas test = l1 l2 ... ln</p>\n<p>some of the lemmas are specializations of the other lemmas, i.e. l2 = <br>\nl1[where f=id, simplified], such that<br>\nl1 matches everywhere where l2 matches, but, of course, I want to use l2 <br>\nwhere ever possible.</p>\n<p>now I do:<br>\n  apply (auto intro!: test)</p>\n<p>the result of the proof seems to depend on the order of the lemmas in <br>\nthe list.<br>\nTo me, it seems that intro! applies the <em>last</em> matching lemma from test.</p>\n<p>Is this the documented (reliable on) behavior, or is this behavior just <br>\nby accident?<br>\nHow is the behavior with (auto intro: test), which lemma is tried first?</p>\n<p>Best,<br>\n  Peter</p>",
        "id": 294139008,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660845218
    },
    {
        "content": "<p>From: Lawrence Paulson &lt;<a href=\"mailto:lp15@cam.ac.uk\">lp15@cam.ac.uk</a>&gt;<br>\nIt has been a very long time since I worked on this, but I believe that indeed the order is taken under strict account. Back in the days of ML, something like </p>\n<p>blah_cs addSIs [lemma1]</p>\n<p>was guaranteed to give priority to lemma1 over the other theorems in blah_cs. The code that keeps track of the order in which theorems are delivered is still there.</p>\n<p>However, even more important than the order of the theorems is the number of premises; those with the fewest premises get priority.</p>\n<p>Larry Paulson</p>",
        "id": 294139096,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660845239
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nOn Thu, 9 Jun 2011, Peter Lammich wrote:</p>\n<blockquote>\n<p>apply (auto intro!: test)</p>\n<p>the result of the proof seems to depend on the order of the lemmas in <br>\nthe list. To me, it seems that intro! applies the <em>last</em> matching lemma <br>\nfrom test.</p>\n<p>Is this the documented (reliable on) behavior, or is this behavior just <br>\nby accident?</p>\n</blockquote>\n<p>In general, declarations are passed through the many layers of the system <br>\nwith some care, to preserve the order given by the user in the text.  It <br>\nis up to the specific tools what to make out of that.  The classical <br>\nreasoner has always been quite keen on maintaining a standard order, which <br>\nmeans that later rules have precedence.</p>\n<p>And yes, this is documented behaviour.  Quite a few of non-trivial <br>\napplications depend on it. Just last week I have reworked the traditional <br>\ndocumentation from the old ref manual, and moved the material to the <br>\ncurrent isar-ref manual.</p>\n<blockquote>\n<p>How is the behavior with (auto intro: test), which lemma is tried first?</p>\n</blockquote>\n<p>In the ordering safe/unsafe rules should be exactly the same, but there <br>\ncan be a difference how they get applied (also wrt. backtracking).  This <br>\ntouches very delicate parts of the Classical reasoner and its combination <br>\nwith the Simplifier in auto.</p>\n<p>Makarius</p>",
        "id": 294139118,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660845242
    }
]