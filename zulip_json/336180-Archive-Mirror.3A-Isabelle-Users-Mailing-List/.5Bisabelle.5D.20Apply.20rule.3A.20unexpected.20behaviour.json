[
    {
        "content": "<p>From: Diego Machado Dias &lt;<a href=\"mailto:diegodias.m@gmail.com\">diegodias.m@gmail.com</a>&gt;<br>\nI am working with a theory where the application of certain rule fails when<br>\nplaced in the middle of a larger proof, but if I declare a new theorem<br>\ncontaining exactly the problematic sub goal (where the application fails),<br>\nthen Isabelle allows me to apply the rule I want in the proof of the new<br>\ntheorem.</p>\n<p>Originally, I suspected this was caused by some type mismatch, and I<br>\nenabled types in the output to investigate if the types match. They do. I<br>\ndidn't find anything that makes the goal in the larger proof different from<br>\nits copied and pasted version used to create a new theorem.</p>\n<p>Is there any way of extracting more information from Isabelle about the<br>\nreason that causes the application of a rule to fail?</p>\n<p>Thanks,</p>\n<p>Diego</p>",
        "id": 294670015,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661173119
    },
    {
        "content": "<p>From: Lars Hupel &lt;<a href=\"mailto:hupel@in.tum.de\">hupel@in.tum.de</a>&gt;<br>\nHi Diego,</p>\n<blockquote>\n<p>Is there any way of extracting more information from Isabelle about the<br>\nreason that causes the application of a rule to fail?</p>\n</blockquote>\n<p>try this:</p>\n<p>using [[unify_trace_failure]]<br>\n  apply (rule ...)</p>\n<p>Then, you'll find the output like the following:</p>\n<p>Clash: Scratch.P =/= Scratch.Q</p>\n<p>Hope that helps.</p>\n<p>Cheers<br>\nLars</p>",
        "id": 294670038,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661173128
    },
    {
        "content": "<p>From: Diego Machado Dias &lt;<a href=\"mailto:diegodias.m@gmail.com\">diegodias.m@gmail.com</a>&gt;<br>\nHi Lars,</p>\n<p>The clash information I get is this: \"Lattices.sup_class.sup =/=<br>\nSet.insert\".</p>\n<p>It understood that it has to do with the usage of sets, but I will need to<br>\nfind out<br>\nhow this message can help me. Does this clash message ring a bell for you?</p>\n<p>Thanks for you help!<br>\nDiego</p>",
        "id": 294670058,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661173136
    },
    {
        "content": "<p>From: Peter Lammich &lt;<a href=\"mailto:lammich@in.tum.de\">lammich@in.tum.de</a>&gt;<br>\nHi Diego,</p>\n<p>it's quite obvious what happened here:</p>\n<p>look at the theorem:<br>\nthm Law_Frame_Monotonic_Refinement<br>\n  ?c ⊑[?r] ?d ⟹ ?Y❙:?c ⊑[?r] ?Y❙:?d</p>\n<p>it requires exactly (syntactically) the same ?Y on both sides. However,<br>\ncontrary to your comment in the theory file, the actual subgoal looks<br>\nlike:<br>\n({''oc''} ∪ {''ot''})❙:(❙r❙e❙l❙y ?rx3 ∙ ❙[true,true❙] [idrel]) ⊑[true]<br>\n    {''oc'', ''ot''}❙:(❙r❙e❙l❙y true ∙ ❙[true,true❙] [idrel])</p>\n<p>Note the subtle difference between {''oc''} ∪ {''ot''} <br>\nand {''oc'', ''ot''}.</p>\n<p>The simp-call rewrites the {_}\\&lt;union&gt;{_} to {_,_}, <br>\nand then the rule works.</p>\n<p>Hope this helps,<br>\n  Peter</p>\n<p>p.s.: Isabelle sees {a,b} as \"insert a (insert b {})\", while it <br>\nsees {a} \\union {b} as \"sup (insert a {}) (insert b {})\". These are<br>\nsemantically equal, but cannot be unified syntactically.</p>",
        "id": 294670066,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661173138
    }
]