[
    {
        "content": "<p>From: Vaidas Gasiunas &lt;<a href=\"mailto:gasiunas@informatik.tu-darmstadt.de\">gasiunas@informatik.tu-darmstadt.de</a>&gt;<br>\nHello,</p>\n<p>I work with inductively defined relations and often have a case when I <br>\nneed get conditions for some specific case of the relation. This can be <br>\ndone with elimination rule, which is automatically generated for the <br>\nrelation. Usually I apply the rule in such pattern:</p>\n<p>from ... obtain ... where ... by (auto elim: myrel.elims)</p>\n<p>However, in some cases this pattern does not work; then I apply another <br>\npattern, which succeeds more often:</p>\n<p>from ... obtain ... where ... apply - apply(erule myrel.elims) <br>\napply(auto) done</p>\n<p>It seems that the second pattern should be equivalent to \"by (-, erule <br>\nmyrule, auto)\", but the latter does not work. Is there any way to <br>\nexpress the second pattern compactly in a \"by\" clause?</p>\n<p>Greetings,<br>\nVaidas<br>\n<a href=\"/user_uploads/14278/O7AMwBeaJ0LI99vhcCTo6TRO/smime.p7s\">smime.p7s</a></p>",
        "id": 294041981,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660815711
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nOn Thu, 21 Sep 2006, Vaidas Gasiunas wrote:</p>\n<blockquote>\n<p>I work with inductively defined relations and often have a case when I <br>\nneed get conditions for some specific case of the relation. This can be <br>\ndone with elimination rule, which is automatically generated for the <br>\nrelation. Usually I apply the rule in such pattern:</p>\n<p>from ... obtain ... where ... by (auto elim: myrel.elims)</p>\n</blockquote>\n<p>That's adequate.  Also note the canonical pattern <code>by (cases set: myrel) \nauto'' or just </code>by cases auto''.  This assumes that the frist 'from' fact <br>\nis the relation you intend to eliminate.</p>\n<p>Recall that 'by' abbreviates 'proof ... qed ...', with both an initial <br>\nmethod and an optional terminal one.  Facts are passed to the initial <br>\nmethod expression, but are reset afterwards ('apply' also resets facts).  <br>\nThis means that the 'cases' above will eliminate the primary myrel <br>\njudgment and insert all the remaining facts; then auto operates on the <br>\nremaining goal state alone.</p>\n<blockquote>\n<p>However, in some cases this pattern does not work; then I apply another <br>\npattern, which succeeds more often:</p>\n<p>from ... obtain ... where ... apply - apply(erule myrel.elims) <br>\napply(auto) done</p>\n<p>It seems that the second pattern should be equivalent to \"by (-, erule <br>\nmyrule, auto)\", but the latter does not work.</p>\n</blockquote>\n<p>The following transformation is valid in general (modulo backtracking):</p>\n<p>by meth1 meth2</p>\n<p>==</p>\n<p>apply meth1<br>\n  apply meth2<br>\n  apply (assumption+)?<br>\n  done</p>\n<p>So <code>by - (erule myrule, auto)'' would do the job,\nbut </code>by (rule myrule) auto'' is slightly more appropriate.</p>\n<p>Makarius</p>",
        "id": 294041990,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660815717
    }
]