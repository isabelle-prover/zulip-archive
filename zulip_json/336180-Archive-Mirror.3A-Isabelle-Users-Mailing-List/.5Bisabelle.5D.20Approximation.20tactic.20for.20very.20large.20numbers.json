[
    {
        "content": "<p>From: Manuel Eberl &lt;<a href=\"mailto:eberlm@in.tum.de\">eberlm@in.tum.de</a>&gt;<br>\nI forgot to attach the error message. Here it is:</p>\n<p>Unofficial version of Isabelle/HOL (unidentified repository version)<br>\nRun out of store - interrupting threads</p>\n<p>Run out of store - interrupting threads</p>\n<p>Failed to recover - exiting</p>\n<p>FATAL: exception not rethrown</p>\n<p>standard_error terminated<br>\nstandard_output terminated<br>\nCannot read message:<br>\nConnection reset<br>\nmessage_output terminated<br>\nprocess terminated<br>\ncommand_input terminated<br>\nprocess_manager terminated<br>\nReturn code: 134</p>",
        "id": 294728245,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661187118
    },
    {
        "content": "<p>From: Fabian Immler &lt;<a href=\"mailto:immler@in.tum.de\">immler@in.tum.de</a>&gt;<br>\nHi Manuel,</p>\n<p>Your concrete example should not be out of reach of the approximation tactic.<br>\nOn my Mac, I can do e.g., </p>\n<p>lemma \"exp (exp 16000 :: real) &gt; 0\"<br>\n  by (approximation 80)</p>\n<p>which proves the goal in about 10s (both in 32 and 64 bit mode).<br>\nTherefore I am not sure if it is really the large exponents that pose the problem here.</p>\n<p>As a side note on the tactic in general, if you care about performance: In my experience,<br>\nyou get good results (here about 5s) by setting the precision to about half the precision of the native integer type (i.e., 15 for x86 and 30 for x86_64).</p>\n<p>Fabian<br>\n<a href=\"/user_uploads/14278/6VuFgeC1c06_hEV5aCo2HFBm/smime.p7s\">smime.p7s</a></p>",
        "id": 294728553,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661187217
    },
    {
        "content": "<p>From: Manuel Eberl &lt;<a href=\"mailto:eberlm@in.tum.de\">eberlm@in.tum.de</a>&gt;<br>\nAh sorry, I misread. Try it again with 160000. ;)</p>\n<p>My current workaround is to first do the computation in ML using<br>\nhardware floating-point numbers. If the result is finite (i.e. not NaN<br>\nor Infinity) and the proposition holds for the resulting numbers, I call<br>\napproximation.</p>\n<p>It's not pretty and certainly not \"complete\", but it handles all of my<br>\nuse cases pretty well so far.</p>\n<p>The only proper solution I can think of would be to add some kind of<br>\nprecision for the exponent as well, and if an exponent exceeds that<br>\nnumber, the computation is aborted with an error.</p>\n<blockquote>\n<p>As a side note on the tactic in general, if you care about performance: In my experience,<br>\nyou get good results (here about 5s) by setting the precision to about half the precision of the native integer type (i.e., 15 for x86 and 30 for x86_64).</p>\n</blockquote>\n<p>That's not an issue here since I chose 10 anyway. That's usually enough<br>\nfor my needs.</p>\n<p>Manuel</p>",
        "id": 294728565,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661187223
    },
    {
        "content": "<p>From: Fabian Immler &lt;<a href=\"mailto:immler@in.tum.de\">immler@in.tum.de</a>&gt;</p>\n<blockquote>\n<p>Am 05.03.2018 um 12:33 schrieb Manuel Eberl &lt;<a href=\"mailto:eberlm@in.tum.de\">eberlm@in.tum.de</a>&gt;:</p>\n<p>Ah sorry, I misread. Try it again with 160000. ;)</p>\n<p>My current workaround is to first do the computation in ML using<br>\nhardware floating-point numbers. If the result is finite (i.e. not NaN<br>\nor Infinity) and the proposition holds for the resulting numbers, I call<br>\napproximation.</p>\n<p>It's not pretty and certainly not \"complete\", but it handles all of my<br>\nuse cases pretty well so far.<br>\nWe actually do something similar in quickcheck[approximation] (~~/src/HOL/Decision_Procs/approximation_generator.ML):<br>\nTrying to find counterexamples with IEEE floating point arithmetic and certifying them by approximation.</p>\n</blockquote>\n<blockquote>\n<p>The only proper solution I can think of would be to add some kind of<br>\nprecision for the exponent as well, and if an exponent exceeds that<br>\nnumber, the computation is aborted with an error.<br>\nYes, this would be a solution. One could also think of computing the bounds with IEEE floating point numbers.</p>\n</blockquote>\n<blockquote>\n<blockquote>\n<p>As a side note on the tactic in general, if you care about performance: In my experience,<br>\nyou get good results (here about 5s) by setting the precision to about half the precision of the native integer type (i.e., 15 for x86 and 30 for x86_64).</p>\n</blockquote>\n<p>That's not an issue here since I chose 10 anyway. That's usually enough<br>\nfor my needs.</p>\n<p>Manuel</p>\n<p><a href=\"/user_uploads/14278/KP7hQB9nqYmr_O1mj-oDzERs/smime.p7s\">smime.p7s</a></p>\n</blockquote>",
        "id": 294728764,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661187285
    },
    {
        "content": "<p>From: Manuel Eberl &lt;<a href=\"mailto:eberlm@in.tum.de\">eberlm@in.tum.de</a>&gt;<br>\nHallo,</p>\n<p>I noticed that the approximation tactic behaves very poorly when the<br>\ninput is very large. For instance, attempting to prove \"exp (exp 16000<br>\n:: real) &gt; 0\" with it results in the tactic running for about a minute<br>\nor two before. The entire Isabelle system becomes unresponsive and<br>\neventually stops with one of Isabelle/jEdit's \"total existence failure\"<br>\nmessages.</p>\n<p>Now, obviously, I am not expecting the tactic to be able to prove this â€“<br>\nit uses software floating-point numbers and the exponents here are<br>\nstaggeringly large. However, I am wondering if it is possible to make<br>\nthe tactic fail gracefully, or at least not take down the entire system.<br>\nOtherwise it is highly problematic to use this tactic as a solver in the<br>\nbackground, which I intend to do.</p>\n<p>Manuel</p>",
        "id": 294730077,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661187701
    }
]