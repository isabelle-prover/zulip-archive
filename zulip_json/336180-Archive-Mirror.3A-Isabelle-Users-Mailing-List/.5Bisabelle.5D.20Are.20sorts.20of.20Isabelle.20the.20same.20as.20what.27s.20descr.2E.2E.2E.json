[
    {
        "content": "<p>From: \"Yannick DuchÃªne (Hibou57 )\" &lt;<a href=\"mailto:yannick_duchene@yahoo.fr\">yannick_duchene@yahoo.fr</a>&gt;<br>\nHi people, and Merry Christmas to all of you for whom that matters,</p>\n<p>I know I should know, but I don't know, so the question: Isabelle  <br>\ndocumentation often refers to sorts, something I've never bothered about  <br>\nso far. Is this the same as what Wikipedia describes as being sorts in the  <br>\ncontext of second order logic?</p>\n<p><a href=\"http://en.wikipedia.org/wiki/Second-order_logic\">http://en.wikipedia.org/wiki/Second-order_logic</a></p>\n<p>Quote:</p>\n<p>Is that the relevant definition of sorts? And the second point in the  <br>\nlist, is that what Isabelle names arities?</p>",
        "id": 294261016,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660914376
    },
    {
        "content": "<p>From: Lawrence Paulson &lt;<a href=\"mailto:lp15@cam.ac.uk\">lp15@cam.ac.uk</a>&gt;<br>\nChristmas greetings to you too!</p>\n<p>Sorts regulate polymorphism, which is necessary in the case of Isabelle, since unconstrained polymorphism would break the logical framework. More details here:</p>\n<p><a href=\"http://www21.in.tum.de/~nipkow/pubs/jfp95.html\">http://www21.in.tum.de/~nipkow/pubs/jfp95.html</a></p>\n<p>Larry Paulson</p>",
        "id": 294261029,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660914385
    },
    {
        "content": "<p>From: Christian Sternagel &lt;<a href=\"mailto:c.sternagel@gmail.com\">c.sternagel@gmail.com</a>&gt;<br>\nMarry Christmas,</p>\n<p>the short answer to your question is: no, what the Wikipedia article <br>\ndescribes is not called \"sorts\" (but \"types\") in Isabelle/HOL.</p>\n<p>As Larry already said, sorts control polymorphism. More specifically <br>\nsorts are linked to Isabelle's axiomatic type classes. (See also the <br>\nfine tutorial on type classes that is part of Isabelle's documentation.)</p>\n<p>E.g., you might want to prove something for all \"entities\" that support <br>\nsome operator, say \"plus\", that satisfies associativity. This you might <br>\nencapsulate into a type class</p>\n<p>class plus_assoc =<br>\n     fixes plus :: \"'a =&gt; 'a =&gt; 'a\"<br>\n     assumes assoc: \"plus x (plus y z) = plus (plus x y) z\"</p>\n<p>Now by saying that something \"is of sort plus_assoc\" we mean that it \"is <br>\nan instance of the class plus_assoc\", which in turn means that it \"has <br>\nan operator plus that is associative\". For example, we could prove that <br>\nnatural numbers are an instance of class plus_assoc:</p>\n<p>instantiation nat :: plus_assoc<br>\n   begin</p>\n<p>definition \"plus_nat (x::nat) y = x + y\"</p>\n<p>instance by (intro_classes) (simp add: plus_nat_def)</p>\n<p>end</p>\n<p>Now we can use \"plus\" on natural numbers</p>\n<p>term \"plus 0 (Suc 0)\"</p>\n<p>hope this helps</p>\n<p>chris</p>",
        "id": 294261056,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660914395
    },
    {
        "content": "<p>From: Yannick &lt;<a href=\"mailto:yannick_duchene@yahoo.fr\">yannick_duchene@yahoo.fr</a>&gt;<br>\nIndeed, a short answer is on page 2:</p>",
        "id": 294261072,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660914403
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nIn logic literature there is a general shortage of words for things that <br>\nqualify other things.  So \"type\", \"class\", \"sort\", \"kind\", \"mode\" etc. <br>\noccur with varying meaning, depending on the context and the author.</p>\n<p>In Isabelle/Pure, a sort is just a syntactic representation for the <br>\nintersection of finitely many type classes, and the empty intersection {} <br>\nis the \"top\" or \"full\" sort (not the empty sort).</p>\n<p>Makarius</p>",
        "id": 294261436,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660914532
    }
]