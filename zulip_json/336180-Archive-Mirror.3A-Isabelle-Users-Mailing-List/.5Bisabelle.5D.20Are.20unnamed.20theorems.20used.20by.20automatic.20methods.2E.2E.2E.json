[
    {
        "content": "<p>From: Gottfried Barrow &lt;<a href=\"mailto:gottfried.barrow@gmx.com\">gottfried.barrow@gmx.com</a>&gt;<br>\nSuppose I have an unnamed theorem:</p>\n<p>theorem \"&lt;some formula that's true&gt;\" by(auto)</p>\n<p>Are automatic proof methods, or is Sledgehammer going to try and use <br>\nthat theorem to prove anything?</p>\n<p>Thanks,<br>\nGB</p>",
        "id": 294220838,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660897400
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nWhen it is really unnamed and has not other attributes to declare it to <br>\nthe context, the system will not store the theorem anywhere.  So other <br>\ntools like sledgehammer should not be able to find it.</p>\n<p>Makarius</p>",
        "id": 294220856,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660897412
    },
    {
        "content": "<p>From: Gottfried Barrow &lt;<a href=\"mailto:gottfried.barrow@gmx.com\">gottfried.barrow@gmx.com</a>&gt;<br>\nMakarius,</p>\n<p>Thanks. I'm restating definitions and axioms as lemmas to check my <br>\ntyping. I also might want to prove a theorem 10 additional ways. For <br>\nperformance, I don't want any of that to be used by Sledgehammer, or a <br>\nproof method like \"by(auto)\".</p>\n<p>I restate a definition with <code>lemma \"&lt;some formula&gt;\" sorry</code>. I choose <br>\n\"sorry\" over \"oops\" simply as a matter of style.</p>\n<p>I try to find a code style that looks good without hiding or converting <br>\nthings in LaTeX.</p>\n<p>If it's a 5 minute job, and you have 5 minutes to spare, can you give me <br>\nsome ML in a \"ML{<em>...</em>}\" that creates an outer-syntax-command synonym <br>\nfor \"theorem\"? It would be nice to have a two character synonym for <br>\n\"theorem\".</p>\n<p>If you're taking Isar feature requests, it would be nice to be able to, <br>\nin general, define outer-syntax-command synonyms.</p>\n<p>I found these lines of code:</p>\n<p>FILE: more_thm.ML<br>\n      signature THM =<br>\n      ...<br>\n      val corollaryK: string</p>\n<p>FILE: isar_syn.ML<br>\n      val _ = gen_theorem false Thm.corollaryK;<br>\n      val _ = gen_theorem true Thm.corollaryK;</p>\n<p>FILE: thm_deps.ML<br>\n      member (op =) [Thm.theoremK, Thm.lemmaK, Thm.corollaryK] <br>\n(Thm.legacy_get_kind th) andalso</p>\n<p>I don't know enough ML to know how to use that information.</p>\n<p>Regards,<br>\nGB</p>",
        "id": 294220946,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660897449
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nOn Sat, 25 Aug 2012, Gottfried Barrow wrote:</p>\n<blockquote>\n<p>I'm restating definitions and axioms as lemmas to check my typing.</p>\n</blockquote>\n<p>For plain propositions you can also use the 'prop' command.</p>\n<blockquote>\n<p>I also might want to prove a theorem 10 additional ways. For <br>\nperformance, I don't want any of that to be used by Sledgehammer, or a <br>\nproof method like \"by(auto)\".</p>\n</blockquote>\n<p>Proof methods lile auto, blast, fast, simp etc. only use what you declare <br>\nexplicitly as simp, intro, elim, dest, iff etc.  Appendix A.4 of the <br>\nisar-ref manual has a small table on that.</p>\n<p>Sledgehammer is a bit different in going through the whole environment of <br>\nnamed facts, but I reckon it won't find anything that does not have a <br>\nname.</p>\n<blockquote>\n<p>If it's a 5 minute job, and you have 5 minutes to spare, can you give me <br>\nsome ML in a \"ML{<em>...</em>}\" that creates an outer-syntax-command synonym <br>\nfor \"theorem\"? It would be nice to have a two character synonym for <br>\n\"theorem\".</p>\n<p>If you're taking Isar feature requests, it would be nice to be able to, <br>\nin general, define outer-syntax-command synonyms.</p>\n</blockquote>\n<p>I don't think it would be a good idea to introduce aliases for existing <br>\ncommands, especially very short ones.  If you want to be fast in typing it <br>\nis better to figure out some jEdit plugins that do the job.  The Sidekick <br>\ncompletion is already there; it has some plugin options to make it more <br>\naggressive.  Other plugins like superabbrevs or yet unknown ones might do <br>\neven more for you.</p>\n<p>Line noise that is hacked into the computer is better not stored in the <br>\ntext you produce, unless you never want anyone to read it, maintain it, <br>\nwork with it elsewise.</p>\n<p>Some people have come up with proof languages based on single letter <br>\ncommands, or even non-letter commands in the spirit of APL.  I am fond of <br>\ntyping fast, but not of reading what looks like mouse droppings on the <br>\nscreen.</p>\n<p>Makarius</p>",
        "id": 294221064,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660897523
    },
    {
        "content": "<p>From: Gottfried Barrow &lt;<a href=\"mailto:gottfried.barrow@gmx.com\">gottfried.barrow@gmx.com</a>&gt;<br>\nOn 8/27/2012 4:21 PM, Makarius wrote:</p>\n<blockquote>\n<p>I don't think it would be a good idea to introduce aliases for <br>\nexisting commands, especially very short ones.  If you want to be fast <br>\nin typing it is better to figure out some jEdit plugins that do the <br>\njob.  The Sidekick completion is already there; it has some plugin <br>\noptions to make it more aggressive.  Other plugins like superabbrevs <br>\nor yet unknown ones might do even more for you.</p>\n</blockquote>\n<p>It was only about style. Some keywords I like or don't mind, but \"oops\" <br>\nand \"sorry\" don't quite fit in. It's not a problem because I don't think <br>\nI'll be postponing or abandoning proofs much in the documents I give <br>\npeople, and I can strip some things out.</p>\n<p>I was going to make a feeble appeal for freedom of keyword syntax, <br>\nsimilar to how we have freedom of notation with Isar, but I decided it's <br>\nthe standardized keywords that give the language a common feel from <br>\ndocument to document. If you were to let people redefine keywords, there <br>\nwould be major fragmentation of the language, which would make the <br>\nlanguage harder to learn, and you would get blamed for it.</p>\n<blockquote>\n<p>Line noise that is hacked into the computer is better not stored in <br>\nthe text you produce, unless you never want anyone to read it, <br>\nmaintain it, work with it elsewise.</p>\n<p>Some people have come up with proof languages based on single letter <br>\ncommands, or even non-letter commands in the spirit of APL.  I am fond <br>\nof typing fast, but not of reading what looks like mouse droppings on <br>\nthe screen.</p>\n</blockquote>\n<p>Readability is huge with me, but it takes a lot of experimenting to find <br>\nthe balance between using brevity for clarity, and using verboseness for <br>\nclarity.</p>\n<p>Regards,<br>\nGB</p>",
        "id": 294221101,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660897541
    }
]