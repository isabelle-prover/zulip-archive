[
    {
        "content": "<p>From: Rafal Kolanski &lt;<a href=\"mailto:rafalk@cse.unsw.edu.au\">rafalk@cse.unsw.edu.au</a>&gt;<br>\nBrian,</p>\n<p>Thank you very much for the detailed explanations. All fixed now. I <br>\nguess I got too caught up in the simple joy of being able to finally <br>\nstate the type class at all :)</p>\n<p>I don't know if anyone's interested in this, but I'm attaching the fixed <br>\nversion of \"words for ARM (8,16,32)\" in the interest of completeness <br>\n(after having checked that \"8 word\", \"16 word\" and \"32 word\" are indeed <br>\ninstances).</p>\n<p>Sincerely,</p>\n<p>Rafal Kolanski.</p>\n<p>Brian Huffman wrote:<br>\n<a href=\"/user_uploads/14278/ffPJiZeNYkK5kGSepIGhC1g7/WordsARM.thy\">WordsARM.thy</a></p>",
        "id": 294068995,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660826519
    },
    {
        "content": "<p>From: Brian Huffman &lt;<a href=\"mailto:brianh@cs.pdx.edu\">brianh@cs.pdx.edu</a>&gt;<br>\nRafal,</p>\n<p>Your WordsARM.thy file is still missing two important instance declarations:</p>\n<p>instance num1 :: word_len_1_2 (* necessary for 16 :: word_len_8_16_32 *)<br>\n   by (intro_classes, simp)</p>\n<p>instance num1 :: word_len_1_2_4 (* necessary for 8 :: word_len_8_16_32 *)<br>\n   by (intro_classes, simp)</p>\n<p>To see why these are necessary, you can trace what the type checker  <br>\ndoes when trying to prove, for example, that 16 :: word_len_8_16_32:</p>\n<p>num1 bit0 bit0 bit0 bit0 :: word_len_8_16_32<br>\nnum1 bit0 bit0 bit0 :: word_len_4_8_16<br>\nnum1 bit0 bit0 :: word_len_2_4_8<br>\nnum1 bit0 :: word_len_1_2_4<br>\nnum1 :: word_len_1_2</p>\n<p>Similarly, 8 :: word_len_8_16_32 reduces to num1 :: word_len_1_2_4.</p>\n<p>Alternatively, you could prove the subclass relations word_len_1 &lt;  <br>\nword_len_1_2 &lt; word_len_1_2_4, and the system would infer the missing  <br>\nclass instances for num1 automatically.</p>\n<ul>\n<li>Brian</li>\n</ul>\n<p>Quoting Rafal Kolanski &lt;<a href=\"mailto:rafalk@cse.unsw.edu.au\">rafalk@cse.unsw.edu.au</a>&gt;:</p>",
        "id": 294070071,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660826850
    },
    {
        "content": "<p>From: Florian Haftmann &lt;<a href=\"mailto:florian.haftmann@informatik.tu-muenchen.de\">florian.haftmann@informatik.tu-muenchen.de</a>&gt;<br>\nUsing instantiation is indeed not necessary for classes without class<br>\nparameters.</p>\n<p>Florian<br>\n<a href=\"/user_uploads/14278/oseppOessc8VgKzj5WLuKx8P/signature.asc\">signature.asc</a></p>",
        "id": 294070292,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660826917
    },
    {
        "content": "<p>From: Rafal Kolanski &lt;<a href=\"mailto:rafalk@cse.unsw.edu.au\">rafalk@cse.unsw.edu.au</a>&gt;<br>\nBrian,</p>\n<p>Thank you very, very much. I've been bashing my head against this for a <br>\nwhile. As of now, thanks to you, I have a non-hacky class of words which <br>\nare actually storable in C on a 32-bit architecture.</p>\n<p>Regarding Florian's comment on using new-style classes, I'm attaching <br>\nwhat I have (the word_len_8_16_32 class is the one I wanted). It doesn't <br>\nuse axclasses, but does use instance instead of instantiation as the <br>\nproofs are relatively simple.</p>\n<p>Sincerely,</p>\n<p>Rafal Kolanski.</p>\n<p>Brian Huffman wrote:</p>\n<blockquote>\n<p>[An ingenious idea]<br>\n<a href=\"/user_uploads/14278/kb2vwMOq7J_2PxNH0bcK1ojq/WordsARM.thy\">WordsARM.thy</a></p>\n</blockquote>",
        "id": 294070341,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660826936
    }
]