[
    {
        "content": "<p>From: Manuel Eberl &lt;<a href=\"mailto:eberlm@in.tum.de\">eberlm@in.tum.de</a>&gt;<br>\nHallo,</p>\n<p>I need a tactic that turns something like P a b c ==&gt; Q a b c into ALL a b c. P a b c --&gt; Q a b c.</p>\n<p>How do I do this?</p>\n<p>Manuel</p>",
        "id": 294307885,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660924901
    },
    {
        "content": "<p>From: René Thiemann &lt;<a href=\"mailto:rene.thiemann@uibk.ac.at\">rene.thiemann@uibk.ac.at</a>&gt;<br>\nDear Manuel,</p>\n<p>I don't know whether this is exactly what you want, but perhaps the following snippet is of help:</p>\n<p>consts P :: \"'a ⇒ 'b ⇒ 'c ⇒ bool\"<br>\nconsts Q :: \"'a ⇒ 'b ⇒ 'c ⇒ bool\"</p>\n<p>axiomatization where foo: \"P a b c ⟹ Q a b c\"</p>\n<p>ML {*<br>\nfun transform ctxt thm =  <br>\n  let <br>\n    val thm' = forall_intr_vars thm<br>\n    val meta_eq = Object_Logic.atomize ctxt (cprop_of thm')<br>\n  in<br>\n    Raw_Simplifier.rewrite_rule ctxt [meta_eq] thm'<br>\n  end</p>\n<p>val new_thm = transform @{context} @{thm foo}</p>\n<p>*}</p>\n<p>Best,<br>\nRené</p>",
        "id": 294307916,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660924909
    },
    {
        "content": "<p>From: Manuel Eberl &lt;<a href=\"mailto:eberlm@in.tum.de\">eberlm@in.tum.de</a>&gt;<br>\nHallo,</p>\n<p>apparently not. My lemma looks like this:</p>\n<p>lemma \"x ≥ (0::real) ⟹ x*x ≥ 0\"</p>\n<p>I would now like to apply some tactic to rewrite this to \"∀x. x ≥<br>\n(0::real) ⟶ x*x ≥ 0\".</p>\n<p>For some odd reason, your code seems to loop indefinitely on this<br>\nexample when I try to turn it into a tactic.</p>\n<p>Manuel</p>",
        "id": 294307934,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660924913
    },
    {
        "content": "<p>From: Lars Noschinski &lt;<a href=\"mailto:noschinl@in.tum.de\">noschinl@in.tum.de</a>&gt;<br>\nThere is forall_intr_list (in Drule), which turns free variables into<br>\nmeta-quantified variables. The tactic Object_Logic.full_atomize_tac will<br>\nreplace meta implication by object logic implication (and probably other<br>\nstuff, too).</p>\n<p>-- Lars</p>",
        "id": 294308099,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660924956
    }
]