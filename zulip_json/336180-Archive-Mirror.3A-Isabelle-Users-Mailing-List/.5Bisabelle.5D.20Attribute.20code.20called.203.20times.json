[
    {
        "content": "<p>From: Cezary Kaliszyk &lt;<a href=\"mailto:cezarykaliszyk@gmail.com\">cezarykaliszyk@gmail.com</a>&gt;<br>\nHi all,</p>\n<p>I want to define an attribute, that takes a string as an argument<br>\nwith the code below:</p>\n<p>ML {* fun attr s = let val _ = warning s in<br>\n      (Thm.rule_attribute (fn _ =&gt; fn y =&gt; y)) end *}<br>\nsetup {* Attrib.setup (<a href=\"http://Binding.name\">Binding.name</a> \"map_const\")<br>\n      (Scan.lift Parse.string &gt;&gt; attr) \"...\" *}<br>\nlemma [map_const \"foo\"]: True<br>\n  by simp</p>\n<p>However upon defining the lemma, \"foo\" is printed 3 times. Is there a<br>\ngood reason why the attribute code is called 3 times and is it<br>\npossible to get it called only once?</p>\n<p>Regards,</p>\n<p>Cezary</p>",
        "id": 294153516,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660850238
    },
    {
        "content": "<p>From: Lukas Bulwahn &lt;<a href=\"mailto:bulwahn@in.tum.de\">bulwahn@in.tum.de</a>&gt;<br>\nHi Cezary,</p>\n<p>This effect is due to the Haftmann and Wenzel \"local theory sandwich\".<br>\nIt's once called for the auxillary context, once for the local context, <br>\nand once for the theory context.</p>\n<p>It somewhat stores the data in three different layers.<br>\nHowever, when you lookup data, you will probably only see one version <br>\nfrom the one layer you are working in.</p>\n<p>What's the point of getting it called only once anyway?</p>\n<p>Lukas</p>",
        "id": 294153575,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660850266
    },
    {
        "content": "<p>From: Cezary Kaliszyk &lt;<a href=\"mailto:cezarykaliszyk@gmail.com\">cezarykaliszyk@gmail.com</a>&gt;<br>\nHi Lukas,</p>\n<p>On Sun, Mar 11, 2012 at 2:28 PM, Lukas Bulwahn &lt;<a href=\"mailto:bulwahn@in.tum.de\">bulwahn@in.tum.de</a>&gt; wrote:</p>\n<blockquote>\n<p>It somewhat stores the data in three different layers.<br>\nHowever, when you lookup data, you will probably only see one version from<br>\nthe one layer you are working in.</p>\n</blockquote>\n<p>This answers the question, thanks!</p>\n<blockquote>\n<p>What's the point of getting it called only once anyway?</p>\n</blockquote>\n<p>For certain theorems that are not of the valid format I want to print<br>\na warning, and this warning is printed zero or three times. So far I<br>\nignored the \"Context.generic\" argument, and checking that it is a<br>\ntheory should to do the job.</p>\n<p>Regards,</p>\n<p>Cezary</p>\n<blockquote>\n<p>On 03/10/2012 11:38 PM, Cezary Kaliszyk wrote:</p>\n<blockquote>\n<p>Hi all,</p>\n<p>I want to define an attribute, that takes a string as an argument<br>\nwith the code below:</p>\n<p>ML {* fun attr s = let val _ = warning s in<br>\n      (Thm.rule_attribute (fn _ =&gt;  fn y =&gt;  y)) end *}<br>\nsetup {* Attrib.setup (<a href=\"http://Binding.name\">Binding.name</a> \"map_const\")<br>\n      (Scan.lift Parse.string&gt;&gt;  attr) \"...\" *}<br>\nlemma [map_const \"foo\"]: True<br>\n  by simp</p>\n<p>However upon defining the lemma, \"foo\" is printed 3 times. Is there a<br>\ngood reason why the attribute code is called 3 times and is it<br>\npossible to get it called only once?</p>\n<p>Regards,</p>\n<p>Cezary</p>\n</blockquote>\n</blockquote>",
        "id": 294153588,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660850272
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nOn Mon, 12 Mar 2012, Cezary Kaliszyk wrote:</p>\n<blockquote>\n<p>Hi Lukas,</p>\n<p>On Sun, Mar 11, 2012 at 2:28 PM, Lukas Bulwahn &lt;<a href=\"mailto:bulwahn@in.tum.de\">bulwahn@in.tum.de</a>&gt; wrote:</p>\n<blockquote>\n<p>It somewhat stores the data in three different layers.<br>\nHowever, when you lookup data, you will probably only see one version from<br>\nthe one layer you are working in.</p>\n</blockquote>\n<p>This answers the question, thanks!</p>\n<blockquote>\n<p>What's the point of getting it called only once anyway?</p>\n</blockquote>\n<p>For certain theorems that are not of the valid format I want to print a <br>\nwarning, and this warning is printed zero or three times.</p>\n</blockquote>\n<p>The exact number of applications of declarations/attributes depends on the <br>\ncontext :-)  For the usual targets it is often 3 -- the Haftmann/Wenzel <br>\nsandwich.  There can be any number of further applications in a different <br>\ncontext, e.g. via interpretation.</p>\n<p>Attributes that do not like a certain shape of argument (after it has <br>\npassed through several transformations by morphisms) may ignore it and <br>\nproduce a warning (not an error!) to inform the user.  The system <br>\nmaintains Context_Position.is_visible/is_visible_proof to discern <br>\nsituations where the user might be looking from ones hidden somewhere at <br>\nthe bottom of the logical foundations etc.</p>\n<p>Here is an example:</p>\n<p>attribute_setup warning = {*<br>\n   Scan.lift <a href=\"http://Args.name\">Args.name</a> &gt;&gt; (fn s =&gt;<br>\n     Thm.rule_attribute (fn context =&gt; fn th =&gt;<br>\n       (Context_Position.if_visible_proof context warning s; th))) *}</p>\n<p>declare TrueI [warning foo]</p>\n<p>locale xxx<br>\nbegin<br>\ndeclare TrueI [warning foo]<br>\nend</p>\n<p>class yyy = fixes yyy :: 'a<br>\nbegin<br>\ndeclare TrueI [warning foo]<br>\nend</p>\n<p>This does the job for Isabelle2011-1.  Since precise context visibility is <br>\nrelevant for the Prover IDE, I am in the process to refine it further for <br>\nthe next release (repository versions should be discussed on isabelle-dev <br>\nas usual.)</p>\n<blockquote>\n<p>So far I ignored the \"Context.generic\" argument, and checking that it is <br>\na theory should to do the job.</p>\n</blockquote>\n<p>Rule of thumb (1): Do not ignore a context by default.  There are very few <br>\nsituations where things work properly without the local context.</p>\n<p>Rule of thumb (2): The theory serves mainly foundational purposes, and is <br>\nrarely relevant to the user.  Checking for Context.Theory makes things <br>\nglobal-only.</p>\n<p>Makarius</p>",
        "id": 294153673,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660850291
    }
]