[
    {
        "content": "<p>From: John Munroe &lt;<a href=\"mailto:munddr@gmail.com\">munddr@gmail.com</a>&gt;<br>\nHello all</p>\n<p>I'm having my first attempt in writing a tactic and I'm trying to<br>\ntranslate 'using' in Isar into a tactic. Should I be using<br>\nproof.put_facts for this? If so, how do I retrieve the current proof<br>\nstate?</p>\n<p>Any help will be appreciated!</p>\n<p>John</p>",
        "id": 294115890,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660838288
    },
    {
        "content": "<p>From: Alexander Krauss &lt;<a href=\"mailto:krauss@in.tum.de\">krauss@in.tum.de</a>&gt;<br>\nHi John,</p>\n<p>Unlike Isar proof methods, tactics operate only on the goal state and do <br>\nnot take chained facts. On that level you can simply pass additional <br>\nfacts as ML arguments. To provide a method to the user that takes <br>\nchained facts, use Method.METHOD (see Pure/Isar/method.ML).</p>\n<p>Hope this helps,<br>\nAlex</p>",
        "id": 294115899,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660838294
    },
    {
        "content": "<p>From: John Munroe &lt;<a href=\"mailto:munddr@gmail.com\">munddr@gmail.com</a>&gt;<br>\nOn Tue, Sep 28, 2010 at 9:42 PM, Alexander Krauss &lt;<a href=\"mailto:krauss@in.tum.de\">krauss@in.tum.de</a>&gt; wrote:</p>\n<blockquote>\n<p>Hi John,</p>\n<blockquote>\n<p>I'm having my first attempt in writing a tactic and I'm trying to<br>\ntranslate 'using' in Isar into a tactic. Should I be using<br>\nproof.put_facts for this? If so, how do I retrieve the current proof<br>\nstate?</p>\n</blockquote>\n<p>Unlike Isar proof methods, tactics operate only on the goal state and do not<br>\ntake chained facts. On that level you can simply pass additional facts as ML<br>\narguments. To provide a method to the user that takes chained facts, use<br>\nMethod.METHOD (see Pure/Isar/method.ML).<br>\n</p>\n</blockquote>\n<p>I see. But how do I pass additional facts as arguments? Which function<br>\nshould I pass to?</p>\n<p>TIA</p>\n<p>John</p>\n<blockquote>\n<p>Hope this helps,<br>\nAlex<br>\n</p>\n</blockquote>",
        "id": 294115912,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660838300
    },
    {
        "content": "<p>From: John Munroe &lt;<a href=\"mailto:munddr@gmail.com\">munddr@gmail.com</a>&gt;</p>\n<blockquote>\n<blockquote>\n<p>Unlike Isar proof methods, tactics operate only on the goal state and do not<br>\ntake chained facts. On that level you can simply pass additional facts as ML<br>\narguments. To provide a method to the user that takes chained facts, use<br>\nMethod.METHOD (see Pure/Isar/method.ML).<br>\n</p>\n</blockquote>\n<p>I see. But how do I pass additional facts as arguments? Which function<br>\nshould I pass to?</p>\n</blockquote>\n<p>Just some further information: I'd like to apply the auto_tac with<br>\nadditional facts.</p>\n<p>Thanks<br>\nJohn</p>\n<blockquote>\n<p>TIA</p>\n<p>John</p>\n<blockquote>\n<p>Hope this helps,<br>\nAlex</p>\n</blockquote>\n</blockquote>",
        "id": 294115943,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660838312
    },
    {
        "content": "<p>From: Jasmin Blanchette &lt;<a href=\"mailto:jasmin.blanchette@gmail.com\">jasmin.blanchette@gmail.com</a>&gt;<br>\nIf the facts have no particular form, you can add them as assumptions using Method.insert_tac. E.g.</p>\n<p>Method.insert_tac my_extra_facts 1<br>\n     THEN<br>\n     auto_tac (cs, ss)</p>\n<p>Jasmin</p>",
        "id": 294115959,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660838318
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nMaybe you actually want to augment the clasimpset context of auto_tac, <br>\nwhich is actually a pair over claset * simpset.  There are various ML <br>\noperators for that, such as addIs or addsimps; see the infix declarations <br>\nat the start of the following source files:</p>\n<p>src/Pure/meta_simplifier.ML<br>\n   src/Provers/classical.ML<br>\n   src/Provers/clasimp.ML</p>\n<p>Makarius</p>",
        "id": 294116090,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660838349
    }
]