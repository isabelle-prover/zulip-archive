[
    {
        "content": "<p>From: Lawrence Paulson &lt;<a href=\"mailto:lp15@cam.ac.uk\">lp15@cam.ac.uk</a>&gt;<br>\nDear Kristof, thanks for your email. I'll do my best to answer, but it's at least 15 years since I was working with this material.</p>\n<p>The main reference connected with your question (e.g. authenticity of signed messages) is the original JCS paper:</p>\n<p><a href=\"https://www.cl.cam.ac.uk/~lp15/papers/Auth/jcs.pdf\">https://www.cl.cam.ac.uk/~lp15/papers/Auth/jcs.pdf</a></p>\n<p>The main examples distributed with Isabelle/HOL are OtwayRees.thy (for symmetric key protocols) and NS_Public.thy (for public key protocols). The message primitives such as synth and analz are defined in Message.thy.</p>\n<p>All the proofs distributed here take the original approach, where little is protocol-independent other than the basic frameworks, which assume either a symmetric key or a public key environment (Public.thy). Other authors have further developed the approach to strengthen the protocol-independent side, and apparently much reducing the effort needed to verify protocols, but I'm not familiar with this work.</p>\n<p>So with a protocol-dependent approach, it works because of the way the functions synth and analz are defined: they aren't able to generate nonces or keys, so in particular the Spy cannot do that. If you look at the proofs in NS_Public.thy, which is the famous Needham-Schroeder public key protocol, you'll see that the main tools are induction, simplification and basic automation (blast) with the theorem analz_insertI, which simply asserts Y ∈ analz H ⟹ Y ∈ analz (insert X H).</p>\n<p>Larry Paulson</p>",
        "id": 294741479,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661191698
    },
    {
        "content": "<p>From: Kristof Teichel &lt;<a href=\"mailto:k.teichel@gmail.com\">k.teichel@gmail.com</a>&gt;<br>\nHello Isabellers,</p>\n<p>I am currently trying to finish up my dissertation project at PTB<br>\n(Germany's metrology institute) with the topic of of \"design and formal<br>\nanalysis of security measures for time synchronization protocols\". For<br>\nthis, I would really appreciate a few pointers towards authenticity proofs<br>\nwith the Inductive Approach in Isabelle - and perhaps ideas on how best to<br>\nimplement a few extensions that I will need.</p>\n<p>Since 2014, I have been (on and off) tampering with the Inductive Approach</p>\n<ul>\n<li>I even submitted an early inquiry on this list once before. I majored in<br>\nmathematics and computer science, so all of what I am seeing is vaguely<br>\nfamiliar territory, but the details are still mysterious to me.</li>\n</ul>\n<p>So, now for a few actual questions:</p>\n<p>1) Where (if anywhere) in the source files can I find protocol-independent<br>\nproofs concerning authenticity of signed messages, specifically about the<br>\nimpossibility of synthesis of signatures/message authentication codes<br>\nwithout knowledge of the proper key (or the exact, already authenticated<br>\nmessage itself)? Or is something like this simply not needed / not feasible<br>\nfor some reason?<br>\nI ask because I have been stuck for ages whenever I attempted an<br>\nauthentication goal, and I have recently discovered I was able to solve all<br>\nthose problem with a simple lemma along the lines of \"if attacker does not<br>\nknow [key], then he cannot synthesize messages containing signature or MAC<br>\nusing [key]\" (with \"sorry\" cheat, just for proof-of-concept).</p>\n<p>2) In general, what file might be a good starting point to import when<br>\ndefining a new protocol that I want to obtain authentication proofs for?<br>\nThere is lots of material, but I am somehow missing instruction on this<br>\nquestion.</p>\n<p>Sorry for wall-of-text. I would be thankful for any help.</p>\n<p>Best regards,<br>\nKristof Teichel</p>\n<p>P.S.: If anyone is interested and able to help, I would also like to go<br>\nmore into the extensions that I need (namely, \"runtime\"-adjustable clocks<br>\nthat let participants assign quantitative time values to events and<br>\ncommunicate those in messages). I am aware of the \"Physical Properties\"<br>\nextension attempt (<a href=\"https://beschmi.net/csf09.pdf\">https://beschmi.net/csf09.pdf</a>), but for a few different<br>\nreasons, I do not think I will be able to use it and prefer instead to<br>\nincorporate my own extensions. This is the main reason why I like the<br>\nInductive Approach so much: it is generic enough that I am pretty sure that<br>\nI should be able to somehow include these extras into it in a sensible way.</p>",
        "id": 294741651,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661191777
    },
    {
        "content": "<p>From: Kristof Teichel &lt;<a href=\"mailto:k.teichel@gmail.com\">k.teichel@gmail.com</a>&gt;<br>\nThank you, Larry, for the info, as well as the quick and friendly response.</p>\n<p>To give some additional context:<br>\nThe JCS paper I have studied and consulted a fair amount over the years. It<br>\nhas certainly been helpful.<br>\nI would say that I have a solid working knowledge (i.e. I know the<br>\ndefinitions and have a concept of roughly what lemmas/theorems are in<br>\nthere) of the theory files up to and including Public.thy.<br>\nI have made modifications on Event.thy (and formerly Message.thy) and later<br>\nswitched to extension of Event.thy, in order to account for real-time<br>\nclocks, for which I had to re-prove everything in there.<br>\nOverall, these activities have certainly given me the chance of studying<br>\nthat material pretty carefully.<br>\nRecently, I have been successful using my extensions to define a few<br>\ndumbed-down protocols and proving executability and regularity goals on<br>\nthose.</p>\n<p>However, authenticity goals have been giving me headaches forever.<br>\nFor some reason (probably mainly lack of skills with Isabelle syntax), I<br>\nhave not been successful (before cheating with protocol-independent lemmas<br>\nas hinted at).<br>\nI guess I will go back to the Needham-Schroeder proofs and see if my<br>\nincreased overall understanding since I last looked at those can give me<br>\nnew input.</p>\n<p>Let me ask a few more actual questions:<br>\n1) The protocols mostly use keyed Hash-MAC (\"Hash[key] message\") instead of<br>\nclassical signatures for authentiction - would you suppose that had<br>\nsomething to do with my troubles (are these perhaps less friendly for<br>\nprovability than straight-up signatures)?<br>\n2) Is there anyone still actively engaging in activities related to the<br>\nInductive Approach who would possibly be willing to have an exchange about<br>\nthe more intricate aspects of what I am trying to do? Or anyone who gives<br>\nanything tutorial-like on it?</p>\n<p>Best regards,<br>\nKristof</p>\n<p>P.S.: Only recently did I discover that there were potentially valuable<br>\nextensions in the \"Guard\" subdirectory.<br>\nI am not yet familiar with any of the material really, but have given it a<br>\nscan. I did notice there are quite a few protocol-independent formulations<br>\nin there.<br>\nI was hoping you or Frédéric could shine some light on what these<br>\nextensions can and cannot do, specifically for authentication goals.<br>\nFor some reason, I have neglected Frédéric's Paper (\" An Isabelle<br>\nformalization of protocol-independent secrecy with an application to<br>\ne-commerce\") on this so far, I will rectify that ASAP.</p>",
        "id": 294741675,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661191797
    },
    {
        "content": "<p>From: Lawrence Paulson &lt;<a href=\"mailto:lp15@cam.ac.uk\">lp15@cam.ac.uk</a>&gt;</p>\n<blockquote>\n<p>On 3 Aug 2018, at 15:24, Kristof Teichel &lt;<a href=\"mailto:k.teichel@gmail.com\">k.teichel@gmail.com</a>&gt; wrote:</p>\n<p>1) The protocols mostly use keyed Hash-MAC (\"Hash[key] message\") instead of classical signatures for authentiction - would you suppose that had something to do with my troubles (are these perhaps less friendly for provability than straight-up signatures)?</p>\n</blockquote>\n<p>The recursive authentication protocol uses the same method. It is also described in the JCS paper and formalised as Recur.thy.</p>\n<blockquote>\n<p>2) Is there anyone still actively engaging in activities related to the Inductive Approach who would possibly be willing to have an exchange about the more intricate aspects of what I am trying to do? Or anyone who gives anything tutorial-like on it?</p>\n</blockquote>\n<p>I see new papers appearing from time to time but I'm afraid I haven't studied any of them.</p>",
        "id": 294741684,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661191801
    },
    {
        "content": "<p>From: Jean Martina &lt;<a href=\"mailto:jean.martina@cl.cam.ac.uk\">jean.martina@cl.cam.ac.uk</a>&gt;<br>\nThe issue here is that Hash-MAC are not actual signatures. They provide<br>\na weaker form of authentication. All the authentication proofs for<br>\ndigital signatures in the standard theories, will be too strong for<br>\nthat. The authentication Hash-MAC provide can only be available to the<br>\nrecipient of the message based on the fact that that \"Hash[key] message\"<br>\nwas not seen before by him. It is not available to anyone else. This<br>\nmakes some other proofs tricky.</p>\n<p>If you analyse the authenticity proofs for Needham-Schroeder Shared Key<br>\nProtocol and compare them with Needham-Schroeder Public Key Protocol,<br>\nyou will see that they yield different things, although both are called<br>\nauthenticity. Definitely, what you need is the weaker form that is used<br>\nin NSSKP since you are using a shared key.</p>\n<p>Regards,</p>\n<p>Jean<br>\n<a href=\"/user_uploads/14278/CgekaihWDyPkyn03F3pYyyvt/signature.asc\">signature.asc</a></p>",
        "id": 294741889,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661191870
    },
    {
        "content": "<p>From: Kristof Teichel &lt;<a href=\"mailto:k.teichel@gmail.com\">k.teichel@gmail.com</a>&gt;<br>\nHey Jean,</p>\n<p>nice to hear from you again.</p>\n<p>That's a very interesting distinction you're pointing out.<br>\nI've compared the two Needham-Schroder files and also taken a look at<br>\nRecur.thy.</p>\n<p>I will absolutely keep it mind for my formalizations and proofs.</p>\n<p>Best regards,<br>\nKristof</p>",
        "id": 294741941,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661191894
    }
]