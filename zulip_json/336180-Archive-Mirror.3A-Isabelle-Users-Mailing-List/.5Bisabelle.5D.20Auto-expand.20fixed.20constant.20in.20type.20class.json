[
    {
        "content": "<p>From: Manuel Eberl &lt;<a href=\"mailto:eberlm@in.tum.de\">eberlm@in.tum.de</a>&gt;<br>\nHallo,</p>\n<p>I have a typeclass that fixes a function “normalise :: 'a ⇒ 'a” and some<br>\nother stuff, and provides some lemmas involving “normalise”. Now let's<br>\nsay I have an instantiation for nat, in which normalise is “λx. x” and<br>\none for int, in which it is “abs”.</p>\n<p>Let's say the typeclass proves the lemma foo: “normalise x = normalise y<br>\n⟷ associated x y”</p>\n<p>I would now like to have the lemmas from the typeclass directly<br>\navailable for nat and int, and without any appearance of “normalise”;<br>\nany occurrence of “normalise” in the lemmas should automatically be<br>\nreplaced by “λx. x” resp. “abs”, i.e. I would like to have lemmas<br>\nfoo_nat: “(x::nat) = y ⟷ associated x y” and foo_int: “abs (x::int) = y<br>\n⟷ associated x y”.</p>\n<p>Is that possible?</p>\n<p>Cheers,<br>\nManuel</p>",
        "id": 294267416,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660916035
    },
    {
        "content": "<p>From: Florian Haftmann &lt;<a href=\"mailto:florian.haftmann@informatik.tu-muenchen.de\">florian.haftmann@informatik.tu-muenchen.de</a>&gt;<br>\nHi Manuel,</p>\n<p>Theorems in type classes are always directly mapped to the theory level:</p>\n<p>class normalize<br>\nbegin</p>\n<p>lemma \"P ['a]<br>\n  &lt;prf&gt;<br>\n  -- {* yields <code>P [?'a::normalize]</code> in the background theory *}</p>\n<p>end</p>\n<p>It sounds to me that you might want to formalize normalization (wrt. to<br>\ndivisibility units, I guess) using a locale</p>\n<p>locale normalize =<br>\n  fixes normalize :: \"'a =&gt; 'a\"<br>\n  assumes …<br>\nbegin</p>\n<p>…</p>\n<p>end</p>\n<p>interpretation nat!: normalize \"%n::nat. n\"<br>\n  &lt;prf&gt;</p>\n<p>interpretation int!: normalize \"abs :: int =&gt; int\"<br>\n  &lt;prf&gt;</p>\n<p>Hope this helps,<br>\n    Florian<br>\n<a href=\"/user_uploads/14278/H0sBEf5m91NLhP6Kb_5whrqb/signature.asc\">signature.asc</a></p>",
        "id": 294267440,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660916042
    }
]