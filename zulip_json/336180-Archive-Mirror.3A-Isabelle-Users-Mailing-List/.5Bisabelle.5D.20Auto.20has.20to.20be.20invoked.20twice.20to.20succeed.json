[
    {
        "content": "<p>From: Julian Brunner &lt;<a href=\"mailto:julianbrunner@gmail.com\">julianbrunner@gmail.com</a>&gt;<br>\nDear all,</p>\n<p>I came across some interesting behavior with respect to the auto proof<br>\nmethod. In the attached theory, auto has to be applied twice in a row in<br>\norder to solve the goal. The first invocation solves the first subgoal and<br>\ntransforms the second, with the second invocation solving what remains of<br>\nthe second subgoal. So far, I was under the impression that when invoking<br>\nauto, it solves/transforms the subgoals until it cannot do anything else,<br>\nguaranteeing that a second invocation fails immediately. Any clues on what<br>\nis happening here?</p>\n<p>Julian<br>\n<a href=\"/user_uploads/14278/4JJLXNpu_pT84fJ5j4llVaiG/Scratch.thy\">Scratch.thy</a></p>",
        "id": 294649570,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661165544
    },
    {
        "content": "<p>From: Joachim Breitner &lt;<a href=\"mailto:breitner@kit.edu\">breitner@kit.edu</a>&gt;<br>\nHi Julian,</p>\n<p>auto has a limit as to how deeply it searches for proofs, and with a<br>\ncomplicated goal, you might well hit that limit, leaving the proof<br>\nstate in a semi-proven goal a second invocation of auto can solve.</p>\n<p>auto has some parameters whose semantics I do not know, but from<br>\nexperience (auto 4 4), works in these cases. Or try something like<br>\nfastforce+.</p>\n<p>Greetings,<br>\nJoachim<br>\n<a href=\"/user_uploads/14278/A9z9Dd_TZDlyXtpQHsxSi-VC/signature.asc\">signature.asc</a></p>",
        "id": 294649594,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661165556
    },
    {
        "content": "<p>From: Julian Brunner &lt;<a href=\"mailto:julianbrunner@gmail.com\">julianbrunner@gmail.com</a>&gt;<br>\nThat was also Manuel's first idea when I told him about it. However, it<br>\ndoesn't seem to have any effect here, as even (auto 100 100) doesn't solve<br>\nthe goal. Also, my interest here is less about finding a convenient proof<br>\n(auto+ does it just fine, after all), and more about figuring out what is<br>\ngoing on.</p>",
        "id": 294649607,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661165561
    },
    {
        "content": "<p>From: Quentin Hibon &lt;<a href=\"mailto:quentin.hibon@polytechnique.edu\">quentin.hibon@polytechnique.edu</a>&gt;<br>\napply auto+ also works (the + repeats the given command until it no <br>\nlonger succeeds).</p>",
        "id": 294649626,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661165572
    },
    {
        "content": "<p>From: Lars Noschinski &lt;<a href=\"mailto:noschinl@in.tum.de\">noschinl@in.tum.de</a>&gt;<br>\nauto is designed such that it is usually idempotent, but without<br>\nguarantees. It calls first the simplifier and then safe, before trying<br>\nsome classical reasoning. Sometimes, the simplifier needs a call to safe<br>\nfirst.</p>",
        "id": 294649630,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661165573
    }
]