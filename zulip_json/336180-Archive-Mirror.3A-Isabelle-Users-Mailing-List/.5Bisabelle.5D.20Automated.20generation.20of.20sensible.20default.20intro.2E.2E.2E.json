[
    {
        "content": "<p>From: Manuel Eberl &lt;<a href=\"mailto:eberlm@in.tum.de\">eberlm@in.tum.de</a>&gt;<br>\nI don't think so. Is there a reason not to simply use \"inductive\" if you<br>\nwant this?</p>\n<p>Cheers,</p>\n<p>Manuel</p>",
        "id": 294764920,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661201487
    },
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\nOn 08/11/2019 08:57, Manuel Eberl wrote:</p>\n<blockquote>\n<p>I don't think so. Is there a reason not to simply use \"inductive\" if you<br>\nwant this?</p>\n</blockquote>\n<p>Yes, you don't get the equality.</p>\n<p>Tobias</p>\n<blockquote>\n<p>Cheers,</p>\n<p>Manuel</p>\n<p>On 07/11/2019 23:22, mailing-list anonymous wrote:</p>\n<blockquote>\n<p>Dear All,</p>\n<p>I am curious whether anyone has ever thought about introducing a package<br>\nfor generating sensible default intro/elim/dest rules from definitions. It<br>\nseems that a non-insignificant part of almost every Isabelle/HOL library is<br>\ndedicated to the statement and proof of these (often) trivial results.<br>\nAfter all, this has already been partially achieved for certain other<br>\nspecification elements, e.g. inductive and fun/function. In my view, even<br>\nsomething that produces the desired result 'sufficiently often' would be<br>\nconsiderably better than nothing at all.</p>\n<p>In summary, I have the following questions:<br>\n1). Is the feature that I seek already available (I have encountered quite<br>\na number of similar useful auxiliary features that seem to be<br>\nignored/forgotten)?<br>\n2). Does anyone have plans to introduce such a feature in the foreseeable<br>\nfuture?</p>\n<p>Thank you<br>\n</p>\n</blockquote>\n<p><a href=\"/user_uploads/14278/PqPs4nAAbVZb-z9sZ0U6qZHx/smime.p7s\">smime.p7s</a></p>\n</blockquote>",
        "id": 294765098,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661201555
    },
    {
        "content": "<p>From: Manuel Eberl &lt;<a href=\"mailto:eberlm@in.tum.de\">eberlm@in.tum.de</a>&gt;<br>\nYes you do. Albeit, admittedly, in a somewhat quirky form:</p>\n<p>inductive foo where<br>\n  \"length xs = length ys ⟹ foo xs ys\"</p>\n<p>thm foo.simps</p>\n<p>(* foo ?a1.0 ?a2.0 = (∃xs ys. ?a1.0 = xs ∧ ?a2.0 = ys ∧ length xs =<br>\nlength ys) *)</p>\n<p>Cheers,</p>\n<p>Manuel</p>",
        "id": 294765204,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661201622
    },
    {
        "content": "<p>From: Lawrence Paulson &lt;<a href=\"mailto:lp15@cam.ac.uk\">lp15@cam.ac.uk</a>&gt;<br>\nI’m one of those who does this a lot, or did. I think however that a formulaic generation of intro/elim rules is not that useful. I’ve become more comfortable with beginning a proof with</p>\n<p>unfolding blah_def<br>\n    proof (intro exI conjI impI)</p>\n<p>for example, especially when only a few proofs have to start this way. It’s normal to get bogged down in much harder proofs pretty quickly.</p>\n<p>Larry Paulson</p>",
        "id": 294765301,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661201658
    },
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\nOn 08/11/2019 11:59, Manuel Eberl wrote:</p>\n<blockquote>\n<p>Yes you do. Albeit, admittedly, in a somewhat quirky form:</p>\n</blockquote>\n<p>That's why I wrote \"the\" equality and not \"an\".</p>\n<p>Tobias</p>\n<blockquote>\n<p>inductive foo where<br>\n   \"length xs = length ys ⟹ foo xs ys\"</p>\n<p>thm foo.simps</p>\n<p>(* foo ?a1.0 ?a2.0 = (∃xs ys. ?a1.0 = xs ∧ ?a2.0 = ys ∧ length xs =<br>\nlength ys) *)</p>\n<p>Cheers,</p>\n<p>Manuel</p>\n<p>On 08/11/2019 11:51, Tobias Nipkow wrote:<br>\n&gt;<br>\n&gt;</p>\n<p>On 08/11/2019 08:57, Manuel Eberl wrote:</p>\n<blockquote>\n<blockquote>\n<p>I don't think so. Is there a reason not to simply use \"inductive\" if you<br>\nwant this?</p>\n</blockquote>\n<p>Yes, you don't get the equality.</p>\n<p>Tobias</p>\n<blockquote>\n<p>Cheers,</p>\n<p>Manuel</p>\n</blockquote>\n<p>On 07/11/2019 23:22, mailing-list anonymous wrote:</p>\n<blockquote>\n<blockquote>\n<p>Dear All,</p>\n<p>I am curious whether anyone has ever thought about introducing a package<br>\nfor generating sensible default intro/elim/dest rules from<br>\ndefinitions. It<br>\nseems that a non-insignificant part of almost every Isabelle/HOL<br>\nlibrary is<br>\ndedicated to the statement and proof of these (often) trivial results.<br>\nAfter all, this has already been partially achieved for certain other<br>\nspecification elements, e.g. inductive and fun/function. In my view,<br>\neven<br>\nsomething that produces the desired result 'sufficiently often' would be<br>\nconsiderably better than nothing at all.</p>\n<p>In summary, I have the following questions:<br>\n1). Is the feature that I seek already available (I have encountered<br>\nquite<br>\na number of similar useful auxiliary features that seem to be<br>\nignored/forgotten)?<br>\n2). Does anyone have plans to introduce such a feature in the<br>\nforeseeable<br>\nfuture?</p>\n<p>Thank you<br>\n</p>\n</blockquote>\n</blockquote>\n</blockquote>\n<p><a href=\"/user_uploads/14278/88EUxh80pCiAWMzRGb-JBRn9/smime.p7s\">smime.p7s</a></p>\n</blockquote>",
        "id": 294765310,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661201665
    },
    {
        "content": "<p>From: \"<a href=\"mailto:lammich@in.tum.de\">lammich@in.tum.de</a>\" &lt;<a href=\"mailto:lammich@in.tum.de\">lammich@in.tum.de</a>&gt;<br>\nTo get intro rules, I sometimes use xxx_def[THEN iffD2]  </p>\n<p>Peter</p>",
        "id": 294765320,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661201671
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nResults are better if the arguments are treated as parameters, moreover<br>\nwith fancy postfix notation for rules:</p>\n<p>inductive foo for xs ys :: \"'a list\"<br>\n  where \"foo xs ys\" if \"length xs = length ys\"</p>\n<p>print_theorems<br>\n(*<br>\ntheorems:<br>\n  foo.cases: foo ?xs ?ys ⟹ (length ?xs = length ?ys ⟹ ?P) ⟹ ?P<br>\n  foo.induct: foo ?xs ?ys ⟹ (length ?xs = length ?ys ⟹ ?Q) ⟹ ?Q<br>\n  foo.inducts: foo ?xs ?ys ⟹ (length ?xs = length ?ys ⟹ ?Q) ⟹ ?Q<br>\n  foo.intros: length ?xs = length ?ys ⟹ foo ?xs ?ys<br>\n  foo.simps: foo ?xs ?ys = (length ?xs = length ?ys)<br>\n*)</p>\n<p>Makarius</p>",
        "id": 294765372,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661201695
    },
    {
        "content": "<p>From: mailing-list anonymous &lt;<a href=\"mailto:mailing.list.anonymous@gmail.com\">mailing.list.anonymous@gmail.com</a>&gt;<br>\nDear All,</p>\n<p>Thank you for your replies: I will make an attempt to respond in a single<br>\nmessage to avoid pollution.</p>\n<p>Thank you for your comment. Indeed, I have a tendency to overcomplicate<br>\nthings from time to time. Nevertheless, I find that if such rules are<br>\nprovided to the classical reasoning tools consistently and for every<br>\npredicate in a library (by specifying attributes intro/elim/dest), then the<br>\nIsar proofs can be expressed more concisely and proofs can be obtained<br>\nfaster because one does not have to worry too much about a multitude of<br>\nfolds/unfolds/intros/etc. For me, the benefit of having such theorems far<br>\noutweighs the disadvantage of having to type 10-20 extra lines of code for<br>\neach newly introduced predicate.</p>\n<p>I guess, the main conclusion of this thread is that the functionality that<br>\nI seek is only available partially as part of the functionality associated<br>\nwith the command \"inductive\". It is not unlikely that I will<br>\n\"rapid-prototype\" something that provides more of the functionality that I<br>\nseek. However, I doubt I would ever wish to make an attempt to develop it<br>\ninto a universally applicable and robust framework.</p>\n<p>Thank you</p>",
        "id": 294765397,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661201708
    },
    {
        "content": "<p>From: mailing-list anonymous &lt;<a href=\"mailto:mailing.list.anonymous@gmail.com\">mailing.list.anonymous@gmail.com</a>&gt;<br>\nDear All,</p>\n<p>I am curious whether anyone has ever thought about introducing a package<br>\nfor generating sensible default intro/elim/dest rules from definitions. It<br>\nseems that a non-insignificant part of almost every Isabelle/HOL library is<br>\ndedicated to the statement and proof of these (often) trivial results.<br>\nAfter all, this has already been partially achieved for certain other<br>\nspecification elements, e.g. inductive and fun/function. In my view, even<br>\nsomething that produces the desired result 'sufficiently often' would be<br>\nconsiderably better than nothing at all.</p>\n<p>In summary, I have the following questions:<br>\n1). Is the feature that I seek already available (I have encountered quite<br>\na number of similar useful auxiliary features that seem to be<br>\nignored/forgotten)?<br>\n2). Does anyone have plans to introduce such a feature in the foreseeable<br>\nfuture?</p>\n<p>Thank you</p>",
        "id": 294766424,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661202174
    }
]