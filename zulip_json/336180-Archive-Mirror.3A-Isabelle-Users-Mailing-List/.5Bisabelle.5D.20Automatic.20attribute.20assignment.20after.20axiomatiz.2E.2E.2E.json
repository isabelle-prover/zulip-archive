[
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nThis is a side-branch of earlier threads about \"user-space type systems\" <br>\nor \"soft-type systems\" in the Isabelle framework (beyond the hardwired <br>\ntype-discipline of HOL-like logics).</p>\n<p>The general plan is indeed to provide further hooks for the \"check\" and <br>\n\"declare\" phases of terms within the proof context. I have had some <br>\ndiscussions in Jan-2019 with two other users of such a scenario. Proper <br>\nsolutions might emerged eventually.</p>\n<p>The abstract idea is to continue what is available in the Isabelle/ML <br>\nmodule \"Variable\" for proper logical judgements.</p>\n<p>Makarius</p>",
        "id": 294751143,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661195514
    },
    {
        "content": "<p>From: Joshua Chen &lt;<a href=\"mailto:josh@joshchen.io\">josh@joshchen.io</a>&gt;</p>\n<blockquote>\n<p>The general plan is indeed to provide further hooks for the \"check\" <br>\nand \"declare\" phases of terms within the proof context.<br>\nI assume that the \"declare\" phase is the point, after certification, at <br>\nwhich terms are made known to the surrounding context?</p>\n</blockquote>\n<p>Beyond type-checking and type inference, another use for such <br>\nfunctionality in type theory object logics is the automatic export of <br>\nobject-level proof terms. After proving some statement<br>\nmy_prop: \"t: T\",<br>\nit would be nice for the logic to automatically define<br>\nmy_prop_prf == t<br>\nso that users can use t in further proofs without having to explicitly <br>\nwrite it out again. It would be nice to be able to do this at the point <br>\nof \"qed\" in proofs.</p>\n<p>Cheers,<br>\nJosh</p>",
        "id": 294751325,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661195584
    },
    {
        "content": "<p>From: Joshua Chen &lt;<a href=\"mailto:josh@joshchen.io\">josh@joshchen.io</a>&gt;<br>\nDear all,</p>\n<p>I am trying to add a particular functionality to a type theory object <br>\nlogic. I have a single judgment</p>\n<p>has_type :: \"[t, t] ⇒ prop\"  (infix \":\")</p>\n<p>and to support object-level typechecking, I want to explicitly record <br>\nall theorems with head has_type that are introduced via \"axiomatization\" <br>\nor \"qed\".</p>\n<p>To do this I would like to automatically declare such theorems to have <br>\nsome attribute \"typinfo\" at the point in the theory at which they are <br>\nstated (for axioms) or proved (for theorems).</p>\n<p>Is there a way to do this, other than defining my own outer syntax <br>\nkeywords? Apparently hooking directly into the existing keywords is not <br>\npossible, but perhaps I can piggyback off some other function that is <br>\ncalled when the kernel checks/certifies the theorems?</p>\n<p>Best,<br>\nJosh</p>",
        "id": 294751392,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661195615
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nOn 21/02/2019 20:27, Joshua Chen wrote:</p>\n<blockquote>\n<blockquote>\n<p>The general plan is indeed to provide further hooks for the \"check\"<br>\nand \"declare\" phases of terms within the proof context.<br>\nI assume that the \"declare\" phase is the point, after certification, at<br>\nwhich terms are made known to the surrounding context?</p>\n</blockquote>\n</blockquote>\n<p>Not quite: \"declare\" refers to Variable.declare (and variations) in<br>\nIsabelle/ML. It is where a fully-typed term is added to the context,<br>\ne.g. to claim its freshly introduced type variables and other names, to<br>\nmake implicit Hindley-Milner polymorphism work etc.</p>\n<p>This preceeds the actual goal statement as a logical claim. When that is<br>\nproven, the resulting theorem is added to the context as a fact, not as<br>\na term anymore.</p>\n<blockquote>\n<p>Beyond type-checking and type inference, another use for such<br>\nfunctionality in type theory object logics is the automatic export of<br>\nobject-level proof terms. After proving some statement<br>\nmy_prop: \"t: T\",<br>\nit would be nice for the logic to automatically define<br>\nmy_prop_prf == t<br>\nso that users can use t in further proofs without having to explicitly<br>\nwrite it out again. It would be nice to be able to do this at the point<br>\nof \"qed\" in proofs.</p>\n</blockquote>\n<p>We have not spoken about this extra problem of type theories with proof<br>\nobjects: the Isar context discipline and proof language provides no<br>\nspecial support for that. More than 20 years ago, I simply left it as<br>\nopen problem for the future, but so far nobody has revisited it.</p>\n<p>Makarius</p>",
        "id": 294751417,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661195625
    }
]