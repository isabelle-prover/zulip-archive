[
    {
        "content": "<p>From: Thomas Sewell &lt;<a href=\"mailto:Thomas.Sewell@nicta.com.au\">Thomas.Sewell@nicta.com.au</a>&gt;<br>\nThe add_simprocs mechanism from HOL/Orderings seems to be obscuring things.</p>\n<p>Normally I would construct and name the simproc objects explicitly, e.g.:</p>\n<p>val antisym_le_simproc = Simplifier.simproc_global_i<br>\n     @{theory} \"antisym le\" [@{term \"(x::'a::order) &lt;= y\"}] prove_antisym_le</p>\n<p>(etc)</p>\n<p>These are later added to the global simpset, e.g.:</p>\n<p>Simplifier.map_simpset_global (fn ss =&gt; ss addsimprocs [antisym_le_simproc])</p>\n<p>You can then add the simprocs to custom simpsets any time you want, e.g.:</p>\n<p>HOL_basic_ss addsimprocs [antisym_le_simproc]</p>\n<p>I didn't read much of Orderings.thy. It may be that this is all more <br>\ncomplicated because it depends on parameters which are here unknown. In <br>\nthat case you could produce a simproc function, or organise some Data <br>\nobject to store the instantiations as they are created so they can later <br>\nbe looked up, or similar.</p>\n<p>It would be nice if it were easier to follow Brian's advice. This <br>\napproach of custom simpsets is the norm in HOL4. Unfortunately in <br>\nIsabelle I often find myself missing a name for, say, the <br>\nsimplifications needed for arithmetic on numeral natural numbers. I have <br>\noften ended up working with the giant kludge of writing the simproc <br>\nwhich spots a pattern (e.g. numeral + numeral), simplifies the pattern <br>\nwith a big unpredictable simpset (e.g. global_simpset_of @{theory Nat}) <br>\nand then tries to normalise and check (e.g. rewrite Suc 0 -&gt; 1, check we <br>\nhave a numeral).</p>\n<p>Yours,<br>\n     Thomas.</p>",
        "id": 294225949,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660899983
    },
    {
        "content": "<p>From: René Neumann &lt;<a href=\"mailto:rene.neumann@in.tum.de\">rene.neumann@in.tum.de</a>&gt;<br>\nHi,</p>\n<p>is it possible to automa(t/g)ically instantiate a datatype as linorder,<br>\nif it is enough that there exists any order (e.g. the order of the<br>\nconstructors in the definition with the restriction that all arguments<br>\nare of class linorder too)?</p>\n<p>Use-case: Insert the datatype into a structure that needs an order on<br>\nits members. And if one does not care about the specific order, manually<br>\ndefining it is quite cumbersome (especially for a large number of<br>\nconstructors)...</p>\n<p>Any hints on (semi-)automatic tools/tricks are highly appreciated :)</p>\n<ul>\n<li>René<br>\n<a href=\"/user_uploads/14278/BXDua24F0TNJFnpDQrc26xRI/smime.p7s\">smime.p7s</a></li>\n</ul>",
        "id": 294227716,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660900819
    },
    {
        "content": "<p>From: Andreas Lochbihler &lt;<a href=\"mailto:andreas.lochbihler@kit.edu\">andreas.lochbihler@kit.edu</a>&gt;<br>\nHi René,</p>\n<p>René Thiemann has implemented such support, it is available in the Archive of <br>\nFormal Proofs: <a href=\"http://afp.sourceforge.net/entries/Datatype_Order_Generator.shtml\">http://afp.sourceforge.net/entries/Datatype_Order_Generator.shtml</a></p>\n<p>Best,<br>\nAndreas</p>",
        "id": 294227722,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660900824
    },
    {
        "content": "<p>From: René Thiemann &lt;<a href=\"mailto:rene.thiemann@uibk.ac.at\">rene.thiemann@uibk.ac.at</a>&gt;<br>\nDear René</p>\n<p>as Andreas already stated, there is such an order generator in the AFP. <br>\nHowever, the tactics in the AFP-Entry for the Isabelle2012 release version <br>\ncontain some known gaps, so that the generator may fail on some datatypes.</p>\n<p>All known gaps have been fixed in the development version of the AFP. </p>\n<p>So, if you are working with the development version of Isabelle, just use the development version of the AFP.<br>\nIf however, you are working with Isabelle2012, then please download a fixed version of the AFP-entry at</p>\n<p><a href=\"http://cl-informatik.uibk.ac.at/software/ceta/Datatype_Order_Generator.tgz\">http://cl-informatik.uibk.ac.at/software/ceta/Datatype_Order_Generator.tgz</a></p>\n<p>which contains all the fixes of the order generator and works with Isabelle2012.</p>\n<p>Best regards,<br>\nRené</p>",
        "id": 294227732,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660900830
    },
    {
        "content": "<p>From: René Neumann &lt;<a href=\"mailto:rene.neumann@in.tum.de\">rene.neumann@in.tum.de</a>&gt;<br>\nThanks for that. I didn't think of looking into the AFP to solve my<br>\nproblem:).</p>\n<p>I'm now using the version of the .tgz above and it works \\o/.</p>\n<p>Is it somehow possible, though, to disable the trace output? There are<br>\nthousands of (debug?) lines spit into the trace window whenever I use a<br>\n\"derive linorder foo\"...</p>\n<ul>\n<li>René<br>\n<a href=\"/user_uploads/14278/o82JLvVCHwIbgPaUNEHADtRO/smime.p7s\">smime.p7s</a></li>\n</ul>",
        "id": 294227749,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660900836
    },
    {
        "content": "<p>From: Simon Foster &lt;<a href=\"mailto:simon.foster@york.ac.uk\">simon.foster@york.ac.uk</a>&gt;<br>\nHi René</p>\n<p>The derive linorder works really well, but I've come across an odd example<br>\nwhich doesn't work, namely:</p>\n<p>datatype vbasic = BoolI bool | ListI \"vbasic list\"<br>\nderive linorder vbasic</p>\n<p>Fails to prove. If I replace the bool with an int or remove the list<br>\nconstructor, it works fine. There seems to be an odd interaction between<br>\nbool and list. The following works fine:</p>\n<p>datatype vbasic = TrueI | FalseI | IntI \"int\" | ListI \"vbasic list\"</p>\n<p>Do you know what's causing this?</p>\n<p>Thanks,</p>\n<p>-Simon.</p>",
        "id": 294227761,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660900845
    },
    {
        "content": "<p>From: René Thiemann &lt;<a href=\"mailto:rene.thiemann@uibk.ac.at\">rene.thiemann@uibk.ac.at</a>&gt;<br>\nTracing is now disabled, both in the AFP development version and in the .tgz-version <br>\nfor Isabelle2012. You can download the new file at the same URL:</p>\n<p><a href=\"http://cl-informatik.uibk.ac.at/software/ceta/Datatype_Order_Generator.tgz\">http://cl-informatik.uibk.ac.at/software/ceta/Datatype_Order_Generator.tgz</a></p>\n<p>Cheers,<br>\nRené</p>",
        "id": 294227767,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660900848
    },
    {
        "content": "<p>From: René Neumann &lt;<a href=\"mailto:rene.neumann@in.tum.de\">rene.neumann@in.tum.de</a>&gt;<br>\nThanks :). Is it (btw) intended that the generated hashfunctions are not<br>\nautomatically marked as code-equations? At the moment I do:</p>\n<p>derive hashable com<br>\nlemmas[code] = hashcode_com_def bounded_hashcode_com_def<br>\ndef_hashmap_size_com_def</p>\n<ul>\n<li>René<br>\n<a href=\"/user_uploads/14278/BORllsDBBfyoIdnWYk2ViTOV/smime.p7s\">smime.p7s</a></li>\n</ul>",
        "id": 294227776,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660900854
    },
    {
        "content": "<p>From: René Thiemann &lt;<a href=\"mailto:rene.thiemann@uibk.ac.at\">rene.thiemann@uibk.ac.at</a>&gt;<br>\nHi Simon,</p>\n<blockquote>\n<p>The derive linorder works really well,</p>\n</blockquote>\n<p>Thanks.</p>\n<blockquote>\n<p>but I've come across an odd example<br>\nwhich doesn't work, namely:</p>\n<p>datatype vbasic = BoolI bool | ListI \"vbasic list\"<br>\nderive linorder vbasic</p>\n<p>Fails to prove. If I replace the bool with an int or remove the list<br>\nconstructor, it works fine. There seems to be an odd interaction between<br>\nbool and list. The following works fine:</p>\n<p>datatype vbasic = TrueI | FalseI | IntI \"int\" | ListI \"vbasic list\"</p>\n<p>Do you know what's causing this?</p>\n</blockquote>\n<p>I have figured out the problem, which was the simplification rule<br>\n\"less_bool_def\". Please try again by reloading the .tgz or checking out<br>\nthe latest development version of the AFP, since this rule is explicitly deleted<br>\nfor simplification in the tactics.</p>\n<p>However, I'm not completely sure why this simplification rule was so <br>\nharmful. In principle, I had to prove the lemma</p>\n<p>vbasic_rec (%x_0. vbasic_case (op &lt; x_0) (%y_0. True)) (%x_0. vbasic_case (%y_0. False)) (RecursiveI a) (RecursiveI b) ==&gt;<br>\nvbasic_rec (%x_0. vbasic_case (op &lt; x_0) (%y_0. True)) (%x_0. vbasic_case (%y_0. False)) a b</p>\n<p>which works via the \"tactic {* asm_full_simp_tac (simpset_of ctxt) 1 *}\".<br>\nHowever, when invoking this tactic within the larger ML tactic,<br>\nthen it happens that premise gets simplified to</p>\n<p>vbasic_rec (%x_0. vbasic_case (op &lt; x_0) (%y_0. True)) (%x_0. vbasic_case (%y_0. False)) a b</p>\n<p>(as expected), but then the proof goal is simplified further to </p>\n<p>vbasic_rec (%x_0. vbasic_case (op &amp; (~ x_0)) (%y_0. True)) (%x_0. vbasic_case (%y_0. False)) a b</p>\n<p>So the rule less_bool_def (x &lt; y == ~ x &amp; y) simplifies (op &lt; x_0) to (op &amp; (~ x_0)) <br>\nin the goal, but not in the premise. This is what I do not understand when calling <br>\nasm_full_simp_tac.</p>\n<p>Perhaps someone else can comment on this?</p>\n<p>Cheers,<br>\nRené</p>",
        "id": 294227817,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660900879
    },
    {
        "content": "<p>From: Brian Huffman &lt;<a href=\"mailto:huffman.brian.c@gmail.com\">huffman.brian.c@gmail.com</a>&gt;<br>\nPerhaps the occurrence of \"(op &lt; x_0)\" in the goal was eta-expanded,<br>\nwhile other occurrences were not. You should disable eta-contraction<br>\nin the pretty-printer to see whether this is the case.</p>\n<p>My general advice, when writing internal ML tactics, is to use<br>\nsimp_tac only with purpose-built simpsets. Usually I start with<br>\nHOL_basic_ss and add only the rules I need; I never use the simpset<br>\nfrom the current context, as the behavior is just too unpredictable.</p>\n<ul>\n<li>Brian</li>\n</ul>",
        "id": 294227956,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660900934
    },
    {
        "content": "<p>From: René Thiemann &lt;<a href=\"mailto:rene.thiemann@uibk.ac.at\">rene.thiemann@uibk.ac.at</a>&gt;<br>\nHi Brian,</p>\n<p>thanks for the hints. It is definitely a good idea to use special-purpose simpsets,<br>\nhowever, it is not clear to me, how this can be built, since I had difficulties to integrate simprocs, etc. which were essential for the simplication.</p>\n<p>E.g., in Orderings, </p>\n<p>add_simprocs [<br>\n       (\"antisym le\", [\"(x::'a::order) &lt;= y\"], prove_antisym_le),<br>\n       (\"antisym less\", [\"~ (x::'a::linorder) &lt; y\"], prove_antisym_less)<br>\n     ]</p>\n<p>is used to add the locally defined \"prove_antisym_le\"-simproc to the global simpset.</p>\n<p>It would be nice, if I can just add these simprocs to HOL_basic_ss, however I did not see a way to access them, so that afterwards I can add them via addsimprocs:</p>\n<ul>\n<li>\n<p>using <br>\n  simpset_of @{context} |&gt; dest_ss |&gt; #procs |&gt; List.find (fn a =&gt; fst a = \"antisym le\") <br>\n  delivers an entry, however of type string * cterm list and not string * simproc!</p>\n</li>\n<li>\n<p>using <br>\n  Simplifier.the_simproc @{context} \"antisym le\"<br>\n  would deliver a simproc as return type, but<br>\n  one gets an error message: Undefined simproc: \"antisym le\"</p>\n</li>\n<li>\n<p>so my current workaround is to use</p>\n<p>val my_starting_simpset = simpset_of @{context} <br>\n  delsimps (simpset_of @{context} |&gt; dest_ss |&gt; #simps |&gt; map snd) <br>\n  addsimps @{thms HOL.simp_thms}</p>\n<p>but I think this is not really a nice workaround.</p>\n</li>\n</ul>\n<p>Cheers,<br>\nRené</p>",
        "id": 294228001,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660900958
    }
]