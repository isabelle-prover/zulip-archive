[
    {
        "content": "<p>From: Till Mossakowski &lt;<a href=\"mailto:Till.Mossakowski@dfki.de\">Till.Mossakowski@dfki.de</a>&gt;<br>\nIs there a general heuristic (perhaps even implemented) what should<br>\nbe put into the Isabelle simplifier?  Of course, this cannot replace<br>\nmanual adpations; however, it could at least provide a good<br>\nstarting point.<br>\nA related question is: which kinds of loops are automatically<br>\ndetected by the simplifier already?<br>\nIs there work on using termination proof tools in this<br>\ncontext? Probably, commutativity rules would need to be<br>\nexcluded when fedding a termination checker, because Isabelle<br>\ncan handle them.</p>\n<p>Similar questions apply to the classical reasoner.</p>\n<p>Till Mossakowski</p>",
        "id": 294051933,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660819852
    },
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\nTill Mossakowski schrieb:</p>\n<blockquote>\n<p>Is there a general heuristic (perhaps even implemented) what should<br>\nbe put into the Isabelle simplifier?  Of course, this cannot replace<br>\nmanual adpations; however, it could at least provide a good<br>\nstarting point.</p>\n</blockquote>\n<p>Certainly nothing automated. And I would even have a hard time <br>\ndescribing my intuition.</p>\n<blockquote>\n<p>A related question is: which kinds of loops are automatically<br>\ndetected by the simplifier already?</p>\n</blockquote>\n<p>The loop test works on a rule by rule basis. Given P ==&gt; l = r it <br>\nrejects this orientation of the rule if</p>\n<ul>\n<li>there are extra variables in r not in l or P, or</li>\n<li>the head of l is a variable, or</li>\n<li>l occurs in r or P, or</li>\n<li>P is empty and l matches r, or</li>\n<li>l is a constant but r is not</li>\n</ul>\n<p>If the opposite orientation also fails, P ==&gt; (l=r) = True is added.</p>\n<blockquote>\n<p>Is there work on using termination proof tools in this<br>\ncontext? Probably, commutativity rules would need to be<br>\nexcluded when fedding a termination checker, because Isabelle<br>\ncan handle them.</p>\n</blockquote>\n<p>There is no such work. I suspect that trying to prove termination is <br>\nextremely hard and Isabelle specific. Detecting loops on the other hand <br>\nmay be valuable, in particular for novices.</p>\n<p>Tobias</p>",
        "id": 294051973,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660819875
    }
]