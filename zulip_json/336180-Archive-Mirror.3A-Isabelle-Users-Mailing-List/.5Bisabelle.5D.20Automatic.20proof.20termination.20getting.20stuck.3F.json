[
    {
        "content": "<p>From: Mark Wassell &lt;<a href=\"mailto:mpwassell@gmail.com\">mpwassell@gmail.com</a>&gt;<br>\nHello,</p>\n<p>I have a set of 6 mutually recursive functions and the attempt to prove<br>\ntermination with lexicographic order is not returning even after 30<br>\nminutes. If I reduce it back to 5 functions then it does (but not<br>\nimmediately; it takes about 10 minutes).</p>\n<p>Is there any tracing available for me to see what is happening or a timeout<br>\nthat I can set that will result in the matrix (possibly incomplete) being<br>\nshown?</p>\n<p>I could use the order it finds with the 5-function termination proof and<br>\nattempt to extend it to include the sixth one but the order is a product of<br>\nfour measures built out of &lt;<em>mlex</em>&gt; and case_sum, and it is tricky keeping<br>\ntrack of things and could be brittle when adding additional functions or<br>\nrecursive calls.</p>\n<p>Cheers</p>\n<p>Mark</p>",
        "id": 294748145,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661194354
    },
    {
        "content": "<p>From: Alexander Krauss &lt;<a href=\"mailto:krauss@in.tum.de\">krauss@in.tum.de</a>&gt;<br>\nHi Mark,</p>\n<blockquote>\n<p>I have a set of 6 mutually recursive functions and the attempt to prove<br>\ntermination with lexicographic order is not returning even after 30<br>\nminutes. If I reduce it back to 5 functions then it does (but not<br>\nimmediately; it takes about 10 minutes).</p>\n</blockquote>\n<p>The lexcographic_order method enumerates a set of possible candidates<br>\nfor measure functions. Unfortunately, if you have n mutually recursive<br>\nfunctions with k arguments each, then there are ~ k^n candidates, which<br>\nwill lead to ~ k^2n proof obligations being tried. This probably<br>\nexplains what you are seeing.</p>\n<p>I don't think there is any tracing that would help you here.</p>\n<p>Here are some options you might try:</p>\n<ul>\n<li>\n<p>Try the \"size_change\" method. It deals differently with mutual<br>\nrecursion, and IIRC it does not have the blowup problem. There may be<br>\nother issues, but it is worth a try.</p>\n</li>\n<li>\n<p>Come up with the termination argument yourself. Often, this is not so<br>\nhard even for complicated definitions.</p>\n</li>\n<li>\n<p>Simplify the definition (possibly deriving the original form afterwards).</p>\n</li>\n</ul>\n<blockquote>\n<p>I could use the order it finds with the 5-function termination proof and<br>\nattempt to extend it to include the sixth one but the order is a product of<br>\nfour measures built out of &lt;<em>mlex</em>&gt; and case_sum, and it is tricky keeping<br>\ntrack of things and could be brittle when adding additional functions or<br>\nrecursive calls.</p>\n</blockquote>\n<p>This sounds brittle indeed. Another way of making it more robust (though<br>\nquite verbose) would be to define 6 (mutually recursive) measure<br>\nfunctions, and using them for the termination argument. Then at least it<br>\nis clear how to extend it later...</p>\n<p>Hope this helps (a bit)</p>\n<p>Alex</p>",
        "id": 294748161,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661194360
    }
]