[
    {
        "content": "<p>From: Iulia Dragomir &lt;<a href=\"mailto:iulia.dragomir@aalto.fi\">iulia.dragomir@aalto.fi</a>&gt;<br>\nDear all,</p>\n<p>I have the following lemma within a theory:</p>\n<p>theory Test imports Main<br>\nbegin</p>\n<p>lemma lambda_true_top: \"f (λ x . True) = F top\"<br>\n  by (simp add: top_fun_def)</p>\n<p>end</p>\n<p>which I would like to use for lambda terms having different variables, like:<br>\nlemma \"F (λ (x,y) . True) = F top\" or<br>\nlemma \"F (λ (x,y, (z, t), a, (b, c, d)) . True) = F top\"</p>\n<p>Now, if I use it as substitution rule, the goal is identical to the<br>\nlemmas to be proved and if I try to add it as simplification rule, a<br>\nfailed application of proof method is raised.<br>\nHow can I use lambda_true_top in this proof? Or how can I write my<br>\noriginal lemma such that it can be used to simplify a term like F (λ<br>\n(x,y, (z, t), a, (b, c, d)) . True) to F top in general? In my case F is<br>\nalways a constant function.</p>\n<p>Thanks.</p>\n<p>Best regards,<br>\nIulia Dragomir</p>",
        "id": 294645434,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661163857
    },
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\nOn 26/06/2015 16:43, Iulia Dragomir wrote:</p>\n<blockquote>\n<p>Dear all,</p>\n<p>I have the following lemma within a theory:</p>\n<p>theory Test imports Main<br>\nbegin</p>\n<p>lemma lambda_true_top: \"f (λ x . True) = F top\"<br>\n   by (simp add: top_fun_def)</p>\n</blockquote>\n<p>I assume you mean the same f/F on both sides. This does not cover abstraction <br>\nover tuples, which is syntactic sugar for the combinator split :: \"('a ⇒ 'b ⇒ <br>\n'c) ⇒ 'a × 'b ⇒ 'c\". You also need</p>\n<p>lemma lambda_pair_true_top: \"f (λ (x,y) . True) = f top\"<br>\nby (simp add: split_def top_fun_def)</p>\n<p>However, the simplifier will not be able to use such rules, unless you <br>\ninstantiate the f with a concrete term.</p>\n<p>Tobias</p>\n<blockquote>\n<p>end</p>\n<p>which I would like to use for lambda terms having different variables, like:<br>\nlemma \"F (λ (x,y) . True) = F top\" or<br>\nlemma \"F (λ (x,y, (z, t), a, (b, c, d)) . True) = F top\"</p>\n</blockquote>\n<blockquote>\n<p>Now, if I use it as substitution rule, the goal is identical to the<br>\nlemmas to be proved and if I try to add it as simplification rule, a<br>\nfailed application of proof method is raised.<br>\nHow can I use lambda_true_top in this proof? Or how can I write my<br>\noriginal lemma such that it can be used to simplify a term like F (λ<br>\n(x,y, (z, t), a, (b, c, d)) . True) to F top in general? In my case F is<br>\nalways a constant function.</p>\n<p>Thanks.</p>\n<p>Best regards,<br>\nIulia Dragomir</p>\n<p><a href=\"/user_uploads/14278/fV-GpyZqAKbY5GuQ4hHKT09K/smime.p7s\">smime.p7s</a></p>\n</blockquote>",
        "id": 294645537,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661163903
    }
]