[
    {
        "content": "<p>From: \"David E. Narvaez\" &lt;<a href=\"mailto:den9562@rit.edu\">den9562@rit.edu</a>&gt;<br>\nHi,</p>\n<p>I have a structured proof that right now looks roughly like this:</p>\n<p>[...]<br>\n    case And_bool_expr<br>\n    then show ?thesis<br>\n      using assms<br>\n    proof (cases \"partial_val_bool_expr e2 a\", simp_all add: models_def)<br>\n      case (Const_bool_expr b)<br>\n      then show ?thesis using assms And_bool_expr  by (cases b, simp_all add: <br>\nmodels_def)<br>\n    qed<br>\n  next<br>\n    case Or_bool_expr<br>\n    then show ?thesis<br>\n      using assms<br>\n    proof (cases \"partial_val_bool_expr e2 a\", simp_all add: models_def)<br>\n      case (Const_bool_expr b)<br>\n      then show ?thesis using assms Or_bool_expr  by (cases b, simp_all add: <br>\nmodels_def)<br>\n    qed<br>\n  next<br>\n[...]</p>\n<p>and it goes on for about 6 cases. Instead of repeating these instructions, I <br>\nwant Isabelle to try the following for every case:</p>\n<p>case $casename<br>\n    then show ?thesis<br>\n      using assms<br>\n    proof (cases \"partial_val_bool_expr e2 a\", simp_all add: models_def)<br>\n      case (Const_bool_expr b)<br>\n      then show ?thesis using assms $casename  by (cases b, simp_all add: <br>\nmodels_def)<br>\n    qed</p>\n<p>and discharge those that work using this strategy so that I'm left with those <br>\nthat really need work.</p>\n<blockquote>\n<p>From what I understand, this is the kind of things Eisbach is supposed to be <br>\nfor, but Eisbach does not seem to be meant for structured proofs, am I <br>\ncorrect? If that is the case, then what tool could help me here? I have read <br>\nabout automation using ML but I cannot find much documentation about that, with <br>\nexamples of things that can automated using ML.</p>\n</blockquote>\n<p>Thanks!</p>",
        "id": 294721591,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661185008
    },
    {
        "content": "<p>From: <a href=\"mailto:Matthew.Brecknell@data61.csiro.au\">Matthew.Brecknell@data61.csiro.au</a><br>\nHi David,</p>\n<p>It ought to be possible to make an Eisbach method to solve the boring cases,<br>\nwhile keeping the structure of the overall proof. In that case, the overall<br>\nproof might look something like this:</p>\n<p>proof (induct ...)<br>\n  case (Interesting_bool_expr arg1 arg2)<br>\n  show ?case proof ... qed<br>\nnext<br>\n  case (AnotherInteresting_bool_expr arg1 arg2 arg3)<br>\n  show ?case proof ... qed<br>\nqed solve_boring_case+</p>\n<p>Note the \"solve_boring_case+\" <em>after</em> the \"qed\" to handle any cases not yet<br>\nproved in the \"proof\" block.</p>\n<p>The tricky part of making the Eisbach method will be obtaining bindings for<br>\nthe variables \"e2\", \"a\" and \"b\". For that, you might be able to use the<br>\n\"match\" method, also part of Eisbach. Perhaps something like this:</p>\n<p>method solve_boring_case =<br>\n  (match goal in ‹... e2 ... a ...› for e2 a<br>\n     ⇒ ‹cases \"partial_val_bool_expr e2 a\"; simp add: models_def;<br>\n          match goal in ‹... b ...› for b<br>\n            ⇒ ‹cases b; simp add: models_def››)</p>\n<p>You'll need to figure out what term patterns will allow you to correctly<br>\nidentify the right \"e2\", \"a\" and \"b\". You might need \"match premises\"<br>\ninstead of \"match goal\", and you might need to bind fact names to matched<br>\npremises to wire them into proof fragments (\"inner methods\" in Eisbach-match <br>\nterminology).</p>\n<p>Regards,<br>\nMatthew</p>",
        "id": 294721646,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661185028
    }
]