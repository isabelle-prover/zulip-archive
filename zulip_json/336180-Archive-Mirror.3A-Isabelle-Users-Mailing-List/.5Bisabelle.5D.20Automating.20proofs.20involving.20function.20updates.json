[
    {
        "content": "<p>From: Giuliano Losa &lt;<a href=\"mailto:giuliano.losa@epfl.ch\">giuliano.losa@epfl.ch</a>&gt;<br>\nHello,<br>\nI would like to automate some proofs that involve non-recursive data<br>\ntypes, records, and function updates.</p>\n<p>For example:</p>\n<p>typedecl T<br>\ndatatype B = Zero | One</p>\n<p>record R =<br>\n  f :: \"T ⇒ B\"</p>\n<p>lemma test:<br>\n  fixes r::R and x::T<br>\n  assumes \"f r x = Zero\"<br>\n  and \"r = r⦇f := (f r)(x := One)⦈\"<br>\n  shows False<br>\nproof -<br>\n  from assms(2) have \"f r x = ((f r)(x := One)) x\" by (cases r, simp)<br>\n  hence \"f r x = One\" by simp<br>\n  with assms(1) show ?thesis by simp<br>\nqed</p>\n<p>Is there an easy way to enable simp or auto to solve this kind of goal?<br>\nSledgehammer can solve this goal but fails as soon as the example gets a<br>\nlittle bigger.</p>\n<p>Thanks,<br>\nGiuliano</p>",
        "id": 294243332,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660907901
    },
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\nThe problem is that \"r = r...\" cannot be used as a rewrite rule because it would<br>\nnot terminate. The simplifier recognises that and ignores that rule. However,<br>\nyou can apply it by hand via \"subst\". Here is your proof in compact form:</p>\n<p>proof -<br>\n  from assms(1) show False<br>\n    apply(subst (asm) assms(2))<br>\n    by simp<br>\nqed</p>\n<p>This is not automate matters but may help you a little.</p>\n<p>Something else that may help is to turn equalities between records into<br>\nequalities between fields. In your case the lemma</p>\n<p>lemma R_ext: \"((r1::R) = r2) = (f r1 = f r2)\"<br>\nby auto</p>\n<p>can be given to the simplifier and turns your second assumption into</p>\n<p>f r = (f r)(x := One)</p>\n<p>and lemma fun_eq_iff can lower that one step further. But the difficulty remains<br>\nthat you may have recursive equations that the simplifier will not use.</p>\n<p>I suspect that your problem is actually automatable but requires more work at<br>\nthe ML level.</p>\n<p>Tobias</p>",
        "id": 294243368,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660907919
    }
]