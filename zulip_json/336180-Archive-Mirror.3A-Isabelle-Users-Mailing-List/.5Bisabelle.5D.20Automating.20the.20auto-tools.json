[
    {
        "content": "<p>From: Gottfried Barrow &lt;<a href=\"mailto:gottfried.barrow@gmx.com\">gottfried.barrow@gmx.com</a>&gt;<br>\nI'm in jEdit, so I first open up a second view of jEdit with \"View/New <br>\nView\".</p>\n<p>I have a theorem:</p>\n<p>theorem emS_is_unique1:<br>\n   \"!u. (!x. ~(x IN u)) --&gt; u EQ emS\"</p>\n<p>I highlight it, and run my script. It creates a new file which imports <br>\nmy main file, like this:</p>\n<p>theory sTs_Simp_X<br>\nimports sTs_Simp<br>\nbegin</p>\n<p>theorem emS_is_unique1_S:<br>\n   \"!u. (!x. ~(x IN u)) --&gt; u EQ emS\"<br>\n   apply(auto) sledgehammer<br>\n   nitpick[sat_solver=MiniSat_JNI]<br>\n   nitpick[sat_solver=SAT4J]<br>\n   oops</p>\n<p>theorem emS_is_unique1_Sn:<br>\n   \"~(!u. (!x. ~(x IN u)) --&gt; u EQ emS)\"<br>\n   apply(auto) sledgehammer<br>\n   nitpick[sat_solver=MiniSat_JNI]<br>\n   nitpick[sat_solver=SAT4J]<br>\n   oops<br>\nend</p>\n<p>It's importing all my nitpick and sledgehammer settings from the main file.</p>\n<p>It runs sledgehammer and nitpick on the theorem and its negation. It <br>\ntakes a while, that's why I have the two jEdit views. I watch sTs_Simp_X <br>\nin one jEdit view and can work on sTs_Simp in the other.</p>\n<p>The continuous prover works on sTs_Simp_X while I'm working on sTs_Simp. <br>\nOf course, if I do a save on my main file, the auto-provers start over <br>\nin sTs_Simp_X, which is why I try to leave it alone, but that's hard to <br>\ndo. I want to click around in sTs_Simp_X to see if anything is <br>\nhappening. I reduce the 20 provers down to e, spass, and z3, to speed <br>\nthings up; I'll probably put more back in.</p>\n<p>I haven't completely figured out how the continuous prover works. In a <br>\nbig file, it sometimes seems to go into a dormant state if I don't go <br>\nall the way to the bottom and click on the line where the \"end\" <br>\nstatement is.</p>\n<p>I would attach the script, but it's done in a scripting language for <br>\nWinEdt. jEdit has a scripting language, but I don't know how to use it <br>\nexcept for very simple macros for key sequences.</p>\n<p>I now return to the drudgery of tutorials and exercises.</p>\n<p>Regards,<br>\nGB</p>",
        "id": 294216709,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660895273
    },
    {
        "content": "<p>From: Gottfried Barrow &lt;<a href=\"mailto:gottfried.barrow@gmx.com\">gottfried.barrow@gmx.com</a>&gt;<br>\nYou'd actually want this:</p>\n<p>nitpick[sat_solver=MiniSat_JNI]<br>\n   nitpick[sat_solver=SAT4J]<br>\n   apply(auto)<br>\n   sledgehammer</p>\n<p>Instead of this:</p>\n<p>apply(auto)<br>\n   sledgehammer<br>\n   nitpick[sat_solver=MiniSat_JNI]<br>\n   nitpick[sat_solver=SAT4J]</p>\n<p>Since nitpick would only work on the subgoal after the apply(auto).</p>\n<p>Regards,<br>\nGB</p>",
        "id": 294216716,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660895278
    },
    {
        "content": "<p>From: Lars Noschinski &lt;<a href=\"mailto:noschinl@in.tum.de\">noschinl@in.tum.de</a>&gt;<br>\nIt should process more or less to the point where you are looking at in <br>\nthe editor. This saves a lot of computing effort, when you are editing <br>\nsomething in the middle of a big theory -- otherwise the cpu would <br>\nconstantly be spinning, heating up your computer and wasting your <br>\nbattery power.</p>\n<p>-- Lars</p>",
        "id": 294216758,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660895294
    },
    {
        "content": "<p>From: Gottfried Barrow &lt;<a href=\"mailto:gottfried.barrow@gmx.com\">gottfried.barrow@gmx.com</a>&gt;<br>\nOkay. I guess the general rule is that if some code can be seen in a <br>\njEdit view, then the continuous prover will work on the file up to that <br>\npoint.</p>\n<p>To belabor the point, I suppose if I had 10 jEdit views open of 10 <br>\ndifferent .thy files, the continuous prover would try to work on all of <br>\nthem up to the code that could be seen in each view.</p>\n<p>That's how it appears. I re-generate the tester file from the theorem. I <br>\nclick back on the jEdit view which has my main file. jEdit asks me if I <br>\nwant to reload the re-generated file. I say yes, and the re-generated <br>\ntester file gets reloaded in both jEdit windows, and the continuous <br>\nprover starts working away on the view that shows it. All of the code <br>\nfor the tester file can be seen, so the continuous prover works until it <br>\ngets to the end.</p>\n<p>I broke the two tester theorems into four: Sledgehammer on the theorem. <br>\nNitpick on the theorem. Nitpick on the negation. Sledgehammer on the <br>\nnegation.</p>\n<p>LEARNING BY ACCIDENT WITH AUTO-TOOLS</p>\n<p>By accident, I found out that importing my complete file will allow <br>\nSledgehammer and Nitpick to find things they otherwise couldn't find, <br>\nwhich makes sense to do for the purposes of trying to find inconsistencies.</p>\n<p>Being back in my original file, rather than a simplified version for <br>\nexperimenting, I had the incorrect axiom uncommented out,</p>\n<p>(x IN u &lt;-&gt; x IN v) --&gt; u = v,</p>\n<p>instead of the commented correct version,</p>\n<p>!u. !v. (!x. x IN u &lt;-&gt; x IN v) --&gt; u = v</p>\n<p>In my main file, I have the theorem stated before another axiom because <br>\nI don't want the axiom to be used to prove the theorem.</p>\n<p>Well, in my tester file, where the negation of the theorem is being <br>\ntested by Nitpick and Sledgehammer, spass and e found proofs for the <br>\nnegation using my additional axiom, though yices and Z3 didn't.</p>\n<p>Lesson? Axioms. You don't want them, which has been addressed. If you <br>\nuse them, be afraid. Very afraid.</p>\n<p>Additional lesson? I want to put back in some of those provers to see <br>\nwho can find the inconsistency and who can't.</p>\n<p>The prover e tells me:</p>\n<p>\"The prover found a type-unsound proof ... even though a supposedly <br>\ntype-sound encoding was used (or, less likely, your axioms are <br>\ninconsistent). Please report this to the Isabelle developers.\"</p>\n<p>We understand that Jasmin or another develop had his peers in mind when <br>\nhe said, \"or, less likely, your axioms are inconsistent\".</p>\n<p>I choose the spass metis theorem. After inserting it, in the output <br>\nwindow, it tells me \"Metis: the assumptions are inconsistent\".</p>\n<p>I comment out the wrong formula and un-comment the right formula. The <br>\ntheorem is proved, and nothing else shows up wrong at this point.</p>\n<p>Sledgehammer or Nitpick completing their attempts is slowest when I try <br>\nto disprove what's true, and try to prove what's not true.</p>\n<p>Of course, I have the timeouts for both set to 120 seconds.</p>\n<p>I need to experiment on Linux under VirtualBox to see what kind of <br>\nperformance I get. I dread setting it all up, and that kind of setup <br>\nisn't totally trouble free either.</p>\n<p>Regards,<br>\nGB</p>",
        "id": 294216767,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660895303
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nYes.  It also means that a lot of editor views on different spots in some <br>\nlibrary can cost a lot of performance for continous checking.</p>\n<p>You can also control the range of checking a little bit: the Prover <br>\nSession panel has a \"Check\" button, which tells to prover to check the <br>\nwhole of the current buffer, until you \"Cancel\" or recommence normal <br>\nediting.</p>\n<p>Makarius</p>",
        "id": 294216804,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660895333
    },
    {
        "content": "<p>From: Gottfried Barrow &lt;<a href=\"mailto:gottfried.barrow@gmx.com\">gottfried.barrow@gmx.com</a>&gt;<br>\nWith a 480 second timeout, these are provers which found the <br>\ninconsistency due to the trivial mistake in the axiom:</p>\n<p>e<br>\nmetis<br>\nspass<br>\nspass_new<br>\nz3_tptp<br>\nremote_e_sine<br>\nremote_iprover<br>\nremote_iprover_eq<br>\nremote_leo2<br>\nremote_satallax<br>\nremote_vampire</p>\n<p>Of note is that z3_tptp found it but not z3. Note to self: Leave z3_tptp in.</p>\n<p>Provers that attempted it:</p>\n<p>metis smt dummy_thf e spass spass_new spass_old<br>\nz3_tptp cvc3 yices z3 remote_e_sine remote_e_tofof<br>\nremote_iprover remote_iprover_eq remote_leo2 remote_satallax<br>\nremote_snark remote_vampire remote_waldmeister</p>\n<p>Note to self: Put the remote provers in that were successful. They <br>\nshouldn't add too much of a burden on my CPU.</p>\n<p>With a 480 second timeout, the right axiom in, and me waiting much <br>\nlonger than 480 seconds, sledgehammer didn't find a proof for the <br>\nnegated theorem.</p>\n<p>I ran with a 480 second timeout, with these provers:</p>\n<p>e metis spass spass_new z3 z3_tptp remote_e_sine remote_iprover<br>\n   remote_iprover_eq remote_leo2 remote_satallax remote_vampire</p>\n<p>At 480 seconds, e, metis, spass, and spass_new timed out. They had all <br>\nbeen sucking up 25% of my CPU processing. At that point z3 kicked in <br>\nusing 25% of my CPU until it got an error after 2 minutes. Sledgehammer <br>\nwas still running, so I figured it was waiting on the remote provers to <br>\nsignal that they had timed out after 480 seconds of processing, which, <br>\nit appears, was going to be spread out over however many minutes it <br>\nwould take for me to get my 480 seconds of processing, the remote <br>\nservers also trying to prove theorems for the rest of the world, trying <br>\nin vain, at least for the negation of mine, I hope.</p>\n<p>And those prover processes don't terminate very well. You have to help <br>\nthem out, and kill them sometimes. For Windows, it helps to have the <br>\nprocess explorer utility:</p>\n<p><a href=\"http://technet.microsoft.com/en-us/sysinternals/bb896653.aspx\">http://technet.microsoft.com/en-us/sysinternals/bb896653.aspx</a></p>\n<p>However, killing them seems to cause problems, so I think it's best to <br>\nlet them terminate normally.</p>\n<p>I learned something important here. Every prover's going to get its 480 <br>\nseconds to try and do something.</p>\n<p>But every time I do a keystroke in a file that the tester file is <br>\nimporting, the continuous prover starts over, so I need to change my <br>\nscript to accommodate for that.</p>\n<p>Regards,<br>\nGB</p>",
        "id": 294216813,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660895340
    },
    {
        "content": "<p>From: Gottfried Barrow &lt;<a href=\"mailto:gottfried.barrow@gmx.com\">gottfried.barrow@gmx.com</a>&gt;<br>\nI'm not editing big files yet, although they've become big enough that I <br>\ntry not to do a save on a file in my other editor, or jEdit will reload <br>\nthe whole thing and prove it all from the top.</p>\n<p>I'll try to remember the check button, but I forsee building up theories <br>\nhierarchically so I can build the heap for what I'm doing. For anything <br>\nthat's in the heap, speed's not a problem, as far as I can tell. Speed <br>\nproblems for sessions in src/HOL went away after I built the heap for them.</p>\n<p>The way you have things working is not a problem with me. I've started <br>\nto use 2 views as my standard setup. The edits stay in sync, and the <br>\nprover for the two views is the same prover.</p>\n<p>Any keystroke in a file that my test file imports causes the prover to <br>\nstart over in that file, but I now create a copy of my working file for <br>\nmy tester file to import, so that doesn't happen.</p>\n<p>The continuous prover works good for me. I don't have any longing for <br>\nmanually stepping through a theory like in PG, but I have decently fast <br>\ncomputer. It's not extraordinarily fast. It's an i3 with 16GB of ram.</p>\n<p>Regards,<br>\nGB</p>",
        "id": 294216827,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660895345
    }
]