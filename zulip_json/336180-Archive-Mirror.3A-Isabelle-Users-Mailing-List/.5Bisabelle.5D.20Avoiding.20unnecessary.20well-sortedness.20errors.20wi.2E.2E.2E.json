[
    {
        "content": "<p>From: Dominic Mulligan via Cl-isabelle-users &lt;<a href=\"mailto:cl-isabelle-users@lists.cam.ac.uk\">cl-isabelle-users@lists.cam.ac.uk</a>&gt;<br>\nHi,</p>\n<p>I have a HOL function that branches on whether an element is within<br>\nthe domain of a map, like so:</p>\n<p>...<br>\n  if name ∉ dom G then Some (Γ, G(name ↦ fdef)) else None<br>\n...</p>\n<p>For testing and amusement purposes, I want to extract this code to<br>\nSML.  However, trying to run export_code on this function produces a<br>\nwell-sortedness error, as the type of name (a string) is not of sort<br>\nenum.  Yet, it is easy to see that x ∉ dom G ⟷ G x = None:</p>\n<p>lemma foo:<br>\n  shows \"x ∉ dom G ⟷ G x = None\"<br>\n    by auto</p>\n<p>and replacing the test of the if-then-else with the following:</p>\n<p>...<br>\n  if G name = None then Some (Γ, G(name ↦ fdef)) else None<br>\n...</p>\n<p>means I can now extract code to SML just fine, avoiding these<br>\nwell-sortedness errors.</p>\n<p>More generally, suppose we are working with a type of enum sort, so<br>\nthat extraction of my original if-then-else succeeds.  It seems in<br>\nthis case that the code generator is creating very inefficient code<br>\nthat tries to enumerate and test every possible value of the domain<br>\ntype, rather than simply performing a single test using the fact<br>\nabove, which would be much more computationally efficient.</p>\n<p>By marking foo above as a [code_unfold], both of these problems go<br>\naway, and you get efficient code extracted no matter whether you're<br>\nworking with types of sort enum, or not.  Is there any reason not to<br>\ninclude this code_unfold lemma by default in the Isabelle library?</p>\n<p>Thanks,<br>\nDom</p>",
        "id": 294711485,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661182339
    },
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\nThe general lemma that should be used for code generation is</p>\n<p>\"a ∈ dom m ⟷ m a ≠ None\"</p>\n<p>This lemma is already in the library under the name domIff and I believe it <br>\nshould indeed be used for code generation. I leave it to a code generation <br>\nexpert to decide if [code_unfold] is the right attribuet (I believe it is) and <br>\nto make this change in the library.</p>\n<p>Thanks for pointing this out.</p>\n<p>Tobias<br>\n<a href=\"/user_uploads/14278/Ph1OL-KD8DoK7yYL3UmT26NC/smime.p7s\">smime.p7s</a></p>",
        "id": 294711505,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661182346
    },
    {
        "content": "<p>From: Florian Haftmann &lt;<a href=\"mailto:florian.haftmann@informatik.tu-muenchen.de\">florian.haftmann@informatik.tu-muenchen.de</a>&gt;<br>\nSee now <a href=\"http://isabelle.in.tum.de/repos/isabelle/rev/2f7d39285a1a\">http://isabelle.in.tum.de/repos/isabelle/rev/2f7d39285a1a</a></p>\n<p>Florian<br>\n<a href=\"/user_uploads/14278/vqIWZovvF0V8LZo_V-p9elQs/signature.asc\">signature.asc</a></p>",
        "id": 294712379,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661182603
    }
]