[
    {
        "content": "<p>From: Jens Doll &lt;<a href=\"mailto:jd@cococo.de\">jd@cococo.de</a>&gt;<br>\nThe paper about Babel is written esthetically and inspiring, but lacks <br>\ndeeper insight:</p>\n<p>a) a functional language should not make use of ancient constructs like <br>\n\"while\" and \"for\", use iterators instead<br>\nb) the example on The GCD might be incomplete, pls. have a look</p>\n<p>Thanks for the input,<br>\nJens</p>",
        "id": 294078337,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660829768
    },
    {
        "content": "<p>From: Steven Obua &lt;<a href=\"mailto:obua@wjpserver.cs.uni-sb.de\">obua@wjpserver.cs.uni-sb.de</a>&gt;<br>\nOn Jun 17, 2009, at 7:29 AM, Jens Doll wrote:</p>\n<blockquote>\n<p>The paper about Babel is written esthetically and inspiring, but lacks<br>\ndeeper insight:</p>\n<p>a) a functional language should not make use of ancient constructs  <br>\nlike<br>\n\"while\" and \"for\", use iterators instead</p>\n</blockquote>\n<p>Actually for-do uses iterators. I don't see why the programmer should  <br>\nbe burdened with adhering to the iterator protocol, the language can  <br>\ndo that for you. I am just lazy, probably an ancient habit.</p>\n<blockquote>\n<p>b) the example on The GCD might be incomplete, pls. have a look</p>\n</blockquote>\n<p>It is complete. But it just defines a function gcd, so when you run  <br>\nit, you will need to provide an expression that uses this function. Try:</p>\n<p>fun gcd (a, b) =<br>\n   while b != 0 do<br>\n     b = a % b,<br>\n     a = b<br>\n   end;<br>\n   a;</p>\n<p>gcd (120, 35)</p>\n<p>Steven</p>",
        "id": 294078387,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660829793
    }
]