[
    {
        "content": "<p>From: Jeremy Dawson &lt;<a href=\"mailto:jlcaadawson@netspeed.com.au\">jlcaadawson@netspeed.com.au</a>&gt;<br>\nBecause of exactly this situation some years ago I enquired if it could <br>\nbe possible to turn off higher order unification (ie, leaving <br>\nfirst-order unification), so then one could simply use arg_cong2<br>\n(which would in effect look like<br>\n... ==&gt; app (app f a) c = ..., so would unify unambiguously with your goal)</p>\n<p>Jeremy</p>",
        "id": 294136037,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660844360
    },
    {
        "content": "<p>From: Peter Lammich &lt;<a href=\"mailto:peter.lammich@uni-muenster.de\">peter.lammich@uni-muenster.de</a>&gt;<br>\nHi all,</p>\n<p>I have a goal of the form:<br>\n  I a b ==&gt; I a' b'</p>\n<p>how to transform this goal into<br>\n    a=a' &amp;&amp;&amp; b=b'<br>\nwhich can (in my case) be easily solved by auto.<br>\nOptimal would be a proof like this:<br>\n    by (auto {intro,elim,dest,simp}: some_rule)</p>\n<p>I tried to find an adequate rule via find_thms, but had no success.</p>\n<p>Best,<br>\n  Peter</p>",
        "id": 294136697,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660844549
    },
    {
        "content": "<p>From: Lars Noschinski &lt;<a href=\"mailto:noschinl@in.tum.de\">noschinl@in.tum.de</a>&gt;<br>\nHave a look at the rules app_cong and app_cong2. You may need to <br>\ninstantiate them first.</p>\n<p>-- Lars</p>",
        "id": 294136856,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660844617
    },
    {
        "content": "<p>From: Peter Lammich &lt;<a href=\"mailto:peter.lammich@uni-muenster.de\">peter.lammich@uni-muenster.de</a>&gt;<br>\nProbably, you mean arg_cong and arg_cong2 ??? A theorem named app_cong <br>\ndoes not exist.</p>\n<p>An<br>\n    apply (subst arg_cong2[where f=I]) by auto<br>\ndoes the job, but introduces some odd-looking schematic variables in <br>\nbetween.</p>\n<p>Thanks<br>\n  Peter</p>\n<p>Lars Noschinski schrieb:</p>",
        "id": 294137084,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660844684
    },
    {
        "content": "<p>From: Lars Noschinski &lt;<a href=\"mailto:noschinl@in.tum.de\">noschinl@in.tum.de</a>&gt;<br>\nOn 03.05.2011 15:58, Peter Lammich wrote:</p>\n<blockquote>\n<p>Probably, you mean arg_cong and arg_cong2 ??? A theorem named app_cong<br>\ndoes not exist.</p>\n</blockquote>\n<p>Yes, sorry.</p>\n<blockquote>\n<p>An<br>\napply (subst arg_cong2[where f=I]) by auto<br>\ndoes the job, but introduces some odd-looking schematic variables in<br>\nbetween.</p>\n</blockquote>\n<p>In your case, this rule is more suitable as an introduction rule, i.e.</p>\n<p>by (rule arg_cong2[where f=I]) auto</p>\n<p>-- Lars</p>",
        "id": 294137254,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660844752
    },
    {
        "content": "<p>From: Peter Lammich &lt;<a href=\"mailto:peter.lammich@uni-muenster.de\">peter.lammich@uni-muenster.de</a>&gt;<br>\nThis does not work.<br>\n  thm arg_cong2[where f=I]<br>\nyields<br>\n  [|?a = ?b; ?c = ?d|] ==&gt; I ?a ?c = I ?b ?d</p>\n<p>and the conclusion of this rule (topmost operator is =) does not unify<br>\nwith \"I a' b'\", so you cannot use it as introduction rule.<br>\nIndeed, apply (rule arg_cong2[where f=I]) fails.<br>\nHowever, a (lengthy)<br>\n    apply (erule rev_iffD2[OF _ arg_cong2[where f=I]])<br>\ndoes the job, and yields a'=a &amp;&amp;&amp; b'=b</p>\n<p>I have defined a shortcut for rev_iffD2[OF _ arg_cong2], and use this.</p>\n<p>Best and thanks again,<br>\n  Peter</p>",
        "id": 294137440,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660844805
    }
]