[
    {
        "content": "<p>From: Jason Dagit &lt;<a href=\"mailto:dagitj@gmail.com\">dagitj@gmail.com</a>&gt;<br>\nHello,</p>\n<p>I'm still very new to isabelle and I've been following the standard tutorial<br>\nfrom the isabelle website.</p>\n<p>I was practicing proofs using my own definitions of rev and length.</p>\n<p>Here is my theory:</p>\n<p>\\begin{code}<br>\ntheory RevLength<br>\nimports Datatype</p>\n<p>begin</p>\n<p>datatype 'a list = Nil (\"[]\")<br>\n                 | Cons 'a \"'a list\" (infixr \"#\" 65)</p>\n<p>primrec app :: \"'a list =&gt; 'a list =&gt; 'a list\" (infixr \"++\" 65)<br>\nwhere<br>\n\"[] ++ ys       = ys\" |<br>\n\"(x # xs) ++ ys = x # (xs ++ ys)\"</p>\n<p>primrec rev :: \"'a list =&gt; 'a list\" where<br>\n\"rev []       = []\" |<br>\n\"rev (x # xs) = (rev xs) ++ (x # [])\"</p>\n<p>primrec length :: \"'a list =&gt; nat\" where<br>\n\"length [] = 0\" |<br>\n\"length (x # xs) = 1 + length xs\"</p>\n<p>lemma length_suc: \"Suc (length list) = length (list ++ a # [])\"<br>\napply(induct_tac list)<br>\napply(auto)<br>\ndone</p>\n<p>lemma \"length xs = length (rev xs)\"<br>\napply(induct_tac xs)<br>\napply(simp, simp)<br>\napply(rule length_suc)<br>\ndone</p>\n<p>lemma \"length (rev xs) = length xs\"<br>\napply(induct_tac xs)<br>\napply(simp, simp)<br>\noops<br>\n(* apply(simp add: length_suc)<br>\ndone *)<br>\n\\end{code}</p>\n<p>What I noticed was that between the last two lemmas, the direction of the<br>\nequality makes a huge difference when proving the lemma.  The lemma \"length<br>\nxs = length (rev xs)\" is easy to prove but lemma \"length (rev xs) = length<br>\nxs\" is much harder to prove (for me at least).</p>\n<p>I thought that maybe it was because the induction variable was inside a<br>\nfunction call on the LHS, but one of the first examples of induction in the<br>\ntutorial is theorem rev_rev[simp]: \"(rev (rev xs)) = xs\", which is easily<br>\nproven by induction on xs followed by auto.</p>\n<p>I would expect \"=\" to be symmetric.  Is that not the case?  Is there<br>\nsomething else going on here?</p>\n<p>On a side note, I tried to define Cons as \":\" instead of \"#\", but I kept<br>\ngetting ambiguous parses.  Why is that?  \":\" doesn't seem to be used in the<br>\ngrammar that I've seen thus far in the tutorial, but it's also a hard thing<br>\nto search for.</p>\n<p>Thanks,<br>\nJason</p>",
        "id": 294124358,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660840827
    },
    {
        "content": "<p>From: Lars Noschinski &lt;<a href=\"mailto:noschinl@in.tum.de\">noschinl@in.tum.de</a>&gt;<br>\nOn 13.12.2010 05:58, Jason Dagit wrote:</p>\n<blockquote>\n<p>lemma length_suc: \"Suc (length list) = length (list ++ a # [])\"<br>\napply(induct_tac list)<br>\napply(auto)<br>\ndone<br>\n[...]<br>\nlemma \"length (rev xs) = length xs\"<br>\napply(induct_tac xs)<br>\napply(simp, simp)<br>\noops<br>\n(* apply(simp add: length_suc)<br>\ndone *)<br>\n\\end{code}</p>\n<p>What I noticed was that between the last two lemmas, the direction of the<br>\nequality makes a huge difference when proving the lemma.  The lemma\"length<br>\nxs = length (rev xs)\" is easy to prove but lemma \"length (rev xs) =length<br>\nxs\" is much harder to prove (for me at least).</p>\n</blockquote>\n<p>You don't need to prove this for yourself. If you name the second lemma <br>\ne.g. rev_length, then the third lemma is just rev_length[symmetric].</p>\n<blockquote>\n<p>I would expect \"=\" to be symmetric.  Is that not the case?  Is there<br>\nsomething else going on here?</p>\n</blockquote>\n<p>The simplifier applies equalities only from left to right. In your case <br>\nthe problem is the formulation of length_suc: The right hand side <br>\ncontains a variable which does not occur on the left hand side, so the <br>\nsimplifier does not apply this rule, as it does not know how to <br>\ninstantiate this variable.</p>\n<p>A proof easily succeeds by</p>\n<p>apply(simp add: length_suc[symmetric])</p>\n<p>but I suggest you change the definition of length suc. As a rule of <br>\nthumb, rules to be used by the simplifier should be \"simpler\" on the <br>\nright hand side than on the left hand side.</p>\n<p>-- Lars</p>",
        "id": 294124405,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660840843
    },
    {
        "content": "<p>From: Brian Huffman &lt;<a href=\"mailto:brianh@cs.pdx.edu\">brianh@cs.pdx.edu</a>&gt;<br>\nOn Sun, Dec 12, 2010 at 11:10 PM, Lars Noschinski &lt;<a href=\"mailto:noschinl@in.tum.de\">noschinl@in.tum.de</a>&gt; wrote:</p>\n<blockquote>\n<p>On 13.12.2010 05:58, Jason Dagit wrote:</p>\n<blockquote>\n<p>What I noticed was that between the last two lemmas, the direction of the<br>\nequality makes a huge difference when proving the lemma.  The lemma\"length<br>\nxs = length (rev xs)\" is easy to prove but lemma \"length (rev xs) =length<br>\nxs\" is much harder to prove (for me at least).<br>\n[...]<br>\nI would expect \"=\" to be symmetric.  Is that not the case?  Is there<br>\nsomething else going on here?</p>\n</blockquote>\n<p>The simplifier applies equalities only from left to right. In your case the<br>\nproblem is the formulation of length_suc: The right hand side contains a<br>\nvariable which does not occur on the left hand side, so the simplifier does<br>\nnot apply this rule, as it does not know how to instantiate this variable.</p>\n</blockquote>\n<p>Another thing to remember about the simplifier: It uses the<br>\nassumptions of the current subgoal as rewrite rules. And as always, it<br>\nonly uses equalities left-to-right.</p>\n<p>So in your proof script:</p>\n<p>lemma \"length (rev xs) = length xs\"<br>\napply(induct_tac xs)<br>\napply (simp, simp)</p>\n<p>you now have the following subgoal:</p>\n<p>goal (1 subgoal):</p>\n<ol>\n<li>⋀a list.<br>\n       length (rev list) = length list ⟹<br>\n       length (rev list ++ a # []) = Suc (length list)</li>\n</ol>\n<p>Here the simplifier would replace any occurrences of \"length (rev<br>\nlist)\" in the conclusion with \"length list\", except that \"length (rev<br>\nlist)\" does not appear in the conclusion, so the inductive hypothesis<br>\ndoes not get used by the simplifier.</p>\n<ul>\n<li>Brian</li>\n</ul>",
        "id": 294124422,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660840851
    }
]