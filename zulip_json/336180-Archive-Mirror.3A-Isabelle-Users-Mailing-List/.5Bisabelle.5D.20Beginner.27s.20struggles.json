[
    {
        "content": "<p>From: Ian Lynagh &lt;<a href=\"mailto:igloo@earth.li\">igloo@earth.li</a>&gt;<br>\nHi all,</p>\n<p>Here are some of the things I have been struggling with as an Isabelle<br>\ncomplete beginner (but with a some knowledge of coq). I hope you will<br>\nfind this useful in improving the Isabelle language and/or docs.</p>\n<p>I have \"(Isabelle2009-1: December 2009)\".</p>\n<p>How does Isabelle know how much to process when I click the \"Process the<br>\nnext proof command\" in Proof-General? In coq this is nice and simple: It<br>\nprocesses up to the next \".\" (that's actually a slight simplification,<br>\nbut that's not relevant here). With Isabelle, I'm not really sure what<br>\nhappens. If I have this source:</p>\n<p>theory Test<br>\n    imports Main<br>\n    begin</p>\n<p>lemma \"A &amp; B ==&gt; B &amp; A\"<br>\n    proof</p>\n<p>and I have processed up to, but not including, \"proof\", then pressing<br>\nthe arrow processes \"proof\" and succeeds. But if I also write \"foo\"<br>\nafter \"proof\", even with some whitespace:</p>\n<p>theory Test<br>\n    imports Main<br>\n    begin</p>\n<p>lemma \"A &amp; B ==&gt; B &amp; A\"<br>\n    proof</p>\n<p>foo</p>\n<p>Isabelle says</p>\n<p>*** Unknown proof method: \"foo\"<br>\n    *** At command \"proof\".</p>\n<p>and if I had put a \".\" after \"proof\"</p>\n<p>theory Test<br>\n    imports Main<br>\n    begin</p>\n<p>lemma \"A &amp; B ==&gt; B &amp; A\"<br>\n    proof.</p>\n<p>then now the \"lemma\" line fails with</p>\n<p>*** Outer syntax error: end of input expected,<br>\n    *** but command proof was found</p>\n<p>I can't emphasise enough just how thoroughly confused I am by this.<br>\n===================================================================</p>\n<p>It also makes Isabelle hard to use for me. My coq scripts generally look<br>\nlike:<br>\n    &lt;valid proof that I've finished&gt;.<br>\n    &lt;the line I'm working on&gt;.<br>\n    &lt;invalid stuff, alternate possibilities for the next line, etc&gt;<br>\nand the invalid stuff, coming after a \".\", doesn't interfere with my<br>\nwork on the current line. I have to keep fiddling with comments to do<br>\nthis in Isabelle.</p>\n<p>How does one write a comment in Isabelle? If I search for \"comment\" in<br>\ntutorial.pdf then the first real mention is on p67(p57), in the<br>\n\"Document Preparation\" section. Three pages later, in the same section,<br>\nsays<br>\n    Isabelle source comments, which are of the form (* ... *)<br>\nand as far as I can see this is the only mention in the document - a<br>\nsection I didn't look at, as I wasn't concerned with making PDFs at this<br>\nstage. \"comments\" is also not in the index; I would never have thought<br>\nto look up \"source comments\". I would expect to be told what comments<br>\nlook like around p14-15(p4-5).</p>\n<p>Am I right in thinking that \"--\" does not start a comment in a source<br>\nfile? Because while trying to copy/paste/run this example:<br>\n    lemma assumes P: \"! x. P x\" shows \"! x. P(f x)\"<br>\n    proof                     -- allI: (!! x. ?P x) = ! x. ?P x<br>\n      fix a<br>\n      from P show \"P(f a)\" .. -- allE : [[ x. ?P x; ?P ?x = ?R ]] = ?R<br>\n    qed<br>\nfrom p9 of isar-overview.pdf I certainly assumed that it did. Having to<br>\nlook up the ASCII names of the symbols is annoying enough; why not use<br>\nIsabelle comment syntax when putting comments in the middle of example<br>\nIsabelle code?</p>\n<p>I was very surprised to not find Isabelle packaged in Debian. This was a<br>\nsignificant factor in me not also trying Isabelle about 2 years ago, when<br>\nI started with coq, and if coq's Czar showed more signs of life I would<br>\nnot have considered trying Isabelle. I am sad to see in<br>\n<a href=\"http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=494491\">http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=494491</a><br>\nthat this seems to be deliberate.</p>\n<p>Thanks for reading, and I hope you found this useful.</p>\n<p>Thanks<br>\nIan</p>",
        "id": 294114410,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660837822
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nOn Sat, 14 Aug 2010, Ian Lynagh wrote:</p>\n<blockquote>\n<p>I have \"(Isabelle2009-1: December 2009)\".</p>\n</blockquote>\n<p>There is no problem with it, but you might want to try the current version <br>\nIsabelle2009-2 (June 2010).</p>\n<blockquote>\n<p>How does Isabelle know how much to process when I click the \"Process the <br>\nnext proof command\" in Proof-General?</p>\n</blockquote>\n<p>It processes the next command, up to the last non-whitespace text before <br>\nthe following command.  Of course, the question here is what a \"command\" <br>\nactually means in Isabelle/Isar.  The quick reference in Appendix A of the <br>\nisar-ref manual might be helpful.</p>\n<p>In particular, \".\" is a command of its own, not a command terminator like <br>\nin Coq.  (We have the more conventional \";\" for that, but it has almost <br>\ncome out of use in recent years, since Proof General is good enough to <br>\ndetermine command boundaries from the keywords alone.)</p>\n<blockquote>\n<p>But if I also write \"foo\" after \"proof\", even with some whitespace:</p>\n<p>theory Test<br>\n   imports Main<br>\n   begin</p>\n<p>lemma \"A &amp; B ==&gt; B &amp; A\"<br>\n   proof</p>\n<p>foo</p>\n<p>Isabelle says</p>\n<p>*** Unknown proof method: \"foo\"<br>\n   *** At command \"proof\".</p>\n</blockquote>\n<p>In Isar 'proof' and 'qed' are not just parentheses, but actually do <br>\nsomething.  See the quick reference again, especially for important <br>\nabbreviations like \"by m1 m2 == proof m1 qed m2\".  Extra whitespace never <br>\nmakes a difference in syntax recognition.</p>\n<blockquote>\n<p>and if I had put a \".\" after \"proof\"</p>\n<p>theory Test<br>\n   imports Main<br>\n   begin</p>\n<p>lemma \"A &amp; B ==&gt; B &amp; A\"<br>\n   proof.</p>\n<p>then now the \"lemma\" line fails with</p>\n<p>*** Outer syntax error: end of input expected,<br>\n   *** but command proof was found</p>\n</blockquote>\n<p>Here the confusion is again that \".\" is completely different from Coq. <br>\nPut a space between these two commands, and you should see proper <br>\nfont-lock highlighting in Emacs and less confusing Isabelle</p>\n<blockquote>\n<p>It also makes Isabelle hard to use for me. My coq scripts generally look<br>\nlike:<br>\n   &lt;valid proof that I've finished&gt;.<br>\n   &lt;the line I'm working on&gt;.<br>\n   &lt;invalid stuff, alternate possibilities for the next line, etc&gt;<br>\nand the invalid stuff, coming after a \".\", doesn't interfere with my<br>\nwork on the current line. I have to keep fiddling with comments to do<br>\nthis in Isabelle.</p>\n</blockquote>\n<p>As mentioned above, Proof General will stop before the next proper command <br>\nkeyword.  E.g. you can put a dummy stopper like 'done' or '.' before the <br>\ninvalid stuff to prevent it from running into it.</p>\n<blockquote>\n<p>How does one write a comment in Isabelle?</p>\n</blockquote>\n<p>Normally you don't, but you intersperse the formal text with informal one, <br>\nusing commands like 'text' or 'section' or 'subsection'.  Small marginal<br>\nattachments can be written everywhere like this:</p>\n<p>assume A  -- \"blah blah\"</p>\n<p>In any case you need to quote such text using \"...\" or the more convenient <br>\n{* ... *}  The latter allows to have quoted text inside without further <br>\nescapes.</p>\n<blockquote>\n<p>Isabelle source comments, which are of the form (* ... *) and as far as <br>\nI can see this is the only mention in the document</p>\n</blockquote>\n<p>Think of these \"source comments\" like % in LaTeX, i.e. they are not really <br>\npart of what you write.</p>\n<blockquote>\n<p>Am I right in thinking that \"--\" does not start a comment in a source <br>\nfile? Because while trying to copy/paste/run this example:</p>\n</blockquote>\n<p>After all these years, the generated PDF/LaTeX files are still unsuitable <br>\nfor copy/paste.  There have been some recent movements in the pdflatex <br>\ncamp towards more serious \"tagged PDF\", and there is some hope that we <br>\nwill be able to use it soon.</p>\n<p>For now you should start with real example source files, to get an idea <br>\nhow to type things, especially where to put quotes and where not.</p>\n<p>Makarius</p>",
        "id": 294114429,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660837827
    },
    {
        "content": "<p>From: Ian Lynagh &lt;<a href=\"mailto:igloo@earth.li\">igloo@earth.li</a>&gt;<br>\nThanks for your reply Makarius. Some helpful tips there, although the<br>\nmain purpose of my mail was to try to highlight the sorts of<br>\ndifficulties that beginners (well, at least one beginner!) run into.</p>\n<p>Actually, I've just run into something that really does have me stumped:<br>\nIt seems that \"fix a\" does nothing at all, yet it can be necessary;<br>\nlooks like magic to me! e.g. in this proof:</p>\n<p>theory Test<br>\n    imports Main<br>\n    begin</p>\n<p>lemma assumes P: \"! x. P x\" shows \"! x. P(f x)\"<br>\n    proof<br>\n      fix a<br>\n      from P show \"P(f a)\" ..<br>\n    qed</p>\n<p>the \"proof state\" is the same before and after the \"fix a\" line (well,<br>\napart from the step counter being incremented, but I assume that's not<br>\nrelevant), as are the \"cases\", \"facts\", and \"term bindings\". So how am I<br>\nmeant to know whether I need to fix something, if doing so has no<br>\nvisible effect? Am I missing something?</p>\n<p>This is a real problem for me in the proof I'm trying to write. I have<br>\ngoals like<br>\n    !!bool. principalType (EBool bool) = Some t ==&gt; STyping (EBool bool) t<br>\nand I have no idea if the commands I'm giving are taking me in the right<br>\ndirection or not, as they seemingly do nothing.</p>\n<p>I am also surprised that \"facts\", and perhaps also \"term bindings\", are<br>\nnot shown by default. Not only that, but proof general has given me a<br>\ntoolbar button that tells me \"theory Test\", but not a toolbar button to<br>\ntell me the current facts; is wanting the former really more common than<br>\nwanting the latter?</p>\n<p>That reminds me of another minor irritation: If I write this partial<br>\nproof:</p>\n<p>theory Test<br>\n    imports Main<br>\n    begin</p>\n<p>lemma \"A &amp; B ==&gt; B &amp; A\"<br>\n    proof<br>\n      assume \"A &amp; B\" thus B</p>\n<p>and then \"Process whole buffer\", and then complete the proof as:</p>\n<p>theory Test<br>\n    imports Main<br>\n    begin</p>\n<p>lemma \"A &amp; B ==&gt; B &amp; A\"<br>\n    proof<br>\n      assume \"A &amp; B\" thus B..<br>\n    next<br>\n      assume \"A &amp; B\" thus \"A\" ..<br>\n    qed</p>\n<p>then I can \"Process whole buffer\" again and the proof is accepted. But<br>\nif I then \"Retract whole buffer\" and \"Process whole buffer\" again then<br>\nthe proof is now rejected (due to the missing space between \"B\" and<br>\n\"..\").</p>\n<p>Thanks<br>\nIan</p>",
        "id": 294114445,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660837833
    },
    {
        "content": "<p>From: Ian Lynagh &lt;<a href=\"mailto:igloo@earth.li\">igloo@earth.li</a>&gt;<br>\nPerhaps the question I should really have asked is:</p>\n<p>Given a proof state of<br>\n    goal (1 subgoal):</p>\n<p>1. !!x. P (f x)<br>\nwhy does \"fix a\" not give a proof state of:<br>\n    goal (1 subgoal):</p>\n<p>1. P (f a)<br>\n?</p>\n<p>Thanks<br>\nIan</p>",
        "id": 294114517,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660837858
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nOn Sun, 15 Aug 2010, Ian Lynagh wrote:</p>\n<blockquote>\n<p>Some helpful tips there, although the main purpose of my mail was to try <br>\nto highlight the sorts of difficulties that beginners (well, at least <br>\none beginner!) run into.</p>\n</blockquote>\n<p>This is a bidirectional process: While your initial encounter with the <br>\nsystem helps to iron out certain issues eventually (which often takes <br>\nyears), the immediate tips help you to get forward right now.</p>\n<blockquote>\n<p>It seems that \"fix a\" does nothing at all, yet it can be necessary;<br>\nlooks like magic to me! e.g. in this proof:</p>\n<p>theory Test<br>\n   imports Main<br>\n   begin</p>\n<p>lemma assumes P: \"! x. P x\" shows \"! x. P(f x)\"<br>\n   proof<br>\n     fix a<br>\n     from P show \"P(f a)\" ..<br>\n   qed</p>\n<p>the \"proof state\" is the same before and after the \"fix a\" line</p>\n</blockquote>\n<p>The Isar \"context elements\" 'fix' and 'assume' mainly act on the proof <br>\ncontext, not the goal state.  In the traditional approach to tactical <br>\ntheorem proving, all your information was kept in the goal state, <br>\noccasionally encoded a bit indirectly.  E.g. the \"premises\" of a subgoal <br>\nof the form A ==&gt; B ==&gt; C would simulate local facts that can be used to <br>\nconclude C.  In Isar, local facts are first class in the context outside <br>\nof the context.</p>\n<p>Incidently, reducing goal states to the bare minumum also improves <br>\nperformance of proof tools.  Unlike other attempts at human-readable proof <br>\nscripts, Isar processing is actually faster than traditional scripting!</p>\n<p>The main idea of the interplay of proof contexts vs. goal states is this:</p>\n<p>* The system asks you to establish something, e.g. a sub-problem of the<br>\n     form !!x. A x ==&gt; B x</p>\n<p>* You build up a local context and show something in it, e.g. by saying</p>\n<p>fix x assume \"A x\" show \"B x\" &lt;proof&gt;</p>\n<p>* The system composes this contextual result, typically solving one of<br>\n     the pending sub-problems.</p>\n<p>The \"canonical answer\" fix/assume/show above is really just an example. <br>\nThere is some flexibility here.  See also section \"2.2.3 Structured proof <br>\nrefinement\" in the isar-ref manual.</p>\n<p>You also need to keep in mind that the goal output follows more the <br>\ntactical tradition.  I.e. you should not answer by show \"!!x. A x ==&gt; B x\"<br>\nabove, which can also lead to some surprises.</p>\n<blockquote>\n<p>apart from the step counter being incremented, but I assume that's not <br>\nrelevant), as are the \"cases\", \"facts\", and \"term bindings\". So how am I <br>\nmeant to know whether I need to fix something, if doing so has no <br>\nvisible effect?</p>\n</blockquote>\n<p>You always need to 'fix' an entity, if it is meant to be \"arbitrary, but <br>\nfixed\", i.e. starting as a local constant and becoming a schematic <br>\nvariable eventually (after leving the local context).</p>\n<p>Sometimes it is convenient to experiment with undeclared free variables. <br>\nThe system allows this, but uses some extra highlighting (usually yellow) <br>\nin the display.  This indicates that you can never generalize such <br>\nentities (without violating the Isar structure).</p>\n<blockquote>\n<p>I am also surprised that \"facts\", and perhaps also \"term bindings\", are <br>\nnot shown by default.</p>\n</blockquote>\n<p>The Isar proof context contains many things, and can be even arbitrarily <br>\nextended in ML user space.  The default output is a bit of a mixture of <br>\nhistorical accidents and traditions from tactical proving (which is the <br>\nprimary model of Proof General).  At some point, all of this needs some <br>\nreconsideration -- I am working on it right now, after Isabelle/Isar has <br>\nbeen locked into Proof General / TTY interaction for more than a decade.</p>\n<p>In this new interaction model (i.e. see my paper on UITP 2010) goal state <br>\noutput actually happens to be a performance bottle-neck for the system, <br>\nnot just confusing to the user.  All of this needs some careful rethinking <br>\non the system side ...</p>\n<p>Makarius</p>",
        "id": 294114581,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660837877
    }
]