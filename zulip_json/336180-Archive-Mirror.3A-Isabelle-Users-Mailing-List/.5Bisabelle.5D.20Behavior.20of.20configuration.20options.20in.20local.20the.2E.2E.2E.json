[
    {
        "content": "<p>From: Dmitriy Traytel &lt;<a href=\"mailto:traytel@inf.ethz.ch\">traytel@inf.ethz.ch</a>&gt;<br>\nDear all,</p>\n<p>I was surprised by the fact that configuration options seem to be reset when closing a local target:</p>\n<p>ML ‹<br>\nval foo = Attrib.setup_config_int @{binding foo} (K 6);<br>\n›</p>\n<p>local_setup ‹fn lthy =&gt;<br>\n  let<br>\n    val _ = Config.get lthy foo |&gt; @{print}<br>\n    val _ = Config.get (Config.put foo 7 lthy) foo |&gt; @{print}<br>\n    val _ = Config.get (Config.put foo 7 lthy |&gt; Local_Theory.open_target |&gt; snd) foo |&gt; @{print}<br>\n    val _ = Config.get (Config.put foo 7 lthy |&gt; Local_Theory.open_target |&gt; snd |&gt; Local_Theory.close_target) foo |&gt; @{print}<br>\n  in<br>\n    lthy<br>\n  end<br>\n›</p>\n<p>This prints<br>\n6<br>\n7<br>\n7<br>\n6.</p>\n<p>I had expected the last one to be 7 as well. Is there a way to make the changes to configuration options persistent in this respect?</p>\n<p>Thanks for any hints,<br>\nDmitriy</p>",
        "id": 294682054,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661177052
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nIf you really mean persistent in the sense of local theory targets, the<br>\ndeclaration needs to be applied via Local_Theory.declaration -- this<br>\ncorresponds to Isar commands like 'declare' or 'declaration'.</p>\n<p>Nonetheless, there is a slightly odd detail above for updates of the<br>\nhypothetical context on the surface: Local_Theory.open_target ..<br>\nLocal_Theory.close_target is more disruptive than it needs to be. This<br>\ncan be explained from the historical situation of still not fully<br>\nconsolidated Local_Theory.restore / Local_Theory.reset.</p>\n<p>See also this NEWS entry for the coming release<br>\n(<a href=\"http://isabelle.in.tum.de/repos/isabelle/rev/aae510e9a698\">http://isabelle.in.tum.de/repos/isabelle/rev/aae510e9a698</a>):</p>\n<ul>\n<li>Local_Theory.restore has been renamed to Local_Theory.reset to<br>\nemphasize its disruptive impact on the cumulative context, notably the<br>\nscope of 'private' or 'qualified' names. Note that Local_Theory.reset is<br>\nonly appropriate when targets are managed, e.g. starting from a global<br>\ntheory and returning to it. Regular definitional packages should use<br>\nbalanced blocks of Local_Theory.open_target versus<br>\nLocal_Theory.close_target instead. Rare INCOMPATIBILITY.</li>\n</ul>\n<p>I will try to get rid of this extra Local_Theory.reset in<br>\nLocal_Theory.close_target.</p>\n<p>I will also try harder to motivate other people to eliminate remaining<br>\nuses of Local_Theory.restore / Local_Theory.reset from their own tools.</p>\n<p>Lets see if we can finally sort this out for the coming release.</p>\n<p>Makarius</p>",
        "id": 294682305,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661177135
    },
    {
        "content": "<p>From: Dmitriy Traytel &lt;<a href=\"mailto:traytel@inf.ethz.ch\">traytel@inf.ethz.ch</a>&gt;<br>\nHi Makarius,</p>\n<p>sure, this is fine. We have a workaround not to rely on configuration options (but instead pass a Boolean flag around) for the problem I reported originally anyway.</p>\n<p>Dmitriy</p>",
        "id": 294700559,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661179044
    }
]