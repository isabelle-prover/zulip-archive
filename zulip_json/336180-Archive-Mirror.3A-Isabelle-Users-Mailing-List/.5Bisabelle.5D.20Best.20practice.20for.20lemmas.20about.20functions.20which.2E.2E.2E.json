[
    {
        "content": "<p>From: \"C. Diekmann\" &lt;<a href=\"mailto:diekmann@in.tum.de\">diekmann@in.tum.de</a>&gt;<br>\nDear isabelle users,</p>\n<p>I have a function which returns a tuple.</p>\n<p>ipv4cidr_to_interval :: \"(ipv4addr × nat) ⇒ (ipv4addr × ipv4addr)\"</p>\n<p>Background: Given an IPv4 address sapce in CIDR notation, it returns<br>\nthe start and end IP.<br>\nExample: ipv4cidr_to_interval 192.168.0.0/24 = (0xC0A80000, 0xC0A800FF)</p>\n<p>I can show the correctness of this function:</p>\n<p>lemma ipv4cidr_to_interval: \"ipv4cidr_to_interval (base, len) = (s,e)<br>\n⟹ ipv4range_from_bitmask base len = {s .. e}\"</p>\n<p>However, in many proof obligations, expressions similar to the one below occur:</p>\n<p>x ∈ (case ipv4cidr_to_interval (a, b) of (x, xa) ⇒ {x..xa})<br>\nor<br>\ncase ipv4cidr_to_interval a of (x, xa) ⇒ {x..xa})</p>\n<p>The lemma ipv4cidr_to_interval doesn't help as simplification rule<br>\nhere. My question: What is the best way to state lemmas about tupels<br>\nsuch that they server best as simplification rules?</p>\n<p>By the way: Is it okay to give lemmas and definitions/functions the same name?</p>\n<p>Best,<br>\n  Cornelius</p>",
        "id": 294642528,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661162722
    },
    {
        "content": "<p>From: Andreas Lochbihler &lt;<a href=\"mailto:andreas.lochbihler@inf.ethz.ch\">andreas.lochbihler@inf.ethz.ch</a>&gt;<br>\nDear Cornelius,</p>\n<p>For proving, I try to avoid functions that return tuples, precisely because of these ugly <br>\ntuple assumptions and case expressions. When it conceptually makes sense to tuple results <br>\n(like in your case), I usually define the projections as separate constants and work with <br>\nthem in the proofs. In your example, you could define the functions start_of_ipv4cidr and <br>\nend_of_ipv4cidr and use them consistently in the proofs. Then, proof obligations as you <br>\nmention simplify to x : {start_of_ipv4cidr (a, b)..end_of_ipv4cidr (a, b)}.</p>\n<p>Best,<br>\nAndreas</p>\n<p>PS: Name spaces in Isabelle are strictly separated by the kind they refer to. So a class, <br>\na type, a function, and a theorem can all have the same name. It is sometimes even <br>\nsensible to do so, but that depends on the application.</p>",
        "id": 294642576,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661162746
    },
    {
        "content": "<p>From: \"C. Diekmann\" &lt;<a href=\"mailto:diekmann@in.tum.de\">diekmann@in.tum.de</a>&gt;<br>\nGreat idea, thanks!</p>\n<p>2015-05-05 8:09 GMT+02:00 Andreas Lochbihler &lt;<a href=\"mailto:andreas.lochbihler@inf.ethz.ch\">andreas.lochbihler@inf.ethz.ch</a>&gt;:</p>",
        "id": 294642750,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661162814
    }
]