[
    {
        "content": "<p>From: Markus Schmetkamp &lt;<a href=\"mailto:m.schmetkamp@gmx.de\">m.schmetkamp@gmx.de</a>&gt;<br>\nHi people,</p>\n<p>I want to prove this lemma:</p>\n<p>lemma bijection: \"?f::(nat × nat =&gt; nat). bij f\"</p>\n<p>My idea was to define a function like this:</p>\n<p>fun f :: \"nat × nat =&gt; nat\" where<br>\n   \"f (0,0) = 0\" |<br>\n   \"f (n, Suc m) = Suc (f (Suc n, m))\" |<br>\n   \"f (Suc n, 0) = Suc (f (0, n))\"</p>\n<p>This function should go along each diagonal in nat x nat counting the <br>\ntuples.<br>\nUnfortunately isabelle can't find a termination order.</p>\n<p>Has anyone an idea, to prove this lemma?</p>\n<p>Best wishes<br>\nMarkus</p>",
        "id": 294270325,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660917001
    },
    {
        "content": "<p>From: Manuel Eberl &lt;<a href=\"mailto:eberlm@in.tum.de\">eberlm@in.tum.de</a>&gt;<br>\nHallo,</p>\n<p>I will not prove the entire lemma for you, but I can tell you how to<br>\nprove the termination of your function.</p>\n<p>Your function requires a non-trivial termination relation, one that<br>\nIsabelle's function package cannot find automatically. I suggest a<br>\nlexicographic ordering w.r.t. the sum of the two arguments and the<br>\nsecond argument, i.e. in every recursive call, either the sum of the<br>\nargument decreases or it stays the same and the second element decreases.</p>\n<p>In Isabelle, that can be done like this:</p>\n<p>function f :: \"nat × nat =&gt; nat\" where<br>\n\"f (0,0) = 0\" |<br>\n\"f (n, Suc m) = Suc (f (Suc n, m))\" |<br>\n\"f (Suc n, 0) = Suc (f (0, n))\"<br>\nby pat_completeness simp_all<br>\ntermination by (relation \"(λ(a,b). a+b) &lt;<em>mlex</em>&gt; measure snd\")<br>\n(auto intro: wf_mlex mlex_less mlex_leq)</p>\n<p>“measure”is a function that takes a measuring function (i.e. 'a =&gt; nat)<br>\nand turns it into the associated strict ordering relation. &lt;<em>mlex</em>&gt; is<br>\nan operator that takes a relation and combines it with another measure<br>\nto a new lexicographic ordering relation.</p>\n<p>Cheers,<br>\nManuel</p>",
        "id": 294270369,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660917004
    },
    {
        "content": "<p>From: Andreas Lochbihler &lt;<a href=\"mailto:andreas.lochbihler@inf.ethz.ch\">andreas.lochbihler@inf.ethz.ch</a>&gt;<br>\nYou might save some effort by using looking at ~~/src/HOL/Library/Nat_Bijection. It <br>\ndefines a suitable function prod_encode and proves that it is bijection in lemma <br>\nbij_prod_encode.</p>\n<p>Andreas</p>",
        "id": 294270388,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660917010
    }
]