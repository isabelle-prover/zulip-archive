[
    {
        "content": "<p>From: Denis Bueno &lt;<a href=\"mailto:dbueno@gmail.com\">dbueno@gmail.com</a>&gt;<br>\nRemoving the type annotation fixed my problem, thanks.</p>\n<p>Is the cause one of impredicative instantiation?  Is that what you<br>\nmean by \"once you write down a type variable in a fix, it really is<br>\nfixed\"?</p>\n<p>--<br>\n Denis</p>\n<p>-- <br>\n Denis</p>",
        "id": 294058892,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660822745
    },
    {
        "content": "<p>From: Denis Bueno &lt;<a href=\"mailto:dbueno@gmail.com\">dbueno@gmail.com</a>&gt;<br>\nIn the attached proof script, I receive the following message after<br>\nloading the buffer into Isabelle:</p>\n<p>*** Type unification failed<br>\n*** Type error in application: Incompatible operand type</p>\n<hr>\n<p>*** Operator:  Cl_P :: 'a set =&gt; 'a set<br>\n*** Operand:   T :: ??'a llist set</p>\n<hr>\n<p>*** At command \"assume\".</p>\n<p>I expect these types to be unifiable.  Should not \"??'a llist set\"<br>\nunify with \"'a set\" such that \"??'a llist = 'a\"?</p>\n<p>I'm attempting to use a set of functions out of which I'm going to<br>\npick an arbitrary function and invoke the only property I know about<br>\nit (namely, that it's monotonic; see the definition Cls).  What have I<br>\ndone wrong?</p>\n<p>The proof script depends on the LList2 library, available on AFP<br>\n(<a href=\"http://afp.sourceforge.net/entries/Lazy-Lists-II.shtml\">http://afp.sourceforge.net/entries/Lazy-Lists-II.shtml</a>).<br>\n<a href=\"/user_uploads/14278/mTlugey36TB508yVXNzuM651/Error.thy\">Error.thy</a></p>",
        "id": 294060243,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660823339
    },
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\nThe problem was that you did something like this:</p>\n<p>fix x :: 'a set<br>\nassume \"x = {{}}\"</p>\n<p>where x should really be of type 'a set set. But when you write down a <br>\ntype variable in a fix, it really is fixed. Hence the type unification <br>\nerror. Solution for fix/assume: either no types at all (in which case <br>\ntype inference solves the problem in most cases) or full types.</p>\n<p>Regards<br>\nTobias</p>\n<p>Denis Bueno schrieb:</p>",
        "id": 294060280,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660823359
    }
]