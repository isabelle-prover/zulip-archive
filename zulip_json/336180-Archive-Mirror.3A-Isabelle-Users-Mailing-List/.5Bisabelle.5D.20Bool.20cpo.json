[
    {
        "content": "<p>From: \"Roger H.\" &lt;<a href=\"mailto:s57076@hotmail.com\">s57076@hotmail.com</a>&gt;<br>\nHello,<br>\nto make set a cpo, its sufficient to make bool a cpo.<br>\nIf one defines the \"⊑\" operator as the \"⊆\" operator on booleans,  one obtains a partial order.<br>\ninstantiation bool :: pobegin  definition less_bool_def: \"(op ⊑) = (op ⊆)\"instanceby (intro_classes, unfold less_bool_def, safe)end<br>\nThis induces an order on sets, which corresponds to the  \"⊆\" operator. <br>\nlemma less_set_eq: \"(op ⊑) = (op ⊆)\"<br>\nBut this lemma is not accepted by giving this error message:<br>\n---Type unification failed: No type arity set :: below---<br>\nCan you help me?<br>\nMany thanks!</p>",
        "id": 294656152,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661168092
    },
    {
        "content": "<p>From: Johannes Hölzl &lt;<a href=\"mailto:hoelzl@in.tum.de\">hoelzl@in.tum.de</a>&gt;<br>\nHi Roger,</p>\n<p>bool and set are already ccpos:</p>\n<p>instance bool :: ccpo .. -- \"this proof is actually empty\"<br>\ninstance set :: (type) ccpo .. -- \"this proof is actually empty\"</p>\n<p>Also, your example is strange:</p>\n<p>definition less_bool_def: \"(op ⊑) = (op ⊆)\"</p>\n<p>can not work, as ⊆ is specific for set, you need to use &lt;=.<br>\nAlso where do you get ⊑ from?</p>\n<p>- Johannes</p>",
        "id": 294656296,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661168155
    },
    {
        "content": "<p>From: \"Roger H.\" &lt;<a href=\"mailto:s57076@hotmail.com\">s57076@hotmail.com</a>&gt;<br>\nCorrection:<br>\nto make set a cpo, its sufficient to make bool a cpo.<br>\n If one defines the \"⊑\" operator as the \"--&gt;\" operator on booleans, one obtains a partial order.<br>\n instantiation bool :: pobegin definition less_bool_def: \"(op ⊑) = (op --&gt;)\"instanceby (intro_classes, unfold less_bool_def, safe)end</p>\n<p>This induces an order on sets, which corresponds to the \"⊆\" operator. </p>\n<p>lemma less_set_eq: \"(op ⊑) = (op ⊆)\"</p>\n<p>But this lemma is not accepted by giving this error message:<br>\n ---Type unification failed: No type arity set :: below---</p>\n<p>Can you help me?</p>\n<p>By the way, i am aware of this answer of a similiar question:<br>\n<a href=\"https://lists.cam.ac.uk/pipermail/cl-isabelle-users/2010-September/msg00010.html\">https://lists.cam.ac.uk/pipermail/cl-isabelle-users/2010-September/msg00010.html</a></p>\n<p>Many thanks!</p>",
        "id": 294656313,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661168162
    },
    {
        "content": "<p>From: \"Roger H.\" &lt;<a href=\"mailto:s57076@hotmail.com\">s57076@hotmail.com</a>&gt;<br>\nHello Johannes</p>\n<p>my exact question is:<br>\nWhile working in HOLCF(not HOL)...if I copy-paste the following class SetPcpo<br>\n<a href=\"http://isabelle.in.tum.de/website-Isabelle2008/dist/library/HOLCF/SetPcpo.html\">http://isabelle.in.tum.de/website-Isabelle2008/dist/library/HOLCF/SetPcpo.html</a><br>\nin the HOLCF folder,<br>\nand run it, then I get at the following spot<br>\nlemma less_set_eq: \"(op ⊑) = (op ⊆)\"the following error: --Type unification failed: No type arity set :: below</p>\n<p>Type error in application: incompatible operand type</p>\n<p>Operator:  op = op ⊑ :: (??'a ⇒ ??'a ⇒ bool) ⇒ bool<br>\nOperand:   op ⊆ :: ??'b set ⇒ ??'b set ⇒ bool--1. Why is the error?</p>\n<ol start=\"2\">\n<li>How do i prove here \"instance bool :: cpo\"   //notice that this is the class cpo of holcf, as in [Huf 11],  and not --hol ccpo--  3. How do i then prove \"instance set :: (type) cpo\"     <br>\nThank you!</li>\n</ol>",
        "id": 294656360,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661168168
    },
    {
        "content": "<p>From: \"Roger H.\" &lt;<a href=\"mailto:s57076@hotmail.com\">s57076@hotmail.com</a>&gt;<br>\nHello, thank you for your help, it was sucessfully proven and this issue is closed.</p>",
        "id": 294656455,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661168217
    }
]