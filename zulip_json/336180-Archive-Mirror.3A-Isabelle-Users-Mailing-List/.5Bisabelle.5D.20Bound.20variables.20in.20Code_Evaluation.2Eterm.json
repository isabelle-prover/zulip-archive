[
    {
        "content": "<p>From: Florian Haftmann &lt;<a href=\"mailto:florian.haftmann@informatik.tu-muenchen.de\">florian.haftmann@informatik.tu-muenchen.de</a>&gt;<br>\nHi Andreas,</p>\n<p>the classical code evaluation (code_evaluation.ML and particularly<br>\nHOLogic.reflect_term) do not cover variables at all.  This is an<br>\nextensions of quickcheck narrowing.  You might start your investigation<br>\nthere (grep -rIFn Code_Evaluation.Free .).</p>\n<p>Hope this helps,<br>\n    Florian<br>\n<a href=\"/user_uploads/14278/Xq5rdDGjbBk6Q6Vh613su8NE/signature.asc\">signature.asc</a></p>",
        "id": 294278973,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660919708
    },
    {
        "content": "<p>From: Andreas Lochbihler &lt;<a href=\"mailto:andreas.lochbihler@inf.ethz.ch\">andreas.lochbihler@inf.ethz.ch</a>&gt;<br>\nHi Florian,</p>\n<p>Thanks for the hint to quickcheck narrowing. I now see that Code_Evaluation.Free is only <br>\nused to represent uninstantiated terms in counter examples. Abstractions only occur in <br>\nquickcheck exhaustive in the special case of dummy abstractions. So there currently is no <br>\nneed to think about bound variables.</p>\n<p>Cheers,<br>\nAndreas</p>",
        "id": 294279087,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660919746
    },
    {
        "content": "<p>From: Andreas Lochbihler &lt;<a href=\"mailto:andreas.lochbihler@inf.ethz.ch\">andreas.lochbihler@inf.ethz.ch</a>&gt;<br>\nHi,</p>\n<p>I am trying to understand how the term representation in Code_Evaluation deals with variables.</p>\n<p>The pseudo-constructors Const, App and Abs clearly model constants, application and <br>\nabstraction, but I am having difficulties with the purpose of Free. Is Free supposed to <br>\nmodel both bound and free variables?</p>\n<p>For example, how is the Isabelle term \"x (%x :: nat. x)\" to be represented in <br>\nCode_Evaluation? Omitting the types, I came up with the following.</p>\n<p>App (Free x ...) (Abs \"x\" ... (Free x ...))</p>\n<p>However, it seems strange that the second occurrence of Free actually denotes a bound <br>\nvariable. Is that intended?</p>\n<p>Best,<br>\nAndreas</p>",
        "id": 294281124,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660920397
    }
]