[
    {
        "content": "<p>From: Thomas Arthur Leck Sewell &lt;<a href=\"mailto:tsewell@cse.unsw.EDU.AU\">tsewell@cse.unsw.EDU.AU</a>&gt;<br>\nHi there. I normally push this sort of thing via Gerwin, but he's away at <br>\nthe moment, so here's a direct bug report from me. He also maintains our <br>\nlocal Isabelle version, and I'm afraid I can't be more specific that <br>\nIsabelle2005.</p>\n<p>It seems that the function package has a real issue with a True or False <br>\nterm turning up as an explicit assumption thanks to a congruence rule.<br>\nFor example, try running the following code:</p>\n<p>function<br>\n   recursive :: \"nat =&gt; nat\" where<br>\n  \"recursive (Suc n) = (if True then arbitrary else recursive n)\"<br>\n  \"recursive 0 = 0\"</p>\n<p>In quick-and-dirty mode, this works immediately for me, but when attempted <br>\nin strict mode I get a thoroughly self-explanatory \"Tactic failed\" error. <br>\nI haven't looked at any code, but I assume that the problem here is that<br>\nthe True/Not True assumptions introduced by if's congruence rule are then <br>\neliminated by one of the more interesting simplification rules that <br>\nexplicitly manipulates PROP. This results in a simpler recursion graph <br>\nfrom which a subsequent tactic has failed to produce the desired recursion <br>\nrule.</p>\n<p>Obviously, the example above is useless. The example I'm interested in <br>\nuses a let expression to put a wrapper around a recursive call, allowing <br>\ncertain code to be pasted in unmodified but still use the wrapper. In at <br>\nleast one call site, False is passed as an argument and thus finds its way <br>\ninto the congruence assumptions. I think I can work around this by <br>\ninventing some wrapping constants to befuddle the simplifier, but it would <br>\nbe nice to see this fixed in future versions.</p>\n<p>Yours,<br>\n    Thomas.</p>",
        "id": 294049194,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660818620
    },
    {
        "content": "<p>From: Alexander Krauss &lt;<a href=\"mailto:krauss@in.tum.de\">krauss@in.tum.de</a>&gt;<br>\nHi Thomas,</p>\n<p>Thanks for reporting this. I'll have a closer look.</p>\n<p>Alex</p>",
        "id": 294049202,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660818624
    },
    {
        "content": "<p>From: Thomas Arthur Leck Sewell &lt;<a href=\"mailto:tsewell@cse.unsw.EDU.AU\">tsewell@cse.unsw.EDU.AU</a>&gt;<br>\nI'd like to widen my previous bug report. Having boiled down my example to <br>\na simple construction and explained it, I went and worked around the <br>\nproblem only to have the system continue to fail ... sigh.</p>\n<p>It seems that some of the simps in simp_thms are applied in a simpset deep <br>\nin the bowels of the function package, and that if <em>any</em> of them <br>\nmanipulate the term, it will result in a tactic failure later (when not in <br>\nquick-and-dirty mode) when the package tries to produce derivative <br>\nresults.</p>\n<p>For example:<br>\nfunction recursive :: \"bool =&gt; nat\" where<br>\n  \"recursive x = recursive (Not True)\"</p>\n<p>function recursive :: \"bool =&gt; nat\" where<br>\n  \"recursive x = recursive (Not False)\"</p>\n<p>function recursive :: \"bool =&gt; nat\" where<br>\n  \"recursive x = recursive (True &amp; x)\"</p>\n<p>function recursive :: \"bool =&gt; nat\" where<br>\n  \"recursive x = recursive (x &amp; True)\"</p>\n<p>But not (x | False). This is all rather amusing, and I hope someone has an <br>\nidea what I might have come across.</p>\n<p>Yours,<br>\n    Thomas.</p>",
        "id": 294049260,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660818667
    },
    {
        "content": "<p>From: Alexander Krauss &lt;<a href=\"mailto:krauss@in.tum.de\">krauss@in.tum.de</a>&gt;<br>\nThomas,</p>\n<blockquote>\n<p>I'd like to widen my previous bug report. Having boiled down my example<br>\nto a simple construction and explained it, I went and worked around the<br>\nproblem only to have the system continue to fail ... sigh.</p>\n</blockquote>\n<p>You are using a development snapshot of Isabelle, so errors like this<br>\ncan happen from time to time.</p>\n<p>Please send further bug reports for the function package directly to me.<br>\nIt is good if you produce small self-contained examples like you did, but<br>\nyou shouldn't try to guess what happens internally, since that  <br>\nprobably just wastes your time.</p>\n<blockquote>\n<p>function recursive :: \"bool =&gt; nat\" where<br>\n \"recursive x = recursive (Not True)\"</p>\n<p>[...]</p>\n</blockquote>\n<p>These were all instances of the same problem. We fixed this in the  <br>\nCVS, and the fix should be in tomorrow's development snapshot.</p>\n<p>Cheers,<br>\nAlex</p>",
        "id": 294049282,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660818678
    }
]