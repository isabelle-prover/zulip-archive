[
    {
        "content": "<p>From: Brandon Bohrer &lt;<a href=\"mailto:bbohrer@cs.cmu.edu\">bbohrer@cs.cmu.edu</a>&gt;<br>\nHi All (and probably Andreas in particular),</p>\n<p>I've got a bug to report when code-generating to Scala.<br>\nOne quirk of Scala compilation is that on case-insensitive filesystems<br>\n(some Macs, probably Windows), classes (including case classes for datatype<br>\nconstructors) must never differ only by case, else compilation fails when<br>\nthe compiler writes multiple .class files with conflicting names.</p>\n<p>Some of the classes generated by Isabelle violate this convention.<br>\nWhile it would be optimal to maintain the convention even when the user<br>\nintroduces potential conflicts (see attached UserError.{thy,scala}), it's<br>\nmore important to fix \"built-in\" code, which also has this bug.<br>\nSee BugReport.scala lines 12 and 14: \"class char\" and \"case class Char\" of<br>\n\"object String\" conflict.<br>\nThe other case I saw was \"class seq\" and \"case class Seq\" in \"object<br>\nPredicate\" when using the predicate compiler, see<br>\nBugReportPred.{thy,scala}.</p>\n<p>The first solutions that come to mind are:</p>\n<p>1) Automatically change class/case class names to avoid conflict, even if<br>\nthe user gave constructors+types unfortunate names. From reading generated<br>\ncode I'm under the impression that similar functionality already exists?<br>\ne.g. I see classes like \"Lista\" to avoid conflict with \"List\".</p>\n<p>2) Go through relevant files in the standard library and rename<br>\nappropriately at the source level, but that sounds awfully invasive and<br>\nless robust.</p>\n<p>We have worked around it for now by renaming manually after the code is<br>\ngenerated, which is suboptimal for obvious reasons.</p>\n<p>Any fix would be greatly appreciated!<br>\n-Brandon<br>\n<a href=\"/user_uploads/14278/TOPNgO4A9DWwSmWw5Q-xyZJ5/BugReport.scala\">BugReport.scala</a><br>\n<a href=\"/user_uploads/14278/ho9F1Rp4rkDtdF0X2oJUVi11/BugReport.thy\">BugReport.thy</a><br>\n<a href=\"/user_uploads/14278/gFsRssS9hjEZoO2-jwYfTMFX/BugReportPred.scala\">BugReportPred.scala</a><br>\n<a href=\"/user_uploads/14278/GRGBPuuop-5kSbi01zpz2ZlX/BugReportPred.thy\">BugReportPred.thy</a><br>\n<a href=\"/user_uploads/14278/F6xMbq4Y_zSlNV4ndGAOVFE_/UserError.scala\">UserError.scala</a><br>\n<a href=\"/user_uploads/14278/tZ7h0vc32drHgt3b-hTf6ncS/UserError.thy\">UserError.thy</a></p>",
        "id": 294723633,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661185695
    },
    {
        "content": "<p>From: Lars Hupel &lt;<a href=\"mailto:hupel@in.tum.de\">hupel@in.tum.de</a>&gt;<br>\nDear Brandon,</p>\n<p>some three years ago, Florian has introduced a configuration option for<br>\nthat:</p>\n<p>declare [[scala_case_insensitive]]</p>\n<p>It doesn't appear to be documented, though.</p>\n<p>Cheers<br>\nLars</p>",
        "id": 294723645,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661185701
    },
    {
        "content": "<p>From: Brandon Bohrer &lt;<a href=\"mailto:bbohrer@cs.cmu.edu\">bbohrer@cs.cmu.edu</a>&gt;<br>\nDear Lars,</p>\n<p>That's great to hear, and thanks for the quick response!<br>\nIn my experience since there are so many features that it would likely be<br>\nquite difficult to find even if it were documented.<br>\nIs there any chance of printing a warning when export_code runs saying \"you<br>\nprobably want to declare this option\"?</p>",
        "id": 294723665,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661185707
    },
    {
        "content": "<p>From: Lars Hupel &lt;<a href=\"mailto:hupel@in.tum.de\">hupel@in.tum.de</a>&gt;</p>\n<blockquote>\n<p>Is there any chance of printing a warning when export_code runs saying \"you<br>\nprobably want to declare this option\"?</p>\n</blockquote>\n<p>That remains unclear.</p>\n<p>On the one hand, I maintain that case-insensitive file systems are<br>\nfundamentally broken and we shouldn't cater for them by default. On the<br>\nother hand, likely the majority of Isabelle users are affected by this.</p>\n<p>So maybe the pragmatic approach would be to remove the option and do<br>\nmangling by default.</p>\n<p>Cheers<br>\nLars</p>",
        "id": 294723683,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661185713
    },
    {
        "content": "<p>From: Jasmin Blanchette &lt;<a href=\"mailto:jasmin.blanchette@inria.fr\">jasmin.blanchette@inria.fr</a>&gt;<br>\nLars wrote:</p>\n<blockquote>\n<p>So maybe the pragmatic approach would be to remove the option and do<br>\nmangling by default.</p>\n</blockquote>\n<p>We could also keep the option but change its default value.</p>\n<p>Jasmin</p>",
        "id": 294723702,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661185719
    },
    {
        "content": "<p>From: Brandon Bohrer &lt;<a href=\"mailto:bbohrer@cs.cmu.edu\">bbohrer@cs.cmu.edu</a>&gt;<br>\nI agree that just making it the default seems a lot easier than having a<br>\nmessage, documentaton, etc. about it.<br>\nIf there's a concern that the mangling could break anything else or affect<br>\nreadability, one could always replace the \"scala_case_insensitive\"<br>\nwith a \"scala_case_sensitive\"<br>\noption that manually disables the mangling if someone really needs it.</p>\n<p>-Brandon</p>",
        "id": 294723755,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661185735
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nI wonder if scalac could directly output into a jar file, without the<br>\ndangers of the physical file-system. Maybe by invoking the Scala<br>\ncompiler within Scala under program control?</p>\n<p>On Windows and Mac OS X there is loss of information due to<br>\ncase-insensibility. On Linux there are occasional problems with<br>\nfile-name lengths on encrypted file-systems.</p>\n<p>Makarius<br>\n<a href=\"/user_uploads/14278/-rYiKAioxBRaQJfa9w4VJyQT/signature.asc\">signature.asc</a></p>",
        "id": 294723840,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661185770
    },
    {
        "content": "<p>From: Lars Hupel &lt;<a href=\"mailto:hupel@in.tum.de\">hupel@in.tum.de</a>&gt;<br>\nA brief look at the sources of the Scala compiler yielded this:</p>\n<p>/** A list pairing source directories with their output directory.</p>\n<p>*  This option is not available on the command line, but can be set <br>\nby</p>\n<p>*  other tools (IDEs especially). The command line specifies a single<br>\n    *  output directory that is used for all source files, denoted by a<br>\n    *  '*' in this list.<br>\n    */<br>\n   lazy val outputDirs = new OutputDirs</p>\n<p>Additionally, there is an ad-hoc implementation of an in-memory <br>\ndirectory present.</p>\n<p>I haven't checked whether all necessary operations are supported, but it <br>\nlooks doable.</p>",
        "id": 294723855,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661185774
    },
    {
        "content": "<p>From: Florian Haftmann &lt;<a href=\"mailto:florian.haftmann@informatik.tu-muenchen.de\">florian.haftmann@informatik.tu-muenchen.de</a>&gt;<br>\nSounds like an interesting idea, but also more involved.  I think I'll<br>\nfirst start with my pragmatic proposal and then gather more expertise in<br>\nthat area.</p>\n<p>Florian<br>\n<a href=\"/user_uploads/14278/ioxYfx4u9cAOpNzLNE75_sK-/signature.asc\">signature.asc</a></p>",
        "id": 294724087,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661185849
    },
    {
        "content": "<p>From: Lars Hupel &lt;<a href=\"mailto:hupel@in.tum.de\">hupel@in.tum.de</a>&gt;<br>\nOn a tangential note, it would be very helpful if Isabelle itself would<br>\nsupport virtual file systems. PIDE could easily do it by switching to<br>\nNIO paths from IO files, but the problem remains for I/O operations<br>\nperformed by the prover.</p>\n<p>(Use cases I'm thinking of are performing cross-platform in-memory<br>\nbuilds, or not having to check out the AFP for including a single<br>\nsession with dependencies.)</p>",
        "id": 294724119,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661185861
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nOn 15/12/17 11:51, Lars Hupel wrote:</p>\n<blockquote>\n<p>On a tangential note, it would be very helpful if Isabelle itself would<br>\nsupport virtual file systems. PIDE could easily do it by switching to<br>\nNIO paths from IO files, but the problem remains for I/O operations<br>\nperformed by the prover.</p>\n</blockquote>\n<p>There is already some support for that: the PIDE module resources.scala<br>\nand its derivatives for the jEdit and VSCode front-end provide some<br>\nabstractions over the file-system. Thus Isabelle/PIDE/jEdit can work<br>\nover http to some extent. E.g. try this with current Isabelle/b8f30228a55b:</p>\n<p>isabelle jedit -l HOL-Analysis<br>\n<a href=\"https://bitbucket.org/isa-afp/afp-devel/raw/6e2a1bb82505/thys/Bernoulli/Bernoulli_Zeta.thy\">https://bitbucket.org/isa-afp/afp-devel/raw/6e2a1bb82505/thys/Bernoulli/Bernoulli_Zeta.thy</a></p>\n<p>There are various fine points of uniform URL support still missing: in<br>\njEdit, in Java standard libraries, in Isabelle/Scala etc.</p>\n<p>Moreover, Isabelle/Scala provides some competing abstractions of local<br>\nvs. remote SSH.System operations (file access and process execution). At<br>\nthe bottom it is based on jsch. jEdit has its own virtual file-system<br>\nfor ssh/sftp on top of jsch. Here are also some attempts to combine jsch<br>\nwith Java NIO: <a href=\"https://github.com/lucastheisen/jsch-nio\">https://github.com/lucastheisen/jsch-nio</a></p>\n<p>Overall, I am not so convinced of the Java platform: things are<br>\ngenerally unfinished and not well thought out. In the past 12 months, I<br>\nhave even started to think of retargeting Isabelle/Scala onto Node.js as<br>\nan alternative to the JVM, by using ScalaJs. It means the abstractions<br>\nprobably need to be more abstract than standard Java interfaces.</p>\n<blockquote>\n<p>Use cases I'm thinking of are performing cross-platform in-memory<br>\nbuilds</p>\n</blockquote>\n<p>Sorry, I do not understand this idea.</p>\n<blockquote>\n<p>or not having to check out the AFP for including a single<br>\nsession with dependencies.)</p>\n</blockquote>\n<p>In principle this could work with a slight refinement of the existing<br>\nhttp support, such that the session directory specifications (option -d)<br>\ncan be URLs as well. Various fine points are preventing this: e.g. users<br>\nstill write out generated files occasionally, even though I have tried<br>\nto work towards strictly read-only Isabelle session sources in the past<br>\n20 years.</p>\n<p>On the other hand, a full AFP source tree has only 140 MB + 100 MB for<br>\nthe hg history. That is relatively little compared to the full Isabelle<br>\ninstallation, and the resulting heap images will easily outweigh the<br>\nsources.</p>\n<p>So an alternative could be just a fancy download tool for AFP subtrees<br>\nwithin the Prover IDE or on the command-line.</p>\n<p>Makarius</p>",
        "id": 294724139,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661185867
    },
    {
        "content": "<p>From: Lars Hupel &lt;<a href=\"mailto:hupel@in.tum.de\">hupel@in.tum.de</a>&gt;</p>\n<blockquote>\n<p>There is already some support for that: the PIDE module resources.scala<br>\nand its derivatives for the jEdit and VSCode front-end provide some<br>\nabstractions over the file-system. Thus Isabelle/PIDE/jEdit can work<br>\nover http to some extent. E.g. try this with current Isabelle/b8f30228a55b:</p>\n<p>isabelle jedit -l HOL-Analysis<br>\n<a href=\"https://bitbucket.org/isa-afp/afp-devel/raw/6e2a1bb82505/thys/Bernoulli/Bernoulli_Zeta.thy\">https://bitbucket.org/isa-afp/afp-devel/raw/6e2a1bb82505/thys/Bernoulli/Bernoulli_Zeta.thy</a></p>\n<p>There are various fine points of uniform URL support still missing: in<br>\njEdit, in Java standard libraries, in Isabelle/Scala etc.</p>\n</blockquote>\n<p>Uniform URL support in Java is already there: Look at NIO2. There are<br>\nmany different filesystem providers out there (as you are undoubtedly<br>\naware). Unfortunately the knowledge of JSR 203 is still \"fresh\" in the<br>\ncommunity (despite being released in 2011). For HTTP, this one surfaced<br>\nafter a quick search: &lt;<a href=\"https://github.com/magicDGS/jsr203-http\">https://github.com/magicDGS/jsr203-http</a>&gt;</p>\n<blockquote>\n<p>Overall, I am not so convinced of the Java platform: things are<br>\ngenerally unfinished and not well thought out.</p>\n</blockquote>\n<p>A curious thing to say about a battle-tested platform that's been used<br>\nin production for a very long time. What precisely is not \"well thought<br>\nout\"? Because NIO definitely is.</p>\n<blockquote>\n<p>In the past 12 months, I<br>\nhave even started to think of retargeting Isabelle/Scala onto Node.js as<br>\nan alternative to the JVM, by using ScalaJs. It means the abstractions<br>\nprobably need to be more abstract than standard Java interfaces.</p>\n</blockquote>\n<p>Scala.js is certainly a possibility. But rest assured that JavaScript as<br>\na platform comes with its own sets of warts and trade-offs. The idea of<br>\nrunning the same code in the browser and on the server is harder to<br>\nachieve than how it's advertised.</p>\n<blockquote>\n<blockquote>\n<p>Use cases I'm thinking of are performing cross-platform in-memory<br>\nbuilds</p>\n</blockquote>\n<p>Sorry, I do not understand this idea.</p>\n</blockquote>\n<p>On Linux one can just mount a tmpfs and let Isabelle emit heap images<br>\n(or whatever it needs) there, but this is not cross-platform.</p>\n<blockquote>\n<p>So an alternative could be just a fancy download tool for AFP subtrees<br>\nwithin the Prover IDE or on the command-line.</p>\n</blockquote>\n<p>This already exists. isabellectl has a flag --afp that will<br>\nautomatically download the AFP (without history), register it in ROOTS,<br>\nand starts a jEdit instance. This utilizes the Maven Central<br>\ninfrastructure. But it still requires unpacking the archive on disk,<br>\nwhich I'd like to avoid for various reasons.</p>",
        "id": 294724160,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661185874
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nOn 15/12/17 17:11, Lars Hupel wrote:</p>\n<blockquote>\n<p>Uniform URL support in Java is already there: Look at NIO2. There are<br>\nmany different filesystem providers out there (as you are undoubtedly<br>\naware). Unfortunately the knowledge of JSR 203 is still \"fresh\" in the<br>\ncommunity (despite being released in 2011). For HTTP, this one surfaced<br>\nafter a quick search: &lt;<a href=\"https://github.com/magicDGS/jsr203-http\">https://github.com/magicDGS/jsr203-http</a>&gt;</p>\n</blockquote>\n<p>I will take a look at this eventually.</p>\n<blockquote>\n<blockquote>\n<p>Overall, I am not so convinced of the Java platform: things are<br>\ngenerally unfinished and not well thought out.</p>\n</blockquote>\n<p>A curious thing to say about a battle-tested platform that's been used<br>\nin production for a very long time. What precisely is not \"well thought<br>\nout\"? Because NIO definitely is.</p>\n</blockquote>\n<p>The \"Java is great\" propaganda has been with us since Java 1.0. After<br>\nstruggling myself with the platform for 10 years, I don't believe it<br>\nanymore. It usually requires hard work and strange tricks to make<br>\nexisting Java libraries work properly. (That might be also a business<br>\nmodel of that community, but the mainstream is already moving elsewhere.)</p>\n<blockquote>\n<blockquote>\n<p>In the past 12 months, I<br>\nhave even started to think of retargeting Isabelle/Scala onto Node.js as<br>\nan alternative to the JVM, by using ScalaJs. It means the abstractions<br>\nprobably need to be more abstract than standard Java interfaces.</p>\n</blockquote>\n<p>Scala.js is certainly a possibility. But rest assured that JavaScript as<br>\na platform comes with its own sets of warts and trade-offs. The idea of<br>\nrunning the same code in the browser and on the server is harder to<br>\nachieve than how it's advertised.</p>\n</blockquote>\n<p>JavaScript and Node.js are definitely crap. As usual the idea is to work<br>\non the intersection of the various platforms, and build a separate<br>\nIsabelle edifice on top of the rubble.</p>\n<p>Presently this is merely a speculative projection of Isabelle/VSCode<br>\ninto the future. Isabelle/jEdit and Isabelle/Scala/JVM are not going to<br>\ndisappear, but the exclusive dependency on the Java universe might come<br>\nto an end.</p>\n<blockquote>\n<p>This already exists. isabellectl has a flag --afp that will<br>\nautomatically download the AFP (without history), register it in ROOTS,<br>\nand starts a jEdit instance. This utilizes the Maven Central<br>\ninfrastructure. But it still requires unpacking the archive on disk,<br>\nwhich I'd like to avoid for various reasons.</p>\n</blockquote>\n<p>I was thinking of direct access to <a href=\"https://bitbucket.org/isa-afp\">https://bitbucket.org/isa-afp</a> without<br>\nJava artifact stores.</p>\n<p>What are the various reasons? Isabelle session builds still require<br>\nlocal file-system storage.</p>\n<p>Makarius</p>",
        "id": 294724180,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661185880
    },
    {
        "content": "<p>From: Lars Hupel &lt;<a href=\"mailto:hupel@in.tum.de\">hupel@in.tum.de</a>&gt;</p>\n<blockquote>\n<p>I was thinking of direct access to <a href=\"https://bitbucket.org/isa-afp\">https://bitbucket.org/isa-afp</a> without<br>\nJava artifact stores.</p>\n</blockquote>\n<p>That (almost) works, too.</p>\n<blockquote>\n<p>What are the various reasons? Isabelle session builds still require<br>\nlocal file-system storage.</p>\n</blockquote>\n<p>This is the reason why I was suggesting earlier on this thread that it<br>\nwould be convenient if it didn't require the local file system. Mostly<br>\nthe problem is that supporting platforms like Windows, where symlinking<br>\nis hard without administrative privileges, requires a lot of copying<br>\nthings around.</p>",
        "id": 294724232,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661185898
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nAt the bottom of all this are Poly/ML heap images. They do require a<br>\nregular file-system, and I don't know how to do it differently.</p>\n<p>I have occasionally pondered the question if the heap could be a blob<br>\nwithin SQLite or PostgreSQL (without Java getting in between), but David<br>\nMatthews is the only one who can possibly do anything here.</p>\n<p>Makarius</p>",
        "id": 294724246,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661185904
    },
    {
        "content": "<p>From: David Matthews &lt;<a href=\"mailto:dm@prolingua.co.uk\">dm@prolingua.co.uk</a>&gt;<br>\nWhen a heap image is exported all the ML code is stopped.  That means <br>\nthat it can't invoke any ML functions to process the bytes.  It might be <br>\nable to turn the heap image into a byte vector and return that so that <br>\nML code could process it later.  The problem I can see there is that <br>\nthis would require more memory and we've already encountered problems <br>\nwith shortage of memory during heap exports.  Could you not export the <br>\nheap to a temporary file, import that into your database and then delete <br>\nthe temporary file?  Loading a heap image would be the reverse.</p>\n<p>David</p>",
        "id": 294724276,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661185913
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nYes, if/when I really need the database of heaps. But there are<br>\npresently other priorities and no need to change this aspect of Poly/ML.</p>\n<p>Makarius</p>",
        "id": 294724290,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661185920
    },
    {
        "content": "<p>From: David Matthews &lt;<a href=\"mailto:dm@prolingua.co.uk\">dm@prolingua.co.uk</a>&gt;<br>\nIt doesn't require any change to Poly/ML; you can do it now.  The only <br>\ncomplication is with hierarchies of heaps i.e. dependencies such as HOL <br>\non Pure.  In order to load a child you will have to export all its <br>\nparents into temporary files and then use PolyML.SaveState.loadHierarchy.</p>\n<p>David</p>",
        "id": 294724295,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661185922
    },
    {
        "content": "<p>From: Florian Haftmann &lt;<a href=\"mailto:florian.haftmann@informatik.tu-muenchen.de\">florian.haftmann@informatik.tu-muenchen.de</a>&gt;<br>\nSee now <a href=\"http://isabelle.in.tum.de/repos/isabelle/rev/ad538f6c5d2f\">http://isabelle.in.tum.de/repos/isabelle/rev/ad538f6c5d2f</a></p>\n<p>Cheers,<br>\n    Florian<br>\n<a href=\"/user_uploads/14278/jzJAHyTkewzMPnwc-jKbw6UC/signature.asc\">signature.asc</a></p>",
        "id": 294724385,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661185947
    },
    {
        "content": "<p>From: Florian Haftmann &lt;<a href=\"mailto:florian.haftmann@informatik.tu-muenchen.de\">florian.haftmann@informatik.tu-muenchen.de</a>&gt;<br>\nHi all,</p>\n<p>the option »scala_case_sensitive« has indeed been introduced quite<br>\nad-hoc three years ago.</p>\n<p>After some thinking about I came to the conclusion that it would be far<br>\nbetter to turn it into an explicit argument to the Scala serializer and<br>\ndocument it accordingly.</p>\n<p>I am sceptic about making it the default since case distinction is used<br>\nprominently in HOL (e.g. gcd / Gcd) and it would diminish readability<br>\nsignificantly.</p>\n<p>Cheers,<br>\n    Florian<br>\n<a href=\"/user_uploads/14278/9NBVePA0vD6imvinOAvNqd_0/signature.asc\">signature.asc</a></p>",
        "id": 294724616,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661186027
    }
]