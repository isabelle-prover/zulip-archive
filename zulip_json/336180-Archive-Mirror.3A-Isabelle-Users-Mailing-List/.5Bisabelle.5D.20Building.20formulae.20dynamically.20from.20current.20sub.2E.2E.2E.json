[
    {
        "content": "<p>From: Nicole Rauch &lt;<a href=\"mailto:rauch@informatik.uni-kl.de\">rauch@informatik.uni-kl.de</a>&gt;<br>\nHello,</p>\n<p>I am currently formalizing a Hoare logic in Isabelle/HOL, and e.g. one  <br>\naxiom looks like</p>\n<p>{ f(Q) } stmt { Q }</p>\n<p>where f yields some rather complex formula.</p>\n<p>To be able to apply this axiom flexibly in a given proof without  <br>\nrequiring the given precondition to have the exact syntactical shape,  <br>\nI formalized this as</p>\n<p>P = f(Q)<br>\n==&gt; { P } stmt { Q }</p>\n<p>Now I think that it might look nicer if I stay closer to the original  <br>\naxiom with my formalization, i.e. if I formalize it in Isabelle as</p>\n<p>{ f(Q) } stmt { Q }</p>\n<p>as well. If I want to apply this axiom to a given Hoare triple</p>\n<p>{ P1 } stmt { Q1 }</p>\n<p>where P1 has a shape that is different from f(Q), e.g. because two  <br>\nconjuncts are given in a different order, I have two options (to my  <br>\nknowledge) to adapt the given triple: I can either add a lemma</p>\n<p>lemma \"P1 = f(Q)\"</p>\n<p>to my library and rewrite  the current goal with this lemma, or I can</p>\n<p>apply (subgoal_tac \"P1 = f(Q)\")</p>\n<p>and rewrite the current goal with the new assumption and prove the  <br>\nresulting subgoal later on.</p>\n<p>But these two options imply that I explicitly give the actual shape of  <br>\nP1, either in the lemma or in the subgoal_tac application.</p>\n<p>My question is: Can I apply subgoal_tac with a formula that is  <br>\ndynamically built from the current subgoal, i.e. can I state something  <br>\nlike</p>\n<p>apply (subgoal_tac \"some_part_of_current_subgoal = f(Q)\")</p>\n<p>without explicitly giving P1 in my proof script?</p>\n<p>Thanks a lot in advance</p>\n<p>Nicole</p>",
        "id": 294047450,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660817898
    },
    {
        "content": "<p>From: Alexander Krauss &lt;<a href=\"mailto:krauss@in.tum.de\">krauss@in.tum.de</a>&gt;<br>\nNicole,</p>\n<blockquote>\n<p>I am currently formalizing a Hoare logic in Isabelle/HOL, and e.g. one<br>\naxiom looks like</p>\n<p>{ f(Q) } stmt { Q }</p>\n<p>where f yields some rather complex formula.</p>\n<p>To be able to apply this axiom flexibly in a given proof without<br>\nrequiring the given precondition to have the exact syntactical shape, I<br>\nformalized this as</p>\n<p>P = f(Q)<br>\n==&gt; { P } stmt { Q }</p>\n</blockquote>\n<p>This is probably the most practical solution. Note that the actual axiom<br>\ncan still have the \"original\" form, so you know that you have the right Hoare<br>\nlogic, but you can easily get the \"useful\" form as a derived rule.</p>\n<blockquote>\n<p>[...]<br>\nBut these two options imply that I explicitly give the actual shape of<br>\nP1, either in the lemma or in the subgoal_tac application.</p>\n<p>My question is: Can I apply subgoal_tac with a formula that is<br>\ndynamically built from the current subgoal, i.e. can I state something<br>\nlike</p>\n<p>apply (subgoal_tac \"some_part_of_current_subgoal = f(Q)\")</p>\n<p>without explicitly giving P1 in my proof script?</p>\n</blockquote>\n<p>This is currently not possible. It could be achieved with a little ML<br>\nhacking, but I think it is better to derive rules in the right shape<br>\n(as above) and let unification do the work for you.</p>\n<p>Hope this helps...</p>\n<p>Alex</p>",
        "id": 294047492,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660817919
    },
    {
        "content": "<p>From: Norbert Schirmer &lt;<a href=\"mailto:schirmer@informatik.tu-muenchen.de\">schirmer@informatik.tu-muenchen.de</a>&gt;<br>\nHello Nicole,</p>\n<p>I would not propose to start building some complicated tactics, or  <br>\ninstantiations.<br>\nIn my experience with Hoare logics the following approach worked out  <br>\nthe best:<br>\n1) For the definition of the calculus take the variant<br>\n{ f(Q) } stmt { Q }. This reflects the core idea of the rule.<br>\n2) For application of the calculus in a backwards manner define a  <br>\nvariant that is<br>\njust a composition of the rule in 1) and a consequence rule that you  <br>\nsurely also have<br>\nin your core calculus.</p>\n<p>P --&gt; f (Q) ==&gt; {P} stmt {Q}</p>\n<p>This rule can be applied to any P and Q and also deliberates you from  <br>\nexplicitely<br>\nderiving P=f(Q).</p>\n<p>Norbert</p>",
        "id": 294047505,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660817925
    }
]