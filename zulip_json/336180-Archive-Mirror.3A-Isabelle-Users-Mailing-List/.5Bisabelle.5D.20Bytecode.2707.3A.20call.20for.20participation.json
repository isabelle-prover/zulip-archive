[
    {
        "content": "<p>From: Fausto Spoto &lt;<a href=\"mailto:fausto.spoto@univr.it\">fausto.spoto@univr.it</a>&gt;<br>\n==============================================================================</p>\n<p>Call for Participation</p>\n<p>Bytecode 2007</p>\n<p>Second Workshop on Bytecode Semantics,<br>\n                  Verification, Analysis and Transformation</p>\n<p>(European Joint Conferences on<br>\n                       Theory and Practice of Software)</p>\n<p>March 31, 2007</p>\n<p>Braga, Portugal</p>\n<p><a href=\"http://profs.sci.univr.it/~spoto/Bytecode07/\">http://profs.sci.univr.it/~spoto/Bytecode07/</a></p>\n<p>Registration:<br>\n<a href=\"http://www.di.uminho.pt/etaps07/\">http://www.di.uminho.pt/etaps07/</a></p>\n<p>==============================================================================</p>\n<p>Bytecode, such as produced by e.g. Java and .NET compilers, has become<br>\nan important topic of interest, both for industry and academia.  The<br>\nindustrial interest stems from the fact that bytecode is typically<br>\nused for the Internet and mobile devices (smartcards, phones, etc.),<br>\nwhere security is a major issue. Moreover, bytecode is<br>\ndevice-independent and allows dynamic loading of classes, which<br>\nprovides an extra challenge for the application formal methods. In<br>\naddition,<br>\nthe unstructuredness of the code and the pervasive presence of the<br>\noperand stack also provide extra challenges for the analysis of<br>\nbytecode.<br>\nThis workshop focuses on the latest developments in the semantics,<br>\nverification, analysis, and transformation of bytecode.  Both new<br>\ntheoretical results and tool demonstrations are presented.</p>\n<p>Workshop program:</p>\n<p>Invited talk: Peter Mueller<br>\n(ETH Zurich)<br>\nModular Verification of Object Invariants in Spec#</p>\n<p>Tarmo Uustala and Ando Saabas<br>\n(Tallinn University of Technology, Estonia)<br>\nType Systems for Optimising Stack-based Code</p>\n<p>Jaroslav Sevcik<br>\n(University of Edinburgh, UK)<br>\nProving Resource Consumption of Low-level and Programs<br>\nusing Automated Theorem Provers</p>\n<p>Hermann Lehner and Peter Mueller<br>\n(ETH, Zurich, Switzerland)<br>\nFormal Translation of Bytecode into BoogiePL</p>\n<p>Emilie Balland, Pierre-Etienne Moreau and Antoine Reilles<br>\n(Loria, France)<br>\nBytecode Rewriting in Tom</p>\n<p>Jesse McGeachie and Juergen Dingel<br>\n(Queen's University, Canada)<br>\nTranslate One, Analyze Many: Leveraging the Microsoft Intermediate<br>\nLanguage<br>\nand Source Code Transformation for Model Checking</p>\n<p>Samir Genaim, Puri Arenas, Damiano Zanardini, German Puebla and Elvira<br>\nAlbert<br>\n(Universidad Politecnica de Madrid, Universidad Complutense de Madrid,<br>\nSpain)<br>\nPractical Assessment of Cost Analysis for Java Bytecode</p>\n<p>Theo Ruys and Niels H.M. Aan de Brugh<br>\n(University of Twente, The Netherlands)<br>\nMMC: the Mono Model Checker</p>\n<p>Miguel Gomez-Zamalloa, Elvira Albert and German Puebla<br>\n(Universidad Politecnica de Madrid, Universidad Complutense de Madrid,<br>\nSpain)<br>\nImproving the Decompilation of Java Bytecode to Prolog by Partial<br>\nEvaluation</p>\n<p>Quan Nguyen and Bernhard Scholz<br>\n(University of New South Wales, University of Sydney, Australia)<br>\nComputing SSA Form with Matrices</p>\n<p>Mario Mendez, Jorge Navas and Manuel Hermenegildo<br>\n(University of New Mexico, USA)<br>\nAn Efficient, Parametric Fixpoint Algorithm for Incremental Analysis<br>\nof Java Bytecode</p>\n<p>Program committee:</p>\n<p>Frederic Besson, IRISA, France<br>\nSamir Genaim, Universidad Politecnica de Madrid, Spain<br>\nMarieke Huisman, INRIA Sophia Antipolis, France (co-chair)<br>\nFrancesco Logozzo, Microsoft Research, USA<br>\nPeter Mueller, ETH Zurich, Switzerland<br>\nErik Poll, Radboud University Nijmegen, The Netherlands<br>\nFausto Spoto, Universita' di Verona, Italy (co-chair)<br>\nJan Vitek, Purdue University, USA</p>",
        "id": 294046309,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660817415
    }
]