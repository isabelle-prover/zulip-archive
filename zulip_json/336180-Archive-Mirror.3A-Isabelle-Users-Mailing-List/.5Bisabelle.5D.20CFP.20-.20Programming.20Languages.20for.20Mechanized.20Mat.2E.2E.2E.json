[
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nFIRST CALL FOR PAPERS</p>\n<p>Second Workshop on<br>\n             Programming Languages for Mechanized Mathematics<br>\n                              (PLMMS 2008)</p>\n<p><a href=\"http://events.cs.bham.ac.uk/cicm08/workshops/plmms/\">http://events.cs.bham.ac.uk/cicm08/workshops/plmms/</a></p>\n<p>As part of CICM / Calculemus 2008<br>\n                     Birmingham, UK, 28-29 July 2008</p>\n<p>This workshop is focused on the intersection of programming languages<br>\n(PL) and mechanized mathematics systems (MMS). The latter category<br>\nsubsumes present-day computer algebra systems (CAS), interactive proof<br>\nassistants (PA), and automated theorem provers (ATP), all heading<br>\ntowards fully integrated mechanized mathematical assistants that are<br>\nexpected to emerge eventually (cf. the objective of Calculemus).</p>\n<p>The two subjects of PL and MMS meet in the following topics, which are<br>\nof particular interest to this workshop:</p>\n<p>* Dedicated input languages for MMS: covers all aspects of languages<br>\n    intended for the user to deploy or extend the system, both<br>\n    algorithmic and declarative ones. Typical examples are tactic<br>\n    definition languages such as Ltac in Coq, mathematical proof<br>\n    languages as in Mizar or Isar, or specialized programming<br>\n    languages built into CA systems. Of particular interest are the<br>\n    semantics of those languages, especially when current ones are<br>\n    untyped.</p>\n<p>* Mathematical modeling languages used for programming: covers the<br>\n    relation of logical descriptions vs. algorithmic content. For<br>\n    instance the logic of ACL2 extends a version of Lisp, that of Coq<br>\n    is close to Haskell, and some portions of HOL are similar to ML<br>\n    and Haskell, while Maple tries to do both simultaneously. Such<br>\n    mathematical languages offer rich specification capabilities,<br>\n    which are rarely available in regular programming languages. How<br>\n    can programming benefit from mathematical concepts, without<br>\n    limiting mathematics to the computational worldview?</p>\n<p>* Programming languages with mathematical specifications: covers<br>\n    advanced \"mathematical\" concepts in programming languages that<br>\n    improve the expressive power of functional specifications, type<br>\n    systems, module systems etc. Programming languages with dependent<br>\n    types are of particular interest here, as is intentionality vs<br>\n    extensionality.</p>\n<p>* Language elements for program verification: covers specific means<br>\n    built into a language to facilitate correctness proofs using MMS.<br>\n    For example, logical annotations within programs may be turned<br>\n    into verification conditions to be solved in a proof assistant<br>\n    eventually. How need MMS and PL to be improved to make this work<br>\n    conveniently and in a mathematically appealing way?</p>\n<p>These issues have a very colorful history. Many PL innovations first<br>\nappeared in either CA or proof systems first, before migrating into<br>\nmore mainstream programming languages. Some examples include type<br>\ninference, dependent types, generics, term-rewriting, first-class<br>\ntypes, first-class expressions, first-class modules, code extraction<br>\netc. However, such innovations were never aggressively pursued by<br>\nbuilders of MMS, but often reconstructed by programming language<br>\nresearchers. This workshop is an opportunity to present the latest<br>\ninnovations in MMS design that may be relevant to future programming<br>\nlanguages, or conversely novel PL principles that improve upon<br>\nimplementation and deployment of MMS.</p>\n<p>We also want to critically examine what has worked, and what has not.<br>\nWhy are all the languages of mainstream CA systems untyped? Why are the<br>\n(strongly typed) proof assistants so much harder to use than a typical<br>\nCAS? What forms of polymorphism exist in mathematics? What forms of<br>\ndependent types may be used in mathematical modeling? How can MMS<br>\nregain the upper hand on issues of \"genericity\" and \"modularity\"? What<br>\nare the biggest barriers to using a more mainstream language as a host<br>\nlanguage for a CAS or PA/ATP?</p>\n<p>Submission</p>\n<hr>\n<p>Submission works through EasyChair<br>\n<a href=\"http://www.easychair.org/conferences/?conf=plmms2008\">http://www.easychair.org/conferences/?conf=plmms2008</a></p>\n<p>Two kinds of papers will be considered:</p>\n<ul>\n<li>\n<p>Full research papers may be up to 12 pages long. Authors of<br>\n   accepted papers are expected to present their work on the workshop<br>\n   in a regular talk.</p>\n</li>\n<li>\n<p>Position papers may be up to 4 pages long. The workshop<br>\n   presentation of accepted position papers consists of two parts: a<br>\n   stimulating statement of certain issues or challenges by the<br>\n   author, followed by a discussion in the plenum.</p>\n</li>\n</ul>\n<p>Papers should use the usual ENTCS style <a href=\"http://www.entcs.org/prelim.html\">http://www.entcs.org/prelim.html</a><br>\n(11 point version), and will be reviewed by the program<br>\ncommittee. Informal workshop proceedings will be circulated as a<br>\ntechnical report. We also plan post-workshop proceedings of improved<br>\nresearch papers, or position papers that have been completed into full<br>\npapers, as a special issue in a journal; papers from both PLMMS 2007<br>\nand 2008 will be considered here (details to follow).</p>\n<p>Programme Committee</p>\n<hr>\n<p>Jacques Carette (Co-Chair) (McMaster University, Canada)<br>\n   John Harrison              (Intel Corporation, USA)<br>\n   Hugo Herbelin              (INRIA, Ecole polytechnique, France)<br>\n   James McKinna              (Radboud University Nijmegen, Netherlands)<br>\n   Ulf Norell                 (Chalmers University, Sweden)<br>\n   Bill Page<br>\n   Christophe Raffalli        (Universite de Savoie, France)<br>\n   Josef Urban                (Charles University, Czech Republic)<br>\n   Stephen Watt               (ORCCA, University of Western Ontario, Canada)<br>\n   Makarius Wenzel (Co-Chair) (Technische Universitaet Muenchen, Germany)<br>\n   Freek Wiedijk              (Radboud University Nijmegen, Netherlands)</p>\n<p>Important Dates</p>\n<hr>\n<p>* Submission deadline - 5 May 2008<br>\n  * Notification of acceptance - 6 June 2008<br>\n  * Final version - 7 July 2008 (approximately)<br>\n  * Workshop - 28-29 July 2008</p>",
        "id": 294055960,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660821593
    }
]