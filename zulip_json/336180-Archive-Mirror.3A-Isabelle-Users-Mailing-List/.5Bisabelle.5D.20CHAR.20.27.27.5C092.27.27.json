[
    {
        "content": "<p>From: Lars Noschinski &lt;<a href=\"mailto:noschinl@in.tum.de\">noschinl@in.tum.de</a>&gt;<br>\nHi everyone,</p>\n<p>I noticed that in HOL terms</p>\n<p>''\\091'' is the string ''[''<br>\n  ''\\093'' is the string '']''</p>\n<p>but</p>\n<p>''\\092'' is not the backslash, but gives a syntax error.</p>\n<p>Why is that and what is the \"correct\" syntax for a term level string<br>\ncontaining a backslash?</p>\n<p>BTW, using the string cartouche syntax in<br>\n~~/src/HOL/ex/Cartouche_Examples works here.</p>\n<p>-- Lars</p>",
        "id": 294645875,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661164046
    },
    {
        "content": "<p>From: Andreas Lochbihler &lt;<a href=\"mailto:andreas.lochbihler@inf.ethz.ch\">andreas.lochbihler@inf.ethz.ch</a>&gt;<br>\nDear Lars,</p>\n<p>I remember having run into the same problem a while ago. At that time, I just used the <br>\nnibble notation, i.e., Char Nibble5 NibbleC as in</p>\n<p>definition backsl<br>\nwhere [simplified]:<br>\n   \"backsl = ''This string contains a '' @ Char Nibble5 NibbleC # ''backslash''\"</p>\n<p>This is of course not a solution or explanation, just a workaround.</p>\n<p>Best,<br>\nAndreas</p>",
        "id": 294645898,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661164058
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nI can't recall all reasons for this on the spot -- the full explanations <br>\nwould require archeological digging of approx. 20 years of history.</p>\n<p>Generally, there is a problem that an ASCII backslash is used for escaping <br>\nin various \"text containers\", e.g. double quoted strings of outer syntax. <br>\nIt also has a special meaning for Isabelle symbol notation: \\&lt;foobar&gt;</p>\n<p>In distant past, we've had two (!) versions of Proof General -- one for <br>\nthe ML toplevel one for the Isar toplevel -- with different quoting and <br>\nescaping rules.  In these dark times the above special case was <br>\nintroduced.</p>\n<p>Today we are no longer bound by any toplevel loop, and have just to deal <br>\nwith outer + inner syntax of Isabelle.</p>\n<p>When the question about \\n in Isabelle/HOL strings came up some time ago, <br>\nthe escape hatch was to introduce \\&lt;newline&gt; for that.  One could do the <br>\nsame for \\&lt;backslash&gt; for example.</p>\n<p>Overall, I am not sure.  What are the concrete applications?</p>\n<p>Makarius</p>",
        "id": 294645926,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661164073
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nThat is a slightly different question.  In these examples, I've made some <br>\nexperiments about potential futures of Isabelle/HOL syntax.</p>\n<p>E.g. one could allow outer cartouches routinely to embed inner syntax <br>\nitems.  And within the inner syntax, double quotes for string literals. <br>\nThat would make Isabelle/HOL material look more conventional, although <br>\nbackslashes still have a role as escape.</p>\n<p>Here is an example:</p>\n<p>term_cartouche ‹\"a\\\\b\"›</p>\n<p>In these experiments I was optimistic and just allowed the backslash in <br>\nthat form.  More care would be needed to think about printing that in <br>\ndifferent contexts.</p>\n<p>Makarius</p>",
        "id": 294645932,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661164077
    },
    {
        "content": "<p>From: Andreas Lochbihler &lt;<a href=\"mailto:andreas.lochbihler@inf.ethz.ch\">andreas.lochbihler@inf.ethz.ch</a>&gt;<br>\nHi Makarius,</p>\n<p>My usecase for \\ inside string literals was related to code generation. I wanted to write <br>\na generate a program with the code generator such that one of the functions returns a <br>\nstring representation of the computed data, which should contain among others backslashes <br>\n(used for quoting other characters in that string). For example, I defined literal strings <br>\nlike</p>\n<p>definition lit_paren = STR [Char Nibble5 NibbleC, CHR ''('']</p>\n<p>such that the code generator produces in ML</p>\n<p>val lit_paren = \"\\(\";</p>\n<p>which can then be used in other parts.</p>\n<p>Andreas</p>",
        "id": 294648701,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661165211
    }
]