[
    {
        "content": "<p>From: Simon Winwood &lt;<a href=\"mailto:sjw@cse.unsw.edu.au\">sjw@cse.unsw.edu.au</a>&gt;<br>\nTom and I have stumbled upon an interesting feature of Isabelle's <br>\ncalculation style reasoning support.  Consider the following proof</p>\n<p>lemma <br>\n  \"X = Y\"<br>\nproof -<br>\n  have \"X = z\" sorry<br>\n  also have \"\\&lt;dots&gt; = z\" by simp  <br>\n  also (* want X = z, get X = X *)</p>\n<p>After the 'also', calculation is \"X = X\", rather than<br>\nthe \"X = z\" you would expect.  We figured that the reason for<br>\nthis is that the chaining rule is forw_subst</p>\n<p>[| a = b; P b |] ==&gt; P a</p>\n<p>which, when unified with the above two rules gives P == %x. x = x<br>\nhence P X == X = X</p>\n<p>I suppose this is a corner case, but it could be solved by trying trans<br>\nbefore forw_subst.</p>\n<p>Simon</p>",
        "id": 294117502,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660838725
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nThe calculational system tries rules from the context in the given order <br>\n(cf. print_trans_rules), and trans comes before forw_subst in the main HOL <br>\nlibrary as one would normally expect.</p>\n<p>The reason why the intermediate reflexive step above is ignored is due to <br>\nthe policy to filter out results that do not make progress: composing <br>\ntrans with a reflexive result duplicates the original fact, so it is <br>\nfiltered out in the enumeration.  This principle has been there in Isar <br>\ncalculations almost from the very beginning around 1999/2000 -- it allows <br>\nmore useful steps involving advanced substitution rules.</p>\n<p>Makarius</p>",
        "id": 294117607,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660838748
    }
]