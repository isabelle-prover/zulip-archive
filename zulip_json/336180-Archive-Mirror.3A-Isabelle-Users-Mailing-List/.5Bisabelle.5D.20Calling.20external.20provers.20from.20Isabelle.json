[
    {
        "content": "<p>From: Moa Johansson &lt;<a href=\"mailto:moa.johansson@chalmers.se\">moa.johansson@chalmers.se</a>&gt;<br>\nHello,</p>\n<p>We are currently thinking of trying to connect an external inductive prover (which works on Haskell programs) with Isabelle. For some very early experiments, we're looking to do something like:</p>\n<p>1) Call Isabelle's code generator to produce a Haskell file of a given theory.<br>\n2) Call our tool on the generated Haskell file (via a bash command).</p>\n<p>Got two questions on how to set this up a bit nicer than currently:</p>\n<p>1) We currently use the Isar commad \"export_code\" to generate a Haskell-file, followed by some custom ML commands to call our prover. It would be nice to bake this together into one command. Where can I find the ML-function corresponding to \"export_code\" (for Haskell in this case)?</p>\n<p>2) To run our tool we use some bash commands, called from a ML-block using the OS.Process.system function. This takes a few seconds in Proof General (as I'd expect), but in JEdit it gets mysteriously stuck and takes a very long time to process the command and seem to just increasingly gobble up memory. </p>\n<p>I'm guessing that there is some preferred way to call out to shell commands/external provers in Isabelle (as Sledgehammer does it), probably using threads? Any tips here to make it run more smootly?</p>\n<p>Best,<br>\nMoa</p>",
        "id": 294235198,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660904463
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nOn Wed, 27 Feb 2013, Moa Johansson wrote:</p>\n<blockquote>\n<p>1) We currently use the Isar commad \"export_code\" to generate a <br>\nHaskell-file, followed by some custom ML commands to call our prover. It <br>\nwould be nice to bake this together into one command. Where can I find <br>\nthe ML-function corresponding to \"export_code\" (for Haskell in this <br>\ncase)?</p>\n</blockquote>\n<p>I am no expert on the code generator, but to get to the ML definition of <br>\nthings there is a standard way in Isabelle/jEdit: use C-hover-click to <br>\nfollow the implicit hyperlink of the command keyword in the theory source <br>\nwhere you see it.  This directs you quickly to <br>\n~~/src/Tools/Code/code_target.ML where you can then follow 2-3 more <br>\nindirections to the main functions.</p>\n<p>Maybe someone should make a video to explain the important C-hover-click <br>\ngesture in Isabelle/jEdit.</p>\n<blockquote>\n<p>2) To run our tool we use some bash commands, called from a ML-block <br>\nusing the OS.Process.system function. This takes a few seconds in Proof <br>\nGeneral (as I'd expect), but in JEdit it gets mysteriously stuck and <br>\ntakes a very long time to process the command and seem to just <br>\nincreasingly gobble up memory.</p>\n</blockquote>\n<p>OS.Process.system is one of these critical functions of the NJ Basis <br>\nlibrary that are better avoided in Isabelle/ML.  In 2008 we've spent many <br>\nweeks to wrap it up in a way that works with interrupts.</p>\n<p>The proper entry point is now called Isabelle_System.bash.</p>\n<p>Makarius</p>",
        "id": 294235223,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660904475
    },
    {
        "content": "<p>From: Florian Haftmann &lt;<a href=\"mailto:florian.haftmann@informatik.tu-muenchen.de\">florian.haftmann@informatik.tu-muenchen.de</a>&gt;<br>\nHi Moa,</p>\n<blockquote>\n<p>1) Call Isabelle's code generator to produce a Haskell file of a given<br>\ntheory.</p>\n</blockquote>\n<p>as a first entry try</p>\n<p>Code_Target.produce_code â€¦</p>\n<p>This should suffice for a proof of concept.</p>\n<p>Building code from own snippets and generated code is a black art on its<br>\nown -- if your project evolves into something persistent, get back here<br>\nand I'll try my best to provide you with the most robust and convenient<br>\nways available to arrange things then.</p>\n<p>Cheers,<br>\n    Florian<br>\n<a href=\"/user_uploads/14278/EAVKVF-aUBMUJciTHNxGtfHP/signature.asc\">signature.asc</a></p>",
        "id": 294235363,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660904527
    },
    {
        "content": "<p>From: Lukas Bulwahn &lt;<a href=\"mailto:bulwahn@in.tum.de\">bulwahn@in.tum.de</a>&gt;<br>\nHi Moa,</p>\n<p>For the narrowing-based Quickcheck in Isabelle, I already use <br>\nIsabelle's code generator to produce a Haskell file,<br>\npass it to the Haskell compiler, and read back its result.</p>\n<p>The implementation is in <br>\n<a href=\"http://isabelle.in.tum.de/repos/isabelle/file/e6524a89c9e3/src/HOL/Tools/Quickcheck/narrowing_generators.ML\">http://isabelle.in.tum.de/repos/isabelle/file/e6524a89c9e3/src/HOL/Tools/Quickcheck/narrowing_generators.ML</a><br>\nFunction value and dynamic_value_strict provide the compilation and the <br>\nexecution.</p>\n<p>Maybe you can reuse part of it, or generalize it to be useful for a <br>\nlarger audience.<br>\nFlorian and I discussed extracting this part into a more general <br>\n\"Haskell evaluator\" module.<br>\nHowever as it was of low priority on my todo list and time is generally <br>\nrare, we never<br>\ndid this.</p>\n<p>Lukas</p>",
        "id": 294238091,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660905684
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nHere is the public release version of that file: <br>\n<a href=\"http://isabelle.in.tum.de/repos/isabelle/file/Isabelle2013/src/HOL/Tools/Quickcheck/narrowing_generators.ML\">http://isabelle.in.tum.de/repos/isabelle/file/Isabelle2013/src/HOL/Tools/Quickcheck/narrowing_generators.ML</a></p>\n<p>As a rule of thumb: changset id -&gt; isabelle-dev, proper releases -&gt; <br>\nisabelle-users.</p>\n<p>Makarius</p>",
        "id": 294238232,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660905752
    }
]