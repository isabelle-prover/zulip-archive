[
    {
        "content": "<p>From: Hernan Ponce-De-Leon &lt;<a href=\"mailto:hernan.ponce-de-leon@inria.fr\">hernan.ponce-de-leon@inria.fr</a>&gt;<br>\nHi all, </p>\n<p>I have two locales A and B. I set B as a sublocale of A. The problem I have is when trying to access to the \"part\" of B that comes from A. Here is an example: </p>\n<p>locale A = <br>\nfixes A n <br>\nassumes as: g A n </p>\n<p>locale B = <br>\nfixes A n <br>\nassumes bs: \"g A n\" </p>\n<p>sublocale B &lt; A <br>\nsorry </p>\n<p>If I print the B locale I get: </p>\n<p>locale elements: <br>\nfixes A :: \"'a\" <br>\nand n :: \"'b\" <br>\nassumes \"PROP B A n\" <br>\nnotes A_axioms <br>\n= <br>\n(<code>PROP A A n</code>) [attribute &lt;attribute&gt;] <br>\nnotes as <br>\n= <br>\n<code>?f A n</code> <br>\nnotes B_axioms <br>\n= <br>\n(<code>PROP B A n</code>) [attribute &lt;attribute&gt;] <br>\nnotes bs <br>\n= <br>\n<code>?g A n</code> </p>\n<p>but I can't access to <a href=\"http://B.as\">B.as</a> </p>\n<p>One way I found to solve this was: </p>\n<p>context B begin <br>\nlemmas as = as <br>\nend </p>\n<p>This solves the problem but produce a new one: when I set an interpretation of B, I get a \"duplicate fact declaration\" error. An obvious way to solve this is: </p>\n<p>context B begin <br>\nlemmas as' = as <br>\nend </p>\n<p>Is there any way to access to <a href=\"http://B.as\">B.as</a> with a renaming? </p>\n<p>Thank you very much. </p>\n<p>Hernan</p>",
        "id": 294137238,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660844743
    },
    {
        "content": "<p>From: Andreas Lochbihler &lt;<a href=\"mailto:andreas.lochbihler@kit.edu\">andreas.lochbihler@kit.edu</a>&gt;<br>\nDear Hernan,</p>\n<p>it seems to me that you are trying to use locales other than the \"official\" way. <br>\nNoramlly, you should never need to access the theorems in a locale when the <br>\ncontext does not contain the locale. (Although there are some special cases when <br>\nthis does not work, but then, you lose all support from the locale system.)<br>\nWhy do you have to access as outside the context of B and its interpretations?</p>\n<p>Every local leaves a trace of its declarations in the global theory context, <br>\nwhich is what you are trying to utilize: <a href=\"http://A.as\">A.as</a> is the trace declaring the <br>\nassumption \"g A n\" in locale A. Thus, there is no <a href=\"http://B.as\">B.as</a> as B does not declare a <br>\ntheorem as by itself. If you declare theorems with the same name multiple times, <br>\nyou get into trouble, as you have experienced yourself.</p>\n<p>Note that <a href=\"http://A.as\">A.as</a> refers to the theorem</p>\n<p>A ?A.0 ?n ==&gt; g ?A.0 n</p>\n<p>i.e., there is an explicit premise that states the assumptions of locale A.</p>\n<p>When working with locales, you usually never refer to the declarations in the <br>\nglobal theory context - even if the global terms show up in output buffers. <br>\nInstead, prove your lemmas in the context B or interpret B for specific <br>\nparameters first (either globally with interpretation or locally in an Isar <br>\nproof with interpret). Then, you can access as without prefixes.</p>\n<p>Hope this helps,<br>\nAndreas</p>\n<p>Hernan Ponce-De-Leon schrieb:</p>",
        "id": 294137356,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660844777
    },
    {
        "content": "<p>From: Andreas Lochbihler &lt;<a href=\"mailto:andreas.lochbihler@kit.edu\">andreas.lochbihler@kit.edu</a>&gt;<br>\nDear Hernan,</p>\n<p>I see your problem. It is already in the theories for Presburger Automata in the <br>\nAFP. The lemma duplication</p>\n<p>context aut_dfa begin<br>\nlemmas trans_is_node = trans_is_node<br>\nlemmas steps_is_node = steps_is_node<br>\nlemmas reach_is_node = reach_is_node<br>\nend</p>\n<p>leads to the error about duplicate facts when you interpret aut_dfa. From what I <br>\nrealised from a quick look over the sources, aut_dfa is not meant to be <br>\ninterpreted. Rather, it serves to obtain a conditional interpretation of <br>\nAutomaton with the parameters instantiated as</p>\n<p>Automaton \"dfa_trans A\" \"dfa_is_node A\" \"is_alph n\"</p>\n<p>If your problem is simply to mimick the access to instantiated theorems from <br>\nAutomaton, would recommend the following scheme:</p>\n<p>lemma (in aut_dfa) Automaton:<br>\n   \"Automaton (dfa_trans A) (dfa_is_node A) (is_alph n)\"<br>\nby unfold_locales</p>\n<p>Then, Automaton.my_thm[OF aut_dfa.Automaton] yields the same theorem as you <br>\nwould get from aut_dfa.my_thm, if you had the declaration<br>\nlemmas my_thm = my_thm in the context aut_dfa.</p>\n<p>In particular, declarations like</p>\n<p>lemmas dfa_trans_is_node = aut_dfa.trans_is_node [OF aut_dfa.intro]</p>\n<p>would then become</p>\n<p>lemmas dfa_trans_is_node =<br>\n   Automaton.trans_is_node[OF aut_dfa.Automaton, OF aut_dfa.intro]</p>\n<p>I would recommend to delete the above lemmas declarations in the AFP, as they <br>\nare only used for instantiation in dfa_trans_is_node and others. Thus, one could <br>\ninterpret aut_dfa locale. Alternatively, one could add a prefix the sublocale <br>\ndeclaration to disambiguate the theorem names. Possibly, Stefan and Markus have <br>\na better idea as this is their development.</p>\n<p>Andreas</p>\n<p>Hernan Ponce-De-Leon schrieb:</p>",
        "id": 294137394,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660844789
    },
    {
        "content": "<p>From: Hernan Ponce-De-Leon &lt;<a href=\"mailto:hernan.ponce-de-leon@inria.fr\">hernan.ponce-de-leon@inria.fr</a>&gt;<br>\nWe thought in something like that but we didn't know how to do it.</p>\n<p>Thank you very much for your answer Andreas</p>\n<p>Hernan.</p>\n<p>----- Mensaje original -----</p>",
        "id": 294137415,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660844795
    }
]