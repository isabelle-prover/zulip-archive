[
    {
        "content": "<p>From: Joshua Chen &lt;<a href=\"mailto:joshua.chen@uibk.ac.at\">joshua.chen@uibk.ac.at</a>&gt;<br>\nDear list,</p>\n<p>I'm writing a definitional package type thing and am having trouble<br>\ngetting Outer_Syntax.local_theory to add the generated definitional<br>\ntheorem to a named theorem. The following is a minimal (non-)working<br>\nexample:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">theory</span> <span class=\"n\">Test</span>\n<span class=\"kp\">imports</span> <span class=\"n\">Pure</span>\n<span class=\"kp\">keywords</span> <span class=\"s\">\"def_id\"</span> <span class=\"o\">::</span> <span class=\"n\">thy_decl</span>\n<span class=\"k\">begin</span>\n\n<span class=\"n\">named_theorems</span> <span class=\"n\">rules</span>\n\n<span class=\"k\">ML</span> <span class=\"err\">‹</span>\n<span class=\"n\">Outer_Syntax.local_theory</span> <span class=\"err\">\\&lt;^</span><span class=\"n\">command_keyword</span><span class=\"err\">&gt;‹</span><span class=\"n\">def_id</span><span class=\"err\">›</span> <span class=\"s\">\"\"</span>\n  <span class=\"o\">(</span><span class=\"n\">Scan.succeed</span> <span class=\"o\">(</span><span class=\"n\">fn</span> <span class=\"n\">lthy</span> <span class=\"o\">=</span><span class=\"err\">&gt;</span>\n    <span class=\"k\">let</span>\n      <span class=\"n\">val</span> <span class=\"o\">((_,</span> <span class=\"o\">(_,</span> <span class=\"n\">th</span><span class=\"o\">)),</span> <span class=\"n\">lthy'</span><span class=\"o\">)</span> <span class=\"o\">=</span>\n        <span class=\"n\">Local_Theory.define</span> <span class=\"o\">(</span>\n          <span class=\"o\">(</span><span class=\"n\">Binding.qualified_name</span> <span class=\"s\">\"id\"</span><span class=\"o\">,</span> <span class=\"n\">NoSyn</span><span class=\"o\">),</span>\n          <span class=\"o\">((</span><span class=\"n\">Binding.qualified_name</span> <span class=\"s\">\"id_def\"</span><span class=\"o\">,</span> <span class=\"o\">[]),</span> <span class=\"err\">@</span><span class=\"ow\">{</span><span class=\"kt\">term</span> <span class=\"s\">\"λx. x\"</span><span class=\"ow\">}</span><span class=\"o\">)</span>\n        <span class=\"o\">)</span> <span class=\"n\">lthy</span>\n    <span class=\"kp\">in</span>\n      <span class=\"n\">tracing</span> <span class=\"o\">(</span><span class=\"err\">@</span><span class=\"ow\">{</span><span class=\"n\">make_string</span><span class=\"ow\">}</span> <span class=\"n\">th</span><span class=\"o\">)</span><span class=\"err\">;</span>\n      <span class=\"n\">lthy'</span> <span class=\"o\">|</span><span class=\"err\">&gt;</span> <span class=\"n\">Context.proof_map</span> <span class=\"o\">(</span><span class=\"n\">Named_Theorems.add_thm</span>\n<span class=\"err\">\\&lt;^</span><span class=\"n\">named_theorems</span><span class=\"err\">&gt;‹</span><span class=\"n\">rules</span><span class=\"err\">›</span> <span class=\"n\">th</span><span class=\"o\">)</span>\n    <span class=\"k\">end</span><span class=\"o\">))</span>\n<span class=\"err\">›</span>\n\n<span class=\"c\">(* prints \"id == λx. x\" *)</span>\n<span class=\"n\">def_id</span>\n\n<span class=\"c\">(* these are fine *)</span>\n<span class=\"kt\">term</span> <span class=\"n\">id</span>\n<span class=\"kt\">thm</span> <span class=\"n\">id_def</span>\n\n<span class=\"c\">(* EMPTY! *)</span>\n<span class=\"kt\">thm</span> <span class=\"n\">rules</span>\n\n<span class=\"k\">end</span>\n</code></pre></div>\n<p>Am I using the wrong approach? Thanks in advance!</p>\n<p>Josh</p>",
        "id": 294766171,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661202051
    }
]