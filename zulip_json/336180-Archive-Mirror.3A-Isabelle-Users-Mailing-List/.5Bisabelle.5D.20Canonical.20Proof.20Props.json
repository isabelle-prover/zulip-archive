[
    {
        "content": "<p>From: <a href=\"mailto:Ed.Pierzchalski@data61.csiro.au\">Ed.Pierzchalski@data61.csiro.au</a><br>\nHi all,</p>\n<p>I'm currently working on extracting theorem dependencies from proof terms. I've noticed that the prop one gets from <code>Thm.full_prop_of</code>  sometimes doesn't match the prop in the topmost proof body of a <code>thm</code>. As an example, the following two props are different:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">theory</span> <span class=\"n\">Scratch</span>\n<span class=\"kp\">imports</span> <span class=\"n\">Main</span>\n<span class=\"k\">begin</span>\n\n<span class=\"k\">declare</span> <span class=\"o\">[[</span><span class=\"n\">show_sorts</span><span class=\"o\">]]</span>\n<span class=\"k\">ML</span> <span class=\" -Symbol\">\\&lt;open&gt;</span>\n  <span class=\"n\">val</span> <span class=\"n\">prop1</span> <span class=\"o\">=</span> <span class=\"n\">Thm.full_prop_of</span> <span class=\"err\">@</span><span class=\"ow\">{</span><span class=\"kt\">thm</span> <span class=\"n\">refl</span><span class=\"ow\">}</span><span class=\"err\">;</span>\n  <span class=\"n\">val</span> <span class=\"n\">prop2</span> <span class=\"o\">=</span> <span class=\"err\">@</span><span class=\"ow\">{</span><span class=\"kt\">thm</span> <span class=\"n\">refl</span><span class=\"ow\">}</span>\n    <span class=\"o\">|</span><span class=\"err\">&gt;</span> <span class=\"n\">Thm.proof_body_of</span>\n    <span class=\"o\">|</span><span class=\"err\">&gt;</span> <span class=\"o\">(</span><span class=\"n\">fn</span> <span class=\"o\">(</span><span class=\"n\">PBody</span> <span class=\"ow\">{</span><span class=\"n\">thms</span><span class=\"o\">,</span> <span class=\"ow\">...}</span><span class=\"o\">)</span> <span class=\"o\">=</span><span class=\"err\">&gt;</span> <span class=\"n\">thms</span><span class=\"o\">)</span>\n    <span class=\"o\">|</span><span class=\"err\">&gt;</span> <span class=\"n\">List.hd</span>\n    <span class=\"o\">|</span><span class=\"err\">&gt;</span> <span class=\"n\">snd</span>\n    <span class=\"o\">|</span><span class=\"err\">&gt;</span> <span class=\"n\">Proofterm.thm_node_prop</span><span class=\"err\">;</span>\n<span class=\" -Symbol\">\\&lt;close&gt;</span>\n</code></pre></div>\n<p>In particular, <code>prop2</code> has the <code>type_class</code> sort constraint pulled out as a premise, whereas <code>prop1</code> leaves it as a constraint on types in the term. As far as I can tell, the transformation only occurs in proof bodies as part of a post-processing step introduced by <code>Proofterm.thm_proof</code>.</p>\n<p>I ran into the above while attempting to disambiguate the names that occur in proof bodies. That is, if a proof body refers to a prop <code>p</code> with name <code>\"foo_1\"</code>, I need to distinguish between <code>p</code> being proven by the first theorem in a thm list (<code>foo(1)</code>) or by a thm with the actual name <code>foo_1</code>. Since <code>Thm.full_prop_of</code> and proof bodies sometimes disagree, the easiest solution at the time was to use the proof body terms as a 'normal form', which seems unsatisfying. So, for my own education:</p>\n<ul>\n<li>What is the canonical way to get the dependencies of a thm?</li>\n<li>What is the canonical way to disambiguate between the first theorem of <code>foo</code> vs. a theorem named <code>foo_1</code>?</li>\n</ul>\n<p>Regards,<br>\n--Ed</p>",
        "id": 294746992,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661193899
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nI occasionally ask myself the same questions. After so many years the<br>\nsituation of proof terms is still not quite clear.</p>\n<p>In particular, the concept did not catch up with the \"authentic fact<br>\nname\" reform from some years ago: In distant past, a fact name in the<br>\ntheory was just a comment, and the slightly odd \"disambiguation\" wrt.<br>\nthe proposition was used to make sense of in as proof terms. Now the<br>\nfact environment of the context is authentic, but proof terms still have<br>\na rather weak notion of derivation name internally.</p>\n<p>There are other fine points that don't quite work, e.g. see the<br>\nimplementation of the commands 'thm_deps' and 'unused_thms'.</p>\n<p>As usual, one needs to look very closely at the status-quo, and figure<br>\nout if a particular application has the chance to go through.</p>\n<p>Which leaves the canonical question: What application do you have in mind?</p>\n<p>Makarius</p>",
        "id": 294747014,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661193906
    },
    {
        "content": "<p>From: <a href=\"mailto:Ed.Pierzchalski@data61.csiro.au\">Ed.Pierzchalski@data61.csiro.au</a></p>\n<blockquote>\n<p>Which leaves the canonical question: What application do you have in mind?</p>\n</blockquote>\n<p>We're looking for stray unused lemmas in the seL4 verification proofs. These are (in some parts) old and (in all parts) large collections of proofs that have undergone more than a few refactorings. The technique of using proof node names to loosely infer \"real\" lemma names and their usage relationships, as well as proof node props to disambiguate/confirm those inferences, seems to be working so far, so I suppose I have no real issue yet.<br>\nI occasionally ask myself the same questions. After so many years the<br>\nsituation of proof terms is still not quite clear.</p>\n<p>In particular, the concept did not catch up with the \"authentic fact<br>\nname\" reform from some years ago: In distant past, a fact name in the<br>\ntheory was just a comment, and the slightly odd \"disambiguation\" wrt.<br>\nthe proposition was used to make sense of in as proof terms. Now the<br>\nfact environment of the context is authentic, but proof terms still have<br>\na rather weak notion of derivation name internally.</p>\n<p>There are other fine points that don't quite work, e.g. see the<br>\nimplementation of the commands 'thm_deps' and 'unused_thms'.</p>\n<p>As usual, one needs to look very closely at the status-quo, and figure<br>\nout if a particular application has the chance to go through.</p>\n<p>Which leaves the canonical question: What application do you have in mind?</p>\n<p>Makarius</p>",
        "id": 294747025,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661193912
    }
]