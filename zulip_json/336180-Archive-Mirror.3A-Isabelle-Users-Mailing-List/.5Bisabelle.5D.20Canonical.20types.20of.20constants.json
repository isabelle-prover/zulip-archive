[
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\nIn order to obtain the type of a constant c I am using this code snippet:</p>\n<p>Proof_Context.read_const {proper = true, strict = false} ctxt c</p>\n<p>It gives me back a term Const(c,T) and then I proceed with T. How can I make <br>\nsure that the type variables in T have canonical names 'a, 'b etc? Should I be <br>\nusing some other piece of code?</p>\n<p>The background is that in 7f5579b12b0a, constant \"card\" has type \"?'b set =&gt; <br>\nnat\" instead of \"?'a set =&gt; nat\" as in the past. I assume that I should not rely <br>\non canonicity of names in T? If not, how can I convert a type into a `canonical' <br>\none?</p>\n<p>Thanks<br>\nTobias<br>\n<a href=\"/user_uploads/14278/WGvkddFje9DAWpimAEeRCB1F/smime.p7s\">smime.p7s</a></p>",
        "id": 294668821,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661172733
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nOn Tue, 9 Feb 2016, Tobias Nipkow wrote:</p>\n<blockquote>\n<p>In order to obtain the type of a constant c I am using this code snippet:</p>\n<p>Proof_Context.read_const {proper = true, strict = false} ctxt c</p>\n<p>It gives me back a term Const(c,T) and then I proceed with T. How can I make <br>\nsure that the type variables in T have canonical names 'a, 'b etc? Should I <br>\nbe using some other piece of code?</p>\n</blockquote>\n<p>This correctly produces a type scheme for the constant, according to its <br>\ndeclaration.  It uses schematic type variables, but these are considered <br>\n\"private\" to a declaration and not necessarily canonical in an application <br>\ncontext.</p>\n<p>The proper way to make schematics visible in a context (and printable) can <br>\nbe seen in the implementation of the document antiquotation @{const}: <br>\nVariable.import_terms.</p>\n<p>Note that show_question_marks = false produces unreliable results: <br>\npretending that schematic variables are not schematic is fragile. <br>\nLaTeXsugar.thy seems to suffer from that wrong assumption.</p>\n<blockquote>\n<p>The background is that in 7f5579b12b0a, constant \"card\" has type \"?'b <br>\nset =&gt; nat\" instead of \"?'a set =&gt; nat\" as in the past.</p>\n</blockquote>\n<p>The definition of \"card\" has changed here <br>\n<a href=\"http://isabelle.in.tum.de/repos/isabelle/rev/9f4f0dc7be2c\">http://isabelle.in.tum.de/repos/isabelle/rev/9f4f0dc7be2c</a> and thus its <br>\ninternal type declaration.</p>\n<p>Here is an example that illustrates the situation and shows how to make <br>\ncanonical types inside a given context:</p>\n<p>consts a :: 'a<br>\nconsts b :: 'b</p>\n<p>ML ‹<br>\n   fun read_const ctxt s =<br>\n     let<br>\n       val t = Proof_Context.read_const {proper = true, strict = false} ctxt s;<br>\n       val ([t'], _) = Variable.import_terms true [t] ctxt;<br>\n     in (t, t') end;</p>\n<p>read_const @{context} \"a\";<br>\n   read_const @{context} \"b\";<br>\n   read_const @{context} \"card\";<br>\n›</p>\n<p>Of course, the result depends on the context.  E.g. within the context of <br>\n\"context fixes x :: 'a begin\" new types start at 'b.</p>\n<p>Makarius</p>",
        "id": 294668844,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661172745
    },
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\nThanks, that works fine.</p>\n<p>Tobias<br>\n<a href=\"/user_uploads/14278/_-M2eJJY5kjzsZIT8clXzifU/smime.p7s\">smime.p7s</a></p>",
        "id": 294668852,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661172752
    }
]