[
    {
        "content": "<p>From: Diego Marmsoler &lt;<a href=\"mailto:diego.marmsoler@tum.de\">diego.marmsoler@tum.de</a>&gt;<br>\nDear Isabelle experts,</p>\n<p>while playing around with \"card\" from theory Finite_Set, i recognized that it returns 0 for infinite sets.<br>\nNow i was wondering whether someone knows about a similar construct which, for this case, returns infinity from the extended natural numbers.</p>\n<p>Many thanks in advance!</p>\n<p>Best regards,</p>\n<p>Diego</p>",
        "id": 294729542,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661187527
    },
    {
        "content": "<p>From: Andrei Popescu &lt;<a href=\"mailto:A.Popescu@mdx.ac.uk\">A.Popescu@mdx.ac.uk</a>&gt;<br>\nHi Diego,</p>\n<p>Please see</p>\n<p><a href=\"https://isabelle.in.tum.de/dist/library/HOL/HOL/BNF_Cardinal_Arithmetic.html\">https://isabelle.in.tum.de/dist/library/HOL/HOL/BNF_Cardinal_Arithmetic.html</a></p>\n<p>and, for a more complete set of results,</p>\n<p><a href=\"https://isabelle.in.tum.de/dist/library/HOL/HOL-Cardinals/index.html\">https://isabelle.in.tum.de/dist/library/HOL/HOL-Cardinals/index.html</a></p>\n<p>These are all documented in the ITP 2014 paper</p>\n<p><a href=\"http://andreipopescu.uk/pdf/card.pdf\">http://andreipopescu.uk/pdf/card.pdf</a></p>\n<p>Let me know should you have any problems using these.</p>\n<p>Cheers,</p>\n<p>Andrei</p>",
        "id": 294729572,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661187540
    },
    {
        "content": "<p>From: Andrei Popescu &lt;<a href=\"mailto:A.Popescu@mdx.ac.uk\">A.Popescu@mdx.ac.uk</a>&gt;<br>\n... though this may be too heavy for your intended application, e.g., if you don't care about distinguishing between different infinite cardinalities. The heaviness comes from having to use ordinal embedding (denoted &lt;o and &lt;=o) and isomorphism (denoted =o) instead of (in)equality of natural numbers.</p>\n<p>Cheers,</p>\n<p>Andrei</p>",
        "id": 294729581,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661187542
    },
    {
        "content": "<p>From: Manuel Eberl &lt;<a href=\"mailto:eberlm@in.tum.de\">eberlm@in.tum.de</a>&gt;<br>\nHallo,</p>\n<p>a less involved solution would be to define a cardinality function that<br>\nreturns an extended natural number (from Extended_Nat in HOL-Library).</p>\n<p>definition ecard :: \"'a set ⇒ enat\" where<br>\n  \"ecard A = (if finite A then card A else ∞)\"</p>\n<p>Of course, there will be no library of facts for this (yet).</p>\n<p>Manuel</p>",
        "id": 294729720,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661187591
    },
    {
        "content": "<p>From: Diego Marmsoler &lt;<a href=\"mailto:diego.marmsoler@tum.de\">diego.marmsoler@tum.de</a>&gt;<br>\nDear Manuel,</p>\n<p>thank you for the hint! This is exactly what I was trying to do.<br>\nHowever, while doing so, I observed something which I do not understand. Maybe one of you Isabelle experts can help here?</p>\n<p>First, I define an extended version of ecard, such as the following (for simplicity I leave out the infinite case here):</p>\n<p>definition ecard:: \"('a set) ⇒ enat\"<br>\n  where \"ecard S ≡ enat (card S)\"</p>\n<p>So the definition actually just lifts the result of card to enat.</p>\n<p>Now, if I try to proof the following lemma (the lifted version of card_0_eq from Finite_Set):</p>\n<p>lemma ecard_0_eq:<br>\n  assumes \"finite Z\"<br>\n  and \"enat (card Z) = enat 0\"<br>\n  shows \"Z = {}\"</p>\n<p>nitpick tells me that it found a counterexample:</p>\n<blockquote>\n<p>Nitpick found a counterexample for card 'a = 2:<br>\nFree variable:<br>\n  Z = {a⇩2}</p>\n</blockquote>\n<p>However, I can also come up with a simple proof for the lemma.</p>\n<p>Moreover, if I try to confirm the counterexample with the following lemma:</p>\n<p>lemma test:<br>\n\"enat (card {a⇩2}) = enat 0\"</p>\n<p>nitpicks finds again a counterexample to its counterexample (as expected).</p>\n<p>Does someone understand the counterexample generated for lemma ecard_0_eq here?</p>\n<p>Many thanks and best regards,</p>\n<p>Diego<br>\n<a href=\"/user_uploads/14278/y7Trp0ICQgQbCK7xrna8CpQ2/smime.p7s\">smime.p7s</a></p>",
        "id": 294729747,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661187601
    },
    {
        "content": "<p>From: Christian Sternagel &lt;<a href=\"mailto:c.sternagel@gmail.com\">c.sternagel@gmail.com</a>&gt;<br>\nDear Diego,</p>\n<p>sorry not an answer, just nitpicking ;)<br>\nI get the message:</p>\n<p>Nitpick found a potentially <em>spurious</em> counterexample</p>\n<p>I am curious as to why you get a different message.</p>\n<p>My point being: With the above message I wouldn't care too much, since<br>\nNitpick already tells you that the counterexample might not be good.<br>\n(Maybe, for some reason, it is just constructing a counterexample to \"Z<br>\n= {}\".)</p>\n<p>cheers</p>\n<p>chris</p>",
        "id": 294729834,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661187613
    }
]