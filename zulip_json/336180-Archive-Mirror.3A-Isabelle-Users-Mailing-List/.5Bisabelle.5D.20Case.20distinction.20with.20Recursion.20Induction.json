[
    {
        "content": "<p>From: Alfio Martini &lt;<a href=\"mailto:alfio.martini@acm.org\">alfio.martini@acm.org</a>&gt;<br>\nDear Isabelle Users,</p>\n<p>I was playing a bit with  proofs with recursion induction in Isar and after<br>\na while, it<br>\nbecame all too boring to type those long formulas so that I looked for some<br>\nways of improving this<br>\nsituation.</p>\n<p>Pattern-matching with  meta-variables as unknowns was a huge improvement.<br>\nBut<br>\nI tried also pattern matching via case distinction and did not succeed.<br>\nFirstly, I thought case distinction<br>\nwas only possible with structural induction. But in the new tutorial<br>\n(Programming and<br>\nProving) one sees that proofs  using rule induction can be done via case<br>\ndistinction<br>\nwith respect to the name (labels) of the rules.</p>\n<p>Unfortunately, I did not succeed using this trick (of using a label) for<br>\nrecursion induction.<br>\nAm I missing something very basic here?</p>\n<p>Best!</p>",
        "id": 294157110,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660851652
    },
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\nThe names of the cases for recursive functions are 1, 2, ....<br>\nThe reason is that fun may modify the input equations to disambiguate them. Thus<br>\none equation may become two or more and one would need some clever naming scheme<br>\nto deal with that situation in inductions.</p>\n<p>Tobias</p>",
        "id": 294157134,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660851665
    },
    {
        "content": "<p>From: Brian Huffman &lt;<a href=\"mailto:huffman@in.tum.de\">huffman@in.tum.de</a>&gt;<br>\nOn Tue, May 15, 2012 at 8:12 AM, Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt; wrote:</p>\n<blockquote>\n<p>The names of the cases for recursive functions are 1, 2, ....<br>\nThe reason is that fun may modify the input equations to disambiguate them. Thus<br>\none equation may become two or more and one would need some clever naming scheme<br>\nto deal with that situation in inductions.</p>\n</blockquote>\n<p>Hi Alfio,</p>\n<p>Note that if you don't like the default case names, you can rename<br>\nthem using the \"case_names\" attribute on the induction rule. You can<br>\nuse the \"lemmas\" command to save the updated rule for reuse. For<br>\nexample:</p>\n<p>fun fib :: \"nat =&gt; nat\" where<br>\n  \"fib 0 = 0\" | \"fib (Suc 0) = 1\" | \"fib n = fib (n - 1) + fib (n - 2)\"</p>\n<p>lemmas fib_induct = fib.induct [case_names 0 Suc_0 Suc_Suc]</p>\n<p>lemma \"fib n \\&lt;le&gt; fib (Suc n)\"<br>\nproof (induct n rule: fib_induct)<br>\n  case 0 show ?case by simp<br>\nnext<br>\n  case Suc_0 show ?case by simp<br>\nnext<br>\n  case (Suc_Suc k) thus ?case by simp<br>\nqed</p>\n<ul>\n<li>Brian</li>\n</ul>\n<blockquote>\n<p>Am 14/05/2012 22:50, schrieb Alfio Martini:</p>\n<blockquote>\n<p>Dear Isabelle Users,</p>\n<p>I was playing a bit with  proofs with recursion induction in Isar and after<br>\na while, it<br>\nbecame all too boring to type those long formulas so that I looked for some<br>\nways of improving this<br>\nsituation.</p>\n<p>Pattern-matching with  meta-variables as unknowns was a huge improvement.<br>\nBut<br>\nI tried also pattern matching via case distinction and did not succeed.<br>\nFirstly, I thought case distinction<br>\nwas only possible with structural induction. But in the new tutorial<br>\n(Programming and<br>\nProving) one sees that proofs  using rule induction can be done via case<br>\ndistinction<br>\nwith respect to the name (labels) of the rules.</p>\n<p>Unfortunately, I did not succeed using this trick (of using a label) for<br>\nrecursion induction.<br>\nAm I missing something very basic here?</p>\n<p>Best!</p>\n</blockquote>\n</blockquote>",
        "id": 294157147,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660851670
    },
    {
        "content": "<p>From: Alfio Martini &lt;<a href=\"mailto:alfio.martini@acm.org\">alfio.martini@acm.org</a>&gt;<br>\nDear Tobias,</p>\n<p>Thank you for your reply. Now it works! However, when<br>\nusing this I will always insert a comment next to<br>\nthe corresponding case so as to avoid impairing the<br>\nclarity of the proof.</p>\n<p>Best!</p>",
        "id": 294157213,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660851708
    },
    {
        "content": "<p>From: Alfio Martini &lt;<a href=\"mailto:alfio.martini@acm.org\">alfio.martini@acm.org</a>&gt;<br>\nDear Brian,</p>\n<p>That was really a great hint. Exactly what I wanted! I was not aware<br>\nof this \"lemmas\" command. I will look into into in more detail.</p>\n<p>All the Best!</p>",
        "id": 294157225,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660851714
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nComments can be very confusion, because they tend to diverge quickly from <br>\nthe formally checked text, when that is changed a few times in its natural <br>\nlife cycle.</p>\n<p>Clarity of proofs means to put the right amount of explicit propositions <br>\nin the text, not too little, not too much.  Isar allows some flexibilty <br>\nhere.  If you take a look at src/HOL/Induct/Command_Patterns.thy, for <br>\nexample, there are some illustrative patterns that use symbolic 'case' <br>\nstatements together with concrete propositions.</p>\n<p>So an invocation of</p>\n<p>case Foo</p>\n<p>that introduces some local facts A and B and more in an opaque manner can <br>\nlater be elucidated by saying</p>\n<p>have \"A\" by fact<br>\n   have \"B\" by fact</p>\n<p>or</p>\n<p>have \"A\" and \"B\" by fact+</p>\n<p>or</p>\n<p>note <code>A</code> and <code>B</code></p>\n<p>etc.</p>\n<p>Makarius</p>",
        "id": 294157404,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660851787
    },
    {
        "content": "<p>From: Alfio Martini &lt;<a href=\"mailto:alfio.martini@acm.org\">alfio.martini@acm.org</a>&gt;<br>\nDear Makarius,</p>\n<p>That was very helpful. The theory \"Common_Patterns.thy\" is very<br>\ninstructive! Especially<br>\nthe \"note\" command when using \"case\" patterns in induction.</p>\n<p>Best!</p>",
        "id": 294157426,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660851800
    }
]