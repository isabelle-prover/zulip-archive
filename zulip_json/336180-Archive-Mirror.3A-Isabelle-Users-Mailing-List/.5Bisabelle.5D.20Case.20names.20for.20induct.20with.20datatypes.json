[
    {
        "content": "<p>From: Andreas Lochbihler &lt;<a href=\"mailto:lochbihl@ipd.info.uni-karlsruhe.de\">lochbihl@ipd.info.uni-karlsruhe.de</a>&gt;<br>\nI have a datatype which has a recursive constructor where the recursive <br>\nparameter is packed into another datatype, e.g.<br>\ndatatype T = ... | C \"T list\"</p>\n<p>Induction on T involves doing simultaneously induction on lists, i.e. <br>\nthe \"induct T and Ts\" tactic produces subgoals for all constructors of T <br>\nand those for lists.</p>\n<p>Now, in an Isar proof, picking a particular case of T is done by writing <br>\n\"case (C ...)\" for all constructors C of T. But what are the case names <br>\nthat induct gives to the constructors of the wrapper datatype, i.e. for <br>\nNil and Cons?</p>\n<p>Does induct give case names to them at all? Or do I have to name them <br>\nexplicitly by myself like in</p>\n<p>proof(induct T and Ts rule: T.induct[case_names ... C Nil Cons])</p>\n<p>Andreas</p>",
        "id": 294061027,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660823712
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nYes, print_cases will tell you the names produced by the datatype rule.</p>\n<p>Makarius</p>",
        "id": 294061031,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660823715
    }
]