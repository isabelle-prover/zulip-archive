[
    {
        "content": "<p>From: Christoph Dittmann &lt;<a href=\"mailto:f-isabellelist@yozora.eu\">f-isabellelist@yozora.eu</a>&gt;<br>\nHi,</p>\n<p>I like how I can use a named case for coinduction, where P is a<br>\ncoinductive predicate:</p>\n<p>lemma \"P n\"<br>\nproof (coinduction rule: P.coinduct)<br>\n  case P show ?case sorry<br>\nqed</p>\n<p>This works fine.</p>\n<p>However, suppose P is inside a locale L.  Sometimes I need coinduction<br>\nover L.P:</p>\n<p>lemma \"L.P n\"<br>\nproof (coinduction rule: L.P.coinduct)<br>\n  case P show ?case sorry<br>\nqed</p>\n<p>Although the coinduction works, \"case P\" doesn't work because the case<br>\nname is not available.  My workaround so far was to explicitly use<br>\nfix/assume/show.  I would prefer to have \"case P\" and ?case because the<br>\nformulas in coinduction proofs are often very long.</p>\n<p>I tried to find out from the HOL source code where the case names are<br>\ndefined, but couldn't find anything.</p>\n<p>Is there a way to use a named case with the fully qualified coinduction<br>\nrule?</p>\n<p>I have attached a minimal example exhibiting the problem.</p>\n<p>A follow-up question is, is there a way to use a named case when the<br>\ncoinduction rule is L.P.coinduct[OF something] instead of only<br>\nL.P.coinduct (which often seems useful when using L.P.coinduct instead<br>\nof P.coinduct)?</p>\n<p>Thanks,<br>\nChristoph<br>\n<a href=\"/user_uploads/14278/o1aXobJNvQ8AM8jA-hZhrzP8/Test.thy\">Test.thy</a></p>",
        "id": 294653655,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661167137
    },
    {
        "content": "<p>From: Lars Noschinski &lt;<a href=\"mailto:noschinl@in.tum.de\">noschinl@in.tum.de</a>&gt;<br>\nI don't know why the case names are lost here, but you should be able to<br>\nuse the names by using</p>\n<p>L.P.coinduct[case_names P Q R]</p>\n<p>or maybe</p>\n<p>L.P.coinduct[consumes 1, case_names P Q R]</p>\n<p>as a workaround.</p>\n<p>-- Lars</p>",
        "id": 294654214,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661167339
    },
    {
        "content": "<p>From: Christoph Dittmann &lt;<a href=\"mailto:f-isabellelist@yozora.eu\">f-isabellelist@yozora.eu</a>&gt;<br>\nThanks, this works great.  I didn't know you could use [case_names] there.</p>\n<p>Christoph</p>",
        "id": 294654264,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661167364
    },
    {
        "content": "<p>From: Florian Haftmann &lt;<a href=\"mailto:florian.haftmann@informatik.tu-muenchen.de\">florian.haftmann@informatik.tu-muenchen.de</a>&gt;</p>\n<blockquote>\n<blockquote>\n<p>I like how I can use a named case for coinduction, where P is a<br>\ncoinductive predicate:</p>\n<p>lemma \"P n\"<br>\nproof (coinduction rule: P.coinduct)<br>\n  case P show ?case sorry<br>\nqed</p>\n<p>This works fine.</p>\n<p>However, suppose P is inside a locale L.  Sometimes I need coinduction<br>\nover L.P:</p>\n<p>lemma \"L.P n\"<br>\nproof (coinduction rule: L.P.coinduct)<br>\n  case P show ?case sorry<br>\nqed</p>\n</blockquote>\n<p>I don't know why the case names are lost here</p>\n</blockquote>\n<p>The case names are not »lost«.  L.P is a opaque foundational constant,<br>\nand the corresponding declarations are applied only in resulting<br>\ncontexts, i. e. in the context of the locale itself or due to<br>\ninterpretation.</p>\n<p>You might consider wrapping up you matter in something like</p>\n<p>context<br>\nbegin</p>\n<p>interpretation prefix!: L … &lt;proof&gt;</p>\n<p>lemma …<br>\nproof (coinduction rule: prefix.P.coinduct)<br>\n  case P …<br>\nqed</p>\n<p>end</p>\n<p>which will give you the full declarations from L inside a certain block.</p>\n<p>Hope this helps.<br>\n    Florian</p>\n<p>but you should be able to</p>\n<blockquote>\n<p>use the names by using</p>\n<p>L.P.coinduct[case_names P Q R]</p>\n<p>or maybe</p>\n<p>L.P.coinduct[consumes 1, case_names P Q R]</p>\n<p>as a workaround.</p>\n<p>-- Lars</p>\n<p><a href=\"/user_uploads/14278/7vN4cIsnscWf3YWCJ_stoblk/signature.asc\">signature.asc</a></p>\n</blockquote>",
        "id": 294654593,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661167518
    }
]