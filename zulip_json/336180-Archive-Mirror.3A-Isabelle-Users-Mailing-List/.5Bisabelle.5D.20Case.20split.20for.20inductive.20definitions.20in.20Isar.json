[
    {
        "content": "<p>From: Peter Chapman &lt;<a href=\"mailto:pc@cs.st-and.ac.uk\">pc@cs.st-and.ac.uk</a>&gt;<br>\nHi</p>\n<p>I have a proof in which I wish to perform a case split as the proof  <br>\nmethod.  Normally, I would just say</p>\n<p>proof (cases A)</p>\n<p>for something which was defined by primrec, or if I wanted to do a  <br>\ncase split on its truth value.  However, what I want to do a case  <br>\nsplit on was defined as an inductive datatype.  I don't want to do  <br>\ninduction, just a case split.  I can do this \"by hand\", by proving a  <br>\nlemma which says \"if the conclusion holds, then it must come from one  <br>\nof the clauses\", and then use \"moreover\" blocks but this is  <br>\ncumbersome.  Is there a way to call this proof method in Isar?</p>\n<p>Thanks</p>\n<p>Peter</p>",
        "id": 294061091,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660823745
    },
    {
        "content": "<p>From: Peter Lammich &lt;<a href=\"mailto:peter.lammich@uni-muenster.de\">peter.lammich@uni-muenster.de</a>&gt;<br>\nPeter Chapman wrote:<br>\nThe cases method should also work for inductive datatypes, i.e. consider</p>\n<p>consts P::\"'a list \\&lt;Rightarrow&gt; bool\"<br>\nlemma \"P l\" proof (cases l)</p>\n<p>which yields<br>\ngoal (2 subgoals):</p>\n<ol>\n<li>l = [] \\&lt;Longrightarrow&gt; P l</li>\n<li>\\&lt;And&gt;a list. l = a # list \\&lt;Longrightarrow&gt; P l</li>\n</ol>\n<p>The lemma, that sais when the conclusion holds, it must come from one of<br>\nthe clauses, is called &lt;name&gt;.exhaust for an inductive datatype &lt;name&gt;, i.e.</p>\n<p>lemma list.exhaust:<br>\n\\&lt;lbrakk&gt;?y = [] \\&lt;Longrightarrow&gt; ?P; \\&lt;And&gt;a list. ?y = a # list<br>\n\\&lt;Longrightarrow&gt; ?P\\&lt;rbrakk&gt; \\&lt;Longrightarrow&gt; ?P</p>\n<p>and generated automatically upon defining an inductive datatype.</p>",
        "id": 294061104,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660823751
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nFor Isabelle2007 see the isar-ref manual section 4.3.5 \"Proof by cases and <br>\ninduction\", especially page 100, which gives an overview how the <br>\ncases/induct methods select the rules being used in a proof.</p>\n<p>For eliminating inductive set membership \"x:A\", the basic idiom is like <br>\nthis:</p>\n<p>from <code>x:A</code> have \"P x\"<br>\n  proof induct<br>\n    case (blah a b c)<br>\n    ...</p>\n<p>Assuming the usual declarations produced by the Isabelle/HOL packages, <br>\nthis will use the A.cases rule as expected (A.exhaust is an obsolete name <br>\nfor that).  These rules rarely need to be referenced explicitly by name <br>\nanyway.</p>\n<p>Makarius</p>",
        "id": 294061119,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660823757
    }
]