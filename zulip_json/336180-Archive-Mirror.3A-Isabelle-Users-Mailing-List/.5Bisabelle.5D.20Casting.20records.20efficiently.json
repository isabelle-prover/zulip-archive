[
    {
        "content": "<p>From: René Neumann &lt;<a href=\"mailto:rene.neumann@in.tum.de\">rene.neumann@in.tum.de</a>&gt;<br>\nDear all,</p>\n<p>when given a record hierarchy (let's take 'foo' and 'foo_bar', where<br>\n'foo_bar' extends 'foo'), I couldn't find a good way to \"cast\" a record<br>\nof type foo into one of type foo_bar, s.t. the construct is executable<br>\n(the additional fields of 'foo_bar' are going to be initialized with<br>\nconstants).</p>\n<p>I.e. I need a function \"cast :: foo ⇒ foo_bar\" or more generally<br>\n\"cast :: 'a foo_scheme ⇒ 'b foo_scheme\"</p>\n<p>First attempt (not executable):</p>\n<p>cast g = foo.extend g (foo_bar.fields arg1 arg2)</p>\n<p>Second attempt (wrong type -- g here already needs to be of type foo_bar):</p>\n<p>cast g = g(| arg1 := arg1, arg2 := arg2 |)</p>\n<p>Third attempt (parsing error):</p>\n<p>cast g = g(| … := (| arg1 = arg1, arg2 = arg2 |)|)</p>\n<p>Fourth attempt (wrong type -- see 2nd):</p>\n<p>cast g = foo.more_update (λ_. (| arg1 = arg1, arg2 = arg2 |)) g</p>\n<p>Fifth attempt (working, but very clumsy):</p>\n<p>function cast where<br>\n \"cast (| foo_1 = x1, foo_2 = x2, foo_3 = x3 |) = (| foo_1 = x1, foo_2 =<br>\nx2, foo_3 = x3, arg1 = arg1, arg2 = arg2 |)\"<br>\nby (metis foo.cases) (metis foo.ext_inject)<br>\ntermination by lexicographic_order</p>\n<p>Is there some better alternative for this? Where I am not forced to<br>\nspell out all fields of 'foo', and proof trivial obligations?</p>\n<p>Thanks a lot,<br>\nRené<br>\n<a href=\"/user_uploads/14278/MO3uzcbHnIuBEGl_NFa7dkNa/smime.p7s\">smime.p7s</a></p>",
        "id": 294261877,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660914679
    },
    {
        "content": "<p>From: René Neumann &lt;<a href=\"mailto:rene.neumann@in.tum.de\">rene.neumann@in.tum.de</a>&gt;<br>\nJust noticed: The same problem exists for the other direction:<br>\nfoo.truncate is also not executable.</p>\n<ul>\n<li>René<br>\n<a href=\"/user_uploads/14278/28qArCZBDJ2fu6MDgexSKURF/smime.p7s\">smime.p7s</a></li>\n</ul>",
        "id": 294261888,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660914686
    },
    {
        "content": "<p>From: Florian Haftmann &lt;<a href=\"mailto:florian.haftmann@informatik.tu-muenchen.de\">florian.haftmann@informatik.tu-muenchen.de</a>&gt;<br>\nHi René.</p>\n<p>it might be helpful if you could provide me with a small self-contained<br>\nexample.</p>\n<p>Cheers,<br>\n    Florian<br>\n<a href=\"/user_uploads/14278/CwPyD-QTm667hL1-NjcFsnA9/signature.asc\">signature.asc</a></p>",
        "id": 294261927,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660914698
    },
    {
        "content": "<p>From: René Neumann &lt;<a href=\"mailto:rene.neumann@in.tum.de\">rene.neumann@in.tum.de</a>&gt;<br>\nSomething like the attached?</p>\n<ul>\n<li>René<br>\n<a href=\"/user_uploads/14278/qbnGMKtVYdDPBbXJysgzyxyL/Scratch.thy\">Scratch.thy</a></li>\n</ul>",
        "id": 294261938,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660914705
    },
    {
        "content": "<p>From: Florian Haftmann &lt;<a href=\"mailto:florian.haftmann@informatik.tu-muenchen.de\">florian.haftmann@informatik.tu-muenchen.de</a>&gt;<br>\nHi René,</p>\n<p>the short answer: put something like</p>\n<p>declare foo.defs [code]</p>\n<p>for every record specificaton »foo«, and code generation succeeds<br>\nwithout further ado.</p>\n<p>My only explanation why this straight-forward equations have never been<br>\nused so far for generating code is that due to a historic<br>\nmisunderstanding how code should be generated for record types these<br>\nhave never been considered as candidates.</p>\n<p>Thanks for reporting this.<br>\n    Florian<br>\n<a href=\"/user_uploads/14278/bAT7cs1-NU40kS-741A0bTfN/signature.asc\">signature.asc</a></p>",
        "id": 294262579,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660914916
    }
]