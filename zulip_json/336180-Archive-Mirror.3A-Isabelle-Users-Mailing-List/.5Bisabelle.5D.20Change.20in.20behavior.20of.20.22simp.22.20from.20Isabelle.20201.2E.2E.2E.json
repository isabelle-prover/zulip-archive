[
    {
        "content": "<p>From: \"Eugene W. Stark\" &lt;<a href=\"mailto:isabelle-users@starkeffect.com\">isabelle-users@starkeffect.com</a>&gt;<br>\nAfter downloading Isabelle2015 and loading into it the theory files<br>\nI had been working on under Isabelle2014 only two proofs broke, but<br>\nthe reason is a behavior of Isabelle2015 that seems to make life more<br>\ndifficult in certain respects than Isabelle2014.</p>\n<p>After getting started with Isabelle not too long ago, I settled into<br>\na mode of use in which I often state the fact I am trying to prove,<br>\nenter a \"using xxx yyy zzz ...\" clause with as many of the lemmas that<br>\nI am reasonably certain are relevant to the proof, and then invoke<br>\n\"try\" to try to see if the fact can be proved automatically, and as<br>\na byproduct to learn about relevant lemmas from various theories in Main<br>\nwhich I would otherwise have a hard time locating.</p>\n<p>With Isabelle2015, I have so far experienced a number of times the situation<br>\nin which I enter \"using foobar_def\", then invoke \"try\" and am told<br>\n\"Try this: by (simp add: foobar_def)\".  Previously in Isabelle2014 it generally<br>\nseemed to be enough to say \"using foobar_def by simp\", but now in Isabelle2015<br>\nit is often necessary to explicitly add foobar_def as a simplification.<br>\nThe point is, I already know that foobar_def is going to be needed in the proof,<br>\nbut I don't necessarily know that it will have to be used as a simplification.<br>\nAlso, as far as I know, the \"using\" clause does not provide a way to indicate<br>\nwhich of the facts being used are to be used as simplifications, as opposed<br>\nto ordinary lemmas.</p>\n<p>Was this change in behavior intentional?  Is there a workaround?<br>\nIf necessary, I will try to get a standalone example, but I don't have one<br>\njust now.</p>\n<p>Thanks for any help.</p>\n<p>- Gene Stark</p>",
        "id": 294642207,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661162581
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nThe intention is always to get things more right and more clear than <br>\nbefore.  In the long run (of almost 30 years) this has usually worked out, <br>\nbut sometimes there are set-backs.</p>\n<p>Concerning this particular detail, their might be some re-adjustments in <br>\nthe 'try' command that Jasmin Blanchette could explain.</p>\n<p>As a general principle, 'using' does not say anything specific yet.  It <br>\nmerely hands over certain facts as primary agument to subsequent proof <br>\nmethod.  The automated methods (simp, blast, auto, etc.) all work the <br>\nsame in this respect: the facts are inserted (using the \"insert\" method <br>\ninternally), and then they do their normal business on the augmented goal <br>\nstate.</p>\n<p>The latter poses a logical problem, because the logic (and thus the core <br>\ngoal state) cannot handle schematic types as truly general types -- there <br>\nis no type-quantifier in Isabelle/Pure nor Isabelle/HOL.  This means, <br>\nfacts inserted into a goal state are instantiated 0 or at most 1 times.</p>\n<p>This makes a technical difference for the following:</p>\n<p>have something<br>\n     using foo_def by simp   -- \"unreliable in the presence of polymorphism\"</p>\n<p>versus:</p>\n<p>have something<br>\n     by (simp add: foo_def)  -- \"canonical use of arbitrary rewrite rule\"</p>\n<p>have something<br>\n     unfolding foo_def by simp</p>\n<p>Maybe that is what you experience, but you did not show any concrete <br>\nexamples.</p>\n<p>Makarius</p>",
        "id": 294645909,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661164064
    },
    {
        "content": "<p>From: Lars Noschinski &lt;<a href=\"mailto:noschinl@in.tum.de\">noschinl@in.tum.de</a>&gt;<br>\nOn 30.05.2015 23:27, Eugene W. Stark wrote:</p>\n<blockquote>\n<p>After getting started with Isabelle not too long ago, I settled into<br>\na mode of use in which I often state the fact I am trying to prove,<br>\nenter a \"using xxx yyy zzz ...\" clause with as many of the lemmas that<br>\nI am reasonably certain are relevant to the proof, and then invoke<br>\n\"try\" to try to see if the fact can be proved automatically, and as<br>\na byproduct to learn about relevant lemmas from various theories in Main<br>\nwhich I would otherwise have a hard time locating.<br>\nWhile this mode of proving works, you will get better results if you<br>\nlearn the more directed ways of passing lemmas to proof tools: e.g.,<br>\nsimplification, introduction, elimination and destruction rules. This<br>\nalso has the advantage that you can declare them to be used<br>\nautomatically by proof tools (using the [simp], [intro], ... attributes).</p>\n<p>With Isabelle2015, I have so far experienced a number of times the situation<br>\nin which I enter \"using foobar_def\", then invoke \"try\" and am told<br>\n\"Try this: by (simp add: foobar_def)\". Previously in Isabelle2014 it generally<br>\nseemed to be enough to say \"using foobar_def by simp\", but now in Isabelle2015<br>\nit is often necessary to explicitly add foobar_def as a simplification.<br>\nI am pretty sure that there was no change in Isabelle 2015 which would<br>\nchange this behaviour in general. However, as simp rules and facts<br>\ninserted by \"using\" are treated differently by the simplifier, it is no<br>\nsurprise that these sometimes lead to different results -- neither of<br>\nthese methods is strictly more powerful then the other.<br>\nThe point is, I already know that foobar_def is going to be needed in the proof,<br>\nbut I don't necessarily know that it will have to be used as a simplification.<br>\nFor a definition, anything else would be surprising (in most cases) ;)<br>\nAlso, as far as I know, the \"using\" clause does not provide a way to indicate<br>\nwhich of the facts being used are to be used as simplifications, as opposed<br>\nto ordinary lemmas.<br>\nFor most of the (automated) proof methods, \"using\" does nothing else<br>\nthen insert the fact into the goal, e.g.</p>\n</blockquote>\n<p>have \"P\" using <code>Q</code> apply simp</p>\n<p>leads to the simplifier trying to solve \"Q ==&gt; P\". On the other hand,<br>\nfacts passed by (e.g.) \"simp:\" will not become part of the goal.</p>\n<p>Sometimes, this makes \"using\" more powerful: Whereas a fact passed by<br>\n\"simp:\" will be used as-is (modulo some restricted preprocessing), the<br>\nassumptions of a subgoal will be simplified before they are used for<br>\nrewriting. This might help if the fact is not in normal form:</p>\n<p>notepad begin<br>\n    fix P :: \"nat =&gt; bool\"<br>\n    assume *: \"P 1\"<br>\n    have \"P (2 - 1)\"<br>\n       apply (simp add: <em>)        (</em> does not solve, leaves P (Suc 0) *)<br>\n       using * apply simp         (* solves, as P 1 is simplified to P<br>\n(Suc 0) *)<br>\n       done</p>\n<p>It might also make \"using\" weaker:</p>\n<p>definition P :: \"'a =&gt; bool\" where \"P x = True\"</p>\n<p>notepad begin<br>\n    fix x :: 'a and y :: 'b<br>\n    have \"P x = P y\"<br>\n      by (simp add: P_def)      (* works *)<br>\n    have \"P x = P y \"<br>\n      using P_def apply simp sorry  (* fails, unfolds only one P *)<br>\n    have \"P x = P y\"<br>\n      using P_def P_def by simp      (* works *)</p>\n<p>The reason is that Isabelle can not quantify over types. Polymorphic<br>\nfacts are represented using schematic type variables. But these can only<br>\nbe instantiated once.</p>\n<p>Similar things happen also for other automated tools.</p>\n<p>-- Lars</p>",
        "id": 294646216,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661164193
    }
]