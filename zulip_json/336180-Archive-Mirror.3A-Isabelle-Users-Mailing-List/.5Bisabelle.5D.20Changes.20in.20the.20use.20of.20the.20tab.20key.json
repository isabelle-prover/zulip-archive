[
    {
        "content": "<p>From: \"W. Douglas Maurer\" &lt;<a href=\"mailto:maurer@gwu.edu\">maurer@gwu.edu</a>&gt;<br>\nBefore Isabelle2014 came out, I put together a write-up for my <br>\nstudents, based on Isabelle2013, which, among other things, covered <br>\nentering special characters using the tab key. For example, you could <br>\nenter &lt;= followed by the tab key and the single less-than-or-equal <br>\ncharacter would come up on the screen. In Isabelle2014, this is <br>\nimproved; you just type &lt;= without the tab key and the single <br>\ncharacter comes up. That is helpful, and I will change my write-up to <br>\nreflect that. (In particular, this is faster than finding the proper <br>\nbutton in the Symbols panel and clicking that.)<br>\nHowever, I now find that some of the other uses of the tab key don't <br>\nwork any more. In particular, I used to be able to type colon-tab to <br>\nget the is-a-member-of character, and that doesn't work in <br>\nIsabelle2014. If I hover over the button for that character in the <br>\nSymbols panel, the only abbreviation that shows there is the colon <br>\ncharacter. I could still type \\&lt;in&gt;, but doing that would not be <br>\nfaster than finding the button for is-a-member-of and clicking on it.<br>\nThe same problem arises for other characters, such as ! tab to get <br>\nthe forall character, and ? tab to get the exists character. I can <br>\nstill use ALL tab to get the forall character, but EX tab (for the <br>\nexists character) doesn't work.<br>\nAnother problem (for which there is a workaround) would arise if I <br>\nwanted to enter the string \"&lt;=\" . If I enter this directly, the &lt;= <br>\nautomatically converts to the single less-than-or-equal character. <br>\nThe workaround is to type \"=\" and then go back and insert the &lt; <br>\ncharacter before it. That does work, but it's clumsy.<br>\nOther systems that I have used employ a convention here, involving <br>\nthe backspace (or delete) character. For example, when I type a row <br>\nof asterisks on my word processing program, and then hit return, the <br>\nasterisks convert to a row of small black squares. This looks nice, <br>\nbut, if I don't want this, I can immediately hit backspace, and the <br>\nrow of asterisks will reappear. I would like to be able to do this <br>\nwith &lt;= (so I would type &lt;= backspace and it would give me the two <br>\ncharacters &lt; and = whether inside quotes or not).</p>",
        "id": 294326155,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660928594
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nOn Wed, 4 Feb 2015, W. Douglas Maurer wrote:</p>\n<blockquote>\n<p>Before Isabelle2014 came out, I put together a write-up for my students, <br>\nbased on Isabelle2013, which, among other things, covered entering <br>\nspecial characters using the tab key.</p>\n</blockquote>\n<p>If you want you can show me the write-up, so that I see what kind of <br>\nreally important information needs to be given in the Isabelle/jEdit <br>\nmanual.</p>\n<blockquote>\n<p>For example, you could enter &lt;= followed by the tab key and the single <br>\nless-than-or-equal character would come up on the screen. In <br>\nIsabelle2014, this is improved ...</p>\n</blockquote>\n<p>Did you see the extended section \"3.5 Completion\" of the Isabelle/jEdit <br>\nmanual?</p>\n<p>If there is anything missing or unclear in the text, I am ready to listen.</p>\n<p>If there is anything missing or unclear in the concepts and their <br>\nimplementation, particular points might get queued in the pipeline (the <br>\nmetaphorical one one that leads from Central Asia to Europe).</p>\n<p>Makarius</p>",
        "id": 294327309,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660929004
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nOn Wed, 4 Feb 2015, W. Douglas Maurer wrote:</p>\n<blockquote>\n<p>However, I now find that some of the other uses of the tab key don't <br>\nwork any more. In particular, I used to be able to type colon-tab to get <br>\nthe is-a-member-of character, and that doesn't work in Isabelle2014. If <br>\nI hover over the button for that character in the Symbols panel, the <br>\nonly abbreviation that shows there is the colon character. I could still <br>\ntype \\&lt;in&gt;, but doing that would not be faster than finding the button <br>\nfor is-a-member-of and clicking on it.</p>\n</blockquote>\n<p>(Back to the original question, without any meta-questions and diverging <br>\nprivate threads on other topics.)</p>\n<p>I guess that above you merely experience the effect of the semantic <br>\ncontext of completion in Isabelle2014.  It should work as expected, if you type<br>\ninto a term context, e.g. via the Isar command 'term' like this:</p>\n<p>term \"\"<br>\n         ^ now type text here, after waiting a bit</p>\n<blockquote>\n<p>The same problem arises for other characters, such as ! tab to get the forall <br>\ncharacter, and ? tab to get the exists character. I can still use ALL tab to <br>\nget the forall character, but EX tab (for the exists character) doesn't work.</p>\n</blockquote>\n<p>That is the same situation.</p>\n<blockquote>\n<p>Another problem (for which there is a workaround) would arise if I wanted to <br>\nenter the string \"&lt;=\" . If I enter this directly, the &lt;= automatically <br>\nconverts to the single less-than-or-equal character. The workaround is to <br>\ntype \"=\" and then go back and insert the &lt; character before it. That does <br>\nwork, but it's clumsy.</p>\n</blockquote>\n<p>You can use \"undo\" of the editor to undo the completion, as explained in <br>\nthe \"jedit\" manual.</p>\n<p>Makarius</p>",
        "id": 294328232,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660929317
    }
]