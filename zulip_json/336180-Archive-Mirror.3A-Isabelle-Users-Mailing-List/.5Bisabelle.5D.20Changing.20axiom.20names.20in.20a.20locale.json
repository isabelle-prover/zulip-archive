[
    {
        "content": "<p>From: Eddy Westbrook &lt;<a href=\"mailto:westbrook@kestrel.edu\">westbrook@kestrel.edu</a>&gt;<br>\nThanks, this lemmas command is very helpful.</p>\n<p>-Eddy</p>",
        "id": 294288197,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660922545
    },
    {
        "content": "<p>From: Eddy Westbrook &lt;<a href=\"mailto:westbrook@kestrel.edu\">westbrook@kestrel.edu</a>&gt;<br>\nBtw, is there a similar command for declaring alias names for definitions in the imported locale as well?</p>\n<p>Thanks,<br>\n-Eddy</p>",
        "id": 294288207,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660922551
    },
    {
        "content": "<p>From: Andreas Lochbihler &lt;<a href=\"mailto:andreas.lochbihler@inf.ethz.ch\">andreas.lochbihler@inf.ethz.ch</a>&gt;<br>\nHow about using abbreviations?</p>\n<p>locale l begin<br>\ndefinition foo ...<br>\nend</p>\n<p>locale l2 = l begin<br>\nabbreviation bar where \"bar == foo\"<br>\nend</p>\n<p>Best,<br>\nAndreas</p>",
        "id": 294288270,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660922573
    },
    {
        "content": "<p>From: Eddy Westbrook &lt;<a href=\"mailto:westbrook@kestrel.edu\">westbrook@kestrel.edu</a>&gt;<br>\nHi,</p>\n<p>I was wondering, is there any way to import a locale in a way that changes the names it uses for the axioms, without having to write the whole locale over again? As an example of what I mean, consider the following locale for monoids:</p>\n<p>locale monoid =<br>\n fixes zero :: \"'a\"<br>\n fixes plus :: \"'a \\&lt;times&gt; 'a =&gt; 'a\"<br>\n assumes left_zero: \"plus (zero, x) = x\"<br>\n assumes right_zero: \"plus (x, zero) = x\"<br>\n assumes plus_assoc: \"plus (plus (x,y),z) = plus (x,plus (y,z))”</p>\n<p>Is there a way to change this to use the names “one”, “times”, “left_one”, “right_one”, and “times_assoc” without writing the whole locale over again? I was thinking something like the following, which already does what I want (if the last three lines are dropped) for changing “zero” to “one” and “plus” to “times”:</p>\n<p>locale monoid_times = monoid<br>\n  where zero = one<br>\n  and plus = times<br>\n  and left_zero = left_one<br>\n  and right_zero = right_one<br>\n  and plus_assoc = times_assoc<br>\n  for one times left_one right_one times_assoc</p>\n<p>I know that, in this particular case, what I wrote above is actually just as long as if I had re-defined monoid_times from scratch, but the context is that we often only want to change a few names, rather than all of them, so some sort of notation like this would be helpful.</p>\n<p>Similarly, is there a way to change the type variable used, e.g., from ‘a to in monoid to ‘b in monoid_times? I know that in this case I could annotate “one” with the type variable ‘b, but in general a locale might only have elements with more complex types involving ‘a, so it might be annoying to have to write out the whole type just to change one type variable.</p>\n<p>Thanks,<br>\n-Eddy</p>",
        "id": 294294482,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660924171
    },
    {
        "content": "<p>From: Andreas Lochbihler &lt;<a href=\"mailto:andreas.lochbihler@inf.ethz.ch\">andreas.lochbihler@inf.ethz.ch</a>&gt;<br>\nHi Eddy,</p>\n<p>AFAIK the names of the assumption only show up as theorem names that can be used in the <br>\nlocale. Therefore, instead of renaming the assumptions, you can declare alias names with <br>\nlemmas. For example:</p>\n<p>locale monoid_times = monoid one times<br>\n   for one times<br>\nbegin<br>\nlemmas left_one = left_zero<br>\nlemmas right_one = right_zero<br>\nend</p>\n<p>Unfortunately, there is no way to specify the names of type variables other than <br>\nmentioning them in the type of one of the fixed parameters.</p>\n<p>Best,<br>\nAndreas</p>",
        "id": 294294523,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660924184
    }
]