[
    {
        "content": "<p>From: John Munroe &lt;<a href=\"mailto:munddr@gmail.com\">munddr@gmail.com</a>&gt;<br>\nHi,</p>\n<p>Say, given the terms</p>\n<p>val trm = @{term \"%(a::nat =&gt; nat) b. a = b\"}<br>\nval arg = @{term \"c::nat=&gt;nat\"}<br>\nval arg' = @{term \"d::nat=&gt;bool\"}</p>\n<p>if I'd like to create a new term in ML, which is essentially the same<br>\nas \"trm $ arg' \" but 'a' and 'b' are to have the type \"nat =&gt; bool\"<br>\ninstead, I could change the type of every term in the trm part to<br>\ndummyT (call it trm') and call Syntax.check_term on \"trm' $ arg' \" to<br>\nreconstruct the types for the trm' part.</p>\n<p>Now, what if I want to decrease the arity of \"a\" and \"b\", e.g., from<br>\n\"nat =&gt; nat\" to \"nat\"? I can't seem to use the same method. In trm,<br>\nthe = operator takes two lambda abstracted terms as arguments, but if<br>\n'a' and 'b' are to be of type 'nat', then = should take two bound<br>\nvariables instead.</p>\n<p>Is there a nice way to manipulate the type in this kind of situations<br>\nsuch that the arity is decreased?</p>\n<p>Thanks a lot for the time.</p>\n<p>John</p>",
        "id": 294216867,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660895378
    },
    {
        "content": "<p>From: Michael Chan &lt;<a href=\"mailto:mchan@inf.ed.ac.uk\">mchan@inf.ed.ac.uk</a>&gt;<br>\nHi John,</p>\n<p>Try eta-contracting the terms with Envir.eta_contract. That should <br>\nrewrite the lambda abstractions and running Syntax.check_term should <br>\nthen reconstruct the types accordingly.</p>\n<p>HTH</p>\n<p>Michael</p>",
        "id": 294216955,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660895414
    }
]