[
    {
        "content": "<p>From: John Munroe &lt;<a href=\"mailto:munddr@gmail.com\">munddr@gmail.com</a>&gt;<br>\nHi all,</p>\n<p>I'm trying to increase the unification depth in the theory using<br>\ndeclare [[unification_search_bound = 70]], but it seems there's no<br>\neffect and stays at 60.</p>\n<p>theory Test<br>\nimports Complex_Main<br>\nbegin</p>\n<p>declare [[unification_search_bound = 70]]<br>\n...</p>\n<p>Using an unsynchronized reference, changing the last line of Unify.hounifiers to</p>\n<p>in (ref := search_bnd; add_unify 1 ((env,dps), Seq.empty)) end;</p>\n<p>and reading off ref, it still shows 60.</p>\n<p>It seems that Unify.search_bound is fixed to the value of<br>\nUnify.search_bound_value, which is default to 60 due to</p>\n<p>val search_bound_value = Config.declare true \"unify_search_bound\" (K<br>\n(Config.Int 60));<br>\nval search_bound = <a href=\"http://Config.int\">Config.int</a> search_bound_value;<br>\n...<br>\nfun hounifiers...<br>\n   val search_bnd = Config.get_global thy search_bound<br>\n   ...<br>\n   if tdepth &gt; search_bnd then<br>\n        (warning \"Unification bound exceeded\"; (Seq.pull reseq))<br>\n   ...</p>\n<p>Any help will be appreciated.</p>\n<p>Thanks</p>\n<p>John</p>",
        "id": 294120076,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660839533
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nDid you really try it as above?  The configuration option is called <br>\n\"unify_search_bound\".  Here is an example in Isabelle2009-2:</p>\n<p>declare [[unify_search_bound = 70]]</p>\n<p>ML {* Config.get_global @{theory} Unify.search_bound *}<br>\n   ML {* Config.get @{context} Unify.search_bound *}</p>\n<p>For historical reasons there is a snag: unify options can only be modified <br>\nin a global context.  E.g. consider:</p>\n<p>lemma A<br>\n     using [[unify_search_bound = 42]]</p>\n<p>### Ignoring local change of global option \"unify_search_bound\"</p>\n<p>As usual in Proof General, such warnings are easily overlooked.  As usual, <br>\nit will be much more visible in the Isabelle/jEdit prover IDE, although <br>\nI've already had some complaints that warnings are too prominent there.</p>\n<p>Makarius</p>",
        "id": 294120094,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660839539
    },
    {
        "content": "<p>From: John Munroe &lt;<a href=\"mailto:munddr@gmail.com\">munddr@gmail.com</a>&gt;<br>\nSorry, my mistake. Indeed I tried unify_search_bound = 5. I see that<br>\nthe configuration itself has changed, but the function hounifiers<br>\ndoesn't seem to see the update:</p>\n<p>If I do:</p>\n<p>declare [[unify_search_bound = 70]]</p>\n<p>ML {* Config.get_global @{theory} Unify.search_bound *}<br>\nML {* Config.get @{context} Unify.search_bound *}</p>\n<p>I do see 70 for both.</p>\n<p>But if I do</p>\n<p>ML {<em>!Unify.ref</em>}</p>\n<p>even after having run hounifiers, via, e.g., Unify.matchers, I see 60.<br>\nHere's how ref is assigned:</p>\n<p>fun hounifiers (thy,env, tus : (term*term)list)<br>\n  : (Envir.env * (term*term)list)Seq.seq =<br>\n  let<br>\n   ...<br>\n  in (ref := search_bnd; add_unify 1 ((env, dps), Seq.empty)) end;</p>\n<p>So It seems hounifiers can't see the update. If I change it to<br>\nsomething more extreme, like 5, the unifier itself doesn't behave as<br>\nif it was 5 but as if it was 60.</p>\n<p>Thanks<br>\nJohn</p>",
        "id": 294120137,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660839551
    },
    {
        "content": "<p>From: <a href=\"mailto:munddr@gmail.com\">munddr@gmail.com</a></p>\n<blockquote>\n<p>Here's how ref is assigned:</p>\n</blockquote>\n<blockquote>\n<p>fun hounifiers (thy,env, tus : (term*term)list)</p>\n</blockquote>\n<blockquote>\n<p>: (Envir.env * (term*term)list)Seq.seq =</p>\n</blockquote>\n<blockquote>\n<p>let</p>\n</blockquote>\n<blockquote>\n<p>...</p>\n</blockquote>\n<blockquote>\n<p>in (ref := search_bnd; add_unify 1 ((env, dps), Seq.empty)) end;</p>\n</blockquote>\n<p>Just a follow-up question: If unify_search_bound is updated, I should  <br>\nexpect to see ref to be updated there, right?</p>\n<p>Thanks<br>\nJohn</p>\n<blockquote>\n<p>So It seems hounifiers can't see the update. If I change it to</p>\n</blockquote>\n<blockquote>\n<p>something more extreme, like 5, the unifier itself doesn't behave as</p>\n</blockquote>\n<blockquote>\n<p>if it was 5 but as if it was 60.</p>\n</blockquote>\n<blockquote>\n<p>Thanks</p>\n</blockquote>\n<blockquote>\n<p>John</p>\n</blockquote>\n<blockquote>\n<p>On Fri, Nov 26, 2010 at 1:00 PM, Makarius <a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt; wrote:</p>\n</blockquote>\n<blockquote>\n<blockquote>\n<p>On Fri, 26 Nov 2010, John Munroe wrote:</p>\n</blockquote>\n</blockquote>\n<blockquote>\n<p>&gt;</p>\n</blockquote>\n<blockquote>\n<blockquote>\n<blockquote>\n<p>theory Test</p>\n</blockquote>\n</blockquote>\n</blockquote>\n<blockquote>\n<blockquote>\n<blockquote>\n<p>imports Complex_Main</p>\n</blockquote>\n</blockquote>\n</blockquote>\n<blockquote>\n<blockquote>\n<blockquote>\n<p>begin</p>\n</blockquote>\n</blockquote>\n</blockquote>\n<blockquote>\n<blockquote>\n<p>&gt;</p>\n</blockquote>\n</blockquote>\n<blockquote>\n<blockquote>\n<blockquote>\n<p>declare [[unification_search_bound = 70]]</p>\n</blockquote>\n</blockquote>\n</blockquote>\n<blockquote>\n<blockquote>\n<blockquote>\n<p>...</p>\n</blockquote>\n</blockquote>\n</blockquote>\n<blockquote>\n<p>&gt;</p>\n</blockquote>\n<blockquote>\n<blockquote>\n<blockquote>\n<p>It seems that Unify.search_bound is fixed to the value of</p>\n</blockquote>\n</blockquote>\n</blockquote>\n<blockquote>\n<blockquote>\n<blockquote>\n<p>Unify.search_bound_value, which is default to 60 due to</p>\n</blockquote>\n</blockquote>\n</blockquote>\n<blockquote>\n<p>&gt;</p>\n</blockquote>\n<blockquote>\n<blockquote>\n<p>Did you really try it as above? The configuration option is called</p>\n</blockquote>\n</blockquote>\n<blockquote>\n<blockquote>\n<p>\"unify_search_bound\". Here is an example in Isabelle2009-2:</p>\n</blockquote>\n</blockquote>\n<blockquote>\n<p>&gt;</p>\n</blockquote>\n<blockquote>\n<blockquote>\n<p>declare [[unify_search_bound = 70]]</p>\n</blockquote>\n</blockquote>\n<blockquote>\n<p>&gt;</p>\n</blockquote>\n<blockquote>\n<blockquote>\n<p>ML {* Config.get_global @{theory} Unify.search_bound *}</p>\n</blockquote>\n</blockquote>\n<blockquote>\n<blockquote>\n<p>ML {* Config.get @{context} Unify.search_bound *}</p>\n</blockquote>\n</blockquote>\n<blockquote>\n<p>&gt;</p>\n</blockquote>\n<blockquote>\n<blockquote>\n<p>For historical reasons there is a snag: unify options can only be  <br>\nmodified</p>\n</blockquote>\n</blockquote>\n<blockquote>\n<blockquote>\n<p>in a global context. Eg consider:</p>\n</blockquote>\n</blockquote>\n<blockquote>\n<p>&gt;</p>\n</blockquote>\n<blockquote>\n<blockquote>\n<p>lemma A</p>\n</blockquote>\n</blockquote>\n<blockquote>\n<blockquote>\n<p>using [[unify_search_bound = 42]]</p>\n</blockquote>\n</blockquote>\n<blockquote>\n<p>&gt;</p>\n</blockquote>\n<blockquote>\n<blockquote>\n<h3>Ignoring local change of global option \"unify_search_bound\"</h3>\n</blockquote>\n</blockquote>\n<blockquote>\n<p>&gt;</p>\n</blockquote>\n<blockquote>\n<blockquote>\n<p>As usual in Proof General, such warnings are easily overlooked. As  <br>\nusual,</p>\n</blockquote>\n</blockquote>\n<blockquote>\n<blockquote>\n<p>it will be much more visible in the Isabelle/jEdit prover IDE, although  <br>\nI've</p>\n</blockquote>\n</blockquote>\n<blockquote>\n<blockquote>\n<p>already had some complaints that warnings are too prominent there.</p>\n</blockquote>\n</blockquote>\n<blockquote>\n<p>&gt;</p>\n</blockquote>\n<blockquote>\n<p>&gt;</p>\n</blockquote>\n<blockquote>\n<blockquote>\n<p>Makarius</p>\n</blockquote>\n</blockquote>\n<blockquote>\n<p>&gt;</p>\n</blockquote>",
        "id": 294120308,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660839603
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nHard to say from this tiny extract of the source above.  There could be <br>\nsome unexpected effects due to lazy evaluation or parallelism. Mutable <br>\nreferences are a source of many problems and being gradually removed from <br>\nthe system.</p>\n<p>For experimentation, it is usually easier to print out something using <br>\nwriteln or similar.</p>\n<p>Makarius</p>",
        "id": 294120440,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660839649
    },
    {
        "content": "<p>From: John Munroe &lt;<a href=\"mailto:munddr@gmail.com\">munddr@gmail.com</a>&gt;</p>\n<blockquote>\n<p>Hard to say from this tiny extract of the source above. Â There could be some<br>\nunexpected effects due to lazy evaluation or parallelism. Mutable references<br>\nare a source of many problems and being gradually removed from the system.</p>\n<p>For experimentation, it is usually easier to print out something using<br>\nwriteln or similar.<br>\n</p>\n</blockquote>\n<p>OK. I've tried it with \"writeln (Int.toString search_bnd)\" instead and<br>\nI get a reading of 60 as well, even after I've changed it to 5 with<br>\n\"declare [[unify_search_bound=5]]\". I've looked at some of the<br>\nunifiers and they are definitely deeper than 5 levels, e.g.,</p>\n<p>%a::nat =&gt; nat.<br>\n                       a (a (a (a (a (a<br>\n (a (a (a (a (a (a (a (a (a (a (a (a (a<br>\n (a (a (a (a (a (a (a (a (a (a (a (a (a<br>\n (a (a (a (a (a (a (a (a (a (a (a (a (a<br>\n (a (a (a (a (a (a (a (a (a (a (a (a ((h::(nat =&gt; bool) =&gt; nat)<br>\n (s::nat =&gt; bool))))))))))))))))))))))))))))))))))))))))))))))))))))))))))</p>\n<p>Thanks</p>\n<p>John</p>\n<blockquote>\n<p>Makarius<br>\n</p>\n</blockquote>",
        "id": 294120498,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660839674
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nThat's very strange.  Are you sure you have the correct context in your <br>\nexample?  One where the \"declare [[unify_search_bound=5]]\" is effective?</p>\n<p>Can you show a self-contained snippet of theory source text?</p>\n<p>Makarius</p>",
        "id": 294120571,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660839704
    },
    {
        "content": "<p>From: <a href=\"mailto:munddr@gmail.com\">munddr@gmail.com</a><br>\nOn Nov 28, 2010 4:22pm, Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt; wrote:</p>\n<blockquote>\n<p>On Sun, 28 Nov 2010, John Munroe wrote:</p>\n</blockquote>\n<blockquote>\n<p>I've tried it with \"writeln (Int.toString search_bnd)\" instead and I get  <br>\na reading of 60 as well, even after I've changed it to 5 with \"declare  <br>\n[[unify_search_bound=5]]\". I've looked at some of the unifiers and they  <br>\nare definitely deeper than 5 levels, eg,</p>\n</blockquote>\n<blockquote>\n<p>%a::nat =&gt; nat.</p>\n</blockquote>\n<blockquote>\n<p>a (a (a (a (a (a</p>\n</blockquote>\n<blockquote>\n<p>(a (a (a (a (a (a (a (a (a (a (a (a (a</p>\n</blockquote>\n<blockquote>\n<p>(a (a (a (a (a (a (a (a (a (a (a (a (a</p>\n</blockquote>\n<blockquote>\n<p>(a (a (a (a (a (a (a (a (a (a (a (a (a</p>\n</blockquote>\n<blockquote>\n<p>(a (a (a (a (a (a (a (a (a (a (a (a ((h::(nat =&gt; bool) =&gt; nat)</p>\n</blockquote>\n<blockquote>\n<p>(s::nat =&gt; bool))))))))))))))))))))))))))))))))))))))))))))))))))))))))))</p>\n</blockquote>\n<blockquote>\n<p>That's very strange. Are you sure you have the correct context in your  <br>\nexample? One where the \"declare [[unify_search_bound=5]]\" is effective?</p>\n</blockquote>\n<p>Indeed, it was a problem with my context.</p>\n<p>Thanks<br>\nJohn</p>\n<blockquote>\n<p>Can you show a self-contained snippet of theory source text?</p>\n</blockquote>\n<blockquote>\n<p>Makarius</p>\n</blockquote>",
        "id": 294120747,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660839753
    }
]