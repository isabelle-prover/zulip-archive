[
    {
        "content": "<p>From: Lars Hupel &lt;<a href=\"mailto:hupel@in.tum.de\">hupel@in.tum.de</a>&gt;<br>\nDear list,</p>\n<p>I'd like to announce the availability of a technology preview of code<br>\nclone detection for Isabelle theories.</p>\n<p>This is the result of a Master's Thesis carried out by Dominik Vinan<br>\nunder my supervision, with the help of Benjamin Hummel. Benjamin's<br>\ncompany is the vendor of ConQAT, an open-source software quality<br>\nassurance toolkit, for which the student has implemented an Isabelle<br>\nfrontend.</p>\n<p>The purpose of code clone detection is simple: to find duplicated<br>\nspecification or proof fragments in Isabelle theories.</p>\n<p>I will present the tool and its accompanying paper at the Isabelle<br>\nWorkshop in Nancy, but it is already possible to download and use it:</p>\n<p>Paper<br>\n  &lt;<a href=\"http://www.in.tum.de/~nipkow/Isabelle2016/Isabelle2016_9.pdf\">http://www.in.tum.de/~nipkow/Isabelle2016/Isabelle2016_9.pdf</a>&gt;</p>\n<p>ConQAT+Isabelle bundle</p>\n<p>&lt;<a href=\"https://www21.in.tum.de/~hupel/downloads/isabelle-clones/isabelle-clones-preview.zip\">https://www21.in.tum.de/~hupel/downloads/isabelle-clones/isabelle-clones-preview.zip</a>&gt;</p>\n<p>The bundle should contain all instructions for feeding theories into<br>\nConQAT. It should work on macOS and Linux (no guarantees for Windows).<br>\nThe result is an HTML report of detected clones which can be viewed in<br>\nthe browser.</p>\n<p>If you try it out, please report any problems (or that you didn't have<br>\nproblems) to me via mail so that the student and me can iron out bugs<br>\nbefore ITP.</p>\n<p>Cheers<br>\nLars</p>",
        "id": 294679123,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661176052
    },
    {
        "content": "<p>From: Johannes Waldmann &lt;<a href=\"mailto:johannes.waldmann@htwk-leipzig.de\">johannes.waldmann@htwk-leipzig.de</a>&gt;<br>\nInteresting.</p>\n<p>As far as I understood from the paper,<br>\nyou are parsing source code with libisabelle,<br>\nwhich in turn requires a full Isabelle installation.<br>\n(Then - is parsing safe? Or is there danger of<br>\ncode injection?)</p>\n<p>I'd hope there is something like Language.Isabelle,<br>\n(just AST data type and parser - no semantics). cf.<br>\n<a href=\"https://hackage.haskell.org/package/haskell-src-exts\">https://hackage.haskell.org/package/haskell-src-exts</a><br>\n<a href=\"https://hackage.haskell.org/package/language-javascript\">https://hackage.haskell.org/package/language-javascript</a></p>\n<p>very hypothetically - is there a formal Isabelle(Isar) grammar<br>\nfrom which AST representation and parser/printer (in Haskell)<br>\ncould be generated (mostly) automatically?</p>\n<p>Best regards, J. Waldmann.</p>",
        "id": 294679177,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661176077
    },
    {
        "content": "<p>From: Lars Hupel &lt;<a href=\"mailto:hupel@in.tum.de\">hupel@in.tum.de</a>&gt;<br>\nHi Johannes,</p>\n<blockquote>\n<p>As far as I understood from the paper,<br>\nyou are parsing source code with libisabelle,<br>\nwhich in turn requires a full Isabelle installation.<br>\n(Then - is parsing safe? Or is there danger of<br>\ncode injection?)</p>\n</blockquote>\n<p>no, it is unsafe; yes, there is danger of code injection. Loading<br>\nIsabelle theories with libisabelle is equivalent to loading them into<br>\nIsabelle/jEdit.</p>\n<blockquote>\n<p>very hypothetically - is there a formal Isabelle(Isar) grammar<br>\nfrom which AST representation and parser/printer (in Haskell)<br>\ncould be generated (mostly) automatically?</p>\n</blockquote>\n<p>To quote the paper:</p>\n<p>\"Isabelle/Isar is the surface syntax for Isabelle theories. Because it<br>\nis user-extensible, it is impossible to parse statically.\"</p>\n<p>Due to the presence of arbitrarily complicated parse translations (inner<br>\nsyntax) and syntax parsers (outer syntax) written in ML the syntactic<br>\nanalysis of Isar is equivalent to the halting problem. In that sense<br>\nIsar is very much like Perl.</p>\n<p>Cheers<br>\nLars</p>",
        "id": 294679193,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661176082
    },
    {
        "content": "<p>From: Johannes Waldmann &lt;<a href=\"mailto:johannes.waldmann@htwk-leipzig.de\">johannes.waldmann@htwk-leipzig.de</a>&gt;<br>\nHi.</p>\n<p>Quoting out of context, on purpose:</p>\n<blockquote>\n<p>... Isar is very much like Perl.</p>\n</blockquote>\n<p>Great! Use this for advertising.<br>\nShould open up a whole new population of users ...</p>\n<p>User-defined syntax is perhaps<br>\nmore a matter of readability<br>\n(I guess it's mostly about operator precedences,<br>\nand a few special forms - unless you actively abuse it).<br>\nBut code injection really scares me.</p>\n<p>Mind you, Haskell is scary too, because I can do</p>\n<p>{-# language TemplateHaskell #-}<br>\nimport Language.Haskell.TH<br>\n$(runIO (print 42) &gt;&gt; return [])<br>\nmain = return ()</p>\n<p>which will do IO during compilation.</p>\n<p>But that needs the language pragma to be present<br>\n(at the start of the file)<br>\nand I can call ghc (the compiler) with \"-XSafe\"<br>\nand it will reject such code outright.</p>\n<p>This \"safe Haskell\" is a recent addition<br>\nto the language (well, to GHC actually).<br>\n<a href=\"https://ghc.haskell.org/trac/ghc/wiki/SafeHaskell\">https://ghc.haskell.org/trac/ghc/wiki/SafeHaskell</a></p>\n<p>I wonder why Isabelle plans to abandon<br>\nits \"safe\" flag (as Lars mentioned in<br>\n<a href=\"https://lists.cam.ac.uk/pipermail/cl-isabelle-users/2016-July/msg00034.html\">https://lists.cam.ac.uk/pipermail/cl-isabelle-users/2016-July/msg00034.html</a><br>\n)</p>\n<p>Best regards, Johannes.</p>",
        "id": 294679245,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661176088
    },
    {
        "content": "<p>From: Manuel Eberl &lt;<a href=\"mailto:eberlm@in.tum.de\">eberlm@in.tum.de</a>&gt;</p>\n<blockquote>\n<p>But that needs the language pragma to be present<br>\n(at the start of the file)<br>\nand I can call ghc (the compiler) with \"-XSafe\"<br>\nand it will reject such code outright.</p>\n</blockquote>\n<p>From the Haskell documentation:</p>\n<blockquote>\n<p>‘Safe Haskell, however, does not offer compilation safety. During <br>\ncompilation time it is possible for arbitrary processes to be <br>\nlaunched, using for example the custom pre-processor flag. This can be <br>\nmanipulated to either compromise a users system at compilation time, <br>\nor to modify the source code just before compilation to try to alter <br>\nset Safe Haskell flags.’</p>\n</blockquote>\n<p>Also, I don't recall the details, but I think there were some problems <br>\nwith Safe Haskell in the past. If you want to be (more) sure, you <br>\nprobably still have to sandbox compilation and execution on the OS level.</p>\n<blockquote>\n<p>I wonder why Isabelle plans to abandon<br>\nits \"safe\" flag (as Lars mentioned in<br>\n<a href=\"https://lists.cam.ac.uk/pipermail/cl-isabelle-users/2016-July/msg00034.html\">https://lists.cam.ac.uk/pipermail/cl-isabelle-users/2016-July/msg00034.html</a><br>\n)<br>\nFirst of all, the ability to write custom tactics in ML is an integral <br>\npart of Isabelle. Preventing people from doing that is too immense a <br>\nrestriction for it to be a useful feature in pretty much any context <br>\nexcept course homework (where writing tactics is usually not done – <br>\nalthough I did in fact do that for one of my homework submissions to <br>\nmake my life easier).</p>\n</blockquote>\n<p>Secondly, if I recall, Isabelle's ‘safe’ mode isn't actually very safe. <br>\nI don't know what it prevents and what it does not prevent, but even <br>\nwithout the ability to embed arbitrary ML code, you can do all kinds of <br>\nnasty things with code generation and the ‘value’ command. Isabelle is a <br>\nhuge system and as far as I am aware, none of it was ever designed with <br>\na ‘malicious’ user in mind.</p>\n<p>I guess if one were to go over the entire code base of Isabelle with the <br>\nexpress intent of finding possible security problems and then ensuring <br>\nthat all of these are disallowed in the safe mode could result in a <br>\nversion of Isabelle that provides a reasonable amount of confidence in <br>\nits safety, but that would be a big endeavour and the only real use case <br>\nwould be automatic homework processing.</p>\n<p>Considering that you can do the same thing with considerably less <br>\neffort, no restrictions imposed on the expressivity of Isabelle, and <br>\nwith much better confidence in the safety of the approach by using <br>\nsandboxes/containers, I don't think there is any reason to invest time <br>\nand energy into a ‘safe mode’.</p>\n<p>Cheers,</p>\n<p>Manuel</p>",
        "id": 294679268,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661176101
    },
    {
        "content": "<p>From: Lars Hupel &lt;<a href=\"mailto:hupel@in.tum.de\">hupel@in.tum.de</a>&gt;</p>\n<blockquote>\n<blockquote>\n<p>... Isar is very much like Perl.</p>\n</blockquote>\n<p>Great! Use this for advertising.<br>\nShould open up a whole new population of users ...</p>\n</blockquote>\n<p>This was on purpose ;-)</p>\n<blockquote>\n<p>User-defined syntax is perhaps<br>\nmore a matter of readability<br>\n(I guess it's mostly about operator precedences,<br>\nand a few special forms - unless you actively abuse it).<br>\nBut code injection really scares me.</p>\n</blockquote>\n<p>I think your mental model of Isabelle is slightly off. There's no point<br>\nin discussing the design decisions made decades ago when we're really<br>\ndiscussing how clone detection works with the system we have right now.</p>\n<p>To rephrase: Isabelle has arbitrary user-extensible syntax and it has<br>\narbitrary executable ML code. If you want to do realistic syntax<br>\nanalysis today you have to accept that.</p>\n<p>I'm not saying that in the future there couldn't be some other<br>\nmechanism. But it is what it is right now.</p>\n<blockquote>\n<p>I wonder why Isabelle plans to abandon<br>\nits \"safe\" flag (as Lars mentioned in<br>\n<a href=\"https://lists.cam.ac.uk/pipermail/cl-isabelle-users/2016-July/msg00034.html\">https://lists.cam.ac.uk/pipermail/cl-isabelle-users/2016-July/msg00034.html</a><br>\n)</p>\n</blockquote>\n<p>There are no plans to abandon it. It has already been abandoned.</p>\n<p>But the reasoning goes as follows: Many people understand many different<br>\nthings about what \"secure mode\" is supposed to mean. The fact that it<br>\nwon't run custom ML code means neither that</p>\n<p>a) malicious users are prevented from tricking the system into accepting<br>\ntheorems which are not actually proven (e.g. by using axiomatization)</p>\n<p>b) malicious users are prevented from affecting the operating system or<br>\nthe machine running Isabelle</p>\n<p>But it means that many legitimate things (e.g. custom tactics, loading<br>\nAFP libraries which contain ML code) are impossible.</p>\n<p>Because of that it wasn't really useful to begin with. Having a \"secure\"<br>\nflag which doesn't actually protect anything is worse than having no<br>\nflag at all.</p>\n<p>Again, in the future, there could be different mechanisms. But before<br>\ndoing so we actually need to come up with a solid threat model and a<br>\nspecification on what \"secure\" should mean.</p>\n<p>Cheers<br>\nLars</p>",
        "id": 294679278,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661176107
    },
    {
        "content": "<p>From: Lars Hupel &lt;<a href=\"mailto:hupel@in.tum.de\">hupel@in.tum.de</a>&gt;<br>\nSorry, that probably came off harsher than intended. I was trying to say<br>\nthat Isabelle supports all these things today and there is no reliable<br>\nway to turn them off.</p>",
        "id": 294679292,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661176113
    }
]