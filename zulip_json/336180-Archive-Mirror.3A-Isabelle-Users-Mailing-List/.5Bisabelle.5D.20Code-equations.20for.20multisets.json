[
    {
        "content": "<p>From: René Thiemann &lt;<a href=\"mailto:rene.thiemann@uibk.ac.at\">rene.thiemann@uibk.ac.at</a>&gt;<br>\nDear all,</p>\n<p>I recently played around with the available code-equations for multisets.<br>\n(I wanted to get rid of manual data refinement in our formalization)</p>\n<p>Here, the current problem is that the code for comparing multisets is non-terminating:</p>\n<p>E.g., equality is implemented via two calls to &lt;=,<br>\nand &lt;= is implemented via intersection and equality.<br>\nHence, even </p>\n<p>value[code] \"{#} = {#}\" </p>\n<p>does not terminate.</p>\n<p>To solve this problem, I wrote a tiny implementation for comparisons.<br>\nEverybody can use it, and it would be nice, if <br>\nthis algorithm or another proper implementation would find its<br>\nway into the distribution in src/HOL/Library/Multiset.thy.</p>\n<p>Kind regards,<br>\nRené<br>\n<a href=\"/user_uploads/14278/J4nnGTiD95QOON7XD1tdhqbJ/Multiset_Code.thy\">Multiset_Code.thy</a></p>",
        "id": 294268542,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660916428
    },
    {
        "content": "<p>From: \"Jens-D. Doll\" &lt;<a href=\"mailto:jd@cococo.de\">jd@cococo.de</a>&gt;<br>\nHello René,</p>\n<p>could you explain the results for code comparison from conventional theory  <br>\na little? Aren't there some undecidable areas? And which results do we  <br>\nhave on normal forms and reducability?</p>\n<p>Jens</p>\n<p>------------------- René Thiemann wrote: -----------------</p>\n<p>... the current problem is that the code for comparing multisets is  <br>\nnon-terminating: ...</p>",
        "id": 294268554,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660916434
    },
    {
        "content": "<p>From: René Thiemann &lt;<a href=\"mailto:rene.thiemann@uibk.ac.at\">rene.thiemann@uibk.ac.at</a>&gt;<br>\nHi Jens,</p>\n<blockquote>\n<p>could you explain the results for code comparison from conventional theory a little?</p>\n</blockquote>\n<p>The problem is easily explained. At the end of Multiset.thy, multisets are implemented via (not necessarily sorted) lists.<br>\nI.e., now all multiset-operations must be implemented on lists, where multiset_of is seen as a constructor.</p>\n<p>E.g., it would be possible to implement membership via the lemma</p>\n<p>lemma [code]: \"(x :# multiset_of xs) = (x : set xs)\"</p>\n<p>Pattern matching on multiset_of is however not required. It is perfectly fine to implement multiset-equality via <br>\nthe multiset subset-relation in general, i.e., without any specialization on the implementation type:</p>\n<p>lemma[code]: \"(A = (B :: 'a multiset)) = (A &lt;= B &amp; B &lt;= A)\"</p>\n<p>However, the problem in Multiset.thy is, that the subset-relation is again implemented via equality:</p>\n<p>lemma[code]: \"(A &lt;= B) = (inf_multiset A B = A)</p>\n<p>Then, when trying to evaluate \"A = B\" we immediately invoke \"A &lt;= B\" which in turn<br>\ninvokes \"inf_multiset A B = A\" which invokes \"&lt;=\", etc.</p>\n<p>So, at least \"=\" or \"&lt;=\" must be implemented directly, which is what I did in the previously attached theory.</p>\n<p>Of course, one can think of smarter representations for multisets, like sorted lists,<br>\nor maps \"'a =&gt; nat\" which store the multiplicity of each element, but this is a bit more effort<br>\nthan just fixing the current implementation of multisets by lists which is provided in Multiset.thy.</p>\n<blockquote>\n<p>Aren't there some undecidable areas? And which results do we have on normal forms and reducability?</p>\n</blockquote>\n<p>Can you be more precise? The above problems at least have nothing to do with undecidability!</p>\n<p>Cheers,<br>\nRené</p>",
        "id": 294268569,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660916440
    },
    {
        "content": "<p>From: \"Jens-D. Doll\" &lt;<a href=\"mailto:jd@cococo.de\">jd@cococo.de</a>&gt;<br>\nIf you consider code comparison of a phrase structure language or subsets  <br>\nof it you will find intractables and undicidables; at least the current  <br>\ntheory says so.</p>\n<p>D'accord?<br>\nJens</p>",
        "id": 294268705,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660916483
    },
    {
        "content": "<p>From: René Thiemann &lt;<a href=\"mailto:rene.thiemann@uibk.ac.at\">rene.thiemann@uibk.ac.at</a>&gt;<br>\nMaybe, but I do not see the connection between the \"code comparison of a phrase structure language\" and my topic, the implementation of finite multisets.</p>\n<p>René</p>",
        "id": 294268721,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660916489
    },
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\nRené, thanks for your implementation, it is \"in\" now. I have defined your<br>\nauxiliary function List.extract (which may be of general interest for list<br>\nmanipulators) via takeWhile and dropWhile, but the implementation is still via<br>\nyour code equations.</p>\n<p>Note that there is actually a faster implementation of multisets in<br>\nLibrary/DAList_Multiset.thy. Nevertheless it is nice that the default one<br>\nterminates more often now ;-)</p>\n<p>Tobias</p>",
        "id": 294268917,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660916538
    },
    {
        "content": "<p>From: René Thiemann &lt;<a href=\"mailto:rene.thiemann@uibk.ac.at\">rene.thiemann@uibk.ac.at</a>&gt;<br>\nDear Tobias,</p>\n<blockquote>\n<p>your implementation is \"in\" now. </p>\n</blockquote>\n<p>Thanks for taking care of it.</p>\n<blockquote>\n<p>Note that there is actually a faster implementation of multisets in<br>\nLibrary/DAList_Multiset.thy. </p>\n</blockquote>\n<p>This is true, but actually also this implementation lacks some implementations, namely<br>\nnone of the following constants are executable after loading DAList_Multiset:</p>\n<p>set_of, msetsum, msetprod, mcard, image_mset</p>\n<p>To this end, it might be nice to merge the attached theory into DAList_Multiset: it implements<br>\nall of the above constants via a generic DA_List_Multiset_fold constant.</p>\n<p>Maybe someone else also requires a more complete implementation.</p>\n<p>Cheers,<br>\nRené<br>\n<a href=\"/user_uploads/14278/qFpdMbzOTUYp_BAwwiKLWNxn/Multiset_Code.thy\">Multiset_Code.thy</a></p>",
        "id": 294271922,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660917483
    },
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\nI have added your contributions, thank you!</p>\n<p>Tobias</p>",
        "id": 294271960,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660917495
    }
]