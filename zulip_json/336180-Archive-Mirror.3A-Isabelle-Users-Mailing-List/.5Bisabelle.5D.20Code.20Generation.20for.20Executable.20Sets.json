[
    {
        "content": "<p>From: Tjark Weber &lt;<a href=\"mailto:webertj@in.tum.de\">webertj@in.tum.de</a>&gt;<br>\nI'm trying to generate code from a model that defines numerous sets and<br>\nrelations.</p>\n<p>Currently, I am importing theory Executable_Set (from HOL/Library).<br>\nThere is a dire warning in this theory: \"avoid using this at any cost!\"<br>\nIs there a better option then?  I'd rather not rephrase the model in<br>\nterms of lists everywhere.</p>\n<p>With Executable_Set imported, the generated code unfortunately is not<br>\ntype-correct.  The code generator confuses \"'a =&gt; bool\" with \"'a set\".<br>\nMy own functions are generated with the former type, while functions<br>\nfrom Executable_Set expect the latter.  (The problem shows up when one<br>\ntries to type-check code generated from the attached theory.)</p>\n<p>Fortunately, it seems that I can work around this issue by using<br>\nCode.add_signature_cmd.  Is this the suggested solution?</p>\n<p>Unfortunately, I haven't yet figured out how to extend this workaround<br>\nto records with fields of set type (again, see the attached theory).<br>\nAny advice would be appreciated.</p>\n<p>Tjark<br>\n<a href=\"/user_uploads/14278/c3L3SLOOKOLGyBX8wR1FAQ31/Example.thy\">Example.thy</a></p>",
        "id": 294109199,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660836233
    },
    {
        "content": "<p>From: Florian Haftmann &lt;<a href=\"mailto:florian.haftmann@informatik.tu-muenchen.de\">florian.haftmann@informatik.tu-muenchen.de</a>&gt;<br>\nHi Tjark,</p>\n<blockquote>\n<p>Currently, I am importing theory Executable_Set (from HOL/Library).<br>\nThere is a dire warning in this theory: \"avoid using this at any cost!\"</p>\n<p>My own functions are generated with the former type, while functions<br>\nfrom Executable_Set expect the latter.  (The problem shows up when one<br>\ntries to type-check code generated from the attached theory.)</p>\n<p>Fortunately, it seems that I can work around this issue by using<br>\nCode.add_signature_cmd.  Is this the suggested solution?</p>\n</blockquote>\n<p>yes, indeed.</p>\n<blockquote>\n<p>Unfortunately, I haven't yet figured out how to extend this workaround<br>\nto records with fields of set type (again, see the attached theory).<br>\nAny advice would be appreciated.</p>\n</blockquote>\n<p>Unfortunately, currently there is no possibility to do so (in theory, it<br>\nshould be sufficient to add suitable declaration for Abs_* and Rep_*,<br>\nbut these are not considered for datatype constructors at the moment).</p>\n<p>An alternative could be to use the fset type from theory Fset.thy which<br>\nis logically a copy of set but executable for finite sets;  although<br>\nthis still involves a manual transfer, it is less involved than<br>\ntransferring to lists.</p>\n<p>Hope this helps,<br>\n    Florian<br>\n<a href=\"/user_uploads/14278/cJsFcVBo9Fh_kO7wiskJg0jW/signature.asc\">signature.asc</a></p>",
        "id": 294109284,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660836251
    },
    {
        "content": "<p>From: Florian Haftmann &lt;<a href=\"mailto:florian.haftmann@informatik.tu-muenchen.de\">florian.haftmann@informatik.tu-muenchen.de</a>&gt;<br>\nHi Tjark,</p>\n<p>I must correct myself: they <em>are</em> considered, but you must issue a<br>\nmanual code_datatype declaration <em>after</em> you have issued the signature<br>\ndeclaration, i.e.</p>\n<p>setup {*<br>\n  Code.add_signature_cmd (\"Abs_foo_ext\", ...)<br>\n*}</p>\n<p>code_datatype Abs_foo_ext</p>\n<p>Hope this helps,<br>\n    Florian<br>\n<a href=\"/user_uploads/14278/guE4JZfNkitd8rvkXgegLNFd/signature.asc\">signature.asc</a></p>",
        "id": 294109550,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660836343
    }
]