[
    {
        "content": "<p>From: Florian Haftmann &lt;<a href=\"mailto:florian.haftmann@informatik.tu-muenchen.de\">florian.haftmann@informatik.tu-muenchen.de</a>&gt;<br>\nHi Andreas,</p>\n<p>For me (rev. ca5b629a5995), z does not work either.</p>\n<p>The argument list given to export_code is parsed as a list of terms, so<br>\nabbreviations are expanded.  The result is then checked to be a constant<br>\nof an appropriate type with implicit monomorphization of class<br>\noperations (cf. Code.read_const).  In your example, x and y are such<br>\ninstances of class operations;  z and u are not but parametricly<br>\npolymorphic (although dependent on a class operation wrt. to the<br>\nunderlying code equations) and thus need to be specified with their<br>\ngeneral type.</p>\n<p>Hope this helps,<br>\n    Florian<br>\n<a href=\"/user_uploads/14278/ParBYbeocVaoNRlBjmrPW5Np/signature.asc\">signature.asc</a></p>",
        "id": 294156847,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660851561
    },
    {
        "content": "<p>From: Andreas Lochbihler &lt;<a href=\"mailto:andreas.lochbihler@kit.edu\">andreas.lochbihler@kit.edu</a>&gt;<br>\nHi all,</p>\n<p>I tried to test the code generator setup for sets in Isabelle2012-RC1. The <br>\nfollowing test fails although I would have expected it to work. Moreover, I <br>\nneither understand the error message, nor do I have any idea how to fix the problem.</p>\n<p>theory Scratch imports Main begin<br>\nexport_code UNION in SML file -</p>\n<p>*** Type<br>\n*** 'a::type set =&gt; ('a::type =&gt; 'b::type set) =&gt; 'b::type set<br>\n*** of constant \"Complete_Lattices.complete_lattice_class.SUPR\"<br>\n*** is too specific compared to declared type<br>\n*** ?'b::{} set =&gt; (?'b::{} =&gt; ?'a::{}) =&gt; ?'a::{}<br>\n*** At command \"export_code\"</p>\n<p>Best regards,<br>\nAndreas</p>",
        "id": 294160635,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660853021
    },
    {
        "content": "<p>From: Florian Haftmann &lt;<a href=\"mailto:florian.haftmann@informatik.tu-muenchen.de\">florian.haftmann@informatik.tu-muenchen.de</a>&gt;<br>\nHi Andreas,</p>\n<p>the issue is simple: UNION is just an abbrev for SUPR at a certain type, <br>\nand therefore has a »too specific« type.  Want you want is:</p>\n<p>export_code SUPR in SML</p>\n<p>or</p>\n<p>definition \"foo = UNION\"<br>\n    export_code foo in SML</p>\n<p>Hope this helps,<br>\n    Florian</p>",
        "id": 294160653,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660853030
    },
    {
        "content": "<p>From: Andreas Lochbihler &lt;<a href=\"mailto:andreas.lochbihler@kit.edu\">andreas.lochbihler@kit.edu</a>&gt;<br>\nHi Florian,</p>\n<p>thanks for the explanation (and solution). So far, abbreviations in export_code <br>\nstatements either worked for me or I got an error about \"not a constant\". Is <br>\nthere a rule of thumb when the code generator accepts to generate code for <br>\ntype-constrained constants?</p>\n<p>For example, of the following abbreviations, x y and z work, although they <br>\nspecialize types, but u does not. What is the fundamental difference?</p>\n<p>abbreviation x :: nat where \"x == 0\" (* overloaded constant *)<br>\nabbreviation y :: \"nat =&gt; nat =&gt; nat\" where \"y == op +\" (* overloaded operator *)<br>\nabbreviation z :: \"nat =&gt; nat =&gt; nat\" where \"z == power\" (* definition in type <br>\nclass *)<br>\nabbreviation u :: \"(nat =&gt; bool) =&gt; nat\" where \"u == Least\"</p>\n<p>Andreas</p>",
        "id": 294160895,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660853107
    }
]