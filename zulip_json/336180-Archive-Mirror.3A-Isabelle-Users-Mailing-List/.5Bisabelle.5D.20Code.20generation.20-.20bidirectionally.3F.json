[
    {
        "content": "<p>From: Moa Johansson &lt;<a href=\"mailto:moa.johansson@chalmers.se\">moa.johansson@chalmers.se</a>&gt;<br>\nHi,</p>\n<p>We’ve got a tool (Hipster) which relies on external tools to generate candidate lemmas for Isabelle theories. However, it is not always stable when it comes to translation between Isabelle-Haskell and back.</p>\n<p>Currently we use Isabelle’s code generator to first generate Haskell code, which then gets processed by another tool in charge of producing the conjectures. The conjectures are then read back into Isabelle. We regularly come across problems with how (library) functions and datatypes gets renamed during this process. For instance, functions over natural numbers will, when translated to Haskell, get names like “plus_nat”, “mult_nat” and so on. However, when reading a conjecture about e.g. “plus_nat” back it needs to be parsed in Isabelle as its internal long name “Groups.plus_class.plus”.</p>\n<p>I know we’re using the code generator in a way it was never intended, but is there a way of knowing which constants in Isabelle gets renamed by code generation (and to what)?</p>\n<p>Would like to have a less brittle way of translating back and forth if at all possible. Preferably without having to resort to writing our own code generator <span aria-label=\"smiling face\" class=\"emoji emoji-263a\" role=\"img\" title=\"smiling face\">:smiling_face:</span>.</p>\n<p>/Moa</p>",
        "id": 294746149,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661193525
    },
    {
        "content": "<p>From: Florian Haftmann &lt;<a href=\"mailto:florian.haftmann@informatik.tu-muenchen.de\">florian.haftmann@informatik.tu-muenchen.de</a>&gt;<br>\nHi Moa,</p>\n<p>there are actually two relevant aspects.</p>\n<blockquote>\n<p>We’ve got a tool (Hipster) which relies on external tools to generate candidate lemmas for Isabelle theories. However, it is not always stable when it comes to translation between Isabelle-Haskell and back.</p>\n<p>Currently we use Isabelle’s code generator to first generate Haskell code, which then gets processed by another tool in charge of producing the conjectures. The conjectures are then read back into Isabelle. We regularly come across problems with how (library) functions and datatypes gets renamed during this process. For instance, functions over natural numbers will, when translated to Haskell, get names like “plus_nat”, “mult_nat” and so on. However, when reading a conjecture about e.g. “plus_nat” back it needs to be parsed in Isabelle as its internal long name “Groups.plus_class.plus”.</p>\n<p>I know we’re using the code generator in a way it was never intended, but is there a way of knowing which constants in Isabelle gets renamed by code generation (and to what)?</p>\n</blockquote>\n<p>Concerning »plus_nat« etc., this has nothing to do with code generation<br>\nitself but is just a purely logical substitution of class parameters on<br>\nspecific instances by dedicated shadow constants:</p>\n<p>ML_val ‹Axclass.unoverload @{context} @{thm Suc_nat_number_of_add}›</p>\n<p>ML_val ‹Axclass.overload_conv @{context} @{cterm<br>\n\"plus_nat_inst.plus_nat\"}›</p>\n<blockquote>\n<p>Would like to have a less brittle way of translating back and forth if at all possible. Preferably without having to resort to writing our own code generator <span aria-label=\"smiling face\" class=\"emoji emoji-263a\" role=\"img\" title=\"smiling face\">:smiling_face:</span>.</p>\n</blockquote>\n<p>Do you know a priori which set of identifiers is relevant for you? Then<br>\nthere are the following possibilities:</p>\n<p>a) You can control the resulting name space explicitly, e.g.</p>\n<p>code_identifier constant distinct ⇀ (Haskell) \"Bar.blubb\"</p>\n<p>export_code distinct in Haskell</p>\n<p>You can use the corresponding ML interface to establish your own<br>\ncontrolled name mapping.</p>\n<p>b) Functions Code_Target.produce_code* take a list of identifiers and<br>\nreturn their images under code generation.</p>\n<p>Hope this helps,<br>\n    Florian<br>\n<a href=\"/user_uploads/14278/O_GdgvFBnTBODG7QMjQ4RPde/signature.asc\">signature.asc</a></p>",
        "id": 294746257,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661193581
    }
]