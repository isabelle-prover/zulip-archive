[
    {
        "content": "<p>From: Moa Johansson &lt;<a href=\"mailto:moa.johansson@chalmers.se\">moa.johansson@chalmers.se</a>&gt;<br>\nHi all,</p>\n<p>Just updating some of my code to use Isabelle2019. Noticing the interface to the code generation has changed. I managed to get my code to type-check and work, through some qualified guessing, but it would be nice to understand what I was actually doing… ☺.</p>\n<p>In Isabelle2019 the function export_code has the following type:<br>\nval export_code:<br>\nbool -&gt; string list<br>\n    -&gt; (((string * string) * ({physical: bool} * (Path.T * Position.T)) option) * Token.T list) list<br>\n    -&gt; local_theory -&gt; local_theory</p>\n<p>More specifically, what does the new arguments<br>\n{physical: bool} and<br>\nPosition.T<br>\nactually mean? Setting them to “true” and “Position.start” respectively worked fine in my case, when exporting to Haskell.</p>\n<p>Also, I am somewhat wondering about to the remark in the Changelog about the “file” argument becoming legacy and being removed. This refers to the export_code command on the Isar-level, but does it affect me when working at the ML level (i.e. what I put in the argument of type Path.T above)?</p>\n<p>Best,<br>\nMoa</p>",
        "id": 294762927,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661200517
    },
    {
        "content": "<p>From: Florian Haftmann &lt;<a href=\"mailto:florian.haftmann@informatik.tu-muenchen.de\">florian.haftmann@informatik.tu-muenchen.de</a>&gt;<br>\nHi Moa,</p>\n<p>these changes in the Isabelle/ML interface correspond to the following<br>\nNEWS entry:</p>\n<blockquote>\n<ul>\n<li>Command 'export_code' produces output as logical files within the<br>\ntheory context, as well as formal session exports that can be<br>\nmaterialized via command-line tools \"isabelle export\" or \"isabelle build<br>\n-e\" (with 'export_files' in the session ROOT). Isabelle/jEdit also<br>\nprovides a virtual file-system \"isabelle-export:\" that can be explored<br>\nin the regular file-browser. A 'file_prefix' argument allows to specify<br>\nan explicit name prefix for the target file (SML, OCaml, Scala) or<br>\ndirectory (Haskell); the default is \"export\" with a consecutive number<br>\nwithin each theory.</li>\n</ul>\n</blockquote>\n<blockquote>\n<p>More specifically, what does the new arguments<br>\n{physical: bool} and<br>\nPosition.T<br>\nactually mean? Setting them to “true” and “Position.start” respectively worked fine in my case, when exporting to Haskell.</p>\n</blockquote>\n<p>Most idiomatic is to use the \\&lt;^here&gt; antiquotation in Isabelle/ML for a<br>\nposition, if there is no position you can just pass through from<br>\ncorresponding Isar text.</p>\n<blockquote>\n<p>Also, I am somewhat wondering about to the remark in the Changelog about the “file” argument becoming legacy and being removed. This refers to the export_code command on the Isar-level, but does it affect me when working at the ML level (i.e. what I put in the argument of type Path.T above)?</p>\n</blockquote>\n<p>The possibility to generate files from the exported code<br>\nprogrammatically will always remain (cf. module »Export«).</p>\n<p>The idea behind the NEWS entry is to reduce / eliminate the need for<br>\narbitrary dumps to the physical file system over time.</p>\n<p>Cheers,<br>\n    Florian<br>\n<a href=\"/user_uploads/14278/A1yDjdXKfiKDEcHSMAaYxjxb/signature.asc\">signature.asc</a></p>",
        "id": 294762995,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661200555
    }
]