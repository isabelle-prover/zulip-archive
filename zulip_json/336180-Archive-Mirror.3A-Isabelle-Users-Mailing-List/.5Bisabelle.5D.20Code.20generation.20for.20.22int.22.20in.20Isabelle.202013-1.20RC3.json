[
    {
        "content": "<p>From: Jesus Aransay &lt;<a href=\"mailto:jesus-maria.aransay@unirioja.es\">jesus-maria.aransay@unirioja.es</a>&gt;<br>\nDear Andreas,</p>\n<p>thanks for the hints, they allowed me to solve the problem; I also got<br>\nto read in the code generation manual (version in Isabelle 2013-1 RC3)<br>\nabout he Isabelle types \"integer\" and \"natural\" in \"Code_Numeral\",<br>\nwhich are conceived to be used in the code generation setup as indexes<br>\nin target-language arrays.Thanks also to Florian for persuading me to<br>\ninstall Isabelle 2013-1 RC3 and try the new code generation setup.</p>\n<p>Thanks to this we produced a serialisation of some additional<br>\nfunctions (not included in \"IArray.thy\") over \"iarray\" to SML \"Vector\"<br>\nfunctions (see the attached file \"IArray_Addenda.thy\"), and also a<br>\nserialisation in Haskell of Isabelle \"iarray\" to  the class<br>\n\"Data.Array.IArray.Array\"<br>\n(<a href=\"http://cvs.haskell.org/Hugs/pages/libraries/base/Data-Array-IArray.html\">http://cvs.haskell.org/Hugs/pages/libraries/base/Data-Array-IArray.html</a>)<br>\n(see the attached file \"IArray_Haskell_RC3.thy\"). Maybe somebody could<br>\nfind them useful.</p>\n<p>Feel free to comment on them or suggest any improvements,</p>\n<p>best wishes,</p>\n<p>Jesus<br>\n<a href=\"/user_uploads/14278/g_kUsIpf5M394vV7f5bM632g/IArray_Addenda.thy\">IArray_Addenda.thy</a><br>\n<a href=\"/user_uploads/14278/-lZPjV6W9TFXurYbOLBDVCEg/IArray_Haskell_RC3.thy\">IArray_Haskell_RC3.thy</a></p>",
        "id": 294257990,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660913294
    },
    {
        "content": "<p>From: Andreas Lochbihler &lt;<a href=\"mailto:andreas.lochbihler@inf.ethz.ch\">andreas.lochbihler@inf.ethz.ch</a>&gt;<br>\nDear Jesus,</p>\n<p>In the upcoming release, target language numerals like <a href=\"http://IntInf.int\">IntInf.int</a> are properly <br>\nencapsulated in their own types integer and natural. Formerly, the adaptation theories <br>\nmade the SML code generator to implement the types nat and int directly as <a href=\"http://IntInf.int\">IntInf.int</a>, now <br>\nCode_Target_Numeral implements both as type copies of <a href=\"http://IntInf.int\">IntInf.int</a> to enforce the <br>\nseparation. Consequently, you cannot exploit the former clash of types any more. You have <br>\nto define an function that operates directly on integer rather than nat. For example:</p>\n<p>definition findi_integer ::<br>\n   \"(integer * 'a =&gt; bool) =&gt; 'a iarray =&gt; (integer * 'a) option\"<br>\nwhere<br>\n   \"findi_integer f arr =<br>\n<a href=\"http://Option.map\">Option.map</a> (apfst integer_of_nat) (findi (f o apfst integer_of_nat) arr)\"</p>\n<p>code_printing<br>\n     constant findi_integer =&gt; (SML) \"Vector.findi\"</p>\n<p>Of course, you also have to use findi_integer instead of findi in your code equations or <br>\nprove a corresponding code equation for findi.</p>\n<p>Hope this helps,<br>\nAndreas</p>",
        "id": 294259060,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660913667
    }
]