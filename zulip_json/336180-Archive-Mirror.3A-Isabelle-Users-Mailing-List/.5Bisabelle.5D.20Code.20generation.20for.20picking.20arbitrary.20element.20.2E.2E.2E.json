[
    {
        "content": "<p>From: Peter Lammich &lt;<a href=\"mailto:peter.lammich@uni-muenster.de\">peter.lammich@uni-muenster.de</a>&gt;<br>\nHi all,</p>\n<p>I want to use the isabelle 2005 code generator to get code for a<br>\nfunction that picks an arbitrary element with some property P from a<br>\nfinite set S, i.e. something like:</p>\n<p>pick :: \"('a =&gt; bool) =&gt; 'a set =&gt; 'a option\"<br>\nwith<br>\n(pick P S = Some e) ==&gt; (e \\in S \\and P e) and<br>\n(\\exists e\\in S. P e) ==&gt; pick P S \\noteq None</p>\n<p>I have tried the following:<br>\n  Using ExecutableSet.thy to get representation of sets as lists<br>\n  Using a definition of pick involving SOME, i.e. pick P S == if \\exists<br>\ne\\in S. P e then Some (SOME e. e\\in S \\and P e) else None.<br>\n    This does not work, I get an error from the code generator that it<br>\ncannot generate code for SOME.</p>\n<p>Using fold to define pick. This also does not work, I get an error<br>\nfrom the code generator that it cannot handle THE (used in the<br>\ndefinition of fold)</p>\n<p>What is the best way to implement such a function ?</p>\n<p>Thanks in advance for any hints<br>\n  Peter Lammich</p>",
        "id": 294048752,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660818441
    },
    {
        "content": "<p>From: Stefan Berghofer &lt;<a href=\"mailto:berghofe@in.tum.de\">berghofe@in.tum.de</a>&gt;<br>\nPeter Lammich wrote:<br>\nHi Peter,</p>\n<p>if everything else fails, you can always provide an ad-hoc ML implementation<br>\nof your function, e.g.</p>\n<p>consts_code<br>\n   \"pick\"   (\"\\&lt;module&gt;pick\")<br>\nattach {*<br>\nfun pick P [] = error \"pick\"<br>\n   | pick P (x :: xs) = if P x then x else pick P xs;<br>\n*}</p>\n<p>A similar trick is used in HOL/MicroJava/BV/BVExample.thy for implementing<br>\nthe function some_elem, which selects an arbitrary element from a set.</p>\n<p>Greetings,<br>\nStefan</p>",
        "id": 294048766,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660818447
    },
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\nI strongly suspect it cannot be done in the logic. Go for Stefan's solution.</p>\n<p>Tobias</p>\n<p>Peter Lammich schrieb:</p>",
        "id": 294048775,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660818453
    }
]