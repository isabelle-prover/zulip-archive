[
    {
        "content": "<p>From: Dmitriy Traytel &lt;<a href=\"mailto:traytel@in.tum.de\">traytel@in.tum.de</a>&gt;<br>\nHi all,</p>\n<p>I've stumbled across a problem with the dictionary trick for sorts. I'm <br>\ngenerating code from locales following the guidelines in \"Code <br>\ngeneration from Isabelle/HOL theories\" (the Haftmann trick, as Lukas <br>\ncalls it).</p>\n<p>Attached is a reduced example where the resulting code contains <br>\nnon-linear patterns (for the sort arguments) in the generated <br>\nML-functions (same for Isabelle2012 and e.g. ac2e29fc57a5).</p>\n<p>Am I doing something wrong?</p>\n<p>Best wishes,<br>\nDmitriy<br>\n<a href=\"/user_uploads/14278/zZ2K8--YtgGSuhvUpPmp5k6b/Code.thy\">Code.thy</a></p>",
        "id": 294222442,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660898205
    },
    {
        "content": "<p>From: Florian Haftmann &lt;<a href=\"mailto:florian.haftmann@informatik.tu-muenchen.de\">florian.haftmann@informatik.tu-muenchen.de</a>&gt;<br>\nHi Dmitriy,</p>\n<blockquote>\n<p>theory Code<br>\nimports Main<br>\nbegin</p>\n<p>locale A =<br>\nfixes b :: 'b<br>\nand ba :: \"'b \\&lt;Rightarrow&gt; 'a :: linorder\"<br>\nand baa :: \"'b \\&lt;Rightarrow&gt; 'a \\&lt;Rightarrow&gt; 'a :: linorder\"<br>\nassumes \"baa b a = a\"<br>\nbegin</p>\n<p>definition code :: \"'a \\&lt;Rightarrow&gt; 'a\" where<br>\n  \"code a = baa b a\"</p>\n<p>end</p>\n<p>definition my_code where [code del]: \"my_code \\&lt;equiv&gt; \\&lt;lambda&gt;a. A.code a (\\&lt;lambda&gt;_. id)\"</p>\n<p>interpretation A as id \"\\&lt;lambda&gt;_. id\" where \"A.code as (\\&lt;lambda&gt;_. id) = my_code as\" sorry</p>\n<p>export_code my_code in SML</p>\n<p>end</p>\n</blockquote>\n<p>your experience boils down to the following</p>\n<blockquote>\n<p>definition foo :: \"'a ⇒ 'b ⇒ 'b\"<br>\n  where \"foo x = id\"</p>\n<p>lemma [code]:<br>\n  \"foo (x :: 'a) = (id :: 'a ⇒ 'a)\"<br>\n  by (simp add: foo_def)</p>\n<p>export_code foo in Haskell</p>\n</blockquote>\n<p>i.e. currently the code generator accepts code equations which violate<br>\nthe precondition that the type scheme of the constant in the theorem<br>\n(here, 'a =&gt; 'a =&gt; 'a) must match to the type scheme of the constant in<br>\nthe theory (here, 'a =&gt; 'b =&gt; 'b).  I will have to investigate this and<br>\nto repair the corresponding check.</p>\n<p>Note that in order for your example to work, you must generalize your<br>\ninterpretation to let A.my_code have a suitable type scheme for my_code.</p>\n<p>Thanks a lot,<br>\n    Florian<br>\n<a href=\"/user_uploads/14278/JlziN95xm85ZFhFTUiQsFLd6/signature.asc\">signature.asc</a></p>",
        "id": 294222496,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660898247
    },
    {
        "content": "<p>From: Dmitriy Traytel &lt;<a href=\"mailto:traytel@in.tum.de\">traytel@in.tum.de</a>&gt;<br>\nHi Florian,</p>\n<p>On 16.09.2012 17:34, Florian Haftmann wrote:</p>\n<blockquote>\n<p>your experience boils down to the following</p>\n<blockquote>\n<p>definition foo :: \"'a ⇒ 'b ⇒ 'b\"<br>\n   where \"foo x = id\"</p>\n<p>lemma [code]:<br>\n   \"foo (x :: 'a) = (id :: 'a ⇒ 'a)\"<br>\n   by (simp add: foo_def)</p>\n<p>export_code foo in Haskell<br>\ni.e. currently the code generator accepts code equations which violate<br>\nthe precondition that the type scheme of the constant in the theorem<br>\n(here, 'a =&gt; 'a =&gt; 'a) must match to the type scheme of the constant in<br>\nthe theory (here, 'a =&gt; 'b =&gt; 'b).  I will have to investigate this and<br>\nto repair the corresponding check.<br>\nI see. At least one out of three keywords in the title of my email was <br>\nappropriate :-)<br>\nNote that in order for your example to work, you must generalize your<br>\ninterpretation to let A.my_code have a suitable type scheme for my_code.<br>\nI have restricted the type of my_code instead and it works.</p>\n</blockquote>\n</blockquote>\n<p>Thanks!</p>\n<p>Dmitriy</p>",
        "id": 294222503,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660898254
    },
    {
        "content": "<p>From: Florian Haftmann &lt;<a href=\"mailto:florian.haftmann@informatik.tu-muenchen.de\">florian.haftmann@informatik.tu-muenchen.de</a>&gt;<br>\nSee now <a href=\"http://isabelle.in.tum.de/reports/Isabelle/rev/791e6fc53f73\">http://isabelle.in.tum.de/reports/Isabelle/rev/791e6fc53f73</a></p>\n<p>Florian<br>\n<a href=\"/user_uploads/14278/7sQJCbKYEfFDK-AFlM4y2sK0/signature.asc\">signature.asc</a></p>",
        "id": 294222859,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660898444
    }
]