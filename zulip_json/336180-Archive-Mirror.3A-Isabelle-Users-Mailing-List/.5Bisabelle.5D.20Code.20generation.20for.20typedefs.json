[
    {
        "content": "<p>From: Peter Lammich &lt;<a href=\"mailto:peter.lammich@uni-muenster.de\">peter.lammich@uni-muenster.de</a>&gt;<br>\nHi all</p>\n<p>I have the following situation, analogously to RBT.thy:</p>\n<p>datatype 'a MyStruc  = ...<br>\ninvar :: 'a MyStruc =&gt; bool<br>\noperation :: 'a MyStruc =&gt; (MyStruc * 'a * MyStruc)<br>\n...<br>\ntypedef (open) 'a My = \"{ m::'a MyStruc . invar m}\"<br>\nlemma [simp, code abstype]: \"Abs_My (Rep_My t) = t\"</p>\n<p>definition operation' :: 'a My =&gt; ('a My * 'a * 'a My)<br>\nwhere \"operation' t == (%(a,b,c). (Abs_My a,b,Abs_my c)) operation <br>\n(Rep_My t)\"<br>\nlemma [code abstract]: \"???????\"<br>\n*** How to formulate this lemma?<br>\nWill<br>\n    \"(%(a,b,c). (Rep_My a,b,Rep_my c)) (operation' t) == operation <br>\n(Rep_My t)\"<br>\nwork?</p>\n<p>My problem is, that I do not want to split \"operation\" into many <br>\nfunctions for efficiency reasons,<br>\nas all results of the tuple are computed simultaneously.</p>\n<p>Best,<br>\n  Peter</p>",
        "id": 294115708,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660838232
    },
    {
        "content": "<p>From: Florian Haftmann &lt;<a href=\"mailto:florian.haftmann@informatik.tu-muenchen.de\">florian.haftmann@informatik.tu-muenchen.de</a>&gt;<br>\nHi Peter,</p>\n<p>we have indeed no direct solution for this; as a workaround, it should<br>\nbe possible to define a separate type for the result (with concrete<br>\ninstead of abstract types) and declare it as abstype, together with<br>\nsuitable projections to decompose this result later;  for the abstract<br>\ncomponents, these projections return abstract types instead of concrete<br>\nones.  An example on pairs of abstract values:</p>\n<p>A :: r =&gt; a<br>\nR :: a =&gt; r with !x. P (R x)</p>\n<p>Define abstype a2 with<br>\nA2 :: r * r =&gt; a2<br>\nR2 :: a2 =&gt; r * r with !x. P (fst (R2 x)) &amp;&amp; P (snd (R2 x))</p>\n<p>Computation f yields result of type a2 such that<br>\nR2 (f ...) = ...</p>\n<p>Define projection R' :: a2 =&gt; r * r such that<br>\nR (R' x) = R2 x</p>\n<p>This is as least a sketch how I thought it could work, but I have never<br>\nexercised this in practice before.</p>\n<p>Hope this helps,<br>\n    Florian<br>\n<a href=\"/user_uploads/14278/gzCpsj1Ky_LylA0ByGMCKg_h/signature.asc\">signature.asc</a></p>",
        "id": 294115755,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660838252
    }
]