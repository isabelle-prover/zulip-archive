[
    {
        "content": "<p>From: Florian Haftmann &lt;<a href=\"mailto:florian.haftmann@informatik.tu-muenchen.de\">florian.haftmann@informatik.tu-muenchen.de</a>&gt;<br>\nHi Jesus,</p>\n<p>there is no support for nested abstract datatypes.  To achieve abstract<br>\nmatrices, you would need to provide an explicit type for matrices (e.g.<br>\nusing datatype ('a, 'm, 'n) matrix = Matrix \"'a ^ 'm ^ 'n\" (*)) and then<br>\nlift all operations you want to that explicit matrix type.  When doing<br>\nthis, the recently emerged lifting and transfer infrastructure could be<br>\nhelpful – unfortunately, I have no canonical reference for this at hand<br>\nand have not used it myself, but others on this mailing list will know<br>\nbetter.</p>\n<p>I hope these meagure hints show the way.  Feel free to ask again if you<br>\nare still lost.</p>\n<p>Cheers,<br>\n    Florian</p>\n<p>(*) I am not familiar with the vectors/matrix stuff, so this might be wrong.<br>\n<a href=\"/user_uploads/14278/vAx8c5V322DXvbHFs0CV3wf5/signature.asc\">signature.asc</a></p>",
        "id": 294228404,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660901161
    },
    {
        "content": "<p>From: René Thiemann &lt;<a href=\"mailto:rene.thiemann@uibk.ac.at\">rene.thiemann@uibk.ac.at</a>&gt;<br>\nDear Jesus,</p>\n<p>there is also the possibility to use the matrices from the AFP which are fully<br>\nexecutable, but where all lemmas are guarded by their dimension, as in </p>\n<p>\"mat n m m1 ==&gt; mat n m m2 ==&gt; mat_plus m1 m2 = mat_plus m2 m1\"</p>\n<p>Cheers,<br>\nRené</p>",
        "id": 294228452,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660901167
    },
    {
        "content": "<p>From: <a href=\"mailto:andreas.lochbihler@kit.edu\">andreas.lochbihler@kit.edu</a><br>\nHi Jesus and Florian,</p>\n<p>The code generator does support nested abstract datatypes in this case, <br>\nalthough only indirectly. As the abstraction function vec_lambda must <br>\nnot appear in any code equation, you have to promote any such subterm <br>\nto a proper constant and prove the corresponding code equation. The <br>\nfollowing works:</p>\n<p>definition mat_mult_row where<br>\n  \"mat_mult_row m m' f = vec_lambda   (%c. setsum (%k. ((m$f)$k) * <br>\n((m'$k)$c)) (UNIV :: 'n::finite set))\"</p>\n<p>lemma mat_mult_row_code [code abstract]:<br>\n  \"vec_nth (mat_mult_row m m' f) =   (%c. setsum (%k. ((m$f)$k) * <br>\n((m'$k)$c)) (UNIV :: 'n::finite set))\"<br>\nby(simp add: mat_mult_row_def fun_eq_iff)</p>\n<p>lemma mat_mult [code abstract]: \"vec_nth (m ** m') = mat_mult_row m m'\"<br>\n  unfolding matrix_matrix_mult_def mat_mult_row_def[abs_def]<br>\n  using vec_lambda_beta by auto</p>\n<p>export_code \"op **\" in SML file -</p>\n<p>So there is no need to wrap all types and do the lifting.</p>\n<p>Hope this helps,<br>\nAndreas</p>\n<p>Zitat von Florian Haftmann &lt;<a href=\"mailto:florian.haftmann@informatik.tu-muenchen.de\">florian.haftmann@informatik.tu-muenchen.de</a>&gt;:</p>",
        "id": 294230253,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660902118
    },
    {
        "content": "<p>From: Jesus Aransay &lt;<a href=\"mailto:jesus-maria.aransay@unirioja.es\">jesus-maria.aransay@unirioja.es</a>&gt;<br>\nHi Andreas,</p>\n<p>thanks for your help, your proposed solution was really helpful, it<br>\nworked perfectly. Let's<br>\nsee if we can successfully apply it to some other operations on matrices!</p>\n<p>Thanks again,</p>\n<p>Jesus</p>",
        "id": 294231552,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660902733
    },
    {
        "content": "<p>From: Jesus Aransay &lt;<a href=\"mailto:jesus-maria.aransay@unirioja.es\">jesus-maria.aransay@unirioja.es</a>&gt;<br>\nDear all,</p>\n<p>Happy New Year for everyone.</p>\n<p>Thanks for your hints, Florian and René. We had been exploring the<br>\napproach that Florian suggests, by means of a dedicated \"('a, 'm, 'n)<br>\nmatrix\" datatype, but asked to be sure that there was no direct way to<br>\nachieve code generation from nested datatypes. If we have any further<br>\nquestions on that we will let you know.</p>\n<p>We were also aware of the AFP matrices implementation by René and<br>\nChristian, we already have used then succesfully in some other<br>\nexperiment.</p>\n<p>I am just speculating, but, would it be possible to set up the code<br>\ngenerator to generate, from a given \"('a, 'n) vec\" type, lists over<br>\n\"'a\" (of length \"\"card 'n\")? Then, hopefully, matrices would be<br>\n\"directly\" generated to \"lists of lists over 'a\".</p>\n<p>The question remains open how a given function representing a vector<br>\nshould be generated to a list, but, once again, I was just<br>\nspeculating.</p>\n<p>Thanks for your ideas and your interest,</p>\n<p>Jesus</p>",
        "id": 294231632,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660902781
    }
]