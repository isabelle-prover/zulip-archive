[
    {
        "content": "<p>From: Lars Hupel &lt;<a href=\"mailto:hupel@in.tum.de\">hupel@in.tum.de</a>&gt;<br>\nDear list,</p>\n<p>sparked by a question from Tobias, I would like to draw attention to the<br>\ncurrent (technical) state of code generation as used in numerous AFP<br>\nentries.</p>\n<p>For now, let's only talk about self-contained code, i.e. no external<br>\ndependencies required. Code that can be compiled with just \"export_code<br>\n... checking ...\".</p>\n<p>All Jenkins boxes have a uniform setup with GHC, ocamlc, scalac, and<br>\nPoly/ML present. (Pinning the versions of GHC and ocamlc to make them<br>\nindependent of the platform version is a different story, too.)</p>\n<p>Hence, it is no problem to use both \"checking\" and \"in\". People use<br>\nboth, and most (all?) generated artifacts are listed in<br>\n\"$AFP_BASE/.hgignore\":</p>\n<p>thys/Tree-Automata/code/haskell/generated/Nat.hs<br>\nthys/Tree-Automata/code/haskell/generated/Ta.hs<br>\nthys/Tree-Automata/code/ml/generated/Ta.ML<br>\nthys/Tree-Automata/code/ocaml/generated/Ta.ml<br>\n...</p>\n<p>However, using \"export_code ... in ... file ...\" does not mean that the<br>\ngenerated code is being compiled. For that, one needs to use \"checking\".<br>\nBut \"checking\" does not generate files, so when one wants to provide a<br>\nsession that allows both</p>\n<p>a) downstream users to use \"isabelle build\" to produce artifacts<br>\nb) testing (compiling) generated artifacts to avoid regressions</p>\n<p>one has to use both commands.</p>\n<p>It is additionally complicated by the fact that the AFP submission<br>\nsystem, for security reasons, forbids writing files into \"$AFP_BASE\".<br>\nSubmitting a session that either uses \"export_code ... in ... file ...\"<br>\ndirectly or indirectly (via a different session) will lead to build failure.</p>\n<p>Maybe we should move towards allowing both use cases in a single<br>\ncommand; coupled with a system option that's on by default determining<br>\nwhether actual files are written. One could then envision running</p>\n<p>isabelle build -o codegen_artifacts=false ...</p>\n<p>in the submission system, whereas nothing else changes for users.</p>\n<p>Opinions?</p>\n<p>Cheers<br>\nLars</p>",
        "id": 294731203,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661188112
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nIn principle, writing files into the source file-system space is<br>\nconsidered a legacy feature since &gt; 10 years, but I guess that I am now<br>\nthe only one who still remembers this.</p>\n<p>So just the usual questions:</p>\n<p>* Why is there a need to write files into the source directory in the<br>\nfirst place? (Apart from old habits inherited from the 1970s or 1980s.)</p>\n<p>* Which fine-tuning of Isabelle functionality is required to get rid<br>\nof it?</p>\n<p>It is important to note that the PIDE document model does not support<br>\nthe concept of files generated during execution. So it would be better<br>\nto get rid of it altogether, or if there are good reasons for it to<br>\nsupport it properly. Both requires to understand the true purpose behind it.</p>\n<p>Makarius</p>",
        "id": 294731221,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661188122
    },
    {
        "content": "<p>From: Lars Hupel &lt;<a href=\"mailto:hupel@in.tum.de\">hupel@in.tum.de</a>&gt;</p>\n<blockquote>\n<p>In principle, writing files into the source file-system space is<br>\nconsidered a legacy feature since &gt; 10 years, but I guess that I am now<br>\nthe only one who still remembers this.</p>\n</blockquote>\n<p>I vaguely remember talks about handling \"code_export\" through PIDE, but<br>\nI'm not sure how far up your priorities that is.</p>\n<blockquote>\n<p>* Why is there a need to write files into the source directory in the<br>\nfirst place? (Apart from old habits inherited from the 1970s or 1980s.)</p>\n</blockquote>\n<p>Code generation. It could also happen to an entirely different<br>\ndirectory, sure.</p>\n<blockquote>\n<p>* Which fine-tuning of Isabelle functionality is required to get rid<br>\nof it?</p>\n</blockquote>\n<p>Users should be able to obtain code that they can compile. Possibly<br>\nwithout having to open an editor. Possibly by using \"isabelle build\" for<br>\nthat.</p>\n<p>I personally have no strong opinion on the workflow, but I suspect<br>\nothers might.</p>",
        "id": 294731224,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661188124
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nThis sounds like a special form of output of \"resources\" that have a<br>\n\"path\" location (relative to a theory. E.g. in Isabelle/ML it could be<br>\ndone by (write_resource path text), analogously to (writeln text).</p>\n<p>The result could be absorbed by the PIDE markup for the theory, and<br>\nretried later by command-line tools. (This assumes that we already have<br>\npersistent PIDE databases as result of \"isabelle build\", but we are<br>\nclose to that.)</p>\n<p>Further applications of the same idea:</p>\n<p>* Generated LaTeX document source: document output is always emitted,<br>\nbut not yet used with latex; the \"isabelle document\" tool does that<br>\nlater on, based on a persistent PIDE database.</p>\n<p>* Generated HTML web pages (or even a web server), based on a<br>\npersistent PIDE database -- essentially a continuation of<br>\n\"isabelle.preview\" in Isabelle/jEdit.</p>\n<p>Makarius</p>",
        "id": 294731242,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661188131
    },
    {
        "content": "<p>From: Lars Hupel &lt;<a href=\"mailto:hupel@in.tum.de\">hupel@in.tum.de</a>&gt;<br>\nAm I right in assuming that you are proposing a set of new functions for<br>\ndealing with resources, that require some additional PIDE infrastructure?</p>\n<p>This is potentially a good idea anyway, yet we still have to figure out</p>\n<p>1) where generated program text should go in the first place; in<br>\nparticular, I'd be skeptical of any scheme that would put it e.g. below<br>\n\"$ISABELLE_HOME_USER\"</p>\n<p>2) a somewhat reasonable way to control writing to the file system and<br>\nchecking the results without theory authors having to repeat themselves</p>\n<p>I think the most common use case to support here is that people want to<br>\nrun Isabelle as part of their build system (\"make\", \"cabal\", ...) to<br>\nobtain sources that are then compiled together with some additional<br>\ncode. Internalizing that entire process into Isabelle is virtually<br>\nimpossible due to the unlimited amount of build tools out there.</p>",
        "id": 294731255,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661188137
    },
    {
        "content": "<p>From: \"Achim D. Brucker\" &lt;<a href=\"mailto:brucker@spamfence.net\">brucker@spamfence.net</a>&gt;<br>\nHi,</p>\n<p>we are relying on generating source files for the test setups generated<br>\nby HOL-TestGen. Getting rid of writing generated source files in general<br>\nwould be a severe limitation. Generating files in a dedicated output <br>\ndirectory (similar to, or even the same as, the one used for the document<br>\ngeneration) should be fine. </p>\n<p>Being able to integrate the compilation of the generated source files (and <br>\nexternal dependencies) into the build system (e.g., by providing a <a href=\"http://build.sh\">build.sh</a> <br>\nin the source output directory similar to custom document generation) would <br>\nbe a big plus ;-).</p>\n<p>Cheers,</p>\n<p>Achim<br>\n<a href=\"/user_uploads/14278/ri-MrwqBkb6nIaiGPEJc6Hyv/signature.asc\">signature.asc</a></p>",
        "id": 294731277,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661188145
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nOn 27/04/18 16:26, Lars Hupel wrote:</p>\n<blockquote>\n<blockquote>\n<p>This sounds like a special form of output of \"resources\" that have a<br>\n\"path\" location (relative to a theory. E.g. in Isabelle/ML it could be<br>\ndone by (write_resource path text), analogously to (writeln text).</p>\n<p>The result could be absorbed by the PIDE markup for the theory, and<br>\nretried later by command-line tools. (This assumes that we already have<br>\npersistent PIDE databases as result of \"isabelle build\", but we are<br>\nclose to that.)</p>\n</blockquote>\n<p>Am I right in assuming that you are proposing a set of new functions for<br>\ndealing with resources, that require some additional PIDE infrastructure?</p>\n<p>This is potentially a good idea anyway, yet we still have to figure out</p>\n<p>1) where generated program text should go in the first place; in<br>\nparticular, I'd be skeptical of any scheme that would put it e.g. below<br>\n\"$ISABELLE_HOME_USER\"</p>\n</blockquote>\n<p>The output of write_resource would be stored in the PIDE markup<br>\ndatabase, what is now log/My_Session.db and still lacking PIDE information.</p>\n<p>Other tools could pick it up by Isabelle/Scala operations (still to be<br>\nprovided). One such tool could be \"isabelle resources\" to extract<br>\nmaterial from the database and copy it into a given directory. From<br>\nthere, one could continue in the old-fashioned manner of the<br>\n1970s/1980s, with tools like \"make\" and its modern derivatives.</p>\n<blockquote>\n<p>2) a somewhat reasonable way to control writing to the file system and<br>\nchecking the results without theory authors having to repeat themselves</p>\n</blockquote>\n<p>Is that what I have described above or something else?</p>\n<p>The general idea is that \"isabelle build\" or Isabelle/jEdit sessions<br>\nnever write to the file-system -- that would be stateful -- but only to<br>\nthe stateless PIDE database.</p>\n<blockquote>\n<p>I think the most common use case to support here is that people want to<br>\nrun Isabelle as part of their build system (\"make\", \"cabal\", ...) to<br>\nobtain sources that are then compiled together with some additional<br>\ncode. Internalizing that entire process into Isabelle is virtually<br>\nimpossible due to the unlimited amount of build tools out there.</p>\n</blockquote>\n<p>Most tools I've ever seen <em>can</em> be assimilated by Isabelle. People who<br>\ndon't want this, and can still stick to older traditions, e.g. like this<br>\nin a Makefile:</p>\n<p>isabelle build ...  # turn session sources into session database<br>\n  isabelle resources ...  # extract certain files into a directory<br>\n  do whatever ...</p>\n<p>Makarius</p>",
        "id": 294731292,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661188152
    },
    {
        "content": "<p>From: Lars Hupel &lt;<a href=\"mailto:hupel@in.tum.de\">hupel@in.tum.de</a>&gt;</p>\n<blockquote>\n<p>Is that what I have described above or something else?</p>\n<p>The general idea is that \"isabelle build\" or Isabelle/jEdit sessions<br>\nnever write to the file-system -- that would be stateful -- but only to<br>\nthe stateless PIDE database.</p>\n</blockquote>\n<p>Sounds like it, yes. But just to clarify: is this a short- or long-term <br>\nsolution?</p>\n<p>(There's no rush, anyway.)</p>\n<blockquote>\n<p>Most tools I've ever seen <em>can</em> be assimilated by Isabelle. People who<br>\ndon't want this, and can still stick to older traditions, e.g. like <br>\nthis<br>\nin a Makefile:</p>\n</blockquote>\n<p>That's an entirely different discussion though, centered around who'd be <br>\nwilling to put in the effort and maintain build tools packaged as <br>\nIsabelle components (or similar). But as long as there's a convenient <br>\ncommand-line tool, it's a largely orthogonal discussion.</p>",
        "id": 294731295,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661188155
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nBoth short- and long-term, in a sense. Long-term, because the basic idea<br>\nhas been in the pipeline for a long time, in some form or another.<br>\nShort-term, because it might actually happen really soon, if we are very<br>\nlucky for the coming release.</p>\n<p>Makarius</p>",
        "id": 294731313,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661188161
    },
    {
        "content": "<p>From: Florian Haftmann &lt;<a href=\"mailto:florian.haftmann@informatik.tu-muenchen.de\">florian.haftmann@informatik.tu-muenchen.de</a>&gt;<br>\nDear all,</p>\n<p>I would also appreciate a more systematic treatment of generated code in<br>\nthe context of its applications.</p>\n<p>Just a few further observations:</p>\n<ul>\n<li>The following files apparently contain generated code but a part of<br>\nthe history:<br>\nthys/LTL_to_DRA/Code/LTL_to_DRA_Translator.sml<br>\nthys/Depth-First-Search/dfs.ML<br>\nthys/Refine_Imperative_HOL/benchmarks/NestedDFS/isabelle/NDFS_Benchmark_export.sml<br>\nthys/Refine_Imperative_HOL/benchmarks/Dijkstra/isabelle/dijkstra_export.sml<br>\nthys/Refine_Imperative_HOL/benchmarks/Heapmap/isabelle/heapmap_export.sml<br>\nthys/LTL/example/rewrite_example.sml</li>\n</ul>\n<p>Having generated data in the history is always a bad idea.  The least<br>\nthing to todo is to remove this and put them into .hgrc (a second-best<br>\nthing, though).</p>\n<ul>\n<li>A cursory <code>grep -rIPn ghc *</code> on the AFP reveals a couple of ad-hoc<br>\nconstructions to build tools from generated code using GHC.</li>\n</ul>\n<p>Maybe it is time to think how such compiler invocations and their<br>\nresults and be integrated smoothly into a Isabelle session.  In that<br>\nlonger past I never attempted this due to lack of examples.</p>\n<p>Cheers,<br>\n    Florian<br>\n<a href=\"/user_uploads/14278/Q-Nr5kHpeYOZ0fDNdLxNcQMM/signature.asc\">signature.asc</a></p>",
        "id": 294731333,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661188168
    },
    {
        "content": "<p>From: Lars Hupel &lt;<a href=\"mailto:hupel@in.tum.de\">hupel@in.tum.de</a>&gt;<br>\nDo we really need to add even more moving parts to the simple act of <br>\nrunning \"isabelle build\"?</p>\n<p>It is definitely worth discussing how to deal with external <br>\ndependencies, but I believe a solution should live outside of a session <br>\nbuild.</p>\n<p>Cheers<br>\nLars</p>",
        "id": 294731412,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661188198
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nI have already started working in that direction: see<br>\nIsabelle/ac82ee617a75 with the following NEWS entries:</p>\n<p><strong>* ML </strong>*</p>\n<ul>\n<li>Operation Export.export emits theory exports (arbitrary blobs), which<br>\nare stored persistently in the session build database.</li>\n</ul>\n<p><strong>* System </strong>*</p>\n<ul>\n<li>The command-line tool retrieves theory exports from the session build<br>\ndatabase.</li>\n</ul>\n<p>There are no applications yet. It is likely that there will be further<br>\nrefinements, when it comes into practice.</p>\n<p>I am presently also thinking in the direction to export proof terms<br>\n(without storing them in ML), maybe even OpenTheory output.</p>\n<p>Makarius</p>",
        "id": 294732229,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661188499
    }
]