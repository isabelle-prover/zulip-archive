[
    {
        "content": "<p>From: Andreas Lochbihler &lt;<a href=\"mailto:andreas.lochbihler@inf.ethz.ch\">andreas.lochbihler@inf.ethz.ch</a>&gt;<br>\nDear developers of the code generator,</p>\n<p>Isabelle's code generator normally normalises the names of type variables to 'a, 'b, 'c in <br>\nthe type signature. Apparently, it does not so if the constant has been declared as <br>\ncode_abort. For OCaml, this can produce code that does not compile, because the type <br>\nvariable name uses a reserved word (tested with ocamlc version 3.12.1). Here's an example:</p>\n<p>theory Scratch imports Main begin</p>\n<p>typedecl 'in foo<br>\nconsts Foo :: \"'in foo\"<br>\ncode_datatype Foo<br>\ndefinition foo :: \"unit =&gt; 'in foo\" where [code del]: \"foo _ = Foo\"<br>\ncode_abort foo</p>\n<p>definition bar :: \"unit foo\" where \"bar = foo ()\"<br>\nexport_code bar in OCaml (* OCaml does not like type variables called 'in *)</p>\n<p>Obviously, one can fix this by changing the type signature at the definition of foo, but I <br>\nwould prefer to use consistent names for my type variables.</p>\n<p>Best,<br>\nAndreas</p>",
        "id": 294255614,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660912489
    },
    {
        "content": "<p>From: Florian Haftmann &lt;<a href=\"mailto:florian.haftmann@informatik.tu-muenchen.de\">florian.haftmann@informatik.tu-muenchen.de</a>&gt;<br>\nSee now <a href=\"http://isabelle.in.tum.de/reports/Isabelle/rev/89d5b69e5a08\">http://isabelle.in.tum.de/reports/Isabelle/rev/89d5b69e5a08</a><br>\nwhere normalizing of type variable names is done more extensively.</p>\n<p>Cheers,<br>\n    Florian<br>\n<a href=\"/user_uploads/14278/ax6HTtbXlVpFvCM2W93W0N1_/signature.asc\">signature.asc</a></p>",
        "id": 294257410,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660913066
    }
]