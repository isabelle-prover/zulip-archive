[
    {
        "content": "<p>From: Andreas Lochbihler &lt;<a href=\"mailto:andreas.lochbihler@inf.ethz.ch\">andreas.lochbihler@inf.ethz.ch</a>&gt;<br>\nDear experts of the code generator,</p>\n<p>The code serialiser for Haskell forgets to print a type constraint on literal integers in <br>\na polymorphic context that requires a type class instance. I have attached a minimal <br>\nexample. The generated Haskell code does not compiler. Rather, it produces the following <br>\nerror message.</p>\n<p>Generated_Code.hs:29:14:<br>\n     Ambiguous type variable <code>a0' in the constraints:\n       (Prelude.Num a0)\n         arising from the literal </code>42' at Generated_Code.hs:29:14-15<br>\n       (Foo a0) arising from a use of <code>bar' at Generated_Code.hs:29:10-12\n     Probable fix: add a type signature that fixes these type variable(s)\n     In the first argument of </code>bar', namely <code>42'\n     In the expression: bar 42\n     In an equation for </code>foobar': foobar = bar 42</p>\n<p>How can I tell the code generator to print the type constraint for literal integers?</p>\n<p>Andreas<br>\n<a href=\"/user_uploads/14278/MB_F5IrPBp8n-zFr_hKJIiBN/Test.thy\">Test.thy</a></p>",
        "id": 294289207,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660922883
    },
    {
        "content": "<p>From: Florian Haftmann &lt;<a href=\"mailto:florian.haftmann@informatik.tu-muenchen.de\">florian.haftmann@informatik.tu-muenchen.de</a>&gt;<br>\nHi Andreas,</p>\n<p>this seem to be an instance of the »type class variables in<br>\ncontravariant position« issue; it has been resolved in general by Lukas<br>\nBulwahn, but, alas, these annotations are not printed for custom<br>\nserializations.  I will have a look at this and refine it accordingly.</p>\n<p>Until, then, you can help yourself by an auxiliary definition:</p>\n<p>definition aux where \"aux = (42 :: integer)\"<br>\ndefinition foobar where \"foobar = bar (42 :: integer)\"<br>\nlemma [code]: \"foobar = bar aux\" by (simp add: foobar_def aux_def)</p>\n<p>This works unless you have a considerable number of literals in critical<br>\npositions (but even then workarounds are possible using auxiliary<br>\nconstants, the preprocessor and custom serialization).</p>\n<p>Hope this helps,<br>\n    Florian<br>\n<a href=\"/user_uploads/14278/JRJhs68umt-Pu0poBTPQ1SD7/signature.asc\">signature.asc</a></p>",
        "id": 294289913,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660923110
    },
    {
        "content": "<p>From: Andreas Lochbihler &lt;<a href=\"mailto:andreas.lochbihler@inf.ethz.ch\">andreas.lochbihler@inf.ethz.ch</a>&gt;<br>\nHi Florian,</p>\n<p>Thanks for looking into this and the hint about defining constants for the literals. <br>\nPlaying with this a little bit further, I found out that it suffices to define one <br>\nidentity function on integer and apply it to all problematic integer literals.</p>\n<p>Best,<br>\nAndreas</p>",
        "id": 294290015,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660923134
    }
]