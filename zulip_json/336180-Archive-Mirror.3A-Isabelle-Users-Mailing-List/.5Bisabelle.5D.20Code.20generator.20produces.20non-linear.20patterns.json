[
    {
        "content": "<p>From: Lars Hupel &lt;<a href=\"mailto:hupel@in.tum.de\">hupel@in.tum.de</a>&gt;<br>\nI've encountered some odd behaviour when generating code involving<br>\nnon-trivial use of case combinators; I'm getting ML code which contains<br>\nnon-linear pattern matches. Here's a small example to reproduce the problem:</p>\n<p>datatype_new instr = A | B</p>\n<p>type_synonym instr_table = \"instr list × instr list list\"</p>\n<p>definition interp :: \"instr_table ⇒ instr list\" where<br>\n  \"interp tab =<br>\n    (case tab of (A # is, _) ⇒ is |<br>\n                 (B # _, is # _) ⇒ is)\"</p>\n<p>export_code interp in SML module_name interp file \"code/interp.ML\"</p>\n<p>The resulting ML code looks like this:</p>\n<p>fun interp tab =<br>\n    (case tab of (A :: is, x) =&gt; is | (B :: is, is :: _) =&gt; is);</p>\n<p>... which fails to compile. This can be observed both in Isabelle2014<br>\nand in Isabelle/adaa430fc0f7. Same problem occurs when exporting to<br>\nScala, but not when specifying 'interp' as 'fun' and using its built-in<br>\npattern matching.</p>\n<p>Workaround: In the second clause, rename 'is' to something else.</p>\n<p>Cheers<br>\nLars</p>",
        "id": 294327478,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660929072
    },
    {
        "content": "<p>From: Florian Haftmann &lt;<a href=\"mailto:florian.haftmann@informatik.tu-muenchen.de\">florian.haftmann@informatik.tu-muenchen.de</a>&gt;<br>\nHi Lars,</p>\n<p>thanks for your report.  I'll have a look at it.</p>\n<p>Cheers,<br>\n    Florian<br>\n<a href=\"/user_uploads/14278/CWODevYMXwvFlO033OLzTk-F/signature.asc\">signature.asc</a></p>",
        "id": 294327861,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660929182
    }
]