[
    {
        "content": "<p>From: John Matthews &lt;<a href=\"mailto:matthews@galois.com\">matthews@galois.com</a>&gt;<br>\nHi Florian,</p>\n<p>I was demoing the code generator here at Galois, and someone wanted to  <br>\nsee what kind of Haskell code was generated for overloaded arithmetic.  <br>\nWe tried this example:</p>\n<p>theory Int_ex<br>\n   imports Main Code_Integer<br>\n   begin</p>\n<p>definition<br>\n     \"foo (x::'a::{number,plus,times}) y = x + 2 * y\"</p>\n<p>export_code foo in Haskell<br>\n     module_name Int_ex<br>\n     file \"IntCode\"</p>\n<p>It was able to generate Haskell code, but the code itself is very  <br>\nstrange:</p>\n<p>module Int_ex where {</p>\n<p>class Plus a where {<br>\n     plus :: a -&gt; a -&gt; a;<br>\n   };</p>\n<p>class Times a where {<br>\n     times :: a -&gt; a -&gt; a;<br>\n   };</p>\n<p>class Number a where {<br>\n     number_of :: Integer -&gt; a;<br>\n   };</p>\n<p>foo :: forall a. (Plus a, Times a, Number a) =&gt; a -&gt; a -&gt; a;<br>\n   foo x y =<br>\n     plus x (times (number_of (error \"Bit0\" (error \"Bit1\" (error  <br>\n\"Pls\")))) y);</p>\n<p>}</p>\n<p>Notice that in the definition of foo uses the \"error\" function and  <br>\nIsabelle's internal datatype for integers. I had hoped the Haskell  <br>\ndefinition would instead be:</p>\n<p>foo x y =<br>\n     plus x (times (number_of 2) y);</p>\n<p>Should I be including a different adaptation theory here?</p>\n<p>Thanks,<br>\n-john<br>\n<a href=\"/user_uploads/14278/plgkNEXztp6cqIZMJDwG0n74/smime.p7s\">smime.p7s</a></p>",
        "id": 294110028,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660836502
    },
    {
        "content": "<p>From: Florian Haftmann &lt;<a href=\"mailto:florian.haftmann@informatik.tu-muenchen.de\">florian.haftmann@informatik.tu-muenchen.de</a>&gt;<br>\nHi John,</p>\n<p>the number class in Isabelle/HOL is a little bit arcane;  concerning<br>\ncode generation, you may use numerals on numeric types (nat, int, rat,<br>\nreal), but not polymorphic ('a::number).  Otherwise you only get<br>\nformally and partially correct code:</p>\n<p>In typical Isabelle/HOL specifications, the number class will not show<br>\nup that often since it is only syntactic -- a classical joke is that you<br>\ncannot prove \"2 + 2 = (4::'a::number)\".  Of more relevance is the class<br>\nnumber_ring which describes structures in which the integers can be<br>\nembedded semantically (number_of = of_int).  This you can use to<br>\ncircumvent the number_of problem: instead of</p>\n<p>definition double :: \"'a::number_ring ⇒ 'a\" where<br>\n    \"double k = 2 * k\"</p>\n<p>write</p>\n<p>definition double :: \"'a::number_ring ⇒ 'a\" where<br>\n    \"double k = of_int 2 * k\"</p>\n<p>Since (number_of = of_int), you can even prove the second version from<br>\nthe first.  This could also be done by the preprocessor but would<br>\nrequire writing a simproc since the naive rewrite (number_of k = of_int<br>\n(number_of k)) does not terminate.</p>\n<p>Hope this helps,<br>\n    Florian<br>\n<a href=\"/user_uploads/14278/NT0z3-VeV5ZhiIMc3vpEr0n8/signature.asc\">signature.asc</a></p>",
        "id": 294110096,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660836527
    },
    {
        "content": "<p>From: John Matthews &lt;<a href=\"mailto:matthews@galois.com\">matthews@galois.com</a>&gt;<br>\nHi Florian,</p>\n<p>I'd like to stay with just the \"syntactic\" number, plus, etc. classes,  <br>\nsince our Haskell number instances don't necessarily satisfy the ring  <br>\naxioms. So I can generate reasonable Haskell code from this Isabelle  <br>\ndefinition:</p>\n<p>definition<br>\n     \"foo (x::'a::{number,plus,times}) y = x + number_of 2 * y\"</p>\n<p>However I don't want to have to insert \"number_of\" functions wherever  <br>\nI'm using a numeric literal. But right now I don't see any way of  <br>\ngenerating reasonable Haskell code from this more readable version of  <br>\nthe above definition:</p>\n<p>definition<br>\n     \"foo (x::'a::{number,plus,times}) y = x + 2 * y\"</p>\n<p>Is there any way to get the code generator to work well on this second  <br>\nform?</p>\n<p>Thanks,<br>\n-john<br>\n<a href=\"/user_uploads/14278/Y-fGi7lCZY2tEGWjbbgcrYob/smime.p7s\">smime.p7s</a></p>",
        "id": 294110189,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660836564
    },
    {
        "content": "<p>From: Florian Haftmann &lt;<a href=\"mailto:florian.haftmann@informatik.tu-muenchen.de\">florian.haftmann@informatik.tu-muenchen.de</a>&gt;<br>\nHi John,</p>\n<p>the inherent problem here is that the Isabelle and Haskell concept of<br>\nnumeral is quite different.  In the attached theory I have spelled out<br>\nwhat is the best possible solution I can imagine for this discrepancy<br>\nusing the preprocessor:</p>\n<p>a) For instances of number_ring, a substitution number_of k ~&gt; of_int<br>\n(number_of k) is used.</p>\n<p>b) For other polymorphic numeral expressions, the class number_num can<br>\nbe used which can be provided with custom instances; then a substitution<br>\nnumber_of k ~&gt; num_of (number_of k) can be applied.</p>\n<p>I'm not quite sure whether this solves your problem, but if yes I will<br>\ninclude this into library (or even the Code_Integer theory).</p>\n<p>Cheers,<br>\n    Florian<br>\n<a href=\"/user_uploads/14278/KyNLHW82C-6qT3SIsQoWwtfB/Number.thy\">Number.thy</a><br>\n<a href=\"/user_uploads/14278/nyGh37_MY4KZA1Tzohttjj0T/signature.asc\">signature.asc</a></p>",
        "id": 294110226,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660836583
    }
]