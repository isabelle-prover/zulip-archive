[
    {
        "content": "<p>From: René Neumann &lt;<a href=\"mailto:rene.neumann@in.tum.de\">rene.neumann@in.tum.de</a>&gt;<br>\nDear all,</p>\n<p>I needed linorder on String.literal, hence I came up with the theory as<br>\nin the attachment. It explicitly uses lexord, and only later lifts it to<br>\nop &lt;, to explicitly show what the order is and not rely on 'magic' from<br>\nthe (lin)ord(er) class.</p>\n<p>It also defines op &lt; and op &lt;= using the target language operators (save<br>\nScala, for I don't know it) for performance reasons.</p>\n<p>Would this be useful for inclusion in HOL/Library?</p>\n<p>I also noted, that there is something similiar (minus code-printing) in<br>\nAFP/Containers, but I can't tell if this is the same.</p>\n<p>Regards,<br>\nRené<br>\n<a href=\"/user_uploads/14278/T-Sudq16mKxSrMA7KWSdFa3-/Code_String.thy\">Code_String.thy</a><br>\n<a href=\"/user_uploads/14278/Qhm-o0cq2N6bEbjNqD4r6RZw/smime.p7s\">smime.p7s</a></p>",
        "id": 294255556,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660912460
    },
    {
        "content": "<p>From: Andreas Lochbihler &lt;<a href=\"mailto:andreas.lochbihler@inf.ethz.ch\">andreas.lochbihler@inf.ethz.ch</a>&gt;<br>\nHi René,</p>\n<blockquote>\n<p>I needed linorder on String.literal, hence I came up with the theory as<br>\nin the attachment. It explicitly uses lexord, and only later lifts it to<br>\nop &lt;, to explicitly show what the order is and not rely on 'magic' from<br>\nthe (lin)ord(er) class.<br>\nYour detour via lexord does not buy you anything, because your theory depends on <br>\nList_lexord and therefore imposes the lexicographic order on lists. Unfortunately, we have <br>\ntwo competing order instantiation for lists in Isabelle (lexicographic order and prefix <br>\norder). I think that it is sensible to pick lexicographic orders for String.literal, but <br>\nthis choice should restrict the choice for list (and string as the type synonym for char <br>\nlist). In the current version, your theory forces the lexicographic order on list, too.</p>\n</blockquote>\n<blockquote>\n<p>It also defines op &lt; and op &lt;= using the target language operators (save<br>\nScala, for I don't know it) for performance reasons.<br>\nFor Scala and the symbolic evaluation mechanisms (simp, nbe), your detour via lexord cause <br>\nnon-termination or no code at all. Therefore, you should definitely have appropriate code <br>\nequations for these cases.</p>\n</blockquote>\n<blockquote>\n<p>Would this be useful for inclusion in HOL/Library?<br>\nIn general yes, but I suggest that the above issues are addressed first.</p>\n</blockquote>\n<blockquote>\n<p>I also noted, that there is something similiar (minus code-printing) in<br>\nAFP/Containers, but I can't tell if this is the same.<br>\nYes, AFP/Containers/Lexicographic_Order is basically the same (if you ignore the stuff on <br>\nlist fusion). It differs from your theory in the following:</p>\n</blockquote>\n<ol>\n<li>\n<p>It avoids the dependency on List_lexord and therefore does not constrain the order for <br>\nlist.</p>\n</li>\n<li>\n<p>It has code equations that work for all target languages and symbolic evaluation.</p>\n</li>\n<li>There are no code_printing translations.</li>\n</ol>\n<p>Hence, it might be sensible to combine your code_printing translations with my definitions <br>\nand add this to HOL/Library. I don't know whether it is sensible to have a separate <br>\ntheory, I suggest that all this could go into Code_Char (just like implode is also already <br>\npart of Code_Char).</p>\n<p>Any opinions?</p>\n<p>Andreas</p>",
        "id": 294255597,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660912477
    },
    {
        "content": "<p>From: René Neumann &lt;<a href=\"mailto:rene.neumann@in.tum.de\">rene.neumann@in.tum.de</a>&gt;<br>\nAdding code_printing to your theory seems like the best solution for me.<br>\nBecause in trying to fix your (very plausible) remarks, I would need to<br>\nre-develop (or copy) parts of your theory, which seems useless to me.</p>\n<p>Btw: Using \"&lt;\" and \"&lt;=\" in Scala directly is working too <em>just checked</em>.</p>\n<ul>\n<li>René<br>\n<a href=\"/user_uploads/14278/ToihDpU86AsU_qa0R1WF7bql/smime.p7s\">smime.p7s</a></li>\n</ul>",
        "id": 294255608,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660912484
    },
    {
        "content": "<p>From: Andreas Lochbihler &lt;<a href=\"mailto:andreas.lochbihler@inf.ethz.ch\">andreas.lochbihler@inf.ethz.ch</a>&gt;<br>\nHi René,</p>\n<p>I have moved the lexicographic orders from Containers in the AFP to the distribution <br>\n(changesets 5836854ca0a8, 8c0a27b9c1bd, a2eeeb335a48) and added your code_printing <br>\ndeclarations in 368c70ee1f46.</p>\n<p>Andreas</p>",
        "id": 294257200,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660912992
    }
]