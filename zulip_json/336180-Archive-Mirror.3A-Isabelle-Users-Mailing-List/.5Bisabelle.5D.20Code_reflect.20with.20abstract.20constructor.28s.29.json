[
    {
        "content": "<p>From: Wenda Li &lt;<a href=\"mailto:wl302@cam.ac.uk\">wl302@cam.ac.uk</a>&gt;<br>\nDear code generation experts,</p>\n<p>When porting some of my code from Isabelle2016 to Isabelle2016-1 (as well as the latest repository version:5be0b0604d71), I found that the following piece of code was no longer working:</p>\n<p>code_reflect Foo<br>\n  datatypes rat=“_\"</p>\n<p>And the error message said “Cannot export abstract constructor(s): Frct”. </p>\n<p>I understand the idea of abstract constructors that are usually not allowed on the right-hand side of a code equation. Nevertheless, I am a little baffled here and was wondering what is the standard way to circumvent the situation?</p>\n<p>Best,<br>\nWenda</p>",
        "id": 294715368,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661183597
    },
    {
        "content": "<p>From: Florian Haftmann &lt;<a href=\"mailto:florian.haftmann@informatik.tu-muenchen.de\">florian.haftmann@informatik.tu-muenchen.de</a>&gt;<br>\nHi Wenda,</p>\n<p>try something like</p>\n<p>code_reflect Foo<br>\n      datatypes rat<br>\n      functions …</p>\n<p>where … stands for the operations you actually want to refer to in later<br>\nIsabelle/ML sections.</p>\n<p>In the upcoming Isabelle release, a new concept called »Computations«<br>\nhas been implemented.  You might want to study the corresponding<br>\nsections in the Tutorial on Code Generation; maybe this is a suitable<br>\nreplacement for your current application of code_reflect.</p>\n<p>Cheers,<br>\n    Florian<br>\n<a href=\"/user_uploads/14278/fU2p3467CKR-WAxCBCPeyFlG/signature.asc\">signature.asc</a></p>",
        "id": 294715566,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661183652
    },
    {
        "content": "<p>From: Florian Haftmann &lt;<a href=\"mailto:florian.haftmann@informatik.tu-muenchen.de\">florian.haftmann@informatik.tu-muenchen.de</a>&gt;</p>\n<blockquote>\n<p>I have a similar problem. I tried what you suggested, and the<br>\ncode_reflect itself worked fine, but when I actually tried to run the<br>\ncode with \"value\", I got a compiler error saying that \"Frct\" couldn't be<br>\nfound. (the same for \"nat\", \"poly\", etc.)</p>\n<p>Leaving out \"nat\", \"poly\" etc. completely doesn't work either, because<br>\nthen I get errors like \"Foo.nat does not unify with nat\".</p>\n</blockquote>\n<p>code_reflect always has been notoriously difficult to use.</p>\n<p>What is the context of your application?  Would computations be a<br>\nsuiteful device instead?</p>\n<p>Best,<br>\n    Florian</p>\n<blockquote>\n<p>Manuel</p>\n<p>On 21/08/17 19:41, Florian Haftmann wrote:</p>\n<blockquote>\n<p>Hi Wenda,</p>\n<blockquote>\n<p>code_reflect Foo<br>\n  datatypes rat=“_\"</p>\n<p>And the error message said “Cannot export abstract constructor(s): Frct”. </p>\n<p>I understand the idea of abstract constructors that are usually not allowed on the right-hand side of a code equation. Nevertheless, I am a little baffled here and was wondering what is the standard way to circumvent the situation?</p>\n</blockquote>\n<p>try something like</p>\n<p>code_reflect Foo<br>\n   datatypes rat<br>\n   functions …</p>\n<p>where … stands for the operations you actually want to refer to in later<br>\nIsabelle/ML sections.</p>\n<p>In the upcoming Isabelle release, a new concept called »Computations«<br>\nhas been implemented.  You might want to study the corresponding<br>\nsections in the Tutorial on Code Generation; maybe this is a suitable<br>\nreplacement for your current application of code_reflect.</p>\n<p>Cheers,<br>\n Florian<br>\n</p>\n</blockquote>\n<p><a href=\"/user_uploads/14278/doZhto-idwRVx9Nnhr5R4YDW/signature.asc\">signature.asc</a></p>\n</blockquote>",
        "id": 294719200,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661184186
    },
    {
        "content": "<p>From: Manuel Eberl &lt;<a href=\"mailto:eberlm@in.tum.de\">eberlm@in.tum.de</a>&gt;<br>\nI wanted to solve linear recurrences. Essentiall, I want to evaluate<br>\nsomething like \"solve_lhr [1,2,3,4::complex] [1,1,1::complex]\" using the<br>\n\"value\" command. This returns essentially some lists of complex numbers<br>\nand polynomials.</p>\n<p>Unfortunately, that takes about 40 seconds in Isabelle, though the<br>\nexported Haskell code takes only a few milliseconds, so I wanted to see<br>\nwhat I can do with code_reflect.</p>\n<p>Manuel</p>",
        "id": 294719358,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661184241
    },
    {
        "content": "<p>From: Wenda Li &lt;<a href=\"mailto:wl302@cam.ac.uk\">wl302@cam.ac.uk</a>&gt;<br>\nPreviously (i.e., in Isabelle2016), I was using code_reflect + Code_Runtime.static_holds_conv to efficiently evaluate ground terms inside a decision procedure. As Code_Runtime.static_holds_conv is no longer available, I am currently trying to achieve the same thing through code_reflect + computation_check. I was wondering if this is the correct direction?</p>\n<p>Wenda</p>",
        "id": 294719421,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661184251
    },
    {
        "content": "<p>From: Florian Haftmann &lt;<a href=\"mailto:florian.haftmann@informatik.tu-muenchen.de\">florian.haftmann@informatik.tu-muenchen.de</a>&gt;<br>\nHi Wenda,</p>\n<p>you should not need code_reflect any longer, which was never intended as<br>\nan »acceleration device« but had to be used for that in lack of better<br>\ntools.  »computation_check« should be sufficient, following chapter §6<br>\nof the tutorial on code generation in Isabelle2017 (currently available<br>\nas RC2).</p>\n<p>Hope this helps,<br>\n    Florian<br>\n<a href=\"/user_uploads/14278/aYLh76CglVMsWV49jfrWWWl5/signature.asc\">signature.asc</a></p>",
        "id": 294719551,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661184296
    },
    {
        "content": "<p>From: Manuel Eberl &lt;<a href=\"mailto:eberlm@in.tum.de\">eberlm@in.tum.de</a>&gt;<br>\nI have a similar problem. I tried what you suggested, and the<br>\ncode_reflect itself worked fine, but when I actually tried to run the<br>\ncode with \"value\", I got a compiler error saying that \"Frct\" couldn't be<br>\nfound. (the same for \"nat\", \"poly\", etc.)</p>\n<p>Leaving out \"nat\", \"poly\" etc. completely doesn't work either, because<br>\nthen I get errors like \"Foo.nat does not unify with nat\".</p>\n<p>Manuel</p>",
        "id": 294719570,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661184302
    }
]