[
    {
        "content": "<p>From: Manuel Eberl &lt;<a href=\"mailto:eberlm@in.tum.de\">eberlm@in.tum.de</a>&gt;<br>\nI was wondering whether there is any work on common subexpression <br>\nelimination, ideally in a generic fashion, similar to the Reification <br>\ntool by Amine Chaieb.</p>\n<p>This would, of course, be interesting in general, but parcitularly for <br>\nthe approximation decision procedure. I believe that CSE is complex <br>\nenough to make a generic mechanism for it interesting.</p>\n<p>If something like this does not exist, it might make a nice student <br>\nproject. What I am envisioning is something that<br>\n– takes a HOL term<br>\n– returns one or all subterms that occur more than once<br>\n– ideally, provides some mechanism for \"pulling out\" all occurrences of <br>\na common subexpression, e.g. by putting them in a \"let\"-like construct <br>\n(e.g. by a user-supplied theorem that says that one can \"pull out\" terms <br>\nlike this)<br>\nTo make things easier, one can possibly assume that the term does not <br>\ncontain any λ-abstractions.</p>\n<p>Cheers,</p>\n<p>Manuel</p>",
        "id": 294661765,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661170174
    },
    {
        "content": "<p>From: Ramana Kumar &lt;<a href=\"mailto:rk436@cam.ac.uk\">rk436@cam.ac.uk</a>&gt;<br>\nI don't think any user-supplied theorem theorem should be necessary. If a<br>\nterm tm[s] contains multiple occurrences of a subterm s, then (\\x. tm[x]) s<br>\n= tm is always provable. There may already be a let-like construct that is<br>\nsyntactic sugar for that lambda abstraction.</p>",
        "id": 294661924,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661170217
    },
    {
        "content": "<p>From: Manuel Eberl &lt;<a href=\"mailto:eberlm@in.tum.de\">eberlm@in.tum.de</a>&gt;<br>\nYes, you can, of course, always do that, and maybe this is also the best <br>\nway to do it.</p>\n<p>I was thinking of having a \"Let\"-like construct on the expression level <br>\nand then using that to eliminate the subexpressions. Or with <br>\napproximate, the way you would eliminate a common sub-expression would <br>\nbe to rewrite something like \"pi + pi ∈ {0..10}\" to \"∀x. x = pi ⟶ x + x <br>\n∈ {0..10}\", which causes approximate to approximate pi, store the bounds <br>\nit finds in some context under the name \"x\", and re-uses these bounds <br>\nwhenever it encounters \"x\" from then on.</p>\n<p>However, I suppose you could also achieve this by first rewriting it to <br>\n\"let x = pi in x + x ∈ {0..10}\" with the CSE tool and then rewriting <br>\nthat to \"∀x. x = pi ⟶ x + x ∈ {0..10}\" outside the CSE tool.</p>\n<p>This might be a nicer solution.</p>\n<p>Manuel</p>",
        "id": 294661971,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661170241
    },
    {
        "content": "<p>From: Andreas Lochbihler &lt;<a href=\"mailto:andreas.lochbihler@inf.ethz.ch\">andreas.lochbihler@inf.ethz.ch</a>&gt;<br>\nThe let_simp simproc in HOL.thy already does some sort of CSE in special cases. Try, e.g.,</p>\n<p>lemma \"P (let x = f y in x + x + f y)\"<br>\n     apply simp</p>\n<p>CSE can be great for specific applications (like approximation), but the current state <br>\nwith let is a mess. If you have a clear idea how to control CSE (and deal with let), I'd <br>\nbe all in favour of cleaning up let_simp.</p>\n<p>Best,<br>\nAndreas</p>",
        "id": 294663166,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661170707
    }
]