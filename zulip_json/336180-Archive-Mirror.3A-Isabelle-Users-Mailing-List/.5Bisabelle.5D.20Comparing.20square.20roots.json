[
    {
        "content": "<p>From: John Munroe &lt;<a href=\"mailto:munddr@gmail.com\">munddr@gmail.com</a>&gt;<br>\nHi all,</p>\n<p>Does anyone know how to prove</p>\n<p>lemma \"ALL (d1::real) d2 p q1 q2 k. (k &gt; 1 &amp; d1 &gt; 0 &amp; d2 &gt; 0 &amp; p &gt; 0 &amp;<br>\nq1 &gt;= q2 &amp; q2 &gt; 0 &amp; d1 &lt; d2) --&gt; k<em>sqrt(q1</em>p/d1) &gt; k<em>sqrt(q2</em>p/d2)\"</p>\n<p>?</p>\n<p>Even with the lemma:</p>\n<p>lemma \"ALL (d1::real) d2 p q1 q2. (d1 &gt; 0 &amp; d2 &gt; 0 &amp; p &gt; 0 &amp; q1 &gt;= q2<br>\n&amp; q2 &gt; 0 &amp; d1 &lt; d2) --&gt; sqrt(q1<em>p/d1) &gt; sqrt(q2</em>p/d2)\"<br>\n    by (simp add: frac_less2 real_mult_order)</p>\n<p>I can't seem to make use of it to prove the first. Sledgehammer helped<br>\nme prove the second, but it couldn't find anything for the first even<br>\nit looks like a rather straightforward extension of the second. Any<br>\nhelp will definitely be useful.</p>\n<p>Thanks<br>\nJohn</p>",
        "id": 294114055,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660837723
    },
    {
        "content": "<p>From: Lawrence Paulson &lt;<a href=\"mailto:lp15@cam.ac.uk\">lp15@cam.ac.uk</a>&gt;<br>\nHere is one possible approach:</p>\n<p>lemma \"ALL (d1::real) d2 p q1 q2 k. (k &gt; 1 &amp; d1 &gt; 0 &amp; d2 &gt; 0 &amp; p &gt; 0 &amp;<br>\nq1 &gt;= q2 &amp; q2 &gt; 0 &amp; d1 &lt; d2) --&gt; k<em>sqrt(q1</em>p/d1) &gt; k<em>sqrt(q2</em>p/d2)\"<br>\napply (auto intro!: real_mult_less_mono2)<br>\napply (metis frac_less2 real_mult_commute real_mult_le_cancel_iff2 real_mult_order) <br>\ndone</p>\n<p>The difficult part of this proof for sledgehammer is the inference from k&gt;1 to k&gt;0. Sledgehammer doesn't know anything about arithmetic and has to do everything from first principles.</p>\n<p>Larry Paulson</p>",
        "id": 294114168,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660837760
    },
    {
        "content": "<p>From: Johannes HÃ¶lzl &lt;<a href=\"mailto:hoelzl@in.tum.de\">hoelzl@in.tum.de</a>&gt;<br>\nAm Donnerstag, den 12.08.2010, 23:28 +0100 schrieb John Munroe:</p>\n<blockquote>\n<p>Hi all,</p>\n<p>Does anyone know how to prove</p>\n<p>lemma \"ALL (d1::real) d2 p q1 q2 k. (k &gt; 1 &amp; d1 &gt; 0 &amp; d2 &gt; 0 &amp; p &gt; 0 &amp;<br>\nq1 &gt;= q2 &amp; q2 &gt; 0 &amp; d1 &lt; d2) --&gt; k<em>sqrt(q1</em>p/d1) &gt; k<em>sqrt(q2</em>p/d2)\"</p>\n<p>?</p>\n</blockquote>\n<p>The goal is easy to solve directly just use C-c C-f to find the correct<br>\nlemmas:</p>\n<p>First you want to remove the k, hence we search for: \"?x * _ &lt; ?x * &lt;\"<br>\n We find some introduction rules, but also the rewrite rule <br>\n mult_less_cancel_left (which is easier to handle).</p>\n<p>The simplifier already rewrites \"sqrt ?a &lt; sqrt ?b\" by \"?a &lt; ?b\".</p>\n<p>Now we have a division on a field, here we use the simp set:<br>\n   field_simps</p>\n<p>This results into: \"q1 * d2 &lt; q2 * d1\"</p>\n<p>This isn't handled by mult_less_cancel_left, however there are nice <br>\n introduction rules for this cases, just search for<br>\n      \"_ ==&gt; _ * _ &lt; _ * _\"<br>\n and we find: mult_less_le_imp_less</p>\n<p>hence the lemma is solved by:</p>\n<p>lemma \"ALL (d1::real) d2 p q1 q2 k. (k &gt; 1 &amp; d1 &gt; 0 &amp; d2 &gt; 0 &amp; p &gt; 0 &amp;<br>\nq1 &gt;= q2 &amp; q2 &gt; 0 &amp; d1 &lt; d2) --&gt; k<em>sqrt(q1</em>p/d1) &gt; k<em>sqrt(q2</em>p/d2)\"<br>\n  by (auto simp: mult_less_cancel_left field_simps<br>\n       intro: mult_less_le_imp_less)</p>\n<p>You might add the introduction rule mult_less_le_imp_less with intro!<br>\ninstead of just intro, this has the advantage to see the goals the auto<br>\ntactic can not solve, however it might apply the wrong rule and result<br>\ninto an unprovable goal.</p>\n<p>Greetings,</p>\n<ul>\n<li>Johannes</li>\n</ul>\n<blockquote>\n<p>Even with the lemma:</p>\n<p>lemma \"ALL (d1::real) d2 p q1 q2. (d1 &gt; 0 &amp; d2 &gt; 0 &amp; p &gt; 0 &amp; q1 &gt;= q2<br>\n&amp; q2 &gt; 0 &amp; d1 &lt; d2) --&gt; sqrt(q1<em>p/d1) &gt; sqrt(q2</em>p/d2)\"<br>\n    by (simp add: frac_less2 real_mult_order)</p>\n<p>I can't seem to make use of it to prove the first. Sledgehammer helped<br>\nme prove the second, but it couldn't find anything for the first even<br>\nit looks like a rather straightforward extension of the second. Any<br>\nhelp will definitely be useful.</p>\n<p>Thanks<br>\nJohn<br>\n</p>\n</blockquote>",
        "id": 294114263,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660837791
    }
]