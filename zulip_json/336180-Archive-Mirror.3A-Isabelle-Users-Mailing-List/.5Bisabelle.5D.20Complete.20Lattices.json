[
    {
        "content": "<p>From: Viorel Preoteasa &lt;<a href=\"mailto:viorel.preoteasa@abo.fi\">viorel.preoteasa@abo.fi</a>&gt;<br>\nHello,</p>\n<p>I have noticed that there is a general theory about complete latices in <br>\nIsabelle,<br>\nhowever I was not able to use it. I have tried imports CompleteLattices<br>\nbut it did not work. I tried also imports Lattice CompleteLattices, but<br>\nit did not work either.</p>\n<p>The second question is how do use these abstract theories? I need<br>\nto instantiate them for the lattice of  predicate transformers<br>\n('a set =&gt; 'a set) with the order inherited from sets (bool).</p>\n<p>Best regards,</p>\n<p>Viorel Preoteasa</p>",
        "id": 294102836,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660834307
    },
    {
        "content": "<p>From: Florian Haftmann &lt;<a href=\"mailto:florian.haftmann@informatik.tu-muenchen.de\">florian.haftmann@informatik.tu-muenchen.de</a>&gt;<br>\nHi Viorel,</p>\n<blockquote>\n<p>I have noticed that there is a general theory about complete latices in<br>\nIsabelle,<br>\nhowever I was not able to use it. I have tried imports CompleteLattices<br>\nbut it did not work. I tried also imports Lattice CompleteLattices, but<br>\nit did not work either.</p>\n</blockquote>\n<p>the theory you are referring to is named Complete_Lattice (without<br>\ntrailing s!) and is already part of the HOL-Main image; it provides a<br>\ntype class complete_lattice with operations Inf and Sup.</p>\n<blockquote>\n<p>The second question is how do use these abstract theories? I need<br>\nto instantiate them for the lattice of  predicate transformers<br>\n('a set =&gt; 'a set) with the order inherited from sets (bool).</p>\n</blockquote>\n<p>The standard instantiations of the Complete_Lattice type class already<br>\nallow you to use it that way:</p>\n<p>term \"Sup :: ('a set ⇒ 'a set) set ⇒ 'a set ⇒ 'a set\"</p>\n<p>For applications, the type class complete_lattice should be sufficient.<br>\n   For meta-theory about complete lattices, theory<br>\nHOL/Algebra/Lattices.thy is perhaps a better entrance point.</p>\n<p>Hope this helps,<br>\n    Florian<br>\n<a href=\"/user_uploads/14278/1yxKUS_IlaifWNUpqkOr-MT5/signature.asc\">signature.asc</a></p>",
        "id": 294103305,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660834442
    },
    {
        "content": "<p>From: Florian Haftmann &lt;<a href=\"mailto:florian.haftmann@informatik.tu-muenchen.de\">florian.haftmann@informatik.tu-muenchen.de</a>&gt;<br>\nHi Viorel,</p>\n<blockquote>\n<p><a href=\"http://isabelle.in.tum.de/dist/library/HOL/Lattice/CompleteLattice.html\">http://isabelle.in.tum.de/dist/library/HOL/Lattice/CompleteLattice.html</a></p>\n</blockquote>\n<p>aha, this one should be considered more an example for type classes than<br>\na library to actually build on.</p>\n<blockquote>\n<p>The one you pointed me does not seem to have  results about fixed<br>\npoints and the Knaster-Tarski theorem.</p>\n</blockquote>\n<p>This can be found (to some extent) in HOL/Inductive.thy.</p>\n<blockquote>\n<p>I also need it instantiated<br>\nfor a special king of predicate transformers, like</p>\n<p>L = (('b =&gt; ('a set)) =&gt; ('b =&gt; ('a set)))</p>\n</blockquote>\n<p>You can provide you own \"interpretation\"s for type classes which are a<br>\nspecialized form of locales.</p>\n<blockquote>\n<p>Moreover, I need it instantiated for monotonic predicate transformers,<br>\nor at least I need to know that the fixed point of F: L -&gt; L is monotonic<br>\nwhen (F x) is monotonic for all x monotonic.</p>\n</blockquote>\n<p>You can express this either using the \"mono\" predicate or introduce your<br>\nown locale which imports complete_lattice and fixes F, together with an<br>\nassumes concerning monotonicity.</p>\n<p>Hope this helps,<br>\n    Florian<br>\n<a href=\"/user_uploads/14278/3A_vfcCHpN4-TocwkZP4fJSi/signature.asc\">signature.asc</a></p>",
        "id": 294103526,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660834510
    },
    {
        "content": "<p>From: Viorel Preoteasa &lt;<a href=\"mailto:viorel.preoteasa@abo.fi\">viorel.preoteasa@abo.fi</a>&gt;<br>\nHello Florian,</p>\n<p>Thank you for your quick answer. I am talking however about this complete<br>\nlattice theory:</p>\n<p><a href=\"http://isabelle.in.tum.de/dist/library/HOL/Lattice/CompleteLattice.html\">http://isabelle.in.tum.de/dist/library/HOL/Lattice/CompleteLattice.html</a></p>\n<p>The one you pointed me does not seem to have  results about fixed<br>\npoints and the Knaster-Tarski theorem. I also need it instantiated<br>\nfor a special king of predicate transformers, like</p>\n<p>L = (('b =&gt; ('a set)) =&gt; ('b =&gt; ('a set)))</p>\n<p>Moreover, I need it instantiated for monotonic predicate transformers,<br>\nor at least I need to know that the fixed point of F: L -&gt; L is monotonic<br>\nwhen (F x) is monotonic for all x monotonic.</p>\n<p>Best regards,</p>\n<p>Viorel</p>\n<p>Florian Haftmann wrote:</p>",
        "id": 294104211,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660834711
    }
]