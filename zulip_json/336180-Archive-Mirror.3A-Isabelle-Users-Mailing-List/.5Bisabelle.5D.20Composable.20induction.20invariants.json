[
    {
        "content": "<p>From: Joachim Breitner &lt;<a href=\"mailto:breitner@kit.edu\">breitner@kit.edu</a>&gt;<br>\nDear List,</p>\n<p>I am stumbling over a pattern here that requires me to do duplicate a<br>\nlot of proofs, and wondering if there there is a better approach.</p>\n<p>Say I have an inductive predicate defined like this:</p>\n<hr>\n<p>x ⇓ x</p>\n<p>and</p>\n<p>f1 x y ⇓ f2 x y ; f3 x y ⇓ f4 x y</p>\n<hr>\n<p>x ⇓ y</p>\n<p>and a predicate P on the x’s and y’s that for which I have proven<br>\n        P_preserved: x ⇓ y ==&gt; P x ==&gt; P y<br>\nby showing (in the context opened by the induction method)<br>\n        P x ==&gt; P (f1 x y)<br>\n        P (f2 x y) ==&gt; P (f3 x y)<br>\n        P (f3 x y) ==&gt; P y</p>\n<p>Next, I need to to prove that another predicate Q is preserved, at least<br>\nwhen P holds:<br>\n        Q_preserved: x ⇓ y ==&gt; Q x ==&gt; P x ==&gt; P y<br>\nIn this proof, to actually use the induction hypotheses, I again will<br>\nhave to show<br>\n    P x ==&gt; P (f1 x y),<br>\nwill have to invoke P_preserved with<br>\n        f1 x y ⇓ f2 x y &amp;&amp;&amp;  P (f1 x y)<br>\nand then, again, have to show<br>\n    P (f2 x y) ==&gt; P (f3 x y)<br>\nfor the second induction hypothesis.</p>\n<p>Is there a pattern that would simplify this a bit? Ideally, in the<br>\ninduction proof for Q, the method will provide me with<br>\n        P x, P (f1 x y), P(f2 x y), P (f3 x y), P (f4 x y), P y<br>\nas induction premises. And preferably something more automatic than<br>\nstating the three implications in the proof of P_preserved as separate<br>\nnamed lemmas before proving them.</p>\n<p>I know that it is not possible to derive that just from P_preserved.<br>\nMaybe the inductive command could generate a definition that captures<br>\nthe notion of a predicate that, if it holds for one judgment, it holds<br>\nfor all judgments occurring along the derivation tree, and then the<br>\ninduct method could be made to use \"hold_along_derivation_tree  P\" to<br>\ninject the necessary premises at each step.</p>\n<p>Thanks,<br>\nJoachim<br>\n<a href=\"/user_uploads/14278/6p3s__5tfH3KVZDYj7G1P6h9/signature.asc\">signature.asc</a></p>",
        "id": 294228131,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660901026
    },
    {
        "content": "<p>From: Ramana Kumar &lt;<a href=\"mailto:rk436@cam.ac.uk\">rk436@cam.ac.uk</a>&gt;<br>\n(forwarding to list because I used the wrong email address)</p>\n<p>---------- Forwarded message ----------<br>\nFrom: Ramana Kumar &lt;<a href=\"mailto:Ramana.Kumar@cl.cam.ac.uk\">Ramana.Kumar@cl.cam.ac.uk</a>&gt;<br>\nDate: Fri, Nov 16, 2012 at 5:19 PM<br>\nSubject: Re: [isabelle] Composable induction invariants<br>\nTo: Joachim Breitner &lt;<a href=\"mailto:breitner@kit.edu\">breitner@kit.edu</a>&gt;<br>\nCc: \"<a href=\"mailto:cl-isabelle-users@lists.cam.ac.uk\">cl-isabelle-users@lists.cam.ac.uk</a>\" &lt;<a href=\"mailto:cl-isabelle-users@lists.cam.ac.uk\">cl-isabelle-users@lists.cam.ac.uk</a>&gt;</p>\n<p>Sorry, I meant the strong induction would give you:</p>\n<p>f1 x y ⇓ f2 x y</p>\n<p>in addition to</p>\n<p>Q (f1 x y) ==&gt; Q (f2 x y)</p>\n<p>as hypotheses when trying to prove</p>\n<p>Q x ==&gt; Q y</p>\n<p>in the inductive case.</p>\n<p>On Fri, Nov 16, 2012 at 5:16 PM, Ramana Kumar &lt;Ramana.Kumar@cl.cam.ac.uk&gt;wrote:</p>\n<blockquote>\n<p>I presume for Q_preserved the last consequent should be Q y rather than P<br>\ny?</p>\n<p>One approach is to use what in HOL4 we call a \"strong\" induction<br>\nprinciple, which gives you x ⇓ y as an induction hypothesis when trying to<br>\nprove Q (f1 x y) etc. Then you can apply your existing P_preserved theorem<br>\nto that. Would that give you everything you need?</p>\n<p>I think you can prove the strong induction from the induction Isabelle<br>\nautomatically generates (although perhaps not just \"by induction\").</p>\n<p>On Fri, Nov 16, 2012 at 3:12 PM, Joachim Breitner &lt;breitner@kit.edu&gt;wrote:</p>\n<blockquote>\n<p>Dear List,</p>\n<p>I am stumbling over a pattern here that requires me to do duplicate a<br>\nlot of proofs, and wondering if there there is a better approach.</p>\n<p>Say I have an inductive predicate defined like this:</p>\n<hr>\n<p>x ⇓ x</p>\n<p>and</p>\n<p>f1 x y ⇓ f2 x y ; f3 x y ⇓ f4 x y</p>\n<hr>\n<p>x ⇓ y</p>\n<p>and a predicate P on the x’s and y’s that for which I have proven<br>\n        P_preserved: x ⇓ y ==&gt; P x ==&gt; P y<br>\nby showing (in the context opened by the induction method)<br>\n        P x ==&gt; P (f1 x y)<br>\n        P (f2 x y) ==&gt; P (f3 x y)<br>\n        P (f3 x y) ==&gt; P y</p>\n<p>Next, I need to to prove that another predicate Q is preserved, at least<br>\nwhen P holds:<br>\n        Q_preserved: x ⇓ y ==&gt; Q x ==&gt; P x ==&gt; P y<br>\nIn this proof, to actually use the induction hypotheses, I again will<br>\nhave to show<br>\n    P x ==&gt; P (f1 x y),<br>\nwill have to invoke P_preserved with<br>\n        f1 x y ⇓ f2 x y &amp;&amp;&amp;  P (f1 x y)<br>\nand then, again, have to show<br>\n    P (f2 x y) ==&gt; P (f3 x y)<br>\nfor the second induction hypothesis.</p>\n<p>Is there a pattern that would simplify this a bit? Ideally, in the<br>\ninduction proof for Q, the method will provide me with<br>\n        P x, P (f1 x y), P(f2 x y), P (f3 x y), P (f4 x y), P y<br>\nas induction premises. And preferably something more automatic than<br>\nstating the three implications in the proof of P_preserved as separate<br>\nnamed lemmas before proving them.</p>\n<p>I know that it is not possible to derive that just from P_preserved.<br>\nMaybe the inductive command could generate a definition that captures<br>\nthe notion of a predicate that, if it holds for one judgment, it holds<br>\nfor all judgments occurring along the derivation tree, and then the<br>\ninduct method could be made to use \"hold_along_derivation_tree  P\" to<br>\ninject the necessary premises at each step.</p>\n<p>Thanks,<br>\nJoachim</p>\n<p>--<br>\nDipl.-Math. Dipl.-Inform. Joachim Breitner<br>\nWissenschaftlicher Mitarbeiter<br>\n<a href=\"http://pp.info.uni-karlsruhe.de/~breitner\">http://pp.info.uni-karlsruhe.de/~breitner</a></p>\n</blockquote>\n</blockquote>",
        "id": 294228152,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660901039
    },
    {
        "content": "<p>From: Joachim Breitner &lt;<a href=\"mailto:breitner@kit.edu\">breitner@kit.edu</a>&gt;<br>\nDear Ramana,</p>\n<p>Isabelle’s induct method already provides me \"f1 x y ⇓ f2 x y\", and I<br>\ncan use this to prove what I need, but not without repeating the proofs<br>\nthat I have done already inside P_preserves and using P_preserves<br>\nitself.</p>\n<p>I think one approach that does not involve too much copy’n’paste (but<br>\nstill some would be this: I start with the normal inductive definition:</p>\n<p>f1 x y ⇓ f2 x y ; f3 x y ⇓ f4 x y</p>\n<hr>\n<p>x ⇓ x                x ⇓ y</p>\n<p>Then i copy’n’paste it to create a stronger version:</p>\n<p>P x      f1 x y ⇓ f2 x y ; f3 x y ⇓ f4 x y;<br>\n     P x; P y; P (f1 xy); P (f2 x y);<br>\n     P (f3 x y; P (f4, x y)<br>\n______   _________________________________<br>\nx ⇓' x                x ⇓' y</p>\n<p>An easy consequence will be:<br>\n    x ⇓' y ==&gt; P x &amp;&amp;&amp; P y</p>\n<p>Now I prove this lemma:<br>\n        x ⇓ y ==&gt; P x ==&gt; x ⇓' y<br>\nby induction over the definition of ⇓. In this proof, I will have to do<br>\nthe steps that I want to avoid doing more than once, e.g.<br>\n    P x ==&gt; P (f1 x y)<br>\n    P (f2 x y) ==&gt; P (f3 x y)<br>\n    P (f3 x y) ==&gt; P y</p>\n<p>The lemma  P_preserved is now an easy consequence of the the previous<br>\ntwo lemmas.</p>\n<p>Now to prove<br>\n        Q_preserved: x ⇓ y ==&gt; Q x ==&gt; P x ==&gt; P y<br>\nI first obtain x ⇓' y and then prove<br>\n        x ⇓' y ==&gt; Q y<br>\nby induction over ⇓'. At this point, Isabelle’s induct method will allow<br>\nme to assume all the \"P something\" statements that I need in the<br>\ninductive steps.</p>\n<p>Disclaimer: I have not implemented this yet (currently, I have just<br>\ncopied the proofs), but I guess I will before I copy them the second or<br>\nthird time.</p>\n<p>Greetings,<br>\nJoachim<br>\n<a href=\"/user_uploads/14278/ImjjzIAdE2OtKti7Qc__GeEF/signature.asc\">signature.asc</a></p>",
        "id": 294228197,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660901045
    },
    {
        "content": "<p>From: Ramana Kumar &lt;<a href=\"mailto:rk436@cam.ac.uk\">rk436@cam.ac.uk</a>&gt;<br>\nI see... no obvious tricks are coming to my mind, but that doesn't mean<br>\nthere aren't any.<br>\nYour approach to define a relation that carries the P around seems pretty<br>\ngood.<br>\nOne other approach would be to prove the three theorems you want to prove<br>\nonly once as separate lemmas independent of any induction.<br>\nI.e., prove<br>\nP x ==&gt; P (f1 x y)<br>\n(and add whatever extra hypotheses are necessary, which will always be<br>\nprovided in an induction context)<br>\nas a standalone lemma, then use it whenever you need. (And similarly for<br>\nthe other two.)</p>",
        "id": 294228206,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660901051
    },
    {
        "content": "<p>From: Joachim Breitner &lt;<a href=\"mailto:breitner@kit.edu\">breitner@kit.edu</a>&gt;<br>\nHi,</p>\n<p>right, this is the straight-forward solution, but it does involve too<br>\nmuch copy’n’paste. In my case, x and f1 x y are somewhat large and<br>\nchanging expressions, so just writing out these separate lammas (which<br>\nwould also have to include any conditions on the induction rules) is<br>\ntedious, let alone coming up with good names for them :-)</p>\n<p>Thanks for your input,<br>\nJoachim<br>\n<a href=\"/user_uploads/14278/GCvqgT7S10XsHigrNPEcxgX-/signature.asc\">signature.asc</a></p>",
        "id": 294228214,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660901057
    }
]