[
    {
        "content": "<p>From: Cristina Matache &lt;<a href=\"mailto:cristina@aestheticintegration.com\">cristina@aestheticintegration.com</a>&gt;<br>\nDear Isabelle users,</p>\n<p>I need to prove some arithmetic rewritings and I'm trying to write an<br>\nEisbach \"method\" to do this.</p>\n<p>A simple example of something I need to prove is:</p>\n<p>notepad<br>\nbegin<br>\n  fix rr :: real<br>\n  assume assm: \"¬ rr &lt; 0 ∧ ¬ rr * (3 + rr * (5 / 2)) / (3 + rr * (4 + rr))<br>\n&lt; rr * 2 / (2 + rr) ∧ ¬ rr ≤ - 1\"<br>\n  then have \"¬ rr &lt; 0 ∧ ¬ (- 1 / 2 + (1 + rr) * (- 2 + (1 + rr) * (5 / 2)))<br>\n/ ((1 + rr) * (2 + (1 + rr))) &lt; rr * 2 / (2 + rr) ∧ ¬ 1 + rr ≤ 0\"<br>\n    apply (simp add: divide_simps split: if_splits)<br>\n    apply sos+<br>\n    done<br>\nend</p>\n<p>The strategy is to eliminate division from the polynomials using \"simp\",<br>\nand then solve the resulting subgoals by \"sos\" (Sum_of_Squares).</p>\n<p>I tried combining the two proof steps above in the Eisbach method:</p>\n<p>method mt_arith = ((simp add: divide_simps split: if_splits); sos)</p>\n<p>but this method fails. I'm not sure why this doesn't behave the same as the<br>\ntwo proof steps above; I think I'm misunderstanding how \";\" works.</p>\n<p>The Isabelle reference manual says:</p>\n<p>\"Structural composition “m 1 ; m 2 ” means that method m 1 is applied with<br>\nrestriction to the first subgoal, then m 2 is applied consecutively with<br>\nrestriction to each subgoal that has newly emerged due to m 1 .\"</p>\n<p>So is it not the case that \"sos\" will be applied in turn to all three<br>\nsubgoals resulting from \"simp\"?</p>\n<p>What is the correct way to translate this proof to an Eisbach \"method\"?</p>\n<p>Thanks,<br>\nCristina Matache</p>",
        "id": 294719665,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661184345
    },
    {
        "content": "<p>From: Andreas Lochbihler &lt;<a href=\"mailto:andreas.lochbihler@inf.ethz.ch\">andreas.lochbihler@inf.ethz.ch</a>&gt;<br>\nDear Cristina,</p>\n<p>The combinator \";\" does not change the facts that are chained in (via then/using), and in <br>\nyour example, the sos method chokes on the \"assm\" that is fed into the goal, probably <br>\nbecause it still contains divisions. You can change the chaining locally with the method <br>\ntransformer \"use\", as in</p>\n<p>method mt_arith = (simp add: divide_simps split: if_splits; use nothing in sos)</p>\n<p>Hope this helps,<br>\nAndreas</p>",
        "id": 294719692,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661184357
    },
    {
        "content": "<p>From: Cristina Matache &lt;<a href=\"mailto:cristina@aestheticintegration.com\">cristina@aestheticintegration.com</a>&gt;<br>\nDear Andreas,</p>\n<p>Thank you for the suggestion. This works perfectly.</p>\n<p>Best wishes,<br>\nCristina</p>",
        "id": 294719748,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661184364
    }
]