[
    {
        "content": "<p>From: José Manuel Rodriguez Caballero &lt;<a href=\"mailto:josephcmac@gmail.com\">josephcmac@gmail.com</a>&gt;<br>\nHello,<br>\nGiven a function f::’a=&gt;’b, I would like to express that f is computable, i.e., there exists an algorithm which computes f. Is there any reference to something like computable::(‘a=&gt;’b)=&gt;bool in Isabelle/HOL?</p>\n<p>Kind Regards,<br>\nJosé M.</p>",
        "id": 294762432,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661200275
    },
    {
        "content": "<p>From: Alexander Krauss &lt;<a href=\"mailto:krauss@in.tum.de\">krauss@in.tum.de</a>&gt;<br>\nDear José,</p>\n<blockquote>\n<p>Given a function f::’a=&gt;’b, I would like to express that f is computable, i.e., there exists an algorithm which computes f. Is there any reference to something like computable::(‘a=&gt;’b)=&gt;bool in Isabelle/HOL?</p>\n</blockquote>\n<p>AFAIK, there is no well-established standard definition. However, there<br>\nis some material in the AFP that treats the concept of computablility,<br>\ne.g. the entry \"Universal_Turing_Machine\", which defines a notion of<br>\ncomputability.</p>\n<p>In general, for concrete data types 'a, and 'b, one can define a model<br>\nof computation such as recursive functions or turing machines and obtain<br>\na notion of computability. However, this is not immediately clear for<br>\narbitrary polymorphic 'a and 'b, since one at least has to say how to<br>\nmap these types into whatever the model of computation uses as its<br>\ninput/output language. This mapping may not exist for arbitrary types<br>\nsuch as function types. So a general notion of computability must be<br>\nbased on some notion of a type being finitely encodable (e.g., via some<br>\ntype class).</p>\n<p>Here, Isabelle/HOL differs notably from constructive type theories,<br>\nwhere \"function = executable function = program\" unless you go into \"Prop\".</p>\n<p>Alex</p>",
        "id": 294762439,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661200278
    },
    {
        "content": "<p>From: Lawrence Paulson &lt;<a href=\"mailto:lp15@cam.ac.uk\">lp15@cam.ac.uk</a>&gt;<br>\nPlease allow me to advertise the AFP entry HereditarilyFinite (defining hf, the type of hereditarily finite sets). Therein is defined the type class finitary, consisting of all types that can be injected into hf. And hf can be put into bijection with the set of natural numbers. So given the notion of computability for the natural numbers, you can quickly obtain computability for all those other types.</p>\n<p>Larry</p>",
        "id": 294762448,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661200284
    },
    {
        "content": "<p>From: José Manuel Rodriguez Caballero &lt;<a href=\"mailto:josephcmac@gmail.com\">josephcmac@gmail.com</a>&gt;<br>\nThank you for the suggestions.</p>\n<p>Kind Regards,<br>\nJosé M.</p>\n<p>Sent from my iPhone</p>",
        "id": 294762460,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661200290
    }
]