[
    {
        "content": "<p>From: Manuel Eberl &lt;<a href=\"mailto:eberlm@in.tum.de\">eberlm@in.tum.de</a>&gt;<br>\nHallo,</p>\n<p>I wonder if, by any chance, any of you know anything about work having<br>\nbeen done in Isabelle concerning the efficient computation of the set of<br>\ndivisors of a natural number or an integer. Specifically, I require an<br>\nexecutable and ideally quite efficient function \"divisors (n::int) = {d.<br>\nd dvd n}\", but obviously, the same for natural numbers would be quite<br>\nsufficient as well.</p>\n<p>I surveyed the Isabelle library but failed to find anything of the sort.<br>\nI also thought about resorting to constructing the set of divisors from<br>\na prime factorisation should I fail to find any formalisation of the set<br>\nof divisors. Has a fast, executable prime factorisation function been<br>\nimplemented in Isabelle? So far, all I could find is the uniqueness of<br>\nthe prime factorisation.</p>\n<p>I should probably add that I am, of course, perfectly aware that there<br>\nis no known algorithm for integer factorisation in polynomial time,<br>\nwhich, if I am not mistaken, implies that there is also no known<br>\nalgorithm for computing the divisors of an integer in polynomial time;<br>\nby \"efficient\", I therefore mean, as it were, \"not unnecessarily<br>\ninefficient\". I am not looking for anything overly fancy such as number<br>\nfield sieves, just something slightly better than trial division with<br>\nall integers from 1 to n.</p>\n<p>Cheers,<br>\nManuel</p>",
        "id": 294251524,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660910925
    },
    {
        "content": "<p>From: Brian Huffman &lt;<a href=\"mailto:huffman.brian.c@gmail.com\">huffman.brian.c@gmail.com</a>&gt;<br>\nDo you need an Isabelle definition that works for code generation, or<br>\nwould it be sufficient to have something that works in Isabelle<br>\nproofs, e.g. a simproc that could rewrite \"prime_factorization 60\" to<br>\n\"[2,2,3,5]\"?</p>\n<p>I don't know of any pre-existing solution for factorization, but if a<br>\nsimproc is all you need, then you might consider doing something like<br>\nwhat we have for div/mod on integer numerals. (See simprocs<br>\nbinary_int_div and binary_int_mod in src/HOL/Divides.thy.)</p>\n<p>If you have a function defined in Isabelle as \"f x == THE y. P x y\",<br>\nthen you can use an external oracle or ML function to compute \"y\" from<br>\n\"x\". Within Isabelle, you then prove \"P x y\" and use the uniqueness<br>\ntheorem to derive \"f x = y\".</p>\n<p>If the uniqueness of prime factorizations is already proved, then we<br>\njust need a way to prove in Isabelle that a given factorization is<br>\nindeed a prime factorization of a given number. I guess the next step<br>\nis to find an efficient way to test for primality in Isabelle. :)</p>\n<ul>\n<li>Brian</li>\n</ul>",
        "id": 294251538,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660910931
    },
    {
        "content": "<p>From: Manuel Eberl &lt;<a href=\"mailto:eberlm@in.tum.de\">eberlm@in.tum.de</a>&gt;<br>\nAt the end of the day, I want to write a proof method in Isabelle, so I<br>\nwould imagine a simproc would do just fine. (albeit a definition would<br>\nprobably be easier to use)</p>\n<p>I had not thought of this kind of approach, so thank you for that<br>\nsuggestion. As for the primality test, I do remember seeing an<br>\nimplementation of Eratosthenes' sieve somewhere in HOL/Number_Theory.</p>\n<p>Well, I shall look into it, thank you.</p>",
        "id": 294251567,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660910944
    },
    {
        "content": "<p>From: Ognjen Maric &lt;<a href=\"mailto:ognjen.maric@gmail.com\">ognjen.maric@gmail.com</a>&gt;<br>\nHow large are your numbers? If the memory from my crypto courses serves<br>\nme well, trial division (you can go just up to the square root of n) is<br>\nstill the most efficient option for reasonably small numbers, e.g. 32-bit.</p>\n<p>Cheers,<br>\nOgnjen</p>",
        "id": 294251585,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660910951
    },
    {
        "content": "<p>From: René Thiemann &lt;<a href=\"mailto:rene.thiemann@uibk.ac.at\">rene.thiemann@uibk.ac.at</a>&gt;<br>\nAt least for square roots, there is an executable algorithm for <br>\nfloor (sqrt integer) and ceiling (sqrt integer)<br>\n(See Sqrt_Babylonian in the development version of the AFP)</p>\n<p>Cheers,<br>\nRené</p>",
        "id": 294251603,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660910960
    },
    {
        "content": "<p>From: Manuel Eberl &lt;<a href=\"mailto:eberlm@in.tum.de\">eberlm@in.tum.de</a>&gt;<br>\nYes, indeed, I think so, too. Although I do not know the latest<br>\ndevelopments in number field sieve algorithms; they might have become<br>\nbetter at handling small integers in the mean time. However, I was not<br>\nlooking for an efficient factorisation algorithm, but for a more<br>\nefficient algorithm for the divisors of n than trial division for<br>\n/every/ natural number ≤ n. And that is, indeed, possible.</p>\n<p>The Haskell arithmoi package, for instance, first computes the prime<br>\nfactorisation using a combination of some kind of trial division for<br>\nsmall factors and then a number field sieve and then uses that to<br>\ngenerate the divisors, and since the authors of the arithmoi package<br>\ngenerally seem to know their stuff, I would assume that this is indeed<br>\nthe most efficient way to do it.</p>\n<p>So I think that at some point, I will probably implement this in<br>\nIsabelle – minus the number field sieve, of course – and until then, I<br>\nwill stick with the naïve approach.</p>\n<p>Thanks for the replies</p>\n<p>Cheers<br>\nManuel</p>",
        "id": 294251609,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660910962
    },
    {
        "content": "<p>From: Florian Haftmann &lt;<a href=\"mailto:florian.haftmann@informatik.tu-muenchen.de\">florian.haftmann@informatik.tu-muenchen.de</a>&gt;<br>\nHi Manuel,</p>\n<p>the upcoming Isabelle release will contain a sieve algorithm in<br>\nHOL/Number_Theory/Eratosthenes.thy</p>\n<p>I appreciate your efforts to bring more executability to number theory.</p>\n<p>Cheers,<br>\n    Florian<br>\n<a href=\"/user_uploads/14278/hCnDMdlLXMKdtLgmTuOAbmvx/signature.asc\">signature.asc</a></p>",
        "id": 294251623,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660910969
    },
    {
        "content": "<p>From: Manuel Eberl &lt;<a href=\"mailto:eberlm@in.tum.de\">eberlm@in.tum.de</a>&gt;<br>\nHallo,</p>\n<p>well, that is not what I meant by a \"number field sieve\". All the same,<br>\nit might be useful, but I am not entirely sure.</p>\n<p>Do you happen to know whether Eratosthenes's sieve facilitates<br>\nfactorisation at all? My approach would have been to simply enumerate<br>\nascending integers d and \"divide the factor d out of n\" as often as<br>\npossible; non-prime numbers will then always be divided out zero times,<br>\nsince their prime factors are divided out before they are reached<br>\nthemselves.</p>\n<p>If one first generates the appropriate number of prime numbers with<br>\nEratosthenes' sieve, one can, of course, avoid unnecessary divisibility<br>\ntests, but at the cost of the time and memory overhead of computing the<br>\nsieve, so I am not sure whether that is a good tradeoff for practical<br>\nsituations.</p>\n<p>Cheers,<br>\nManuel</p>",
        "id": 294251642,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660910974
    },
    {
        "content": "<p>From: Ognjen Maric &lt;<a href=\"mailto:ognjen.maric@gmail.com\">ognjen.maric@gmail.com</a>&gt;<br>\nOn 10/19/2013 09:15 AM, Manuel Eberl wrote:</p>\n<blockquote>\n<p>Yes, indeed, I think so, too. Although I do not know the latest<br>\ndevelopments in number field sieve algorithms; they might have become<br>\nbetter at handling small integers in the mean time. However, I was not<br>\nlooking for an efficient factorisation algorithm, but for a more<br>\nefficient algorithm for the divisors of n than trial division for<br>\n/every/ natural number ≤ n. And that is, indeed, possible.</p>\n</blockquote>\n<p>I'm not sure I follow. Yes, there are asymptotically faster algorithms<br>\nthan trial division, but that you knew already. I merely said that is<br>\nnothing more efficient than trial division (with odd numbers &lt;= sqrt(n))<br>\nfor factoring a single relatively small number. With \"small number\"<br>\nbeing I guess anything not used for crypto. I'm not a cryptographer<br>\nthough, so I could be wrong, but I'm not even sure if you're disagreeing<br>\nwith me or not.</p>\n<blockquote>\n<p>The Haskell arithmoi package, for instance, first computes the prime<br>\nfactorisation using a combination of some kind of trial division for<br>\nsmall factors and then a number field sieve and then uses that to<br>\ngenerate the divisors, and since the authors of the arithmoi package<br>\ngenerally seem to know their stuff, I would assume that this is indeed<br>\nthe most efficient way to do it.</p>\n</blockquote>\n<p>I looked at the code briefly, and yes, the authors seem to know crypto<br>\nmuch better than I do. However, judging by their comments they don't<br>\nimplement any number field sieves, they use elliptic curve<br>\nfactorization. Which, according to my crypto course lecture notes,<br>\n\"performs well for numbers with a medium-sized smallest factor (20-60<br>\ndigits)\".</p>\n<blockquote>\n<p>So I think that at some point, I will probably implement this in<br>\nIsabelle – minus the number field sieve, of course – and until then, I<br>\nwill stick with the naïve approach.</p>\n</blockquote>\n<p>Another option is continued fractions factorization, which are<br>\nrelatively simple IIRC, and beat trial division asymptotically. But I<br>\nthink it all really depends on what your application is.</p>\n<p>Cheers,<br>\nOgnjen</p>",
        "id": 294251663,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660910980
    },
    {
        "content": "<p>From: Manuel Eberl &lt;<a href=\"mailto:eberlm@in.tum.de\">eberlm@in.tum.de</a>&gt;<br>\nOn 19/10/13 10:38, Ognjen Maric wrote:</p>\n<blockquote>\n<p>I'm not sure I follow. Yes, there are asymptotically faster algorithms<br>\nthan trial division, but that you knew already. I merely said that is<br>\nnothing more efficient than trial division (with odd numbers &lt;= sqrt(n))<br>\nfor factoring a single relatively small number.<br>\nWell my point is that I am not looking for an algorithm to factorise an<br>\ninteger, but to compute all its divisors. Divisors, not factors! The<br>\nprime factors of 10 are 2 and 5, its (positive) divisors are 1, 2, 5,<br>\nand 10. Of course, the divisor problem can be reduced to the<br>\nfactorisation problem, which is why factorisation would also help me.</p>\n</blockquote>\n<blockquote>\n<p>I looked at the code briefly, and yes, the authors seem to know crypto<br>\nmuch better than I do. However, judging by their comments they don't<br>\nimplement any number field sieves, they use elliptic curve<br>\nfactorization. Which, according to my crypto course lecture notes,<br>\n\"performs well for numbers with a medium-sized smallest factor (20-60<br>\ndigits)\".</p>\n</blockquote>\n<p>Ah yes, indeed they do. But, anyway, my focus of attention, as I already<br>\nsaid, is not on the factorisation, but on the \"divisors\" function:<br>\n<a href=\"http://hackage.haskell.org/package/arithmoi-0.4.0.3/docs/Math-NumberTheory-Primes-Factorisation.html#v:divisors\">http://hackage.haskell.org/package/arithmoi-0.4.0.3/docs/Math-NumberTheory-Primes-Factorisation.html#v:divisors</a><br>\nThat is what I want, and as you can see, they compute a prime<br>\nfactorisation and then compute the set of divisors from that. Which is<br>\nwhat I am planning to do in Isabelle now at some point.</p>\n<p>Cheers,<br>\nManuel</p>",
        "id": 294251674,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660910987
    },
    {
        "content": "<p>From: Florian Haftmann &lt;<a href=\"mailto:florian.haftmann@informatik.tu-muenchen.de\">florian.haftmann@informatik.tu-muenchen.de</a>&gt;<br>\nI am definitely not sure either.  You'll find out such things during the<br>\nprogress of your work…</p>\n<p>Florian<br>\n<a href=\"/user_uploads/14278/CgU7XMcl3NUK5lrrqRi9aRTS/signature.asc\">signature.asc</a></p>",
        "id": 294251921,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660911067
    }
]