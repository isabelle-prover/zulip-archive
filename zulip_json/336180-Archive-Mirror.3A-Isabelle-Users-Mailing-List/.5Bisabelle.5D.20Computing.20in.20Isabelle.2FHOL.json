[
    {
        "content": "<p>From: Christian Sternagel &lt;<a href=\"mailto:c.sternagel@gmail.com\">c.sternagel@gmail.com</a>&gt;<br>\nDear José,</p>\n<p>I am guessing your question is how to speed up computations?</p>\n<p>First of all, your Isabelle/HOL implementation of \"Fib\" below is<br>\nunnecessarily inefficient (that is, quadratic) as is, due to the nested<br>\nuse of \"(@)\". For lists it is only efficient to traverse them from left<br>\nto right, so iterated appending is one of the worst things you can do<br>\nwith them ;)</p>\n<p>(I don't know SAGE, but I it might use arrays rather than lists<br>\ninternally? Otherwise, it should also be really slow.)</p>\n<p>A possible implementation of Fibonacci numbers with linear complexity<br>\nwould be:</p>\n<p>fun fibacc :: \"nat ⇒ nat ⇒ nat ⇒ nat list\"<br>\n  where<br>\n    \"fibacc x y 0 = []\"<br>\n  | \"fibacc x y (Suc 0) = [x]\"<br>\n  | \"fibacc x y (Suc n) = x # fibacc y (x + y) n\"</p>\n<p>definition \"fib = fibacc 0 1\"</p>\n<p>where \"fibacc\" uses two accumulating variables \"x\" and \"y\" (hence the<br>\nname) to maintain a \"window\" on the current and next Fibonacci number.</p>\n<p>At this point 'value \"fib 40\"' will probably still be too slow. But now<br>\nthe problem is the default implementation of natural numbers (in unary<br>\nrepresentation). So</p>\n<p>import \"~~/src/HOL/Library/Code_Binary_Nat\"</p>\n<p>should do the trick.</p>\n<p>hope this helps,</p>\n<p>chris</p>",
        "id": 294747657,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661194182
    },
    {
        "content": "<p>From: Dominique Unruh &lt;<a href=\"mailto:unruh@ut.ee\">unruh@ut.ee</a>&gt;<br>\nHi,</p>\n<p>one thing that might help is to import the theory HOL.Code_Target_Numeral<br>\n(see <a href=\"https://isabelle.in.tum.de/dist/Isabelle2018/doc/codegen.pdf\">https://isabelle.in.tum.de/dist/Isabelle2018/doc/codegen.pdf</a>, p.40.)<br>\nto speed up integer operations.</p>\n<p>Additionally, I am noticing that you are using random access to your list<br>\nin SumLast2, each of those has O(n) complexity, so has the @. So your<br>\nroutine is unnecessarily slow. Of course, the same problem might occur in<br>\nPython, but Python implements lists differently, and possibly with O(1)<br>\nlookups (not sure). At least for the Isabelle code generation, it would<br>\nmuch much faster to just generate the reversed list (i.e., (λ L. SumLast2 L</p>\n<h1>L)), then all operations will be O(1), and your code will run the</h1>\n<p>square-root of the time.</p>\n<p>Finally, I think there is some overhead when calling \"value\" because a lot<br>\nof code is compiled at this moment (for all functions that are indirectly<br>\nused by your command). This won't matter so match for complex computations<br>\nbut is probably in the way when computing very fast computations.</p>\n<p>Best wishes,<br>\nDominique.</p>",
        "id": 294747673,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661194189
    },
    {
        "content": "<p>From: Florian Haftmann &lt;<a href=\"mailto:florian.haftmann@informatik.tu-muenchen.de\">florian.haftmann@informatik.tu-muenchen.de</a>&gt;<br>\nHi José,</p>\n<p>the hints already given should help you to get a reasonable speedup for<br>\ncasual evaluation. What to do if this is not enough depends on your<br>\napplication. The tutorial on code generation gives some hints on that.</p>\n<p>Cheers,<br>\n    Florian<br>\n<a href=\"/user_uploads/14278/1pxqvggH3qXw10pBqMpiAsAR/signature.asc\">signature.asc</a></p>",
        "id": 294747752,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661194207
    },
    {
        "content": "<p>From: José Manuel Rodriguez Caballero &lt;<a href=\"mailto:josephcmac@gmail.com\">josephcmac@gmail.com</a>&gt;<br>\nThank you all for the proposals in order to improve the speed of<br>\ncomputation in Isabelle. The only strange experience that I have not<br>\nunderstood yet is that the exponential algorithm</p>\n<p>fun fib :: ‹nat ⇒ nat›  where<br>\n  ‹fib 0 = 0›<br>\n| ‹fib (Suc 0) = 1›<br>\n| ‹fib (Suc (Suc n)) = fib (Suc n) + fib n›</p>\n<p>value ‹fib 25›</p>\n<p>seems to be faster in Isabelle than the linear algorithm</p>\n<p>fun fibL :: ‹nat ⇒ nat*nat›  where<br>\n  ‹fibL 0 = (1,0)›<br>\n| ‹fibL (Suc n) = (λ x. (snd x, snd x + fst x)) (fibL n)›</p>\n<p>value ‹fibL 25›</p>\n<p>By the way, in SAGE the above-mentioned exponential algorithm runs in<br>\nexponential time and the above-mentioned linear algorithm runs in linear<br>\ntime. On the other hand, both algorithms in Isabelle run as if they were<br>\nboth exponentials, the linear one is even worst. I know that I am doing<br>\nsomething that I think is linear, but Isabelle interpreted it as<br>\nexponential in the case of fibL. Is there a way to fix the definition of<br>\nfibL to make it linear as it should be?</p>\n<p>Link: <a href=\"https://github.com/josephcmac/miscellany/blob/master/FiboSum.thy\">https://github.com/josephcmac/miscellany/blob/master/FiboSum.thy</a></p>\n<p>Kind Regards,<br>\nJosé M.</p>\n<p>El mié., 19 dic. 2018 a las 8:37, Florian Haftmann (&lt;<br>\n<a href=\"mailto:florian.haftmann@informatik.tu-muenchen.de\">florian.haftmann@informatik.tu-muenchen.de</a>&gt;) escribió:</p>",
        "id": 294747810,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661194231
    },
    {
        "content": "<p>From: Dominique Unruh &lt;<a href=\"mailto:unruh@ut.ee\">unruh@ut.ee</a>&gt;<br>\nHi,</p>\n<p>your fibL does indeed look linear. Perhaps it's not exponential, but the<br>\noverhead for compilation is big? How about <em>value \"fib 0\"</em>? One thing that<br>\ncan help to understand what's going on is the command *declare<br>\n[[ML-source-trace]]* which shows you what ML code Isabelle is actually<br>\nexecuting.</p>\n<p>Best wishes,<br>\nDominique.</p>",
        "id": 294747839,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661194244
    },
    {
        "content": "<p>From: Andreas Lochbihler &lt;<a href=\"mailto:mail@andreas-lochbihler.de\">mail@andreas-lochbihler.de</a>&gt;<br>\nDear José,</p>\n<p>Isabelle beta-reduces all definitions before they executed. So your fibL actually looks <br>\nlike this:</p>\n<p>fun fibL :: ‹nat ⇒ nat*nat›  where<br>\n    ‹fibL 0 = (1,0)›<br>\n| ‹fibL (Suc n) = (snd (fibL n), snd (fibL n) + fst (fibL n))›</p>\n<p>And clearly, this is even worse than the plain fib.</p>\n<p>If you want to share results, you must use explict let bindings:</p>\n<p>fun fibL :: ‹nat ⇒ nat*nat›  where<br>\n    ‹fibL 0 = (1,0)›<br>\n| ‹fibL (Suc n) = (let x = fibL n in (snd x, snd x + fst x))›</p>\n<p>Best,<br>\nAndreas</p>",
        "id": 294747852,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661194250
    },
    {
        "content": "<p>From: Dominic Mulligan &lt;<a href=\"mailto:Dominic.Mulligan@arm.com\">Dominic.Mulligan@arm.com</a>&gt;<br>\nHi Jose,</p>\n<p>The following appears to be faster than your original:</p>\n<p>theory Scratch<br>\n  imports Main \"HOL-Library.Code_Target_Nat\"<br>\nbegin</p>\n<p>text‹I have included the @{theory \"HOL-Library.Code_Target_Nat\"} theory above which maps HOL's<br>\n     @{type nat} type onto machine integers in the code generator target languages.  Try removing<br>\n     the inclusion of this theory above to see the effect it has on @{command value}'s performance,<br>\n     below.}›</p>\n<p>text‹Computes the nth Fibonacci number›<br>\nfun fib :: ‹nat ⇒ nat› where<br>\n  ‹fib 0 = 0› |<br>\n  ‹fib (Suc 0) = 1› |<br>\n  ‹fib (Suc (Suc m)) = fib (Suc m) + fib m›</p>\n<p>text‹Computes the sequence of Fibonacci numbers upto a limit›<br>\ndefinition fibs :: ‹nat ⇒ nat list› where<br>\n  ‹fibs limit ≡ map fib (upt 0 limit)›</p>\n<p>text‹@{command value} takes an optional command telling it which evaluator to use.  By default it<br>\n     uses the code simplifier.  You can also try the code evaluation evaluator (the normalization by<br>\n     evaluation evaluator does not terminate, here):›<br>\nvalue ‹fib 40›<br>\nvalue [code] ‹fib 40›</p>\n<p>value ‹fibs 40›<br>\nvalue [code] ‹fibs 40›</p>\n<p>end</p>\n<p>Without SAGE on my machine it's hard to say whether this is \"as fast\" as SAGE.</p>\n<p>Thanks,<br>\nDominic</p>\n<p>﻿</p>",
        "id": 294747866,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661194256
    },
    {
        "content": "<p>From: José Manuel Rodriguez Caballero &lt;<a href=\"mailto:josephcmac@gmail.com\">josephcmac@gmail.com</a>&gt;<br>\nThank you. Problem solved using \"led\" in place of \"lambda\". Right now, the<br>\nalgorithm is running really fast.</p>\n<p>Kind Regards,<br>\nJosé M.</p>\n<p>El jue., 20 dic. 2018 a las 1:52, Andreas Lochbihler (&lt;<br>\n<a href=\"mailto:mail@andreas-lochbihler.de\">mail@andreas-lochbihler.de</a>&gt;) escribió:</p>",
        "id": 294747876,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661194262
    }
]