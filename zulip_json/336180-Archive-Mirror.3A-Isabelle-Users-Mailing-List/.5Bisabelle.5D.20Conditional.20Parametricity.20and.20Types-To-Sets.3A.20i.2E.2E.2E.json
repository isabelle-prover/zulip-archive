[
    {
        "content": "<p>From: Mikhail Chekhov &lt;<a href=\"mailto:mikhail.chekhov.w@gmail.com\">mikhail.chekhov.w@gmail.com</a>&gt;<br>\nDear All,</p>\n<p>I would like to ask a question in relation to one of the existing user<br>\npackages: \"conditional parametricity\"<br>\n(HOL-Library.Conditional_Parametricity). Nevertheless, the issue is<br>\nslightly more fundamental, as it is concerned with the<br>\nintegration/duplication of the user-level Isabelle/ML code.</p>\n<p>It appears that there is a substantial overlap between the functionality of<br>\none of the command tts_parametricity that is provided as part of the<br>\nextension of Types-To-Sets (<a href=\"https://gitlab.com/mikhail.chekhov/tts_extension\">https://gitlab.com/mikhail.chekhov/tts_extension</a>)<br>\nand the existing command parametric_constant. Given that there have been<br>\nsome discussions about the possibility of adding the extension of<br>\nTypes-To-Sets to the AFP, I would like to ensure that the issue related to<br>\nthe duplication of functionality is resolved in the appropriate manner long<br>\nbefore the potential submission (please note that the extension of<br>\nTypes-To-Sets is still under development).</p>\n<p>Unfortunately, I was unaware of the existence of the package \"conditional<br>\nparametricity\" while developing the code for the command tts_parametricity:<br>\nI would like to think that I have done everything I could to avoid<br>\nduplication. I have even asked a question about the possibility of the<br>\nexistence of such a package on the list a while ago. Also, it does not seem<br>\nto appear anywhere in the standard documentation of Isabelle/HOL.</p>\n<p>If my understanding of the functionality of the existing public interface<br>\nand the functionality of the package \"conditional parametricity\" is<br>\ncorrect, I cannot reuse the existing public interface effectively to<br>\nprovide the functionality that I seek for the command tts_parametricity.<br>\nFirstly, tts_parametricity restricts the possible side conditions to<br>\nright_total and bi_unique. Secondly, tts_parametricity makes an attempt to<br>\nsynthesize a new (parametrically related) constant if a given constant is<br>\nfound to be non-conditionally parametric. Nevertheless, if a given constant<br>\nis found to be (conditionally) parametric, tts_parametricity provides the<br>\nparametricity property, like the command parametric_constant. If I have not<br>\nmissed anything, the public interface of the \"conditional parametricity\"<br>\ndoes not allow for the restriction of the possible side conditions and does<br>\nnot attempt to synthesize a new constant under any circumstances.</p>\n<p>My primary question is what is the canonical solution to such a problem? I<br>\nfeel that it is my moral duty to make the developers of the \"conditional<br>\nparametricity\" aware of my own development and allow them to decide the<br>\nfate of tts_parametricity. Naturally, any input from the community would<br>\nalso be highly appreciated, as, I can imagine, similar problems arise in<br>\nthe development of almost every open source project and every community has<br>\nsome form of canonical procedures towards the resolution of such issues.</p>\n<p>Would it be preferable for me to suggest amendments to the existing code<br>\nbase of \"conditional parametricity\", instead of providing a new command?<br>\nOr, perhaps, on the contrary, the authors would prefer to keep our<br>\ndevelopments separate? In the case of the latter, how should I attribute<br>\nyour work?</p>\n<p>Thank you,<br>\nMikhail Chekhov</p>",
        "id": 294767579,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661202659
    },
    {
        "content": "<p>From: Mikhail Chekhov &lt;<a href=\"mailto:mikhail.chekhov.w@gmail.com\">mikhail.chekhov.w@gmail.com</a>&gt;<br>\nDear All,</p>\n<p>Please accept my apologies: there are misprints in my previous post. The<br>\nfirst sentence in the second paragraph should read:</p>\n<p>It appears that there is a substantial overlap between the functionality of<br>\none of the commands (tts_parametricity) that are provided as part of the<br>\nextension of Types-To-Sets (<a href=\"https://gitlab.com/mikhail.chekhov/tts_extension\">https://gitlab.com/mikhail.chekhov/tts_extension</a>)<br>\nand the existing command parametric_constant.</p>\n<p>Thank you,<br>\nMikhail Chekhov</p>",
        "id": 294767598,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661202666
    },
    {
        "content": "<p>From: Traytel  Dmitriy &lt;<a href=\"mailto:traytel@inf.ethz.ch\">traytel@inf.ethz.ch</a>&gt;<br>\nDear Mikhail,</p>\n<p>the parametric_constant command was introduced in Isabelle2018 and is mentioned in the corresponding section of NEWS. The command has a truly minimalistic interface, therefore we didn't consider it necessary to add it to isar-ref (the NEWS entry refers to an example file). Maybe there should be an isar-ref description nonetheless.</p>\n<p>We had considered to provide the user a way to specify side conditions on the involved relations, but decided against this in favor of a simpler user interface. The idea was that parametric_constant can be used in 90% of the cases where the synthesized conditions are the ones one wants to have anyway and in the remaining 10% the user can write the statement manually.</p>\n<p>I don't see it as problematic, if you add a command that has a similar functionality, but has a different/extended user interface to the AFP. If there is an easy way of reducing one tool to the other (e.g., your command sets up the parametricity goal and then invokes the tactics from parametric_constants to discharge it), that would definitely be nice, but requires additional work.</p>\n<p>I am also not against adding this functionality directly to parametric constants, but then we should have some (off-this-list) discussions about in what form the side constraints are specified.</p>\n<p>Dmitriy</p>",
        "id": 294767621,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661202672
    }
]