[
    {
        "content": "<p>From: Manuel Eberl &lt;<a href=\"mailto:eberlm@in.tum.de\">eberlm@in.tum.de</a>&gt;<br>\nHallo,</p>\n<p>I have a constant f :: (real ⇒ real) ⇒ (real ⇒ real) set.</p>\n<p>I also have the following lemma for the behaviour of f on constant <br>\nfunctions:</p>\n<p>lemma f_const: \"c ≠ 0 ⟹ f (λ_. c) = f(λ_. 1)\"</p>\n<p>I want to automatically normalise every term of the form \"f (λ_. c)\" to <br>\n\"f (λ_. 1)\" with the simplifier.<br>\nHowever, adding f_const to the simplifier does not work, because then <br>\nthe simplifier will loop rewriting \"f (λ_. 1)\" to itself.</p>\n<p>I therefore tried the following rule:</p>\n<p>lemma f_const': \"c ≠ 0 ⟹ c ≠ 1 ⟹ f (λ_. c) = f(λ_. 1)\"</p>\n<p>That seems to work better in the simpset, but the simplifier still <br>\noccasionally loops. Swapping \"c ≠ 0\" and \"c ≠ 1\" in the premises does <br>\nnot seem to change that.</p>\n<p>Is there a way to get the simplifier to only rewrite if \"c\" is not equal <br>\nto 1? (equal on the expression level, not the term level. Rewriting \"f <br>\n(λ_. 0+1)\" to \"f (λ_. 1)\" is fine, but rewriting \"f (λ_. 1)\" to \"f (λ_. <br>\n1)\" is not) Should I write a simproc to do this? Or is there a better way?</p>\n<p>Cheers,</p>\n<p>Manuel</p>",
        "id": 294637311,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661160704
    },
    {
        "content": "<p>From: Andreas Lochbihler &lt;<a href=\"mailto:andreas.lochbihler@inf.ethz.ch\">andreas.lochbihler@inf.ethz.ch</a>&gt;<br>\nHi Manuel,</p>\n<p>In Isabelle2015-RC*, there is the predicate NO_MATCH (defined in HOL.thy) that tests <br>\nwhether a term does not match a pattern (implemented via a simproc). So you could write</p>\n<p>lemma f_const: \"c ~= 0 ==&gt; NO_MATCH (1 :: real) c ==&gt; f (%_. c) = f (%_. 1)\"</p>\n<p>Best,<br>\nAndreas</p>",
        "id": 294637359,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661160722
    }
]