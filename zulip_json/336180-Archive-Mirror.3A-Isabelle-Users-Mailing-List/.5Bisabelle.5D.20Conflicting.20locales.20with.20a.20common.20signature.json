[
    {
        "content": "<p>From: Michael Chan &lt;<a href=\"mailto:mchan@inf.ed.ac.uk\">mchan@inf.ed.ac.uk</a>&gt;<br>\nHi all,</p>\n<p>I have a question about proving theorems about conflicting locales which <br>\nshare a common signature. Suppose the following:</p>\n<p>locale sig_loc =<br>\n   fixes f :: \"real=&gt;real\"</p>\n<p>locale loc1 = sig_loc +<br>\n   assumes ax1: \"ALL x. f x &gt; 0\"</p>\n<p>locale loc2 = sig_loc +<br>\n   assumes ax1: \"ALL x. f x = 0\"</p>\n<p>locale locexp =<br>\n   l1: loc1 f + l2: loc2 f'<br>\n   for f f'</p>\n<p>Clearly, loc1 and loc2 conflict with each other due to loc1.ax1 and <br>\nloc2.ax1. Since they both contain the constant 'f', could one come up <br>\nwith a theorem stating that there exists a function 'func' and a real <br>\nnumber 'x' such that 'func x &gt; 0' holds in one locale (loc1) and 'func x <br>\n= 0' holds in another (loc2)? Something in a similar shape as</p>\n<p>lemma (in locexp) lem: \"EX func x. func x &gt; 0 &amp; func x = 0\"</p>\n<p>but that's inconsistent. Are there ways to annotate the variables, e.g., <br>\n\"EX func x. l1.func x &gt; 0 &amp; l2.func x = 0\", or something similar?</p>\n<p>Thanks in advance.</p>\n<p>Regards,<br>\nMichael</p>",
        "id": 294112327,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660837232
    },
    {
        "content": "<p>From: Florian Haftmann &lt;<a href=\"mailto:florian.haftmann@informatik.tu-muenchen.de\">florian.haftmann@informatik.tu-muenchen.de</a>&gt;<br>\nHi Michael,</p>\n<p>You just need to give both parameters the same name on import, e.g.:</p>\n<p>locale A =<br>\n  fixes f<br>\n  assumes involutory: \"f ∘ f = id\"</p>\n<p>locale B =<br>\n  fixes g<br>\n  assumes idempotency: \"g ∘ g = g\"</p>\n<p>locale C = A h + B h for h<br>\nbegin</p>\n<p>lemma \"h = id\"<br>\nusing involutory idempotency by simp</p>\n<p>end</p>\n<p>Note also that the concept of locale import has little to do with the<br>\nobject-oriented concept of inheritance, so it is rarely helpful to think<br>\nin that category.</p>\n<p>Hope this helps,<br>\n    Florian<br>\n<a href=\"/user_uploads/14278/GQhiXAfsbZumVowdtEspaOGG/signature.asc\">signature.asc</a></p>",
        "id": 294112428,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660837265
    },
    {
        "content": "<p>From: Peter Gammie &lt;<a href=\"mailto:peteg42@gmail.com\">peteg42@gmail.com</a>&gt;<br>\nMichael,</p>\n<p>Did you try this?</p>\n<p>Try saying:</p>\n<p>print_locale! locexp</p>\n<p>to see what Isabelle thinks you are trying to say.</p>\n<p>locexp is not inconsistent - loc1 is instantiated with f, and loc2 with f' - distinct parameters. The diamond dependency you're trying to exploit doesn't work the way you think it does (I think :-).</p>\n<p>I'd also suggest making the prefixes l1 and l2 mandatory:</p>\n<p>locale locexp =<br>\n l1!: loc1 f + l2!: loc2 f'<br>\n for f f'</p>\n<p>Hope this helps.</p>\n<p>cheers<br>\npeter</p>",
        "id": 294112456,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660837275
    }
]