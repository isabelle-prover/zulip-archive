[
    {
        "content": "<p>From: Florian Haftmann &lt;<a href=\"mailto:florian.haftmann@informatik.tu-muenchen.de\">florian.haftmann@informatik.tu-muenchen.de</a>&gt;<br>\nHi all,</p>\n<p>in private conversation Manuel has pointed out to me that there is a<br>\npotential conflict in simp rules.</p>\n<p>Have a look at</p>\n<ul>\n<li>\n<p>add_num_frac [field_simps]:<br>\n    y ≠ 0 ⟹ z + x / y = (x + z * y) / y<br>\n    (in class field)</p>\n</li>\n<li>\n<p>div_mult_self1 [simp]:<br>\n    b ≠ 0 ⟹ (a + c * b) div b = c + a div b<br>\n    (in class euclidean_semiring_cancel)</p>\n</li>\n</ul>\n<p>where it is important to know that »_ / _« and »_ div _« is just<br>\ndifferent surface syntax for the same operator.</p>\n<p>Under normal circumstances, there are no types which are both instances<br>\nof field and ring classes, hence there is no problem; but certain<br>\nalgebra applications require theory HOL-Library.Field_as_Ring, which<br>\nmakes the field type classes subclasses of corresponding ring classes.<br>\nThus any »(simp add: field_simps)« operates with both simp rules from<br>\nabove which are effectively symmetric to each other, which is not a good<br>\nidea. (There are other similar pairs around, but this only example is<br>\nenough to understand the problem).</p>\n<p>Generally, the rules in »field_simps« are directed towards establishing<br>\ncommon denominators, which is maybe what they are exactly intended for.<br>\nHence the orientation of add_num_frac is sensible in its particular<br>\ncontext and div_mult_self1 should not be a default simp rule any longer<br>\n(it has been made such by me some time ago, not being aware of the issue<br>\nmentioned above). But it (or its symmetric) should still be available in<br>\na rule collection.</p>\n<p>So which one?</p>\n<ul>\n<li>\n<p>»algebra_simps« would be a fitting name but its rules currently do not<br>\nstate anything about division, and I presume this is exactly the purpose<br>\nof it.</p>\n</li>\n<li>\n<p>»field_simps« would make semantically sense but the name would be<br>\nmisleading since there is no field involved in the general case.</p>\n</li>\n<li>\n<p>»divide_simps« would be a quite fitting name, quoth Field.thy: ‹Lemmas<br>\n‹divide_simps› move division to the outside and eliminates them on<br>\n(in)equalities.›</p>\n</li>\n</ul>\n<p>I am currently inclined to pursue the latter option, which would also<br>\nsuggest to generalize the relevant lemmas to a common ancestor type class.</p>\n<p>Any further suggestions?</p>\n<p>Cheers,<br>\n    Florian<br>\n<a href=\"/user_uploads/14278/VHRLa54CEg97I7VdTyzRWKBE/signature.asc\">signature.asc</a></p>",
        "id": 294751930,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661195802
    },
    {
        "content": "<p>From: Lawrence Paulson &lt;<a href=\"mailto:lp15@cam.ac.uk\">lp15@cam.ac.uk</a>&gt;<br>\nThe problem is that divide_simps already exists, with the objective of eliminating all occurrences of the division sign in expressions. It is a good deal more effective than field_simps in many situations.</p>\n<p>Larry Paulson</p>",
        "id": 294752061,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661195858
    },
    {
        "content": "<p>From: Florian Haftmann &lt;<a href=\"mailto:florian.haftmann@informatik.tu-muenchen.de\">florian.haftmann@informatik.tu-muenchen.de</a>&gt;</p>\n<blockquote>\n<blockquote>\n<ul>\n<li>»divide_simps« would be a quite fitting name, quoth Field.thy: ‹Lemmas<br>\n‹divide_simps› move division to the outside and eliminates them on<br>\n(in)equalities.›</li>\n</ul>\n<p>I am currently inclined to pursue the latter option, which would also<br>\nsuggest to generalize the relevant lemmas to a common ancestor type<br>\nclass.</p>\n</blockquote>\n</blockquote>\n<blockquote>\n<p>The problem is that divide_simps already exists, with the objective of eliminating all occurrences of the division sign in expressions. It is a good deal more effective than field_simps in many situations.</p>\n</blockquote>\n<p>Just to be more explicit: I suggest exactly to re-use the <em>exisiting</em><br>\ndivide_simps, because the rules in question are both structurally and by<br>\npurpose quite similar to those already gathered there.</p>\n<p>Florian<br>\n<a href=\"/user_uploads/14278/LXt2jU6hDXq6eu5kqIRDkNYa/signature.asc\">signature.asc</a></p>",
        "id": 294752077,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661195864
    }
]