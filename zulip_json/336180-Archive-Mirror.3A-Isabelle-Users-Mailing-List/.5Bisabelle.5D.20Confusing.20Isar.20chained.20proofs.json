[
    {
        "content": "<p>From: Ian Hayes &lt;<a href=\"mailto:Ian.Hayes@uq.edu.au\">Ian.Hayes@uq.edu.au</a>&gt;<br>\nI have some confusing behaviour in Isar proofs using chains of reasoning.<br>\nThe theory below abstracts the issue (so that the proofs are (should be) <br>\ntrivial).</p>\n<p>Lemma trans1 is fine (there is a much more direct proof but its the Isar <br>\nI'm concerned with).</p>\n<p>Lemma trans2 succeeds but looks like it should not.<br>\nLooking at the output of the proof state just after \"u\" it states \"have <br>\nb ≤ a\" and<br>\nthen in the next step the \"...\" matches \"a\" rather than \"b\"<br>\nwhich is not what I assumed looking at the equivalent step in trans1.</p>\n<p>Lemma trans3 fails to prove the second step because<br>\nthe first step actually shows \"have b ≤ a\" and hence<br>\nthe \"...\" matches \"a\" rather than (what I assumed) \"b\".</p>\n<p>I think the issue is that \"a ≥ b\" is an /abbreviation/ that gets <br>\nreplaced by \"b ≤ a\"<br>\nand that is what the Isar chaining proof sees.</p>\n<p>The problem is that in the context I'm working in, I want to use proofs that<br>\nare (sometimes long) chains of ≥ steps (which don't work as expected).<br>\nI know it is possible to reverse the proofs and use ≤, but in my context<br>\nthat is not the style of presentation I desire.</p>\n<p>Is this really the intended behaviour of chained proofs for ≥ ?<br>\nIs there a way to do the chains of ≥ proofs?</p>\n<p>Thanks in advance<br>\nIan</p>\n<hr>\n<p>theory Scratch<br>\n   imports Main</p>\n<p>begin</p>\n<p>locale test = order<br>\nbegin</p>\n<p>lemma trans1:<br>\n   assumes x: \"c ≤ b\"<br>\n   assumes y: \"b = a\"<br>\n   shows \"c ≤ a\"<br>\nproof -<br>\n   have u: \"c ≤ b\"<br>\n     by (simp add: x)<br>\n   also have v: \"… = a\"<br>\n     by (simp add: y)<br>\n   show ?thesis<br>\n     using u v by auto<br>\nqed</p>\n<p>lemma trans2:<br>\n   assumes x: \"a ≥ b\"<br>\n   assumes y: \"a = c\"<br>\n   shows \"c ≥ b\"<br>\nproof -<br>\n   have u: \"a ≥ b\"<br>\n     by (simp add: x)<br>\n   moreover have v: \"… = c\"<br>\n     by (simp add: y)<br>\n   show ?thesis<br>\n     using u v by auto<br>\nqed</p>\n<p>lemma trans3:<br>\n   assumes x: \"a ≥ b\"<br>\n   assumes y: \"b ≥ c\"<br>\n   shows \"a ≥ c\"<br>\nproof -<br>\n   have \"a ≥ b\"<br>\n     by (simp add: x)<br>\n   moreover have \"… ≥ c\"<br>\n     sorry</p>\n<p>end</p>",
        "id": 294821780,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661242492
    },
    {
        "content": "<p>From: Akihisa Yamada &lt;<a href=\"mailto:akihisayamada@nii.ac.jp\">akihisayamada@nii.ac.jp</a>&gt;<br>\nDear Ian,</p>\n<p>Isar's chained proofs are not about \"...\", but \"also\" that combines <br>\nfacts by certain rules (AFAIK theorems given [trans] attribute) and <br>\n\"finally\" that gives the combined result as if you are \"using\" it.</p>\n<p>\"...\" is just a shorthand for the last argument of the previous <br>\nstatement (if I understand correctly), so you can be explicit when it <br>\ndoesn't refer to what you want.</p>\n<p>context order begin<br>\nlemma trans3:<br>\n   assumes x: \"a ≥ b\"<br>\n   assumes y: \"b ≥ c\"<br>\n   shows \"a ≥ c\"<br>\nproof -<br>\n   have \"a ≥ b\"<br>\n     by (simp add: x)<br>\n   also have \"b ≥ c\" using y.<br>\n   finally show ?thesis.<br>\nend</p>\n<p>Best regards,<br>\nAkihisa</p>",
        "id": 294821806,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661242504
    },
    {
        "content": "<p>From: Wenda Li &lt;<a href=\"mailto:wl302@cam.ac.uk\">wl302@cam.ac.uk</a>&gt;<br>\nDear Ian,</p>\n<p>I know a way to do &gt;= style proofs, although I never used it in my own proofs:</p>\n<p>notepad<br>\nbegin<br>\n  fix a b c d :: int<br>\n  have \"a &gt; b\" (is \"_ &gt; ?rhs\")  sorry<br>\n  also have \"?rhs ≥ c\" (is \"_ ≥ ?rhs\") sorry<br>\n  also (xtrans)have \"?rhs = d\" sorry<br>\n  finally (xtrans) have \"a &gt; d\" .<br>\nend</p>\n<p>The ‘xtrans’ trick has been briefly described in <a href=\"https://isabelle.in.tum.de/repos/isabelle/file/3ab52e4a8b45/src/HOL/Orderings.thy\">https://isabelle.in.tum.de/repos/isabelle/file/3ab52e4a8b45/src/HOL/Orderings.thy</a></p>\n<p>Best,<br>\nWenda</p>",
        "id": 294821867,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661242529
    },
    {
        "content": "<p>From: Ian Hayes &lt;<a href=\"mailto:Ian.Hayes@uq.edu.au\">Ian.Hayes@uq.edu.au</a>&gt;<br>\nDear Akihisa,</p>\n<p>My understanding (like yours) of \"...\" /was/ that it matches the last <br>\nargument of the previous statement<br>\nbut lemma trans2 shows that in the case of ≥ it matches the first <br>\nargument of the previous statement.<br>\nI think this is because \"a ≥ b\" is an abbreviation that gets expanded to <br>\n\"b ≤ a\" and<br>\nthen it is the last argument of this (i.e. \"a\" rather than \"b\") that <br>\n\"...\" matches.<br>\nI found this counter intuitive.<br>\nThe interaction between abbreviations and Isar's \"...\" seems broken to me.</p>\n<p>In our actual application the \"b\" can be quite large, so the chained <br>\nstyle with \"...\" makes it much more readable.</p>\n<p>Thanks for your feedback<br>\nIan</p>",
        "id": 294821890,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661242545
    },
    {
        "content": "<p>From: Ian Hayes &lt;<a href=\"mailto:Ian.Hayes@uq.edu.au\">Ian.Hayes@uq.edu.au</a>&gt;<br>\nDear Wenda,</p>\n<p>Many thanks for your feedback and the description of the pattern <br>\nmatching trick.<br>\nMost useful.</p>\n<p>The link you gave confirms that \"...\" stands for the wrong thing for ≥.<br>\nIt seems to me that the \"...\" needs to be instantiated with the right <br>\nargument<br>\nof the previous statement /before/ the abbreviation for ≥ is expanded.<br>\nBut that is probably a non-trivial modification to Isabelle/Isar.</p>\n<p>Your link allowed me to find the following link<br>\n&lt;<a href=\"https://lists.cam.ac.uk/mailman/htdig/cl-isabelle-users/2011-September/msg00034.html\">https://lists.cam.ac.uk/mailman/htdig/cl-isabelle-users/2011-September/msg00034.html</a>&gt;<br>\nwhich is a response from Makarius to the same issue I am having.</p>\n<hr>",
        "id": 294821893,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661242548
    },
    {
        "content": "<p>From: Akihisa Yamada &lt;<a href=\"mailto:akihisayamada@nii.ac.jp\">akihisayamada@nii.ac.jp</a>&gt;<br>\nDear Ian, Wenda,</p>\n<p>it seems we don't have to learn the \"(xtrans)\" trick nowadays, maybe <br>\nwe've got enough [trans] rules?</p>\n<p>And, yes, \"...\" is the last argument after normalization. What I wanted <br>\nto say is that it is so no matter you're in chaining proof or not. <br>\nGeneral ways to avoid writing same thing twice (like \"is\") are <br>\ndocumented in Sec. 4.3.1 of the prog-prove document.</p>\n<p>Best regards,<br>\nAkihisa</p>",
        "id": 294821908,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661242553
    },
    {
        "content": "<p>From: Akihisa Yamada &lt;<a href=\"mailto:akihisayamada@nii.ac.jp\">akihisayamada@nii.ac.jp</a>&gt;<br>\nDear Ian, Wenda,</p>\n<blockquote>\n<p>it seems we don't have to learn the \"(xtrans)\" trick nowadays, maybe <br>\nwe've got enough [trans] rules?</p>\n</blockquote>\n<p>I'm sorry for the confusion, I was on a richer context than Main which <br>\nhas nicer set of trans rules.</p>\n<p>Best regards,<br>\nAkihisa</p>\n<blockquote>\n<p>And, yes, \"...\" is the last argument after normalization. What I wanted <br>\nto say is that it is so no matter you're in chaining proof or not. <br>\nGeneral ways to avoid writing same thing twice (like \"is\") are <br>\ndocumented in Sec. 4.3.1 of the prog-prove document.</p>\n<p>Best regards,<br>\nAkihisa</p>\n<p>On 2020/01/30 6:00, Ian Hayes wrote:</p>\n<blockquote>\n<p>Dear Wenda,</p>\n<p>Many thanks for your feedback and the description of the pattern <br>\nmatching trick.<br>\nMost useful.</p>\n<p>The link you gave confirms that \"...\" stands for the wrong thing for ≥.<br>\nIt seems to me that the \"...\" needs to be instantiated with the right <br>\nargument<br>\nof the previous statement /before/ the abbreviation for ≥ is expanded.<br>\nBut that is probably a non-trivial modification to Isabelle/Isar.</p>\n<p>Your link allowed me to find the following link<br>\n&lt;<a href=\"https://lists.cam.ac.uk/mailman/htdig/cl-isabelle-users/2011-September/msg00034.html\">https://lists.cam.ac.uk/mailman/htdig/cl-isabelle-users/2011-September/msg00034.html</a>&gt; </p>\n<p>which is a response from Makarius to the same issue I am having.</p>\n<hr>\n</blockquote>\n<p>On Fri, 9 Sep 2011, Peter Lammich wrote:</p>\n<blockquote>\n<p>I just wondered if it is possible to use the Isar-style transitivity<br>\n     reasoning with \\ge, i.e.</p>\n<p>note <code>a\\ge b</code> also note <code>... \\ge c</code> finally have \"a\\ge c\"</p>\n<p>There is still no proper way to do it.  When I've introduced the concept<br>\nof calculational reasoning in Isar the &gt;= abbreviations did not exist, <br>\nand<br>\nit was already known that it would not work. (The potential for confusion<br>\nwhen swapping order of concrete vs. abstract syntax was known long before<br>\nIsar, which was the reason for avoiding it in early Isabelle/HOL.)</p>\n<p>Later &gt;= was introduced nonetheless, when I was not looking / not quick<br>\nenough to explain the situation.  Since that time I have an item on my<br>\nTODO list to extend the \"...\" treatment of Isar to accomodate that<br>\nextension of the HOL library.  The &gt;= abbreviation is an example where<br>\nbug / feature are one and the same thing.</p>\n<hr>\n<p>I'm hoping this issue is moving up Makarius' TODO list :-)<br>\nIn the meantime I think it should probably be documented in the Isar <br>\nmanual<br>\nrather than hidden in a comment in Orderings.thy.</p>\n<p>Thanks again<br>\nIan</p>\n</blockquote>\n<p>On 29/1/20 21:39, Wenda Li wrote:</p>\n<blockquote>\n<blockquote>\n<p>Dear Ian,</p>\n<p>I know a way to do &gt;= style proofs, although I never used it in my <br>\nown proofs:</p>\n<p>notepad<br>\nbegin<br>\n   fix a b c d :: int<br>\n   have \"a &gt; b\" (is \"_ &gt; ?rhs\")  sorry<br>\n   also have \"?rhs ≥ c\" (is \"_ ≥ ?rhs\") sorry<br>\n   also (xtrans)have \"?rhs = d\" sorry<br>\n   finally (xtrans) have \"a &gt; d\" .<br>\nend</p>\n<p>The ‘xtrans’ trick has been briefly described in <br>\n<a href=\"https://isabelle.in.tum.de/repos/isabelle/file/3ab52e4a8b45/src/HOL/Orderings.thy\">https://isabelle.in.tum.de/repos/isabelle/file/3ab52e4a8b45/src/HOL/Orderings.thy</a> </p>\n<p>Best,<br>\nWenda</p>\n<p>On 29 Jan 2020, at 09:35, Ian Hayes &lt;<a href=\"mailto:Ian.Hayes@uq.edu.au\">Ian.Hayes@uq.edu.au</a>&gt; wrote:</p>\n<blockquote>\n<p>I have some confusing behaviour in Isar proofs using chains of <br>\nreasoning.<br>\nThe theory below abstracts the issue (so that the proofs are (should <br>\nbe) trivial).</p>\n<p>Lemma trans1 is fine (there is a much more direct proof but its the <br>\nIsar I'm concerned with).</p>\n<p>Lemma trans2 succeeds but looks like it should not.<br>\nLooking at the output of the proof state just after \"u\" it states <br>\n\"have b ≤ a\" and<br>\nthen in the next step the \"...\" matches \"a\" rather than \"b\"<br>\nwhich is not what I assumed looking at the equivalent step in trans1.</p>\n<p>Lemma trans3 fails to prove the second step because<br>\nthe first step actually shows \"have b ≤ a\" and hence<br>\nthe \"...\" matches \"a\" rather than (what I assumed) \"b\".</p>\n<p>I think the issue is that \"a ≥ b\" is an /abbreviation/ that gets <br>\nreplaced by \"b ≤ a\"<br>\nand that is what the Isar chaining proof sees.</p>\n<p>The problem is that in the context I'm working in, I want to use <br>\nproofs that<br>\nare (sometimes long) chains of ≥ steps (which don't work as expected).<br>\nI know it is possible to reverse the proofs and use ≤, but in my <br>\ncontext<br>\nthat is not the style of presentation I desire.</p>\n<p>Is this really the intended behaviour of chained proofs for ≥ ?<br>\nIs there a way to do the chains of ≥ proofs?</p>\n<p>Thanks in advance<br>\nIan</p>\n<hr>\n<p>theory Scratch<br>\n   imports Main</p>\n<p>begin</p>\n<p>locale test = order<br>\nbegin</p>\n<p>lemma trans1:<br>\n   assumes x: \"c ≤ b\"<br>\n   assumes y: \"b = a\"<br>\n   shows \"c ≤ a\"<br>\nproof -<br>\n   have u: \"c ≤ b\"<br>\n     by (simp add: x)<br>\n   also have v: \"… = a\"<br>\n     by (simp add: y)<br>\n   show ?thesis<br>\n     using u v by auto<br>\nqed</p>\n<p>lemma trans2:<br>\n   assumes x: \"a ≥ b\"<br>\n   assumes y: \"a = c\"<br>\n   shows \"c ≥ b\"<br>\nproof -<br>\n   have u: \"a ≥ b\"<br>\n     by (simp add: x)<br>\n   moreover have v: \"… = c\"<br>\n     by (simp add: y)<br>\n   show ?thesis<br>\n     using u v by auto<br>\nqed</p>\n<p>lemma trans3:<br>\n   assumes x: \"a ≥ b\"<br>\n   assumes y: \"b ≥ c\"<br>\n   shows \"a ≥ c\"<br>\nproof -<br>\n   have \"a ≥ b\"<br>\n     by (simp add: x)<br>\n   moreover have \"… ≥ c\"<br>\n     sorry</p>\n<p>end</p>\n<p>-- <br>\nProfessor Ian Hayes<br>\nMail: School of Information Technology and Electrical Engineering,<br>\n      University of Queensland, Brisbane, Queensland  4072, Australia<br>\nCRICOS Provider No: 00025B<br>\nE-mail: <a href=\"mailto:Ian.Hayes@uq.edu.au\">Ian.Hayes@uq.edu.au</a><br>\nWork: (GMT+10 hours) +61 (7) 3365 2386 FAX: +61 (7) 3365 4999</p>\n</blockquote>\n</blockquote>\n</blockquote>\n</blockquote>",
        "id": 294821955,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661242563
    },
    {
        "content": "<p>From: Dominique Unruh &lt;<a href=\"mailto:unruh@ut.ee\">unruh@ut.ee</a>&gt;<br>\nHi,</p>\n<p>one trick how to fix a situation like this without decreasing <br>\nreadability is to write   (is \"... &gt;= _\")  after the have-command. Since <br>\nthe automatic binding of ... happens before the binding via \"is\", this <br>\nwill bind ... to the actual lhs of &gt;=. This way, you get the intuitive <br>\nmeaning of ... with only small syntactic overhead.</p>\n<p>Best wishes,<br>\nDominique.</p>",
        "id": 294821980,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661242574
    },
    {
        "content": "<p>From: Lukas Stevens &lt;lukas.stevens+isabelle-users@in.tum.de&gt;<br>\nI just reviewed this thread and played around with some of the suggested<br>\nworkarounds and encountered the following surprising behavior.</p>\n<p>lemma<br>\n  fixes a b c d :: int<br>\n  assumes \"d ≥ c\"<br>\n  assumes \"c ≥ b\"<br>\n  assumes \"b ≥ a\"<br>\n  shows \"d ≥ a\"<br>\nproof -<br>\n  note ‹a ≤ b›<br>\n  also note ‹b ≤ c›<br>\n  also have ‹… ≤ d› ― ‹Proof obligation: @{prop ‹b ≤ d›}› sorry<br>\n  finally show ?thesis sorry<br>\nqed</p>\n<p>lemma<br>\n  fixes a b c d :: int<br>\n  assumes \"a ≤ b\"<br>\n  assumes \"b ≤ c\"<br>\n  assumes \"c ≤ d\"<br>\n  shows \"a ≤ d\"<br>\nproof -<br>\n  note ‹a ≤ b›<br>\n  also note ‹b ≤ c›<br>\n  also have ‹… ≤ d› ― ‹Proof obligation: @{prop ‹d ≤ d›}› sorry<br>\n  finally show ?thesis sorry<br>\nqed</p>\n<p>The second proof is just like the first proof but with the direction of<br>\n≤ reversed. In the former one, the ellipsis seems to correspond to the<br>\nright-hand side of the initial note command (?). In the latter one, the<br>\nellipsis seems to correspond to the right-hand side of the goal a ≤ d.</p>\n<p>-- Lukas Stevens</p>",
        "id": 294823642,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661243357
    },
    {
        "content": "<p>From: Manuel Eberl &lt;<a href=\"mailto:eberlm@in.tum.de\">eberlm@in.tum.de</a>&gt;<br>\nIn both cases, the … refers to the right-hand side of the last \"assumes\"<br>\ncommand. The \"note\" does not change what \"…\" refers to at all.</p>\n<p>I do find that behaviour a bit unfortunate myself. A related problem is<br>\nthat when I show something like \"f ∈ O(g)\", then I would of course like<br>\nthe \"…\" to refer to the \"g\" and not the \"O(g)\". But I can live with it,<br>\nand you can always pattern match to get the behaviour you really want.</p>\n<p>Manuel</p>",
        "id": 294823827,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661243430
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nThat is a consequence of too many features stacking up over time, and not all<br>\ninteractions have been ironed out yet.</p>\n<p>You can replace \"note ‹prop›\" to \"have ‹prop› by fact\" to get the standard<br>\ndiscipline of binding the three dots.</p>\n<p>Makarius</p>",
        "id": 294823868,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661243454
    }
]