[
    {
        "content": "<p>From: Giuliano Losa &lt;<a href=\"mailto:giuliano.losa@epfl.ch\">giuliano.losa@epfl.ch</a>&gt;<br>\nHello,<br>\nthe following definition is interpreted in a confusing way:</p>\n<p>def ident :: \"'a set =&gt; ('a \\times 'a) set\"<br>\nwhere \"ident S = {(x,x) . x \\in S}\"</p>\n<p>the command \"thm ident_def\" yields<br>\nident ?S \\&lt;equiv&gt; {(xa, x). x \\&lt;in&gt; ?S}</p>\n<p>Should this be considered as a bug?</p>\n<p>Giuliano</p>",
        "id": 294155237,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660850951
    },
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\nNo, a feature. Patterns may not contain repeated variables.</p>\n<p>Tobias</p>",
        "id": 294155253,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660850959
    },
    {
        "content": "<p>From: Ramana Kumar &lt;<a href=\"mailto:rk436@cam.ac.uk\">rk436@cam.ac.uk</a>&gt;<br>\nIn case it's not obvious, you probably want something like \"ident S =<br>\n{(x,y). x \\in S \\and (x = y)}\".</p>",
        "id": 294155270,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660850966
    },
    {
        "content": "<p>From: Brian Huffman &lt;<a href=\"mailto:huffman@in.tum.de\">huffman@in.tum.de</a>&gt;<br>\nI think what you really want is \"ident S = {(x, x) | x. x \\&lt;in&gt; S}\".</p>\n<p>(This is actually a syntactic abbreviation for \"{y. \\&lt;exists&gt;x. y =<br>\n(x, x) \\&lt;and&gt; x \\&lt;in&gt; S}\".)</p>\n<ul>\n<li>Brian</li>\n</ul>",
        "id": 294155282,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660850973
    },
    {
        "content": "<p>From: Jonas Wagner &lt;<a href=\"mailto:jonas.wagner@epfl.ch\">jonas.wagner@epfl.ch</a>&gt;</p>\n<blockquote>\n<p>No, a feature. Patterns may not contain repeated variables.</p>\n</blockquote>\n<p>+1 vote for \"bug\".</p>\n<p>The fact that Patterns may not contain repeated variables is perfectly <br>\nfine. The fact that the first occurrence of a repeated variable is <br>\nsilently replaced by another variables is not fine.</p>\n<p>But that's just the option of an Isabelle Newbie who got his proof wrong <br>\ndue to a surprising feature ;)</p>\n<p>Best,<br>\nJonas</p>",
        "id": 294155307,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660850986
    },
    {
        "content": "<p>From: Brian Huffman &lt;<a href=\"mailto:huffman@in.tum.de\">huffman@in.tum.de</a>&gt;<br>\n+1 vote for \"feature\".</p>\n<p>Isabelle's treatment of bound variables is perfectly consistent with<br>\nmainstream functional programming languages like Haskell or ML:<br>\nFunction abstractions may shadow existing names.</p>\n<p>(ghci)<br>\nPrelude&gt; :t \\x -&gt; \\x -&gt; x<br>\n\\x -&gt; \\x -&gt; x :: t -&gt; t1 -&gt; t1</p>\n<p>(polyml)<br>\nfn x =&gt; fn x =&gt; x<br>\nval it = fn: 'a -&gt; 'b -&gt; 'b</p>\n<p>Isabelle's pretty printer renames such repeated bound variable names<br>\non the fly. This is a nice feature to improve readability:</p>\n<p>term \"%x x. x\"<br>\n\"%x xa. xa\" :: \"'a =&gt; 'b =&gt; 'b\"</p>\n<p>And it also prevents ambiguity, for example:</p>\n<p>lemma \"!!x. P x ==&gt; ALL x. Q x\"<br>\napply (rule allI)</p>\n<ol>\n<li>\"!!x xa. P x ==&gt; Q xa\"</li>\n</ol>\n<p>(In this case, \"!!x x. P x ==&gt; Q x\" would simply be wrong, so it is a<br>\nvery good thing that the renaming happens in this situation.)</p>\n<ul>\n<li>Brian</li>\n</ul>",
        "id": 294155325,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660850996
    },
    {
        "content": "<p>From: Tjark Weber &lt;<a href=\"mailto:webertj@in.tum.de\">webertj@in.tum.de</a>&gt;<br>\nOn Thu, 2012-04-05 at 11:25 +0200, Brian Huffman wrote:</p>\n<blockquote>\n<p>Isabelle's treatment of bound variables is perfectly consistent with<br>\nmainstream functional programming languages like Haskell or ML:<br>\nFunction abstractions may shadow existing names.</p>\n<p>(ghci)<br>\nPrelude&gt; :t \\x -&gt; \\x -&gt; x<br>\n\\x -&gt; \\x -&gt; x :: t -&gt; t1 -&gt; t1</p>\n<p>(polyml)<br>\nfn x =&gt; fn x =&gt; x<br>\nval it = fn: 'a -&gt; 'b -&gt; 'b</p>\n</blockquote>\n<p>True, but the original example was \"ident S = {(x,x) . x \\in S}\". Hence<br>\nI believe the following behavior to be more relevant:</p>\n<p>(polyml)</p>\n<blockquote>\n<p>fn (x,x) =&gt; x;<br>\nError-x has already been bound in this match Found near fn (x, x) =&gt; x<br>\nStatic Errors</p>\n</blockquote>\n<p>Best regards,<br>\nTjark</p>",
        "id": 294155392,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660851006
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nThis thread got split over two isabelle mailing lists for unknown reasons, <br>\nso I repeat my answer from isabelle-dev here once more:</p>\n<p>Things like %x x x x. x and fix x fix x fix x have \"x = x\" are perfectly<br>\n   legal and behave quite uniformly for many years, i.e. with little<br>\n   surprise to people who have got acquainted with Isabelle scoping rules.</p>\n<p>To make things even more simple for beginners, the Prover IDE markup<br>\n   protocol already indicates the internal scopes in the source text.  E.g.<br>\n   when using CONTROL/COMMAND with mouse clicks, one can explore the<br>\n   internal bindings.  It is only a small addition to the display engine to<br>\n   make variable scopes immediately visible in the source text, like<br>\n   Netbeans would do for Java for example when the user moves or hovers<br>\n   over the text.</p>\n<p>In contrast, lots of warning messages are old-school TTY technology, and<br>\n   in Proof General the channel for that gets easily overloaded so that the<br>\n   user is switching into SPAM mode.</p>\n<p>Jonas, since you are from EPFL you are probably familier with the Scala <br>\nscoping, which is often more harsh in forbidding plain nesting of scopes <br>\nthat would be just fine in the ML, HOL, Haskell tradition.  I find the <br>\nScala behaviour quite confusing at times.</p>\n<p>Anyway the IDE solution sketched above will make things easier for <br>\nbeginners without having to reconsider traditions that are established for <br>\ndecades in certain communities.</p>\n<p>Makarius</p>",
        "id": 294155399,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660851008
    },
    {
        "content": "<p>From: Brian Huffman &lt;<a href=\"mailto:huffman@in.tum.de\">huffman@in.tum.de</a>&gt;<br>\nGood point.</p>\n<p>So while \"Collect (split (%x x. x \\&lt;in&gt; S))\" is clearly valid input,<br>\nthe status of the equivalent-according-to-the-parser \"{(x, x). x \\&lt;in&gt;<br>\nS}\" is not so clear.</p>\n<p>It might be possible to set up an ML parse translation for tuple<br>\nabstractions (see section \"Tuple syntax\" in Product_Type.thy for how<br>\nthings are implemented now). The parse translation could produce a<br>\nsyntax error if any variable names are repeated.</p>\n<p>I'm not sure whether it would be worth the trouble to implement it,<br>\nthough, unless more people ask for it.</p>\n<ul>\n<li>Brian</li>\n</ul>",
        "id": 294155415,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660851015
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nChanging ML parse translations is always a very delicate process, and <br>\nactually ongoing for several years.  Instead of added new features, there <br>\nis presently an attempt to make case syntax conceptually sound, possibly <br>\nalso list comprehensions.</p>\n<p>This is motivated again by the IDE markup, because that reveals tiny <br>\nconceptual mishaps in the existing syntax.</p>\n<p>Makarius</p>",
        "id": 294155452,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660851027
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nJust some more fun with patterns in ML.</p>\n<p>This is nothing special beyond infixes and symbolic names:</p>\n<p>fun <strong> * </strong>* = <strong> + </strong>*</p>\n<p>Here are separate scopes for function vs. arguments:</p>\n<p>fun x x = x</p>\n<p>It actually makes some sense here:</p>\n<p>fun foo {foo, bar} = foo<br>\n   fun bar {foo, bar} = bar</p>\n<p>Makarius</p>",
        "id": 294155470,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660851033
    }
]