[
    {
        "content": "<p>From: Julian Brunner &lt;<a href=\"mailto:julianbrunner@gmail.com\">julianbrunner@gmail.com</a>&gt;<br>\nDear all,</p>\n<p>Isabelle will not contract the abbreviations introduced for locale<br>\ndefinitions when the locale is interpreted through a morphism other than<br>\nthe identity. This behavior is described in the following threads:</p>\n<p><a href=\"https://lists.cam.ac.uk/mailman/htdig/cl-isabelle-users/2011-September/msg00040.html\">https://lists.cam.ac.uk/mailman/htdig/cl-isabelle-users/2011-September/msg00040.html</a><br>\n<a href=\"https://lists.cam.ac.uk/mailman/htdig/cl-isabelle-users/2012-January/msg00029.html\">https://lists.cam.ac.uk/mailman/htdig/cl-isabelle-users/2012-January/msg00029.html</a></p>\n<p>The workaround that is proposed in these threads is to introduce additional<br>\nabbreviations after having interpreted the locale. In my formalization,<br>\nthis would result in so much boilerplate as to make the whole appproach<br>\nusing locales unusable. Now I'm wondering why this behavior was introduced<br>\nin the first place. Since there is no problem with expanding these<br>\nabbreviations, why would there be one with contracting them?</p>\n<p>It seems like the reason for the abbreviations not being contracted is that<br>\nthey use the \"internal\" print mode. Unfortunately, I was unable to find the<br>\nplace where the print mode is set on these abbreviations in order to do<br>\nmore experiments on this. So, before spending more time on this, I wanted<br>\nto ask what the original reasons for this behavor were and if it might be<br>\npossible to enable contraction of these abbreviations.</p>",
        "id": 294647964,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661164892
    },
    {
        "content": "<p>From: Andreas Lochbihler &lt;<a href=\"mailto:andreas.lochbihler@inf.ethz.ch\">andreas.lochbihler@inf.ethz.ch</a>&gt;<br>\nHi Julian,</p>\n<p>I also regularly suffer from these pretty-printing nightmares, but I vaguely remember a <br>\ndiscussion with Clemens Ballarin on the subject. IIRC the problem is that it is not clear <br>\nwhether collapsing the abbreviations terminates in all cases. Clemens has never showed me <br>\nan example where it actually happens, though.</p>\n<p>Yet, I can still think of difficult situations as as the following:</p>\n<p>locale foo =<br>\n   fixes f :: \"'a =&gt; 'a =&gt; bool\"<br>\n   and g :: \"'a =&gt; 'a =&gt; 'a =&gt; bool\"</p>\n<p>definition (in foo) test where \"test = f\"</p>\n<p>sublocale foo ⊆ f: foo \"%x y. f y x\" \"%x y z. g y z x\" .</p>\n<p>This sublocale declaration makes the locale subgraph cyclic, However, the round-up <br>\nalgorithm realises that if you go six times through the circle, the composed parameter <br>\ninstantiations are alpha-beta-eta-equivalent to f and g again, so it stops. That means <br>\nthat the sublocale command adds five copies of foo to itself. Now consider the situation <br>\nfor the abbreviations. We have</p>\n<p>local.test == foo.test f</p>\n<p>from the original definition. From the sublocale command, we would also get</p>\n<p>local.f.test == foo.test (%x y. f y x)<br>\n   local.f.f.test == foo.test f<br>\n   local.f.f.f.test == foo.test (%x y. f y x)<br>\n   local.f.f.f.f.test == foo.test f<br>\n   local.f.f.f.f.f.test == foo.test (%x y. f y x)</p>\n<p>Obviously, they overlap. So which one should be used by the pretty-printer?</p>\n<p>Andreas</p>",
        "id": 294647998,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661164911
    },
    {
        "content": "<p>From: Julian Brunner &lt;<a href=\"mailto:julianbrunner@gmail.com\">julianbrunner@gmail.com</a>&gt;<br>\nHi Andreas,</p>\n<p>Good call on the overlapping abbreviations, I did not consider this case.<br>\nHowever, the conflict already arises with the current implementation.<br>\nConsider the following:</p>\n<p>locale foo =<br>\n  fixes f :: \"'a =&gt; 'a =&gt; bool\"<br>\n  fixes g :: \"'a =&gt; 'a =&gt; 'a =&gt; bool\"<br>\nbegin</p>\n<p>definition test where \"test = f\"<br>\n  sublocale f!: foo f \"% x y z. g y z x\" by this</p>\n<p>end</p>\n<p>This generates the following abbreviations (they end up in the Consts<br>\nrecord in this order):</p>\n<p>f.test == foo.test f<br>\nf.f.test == foo.test f<br>\ntest == foo.test f</p>\n<p>Since 'test' only depends on the parameter f, which is interpreted under<br>\nthe identity morphism (eta contraction seems to matter here, so this does<br>\nnot happen with your original example), all of these abbreviations are set<br>\nup to be contracted before printing. In fact, 'test' is printed as 'f.test'<br>\n(presumably due to the order of the abbreviations in the Consts record).</p>\n<p>Given that these contraction conflicts are already a problem as it is, I do<br>\nnot think that it would make things significantly worse to allow<br>\ncontraction of abbreviations introduced via other morphisms (barring other<br>\nproblems like the one you discussed with Clemens Ballarin).</p>",
        "id": 294648072,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661164935
    },
    {
        "content": "<p>From: Andreas Lochbihler &lt;<a href=\"mailto:andreas.lochbihler@inf.ethz.ch\">andreas.lochbihler@inf.ethz.ch</a>&gt;<br>\nHi Julian,</p>\n<p>First of all, I would be very happy if you could solve this problem of missing <br>\ncontractions. Clemens has never showed me an example where folding of abbreviations would <br>\nlead to non-termination. And I do not know precisely how abbreviations and locales are <br>\nimplemented, so it is hard for me to decide whether something would lead to a problem. <br>\nNevertheless, here is another example:</p>\n<p>locale l = fixes f :: \"('a ⇒ 'a) ⇒ 'a ⇒ 'a\"<br>\ndefinition (in l) foo where \"foo ≡ f (%x. x)\"<br>\ninterpretation l \"id\" where \"<a href=\"http://l.foo\">l.foo</a> id == id (%x. x)\" sorry</p>\n<p>If the interpretation installs abbreviations which respect the rewrite morphism, then the <br>\nabbreviation reads as \"id (%x. x) == id (%x. x)\" which clearly loops. If it does not, then <br>\n\"id (%x. x)\" is always printed as \"foo\".  This might not be optimal, as the right-hand <br>\nsides can be arbitrary general terms that should remain the way they are.</p>\n<p>Andreas</p>",
        "id": 294648107,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661164954
    }
]