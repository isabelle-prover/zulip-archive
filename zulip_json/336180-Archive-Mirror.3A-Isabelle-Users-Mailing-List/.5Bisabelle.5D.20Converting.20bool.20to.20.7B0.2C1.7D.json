[
    {
        "content": "<p>From: Christoph LANGE &lt;<a href=\"mailto:c.lange@cs.bham.ac.uk\">c.lange@cs.bham.ac.uk</a>&gt;<br>\nDear Isabelle community,</p>\n<p>in the course of developing our auction theory toolbox (see previous <br>\nannouncement), several questions occurred.  Let me start with a trivial <br>\none, but harder ones will follow:</p>\n<p>Is there a built-in function that converts {False, True} to {0, 1}, i.e. <br>\nthat would do the job of \"if x then 1 else 0\"?</p>\n<p>A naïve search of the library source files for \"bool \\&lt;Rightarrow&gt; nat\" <br>\ndidn't show any useful results.</p>\n<p>BTW, is there a way of searching for definitions of a given type, <br>\nsimilar to find_theorems?</p>\n<p>Cheers, and thanks in advance,</p>\n<p>Christoph</p>",
        "id": 294224662,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660899345
    },
    {
        "content": "<p>From: Florian Haftmann &lt;<a href=\"mailto:florian.haftmann@informatik.tu-muenchen.de\">florian.haftmann@informatik.tu-muenchen.de</a>&gt;<br>\nHi Christoph,</p>\n<blockquote>\n<p>in the course of developing our auction theory toolbox (see previous<br>\nannouncement), several questions occurred.  Let me start with a trivial<br>\none, but harder ones will follow:</p>\n<p>Is there a built-in function that converts {False, True} to {0, 1}, i.e.<br>\nthat would do the job of \"if x then 1 else 0\"?</p>\n</blockquote>\n<p>No, there isn't (yet).  In Library/Bit.thy, there is an isomorphic type<br>\nof bits 0/1, which might be helpful in your case also.</p>\n<blockquote>\n<p>BTW, is there a way of searching for definitions of a given type,<br>\nsimilar to find_theorems?</p>\n</blockquote>\n<p>find_consts is your friend.</p>\n<p>Cheers,<br>\n    Florian<br>\n<a href=\"/user_uploads/14278/pMXJGB1yRW6p7pcIJG7eew7-/signature.asc\">signature.asc</a></p>",
        "id": 294224668,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660899352
    },
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\nAm 31/10/2012 20:07, schrieb Christoph LANGE:</p>\n<blockquote>\n<p>Dear Isabelle community,</p>\n<p>in the course of developing our auction theory toolbox (see previous<br>\nannouncement), several questions occurred.  Let me start with a trivial one, but<br>\nharder ones will follow:</p>\n<p>Is there a built-in function that converts {False, True} to {0, 1}, i.e. that<br>\nwould do the job of \"if x then 1 else 0\"?</p>\n</blockquote>\n<p>If you frequently want to use boolean values in arithmetic formulas it may help<br>\nto install a coercion from bool to nat (or possibly directly real):</p>\n<p>definition nat_of_bool :: \"bool =&gt; nat\" where<br>\n[code_unfold]: \"nat_of_bool b = (if b then 1 else 0)\"</p>\n<p>declare [[coercion \"nat_of_bool::bool=&gt;nat\"]]</p>\n<p>For example</p>\n<p>value \"True+ 1 = 2\"</p>\n<p>now yields True.</p>\n<p>Isabelle will insert nat_of_bool wherever it is needed. This is nice for input<br>\nbut the coercion becomes visible in the output (which could also be circumvented)</p>\n<p>Tobias</p>\n<blockquote>\n<p>A naïve search of the library source files for \"bool \\&lt;Rightarrow&gt; nat\" didn't<br>\nshow any useful results.</p>\n<p>BTW, is there a way of searching for definitions of a given type, similar to<br>\nfind_theorems?</p>\n<p>Cheers, and thanks in advance,</p>\n<p>Christoph<br>\n</p>\n</blockquote>",
        "id": 294227071,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660900498
    }
]