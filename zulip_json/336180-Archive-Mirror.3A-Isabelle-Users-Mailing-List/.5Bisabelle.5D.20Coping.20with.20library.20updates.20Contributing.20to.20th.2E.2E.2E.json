[
    {
        "content": "<p>From: Christoph LANGE &lt;<a href=\"mailto:math.semantic.web@gmail.com\">math.semantic.web@gmail.com</a>&gt;<br>\nDear Tobias, dear all,</p>\n<p>let me divert one aspect of our private conversation back to the list,<br>\nas it may be of general interest.</p>\n<p>You had pointed out that some of the lemmas in our *Utils.thy theories<br>\nat <a href=\"https://github.com/formare/auctions/tree/master/isabelle/Auction\">https://github.com/formare/auctions/tree/master/isabelle/Auction</a>,<br>\nwhich provide useful additions to library concepts, were redundant with<br>\nthe library.</p>\n<p>You said that recent jEdit versions, like ProofGeneral, would point this<br>\nout automatically.  Please excuse my stupid question, if it is stupid,<br>\nbut this probably only holds for the post-2013 development version.  In<br>\nIsabelle2013 I don't see any warnings displayed for such redundant<br>\nlemmas, but I would have to call \"solve_direct\" manually.  (So, @Tobias,<br>\nsorry for wasting your time with making you review redundant lemmas!)</p>\n<p>Some of the redundancies you'd pointed out (including<br>\nRelation.converse_mono) only exist in post-2013.</p>\n<p>But this makes me wonder:</p>\n<ol>\n<li>Should I switch to the development version?</li>\n<li>\n<p>What is the best way for a 3rd party library maintainer (which I<br>\nconsider myself) to cope with such improvements?</p>\n</li>\n<li>\n<p>So far I had been reluctant to do so, as I had considered myself a<br>\nmere end user.  I had been afraid of wasting time with bugs in the<br>\ndevelopment version, which I wouldn't understand as a non-expert, but<br>\nnow it seems that I'm reinventing library functionality that already<br>\nexists in the development version.</p>\n</li>\n<li>\n<p>We would like our formalisation to be reusable.  There are no other<br>\nusers so far, but we are advertising our library.  And we are preparing<br>\na submission of parts of it to the AFP.  All that suggests that our<br>\nlibrary should probably work with the last stable Isabelle release.  And<br>\nthat any functionality that's redundant with the latest development<br>\nversion should only be removed once the next Isabelle release is out.</p>\n</li>\n</ol>\n<p>What would you recommend?  Thanks for your advice!</p>\n<p>Christoph</p>",
        "id": 294247853,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660909627
    },
    {
        "content": "<p>From: René Neumann &lt;<a href=\"mailto:rene.neumann@in.tum.de\">rene.neumann@in.tum.de</a>&gt;<br>\nIn ProofGeneral at last (but probably also in jEdit), there is the<br>\nIsabelle setting \"Auto Solve Direct\" -- which has also been present in<br>\nIsabelle-2012 and -2013.</p>\n<ul>\n<li>René<br>\n<a href=\"/user_uploads/14278/UJc60axJivIa7iDzUVKg5yM5/smime.p7s\">smime.p7s</a></li>\n</ul>",
        "id": 294247906,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660909653
    },
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\nAm 17/09/2013 10:33, schrieb Christoph LANGE:</p>\n<blockquote>\n<p>Dear Tobias, dear all,</p>\n<p>let me divert one aspect of our private conversation back to the list,<br>\nas it may be of general interest.</p>\n<p>You had pointed out that some of the lemmas in our *Utils.thy theories<br>\nat <a href=\"https://github.com/formare/auctions/tree/master/isabelle/Auction\">https://github.com/formare/auctions/tree/master/isabelle/Auction</a>,<br>\nwhich provide useful additions to library concepts, were redundant with<br>\nthe library.</p>\n<p>You said that recent jEdit versions, like ProofGeneral, would point this<br>\nout automatically.  Please excuse my stupid question, if it is stupid,<br>\nbut this probably only holds for the post-2013 development version.  In<br>\nIsabelle2013 I don't see any warnings displayed for such redundant<br>\nlemmas, but I would have to call \"solve_direct\" manually.  (So, @Tobias,<br>\nsorry for wasting your time with making you review redundant lemmas!)</p>\n</blockquote>\n<p>I wasn't complaining. I did say that this was only added to jedit recently,<br>\nbeing unsure which version your are on.</p>\n<p>Clearly you should only ship a version of your theories that work with a release<br>\nversion of Isabelle. Putting your library into the AFP lets you have two<br>\nversions, release and development. We discussed that recently here:<br>\n<a href=\"https://lists.cam.ac.uk/pipermail/cl-isabelle-users/2013-September/msg00013.html\">https://lists.cam.ac.uk/pipermail/cl-isabelle-users/2013-September/msg00013.html</a></p>\n<p>In another project (CAVA) we decided to stick with the release version and I now<br>\nfeel it would have been better to update to the development version more frequently.</p>\n<p>Tobias</p>\n<blockquote>\n<p>Some of the redundancies you'd pointed out (including<br>\nRelation.converse_mono) only exist in post-2013.</p>\n<p>But this makes me wonder:</p>\n<ol>\n<li>Should I switch to the development version?</li>\n<li>\n<p>What is the best way for a 3rd party library maintainer (which I<br>\nconsider myself) to cope with such improvements?</p>\n</li>\n<li>\n<p>So far I had been reluctant to do so, as I had considered myself a<br>\nmere end user.  I had been afraid of wasting time with bugs in the<br>\ndevelopment version, which I wouldn't understand as a non-expert, but<br>\nnow it seems that I'm reinventing library functionality that already<br>\nexists in the development version.</p>\n</li>\n<li>\n<p>We would like our formalisation to be reusable.  There are no other<br>\nusers so far, but we are advertising our library.  And we are preparing<br>\na submission of parts of it to the AFP.  All that suggests that our<br>\nlibrary should probably work with the last stable Isabelle release.  And<br>\nthat any functionality that's redundant with the latest development<br>\nversion should only be removed once the next Isabelle release is out.</p>\n</li>\n</ol>\n<p>What would you recommend?  Thanks for your advice!</p>\n<p>Christoph<br>\n</p>\n</blockquote>",
        "id": 294247913,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660909655
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nOn Tue, 17 Sep 2013, Christoph LANGE wrote:</p>\n<blockquote>\n<p>You said that recent jEdit versions, like ProofGeneral, would point this <br>\nout automatically.</p>\n</blockquote>\n<p>Again an important official announcement about proper names:</p>\n<p>* \"jEdit\" is a sophisticated text editor written in Java, see also<br>\n<a href=\"http://www.jedit.org/\">http://www.jedit.org/</a></p>\n<p>* \"Isabelle/jEdit\" uses regular jEdit with some plugin and some<br>\n     outermost application wrapper to deliver an implementation of the<br>\n     idea of \"Prover IDE\" for Isabelle.</p>\n<p>So \"Isabelle/jEdit\" is the name of the product, not \"jEdit\".  Or do you <br>\ncall \"Proof General\" after its editor just \"Emacs\"?</p>\n<p>Since jEdit as a text editor is not as widely known as Emacs, I can <br>\nunderstand that people who get exposed to it for the first time via <br>\nIsabelle/jEdit then think the \"jEdit\" aspect would be sufficient to name <br>\nthe product.  Due to this potential of confusion, it is particularly <br>\nimportant to get the names right.</p>\n<p>\"jEdit\" means <a href=\"http://www.jedit.org/\">http://www.jedit.org/</a> and \"Isabelle/jEdit\" means the default <br>\nProver IDE of Isabelle.</p>\n<p>More deeply, the main functionality of Isabelle/jEdit is actually provided <br>\nby the Prover IDE infrastructure of Isabelle/Scala and its Isabelle/ML <br>\ncounterpart, which has replaced the old READ-EVAL-PRINT loop some years <br>\nago.  Thus other projects like Isabelle/Eclipse (from Newcastle) or Clide <br>\n(from Bremen) can benefit from many of its concepts, independently of the <br>\nIsabelle/jEdit front-end.</p>\n<p>When you say \"recent jEdit versions ... would point this out <br>\nautomatically\", it is actually the document-oriented prover infrastructure <br>\nof Isabelle PIDE that will support certain notions of \"asynchronous print <br>\nfunction\" and \"query operation\" natively in the coming Isabelle2013-1 <br>\nrelease.  On the surface this will give you spontaneous feedback from a <br>\nsuite of \"automatically tried\" tools, but there is much more behind it <br>\nthan a former quick-and-dirty implementation for Proof General done right.</p>\n<p>I do have to insist in careful terminology here, since these are <br>\nscientifically relevant steps forward in the general understanding of <br>\ninteractive theorem proving.  (People who don't follow this are welcome to <br>\ngo back to the HOL-Light TTY loop, CoqIDE, or even Proof General if they <br>\nenrol it its mailing list to help the last maintainers there to hold out.)</p>\n<blockquote>\n<p>But this makes me wonder:</p>\n<ol>\n<li>Should I switch to the development version?</li>\n</ol>\n</blockquote>\n<p>You should say \"a development version\", or \"some development version\" -- <br>\nthe latter in the sense of Hilber Choice in HOL (which is in constrast to <br>\ndefinite description from a singleton set).</p>\n<p>Everybody is welcome to test-drive Isabelle repository snapshots at any <br>\ntime, but one needs to develop a sense what a proper release is and what <br>\nan arbitrary snapshot is.</p>\n<p>Presently we are getting close to release candidates for Isabelle2013-1, <br>\nso joining now on isabelle-dev you will participate in sorting out the <br>\nremaining problems, until Isabelle2013-1-RC1 ... RCn (n approximately 4) <br>\nbecome available for public testing in October / November 2013 (which will <br>\nbe again on isabelle-users, not isabelle-dev.)</p>\n<p>Note that I keep pointing out the difference of proper releases versus <br>\narbitrary snapshots, because the very idea of software releases is <br>\nseriously endangered in recent years.  We see that in particular with <br>\nLinux distributions, where the noisy masses are demanding more and more <br>\n\"rolling releases\" to get latest things more quickly (including latest <br>\nproblems).  That has done great harm to many Linux distributions, even <br>\nUbuntu, and many of its bundled applications.  The pressure to produce <br>\nthings ever faster leads to a continous decline of software quality -- it <br>\nis just impossible to make a system that is \"always on\" stable and robust <br>\nfor serious applications.</p>\n<p>Testing Linux distributions for the coming Isabelle2013-1, I've already <br>\nreached a new level of desparation: not just Fedora again, but also plain <br>\nUbuntu 13.04, which put my nicely working 12.04 LTS laptop into a totally <br>\nunstable system after update; and this is not even 13.10 beta, just <br>\n\"stable\" 13.04.  This is getting close to Windows 95 quality -- and <br>\nWindows 8 is actually not too bad these days.</p>\n<blockquote>\n<ol start=\"2\">\n<li>What is the best way for a 3rd party library maintainer (which I<br>\nconsider myself) to cope with such improvements?</li>\n</ol>\n</blockquote>\n<p>That is a question of somewhat different dimension.  AFP already does a <br>\npretty good job to absorb many \"library\" things.  Its content can grow for <br>\na given, fixed Isabelle release. The AFP editors and contributors need to <br>\ndevelop this further over the years.</p>\n<p>The key question right now and probably the start of this thread, is what <br>\nis the relation of adhoc additions to the core libraries of main <br>\nIsabelle/HOL vs. AFP.  Only then you have to cope with arbitrary <br>\nrepository snapshots.</p>\n<p>Makarius</p>",
        "id": 294248031,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660909692
    }
]