[
    {
        "content": "<p>From: Lars Hupel &lt;<a href=\"mailto:hupel@in.tum.de\">hupel@in.tum.de</a>&gt;<br>\nDear list,</p>\n<p>I'm currently working on enhanced tracing capabilities in the<br>\nsimplifier, and as such implement a capability to set \"term<br>\nbreakpoints\". The idea is that the user can specify a term pattern, and<br>\nif that pattern occurs in a simplification step, certain actions are<br>\ntriggered.</p>\n<p>To declare a breakpoint, I'd like to have a command (could also be an<br>\nattribute, but that is not important at this point) which works in proof<br>\nmode and parses a specified term and adds it to an internal data<br>\nstructure. The usual use case could be something like</p>\n<p>have \"....\"<br>\n    using [[break_term \"?x &gt; 0\"]]</p>\n<p>The problem is how to parse the term. A naive use of <code>Syntax.read_term</code><br>\nfails because <code>?x</code> is an unknown schematic variable. On the other hand,<br>\nthe @{cpat} antiquotation which seems like a good fit handles already<br>\nexisting schematic variables not quite correctly:</p>\n<p>notepad<br>\nbegin<br>\n  let ?x = 0<br>\n  ML_prf{*<br>\n    @{cpat \"?x &gt; ?y\"}<br>\n    (* produces:   <code>val it = \"?y &lt; ?x\": cterm</code> *)<br>\n    (* instead of: <code>val it = \"?y &lt; 0\": cterm</code>  *)<br>\n  *}<br>\nend</p>\n<p>To summarize the constraints: I'd like to have a <code>Proof.context</code>-aware<br>\nterm parsing, which works correctly for existing schematic and locally<br>\nfixed variables. Lars Noschinski also pointed out that care needs to be<br>\ntaken of these two different kinds of fixed variables:</p>\n<p>notepad begin<br>\n   { have P sorry } note A = this<br>\n   { fix P have P sorry } note B = this<br>\nend</p>\n<p>Regards<br>\nLars</p>",
        "id": 294243378,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660907925
    },
    {
        "content": "<p>From: Lars Noschinski &lt;<a href=\"mailto:noschinl@in.tum.de\">noschinl@in.tum.de</a>&gt;<br>\nThese are two separate issues: if we want to use schematic variables <br>\nas\"holes\" in the breakpoint, we need a method, whichv handles both bound <br>\nand unbound schematic variables.</p>\n<p>If on the other hand we want to use free variables for the holes then <br>\nthere is this issue which variables are too be generalized.</p>\n<p>-- Lars</p>",
        "id": 294243513,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660907992
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nThe usual way to do the latter is to specify the \"eigen context\" <br>\nexcplicitly via some 'for' specification.</p>\n<p>The general scheme looks like this:</p>\n<p>foobar for x y z</p>\n<p>So you augment the local context by additional fixes, read/process foobar <br>\n(whatever that is exactly), and export the result into the original <br>\ncontext.  Thus there will be certain new schematic variables originating <br>\nfrom eigen-variables x y z.  This is similar to Pure quantification<br>\n!!x y z. foobar within the language of propositions, but works for <br>\narbitrary things within some Proof.context.</p>\n<p>See for example the method \"ind_cases\" in Isabelle/HOL.  (Note that in <br>\nIsabelle/jEdit you can hover-click over some proof text that uses it, to <br>\nget quickly to the ML definition of it.  Or you say 'print_methods' and <br>\nhover-click over \"ind_cases\" in its output.)</p>\n<p>Makarius</p>",
        "id": 294243673,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660908047
    }
]