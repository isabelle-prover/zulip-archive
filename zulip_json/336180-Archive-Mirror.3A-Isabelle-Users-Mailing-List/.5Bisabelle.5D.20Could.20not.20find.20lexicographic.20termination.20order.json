[
    {
        "content": "<p>From: Artur Gomes &lt;<a href=\"mailto:gomesa@tcd.ie\">gomesa@tcd.ie</a>&gt;<br>\nHi there,</p>\n<p>I've seen a few emails in this list's history, sent a couple years ago<br>\nregarding lexicographic termination order whilst using fun definitions in<br>\nIsabelle, but I couldn't find what I was looking for.</p>\n<p>I'm implementing a Haskell application that transforms a few constructs<br>\nover an AST defined by myself. But I'm doing it recursively. The code is<br>\ntranslated with Haskabelle. I'd like to understand what is the<br>\nlexicographic termination order means as a way to evaluate my code.</p>\n<p>Another question: is there any difference regarding proofs of lemmas<br>\ninvolving a function defined as \"fun\" or \"function\" or even \"function<br>\n(sequential)\"?</p>\n<p>I'm following the \"Defining Recursive Functions in Isabelle/HOL\" material<br>\n(from Isabelle's pdfs), and I went from \"fun\" to \"function (sequential)\"<br>\nand \"by pat_completeness auto\", but could't find termination with<br>\n\"lexicographic_order\".</p>\n<p>I'm really curious about this lexicographic termination, if there's<br>\nanything I could do in order to \"fix\" (if possible). That would probably<br>\nhelp me to lear more about my coding skills or at least to point out if the<br>\ndesired result of my code is being implemented reasonably.</p>\n<p>Moreover, what I'm expecting from Isabelle is to prove that my<br>\nimplementation (in Haskell) is equivalent to someone else's theoretical<br>\nwork. I'll probably be dealing with structural induction and recursion. If<br>\nanyone has any previous experience with this kind of work, can I ask you<br>\nfor some suggestions and background material?</p>\n<p>Best regards,</p>",
        "id": 294704594,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661180276
    },
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\nMaybe this paper helps:</p>\n<p>Lukas Bulwahn, Alexander Krauss, Tobias Nipkow.<br>\nFinding Lexicographic Orders for Termination Proofs in Isabelle/HOL<br>\n<a href=\"http://www.in.tum.de/~nipkow/pubs/tphols07.html\">http://www.in.tum.de/~nipkow/pubs/tphols07.html</a></p>\n<p>Tobias<br>\n<a href=\"/user_uploads/14278/EmSv41zd7YY_YOPmNuZ-oxqZ/smime.p7s\">smime.p7s</a></p>",
        "id": 294704674,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661180286
    },
    {
        "content": "<p>From: Lars Hupel &lt;<a href=\"mailto:hupel@in.tum.de\">hupel@in.tum.de</a>&gt;<br>\nHi Artur,</p>\n<blockquote>\n<p>Another question: is there any difference regarding proofs of lemmas<br>\ninvolving a function defined as \"fun\" or \"function\" or even \"function<br>\n(sequential)\"?</p>\n</blockquote>\n<p>as long as you prove termination after defining a function with<br>\n\"function\", the resulting simp and induct rules will be identical to<br>\nwhen you use \"fun\" (which proves termination automatically).</p>\n<p>(NB, unless you now what you're doing, avoid plain \"function\" without<br>\n\"(sequential)\".)</p>\n<blockquote>\n<p>I'm following the \"Defining Recursive Functions in Isabelle/HOL\" material<br>\n(from Isabelle's pdfs), and I went from \"fun\" to \"function (sequential)\"<br>\nand \"by pat_completeness auto\", but could't find termination with<br>\n\"lexicographic_order\".</p>\n</blockquote>\n<p>Could you show us the function where the function package can't<br>\nautomatically prove termination?</p>\n<p>Cheers<br>\nLars</p>",
        "id": 294704690,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661180290
    },
    {
        "content": "<p>From: Artur Gomes &lt;<a href=\"mailto:gomesa@tcd.ie\">gomesa@tcd.ie</a>&gt;<br>\nHi there,</p>\n<p>Thank you all for the replies. I'm attaching a minimal example<br>\nwhere termination isn't automatically proved.</p>\n<p>Cheers,<br>\n<a href=\"/user_uploads/14278/1lX67IYAq_vfJ9IX_DsEFYVF/MinimalExample.thy\">MinimalExample.thy</a><br>\n<a href=\"/user_uploads/14278/WDi4GrrKrjy6EwWLnUnX-rRP/Prelude.thy\">Prelude.thy</a></p>",
        "id": 294704721,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661180303
    },
    {
        "content": "<p>From: Christian Sternagel &lt;<a href=\"mailto:c.sternagel@gmail.com\">c.sternagel@gmail.com</a>&gt;<br>\nHi Artur,</p>\n<p>I did not have a close look and thus do not know what your functions are<br>\nsupposed to do.</p>\n<p>Anyway, your current definition does not terminate. Consider the<br>\nfollowing call sequence, where \"c\" is not of the shape \"ACom d Nil\":</p>\n<p>transf_MAct (ActCom c a)<br>\n  ~&gt; myfun1 transf_MAct c a<br>\n  ~&gt; transf_MAct (ActCom c a)</p>\n<p>Even if this is solved (e.g., by dropping \"f\" from the second case of<br>\n\"myfun1\") you will have to look into what is called \"congruence rules\"<br>\n(see the documentation of the function definition package) in order to<br>\nhandle the recursive call in the second case of \"transf_MAct\".</p>\n<p>hope this helps,</p>\n<p>chris</p>",
        "id": 294704747,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661180311
    }
]