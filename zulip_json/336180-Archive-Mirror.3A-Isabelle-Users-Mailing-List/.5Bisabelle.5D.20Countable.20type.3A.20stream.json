[
    {
        "content": "<p>From: \"Roger H.\" &lt;<a href=\"mailto:s57076@hotmail.com\">s57076@hotmail.com</a>&gt;<br>\nHello,</p>\n<p>thank you Rene and Andreas for the help with the countable datatype, it works for a random type color.</p>\n<p>Now my last problem is to show that the datatype  --- 'a stream --- is countable.</p>\n<p>Stream is a package in the FOCUS library and is smth defined with the HOLCF  \"domain\" construct and resembles</p>\n<p>the lists in Haskell. To show now:</p>\n<p>instance stream :: (countable) countable<br>\nby.... ?</p>\n<p>can you help me?</p>\n<p>Many thanks!</p>",
        "id": 294241115,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660907015
    },
    {
        "content": "<p>From: René Thiemann &lt;<a href=\"mailto:rene.thiemann@uibk.ac.at\">rene.thiemann@uibk.ac.at</a>&gt;<br>\nDear Roger,</p>\n<p>It definitely is not possible using the tactic mentioned by Andreas (which is based on<br>\nhow \"datatype\"s are constructed by the datatype-package) and thus, also not by the wrapper<br>\nthat makes use of this tactic in the \"deriving\" package.</p>\n<p>So far I have never worked with HOLCF, but I just wondered whether you are sure that <br>\nstream really is countable: If it can model infinite lists (Haskell lists), then most <br>\nlikely the set of all \"bool stream\"s already can encode the real interval [0,1] which is <br>\nuncountable.</p>\n<p>Best regards,<br>\nRené</p>",
        "id": 294241125,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660907022
    },
    {
        "content": "<p>From: Brian Huffman &lt;<a href=\"mailto:huffman@in.tum.de\">huffman@in.tum.de</a>&gt;<br>\nRené is right: The HOLCF stream type includes infinite lists and is<br>\ntherefore uncountable (at least if the element type has cardinality &gt;<br>\n1).</p>\n<ul>\n<li>Brian</li>\n</ul>",
        "id": 294241159,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660907035
    }
]