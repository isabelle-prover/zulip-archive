[
    {
        "content": "<p>From: Achermann  Reto &lt;<a href=\"mailto:reto.achermann@inf.ethz.ch\">reto.achermann@inf.ethz.ch</a>&gt;<br>\nHi,</p>\n<p>We are using ML in a project where we need to create a locale in HOL from ML code. We managed to create the locale (local_theory) using Expression.add_locale_cmd including any assumptions we defined in ML.</p>\n<p>As a next step we would like to create a theorem from ML,  in the end something equivalent to this should be defined in ML:</p>\n<p>locale MyLocale =<br>\n  fixes S::\"nat set\"<br>\nbegin</p>\n<p>lemma foo:<br>\n  \"A ==&gt; (A ==&gt; B) ==&gt; B\"<br>\n  by(auto)</p>\n<p>end</p>\n<p>We tried using Local_Theory.note with the Goal or Thm structures, but apart from trivial True ==&gt; True there is not much success. Moreover, the example (3.7 Theorems) in the cookbook doesn't seem to work with 'Illegal fixed variable: \"P\"'</p>\n<p>I'm thankful for any pointers to examples or descriptions on how to add/define a lemma/theorem inside a locale from an ML file.</p>\n<p>Thanks,<br>\n-- Reto</p>",
        "id": 294750282,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661195164
    },
    {
        "content": "<p>From: Achermann  Reto &lt;<a href=\"mailto:reto.achermann@inf.ethz.ch\">reto.achermann@inf.ethz.ch</a>&gt;<br>\nHi Thomas,</p>\n<p>thanks a lot for your pointers. I've managed to create a few theorems -- with the sorry goal for now.</p>\n<p>When I try to construct a datatype defined in HOL, I've got an undefined constant error in ML.</p>\n<p>What's the best approach in defining data types for the interoperability between HOL and ML?<br>\nHow can they be referred to directly?</p>\n<p>Scratch.thy:<br>\n datatype Foo = Bar string</p>\n<p>myml.ML:<br>\n ? Scratch.Bar \"hello\"</p>\n<p>Thanks,</p>\n<p>-- Reto</p>",
        "id": 294751886,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661195784
    },
    {
        "content": "<p>From: Florian Haftmann &lt;<a href=\"mailto:florian.haftmann@informatik.tu-muenchen.de\">florian.haftmann@informatik.tu-muenchen.de</a>&gt;<br>\nHi Reto,</p>\n<p>I have no idea what your overall application is, but I would infer from<br>\nyour question »as it is« that it aims towards how to interface between<br>\ncode generated from HOL and Isabelle/ML.</p>\n<p>There is already substantial support for that use case, see particulary<br>\nthe antiquotations @{code …} and various @{computation* …}.  See the<br>\ntutorial on code generation for details.</p>\n<p>Note that if you are interested to generate native Isabelle/ML strings<br>\nyou should adhere to type String.literal rather than string (the details<br>\nare delicate due to different notions of »string« in different target<br>\nlanguages).</p>\n<p>Hope this helps in the next steps,<br>\n    Florian<br>\n<a href=\"/user_uploads/14278/txliJLgcFzbKBktiaa4t6j0T/signature.asc\">signature.asc</a></p>",
        "id": 294751902,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661195791
    },
    {
        "content": "<p>From: Achermann  Reto &lt;<a href=\"mailto:reto.achermann@inf.ethz.ch\">reto.achermann@inf.ethz.ch</a>&gt;<br>\nHi Florian,</p>\n<p>Thank you for your reply. Let me try to give some more context.</p>\n<p>So far, I managed to create a locale, and inside this locale a theorem using</p>\n<h1>Goal.prove ctxt vars asms prop auto_tac</h1>\n<h1>where prop =  @{prop \"A ⟹ (A⟹B) ⟹ (B⟹P) ⟹ P\"}</h1>\n<p>print_theorems shows:</p>\n<h1>MyL.foo_0: MyL ?st ⟹ ?A ⟹ (?A ⟹ ?B) ⟹ (?B ⟹ ?P) ⟹ ?P</h1>\n<p>which seems good to me, and which is what I want to acheive.</p>\n<p>Now, I'd like to use my own datatype in this lemma e.g.</p>\n<h1>datatype MyT = MyType string</h1>\n<h1>lemma foobar : \"MyType t ∈ st ⟹ A ⟹ (A⟹B) ⟹ (B⟹P) ⟹ P</h1>\n<p>Which works well from within a Theory, but I want to create this lemma from my ML code using the datatype MyT  which has been defined in a Theory file.</p>\n<h1>Goal.prove ctxt vars asms prop auto_tac</h1>\n<h1>where prop =  @{prop \"MyType t ∈ st ⟹ A ⟹ (A⟹B) ⟹ (B⟹P) ⟹ P\"}</h1>\n<p>Which results in an error: Illegal fixed variable: \"MyType\"</p>\n<p>Is the use of the antiquotations @{prop } actually the right way to achieve this?</p>\n<p>Thanks,<br>\n -- Reto</p>",
        "id": 294752016,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661195840
    },
    {
        "content": "<p>From: Thomas Sewell &lt;<a href=\"mailto:sewell@chalmers.se\">sewell@chalmers.se</a>&gt;<br>\nHi Reto.</p>\n<p>In some sense you've done the difficult parts first. Using the ML interface to manipulate locale elements is a bit technical, with lots of elements to understand.</p>\n<p>I think that proving a theorem should be easier. Essentially, try to make sense of Goal.prove. At its core, it takes a term (goal) to be proven and a tactic (proof procedure) to do it, and produces a theorem. Most proof methods have corresponding tactics available in ML, for instance \"by auto\" is connected to \"Clasimp.auto_tac\".</p>\n<p>The ML interface for standard tactics and composition mechanisms is mostly found in \"src/Pure/tactic.ML\" and \"src/Pure/tactical.ML\", and I find those parts of the system a little easier to find your way around than some others. Good luck with it.</p>\n<p>Cheers,</p>\n<p>Thomas.</p>",
        "id": 294752145,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661195882
    },
    {
        "content": "<p>From: Florian Haftmann &lt;<a href=\"mailto:florian.haftmann@informatik.tu-muenchen.de\">florian.haftmann@informatik.tu-muenchen.de</a>&gt;<br>\nHi Reto,</p>\n<p>note that antiquotations are resolved <em>statically</em> when processing an<br>\nIsabelle/ML block, hence I guess the issue is that you make a reference<br>\nto a symbol which is not yet present when the Isabelle/ML is parsed.</p>\n<p>I do not know what your application context is, but if you are plumbing<br>\nIsabelle/ML pieces in a theory file (which is usually a good starting<br>\npoint for experimentation), it is sufficient to have the antiquotation<br>\nin question in a separate Isabelle/ML block.</p>\n<p>Cheers,<br>\n    Florian<br>\n<a href=\"/user_uploads/14278/zuUSQ44O3Esrj45bgWsKcKm0/signature.asc\">signature.asc</a></p>",
        "id": 294752302,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661195907
    },
    {
        "content": "<p>From: Achermann  Reto &lt;<a href=\"mailto:reto.achermann@inf.ethz.ch\">reto.achermann@inf.ethz.ch</a>&gt;<br>\nHi Florian,</p>\n<p>Thank you for your e-mail.</p>\n<p>I think you the issue you pointed out might be the cause of the problem. I managed to get something going by separating the process into multiple steps. Creating a locale and proving theorems at the same time, while referring to locale state seem to have caused some issues there.</p>\n<p>In the end, Syntax.read_props was also helpful to create the props.</p>\n<p>-- Reto</p>",
        "id": 294752312,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661195913
    }
]