[
    {
        "content": "<p>From: Andreas Lochbihler &lt;<a href=\"mailto:andreas.lochbihler@inf.ethz.ch\">andreas.lochbihler@inf.ethz.ch</a>&gt;<br>\nDear list,</p>\n<p>For Haskell code generation, I try to map some of my Isabelle types and definitions to <br>\nHaskell types and functions as described in the code generator tutorial. As these Haskell <br>\ntypes and functions are not imported automatically in the generated modules, I follow the <br>\nusual way of rebinding them in a separate code_include module as follows:</p>\n<p>code_include Haskell MyModule {*<br>\nimport qualified &lt;Haskell-Module&gt;;<br>\ntype MyType = &lt;Haskell-Module&gt;.MyType<br>\nmyFun = &lt;Haskell-Module&gt;.myFun<br>\n*}<br>\ncode_reserved Haskell MyModule</p>\n<p>code_type my_type (Haskell \"MyModule.MyType\")<br>\ncode_const my_fun (Haskell \"MyModule.myFun\")</p>\n<p>This works well except for one case: datatype constructors that the Haskell module exports<br>\nMy definition of a datatype in Isabelle is the same as the definition in Haskell, so I <br>\nwould like to map it directly to Haskell's. However, I cannot rebind constructors in <br>\nHaskell and code_include does not allow me to specify module reexports such that the <br>\nimported datatype and its constructors become available.</p>\n<p>I have seen that such imports are hard-coded for the HOL types bool and list in <br>\nsrc/Tools/Code/code_haskell.ML, but I actually don't want to hack my Isabelle sources <br>\nwhenever I need to include another module. Is there currently any other way to achieve <br>\nwhat I want?</p>\n<p>If not, I'd also be willing to extend the code generator. It would suffice if one can <br>\ndeclare globally that some import line is to be added to every generated module.</p>\n<p>Best,<br>\nAndreas</p>",
        "id": 294243771,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660908090
    }
]