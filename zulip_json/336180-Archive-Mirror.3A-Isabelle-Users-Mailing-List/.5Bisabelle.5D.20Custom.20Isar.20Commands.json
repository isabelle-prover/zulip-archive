[
    {
        "content": "<p>From: Matthew &lt;<a href=\"mailto:superuser@mattweidner.com\">superuser@mattweidner.com</a>&gt;<br>\nIn the first step of building an automatic tool, I am trying to set up<br>\nan Isar-level command, following the example of the Nitpick sources.<br>\nHowever, I am having a problem getting Isar to \"see\" the command.<br>\nHere is an utterly simplified version, based on the Nitpick sources.</p>\n<p>File <a href=\"http://test.ml\">test.ml</a></p>\n<hr>\n<p>signature TEST =<br>\nsig<br>\nend</p>\n<p>structure Test : TEST =<br>\nstruct</p>\n<p>fun test_function a =<br>\n  writeln( \"test function called\" )<br>\n  |&gt; K(K(Toplevel.empty),a)</p>\n<p>fun test_params_function a =<br>\n  writeln( \"test params function called\" )<br>\n  |&gt; K(K(Toplevel.empty),a)</p>\n<p>val _ = Outer_Syntax.improper_command \"test\"<br>\n            \"test the Outer_Syntax.improper_command function\"<br>\n            Keyword.diag test_function<br>\nval _ = Outer_Syntax.command \"test_params\"<br>\n            \"test the Outer_Syntax.command function\"<br>\n            Keyword.thy_decl test_params_function</p>\n<p>end</p>\n<hr>\n<p>End file <a href=\"http://test.ml\">test.ml</a></p>\n<p>As far as I can tell, the following Isar code should load the commands<br>\n\"test\" and \"test_params\" into Isar's syntax:</p>\n<p>theory Scratch<br>\nimports Main<br>\nuses (\"<a href=\"http://test.ml\">test.ml</a>\")<br>\nbegin</p>\n<p>use \"<a href=\"http://test.ml\">test.ml</a>\"</p>\n<p>However, if I next type test or test_params and try to process it,<br>\nProofGeneral will protest that it cannot find any complete commands to<br>\nprocess.<br>\nWhat am I doing wrong here?</p>\n<p>Thanks,<br>\nMatthew Weidner</p>",
        "id": 294146096,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660847549
    },
    {
        "content": "<p>From: Lukas Bulwahn &lt;<a href=\"mailto:bulwahn@in.tum.de\">bulwahn@in.tum.de</a>&gt;<br>\nHello Matthew,</p>\n<p>the details how to set up a command properly are explained in great <br>\ndetail in \"The Isabelle Cookbook\" <br>\n(<a href=\"http://isabelle.in.tum.de/nominal/activities/idp/\">http://isabelle.in.tum.de/nominal/activities/idp/</a>) in chapter 5.8 (page <br>\n98 ff.)</p>\n<p>Hope this helps.</p>\n<p>Lukas</p>",
        "id": 294146110,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660847555
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nHere are some general hints:</p>\n<p>* Isabelle/ML files should always have an .ML extension, not .ml or .sml</p>\n<p>* Small ML things are more easily develepd directly in ML {* ... *}<br>\n     chunks within a theory.</p>\n<p>* Proof General requires commands declared statically in a keyword<br>\n     file.  It was already pointed out that the cookbook by Christian Urban<br>\n     provides some hints on that.</p>\n<p>* The Isabelle/jEdit Prover IDE, which is particulaly nice for ML<br>\n     development (as of Isabelle2011-1), requires some trickery though<br>\n     to make it accept newly created Isar commands dynamically at runtime.</p>\n<p>* K(K(Toplevel.empty),a) is an odd way to make an outer parser that<br>\n     produces an Isar toplevel transition.  Where did you see the example?</p>\n<p>Here is my version of your test.  It imitates some of the basic print <br>\ncommands in ~~/src/Pure/Isar/isar_syn.ML (the file where the main <br>\nIsabelle/Pure commands are defined):</p>\n<p>ML {*</p>\n<p>val _ =<br>\n   Outer_Syntax.improper_command \"test\" \"test command\" Keyword.diag<br>\n     (Scan.succeed<br>\n       (Toplevel.no_timing o Toplevel.imperative (fn () =&gt; writeln \"test\")));</p>\n<p>*}</p>\n<p>Above I have inlined the parser expression and the construction of the <br>\ntoplevel transaction into the command definition.  This is more robust <br>\nwrt. type inference issues than a bottom-up sequence of auxiliary building <br>\nblocks like test_function above.  (That form was preferred in a time where <br>\nPoly/ML produced very bad type error messages for combinator expressions.)</p>\n<p>Makarius</p>",
        "id": 294146129,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660847561
    },
    {
        "content": "<p>From: Christian Urban &lt;<a href=\"mailto:urbanc@in.tum.de\">urbanc@in.tum.de</a>&gt;<br>\nHi,</p>\n<p>Makarius writes:</p>\n<blockquote>\n<p>* The Isabelle/jEdit Prover IDE, which is particulaly nice for ML<br>\n     development (as of Isabelle2011-1), requires some trickery though<br>\n     to make it accept newly created Isar commands dynamically at runtime.</p>\n</blockquote>\n<p>Out of interest, how does this trickery work concretely?</p>\n<p>Thanks,<br>\nChristian</p>",
        "id": 294146147,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660847567
    },
    {
        "content": "<p>From: Holger Gast &lt;<a href=\"mailto:gast@informatik.uni-tuebingen.de\">gast@informatik.uni-tuebingen.de</a>&gt;<br>\nDear Matthew,</p>\n<p>You can always use I3P (<a href=\"http://www-pu.informatik.uni-tuebingen.de/i3p/\">http://www-pu.informatik.uni-tuebingen.de/i3p/</a>).<br>\nBesides being fast and extensible, it also handles dynamically defined<br>\ncommands.</p>\n<p>BTW, as for the previous Isabelle releases,<br>\nthe driver for Isabelle2011-1 is ready and tested.<br>\nAlso, following several requests, I have made the development<br>\nrepository public (see web-page).</p>",
        "id": 294146294,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660847620
    }
]