[
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nOn Thu, 4 Feb 2016, Andreas Lochbihler wrote:</p>\n<blockquote>\n<p>I will only need them inside this particular lemma, so it makes sense to <br>\nprove them there.</p>\n</blockquote>\n<p>How about using \"context begin ... end\" around the lemma, and establish <br>\nthe rule as \"private lemma Ψ_cases: fixes x obtains ...\" before it? (Minor <br>\ndisadvantage: the internal full name still needs to be unique, because I <br>\ndid not manage to revisit that open question from the last release.)</p>\n<blockquote>\n<p>{ fix x :: \"('v + 'v) option\"<br>\n    consider \"x = None\" | y where \"x = Some (Inl y)\" | y where \"x = Some<br>\n    (Inr y)\"<br>\n      by pat_completeness }<br>\n  note Ψ_cases = this[case_names None Inl Inr]</p>\n<p>Is there any way write this more nicely? I'd like to (in increasing <br>\nimportance)<br>\n(i) using note to give a name to the rule andblock<br>\n(ii) avoid the boilerplate with opening a proof<br>\n(iii) declaring the case names with the cases in consider.</p>\n</blockquote>\n<p>Compact eigen-context notation is nice for small things, but it still <br>\nneeds to be seen how far it can be stretched, before it all becomes a bit <br>\nodd.  Note that the quasi-disjunction form binds weakly, so a 'for' behind <br>\nit would refer to each case individually.</p>\n<p>The case names can be declared with round parentheses as usual (like in <br>\n'obtains' or 'obtain'), but they get lost in the export of the proof block <br>\n{ ... }.  In full generality, export operations can disrupt the meaning of <br>\nsuch \"tags\", so they are usually not preserved.</p>\n<p>Makarius</p>",
        "id": 294668263,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661172542
    },
    {
        "content": "<p>From: Andreas Lochbihler &lt;<a href=\"mailto:andreas.lochbihler@inf.ethz.ch\">andreas.lochbihler@inf.ethz.ch</a>&gt;<br>\nDear Makarius,</p>\n<p>Indeed, this is a nice possibility for the given lemma and works in most of my cases. In a <br>\nfew, however, it fails, because some cases also include locally fixed parameters, as in</p>\n<p>fix a<br>\n   { fix x<br>\n     consider \"x = Some a\" | y where \"x = Some y\" \"y ~= a\" | \"x = None\" ... }</p>\n<p>I also noticed the problem with unique full names when I tried to stretch private a bit <br>\ntoo far in my theory. But that's another story.</p>\n<p>Cheers,<br>\nAndreas</p>",
        "id": 294668287,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661172555
    }
]