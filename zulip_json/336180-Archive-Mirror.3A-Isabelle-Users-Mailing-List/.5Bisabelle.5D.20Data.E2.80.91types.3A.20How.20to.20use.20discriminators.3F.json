[
    {
        "content": "<p>From: Yannick &lt;<a href=\"mailto:yannick_duchene@yahoo.fr\">yannick_duchene@yahoo.fr</a>&gt;<br>\nOn Mon, 09 Dec 2013 10:44:27 +0100, Andreas Lochbihler  <br>\n&lt;<a href=\"mailto:andreas.lochbihler@inf.ethz.ch\">andreas.lochbihler@inf.ethz.ch</a>&gt; wrote:</p>\n<blockquote>\n<p>Hi Yannik,</p>\n<blockquote>\n<p>What is a destructor? Isn't it pattern matching?<br>\nA destructor (or more precisely, a selector) is a function that returns  <br>\none of the arguments of a constructor. For example, hd and tl are the  <br>\nselectors for list, they return the arguments of a Cons.</p>\n</blockquote>\n<p>The new datatype package (keyword datatype_new) generates such  <br>\ndiscriminators and selectors, the old one (keyword datatype) does not.  <br>\nIn Isabelle2013-1, the datatypes in HOL are generated by the old  <br>\ndatatype package. To use the new datatype package, you must import  <br>\n~~/src/HOL/BNF/BNF. But of course, you can always define your own  <br>\ndiscriminators and selectors.</p>\n</blockquote>\n<p>So I will try this one.</p>\n<blockquote>\n<blockquote>\n<p>lemma \"isα t ⟹ t = α a\" sorry -- No way too<br>\nThis is not provable, you probably want to have \"isα t ⟹ EX a. t = α a\".<br>\nTry by(cases t)(auto simp add: isα_def)</p>\n</blockquote>\n</blockquote>\n<p>Yes, that was the intent. I though this was the same as to say there exist  <br>\nan “a” such that “t = α a”. Or else, this just mean nothing, unless “a” is  <br>\nfixed and in which case this is indeed not provable. Is “a” implicitly  <br>\nfixed in the proposition I tested? If so, I didn't suspected it, and will  <br>\nbe aware of it since now.</p>\n<p>Thanks for the precious comments :)</p>",
        "id": 294259264,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660913746
    },
    {
        "content": "<p>From: Andreas Lochbihler &lt;<a href=\"mailto:andreas.lochbihler@inf.ethz.ch\">andreas.lochbihler@inf.ethz.ch</a>&gt;<br>\nHi Yannik,</p>\n<p>Yes, fresh variables in theorem statements are implicitly fixed. You can also specify <br>\nvariables that you can instantiate later, as in</p>\n<p>schematic_lemma \"isα t ==&gt; t = α ?a\"</p>\n<p>but this does not work well with Isar proofs, parallelisation of proof checking, and (in <br>\nthis case) proof automation. So it's better to explicitly use an existential quantifier here.</p>\n<p>Best,<br>\nAndreas</p>",
        "id": 294259277,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660913753
    },
    {
        "content": "<p>From: Yannick &lt;<a href=\"mailto:yannick_duchene@yahoo.fr\">yannick_duchene@yahoo.fr</a>&gt;<br>\nI missed it (as it was not my first time in “datatypes.pdf”, I missed this  <br>\nchange in the introduction). Also HOL-BNF can be selected as the default  <br>\nimage in jEdit.</p>\n<p>Now there are theorems “t.discI(n)” which indeed do what's needed. The  <br>\nfunctions “t.is_Cn” do the same as explicitly defined functions (in a  <br>\nprior message).</p>\n<p>Is it OK to use HOL-BNF or is it still subject to big change? What would  <br>\nyou recommend between “datatype” and “datatype_new”?</p>",
        "id": 294259284,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660913759
    },
    {
        "content": "<p>From: Yannick &lt;<a href=\"mailto:yannick_duchene@yahoo.fr\">yannick_duchene@yahoo.fr</a>&gt;<br>\nI forget to comment on this: “thm isα_def” just says “isα ≡ isα_sumC”, and  <br>\n“isα_sumC” is just a constant of type “t =&gt; bool”, so it was not usable  <br>\n(HOL-BNF has a really usable “is_Atom_def”).</p>",
        "id": 294259338,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660913767
    },
    {
        "content": "<p>From: Andreas Lochbihler &lt;<a href=\"mailto:andreas.lochbihler@inf.ethz.ch\">andreas.lochbihler@inf.ethz.ch</a>&gt;<br>\nThis is what you get with the function package. In that case, isα.simps is what you need. <br>\nWith definition, the theorem is usually names &lt;constant name&gt;_def. In your example above, <br>\nhowever, you renamed the definition theorem to isα, so apply(simp add: isα) should work.</p>\n<p>Best,<br>\nAndreas</p>",
        "id": 294259352,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660913770
    },
    {
        "content": "<p>From: \"Yannick Duchêne (Hibou57 )\" &lt;<a href=\"mailto:yannick_duchene@yahoo.fr\">yannick_duchene@yahoo.fr</a>&gt;<br>\nI was seeking for something like constructor predicates, I mean something  <br>\nwhich says whether or not an instance of that data‑type is from a  <br>\nparticular constructor of a that data‑type.</p>\n<p>In “datatypes.pdf”, in “2.3 Generated Constants” there is the mention of  <br>\ndiscriminators of the form “t.is_Cn” where “Cn” is the name of a  <br>\nconstructor of the type “t”.</p>\n<p>I could not find anything like this in the theory context, so searched the  <br>\nweb for “Isabelle HOL is_Cons is_Nil” with the hope this could pop up some  <br>\nexamples on the topic. I could just find this, which did not help to  <br>\nunderstand:<br>\n<a href=\"http://isabelle.in.tum.de/repos/isabelle/file/3d520eec2746/src/HOL/Codatatype/Tools/bnf_wrap.ML\">http://isabelle.in.tum.de/repos/isabelle/file/3d520eec2746/src/HOL/Codatatype/Tools/bnf_wrap.ML</a></p>\n<p>For the practical issue, I encountered a case where I needed but failed to  <br>\nprove this: “a ≠ ω b ⟹ a ≠ ω (c # d)”. I can't prove it, as “a” is not  <br>\nproduced by “ω” there is no “b” and no way to compare the latter to “(c #  <br>\nd)”. The case seemed a bit paradoxical to me, when I started to think I  <br>\nfinally need something to say “a” is not produced by the constructor “ω”.</p>\n<p>Also I noticed “datatypes.pdf” talks about “datatype_new” and some others,  <br>\nwhich seems not to be recognized. Is this an error or something old or  <br>\nsomething new to come?</p>",
        "id": 294262769,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660914979
    },
    {
        "content": "<p>From: \"Yannick Duchêne (Hibou57 )\" &lt;<a href=\"mailto:yannick_duchene@yahoo.fr\">yannick_duchene@yahoo.fr</a>&gt;<br>\nI fell back to this:</p>\n<p>datatype \"term\" =<br>\n     Any                  (\"ε\")<br>\n   | Atom atom            (\"α\")<br>\n   | Variable variable    (\"υ\")<br>\n   | Compound \"term list\" (\"ω\")<br>\n   ;</p>\n<p>primrec isυ :: \"term ⇒ bool\" where<br>\n       \"isυ ε = False\"<br>\n     | \"isυ (α _) = False\"<br>\n     | \"isυ (υ _) = True\"<br>\n     | \"isυ (ω _) = False\"</p>\n<p>(* And so on for the other three constructors… *)</p>\n<p>“isυ” is what is supposed to be “term.is_Variable” after “datatypes.pdf”,  <br>\nbut which does not seems to be there.</p>\n<p>The simplifier seems to be able to deal with this in proof.</p>\n<p>I noticed something I don't understand. Isabelle/jEdit tells me in the  <br>\noutput pan and about the primrec: “No function definition for datatype  <br>\n\"List.list\"”.</p>",
        "id": 294262886,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660915024
    },
    {
        "content": "<p>From: Lawrence Paulson &lt;<a href=\"mailto:lp15@cam.ac.uk\">lp15@cam.ac.uk</a>&gt;<br>\nIt’s actually quite rare to need destructor or discriminator functions in datatypes. You should use pattern-matching instead, or the built-in case expression. With the latter, you can also get the simplifier to perform rewriting with case-splitting automatically.</p>\n<p>Larry Paulson</p>",
        "id": 294262915,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660915034
    },
    {
        "content": "<p>From: Yannick &lt;<a href=\"mailto:yannick_duchene@yahoo.fr\">yannick_duchene@yahoo.fr</a>&gt;<br>\nOn Sun, 08 Dec 2013 15:24:49 +0100, Lawrence Paulson &lt;<a href=\"mailto:lp15@cam.ac.uk\">lp15@cam.ac.uk</a>&gt;<br>\nwrote:</p>\n<blockquote>\n<p>It’s actually quite rare to need destructor or discriminator functions  <br>\nin datatypes.</p>\n</blockquote>\n<p>What is a destructor? Isn't it pattern matching?</p>\n<p>I guess too it may be perhaps quite rare, but it's unavoidable for my  <br>\nactual practical case. Using pattern matching in propositions is not  <br>\nalways OK, as it can lead to paradoxical cases where its needed to prove a  <br>\nrelation between things which don't exist. That's why I need a predicates  <br>\nwhich really says “t is as this” or “t is not as this”.</p>\n<blockquote>\n<p>You should use pattern-matching instead, or the built-in case  <br>\nexpression. With the latter, you can also get the simplifier to perform  <br>\nrewriting with case-splitting automatically.</p>\n</blockquote>\n<p>I tried with a definition and a function:</p>\n<p>definition isα: \"isα t ≡ (case t of α a ⇒ True | _ ⇒ False)\"</p>\n<p>lemma \"t = α a ⟹ isα t\" sorry -- No way, and unfolding does not help<br>\n     lemma \"isα t ⟹ t = α a\" sorry -- No way too</p>\n<p>Or:</p>\n<p>fun isα where \"isα t = (case t of α a ⇒ True | _ ⇒ False)\"</p>\n<p>lemma \"t = α a ⟹ isα t\" sorry -- OK<br>\n     lemma \"isα t ⟹ t = α a\" by simp -- But no way with this one</p>\n<p>None seems to work as expectable and even “try” fails to find a solution.</p>",
        "id": 294262947,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660915049
    },
    {
        "content": "<p>From: Andreas Lochbihler &lt;<a href=\"mailto:andreas.lochbihler@inf.ethz.ch\">andreas.lochbihler@inf.ethz.ch</a>&gt;<br>\nHi Yannik,</p>\n<blockquote>\n<p>What is a destructor? Isn't it pattern matching?<br>\nA destructor (or more precisely, a selector) is a function that returns one of the <br>\narguments of a constructor. For example, hd and tl are the selectors for list, they return <br>\nthe arguments of a Cons.</p>\n</blockquote>\n<p>The new datatype package (keyword datatype_new) generates such discriminators and <br>\nselectors, the old one (keyword datatype) does not. In Isabelle2013-1, the datatypes in <br>\nHOL are generated by the old datatype package. To use the new datatype package, you must <br>\nimport ~~/src/HOL/BNF/BNF. But of course, you can always define your own discriminators <br>\nand selectors.</p>\n<blockquote>\n<p>I tried with a definition and a function:</p>\n<p>definition isα: \"isα t ≡ (case t of α a ⇒ True | _ ⇒ False)\"</p>\n<p>lemma \"t = α a ⟹ isα t\" sorry -- No way, and unfolding does not help<br>\nHave you tried apply(simp add: isα_def)? It should do the job.</p>\n</blockquote>\n<blockquote>\n<p>lemma \"isα t ⟹ t = α a\" sorry -- No way too<br>\nThis is not provable, you probably want to have \"isα t ⟹ EX a. t = α a\".<br>\nTry by(cases t)(auto simp add: isα_def)</p>\n</blockquote>\n<p>Hope this helps,<br>\nAndreas</p>",
        "id": 294262959,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660915053
    },
    {
        "content": "<p>From: Jasmin Blanchette &lt;<a href=\"mailto:jasmin.blanchette@gmail.com\">jasmin.blanchette@gmail.com</a>&gt;<br>\nHi Yannick,</p>\n<blockquote>\n<p>Also I noticed “datatypes.pdf” talks about “datatype_new” and some others, which seems not to be recognized. Is this an error or something old or something new to come?</p>\n</blockquote>\n<p>The answer is in the introduction of that document (p. 4):</p>\n<p>To use the package, it is necessary to import the BNF theory, which can be precompiled into the HOL-BNF image. The following commands show how to launch jEdit/PIDE with the image loaded and how to build the image without launching jEdit:</p>\n<p>isabelle jedit -l HOL-BNF<br>\n    isabelle build -b HOL-BNF</p>\n<p>Regards,</p>\n<p>Jasmin</p>",
        "id": 294262969,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660915060
    }
]