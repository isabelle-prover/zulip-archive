[
    {
        "content": "<p>From: Martin Desharnais &lt;<a href=\"mailto:martin.desharnais@gmail.com\">martin.desharnais@gmail.com</a>&gt;<br>\nDear Isabelle users</p>\n<p>I am trying to get to get to know locales and get a strange error <br>\nmessage when using the type abstracted over in a datatype definition. <br>\nConsider the following example.</p>\n<p>locale semantics =<br>\n   fixes<br>\n     step :: \"'state ⇒ 'state ⇒ bool\" and<br>\n     inital_state :: \"'state ⇒ bool\" and<br>\n     final_state :: \"'state ⇒ bool\"<br>\nbegin</p>\n<p>definition stuck :: \"'state ⇒ bool\" where<br>\n   \"stuck s1 ≡ (∄s2. step s1 s2)\"</p>\n<p>inductive star :: \"'state ⇒ 'state ⇒ bool\" where<br>\n   star_refl: \"star s s\" |<br>\n   star_step: \"step s1 s2 ⟹ star s2 s3 ⟹ star s1 s3\"</p>\n<p>datatype behaviour =<br>\n   Terminates 'state | Goes_wrong</p>\n<p>inductive has_behaviour :: \"'state ⇒ behaviour ⇒ bool\" where<br>\n   state_terminates:<br>\n     \"star s1 s2 ⟹ final_state s2 ⟹<br>\n     has_behaviour s1 (Terminates s2)\" |<br>\n   state_goes_wrong:<br>\n     \"star s1 s2 ⟹ stuck s2 ⟹ ¬final_state s2 ⟹<br>\n     has_behaviour s1 Goes_wrong\"</p>\n<p>end</p>\n<p>The constructor \"Terminates\" of the datatype \"behaviour\" is intended to <br>\ncontain a value of the state type abstracted over by the locale. The <br>\ndefinition fails with the following error message.</p>\n<blockquote>\n<p>Extra type variables on right-hand side: \"'state\"</p>\n</blockquote>\n<p>If I change the definition to add the type variable on the right-hand <br>\nside, the definition still fails with the following error message.</p>\n<blockquote>\n<p>Locally fixed type argument \"'state\" in datatype specification</p>\n</blockquote>\n<p>I can solve the problem by using a fresh type variable and instantiate <br>\nthe \"behaviour\" datatype with the \"'state\" type in every usage (e.g. in <br>\nthe inductive definition \"has_behaviour\"), but this is a unnecessary <br>\noverhead that would not scale well when the number of abstracted types <br>\ninvolved increases.</p>\n<p>Why is the definition using the abstracted type \"'state\" directly failing?</p>\n<p>Is there a workaround that does not involve type parametrization of the <br>\n\"behaviour\" datatype?</p>\n<p>Regards,<br>\nMartin Desharnais</p>",
        "id": 294753328,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661196299
    },
    {
        "content": "<p>From: Traytel  Dmitriy &lt;<a href=\"mailto:traytel@inf.ethz.ch\">traytel@inf.ethz.ch</a>&gt;<br>\nHi Martin,</p>\n<p>this is fundamental: typedefs in locales may not depend on locally fixed type parameters (or term parameters). See the error messages in the example below.</p>\n<p>Since datatypes ultimately reduce to typedefs, they inherit this limitation.</p>\n<p>The only workarounds I know is to either parametrize the datatype (outside of the locale) or to monomorphize the state.</p>\n<p>Cheers,<br>\nDmitriy</p>\n<p>locale A =<br>\n  fixes a :: 'a<br>\n  fixes A :: \"nat set\"<br>\nbegin</p>\n<p>typedef foo = \"UNIV :: 'a set\"<br>\ntypedef 'a foo = \"UNIV :: 'a set\"<br>\ntypedef foo = \"A\"</p>\n<p>end</p>",
        "id": 294753345,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661196305
    }
]