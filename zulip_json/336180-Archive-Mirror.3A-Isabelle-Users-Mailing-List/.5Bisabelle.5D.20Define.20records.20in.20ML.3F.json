[
    {
        "content": "<p>From: Thomas Bleher &lt;<a href=\"mailto:bleher@informatik.uni-muenchen.de\">bleher@informatik.uni-muenchen.de</a>&gt;<br>\nGreetings!<br>\nRight now I'm looking at the ISM package (=Interacting State Machines) in<br>\norder to make them work with Isabelle2005.<br>\nThis package defines its own syntax extensions and parses them into<br>\nrecords (among lots of other things).</p>\n<p>Now the CVS commit on \"Mon May 3 21:22:17 2004 +0000\", commit message</p>\n<blockquote>\n<p>reimplementation of HOL records; only one type is created for<br>\neach record extension, instead of one type for each field. See NEWS.<br>\ncompletely breaks this ML code.</p>\n</blockquote>\n<p>I looked through the code and it seems like I have to reimplement most<br>\nof it. I tried to figure out how to create and manipulate records in ML,<br>\nbut failed (HOL/Tools/record_package.ML is not very light reading).</p>\n<p>Could someone give me some hints how to</p>\n<ul>\n<li>create an Isabelle record in ML?</li>\n<li>look up a field in a record by name and determine its type?</li>\n</ul>\n<p>Or alternatively point me to some modules from which I could borrow<br>\ncode; I'd also welcome any documentation - I didn't find anything<br>\nrelevant.</p>\n<p>Thanks a lot,<br>\nThomas</p>\n<p>PS: If anyone is interested, I attached the relevant code.<br>\nISM_package.thy contains the ML code, SLE66.thy is an example using this<br>\ntheory. find_field_Typ is the first function which fails under the new<br>\nrecord implementation.</p>",
        "id": 294044025,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660816520
    },
    {
        "content": "<p>From: Thomas Bleher &lt;<a href=\"mailto:bleher@informatik.uni-muenchen.de\">bleher@informatik.uni-muenchen.de</a>&gt;</p>\n<ul>\n<li>Thomas Bleher &lt;<a href=\"mailto:bleher@informatik.uni-muenchen.de\">bleher@informatik.uni-muenchen.de</a>&gt; [2006-11-10 10:19]:<br>\nSorry, forgot again...</li>\n</ul>\n<p>This time it is attached.</p>\n<p>Thomas<br>\n<a href=\"/user_uploads/14278/9aR9EgYaLRzvPATdejEzl8sM/ism.tar.gz\">ism.tar.gz</a></p>",
        "id": 294044040,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660816527
    },
    {
        "content": "<p>From: Thomas Bleher &lt;<a href=\"mailto:bleher@informatik.uni-muenchen.de\">bleher@informatik.uni-muenchen.de</a>&gt;</p>\n<ul>\n<li>Thomas Bleher &lt;<a href=\"mailto:bleher@informatik.uni-muenchen.de\">bleher@informatik.uni-muenchen.de</a>&gt; [2006-11-10 10:19]:<br>\nOK, I continued to search for a solution for this, but I'm stuck.<br>\nI looked at<br>\n<a href=\"https://cgi.cse.unsw.edu.au/~formalmethods/wiki/isabelle/index.cgi/ProgrammingIsabelle\">https://cgi.cse.unsw.edu.au/~formalmethods/wiki/isabelle/index.cgi/ProgrammingIsabelle</a><br>\nand came up with the following code to add a simple typedef:</li>\n</ul>\n<p>ML {*<br>\nContext.&gt;&gt; (TypedefPackage.add_typedecls ([(\"test_type\":bstring,[],NoSyn)]));<br>\n*}</p>\n<p>However, the next command then fails with<br>\n  \"exception TERM raised: Stale theory encountered: {&lt;long list of theories&gt;}\"</p>\n<p>Which magic incantation do I have to use to add a typedecl (or anything<br>\nelse) to the current theory?<br>\nAny tips greatly appreciated!</p>\n<p>While I'm at it, two other questions:</p>\n<ul>\n<li>\n<p>There are a lot of seemingly definitions like add_inductive and<br>\n  add_inductive_i. What's the difference between them?</p>\n</li>\n<li>\n<p>Where should I post bugs and corrections I found?</p>\n</li>\n</ul>\n<p>Thanks for your time!<br>\nThomas</p>",
        "id": 294044084,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660816546
    },
    {
        "content": "<p>From: Norbert Schirmer &lt;<a href=\"mailto:norbert.schirmer@web.de\">norbert.schirmer@web.de</a>&gt;<br>\n(* add_record_i (type-params,record-name) parent-name field-decls thy *)<br>\nsetup {* <br>\n[RecordPackage.add_record_i ([],\"foo\") NONE     <br>\n   [(\"b\",HOLogic.boolT,Syntax.NoSyn)]]*}</p>\n<p>(*This is:<br>\nrecord foo =<br>\n  b::bool<br>\n*)</p>\n<p>(* Provided the type, you can get the fields of the record the following <br>\nway:*)<br>\nML {*<br>\nval thy = the_context ();<br>\nRecordPackage.get_recT_fields thy <br>\n  (Type (\"Scratch.foo.foo_ext_type\",[TFree (\"'a\",Sign.defaultS thy)]))<br>\n*}</p>\n<p>As far as I can remember the signature of \"add_record_i\" did not change with <br>\nthe reimplementation of records. </p>\n<p>Hope this helps.</p>\n<p>Norbert</p>",
        "id": 294044099,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660816551
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nOn Mon, 13 Nov 2006, Thomas Bleher wrote:</p>\n<blockquote>\n<p>I looked at <br>\n<a href=\"https://cgi.cse.unsw.edu.au/~formalmethods/wiki/isabelle/index.cgi/ProgrammingIsabelle\">https://cgi.cse.unsw.edu.au/~formalmethods/wiki/isabelle/index.cgi/ProgrammingIsabelle</a> </p>\n</blockquote>\n<p>Maybe you want to take a look at the \"implementation\" manual, which is <br>\npart of recent development snapshots.  (It is only about 25% finished, but <br>\nthe already existing parts are in an orderly state.)</p>\n<blockquote>\n<p>However, the next command then fails with<br>\n  \"exception TERM raised: Stale theory encountered: {&lt;long list of theories&gt;}\"</p>\n<p>Which magic incantation do I have to use to add a typedecl (or anything<br>\nelse) to the current theory?</p>\n</blockquote>\n<p>The deeper problem here is what ``current theory'' refers to.  The \"Stale <br>\ntheory encountered\" indicates that some no longer valid theory value was <br>\ninvolved.  Normally you just work with (fn thy =&gt; ...) abstractly -- where <br>\nthe function body uses thy in a strictly linear fashion.  Then plug in the <br>\nresult as Toplevel.theory transaction.  Alternatively you may experiment <br>\nwith the 'setup' command in ProofGeneral/Isar mode.  For example:</p>\n<p>setup {* TypedefPackage.add_typedecls [(\"foo\", [\"'a\", \"'b\"], NoSyn)] *}</p>\n<p>typ \"(nat, bool) foo\"</p>\n<p>Paradoxically, it is much easier to work with ML in the Isar interaction <br>\nmode, instead of the raw ML toplevel.  (Sometimes some low-level output <br>\nonly occurrs in the <em>isabelle</em> buffer in ProofGeneral.)</p>\n<p>Makarius</p>",
        "id": 294044168,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660816569
    }
]