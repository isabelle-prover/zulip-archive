[
    {
        "content": "<p>From: \"Aaron W.  Hsu\" &lt;<a href=\"mailto:arcfide@sacrideo.us\">arcfide@sacrideo.us</a>&gt;<br>\nI am building a type that does not use Datatype.  I would like to be able to <br>\ndo a cases statement on it for some of the constructors that I have made, <br>\nbut it is not clear to me how best to do this?  What theorems do I need to <br>\nprove to enable a Case statement to work? Specifically, I have arrays, and I <br>\nwant to be able to do something like:</p>\n<p>case A of <br>\n  Empty =&gt; ... |<br>\n  Scalar x =&gt; ... | <br>\n  Array s m =&gt; ...</p>\n<p>Where Empty is an array of shape [0] and has an empty Map, Scalar is an <br>\narray of shape [] with a map [[] mapto x], and Array s m is the general <br>\nArray constructor.</p>\n<p>I have Empty, Scalar and Array defined, but I am finding that it is really <br>\nannoying trying to get the appropriate elements s, m, and x out of the input <br>\nwithout a case construct, and I do not like writing all the if then <br>\nstatements to dispatch on the type of array I have. I think my proofs would <br>\nbe much easier if I could have some sort of case thing going on.</p>\n<p>I am not using Datatype because the general Array constructor must have a <br>\nspecific, constrained relationship between map and shape.</p>",
        "id": 294158975,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660852419
    },
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\nIf your type <em>behaves</em> like a datatype, then you can tunr it into a datatype via<br>\nthe rep_datatype command. See the Isar Reference manual. A typical example is in<br>\nNat.thy: nat is not defined via datatype but behaves like one. But beware that<br>\nyou will have to prove all the properties expected from a datatype: injectivity<br>\nand distinctness of the constructors and the induction rule.</p>\n<p>Tobias</p>",
        "id": 294159095,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660852456
    }
]