[
    {
        "content": "<p>From: Christopher Hoskin &lt;<a href=\"mailto:christopher.hoskin@gmail.com\">christopher.hoskin@gmail.com</a>&gt;<br>\nThis feels like a very stupid question, but I've been staring at it<br>\nall afternoon, and can't see the answer.</p>\n<p>I'm trying to show that a commutative additive group is a module over<br>\nthe integers via the map which takes an integer and an element of<br>\nclass ab_group_add and maps it to an element of class ab_group_add in<br>\nthe natural way i.e. so that</p>\n<p>(0,a) -&gt; 0<br>\n(n,a) -&gt; a + (n-1,a) (for n&gt;0)<br>\n(-n,a) -&gt; - (n,a) (for n&gt;0).</p>\n<p>The closest I've managed to get is:</p>\n<p>context ab_group_add begin</p>\n<p>primrec natscalar :: \"nat ⇒ 'a ⇒ 'a\" (infix \"∙⇩N\" 80) where<br>\n    natscalar_0: \"0∙⇩Na = 0\"<br>\n  | natscalar_Suc: \"Suc n ∙⇩N a = a + n∙⇩Na\"</p>\n<p>function scalar :: \"int ⇒ 'a ⇒ 'a\" (infix \"∙⇩Z\" 80) where<br>\n    \"n≥0 ⟹ n∙⇩Za = nat(n)∙⇩Na\"<br>\n  | \"¬n≥0 ⟹ n∙⇩Za = - (nat(abs(n))∙⇩Na)\"<br>\n  by auto</p>\n<p>but I'm then unable to see how to prove even the simplest equation<br>\ne.g. \"1∙⇩Za = a\"</p>\n<p>Possibly a function is the wrong way do do this?</p>\n<p>Ultimately I want to show:</p>\n<p>interpretation ab_group_add: module scalar</p>\n<p>Please can someone offer some pointers?</p>\n<p>Thanks.</p>\n<p>Christopher</p>",
        "id": 294762304,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661200214
    },
    {
        "content": "<p>From: Christopher Hoskin &lt;<a href=\"mailto:christopher.hoskin@gmail.com\">christopher.hoskin@gmail.com</a>&gt;<br>\nThanks, in the end I did this, which seems to work:</p>\n<p>context ab_group_add begin</p>\n<p>primrec natscalar :: \"nat ⇒ 'a ⇒ 'a\" (infix \"∙⇩N\" 80) where<br>\n    natscalar_0: \"0∙⇩Na = 0\"<br>\n  | natscalar_Suc: \"Suc n ∙⇩N a = a + n∙⇩Na\"</p>\n<p>definition scalar :: \"int ⇒ 'a ⇒ 'a\" (infix \"∙⇩Z\" 80) where<br>\n  \"scalar n a = (if n≥0 then nat(n)∙⇩Na else - (nat(abs(n))∙⇩Na))\"</p>\n<p>Christopher</p>",
        "id": 294762491,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661200308
    },
    {
        "content": "<p>From: Akihisa Yamada &lt;<a href=\"mailto:akihisayamada@nii.ac.jp\">akihisayamada@nii.ac.jp</a>&gt;<br>\nHello Christopher,</p>\n<p>most likely you wanted to use \"fun\" instead of \"function\".</p>\n<p>Sometimes it's better not keep staring but look around, like functions <br>\ntutorial in Documentation panel :)</p>\n<p>Best regards,<br>\nAkihisa</p>",
        "id": 294762918,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661200511
    },
    {
        "content": "<p>From: Akihisa Yamada &lt;<a href=\"mailto:akihisayamada@nii.ac.jp\">akihisayamada@nii.ac.jp</a>&gt;<br>\nDear Christopher,</p>\n<p>ah, I see you had to give up the fancy style of definition. Then what is <br>\ngood to know is that function demands a manual termination proof, like:</p>\n<p>function scalar :: \"int ⇒ 'a ⇒ 'a\" (infix \"∙⇩Z\" 80) where<br>\n     \"n≥0 ⟹ n∙⇩Za = nat(n)∙⇩Na\"<br>\n   | \"¬n≥0 ⟹ n∙⇩Za = - (nat(abs(n))∙⇩Na)\"<br>\n   by auto<br>\ntermination by lexicographic_order</p>\n<p>lemma \"1∙⇩Za = a\" by auto</p>\n<p>Best regards,<br>\nAkihisa</p>",
        "id": 294763207,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661200646
    }
]