[
    {
        "content": "<p>From: John Munroe &lt;<a href=\"mailto:munddr@gmail.com\">munddr@gmail.com</a>&gt;<br>\nHi,</p>\n<p>I'm trying to define a new type which is essentially a set of 3 pairs.<br>\nTwo objects of that type are equal iff 2 of the pairs are equal. I<br>\nhave a few questions:</p>\n<p>1) If I declare that type using 'typedecl' then how do I express that<br>\nit's essentially a set of 3 pairs? 'type_synonym' doesn't seem to be<br>\nappropriate since the existing equality on sets of pairs conflicts<br>\nwith my notion of equality.</p>\n<p>2) Even if I declare a new type, does my notion of equality conflict<br>\nwith any of the existing lemmas, creating a contradiction? Equality is<br>\npolymorphic, so I should be able to define it whichever way I want,<br>\nright?</p>\n<p>Thanks a lot for your time in advance.</p>\n<p>John</p>",
        "id": 294223381,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660898682
    },
    {
        "content": "<p>From: John Wickerson &lt;<a href=\"mailto:jpw48@cam.ac.uk\">jpw48@cam.ac.uk</a>&gt;<br>\nHi John,</p>\n<p>I don't think that's a good notion of equality, because it's not transitive.</p>\n<p>{(1,2);(3,4);(5,6)} = {(1,2);(3,4);(7,8)} = {(1,2);(5,6);(7,8)}</p>\n<p>but </p>\n<p>{(1,2);(3,4);(5,6)} =/= {(1,2);(5,6);(7,8)}</p>\n<p>Best wishes,<br>\nJohn</p>",
        "id": 294223402,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660898692
    },
    {
        "content": "<p>From: John Wickerson &lt;<a href=\"mailto:jpw48@cam.ac.uk\">jpw48@cam.ac.uk</a>&gt;<br>\nSorry, I messed up my counterexample. I meant:</p>\n<p>{(1,2);(3,4);(5,6)} = {(1,2);(3,4);(7,8)} = {(1,2);(9,10);(7,8)}</p>\n<p>but</p>\n<p>{(1,2);(3,4);(5,6)} =/= {(1,2);(9,10);(7,8)}</p>\n<p>John</p>",
        "id": 294223405,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660898694
    },
    {
        "content": "<p>From: Elsa L Gunter &lt;<a href=\"mailto:egunter@illinois.edu\">egunter@illinois.edu</a>&gt;<br>\nDear John,<br>\n   Equality is not something you get to define. It already exists, at <br>\nall types already introduce and those yet to be formally introduced.  <br>\nPolymorphism doesn't mean you get to define it at each type whatever way <br>\nyou please.  It means that is has been defined, or otherwise introduced, <br>\nin a way that is uniform at all types.  Among other things, it is a <br>\nrelation satisfying</p>\n<p>HOL.subst: [|?s = ?t; ?P ?s |] ==&gt; ?P ?t</p>\n<p>no matter what type ?s and ?t have.</p>\n<p>If you create a new type (which is what I'm guessing you really want to <br>\ndo), then two elements in the new type are equal iff their <br>\nrepresentations in the underlying model are equal.  I don't quite <br>\nunderstand the definition of the type you are trying to create, but it <br>\nsounds to me like you really want to have an underlying model that <br>\nstarts with (some collection of) sets of something (pairs?) and that you <br>\nthen want to define an equivalence relation on those sets, and then your <br>\nmodel would be (some of) the equivalence classes.<br>\n---Elsa</p>",
        "id": 294223420,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660898701
    }
]