[
    {
        "content": "<p>From: John Matthews &lt;<a href=\"mailto:matthews@galois.com\">matthews@galois.com</a>&gt;<br>\nHello,</p>\n<p>We've run into a problem in having Isabelle automatically prove the  <br>\ntermination of Cryptol infinite streams that we are translating into  <br>\nIsabelle, when the body of the stream definition uses a let- <br>\nexpression. Below is a theory that illustrates the problem.</p>\n<p>Thanks,<br>\n-john</p>\n<p>theory fun_let<br>\nimports Main<br>\nbegin</p>\n<p>-- \"Represent infinite streams as nat-indexed functions\"<br>\ntypes 'a strm = \"nat =&gt; 'a\"</p>\n<p>-- \"Appends a finite list of elements to the front of a stream\"<br>\ndefinition<br>\n    strm_append :: \"'a list =&gt; 'a strm =&gt; 'a strm\" where<br>\n   \"strm_append xs ys<br>\n    = (%n. let l = length xs<br>\n           in (if n &lt; l then xs ! n else ys (n - l)))\"</p>\n<p>lemma strm_append_cong[fundef_cong]:<br>\n   \"[| n = n';<br>\n       xs = xs';<br>\n       !!k. n = k + length xs ==&gt; ys k = ys' k|]<br>\n    ==&gt; (strm_append xs ys) n = (strm_append xs' ys') n'\"<br>\nby (cases n', simp_all add: strm_append_def Let_def)</p>\n<p>text {* \"fun\" can automatically prove termination of foo_1, but<br>\nnot foo_2, even though the only difference between the two is a<br>\nlet expression. *}</p>\n<p>fun<br>\n    foo_1 :: \"nat strm\" where<br>\n   \"foo_1 i = (strm_append [1] foo_1) i\"</p>\n<p>fun<br>\n    foo_2 :: \"nat strm\" where<br>\n   \"foo_2 i = ((let q = (0::nat) in strm_append [1] foo_2) i)\"</p>\n<p>end</p>",
        "id": 294061653,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660823924
    },
    {
        "content": "<p>From: Alexander Krauss &lt;<a href=\"mailto:krauss@in.tum.de\">krauss@in.tum.de</a>&gt;<br>\nHi John,</p>\n<p>\\begin{blackmagic}</p>\n<p>Here is the rule you need:</p>\n<p>lemma let_app_cong[fundef_cong]:<br>\n   \"s = t ==&gt;<br>\n   (!!a. a = t ==&gt; f a y = g a y)<br>\n   ==&gt; x = y<br>\n   ==&gt; Let s f x = Let t g y\"<br>\nby auto</p>\n<p>\\end{blackmagic}</p>\n<p>Note how the extra argument y is moved \"into\" the let.</p>\n<p>Alex</p>",
        "id": 294061675,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660823938
    },
    {
        "content": "<p>From: John Matthews &lt;<a href=\"mailto:matthews@galois.com\">matthews@galois.com</a>&gt;<br>\nThanks Alex, I forgot that I also needed to eta-expand the body of the  <br>\nlet-expression.</p>\n<p>-john</p>",
        "id": 294061877,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660824009
    }
]