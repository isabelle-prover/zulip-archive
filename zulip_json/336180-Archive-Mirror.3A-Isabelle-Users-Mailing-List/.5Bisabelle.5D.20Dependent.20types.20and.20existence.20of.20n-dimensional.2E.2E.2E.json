[
    {
        "content": "<p>From: grechukbogdan &lt;<a href=\"mailto:grechukbogdan@yandex.ru\">grechukbogdan@yandex.ru</a>&gt;<br>\nDear Isabelle Users</p>\n<p>I know that dependent types do not exist in Isabelle. But there should be some alternative way to express any (simple) mathematical fact, should not it? I really need the following lemma.</p>\n<p>Lemma. Fix natural number n. Then there exist a n-dimensional real vector space R^n</p>\n<p>This fact is absolutely obvious, and it is crucial for my formalization.<br>\nIn Isabelle, for, say, n=100,  I can easily obtain 100-dimensional space by writing</p>\n<p>have “CARD(100)=100” by auto<br>\nfrom this obtain A where “A = (UNIV :: (real^100) set)” and “dim A = 100”  by (simp add: dim_univ)</p>\n<p>But I need this for general n. I can write</p>\n<p>fix n :: nat<br>\nassume “CARD('m :: finite)=n”<br>\nfrom this obtain A where “A = (UNIV :: (real^'m) set)” and “dim A = n”  by (simp add: dim_univ)</p>\n<p>But now I need to obtain a n-dimensional universe without additional assumptions. Can somebody help me?</p>\n<p>P. S. I hope this is possible. Otherwise how we can hope to formalize significant part of mathematics if we cannot prove such a simple fact? </p>\n<p>Sincerely,<br>\nBogdan Grechuk.</p>",
        "id": 294107776,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660835782
    },
    {
        "content": "<p>From: Brian Huffman &lt;<a href=\"mailto:brianh@cs.pdx.edu\">brianh@cs.pdx.edu</a>&gt;<br>\nIsabelle's lack of dependent types means that all types mentioned in a<br>\nproof must be fixed up front (like they are in your sample proof<br>\nabove). You cannot obtain a new type variable in the middle of a proof<br>\nthat depends on values obtained earlier in the proof.</p>\n<p>Higher Order Logic is strictly less powerful than ZF set theory, so<br>\neventually you might hit a point where HOL simply can't formalize the<br>\nmathematics you want. Fortunately, I think you are still a long way<br>\nfrom that point.</p>\n<p>So you have a proof that might need to refer to a vector space of<br>\narbitrary finite dimension (where no upper bound on the dimension is<br>\nknown ahead of time). Essentially you would like to existentially<br>\nquantify over a countable family of types: real^n for all finite n.<br>\nThe way to deal with this in HOL is to define a single type that is<br>\nlarge enough to embed all of those types; then you can quantify over<br>\nthe finite-dimensional subspaces of that type.</p>\n<p>Here's an example of a type that would work for this purpose:</p>\n<p>typedef inf_vector = \"{X::nat =&gt; real. finite {n. X n ~= 0}}\"</p>\n<p>Values of this type are infinite sequences of reals with only finitely<br>\nmany non-zero entries. You should be able to make inf_vector an<br>\ninstance of all the relevant type classes for doing linear algebra:<br>\nYou can define addition, subtraction, scalar multiplication, metric,<br>\nnorm, and inner product, and prove that those operations satisfy the<br>\nappropriate laws.</p>\n<p>I know that this is a lot more work than what would be required in a<br>\nsystem with dependent types. But at least it is possible, and you<br>\nstill get to enjoy all the other benefits (type inference, etc) of<br>\nHOL.</p>\n<p>Hope this helps,</p>\n<ul>\n<li>Brian</li>\n</ul>",
        "id": 294107801,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660835791
    },
    {
        "content": "<p>From: Johannes Hölzl &lt;<a href=\"mailto:hoelzl@in.tum.de\">hoelzl@in.tum.de</a>&gt;<br>\nHi Bogdan,</p>\n<p>Am Dienstag, den 11.05.2010, 20:51 +0400 schrieb grechukbogdan:</p>\n<blockquote>\n<p>Dear Isabelle Users</p>\n<p>I know that dependent types do not exist in Isabelle. But there<br>\nshould be some alternative way to express any (simple) mathematical<br>\nfact, should not it? I really need the following lemma.</p>\n<p>Lemma. Fix natural number n. Then there exist a n-dimensional real<br>\nvector space R^n<br>\n[..]<br>\nIt works as long as _the type 'n_ is fixed:</p>\n</blockquote>\n<p>fix n :: nat<br>\n assume \"CARD('n :: finite) = n\"<br>\n moreover def \"A == UNIV :: (real^'n) set\"<br>\n ultimately have \"dim A = n\" using dim_univ[where 'n='n]<br>\n   by simp</p>\n<p>What you can't do is to _obtain a type_, i.e. you can not say to obtain<br>\na 'm with CARD('m) = n. You need always to formulate it the other way<br>\nround: i.e. n = CARD('m) when 'm is fixed.</p>\n<blockquote>\n<p>But now I need to obtain a n-dimensional universe without additional assumptions. Can somebody help me?</p>\n</blockquote>\n<p>Where do you get n from? If it is a fixed variable at the toplevel of<br>\nyour prove replace it by some finite type variable. If you get it via<br>\ninduction or similar it is probably not possible.</p>\n<blockquote>\n<p>P. S. I hope this is possible. Otherwise how we can hope to formalize significant part of mathematics if we<br>\n cannot prove such a simple fact? </p>\n</blockquote>\n<p>This is an unfortunate side effect of the formalization of finite<br>\ncartesian products in HOL-Multivariate_Analysis. However this is<br>\nprobably the only sensible formalization possible in HOL. Otherwise all<br>\nthe advantages of having types is lost and we could also work in ZF.</p>\n<ul>\n<li>Johannes</li>\n</ul>\n<blockquote>\n<p>Sincerely,<br>\nBogdan Grechuk.</p>\n</blockquote>",
        "id": 294107839,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660835803
    },
    {
        "content": "<p>From: grechukbogdan &lt;<a href=\"mailto:grechukbogdan@yandex.ru\">grechukbogdan@yandex.ru</a>&gt;<br>\nDear Johannes</p>\n<p>Thank you for the responce.</p>",
        "id": 294107881,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660835819
    },
    {
        "content": "<p>From: Brian Huffman &lt;<a href=\"mailto:brianh@cs.pdx.edu\">brianh@cs.pdx.edu</a>&gt;<br>\nOn Wed, May 12, 2010 at 2:21 AM, grechukbogdan &lt;<a href=\"mailto:grechukbogdan@yandex.ru\">grechukbogdan@yandex.ru</a>&gt; wrote:</p>\n<blockquote>\n<p>Dear Johannes</p>\n<p>Thank you for the responce.</p>\n<blockquote>\n<p>Where do you get n from? If it is a fixed variable at the toplevel of<br>\n your prove replace it by some finite type variable. If you get it via<br>\n induction or similar it is probably not possible.</p>\n</blockquote>\n<p>Actually, I am proving lemma \"Every convex nonempty set S has a nonempty relative interior\", and n is the dimension of set S.<br>\nSo, I would say that n is a fixed variable at the toplevel, no induction here or similar, I just have fixed set S and it has a fixed dimension. Can I use \"some finite type variable\"? But I cannot \"assume \"CARD('n :: finite) = n\" inside the proof, in this case I have error when try to write \"qed\".</p>\n</blockquote>\n<p>Hi Bogdan,</p>\n<p>In this particular case, since \"S\" has a specific (finite) dimension<br>\nthat is fixed in advance, you should not need to resort to using the<br>\ninf_vector type that I recommended in my previous email. You should be<br>\nable to prove your lemma using only types like \"real^'n\".</p>\n<p>In order to help you more, I will need to know more details about the<br>\nlemma you are trying to prove. I guess that \"Every convex nonempty set<br>\nS has a nonempty relative interior\" would be formalized like</p>\n<p>lemma fixes S :: ??? obtains T :: ??? where &lt;some formula of S and T&gt;</p>\n<p>or \"ALL S::???. EX T::???. &lt;some formula of S and T&gt;\"</p>\n<p>In particular, I need to know the types of S and T, which would be in<br>\nplace of \"???\" above.</p>\n<blockquote>\n<p>Also, my critical lemma</p>\n<p>fixes n :: nat obtains A where “A = (UNIV :: (real^'m) set)” and “dim A = n”</p>\n</blockquote>\n<p>My earlier advice applies here: Instead of trying to quantify over<br>\ntypes, you need to rephrase this by quantifying over subspaces of a<br>\nsingle fixed type.</p>\n<p>It seems like you are trying to say:</p>\n<p>\"ALL n::nat. EX 'm. (dim (UNIV :: (real^'m) set)) = n\"</p>\n<p>which is true, but nonsense in HOL because you can't quantify over types.</p>\n<p>Instead, you should be trying to prove something like this, where type<br>\n'm is fixed, and you quantify over subsets of real^'m:</p>\n<p>\"ALL n::nat. n &lt;= CARD('m) --&gt; EX A::(real^'m) set. dim A = n\"</p>\n<p>Again, it's hard to give more specific advice without knowing more<br>\ndetails about what exactly you are trying to prove.</p>\n<ul>\n<li>Brian</li>\n</ul>",
        "id": 294107887,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660835822
    },
    {
        "content": "<p>From: grechukbogdan &lt;<a href=\"mailto:grechukbogdan@yandex.ru\">grechukbogdan@yandex.ru</a>&gt;<br>\nDear Brian</p>\n<p>No, unfortunately, I really need exactly what I have asked.</p>\n<p>lemma *: fixes n :: nat obtains A where “A = (UNIV :: (real^'m) set)” and “dim A = n”</p>\n<p>Here is the citation from the book which I am formalizing</p>\n<p>\"m-dimentional affine hull of S can be regarded as a copy of space R^m. It is often possible in this manner to reduce a question about general convex set to the special case where the convex set is of full dimension, i.e. has the whole space as its affine hull.\"</p>\n<p>After this remark every second prove in the book start with \"without loss of generality assume that S is of full dimension\", so I actually cannot proceed without formalization of this remark.</p>\n<p>The plan of proving any property P of set S in this way is the following<br>\n1) Prove it for the case when S is of full dimension<br>\n2) Prove that property P is preserved under isomorphism<br>\n3) Constract an isomorphism from affine hull S to the WHOLE SPACE with the same dimension.</p>\n<p>So, I cannot rephrase this by quantifying over subspaces of a single fixed type. I really need to use that A in the lemma * ubove is the whole space, whole universe, not a subspace. For example, I need inclusion \"ball 0 1 &lt;= A\" which does not hold if A is just a subspace.</p>\n<p>In my particular case property P is \"has nonempty relative interior\". <br>\nSo, first, I have proved this for the case of full dimension:</p>\n<p>lemma interior_convex_ndim_nonempty: <br>\nfixes S :: \"(real^'n) set\" <br>\nassumes \"convex S\" and \"aff_dim S = int(CARD('n))\"<br>\nshows \"rel_interior S ~= {}\" </p>\n<p>Then I have proved that relative interior is preserved under the injective linear transformation</p>\n<p>lemma rel_interior_injective_on_span_linear_image:<br>\nfixes f :: \"(real ^'m) =&gt; (real ^'n)\"<br>\nfixes S :: \"(real ^'m) set\"<br>\nassumes \"bounded_linear f\" and \"inj_on f (span S)\"<br>\nshows \"rel_interior (f <code> S) = f </code> (rel_interior S)\" </p>\n<p>And finally, I have lemma subspace_isomorphism, stating that any two subspaces of the same dimension are isomorpic, and I can use it to construct the desired isomorhism f (provided that I can obtain universe A with the same dimension as S)</p>\n<p>obtain A where A_def: \"A = (UNIV :: (real^'m::finite) set)\" and A: \"dim A = dim S\" sorry <br>\nobtain f where f_def: \"linear f &amp; f ` span S = (UNIV :: (real^'m) set) &amp; inj_on f (span S)\"<br>\n  using subspace_isomorphism[of \"span S\" \"(UNIV :: (real^'m) set)\"] <br>\n  A_def A dim_span[of S] subspace_span[of S] by auto</p>\n<p>Again, what is important, I will need this isomorphism to UNIV for many other lemmas.</p>\n<p>Probably, now it is claer, that type</p>\n<p>typedef inf_vector = \"{X::nat =&gt; real. finite {n. X n ~= 0}}\"</p>\n<p>of infinite sequences of reals with only finitely many non-zero entries, does not work at all. Here the universe is infinite-dimensional, and what I need is m-dimensional universe...</p>\n<p>So, is there a point where HOL simply can't formalize the mathematics I want? </p>\n<p>Sincerely,<br>\nBogdan.</p>",
        "id": 294107951,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660835841
    },
    {
        "content": "<p>From: Timothy McKenzie &lt;<a href=\"mailto:tjm1983@gmail.com\">tjm1983@gmail.com</a>&gt;<br>\nThis discussion reminds me of The QED Manifesto Revisited:<br>\n<a href=\"http://mizar.org/trybulec65/8.pdf\">http://mizar.org/trybulec65/8.pdf</a><br>\nIn particular, the second of the four \"benchmark\" statements <br>\ndiscussed in section 3.</p>\n<p>Tim<br>\n&lt;&gt;&lt;<br>\n<a href=\"/user_uploads/14278/dnI_w3PYmHImcgnpIV-aAOpH/signature.asc\">signature.asc</a></p>",
        "id": 294107977,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660835847
    },
    {
        "content": "<p>From: Lawrence Paulson &lt;<a href=\"mailto:lp15@cam.ac.uk\">lp15@cam.ac.uk</a>&gt;<br>\nLet's go back to first principles and consider how a mathematician would represent a point in a multi-dimensional space. If we are to include finite and infinite dimensions in the same framework, then a point must be a map from an ordinal into the set of real numbers. I can't think of a better approach. Note that such a point contains in it not merely the values of its components, but its dimension.</p>\n<p>Such an approach can be done in higher-order logic, although with more effort. Possibly you could use the primitives in Library/FuncSet.thy. You could fix some linearly ordered type to use in place of the ordinals, or make the construction parametric in a type of variable belonging to class linorder. A point would be given by an element N of this index type, coupled with a map from the initial segment of elements below N into the reals. If you only need finite-dimensional spaces, then a point could obviously be represented by a list of real numbers. You</p>\n<p>But it looks to me like you have adopted an approach in which the dimension of a point is part of its type, rather than part of its value. This is inevitably going to be a lot less flexible; it is similar to the situation in group theory, where the carrier of a group really must be formalised as a set rather than as a type.</p>\n<p>Larry Paulson</p>",
        "id": 294108111,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660835883
    }
]