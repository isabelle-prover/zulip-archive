[
    {
        "content": "<p>From: Lawrence Paulson &lt;<a href=\"mailto:lp15@cam.ac.uk\">lp15@cam.ac.uk</a>&gt;<br>\nI think that this particular definition means nothing more than the following:</p>\n<p>inductive<br>\n  mkMyNum :: \"[nat list, nat list] =&gt; bool\"<br>\nwhere<br>\n  M: \"mkMyNum xs (n#xs)\"</p>\n<p>Larry Paulson</p>",
        "id": 294104696,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660834853
    },
    {
        "content": "<p>From: Ian Lynagh &lt;<a href=\"mailto:igloo@earth.li\">igloo@earth.li</a>&gt;<br>\nHi all,</p>\n<p>I have some coq proofs that I am considering converting to Isabelle.<br>\nHowever, the coq proofs use dependent types, similar to this:</p>\n<p>Inductive MyNum (from : list nat) (to : list nat) : Type<br>\n        := mkMyNum : forall (myNum : nat)<br>\n                            (valid : to = cons myNum from),<br>\n                     MyNum from to.</p>\n<p>Can anyone tell me what the best way to handle this in Isabelle would be<br>\nplease?</p>\n<p>Thanks<br>\nIan</p>",
        "id": 294106545,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660835394
    },
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\nI don't speak Coq very well, but if this defines some subset of nat<br>\nlists, the conversion may work according to the following general<br>\nschema: replace the dependent type by some unconstrained type (eg nat<br>\nlist), introduce predicates that check that some nat list satisfies the<br>\nconstraints in the dependent type, and make those predicates<br>\npreconditions in your theorems whenever needed. You recast the type<br>\nconstraints as explicit formulas.</p>\n<p>Tobias</p>\n<p>Ian Lynagh wrote:</p>",
        "id": 294106789,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660835462
    }
]