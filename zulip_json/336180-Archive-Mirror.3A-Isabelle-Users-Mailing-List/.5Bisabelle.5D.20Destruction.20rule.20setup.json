[
    {
        "content": "<p>From: \"W. Douglas Maurer\" &lt;<a href=\"mailto:maurer@email.gwu.edu\">maurer@email.gwu.edu</a>&gt;<br>\nSome of the destruction rules in Isar are set up with [dest]; for example:<br>\nlemma impD [dest]: (A --&gt; B) ==&gt; A ==&gt; B<br>\nlemma allD [dest]: (\\forall x: B x) ==&gt; B a<br>\nOthers are not set up with [dest]; for example:<br>\nlemma not_conjD: ~(P &amp; Q) ==&gt; ~P | ~Q<br>\nlemma imp_to_disjD: P --&gt; Q ==&gt; ~P | Q<br>\nWhy is this? Thanks! -WDMaurer</p>",
        "id": 294649360,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661165471
    },
    {
        "content": "<p>From: Larry Paulson &lt;<a href=\"mailto:lp15@cam.ac.uk\">lp15@cam.ac.uk</a>&gt;<br>\nThe original point of the setup was to create something that behaved like a sequent calculus. The two examples not included (not_conjD and imp_to_disjD) are redundant in this context, though for the former youâ€™d need a detailed discussion of how negation is handled in order to see it. You could equally ask why impD is included as well as impCE, which is more general; the reason is that it handles an important special case well. It has to be admitted that there are many different ways of setting things up, and to find the best one would take a lot of experimentation. I did this in the 1990s (on largely first-order problems and set theory) but hardly at all since.</p>\n<p>Larry Paulson</p>",
        "id": 294649373,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661165475
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nThere is also a longer text by Larry from that time.  Today it is section <br>\n9.4 \"The Classical Reasoner\" in the isar-ref manual.</p>\n<p>Makarius</p>",
        "id": 294649434,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661165499
    }
]