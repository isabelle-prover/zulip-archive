[
    {
        "content": "<p>From: Lawrence Paulson &lt;<a href=\"mailto:lp15@cam.ac.uk\">lp15@cam.ac.uk</a>&gt;<br>\nDear Dominique,</p>\n<p>It’s important to remember that Isabelle/HOL is based on higher-order logic and that most of its extensions, including recursive functions, types and predicates, are derived from first principles. So there is a bootstrapping process. A general well-founded recursion theorem is proved and the recursive data type definition package makes use of that to make primrec available on the types it introduces.</p>\n<p>If you look at these session graph at <a href=\"https://isabelle.in.tum.de/dist/library/HOL/HOL/session_graph.pdf\">https://isabelle.in.tum.de/dist/library/HOL/HOL/session_graph.pdf</a></p>\n<p>it turns out that primrec is already available in theory Nat, where it provides primitive recursion on natural numbers, well before the function definition package in Fun_Def.</p>\n<p>The specific advantages described by others on this list are possible because primrec maps straightforwardly to internal recursion combinators with no need to check termination or deal with pattern matching.</p>\n<p>Larry Paulson</p>",
        "id": 294763679,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661200855
    },
    {
        "content": "<p>From: Dominique Unruh &lt;<a href=\"mailto:unruh@ut.ee\">unruh@ut.ee</a>&gt;<br>\nThanks for your answers.</p>\n<p>So, as an executive summary of the executive summary (including Manuel's <br>\nanswer), we could say: There are cases where primrec works and fun <br>\ndoesn't and vice versa. And if both work, use primrec because it's <br>\nfaster and some things might be easier later.</p>\n<p>Please correct me if that rule of thumb is wrong.</p>\n<p>I think it might be useful to cover primrec in the function definition <br>\ntutorial.</p>\n<p>Best wishes,<br>\nDominique.</p>",
        "id": 294763741,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661200891
    },
    {
        "content": "<p>From: Jasmin Blanchette via Cl-isabelle-users &lt;<a href=\"mailto:cl-isabelle-users@lists.cam.ac.uk\">cl-isabelle-users@lists.cam.ac.uk</a>&gt;<br>\nI'm not in charge of the \"functions\" tutorial, but a reference the other way does make sense. We already mentioned fun/function in the \"datatypes\" tutorial, but now I've just added (Isabelle/13d6b561b0ea) a paragraph capturing the essence of this thread.</p>\n<p>Jasmin</p>",
        "id": 294763994,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661201026
    },
    {
        "content": "<p>From: Dominique Unruh &lt;<a href=\"mailto:unruh@ut.ee\">unruh@ut.ee</a>&gt;<br>\nDear all,</p>\n<p>Isabelle has different commands for introducing recursive functions: <br>\nfun, function, primrec.</p>\n<p>The relationship between fun and function is clear to me: fun is just a <br>\nconvenience command that invokes function with some useful defaults.</p>\n<p>But I cannot figure out what primrec is meant for. From the <br>\ndocumentation (isar-ref), primrec does the same as fun, except that it <br>\nimposes additional limitations on the structure of the recursive <br>\nfunction. (And in contrast to the fun/function difference, it is not <br>\neasier/more compact to write.)</p>\n<p>So my question is: Is there any difference between primrec and fun in <br>\ncases when both can be used? In that case: which command tends to be <br>\npreferable? Why does primrec exist?</p>\n<p>Best wishes,<br>\nDominique.</p>",
        "id": 294764225,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661201143
    },
    {
        "content": "<p>From: Traytel  Dmitriy &lt;<a href=\"mailto:traytel@inf.ethz.ch\">traytel@inf.ethz.ch</a>&gt;<br>\nHi Dominique,</p>\n<p>this is a recurring topic on this mailing list. See e.g.:</p>\n<p><a href=\"https://lists.cam.ac.uk/pipermail/cl-isabelle-users/2017-July/msg00032.html\">https://lists.cam.ac.uk/pipermail/cl-isabelle-users/2017-July/msg00032.html</a><br>\n<a href=\"https://lists.cam.ac.uk/pipermail/cl-isabelle-users/2016-May/msg00037.html\">https://lists.cam.ac.uk/pipermail/cl-isabelle-users/2016-May/msg00037.html</a></p>\n<p>The executive summary is: Reasons fo using the more low-level but also light-weight primrec include:</p>\n<ul>\n<li>primrec works for infinitely branching or mutually recursive datatypes, cases in which fun frequently fails (e.g., due to lack of a size function) and function requires manual termination proofs</li>\n<li>documentation purposes (primrec means structural induction can be used when proving things about the functions; whereas fun may require structural or computational induction)</li>\n<li>speed</li>\n</ul>\n<p>Dmitriy</p>",
        "id": 294764359,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661201214
    },
    {
        "content": "<p>From: Manuel Eberl &lt;<a href=\"mailto:eberlm@in.tum.de\">eberlm@in.tum.de</a>&gt;<br>\nThere are also some things like parametricity and measurability that are<br>\nfairly easy to prove for primitive-recursive functions but can become<br>\nquite tedious for functions defined with ‘fun’.</p>\n<p>Manuel</p>",
        "id": 294764464,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661201278
    }
]