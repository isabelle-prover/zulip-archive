[
    {
        "content": "<p>From: Björn Bartels &lt;<a href=\"mailto:bbartels@cs.tu-berlin.de\">bbartels@cs.tu-berlin.de</a>&gt;<br>\nHi all,<br>\nwe just came across  the following problem when using the datatype command. The following datatype definition works when using Jedit but does not work when using Emacs as interface. In the previous distribution the example used to work with Emacs as well.</p>\n<p>theory test<br>\nimports Main<br>\nbegin</p>\n<p>datatype 'a tree =<br>\n           leaf \"'a\"<br>\n         | node \"nat \\&lt;Rightarrow&gt; 'a tree\"        </p>\n<p>datatype 'a dtype  = constr \"'a tree\"</p>\n<p>end</p>\n<p>When using Emacs, we get the following error message:</p>\n<p>*** Proof failed.<br>\n*** dtype_size fa (constr tree) = 0<br>\n***  1. Suc 0 = 0<br>\n*** 1 unsolved goal(s)!<br>\n*** The error(s) above occurred for the goal statement:<br>\n*** dtype_size fa (constr tree) = 0</p>\n<p>Thanks for any suggestions!</p>",
        "id": 294150346,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660849082
    },
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\nJust as another data point: I tried the development version with emacs<br>\nand it works.</p>\n<p>Tobias</p>",
        "id": 294150375,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660849088
    },
    {
        "content": "<p>From: Lukas Bulwahn &lt;<a href=\"mailto:bulwahn@in.tum.de\">bulwahn@in.tum.de</a>&gt;<br>\nI tried it myself as well on the development version (changeset <br>\n693d8d7bc3cd - the current tip):<br>\nIt works if you switch on quick_and_dirty, but it fails if you switch it <br>\noff.</p>\n<p>This succeeds:</p>\n<p>ML {* quick_and_dirty := true *}<br>\ndatatype 'a dtype  = constr \"'a tree\"</p>\n<p>But this fails:</p>\n<p>ML {* quick_and_dirty := false *}<br>\ndatatype 'a dtype  = constr \"'a tree\"</p>\n<p>Just a short explanation, why this differs:<br>\nIn quick-and-dirty mode, we actually skip proofs, which are <br>\nautomatically generated by packages, and just provide the theorems<br>\nwithout proof.<br>\nSwitching it off, the package will actually perform the proof, but in <br>\nthe case mentioned here, this proof method fails.</p>\n<p>It seems that your default settings actually differ on the two <br>\ninterfaces, JEdit and Emacs.</p>\n<p>We will have to investigate why the proof method actually breaks down in <br>\nthis case.</p>\n<p>Lukas</p>",
        "id": 294150403,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660849101
    },
    {
        "content": "<p>From: Brian Huffman &lt;<a href=\"mailto:huffman@in.tum.de\">huffman@in.tum.de</a>&gt;<br>\nCongratulations Björn, you've found a soundness bug in the datatype<br>\npackage! At least in quick and dirty mode, the datatype package<br>\ngenerates some unproven \"theorems\" that are contradictory. Here's a<br>\nproof of False that works if you are in quick and dirty mode:</p>\n<p>datatype 'a tree = leaf \"'a\" | node \"nat =&gt; 'a tree\"<br>\ndatatype 'a dtype  = constr \"'a tree\"</p>\n<p>lemma \"False\"<br>\nproof -<br>\n  have \"dtype_size fa (constr tree) = Suc 0\"<br>\n    unfolding dtype_size_def by simp<br>\n  also have \"dtype_size fa (constr tree) = 0\"<br>\n    by (rule dtype.size(1))<br>\n  finally show \"False\"<br>\n    by simp<br>\nqed</p>\n<p>This is a good reminder why quick and dirty mode is a bad idea. We<br>\nshould definitely make sure that the default is set to \"off\" in all<br>\nfuture releases, for both ProofGeneral and jEdit.</p>\n<ul>\n<li>Brian</li>\n</ul>",
        "id": 294150416,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660849107
    },
    {
        "content": "<p>From: Lukas Bulwahn &lt;<a href=\"mailto:bulwahn@in.tum.de\">bulwahn@in.tum.de</a>&gt;<br>\nOn changeset 693d8d7bc3cd, the issue is somehow hidden in the different <br>\nconditions (if null ts ...) of these two source code positions below.</p>\n<p>Maybe, one of two authors of this file could take a closer look at this <br>\npoint.</p>\n<p>Lukas</p>\n<p>diff -r 693d8d7bc3cd src/HOL/Tools/Function/size.ML<br>\n--- a/src/HOL/Tools/Function/size.ML    Fri Jan 20 09:28:54 2012 +0100<br>\n+++ b/src/HOL/Tools/Function/size.ML    Fri Jan 20 17:47:23 2012 +0100<br>\n@@ -105,7 +105,7 @@<br>\n               else us, i, j + 1))<br>\n                (cargs <del> cargs' </del> Ts) ([], 0, k);<br>\n          val t =</p>\n<ul>\n<li>\n<p>if null ts andalso (not b orelse not (exists (is_poly thy) <br>\ncargs'))</p>\n</li>\n<li>\n<p>if null ts andalso (not b orelse not (exists (is_poly thy) <br>\ncargs'))<br>\n            then <a href=\"http://HOLogic.zero\">HOLogic.zero</a><br>\n            else foldl1 plus (ts @ [HOLogic.Suc_zero])<br>\n        in<br>\n@@ -182,7 +182,7 @@<br>\n          HOLogic.mk_Trueprop (HOLogic.mk_eq<br>\n            (size_const $ list_comb (Const (cname, Ts ---&gt; T),<br>\n               map2 (curry Free) tnames Ts),</p>\n</li>\n<li>\n<p>if null ts then <a href=\"http://HOLogic.zero\">HOLogic.zero</a></p>\n</li>\n<li>if null ts then <a href=\"http://HOLogic.zero\">HOLogic.zero</a><br>\n             else foldl1 plus (ts @ [HOLogic.Suc_zero])))<br>\n        end;</li>\n</ul>",
        "id": 294150439,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660849116
    },
    {
        "content": "<p>From: Peter Gammie &lt;<a href=\"mailto:peteg42@gmail.com\">peteg42@gmail.com</a>&gt;<br>\n\"sorry\" only works if quick and dirty is switched on. I use that a lot when developing a proof interactively, as I expect everyone does.</p>\n<p>cheers<br>\npeter</p>",
        "id": 294150440,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660849119
    },
    {
        "content": "<p>From: Brian Huffman &lt;<a href=\"mailto:huffman@in.tum.de\">huffman@in.tum.de</a>&gt;<br>\nActually, you can use \"sorry\" in ProofGeneral even with<br>\nquick-and-dirty mode switched off, if you manually step through the<br>\nfile(s) containing \"sorry\".</p>\n<p>You only get the \"Cheating requires quick_and_dirty mode!\" error if an<br>\nimport statement causes Isabelle to load a theory file containing<br>\n\"sorry\". The workaround is to pre-load any offending files<br>\nindividually.</p>\n<p>Of course, if you have a large collection of interconnected theories,<br>\nand you use \"sorry\" in many different files, this might be a pain. But<br>\nin that case, you are always free to turn quick-and-dirty mode back<br>\non, at your own risk!</p>\n<ul>\n<li>Brian</li>\n</ul>",
        "id": 294150465,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660849130
    },
    {
        "content": "<p>From: Stefan Berghofer &lt;<a href=\"mailto:berghofe@in.tum.de\">berghofe@in.tum.de</a>&gt;<br>\nBjörn Bartels wrote:</p>\n<blockquote>\n<p>Hi all,<br>\nwe just came across  the following problem when using the datatype command. The following datatype definition works when using Jedit but does not work when using Emacs as interface. In the previous distribution the example used to work with Emacs as well.</p>\n</blockquote>\n<p>Hi Björn,</p>\n<p>thanks for reporting this. The problem has now been fixed in the current<br>\nrepository version of Isabelle, see</p>\n<p><a href=\"http://isabelle.in.tum.de/repos/isabelle/rev/fd21bbcbe61b\">http://isabelle.in.tum.de/repos/isabelle/rev/fd21bbcbe61b</a></p>\n<p>Greetings,<br>\nStefan</p>",
        "id": 294150501,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660849144
    }
]