[
    {
        "content": "<p>From: Andreas Lochbihler &lt;<a href=\"mailto:andreas.lochbihler@inf.ethz.ch\">andreas.lochbihler@inf.ethz.ch</a>&gt;<br>\nDear list,</p>\n<p>For debugging purposes, I'd like to disable the simprocs from the record package. <br>\nOtherwise, the simplifier trace with [[simp_debug]] is obfuscated by the trace of these <br>\nsimprocs. I tried [[simproc del: \"record\" record_eq record_upd]], but I only get the error <br>\nmessage that none of the simprocs exist. Next, I tried</p>\n<p>local_setup {*<br>\n   fn ctxt =&gt; ctxt delsimprocs [Record.simproc, Record.eq_simproc, Record.upd_simproc]<br>\n*}</p>\n<p>Then, print_simpset no longer lists these simprocs. Nevertheless, they still show up in <br>\nthe trace. Here's an example:</p>\n<p>lemma \"foo\" using [[simp_debug]] apply(simp)</p>\n<p>So, how can I get rid of these simprocs?</p>\n<p>By the way, does the new tracing facility for the simplifier provide control over <br>\nsimprocs, too?</p>\n<p>Best,<br>\nAndreas</p>",
        "id": 294324815,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660928207
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nOn Thu, 15 Jan 2015, Andreas Lochbihler wrote:</p>\n<blockquote>\n<p>I tried</p>\n<p>local_setup {*<br>\n fn ctxt =&gt; ctxt delsimprocs [Record.simproc, Record.eq_simproc, <br>\nRecord.upd_simproc]<br>\n*}</p>\n<p>Then, print_simpset no longer lists these simprocs.</p>\n</blockquote>\n<p>The 'local_setup' command operates on a local_theory, but above you merely <br>\ndowngrade it to a Proof.context, i.e. only the so-called \"auxiliary <br>\ncontext\" is affected, and the update is not really persistent.</p>\n<p>In contrast, the 'declaration' command is the usual way to update a <br>\nlocal_theory via ML declarations.  This is how it works for the above <br>\napplication:</p>\n<p>declaration ‹<br>\n   K (Simplifier.map_ss<br>\n       (fn ctxt =&gt; ctxt delsimprocs [Record.simproc, Record.eq_simproc, Record.upd_simproc]))<br>\n›</p>\n<p>Since the canonical way to maintain the Simplifier context via ML has <br>\nchanged several times over the years, I had to do myself a standard <br>\nhypersearch to find current applications in the sources, e.g. addsimprocs, <br>\naddloop.</p>\n<p>In a global theory situation it is also possible to use this form:</p>\n<p>setup ‹map_theory_simpset<br>\n   (fn ctxt =&gt; ctxt delsimprocs [Record.simproc, Record.eq_simproc, Record.upd_simproc])›</p>\n<blockquote>\n<p>By the way, does the new tracing facility for the simplifier provide <br>\ncontrol over simprocs, too?</p>\n</blockquote>\n<p>Not yet.</p>\n<p>Makarius</p>",
        "id": 294324827,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660928213
    },
    {
        "content": "<p>From: Andreas Lochbihler &lt;<a href=\"mailto:andreas.lochbihler@inf.ethz.ch\">andreas.lochbihler@inf.ethz.ch</a>&gt;<br>\nDear Makarius,</p>\n<p>Thanks a lot, this works fine. Just out of curiosity: Why does the Isar declaration <br>\n[[simproc del: record_eq]] not work?</p>\n<p>Cheers,<br>\nAndreas</p>",
        "id": 294324861,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660928225
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nThe record package is not localized, which means it uses quite old <br>\noperations like Simplifier.simproc_global (or Simplifier.mk_simproc and <br>\nthe bottom of it).</p>\n<p>In order to show up in the simproc name space within the context, tools <br>\nneed to use Simplifier.def_simproc or the corresponding Isar command <br>\n'simproc_setup'.</p>\n<p>Makarius</p>",
        "id": 294324874,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660928231
    }
]