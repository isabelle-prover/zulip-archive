[
    {
        "content": "<p>From: Matthew Fernandez &lt;<a href=\"mailto:matthew.fernandez@nicta.com.au\">matthew.fernandez@nicta.com.au</a>&gt;<br>\nHi all,</p>\n<p>The latest candidates for the upcoming Isabelle release contain some changes to reduce disk usage of heap images. So I<br>\nthought it might be a good time to ask other disk usage related questions. None of the below is intended to be<br>\ninterpreted as a request for changes to the upcoming release; just questions seeking clarification.</p>\n<p>When Isabelle detects that it is missing a component (Poly/ML, JDK, etc.) it fetches a tarball of this to<br>\n~/.isabelle/contrib and then decompresses it here. Each tarball contains necessary files for all supported platforms.<br>\nI.e. in the extreme, a component like Poly/ML contains subdirectories for 32-bit Linux, 64-bit Linux, 32-bit Mac OS,<br>\n64-bit Mac OS and 32-bit Cygwin. My question is, why is Isabelle fetching all these things that will remain unused on my<br>\nplatform? Is this the result of a \"disk space and bandwidth are free\" mode of thought? Or a decision made for ease of<br>\npackaging? None of this is meant as a criticism, I would just like to understand the motivation(s).</p>\n<p>My interest is driven by one of my machines where disk space <em>is</em> an issue. A quick scan of ~/isabelle/contrib reveals<br>\n2.7GB of files I could easily do without. A minimal first step to reducing this in future would seem to be to download<br>\nthe tarballs to a temporary location, then delete them after decompressing. Is there a need for them to persist? Perhaps<br>\nthere are some deeper issues I'm not aware of here.</p>\n<p>Thanks,<br>\nMatt</p>\n<hr>\n<p>The information in this e-mail may be confidential and subject to legal professional privilege and/or copyright. National ICT Australia Limited accepts no liability for any damage caused by this email or its attachments.</p>",
        "id": 294668534,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661172635
    },
    {
        "content": "<p>From: Rafal Kolanski &lt;<a href=\"mailto:xs@xaph.net\">xs@xaph.net</a>&gt;<br>\nI always carry a large bag of workarounds and little hope of upstream<br>\nchanges. So while your question awaits a more comprehensive answer, some<br>\nobservations:</p>\n<ul>\n<li>\n<p>you can delete the .tar.gz files in contrib, they don't get<br>\n  re-downloaded as long as the component itself exists</p>\n</li>\n<li>\n<p>inside the jdk directories, you can delete the platforms you don't<br>\n  need; e.g. jdk-8u72 is 1.4GB, but its x86_64-linux dir is only 353MB</p>\n</li>\n<li>\n<p>everything else doesn't occupy much space - closest candidate is<br>\n  polyml weighing in at a whopping 83MB</p>\n</li>\n</ul>\n<p>The above can be written into a script, although since component updates<br>\nhappen about twice a year I haven't bothered. On that note, could you<br>\nsend me your isabelle components mirror fallback mod?</p>\n<p>Raf.</p>",
        "id": 294668549,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661172643
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nOn Sun, 7 Feb 2016, Matthew Fernandez wrote:</p>\n<blockquote>\n<p>When Isabelle detects that it is missing a component (Poly/ML, JDK, <br>\netc.) it fetches a tarball of this to ~/.isabelle/contrib and then <br>\ndecompresses it here. Each tarball contains necessary files for all <br>\nsupported platforms. I.e. in the extreme, a component like Poly/ML <br>\ncontains subdirectories for 32-bit Linux, 64-bit Linux, 32-bit Mac OS, <br>\n64-bit Mac OS and 32-bit Cygwin. My question is, why is Isabelle <br>\nfetching all these things that will remain unused on my platform? Is <br>\nthis the result of a \"disk space and bandwidth are free\" mode of <br>\nthought?</p>\n</blockquote>\n<p>None of this is relevant for proper Isabelle distributions (releases or <br>\nintermediate snapshots made with \"isabelle makedist\").  All required <br>\ncomponents are bundled, and shrunk to the requirements of specific <br>\nplatforms.</p>\n<p>In contrast, the key purpose of cumulatively loaded components is to work <br>\nwith the Isabelle repository, e.g. for testing or continued development. <br>\nThis often happens with different platforms with a shared contrib <br>\ndirectory.</p>\n<p>It is also important to be able to walk through the history and have the <br>\ncorrect components available.  Admin/components within the repository <br>\nspecifies what is required at each point.  This explains, why \"isabelle <br>\ncomponents\" works monotonically, without ever deleting anything.</p>\n<blockquote>\n<p>Or a decision made for ease of packaging?</p>\n</blockquote>\n<p>Isabelle component management is already quite advanced: all efforts are <br>\nput into proper end-user bundles.  The administrative tool \"isabelle <br>\nmakedist_bundle\" delivers separate platform-specific bundles -- the ones <br>\nfrom the Isabelle download site.</p>\n<p>People hooked on the repository need to decide themselves which components <br>\nthey want to keep and which they want to delete.  I routinely dispose huge <br>\njdk things, when I have reasons to believe that I won't need them aany <br>\ntime soon.</p>\n<blockquote>\n<p>My interest is driven by one of my machines where disk space <em>is</em> an <br>\nissue. A quick scan of ~/isabelle/contrib reveals 2.7GB of files I could <br>\neasily do without.</p>\n</blockquote>\n<p>I have 20GB of local contrib stuff on a fast SSD.  It used to be 40GB a <br>\nfew weeks ago, before I cleaned it up a little.</p>\n<p>The remaining question is: How is this relevant to isabelle-users at all?</p>\n<p>Why not use the shrink-wrapped official release? (This is not a rhetoric <br>\nquestion, but the key question on this thread.)</p>\n<p>Makarius</p>",
        "id": 294668601,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661172665
    },
    {
        "content": "<p>From: Matthew Fernandez &lt;<a href=\"mailto:matthew.fernandez@nicta.com.au\">matthew.fernandez@nicta.com.au</a>&gt;<br>\nYou are completely correct, Makarius. I forgot that we (Data61) were using a repository snapshot, rather than a release.<br>\nApologies for the confusion. Some further clarification inline below.</p>\n<p>On 07/02/16 23:57, Makarius wrote:</p>\n<blockquote>\n<p>On Sun, 7 Feb 2016, Matthew Fernandez wrote:</p>\n<blockquote>\n<p>When Isabelle detects that it is missing a component (Poly/ML, JDK, etc.) it fetches a tarball of this to<br>\n~/.isabelle/contrib and then decompresses it here. Each tarball contains necessary files for all supported platforms.<br>\nI.e. in the extreme, a component like Poly/ML contains subdirectories for 32-bit Linux, 64-bit Linux, 32-bit Mac OS,<br>\n64-bit Mac OS and 32-bit Cygwin. My question is, why is Isabelle fetching all these things that will remain unused on<br>\nmy platform? Is this the result of a \"disk space and bandwidth are free\" mode of thought?</p>\n</blockquote>\n<p>None of this is relevant for proper Isabelle distributions (releases or intermediate snapshots made with \"isabelle<br>\nmakedist\").  All required components are bundled, and shrunk to the requirements of specific platforms.</p>\n<p>In contrast, the key purpose of cumulatively loaded components is to work with the Isabelle repository, e.g. for testing<br>\nor continued development. This often happens with different platforms with a shared contrib directory.</p>\n<p>It is also important to be able to walk through the history and have the correct components available.  Admin/components<br>\nwithin the repository specifies what is required at each point.  This explains, why \"isabelle components\" works<br>\nmonotonically, without ever deleting anything.</p>\n</blockquote>\n<p>Yes, I was not suggesting that \"isabelle components\" should ever delete older components.</p>\n<blockquote>\n<blockquote>\n<p>Or a decision made for ease of packaging?</p>\n</blockquote>\n<p>Isabelle component management is already quite advanced: all efforts are put into proper end-user bundles.  The<br>\nadministrative tool \"isabelle makedist_bundle\" delivers separate platform-specific bundles -- the ones from the Isabelle<br>\ndownload site.</p>\n<p>People hooked on the repository need to decide themselves which components they want to keep and which they want to<br>\ndelete.  I routinely dispose huge jdk things, when I have reasons to believe that I won't need them aany time soon.</p>\n<blockquote>\n<p>My interest is driven by one of my machines where disk space <em>is</em> an issue. A quick scan of ~/isabelle/contrib reveals<br>\n2.7GB of files I could easily do without.</p>\n</blockquote>\n<p>I have 20GB of local contrib stuff on a fast SSD.  It used to be 40GB a few weeks ago, before I cleaned it up a little.</p>\n<p>The remaining question is: How is this relevant to isabelle-users at all?</p>\n<p>Why not use the shrink-wrapped official release? (This is not a rhetoric question, but the key question on this thread.)</p>\n</blockquote>\n<p>Entirely correct. Sorry.</p>\n<hr>\n<p>The information in this e-mail may be confidential and subject to legal professional privilege and/or copyright. National ICT Australia Limited accepts no liability for any damage caused by this email or its attachments.</p>",
        "id": 294668626,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661172678
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nSo what are the reasons for people at Data61 using a repository snapshot?<br>\nI thought that vice had been given up in 2005.</p>\n<p>Or is it an official Isabelle release that has been \"spiced up\" by local <br>\npatches?</p>\n<p>In the latter case, I recommend to produce a proper release locally, with <br>\na name that is derived from the official one, but different from it. <br>\nE.g. like this:</p>\n<p>hg tag Isabelle2016-Data61<br>\n   Admin/Release/build -O -r Isabelle2016-Data61</p>\n<p>This works in Linux and Mac OS X (e.g. Mountain Lion), but the latter is <br>\nrequired to produce macos bundles.  Linux can produce only linux and <br>\nwindows bundles, and the fonts of documentation is bad, because Gerwin and <br>\nTobias like strange fonts.</p>\n<p>Makarius</p>",
        "id": 294668648,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661172684
    },
    {
        "content": "<p>From: Gerwin Klein &lt;<a href=\"mailto:Gerwin.Klein@nicta.com.au\">Gerwin.Klein@nicta.com.au</a>&gt;</p>\n<blockquote>\n<p>On 8 Feb 2016, at 10:06 AM, Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt; wrote:</p>\n<p>On Mon, 8 Feb 2016, Matthew Fernandez wrote:</p>\n<blockquote>\n<p>You are completely correct, Makarius. I forgot that we (Data61) were using a repository snapshot, rather than a release.</p>\n</blockquote>\n<blockquote>\n<blockquote>\n<p>Why not use the shrink-wrapped official release? (This is not a<br>\nrhetoric question, but the key question on this thread.)</p>\n</blockquote>\n<p>Entirely correct.</p>\n</blockquote>\n<p>So what are the reasons for people at Data61 using a repository snapshot?<br>\nI thought that vice had been given up in 2005.</p>\n<p>Or is it an official Isabelle release that has been \"spiced up\" by local patches?</p>\n</blockquote>\n<p>It is precisely that. It just looks like a repository setup for locals.</p>\n<blockquote>\n<p>In the latter case, I recommend to produce a proper release locally, with a name that is derived from the official one, but different from it. E.g. like this:</p>\n<p>hg tag Isabelle2016-Data61<br>\n Admin/Release/build -O -r Isabelle2016-Data61</p>\n</blockquote>\n<p>This is difficult from a configuration management point of view. Like in the Isabelle repository itself we want to be able to go back to old versions in history and have a link from our proofs to precisely the Isabelle version (change id, including any spice) and configuration that was applicable there. It’s also very useful to have the Isabelle repository directly there, to be able to study history, and to manage any additional spice as version-controlled branches.</p>\n<p>This means we effectively deal with a Isabelle repository setup. I’m happy with that trade-off, but some of us are more perfectionist ;-) I think with the information so far, we can optimise our setup, though.</p>\n<blockquote>\n<p>This works in Linux and Mac OS X (e.g. Mountain Lion), but the latter is required to produce macos bundles.  Linux can produce only linux and windows bundles, and the fonts of documentation is bad, because Gerwin and Tobias like strange fonts.</p>\n</blockquote>\n<p>Interesting. Do you mean the Concrete Maths font? I haven’t had any issues with it so far.</p>\n<p>Cheers,<br>\nGerwin</p>\n<hr>\n<p>The information in this e-mail may be confidential and subject to legal professional privilege and/or copyright. National ICT Australia Limited accepts no liability for any damage caused by this email or its attachments.</p>",
        "id": 294668661,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661172690
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nAs I have pointed out some years ago, the document in question is <br>\nprog-prove.  On Debianistic Linux systems (e.g. Ubuntu) the result looks <br>\nvery ugly, with low-resolution bitmap fonts.</p>\n<p>I guess the problem is this combination:</p>\n<p>\\usepackage[T1]{fontenc}<br>\n\\usepackage{ccfonts}<br>\n\\usepackage[euler-digits]{eulervm}</p>\n<p>See also Admin/Release/CHECKLIST:</p>\n<ul>\n<li>check scalable fonts, e.g. src/Doc/Prog_Prove (NOTE: T1 encoding<br>\n   requires cm-super fonts, which are usually available on MacTeX or<br>\n   Cygwin, but not on Ubuntu/Debian);</li>\n</ul>\n<p>The T1 problem was later avoided for regular LaTeX CM fonts:</p>\n<p>\\usepackage{lmodern}</p>\n<p>This explains why most Isabelle manuals have a very long underscore, but <br>\none that can be searched for in the PDF.</p>\n<p>Since T1 works uniformly with MacTeX (Mac OS X) and MikTeX (Windows), it <br>\nis probably just due to an \"improved\" version of TeXLive on Debian-based <br>\nsystems.  Someone should investigate the Debian repositories and figure <br>\nout which patches needs to be removed.</p>\n<p>Makarius</p>",
        "id": 294668699,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661172702
    },
    {
        "content": "<p>From: Gerwin Klein &lt;<a href=\"mailto:Gerwin.Klein@nicta.com.au\">Gerwin.Klein@nicta.com.au</a>&gt;<br>\nThanks, will investigate. Tobias and I are mostly building on Macs, so we don’t see the Linux version often.</p>\n<p>I’m at a summer school this week. Do we need this for the release or do I have time?</p>\n<p>Cheers,<br>\nGerwin</p>\n<hr>\n<p>The information in this e-mail may be confidential and subject to legal professional privilege and/or copyright. National ICT Australia Limited accepts no liability for any damage caused by this email or its attachments.</p>",
        "id": 294668804,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661172727
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nThis is not relevant for the release.  In the past few releases I always <br>\nmade sure that documents are built on Mac OS X.</p>\n<p>Makarius</p>",
        "id": 294668829,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661172738
    },
    {
        "content": "<p>From: Gerwin Klein &lt;<a href=\"mailto:Gerwin.Klein@nicta.com.au\">Gerwin.Klein@nicta.com.au</a>&gt;<br>\nOk.<br>\nGerwin</p>\n<hr>\n<p>The information in this e-mail may be confidential and subject to legal professional privilege and/or copyright. National ICT Australia Limited accepts no liability for any damage caused by this email or its attachments.</p>",
        "id": 294668865,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661172757
    }
]