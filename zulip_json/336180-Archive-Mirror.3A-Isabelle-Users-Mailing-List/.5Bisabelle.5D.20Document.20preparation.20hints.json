[
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nDear Isabelle users,</p>\n<p>with the deadline of ITP2014 approaching, there is a good chance that <br>\nseveral people are writing papers with the Isabelle document preparation <br>\nsystem as usual.  (Raw Latex became out of use for that almost 15 years <br>\nago.)</p>\n<p>For historic reasons, the document build process works in batch mode, and <br>\nis still not integrated into the Prover IDE.  This incurs slightly awkward <br>\noverhead when invoking the whole stack of sub-systems again and again on <br>\nthe command line.  See also the explanation of \"isabelle mkroot\" with <br>\nsubsequent \"isabelle build -D.\" in the Isabelle System manual.</p>\n<p>Since Isabelle/Scala is the actual system programming interface, not the <br>\ncommand line shell, some time can be saved by working continously within <br>\n\"isabelle scala\" like this:</p>\n<p>$ isabelle scala<br>\n   scala&gt; import isabelle._<br>\n   scala&gt; Build.build(options = Options.init, progress = new Build.Console_Progress(verbose = false), more_dirs = List((true, Path.current)))</p>\n<p>This imitates \"isabelle build -D.\" from the system manual.  The invocation <br>\nof <a href=\"http://Build.build\">Build.build</a> is repeated every time the document sources have been <br>\nedited and saved to the file-system.  The above avoids repeated re-booting <br>\nand re-warming of the JVM to run Isabelle/Scala, and considerably speeds <br>\nup the exploration of source dependencies.</p>\n<p>Further time may be saved by reducing the underlying session in the ROOT <br>\nfile to the bare minimum.  Full \"HOL\" is quite bulky -- sometimes \"Pure\" <br>\nis sufficient, or one may compose a suitable base image on the spot <br>\nstarting with the HOL theory Main, instead of Complex_Main.</p>\n<p>Hopefully, this is the last season that we are doing this archaic <br>\nbatch-processing of Isabelle documents ...</p>\n<p>Makarius</p>",
        "id": 294264473,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660915618
    },
    {
        "content": "<p>From: Timothy Bourke &lt;<a href=\"mailto:tim@tbrk.org\">tim@tbrk.org</a>&gt;</p>\n<ul>\n<li>Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt; [2014-01-07 16:17 +0100]:<br>\nThis is indeed timely advice! Thank you.</li>\n</ul>\n<p>What is the best way to skip proofs when generating .tex files in this<br>\nway? I was using \"ML {* Toplevel.skip_proofs := true *}\" but it seems<br>\nto have stopped working with Isabelle 2013-x (or I have started making<br>\na mistake).</p>\n<p>Or do experts put their development in a base image and then avoid the<br>\ntemptation to tune it while writing about it?</p>\n<p>Tim.<br>\n<a href=\"/user_uploads/14278/Hek9-hvaPQN59wo685du4QSr/signature.asc\">signature.asc</a></p>",
        "id": 294264490,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660915625
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nThis is none of the things that were broken in Isabelle2013-1 with nobody <br>\ntaking notice, but it is just a standard renovation of old-style ML <br>\nreference variables.  For several years these have a tendency to get an <br>\nofficial status as \"configuration options\" or (more recently) as <br>\npersistent \"system option\".</p>\n<p>Unlike \"skip_proofs\", the better-known option \"quick_and_dirty\" has a NEWS <br>\nentry about that in Isabelle2013-1:</p>\n<ul>\n<li>Uniform management of \"quick_and_dirty\" as system option (see also<br>\n\"isabelle options\"), configuration option within the context (see also<br>\nConfig.get in Isabelle/ML), and attribute in Isabelle/Isar.  Minor<br>\nINCOMPATIBILITY, need to use more official Isabelle means to access<br>\nquick_and_dirty, instead of historical poking into mutable reference.</li>\n</ul>\n<p>The \"more official Isabelle means\" to access such options are manifold, <br>\ne.g. in a session ROOT file:</p>\n<p>options [skip_proofs]<br>\n   theories<br>\n     Foo<br>\n     Bar<br>\n     Baz</p>\n<p>or for some particular theories within it:</p>\n<p>theories [skip_proofs]<br>\n     Foo<br>\n     Bar<br>\n   theories<br>\n     Baz</p>\n<p>or globally on the isabelle build command line:</p>\n<p>isabelle build -o skip_proofs -D.</p>\n<p>Since this thread is about eliminating the command shell, the latter form <br>\nworks in isabelle scala like this:</p>\n<p>val options = Options.init().bool(\"skip_proofs\") = true</p>\n<p>Build.build(options, progress = new Build.Console_Progress(verbose = false), more_dirs = List((true, Path.current)))</p>\n<p>Doing Options.init() only once also saves 50-100ms each time the build is <br>\ninvoked :-)</p>\n<p>Makarius</p>",
        "id": 294264501,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660915630
    },
    {
        "content": "<p>From: Timothy Bourke &lt;<a href=\"mailto:tim@tbrk.org\">tim@tbrk.org</a>&gt;</p>\n<ul>\n<li>Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt; [2014-01-07 22:43 +0100]:<blockquote>\n<p>On Tue, 7 Jan 2014, Timothy Bourke wrote:</p>\n<blockquote>\n<p>What is the best way to skip proofs when generating .tex files in this<br>\nway? I was using \"ML {* Toplevel.skip_proofs := true *}\" but it seems to<br>\nhave stopped working with Isabelle 2013-x (or I have started making a<br>\nmistake).</p>\n</blockquote>\n</blockquote>\n</li>\n</ul>\n<p>...</p>\n<blockquote>\n<p>The \"more official Isabelle means\" to access such options are manifold,<br>\ne.g. in a session ROOT file:</p>\n<p>options [skip_proofs]<br>\n  theories<br>\n    Foo<br>\n    Bar<br>\n    Baz</p>\n<p>or for some particular theories within it:</p>\n<p>theories [skip_proofs]<br>\n    Foo<br>\n    Bar<br>\n  theories<br>\n    Baz</p>\n<p>or globally on the isabelle build command line:</p>\n<p>isabelle build -o skip_proofs -D.</p>\n<p>Since this thread is about eliminating the command shell, the latter form<br>\nworks in isabelle scala like this:</p>\n<p>val options = Options.init().bool(\"skip_proofs\") = true</p>\n<p>Build.build(options, progress = new Build.Console_Progress(verbose =<br>\n  false), more_dirs = List((true, Path.current)))</p>\n</blockquote>\n<p>Very nice. Thank you.</p>\n<p>Tim.</p>\n<p>(I must have only grepped in 2013-1...)<br>\n<a href=\"/user_uploads/14278/n9LhBap3NmNPySAMnkt_iF_9/signature.asc\">signature.asc</a></p>",
        "id": 294264511,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660915637
    },
    {
        "content": "<p>From: Timothy Bourke &lt;<a href=\"mailto:tim@tbrk.org\">tim@tbrk.org</a>&gt;</p>\n<ul>\n<li>Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt; [2014-01-07 22:43 +0100]:<blockquote>\n<p>On Tue, 7 Jan 2014, Timothy Bourke wrote:</p>\n<blockquote>\n<p>What is the best way to skip proofs when generating .tex files in this<br>\nway? I was using \"ML {* Toplevel.skip_proofs := true *}\" but it seems to<br>\nhave stopped working with Isabelle 2013-x (or I have started making a<br>\nmistake).</p>\n</blockquote>\n</blockquote>\n</li>\n</ul>\n<p>...</p>\n<blockquote>\n<p>or globally on the isabelle build command line:</p>\n<p>isabelle build -o skip_proofs -D.</p>\n</blockquote>\n<p>In fact, I find that this builds with skip_proofs are faster but that<br>\nno .tex file is generated. Is the latter expected?</p>\n<p>Tim.<br>\n<a href=\"/user_uploads/14278/Ljj65H1laKirlUt4kyyC6d4b/signature.asc\">signature.asc</a></p>",
        "id": 294267194,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660915931
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nAbstractly, skip_proofs falls under the \"too many options\" syndrome of <br>\ncontempory Isabelle, so arbitrary behaviour can be expected in conjunction <br>\nwith other options, like document preparation. Since skip_proofs was once <br>\nadded as ad-hoc addition to the Isar top-level that was not exactly <br>\nwell-defined until today, it has fluctuated back and forth quite a lot <br>\nover the years.</p>\n<p>As far as I can see in Isabelle2013-2, skip_proofs now works with all Isar <br>\ncommands (including diagnostic commands and antiquotations), but its <br>\npresence in some theory blanks-out the generated .tex file.  (Document <br>\nprepration requires intermediate toplevel states, but skipped ones are <br>\nundefined.)</p>\n<p>So for the purpose of this thread, \"isabelle build -o skip_proofs\" does <br>\nnot make any sense with document preparation.  The flag should be added to <br>\nindividual theories within the session ROOT file, and the theories in <br>\nquestion won't appear in the document.</p>\n<p>Makarius</p>",
        "id": 294267201,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660915937
    },
    {
        "content": "<p>From: Mathias Fleury &lt;<a href=\"mailto:mathias.fleury12@gmail.com\">mathias.fleury12@gmail.com</a>&gt;<br>\n(trying to revive an old thread from January 2014, see<br>\n<a href=\"https://lists.cam.ac.uk/pipermail/cl-isabelle-users/2014-January/msg00021.html[1]\">https://lists.cam.ac.uk/pipermail/cl-isabelle-users/2014-January/msg00021.html[1]</a><br>\nfor the mail exchange).</p>\n<p>Dear list,</p>\n<blockquote>\n<p>Since Isabelle/Scala is the actual system programming interface, not<br>\nthe command line shell, some time can be saved by working continously<br>\nwithin \"isabelle scala\" like this:<br>\n  $ isabelle scala<br>\n  scala&gt; import isabelle.<br>\n  scala&gt; Build.build(options = Options.init, progress = new <br>\nBuild.Console_Progress(verbose = false), more_dirs = List((true, <br>\nPath.current)))</p>\n</blockquote>\n<blockquote>\n<p>This imitates \"isabelle build -D.\" from the system manual. The<br>\n invocation of <a href=\"http://Build.build\">Build.build</a> is repeated every time the document sources <br>\nhave<br>\n been edited and saved to the file-system. The above avoids repeated re<br>\n -bootingand re-warming of the JVM to run Isabelle/Scala, and <br>\nconsiderably<br>\n speeds up the exploration of source dependencies.</p>\n</blockquote>\n<p>I am interested in doing the document preparation and the building <br>\nautomatically  in Isabelle 2015-RC4. After looking at the build.scala file, I <br>\ncame up with:</p>\n<p>scala &gt;  Build.build(options = Options.init, progress = new <br>\nBuild.Console_Progress(verbose = false), select_dirs = List(Path.explode <br>\n(\"/path/to/directory\")))</p>\n<p>but this does not rebuild whenever a files is saved. Is there a way to <br>\nachieve this with Isabelle's upcoming version?</p>\n<p>Thanks in advance,<br>\nMathias</p>\n<blockquote>\n<p>Further time may be saved by reducing the underlying session in the<br>\nROOT file to the bare minimum. Full \"HOL\" is quite bulky -- sometimes<br>\n\"Pure\" is sufficient, or one may compose a suitable base image on the<br>\nspotstarting with the HOL theory Main, instead of Complex_Main.</p>\n</blockquote>\n<blockquote>\n<p>Hopefully, this is the last season that we are doing this archaic batch<br>\n-processing of Isabelle documents ...</p>\n</blockquote>\n<blockquote>\n<p>Makarius</p>\n</blockquote>\n<hr>\n<p>[1] <a href=\"https://lists.cam.ac.uk/pipermail/cl-isabelle-users/2014-January/msg00021.html\">https://lists.cam.ac.uk/pipermail/cl-isabelle-users/2014-January/msg00021.html</a></p>",
        "id": 294640303,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661161814
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nOn Thu, 14 May 2015, Mathias Fleury wrote:</p>\n<blockquote>\n<p>(trying to revive an old thread from January 2014, see<br>\n<a href=\"https://lists.cam.ac.uk/pipermail/cl-isabelle-users/2014-January/msg00021.html[1]\">https://lists.cam.ac.uk/pipermail/cl-isabelle-users/2014-January/msg00021.html[1]</a><br>\nfor the mail exchange).</p>\n</blockquote>\n<p>Back in January 2014, I was expressing the hope that it would be the last <br>\nseason with batch-mode document preparation, but it is still the situation <br>\ntoday.</p>\n<p>There have been small improvementes in the meantime:</p>\n<p>* The jEdit/Console/Scala plugin works better as a replacement for an<br>\n     external terminal (already in Isabelle2014).  This means there is no<br>\n     need to have a separate \"isabelle scala\" process running.<br>\n     Build.build() can be invoked directly in the JVM that runs jEdit as<br>\n     Java application and Isabelle/Scala/PIDE infrastructure.</p>\n<p>* In Isabelle2015-RC versions there is support for BibTeX files: context<br>\n     menu, context-sensitive token marker, SideKick parser.  See also the<br>\n     Isabelle/jEdit manual.</p>\n<p>More fundamental reforms are still in the pipeline.  Here is a recent <br>\nwrap-up of the main things that could be done to warp into the year 2015: <br>\n<a href=\"http://sketis.net/2015/proposal-document-preparation-improvements\">http://sketis.net/2015/proposal-document-preparation-improvements</a></p>\n<blockquote>\n<p>I am interested in doing the document preparation and the building<br>\nautomatically  in Isabelle 2015-RC4. After looking at the build.scala file, I<br>\ncame up with:</p>\n<p>scala &gt;  Build.build(options = Options.init, progress = new<br>\nBuild.Console_Progress(verbose = false), select_dirs = List(Path.explode<br>\n(\"/path/to/directory\")))</p>\n<p>but this does not rebuild whenever a files is saved. Is there a way to<br>\nachieve this with Isabelle's upcoming version?</p>\n</blockquote>\n<p>What exactly do you mean \"whenever a files is saved\"?  Event-oriented <br>\nupdate based on file-system or editor changes?</p>\n<p>The above invocation of Build.build() should check source dependencies <br>\nagainst the file-system each time it is invoked, but it has to be invoked <br>\nagain and again explicitly.  If that does not work, there is something <br>\nwrong elesewhere.</p>\n<p>It should be also possible to define an editor macro or menu entry to <br>\nrepeat the invocation above conveniently.  I do it myself in a <br>\nminimalistic way via the command-line history of the jEdit/Console plugin.</p>\n<p>A true reform would detach the document build from file-system state <br>\naltogether.  In our fine PIDE world the file-system is out and state is <br>\nout.</p>\n<p>Makarius</p>",
        "id": 294640376,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661161851
    },
    {
        "content": "<p>From: Mathias Fleury &lt;<a href=\"mailto:mathias.fleury12@gmail.com\">mathias.fleury12@gmail.com</a>&gt;<br>\nLe 15/05/2015 15:15, Makarius a écrit :</p>\n<blockquote>\n<p>On Thu, 14 May 2015, Mathias Fleury wrote:</p>\n<blockquote>\n<p>(trying to revive an old thread from January 2014, see<br>\n<a href=\"https://lists.cam.ac.uk/pipermail/cl-isabelle-users/2014-January/msg00021.html[1]\">https://lists.cam.ac.uk/pipermail/cl-isabelle-users/2014-January/msg00021.html[1]</a></p>\n<p>for the mail exchange).</p>\n</blockquote>\n<p>Back in January 2014, I was expressing the hope that it would be the<br>\nlast season with batch-mode document preparation, but it is still the<br>\nsituation today.</p>\n<p>There have been small improvementes in the meantime:</p>\n<p>* The jEdit/Console/Scala plugin works better as a replacement for an<br>\n    external terminal (already in Isabelle2014).  This means there is no<br>\n    need to have a separate \"isabelle scala\" process running.<br>\n    Build.build() can be invoked directly in the JVM that runs jEdit as<br>\n    Java application and Isabelle/Scala/PIDE infrastructure.</p>\n<p>* In Isabelle2015-RC versions there is support for BibTeX files:<br>\ncontext<br>\n    menu, context-sensitive token marker, SideKick parser.  See also the<br>\n    Isabelle/jEdit manual.</p>\n<p>More fundamental reforms are still in the pipeline.  Here is a recent<br>\nwrap-up of the main things that could be done to warp into the year<br>\n2015: <a href=\"http://sketis.net/2015/proposal-document-preparation-improvements\">http://sketis.net/2015/proposal-document-preparation-improvements</a><br>\nInteresting plans.</p>\n<blockquote>\n<p>I am interested in doing the document preparation and the building<br>\nautomatically  in Isabelle 2015-RC4. After looking at the build.scala<br>\nfile, I<br>\ncame up with:</p>\n<p>scala &gt;  Build.build(options = Options.init, progress = new<br>\nBuild.Console_Progress(verbose = false), select_dirs = List(Path.explode<br>\n(\"/path/to/directory\")))</p>\n<p>but this does not rebuild whenever a files is saved. Is there a way to<br>\nachieve this with Isabelle's upcoming version?</p>\n</blockquote>\n<p>What exactly do you mean \"whenever a files is saved\"?  Event-oriented<br>\nupdate based on file-system or editor changes?<br>\nUpdate based on file-system. I though the command you gave was already<br>\ndoing it.</p>\n<p>The above invocation of Build.build() should check source dependencies<br>\nagainst the file-system each time it is invoked, but it has to be<br>\ninvoked again and again explicitly.  If that does not work, there is<br>\nsomething wrong elesewhere.</p>\n<p>It should be also possible to define an editor macro or menu entry to<br>\nrepeat the invocation above conveniently.  I do it myself in a<br>\nminimalistic way via the command-line history of the jEdit/Console<br>\nplugin.<br>\nThanks for the advice,</p>\n</blockquote>\n<p>Mathias</p>\n<blockquote>\n<p>A true reform would detach the document build from file-system state<br>\naltogether.  In our fine PIDE world the file-system is out and state<br>\nis out.</p>\n<p>Makarius</p>\n</blockquote>",
        "id": 294640426,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661161869
    }
]