[
    {
        "content": "<p>From: Lukas Bulwahn &lt;<a href=\"mailto:bulwahn@in.tum.de\">bulwahn@in.tum.de</a>&gt;<br>\nHi all,</p>\n<p>the email snipplet below shows one of those often arising discussions <br>\nabout documentation of Isabelle's ML sources.</p>\n<p>In fact, documentation of ML sources come in various facets:</p>\n<ul>\n<li>the existing ML source</li>\n<li>the historical variants of the ML sources in the last twenty years</li>\n<li>the annotations to the changesets</li>\n<li>Isabelle's mailing lists</li>\n<li>the unchecked code comments, that usually tells you what did not work <br>\nin the past or could have been improved in the past</li>\n</ul>\n<p>When modifying existing implementations, it is certainly profitable to <br>\nspend an hour or two, investigating the sources and look at the changes, <br>\nand search through the mailing list. Often, subtle \"surprises\" have been <br>\ntouched before, and implementations go through a number of iterations <br>\nwith some \"pros\" and \"cons\".</p>\n<p>The ideas of the existing implementation is further documented in the <br>\nIsabelle implementation manual.<br>\nReading it provides a dense reference of concepts for people, that want <br>\nto understand concepts in more detail.</p>\n<p>The Isabelle developer tutorial provides an simple access to programming <br>\nin Isabelle with various examples, and a rather simplified view on some <br>\ntopic. It is helpful for starters and beginners, but also only scratches <br>\nthe surface of some functionalities.</p>\n<p>I envisaged the Quickcheck tool for Isabelle's ML (presented last week <br>\nin Munich) as some further project to address documentation of the sources.<br>\nIn the short term, I wanted that specifications would allow us to <br>\ndocument oddities in the system by grading surprising specifications of <br>\nfunctions, which could then be addressed at any point in the future if <br>\nwe consider the surprise severe enough to change.</p>\n<p>In the long term, I was thinking that users and developers could discuss <br>\ntheir expectations about functions in this formal setting of properties <br>\nor contracts, and the Quickcheck tool would motivate using <br>\nspecifications when implementing, and a run-time monitoring tool for <br>\nspecifications would ease changing code in the maintenance process.</p>\n<p>NB: Brian agreed with the idea of contracts, as he was pushing for more <br>\nfine-grained types. His ideas were much more intrusive changing the <br>\nimplementation, whereas specifications/contracts would only add some <br>\nfine-grained information in other files.</p>\n<p>In my opinion, there is very much documentation for Isabelle's ML <br>\nsources. As far as I see it, there are two further opportunities for <br>\nimprovements in a very long-term range:</p>\n<ul>\n<li>\n<p>Provide ways to cross-link the various documentation sources (and user <br>\ninterfaces to get all relevant documents)</p>\n</li>\n<li>\n<p>Provide more fine-grained descriptions (e.g., provide specs that can <br>\nbe checked with the Quickcheck tool) and investigate if this simplifies <br>\nor hinders our development process.</p>\n</li>\n</ul>\n<p>Lukas</p>",
        "id": 294225608,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660899836
    }
]