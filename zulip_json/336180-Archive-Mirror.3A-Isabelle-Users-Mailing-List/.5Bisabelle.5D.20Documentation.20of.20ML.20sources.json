[
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nOn Tue, 23 Oct 2012, Lukas Bulwahn wrote:</p>\n<blockquote>\n<p>The Isabelle developer tutorial provides an simple access to programming <br>\nin Isabelle with various examples, and a rather simplified view on some <br>\ntopic. It is helpful for starters and beginners, but also only scratches <br>\nthe surface of some functionalities.</p>\n<p>I envisaged the Quickcheck tool for Isabelle's ML (presented last week <br>\nin Munich) as some further project to address documentation of the <br>\nsources. In the short term, I wanted that specifications would allow us <br>\nto document oddities in the system by grading surprising specifications <br>\nof functions, which could then be addressed at any point in the future <br>\nif we consider the surprise severe enough to change.</p>\n<p>In the long term, I was thinking that users and developers could discuss <br>\ntheir expectations about functions in this formal setting of properties <br>\nor contracts, and the Quickcheck tool would motivate using <br>\nspecifications when implementing, and a run-time monitoring tool for <br>\nspecifications would ease changing code in the maintenance process.</p>\n</blockquote>\n<p>The funny thing is that I don't think myself in these categories when <br>\nreading or (re)writing sources.  In the past 20 years, I've always felt <br>\nmyself this discrepancy of what is being taught in class, and what you do <br>\nin practice to get very sophisticated systems working and keep them <br>\nrunning. What you teach in class has also change many times in that <br>\ntimespan, and there is no indication that the last word has been said now.</p>\n<p>I also want to point generically to several talks by Alan Kay on the web <br>\n(e.g. the one called \"Programming and Scaling\"), where he makes a critical <br>\nreflection on his past decades of shaping the programming language <br>\ncommunity.  He is now at 72 and has grown quite wise.  In this context, it <br>\nwould be an interesting research project to investigate what this received <br>\nIsabelle development actually is, i.e. turn things from the head on their <br>\nfeet.  In any case, I shall probably add some thoughtful Alan Kay <br>\ncitations to the Isabelle/Isar implementation manual.</p>\n<blockquote>\n<p>NB: Brian agreed with the idea of contracts, as he was pushing for more <br>\nfine-grained types. His ideas were much more intrusive changing the <br>\nimplementation, whereas specifications/contracts would only add some <br>\nfine-grained information in other files.</p>\n</blockquote>\n<p>That's an old topic.  One needs to be more specific about it. <br>\nHistorically, we've had situations where more detailed types have improved <br>\nthe situation (say type Graph.T module instead of former ad-hoc functions <br>\non lists of pairs), and sometimes types make things worse (e.g. every tool <br>\nhaving its own \"simpset\"-style thing, instead of using the universal <br>\nuntyped Proof.context in the proper way).</p>\n<blockquote>\n<p>In my opinion, there is very much documentation for Isabelle's ML sources. As <br>\nfar as I see it, there are two further opportunities for improvements in a <br>\nvery long-term range:<br>\n- Provide ways to cross-link the various documentation sources (and user <br>\ninterfaces to get all relevant documents)</p>\n</blockquote>\n<p>The main reference manuals (isar-ref, system, implementation) are already <br>\nformally marked-up in this respect.  It is merely a matter of improving <br>\nthe browser facilities to link it up with the Prover IDE, say.  So looking <br>\nat some ML snipped formally within the editor, one would get annotations / <br>\nlinks pointing to occurrences in the massive manuals, for further reading. <br>\nI've seen this work for Java libraries in Java IDEs, so it is not <br>\nrocked-science.</p>\n<blockquote>\n<ul>\n<li>Provide more fine-grained descriptions (e.g., provide specs that can <br>\nbe checked with the Quickcheck tool) and investigate if this simplifies <br>\nor hinders our development process.</li>\n</ul>\n</blockquote>\n<p>Without being specific about it, my spontaneous reaction is \"hinder\". <br>\nThere need to be convincing applications first: How would it improve the <br>\nactual problems that we occasionally have: wrong context used in some <br>\ntool, wrong use of \"free\" vs. \"fixed\" variables in the context, non-linear <br>\nuse of theory/local_theory.</p>\n<p>Anyway, comparing our code base with that of Java and its standard <br>\nlibraries, we are in a surprisingly good situation --- or Java is <br>\nsurprisingly bad.  Scala + library is better, but also faces problems we <br>\ncould never dream of in our pure ML world.</p>\n<p>Makarius</p>",
        "id": 294226121,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660900068
    }
]