[
    {
        "content": "<p>From: Mr Julian Fell &lt;<a href=\"mailto:julian.fell@uq.net.au\">julian.fell@uq.net.au</a>&gt;<br>\nHi, I’m fairly new to Isabelle/HOL so please bear with me if this is obvious. </p>\n<p>Is there any way to use an inductive method to prove laststate_seq_stop despite it being defined going backwards over the list, rather than forwards as per the list definition? I can obviously prove the base case, but the inductive step doesn’t match the correct pattern. </p>\n<p>datatype  ('a) Σ = <br>\n   state 'a<br>\n|   abortState</p>\n<p>datatype ('σ) step = <br>\n   stop<br>\n|   pgm 'σ<br>\n|   env 'σ</p>\n<p>function (sequential, domintros) laststate_seq :: \"('σ × ('σ Σ step list)) ⇒ ('σ Σ)\" where <br>\n \"laststate_seq (σ, []) = state σ\"<br>\n| \"laststate_seq (σ, xs) = (case last (xs) of <br>\n                                   pgm σ' ⇒ σ'|<br>\n                                   env σ' ⇒ σ'|<br>\n                                   stop   ⇒ (laststate_seq (σ, butlast (xs)))<br>\n                                )\"<br>\n apply auto<br>\n by (metis neq_Nil_conv)</p>\n<p>lemma laststate_seq_stop: \"last t = stop ⟹ laststate_seq (σ, t) = laststate_seq (σ, (butlast t))\"<br>\napply (induct t)<br>\napply (metis butlast.simps(1))<br>\n?????</p>\n<p>Any help with this would be very much appreciated.</p>\n<p>Thanks,<br>\nJulian.</p>",
        "id": 294646090,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661164135
    },
    {
        "content": "<p>From: Lars Hupel &lt;<a href=\"mailto:hupel@in.tum.de\">hupel@in.tum.de</a>&gt;<br>\nHi Julian,</p>\n<p>this occurs from time to time. I haven't tried out your concrete<br>\nexample, but there's a rule which could work for your case:<br>\n'rev_induct'. You can use it like this:</p>\n<p>apply (induction t rule: rev_induct)</p>\n<p>Hope that helps.</p>\n<p>Cheers<br>\nLars</p>",
        "id": 294646096,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661164138
    },
    {
        "content": "<p>From: Andreas Lochbihler &lt;<a href=\"mailto:andreas.lochbihler@inf.ethz.ch\">andreas.lochbihler@inf.ethz.ch</a>&gt;<br>\nDear Julian,</p>\n<p>if you want to use a different induction schema, you have to provide induct the name of <br>\nthe induction schema you want. For backwards structural induction over lists, there is <br>\nalready the theorem rev_induct. So you might try apply(induct t rule: rev_induct)</p>\n<p>Best,<br>\nAndreas</p>",
        "id": 294646111,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661164144
    },
    {
        "content": "<p>From: Peter Lammich &lt;<a href=\"mailto:lammich@in.tum.de\">lammich@in.tum.de</a>&gt;<br>\nConsider:</p>\n<p>datatype  ('a) Σ = <br>\n   state 'a<br>\n|   abortState</p>\n<p>datatype ('σ) step = <br>\n   stop<br>\n|   pgm 'σ<br>\n|   env 'σ</p>\n<p>function (sequential, domintros) laststate_seq :: \"('σ × ('σ Σ step<br>\nlist)) ⇒ ('σ Σ)\" where <br>\n \"laststate_seq (σ, []) = state σ\"<br>\n| \"laststate_seq (σ, xs) = (case last (xs) of <br>\n                                   pgm σ' ⇒ σ'|<br>\n                                   env σ' ⇒ σ'|<br>\n                                   stop   ⇒ (laststate_seq (σ, butlast<br>\n(xs)))<br>\n                                )\"<br>\n apply auto<br>\n by (metis neq_Nil_conv)</p>\n<p><strong>* Prove termination of your function </strong>*<br>\ntermination<br>\n  apply (relation \"{} &lt;<em>lex</em>&gt; measure length\")<br>\n  by auto</p>\n<p><strong>* Prove a usable simplification rule </strong>*<br>\nlemma [simp]: \"xs ≠[] ⟹ laststate_seq (σ, xs) = (case last (xs) of <br>\n                                   pgm σ' ⇒ σ'|<br>\n                                   env σ' ⇒ σ'|<br>\n                                   stop   ⇒ (laststate_seq (σ, butlast<br>\n(xs)))<br>\n                                )\"<br>\n  apply (cases xs) apply auto done</p>\n<p>lemma laststate_seq_stop: \"last t = stop ⟹ laststate_seq (σ, t) =<br>\nlaststate_seq (σ, (butlast t))\"<br>\napply (induct t rule: rev_induct)<br>\napply (metis butlast.simps(1))</p>\n<p><strong>* And your lemma is straightforward </strong>*<br>\napply auto<br>\ndone</p>\n<p>Cheers,<br>\n  Peter</p>",
        "id": 294646138,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661164157
    }
]