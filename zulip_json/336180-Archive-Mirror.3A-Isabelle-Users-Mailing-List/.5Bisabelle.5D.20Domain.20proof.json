[
    {
        "content": "<p>From: \"Roger H.\" &lt;<a href=\"mailto:s57076@hotmail.com\">s57076@hotmail.com</a>&gt;<br>\nHi,</p>\n<p>how can i prove</p>\n<p>lemma \"dom (SOME b. dom b = A) = A\"</p>\n<p>Thank you!</p>",
        "id": 294267360,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660916008
    },
    {
        "content": "<p>From: Peter Lammich &lt;<a href=\"mailto:lammich@in.tum.de\">lammich@in.tum.de</a>&gt;<br>\nOn Fr, 2014-01-17 at 18:03 +0200, Roger H. wrote:</p>\n<blockquote>\n<p>Hi,</p>\n<p>how can i prove</p>\n<p>lemma \"dom (SOME b. dom b = A) = A\"<br>\n</p>\n</blockquote>\n<p>You have to show that there is such a beast b, ie,</p>\n<p>proof -<br>\n  obtain b where \"dom b = A\" ...<br>\n  thus ?thesis <br>\n    sledgehammer (*Should find a proof now, using the rules for SOME,<br>\nprobably SomeI*)</p>\n<p>-- Peter</p>\n<blockquote>\n<p>Thank you!<br>\n</p>\n</blockquote>",
        "id": 294267369,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660916010
    },
    {
        "content": "<p>From: Manuel Eberl &lt;<a href=\"mailto:eberlm@in.tum.de\">eberlm@in.tum.de</a>&gt;<br>\nOn my system, the nicest proof sledgehammer finds (after I provide a<br>\nsuitable witness, as Peter suggested) is something like  \"by (metis<br>\n(lifting, full_types) dom_const dom_restrict inf_top.left_neutral<br>\nsomeI_ex)\", which takes over a second to run.</p>\n<p>These proofs often get a bit tricky because Higher Order Unification<br>\ndoes strange things with the someI/someI_ex rules and therefore, one<br>\noften has to instantiate them manually. I would prove your lemmas like this:</p>\n<p>lemma \"dom (SOME b. dom b = A) = A\"<br>\n  by (rule someI_ex[where P = \"λb. dom b = A\"],<br>\n      rule exI[where x = \"(λ_. Some undefined) |` A\"], simp)</p>\n<p>Or, alternatively, if you prefer a more readable Isar proof:</p>\n<p>lemma \"dom (SOME b. dom b = A) = A\"<br>\nproof-<br>\n  let ?f = \"(λ_. Some undefined) |` A\"<br>\n  have \"dom ?f = A\" by simp<br>\n  thus ?thesis by (rule someI[where P = \"λb. dom b = A\"])<br>\nqed</p>\n<p>In case you're wondering what \"(λ_. Some undefined) |<code> A\" is: \"(λ_. Some\nundefined)\" is simply a partial function that is defined everywhere and\nalways returns \"undefined\", which is some fixed value of your codomain\ntype about which you know nothing – except that it exists. |</code> A then<br>\nrestricts this function to A, i.e. returns \"None\" everywhere except for<br>\nvalues in A. You could also write \"(λx. if x ∈ A then Some undefined<br>\nelse None)\"</p>\n<p>Note that without the explicit \"where\" instantiations in someI and<br>\nsomeI_ex, it does not work because unification  does not produce the<br>\nunifier I want. In fact, I'm curious as to why this happens myself. Can<br>\nanybody explain this?</p>\n<p>Cheers,<br>\nManuel</p>",
        "id": 294267383,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660916017
    }
]