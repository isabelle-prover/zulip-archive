[
    {
        "content": "<p>From: Andreas Lochbihler &lt;<a href=\"mailto:andreas.lochbihler@kit.edu\">andreas.lochbihler@kit.edu</a>&gt;<br>\nWhen I declare mixfix notation with a specification command (definition, fun, <br>\ninductive, primrec) inside an unnamed context that fixes a parameter, I get a <br>\nwarning \"Dropping global mixfix syntax\".</p>\n<p>context fixes n :: nat begin<br>\ndefinition foo :: nat (\"myfoo\") where \"foo = n\"<br>\nend</p>\n<p>I can avoid this warning if I use the notation command explicitly:</p>\n<p>context fixes n :: nat begin<br>\ndefinition foo :: nat where \"foo = n\"<br>\nnotation foo (\"myfoo\")<br>\nend</p>\n<p>Is there any reason why I should not use mixfix syntax with specifications in <br>\nsuch contexts?</p>\n<p>Andreas</p>",
        "id": 294163480,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660854100
    },
    {
        "content": "<p>From: Florian Haftmann &lt;<a href=\"mailto:florian.haftmann@informatik.tu-muenchen.de\">florian.haftmann@informatik.tu-muenchen.de</a>&gt;<br>\nAccording to my understanding of the sources, the technical difference<br>\nbetween both constructs is that in the first, the mixfix syntax has an<br>\nexplicit representation in the local theory stack as part of the binding<br>\nand thus its non-propagation to the background theory can be reported by<br>\nthe system explicitly, whereas in the latter case we have a generic<br>\nsyntax declaration, which is not propagated to the background theory<br>\nsince it is not »pervasive« (see files<br>\nsrc/Pure/Isar/(specification|local_theory|named_target|generic_target).ML).</p>\n<p>With my current understanding, your specification is fine, and it is<br>\ndoubtful about which misguided expectation the user is supposed to be<br>\nwarned.  But there might be deeper reasons for this.</p>\n<p>Florian<br>\n<a href=\"/user_uploads/14278/aFGwDnMHo4u5BrJSLPGijyaL/signature.asc\">signature.asc</a></p>",
        "id": 294164995,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660854395
    }
]