[
    {
        "content": "<p>From: Peter Lammich &lt;<a href=\"mailto:peter.lammich@uni-muenster.de\">peter.lammich@uni-muenster.de</a>&gt;<br>\nHere's the missing dual version (join_semimorph) of the lemma<br>\nHOL/Lattice/Lattice.meet_semimorph.</p>\n<p>btw. Wasn't there a special email address where to send such lemmas ?</p>\n<p>regards<br>\n    Peter</p>\n<p>text {*<br>\n  \\medskip A semi-morphisms is a function $f$ that preserves the<br>\n  lattice operations in the following manner: @{term \"f (x \\&lt;sqinter&gt; y)<br>\n\\&lt;sqsubseteq&gt; f x<br>\n  \\&lt;sqinter&gt; f y\"} and @{term \"f x \\&lt;squnion&gt; f y \\&lt;sqsubseteq&gt; f (x<br>\n\\&lt;squnion&gt; y)\"}, respectively.  Any of<br>\n  these properties is equivalent with monotonicity.<br>\n<em>}  (</em> FIXME dual version !? *)</p>\n<p>theorem meet_semimorph:<br>\n  \"(\\&lt;And&gt;x y. f (x \\&lt;sqinter&gt; y) \\&lt;sqsubseteq&gt; f x \\&lt;sqinter&gt; f y)<br>\n\\&lt;equiv&gt; (\\&lt;And&gt;x y. x \\&lt;sqsubseteq&gt; y \\&lt;Longrightarrow&gt; f x<br>\n\\&lt;sqsubseteq&gt; f y)\"<br>\n[...]</p>\n<p>Here's the dual version:</p>\n<p>lemma join_semimorph: \"(\\&lt;And&gt;x y. f x \\&lt;squnion&gt; f y \\&lt;sqsubseteq&gt; f (x<br>\n\\&lt;squnion&gt; y)) \\&lt;equiv&gt; (\\&lt;And&gt;x y. x \\&lt;sqsubseteq&gt; y \\&lt;Longrightarrow&gt;<br>\nf x \\&lt;sqsubseteq&gt; f y)\"<br>\nproof<br>\n  assume morph: \"\\&lt;And&gt;x y. f x \\&lt;squnion&gt; f y \\&lt;sqsubseteq&gt; f (x<br>\n\\&lt;squnion&gt; y)\"<br>\n  fix x y :: \"'a::lattice\"<br>\n  assume S: \"x \\&lt;sqsubseteq&gt; y\"<br>\n  have \"f x \\&lt;sqsubseteq&gt; f x \\&lt;squnion&gt; f y\" by (rule join_upper1)<br>\n  also have \"\\&lt;dots&gt; \\&lt;sqsubseteq&gt; f (x \\&lt;squnion&gt; y)\" by (rule morph)<br>\n  also from S have \"\\&lt;dots&gt; = f y\" by (simp add: join_related)<br>\n  finally show \"f x \\&lt;sqsubseteq&gt; f y\" .<br>\nnext<br>\n  assume mono: \"\\&lt;And&gt;x y. x \\&lt;sqsubseteq&gt; y \\&lt;Longrightarrow&gt; f x<br>\n\\&lt;sqsubseteq&gt; f y\"<br>\n  show \"\\&lt;And&gt;x y. f x \\&lt;squnion&gt; f y \\&lt;sqsubseteq&gt; f (x \\&lt;squnion&gt; y)\"<br>\n  proof -<br>\n    fix x y<br>\n    show \"f x \\&lt;squnion&gt; f y \\&lt;sqsubseteq&gt; f (x \\&lt;squnion&gt; y)\"<br>\n    proof<br>\n      have \"x \\&lt;sqsubseteq&gt; x \\&lt;squnion&gt; y\" .. thus \"f x \\&lt;sqsubseteq&gt; f<br>\n(x \\&lt;squnion&gt; y)\" by (rule mono)<br>\n      have \"y \\&lt;sqsubseteq&gt; x \\&lt;squnion&gt; y\" .. thus \"f y \\&lt;sqsubseteq&gt; f<br>\n(x \\&lt;squnion&gt; y)\" by (rule mono)<br>\n    qed<br>\n  qed<br>\nqed</p>",
        "id": 294053400,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660820556
    },
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;</p>\n<blockquote>\n<p>Here's the missing dual version (join_semimorph) of the lemma<br>\nHOL/Lattice/Lattice.meet_semimorph.</p>\n</blockquote>\n<p>We will add your contributions, thanks.</p>\n<blockquote>\n<p>btw. Wasn't there a special email address where to send such lemmas ?</p>\n</blockquote>\n<p>There was, but we closed it down because almost all we ever got was spam.</p>\n<p>Tobias</p>\n<blockquote>\n<p>regards<br>\n    Peter</p>\n<p>text {*<br>\n  \\medskip A semi-morphisms is a function $f$ that preserves the<br>\n  lattice operations in the following manner: @{term \"f (x \\&lt;sqinter&gt; y)<br>\n\\&lt;sqsubseteq&gt; f x<br>\n  \\&lt;sqinter&gt; f y\"} and @{term \"f x \\&lt;squnion&gt; f y \\&lt;sqsubseteq&gt; f (x<br>\n\\&lt;squnion&gt; y)\"}, respectively.  Any of<br>\n  these properties is equivalent with monotonicity.<br>\n<em>}  (</em> FIXME dual version !? *)</p>\n<p>theorem meet_semimorph:<br>\n  \"(\\&lt;And&gt;x y. f (x \\&lt;sqinter&gt; y) \\&lt;sqsubseteq&gt; f x \\&lt;sqinter&gt; f y)<br>\n\\&lt;equiv&gt; (\\&lt;And&gt;x y. x \\&lt;sqsubseteq&gt; y \\&lt;Longrightarrow&gt; f x<br>\n\\&lt;sqsubseteq&gt; f y)\"<br>\n[...]</p>\n<p>Here's the dual version:</p>\n<p>lemma join_semimorph: \"(\\&lt;And&gt;x y. f x \\&lt;squnion&gt; f y \\&lt;sqsubseteq&gt; f (x<br>\n\\&lt;squnion&gt; y)) \\&lt;equiv&gt; (\\&lt;And&gt;x y. x \\&lt;sqsubseteq&gt; y \\&lt;Longrightarrow&gt;<br>\nf x \\&lt;sqsubseteq&gt; f y)\"<br>\nproof<br>\n  assume morph: \"\\&lt;And&gt;x y. f x \\&lt;squnion&gt; f y \\&lt;sqsubseteq&gt; f (x<br>\n\\&lt;squnion&gt; y)\"<br>\n  fix x y :: \"'a::lattice\"<br>\n  assume S: \"x \\&lt;sqsubseteq&gt; y\"<br>\n  have \"f x \\&lt;sqsubseteq&gt; f x \\&lt;squnion&gt; f y\" by (rule join_upper1)<br>\n  also have \"\\&lt;dots&gt; \\&lt;sqsubseteq&gt; f (x \\&lt;squnion&gt; y)\" by (rule morph)<br>\n  also from S have \"\\&lt;dots&gt; = f y\" by (simp add: join_related)<br>\n  finally show \"f x \\&lt;sqsubseteq&gt; f y\" .<br>\nnext<br>\n  assume mono: \"\\&lt;And&gt;x y. x \\&lt;sqsubseteq&gt; y \\&lt;Longrightarrow&gt; f x<br>\n\\&lt;sqsubseteq&gt; f y\"<br>\n  show \"\\&lt;And&gt;x y. f x \\&lt;squnion&gt; f y \\&lt;sqsubseteq&gt; f (x \\&lt;squnion&gt; y)\"<br>\n  proof -<br>\n    fix x y<br>\n    show \"f x \\&lt;squnion&gt; f y \\&lt;sqsubseteq&gt; f (x \\&lt;squnion&gt; y)\"<br>\n    proof<br>\n      have \"x \\&lt;sqsubseteq&gt; x \\&lt;squnion&gt; y\" .. thus \"f x \\&lt;sqsubseteq&gt; f<br>\n(x \\&lt;squnion&gt; y)\" by (rule mono)<br>\n      have \"y \\&lt;sqsubseteq&gt; x \\&lt;squnion&gt; y\" .. thus \"f y \\&lt;sqsubseteq&gt; f<br>\n(x \\&lt;squnion&gt; y)\" by (rule mono)<br>\n    qed<br>\n  qed<br>\nqed<br>\n</p>\n</blockquote>",
        "id": 294053409,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660820562
    }
]