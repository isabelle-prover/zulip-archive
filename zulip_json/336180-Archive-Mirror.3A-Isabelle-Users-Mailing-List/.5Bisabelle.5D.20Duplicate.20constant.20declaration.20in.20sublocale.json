[
    {
        "content": "<p>From: Lars Noschinski &lt;<a href=\"mailto:noschinl@in.tum.de\">noschinl@in.tum.de</a>&gt;<br>\nHi,</p>\n<p>I have locale A, B and I want to declare B as a sublocale of A. In doing <br>\nso, some of the constants in A can be replaced by simpler ones. I tried <br>\nto use the same names first, but got the following error from the <br>\nsublocale command:</p>\n<p>Duplicate constant declaration \"local.g\" vs. \"local.g\"</p>\n<p>This is not to surprising. However, if I change the definition of g in B <br>\nby removing the explicit type annotation (or use some other type <br>\nvariable there), the sublocale command succeeds (of course, this is not <br>\na solution to my problem, because I want to have exactly the specified <br>\ntype for my constant).</p>\n<p>Can anyone explain to me what is happening here? Is there a way to <br>\ndeclare B a sublocale of A without adding a prefix to A?</p>\n<p>-- Lars</p>\n<p>=====================<br>\ntheory Sublocale_Equations imports Main<br>\nbegin</p>\n<p>record ('a,'b) rec =<br>\n   proj :: \"'b ⇒ 'a\"</p>\n<p>locale A = fixes G :: \"('a, 'b) rec\" begin</p>\n<p>definition g :: \"'a ⇒ 'b  ⇒ bool\" where<br>\n   \"g u e = (proj G e = u)\"</p>\n<p>end</p>\n<p>locale B = fixes dummy :: 'a begin</p>\n<p>definition \"to_rec = ⦇ proj = (fst :: 'a × 'a ⇒ 'a) ⦈\"</p>\n<p>definition g  :: \"'a ⇒ ('a × 'a) ⇒ bool\" where<br>\n   \"g u e = (fst e = u)\"</p>\n<p>lemma [simp]: \"proj to_rec = fst\" by (auto simp: to_rec_def)</p>\n<p>lemma [simp]:<br>\n   \"A.g to_rec = g\"<br>\nby (auto simp: g_def A.g_def fun_eq_iff to_rec_def)</p>\n<p>end</p>\n<p>sublocale B ⊆ A \"to_rec\"<br>\n    where \"proj to_rec = fst\" and \"A.g to_rec = B.g\"<br>\n   apply unfold_locales<br>\n   apply auto<br>\n   done<br>\n=======</p>",
        "id": 294240117,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660906604
    },
    {
        "content": "<p>From: Andreas Lochbihler &lt;<a href=\"mailto:andreas.lochbihler@inf.ethz.ch\">andreas.lochbihler@inf.ethz.ch</a>&gt;<br>\nHi Lars,</p>\n<p>This looks really weird and I don't have an explanation, either, But you can make B a <br>\nsublocale of A if you move g's definition in A into the locale declaration:</p>\n<p>locale A = fixes G :: \"('a, 'b) rec\"<br>\n   fixes g :: \"'a =&gt; 'b =&gt; bool\"<br>\n   defines g_def: \"g u e == proj G e = u\"<br>\nbegin<br>\nend</p>\n<p>Andreas</p>",
        "id": 294240126,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660906610
    },
    {
        "content": "<p>From: Lars Noschinski &lt;<a href=\"mailto:noschinl@in.tum.de\">noschinl@in.tum.de</a>&gt;<br>\nHi Andreas,</p>\n<p>Thanks for your suggestion. Unfortunately, this is not an option for me <br>\nas g is defined much later than the the locale.</p>\n<p>-- Lars</p>",
        "id": 294240196,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660906635
    },
    {
        "content": "<p>From: Florian Haftmann &lt;<a href=\"mailto:florian.haftmann@informatik.tu-muenchen.de\">florian.haftmann@informatik.tu-muenchen.de</a>&gt;<br>\nHi Lars,</p>\n<p>I have no concrete idea, but I guess this is due to the pitfalls of<br>\nparsing and processing those interpretation expressions, as Clemens has<br>\nindicated on a similar thread on isabelle-dev.</p>\n<p>Cheers,<br>\n    Florian<br>\n<a href=\"/user_uploads/14278/_SzRFjeAQ07GNjuHSS8hd24K/signature.asc\">signature.asc</a></p>",
        "id": 294241223,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660907046
    }
]