[
    {
        "content": "<p>From: Thomas Genet &lt;<a href=\"mailto:Thomas.Genet@irisa.fr\">Thomas.Genet@irisa.fr</a>&gt;<br>\nDear Isabelle Users,</p>\n<p>I am looking for the equivalent of \"Efficient_nat\" but for integers, <br>\nleading to exported code that uses machine integers rather than a term <br>\nrepresentation.</p>\n<p>Best regards,</p>\n<p>Thomas</p>",
        "id": 294151753,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660849561
    },
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\nI believe Library/Code_Integer is what you need to load.</p>\n<p>Tobias</p>",
        "id": 294151818,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660849573
    },
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\nPS No, you don't get machine integers, that would be unsound. You get<br>\nbig integers, which are language specific. I assume that in most of the<br>\nlanguages we support big integers are like machine integers plus some<br>\nfixed overhead, as long as you stay in the machine integer range.</p>",
        "id": 294151832,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660849579
    },
    {
        "content": "<p>From: Thomas Genet &lt;<a href=\"mailto:Thomas.Genet@irisa.fr\">Thomas.Genet@irisa.fr</a>&gt;<br>\nThanks a lot Tobias, this is even better that what I expected!</p>\n<p>Thomas</p>",
        "id": 294151846,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660849585
    },
    {
        "content": "<p>From: Filip Maric &lt;<a href=\"mailto:filip@matf.bg.ac.rs\">filip@matf.bg.ac.rs</a>&gt;<br>\nHello,</p>\n<p>although it is generally unsound, is there still a simple way to get <br>\nmachine integers?</p>\n<p>I have an application that uses only positive integers between 0 and 2^12 <br>\nand the only operation performed on these numbers is bitwise disjunction <br>\n(which leaves them in this range). In the logic, I used the nat type and <br>\ndefine the bit-or using div/mod, but, of course, this is very slow when <br>\nexecuted (proof checking takes almost half an hour since there is a lot <br>\ncomputation involved). Since the range is bounded, there is a <br>\n\"meta-theoretic\" argument that machine integers would not introduce <br>\nunsoundness, so I wonder if it is possible to \"cheat\" and use them and <br>\ninstruct the code generator to call the target-language bit-or in place of <br>\nmy div/mod defined bit-or (I tried something like code_const \"bitor\" (SML <br>\n\"IntInf.orb ((_), (_))\") (Haskell infixl 6 \"(.|.)\"), but it did not give <br>\nexpected efficiency since big integers are used). Evaluations are used <br>\nwithin a \"proof-by-evaluation\" paradigm and I use the method \"by eval\".</p>\n<p>I suppose the other option would be not to use nats but machine words in <br>\nthe logic level, but then the formalization would be a bit more <br>\ncomplicated, and I not sure what theory I should start from (I assume <br>\nthere is such a formalization in the Library)?</p>\n<p>Thank you very much,<br>\nFilip</p>",
        "id": 294151957,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660849628
    },
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\nYou can do anything you want, at your own risk, if you modify what the<br>\ncode generator turns a certain type into. See the code generation<br>\ndocumentation and see what Code_Integer does.</p>\n<p>Tobias</p>",
        "id": 294151992,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660849643
    },
    {
        "content": "<p>From: Florian Haftmann &lt;<a href=\"mailto:florian.haftmann@informatik.tu-muenchen.de\">florian.haftmann@informatik.tu-muenchen.de</a>&gt;<br>\nHi Filip,</p>\n<p>if you really only need disjunction, I would recommend the following:</p>\n<ul>\n<li>\n<p>define your own type for positive integers between 0 and 2^12;<br>\nHOL/Library/Dlist.thy (among others) is a helpful example to glimpse from</p>\n</li>\n<li>\n<p>setup code generation for that type as sketched above.</p>\n</li>\n</ul>\n<p>There is a formalization of bit-arithmetic in HOL/Word, but it is not<br>\nvery suitable to setup a customary code generation for specific target<br>\nlanguages because the bit length is encoded into a type argument, a<br>\nconcept which cannot be mapped straighforwardly to target languages.</p>\n<p>Hope this helps,<br>\n    Florian<br>\n<a href=\"/user_uploads/14278/gu1UNyfhyI8gNWoJDj8hORRs/signature.asc\">signature.asc</a></p>",
        "id": 294152018,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660849656
    }
]