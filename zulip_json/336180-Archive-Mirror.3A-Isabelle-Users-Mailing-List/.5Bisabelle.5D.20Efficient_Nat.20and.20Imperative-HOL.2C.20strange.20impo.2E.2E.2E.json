[
    {
        "content": "<p>From: Andreas Lochbihler &lt;<a href=\"mailto:andreas.lochbihler@inf.ethz.ch\">andreas.lochbihler@inf.ethz.ch</a>&gt;<br>\nHi Peter,</p>\n<p>the code generator tutorial tells you that you should list theories at the end of the <br>\nimports list if they are adaptation theories for code generation like Efficient_Nat. Upon <br>\nprocessing the import list, Isabelle merges the theory data of all the imports in the <br>\ngiven list according to the merge operation of the theory data. If you now look at the <br>\nmerge operation in src/Tools/Code/code_target.ML, you see that it always prefers later <br>\nimports. If you add the empty theory A at the end of the import list, all the imports that <br>\nA inherits from Main will overwrite those from Efficient_Nat and Imperative_HOL.</p>\n<p>The code setup in Imperative_HOL requires that the type nat be mapped to Natural in Scala; <br>\nHeap_Monad therefore imports Code_Natural, which contains the following declaration:</p>\n<p>code_type code_numeral (Scala \"Natural\")</p>\n<p>This conflicts with the declaration from Code_Numeral that is valid in A (via the Main <br>\nimport):</p>\n<p>code_type code_numeral (Scala \"BigInt\")</p>\n<p>Now, if you import A after Imperative_HOL and Efficient_Nat, the former's declaration wins <br>\nover the latter's and the type error manifests itself.</p>\n<p>The whole trouble arises from a sloppy handling of target numerals in Isabelle2013. The <br>\ntype code_numeral is isomorphic to nat, but implemented by arbitrary precision integers of <br>\nthe target language (which also contain negative numbers). Code_Natural wraps these <br>\ntarget-language integers in a new type Natural for Haskell and Scala, but I don't know <br>\nwhy. In the development version, Florian has renovated the whole business with target <br>\nlanguage numerals such that there are now separate types for all integers and non-negative <br>\nintegers. This hopefully solves your problem in the next release although I have not tried <br>\nit yet.</p>\n<p>Hope this helps,<br>\nAndreas</p>",
        "id": 294243480,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660907979
    },
    {
        "content": "<p>From: Peter Lammich &lt;<a href=\"mailto:lammich@in.tum.de\">lammich@in.tum.de</a>&gt;<br>\nHi.</p>\n<p>Thanks, this helps understanding the problem.</p>\n<p>It probably means that I have to restructure my theory tree such that<br>\nexport_code is only performed in leave-theories, where I can safely<br>\nimport Efficient_Nat. I only hope that Imperative_HOL does not make<br>\nchanges that get overwritten, too, as this would mean that no non-leaf<br>\ntheory could be based on Imperative_HOL.</p>\n<p>Cheers,<br>\n  Peter</p>",
        "id": 294243497,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660907986
    },
    {
        "content": "<p>From: Florian Haftmann &lt;<a href=\"mailto:florian.haftmann@informatik.tu-muenchen.de\">florian.haftmann@informatik.tu-muenchen.de</a>&gt;<br>\nThis should not be the case.</p>\n<p>Florian<br>\n<a href=\"/user_uploads/14278/5C4KaLD79Uff4IMIESYv5ciT/signature.asc\">signature.asc</a></p>",
        "id": 294243529,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660907999
    },
    {
        "content": "<p>From: Andreas Lochbihler &lt;<a href=\"mailto:andreas.lochbihler@inf.ethz.ch\">andreas.lochbihler@inf.ethz.ch</a>&gt;<br>\nHi Peter,</p>\n<blockquote>\n<p>It probably means that I have to restructure my theory tree such that<br>\nexport_code is only performed in leave-theories, where I can safely<br>\nimport Efficient_Nat.<br>\nNo, you don't. For this particular case, just make sure that every theory with an <br>\nexport_code imports Efficient_Nat at the end of its imports list. AFAIK, the merge is <br>\nperformed even if some anchestor theory has already imported Efficient_Nat, so you can <br>\nalways force the declarations from Efficient_Nat again.</p>\n</blockquote>\n<blockquote>\n<p>I only hope that Imperative_HOL does not make<br>\nchanges that get overwritten, too, as this would mean that no non-leaf<br>\ntheory could be based on Imperative_HOL.<br>\nEfficient_Nat violates the locality principle, because it changes some setup of Isabelle <br>\nthat can be accessed in other ways. Such non-monotonic changes result in non-trivial <br>\nmerges and often cause trouble sooner or later. IIRC, Imperative_HOL respects locality in <br>\nthat the whole setup is declared once and for all, so if everything is based on the single <br>\nentry point Imperative_HOL.thy, everything should be fine.</p>\n</blockquote>\n<p>Andreas</p>",
        "id": 294243586,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660908010
    }
]