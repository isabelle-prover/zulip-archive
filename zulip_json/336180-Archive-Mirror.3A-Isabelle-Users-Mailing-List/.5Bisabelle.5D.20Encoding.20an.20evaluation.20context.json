[
    {
        "content": "<p>From: Klaus Ostermann &lt;<a href=\"mailto:ostermann@informatik.tu-darmstadt.de\">ostermann@informatik.tu-darmstadt.de</a>&gt;<br>\nHi there,</p>\n<p>I am trying to formalize a programming language semantics.</p>\n<p>Small-step semantics are frequently formalized by using an evaluation<br>\ncontext which controls the order of evaluation. </p>\n<p>What would be a good way to encode an evaluation context in Isabelle? Are<br>\nthere maybe existing examples that I could look at?</p>\n<p>Regards,<br>\nKlaus</p>",
        "id": 293905291,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660745765
    },
    {
        "content": "<p>From: <a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a><br>\nAlternatively you can encode the evaluation contexts as congruence rules: for<br>\neach pattern in the context grammar you define a rule</p>\n<p>xi -&gt; xi'</p>\n<hr>\n<p>c x1 ... xn -&gt; c x1 .. xi' xn</p>\n<p>This is very straightforward but does not please friends of  eval-contexts.</p>\n<p>Tobias</p>",
        "id": 293905301,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660745767
    },
    {
        "content": "<p>From: Holger Gast &lt;<a href=\"mailto:gast@informatik.uni-tuebingen.de\">gast@informatik.uni-tuebingen.de</a>&gt;<br>\nHallo Klaus,</p>\n<p>Michael Norrish discusses one solution (for HOL)<br>\nin Section 3.3.1 (and various further spots for extensions):</p>\n<p>@PhdThesis{norrish98phd,<br>\n  author =       {Norrish, Michael},<br>\n  title =        {C formalised in {HOL}},<br>\n  school =       {University of Cambridge},<br>\n  year =         1998,<br>\n  note =         {Technical Report UCAM-CL-TR-453}<br>\n}</p>",
        "id": 293905310,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660745769
    },
    {
        "content": "<p>From: Norbert Schirmer &lt;<a href=\"mailto:norbert.schirmer@web.de\">norbert.schirmer@web.de</a>&gt;<br>\nHello Klaus<br>\nSee for example the work of Stefan Berghofer for the Poplmark-Challenge:</p>\n<p><a href=\"http://www4.in.tum.de/~berghofe/papers/Poplmark/index.html\">http://www4.in.tum.de/~berghofe/papers/Poplmark/index.html</a></p>\n<p>He uses a function E:: term =&gt; term to encode evalution contexts.<br>\nAn inductive definition \"ctxt\" restricts the E to sensible functions.</p>\n<p>Norbert</p>",
        "id": 293905314,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660745769
    },
    {
        "content": "<p>From: Michael Norrish &lt;<a href=\"mailto:michael.norrish@gmail.com\">michael.norrish@gmail.com</a>&gt;<br>\nThe approach I took ends up being pretty similar to the approach where<br>\nyou have a context function that can span multiple levels of syntax,<br>\nbut it does keep the recursion in just one place (the basic reduction<br>\nrelation), rather than there, and also in the inductive<br>\ncharacterisation of what it is to be a valid context.</p>\n<p>So you end up with a rule like</p>\n<p>e --&gt; e'   validctxt c</p>\n<hr>\n<p>c e --&gt; c e'</p>\n<p>as well as a definition of valid_ctxt that looks like</p>\n<p>valid_ctxt f == (\\exists e2. f = \\lambda e1. e1 + e2) \\/<br>\n                       (\\exists e1. f = \\lambda e2. e1 + e2) \\/<br>\n                       (f = unary_negation)</p>\n<p>Michael</p>",
        "id": 293905316,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660745770
    }
]