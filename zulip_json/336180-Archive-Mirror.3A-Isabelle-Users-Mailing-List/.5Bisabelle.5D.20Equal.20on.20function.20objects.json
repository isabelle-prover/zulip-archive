[
    {
        "content": "<p>From: John Munroe &lt;<a href=\"mailto:munddr@googlemail.com\">munddr@googlemail.com</a>&gt;<br>\nHi,</p>\n<p>I'm trying to show that two function objects are equal in the following:</p>\n<p>theory T1<br>\nimports Real<br>\nbegin</p>\n<p>typedecl T</p>\n<p>consts<br>\nfunc1 :: \"T =&gt; real\"<br>\nfunc2 :: \"T =&gt; real\"<br>\nfunc3 :: \"T =&gt; real\"</p>\n<p>locale loc =<br>\n  assumes ax1: \"func1 p = func2 p / func3 p\"<br>\n  and ax2: \"func3 p &gt; 0\"</p>\n<p>lemma (in loc) lem1: \"ALL p. func2 p = func1 p * func3 p\"<br>\n  using ax1 ax2<br>\n  by (metis divide_le_eq divide_less_eq order_eq_refl order_less_irrefl xt1(11))</p>\n<p>lemma (in loc) lem2:<br>\n  assumes \"loc\"<br>\n  shows \"func2 = (%s. func1 s * func3 s)\"<br>\n  using lem1<br>\n  by auto</p>\n<p>Does anyone know why having lem1 as a fact is insufficient to complete<br>\nthe proof?</p>\n<p>Any help will be appreciated.</p>\n<p>Thanks,<br>\nJohn</p>",
        "id": 294099230,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660833250
    },
    {
        "content": "<p>From: Rafal Kolanski &lt;<a href=\"mailto:rafalk@cse.unsw.edu.au\">rafalk@cse.unsw.edu.au</a>&gt;<br>\nJohn Munroe wrote:<br>\nTry rule 'ext', specifically by (auto intro: ext)<br>\nby (blast intro: ext) also solves it</p>\n<p>Isabelle doesn't apply ext within auto by default, possibly as it can <br>\nlead to explosions with recursive functions.</p>\n<p>Sincerely,</p>\n<p>Rafal Kolanski.</p>",
        "id": 294099388,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660833297
    },
    {
        "content": "<p>From: Andreas Lochbihler &lt;<a href=\"mailto:andreas.lochbihler@kit.edu\">andreas.lochbihler@kit.edu</a>&gt;<br>\nHi John,</p>\n<p>You must tell auto explicitly to use function extensionality. Both</p>\n<p>by(auto intro: ext)</p>\n<p>and</p>\n<p>by(auto simp: expand_fun_eq)</p>\n<p>work for your example lemma. expand_fun_eq is more aggressive because it <br>\nalso works on the assumptions.</p>\n<p>Best regards,<br>\nAndreas</p>",
        "id": 294099432,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660833314
    },
    {
        "content": "<p>From: John Munroe &lt;<a href=\"mailto:munddr@googlemail.com\">munddr@googlemail.com</a>&gt;<br>\nThanks for the help. Just curious, what if loc.ax1 is changed to:</p>\n<p>\"EX p. func1 p ~= func2 p / func3 p\"</p>\n<p>Can auto/blast intro: ext still be used to show that</p>\n<p>\"func1 ~= func2 / func3\"?</p>\n<p>In fact, why isn't ext defined with iff instead, i.e.:</p>\n<p>lemma ext: \"(!!x::'a::cpo. f(x)=(g(x)::'b::cpo)) &lt;==&gt; (%x. f(x))=(%x. g(x))\"</p>\n<p>Thanks again.</p>\n<p>John</p>",
        "id": 294099682,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660833381
    },
    {
        "content": "<p>From: Andreas Lochbihler &lt;<a href=\"mailto:andreas.lochbihler@kit.edu\">andreas.lochbihler@kit.edu</a>&gt;<br>\nHi John,</p>\n<blockquote>\n<p>Thanks for the help. Just curious, what if loc.ax1 is changed to:</p>\n<p>\"EX p. func1 p ~= func2 p / func3 p\"</p>\n<p>Can auto/blast intro: ext still be used to show that</p>\n<p>\"func1 ~= func2 / func3\"?<br>\nWhat should func2 / func3 be? There is no division operator for <br>\nfunctions in HOL by default. I guess you mean \"%p. func2 p / func3 p\".<br>\nNo, you cannot use ext for that: The inequality is first turned into <br>\nequality in the assumptions by the rule notI, which leaves you to show <br>\nFalse. Since ext is typically used as an introduction rule, it cannot be <br>\napplied to False. In this case, expand the function equality in the <br>\nassumptions with expand_fun_eq: by(auto simp: expand_fun_eq).</p>\n</blockquote>\n<blockquote>\n<p>In fact, why isn't ext defined with iff instead, i.e.:</p>\n<p>lemma ext: \"(!!x::'a::cpo. f(x)=(g(x)::'b::cpo)) &lt;==&gt; (%x. f(x))=(%x. g(x))\"<br>\nSince \"%x. f(x)\" is eta-equal to f and similarly for g, the backward <br>\ndirection of your rule is build into the simplifier, so it is hardly <br>\nuseful. Your lemma is almost expand_fun_eq[symmetric], except for the <br>\nmeta-quantifier !! being replaced the HOL quantifier !<br>\nIf you like, you could also prove this lemma:</p>\n</blockquote>\n<p>lemma \"(!!x. f x = g x) == (Trueprop (f = g))\"<br>\nby(rule equal_intr_rule)(auto intro: ext)</p>\n<p>Note that there is no meta-biimplication in Isabelle, so I used <br>\nmeta-equality instead. Trueprop converts boolean terms to propositions <br>\nand is added to most lemmas implicitly. Since meta-quantifiers are mixed <br>\nwith meta-equality here, it must be explicitly written out.</p>\n<p>Andreas</p>",
        "id": 294099702,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660833387
    },
    {
        "content": "<p>From: Andreas Lochbihler &lt;<a href=\"mailto:andreas.lochbihler@kit.edu\">andreas.lochbihler@kit.edu</a>&gt;<br>\nHi John,</p>\n<blockquote>\n<p>Now, given similar lemmas, it seems several lemmas with a False <br>\nconsequence can be proven. For example, given:</p>\n<p>...</p>\n<p>lemma (in loc3) lem4:<br>\nshows \"EX g. func1 g ≠ func 1 g\"<br>\nusing ax21 ax11<br>\nby auto</p>\n<p>lemma (in loc3) lem5:<br>\nshows \"False\"<br>\nusing ax21 ax11<br>\nby auto</p>\n<p>Are lem4 and lem5 essentially the same?<br>\nDepends on your understanding of essentially. Syntactically, they are <br>\ninherently different. For reasoning, they also behave differently (lem4 <br>\ncannot be used as an introduction rule for \"False\", for instance).<br>\nHowever, you can prove everything with either of them, so logically, <br>\nthey are the same.</p>\n</blockquote>\n<blockquote>\n<p>Does Isabelle simplify lem4's <br>\ngoal to False?<br>\nYes, if you tell Isabelle to do so. Try</p>\n</blockquote>\n<p>thm lem4<br>\nthm lem4[simplified]</p>\n<blockquote>\n<p>Or even, does it try to simplify every goal to False<br>\nfirst before moving on?<br>\nNo, Isabelle does no simplification by its own. However, whenever you <br>\napply some method or tactic which invokes the simplifier (like simp, <br>\nsimp_all, clarsimp, auto, fastsimp, bestsimp, force) then the simplifier <br>\nuses its set of rewrite rules to simplify to the goal. Methods and <br>\ntactics without simplifier (like rule, clarify, safe, blast, iprover, <br>\nbest, fast) obviously don't do this.<br>\nFor more information about the simplifier, read Sec. 3.1 in the Tutorial <br>\non Isabelle/HOL.</p>\n</blockquote>\n<p>Regards,<br>\nAndreas</p>",
        "id": 294099738,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660833399
    },
    {
        "content": "<p>From: <a href=\"mailto:munddr@googlemail.com\">munddr@googlemail.com</a><br>\nThanks for the input -- that's very useful.</p>\n<p>Now, given similar lemmas, it seems several lemmas with a False consequence  <br>\ncan be proven. For example, given:</p>\n<p>typedecl T<br>\ntypes S = \"T set\"</p>\n<p>consts<br>\nfunc1 :: \"T ⇒ real\"<br>\nfunc2 :: \"T ⇒ real\"<br>\nfunc3 :: \"T ⇒ real\"</p>\n<p>locale loc1 =<br>\nassumes ax11: \"func1 p = func2 p / func3 p\"<br>\nand ax12: \"func3 p &gt; 0\"</p>\n<p>locale loc2 =<br>\nfixes G :: S<br>\nassumes ax21: \"EX g : G. func1 g ≠ func2 g / func3 g\"</p>\n<p>locale loc3 = loc1 + loc2</p>\n<p>lemma (in loc3) lem4:<br>\nshows \"EX g. func1 g ≠ func 1 g\"<br>\nusing ax21 ax11<br>\nby auto</p>\n<p>lemma (in loc3) lem5:<br>\nshows \"False\"<br>\nusing ax21 ax11<br>\nby auto</p>\n<p>Are lem4 and lem5 essentially the same? Does Isabelle simplify lem4's goal  <br>\nto False? Or even, does it try to simplify every goal to False first before  <br>\nmoving on?</p>\n<p>Thanks again<br>\nJohn</p>",
        "id": 294099771,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660833409
    }
]