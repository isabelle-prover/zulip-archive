[
    {
        "content": "<p>From: Mikhail Chekhov &lt;<a href=\"mailto:mikhail.chekhov.w@gmail.com\">mikhail.chekhov.w@gmail.com</a>&gt;<br>\nDear All,</p>\n<p>I have a technical question for those who are well versed in<br>\nthe formalizaton of applied mathematics in Isabelle/HOL using set-based<br>\nreasoning in HOL-Algebra (or similar).</p>\n<p>I am curious as to what is the canonical approach for dealing with the<br>\nequality of algebraic structures (e.g. monoids). Suppose, a given monoid<br>\nundergoes a sequence of transformations, the result of these<br>\ntransformations being an identical monoid (isomorphisms are not good<br>\nenough).</p>\n<p>I am aware of two different solutions, but I am not certain whether there<br>\nexist (better) alternatives and which solution would be preferred/more<br>\ncanonical?</p>\n<ol>\n<li>(Partial) equivalence relation. For example,</li>\n</ol>\n<p>locale monoid_eq = monoid G + monoid F for G F +<br>\n  assumes \"carrier G = carrier F\"<br>\n    and \"x ‚àà carrier G ‚üπ y ‚àà carrier G ‚üπ x ‚äó‚áòG‚áô y = x ‚äó‚áòF‚áô y\"<br>\n    and \"ùü≠‚áòG‚áô = ùü≠‚áòF‚áô\"</p>\n<p>It should also be possible to define a partial quotient type based on<br>\nmonoid_eq. However, I can imagine that this could result in a substantial<br>\namount of boilerplate code (one would wish to transfer the entire<br>\nHOL-Algebra to the new type(s)).</p>\n<ol start=\"2\">\n<li>Augmentation of the monoid locale with an additional condition that<br>\nmimics the restriction of the domain of the operation ‚äó to the carrier set<br>\nvia undefined. Once this is done, one can use the standard HOL's equality.</li>\n</ol>\n<hr>\n<p>Here, I present more background information and describe my own experiences<br>\nwith the aforementioned approaches.</p>\n<p>Having tried the second solution in a reasonably sizeable development, I<br>\nfound it to be very unwieldy. There seems to be a need to propagate this<br>\ntype of condition to almost every derived structure and function operating<br>\non such structures. At some point, I found myself spending more time<br>\ndealing with 'undefined' than doing work towards the development of the<br>\ntheory that I was trying to develop.</p>\n<p>Having recently tried the first solution, it seems to be more manageable:<br>\nit is not difficult to transfer results among the members of the same<br>\nequivalence class in an ad-hoc manner. Nonetheless, it does feel a little<br>\nbit odd to have to deal with two different notions of the concept of<br>\nequality and I have never seen anyone using this approach before.<br>\nTherefore, I decided to make an attempt to seek advice from the list.</p>\n<p>Kind Regards,<br>\nMikhail Chekhov</p>",
        "id": 294827280,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661245068
    }
]