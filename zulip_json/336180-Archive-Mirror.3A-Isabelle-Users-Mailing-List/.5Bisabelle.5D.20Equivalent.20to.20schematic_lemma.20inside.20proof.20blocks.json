[
    {
        "content": "<p>From: Andreas Lochbihler &lt;<a href=\"mailto:andreas.lochbihler@inf.ethz.ch\">andreas.lochbihler@inf.ethz.ch</a>&gt;<br>\nDear Isar experts,</p>\n<p>I am looking for a counterpart to schematic_lemma which I can use inside proof blocks. <br>\nWith schematic_lemma, one can construct parts of the lemma statement by careful <br>\napplication of rules. I am now looking for something similar that could be used inside a <br>\nproof.</p>\n<p>Here's a simplified example. I have a predicate foo :: \"exp =&gt; nat =&gt; bool\" which is <br>\nclosed under increasing the second argument.</p>\n<p>lemma foo_mono: \"foo exp k ==&gt; k &lt;= m ==&gt; foo exp m\"</p>\n<p>For the various constants of type exp, I have a bunch of syntax-directed rules that allow <br>\nme to \"compute\" a number from the syntactic structure of exp. I am currently using this as <br>\nfollows:</p>\n<p>schematic_lemma l: \"foo a_very_large_expression ?k\"<br>\napply(rule syntactic_analysis_rules)+<br>\ndone</p>\n<p>However, the structure of the computed l is pretty ugly. I'd like the lemma to actually be <br>\nsomething of the following form. Of course, this is easy to derive.</p>\n<p>lemma \"foo a_very_large_expression (245 * x + 7 * y + 3)\"<br>\napply(rule l[THEN foo_mono])<br>\napply simp<br>\ndone</p>\n<p>Now, I'm trying to write the two lemmas in one:</p>\n<p>lemma \"foo a_very_large_expression (245 * x + 7 * y + 3)\"<br>\nproof -<br>\n   have \"foo a_very_large_expression ?k\" by(rule syntactic_analysis_rules)+<br>\n   thus ?thesis by(rule foo_mono) simp<br>\nqed</p>\n<p>Unfortunately, I cannot write ?k like that here. My feeling is that this should somehow be <br>\ndoable with guess, but I have not managed to get there. Is my intuition correct? Has <br>\nanyone done this already where I can have glimpse at?</p>\n<p>Best,<br>\nAndreas</p>",
        "id": 294640605,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661161924
    },
    {
        "content": "<p>From: Johannes HÃ¶lzl &lt;<a href=\"mailto:hoelzl@in.tum.de\">hoelzl@in.tum.de</a>&gt;<br>\nHi Andreas,</p>\n<p>Well you can not state it in a Isar proof, but with apply you can<br>\ngenerate such subgoals:</p>\n<p>notepad<br>\nbegin</p>\n<p>have \"foo a_very_large_expression (245 * x + 7 * y + 3)\"<br>\n    apply (rule foo_mono)<br>\n    apply (rule syntactic_analysis_rules)+ []<br>\n    apply simp<br>\n    done</p>\n<p>end</p>\n<p>(This is how usually derivative_eq_intros is applied.)</p>\n<p>Of course this gets complicated when (rule syntactic_analysis_rules)+ is<br>\nmore difficult...</p>\n<p>An alternative may be to use contexts?</p>\n<ul>\n<li>Johannes</li>\n</ul>",
        "id": 294640631,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661161937
    },
    {
        "content": "<p>From: Andreas Lochbihler &lt;<a href=\"mailto:andreas.lochbihler@inf.ethz.ch\">andreas.lochbihler@inf.ethz.ch</a>&gt;<br>\nDear Johannes,</p>\n<p>Thanks, I know too well how to generate such goals in apply style. Meanwhile, I found out <br>\nhow to do it in forward-reasoning style with guess inside a proof block.</p>\n<p>lemma start: \"[| TERM x; foo x m; foo x m ==&gt; thesis |] ==&gt; thesis\" by assumption</p>\n<p>notepad begin<br>\n   have \"TERM a_very_large_expression\" by(simp add: term_def)<br>\n   then guess by(rule start)(rule syntactic_analysis_rules)+<br>\n   then have \"foo a_very_large_expression (245 * x + 7 * y + 3)\" by(rule foo_mono) simp<br>\nend</p>\n<p>Of course, the computation performed by the syntactic_analysis_rules cannot be written in <br>\nIsar, but that's fine. The TERM expression is only needed to instantiate the expression in <br>\nthe start rule. By slightly changing the start rule, I can even obtain an abbreviation for <br>\nthe compound term as an equation during the guess step (without ever having to write it <br>\ndown :-) ).</p>\n<p>Best,<br>\nAndreas</p>\n<p>PS: Contexts are of not much help here. I can use them to hide the name of the schematic <br>\nlemma and factor out additional assumptions, but that's about it.</p>",
        "id": 294640647,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661161943
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nDoes it mean everything works out, or are there pending questions? <br>\nAlmost arbitrary tricks may be played.  The standard Isar policies merely <br>\ntry to make non-sense hard.</p>\n<p>BTW, the canonical proof for \"TERM x\" is \".\" -- is is considered vacuous <br>\nwithin Isabelle/Pure.</p>\n<p>Makarius</p>",
        "id": 294643715,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661163187
    },
    {
        "content": "<p>From: Andreas Lochbihler &lt;<a href=\"mailto:andreas.lochbihler@inf.ethz.ch\">andreas.lochbihler@inf.ethz.ch</a>&gt;<br>\nHi Makarius,</p>\n<p>No, this seems to serve my purposes, although I would prefer not having to add the TERM <br>\nmarker manually.</p>\n<p>Andreas</p>",
        "id": 294645765,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661163991
    }
]