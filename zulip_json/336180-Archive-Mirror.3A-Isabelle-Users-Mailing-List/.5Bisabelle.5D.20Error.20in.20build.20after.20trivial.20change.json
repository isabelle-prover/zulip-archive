[
    {
        "content": "<p>From: Christian Weinz &lt;<a href=\"mailto:christian.weinz@stud.uni-goettingen.de\">christian.weinz@stud.uni-goettingen.de</a>&gt;<br>\nHello,</p>\n<p>I was doing a small and rather trivial change in the library, and the<br>\ntest build fails with errors I can't link to the change I made; however<br>\nwithout the change the build works fine. The change I made and the<br>\nerror message are given below. Does anybody have an idea what might be<br>\ngoing on?</p>\n<p>--- change to the library ---</p>\n<p>~/isabelle$ hg diff<br>\ndiff -r 5385de42f9f4 src/HOL/Euclidean_Division.thy<br>\n--- a/src/HOL/Euclidean_Division.thy    Tue Jan 28 14:59:54 2020 +0000<br>\n+++ b/src/HOL/Euclidean_Division.thy    Tue Jan 28 21:32:28 2020 +0100<br>\n@@ -11,8 +11,10 @@</p>\n<p>subsection \\&lt;open&gt;Euclidean (semi)rings with explicit division and<br>\nremainder\\&lt;close&gt;</p>\n<p>-class euclidean_semiring = semidom_modulo + <br>\n+class pre_euclidean_size =<br>\n   fixes euclidean_size :: \"'a \\&lt;Rightarrow&gt; nat\"<br>\n+<br>\n+class euclidean_semiring = pre_euclidean_size + semidom_modulo +<br>\n   assumes size_0 [simp]: \"euclidean_size 0 = 0\"<br>\n   assumes mod_size_less: <br>\n     \"b \\&lt;noteq&gt; 0 \\&lt;Longrightarrow&gt; euclidean_size (a mod b) &lt;<br>\neuclidean_size b\"</p>\n<p>--- build fail ---</p>\n<p>~/isabelle$ ./bin/isabelle build -j2 -o threads=3 HOL-<br>\nComputational_Algebra<br>\nBuilding HOL ...<br>\nFinished HOL (0:04:53 elapsed time, 0:11:44 cpu time, factor 2.40)<br>\nBuilding HOL-Library ...<br>\nFinished HOL-Library (0:03:37 elapsed time, 0:09:00 cpu time, factor<br>\n2.49)<br>\nRunning HOL-Computational_Algebra ...<br>\nHOL-Computational_Algebra FAILED<br>\n(see also /home/christian/.isabelle/heaps/polyml-5.8.1_x86_64_32-<br>\nlinux/log/HOL-Computational_Algebra)</p>\n<h3>\\&lt;Prod&gt;x\\&lt;in&gt;?A1. ?y1 \\&lt;equiv&gt; ?y1 ^ card ?A1</h3>\n<h3>Ignoring duplicate rewrite rule:</h3>\n<h3>fps_of_poly ?p1 $ ?n1 \\&lt;equiv&gt; coeff ?p1 ?n1</h3>\n<h3>Ignoring duplicate rewrite rule:</h3>\n<h3>fps_of_poly 0 \\&lt;equiv&gt; 0</h3>\n<h3>Ignoring duplicate rewrite rule:</h3>\n<h3>fps_of_poly 0 \\&lt;equiv&gt; 0</h3>\n<h3>Ignoring duplicate rewrite rule:</h3>\n<h3>fps_of_poly 1 \\&lt;equiv&gt; 1</h3>\n<h3>Ignoring duplicate rewrite rule:</h3>\n<h3>fps_of_poly (numeral ?n1) \\&lt;equiv&gt; numeral ?n1</h3>\n<h3>Ignoring duplicate rewrite rule:</h3>\n<h3>fps_of_poly [:0::?'a1, 1::?'a1:] \\&lt;equiv&gt; fps_X</h3>\n<h3>Ignoring duplicate rewrite rule:</h3>\n<h3>fps_of_poly (pCons ?c1 ?p1) \\&lt;equiv&gt; fps_const ?c1 + fps_of_poly</h3>\n<p>?p1 * fps_X<br>\n*** Failed to load theory \"HOL-<br>\nComputational_Algebra.Computational_Algebra\" (unresolved \"HOL-<br>\nComputational_Algebra.Polynomial_Factorial\")<br>\n*** Type unification failed: Clash of types \"_ \\&lt;Rightarrow&gt; _\" and<br>\n\"nat\"</p>\n<hr>\n<p>*** Type error in application: incompatible operand type</p>\n<hr>\n<p>*** Operator:  class.normalization_euclidean_semiring_multiplicative ::<br>\n***   (??'a \\&lt;Rightarrow&gt; nat)<br>\n***   \\&lt;Rightarrow&gt; (??'a \\&lt;Rightarrow&gt; ??'a \\&lt;Rightarrow&gt; ??'a)<br>\n***                 \\&lt;Rightarrow&gt; (??'a \\&lt;Rightarrow&gt; ??'a<br>\n\\&lt;Rightarrow&gt; ??'a)<br>\n***                               \\&lt;Rightarrow&gt; (??'a<br>\n***        \\&lt;Rightarrow&gt; ??'a \\&lt;Rightarrow&gt; ??'a)<br>\n***       \\&lt;Rightarrow&gt; ??'a<br>\n***                     \\&lt;Rightarrow&gt; (??'a<br>\n***                                    \\&lt;Rightarrow&gt; ??'a \\&lt;Rightarrow&gt;<br>\n??'a)<br>\n***                                   \\&lt;Rightarrow&gt; ??'a<br>\n***           \\&lt;Rightarrow&gt; (??'a \\&lt;Rightarrow&gt; ??'a \\&lt;Rightarrow&gt;<br>\n??'a)<br>\n***                         \\&lt;Rightarrow&gt; (??'a \\&lt;Rightarrow&gt; ??'a)<br>\n*** \\&lt;Rightarrow&gt; (??'a \\&lt;Rightarrow&gt; ??'a) \\&lt;Rightarrow&gt; bool<br>\n*** Operand:   (div) :: ??'a \\&lt;Rightarrow&gt; ??'a \\&lt;Rightarrow&gt; ??'a</p>\n<hr>\n<p>*** Coercion Inference:</p>\n<hr>\n<p>*** Local coercion insertion on the operand failed:<br>\n*** No coercion known for type constructors: \"fun\" and \"nat\"<br>\n*** At command \"show\" (line 400 of<br>\n\"~~/src/HOL/Computational_Algebra/Polynomial_Factorial.thy\")<br>\nUnfinished session(s): HOL-Computational_Algebra<br>\n0:09:23 elapsed time, 0:22:25 cpu time, factor 2.39</p>",
        "id": 294821749,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661242467
    },
    {
        "content": "<p>From: Akihisa Yamada &lt;<a href=\"mailto:akihisayamada@nii.ac.jp\">akihisayamada@nii.ac.jp</a>&gt;<br>\nDear Christian,</p>\n<p>before the change, Isabelle's type inference inferred <br>\n\"euclidean_semiring\" whenever \"euclidean_size\" was used, but now only <br>\n\"pre_euclidean_size\". And unfortunately, some library statements depend <br>\non the type inference.</p>\n<p>BTW: I'd like to support your change, which is in line of syntactic <br>\nclasses plus, times, etc. Following the convention, the class could be <br>\ncalled \"euclidean_size\".</p>\n<p>Best regards,<br>\nAkihisa</p>",
        "id": 294821766,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661242480
    }
]