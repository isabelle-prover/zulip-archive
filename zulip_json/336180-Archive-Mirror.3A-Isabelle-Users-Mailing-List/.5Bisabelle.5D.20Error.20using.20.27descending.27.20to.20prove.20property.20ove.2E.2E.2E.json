[
    {
        "content": "<p>From: Andrew Gacek &lt;<a href=\"mailto:andrew.gacek@gmail.com\">andrew.gacek@gmail.com</a>&gt;<br>\nI'm playing around with quotients in Isabelle/HOL, but I'm having a<br>\nhard time getting the 'descending' tactic to work. I've tried<br>\nfollowing the examples in the distribution, but perhaps I missed a key<br>\nstep. Here's my simple example:</p>\n<p>theory Scratch<br>\nimports Main<br>\nbegin</p>\n<p>definition z3_rel :: \"int ⇒ int ⇒ bool\" (infix \"\\&lt;approx&gt;\" 50) where<br>\n  [simp]: \"z3_rel x y = (3 dvd (x - y))\"</p>\n<p>quotient_type z3 = int / z3_rel<br>\napply (rule equivpI)<br>\napply (rule reflpI, simp)<br>\napply (rule sympI, simp, presburger)<br>\napply (rule transpI, simp, presburger)<br>\ndone</p>\n<p>quotient_definition sum where \"sum :: z3 ⇒ z3 ⇒ z3\" is \"plus :: int ⇒ int ⇒ int\"<br>\nby (simp, presburger)</p>\n<p>lemma sum_assoc:<br>\n  \"sum (sum a b) c = sum a (sum b c)\"<br>\napply descending<br>\n(* exception UnequalLengths raised (line 569 of \"library.ML\") *)</p>\n<p>Thanks,<br>\nAndrew</p>",
        "id": 294331365,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660930366
    },
    {
        "content": "<p>From: Andrew Gacek &lt;<a href=\"mailto:andrew.gacek@gmail.com\">andrew.gacek@gmail.com</a>&gt;<br>\nI never found a solution to this, but I did find two workarounds.</p>\n<ol>\n<li>\n<p>Manually state the descended lemmas and then use the lifting tactic<br>\nto prove the desired lemmas. This gets tedious.</p>\n</li>\n<li>\n<p>Use nat instead of int. I don't know why this works, but descending<br>\njust seems to work better with nat instead of int. The downside is<br>\nthat some definitions are more complicated since subtraction on<br>\nnaturals does not have as many nice algebraic properties as<br>\nsubtraction on integers.</p>\n</li>\n</ol>\n<p>-Andrew</p>",
        "id": 294632248,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661158768
    },
    {
        "content": "<p>From: Andreas Lochbihler &lt;<a href=\"mailto:andreas.lochbihler@inf.ethz.ch\">andreas.lochbihler@inf.ethz.ch</a>&gt;<br>\nDear Andrew,</p>\n<p>The quotient package with the quotient_definition command is in large parts superseeded by <br>\nthe lifting and transfer packages, as said in the isar-ref manual (section 11.7). If your <br>\napplication does not fall into the rare cases where the quotient package is needed, I <br>\nrecommend that you do your constant definitions with lift_definition rather than quotient <br>\ndefinition. Then, you can use the proof method transfer instead of descending. In your <br>\nexample. lift_definition+transfer works fine.</p>\n<p>The problem with int is that the int type itself is defined as a quotient over nat * nat, <br>\nas can be seen from the diagnostic command print_quotientsQ3. Thus, the descending method <br>\ngets confused about how far it should descend. This is probably also the reason for the <br>\nexception.</p>\n<p>Best,<br>\nAndreas</p>",
        "id": 294632253,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661158772
    }
]