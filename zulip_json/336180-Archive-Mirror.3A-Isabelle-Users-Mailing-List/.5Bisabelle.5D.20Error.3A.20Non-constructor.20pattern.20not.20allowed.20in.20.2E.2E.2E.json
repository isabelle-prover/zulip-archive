[
    {
        "content": "<p>From: Anh Le &lt;<a href=\"mailto:anhlevn@cims.nyu.edu\">anhlevn@cims.nyu.edu</a>&gt;<br>\nHi everyone,<br>\nI just got this error and I don't know how to work around. The code is like<br>\n(not exactly):</p>\n<p>record Foo =<br>\n    x :: \"nat\"<br>\n    y :: \"nat\"</p>\n<p>fun bar :: \"Foo =&gt; nat =&gt; nat\"<br>\nwhere<br>\n  \"bar (| x = n1, y = n2|)  z = compute n1 n2 z\"</p>\n<p>But it doesn't allow the record pattern there. I got the error<br>\n\"Non-constructor pattern not allowed in sequential mode\".<br>\nHow can we use record patterns in functions like the one above?</p>\n<p>Thank you</p>\n<p>Anh</p>",
        "id": 294138903,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660845187
    },
    {
        "content": "<p>From: Alexander Krauss &lt;<a href=\"mailto:krauss@in.tum.de\">krauss@in.tum.de</a>&gt;<br>\nHi Anh,</p>\n<blockquote>\n<p>record Foo =<br>\n     x :: \"nat\"<br>\n     y :: \"nat\"</p>\n<p>fun bar :: \"Foo =&gt;  nat =&gt;  nat\"<br>\nwhere<br>\n   \"bar (| x = n1, y = n2|)  z = compute n1 n2 z\"</p>\n<p>But it doesn't allow the record pattern there. I got the error<br>\n\"Non-constructor pattern not allowed in sequential mode\".</p>\n</blockquote>\n<p>The fun command does not support record patterns, just datatype <br>\nconstructors (even though records are much like datatypes).</p>\n<blockquote>\n<p>How can we use record patterns in functions like the one above?</p>\n</blockquote>\n<p>There are two possibilities: Either you use functions general patterns, <br>\nwhich gives you some manual (but trivial) proving work to do; see <br>\nHOL/ex/Fundefs.thy for an example. Or, which is probably easier, you use <br>\nthe \"rep_datatype\" command to instruct the system to regard the record <br>\ntype you defined as a datatype: After the record definition, do</p>\n<p>rep_datatype Foo_ext<br>\nby (fact Foo.ext_induct) (fact Foo.ext_inject)</p>\n<p>Then, the function definition works out of the box.</p>\n<p>Someone who knows more about records can probably explain why this <br>\ndeclaration isn't issued internally by default...</p>\n<p>Alex</p>",
        "id": 294138922,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660845193
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nStrictly speaking, this exposes implementation details of version 12 of <br>\nthe record package (or is it version 17).  It should work for now, but <br>\nnobody can say when there will be the next change in the internal <br>\nrepresentation.</p>\n<p>Makarius</p>",
        "id": 294138964,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660845206
    }
]