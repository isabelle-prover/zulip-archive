[
    {
        "content": "<p>From: Andreas Lochbihler &lt;<a href=\"mailto:andreas.lochbihler@inf.ethz.ch\">andreas.lochbihler@inf.ethz.ch</a>&gt;<br>\nDear Isabelle wizards,</p>\n<p>I have defined a function with several arguments with the function package, but not all <br>\narguments are supplied in the definition. For example,</p>\n<p>fun foo :: \"bool ⇒ bool ⇒ bool\"<br>\nwhere<br>\n   \"foo True = id\"<br>\n| \"foo False = Not\"</p>\n<p>The function package generates an elimination rule foo.elims to do case distinctions on <br>\nfoo. For the function foo, it generates the rule</p>\n<p>⟦foo ?x = ?y; ⟦?x; ?y = id⟧ ⟹ ?P; ⟦¬ ?x; ?y = Not⟧ ⟹ ?P⟧ ⟹ ?P</p>\n<p>Unfortunately, this rule cannot be used directly if the function is fully applied as in</p>\n<p>notepad begin<br>\n   fix x y<br>\n   assume \"foo x y = True\"<br>\n   then have \"x = y\"<br>\n   proof(cases rule: foo.elims)</p>\n<p>Is there any clever way to transform foo.elims such that I can use it in such a situation? <br>\nI.e., I'd like to transform the rule to something like</p>\n<p>⟦foo ?x ?z = ?y; ⟦?x; ?y = id ?z⟧ ⟹ ?P; ⟦¬ ?x; ?y = Not ?z⟧ ⟹ ?P⟧ ⟹ ?P</p>\n<p>(In this case, I could of course use foo.cases, but this does not work if I want to do the <br>\ncase splits automatically with auto &amp; friends.)</p>\n<p>I'd prefer to leave the definition eta-contracted, because it is clearer and the <br>\nsimplifier rewrites partially applied occurrences of foo (which is important because <br>\ncongruence rules and the induction method sporadically eta-expand terms and then cause <br>\nstrange effects).</p>\n<p>Cheers,<br>\nAndreas</p>",
        "id": 294642006,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661162499
    },
    {
        "content": "<p>From: Larry Paulson &lt;<a href=\"mailto:lp15@cam.ac.uk\">lp15@cam.ac.uk</a>&gt;<br>\nBut you could just as easily use the expanded form in the definition, and then derive the contracted forms afterwards. That is likely to be clearer than any massaging of the elimination and induction rules.</p>\n<p>Larry Paulson</p>",
        "id": 294642025,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661162507
    },
    {
        "content": "<p>From: Andreas Lochbihler &lt;<a href=\"mailto:andreas.lochbihler@inf.ethz.ch\">andreas.lochbihler@inf.ethz.ch</a>&gt;<br>\nHi Larry,</p>\n<p>You are right that I can almost derive the eta-contracted simp rules with <br>\nfoo.simp[abs_def]. However, the generated cases rule then also requires all arguments of <br>\nthe function (given as a tuple). Do you know a way to manipulate the .cases rule? Is that <br>\neasier than manipulating .elims?</p>\n<p>Andreas</p>",
        "id": 294642047,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661162516
    }
]