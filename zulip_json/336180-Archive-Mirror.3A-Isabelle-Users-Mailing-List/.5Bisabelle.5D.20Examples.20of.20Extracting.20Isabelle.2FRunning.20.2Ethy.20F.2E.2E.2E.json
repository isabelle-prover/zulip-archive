[
    {
        "content": "<p>From: Mario Alvarez &lt;<a href=\"mailto:mmalvare@eng.ucsd.edu\">mmalvare@eng.ucsd.edu</a>&gt;<br>\nHi Isabelle-Users,</p>\n<p>I'm currently trying to build a compiler in Isabelle, and trying to<br>\ndetermine what the best way to run the compiler is (i.e., to use the code<br>\nI've developed in Isabelle to transform concrete compiler inputs to<br>\nconcrete compiler outputs, ideally using the command line.)</p>\n<p>My understanding is that there are two (maybe more) ways to try to go about<br>\ndoing this. One is what CompCert did - using an extraction mechanism to<br>\nbuild an ML version of the compiler, which can then be run (one downside to<br>\nthis is that one also needs to implement a parser for input - the<br>\nequivalent of CompCert's <em>clightgen</em> utility).</p>\n<p>The other is what was done in this paper<br>\n&lt;<a href=\"https://www.microsoft.com/en-us/research/publication/coq-worlds-best-macro-assembler/\">https://www.microsoft.com/en-us/research/publication/coq-worlds-best-macro-assembler/</a>&gt;,<br>\nwhere the proof assistant (again Coq) itself acts as the compiler, and the<br>\noutput of running Coq files <em>as scripts</em> yields the desired output. In this<br>\ninstance, Coq takes care of all the difficulties of parsing the input,<br>\nmeaning the user only has to write programs inside the context of Coq \".v\"<br>\nfiles.</p>\n<p>I am attempting to do something similar to the second use-case for<br>\nIsabelle. However, I am struggling to figure out what the right way to do<br>\nthis in Isabelle. Do you think it would be better to use extraction, or is<br>\nthere a way I can run my .thy files as scripts to produce output? As far as<br>\noptions for \"running\" .thy files, I can only see the \"isabelle process\"<br>\ncommand, which does not seem to be well documented and seems to struggle<br>\nwith resolving dependencies.</p>\n<p>Any good resources on ways to do this in Isabelle would be much<br>\nappreciated. Currently, the only way I have of running the compiler is in<br>\nJEdit, and I would really very much like a command-line interface for it.</p>\n<p>Best,<br>\nMario</p>",
        "id": 294729999,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661187675
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nOn 26/03/18 22:08, Mario Alvarez wrote:</p>\n<blockquote>\n<p>Hi Isabelle-Users,</p>\n<p>I'm currently trying to build a compiler in Isabelle, and trying to<br>\ndetermine what the best way to run the compiler is (i.e., to use the code<br>\nI've developed in Isabelle to transform concrete compiler inputs to<br>\nconcrete compiler outputs, ideally using the command line.)</p>\n<p>My understanding is that there are two (maybe more) ways to try to go about<br>\ndoing this. One is what CompCert did - using an extraction mechanism to<br>\nbuild an ML version of the compiler, which can then be run (one downside to<br>\nthis is that one also needs to implement a parser for input - the<br>\nequivalent of CompCert's <em>clightgen</em> utility).</p>\n<p>The other is what was done in this paper<br>\n&lt;<a href=\"https://www.microsoft.com/en-us/research/publication/coq-worlds-best-macro-assembler/\">https://www.microsoft.com/en-us/research/publication/coq-worlds-best-macro-assembler/</a>&gt;,<br>\nwhere the proof assistant (again Coq) itself acts as the compiler, and the<br>\noutput of running Coq files <em>as scripts</em> yields the desired output. In this<br>\ninstance, Coq takes care of all the difficulties of parsing the input,<br>\nmeaning the user only has to write programs inside the context of Coq \".v\"<br>\nfiles.</p>\n<p>I am attempting to do something similar to the second use-case for<br>\nIsabelle. However, I am struggling to figure out what the right way to do<br>\nthis in Isabelle. Do you think it would be better to use extraction, or is<br>\nthere a way I can run my .thy files as scripts to produce output? As far as<br>\noptions for \"running\" .thy files, I can only see the \"isabelle process\"<br>\ncommand, which does not seem to be well documented and seems to struggle<br>\nwith resolving dependencies.</p>\n</blockquote>\n<p>This thread is still open and unanswered, as far as I can see. After<br>\nreading the text two times, I can only guess what you are trying to do.</p>\n<p>Although Coq and Isabelle have common heritage, and a lot of<br>\nsimilarities until today, there is a cultural gap to be bridged and one<br>\nof different terminology. E.g. \"code extraction\" in Coq (usually from<br>\nproofs) becomes \"code generation\" in Isabelle (from specifications).</p>\n<p>Generally, Isabelle is more open and supports more languages within the<br>\nsame framework: a standard approach is to use Isabelle/ML -- the meta<br>\nlanguage around the logical environment -- to do parsing and I/O, but I<br>\nhave occasionally seen people using Isabelle/HOL specifications as a<br>\nstarting point and then generate ML or Haskell from it. (Maybe the<br>\nIsaFoR project can server as an example for that approach:<br>\n<a href=\"http://cl-informatik.uibk.ac.at/isafor\">http://cl-informatik.uibk.ac.at/isafor</a>).</p>\n<p>As long as you stay inside Isabelle, everything happens in theory files<br>\nwithin a session (even Isabelle/ML). This explains why the documentation<br>\nof \"isabelle process\" in the \"system\" manual is relatively terse about<br>\nwhat you can do with it: loading theory files is the main operation<br>\nhere. The same manual also documents \"isabelle build\" in chapter 2 --<br>\nthat is the standard way to run Isabelle sessions without GUI front-end.<br>\nIn principle, running an Isabelle session can do whatever you like, with<br>\nthe help of some Isabelle/ML snippets around your formalization, but it<br>\nis going to be a bit heavy. A more light-weight way is the forthcoming<br>\nIsabelle server, see also<br>\n<a href=\"https://lists.cam.ac.uk/pipermail/cl-isabelle-users/2018-March/msg00088.html\">https://lists.cam.ac.uk/pipermail/cl-isabelle-users/2018-March/msg00088.html</a></p>\n<blockquote>\n<p>Any good resources on ways to do this in Isabelle would be much<br>\nappreciated. Currently, the only way I have of running the compiler is in<br>\nJEdit, and I would really very much like a command-line interface for it.</p>\n</blockquote>\n<p>This already sounds quite concrete. Are your sources available<br>\nsomewhere? It would help to get an idea what are the missing bits.</p>\n<p>Makarius</p>",
        "id": 294731023,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661188055
    },
    {
        "content": "<p>From: Mario Alvarez &lt;<a href=\"mailto:mmalvare@eng.ucsd.edu\">mmalvare@eng.ucsd.edu</a>&gt;<br>\nHi Makarius,</p>\n<p>Thanks for your response. Currently I am using extraction to OCaml, which<br>\nhas been working OK so far for my purposes - in other words, switching from<br>\nthe second approach I described in my prior email to the first one. (I've<br>\nbuilt unverified OCaml shims to handle the I/O).</p>\n<p>Also, thank you for the hint about IsaFoR as an example of using<br>\nIsabelle/ML to achieve these goals. I think for now using code extraction<br>\nto OCaml (I don't mean synthesizing code from proofs, I just mean<br>\ntranslating executable functions in Isabelle/HOL to executable OCaml<br>\nfunctions) will be a good approach for me as it will let people install my<br>\ncompiler without installing all of Isabelle. I'll also take a look at the<br>\nIsabelle server to see if it meets any of my needs.</p>\n<p>If you'd like to take a look at my sources, they are here (in a<br>\nsubdirectory of my fork of Eth-Isabelle):<br>\n<a href=\"https://github.com/mmalvarez/eth-isabelle/tree/master/elle\">https://github.com/mmalvarez/eth-isabelle/tree/master/elle</a><br>\n(FourLExtract.thy and <a href=\"http://FourLShim.ml\">FourLShim.ml</a> are probably the most relevant files).</p>\n<p>Also, thanks for taking the effort to read and understand my last email<br>\ndespite the ambiguities. As I get more acculturated to the Isabelle way of<br>\ndoing and discussing things, hopefully I can improve my communications.</p>\n<p>Many thanks,<br>\nMario</p>",
        "id": 294731891,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661188364
    }
]