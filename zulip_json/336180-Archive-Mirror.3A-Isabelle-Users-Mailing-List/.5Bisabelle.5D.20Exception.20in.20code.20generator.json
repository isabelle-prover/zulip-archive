[
    {
        "content": "<p>From: John Matthews &lt;<a href=\"mailto:matthews@galois.com\">matthews@galois.com</a>&gt;<br>\nHello,</p>\n<p>I'm now trying to define an overloaded Cryptol constant that is  <br>\nsupposed to return zero on all types, but quickcheck's code generator  <br>\nseems to be failing on one of the overloaded definitions. Here is a  <br>\nstripped-down example:</p>\n<p>class czero_ty = type +<br>\n     fixes czero :: \"'a\"</p>\n<p>instance bool :: czero_ty<br>\n     czero_bool_def:  \"czero == False\"<br>\n   ..</p>\n<p>instance \"fun\" :: (type,czero_ty)czero_ty<br>\n     czero_fun_def:  \"czero n == czero\"<br>\n   ..</p>\n<p>When I try to test \"(czero :: int =&gt; bool) n = False\" with quickcheck,  <br>\nI get the following error:</p>\n<p>*** Unable to generate code for term:<br>\n   *** czero<br>\n   *** required by:<br>\n   *** czero_quickcheck.czero_ty_class.czero def1, &lt;Top&gt;<br>\n   *** At command \"quickcheck\".</p>\n<p>I think the problem is in czero_fun_def, because if I try to execute  <br>\nthis:</p>\n<p>declare czero_fun_def[code]</p>\n<p>then Isabelle returns this exception:</p>\n<p>*** exception TERM raised: dest_Trueprop<br>\n   *** At command \"declare\".</p>\n<p>I'm using Isabelle2007.</p>\n<p>Thanks,<br>\n-john</p>",
        "id": 294060677,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660823537
    },
    {
        "content": "<p>From: Stefan Berghofer &lt;<a href=\"mailto:berghofe@in.tum.de\">berghofe@in.tum.de</a>&gt;<br>\nJohn Matthews wrote:<br>\nHello John,</p>\n<p>this kind of overloading is not supported by the old code generator, and<br>\ntherefore not supported by quickcheck either. The old code generator only<br>\nsupports those cases of overloading that can be resolved while generating<br>\ncode. Unfortunately, this is not the case for czero_fun_def, since the<br>\nright-hand side of the definition again contains a polymorphic constant<br>\nczero, and the code generator cannot figure out which definition it should<br>\nuse in this case.<br>\nThe new code generator by Florian Haftmann supports code generation from<br>\ndefinitions like czero_fun_def as well (using a dictionary construction),<br>\nbut we are not yet completely finished with porting quickcheck to the new<br>\ncode generator.</p>\n<p>Greetings,<br>\nStefan</p>",
        "id": 294060729,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660823561
    },
    {
        "content": "<p>From: John Matthews &lt;<a href=\"mailto:matthews@galois.com\">matthews@galois.com</a>&gt;<br>\nOk, thanks Stefan. Then I'll wait to try out autoquickcheck once it's  <br>\nported to Florian's framework.</p>\n<p>Best,<br>\n-john</p>",
        "id": 294060758,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660823574
    }
]