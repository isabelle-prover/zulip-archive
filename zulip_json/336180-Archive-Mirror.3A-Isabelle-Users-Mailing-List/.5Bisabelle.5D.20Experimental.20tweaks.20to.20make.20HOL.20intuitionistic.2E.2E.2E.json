[
    {
        "content": "<p>From: Josh Tilles &lt;<a href=\"mailto:merelyapseudonym@gmail.com\">merelyapseudonym@gmail.com</a>&gt;<br>\nI've come across a few errors that are blocking my progress. I'm not sure<br>\nwhat to do besides trying to become familiar with <em>all</em> of Isabelle's<br>\ninternals, so I'd appreciate any advice/direction—particularly on the two<br>\nspecific errors I present below.</p>\n<p>Thank you,<br>\n--Josh Tilles</p>\n<p>These errors have arisen because I've returned to a task that I last<br>\nattempted a year or so ago: adapting HOL to make it possible to selectively<br>\n\"opt-in\" to classical logic. I've thought of a few approaches that would<br>\nwork as initial proof-of-concepts. My intuition is that any of the below<br>\n<em>should</em> be possible, but one might be more tractable than the others.</p>\n<p>Extract HOL.True_or_False into a locale.</p>\n<p>- seems like the ideal solution<br>\n   - Ultimately, I think the locale <em>should</em> be named classical <em>but</em> I've<br>\n   currently named it NonIntuitionistic because there's a lemma that's also<br>\n   named classical and an ML structure named Classical. So if I wanted the<br>\n   locale usage to stand out in these prototypes, I needed a different name.</p>\n<p>- The problem is that the elim rules break:<br>\n      - on the line \"declare NonIntuitionistic.iffCE [elim!]\" we see the<br>\n      message:<br>\n      exception THM 1 raised (line 332 of \"drule.ML\"):</p>\n<p>RSN: no unifiers<br>\n      PROP NonIntuitionistic ⟹ ?P = ?Q ⟹ (?P ⟹ ?Q ⟹ ?R) ⟹ (¬ ?P ⟹ ¬ ?Q ⟹<br>\n      ?R) ⟹ ?R<br>\n      PROP NonIntuitionistic ⟹ (¬ ?P ⟹ ?P) ⟹ ?P</p>\n<p>Extract non-classical code into IHOL.thy, which the normal/classical HOL.thy<br>\nsubsequently imports.</p>\n<p>- Took a lot of time the last time I tried it a year ago, so I don't<br>\n   have a demonstration patch (yet)</p>\n<p>- A major problem is that all future theories will need to be split<br>\n   similarly</p>\n<p>- For example, IOrderings.thy for all of the lemmas and theorems that<br>\n      work in an intuitionistic context, and Orderings.thy as the theory<br>\n      that contains everything in IOrderings.thy <em>plus</em> any lemmas/theories<br>\n      that actually depend on classical logic.</p>\n<p>Replace the global HOL.True_or_False axiomatization with many local<br>\nassumptions/dependencies on the individual lemmas and theorems.</p>\n<p>- probably the least amount of broad structural change (effectively,<br>\n   we're just adding one more assumption to any classical lemmas)</p>\n<p>- but tedious to make lots of minor changes to make to the proofs of the<br>\n   lemmas</p>\n<p>- you can see examples of this in my attached patch<br>\n      - I totally acknowledge that my updated proofs are super-hacky at the<br>\n      moment.</p>\n<p>- needed to move the declarations of a bunch of lemmas as elimination<br>\n   rules <em>before</em> the Hypsubst and Classical structures, otherwise I get an<br>\n   error:</p>\n<p>- on the line \"declare iffCE [elim!]\" we see the message:<br>\n      exception Option raised (line 81 of \"General/basics.ML\")</p>\n<p>- but if those particular errors go away if I relocate the<br>\n      declarations</p>\n<p>- unfortunately, anything elim-related fails with the same error</p>",
        "id": 294319621,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660926471
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nThere is certainly something to learn from it: how proof assistants were <br>\nimplemented in the early 1990-ies. See also the famous Handbook article by <br>\nLarry Paulson \"Designing a theorem prover\": <br>\n<a href=\"http://www.cl.cam.ac.uk/techreports/UCAM-CL-TR-192.html\">http://www.cl.cam.ac.uk/techreports/UCAM-CL-TR-192.html</a></p>\n<p>The newer \"Handbook of Practical Logic and Automated Reasoning\" by John <br>\nHarrison also has a chapter on \"Interactive theorem proving\", see also <br>\n<a href=\"http://www.cl.cam.ac.uk/~jrh13/atp\">http://www.cl.cam.ac.uk/~jrh13/atp</a> --- it describes HOL-Light, so the <br>\nprover architecture is very minimalistic.</p>\n<p>That won't help in the project to remove the classical principle from <br>\nIsabelle/HOL, which I would consider futile.  Why change the logic anyway? <br>\nBetter use it (and its many ad-on tools) to model your own language and <br>\nlogic inside it.</p>\n<p>Makarius</p>\n<hr>\n<p><a href=\"http://stop-ttip.org\">http://stop-ttip.org</a>  1,152,367 people so far</p>\n<hr>",
        "id": 294323743,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660927812
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nOn Sat, 20 Dec 2014, Josh Tilles wrote:</p>\n<blockquote>\n<blockquote>\n<p>On Fri, 21 Nov 2014, Josh Tilles wrote:</p>\n<p>P.S. I'm about a hundred pages into <em>ML for the Working Programmer</em>, so I</p>\n<blockquote>\n<p>apologize if all of my questions are just a result of my not yet having<br>\nread the chapter about constructing a tactical theorem prover [?]<br>\n</p>\n</blockquote>\n<p>There is certainly something to learn from it: how proof assistants were<br>\nimplemented in the early 1990-ies. See also the famous Handbook article by<br>\nLarry Paulson \"Designing a theorem prover\": <a href=\"http://www.cl.cam.ac.uk/\">http://www.cl.cam.ac.uk/</a><br>\ntechreports/UCAM-CL-TR-192.html</p>\n</blockquote>\n<p>Are you being tongue-in-cheek? I can't tell. Like, I wouldn't have <br>\nguessed that implementation techniques from twenty years ago are <br>\nrelevant now...</p>\n</blockquote>\n<p>I did not intend to make jokes about old, but important articles.  There <br>\nis definitely something to learn from ancient times, where the concepts <br>\nare easier to see without all the rest around it that emerged over the <br>\ndecades.  Of course, you need to put things into the historical <br>\nperspective, and see the key points of newer prover architecture -- <br>\nIsabelle is very rich in that respect.</p>\n<blockquote>\n<blockquote>\n<p>The newer \"Handbook of Practical Logic and Automated Reasoning\" by John <br>\nHarrison also has a chapter on \"Interactive theorem proving\", see also <br>\n<a href=\"http://www.cl.cam.ac.uk/~jrh13/atp\">http://www.cl.cam.ac.uk/~jrh13/atp</a> --- it describes HOL-Light, so the <br>\nprover architecture is very minimalistic.</p>\n</blockquote>\n</blockquote>\n<p>Note that HOL-Light is interesting in being a minimalistic model of an <br>\nLCF-style prover that is in actual use.  That is part of its culture, and <br>\nin contrast to Isabelle, but contrast also helps to learn something.</p>\n<blockquote>\n<blockquote>\n<p>Better use it (and its many ad-on tools) to model your own language and <br>\nlogic inside it.</p>\n<p>I'm not sure what you mean. Could you elaborate? Or perhaps point me <br>\ntoward some examples or explanations by other people?</p>\n</blockquote>\n</blockquote>\n<p>See what Larry said about non-standard analysis.  When you want to do <br>\nrealistic applications, it is better to keep the existing logical <br>\nfoundations, and build within that huge building what you need in <br>\naddition.</p>\n<p>Makarius</p>\n<hr>\n<p><a href=\"http://stop-ttip.org\">http://stop-ttip.org</a>  1,218,911 people so far</p>\n<hr>",
        "id": 294324200,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660927956
    }
]