[
    {
        "content": "<p>From: Peter Chapman &lt;<a href=\"mailto:pc@cs.st-and.ac.uk\">pc@cs.st-and.ac.uk</a>&gt;<br>\nHi</p>\n<p>I'm trying to write some tacticals, and want to be able to translate  <br>\nthe line</p>\n<p>apply (drule_tac x=A in spec)</p>\n<p>so that I can put it in my tactical.  I tried</p>\n<p>dtac spec 1</p>\n<p>but this does not allow me to instantiate with a term I supply.  I've  <br>\nlooked through the Isabelle manual and cannot find anything.  Is this  <br>\npossible?  And, if so, can someone tell me how to do it, please?</p>\n<p>Thanks</p>\n<p>Peter</p>",
        "id": 294054952,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660821151
    },
    {
        "content": "<p>From: Florian Haftmann &lt;<a href=\"mailto:florian.haftmann@informatik.tu-muenchen.de\">florian.haftmann@informatik.tu-muenchen.de</a>&gt;<br>\nDear Peter,</p>\n<p>Perhaps Drule.instantiate or Drule.instantiate' provide what you need.</p>\n<p>Hope this helps<br>\n    Florian<br>\n<a href=\"/user_uploads/14278/oli3zw0yJUTNj5nYXrCQf997/florian.haftmann.vcf\">florian.haftmann.vcf</a><br>\n<a href=\"/user_uploads/14278/Fu4pBhGcS4tLDpbIJ1zXX9l_/signature.asc\">signature.asc</a></p>",
        "id": 294054968,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660821157
    },
    {
        "content": "<p>From: Clemens Ballarin &lt;<a href=\"mailto:ballarin@in.tum.de\">ballarin@in.tum.de</a>&gt;<br>\nPeter,</p>\n<p>Use res_inst_tac, or rather dres_inst_tac.</p>\n<p>Clemens</p>",
        "id": 294054986,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660821169
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nThe family of proof methods called \"rule_tac\", \"erule_tac\", \"drule_tac\" <br>\netc. works by reading given terms within the joint context of a given rule <br>\nand corresponding sub-goal (potentially with locally bound goal parameters <br>\nby the !! quantifier).  This very delicate operation has traditionally <br>\nbeen performed by dres_inst_tac etc. as defined in src/Pure/tactic.ML (the <br>\nold \"Isabelle Reference Manual\" also says a few words about these <br>\ntactics).</p>\n<p>Unfortunately, these tactics are ignorant of the real proof context, only <br>\ntaking the background theory into account.  The corresponding Isar methods <br>\n\"drule_tac\" etc. use a different implementation along similar lines. See <br>\nsrc/Pure/rule_insts.ML which is still only half-way towards a proper Isar <br>\nimplementation of this idea, and awaits another major cleanup.  When this <br>\nhappens eventually (really soon now), there will be just one version of <br>\ndres_inst_tac etc. taking an explicit Proof.context, and probably also <br>\nexplicit pre-terms instead of strings.  The details are still in flux.</p>\n<p>Anyway, what is your conrete application?  It might be easier to avoid <br>\ninstantiation tactics altogether, and merely instantiate the rule <br>\nbeforehand, independently of the goal.</p>\n<p>Makarius</p>",
        "id": 294055719,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660821489
    }
]