[
    {
        "content": "<p>From: \"Max W. Haslbeck\" &lt;<a href=\"mailto:max.haslbeck@gmx.de\">max.haslbeck@gmx.de</a>&gt;<br>\nHi,</p>\n<p>I’m using the development version of Isabelle and I’m doing a lot of code exporting to Haskell these days.</p>\n<p>When using the following code</p>\n<hr>\n<p>theory Scratch<br>\nimports Main<br>\nbegin</p>\n<p>export_code binomial in Haskell</p>\n<p>end</p>\n<hr>\n<p>Isabelle generates 6 .hs files in the virtual \"isabelle-export:\" directory. Is there a way to quickly export all of these to a non-virtual folder on my hard drive? </p>\n<p>Right now I open all of these in Isabelle/jedit and use \"Save as\" from the \"File\" menu. My use case has a number of .hs files which change frequently, so using \"Save as\" every time is rather tedious.</p>\n<p>Gruß<br>\nMax</p>",
        "id": 294754151,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661196656
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nthe \"File\" menu. My use case has a number of .hs files which change<br>\nfrequently, so using \"Save as\" every time is rather tedious.</p>\n<p>No, as far as I understand the IO model of jEdit this is a remaining<br>\ninconvenience of the VFS approach. I wonder if jEdit has multi-file or<br>\ndirectory operations somewhere that still need to be (re)discovered.</p>\n<p>Since export_code uses Generated_Files internally (apart from Export),<br>\nyou could experiment with Generated_Files.write_file or better use the<br>\ncommand 'compile_generated_files' to turn the individual sources into<br>\nsome derived artifact. Thus the shell programming happens in Isabelle/ML.</p>\n<p>Side-remark: When you say \"hard drive\" (or \"disk\") to mean the<br>\n\"file-system\", it is a verbal violation of OS abstractions that are<br>\ncommon-place since 1980. That is particular odd today, since most<br>\nmachines don't even have a hard drive anymore, and a solid state \"disk\"<br>\n(SSD) is not a disk either.</p>\n<p>Makarius</p>",
        "id": 294754174,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661196665
    },
    {
        "content": "<p>From: \"Max W. Haslbeck\" &lt;<a href=\"mailto:max.haslbeck@gmx.de\">max.haslbeck@gmx.de</a>&gt;<br>\nThanks for the pointer. For now I use the following Isabelle/ML script:</p>\n<p>====================<br>\ntheory Scratch<br>\n  imports Main<br>\nbegin</p>\n<p>export_code binomial in Haskell</p>\n<p>ML ‹<br>\nval gen_files = Generated_Files.get_files (Proof_Context.theory_of @{context})<br>\nval output_dir = Path.explode \"~/output_hs/\"<br>\n›</p>\n<p>(*<br>\n(* The next line creates output_dir and writes the files there *)<br>\nML ‹map (Generated_Files.write_file write_dir) gen_files›<br>\n*)</p>\n<p>end<br>\n====================</p>",
        "id": 294754185,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661196673
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nIn some sense this emulates the Isabelle2018 behaviour of export_code.</p>\n<p>Just out of curiosity: What happens with the content of the global<br>\n~/output_hs directory? Is it just for information, our do other tools<br>\ntake over the content?</p>\n<p>Makarius</p>",
        "id": 294754194,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661196680
    },
    {
        "content": "<p>From: \"<a href=\"mailto:lammich@in.tum.de\">lammich@in.tum.de</a>\" &lt;<a href=\"mailto:lammich@in.tum.de\">lammich@in.tum.de</a>&gt;<br>\nWhat will be exported by this? Ie what does generated files contain. All files<br>\never generated by the session?  </p>\n<p>Peter</p>",
        "id": 294754202,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661196686
    },
    {
        "content": "<p>From: Peter Lammich &lt;<a href=\"mailto:lammich@in.tum.de\">lammich@in.tum.de</a>&gt;<br>\nI have use-cases where other tools, like the MlTon compiler or LLVM,<br>\nshall take over. They then compile the generated code together with<br>\nsome other (non-generated) source file.</p>\n<p>And I also need to integrate the Isabelle code generator into a larger<br>\nbuild-process controlled by a Makefile/build-script.</p>\n<p>How do I do that sort of stuff with the new code generator? </p>\n<ul>\n<li>\n<p>Is there an Isabelle command line tool to \"export\" the generated<br>\nfiles from Isabelle to the real file system? </p>\n</li>\n<li>\n<p>Max solution has a hard-coded target directory. This is highly non-<br>\nportable. How to export the files to a directory that is determined by<br>\nmy build-script/Makefile?</p>\n</li>\n</ul>",
        "id": 294754217,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661196692
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nAll files from the current theory, unless you filter more specifically.</p>\n<p>Makarius</p>",
        "id": 294756194,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661197595
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nOn 01/05/2019 00:51, Peter Lammich wrote:</p>\n<blockquote>\n<blockquote>\n<p>Just out of curiosity: What happens with the content of the global<br>\n~/output_hs directory? Is it just for information, our do other tools<br>\ntake over the content?</p>\n</blockquote>\n<p>I have use-cases where other tools, like the MlTon compiler or LLVM,<br>\nshall take over. They then compile the generated code together with<br>\nsome other (non-generated) source file.</p>\n</blockquote>\n<p>This sounds like an application of the command 'compile_generated_files'<br>\ne.g. in Isabelle2019-RC0. You can read about it in NEWS, the isar-ref<br>\nmanual, or do hypersearch for a few applications in Isabelle + AFP to<br>\nget an idea.</p>\n<blockquote>\n<p>And I also need to integrate the Isabelle code generator into a larger<br>\nbuild-process controlled by a Makefile/build-script.</p>\n</blockquote>\n<p>Most of that should no longer be required: you simply do all of the<br>\ncompilation and assembly inside Isabelle/ML, and only export the final<br>\nartifacts.</p>\n<p>See also documentation (or examples) on 'export_files' within ROOT<br>\nfiles. This helps to wrap up everything nicely such that only \"isabelle<br>\nbuild -e\" is required to materialize the final result in the file-system.</p>\n<blockquote>\n<ul>\n<li>Max solution has a hard-coded target directory. This is highly non-<br>\nportable. How to export the files to a directory that is determined by<br>\nmy build-script/Makefile?</li>\n</ul>\n</blockquote>\n<p>You can choose export names (relative to the theory), and maybe strip<br>\nsome path components in the 'export_files' specification. There is no<br>\nsupport for general renamings: I have tried to keep things simple.</p>\n<p>By default, the build-script/Makefile is a candidate for deletion. The<br>\nquestion should be: What are its remaining uses?</p>\n<p>If there are fine points in new generated files / exported files that<br>\nstill make old Makefiles necessary, we have a short time-window before<br>\nthe Isabelle2019 release to sort this out.</p>\n<p>Makarius</p>",
        "id": 294756326,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661197662
    },
    {
        "content": "<p>From: \"Max W. Haslbeck\" &lt;<a href=\"mailto:max.haslbeck@gmx.de\">max.haslbeck@gmx.de</a>&gt;<br>\nIt’s mainly for information, so that I can setup the corresponding Haskell code correctly. We’re trying to reason about LLVM programs in Isabelle/HOL. Right now im using llvm-hs[1] to generate an AST of LLVM code which I then use with Isabelle’s generated code for small test runs. All of this is in its early stages, so it’s useful to have a way to quickly export the generated code.</p>\n<p>Gruß<br>\nMax</p>\n<p>[1] <a href=\"https://hackage.haskell.org/package/llvm-hs\">https://hackage.haskell.org/package/llvm-hs</a></p>",
        "id": 294756985,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661197937
    }
]