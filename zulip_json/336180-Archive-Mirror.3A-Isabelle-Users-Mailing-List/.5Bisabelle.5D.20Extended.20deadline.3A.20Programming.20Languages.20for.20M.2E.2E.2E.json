[
    {
        "content": "<p>From: Freek Wiedijk &lt;<a href=\"mailto:freek@cs.ru.nl\">freek@cs.ru.nl</a>&gt;<br>\n[Extended deadline: submissions now due May 2nd, 2007]</p>\n<p>Programming Languages for Mechanized Mathematics Workshop</p>\n<p>As part of Calculemus 2007 <br>\n&lt;<a href=\"http://www.risc.uni-linz.ac.at/about/conferences/Calculemus2007/\">http://www.risc.uni-linz.ac.at/about/conferences/Calculemus2007/</a>&gt;<br>\nHagenbergs, Austria<br>\nJune 29-30, 2007.</p>\n<p>The intent of this workshop is to examine more closely the intersection between<br>\nprogramming languages and mechanized mathematics systems (MMS). By MMS, we<br>\nunderstand computer algebra systems (CAS), [automated] theorem provers<br>\n(TP/ATP), all heading towards the development of fully unified systems (the<br>\nMMS), sometimes also called universal mathematical assistant systems (MAS) (see<br>\nCalculemus 2007<br>\n&lt;<a href=\"http://www.risc.uni-linz.ac.at/about/conferences/Calculemus2007/\">http://www.risc.uni-linz.ac.at/about/conferences/Calculemus2007/</a>&gt;).</p>\n<p>There are various ways in which these two subjects of /programming languages/ and /systems for mathematics/ meet:</p>\n<p>* Many systems for mathematics contain a dedicated programming<br>\n     language. For instance, most computer algebra systems contain a<br>\n     dedicated language (and are frequently built in that same<br>\n     language); some proof assistants (like the Ltac language for Coq)<br>\n     also have an embedded programming language. Note that in many<br>\n     instances this language captures only algorithmic content, and<br>\n     /declarative/ or /representational/ issues are avoided.</p>\n<p>* The /mathematical languages/ of many systems for mathematics are<br>\n     very close to a functional programming language. For instance the<br>\n     language of ACL2 is just Lisp, and the language of Coq is very<br>\n     close to Haskell. But even the mathematical language of the HOL<br>\n     system can be used as a functional programming language that is<br>\n     very close to ML and Haskell. On the other hand, these languages<br>\n     also contain very rich specification capabilities, which are<br>\n     rarely available in most computation-oriented programming<br>\n     languages. And even then, many specification languages (B, Z,<br>\n     Maude, OBJ3, CASL, etc) can still teach MMSes a trick or two<br>\n     regarding representational power.</p>\n<p>* Conversely, functional programming languages have been getting<br>\n     \"more mathematical\" all the time. For instance, they seem to have<br>\n     discovered the value of dependent types rather recently. But they<br>\n     are still not quite ready to 'host' mathematics (the non-success<br>\n     of docon &lt;<a href=\"http://www.haskell.org/docon/\">http://www.haskell.org/docon/</a>&gt; being typical). There are<br>\n     some promising languages on the horizon (Epigram<br>\n     &lt;<a href=\"http://www.e-pig.org/\">http://www.e-pig.org/</a>&gt;, Omega<br>\n     &lt;<a href=\"http://web.cecs.pdx.edu/%7Esheard/Omega/index.html\">http://web.cecs.pdx.edu/%7Esheard/Omega/index.html</a>&gt;) as well as<br>\n     some hybrid systems (Agda &lt;<a href=\"http://agda.sourceforge.net/\">http://agda.sourceforge.net/</a>&gt;, Focal<br>\n     &lt;<a href=\"http://focal.inria.fr/site/index.php\">http://focal.inria.fr/site/index.php</a>&gt;), although it is unclear if<br>\n     they are truly capable of expressing the full range of ideas<br>\n     present in mathematics.</p>\n<p>* Systems for mathematics are used to prove programs correct. (One<br>\n     method is to generate \"correctness conditions\" from a program that<br>\n     has been annotated in the style of Hoare logic and then prove<br>\n     those conditions in a proof assistant.) An interesting question is<br>\n     what improvements are needed for this both on the side of the<br>\n     mathematical systems and on the side of the programming languages.</p>\n<p>We are interested in all these issues. We hope that a certain synergy will<br>\ndevelop between those issues by having them explored in parallel.</p>\n<p>These issues have a very colourful history. Many programming language<br>\ninnovations first appeared in either CASes or Proof Assistants, before<br>\nmigrating towards more mainstream languages. One can cite (in no particular<br>\norder) type inference, dependent types, generics, term-rewriting, first-class<br>\ntypes, first-class expressions, first-class modules, code extraction, and so<br>\non. However, a number of these innovations were never aggressively pursued by<br>\nsystem builders, letting them instead be developped (slowly) by programming<br>\nlanguage researchers. Some, like type inference and generics have flourished.<br>\nOthers, like first-class types and first-class expressions, are not seemingly<br>\nbeing researched by anyone.</p>\n<p>We want to critically examine what has worked, and what has not. Why are all<br>\nthe current ``popular''[1] computer algebra systems untyped? Why are the<br>\n(strongly typed) proof assistants so much harder to use than a typical CAS? But<br>\nalso look at question like what forms of polymorphism exists in mathematics?<br>\nWhat forms of dependent types exist in mathematics? How can MMS regain the<br>\nupper hand on issues of 'genericity'? What are the biggest barriers to using a<br>\nmore mainstream language as a host language for a CAS or an ATP?</p>\n<p>This workshop will accept two kinds of submissions: full research papers as<br>\nwell as position papers. Research papers should be nore more than 15 pages in<br>\nlength, and positions papers no more than 3 pages. Submission will be through<br>\n_EasyChair_. An informal version of the proceedings will be available at the<br>\nworkshop, with a more formal version to appear later. We are looking into<br>\nhaving the best papers completed into full papers and published as a special<br>\nissue of a Journal (details to follow).</p>\n<p>Important Dates</p>\n<p>May 02, 2007: Submission Deadline (Extended!)<br>\nMay 30, 2007: Notification<br>\nJune 29-30, 2007: Workshop</p>\n<p>Program Committee</p>\n<p>Lennart Augustsson [Credit Suisse]<br>\nWieb Bosma [Radboud University Nijmegen, Netherlands]<br>\nJacques Carette (co-Chair) [McMaster University, Canada]<br>\nDavid Delahaye [CNAM, France]<br>\nJean-Christophe Filliâtre [CNRS and Université de Paris-Sud, France]<br>\nJohn Harrison [Intel Corporation, USA]<br>\nJosef Urban [Charles University, Czech Republic]<br>\nMarkus (Makarius) Wenzel [Technische Universität München, Germany]<br>\nFreek Wiedijk (co-Chair) [Radboud University Nijmegen, Netherlands]<br>\nWolfgang Windsteiger [University of Linz, Austria]</p>\n<p>Location and Registration</p>\n<p>Location and registration information can be found on the Calculemus<br>\n&lt;<a href=\"http://www.risc.uni-linz.ac.at/about/conferences/Calculemus2007/\">http://www.risc.uni-linz.ac.at/about/conferences/Calculemus2007/</a>&gt; web site.</p>\n<hr>\n<p>[1] by popular we mean &gt; 1 million users.</p>",
        "id": 294048636,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660818392
    }
]