[
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\nAlthough I don't understand exactly how you are trying to speed things <br>\nup, it sounds like you have to write a tactic at the ML level to do <br>\nthis. Sometimes it is possible to phrase the kind of \"reuse\" you seem to <br>\nbe after in a rule:</p>\n<p>P ==&gt; (P ==&gt; Q) ==&gt; P &amp; Q</p>\n<p>But I'm not sure this helps you.</p>\n<p>Tobias</p>\n<p>Dominik Luecke schrieb:</p>",
        "id": 294050566,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660819283
    },
    {
        "content": "<p>From: Jeremy Dawson &lt;<a href=\"mailto:Jeremy.Dawson@rsise.anu.edu.au\">Jeremy.Dawson@rsise.anu.edu.au</a>&gt;<br>\nDominik Luecke wrote:<br>\nDear Dominik,</p>\n<p>Do you mean there are 23000 subgoals?  Wow!</p>\n<p>On the subject of speeding things up:</p>\n<p>(1) Does (erule disjE) need to be applied lots of times?<br>\nIf so, note that using the ML interface, the difference between<br>\nREPEAT (etac disjE 1) and<br>\nREPEAT_DETERM (etac disjE 1) can be significant.</p>\n<p>I don't know whether you can do these in Isar.</p>\n<p>(2) If you're applying simp 23000 times, then this is a place to look <br>\nfor speedups. (simp is a highly \"compound\" tactic, unlike etac). Find <br>\nout exactly which rewrite rules are applied, and use them specifically <br>\n(using unfold, not simp).<br>\nIf you need to use simp, consider whether you can avoid using or <br>\nsimplifying assumptions (ie, use no_asm).</p>\n<p>(3) Where the proofs of many sub-goals look quite similar try to create <br>\na single theorem encapsulating the proof, (call it my_thm)<br>\nand try something like TRYALL (eatac n my_thm)</p>\n<p>This avoids trying multiple proof steps multiple times</p>\n<p>So far as I'm aware you can't do this in Isar</p>\n<p>Regards,</p>\n<p>Jeremy Dawson</p>",
        "id": 294050576,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660819286
    },
    {
        "content": "<p>From: Lawrence Paulson &lt;<a href=\"mailto:lp15@cam.ac.uk\">lp15@cam.ac.uk</a>&gt;<br>\nThis sort of case-splitting easily gives rise to huge numbers of  <br>\ngoals, but this is best done internally. I assume you have already  <br>\ntried auto and force on them?<br>\nLarry Paulson</p>",
        "id": 294050618,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660819305
    },
    {
        "content": "<p>From: Dominik Luecke &lt;<a href=\"mailto:luecke@informatik.uni-bremen.de\">luecke@informatik.uni-bremen.de</a>&gt;<br>\nHello,</p>\n<p>first of all... Thanks for all the answers.</p>\n<p>I did try that, but after several hours of no real life-sign of Isabelle<br>\nI got bored and stopped the process. I thought that it might be an idea,<br>\nto somehow break down the stuff to smaller steps, so that you can at<br>\nleast see if anything is really happening, or if Isabelle is just doing<br>\nsomething stupid for hours. The main problem is that the proof goal is<br>\nvery, very big (already considered in the number of involved<br>\n(in)-equations. </p>\n<p>I have added a sample goal of the proof to this mail, to make the<br>\ndescription of this Isabelle problem less abstract. </p>\n<p>Regards,<br>\n Dominik<br>\n<a href=\"/user_uploads/14278/kO29YZi1T0UwsZWbqr13jHnn/DRA_1_goal.txt\">DRA_1_goal.txt</a></p>",
        "id": 294050638,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660819311
    },
    {
        "content": "<p>From: Paul Graunke &lt;<a href=\"mailto:paul.graunke@galois.com\">paul.graunke@galois.com</a>&gt;<br>\nI've also had issues with large terms, say a list of nats, and just <br>\nperforming a<br>\nsingle call to subst, let alone simp.  I would guess that using <br>\nunification for<br>\nthe P in the conclusion of ssubst, checking equality of terms (like the two<br>\ninstances of P in the premise of ssubst), and implementing beta reduction<br>\nvia explicit substitution all contribute.  I'm only guessing though.</p>\n<p>Regards,</p>\n<p>Paul<br>\nDominik Luecke wrote:</p>",
        "id": 294050752,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660819348
    },
    {
        "content": "<p>From: Dominik Luecke &lt;<a href=\"mailto:luecke@informatik.uni-bremen.de\">luecke@informatik.uni-bremen.de</a>&gt;<br>\nHello,</p>\n<p>I am currently trying to prove a theorems that involve lots of case<br>\nsplits in the proof process. I mean the single sub-goals a solvable by </p>\n<p>apply (erule disjE)+<br>\n  apply (simp)<br>\n  apply (simp)</p>\n<p>where each application of this little sequence of commands takes between<br>\n1 and 30 secs. I am currently wondering if it is possible to speed up<br>\nthe process of proving the single goals by remembering the successful<br>\ntactic of the previous step and all automatically added theorems of it.<br>\nEspecially since the proofs of many sub-goals look quite similar. Any<br>\nspeedup would help, especially since there are goals that need to be<br>\nsplit up into about 23k cases to solve them. </p>\n<p>Regards,<br>\n Dominik</p>",
        "id": 294051537,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660819686
    }
]