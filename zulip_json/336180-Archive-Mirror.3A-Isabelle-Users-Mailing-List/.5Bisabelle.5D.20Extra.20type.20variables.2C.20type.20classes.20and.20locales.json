[
    {
        "content": "<p>From: Christoph Feller &lt;<a href=\"mailto:c_feller@informatik.uni-kl.de\">c_feller@informatik.uni-kl.de</a>&gt;<br>\nHallo,</p>\n<p>I have with a hidden extra type variable again and again I have no<br>\nclue what exactly went wrong. I've made a small example:</p>\n<p>class testC = type +<br>\nfixes from_nat :: \"nat =&gt; 'a\"<br>\n and  to_nat :: \"'a =&gt; nat\"</p>\n<p>locale Test =<br>\nfixes  dummy :: \"'a::testC\"<br>\nassumes dd: \"ALL z::'a::testC. to_nat z ~= 0\"<br>\nbegin</p>\n<p>definition ftest :: \"nat =&gt; 'a list\" where \"ftest n == [from_nat n]\"</p>\n<p>inductive test::\"nat =&gt; nat =&gt; bool\"<br>\nwhere<br>\n\"((ftest a)::'a list) = ((ftest b)::'a list) ==&gt; test a b\"<br>\n...</p>\n<p>I thought the locale not only fixed dummy but also 'a so that it isn't<br>\nnecessarily an extra type variable in the inductive definition. Am I<br>\nwrong or is there another mistake in my example?</p>\n<p>Thanks in advance,<br>\nChristoph</p>",
        "id": 294073412,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660827977
    },
    {
        "content": "<p>From: Brian Huffman &lt;<a href=\"mailto:brianh@cs.pdx.edu\">brianh@cs.pdx.edu</a>&gt;<br>\nQuoting Christoph Feller &lt;<a href=\"mailto:c_feller@informatik.uni-kl.de\">c_feller@informatik.uni-kl.de</a>&gt;:</p>\n<p>Hi Christoph,</p>\n<p>I think you are right to expect this to work.</p>\n<p>When you define a locale like \"Test\", the locale package defines a  <br>\npredicate of the same name, which encodes all of the locale  <br>\nassumptions. Usually the predicate takes all of the parameters from  <br>\n\"fixes\" declarations as arguments. However, locales like your \"Test\"  <br>\nexample require some special treatment.  For example:</p>\n<p>thm Test_def</p>\n<p>Test TYPE(?'a::testC) == ALL z::?'a::testC. to_nat z ~= 0</p>\n<p>As you can see, the locale predicate \"Test\" does not depend on the  <br>\nlocale parameter \"dummy\", but it still depends on the type variable 'a.</p>\n<p>I would have expected the locale package to use the same trick to  <br>\nencode functions like your \"test\". That is, an extra hidden  <br>\nTYPE(?'a::testC) parameter should be added to make the type checker  <br>\nhappy. I would consider this to be a bug in the locale implementation.</p>\n<p>By the way, the following definition <em>does</em> work inside the locale.  <br>\nJust like your inductive definition of \"test\", it uses type variable  <br>\n'a on the right-hand side, but no type variable appears in the type of  <br>\nthe constant. The only difference is that this one also uses the  <br>\nlocale constant \"dummy\" on the right-hand side.</p>\n<p>definition<br>\n   test2 :: \"nat =&gt; bool\"<br>\nwhere<br>\n   \"test2 n = (((ftest n) :: 'a list) = [dummy])\"</p>\n<ul>\n<li>Brian</li>\n</ul>",
        "id": 294073462,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660827996
    },
    {
        "content": "<p>From: Christoph Feller &lt;<a href=\"mailto:c_feller@informatik.uni-kl.de\">c_feller@informatik.uni-kl.de</a>&gt;<br>\nHallo Brian,</p>\n<p>Thanks for your answer. So I shouldn't count on there being a solution<br>\nto this problem apart from adding dummy variables into my definitions?<br>\nWell, it's not a big problem, it will probably just make some<br>\ndefinitions a bit less elegant.</p>\n<p>Christoph</p>",
        "id": 294073570,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660828038
    }
]