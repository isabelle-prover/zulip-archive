[
    {
        "content": "<p>From: Buday Gergely &lt;<a href=\"mailto:gbuday@karolyrobert.hu\">gbuday@karolyrobert.hu</a>&gt;<br>\nHi Martin,</p>\n<p>what is your definition of @ ? Did you get it from the Tutorial? As I mentioned it would be better to provide us a working Isabelle theory containing </p>\n<p>theory Blabla<br>\nimports main</p>\n<p>and all the necessary definitions so we could try it out.</p>\n<ul>\n<li>Gergely</li>\n</ul>",
        "id": 294316451,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660925618
    },
    {
        "content": "<p>From: Buday Gergely &lt;<a href=\"mailto:gbuday@karolyrobert.hu\">gbuday@karolyrobert.hu</a>&gt;<br>\nHi Martin,</p>\n<p>You need to understand the definitions in your theory file, the ’a list datatype definition and the definition of app by primrec. Both define an infix operator (see infixr ”#” and infixr ”@”).</p>\n<h1>is the cons operation for lists, that is, x # xs works if x is an element of some fixed type ’a and xs is of type ’a list.</h1>\n<p>@ is an append operation that joins two _lists_, i.e.  xs @ ys works when xs and ys are both of type ’a list for some fixed type ’a.</p>\n<p>In the above ’a is called a type variable.</p>\n<p>When I load your theory into Isabelle/JEdit,</p>\n<p>primrec rotate1 :: \"'a list =&gt; 'a list\" where<br>\n\"rotate1 [] = []\" |<br>\n\"rotate1 (x # xs) = xs # [x]\"</p>\n<p>Isabelle says that the second clause of the rotate1 definition has an error. You cannot write xs # [x] as the left operand should be of type ‘a but it is of type ‘a list.</p>\n<p>Concerning your mmap definition</p>\n<p>primrec mmap :: \"'a =&gt; 'b =&gt; 'a list =&gt; 'a list\" where<br>\n\"mmap f [] = []\" |<br>\n\"mmap f ((mmap f x) # (mmap f xs)) = mmap f (x # xs)\"</p>\n<p>this is seriously broken, you exchange the left hand side of the second clause with the right hand side, for example. The correct version is</p>\n<p>primrec mmap :: \"('a =&gt; 'b) =&gt; 'a list =&gt; 'b list\" where<br>\n\"mmap f [] = []\" |<br>\n\"mmap f (x # xs) = (f x) # (mmap f xs)\"</p>\n<p>mmap’s first argument is not a scalar element of type ‘a but a function that maps from ‘a to ‘b. Since that, it produces a ‘b list from an ‘a list.</p>\n<p>I suggest you to learn functional programming first, preferably  with Standard ML as that is close to the higher order logic notation that Isabelle uses.</p>\n<p>And please do not send many messages to the list at once.</p>\n<p>Best Wishes</p>\n<ul>\n<li>Gergely</li>\n</ul>",
        "id": 294316500,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660925632
    },
    {
        "content": "<p>From: Buday Gergely &lt;<a href=\"mailto:gbuday@karolyrobert.hu\">gbuday@karolyrobert.hu</a>&gt;<br>\nHi,</p>\n<blockquote>\n<p>primrec rotate1 :: \"'a list =&gt; 'a list\" where<br>\n\"rotate1 [] = []\" |<br>\n\"rotate1 (x # xs) = xs @ [x]\"<br>\nvalue \"rotate1 (1 # 2 # 3 # 4 # [])\"</p>\n</blockquote>\n<p>What is the purpose of this function? I cannot figure this out from your code.</p>\n<blockquote>\n<p>value \"mmap +1 (1 # 2 # [])\"<br>\nfailed to parse term</p>\n</blockquote>\n<p>I guess you want to create a function by \"+1\" but Isabelle does not understand this syntax.</p>\n<p>value \"map (λt. t + 1) [0,1,2]\"</p>\n<p>is the correct way to express that. The presence of space after the dot is significant.</p>\n<ul>\n<li>Gergely</li>\n</ul>",
        "id": 294321926,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660927177
    }
]