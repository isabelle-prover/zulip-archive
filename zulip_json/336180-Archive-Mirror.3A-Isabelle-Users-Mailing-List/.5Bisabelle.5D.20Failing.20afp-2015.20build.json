[
    {
        "content": "<p>From: Lars Hupel &lt;<a href=\"mailto:hupel@in.tum.de\">hupel@in.tum.de</a>&gt;<br>\nDear list,</p>\n<p>while trying to run some performance tests on potential future Jenkins<br>\nservers, I've encountered a  in my opinion  severe problem. The setup is<br>\nas follows:</p>\n<p>$ isabelle version<br>\nIsabelle2015: May 2015</p>\n<p>$ uname -a<br>\nLinux lars-demon 4.2.3-1-ARCH #1 SMP PREEMPT Sat Oct 3 18:52:50 CEST 2015<br>\nx86_64 GNU/Linux</p>\n<p>$ hg id # afp-2015 repository<br>\n770bf7fe6d2b tip</p>\n<p>If I now run the session \"ConcurrentGC\", this happens:</p>\n<p>$ isabelle build -bv -d thys -o threads=1 ConcurrentGC<br>\n[...]<br>\nML_PLATFORM=\"x86-linux\"<br>\nML_HOME=\"/opt/Isabelle2015/contrib/polyml-5.5.2-3/x86-linux\"<br>\nML_SYSTEM=\"polyml-5.5.2\"<br>\nML_OPTIONS=\"-H 500\"<br>\n[...]<br>\n*** A total of 104 subgoals...<br>\n*** At command \"by\" (line 130 of \"~/proj/afp-2015/thys/ConcurrentGC/TSO.thy\")<br>\nUnfinished session(s): ConcurrentGC</p>\n<p>Exactly the same error occurs with the following settings:</p>\n<p>ML_PLATFORM=\"x86_64-linux\"<br>\nML_HOME=\"/opt/Isabelle2015/contrib/polyml-5.5.2-3/x86_64-linux\"<br>\nML_SYSTEM=\"polyml-5.5.2\"<br>\nML_OPTIONS=\"-H 2000\"</p>\n<p>I have managed to reproduce this behaviour on three different machines.<br>\nHowever, now comes the worrying part: If I load the failing theory in<br>\nIsabelle/jEdit, it goes through just fine! Same goes for building without<br>\n\"-o threads=1\" *. This is a real problem, because I was actually planning<br>\nto run each session of the AFP with \"-o threads=1\". Can anybody reproduce<br>\nthis behaviour? I'm scared ...</p>\n<p>Best<br>\nLars</p>\n<ul>\n<li>it's still running on my machine, but the build has progressed well<br>\nbeyond \"TSO\"</li>\n</ul>",
        "id": 294658692,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661169113
    },
    {
        "content": "<p>From: Lars Hupel &lt;<a href=\"mailto:hupel@in.tum.de\">hupel@in.tum.de</a>&gt;</p>\n<blockquote>\n<ul>\n<li>it's still running on my machine, but the build has progressed well<br>\nbeyond \"TSO\"</li>\n</ul>\n</blockquote>\n<p>Update: Build has finished on my quad-core Core i7.</p>\n<p>Timing ConcurrentGC (4 threads, 3055.987s elapsed time, 7458.113s cpu<br>\ntime, 643.593s GC time, factor 2.44)<br>\nFinished ConcurrentGC (0:51:48 elapsed time, 2:05:59 cpu time, factor 2.43)<br>\nFinished at Wed Nov 11 21:58:23 CET 2015<br>\n0:51:52 elapsed time, 2:06:15 cpu time, factor 2.43</p>\n<p>It is still running on an 8 core \"cloud\" machine, but that one has also<br>\nprogressed beyond \"TSO\".</p>",
        "id": 294658702,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661169118
    },
    {
        "content": "<p>From: Peter Lammich &lt;<a href=\"mailto:lammich@in.tum.de\">lammich@in.tum.de</a>&gt;<br>\nWe have analysed the problem:<br>\nIt appears in both, Isabelle2015 and Isabelle 40ca618e1b2d.</p>\n<p>The behaviour of PARALLEL_GOALS may differ depending on whether there<br>\nis one or more threads. It seems nowhere documented what are the<br>\nconstraints such that the behaviour for the parallel and sequential case<br>\nmatches, except a NEWS-file entry from 2011, which talks about no<br>\nschematic variables and \"uniform\" behaviour.</p>\n<p>The \"vcg_jackhammer\" tactic implemented in ConcurrentGC seems to run in<br>\none of the cases with different behaviour, and thus triggers the<br>\nobserved error.</p>\n<p>It is unclear whether the problem lies in the jackhammer-tactic or the<br>\nPARALLEL_GOALS combinator. In any case, the current state is very<br>\nunfortunate, as proof methods may behave differently depending on the<br>\nnumber of threads. </p>\n<p>In my opinion, the PARALLEL_GOALS-tactics should completely hide the<br>\neffects of parallelism from the user, even if this means some slowdown<br>\nin the sequential case (Note: Removing the optimization for the<br>\nsequential case in PARALLEL_GOALS, and using the same map-reduce<br>\napproach with retrofitting as in the parallel case, fixes the problem in<br>\nConcurrentGC)</p>",
        "id": 294658758,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661169124
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nUsing the dangerous word \"fix\" means there is a lack of information what <br>\nis really going on.  Maybe the author of the \"vcg_jackhammer\" proof method <br>\ncan look again and explain the situation.</p>\n<p>Makarius</p>",
        "id": 294658804,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661169143
    },
    {
        "content": "<p>From: Peter Lammich &lt;<a href=\"mailto:lammich@in.tum.de\">lammich@in.tum.de</a>&gt;<br>\n\"Fix\" was meant in the sense \"make disappear this very instance of the<br>\nproblem\". Actually the described change aligns the behaviour for<br>\nthreads=1 and threads&gt;1, sacrificing the optimization that is currently<br>\nthere for threads=1.</p>\n<p>However, to general questions remain:</p>\n<p>1) Is it intentional/desirable to have the behaviour of PARALLEL_GOALS<br>\ndepend on the number of threads:<br>\n  Pro: This allows the current optimization for threads=1<br>\n  Con: This makes debugging of tactics/proofs which use PARALLEL_GOALS<br>\nharder, as one has to test for threads=1 and threads&gt;1 separately.</p>\n<p>2) Is there any documentation on what are the preconditions of<br>\nPARALLEL_GOALS such that it shows no diverging behaviour in the<br>\nparallel/sequential case? This information is required by anyone who<br>\nwants to use PARALLEL_GOALS in a thread-safe way.</p>",
        "id": 294658816,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661169149
    },
    {
        "content": "<p>From: Lars Hupel &lt;<a href=\"mailto:hupel@in.tum.de\">hupel@in.tum.de</a>&gt;</p>\n<blockquote>\n<p>Using the dangerous word \"fix\" means there is a lack of information what<br>\nis really going on.  Maybe the author of the \"vcg_jackhammer\" proof<br>\nmethod can look again and explain the situation.</p>\n</blockquote>\n<p>Even if the AFP entry gets changed, we have a broader problem here. Let<br>\nme explain.</p>\n<p>As Peter already said, there is no mention of \"PARALLEL_GOALS\" (or<br>\nrelated combinators) in the official documentation. The only relevant<br>\nmention we found is the following NEWS entry:</p>\n<blockquote>\n<ul>\n<li>Refined PARALLEL_GOALS tactical: degrades gracefully for schematic<br>\ngoal states; body tactic needs to address all subgoals uniformly.</li>\n</ul>\n</blockquote>\n<p>Additionally, there are only few occurrences in the visible Isabelle<br>\nuniverse: The distribution uses it in \"clasimp\" and \"simp\", and there<br>\nare only two more occurrences in the AFP which are not derived from what<br>\nis used in the distribution (\"AWN\" and \"Slicing\") *. Hence, the usual<br>\nheuristics of looking for canonical examples in the sources to figure<br>\nout how it should be used fails. (Also, both \"AWN\" and \"Slicing\" build<br>\nfine in single-threaded mode.)</p>\n<p>Looking just at the implementation, it becomes obvious that the<br>\nsequential case stems from a – what I would call – \"performance<br>\noptimization\"; that is, if there is only one thread, there is no point<br>\nin setting up auxiliary goal states, so the inner tactic can proceed<br>\nundisturbed.</p>\n<p>Now, there may very well be invariants which a tactic should fulfill in<br>\norder to make both the sequential and the parallel execution<br>\nobservationally equivalent. My point is that this invariant – in<br>\ncontrast to many others – are not checked in this combinator, which<br>\nallows for inconsistencies to sneak into the official AFP sources. Even<br>\nif the AFP entry gets edited in such a way that the usage of the<br>\n\"PARALLEL_GOALS\" combinator is canonical, there might be future<br>\nnon-canonical uses which are difficult to detect (needless to say, ML<br>\ntactic code – while often being necessary – is hard to understand). In<br>\nfact, the are only two ways I can think of: Time-intensive review of ML<br>\ncode or running entries in both single- and multi-threaded mode.</p>\n<p>I'm a fairly young user on the general Isabelle time scale, but as far<br>\nas I remember, additional checks have been introduced quite often to<br>\nprevent the user from doing things which might \"just work\" but are not<br>\nintended to happen (e.g. context discipline). In my opinion the best way<br>\nto proceed is to both edit the AFP entry, and to either remove the<br>\noptimization in the combinator or add additional robustness checks. In<br>\nthe case of the \"ParallelGC\" session, these two measures are independent<br>\nof each other.</p>\n<p>Cheers<br>\nLars</p>\n<ul>\n<li>There is one more occurrence in \"Isabelle_Meta_Model\", but that seems<br>\nlike a copy of what happens in the simplifier.</li>\n</ul>",
        "id": 294658838,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661169156
    },
    {
        "content": "<p>From: Lars Hupel &lt;<a href=\"mailto:hupel@in.tum.de\">hupel@in.tum.de</a>&gt;<br>\nHello Peter,</p>\n<blockquote>\n<p>Why would you want that?</p>\n</blockquote>\n<p>I don't think we want that; I believe it is by accident. From what<br>\nyou're saying it sounds like your tactic is indeed \"uniform\", so should<br>\nbe acceptable for use with PARALLEL_GOALS.</p>\n<blockquote>\n<p>(What is the point of running single-threaded these days?)</p>\n</blockquote>\n<p>I only discovered that as part of my investigations into how to reliably<br>\nbuild the AFP. There are essentially two axes for parallelism: Internal<br>\nto a session (multi-threaded, e.g. parallel proofs, parallel theories)<br>\nand between sessions (multi-process, i.e. independent AFP sessions can<br>\nbe run in parallel). Gerwin and I suspect that it would be most<br>\nefficient to exploit the latter on the cost of the former, since the AFP<br>\ndependency graph is quite sparse.</p>\n<p>Cheers<br>\nLars</p>",
        "id": 294659202,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661169298
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nOn Thu, 12 Nov 2015, Lars Hupel wrote:</p>\n<blockquote>\n<p>As Peter already said, there is no mention of \"PARALLEL_GOALS\" (or <br>\nrelated combinators) in the official documentation.</p>\n</blockquote>\n<p>I was actually under the impression that a small paragraph about that was <br>\nalready in the relevant manuals, but that is not the case.  It will happen <br>\neventually.  (I am committed to keep the important reference manuals <br>\nup-to-date, but the massive amount of material is already a problem; many <br>\npeople just ignore the manuals, either passively or actively.)</p>\n<p>Anyway, official documentation is also the ML source and the cumulative <br>\nNEWS file.</p>\n<blockquote>\n<p>The only relevant mention we found is the following NEWS entry:</p>\n<blockquote>\n<ul>\n<li>Refined PARALLEL_GOALS tactical: degrades gracefully for schematic<br>\ngoal states; body tactic needs to address all subgoals uniformly.</li>\n</ul>\n</blockquote>\n</blockquote>\n<p>Doing an exhaustive hypersearch on NEWS in Isabelle2015 provides the <br>\nfollowing bits of information:</p>\n<p>Isabelle2009-1 (December 2009)</p>\n<p>* PARALLEL_CHOICE and PARALLEL_GOALS provide basic support for<br>\n   parallel tactical reasoning.</p>\n<p>Isabelle2011-1 (October 2011)</p>\n<p>* Refined PARALLEL_GOALS tactical: degrades gracefully for schematic<br>\n   goal states; body tactic needs to address all subgoals uniformly.</p>\n<p>Isabelle2015 (May 2015)</p>\n<p>* Tactical PARALLEL_ALLGOALS is the most common way to refer to<br>\n   PARALLEL_GOALS.</p>\n<p>This provides a glimpse on the typical bottom-up construction of new <br>\nIsabelle concepts.  We start with something we know already (<a href=\"http://Par_List.map\">Par_List.map</a>) <br>\nand work our way through further system structures, e.g. tactical <br>\nreasoning with goal and subgoal addressing.</p>\n<p>You probably know that the Larry-Paulson-goal-state is great in many <br>\nrespects, but also more concrete than semantically intended.  This means <br>\nML tactics and Isar proof methods need to be \"well-behaved\" in certain <br>\nways.  This is quite explicitly documented in the \"implementation\" manual, <br>\nbut I still see violations routinely in Isabelle applications.  The proof <br>\nparallelization occasionally changes the representation of goal states, <br>\nand tactic expressions seen in the wild break down.</p>\n<p>The present situation seems to be much less spectacular, though.</p>\n<p>For the PARALLEL_GOALS, the October 2011 NEWS snipped says \"body tactic <br>\nneeds to address all subgoals uniformly\".  This means it needs to ignore <br>\nthe accidental number of subgoals that it sees, and operate on all <br>\nsubgoals that happen to be there, e.g. like simp_all.</p>\n<p>Since it already turned out a bit impractical to take this extra condition <br>\ninto account in applications, and all concrete uses were using ALLGOALS, <br>\nthe May 2015 version formalizes that situation by a new PARALLEL_ALLGOALS <br>\ncombinator and makes it \"the most common way\" in the NEWS.</p>\n<p>The ConcurrentIMP session was added before the Isabelle2015 release, where <br>\nPARALLEL_ALLGOALS was not yet available as canonical shortcut.  Thus it <br>\nfell into the gap of the historical confusion of what PARALLEL_GOALS <br>\nreally means.</p>\n<p>So this is just a routine case of updating existing AFP entries. What is <br>\nless routine is the total run-time of that session, which makes <br>\nmaintenance more difficult.  I have already reduced it a lot by using the <br>\nnewer 'subgoal' Isar command, but that is for the next Isabelle release.</p>\n<blockquote>\n<ul>\n<li>There is one more occurrence in \"Isabelle_Meta_Model\", but that seems<br>\n  like a copy of what happens in the simplifier.</li>\n</ul>\n</blockquote>\n<p>I will standardize all occurrences, but only in afp-devel.</p>\n<p>Makarius</p>",
        "id": 294659302,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661169333
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nThe behaviour and the name should fit together. A tactical that is a <br>\nparallel version of ALLGOALS should be called like that. If PARALLEL_GOALS <br>\nhad been like PARALLEL_ALLGOALS from the outset, I would have also used <br>\nthat name.</p>\n<p>Makarius</p>",
        "id": 294659318,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661169339
    },
    {
        "content": "<p>From: Peter Gammie &lt;<a href=\"mailto:peteg42@gmail.com\">peteg42@gmail.com</a>&gt;<br>\nI’m not doing anything clever here - my use of PARALLEL_GOALS was intended to have the same semantics as ALLGOALS (IIRC - it’s been a while). As far as I’m concerned it’s just an optimisation, albeit one that was somewhat essential to invariant discovery.</p>\n<p>The goals produced by vcg_jackhammer should be completely independent (no schematics etc).</p>\n<p>I never tested the single-threaded mode, and don’t see the point in it having an observably-distinct (wrt goal states etc.) semantics from the multi-threaded one. Why would you want that? (What is the point of running single-threaded these days?)</p>\n<p>Thanks to everyone for the diagnoses.</p>\n<p>cheers,<br>\npeter (resent at Larry’s request)</p>",
        "id": 294659569,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661169417
    },
    {
        "content": "<p>From: Peter Gammie &lt;<a href=\"mailto:peteg42@gmail.com\">peteg42@gmail.com</a>&gt;<br>\nOn 17 Nov 2015, at 23:03, Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt; wrote:</p>\n<blockquote>\n<p>The ConcurrentIMP session was added before the Isabelle2015 release, where PARALLEL_ALLGOALS was not yet available as canonical shortcut.  Thus it fell into the gap of the historical confusion of what PARALLEL_GOALS really means.</p>\n</blockquote>\n<p>When would one wish to use PARALLEL_GOALS now? (Why not just change its behaviour to that of PARALLEL_ALLGOALS?)</p>\n<blockquote>\n<p>So this is just a routine case of updating existing AFP entries. What is less routine is the total run-time of that session, which makes maintenance more difficult.  I have already reduced it a lot by using the newer 'subgoal' Isar command, but that is for the next Isabelle release.</p>\n</blockquote>\n<p>Sorry about that.</p>\n<p>I had in mind to revisit it now-ish, but you’ve beaten me to it. The idea was to turn vcg_jackhammer into something case-like, so the larger proofs would look like:</p>\n<p>proof vcg_jackhammer<br>\n  case (statement_label x y z) then show ?thesis<br>\n    &lt; existing apply gloop &gt;<br>\n…</p>\n<p>We talked about this earlier. I now have time to chase up your pointers. I hoped this would yield the kind of parallelism your “subgoal”s do now, with the advantage that it’d be more maintainable. Perhaps it’s a wash at this stage.</p>\n<p>thanks,<br>\npeter</p>",
        "id": 294659608,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661169428
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nOn Tue, 17 Nov 2015, Lars Hupel wrote:</p>\n<blockquote>\n<blockquote>\n<p>(What is the point of running single-threaded these days?)</p>\n</blockquote>\n<p>I only discovered that as part of my investigations into how to reliably <br>\nbuild the AFP. There are essentially two axes for parallelism: Internal <br>\nto a session (multi-threaded, e.g. parallel proofs, parallel theories) <br>\nand between sessions (multi-process, i.e. independent AFP sessions can <br>\nbe run in parallel).</p>\n</blockquote>\n<p>Sequentialism is indeed a very atypical situation, more than 10 years of <br>\nmulticore hardware becoming mainstream.</p>\n<p>In the various different isatest configurations for main Isabelle (not <br>\nAFP) we do indeed test normal situations, like threads=4 or threads=8, <br>\nalongside with abnormal ones like threads=1 or skip_proofs=true.</p>\n<p>Such tests provide empirical evidence that the \"physics\" of a <br>\nhighly-complex parallel ML and proof engine comes out as reliably <br>\n\"mathematics\", i.e. results are determined. Asking for determinism in <br>\nevery respect is a bit much.</p>\n<blockquote>\n<p>Gerwin and I suspect that it would be most efficient to exploit the <br>\nlatter on the cost of the former, since the AFP dependency graph is <br>\nquite sparse.</p>\n</blockquote>\n<p>What always happens in such situations is that the total runtime converges <br>\nto the longest sequential task.  That used to be JinjaThreads, now it is <br>\nAODV or ConcurrentGC.  These take many hours CPU time.  With a good <br>\nmulticore machine of 2015, it should be possible to run all of Isabelle + <br>\nAFP in approximately 1h elapsed time, maybe even less after some tweaking.</p>\n<p>Makarius</p>",
        "id": 294659736,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661169474
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nThe relevant changeset for Isabelle_Meta_Model is AFP/c4abbb09645a, but it <br>\nmerely conflates proper use of (PARALLEL_GOALS o ALLGOALS) to <br>\nPARALLEL_ALLGOALS.</p>\n<p>The remaining change for ConcurrentGC is included here -- I leave it to <br>\nthe author/maintainer to apply it on afp-2015 and/or afp-devel.  (E.g. <br>\nwith \"hg import\".)</p>\n<p>That is the result of staring a rather long time at not-quite-canonical <br>\ntactic definitions, to figure out how subgoal addressing is used. <br>\nNon-standard indentation and overlong source lines make it more difficult <br>\nto read the text than necessary.</p>\n<p>Earlier on this thread, I claimed that there was merely a confusion of <br>\nPARALLEL_GOALS vs. the newer PARALLEL_ALLGOALS, but basic goal addressing <br>\nwithout parallelism was already unclear.  Here are relevant paragraphs <br>\nfrom the \"implementation\" manual:</p>\n<p>Operating on a particular subgoal means to replace it by an interval<br>\n   of zero or more subgoals in the same place; other subgoals must not<br>\n   be affected, apart from instantiating schematic variables ranging<br>\n   over the whole goal state.</p>\n<p>A common pattern of composing tactics with subgoal addressing is to<br>\n   try the first one, and then the second one only if the subgoal has<br>\n   not been solved yet.  Special care is required here to avoid bumping<br>\n   into unrelated subgoals that happen to come after the original<br>\n   subgoal.  Assuming that there is only a single initial subgoal is a<br>\n   very common error when implementing tactics!</p>\n<p>...</p>\n<p>Some of these conditions are checked by higher-level goal<br>\n   infrastructure (\\secref{sec:struct-goals}); others are not checked<br>\n   explicitly, and violating them merely results in ill-behaved tactics<br>\n   experienced by the user (e.g.\\ tactics that insist in being<br>\n   applicable only to singleton goals, or prevent composition via<br>\n   standard tacticals such as @{ML REPEAT}).</p>\n<p>Testing this minor change required exceedingly long time, just to get 4-5 <br>\nattempts work out eventually.</p>\n<p>Are there deeper reasons for these proofs to be so slow?  The elapsed time <br>\nof ConncurrentIMP is about that of all of the rest of AFP taken together.</p>\n<p>As another peepwhole optimization, it should be possible to conflate</p>\n<p>apply m1<br>\n   apply m2<br>\n   done</p>\n<p>to</p>\n<p>by m1 m2</p>\n<p>This is forked in Isabelle/jEdit.  Unlike batch builds, more complex <br>\nproofs are still not forked in the Prover IDE after all these years.</p>\n<p>Makarius<br>\n<a href=\"/user_uploads/14278/Pi3Z2Wuj0-S92r7ghGFuhZTh/ch\">ch</a></p>",
        "id": 294659966,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661169548
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\n(Back to this thread, which is not yet closed in all its sub-threads.)</p>\n<p>Using the 'subgoal' command of future Isabelle2016 did indeed make a <br>\nsignificant difference some months ago.  Nonetheless there seems to be <br>\nroom for more efficiency of the basic proof tools used here.</p>\n<p>Just from the English, what does \"Perhaps it’s a wash at this stage.\" <br>\nmeand?</p>\n<p>Makarius</p>",
        "id": 294660104,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661169597
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nOn Thu, 19 Nov 2015, Makarius wrote:</p>\n<blockquote>\n<p>The remaining change for ConcurrentGC is included here -- I leave it to the <br>\nauthor/maintainer to apply it on afp-2015 and/or afp-devel.  (E.g. with \"hg <br>\nimport\".)</p>\n<p>That is the result of staring a rather long time at not-quite-canonical <br>\ntactic definitions, to figure out how subgoal addressing is used.</p>\n</blockquote>\n<p>That is almost 3 weeks old, and nothing has happened yet.  I am routinely <br>\non afp-devel, but not the official release branches.  Ultimately, it is <br>\nthe job of the AFP authors to maintain their material.</p>\n<blockquote>\n<p>Testing this minor change required exceedingly long time, just to get 4-5 <br>\nattempts work out eventually.</p>\n<p>Are there deeper reasons for these proofs to be so slow?  The elapsed time of <br>\nConncurrentIMP is about that of all of the rest of AFP taken together.</p>\n<p>As another peepwhole optimization, it should be possible to conflate</p>\n<p>apply m1<br>\n  apply m2<br>\n  done</p>\n<p>to</p>\n<p>by m1 m2</p>\n<p>This is forked in Isabelle/jEdit.  Unlike batch builds, more complex proofs <br>\nare still not forked in the Prover IDE after all these years.</p>\n</blockquote>\n<p>This is also something that can be easily done to improve the <br>\nmaintainability of ConcurrentGC.</p>\n<p>Makarius<br>\n<a href=\"/user_uploads/14278/zhdgyW6hdQrs7Tz1BAtvWxRf/ch\">ch</a></p>",
        "id": 294660152,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661169604
    },
    {
        "content": "<p>From: Peter Gammie &lt;<a href=\"mailto:peteg42@gmail.com\">peteg42@gmail.com</a>&gt;<br>\nOn 7 Dec 2015, at 22:19, Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt; wrote:</p>\n<blockquote>\n<p>That is almost 3 weeks old, and nothing has happened yet.  I am routinely on afp-devel, but not the official release branches. Ultimately, it is the job of the AFP authors to maintain their material.</p>\n</blockquote>\n<p>Makarius, I am on holidays presently and will not get to this until February 2016 or later.</p>\n<p>You have previously pushed substantial changes to ConcurrentGC without discussing them with me at all, and I don’t see why this should be any different. If it is important to you, go ahead and commit it. It should be clear that I simply want those tactics to work - I have no deep insight into the Isabelle tactic API, for otherwise I would have got it right before now. If it were my project, I would take this as an opportunity to make the Isabelle tactic API more robust, so people like me don’t cause maintenance headaches for people like you.</p>\n<p>As for runtimes: Florian’s email on isabelle-dev 2015-11-26 (why is this thread I’m responding to on isabelle-users? Aren’t we talking about the development version of the AFP for the upcoming Isabelle2016 release? <em>brain explodes</em>):</p>\n<blockquote>\n<p>For the record:</p>\n<blockquote>\n<p>Running on host lxbroy10<br>\nisabelle: fc53fbf9fe01 tip<br>\nafp: 835c7e115feb tip<br>\nRunning ConcurrentGC ...<br>\nFinished ConcurrentGC (1:08:48 elapsed time, 5:15:14 cpu time, factor 4.58)<br>\n1:21:59 elapsed time, 5:53:13 cpu time, factor 4.30</p>\n</blockquote>\n</blockquote>\n<p>Five hours of CPU seems excessive. Is this machine ancient? I don’t remember it being this bad when I submitted it to the AFP.</p>\n<blockquote>\n<p>Just from the English, what does “Perhaps it’s a wash at this stage.\" meand?</p>\n</blockquote>\n<p>As for English idioms, I would start by asking Google; it seems the phrase “it’s a wash” has a few interpretations. I humbly suggest you avoid using the passive voice as it tends to come across as aggressive. In many cases it distracts me and other subscribers from the often valid points you are making.</p>\n<p>thanks,<br>\npeter</p>",
        "id": 294660209,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661169623
    },
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\nOn 08/12/2015 00:15, Jeremy Dawson wrote:</p>\n<blockquote>\n<p>On 08/12/15 02:19, Makarius wrote:</p>\n<blockquote>\n<p>Ultimately, it is the job of the AFP authors to maintain their material.<br>\n</p>\n</blockquote>\n</blockquote>\n<p>That is indeed what the AFP web pages say.</p>\n<blockquote>\n<p>Huh?  When I was urged to convert all my proofs to Isar so that they could go<br>\ninto the AFP, I was told</p>\n<p>(quote)<br>\nOnce your theories are in the AFP, every developer who makes a<br>\nchange that breaks any of the theories in the AFP (or the Isabelle<br>\ndistribution) is responsible for fixing it, which is usually not too<br>\ndifficult, since the developer knows what kind of changes he has made.<br>\n(end quote)</p>\n</blockquote>\n<p>That is the practice in 99% of the cases.</p>\n<p>Tobias<br>\n<a href=\"/user_uploads/14278/aVTvDQz-d3ylgbwyWJt5LeFn/smime.p7s\">smime.p7s</a></p>",
        "id": 294660219,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661169628
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nOn Tue, 8 Dec 2015, Peter Gammie wrote:</p>\n<blockquote>\n<p>You have previously pushed substantial changes to ConcurrentGC without <br>\ndiscussing them with me at all, and I don’t see why this should be any <br>\ndifferent. If it is important to you, go ahead and commit it.</p>\n</blockquote>\n<p>I have no problems to push that on afp-devel, but thus it won't be on <br>\nafp-2015.  The start of the thread (and its subject line) is about <br>\nafp-2015: Lars Hupel reported problems that are relevant for that release <br>\nbranch, for continuous testing in sequential mode.</p>\n<p>Isabelle and AFP are not just a sink for material.  It is continuously <br>\ncrunched and continuosly improved, especially for performance and <br>\nrobustness.</p>\n<blockquote>\n<p>It should be clear that I simply want those tactics to work - I have no <br>\ndeep insight into the Isabelle tactic API, for otherwise I would have <br>\ngot it right before now. If it were my project, I would take this as an <br>\nopportunity to make the Isabelle tactic API more robust, so people like <br>\nme don’t cause maintenance headaches for people like you.</p>\n</blockquote>\n<p>The tactic API is from 1989 and cannot be changed without changing almost <br>\neverything of the Paulson goal state representation (which was a big asset <br>\nin its time, and still has many benefits that other ITP systems lack).</p>\n<p>The \"implementation\" manual is quite explicit about what the ML type <br>\ntactic (and Proof.method) mean semantically.  It is OK to ignore manuals <br>\nin the first round.  It is not OK to complain about the existence of <br>\nmanuals.</p>\n<blockquote>\n<blockquote>\n<blockquote>\n<p>Running on host lxbroy10<br>\nisabelle: fc53fbf9fe01 tip<br>\nafp: 835c7e115feb tip<br>\nRunning ConcurrentGC ...<br>\nFinished ConcurrentGC (1:08:48 elapsed time, 5:15:14 cpu time, factor 4.58)<br>\n1:21:59 elapsed time, 5:53:13 cpu time, factor 4.30</p>\n</blockquote>\n</blockquote>\n<p>Five hours of CPU seems excessive. Is this machine ancient? I don’t <br>\nremember it being this bad when I submitted it to the AFP.</p>\n</blockquote>\n<p>The machine is ancient, but ConcurrentGC has always been that slow. <br>\nBefore I made some changes with 'subgoal' it was even slower -- approx. by <br>\na factor 1.5.</p>\n<blockquote>\n<blockquote>\n<p>Just from the English, what does “Perhaps it’s a wash at this stage.\" <br>\nmeand?</p>\n</blockquote>\n<p>As for English idioms, I would start by asking Google; it seems the <br>\nphrase “it’s a wash” has a few interpretations. I humbly suggest you <br>\navoid using the passive voice as it tends to come across as aggressive. <br>\nIn many cases it distracts me and other subscribers from the often valid <br>\npoints you are making.</p>\n</blockquote>\n<p>Sorry, I don't know English slang, only international scientific pidgin.</p>\n<p>So far the agressions has been mostly on the side of the massive <br>\nConcurrentGC session, which has sucked up quite a lot of resources of <br>\neverybody involved in ongoing Isabelle + AFP maintenance.</p>\n<p>It is still unclear to me, why these proofs are so slow.  You as the <br>\nauthor should know.</p>\n<p>Makarius</p>",
        "id": 294660310,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661169658
    },
    {
        "content": "<p>From: Gerwin Klein &lt;<a href=\"mailto:Gerwin.Klein@nicta.com.au\">Gerwin.Klein@nicta.com.au</a>&gt;<br>\nLet’s make the change in afp-devel and see how much improvement we get over time. It won’t be visible until the next release, but afp-devel is the side that is run more often in any case.</p>\n<p>ch.txt was meant to apply to afp-devel, correct? I can have a look at that.</p>\n<p>Cheers,<br>\nGerwin</p>\n<p>ps: “it’s a wash” means “comes out to roughly the same thing\"</p>\n<hr>\n<p>The information in this e-mail may be confidential and subject to legal professional privilege and/or copyright. National ICT Australia Limited accepts no liability for any damage caused by this email or its attachments.</p>",
        "id": 294660331,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661169665
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nYes.</p>\n<p>Makarius</p>",
        "id": 294660344,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661169672
    }
]