[
    {
        "content": "<p>From: \"Elsa L. Gunter\" &lt;<a href=\"mailto:egunter@illinois.edu\">egunter@illinois.edu</a>&gt;<br>\nDear Isabelle Community,</p>\n<p>I and a graduate student of mine, Liyi Li, have been working on <br>\nformalizing the K specification language of Grigore Rosu in Isabelle.  <br>\nOne of the very first datatypes we have, giving the bulk of the syntax <br>\ndefinition for K chokes Isabelle on my machine (MacBook Pro 2.8 GHz Core <br>\ni7 with 16 GB DDR3 memory).   The error message I get is</p>\n<p>Welcome to Isabelle/HOL (Isabelle2016-1: December 2016)<br>\nRun out of store - interrupting threads</p>\n<p>Run out of store - interrupting threads</p>\n<p>Failed to recover - exiting</p>\n<p>message_output terminated<br>\nstandard_error terminated<br>\nstandard_output terminated<br>\nprocess terminated<br>\ncommand_input terminated<br>\nprocess_manager terminated<br>\nReturn code: 1</p>\n<p>The code that is causing the choke is:</p>\n<p>datatype ('upVar, 'var, 'svar, 'metaVar) kLabel<br>\n      = KLabel 'svar<br>\n      | KLabelFun \"('upVar, 'var, 'svar, 'metaVar) kLabel\"<br>\n                  \"('upVar, 'var, 'svar, 'metaVar) kListWithRewrite\"<br>\n      | IdKLabel 'metaVar<br>\nand ('upVar, 'var, 'svar, 'metaVar) kLabelWithRewrite<br>\n               = KLabelTerm \"('upVar, 'var, 'svar, 'metaVar) kLabel\"<br>\n               | KLabelRewrite \"('upVar, 'var, 'svar, 'metaVar) kLabel\"<br>\n                               \"('upVar, 'var, 'svar, 'metaVar) kLabel\"<br>\nand ('upVar, 'var, 'svar, 'metaVar) kItem =<br>\n                                         KItem \"('upVar, 'var, 'svar, <br>\n'metaVar) kLabelWithRewrite\"<br>\n                                               \"('upVar, 'var, 'svar, <br>\n'metaVar) kListWithRewrite\"<br>\n                                               'upVar<br>\n                                       | Constant \"'var theConstant\" 'upVar<br>\n                                       | IdKItem \"'metaVar\" 'upVar<br>\n                                       |  HOLE 'upVar<br>\nand ('upVar, 'var, 'svar, 'metaVar) kItemWithRewrite<br>\n              = KItemTerm \"('upVar, 'var, 'svar, 'metaVar) kItem\"<br>\n              | KItemRewrite \"('upVar, 'var, 'svar, 'metaVar) kItem\"<br>\n                             \"('upVar, 'var, 'svar, 'metaVar) kItem\"<br>\nand ('upVar, 'var, 'svar, 'metaVar) kList =<br>\n                                    KListCon \"('upVar, 'var, 'svar, <br>\n'metaVar) kListWithRewrite\"<br>\n                                             \"('upVar, 'var, 'svar, <br>\n'metaVar) kListWithRewrite\"<br>\n                                  | UnitKList<br>\n                                  | KListItem  \"('upVar, 'var, 'svar, <br>\n'metaVar) bigKWithBag\"<br>\n                                  | IdKList \"'metaVar\"<br>\nand ('upVar, 'var, 'svar, 'metaVar) kListWithRewrite<br>\n              = KListTerm \"('upVar, 'var, 'svar, 'metaVar) kList\"<br>\n              | KListRewrite \"('upVar, 'var, 'svar, 'metaVar) kList\"<br>\n                             \"('upVar, 'var, 'svar, 'metaVar) kList\"<br>\nand ('upVar, 'var, 'svar, 'metaVar) bigK = TheK \"('upVar, 'var, 'svar, <br>\n'metaVar) kWithRewrite\"<br>\n                                 | TheList \"('upVar, 'var, 'svar, <br>\n'metaVar) theListRewrite\"<br>\n                                 | TheSet \"('upVar, 'var, 'svar, <br>\n'metaVar) theSetRewrite\"<br>\n                                 | TheMap \"('upVar, 'var, 'svar, <br>\n'metaVar) theMapRewrite\"<br>\nand ('upVar, 'var, 'svar, 'metaVar) bigKWithBag = TheBigK \"('upVar, <br>\n'var, 'svar, 'metaVar) bigK\"<br>\n                              | TheBigBag \"('upVar, 'var, 'svar, <br>\n'metaVar) bagWithRewrite\"<br>\n                              | TheLabel \"('upVar, 'var, 'svar, <br>\n'metaVar) kLabelWithRewrite\"<br>\nand ('upVar, 'var, 'svar, 'metaVar) k<br>\n          = Tilda \"('upVar, 'var, 'svar, 'metaVar) kWithRewrite\"<br>\n                  \"('upVar, 'var, 'svar, 'metaVar) kWithRewrite\"<br>\n            | UnitK | IdK 'metaVar | SingleK \"('upVar, 'var, 'svar, <br>\n'metaVar) kItemWithRewrite\"<br>\n            | KFun \"('upVar, 'var, 'svar, 'metaVar) kLabel\"<br>\n                   \"('upVar, 'var, 'svar, 'metaVar) kListWithRewrite\"<br>\nand ('upVar, 'var, 'svar, 'metaVar) kWithRewrite = KTerm \"('upVar, 'var, <br>\n'svar, 'metaVar) k\"<br>\n            | KRewrite \"('upVar, 'var, 'svar, 'metaVar) k\" \"('upVar, <br>\n'var, 'svar, 'metaVar) k\"</p>\n<p>and ('upVar, 'var, 'svar, 'metaVar) theList = ListCon \"('upVar, 'var, <br>\n'svar, 'metaVar) theListRewrite\"<br>\n                                       \"('upVar, 'var, 'svar, 'metaVar) <br>\ntheListRewrite\"<br>\n                                     | UnitList<br>\n                                     | IdList 'metaVar<br>\n                                     | ListItem \"('upVar, 'var, 'svar, <br>\n'metaVar) kWithRewrite\"<br>\n                                     | ListFun \"('upVar, 'var, 'svar, <br>\n'metaVar) kLabel\"<br>\n                                               \"('upVar, 'var, 'svar, <br>\n'metaVar) kListWithRewrite\"<br>\nand ('upVar, 'var, 'svar, 'metaVar) theListRewrite =<br>\n        TheListTerm \"('upVar, 'var, 'svar, 'metaVar) theList\"<br>\n      | TheListRewrite \"('upVar, 'var, 'svar, 'metaVar) theList\"<br>\n                       \"('upVar, 'var, 'svar, 'metaVar) theList\"<br>\nand ('upVar, 'var, 'svar, 'metaVar) theSet = SetCon \"('upVar, 'var, <br>\n'svar, 'metaVar) theSetRewrite\"<br>\n                                      \"('upVar, 'var, 'svar, 'metaVar) <br>\ntheSetRewrite\"<br>\n                                     | UnitSet<br>\n                                     | IdSet 'metaVar<br>\n                                     | SetItem \"('upVar, 'var, 'svar, <br>\n'metaVar) kWithRewrite\"<br>\n                                     | SetFun \"('upVar, 'var, 'svar, <br>\n'metaVar) kLabel\"<br>\n                                              \"('upVar, 'var, 'svar, <br>\n'metaVar) kListWithRewrite\"<br>\nand ('upVar, 'var, 'svar, 'metaVar) theSetRewrite =<br>\n        TheSetTerm \"('upVar, 'var, 'svar, 'metaVar) theSet\"<br>\n      | TheSetRewrite \"('upVar, 'var, 'svar, 'metaVar) theSet\"<br>\n                      \"('upVar, 'var, 'svar, 'metaVar) theSet\"<br>\nand ('upVar, 'var, 'svar, 'metaVar) theMap<br>\n   = MapCon \"('upVar, 'var, 'svar, 'metaVar) theMapRewrite\"<br>\n            \"('upVar, 'var, 'svar, 'metaVar) theMapRewrite\"<br>\n          | UnitMap<br>\n          | IdMap 'metaVar<br>\n          | MapItem \"('upVar, 'var, 'svar, 'metaVar) kWithRewrite\"<br>\n                    \"('upVar, 'var, 'svar, 'metaVar) kWithRewrite\"<br>\n          | MapFun \"('upVar, 'var, 'svar, 'metaVar) kLabel\"<br>\n                   \"('upVar, 'var, 'svar, 'metaVar) kListWithRewrite\"<br>\nand ('upVar, 'var, 'svar, 'metaVar) theMapRewrite =<br>\n        TheMapTerm \"('upVar, 'var, 'svar, 'metaVar) theMap\"<br>\n      | TheMapRewrite \"('upVar, 'var, 'svar, 'metaVar) theMap\" \"('upVar, <br>\n'var, 'svar, 'metaVar) theMap\"<br>\nand ('upVar, 'var, 'svar, 'metaVar) bag<br>\n             = BagCon \"('upVar, 'var, 'svar, 'metaVar) bagWithRewrite\"<br>\n                      \"('upVar, 'var, 'svar, 'metaVar) bagWithRewrite\"<br>\n              | UnitBag<br>\n              | IdBag 'metaVar<br>\n              | Xml 'var \"feature list\" \"('upVar, 'var, 'svar, 'metaVar) <br>\nbagWithRewrite\"<br>\n              | SingleCell 'var \"feature list\" \"('upVar, 'var, 'svar, <br>\n'metaVar) bigK\"<br>\nand ('upVar, 'var, 'svar, 'metaVar) bagWithRewrite =<br>\n        BagTerm \"('upVar, 'var, 'svar, 'metaVar) bag\"<br>\n      | BagRewrite \"('upVar, 'var, 'svar, 'metaVar) bag\" \"('upVar, 'var, <br>\n'svar, 'metaVar) bag\"</p>\n<p>It takes something like three to four hours on my student's computer <br>\n(Windows machine with the same amount of memory), but it does complete.  <br>\nIs there some way to tweak Isabelle or this definition to make it more <br>\nlikely to go through?</p>\n<p>---Elsa</p>",
        "id": 294709221,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661181606
    },
    {
        "content": "<p>From: Andrei Popescu &lt;<a href=\"mailto:A.Popescu@mdx.ac.uk\">A.Popescu@mdx.ac.uk</a>&gt;<br>\nDear Elsa and Liyi,</p>\n<p>Such large specifications of dependent types are unfortunately cases where our new datatype package scores less well than the previous one.</p>\n<p>(We do score better in the presence of nesting, though.) See also the thread</p>\n<p>\"A large mutually recursive datatype\"</p>\n<p>from <a href=\"https://lists.cam.ac.uk/mailman/htdig/cl-isabelle-users/2016-March/thread.html\">https://lists.cam.ac.uk/mailman/htdig/cl-isabelle-users/2016-March/thread.html</a></p>\n<p>Replacing as much as possible from \"mutual\" to \"nested\" should help a lot. In your case, there is a very</p>\n<p>natural opportunity for nesting, which would remove duplication and improve modularity. Namely, isolating</p>\n<p>your heavily used \"withRewrite\" monad as the following generic datatype:</p>\n<p>datatype 'a withRewrite = KTerm 'a | KRewrite 'a 'a</p>\n<p>Then your specification becomes much smaller, and is processed on my computer in about three minutes:</p>\n<p>typedecl 'var theConstant<br>\ntypedecl feature</p>\n<p>datatype ('upVar, 'var, 'svar, 'metaVar) kLabel<br>\n     = KLabel 'svar<br>\n     | KLabelFun \"('upVar, 'var, 'svar, 'metaVar) kLabel\"<br>\n                 \"('upVar, 'var, 'svar, 'metaVar) kList withRewrite\"<br>\n     | IdKLabel 'metaVar<br>\nand ('upVar, 'var, 'svar, 'metaVar) kItem =<br>\n       KItem \"('upVar, 'var, 'svar, 'metaVar) kLabel withRewrite\"<br>\n             \"('upVar, 'var, 'svar, 'metaVar) kList withRewrite\"<br>\n                                              'upVar<br>\n      | Constant \"'var theConstant\" 'upVar<br>\n      | IdKItem \"'metaVar\" 'upVar<br>\n      |  HOLE 'upVar<br>\nand ('upVar, 'var, 'svar, 'metaVar) kList =<br>\n        KListCon \"('upVar, 'var, 'svar, 'metaVar) kList withRewrite\"<br>\n                 \"('upVar, 'var, 'svar, 'metaVar) kList withRewrite\"<br>\n      | UnitKList<br>\n      | KListItem  \"('upVar, 'var, 'svar, 'metaVar) bigKWithBag\"<br>\n      | IdKList \"'metaVar\"<br>\nand ('upVar, 'var, 'svar, 'metaVar) bigK =<br>\n        TheK \"('upVar, 'var, 'svar, 'metaVar) k withRewrite\"<br>\n      | TheList \"('upVar, 'var, 'svar, 'metaVar) theList withRewrite\"<br>\n      | TheSet \"('upVar, 'var, 'svar, 'metaVar) theSet withRewrite\"<br>\n      | TheMap \"('upVar, 'var, 'svar, 'metaVar) theMap withRewrite\"<br>\nand ('upVar, 'var, 'svar, 'metaVar) bigKWithBag =<br>\n        TheBigK \"('upVar, 'var, 'svar, 'metaVar) bigK\"<br>\n      | TheBigBag \"('upVar, 'var, 'svar, 'metaVar) bag withRewrite\"<br>\n      | TheLabel \"('upVar, 'var, 'svar, 'metaVar) kLabel withRewrite\"<br>\nand ('upVar, 'var, 'svar, 'metaVar) k =<br>\n        Tilda \"('upVar, 'var, 'svar, 'metaVar) k withRewrite\"<br>\n              \"('upVar, 'var, 'svar, 'metaVar) k withRewrite\"<br>\n       | UnitK | IdK 'metaVar<br>\n       | SingleK \"('upVar, 'var, 'svar, 'metaVar) kItem withRewrite\"<br>\n       | KFun \"('upVar, 'var, 'svar, 'metaVar) kLabel\"<br>\n              \"('upVar, 'var, 'svar, 'metaVar) kList withRewrite\"<br>\nand ('upVar, 'var, 'svar, 'metaVar) theSet =<br>\n         SetCon \"('upVar, 'var, 'svar, 'metaVar) theSet withRewrite\"<br>\n                \"('upVar, 'var, 'svar, 'metaVar) theSet withRewrite\"<br>\n       | UnitSet<br>\n       | IdSet 'metaVar<br>\n       | SetItem \"('upVar, 'var, 'svar, 'metaVar) k withRewrite\"<br>\n       | SetFun \"('upVar, 'var, 'svar, 'metaVar) kLabel\"<br>\n                \"('upVar, 'var, 'svar, 'metaVar) kList withRewrite\"<br>\nand ('upVar, 'var, 'svar, 'metaVar) theList =<br>\n       ListCon \"('upVar, 'var, 'svar, 'metaVar) theList withRewrite\"<br>\n               \"('upVar, 'var, 'svar, 'metaVar) theList withRewrite\"<br>\n           | UnitList<br>\n           | IdList 'metaVar<br>\n           | ListItem \"('upVar, 'var, 'svar, 'metaVar) k withRewrite\"<br>\n           | ListFun \"('upVar, 'var, 'svar, 'metaVar) kLabel\"<br>\n                     \"('upVar, 'var, 'svar, 'metaVar) kList withRewrite\"<br>\nand ('upVar, 'var, 'svar, 'metaVar) theMap =<br>\n       MapCon \"('upVar, 'var, 'svar, 'metaVar) theMap withRewrite\"<br>\n              \"('upVar, 'var, 'svar, 'metaVar) theMap withRewrite\"<br>\n     | UnitMap<br>\n     | IdMap 'metaVar<br>\n     | MapItem \"('upVar, 'var, 'svar, 'metaVar) k withRewrite\"<br>\n               \"('upVar, 'var, 'svar, 'metaVar) k withRewrite\"<br>\n     | MapFun \"('upVar, 'var, 'svar, 'metaVar) kLabel\"<br>\n              \"('upVar, 'var, 'svar, 'metaVar) kList withRewrite\"<br>\nand ('upVar, 'var, 'svar, 'metaVar) bag =<br>\n       BagCon \"('upVar, 'var, 'svar, 'metaVar) bag withRewrite\"<br>\n              \"('upVar, 'var, 'svar, 'metaVar) bag withRewrite\"<br>\n     | UnitBag<br>\n     | IdBag 'metaVar<br>\n     | Xml 'var \"feature list\" \"('upVar, 'var, 'svar, 'metaVar) bag withRewrite\"<br>\n     | SingleCell 'var \"feature list\" \"('upVar, 'var, 'svar, 'metaVar) bigK\"</p>\n<p>Other natural opportunities for nesting exist, such as separating the various collection monads.<br>\nBut hopefully the above is already acceptable.</p>\n<p>All the best,</p>\n<p>Andrei</p>",
        "id": 294709435,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661181671
    },
    {
        "content": "<p>From: \"Elsa L. Gunter\" &lt;<a href=\"mailto:egunter@illinois.edu\">egunter@illinois.edu</a>&gt;<br>\nDear Andrei,</p>\n<p>Thank you very much.  I guess I haven't kept up as well as I should <br>\nand assumed nesting would make the last one where you put it all <br>\ntogether that much worse.  You are absolutely right the introducing <br>\nnesting is quite ossible and could even make the whole grammar more <br>\nreadable.  Thank you and we'll give it a try.</p>\n<p>---Elsa</p>",
        "id": 294709661,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661181738
    },
    {
        "content": "<p>From: Andrei Popescu &lt;<a href=\"mailto:A.Popescu@mdx.ac.uk\">A.Popescu@mdx.ac.uk</a>&gt;</p>\n<blockquote>\n<blockquote>\n<p>large specifications of dependent types</p>\n</blockquote>\n</blockquote>\n<p>I meant to write</p>\n<blockquote>\n<blockquote>\n<p>large specifications of mutually dependent types</p>\n</blockquote>\n</blockquote>\n<p>Andrei</p>\n<hr>\n<p>From: <a href=\"mailto:cl-isabelle-users-bounces@lists.cam.ac.uk\">cl-isabelle-users-bounces@lists.cam.ac.uk</a> &lt;<a href=\"mailto:cl-isabelle-users-bounces@lists.cam.ac.uk\">cl-isabelle-users-bounces@lists.cam.ac.uk</a>&gt; on behalf of Andrei Popescu &lt;<a href=\"mailto:a.popescu@mdx.ac.uk\">a.popescu@mdx.ac.uk</a>&gt;<br>\nSent: 01 April 2017 14:59<br>\nTo: Elsa L. Gunter; <a href=\"mailto:cl-isabelle-users@lists.cam.ac.uk\">cl-isabelle-users@lists.cam.ac.uk</a>; Liyi Li<br>\nCc: <a href=\"mailto:j.c.blanchette@vu.nl\">j.c.blanchette@vu.nl</a>; Dmitriy Traytel<br>\nSubject: Re: [isabelle] Failing to handle a fairly large dataype</p>\n<p>Dear Elsa and Liyi,</p>\n<p>Such large specifications of dependent types are unfortunately cases where our new datatype package scores less well than the previous one.</p>\n<p>(We do score better in the presence of nesting, though.) See also the thread</p>\n<p>\"A large mutually recursive datatype\"</p>\n<p>from <a href=\"https://lists.cam.ac.uk/mailman/htdig/cl-isabelle-users/2016-March/thread.html\">https://lists.cam.ac.uk/mailman/htdig/cl-isabelle-users/2016-March/thread.html</a></p>\n<p>Replacing as much as possible from \"mutual\" to \"nested\" should help a lot. In your case, there is a very</p>\n<p>natural opportunity for nesting, which would remove duplication and improve modularity. Namely, isolating</p>\n<p>your heavily used \"withRewrite\" monad as the following generic datatype:</p>\n<p>datatype 'a withRewrite = KTerm 'a | KRewrite 'a 'a</p>\n<p>Then your specification becomes much smaller, and is processed on my computer in about three minutes:</p>\n<p>typedecl 'var theConstant<br>\ntypedecl feature</p>\n<p>datatype ('upVar, 'var, 'svar, 'metaVar) kLabel<br>\n     = KLabel 'svar<br>\n     | KLabelFun \"('upVar, 'var, 'svar, 'metaVar) kLabel\"<br>\n                 \"('upVar, 'var, 'svar, 'metaVar) kList withRewrite\"<br>\n     | IdKLabel 'metaVar<br>\nand ('upVar, 'var, 'svar, 'metaVar) kItem =<br>\n       KItem \"('upVar, 'var, 'svar, 'metaVar) kLabel withRewrite\"<br>\n             \"('upVar, 'var, 'svar, 'metaVar) kList withRewrite\"<br>\n                                              'upVar<br>\n      | Constant \"'var theConstant\" 'upVar<br>\n      | IdKItem \"'metaVar\" 'upVar<br>\n      |  HOLE 'upVar<br>\nand ('upVar, 'var, 'svar, 'metaVar) kList =<br>\n        KListCon \"('upVar, 'var, 'svar, 'metaVar) kList withRewrite\"<br>\n                 \"('upVar, 'var, 'svar, 'metaVar) kList withRewrite\"<br>\n      | UnitKList<br>\n      | KListItem  \"('upVar, 'var, 'svar, 'metaVar) bigKWithBag\"<br>\n      | IdKList \"'metaVar\"<br>\nand ('upVar, 'var, 'svar, 'metaVar) bigK =<br>\n        TheK \"('upVar, 'var, 'svar, 'metaVar) k withRewrite\"<br>\n      | TheList \"('upVar, 'var, 'svar, 'metaVar) theList withRewrite\"<br>\n      | TheSet \"('upVar, 'var, 'svar, 'metaVar) theSet withRewrite\"<br>\n      | TheMap \"('upVar, 'var, 'svar, 'metaVar) theMap withRewrite\"<br>\nand ('upVar, 'var, 'svar, 'metaVar) bigKWithBag =<br>\n        TheBigK \"('upVar, 'var, 'svar, 'metaVar) bigK\"<br>\n      | TheBigBag \"('upVar, 'var, 'svar, 'metaVar) bag withRewrite\"<br>\n      | TheLabel \"('upVar, 'var, 'svar, 'metaVar) kLabel withRewrite\"<br>\nand ('upVar, 'var, 'svar, 'metaVar) k =<br>\n        Tilda \"('upVar, 'var, 'svar, 'metaVar) k withRewrite\"<br>\n              \"('upVar, 'var, 'svar, 'metaVar) k withRewrite\"<br>\n       | UnitK | IdK 'metaVar<br>\n       | SingleK \"('upVar, 'var, 'svar, 'metaVar) kItem withRewrite\"<br>\n       | KFun \"('upVar, 'var, 'svar, 'metaVar) kLabel\"<br>\n              \"('upVar, 'var, 'svar, 'metaVar) kList withRewrite\"<br>\nand ('upVar, 'var, 'svar, 'metaVar) theSet =<br>\n         SetCon \"('upVar, 'var, 'svar, 'metaVar) theSet withRewrite\"<br>\n                \"('upVar, 'var, 'svar, 'metaVar) theSet withRewrite\"<br>\n       | UnitSet<br>\n       | IdSet 'metaVar<br>\n       | SetItem \"('upVar, 'var, 'svar, 'metaVar) k withRewrite\"<br>\n       | SetFun \"('upVar, 'var, 'svar, 'metaVar) kLabel\"<br>\n                \"('upVar, 'var, 'svar, 'metaVar) kList withRewrite\"<br>\nand ('upVar, 'var, 'svar, 'metaVar) theList =<br>\n       ListCon \"('upVar, 'var, 'svar, 'metaVar) theList withRewrite\"<br>\n               \"('upVar, 'var, 'svar, 'metaVar) theList withRewrite\"<br>\n           | UnitList<br>\n           | IdList 'metaVar<br>\n           | ListItem \"('upVar, 'var, 'svar, 'metaVar) k withRewrite\"<br>\n           | ListFun \"('upVar, 'var, 'svar, 'metaVar) kLabel\"<br>\n                     \"('upVar, 'var, 'svar, 'metaVar) kList withRewrite\"<br>\nand ('upVar, 'var, 'svar, 'metaVar) theMap =<br>\n       MapCon \"('upVar, 'var, 'svar, 'metaVar) theMap withRewrite\"<br>\n              \"('upVar, 'var, 'svar, 'metaVar) theMap withRewrite\"<br>\n     | UnitMap<br>\n     | IdMap 'metaVar<br>\n     | MapItem \"('upVar, 'var, 'svar, 'metaVar) k withRewrite\"<br>\n               \"('upVar, 'var, 'svar, 'metaVar) k withRewrite\"<br>\n     | MapFun \"('upVar, 'var, 'svar, 'metaVar) kLabel\"<br>\n              \"('upVar, 'var, 'svar, 'metaVar) kList withRewrite\"<br>\nand ('upVar, 'var, 'svar, 'metaVar) bag =<br>\n       BagCon \"('upVar, 'var, 'svar, 'metaVar) bag withRewrite\"<br>\n              \"('upVar, 'var, 'svar, 'metaVar) bag withRewrite\"<br>\n     | UnitBag<br>\n     | IdBag 'metaVar<br>\n     | Xml 'var \"feature list\" \"('upVar, 'var, 'svar, 'metaVar) bag withRewrite\"<br>\n     | SingleCell 'var \"feature list\" \"('upVar, 'var, 'svar, 'metaVar) bigK\"</p>\n<p>Other natural opportunities for nesting exist, such as separating the various collection monads.<br>\nBut hopefully the above is already acceptable.</p>\n<p>All the best,</p>\n<p>Andrei</p>\n<hr>\n<p>From: Elsa L. Gunter &lt;<a href=\"mailto:egunter@illinois.edu\">egunter@illinois.edu</a>&gt;<br>\nSent: 01 April 2017 02:52<br>\nTo: <a href=\"mailto:cl-isabelle-users@lists.cam.ac.uk\">cl-isabelle-users@lists.cam.ac.uk</a>; Liyi Li<br>\nCc: Andrei Popescu<br>\nSubject: Failing to handle a fairly large dataype</p>\n<p>Dear Isabelle Community,</p>\n<p>I and a graduate student of mine, Liyi Li, have been working on formalizing the K specification language of Grigore Rosu in Isabelle.  One of the very first datatypes we have, giving the bulk of the syntax definition for K chokes Isabelle on my machine (MacBook Pro 2.8 GHz Core i7 with 16 GB DDR3 memory).   The error message I get is</p>\n<p>Welcome to Isabelle/HOL (Isabelle2016-1: December 2016)<br>\nRun out of store - interrupting threads</p>\n<p>Run out of store - interrupting threads</p>\n<p>Failed to recover - exiting</p>\n<p>message_output terminated<br>\nstandard_error terminated<br>\nstandard_output terminated<br>\nprocess terminated<br>\ncommand_input terminated<br>\nprocess_manager terminated<br>\nReturn code: 1</p>\n<p>The code that is causing the choke is:</p>\n<p>datatype ('upVar, 'var, 'svar, 'metaVar) kLabel<br>\n     = KLabel 'svar<br>\n     | KLabelFun \"('upVar, 'var, 'svar, 'metaVar) kLabel\"<br>\n                 \"('upVar, 'var, 'svar, 'metaVar) kListWithRewrite\"<br>\n     | IdKLabel 'metaVar<br>\nand ('upVar, 'var, 'svar, 'metaVar) kLabelWithRewrite<br>\n              = KLabelTerm \"('upVar, 'var, 'svar, 'metaVar) kLabel\"<br>\n              | KLabelRewrite \"('upVar, 'var, 'svar, 'metaVar) kLabel\"<br>\n                              \"('upVar, 'var, 'svar, 'metaVar) kLabel\"<br>\nand ('upVar, 'var, 'svar, 'metaVar) kItem =<br>\n                                        KItem \"('upVar, 'var, 'svar, 'metaVar) kLabelWithRewrite\"<br>\n                                              \"('upVar, 'var, 'svar, 'metaVar) kListWithRewrite\"<br>\n                                              'upVar<br>\n                                      | Constant \"'var theConstant\" 'upVar<br>\n                                      | IdKItem \"'metaVar\" 'upVar<br>\n                                      |  HOLE 'upVar<br>\nand ('upVar, 'var, 'svar, 'metaVar) kItemWithRewrite<br>\n             = KItemTerm \"('upVar, 'var, 'svar, 'metaVar) kItem\"<br>\n             | KItemRewrite \"('upVar, 'var, 'svar, 'metaVar) kItem\"<br>\n                            \"('upVar, 'var, 'svar, 'metaVar) kItem\"<br>\nand ('upVar, 'var, 'svar, 'metaVar) kList =<br>\n                                   KListCon \"('upVar, 'var, 'svar, 'metaVar) kListWithRewrite\"<br>\n                                            \"('upVar, 'var, 'svar, 'metaVar) kListWithRewrite\"<br>\n                                 | UnitKList<br>\n                                 | KListItem  \"('upVar, 'var, 'svar, 'metaVar) bigKWithBag\"<br>\n                                 | IdKList \"'metaVar\"<br>\nand ('upVar, 'var, 'svar, 'metaVar) kListWithRewrite<br>\n             = KListTerm \"('upVar, 'var, 'svar, 'metaVar) kList\"<br>\n             | KListRewrite \"('upVar, 'var, 'svar, 'metaVar) kList\"<br>\n                            \"('upVar, 'var, 'svar, 'metaVar) kList\"<br>\nand ('upVar, 'var, 'svar, 'metaVar) bigK = TheK \"('upVar, 'var, 'svar, 'metaVar) kWithRewrite\"<br>\n                                | TheList \"('upVar, 'var, 'svar, 'metaVar) theListRewrite\"<br>\n                                | TheSet \"('upVar, 'var, 'svar, 'metaVar) theSetRewrite\"<br>\n                                | TheMap \"('upVar, 'var, 'svar, 'metaVar) theMapRewrite\"<br>\nand ('upVar, 'var, 'svar, 'metaVar) bigKWithBag = TheBigK \"('upVar, 'var, 'svar, 'metaVar) bigK\"<br>\n                             | TheBigBag \"('upVar, 'var, 'svar, 'metaVar) bagWithRewrite\"<br>\n                             | TheLabel \"('upVar, 'var, 'svar, 'metaVar) kLabelWithRewrite\"<br>\nand ('upVar, 'var, 'svar, 'metaVar) k<br>\n         = Tilda \"('upVar, 'var, 'svar, 'metaVar) kWithRewrite\"<br>\n                 \"('upVar, 'var, 'svar, 'metaVar) kWithRewrite\"<br>\n           | UnitK | IdK 'metaVar | SingleK \"('upVar, 'var, 'svar, 'metaVar) kItemWithRewrite\"<br>\n           | KFun \"('upVar, 'var, 'svar, 'metaVar) kLabel\"<br>\n                  \"('upVar, 'var, 'svar, 'metaVar) kListWithRewrite\"<br>\nand ('upVar, 'var, 'svar, 'metaVar) kWithRewrite = KTerm \"('upVar, 'var, 'svar, 'metaVar) k\"<br>\n           | KRewrite \"('upVar, 'var, 'svar, 'metaVar) k\" \"('upVar, 'var, 'svar, 'metaVar) k\"</p>\n<p>and ('upVar, 'var, 'svar, 'metaVar) theList = ListCon \"('upVar, 'var, 'svar, 'metaVar) theListRewrite\"<br>\n                                      \"('upVar, 'var, 'svar, 'metaVar) theListRewrite\"<br>\n                                    | UnitList<br>\n                                    | IdList 'metaVar<br>\n                                    | ListItem \"('upVar, 'var, 'svar, 'metaVar) kWithRewrite\"<br>\n                                    | ListFun \"('upVar, 'var, 'svar, 'metaVar) kLabel\"<br>\n                                              \"('upVar, 'var, 'svar, 'metaVar) kListWithRewrite\"<br>\nand ('upVar, 'var, 'svar, 'metaVar) theListRewrite =<br>\n       TheListTerm \"('upVar, 'var, 'svar, 'metaVar) theList\"<br>\n     | TheListRewrite \"('upVar, 'var, 'svar, 'metaVar) theList\"<br>\n                      \"('upVar, 'var, 'svar, 'metaVar) theList\"<br>\nand ('upVar, 'var, 'svar, 'metaVar) theSet = SetCon \"('upVar, '<br>\n[message truncated]</p>",
        "id": 294709852,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661181807
    },
    {
        "content": "<p>From: Andrei Popescu &lt;<a href=\"mailto:A.Popescu@mdx.ac.uk\">A.Popescu@mdx.ac.uk</a>&gt;<br>\nDear Elsa,</p>\n<blockquote>\n<blockquote>\n<p>Thank you very much.  I guess I haven't kept up as well as I should and assumed nesting would make the last one where you put it all together that much worse.</p>\n</blockquote>\n</blockquote>\n<p>Since the new package no longer transforms \"nested\" into \"mutual,\" there is no \"unfolding hazard\" with nested types.</p>\n<blockquote>\n<blockquote>\n<p>You are absolutely right the introducing nesting is quite possible and could even make the whole grammar more readable.</p>\n</blockquote>\n</blockquote>\n<p>I fully agree. I believe this will also encourage more modular proofs.</p>\n<blockquote>\n<blockquote>\n<p>Thank you and we'll give it a try.</p>\n</blockquote>\n</blockquote>\n<p>Best of luck with this ambitious development! What meta-properties of the K framework do you plan to prove?</p>\n<p>Andrei</p>",
        "id": 294710063,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661181873
    }
]