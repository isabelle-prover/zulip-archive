[
    {
        "content": "<p>From: \"W. Douglas Maurer\" &lt;<a href=\"mailto:maurer@gwu.edu\">maurer@gwu.edu</a>&gt;<br>\nOops -- typo at the end of the requested feature, and it also needs <br>\nto start with m &lt;= n+1, not m &lt; n+1. So it should be (and the proof <br>\ngoes through, this way):<br>\nlemma aux: \"m &lt;= n+1 ==&gt; setsum f {m..n+1} = setsum f {m..n} + f (n+1 :: int)\"<br>\n   by (simp add: add.commute atLeastAtMostPlus1_int_conv)<br>\nThe case m = n+1 is necessary in order to interact properly with the <br>\nbase case, which is \"setsum f {n+(1::int)..n} = 0\" by simp . Setting <br>\nm = n+1, we get:<br>\nsetsum f {n+1..n+1} [that is, setsum f {m..m}]<br>\n= setsum f {n+1..n} [that is, 0, by the base case]</p>\n<ul>\n<li>f(n+1 :: int) [that is, f(m::int)]<br>\nIn other words, setsum f {m..m} = f(m::int), which is as it should <br>\nbe. Without the case m = n+1, you'd need a separate proof of that <br>\ncase. -Douglas</li>\n</ul>",
        "id": 294637545,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661160779
    },
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\nI considered this suggestion carefully but decided against it. Adding something <br>\nthat can be derived easily needs a strong argument, otherwise the library <br>\nexplodes. Here a single lemma does not do the job anyway: on type nat, +1 <br>\nbecomes Suc and floats to the top, at least in sums. This is not the case for <br>\ntype int, where \"n+1\" is not a canonical form. You will have to put that lemma <br>\ninto a basis theory for your students.</p>\n<p>Tobias<br>\n<a href=\"/user_uploads/14278/Vr6oBYkB1y19x2-qppSIc-ln/smime.p7s\">smime.p7s</a></p>",
        "id": 294643342,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661163029
    }
]