[
    {
        "content": "<p>From: Joachim Breitner &lt;<a href=\"mailto:breitner@kit.edu\">breitner@kit.edu</a>&gt;<br>\nDear developers,</p>\n<p>I’d like to share some ideas how working with Isabelle could be a bit<br>\nmore efficient, at least for me and my workflow.</p>\n<p>All I am describing is the 2012 release, used via jEdit.</p>\n<p>Generally, I could imagine the output window being a bit more<br>\ninformative, in particular with error messages.</p>\n<p>For example, a failed \"by method\" currently just prints “Failed to<br>\nfinish proof.” To fix this, I now have to change the \"by\" to \"apply\",<br>\nlook at the result, fix it, and change it back. Could it not print<br>\n“Failed to finish proof. Remaining goals: ....”?</p>\n<p>A command that does not provide any output at all is “lemma” (and also<br>\n“lemmas”). Sometimes, I feel the need to check how Isabelle actually<br>\nsees the lemma, e.g. to see what types she has inferred, or to check<br>\nwhether I am really done or if there is still a [!] behind the lemma¹.<br>\nCurrently, I have to use “thm name” after the lemma for that (and give<br>\nthe lemma a name if it does not have one yet). Would it be possible to<br>\nhave the lemma command already print that information?</p>\n<p>Another error that could be make more helpful is “Unknown fact \"...\"”.<br>\nOften I don’t remember the name of a lemma exactly – was it set_finite<br>\nor finite_set? I then have to fire up \"find_theorems name:..\", which is<br>\nquite a bit of typing.<br>\nGHC recently has started to give spelling corrections (the 10 best fits<br>\nbased on edit distance, IIRC) for every kind of unknown-something error.<br>\nIf Isabelle could do the same, this would be great. I’d imagine that in<br>\nthe context of Isabelle lemmas the edit distance should give special<br>\ntreatment to reordering the parts of the string that are separated by<br>\n‘_’, as it is often the order of the components of the name that I fail<br>\nto remember, and count that as one step.<br>\nI guess Isabelle usually has many more lemmas in scope than GHC has<br>\nfunctions and this might be a bit slow. But the output does not have to<br>\nbe generated at once and if the error message is printed before the list<br>\nis calculated, this should not harm anyone.²</p>\n<p>Last on my list for today is a more interactive variant of print_cases.<br>\nWhen I currently write<br>\n        lemma \"n + 1 = 1 + (n::nat)\"<br>\n        proof(induct n)<br>\nI have<br>\n        proof (state): step 1</p>\n<p>goal (2 subgoals):</p>\n<p>1. 0 + 1 = 1 + 0<br>\n         2. ⋀n. n + 1 = 1 + n ⟹ Suc n + 1 = 1 + Suc n <br>\nand with <br>\n        print_cases<br>\nit prints<br>\n        cases:<br>\n          0:<br>\n            let \"?case\" = \"0 + 1 = 1 + 0\"<br>\n          Suc:<br>\n            fix n_<br>\n            let \"?case\" = \"Suc n_ + 1 = 1 + Suc n_\"<br>\n            assume Suc.hyps: \"n_ + 1 = 1 + n_\" and Suc.prems: </p>\n<p>What I am missing is a combination of both that is ready to be used as<br>\nthe structure of an Isar proof, e.g. either completely explicit:</p>\n<p>show \"0 + 1 = 1 + 0\"<br>\n            sorry<br>\n        next<br>\n          fix n<br>\n          assume \"n + 1 = 1 + (n::nat)\"<br>\n          show \"Suc n + 1 = 1 + Suc n\"<br>\n            sorry<br>\n        qed</p>\n<p>or, depending on personal preference and number and complexity of the<br>\nhypotheses, using the provided case names (and using \"case goal1...\" if<br>\nthere are no case names):</p>\n<p>case 0<br>\n          show ?case<br>\n            sorry<br>\n        next<br>\n          case (Suc n)<br>\n          show ?case<br>\n            sorry<br>\n        qed</p>\n<p>From there I guess it would be a small step to allow the user to insert<br>\nthe output of this command (say print_isar_structure) into the proof<br>\ndocument with one click, similar to how sledgehammer works.</p>\n<p>That’s it for today. Thanks for your work,<br>\nJoachim</p>\n<p>¹ And just to not only list things that I am missing: I find this<br>\nmarking of lemmas whose prove contains a sorry very useful feedback. It<br>\nit were not done, I’d have to ask for it :-)</p>\n<p>² Actually, it seems that implementing this feature would be a very<br>\nlocal task that is suitable for first-time Isabelle contributors. If you<br>\nsay that such a feature would be accepted, I could give it a shot.<br>\n<a href=\"/user_uploads/14278/BrvGtEmQYbV4iXN0DpGZ50_c/signature.asc\">signature.asc</a></p>",
        "id": 294226504,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660900247
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nThat is not a function of the output window, but of the prover to report <br>\nthings in a certain way.  During this summer, and now in fall moving <br>\ntowards the coming winter release, I've made many refinements in both <br>\nareas, and hopefully manage to add 2-3 more rounds of refinement before <br>\nthe next release.  The general tendencies are like this:</p>\n<p>(1) Output is becoming less and less important (it is an old TTY thing).<br>\n     Instead the information is directly attached to the source.  So the<br>\n     messages are right there where things happen, while remaining<br>\n     accessible in output for nostalgic reasons (for people who want to<br>\n     make long moves with the mouse in the old way).</p>\n<p>(2) Error feedback of Isar commands involving search/enumertion of<br>\n     possibilities: this is an ancient issue from &gt; 10 years ago, which I<br>\n     have re-opened some weeks ago.  So in the next release, you will see<br>\n     proper errors for \"by method\", and the need to use 'apply' to imitate<br>\n     that will be no longer there.</p>\n<p>Makarius</p>",
        "id": 294226634,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660900314
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nThis is in a transitional state, between old TTY things that no longer <br>\nwork, and proper global status summaries in the Prover IDE.</p>\n<p>Conceptually, the internal derivation object cannot be displayed to the <br>\nuser while editing and asynchronous/parallel checking continues.  I've no <br>\nparticular plans for the coming release here -- too many other things need <br>\nto be consolidated first.</p>\n<p>Makarius</p>",
        "id": 294226642,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660900320
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nSounds like the GHC guys have 10 times more resources to spend.  There are <br>\nmany ideas about formal entity lookup in the pipeline, including <br>\ncontext-sensitive completion, but nothing like the above so far.</p>\n<p>Ask again after some more years of Isabelle/jEdit Prover IDE development.</p>\n<p>Makarius</p>",
        "id": 294226701,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660900331
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\n'print_cases' is indeed a dinosaur from the TTY age.  Producing proof <br>\noutlines for induction proofs is the standard application for smart <br>\ntemplating, I have it on my list for a long time already.  This summer I <br>\ngot quite close to see how it can be implemented relatively easily, at <br>\nleast the abstract case / show ?case form, because printing of terms in a <br>\nparsable way is still needs further investigation.  It is unlikely to <br>\nhappen for the coming release, though.</p>\n<p>Also note that goal1, ..., goal42 are not Isar-conformant at all: they <br>\nproduce fragile proofs with lots of funny indices.  It is often better <br>\nmake an unstructured script in the traditional manner here.</p>\n<p>Makarius</p>",
        "id": 294226705,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660900332
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nThe implementation work for anything is usually an order of magnitude more <br>\nthan first anticipated, and an order of magitude less than the cumulative <br>\nefforts for maintaining the result in the long run.</p>\n<p>Makarius</p>",
        "id": 294226716,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660900338
    }
]