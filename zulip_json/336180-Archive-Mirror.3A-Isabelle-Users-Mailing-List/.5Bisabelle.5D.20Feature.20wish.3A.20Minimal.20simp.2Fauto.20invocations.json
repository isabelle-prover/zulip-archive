[
    {
        "content": "<p>From: Joachim Breitner &lt;<a href=\"mailto:breitner@kit.edu\">breitner@kit.edu</a>&gt;<br>\nDear Tobias,</p>\n<p>Am Sonntag, den 18.11.2012, 09:31 +0100 schrieb Tobias Nipkow:</p>\n<blockquote>\n<p>We are planning to provide a much improved tracing facility for the simplifier<br>\nwhich will certainly keep track of such things and will tell you, for example,<br>\nif a rule you added explicitly was not used at all. We could also provide the<br>\nlist of all rules used.</p>\n</blockquote>\n<p>great!</p>\n<blockquote>\n<blockquote>\n<p>The output window would then say something along the lines simplification<br>\nused 5 lemmas. Use \"apply (simp only: foo bar baz bam bang)\" (12ms) to <br>\nreproduce. and in the IDE I could click on that to replace the original<br>\ninvocation with this more explicit command.</p>\n</blockquote>\n<p>I doubt we want to go down that route. The simplifier often uses lots of<br>\nrules, which would lead to a very long list if supplied explicitly, which is<br>\nugly. Moreover it would expose information we want to hide: how exactly a lot<br>\nof basic computations are organized, especially rewriting on numbers. Your<br>\nsuggestion would create simplifier calls that hardwire that information and<br>\nmake such steps very brittle under change. I don't want to encourage that.</p>\n</blockquote>\n<p>I understand the rationale here, and it certainly makes sense when<br>\nworking with a theory that does, say, lots of arithmetic. But other<br>\napplications may make very little use of basic stuff from Main; hardly<br>\nmore than just lists. I’d suggest that the call should be left to the<br>\nuser: If he sees lots of lemmas he did not write himself or does not<br>\nknow, he can leave the simp call as it is. But if the lemmas are roughly<br>\nwhat he expected, why not allow him to make that explicit?</p>\n<p>(The situation is not different with sledgehammer, which also<br>\noccasionally produces internal lemmas, yet it is a useful feature that<br>\nis mostly used in a “good” way.)</p>\n<p>Greetings,<br>\nJoachim<br>\n<a href=\"/user_uploads/14278/bDzXjqReOxzCpyAArkwSvx6Z/signature.asc\">signature.asc</a></p>",
        "id": 294225912,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660899965
    },
    {
        "content": "<p>From: Manuel Eberl &lt;<a href=\"mailto:eberlm@in.tum.de\">eberlm@in.tum.de</a>&gt;<br>\nWhat i would find more useful would be output in the form of 'Use \"apply<br>\n(simp add: foo bar baz bam bang)\"', i. e. if it showed a list of the<br>\nrewrite rules that it used and that are not in the simp set anyway.<br>\nThis, if I am not mistaken, would not lead to the problem of exposing<br>\nany of these these internal details but still provide a similar<br>\nfunctionality. I for one use \"simp add:\" much more often than \"simp<br>\nonly:\" and have often found myself removing rules from the \"add\" clause<br>\nby trial and error to find out which of them are actually necessary.</p>\n<p>Cheers,<br>\nManuel</p>",
        "id": 294225930,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660899974
    },
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\nThat is a version of the feedback we intend to give: which of the added rules<br>\nwere actually used.</p>\n<p>Tobias</p>",
        "id": 294225935,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660899977
    },
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\nAm 18/11/2012 10:51, schrieb Joachim Breitner:</p>\n<blockquote>\n<p>Dear Tobias,</p>\n<p>Am Sonntag, den 18.11.2012, 09:31 +0100 schrieb Tobias Nipkow:</p>\n<blockquote>\n<p>We are planning to provide a much improved tracing facility for the<br>\nsimplifier which will certainly keep track of such things and will tell<br>\nyou, for example, if a rule you added explicitly was not used at all. We<br>\ncould also provide the list of all rules used.</p>\n</blockquote>\n<p>great!</p>\n<blockquote>\n<blockquote>\n<p>The output window would then say something along the lines<br>\nsimplification used 5 lemmas. Use \"apply (simp only: foo bar baz bam<br>\nbang)\" (12ms) to reproduce. and in the IDE I could click on that to<br>\nreplace the original invocation with this more explicit command.</p>\n</blockquote>\n<p>I doubt we want to go down that route. The simplifier often uses lots of <br>\nrules, which would lead to a very long list if supplied explicitly, which<br>\nis ugly. Moreover it would expose information we want to hide: how<br>\nexactly a lot of basic computations are organized, especially rewriting<br>\non numbers. Your suggestion would create simplifier calls that hardwire<br>\nthat information and make such steps very brittle under change. I don't<br>\nwant to encourage that.</p>\n</blockquote>\n<p>I understand the rationale here, and it certainly makes sense when working<br>\nwith a theory that does, say, lots of arithmetic. But other applications<br>\nmay make very little use of basic stuff from Main; hardly more than just<br>\nlists. I’d suggest that the call should be left to the user: If he sees<br>\nlots of lemmas he did not write himself or does not know, he can leave the<br>\nsimp call as it is. But if the lemmas are roughly what he expected, why not<br>\nallow him to make that explicit?</p>\n</blockquote>\n<p>We don't forbid that at all. We just don't want to encourage it in general.</p>\n<blockquote>\n<p>(The situation is not different with sledgehammer, which also occasionally<br>\nproduces internal lemmas, yet it is a useful feature that is mostly used in<br>\na “good” way.)</p>\n</blockquote>\n<p>Sledgehammer (currently) has no alternative.</p>\n<p>Tobias</p>\n<blockquote>\n<p>Greetings, Joachim<br>\n</p>\n</blockquote>",
        "id": 294226134,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660900081
    },
    {
        "content": "<p>From: Timothy Bourke &lt;<a href=\"mailto:tim@tbrk.org\">tim@tbrk.org</a>&gt;<br>\nI wonder if such a feature would be more practical and useful if<br>\nrestricted to a particular theory (or set of theories):</p>\n<p>apply (simp minimize: Invariants add: foo)</p>\n<p>where rules from a theory called \"Invariants\" would be listed for<br>\npossible one-click substitution.</p>\n<p>During the verification of a model, for instance, it's certainly more<br>\nefficient (for the user) to have most lemmas applied automatically,<br>\nbut afterward it would sometimes be nice to know exactly which lemmas<br>\n(from a subset of interesting ones) were actually used. Both for<br>\nrefactoring, as already mentioned, and for better understanding the<br>\nresult.</p>\n<p>But, perhaps this would be better in a separate \"reporting tool\"?</p>\n<p>Tim.<br>\n<a href=\"/user_uploads/14278/iBw8FOYLA8tq9NZnVbDfsgfn/signature.asc\">signature.asc</a></p>",
        "id": 294226846,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660900402
    },
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\nThanks for the suggestion, but this is getting a bit fine-grained and I can<br>\nimagine (too) many variations on this idea.</p>\n<p>Tobias</p>",
        "id": 294226851,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660900406
    },
    {
        "content": "<p>From: Joachim Breitner &lt;<a href=\"mailto:breitner@kit.edu\">breitner@kit.edu</a>&gt;<br>\nDear Isabelle users (and devs, I guess),</p>\n<p>I am using sledgehammer/metis more and more even for very simple and<br>\nobvious lemmas that I could mostly also solve with simp or auto. The<br>\ngreat thing about sledgehammer is that it searched a proof taking many<br>\nlemmas into account, but then produces a command that explicitly<br>\nmentions the lemmas that are required, which is very useful feedback to<br>\nme, and helps, for example, in refactoring.</p>\n<p>Is there a chance to get a similar feature for the simplifier? I could<br>\nimagine that when I write<br>\n        apply (simp minimize add: foo)<br>\nthe simplifier would run as usual, but it would also keep track of which<br>\nsimplification rules were actually used. The output window would then<br>\nsay something along the lines<br>\n        simplification used 5 lemmas.<br>\n        Use \"apply (simp only: foo bar baz bam bang)\" (12ms) to<br>\n        reproduce.<br>\nand in the IDE I could click on that to replace the original invocation<br>\nwith this more explicit command.</p>\n<p>It could work similarly (but maybe harder to implement, I presume) for<br>\nauto.</p>\n<p>More generally, as I’m basically working with Isabelle fulltime these<br>\ndays, there are more usability improvement ideas cropping up. Is this<br>\nthe right forum and form to suggest them?</p>\n<p>Greetings,<br>\nJoachim<br>\n<a href=\"/user_uploads/14278/DwnXQFvKWEPVAOm2PEB41eh-/signature.asc\">signature.asc</a></p>",
        "id": 294228287,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660901094
    },
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\nAm 16/11/2012 23:25, schrieb Joachim Breitner:</p>\n<blockquote>\n<p>Dear Isabelle users (and devs, I guess),</p>\n<p>I am using sledgehammer/metis more and more even for very simple and <br>\nobvious lemmas that I could mostly also solve with simp or auto. The great<br>\nthing about sledgehammer is that it searched a proof taking many lemmas<br>\ninto account, but then produces a command that explicitly mentions the<br>\nlemmas that are required, which is very useful feedback to me, and helps,<br>\nfor example, in refactoring.</p>\n<p>Is there a chance to get a similar feature for the simplifier? I could <br>\nimagine that when I write apply (simp minimize add: foo) the simplifier<br>\nwould run as usual, but it would also keep track of which simplification<br>\nrules were actually used.</p>\n</blockquote>\n<p>We are planning to provide a much improved tracing facility for the simplifier<br>\nwhich will certainly keep track of such things and will tell you, for example,<br>\nif a rule you added explicitly was not used at all. We could also provide the<br>\nlist of all rules used.</p>\n<blockquote>\n<p>The output window would then say something along the lines simplification<br>\nused 5 lemmas. Use \"apply (simp only: foo bar baz bam bang)\" (12ms) to <br>\nreproduce. and in the IDE I could click on that to replace the original<br>\ninvocation with this more explicit command.</p>\n</blockquote>\n<p>I doubt we want to go down that route. The simplifier often uses lots of<br>\nrules, which would lead to a very long list if supplied explicitly, which is<br>\nugly. Moreover it would expose information we want to hide: how exactly a lot<br>\nof basic computations are organized, especially rewriting on numbers. Your<br>\nsuggestion would create simplifier calls that hardwire that information and<br>\nmake such steps very brittle under change. I don't want to encourage that.</p>\n<blockquote>\n<p>It could work similarly (but maybe harder to implement, I presume) for <br>\nauto.</p>\n<p>More generally, as I’m basically working with Isabelle fulltime these days,<br>\nthere are more usability improvement ideas cropping up. Is this the right<br>\nforum and form to suggest them?</p>\n</blockquote>\n<p>It is, thanks.</p>\n<p>Tobias</p>\n<blockquote>\n<p>Greetings, Joachim<br>\n</p>\n</blockquote>",
        "id": 294228336,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660901118
    }
]