[
    {
        "content": "<p>From: Andreas Lochbihler &lt;<a href=\"mailto:lochbihl@ipd.info.uni-karlsruhe.de\">lochbihl@ipd.info.uni-karlsruhe.de</a>&gt;<br>\nHi all,</p>\n<p>the induct method is very convenient when proving lemmas by induction <br>\nover an inductive definition: All extra assumptions that are not <br>\nconsumed as specified by the consumes attribute for the induction rule <br>\nare packaged into the proposition P, variables with explicit <br>\ninstantiations of the form k==\"t\" generate additional assumptions, and <br>\nvariables specified by arbitrary get universally quantified.</p>\n<p>In contrast, the coinduct method seems to be very disappointing for <br>\ncoinductively defined predicates: I have not yet found a way to make it <br>\nconsiders not only the first assumption that is chained in, but the <br>\nconjunction of all of them. Neither seem defining instantiations to be <br>\nsupported, nor have I found a counterpart to arbitrary.</p>\n<p>Currently, I always introduce a new variable for defined instantiations, <br>\n  manually add the equation to the conjunction of the assumptions and <br>\nexistentially quantify over variables that I would list after arbitrary <br>\nin an induction. Inside the proof, the first thing to do is to unpack <br>\nall assumptions again.</p>\n<p>Can I somehow avoid all this clutter in my Isar proof scripts?</p>\n<p>Regards,<br>\nAndreas</p>",
        "id": 294078414,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660829811
    },
    {
        "content": "<p>From: Lawrence Paulson &lt;<a href=\"mailto:lp15@cam.ac.uk\">lp15@cam.ac.uk</a>&gt;<br>\nI am glad that somebody out there is using coinduction. I suspect that  <br>\nvery little development has gone into this area and it is really  <br>\ndriven by what people ask for.<br>\nLarry</p>",
        "id": 294078449,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660829829
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nIn principle \"coinduct\" could do the dual of the local context management <br>\nof \"induct\".  I have a sketch of that on a pile of things that should be <br>\ndone eventually, but empirically there are signigicantly less users of <br>\ncoinduction than induction (and even that needs some updating).</p>\n<p>BTW, Jesper Bengtson (Uppsala) has been using coninduction a lot.  The <br>\npresent \"coinduct\" method was prompted by him some years ago -- originally <br>\nhe was still using erule_tac x = y in ... (Too many other diversions have <br>\nprevented to continue this further.)</p>\n<p>Makarius</p>",
        "id": 294078523,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660829866
    }
]