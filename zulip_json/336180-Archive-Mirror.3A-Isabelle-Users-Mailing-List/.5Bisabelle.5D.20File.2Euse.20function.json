[
    {
        "content": "<p>From: Clément Hurlin &lt;<a href=\"mailto:Clement.Hurlin@esial.uhp-nancy.fr\">Clement.Hurlin@esial.uhp-nancy.fr</a>&gt;<br>\nHi,</p>\n<p>As part of my work to extend the rv tactic, I'm trying to use a  <br>\nfile containing ML code using \"File.use\". The file used contained the  <br>\nfollowing code :<br>\nval proof_congr = X<br>\nval proof_inst  = Y</p>\n<p>And at the ML level, I do :</p>\n<p>val proof_congr = []<br>\nval proof_inst = []</p>\n<p>val _ = File.use (Path.unpack proof_hints_fn)</p>\n<p>Even if the <em>isabelle</em> buffer in proofgeneral shows that proof_congr  <br>\nand proof_inst are filled with X and Y, it is actually not the case at  <br>\nthe ML level : proof_congr and proof_inst are still the empty list :O(  <br>\nWhy ?</p>\n<p>Thanks for your help,<br>\nClément</p>",
        "id": 293911042,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660747427
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nOn Sun, 30 Apr 2006, Clément Hurlin wrote:</p>\n<blockquote>\n<p>I'm trying to use a file containing ML code using \"File.use\".</p>\n</blockquote>\n<p>Why use the internal File.use instead of the toplevel use (which is <br>\nThyInfo.use)?</p>\n<blockquote>\n<p>The file used contained the following code :</p>\n</blockquote>\n<blockquote>\n<p>val proof_congr = X<br>\nval proof_inst  = Y</p>\n<p>And at the ML level, I do :</p>\n<p>val proof_congr = []<br>\nval proof_inst = []</p>\n<p>val _ = File.use (Path.unpack proof_hints_fn)</p>\n<p>Even if the <em>isabelle</em> buffer in proofgeneral shows that proof_congr and <br>\nproof_inst are filled with X and Y, it is actually not the case at the <br>\nML level : proof_congr and proof_inst are still the empty list :O( Why ?</p>\n</blockquote>\n<p>I do not fully understand your setup.  There might be a misunderstanding <br>\nconcerning the meaning of ML toplevel declarations: proof_congr and <br>\nproof_inst cannot be ``filled'' with other values, because they are <br>\nstatically fixed bindings to immutable values.  Maybe you were actually <br>\nthinking about assignable references.</p>\n<p>On the other hand, you may actually want to store your data within the <br>\ntheory or proof context of Isabelle in a value oriented fashion.  See <br>\nTheoryDataFun/ProofDataFun in src/Pure/context.ML and existing <br>\napplications in the sources.  Especially see src/ZF/Tools/typechk.ML in <br>\nthe development version for an up-to-date example.</p>\n<p>Makarius</p>",
        "id": 293911065,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660747433
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nNote that 'use' is a descendent of the venerable 'eval' of LISP, which <br>\nalways operates on the toplevel environment.  In fact use/eval is some <br>\nkind of magic that should not be invoked only in very special situations.</p>\n<p>Better stay with ordinary value oriented functions ... -&gt; theory -&gt; theory <br>\nof Proof.context -&gt; Proof.context (or mutable references as a last <br>\nresort).</p>\n<p>Makarius</p>",
        "id": 293911091,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660747439
    },
    {
        "content": "<p>From: Clément Hurlin &lt;<a href=\"mailto:Clement.Hurlin@esial.uhp-nancy.fr\">Clement.Hurlin@esial.uhp-nancy.fr</a>&gt;</p>\n<blockquote>\n<p>because they are<br>\nstatically fixed bindings to immutable values.</p>\n</blockquote>\n<p>Understood.</p>\n<blockquote>\n<p>Maybe you were actually<br>\nthinking about assignable references.</p>\n</blockquote>\n<p>Yes I didn't tought of that but that's what I want to do : modify the  <br>\nvalue of variables inside my code. Yet using references with this  <br>\nfollowing code fails :<br>\nval proof_congr = ref []<br>\nval proof_inst  = ref []</p>\n<p>val _ = use proof_hints_fn</p>\n<p>proof_hints_fn containing :<br>\n(<br>\n  proof_inst := X;<br>\n  proof_congr := Y<br>\n)</p>\n<p>When executing, it now says that 'proof_inst' and 'proof_congr' are  <br>\nnot declared. I guess that when calling use, the context of the call  <br>\nisn't inherited. But this is bizarre since it works inside an  <br>\ninteractive session...</p>\n<p>Clément</p>",
        "id": 293911176,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660747451
    }
]