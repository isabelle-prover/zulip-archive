[
    {
        "content": "<p>From: Andreas Lochbihler &lt;<a href=\"mailto:lochbihl@ipd.info.uni-karlsruhe.de\">lochbihl@ipd.info.uni-karlsruhe.de</a>&gt;<br>\nHi,</p>\n<p>when using Isabelle's feature to search for theorems I frequently use <br>\nthe \"intro\" command instead of a pattern to find the appropriate <br>\nintroduction rule for inductively defined sets. Actually, I would like <br>\nto get the names of the introduction rules that match, i.e. those names <br>\nthat I explicitly gave these rules in the inductive declaration. <br>\nHowever, the search result does not contain these names, but <br>\n....intros(23): ..., ....intros(34): ..., etc., which is not what I <br>\nwanted in the first place because the rules' positions in the inductive <br>\ndefinition are not stable when I add/delete/move some rules.</p>\n<p>Is there some switch in Isabelle 2008 to make Isabelle display the <br>\nrules' names that are given explicitly in the inductive definition?</p>\n<p>As a concrete example, take</p>\n<p>lemma \"(a, a) : r^*\"</p>\n<p>Doing a search for \"intro\" theorems, this gives (among many others)<br>\nTransitive_Closure.rtrancl.intros(1): (?a, ?a) : r^*</p>\n<p>However, I would like to get:<br>\nTransitive_Closure.rtrancl.rtrancl_refl: (?a, ?a) : r^*</p>\n<p>Andreas</p>",
        "id": 294063277,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660824530
    },
    {
        "content": "<p>From: Gerwin Klein &lt;<a href=\"mailto:gerwin.klein@nicta.com.au\">gerwin.klein@nicta.com.au</a>&gt;<br>\nHi Andreas,</p>\n<p>Andreas Loc<br>\nThe search tries to return the shortest name (although it should actually <br>\nprefer names without numbers). To get all names that match, try the with_dups <br>\noption in the xemacs minibuffer, i.e. say:</p>\n<p>(with_dups) intro</p>\n<p>Cheers,<br>\nGerwin</p>",
        "id": 294063319,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660824537
    },
    {
        "content": "<p>From: Brian Huffman &lt;<a href=\"mailto:brianh@cs.pdx.edu\">brianh@cs.pdx.edu</a>&gt;<br>\nQuoting Andreas Lochbihler &lt;<a href=\"mailto:lochbihl@ipd.info.uni-karlsruhe.de\">lochbihl@ipd.info.uni-karlsruhe.de</a>&gt;:</p>\n<blockquote>\n<p>As a concrete example, take</p>\n<p>lemma \"(a, a) : r^*\"</p>\n<p>Doing a search for \"intro\" theorems, this gives (among many others)<br>\nTransitive_Closure.rtrancl.intros(1): (?a, ?a) : r^*</p>\n<p>However, I would like to get:<br>\nTransitive_Closure.rtrancl.rtrancl_refl: (?a, ?a) : r^*</p>\n<p>Andreas</p>\n</blockquote>\n<p>Quoting Gerwin Klein &lt;<a href=\"mailto:gerwin.klein@nicta.com.au\">gerwin.klein@nicta.com.au</a>&gt;:</p>\n<blockquote>\n<p>The search tries to return the shortest name (although it should<br>\nactually prefer names without numbers).</p>\n</blockquote>\n<p>Indeed, it should prefer names without numbers, even if they have  <br>\nlonger names. I had noticed this problem before, and even coded up a  <br>\nsolution for it, but I never got around to cleaning up the code and  <br>\nchecking it in until now.</p>\n<p>The fix is now in cvs, or you can get it in the next developer's snapshot.</p>\n<ul>\n<li>Brian</li>\n</ul>",
        "id": 294063344,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660824543
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nNote that using the development snapshot for real work is generally a bad <br>\nidea.  Especially after an official stable release we tend to throw in <br>\nmany testing-unstable things.</p>\n<p>In this particular case of a very small change it might be better to adapt <br>\nyour official version manually, if you really care about that feature.  </p>\n<p>Brian's change can be accessed here:</p>\n<p><a href=\"http://isabelle.in.tum.de/isabelle-bin/mercurial.cgi/rev/084dfd231125\">http://isabelle.in.tum.de/isabelle-bin/mercurial.cgi/rev/084dfd231125</a></p>\n<p>Makarius</p>",
        "id": 294063382,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660824549
    },
    {
        "content": "<p>From: Andreas Lochbihler &lt;<a href=\"mailto:lochbihl@ipd.info.uni-karlsruhe.de\">lochbihl@ipd.info.uni-karlsruhe.de</a>&gt;<br>\nThanks a lot for the change, the names now look very nice.<br>\nMeanwhile, I came, however, across another issue:<br>\nActually, I would expect that searching for \"intro\" theorems should <br>\nreturn a list of all theorems<br>\nthat unify with the current goal's conclusion, i.e. every rule that can <br>\nbe applied with rule in<br>\nthe current state should be found and everything that is found should be <br>\napplicable in that way. However, this apparently is not true:</p>\n<p>For example, if the current goal is</p>\n<p>\"(?a, a) : r^*\"</p>\n<p>then if I do a search for \"intro\", this does not give <br>\nTransitive_Closure.rtrancl.rtrancl_refl<br>\nbecause ?a would have to be instantiated to a, although</p>\n<p>apply(rule rtrancl.rtrancl_refl)</p>\n<p>correctly instantiates ?a to a. Since unification can potentially be <br>\nexpensive, it is sensible for find not to try to instantiate by default.<br>\nBut is there a switch to make \"find intro\" print all rules that unify, <br>\ni.e. for both<br>\n\"(?a, a) : r^*\" and \"!!a. (?a a, a) : r^*\"<br>\nit should return Transitive_Closure.rtrancl.rtrancl_refl, but not for<br>\n\"!!a. (?a, a) : r^*\".</p>\n<p>If this is not possible, is there a shortcut (like intro) which searches <br>\nin the conclusions for the pattern that is obtained from the current <br>\nconclusion by replacing all ?-terms with _, i.e. rtrancl_refl is found <br>\nfor all three goals in the previous paragraph.</p>\n<p>Andreas</p>",
        "id": 294063457,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660824574
    }
]