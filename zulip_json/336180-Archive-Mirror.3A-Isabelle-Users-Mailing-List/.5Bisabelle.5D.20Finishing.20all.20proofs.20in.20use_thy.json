[
    {
        "content": "<p>From: Dominique Unruh &lt;<a href=\"mailto:unruh@ut.ee\">unruh@ut.ee</a>&gt;<br>\nHello,</p>\n<p>I have the following setting:</p>\n<p>- In an external program I load an Isabelle theory Test (via<br>\n   libisabelle). From the Isabelle point of view, this is a call to<br>\n   Thy_Info.use_thy.</p>\n<p>- If Test.thy contains errors, Thy_Info.use_thy will usually fail. This<br>\n   is desired from my side.</p>\n<p>- However, in some cases (e.g., a \"by\" that fails, or a use of \"sorry\"<br>\n   without quick_and_dirty mode), errors occur inside futures (I think). Then<br>\n   Thy_Info.use_thy will succeed. This is not desired because I want to give<br>\n   an error message when loading fails.</p>\n<p>How can I, on the Isabelle/ML level, force all futures involved in a theory<br>\nto finish in order to throw any potential exceptions? (Something like \"val\n_ = Thy_Info.use_thy \"Draft.Test\"; val thy = Thy_Info.get_theory<br>\n\"Draft.Test\"; val _ = join_theory thy (* This one does not exist *)\")</p>\n<p>I believe this should be possible because the build process does give<br>\nerrors when a proof fails, after all, instead of simply storing a failing<br>\nfuture in the heap image.</p>\n<p>To avoid misunderstandings: I am not working in the bootstrap<br>\nML-environment, but the proper Isabelle/ML environment.</p>\n<p>Best wishes,<br>\nDominique.</p>",
        "id": 294747035,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661193918
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nOn 15/11/2018 17:38, Dominique Unruh wrote:</p>\n<blockquote>\n<p>- However, in some cases (e.g., a \"by\" that fails, or a use of \"sorry\"<br>\n   without quick_and_dirty mode), errors occur inside futures (I think). Then<br>\n   Thy_Info.use_thy will succeed. This is not desired because I want to give<br>\n   an error message when loading fails.</p>\n</blockquote>\n<p>Thy_Info.use_thy should be strict under normal circumstances. Can you<br>\nshow an example where it succeeds?</p>\n<p>Of course it is possible to fabricate some Isabelle/ML snippets that<br>\nhides errors in futures, but I suppose you have used regular proof<br>\nlanguage elements here (Isar commands and proof methods)?</p>\n<p>Another potential source of problems: using Thy_Info.use_thy in<br>\nmultithreaded user-space Isabelle/ML; it is only for the raw bootstrap<br>\nenvironment when nothing else is running.</p>\n<blockquote>\n<p>How can I, on the Isabelle/ML level, force all futures involved in a theory<br>\nto finish in order to throw any potential exceptions? (Something like \"val\n_ = Thy_Info.use_thy \"Draft.Test\"; val thy = Thy_Info.get_theory<br>\n\"Draft.Test\"; val _ = join_theory thy (* This one does not exist *)\")</p>\n</blockquote>\n<p>Thy_Info.use_thy should to the full join_theory for you. If it does not,<br>\nthere is something wrong somewhere.</p>\n<p>Note that \"ML level\" is outdated terminology from 20 years ago. Today we<br>\nhave two main ML environments:</p>\n<p>(1) Isabelle/ML: this is regular user-space Isabelle/ML (inside a<br>\ntheory context).</p>\n<p>(2) The ML bootstrap environment (Poly/ML with some add-ons). Normally<br>\nonly Isabelle system tools use that, but it is also possible do<br>\n\"isabelle process\" invocations, analogously to how \"isabelle build\".</p>\n<blockquote>\n<p>I believe this should be possible because the build process does give<br>\nerrors when a proof fails, after all, instead of simply storing a failing<br>\nfuture in the heap image.</p>\n<p>To avoid misunderstandings: I am not working in the bootstrap<br>\nML-environment, but the proper Isabelle/ML environment.</p>\n</blockquote>\n<p>If you are actually using Thy_Info.use_thy inside regular user-space<br>\nIsabelle/ML, this is not going to work. Maybe that is the actual problem<br>\nhere.</p>\n<p>Again the usual questions: What is your greater application context?<br>\nWhat are you trying to do?</p>\n<p>The new Isabelle PIDE server might be better for it, but it is still<br>\nunused / untested in Isabelle2018. After the release, I have made my own<br>\napplications on top of it: to process all of Isabelle + AFP and<br>\noverserve resulting theory status and markup. This required some<br>\nreworking on the server, and it probably needs more reworking to make it<br>\napplicable in even more applications.</p>\n<p>Makarius</p>",
        "id": 294747080,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661193943
    },
    {
        "content": "<p>From: Dominique Unruh &lt;<a href=\"mailto:unruh@ut.ee\">unruh@ut.ee</a>&gt;</p>\n<blockquote>\n<p>Of course it is possible to fabricate some Isabelle/ML snippets that<br>\nhides errors in futures, but I suppose you have used regular proof<br>\nlanguage elements here (Isar commands and proof methods)?<br>\n</p>\n</blockquote>\n<p>I am using libisabelle. So <em>essentially</em> I do is: I instantiate Isabelle<br>\nwith libisabelle. I issue a command from libisabelle to Isabelle to load a<br>\ntheory which uses Thy_Info.use_thy. This operation completes (that is, I<br>\nknow that I get a theory and not a \"theory future\" back because I do<br>\nsuccessfully, e.g., print theorems from it). At some point I am asking for<br>\na proof term, and this leads to a delayed exception. On the level of the<br>\ntheory that is loaded, however, I don't do weird ML. I can get the error<br>\nwith something as simple as a \"sorry\" in quick_and_dirty=false mode.</p>\n<p>Thy_Info.use_thy should be strict under normal circumstances. Can you</p>\n<blockquote>\n<p>show an example where it succeeds?<br>\n</p>\n</blockquote>\n<p>I could, I think, but it would be quite some work. (Since I would have to<br>\nrewrite the whole setting involving libisabelle described above from<br>\nscratch since the problem is too deeply buried in my application. Including<br>\nsetting up all the build environment etc. I don't see a way to make it<br>\nhappen without libisabelle because, as you pointed out, using use_thy<br>\ninside a normal Isabelle session does not work.)</p>\n<p>Interestingly, when trying to get the same to happen using<br>\n\"Isabelle2018/bin/isabelle console -l HOL -s\" and then entering<br>\nThy_Info.use_thy, the problem does not occur (the theory fails right away).<br>\nSo it might actually be a problem with libisabelle.</p>\n<p>I will ask Lars Hupel, perhaps he knows something about this.</p>\n<p>But if you know some hotfix (i.e., some way to force the theory to join<br>\nafter it has loaded even if we don't understand why it hasn't been fully<br>\njoined in the first place) I would be happy. Because this problem looks<br>\nlike it's going to be confusing to track down.</p>\n<p>Again the usual questions: What is your greater application context?</p>\n<blockquote>\n<p>What are you trying to do?<br>\n</p>\n</blockquote>\n<p>I have a scala application (<a href=\"https://github.com/dominique-unruh/qrhl-tool\">https://github.com/dominique-unruh/qrhl-tool</a>)<br>\nthat uses Isabelle as a backend for reasoning about terms. For this,<br>\nIsabelle gets loaded via libisabelle, the Isabelle session containing my<br>\ntheories gets loaded via libisabelle, and then various ML-snippets (e.g.,<br>\nfor calling the simplifier on a term) are invoked via libisabelle.</p>\n<p>The new Isabelle PIDE server might be better for it, but it is still</p>\n<blockquote>\n<p>unused / untested in Isabelle2018. After the release, I have made my own<br>\napplications on top of it: to process all of Isabelle + AFP and<br>\noverserve resulting theory status and markup. This required some<br>\nreworking on the server, and it probably needs more reworking to make it<br>\napplicable in even more applications.<br>\n</p>\n</blockquote>\n<p>I had a look at the PIDE server. While I didn't fully understand the scope<br>\nof it, I had the feeling that it was more for \"highlevel\" operations (like<br>\n\"build a theory\"), and not for things like \"simplify this particular term\".</p>\n<p>Best wishes,<br>\nDominique.</p>",
        "id": 294747239,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661194010
    },
    {
        "content": "<p>From: Lars Hupel &lt;<a href=\"mailto:hupel@in.tum.de\">hupel@in.tum.de</a>&gt;</p>\n<blockquote>\n<p>I could, I think, but it would be quite some work. (Since I would have to<br>\nrewrite the whole setting involving libisabelle described above from<br>\nscratch since the problem is too deeply buried in my application. Including<br>\nsetting up all the build environment etc. I don't see a way to make it<br>\nhappen without libisabelle because, as you pointed out, using use_thy<br>\ninside a normal Isabelle session does not work.)</p>\n</blockquote>\n<p>I can corroborate this (mostly). When developing the Isabelle<br>\nintegration with Leon, I used \"Goal.parallel_proofs := 0\" quite<br>\nliberally. In my case the problem was less with loading theories;<br>\nrather, running arbitrary ML code that may or may not throw asynchronous<br>\nexceptions.</p>\n<blockquote>\n<p>I will ask Lars Hupel, perhaps he knows something about this.</p>\n</blockquote>\n<p>If you can send me a minimal example how I can reproduce the problem, I<br>\ncould take a look.</p>\n<p>Cheers<br>\nLars</p>",
        "id": 294747297,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661194035
    },
    {
        "content": "<p>From: Dominique Unruh &lt;<a href=\"mailto:unruh@ut.ee\">unruh@ut.ee</a>&gt;<br>\nHi Lars,</p>\n<p>I managed to make a minimal example (attached).</p>\n<p>The actual code is in src/main/scala/test/Test.thy, and the bad theory is<br>\nTestEx.thy.<br>\nThe line \"val response = ...\" is the offending code which fails to give an<br>\nerror.<br>\nInterestingly, a variation of this line (included and commented out) does<br>\nraise an error!</p>\n<p>You can test the code simply using \"sbt run\".</p>\n<p>Best wishes,<br>\nDominique.<br>\n<a href=\"/user_uploads/14278/ahryI6ffr7XXVWjQ-mutxBHl/libisabelle-use-thy.zip\">libisabelle-use-thy.zip</a></p>",
        "id": 294747337,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661194050
    }
]