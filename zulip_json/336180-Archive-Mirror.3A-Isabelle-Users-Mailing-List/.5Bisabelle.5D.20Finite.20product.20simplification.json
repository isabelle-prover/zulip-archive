[
    {
        "content": "<p>From: Holden Lee &lt;<a href=\"mailto:hl422@cam.ac.uk\">hl422@cam.ac.uk</a>&gt;<br>\nI need to be able to do something like this automatically:</p>\n<p>lemma (in comm_monoid) finprod_exp:<br>\n  \"⟦A={x. P x ∧ Q x}; finite A; a∈A→carrier G⟧⟹finprod G (λx. if P x then<br>\n    a x else b x) A = finprod G a A\"<br>\nusing[[simp_trace, simp_trace_depth_limit=10]]<br>\napply (auto cong: finprod_cong2' simp add:simp_if  split:if_splits)</p>\n<p>Looking at the simp trace, it appears to fail during the congruence, when<br>\nit fails to show \"a∈A→carrier G\" even when this was given as a hypothesis.<br>\n(Note that apply (intro finprod_cong2') apply (auto...) works, but this is<br>\nnot good enough for applications because simp doesn't call intro.)</p>\n<p>Here finprod_cong2' is just finprod_cong' in a different (hopefully better)<br>\norder:</p>\n<p>lemma (in comm_monoid) finprod_cong2':<br>\n  \"[| A = B;<br>\n      !!i. i ∈ B ==&gt; f i = g i ; g ∈ B -&gt; carrier G|] ==&gt; finprod G f A =<br>\nfinprod G g B\"<br>\n apply (auto cong: finprod_cong')<br>\ndone</p>\n<p>What gives?</p>\n<p>Thanks,<br>\nHolden</p>",
        "id": 294289880,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660923097
    },
    {
        "content": "<p>From: Johannes Hölzl &lt;<a href=\"mailto:hoelzl@in.tum.de\">hoelzl@in.tum.de</a>&gt;<br>\nI'm not sure but you might try an even stronger form of your cong rule:</p>\n<p>lemma (in comm_monoid) finprod_cong2':<br>\n  \"[| A = B; !!i. i ∈ B =simp=&gt; f i = g i ; g ∈ B -&gt; carrier G|] ==&gt;<br>\n   finprod G f A = finprod G g B\"</p>\n<p>then i : {x. P x /\\ Q x} is rewritten into P i /\\ Q i when applying the<br>\ncongruence rule.</p>\n<p>I don't know what simp_if is but I don't think you need if_splits and<br>\nsimp_if.</p>\n<ul>\n<li>Johannes</li>\n</ul>",
        "id": 294290658,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660923336
    },
    {
        "content": "<p>From: Holden Lee &lt;<a href=\"mailto:hl422@cam.ac.uk\">hl422@cam.ac.uk</a>&gt;<br>\nThanks, this works - what's the difference between ==&gt; and =simp=&gt;?</p>\n<p>-Holden</p>\n<p>2014-08-26 9:46 GMT+01:00 Johannes Hölzl &lt;<a href=\"mailto:hoelzl@in.tum.de\">hoelzl@in.tum.de</a>&gt;:</p>",
        "id": 294290702,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660923354
    },
    {
        "content": "<p>From: Johannes Hölzl &lt;<a href=\"mailto:hoelzl@in.tum.de\">hoelzl@in.tum.de</a>&gt;<br>\nLets assume we have a cong rule of the form:</p>\n<p>[| A = B ; !!x. x : B =simp=&gt; f x = g x |] ==&gt; OP A f = OP B g</p>\n<p>The =simp=&gt; tells the simplifier to simplify x : B before it is used.<br>\nWhen ==&gt;<br>\nis used this does not happen. </p>\n<p>Recently there was a discussion about the usage of =simp=&gt; = :</p>\n<p><a href=\"https://lists.cam.ac.uk/pipermail/cl-isabelle-users/2014-August/msg00069.html\">https://lists.cam.ac.uk/pipermail/cl-isabelle-users/2014-August/msg00069.html</a></p>\n<ul>\n<li>Johannes</li>\n</ul>",
        "id": 294290887,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660923410
    }
]