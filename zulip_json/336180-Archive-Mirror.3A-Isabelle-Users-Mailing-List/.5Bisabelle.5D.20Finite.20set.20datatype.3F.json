[
    {
        "content": "<p>From: Palle Raabjerg &lt;<a href=\"mailto:palle.raabjerg@it.uu.se\">palle.raabjerg@it.uu.se</a>&gt;<br>\nHi all,</p>\n<p>I have a very short, possibly stupid question:<br>\nIs there a finite set datatype in Isabelle?</p>\n<p>I want to include a set type in the definition of a nominal datatype. <br>\nBut Isabelle's standard set datatype can express infinite sets, and <br>\nsince a requirement for a nominal datatype is a proof of finite support, <br>\nthey don't seem to work here.<br>\nI figure there should at least be a theory, or notion of 'finite set' <br>\nsomewhere, as the 'set' function effectively guarantees the finiteness <br>\nof the sets it converts from lists.</p>\n<p>So yes, is there an actual finite set datatype, or would it be possible <br>\nto define one?<br>\nOr must I use lists in the nominal datatype to somehow emulate finite sets?</p>\n<p>Regards,<br>\nPalle Raabjerg</p>",
        "id": 294118452,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660839018
    },
    {
        "content": "<p>From: Lars Noschinski &lt;<a href=\"mailto:noschinl@in.tum.de\">noschinl@in.tum.de</a>&gt;<br>\nThere is the theory Fset in library which defines a finite set type.</p>\n<p>-- Lars</p>",
        "id": 294118466,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660839024
    },
    {
        "content": "<p>From: Florian Haftmann &lt;<a href=\"mailto:florian.haftmann@informatik.tu-muenchen.de\">florian.haftmann@informatik.tu-muenchen.de</a>&gt;<br>\nHi Palle,</p>\n<p>I actually must correct my quite misleading heading of this file: the<br>\ntype fset itself is indeed infinite.</p>\n<p>Christian hints should indeed suffice.</p>\n<p>Hope this helps,<br>\n    Florian<br>\n<a href=\"/user_uploads/14278/UotEsLNgHp_4cegtqkaSHu6r/signature.asc\">signature.asc</a></p>",
        "id": 294118512,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660839043
    },
    {
        "content": "<p>From: Jeremy Dawson &lt;<a href=\"mailto:jeremy@rsise.anu.edu.au\">jeremy@rsise.anu.edu.au</a>&gt;<br>\nChristian Urban wrote:<br>\nRecently I contemplated defining a finite set type and also a type class <br>\nwhich would have included finite sets and (unrestricted) sets, thus not <br>\nhaving to repeat lots of definitions and theorems which already exist <br>\nfor sets.</p>\n<p>But as I understood it (tell me if this is not so) the set type was <br>\nremoved from Isabelle a couple of years ago, so this would no longer be <br>\npossible.</p>\n<p>Jeremy</p>",
        "id": 294118639,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660839098
    },
    {
        "content": "<p>From: Brian Huffman &lt;<a href=\"mailto:brianh@cs.pdx.edu\">brianh@cs.pdx.edu</a>&gt;<br>\nOn Wed, Oct 6, 2010 at 5:10 PM, Jeremy Dawson &lt;<a href=\"mailto:jeremy@rsise.anu.edu.au\">jeremy@rsise.anu.edu.au</a>&gt; wrote:</p>\n<blockquote>\n<p>Recently I contemplated defining a finite set type and also a type class<br>\nwhich would have included finite sets and (unrestricted) sets, thus not<br>\nhaving to repeat lots of definitions and theorems which already exist for<br>\nsets.</p>\n</blockquote>\n<p>Type classes generalizing the standard set operations already exist;<br>\nthey are defined in Lattices.thy. The notations for union,<br>\nintersection, {} and UNIV are now just type-specific abbreviations for<br>\nthe general lattice operations sup, inf, bot, and top, respectively.</p>\n<p>The Quotient_Examples/FSet.thy library that Christian referred to<br>\nalready includes instances of the appropriate lattice classes, which<br>\nlets you avoid repeating the existing generic theorems.</p>\n<p>instantiation fset :: (type) \"{bounded_lattice_bot, distrib_lattice, minus}\"<br>\nbegin<br>\n...</p>\n<p>Of course, the Set.thy library also contains a lot of set-specific<br>\ntheorems that have no general counterpart. By generalizing more<br>\ntheorems from Set.thy to the appropriate lattice classes, we could<br>\nmake FSet.thy more useful.</p>\n<blockquote>\n<p>But as I understood it (tell me if this is not so) the set type was removed<br>\nfrom Isabelle a couple of years ago, so this would no longer be possible.</p>\n</blockquote>\n<p>Indeed, the set type no longer exists; \"'a set\" is just an<br>\nabbreviation for \"'a =&gt; bool\". But this doesn't mean that \"'a set\"<br>\ncan't be made an instance of a type class -- you just need to provide<br>\na generic instance for the function type. For example, the following<br>\ndeclaration from Lattices.thy makes type \"'a set\" into a lattice,<br>\nsince type bool is already a lattice:</p>\n<p>instantiation \"fun\" :: (type, lattice) lattice<br>\nbegin</p>\n<p>definition<br>\n  inf_fun_eq: \"f \\&lt;sqinter&gt; g = (\\&lt;lambda&gt;x. f x \\&lt;sqinter&gt; g x)\"</p>\n<p>definition<br>\n  sup_fun_eq: \"f \\&lt;squnion&gt; g = (\\&lt;lambda&gt;x. f x \\&lt;squnion&gt; g x)\"<br>\n...</p>\n<ul>\n<li>Brian</li>\n</ul>",
        "id": 294118737,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660839122
    },
    {
        "content": "<p>From: Jeremy Dawson &lt;<a href=\"mailto:jlcaadawson@netspeed.com.au\">jlcaadawson@netspeed.com.au</a>&gt;<br>\nBrian,</p>\n<p>Thanks for this - I'll have to look at it when I've got more time.</p>\n<p>This \"instantiation\" command looks rather like the \"instance\" command - <br>\nis that right?<br>\nbut it seems to have definitions following it rather than before it.</p>\n<p>Do you know whether its use is documented anywhere (and if so where) (I <br>\ncan't find it now, probably because I only have Isabelle2005 installed <br>\nhere now).</p>\n<p>So I can't really see how it would work - would you be able to define a <br>\ntype class that encompasses sets and finite sets, and enables you to <br>\ndefine the power set function Pow, and get all the relevant theorems <br>\nabout it ?</p>\n<p>Regards,</p>\n<p>Jeremy</p>",
        "id": 294118755,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660839128
    },
    {
        "content": "<p>From: Alexander Krauss &lt;<a href=\"mailto:krauss@in.tum.de\">krauss@in.tum.de</a>&gt;<br>\nHi Jeremy,</p>\n<blockquote>\n<p>This \"instantiation\" command looks rather like the \"instance\" command - <br>\nis that right?<br>\nbut it seems to have definitions following it rather than before it.</p>\n<p>Do you know whether its use is documented anywhere (and if so where) (I <br>\ncan't find it now, probably because I only have Isabelle2005 installed <br>\nhere now).</p>\n</blockquote>\n<p>You can always find documentation on the latest release at<br>\n<a href=\"http://isabelle.in.tum.de/documentation.html\">http://isabelle.in.tum.de/documentation.html</a> . The document \"Tutorial on <br>\nType Classes\" documents the new (from 2006) class infrastructure from a <br>\nuser's point of view. Moreover, Section 5.6 of the Isar Reference Manual <br>\ncontains syntax diagrams etc. Technical details and background can be <br>\nfound in a paper by Haftmann and Wenzel: <br>\n<a href=\"http://www4.informatik.tu-muenchen.de/~haftmann/pdf/constructive_type_classes_haftmann_wenzel.pdf\">http://www4.informatik.tu-muenchen.de/~haftmann/pdf/constructive_type_classes_haftmann_wenzel.pdf</a></p>\n<blockquote>\n<p>So I can't really see how it would work - would you be able to define a <br>\ntype class that encompasses sets and finite sets, and enables you to <br>\ndefine the power set function Pow, and get all the relevant theorems <br>\nabout it ?</p>\n</blockquote>\n<p>I think power sets cannot be defined, since there is no corresponding <br>\nnotion on functions... (I am not even completely sure how it would work <br>\nif sets had their own type constructor...). But most other constructs <br>\nand notation it works fine.</p>\n<p>Alex</p>",
        "id": 294118785,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660839141
    }
]