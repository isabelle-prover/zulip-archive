[
    {
        "content": "<p>From: John Wickerson &lt;<a href=\"mailto:jpw48@cam.ac.uk\">jpw48@cam.ac.uk</a>&gt;<br>\nDear Isabelle,</p>\n<p>This question is directed at anybody familiar with the Finite_Set theory...</p>\n<p><a href=\"http://isabelle.in.tum.de/library/HOL/Finite_Set.html\">http://isabelle.in.tum.de/library/HOL/Finite_Set.html</a></p>\n<p>... in particular, the Finite_Set.fold functional. Consider the term</p>\n<p>Finite_Set.fold f s A</p>\n<p>Various lemmas (e.g. Finite_Set.comp_fun_commute.fold_image) require me to show that f satisfies the \"comp_fun_commute\" property, i.e.</p>\n<p>(1)    f x o f y = f y o f x</p>\n<p>for all x and y. This is too strong a requirement for me. I can show that (1) holds for all x and y in A, but not for all x and y in general. Morally, I <em>should</em> only have to show that f commutes when given inputs drawn from A.</p>\n<p>It would be quite a bit of hassle for me to convert these lemmas to stronger versions. So I was wondering if anybody has come across this problem before, or knows how to easily strengthen these lemmas, or has any other advice on this topic?</p>\n<p>Thanks,<br>\njohn</p>",
        "id": 294234372,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660904101
    },
    {
        "content": "<p>From: Peter Lammich &lt;<a href=\"mailto:lammich@in.tum.de\">lammich@in.tum.de</a>&gt;<br>\nHi.</p>\n<p>An alternative is to use an invariant rule, i.e., something like:</p>\n<p>I s a0   !!x s a. [| I s a; x\\in s |] ==&gt; I (s-{x}) (f x a)<br>\n------------------------------------------------------------ if finite s<br>\n  I {} (fold f s a0)</p>\n<p>or, alternatively, show that your proposition holds for folding over any<br>\ndistinct list representing the set:</p>\n<p>!!l. [| distinct l; set l = s |] ==&gt; P (foldl f l a0)<br>\n--------------------------------------------------------  if finite s<br>\n P (fold f s a0)</p>\n<p>Both rules (modulo my typos) should be provable by induction over the<br>\nfinite set s.</p>",
        "id": 294234388,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660904107
    },
    {
        "content": "<p>From: John Wickerson &lt;<a href=\"mailto:jpw48@cam.ac.uk\">jpw48@cam.ac.uk</a>&gt;<br>\nHi Peter, thanks very much for this. Forgive me if I'm mistaken, but I don't understand how either of these approaches would help. I think I would still need to reason about terms like </p>\n<blockquote>\n<p>fold f s (insert a A)</p>\n</blockquote>\n<p>in order to complete the induction, and I can't reason about such terms without knowing that f satisfies the \"comp_fun_commute\" property.</p>\n<p>Let me state my problem more concretely... </p>\n<p>Finite_Set provides the following lemma (the first assumption comes from the context \"comp_fun_commute\"):</p>\n<blockquote>\n<p>lemma fold_image:<br>\n  assumes \"⋀x y. f x ∘ f y = f y ∘ f x\"<br>\n  assumes \"finite A\" and \"inj_on g A\"<br>\n  shows \"fold f x (g ` A) = fold (f ∘ g) x A\"</p>\n</blockquote>\n<p>But I want the following lemma:</p>\n<blockquote>\n<p>lemma fold_image_stronger:<br>\n  assumes \"⋀x y. ⟦ x ∈ A ; y ∈ A ⟧ ⟹ f x ∘ f y = f y ∘ f x\"<br>\n  assumes \"finite A\" and \"inj_on g A\"<br>\n  shows \"fold f x (g ` A) = fold (f ∘ g) x A\"</p>\n</blockquote>\n<p>How might I prove it? It's tricky because all the other lemmas about Finite_Set.fold are in the \"comp_fun_commute\" context where </p>\n<blockquote>\n<p>⋀x y. f x ∘ f y = f y ∘ f x</p>\n</blockquote>\n<p>holds, whereas I only have the weaker property</p>\n<blockquote>\n<p>⋀x y. ⟦ x ∈ A ; y ∈ A ⟧ ⟹ f x ∘ f y = f y ∘ f x</p>\n</blockquote>\n<p>available to me.</p>\n<p>Thanks very much,</p>\n<p>john</p>\n<p>On 19 Feb 2013, at 16:38, Peter Lammich wrote:</p>\n<blockquote>\n<p>Hi.</p>\n<p>An alternative is to use an invariant rule, i.e., something like:</p>\n<p>I s a0   !!x s a. [| I s a; x\\in s |] ==&gt; I (s-{x}) (f x a)<br>\n------------------------------------------------------------ if finite s<br>\n I {} (fold f s a0)</p>\n<p>or, alternatively, show that your proposition holds for folding over any<br>\ndistinct list representing the set:</p>\n<p>!!l. [| distinct l; set l = s |] ==&gt; P (foldl f l a0)<br>\n--------------------------------------------------------  if finite s<br>\nP (fold f s a0)</p>\n<p>Both rules (modulo my typos) should be provable by induction over the<br>\nfinite set s.</p>\n<p>--<br>\n Peter</p>\n<p>On Di, 2013-02-19 at 16:01 +0100, John Wickerson wrote:</p>\n<blockquote>\n<p>Dear Isabelle,</p>\n<p>This question is directed at anybody familiar with the Finite_Set theory...</p>\n<p><a href=\"http://isabelle.in.tum.de/library/HOL/Finite_Set.html\">http://isabelle.in.tum.de/library/HOL/Finite_Set.html</a></p>\n<p>... in particular, the Finite_Set.fold functional. Consider the term</p>\n<p>Finite_Set.fold f s A</p>\n<p>Various lemmas (e.g. Finite_Set.comp_fun_commute.fold_image) require me to show that f satisfies the \"comp_fun_commute\" property, i.e.</p>\n<p>(1)    f x o f y = f y o f x</p>\n<p>for all x and y. This is too strong a requirement for me. I can show that (1) holds for all x and y in A, but not for all x and y in general. Morally, I <em>should</em> only have to show that f commutes when given inputs drawn from A.</p>\n<p>It would be quite a bit of hassle for me to convert these lemmas to stronger versions. So I was wondering if anybody has come across this problem before, or knows how to easily strengthen these lemmas, or has any other advice on this topic?</p>\n<p>Thanks,<br>\njohn</p>\n</blockquote>\n</blockquote>",
        "id": 294234394,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660904113
    },
    {
        "content": "<p>From: Lawrence Paulson &lt;<a href=\"mailto:lp15@cam.ac.uk\">lp15@cam.ac.uk</a>&gt;<br>\nIs your desired theorem true?</p>\n<p>I would find it easier to believe if it also assumed \"x : A\" and \"g ` A &lt;= A\".</p>\n<p>Larry Paulson</p>",
        "id": 294234409,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660904119
    },
    {
        "content": "<p>From: John Wickerson &lt;<a href=\"mailto:jpw48@cam.ac.uk\">jpw48@cam.ac.uk</a>&gt;<br>\nMm, yes, my mistake. The domain of f should be \"g ` A\" rather than just \"A\". So the theorem should be:</p>",
        "id": 294234427,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660904125
    },
    {
        "content": "<p>From: Peter Lammich &lt;<a href=\"mailto:lammich@in.tum.de\">lammich@in.tum.de</a>&gt;<br>\nHi John.</p>\n<p>Sorry for the confusion with the invariant rules. They hold (if the<br>\nproperty P admits only one result) but are probably not very useful to<br>\nprove your stronger fold_image rule.</p>\n<p>To prove that (even a stronger one) you can exploit the fact that the<br>\ndefinition of fold does not depend on this strange locale with too<br>\nstrong assumptions, but on an inductively defined predicate fold_graph,<br>\nthat contains the results of all possible fold orderings.</p>\n<p>Here is the proof of your fold_image_stronger, but you do not need the<br>\nfirst two assumptions at all! <br>\nPlease excuse the aux-lemmas and the not very elaborated proofs:</p>\n<p>theorem fold_image_even_stronger:<br>\n  assumes I: \"inj_on g A\"<br>\n  shows \"Finite_Set.fold f x (g`A) = Finite_Set.fold (f o g) x A\"<br>\n  oops (*Proof comes below, first need to show some aux-lemmas *)</p>\n<p>lemma inj_img_insertE:<br>\n  assumes I: \"inj_on f s\"<br>\n  assumes N: \"x\\&lt;notin&gt;r\"<br>\n  assumes E: \"insert x r = f<code>s\"\n  obtains x' s' where \"s=insert x' s'\" and \"x'\\&lt;notin&gt;s'\" \n    and \"x = f x'\" and \"r = f</code>s'\" <br>\nproof -<br>\n  from E have \"x\\&lt;in&gt;f<code>s\" by auto\n  then obtain x' where \"x'\\&lt;in&gt;s\" and \"x = f x'\" by auto\n  hence \"s = insert x' (s - {x'})\" by auto\n  have \"r = f</code>(s - {x'})\" apply auto<br>\n    apply (metis (no_types) Diff_insert_absorb E I N <br>\n<code>s = insert x' (s - {x'})</code> <code>x = f x'</code> image_insert inj_on_insert <br>\n      insertI1 insert_Diff1)<br>\n    by (metis E I <code>x = f x'</code> <code>x' \\&lt;in&gt; s</code> imageI inj_on_contraD insertE)<br>\n  show ?thesis<br>\n    apply rule<br>\n    apply fact<br>\n    apply simp<br>\n    apply fact+<br>\n    done<br>\nqed</p>\n<p>lemma fold_graph_image:<br>\n  \"inj_on g s \\&lt;Longrightarrow&gt; fold_graph f a (g<code>s) r\n\\&lt;longleftrightarrow&gt; fold_graph (f o g) a s r\"\nproof\n  case goal1 \n  from goal1(2,1) show ?case\n  proof (induct \"g</code>s\" r arbitrary: s rule: fold_graph.induct)<br>\n    case emptyI thus ?case by (auto intro: fold_graph.emptyI)<br>\n  next<br>\n    case (insertI x A r s)<br>\n    with inj_img_insertE obtain x' A' where<br>\n      \"x'\\&lt;notin&gt;A'\" and [simp]: \"s = insert x' A'\" \"x = g x'\" \"A=g<code>A'\"\n      by metis\n    with insertI.hyps(3)[of A'] insertI.prems \n    have FG: \"fold_graph (f o g) a A' r\"\n      by auto\n    from fold_graph.insertI[OF </code>x'\\&lt;notin&gt;A'<code> FG]\n    show ?case by simp\n  qed\nnext\n  case goal2\n  from goal2(2,1) show ?case\n  proof (induct rule: fold_graph.induct)\n    case emptyI thus ?case by (auto intro: fold_graph.emptyI)\n  next\n    case (insertI x A r)\n    hence FG: \"fold_graph f a (g</code>A) r\" by simp<br>\n    from <code>x\\&lt;notin&gt;A</code> insertI.prems have N: \"g x \\&lt;notin&gt; g`A\" by auto<br>\n    from fold_graph.insertI[OF N FG] show ?case by simp<br>\n  qed<br>\nqed</p>\n<p>lemma fold_graph_image':<br>\n  \"inj_on g s \\&lt;Longrightarrow&gt; fold_graph f a (g`s) = fold_graph (f o<br>\ng) a s\"<br>\n  by (rule ext) (rule fold_graph_image)</p>\n<p>theorem fold_image_even_stronger:<br>\n  assumes I: \"inj_on g A\"<br>\n  shows \"Finite_Set.fold f x (g`A) = Finite_Set.fold (f o g) x A\"<br>\n  unfolding Finite_Set.fold_def<br>\n  by (simp add: fold_graph_image'[OF I, of f x])</p>\n<p>Best,<br>\n  Peter</p>",
        "id": 294234527,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660904163
    },
    {
        "content": "<p>From: John Wickerson &lt;<a href=\"mailto:jpw48@cam.ac.uk\">jpw48@cam.ac.uk</a>&gt;<br>\nAwesome! Thanks so much Peter, that's really kind of you.</p>\n<p>John</p>",
        "id": 294234550,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660904175
    },
    {
        "content": "<p>From: John Wickerson &lt;<a href=\"mailto:jpw48@cam.ac.uk\">jpw48@cam.ac.uk</a>&gt;<br>\nJust a thought: since \"fold_image_even_stronger\" needs only a subset of the assumptions needed by \"Finite_Set.fold_image\", perhaps your new theorem should replace the one in the HOL library? </p>\n<p>john</p>",
        "id": 294234598,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660904205
    },
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\nI have that on my radar.</p>\n<p>Tobias</p>",
        "id": 294234642,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660904224
    }
]