[
    {
        "content": "<p>From: Rafal Kolanski &lt;<a href=\"mailto:rafalk@cse.unsw.edu.au\">rafalk@cse.unsw.edu.au</a>&gt;<br>\nGreetings,</p>\n<p>I have defined my own type, pptr_t which encapsulates another type such <br>\nas machine words, nats or whatnot:</p>\n<p>datatype 'a pptr_t = PPtr 'a</p>\n<p>I have a function pptr_val which gives back the encapsulated type, and <br>\nI've proved:</p>\n<p>instance pptr_t :: (type)ord<br>\ninstance pptr_t :: (order)order</p>\n<p>Now, I am curious at to why I can't seem to prove:</p>\n<p>finite {PPtr a..&lt;PPtr (a + of_nat lev1pt_size)}</p>\n<p>Where a is a 32 bit machine word. Note that</p>\n<p>finite {(j::32 word)..&lt;k}</p>\n<p>goes away by simp.</p>\n<p>What is the minimum I need to do to mimic this behaviour? (I've tried <br>\nstating membership in linorder, but that doesn't seem to be it)</p>\n<p>Any guidance would be much appreciated!</p>\n<p>Yours Sincerely,</p>\n<p>Rafal Kolanski.</p>",
        "id": 294055787,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660821520
    },
    {
        "content": "<p>From: Lawrence Paulson &lt;<a href=\"mailto:lp15@cam.ac.uk\">lp15@cam.ac.uk</a>&gt;<br>\nThat set isn't finite, because \"a\" could have type real. You have to  <br>\nexpress that type 'a can be order-embedded into the naturals.</p>\n<p>Larry Paulson</p>",
        "id": 294055800,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660821524
    },
    {
        "content": "<p>From: Lawrence Paulson &lt;<a href=\"mailto:lp15@cam.ac.uk\">lp15@cam.ac.uk</a>&gt;<br>\nSomething like</p>\n<p>EX f:: 'a =&gt; nat. ALL x y. x&lt;y ==&gt; f x &lt; f y</p>\n<p>Larry</p>",
        "id": 294055817,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660821531
    },
    {
        "content": "<p>From: Brian Huffman &lt;<a href=\"mailto:brianh@cs.pdx.edu\">brianh@cs.pdx.edu</a>&gt;<br>\nHi Rafal,</p>\n<p>I would suggest that you prove</p>\n<p>instance pptr_t :: (finite) finite</p>\n<p>A useful lemma would be that (UNIV::'a pptr_t set) = PPtr ` UNIV.</p>\n<p>I am assuming that type word also has an instance of class finite; if  <br>\nnot, then you will have to prove this as well. Then the simplifier  <br>\nshould be able to prove</p>\n<p>finite {PPtr a..&lt;PPtr (a + of_nat lev1pt_size)}</p>\n<p>just because of its type.</p>\n<ul>\n<li>Brian</li>\n</ul>\n<p>Quoting Rafal Kolanski &lt;<a href=\"mailto:rafalk@cse.unsw.edu.au\">rafalk@cse.unsw.edu.au</a>&gt;:</p>",
        "id": 294055836,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660821539
    },
    {
        "content": "<p>From: Rafal Kolanski &lt;<a href=\"mailto:rafalk@cse.unsw.edu.au\">rafalk@cse.unsw.edu.au</a>&gt;<br>\nI think that that particular set is finite, because of_nat will return a <br>\nword of some kind (making a that same kind of word), and words are, in <br>\nmy understanding, finite.<br>\nSo what I really want is to say that if 'a can be order-embedded into <br>\nthe naturals, then so can my type carrying 'a. Unfortunately, I don't <br>\nknow the isabelle statement that states this.</p>\n<p>Any further pointers?</p>\n<p>Sincerely,</p>\n<p>Rafal Kolanski.</p>\n<p>Lawrence Paulson wrote:</p>",
        "id": 294055884,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660821558
    },
    {
        "content": "<p>From: Rafal Kolanski &lt;<a href=\"mailto:rafalk@cse.unsw.edu.au\">rafalk@cse.unsw.edu.au</a>&gt;<br>\nBrian,</p>\n<p>Thank you! That was exactly what was needed and the lemma you suggested <br>\nwas the way to go.</p>\n<p>Now all other lemmas about finiteness of pointer sets go away by simp, <br>\nbased just on type.</p>\n<p>Sincerely,</p>\n<p>Rafal Kolanski.</p>\n<p>P.S. For those who are curious why I would ever want to have carrier <br>\ntypes in the first place, it's so I can have type safety (and <br>\noverloading) between virtual and physical pointers; on most machines <br>\nthey are identical (e.g. 32 word).</p>\n<p>Brian Huffman wrote:</p>",
        "id": 294055890,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660821562
    }
]