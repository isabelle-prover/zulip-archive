[
    {
        "content": "<p>From: Joshua Chen &lt;<a href=\"mailto:joshua.chen@uni-bonn.de\">joshua.chen@uni-bonn.de</a>&gt;<br>\nDear Eisbach/Isabelle/ML experts,</p>\n<p>I have a repetitive structured proof whose functionality I <br>\nwould like to encapsulate as a method.<br>\nFor example:</p>\n<p>notepad begin</p>\n<p>assume *: \"&#928;x:A. &#928;y: B x. &#928;z: C x y. D x y <br>\nz : U\"</p>\n<p>have 0: \"A : U\" using * by rule</p>\n<p>-- {* \"B: A -&gt; U\" abbreviates \"!!x. x : A ==&gt; B x : U\" *}<br>\nhave 1: \"B: A -&gt; U\"<br>\nproof -<br>\n   fix x assume \"x : A\"<br>\n   with * have **: \"&#928;y: B x. &#928;z: C x y. D x y z <br>\n: U\" by rule<br>\n   then show \"B x : U\" by rule<br>\nqed</p>\n<p>have 2: \"!!x. x : A ==&gt; C x : B x -&gt; U\"<br>\nproof -<br>\n   fix x assume \"x : A\"<br>\n   with * have **: \"&#928;y: B x. &#928;z: C x y. D x y z <br>\n: U\" by rule<br>\n   fix y assume \"y : B x\"<br>\n   with ** have \"&#928;z: C x y. D x y z : U\" by rule<br>\n   then show \"C x y : U\" by rule<br>\nqed</p>\n<p>have 3: \"!!x y. [| x : A; y : B x |] ==&gt; D x y : C x y -&gt; <br>\nU\"<br>\nproof -<br>\n   fix x assume \"x : A\"<br>\n   with * have **: \"&#928;y: B x. &#928;z: C x y. D x y z <br>\n: U\" by rule<br>\n   fix y assume \"y : B x\"<br>\n   with ** have \"&#928;z: C x y. D x y z : U\" by rule<br>\n   then show \"D x y: C x y -&gt; U\" by rule<br>\nqed</p>\n<p>end</p>\n<p>In the above proofs, \"rule\" is applying one or the other <br>\nof two rules previously declared as [elim]:<br>\nProd_form_cond1 [elim]: \"!!A B. (&#928;x:A. B x : U) ==&gt; A <br>\n: U\"<br>\nProd_form_cond2 [elim]: \"!!A B. (&#928;x:A. B x : U) ==&gt; <br>\nB: A -&gt; U\"</p>\n<p>Given \"&#928;x:T. S x : U\", the basic proof pattern is <br>\nthen:<br>\nFix x, assume \"x : T\", and derive either \"T: U\" or \"S x : <br>\nU\" by rule. Recurse, essentially performing a <br>\nbreadth-first search over a binary tree.</p>\n<p>I have tried and failed at automating this proof with <br>\nEisbach, my difficulty is in getting it to perform the <br>\n\"fix...assume\" steps to instantiate a \"scope\" for the <br>\nvariable and introduce the typing assumption.<br>\nIs there any method that emulates this? If not, how does <br>\none go about implementing such functionality in an <br>\nIsabelle/ML tactic?</p>\n<p>Thanks very much! :)</p>",
        "id": 294734632,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661189353
    },
    {
        "content": "<p>From: <a href=\"mailto:Thomas.Sewell@data61.csiro.au\">Thomas.Sewell@data61.csiro.au</a><br>\nThere's some confusion here, I think.</p>\n<p>Eisbach is, to my understanding, mostly for scripting what can<br>\nbe done at the method level (e.g. inside an apply (...)) step<br>\nrather than what can be done in a structured proof document<br>\n(e.g. the fix, assume statements of these proofs). So your<br>\nfirst step would be to \"compress\" these structured proofs<br>\ninto unstructured ones.</p>\n<p>Re-reading the end of your message, I think it's pretty simple.<br>\nYou can apply your 'elim' rules in unstructured style as<br>\ndestruction rules, e.g. apply (drule Prod_form_cond1).</p>\n<p>Isabelle natively supports backtracking with ',', so the<br>\nbelow might just work.</p>\n<p>method try_solve = (assumption | (drule Prod_form_cond1 Prod_form_cond2, try_solve))</p>\n<p>I didn't actually test that though, try playing around with<br>\nsimilar things.</p>\n<p>Cheers,<br>\n    Thomas.</p>",
        "id": 294736683,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661190041
    },
    {
        "content": "<p>From: Joshua Chen &lt;<a href=\"mailto:joshua.chen@uni-bonn.de\">joshua.chen@uni-bonn.de</a>&gt;<br>\nThanks Thomas,</p>\n<p>I had indeed already tried what you suggest, using 'rule' <br>\nwith the 'OF' attribute to pick up assumptions along the <br>\nway (as 'drule' doesn't do what I need it to in this <br>\ncase).<br>\nThis unguided search through assumptions resulted in <br>\nunifier mismatches, hence my wondering if there was a way <br>\nto direct the method to use particular assumptions.</p>\n<p>In the end I wrapped up the problematic steps in the 'try' <br>\nmethod provided by Eisbach_Tools and now my method works <br>\nexactly as intended :)</p>\n<p>Best wishes,<br>\nJosh</p>",
        "id": 294737759,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661190404
    }
]