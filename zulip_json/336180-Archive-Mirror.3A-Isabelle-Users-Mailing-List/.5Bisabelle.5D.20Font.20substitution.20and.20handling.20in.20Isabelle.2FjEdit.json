[
    {
        "content": "<p>From: Rafal Kolanski &lt;<a href=\"mailto:xs@xaph.net\">xs@xaph.net</a>&gt;<br>\nAs you may know, the current font handling system in the Isabelle plugin<br>\ncompletely bypasses the one used in jEdit.<br>\nThe symptoms of this are:</p>\n<ul>\n<li>\n<p>Global Options -&gt; Text Area -&gt; \"Additional fonts with font<br>\n   substitution\" has no effect, confusing new users.</p>\n</li>\n<li>\n<p>Can't use Your Favorite Font™ and have missing glyphs fall<br>\n   back to the fonts you want.</p>\n</li>\n<li>\n<p>Isabelle symbols can configure the font used, but there's a global<br>\n   maximum of two user fonts (see user_font in token_markup.scala).</p>\n</li>\n<li>\n<p>jEdit splits chunks at <em>all</em> Isabelle symbols</p>\n</li>\n</ul>\n<p>jEdit's font substitution system works really well. I wanted<br>\nIsabelle users to be able to benefit from it and enjoy tweaking fonts to<br>\ntheir heart's content, so I performed the necessary modifications to<br>\nmake it work. The resulting code is simpler (though obviously Makarius<br>\nwill tune naming to be more canonical) and I believe more<br>\nunderstandable.</p>\n<p>I promised last week I'd deliver the change this week, and here it is.<br>\nI've also included some ad-hoc documentation on the situation and design<br>\nin the latter part of this email, hence its length. If you ever want to<br>\ntune the symbol/token/chunk system, this might be useful.</p>\n<p>If you want to try it out, two patches are attached (use git apply):</p>\n<ol>\n<li>\n<p>jEdit: 0003-Allow-specification-of-sizes-for-fallback-fonts.patch<br>\n   (see discussion at: <a href=\"https://sourceforge.net/p/jedit/patches/569/\">https://sourceforge.net/p/jedit/patches/569/</a> )</p>\n<p>This allows one to specify desired sizes for fallback fonts. The<br>\n reality is that font metrics between fonts don't agree. One font at<br>\n 12 pt is the same size as another at 16 pt.</p>\n<p>It also exposes queries on the font substitution system in Chunk.java<br>\n so that the plugin authors can use the information for their own<br>\n rendering.</p>\n<p>This patch on its own does <em>not</em> affect existing jEdit/Isabelle users<br>\n and is safe to apply.</p>\n<p>If you just want my version of jedit.jar, let me know.</p>\n</li>\n<li>\n<p>Isabelle plugin: 0001-Redo-Isabelle-plugin-chunk-rendering.patch<br>\n   (Isabelle 2015 version, but I can easily produce one that applies to<br>\n   current development branch)</p>\n<p>This removes the user_font setup in token_markup.scala and<br>\n modifies the paint_chunk_list code in rich_text_area.scala to match<br>\n the underlying chunk layout provided by jEdit even when font<br>\n substitution is enabled.</p>\n<p>This depends on the jEdit patch (1).</p>\n</li>\n</ol>\n<p>The Outcome</p>\n<p>You can now set up whatever font chain you want. For example mine is:<br>\nLucida Console 16 -&gt; Cambria Math 18 -&gt; DejaVu Sans 16 -&gt; IsabelleText<br>\n16 -&gt; search all system fonts.</p>\n<p>The setup is flexible enough that you can now use bizarre Unicode code<br>\npoints (yes, even those above 0xFFFF) in your notation (output) if you<br>\nhave the fonts to display it, e.g. I tested with:<br>\n    U+1F0A4 PLAYING CARD FOUR OF SPADES<br>\n    U+10147 GREEK ACROPHONIC ATTIC FIFTY THOUSAND</p>\n<p>The chunk rendering code in rich_text_area.scala is simpler and should<br>\nbe easier to understand.</p>\n<p>By not using the user_font workaround, we free up 19*2 extended style<br>\nIDs that we can use for whatever we like. My suggestion: we can now do<br>\n<em>two</em> levels of super/subscript.</p>\n<p>The \"font\" specification in etc/symbols now does nothing. Pick the<br>\nUnicode code point you want the symbol to display as and you're done.</p>\n<p>The Details (only read if you are interested or Makarius)</p>\n<p>jEdit's TextArea lays out chunks based on tokens it receives from the<br>\nrelevant parser. Consecutive tokens with the same ID are grouped into<br>\none chunk.  One chunk has a single style (font, text color, background<br>\ncolor) plus a layout of GlyphVectors. If no font substitution was done,<br>\nthe entire chunk is laid out as a single vector. Font substitution<br>\nsplits vectors when the chunk is laid out, but the chunk is not split.</p>\n<p>The Isabelle plugin provides a parser which lets jEdit parse and lay out<br>\nchunks. This results in inner syntax appearing as LITERAL1 (i.e. a<br>\nstring). Once this process is done, all chunks are laid out, have<br>\nspecified sizes and all font substitutions are done.</p>\n<p>That's not the end of the story though. Once processed by Isabelle, we<br>\nacquire extra information. For example a part of that LITERAL1 is<br>\nactually a free variable, so should get a different text color! This<br>\nneeds to be overlaid on the existing chunk somehow.</p>\n<p>The way the Isabelle plugin performs the overlay of text colors is by<br>\nturning off the existing TextArea chunk renderer and doing the rendering<br>\nitself (see rich_text_area.scala). However, it isn't dumb and does not<br>\nlay out the underlying chunks again. This means that the rendering must<br>\nmatch up with the underlying chunk layout <em>exactly</em> in order to have the<br>\nglyphs and cursor appear in the right place within the chunk.</p>\n<p>So if we want sub/superscript, we need to get jEdit to lay it out as<br>\nsub/superscript for us, or rendering our own ideas over it won't match<br>\nup!</p>\n<p>There is a patch to jEdit (src/Tools/jEdit/patches/extended_styles)<br>\nwhich extends the n jEdit styles available (about 19) to 127 (max in<br>\nJava byte). That way we can do:</p>\n<ul>\n<li>0..n-1     : jEdit</li>\n<li>n..2*n-1   : superscript</li>\n<li>2<em>n..3</em>n-1 : subscript</li>\n<li>3<em>n..4</em>n-1 : bold</li>\n<li>4<em>n..6</em>n-1 : user_font</li>\n<li>6*n        : invisible (e.g. \\&lt;^sub&gt; token itself)<br>\nWhen jEdit sees these, it lays them out according to the extended style<br>\nspecified. We set these up to match the n jEdit styles, but tweaked in<br>\nthe desired way (size, font, style, elevation, etc).</li>\n</ul>\n<p>The user_font setup handles Isabelle symbols, but it's not very flexible<br>\nand it unnecessarily splits chunks (e.g. \"sμn ⟶ mσσn\" lays out as 9<br>\nchunks instead of one).<br>\nThe renderer in Rich_Text_Area assumes one font per chunk, and user_font<br>\nonly handles Isabelle symbols and not general code points present in the<br>\ntext. The result is that with font substitution enabled in jEdit, using<br>\ncode points not in your main font (yes, even IsabelleText has these)<br>\nwill also result in glyph rendering misalignment.</p>\n<p>As Isabelle plugin developers we cannot reuse the internal glyph<br>\nvectors stored in the chunk for rendering our text colors, because if<br>\nall code points are present in your main font, then \"sμn ⟶ mσσn\" will<br>\nnot only be a single chunk, but also a single glyph vector. After it's<br>\nassembled, we can't get at which part means what.</p>\n<p>So what do we do instead?</p>\n<p>Create an AttributeString to contain all the rendering information for<br>\nthe chunk. AttributeStrings are great. They store all style information<br>\nwe need, but also font information.</p>\n<p>For each Isabelle text color in the chunk, mark that range in the<br>\nAttributeString with that color, defaulting to chunk's default text<br>\ncolor and font. Mark where the cursor is as inverted-color.</p>\n<p>Access the font lookup mechanism in Chunk.java (possible with the<br>\npatch).  If jEdit didn't do font substitution, we don't either.<br>\nOtherwise: go through the AttributeString looking for code points the<br>\nchunk's font can't display. Ask Chunk if there's a substitute font to<br>\nuse to display it. If there is, mark the range of the code point in the<br>\nAttributeString with that font.</p>\n<p>Render resulting AttributeString. Watch as it lines up perfectly with<br>\njEdit's layout regardless of what code points you dug out from the<br>\ndepths of Unicode.</p>\n<p>The end. It really is simpler, and I think a good change for Isabelle to<br>\nadopt.</p>\n<p>Makarius: I know you probably won't like CustomChunk, or at the very<br>\nleast its name. I just wanted to encapsulate the AttributeString<br>\noperations for simplicity and understandability. As always, if you're<br>\nnot happy with something and want me to change/redo, let me know. I want<br>\nto make useful contributions.</p>\n<p>Sincerely,</p>\n<p>Rafal Kolanski<br>\n<a href=\"/user_uploads/14278/QaXika7y-EyrQ1IJlpwSD1hx/0003-Allow-specification-of-sizes-for-fallback-fonts.patch\">0003-Allow-specification-of-sizes-for-fallback-fonts.patch</a><br>\n<a href=\"/user_uploads/14278/SVOxfJe8jS9P-Gowq__tBEuQ/0001-Redo-Isabelle-plugin-chunk-rendering.patch\">0001-Redo-Isabelle-plugin-chunk-rendering.patch</a></p>",
        "id": 294652659,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661166735
    },
    {
        "content": "<p>From: Rafal Kolanski &lt;<a href=\"mailto:xs@xaph.net\">xs@xaph.net</a>&gt;<br>\nThere is a small update to this. Because some fonts (e.g. IsabelleText)<br>\nare dynamically inserted at Isabelle plugin load into the graphics<br>\ncontext <em>after</em> jEdit has loaded all properties (\"settings\"), jEdit<br>\ndoesn't see them.</p>\n<p>Since the Isabelle plugin makes changes to existing contexts that affect<br>\nthe interpretation of jEdit properties, after some deliberation (and<br>\nabout a week of testing) I suggest the following solution.</p>\n<p>In src/Tools/jEdit/src/plugin.scala, at the end of the start() method,<br>\nwe inform jEdit that it should look at its properties again:</p>\n<p>diff --git a/src/Tools/jEdit/src/plugin.scala<br>\nb/src/Tools/jEdit/src/plugin.scala<br>\nindex ac081b1..31db703 100644<br>\n--- a/src/Tools/jEdit/src/plugin.scala<br>\n+++ b/src/Tools/jEdit/src/plugin.scala<br>\n@@ -405,6 +405,9 @@ class Plugin extends EBPlugin<br>\n         PIDE.startup_failure = Some(exn)<br>\n         PIDE.startup_notified = false<br>\n     }<br>\n+</p>\n<ul>\n<li>// new fonts loaded; references to them in config will now work</li>\n<li>jEdit.propertiesChanged()<br>\n   }</li>\n</ul>\n<p>Sorry for the noise. Getting this change right is important to me, and<br>\nfeedback is a bit scarce. Now that Makarius potentially has time to look<br>\nat this, I want to offer as much assistance as I can.</p>\n<p>Sincerely,</p>\n<p>Rafal Kolanski.</p>",
        "id": 294654789,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661167585
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nI have recently made various reforms in the isabelle.Main vs. jedit.jar <br>\ninitialization sequence, which is relevant for the coming winter release <br>\nof Isabelle2016.</p>\n<p>If there are remaining problems, we should continue the discussion on the <br>\nisabelle-dev mailing list.  The current point of reference is changeset <br>\nbe3a5fee11e3.</p>\n<p>Makarius</p>",
        "id": 294655973,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661168039
    }
]