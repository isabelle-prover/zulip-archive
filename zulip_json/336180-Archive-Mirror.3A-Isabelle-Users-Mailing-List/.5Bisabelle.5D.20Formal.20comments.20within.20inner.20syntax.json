[
    {
        "content": "<p>From: Andreas Lochbihler &lt;<a href=\"mailto:andreas.lochbihler@inf.ethz.ch\">andreas.lochbihler@inf.ethz.ch</a>&gt;<br>\nDear all,</p>\n<p>I wonder whether there is any way in Isabelle to include formal, checked comments within <br>\ninner syntax in Isabelle. In Haskell, for example, one frequently sees function signatures <br>\nof the following layout:</p>\n<p>myFun<br>\n   :: [a]       -- meaning of first parameter<br>\n   -&gt; Integer   -- meaning of second parameter<br>\n   -&gt; (a, [a])  -- description of results</p>\n<p>I find this format very convenient to document functions with a large number of <br>\nparameters. However, in Isabelle, I have not yet found a satisfactory solution. The <br>\nfollowing is already close to the above, however it relies on comments within inner <br>\nsyntax. Hence, the documentation is not formally checked and I cannot use antiquotations <br>\nand all the other conveniences from formal text blocks.</p>\n<p>definition my_fun<br>\n   :: \"'a list         (* meaning of first parameter *)<br>\n    =&gt; int             (* meaning of second parameter *)<br>\n    =&gt; ('a, 'a list)\"  (* description of results *)<br>\nwhere ...</p>\n<p>Can such comments be made such that they are checked formally? Or does any of you have <br>\nother convenient ways of documenting parameters and results of functions?</p>\n<p>Andreas</p>",
        "id": 294307577,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660924821
    },
    {
        "content": "<p>From: Florian Haftmann &lt;<a href=\"mailto:florian.haftmann@informatik.tu-muenchen.de\">florian.haftmann@informatik.tu-muenchen.de</a>&gt;<br>\nHi Andreas,</p>\n<p>a radical answer would be to allow inner syntax to contain arbitrary<br>\ntext cartouches ‹…› but I guess this would be a too massive change.</p>\n<p>Alternatively you could devise a suitable set of antiquoations, e.g.</p>\n<p>‹@{spec \"f xs k = ys\"} …<br>\n @{arg xs} …<br>\n @{arg k} …<br>\n @{arg ys} …<br>\n›</p>\n<p>The disadvantage is that these can only follow the specification an<br>\nquestion.  But it will still leave the freedom to skip the Isar<br>\nspecification totally and antiquote the specification theorems<br>\nexplicitly, e.g.</p>\n<p>‹@{spec \"f xs k = ys\"} …<br>\n @{arg xs} …<br>\n @{arg k} …<br>\n @{arg ys} …<br>\n @{thms f.simps}<br>\n›</p>\n<p>Hope this helps,<br>\n    Florian<br>\n<a href=\"/user_uploads/14278/ef258vwgjPBemgzVwyWnRyeU/signature.asc\">signature.asc</a></p>",
        "id": 294308128,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660924963
    },
    {
        "content": "<p>From: Andreas Lochbihler &lt;<a href=\"mailto:andreas.lochbihler@inf.ethz.ch\">andreas.lochbihler@inf.ethz.ch</a>&gt;<br>\nHi Florian,</p>\n<p>Your suggestion looks very much like JavaDoc comments. However, I am less interested in <br>\nformally checking that every parameter is documented rather than formally checking the <br>\ndocumentation. So your suggested approach provides only little over what is currently <br>\navailable without the antiquotations @{spec} and @{arg}. In particular, the problem of<br>\nlinking the parameter positions and types remains.</p>\n<p>Do you have any idea how one could escape from inner syntax to the language context <br>\n\"document\"?</p>\n<p>Andreas</p>",
        "id": 294308167,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660924975
    },
    {
        "content": "<p>From: Florian Haftmann &lt;<a href=\"mailto:florian.haftmann@informatik.tu-muenchen.de\">florian.haftmann@informatik.tu-muenchen.de</a>&gt;<br>\nWell, my idea was that additional checks behind the back ensure the<br>\n@{arg …}s appear in the right order and completely.</p>\n<p>Florian<br>\n<a href=\"/user_uploads/14278/jliPNAmPGbzVcRE4ZiyCs00D/signature.asc\">signature.asc</a></p>",
        "id": 294308203,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660924981
    },
    {
        "content": "<p>From: Andreas Lochbihler &lt;<a href=\"mailto:andreas.lochbihler@inf.ethz.ch\">andreas.lochbihler@inf.ethz.ch</a>&gt;<br>\nI see, this indeed ensures a correct link, the link is still not as visible as with the<br>\ninterleaved comments in Haskell.</p>\n<p>Andreas</p>",
        "id": 294308242,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660924993
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nInner syntax already allows cartouches, e.g. see the isar-ref manual about <br>\nouter and inner syntax, or more practically <br>\n$ISABELLE_HOME/src/HOL/ex/Cartouche_Examples.thy (which is just a <br>\nplayground of possibilities collected in chronological order over some <br>\nweeks).</p>\n<p>It remains to be seen where cartouches make most sense in actual use in <br>\nIsabelle/Pure and Isabelle/HOL. The full potential still needs to be <br>\nfathomed.</p>\n<p>For the concrete problem of inner text blocks, I reckon that it could be <br>\ndone, assuming that the document preparation system finally manages to <br>\nwarp forwards in time from 1999 to 2014. So many important reforms are <br>\nstill in the pipeline, such as proper support for nested markup and nested <br>\nformal languages for LaTeX rendering. With that available, the \"escape\" <br>\nfrom inner syntax to the document language would just be normal nesting of <br>\nlanguages with corresponding change of rendering.</p>\n<p>I have envisioned something like that many years ago, but it did not get <br>\nthrough the pipeline so far, due to the tight entanglement of the document <br>\npreparation system and its many sophisticated tricks. There is also a <br>\ncorrespondence to the \"too many modes\" problem of checking Isabelle <br>\ntheories in batch build mode, versus PIDE interaction mode, versus two <br>\nobsolete TTY modes.</p>\n<p>Makarius</p>",
        "id": 294308491,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660925048
    }
]