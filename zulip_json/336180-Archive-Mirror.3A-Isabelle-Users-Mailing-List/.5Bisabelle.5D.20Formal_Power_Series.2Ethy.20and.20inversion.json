[
    {
        "content": "<p>From: Raymond Rogers &lt;<a href=\"mailto:raymond.rogers72@gmail.com\">raymond.rogers72@gmail.com</a>&gt;<br>\nWhile working my way through GouldBk.pdf with FormaI_Power_Series.thy I <br>\nam at the Lagrange Inversion theorems and I am stuck.  At present the <br>\nproblem is with:</p>\n<p>fps_inv g  -- when g is delta, i.e. g=0 + a_1<em>X+a_2</em>X^2 ...<br>\nThis is defined as fps=0.0.0...</p>\n<p>Which I don't understand.  How is that justified?  That change is <br>\nreferred to in the 2016 news (more or less).  This seems to be a major <br>\nroadblock; alternate  interpretations are that the \"res\" function of <br>\nLaurent series are missing.<br>\nAmine Chaieb referred to a Formal Power Series structure that included <br>\nLaurent Series in 2009 talk,  but I can't seem to find the talk or any <br>\nreference in Isabelle .  Does anybody have a pointer?<br>\nI can implement Niven's Laurent extension in<br>\n<a href=\"https://www.maa.org/sites/default/files/pdf/upload_library/22/Ford/IvanNiven.pdf\">https://www.maa.org/sites/default/files/pdf/upload_library/22/Ford/IvanNiven.pdf</a><br>\nbut that would delay any interesting work even further (:<br>\nI tried another approach but the prematurely declaring zero and not <br>\nwaiting for cancellation possibilities has struck at me again.  The <br>\nwhole term does have a cancellation if the term is multiplied by X and <br>\nyields fps $0 =1; at least from an outside algebra point of view.<br>\nA particularly simple Lagrange rendering is at:<br>\n<a href=\"http://users.math.msu.edu/users/magyar/Math880/Lagrange.pdf\">http://users.math.msu.edu/users/magyar/Math880/Lagrange.pdf</a><br>\n(with a few typos).<br>\nOr I can try the Umbral calculus version but that also seems as hard as <br>\nNiven.</p>\n<p>Ray</p>",
        "id": 294708243,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661181321
    },
    {
        "content": "<p>From: Manuel Eberl &lt;<a href=\"mailto:eberlm@in.tum.de\">eberlm@in.tum.de</a>&gt;<br>\nHallo,</p>\n<p>On 16/03/17 23:27, Raymond Rogers wrote:</p>\n<blockquote>\n<p>fps_inv g  -- when g is delta, i.e. g=0 + a_1<em>X+a_2</em>X^2 ...<br>\nThis is defined as fps=0.0.0...</p>\n</blockquote>\n<p>What do you mean by ‘delta’? Are you confused by the fact that fps_inv<br>\nonly works when the 0th coefficient of the FPS is zero? If yes, that<br>\nalso confuses me (I know nothing about the Lagrange inversion theorem),<br>\nbut Wikipedia also does it that way [1], and the document you linked [2]<br>\nalso demands that the series have constant coefficient zero. (‘Let f(x),<br>\ng(x) ∈ xℂ〚x〛’)</p>\n<p>So perhaps that's just the way it is?</p>\n<blockquote>\n<p>That change is referred to in the 2016 news (more or less).</p>\n</blockquote>\n<p>I'm not sure what you mean. Do you mean this?</p>\n<ul>\n<li>Library/Formal_Power_Series: proper definition of division (with<br>\nremainder) for formal power series; instances for Euclidean Ring and<br>\nGCD.</li>\n</ul>\n<p>That has nothing to do with fps_inv. Or do you mean something else?</p>\n<blockquote>\n<p>This seems to be a major roadblock; alternate  interpretations are that the <br>\n\"res\" function of Laurent series are missing.</p>\n</blockquote>\n<p>Indeed we don't have Laurent series yet. We do have fraction fields,<br>\nwhich can be used to derive Laurent Series quite easily and I actually<br>\nalready did that once, but it was only a small toy theory with no real<br>\nuse, so I never uploaded it anywhere. (it has succumbed to bit rot in<br>\nthe mean time and will need some repair before it works again)</p>\n<p>In any case, I doubt it will be necessary for this. My feeling is that<br>\nLaurent series might make the presentation of the inversion theorem<br>\nnicer,  but that they are not really necessary.</p>\n<blockquote>\n<p>Amine Chaieb referred to a Formal Power Series structure that included<br>\nLaurent Series in 2009 talk,  but I can't seem to find the talk or any<br>\nreference in Isabelle.</p>\n</blockquote>\n<p>I don't know of anything like this. I'm pretty sure we have no Laurent<br>\nseries in Isabelle.</p>\n<p>The main problem right now is that I didn't understand at all what<br>\nresult you need and what you need it for.</p>\n<p>Cheers,</p>\n<p>Manuel</p>",
        "id": 294708256,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661181327
    },
    {
        "content": "<p>From: Manuel Eberl &lt;<a href=\"mailto:eberlm@in.tum.de\">eberlm@in.tum.de</a>&gt;<br>\nI forgot the links:</p>\n<p>[1] <a href=\"https://en.wikipedia.org/wiki/Lagrange_inversion_theorem\">https://en.wikipedia.org/wiki/Lagrange_inversion_theorem</a><br>\n[2] <a href=\"http://users.math.msu.edu/users/magyar/Math880/Lagrange.pdf\">http://users.math.msu.edu/users/magyar/Math880/Lagrange.pdf</a></p>",
        "id": 294708271,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661181333
    },
    {
        "content": "<p>From: Raymond Rogers &lt;<a href=\"mailto:raymond.rogers72@gmail.com\">raymond.rogers72@gmail.com</a>&gt;<br>\nThanks for the attention and reply!<br>\nSince the response is long and scattered, I have marked my replies by \"----\"</p>\n<p>On 03/17/2017 03:50 AM, Manuel Eberl wrote:</p>\n<blockquote>\n<p>Hallo,</p>\n<p>On 16/03/17 23:27, Raymond Rogers wrote:</p>\n<blockquote>\n<p>fps_inv g  -- when g is delta, i.e. g=0 + a_1<em>X+a_2</em>X^2 ...<br>\nThis is defined as fps=0.0.0...<br>\nWhat do you mean by ‘delta’? Are you confused by the fact that fps_inv<br>\nonly works when the 0th coefficient of the FPS is zero? If yes, that<br>\nalso confuses me (I know nothing about the Lagrange inversion theorem),<br>\nbut Wikipedia also does it that way [1], and the document you linked [2]<br>\nalso demands that the series have constant coefficient zero. (‘Let f(x),<br>\ng(x) ∈ xℂ〚x〛’)</p>\n</blockquote>\n<p>So perhaps that's just the way it is?</p>\n</blockquote>\n<hr>\n<p>\"delta\" is often used to designate series g=a_0 + a_1<em>X+a_2</em>X^2 ; where <br>\na_0=0 and a_1 !=0.<br>\nYes, but \"confusion\" isn't the right word; why do it?   If I am told <br>\nthat division by zero is illegal then doing it should error out.  If <br>\nthere is a reason that Formal...thy returns the absolute zero fps?  Can <br>\nI get a reference/reason/Axiom?  I am not even sure that decision is <br>\nconsistent; as evidenced by the fact that cancellations are not <br>\nconsidered first (maybe).  These concerns are only _motivated_ by <br>\nLagrange inversion, the real concern is consistency with normal mathematics.<br>\n  In fact it looks like a contradiction: take X*(fps_inv X).<br>\nIf I cancel first then I get =1<br>\nIf I evaluate (fps_inv X) first I get =0<br>\nHow can I trust a system where 0=1, depending upon order evaluation?  I <br>\nmentally tried alternate structures controlling order but  rapidly got <br>\nbogged down because of  the thought of things occurring deeper inside of <br>\nother uses/lemma, and having no underlying consistent guidelines.  I <br>\nlist two instances of complex reasoning/manipulation from GouldBk.pdf <br>\nbelow.  I can supply references to many... other papers using similar <br>\nconventions.  In addition the forms of the \"Lagrange Inversion\" are many <br>\nand varied; more like distant cousins of one another than close kin.</p>\n<blockquote>\n<blockquote>\n<p>That change is referred to in the 2016 news (more or less).<br>\nI'm not sure what you mean. Do you mean this?</p>\n</blockquote>\n<ul>\n<li>Library/Formal_Power_Series: proper definition of division (with<br>\nremainder) for formal power series; instances for Euclidean Ring and<br>\nGCD.</li>\n</ul>\n<p>That has nothing to do with fps_inv. Or do you mean something else?</p>\n</blockquote>\n<hr>\n<p>Yes and the following:<br>\n  Classes division_ring, field and linordered_field always demand<br>\n\"inverse 0 = 0\". Given up separate classes division_ring_inverse_zero,<br>\nfield_inverse_zero and linordered_field_inverse_zero. INCOMPATIBILITY.<br>\nEven if I accept the logic for rings and fields (which as of now I don't <br>\nreally see why I should)<br>\nwe have the fact that the fps theory is setting a _non_zero_ item to <br>\nzero during inversion.  Rephrasing: this is setting an additional <br>\nequivalence class operation in place.  I haven't seen this in my studies <br>\nand classes; but it's been some time and this particular case didn't get <br>\nmentioned as I recall.</p>\n<blockquote>\n<blockquote>\n<p>This seems to be a major roadblock; alternate  interpretations are that the<br>\n\"res\" function of Laurent series are missing.<br>\nIndeed we don't have Laurent series yet. We do have fraction fields,<br>\nwhich can be used to derive Laurent Series quite easily and I actually<br>\nalready did that once, but it was only a small toy theory with no real<br>\nuse, so I never uploaded it anywhere. (it has succumbed to bit rot in<br>\nthe mean time and will need some repair before it works again)</p>\n</blockquote>\n</blockquote>\n<hr>\n<p>Could you send me a copy?  Hints are appreciated since I am a newbie.  I <br>\npromise not to nitpick :)</p>\n<blockquote>\n<p>In any case, I doubt it will be necessary for this. My feeling is that<br>\nLaurent series might make the presentation of the inversion theorem<br>\nnicer,  but that they are not really necessary.</p>\n</blockquote>\n<hr>\n<p>Possibly, but when used in combinatorial analysis, like GouldBk.pdf, <br>\nthere is a strong dependency upon one or more of the various forms.  So <br>\nI am trying to prove the various forms are compatible with compositional <br>\ninverses; which is basically what Lagrange inversion is.  I can't <br>\nproduce compatibility unless I can cancel before inversion: per X*1/X .  <br>\nAt least so far.  I can try to replace X* with explicit shifts though.  (?)</p>\n<blockquote>\n<blockquote>\n<p>Amine Chaieb referred to a Formal Power Series structure that included<br>\nLaurent Series in 2009 talk,  but I can't seem to find the talk or any<br>\nreference in Isabelle.<br>\nI don't know of anything like this. I'm pretty sure we have no Laurent<br>\nseries in Isabelle.</p>\n</blockquote>\n</blockquote>\n<hr>\n<p>Her article is behind a paywall I can't afford:<br>\n<a href=\"https://link.springer.com/article/10.1007/s10817-010-9195-9\">https://link.springer.com/article/10.1007/s10817-010-9195-9</a><br>\nand her \"talk\" is like all talk; blowing in the wind never to be seen again.<br>\n<a href=\"http://talks.cam.ac.uk/talk/index/16357\">http://talks.cam.ac.uk/talk/index/16357</a></p>\n<blockquote>\n<p>The main problem right now is that I didn't understand at all what<br>\nresult you need and what you need it for.</p>\n</blockquote>\n<hr>\n<p>Like I mentioned above: the various structural forms of the Lagrange <br>\nInversion are directly relied on for Combinatorial, Umbral, and Method <br>\nCoefficients analysis.  So it behooves me to make sure they are <br>\nconsistent with any proof method I use.<br>\nFor instance the items:<br>\n(T+) Bizley<br>\nRiordan Arrays<br>\nin GouldBk.pdf</p>\n<blockquote>\n<p>Cheers,</p>\n<p>Manuel</p>\n</blockquote>\n<hr>\n<p>Thanks again for the reply.<br>\nRay</p>",
        "id": 294708338,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661181354
    },
    {
        "content": "<p>From: Manuel Eberl &lt;<a href=\"mailto:eberlm@in.tum.de\">eberlm@in.tum.de</a>&gt;<br>\nFirst of all: There are no non-total functions in HOL. If you take the <br>\nfirst element of the empty list, if you divide by zero, if you evaluate <br>\n0^0, you always get /some/ result; there is just no other way in that <br>\nlogic. The question is: What result do you get?</p>\n<p>One approach is to leave it unspecified (e.g. using HOL's \"undefined\" or <br>\nsomething like that), then you simply don't know or care (logically) <br>\nwhat that element is. But it still /is/ an element (i.e. 1/0 is a real <br>\nnumber, you just don't know which number), and it's always the same <br>\nnumber, so e.g. \"1/0 - 1/0 = 0\" holds.</p>\n<p>In my experience, it is usually a lot less painful to adopt conventions <br>\nlike \"x / 0 = 0 for all x\". This diverges from mathematical convention, <br>\nbut as I said, you simply cannot have ‘completely undefined’ expressions <br>\nin HOL, and if you must return some value, you might as well choose a <br>\nconvenient one. Choosing \"x / 0 = 0\" has the advantage that a number of <br>\nnice properties of division still hold without additional conditions, <br>\nwhich makes rewriting arithmetic terms less painful. Of course, as an <br>\nIsabelle user, you have to /know/ what this means.</p>\n<p>A similar issue is the sum over an infinite set, which is always 0 in <br>\nIsabelle. One may naïvely expect that \"(∑n∈{1..}. 1/n^2) = π²/6\", but it <br>\nis in fact zero by definition, and if one wants an actual infinite sum, <br>\none has to use another concept of \"sum\", e.g. \"suminf\"/\"sums\" or the <br>\nmeasure-theoretic one.</p>\n<p>Therefore, the justification of choosing fps_inv as 0 for inputs that <br>\ndon't have an inverse is simply that it you can't return a \"proper\" <br>\nresult, so you might as well return a \"convenient\" dummy result.</p>\n<p>Second, I think you may be confused by what fps_inv actually is. fps_inv <br>\nis the /compositional/ inverse of formal power series. Therefore, <br>\ncancelling \"X * fps_inv X\" to \"1\" makes no sense to me at all. In fact, <br>\n\"fps_inv X = X\", and \"X\" plugged into \"X\" yields \"X\", which is the <br>\ncompositional identity, as expected.</p>\n<p>Perhaps you mean the /multiplicative/ inverse? This is simply \"inverse <br>\nX\", which is defined like this:</p>\n<p>fun natfun_inverse:: \"'a fps ⇒ nat ⇒ 'a\"<br>\nwhere<br>\n   \"natfun_inverse f 0 = inverse (f$0)\"<br>\n| \"natfun_inverse f n = - inverse (f$0) * sum (λi. f$i * natfun_inverse <br>\nf (n - i)) {1..n}\"</p>\n<p>definition fps_inverse_def: \"inverse f = (if f $ 0 = 0 then 0 else <br>\nAbs_fps (natfun_inverse f))\"</p>\n<p>Thus, \"inverse X\" is indeed 0 in Isabelle. This is because X simply does <br>\nnot have an inverse in the ring of formal power series and we have to <br>\nreturn something.</p>\n<blockquote>\n<p>take X*(fps_inv X).<br>\nIf I cancel first then I get =1<br>\nIf I evaluate (fps_inv X) first I get =0 <br>\nOkay, so you probably again mean \"X * inverse X\" here. You are correct <br>\nthat you can evaluate \"inverse X\" to \"0\", and then you get \"X * 0 = 0\". <br>\nHowever, you can /not/ cancel \"X * inverse X\" to get \"1\". The law \"f * <br>\ninverse f = 1\" only holds if \"f $ 0 ≠ 0\", as you can see in this theorem:</p>\n</blockquote>\n<p>lemma inverse_mult_eq_1':<br>\n   assumes f0: \"f$0 ≠ (0::'a::field)\"<br>\n   shows \"f * inverse f = 1\"</p>\n<p>You can't do any better than this if you want to stay in the type \"'a <br>\nfps\". If you want multiplicative inverses for all non-zero formal power <br>\nseries, you have to go to the ring of formal Laurent series, do your <br>\nstuff there, and then go back to the ring of formal power series once <br>\nyou're done. This is perhaps a bit odd for a mathematician, but I'm <br>\nafraid that's how things are in a typed logic like HOL.</p>\n<p>However, note that you can write things like \"X^2 / X\" in the ring of <br>\nformal power series (as long as the coefficients are a field), which <br>\nevaluates to \"X\" as expected. For \"'a :: field fps\", a power series <br>\ndivides another iff the subdegree of the former is smaller than that of <br>\nthe latter, and we have a full Euclidean ring structure on FPSs, i.e. we <br>\nhave well-behaved division and remainder operations \"div\" and \"mod\" just <br>\nlike on integers or polynomials. I think this is probably enough and <br>\nprobably less painful than going to formal Laurent series.</p>\n<p>Note that, due to somewhat unfortunate notation, \"f / g\" on formal power <br>\nseries is not the same as \"f * inverse g\". It is the same if g is a <br>\nunit, but otherwise, \"f / g\" is essentially what you get when you <br>\ncompute \"f / g\" in the ring of formal Laurent series and then cut off <br>\nall the terms with negative exponents, and \"f mod g\" is the remainder, <br>\ni.e. \"f - (f / g) * g\".</p>\n<p>If you only want to divide by powers of X, you can also use fps_shift.</p>\n<blockquote>\n<p>How can I trust a system where 0=1, depending upon order evaluation?<br>\nWell, you can't. Luckily, Isabelle is (hopefully) not such a system. It <br>\nis a core principle of Isabelle that definitions should never be able to <br>\nintroduce inconsistencies.</p>\n</blockquote>\n<blockquote>\n<p>Could you send me a copy?<br>\nIt's currently broken in ways that I don't understand, but I'll attempt <br>\nto fix it and then I can send it to you. I'm not sure if it will be very <br>\nhelpful; it was never more than a small experiment.</p>\n</blockquote>\n<blockquote>\n<p>Her article is behind a paywall I can't afford:<br>\n<a href=\"https://link.springer.com/article/10.1007/s10817-010-9195-9\">https://link.springer.com/article/10.1007/s10817-010-9195-9</a><br>\nI know Amine's article and it really doesn't say very much about Laurent <br>\nseries. It essentially describes that one can define them as \"'a fps <br>\nfract\" in the way I did in my experiment and nothing more. I don't think <br>\nAmine ever actually had the time to build a library of facts about <br>\nLaurent series.</p>\n</blockquote>\n<p>Cheers,</p>\n<p>Manuel</p>",
        "id": 294708349,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661181358
    },
    {
        "content": "<p>From: Raymond Rogers &lt;<a href=\"mailto:raymond.rogers72@gmail.com\">raymond.rogers72@gmail.com</a>&gt;<br>\n1)Thanks, I am trying some things, like perhaps defining a finite fps <br>\ntype and copying in polynomial gcd.  Although fps_gcd might cover some <br>\nthings.<br>\n2) \"<br>\nSecond, I think you may be confused by what fps_inv actually is. fps_inv <br>\nis the /compositional/ inverse of formal power series. Therefore, <br>\ncancelling \"X * fps_inv X\" to \"1\" makes no sense to me at all. In fact, <br>\n\"fps_inv X = X\", and \"X\" plugged into \"X\" yields \"X\", which is the <br>\ncompositional identity, as expected.<br>\n\"<br>\nDuh... really, really ... my bad.<br>\nI have been doing that occasionally and really should have paid more <br>\nattention.  I did know better.<br>\n3) Shifts do seem to work on some Lagrange Inversion expressions. <br>\nAlthough I haven't tried it in the proofs yet.  Just as a replacement <br>\nfor division &amp; cancellation or vice-versa.</p>\n<p>Thanks for the help!</p>\n<p>Ray</p>",
        "id": 294708421,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661181366
    },
    {
        "content": "<p>From: Manuel Eberl &lt;<a href=\"mailto:eberlm@in.tum.de\">eberlm@in.tum.de</a>&gt;<br>\nWe do have a \"finite fps\" type; it is called \"poly\", and the connection<br>\nbetween polynomials and formal power series is made in<br>\n\"~~/src/HOL/Library/Polynomial_FPS.thy\"</p>\n<p>I also still have a formalisation of executable rational formal power<br>\nseries lying around here; I really should clean up and commit this stuff<br>\nsoon.</p>\n<p>Cheers,</p>\n<p>Manuel</p>",
        "id": 294708428,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661181370
    },
    {
        "content": "<p>From: Raymond Rogers &lt;<a href=\"mailto:raymond.rogers72@gmail.com\">raymond.rogers72@gmail.com</a>&gt;<br>\nSo it would seem that res(f/g) i.e. (f/g) $ -1<br>\nwould be ((X*f)/g) $ 0<br>\n?<br>\nI'll run some tests.<br>\nRay</p>",
        "id": 294708460,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661181382
    },
    {
        "content": "<p>From: Raymond Rogers &lt;<a href=\"mailto:raymond.rogers72@gmail.com\">raymond.rogers72@gmail.com</a>&gt;<br>\nAnd we have a measure of success!</p>\n<p>lemma Ias_Lag_880_ii:<br>\nfixes f g::\"real fps\"<br>\nassumes \"f$0 \\&lt;noteq&gt;0\"<br>\nassumes \"g = X*f\"<br>\nshows \"((( (fps_deriv  g)*X)/g)$ 0)  = 1\"<br>\nusing assms(1) assms(2) by auto</p>\n<p>and --shows \"((( (fps_deriv  g)*X)/g)$ 0)  = 0<br>\nfails!</p>\n<p>Forgive any inelegance in my syntax.<br>\nNow all we need is to rearrange the above as a function:<br>\nfps-&gt;fps-&gt;element of field<br>\nres f g -&gt;(X*f)/g %0</p>\n<p>This seems to match the requirements of most combinatorial theorems; <br>\nalthough it _looks_ like we could generalize a little.</p>\n<p>A bit happier!<br>\nRay</p>",
        "id": 294708504,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661181394
    }
]