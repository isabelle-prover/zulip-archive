[
    {
        "content": "<p>From: Andreas Lochbihler &lt;<a href=\"mailto:andreas.lochbihler@kit.edu\">andreas.lochbihler@kit.edu</a>&gt;<br>\nDear all,</p>\n<p>there is a growing number of formalisations of infinite streams in the Archive <br>\nof Formal Proofs. I am aware of the following, but I guess there might be even <br>\nmore hidden in other entries:</p>\n<ol>\n<li>\n<p>David Trachtenherz' entry Infinite Lists develops a stream view on the type <br>\n\"nat =&gt; 'a\". It tries to reuse as many standard operations on functions as <br>\npossible for the list operations. For example, <a href=\"http://List.map\">List.map</a> corresponds to \"op o\", <br>\nList.set to range. Additionally, he defines the sum type of finite and infinite <br>\nlists called generalised lists.</p>\n</li>\n<li>\n<p>Stefan Friedrich's entry Lazy List II develops finite and infinite lists over <br>\na given alphabet based on coinductive lists from the entry Coinductive.</p>\n</li>\n<li>\n<p>Peter Gammie recently defined coinductive streams as a codatatype which I <br>\nhave now added to Coinductive in the development AFP. Support for operations on <br>\nstreams is still quite limited.</p>\n</li>\n<li>\n<p>Stephan Merz' entry Stuttering Equivalence models infinite strings as <br>\nfunctions \"nat =&gt; 'a\" and defines a suffix operation.</p>\n</li>\n</ol>\n<p>Since there is considerable redundancy, I wonder whether and how we should unify <br>\nthese developments. Some questions are:</p>\n<ul>\n<li>\n<p>Should we have a type of its own ('a stream) or operations on functions (nat <br>\n=&gt; 'a) or both versions?</p>\n</li>\n<li>\n<p>Should we do equality proofs by coinduction or induction on all indices?</p>\n</li>\n<li>\n<p>Should we provide any of these versions as part of the Isabelle library such <br>\nthat there is an \"official\" version to be used in future developments?</p>\n</li>\n<li>\n<p>Should/can we rework the existing formalisations to use the new one?</p>\n</li>\n<li>If yes: Can we somehow estimate the required effort?</li>\n</ul>\n<p>I'll be happy to help in consolidating all this. However, at the moment, I <br>\ncannot estimate at the moment how much of the AFP and the theories in the wild <br>\ndepend on these formalisations.</p>\n<p>Any opinions?</p>\n<p>Andreas</p>",
        "id": 294163747,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660854211
    },
    {
        "content": "<p>From: Serguei Mokhov &lt;<a href=\"mailto:serguei@gmail.com\">serguei@gmail.com</a>&gt;<br>\nI wholeheartedly support the idea of infinite stream unification and<br>\nthe ideas of the stream type and its potential eventual inclusion into<br>\nthe \"official\" Isabelle distribution. It of course makes sense then to<br>\nadapt the existing AFP formalizations to use the unified type (and<br>\noperators). I support this is because I am working on formalization of<br>\nmy Forensic Lucid language, which is based on Lucid where the<br>\nvariables are in general infinite multidimensional streams. I will be<br>\non the lookout of any developments, and contribute if time permits as<br>\nwell.</p>\n<p>(I however have no idea at the moment on the effort required for the<br>\nabove proposal.)</p>\n<p>-s</p>",
        "id": 294163813,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660854231
    },
    {
        "content": "<p>From: Lukas Bulwahn &lt;<a href=\"mailto:bulwahn@in.tum.de\">bulwahn@in.tum.de</a>&gt;<br>\nHi Andreas,</p>\n<p>some thoughts here from Munich:</p>\n<ul>\n<li>\n<p>Having dedicated type \"'a stream\" for functions (nat =&gt; 'a) has <br>\nsimilar benefits and drawbacks as the set/'a =&gt; bool distinction.  Alex <br>\nKrauss sent a nice summary (Summary: WHY have 'a set back?) on <br>\nisabelle-dev about a year ago. Creating a new type has been recently <br>\nsimplified by the lift_definition command and transfer method.</p>\n</li>\n<li>\n<p>Dmitriy Traytel and Andrej Popescu are developing a codatatype <br>\npackage, which might be useful for your work. (The package will be done <br>\nin \"two weeks\".)</p>\n</li>\n</ul>\n<p>Lukas</p>",
        "id": 294163889,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660854250
    },
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\nI strongly believe that different coinductive formalizations should be unified,<br>\nif that's what they need. As much of it as possible should be in one place, and<br>\nthe AFP is the right place for larger libraries. We could mark some entries as<br>\n\"subsumed by ...\" afterwards.</p>\n<p>I would not try and unify the two models (coinductive and  nat =&gt; 'a),  they<br>\nhave their own advantages and disadvantages. Nor would I unify different entries<br>\nusing the nat =&gt; 'a model: that should be driven by some application, rather<br>\nthan proactively.</p>\n<p>Tobias</p>",
        "id": 294163900,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660854253
    },
    {
        "content": "<p>From: Peter Gammie &lt;<a href=\"mailto:peteg42@gmail.com\">peteg42@gmail.com</a>&gt;<br>\nJust to clarify: I found myself in need of a plausible coinductive stream type and adapted the LList formulation in the Coinductive development in the AFP.</p>\n<p>Concretely I could have gotten away with nat =&gt; 'a, but hoped the coinductive formulation would be more convincing to people versed in type theory.</p>\n<p>cheers<br>\npeter</p>",
        "id": 294163918,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660854261
    }
]