[
    {
        "content": "<p>From: Joachim Breitner &lt;<a href=\"mailto:mail@joachim-breitner.de\">mail@joachim-breitner.de</a>&gt;<br>\nHi,</p>\n<p>I’m quite new to Isabelle and trying to get an overview of the<br>\nmathematics already formalized. I found some basic group theory in the<br>\nHOL/Algebra directory, but it seems to be relatively basic. It contains<br>\nabstract definitions, but I’m missing some more concrete groups,<br>\nespecially the Free Group over a finite set of generators, matrix groups<br>\nsuch as GL_r(ℤ) and permutation groups.</p>\n<p>Am I not looking in the right places? And if such theories really do not<br>\nexist, is there some principal problem in implementing them, or is it<br>\nsomething that just has not been done yet, but should not be<br>\nparticularly hard?</p>\n<p>Thanks,<br>\nJoachim<br>\n<a href=\"/user_uploads/14278/vB33xbVNWfDYHMrMc6dZGmLM/signature.asc\">signature.asc</a></p>",
        "id": 294107455,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660835693
    },
    {
        "content": "<p>From: Brian Huffman &lt;<a href=\"mailto:brianh@cs.pdx.edu\">brianh@cs.pdx.edu</a>&gt;<br>\nHi Joachim,</p>\n<p>Indeed, the Isabelle libraries contain a lot of more concrete<br>\nmathematical constructions, but they are spread over several different<br>\nplaces, and generally nobody has connected them up with HOL/Algebra to<br>\nshow that they are instances of the more abstract notions.</p>\n<p>Often these kind of constructions are formalized as type constructors.<br>\nFor example, HOL/Matrix defines a type \"'a matrix\" of matrices with<br>\nelements of type 'a (it includes matrices of any finite size). You<br>\ncould define GL_r(Z) as a subset of this type like this:</p>\n<p>definition GL :: \"nat =&gt; int matrix set\"<br>\nwhere \"GL n = {A::int matrix. nrows A = n &amp; ncols A = n &amp; (EX B.<br>\ninverse_matrix A B)}\"</p>\n<p>Then it would be straightforward to show that this set, together with<br>\n\"op *\" on type \"int matrix\", forms a group according to the<br>\ndefinitions defined in HOL/Algebra.</p>\n<p>Some other constructions implemented as type constructors:<br>\nLibrary/Polynomial.thy defines the ring of univariate polynomials with<br>\ncoefficients from type 'a as the type \"'a poly\". On the AFP<br>\n(<a href=\"http://afp.sourceforge.net\">afp.sourceforge.net</a>) you will find a formalization of the Free<br>\nBoolean Algebra with generators from type 'a as the type \"'a formula\".<br>\nThere is also a function \"formulas :: 'a set =&gt; 'a formula set\" which<br>\ncan be used to reason about sub-algebras.</p>\n<p>Also, the Isabelle library contains a very nice formalization of the<br>\nFree Monoid with generators from type 'a -- it can be found in<br>\nList.thy :) It also contains a function \"lists :: 'a set =&gt; 'a list<br>\nset\" that gives the lists generated by some subset of generators.<br>\nSimilarly, a construction of the Free Commutative Monoid can be found<br>\nin Library/Multiset.thy, as type \"'a multiset\".</p>\n<p>As far as I know, nobody has formalized Free Groups. I wouldn't expect<br>\nit to be difficult, but probably nobody has really needed them for<br>\nanything yet. You could define a type constructor for the free group<br>\nwith generators over type 'a as a subset of type \"(bool * 'a) list\",<br>\nwhere you would have a function \"normalize :: (bool * 'a) list =&gt;<br>\n(bool * 'a) list\" that removes adjacent copies of the same element<br>\nwith opposite signs.</p>\n<p>typedef 'a free_group = \"{x :: (bool * 'a) list. normalize x = x}\"</p>\n<p>Then you could define a function analogous to \"lists\" with type \"'a<br>\nset =&gt; 'a free_group set\" that would pick out the values generated by<br>\nsome smaller set. This would probably make a nice AFP entry, if you<br>\nwanted to formalize it.</p>\n<p>As for permutations: There is a library Permutations.thy that<br>\nformalizes the set of permutations over a given set. (Currently it is<br>\nlocated in HOL/Multivariate_Analysis, since it is used by other<br>\ntheories there; but in the next release of Isabelle it will be located<br>\nin HOL/Library.)</p>\n<p>There are probably other examples that I can't think of right now.<br>\nHave fun exploring the Isabelle libraries!</p>\n<ul>\n<li>Brian</li>\n</ul>",
        "id": 294107476,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660835700
    },
    {
        "content": "<p>From: Joachim Breitner &lt;<a href=\"mailto:mail@joachim-breitner.de\">mail@joachim-breitner.de</a>&gt;<br>\nHi Brian,</p>\n<p>thanks for your reply.</p>\n<p>I’m tempted to do so, once I’m more familiar with Isar syntax. After<br>\ndoing more research, I also found <a href=\"http://isarmathlib.org/\">http://isarmathlib.org/</a></p>\n<p>This poses a new question: What foundation should I use? As a<br>\nmathematician, I’d first say that set theory is the correct base to<br>\nformalize pure math on – but does it really matter? Will I have problems<br>\nconvincing other mathematician to trust a formalized proof on Higher<br>\nLogic?</p>\n<p>Are the provable theorems within, say, pure algebra the same in either<br>\nsystems, just with different proofs? If so, is this fact proven? Or is<br>\nit indeed necessary to prove results in either system?</p>\n<p>Does the AFP also accept Isabelle/ZF submissions?</p>\n<p>As a side note: One of my hopes when getting interested in theorem<br>\nprovers and proof checkers was that I’d get a tool that can also<br>\ninvestigate proof. For example, tell me whether a certain proof uses the<br>\naxiom of choice or not. It seems that the Metamath system allows for<br>\nthat, but is otherwise very laborious to use. To pick up the recent<br>\ndiscussion about proof certificates and stability: Has there been done<br>\nwork or thought in the direction of exporting Isabelle proof objects<br>\ninto Metamath proofs? It seems to me that this would provide for<br>\ninspectable and stable proofs, while exploiting the power of Isabelle<br>\nand ease of Isar.</p>\n<p>Greetings,<br>\nJoachim<br>\n<a href=\"/user_uploads/14278/xYd0RwXI222Xqpi6wgT_2pqR/signature.asc\">signature.asc</a></p>",
        "id": 294107578,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660835730
    },
    {
        "content": "<p>From: Brian Huffman &lt;<a href=\"mailto:brianh@cs.pdx.edu\">brianh@cs.pdx.edu</a>&gt;<br>\nOn Mon, May 10, 2010 at 2:34 AM, Joachim Breitner<br>\n&lt;<a href=\"mailto:mail@joachim-breitner.de\">mail@joachim-breitner.de</a>&gt; wrote:</p>\n<blockquote>\n<p>This poses a new question: What foundation should I use? As a<br>\nmathematician, I’d first say that set theory is the correct base to<br>\nformalize pure math on – but does it really matter? Will I have problems<br>\nconvincing other mathematician to trust a formalized proof on Higher<br>\nLogic?</p>\n<p>Are the provable theorems within, say, pure algebra the same in either<br>\nsystems, just with different proofs? If so, is this fact proven? Or is<br>\nit indeed necessary to prove results in either system?</p>\n</blockquote>\n<p>There should be no problem for mathematicians to trust Higher Order<br>\nLogic, since there is a straightforward model of HOL in set theory. In<br>\nfact, Alexander Krauss and Andreas Schropp have an upcoming paper<br>\nwhere they describe an automatic translation from Isabelle/HOL to<br>\nIsabelle/ZF:</p>\n<p><a href=\"http://www4.in.tum.de/~krauss/holzf/\">http://www4.in.tum.de/~krauss/holzf/</a></p>\n<p>On the other hand, there is no model of ZF in HOL (unless you add a<br>\nbunch of new axioms to HOL) so there is no translation the other way.<br>\nIn particular, many constructions in set theory using the axiom of<br>\nreplacement are impossible to represent in HOL (the cardinalities just<br>\nget too big).</p>\n<p>In practice, using HOL is usually nicer than using ZF, since the<br>\nautomation is better (automatic type checking/type inference, for<br>\nexample). And in Isabelle, the libraries and tools are much more well<br>\ndeveloped in Isabelle/HOL compared to Isabelle/ZF.</p>\n<blockquote>\n<p>Does the AFP also accept Isabelle/ZF submissions?</p>\n</blockquote>\n<p>There aren't any Isabelle/ZF submissions yet, but I'm sure they would<br>\nbe welcome.</p>\n<ul>\n<li>Brian</li>\n</ul>",
        "id": 294107648,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660835751
    },
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;</p>\n<blockquote>\n<p>Does the AFP also accept Isabelle/ZF submissions?</p>\n</blockquote>\n<p>Yes, it does.</p>\n<p>Tobias</p>",
        "id": 294107657,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660835754
    },
    {
        "content": "<p>From: Timothy McKenzie &lt;<a href=\"mailto:tjm1983@gmail.com\">tjm1983@gmail.com</a>&gt;<br>\nI have a related question.  Looking at src/HOL/Algebra/Group.thy, <br>\nI see that (for example) the definition of the monoid locale has <br>\n\"fixes G (structure)\".  Looking in the documentation, <br>\n\"(structure)\" is mentioned only twice in doc/isar-ref.pdf (as far <br>\nas I can see), and I haven't found it in the other documentation I <br>\nlooked in.  What does it mean?  How would I go about instantiating <br>\nsuch a locale?</p>\n<p>Tim<br>\n&lt;&gt;&lt;<br>\n<a href=\"/user_uploads/14278/EbKNYnd7oUFY3bKVmPhnne0Q/signature.asc\">signature.asc</a></p>",
        "id": 294107784,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660835785
    },
    {
        "content": "<p>From: Florian Haftmann &lt;<a href=\"mailto:florian.haftmann@informatik.tu-muenchen.de\">florian.haftmann@informatik.tu-muenchen.de</a>&gt;<br>\nHi Timothy,</p>\n<p>(structure) is an (outdated) syntax feature.  As far as I understand it<br>\nhas no relevance for locale interpretation.</p>\n<p>Hope this helps,<br>\n    Florian<br>\n<a href=\"/user_uploads/14278/J04wg3f6yM_9tPc_Wvch-rjj/signature.asc\">signature.asc</a></p>",
        "id": 294108151,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660835897
    },
    {
        "content": "<p>From: Timothy McKenzie &lt;<a href=\"mailto:tjm1983@gmail.com\">tjm1983@gmail.com</a>&gt;<br>\nHi,</p>\n<p>Thanks for your reply.  It took me a while to figure out that I <br>\nneeded to use \\&lt;^bsub&gt;...\\&lt;^esub&gt; in a group interpretation.  For <br>\nexample, an interpretation of the integers under addition as a <br>\ngroup might begin:</p>\n<p>interpretation group \"(|carrier = UNIV, mult = op +, one = <br>\n0::int|)\"<br>\nproof<br>\n  let ?Z = \"(|carrier = UNIV, mult = op +, one = 0::int|)\"<br>\n  fix x y<br>\n  show \"x ⊗\\&lt;^bsub&gt;?Z\\&lt;^esub&gt; y ∈ carrier ?Z\" by simp</p>\n<p>Timothy<br>\n&lt;&gt;&lt;<br>\n<a href=\"/user_uploads/14278/3Fgz6fb_Z-CiOBVQfKYBEmFP/signature.asc\">signature.asc</a></p>",
        "id": 294108183,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660835908
    }
]