[
    {
        "content": "<p>From: li yongjian &lt;<a href=\"mailto:lyj238@gmail.com\">lyj238@gmail.com</a>&gt;<br>\nDear Isabelle experts:<br>\n   Boyer text matching algorithm  is a widely-used. See<br>\n<a href=\"http://en.wikipedia.org/wiki/Boyer%E2%80%93Moore_string_search_algorithm\">http://en.wikipedia.org/wiki/Boyer%E2%80%93Moore_string_search_algorithm</a>.<br>\n   Do anyone have tried to prove its correctness by theorem proving.<br>\n   Or do some similar work?</p>\n<p>If there is no such work, can someone point the hints of using some<br>\navailable theories to prove it?</p>\n<p>Thanks in advance?<br>\nregards!</p>\n<p>best?</p>",
        "id": 294247466,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660909452
    },
    {
        "content": "<p>From: Jasmin Blanchette &lt;<a href=\"mailto:jasmin.blanchette@gmail.com\">jasmin.blanchette@gmail.com</a>&gt;<br>\nDear Yongjian,</p>\n<p>The Moore in Boyer-Moore did a proof in ACL2:</p>\n<p><a href=\"http://www.cs.utexas.edu/~moore/publications/moore-martinez-09.pdf\">http://www.cs.utexas.edu/~moore/publications/moore-martinez-09.pdf</a></p>\n<p>This might very well be the only formal correctness proof of this algorithm.</p>\n<p>Regards,</p>\n<p>Jasmin</p>",
        "id": 294247476,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660909459
    },
    {
        "content": "<p>From: li yongjian &lt;<a href=\"mailto:lyj238@gmail.com\">lyj238@gmail.com</a>&gt;<br>\nHi, Jasmin Blanchette:<br>\n   thanks.<br>\n  I have a further question.<br>\n  If I hace a C code for Boyer text matching algorithm, can I use the<br>\nC-based proof theory such as<br>\nSimpl to prove the c-code's correctness?</p>\n<p>lyj</p>",
        "id": 294247502,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660909471
    },
    {
        "content": "<p>From: Jasmin Blanchette &lt;<a href=\"mailto:jasmin.blanchette@gmail.com\">jasmin.blanchette@gmail.com</a>&gt;<br>\nDear Yongjian,</p>\n<p>Gerwin Klein's group at NICTA have developed a tool that integrates C with Simpl [1]. Perhaps that's what you are referring to by \"C-based proof theory such as Simpl\". It should indeed be possible to verify the C code of Boyer-Moore that way. Perhaps those who know the tool better can comment further on its use.</p>\n<p>Regards,</p>\n<p>Jasmin</p>\n<p>[1] <a href=\"http://ssrg.nicta.com.au/software/TS/c-parser/\">http://ssrg.nicta.com.au/software/TS/c-parser/</a></p>",
        "id": 294247519,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660909480
    },
    {
        "content": "<p>From: Lars Noschinski &lt;<a href=\"mailto:noschinl@in.tum.de\">noschinl@in.tum.de</a>&gt;<br>\nThere is also David Greenaway's autocorres tool[1], which is based on <br>\ntop of said tool. It abstracts a bit more from the raw transformation <br>\ndone by the C parser (and I think there is new release coming soon).</p>\n<p>Be warned that the verification of C code is a lot more work than <br>\nverifying an abstract implementation. When verifying some graph-related <br>\nalgorithm written in C with the help of autocorres, I found it very <br>\nhelpful to refine the program to something more abstract (and wrote a <br>\nlot of rules to facilitate this)</p>\n<p>[1] <a href=\"http://ssrg.nicta.com.au/projects/TS/autocorres/\">http://ssrg.nicta.com.au/projects/TS/autocorres/</a></p>\n<p>-- Lars</p>",
        "id": 294247614,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660909520
    }
]