[
    {
        "content": "<p>From: \"W. Douglas Maurer\" &lt;<a href=\"mailto:maurer@gwu.edu\">maurer@gwu.edu</a>&gt;<br>\nI am having problems with forward proofs by induction. I would like <br>\nfor Isar to be able to prove that 1+4+9+...+n<em>n = (n</em>(n+1)<em>(2</em>n+1))/6 <br>\nand the like. In order to do the inductive proof, I have to know that <br>\nm&lt;=n implies (f(m)+f(m+1)+...+f(n+1)) = <br>\n(f(m)+f(m+1)+...+f(n))+f(n+1), for integers m and n. In Isar, this <br>\nbecomes that m&lt;=n implies (setsum f {m..n+1} = (setsum f {m..n}) + <br>\nf(n+1)). This would seem to be a fundamental rule, and yet I cannot <br>\nseem to find it anywhere in either the library or the supplemental <br>\nlibrary. The closest I have come to it is a lemma called <br>\nsetsum_atMost_Suc in section 59.8 (Summation Indexed over Intervals) <br>\nof the library. This says that (SUM i&lt;=Suc n. f i) = (SUM i&lt;=n. f <br>\ni)+f(Suc n), where SUM represents the upper-case sigma. It works for <br>\nm = 0, but not in the general case; and not every induction with an <br>\ninteger index starts with 0. How do I get this to work?<br>\n(A friend suggested that I use the Query panel to search for <br>\ntheorems; and, specifically, searching for setsum and Suc returns <br>\ntheorems such as setsum_op_ivl_Suc, setsum_head_upt_Suc, <br>\nsetsum_head_Suc, and setsum_cl_ivl_Suc. These, however, do not appear <br>\nto meet my needs, because they all involve Suc, and therefore involve <br>\nnat rather than int, and therefore do not cover the case when m &lt; 0.)</p>",
        "id": 294632861,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661158972
    },
    {
        "content": "<p>From: Andreas Lochbihler &lt;<a href=\"mailto:andreas.lochbihler@inf.ethz.ch\">andreas.lochbihler@inf.ethz.ch</a>&gt;<br>\nThere are far fewer theorems about setsum over intervals of integers than over natural <br>\nnumbers. Still, there are enough theorems in the library to prove what you want.<br>\nSledgehammer finds the following proof for me:</p>\n<p>lemma \"m ≤ n ⟹ setsum f {m..n + 1} = setsum f {m..n} + f (n + 1 :: int)\"<br>\nby(metis add.commute atLeastAtMostPlus1_int_conv<br>\n          atLeastLessThanPlusOne_atLeastAtMost_int atLeastLessThan_iff<br>\n          finite_atLeastAtMost_int linear not_less setsum.insert zle_add1_eq_le)</p>\n<p>Hope this helps,<br>\nAndreas</p>",
        "id": 294632865,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661158974
    }
]