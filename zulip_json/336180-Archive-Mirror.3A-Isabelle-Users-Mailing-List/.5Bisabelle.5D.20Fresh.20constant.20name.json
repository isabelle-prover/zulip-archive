[
    {
        "content": "<p>From: Peter Lammich &lt;<a href=\"mailto:lammich@in.tum.de\">lammich@in.tum.de</a>&gt;<br>\nHi all,</p>\n<p>I have a command that takes a definition theorem of the form (f x1 ...<br>\nxn = t). It then has to define some auxiliary constants f_1 ... f_n,<br>\nand generate a new theorem f x1 ... xn = t', where t' contains the<br>\nauxiliary constants.</p>\n<p>I'm using Specification.definition to define the auxiliary constants,<br>\nbut I do not see how to get \"safe\" names for them, i.e., names derived<br>\nfrom \"f\" that do not clash with any existing constant.</p>\n<p>A standard approach would be to use Name.variant, but for that I would<br>\nneed to obtain all existing names. I do not know how.</p>\n<p>Thanks for any pointers,<br>\n  Peter</p>",
        "id": 294749589,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661194912
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nOn 31/01/2019 14:52, Peter Lammich wrote:</p>\n<blockquote>\n<p>I have a command that takes a definition theorem of the form (f x1 ...<br>\nxn = t). It then has to define some auxiliary constants f_1 ... f_n,<br>\nand generate a new theorem f x1 ... xn = t', where t' contains the<br>\nauxiliary constants.</p>\n<p>I'm using Specification.definition to define the auxiliary constants,<br>\nbut I do not see how to get \"safe\" names for them, i.e., names derived<br>\nfrom \"f\" that do not clash with any existing constant.</p>\n</blockquote>\n<p>The standard programming interface is Local_Theory.define -- it is more<br>\nrobust and easier to use.</p>\n<blockquote>\n<p>A standard approach would be to use Name.variant, but for that I would<br>\nneed to obtain all existing names. I do not know how.</p>\n</blockquote>\n<p>In such situations I usually invent funny names like this (see<br>\nsrc/Pure/Isar/experiment.ML):</p>\n<p>val experiment_name = <a href=\"http://Binding.name\">Binding.name</a> (\"experiment\" ^ serial_string ())<br>\n|&gt; Binding.concealed;</p>\n<p>There can be still clashes, but they hardly ever happen in practice --<br>\nand there will be a clear error when it happens.</p>\n<p>Makarius</p>",
        "id": 294749653,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661194926
    }
]