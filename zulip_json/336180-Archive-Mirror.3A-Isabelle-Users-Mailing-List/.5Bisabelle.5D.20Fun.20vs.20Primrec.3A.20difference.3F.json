[
    {
        "content": "<p>From: \"Yannick Duchêne (Hibou57 )\" &lt;<a href=\"mailto:yannick_duchene@yahoo.fr\">yannick_duchene@yahoo.fr</a>&gt;<br>\nHi people out there,</p>\n<p>New beginner here, and so beginner's questions :-P</p>\n<p>My first one: what's the difference between “fun” and “primrec” please ?  <br>\nBoth looks similar or synonymous, but surprisingly, when Main is not  <br>\nimported (yes, I know it should, but that's for testing), “fun” seems not  <br>\navailable.</p>",
        "id": 294218147,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660896018
    },
    {
        "content": "<p>From: Christian Sternagel &lt;<a href=\"mailto:c-sterna@jaist.ac.jp\">c-sterna@jaist.ac.jp</a>&gt;<br>\nDear Yannick,</p>\n<p>this is not the first time this question is asked. Maybe it is best to <br>\nread through the previous discussions and come back if still questions <br>\nremain:</p>\n<p>Search for \"fun primrec\" here:</p>\n<p><a href=\"https://lists.cam.ac.uk/pipermail/cl-isabelle-users/\">https://lists.cam.ac.uk/pipermail/cl-isabelle-users/</a></p>\n<p>cheers</p>\n<p>chris</p>",
        "id": 294218185,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660896039
    },
    {
        "content": "<p>From: \"Yannick Duchêne (Hibou57 )\" &lt;<a href=\"mailto:yannick_duchene@yahoo.fr\">yannick_duchene@yahoo.fr</a>&gt;<br>\nOK, thanks Christian, found something via your link.</p>\n<p>P.S. I am using this list via a Usenet reader, and I have not imported all  <br>\nof the old messages when I suscribed to  <br>\ngmane.science.mathematics.logic.isabelle.user. That's the reason why I  <br>\ncould not know.</p>",
        "id": 294218236,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660896059
    },
    {
        "content": "<p>From: \"Yannick Duchêne (Hibou57 )\" &lt;<a href=\"mailto:yannick_duchene@yahoo.fr\">yannick_duchene@yahoo.fr</a>&gt;<br>\nAdditionally, “isabelle2012/doc/prog-prove.pdf” also says on page 18</p>\n<p>The attribute simp declares theorems to be simplification rules, which  <br>\nthe<br>\n   simplifier will use automatically. In addition, datatype and fun  <br>\ncommands im-<br>\n   plicitly declare some simplification rules: datatype the distinctness  <br>\nand injec-<br>\n   tivity rules, fun the defining equations.</p>\n<p>But this does not implies primrec don't too. Will check a later day.</p>",
        "id": 294218244,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660896063
    },
    {
        "content": "<p>From: Christian Sternagel &lt;<a href=\"mailto:c-sterna@jaist.ac.jp\">c-sterna@jaist.ac.jp</a>&gt;<br>\nDear Yannick,</p>\n<p>a very useful command to find out what theorems are newly added as part <br>\nof some previous command (e.g., datatype, primrec, fun) is</p>\n<p>print_theorems</p>\n<p>(Just type it in your *.thy file directly after the command you are <br>\ninterested in).</p>\n<p>It will give a list of all the new theorems. So you will see that when <br>\ndefining a function f via primrec or via fun, both times you will get <br>\ng.simps (of course it is a different matter whether those new theorems <br>\nare already included in automatic tools like 'simp', which is the case <br>\nfor g.simps from \"fun\" and \"primrec\").</p>\n<p>cheers</p>\n<p>chris</p>",
        "id": 294218308,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660896094
    },
    {
        "content": "<p>From: Christian Sternagel &lt;<a href=\"mailto:c-sterna@jaist.ac.jp\">c-sterna@jaist.ac.jp</a>&gt;<br>\nSorry, typo: function g</p>",
        "id": 294218315,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660896100
    },
    {
        "content": "<p>From: \"Yannick Duchêne (Hibou57 )\" &lt;<a href=\"mailto:yannick_duchene@yahoo.fr\">yannick_duchene@yahoo.fr</a>&gt;<br>\nAnswer is at “isar-ref.pdf”/10.3 (page 204 and 205)</p>\n<p>“<br>\n   primrec defines primitive recursive functions over datatypes<br>\n   (see also datatype and rep datatype). The given equations<br>\n   specify reduction rules […] At most one reduction rule for<br>\n   each constructor can be given. […] The reduction rules are<br>\n   declared as simp by default […]</p>\n<p>function defines functions by general well‑founded recursion.<br>\n   […] The function is specified by a set of (possibly conditional)<br>\n   recursive equations with arbitrary pattern matching. The command<br>\n   generates proof obligations for the completeness and the compatibility<br>\n   of patterns. […] The termination command can then be used to establish<br>\n   that the function is total.</p>\n<p>fun is a shorthand notation for “function (sequential ), followed<br>\n   by automated proof attempts regarding pattern matching and<br>\n   termination.<br>\n   ”</p>\n<p>That's nearly all the basics one needs to know :-) After that, I feel it's  <br>\nbetter to use Function only when Primrec is not enough and to use Fun only  <br>\nwhen Function is not enough (especially if one wish to avoid to rely on  <br>\nimplicit automated proofs).</p>",
        "id": 294221563,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660897774
    }
]