[
    {
        "content": "<p>From: \"<a href=\"mailto:zhaoyongwang@gmail.com\">zhaoyongwang@gmail.com</a>\" &lt;<a href=\"mailto:zhaoyongwang@gmail.com\">zhaoyongwang@gmail.com</a>&gt;<br>\nDear all,</p>\n<p>I am trying to use functor in Isabelle.  Anyone has some examples of the \"functor\" keyword in Isabelle/HOL? </p>\n<p>Thanks.<br>\nYongwang</p>",
        "id": 294723891,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661185793
    },
    {
        "content": "<p>From: Andreas Lochbihler &lt;<a href=\"mailto:andreas.lochbihler@inf.ethz.ch\">andreas.lochbihler@inf.ethz.ch</a>&gt;<br>\nHi Yongwang,</p>\n<p>What do you want to achieve by using \"functor\"? The functor command in Isabelle is in <br>\nIsabelle2017 only used by the quotient/lifting/transfer packages. You can register a map <br>\nfunctor for your own types with the functor command. Here is an abstract example for a <br>\nbinary type constructor with a covariant ('a) and a contravariant ('b) argument.</p>\n<p>typedecl ('a, 'b) F<br>\nconsts map_F :: \"('a =&gt; 'a') =&gt; ('b' =&gt; 'b) =&gt; ('a, 'b) F =&gt; ('a', 'b') F\"<br>\nfunctor map_F &lt;proof of the functor laws&gt;</p>\n<p>Hope this helps,<br>\nAndreas</p>",
        "id": 294723908,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661185799
    },
    {
        "content": "<p>From: \"<a href=\"mailto:zhaoyongwang@gmail.com\">zhaoyongwang@gmail.com</a>\" &lt;<a href=\"mailto:zhaoyongwang@gmail.com\">zhaoyongwang@gmail.com</a>&gt;<br>\nThanks, Andreas. I am studying functional programming in Isabelle/HOL, so tried to use functors.</p>\n<p>According to your suggestions, I have the following spec. My question is how I can use the functor maptree now? Is there something new with \"maptree\" now?  </p>\n<p>datatype 'a tree = Leaf 'a | Node \"'a tree\" \"'a tree\"</p>\n<p>primrec maptree :: \"('a ⇒ 'b) ⇒ 'a tree ⇒ 'b tree\"<br>\n  where \"maptree f (Leaf a) = Leaf (f a)\" |<br>\n        \"maptree f (Node l r) = Node (maptree f l) (maptree f r)\"</p>\n<p>lemma lmmt1: \"(maptree f ∘ maptree g) x = (maptree (f ∘ g)) x\"<br>\n  apply(induct x)<br>\n  using maplist2.simps by auto</p>\n<p>lemma lmmt2: \"(maptree id) x = id x\"<br>\n  apply(induct x)<br>\n  using maptree.simps by auto</p>\n<p>functor maptree<br>\nproof <br>\n  show \"⋀f g x. (maptree f ∘ maptree g) x = maptree (f ∘ g) x\"<br>\n    using lmmt1 by simp<br>\n  show \"maptree id = id\" <br>\n    using lmmt2 by blast<br>\nqed</p>\n<p>Yongwang</p>",
        "id": 294724009,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661185822
    },
    {
        "content": "<p>From: Andreas Lochbihler &lt;<a href=\"mailto:andreas.lochbihler@inf.ethz.ch\">andreas.lochbihler@inf.ethz.ch</a>&gt;<br>\nHi Yongwang,</p>\n<p>First of all, the datatype package already generates a map function for your tree, which <br>\nis called map_tree. You also get the functor properties proven, the lemmas are called <br>\ntree.map_id and tree.map_comp.</p>\n<p>As I said, the functor command is currently only used by lifting/transfer/quotient. So <br>\nunless you do not plan to define a quotient type over your trees or to lift a type <br>\nquotient through the tree type, the functor declaration does not have any effect for you.</p>\n<p>Andreas</p>",
        "id": 294724036,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661185830
    },
    {
        "content": "<p>From: Lars Hupel &lt;<a href=\"mailto:hupel@in.tum.de\">hupel@in.tum.de</a>&gt;</p>\n<blockquote>\n<p>According to your suggestions, I have the following spec. My question is how I can use the functor maptree now? Is there something new with \"maptree\" now?  </p>\n<p>datatype 'a tree = Leaf 'a | Node \"'a tree\" \"'a tree\"</p>\n<p>primrec maptree :: \"('a ⇒ 'b) ⇒ 'a tree ⇒ 'b tree\"<br>\n  where \"maptree f (Leaf a) = Leaf (f a)\" |<br>\n        \"maptree f (Node l r) = Node (maptree f l) (maptree f r)\"</p>\n</blockquote>\n<p>The \"maptree\" function already exists and is called \"map_tree\". Such<br>\nfunctions are automatically generated by the \"datatype\" command. It also<br>\nproves the relevant functor lemmas (as you did manually).</p>\n<blockquote>\n<p>functor maptree<br>\nproof <br>\n  show \"⋀f g x. (maptree f ∘ maptree g) x = maptree (f ∘ g) x\"<br>\n    using lmmt1 by simp<br>\n  show \"maptree id = id\" <br>\n    using lmmt2 by blast<br>\nqed</p>\n</blockquote>\n<p>Unless you plan on using quotient types, there's no point in registering<br>\nyour custom map function as a \"functor\". It is a mere technical detail.</p>\n<p>Cheers<br>\nLars</p>",
        "id": 294724053,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661185836
    }
]