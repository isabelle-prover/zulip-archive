[
    {
        "content": "<p>From: \"S.J.Thompson\" &lt;<a href=\"mailto:S.J.Thompson@kent.ac.uk\">S.J.Thompson@kent.ac.uk</a>&gt;<br>\nFunding is available for the following PhD studentships within<br>\nthe TCS group at the University of Kent. Applicants should contact the<br>\nproject supervisor directly for further details.</p>\n<p>Project Supervisor: Dr Olaf Chitil (<a href=\"mailto:O.Chitil@kent.ac.uk\">O.Chitil@kent.ac.uk</a>)<br>\nProject Title: Tracing Functional Programs with Hat</p>\n<p>Hat (<a href=\"http://www.haskell.org/hat\">www.haskell.org/hat</a>) is a sophisticated tool for locating faults in<br>\nHaskell programs. Hat consists of a trace generation system plus various<br>\ntools for viewing a trace. The aim of the research project is to improve<br>\nHat by both extending it and easing its application in practise: (1)<br>\nApply several theoretical results of a recent EPSRC project on tracing<br>\nin Hat (e.g. algorithmic debugging with functions as finite maps). (2)<br>\nIntegrate the trace generator of Hat into the byte code interpreter<br>\nof the Glasgow Haskell system (GHC). (3) Enable traced code to call<br>\nand be called from unmodified non-tracing code, such that Hat can use<br>\npre-compiled libraries of GHC.</p>\n<p>Project Title: The Essence of Transfinite Reductions<br>\nProject Supervisor: Dr Stefan Kahrs (<a href=\"mailto:S.M.Kahrs@kent.ac.uk\">S.M.Kahrs@kent.ac.uk</a>)</p>\n<p>Infinitary Rewriting is an area of Term Rewriting in which research has<br>\nstudied infinitary terms and infinitary reductions. While the notion of<br>\ninfinitary terms is fairly settled, the existing notions of infinitary<br>\nreduction leave a lot to be desired - the definitions are suspiciously<br>\ncomplicated, the established results less than impressive. Thus, there<br>\nappears to be a lot of room for improvement. There are different angles<br>\nthat are worth exploring. Firstly, there are several alternative ways<br>\nto define transfinite reductions. Secondly, one would hope that some of<br>\nthese alternative ways lead to good properties of transfinite reduction.<br>\nThirdly, it is not even a priori clear what would constitute such a<br>\ngood property.</p>\n<p>Project Title: Refactoring Proofs<br>\nProject Supervisor: Prof Simon Thompson (<a href=\"mailto:S.J.Thompson@kent.ac.uk\">S.J.Thompson@kent.ac.uk</a>)</p>\n<p>Refactoring allows the programmer to modify the design or structure of<br>\na program without changing its behaviour. Recent work in the Functional<br>\nProgramming group at Kent has developed refactoring systems for Haskell 98<br>\n(HaRe) and Erlang (Wrangler). Programming and proof have much in common,<br>\nand indeed under the \"propositions as types\" analogy, they are different<br>\nviews of the same objects. The aim of this project is to explore how<br>\nrefactoring can be incorporated into proof development systems, and will<br>\ncombine theoretical work, implementation and usability analysis to ensure<br>\nthat the results will be of value to users of proof assistants. The aim<br>\nof this project is to investigate refactoring for proofs.</p>",
        "id": 294056642,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660821835
    }
]