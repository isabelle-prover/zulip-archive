[
    {
        "content": "<p>From: Jonathan Woodgate via Cl-isabelle-users &lt;<a href=\"mailto:cl-isabelle-users@lists.cam.ac.uk\">cl-isabelle-users@lists.cam.ac.uk</a>&gt;<br>\nHello,<br>\nI have a simple question: Let<br>\nf :: N =&gt; Nf k = {n:N. predicate(k) }<br>\ntypedef T1 = \"f 1\"<br>\ntypedef T2 = \"f 2\"<br>\n...<br>\ninstance T1::cpo   //assume the predicate is such that they are indeed cpo'sinstance T2::cpo<br>\n...<br>\nSo for 100 type definitions i have to prove the instantiation 100 times by hand.</p>\n<p>My question is, how can I automatize this, by defining a lemma as follows:<br>\nlemma \" ∀T. OFCLASS(f T, pcpo_class) \"</p>\n<p>PS: I know that this is syntactically wrong, since f T is a set and it should instead be a type.<br>\nThank You!</p>",
        "id": 294666786,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661172023
    },
    {
        "content": "<p>From: Jonathan Woodgate via Cl-isabelle-users &lt;<a href=\"mailto:cl-isabelle-users@lists.cam.ac.uk\">cl-isabelle-users@lists.cam.ac.uk</a>&gt;<br>\nHello,<br>\nsmall correction:<br>\nf :: nat =&gt; nat set where<br>\nf k = {n:N. predicate(k) }</p>\n<p>typedef T1 = \"f 1\"<br>\ntypedef T2 = \"f 2\"<br>\n...<br>\ninstance T1::cpo   //assume the predicate is such that they are indeed cpo'sinstance T2::cpo<br>\n...<br>\nSo for 100 type definitions i have to prove the instantiation 100 times by hand.</p>\n<p>My question is, how can I automatize this, by defining a lemma as follows:<br>\nlemma \" ∀T. OFCLASS(f T, cpo_class) \" <br>\nThank you very much!    Jonathan Woodgate via Cl-isabelle-users &lt;<a href=\"mailto:cl-isabelle-users@lists.cam.ac.uk\">cl-isabelle-users@lists.cam.ac.uk</a>&gt; schrieb am 18:16 Mittwoch, 17.Februar 2016:</p>\n<p>Hello,<br>\nI have a simple question: Let<br>\nf :: N =&gt; Nf k = {n:N. predicate(k) }<br>\ntypedef T1 = \"f 1\"<br>\ntypedef T2 = \"f 2\"<br>\n...<br>\ninstance T1::cpo   //assume the predicate is such that they are indeed cpo'sinstance T2::cpo<br>\n...<br>\nSo for 100 type definitions i have to prove the instantiation 100 times by hand.</p>\n<p>My question is, how can I automatize this, by defining a lemma as follows:<br>\nlemma \" ∀T. OFCLASS(f T, pcpo_class) \"</p>\n<p>PS: I know that this is syntactically wrong, since f T is a set and it should instead be a type.<br>\nThank You!</p>",
        "id": 294666824,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661172034
    },
    {
        "content": "<p>From: Johannes Hölzl &lt;<a href=\"mailto:hoelzl@in.tum.de\">hoelzl@in.tum.de</a>&gt;<br>\nYou can use the usual trick to use the cardinality of a type parameter:</p>\n<p>typedef 'a T = \"f (card (UNIV :: 'a set))\"</p>\n<p>Then you can use the Numeral_Type library to write:</p>\n<p>1 T, 2 T, ...</p>\n<ul>\n<li>Johannes</li>\n</ul>",
        "id": 294666841,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661172040
    }
]