[
    {
        "content": "<p>From: \"Kasper F. Brandt\" &lt;<a href=\"mailto:poizan@poizan.dk\">poizan@poizan.dk</a>&gt;<br>\nHello list<br>\nI wrote this generalization of wf_map_prod_image that only requires the<br>\nmapping to be injective on the the subset present in the relation.</p>\n<p>lemma wf_map_prod_image':<br>\n  fixes r:: \"('a × 'a) set\"<br>\n    and f:: \"'a ⇒ 'b\"<br>\n  assumes wf_r: \"wf r\"<br>\n    and inj: \"inj_on f (fst <code> r ∪ snd </code> r)\"<br>\n  shows \"wf (map_prod f f <code> r)\"\n  unfolding wf_eq_minimal\nproof (clarify)\n  fix Q::\"'b set\"\n    and x::\"'b\"\n  assume x_mem: \"x ∈ Q\"\n  let \"?Q'\" = \"{p. f p ∈ Q ∧ p ∈ (fst </code> r ∪ snd ` r)}\"</p>\n<p>show \"∃z∈Q. ∀y. (y, z) ∈ map_prod f f <code> r ⟶ y ∉ Q\"\n  proof (rule case_split)\n    assume ex_fp_Q: \"∃p. f p ∈ Q ∧ p ∈ (fst </code> r ∪ snd <code> r)\"\n    obtain z0 where z0_mem: \"z0∈?Q'\" and *: \"∀y. (y, z0) ∈ r ⟶ y ∉ ?Q'\"\n      using ex_fp_Q wf_r[unfolded wf_eq_minimal, rule_format, of _ ?Q'] by\nblast\n    have **: \"⋀y z. (y,z) ∈ r ⟹ y ∈ (fst </code> r ∪ snd <code> r) ∧ z ∈ (fst </code> r ∪<br>\nsnd <code> r) \"\n      by (metis Domain.intros Domain_fst Range.RangeI Range_snd Un_iff)\n    have \"∀y. (y, f z0) ∈ map_prod f f </code> r ⟶ y ∉ Q\"<br>\n    proof (intro allI impI)<br>\n      fix y<br>\n      assume \"(y, f z0) ∈ map_prod f f <code> r\"\n      then obtain y' and ya where y'_ya_def: \"(y, f z0) = (f y', f ya)\"\n        and y'_ya_rel: \"(y', ya) ∈ r\"\n        using prod_fun_imageE by blast\n      have \"f z0 ∈ Q ∧ z0 ∈ fst </code> r ∪ snd <code> r\"\n        using z0_mem by blast\n      moreover have \"f y' = y ∧ f ya = f z0\"\n        using y'_ya_def by fastforce\n      ultimately have \"ya = z0\"\n        using \"**\" y'_ya_rel inj inj_onD by metis\n      then show \"y ∉ Q\"\n        using \"*\" \"**\" Pair_inject y'_ya_def y'_ya_rel by blast\n    qed\n    then show \"∃z∈Q. ∀y. (y, z) ∈ map_prod f f </code> r ⟶ y ∉ Q\"<br>\n      using z0_mem by blast<br>\n  next<br>\n    assume not_ex_fp_Q: \"∄p. f p ∈ Q ∧ p ∈ (fst <code> r ∪ snd </code> r)\"<br>\n    then have \"⋀p . f p ∈ Q ⟹ p ∉ fst <code> r ∧ p ∉ snd </code> r\"<br>\n      by blast<br>\n    then have \"⋀z y. z ∈ Q ⟹ (y, z) ∉ map_prod f f ` r\"<br>\n      by force<br>\n    then show ?thesis using x_mem by auto<br>\n  qed<br>\nqed</p>\n<p>Would it make sense to add this to Wellfounded.thy, or replace the existing<br>\none? I'll note that this should follow from wf_map_prod_image by defining a<br>\ntype from the subset present in the relation, but I don't know Isabelle<br>\nwell enough to know how easy it is to prove this version from it. If<br>\nnothing else this version is written in Isar style while  wf_map_prod_image is<br>\ncurrently in apply-script style (I haven't checked Isabelle 2018)</p>\n<ul>\n<li>Kasper Fabæch Brandt</li>\n</ul>",
        "id": 294732863,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661188718
    },
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\nThanks for the input. It looks helpful and I will take care of it.</p>\n<p>Tobias<br>\n<a href=\"/user_uploads/14278/WfuV27L3JWQHSBIOmdzgfPWy/smime.p7s\">smime.p7s</a></p>",
        "id": 294732873,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661188720
    },
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\nA generalized version of the thm due to Andrei Popescu is in now:</p>\n<p><a href=\"http://isabelle.in.tum.de/repos/isabelle/rev/80df7c90e315\">http://isabelle.in.tum.de/repos/isabelle/rev/80df7c90e315</a></p>\n<p>Thanks to both of you.<br>\nTobias<br>\n<a href=\"/user_uploads/14278/7U6n4fRsaCTAKRMs0hDdBD5r/smime.p7s\">smime.p7s</a></p>",
        "id": 294733170,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661188813
    }
]