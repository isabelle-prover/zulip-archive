[
    {
        "content": "<p>From: Andrew Gacek &lt;<a href=\"mailto:andrew.gacek@gmail.com\">andrew.gacek@gmail.com</a>&gt;<br>\nI'm trying to write a function in Isabelle/HOL to generate a fresh<br>\nvariable name (given a finite set of used names). I'm having trouble,<br>\nin part, because proving termination for the function requires knowing<br>\nthat the set is finite (I don't care about the function output when<br>\ninfinite). Does anybody have a suggestion about how to proceed?</p>\n<p>I was hoping to create a function like</p>\n<p>fresh_string :: string set =&gt; string =&gt; string</p>\n<p>That might work like</p>\n<p>fresh_string {''A'', ''B'', ''A0'', ''A1''} ''A'' = ''A2''</p>\n<p>That is, the second argument is used as a base for the generated<br>\nvariable name. And the theorem I'd want to prove is</p>\n<p>finite xs ==&gt; fresh_string xs y \\notin xs</p>\n<p>This is the closest I've come, but I'm not hopeful about being able to<br>\nprove termination:</p>\n<p>fun string_of_nat :: \"nat ⇒ string\"<br>\nwhere<br>\n  \"string_of_nat n = (if n &lt; 10 then [char_of_nat (48 + n)] else<br>\n     string_of_nat (n div 10) @ [char_of_nat (48 + (n mod 10))])\"</p>\n<p>fun fresh_string_aux :: \"string set ⇒ string ⇒ nat ⇒ string\" where<br>\n  \"fresh_string_aux xs y n = (if finite xs then<br>\n                               (if y @ string_of_nat n ∈ xs then<br>\n                                  fresh_string_aux xs y (Suc n)<br>\n                                else<br>\n                                  y @ string_of_nat n)<br>\n                              else<br>\n                                undefined)\"</p>\n<p>fun fresh_string :: \"string set ⇒ string ⇒ string\" where<br>\n  \"fresh_string xs y = fresh_string_aux xs y 0\"</p>\n<p>The reason for all this is that I'm writing a function that will<br>\nrequire fresh variable names and I'd like to be able to actually<br>\nexecute that function and get readable results.</p>\n<p>Thanks,<br>\nAndrew</p>",
        "id": 294329879,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660929876
    },
    {
        "content": "<p>From: Peter Lammich &lt;<a href=\"mailto:lammich@in.tum.de\">lammich@in.tum.de</a>&gt;<br>\nHi,</p>\n<p>find attached what we use in CoCon<br>\n(<a href=\"http://www21.in.tum.de/~popescua/rs3/CoCon.html\">http://www21.in.tum.de/~popescua/rs3/CoCon.html</a>) to generate fresh IDs.<br>\nThe function \"fresh\" there exactly matches your signature, and<br>\nis executable.</p>\n<p>The formalization of \"fresh\" is mostly by Andrei Popescu.<br>\n<a href=\"/user_uploads/14278/OBcZYHP3gW3mtK4hFnjqtsAK/Fresh.thy\">Fresh.thy</a></p>",
        "id": 294330067,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660929944
    },
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\nMy recommendation in such situations is to use a list rather than a set. Of <br>\ncourse the callers of fresh_string will also need to use lists, and so on. But <br>\nsince function \"set\" converts a list into a set, the change is usually not very <br>\npainful.</p>\n<p>Tobias<br>\n<a href=\"/user_uploads/14278/MndL0wCTlFcP24VPiSrQ-Q0d/smime.p7s\">smime.p7s</a></p>",
        "id": 294330295,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660930011
    },
    {
        "content": "<p>From: \"Thiemann, Rene\" &lt;<a href=\"mailto:Rene.Thiemann@uibk.ac.at\">Rene.Thiemann@uibk.ac.at</a>&gt;<br>\nDear Andrew,</p>\n<p>you can find a theory \"Name\" in the IsaFoR-repository.<br>\nIt contains fresh-name generators for strings like the ones you desire.<br>\n(fresh_string, fresh_string_list, ...)</p>\n<p>Hope this helps,<br>\nRené</p>\n<p>PS: IsaFoR/CeTA is freely available under <a href=\"http://cl-informatik.uibk.ac.at/software/ceta/\">http://cl-informatik.uibk.ac.at/software/ceta/</a></p>",
        "id": 294330508,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660930078
    },
    {
        "content": "<p>From: Peter Lammich &lt;<a href=\"mailto:lammich@in.tum.de\">lammich@in.tum.de</a>&gt;</p>\n<blockquote>\n<p>The function \"fresh\" there exactly matches your signature</p>\n</blockquote>\n<p>Oops, function fresh there actually uses a list, rather than a set:<br>\n  fresh :: string list =&gt; string =&gt; string</p>",
        "id": 294330703,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660930145
    }
]