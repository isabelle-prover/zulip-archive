[
    {
        "content": "<p>From: Lars Hupel &lt;<a href=\"mailto:hupel@in.tum.de\">hupel@in.tum.de</a>&gt;<br>\nDear list,</p>\n<p>assume I have a bunch of theorems which together look like a function<br>\nspecification. For example:</p>\n<p>size3 (?x3.0 # ?x2.0) = Numeral1 + size3 ?x2.0<br>\n  size3 [] = 0</p>\n<p>I want to derive an induction schema from those, i.e.:</p>\n<p>(!!x3 x2. ?P x2 ==&gt; ?P (x3 # x2)) ==&gt; ?P [] ==&gt; ?P ?a0.0</p>\n<p>I know about the 'induction_schema' tactic which is able to prove that one<br>\nfor me, but I need to come up with it in the first place. The way I could<br>\ndo it is, of course, to define an auxiliary function using the theorems I<br>\nhave as defining equations and then ask the function package to tell me<br>\nthe induction schema it came up with. However, that is a lot of machinery.<br>\nI'm looking for a simpler solution here.</p>\n<p>Cheers<br>\nLars</p>",
        "id": 294652095,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661166505
    },
    {
        "content": "<p>From: Andreas Lochbihler &lt;<a href=\"mailto:andreas.lochbihler@inf.ethz.ch\">andreas.lochbihler@inf.ethz.ch</a>&gt;<br>\nDear Lars,</p>\n<p>I do not know of any other way than defining an auxiliary function. From a quick look at <br>\nthe sources of the function package, I guess that it is not easy to disentangle the <br>\nderivation of the inductive predicate from the construction of the function. (You <br>\nessentially want the functionality implemented in <br>\nfunction_core.ML/mk_partial_induct_rule.) The reason is that the function package first <br>\nproves a partial induction rule and then (after the termination proof) removes the domain <br>\npreconditions. Obviously, the partial induction rule is shown by induction on the domain <br>\npredicate. But if you don't do the construction, then there is also no domain predicate.</p>\n<p>Cheers,<br>\nAndreas</p>",
        "id": 294652108,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661166511
    },
    {
        "content": "<p>From: Lars Hupel &lt;<a href=\"mailto:hupel@in.tum.de\">hupel@in.tum.de</a>&gt;<br>\nDear Andreas,</p>\n<blockquote>\n<p>I do not know of any other way than defining an auxiliary function.</p>\n</blockquote>\n<p>I've spent the better part of the afternoon doing just that, and it turns<br>\nout it's even uglier than I anticipated. I'm not going to go into the<br>\ndetails of what makes the process hairy.</p>\n<p>The bottom line is this: When I throw my theorems at the equivalent of<br>\n\"fun\", I get the finished induction rule, but I can't use it, because the<br>\ninternal construction updates the theory and I would need to return an<br>\nupdated theory as well. However, if I inspect the result I get, set up a<br>\nnew goal from it and prove it again, I get the rule that I wanted.</p>\n<p>Anyway, thanks for the explanation why the function package doesn't expose<br>\nthat functionality. I guess I just have to live with my horrific code now.</p>\n<p>Cheers<br>\nLars</p>",
        "id": 294652150,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661166536
    }
]