[
    {
        "content": "<p>From: Holden Lee &lt;<a href=\"mailto:hl422@cam.ac.uk\">hl422@cam.ac.uk</a>&gt;<br>\nWorking with abstract algebra (with locales) requires always showing<br>\nelements are in the carrier before concluding anything with them. Using<br>\ntype classes, this would be automatic from type-checking. I feel like there<br>\nshould be a way to make it as automatic with carriers by declaring the<br>\nright simp rules, but so far I've had no success, and have to continually<br>\npipe in facts about elements being in the carrier every time I want to<br>\nprove something. Does anyone know a way to get around this?</p>\n<p>I can get it to do basic things like: if a, b are in the carrier then a*b+c<br>\nis in the carrier. But I am working with finite sums, where congruence<br>\nrules and not just simp rules are required.</p>\n<p>I've set up a baby example to see where the problem is.</p>\n<p>Suppose I have a simp rule and congruence rules (think of F being like sum<br>\nor finsum, for instance)</p>\n<p>lemma <em>simp_rule</em>:<br>\n  fixes x<br>\n  assumes \"x∈S\"<br>\n  shows \"a x = b x\"<br>\nsorry</p>\n<p>lemma <em>rule_cong'</em>:<br>\n  \"[|A=B; !! x. x∈A ==&gt; f x = g x|] ==&gt; F A f = F B g\"<br>\nsorry</p>\n<p>(<em>cong</em>)<br>\nlemma <em>rule_cong</em>:<br>\n  \"[|A=B; !!x. x∈A =simp=&gt; f x = g x|] ==&gt; F A f = F B g\"<br>\nsorry</p>\n<p>Then Isabelle successfully solves the following, as expected (by<br>\nsimplifying the LHS to F S b, then the RHS also to F S b).</p>\n<p>lemma <em>test_cong'</em>:<br>\n  \"F S (λx. if (x∈S) then b x else 0) = F S a\"<br>\n<em>by (auto cong: rule_cong simp add: simp_rule)</em></p>\n<p>But Isabelle stumbles on the following:</p>\n<p>lemma* test_congT'*:<br>\n  \"F T (λx. if (x∈S) then b x else 0) = F T a\"<br>\nproof -<br>\n  have 1:\"T⊆S\" by (unfold T_def S_def, auto)<br>\n  from 1 show ?thesis<br>\n    apply <em>(auto cong: rule_cong simp add: simp_rule elim!: subsetD)</em><br>\n<em>(</em>fails* - also with cong/cong' elim!/intro*<em>)</em></p>\n<p><em>(</em>subsetD: ?A ⊆ ?B ==&gt; ?c ∈ ?A ==&gt; ?c ∈ ?B<em>)</em></p>\n<p>The problem is that applying the congruence rule it fails to show x\\in S.<br>\nWith the assumption T⊆S and x∈T and subsetD declared as an elim rule<br>\nexplicitly, it should conclude x∈S. Why doesn't it, and how can I get it to<br>\ndo this?</p>\n<p>The application is that F is finsum/finprod and the expression inside<br>\nsimplifies <em>on the condition that x</em><em>∈carrier G</em>, while the set T is a<br>\n<em>subset</em> of carrier G</p>\n<p>For easy experimentation, here is the file:<br>\n<a href=\"https://dl.dropboxusercontent.com/u/27883775/work/Isabelle/TestTactics.thy\">https://dl.dropboxusercontent.com/u/27883775/work/Isabelle/TestTactics.thy</a></p>\n<p>-Holden</p>",
        "id": 294294536,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660924190
    },
    {
        "content": "<p>From: Lawrence Paulson &lt;<a href=\"mailto:lp15@cam.ac.uk\">lp15@cam.ac.uk</a>&gt;<br>\nYou may have luck with </p>\n<p>apply (auto cong: rule_cong simp add: simp_rule subsetD [OF 1])</p>\n<p>Auto doesn’t use “elim!” inside the simplifier, but outside it, so it cannot help.</p>\n<p>The point of my suggestion is to instantiate the variables in subsetD.</p>\n<p>Larry</p>",
        "id": 294294544,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660924195
    }
]