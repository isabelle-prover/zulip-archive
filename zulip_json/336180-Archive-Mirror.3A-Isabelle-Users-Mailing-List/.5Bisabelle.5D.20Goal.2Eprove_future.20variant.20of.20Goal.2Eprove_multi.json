[
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nI have refined that here, so it is likely to be in the coming release:</p>\n<p><a href=\"http://isabelle.in.tum.de/repos/isabelle/rev/fdc03c8daacc\">http://isabelle.in.tum.de/repos/isabelle/rev/fdc03c8daacc</a></p>\n<p>There is also some updated documentation in the same changeset.</p>\n<p>Makarius</p>",
        "id": 294326358,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660928655
    },
    {
        "content": "<p>From: Christian Sternagel &lt;<a href=\"mailto:c.sternagel@gmail.com\">c.sternagel@gmail.com</a>&gt;<br>\nDear experts,</p>\n<p>in src/Pure/goal.ML there is the Goal.prove_future variant of <br>\nGoal.prove. However I couldn't find a \"future\" variant of Goal.prove_multi.</p>\n<p>In complete ignorance of implementation details I have two questions:</p>\n<p>Is it just an interface-omission that there is no <br>\nGoal.prove_multi_future or are there technical reasons for not having <br>\nsuch a variant of Goal.prove_multi?</p>\n<p>Why isn't Goal.prove implicitly \"futurized\"? (So that the standard <br>\nbehavior allows for implicit parallelization; I guess that's not always <br>\na good thing.)</p>\n<p>cheers</p>\n<p>chris</p>",
        "id": 294328250,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660929324
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nOn Tue, 17 Feb 2015, Christian Sternagel wrote:</p>\n<blockquote>\n<p>in src/Pure/goal.ML there is the Goal.prove_future variant of Goal.prove. <br>\nHowever I couldn't find a \"future\" variant of Goal.prove_multi.</p>\n<p>Is it just an interface-omission that there is no <br>\nGoal.prove_multi_future or are there technical reasons for not having <br>\nsuch a variant of Goal.prove_multi?</p>\n</blockquote>\n<p>Yes, as far as I can say on the spot, there could be <br>\nGoal.prove_multi_future, but it was never used so far. The Goal.prove <br>\nvariants are relatively pragmatic, e.g. legacy things like <br>\nGoal.prove_global are there, because some packages still need them, and <br>\nthus their implementation is simplified a bit.</p>\n<p>In most situations, a plain \"map\" of Goal.prove should do the same job. <br>\nYou mainly need Goal.prove_multi for simultaneous induction.</p>\n<p>If you do have a convincing application, I can nonetheless add the missing <br>\nvariant for the next release.</p>\n<blockquote>\n<p>Why isn't Goal.prove implicitly \"futurized\"? (So that the standard <br>\nbehavior allows for implicit parallelization; I guess that's not always <br>\na good thing.)</p>\n</blockquote>\n<p>In Isabelle/ML programming there is often a situation where some tool uses <br>\nGoal.prove ... handle ERROR _ =&gt; to react on a failed attempt, i.e. there <br>\nis an implicit assumption of strictness of this operation.</p>\n<p>There is an ancient Isabelle tradition to change semantics only together <br>\nwith the name of an operation, so I left Goal.prove unchanged and added <br>\nGoal.prove_future.  It should be easy to upgrade tools that cope with <br>\nforked proofs by searching for Goal.prove and making educated guesses if <br>\nit can be replaced by Goal.prove_future.</p>\n<p>Makarius</p>",
        "id": 294328266,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660929335
    },
    {
        "content": "<p>From: René Thiemann &lt;<a href=\"mailto:rene.thiemann@uibk.ac.at\">rene.thiemann@uibk.ac.at</a>&gt;<br>\nThat would indeed be nice. The application we have in mind are the datatype order/show/... generators.<br>\nWe just recently got a request from Dmitriy to use the Goal.prove_..._future variants, since the invocation<br>\nof the generator on some particular datatype took over 3 minutes which was blocking the further proceeding<br>\nof the theory file. This is now fixed for the current generators which work on the (old) datatypes and do not require<br>\nGoal.prove_multi. However, we are in the process of also providing these generators for the BNF-based (new) datatypes, where the usage<br>\nof Goal.prove_multi is essential since the first step is an simultaneous induction. </p>\n<p>To summarize, without Goal.prove_multi_future we have to wait over a minute for the new generators on Dmitriys datatype,<br>\nbut with it(*) the generator returns immediately. </p>\n<p>Best regards,<br>\nRené</p>\n<p>(*): Here is our diff in Pure/goal.ML:</p>\n<p>(in signature)</p>\n<p>val prove_multi_future: Proof.context -&gt; string list -&gt; term list -&gt; term list -&gt;<br>\n    ({prems: thm list, context: Proof.context} -&gt; tactic) -&gt; thm list</p>\n<p>(in implementation)<br>\nval prove_multi_future = prove_common false ~1;</p>",
        "id": 294328370,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660929372
    }
]