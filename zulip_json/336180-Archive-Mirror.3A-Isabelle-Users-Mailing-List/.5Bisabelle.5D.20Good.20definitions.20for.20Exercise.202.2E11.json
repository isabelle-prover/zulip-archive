[
    {
        "content": "<p>From: Gergely Buday &lt;<a href=\"mailto:buday.gergely@uni-eszterhazy.hu\">buday.gergely@uni-eszterhazy.hu</a>&gt;<br>\nHi,</p>\n<p>there is Exercise 2.11 in Concrete Semantics:</p>\n<p>Define arithmetic expressions in one variable over integers<br>\n(type int) as a data type:</p>\n<p>datatype exp = Var | Const int | Add exp exp | Mult exp exp</p>\n<p>Define a function eval :: exp ⇒ int ⇒ int such that eval e x evaluates e at<br>\nthe value x. A polynomial can be represented as a list of coefficients, starting with the<br>\nconstant. For example, [4, 2, − 1, 3] represents the polynomial 4+2x−x^2 +3x^3 .<br>\nDefine a function evalp :: int list ⇒ int ⇒ int that evaluates a polynomial at<br>\nthe given value. Define a function coeffs :: exp ⇒ int list that transforms an<br>\nexpression into a polynomial. This may require auxiliary functions. Prove that<br>\ncoeffs preserves the value of the expression: evalp (coeffs e) x = eval e x.<br>\nHint: consider the hint in Exercise 2.10.  ›</p>\n<p>For now I tried to do without multiplication:</p>\n<p>datatype exp = Var | Const int | Add exp exp (* | Mult exp exp *)</p>\n<p>fun eval :: \"exp ⇒ int ⇒ int\" where<br>\n  \"eval Var x = x\"<br>\n| \"eval (Const n) _ = n\"<br>\n| \"eval (Add e1 e2) x = (eval e1 x) + (eval e2 x)\"<br>\n(* | \"eval (Mult e1 e2) x = (eval e1 x) * (eval e2 x)\"  *)</p>\n<p>fun evalp :: \"int list ⇒ int ⇒ int\" where<br>\n\"evalp [] v = 0\"|<br>\n\"evalp (p#ps) v = p + v * (evalp ps v) \"</p>\n<p>fun add_coeffs :: \"int list ⇒ int list ⇒ int list\" where<br>\n  \"add_coeffs [] [] = []\"<br>\n| \"add_coeffs (a # as) (b# bs) = (a+b) # (add_coeffs as bs)\"<br>\n| \"add_coeffs as [] = as\"<br>\n| \"add_coeffs [] bs = bs\"</p>\n<p>fun add_coeffs2 :: \"int list ⇒ int list ⇒ int list\" where<br>\n  \"add_coeffs2 p1 p2 = <br>\n     (if length p1 ≥ length p2 <br>\n         then (map2 (+) p1 (p2 @ (replicate (length p1 - length p2) 0)))<br>\n         else add_coeffs2 p2 p1)\"</p>\n<p>fun coeffs :: \"exp ⇒ int list\" where <br>\n  \"coeffs (Var) = [0,1]\"<br>\n| \"coeffs (Const n) = [n]\"<br>\n| \"coeffs (Add e1 e2) = add_coeffs (coeffs e1) (coeffs e2)\"</p>\n<p>Somebody emphasized me the importance of writing good definitions.</p>\n<p>I did not get far with neither add_coeffs nor add_coeffs2. The latter I transcribed from Algebra/Polynomials.thy.</p>\n<p>For this verification, which one is better and why? Or, some third version should I write?</p>\n<ul>\n<li>Gergely</li>\n</ul>",
        "id": 294822712,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661242927
    },
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\nYour add_coeffs is fine, I used it myself and the proofs are all induction-auto.</p>\n<p>Tobias<br>\n<a href=\"/user_uploads/14278/Mox_KUyXq86TE3ZT3qkpKxmS/smime.p7s\">smime.p7s</a></p>",
        "id": 294822819,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661242983
    },
    {
        "content": "<p>From: Gergely Buday &lt;<a href=\"mailto:buday.gergely@uni-eszterhazy.hu\">buday.gergely@uni-eszterhazy.hu</a>&gt;<br>\nI could not go through it with auto: </p>\n<p>lemma evalp_add: \"evalp (add_coeffs (coeffs e1) (coeffs e2)) x = eval e1<br>\nx + eval e2 x\"<br>\n  apply (induction e1 arbitrary:e2) <br>\n  apply (auto simp add:algebra_simps)</p>\n<p>lemma evalp_coeffs_eval: \"evalp (coeffs e) x = eval e x\"<br>\n  apply (induction e rule:exp.induct)<br>\n  apply (auto simp add: algebra_simps) </p>\n<p>I got some subgoals at evalp_add which auto does not solve. </p>\n<ul>\n<li>Gergely </li>\n</ul>\n<p>2020-02-06 09:46 időpontban Tobias Nipkow ezt írta:</p>",
        "id": 294822845,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661242998
    },
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\nSee Section 2.3.4.</p>\n<p>Tobias<br>\n<a href=\"/user_uploads/14278/3tVxTlVe0kx-8GQrokFMcyFE/smime.p7s\">smime.p7s</a></p>",
        "id": 294822851,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661243001
    },
    {
        "content": "<p>From: Gergely Buday &lt;<a href=\"mailto:buday.gergely@uni-eszterhazy.hu\">buday.gergely@uni-eszterhazy.hu</a>&gt;<br>\nIndeed. Thanks. I had to use the rule for add_coeffs. What is the<br>\ngeneral method for choosing the induction rule? </p>\n<p>Also, when I tried to name the induction variable e1 using rule:<br>\nadd_coeffs.induct below, Isabelle/JEdit complained about ill-typed<br>\ninstantiation. Why is that? And, when should I name the variables<br>\nbesides the induction rule? </p>\n<ul>\n<li>Gergely </li>\n</ul>\n<p>2020-02-06 11:30 időpontban Tobias Nipkow ezt írta:</p>",
        "id": 294822885,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661243019
    }
]