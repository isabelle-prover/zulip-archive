[
    {
        "content": "<p>From: <a href=\"mailto:mark@proof-technologies.com\">mark@proof-technologies.com</a><br>\nBy the way, I've written an extensive glossary of HOL-related terminology.<br>\nPlease feel free to download it from my website:</p>\n<p><a href=\"http://proof-technologies.com\">http://proof-technologies.com</a></p>\n<p>It has 218 entries, explaining various concepts of formal logic, theorem<br>\nprover architecture, ML and HOL, for the purposes of understanding the HOL<br>\nlogic and how LCF-style theorem provers work.  It is written for HOL Zero<br>\nbut is largely relevant for all HOL systems.</p>\n<p>Any criticisms are gratefully received.</p>\n<p>Mark.</p>\n<p>on 17/1/11 10:45 PM, <a href=\"mailto:mark@proof-technologies.com\">mark@proof-technologies.com</a> wrote:</p>\n<blockquote>\n<p>Actually the term \"simply-typed\" tends to be used in more than one way.<br>\nSome people use it to mean \"not dependently-typed\" and some people use it<br>\nto<br>\nmean \"not polymorphic and not dependently-typed\".</p>\n<p>When people refer to \"simply-typed lambda calculus\" they are (usually)<br>\nreferring to Church's original simply typed lambda calculus (which he<br>\ncreated after his untyped lambda calculus).  This does not have<br>\npolymorphism, but Isabelle and HOL, that are based on it, do.</p>\n<p>Mark.</p>\n<p>on 17/1/11 6:01 PM, Steve W &lt;<a href=\"mailto:s.wong.731@gmail.com\">s.wong.731@gmail.com</a>&gt; wrote:</p>\n<blockquote>\n<p>Hi,</p>\n<p>I have a question about Isabelle's polymorphism. Since Isabelle has a<br>\nsimply-typed lambda calculus, how come the meta-logic is polymorphic?<br>\nPolymorphism is not typically considered simple, right?</p>\n<p>Regards<br>\nSteve</p>\n</blockquote>\n</blockquote>",
        "id": 294128751,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660842102
    }
]