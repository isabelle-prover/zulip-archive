[
    {
        "content": "<p>From: Jørgen Villadsen &lt;<a href=\"mailto:jovi@dtu.dk\">jovi@dtu.dk</a>&gt;<br>\nHi,</p>\n<p>Would it be a good idea to add something like the following lemmas?</p>\n<p>lemma sublist_map_fst_zip: obtains zs where \"(map fst (zip xs ys)) @ zs = xs\"<br>\n  by (induct xs ys rule:list_induct2') simp_all</p>\n<p>lemma sublist_map_snd_zip: obtains zs where \"(map snd (zip xs ys)) @ zs = ys\"<br>\n  by (induct xs ys rule:list_induct2') simp_all</p>\n<p>At least we found them useful.</p>\n<p>Regards,</p>\n<p>Jørgen</p>\n<p>PS - Here is a little explanation in case it is needed:</p>\n<p>text &lt;<br>\n  @{term zip}ping two lists and retrieving one of them back by mapping @{term fst} or @{term snd}<br>\n  results in the original list, possibly truncated<br>\n&gt;</p>",
        "id": 294732534,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661188599
    },
    {
        "content": "<p>From: Lukas Bulwahn &lt;<a href=\"mailto:lukas.bulwahn@gmail.com\">lukas.bulwahn@gmail.com</a>&gt;<br>\nHi Jørgen,</p>\n<p>I would propose the following lemma as alternative:</p>\n<p>lemma map_fst_zip:<br>\n  \"map fst (zip xs ys) = take (min (length xs) (length ys)) xs\"<br>\nby (induct xs ys rule: list_induct2') simp_all</p>\n<p>The advantage is that it is a refinement of the existing map_fst_zip;<br>\nso I would expect that all previous proofs with map_fst_zip would<br>\nstill complete with this new one (but I have not tried it).</p>\n<p>In your proof, you can then simply replace, obtaining some zs, by<br>\nnaming the witness. zs is <code>drop (min (length xs) (length ys)) xs</code>.<br>\nThen, in your proof:<br>\n(map fst (zip xs ys)) @ drop (min (length xs) (length ys)) xs<br>\n= take (min (length xs) (length ys)) xs @ drop (min (length xs) (length ys)) xs<br>\n= xs</p>\n<p>This reasoning can be automatically found with (simp add: map_fst_zip).</p>\n<p>For map_snd_zip, it is analogous.</p>\n<p>I hope this helps.</p>\n<p>Best regards,</p>\n<p>Lukas</p>",
        "id": 294732611,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661188628
    },
    {
        "content": "<p>From: Jørgen Villadsen &lt;<a href=\"mailto:jovi@dtu.dk\">jovi@dtu.dk</a>&gt;<br>\nThanks Lukas, it would be great if map_fst_zip and map_snd_zip could be refined as you propose (and no new lemmas needed).</p>\n<p>Jørgen</p>",
        "id": 294732637,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661188640
    },
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\nHi Lukas,</p>\n<p>Your lemmas look natural but replacing the existing simp-rules with them broke a <br>\nnumber of proofs and didn't help any. Thus I have left things as they are. I <br>\ndidn't add them as ordinary lemmas because my impression is that in most cases <br>\none zips lists of the same length.</p>\n<p>But thanks for the suggestion.</p>\n<p>Tobias<br>\n<a href=\"/user_uploads/14278/YnDhGxKWKYamcTFMQcpCdrSm/smime.p7s\">smime.p7s</a></p>",
        "id": 294732706,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661188672
    },
    {
        "content": "<p>From: Jørgen Villadsen &lt;<a href=\"mailto:jovi@dtu.dk\">jovi@dtu.dk</a>&gt;<br>\nHi Tobias,</p>\n<p>Thanks for the investigations. Any chance that the original lemma suggestions could be added?</p>\n<p>lemma sublist_map_fst_zip: obtains zs where \"(map fst (zip xs ys)) @ zs = xs\"<br>\n  by (induct xs ys rule:list_induct2') simp_all</p>\n<p>lemma sublist_map_snd_zip: obtains zs where \"(map snd (zip xs ys)) @ zs = ys\"<br>\n  by (induct xs ys rule:list_induct2') simp_all</p>\n<p>At least we found them useful... :-)</p>\n<p>Best regards, Jørgen</p>",
        "id": 294732721,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661188677
    },
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\nThey are too complicated for a library.</p>\n<p>Tobias<br>\n<a href=\"/user_uploads/14278/XO6tQvEXOeGUeGzRBQaW9js_/smime.p7s\">smime.p7s</a></p>",
        "id": 294732780,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661188684
    },
    {
        "content": "<p>From: Lukas Bulwahn &lt;<a href=\"mailto:lukas.bulwahn@gmail.com\">lukas.bulwahn@gmail.com</a>&gt;<br>\nToo bad.</p>\n<p>Is there a chance to put the two lemmas (without simp attribute) in<br>\nthe More_List theory in HOL-Library?</p>\n<p>That might be an acceptable compromise for everyone.</p>\n<p>Lukas</p>",
        "id": 294732820,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661188700
    },
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\nI had been afraid that if I add these lemmas I would open the floodgates for <br>\nmany similar generalizations. But having looked at the existing lemmas, I found <br>\nthat this fear was unjustified and I added them:<br>\n<a href=\"http://isabelle.in.tum.de/repos/isabelle/diff/a477f78a9365/src/HOL/List.thy\">http://isabelle.in.tum.de/repos/isabelle/diff/a477f78a9365/src/HOL/List.thy</a></p>\n<p>Thanks<br>\nTobias<br>\n<a href=\"/user_uploads/14278/gbCdpBO5GqueqA0zzzNGBBSP/smime.p7s\">smime.p7s</a></p>",
        "id": 294732830,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661188702
    },
    {
        "content": "<p>From: Jørgen Villadsen &lt;<a href=\"mailto:jovi@dtu.dk\">jovi@dtu.dk</a>&gt;<br>\nThanks for adding them to HOL/List.thy (map_fst_zip_take and map_snd_zip_take).</p>\n<p>Jørgen</p>",
        "id": 294732840,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661188708
    }
]