[
    {
        "content": "<p>From: Brian Huffman &lt;<a href=\"mailto:huffman@in.tum.de\">huffman@in.tum.de</a>&gt;<br>\nOne obstacle to code generation in HOLCF is the application operator:<br>\nIf you have a HOLCF function \"foo\" with equation \"foo\\&lt;cdot&gt;x = x\",<br>\nthe code generator will try to interpret this as a defining equation<br>\nfor \"op \\&lt;cdot&gt;\" (because that is the top-most constant on the lhs)<br>\ninstead of \"foo\", as intended.</p>\n<p>If there is demand for code generation in HOLCF, it would probably be<br>\nworthwhile to put some effort into implementing it. It might be easy<br>\nto modify the code generator to handle application operators.</p>\n<p>Alternatively, we could implement some new HOLCF automation: We could<br>\ndefine full-function-space copies of constants with<br>\ncontinuous-function types, and translate code equations involving<br>\n\\&lt;cdot&gt; to use these copies.</p>\n<ul>\n<li>Brian</li>\n</ul>",
        "id": 294162326,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660853603
    }
]