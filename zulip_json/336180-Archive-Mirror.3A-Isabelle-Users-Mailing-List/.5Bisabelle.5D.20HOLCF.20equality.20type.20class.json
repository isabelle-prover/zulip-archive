[
    {
        "content": "<p>From: Christian Sternagel &lt;<a href=\"mailto:c-sterna@jaist.ac.jp\">c-sterna@jaist.ac.jp</a>&gt;<br>\nDear all,</p>\n<p>currently we have:</p>\n<p>\"eq⋅x⋅y = TT ⟹ x = y\"<br>\n   \"eq⋅x⋅y = FF ⟹ x ≠ y\"<br>\n   \"eq⋅x⋅⊥ = ⊥\"<br>\n   \"eq⋅⊥⋅y = ⊥\"</p>\n<p>After giving this some thought I think that the first rule is <br>\nproblematic since it does only hold for 'eq' instances that implement <br>\nsyntactic equality. I guess all standard and 'deriving' instances of Eq <br>\nin Haskell implement syntactic equality. However, it might be useful for <br>\na programmer to compare 'normalized' values for some types (e.g., data <br>\nFrac = Frac Int Int). With our current definition this is not possible. <br>\nWe could</p>\n<ul>\n<li>\n<p>disallow instances of eq which do not implement syntactic equality <br>\n(but that is rather restrictive on all functions using 'eq')</p>\n</li>\n<li>\n<p>parametrize eq by some equivalence relation (which would be (=) for <br>\nmany instances)</p>\n</li>\n<li>\n<p>...</p>\n</li>\n</ul>\n<p>What do you think?</p>\n<p>cheers</p>\n<p>chris</p>",
        "id": 294217510,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660895701
    },
    {
        "content": "<p>From: Brian Huffman &lt;<a href=\"mailto:huffman@in.tum.de\">huffman@in.tum.de</a>&gt;<br>\nPerhaps you could split eq into two separate classes: One only<br>\nrequires eq to be an equivalence relation, and the other requires eq<br>\nto implement actual equality. You could prove a subclass relation<br>\nbetween the two.</p>\n<p>In general, I suppose that a single Haskell class might need to<br>\ncorrespond to a whole collection of Isabelle classes, since there may<br>\nbe several different sets of possible laws that correspond to the same<br>\nset of overloaded functions. It would probably be good to come up with<br>\na standard naming scheme for these kinds of situations.</p>\n<ul>\n<li>Brian</li>\n</ul>\n<p>P.S. I'm not sure if we ever advertised your sourceforge project on<br>\nthe users list, maybe only on the dev list.</p>\n<p>Anyway, we are building a collection of libraries for HOLCF in<br>\nIsabelle2012; the aim is to formalize many of the functions and type<br>\nclasses from the Haskell prelude. I encourage anyone interested in<br>\nformalizing Haskell programs to have a look!</p>\n<p><a href=\"http://sourceforge.net/p/holcf-prelude/\">http://sourceforge.net/p/holcf-prelude/</a></p>",
        "id": 294217547,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660895726
    },
    {
        "content": "<p>From: Joachim Breitner &lt;<a href=\"mailto:breitner@kit.edu\">breitner@kit.edu</a>&gt;<br>\nHi,</p>\n<p>some wildly-used instances like the one for lazy bytestrings do not<br>\nimplement syntactic equality:<br>\n<a href=\"http://hackage.haskell.org/packages/archive/bytestring/latest/doc/html/src/Data-ByteString-Lazy.html#line-245\">http://hackage.haskell.org/packages/archive/bytestring/latest/doc/html/src/Data-ByteString-Lazy.html#line-245</a></p>\n<p>Bytestrings itself might not be formalized soon in your project, but it<br>\nis a point towards the equivalence relation parametrized variant.</p>\n<p>Greetings,<br>\nJoachim<br>\n<a href=\"/user_uploads/14278/wK-GHZGdaRFjP-tkh4MwHgNY/signature.asc\">signature.asc</a></p>",
        "id": 294217684,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660895800
    }
]