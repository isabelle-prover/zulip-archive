[
    {
        "content": "<p>From: Florian Haftmann &lt;<a href=\"mailto:florian.haftmann@informatik.tu-muenchen.de\">florian.haftmann@informatik.tu-muenchen.de</a>&gt;<br>\nMatthias Berg wrote:<br>\nDear Matthias,</p>\n<p>type \"term\" is not type \"term\" -- the same structure is used for<br>\ndifferent purposes.</p>\n<p>Usually, \"term\" is used to represent abstract lambda terms inside the<br>\nsystem.  For these, the operations in Logic, HOLogic etc. are designed.<br>\n But \"term\" are also (mis)used to reprent a certain stage during<br>\nparsing/printing.  It seems to be the \"term\"s your code receives stem<br>\nfrom that -- can you provide more context?</p>\n<p>Cheers<br>\n    Florian<br>\n<a href=\"/user_uploads/14278/M95Sltsfctws4rfvpUT70tKh/florian.haftmann.vcf\">florian.haftmann.vcf</a><br>\n<a href=\"/user_uploads/14278/dW69fgSEGs0L_P7yCEld6OLz/signature.asc\">signature.asc</a></p>",
        "id": 294058829,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660822715
    },
    {
        "content": "<p>From: Amine Chaieb &lt;<a href=\"mailto:chaieb@in.tum.de\">chaieb@in.tum.de</a>&gt;<br>\nDear Matthias,</p>\n<p>Indeed Const (\"List.list.Cons\", _) is the right implementation and not <br>\nConst (\"Cons\", _). If you use the interactive mode and interpret e.g.<br>\nML{* @{term \"Cons\"} *} in a theory higher than List.thy, you will see <br>\nthat the output is indeed the first and not the second representation <br>\nabove. To convince yourself, you can try to certify a term built by just <br>\n\"Cons\" e.g.<br>\n  ML{* cterm_of @{theory} (Const(\"Cons\",@{typ \"'a list\"}))*}<br>\nand you will see that Isabelle refuses this term as valid.</p>\n<p>Terms (datatype term) as pointed out by Florian, is very liberal and <br>\ncontains many \"ill-formed\" terms.</p>\n<p>Hope this helps,<br>\nAmine.</p>\n<p>Matthias Berg wrote:</p>",
        "id": 294058943,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660822776
    },
    {
        "content": "<p>From: Matthias Berg &lt;<a href=\"mailto:berg@cs.uni-sb.de\">berg@cs.uni-sb.de</a>&gt;<br>\nHi,</p>\n<p>I just tried to use the function HOLogic.dest_string and it seems that<br>\nits pattern matching does not work. The function dest_list tries to<br>\nmatch terms like  (Const (\"List.list.Cons\", _) $ t $ u) but I think it<br>\nshould be just (Const (\"Cons\", _) $ t $ u). The same problem occurs in<br>\nother functions as well. The following works for me:</p>\n<p>fun dest_nibble t =<br>\n  let fun err () = raise TERM (\"dest_nibble\", [t]) in<br>\n    (case try (unprefix \"Nibble\" o fst o Term.dest_Const) t of<br>\n      NONE =&gt; err ()<br>\n    | SOME c =&gt;<br>\n        if size c &lt;&gt; 1 then err ()<br>\n        else if \"0\" &lt;= c andalso c &lt;= \"9\" then ord c - ord \"0\"<br>\n        else if \"A\" &lt;= c andalso c &lt;= \"F\" then ord c - ord \"A\" + 10<br>\n        else err ())<br>\n  end;<br>\nfun dest_char (Const (\"Char\", _) $ t $ u) =<br>\n      dest_nibble t * 16 + dest_nibble u<br>\n  | dest_char t = raise TERM (\"dest_char\", [t]);<br>\nfun dest_list (Const (\"Nil\", _)) = []<br>\n  | dest_list (Const (\"Cons\", _) $ t $ u) = t :: dest_list u<br>\n  | dest_list t = raise TERM (\"dest_list\", [t]);<br>\nval dest_string = implode o map (chr o dest_char) o dest_list;</p>\n<p>Sincerely,<br>\nMatthias Berg<br>\n<a href=\"/user_uploads/14278/o5VLo9mOOBcB_vwVO5_pdlf6/smime.p7s\">smime.p7s</a></p>",
        "id": 294060042,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660823234
    }
]