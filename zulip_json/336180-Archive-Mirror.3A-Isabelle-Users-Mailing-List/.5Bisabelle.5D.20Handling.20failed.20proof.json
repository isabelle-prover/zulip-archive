[
    {
        "content": "<p>From: John Munroe &lt;<a href=\"mailto:munddr@gmail.com\">munddr@gmail.com</a>&gt;<br>\nHi,</p>\n<p>I'm wondering why the exception handling in the following doesn't<br>\nbehave what I expected to. Does it not try to prove goal1, and if it<br>\nfails, it tries to prove goal2? goal2 should be provable, but I still<br>\nget a Proof failed exception.</p>\n<p>let<br>\n  val ctxt = @{context}<br>\n  val goal1 = @{prop \"EX x y. x &gt; y\"}<br>\n  val goal2 = @{prop \"EX (x::real) y. x &gt; y\"}<br>\nin<br>\n  Goal.prove ctxt [] [] goal1<br>\n   (fn _ =&gt; auto_tac (clasimpset_of ctxt))<br>\n   handle THM _ =&gt;<br>\n  Goal.prove ctxt [] [] goal2<br>\n   (fn _ =&gt; auto_tac (clasimpset_of ctxt))<br>\nend;</p>\n<p>Thank you for the help.</p>\n<p>John</p>",
        "id": 294116135,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660838367
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nThe exception produced by Goal.prove is ERROR, not THM (which is a for <br>\noperations close to the inference kernel).</p>\n<p>Normally you would organize proof attempts using tacticals such as ORELSE, <br>\nwithin a single goal state configuration.</p>\n<p>Makarius</p>",
        "id": 294116150,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660838374
    },
    {
        "content": "<p>From: Alexander Krauss &lt;<a href=\"mailto:krauss@in.tum.de\">krauss@in.tum.de</a>&gt;<br>\nJohn Munroe wrote:<br>\n[...]</p>\n<p>The Goal module catches the internal THM exception itself and re-raises <br>\nit as a user error (exception ERROR). So the \"handle THM _\" does not <br>\ncatch it...</p>\n<p>Alex</p>",
        "id": 294116161,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660838380
    },
    {
        "content": "<p>From: Jeremy Dawson &lt;<a href=\"mailto:jeremy@rsise.anu.edu.au\">jeremy@rsise.anu.edu.au</a>&gt;<br>\nJohn Munroe wrote:<br>\nJohn,</p>\n<p>Without addressing your specific example closely,  I can just point out <br>\nthat to talk of a tactic application \"failing\" (as the documentation <br>\ndoes) is potentially ambiguous.</p>\n<p>It  can mean<br>\n(1) the resulting lazy list of new proof states is empty<br>\n(2) an ML exception is raised</p>\n<p>Needless to say one sort of failure can (and no doubt there are examples <br>\nin the code) can be converted to the other</p>\n<p>I'd guess that this issue would explain the unexpected behaviour</p>\n<p>Jeremy</p>",
        "id": 294116215,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660838398
    },
    {
        "content": "<p>From: John Munroe &lt;<a href=\"mailto:munddr@gmail.com\">munddr@gmail.com</a>&gt;</p>\n<blockquote>\n<p>Without addressing your specific example closely,  I can just point out that<br>\nto talk of a tactic application \"failing\" (as the documentation does) is<br>\npotentially ambiguous.</p>\n<p>It  can mean<br>\n(1) the resulting lazy list of new proof states is empty<br>\n(2) an ML exception is raised</p>\n<p>Needless to say one sort of failure can (and no doubt there are examples in<br>\nthe code) can be converted to the other</p>\n<p>I'd guess that this issue would explain the unexpected behaviour<br>\n</p>\n</blockquote>\n<p>Handling ERROR instead solves my problem. Thanks!</p>\n<p>John</p>\n<blockquote>\n<p>Jeremy</p>\n</blockquote>",
        "id": 294116283,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660838404
    }
]