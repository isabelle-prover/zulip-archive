[
    {
        "content": "<p>From: Martin Ellis &lt;<a href=\"mailto:m.a.ellis@ncl.ac.uk\">m.a.ellis@ncl.ac.uk</a>&gt;<br>\nHi,</p>\n<p>I've been trying to model sequential hardware based on <br>\nTom Melham's \"Higher Order Logic and Hardware Verification\":<br>\n<a href=\"http://www.dcs.gla.ac.uk/~tfm/Papers/HVbook.html\">http://www.dcs.gla.ac.uk/~tfm/Papers/HVbook.html</a></p>\n<p>The idea is that there is:</p>\n<ul>\n<li>abstract time, maybe the duration of a clock cycle</li>\n<li>\n<p>concrete time, could represent a gate delay, or a femto-second,<br>\n  or whatever, it doesn't really matter as long as its units are longer<br>\n   than abstract time units.</p>\n</li>\n<li>\n<p>a predicate P t, which is true for every concrete time t for<br>\n  which there is a corresponding abstract time</p>\n</li>\n<li>\n<p>a relation Istimeof P n t, which is true iff P is true for the n'th time<br>\n   at t.</p>\n</li>\n<li>\n<p>a function Time of P n, which I think is either defined<br>\n   Timeof P n == (SOME t. Istimeof P n t); or<br>\n   Timeof P n == (THE t. Istimeof P n t)</p>\n</li>\n<li>\n<p>Inf P is true iff P is True infinitely often:  ALL t.EX t'. t' &gt; t /\\ P t'</p>\n</li>\n</ul>\n<p>0    1           &lt; --- Abstract time</p>\n<hr>\n<p>|      \\</p>\n<hr>\n<p>0 1 2 3 4    &lt;--- Concrete time<br>\nT F F T F      &lt;--- P</p>\n<p>I've been trying to show Theorem 6.1 in the book<br>\n   Inf P --&gt; (EX! t. Istimeof P n t)<br>\nwhich Melham suggests is proved by showing existence (\"by induction on n\") and <br>\nuniqueness (also by induction on n) separately, but have two big problems.</p>\n<p>Firstly, I don't seem to be able to do the induction step of the existence <br>\npart.  I've attached my attempt...<br>\nLooking at the definitions, I thought complete induction (using <br>\nnat_less_induct) might be more appropriate  -  however I didn't get anywhere <br>\nat all using that...</p>\n<p>Secondly, I can't figure out how to do the uniqueness part.<br>\nThe file I've attached contains a simpler uniqueness proof, and I can't find <br>\nany examples that suggest how I might approach it.<br>\n(Actually, I read the \"Advanced Induction Techniques\" section in the tutorial, <br>\nbut still can't quite get there)</p>\n<p>You'll understand that this rather scuppers all proof attempts I've made.</p>\n<p>(The other thing I don't understand is that, although I can't prove lemmas of <br>\nthe form (Inf P) --&gt; Q, and hence (ALL t. EX t'. t &lt; t'  /\\ P t) --&gt; Q,<br>\nI do seem to be able to prove those of the form<br>\nALL t. EX t'. t &lt; t'  /\\ P t --&gt; Q, i.e. where the quantifiers scope over the <br>\nentire expression, including Q, rather than just the anticedent.  The reason <br>\nI find this strange is because none of the quantified variables occur in Q.)</p>\n<p>Can anyone suggest how to proceed?  I've spent the best part of a fortnight <br>\ngoing around in circles.  :o(     Surely somebody has done this before, no?<br>\nPerhaps there are more appropriate constructs in Isabelle/HOL to model this?</p>\n<p>Thanks<br>\nMartin<br>\n<a href=\"/user_uploads/14278/zJ5OV9rhkyl21LRLP6yqezJe/MelhamQ.thy\">MelhamQ.thy</a></p>",
        "id": 293896294,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660742802
    }
]