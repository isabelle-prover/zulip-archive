[
    {
        "content": "<p>From: Andreas Lochbihler &lt;<a href=\"mailto:andreas.lochbihler@kit.edu\">andreas.lochbihler@kit.edu</a>&gt;<br>\nDear Haskabelle developers,</p>\n<p>I am trying to import some Haskell code using Haskabelle for Isabelle2011-1. So <br>\nfar, I ran into the following two problems:</p>\n<ol>\n<li>Bound variable names clash with previous constant names.<br>\nFor example, in the following Haskell program</li>\n</ol>\n<p>f = \\x -&gt; x<br>\ng = f<br>\nh f = (f, g)</p>\n<p>f is bound in h's definition, but also defined previously.</p>\n<p>Haskabelle generates the following definitions in Isabelle:</p>\n<p>definition f where \"f = (% x . x)\"<br>\ndefinition g where \"g = f\"<br>\nfun h where \"h f = (f, g)\"</p>\n<p>Obviously, this is not what I want, because h's definition now \"pattern-matches\" <br>\non the constant f, but it should actually be as follows:</p>\n<p>fun h where \"!!f. h f = (f, g)\"</p>\n<p>The same problem also occurs with predefined constants from the Isabelle <br>\nlibrary. I suggest that Haskabelle explicitly adds the universal quantification <br>\nto all bound variables that occur on the left-hand equation of a function <br>\ndefinition such that it need not know which names are used.</p>\n<p>Is there some other way than manually renaming all such variables in the Haskell <br>\ncode? This is something I actually want to avoid.</p>\n<ol start=\"2\">\n<li>do notation<br>\nApparently, Haskabelle has some undocumented support for do notation and monads. <br>\nAt least, this is what I gather from the files in ex/ and the error message for <br>\nthe following program:</li>\n</ol>\n<p>f = do {<br>\n   x &lt;- [1,2];<br>\n   y &lt;- [x + 1];<br>\n   [y]<br>\n}</p>\n<p>haskabelle_bin: Do syntax is used without sufficient type information!</p>\n<p>What type information do I have to add (and where) such that such examples <br>\ncompile? Actually, I would have expected that no type information were <br>\nnecessary, because Isabelle's parser setup for do notation in <br>\nLibrary/Monad_Syntax should resolve the operations correctly.<br>\nCan I configure Haskabelle to use that setup?</p>\n<p>Thanks for any help,<br>\nAndreas</p>",
        "id": 294153376,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660850171
    },
    {
        "content": "<p>From: Florian Haftmann &lt;<a href=\"mailto:florian.haftmann@informatik.tu-muenchen.de\">florian.haftmann@informatik.tu-muenchen.de</a>&gt;<br>\nHi Andreas,</p>\n<p>maybe Gerwin can point you to some reference â€“ that do-notation<br>\nextension was developed at NICTA, AFAIR.</p>\n<p>Florian</p>",
        "id": 294153483,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660850227
    }
]