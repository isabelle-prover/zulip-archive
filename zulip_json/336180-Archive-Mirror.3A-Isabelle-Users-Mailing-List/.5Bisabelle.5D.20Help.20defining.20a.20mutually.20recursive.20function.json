[
    {
        "content": "<p>From: Corey Richardson &lt;<a href=\"mailto:corey@octayn.net\">corey@octayn.net</a>&gt;<br>\nGreetings,</p>\n<p>In a theory I'm working on, I'm having challenges defining a mutually<br>\nrecursive function.</p>\n<p>Here's the repository and the particular function:</p>\n<p><a href=\"https://gitlab.com/cmr/rust-semantics/blob/unsigned/MIR_SimpleEvals.thy#L38\">https://gitlab.com/cmr/rust-semantics/blob/unsigned/MIR_SimpleEvals.thy#L38</a></p>\n<p>I think I need to prove that read_array does not make a larger \"t\" for<br>\nthe higher-order function passed in. I'm not sure how to do this either.</p>\n<p>pat_completeness auto also doesn't show completeness of the pattern<br>\nmatches, which I do not understand. They seem complete to me at least!</p>\n<p>I also suspect I'll need some congruence rule for read_array, but even<br>\nafter studying examples of congruence rules from the functions.pdf and<br>\nthe Isabelle libraries, I'm not sure what it should be.</p>\n<p>Thanks for any help.<br>\n<a href=\"/user_uploads/14278/I2vyS5yfvlriRrKW13-Iv0oh/signature.asc\">signature.asc</a></p>",
        "id": 294691203,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661177845
    },
    {
        "content": "<p>From: Lars Hupel &lt;<a href=\"mailto:hupel@in.tum.de\">hupel@in.tum.de</a>&gt;<br>\nHi Corey,</p>\n<p>let's start with the simple question:</p>\n<blockquote>\n<p>pat_completeness auto also doesn't show completeness of the pattern<br>\nmatches, which I do not understand. They seem complete to me at least!</p>\n</blockquote>\n<p>They are overlapping as you have written them down. As opposed to \"fun\",<br>\n\"function\" by default does not consider pattern matches to be<br>\nsequential. That is, your sixth equation matches everything the others<br>\nmatched, too. The fix is easy: use \"function (sequential)\" instead, and<br>\n\"pat_completeness auto\" will solve it.</p>\n<blockquote>\n<p>I think I need to prove that read_array does not make a larger \"t\" for<br>\nthe higher-order function passed in. I'm not sure how to do this either.</p>\n<p>I also suspect I'll need some congruence rule for read_array, but even<br>\nafter studying examples of congruence rules from the functions.pdf and<br>\nthe Isabelle libraries, I'm not sure what it should be.</p>\n</blockquote>\n<p>\"read_array\" looks complicated, because the calls of the callback<br>\nfunction look quite irregular. Have you tried inlining the definition of<br>\n\"read_array\", i.e. remove the callback and define it as part of the<br>\nmutual bundle?</p>\n<p>(In my personal experience, while this complicates some proofs because<br>\nof the now three-way-mutual definition, it greatly simplifies some others.)</p>\n<p>Also, the \"Option.bind ... (Some o ValArray)\" looks suspicious. Why are<br>\nyou \"bind\"ing if you're always feeding in a \"Some\"?</p>\n<p>Cheers<br>\nLars</p>",
        "id": 294691384,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661177910
    },
    {
        "content": "<p>From: Corey Richardson &lt;<a href=\"mailto:corey@octayn.net\">corey@octayn.net</a>&gt;<br>\nOn 2016-10-06 5:29, Lars Hupel wrote:</p>\n<blockquote>\n<p>Hi Corey,</p>\n<p>let's start with the simple question:</p>\n<blockquote>\n<p>pat_completeness auto also doesn't show completeness of the pattern<br>\nmatches, which I do not understand. They seem complete to me at least!</p>\n</blockquote>\n<p>They are overlapping as you have written them down. As opposed to \"fun\",<br>\n\"function\" by default does not consider pattern matches to be<br>\nsequential. That is, your sixth equation matches everything the others<br>\nmatched, too. The fix is easy: use \"function (sequential)\" instead, and<br>\n\"pat_completeness auto\" will solve it.<br>\n</p>\n</blockquote>\n<p>Ah, that's simple. Thanks!</p>\n<blockquote>\n<blockquote>\n<p>I think I need to prove that read_array does not make a larger \"t\" for<br>\nthe higher-order function passed in. I'm not sure how to do this either.</p>\n<p>I also suspect I'll need some congruence rule for read_array, but even<br>\nafter studying examples of congruence rules from the functions.pdf and<br>\nthe Isabelle libraries, I'm not sure what it should be.</p>\n</blockquote>\n<p>\"read_array\" looks complicated, because the calls of the callback<br>\nfunction look quite irregular. Have you tried inlining the definition of<br>\n\"read_array\", i.e. remove the callback and define it as part of the<br>\nmutual bundle?</p>\n<p>(In my personal experience, while this complicates some proofs because<br>\nof the now three-way-mutual definition, it greatly simplifies some others.)<br>\n</p>\n</blockquote>\n<p>I was avoiding it for the complication you mention. Adding it as another<br>\nmutually recursive function indeed makes all my problems go away (for now).</p>\n<blockquote>\n<p>Also, the \"Option.bind ... (Some o ValArray)\" looks suspicious. Why are<br>\nyou \"bind\"ing if you're always feeding in a \"Some\"?<br>\n</p>\n</blockquote>\n<p>I was using it as a poor-man's map_option, before I noticed that<br>\nmap_option existed! I was looking for <a href=\"http://Option.map\">Option.map</a> and my search for<br>\nconstants used \"'a option =&gt; ('a =&gt; 'b) =&gt; 'b option\" instead of the<br>\nother way around for the arguments.</p>\n<p>Thanks Lars!<br>\n<a href=\"/user_uploads/14278/QGiIb6BViNPSRzKt9EG5Jz3v/signature.asc\">signature.asc</a></p>",
        "id": 294691563,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661177978
    }
]