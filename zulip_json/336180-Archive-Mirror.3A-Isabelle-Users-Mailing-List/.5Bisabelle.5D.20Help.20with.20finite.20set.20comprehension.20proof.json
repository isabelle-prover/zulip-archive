[
    {
        "content": "<p>From: George Karabotsos &lt;<a href=\"mailto:g_karab@encs.concordia.ca\">g_karab@encs.concordia.ca</a>&gt;<br>\nHello all,</p>\n<p>I am having difficutly proving the following lemma</p>\n<p>lemma \"\\&lt;lbrakk&gt; A = {x. 1 \\&lt;le&gt; x \\&lt;and&gt; x \\&lt;le&gt; (3::int)}\\&lt;rbrakk&gt; \\&lt;Longrightarrow&gt; (\\&lt;Sum&gt; A) = 6\"</p>\n<p>These are the steps I have followed by studying the HOL/Finite_Set.thy theory but I got stuck at the last one which I have commented out.</p>\n<p>apply(auto)<br>\n apply(unfold setsum_def)<br>\n apply(auto)<br>\n apply(unfold fold_def)<br>\n apply(rule the_equality)<br>\n apply(induct set: finite)<br>\nthm foldSet.emptyI<br>\n(* apply(rule foldSet.emptyI) *)<br>\noops</p>\n<p>Any help will be much appreciated!</p>\n<p>TIA,</p>\n<p>George</p>",
        "id": 294063691,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660824657
    },
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\nlemma enum3: \"{x::int. 1 &lt;= x &amp; x &lt;= 3} = {1,2,3}\"<br>\nby auto</p>\n<p>lemma \"(\\&lt;Sum&gt; {x. 1 &lt;= x &amp; x &lt;= (3::int)}) = 6\"<br>\nby(simp add:enum3)</p>\n<p>Regards<br>\nTobias</p>\n<p>George Karabotsos schrieb:</p>",
        "id": 294063711,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660824665
    },
    {
        "content": "<p>From: Perry James &lt;<a href=\"mailto:perry@dsrg.org\">perry@dsrg.org</a>&gt;<br>\nThanks for the proof.  What if we have a lemma that does not use constants?<br>\nIs there a general approach to dealing with set comprehensions?<br>\ne.g.,<br>\nlemma \"[| 0 &lt; (n::int) |] ==&gt; (\\&lt;Sum&gt; {x. 1 &lt;= x &amp; x &lt;= n}) = n + (\\&lt;Sum&gt;<br>\n{x. 1 &lt;= x &amp; x &lt;= n - 1})\"</p>\n<p>Thanks again,<br>\nPerry</p>",
        "id": 294063736,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660824677
    },
    {
        "content": "<p>From: Amine Chaieb &lt;<a href=\"mailto:chaieb@in.tum.de\">chaieb@in.tum.de</a>&gt;<br>\nThe following works for me:</p>\n<p>lemma setinterval_iff: \"{x. a &lt;= x &amp; x &lt;= b} = {a .. b}\"<br>\n   by auto</p>\n<p>lemma<br>\n   assumes n: \"0 &lt; (n::int)\"<br>\n   shows \"\\&lt;Sum&gt; {x. 1 &lt;= x &amp; x &lt;= n} = n + \\&lt;Sum&gt; {x. 1 &lt;= x &amp; x &lt;= n - 1}\"<br>\nproof-<br>\n   let ?A = \"{1 .. n}\"<br>\n   let ?B = \"{1 .. n - 1}\"<br>\n   let ?C = \"{n}\"<br>\n   have abc: \"finite ?B\" \"finite ?C\" \"?B Int ?C = {}\" \"?B Un ?C = ?A\" <br>\nusing n by auto<br>\n   from setsum_Un_disjoint[OF abc(1-3), of \"%x. x\"]<br>\n   show ?thesis  unfolding abc(4) setinterval_iff by simp<br>\nqed</p>\n<p>Amine.</p>\n<p>Perry James wrote:</p>",
        "id": 294063780,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660824700
    },
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;</p>\n<blockquote>\n<p>Thanks for the proof.  What if we have a lemma that does not use constants?<br>\nIs there a general approach to dealing with set comprehensions?</p>\n</blockquote>\n<p>Yes: avoid them when dealing with sums, use intervals like {i..j} instead.</p>\n<blockquote>\n<p>e.g.,<br>\nlemma \"[| 0 &lt; (n::int) |] ==&gt; (\\&lt;Sum&gt; {x. 1 &lt;= x &amp; x &lt;= n}) = n + (\\&lt;Sum&gt;<br>\n{x. 1 &lt;= x &amp; x &lt;= n - 1})\"</p>\n</blockquote>\n<p>I would not use such a recursive formulation but prove a closed formula <br>\nfor the sum over an interger interval. There are some examples at the <br>\nend of SetInterval.thy.</p>\n<p>Tobias</p>\n<blockquote>\n<p>Thanks again,<br>\nPerry</p>\n<p>On Sat, Jul 12, 2008 at 8:48 AM, Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt; wrote:</p>\n<blockquote>\n<p>lemma enum3: \"{x::int. 1 &lt;= x &amp; x &lt;= 3} = {1,2,3}\"<br>\nby auto</p>\n<p>lemma \"(\\&lt;Sum&gt; {x. 1 &lt;= x &amp; x &lt;= (3::int)}) = 6\"<br>\nby(simp add:enum3)</p>\n<p>Regards<br>\nTobias</p>\n<p>George Karabotsos schrieb:</p>\n<p>Hello all,</p>\n<blockquote>\n<p>I am having difficutly proving the following lemma</p>\n<p>lemma \"\\&lt;lbrakk&gt; A = {x. 1 \\&lt;le&gt; x \\&lt;and&gt; x \\&lt;le&gt; (3::int)}\\&lt;rbrakk&gt;<br>\n\\&lt;Longrightarrow&gt; (\\&lt;Sum&gt; A) = 6\"</p>\n<p>These are the steps I have followed by studying the HOL/Finite_Set.thy<br>\ntheory but I got stuck at the last one which I have commented out.</p>\n<p>apply(auto)<br>\n apply(unfold setsum_def)<br>\n apply(auto)<br>\n apply(unfold fold_def)<br>\n apply(rule the_equality)<br>\n apply(induct set: finite)<br>\nthm foldSet.emptyI<br>\n(* apply(rule foldSet.emptyI) *)<br>\noops</p>\n<p>Any help will be much appreciated!</p>\n<p>TIA,</p>\n<p>George</p>\n</blockquote>\n</blockquote>\n</blockquote>",
        "id": 294063791,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660824704
    }
]