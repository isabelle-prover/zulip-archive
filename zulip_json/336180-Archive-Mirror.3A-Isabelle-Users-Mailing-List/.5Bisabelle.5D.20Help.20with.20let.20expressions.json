[
    {
        "content": "<p>From: Glauber Cabral &lt;<a href=\"mailto:glauber.sp@gmail.com\">glauber.sp@gmail.com</a>&gt;<br>\nDear Isabelle users.</p>\n<p>I've been using Isabelle as the theorem prover of Hets environment to prove<br>\nHasCASL specifications to my master thesis and I'm still a starter in this<br>\nfield.<br>\nI'm trying to prove the ZipSpec theorem (attached file) that shows the<br>\nproperty of Haskell unzip/zip function. This is the first theorem that uses<br>\nlet definitions and I've got problems with this.<br>\nI try do use Let_def and decompose let definitions, but I guess I'm going to<br>\nstart a loop (the last apply command is again a let decomposition and it<br>\nsuggests that induction should be used, I guess). Can anyone give any<br>\nsuggestion or example of how to deal with let definition? The example in the<br>\ntutorial is trivial and I could not get much far from there.</p>\n<p>Thank you in advance,<br>\nGlauber.</p>\n<p>PS: The files the .thy file imports are attached and they should work OK<br>\nfrom the same folder. The 3 files are also compressed as I don't know if<br>\nthis list accept zip or not. Sorry by this duplication.<br>\n<a href=\"/user_uploads/14278/e3oBrfkmNw76PniaY3LcKKgp/email.zip\">email.zip</a><br>\n<a href=\"/user_uploads/14278/dR4wbMvZDFG2wf2xdy4a9zCU/MainHCPairs.thy\">MainHCPairs.thy</a><br>\n<a href=\"/user_uploads/14278/AXkDzQOoGmWLCdD4MmQOwmv5/prelude.ML\">prelude.ML</a><br>\n<a href=\"/user_uploads/14278/OLfLz1FpzqV0lHsU-qf0B3Tl/Prelude_List_E2.thy\">Prelude_List_E2.thy</a></p>",
        "id": 294066471,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660825609
    },
    {
        "content": "<p>From: Florian Haftmann &lt;<a href=\"mailto:florian.haftmann@informatik.tu-muenchen.de\">florian.haftmann@informatik.tu-muenchen.de</a>&gt;<br>\nHi Glauber,</p>\n<p>Attached I have a sketch how a proof using induction could work (the<br>\nproblem indeed has nothing to do with let).  Note that there are some<br>\nauxiliary lemmas involving X_Ints and length' which surely hold but I<br>\ndid not prove in detail.</p>\n<p>An alternative could be to provide a rule for simultaneous induction on<br>\ntwo lists in the manner of the HOL theorem \"list_induct2\".</p>\n<p>I don't know the details of the project and to which extent the<br>\nfoundations are firm or can be changed, but after a look at the sources<br>\na few observations (in descending relevance):</p>\n<ul>\n<li>\n<p>You work with types X_Int and X_List which seem to be <em>copies</em> of the<br>\nexisting HOL ints and lists.  It will be an <em>enormous</em> effort to provide<br>\nenough lemmas to prove reasonable things with it (remember the auxiliary<br>\nlemmas I have mentioned above).  If it is in accordance with the aims of<br>\nthe projects, I would recommend to use HOL ints and lists.</p>\n</li>\n<li>\n<p>The attribute [rule_format] is superfluous if you write down the<br>\npropositions using meta connectives \\&lt;And&gt; and ==&gt; instead of ALL and --&gt;.</p>\n</li>\n<li>\n<p>Prelude_List_E2 does a lot in order to provide tupled syntax for the<br>\noperations;  if there is no reason for this, it could be left out easily.</p>\n</li>\n<li>\n<p>constdefs/axioms are now (Isabelle2008) superseeded (though still<br>\npresent) by definition/axiomatization</p>\n</li>\n<li>\n<p>You can incorporate ML code directly into theory files using ML {* ...<br>\n*} sections.</p>\n</li>\n</ul>\n<p>Feel free to ask further questions.</p>\n<p>Hope this helps<br>\n    Florian<br>\n<a href=\"/user_uploads/14278/-9hrwKZX53MqI-hBBGs-wyx6/ExampleProof.thy\">ExampleProof.thy</a><br>\n<a href=\"/user_uploads/14278/Cr0kEzIsVRKPv55b4k7-pV71/florian.haftmann.vcf\">florian.haftmann.vcf</a><br>\n<a href=\"/user_uploads/14278/aDgzu6QE8J0Qvuxo44tycFTJ/signature.asc\">signature.asc</a></p>",
        "id": 294066519,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660825630
    }
]