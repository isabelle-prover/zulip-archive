[
    {
        "content": "<p>From: Adamu Sani YAHAYA &lt;<a href=\"mailto:adamusaniyahaya@gmail.com\">adamusaniyahaya@gmail.com</a>&gt;<br>\nHello.<br>\nplease can anyone help me to solve my problem. I want to apply plus<br>\nassociativity but is not working. please what can I do.<br>\nthe code is here:<br>\ntheory Sumlist<br>\nimports Datatype  Nat<br>\nbegin</p>\n<p>datatype 'a list = Nil                     (\"[]\")<br>\n               | cons 'a \"'a list\"        (infixr \"#\" 65)</p>\n<p>primrec sum_list' :: \"nat list  =&gt; nat\" where<br>\n\"sum_list' []  = 0\"<br>\n| \"sum_list' (x#xs)  = x + sum_list' xs \"</p>\n<p>primrec sum_list_compute :: \"nat list =&gt; nat =&gt; nat\" where<br>\n\"sum_list_compute [] y = y\"<br>\n| \"sum_list_compute (x#xs) y  = sum_list_compute xs (y + x)\"</p>\n<p>primrec sum_list :: \"nat list  =&gt; nat\" where<br>\n\"sum_list []  = 0\"<br>\n| \"sum_list (x#xs)  = sum_list_compute xs x \"</p>\n<p>lemma help1:\"\\&lt;forall&gt; x n L. (x + n ) + sum_list' L = sum_list' ((x + n)#<br>\nL) \"<br>\napply simp<br>\ndone<br>\nlemma help2 :\" \\&lt;forall&gt; x a L .  x + (a + sum_list' L) = (x + a) +<br>\nsum_list' L \"<br>\napply simp<br>\ndone<br>\ntheorem sum_list_compute_relation:\" sum_list'( x # Ls)= sum_list_compute Ls<br>\nx\"<br>\napply(induct_tac Ls)<br>\napply(auto)<br>\napply(rule help2)<br>\ndone<br>\nAdamu sani yahaya<br>\nthanks</p>",
        "id": 294286610,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660922084
    },
    {
        "content": "<p>From: Manuel Eberl &lt;<a href=\"mailto:eberlm@in.tum.de\">eberlm@in.tum.de</a>&gt;<br>\nHallo,</p>\n<p>The problem is not associativity of plus, that gets applied<br>\nautomatically. The problem is that your induction does not work this<br>\nway, because the second parameter of sum_list_compute is fixed to x;<br>\nhowever, in the induction step, you change it to x + y. You therefore<br>\nneed to generalise over x using the “arbitrary” keyword:</p>\n<p>lemma sum_list_compute_relation: \"sum_list_compute Ls x = sum_list' (x #<br>\nLs)\"<br>\n  by (induct Ls arbitrary: x) simp_all</p>\n<p>Note that I also flipped the equation because it helps simp_all to<br>\nfigure out how to apply the induction hypothesis automatically,<br>\notherwise you would have had to instantiate it by hand.</p>\n<p>Also, your auxiliary lemmas don't really help, and if you do prove<br>\nauxiliary lemmas, you should not put the HOL universal quantifier ∀ in<br>\nfront of it. Just state it as</p>\n<p>lemma help1: \"(x + n ) + sum_list' L = sum_list' ((x + n)# L)\"</p>\n<p>The free variables get generalised automatically by convention, and putting an explicit HOL universal quantifier in front of the lemma makes it more difficult to apply it.</p>\n<p>Cheers,<br>\nManuel</p>",
        "id": 294286632,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660922091
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nSide remark: you should always import at least theory \"Main\", not anything <br>\nbelow it like \"Datatype\" or \"Nat\" above.</p>\n<p>Makarius</p>",
        "id": 294286895,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660922164
    }
]