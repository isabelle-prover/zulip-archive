[
    {
        "content": "<p>From: René Neumann &lt;<a href=\"mailto:rene.neumann@in.tum.de\">rene.neumann@in.tum.de</a>&gt;<br>\nHi,</p>\n<p>for modelling an AST I got lots of datatypes together with their<br>\nconstructors (about 100). As the types and the constructors have rather<br>\ngeneric names, I only want them to be accessed with a prefix. Normally I<br>\nwould use hide_const and hide_type for this, but explicitly writing all<br>\nof the 100 constructors again seems cumbersome and error-prone.</p>\n<p>Is there some generic mechanism for declaring them and NOT putting the<br>\nnames into the global namespace?</p>\n<p>A workaround I found is using datatype_new inside a locale, in the<br>\nfollowing manner</p>\n<p>locale ast<br>\nbegin</p>\n<p>datatype_new binOp = …<br>\ndatatype_new expr = …<br>\nend</p>\n<p>interpretation AST!: ast .</p>\n<p>(* register them all again for code-generation *)<br>\ndatatype_new_compat AST.binOP AST.expr …</p>\n<p>But it still feels somewhat wrong for me. Especially throwing two<br>\ndifferent datatype packages at it just for hiding names :)</p>\n<ul>\n<li>René<br>\n<a href=\"/user_uploads/14278/BIyu5kmiPIj2m_WlqZ2d9rTk/smime.p7s\">smime.p7s</a></li>\n</ul>",
        "id": 294260074,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660914042
    },
    {
        "content": "<p>From: \"Yannick Duchêne (Hibou57 )\" &lt;<a href=\"mailto:yannick_duchene@yahoo.fr\">yannick_duchene@yahoo.fr</a>&gt;<br>\nHello,</p>\n<p>May a solution can be found somewhere in “implementation.pdf”, from the  <br>\ndocumentation pan. I believe it's possible to modify a theory context  <br>\nusing an embedded SML function (embedded in the theory file), without a  <br>\nneed for modifying Isabelle internal (I'm looking at it, will be back if I  <br>\nfeel I've found anything useful in “implementation.pdf”).</p>",
        "id": 294260134,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660914065
    },
    {
        "content": "<p>From: \"Yannick Duchêne (Hibou57 )\" &lt;<a href=\"mailto:yannick_duchene@yahoo.fr\">yannick_duchene@yahoo.fr</a>&gt;<br>\nMay be looking at page 10 and later, “0.2 SML embedded into  <br>\nIsabelle/Isar”, then at page 59 and later, “2.1 Types”.</p>",
        "id": 294260147,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660914071
    },
    {
        "content": "<p>From: Dmitriy Traytel &lt;<a href=\"mailto:traytel@in.tum.de\">traytel@in.tum.de</a>&gt;<br>\nHi René,</p>\n<p>I guess this is about Isabelle2013-2.</p>\n<p>I think there is nothing wrong about this setup.</p>\n<p>The new (co)datatype package (which is still rapidly evolving) is <br>\nlocalized, while the old isn't. The command datatype_new_compat is a <br>\ncheap shortcut to backwards compatibility during this evolution period <br>\n(assuming your datatype is in the fragment of the old package). <br>\nEventually, when the new package is as integrated as the old one, it <br>\nshould be possible just to drop this command and its invocations.</p>\n<p>Actually, in the development repository (e.g. 010eefa0a4f3), you should <br>\nnot need datatype_new_compat for code generation (but there are other <br>\nuseful features that it gives you, notably the size function for <br>\nautomated termination proofs in \"fun\").</p>\n<p>Hope that helps,<br>\nDmitriy</p>",
        "id": 294260218,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660914094
    },
    {
        "content": "<p>From: René Neumann &lt;<a href=\"mailto:rene.neumann@in.tum.de\">rene.neumann@in.tum.de</a>&gt;<br>\nI came up with the following short snippet:</p>\n<p>setup {*<br>\n  let<br>\n    fun hide_const (c,_) thy = Sign.hide_const false c thy;<br>\n    fun hide_type t thy =<br>\n         let<br>\n           val t = Sign.intern_type thy t;<br>\n           val thy = case Datatype.get_constrs thy t of<br>\n                       NONE =&gt; thy (* Error would be better *)<br>\n                     | SOME xs =&gt; fold hide_const xs thy<br>\n         in<br>\n           Sign.hide_type false t thy<br>\n         end<br>\n    fun hide_all ts thy =<br>\n        fold hide_type ts thy<br>\n  in<br>\n    hide_all [\"binOp\", …]<br>\n  end<br>\n*}</p>\n<p>Probably specifying the list explicitly at the end can also scripted<br>\naway :).<br>\n<a href=\"/user_uploads/14278/fHizjWJpr5IDEt08pkG-DdAF/smime.p7s\">smime.p7s</a></p>",
        "id": 294260239,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660914103
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nThe most relevant section is 1.2.4 Name spaces, especially the \"chemical <br>\nequation\" about binding + naming.</p>\n<p>Here is a quick example:</p>\n<p>context<br>\nbegin</p>\n<p>local_setup {*<br>\n   Local_Theory.map_naming (Name_Space.mandatory_path \"<a href=\"http://foo.bar\">foo.bar</a>\")<br>\n*}</p>\n<p>definition \"a = True\"<br>\ndefinition \"b = False\"</p>\n<p>end</p>\n<p>Thus all name bindings that are applied in the context come out with the <br>\nextra prefix.</p>\n<p>This avoids the need to \"repair\" unintended name space access via the <br>\nold-fashioned \"hide\" operations.</p>\n<p>Makarius</p>",
        "id": 294260260,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660914115
    }
]