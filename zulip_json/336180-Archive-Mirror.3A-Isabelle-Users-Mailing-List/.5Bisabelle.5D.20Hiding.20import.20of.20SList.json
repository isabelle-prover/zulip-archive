[
    {
        "content": "<p>From: Denis Bueno &lt;<a href=\"mailto:dbueno@gmail.com\">dbueno@gmail.com</a>&gt;<br>\nHi all,</p>\n<p>I have a theory (attached) which imports Main and LList2 (available<br>\nfrom afp).  LList2 imports LList which imports SList, and the<br>\nimporting of SList makes defining recursive functions over normal<br>\nlists (from List) very difficult, because it seems all names have to<br>\nbe qualified.</p>\n<p>The following, for example, is not admitted due to a type clash:</p>\n<p>consts zipn :: \"'a List.list List.list =&gt; 'a List.list List.list\"<br>\n       any :: \"('a =&gt; bool) =&gt; 'a List.list =&gt; bool\"<br>\nprimrec<br>\n  \"any f List.Nil = False\"<br>\n  \"any f (List.Cons x xs) = (if f x then True else any f xs)\"<br>\n  \"zipn xss = (if any (%x. x = List.Nil) xss<br>\n               then []<br>\n               else List.Cons (map hd xss) (zipn (map tl xss)))\"</p>\n<p>Can I hide all SList-related stuff so I don't have to play games and<br>\nqualify every list-related function I call?<br>\n<a href=\"/user_uploads/14278/lRS75DEI449qCcLd-Fi_biea/Hyper.thy\">Hyper.thy</a></p>",
        "id": 294060421,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660823427
    },
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\nAn aside: It is usually better to avoid tests on lists like \"any\". <br>\nInstead of \"any f xs\" write \"EX x:set xs. f x\". Because now the existing <br>\nautomation for quatifiers and sets will kick in automatically.</p>\n<p>Tobias</p>\n<p>Denis Bueno wrote:</p>",
        "id": 294060455,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660823445
    },
    {
        "content": "<p>From: Lucas Dixon &lt;<a href=\"mailto:ldixon@inf.ed.ac.uk\">ldixon@inf.ed.ac.uk</a>&gt;<br>\n-----BEGIN PGP SIGNED MESSAGE-----<br>\nHash: SHA1</p>\n<p>I use the no_notation command for this kind of thing, for example to<br>\noverwrite the \"+\" symbol:</p>\n<p>no_notation plus (infixl \"+\" 65)<br>\nconsts \"myplus\" :: \"nat =&gt; nat =&gt; nat\"<br>\nnotation \"myplus\" (infixl \"+\" 65)<br>\ndefs myplus: \"a + b == ...\"</p>\n<p>I imagine you can do the same kind of thing to get the original List<br>\nnotation as you want it.</p>\n<p>best,<br>\nlucas</p>\n<p>Denis Bueno wrote:<br>\n-----BEGIN PGP SIGNATURE-----<br>\nVersion: GnuPG v1.4.7 (GNU/Linux)<br>\nComment: Using GnuPG with Fedora - <a href=\"http://enigmail.mozdev.org\">http://enigmail.mozdev.org</a></p>\n<p>iD8DBQFIKGPuiUn2r+81A2gRAlFTAJwOFey3pjJpY9nD0roGRvVUw4cO9wCeI+jV<br>\n/erb5NhNCEzvYlNuLBOD+7E=<br>\n=lxYN<br>\n-----END PGP SIGNATURE-----</p>",
        "id": 294060659,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660823526
    }
]