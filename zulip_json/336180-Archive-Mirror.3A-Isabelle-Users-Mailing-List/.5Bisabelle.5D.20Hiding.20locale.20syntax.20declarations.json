[
    {
        "content": "<p>From: Arvid Marx &lt;<a href=\"mailto:arvid.marx@logicandtypes.org\">arvid.marx@logicandtypes.org</a>&gt;<br>\nHi all,</p>\n<p>if I would want to redeclare, say, the notation for partial orders<br>\nwhile still importing Main and Orderings, it seems like I should just<br>\nuse </p>\n<p>no_notation Orderings.ord_class.less_eq (infix \"≤\" 50)</p>\n<p>since there seems to be no other option. However, this apparently<br>\ndoesn't work, as in</p>\n<p>locale preorder = <br>\n  fixes c :: \"'a set\"<br>\n  fixes leq :: \"'a ⇒ 'a ⇒ bool\" (infix \"(≤)\" 60)<br>\n  assumes reflexive : \"∀ x ∈ c. x ≤ x\"<br>\n  assumes transitive : \"∀x ∈ c. ∀y ∈ c. ∀ z ∈ c. x ≤ y ⟶ y ≤ z ⟶ x ≤ z\"</p>\n<p>locale partialOrder = preorder + <br>\n  assumes antisymmetric : \"∀ x ∈ c. (∀ y ∈ c. (x ≤ y ⟶ y ≤ x ⟶ x = y))\"</p>\n<p>reflexive, transitive and antisymmetric still produce heavily ambigous<br>\nparse trees that make use of Orderings.ord_class.less_eq, even when<br>\nboth the constant and the notation is hidden.</p>\n<p>I'd appreciate any tips.</p>\n<ul>\n<li>Arvid Marx</li>\n</ul>",
        "id": 294822604,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661242887
    }
]