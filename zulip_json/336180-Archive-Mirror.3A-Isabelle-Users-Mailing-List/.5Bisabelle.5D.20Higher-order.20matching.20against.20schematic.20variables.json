[
    {
        "content": "<p>From: Michael Chan &lt;<a href=\"mailto:mchan@inf.ed.ac.uk\">mchan@inf.ed.ac.uk</a>&gt;<br>\nHi all,</p>\n<p>I have a question with higher-order matching against schematic <br>\nvariables. I can't figure out why the pattern trm1 can't be matched <br>\nagainst lem if lem was \"A x y --&gt; x y = 0\". However, if the RHS contains <br>\nconstants instead, e.g., \"A x y --&gt; g a = 0\", a matcher is found. Since <br>\nx and y have the same types of g and a respectively, how come there <br>\nisn't a matcher in the former case? A difference is that x and y are <br>\nschematic variables, but why can't schematic variables be matched against?</p>\n<p>Here's the code:</p>\n<p>locale A =<br>\n   fixes f :: \"nat =&gt; nat\"<br>\n   and a :: nat<br>\n   assumes ax: \"f a = 0\"</p>\n<p>consts<br>\n   g :: \"nat =&gt; nat\"<br>\n   a :: nat</p>\n<p>lemma lem: \"A x y --&gt; x y = 0\"<br>\nsorry</p>\n<p>ML {*</p>\n<p>val trm1 = term_of @{cpat \"?P --&gt; (?f::((?'a=&gt;?'b)=&gt;?'c)) ?stuff = ?v\"};<br>\nval trm2 = Thm.prop_of @{thm lem};</p>\n<p>val mtch_seq = let<br>\n   val init = Envir.empty 0<br>\n   val ctxt = @{context}<br>\n   val (Const (\"Trueprop\",_) $ trm2) = Thm.prop_of (ProofContext.get_thm <br>\nctxt \"lem\")<br>\nin<br>\n   Unify.matchers @{theory} [(trm1,trm2)]<br>\nend;</p>\n<p>val seq as SOME (mtch,_) = nthseq 0 mtch_seq;<br>\npretty_env @{context} (Envir.term_env mtch);<br>\n*}</p>\n<p>Thanks<br>\nMichael</p>",
        "id": 294122083,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660840158
    },
    {
        "content": "<p>From: Michael Chan &lt;<a href=\"mailto:mchan@inf.ed.ac.uk\">mchan@inf.ed.ac.uk</a>&gt;<br>\nOn 18/11/10 16:07, Lawrence Paulson wrote:</p>\n<blockquote>\n<p>I can't see the answer to this, but something complicated is going on when you match  (?f::((?'a=&gt;?'b)=&gt;?'c)) ?stuff against x y where x :: nat =&gt;  nat.</p>\n</blockquote>\n<p>Thanks, Larry. Indeed, even without the predicate, it gives the same <br>\nproblem when using that pattern, i.e.</p>\n<p>lemma lem: \"g a = 0\"<br>\nsorry</p>\n<p>vs</p>\n<p>lemma lem: \"(x::nat=&gt;nat) y = 0\"<br>\nsorry</p>\n<p>Now, if we instead use a simpler pattern:</p>\n<p>val trm1 = term_of @{cpat \"(?f::?'a=&gt;?'b) ?stuff = ?v\"};</p>\n<p>matching it against \"g a = 0\" gives 4 matchers:</p>\n<ol>\n<li>\n<p>[?f::nat =&gt; nat := %a::nat. a, ?v::nat := 0::nat, ?stuff::nat := g a]</p>\n</li>\n<li>\n<p>[?f::nat =&gt; nat := g, ?v::nat := 0::nat, ?stuff::nat := a]</p>\n</li>\n<li>\n<p>[?f::?'a =&gt; nat := %b::?'a. g a, ?v::nat := 0::nat,<br>\n    ?stuff::?'a := ?stuff::?'a]</p>\n</li>\n<li>\n<p>[?f::?'a =&gt; ?'b := g, ?v::?'b := 0::nat, ?stuff::?'a := a]</p>\n</li>\n</ol>\n<p>But matching it against \"(x::nat=&gt;nat) y = 0\", gives only 1 matcher:</p>\n<ol>\n<li>[?f::?'a =&gt; ?'b := ?x::nat =&gt; nat, ?v::?'b := 0::nat,<br>\n    ?stuff::?'a := ?y::nat]</li>\n</ol>\n<p>which is of the same shape of the first lemma's 4th matcher.</p>\n<p>Perhaps the higher-order matcher somehow fails, since 1. and 3. should <br>\nbe returned by it. 2. is essentially 4., but with the schematic type <br>\nvariables instantiated. Now, is 4. a valid matcher even when ?'a and ?'b <br>\ncan be clearly instantiated (to become 2.)? If it is valid, isn't it <br>\nredundant to have a separate matcher with the type variables uninstantiated?</p>\n<p>Thanks<br>\nMichael</p>\n<blockquote>\n<p>Larry Paulson</p>\n<p>On 18 Nov 2010, at 13:37, Michael Chan wrote:</p>\n<blockquote>\n<p>Hi all,</p>\n<p>I have a question with higher-order matching against schematic variables. I can't figure out why the pattern trm1 can't be matched against lem if lem was \"A x y --&gt;  x y = 0\". However, if the RHS contains constants instead, e.g., \"A x y --&gt;  g a = 0\", a matcher is found. Since x and y have the same types of g and a respectively, how come there isn't a matcher in the former case? A difference is that x and y are schematic variables, but why can't schematic variables be matched against?</p>\n<p>Here's the code:</p>\n<p>locale A =<br>\n  fixes f :: \"nat =&gt;  nat\"<br>\n  and a :: nat<br>\n  assumes ax: \"f a = 0\"</p>\n<p>consts<br>\n  g :: \"nat =&gt;  nat\"<br>\n  a :: nat</p>\n<p>lemma lem: \"A x y --&gt;  x y = 0\"<br>\nsorry</p>\n<p>ML {*</p>\n<p>val trm1 = term_of @{cpat \"?P --&gt;  (?f::((?'a=&gt;?'b)=&gt;?'c)) ?stuff = ?v\"};<br>\nval trm2 = Thm.prop_of @{thm lem};</p>\n<p>val mtch_seq = let<br>\n  val init = Envir.empty 0<br>\n  val ctxt = @{context}<br>\n  val (Const (\"Trueprop\",_) $ trm2) = Thm.prop_of (ProofContext.get_thm ctxt \"lem\")<br>\nin<br>\n  Unify.matchers @{theory} [(trm1,trm2)]<br>\nend;</p>\n<p>val seq as SOME (mtch,_) = nthseq 0 mtch_seq;<br>\npretty_env @{context} (Envir.term_env mtch);<br>\n*}</p>\n<p>Thanks<br>\nMichael</p>\n<p>--<br>\nPostal Address: School of Informatics, University of Edinburgh,<br>\nRoom 2.05, Informatics Forum, 10 Crichton Street,<br>\nEdinburgh EH8 9AB, UK.<br>\nTelephone Number: +44-131-651-3077,<br>\nFax Number: +44-131-650-6899,<br>\nEmail: <a href=\"mailto:M.Chan@ed.ac.uk\">M.Chan@ed.ac.uk</a><br>\nWeb Page: <a href=\"http://homepages.inf.ed.ac.uk/mchan/\">http://homepages.inf.ed.ac.uk/mchan/</a></p>\n<p>The University of Edinburgh is a charitable body, registered in<br>\nScotland, with registration number SC005336.</p>\n</blockquote>\n</blockquote>",
        "id": 294122124,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660840171
    },
    {
        "content": "<p>From: Michael Chan &lt;<a href=\"mailto:mchan@inf.ed.ac.uk\">mchan@inf.ed.ac.uk</a>&gt;</p>\n<blockquote>\n<p>Perhaps the higher-order matcher somehow fails, since 1. and 3. should<br>\nbe returned by it. 2. is essentially 4., but with the schematic type<br>\nvariables instantiated. Now, is 4. a valid matcher even when ?'a and ?'b<br>\ncan be clearly instantiated (to become 2.)? If it is valid, isn't it<br>\nredundant to have a separate matcher with the type variables<br>\nuninstantiated?<br>\n</p>\n</blockquote>\n<p>I can confirm that the first lemma's matcher 4. and the second lemma's <br>\nonly matcher are results of the FO matcher. So, I guess the above <br>\nquestion becomes: how come the FO matcher doesn't instantiate the type <br>\nvariables? Of course, this is a different question to why the HO matcher <br>\ndoesn't return matchers to the second lemma.</p>\n<p>Michael</p>\n<blockquote>\n<p>Thanks<br>\nMichael</p>\n<blockquote>\n<p>Larry Paulson</p>\n</blockquote>\n<p>On 18 Nov 2010, at 13:37, Michael Chan wrote:</p>\n<blockquote>\n<blockquote>\n<p>Hi all,</p>\n<p>I have a question with higher-order matching against schematic<br>\nvariables. I can't figure out why the pattern trm1 can't be matched<br>\nagainst lem if lem was \"A x y --&gt; x y = 0\". However, if the RHS<br>\ncontains constants instead, e.g., \"A x y --&gt; g a = 0\", a matcher is<br>\nfound. Since x and y have the same types of g and a respectively, how<br>\ncome there isn't a matcher in the former case? A difference is that x<br>\nand y are schematic variables, but why can't schematic variables be<br>\nmatched against?</p>\n<p>Here's the code:</p>\n<p>locale A =<br>\nfixes f :: \"nat =&gt; nat\"<br>\nand a :: nat<br>\nassumes ax: \"f a = 0\"</p>\n<p>consts<br>\ng :: \"nat =&gt; nat\"<br>\na :: nat</p>\n<p>lemma lem: \"A x y --&gt; x y = 0\"<br>\nsorry</p>\n<p>ML {*</p>\n<p>val trm1 = term_of @{cpat \"?P --&gt; (?f::((?'a=&gt;?'b)=&gt;?'c)) ?stuff = ?v\"};<br>\nval trm2 = Thm.prop_of @{thm lem};</p>\n<p>val mtch_seq = let<br>\nval init = Envir.empty 0<br>\nval ctxt = @{context}<br>\nval (Const (\"Trueprop\",_) $ trm2) = Thm.prop_of (ProofContext.get_thm<br>\nctxt \"lem\")<br>\nin<br>\nUnify.matchers @{theory} [(trm1,trm2)]<br>\nend;</p>\n<p>val seq as SOME (mtch,_) = nthseq 0 mtch_seq;<br>\npretty_env @{context} (Envir.term_env mtch);<br>\n*}</p>\n<p>Thanks<br>\nMichael</p>\n<p>--<br>\nPostal Address: School of Informatics, University of Edinburgh,<br>\nRoom 2.05, Informatics Forum, 10 Crichton Street,<br>\nEdinburgh EH8 9AB, UK.<br>\nTelephone Number: +44-131-651-3077,<br>\nFax Number: +44-131-650-6899,<br>\nEmail: <a href=\"mailto:M.Chan@ed.ac.uk\">M.Chan@ed.ac.uk</a><br>\nWeb Page: <a href=\"http://homepages.inf.ed.ac.uk/mchan/\">http://homepages.inf.ed.ac.uk/mchan/</a></p>\n<p>The University of Edinburgh is a charitable body, registered in<br>\nScotland, with registration number SC005336.</p>\n</blockquote>\n</blockquote>\n</blockquote>",
        "id": 294122223,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660840201
    }
]