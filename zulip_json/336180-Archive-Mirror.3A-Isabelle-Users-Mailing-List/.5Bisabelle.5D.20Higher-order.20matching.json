[
    {
        "content": "<p>From: <a href=\"mailto:s.wong.731@googlemail.com\">s.wong.731@googlemail.com</a><br>\nHi,</p>\n<p>I have a rather trivial problem with higher-order matching. Suppose I have:</p>\n<p>consts<br>\nFuncA :: \"X_Int =&gt; X_Int\"<br>\nFuncB :: \"X_Int =&gt; X_Int\"</p>\n<p>axioms<br>\nax1 [rule_format] :<br>\n\"ALL x y. FuncA(x) &lt;' FuncB(y)\"</p>\n<p>declare ax1 [simp]</p>\n<p>theorem test1:<br>\n\"ALL x y. FuncA(x) &lt;' FuncB(y)\"<br>\nusing ax1<br>\nby (auto)</p>\n<p>The proof succeeds since it's simply applying ax1.</p>\n<p>What about if I want to prove the following:</p>\n<p>theorem test2:<br>\n\"ALL x y.<br>\nEX f.<br>\nf(x) &lt;' FuncB(y)\"<br>\nusing ax1<br>\nby (auto)</p>\n<p>It fails. Am I missing a lemma? If so, what lemma am I missing? Can ax1 not  <br>\nbe applied in the same way as in test1?</p>\n<p>Any help will be appreciated.</p>\n<p>Thanks<br>\nSteve</p>",
        "id": 294082420,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660831117
    },
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\nMost of our proof methods will not prove \"EX f. ...\" automatically when<br>\nf is a function. In this case \"blast\" will do it because the situation<br>\nis trivial. In general, do not expect to prove EX formulas<br>\nautomatically, unless the situation is almost trivial.</p>\n<p>Tobias</p>\n<p>PS You can drop both \"ALL x y\" and [rule_format] in ax1.</p>\n<p><a href=\"mailto:s.wong.731@googlemail.com\">s.wong.731@googlemail.com</a> schrieb:</p>",
        "id": 294082621,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660831185
    },
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\n<a href=\"mailto:s.wong.731@googlemail.com\">s.wong.731@googlemail.com</a> schrieb:</p>\n<blockquote>\n<p>On Sep 1, 2009 8:49am, Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt; wrote:</p>\n<blockquote>\n<p>Most of our proof methods will not prove \"EX f. ...\" automatically when</p>\n<p>f is a function. In this case \"blast\" will do it because the situation</p>\n<p>is trivial. In general, do not expect to prove EX formulas</p>\n<p>automatically, unless the situation is almost trivial.<br>\n</p>\n</blockquote>\n<p>I see. In that case, what sort of tactic should be used to prove this<br>\n(if any)? Sorry, I'm very new to Isabelle.</p>\n</blockquote>\n<p>In general you have to write a proper proof. See the Isabelle documentation.</p>\n<p>Regards<br>\nTobias</p>\n<blockquote>\n<p>Thanks<br>\nSteve</p>\n<blockquote>\n<p>Tobias</p>\n<p>PS You can drop both \"ALL x y\" and [rule_format] in ax1.</p>\n<p><a href=\"mailto:s.wong.731@googlemail.com\">s.wong.731@googlemail.com</a> schrieb:</p>\n<blockquote>\n<p>Hi,</p>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p>I have a rather trivial problem with higher-order matching. Suppose<br>\nI have:</p>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p>consts</p>\n</blockquote>\n<blockquote>\n<p>FuncA :: \"X_Int =&gt; X_Int\"</p>\n</blockquote>\n<blockquote>\n<p>FuncB :: \"X_Int =&gt; X_Int\"</p>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p>axioms</p>\n</blockquote>\n<blockquote>\n<p>ax1 [rule_format] :</p>\n</blockquote>\n<blockquote>\n<p>\"ALL x y. FuncA(x)<br>\n</p>\n</blockquote>\n<blockquote>\n<p>declare ax1 [simp]</p>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p>theorem test1:</p>\n</blockquote>\n<blockquote>\n<p>\"ALL x y. FuncA(x)<br>\nusing ax1</p>\n</blockquote>\n<blockquote>\n<p>by (auto)</p>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p>The proof succeeds since it's simply applying ax1.</p>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p>What about if I want to prove the following:</p>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p>theorem test2:</p>\n</blockquote>\n<blockquote>\n<p>\"ALL x y.</p>\n</blockquote>\n<blockquote>\n<p>EX f.</p>\n</blockquote>\n<blockquote>\n<p>f(x)<br>\nusing ax1</p>\n</blockquote>\n<blockquote>\n<p>by (auto)</p>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p>It fails. Am I missing a lemma? If so, what lemma am I missing? Can ax1</p>\n</blockquote>\n<blockquote>\n<p>not be applied in the same way as in test1?</p>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p>Any help will be appreciated.</p>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p>Thanks</p>\n</blockquote>\n<blockquote>\n<p>Steve<br>\n</p>\n</blockquote>\n</blockquote>\n</blockquote>",
        "id": 294082886,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660831253
    },
    {
        "content": "<p>From: <a href=\"mailto:s.wong.731@googlemail.com\">s.wong.731@googlemail.com</a><br>\nOn Sep 1, 2009 8:49am, Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt; wrote:</p>\n<blockquote>\n<p>Most of our proof methods will not prove \"EX f. ...\" automatically when</p>\n</blockquote>\n<blockquote>\n<p>f is a function. In this case \"blast\" will do it because the situation</p>\n</blockquote>\n<blockquote>\n<p>is trivial. In general, do not expect to prove EX formulas</p>\n</blockquote>\n<blockquote>\n<p>automatically, unless the situation is almost trivial.</p>\n</blockquote>\n<p>I see. In that case, what sort of tactic should be used to prove this (if  <br>\nany)? Sorry, I'm very new to Isabelle.</p>\n<p>Thanks<br>\nSteve</p>\n<blockquote>\n<p>Tobias</p>\n</blockquote>\n<blockquote>\n<p>PS You can drop both \"ALL x y\" and [rule_format] in ax1.</p>\n</blockquote>\n<blockquote>\n<p><a href=\"mailto:s.wong.731@googlemail.com\">s.wong.731@googlemail.com</a> schrieb:</p>\n</blockquote>\n<blockquote>\n<blockquote>\n<p>Hi,</p>\n</blockquote>\n</blockquote>\n<blockquote>\n<p>&gt;</p>\n</blockquote>\n<blockquote>\n<blockquote>\n<p>I have a rather trivial problem with higher-order matching. Suppose I  <br>\nhave:</p>\n</blockquote>\n</blockquote>\n<blockquote>\n<p>&gt;</p>\n</blockquote>\n<blockquote>\n<blockquote>\n<p>consts</p>\n</blockquote>\n</blockquote>\n<blockquote>\n<blockquote>\n<p>FuncA :: \"X_Int =&gt; X_Int\"</p>\n</blockquote>\n</blockquote>\n<blockquote>\n<blockquote>\n<p>FuncB :: \"X_Int =&gt; X_Int\"</p>\n</blockquote>\n</blockquote>\n<blockquote>\n<p>&gt;</p>\n</blockquote>\n<blockquote>\n<blockquote>\n<p>axioms</p>\n</blockquote>\n</blockquote>\n<blockquote>\n<blockquote>\n<p>ax1 [rule_format] :</p>\n</blockquote>\n</blockquote>\n<blockquote>\n<blockquote>\n<p>\"ALL x y. FuncA(x)<br>\n</p>\n</blockquote>\n</blockquote>\n<blockquote>\n<blockquote>\n<p>declare ax1 [simp]</p>\n</blockquote>\n</blockquote>\n<blockquote>\n<p>&gt;</p>\n</blockquote>\n<blockquote>\n<blockquote>\n<p>theorem test1:</p>\n</blockquote>\n</blockquote>\n<blockquote>\n<blockquote>\n<p>\"ALL x y. FuncA(x)<br>\nusing ax1</p>\n</blockquote>\n</blockquote>\n<blockquote>\n<blockquote>\n<p>by (auto)</p>\n</blockquote>\n</blockquote>\n<blockquote>\n<p>&gt;</p>\n</blockquote>\n<blockquote>\n<blockquote>\n<p>The proof succeeds since it's simply applying ax1.</p>\n</blockquote>\n</blockquote>\n<blockquote>\n<p>&gt;</p>\n</blockquote>\n<blockquote>\n<blockquote>\n<p>What about if I want to prove the following:</p>\n</blockquote>\n</blockquote>\n<blockquote>\n<p>&gt;</p>\n</blockquote>\n<blockquote>\n<blockquote>\n<p>theorem test2:</p>\n</blockquote>\n</blockquote>\n<blockquote>\n<blockquote>\n<p>\"ALL x y.</p>\n</blockquote>\n</blockquote>\n<blockquote>\n<blockquote>\n<p>EX f.</p>\n</blockquote>\n</blockquote>\n<blockquote>\n<blockquote>\n<p>f(x)<br>\nusing ax1</p>\n</blockquote>\n</blockquote>\n<blockquote>\n<blockquote>\n<p>by (auto)</p>\n</blockquote>\n</blockquote>\n<blockquote>\n<p>&gt;</p>\n</blockquote>\n<blockquote>\n<blockquote>\n<p>It fails. Am I missing a lemma? If so, what lemma am I missing? Can ax1</p>\n</blockquote>\n</blockquote>\n<blockquote>\n<blockquote>\n<p>not be applied in the same way as in test1?</p>\n</blockquote>\n</blockquote>\n<blockquote>\n<p>&gt;</p>\n</blockquote>\n<blockquote>\n<blockquote>\n<p>Any help will be appreciated.</p>\n</blockquote>\n</blockquote>\n<blockquote>\n<p>&gt;</p>\n</blockquote>\n<blockquote>\n<blockquote>\n<p>Thanks</p>\n</blockquote>\n</blockquote>\n<blockquote>\n<blockquote>\n<p>Steve</p>\n</blockquote>\n</blockquote>",
        "id": 294083094,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660831320
    }
]