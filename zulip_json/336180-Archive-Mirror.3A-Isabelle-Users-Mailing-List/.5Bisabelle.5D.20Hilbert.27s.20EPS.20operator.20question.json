[
    {
        "content": "<p>From: <a href=\"mailto:filip@matf.bg.ac.rs\">filip@matf.bg.ac.rs</a><br>\nHello,</p>\n<p>while formalizing some specific aspects of geometry, I came across a<br>\nquestion regarding Hilbert's EPS operator.</p>\n<p>I defined an intersection of two lines using SOME operator:</p>\n<p>definition mk_intersection where<br>\n  \"mk_intersection line1 line2 =<br>\n     (SOME point. incident point line1 &amp; incident point line2)\"</p>\n<p>If lines are not parallel it is easy to prove that<br>\nlemma LEMMA1:<br>\n  assumes \"EX P. incident P l1 &amp; incident P l2\"<br>\n  shows  \"incident (mk_intersection l1 l2) l1\" and<br>\n         \"incident (mk_intersection l1 l2) l2\"<br>\nholds.</p>\n<p>The problem arises in a degenerate case of parallel lines and I would like<br>\nto have something like:</p>\n<p>lemma LEMMA2:<br>\n\"[| ~(EX P. incident P l1 &amp; incident P l2); mk_intersection l1 l2 = P |]<br>\n==&gt; False\"</p>\n<p>However, I do not know how to prove this and I do not even know if it holds.</p>\n<p>This question could be generalized to whether the following holds:<br>\nlemma \"[| ~(EX x. P x); Q (SOME x. P x) |] ==&gt; False\"</p>\n<p>If this does not hold (and I feel that it does not), is there any other<br>\nsimple way of defining mk_intersection function such that both LEMMA1 and<br>\nLEMMA2 can be proved.</p>\n<p>Of course, there is a possibility of using \"is_intersection P l1 l2\"<br>\npredicate instead of \"mk_intersection l1 l2\" function, but the informal<br>\nmathematics text that I am trying to formalize tends to be constructive<br>\nand heavily uses the intersection construction function (that I am trying<br>\nto formalize through \"mk_intersection\") and I would like to stick to this<br>\napproach (if possible).</p>\n<p>Thank you in advance,<br>\nFilip</p>",
        "id": 294148000,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660848232
    },
    {
        "content": "<p>From: Ramana Kumar &lt;<a href=\"mailto:rk436@cam.ac.uk\">rk436@cam.ac.uk</a>&gt;<br>\nHilbert choice (or the SOME binder) does not imply existence; if nothing<br>\nwith the desired property exists, an arbitrary element of the type is<br>\ndenoted.<br>\nSo you're right that LEMMA2 does not hold.</p>\n<p>You could define mk_intersection with a precondition asserting that the<br>\nlines aren't parallel. (Is natural number division done like that in<br>\nIsabelle/HOL?) You would have to repeat that condition in all appropriate<br>\nplaces, but locales could help make it look natural.</p>",
        "id": 294148013,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660848236
    },
    {
        "content": "<p>From: Peter Lammich &lt;<a href=\"mailto:lammich@in.tum.de\">lammich@in.tum.de</a>&gt;<br>\nAnother standard way would be to use an option-datatype, and <br>\nlet mk_intersect be None if the lines are parallel, and \"Some point\"<br>\notherwise.</p>\n<p>Peter</p>",
        "id": 294148069,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660848244
    }
]