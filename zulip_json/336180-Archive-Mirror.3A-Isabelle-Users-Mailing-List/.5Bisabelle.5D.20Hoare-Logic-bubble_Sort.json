[
    {
        "content": "<p>From: mahmoud abdelazim &lt;<a href=\"mailto:m.abdelazim@icloud.com\">m.abdelazim@icloud.com</a>&gt;<br>\nHi <br>\ni want to proof the correctness of the bubble Sort algoritmo <br>\nprocedure BubbleSort( A : lista degli elementi da ordinare )<br>\n  scambio ← true<br>\n  while scambio<br>\n    scambio ← false<br>\n    for i ← 0 to length(A)-2  do<br>\n      if A[i] &gt; A[i+1] then<br>\n        swap( A[i], A[i+1] )<br>\n        scambio ← true<br>\nThere exists any Hoare Logic theory in Isabelle that can i use to proof that algorithm (In particular a Hoare Logic theory in Isabelle that implement Arrays too ) </p>\n<p>Thanks</p>",
        "id": 294320660,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660926784
    },
    {
        "content": "<p>From: lyj238 &lt;<a href=\"mailto:lyj238@ios.ac.cn\">lyj238@ios.ac.cn</a>&gt;<br>\nYes, I have a similar question.</p>\n<p>In a real-world program verification, functions （or procedures) and array are used frequently, without techniques to handle these features, it is too diffcult to apply theorem proving tehnique.</p>\n<p>But I really coudl not find techniques to handle functions and arrays in Isabelle src directory or any public source after many searchings.</p>\n<p>Best regard!</p>\n<p>lyj238</p>",
        "id": 294322514,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660927383
    },
    {
        "content": "<p>From: Christian Sternagel &lt;<a href=\"mailto:c.sternagel@gmail.com\">c.sternagel@gmail.com</a>&gt;<br>\nDear lyj238,</p>\n<p>if you didn't find any techniques how to handle functions, then you <br>\ndidn't look very far. Most of today's theorem proving work with <br>\nIsabelle/HOL is based on some kind of function definitions (just <br>\ndefinitions without recursion, primitive recursive functions, and more <br>\ngeneral recursive functions whose termination has to be proved).</p>\n<p>But I reckon that instead of \"function\" as I understand it, you might <br>\nmean something like \"side-effects\" and thus functions that are allowed <br>\nto modify some kind of state. If that is the case (and also for arrays) <br>\nyou might want to have a look at Imperative_HOL (which is a theory based <br>\non standard Isabelle/HOL).</p>\n<p>The sources can be found in the subdirectory</p>\n<p>src/HOL/Imperative_HOL/Imperative_HOL.thy</p>\n<p>of the Isabelle distribution. And a paper about it is available, e.g., here:</p>\n<p><a href=\"http://www4.in.tum.de/~krauss/imperative/imperative.pdf\">http://www4.in.tum.de/~krauss/imperative/imperative.pdf</a></p>\n<p>cheers</p>\n<p>chris</p>",
        "id": 294322853,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660927508
    },
    {
        "content": "<p>From: Lawrence Paulson &lt;<a href=\"mailto:lp15@cam.ac.uk\">lp15@cam.ac.uk</a>&gt;<br>\nThese and similar questions appear to be connected with program verification projects. Isabelle per se is not a program verifier. Isabelle can be used to verify algorithms expressed in a purely functional style, and program verification tools can be built on top of Isabelle. Unfortunately, I’m not personally familiar with the best references to this sort of work. I hope somebody who is better informed than I am can reply with some links.</p>\n<p>Larry Paulson</p>",
        "id": 294323047,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660927577
    },
    {
        "content": "<p>From: Gerwin Klein &lt;<a href=\"mailto:Gerwin.Klein@nicta.com.au\">Gerwin.Klein@nicta.com.au</a>&gt;<br>\nHere are a few links for verification of imperative programs:</p>\n<ul>\n<li>\n<p>SIMPL, a generic imperative language in which you can express a number of ‘real’<br>\n  programming languages and reason about them: <a href=\"http://afp.sourceforge.net/entries/Simpl.shtml\">http://afp.sourceforge.net/entries/Simpl.shtml</a></p>\n</li>\n<li>\n<p>C-Parser, a translator of C into SIMPL:<br>\n<a href=\"http://ssrg.nicta.com.au/software/TS/c-parser/\">http://ssrg.nicta.com.au/software/TS/c-parser/</a><br>\n  or<br>\n<a href=\"https://github.com/seL4/l4v/tree/master/tools/c-parser\">https://github.com/seL4/l4v/tree/master/tools/c-parser</a> for development versions</p>\n</li>\n<li>\n<p>AutoCorres, a tool on top of C-Parser that makes reasoning more convenient by<br>\n  abstracting from SIMPL into a functional representation:<br>\n<a href=\"http://ssrg.nicta.com.au/projects/TS/autocorres/\">http://ssrg.nicta.com.au/projects/TS/autocorres/</a><br>\n  or<br>\n<a href=\"https://github.com/seL4/l4v/tree/master/tools/autocorresfor\">https://github.com/seL4/l4v/tree/master/tools/autocorresfor</a> development versions</p>\n</li>\n<li>\n<p>src/HOL/Imperative_HOL in the Isabelle distribution, already mentioned below</p>\n</li>\n</ul>\n<p>There are further formalisations of imperative languages in the Isabelle distribution for demonstrating specific aspects or for learning about the semantics of programming languages.</p>\n<p>For learning about the verification of imperative programs, it is best to not start with function calls and arrays, but if that’s what you’re mostly interested in, I’d go with SIMPL and look at its example files. If you want to verify C programs, AutoCorres is currently the tool to use in Isabelle.</p>\n<p>Cheers,<br>\nGerwin</p>\n<hr>\n<p>The information in this e-mail may be confidential and subject to legal professional privilege and/or copyright. National ICT Australia Limited accepts no liability for any damage caused by this email or its attachments.</p>",
        "id": 294323418,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660927712
    }
]