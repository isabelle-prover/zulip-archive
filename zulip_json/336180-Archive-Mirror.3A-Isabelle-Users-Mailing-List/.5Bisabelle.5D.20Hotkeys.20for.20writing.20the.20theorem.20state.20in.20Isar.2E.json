[
    {
        "content": "<p>From: Georgy Dunaev &lt;<a href=\"mailto:georgedunaev@gmail.com\">georgedunaev@gmail.com</a>&gt;<br>\nI have some long statement that I want to prove:</p>\n<p>theorem thm:\"A0==&gt;A1==&gt;A2==&gt;A3==&gt;B\"<br>\nproof -</p>\n<p>Now I want to write</p>\n<p>assume H00:\"A0\"<br>\nassume H01:\"A1\"<br>\nassume H02:\"A2\"<br>\nassume H03:\"A3\"<br>\nshow \"B\"<br>\nproof</p>\n<p>It takes time to write or manually copy expressions from \"State\" tab.<br>\nIs there an automatisation for this? If no, it would be very useful!</p>\n<p>Yours sincerely,<br>\nGeorgy Dunaev</p>",
        "id": 294826874,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661244853
    },
    {
        "content": "<p>From: Mathias Fleury &lt;<a href=\"mailto:mathias.fleury12@gmail.com\">mathias.fleury12@gmail.com</a>&gt;<br>\nHi Georgy,</p>\n<p>I know two solutions:</p>\n<p>1. The tactic sketch and explore (included in Isabelle) is able to do<br>\nsomething<br>\n  like what you want:</p>\n<p>theory Scratch<br>\n    imports<br>\n       Main \"HOL-ex.Sketch_and_Explore\"<br>\n    begin</p>\n<p>theorem \"A0==&gt;A1==&gt;A2==&gt;A3==&gt;B\"<br>\n      sketch -<br>\n    (*<br>\n    proof -<br>\n      show B<br>\n        if A0<br>\n          and A1<br>\n          and A2<br>\n          and A3<br>\n        using that sorry<br>\n    qed<br>\n    *)</p>\n<p>explore -<br>\n    (*<br>\n    proof -<br>\n      have B<br>\n        if \"A0 x\"<br>\n          and \"A1 x y\"<br>\n          and A2<br>\n          and A3<br>\n        using that sorry<br>\n      then show ?thesis<br>\n        by -<br>\n    qed<br>\n    *)</p>\n<p>As far as I know, It supports only quotes (\"A0\").</p>\n<p>2. My own variant of Explore (available at<br>\n<a href=\"https://bitbucket.org/isafol/isafol/src/master/lib/Explorer.thy\">https://bitbucket.org/isafol/isafol/src/master/lib/Explorer.thy</a>)<br>\n  produces something closer to what you want:</p>\n<p>theory Scratch<br>\n    imports<br>\n       Main \"$ISAFOL/lib/Explorer\"<br>\n    begin</p>\n<p>theorem \"A0==&gt;A1==&gt;A2==&gt;A3==&gt;B\"<br>\n      explore<br>\n    (*<br>\n    proof -<br>\n      assume <br>\n        ‹A0› and<br>\n        ‹A1› and<br>\n        ‹A2› and<br>\n        ‹A3›<br>\n      show ‹B› sorry<br>\n    qed<br>\n    *)</p>\n<p>(<em>also useful, to rewrite the form of the lemma</em>)<br>\n      explore_lemma<br>\n    (*<br>\n    lemma<br>\n      assumes <br>\n        ‹A0› and<br>\n        ‹A1› and<br>\n        ‹A2› and<br>\n        ‹A3›<br>\n      shows ‹B›<br>\n    proof -<br>\n      show ?thesis sorry<br>\n    qed<br>\n    *)</p>\n<p>You can switch between cartouches (‹A0›) and quotes (\"A0\").</p>\n<p>Best,<br>\nMathias</p>",
        "id": 294826880,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661244859
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nHere is a more standard way to write this in Isabelle/Isar:</p>\n<p>theorem \"thm\":<br>\n  assumes 0: \"A0\"<br>\n    and 1: \"A1\"<br>\n    and 2: \"A2\"<br>\n    and 3: \"A3\"<br>\n  shows \"B\"<br>\nproof -<br>\nqed</p>\n<ul>\n<li>\n<p>Long statements have first-class syntax.</p>\n</li>\n<li>\n<p>The same works for statements within a proof, using postfix notation:</p>\n<p>have B if A0 and A1 ...</p>\n</li>\n<li>\n<p>Meaningless names for facts could be just numerals, 1, 2, 3, or <em>, <strong>, </strong></em>.<br>\nYou should not \"encode\" the manner how facts get introduce in the name (like H<br>\nfor \"hypothesis\" or A for \"assumption\") because that role often changes as a<br>\nprove evolves over time. (E.g. \"assume\" may become \"have\" or \"obtain\" later.)</p>\n</li>\n<li>\n<p>A notable exception: skip 0, 1, 2, 3 above and use assms(0), assms(1) etc.<br>\nin the proof, as long as the whole proof setup is rather small and adhoc.</p>\n<p>Makarius</p>\n</li>\n</ul>",
        "id": 294826903,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661244869
    }
]