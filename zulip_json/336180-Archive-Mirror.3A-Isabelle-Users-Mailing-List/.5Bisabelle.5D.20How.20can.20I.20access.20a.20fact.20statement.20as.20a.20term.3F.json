[
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nMaybe you mean literal fact notation (with old-style ASCII back-quotes)<br>\nor new-style cartouche syntax.</p>\n<p>It allows to project (unique) facts from the current proof context by<br>\ngiving a term pattern (most users might think they need to give the full<br>\nterm).</p>\n<p>Alternatively, you can study documentation and examples for proof method<br>\n\"goal_cases\" or the command \"subgoal\". This is moving towards \"improper<br>\nIsar\", but in some applications it is adequate.</p>\n<p>Makarius</p>",
        "id": 294749740,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661194955
    },
    {
        "content": "<p>From: Wolfgang Jeltsch &lt;<a href=\"mailto:wolfgang-it@jeltsch.info\">wolfgang-it@jeltsch.info</a>&gt;<br>\nI actually mean the opposite: the backquote/cartouche notation turns a<br>\nterm (pattern) into a fact, but I want to turn a fact into a term, so<br>\nthat I can write something like the following (with <code>«...»</code> being my<br>\ntemporary notation for the desired conversion):</p>\n<p>let \"?x + ?y ≤ ?z\" = «assms(1)»</p>\n<p>All the best,<br>\nWolfgang</p>",
        "id": 294749791,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661194980
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nThis is in conflict with how Isar works: the proof text is turned into<br>\nassumptions/goals/facts, but the information flows only forwards in that<br>\ndirection, not backwards. A fact is somehow opaque to the proof text and<br>\ncannot be inspected directly.</p>\n<p>The ?case abbreviation of the \"induct\" family gives the appearance to<br>\nallow this, but it is conceptually still the original text statement<br>\nthat is exposed as term here. (As usual Isar allows a certain degree of<br>\nimproper use, so this can be stretched a bit further than officially<br>\nintended.)</p>\n<p>There are other tools to get hold of low-level information, e.g. the<br>\nproof method \"goal_cases\", the command \"subgoal\", and the Eisbach proof<br>\nmethod \"match\". All of this is subject to restrictions: proper proof<br>\nstructure emerges from taking away arbitrary access to internal proof<br>\nstate information (goals and facts).</p>\n<p>Makarius</p>",
        "id": 294749881,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661195017
    },
    {
        "content": "<p>From: Dominique Unruh &lt;<a href=\"mailto:unruh@ut.ee\">unruh@ut.ee</a>&gt;<br>\nHi,</p>\n<p>my solution is to create a new command letfact, so that you can write, e.g.,</p>\n<p>letfact \"_ = ?rhs\" = Cons</p>\n<p>(if Cons is the name of a fact).</p>\n<p>The theory that defines this is attached.</p>\n<p>I have not tested it besides what is in that theory, so it might be very <br>\nbuggy (or not work at all).</p>\n<p>Also, I don't know if I am doing something unspeakable to Isabelle's <br>\ninterna here. But I assume Makarius will speak up if I do. :)</p>\n<p>Best wishes,</p>\n<p>Dominique.<br>\n<a href=\"/user_uploads/14278/YLnys4xLQTRHjsgEkoGMgjna/Scratch.thy\">Scratch.thy</a></p>",
        "id": 294749975,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661195044
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nWell, I have already explained that facts (and goals) are conceptually<br>\nopaque from the Isar proof text.</p>\n<p>Isar proof structure (with its overall benefits of readability and<br>\nmaintainability) emerges from taking away arbitrary access to internal<br>\nstate. It has required many years to achieve a certain balance: I have<br>\neven refined and revised it in 2015/2016.</p>\n<p>Instead of introducing non-Isar commands in Isar, it is better to look<br>\nat the concrete applications and find a style of proof that fits to the<br>\nhigh cultural standards of Isar.</p>\n<p>Makarius</p>",
        "id": 294750097,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661195103
    },
    {
        "content": "<p>From: Wolfgang Jeltsch &lt;<a href=\"mailto:wolfgang-it@jeltsch.info\">wolfgang-it@jeltsch.info</a>&gt;<br>\nI think I’ve found such a style for my particular problem, which was<br>\naccessing an induction hypothesis and subsequently parts of it as terms.<br>\nConsider the following small example:</p>\n<p>lemma \"(n :: nat) &lt; 2 * n\" (is \"?P n\")<br>\n    proof (induction n)<br>\n      case (Suc m)<br>\n      let \"_ &lt; ?double\" = \"?P m\"<br>\n      oops</p>\n<p>The construct <code>(is \"?P n\")</code> in the first line defines <code>?P</code> to be the<br>\n“shape” of the statement. The <code>?P m</code> in the <code>let</code> statement further<br>\ndown is the induction hypothesis (and <code>?P (Suc m)</code> would be the same as<br>\n<code>?case</code>. So I’m effectively using higher-order unification to replace<br>\nthe <code>n</code>s in the lemma statement with a locally available term. The <code>let</code><br>\nstatement then assigns the right-hand side of the induction hypothesis<br>\n(<code>2 * m</code>) to the variable <code>?double</code>, showing that I can turn parts of<br>\nthe induction hypothesis into terms.</p>\n<p>All the best,<br>\nWolfgang</p>",
        "id": 294750161,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661195127
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nGreat. This is exactly how it was meant to be in classic Isabelle/Isar,<br>\nbefore various add-on were introduced over the years.</p>\n<p>The general principle: you write text (terms) and match against it (via<br>\nterm patterns) -- before mechanical proof tools operate on your terms.</p>\n<p>Makarius</p>",
        "id": 294750185,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661195140
    },
    {
        "content": "<p>From: Wolfgang Jeltsch &lt;<a href=\"mailto:wolfgang-it@jeltsch.info\">wolfgang-it@jeltsch.info</a>&gt;<br>\nHi!</p>\n<p>Say I have a proof method that generates several cases. For each case,<br>\nI can access parts of the conclusion via schematic variables. All I have<br>\nto do is defining those variables by matching the <code>?case</code> variable<br>\nagainst a pattern, for example like so:</p>\n<p>let \"?x + ?y ≤ ?z\" = ?case</p>\n<p>Now I’d like to do the same thing for case premises. The problem is that<br>\nthere don’t seem to be analogs of <code>?case</code> for the premises. That said,<br>\npremises can be referred to as facts, of course. Is it possible to get<br>\nthe statement of a fact as a term, or is there some other way to achieve<br>\nwhat I want?</p>\n<p>All the best,<br>\nWolfgang</p>",
        "id": 294751726,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661195735
    }
]