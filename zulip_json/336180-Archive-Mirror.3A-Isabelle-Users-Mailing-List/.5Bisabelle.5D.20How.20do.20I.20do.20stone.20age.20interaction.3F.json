[
    {
        "content": "<p>From: <a href=\"mailto:mark@proof-technologies.com\">mark@proof-technologies.com</a><br>\nHello all,</p>\n<p>(I am a newcomer to Isabelle, so apologies for asking what is probably<br>\nan incredibly trivial question.  I have installed Isabelle 2009 from<br>\nsource, and have already tried looking at bundled documents such as<br>\n'intro.dvi', 'main.dvi', 'system.dvi' and 'tutorial.dvi', but to no<br>\navail.)</p>\n<p>Is it possible to do basic ML top level interactive forward proofs in<br>\nIsabelle HOL, in a style similar to basic forward proof in HOL Light,<br>\nHOL4 and ProofPower?  I don't want to use Isar or Proof General, just<br>\nthe basic ML top level.  Starting Isabelle using 'isabelle tty',<br>\nfollowed by entering 'exit' to drop out of Isar sounds promising, but<br>\nwhat do I do then?  Just some examples of basic proofs (e.g. \"Socrates<br>\nis mortal\") would be so helpful.  I'm not convinced that there is even<br>\nthe concept of term quotations in Isabelle's basic ML top level.  Am I<br>\nright?  And what are the ML constructor functions for types and terms?</p>\n<p>So here is my basic HOL4 forward proof:</p>\n<p>(* First some declarations and definitions *)<br>\n    new_type (\"Person\",0);<br>\n    new_constant (\"Socrates\", <code>:Person</code>);<br>\n    new_constant (\"Man\", <code>:Person-&gt;bool</code>);<br>\n    new_constant (\"Mortal\", <code>:Person-&gt;bool</code>);<br>\n    val ax1 = new_axiom (\"Socrates Axiom 1\", <code>Man Socrates</code>);<br>\n    val ax2 = new_axiom (\"Socrates Axiom 2\", <code>! p. Man p ==&gt; Mortal\np</code>);</p>\n<p>(* Now the proof itself *)<br>\n    MP (SPEC <code>Socrates</code> ax2) ax1;</p>\n<p>This gives me:</p>\n<p>val it = |- Mortal Socrates : thm</p>\n<p>Can anyone translate this into Isabelle HOL top level commands for me?</p>\n<p>Thanks,</p>\n<p>Mark Adams</p>",
        "id": 294120181,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660839565
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nOn Sat, 27 Nov 2010, <a href=\"mailto:mark@proof-technologies.com\">mark@proof-technologies.com</a> wrote:</p>\n<blockquote>\n<p>Is it possible to do basic ML top level interactive forward proofs in <br>\nIsabelle HOL, in a style similar to basic forward proof in HOL Light, <br>\nHOL4 and ProofPower?  I don't want to use Isar or Proof General, just <br>\nthe basic ML top level.</p>\n</blockquote>\n<p>You can hardly do anything on the raw ML toplevel, since everything is <br>\nmanaged by the Isar infrastructure theses days, notably the theory context <br>\nand the ML toplevel environment.</p>\n<blockquote>\n<p>Starting Isabelle using 'isabelle tty'</p>\n</blockquote>\n<p>Fine.</p>\n<blockquote>\n<p>followed by entering 'exit' to drop out of Isar sounds promising</p>\n</blockquote>\n<p>Bad move. No ML bindings coming after the Pure bootstrap will be <br>\navailable, because the connection to the formal context is lost.</p>\n<blockquote>\n<p>I'm not convinced that there is even the concept of term quotations in <br>\nIsabelle's basic ML top level.  Am I right?</p>\n</blockquote>\n<p>Isabelle/ML antiquotations are quite advanced, but you need to do things <br>\nin the proper order: quote ML inside Isar, antiquote logical entities <br>\ninside ML.  See also chapter 0 of <br>\n<a href=\"http://www4.in.tum.de/~wenzelm/test/implementation.pdf\">http://www4.in.tum.de/~wenzelm/test/implementation.pdf</a> which will be part <br>\nof the next official release.</p>\n<blockquote>\n<p>So here is my basic HOL4 forward proof:</p>\n<p>(* First some declarations and definitions *)<br>\n   new_type (\"Person\",0);<br>\n   new_constant (\"Socrates\", <code>:Person</code>);<br>\n   new_constant (\"Man\", <code>:Person-&gt;bool</code>);<br>\n   new_constant (\"Mortal\", <code>:Person-&gt;bool</code>);<br>\n   val ax1 = new_axiom (\"Socrates Axiom 1\", <code>Man Socrates</code>);<br>\n   val ax2 = new_axiom (\"Socrates Axiom 2\", <code>! p. Man p ==&gt; Mortal\np</code>);</p>\n<p>(* Now the proof itself *)<br>\n   MP (SPEC <code>Socrates</code> ax2) ax1;</p>\n<p>This gives me:</p>\n<p>val it = |- Mortal Socrates : thm</p>\n<p>Can anyone translate this into Isabelle HOL top level commands for me?</p>\n</blockquote>\n<p>Here is my version for Isabelle2009-2:</p>\n<p>theory A imports Main begin;</p>\n<p>example_proof;<br>\n   fix socrates :: 'person;<br>\n   fix man :: \"'person =&gt; bool\";<br>\n   fix mortal :: \"'person =&gt; bool\";</p>\n<p>assume ax1: \"man socrates\";<br>\n   assume ax2: \"!!p. man p ==&gt; mortal p\";</p>\n<p>ML_val {*<br>\n     val th = @{thm ax2} OF [@{thm ax1}];<br>\n     writeln (Display.string_of_thm @{context} th);<br>\n   *};</p>\n<p>end;</p>\n<p>The old-fashioned semicolons are there for your convenience in the tty. <br>\nMyself I composed this quickly with Isabelle/jEdit and than pasted it into <br>\nthe terminal.</p>\n<p>The th result above is pretty-printed without a proper context, unlike the <br>\nfull version with writeln and Display.string_of_thm.</p>\n<p>In order to be productive with Isabelle/ML you should build up your <br>\ncontext in Isar source notation and the experiment with it via small ML <br>\nsnippets.  What is your application anyway?  Serious use of Isabelle <br>\noutside the Isar system infrastructure is hard to imagine.</p>\n<p>Makarius</p>",
        "id": 294120197,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660839570
    },
    {
        "content": "<p>From: Lawrence Paulson &lt;<a href=\"mailto:lp15@cam.ac.uk\">lp15@cam.ac.uk</a>&gt;<br>\nYou might consider downloading an older version from here: <a href=\"http://www.cl.cam.ac.uk/~lp15/archive/\">http://www.cl.cam.ac.uk/~lp15/archive/</a></p>\n<p>Until around 2005, ML level interaction was still supported.</p>\n<p>Larry Paulson</p>",
        "id": 294120207,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660839576
    },
    {
        "content": "<p>From: <a href=\"mailto:mark@proof-technologies.com\">mark@proof-technologies.com</a><br>\non 27/11/10 11:25 AM, Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt; wrote:</p>\n<blockquote>\n<p>In order to be productive with Isabelle/ML you should build up your<br>\ncontext in Isar source notation and the experiment with it via small ML<br>\nsnippets.  What is your application anyway?  Serious use of Isabelle<br>\noutside the Isar system infrastructure is hard to imagine.</p>\n</blockquote>\n<p>Unlike other users, I'm not aiming to use Isabelle for performing proofs as<br>\nsuch.  Rather I'm looking to gain a deep understanding of how Isabelle<br>\nworks.  But thanks for the Isar example for Socrates, which will help me<br>\nunderstand Isar.</p>\n<p>on 27/11/10 11:55 AM, Lawrence Paulson &lt;<a href=\"mailto:lp15@cam.ac.uk\">lp15@cam.ac.uk</a>&gt; wrote:</p>\n<blockquote>\n<p>You might consider downloading an older version from here:<br>\n<a href=\"http://www.cl.cam.ac.uk/~lp15/archive/\">http://www.cl.cam.ac.uk/~lp15/archive/</a></p>\n<p>Until around 2005, ML level interaction was still supported.</p>\n</blockquote>\n<p>Thanks.  I've got Isabelle 2005 with HOL up and running now (curiously, this<br>\nrequired a handful of changes to the Isabelle ML source code to get it<br>\nthrough what purports to be Poly/ML 4.1.4).  But how do I enter HOL term and<br>\ntype quotations into the session?  And what are the HOL term and type<br>\nconstructor functions?</p>\n<p>Mark.</p>",
        "id": 294120359,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660839619
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nThe you should study the \"implementation\" manual, although it is still <br>\nonly half through the main concepts.  Again see <br>\n<a href=\"http://www4.in.tum.de/~wenzelm/test/implementation.pdf\">http://www4.in.tum.de/~wenzelm/test/implementation.pdf</a></p>\n<p>It also tells you about datatypes for types and terms etc.</p>\n<p>Makarius</p>",
        "id": 294120383,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660839625
    },
    {
        "content": "<p>From: Lawrence Paulson &lt;<a href=\"mailto:lp15@cam.ac.uk\">lp15@cam.ac.uk</a>&gt;<br>\nProbably you should look at the papers at <a href=\"http://www.cl.cam.ac.uk/~lp15/papers/isabelle.html\">http://www.cl.cam.ac.uk/~lp15/papers/isabelle.html</a></p>\n<p>Look particularly at the papers under the tab â€œof historical interest\".<br>\nLarry</p>",
        "id": 294120430,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660839643
    },
    {
        "content": "<p>From: <a href=\"mailto:mark@proof-technologies.com\">mark@proof-technologies.com</a><br>\nThese documents I'm sure will be very useful, and Makarius's implementation<br>\nmanual looks especially useful for my purposes.  But I also want to carry<br>\nout basic interaction - this is just the way I go about learning about the<br>\ninnards of a system - I like to construct my own terms and experiment.  So<br>\ncan I enter HOL term quotations in Isabelle 2005?  And can I use ML<br>\nconstructor functions to create HOL terms?</p>\n<p>Mark.</p>\n<p>on 28/11/10 1:26 PM, Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt; wrote:</p>\n<blockquote>\n<p>The you should study the \"implementation\" manual, although it is still<br>\nonly half through the main concepts.  Again see<br>\n<a href=\"http://www4.in.tum.de/~wenzelm/test/implementation.pdf\">http://www4.in.tum.de/~wenzelm/test/implementation.pdf</a></p>\n<p>It also tells you about datatypes for types and terms etc.</p>\n<p>Makarius</p>\n</blockquote>\n<p>on 28/11/10 1:42 PM, Lawrence Paulson &lt;<a href=\"mailto:lp15@cam.ac.uk\">lp15@cam.ac.uk</a>&gt; wrote:</p>\n<blockquote>\n<p>Probably you should look at the papers at<br>\n<a href=\"http://www.cl.cam.ac.uk/~lp15/papers/isabelle.html\">http://www.cl.cam.ac.uk/~lp15/papers/isabelle.html</a></p>\n<p>Look particularly at the papers under the tab â€œof historical interest\".<br>\nLarry</p>\n</blockquote>",
        "id": 294120484,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660839668
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nThe most productive way to do this is to use Isabelle2009-2 with <br>\nIsabelle/jEdit, which happens to be part of that distribution as sneak <br>\npreview.  You can then use it as simple \"IDE\" for ML: it provides tooltips <br>\nfor inferred ML types and hyperlinks to the sources (using CONTROL/COMMAND <br>\nwith mouse hovering).</p>\n<p>In the next release this mode of interaction will work even more smoothly. <br>\nAt some later stage I might also provide a raw ML console for the <br>\nlow-level tinkering below Isabelle itself, but that is a different story.</p>\n<p>Makarius</p>",
        "id": 294120528,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660839686
    },
    {
        "content": "<p>From: Lawrence Paulson &lt;<a href=\"mailto:lp15@cam.ac.uk\">lp15@cam.ac.uk</a>&gt;<br>\nNote that in the early days, there was no form of antiquotation. You could create a term by parsing the corresponding string or (painfully) using constructor functions.<br>\nLarry</p>",
        "id": 294120661,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660839723
    },
    {
        "content": "<p>From: Jeremy Dawson &lt;<a href=\"mailto:jeremy@rsise.anu.edu.au\">jeremy@rsise.anu.edu.au</a>&gt;<br>\nNot so - my own TPHOLs papers in 2002, 2007 and 2009, plus my track B<br>\npresentations in 2002 and 2007, and several other papers presented<br>\nelsewhere, all describe work proving things in different areas, all<br>\nusing Isabelle, none using Isar.</p>\n<p>Jeremy</p>",
        "id": 294120725,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660839741
    },
    {
        "content": "<p>From: Jeremy Dawson &lt;<a href=\"mailto:jeremy@rsise.anu.edu.au\">jeremy@rsise.anu.edu.au</a>&gt;<br>\nMark,</p>\n<p>If I understand the question in your last sentence correctly, the<br>\ninformation you want is in the reference manual, sections 6.5 (terms)<br>\nand 6.8 (types, which are contained in terms).  (this is applies to the<br>\nIsabelle2005 reference manual - it may have been changed since).</p>\n<p>../Isabelle2005/doc/ref.dvi</p>\n<p>Jeremy</p>",
        "id": 294120734,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660839747
    },
    {
        "content": "<p>From: Burkhart Wolff &lt;<a href=\"mailto:Burkhart.Wolff@lri.fr\">Burkhart.Wolff@lri.fr</a>&gt;<br>\nDear Larry,</p>\n<p>Am 29.11.2010 um 12:49 schrieb Lawrence Paulson:</p>\n<blockquote>\n<p>I must give this a try sometime. Does even the standard version of jEdit have this ML mode?</p>\n</blockquote>\n<p>What do you mean exactly ?</p>\n<p>You certainly know the ML-environment in Default-ISAR:</p>\n<p>ML{*<br>\nfun fac x = if x = 0 then 1 else x * fac(x-1)<br>\n*}</p>\n<p>If you use jEdit, and press the shift- button while hovering,<br>\nfor example, over the \"x\" in the ML code, you get directly<br>\ntype \"int\" in the display. Makarius demonstrated this already<br>\nin the Isabelle developper days in Cambridge, but it may well <br>\nbe that you missed this session.</p>\n<p>It is planned that future versions of jEdit (which we will call Pide<br>\nin the future because thats the project that finances Makarius<br>\nwork here) will do that for any part of inner syntax.</p>\n<p>Hhm, I intended to send my mail to Isabelle-users - in case I <br>\nadressed this only to you, could you please forward it ?</p>\n<p>bu</p>\n<blockquote>\n<p>Larry</p>\n<p>On 29 Nov 2010, at 08:25, Burkhart Wolff wrote:</p>\n<blockquote>\n<p>Hmm, i'm one of these dinosaurs that program Isabelle on the ml - level myself. These days, I'll do that inside isar in the ML{} environment which is, I believe, now the best ml environment out there - in jEdit, you can even hover over ml expressions and get the type information. It speeds up ml development even if you do not even target isabelle. You can even try to program without antiquotations, sometimes this is instructive to see what they actually do. However, since they offer a certain infra-structure and discipline to handle proof and theory contexts, they help to avoid the common error to reuse a stale context, which the kernel must avoid in order to become a purely functional transaction machine.<br>\n</p>\n</blockquote>\n</blockquote>",
        "id": 294120800,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660839769
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nYou can try the jEdit-based Prover IDE (PIDE) in Isabelle2009-2 (from the <br>\nIsabelle download website) by invoking \"isabelle jedit\" on the command <br>\nline. Their is also a newer (totally adhoc) snapshot at <br>\n<a href=\"http://www.lri.fr/~wenzel/Isar2010-Orsay/download.html\">http://www.lri.fr/~wenzel/Isar2010-Orsay/download.html</a> which makes <br>\n\"Isabelle\" start the IDE immediately, without Proof General legacy.</p>\n<p>In the next official release we will have both side-by side, but Proof <br>\nGeneral still the default.  It will take quite some time to get such a <br>\nsubstantial change from TTY-based proving to full-scale IDE support into <br>\neveryday practice.</p>\n<p>Makarius</p>",
        "id": 294120814,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660839773
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nThe following file might help with the quickstart: <br>\n<a href=\"http://www.lri.fr/~wenzel/Isar2010-Orsay/Editor.thy\">http://www.lri.fr/~wenzel/Isar2010-Orsay/Editor.thy</a></p>\n<p>jEdit is able to open the URL directly, but you cannot save it back in the <br>\nsame place for obvious reasons.</p>\n<p>Makarius</p>",
        "id": 294120841,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660839778
    },
    {
        "content": "<p>From: Lawrence Paulson &lt;<a href=\"mailto:lp15@cam.ac.uk\">lp15@cam.ac.uk</a>&gt;<br>\nFor Isabelle 2005, just use the included documentation. I hope that it is reasonably complete.</p>\n<p>You will find lots of useful â€œread\" functions in the files sign.ML and thm.ML.<br>\nLarry</p>",
        "id": 294122991,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660840397
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nThere is also a lot of confusion here, because Isabelle2005 features about <br>\n2 or 3 versions of basic things like syntax layers, goal modules etc.<br>\nThe \"read\" function is an odd leftover from much earlier times.</p>\n<p>If you really want to learn about \"stone age\" Isabelle, I recommend <br>\nsomething like Isabelle98, or even 89.  If you want to learn about current <br>\nIsabelle, then use the current release Isabelle2009-2.  The <br>\nimpracticability of using the raw ML loop in contemporay Isabelle is not <br>\naccidental, but an integral part of the system.  By dropping out of it, <br>\nyou won't learn the most important things.</p>\n<p>Makarius</p>",
        "id": 294123382,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660840532
    },
    {
        "content": "<p>From: <a href=\"mailto:mark@proof-technologies.com\">mark@proof-technologies.com</a><br>\non 6/12/10 2:32 PM, Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt; wrote:</p>\n<p>Hmm, not sure whether you're understanding my requirements fully.  When I<br>\nsay \"stone age\", I don't mean \"early version\".  What I mean is \"basic ML<br>\ntoplevel interaction, like what exists in other classic LCF-style theorem<br>\nprovers, such as HOL90, HOL4, ProofPower HOL, HOL Light\".  So can I do this<br>\nin Isabelle2005?  If so, I'd like to, because this is closer to the<br>\ncontemporary system than Isabelle98.</p>\n<p>Please understand that I am not coming at this as a normal user - I am<br>\nlooking to understand the basic Isabelle HOL system itself, rather than to<br>\nunderstand how to use advanced Isabelle HOL most effectively to perform<br>\nproofs.  To do this I will be examining Isabelle source code and interacting<br>\nwith the ML top level, constructing and/or parsing terms and types,<br>\nexamining how they get pretty printed, applying basic inference rules and<br>\nwriting my own basic inference rules.  I imagine that interacting with Proof<br>\nGeneral, Isar, etc involves various layers of processing.  What I want is to<br>\ninteract with the basic system, avoiding these layers (but still being able<br>\nto parse/print expressions).</p>\n<p>By the way, I am getting somewhere on all of this by reading \"Isabelle<br>\nLogics: HOL\" (referred to but not included in the Isabelle2005<br>\ndocumentation), and by using \"read\" (if there is a more appropriate way to<br>\nparse HOL expressions in the ML toplevel, please tell me how).  I have a<br>\ndescription of the syntax in the above document, but there appears to be no<br>\ndetailed description of the lex.</p>\n<p>Mark</p>",
        "id": 294123640,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660840612
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nOn Mon, 6 Dec 2010, <a href=\"mailto:mark@proof-technologies.com\">mark@proof-technologies.com</a> wrote:</p>\n<blockquote>\n<p>on 6/12/10 2:32 PM, Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt; wrote:</p>\n<blockquote>\n<p>The impracticability of using the raw ML loop in contemporay Isabelle <br>\nis not accidental, but an integral part of the system.  By dropping out <br>\nof it, you won't learn the most important things.</p>\n</blockquote>\n<p>Hmm, not sure whether you're understanding my requirements fully.  When <br>\nI say \"stone age\", I don't mean \"early version\".  What I mean is \"basic <br>\nML toplevel interaction, like what exists in other classic LCF-style <br>\ntheorem provers, such as HOL90, HOL4, ProofPower HOL, HOL Light\".  So <br>\ncan I do this in Isabelle2005?  If so, I'd like to, because this is <br>\ncloser to the contemporary system than Isabelle98.</p>\n<p>Please understand that I am not coming at this as a normal user - I am <br>\nlooking to understand the basic Isabelle HOL system itself, rather than <br>\nto understand how to use advanced Isabelle HOL most effectively to <br>\nperform proofs.  To do this I will be examining Isabelle source code and <br>\ninteracting with the ML top level, constructing and/or parsing terms and <br>\ntypes, examining how they get pretty printed, applying basic inference <br>\nrules and writing my own basic inference rules.  I imagine that <br>\ninteracting with Proof General, Isar, etc involves various layers of <br>\nprocessing.  What I want is to interact with the basic system, avoiding <br>\nthese layers (but still being able to parse/print expressions).</p>\n</blockquote>\n<p>My understanding was that you want to see the \"proof technologies\" behind <br>\nthe Isabelle system :-)  I still maintain that the best way to do it is to <br>\nuse Isabelle/ML through the Isar toplevel, either with Proof General or <br>\nthe more recent Isabelle/jEdit, which also gives you quick links to the <br>\nsources.</p>\n<p>The naked ML toplevel lacks the formal Isabelle context, which means you <br>\ncan hardly do anything useful, e.g. being able to parse/print expressions <br>\nalways requires a proper context.</p>\n<p>Above you say \"Isabelle HOL\" as if that would be the system, but in <br>\nreality HOL is a big library within the general Isabelle framework. <br>\nDropping out of the Isar loop, you won't see anything of the HOL name <br>\nspace, and thus cannot use Isabelle/HOL.</p>\n<p>The reason why Larry mentioned Isabelle2005 is because that is the last <br>\nrelease that still happens to have some old layers side-by-side with the <br>\ncurrent context management that was originally introduced for the Isar <br>\nproof language in 1999.  E.g. the \"read\" function refers to the implicit <br>\n\"goal context\" of the old goal package that has finally been deleted this <br>\nyear.  There is yet another theory context accessed via \"the_context()\" <br>\nwhich later became a running gag in internal circles, until it was deleted <br>\nas well.</p>\n<p>Isabelle2005 is a rock solid distribution, but also a particularly <br>\nconfusing one due to many old layers being still in there.  This is why I <br>\nmentioned the more basic Isabelle98, although it lacks the main concepts <br>\nof contempory Isabelle.</p>\n<p>Anyway, when I want to understand Linux, I also stay within the normal <br>\nuser space, instead of booting into single user mode with the init process <br>\nrunning a single instance of bash.</p>\n<blockquote>\n<p>By the way, I am getting somewhere on all of this by reading \"Isabelle <br>\nLogics: HOL\" (referred to but not included in the Isabelle2005 <br>\ndocumentation), and by using \"read\" (if there is a more appropriate way <br>\nto parse HOL expressions in the ML toplevel, please tell me how).  I <br>\nhave a description of the syntax in the above document, but there <br>\nappears to be no detailed description of the lex.</p>\n</blockquote>\n<p>The old HOL manual has hardly ever been maintained in the past 10 years. <br>\nThe term syntax is defined in library space in the context.  The <br>\nprint_syntax command will tell you some aspects of it.</p>\n<p>Makarius</p>",
        "id": 294123656,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660840618
    },
    {
        "content": "<p>From: Jeremy Dawson &lt;<a href=\"mailto:jeremy@rsise.anu.edu.au\">jeremy@rsise.anu.edu.au</a>&gt;<br>\nOn 06/12/10 16:19, Makarius wrote:</p>\n<blockquote>\n<p>On Mon, 6 Dec 2010, <a href=\"mailto:mark@proof-technologies.com\">mark@proof-technologies.com</a> wrote:</p>\n<blockquote>\n<p>on 6/12/10 2:32 PM, Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt; wrote:</p>\n<blockquote>\n<p>The impracticability of using the raw ML loop in contemporay<br>\nIsabelle is not accidental, but an integral part of the system.  By<br>\ndropping out of it, you won't learn the most important things.</p>\n</blockquote>\n<p>Hmm, not sure whether you're understanding my requirements fully. <br>\nWhen I say \"stone age\", I don't mean \"early version\".  What I mean is<br>\n\"basic ML toplevel interaction, like what exists in other classic<br>\nLCF-style theorem provers, such as HOL90, HOL4, ProofPower HOL, HOL<br>\nLight\".  So can I do this in Isabelle2005?  If so, I'd like to,<br>\nbecause this is closer to the contemporary system than Isabelle98.</p>\n<p>Mark,</p>\n</blockquote>\n</blockquote>\n<p>You can certainly do ML interaction effectively in Isabelle2005 - it's<br>\nthe way I normally use Isabelle.</p>\n<blockquote>\n<blockquote>\n<p>Please understand that I am not coming at this as a normal user - I<br>\nam looking to understand the basic Isabelle HOL system itself, <br>\nI regard, this as pretty normal actually.<br>\nrather than to understand how to use advanced Isabelle HOL most<br>\neffectively to perform proofs.  To do this I will be examining </p>\n</blockquote>\n</blockquote>\n<p>The ML layer certainly helps you perform proofs effectively - just by<br>\nway of example here is something I wrote this afternoon, which I<br>\nunderstand cannot be done in Isar</p>\n<p>fun in_tac sg st = (rtac insertI1 ORELSE' (rtac insertI2 THEN' in_tac))<br>\nsg st ;</p>\n<p>val _ = qed_goalw \"inv_rule_aidps\" CI_Rls.thy<br>\n  (rule_defs @ rule_lists) \"inv_rule_set  (PC ` aidps)\"<br>\n  (fn _ =&gt; [ Simp_tac 1, rewtac inv_rule_set_def, Safe_tac,<br>\n    (TRYALL (EVERY' [rtac exI, rtac conjI, rtac refl])),<br>\n    (TRYALL (EVERY' [rtac drl.singleI, in_tac])),</p>\n<p>(this last step reduces 13 subgoals to 1)</p>\n<blockquote>\n<blockquote>\n<p>Isabelle source code and interacting with the ML top level,<br>\nconstructing and/or parsing terms and types, examining how they get<br>\npretty printed, applying basic inference rules and writing my own<br>\nbasic inference rules.  I imagine that interacting with Proof<br>\nGeneral, Isar, etc involves various layers of processing.  What I<br>\nwant is to interact with the basic system, avoiding these layers (but<br>\nstill being able to parse/print expressions).</p>\n</blockquote>\n<p>My understanding was that you want to see the \"proof technologies\"<br>\nbehind the Isabelle system :-)  I still maintain that the best way to<br>\ndo it is to use Isabelle/ML through the Isar toplevel, either with<br>\nProof General or the more recent Isabelle/jEdit, which also gives you<br>\nquick links to the sources.</p>\n<p>The naked ML toplevel lacks the formal Isabelle context, which means<br>\nyou can hardly do anything useful, e.g. being able to parse/print<br>\nexpressions always requires a proper context.<br>\nIf \"proper context\" means something of the type Proof.context, then this<br>\nisn't so - the \"read\" function implicitly uses an old style \"theory<br>\ncontext\" only</p>\n<p>Above you say \"Isabelle HOL\" as if that would be the system, but in<br>\nreality HOL is a big library within the general Isabelle framework.<br>\nDropping out of the Isar loop, you won't see anything of the HOL name<br>\nspace, and thus cannot use Isabelle/HOL.</p>\n<p>I'm not sure if I understand this right, but at the ML level I certainly<br>\nget all the HOL syntax and theorems - note, though, if you're using<br>\n\"new-style\" theory files, then to get theorems derived from the theory<br>\nfile as ML identifiers you need to use the \"use_legacy_bindings\" function.</p>\n<p>The reason why Larry mentioned Isabelle2005 is because that is the<br>\nlast release that still happens to have some old layers side-by-side<br>\nwith the current context management that was originally introduced for<br>\nthe Isar proof language in 1999.  E.g. the \"read\" function refers to<br>\nthe implicit \"goal context\" of the old goal package that has finally<br>\nbeen deleted this year.  There is yet another theory context accessed<br>\nvia \"the_context()\" which later became a running gag in internal<br>\ncircles, until it was deleted as well.</p>\n<p>Isabelle2005 is a rock solid distribution, but also a particularly<br>\nconfusing one due to many old layers being still in there.  This is<br>\nwhy I mentioned the more basic Isabelle98, although it lacks the main<br>\nconcepts of contempory Isabelle.</p>\n<p>I don't recall from earlier emails in this thread whether you actually<br>\nhave got Isabelle2005 running.  As far as I can see it requires an old<br>\nversion of PolyML - namely 4.1.4.  I don't know whether that is easily<br>\navailable now, but I can give you a copy (for x86_linux) if required.</p>\n</blockquote>\n<p>Jeremy</p>\n<blockquote>\n<p>Anyway, when I want to understand Linux, I also stay within the normal<br>\nuser space, instead of booting into single user mode with the init<br>\nprocess running a single instance of bash.</p>\n<blockquote>\n<p>By the way, I am getting somewhere on all of this by reading<br>\n\"Isabelle Logics: HOL\" (referred to but not included in the<br>\nIsabelle2005 documentation), and by using \"read\" (if there is a more<br>\nappropriate way to parse HOL expressions in the ML toplevel, please<br>\ntell me how).  I have a description of the syntax in the above<br>\ndocument, but there appears to be no detailed description of the lex.</p>\n</blockquote>\n<p>The old HOL manual has hardly ever been maintained in the past 10<br>\nyears. The term syntax is defined in library space in the context. <br>\nThe print_syntax command will tell you some aspects of it.</p>\n<p>Makarius<br>\n</p>\n</blockquote>",
        "id": 294123759,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660840655
    },
    {
        "content": "<p>From: <a href=\"mailto:mark@proof-technologies.com\">mark@proof-technologies.com</a><br>\nThanks for you replies everyone.  It sounds like I need to take a look at<br>\nIsar in Isabelle2009 then.  I'll also be looking at Isabelle98.</p>\n<p>on 6/12/10 4:20 PM, Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt; wrote:</p>\n<blockquote>\n<p>My understanding was that you want to see the \"proof technologies\" behind<br>\nthe Isabelle system :-)</p>\n</blockquote>\n<p>Aha I see! :)</p>\n<blockquote>\n<p>Isabelle2005 is a rock solid distribution, but also a particularly<br>\nconfusing one due to many old layers being still in there.  This is why I<br>\nmentioned the more basic Isabelle98, although it lacks the main concepts<br>\nof contempory Isabelle.</p>\n</blockquote>\n<p>I'll be taking a look at Isabelle98 then.  Basic stone age is what I need.<br>\nThanks.</p>\n<blockquote>\n<p>Anyway, when I want to understand Linux, I also stay within the normal<br>\nuser space, instead of booting into single user mode with the init process<br>\nrunning a single instance of bash.</p>\n</blockquote>\n<p>Therein lies the difference between us.  To understand HOL4 I first look at<br>\nHOL90 in detail!</p>\n<blockquote>\n<p>The old HOL manual has hardly ever been maintained in the past 10 years.<br>\nThe term syntax is defined in library space in the context.  The<br>\nprint_syntax command will tell you some aspects of it.</p>\n</blockquote>\n<p>In which document can I find a comprehensive description of the (presumably<br>\nASCII) lex (any version of Isabelle will do for starters)?   And does the<br>\nlex vary between logics?</p>\n<p>Mark.</p>",
        "id": 294123774,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660840661
    },
    {
        "content": "<p>From: <a href=\"mailto:mark@proof-technologies.com\">mark@proof-technologies.com</a><br>\nJeremy, thanks for the reply.</p>\n<p>on 6/12/10 6:10 PM, Jeremy Dawson &lt;<a href=\"mailto:jeremy@rsise.anu.edu.au\">jeremy@rsise.anu.edu.au</a>&gt; wrote:</p>\n<blockquote>\n<p>On 06/12/10 16:19, Makarius wrote:</p>\n<blockquote>\n<p>On Mon, 6 Dec 2010, <a href=\"mailto:mark@proof-technologies.com\">mark@proof-technologies.com</a> wrote:</p>\n</blockquote>\n</blockquote>\n<blockquote>\n<p>You can certainly do ML interaction effectively in Isabelle2005 - it's<br>\nthe way I normally use Isabelle.</p>\n</blockquote>\n<p>Hmm.  I'll carry on looking into Isabelle2005 too then.</p>\n<blockquote>\n<p>The ML layer certainly helps you perform proofs effectively - just by<br>\nway of example here is something I wrote this afternoon, which I<br>\nunderstand cannot be done in Isar</p>\n<p>fun in_tac sg st = (rtac insertI1 ORELSE' (rtac insertI2 THEN' in_tac))<br>\nsg st ;</p>\n<p>....</p>\n</blockquote>\n<p>Excellent, thanks.</p>\n<blockquote>\n<blockquote>\n<p>Dropping out of the Isar loop, you won't see anything of the HOL name<br>\nspace, and thus cannot use Isabelle/HOL.</p>\n</blockquote>\n<p>I'm not sure if I understand this right, but at the ML level I certainly<br>\nget all the HOL syntax and theorems - note, though, if you're using<br>\n\"new-style\" theory files, then to get theorems derived from the theory<br>\nfile as ML identifiers you need to use the \"use_legacy_bindings\" function.</p>\n</blockquote>\n<p>Yes, so do I...  Maybe they are talking about Isabelle2009-2?</p>\n<blockquote>\n<p>I don't recall from earlier emails in this thread whether you actually<br>\nhave got Isabelle2005 running.  As far as I can see it requires an old<br>\nversion of PolyML - namely 4.1.4.  I don't know whether that is easily<br>\navailable now, but I can give you a copy (for x86_linux) if required.</p>\n</blockquote>\n<p>Thanks for the offer, but I have already managed to install Isabelle2005<br>\n(with Poly/ML 4.1.4) and Isabelle2009 (with Poly/ML 5.2.1) from source.  I'm<br>\nnow building Isabelle 2009-2 (with Poly/ML 5.2.1) from source.</p>\n<p>Incidentally, Isabelle2005 required a few source code changes to get it<br>\nthrough Poly/ML 4.1.4.  This seems strange to me, and sounds like a<br>\nconfiguration management problem with either the precise version of<br>\nIsabelle2005 or the precise version of Poly/ML 4.1.4 source code that<br>\nappears on the web.  I can provide details of the changes required if anyone<br>\nis interested..</p>\n<p>Mark.</p>",
        "id": 294123780,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660840667
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nIf \"lex\" means the lexical syntax here, see the two sections called <br>\n\"Lexical matters\" in the isar-ref manual.  There are two, since Isabelle <br>\nhas outer and inner syntax layers.</p>\n<p>Isabelle does not use ASCII code, but \"Isabelle symbol\" notation which <br>\nprovides an infinite alphabet of basic text entities.  See the section <br>\n\"Strings of symbols\" in the implementation manual.</p>\n<p>This refers both to the current official release Isabelle2009-2.  If you <br>\nwant to hear a longer story over 10-20 years of history, I can also do <br>\nthat.</p>\n<p>Makarius</p>",
        "id": 294123808,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660840673
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nOn Mon, 6 Dec 2010, Jeremy Dawson wrote:</p>\n<blockquote>\n<p>The ML layer certainly helps you perform proofs effectively - just by<br>\nway of example here is something I wrote this afternoon, which I<br>\nunderstand cannot be done in Isar</p>\n<p>fun in_tac sg st = (rtac insertI1 ORELSE' (rtac insertI2 THEN' in_tac))<br>\nsg st ;</p>\n<p>val _ = qed_goalw \"inv_rule_aidps\" CI_Rls.thy<br>\n (rule_defs @ rule_lists) \"inv_rule_set  (PC ` aidps)\"<br>\n (fn _ =&gt; [ Simp_tac 1, rewtac inv_rule_set_def, Safe_tac,<br>\n   (TRYALL (EVERY' [rtac exI, rtac conjI, rtac refl])),<br>\n   (TRYALL (EVERY' [rtac drl.singleI, in_tac])),</p>\n</blockquote>\n<p>As a general rule of thumb, you can do always do more in Isar than in the <br>\nstone age -- in the same way, you can do more with a computer that runs <br>\nLinux or Mac OS X, compared to the bare metal.  This does not mean that <br>\nLinus Torvalds or Apple will let you poke around in hardware registers, <br>\nthough.</p>\n<p>See the \"tactic\" proof method in the isar-ref manual how to embed ML <br>\ntactic expressions into Isar source text.</p>\n<p>BTW, old Simp_tac and Safe_tac refer to \"the_context()\" which is not <br>\nalways the same as your goal context, i.e. CI_Rls.thy above.  This is why <br>\nI have called it a running gag from many years ago.</p>\n<blockquote>\n<blockquote>\n<p>The naked ML toplevel lacks the formal Isabelle context, which means<br>\nyou can hardly do anything useful, e.g. being able to parse/print<br>\nexpressions always requires a proper context.<br>\nIf \"proper context\" means something of the type Proof.context, then this<br>\nisn't so - the \"read\" function implicitly uses an old style \"theory<br>\ncontext\" only</p>\n</blockquote>\n</blockquote>\n<p>An old style \"theory context\" is not a proper context.  You are also <br>\nsubject to \"the_context()\" confusion here, i.e. you can never be quite <br>\nsure what you get.  Good that we got rid of the \"read\" function long ago.</p>\n<blockquote>\n<p>I'm not sure if I understand this right, but at the ML level I certainly <br>\nget all the HOL syntax and theorems - note, though, if you're using <br>\n\"new-style\" theory files, then to get theorems derived from the theory <br>\nfile as ML identifiers you need to use the \"use_legacy_bindings\" <br>\nfunction.</p>\n</blockquote>\n<p>Hardly anybody on the mailing list will remember \"old-style\" theories. <br>\nThis is just historical cruft, even in Isabelle2005.  Gladly this has been <br>\ndeleted long ago.</p>\n<p>Makarius</p>",
        "id": 294123821,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660840679
    },
    {
        "content": "<p>From: Jeremy Dawson &lt;<a href=\"mailto:jeremy@rsise.anu.edu.au\">jeremy@rsise.anu.edu.au</a>&gt;<br>\nOn 06/12/10 20:17, Makarius wrote:</p>\n<blockquote>\n<p>On Mon, 6 Dec 2010, Jeremy Dawson wrote:<br>\n</p>\n</blockquote>\n<blockquote>\n<p>See the \"tactic\" proof method in the isar-ref manual how to embed ML<br>\ntactic expressions into Isar source text.</p>\n<p>A warning, though - this often doesn't work.  One of the reasons is<br>\ndescribed in the following paragraph.</p>\n<p>BTW, old Simp_tac and Safe_tac refer to \"the_context()\" which is not<br>\nalways the same as your goal context, i.e. CI_Rls.thy above.  This is<br>\nwhy I have called it a running gag from many years ago.</p>\n<p>I think this is a legitimate criticism, but that the sensible solution<br>\nwould have been to change these tactics so that they use the theory<br>\ncontext of the theorem representing the proof underway.</p>\n<blockquote>\n<blockquote>\n<p>The naked ML toplevel lacks the formal Isabelle context, which means<br>\nyou can hardly do anything useful, e.g. being able to parse/print<br>\nexpressions always requires a proper context.<br>\nIf \"proper context\" means something of the type Proof.context, then this<br>\nisn't so - the \"read\" function implicitly uses an old style \"theory<br>\ncontext\" only</p>\n</blockquote>\n</blockquote>\n<p>An old style \"theory context\" is not a proper context.  You are also<br>\nsubject to \"the_context()\" confusion here, i.e. you can never be quite<br>\nsure what you get.  Good that we got rid of the \"read\" function long ago.</p>\n</blockquote>\n<p>As for the general issue of using an implicit, rather than explicit,<br>\ncontext, well, it isn't so long ago that someone thought it was a _good_<br>\nidea to introduce the \"Goal\" command as an alternative to \"goal\" (for<br>\nthis discussion, Goal = goal (the_context ())).  That is, different<br>\npeople have different opinions on this sort of issue.</p>\n<p>Anyway what I mean is that \"read\", as I understand it, uses only a<br>\n\"theory context\", not a \"proper context\" (which, as I understand it,<br>\ndoesn't exist unless you're using Isar).</p>\n<p>I think that another legitimate criticism of the ML interface is that<br>\n\"read\" and \"prin\" refer to the context of the most recent interactive<br>\nproof, rather than the_context (), but that fixing this doesn't require<br>\nchucking out the entire ML interface.</p>\n<p>as for never being quite sure of what [theory context] you get, I found<br>\nthis problem a good deal worse using Isar, because (I think) the theory<br>\ncontext keeps changing while an Isar file is being processed</p>\n<blockquote>\n<blockquote>\n<p>I'm not sure if I understand this right, but at the ML level I<br>\ncertainly get all the HOL syntax and theorems - note, though, if<br>\nyou're using \"new-style\" theory files, then to get theorems derived<br>\nfrom the theory file as ML identifiers you need to use the<br>\n\"use_legacy_bindings\" function.</p>\n</blockquote>\n<p>Hardly anybody on the mailing list will remember \"old-style\" theories.<br>\nThis is just historical cruft, even in Isabelle2005.  Gladly this has<br>\nbeen deleted long ago.</p>\n<p>whatever the relative merits of new-style theories versus old-style<br>\ntheories, the fact is that massive amounts of proofs using old-style<br>\ntheories exist, and people are currently developing further proofs build<br>\nupon them.  So what make you glad makes recent versions of Isabelle<br>\nunusable for other people</p>\n</blockquote>\n<p>Jeremy</p>\n<blockquote>\n<p>Makarius</p>\n</blockquote>",
        "id": 294123877,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660840685
    },
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\nDear Jeremy &amp; Co,</p>\n<p>May I kindly suggest to make this a private thread among stone age<br>\nusers? Probably only a handful of people know what you are talking about<br>\nand even fewer are interested in the details of ML level interaction. If<br>\nanybody else, apart from the participants of this thread, is interested<br>\nin the details, they should speak up now and I take back what I wrote.</p>\n<p>Thanks<br>\nTobias</p>\n<p>Jeremy Dawson schrieb:</p>",
        "id": 294123892,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660840696
    },
    {
        "content": "<p>From: Brian Huffman &lt;<a href=\"mailto:brianh@cs.pdx.edu\">brianh@cs.pdx.edu</a>&gt;<br>\nI, for one, would be interested in hearing the rest of this discussion.</p>\n<ul>\n<li>Brian</li>\n</ul>",
        "id": 294123953,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660840704
    },
    {
        "content": "<p>From: Michael Norrish &lt;<a href=\"mailto:Michael.Norrish@nicta.com.au\">Michael.Norrish@nicta.com.au</a>&gt;<br>\nI'm quite interested in the details.</p>\n<p>Michael</p>",
        "id": 294123970,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660840710
    },
    {
        "content": "<p>From: Alexander Krauss &lt;<a href=\"mailto:krauss@in.tum.de\">krauss@in.tum.de</a>&gt;<br>\nDear stone age enthusiasts and others,</p>\n<p>In the present discussions, there seem to be some misunderstandings<br>\ndue to conflating two meanings of the word 'Isar'. It means two<br>\nthings: a) the language in which most users write specifications and<br>\nproofs, and b) the management layer that interprets the above<br>\nlanguage, but also deals with contexts, data management, system state<br>\nand transactions, theory management etc. Maybe for the latter meaning<br>\none could read 'Isar' as '<em>Is</em>abelle <em>ar</em>chitecture'. It was initially<br>\nintroduced to support the language, but it is now central to the whole<br>\nsystem.</p>\n<p>While it is perfectly reasonable not to use Isar-the-language (in fact<br>\nautomated proof tools typically don't, yet they produce specifications<br>\nand proofs similar to the ones written by users), in recent Isabelle<br>\nversions (starting with ca. 2007/8) there is no way of circumventing<br>\nIsar-the-architecture. Like every architecture, it has its pros and<br>\ncons, but there is no way of ignoring its existence.</p>\n<p>Isar-the-architecture provides the full SML programming language,<br>\nextended with antiquotations to refer to logical entities from static<br>\n(compile time) contexts. To use this, ML code must obey some<br>\nstructuring principles, and the most important one is that contexts<br>\n(i.e. values of type Proof.context, theory, or local_theory, depending<br>\non the application) must be passed around explicitly. Anyone familiar<br>\nwith the notion of pure functional programming should find this very<br>\nnatural. For example, a theorem declaration (in the global theory) is<br>\na function of type \"theory -&gt; theory\", and most tactics that do<br>\nsomething interesting must depend on a context. So does parsing and<br>\npretty printing. Jeremy's example looks like it is very easy to port<br>\nto current Isabelle by using explicit context passing. Many people on<br>\nthis list will be happy to demonstrate this on self-contained<br>\nexamples. Implicit context passing is only provided by<br>\nIsar-the-language.</p>\n<p>As it was said, Isabelle 2005 still supported unmanaged interaction to<br>\nsome extent, and this is what Jeremy is using. I personally don't know<br>\nof any other (active) user of this model, but I would be curious to<br>\nhear about any.</p>\n<p>In other words, the current model is roughly</p>\n<p>(4) Isabelle/ML embedded into Isar</p>\n<hr>\n<p>(3) Isar language</p>\n<hr>\n<p>(2) Isar infrastructure</p>\n<hr>\n<p>(1) Raw ML toplevel (provided by compiler)</p>\n<p>(4) is where you actually work in when interacting in ML, and if you<br>\nwant to ignore (3), you can do so by using the embedded language only.<br>\n From (1) you hardly get anything useful. From what Mark wrote, I<br>\nassume that he is more interested in the logical part of the<br>\ninternals, not so much the management part. IMHO the easiest way to<br>\nexplore this in Isabelle2009-2 is using (4). In Isabelle2005, you can<br>\nstill use (1), but what you get is, of course, an impression of how<br>\nIsabelle2005 worked.</p>\n<p>I think that much confusion comes from confusing (1) and (4). Maybe<br>\nreimlementing (1) in LISP (as in Edinburgh LCF) could solve this<br>\nproblem :-)).</p>\n<p>Alex</p>",
        "id": 294123993,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660840716
    },
    {
        "content": "<p>From: Steven Obua &lt;<a href=\"mailto:steven.obua@googlemail.com\">steven.obua@googlemail.com</a>&gt;<br>\nOn 08.12.2010, at 10:19, Alexander Krauss wrote:</p>\n<blockquote>\n<p>To use this, ML code must obey some<br>\nstructuring principles, and the most important one is that contexts<br>\n(i.e. values of type Proof.context, theory, or local_theory, depending<br>\non the application) must be passed around explicitly. Anyone familiar<br>\nwith the notion of pure functional programming should find this very<br>\nnatural.</p>\n</blockquote>\n<p>I think that this point is a good one and deserves special attention. <br>\na) You need to pass contexts around in purely functional programming.<br>\nb) Most of the time, you don't want to deal with this passing around explicitly. <br>\nA purely functional programming language should deal with this in a natural and pretty way <br>\n(nope, monads are not natural; and they are ugly). If there just were such a language ...</p>\n<blockquote>\n<p>I think that much confusion comes from confusing (1) and (4). Maybe<br>\nreimlementing (1) in LISP (as in Edinburgh LCF) could solve this<br>\nproblem :-)).<br>\n</p>\n</blockquote>\n<p>Why not try Babel-17 instead of LISP? A new and much refined version of it will come out this Friday, together with a Netbeans plugin :-)</p>\n<ul>\n<li>Steven</li>\n</ul>",
        "id": 294124015,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660840722
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nVery nice explanation -- including all your other text from above that I <br>\nhave suppressed for brevity.  I did not know the wording of Isar as <br>\n<em>Is</em>abelle <em>ar</em>chitecture' so far.</p>\n<p>There is little left to add, apart from (5) Isabelle/Scala and (6) Prover <br>\nIDE.  The latter already helps a lot in exploring Isabelle/ML right now, <br>\nand at a later stage raw ML access will return for bare bones system <br>\nmaintenance, but that is not very signifant compared to many other things <br>\nthat are still missing.</p>\n<p>Makarius</p>",
        "id": 294124049,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660840734
    },
    {
        "content": "<p>From: Lawrence Paulson &lt;<a href=\"mailto:lp15@cam.ac.uk\">lp15@cam.ac.uk</a>&gt;<br>\nHistorically, I see it like this. By 1989, we had the basics: higher-order unification as the inference mechanism and higher-order logic as the logical framework. A couple of years later, we had order-sorted polymorphism. By around 2000, with innovations such as axiomatic type classes, inductive and datatype definitions and the classical reasoner, classic Isabelle could be described as mature. Isar represents a new departure, but what is particularly nice is how well it fits on the old logical framework infrastructure. One might imagine that everything had been foreseen at the start, but this isn't true at all. All this is to say that â€œto understand Isabelle\" could refer to many very different things.<br>\nLarry</p>",
        "id": 294124068,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660840741
    },
    {
        "content": "<p>From: <a href=\"mailto:mark@proof-technologies.com\">mark@proof-technologies.com</a><br>\n(apologies for a week of absence...)</p>\n<p>on 28/11/10 8:54 PM, Lawrence Paulson &lt;<a href=\"mailto:lp15@cam.ac.uk\">lp15@cam.ac.uk</a>&gt; wrote:</p>\n<blockquote>\n<p>Note that in the early days, there was no form of antiquotation. You could<br>\ncreate a term by parsing the corresponding string or (painfully) using<br>\nconstructor functions.<br>\nLarry</p>\n</blockquote>\n<p>I see, so would I be right in saying that the \"read\" function is the<br>\nappropriate ML function for parsing a string into a HOL term?  Is there a<br>\ncorresponding function for HOL types?  And where is the best place to find a<br>\ncomplete description of the lex/syntax of Isabelle HOL terms and types (for<br>\nIsabelle 2005)?</p>\n<p>on 29/11/10 10:24 AM, Jeremy Dawson &lt;<a href=\"mailto:jeremy@rsise.anu.edu.au\">jeremy@rsise.anu.edu.au</a>&gt; wrote:</p>\n<blockquote>\n<p>If I understand the question in your last sentence correctly, the<br>\ninformation you want is in the reference manual, sections 6.5 (terms)<br>\nand 6.8 (types, which are contained in terms).  (this is applies to the<br>\nIsabelle2005 reference manual - it may have been changed since).</p>\n</blockquote>\n<p>That's one of the two things I was looking for.  Thanks that helps.</p>\n<p>Mark.</p>\n<blockquote>\n<p>On 28/11/10 14:32, <a href=\"mailto:mark@proof-technologies.com\">mark@proof-technologies.com</a> wrote:</p>\n<blockquote>\n<p>But I also want to carry out basic interaction - this is just the way I<br>\ngo<br>\nabout learning about the innards of a system - I like to construct my<br>\nown terms and experiment.  So can I enter HOL term quotations in<br>\nIsabelle 2005?  And can I use ML constructor functions to create<br>\nHOL terms?</p>\n<p>Mark.</p>\n</blockquote>\n</blockquote>",
        "id": 294124581,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660840900
    }
]