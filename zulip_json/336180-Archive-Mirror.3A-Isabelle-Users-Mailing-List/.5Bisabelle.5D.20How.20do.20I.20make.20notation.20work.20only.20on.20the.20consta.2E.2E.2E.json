[
    {
        "content": "<p>From: Rafal Kolanski &lt;<a href=\"mailto:rafalk@cse.unsw.edu.au\">rafalk@cse.unsw.edu.au</a>&gt;<br>\nDear Isabelle Users,</p>\n<p>I'm on Isabelle 2009-2, and I'm stuck with the following problem. I have <br>\na structure whose constructor name is the same as its type. For <br>\npresentation in LaTeX I'm using a notation hack which makes constants a <br>\ndifferent font than normal isabelle text.</p>\n<p>Here's the problem. I define notation as:</p>\n<p>notation (output)<br>\n   blah_C (\"moo\")</p>\n<p>then:<br>\n    typ \"('a, 'p, blah_C) ptr_t\"<br>\nprints:<br>\n    ('a,'p,moo) ptr_t</p>\n<p>and: term \"blah_C x y z\" prints: \"moo x y z\" :: moo</p>\n<p>Why does output notation pick up on the type, when I'm not using a type <br>\ntranslation? How do I specify I want the constant blah_C as the target <br>\nof my notation and not the type?</p>\n<p>I realise that the same constructor and type name is not ideal, but the <br>\noutput does not come from a tool written by me.</p>\n<p>Sincerely,</p>\n<p>Rafal Kolanski.</p>",
        "id": 294132588,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660843355
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nThat is a feature of all Isabelle versions until Isabelle2009-1.  In <br>\nIsabelle2009-2 the syntax becaume fully \"authentic\" after many years of <br>\nreforming the system (see also the NEWS for Isabelle2009-2).</p>\n<p>So the above should work properly, if this is really Isabelle2009-2.</p>\n<p>Makarius</p>",
        "id": 294132640,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660843372
    },
    {
        "content": "<p>From: Rafal Kolanski &lt;<a href=\"mailto:rafalk@cse.unsw.edu.au\">rafalk@cse.unsw.edu.au</a>&gt;<br>\nActually, I apologise, that was a typo due to being tired and stressed. <br>\nI meant Isabelle 2009-1. Do you know of any way of brute-forcing the <br>\nissue on this version? I'm low on time and I don't care about elegance, <br>\nespecially if the problem no longer exists on 2009-2 and afterwards.</p>\n<p>Hats off to whoever solved this in subsequent versions. I didn't even <br>\nnotice the problem was there until it hit me over the head.</p>\n<p>Sincerely,</p>\n<p>Rafal Kolanski.</p>",
        "id": 294132655,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660843378
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nOn Wed, 16 Mar 2011, Rafal Kolanski wrote:</p>\n<blockquote>\n<p>I meant Isabelle 2009-1. Do you know of any way of brute-forcing the <br>\nissue on this version?</p>\n</blockquote>\n<p>Isabelle2009-1 does provide authentic syntax, but not for certain older <br>\npackages.  So it depends what you mean by the following:</p>\n<blockquote>\n<p>I have a structure whose constructor name is the same as its type.</p>\n</blockquote>\n<p>Is this a HOL datatype?  This is probably the most delicate situation.</p>\n<p>For output of plain constructor terms, you can use 'abbreviation' with its <br>\nown notation (the const is authentic here).  It does not work for <br>\npatterns, though.  For example:</p>\n<p>datatype blah_C = blah_C</p>\n<p>abbreviation (output)<br>\n   blah_C_syntax (\"moo\")<br>\n   where \"blah_C_syntax == blah_C\"</p>\n<p>typ blah_C  -- \"blah_C\"<br>\nterm blah_C  -- \"moo\"<br>\nterm \"case x of blah_C =&gt; y\"  -- \"blah_C (!)\"</p>\n<p>Makarius</p>",
        "id": 294132675,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660843384
    },
    {
        "content": "<p>From: Rafal Kolanski &lt;<a href=\"mailto:rafalk@cse.unsw.edu.au\">rafalk@cse.unsw.edu.au</a>&gt;<br>\nOn 17/03/11 00:57, Makarius wrote:</p>\n<blockquote>\n<p>On Wed, 16 Mar 2011, Rafal Kolanski wrote:</p>\n<blockquote>\n<p>I meant Isabelle 2009-1. Do you know of any way of brute-forcing the<br>\nissue on this version?</p>\n</blockquote>\n<p>Isabelle2009-1 does provide authentic syntax, but not for certain older<br>\npackages. So it depends what you mean by the following:</p>\n<blockquote>\n<p>I have a structure whose constructor name is the same as its type.</p>\n</blockquote>\n<p>Is this a HOL datatype? This is probably the most delicate situation.</p>\n</blockquote>\n<p>I'm assuming it's something developed based on datatype code. It tries <br>\nto mimic a non-extensible recursive record.</p>\n<blockquote>\n<p>For output of plain constructor terms, you can use 'abbreviation' with<br>\nits own notation (the const is authentic here). It does not work for<br>\npatterns, though. For example:</p>\n<p>datatype blah_C = blah_C</p>\n<p>abbreviation (output)<br>\nblah_C_syntax (\"moo\")<br>\nwhere \"blah_C_syntax == blah_C\"</p>\n<p>typ blah_C -- \"blah_C\"<br>\nterm blah_C -- \"moo\"<br>\nterm \"case x of blah_C =&gt; y\" -- \"blah_C (!)\"</p>\n</blockquote>\n<p>This is perfect for the problem at hand. I don't really care what's <br>\ninside the type itself, only its record-like capabilities, so I will <br>\nnever see a case statement like that, and certainly won't present it in <br>\nthe document.</p>\n<p>The authentic syntax in later versions sounds great too, it means my <br>\n\"show constant names in a different font\" notation hack (you have to <br>\nspecify a list of them manually, but still) will work in future versions.</p>\n<p>Thank you Makarius!</p>\n<p>Rafal Kolanski.</p>",
        "id": 294132699,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660843391
    }
]