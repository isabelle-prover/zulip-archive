[
    {
        "content": "<p>From: Ching-Tsun Chou &lt;<a href=\"mailto:chingtsun.chou@gmail.com\">chingtsun.chou@gmail.com</a>&gt;<br>\nIs there a one-line proof of the equation?  The following is the shortest<br>\none I can find.  I am surprised that arith does not solve it directly.</p>\n<p>More generally, how do I tell Isabelle just keep normalizing and then apply<br>\nreflexivity, like how refl works in Coq?</p>\n<p>Thanks!</p>\n<ul>\n<li>Ching Tsun</li>\n</ul>\n<p>lemma test: \"foo 2 = foo (Suc (Suc 0))\"<br>\nproof -<br>\n  have \"2 = Suc (Suc 0)\" by arith<br>\n  then show ?thesis by arith<br>\nqed</p>",
        "id": 294743827,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661192630
    },
    {
        "content": "<p>From: Jørgen Villadsen &lt;<a href=\"mailto:jovi@dtu.dk\">jovi@dtu.dk</a>&gt;<br>\nHi,</p>\n<p>One-line proof: </p>\n<p>lemma test: \"foo 2 = foo (Suc (Suc 0))\"<br>\n  unfolding numeral_nat by (rule refl)</p>\n<p>Regards, Jørgen</p>",
        "id": 294743847,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661192640
    },
    {
        "content": "<p>From: Ching-Tsun Chou &lt;<a href=\"mailto:chingtsun.chou@gmail.com\">chingtsun.chou@gmail.com</a>&gt;<br>\nThanks!</p>\n<p>How about \"foo (Suc (Suc n)) = foo (n + 2)\"?</p>\n<ul>\n<li>Ching Tsun</li>\n</ul>",
        "id": 294743882,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661192642
    },
    {
        "content": "<p>From: Jørgen Villadsen &lt;<a href=\"mailto:jovi@dtu.dk\">jovi@dtu.dk</a>&gt;<br>\nHi,</p>\n<p>I am no expert on the matter but here is a suggestion:</p>\n<p>lemma \"foo (Suc (Suc n)) = foo (n + 2)\"<br>\n  by (simp add: eval_nat_numeral)</p>\n<p>Regards, Jørgen</p>\n<p>PS - Shorter proofs of your first lemma:</p>\n<p>lemma \"foo 2 = foo (Suc (Suc 0))\"<br>\n  using numeral_nat by metis</p>\n<p>lemma \"foo 2 = foo (Suc (Suc 0))\"<br>\n  using numeral_2_eq_2 by argo</p>\n<p>lemma \"foo 2 = foo (Suc (Suc 0))\"<br>\n  unfolding numeral_nat using refl .</p>",
        "id": 294743903,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661192648
    },
    {
        "content": "<p>From: Jørgen Villadsen &lt;<a href=\"mailto:jovi@dtu.dk\">jovi@dtu.dk</a>&gt;<br>\nActually just \"by simp\" but \"by (simp add: eval_nat_numeral)\" works on you first lemma too... :-)</p>\n<p>Jørgen</p>",
        "id": 294743937,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661192664
    },
    {
        "content": "<p>From: Ching-Tsun Chou &lt;<a href=\"mailto:chingtsun.chou@gmail.com\">chingtsun.chou@gmail.com</a>&gt;<br>\nThanks!</p>\n<p>Where are these tricks documented?</p>\n<ul>\n<li>Ching Tsun</li>\n</ul>",
        "id": 294743948,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661192668
    },
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\nOn 04/09/2018 01:00, Jørgen Villadsen wrote:</p>\n<blockquote>\n<p>Actually just \"by simp\" but \"by (simp add: eval_nat_numeral)\" works on you first lemma too... :-)</p>\n</blockquote>\n<p>That is what I do. There is also numeral_eq_Suc, which may be a bit easier to <br>\nremember than eval_nat_numeral. In fact, the latter one may disappear at some point.</p>\n<p>Tobias</p>\n<blockquote>\n<p>Jørgen</p>\n<p>From: Jørgen Villadsen<br>\nSent: 4. september 2018 00:55<br>\nTo: 'Ching-Tsun Chou'; <a href=\"mailto:cl-isabelle-users@lists.cam.ac.uk\">cl-isabelle-users@lists.cam.ac.uk</a><br>\nSubject: RE: [isabelle] How do I prove \"foo 2 = foo (Suc (Suc 0))\"?</p>\n<p>Hi,</p>\n<p>I am no expert on the matter but here is a suggestion:</p>\n<p>lemma \"foo (Suc (Suc n)) = foo (n + 2)\"<br>\n   by (simp add: eval_nat_numeral)</p>\n<p>Regards, Jørgen</p>\n<p>PS - Shorter proofs of your first lemma:</p>\n<p>lemma \"foo 2 = foo (Suc (Suc 0))\"<br>\n   using numeral_nat by metis</p>\n<p>lemma \"foo 2 = foo (Suc (Suc 0))\"<br>\n   using numeral_2_eq_2 by argo</p>\n<p>lemma \"foo 2 = foo (Suc (Suc 0))\"<br>\n   unfolding numeral_nat using refl .</p>\n<p>From: Ching-Tsun Chou [mailto:chingtsun.chou@gmail.com]<br>\nSent: 4. september 2018 00:45<br>\nTo: Jørgen Villadsen<br>\nCc: <a href=\"mailto:cl-isabelle-users@lists.cam.ac.uk\">cl-isabelle-users@lists.cam.ac.uk</a><br>\nSubject: Re: [isabelle] How do I prove \"foo 2 = foo (Suc (Suc 0))\"?</p>\n<p>Thanks!</p>\n<p>How about \"foo (Suc (Suc n)) = foo (n + 2)\"?</p>\n<ul>\n<li>Ching Tsun</li>\n</ul>\n<p>On Mon, Sep 3, 2018 at 3:08 PM Jørgen Villadsen &lt;jovi@dtu.dk&lt;mailto:<a href=\"mailto:jovi@dtu.dk\">jovi@dtu.dk</a>&gt;&gt; wrote:<br>\nHi,</p>\n<p>One-line proof:</p>\n<p>lemma test: \"foo 2 = foo (Suc (Suc 0))\"<br>\n   unfolding numeral_nat by (rule refl)</p>\n<p>Regards, Jørgen</p>\n<p>-----Original Message-----<br>\nFrom: cl-isabelle-users-bounces@lists.cam.ac.uk&lt;mailto:<a href=\"mailto:cl-isabelle-users-bounces@lists.cam.ac.uk\">cl-isabelle-users-bounces@lists.cam.ac.uk</a>&gt; [mailto:cl-isabelle-users-bounces@lists.cam.ac.uk&lt;mailto:cl-isabelle-users-bounces@lists.cam.ac.uk&gt;] On Behalf Of Ching-Tsun Chou<br>\nSent: 3. september 2018 23:34<br>\nTo: cl-isabelle-users@lists.cam.ac.uk&lt;mailto:<a href=\"mailto:cl-isabelle-users@lists.cam.ac.uk\">cl-isabelle-users@lists.cam.ac.uk</a>&gt;<br>\nSubject: [isabelle] How do I prove \"foo 2 = foo (Suc (Suc 0))\"?</p>\n<p>Is there a one-line proof of the equation?  The following is the shortest<br>\none I can find.  I am surprised that arith does not solve it directly.</p>\n<p>More generally, how do I tell Isabelle just keep normalizing and then apply<br>\nreflexivity, like how refl works in Coq?</p>\n<p>Thanks!<br>\n- Ching Tsun</p>\n<p>lemma test: \"foo 2 = foo (Suc (Suc 0))\"<br>\nproof -<br>\n   have \"2 = Suc (Suc 0)\" by arith<br>\n   then show ?thesis by arith<br>\nqed</p>\n<p><a href=\"/user_uploads/14278/GQl-czfpciFbz_CeSkPq3ZwJ/smime.p7s\">smime.p7s</a></p>\n</blockquote>",
        "id": 294743992,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661192692
    }
]