[
    {
        "content": "<p>From: Rafal Kolanski &lt;<a href=\"mailto:rafalk@cse.unsw.edu.au\">rafalk@cse.unsw.edu.au</a>&gt;<br>\nDear Isabelle Users and Gurus,</p>\n<p>I have written a ML function which creates a new constant definition <br>\nbased on the type of an old one, for example, the _any transform:</p>\n<p>definition<br>\n   \"map_bp_any p ≡ λs. ∃v. map_bp p v s\"<br>\n(where map_bp was also defined using \"definition\")</p>\n<p>I also want to generate the appropriate mixfix syntax for the new <br>\nconstant. I know how to do the transformation and how to declare syntax, <br>\nbut I need to get the syntax for a constant, e.g. \"map_bp\". I've been <br>\ngrepping through the source but can't see anything that returns a mixfix.</p>\n<p>In this case, I want to get out:<br>\n    (\"_ :→ _\" [56,51] 56)<br>\nso I can turn it into:<br>\n    (\"_ :→ -\" [56] 56)</p>\n<p>Does anyone know how to do the syntax retrieval for a constant?</p>\n<p>Sincerely,</p>\n<p>Rafal Kolanski.</p>",
        "id": 294103928,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660834633
    },
    {
        "content": "<p>From: Brian Huffman &lt;<a href=\"mailto:brianh@cs.pdx.edu\">brianh@cs.pdx.edu</a>&gt;<br>\nHi Rafal,</p>\n<p>This is not as simple as it might seem, because mixfixes for top-level<br>\nconstants are not actually stored anywhere. I did some grepping of my<br>\nown, and I found that when you declare a top-level mixfix, it<br>\nultimately gets passed to Mixfix.syn_ext_consts (defined in<br>\nPure/Syntax/mixfix.ML). This function converts the mixfix into a<br>\nsyn_ext, which is a lower-level representation that is closer to what<br>\nactually gets stored in the theory data.</p>\n<p>After more grepping, I did come across a function in<br>\nPure/Syntax/syntax.ML that looks like what you want:</p>\n<p>ML_val {* Syntax.guess_infix (Sign.syn_of @{theory}) @{const_syntax plus} *}</p>\n<p>val it = SOME (Infixl (\"+\", 65)) : Mixfix.mixfix option</p>\n<p>Evidently it is named \"guess_infix\" because it reconstructs a<br>\nhigher-level \"mixfix\" value by looking at the low-level productions<br>\nstored in the theory's grammar. So it might not always succeed if<br>\nthere is anything unusual about the syntax for the given constant.</p>\n<p>According to the mercurial repository, this function was added by<br>\nFlorian Haftmann in April 2008; maybe he could tell us more about its<br>\nexpected behavior.</p>\n<ul>\n<li>Brian</li>\n</ul>",
        "id": 294103952,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660834638
    },
    {
        "content": "<p>From: Florian Haftmann &lt;<a href=\"mailto:florian.haftmann@informatik.tu-muenchen.de\">florian.haftmann@informatik.tu-muenchen.de</a>&gt;<br>\nHi all,</p>\n<blockquote>\n<p>After more grepping, I did come across a function in<br>\nPure/Syntax/syntax.ML that looks like what you want:</p>\n<p>ML_val {* Syntax.guess_infix (Sign.syn_of @{theory}) @{const_syntax plus} *}</p>\n<p>val it = SOME (Infixl (\"+\", 65)) : Mixfix.mixfix option</p>\n<p>According to the mercurial repository, this function was added by<br>\nFlorian Haftmann in April 2008; maybe he could tell us more about its<br>\nexpected behavior.</p>\n</blockquote>\n<p>This has been introduced by me to solve a technical issue concerning the<br>\nHaskabelle importer.  I would not recommend to use this.</p>\n<blockquote>\n<p>definition<br>\n  \"map_bp_any p ≡ λs. ∃v. map_bp p v s\"<br>\n(where map_bp was also defined using \"definition\") </p>\n</blockquote>\n<blockquote>\n<p>In this case, I want to get out:<br>\n    (\"_ :→ _\" [56,51] 56)<br>\nso I can turn it into:<br>\n    (\"_ :→ -\" [56] 56) </p>\n</blockquote>\n<p>Can you provide me with a little more context?  There are various ways<br>\nto deal with your problem, and the right way depends on how systematic<br>\nthe desired behaviour can be described.</p>\n<p>Florian<br>\n<a href=\"/user_uploads/14278/UmfmT0O2PGYFC5urqewh9O5f/signature.asc\">signature.asc</a></p>",
        "id": 294103983,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660834650
    },
    {
        "content": "<p>From: Rafal Kolanski &lt;<a href=\"mailto:rafalk@cse.unsw.edu.au\">rafalk@cse.unsw.edu.au</a>&gt;<br>\nHi Brian,</p>\n<p>Brian Huffman wrote:</p>\n<blockquote>\n<p>This is not as simple as it might seem, because mixfixes for<br>\ntop-level constants are not actually stored anywhere. I did some<br>\ngrepping of my own, and I found that when you declare a top-level<br>\nmixfix, it ultimately gets passed to Mixfix.syn_ext_consts (defined<br>\nin Pure/Syntax/mixfix.ML). This function converts the mixfix into a <br>\nsyn_ext, which is a lower-level representation that is closer to what<br>\n actually gets stored in the theory data.</p>\n</blockquote>\n<p>It is indeed not at all simple. I ended up just writing out the mixfix <br>\nrepresentation by hand for the base constants, and they doing transforms <br>\non that.</p>\n<p>Purely out of interest, do you know how one can get the syn_ext for a <br>\nconstant?</p>\n<blockquote>\n<p>Evidently it is named \"guess_infix\" because it reconstructs a <br>\nhigher-level \"mixfix\" value by looking at the low-level productions <br>\nstored in the theory's grammar. So it might not always succeed if <br>\nthere is anything unusual about the syntax for the given constant.<br>\n[...]<br>\nAccording to the mercurial repository, this function was added by <br>\nFlorian Haftmann in April 2008; maybe he could tell us more about its<br>\n expected behavior.</p>\n</blockquote>\n<p>As Florian indicated, that path doesn't look very stable. From examining <br>\nit, it seems the underlying syntax representation requires more time to <br>\ncomprehend than I have.</p>\n<p>Thanks for the advice!</p>\n<p>Sincerely,</p>\n<p>Rafal Kolanski.</p>",
        "id": 294104358,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660834754
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nI do not know of a proper way.  There is a conceptual problem here, since <br>\nthere is not \"the\" syntax for a constant. If the user writes something <br>\nlike</p>\n<p>definition c (mixfix) where \"c = t\"</p>\n<p>then there is along way down to the internal syntax data structures.  And <br>\nit is hard to interpret these later, and even harder to recover a <br>\nhigh-level notation declaration from that.</p>\n<p>Also note that users could have there own notation/no_notation <br>\ndeclarations apart from that.  The whole thing is subject to local <br>\ncontexts and interpretations.  The print mode is another degree of freedom <br>\nhere.</p>\n<p>Two many features, too many layers ...</p>\n<p>Makarius</p>",
        "id": 294104478,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660834791
    }
]