[
    {
        "content": "<p>From: Joachim Breitner &lt;<a href=\"mailto:breitner@kit.edu\">breitner@kit.edu</a>&gt;<br>\nHi,</p>\n<p>I’m quite fond of \"also ... also ... finally\" chains, as they tend to<br>\nremove a lot of distracting technicalities from a proof.</p>\n<p>When working with HOLCF proofs, I would like to do proofs like this:</p>\n<p>notepad<br>\n        begin<br>\n          fix a b c d f g<br>\n          have \"a ⊑ f ⋅ b\" sorry<br>\n          also have \"b ⊑ g ⋅ c\" sorry<br>\n          also have \"c ⊑ d\" sorry<br>\n          finally<br>\n          have \"a ⊑ f ⋅ (g ⋅ d)\".<br>\n        end</p>\n<p>I currently do that by hard-coding all the variants of the trans rule<br>\nthat I need:</p>\n<p>lemma [trans]:  \"a ⊑ f ⋅ b ⟹ b ⊑ c ⟹ a ⊑ f ⋅ c\"<br>\n          by (erule below_trans) (intro monofun_cfun_fun monofun_cfun_arg)<br>\n        lemma [trans]:  \"a ⊑ f ⋅ b ⟹ f ⊑ g ⟹ a ⊑ g ⋅ b\"<br>\n          by (erule below_trans) (intro monofun_cfun_fun monofun_cfun_arg)<br>\n        lemma [trans]:  \"a ⊑ f ⋅ (g ⋅ b) ⟹ b ⊑ c ⟹ a ⊑ f ⋅ (g ⋅ c)\"<br>\n          by (erule below_trans) (intro monofun_cfun_fun monofun_cfun_arg)<br>\n        lemma [trans]: \"a ⊑ f ⋅ b ⋅ c ⋅ d ⟹ b ⊑ b' ⟹ a ⊑ f ⋅ b' ⋅ c ⋅ d\"<br>\n          by (erule below_trans) (intro monofun_cfun_fun monofun_cfun_arg)<br>\n        lemma [trans]:  \"a ⊑ f ⋅ b ⋅ c ⋅ d ⟹ c ⊑ c' ⟹ a ⊑ f ⋅ b ⋅ c' ⋅ d\"<br>\n          by (erule below_trans) (intro monofun_cfun_fun monofun_cfun_arg)<br>\n        lemma [trans]:  \"a ⊑ f ⋅ (g ⋅ b) ⋅ c ⋅ d ⟹ g ⊑ g' ⟹ a ⊑ f ⋅ (g' ⋅ b) ⋅ c ⋅ d\"<br>\n          by (erule below_trans) (intro monofun_cfun_fun monofun_cfun_arg)<br>\n        lemma [trans]:  \"a ⊑ f ⋅ b ⋅ (g ⋅ c ⋅ d) ⋅ e ⟹ d ⊑ d' ⟹ a ⊑ f ⋅ b ⋅ (g ⋅ c ⋅ d') ⋅ e\"<br>\n          by (erule below_trans) (intro monofun_cfun_fun monofun_cfun_arg)</p>\n<p>This works, but is rather inflexible and does not scale. And note that<br>\nall those trans rules are solved by the same set of rules.</p>\n<p>How can I improve that?</p>\n<p>One thing I tried was to use</p>\n<p>lemma strong_trans[trans]:<br>\n          \"a ⊑ f x ⟹ x ⊑ y ⟹ cont f ⟹ a ⊑ f y \" sorry</p>\n<p>This way, the calculation above become</p>\n<p>cont (Rep_cfun f) ⟹ cont (λa. f⋅(g⋅a)) ⟹ a ⊑ f⋅(g⋅d)</p>\n<p>so using \"by simp\" instead of \".\" finishes this. But I find this<br>\nannoying (I really like to finish with \"finally ?something.\").</p>\n<p>Is there a way to have the side-condition already checked by \"trans\" (by<br>\nsolving it with \"intro cont2cont\", for example), so that that they never<br>\nshow up to the user?</p>\n<p>That rule also breaks antisymmetry proofs like</p>\n<p>notepad<br>\n        begin<br>\n          fix a b c :: \"'a ::cpo\"<br>\n          have \"a ⊑ b\" sorry<br>\n          also have \"b ⊑ c\" sorry<br>\n          also have \"c ⊑ a\" sorry<br>\n          finally<br>\n          have \"a = c\".<br>\n        end</p>\n<p>as the calculation at the end will be the unhelpful theorem</p>\n<p>cont (λa. a) ⟹ cont (λa. a) ⟹ a ⊑ a.</p>\n<p>can I avoid that?</p>\n<p>Thanks<br>\nJoachim<br>\n<a href=\"/user_uploads/14278/0TdzW_IffVJNRS9ji4e_eGcM/signature.asc\">signature.asc</a></p>",
        "id": 294277557,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660919281
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nOn Wed, 14 May 2014, Joachim Breitner wrote:</p>\n<blockquote>\n<p>One thing I tried was to use</p>\n<p>lemma strong_trans[trans]:<br>\n         \"a ⊑ f x ⟹ x ⊑ y ⟹ cont f ⟹ a ⊑ f y \" sorry</p>\n<p>This way, the calculation above become</p>\n<p>cont (Rep_cfun f) ⟹ cont (λa. f⋅(g⋅a)) ⟹ a ⊑ f⋅(g⋅d)</p>\n<p>so using \"by simp\" instead of \".\" finishes this. But I find this<br>\nannoying (I really like to finish with \"finally ?something.\").</p>\n</blockquote>\n<p>If the final \"by simp\" (or \"by simp_all\") for accumulated side-conditions <br>\ndoes the job, why not use it?  If all Isar calculations were to end with <br>\n\".\" I could have omitted that flexibility in the language.</p>\n<p>Formally, you did not explain the annoyance nor why you like to do it only <br>\nlike that.  There can be technical problems in some situations, but if <br>\nthat is the case here it needs to be made specific.</p>\n<blockquote>\n<p>Is there a way to have the side-condition already checked by \"trans\" (by <br>\nsolving it with \"intro cont2cont\", for example), so that that they never <br>\nshow up to the user?</p>\n</blockquote>\n<p>That is just the standard question about all structure proof elements: Is <br>\nit sufficient to have some fixed scheme of rule application that is <br>\nparameterized by facts from the library?  Or is there a need to allow <br>\narbitrary tool implementations in that slot (in Isabelle/ML).  15 years <br>\nago the question was on the table, and the answer was that plain rules for <br>\n'also' are usually sufficient.</p>\n<blockquote>\n<p>That rule also breaks antisymmetry proofs like</p>\n<p>notepad<br>\n       begin<br>\n         fix a b c :: \"'a ::cpo\"<br>\n         have \"a ⊑ b\" sorry<br>\n         also have \"b ⊑ c\" sorry<br>\n         also have \"c ⊑ a\" sorry<br>\n         finally<br>\n         have \"a = c\".<br>\n       end</p>\n<p>as the calculation at the end will be the unhelpful theorem</p>\n<p>cont (λa. a) ⟹ cont (λa. a) ⟹ a ⊑ a.</p>\n<p>can I avoid that?</p>\n</blockquote>\n<p>Did you try to specify some particular rules for particular 'also' steps? <br>\nThere is a notation with round parenthese described in the isar-ref <br>\nmanual.</p>\n<p>Makarius</p>",
        "id": 294277652,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660919299
    },
    {
        "content": "<p>From: Joachim Breitner &lt;<a href=\"mailto:breitner@kit.edu\">breitner@kit.edu</a>&gt;<br>\nDear Makarius,</p>\n<p>Am Mittwoch, den 14.05.2014, 20:56 +0200 schrieb Makarius:</p>\n<blockquote>\n<p>On Wed, 14 May 2014, Joachim Breitner wrote:</p>\n<blockquote>\n<p>One thing I tried was to use</p>\n<p>lemma strong_trans[trans]:<br>\n         \"a ⊑ f x ⟹ x ⊑ y ⟹ cont f ⟹ a ⊑ f y \" sorry</p>\n<p>This way, the calculation above become</p>\n<p>cont (Rep_cfun f) ⟹ cont (λa. f⋅(g⋅a)) ⟹ a ⊑ f⋅(g⋅d)</p>\n<p>so using \"by simp\" instead of \".\" finishes this. But I find this<br>\nannoying (I really like to finish with \"finally ?something.\").</p>\n</blockquote>\n<p>If the final \"by simp\" (or \"by simp_all\") for accumulated side-conditions <br>\ndoes the job, why not use it?  If all Isar calculations were to end with <br>\n\".\" I could have omitted that flexibility in the language.</p>\n</blockquote>\n<p>I’m not sure. Last time I tried it I was not satisfied for some reason,<br>\nalthough that reason did not show up when preparing the small example<br>\nfor my mailing list mail. Maybe I should simply re-evaluate that option.</p>\n<blockquote>\n<p>Formally, you did not explain the annoyance nor why you like to do it only <br>\nlike that.  There can be technical problems in some situations, but if <br>\nthat is the case here it needs to be made specific.</p>\n</blockquote>\n<p>I think my annoyance is purely aesthetically, and – picky as I get – the<br>\naesthetics of the intermediate calculations. To me, the \"cont\" side<br>\nconditions above feel out of place, as they hold already by the types<br>\nand simple rule of composition.</p>\n<p>Also, to the reader, a \"by simp\" at the end could potentially do many<br>\nthings, where a \"finally show ?thesis.\" tells the reader that nothing<br>\nfancy is happening at the end.</p>\n<p>But as I said, its mostly code aesthetics: worth asking if there is a<br>\nnicer way – not worth worrying about if there is not.</p>\n<blockquote>\n<blockquote>\n<p>as the calculation at the end will be the unhelpful theorem</p>\n<p>cont (λa. a) ⟹ cont (λa. a) ⟹ a ⊑ a.</p>\n<p>can I avoid that?</p>\n</blockquote>\n<p>Did you try to specify some particular rules for particular 'also' steps? <br>\nThere is a notation with round parenthese described in the isar-ref <br>\nmanual.</p>\n</blockquote>\n<p>Thanks, I didn’t know that before (and I must have overread that part in<br>\nthe docs). I think I’ll play around with that.</p>\n<p>Greetings,<br>\nJoachim<br>\n<a href=\"/user_uploads/14278/oPfFtKwT69FlMz2i6VACjt7x/signature.asc\">signature.asc</a></p>",
        "id": 294277665,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660919305
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nIn some sense the side conditions are deferred to the very end, and thus <br>\ndisplaced.  The final \"by simp\" can make this feel a bit wobbly, since it <br>\ndilutes the application of the last fact, with the solving of the side <br>\nconditions.</p>\n<p>This can be refined: a \".\" merely abbreviates \"by this\", and the latter <br>\ncan have a terminal method for the solving of the remainder:</p>\n<p>...<br>\n   finally show ?thesis by this simp_all</p>\n<p>or</p>\n<p>...<br>\n   finally show ?thesis by this auto</p>\n<p>The proof method \"this\" does not appear very often under its proper name <br>\nin Isar proofs, but it is a perfectly normal structured method like <br>\n\"rule\".</p>\n<p>Makarius</p>",
        "id": 294277680,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660919311
    },
    {
        "content": "<p>From: Joachim Breitner &lt;<a href=\"mailto:breitner@kit.edu\">breitner@kit.edu</a>&gt;<br>\nHi,</p>\n<p>that’s a good suggestion. I now use</p>\n<p>finally show ?thesis by this (intro cont2cont)+</p>\n<p>everywhere, and (at least to the adept reader), this signals „The<br>\nconclusion of the calculation is used unmodified, while the accumulated<br>\nside conditions are all of the form \"cont something\" and solved using<br>\nthe usual cont2cont rules.</p>\n<p>This even composes well with the few cases where I had<br>\n        finally show ?thesis by (rule foobar)<br>\nwhich now simply become<br>\n        finally show ?thesis by (rule foobar) (intro cont2cont)+</p>\n<p>(I am a big fan of \"intro\"; I find it the most predictable method beyond<br>\nsingle-stepping with rule and subst).</p>\n<p>Greetings,<br>\nJoachim<br>\n<a href=\"/user_uploads/14278/6ec-BHvrCE13Kize-T029HC-/signature.asc\">signature.asc</a></p>",
        "id": 294277692,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660919317
    }
]