[
    {
        "content": "<p>From: Wenda Li &lt;<a href=\"mailto:wl302@cam.ac.uk\">wl302@cam.ac.uk</a>&gt;<br>\nDear code generation experts,</p>\n<p>With \"~~/src/HOL/Library/Polynomial\", I have defined an operation:</p>\n<p>consts swap_xy:: \"'a poly poly ⇒ 'a poly poly\"</p>\n<p>which, if we treat \"'a poly poly\" as a bivariate polynomial, swaps the <br>\ntwo variables. In terms of execution, swap_xy should be able to be <br>\nimplemented using the \"transpose\" operation on lists. However, the <br>\nproblems is I am not sure how to write down the code abstract lemma for <br>\nnested types like \"'a poly poly\". A naive try is:</p>\n<p>lemma [code abstract]:\"coeffs (swap_xy p) = map Poly (transpose (map <br>\ncoeffs (coeffs p)))\" sorry</p>\n<p>which doesn't work as I have violated code abstraction by using Poly in <br>\nthe lemma.</p>\n<p>Any advice/suggestion would be greatly appreciated,<br>\nWenda</p>",
        "id": 294636616,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661160409
    },
    {
        "content": "<p>From: Andreas Lochbihler &lt;<a href=\"mailto:andreas.lochbihler@inf.ethz.ch\">andreas.lochbihler@inf.ethz.ch</a>&gt;<br>\nDear Wenda,</p>\n<p>Unfortunately, the code generator cannot handle nested abstract types. In general, you'd <br>\nhave to define a type isomorphic to \"'a poly poly\" and lift all your functions to that <br>\ntype. For 'a poly, however, there is a simpler solution, as the Poly function can be <br>\neasily implemented for all lists (rather than just those satisfying the invariant of the <br>\ntype). Thus, define your own copy of Poly, say Poly', and use Poly' instead of Poly in <br>\nyour code equation.</p>\n<p>definition Poly' :: \"'a ::zero list ⇒ 'a poly\"<br>\nwhere \"Poly' = Poly\"</p>\n<p>lemma Poly'_code [code]: \"coeffs (Poly' p) = strip_while (op = 0) p\"<br>\nunfolding Poly'_def by(fact coeffs_Poly)</p>\n<p>lemma [code abstract]:\"coeffs (swap_xy p) = map Poly' (transpose (map coeffs (coeffs p)))\" <br>\nsorry</p>\n<p>Best,<br>\nAndreas</p>",
        "id": 294636707,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661160446
    }
]