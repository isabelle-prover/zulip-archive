[
    {
        "content": "<p>From: Wenda Li &lt;<a href=\"mailto:wl302@cam.ac.uk\">wl302@cam.ac.uk</a>&gt;<br>\nDear Isabelle experts,</p>\n<p>I am using constants such as Real.Real, Real.cauchy and Real.vanishes in <br>\nmy theory. However, as some implementation details of reals are hidden <br>\nby the statement</p>\n<p>hide_const (open) vanishes cauchy positive Real</p>\n<p>in \"Real.thy\", I have to use \"Real.cauchy\" instead of \"cauchy\" in my <br>\nfiles, which is slightly annoying. Is there a way to \"unhide\" those <br>\nconstants in my files to make it more convenient?</p>\n<p>Many thanks,<br>\nWenda</p>",
        "id": 294308987,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660925208
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nI guess Brian Huffman had good reasons to hide these implementation <br>\ndetails when he introduced that in 2010 here: <br>\n<a href=\"http://isabelle.in.tum.de/repos/isabelle/rev/e05e1283c550#l4.1482\">http://isabelle.in.tum.de/repos/isabelle/rev/e05e1283c550#l4.1482</a></p>\n<p>Nonetheless, if you really want to tinker with const names, there are at <br>\nleast two possibilities: (1) abbreviations or (2) name space aliases.</p>\n<p>For example:</p>\n<p>abbreviation \"cauchy ≡ Real.cauchy\"</p>\n<p>setup ‹Sign.const_alias @{binding cauchy} @{const_name Real.cauchy}›</p>\n<p>The alias is more low-level -- you normally don't do that to avoid mass <br>\nconfusion in libraries, which explains why there is no Isar command for <br>\nthat. It reverse the effect of 'hide' more precisely, though.</p>\n<p>Makarius</p>",
        "id": 294309038,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660925226
    },
    {
        "content": "<p>From: Brian Huffman &lt;<a href=\"mailto:huffman.brian.c@gmail.com\">huffman.brian.c@gmail.com</a>&gt;<br>\nHi Wenda,</p>\n<p>I had two reasons for hiding those constants:</p>\n<ol>\n<li>\n<p>More general versions of them are defined in later theories. If you<br>\nimport Complex_Main, you get predicates like \"Cauchy X\" and \"X ----&gt;<br>\n0\" which work for arbitrary metric spaces. Currently we fail to<br>\nprovide an instance \"rat :: metric_space\" in the standard library (and<br>\nwe should probably add one) but it's not hard to define one yourself,<br>\nwith \"dist x y = of_rat (abs (x - y))\". Then \"Real.cauchy X\" is<br>\nequivalent to \"Cauchy X\", \"Real.vanishes X\" is equivalent to \"X ----&gt;<br>\n0\", and \"Real.Real X\" is equivalent to \"lim (%n. of_rat (X n))\". We<br>\nhave invested much more effort in providing a useful collection of<br>\ntheorems about these more general constants.</p>\n</li>\n<li>\n<p>To discourage users from relying on implementation details of the<br>\nreal number type. If at some point in the future we decide to change<br>\nto a different construction of the reals again, the constants and<br>\ntheorems used in the construction may change or disappear.</p>\n</li>\n</ol>\n<p>If despite these reasons you still want to use the hidden constants<br>\nfrom Real.thy, then you are welcome to use one of the workarounds that<br>\nMakarius suggests.</p>\n<ul>\n<li>Brian</li>\n</ul>",
        "id": 294309070,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660925239
    }
]