[
    {
        "content": "<p>From: Tjark Weber &lt;<a href=\"mailto:webertj@in.tum.de\">webertj@in.tum.de</a>&gt;<br>\nHi,</p>\n<p>Suppose I want to show that every semigroup_mult (cf. HOL/Groups.thy) is<br>\nagain a semigroup_mult when one considers the dual operation, i.e.,<br>\n\\&lt;lambda&gt;x y. y * x.  I am aware of two different approaches.  First,</p>\n<p>lemma (in semigroup_mult) dual_semigroup_mult:<br>\n    \"class.semigroup_mult (\\&lt;lambda&gt;x y. y * x)\"<br>\n  sorry</p>\n<p>Second,</p>\n<p>sublocale semigroup_mult &lt; dual!: semigroup_mult \"\\&lt;lambda&gt;x y. y * x\"<br>\n  sorry</p>\n<p>My understanding is that the second approach automatically makes the<br>\ndual of all semigroup_mult facts available.  Are there other differences<br>\nthat I should be aware of?  I noticed that the first approach is used in<br>\na few places in HOL/Lattices.thy.</p>\n<p>Many thanks in advance!</p>\n<p>Tjark</p>",
        "id": 294124097,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660840747
    },
    {
        "content": "<p>From: Clemens Ballarin &lt;<a href=\"mailto:ballarin@in.tum.de\">ballarin@in.tum.de</a>&gt;<br>\nHi Tjark,</p>\n<p>your observation is correct, although there must be more to the first  <br>\napproach than merely storing a theorem in a locale.</p>\n<p>What the sublocale command currently does not give you is the ability  <br>\nto map constants from the structure to constants of the dual.  Say, to  <br>\nmap max to min and vice versa.</p>\n<p>There is yet another approach, explored by Makarius in an early  <br>\nexperiment in HOL/Lattice/Orders.thy.  There the functor that maps the  <br>\nstructure to its dual is a type constructor, which is also lifted to  <br>\nthe term level.  I believe this dates back to times when axclasses  <br>\nwere the tool of choice for such formalisations.</p>\n<p>Clemens</p>\n<p>Quoting Tjark Weber &lt;<a href=\"mailto:webertj@in.tum.de\">webertj@in.tum.de</a>&gt;:</p>",
        "id": 294124489,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660840867
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nYes, it dates back to my version of the standard type class examples from <br>\nthe early times around 1992/1993.  Back then Tobias had a TYPES talk that <br>\nclaimed that functors over type classes would <em>not</em> work.  So I included <br>\nthe dual constructor as a positive example when my version of axclasses <br>\nbecame available in 1994.</p>\n<p>Makarius</p>",
        "id": 294124592,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660840906
    }
]