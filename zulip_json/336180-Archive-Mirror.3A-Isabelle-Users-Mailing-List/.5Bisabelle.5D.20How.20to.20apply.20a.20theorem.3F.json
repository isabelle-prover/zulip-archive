[
    {
        "content": "<p>From: Victor Porton &lt;<a href=\"mailto:porton@narod.ru\">porton@narod.ru</a>&gt;<br>\nHi,</p>\n<p>I am a novice to Isabelle.</p>\n<p>The below theory does not verify at the point of \"by (unfold bij_converse_bij)\". What it should be replaced to? Which document to read about this kind of questions I ask?</p>\n<p>Before presenting my theory I want to explain what I am trying to achieve: Suppose (in ZF) we have two sets 'small' and 'big' (not necessarily disjoint) and an injection 'embed' from small to big. I want to replace 'big' with 'newbig' so that 'newbig' would bijectively correspond to 'big' but 'small' would become a subset of 'newbig'. Example: 'small' are integers, 'big' are reals, we want to embed the set of integers into the (another) set of reals. Another example: 'small' is the powerset of some set, 'big' is the set of filters on 'small', 'embed' maps every set to the corresponding principal filter; so filters are considered as a generalization of sets.</p>\n<p>Well, below my theory:</p>\n<hr>\n<p>theory embedding<br>\n  imports ZF Perm<br>\nbegin</p>\n<p>locale embedding2 =<br>\n  fixes big::i and small::i<br>\n  fixes embed<br>\n  assumes is_inj: \"embded: inj(small, big)\"<br>\nbegin</p>\n<p>(* &lt;a,b&gt;  == {{a,a}, {a,b}} *)</p>\n<p>definition \"newbig == big\" (<em>to be replaced with the real definition</em>)</p>\n<p>definition \"move == 0\" (<em>to be replaced with the real definition</em>)</p>\n<p>definition \"ret == converse(move)\"</p>\n<p>theorem \"small &lt;= newbig\"<br>\n  sorry</p>\n<p>theorem \"move: bij(big, newbig)\"<br>\n  sorry</p>\n<p>theorem \"ret: bij(newbig, big)\"<br>\n  by (unfold bij_converse_bij)</p>\n<p>end</p>\n<p>end</p>",
        "id": 294073930,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660828156
    },
    {
        "content": "<p>From: Slawomir Kolodynski &lt;<a href=\"mailto:skokodyn@yahoo.com\">skokodyn@yahoo.com</a>&gt;<br>\nTechnically, you can do it by removing the image of small from big and putting small in place of it. Something like this</p>\n<p>theory test2 imports Cardinal</p>\n<p>begin</p>\n<p>definition<br>\n\"Emedding(embed, small, big) \\&lt;equiv&gt; small \\&lt;union&gt; (big - embed``(small))\"</p>\n<p>text{<em>Embedding is bijective with big and small is contained in it.</em>}</p>\n<p>lemma emmbed_prop: assumes \"embed \\&lt;in&gt; inj(small, big)\"<br>\n  shows <br>\n  \"big \\&lt;approx&gt;  Emedding(embed, small, big)\" and<br>\n  \"small \\&lt;subseteq&gt; Emedding(embed, small, big)\"</p>\n<p>sorry</p>\n<p>Slawekk</p>",
        "id": 294073973,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660828172
    },
    {
        "content": "<p>From: Victor Porton &lt;<a href=\"mailto:porton@narod.ru\">porton@narod.ru</a>&gt;<br>\n-------- Пересылаемое сообщение --------</p>",
        "id": 294073999,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660828178
    },
    {
        "content": "<p>From: Victor Porton &lt;<a href=\"mailto:porton@narod.ru\">porton@narod.ru</a>&gt;<br>\n-------- Пересылаемое сообщение --------<br>\n14.03.09, 22:18, \"Victor Porton\" &lt;<a href=\"mailto:porton@narod.ru\">porton@narod.ru</a>&gt;:</p>\n<p>14.03.09, 21:01, \"Slawomir Kolodynski\" &lt;<a href=\"mailto:skokodyn@yahoo.com\">skokodyn@yahoo.com</a>&gt;:</p>\n<blockquote>\n<blockquote>\n<p>Slawomir, your solution may fail if small and big aren't<br>\ndisjoint.<br>\nTrue. A better definition would be<br>\ndefinition<br>\n\"Emedding(embed, small, big) \\&lt;equiv&gt; <br>\n(small - big) \\&lt;union&gt; (big - embed``(small - big))\"</p>\n</blockquote>\n</blockquote>\n<p>What is \"``\"? I'm a novice with Isabelle and don't understand two backquotes.</p>\n<blockquote>\n<blockquote>\n<p>definition \"ret == converse(move)\"<br>\nI don't understand this definition. The right hand side depends on a variable \"move\" and the left hand does not. Is \"move\" a constant? How it is defined?</p>\n</blockquote>\n</blockquote>\n<p>\"move\" should be a constant. It will be defined in a somehow tricky way. For now we can use the stub definition:</p>\n<p>definition \"move == 0\" (<em>to be replaced with the real definition</em>)<br>\n-------- Завершение пересылаемого сообщения --------</p>",
        "id": 294074005,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660828179
    }
]