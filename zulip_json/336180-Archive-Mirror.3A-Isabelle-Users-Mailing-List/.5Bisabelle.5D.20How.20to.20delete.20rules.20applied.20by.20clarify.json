[
    {
        "content": "<p>From: Peter Lammich &lt;<a href=\"mailto:lammich@in.tum.de\">lammich@in.tum.de</a>&gt;<br>\nHi list,</p>\n<p>when doing</p>\n<p>lemma \"~ a \\&lt;subseteq&gt; b ==&gt; P\"<br>\n    apply clarify_step</p>\n<p>I get the subgoal<br>\n  !!x. [|~P; x:a|] ==&gt; x:b</p>\n<p>However, I cannot find any rule in the claset (print_claset) that seems<br>\nto be responsible for this transformation.</p>\n<p>A deeper inspection reveals that there is the rule<br>\n  \"¬ A1 ⊆ B1 ⟹ (⋀x. ¬ R ⟹ x ∈ A1 ⟹ x ∈ B1) ⟹ R\"<br>\nin the \"safep_netpair\" - component of the claset. (which is not printed<br>\nby print_claset)</p>\n<p>Moreover, there seems to be no way to get the rule out there. A <br>\n[rule del] just sais \"undeclared classical rule\".</p>\n<p>So what is going on here, and, more important:<br>\n  How to stop clarify from doing this transformation, and leaving the<br>\noriginal conclusion of the subgoal intact?</p>\n<p>Best,<br>\n  Peter</p>",
        "id": 294275810,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660918728
    },
    {
        "content": "<p>From: Peter Lammich &lt;<a href=\"mailto:lammich@in.tum.de\">lammich@in.tum.de</a>&gt;<br>\nHere is a partial answer to my question that I found when inspecting the<br>\nproblem further:</p>\n<p>The classical reasoner is set up to add, for each introduction rule,<br>\nalso an elimination rule that is produced by \"swapping\" the intro-rule,<br>\ni.e. resolving with \"~ P ==&gt; (~ R ==&gt; P) ==&gt; R\".<br>\nThis creates the rule that I found in the safep_netpair - component,<br>\nfrom the \"subsetI\" - rule.</p>\n<p>It looks like it is not possible to get rid of the swapped rule while<br>\nkeeping the original rule?</p>",
        "id": 294275820,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660918734
    },
    {
        "content": "<p>From: Lawrence Paulson &lt;<a href=\"mailto:lp15@cam.ac.uk\">lp15@cam.ac.uk</a>&gt;<br>\nThe point is that logically there is no difference between </p>\n<p>\"~ a \\&lt;subseteq&gt; b ==&gt; P”</p>\n<p>and</p>\n<p>“~P ==&gt; a \\&lt;subseteq&gt; b”.</p>\n<p>The classical reasoner is designed to do the same thing in both cases. </p>\n<p>You could try some other proof method, such as intro, for finer control over which rules are applied.</p>\n<p>Larry Paulson</p>",
        "id": 294275840,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660918741
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nMore on the design of the classical reasoner is available in <br>\n<a href=\"http://isabelle.in.tum.de/dist/Isabelle2013-2/doc/isar-ref.pdf\">http://isabelle.in.tum.de/dist/Isabelle2013-2/doc/isar-ref.pdf</a> section <br>\n9.4.</p>\n<p>That is a refurbished version of really ancient explanations by Larry, but <br>\nthis material is still interesting, and should be up-to-date concerning <br>\ncurrent Isabelle.</p>\n<p>Makarius</p>",
        "id": 294276029,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660918796
    }
]