[
    {
        "content": "<p>From: Holden Lee &lt;<a href=\"mailto:hl422@cam.ac.uk\">hl422@cam.ac.uk</a>&gt;<br>\nFor example, given a locale like <em>ring</em>, I would like to get the type of<br>\nits record ('a set (carrier), 'a=&gt;'a=&gt;'a (mult),...), so that I can feed it<br>\ninto a function that does an algebraic construction on rings.</p>\n<p>definition polynomial_ring :: \"&lt;ring_record&gt; =&gt; &lt;ring_record&gt;\"</p>\n<p>-Holden</p>",
        "id": 294287595,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660922379
    },
    {
        "content": "<p>From: Andreas Lochbihler &lt;<a href=\"mailto:andreas.lochbihler@inf.ethz.ch\">andreas.lochbihler@inf.ethz.ch</a>&gt;<br>\nHi Holden,</p>\n<p>Locales normally do not introduce a record type for the set of parameters they fix. <br>\nHowever, if you refer to the development in HOL/Algebra, there are record definitions in <br>\nthe theories. For example, the record type is \"'a ring\" for the locale \"ring\". It is <br>\ndefined at the top of ~~/src/HOL/Algebra/Ring.thy.</p>\n<p>More precisely, the locales in HOL/Algebra use the extensible variant of the record types, <br>\ni.e, \"('a, 'b) ring_scheme\" instead of \"'a ring\". The additional type parameter 'b <br>\nrepresents all future field extensions of the record. It depends on your construction <br>\nwhether you can work with arbitrary extensions or have to stick to the fixed set of <br>\noperations.</p>\n<p>In Isabelle/jEdit You can find out about the types of the record by Ctrl-hovering over the <br>\nfixed variable at the locale declaration. Ctrl-Click on the type takes you to the record <br>\ndeclaration.</p>\n<p>Hope this helps,<br>\nAndreas</p>",
        "id": 294287605,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660922385
    },
    {
        "content": "<p>From: Holden Lee &lt;<a href=\"mailto:hl422@cam.ac.uk\">hl422@cam.ac.uk</a>&gt;</p>\n<blockquote>\n<blockquote>\n<p>I'd like to define a function that given (the record of a) ring R returns<br>\nthe polynomial ring R[X]. Here is my attempt so far.</p>\n</blockquote>\n</blockquote>\n<p>definition<br>\n  polynomial_ring :: \"'a ring ⇒ (('a poly) ring)\"<br>\n  where \"polynomial_ring R = (|*carrier = {p::('a poly). (∀(n::nat). (coeff<br>\np n)∈(carrier R))}*,<br>\nmult =λp q::('a poly). p*q,<br>\none = 1::('a poly),<br>\nzero = 0::('a poly),<br>\nadd =λp q::('a poly). p+q|)\"</p>\n<blockquote>\n<blockquote>\n<p>I'm getting an error:</p>\n</blockquote>\n</blockquote>\n<p>Type unification failed: Variable 'a::type not of sort zero</p>\n<p>Type error in application: incompatible operand type</p>\n<p>Operator:  op ∈ (coeff p n) :: ??'a set ⇒ bool<br>\nOperand:   carrier R :: 'a set</p>\n<blockquote>\n<blockquote>\n<p>It seems to be complaining that I need 'a to be of type zero, but (1) I<br>\ndon't know where to supply this info, and (2) I would rather it be<br>\nautomatically supplied by the zero in 'a ring.</p>\n</blockquote>\n</blockquote>\n<p>2014-07-10 11:34 GMT+01:00 Andreas Lochbihler &lt;<br>\n<a href=\"mailto:andreas.lochbihler@inf.ethz.ch\">andreas.lochbihler@inf.ethz.ch</a>&gt;:</p>\n<blockquote>\n<p>Hi Holden,</p>\n<p>Locales normally do not introduce a record type for the set of parameters<br>\nthey fix. However, if you refer to the development in HOL/Algebra, there<br>\nare record definitions in the theories. For example, the record type is \"'a<br>\nring\" for the locale \"ring\". It is defined at the top of<br>\n~~/src/HOL/Algebra/Ring.thy.</p>\n<p>More precisely, the locales in HOL/Algebra use the extensible variant of<br>\nthe record types, i.e, \"('a, 'b) ring_scheme\" instead of \"'a ring\". The<br>\nadditional type parameter 'b represents all future field extensions of the<br>\nrecord. It depends on your construction whether you can work with arbitrary<br>\nextensions or have to stick to the fixed set of operations.</p>\n<p>In Isabelle/jEdit You can find out about the types of the record by<br>\nCtrl-hovering over the fixed variable at the locale declaration. Ctrl-Click<br>\non the type takes you to the record declaration.</p>\n<p>Hope this helps,<br>\nAndreas</p>\n<p>On 10/07/14 10:25, Holden Lee wrote:</p>\n<blockquote>\n<p>For example, given a locale like <em>ring</em>, I would like to get the type of</p>\n<p>its record ('a set (carrier), 'a=&gt;'a=&gt;'a (mult),...), so that I can feed<br>\nit<br>\ninto a function that does an algebraic construction on rings.</p>\n<p>definition polynomial_ring :: \"&lt;ring_record&gt; =&gt; &lt;ring_record&gt;\"</p>\n<p>-Holden</p>\n</blockquote>\n</blockquote>",
        "id": 294287647,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660922401
    },
    {
        "content": "<p>From: Andreas Lochbihler &lt;<a href=\"mailto:andreas.lochbihler@inf.ethz.ch\">andreas.lochbihler@inf.ethz.ch</a>&gt;<br>\nHi Holden,</p>\n<p>You are trying to mix the two flavours of algebra formalisations, which does not work so <br>\nwell. HOL/Algebra uses locales parametries by carriers and the operations. The other <br>\nflavour with type classes is the one available in HOL/Main already. Library/Polynomial <br>\nbelongs to the type class flavour, i.e., it takes the ring operations from the type <br>\nclasses. There is no way to have it take 0 from the ring that you provide as a parameter.</p>\n<p>You might want to look at HOL/Algebra/UnivPoly, which formalises univariate polynomials <br>\nwith locales. The function UP, e.g., transforms a ring into the ring of polynomials over it.</p>\n<p>Best,<br>\nAndreas</p>",
        "id": 294287688,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660922403
    }
]