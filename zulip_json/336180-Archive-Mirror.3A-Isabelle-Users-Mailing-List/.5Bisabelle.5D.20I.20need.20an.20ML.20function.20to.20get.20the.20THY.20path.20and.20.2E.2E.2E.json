[
    {
        "content": "<p>From: Gottfried Barrow &lt;<a href=\"mailto:igbi@gmx.com\">igbi@gmx.com</a>&gt;<br>\nHi,</p>\n<p>I describe what I need, and then I get more verbose about ML and the <br>\nPIDE, and recent NEWS.</p>\n<p>The export_code command in a THY will create a file in the directory of <br>\nthe THY. For example, a command like this:</p>\n<p>export_code id in SML file \"sml_test_output.ML</p>\n<p>What ML command do I use to obtain the path and filename of the THY in <br>\nwhich I have ML{<em>...</em>} commands? I did some searches in the src folder <br>\nlooking for how export_code does that, but all I saw was noise.</p>\n<p>This would be part of my very recent attempt to switch to Isabelle/ML as <br>\nmy primary general purpose programming language. Further, it's part of <br>\nmy occasional attempt to eliminate some complexity and pursue the goal <br>\nof working in \"one document, in one language, in one development <br>\nenvironment\".</p>\n<p>It's not completely achievable, but because ML is a subset of the <br>\nlanguages that can be used with Isar commands, then it does partially <br>\nfit the one language goal, and it fits even more the working in only one <br>\nIDE.</p>\n<p>The availability of ML libraries is quite thin,  but there are no <br>\nproblems, there are only workarounds. In pursuit of regular expressions, <br>\na decent or even better solution might be awk, which I can call from ML, <br>\nlike this:</p>\n<p>ML{*<br>\nfun gawkfprint str file = OS.Process.system (<br>\n   \"gawk \\\"BEGIN { print \\\\\\\"\" ^ str ^ \"\\\\\\\" }\\\" &gt; \" ^ file);<br>\ngawkfprint \"this is a tester4\" \"test.txt\"<br>\n*}</p>\n<p>Workarounds abound. ML{* OS.Process.system \"ls -l\" *} only prints the <br>\nreturn code in the output panel. Maybe that's all it's supposed to do.</p>\n<p>I include some links.</p>\n<p>Regards,<br>\nGB</p>\n<p>[isabelle-dev] NEWS: Isabelle support for Standard ML<br>\n<a href=\"http://mailmanbroy.informatik.tu-muenchen.de/pipermail/isabelle-dev/2014-March/005125.html\">http://mailmanbroy.informatik.tu-muenchen.de/pipermail/isabelle-dev/2014-March/005125.html</a><br>\n<a href=\"http://mailmanbroy.informatik.tu-muenchen.de/pipermail/isabelle-dev/2014-March/005132.html\">http://mailmanbroy.informatik.tu-muenchen.de/pipermail/isabelle-dev/2014-March/005132.html</a><br>\n<a href=\"http://isabelle.in.tum.de/repos/isabelle/file/bea2196627cb/src/Tools/SML\">http://isabelle.in.tum.de/repos/isabelle/file/bea2196627cb/src/Tools/SML</a></p>\n<p>Manual that used to be a book: Gawk: Effective AWK Programming<br>\n<a href=\"http://www.gnu.org/software/gawk/manual/\">http://www.gnu.org/software/gawk/manual/</a></p>",
        "id": 294271645,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660917418
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nOn Mon, 31 Mar 2014, Gottfried Barrow wrote:</p>\n<blockquote>\n<p>On 14-03-31 11:18, Gottfried Barrow wrote:</p>\n<blockquote>\n<p>export_code id in SML file \"sml_test_output.ML\"</p>\n<p>What ML command do I use to obtain the path and filename of the THY in<br>\n which I have ML{<em>...</em>} commands?</p>\n</blockquote>\n<p>I'll simplify it. I need the path to the folder that the \"sml_test_output.ML\" <br>\nfile is in, which will be the path of my THY, though it would be nice to get <br>\nthe THY file name also.</p>\n</blockquote>\n<p>The file-system location of a theory is called \"master directory\": all of <br>\nits file-references should be relative to that (although some very old <br>\ntools sometimes do it differently).</p>\n<p>This is how to access the master directory in an ad-hoc example:</p>\n<p>ML {* Thy_Load.master_directory @{theory} *}</p>\n<p>This is how to get the formal name of the theory, which is conceptually <br>\ndifferent from the file name, but you can reconstruct it yourself:</p>\n<p>ML {* Context.theory_name @{theory} *}</p>\n<p>Note that @{theory} refers to the compile-time theory context of each ML <br>\nsnipped.  In regular Isabelle/ML programming you pass this around as some <br>\nvalue thy: theory, and feed-in some compile-time constant only where you <br>\ninvoke it in the end.</p>\n<p>Generally, the master directory is still being used, but somewhat <br>\nold-fashioned and about to be discontinued: the Prover IDE will eventually <br>\ntake care of all external resources, and the prover will be devoid of <br>\nfile-system access.</p>\n<p>You have surely noticed already that export_code does not fit 100% into <br>\nthe picture of continuous theory and proof checking while you type: it <br>\nleaves a dirty trace of file-name prefixes in your directory.  At some <br>\npoint in the future, export_code would write into an \"abstract file-space\" <br>\nof the document model, which is committed only when the IDE says so, e.g. <br>\non shutdown.</p>\n<p>This probably also means, it is a bad idea to try writing one file here <br>\nand reading the same file elsewhere -- that simulates stateful programming <br>\nvia files, but statefulness is out.</p>\n<blockquote>\n<p>The basic idea is to export code, and right below it, use the exported <br>\ncode to do some calculations in a ML{<em>...</em>} command.</p>\n</blockquote>\n<p>You can probably avoid all these complications with files, of you use the <br>\ngenerated ML code directly, e.g. via the @{code} antiquotation of <br>\nIsabelle/ML.</p>\n<p>It is also possible to pass around ML sources as strings or tokens in <br>\nIsabelle/ML, and invoke the compiler on it.  That is a normal benefit of <br>\nincremental compilation.</p>\n<blockquote>\n<p>Doing that, and using ML as a tool for Isabelle in general, and <br>\nprocessing a THY to get some LaTeX are my only programming needs. It's <br>\neither learn ML and Perl (not awk), or learn Scala.</p>\n</blockquote>\n<p>Isabelle/ML is for hardcore logic-based tools.  Isabelle/Scala is for <br>\nhigher-order functional-object-oriented systems programming.  In that <br>\nrespect Scala is closer to Perl, e.g. it also supports nice pattern <br>\nmatching with regexps.</p>\n<p>Makarius</p>",
        "id": 294271689,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660917427
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nOn Mon, 31 Mar 2014, Gottfried Barrow wrote:</p>\n<blockquote>\n<p>The availability of ML libraries is quite thin</p>\n</blockquote>\n<p>There is indeed very little, apart from what you have already on-board in <br>\nIsabelle, but that is quite a lot.</p>\n<blockquote>\n<p>but there are no problems, there are only workarounds. In pursuit of <br>\nregular expressions, a decent or even better solution might be awk, <br>\nwhich I can call from ML, like this:</p>\n<p>ML{*<br>\nfun gawkfprint str file = OS.Process.system (<br>\n \"gawk \\\"BEGIN { print \\\\\\\"\" ^ str ^ \"\\\\\\\" }\\\" &gt; \" ^ file);<br>\ngawkfprint \"this is a tester4\" \"test.txt\"<br>\n*}</p>\n<p>Workarounds abound. ML{* OS.Process.system \"ls -l\" *} only prints the return <br>\ncode in the output panel. Maybe that's all it's supposed to do.</p>\n</blockquote>\n<p>OS.Process.system is one of these SML Basis Library functions that should <br>\nnot be used inside Isabelle, because they don't comply to the Isabelle <br>\nsystem programming model.</p>\n<p>Use Isabelle_System.bash or Isabelle_System.bash_output instead. <br>\n(Isabelle/Scala provides similar operations.)</p>\n<blockquote>\n<p>[isabelle-dev] NEWS: Isabelle support for Standard ML<br>\nhttp: //mailmanbroy.informatik.tu-muenchen.de/pipermail/isabelle-dev/2014-March/005125.html<br>\nhttp: //mailmanbroy.informatik.tu-muenchen.de/pipermail/isabelle-dev/2014-March/005132.html</p>\n</blockquote>\n<p>Anybody who is interested in that is welcome to join on isabelle-dev, but <br>\nwithout cross-posting chaos on isabelle-users.</p>\n<p>Makarius</p>",
        "id": 294271705,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660917434
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nOn Wed, 2 Apr 2014, Gottfried Barrow wrote:</p>\n<blockquote>\n<p>On 14-04-01 14:04, Makarius wrote:</p>\n<blockquote>\n<p>Of course, unpredictable or really bad things will happen, when you<br>\n modify the file system in any of these bash commands.</p>\n</blockquote>\n<p>Thanks for the heads up, a casual comment that belies the real message, <br>\n\"WARNING! YOU MAY DESTROY YOUR FILE SYSTEM, FOOL!\"</p>\n</blockquote>\n<p>The point here is that the Isar 'bash' command was declared as \"diag\", so <br>\nit runs asynchronously and in parallel as far as possible.  If you <br>\ncombine this with mutations on the file-system or other global system <br>\nstate, you can easily get some fireworks.</p>\n<p>This is also the reason why some insiders of parallel programming say <br>\n\"mutable state is the root of all evil\".  In the multicore era you are <br>\neither stateless and fast, or stateful and slow.  Some decades ago that <br>\nwas the opposite.</p>\n<p>Maybe for your continued experiments, it is better to make 'bash' a <br>\n\"thy_decl\" command, to force it into sequential mode (for the current <br>\ntheory file).</p>\n<blockquote>\n<p>I ran the ideas through this filter: \"Does any of this give me something <br>\nover and above what I already have, like Windows Explorer for file <br>\nmanagement?\"</p>\n</blockquote>\n<p>No.  One would have to make more substantial reforms of stateless <br>\noperating systems to fit it into the PIDE model and get real benefits from <br>\nit.  (Apple's Time Machine and the ZFS file-system are actually moving a <br>\nbit in that direction.)</p>\n<blockquote>\n<p>I attach a THY, along with the one you sent me, to be complete. I make <br>\nmy requests in the THY, and there are 8 comment headings which give an <br>\noverview of what each section does.</p>\n</blockquote>\n<p>I've looked through this briefly.  Note that the double-quoted strings of <br>\n<a href=\"http://Parse.name\">Parse.name</a> can be avoided by using Parse.text: that category also allows <br>\n\"verbatim\" tokens of form {* ... *}.</p>\n<p>That brings us back to the pending reform to allow nestable text <br>\ncartouches in that spot ...</p>\n<p>Makarius</p>",
        "id": 294273693,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660918022
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nOn Mon, 31 Mar 2014, Gottfried Barrow wrote:</p>\n<blockquote>\n<p>The key word is \"internal\". When the PIDE is powered up, the goal is to stay <br>\nworking internal to a THY and the related THY and ML files, as much as <br>\npossible. I click on a cntl-hover link to get me files.</p>\n</blockquote>\n<p>Indeed.</p>\n<blockquote>\n<p>I access Unix essentials in the THY, viewing results in the output <br>\npanel, not having to resort to the Console, which will allow me to <br>\ncreate a history of commands.</p>\n</blockquote>\n<blockquote>\n<p>I attach a screenshot and THY to show I'm one, small step closer to the <br>\nend result.</p>\n</blockquote>\n<p>I don't know what the end result will be, but here is my contribution to <br>\nthe game: Bash.thy with CD, PWD, and bash commands inside the theory <br>\ncontext.  Note that I could not use the names \"cd\" and \"pwd\", since these <br>\nare left-over commands from ancient times.</p>\n<p>The global working directory of a process (e.g. <a href=\"http://File.cd\">File.cd</a>) is incompatible <br>\nwith the idea of stateless execution.  By putting the cd value into the <br>\nformal context, you can feed that to each shell process individually, and <br>\nthey can run in parallel unencumbered.  This is done by the PIDE <br>\nautomatically, since the 'bash' command is diagnostic and thus mean to be <br>\nwithout any effects.</p>\n<p>Of course, unpredictable or really bad things will happen, when you modify <br>\nthe file system in any of these bash commands.</p>\n<p>Makarius<br>\n<a href=\"/user_uploads/14278/zPvk4kj6UzmFW03OjP01mjYL/Bash.thy\">Bash.thy</a></p>",
        "id": 294275118,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660918520
    }
]