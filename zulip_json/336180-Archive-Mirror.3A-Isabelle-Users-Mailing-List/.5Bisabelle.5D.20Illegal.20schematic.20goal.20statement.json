[
    {
        "content": "<p>From: \"W. Douglas Maurer\" &lt;<a href=\"mailto:maurer@gwu.edu\">maurer@gwu.edu</a>&gt;<br>\nAs should be clear from my previous posts, I continue trying to find <br>\nIsabelle induction rules that correspond with the way my students <br>\nlearn induction. By accident I stumbled upon a file called <br>\nHow_To_Prove_it.thy, which suggests: \"There are many more special <br>\ninduction rules. You can find all of them via the Find button...with <br>\nthe following search criteria: name: Nat name: induct.\" So I tried <br>\nthis, and I got 18 rules, some of which appear to apply to some of my <br>\nsituations (particularly Nat.dec_induct). However, I am now getting <br>\nan error message which I have never seen before, when I try to enter <br>\none of these, exactly as it appears in the Query window, as a lemma. <br>\nFor example, the second one appears as Nat.nat_induct: ?P 0 ==&gt; <br>\n(\\bigwedge n. ?P n ==&gt; ?P (Suc n)) ==&gt; ?P ?n . When I enter this as a <br>\nlemma (in double quotes, of course) I get the message \"Illegal <br>\nschematic goal statement.\" Well, I can always take the question marks <br>\nout, but why does Find Theorems find a theorem in a form that doesn't <br>\nenter? (I've also tried it without the double quotes, and this time I <br>\nget an outer syntax error on the \\bigwedge .) Thanks! -WDMaurer</p>",
        "id": 294632273,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661158782
    },
    {
        "content": "<p>From: Peter Lammich &lt;<a href=\"mailto:lammich@in.tum.de\">lammich@in.tum.de</a>&gt;<br>\nThis is a technical idiosyncrasy/feature of Isabelle. There are two<br>\nkinds of variables, free variables (without ?) and schematic variables<br>\n(with ?). The unifier only instantiates schematic variables. </p>\n<p>If you state a lemma, you do not want the variables in your lemma to be<br>\ninstantiated (and thus your lemma specialized). If you use a lemma,<br>\nhowever, you want to instantiate the variables in it.</p>\n<p>Hence, the lemma command converts the free variables to schematics<br>\nbefore storing the lemma, and that's what you see in the output of<br>\nfind_thms.</p>\n<p>To print a lemma, say dec_induct, with frees instead of schematics, try:</p>\n<p>thm dec_induct[no_vars]<br>\nor <br>\nprint_statement dec_induct</p>",
        "id": 294635479,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661159966
    },
    {
        "content": "<p>From: David Cock &lt;<a href=\"mailto:david.cock@inf.ethz.ch\">david.cock@inf.ethz.ch</a>&gt;<br>\nAlso, specifically for the find panel, you want to use underscores i.e. <br>\n\"_ @ _\" will match any concatenation of two lists. Unfortunately you can <br>\nonly specify syntactic constraints like this - you can't explicitly <br>\nsearch for \"x + x\", for any x, for example (as far as I know).</p>\n<p>David</p>",
        "id": 294637185,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661160642
    },
    {
        "content": "<p>From: Manuel Eberl &lt;<a href=\"mailto:eberlm@in.tum.de\">eberlm@in.tum.de</a>&gt;<br>\nWhy of course you can: \"?x + ?x\".</p>\n<p>Cheers,</p>\n<p>Manuel</p>",
        "id": 294637885,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661160912
    },
    {
        "content": "<p>From: David Cock &lt;<a href=\"mailto:david.cock@inf.ethz.ch\">david.cock@inf.ethz.ch</a>&gt;<br>\nWell there you go, you learn something new every day. ;)</p>",
        "id": 294638086,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661160980
    },
    {
        "content": "<p>From: Lars Noschinski &lt;<a href=\"mailto:noschinl@in.tum.de\">noschinl@in.tum.de</a>&gt;<br>\nHowever, you cannot search for a lemma which contains both \"odd x\" and<br>\n\"even x\" for the same x,<br>\nas in the query \"odd ?x\" \"even ?x\" both ?x are allowed to be different.</p>\n<p>-- Lars</p>",
        "id": 294638254,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661161047
    },
    {
        "content": "<p>From: David Cock &lt;<a href=\"mailto:david.cock@inf.ethz.ch\">david.cock@inf.ethz.ch</a>&gt;<br>\nRight, that's what I was trying to get at.</p>\n<p>Dave</p>",
        "id": 294638427,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661161114
    }
]