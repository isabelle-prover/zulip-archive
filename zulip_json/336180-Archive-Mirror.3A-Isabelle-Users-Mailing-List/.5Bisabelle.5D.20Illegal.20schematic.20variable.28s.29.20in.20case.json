[
    {
        "content": "<p>From: Lars Hupel &lt;<a href=\"mailto:hupel@in.tum.de\">hupel@in.tum.de</a>&gt;<br>\nI have proved the following elimination rule (which is surprisingly<br>\nsimilar to option.rel_cases):</p>\n<p>lemma ienv_relatedE:<br>\n    assumes \"ienv_related nenv penv\"<br>\n    obtains (none) \"nenv x = None\" \"penv x = None\"<br>\n          | (some) t u where \"nenv x = Some t\" \"penv x = Some u\" \"P t u\"</p>\n<p>When trying to use it</p>\n<p>from <code>ienv_related nenv penv</code><br>\n  show ?case<br>\n    proof (cases rule: ienv_relatedE)<br>\n      case none</p>\n<p>I get the following error message:</p>\n<p>Illegal schematic variable(s) in case \"none\"⌂</p>\n<p>Presumably, the problem is that there are still uninstantiated schematic<br>\nvariables in the assumption. It works if I instantiate the rule<br>\nexplicitly with 'where'. My question now is, is this the recommended<br>\nstyle, or should I rather write an explicit 'assume'?</p>\n<p>Cheers<br>\nLars</p>",
        "id": 294635371,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661159919
    },
    {
        "content": "<p>From: Andreas Lochbihler &lt;<a href=\"mailto:andreas.lochbihler@inf.ethz.ch\">andreas.lochbihler@inf.ethz.ch</a>&gt;<br>\nHi Lars,</p>\n<p>The problem really is the schematic ?x in the goal state. The case syntax cannot deal with <br>\nsuch schematics. The proof methods for induction support the argument \"taking: foo\" with <br>\nwhich such variables can be instantiated for the proof. Unfortunately, the cases method <br>\ndoes not support taking. As elimination rules usually also work with induction, you could <br>\nwrite</p>\n<p>proof(induction taking: foo rule: ienv_relatedE)<br>\n   case none</p>\n<p>Whether this is better than</p>\n<p>proof(rule ienv_relatedE)<br>\n   assume \"nenv foo = None\" \"penv foo = None\"</p>\n<p>is debatable, as induction is normally a much stronger proof principle than case analysis. <br>\nAlternatively, you can see whether the cases method can be easily extended with \"taking\".</p>\n<p>Best,<br>\nAndreas</p>",
        "id": 294635382,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661159925
    },
    {
        "content": "<p>From: Lars Hupel &lt;<a href=\"mailto:hupel@in.tum.de\">hupel@in.tum.de</a>&gt;<br>\nHi Andreas,</p>\n<blockquote>\n<p>proof(induction taking: foo rule: ienv_relatedE)<br>\n  case none</p>\n</blockquote>\n<p>thanks for the hint, this works nicely.</p>\n<blockquote>\n<p>proof(rule ienv_relatedE)<br>\n  assume \"nenv foo = None\" \"penv foo = None\"</p>\n<p>is debatable, as induction is normally a much stronger proof principle<br>\nthan case analysis.</p>\n</blockquote>\n<p>It probably incites more head-scratching from readers of the proof as to<br>\nwhy exactly induction is used there.</p>\n<blockquote>\n<p>Alternatively, you can see whether the cases method<br>\ncan be easily extended with \"taking\".</p>\n</blockquote>\n<p>I will keep this in mind for later when I'm done with my current<br>\nformalization :-)</p>\n<p>Cheers<br>\nLars</p>",
        "id": 294635636,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661160017
    },
    {
        "content": "<p>From: Lars Hupel &lt;<a href=\"mailto:hupel@in.tum.de\">hupel@in.tum.de</a>&gt;<br>\nHello,</p>\n<p>I have to revisit this rather old thread ...</p>\n<p>I've now run into a situation where even with a fully instantiated rule,<br>\nI get \"illegal schematic variable in case\".</p>\n<p>Here's the output of \"print_cases\":</p>\n<p>cases:<br>\n  Closure:<br>\n    fix env_ n_ e_<br>\n    let \"?case\" = \"?thesis\"<br>\n    assume \"cl = Closure env_ n_ e_\"<br>\n  Recclosure:<br>\n    fix env_ funs_ n_ n'_ e_<br>\n    let \"?case\" = \"?thesis\"<br>\n    assume \"cl = Recclosure env_ funs_ n_\" \"allDistinct (map (λ(f, uu_,<br>\nuu_). f) funs_)\" \"find_recfun n_ funs_ = Some (n'_, e)\"</p>\n<p>I fail to see the schematic variable. It seems fully instantiated to me.</p>\n<p>Cheers<br>\nLars</p>",
        "id": 294658478,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661169020
    }
]