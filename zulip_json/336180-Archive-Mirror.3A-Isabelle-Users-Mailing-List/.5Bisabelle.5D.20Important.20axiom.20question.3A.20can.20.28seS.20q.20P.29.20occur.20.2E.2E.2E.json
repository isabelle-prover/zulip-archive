[
    {
        "content": "<p>From: Gottfried Barrow &lt;<a href=\"mailto:gottfried.barrow@gmx.com\">gottfried.barrow@gmx.com</a>&gt;<br>\nHi,</p>\n<p>Axioms are to be feared, so I ask this question. There is the general <br>\nFOL formula which I modify, but given here unmodified:</p>\n<p>!q. ?r. !x. (x IN r &lt;-&gt; (x IN q &amp; phi(x))),</p>\n<p>where it is required that r not occur in the formula phi(x), and where <br>\nphi(x) is a FOL formula with a free variable x.</p>\n<p>I implement it like this:</p>\n<p>!q. !P. !x. ( x IN (seS q P) &lt;-&gt; (x IN q &amp; (P x)))</p>\n<p>The question becomes, \"Can the term (seS q P) occur in (P x)?\"</p>\n<p>The function and types are as follows:</p>\n<p>typedecl sT<br>\nq, x :: sT<br>\nP::(sT =&gt; bool)<br>\nconsts seS :: \"(sT =&gt; (sT =&gt; bool) =&gt; sT)\"<br>\nconsts IN :: \"sT =&gt; sT =&gt; bool\"</p>\n<p>It seems like things would get circular, but then maybe there's a <br>\nrecursive way to do it.</p>\n<p>If it can be done, how would I specify that (seS q P) not be allowed in <br>\n(P x)?</p>\n<p>Thanks,<br>\nGB</p>",
        "id": 294233980,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660903910
    },
    {
        "content": "<p>From: Gottfried Barrow &lt;<a href=\"mailto:gottfried.barrow@gmx.com\">gottfried.barrow@gmx.com</a>&gt;<br>\nNo one probably has time for this, but for myself, for the problem I <br>\ndescribed, I'm trying answer why I can't do this:</p>\n<p>\"Define a function P::(sT =&gt; bool) such that (P == (%x. ...~(x IN seS q <br>\nP)...))\".</p>\n<p>The \"...\" is any additional formula, and the function seS is a constant <br>\nthat's only defined by its use in the axiom. If I can do that, then I'm <br>\ndoomed.</p>\n<p>Thanks,<br>\nGB</p>",
        "id": 294233991,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660903916
    },
    {
        "content": "<p>From: Gottfried Barrow &lt;<a href=\"mailto:gottfried.barrow@gmx.com\">gottfried.barrow@gmx.com</a>&gt;<br>\nSo I defined a function which can reference itself like:</p>\n<p>function PT :: \"sT =&gt; bool\" where<br>\n   \"PT x = (x NOTIN {{0}. PT})\"<br>\n   by(auto)</p>\n<p>To prove the inconsistency, I had to use \"sorry\" to restate the <br>\ndefinition of the function as a theorem, Sledgehammer wouldn't prove it, <br>\nand it's a simple restatement of a definition, so I don't know why it <br>\ncan't be proved:</p>\n<p>theorem PT_formula:<br>\n   \"PT x = (x NOTIN {{0}. PT})\"<br>\n   sorry</p>\n<p>I then proved a theorem which basically says:</p>\n<p>\"(u IN {u}) &amp; (u NOTIN u) --&gt; (u IN u)\"</p>\n<p>where (u NOTIN u) is the application of my function (PT u).</p>\n<p>The only question is about whether the theorem \"PT_formula\" having a <br>\nproblem being proved means anything.</p>\n<p>I attach the theory, at about 80 lines, and I attach the PDF, if someone <br>\nwants to look at it and tell me if it means anything, which I assume it <br>\ndoes. It at least means that Goldrei in \"Classic Set Theory for Guided <br>\nIndependent Study\"  left out an important point that Drake didn't in <br>\n\"Intermediate Set Theory\".</p>\n<p>Regards,<br>\nGB<br>\n<a href=\"/user_uploads/14278/GHdFPIIjatVaGUw9jKdKasdi/cTest.thy\">cTest.thy</a><br>\n<a href=\"/user_uploads/14278/VI8zCYPUDbnkbFwEyODMIuT4/cTest_doc.pdf\">cTest_doc.pdf</a></p>",
        "id": 294234125,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660903974
    }
]