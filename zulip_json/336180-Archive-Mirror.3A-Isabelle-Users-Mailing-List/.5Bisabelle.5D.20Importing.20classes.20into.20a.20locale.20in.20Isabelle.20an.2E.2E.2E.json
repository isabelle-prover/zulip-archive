[
    {
        "content": "<p>From: xanonec xyz &lt;<a href=\"mailto:xanonec@gmail.com\">xanonec@gmail.com</a>&gt;<br>\nDear All,</p>\n<p>Approximately a week ago I posted a question on stack overflow with regard<br>\nto a possibility to import Isabelle classes into a locale. However, the<br>\nquestion has not been answered yet. Furthermore, the question received no<br>\ncomments from the users of stack overflow. The question can be accessed via<br>\nthe following link:<br>\n<a href=\"https://stackoverflow.com/questions/50085849/importing-classes-into-a-locale-in-isabelle-and-other-related-questions\">https://stackoverflow.com/questions/50085849/importing-classes-into-a-locale-in-isabelle-and-other-related-questions</a><br>\n.</p>\n<p>Please find a copy of the statement of the question below:<br>\n<em>Question</em></p>\n<p>- I would like to understand if there exists a simple method for<br>\n   importing classes into locales.</p>\n<p>- Alternatively, I would like to understand if there is a simple method<br>\n   that would enable me to use multiple types within the assumptions in<br>\n   classes.</p>\n<p>I would like to reuse theorems that are associated with certain pre-defined<br>\nclasses in the library HOL for the development of my own locales. However,<br>\nit seems to me that, at the moment, there are no standard methods that<br>\nwould allow me to achieve this (e.g. see this question<br>\n&lt;<a href=\"https://lists.cam.ac.uk/pipermail/cl-isabelle-users/2014-August/msg00237.html\">https://lists.cam.ac.uk/pipermail/cl-isabelle-users/2014-August/msg00237.html</a>&gt;<br>\n-<br>\nclause 5).</p>\n<p>Unfortunately, my problem will require the definition of structures (i.e.<br>\nlocales or classes) with the assumptions that use multiple types. Thus, I<br>\nwould prefer to use locales. However, I would also like to avoid code<br>\nduplication and reuse the structures that already exist in the library HOL<br>\nas much as I can.</p>\n<p>theory my_theory<br>\nimports Complex_Main<br>\nbegin</p>\n<p>(*It is possible to import other classes, establish a subclass relationship and<br>\nuse theorems from the super classes. However, if I understand correctly, it<br>\nis not trivial to ensure that multiple types can be used in the assumptions<br>\nthat are associated with the subclass.*)<br>\nclass my_class = order +<br>\n  fixes f :: \"'a ⇒ real\"<br>\nbegin<br>\nsubclass order<br>\nproof<br>\nqed<br>\nend</p>\n<p>lemma (in my_class) property_class: \"⟦ x ≤ y; y ≤ z ⟧ ⟹ x ≤ z\"<br>\n  by auto</p>\n<p>(*Multiple types can be used with ease. However, I am not sure how (if<br>\nit is possible) to ensure that the lemmas that are associated with the<br>\nimported class can be reused in the locale.*)<br>\nlocale my_locale =<br>\n  less_eq: order less_eq<br>\n  for less_eq :: \"'a ⇒ 'a ⇒ bool\" +<br>\n  fixes f :: \"'a ⇒ 'b\"<br>\nbegin<br>\nsublocale order<br>\nproof<br>\nqed<br>\nend</p>\n<p>sublocale my_locale ⊆ order<br>\nproof<br>\nqed</p>\n<p>(*nitpick finds a counterexample, because, for example, less_eq is treated<br>\nas a free variable.*)<br>\nlemma (in my_locale) property_locale: \"⟦ x ≤ y; y ≤ z ⟧ ⟹ x ≤ z\"<br>\n  by nitpick</p>\n<p>end</p>\n<p><em>Proposed solution</em></p>\n<p>At the moment I am thinking about redefining the minimal amount of axioms<br>\nin my own locales that is sufficient to establish the equivalence between<br>\nmy locales and the corresponding classes in HOL. However, this approach<br>\nresults in a certain amount of code duplication:</p>\n<p>theory my_plan<br>\nimports Complex_Main<br>\nbegin</p>\n<p>locale partial_order =<br>\n  fixes less_eq :: \"'a ⇒ 'a ⇒ bool\" (infixl \"≼\" 50)<br>\n    and less :: \"'a ⇒ 'a ⇒ bool\" (infixl \"≺\" 50)<br>\n  assumes refl [intro, simp]: \"x ≼ x\"<br>\n    and anti_sym [intro]: \"⟦ x ≼ y; y ≼ x ⟧ ⟹ x = y\"<br>\n    and trans [trans]: \"⟦ x ≼ y; y ≼ z ⟧ ⟹ x ≼ z\"<br>\n    and less_eq: \"(x ≺ y) = (x ≼ y ∧ x ≠ y)\"<br>\nbegin<br>\nend</p>\n<p>sublocale partial_order ⊆ order<br>\nproof<br>\n  fix x y z<br>\n  show \"x ≼ x\" by simp<br>\n  show \"x ≼ y ⟹ y ≼ z ⟹ x ≼ z\" using local.trans by blast<br>\n  show \"x ≼ y ⟹ y ≼ x ⟹ x = y\" by blast<br>\n  show \"(x ≺ y) = (x ≼ y ∧ ¬ y ≼ x)\" using less_eq by auto<br>\nqed</p>\n<p>sublocale order ⊆ partial_order<br>\nproof<br>\n  fix x y z<br>\n  show \"x ≤ x\" by simp<br>\n  show \"x ≤ y ⟹ y ≤ x ⟹ x = y\" by simp<br>\n  show \"x ≤ y ⟹ y ≤ z ⟹ x ≤ z\" by simp<br>\n  show \"(x &lt; y) = (x ≤ y ∧ x ≠ y)\" by auto<br>\nqed</p>\n<p>lemma (in partial_order) le_imp_less_or_eq: \"x ≼ y ⟹ x ≺ y ∨ x = y\"<br>\n  by (simp add: le_imp_less_or_eq)</p>\n<p>end</p>\n<p>Is the approach that I intend to follow considered to be an acceptable<br>\nstyle for the development of a library in Isabelle? Unfortunately, I have<br>\nnot seen this approach being used within the context of the development of<br>\nHOL. However, I am still not familiar with a large part of the library.</p>\n<p>- Also, please let me know if any of the information that is stated in<br>\n   the definition of the question is incorrect: I am new to Isabelle.</p>\n<hr>\n<p><em>General comments that are not directly related to the question</em></p>\n<p>Lastly, as a side note, I have noticed that there may be a certain amount<br>\nof partial code duplication in HOL. In particular, it seems to me that the<br>\ntheories in HOL/Lattice/, HOL/Algebra/Order-HOL/Algebra/Lattice and<br>\nHOL/Library/Boolean_Algebra resemble the theory in HOL/Orderings-<br>\nHOL/Lattices. However, I am not certain if the equivalence between these<br>\ntheories was established through the sublocale/subclass relationship (e.g.<br>\nsee class_deps) to a sufficient extent. Of course, I understand that the<br>\ntheories use distinct axiomatisation and the theories in HOL/Algebra/ and<br>\nHOL/Library/Boolean_Algebra are based on locales. Furthermore, the theories<br>\nin HOL/Algebra/ contain a certain amount of information that has not been<br>\nformalised in other theories. However, I would still like to gain a better<br>\nunderstanding why all four theories co-exist in HOL and the relationship<br>\nbetween these theories is not always clearly indicated.</p>",
        "id": 294731991,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661188407
    },
    {
        "content": "<p>From: Akihisa Yamada &lt;<a href=\"mailto:ayamada@trs.cm.is.nagoya-u.ac.jp\">ayamada@trs.cm.is.nagoya-u.ac.jp</a>&gt;<br>\nDear xanonec,</p>\n<p>let me comment to your technical questions as I also tackled the same <br>\ngoal as you. I'll be happy if there's a better solution, though.</p>\n<blockquote>\n<p>lemma (in my_locale) property_locale: \"⟦ x ≤ y; y ≤ z ⟧ ⟹ x ≤ z\"<br>\n  by nitpick</p>\n</blockquote>\n<p>Interpreting a class as a locale doesn't seem to import notations, so <br>\nhere \"≤\" refers to the global one for \"ord\", which assumes nothing (you <br>\ncan check by ctrl+hover on x etc.).</p>\n<p>My solution is to define a locale for syntax and interpret it (sublocale <br>\nis somehow slow) whenever you want to use the syntax.</p>\n<p>locale ord_syntax = ord<br>\nbegin</p>\n<p>notation less_eq (infix \"⊑\" 50)<br>\nnotation less (infix \"⊏\" 50)<br>\nabbreviation greater_eq_syntax (infix \"⊒\" 50) where \"greater_eq_syntax ≡ <br>\nord.greater_eq less_eq\"<br>\nabbreviation greater_syntax (infix \"⊐\" 50) where \"greater_syntax ≡ <br>\nord.greater less\"</p>\n<p>end</p>\n<p>context my_locale begin<br>\ninterpretation ord_syntax.<br>\nlemma property_locale: \"⟦ x ⊑ y; y ⊑ z ⟧ ⟹ x ⊑ z\" using less_eq.order_trans.<br>\nend</p>\n<p>Best regards,<br>\nAkihisa</p>",
        "id": 294732039,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661188430
    },
    {
        "content": "<p>From: xanonec xyz &lt;<a href=\"mailto:xanonec@gmail.com\">xanonec@gmail.com</a>&gt;<br>\nDear Dr Akihisa Yamada,</p>\n<p>Thank you for your reply. It seems that the solution that you have proposed<br>\nmay be the best solution that is currently available because it was used in<br>\nHOL on several occasions. Anecdotally, it is possible that someone else has<br>\nstruggled with the same problem - theory Dense_Linear_Order in the folder<br>\nHOL/Decision_Procs/ contains the following code:</p>\n<hr>\n<p>locale <em>linorder_stupid_syntax</em> = linorder<br>\nbegin</p>\n<p>notation<br>\n  less_eq  (\"op ⊑\") and<br>\n  less_eq  (\"(_/ ⊑ _)\" [51, 51] 50) and<br>\n  less  (\"op ⊏\") and<br>\n  less  (\"(_/ ⊏ _)\"  [51, 51] 50)</p>\n<p>end</p>\n<hr>\n<p>I have to admit that I thought that the problem is likely to be related to<br>\nnotation before asking the question. However, I became slightly confused<br>\nafter reading clause 5 in the following question:<br>\n<a href=\"https://lists.cam.ac.uk/pipermail/cl-isabelle-users/2014-August/msg00237.html\">https://lists.cam.ac.uk/pipermail/cl-isabelle-users/2014-August/msg00237.html</a>.<br>\nAfter reading clause 5 in the aforementioned question I thought that the<br>\nproblem may not have a trivial solution and decided to postpone the<br>\nindependent investigation until I receive a reply from the community.</p>\n<p>If possible, I would like to provide a copy of your reply on stack<br>\noverflow. Please let me know if this is acceptable (of course, I will<br>\nprovide a link to your original answer). Alternatively, please let me know<br>\nif you would prefer to provide an answer on stack overflow yourself or you<br>\nwould prefer your answer not to be copied to stack overflow.</p>\n<p>xanonec</p>",
        "id": 294732049,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661188432
    },
    {
        "content": "<p>From: Florian Haftmann &lt;<a href=\"mailto:florian.haftmann@informatik.tu-muenchen.de\">florian.haftmann@informatik.tu-muenchen.de</a>&gt;<br>\nDear xanonec,</p>\n<p>to start with:</p>\n<blockquote>\n<p>Lastly, as a side note, I have noticed that there may be a certain amount&gt; of partial code duplication in HOL. In particular, it seems to me that<br>\nthe&gt; theories in HOL/Lattice/, HOL/Algebra/Order-HOL/Algebra/Lattice<br>\nand&gt; HOL/Library/Boolean_Algebra resemble the theory in HOL/Orderings-&gt;<br>\nHOL/Lattices. However, I am not certain if the equivalence between<br>\nthese&gt; theories was established through the sublocale/subclass<br>\nrelationship (e.g.&gt; see class_deps) to a sufficient extent. Of course, I<br>\nunderstand that the&gt; theories use distinct axiomatisation and the<br>\ntheories in HOL/Algebra/ and&gt; HOL/Library/Boolean_Algebra are based on<br>\nlocales. Furthermore, the theories&gt; in HOL/Algebra/ contain a certain<br>\namount of information that has not been&gt; formalised in other theories.<br>\nHowever, I would still like to gain a better&gt; understanding why all four<br>\ntheories co-exist in HOL and the relationship&gt; between these theories is<br>\nnot always clearly indicated.</p>\n</blockquote>\n<p>This is a re-occuring topic on this mailing list, so let me quote from<br>\nan older post<br>\n(<a href=\"https://groups.google.com/forum/#!topic/fa.isabelle/kRHYNQ3uFCU/discussion\">https://groups.google.com/forum/#!topic/fa.isabelle/kRHYNQ3uFCU/discussion</a>):</p>\n<blockquote>\n<p>as a rule of thumb, there are basically two algebraic hierarchy<br>\ndevelopments in HOL:</p>\n<p>HOL-Main with type classes:\n* implicit use due to type inference\n* pragmatic and simple sharing between similar types\n* explicit definitions\n* directly executable</p>\n<p>HOL-Algebra with locales:\n* explicit carrier – possibility to develop proper meta theory (*)\n* implicit definitions where possible\n* suitable for mathematics </p>\n</blockquote>\n<p>(*) The meaning of »meta theory« in this context is roughly that you can<br>\nreason <em>about</em> algebraic structures, not only on properties of their<br>\nelements.  For example, the classification of all simple groups would be<br>\nmeta theory, whereas the statement »The integers form a group wrt. +, 0<br>\nand -« is not.</p>\n<p>HOL/Library/Boolean_Algebra is somewhat special as it seems to be used<br>\nonly in HOL-Word.</p>\n<p>Concerning re-using classes in locales: classes carry only global<br>\nsyntax: i.e. &lt; always refers to the global constant less, but during<br>\ninput / output occurences on local type 'a are replaces by the local<br>\nless (»user space type system«).  Hence, when building a local upon a<br>\nclass, syntax must be installed explicitly.</p>\n<p>It might also be the case that you only want to take over some results<br>\nfrom an existing class; then it is usually better to formulate the<br>\nlocale stand-alone and use a confined interpretation:</p>\n<p>class c = …</p>\n<p>locale l = … &lt;operations, syntax, assumptions…&gt;<br>\nbegin</p>\n<p>interpretation c: c … &lt;proof&gt;</p>\n<p>lemma result1 = c.result1</p>\n<p>lemma result2 = c.result2</p>\n<p>…</p>\n<p>end</p>\n<p>Hope this helps,<br>\n    Florian<br>\n<a href=\"/user_uploads/14278/tcTnu06yMqzq1U_WNHykjNzH/signature.asc\">signature.asc</a></p>",
        "id": 294732558,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661188610
    },
    {
        "content": "<p>From: xanonec xyz &lt;<a href=\"mailto:xanonec@gmail.com\">xanonec@gmail.com</a>&gt;<br>\nDear Dr Florian Haftmann,</p>\n<p>Thank your comments.</p>\n<p>The extracts from the post that is available on <a href=\"https://groups.google.com/\">https://groups.google.com/</a><br>\nforum/#!topic/fa.isabelle/kRHYNQ3uFCU/discussion were helpful and provide<br>\nan explanation for the observation that I made in the concluding remarks of<br>\nmy question.</p>\n<p>Also, with the help of the previous answer and your comments, I believe I<br>\nhave gained a certain level of understanding of the problem that is related<br>\nto the propagation of the notation/syntax from classes to locales. However,<br>\nI would also like to gain further understanding of the meaning and<br>\nsignificance of clause 5 in the post that is available on<br>\n<a href=\"https://lists.cam.ac.uk/pipermail/cl-isabelle-users/2014-August/msg00237.html\">https://lists.cam.ac.uk/pipermail/cl-isabelle-users/2014-August/msg00237.html</a><br>\n(I<br>\ncould not find any comments on clause 5 within the post, although several<br>\ncomments on other clauses were made):</p>",
        "id": 294732626,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661188637
    }
]