[
    {
        "content": "<p>From: Alexander Krauss &lt;<a href=\"mailto:krauss@in.tum.de\">krauss@in.tum.de</a>&gt;<br>\nDear Jeremy,</p>\n<p>All the worries you describe are definitely serious problems, and most<br>\npeople on this list have probably experienced this in one or the other<br>\nway. Different releases of Isabelle are hardly compatible on the ML<br>\nlevel and even the theory level requires a fair amount of changes from<br>\none release to the next. This is especially true for the transition<br>\n2005-&gt;2007, due to the many accumulated changes.</p>\n<blockquote>\n<p>These issues seem to be capable of causing massive and unnecessary <br>\ndifficulties.</p>\n</blockquote>\n<p>However, I cannot agree that these difficulties were unnecessary. How<br>\ncould they be avoided? Not making any incompatible changes to Isabelle<br>\nanymore would essentially stop history and carve the current state of<br>\nthe art into stone.</p>\n<p>The alternative - maintaining various compatibility layers that<br>\nimplement all interfaces and functionality present in some old versions</p>\n<ul>\n<li>demands a large amount of resources which we surely don't have. And it<br>\nscales badly: Legacy code accumulates over time and leads to a linear<br>\n(or worse) increase in maintenance costs, but development resources are<br>\n(probably) constant. Companies with lots of money may be able to support<br>\nthis, but even then the results are not always satisfactory (think of<br>\nthe compatibility problems between different versions of Microsoft<br>\nOffice files).</li>\n</ul>\n<p>So the only realistic chance is that users keep up with the development<br>\nand update their theories. Sticking to some old version may seem<br>\nconvenient for some time but, as you describe, it locks you into a<br>\nclosed world, where you cannot use other people's work and do not profit<br>\nfrom new developments. Updating your theories is an investment that pays<br>\noff finally. I agree that the 2005-&gt;2007 transition is undesirably<br>\npainful but we are trying to make releases frequent enough to avoid this<br>\nin the future. 2007-&gt;2008 is in fact not such a big deal (even with the<br>\nsomewhat radical removal of sets as a separate type).</p>\n<p>Embrace change!</p>\n<p>Alex</p>\n<blockquote>\n<p>PS.  Anyway, what aspects of the documentation are actually tested?</p>\n</blockquote>\n<p>The (old) Isabelle Reference Manual and the various \"Logics\" <br>\ndescriptions are still plain latex documents and hence cannot be tested. <br>\nEverything else is generated from theories.</p>",
        "id": 294066715,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660825696
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nThis is also my experience.  Even though ML interfaces often change <br>\nsubstantially, it is usually reasonable easy to port old code (thanks to <br>\nstatic type-checking in ML).</p>\n<p>Proofs are much more fragile, notably unstructured ones.  One way around <br>\nthis is to submit theory libraries and applications to <br>\n<a href=\"http://afp.sourceforge.net/\">http://afp.sourceforge.net/</a> where they get updated to latest Isabelle <br>\nautomagically.</p>\n<p>Makarius</p>",
        "id": 294066755,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660825708
    },
    {
        "content": "<p>From: Jeremy Dawson &lt;<a href=\"mailto:jeremy@rsise.anu.edu.au\">jeremy@rsise.anu.edu.au</a>&gt;<br>\nIn attempting to run Isabelle 2008, I get</p>\n<p>jeremy@stiletto:~/isabelle/2008/gen$ isabelle<br>\nPoly/ML RTS version I386-4.1.4 (14:18:30 Nov 14 2005)<br>\nCopyright (c) 2002-5 CUTS and contributors.<br>\nRunning with heap parameters (h=204800K,ib=40960K,ip=100%,mb=45056K,mp=20%)<br>\nMapping <br>\n/home/users/jeremy/isabelle/heaps/Isabelle2008/polyml-4.1.4_x86-linux/HOL<br>\nMapping /home/users/jeremy/Isabelle2008/../polyml/x86-linux/ML_dbase<br>\nPoly/ML 4.2.0 Release</p>\n<blockquote>\n<p>Goal \"X\";<br>\nException- ERROR \"Unknown context\" raised</p>\n</blockquote>\n<p>In Isabelle 2007 (and prior) this works fine</p>\n<p>jeremy@stiletto:~/isabelle/2007$ is07<br>\nPoly/ML RTS version I386-4.1.4 (14:18:30 Nov 14 2005)<br>\nCopyright (c) 2002-5 CUTS and contributors.<br>\nRunning with heap parameters <br>\n(h=512000K,ib=102400K,ip=100%,mb=106496K,mp=20%)<br>\nMapping /home/users/jeremy/Isabelle2007/heaps/polyml-4.1.4_x86-linux/HOL<br>\nMapping /home/users/jeremy/Isabelle2007/../polyml/x86-linux/ML_dbase<br>\nPoly/ML 4.2.0 Release</p>\n<blockquote>\n<p>Goal ;<br>\nval it = fn : string -&gt; Thm.thm list<br>\nGoal \"X\";</p>\n</blockquote>\n<h3>Legacy feature: old goal command</h3>\n<p>Level 0 (1 subgoal)<br>\nX</p>\n<ol>\n<li>X<br>\nval it = [] : Thm.thm list</li>\n</ol>\n<p>What has happened here?</p>\n<p>Jeremy</p>",
        "id": 294066868,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660825756
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nEven in Isabelle2007 it clearly says that the old ML Goal command is a <br>\nlegacy feature -- few contemporary Isabelle users will remember that it <br>\nexisted.</p>\n<p>Legacy features just disappear at some point.  In Isabelle2008 the ML <br>\nfunction still happens to be around, but does not work without a proper <br>\ncontext -- almost everything in Isabelle needs one.</p>\n<p>In the forthcoming Isabelle release even plain ML bindings already require <br>\na context -- we will have a purely functional ML toplevel that works <br>\nseamlessly with undo and multithreading.</p>\n<p>There are two ways to issue ML stuff <em>with</em> a context:</p>\n<p>* Either: use the 'ML' command within the Isar toplevel, usually within <br>\n    Proof General.  This is the regular, preferred way.</p>\n<p>* Or: startup a raw tty Isar loop, e.g. using \"isatool tty\", enter a <br>\n    theory, exit, poke around in ML, re-enter Isar:</p>\n<p>$ isatool tty -l HOL<br>\n      &gt; theory A imports Maib begin<br>\n      &gt; exit<br>\n      ML&gt; ...<br>\n      ML&gt; Isar.loop ()</p>\n<p>This scheme is useful for debugging in rare situations, e.g. when <br>\n    there are problems in conjunction with the Isar toplevel itself.</p>\n<p>Makarius</p>",
        "id": 294066932,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660825782
    },
    {
        "content": "<p>From: Jeremy Dawson &lt;<a href=\"mailto:jeremy@rsise.anu.edu.au\">jeremy@rsise.anu.edu.au</a>&gt;<br>\nMakarius wrote:</p>\n<blockquote>\n<p>On Wed, 8 Oct 2008, Jeremy Dawson wrote:</p>\n<blockquote>\n<p>In attempting to run Isabelle 2008, I get</p>\n<blockquote>\n<p>Goal \"X\";</p>\n<p>Exception- ERROR \"Unknown context\" raised</p>\n</blockquote>\n</blockquote>\n<blockquote>\n<p>In Isabelle 2007 (and prior) this works fine</p>\n<blockquote>\n<p>Goal \"X\";<br>\n</p>\n</blockquote>\n<h3>Legacy feature: old goal command</h3>\n<p>Level 0 (1 subgoal)<br>\nX<br>\n1. X<br>\nval it = [] : Thm.thm list</p>\n<p>What has happened here?<br>\n</p>\n</blockquote>\n<p>Even in Isabelle2007 it clearly says that the old ML Goal command is a <br>\nlegacy feature -- few contemporary Isabelle users will remember that it <br>\nexisted.</p>\n<p>Makarius,</p>\n</blockquote>\n<p>The \"old\" ML Goal command was introduced in October 1998!!  It was said <br>\nto _improve_ upon the old \"goal\" command, which _did_ require a context. </p>\n<p>Incidentally, the prove_goal command - which was purely functional, and <br>\nthe \"goal\" command, which required specifying the context, were left <br>\nunchanged, even though the developers then thought that non purely <br>\nfunctional code was preferable.  Those users who preferred purely <br>\nfunctional ML code were given the option to continue using it.  They <br>\nwere not compelled to go to the inconvenience of changing all their code <br>\njust because the developers then had a different preference. </p>\n<p>If few contemporary Isabelle users will remember that the Goal command <br>\nexisted, that means that, of those who used Isabelle when the Goal <br>\ncommand was in common use, most are no longer Isabelle users.  This may <br>\nwell be true, I wouldn't be surprised.  But if few people can survive <br>\nusing Isabelle for more than a few years, that is not a great <br>\nrecommendation for it.</p>\n<p>And what of the proofs those users did using Isabelle?  Pen and paper <br>\nproofs, once published, will still be in libraries for a hundred years.  <br>\nAn Isabelle proof, using \"Goal\", will, in approach reflected in your <br>\nemail and other, have had a useful life of only a few years.</p>\n<blockquote>\n<p>Legacy features just disappear at some point.  In Isabelle2008 the ML <br>\nfunction still happens to be around, but does not work without a proper <br>\ncontext -- almost everything in Isabelle needs one.</p>\n<p>In the forthcoming Isabelle release even plain ML bindings already require <br>\na context -- we will have a purely functional ML toplevel that works <br>\nseamlessly with undo and multithreading.</p>\n<p>Does this mean that all the functions involving an implicit context will <br>\ndisappear?<br>\neg, Simp_tac, simpset, etc ?  My code is full of these.</p>\n</blockquote>\n<p>I notice that the_context() has disappeared from Isabelle2008.</p>\n<blockquote>\n<p>There are two ways to issue ML stuff <em>with</em> a context:</p>\n<p>* Either: use the 'ML' command within the Isar toplevel, usually within <br>\n    Proof General.  This is the regular, preferred way.</p>\n<p>* Or: startup a raw tty Isar loop, e.g. using \"isatool tty\", enter a <br>\n    theory, exit, poke around in ML, re-enter Isar:</p>\n<p>$ isatool tty -l HOL<br>\n      &gt; theory A imports Maib begin<br>\n      &gt; exit<br>\n      ML&gt; ...<br>\n      ML&gt; Isar.loop ()</p>\n<p>This scheme is useful for debugging in rare situations, e.g. when <br>\n    there are problems in conjunction with the Isar toplevel itself.</p>\n<p>Thanks.  Incidentally, I notice that the_context() has disappeared from <br>\nIsabelle2008.<br>\nOnce one has created the context by entering Isar and exiting it again, <br>\nhow does one get hold of it?</p>\n</blockquote>\n<p>Regards,</p>\n<p>Jeremy</p>\n<blockquote>\n<p>Makarius<br>\n</p>\n</blockquote>",
        "id": 294066953,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660825788
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nSimp_tac and simpset: unit -&gt; simpset are indeed legacy features, too, <br>\nalthough not explicitly marked as such.  When embedding ML into Isar proof <br>\ntext, say via the method called \"tactic\", you can refer to the simpset <br>\nfrom the context via the @{simpset} antiquotation.</p>\n<p>Makarius</p>",
        "id": 294067046,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660825806
    },
    {
        "content": "<p>From: Jeremy Dawson &lt;<a href=\"mailto:jeremy@rsise.anu.edu.au\">jeremy@rsise.anu.edu.au</a>&gt;<br>\nMakarius wrote:<br>\nMakarius,</p>\n<p>Well, this is all very well, but I have dozens of emails showing that I <br>\ntried to understand what these antiquotations do and why I should use <br>\nthem. </p>\n<p>When I failed to achieve any such understanding, I tried using them <br>\nanyway, because you and others in Munich were so adamant that I should, <br>\nsaying that using the alternative calls would lead to errors.</p>\n<p>The result of this was that introducing antiquotations into my code <br>\n_caused_ errors, which were fixed when I reverted to not using them.</p>\n<p>Regards,</p>\n<p>Jeremy</p>",
        "id": 294067106,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660825824
    }
]