[
    {
        "content": "<p>From: Lawrence Paulson &lt;<a href=\"mailto:lp15@cam.ac.uk\">lp15@cam.ac.uk</a>&gt;<br>\nWithout reopening the “what is a bug” debate, I need to say that this sort of thing is inevitable with the approach taken by Isabelle/jEdit, in attempting to process everything, parsing errors and all. If you type in a syntactically incorrect proof, it tries to recover as best it can. In this case, it ignores the syntactically incorrect “show” command, causing the behaviour you observe. An alternative would be to silently insert “sorry” in order to complete the previous proof, preventing that behaviour but having other undesirable consequences.</p>\n<p>The best overall approach to all such situations is to fix syntax errors as soon as they are flagged. If I am working on a proof and notice that processing power is being wasted processing some proof text down below, I delete or disable this material. Inserting “sorry” beforehand should always do the trick. Needless to say, your work isn't done until every “sorry” has been removed again.</p>\n<p>Larry Paulson</p>",
        "id": 294273714,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660918029
    },
    {
        "content": "<p>From: Lars Noschinski &lt;<a href=\"mailto:noschinl@in.tum.de\">noschinl@in.tum.de</a>&gt;<br>\nWhat I sometimes wished for (in interactive mode) was a way to limit the<br>\nresources (in particular cpu-time) consumed by the proof tools. I almost<br>\nnever write proofs where a single method call takes longer than a<br>\nsecond; so a single proof method which takes more than say 10s is a sure<br>\nindication of a broken proof (for me). But this is of course hard to<br>\ncodify in a robust and system-independent manner ...</p>",
        "id": 294273732,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660918035
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nIIRC, you have reported massive waste of CPU cycles and unresponsiveness <br>\nbefore.</p>\n<p>This can certainly happen, and the system could be smarter in the <br>\nscheduling of tasks.  Such improvements are on the TODO list of <br>\nimprovements (neither \"issues\" nor \"bugs\") for several years.  The reason <br>\nwhy it is still not done, is lack of priority: I simply don't see really <br>\nbad effects so often.</p>\n<p>Maybe it is just a problem of adjusting Isabelle multi-threading <br>\nparameters to your hardware.  The above description sounds like you have <br>\neither very few cores (only 2) or a lot of virtual cores (due to <br>\nhyperthreading).</p>\n<p>Makarius</p>",
        "id": 294273762,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660918046
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\n(\"Bug\" is indeed a meangingless word, and I can't imagine anybody <br>\nattaching that label to this thread.)</p>\n<p>The general problem here is how to recover from errors (or <br>\nnon-termination) while the user is editing some unfinished proof text. <br>\n(Really proof <em>text</em> and not proof <em>script</em> because we are in the lucky <br>\nsituation that Isar proofs have a lot of explicit structure.)</p>\n<p>The current implementation is still very crude in this respect.  It does <br>\nnot even \"try as best as it can\". It merely ignores failed commands, and <br>\noften makes a mess while bumping into later parts of the text.  An obvious <br>\napproach is to take syntactic proof structure into account, using implicit <br>\n'sorry' as sketched above (and in fact making 'sorry' obsolete for <br>\nend-users).</p>\n<p>This is not totally trivial, since a proof might be so broken that the <br>\nsystem cannot guess its structure anymore.  So this important reform of <br>\nthe PIDE document model in that respect is related to proper indendation <br>\nsupport in the editor, which is also lacking from the very start of <br>\nIsabelle/jEdit.  (It will be probably also the notable point in history, <br>\nwhere hard tabulators are discontinued as \"blanks\", because they make the <br>\nindentation unclear.)</p>\n<p>A few months before every release in the past 3 years, I routinely check <br>\nif it is now feasible to open that can of interactive structured error <br>\nrecovery.  But again, I don't see it happining for the coming release, <br>\nbecause so many changes in PIDE interaction have already accumulated that <br>\nwill take months to consolidate and polish.</p>\n<p>Makarius</p>",
        "id": 294273767,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660918047
    },
    {
        "content": "<p>From: bnord &lt;<a href=\"mailto:bnord01@gmail.com\">bnord01@gmail.com</a>&gt;<br>\nI can't imagine a situation where I would like Isabelle/jEdit to recover <br>\nfrom a syntax error by ignoring a single show command. I'd rather expect <br>\nit to ignore everything from the syntax error until the next \"save\" <br>\nplace e.g. a theorem.</p>\n<p>I'm also very much against the \"insert a sorry\" approach. I'd embrace an <br>\n\"oops\" version discarding the last goal.</p>\n<p>Best<br>\n     Benedikt</p>",
        "id": 294273790,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660918054
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nWhy this?  Proofs are conceptually irrelevant in various respects.  Local <br>\nskips are done in many situations already, with increasing tendency in the <br>\npast 7 years.</p>\n<p>What is missing in the PIDE model is a global checkpoint to summarise the<br>\ndegree of \"finishedness\" of the overall project, or rather an overview of <br>\nthe inevitably unfinished parts.  Right now, users have to do this via <br>\neye-balling on the Theories dockable.</p>\n<p>Makarius</p>",
        "id": 294273797,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660918060
    },
    {
        "content": "<p>From: bnord &lt;<a href=\"mailto:bnord01@gmail.com\">bnord01@gmail.com</a>&gt;<br>\nWhen inserting my previous example 6 times I get no feedback in the <br>\nsixth version. (The first four loop the fifth yields feedback the sixth <br>\ndoesn't. I have two cores with four threads, I've set parallel proofs to <br>\ntwo.)</p>\n<p>I'd tag a single looping thread as undesirable and would understand <br>\ntagging thins with \"meaningless\" words as artistic freedom.</p>\n<p>I just reported this to make sure it's on such a list and maybe increase <br>\nit's relative priority a little.</p>\n<p>Best<br>\n     Benedikt</p>",
        "id": 294273811,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660918066
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nTime limits indeed introduce erratic behaviour.  Nonetheless, I have <br>\nsomething like this on my list of further improvements of PIDE document <br>\nprocessing for a long time.  It might be even done in a manner of <br>\n\"iterative deepening\", with 2-3 rounds of attempts to check some piece of <br>\ntext with increasing timeout.  Doing that with a few milliseconds in the <br>\nfirst round might even have a big impact on overall reactivity of the <br>\nproof checking game, although that is pure speculation at the moment.</p>\n<p>Makarius</p>",
        "id": 294273826,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660918072
    },
    {
        "content": "<p>From: bnord &lt;<a href=\"mailto:bnord01@gmail.com\">bnord01@gmail.com</a>&gt;<br>\nAm 22.04.14 14:15, schrieb Makarius:</p>\n<blockquote>\n<p>On Tue, 22 Apr 2014, bnord wrote:</p>\n<blockquote>\n<p>I'm also very much against the \"insert a sorry\" approach. I'd embrace <br>\nan \"oops\" version discarding the last goal.</p>\n</blockquote>\n<p>Why this?<br>\nBecause they're insufficiently highlighted and not tracked through later <br>\nproofs.<br>\n  Proofs are conceptually irrelevant in various respects.  Local skips <br>\nare done in many situations already, with increasing tendency in the <br>\npast 7 years.</p>\n<p>What is missing in the PIDE model is a global checkpoint to summarise the<br>\ndegree of \"finishedness\" of the overall project, or rather an overview <br>\nof the inevitably unfinished parts.  Right now, users have to do this <br>\nvia eye-balling on the Theories dockable.</p>\n<p>Makarius</p>\n</blockquote>",
        "id": 294273842,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660918078
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nSo far this does not disprove my reasing.</p>\n<p>Just the standard game:</p>\n<p>* What is your hardware precisely?</p>\n<p>* What is your operating system?</p>\n<p>* What is your Isabelle version?</p>\n<p>* What are your Isabelle options for \"threads\" and \"parallel_proofs\"?</p>\n<p>Makarius</p>",
        "id": 294273893,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660918084
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nOn Tue, 22 Apr 2014, bnord wrote:</p>\n<blockquote>\n<p>Am 22.04.14 14:15, schrieb Makarius:</p>\n<blockquote>\n<p>On Tue, 22 Apr 2014, bnord wrote:</p>\n<blockquote>\n<p>I'm also very much against the \"insert a sorry\" approach. I'd embrace an <br>\n \"oops\" version discarding the last goal.</p>\n</blockquote>\n<p>Why this?<br>\nBecause they're insufficiently highlighted and not tracked through later <br>\nproofs.</p>\n</blockquote>\n</blockquote>\n<p>OK.  That is subsumed by:</p>\n<blockquote>\n<blockquote>\n<p>What is missing in the PIDE model is a global checkpoint to summarise the<br>\n degree of \"finishedness\" of the overall project</p>\n</blockquote>\n</blockquote>\n<p>Makarius</p>",
        "id": 294273916,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660918096
    },
    {
        "content": "<p>From: bnord &lt;<a href=\"mailto:bnord01@gmail.com\">bnord01@gmail.com</a>&gt;<br>\nAm 22.04.14 14:28, schrieb Makarius:</p>\n<blockquote>\n<p>So far this does not disprove my reasing.<br>\nWasn't meant to disprove anything.</p>\n<p>Just the standard game:</p>\n<p>* What is your hardware precisely?<br>\nMacbook Pro with 2.4GHz Core i5 (2 Cores with 4 Threads) and 8GB of Ram<br>\n  * What is your operating system?<br>\nOS X 10.9.2<br>\n  * What is your Isabelle version?<br>\n2013_2<br>\n  * What are your Isabelle options for \"threads\" and \"parallel_proofs\"?<br>\n0 and 2<br>\n    Makarius</p>\n</blockquote>",
        "id": 294273927,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660918103
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nThat is a relatively weak CPU, but Intel makes it appear stronger via <br>\nhyperthreading, thus it gets somewhat overloaded and burns a lot of CPU <br>\ncycles (literally, by turning them into heat).</p>\n<p>So lets try the following parameters:</p>\n<p>threads = 2</p>\n<p>and in $ISABELLE_HOME_USER/etc/settings:</p>\n<p>ML_OPTIONS=\"-H 500 --gcthreads 2\"</p>\n<p>This requires a \"reboot\" of Isabelle.</p>\n<p>The above will be morally the default in the next Isabelle release, <br>\nbecause David Matthews now uses explicit information about virtual CPU <br>\ncores.</p>\n<p>For mobile systems it could also make sense to use only half of the number <br>\nof real CPU cores, although for 2 cores that gives an unexciting 1 with<br>\nquite different interactive behaviour in sequential mode.</p>\n<p>Makarius</p>",
        "id": 294273935,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660918109
    },
    {
        "content": "<p>From: bnord &lt;<a href=\"mailto:bnord01@gmail.com\">bnord01@gmail.com</a>&gt;<br>\nThanks, this helped with the responsiveness.</p>",
        "id": 294273947,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660918115
    },
    {
        "content": "<p>From: Lars Noschinski &lt;<a href=\"mailto:noschinl@in.tum.de\">noschinl@in.tum.de</a>&gt;<br>\nYou have now often recommended reducing the number of threads to the<br>\nnumber of real physical cores. Does this hold for interactive mode only?<br>\nBecause on my machine (a quadcore with 8 virtual cores), there are<br>\nseveral theories in the AFP with a speedup factor around 5 or even 6; so<br>\nat least raw throughput sometimes profits from the virtual cores on<br>\nIsabelle workload.</p>\n<p>-- Lars</p>",
        "id": 294273957,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660918121
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nI also do systematic \"overburning\" of CPU cycles in batch mode, it gives <br>\nme (real) warp factor 9.6 for 8 real cores (Intel Xeon from 2009) -- <br>\nhyperthreading actually has a purpose.  Concerning the \"factor\" one needs <br>\nto be careful, though: the figure given in Isabelle build on the spot is <br>\nmerely the relative burn-factor of CPU cycles, and that is a quite <br>\ndistorted version of the true speed-up factor compared to sequential mode.</p>\n<p>So yes, one could probably make this a general rule of thumb: interactive <br>\nmode refers to physical CPU cores and batch more to the maximum number of <br>\nvirtual CPU cores, even more.</p>\n<p>I usually get that effect by having the persistent default options as <br>\ndescribed before, which will be also the default in the next release. <br>\nFor batch builds I then give a generous -j4 to the implicit -o threads=4. <br>\nIn this \"4x4\" mode (which means \"4-wheel drive\" in French), I get the <br>\n\"sound of speed\" in my office from the CPU fans, and Isabelle + AFP built <br>\nquite fast.</p>\n<p>Makarius</p>",
        "id": 294273979,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660918133
    },
    {
        "content": "<p>From: Thomas Sewell &lt;<a href=\"mailto:thomas.sewell@nicta.com.au\">thomas.sewell@nicta.com.au</a>&gt;<br>\nI'd just like to add that this problem can be compounded by some other <br>\nissues, such as one we mentioned before where a diverging \"blast\" can <br>\nslow down jEdit. On rare occasions I've had to go hunting for blasts and <br>\nfastforces in the future part of my theory just to get enough CPU back <br>\nto work on the problem I have.</p>\n<p>Not sure what else to say about it, but if some improvement to the <br>\nprioritising of these speculative calculations could be made, I'd be all <br>\nfor it.</p>\n<p>Cheers,<br>\n     Thomas.</p>",
        "id": 294274091,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660918176
    },
    {
        "content": "<p>From: \"Yannick Duchêne (Hibou57 )\" &lt;<a href=\"mailto:yannick_duchene@yahoo.fr\">yannick_duchene@yahoo.fr</a>&gt;<br>\nI remember Coq has a different way to handle this: there are explicit  <br>\nforward and backward (in proof state) commands. The processed part of a  <br>\nproof is not editable and one have to go backward to edit it, then go  <br>\nforward again and resume up to the last proof statement. This is sometime  <br>\ntedious, while clean.</p>\n<p>That's a way too much different compared to what Isabelle users are  <br>\naccustomed to. Personally, it happens I think about the Coq way when I  <br>\nfeel Isabelle process too much of invalid text during editing, while in  <br>\nother cases, I enjoy the reactivity of feedback from Isabelle while  <br>\nediting.</p>\n<p>May be an idea could be to have a keystroke to quickly enable/disable  <br>\n“Continuous checking”… a keystroke, so that this would remain handy while  <br>\nediting: no need to leave the keyboard to go from and to the mouse to  <br>\ncheck/uncheck the option and no need to have the theories panel always  <br>\nvisible (otherwise needed, as the option is located on this panel).</p>",
        "id": 294274108,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660918182
    },
    {
        "content": "<p>From: Lawrence Paulson &lt;<a href=\"mailto:lp15@cam.ac.uk\">lp15@cam.ac.uk</a>&gt;<br>\nYou seem to be describing Proof General, which is still available for Isabelle, but no longer supported. </p>\n<p>We have to live with the problems of a radically new interaction paradigm that’s still being fleshed out. Maple, for example, offers a superficially similar document model, but you can’t tell whether what you are looking at has been evaluated or not, and even Maple itself doesn’t seem to know. That approach is efficient but has many of its own limitations.</p>\n<p>Larry Paulson</p>",
        "id": 294274121,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660918188
    },
    {
        "content": "<p>From: Lars Noschinski &lt;<a href=\"mailto:noschinl@in.tum.de\">noschinl@in.tum.de</a>&gt;<br>\nOn 23.04.2014 05:27, Yannick Duchêne (Hibou57) wrote:</p>\n<blockquote>\n<p>I remember Coq has a different way to handle this: there are explicit<br>\nforward and backward (in proof state) commands. The processed part of<br>\na proof is not editable and one have to go backward to edit it, then<br>\ngo forward again and resume up to the last proof statement. This is<br>\nsometime tedious, while clean.<br>\nThis is the classic way of Proof General, which also was the main<br>\nIsabelle UI till ~3 years ago.</p>\n<p>May be an idea could be to have a keystroke to quickly enable/disable<br>\n“Continuous checking”… a keystroke, so that this would remain handy<br>\nwhile editing: no need to leave the keyboard to go from and to the<br>\nmouse to check/uncheck the option and no need to have the theories<br>\npanel always visible (otherwise needed, as the option is located on<br>\nthis panel).<br>\nIn 2013-2, this is bound to C+e ENTER.</p>\n</blockquote>\n<p>BTW, there are many actions in the Isabelle plugin which can be<br>\npotentially bound to a shortcut, but aren't by default. To see them, go to</p>\n<p>Utilities / Global Options / jEdit / Shortcuts</p>\n<p>and select \"Plugin: Isabelle\" in the \"Edit Shortcuts\" dropdown.</p>\n<p>-- Lars</p>",
        "id": 294274134,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660918195
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nFunny that you see the difference of Coq vs. Isabelle today like that, as <br>\nsomeone who did not know Isabelle about 3 years ago, when Proof General <br>\nwas still the default.</p>\n<p>In 1998, David Aspinall started an important pan-European prover interface <br>\nproject called \"Proof General\".  He asked several prover experts to help <br>\nhim connect their particular system to that still emerging and <br>\nrevolutionary front-end.  I was the one to do the Isabelle/Isar <br>\nconnection, when Isar itself was just about to emerge.</p>\n<p>Note that \"... while clean\" above does not really apply, especially for <br>\nCoq.  The real prover syntax is too complex for Proof General and its <br>\nmodest elisp code to guess what the text means to the prover process. <br>\nThe Coq toplevel also has some legacy operations from the pre-Proof <br>\nGeneral era that make this harder than in Isabelle, and some Coq users are <br>\nactually still using the TTY loop (which normally does not happen for <br>\nIsabelle, because the Isar language makes this hard).</p>\n<p>15 years ago there were also various internal discussions about the key <br>\nconcepts how the prover front-end and back-end processes should <br>\ncommunicate, and certain fundamental limitations were already <br>\nwell-understood, imposed by accidental side-conditions of existing <br>\nprovers and the Emacs LISP machine.</p>\n<p>Much of that is forgotten to outsiders now, and many Proof General users <br>\nthink of it as something that has to be exactly like it is, because they <br>\nhave never seen anything else.  This lack of imagination and stagnation is <br>\nescpecially frustrating for me when I see the Proof General clone n + 1, <br>\nwith excactly the same limitations, and just some change in colors and <br>\nicons.</p>\n<p>The PIDE project came out of this more about 6 years ago, and it has <br>\nrequired a bit longer than expected to make it all ready for prime time. <br>\nToday it is hard to imagine anybody still using Isabelle Proof General, <br>\nand de-facto there has been nobody else maintaining it for about 3 years.</p>\n<p>Makarius</p>",
        "id": 294274215,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660918213
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nThat is unrealated to thread scheduling.  It is merely the oldest trick <br>\nthat tools can play on the front-end to bomb it, by emitting vast amounts <br>\nof \"potentially useful\" tracing information.</p>\n<p>That is already resolved for the coming release, see also<br>\n<a href=\"https://lists.cam.ac.uk/pipermail/cl-isabelle-users/2013-December/msg00138.html\">https://lists.cam.ac.uk/pipermail/cl-isabelle-users/2013-December/msg00138.html</a><br>\n<a href=\"https://mailmanbroy.informatik.tu-muenchen.de/pipermail/isabelle-dev/2013-December/004919.html\">https://mailmanbroy.informatik.tu-muenchen.de/pipermail/isabelle-dev/2013-December/004919.html</a></p>\n<p>A prover that is running efficiently on more and more cores poses extra <br>\nchallenges on the front-end.  But even with single-threaded Proof General, <br>\nthe danger had been there all the time.  When I discovered an easy <br>\nworkaround with \"nice\" on Unix in 2006, it was too late: the single-core <br>\nera had already ended and that crude process priority trick was useless, <br>\nexcept on my last 1-core laptop.</p>\n<p>Makarius</p>",
        "id": 294274236,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660918219
    },
    {
        "content": "<p>From: bnord &lt;<a href=\"mailto:bnord01@gmail.com\">bnord01@gmail.com</a>&gt;<br>\nI'd expect the following issue to be well known but didn't find it in <br>\nthe \"known issues\".</p>\n<p>When inserting a new goal (have ...) into a proof, proof methods <br>\nbelonging to later goals seem to be applied wrongly sometimes causing <br>\nthem to loop and make my PC noisy after a while. ;)</p>\n<p>Here's a small example:</p>\n<p>lemma assumes \"m ∈ M\" and \"M ⊆ N\" shows \"m ∈ N\" proof -<br>\nhave P(* incomplete goal *)<br>\nshow \"m ∈ N\" using assms by (metis in_mono) (* loops *)<br>\nqed</p>\n<p>The \"show\" already produces a syntax error but the later \"by\" is applied <br>\nanyhow yet to the wrong goal causing it to loop.</p>\n<p>A student of mine is highly skilled in producing such situations in many <br>\ntheorems simultaneously causing the editor to become very unresponsive.</p>\n<p>Best Benedikt</p>",
        "id": 294276740,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660919041
    }
]