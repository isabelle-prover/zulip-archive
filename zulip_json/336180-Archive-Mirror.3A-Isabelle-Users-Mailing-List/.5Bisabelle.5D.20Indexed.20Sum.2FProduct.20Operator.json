[
    {
        "content": "<p>From: Alfio Martini &lt;<a href=\"mailto:alfio.martini@acm.org\">alfio.martini@acm.org</a>&gt;<br>\nDear Isabelle Users,</p>\n<p>I was playing with the exercise below, and I wanted to find the<br>\ntheory where the indexed sum operator is defined.</p>\n<p>I tried  find_consts name: Sum, but this does not seem to<br>\nbe the way.</p>\n<p>Thanks for any help!</p>\n<p>theorem sum02: \"∑{0..n::nat} = n * (n+1) div 2\" (is \"?P n\")<br>\n  proof (induction n)<br>\n    show \"?P 0\"<br>\n       proof -<br>\n         have \"∑{0..0::nat} = 0\" by simp<br>\n         also have \"...= 0 * 0\" by simp<br>\n         also have \"... = 0 * (0 + 1)\" by simp<br>\n         also have \"... = (0 * (0 + 1)) div 2\" by simp<br>\n         finally show ?thesis by this<br>\n       qed<br>\n    next<br>\n      fix x0::nat<br>\n      assume IH: \"?P x0\"<br>\n      show \"?P (Suc x0)\"<br>\n        proof -<br>\n            have \"∑{0..(Suc x0)} = ∑{0..x0} + Suc x0\" by simp<br>\n            also have  \"...= ∑{0..x0} + (x0 + 1)\" by simp<br>\n            also have  \"...= (x0 * (x0 + 1) div 2) + (x0 + 1)\" by (simp<br>\nonly: IH)<br>\n            also have  \"...= (x0 * (x0 + 1) + 2 * x0 + 2) div 2\" by simp<br>\n            also have  \"...= (x0 * x0 + x0 + 2*x0 + 2) div 2\" by simp<br>\n            also have  \"...= (x0 * x0 + 3*x0 +2) div 2\" by simp<br>\n            also have  \"...= (x0 + 1) * (x0 + 2) div 2\" by simp<br>\n            also have  \"...= Suc x0 * (Suc x0 + 1) div 2\" by simp<br>\n            finally show ?thesis by this<br>\n        qed<br>\n  qed</p>",
        "id": 294228485,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660901203
    },
    {
        "content": "<p>From: Johannes Hölzl &lt;<a href=\"mailto:hoelzl@in.tum.de\">hoelzl@in.tum.de</a>&gt;<br>\nHi Alfio,</p>\n<p>in this case the problem is that \"∑ A\" (named \"Setsum\") is a special<br>\nsyntax for \"∑x∈A. x\" (named \"setsum\", note that symbol names are<br>\ncase-sensitive). It is defined in src/HOL/Big_Operators.thy.</p>\n<p>To find \"Setsum\" using find_consts or find_theorem is quiet hard as it<br>\nis just a syntax abbreviation and its more general form \"∑x∈A. f x\" is<br>\nnot found when you just search \"∑ A\".</p>\n<p>Luckily with the jEdit interface for Isabelle this gets much easier as<br>\nyou can Ctrl-click on the constant and jump to its definition.</p>\n<p>-Johannes</p>",
        "id": 294228502,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660901214
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nThat is indeed the way and it is not just by luck, because that is an <br>\nimportant principle of the Prover IDE: what you see as formally checked <br>\nsource is annotated by aspects of the logical content from the prover. <br>\nSo you can explore it via tooltips or hyperlinks right in the text.</p>\n<p>Sometimes these \"aspects\" are still missing or only approximative, but the <br>\ncoverage is increasing over time. So the need for separate diagnostic <br>\ncommands like find_consts is more and more diminished.</p>\n<p>Makarius</p>",
        "id": 294228526,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660901224
    },
    {
        "content": "<p>From: Alfio Martini &lt;<a href=\"mailto:alfio.martini@acm.org\">alfio.martini@acm.org</a>&gt;<br>\nThank you Makarius, Johannes and Lars.</p>\n<p>It works fine, although if by chance you click first on the symbol and then<br>\nlater<br>\npress the Control key and then click on the symbol (as I have done many<br>\ntimes)<br>\nit won´t work. You must press Control, then hover the cursor over the symbol<br>\nand THEN click on the symbol. It took me a while to get it right...:-)</p>\n<p>Anyway, this functionality is already mentioned in Christian´s small (and<br>\nnice) tutorial on jEdit.<br>\nI finally read it.</p>\n<p>As many others already mentioned here, jEdit is an awesome tool. It makes<br>\nusing Isabelle a completely different experience.</p>\n<p>It would be great to have a more solid and complete tutorial for the next<br>\nrelease.<br>\nI know that you all work very hard, but I still think that could be a<br>\npriority amongst<br>\nthe many things that has to be done.</p>\n<p>Best!</p>",
        "id": 294228537,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660901229
    },
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\nThe interesting part of the functionality of find_consts is search by a given<br>\ntype (a bit like Hoogle, if you speak Haskell). How do you plan to replace that<br>\nby tooltips and hyperlinks?</p>\n<p>Tobias</p>",
        "id": 294228573,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660901253
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nThis is just a different category of application: search over a <br>\n\"mathematical\" library, and really good solutions to that are still <br>\nmissing.  (I am occasionally attending the MKM conference, where people <br>\nare discussing that.)</p>\n<p>In contrast, the application sketched in this thread, you have your formal <br>\n(con)text where you presently work already.</p>\n<p>In the past query tools like find_theorems were often re-used to explore <br>\nthe local proof context, but this can be done more directly.  Similarly <br>\nreplacement of interactive diagnostics can be anticipated for print_cases, <br>\nprint_facts, \"thm calculation\", \"thm this\" etc.</p>\n<p>\"Big\" IDEs for Java do such things routinely.  That is conceptually not <br>\nsuch a big deal, and no need to go back to TTY-style commands.</p>\n<p>Makarius</p>",
        "id": 294228579,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660901259
    },
    {
        "content": "<p>From: Gerwin Klein &lt;<a href=\"mailto:Gerwin.Klein@nicta.com.au\">Gerwin.Klein@nicta.com.au</a>&gt;<br>\nOn 05/12/2012, at 6:58 AM, Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt; wrote:</p>\n<blockquote>\n<p>On Tue, 4 Dec 2012, Tobias Nipkow wrote:</p>\n<blockquote>\n<blockquote>\n<p>Sometimes these \"aspects\" are still missing or only approximative, but the coverage is increasing over time. So the need for separate diagnostic commands like find_consts is more and more diminished.</p>\n</blockquote>\n<p>The interesting part of the functionality of find_consts is search by a given type (a bit like Hoogle, if you speak Haskell). How do you plan to replace that by tooltips and hyperlinks?</p>\n</blockquote>\n<p>This is just a different category of application: search over a \"mathematical\" library, and really good solutions to that are still missing.  (I am occasionally attending the MKM conference, where people are discussing that.)</p>\n</blockquote>\n<p>I think that the combination of tooltips/hover links and the existing searches in find_theorems and find_consts is actually pretty good for searching our fact base (think back 10 years when grep was the power tool of choice).</p>\n<p>Things can and should certainly be improved, but I wouldn't diminish one kind of tool over the other. Both have their place.</p>\n<blockquote>\n<p>In contrast, the application sketched in this thread, you have your formal (con)text where you presently work already.</p>\n<p>In the past query tools like find_theorems were often re-used to explore the local proof context, but this can be done more directly.</p>\n</blockquote>\n<p>I don't agree, that's not how find_theorems gets used most often. It can be, and you're right that that part is better expressed by other methods in an IDE, but there is no way to express a context sensitive term pattern query mixed with negative naming constraints and further refinements in a simple click or tool tip.</p>\n<p>We really want both tools. Simple diagnostic information should be easily and directly accessible, and more complex searches for type or term patterns need to be just as well supported. Maybe they can be integrated better (dialogs or similar, although I'm not a fan of these), but that's a different aspect.</p>\n<p>Since we're on the IDE topic: one thing that we could make more use of from IDEs is intelligent context sensitive name completion (for constants, types, rules, proof methods, etc). Also, it would help if suggestions were sorted by frequency of use, e.g. \"sledgehammer\" should be suggested before \"sledgehammer_params\". Good IDEs excel at that.</p>\n<p>I'm not suggesting to aim for any of this in the next release, but if we're looking to improve the user experience in the future, this might make a big difference.</p>\n<p>Cheers,<br>\nGerwin</p>\n<hr>\n<p>The information in this e-mail may be confidential and subject to legal professional privilege and/or copyright. National ICT Australia Limited accepts no liability for any damage caused by this email or its attachments.</p>",
        "id": 294228603,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660901271
    },
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\nAm 04/12/2012 20:58, schrieb Makarius:</p>\n<blockquote>\n<p>On Tue, 4 Dec 2012, Tobias Nipkow wrote:</p>\n<blockquote>\n<blockquote>\n<p>Sometimes these \"aspects\" are still missing or only approximative, but the<br>\ncoverage is increasing over time. So the need for separate diagnostic<br>\ncommands like find_consts is more and more diminished.</p>\n</blockquote>\n<p>The interesting part of the functionality of find_consts is search by a given<br>\ntype (a bit like Hoogle, if you speak Haskell). How do you plan to replace<br>\nthat by tooltips and hyperlinks?</p>\n</blockquote>\n<p>This is just a different category of application: search over a \"mathematical\"<br>\nlibrary, and really good solutions to that are still missing.  (I am<br>\noccasionally attending the MKM conference, where people are discussing that.)</p>\n</blockquote>\n<p>I was not talking of the search facility itself (as Gerwin noted, we have a<br>\nnumber of nifty tools beside find_const) but how to invoke it without having to<br>\ntype the command name. Command completion is already nice, but still crude.<br>\nBecause the name can be nondescriptive and the parameters unclear. An example of<br>\nwhat I mean: Larry was not aware of the type-based search via find_consts.<br>\nContrast this with the nice box that cmd-f gives you in many tools, eg jedit.</p>\n<p>Tobias</p>\n<blockquote>\n<p>In contrast, the application sketched in this thread, you have your formal<br>\n(con)text where you presently work already.</p>\n<p>In the past query tools like find_theorems were often re-used to explore the<br>\nlocal proof context, but this can be done more directly.  Similarly replacement<br>\nof interactive diagnostics can be anticipated for print_cases, print_facts, \"thm<br>\ncalculation\", \"thm this\" etc.</p>\n<p>\"Big\" IDEs for Java do such things routinely.  That is conceptually not such a<br>\nbig deal, and no need to go back to TTY-style commands.</p>\n<p>Makarius</p>\n</blockquote>",
        "id": 294228660,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660901284
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nOn Tue, 4 Dec 2012, Gerwin Klein wrote:</p>\n<blockquote>\n<blockquote>\n<p>This is just a different category of application: search over a <br>\n\"mathematical\" library, and really good solutions to that are still <br>\nmissing.  (I am occasionally attending the MKM conference, where people <br>\nare discussing that.)</p>\n</blockquote>\n<p>I think that the combination of tooltips/hover links and the existing <br>\nsearches in find_theorems and find_consts is actually pretty good for <br>\nsearching our fact base (think back 10 years when grep was the power <br>\ntool of choice).</p>\n</blockquote>\n<p>Grep would be \"hypersearch\" in jEdit, and I am using this a lot.  It could <br>\nbe improved to take the semantic markup into account: search for regular <br>\nexpressions relative to some XML path context.</p>\n<blockquote>\n<p>Things can and should certainly be improved, but I wouldn't diminish one <br>\nkind of tool over the other. Both have their place.</p>\n</blockquote>\n<p>The start of the thread was a confusion about the right tool to use for <br>\nthe job.  What you see already formally in your bit of theory or an <br>\nexample by someone else does not have to be queried again, it is already <br>\nthere to be explored.</p>\n<p>I have recently brushed up the \"find\" tools a bit to provide more <br>\nhyperlinks in their output for the coming release, such that they can <br>\nparticipate in the game better.  Much more could and should be done there, <br>\nto get them to the state of the art of potential possibilities of the <br>\npresent system.</p>\n<p>Makarius</p>",
        "id": 294228676,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660901289
    }
]