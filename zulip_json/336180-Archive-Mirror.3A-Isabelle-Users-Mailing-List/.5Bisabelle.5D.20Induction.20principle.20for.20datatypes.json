[
    {
        "content": "<p>From: 王淑灵 &lt;<a href=\"mailto:wangsl@ios.ac.cn\">wangsl@ios.ac.cn</a>&gt;<br>\nDear Isabelle list,</p>\n<p>I am defining a datatype which involves a list constructor, see the following code:</p>\n<p>datatype comm = skip<br>\n| Seq comm comm<br>\n| Cond \"comm list\"<br>\nNotice that the length of the command list is not fixed. So this is why I use list here.</p>\n<p>Then I need to prove a property for the datatype:<br>\nconsts PP :: \"comm =&gt; bool\"<br>\nlemma \"PP a\"</p>\n<p>To prove the above lemma, I apply “induct” on ‘’a’’, and the following induction principle is produced by Isabelle,<br>\n“⋀list. PP (Cond list)”<br>\nHowever, this is too weak to prove the fact. The induction hypothesis on the elements in the list are expected, which are,<br>\nPP (fst a) and PP (Cond (snd a))</p>\n<p>Is there any way I can solve the above problem, defining comm in another way, or using other stronger induction principles of Isabelle?</p>\n<p>I greatly appreciate your help. Thanks.</p>\n<p>Best regards,<br>\nShuling Wang<br>\nSKLCS, Institute of Software, Chinese Academy of Sciences</p>",
        "id": 294663688,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661170894
    },
    {
        "content": "<p>From: Andreas Lochbihler &lt;<a href=\"mailto:andreas.lochbihler@inf.ethz.ch\">andreas.lochbihler@inf.ethz.ch</a>&gt;<br>\nDear Shuling,</p>\n<p>What version of Isabelle are you using?</p>\n<p>As of Isabelle2015, the induction rule should produce the induction hypothesis \"!!x. x : <br>\nset list ==&gt; PP x\". If you are using an older version of Isabelle (or you have called <br>\n\"datatype_compat comm\" to get the old-style induction rule), the recursion through list in <br>\nthe datatype definition is translated to a mutual recursion with a specialised version of <br>\nlist. Thus, you'd have to state and prove a simultaneous mutual induction statement, i.e.,</p>\n<p>lemma \"PP a\" and \"QQ as\"<br>\n   proof(induct a and as)</p>\n<p>In the inductive step for Cond, you then get QQ list as the induction hypothesis for the <br>\narguments, i.e., QQ has to summarise the inductive statement for lists. In general, QQ as <br>\n= (\\&lt;forall&gt;a\\&lt;in&gt;set as. PP a) should work.</p>\n<p>Hope this helps,<br>\nAndreas</p>",
        "id": 294663697,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661170898
    },
    {
        "content": "<p>From: 王淑灵 &lt;<a href=\"mailto:wangsl@ios.ac.cn\">wangsl@ios.ac.cn</a>&gt;<br>\nDear Andreas,</p>\n<p>Thanks. I am using Isabelle 2014. I just tried to use mutual recursion to my case and it works, while one problem is that I need to redefine many functions of the datatype. So I install Isabelle2015, and as you said, I find the induction hypothesis is strong enough.   </p>\n<p>Best regards,<br>\nShuling Wang<br>\nSKLCS, Institute of Software, Chinese Academy of Sciences</p>",
        "id": 294663713,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661170905
    }
]