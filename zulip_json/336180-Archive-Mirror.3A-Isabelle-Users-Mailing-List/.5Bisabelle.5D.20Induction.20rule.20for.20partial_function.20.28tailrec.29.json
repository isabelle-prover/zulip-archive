[
    {
        "content": "<p>From: Andreas Lochbihler &lt;<a href=\"mailto:andreas.lochbihler@inf.ethz.ch\">andreas.lochbihler@inf.ethz.ch</a>&gt;<br>\nHi Alex,</p>\n<p>Thanks for looking into this. Your rule is more or less the <br>\ncontrapositive to mine (in terms of \"= undefined\" and P). I proved your <br>\nrule and it works for showing undefinedness in case of non-termination <br>\n(there an introductory contrapos_np step, but that's all). Do you think <br>\nthis should be the default induction rule for (tailrec)? Currently, <br>\npartial_function (tailrec) generates no induction rule at all. If so, I <br>\ncan adapt Partial_Function.thy accordingly.</p>\n<p>Andreas</p>",
        "id": 294236698,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660905077
    },
    {
        "content": "<p>From: Alexander Krauss &lt;<a href=\"mailto:krauss@in.tum.de\">krauss@in.tum.de</a>&gt;<br>\nHi Andreas,</p>\n<p>Yes, go ahead! This rule should be the default.</p>\n<p>Alex</p>",
        "id": 294236768,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660905117
    },
    {
        "content": "<p>From: Andreas Lochbihler &lt;<a href=\"mailto:andreas.lochbihler@inf.ethz.ch\">andreas.lochbihler@inf.ethz.ch</a>&gt;<br>\nEvery now and then, I want to prove that a function that I have defined <br>\nwith partial_function (tailrec) is undefined when the recursion does not <br>\nterminate. Unfortunately, partial_function (tailrec) does not generate <br>\nan induction theorem for the functions. So I set out to prove my own <br>\ngeneric induction rule (fixp_induct_tailrec_undefined in the attachment) <br>\nsimilar to fixp_induct_option in Partial_Function.thy. If I manually <br>\ninstantiate it with the ..._def theorem of the partial function ..., <br>\neverything works fine. However, when I register it as the induction <br>\ntheorem to be used for tailrec (like it is done for fixp_induct_option <br>\nand option in Partial_Function.thy), I only get exceptions when using <br>\npartial_function.</p>\n<p>What's wrong with my induction theorem? How can I change it such that it <br>\nworks with partial_function?</p>\n<p>Andreas<br>\n<a href=\"/user_uploads/14278/BI530OGu_PxZmqxxSnm9LCDS/Scratch.thy\">Scratch.thy</a></p>",
        "id": 294238473,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660905874
    },
    {
        "content": "<p>From: Alexander Krauss &lt;<a href=\"mailto:krauss@in.tum.de\">krauss@in.tum.de</a>&gt;<br>\nHi Andreas,</p>\n<p>partial_function currently expects induction rules whose conclusion is <br>\nof the form \"... ==&gt; P x y\" where ... intuitively means \"f x terminates <br>\nand evaluates to y\". In the option monad, this is simply \"f x = Some y <br>\n==&gt; P x y\", but in the degenerate tailrec monad you would get something <br>\nlike \"f x = y ==&gt; y ~= undefined ==&gt; P x y\".</p>\n<p>I just tried this and got the following rule accepted by partial_function.</p>\n<p>lemma fixp_induct_tailrec_undefined:<br>\n   fixes F :: \"'c ⇒ 'c\" and<br>\n     U :: \"'c ⇒ 'b ⇒ 'a\" and<br>\n     C :: \"('b ⇒ 'a) ⇒ 'c\" and<br>\n     P :: \"'b ⇒ 'a ⇒ bool\" and<br>\n     x :: \"'b\"<br>\n   assumes mono: \"⋀x. mono_tailrec (λf. U (F (C f)) x)\"<br>\n   assumes eq: \"f ≡ C (ccpo.fixp (fun_lub (flat_lub undefined)) (fun_ord <br>\ntailrec_ord) (λf. U (F (C f))))\"<br>\n   assumes inverse2: \"⋀f. U (C f) = f\"<br>\n   assumes step: \"⋀f x y. (⋀x y. U f x = y ⟹ y ≠ undefined ⟹ P x y) ⟹ U <br>\n(F f) x = y ⟹ y ≠ undefined ⟹ P x y\"<br>\n   assumes result: \"U f x = y\"<br>\n   assumes defined: \"y ≠ undefined\"<br>\n   shows \"P x y\"<br>\n   sorry</p>\n<p>I believe this rule should be provable and sufficient for what you want.</p>\n<p>I cannot say on the spot whether partial_function could be modified to <br>\naccept rules like yours. The problem is the curry/uncurry translation, <br>\nwhich must do some explicit instantiations and assumes a certain <br>\nsyntactic form.</p>\n<p>Let me know when you make progress (or run into more problems).</p>\n<p>Alex</p>",
        "id": 294238859,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660906077
    }
]