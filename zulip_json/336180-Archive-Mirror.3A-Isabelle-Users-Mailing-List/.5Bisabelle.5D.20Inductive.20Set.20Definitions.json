[
    {
        "content": "<p>From: Cristiano Longo &lt;<a href=\"mailto:cristiano.longo@tvblob.com\">cristiano.longo@tvblob.com</a>&gt;<br>\nMorning all, I have been away from Isabelle for a long time. Now I need <br>\nto define inductively a function that takes a set and returns a set of <br>\nsets, built inductively starting from the input one.</p>\n<p>In the previous versions of Isabelle i used the \"induct\" construct to do <br>\nthat, but with the later version its counterpart \"induct_set\" does not <br>\nallow this.</p>\n<p>How can I do? The only way is to define a recursive function?</p>\n<p>Thanks in advance,<br>\nCristiano Longo</p>",
        "id": 294059957,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660823181
    },
    {
        "content": "<p>From: Florian Haftmann &lt;<a href=\"mailto:florian.haftmann@informatik.tu-muenchen.de\">florian.haftmann@informatik.tu-muenchen.de</a>&gt;<br>\nDear Cristiano,</p>\n<p>I have no clear idea what your problem really is.  In principial the<br>\ninductive_set command should do the job, as in the following (slightly<br>\npointless) example:</p>\n<p>inductive_set foo :: \"'a set \\&lt;Rightarrow&gt; 'a set set\"<br>\n  for A :: \"'a set\" where<br>\n  \"A \\&lt;in&gt; foo A\"<br>\n  | \"B \\&lt;in&gt; foo A \\&lt;Longrightarrow&gt; A \\&lt;union&gt; B \\&lt;in&gt; foo A\"</p>\n<p>Could you post a self-contained theory snippet which illustrates your<br>\nproblem?</p>\n<p>Cheers<br>\n    Florian<br>\n<a href=\"/user_uploads/14278/-MprDzAXuX9iKKlQOR4oxshq/signature.asc\">signature.asc</a></p>",
        "id": 294059979,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660823194
    }
]