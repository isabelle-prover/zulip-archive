[
    {
        "content": "<p>From: Gary Gao &lt;<a href=\"mailto:gary_gao2000@hotmail.com\">gary_gao2000@hotmail.com</a>&gt;<br>\nHi,</p>\n<p>I defined a subclass predicate inductively as:</p>\n<p>datatype cname = <br>\n     CNAME name (<em>User defined class name</em>)<br>\n  |  OBJECT (<em>Super class of all classes</em>);</p>\n<p>consts<br>\ncIC :: cname<br>\ncB :: cname;</p>\n<p>constdefs <br>\nclp :: \"cname ~=&gt; cname\"<br>\n\"clp == [cIC |-&gt; OBJECT, cB |-&gt; OBJECT]\";</p>\n<p>inductive<br>\nsubcls :: \"cname =&gt; cname =&gt; bool\"<br>\nwhere<br>\n     base [intro!, simp]: \"(cn ~= OBJECT) &amp; (clp cn) ~= None ==&gt; subcls cn (the (clp cn))\"<br>\n  |  step: \"(subcls cn cn') &amp; (subcls cn' cn'') ==&gt; subcls cn cn''\";</p>\n<p>My question is that how can I prove :</p>\n<p>lemma \"[|cIC ~= OBJECT; cB ~= OBJECT|] ==&gt; ~ subcls cIC cB\";</p>\n<p>I know that I can prove \"subcls cIC cB\" is true using inductive case if constant \"clp\" is defined as \"[cIC |-&gt; cB, cB |-&gt; OBJECT]\".</p>\n<p>Thanks in advance,</p>\n<p>Gary</p>\n<hr>",
        "id": 294066318,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660825556
    },
    {
        "content": "<p>From: Stefan Berghofer &lt;<a href=\"mailto:berghofe@in.tum.de\">berghofe@in.tum.de</a>&gt;<br>\nGary Gao wrote:<br>\nYou can prove an auxiliary lemma by induction on subcls, from<br>\nwhich your lemma follows trivially:</p>\n<p>lemma aux:<br>\n  assumes \"subcls cIC cB\"<br>\n  shows \"cIC ~= OBJECT\" \"cB = OBJECT\"<br>\n  using assms<br>\n  by induct (simp_all add: clp_def split add: split_if_asm)</p>\n<p>lemma \"[|cIC ~= OBJECT; cB ~= OBJECT|] ==&gt; ~ subcls cIC cB\"<br>\n  by (blast dest: aux)</p>\n<p>Greetings,<br>\nStefan</p>",
        "id": 294066383,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660825567
    }
]