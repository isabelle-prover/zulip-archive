[
    {
        "content": "<p>From: Christoph LANGE &lt;<a href=\"mailto:c.lange@cs.bham.ac.uk\">c.lange@cs.bham.ac.uk</a>&gt;<br>\nDear Isabelle experts,</p>\n<p>somewhere in a proof that involves real numbers from the theory \"Real\" I <br>\nwould like to infer \"(x::real) &gt;= 0\" from \"x &gt; 0\".</p>\n<p>For now I solved the problem by introducing the following axiomatic \"lemma\":</p>\n<p>lemma greater_zero_implies_greater_equal_zero [simp] :<br>\n   fixes x::real<br>\n   assumes \"x &gt; 0\"<br>\n   shows \"x ≥ 0\"<br>\nsorry</p>\n<p>(Note that I am new to Isabelle, so there might be better ways of doing <br>\nthis.)</p>\n<p>I would be interested in some built-in rule, or a theory in the library, <br>\nthat would simply do this inference for me.</p>\n<p>I am less interested in writing my own proof of this in place of the <br>\n\"sorry\" above, as my overall formalisation is a higher-level applied one.</p>\n<p>Cheers, and thanks in advance for any help,</p>\n<p>Christoph</p>",
        "id": 294219760,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660896830
    },
    {
        "content": "<p>From: Brian Huffman &lt;<a href=\"mailto:huffman@in.tum.de\">huffman@in.tum.de</a>&gt;<br>\nby (rule less_imp_le)</p>\n<ul>\n<li>Brian</li>\n</ul>",
        "id": 294219769,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660896835
    },
    {
        "content": "<p>From: Christoph LANGE &lt;<a href=\"mailto:c.lange@cs.bham.ac.uk\">c.lange@cs.bham.ac.uk</a>&gt;<br>\nDear Brian,</p>\n<p>2012-08-10 10:15 Brian Huffman:<br>\nexcellent, thanks a lot for your quick reply!</p>\n<p>Generally, when similar situations occur in future: Is there any <br>\ndocumentation of such rules?  In the manuals that come with Isabelle I <br>\ndidn't find anything.</p>\n<p>I see that this particular rule and similar ones are documented <br>\nreasonably well by the comments in src/Provers/order.ML  So would you <br>\ngenerally suggest scanning the sources for applicable rules, or is there <br>\na nicer overview?</p>\n<p>Cheers, and thanks,</p>\n<p>Christoph</p>",
        "id": 294219816,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660896842
    },
    {
        "content": "<p>From: Johannes Hölzl &lt;<a href=\"mailto:hoelzl@in.tum.de\">hoelzl@in.tum.de</a>&gt;<br>\nAm Freitag, den 10.08.2012, 12:08 +0200 schrieb Christoph LANGE:</p>\n<blockquote>\n<p>Dear Brian,</p>\n<p>2012-08-10 10:15 Brian Huffman:</p>\n<blockquote>\n<blockquote>\n<p>somewhere in a proof that involves real numbers from the theory \"Real\" I<br>\nwould like to infer \"(x::real) &gt;= 0\" from \"x &gt; 0\".</p>\n<p>…</p>\n</blockquote>\n<p>by (rule less_imp_le)</p>\n</blockquote>\n<p>excellent, thanks a lot for your quick reply!</p>\n<p>Generally, when similar situations occur in future: Is there any <br>\ndocumentation of such rules?  In the manuals that come with Isabelle I <br>\ndidn't find anything.</p>\n</blockquote>\n<p>The theories are documented in<br>\n<a href=\"http://isabelle.in.tum.de/dist/library/HOL/Orderings.html\">http://isabelle.in.tum.de/dist/library/HOL/Orderings.html</a></p>\n<p>but this is neither searchable nor very readable.</p>\n<p>There are two better methods:</p>\n<ul>\n<li>\n<p>use find_theorems <br>\n     like: find_theorems \"_ &gt; _ ==&gt; _ &gt;= _\"<br>\n   This is fast, but the result depends very strong on the pattern you<br>\n   are searching for.<br>\n   General rule: give a list of constants and not more:<br>\n     find_theorems (200) \"_ &gt; _\" \"_ &gt;= _\" name: Ord<br>\n   (the (200) tells find theorem to list the first 200 results)</p>\n</li>\n<li>\n<p>use sledgehammer:</p>\n<p>lemma \"(x::real) &gt; 0 --&gt; x &gt;= 0\"<br>\n     sledgehammer  </p>\n<p>This will now try to find a proof for this.<br>\n The proof will contain the necessary lemmas.</p>\n</li>\n<li>\n<p>Johannes</p>\n</li>\n</ul>\n<blockquote>\n<p>I see that this particular rule and similar ones are documented <br>\nreasonably well by the comments in src/Provers/order.ML  So would you <br>\ngenerally suggest scanning the sources for applicable rules, or is there <br>\na nicer overview?</p>\n<p>Cheers, and thanks,</p>\n<p>Christoph<br>\n</p>\n</blockquote>",
        "id": 294219831,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660896848
    },
    {
        "content": "<p>From: Brian Huffman &lt;<a href=\"mailto:huffman@in.tum.de\">huffman@in.tum.de</a>&gt;<br>\nScanning the <em>ML</em> sources is probably not very useful. If you want to<br>\nfamiliarize yourself with the set of available theorems, it is better<br>\nto browse the .thy files in src/HOL (most lemmas about &lt; and &lt;= are in<br>\nOrderings.thy) or else browse the generated pdf documentation for<br>\nIsabelle/HOL (follow \"document\" or \"outline\" link from<br>\n<a href=\"https://isabelle.in.tum.de/dist/library/HOL/index.html\">https://isabelle.in.tum.de/dist/library/HOL/index.html</a>).</p>\n<p>If you are looking for a specific lemma, you should definitely learn<br>\nthe \"find_theorems\" command. See e.g. section 3.1.11 of the \"Tutorial<br>\non Isabelle/HOL\".</p>\n<ul>\n<li>Brian</li>\n</ul>",
        "id": 294219839,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660896855
    },
    {
        "content": "<p>From: Lawrence Paulson &lt;<a href=\"mailto:lp15@cam.ac.uk\">lp15@cam.ac.uk</a>&gt;<br>\nThe real difficulty here is that you are using assumes/shows. Then the assumption \"x &gt; 0\" isn't explicitly part of the subgoal and isn't visible to Isabelle's automation. The one exception is sledgehammer, which sees everything, and instantly finds a proof.</p>\n<p>It would be better to state your problem more simply as follows:</p>\n<p>lemma greater_zero_implies_greater_equal_zero [simp] :<br>\n fixes x::real<br>\n shows  \"x &gt; 0 \\&lt;Longrightarrow&gt; x \\&lt;ge&gt; 0\"</p>\n<p>Or even more simply like this:</p>\n<p>lemma greater_zero_implies_greater_equal_zero [simp] :<br>\n  \"(x::real) &gt; 0 \\&lt;Longrightarrow&gt; x \\&lt;ge&gt; 0\"</p>\n<p>Then almost anything will solve it: auto, simp, arith, force. I suggest reserving assumes/shows for complicated theorems where there are many assumptions and they aren't all wanted at the same time.</p>\n<p>Another remark: I'm not sure it's a good idea to declare something like this as a default simplification rule. It will be quite generally applicable, and could increase your simplification time or even (together with similarly general conditional rewrite rules) cause looping.</p>\n<p>Larry Paulson</p>",
        "id": 294219847,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660896861
    },
    {
        "content": "<p>From: Christoph LANGE &lt;<a href=\"mailto:c.lange@cs.bham.ac.uk\">c.lange@cs.bham.ac.uk</a>&gt;<br>\n2012-08-10 12:22 Johannes Hölzl:</p>\n<blockquote>\n<p>Am Freitag, den 10.08.2012, 12:08 +0200 schrieb Christoph LANGE:</p>\n<blockquote>\n<p>2012-08-10 10:15 Brian Huffman:</p>\n<blockquote>\n<p>by (rule less_imp_le)</p>\n</blockquote>\n<p>…</p>\n<p>Generally, when similar situations occur in future: Is there any<br>\ndocumentation of such rules?  In the manuals that come with Isabelle I<br>\ndidn't find anything.</p>\n</blockquote>\n<p>The theories are documented in<br>\n<a href=\"http://isabelle.in.tum.de/dist/library/HOL/Orderings.html\">http://isabelle.in.tum.de/dist/library/HOL/Orderings.html</a></p>\n<p>but this is neither searchable nor very readable.</p>\n</blockquote>\n<p>Thanks!  Grepping the *.thy source files has been very useful for me so <br>\nfar.  Actually the only reason why I ended up in the ML sources was that <br>\nin the theory sources there was a lot of \"noise\" from this rule being <br>\n_applied_, so I just overlooked the lemma.</p>\n<blockquote>\n<p>There are two better methods:</p>\n</blockquote>\n<p>Thanks a lot – very helpful.  As a newbie, obviously, I knew neither of <br>\nthem.</p>\n<blockquote>\n<p>* use find_theorems<br>\n      like: find_theorems \"_ &gt; _ ==&gt; _ &gt;= _\"<br>\n                            ^<br>\n                            I think here it expects a numeric argument <br>\nas said below; didn't work without.</p>\n</blockquote>\n<blockquote>\n<p>…<br>\n    General rule: give a list of constants and not more:<br>\n      find_theorems (200) \"_ &gt; _\" \"_ &gt;= _\" name: Ord<br>\n    (the (200) tells find theorem to list the first 200 results)</p>\n</blockquote>\n<p>BTW in the documentation find_theorems is only mentioned in <br>\nprog-prove.pdf (just searched all files with pdfgrep), and there it says:</p>\n<p>--- %&lt; --- %&lt; --- %&lt; --- %&lt; --- %&lt; --- %&lt; --- %&lt; --- %&lt; --- %&lt; --- %&lt; ---<br>\nCommand find_theorems searches for specific theorems in the current theory.<br>\nSearch criteria include pattern matching on terms and on names. For details<br>\nsee the Isabelle/Isar Reference Manual [4].<br>\n--- %&lt; --- %&lt; --- %&lt; --- %&lt; --- %&lt; --- %&lt; --- %&lt; --- %&lt; --- %&lt; --- %&lt; ---</p>\n<p>… but the reference manual does't mention it.</p>\n<p>Generally, I had no idea that one can apply _any_ theorem using (rule <br>\nname_of_theorem).  This wasn't obvious to me, and instead I had thought <br>\nthat \"rules\" are something special that's built in at the level of \"a <br>\ncalculus for a logic\".</p>\n<blockquote>\n<p>* use sledgehammer:</p>\n<p>lemma \"(x::real) &gt; 0 --&gt; x &gt;= 0\"<br>\n        sledgehammer</p>\n<p>This will now try to find a proof for this.<br>\n    The proof will contain the necessary lemmas.</p>\n</blockquote>\n<p>Excellent, very helpful too!</p>\n<p>Cheers,</p>\n<p>Christoph</p>",
        "id": 294219861,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660896873
    },
    {
        "content": "<p>From: Christoph LANGE &lt;<a href=\"mailto:c.lange@cs.bham.ac.uk\">c.lange@cs.bham.ac.uk</a>&gt;<br>\n2012-08-10 12:22 Brian Huffman:</p>\n<blockquote>\n<p>Scanning the <em>ML</em> sources is probably not very useful.</p>\n</blockquote>\n<p>Indeed – I realized my mistake (see my reply to Johannes where I <br>\nexplained why I ran into this wrong direction).</p>\n<blockquote>\n<p>If you are looking for a specific lemma, you should definitely learn<br>\nthe \"find_theorems\" command. See e.g. section 3.1.11 of the \"Tutorial<br>\non Isabelle/HOL\".</p>\n</blockquote>\n<p>Nice!</p>\n<p>I should really be using ProofGeneral _and_ jEdit side-by-side. <br>\nShouldn't be a problem, as either editor notices when the other one has <br>\nchanged the file, and offers reloading.</p>\n<p>Cheers,</p>\n<p>Christoph</p>",
        "id": 294219883,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660896885
    },
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\nMy mistake, will fix that, thanks!</p>\n<p>Tobias</p>",
        "id": 294219894,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660896891
    },
    {
        "content": "<p>From: Christoph LANGE &lt;<a href=\"mailto:c.lange@cs.bham.ac.uk\">c.lange@cs.bham.ac.uk</a>&gt;<br>\nDear Larry, dear all (some more general-interest comments below; search <br>\nfor \"objectives\"),</p>\n<p>2012-08-10 12:22 Lawrence Paulson:</p>\n<blockquote>\n<p>The real difficulty here is that you are using assumes/shows. Then the assumption \"x &gt; 0\" isn't explicitly part of the subgoal and isn't visible to Isabelle's automation.</p>\n</blockquote>\n<p>Thanks, that's good to know.  I really had thought that \"assumes/shows\" <br>\nis just syntactic sugar for certain more complex expressions within the <br>\nlogic.</p>\n<p>(Note: Don't be too worried when I say \"I thought\" or \"I didn't know\" or <br>\n\"I had no idea\" – I still need to learn a lot.  Whenever I think that <br>\nsomething should really be presented in a more learnable way, I will <br>\nmake it explicit, as in a bug report :-))</p>\n<blockquote>\n<p>It would be better to state your problem more simply as follows:</p>\n<p>lemma greater_zero_implies_greater_equal_zero [simp] :<br>\n  fixes x::real<br>\n  shows  \"x &gt; 0 \\&lt;Longrightarrow&gt; x \\&lt;ge&gt; 0\"</p>\n<p>Or even more simply like this:</p>\n<p>lemma greater_zero_implies_greater_equal_zero [simp] :<br>\n   \"(x::real) &gt; 0 \\&lt;Longrightarrow&gt; x \\&lt;ge&gt; 0\"</p>\n</blockquote>\n<p>Nice!  I had no idea that one can omit the universal quantification of <br>\nx::real here.</p>\n<blockquote>\n<p>Then almost anything will solve it: auto, simp, arith, force.</p>\n</blockquote>\n<p>So from x::real these provers will know that it is a real number and <br>\ntherefore an element of an ordered set?</p>\n<blockquote>\n<p>I suggest reserving assumes/shows for complicated theorems where there are many assumptions and they aren't all wanted at the same time.</p>\n</blockquote>\n<p>Thanks, that's good to know.  One of the objectives of our project <br>\n(<a href=\"http://cs.bham.ac.uk/research/projects/formare/\">http://cs.bham.ac.uk/research/projects/formare/</a>) is to teach ATP/ITP to <br>\nnon-experts from application domains, economics in our case.</p>\n<p>We are interested in formalising new theorems that haven't been <br>\nformalised before, but also re-formalising things that have been <br>\nformalised before, but in a way that doesn't \"just get the proof done\", <br>\nbut in a way that we think we could teach to economists.</p>\n<p>Therefore we would like to keep as closely as possible to paper textbook <br>\nstyle, and for this reason I thought \"the more Isar syntactic sugar the <br>\nbetter\".</p>\n<p>We just got started with Isabelle (have done some formalisation in <br>\nTheorema before), but first public results can be expected soon.</p>\n<blockquote>\n<p>Another remark: I'm not sure it's a good idea to declare something like this as a default simplification rule.</p>\n</blockquote>\n<p>Thanks for the heads-up – indeed that approach resulted from the <br>\nmisunderstanding; I didn't know that one can simply say (rule <br>\nname_of_lemma).</p>\n<p>Cheers,</p>\n<p>Christoph</p>",
        "id": 294219902,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660896898
    },
    {
        "content": "<p>From: Dmitriy Traytel &lt;<a href=\"mailto:traytel@in.tum.de\">traytel@in.tum.de</a>&gt;<br>\nI don't see the mistake. The Isabelle/Isar Reference Manual describes <br>\nfind theorems on pages 163-165.</p>\n<p>Dmitriy</p>",
        "id": 294219918,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660896903
    },
    {
        "content": "<p>From: Lars Noschinski &lt;<a href=\"mailto:noschinl@in.tum.de\">noschinl@in.tum.de</a>&gt;<br>\nOn 10.08.2012 13:32, Tobias Nipkow wrote:</p>\n<blockquote>\n<p>My mistake, will fix that, thanks!</p>\n</blockquote>\n<p>find_theorems is explained on page 163 of the reference manual.</p>\n<p>Christoph: Searching for text in these pdf manual is not reliable; for <br>\nexample \"fi\" is turned into an fi-ligature (a single character), so it <br>\ndoes not turn up when searching for fi (two characters), at least for <br>\nsome pdf readers.</p>\n<p>It is far more reliable to look into the index at the end of the <br>\nreference manual.</p>\n<p>-- Lars</p>\n<blockquote>\n<p>Am 10/08/2012 13:24, schrieb Christoph LANGE:</p>\n<blockquote>\n<p>BTW in the documentation find_theorems is only mentioned in prog-prove.pdf (just<br>\nsearched all files with pdfgrep), and there it says:</p>\n<p>--- %&lt;  --- %&lt;  --- %&lt;  --- %&lt;  --- %&lt;  --- %&lt;  --- %&lt;  --- %&lt;  --- %&lt;  --- %&lt;  ---<br>\nCommand find_theorems searches for specific theorems in the current theory.<br>\nSearch criteria include pattern matching on terms and on names. For details<br>\nsee the Isabelle/Isar Reference Manual [4].<br>\n--- %&lt;  --- %&lt;  --- %&lt;  --- %&lt;  --- %&lt;  --- %&lt;  --- %&lt;  --- %&lt;  --- %&lt;  --- %&lt;  ---</p>\n<p>… but the reference manual does't mention it.</p>\n</blockquote>\n</blockquote>",
        "id": 294219939,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660896913
    },
    {
        "content": "<p>From: Christoph LANGE &lt;<a href=\"mailto:c.lange@cs.bham.ac.uk\">c.lange@cs.bham.ac.uk</a>&gt;<br>\n2012-08-10 13:42 Dmitriy Traytel:</p>\n<blockquote>\n<p>I don't see the mistake. The Isabelle/Isar Reference Manual describes<br>\nfind theorems on pages 163-165.</p>\n</blockquote>\n<p>Indeed – but strangely this text is not searchable.  The underscore of, <br>\ne.g., find_theorems, is not represented as a usual underscore.  You can <br>\ntry it by searching the PDF for \"find_theorems\". <br>\ndoc-src/IsarRef/Thy/Misc.thy doesn't contain anything suspicious, so I <br>\nsuspect a bug in the document preparation implementation.</p>\n<p>Is this list the right way to report bugs, or is there any better way?</p>\n<p>Cheers, and thanks,</p>\n<p>Christoph</p>",
        "id": 294219942,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660896916
    },
    {
        "content": "<p>From: Lars Noschinski &lt;<a href=\"mailto:noschinl@in.tum.de\">noschinl@in.tum.de</a>&gt;<br>\nOn 10.08.2012 13:40, Christoph LANGE wrote:</p>\n<blockquote>\n<p>Dear Larry, dear all (some more general-interest comments below; search<br>\nfor \"objectives\"),</p>\n<p>2012-08-10 12:22 Lawrence Paulson:</p>\n<blockquote>\n<p>The real difficulty here is that you are using assumes/shows. Then the<br>\nassumption \"x &gt; 0\" isn't explicitly part of the subgoal and isn't<br>\nvisible to Isabelle's automation.</p>\n</blockquote>\n<p>Thanks, that's good to know. I really had thought that \"assumes/shows\"<br>\nis just syntactic sugar for certain more complex expressions within the<br>\nlogic.</p>\n</blockquote>\n<p>You will get the same theorem in the end, but it is handled differently <br>\nin Isar; the assumptions will need to be used explicitly, e.g.</p>\n<p>lemma greater_zero_implies_greater_equal_zero [simp] :<br>\n   fixes x::real assumes \"x &gt; 0\" shows \"x \\&lt;ge&gt; 0\"<br>\n   using assms by auto</p>\n<blockquote>\n<blockquote>\n<p>I suggest reserving assumes/shows for complicated theorems where there<br>\nare many assumptions and they aren't all wanted at the same time.</p>\n</blockquote>\n<p>Thanks, that's good to know. One of the objectives of our project<br>\n(<a href=\"http://cs.bham.ac.uk/research/projects/formare/\">http://cs.bham.ac.uk/research/projects/formare/</a>) is to teach ATP/ITP to<br>\nnon-experts from application domains, economics in our case.</p>\n<p>We are interested in formalising new theorems that haven't been<br>\nformalised before, but also re-formalising things that have been<br>\nformalised before, but in a way that doesn't \"just get the proof done\",<br>\nbut in a way that we think we could teach to economists.</p>\n<p>Therefore we would like to keep as closely as possible to paper textbook<br>\nstyle, and for this reason I thought \"the more Isar syntactic sugar the<br>\nbetter\".</p>\n</blockquote>\n<p>This is entirely a matter of preference. I usually prefer structured <br>\nlemma statements.</p>\n<p>-- Lars</p>",
        "id": 294219948,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660896922
    },
    {
        "content": "<p>From: Christoph LANGE &lt;<a href=\"mailto:c.lange@cs.bham.ac.uk\">c.lange@cs.bham.ac.uk</a>&gt;<br>\n2012-08-10 14:01 Lars Noschinski:</p>\n<blockquote>\n<p>Christoph: Searching for text in these pdf manual is not reliable; for<br>\nexample \"fi\" is turned into an fi-ligature (a single character), so it<br>\ndoes not turn up when searching for fi (two characters), at least for<br>\nsome pdf readers.</p>\n</blockquote>\n<p>Good point – I didn't realize, as I mainly use PDF viewers that support <br>\nthem.  But indeed I see that Adobe Reader doesn't.</p>\n<p>This post might be helpful: <br>\n<a href=\"http://www.acsu.buffalo.edu/~jfernand/archives/2011/01/allow-adobe-reader-to-find-words-containing-ligatures.html\">http://www.acsu.buffalo.edu/~jfernand/archives/2011/01/allow-adobe-reader-to-find-words-containing-ligatures.html</a> <br>\n(note the link to glyphtounicode.tex is broken, but Google will find it, <br>\nand many TeX installations have it)</p>\n<p>I'm not sure whether this solution is generally applicable, but maybe <br>\nthe LaTeX-to-PDF creation workflow of Isabelle could be adapted to take <br>\nthis fix into account.  (This won't fix the unterscore problem yet.)</p>\n<blockquote>\n<p>It is far more reliable to look into the index at the end of the<br>\nreference manual.</p>\n</blockquote>\n<p>Uh – I hope I won't eventually have to _print_ the manual ;-)</p>\n<p>Cheers,</p>\n<p>Christoph</p>",
        "id": 294219953,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660896928
    },
    {
        "content": "<p>From: Lawrence Paulson &lt;<a href=\"mailto:lp15@cam.ac.uk\">lp15@cam.ac.uk</a>&gt;<br>\nOn 10 Aug 2012, at 12:40, Christoph LANGE wrote:</p>\n<blockquote>\n<p>So from x::real these provers will know that it is a real number and therefore an element of an ordered set?</p>\n</blockquote>\n<p>Correct.</p>\n<blockquote>\n<p>I didn't know that one can simply say (rule name_of_lemma).</p>\n</blockquote>\n<p>That is one of the core ideas in Isabelle, going right back to 1986.</p>\n<p>Your project sounds interesting. Good luck!</p>\n<p>Larry</p>",
        "id": 294219961,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660896934
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nOn Fri, 10 Aug 2012, Christoph LANGE wrote:</p>\n<blockquote>\n<p>Indeed – but strangely this text is not searchable.  The underscore of, <br>\ne.g., find_theorems, is not represented as a usual underscore.  You can <br>\ntry it by searching the PDF for \"find_theorems\". <br>\ndoc-src/IsarRef/Thy/Misc.thy doesn't contain anything suspicious, so I <br>\nsuspect a bug in the document preparation implementation.</p>\n</blockquote>\n<p>See also this thread: <br>\n<a href=\"https://lists.cam.ac.uk/mailman/htdig/cl-isabelle-users/2012-May/msg00251.html\">https://lists.cam.ac.uk/mailman/htdig/cl-isabelle-users/2012-May/msg00251.html</a></p>\n<blockquote>\n<p>Is this list the right way to report bugs, or is there any better way?</p>\n</blockquote>\n<p>You can post whatever you want on this list, as long as it refers to the<br>\nofficial Isabelle release -- normally the latest one, or one or two <br>\nversions behind.</p>\n<p>It also helps to search the mailing list archives.  See the links on the <br>\nIsabelle website front page.</p>\n<p>BTW, after more than 25 years certain things in Isabelle are just as they <br>\nare to the good or to the confusion of new users.  \"Bugs\" are very rare -- <br>\noften it is just a misunderstanding what to expect.</p>\n<p>Of course it always helps if you report your observations and share the <br>\nexperience to get things the way you need them.</p>\n<p>Makarius</p>",
        "id": 294220002,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660896959
    }
]