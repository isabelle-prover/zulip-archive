[
    {
        "content": "<p>From: Michael Chan &lt;<a href=\"mailto:mchan@inf.ed.ac.uk\">mchan@inf.ed.ac.uk</a>&gt;<br>\nHello all,</p>\n<p>I'm having a problem with looking up the instantiation to a variable in <br>\na matcher with Envir.lookup. The particular matcher is:</p>\n<p>ML{* fun rtac' rl i j st = (snd o Seq.chop j) (rtac rl i st) *}</p>\n<p>schematic_lemma<br>\nfixes g :: \"nat =&gt; nat\"<br>\nshows \"((?f :: (?'a =&gt; ?'b) =&gt; ?'c) ?s = ?v) = (g a = x) &amp; Q ?f ?s ?v\"<br>\napply rule<br>\napply(tactic {* rtac' refl 1 1712 *})</p>\n<p>goal (1 subgoal):</p>\n<p>1. Q (%a::?'a =&gt; nat. a (?f9 a)) (%b::?'a. g a) x<br>\nvariables:<br>\n   a, x :: nat<br>\n   g :: nat =&gt; nat<br>\n   ?f9 :: (?'a =&gt; nat) =&gt; ?'a<br>\n   Q ::<br>\n     ((?'a =&gt; nat) =&gt; nat) =&gt; (?'a =&gt; nat) =&gt; nat =&gt; bool<br>\ntype variables:<br>\n   ?'a :: type</p>\n<p>If I lookup the instantiation to the variable ?s in this particular <br>\nmatcher, which here has the type ?'a =&gt; nat, I run into an infinite <br>\nrecursion. The infinite recursion seems to be caused by an infinite <br>\nchasing of type variable assignment at Type.devar:</p>\n<p>(*chase variable assignments; if devar returns a type var then it must <br>\nbe unassigned*)<br>\nfun devar tye (T as TVar v) =<br>\n       (case lookup tye v of<br>\n         SOME U =&gt; devar tye U<br>\n       | NONE =&gt; T)<br>\n   | devar _ T = T;</p>\n<p>Put simply, there's no variable assignment for it to be chased.</p>\n<p>In the implementation, Envir.lookup indirectly invokes Type.equal_type, <br>\nwhich checks over each type variable -- in this case, that's ?'a and <br>\n?'b. ?'b is fine, and only ?'a is problematic. Now let's look at the tye:</p>\n<p>val tye =<br>\n    Branch2<br>\n     (Branch2<br>\n       (Empty, ((\"'a\", 0), ([\"HOL.type\"], \"?'a\")),<br>\n        Empty),<br>\n      ((\"'b\", 0), ([\"HOL.type\"], \"RealDef.real\")),<br>\n      Branch2<br>\n       (Empty,<br>\n        ((\"'a\", 1), ([\"HOL.type\"], \"RealDef.real\")),<br>\n        Empty))<br>\n    : Type.tyenv</p>\n<p>If we call devar tye on (?'a, 0), we'll run into an infinite recursion <br>\nbecause lookup tye (TVar (\"'a\", 0), [\"HOL.type\"])) also gives (TVar <br>\n(\"'a\", 0), [\"HOL.type\"])).</p>\n<p>Why isn't the variable chasing procedure given a maximum depth?</p>\n<p>Any help will be appreciated.</p>\n<p>Michael</p>",
        "id": 294119183,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660839248
    },
    {
        "content": "<p>From: Alexander Krauss &lt;<a href=\"mailto:krauss@in.tum.de\">krauss@in.tum.de</a>&gt;<br>\nHi Michael,</p>\n<blockquote>\n<p>I'm having a problem with looking up the instantiation to a variable in <br>\na matcher with Envir.lookup.</p>\n</blockquote>\n<p>I just looked at the code in envir.ML again, and there is a function <br>\nlookup', preceded by the following comment:</p>\n<p>(* When dealing with environments produced by matching instead *)<br>\n(* of unification, there is no need to chase assigned TVars.   *)<br>\n(* In this case, we can simply ignore the type substitution    *)<br>\n(* and use = instead of eq_type.                               *)</p>\n<p>Could this be the source of your problem? Since your problematic <br>\nsubstitution is generated by Unify.matchers (which wasn't clear from you <br>\nquestion), have you tried lookup' instead of lookup?</p>\n<p>Larry can maybe explain the details behind this...</p>\n<p>Alex</p>",
        "id": 294119217,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660839258
    },
    {
        "content": "<p>From: Michael Chan &lt;<a href=\"mailto:mchan@inf.ed.ac.uk\">mchan@inf.ed.ac.uk</a>&gt;</p>\n<blockquote>\n<p>Could this be the source of your problem? Since your problematic<br>\nsubstitution is generated by Unify.matchers (which wasn't clear from you<br>\nquestion), have you tried lookup' instead of lookup?<br>\n</p>\n</blockquote>\n<p>I shall share my finding here as well:</p>\n<p>An exception TYPE will be raised: Variable \"?stuff\" has two distinct<br>\ntypes. I think the problem there is that lookup' checks the type<br>\nvariables using op = instead, which would match ?'a =&gt; ?'b with the<br>\nresulting type. I suspect lookup' can't handle schematic types. It'd <br>\nfail in cases in which Envir.lookup succeeds, e.g.:</p>\n<p>consts<br>\ng :: \"'a =&gt; 'b\"<br>\na :: real<br>\nv :: real</p>\n<p>ML {*</p>\n<p>val trm1 = @{term_pat \"(?f'::(?'a=&gt;?'b)=&gt;?'c) ?stuff = ?v\"};</p>\n<p>val (_ $ (_ $ var) $ _) = trm1;</p>\n<p>val mtch_seq = let<br>\n   val init = Envir.empty 0<br>\n   val trm2 = @{term \"g a = v\"}<br>\nin<br>\n   Unify.matchers @{theory} [(trm1,trm2)]<br>\nend;</p>\n<p>val SOME (mtch,_) = nthseq 1711 mtch_seq;</p>\n<p>val tenv = Envir.term_env mtch;<br>\nval p = Term.dest_Var var;</p>\n<p>val inst = Envir.lookup' (tenv, p);</p>\n<p>*}</p>\n<blockquote>\n<p>Larry can maybe explain the details behind this...<br>\n</p>\n</blockquote>\n<p>That'd be great!</p>\n<p>Thanks<br>\nMichael</p>\n<blockquote>\n<p>Alex<br>\n</p>\n</blockquote>",
        "id": 294119229,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660839264
    }
]