[
    {
        "content": "<p>From: Johannes Hölzl &lt;<a href=\"mailto:hoelzl@in.tum.de\">hoelzl@in.tum.de</a>&gt;<br>\nDear Jasmin,</p>\n<p>Are you sure your definition works?</p>\n<p>I don't think cancel_comm_monoid_add will ever hold for enat or ennreal<br>\nfor a reasonable definition of minus. \"a + b - a = b\" is independent of<br>\n the definition of minus: if a is ∞ then we always get \"∞ - a = b\"</p>\n<p>I would love to have better support for minus on enat and ennreal.<br>\nAndreas added a couple of years ago support for cancellation of<br>\nadditive and multiplicative terms. Maybe we can also add something like<br>\n this for minus?</p>\n<p>When I added ennreal I also thought about adding additional type<br>\nclasses for enat and ennreal with a better support for non-cancellable<br>\nmonoids. I think we can factor out some theorems from existing type<br>\nclasses, like add_diff_assoc2. Or the second rule of<br>\ncancel_comm_monoid_add.</p>\n<ul>\n<li>Johannes</li>\n</ul>",
        "id": 294701170,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661179222
    },
    {
        "content": "<p>From: Johannes Hölzl &lt;<a href=\"mailto:hoelzl@in.tum.de\">hoelzl@in.tum.de</a>&gt;<br>\nAm Freitag, den 02.12.2016, 17:00 +0100 schrieb Johannes Hölzl:</p>\n<blockquote>\n<p>Dear Jasmin,</p>\n<p>Are you sure your definition works?</p>\n<p>I don't think cancel_comm_monoid_add will ever hold for enat or<br>\nennreal<br>\nfor a reasonable definition of minus. \"a + b - a = b\" is independent<br>\nof<br>\n the definition of minus: if a is ∞ then we always get \"∞ - a = b\"</p>\n</blockquote>\n<p>With <code>independent</code> I mean that it does not work no matter how we define<br>\n\"_ - _\": if a = ∞ then we always get \"∞ - ∞ = b\". So we will always<br>\nfind a \"b\" for which the equation fails.</p>\n<p>The extended numbers are quite unintuitive. If I wouldn't have Isabelle<br>\n I would have proved a lot of very nice but unfortunately wrong<br>\ntheorems   :-)</p>\n<ul>\n<li>Johannes</li>\n</ul>\n<blockquote>\n<p>I would love to have better support for minus on enat and ennreal.<br>\nAndreas added a couple of years ago support for cancellation of<br>\nadditive and multiplicative terms. Maybe we can also add something<br>\nlike<br>\n this for minus?</p>\n<p>When I added ennreal I also thought about adding additional type<br>\nclasses for enat and ennreal with a better support for non-<br>\ncancellable<br>\nmonoids. I think we can factor out some theorems from existing type<br>\nclasses, like add_diff_assoc2. Or the second rule of<br>\ncancel_comm_monoid_add.</p>\n<p>- Johannes</p>\n<p>Am Freitag, den 02.12.2016, 16:01 +0100 schrieb Jasmin Blanchette:</p>\n<blockquote>\n<p>Dear all,</p>\n<p>As noted before on this mailing list, automation for \"enat\"<br>\n(\"Library/Extended_Nat.thy\") is quite poor. Often, the only way to<br>\nproceed is to perform case distinctions on all \"enat\" and use auto<br>\non<br>\nthe emerging subgoals.</p>\n<p>My impression is that many type classes are not available because<br>\nof<br>\nthe definition of subtraction. Because \"∞ - ∞ = ∞\" (where \"∞\" is<br>\nthe<br>\ninfinity symbol), we lack one of the two properties required by<br>\n\"cancel_comm_monoid_add\":</p>\n<p>1. ⋀a b. a + b - a = b<br>\n 2. ⋀a b c. a - b - c = a - (b + c)</p>\n<p>and we lack the third property required by<br>\n\"comm_semiring_1_cancel\":</p>\n<p>3. ⋀a b c. a * (b - c) = a * b - a * c</p>\n<p>Counterexample for 1: a = ∞, b = 0.<br>\nCounterexample for 3: a = ∞, b = c = 1.</p>\n<p>These omissions affect further layers in the type class hierarchy<br>\n--<br>\ne.g. we cannot use \"ordered_cancel_comm_monoid_diff\", even though<br>\nsome of its theorems (e.g. \"add_diff_assoc2\") turn out to hold.</p>\n<p>My proposal is to change the definition of subtraction so that \"∞ -<br>\n∞<br>\n= 0\" and to instantiate the missing type classes. I believe this<br>\nwould make \"enat\" much less painful to use, and mathematically I'm<br>\nnot so convinced that \"∞ - ∞ = ∞\" is such a great idea anyway.<br>\nIndeed, I have recently implemented ordinals below ε_0 in Isabelle<br>\nand was able to have much better automation than with \"enat\", and<br>\nthere we have ω - ω = 0.</p>\n<p>\"enat\" occurs in about 70 \".thy\" files in Isabelle and the AFP, so<br>\nthis change (including the type class instantiations) seems quite<br>\nmanageable. We (= Mathias and I) would wait until after the 2016-1<br>\nrelease to avoid any interference.</p>\n<p>Any opinions for or against?</p>\n<p>Jasmin<br>\n</p>\n</blockquote>\n</blockquote>",
        "id": 294701501,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661179293
    },
    {
        "content": "<p>From: Lawrence Paulson &lt;<a href=\"mailto:lp15@cam.ac.uk\">lp15@cam.ac.uk</a>&gt;<br>\nAs a rule, people should use non-standard analysis rather than the extended naturals or reals. Although the former are more complicated, they preserve all the first order properties of their standard counterparts. In particular, the non-standard naturals are still a semiring. </p>\n<p>--lcp</p>",
        "id": 294701712,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661179359
    },
    {
        "content": "<p>From: Johannes Hölzl &lt;<a href=\"mailto:hoelzl@in.tum.de\">hoelzl@in.tum.de</a>&gt;<br>\nAnother idea from Tobias (and I think also Andreas) is to add a special<br>\nsimpproc which does case-distinction on enat/ereal/ennreal and calls<br>\nlinarith. I would assume the simpproc is quite slow but can be disable<br>\nby default and just be activated by the user.</p>\n<ul>\n<li>Johannes</li>\n</ul>",
        "id": 294701867,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661179429
    },
    {
        "content": "<p>From: Andreas Lochbihler &lt;<a href=\"mailto:andreas.lochbihler@inf.ethz.ch\">andreas.lochbihler@inf.ethz.ch</a>&gt;<br>\nThis really depends on what you want to use the extended numbers for. If you just want to <br>\ncompute the length of a coinductive list, then enat is better than the hypernats. For <br>\nexample, the equation</p>\n<p>llength (lappend xs ys) = llength xs + llength ys</p>\n<p>holds for enat, but not for hypernats, because lappend xs ys = xs if xs is infinite. Also, <br>\nI am pretty sure that the Max-Flow-Min-Cut theorem for countable graphs (AFP entry <br>\nMFMC_Countable) holds only on extended reals, but not on hyperreals.</p>\n<p>Andreas</p>",
        "id": 294702037,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661179477
    },
    {
        "content": "<p>From: Andreas Lochbihler &lt;<a href=\"mailto:andreas.lochbihler@inf.ethz.ch\">andreas.lochbihler@inf.ethz.ch</a>&gt;<br>\nAnother idea of mine was to embed the extended numbers into the non-standard numbers. The <br>\nidea was to do this embedding in a simproc and run linarith on the embedded terms. The <br>\nembedding only works if some case analyses are done (in particular for terms like \\infty - <br>\n\\infty), but I guess that one can save some case analyses this way. But the details have <br>\nnot been worked out so far.</p>\n<p>Andreas</p>",
        "id": 294702046,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661179480
    },
    {
        "content": "<p>From: Johannes Hölzl &lt;<a href=\"mailto:hoelzl@in.tum.de\">hoelzl@in.tum.de</a>&gt;<br>\nAm Freitag, den 02.12.2016, 16:09 +0000 schrieb Lawrence Paulson:</p>\n<blockquote>\n<p>As a rule, people should use non-standard analysis rather than the<br>\nextended naturals or reals. Although the former are more complicated,<br>\nthey preserve all the first order properties of their standard<br>\ncounterparts. In particular, the non-standard naturals are still a<br>\nsemiring. </p>\n</blockquote>\n<p>Hm, enat also forms a semiring:</p>\n<p>instantiation enat :: \"{comm_semiring_1, semiring_no_zero_divisors}\"</p>\n<blockquote>\n<p>--lcp</p>\n</blockquote>\n<blockquote>\n<p>On 2 Dec 2016, at 15:57, Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt; wrote:</p>\n<blockquote>\n<p>Jasmin, there is a reason why I would not do this:</p>\n<p>Aless Lasaruk and Thomas Sturm.<br>\nEffective Quantifier Elimination for Presburger Arithmetic with<br>\nInfinity</p>\n<p>This paper shows that our current enat has quantifier elimination<br>\n(although we have not inplemented it, and it would be some work,<br>\nbut not infeasible). In their system, \"∞ - ∞ = ∞\". Unless we know<br>\nthat your proposed modification still has quantifier elimination, I<br>\nwould be reluctant to give up that strong property.</p>\n<p>Tobias</p>\n<p>On 02/12/2016 16:01, Jasmin Blanchette wrote:</p>\n<blockquote>\n<p>Dear all,</p>\n<p>As noted before on this mailing list, automation for \"enat\"<br>\n(\"Library/Extended_Nat.thy\") is quite poor. Often, the only way<br>\nto proceed is to perform case distinctions on all \"enat\" and use<br>\nauto on the emerging subgoals.</p>\n<p>My impression is that many type classes are not available because<br>\nof the definition of subtraction. Because \"∞ - ∞ = ∞\" (where \"∞\"<br>\nis the infinity symbol), we lack one of the two properties<br>\nrequired by \"cancel_comm_monoid_add\":</p>\n<ol>\n<li>⋀a b. a + b - a = b</li>\n<li>⋀a b c. a - b - c = a - (b + c)</li>\n</ol>\n<p>and we lack the third property required by<br>\n\"comm_semiring_1_cancel\":</p>\n<ol start=\"3\">\n<li>⋀a b c. a * (b - c) = a * b - a * c</li>\n</ol>\n<p>Counterexample for 1: a = ∞, b = 0.<br>\nCounterexample for 3: a = ∞, b = c = 1.</p>\n<p>These omissions affect further layers in the type class hierarchy<br>\n-- e.g. we cannot use \"ordered_cancel_comm_monoid_diff\", even<br>\nthough some of its theorems (e.g. \"add_diff_assoc2\") turn out to<br>\nhold.</p>\n<p>My proposal is to change the definition of subtraction so that \"∞<br>\n- ∞ = 0\" and to instantiate the missing type classes. I believe<br>\nthis would make \"enat\" much less painful to use, and<br>\nmathematically I'm not so convinced that \"∞ - ∞ = ∞\" is such a<br>\ngreat idea anyway. Indeed, I have recently implemented ordinals<br>\nbelow ε_0 in Isabelle and was able to have much better automation<br>\nthan with \"enat\", and there we have ω - ω = 0.</p>\n<p>\"enat\" occurs in about 70 \".thy\" files in Isabelle and the AFP,<br>\nso this change (including the type class instantiations) seems<br>\nquite manageable. We (= Mathias and I) would wait until after the<br>\n2016-1 release to avoid any interference.</p>\n<p>Any opinions for or against?</p>\n<p>Jasmin</p>\n</blockquote>\n</blockquote>\n</blockquote>",
        "id": 294702061,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661179489
    },
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\nOn 02/12/2016 17:14, Johannes Hölzl wrote:</p>\n<blockquote>\n<p>Another idea from Tobias (and I think also Andreas) is to add a special<br>\nsimpproc which does case-distinction on enat/ereal/ennreal and calls<br>\nlinarith.</p>\n</blockquote>\n<p>Something like this was actually implemented in Coq</p>\n<p>Asankhaya Sharma, Shengyi Wang, Andreea Costea, Aquinas Hobor, and Wei-Ngan <br>\nChin: Certified Reasoning with Infinity. FM 2015.</p>\n<p>and shows that it can be made independent of the particular choice of what \"∞ - <br>\n∞\" is. Hence we should not lose quantifier elimination with a different choice.</p>\n<p>Tobias</p>\n<blockquote>\n<p>I would assume the simpproc is quite slow but can be disable<br>\nby default and just be activated by the user.</p>\n<ul>\n<li>Johannes</li>\n</ul>\n<p>Am Freitag, den 02.12.2016, 16:57 +0100 schrieb Tobias Nipkow:</p>\n<blockquote>\n<p>Jasmin, there is a reason why I would not do this:</p>\n<p>Aless Lasaruk and Thomas Sturm.<br>\nEffective Quantifier Elimination for Presburger Arithmetic with<br>\nInfinity</p>\n<p>This paper shows that our current enat has quantifier elimination<br>\n(although we<br>\nhave not inplemented it, and it would be some work, but not<br>\ninfeasible). In<br>\ntheir system, \"∞ - ∞ = ∞\". Unless we know that your proposed<br>\nmodification still<br>\nhas quantifier elimination, I would be reluctant to give up that<br>\nstrong property.</p>\n<p>Tobias<br>\n</p>\n</blockquote>\n<p>On 02/12/2016 16:01, Jasmin Blanchette wrote:</p>\n<blockquote>\n<blockquote>\n<p>Dear all,</p>\n<p>As noted before on this mailing list, automation for \"enat\"<br>\n(\"Library/Extended_Nat.thy\") is quite poor. Often, the only way to<br>\nproceed is to perform case distinctions on all \"enat\" and use auto<br>\non the emerging subgoals.</p>\n<p>My impression is that many type classes are not available because<br>\nof the definition of subtraction. Because \"∞ - ∞ = ∞\" (where \"∞\" is<br>\nthe infinity symbol), we lack one of the two properties required by<br>\n\"cancel_comm_monoid_add\":</p>\n<ol>\n<li>⋀a b. a + b - a = b</li>\n<li>⋀a b c. a - b - c = a - (b + c)</li>\n</ol>\n<p>and we lack the third property required by<br>\n\"comm_semiring_1_cancel\":</p>\n<ol start=\"3\">\n<li>⋀a b c. a * (b - c) = a * b - a * c</li>\n</ol>\n<p>Counterexample for 1: a = ∞, b = 0.<br>\nCounterexample for 3: a = ∞, b = c = 1.</p>\n<p>These omissions affect further layers in the type class hierarchy<br>\n-- e.g. we cannot use \"ordered_cancel_comm_monoid_diff\", even<br>\nthough some of its theorems (e.g. \"add_diff_assoc2\") turn out to<br>\nhold.</p>\n<p>My proposal is to change the definition of subtraction so that \"∞ -<br>\n∞ = 0\" and to instantiate the missing type classes. I believe this<br>\nwould make \"enat\" much less painful to use, and mathematically I'm<br>\nnot so convinced that \"∞ - ∞ = ∞\" is such a great idea anyway.<br>\nIndeed, I have recently implemented ordinals below ε_0 in Isabelle<br>\nand was able to have much better automation than with \"enat\", and<br>\nthere we have ω - ω = 0.</p>\n<p>\"enat\" occurs in about 70 \".thy\" files in Isabelle and the AFP, so<br>\nthis change (including the type class instantiations) seems quite<br>\nmanageable. We (= Mathias and I) would wait until after the 2016-1<br>\nrelease to avoid any interference.</p>\n<p>Any opinions for or against?</p>\n<p>Jasmin</p>\n</blockquote>\n</blockquote>\n<p><a href=\"/user_uploads/14278/2mxe__T05tGeDlTNPRfsuJ_U/smime.p7s\">smime.p7s</a></p>\n</blockquote>",
        "id": 294702070,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661179493
    },
    {
        "content": "<p>From: Manuel Eberl &lt;<a href=\"mailto:eberlm@in.tum.de\">eberlm@in.tum.de</a>&gt;<br>\nDo correct me if I am wrong, but in my naïveté, I would have thought<br>\nthat one should always be able to accommodate a different definition of<br>\n\"∞ - ∞\" in quantifier elimination, at worst by adding an extra case for<br>\n\"a = ∞ ∧ b = ∞\".</p>\n<p>Is that not the case?</p>\n<p>Manuel</p>",
        "id": 294702081,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661179499
    },
    {
        "content": "<p>From: Lawrence Paulson &lt;<a href=\"mailto:lp15@cam.ac.uk\">lp15@cam.ac.uk</a>&gt;<br>\nBut this property is still too weak for your purposes. The properties you state in your original message (as necessary for the decision procedure) are first-order and will hold for the non-standard naturals.</p>\n<p>Of course I understand that they don't suit all purposes, because they don't give a unique \"infinity\".</p>\n<p>--lcp</p>",
        "id": 294702105,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661179507
    },
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\nOn 02/12/2016 18:09, Manuel Eberl wrote:</p>\n<blockquote>\n<p>Do correct me if I am wrong, but in my naïveté, I would have thought<br>\nthat one should always be able to accommodate a different definition of<br>\n\"∞ - ∞\" in quantifier elimination, at worst by adding an extra case for<br>\n\"a = ∞ ∧ b = ∞\".</p>\n</blockquote>\n<p>I am not quite sure what you mean by the extra case, but it does not matter <br>\nbecause, yes, as I wrote, it is independent of \"∞ - ∞\".</p>\n<p>Tobias</p>\n<blockquote>\n<p>Is that not the case?</p>\n<p>Manuel</p>\n<p>On 02/12/16 17:39, Tobias Nipkow wrote:</p>\n<blockquote>\n<p>On 02/12/2016 17:14, Johannes Hölzl wrote:</p>\n<blockquote>\n<p>Another idea from Tobias (and I think also Andreas) is to add a special<br>\nsimpproc which does case-distinction on enat/ereal/ennreal and calls<br>\nlinarith.</p>\n</blockquote>\n<p>Something like this was actually implemented in Coq</p>\n<p>Asankhaya Sharma, Shengyi Wang, Andreea Costea, Aquinas Hobor, and<br>\nWei-Ngan Chin: Certified Reasoning with Infinity. FM 2015.</p>\n<p>and shows that it can be made independent of the particular choice of<br>\nwhat \"∞ - ∞\" is. Hence we should not lose quantifier elimination with a<br>\ndifferent choice.</p>\n<p>Tobias</p>\n<blockquote>\n<p>I would assume the simpproc is quite slow but can be disable<br>\nby default and just be activated by the user.</p>\n<ul>\n<li>Johannes<br>\n</li>\n</ul>\n</blockquote>\n<p>Am Freitag, den 02.12.2016, 16:57 +0100 schrieb Tobias Nipkow:</p>\n<blockquote>\n<blockquote>\n<p>Jasmin, there is a reason why I would not do this:</p>\n<p>Aless Lasaruk and Thomas Sturm.<br>\nEffective Quantifier Elimination for Presburger Arithmetic with<br>\nInfinity</p>\n<p>This paper shows that our current enat has quantifier elimination<br>\n(although we<br>\nhave not inplemented it, and it would be some work, but not<br>\ninfeasible). In<br>\ntheir system, \"∞ - ∞ = ∞\". Unless we know that your proposed<br>\nmodification still<br>\nhas quantifier elimination, I would be reluctant to give up that<br>\nstrong property.</p>\n<p>Tobias<br>\n</p>\n</blockquote>\n<p>On 02/12/2016 16:01, Jasmin Blanchette wrote:</p>\n<blockquote>\n<blockquote>\n<p>Dear all,</p>\n<p>As noted before on this mailing list, automation for \"enat\"<br>\n(\"Library/Extended_Nat.thy\") is quite poor. Often, the only way to<br>\nproceed is to perform case distinctions on all \"enat\" and use auto<br>\non the emerging subgoals.</p>\n<p>My impression is that many type classes are not available because<br>\nof the definition of subtraction. Because \"∞ - ∞ = ∞\" (where \"∞\" is<br>\nthe infinity symbol), we lack one of the two properties required by<br>\n\"cancel_comm_monoid_add\":</p>\n<ol>\n<li>⋀a b. a + b - a = b</li>\n<li>⋀a b c. a - b - c = a - (b + c)</li>\n</ol>\n<p>and we lack the third property required by<br>\n\"comm_semiring_1_cancel\":</p>\n<ol start=\"3\">\n<li>⋀a b c. a * (b - c) = a * b - a * c</li>\n</ol>\n<p>Counterexample for 1: a = ∞, b = 0.<br>\nCounterexample for 3: a = ∞, b = c = 1.</p>\n<p>These omissions affect further layers in the type class hierarchy<br>\n-- e.g. we cannot use \"ordered_cancel_comm_monoid_diff\", even<br>\nthough some of its theorems (e.g. \"add_diff_assoc2\") turn out to<br>\nhold.</p>\n<p>My proposal is to change the definition of subtraction so that \"∞ -<br>\n∞ = 0\" and to instantiate the missing type classes. I believe this<br>\nwould make \"enat\" much less painful to use, and mathematically I'm<br>\nnot so convinced that \"∞ - ∞ = ∞\" is such a great idea anyway.<br>\nIndeed, I have recently implemented ordinals below ε_0 in Isabelle<br>\nand was able to have much better automation than with \"enat\", and<br>\nthere we have ω - ω = 0.</p>\n<p>\"enat\" occurs in about 70 \".thy\" files in Isabelle and the AFP, so<br>\nthis change (including the type class instantiations) seems quite<br>\nmanageable. We (= Mathias and I) would wait until after the 2016-1<br>\nrelease to avoid any interference.</p>\n<p>Any opinions for or against?</p>\n<p>Jasmin</p>\n</blockquote>\n</blockquote>\n</blockquote>\n</blockquote>\n<p><a href=\"/user_uploads/14278/M9AncTZs0A_dFd6XOqt6d_iw/smime.p7s\">smime.p7s</a></p>\n</blockquote>",
        "id": 294702140,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661179518
    },
    {
        "content": "<p>From: Freek Wiedijk &lt;<a href=\"mailto:freek@cs.ru.nl\">freek@cs.ru.nl</a>&gt;<br>\nHi Larry,</p>\n<blockquote>\n<p>As a rule, people should use non-standard analysis rather<br>\nthan the extended naturals or reals.</p>\n</blockquote>\n<p>Even more so: Conway's surreal numbers!<br>\n(No, I'm not serious.)</p>\n<p>Freek</p>",
        "id": 294702163,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661179527
    },
    {
        "content": "<p>From: Jasmin Blanchette &lt;<a href=\"mailto:jasmin.blanchette@inria.fr\">jasmin.blanchette@inria.fr</a>&gt;<br>\nJohannes wrote:</p>\n<blockquote>\n<p>Are you sure your definition works?</p>\n</blockquote>\n<p>Not anymore. ;) Nitpick finds counterexamples for pretty much any property I hoped to have. Clearly, I could have spared myself some embarrassment by firing up this tool earlier.</p>\n<p>What I'll take home from this is that subtraction on \"enat\" is necessarily a messy business.</p>\n<p>Jasmin</p>",
        "id": 294702802,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661179738
    },
    {
        "content": "<p>From: Florian Haftmann &lt;<a href=\"mailto:florian.haftmann@informatik.tu-muenchen.de\">florian.haftmann@informatik.tu-muenchen.de</a>&gt;<br>\nJust to add another remark on this thread:</p>\n<p>AFAIU, »∞ - ∞« is similar to »1 / 0«: there is no definition for it that<br>\nsatisfied fundamental desired algebraic properties.</p>\n<p>Florian<br>\n<a href=\"/user_uploads/14278/3uT-QXiZROS87Pdolw3nusQK/signature.asc\">signature.asc</a></p>",
        "id": 294702824,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661179746
    },
    {
        "content": "<p>From: Jasmin Blanchette &lt;<a href=\"mailto:jasmin.blanchette@inria.fr\">jasmin.blanchette@inria.fr</a>&gt;<br>\nDear all,</p>\n<p>As noted before on this mailing list, automation for \"enat\" (\"Library/Extended_Nat.thy\") is quite poor. Often, the only way to proceed is to perform case distinctions on all \"enat\" and use auto on the emerging subgoals.</p>\n<p>My impression is that many type classes are not available because of the definition of subtraction. Because \"∞ - ∞ = ∞\" (where \"∞\" is the infinity symbol), we lack one of the two properties required by \"cancel_comm_monoid_add\":</p>\n<ol>\n<li>⋀a b. a + b - a = b</li>\n<li>⋀a b c. a - b - c = a - (b + c)</li>\n</ol>\n<p>and we lack the third property required by \"comm_semiring_1_cancel\":</p>\n<ol start=\"3\">\n<li>⋀a b c. a * (b - c) = a * b - a * c</li>\n</ol>\n<p>Counterexample for 1: a = ∞, b = 0.<br>\nCounterexample for 3: a = ∞, b = c = 1.</p>\n<p>These omissions affect further layers in the type class hierarchy -- e.g. we cannot use \"ordered_cancel_comm_monoid_diff\", even though some of its theorems (e.g. \"add_diff_assoc2\") turn out to hold.</p>\n<p>My proposal is to change the definition of subtraction so that \"∞ - ∞ = 0\" and to instantiate the missing type classes. I believe this would make \"enat\" much less painful to use, and mathematically I'm not so convinced that \"∞ - ∞ = ∞\" is such a great idea anyway. Indeed, I have recently implemented ordinals below ε_0 in Isabelle and was able to have much better automation than with \"enat\", and there we have ω - ω = 0.</p>\n<p>\"enat\" occurs in about 70 \".thy\" files in Isabelle and the AFP, so this change (including the type class instantiations) seems quite manageable. We (= Mathias and I) would wait until after the 2016-1 release to avoid any interference.</p>\n<p>Any opinions for or against?</p>\n<p>Jasmin</p>",
        "id": 294703333,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661179916
    },
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\nJasmin, there is a reason why I would not do this:</p>\n<p>Aless Lasaruk and Thomas Sturm.<br>\nEffective Quantifier Elimination for Presburger Arithmetic with Infinity</p>\n<p>This paper shows that our current enat has quantifier elimination (although we <br>\nhave not inplemented it, and it would be some work, but not infeasible). In <br>\ntheir system, \"∞ - ∞ = ∞\". Unless we know that your proposed modification still <br>\nhas quantifier elimination, I would be reluctant to give up that strong property.</p>\n<p>Tobias<br>\n<a href=\"/user_uploads/14278/S6lLsV91MJVt4WC7y7it0gyB/smime.p7s\">smime.p7s</a></p>",
        "id": 294703589,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661179984
    }
]