[
    {
        "content": "<p>From: Peter Lammich &lt;<a href=\"mailto:lammich@in.tum.de\">lammich@in.tum.de</a>&gt;<br>\nHi all,</p>\n<p>I have a subgoal of the form<br>\n[| ... |] ==&gt; a = ?f x</p>\n<p>The proof is to instantiate ?f to function \"foo\", and then<br>\ninvoke the simplifier. How to do this instantiation, i.e. is there a<br>\nmethod instantiate with that I can do:<br>\n  apply (instantiate ?f = foo)</p>\n<p>Best,<br>\n  Peter</p>",
        "id": 294145141,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660847209
    },
    {
        "content": "<p>From: Lars Noschinski &lt;<a href=\"mailto:noschinl@in.tum.de\">noschinl@in.tum.de</a>&gt;<br>\nMy usual approach would be to avoid introducing ?f, i.e. sufficiently <br>\ninstantiate the rule which introduced ?f (using the [of]-attribute).</p>",
        "id": 294145157,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660847215
    },
    {
        "content": "<p>From: Peter Lammich &lt;<a href=\"mailto:lammich@in.tum.de\">lammich@in.tum.de</a>&gt;<br>\nUnfortunately, this approach is no solution in my case, where ?f is<br>\nintroduced by exhaustively applying a bunch of<br>\nelim - rules \"apply (elim elim_rules)\". The rules in \"elim_rules\" are a<br>\nverification condition generator, that I definitely do not<br>\nwant to instantiate by hand before the actual verification conditions<br>\nare generated.</p>\n<p>Best,<br>\n  Peter</p>",
        "id": 294145298,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660847273
    },
    {
        "content": "<p>From: Lawrence Paulson &lt;<a href=\"mailto:lp15@cam.ac.uk\">lp15@cam.ac.uk</a>&gt;<br>\nYou could always try something like this:</p>\n<p>apply (rule asm_rl [of \"a = foo x\"])</p>\n<p>Larry Paulson</p>",
        "id": 294145313,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660847279
    },
    {
        "content": "<p>From: Lukas Bulwahn &lt;<a href=\"mailto:bulwahn@in.tum.de\">bulwahn@in.tum.de</a>&gt;<br>\nOn 09/27/2011 04:38 PM, Peter Lammich wrote:</p>\n<blockquote>\n<p>On 09/27/2011 09:28 AM, Lars Noschinski wrote:</p>\n<blockquote>\n<p>On 26.09.2011 19:02, Peter Lammich wrote:</p>\n<blockquote>\n<p>Hi all,</p>\n<p>I have a subgoal of the form<br>\n[| ... |] ==&gt;   a = ?f x</p>\n<p>The proof is to instantiate ?f to function \"foo\", and then<br>\ninvoke the simplifier. How to do this instantiation, i.e. is there a<br>\nmethod instantiate with that I can do:<br>\n    apply (instantiate ?f = foo)<br>\nMy usual approach would be to avoid introducing ?f, i.e. sufficiently<br>\ninstantiate the rule which introduced ?f (using the [of]-attribute).<br>\nUnfortunately, this approach is no solution in my case, where ?f is<br>\nintroduced by exhaustively applying a bunch of<br>\nelim - rules \"apply (elim elim_rules)\". The rules in \"elim_rules\" are a<br>\nverification condition generator, that I definitely do not<br>\nwant to instantiate by hand before the actual verification conditions<br>\nare generated.</p>\n</blockquote>\n</blockquote>\n<p>Then, I would suggest using rules trans and refl with the of attribute.<br>\nI guess in your case:</p>\n</blockquote>\n<p>apply (rule trans)<br>\nprefer 2<br>\napply (rule_tac t=\"foo x\" in refl)</p>\n<p>might work.</p>\n<p>Lukas</p>\n<blockquote>\n<p>Best,<br>\n   Peter<br>\n</p>\n</blockquote>",
        "id": 294145366,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660847285
    }
]