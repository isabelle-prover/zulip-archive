[
    {
        "content": "<p>From: John Munroe &lt;<a href=\"mailto:munddr@gmail.com\">munddr@gmail.com</a>&gt;<br>\nHi,</p>\n<p>If i have</p>\n<p>consts<br>\nfoo :: \"real =&gt; real\"<br>\nbar :: \"real =&gt; real\"</p>\n<p>and an axiom</p>\n<p>same_ax: \"ALL (g1::real=&gt;real) g2 x y. (y &gt; x &amp; g1 y - g1 x = g2 y -<br>\ng2 x) --&gt; g1 = g2\"</p>\n<p>I can get a proof quite fine with:</p>\n<p>lemma lem1: \"foo = bar\"<br>\nproof -<br>\n  have \"ALL x y. y &gt; x --&gt; foo y - foo x = bar y - bar x\"<br>\n    sorry<br>\n  then obtain r1 r2 where #: \"r2 &gt; r1\" and ##: \"foo r2 - foo r1 = bar<br>\nr2 - bar r1\"<br>\n    by auto<br>\n  then show ?thesis<br>\n    using same_ax<br>\n    by auto<br>\n  qed</p>\n<p>However, if I change the type of bar to:</p>\n<p>bar :: \"real =&gt; real =&gt; real\", the following won't go through:</p>\n<p>lemma lem1: \"ALL x. foo x = bar x 3\"<br>\nproof -<br>\n  have \"ALL x y. y &gt; x --&gt; foo y - foo x = bar y 3 - bar x 3\"<br>\n    sorry<br>\n  then obtain r1 r2 where #: \"r2 &gt; r1\" and ##: \"foo r2 - foo r1 = bar<br>\nr2 3 - bar r1 3\"<br>\n    by auto<br>\n  then show ?thesis<br>\n    using same_ax<br>\n    by auto</p>\n<p>How come g1 or g2 can't be instantiated to %x. bar x 3, which is of<br>\ntype real=&gt;real?</p>\n<p>Thanks</p>\n<p>John</p>",
        "id": 294127511,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660841760
    },
    {
        "content": "<p>From: Lawrence Paulson &lt;<a href=\"mailto:lp15@cam.ac.uk\">lp15@cam.ac.uk</a>&gt;<br>\nMy guess is that this instantiation is possible, but it's asking too much to expect the automation to invent this lambda-expression.</p>\n<p>Larry Paulson</p>",
        "id": 294127560,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660841764
    },
    {
        "content": "<p>From: John Munroe &lt;<a href=\"mailto:munddr@gmail.com\">munddr@gmail.com</a>&gt;<br>\nOn Sat, Jan 15, 2011 at 5:55 PM, Lawrence Paulson &lt;<a href=\"mailto:lp15@cam.ac.uk\">lp15@cam.ac.uk</a>&gt; wrote:</p>\n<blockquote>\n<p>My guess is that this instantiation is possible, but it's asking too much to expect the automation to invent this lambda-expression.<br>\n</p>\n</blockquote>\n<p>I see. Could you please suggest a way to proceed in this proof?</p>\n<p>Thanks<br>\nJohn</p>\n<blockquote>\n<p>Larry Paulson</p>\n<p>On 15 Jan 2011, at 15:52, John Munroe wrote:</p>\n<blockquote>\n<p>Hi,</p>\n<p>If i have</p>\n<p>consts<br>\nfoo :: \"real =&gt; real\"<br>\nbar :: \"real =&gt; real\"</p>\n<p>and an axiom</p>\n<p>same_ax: \"ALL (g1::real=&gt;real) g2 x y. (y &gt; x &amp; g1 y - g1 x = g2 y -<br>\ng2 x) --&gt; g1 = g2\"</p>\n<p>I can get a proof quite fine with:</p>\n<p>lemma lem1: \"foo = bar\"<br>\nproof -<br>\n have \"ALL x y. y &gt; x --&gt; foo y - foo x = bar y - bar x\"<br>\n   sorry<br>\n then obtain r1 r2 where #: \"r2 &gt; r1\" and ##: \"foo r2 - foo r1 = bar<br>\nr2 - bar r1\"<br>\n   by auto<br>\n then show ?thesis<br>\n   using same_ax<br>\n   by auto<br>\n qed</p>\n<p>However, if I change the type of bar to:</p>\n<p>bar :: \"real =&gt; real =&gt; real\", the following won't go through:</p>\n<p>lemma lem1: \"ALL x. foo x = bar x 3\"<br>\nproof -<br>\n have \"ALL x y. y &gt; x --&gt; foo y - foo x = bar y 3 - bar x 3\"<br>\n   sorry<br>\n then obtain r1 r2 where #: \"r2 &gt; r1\" and ##: \"foo r2 - foo r1 = bar<br>\nr2 3 - bar r1 3\"<br>\n   by auto<br>\n then show ?thesis<br>\n   using same_ax<br>\n   by auto</p>\n<p>How come g1 or g2 can't be instantiated to %x. bar x 3, which is of<br>\ntype real=&gt;real?</p>\n<p>Thanks</p>\n<p>John<br>\n</p>\n</blockquote>\n</blockquote>",
        "id": 294127584,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660841770
    },
    {
        "content": "<p>From: Tjark Weber &lt;<a href=\"mailto:webertj@in.tum.de\">webertj@in.tum.de</a>&gt;<br>\nOn Sat, 2011-01-15 at 15:52 +0000, John Munroe wrote:</p>\n<blockquote>\n<p>If i have</p>\n<p>consts<br>\nfoo :: \"real =&gt; real\"<br>\nbar :: \"real =&gt; real\"</p>\n<p>and an axiom</p>\n<p>same_ax: \"ALL (g1::real=&gt;real) g2 x y. (y &gt; x &amp; g1 y - g1 x = g2 y -<br>\ng2 x) --&gt; g1 = g2\"</p>\n</blockquote>\n<p>Axioms are evil.  It's all too easy to introduce inconsistencies.<br>\nHere's a proof of False from same_ax:</p>\n<p>lemma \"False\"<br>\n    apply (cut_tac same_ax)<br>\n    apply (drule_tac x=\"%x. 0\" in spec)<br>\n    apply (drule_tac x=\"%x. 1\" in spec)<br>\n    apply (auto dest: fun_cong)<br>\n  done</p>\n<p>(The problem is that the scope of x and y in same_ax extends all the way<br>\nto the end of the formula.)</p>\n<blockquote>\n<p>However, if I change the type of bar to:</p>\n<p>bar :: \"real =&gt; real =&gt; real\", the following won't go through:</p>\n<p>lemma lem1: \"ALL x. foo x = bar x 3\"<br>\nproof -<br>\n  have \"ALL x y. y &gt; x --&gt; foo y - foo x = bar y 3 - bar x 3\"<br>\n    sorry<br>\n  then obtain r1 r2 where #: \"r2 &gt; r1\" and ##: \"foo r2 - foo r1 = bar<br>\nr2 3 - bar r1 3\"<br>\n    by auto<br>\n  then show ?thesis<br>\n    using same_ax<br>\n    by auto</p>\n</blockquote>\n<p>Here's a proof of lem1 that's similar to the one you provided:</p>\n<p>lemma lem1: \"ALL x. foo x = bar x 3\"<br>\nproof -<br>\n  have \"ALL x y. y &gt; x --&gt; foo y - foo x = bar y 3 - bar x 3\"<br>\n    sorry<br>\n  then obtain r1 r2 where #: \"r2 &gt; r1\" and ##: \"foo r2 - foo r1 = bar<br>\nr2 3 - bar r1 3\"<br>\n    by auto<br>\n  then show ?thesis<br>\n    using same_ax[rule_format, of _ _ _ \"%x. bar x 3\"]<br>\n    by (auto dest: fun_cong)<br>\nqed</p>\n<p>Kind regards,<br>\nTjark</p>",
        "id": 294127619,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660841781
    }
]