[
    {
        "content": "<p>From: Manuel Eberl &lt;<a href=\"mailto:eberlm@in.tum.de\">eberlm@in.tum.de</a>&gt;<br>\nHallo,</p>\n<p>I have some type class foo that fixes some function f: 'a =&gt; 'a:</p>\n<p>class foo = fixes f :: \"'a =&gt; 'a\"</p>\n<p>Now suppose, for instance, that if I have a monoid, I can provide such<br>\nan f. Is it possible to have any monoid automatically by a \"foo\" as<br>\nwell, if I give a construction of the function f for any monoid?</p>\n<p>I cannot simply delete the class foo and put f directly into monoid,<br>\nbecause I also want to be able to provide some types with such a<br>\nfunction f that are not monoids.</p>\n<p>Cheers,<br>\nManuel</p>",
        "id": 294260688,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660914262
    },
    {
        "content": "<p>From: Andreas Lochbihler &lt;<a href=\"mailto:andreas.lochbihler@inf.ethz.ch\">andreas.lochbihler@inf.ethz.ch</a>&gt;<br>\nHi Manuel,</p>\n<p>no, there is currently no such mechanism to automatically propagate type class <br>\ninstantiations. The same issue appears in the HOL library for topologic spaces generated <br>\nfrom other structures (e.g. class order_topology in ~~/src/HOL/Topological_Spaces.thy), <br>\ntoo; separate type classes explicitly <em>assume</em> that the open sets are equal to some <br>\nconstruction. Maybe, a similar solution can work for you, too.</p>\n<p>Hope this helps,<br>\nAndreas</p>",
        "id": 294266758,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660915783
    }
]