[
    {
        "content": "<p>From: Viorel Preoteasa &lt;<a href=\"mailto:viorel.preoteasa@aalto.fi\">viorel.preoteasa@aalto.fi</a>&gt;<br>\nHello,</p>\n<p>I am trying to introduce syntax for a definition like<br>\nconstruct, that in addition to creating the definition,<br>\nwould also insatiate all type variables to a given type<br>\n(bool for simplicity)</p>\n<p>For example the declaration:</p>\n<p>mydef \"TestDefA a = (a = a)\"</p>\n<p>will create the theorem TestDefA_def:</p>\n<p>\"TestDefA (a::bool) = (a = a)\"</p>\n<p>I am trying to do this in the following way:</p>\n<p>- generalize the type variables using Thm.generalize<br>\n  - Drule.instantiate_normalize to instantiate the schematic type to bool</p>\n<p>This works on a theorem that has been generated with<br>\nSimplifier.rewrite, but it does not work when I try to<br>\napply it to the theorem within the code for creating the<br>\ndefinition, just before  Local_Theory.notes.<br>\nWhen I try to generalize the type variables I get the error:</p>\n<p>exception THM 0 raised (line 1127 of \"thm.ML\"):<br>\n   generalize: variable free in assumptions<br>\n   TestDefA ?a = (?a = ?a)  [TestDefA ≡ ??.TestDef.TestDefA]</p>\n<p>While writing this I realized, that it is not enough<br>\njust to change the theorem of the definition to work<br>\non bool, but I also need to change the constant to<br>\nwork on bool only.</p>\n<p>Attached is the theory where I try to define this<br>\nnew type of definition.</p>\n<p>Any help would be appreciated.</p>\n<p>Best regards,</p>\n<p>Viorel Preoteasa<br>\n<a href=\"/user_uploads/14278/OC9r_Wit_fbPsAhcxW8Fq6D7/TestDef.thy\">TestDef.thy</a></p>",
        "id": 294700436,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661179003
    },
    {
        "content": "<p>From: Viorel Preoteasa &lt;<a href=\"mailto:viorel.preoteasa@aalto.fi\">viorel.preoteasa@aalto.fi</a>&gt;<br>\nI think that I sent an empty theory file. Here I send it<br>\nagain.</p>\n<p>Best regards,</p>\n<p>Viorel Preoteasa</p>\n<p>onstruct, that in addition to creating the definition,<br>\nwould also insatiate all type variables to a given type<br>\n(bool for simplicity)</p>\n<p>For example the declaration:</p>\n<p>mydef \"TestDefA a = (a = a)\"</p>\n<p>will create the theorem TestDefA_def:</p>\n<p>\"TestDefA (a::bool) = (a = a)\"</p>\n<p>I am trying to do this in the following way:</p>\n<p>- generalize the type variables using Thm.generalize<br>\n  - Drule.instantiate_normalize to instantiate the schematic type to bool</p>\n<p>This works on a theorem that has been generated with<br>\nSimplifier.rewrite, but it does not work when I try to<br>\napply it to the theorem within the code for creating the<br>\ndefinition, just before  Local_Theory.notes.<br>\nWhen I try to generalize the type variables I get the error:</p>\n<p>exception THM 0 raised (line 1127 of \"thm.ML\"):<br>\n   generalize: variable free in assumptions<br>\n   TestDefA ?a = (?a = ?a)  [TestDefA ≡ ??.TestDef.TestDefA]</p>\n<p>While writing this I realized, that it is not enough<br>\njust to change the theorem of the definition to work<br>\non bool, but I also need to change the constant to<br>\nwork on bool only.</p>\n<p>Attached is the theory where I try to define this<br>\nnew type of definition.</p>\n<p>Any help would be appreciated.</p>\n<p>Best regards,</p>\n<p>Viorel Preoteasa<br>\n<a href=\"/user_uploads/14278/24Z3zgWr91w4_vWCefuO7NUC/TestDef.thy\">TestDef.thy</a></p>",
        "id": 294700457,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661179008
    },
    {
        "content": "<p>From: Viorel Preoteasa &lt;<a href=\"mailto:viorel.preoteasa@aalto.fi\">viorel.preoteasa@aalto.fi</a>&gt;<br>\nHello,</p>\n<p>I figured out now the solution to my problem. It seems enough<br>\njust to change all type variables to the given type<br>\nin prop just before calling:</p>\n<p>val (((x, T), rhs), prove) = Local_Defs.derived_def lthy true prop;</p>\n<p>in function gen_def</p>\n<p>Best regards,</p>\n<p>Viorel Preoteasa</p>",
        "id": 294700544,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661179039
    }
]