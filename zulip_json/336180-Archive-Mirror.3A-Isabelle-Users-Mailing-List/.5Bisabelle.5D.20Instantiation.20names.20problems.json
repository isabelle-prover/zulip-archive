[
    {
        "content": "<p>From: Jesus Aransay &lt;<a href=\"mailto:jesus-maria.aransay@unirioja.es\">jesus-maria.aransay@unirioja.es</a>&gt;<br>\nDear all,</p>\n<p>based on the examples in \"src/HOL/Enum.thy\" I was trying to prove the<br>\nfollowing instance (where the \"[]\" should be replaced by a suitable<br>\nrepresentation of the universe of the intended type), still in Isabelle2012:</p>\n<p>instantiation bit0 :: (finite) enum<br>\nbegin</p>\n<p>definition \"enum = []\"</p>\n<p>definition \"enum_all P = (filter P enum = enum)\"</p>\n<p>definition \"enum_ex P = (filter P enum ≠ [])\"</p>\n<p>instance<br>\nproof (default)<br>\nshow \"UNIV = set enum\"</p>\n<hr>\n<p>Whatever goal I try to state with \"show\" after the \"proof (default)\"<br>\ncommand, I always get an error</p>\n<p>\"Local statement will fail to solve any pending goal\"</p>\n<p>I can neither refer to definitions \"enum_bit0_def\",<br>\n\"enum_all_bit0_def\", \"enum_ex_bit0_def\" in the \"instance\" proof.</p>\n<p>What am I doing wrong? Have I missed some type annotations, or should<br>\nI do the definitions names explicit?</p>\n<p>Thanks for any ideas,</p>\n<p>Jesus</p>",
        "id": 294230568,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660902274
    },
    {
        "content": "<p>From: Andreas Lochbihler &lt;<a href=\"mailto:andreas.lochbihler@inf.ethz.ch\">andreas.lochbihler@inf.ethz.ch</a>&gt;<br>\nDear Jesus,</p>\n<p>This looks like type inference gives you too generic types. Try to <br>\nexplicitly restrict the type like this, for both definitions and goal <br>\nstatements.</p>\n<p>definition \"(enum :: bit0 list) = []\"<br>\nshow \"(UNIV :: bit0 set) = set enum\"</p>\n<p>Hope this helps<br>\nAndreas</p>",
        "id": 294230576,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660902278
    },
    {
        "content": "<p>From: Jesus Aransay &lt;<a href=\"mailto:jesus-maria.aransay@unirioja.es\">jesus-maria.aransay@unirioja.es</a>&gt;<br>\nHi Andreas,</p>\n<p>thanks for your hint; I tried to be as exhaustive as I could with type<br>\nannotations, but the problem still persists;</p>\n<p>instantiation bit0 :: (finite) enum<br>\nbegin</p>\n<p>definition \"(enum::'a bit0 list) = ([]::'a bit0 list)\"</p>\n<p>definition \"enum_all P = (filter P ([]::'a bit0 list) = [])\"</p>\n<p>definition \"enum_ex P = (filter P enum ≠ [])\"</p>\n<p>thm enum_def (*This theorem refers to a constant named \"local.enum\"; I<br>\nguess this should not be the case*)<br>\nthm enum_bit0_def (*This theorem does not even exist in the context;<br>\nthe same happens with enum_all and enum_ex*)</p>\n<p>instance<br>\nproof (default)<br>\nshow \"(UNIV::'a bit0 set) = set enum\" (*This show fails because enum<br>\nmakes reference to \"local.enum\"*)</p>\n<p>Thanks for any other suggestions,</p>\n<p>Jesus</p>",
        "id": 294230581,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660902284
    },
    {
        "content": "<p>From: Andreas Lochbihler &lt;<a href=\"mailto:andreas.lochbihler@inf.ethz.ch\">andreas.lochbihler@inf.ethz.ch</a>&gt;<br>\nHi Jesus,</p>\n<p>you are right, type inference is not the main problem here. The issue is <br>\nthat at the end of Enum.thy, unqualified access for enum, enum_all and <br>\nenum_ex is disabled. So you have to use the names enum_class.enum, etc.; <br>\nfor the declarations in Enum.thy, the short names naturally work.</p>\n<p>definition \"enum_class.enum = ([] :: 'a bit0 list)\"<br>\ndefinition \"enum_class.enum_all P = (filter P ([]::'a bit0 list) = [])\"<br>\ndefinition \"enum_class.enum_ex P = (filter P enum_class.enum ≠ ([] :: 'a <br>\nbit0 list))\"</p>\n<p>Best,<br>\nAndreas</p>",
        "id": 294230591,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660902290
    }
]