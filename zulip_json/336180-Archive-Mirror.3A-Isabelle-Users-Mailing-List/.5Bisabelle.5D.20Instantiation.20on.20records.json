[
    {
        "content": "<p>From: René Neumann &lt;<a href=\"mailto:rene.neumann@in.tum.de\">rene.neumann@in.tum.de</a>&gt;<br>\nDear all,</p>\n<p>I'm currently struggeling with making record-types an instance of some<br>\nclass. I can't find a way of getting hold of the underlying type:</p>\n<p>record test =<br>\n  bla :: int</p>\n<p>instantiation \"test\" :: linorder<br>\nbegin -- \"yields: Bad type name\"</p>\n<p>instantiation \"test_scheme\" :: (unit) linorder<br>\nbegin -- \"yields: Bad type name\"</p>\n<p>instantiation \"(| bla :: int |)\" :: linorder<br>\nbegin -- \"yields: Undeclared type constructor\"</p>\n<p>Is it somehow possible to do this? Or should I use explicit 'datatype'<br>\nor tuple constructions instead?</p>\n<p>Thanks,</p>\n<ul>\n<li>René<br>\n<a href=\"/user_uploads/14278/Ktndw0qFxn1vXhxpwBFwNQOI/smime.p7s\">smime.p7s</a></li>\n</ul>",
        "id": 294255289,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660912355
    },
    {
        "content": "<p>From: Peter Gammie &lt;<a href=\"mailto:peteg42@gmail.com\">peteg42@gmail.com</a>&gt;<br>\nRené,</p>\n<p>You want \"test_ext\". Note it has an extra type parameter to deal with record extension - so you'll need to assume that the extra bit has a linorder constraint (untested):</p>\n<p>instantiation \"test_ext\" :: (linorder) linorder<br>\nbegin<br>\n...</p>\n<p>I don't know if it's described anywhere more recently, but the old tutorial did a good job on records.</p>\n<p>I guess the other way to figure this sort of thing out is to grep through the AFP (which is what I just did).</p>\n<p>cheers<br>\npeter</p>",
        "id": 294255350,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660912381
    },
    {
        "content": "<p>From: Andreas Lochbihler &lt;<a href=\"mailto:andreas.lochbihler@inf.ethz.ch\">andreas.lochbihler@inf.ethz.ch</a>&gt;<br>\nHi René and Peter,</p>\n<p>For records and linorder, you will also have to make unit an instance of linorder (see the <br>\ndiscussion in the following thread from October:<br>\n<a href=\"https://lists.cam.ac.uk/mailman/htdig/cl-isabelle-users/2013-October/msg00221.html\">https://lists.cam.ac.uk/mailman/htdig/cl-isabelle-users/2013-October/msg00221.html</a>).</p>\n<p>Best,<br>\nAndreas</p>",
        "id": 294255359,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660912384
    },
    {
        "content": "<p>From: René Neumann &lt;<a href=\"mailto:rene.neumann@in.tum.de\">rene.neumann@in.tum.de</a>&gt;<br>\nAm 18.11.2013 12:35, schrieb Peter Gammie:</p>\n<blockquote>\n<p>René,</p>\n<p>On 18/11/2013, at 10:28 PM, René Neumann wrote:</p>\n<blockquote>\n<p>record test =<br>\n bla :: int</p>\n<p>instantiation \"test\" :: linorder<br>\nbegin -- \"yields: Bad type name\"</p>\n<p>instantiation \"test_scheme\" :: (unit) linorder<br>\nbegin -- \"yields: Bad type name\"</p>\n<p>instantiation \"(| bla :: int |)\" :: linorder<br>\nbegin -- \"yields: Undeclared type constructor\"</p>\n</blockquote>\n<p>You want \"test_ext\". Note it has an extra type parameter to deal with record extension - so you'll need to assume that the extra bit has a linorder constraint (untested):</p>\n<p>instantiation \"test_ext\" :: (linorder) linorder<br>\nbegin<br>\n...</p>\n</blockquote>\n<p>Ah, of course. Thank you!</p>\n<blockquote>\n<p>I don't know if it's described anywhere more recently, but the old tutorial did a good job on records.</p>\n<p>I guess the other way to figure this sort of thing out is to grep through the AFP (which is what I just did).</p>\n</blockquote>\n<p>Good point. Should've done this.</p>\n<ul>\n<li>René<br>\n<a href=\"/user_uploads/14278/VQLBjI-Y8l6KfuRxWL48hPmX/smime.p7s\">smime.p7s</a></li>\n</ul>",
        "id": 294255372,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660912391
    }
]