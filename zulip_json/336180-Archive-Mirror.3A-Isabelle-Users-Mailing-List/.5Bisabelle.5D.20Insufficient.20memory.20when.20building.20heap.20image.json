[
    {
        "content": "<p>From: Manuel Eberl &lt;<a href=\"mailto:eberlm@in.tum.de\">eberlm@in.tum.de</a>&gt;<br>\nHallo,</p>\n<p>I tried to build a heap image with \"isabelle usedir\", and the programme<br>\ncompleted - apparently successfully - but the heap image was nowhere to<br>\nbe found. I then looked at the log file in the ~/.isabelle/ directory<br>\nand it turns out PolyML threw an \"Insufficient Memory\" exception and died.</p>\n<p>Would it be possible to have Isabelle display an error message in these<br>\ncases so that the user knows something went wrong?</p>\n<p>Also, if I load all these theories by hand by importing them in a theory<br>\nand loading that theory in Proof General, everything seems to work, but<br>\nwhen I do \"isabelle usedir\" with an appropriate ROOT.ML file, I get this<br>\ninsufficient memory exception. The reason for that is that, apparently,<br>\n\"Isabelle usedir\" uses up to 6.5 GiB of memory (tested on a 64 bit<br>\nsystem), but the computer with which I normally work runs a 32 bit<br>\nsystem, so I only have 4 GiB per process.</p>\n<p>What is the reason for this huge memory usage compared to the more<br>\nmoderate requirements of loading the theories with Proof General? Is<br>\nthere some workaround to build this heap image on a 32 bit system?</p>\n<p>Cheers,<br>\nManuel</p>",
        "id": 294222993,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660898517
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nOn Fri, 28 Sep 2012, Manuel Eberl wrote:</p>\n<blockquote>\n<p>Also, if I load all these theories by hand by importing them in a theory <br>\nand loading that theory in Proof General, everything seems to work, but <br>\nwhen I do \"isabelle usedir\" with an appropriate ROOT.ML file, I get this <br>\ninsufficient memory exception.</p>\n</blockquote>\n<p>Traditionally, Proof General runs things with slightly different options, <br>\nsuch as quick_and_dirty and reduced parallel proof checking, so there can <br>\nbe easily a difference to batch mode.</p>\n<p>I am trying hard not to repeat these mistakes and consequent confusion in <br>\nthe current interactive document model, the one that is used for <br>\nIsabelle/jEdit.  So after a few more rounds of refinements, and when Proof <br>\nGeneral is forgotten, such issues should no longer occur.</p>\n<blockquote>\n<p>The reason for that is that, apparently, \"Isabelle usedir\" uses up to <br>\n6.5 GiB of memory (tested on a 64 bit system), but the computer with <br>\nwhich I normally work runs a 32 bit system, so I only have 4 GiB per <br>\nprocess.</p>\n</blockquote>\n<p>You need to find out where the resources are going, i.e. which part of <br>\nyour application burns them.  You may try this in plain \"isabelle tty\" <br>\nwhich is a bit closer to batch mode than the Proof General interaction <br>\nmode.</p>\n<p>Alternatively, you can ignore the problem and use current polyml-5.5.0 <br>\nfrom here: <a href=\"http://isabelle.in.tum.de/components/polyml-5.5.0.tar.gz\">http://isabelle.in.tum.de/components/polyml-5.5.0.tar.gz</a></p>\n<p>This is the brand-new Poly/ML release, with greatly improved heap <br>\nmanagement (parallel garbage collection and online sharing of values).<br>\nIt is able to run much larger Isabelle applications even in 32bit mode.</p>\n<p>To use the above polyml-5.5.0 component in Isabelle2012, add something <br>\nlike this to your $ISABELLE_HOME_USER/etc/settings:</p>\n<p>ML_SYSTEM=polyml-5.5.0<br>\n   ML_PLATFORM=\"$ISABELLE_PLATFORM\"<br>\n   ML_HOME=\"/some/where/polyml-5.5.0/$ML_PLATFORM\"<br>\n   ML_OPTIONS=\"-H 500\"<br>\n   ML_SOURCES=\"$ML_HOME/../src\"</p>\n<p>Then rebuild the required images as usual via Isabelle2012/build.</p>\n<p>Makarius</p>",
        "id": 294223039,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660898523
    },
    {
        "content": "<p>From: Manuel Eberl &lt;<a href=\"mailto:eberlm@in.tum.de\">eberlm@in.tum.de</a>&gt;<br>\nHallo,</p>\n<p>thanks for the quick reply, I should probably give the new PolyML a try<br>\nthen.</p>\n<p>However, I do not quite understand what you mean with this:</p>",
        "id": 294223048,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660898529
    },
    {
        "content": "<p>From: Jasmin Blanchette &lt;<a href=\"mailto:jasmin.blanchette@gmail.com\">jasmin.blanchette@gmail.com</a>&gt;<br>\nI think Makarius just means that it's generally a bad idea to have two modes, because it's more likely that at least one of them will break.</p>\n<p>I don't know for the other options, but \"quick and dirty\" is certainly not a good idea in general, as illustrated recently on this mailing list by Brian Huffman, who derived \"False\" by exploiting a bug in the \"datatype\" package. Then you're thankful that your command-line-based nightly tests have it disabled.</p>\n<p>Jasmin</p>",
        "id": 294223058,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660898535
    },
    {
        "content": "<p>From: Manuel Eberl &lt;<a href=\"mailto:eberlm@in.tum.de\">eberlm@in.tum.de</a>&gt;<br>\nBrilliant, worked like a charm. Thanks a lot!</p>",
        "id": 294223089,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660898554
    },
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\nAm 28/09/2012 17:26, schrieb Jasmin Blanchette:</p>\n<blockquote>\n<p>Am 28.09.2012 um 16:54 schrieb Manuel Eberl:</p>\n<blockquote>\n<p>In my case, loading everything in Proof General works, loading<br>\neverything in batch mode does not work. Based on that, I would argue<br>\nthat whatever options Proof General does run things with are a good<br>\nidea, not a mistake. Therefore, I cannot quite follow your reasoning here.</p>\n</blockquote>\n<p>I think Makarius just means that it's generally a bad idea to have two modes, because it's more likely that at least one of them will break.</p>\n<p>I don't know for the other options, but \"quick and dirty\" is certainly not a good idea in general, as illustrated recently on this mailing list by Brian Huffman, who derived \"False\" by exploiting a bug in the \"datatype\" package.</p>\n</blockquote>\n<p>I beg to differ. It has saved users countless hours waiting for packages to<br>\nperform long routine proofs. So it certainly was of great benefit at the time.<br>\nAnd if you think green IT...</p>\n<blockquote>\n<p>Then you're thankful that your command-line-based nightly tests have it disabled.</p>\n</blockquote>\n<p>Anything else would be throwing the baby out with the bath water.</p>\n<p>Tobias</p>\n<blockquote>\n<p>Jasmin<br>\n</p>\n</blockquote>",
        "id": 294224239,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660899128
    },
    {
        "content": "<p>From: Jasmin Blanchette &lt;<a href=\"mailto:jasmin.blanchette@gmail.com\">jasmin.blanchette@gmail.com</a>&gt;<br>\nAm 01.10.2012 um 05:33 schrieb Tobias Nipkow:</p>\n<blockquote>\n<p>Am 28/09/2012 17:26, schrieb Jasmin Blanchette:</p>\n<blockquote>\n<p>I don't know for the other options, but \"quick and dirty\" is certainly not a good idea in general, as illustrated recently on this mailing list by Brian Huffman, who derived \"False\" by exploiting a bug in the \"datatype\" package.</p>\n</blockquote>\n<p>I beg to differ. It has saved users countless hours waiting for packages to<br>\nperform long routine proofs. So it certainly was of great benefit at the time.<br>\nAnd if you think green IT...</p>\n</blockquote>\n<p>By \"in general\", I meant \"as the default for both interactive and noninteractive\". (Remember: Manuel was suggesting making the PG defaults the defaults for command-line.) I'm a big fan of quick-and-dirty for the interactive mode myself, as can be seen from the source code of the new (co)datatype package (grep quick_and_dirty ~/isabelle/src/HOL/BNF/Tools/*ML).</p>\n<p>When it comes to having one vs. two modes, my comment was meant as a general programming guideline, not an actual opinion of mine on this specific case:</p>\n<blockquote>\n<p>I think Makarius just means that it's generally a bad idea to have two modes, because it's more likely that at least one of them will break.</p>\n</blockquote>\n<p>It's just one of many usually conflicting criteria that must be considered when developing software.</p>\n<p>Jasmin</p>",
        "id": 294224785,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660899413
    },
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\nAm 01/10/2012 10:25, schrieb Jasmin Blanchette:</p>\n<blockquote>\n<p>Am 01.10.2012 um 05:33 schrieb Tobias Nipkow:</p>\n<p>Am 28/09/2012 17:26, schrieb Jasmin Blanchette:</p>\n<blockquote>\n<blockquote>\n<p>I don't know for the other options, but \"quick and dirty\" is certainly not a good idea in general, as illustrated recently on this mailing list by Brian Huffman, who derived \"False\" by exploiting a bug in the \"datatype\" package.</p>\n</blockquote>\n<p>I beg to differ. It has saved users countless hours waiting for packages to<br>\nperform long routine proofs. So it certainly was of great benefit at the time.<br>\nAnd if you think green IT...</p>\n</blockquote>\n<p>By \"in general\", I meant \"as the default for both interactive and noninteractive\". (Remember: Manuel was suggesting making the PG defaults the defaults for command-line.) I'm a big fan of quick-and-dirty for the interactive mode myself, as can be seen from the source code of the new (co)datatype package (grep quick_and_dirty ~/isabelle/src/HOL/BNF/Tools/*ML).</p>\n</blockquote>\n<p>Sorry, I misunderstood you. Then we are in violent agreement ;-)</p>\n<p>Tobias</p>\n<blockquote>\n<p>When it comes to having one vs. two modes, my comment was meant as a general programming guideline, not an actual opinion of mine on this specific case:</p>\n<blockquote>\n<p>I think Makarius just means that it's generally a bad idea to have two modes, because it's more likely that at least one of them will break.</p>\n</blockquote>\n<p>It's just one of many usually conflicting criteria that must be considered when developing software.</p>\n<p>Jasmin<br>\n</p>\n</blockquote>",
        "id": 294224949,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660899484
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nHaving \"modes\", i.e. opportunities for slightly changed behaviour is <br>\nindeed evil in its own right.  In the end the possibilities of every <br>\nsystem component that might change its behaviour are multiplied, so you <br>\nget an exponential number of oddities in the worst case.</p>\n<p>The traditional \"interactive mode\" vs. \"batch mode\" has accumulated quite <br>\na few such oddities over time, and it will take a few more years to chop <br>\noff most of the heads of the hydra.</p>\n<p>Quick and dirty mode is a well-known special case of this principle, and <br>\nProof General has depended on it a lot, and will continue to do so, <br>\nbecause it is not moving anymore.</p>\n<p>These things need to be understood from their historic context and <br>\ntechnical side-condutions. In the next Isabelle release, the regular <br>\nIsabelle/jEdit interaction mode will already work smoothly without quick <br>\nand dirty, because proofs are parallel by default, and not so expensive <br>\nafter all in the overall bilance.</p>\n<p>At some later stage the competiting \"skip_proofs\" feature should be <br>\nsomehow integrated into the parallel interaction model, lets say as forked <br>\nproofs that are deferred for much longer, or indefinitely.</p>\n<p>Makarius</p>",
        "id": 294225077,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660899547
    }
]