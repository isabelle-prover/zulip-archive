[
    {
        "content": "<p>From: \"John F. Hughes\" &lt;<a href=\"mailto:jfh@cs.brown.edu\">jfh@cs.brown.edu</a>&gt;<br>\nI'm trying to prove a small result in synthetic projective geometry,<br>\nnamely, that a projective plane contains at least four points. I've worked<br>\nmy way through many stages of the proof, and arrived at a state where the<br>\n\"State\" panel in Isabelle shows this:</p>\n<p>proof (state)<br>\nthis:<br>\n  ∃P Q R S.<br>\n     P ≠ Q ∧<br>\n     P ≠ R ∧<br>\n     Q ≠ R ∧<br>\n     P ≠ S ∧ Q ≠ S ∧ R ≠ S</p>\n<p>goal (1 subgoal):</p>\n<ol>\n<li>∃P Q R S.<br>\n       P ≠ Q ∧<br>\n       P ≠ R ∧<br>\n       Q ≠ R ∧<br>\n       P ≠ S ∧<br>\n       Q ≠ S ∧ R ≠ S</li>\n</ol>\n<p>Aside from the numbering (\"1.\") and a line break, these appear to me to be<br>\nidentical, so I would have expected to be able to say something like \"hence<br>\n?thesis by ...\", where the ellipsis would be filled in with, well, some<br>\nproof method. In my mind, I'm thinking the proof method should be \"any fool<br>\ncan see this!\", but I don't think that's one of the available ones. \"try0\"<br>\nsuggests \"by blast\", so I add \"by blast\", and everything seems OK, but<br>\nafter that line, the proof state looks exactly the same as before, and<br>\ntyping \"qed\" tells me that I failed to finish the proof (with one subgoal<br>\nremaining).</p>\n<p>I have no doubt that I'm doing something wrong, but what I'm wondering is<br>\nhow am I supposed to interpret the feedback I'm getting., I've got a state<br>\nthat looks promising; the proof assistant suggests a step...and I end up at<br>\nexactly the same state. At this point \"assistant\" is looking like a bit of<br>\na misnomer to me, although I'll doubtless learn otherwise.</p>\n<p>For those who want to see the whole story, in case that's useful in<br>\nanswering my question, here it is:<br>\ntheory Question6<br>\n  imports Main<br>\n  begin</p>\n<p>locale affine_plane_data =<br>\n    fixes meets :: \"'point ⇒ 'line ⇒ bool\"<br>\n  begin</p>\n<p>definition parallel:: \"'line  ⇒ 'line ⇒ bool\" (infix \"||\" 50)<br>\n      where \"l || m ⟷ (l = m ∨ ¬ (∃ P. meets P l  ∧ meets P m))\"</p>\n<p>definition collinear :: \"'point  ⇒ 'point ⇒ 'point ⇒ bool\"<br>\n      where \"collinear A B C ⟷ (∃ l. meets A l ∧ meets B l ∧ meets C l)\"</p>\n<p>end</p>\n<p>locale affine_plane =<br>\n    affine_plane_data meets<br>\n  for meets :: \"'point ⇒ 'line ⇒ bool\" +<br>\n  assumes<br>\n    a1: \"P ≠ Q ⟹ ∃!l. meets P l ∧ meets Q l\" and<br>\n    a2: \"¬ meets P l ⟹ ∃!m. l || m ∧ meets P m\" and<br>\n    a3: \"∃P Q R. P ≠ Q ∧ P ≠ R ∧ Q ≠ R ∧ ¬ collinear P Q R\"</p>\n<p>begin</p>\n<p>(* Every point lies on some line *)<br>\n  lemma containing_line: \" ∀S. ∃l. meets S l\"<br>\n    using a2 by blast</p>\n<p>(* Every line contains at least one point *)<br>\n  lemma contained_point: \"∀l. ∃S. meets S l\"<br>\n    using a1 a2 a3 parallel_def collinear_def by metis</p>\n<p>lemma symmetric_parallel: \"l || m ⟹ m || l\"<br>\n    using parallel_def by auto</p>\n<p>lemma reflexive_parallel: \"l || l\"<br>\n    by (simp add: parallel_def)</p>\n<p>lemma transitive_parallel: \"⟦l || m ;  m || n⟧ ⟹ l || n\"<br>\n    by (metis a2 parallel_def)</p>\n<p>(* Two lines meet in at most one point *)<br>\n  lemma (in affine_plane) prop1H2: \"⟦l ≠ m; meets P l; meets P m; meets Q<br>\nl; meets Q m⟧ ⟹ P = Q\"<br>\n    using a1 by auto</p>\n<p>(* We now try to prove that every affine plane contains at least four<br>\npoints. Sledgehammer<br>\ndoesn't get anywhere with this one. Here's a proof, though:</p>\n<p>i. by A3 there are three distinct non-collinear points; call them P,Q,R.<br>\nii. By A1, there's a line, which I'll call QR, through Q and R.<br>\niii. By A2, there's a line l through P, parallel to QR.<br>\niv. Similarly, there's a line PQ containing P and Q.<br>\nv. There's a line m through R, parallel to the line PQ.</p>\n<p>CASES: l is parallel to m, or it is not.</p>\n<p>vi. l is not parallel to m, for if it were, then PQ || m || l || QR, hence<br>\nPQ || QR (by<br>\nthe lemmas about |⦈ and since both contain Q,  they are identical, but then<br>\nP,Q,R are collinear,<br>\nwhich is a contradiction.</p>\n<p>vii. So l and m are nonparallel, and they share some point S.</p>\n<p>viii. S lies on m, which is parallel to PQ but not equal to it,<br>\nhence disjoint from it (see definition of parallel), so S is not on PQ.</p>\n<p>ix.  Hence S != P, S != Q.</p>\n<p>x. Similar (arguing about l), we get  S != R.</p>\n<p>xi. Hence the four points P,Q,R,S are all distinct, and we are done.<br>\nThe proof below attempts to mimic this structure.<br>\n*)</p>\n<p>proposition four_points: \"∃(P :: 'point) (Q :: 'point) (R :: 'point) (S<br>\n:: 'point). P ≠ Q ∧ P ≠ R ∧ Q ≠ R ∧ P ≠ S ∧ Q ≠ S ∧ R ≠ S\"<br>\n  proof -<br>\n      obtain P Q R where PQR: \"P ≠ Q ∧ P ≠ R ∧ Q ≠ R  ∧ ¬ collinear P Q R\"<br>\n        using a3 by auto</p>\n<p>(* ii. By A1, there's a line, which I'll call QR, through Q and R. *)<br>\n      obtain QR where QR: \"meets Q QR ∧ meets R QR\"<br>\n        using PQR a1 by blast</p>\n<p>(* iii. By A2, there's a line l through P, parallel to QR. *)<br>\n      obtain l where l: \"meets P l ∧ l || QR\"<br>\n        using a2 parallel_def by metis</p>\n<p>(* iv. Similarly to ii, there's a line PQ containing P and Q. *)<br>\n      obtain PQ where PQ: \"meets P PQ ∧ meets Q PQ\"<br>\n        using PQR a1 by blast</p>\n<p>(* v. and similar to iii, here's a line m through R, parallel to the<br>\nline PQ. *)</p>\n<p>obtain m where m: \"meets R m ∧ m || PQ\"<br>\n        using a2 parallel_def by metis</p>\n<p>(* CASES: l is parallel to m, or it is not. *)<br>\n      (*<br>\n         vi. l is not parallel to m, for if it were, then PQ || m || l ||<br>\nQR, hence PQ || QR (by<br>\n         the lemmas about |⦈ and since both contain Q,  they are identical,<br>\nbut then P,Q,R are collinear,<br>\n         which is a contradiction.<br>\n       *)<br>\n      have \"¬ (l || m)\"<br>\n      proof<br>\n        assume 1: \"l || m\"<br>\n        hence \"m || l\"<br>\n          using 1 symmetric_parallel by simp<br>\n        moreover have \"PQ || m ∧ l || QR\"<br>\n          using m l symmetric_parallel by blast<br>\n        ultimately have \"PQ || QR\"<br>\n          using transitive_parallel by blast<br>\n        hence \"PQ = QR ∨ ¬ (∃ H. meets H PQ  ∧ meets H QR)\"<br>\n          by (simp add: parallel_def)<br>\n        have \"meets Q PQ ∧ meets Q QR\"<br>\n          by (simp add: PQ QR)<br>\n        hence \"PQ = QR\"<br>\n          using ‹PQ = QR ∨ (∄H. meets H PQ ∧ meets H QR)› by blast<br>\n        hence c1: \"collinear P Q R\"<br>\n          using PQ QR collinear_def by blast<br>\n        moreover have  c2: \"¬ (collinear P Q R)\"<br>\n          using PQR by blast<br>\n        thus False<br>\n          using PQR calculation by blast<br>\n      qed</p>\n<p>obtain S where S: \"meets S l ∧ meets S m\"<br>\n        using ‹¬ l || m› parallel_def by blast</p>\n<p>have \"¬ meets S PQ\"<br>\n        using PQ PQR S affine_plane_data.collinear_def m parallel_def by<br>\nfastforce<br>\n      hence \"S ≠ P ∧ S ≠ Q\"<br>\n        using PQ by blast<br>\n      have \"¬ meets S QR\"<br>\n        by (metis PQR QR S collinear_def parallel_def l)<br>\n      hence \"S ≠ R\"<br>\n        using QR by auto<br>\n      hence \"P ≠ Q ∧ P ≠ R ∧ Q ≠ R ∧ P ≠ S ∧ Q ≠ S ∧ R ≠ S\"<br>\n        using PQR ‹S ≠ P ∧ S ≠ Q› by blast<br>\n      hence \"∃(P :: 'point) (Q :: 'point) (R :: 'point) (S :: 'point). P ≠<br>\nQ ∧ P ≠ R ∧ Q ≠ R ∧ P ≠ S ∧ Q ≠ S ∧ R ≠ S\"<br>\n        by auto<br>\n      hence ?thesis by simp<br>\n      (* It feels as if the theorem should be proved by now *)<br>\n  qed<br>\nqed</p>",
        "id": 294761128,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661199611
    },
    {
        "content": "<p>From: \"Eugene W. Stark\" &lt;<a href=\"mailto:isabelle-users@starkeffect.com\">isabelle-users@starkeffect.com</a>&gt;<br>\nYou need to use \"thus\" (or \"then show\") if you want the subgoal to be discharged.<br>\n\"Hence\" asserts a fact, but does not discharge any subgoal.</p>\n<p>Lines 152-155 of your Question6.thy should be:</p>",
        "id": 294761136,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661199615
    },
    {
        "content": "<p>From: \"Eugene W. Stark\" &lt;<a href=\"mailto:isabelle-users@starkeffect.com\">isabelle-users@starkeffect.com</a>&gt;<br>\nYou can still get some mileage from sledgehammer, once you got off on the right start:</p>\n<p>(* CASES: l is parallel to m, or it is not. *)<br>\n      (*<br>\n         vi. l is not parallel to m, for if it were, then PQ || m || l ||<br>\nQR, hence PQ || QR (by<br>\n         the lemmas about |⦈ and since both contain Q,  they are identical,<br>\nbut then P,Q,R are collinear,<br>\n         which is a contradiction.<br>\n       *)<br>\n      have \"¬ (l || m)\"<br>\n        by (metis PQ PQR QR a2 affine_plane_data.parallel_def collinear_def l m)</p>\n<p>obtain S where S: \"meets S l ∧ meets S m\"<br>\n        using ‹¬ l || m› parallel_def by blast</p>\n<p>have \"¬ meets S PQ\"<br>\n        using PQ PQR S affine_plane_data.collinear_def m parallel_def by fastforce<br>\n      thus ?thesis<br>\n        by (metis PQ PQR QR S affine_plane_data.collinear_def affine_plane_data.parallel_def l)<br>\n  qed<br>\nend</p>\n<p>Using \"try\" found one of the proofs by \"metis\" directly.</p>\n<p>For the other, an \"smt\" proof was reported, supposedly timing out, but pasting<br>\nin the suggested proof worked OK and changing \"smt\" to \"metis\" also worked OK,<br>\nthough slightly slower.  If you don't want proofs by \"smt\" (the AFP doesn't allow them,<br>\nand they tend to be more fragile in my experience), then it is frequently a cheap win<br>\nto change \"smt\" to \"metis\", \"metis (no_types)\" or \"metis (no_types, lifting)\".</p>\n<p>Of course your original version was more useful to the human reader, but depending<br>\non how interesting the particular fact and its proof was, you might well deem it more<br>\nimportant and maintainable to have a shorter proof text.</p>",
        "id": 294761150,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661199621
    }
]