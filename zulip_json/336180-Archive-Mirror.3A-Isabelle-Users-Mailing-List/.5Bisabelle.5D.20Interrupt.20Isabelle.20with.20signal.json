[
    {
        "content": "<p>From: Florian Funke &lt;<a href=\"mailto:funke@informatik.uni-tuebingen.de\">funke@informatik.uni-tuebingen.de</a>&gt;<br>\nHi all,</p>\n<p>I'm working on a program that starts Isabelle and communicates with the<br>\nIsabelle process (in Isar interaction mode) using its standard output and<br>\ninput stream. Now I'd like to be able to cancel commands I've sent to<br>\nIsabelle (e.g. because their execution doesn't terminate). The<br>\nProofGeneral seems to have this capability and uses<br>\ncomint-interrupt-subjob in the proof-interrupt-process function. But when<br>\nI try to send a SIGINT signal to the isabelle-process, it doesn't have any<br>\nimpact, however sending SIGINT to the poly process that isabelle starts<br>\n(\"poly-driver\") manually, causes Isabelle to cancel the execution of the<br>\ncurrent command (which is what I'm trying to do from within my program).<br>\nThis is a problem, since I do not have a chance to get the process ID of<br>\nthis poly-driver process that Isabelle spawns and therefore cannot send<br>\nsignals to it (I do have Isabelle's PID, of cause). In the Isabelle System<br>\nManual, I couldn't find out if there is a way to send signals to the<br>\nIsabelle process directly, neither how the ProofGeneral deals with this<br>\nproblem.</p>\n<p>-- Florian</p>",
        "id": 294050237,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660819122
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nPeeking at comint.el reveals that emacs signals the whole process group of <br>\nthe controlling pty here.  I've managed to imitate this behaviour in the <br>\nshell using kill with negated PID like this:</p>\n<p>kill -INT -- -4711</p>\n<p>Also note that the Isabelle/Isar toplevel ignores any INT signals unless <br>\nit actually runs a command.  To test kills more easily you may use the raw <br>\nML toplevel, which reports something like ``Compilation interrupted''.</p>\n<p>Makarius</p>",
        "id": 294050262,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660819133
    },
    {
        "content": "<p>From: \"Mark A. Hillebrand\" &lt;<a href=\"mailto:mah@dfki.de\">mah@dfki.de</a>&gt;<br>\nHi Florian,</p>\n<p>I have made the same observation when writing a similar program; I use<br>\nPerl with the <a href=\"http://Expect.pm\">Expect.pm</a> library to remote-control Isabelle. While<br>\nsending SIGINT does not come through to Isabelle (maybe it gets stuck in<br>\nlib/scripts/feeder.pl, but I haven't investigated closely), sending a<br>\ncontrol-C character seems to interrupt the Isabelle process. Here is a<br>\nshort example:</p>\n<p>#!/usr/bin/perl<br>\n    use Expect;</p>\n<p>my $isabelle = Expect-&gt;new();</p>\n<p>$isabelle-&gt;spawn('/usr/local/Isabelle/bin/isabelle', 'HOL' );<br>\n    #$isabelle-&gt;raw_pty(1);</p>\n<p>$isabelle-&gt;log_file(\"log.txt\");<br>\n    #$isabelle-&gt;log_stdout(1);<br>\n    #$isabelle-&gt;exp_internal(1);</p>\n<p>$isabelle-&gt;send(qq(use_thy \"~~/HOL/Library/Word\";\\n));</p>\n<p>sleep 1; # keep loading for a bit<br>\n    $isabelle-&gt;send(\"\\cC\"); # interrupt<br>\n    sleep 1; # wait another bit</p>\n<p>$isabelle-&gt;send(\"quit();\\n\");<br>\n    $isabelle-&gt;soft_close;</p>\n<p>(Be aware that this program doesn't really synchronize with Isabelle<br>\nprompts etc. but it should).</p>\n<p>Hope this helps</p>\n<p>Mark</p>",
        "id": 294050274,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660819140
    }
]