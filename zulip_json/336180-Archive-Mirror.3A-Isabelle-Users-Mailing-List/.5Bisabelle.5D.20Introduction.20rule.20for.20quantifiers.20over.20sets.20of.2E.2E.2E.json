[
    {
        "content": "<p>From: Stephan van Staden &lt;<a href=\"mailto:Stephan.vanStaden@inf.ethz.ch\">Stephan.vanStaden@inf.ethz.ch</a>&gt;<br>\nDear all,</p>\n<p>This one should be simple. I'm looking for the name of the rule that <br>\nwill do the job of RRR below:</p>\n<p>lemma \"\\&lt;forall&gt; (a,b) \\&lt;in&gt; S. P\"<br>\nproof (rule RRR)<br>\n   fix a b<br>\n   assume \"(a,b) \\&lt;in&gt; S\"<br>\n   show \"P\" sorry<br>\nqed</p>\n<p>Thanks in advance!</p>\n<p>Stephan</p>",
        "id": 294228015,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660900964
    },
    {
        "content": "<p>From: Stephan Merz &lt;<a href=\"mailto:Stephan.Merz@loria.fr\">Stephan.Merz@loria.fr</a>&gt;<br>\nThere is not a single rule that would introduce two quantifiers. You can either use rule allI twice (see the Isar combinator \"+\") or use the clarify method.</p>\n<p>Stephan</p>",
        "id": 294228024,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660900970
    },
    {
        "content": "<p>From: Stephan van Staden &lt;<a href=\"mailto:Stephan.vanStaden@inf.ethz.ch\">Stephan.vanStaden@inf.ethz.ch</a>&gt;<br>\nUsing allI twice (or with +) does not work for me, but clarify does the <br>\njob perfectly. Thanks a lot!</p>\n<p>Stephan</p>",
        "id": 294228039,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660900983
    },
    {
        "content": "<p>From: Tjark Weber &lt;<a href=\"mailto:webertj@in.tum.de\">webertj@in.tum.de</a>&gt;<br>\nHi Stephan,</p>\n<p>clarify may do more than you want if S or P are compound terms. Here is<br>\nanother solution:</p>\n<p>lemma RRR:<br>\n assumes \"⋀a b. (a,b) ∈ S ⟹ P\"<br>\n shows \"∀ (a,b) ∈ S. P\"<br>\nby (metis assms splitI2)</p>\n<p>Best regards,<br>\nTjark</p>",
        "id": 294228087,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660901008
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nPutting automated tools like \"clarify\" or \"auto\" in the initial \"proof\" <br>\nposition is actually an anti-pattern of structured proofs.  Sometimes it <br>\ncannot be avoided, but it should not be done by default.</p>\n<p>Instead, the usual way is to make a bottom-up proof with automated <br>\nre-composition like this:</p>\n<p>notepad<br>\nbegin</p>\n<p>have \"∀(a, b) ∈ S. P\"<br>\n   proof -<br>\n     {<br>\n       fix a b<br>\n       assume \"(a, b) ∈ S\"<br>\n       have P sorry<br>\n     }<br>\n     then show ?thesis<br>\n       by auto  -- \"terminal auto, instead of initial clarify etc.\"<br>\n   qed</p>\n<p>end</p>\n<p>This can also cause surprises sometimes, especially with too general <br>\ntypes for the body within { ... }, but it usually works in a reasonably <br>\nrobust way, and does not depend on the details of what automation does.</p>\n<p>Makarius</p>",
        "id": 294228096,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660901013
    },
    {
        "content": "<p>From: Stephan van Staden &lt;<a href=\"mailto:Stephan.vanStaden@inf.ethz.ch\">Stephan.vanStaden@inf.ethz.ch</a>&gt;<br>\nYour solution works for me and is quite readable. Thanks for helping!</p>\n<p>Stephan</p>",
        "id": 294228115,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660901020
    }
]