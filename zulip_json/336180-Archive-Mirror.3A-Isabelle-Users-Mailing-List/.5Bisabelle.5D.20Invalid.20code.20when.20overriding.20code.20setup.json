[
    {
        "content": "<p>From: Lars Hupel &lt;<a href=\"mailto:hupel@in.tum.de\">hupel@in.tum.de</a>&gt;<br>\nDear list,</p>\n<p>the attached theory exhibits two problems with code generation for<br>\ncharacters.</p>\n<p>1) The \"String\" theory introduces \"char\" as a \"typedef\", but omits the<br>\nnecessary rule of three<br>\n(\"setup_lifting\"/\"lifting_update\"/\"lifting_forget\"). However, it's not<br>\njust possible to add it later on, because \"setup_lifting\" itself<br>\nmodifies code setup. This essentially requires reconstructing the<br>\noriginal code setup:</p>\n<p>setup_lifting type_definition_char<br>\nlifting_update char.lifting<br>\nlifting_forget char.lifting</p>\n<p>code_datatype \"0 :: char\" Char</p>\n<p>text ‹This code theorem disappears, for some reason›</p>\n<p>declare nat_of_char_code[code]</p>\n<p>I think the lifting setup should be added to the \"String\" theory. I<br>\ntried doing that, but unfortunately something broke in \"Typerep\" (of<br>\nwhich I have no idea).</p>\n<p>Of course, I think it's reasonable to discuss whether or not to have the<br>\n\"code_datatype\" as above activated by default, instead of moving it into<br>\nHOL-Library.</p>\n<p>2) When importing \"~~/src/HOL/Library/Code_Char\", it seems to be<br>\nimpossible to override the code setup given there. Near the bottom of<br>\nthe attached theory, I declared</p>\n<p>code_datatype char_of_byte</p>\n<p>... together with a couple more things. Then, the exported code for a<br>\nstring literal looks as follows:</p>\n<p>structure Scratch : sig<br>\n  type byte<br>\n  val failing : char list<br>\nend = struct</p>\n<p>datatype byte = Byte of bool * bool * bool * bool * bool * bool * bool *\nbool;</p>\n<p>val failing : char list =<br>\n  [Stringa.Char_of_byte<br>\n     (Byte (true, false, false, false, false, true, true, false))];</p>\n<p>end; (<em>struct Scratch</em>)</p>\n<p>This obviously fails to compile because \"Stringa.Char_of_byte\" is not<br>\nincluded as a constructor for \"char\". I would have expected that a<br>\n\"code_datatype\" statement overrides any previous \"code_printing\" for the<br>\nsame type constructor.</p>\n<p>Cheers<br>\nLars<br>\n<a href=\"/user_uploads/14278/ThYcdqZsbYtnbJXrX7QAmeh6/Scratch.thy\">Scratch.thy</a></p>",
        "id": 294714628,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661183352
    },
    {
        "content": "<p>From: Florian Haftmann &lt;<a href=\"mailto:florian.haftmann@informatik.tu-muenchen.de\">florian.haftmann@informatik.tu-muenchen.de</a>&gt;<br>\nHi Lars,</p>\n<blockquote>\n<p>1) The \"String\" theory introduces \"char\" as a \"typedef\", but omits the<br>\nI think the lifting setup should be added to the \"String\" theory. I<br>\ntried doing that, but unfortunately something broke in \"Typerep\" (of<br>\nwhich I have no idea).</p>\n</blockquote>\n<p>see</p>\n<p><a href=\"http://isabelle.in.tum.de/repos/testboard/rev/f16db95a5a20\">http://isabelle.in.tum.de/repos/testboard/rev/f16db95a5a20</a><br>\n<a href=\"http://isabelle.in.tum.de/repos/testboard/rev/3885322d8f57\">http://isabelle.in.tum.de/repos/testboard/rev/3885322d8f57</a></p>\n<p>(currently in testing)</p>\n<blockquote>\n<p>2) When importing \"~~/src/HOL/Library/Code_Char\", it seems to be<br>\nimpossible to override the code setup given there.</p>\n</blockquote>\n<p>The assumption has always been that importing one of those funny Code_*<br>\ntheories is the last word on a particular code setup.  Maybe localized<br>\ncode declarations can lift that restriction in the future.</p>\n<blockquote>\n<p>I would have expected that a<br>\n\"code_datatype\" statement overrides any previous \"code_printing\" for the<br>\nsame type constructor.</p>\n</blockquote>\n<p>No.  \"code_printing\" is just fiddling with concrete syntax without a<br>\ndeeper semantic notion behind.</p>\n<p>Hope this helps,<br>\n    Florian<br>\n<a href=\"/user_uploads/14278/USCwsPGQBuPTnSxLle6V3kKQ/signature.asc\">signature.asc</a></p>",
        "id": 294715352,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661183591
    }
]