[
    {
        "content": "<p>From: Thomas Sewell &lt;<a href=\"mailto:thomas.sewell@nicta.com.au\">thomas.sewell@nicta.com.au</a>&gt;<br>\nA week or two ago, Makarius asked us the canonical question:<br>\n   \"Are there any remaining uses of Proof General?\"</p>\n<p>I take it Makarius is inquiring whether there are any applications left<br>\nthat <em>require</em> ProofGeneral as opposed to one of the PIDE implementations.</p>\n<p>It happens that earlier in the year, I used ProofGeneral to do some<br>\nsurgery on the \"Fastpath\" proof. This is the largest and worst of the<br>\nproofs about the C code of seL4. At the time I felt that Isabelle/jEdit<br>\nwas unworkable for this task. I investigated this again today.</p>\n<p>I'm now convinced I can do further surgery on this proof using only<br>\nPIDE, although the process is currently slower and more painful than<br>\nusing ProofGeneral.</p>\n<p>Those who are interested in pathological uses of Isabelle can find the<br>\nproof I'm talking about on github <a href=\"https://github.com/seL4/l4v\">https://github.com/seL4/l4v</a> and the<br>\nrelevant file here<br>\n<a href=\"https://github.com/seL4/l4v/blob/master/proof/crefine/Fastpath_C.thy\">https://github.com/seL4/l4v/blob/master/proof/crefine/Fastpath_C.thy</a><br>\nalthough there may be difficulty in building the proof. We're thinking<br>\nabout simplifying the build process in the future.</p>\n<p>It is very important to set the goal print limit to 1. Otherwise too<br>\nmuch CPU is lost attempting to print goals, and Isabelle/jEdit gives at<br>\nleast the impression that it has broken down entirely. Once the goals<br>\nlimit is set to 1, Isabelle/jEdit succeeds in reporting on all points in<br>\nthe proof <em>eventually</em>.</p>\n<p>I also set the goals limit to 1 in ProofGeneral. This was easier,<br>\nfirstly because there is a menu option, and secondly because watching<br>\nthe \"blue region\" makes it clear how much time is lost on printing.</p>\n<p>In Isabelle/jEdit I had to declare [[goals_limit = 1]] explicitly in the<br>\ntext. Unfortunately this requires backing up to a sensible place. After<br>\nsome thought I've added \"using [[goals_limit = 1]]\" permanently to the<br>\ntwo worst proof scripts.</p>\n<p>Is there any particular reason why the goals limit isn't a setting that<br>\ncan be adjusted from a panel or the options in Isabelle/jEdit?</p>\n<p>I also tried the \"parallel_print\" setting which Makarius added when I<br>\nlast brought this up. This does more or less the opposite of what I<br>\nwant. However, like ProofGeneral's blue region, it makes it easy to see<br>\nthe problem. After moving the cursor down rapidly, the window \"greys<br>\nout\" for a while, and then returns to white one line at a time as the<br>\ngoal states print in order. This process might take a minute or so.</p>\n<p>This explains why Isabelle/jEdit seems so slow in these cases: the goal<br>\nstates render in order, while the user waits for output where their<br>\ncursor actually is. In the parallel case the window goes white<br>\nimmediately once the print tasks have forked, from which point there is<br>\nno indication of progress, giving the impression the system has just<br>\ngiven up.</p>\n<p>Ideally I'd like to see some approximation ProofGeneral's behaviour, in<br>\nwhich many commands can be processed and only one goal state rendered.<br>\nYes, my proofs are pathological, full of applications of fast<br>\nmethods/tactics but with large complex goal states. I suspect, however,<br>\nthat I'm not alone.</p>\n<p>Cheers,<br>\n     Thomas.</p>\n<hr>\n<p>The information in this e-mail may be confidential and subject to legal professional privilege and/or copyright. National ICT Australia Limited accepts no liability for any damage caused by this email or its attachments.</p>",
        "id": 294305968,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660924312
    },
    {
        "content": "<p>From: Carst Tankink &lt;<a href=\"mailto:carst.tankink@inria.fr\">carst.tankink@inria.fr</a>&gt;<br>\nOn 09/18/2014 12:25 PM, Thomas Sewell wrote:</p>\n<blockquote>\n<p>This explains why Isabelle/jEdit seems so slow in these cases: the goal<br>\nstates render in order, while the user waits for output where their<br>\ncursor actually is.</p>\n</blockquote>\n<p>I find this a bit curious, as it is my understanding that PIDE's <br>\n\"perspective\" mechanism should actually deliver the output to the user's <br>\ncursor. From Makarius' UITP-2014 paper:</p>\n<p>\"Activation or deactivation of PRINT tasks is subject to the document <br>\nperspective. The whole theory library that is edited might be big, but <br>\nonly small parts are visible in the editor. PIDE document processing <br>\ntakes the open text windows as indication where to invest resources for <br>\ncontinuous processing.\"</p>\n<p>The perspective not only tells the underlying process which windows is <br>\nopen, but also what command spans ('lines') are in view, and in our Coq <br>\nincarnation of PIDE, we use this fact: each individual proof is handled <br>\nby a separate worker process, and the proofs that are in the perspective <br>\nget priority of processing and printing: in our limited practice, we <br>\nhave seen this gives a better feeling of responsiveness of the prover, <br>\nas the output is reported where the user's cursor is, even in <br>\nbigger/slower files.</p>\n<p>Carst</p>\n<p>In the parallel case the window goes white</p>\n<blockquote>\n<p>immediately once the print tasks have forked, from which point there is<br>\nno indication of progress, giving the impression the system has just<br>\ngiven up.</p>\n<p>Ideally I'd like to see some approximation ProofGeneral's behaviour, in<br>\nwhich many commands can be processed and only one goal state rendered.<br>\nYes, my proofs are pathological, full of applications of fast<br>\nmethods/tactics but with large complex goal states. I suspect, however,<br>\nthat I'm not alone.</p>\n<p>Cheers,<br>\n     Thomas.</p>\n<hr>\n<p>The information in this e-mail may be confidential and subject to legal<br>\nprofessional privilege and/or copyright. National ICT Australia Limited<br>\naccepts no liability for any damage caused by this email or its<br>\nattachments.<br>\n</p>\n</blockquote>",
        "id": 294305989,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660924321
    },
    {
        "content": "<p>From: Vadim Zaliva &lt;<a href=\"mailto:vzaliva@cmu.edu\">vzaliva@cmu.edu</a>&gt;<br>\nI just installed Isabelle 2014 and started in a way I was starting previous version:</p>\n<p>/Applications/Isabelle2014.app/Isabelle/bin/isabelle emacs -p /Applications/Aquamacs.app/Contents/MacOS/Aquamacs &amp;</p>\n<p>and I got the error:</p>\n<p>Unknown Isabelle tool: emacs</p>\n<p>Does it mean 2014 version is no longer support emacs/Proof General?</p>\n<p>I am old time Emacs User (20+ years) and for that reason I was preferring Proof General to JEdit.</p>\n<p>Sincerely,<br>\nVadim Zaliva</p>",
        "id": 294307559,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660924815
    },
    {
        "content": "<p>From: Florian Haftmann &lt;<a href=\"mailto:florian.haftmann@informatik.tu-muenchen.de\">florian.haftmann@informatik.tu-muenchen.de</a>&gt;<br>\nHi Vadim,</p>\n<blockquote>\n<p>Does it mean 2014 version is no longer support emacs/Proof General?</p>\n</blockquote>\n<p>indeed, yes.  There might still be some tricks to keep that alive (which<br>\nI anyway do not know about), but in the middle run there will be no<br>\nother way than to use Isabelle/JEdit.</p>\n<p>Cheers,<br>\n    Florian<br>\n<a href=\"/user_uploads/14278/s5kzQr4UJiR-69qwRvSaoh1v/signature.asc\">signature.asc</a></p>",
        "id": 294308070,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660924945
    },
    {
        "content": "<p>From: Ren√© Neumann &lt;<a href=\"mailto:rene.neumann@in.tum.de\">rene.neumann@in.tum.de</a>&gt;<br>\nI'm running Isabelle 2014 with PG here. But setting it up was quite a<br>\nhassle. The important thing I noted was: With Isabelle-dev it's<br>\nsimple, with the releases it is not. Hence I use the setup from the<br>\n-dev version:</p>\n<p>$ cat .isabelle/etc/settings<br>\nif [[ $ISABELLE_HOME = <em>2014</em> ]]; then<br>\n    init_components \"$USER_HOME/.isabelle/contrib\"<br>\n\"$USER_HOME/isabelle/Isabelle-dev/Admin/components/optional\"<br>\nfi<br>\n<a href=\"/user_uploads/14278/oFGJf_DT2RgFSaf9V-xaA29r/smime.p7s\">smime.p7s</a></p>",
        "id": 294308321,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660925010
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nOn Thu, 4 Sep 2014, Vadim Zaliva wrote:</p>\n<blockquote>\n<p>I just installed Isabelle 2014 and started in a way I was starting <br>\nprevious version:</p>\n<p>/Applications/Isabelle2014.app/Isabelle/bin/isabelle emacs -p <br>\n/Applications/Aquamacs.app/Contents/MacOS/Aquamacs &amp;</p>\n<p>and I got the error:</p>\n<p>Unknown Isabelle tool: emacs</p>\n<p>Does it mean 2014 version is no longer support emacs/Proof General?</p>\n</blockquote>\n<p>As a general principle, the Isabelle NEWS file is of prime importance to<br>\ndocument the \"history of user-relevant changes\". It is easily accessible<br>\nin many spots, including the main Isabelle web page. Isabelle/jEdit also<br>\nprovides a minimal \"IDE\" to navigate the NEWS file with some tree<br>\nstructure via SideKick, and hypersearch helps to find relevant keywords.</p>\n<p>Users who want to be up-to-date wrt. the current state-of-the-art of<br>\nIsabelle should study the NEWS file whenever a new release comes out, to<br>\nsee how things are done better in the new version, in contrast to old<br>\nones. At least when there is some unexpected behaviour, the NEWS file<br>\nshould be consulted for explanation. Doing that here yields:</p>\n<p>* Proof General with its traditional helper scripts is now an optional<br>\n   Isabelle component, e.g. see ProofGeneral-4.2-2 from the Isabelle<br>\n   component repository <a href=\"http://isabelle.in.tum.de/components/\">http://isabelle.in.tum.de/components/</a>.  Note that<br>\n   the \"system\" manual provides general explanations about add-on<br>\n   components, especially those that are not bundled with the release.</p>\n<blockquote>\n<p>I am old time Emacs User (20+ years) and for that reason I was <br>\npreferring Proof General to JEdit.</p>\n</blockquote>\n<p>See the \"jedit\" manual for the proper terminology of Isabelle/jEdit as<br>\nstandard application of the PIDE (Prover IDE) framework. It does not<br>\nmake any sense to make a parallel of \"Proof General\" vs. \"jEdit\": jEdit<br>\nis the underlying editor, so it would correspond to Emacs here. The name<br>\nof the integrated application is \"Isabelle/jEdit\", and that is just an<br>\nexample of other Isabelle/PIDE applications, such as Isabelle/Eclipse or<br>\nClide.</p>\n<p>Apart from proper names an concepts, we are back to the canonical<br>\nquestion: Are there any remaining uses of Proof General?</p>\n<p>Just being stuck out of habit over decades is no good reason. The word<br>\n\"reason\" is related \"ratio\" or \"rational\", but sticking blindly to<br>\nhabits is rather irrational. This natural inertia has sucked up a lot of<br>\nresources over the years. It is better to spend resources now to figure<br>\nout how close we are to the final disposal of Isabelle Proof General --<br>\nafter more than 5 years of Isabelle/PIDE development.</p>\n<p>That is a serious topic, but some hard facts need to be put on the<br>\ntable, not just \"I don't want to change habits\".</p>\n<p>Makarius</p>",
        "id": 294308463,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660925042
    },
    {
        "content": "<p>From: Ferdinand Vesely &lt;<a href=\"mailto:csfvesely@swansea.ac.uk\">csfvesely@swansea.ac.uk</a>&gt;<br>\nOn Wed, 10 Sep 2014 12:25:48 +0200<br>\nRen√© Neumann &lt;<a href=\"mailto:rene.neumann@in.tum.de\">rene.neumann@in.tum.de</a>&gt; wrote:</p>\n<blockquote>\n<p>Am 10.09.2014 10:06, schrieb Florian Haftmann:</p>\n<blockquote>\n<p>Hi Vadim,</p>\n<blockquote>\n<p>Does it mean 2014 version is no longer support emacs/Proof<br>\nGeneral?</p>\n</blockquote>\n<p>indeed, yes.  There might still be some tricks to keep that alive<br>\n(which I anyway do not know about), but in the middle run there<br>\nwill be no other way than to use Isabelle/JEdit.</p>\n<p>Cheers, Florian<br>\n</p>\n</blockquote>\n<p>I'm running Isabelle 2014 with PG here. But setting it up was quite a<br>\nhassle. The important thing I noted was: With Isabelle-dev it's<br>\nsimple, with the releases it is not. </p>\n</blockquote>\n<p>I'm using PG with the release version. Now I don't remember all the<br>\ndetails but I've took the ProofGeneral package from<br>\n<a href=\"http://isabelle.in.tum.de/components/\">http://isabelle.in.tum.de/components/</a> and unpacked it inside<br>\nIsabele2014/contrib (I think it can go anywhere as long as you set the<br>\nPROOFGENERAL_HOME environment var). Then I copied the 'emacs' script<br>\nfrom the previous release's 'lib/Tools' folder into the 2014's<br>\n'lib/Tools' folder. I think I've set the PROOFGENERAL_HOME environment<br>\nvariable in my '.bashrc'. Now 'isabelle emacs' works as before.</p>\n<p>The jEdit Prover IDE is great but it's greedy compared to the<br>\nProofGeneral setup.</p>\n<p>Best wishes,<br>\nFerdinand</p>\n<blockquote>\n<p>Hence I use the setup from the<br>\n-dev version:</p>\n<p>$ cat .isabelle/etc/settings<br>\nif [[ $ISABELLE_HOME = <em>2014</em> ]]; then<br>\n    init_components \"$USER_HOME/.isabelle/contrib\"<br>\n\"$USER_HOME/isabelle/Isabelle-dev/Admin/components/optional\"<br>\nfi</p>\n</blockquote>",
        "id": 294308569,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660925074
    },
    {
        "content": "<p>From: Lars Noschinski &lt;<a href=\"mailto:noschinl@in.tum.de\">noschinl@in.tum.de</a>&gt;<br>\nThere is no need to do all this manually. As Makarius mentioned, this is<br>\nprepared as an component and components are documented in the system manual:</p>\n<p>Add the line</p>\n<p>init_component \"$SOME_DIR/ProofGeneral-4.2-2\"</p>\n<p>to your $ISABELLE_HOME_USER/etc/settings file, where $SOME_DIR refers to<br>\nthe directory where you want to store the extension. ($USER_HOME/contrib<br>\nmight be a good value for that, as that is the directory the repository<br>\nversion stores its components by default).</p>\n<p>Then execute</p>\n<p>isabelle components -a</p>\n<p>to automatically install the missing component. Afterwards,</p>\n<p>isabelle emacs</p>\n<p>should give you a Proof General, provided you have an appropriate emacs<br>\ninstallation around.</p>",
        "id": 294308661,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660925104
    },
    {
        "content": "<p>From: Vadim Zaliva &lt;<a href=\"mailto:vzaliva@cmu.edu\">vzaliva@cmu.edu</a>&gt;<br>\nLet me put forward some arguments in defence of Proof General support in Isabelle.</p>\n<p>For the purpose of this discussion the functionality of PIDE such as Proof General as <br>\nwell as Isabelle/Jedit could be broadly split into 3 categories:</p>\n<ol>\n<li>\n<p>Basic functionality - basic editing functionality used in Isabelle mode as well as for other <br>\nmodes. Here you have managing multiple buffers, windows, search, clipboard, completion, etc.</p>\n</li>\n<li>\n<p>Isabelle specific interface. </p>\n</li>\n<li>\n<p>Other functionality of the PIDE which is not strictly speaking is necessary for working with Isabelle.<br>\n For example integration with other languages (ML, LISP, Haskell), spell checker integration, etc.</p>\n</li>\n</ol>\n<p>I have limited experience with #2 but for my purposes both Proof General and Isabelle/JEdit were comparable.<br>\n(Some people might find Jedit/Isabelle asynchronous proving superior to Proof General's sequential mode but I<br>\nlike the control Proof General gives me. One of the reasons is that some of my lemmas take a long time to prove and I do not want to to try prove them until I am ready to do so. For example when I am reorganizing my proofs and moving code around<br>\nI would not want it to rush and try prove things until I am finished.)</p>\n<p>Most importantly in #1 I found jEdit (mind you, not Isabelle/jEdit but jEdit itself) lacking, compared to Emacs.<br>\nA couple of trivial examples: I-search and working with rectangular blocks in copy/paste.</p>\n<p>Finally, although it is not directly related to Isabelle, I think in #3 emacs have much more to offer due to <br>\nthe amount of code written for Emacs over the decades.</p>\n<p>For example I am working with Haskell, LISP code and Isabelle proofs at the same time and now I am forced to run jEdit and Emacs concurrently. Emacs key binding in jEdit are not exactly the same as real Emacs on Mac so I am constantly struggling<br>\nwhen switching between the two. With Proof General I was easily editing all Isabelle, LISP and Haskell from the comfort<br>\nof the same familiar environment.</p>\n<p>Sincerely,<br>\nVadim Zaliva</p>",
        "id": 294308901,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660925172
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nOn Fri, 12 Sep 2014, Vadim Zaliva wrote:</p>\n<blockquote>\n<p>Let me put forward some arguments in defence of Proof General support in <br>\nIsabelle.</p>\n</blockquote>\n<p>In principle this discussion is 5-3 years late.  Already 5 years ago, <br>\nIsabelle/PIDE development has started to become serious, and 3 years ago <br>\nthere was the turning point for practical use of Isabelle/jEdit as the <br>\nmain application of the PIDE framework.</p>\n<p>Hardcore users of Proof General Emacs have chosen to ignore this over a <br>\nlong time. In Isabelle2014 the tiny change to make Proof General <br>\n\"optional\" -- with proper documentation in NEWS and hardly any effort to <br>\nreactivate it based on information from the \"system\" manual -- seems to <br>\nhave the effect that people actually do wake up.</p>\n<blockquote>\n<p>For the purpose of this discussion the functionality of PIDE such as <br>\nProof General as well as Isabelle/Jedit could be broadly split into 3 <br>\ncategories:</p>\n<ol>\n<li>\n<p>Basic functionality - basic editing functionality used in Isabelle<br>\n   mode as well as for other modes. Here you have managing multiple<br>\n   buffers, windows, search, clipboard, completion, etc.</p>\n</li>\n<li>\n<p>Isabelle specific interface.</p>\n</li>\n<li>\n<p>Other functionality of the PIDE which is not strictly speaking is<br>\n   necessary for working with Isabelle.  For example integration with<br>\n   other languages (ML, LISP, Haskell), spell checker integration, etc.</p>\n</li>\n</ol>\n</blockquote>\n<blockquote>\n<p>I have limited experience with #2 but for my purposes both Proof General <br>\nand Isabelle/JEdit were comparable.</p>\n</blockquote>\n<p>This means you did not spend long enough with Isabelle/jEdit, to find out <br>\nwhat it really does (and what not yet).  The \"jedit\" manual in <br>\nIsabelle2014 is once again updated and extended, and now rather long with <br>\nalmost 50 pages.  There is a lot to discover, but long-term Proof General <br>\nusers need to unlearn quite a lot.</p>\n<blockquote>\n<p>Some people might find Jedit/Isabelle asynchronous proving superior to <br>\nProof General's sequential mode but I like the control Proof General <br>\ngives me.</p>\n</blockquote>\n<p>The document-oriented approach with implicit checking is inherent in PIDE.</p>\n<p>If you don't believe in it, you are welcome to start a project to <br>\nimplement a PG-emulation using the official Isabelle protocol function <br>\ninterface (not the old TTY loop, which is already legacy).  This is <br>\npossible in user-space, using the current Isabelle/Scala infrastructure to <br>\nconnect Isabelle to the outside world.</p>\n<blockquote>\n<p>Most importantly in #1 I found jEdit (mind you, not Isabelle/jEdit but <br>\njEdit itself) lacking, compared to Emacs. A couple of trivial examples: <br>\nI-search and working with rectangular blocks in copy/paste.</p>\n</blockquote>\n<p>Both search and blocks work much better in jEdit than in Emacs.  After 15 <br>\nyears of Emacs, I left it behind in 2006, and today I can't live without <br>\njEdit quick-search / hyper-search and various advanced selection modes. <br>\nThe two weeks I had invested in 2006 to unlearn Emacs key bindings and <br>\nlearn a few jEdit tricks have paid off.</p>\n<p>The general qualities of jEdit also convinced me in 2006/2007 to make it <br>\nthe basis for the main example application of PIDE.</p>\n<p>This does not mean all PIDE applications need to work with jEdit. <br>\nIsabelle/Eclipse and Clide have already been mentioned, and will hopefully <br>\nbe updated soon to Isabelle2014.</p>\n<blockquote>\n<p>Finally, although it is not directly related to Isabelle, I think in #3 <br>\nemacs have much more to offer due to the amount of code written for <br>\nEmacs over the decades.</p>\n</blockquote>\n<p>This can be accounted both on the positive and negative side.  Tons of <br>\nexisting material in Emacs makes it slow to move anywhere.  Most of the <br>\nmaterial is actually obsolete.</p>\n<p>In contrast, jEdit has many useful plugins, while many things are missing, <br>\nbut it is easy to improve on that.  I have done quite something for <br>\nIsabelle/jEdit -- the \"Isabelle\" plugin has become a large assembly of <br>\nmodules to augment jEdit in many ways, both specifically and <br>\nnon-specifically to Isabelle.</p>\n<p>jEdit is somewhere in the middle in project size and complexity, e.g. <br>\ncompared to Emacs or Eclipse, and it is relatively easy to move it <br>\nonwards, with a little bit of enthusiam and energy.</p>\n<blockquote>\n<p>For example I am working with Haskell, LISP code and Isabelle proofs at <br>\nthe same time and now I am forced to run jEdit and Emacs concurrently. <br>\nEmacs key binding in jEdit are not exactly the same as real Emacs on Mac <br>\nso I am constantly struggling when switching between the two. With Proof <br>\nGeneral I was easily editing all Isabelle, LISP and Haskell from the <br>\ncomfort of the same familiar environment.</p>\n</blockquote>\n<p>With \"familiar environment\" we are back to \"I don't want to change <br>\nhabits\".</p>\n<p>I don't see why an Isabelle front-end should specifically support Emacs, <br>\napart from accidental side-conditions from the past.  Why not vi instead? <br>\nThe old debate of Emacs vs. vi has long been settled in favour of vi <br>\nanyway.</p>\n<p>Makarius</p>",
        "id": 294308941,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660925184
    },
    {
        "content": "<p>From: Lars Noschinski &lt;<a href=\"mailto:noschinl@in.tum.de\">noschinl@in.tum.de</a>&gt;<br>\nIncremental search in jEdit is by default to \"Alt+,\"; rectangular<br>\nselection can be toggled by \"Alt+#\".</p>",
        "id": 294308950,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660925190
    }
]