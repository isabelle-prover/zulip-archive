[
    {
        "content": "<p>From: Steve W &lt;<a href=\"mailto:s.wong.731@gmail.com\">s.wong.731@gmail.com</a>&gt;<br>\nHi all,</p>\n<p>I'm reading the Isabelle Cookbook and trying some of the examples provided.<br>\nThere's something I don't quite understand: I'm looking at the June 8, 2010<br>\nversion and on page 22, there's an example on implementing a custom<br>\nantiquotation:</p>\n<p>\"let<br>\nval parser = Args.context</p>\n<p>fun term_pat (ctxt, str) =<br>\n...</p>\n<p>end\"</p>\n<p>Then there's an example on calling this antiquotation:</p>\n<p>@{term_pat \"Suc (?x::nat)\"}</p>\n<p>Since term_pat takes two arguments ctxt and str, how come the antiquotation<br>\n@{term_pat \"Suc (?x::nat)\"} only has one argument?</p>\n<p>Thanks for the help.</p>\n<p>Steve</p>",
        "id": 294117345,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660838680
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nThe context is implicit here.  The ML compilation takes place in a certain <br>\nIsar text, and the formal context (at compile time) is derived from that <br>\nposition.</p>\n<p>Makarius</p>",
        "id": 294117427,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660838705
    },
    {
        "content": "<p>From: Steve W &lt;<a href=\"mailto:s.wong.731@gmail.com\">s.wong.731@gmail.com</a>&gt;<br>\nOn Mon, Sep 13, 2010 at 7:32 PM, Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt; wrote:</p>\n<blockquote>\n<p>On Mon, 13 Sep 2010, Steve W wrote:</p>\n<p>there's an example on implementing a custom antiquotation:</p>\n<blockquote>\n<p>\"let<br>\nval parser = Args.context</p>\n<p>fun term_pat (ctxt, str) =<br>\n...</p>\n<p>end\"</p>\n<p>Then there's an example on calling this antiquotation:</p>\n<p>@{term_pat \"Suc (?x::nat)\"}</p>\n<p>Since term_pat takes two arguments ctxt and str, how come the<br>\nantiquotation<br>\n@{term_pat \"Suc (?x::nat)\"} only has one argument?<br>\n</p>\n</blockquote>\n<p>The context is implicit here.  The ML compilation takes place in a certain<br>\nIsar text, and the formal context (at compile time) is derived from that<br>\nposition.</p>\n<p>I see. Even if the context is implicit, does the position of the argument<br>\n'str' not matter? 'str' is the second argument of term_pat, but \"Suc<br>\n(?x::nat)\" is in the first position in @{term_pat \"Suc (?x::nat)\"}.</p>\n</blockquote>\n<p>Thanks</p>\n<blockquote>\n<p>Makarius<br>\n</p>\n</blockquote>",
        "id": 294117453,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660838711
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nI do not really understand the question.  The parser for the antiquotation <br>\nis defined like this:</p>\n<p>val parser = Args.context -- Scan.lift Args.name_source</p>\n<p>This means it produces a pair (ctxt, str) in exactly that way.  The <br>\ncontext for Args.context is provided by the infrastructure -- these <br>\nparsers are context-sensitive.</p>\n<p>Makarius</p>",
        "id": 294117566,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660838742
    },
    {
        "content": "<p>From: Steve W &lt;<a href=\"mailto:s.wong.731@gmail.com\">s.wong.731@gmail.com</a>&gt;<br>\nOn Tue, Sep 14, 2010 at 1:17 PM, Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt; wrote:</p>\n<blockquote>\n<p>On Mon, 13 Sep 2010, Steve W wrote:</p>\n<p>\"let</p>\n<blockquote>\n<blockquote>\n<blockquote>\n<p>val parser = Args.context</p>\n<p>fun term_pat (ctxt, str) =<br>\n...</p>\n<p>end\"</p>\n<p>Then there's an example on calling this antiquotation:</p>\n<p>@{term_pat \"Suc (?x::nat)\"}</p>\n<p>Since term_pat takes two arguments ctxt and str, how come the<br>\nantiquotation<br>\n@{term_pat \"Suc (?x::nat)\"} only has one argument?</p>\n<p>The context is implicit here.  The ML compilation takes place in a<br>\ncertain<br>\nIsar text, and the formal context (at compile time) is derived from that<br>\nposition.</p>\n</blockquote>\n<p>I see. Even if the context is implicit, does the position of the<br>\nargument 'str' not matter? 'str' is the second argument of term_pat, but<br>\n\"Suc (?x::nat)\" is in the first position in @{term_pat \"Suc (?x::nat)\"}.<br>\n</p>\n</blockquote>\n</blockquote>\n<p>I do not really understand the question.  The parser for the antiquotation<br>\nis defined like this:</p>\n<p>val parser = Args.context -- Scan.lift Args.name_source</p>\n<p>This means it produces a pair (ctxt, str) in exactly that way.  The context<br>\nfor Args.context is provided by the infrastructure -- these parsers are<br>\ncontext-sensitive.</p>\n<p>I see. Could you tell me where '--' and the '&gt;&gt;' infix operators are<br>\nimplemented?</p>\n</blockquote>\n<p>Thanks<br>\nSteve</p>\n<blockquote>\n<p>Makarius<br>\n</p>\n</blockquote>",
        "id": 294117850,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660838821
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nMost of this is in src/Pure/General/scan.ML -- the only non-conventional <br>\nextension of well-established ideas of combinator parsing is support for <br>\npotentially infinite input.</p>\n<p>Many textbooks on functional programming explain the general idea, e.g. <br>\nLarry's ML book.  In the end only some notational details differ, i.e. the <br>\nnames of the usual cominators, such as \"--\" for pairing and \"&gt;&gt;\" for <br>\nmapping of results.</p>\n<p>Makarius</p>",
        "id": 294117870,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660838828
    },
    {
        "content": "<p>From: Christian Urban &lt;<a href=\"mailto:urbanc@in.tum.de\">urbanc@in.tum.de</a>&gt;<br>\nMakarius writes:</p>\n<blockquote>\n<p>On Wed, 15 Sep 2010, Steve W wrote:</p>\n<blockquote>\n<p>Could you tell me where '--' and the '&gt;&gt;' infix operators are <br>\nimplemented?</p>\n</blockquote>\n<p>Most of this is in src/Pure/General/scan.ML -- the only non-conventional <br>\nextension of well-established ideas of combinator parsing is support for <br>\npotentially infinite input.</p>\n<p>Many textbooks on functional programming explain the general idea, e.g. <br>\nLarry's ML book.  In the end only some notational details differ, i.e. the <br>\nnames of the usual cominators, such as \"--\" for pairing and \"&gt;&gt;\" for <br>\nmapping of results.</p>\n</blockquote>\n<p>Hi Steve,</p>\n<p>These combinators are also explained with examples in the<br>\nparsing chapter of the Isabelle programming tutorial.</p>\n<p>Hope this helps,<br>\nChristian</p>",
        "id": 294117886,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660838834
    }
]