[
    {
        "content": "<p>From: Dominik Luecke &lt;<a href=\"mailto:luecke@informatik.uni-bremen.de\">luecke@informatik.uni-bremen.de</a>&gt;<br>\nHello,</p>\n<p>thanks for all the answers to my last question. Now I have made up an<br>\nML-tactic to address my problem, that looks tail-recursive, but I<br>\nmanaged to run into the problem that after about 25k subgoals of a proof<br>\nwith more than 50k subgoals Isabelle gets very slow and needs about<br>\n1.2Gb of RAM. It gets that slow that it needs about 10mins to solve a<br>\nsubgoal that can be solved in 10secs if you copy it out of the context<br>\nand solve it alone. Is there a way to minimize Isabelle's bookkeeping<br>\nduring a proof even further? I mean all subgoals of a proof are somehow<br>\nindependent from each other as are the theorems. I will probably not use<br>\na theorem to prove another one, so all I am interested in is the fact<br>\nthat Isabelle can prove all subgoals of a goals and not more. I am not<br>\nreally interested in a proof tree, since it will be far too big to<br>\ninspect, I rather log the subgoals to a file, so that one can inspect<br>\nthem and verify their proofs. </p>\n<p>Maybe the tactic has some kind of \"memory leak\", I can post it here if<br>\nyou want to analyze it, but it is a little lengthy. </p>\n<p>Regards, <br>\n Dominik</p>",
        "id": 294051044,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660819485
    }
]