[
    {
        "content": "<p>From: Jesper Bengtson &lt;<a href=\"mailto:jesperb@it.uu.se\">jesperb@it.uu.se</a>&gt;<br>\nGreetings all.</p>\n<p>I am currently trying to typeset my thesis with the very nice latex  <br>\ngeneration capabilities that Isabelle provides. I have a few questions.</p>\n<p>Firstly, when printing proofs, Isabelle does a very nice job of  <br>\ntypesetting the keywords and indentations of the proof scripts, but  <br>\nthe actual object logic terms keep their x-symbol syntax and not the  <br>\nnice latex sugar that I have defined for them. Is there any flag to  <br>\nset which would translate them in the same manner as is done when  <br>\nusing the @{term...} antiquotation?</p>\n<p>Secondly, I have some very large induction rules which I would like to  <br>\npresent and every case of these rules have all of their parameters  <br>\nmeta-quantified. Is there a mode which removes the actual meta- <br>\nquantification? It takes up a lot of space, and the absence of the  <br>\nquantifiers can be explained in figure captions in stead. What I would  <br>\nlike to do is an equivalent of @{thm_style [mode=Rule] premxx  <br>\nmyInductionRule}, but without the preceeding /\\x y z ... . I'm  <br>\nguessing either a new style or mode is required.</p>\n<p>I have been reading through the reference manual, but not found a way  <br>\nto do these things although I'm sure at least the second one is  <br>\npossible.</p>\n<p>Many thanks.</p>\n<p>/Jesper</p>",
        "id": 294079960,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660830315
    },
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\nYou can add your own styles for printing terms or theorems. Add the<br>\nfollowing to your theory. It declares your own styles \"no_all_prem1\" and<br>\n\"no_all_prem2\" - you can add more if you like.</p>\n<p>setup {*<br>\nlet</p>\n<p>fun strip_assums_all (params, Const(\"all\",_)$Abs(a,T,t)) =<br>\n      strip_assums_all ((a,T)::params, t)<br>\n  | strip_assums_all (params, B) = (params, B);</p>\n<p>fun style_parm_premise i ctxt t =<br>\n  let val prems = Logic.strip_imp_prems t in<br>\n    if i &lt;= length prems<br>\n    then let val (params,t) = strip_assums_all([], nth prems (i - 1))<br>\n         in subst_bounds(map Free params, t) end<br>\n    else error (\"Not enough premises for prem\" ^ string_of_int i ^<br>\n      \" in propositon: \" ^ Syntax.string_of_term ctxt t)<br>\n  end;</p>\n<p>in<br>\n  TermStyle.add_style \"no_all_prem1\" (style_parm_premise 1) #&gt;<br>\n  TermStyle.add_style \"no_all_prem2\" (style_parm_premise 2)<br>\nend<br>\n*}</p>\n<p>Now you can go @{thm_style no_all_prem1 my_induction_thm}</p>\n<p>Warning: I have hardly tested this!</p>\n<p>Tobias</p>\n<p>Jesper Bengtson wrote:</p>",
        "id": 294080382,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660830467
    },
    {
        "content": "<p>From: Norbert Schirmer &lt;<a href=\"mailto:schirmer@in.tum.de\">schirmer@in.tum.de</a>&gt;<br>\nNo there is not. You can only access the full power of syntax print  <br>\ntranslations through antiquotations.</p>\n<p>Typically there are two kinds of documents typeset with Isabelle:<br>\n1) present the pure theory (or an Isabelle tutorial): mainly Isabelle  <br>\nproof text with documenting @{text } quotations and antiquotations.<br>\n2) write a document (like a thesis) about your theories: mainly a big  <br>\n@{text } quotation with heaps of antiquotations.</p>\n<p>Cheers,</p>\n<p>Norbert</p>",
        "id": 294080459,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660830486
    }
]