[
    {
        "content": "<p>From: Holger Blasum &lt;<a href=\"mailto:hbl@sysgo.com\">hbl@sysgo.com</a>&gt;<br>\nDear all,</p>\n<p>while it is mostly \"intuitive\" I would like to have a clearer view of <br>\noperator precedence in Isabelle. Attached is what I quickly reverse-<br>\nengineered on a train ride on the long weekend. Is it correct? Is there <br>\nalready any explicit information on this (beyond using <br>\nIsabelle -&gt; Settings -&gt; Display -&gt; Show Brackets in PG)?</p>\n<p>Thanks,<br>\n<a href=\"/user_uploads/14278/T32GBuzRVtbXuHWmrMUXXzvT/isabelle-operator-precedence-cheat-sheet.pdf\">isabelle-operator-precedence-cheat-sheet.pdf</a><br>\n<a href=\"/user_uploads/14278/4QEzsR0uaPXqLkmZUODt-W9G/isabelle-operator-precedence-cheat-sheet.tex\">isabelle-operator-precedence-cheat-sheet.tex</a></p>",
        "id": 294227286,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660900604
    },
    {
        "content": "<p>From: Johannes Hölzl &lt;<a href=\"mailto:hoelzl@in.tum.de\">hoelzl@in.tum.de</a>&gt;<br>\nWhen I'm not sure about operator precedence I just add the parenthesis<br>\nwhere I want to have them and then look at the Isabelle output. If the<br>\nparenthesis is removed I know that they where superfluous.</p>\n<ul>\n<li>Johannes</li>\n</ul>",
        "id": 294227308,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660900615
    },
    {
        "content": "<p>From: Brian Huffman &lt;<a href=\"mailto:huffman@in.tum.de\">huffman@in.tum.de</a>&gt;<br>\nIf you want to have ALL the information about operator precedences,<br>\nthen have a look at the output of the \"print_syntax\" command. Under<br>\nsection \"prods\", the productions for the nonterminal \"logic\" are the<br>\nmain ones that you'll care about. For example:</p>\n<p>logic = any[65] \"+\" any[66] =&gt; \"\\&lt;^const&gt;Groups.plus_class.plus\" (65)</p>\n<p>This rule says that \"+\" is infix with precedence 65, and<br>\nleft-associative (evident from the fact that the left argument also<br>\nrequires precedence 65).</p>\n<ul>\n<li>Brian</li>\n</ul>",
        "id": 294227316,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660900621
    },
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\nThe precedence information is attached to the definition/introduction of each<br>\noperator. In HOL.thy you find that \"=\" has precedence 50 and \\&lt;inter&gt; has<br>\nprecedence 70 (missing from your document). Then there is also the associativity.</p>\n<p>I wouldn't exactly call this reverse engineering, but collecting this<br>\ninformation would be useful. I guess \"What's in Main\" is the right document this<br>\ncould go into. When I find the time...</p>\n<p>Tobias</p>",
        "id": 294227333,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660900627
    },
    {
        "content": "<p>From: Holger Blasum &lt;<a href=\"mailto:hbl@sysgo.com\">hbl@sysgo.com</a>&gt;<br>\nHi Brian,</p>\n<p>Very nice, at first glance that looks like exactly what I was <br>\nlooking for :-) </p>\n<p>If I get it right, this also shows that I was wrong with some of <br>\nmy conjectures:<br>\n    logic = \"let\" HOL.letbinds[0] \"in\" any[10] =&gt; \"_Let\" (10)<br>\n    logic = \"if\" logic[0] \"then\" any[0] \"else\" any[10] =&gt; \"\\&lt;^const&gt;HOL.If\" (10)</p>\n<p>=&gt; let-in has the same precedence as if-then-else. (I'm not<br>\ncompletely sure what the \"logic[0]\" means here though.)</p>\n<p>Now, for the cherry on the cake:<br>\nWhere both parameters are equal (e.g. in the next line) <br>\n    any[51] \"&gt;\" any[51] =&gt; \"\\&lt;^const&gt;Orderings.ord_class_greater\" (50)<br>\nOr the first one is larger than the second (rarely encountered, <br>\n    but existing, e.g.)<br>\n    logic[81] \"respects\" logic[80] =&gt; \"\\&lt;^const&gt;Equiv_Relations.RESPECTS\" (80)<br>\nwhat does it mean for associativity?</p>\n<p>Thanks,</p>",
        "id": 294227345,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660900633
    },
    {
        "content": "<p>From: Christian Sternagel &lt;<a href=\"mailto:c-sterna@jaist.ac.jp\">c-sterna@jaist.ac.jp</a>&gt;<br>\nDear Holger,</p>\n<p>When declaring infix syntax in thy files there are 3 possibilities:</p>\n<ul>\n<li>infix, for non-associative infix operators</li>\n<li>infixl, for left-associative infix operators</li>\n<li>\n<p>infixr, for right-associative infix operators<br>\nand this corresponds to the following in the output of print_syntax</p>\n</li>\n<li>\n<p>both arguments have same number</p>\n</li>\n<li>right argument has higher number</li>\n<li>left argument has higher number</li>\n</ul>\n<p>Again, when both arguments have the same precedence it means that the <br>\noperator is non-associative, try, e.g., to enter</p>\n<p>term \"x ≠ x ≠ y\"</p>\n<p>(Note that this only works with the xsymbol for not-equal, since the <br>\nASCII symbol ~= is declared as \"infixl\", i.e., left-associative infix <br>\noperator.)</p>\n<p>hope this helps,</p>\n<p>chris</p>",
        "id": 294227369,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660900652
    },
    {
        "content": "<p>From: Holger Gast &lt;<a href=\"mailto:gast@informatik.uni-tuebingen.de\">gast@informatik.uni-tuebingen.de</a>&gt;<br>\nHi Holger,</p>\n<p>The point to realize is that numeric priorities generalize (or unify)<br>\nthe associativity &amp; precedence scheme by yacc et al.</p>\n<p>The details can be found in Sec. 7.4.2 \"Mixfix Syntax\" of the<br>\n\"The Isabelle/Isar Reference Manual\"<br>\n(available as  \"isabelle doc isar-ref\" in Isabelle2012;<br>\npreviously Sec. 6.1. of the \"Old Isabelle Reference Manual\").</p>\n<p>The idea is straightforward: each non-terminal in the grammar<br>\nis annotated with an additional numeric priority, and<br>\nthat priority restricts possible expansions. In a production</p>\n<p>... -&gt;  ... A^p ...</p>\n<p>the non-terminal A^p is expanded only by rules  A^q -&gt; ... where q &gt;= p.</p>\n<p>One can think of it as \"that occurrence of A requires an<br>\nexpansion at least 'as strong' / 'binding as tightly' as p\".</p>\n<p>In the \"usual\" case</p>\n<p>A^p -&gt; A^q &lt;op&gt; A^r</p>\n<p>&lt;op&gt; then appears to be / is in effect</p>\n<ul>\n<li>\n<p>non-associative   if p &lt; q  and p &lt; r<br>\n  because the production itself does not match</p>\n</li>\n<li>\n<p>left-associative  if q &lt;= p and p &lt; r<br>\n  because the production can be re-applied<br>\n  only on the left-hand side of the operator</p>\n</li>\n<li>\n<p>right-associative if p &lt; q  and p &lt;= r<br>\n  because the production can be re-applied<br>\n  only on the right-hand side of the operator.</p>\n</li>\n</ul>\n<p>Excuse the length of the mail,<br>\nI am rather partial to parsers :)</p>",
        "id": 294227461,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660900685
    },
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\nI noticed this too, when compiling the table of infix operators. This is weird<br>\nand should be cleared up. In fact, = and ~= and ≠ should all be non-associative<br>\nbecause there is no canonical orientation.</p>\n<p>Tobias</p>",
        "id": 294227565,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660900750
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nI think the \"=\" notation is going back to a time even before the 'infixl' <br>\n/ 'infixr' macros for the general mixfix form, and there were also some <br>\nspecial tweaks for output and breaks unlike regular infixes.  'infix' is <br>\nmuch younger than all that.</p>\n<p>In the last 10 years, there have been some slight reforms towards more <br>\nregularity of notation for eq/not_equal in HOL.  It might be worth trying <br>\nagain to make it all just plain infix 50, although just from the <br>\nancienticity of it it could cause some surprises in some dark corners.</p>\n<p>Makarius</p>",
        "id": 294227884,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660900915
    }
]