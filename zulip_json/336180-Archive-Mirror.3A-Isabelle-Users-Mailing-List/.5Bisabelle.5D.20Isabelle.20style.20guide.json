[
    {
        "content": "<p>From: Gerwin Klein &lt;<a href=\"mailto:Gerwin.Klein@nicta.com.au\">Gerwin.Klein@nicta.com.au</a>&gt;<br>\nUpdating lots of proofs to Isabelle2015-RCx and discussions about submission rules for the AFP inspired me to write up guidelines that may be of more widespread use and interest:</p>\n<p><a href=\"http://proofcraft.org/blog/isabelle-style.html\">http://proofcraft.org/blog/isabelle-style.html</a></p>\n<p>There’s more to come. Feedback welcome.</p>\n<p>Enjoy!<br>\nGerwin</p>\n<hr>\n<p>The information in this e-mail may be confidential and subject to legal professional privilege and/or copyright. National ICT Australia Limited accepts no liability for any damage caused by this email or its attachments.</p>",
        "id": 294640963,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661162065
    },
    {
        "content": "<p>From: Larry Paulson &lt;<a href=\"mailto:lp15@cam.ac.uk\">lp15@cam.ac.uk</a>&gt;<br>\nThese are nice guidelines, but there is one difficulty with the idea that “auto” should only be allowed at the end of a proof: it was designed to be used at the start of proofs! It is supposed to solve all the easy parts of the problem, returning the difficult ones to the user.</p>\n<p>There is a way out of this paradox: use “auto” to start the proof, but regard the resulting subgoals as separate lemmas that need to be proved first. Combining these proved lemmas with “auto” should solve the problem outright, and you have created a structured proof.</p>\n<p>If you have just completed a proof after many hours of effort, it is awfully tempting to leave it in that just-finished state, however messy it may be. But you have already done the hard work, and it’s worth taking another 15 minutes to restructure the proof to make it legible and robust against future changes.</p>\n<p>Larry</p>",
        "id": 294641185,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661162164
    },
    {
        "content": "<p>From: Gerwin Klein &lt;<a href=\"mailto:Gerwin.Klein@nicta.com.au\">Gerwin.Klein@nicta.com.au</a>&gt;<br>\nThanks for putting what I was thinking that a lot more clearly. Peter Gammie had a similar point on the Isar side.</p>\n<p>I’ll include your example if that’s fine with you.</p>\n<p>Cheers,<br>\nGerwin</p>",
        "id": 294641236,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661162188
    },
    {
        "content": "<p>From: \"C. Diekmann\" &lt;<a href=\"mailto:diekmann@in.tum.de\">diekmann@in.tum.de</a>&gt;<br>\nGreat guide.</p>\n<p>I randomly looked at HOL/MicroJava/Comp/AuxLemmas.thy and<br>\nHOL/MicroJava/Comp/Index.thy from the Isabelle2015 distribution.<br>\nThose theories definitely need some rework.</p>\n<p>Cornelius</p>",
        "id": 294641278,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661162213
    },
    {
        "content": "<p>From: Peter Lammich &lt;<a href=\"mailto:lammich@in.tum.de\">lammich@in.tum.de</a>&gt;<br>\nVery nice styleguide! It very much matches what I am trying to do in my<br>\nproofs, too. Except for the apply-indentation scheme, where I use<br>\nsomewhat different:</p>\n<p>If a method produces n new subgoals, the next apply-steps will be<br>\nindented one level, and grouped into n blocks by blank lines, where each<br>\nblock solves one of the subgoals:</p>\n<p>apply (intro conjI)    // produces 3 subgoals<br>\n    apply auto []        // Solves first one</p>\n<p>apply (cases l)      // Solve 2nd one<br>\n      apply clarsimp       // Solve Nil-case<br>\n      apply force</p>\n<p>apply auto []        // Solve Cons-case</p>\n<p>apply force          // Solve 3rd subgoal<br>\n  done</p>",
        "id": 294641290,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661162219
    },
    {
        "content": "<p>From: Gerwin Klein &lt;<a href=\"mailto:Gerwin.Klein@nicta.com.au\">Gerwin.Klein@nicta.com.au</a>&gt;<br>\nGood old MicroJava, almost proof archeology now.</p>\n<p>At least the type compiler were not my own proofs, otherwise that would be mildly embarrassing :-)</p>\n<p>I’ve brushed them off a little in the development repository, but there is easily more modernisation to be done to them if anybody feels like it.</p>\n<p>Cheers,<br>\nGerwin</p>",
        "id": 294641375,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661162256
    },
    {
        "content": "<p>From: Gerwin Klein &lt;<a href=\"mailto:Gerwin.Klein@nicta.com.au\">Gerwin.Klein@nicta.com.au</a>&gt;</p>\n<blockquote>\n<p>On 27.05.2015, at 19:40, Peter Lammich &lt;<a href=\"mailto:lammich@in.tum.de\">lammich@in.tum.de</a>&gt; wrote:</p>\n<p>Very nice styleguide!</p>\n</blockquote>\n<p>Thanks!</p>\n<blockquote>\n<p>It very much matches what I am trying to do in my<br>\nproofs, too. Except for the apply-indentation scheme, where I use<br>\nsomewhat different:</p>\n<p>If a method produces n new subgoals, the next apply-steps will be<br>\nindented one level, and grouped into n blocks by blank lines, where each<br>\nblock solves one of the subgoals:</p>\n<p>apply (intro conjI)    // produces 3 subgoals<br>\n   apply auto []        // Solves first one</p>\n<p>apply (cases l)      // Solve 2nd one<br>\n     apply clarsimp       // Solve Nil-case<br>\n     apply force</p>\n<p>apply auto []        // Solve Cons-case</p>\n<p>apply force          // Solve 3rd subgoal<br>\n done</p>\n</blockquote>\n<p>I use something like this only when I have a large number of subgoals (&gt; 40 or so). Even then, I use the standard indentation within the blocks (with an offset, basically).</p>\n<p>In this case, for the “clarsimp\", it’s hard to tell that it solves a goal, and for the “cases\", it’s hard to tell how many subgoals it produces. Unless you really always have the comments -- then it’s fine, but I’m way too lazy for that many comments...</p>\n<p>Cheers,<br>\nGerwin</p>\n<hr>\n<p>The information in this e-mail may be confidential and subject to legal professional privilege and/or copyright. National ICT Australia Limited accepts no liability for any damage caused by this email or its attachments.</p>",
        "id": 294641388,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661162262
    },
    {
        "content": "<p>From: Lars Hupel &lt;<a href=\"mailto:hupel@in.tum.de\">hupel@in.tum.de</a>&gt;<br>\nIs there a reason why MicroJava isn't an AFP entry? (Same question goes<br>\nfor some other subdirectories in ~~/src/HOL.)</p>\n<p>Cheers<br>\nLars</p>",
        "id": 294641428,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661162280
    },
    {
        "content": "<p>From: Gerwin Klein &lt;<a href=\"mailto:Gerwin.Klein@nicta.com.au\">Gerwin.Klein@nicta.com.au</a>&gt;<br>\nThe direct reason is that MicroJava and most of these others predate the AFP by several years.</p>\n<p>I think it’s a good idea to have some non-trivial applications directly in the distribution, so people don’t need to download something else before they have larger examples.</p>\n<p>Which applications precisely these should be is a different question. The current set is mostly a function of where they came from and how they were developed.</p>\n<p>Cheers,<br>\nGerwin</p>\n<hr>\n<p>The information in this e-mail may be confidential and subject to legal professional privilege and/or copyright. National ICT Australia Limited accepts no liability for any damage caused by this email or its attachments.</p>",
        "id": 294641482,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661162292
    },
    {
        "content": "<p>From: Peter Lammich &lt;<a href=\"mailto:lammich@in.tum.de\">lammich@in.tum.de</a>&gt;</p>\n<blockquote>\n<blockquote>\n<p>If a method produces n new subgoals, the next apply-steps will be<br>\nindented one level, and grouped into n blocks by blank lines, where each<br>\nblock solves one of the subgoals:</p>\n<p>apply (intro conjI)    // produces 3 subgoals<br>\n   apply auto []        // Solves first one</p>\n<p>apply (cases l)      // Solve 2nd one<br>\n     apply clarsimp       // Solve Nil-case<br>\n     apply force</p>\n<p>apply auto []        // Solve Cons-case</p>\n<p>apply force          // Solve 3rd subgoal<br>\n done<br>\n</p>\n</blockquote>\n</blockquote>\n<blockquote>\n<p>In this case, for the “clarsimp\", it’s hard to tell that it solves a goal, and for the “cases\", it’s hard to tell how many subgoals it produces. Unless you really always have the comments -- then it’s fine, but I’m way too lazy for that many comments...<br>\n    Actually, it is simple to see, even without the comments: clarsimp does<br>\n<em>not</em> solve any subgoal, as there is a next command (force) below it in<br>\nthe same block. force solves a subgoal, as it is at the end of a block.<br>\nThe cases produces two subgoals, as there are two indented blocks<br>\nfollowing. For the same reason, the \"intro conjI\" produces 3 subgoals.</p>\n</blockquote>",
        "id": 294641525,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661162305
    },
    {
        "content": "<p>From: Gerwin Klein &lt;<a href=\"mailto:Gerwin.Klein@nicta.com.au\">Gerwin.Klein@nicta.com.au</a>&gt;<br>\nGot it. That is indeed enough.</p>\n<p>Cheers,<br>\nGerwin</p>\n<hr>\n<p>The information in this e-mail may be confidential and subject to legal professional privilege and/or copyright. National ICT Australia Limited accepts no liability for any damage caused by this email or its attachments.</p>",
        "id": 294641550,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661162314
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nThis is indeed a quite fitting style guide.  The Prover IDE should <br>\ngradually formalize more of such fine points, to make it easier to avoid <br>\nbad style by default.  Just some notes in the order of the text:</p>\n<ul>\n<li>\n<p>There is already formal \"bad\" markup for 'sorry' and 'back' for some<br>\n   years, which resulted from earlier AFP recommendations.</p>\n</li>\n<li>\n<p>The formal indentation of 'apply' steps is also supported by some formal<br>\n   markup that the referenced BeanShell macro uses.  I hope to have<br>\n   something like that as part of the regular indentation in Isabelle/jEdit<br>\n   soon, within the Isabelle/Scala codebase.  (In Isabelle2015 systematic<br>\n   supports for text folds is new, but systematic indentation once not<br>\n   addressed.)</p>\n</li>\n<li>\n<p>Concerning bad internal names like xa, xb, xaa: Isabelle2015 produces<br>\n   formal markup for that in the slightly reformed rule_tac family, with<br>\n   the faint read color scheme of improper material.  Maybe we should also<br>\n   revisit rename_tac at some point, to clarify its meaning in that<br>\n   respect, or to eliminate the need for rename_tac / rule_tac altogether<br>\n   due to newly emerging subgoal focus in Isar \"scripts\".</p>\n</li>\n<li>\n<p>Use of unrestricted \"auto\".  Some years ago the goal restriction form</p>\n<p>apply (cases P)<br>\n    apply (auto ...)[2]</p>\n<p>emerged as a partial solution to old subgoal addressing questions.</p>\n<p>In Isabelle2015 more management infrastructure is wrapped around method<br>\n application, such that the new combinator \";\" for structured combination<br>\n could be easily provided (it resembles THEN_ALL_NEW of ML tactics).<br>\n Using that, the above can we written in Coq-style like this:</p>\n<p>apply (cases P; auto)</p>\n<p>A potential disadvantage here is that \"auto\" is invoked separately on<br>\n each new subgoal, not on all of them simultaneously.  This can make a<br>\n difference, e.g. for implicit proof parallelization inside of \"auto\".</p>\n<p>The difference holds for these two variants:</p>\n<p>apply (cases P)<br>\n    apply (simp_all ...)[2]</p>\n<p>apply (cases P; simp)</p>\n</li>\n</ul>\n<p>I am curious to see part 2, and especially part 3 about layout; the latter <br>\ncategory is more easily accessible in the Prover IDE.</p>\n<p>High-end IDEs like IntelliJ IDEA have lots of built-in style and <br>\nrecommendations, although it looks like big efforts to get to this level <br>\nof sophistication, and maintain it in the long run.</p>\n<p>Makarius</p>",
        "id": 294641933,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661162468
    },
    {
        "content": "<p>From: Gerwin Klein &lt;<a href=\"mailto:Gerwin.Klein@nicta.com.au\">Gerwin.Klein@nicta.com.au</a>&gt;</p>\n<blockquote>\n<p>On 28.05.2015, at 22:21, Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt; wrote:</p>\n<p>On Sat, 23 May 2015, Gerwin Klein wrote:</p>\n<blockquote>\n<p>Updating lots of proofs to Isabelle2015-RCx and discussions about submission rules for the AFP inspired me to write up guidelines that may be of more widespread use and interest:</p>\n<p><a href=\"http://proofcraft.org/blog/isabelle-style.html\">http://proofcraft.org/blog/isabelle-style.html</a></p>\n</blockquote>\n<p>This is indeed a quite fitting style guide.  The Prover IDE should gradually formalize more of such fine points, to make it easier to avoid bad style by default.</p>\n</blockquote>\n<p>I agree, it would be nice to gradually converge to more support for such things over time.</p>\n<blockquote>\n<ul>\n<li>Concerning bad internal names like xa, xb, xaa: Isabelle2015 produces<br>\n formal markup for that in the slightly reformed rule_tac family, with<br>\n the faint read color scheme of improper material.  Maybe we should also<br>\n revisit rename_tac at some point, to clarify its meaning in that<br>\n respect, or to eliminate the need for rename_tac / rule_tac altogether<br>\n due to newly emerging subgoal focus in Isar \"scripts”.</li>\n</ul>\n</blockquote>\n<p>The subgoal focus mechanism sounds promising. I didn’t have enough practical experience with it yet to make it a recommendation, but when it has withstood the test of time for a while, that could indeed become the main way of doing things.</p>\n<blockquote>\n<p>I am curious to see part 2, and especially part 3 about layout; the latter category is more easily accessible in the Prover IDE.</p>\n</blockquote>\n<p>Part 3 will probably be the most controversial one - not because I’m planning to write anything special, but because layout is the easiest to have strong opinions on.</p>\n<p>Cheers,<br>\nGerwin</p>\n<hr>\n<p>The information in this e-mail may be confidential and subject to legal professional privilege and/or copyright. National ICT Australia Limited accepts no liability for any damage caused by this email or its attachments.</p>",
        "id": 294642101,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661162532
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nIt is also the easiest to build converters for it.  Have you tried <br>\n\"isabelle update_cartouches\" already?</p>\n<p>My impression is that many people just get used to something arbitrary as <br>\na start, and then cannot imagine anything else afterwards.</p>\n<p>In the classic times of Isar and Proof General development (in 1998/1999) <br>\na certain canonical indentation emerged and was implemented in the editor, <br>\nbut in Isabelle/jEdit there is still nothing of it -- it will come one <br>\nday. Of course that will be based on the good old standards, although I've <br>\nfound myself doing a few things differently now, to optimize the content <br>\nof the first line of a specification, for the tree-view in SideKick.  E.g.</p>\n<p>Bad:</p>\n<p>definition foo :: T where<br>\n     \"foo = ...\"</p>\n<p>definition<br>\n     bar :: T where<br>\n     \"bar = ...\"</p>\n<p>Good:</p>\n<p>definition foobar :: T<br>\n     where \"foobar = ...\"</p>\n<p>Makarius</p>",
        "id": 294642186,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661162568
    },
    {
        "content": "<p>From: \"C. Diekmann\" &lt;<a href=\"mailto:diekmann@in.tum.de\">diekmann@in.tum.de</a>&gt;<br>\nWhen definitions get longer, the first bad version (subjectively)<br>\nappears more pleasant to me.</p>\n<p>definition foo :: T where<br>\n  \"foo = BlaulichtAufDerDatenautobahn\"</p>\n<p>definition foo :: T<br>\n  where \"foo = BlaulichtAufDerDatenautobahn\"</p>\n<p>Putting the \"where\" in the first line saves space for the actual definition.</p>\n<p>Cornelius</p>",
        "id": 294642229,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661162589
    },
    {
        "content": "<p>From: Gerwin Klein &lt;<a href=\"mailto:Gerwin.Klein@nicta.com.au\">Gerwin.Klein@nicta.com.au</a>&gt;<br>\nNot even finished writing yet, and we have already started ;-)</p>\n<p>‘definition/where' is actually one of the case I'm having most trouble with.</p>\n<p>Personally, I like the most line-consuming form:</p>\n<p>definition<br>\n  foo :: T<br>\nwhere<br>\n  “foo = bar”</p>\n<p>because I tend to have long types and long definitions, sometimes both over multiple lines. The <code>where</code> in the same line as the definition adds noise to what I’m most interested in (the definition itself).</p>\n<p>The variant</p>\n<p>definition foo :: T<br>\nwhere<br>\n  “foo = bar”</p>\n<p>works more nicely with folding.</p>\n<p>definition foo :: \"T =&gt; T =&gt; (some, other, 'params) list =&gt;<br>\n                   T\"<br>\nwhere<br>\n  “foo = bar”</p>\n<p>forces too much indentation for the line break.</p>\n<p>Maybe the solution is simply to have both variants, the folding-friendly variant when everything fits on the line, the multi-line one, when it doesn’t.</p>\n<p>What do people think about this one for long types?</p>\n<p>definition foo ::<br>\n  \"T =&gt; T =&gt; (some, other, 'params) list =&gt; T\"<br>\nwhere<br>\n  “foo = bar”</p>\n<p>Cheers,<br>\nGerwin</p>\n<hr>\n<p>The information in this e-mail may be confidential and subject to legal professional privilege and/or copyright. National ICT Australia Limited accepts no liability for any damage caused by this email or its attachments.</p>",
        "id": 294642244,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661162599
    },
    {
        "content": "<p>From: Peter Lammich &lt;<a href=\"mailto:lammich@in.tum.de\">lammich@in.tum.de</a>&gt;</p>\n<blockquote>\n<p>definition foo ::<br>\n  \"T =&gt; T =&gt; (some, other, 'params) list =&gt; T\"<br>\nwhere<br>\n  “foo = bar”<br>\n</p>\n</blockquote>\n<p>I usually use, for long types and long definition terms: <br>\n  definition foo<br>\n  :: \"long =&gt; (type, yeah) they =&gt; (can,get) really =&gt; long\"<br>\n  where<br>\n    \"foo a b c = do {<br>\n      let x = f a;<br>\n      y &lt;- g (b,c,x);<br>\n      while (...) do {<br>\n        ...<br>\n        if ... then<br>\n          ...<br>\n        else<br>\n          ...<br>\n      } (s_0)<br>\n    }\"</p>\n<p>So I even need apply some indentation inside the definition, and this<br>\nsimply looks best if the definition term starts at the begining of a<br>\nline. I even sometimes think about</p>\n<p>\"foo a b c = <br>\n  do {<br>\n    ...<br>\n  }\"</p>",
        "id": 294642253,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661162605
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nThat is not a counter-example yet: the material after the 'where' can be <br>\nbroken up further, of course:</p>\n<p>definition foo :: T<br>\nwhere<br>\n   \"foo =<br>\n     let val x = long_material<br>\n     in multiple_lines x end\"</p>\n<p>There are many possibilities.  The main purpose of the exercise is to <br>\nfollow these principles:</p>\n<p>* The first line is restricted to the most relevant information for<br>\n     SideKick tree view etc. (keyword 'where' is no relevant information).</p>\n<p>* The overall layout follows the structure of nesting and fits into the<br>\n     strict line length of 80-100 characters.</p>\n<p>Makarius</p>",
        "id": 294643675,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661163169
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nOn Sun, 31 May 2015, Gerwin Klein wrote:</p>\n<blockquote>\n<p>Personally, I like the most line-consuming form:</p>\n<p>definition<br>\n foo :: T<br>\nwhere<br>\n “foo = bar”</p>\n</blockquote>\n<p>This form reminds me of ancient times of Proof General 2.0: head keyword <br>\nstanding alone, then the body below it.  I can't remember why be converged <br>\nto that in around 1999.  Today I find it wasteful in vertical space, with <br>\nthese odd 16x9 displays.  (Apart from the lack of relevant information in <br>\nline 1 for SideKick.)</p>\n<blockquote>\n<p>because I tend to have long types and long definitions, sometimes both <br>\nover multiple lines. The <code>where</code> in the same line as the definition adds <br>\nnoise to what I’m most interested in (the definition itself).</p>\n<p>The variant</p>\n<p>definition foo :: T<br>\nwhere<br>\n “foo = bar”</p>\n<p>works more nicely with folding.</p>\n</blockquote>\n<p>I am also using this routinely for anything that is not just very short. <br>\nPutting the 'where' and the proposition on the same line is actually not <br>\nso frequent, since real specifications don't fit there.</p>\n<blockquote>\n<p>definition foo ::<br>\n \"T =&gt; T =&gt; (some, other, 'params) list =&gt; T\"<br>\nwhere<br>\n “foo = bar”</p>\n</blockquote>\n<p>It fits into the principle of having relevant information on line 1, and <br>\nbreaking the rest according to normal indentation standards.</p>\n<p>A definition and a theorem statement are analogous, and we already see <br>\nthings like this routinely:</p>\n<p>theorem a: \"short statement\"</p>\n<p>theorem b:<br>\n   \"long statement<br>\n     broken into<br>\n     lines\"</p>\n<p>theorem c:<br>\n   fixes ...<br>\n   assumes ...<br>\n   shows ...</p>\n<p>Makarius</p>",
        "id": 294643861,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661163237
    },
    {
        "content": "<p>From: Lars Noschinski &lt;<a href=\"mailto:noschinl@in.tum.de\">noschinl@in.tum.de</a>&gt;<br>\nThis is the form I use most. It only uses two lines and keeps as much<br>\nspace as possible for the actual definition. I don't mind seeing the<br>\nunnecessary \"where\" in the sidekick -- it is at the end of the line,<br>\nafter all. Also, seeing the name suffices for my purposes, so even the<br>\ntype is unnecessary (for me).</p>\n<p>I mostly use the sidekick to see the section structure. I would like to<br>\nsee more information about my lemmas there (instead of just the name),<br>\nbut I almost always state my lemmas in structured form, so I have a line<br>\nbreak after name.</p>\n<p>-- Lars</p>",
        "id": 294644387,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661163439
    },
    {
        "content": "<p>From: Christine Sherif Rizkallah &lt;<a href=\"mailto:christine2711987@gmail.com\">christine2711987@gmail.com</a>&gt;<br>\ndefinition<br>\n foo :: T<br>\nwhere<br>\n “foo = bar”</p>\n<p>Its nice to have a line to separate the type and the actual definition.</p>\n<p>A more important issue though is recommending always explicitly writing the<br>\ntypes.</p>",
        "id": 294644567,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661163511
    },
    {
        "content": "<p>From: Holger Blasum &lt;<a href=\"mailto:hbl@sysgo.com\">hbl@sysgo.com</a>&gt;<br>\n[..]</p>\n<p>The availability of the EURO-MILS deliverable \"Used Formal Methods\" <br>\n<a href=\"http://www.euromils.eu/downloads/Deliverables/Y2/2015-EM-UsedFormalMethods-WhitePaper.pdf\">http://www.euromils.eu/downloads/Deliverables/Y2/2015-EM-UsedFormalMethods-WhitePaper.pdf</a><br>\nmight an on-topic contribution to this thread (discussions on Isabelle style).</p>\n<p>best,</p>",
        "id": 294645863,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661164037
    }
]