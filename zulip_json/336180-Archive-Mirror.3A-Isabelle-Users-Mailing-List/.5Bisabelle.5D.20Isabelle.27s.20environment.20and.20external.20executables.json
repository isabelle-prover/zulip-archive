[
    {
        "content": "<p>From: Moa Johansson &lt;<a href=\"mailto:moa.johansson@chalmers.se\">moa.johansson@chalmers.se</a>&gt;<br>\nHi all,</p>\n<p>I’m calling some external (Haskell) executables from inside Isabelle. If I start isabelle from the shell (using the command “isabelle jedit”) it works fine, and my executables are picked up from my bash environment as they’re in the PATH. However, if I start Isabelle by double-clicking, the environment is different, and Isabelle no longer finds what is in my normal path.</p>\n<p>I’ve consulted the Isabelle Systems Manual, and tried to follow the instructions to add the paths to the ISABELLE_TOOLS environment variable in my $ISABELLE_HOME_USER/etc/settings, but that does not work. I’ve also tried adding the path to $ISABELLE_HOME_USER/etc/components but that made no difference either. </p>\n<p>Obviously doing something silly but wrong, as it should be easy to add something to Isabelle’s environment.</p>\n<p>Here are the gory details, my Isabelle extension is looking for two executables called “HipSpecifyer” and “hipster-hipspec”, but fails to find them: </p>\n<p>/var/folders/sl/hb1d9hld2tsfgn33xgsxt1lc0000gp/T/isabelle-moajohansson3147/bash_script1000488: line 1: HipSpecifyer: command not found <br>\n/var/folders/sl/hb1d9hld2tsfgn33xgsxt1lc0000gp/T/isabelle-moajohansson3147/bash_script1000491: line 1: hipster-hipspec: command not found</p>\n<p>Best,<br>\nMoa</p>",
        "id": 294674205,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661174368
    },
    {
        "content": "<p>From: Lars Hupel &lt;<a href=\"mailto:hupel@in.tum.de\">hupel@in.tum.de</a>&gt;<br>\nHi Moa,</p>\n<blockquote>\n<p>I’m calling some external (Haskell) executables from inside Isabelle. If I start isabelle from the shell (using the command “isabelle jedit”) it works fine, and my executables are picked up from my bash environment as they’re in the PATH. However, if I start Isabelle by double-clicking, the environment is different, and Isabelle no longer finds what is in my normal path.</p>\n</blockquote>\n<p>I would personally avoid calling tools via PATH, because things tend to<br>\nnot work reliably (as you observed too).</p>\n<blockquote>\n<p>I’ve consulted the Isabelle Systems Manual, and tried to follow the instructions to add the paths to the ISABELLE_TOOLS environment variable in my $ISABELLE_HOME_USER/etc/settings, but that does not work. I’ve also tried adding the path to $ISABELLE_HOME_USER/etc/components but that made no difference either. </p>\n</blockquote>\n<p>An \"Isabelle tool\" is an executable which can be invoked using the \"tool<br>\nwrapper\", e.g. like this:</p>\n<p>$ isabelle build</p>\n<p>Here, \"build\" is a \"tool\". You should register executables as tools if they</p>\n<ul>\n<li>require an Isabelle environment to work (e.g. $ISABELLE_HOME) <em>and</em></li>\n<li>are supposed to be run directly by the user.</li>\n</ul>\n<p>On the other hand, an \"Isabelle component\" acts more as an extension for<br>\nIsabelle. It looks like this would be the correct approach for your use<br>\ncase.</p>\n<p>However, Isabelle components require a little bit of setup. In essence,<br>\na component is just a path somewhere on your file system which has been<br>\nadded to \"etc/components\" (you did that already). Let's say this is<br>\n\"/path/to/hipspec\". Additionally, you need an \"etc/settings\" file in<br>\nthis path.</p>\n<p>$ cat /path/to/hipspec/etc/settings<br>\n  HIPSPEC_HOME=\"$COMPONENT\"</p>\n<p>The special $COMPONENT variable is provided during initialization of the<br>\ncomponent. The end result is that $HIPSPEC_HOME will refer to that path<br>\nin a stable and reproducible manner.</p>\n<p>The very same mechanism is used to provide the $AFP variable from the<br>\nAFP repository.</p>\n<p>Note that the above approaches are not mutually exclusive. You can also<br>\nregister more Isabelle tools in the \"etc/settings\" file. Isabelle tools<br>\ncan be executed from within Isabelle/ML using<br>\n\"Isabelle_System.isabelle_tool\".</p>\n<p>Hope that helps,<br>\nLars</p>",
        "id": 294674231,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661174377
    },
    {
        "content": "<p>From: Lars Hupel &lt;<a href=\"mailto:hupel@in.tum.de\">hupel@in.tum.de</a>&gt;</p>\n<blockquote>\n<p>So, to check that I’ve understood correctly:<br>\n- Both my executables are in \"$HOME/Library/Haskell/bin/“<br>\n- $ISABELLE_USER/etc/components I add one line with the path to where the executables are.</p>\n<ul>\n<li>I then have to create a file etc/settings <em>also</em> in \"$HOME/Library/Haskell/bin/“</li>\n<li>In this file I include the line<br>\n$HOME/Library/Haskell/bin/=\"$COMPONENT”</li>\n</ul>\n</blockquote>\n<p>Almost. The line literally has to say:</p>\n<p>HIPSPEC_HOME=\"$COMPONENT\"</p>\n<blockquote>\n<p>It’s a little bit complicated, yes. I’d like to avoid too much set up burden for the user of my tool if possible.</p>\n</blockquote>\n<p>How do you plan to distribute your tool? Maybe you could publish a<br>\ntarball with the binaries or build instructions; then all you'd have to<br>\ndo would be to tell your users to</p>\n<p>1) unpack it somewhere<br>\n2) add \"/path/to/unpacked/tarball\" to $ISABELLE_HOME_USER/etc/components</p>\n<p>You can bundle the \"etc/settings\" into the tarball, as there's nothing<br>\ninstallation-specific in there.</p>\n<p>But to be fair if you want to put your tools alongside other<br>\nnon-Isabelle-specific Haskell executables somewhere under \"~/bin\", it's<br>\nnot the best idea to register that path as a component. (Locally it's<br>\nfine if you know what you're doing, but I wouldn't impose that on users.)</p>\n<blockquote>\n<p>I wonder if the best option for me is to just create one new environment variable in $ISABELLE_USER/etc/settings<br>\n(e.g. HIPSPEC_HOME=$HOME/Library/Haskell/bin/)<br>\nand then let my code refer to this path, instead of just the names of the executables, e.g. ./$HIPSPEC_HOME/hipster-hipspec.</p>\n</blockquote>\n<p>You could also do that. That's basically the way it works for some other<br>\nexecutables, e.g. ISABELLE_GHC or ISABELLE_OCAML.</p>\n<blockquote>\n<p>It would make the installation of my tool easier.</p>\n</blockquote>\n<p>I'd say it's about the same complexity for installation.</p>\n<p>Cheers<br>\nLars</p>",
        "id": 294674254,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661174389
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nIf you have users of your tool apart from yourself, the canonical<br>\napproach is to make a proper (self-contained) Isabelle component in just<br>\none directory, and tell users to add a suitable \"init_component\" line to<br>\ntheir $ISABELLE_HOME_USERS/etc/settings or add the directory to<br>\n$ISABELLE_HOME_USERS/etc/components.</p>\n<p>There are plenty of existing examples: more than half of the Isabelle<br>\ndistribution consists of such components. They just happen to be shipped<br>\nby default.</p>\n<p>Makarius</p>",
        "id": 294674273,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661174397
    }
]