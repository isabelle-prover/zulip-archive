[
    {
        "content": "<p>From: \"Yannick Duchêne (Hibou57 )\" &lt;<a href=\"mailto:yannick_duchene@yahoo.fr\">yannick_duchene@yahoo.fr</a>&gt;<br>\nHi all Isabelle/jEdit users,</p>\n<p>Any body know a location for the Isabelle plugin for jEdit help?</p>\n<p>I feel the Isabelle community favors Emacs's ProofGeneral over jEdit (or I  <br>\nmay be wrong), and feel there are fewer documents for Isabelle used with  <br>\njEdit.</p>\n<p>Some documents could be an exhaustive list of the abbreviations which pops  <br>\nup the character list box (Isabelle plugin's abbreviations, not jEdit own  <br>\nabbreviations system). I have issue with the input of some characters.  <br>\nThat's also an opportunity to note there are some issues with the  <br>\ncharacters used in some of the PDF documenting Isabelle, …some seems wrong.</p>\n<p>Interesting documentation topic could also be how to set Isabelle  <br>\nconfiguration variables, like how to always have “use  <br>\n[[simp_trace=true]]”, setting trace depth limits and some others as there  <br>\nare.</p>\n<p>Well, some documentation about the Isabelle plugin for jEdit in its whole.  <br>\nI had a look at the jEdit plugin manager, but the Help button is disabled  <br>\non the Isabelle plugin entry. Searching the web could just return me two  <br>\nintroductory documents, which do not covers the points mentioned above:</p>\n<p>* Getting Started with Isabelle/jEdit<br>\n<a href=\"http://www.jaist.ac.jp/~c-sterna/publications/S-IUW12.pdf\">http://www.jaist.ac.jp/~c-sterna/publications/S-IUW12.pdf</a></p>\n<p>* Isabelle/jEdit — a Prover IDE within the PIDE framework<br>\n<a href=\"http://www4.in.tum.de/~wenzelm/papers/isabelle-jedit-2011-1.pdf\">http://www4.in.tum.de/~wenzelm/papers/isabelle-jedit-2011-1.pdf</a></p>\n<p>Thanks for any pointers :-)</p>",
        "id": 294218556,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660896217
    },
    {
        "content": "<p>From: \"Yannick Duchêne (Hibou57 )\" &lt;<a href=\"mailto:yannick_duchene@yahoo.fr\">yannick_duchene@yahoo.fr</a>&gt;<br>\nOops, missed it. For that particular point, go to  <br>\nPlugins-&gt;Isabelle-&gt;Prover Session, then select the ReadMe tab. It's in the  <br>\nmiddle of the ReadMe tab.</p>",
        "id": 294218574,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660896228
    },
    {
        "content": "<p>From: Gottfried Barrow &lt;<a href=\"mailto:gottfried.barrow@gmx.com\">gottfried.barrow@gmx.com</a>&gt;<br>\nOn 7/31/2012 10:25 AM, Yannick Duchêne (Hibou57) wrote:</p>\n<blockquote>\n<p>Any body know a location for the Isabelle plugin for jEdit help?</p>\n</blockquote>\n<p>Yannick,</p>\n<p>I've never seen an Isabelle plugin help. All the helps for plugins show <br>\nup under the \"Plugins\" tree of  \"Help / jEdit help\". Like Emacs, most of <br>\nwhat pertains to using jEdit isn't specific to Isabelle.</p>\n<blockquote>\n<p>I feel the Isabelle community favors Emacs's ProofGeneral over jEdit <br>\n(or I may be wrong), and feel there are fewer documents for Isabelle <br>\nused with jEdit.</p>\n</blockquote>\n<p>I think the commitment has already been made that jEdit is the future. <br>\nEmacs lovers can only savor the present, and long for the past in the <br>\nfuture. I'd get philosophical about all the pros and cons, but it's a <br>\nmute point. Lots of things are decided for us by the developers.</p>\n<p>If you get used to jEdit, you'll find out that, like Emacs, it's very <br>\npowerful, user configurable, has a powerful scripting language, and has <br>\nlots of great plugins. Not having got tied into Emacs, ignorance is <br>\nbliss for me.</p>\n<p>As to how you use jEdit is used with Isabelle, at this point, Isabelle's <br>\noperation with jEdit is fairly streamlined. There's the edit buffer, the <br>\noutput panel to show you current proof information, sidekick to give you <br>\na tree view, and the continuous prover which is always on.</p>\n<p>To control all of that, there's essentially the Isar language, and <br>\nknowing Isar will get you most of what Emacs makes available through menus.</p>\n<p>Menus are nice to show you what's available, but it's not all upside <br>\nwhen I go 3 levels deep in a menu and see 40 items available that I know <br>\nnothing about.</p>\n<p>With jEdit, anything that's available as na Isar command, you can make <br>\ninto a menu item and keyborad shortcut with jEdit macros. In fact, any <br>\nmacro you put under \".isabell/Isabelle2012/jedit/macros\" will show up <br>\nunder the menu \"Macros\" in the toolbar.</p>\n<p>For example, I have a macro \"declare[[show_types=false]].bsh\", which <br>\ncontains:</p>\n<p>textArea.setSelectedText(\"declare[[show_types=false]]\");</p>\n<p>And I have a keyboard shortcut of \"Cntl-j-i-t\". You assign keyboard <br>\nshorcuts to macros with \"Plugin options / jEdit / Shortcuts\".</p>\n<p>That's how I was doing things. Now I put a bunch of commands in a file I <br>\nimport, like:</p>\n<p>declare[[show_brackets=true]]  declare[[show_types=true]]<br>\n   declare[[names_long=false]]    declare[[show_sorts=false]]<br>\n   declare[[names_unique=true]]   declare[[show_consts=true]]</p>\n<p>Like with Emacs, there's lots of ways to do things. If you know how to <br>\nuse Isar, then you can get most of the same thing. As far as setting <br>\ntrace depth, I haven't found anything about that.</p>\n<p>Some of the these features will get worked out. From my research, <br>\nthere's no one else close to Isabelle, what with Isar, jEdit, and <br>\npowerful tools like Sledgehammer and Nitpick.</p>\n<p>The jEdit plugins are powerful.</p>\n<p>The \"Console\" plugin comes by default. I'm starting to use that because <br>\nI get into the same Cygwin environment that jEdit is using. It also <br>\nmakes it easy to execute commands on the current buffer.</p>\n<p>jEdit also has a standard scripting language, Beanshell, and so you get <br>\na standard scripting language with the power of Java. I'm also using the <br>\nJython plugin, <a href=\"http://plugins.jedit.org/plugins/?JythonInterpreter\">http://plugins.jedit.org/plugins/?JythonInterpreter</a></p>\n<p>That will let you tie into Beanshell, and a Jython script can be run as <br>\na jEdit macro. I get the benefits of Python and Beanshell.</p>\n<p>All together it's powerful. Learning it's a pain, but there's always a <br>\nlearning curve to these things.</p>\n<p>Regards,<br>\nGB</p>",
        "id": 294218661,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660896260
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nOn Tue, 31 Jul 2012, Yannick Duchêne (Hibou57) wrote:</p>\n<blockquote>\n<p>I feel the Isabelle community favors Emacs's ProofGeneral over jEdit (or <br>\nI may be wrong), and feel there are fewer documents for Isabelle used <br>\nwith jEdit.</p>\n</blockquote>\n<p>Note that Isabelle/jEdit as stable release is younger than 12 months <br>\n(October 2011), but Proof General older than 12 years.  Just last year at <br>\nthis time I was still busy chasing critical performace issues in the Scala <br>\nactor communication network, which rendered the Prover IDE unusable before <br>\nSeptember 2011.</p>\n<blockquote>\n<p>Searching the web could just return me two introductory documents, which <br>\ndo not covers the points mentioned above:</p>\n<ul>\n<li>\n<p>Getting Started with Isabelle/jEdit<br>\n<a href=\"http://www.jaist.ac.jp/~c-sterna/publications/S-IUW12.pdf\">http://www.jaist.ac.jp/~c-sterna/publications/S-IUW12.pdf</a></p>\n</li>\n<li>\n<p>Isabelle/jEdit — a Prover IDE within the PIDE framework<br>\n<a href=\"http://www4.in.tum.de/~wenzelm/papers/isabelle-jedit-2011-1.pdf\">http://www4.in.tum.de/~wenzelm/papers/isabelle-jedit-2011-1.pdf</a></p>\n</li>\n</ul>\n</blockquote>\n<p>These are indeed the two main introductory articles that I know.  Users <br>\nare invited to share their own experience and tricks with current <br>\nIsabelle/jEdit (as of Isabelle2012).  See also <br>\n<a href=\"https://isabelle.in.tum.de/community\">https://isabelle.in.tum.de/community</a> for a still somewhat blank and boring <br>\nspot for links to interesting user-contributed materials, say your own <br>\nblogs, video channels etc.</p>\n<p>Googling for Proof General (for Isabelle or Coq), one finds many funny <br>\nvideos for this ancient editor technology.  I am particularly fond of the <br>\nProof General / Coq intro by Andrej Bauer, where he first pretends to <br>\ndownload Proof General 4.x from the website, and then uses the <br>\nspecifically patched version Proof General 3.7.1.1 that is only available <br>\nfrom the Isabelle distribution :-)</p>\n<p>With Isabelle/jEdit one could imagine nice videos that demonstrate the <br>\ndynamics of certain popups and other plugins, for example.  I am myself <br>\nstill working on the upgrade of the platform to Java 1.7 and JavaFX 2.2, <br>\nso that one might see more onboard multimedia gimmicks in the future, with <br>\nHTML5 etc.</p>\n<p>Makarius</p>",
        "id": 294218677,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660896266
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nWell it mainly depends who is spending time on what.  Historically, I have <br>\nworked a lot together with David Aspinall on Proof General.  It remains to <br>\nbe seen how active any Emacs lovers can make themselves to continue its <br>\nmaintenance. (For Proof General / Coq there is quite some recent activity, <br>\ne.g. Hendrik Tews porting the classic PVS proof tree gadget or updating <br>\nthe integration with the \"make\" tool for separate compilation in Coq.)</p>\n<p>Makarius</p>",
        "id": 294218686,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660896271
    },
    {
        "content": "<p>From: Gottfried Barrow &lt;<a href=\"mailto:gottfried.barrow@gmx.com\">gottfried.barrow@gmx.com</a>&gt;<br>\nI keep the comments from the cheap seats short(er).</p>\n<p>People from different segments of the market will have different <br>\nperspectives.</p>\n<p>Isabelle key players should want to maintain whatever market share it <br>\nhas among people tied into Emacs, but where there will be many new jEdit <br>\nusers to add user improvements to the jEdit interface, especially if the <br>\nIsabelle/jEdit prover hooks are documented, there will only be a few <br>\ndevelopers who can maintain the low-level connection between the <br>\nIsabelle prover and Emacs.</p>\n<p>Coq improving Emacs will never help Coq tie into the Windows market <br>\n(unless Coq ports it to Windows, which I haven't found to be the case). <br>\nCoq's Windows IDE is very simple and basic. It doesn't even have line <br>\nnumbers. Of course, if you need Coq's dependent types, then you know <br>\nwhat to be grateful for, similarly with Isabelle's simple types. The Coq <br>\nIDE is also significantly slower than jEdit's continuous prover when <br>\nstepping through small files. I didn't make a big file comparison.</p>\n<p>Coq also doesn't have a high-level language like Isar. They may have <br>\nmajority market share now, but Isabelle has gotten the edge on them as <br>\nfar as interface and language. A nice IDE and syntax is meaningless if a <br>\nprover has no engine, but that's not the context here.</p>\n<p>This is just my perspective, speaking from the cheap seats, as a member <br>\nof the Windows masses.</p>\n<p>Regards,<br>\nGB</p>\n<p>LINK: Coq on Windows. <br>\n<a href=\"http://coq.inria.fr/cocorico/Installation%20of%20Coq%20on%20Windows\">http://coq.inria.fr/cocorico/Installation%20of%20Coq%20on%20Windows</a></p>",
        "id": 294219620,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660896737
    },
    {
        "content": "<p>From: Gottfried Barrow &lt;<a href=\"mailto:gottfried.barrow@gmx.com\">gottfried.barrow@gmx.com</a>&gt;<br>\nMore commentary from the cheap seats, but I try to be an Isabelle <br>\nevangelist, because any big influx of new users would be beneficial to <br>\nwhat I want to do in the long run.</p>\n<p>First, the market is so untapped, at this point any success by any proof <br>\nassistant is beneficial to every other proof assistant.</p>\n<p>No replies to these kind of comments is a good thing, because I spend <br>\ntoo much time doing this kind of thing anyway.</p>\n<p>I look at this link for percentage of OS market share:<br>\n<a href=\"http://en.wikipedia.org/wiki/Usage_share_of_operating_systems\">http://en.wikipedia.org/wiki/Usage_share_of_operating_systems</a></p>\n<p>The percentage of Windows users, as a percentage of the total <br>\npercentages of Linux, Mac, and Windows users, is 88.7%.</p>\n<p>For simplicity, I assume that the potential market for users of proof <br>\nassistants is broken up the same as OS market share.</p>\n<p>And who are these potential users? Potentially, it's every mathematics <br>\nand computer science university student taking a single class on proof <br>\nassistants. Potentially, it's the complete integration of all upper <br>\nlevel proof-based mathematics courses with proof assistants.</p>\n<p>It used to be that most serious software and engineering development was <br>\ndone on Unix, but that's changed. Many or most engineering students, <br>\nsuch as electrical and mechanical majors, learn all their tools on <br>\nWindows. Likewise for physics and mathematics students. Likewise even <br>\nfor a large percentage of information sciences and computer science <br>\nstudents.</p>\n<p>You go into a university computer lab. They'll be 100 Windows machines,  <br>\n8 Macs going largely unused, and some server somewhere that a computer <br>\nscience student logs into to complete the requirements for the token <br>\nUnix based course.</p>\n<p>The 11.3%, at this time, can be considered the maximum developer and <br>\nuser base, and the 88.7% is the potential user base that, for all <br>\npractical purposes, has so far gone untapped.</p>\n<p>Regards,<br>\nGB</p>",
        "id": 294219632,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660896744
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nThis is in fact the most important observation.  In particular one needs <br>\nto avoid childish attitudes of \"my proof assistant is better than your's\".</p>\n<p>I usually try to give the people behind the HOL family and Coq some <br>\nhelpful hints, to improve the packaging and distribution of their systems. <br>\nFor the core functionality, they know better themselves.</p>\n<p>Makarius</p>",
        "id": 294219735,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660896811
    },
    {
        "content": "<p>From: \"Yannick Duchêne (Hibou57 )\" &lt;<a href=\"mailto:yannick_duchene@yahoo.fr\">yannick_duchene@yahoo.fr</a>&gt;<br>\nStandards always help there. Would be nice if they could be some standard  <br>\nto help interoperability between different proof edition and/or proof  <br>\nchecker systems.</p>\n<p>I can see two useful standard kinds.</p>\n<p>The first one, for humane readable proof. Isabelle do this with Isar  <br>\n(which I am still learning), I just know Coq a little bit, but I feel to  <br>\nremember it has similar thing. Some coordination could be an option and  <br>\nleads to a standard there? Isabelle's Isar is generic, I don't know if  <br>\nCoq's equivalent is too.</p>\n<p>The second one, for proof check and validation, not necessarily human  <br>\nreadable. This could be comparable to byte-code interpreted language, but  <br>\nfor proof. This would not necessarily byte-code based, but low level  <br>\nenough, so that any conforming system could check, validate and trust it  <br>\n(and import/use it!).</p>\n<p>After that two standards, multiple systems could be designed in a  <br>\nconforming way, either as automated prover, semi‑automated, or not  <br>\nautomated at‑all, with different kind of UI, user experience and so on,  <br>\nwithout any fears to see this diversity turning into a kind of jungle.</p>\n<p>There are so many systems among the few dominating ones which are Coq,  <br>\nIsabelle (and something named VDM? still in the place?) and Z  <br>\nenvironments. A common standard for interoperability would be nice.</p>\n<p>Markus says:</p>\n<p>“In particular one needs to avoid childish attitudes of \"my proof  <br>\nassistant is better than your's\".”</p>\n<p>Yes, I understand that point, but for the reasons mentioned above, dealing  <br>\nwith standards, I feel Isabelle may be more an option, because it is based  <br>\non SML (standard, formally specified and verified and with multiple  <br>\nimplementation, all unlike OCaml) and may be more standard‑ready with it's  <br>\nrather generic Isar language.</p>\n<p>That said, I don't mean Coq is not nice, I just give the reason why I  <br>\npersonally prefer to spend time learning Isabelle instead of Coq (I  <br>\nalready had a quick look at Coq and CoqIDE).</p>",
        "id": 294220114,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660897014
    },
    {
        "content": "<p>From: Lawrence Paulson &lt;<a href=\"mailto:lp15@cam.ac.uk\">lp15@cam.ac.uk</a>&gt;<br>\nStandards are possible when you have a universally agreed upon formalism, such as first-order logic: we have TPTP format. And there is a common format for SMT problems. But even with higher-order logic, there are a great many significant differences concerning the nature of types, for example. When you get to systems such as Isabelle and Coq, you have formalisms that are intrinsically different with almost no common ground between them.</p>\n<p>Larry Paulson</p>",
        "id": 294220377,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660897149
    },
    {
        "content": "<p>From: Gottfried Barrow &lt;<a href=\"mailto:gottfried.barrow@gmx.com\">gottfried.barrow@gmx.com</a>&gt;<br>\nFame and glory on Youtube is there for the taking because there's <br>\nnothing out there to show people what an Isabelle session in jEdit can <br>\nlook like.</p>\n<p>I guarantee you, at this point, all you're lacking is marketing. If <br>\nIsabelle was a commercial operation, you would already have a flashy <br>\npromotional video out there.</p>\n<p>For now, people don't need any instructional videos, they just need an <br>\noverview of what a proof assistant is, an overview of the associated <br>\ntools for Isabelle, some proof examples to show the interaction between <br>\nthe edit buffer and the output pane, to see what they can make their <br>\ninstallation look like, and see what tools and plugins they're supposed <br>\nto look for when after they've installed Isabelle. It'd be like a 3 to 5 <br>\nminute video.</p>\n<p>All the extra menu features that get added in the future, like <br>\nautomating the use of \"usedir\" and IsaMakefiles, aren't going to change <br>\nthe basic three panel view that's the main work space, at least not <br>\nbecause it's no good right now. That part of the interface and how Isar <br>\nis implemented in it is already professional quality. And it's not going <br>\nto change the different proof methods, like using intro and elim rules, <br>\nor automatic proof methods, or resorting to ATPs with Sledgehammer. <br>\nPeople could be shown a demo of those things in the same video.</p>\n<p>Regards,<br>\nGB</p>",
        "id": 294221383,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660897682
    }
]