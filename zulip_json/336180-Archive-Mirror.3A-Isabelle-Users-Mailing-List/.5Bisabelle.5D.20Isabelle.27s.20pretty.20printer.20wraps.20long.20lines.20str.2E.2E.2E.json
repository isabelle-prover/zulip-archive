[
    {
        "content": "<p>From: Lars Noschinski &lt;<a href=\"mailto:noschinl@in.tum.de\">noschinl@in.tum.de</a>&gt;<br>\nThis kind of output also often annoys me; although it is moderately<br>\nuseful for ==&gt; instead of /\\.</p>\n<p>-- Lars</p>",
        "id": 294270752,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660917127
    },
    {
        "content": "<p>From: Lawrence Paulson &lt;<a href=\"mailto:lp15@cam.ac.uk\">lp15@cam.ac.uk</a>&gt;<br>\nThere are certainly some strange things going on. The first output is normal; the second makes no sense even according to the rules used by the pretty printer; the third is believable, but it’s a little queer how it switches to this from the other two. I would guess that the second output involves some sort of interaction with jEdit.</p>\n<p>I have to say, however, that your suggested output would definitely be wrong: all propositional symbols in Isabelle associate to the right, and that output would suggest that they associated to the left.</p>\n<p>Pretty-printing relies on quite a few heuristics, and it’s not easy to ensure that nothing ugly can ever appear.</p>\n<p>Larry Paulson</p>",
        "id": 294270850,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660917170
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nI've made a quick test to compare the output of Proof General (which uses <br>\nthe classic Isabelle/ML implementation of Oppen's Pretty Printing by <br>\nLarry) versus Isabelle/jEdit (which uses my re-implementation of the same <br>\nin Isabelle/Scala).  Both seem to agree in all three cases.</p>\n<p>Larry, I think case (b) is due to the \"pos' mod emergencypos\" treatment, <br>\nwhere the indentation can jump around almost arbitrarily.</p>\n<p>I can't say what is really right or wrong for these classic Pretty <br>\nprinting algorithmns.  The Scala version is meant to imitate the ML one as <br>\nbest as possible.  A disagreement between the two, or a disagreement of <br>\nthe current versions with one from distant past would be a reason for <br>\nfurther investigations (which I don't see at the moment).</p>\n<p>Makarius</p>",
        "id": 294270955,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660917219
    },
    {
        "content": "<p>From: David Matthews &lt;<a href=\"mailto:dm@prolingua.co.uk\">dm@prolingua.co.uk</a>&gt;<br>\nPoly/ML uses exactly the same Oppen algorithm and some of these outputs <br>\nare reminiscent of problems that occurred when printing the output of <br>\nML.  The issue was not the implementation of the Oppen algorithm so much <br>\nas the code that actually generated the sequence of \"begin\", \"end\" and <br>\n\"break\" entries.  In particular, using nested \"begin\"/\"end\" entries <br>\ncould produce output similar to (3).</p>\n<p>David</p>",
        "id": 294271155,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660917283
    },
    {
        "content": "<p>From: Lawrence Paulson &lt;<a href=\"mailto:lp15@cam.ac.uk\">lp15@cam.ac.uk</a>&gt;<br>\nSo the second case is where the pretty printer decides to “break the rules” because it’s in a very tricky situation.</p>\n<p>There is no simple fix for this. Obviously it could be looked at if it were happening a lot.</p>\n<p>Larry</p>",
        "id": 294271193,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660917299
    },
    {
        "content": "<p>From: Brian Huffman &lt;<a href=\"mailto:huffman.brian.c@gmail.com\">huffman.brian.c@gmail.com</a>&gt;<br>\nThis is the typical behavior of the pretty printer on operators with<br>\n\"infixr\" notation. Operators with \"infixl\" notation work<br>\nsymmetrically:</p>\n<p>term \"a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a\"</p>\n<p>\"a + a + a + a + a + a + a + a + a + a +<br>\n a +<br>\n a +<br>\n a +<br>\n a +<br>\n a +<br>\n a +<br>\n a +<br>\n a +<br>\n a\"<br>\n  :: \"'a\"</p>\n<p>On the other hand, there are some kinds of notation that produce<br>\nnicely wrapped, full lines of output:</p>\n<p>term \"[a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a]\"</p>\n<p>\"[a, a, a, a, a, a, a, a, a, a, a, a, a,<br>\n  a, a, a, a, a, a, a, a, a, a, a, a, a,<br>\n  a, a, a]\"<br>\n  :: \"'a list\"</p>\n<p>The list syntax uses the grammar nonterminal \"args\", whose notation is<br>\ndefined in src/Pure/pure_thy.ML:</p>\n<p>(\"_args\",    typ \"'a =&gt; args =&gt; args\",    Delimfix \"_,/ _\")</p>\n<p>The production \"_args\" associates to the right, just like \"∧\", but has<br>\ndifferent linebreaks. The reason is the \"/\" in the mixfix pattern,<br>\nwhich allows a linebreak after the comma.</p>\n<p>We can redeclare the notation for infix operators to allow more linebreaks:</p>\n<p>no_notation plus (infixl \"+\" 65)<br>\nnotation plus (\"_ +/ _\" [65, 66] 65)<br>\nterm \"a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a+a\"</p>\n<p>\"a + a + a + a + a + a + a + a + a + a +<br>\n a + a + a + a + a + a + a + a + a\"<br>\n  :: \"'a\"</p>\n<p>The same trick works for infixr operators like Cons (\"#\") also:</p>\n<p>no_notation Cons (infixr \"#\" 65)<br>\nnotation Cons (\"_ #/ _\" [66, 65] 65)<br>\nterm \"a#a#a#a#a#a#a#a#a#a#a#a#a#a#a#a#a#a#a#a#a#a#a#a#xs\"</p>\n<p>\"a # a # a # a # a # a # a # a # a # a # a # a #<br>\n a # a # a # a # a # a # a # a # a # a # a # a #<br>\n xs\"<br>\n  :: \"'a list\"</p>\n<p>I wasn't able to get it to work for conjunction, though.</p>\n<p>no_notation conj (infixr \"∧\" 35)<br>\nnotation conj (\"_ ∧/ _\" [35, 36] 35)<br>\nterm \"a∧a∧a∧a∧a∧a∧a∧a∧a∧a∧a∧a∧a∧a∧a∧a∧a∧a∧a∧a∧a∧a∧a∧a∧a\"</p>\n<p>I suspect that more no_notation statements might be required for conj,<br>\nsince it also has the ascii \"&amp;\" syntax. Maybe someone else can get<br>\nthis one to work.</p>\n<ul>\n<li>Brian</li>\n</ul>",
        "id": 294271242,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660917312
    },
    {
        "content": "<p>From: Dmitriy Traytel &lt;<a href=\"mailto:traytel@in.tum.de\">traytel@in.tum.de</a>&gt;<br>\nCool!</p>\n<p>If I understand no_notation correctly, one has to reproduce the option <br>\nto the notation command to be undone precisely. Hence</p>\n<p>no_notation (xsymbols) conj (infixr \"∧\" 35)</p>\n<p>makes it also work for conjunction.</p>\n<p>Dmitriy</p>",
        "id": 294271275,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660917323
    },
    {
        "content": "<p>From: Brian Huffman &lt;<a href=\"mailto:huffman.brian.c@gmail.com\">huffman.brian.c@gmail.com</a>&gt;<br>\nGreat, thanks for figuring this out!</p>\n<p>By the way, I discovered some more clues in the Isabelle sources about<br>\nhow the default infixr/infixl notation declarations work. In<br>\nsrc/Pure/Syntax/mixfix.ML, we find</p>\n<p>fun mk_infix sy ty c p1 p2 p3 =<br>\n      [Syntax_Ext.Mfix (\"op \" ^ sy, ty, c, [], 1000),<br>\n       Syntax_Ext.Mfix (\"(_ \" ^ sy ^ \"/ _)\", ty, c, [p1, p2], p3)];</p>\n<p>so that</p>\n<p>notation foo (infixr \"&amp;\" 35)</p>\n<p>is exactly equivalent to</p>\n<p>notation foo (\"op &amp;\" 1000)<br>\nnotation foo (\"(_ &amp;/ _)\" [36, 35] 35)</p>\n<p>Notice that the line-breaking slash is already there! So it's not the<br>\npresence of the slash, but rather the <em>absence</em> of the grouping<br>\nparentheses, that lets us avoid the space-wasting layout behavior<br>\npointed out by David.</p>\n<ul>\n<li>Brian</li>\n</ul>",
        "id": 294271288,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660917329
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nOn Fri, 28 Mar 2014, Brian Huffman wrote:</p>\n<blockquote>\n<p>By the way, I discovered some more clues in the Isabelle sources about<br>\nhow the default infixr/infixl notation declarations work. In<br>\nsrc/Pure/Syntax/mixfix.ML, we find</p>\n<p>fun mk_infix sy ty c p1 p2 p3 =<br>\n     [Syntax_Ext.Mfix (\"op \" ^ sy, ty, c, [], 1000),<br>\n      Syntax_Ext.Mfix (\"(_ \" ^ sy ^ \"/ _)\", ty, c, [p1, p2], p3)];</p>\n</blockquote>\n<p>The same is even in the isar-ref manual (7.2 Mixfix annotations), which I <br>\nhave updated some years ago from much older material to make sure that the <br>\nsources and documentation agree on that.</p>\n<p>David Matthews and Larry Paulson seem to be the veterans on Oppen-style <br>\npretty printing -- they were sharing an office in Cambridge in the mid <br>\n1980-ies.  I wonder how this is related to the Format module in OCaml.</p>\n<p>When I reworked the Isabelle pretty printing infrastructure for the first <br>\ntime in 1993, I already found the infixes defined as above.  My only <br>\nchange was the introduction of the unoriented \"infix\", in addition to <br>\n\"infixl\" and \"infixr\".  I never questioned the general approach.</p>\n<blockquote>\n<p>Notice that the line-breaking slash is already there! So it's not the <br>\npresence of the slash, but rather the <em>absence</em> of the grouping <br>\nparentheses, that lets us avoid the space-wasting layout behavior <br>\npointed out by David.</p>\n</blockquote>\n<p>There might be other consequences of the change that remain to be seen.</p>\n<p>In the experiment earlier today, the \"xsymbols\" variant got in the way. So <br>\nonce again it is time for the ritual: Are there any important uses of <br>\nASCII replacement syntax in addition to the normal symbols? (In the past <br>\nthe default was swapped.)  Or is it time to discontinue all \"xsymbols\" <br>\nprint mode syntax and make it the one and only one default.</p>\n<p>Makarius</p>",
        "id": 294271305,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660917335
    },
    {
        "content": "<p>From: Lawrence Paulson &lt;<a href=\"mailto:lp15@cam.ac.uk\">lp15@cam.ac.uk</a>&gt;<br>\nOppen’s original algorithm is quite rigid and often delivers much weirder results than these. I added some hacks to make the output more natural, but it’s complicated to get right. David’s implementation might differ in some respects.</p>\n<p>Larry</p>",
        "id": 294271332,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660917342
    },
    {
        "content": "<p>From: Michael Norrish &lt;<a href=\"mailto:Michael.Norrish@nicta.com.au\">Michael.Norrish@nicta.com.au</a>&gt;<br>\nIn HOL4, which also uses the Oppen primitives, users can specify that they want the Oppen blocks around each \"phrase\", meaning that the blocks would go around each a&amp;a, or around a series of operators with the same name, meaning that there would be just one block around all the conjunctions.</p>\n<p>This feature was added to handle exactly the behaviour that Dave saw.  The same issue can arise with large tuples.</p>\n<p>Michael</p>\n<hr>\n<p>The information in this e-mail may be confidential and subject to legal professional privilege and/or copyright. National ICT Australia Limited accepts no liability for any damage caused by this email or its attachments.</p>",
        "id": 294271359,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660917348
    },
    {
        "content": "<p>From: David Greenaway &lt;<a href=\"mailto:david.greenaway@nicta.com.au\">david.greenaway@nicta.com.au</a>&gt;<br>\nHi all,</p>\n<p>I have noticed a behaviour of Isabelle 2013-2's pretty-printer that I do<br>\nnot expect, find undesirable, and am guessing is unintended by the<br>\noriginal developer. The behaviour relates to how the pretty-printer<br>\nwraps long lines.</p>\n<p>In particular, if I write:</p>\n<p>lemma \"a ∧ a ∧ a ∧ a ∧ a ∧ a ∧ a ∧ a ∧ a ∧ a ∧ a ∧ a ∧ a ∧ a ∧ a ∧ a ∧ a ∧ a ∧ a ∧ a ∧ a ∧ a ∧ a ∧ a ∧ a ∧ a ∧ a ∧ a ∧ a ∧ a\"</p>\n<p>Then, depending on the precise width of the \"Output\" window of jEdit,<br>\nthis will be pretty-printed as either:</p>\n<p>1. a ∧ a ∧ a ∧ a ∧ a ∧ a ∧ a ∧ a ∧ a ∧ a ∧ a ∧<br>\n      a ∧ a ∧ a ∧ a ∧ a ∧ a ∧ a ∧ a ∧ a ∧ a ∧ a ∧ a ∧ a ∧ a ∧ a ∧ a ∧ a ∧ a ∧ a</p>\n<p>or:</p>\n<p>1. a ∧ a ∧ a ∧ a ∧ a ∧ a ∧ a ∧ a ∧ a ∧ a ∧ a ∧<br>\n   a ∧ a ∧ a ∧ a ∧ a ∧ a ∧ a ∧ a ∧ a ∧ a ∧ a ∧ a ∧ a ∧ a ∧ a ∧ a ∧ a ∧ a ∧ a</p>\n<p>or:</p>\n<p>1. a ∧<br>\n      a ∧<br>\n      a ∧<br>\n      a ∧<br>\n      a ∧<br>\n      a ∧<br>\n      a ∧<br>\n      a ∧<br>\n      a ∧<br>\n      a ∧<br>\n      a ∧<br>\n      a ∧ a ∧ a ∧ a ∧ a ∧ a ∧ a ∧ a ∧ a ∧ a ∧ a ∧ a ∧ a ∧ a ∧ a ∧ a ∧ a ∧ a ∧ a</p>\n<p>Screenshots are attached.</p>\n<p>My personal desire for the output would be:</p>\n<p>1. a ∧ a ∧ a ∧ a ∧ a ∧ a ∧ a ∧ a ∧ a ∧ a ∧ a ∧ a ∧ a ∧ a ∧ a ∧ a ∧ a ∧ a ∧<br>\n      a ∧ a ∧ a ∧ a ∧ a ∧ a ∧ a ∧ a ∧ a ∧ a ∧ a ∧ a</p>\n<p>but the first output above is also fine. Output (2) is undesirable, in<br>\nmy opinion, while output (3) is least desirable.</p>\n<p>I suspect that the cause is in the pretty-printing algorithm itself,<br>\nand not the Scala implementation of it, because I have also observed the<br>\nthird output in LaTeX documents in the past (which tends to be a real<br>\npain when space is at a premium).</p>\n<p>Is this behaviour intended? If not, does anyone have any ideas as to<br>\nwhat the problem might be? Is it worth me investigating further, or will<br>\nI just be stepping on other people's toes?</p>\n<p>Thanks so much,<br>\nDavid</p>\n<hr>\n<p>The information in this e-mail may be confidential and subject to legal professional privilege and/or copyright. National ICT Australia Limited accepts no liability for any damage caused by this email or its attachments.<br>\n<a href=\"/user_uploads/14278/xKpbyULmB4A8S4pa24BUV_9O/c.png\">c.png</a><br>\n<a href=\"/user_uploads/14278/TefaGRvM2dmwfx9rmibXnYNI/b.png\">b.png</a><br>\n<a href=\"/user_uploads/14278/3XbQy9lX4KpzgOpP8rPaqh1J/a.png\">a.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/14278/xKpbyULmB4A8S4pa24BUV_9O/c.png\" title=\"c.png\"><img src=\"/user_uploads/14278/xKpbyULmB4A8S4pa24BUV_9O/c.png\"></a></div><div class=\"message_inline_image\"><a href=\"/user_uploads/14278/TefaGRvM2dmwfx9rmibXnYNI/b.png\" title=\"b.png\"><img src=\"/user_uploads/14278/TefaGRvM2dmwfx9rmibXnYNI/b.png\"></a></div><div class=\"message_inline_image\"><a href=\"/user_uploads/14278/3XbQy9lX4KpzgOpP8rPaqh1J/a.png\" title=\"a.png\"><img src=\"/user_uploads/14278/3XbQy9lX4KpzgOpP8rPaqh1J/a.png\"></a></div>",
        "id": 294273636,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660917999
    }
]