[
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nGreat to see such work.</p>\n<p>Note that Isabelle/HOL is just one (big and important) library in<br>\nIsabelle. Other libraries can be done at any time, without requiring<br>\nmutation of the system: it is sufficiently flexible by design.</p>\n<p>Historically, one of the first Isabelle applications was actually<br>\nMartin-Löf Type Theory (in an early version): see Isabelle/CTT.</p>\n<p>Makarius</p>",
        "id": 294739950,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661191170
    },
    {
        "content": "<p>From: Dominique Unruh &lt;<a href=\"mailto:unruh@ut.ee\">unruh@ut.ee</a>&gt;<br>\nHi,</p>\n<p>I have been wondering about how well Isabelle can be used for reasoning<br>\nusing type theory.<br>\nOf course, it is possible in principle as Isabelle/CTT shows.<br>\nBut looking at Isabelle/CTT, I see that typing judgments are encoded as<br>\nassumptions of axioms/lemmas<br>\n(instead of being handled by the Isabelle core as in Isabelle/HOL).<br>\nI see now way around this because the type system integrated in the<br>\nIsabelle core does not support dependent types.</p>\n<p>I wonder how well this can be used in practice?<br>\nFor example, pattern matching (e.g. in simp, or simply in rule) in HOL will<br>\nautomatically check/instantiate all types.<br>\nBut if type judgments are propositions, this needs to be handled using<br>\nexplicit subgoals.<br>\n(For comparison: type classes are integrated into the Isabelle core even<br>\nthough it would, as far as I can see, be totally fine to just use a single<br>\nsort and add preconditions of the form \"bla_class TYPE('a)\" to all lemmas.<br>\nBut I would expect that this is much more cumbersome. Yet this is what we<br>\nessentially do in Isabelle/CTT.)</p>\n<p>Now, I haven't used Isabelle/CTT myself, so I may be overestimating the<br>\ndifficulties arising from the above.<br>\nBut my feeling is that it will be difficult to get a nicely usable system<br>\n(comparable to what we can do in Isabelle/HOL).</p>\n<p>Does anyone have experiences in this direction? I would be interested in<br>\nhearing about them (especially if I'm wrong :) ).</p>\n<p>Best wishes,<br>\nDominique.</p>",
        "id": 294739979,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661191182
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nOn 17/08/18 15:47, Dominique Unruh wrote:</p>\n<blockquote>\n<p>I have been wondering about how well Isabelle can be used for reasoning<br>\nusing type theory.<br>\nOf course, it is possible in principle as Isabelle/CTT shows.<br>\nBut looking at Isabelle/CTT, I see that typing judgments are encoded as<br>\nassumptions of axioms/lemmas<br>\n(instead of being handled by the Isabelle core as in Isabelle/HOL).<br>\nI see now way around this because the type system integrated in the<br>\nIsabelle core does not support dependent types.</p>\n</blockquote>\n<p>Isabelle/Pure was invented to support dependent types, but they are<br>\nformally just terms. The types of Pure are just abstract syntactic<br>\ncategories: it is merely accidental that HOL uses these directly as types.</p>\n<blockquote>\n<p>I wonder how well this can be used in practice?<br>\nFor example, pattern matching (e.g. in simp, or simply in rule) in HOL will<br>\nautomatically check/instantiate all types.<br>\nBut if type judgments are propositions, this needs to be handled using<br>\nexplicit subgoals.</p>\n</blockquote>\n<p>This touches old questions about \"soft type systems\" in Isabelle/Pure.<br>\nMore than 10 years ago, I have added explicit programming interfaces for<br>\nthat, but they are not yet used as ambitiously as the idea behind it.</p>\n<p>Since John Harrison has recently proclaimed (again) that we should \"make<br>\nset theory great again\" <a href=\"http://aitp-conference.org/2018/slides/JH.pdf\">http://aitp-conference.org/2018/slides/JH.pdf</a><br>\nsome colleagues have started to re-open such obvious issues.</p>\n<p>In the same line of thought, I have recently proposed to develop<br>\nsomething for set-theory that is analogous to TypeScript as soft<br>\ntype-system over JavaScript:<br>\n<a href=\"https://sketis.net/2018/isabelle-vscode-and-the-language-server-protocol-at-curry-club-augsburg\">https://sketis.net/2018/isabelle-vscode-and-the-language-server-protocol-at-curry-club-augsburg</a></p>\n<p>See page 3 of the Slides, minute 6:20 in the Video (in German); there is<br>\nalso a brief discussion concerning HoTT.</p>\n<p>Makarius</p>",
        "id": 294740005,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661191188
    },
    {
        "content": "<p>From: Lawrence Paulson &lt;<a href=\"mailto:lp15@cam.ac.uk\">lp15@cam.ac.uk</a>&gt;<br>\nI'm the author of Isabelle/CTT, and I see it is adhering to the spirit of Martin-Löf's original calculus. He didn't imagine any \"core\" to deal with types, which in any case, play the role of logical formulas and therefore cannot be dealt with automatically.</p>\n<p>It's clear that modern type theory systems implement a lot of support for the types that behave like types, to such an extent that the idea of propositions as types is somewhat obscured. This seems to be necessary in order to cope with proofs of reasonable size. Nothing has been done with Isabelle CTT since 1986 or so, so there is a lot of catching up to do.<br>\nLarry</p>",
        "id": 294740021,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661191194
    },
    {
        "content": "<p>From: Joshua Chen &lt;<a href=\"mailto:joshua.chen@uni-bonn.de\">joshua.chen@uni-bonn.de</a>&gt;<br>\nI'm the author of the previously-mentioned HoTT object <br>\nlogic, and though I'm still quite unfamiliar with many <br>\naspects of both HoTT and Isabelle I thought I could share <br>\nwhat I've found so far.</p>\n<p>The state of things is just about as you describe: due to <br>\nthe lack of native support for dependent types we cannot <br>\nembed the HoTT types on the meta-level, hence everything <br>\nhas to be on the object level.<br>\nThis means that every term appearing in a statement does <br>\nindeed yield typing judgments which need to be proved <br>\nexplicitly as ancillary subgoals, cluttering the goal <br>\nstate.<br>\nIn the current version of my HoTT logic, this issue is <br>\nalleviated slightly with somewhat rudimentary Eisbach <br>\nmethods that are able to perform type inference for most <br>\nof the simpler cases, although one must still call such <br>\nmethods explicitly.<br>\nBut this means one can usually focus on proving the core <br>\nsubgoals, leaving the ancillary typing subgoals to the end <br>\nto be taken care of automatically.<br>\nIsabelle/CTT handles such type inferences in a very <br>\nsimilar manner, there things are sometimes easier due to <br>\nextensionality of equality and the lack of universe types.</p>\n<p>An interesting difficulty for HoTT that I've faced arises <br>\nin relation to proving inhabitation of a type.<br>\nIf one already knows from \"paper\" work the form of such a <br>\nproof term, this is usually straightforward.<br>\nHowever arguably much of the utility of a proof assistant <br>\narises from its aid in deriving such a proof term in the <br>\nfirst place, and as far as I can tell the only way to do <br>\nthis is with <code>schematic_goal</code>.<br>\nSuch derivations often require fixing specific variables <br>\nin order to apply an instantiated elimination rule, while <br>\nensuring the variable we want to derive for stays <br>\nschematic, in order to continue derivation in a <br>\n\"sub-schematic goal\".<br>\nBut so far I have not been able to find a way to do this; <br>\nwe cannot nest <code>schematic_goal</code> commands, nor does <br>\n<code>subgoal</code> help because it converts all schematic variables <br>\nto fixed free variables.</p>\n<p>It's certainly safe to say that using any of the type <br>\ntheory object logics will at this stage not be as smooth <br>\nas using Isabelle/HOL, though I would hope at some point <br>\nto see how to write better methods to interface more <br>\ndirectly with the ML and make the proof process in HoTT <br>\neasier.</p>\n<p>Still very much a work in progress! :)</p>\n<p>Best wishes,<br>\nJosh</p>",
        "id": 294740462,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661191335
    }
]