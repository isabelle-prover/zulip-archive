[
    {
        "content": "<p>From: mailing-list anonymous &lt;<a href=\"mailto:mailing.list.anonymous@gmail.com\">mailing.list.anonymous@gmail.com</a>&gt;<br>\nDear All,</p>\n<p>This may be another naive question in relation to Isabelle/ML sources.</p>\n<p>[1] contains the following statement in section 6:</p>\n<p>\"The relation between the two constants is obtained purely syntactically:<br>\nwe start with the type (e.g., (β → γ) → bool for inj) and replace every<br>\ntype that does not change (γ and bool) by the identity relation =, every<br>\nnonnullary type constructor by its corresponding relator (→ by ==&gt; and list<br>\nby list_all2) and every type that changes by the corresponding transfer<br>\nrelation (β by T)\"</p>\n<p>Essentially, the statement above outlines a simple procedure for the<br>\nautomatic construction of the parametricity relations based on the types of<br>\nterms for which they need to be derived (under some mild assumptions). It<br>\nshould enable the design of a function similar to</p>\n<p>\"fun typ_to_pr T Tts : typ -&gt; (typ * term) list -&gt; term\"</p>\n<p>that converts a given type T into a parametricity relation, under the<br>\nassumptions that Tts provides a lookup table that maps the types that<br>\nchange to the terms that represent appropriate relations (of course, side<br>\nconditions can be introduced later, as required).</p>\n<p>I would like to understand if there exists an implementation of a similar<br>\nfunction somewhere in the Isabelle/ML source code. I did look around before<br>\nasking the question, but I am still not familiar with the entire<br>\nIsabelle/ML code base. This seems like a very likely candidate for<br>\nsomething that I cannot seem to notice and, I thought that there would be<br>\nmany regular users of the mailing list who could point me in the<br>\nright direction without having to do any investigation.</p>\n<p>Also, if this function exists, I am curious to know whether/why it is not<br>\navailable to the end users. It would be useful to be able to generate a<br>\nparametricity relation given two terms of matching types automatically.</p>\n<p>[1] O. Kunčar and A. Popescu, “From Types to Sets by Local Type Definitions<br>\nin Higher-Order Logic,” in Interactive Theorem Proving, J. C. Blanchette<br>\nand S. Merz, Eds. Cham: Springer International Publishing, 2016, vol. 9807,<br>\npp. 200–218.</p>",
        "id": 294756223,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661197609
    },
    {
        "content": "<p>From: mailing-list anonymous &lt;<a href=\"mailto:mailing.list.anonymous@gmail.com\">mailing.list.anonymous@gmail.com</a>&gt;<br>\nDear All,</p>\n<p>I would like to provide a reply to one of my own old questions. Apparently,<br>\nthere are two files in the Isabelle/HOL Library that provide the<br>\nfunctionality that I was seeking: \"HOL-Library.Conditional_Parametricity.ML\"<br>\nand \"HOL-Library.Conditional_Parametricity.thy\". Moreover, the<br>\nparametricity property is also proven automatically. Annoyingly, until<br>\nrecently, I was not aware of the existence of these files and, by now, I<br>\nhave written my own module that provides the functionality that is nearly<br>\nidentical to the functionality of the aforementioned theories :-). I am<br>\nwriting this reply, primarily, to minimize the risk of someone else getting<br>\ninto the same trap. I am also curious as to why this module has not been<br>\nused anywhere in the source files of Isabelle/HOL. In my opinion, it would<br>\nbe useful to update the existing source files to raise the awareness of the<br>\nexistence of the module and minimize the boilerplate code. Also, in my<br>\nview, it would be useful is someone could integrate it with the Transfer<br>\npackage.</p>\n<p>Thank you</p>",
        "id": 294764774,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661201408
    }
]