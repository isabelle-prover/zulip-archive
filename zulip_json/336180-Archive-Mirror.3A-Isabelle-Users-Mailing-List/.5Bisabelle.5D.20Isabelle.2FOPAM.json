[
    {
        "content": "<p>From: Lars Hupel &lt;<a href=\"mailto:hupel@in.tum.de\">hupel@in.tum.de</a>&gt;<br>\nI'm circling back to an old email thread about OCaml support in<br>\nIsabelle:<br>\n&lt;<a href=\"https://mailmanbroy.informatik.tu-muenchen.de/pipermail/isabelle-dev/2018-May/007874.html\">https://mailmanbroy.informatik.tu-muenchen.de/pipermail/isabelle-dev/2018-May/007874.html</a>&gt;</p>\n<p>The consensus, as far as I understood it, was to bundle OPAM as an<br>\nIsabelle component.</p>\n<p>While Ubuntu 18.04 LTS still ships a \"good\" compiler version (4.05.0), I<br>\nthink this is unfinished business and should be addressed. I'm pretty<br>\nsure Ubuntu 19.04 will ship a newer version, and people on other<br>\nplatforms like Arch, Fedora and macOS may already have one that doesn't<br>\nwork. Additionally, while preparing distribution upgrades through our<br>\nchair infrastructure, I'd really like to have a dependable OCaml version.</p>\n<p>I have prepared a component that attempts to do just that:</p>\n<p>&lt;<a href=\"https://github.com/larsrh/isabelle-opam\">https://github.com/larsrh/isabelle-opam</a>&gt;</p>\n<p>Steps to use it:</p>\n<p>1) Clone the repository.<br>\n2) Run \"./get_opam.sh\", which will download the latest OPAM version<br>\n(2.0) for all supported platforms and verifies the checksum.<br>\n3) Register as a component in \"~/.isabelle/etc/components\".<br>\n4) Run \"isabelle opam_setup\".<br>\n5) To try it out, build the session \"HOL-Codegenerator_Test\", which<br>\nshould successfully build the theory \"Code_Test_OCaml\".</p>\n<p>This will:</p>\n<ul>\n<li>automatically set the \"ISABELLE_OCAML\" and \"ISABELL_OCAMLC\" variables</li>\n<li>provide the Isabelle tools \"ocaml\" and \"ocamlc\"</li>\n<li>\n<p>upon use, download and install OCaml 4.05.0 into \"~/.isabelle/opam\" so<br>\nthat it doesn't interfere with any user installation</p>\n</li>\n<li>\n<p>read the \"ISABELLE_OCAML_VERSION\" variable and pick the compiler<br>\nversion accordingly</p>\n</li>\n</ul>\n<p>(Un)known issues:</p>\n<ul>\n<li>\n<p>may not be thread-safe (to be investigated; it appears that OPAM locks<br>\nits workspace)</p>\n</li>\n<li>\n<p>can't install packages yet (like \"zarith\"), but for 4.05.0 that's<br>\nunproblematic</p>\n</li>\n</ul>\n<p>All the heavy lifting is done by OPAM, which means the component just<br>\nhas maybe 70 lines of scripts.</p>\n<p>So far, I have not yet uploaded this to<br>\n&lt;<a href=\"https://isabelle.in.tum.de/components/\">https://isabelle.in.tum.de/components/</a>&gt;, and I don't plan to do that<br>\njust yet.</p>\n<p>Next: Packaging stack, because the Haskell version mess is even bigger<br>\nthan for OCaml.</p>",
        "id": 294745329,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661193213
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nOn 05/10/18 17:52, Lars Hupel wrote:</p>\n<blockquote>\n<p>The consensus, as far as I understood it, was to bundle OPAM as an<br>\nIsabelle component.</p>\n<p>I have prepared a component that attempts to do just that:</p>\n<p>&lt;<a href=\"https://github.com/larsrh/isabelle-opam\">https://github.com/larsrh/isabelle-opam</a>&gt;</p>\n</blockquote>\n<p>I will take a look at it soon -- I would like to understand how OPAM<br>\nworks, and see how to fit it perfectly into the Isabelle environment.</p>\n<blockquote>\n<p>Next: Packaging stack, because the Haskell version mess is even bigger<br>\nthan for OCaml.</p>\n</blockquote>\n<p>That is another old question. As it happens, I've just had problems with<br>\nthe slightly odd AFP/HLDE session and its Haskell code generation and<br>\ncompilation (I did not pin them down yet).</p>\n<p>Moreover, someone else approached me to connect Isabelle to Haskell in a<br>\nbetter way. I still have no idea how distribution packaging really works<br>\nin that community, but I will look through this in the coming days.</p>\n<p>There is another meta-problem: we need to formalize maintenance of<br>\nIsabelle components better, such that (1) all administrative sources are<br>\nin Admin/components/ in the Isabelle repository, (2) preferably tools in<br>\nIsabelle/Scala instead of odd shell scripts (e.g. see \"isabelle<br>\nbuild_jdk\"), and (3) somehow automated multi-platform builds on one of<br>\nthese continuous-testing platforms (without introducing a strong<br>\ndependence on big commercial players that are coming and going over the<br>\nyears).</p>\n<p>Makarius</p>",
        "id": 294745348,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661193219
    },
    {
        "content": "<p>From: Lars Hupel &lt;<a href=\"mailto:hupel@in.tum.de\">hupel@in.tum.de</a>&gt;</p>\n<blockquote>\n<p>I will take a look at it soon -- I would like to understand how OPAM<br>\nworks, and see how to fit it perfectly into the Isabelle environment.</p>\n</blockquote>\n<p>In the meantime I have received some hints from an OCaml expert. In <br>\nprinciple this should work, but of course it requires some actual <br>\n\"battle testing\" by users.</p>\n<blockquote>\n<p>There is another meta-problem: we need to formalize maintenance of<br>\nIsabelle components better, such that (1) all administrative sources <br>\nare<br>\nin Admin/components/ in the Isabelle repository, (2) preferably tools <br>\nin<br>\nIsabelle/Scala instead of odd shell scripts (e.g. see \"isabelle<br>\nbuild_jdk\"), and (3) somehow automated multi-platform builds on one of<br>\nthese continuous-testing platforms (without introducing a strong<br>\ndependence on big commercial players that are coming and going over the<br>\nyears).</p>\n</blockquote>\n<p>(3) is probably the hardest issue. There are some big players in the <br>\nmarket of hosted continuous integration and build services, but the <br>\nmulti-platform aspect is usually lacking.</p>\n<p>Currently, I'm only aware of two free services that can produce macOS <br>\nand Windows binaries; these are Travis CI and Appveyor, respectively. <br>\nBoth have been around for a while and offer only low-end virtual <br>\nmachines. For compiling components, they should be sufficient, though.</p>\n<p>Linux has many more options. Travis CI can build Linux, as can its <br>\ndirect competitors Circle CI and Drone. But there's also openSUSE Build <br>\nService that offers many distributions.</p>\n<p>I don't really see a problem with relying on third-party vendors here: <br>\nif one of them disappears, we'd have to migrate. That's still better <br>\nthan what we have now, by requiring component authors to assemble <br>\nbinaries from various machines with only incidental, i.e. not managed, <br>\nconfiguration.</p>",
        "id": 294745386,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661193237
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nThe \"managed configuration\" appears to be a selling point for these<br>\nservices, but we've never had real problems without it. I can understand<br>\nwhy people out there use it, but for us it is irrelevant.</p>\n<p>Makarius</p>",
        "id": 294745436,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661193243
    },
    {
        "content": "<p>From: Lars Hupel &lt;<a href=\"mailto:hupel@in.tum.de\">hupel@in.tum.de</a>&gt;<br>\nIt's very much relevant, and we do (and did) have real problems with <br>\nincidental configuration. The initial email in this thread is evidence <br>\nof that.</p>",
        "id": 294745453,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661193250
    },
    {
        "content": "<p>From: Lars Hupel &lt;<a href=\"mailto:hupel@in.tum.de\">hupel@in.tum.de</a>&gt;<br>\nAdditionally, the entire concept of packaged Isabelle components is an<br>\nattempt to avoid incidental configuration.</p>",
        "id": 294745471,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661193256
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nThe concept of Isabelle components is somehow \"polymorphic\" over a range<br>\nof OS versions, with minimal assumptions about the target platform.</p>\n<p>Its own build process requires a few more assumptions, but not very<br>\nmuch, e.g. a certain OS version that is not too old nor too young.<br>\nUsually we've had just some odd machines around the corner that were<br>\navailable for builds, and used by many other things as well.</p>\n<p>The general model is that Isabelle (or its administrative build tasks)<br>\nprovide their own critical requirements in a mostly self-contained way.</p>\n<p>Makarius</p>",
        "id": 294745495,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661193268
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nOn 05/10/18 17:52, Lars Hupel wrote:</p>\n<blockquote>\n<p>I have prepared a component that attempts to do just that:</p>\n<p>&lt;<a href=\"https://github.com/larsrh/isabelle-opam\">https://github.com/larsrh/isabelle-opam</a>&gt;</p>\n</blockquote>\n<p>I have briefly looked through this: it looks mostly fine, but there are<br>\nalso some odd details that need to be revisited. I will come back to<br>\nthis later: next week I will discuss with some Isabelle users Haskell,<br>\nnot OCaml/OPAM. Afterwards it should be clearer what is abstractly<br>\nrequired, and how OCaml and Haskell can be unified within Isabelle<br>\neventually.</p>\n<blockquote>\n<p>(Un)known issues:<br>\n- may not be thread-safe (to be investigated; it appears that OPAM locks<br>\nits workspace)</p>\n</blockquote>\n<p>That is not a problem. System configuration (e.g. \"isabelle components<br>\n-a\") is done outside the running Isabelle application, with an implicit<br>\nassumption that nothing bad happens concurrently. We even have that<br>\nassumption for \"isabelle build\".</p>\n<blockquote>\n<ul>\n<li>can't install packages yet (like \"zarith\"), but for 4.05.0 that's<br>\nunproblematic</li>\n</ul>\n</blockquote>\n<p>That is a high-level question how Isabelle code generation uses proper<br>\nintegers. I don't know what is really canonical in terms of OCaml.</p>\n<blockquote>\n<p>Next: Packaging stack, because the Haskell version mess is even bigger<br>\nthan for OCaml.</p>\n</blockquote>\n<p>I have started using the Haskell \"stack\" tool and actually like it. It<br>\nlooks like a professional tool, where everything just works and no<br>\ntinkering is required: e.g. I could build a demo application on Linux,<br>\nMac OS X, Windows on the spot, without even thinking about the usual<br>\nproblems.</p>\n<p>Now I only need to tinker with VSCode to get a Haskell IDE. That<br>\nplatform seems to be defined for old-fashioned Emacs/vi-like tinkering ...</p>\n<p>Makarius</p>",
        "id": 294745585,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661193305
    },
    {
        "content": "<p>From: Lars Hupel &lt;<a href=\"mailto:hupel@in.tum.de\">hupel@in.tum.de</a>&gt;</p>\n<blockquote>\n<p>That is not a problem. System configuration (e.g. \"isabelle components<br>\n-a\") is done outside the running Isabelle application, with an implicit<br>\nassumption that nothing bad happens concurrently. We even have that<br>\nassumption for \"isabelle build\".</p>\n</blockquote>\n<p>True, but \"isabelle build\" (and PIDE) may call out to \"isabelle ocaml\" <br>\nmultiple times in parallel. That's the issue here. Currently I have set <br>\nit up that every call to \"isabelle ocaml\" will install the necessary <br>\nOCaml version if not present. This may end up installing OCaml in <br>\nparallel. But this can easily be changed to just <em>check</em> the presence <br>\nand bail out if it's absent.</p>\n<blockquote>\n<p>That is a high-level question how Isabelle code generation uses proper<br>\nintegers. I don't know what is really canonical in terms of OCaml.</p>\n</blockquote>\n<p>What we do right now is acceptable until 4.05.0. After that, the new <br>\nthing, as far as I understand it, is \"zarith\", but the legacy \"num\" is <br>\nstill available as a package: &lt;<a href=\"https://opam.ocaml.org/packages/num/\">https://opam.ocaml.org/packages/num/</a>&gt;</p>",
        "id": 294745602,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661193311
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nThat is one of the open problems: it is generally fragile to make a<br>\ndynamic installation of a tool that pretends to be there, but isn't.<br>\nThere could be many other odd effects, such as bad or absent network<br>\nconnection.</p>\n<p>Anyway, I will continue looking at how these things work (\"opam\" and<br>\n\"stack\"). At the end it should be plain and simple and robust as usual.</p>\n<p>(BTW, I failed to setup any Haskell IDE for VSCode. It shows that these<br>\nguys still have a lot of fundamental problems to solve.)</p>\n<p>Makarius</p>",
        "id": 294745613,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661193317
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nBack to the start of this thread.</p>\n<p>First note that x86-linux is actually obsolete for Isabelle: the<br>\nunderlying OS will always be x86_64.</p>\n<p>Did you find a proper Windows version of OPAM anywhere? It seems to be<br>\nin the making, maybe some of these OCaml support companies already have<br>\nit. If not, we need to modify the plan slightly, to make a more abstract<br>\n\"ocaml_setup\" tool for Isabelle that will do something else for<br>\nWindows/Cygwin (which we bundle anyway).</p>\n<p>Makarius</p>",
        "id": 294745625,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661193323
    },
    {
        "content": "<p>From: Lars Hupel &lt;<a href=\"mailto:hupel@in.tum.de\">hupel@in.tum.de</a>&gt;<br>\nI tried to, but I didn't find anything satisfactory. Everybody keeps <br>\nsaying \"experimental\", \"soon\" etc.</p>\n<p>There's this question on Stack Overflow <br>\n&lt;<a href=\"https://stackoverflow.com/q/39560241\">https://stackoverflow.com/q/39560241</a>&gt; with one promising answer but <br>\nalso one demotivating comment:</p>\n<p>\"OCaml has many builds for Windows. Cygwin, MinGW, MSVC and now even for <br>\nBash on Windows. Each has its own glitches.\"</p>\n<p>I guess with Windows 10 there's also WSL thrown into the mix.</p>",
        "id": 294745648,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661193335
    },
    {
        "content": "<p>From: Lars Hupel &lt;<a href=\"mailto:hupel@in.tum.de\">hupel@in.tum.de</a>&gt;</p>\n<blockquote>\n<p>I tried to, but I didn't find anything satisfactory. Everybody keeps<br>\nsaying \"experimental\", \"soon\" etc.</p>\n</blockquote>\n<p>After sending this message I realized I could look at the Cygwin package <br>\nlist, and they have it:</p>\n<p><a href=\"https://cygwin.com/cgi-bin2/package-cat.cgi?file=x86_64%2Fopam%2Fopam-1.2.2-2&amp;grep=opam\">https://cygwin.com/cgi-bin2/package-cat.cgi?file=x86_64%2Fopam%2Fopam-1.2.2-2&amp;grep=opam</a></p>\n<p>However, I have no clue how simple it is to programmatically install a <br>\nCygwin package; nor whether this package works well.</p>",
        "id": 294745661,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661193342
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nYes, I've seen that, too.</p>\n<p>Isabelle and WSL is still an open question: right now it is not<br>\nsupported, but it might at some point help out of such situations.</p>\n<p>(I propose to close this thread here, and move the discussion over to<br>\nthe isabelle-dev thread about \"AFP/HLDE\", or other new threads.)</p>\n<p>Makarius</p>",
        "id": 294745673,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661193348
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nI was too implicit about Cygwin: there is already Isabelle support for<br>\nit, as part of the normal application bundling. It would be trivial to<br>\ninclude OCaml from the outset, but it is probably too big.</p>\n<p>Adding it later might be feasible: it needs one or too close looks at<br>\nexisting batch files.</p>\n<p>Generally, this multi-platform bundling of Isabelle is a delicate art:<br>\nit has evolved in the past 10 years to a relatively sophisticated state.</p>\n<p>Makarius</p>",
        "id": 294745691,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661193354
    },
    {
        "content": "<p>From: Lars Hupel &lt;<a href=\"mailto:hupel@in.tum.de\">hupel@in.tum.de</a>&gt;<br>\nI meant just opam. I agree that OCaml is too big, but bundling just opam <br>\nshould be feasible, no?</p>",
        "id": 294745700,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661193360
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nI will try it ...</p>\n<p>Makarius</p>",
        "id": 294745756,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661193366
    },
    {
        "content": "<p>From: <a href=\"mailto:wmansky@cs.princeton.edu\">wmansky@cs.princeton.edu</a><br>\nI'd like to add an encouraging note about OPAM on Windows: the version at<br>\n<a href=\"https://fdopen.github.io/opam-repository-mingw/installation/\">https://fdopen.github.io/opam-repository-mingw/installation/</a> (the first one<br>\nmentioned in the StackOverflow question) has served me well for several<br>\nyears, and I don't think it's considered experimental any longer.</p>\n<p>Regards,<br>\nWilliam</p>",
        "id": 294745781,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661193375
    }
]