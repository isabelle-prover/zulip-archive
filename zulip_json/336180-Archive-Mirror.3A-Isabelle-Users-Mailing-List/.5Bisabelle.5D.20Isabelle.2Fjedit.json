[
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\nWhen I start typing in a proof command, eg apply, jedit eagerly executes it, and<br>\nsince I am in the middle of typing it, the command typically fails.<br>\nUnfortunately the resulting error msg overwrites the proof state. Is there any<br>\nway to see the old proof state while I type the proof command?</p>\n<p>Thanks<br>\nTobias</p>",
        "id": 294216882,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660895389
    },
    {
        "content": "<p>From: Alfio Martini &lt;<a href=\"mailto:alfio.martini@acm.org\">alfio.martini@acm.org</a>&gt;<br>\nDear Isabelle Users</p>\n<p>I am also  interested in  a possible answer to this question. What I<br>\nusually do<br>\nin this case is to [repeatedly] move the cursor to the previous [next] line<br>\n(command, declaration) to take<br>\na look  at the current proof state before resuming<br>\ntyping or thinking about the current command (declaration).</p>\n<p>Cheers</p>",
        "id": 294216888,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660895394
    },
    {
        "content": "<p>From: Fabian Immler &lt;<a href=\"mailto:immler@in.tum.de\">immler@in.tum.de</a>&gt;<br>\nYou could disable \"Auto update\" in the Output panel and use \"Update\" manually.</p>\n<p>Since \"Update\" is not exported as an action of the Isabelle-Plugin,<br>\none cannot assign a keyboard shortcut to see the current proof state.</p>\n<p>The attached macro (a short hack) emulates a click on \"Update\" and<br>\ncould be used for an alternative way of interaction:</p>\n<ul>\n<li>No \"Auto update\"</li>\n<li>Keyboard shortcut (e.g. Ctrl-Enter) to see the current proof state</li>\n</ul>\n<p>Installation instructions:</p>\n<ul>\n<li>\n<p>Move the attached update.bsh to<br>\n~/.isabelle/Isabelle2012/jedit/macros/ (This script \"clicks\" on<br>\n\"Update\")</p>\n</li>\n<li>\n<p>Assign a shortcut to this Macro:<br>\n    - either via Utilities-&gt;Global Options-&gt;Shortcuts (The macro is<br>\ncalled \"update\")</p>\n<p>- or by appending a line like \"update.shortcut=A+ENTER A+m\" to<br>\n~/.isabelle/Isabelle2012/jedit/properties</p>\n</li>\n</ul>\n<p>If this turns out to be a desired/competitive way of interaction, one<br>\ncould think about having these actions exported by the<br>\nIsabelle-Plugin.</p>\n<p>Now trying to prove theorems with manual updates of the proof state,<br>\nFabian<br>\n<a href=\"/user_uploads/14278/exxKwU8u26zu_8sRYl4XyYjl/update.bsh\">update.bsh</a></p>",
        "id": 294216961,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660895419
    },
    {
        "content": "<p>From: Christian Sternagel &lt;<a href=\"mailto:c-sterna@jaist.ac.jp\">c-sterna@jaist.ac.jp</a>&gt;<br>\nDear all,</p>\n<p>I was going to suggest an alternative to Fabian's setup where we could <br>\nuse a keyboard shortcut to toggle \"Auto update\". My idea was that you <br>\nturn \"Auto update\" off in situations where you want to have a look at <br>\nthe current proof state while typing the next method application (which <br>\nis not always the case since often subgoals are easy enough that we do <br>\nnot really have to think about them) and afterwards turn \"Auto update\" <br>\non again.</p>\n<p>However, when trying this (currently by manually clicking on the \"Auto <br>\nupdate\" checkbox of the \"Output\" panel) I noticed what I would consider <br>\nundesirable behavior which I will illustrate by the following example <br>\n(where [...] indicates the cursor position):</p>\n<p>lemma \"A &amp; B --&gt; B &amp; A\"[]</p>\n<p>At this point we have the subgoal</p>\n<p>1. A ∧ B ⟶ B ∧ A</p>\n<p>Now I turn off \"Auto update\" and type Enter to go to the next line. <br>\nUnfortunately, even with \"Auto update\" turned off, the \"Output\" panel is <br>\n\"updated\" to an empty state. The same happens when starting from</p>\n<p>lamme \"A &amp; B --&gt; B &amp; A\"<br>\n   []</p>\n<p>and typing anything (already in the new line). Wouldn't it be preferable <br>\nif \"Output\" would not change at all, after switching off \"Auto update\"?</p>\n<p>cheers</p>\n<p>chris</p>",
        "id": 294216995,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660895438
    },
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\nThank you, that was very helpful, I have installed your macro and will try it<br>\nout. Christian's idea of toggling Auto update sounds interesting, too, but I<br>\nwould need a macro to try it.</p>\n<p>This brings me to the next issue. Not updating the output panel does not keep<br>\nthe prover from evaluating my partially edited proof text in the background. But<br>\nsince I have edited the beginning of the text, the rest often does not make<br>\nsense anymore, or the parser parses it in an unintended way, at least up to the<br>\nnext synchronisation point like \"lemma\". Frequently this leads to diverging<br>\nproof steps a bit further down, which are shown in purple. Together with the fan<br>\ncoming on this is a bit distracting and I often feel compelled to comment out<br>\nbits of the proof in response. Is there any way to control the over-eager<br>\nevaluation to avoid such situations?</p>\n<p>Thanks!<br>\nTobias</p>",
        "id": 294217080,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660895480
    },
    {
        "content": "<p>From: Fabian Immler &lt;<a href=\"mailto:immler@in.tum.de\">immler@in.tum.de</a>&gt;<br>\n2012/7/23 Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;:</p>\n<blockquote>\n<p>Thank you, that was very helpful, I have installed your macro and will try it<br>\nout. Christian's idea of toggling Auto update sounds interesting, too, but I<br>\nwould need a macro to try it.<br>\nTry the attached macro!</p>\n</blockquote>\n<blockquote>\n<p>Am 22/07/2012 19:42, schrieb Fabian Immler:</p>\n<blockquote>\n<p>You could disable \"Auto update\" in the Output panel and use \"Update\" manually.</p>\n<p>Since \"Update\" is not exported as an action of the Isabelle-Plugin,<br>\none cannot assign a keyboard shortcut to see the current proof state.</p>\n<p>The attached macro (a short hack) emulates a click on \"Update\" and<br>\ncould be used for an alternative way of interaction:<br>\n- No \"Auto update\"<br>\n- Keyboard shortcut (e.g. Ctrl-Enter) to see the current proof state</p>\n<p>Installation instructions:<br>\n - Move the attached update.bsh to<br>\n~/.isabelle/Isabelle2012/jedit/macros/ (This script \"clicks\" on<br>\n\"Update\")<br>\n - Assign a shortcut to this Macro:<br>\n    - either via Utilities-&gt;Global Options-&gt;Shortcuts (The macro is<br>\ncalled \"update\")<br>\n    - or by appending a line like \"update.shortcut=A+ENTER A+m\" to<br>\n~/.isabelle/Isabelle2012/jedit/properties</p>\n<p>If this turns out to be a desired/competitive way of interaction, one<br>\ncould think about having these actions exported by the<br>\nIsabelle-Plugin.</p>\n<p>Now trying to prove theorems with manual updates of the proof state,<br>\nFabian</p>\n<p>2012/7/22 Alfio Martini &lt;<a href=\"mailto:alfio.martini@acm.org\">alfio.martini@acm.org</a>&gt;:</p>\n<blockquote>\n<p>Dear Isabelle Users</p>\n<p>I am also  interested in  a possible answer to this question. What I<br>\nusually do<br>\nin this case is to [repeatedly] move the cursor to the previous [next] line<br>\n(command, declaration) to take<br>\na look  at the current proof state before resuming<br>\ntyping or thinking about the current command (declaration).</p>\n<p>Cheers<br>\n</p>\n</blockquote>\n<p>On Sun, Jul 22, 2012 at 8:04 AM, Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt; wrote:</p>\n<blockquote>\n<blockquote>\n<p>When I start typing in a proof command, eg apply, jedit eagerly executes<br>\nit, and<br>\nsince I am in the middle of typing it, the command typically fails.<br>\nUnfortunately the resulting error msg overwrites the proof state. Is there<br>\nany<br>\nway to see the old proof state while I type the proof command?</p>\n<p>Thanks<br>\nTobias</p>\n</blockquote>\n<p>--<br>\nAlfio Ricardo Martini<br>\nPhD in Computer Science (TU Berlin)<br>\nAssociate Professor at Faculty of Informatics (PUCRS)<br>\nCoordenador do Curso de Ciência da Computação<br>\nAv. Ipiranga, 6681 - Prédio 32 - Faculdade de Informática<br>\n90619-900 -Porto Alegre - RS - Brasil<br>\n<a href=\"/user_uploads/14278/I5BweqhhYP02E4a2gLwNbqYa/auto_update.bsh\">auto_update.bsh</a></p>\n</blockquote>\n</blockquote>\n</blockquote>",
        "id": 294217103,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660895493
    },
    {
        "content": "<p>From: Alexander Krauss &lt;<a href=\"mailto:krauss@in.tum.de\">krauss@in.tum.de</a>&gt;<br>\nIt is nice to see how such usability issues can easily be addressed on <br>\nthe user level...</p>\n<p>An idea in a similar direction is to open multiple output panels, to <br>\nmake it easier to stare at several states simultaneously. The underlying <br>\nmodel should easily support that. Then, each state view could have, <br>\ne.g., one of the following modes:</p>\n<p>\"Fixed\" - Never move focus and always display the same state<br>\n   \"Under cursor\" - Always show the state under the cursor<br>\n   \"Latest non-error\" - Show the state of the latest command which was <br>\nprocessed successfully</p>\n<p>Having both \"Under cursor\" and \"Latest non-error\" open should cover <br>\nTobias' use case quite intuitively, without continuously requiring extra <br>\n\"administrative\" keystrokes.</p>\n<p>Alex</p>",
        "id": 294217194,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660895532
    },
    {
        "content": "<p>From: Nils Jähnig &lt;<a href=\"mailto:jaehnig@mi.fu-berlin.de\">jaehnig@mi.fu-berlin.de</a>&gt;<br>\nHi,</p>\n<p>i have this very same problem. especially when \"apply auto\"  follows, but<br>\nnow applies to a different proof state, which it cannot resolve, it takes<br>\nvery long, often too long to wait. the obvious workaround is to comment all<br>\nthose lines, but this is very tedious.<br>\nright now i usually cut and paste the line<br>\noops end (*<br>\nfrequently when i edit larger theory files.</p>\n<p>i would also be very happy to see a \"parse till cursor\"-mode or something<br>\nin jedit.<br>\ncurrently it is \"parse the visible lines in the editor\" (and lines that<br>\nwere viewed since last edit), but maybe someday Makarius has enough time to<br>\ninclude an option to choose (just like the auto update button).<br>\nmaybe auto parse [on/off], and when turned off, you can something like<br>\ndouble-click on a line to parse until there.</p>\n<p>best regards<br>\nNils</p>",
        "id": 294217337,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660895609
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nMore refined implicit processing of the editing and checking process is <br>\nindeed one of the many things that I still need to do, say with timeouts <br>\nfor the part after the main editor focus towards the end of the buffer. <br>\nBut note that the curser as such is somehow an artifact of the TTY with <br>\nits single-focus model.  I would like to overcome that eventually, e.g. to <br>\nallow looking at several relevant sub-proof states at the same time, while <br>\nediting the head of an induction proof, say.</p>\n<p>In any case it helps to collect observations from users, like on this <br>\nthread.</p>\n<p>One more hint what can be done right now (in Isabelle2012): the main <br>\ncontrol of the implicit checking is the \"perspective\" of the editor, i.e. <br>\nthe set of text intervals that are visible to the user.  Standard jEdit <br>\nFolding and Narrowing can be used to confine proof checking to a smaller <br>\ntext region, e.g. via the menu action \"Folding / Narrow to Selection\".</p>\n<p>Makarius</p>",
        "id": 294217366,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660895627
    }
]