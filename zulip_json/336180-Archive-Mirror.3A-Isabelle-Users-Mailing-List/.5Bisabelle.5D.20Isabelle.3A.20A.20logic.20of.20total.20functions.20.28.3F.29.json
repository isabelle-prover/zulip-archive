[
    {
        "content": "<p>From: Alfio Martini &lt;<a href=\"mailto:alfio.martini@acm.org\">alfio.martini@acm.org</a>&gt;<br>\nDear Isabelle Users,</p>\n<p>Taking into account the discussion  that follow, I would like to know if my<br>\nuse of the constant \"undefined\"  is correct<br>\nor justified. I wanted to avoid the option type at all costs and in some of<br>\nthe<br>\nexamples below I would not even know how to use it.</p>\n<p>To begin with, I wanted to define a paryial recursive function such that the<br>\nfollowing (informal) specification is satisfied:</p>\n<p>sumR: int -&gt; int -&gt;_par int<br>\n-- a partial function to sum the first k integers between<br>\n--  l and u. It is not defined when l&gt;u.<br>\nrequires l &lt;= u<br>\nensures sumI(l,u) = \\Sigma_{l&lt;=k&lt;=u} k</p>\n<p>I came up with the following solution (well I did a pencil and paper<br>\nproof and have yet to check it with Isabelle/Isar):</p>\n<p>function  sumR:: \"int =&gt; int =&gt; int\" where<br>\n\"sumR   n n = n\" |<br>\n\"n &lt;  m ==&gt; sumR n m = m + sumR n (m - 1)\"|<br>\n\"n&gt;m ==&gt; sumR n m = undefined\"<br>\napply atomize_elim<br>\napply auto<br>\ndone<br>\ntermination sumR<br>\napply (relation \"measure (λ(i,N). nat ((N+1) - i))\")</p>\n<p>apply auto<br>\ndone</p>\n<p>Similarly, the definition of an integer division that satisfies the<br>\nfollowing specification</p>\n<p>div:: nat =&gt; nat =&gt; nat<br>\nrequires n&gt;0<br>\nensures div m n = floor(m/n)</p>\n<p>can be given by</p>\n<p>function  divV::\"nat ⇒ nat ⇒ nat\" where<br>\n\"x &lt; Suc y ==&gt; divV x (Suc y) = 0\"|<br>\n\"x≥ Suc y ==&gt; divV x (Suc y) = 1 + divV (x - Suc y)  (Suc y)\"|<br>\n\"divV x 0 = undefined\"<br>\napply atomize_elim<br>\napply auto<br>\napply arith<br>\ndone<br>\ntermination by lexicographic_order</p>\n<p>Then I remembered that primitive recursive definitions allow for non-<br>\nexaustive patterns.<br>\nSo divV can be given a simpler definition like this:</p>\n<p>fun divN:: \"nat ⇒ nat ⇒ nat\" where<br>\n\"divN x (Suc y) = (if x &lt; Suc y then 0 else 1 + divN (x - Suc y)  (Suc y))\"</p>\n<p>In this case, Isabelle prints the following warning, which means to that it<br>\nuses \"undefined\" in the internal<br>\nworkings of the primrec package.</p>\n<p>constants<br>\n  divN :: \"nat ⇒ nat ⇒ nat\"<br>\nMissing patterns in function definition:<br>\n/\\ a. divN a 0 = undefined</p>\n<p>Looking at previous discussions about this in the mailing list, I found<br>\nthis enlightening explanation<br>\nfrom Andreas:</p>\n<p>A long time ago (before Isabelle2009), \"undefined\" was called \"arbitrary\",<br>\nThanks for any explanation of my use of \"undefined\".</p>\n<p>Best!</p>",
        "id": 294634863,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661159717
    },
    {
        "content": "<p>From: Andreas Lochbihler &lt;<a href=\"mailto:andreas.lochbihler@inf.ethz.ch\">andreas.lochbihler@inf.ethz.ch</a>&gt;<br>\nDear Alfio,</p>\n<p>Your usage of undefined matches the usual conventions in Isabelle/HOL specification tools. <br>\nWhether it accurately models your specification depends on your understanding of the <br>\nspecification. Nowadays in HOL, we are normally happy if we get a any function definition <br>\nthat satisfies the specification. However, many packages internally refine the <br>\nspecification. For example, you can prove that sumR evaluates to the same value for all <br>\nintervals (l,r) with r &lt; l (but you don't know which one).</p>\n<p>If you wanted to model say a hardware instruction of a processor with under-specified <br>\nbehaviour, then this usage of undefined is probably not faithful, because the result of <br>\nexecuting the instructor for r &lt; l may probably depend on l, r, the weather and whatever <br>\nelse. So it really depends on what you are trying to define and do.</p>\n<p>Andreas</p>",
        "id": 294634882,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661159722
    },
    {
        "content": "<p>From: David Cock &lt;<a href=\"mailto:david.cock@inf.ethz.ch\">david.cock@inf.ethz.ch</a>&gt;<br>\nJust to reinforce this idea - there really is no getting away from the fact that HOL is a logic of total functions. If you try to define a partial function without e.g. option, you introduce unexpected relationships.</p>",
        "id": 294634900,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661159730
    },
    {
        "content": "<p>From: Andrew Butterfield &lt;<a href=\"mailto:Andrew.Butterfield@scss.tcd.ie\">Andrew.Butterfield@scss.tcd.ie</a>&gt;<br>\nHmmm - a little bit off topic  .. is the meta-Logic of Isabelle also in effect a logic of total functions as well?<br>\nOr could you build a logic of partial functions on top of it ? … not that this would help Alfio much…</p>\n<p>My understanding about undefinedness and/or partial functions is that there are a variety<br>\nof ways to work with them - three-valued logics, adding bottom elements to semantic domains, having definedness side-conditions (everywhere)<br>\nall with their plusses and minusses - but there is no way to avoid some pain. You have find whatever hurts leasts (which depends on what you are trying to do), and stick with that.</p>\n<p>RAndrew</p>\n<hr>\n<p>Andrew Butterfield     Tel: +353-1-896-2517     Fax: +353-1-677-2204<br>\nLero@TCD, Head of Foundations &amp; Methods Research Group<br>\nSchool of Computer Science and Statistics,<br>\nRoom G.39, O'Reilly Institute, Trinity College, University of Dublin<br>\n<a href=\"http://www.scss.tcd.ie/Andrew.Butterfield/\">http://www.scss.tcd.ie/Andrew.Butterfield/</a></p>\n<hr>",
        "id": 294634917,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661159739
    },
    {
        "content": "<p>From: David Cock &lt;<a href=\"mailto:david.cock@inf.ethz.ch\">david.cock@inf.ethz.ch</a>&gt;<br>\nThere are people on this list better qualified to answer than me but no, the meta-logic does not require it. More general domains are possible, see HOL-CF.</p>",
        "id": 294634924,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661159741
    },
    {
        "content": "<p>From: Peter Lammich &lt;<a href=\"mailto:lammich@in.tum.de\">lammich@in.tum.de</a>&gt;<br>\nOn Fr, 2015-04-17 at 17:53 +0200, David Cock wrote:</p>\n<blockquote>\n<p>There are people on this list better qualified to answer than me <br>\nThe same applies to me ;)</p>\n</blockquote>\n<blockquote>\n<p>but no, the meta-logic does not require it. More general domains are possible, see HOL-CF.<br>\nIn my understanding, HOL-CF is build entirely on top of HOL, <br>\nintroducing it's own function type, which is a (typedef) subtype of a=&gt;b</p>\n</blockquote>\n<p>In Pure, the reflexivity rule is already there, e.g., you can prove:</p>\n<p>f x == f x</p>\n<p>even for places x where f is undefined.</p>\n<p>And you can use ==-equalities to prove substitutions in your theorems<br>\n(as done, e.g., by the (Pure) conversion mechanism).</p>\n<p>Is this behaviour compatible with the goal of specifying a logic with<br>\npartial functions?</p>",
        "id": 294634944,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661159750
    },
    {
        "content": "<p>From: Larry Paulson &lt;<a href=\"mailto:lp15@cam.ac.uk\">lp15@cam.ac.uk</a>&gt;<br>\nYes it’s possible, e.g. a logic with a definedness predicate could be defined. LCF and HOLCF are also, in effect, logics of definedness, in that you can reason about whether or not something is the value UU (undefined), which really is treated specially, in that it induces a partial ordering on all types.</p>\n<p>They are all a pain to use.</p>\n<p>Larry Paulson</p>",
        "id": 294634949,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661159753
    }
]