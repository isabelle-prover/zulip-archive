[
    {
        "content": "<p>From: Joachim Breitner &lt;<a href=\"mailto:breitner@kit.edu\">breitner@kit.edu</a>&gt;<br>\nHi,</p>\n<p>Luckily we have poor souls running sliding update distributions (Debian<br>\nunstable here) who can suffer from the fallout in time for it to be<br>\nfixed before the other users are affected.</p>\n<p>Anyways, the problem also happens with 2016-rc4, so this is likely<br>\nsomething worth investigating before the release. After further<br>\ndigging, it turns out that it works if /bin/sh does point to /bin/bash<br>\ninstead of /bin/dash. Bisecting the version ranges of dash, the problem<br>\nstarted to appear in 0.5.8. Likely contender:<br>\n<a href=\"http://git.kernel.org/cgit/utils/dash/dash.git/commit/?id=46d3c1a614f11f0d40a7e73376359618ff07abcd\">http://git.kernel.org/cgit/utils/dash/dash.git/commit/?id=46d3c1a614f11f0d40a7e73376359618ff07abcd</a></p>\n<p>I notified the dash developers about the problem, but dash 0.5.8 will<br>\neventually be used in plenty of places where we probably want to use<br>\nIsabelle out of the box, so I suggest to either ensure that bash<br>\nscripts within Isabelle call each other via bash only, or (likely more<br>\nreliable) do not rely on exporting bash functions via the environment,<br>\nbut source their definition in every shell.</p>\n<p>Greetings,<br>\nJoachim<br>\n<a href=\"/user_uploads/14278/MSvUjQGnvQEkhwVyIs568NXe/signature.asc\">signature.asc</a></p>",
        "id": 294665553,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661171630
    },
    {
        "content": "<p>From: Joachim Breitner &lt;<a href=\"mailto:breitner@kit.edu\">breitner@kit.edu</a>&gt;<br>\nDear Makarius,</p>\n<p>Am Mittwoch, den 10.02.2016, 17:54 +0100 schrieb Makarius:</p>\n<blockquote>\n<p>On Wed, 10 Feb 2016, Joachim Breitner wrote:</p>\n<blockquote>\n<p>After further digging, it turns out that it works if /bin/sh does point <br>\nto /bin/bash instead of /bin/dash. Bisecting the version ranges of dash, <br>\nthe problem started to appear in 0.5.8. Likely contender: <br>\n<a href=\"http://git.kernel.org/cgit/utils/dash/dash.git/commit/?id=46d3c1a614f11f0d40a7e73376359618ff07abcd\">http://git.kernel.org/cgit/utils/dash/dash.git/commit/?id=46d3c1a614f11f0d40a7e73376359618ff07abcd</a></p>\n</blockquote>\n<p>That change is from 2012. My impression is that the bash guys have already <br>\ntaken measures against such \"sanitised environments\" some years ago: the <br>\nshell functions are represented as regular assignments of the form A=B, <br>\ne.g. BASH_FUNC_isabelle_scala%%=() ...</p>\n<blockquote>\n<p>I notified the dash developers about the problem, but dash 0.5.8</p>\n</blockquote>\n<p>There must be a new problem in dash 0.5.8. </p>\n</blockquote>\n<p>..as I said, it’s the commit above. If you look at<br>\n<a href=\"http://git.kernel.org/cgit/utils/dash/dash.git/log/\">http://git.kernel.org/cgit/utils/dash/dash.git/log/</a><br>\nand press next you see that it is contained in the 0.5.8 tag, but not<br>\nthe 0.5.7 tag dated 2011-07-08.</p>\n<p>dash’s upstream (Erik Blake) says this is not a bug and POSIX conform:<br>\n<a href=\"http://www.mail-archive.com/dash@vger.kernel.org/msg01147.html\">http://www.mail-archive.com/dash@vger.kernel.org/msg01147.html</a></p>\n<blockquote>\n<blockquote>\n<p>I suggest to either ensure that bash scripts within Isabelle call each <br>\nother via bash only, or (likely more reliable) do not rely on exporting <br>\nbash functions via the environment, but source their definition in every <br>\nshell.</p>\n</blockquote>\n<p>I've spent some years on variations on all that already, refining it over <br>\nand over again.</p>\n<p>Isabelle exclusively uses bash wherever possible. Sometimes other system <br>\nfunction sneak-in unreliable /bin/sh.</p>\n</blockquote>\n<p>I digged deeper, assuming the poisonous 'sh -c \"...\"' pattern<br>\nsomewhere, and using strace I saw these four calls going via /bin/sh:<br>\n[pid 19336] execve(\"/bin/sh\", [\"sh\", \"-c\", \"exec \\\"$EXEC_PROCESS\\\" '/tmp/isabelle-jojo19273/bash_pid995593' \\\"exec bash '/tmp/isabelle-jojo19273/bash_script995593' &gt; '/tmp/isabelle-jojo19273/bash_out995593' 2&gt; '/tmp/isabelle-jojo19273/bash_err995593'\\\"\"], [/* 187 vars */]) = 0<br>\n[pid 19352] execve(\"/bin/sh\", [\"sh\", \"-c\", \"exec \\\"$EXEC_PROCESS\\\" '/tmp/isabelle-jojo19273/bash_pid995594' \\\"exec bash '/tmp/isabelle-jojo19273/bash_script995594' &gt; '/tmp/isabelle-jojo19273/bash_out995594' 2&gt; '/tmp/isabelle-jojo19273/bash_err995594'\\\"\"], [/* 187 vars */]) = 0<br>\n[pid 19355] execve(\"/bin/sh\", [\"sh\", \"-c\", \"exec \\\"$EXEC_PROCESS\\\" '/tmp/isabelle-jojo19273/bash_pid995595' \\\"exec bash '/tmp/isabelle-jojo19273/bash_script995595' &gt; '/tmp/isabelle-jojo19273/bash_out995595' 2&gt; '/tmp/isabelle-jojo19273/bash_err995595'\\\"\"], [/* 187 vars */]) = 0<br>\n[pid 19358] execve(\"/bin/sh\", [\"sh\", \"-c\", \"exec \\\"$EXEC_PROCESS\\\" '/tmp/isabelle-jojo19273/bash_pid995596' \\\"exec bash '/tmp/isabelle-jojo19273/bash_script995596' &gt; '/tmp/isabelle-jojo19273/bash_out995596' 2&gt; '/tmp/isabelle-jojo19273/bash_err995596'\\\"\"], [/* 187 vars */]) = 0</p>\n<p>So this points to these lines</p>\n<p>val _ = File.write script_path script;<br>\n            val bash_script =<br>\n              \"exec bash \" ^<br>\n                File.shell_path script_path ^<br>\n                \" &gt; \" ^ File.shell_path out_path ^<br>\n                \" 2&gt; \" ^ File.shell_path err_path;<br>\n            val _ = getenv_strict \"EXEC_PROCESS\";<br>\n            val status =<br>\n              OS.Process.system<br>\n                (\"exec \\\"$EXEC_PROCESS\\\" \" ^ File.shell_path pid_path ^ \" \" ^ quote bash_script);</p>\n<p>in src/Pure/Concurrent/bash.ML.</p>\n<p>In my naivety, I would immediately scold such code: Really, one should<br>\nnot use the system-family of calls that needlessly go via a shell, with<br>\nall the worrying quoting involved. But, judging from a very brief web<br>\nsearch (<a href=\"http://sml-family.org/Basis/os-process.html\">http://sml-family.org/Basis/os-process.html</a>), it seems that SML<br>\ndoes not provide the safe form taking a list of arguments, instead of a<br>\nsingle string, that I have seen in most other languages. Is there<br>\nreally no way of executing a program from SML that does not go via the<br>\nshell?</p>\n<p>One way out would be to give up on lib/scripts/getsettings doing the<br>\ncaching and configure everything upon every invocation. This way,<br>\nfunctions would not have to be exported.</p>\n<blockquote>\n<p>What is your $SHELL actually?</p>\n</blockquote>\n<p>The $SHELL is /bin/bash, but I don’t expect that to make a difference<br>\nhere.</p>\n<p>Greetings,<br>\nJoachim<br>\n<a href=\"/user_uploads/14278/Tyf9qv9B4Cj7JuGvjSCP2JyA/signature.asc\">signature.asc</a></p>",
        "id": 294665622,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661171649
    },
    {
        "content": "<p>From: Joachim Breitner &lt;<a href=\"mailto:breitner@kit.edu\">breitner@kit.edu</a>&gt;<br>\nHi,</p>\n<p>I filed a report at <a href=\"http://bugs.debian.org/814358\">http://bugs.debian.org/814358</a></p>\n<p>but I don’t have much hopes. If dash’s upstream is right that POSIX<br>\ndoes not guarantee the survival of non-standard environment entries,<br>\nthen we are relying on accidental behavior here, and will have a hard<br>\ntime convincing the Debian maintainers to diverge from upstream.</p>\n<p>Chances would be better if Software maintained by Debian would be<br>\naffected, but the odds of that are rather low (few people export bash<br>\nfunctions besides from thier login shell) and Isabelle is unfortunately<br>\nnot distributed by Debian.</p>\n<p>Anyways, I’m sure have sympathy for maintainers who, by improving<br>\nmatters and refining their code to do things correctly and as<br>\nspecified, happen to break the setup of users who were using it in an<br>\nobsolete or simply wrong way before.</p>\n<p>Greetings,<br>\nJoachim<br>\n<a href=\"/user_uploads/14278/1ADCseFwy3Ro4rLAoTdVjUcA/signature.asc\">signature.asc</a></p>",
        "id": 294665655,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661171666
    },
    {
        "content": "<p>From: Joachim Breitner &lt;<a href=\"mailto:breitner@kit.edu\">breitner@kit.edu</a>&gt;<br>\nHi,</p>\n<p>are we sure there is nothing we can do? In the current state,<br>\nIsabelle2016 will not be easily usable on future Debian and Ubuntu<br>\nreleases without root access and rather low level modifications¹.</p>\n<p>One way out might be to follow the advice that I procured here:<br>\n<a href=\"http://stackoverflow.com/a/35324612/946226\">http://stackoverflow.com/a/35324612/946226</a><br>\nThis way, you can avoid the call to /bin/sh in the problematic part<br>\nsrc/Pure/Concurrent/bash.ML. I’m not sure if this is available on<br>\nWindows.</p>\n<p>Greetings,<br>\nJoachim</p>\n<p>¹ The instructions could be something like:<br>\n    Run<br>\n    $ sudo dpkg-reconfigure dash<br>\n    and answer the question with \"no\". Then ensure that the symbolic<br>\n    link /bin/sh points to /bin/bash.<br>\n<a href=\"/user_uploads/14278/Bn9YPcfB_q4T-QfpSkWH8qz4/signature.asc\">signature.asc</a></p>",
        "id": 294665687,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661171678
    },
    {
        "content": "<p>From: Gerwin Klein &lt;<a href=\"mailto:Gerwin.Klein@nicta.com.au\">Gerwin.Klein@nicta.com.au</a>&gt;<br>\nWe’ve just had the exact same problem yesterday on 2016-RC4 + Ubuntu. Not sure what the resolution was, let me find out.</p>\n<p>Cheers,<br>\nGerwin</p>\n<hr>\n<p>The information in this e-mail may be confidential and subject to legal professional privilege and/or copyright. National ICT Australia Limited accepts no liability for any damage caused by this email or its attachments.</p>",
        "id": 294665700,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661171684
    },
    {
        "content": "<p>From: Joachim Breitner &lt;<a href=\"mailto:breitner@kit.edu\">breitner@kit.edu</a>&gt;<br>\nHi,</p>\n<p>and it will stay this way, of course. The question is: When will the<br>\nfirst Ubuntu release with dash-0.5.8 be released. I’m not sure if<br>\nUbuntu 16.04 (xenial, the next LTS release) will still see updates from<br>\nDebian, but Ubuntu 16.10 will very likely ship with dash-0.5.8.</p>\n<p>The next Debian stable release, stretch, will be probably not release<br>\nuntil early 2017, but that is just a guess.</p>\n<p>Greetings,<br>\nJoachim<br>\n<a href=\"/user_uploads/14278/VVG8Xu9rMUgUyJkRr295wT61/signature.asc\">signature.asc</a></p>",
        "id": 294665754,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661171703
    },
    {
        "content": "<p>From: Joachim Breitner &lt;<a href=\"mailto:breitner@kit.edu\">breitner@kit.edu</a>&gt;<br>\nHi,</p>\n<blockquote>\n<p>I wonder how such moves from Debian to Ubuntu really work. Are there <br>\nreally imports from Debian-testing into a stable Ubuntu? There are plenty <br>\nof websites about that, but it also requires time to study them. <br>\n<a href=\"https://wiki.ubuntu.com/XenialXerus/ReleaseSchedule\">https://wiki.ubuntu.com/XenialXerus/ReleaseSchedule</a> has DebianImportFreeze <br>\nfor 17-Feb-2016 -- whatever that means.</p>\n</blockquote>\n<p>well spotted, thanks. It means<br>\n    Prior to this date, new versions of packages will be automatically<br>\n    imported from Debian where they have not been customized for Ubuntu<br>\n    (    <a href=\"https://wiki.ubuntu.com/DebianImportFreeze\">https://wiki.ubuntu.com/DebianImportFreeze</a>    )<br>\nbut dash is customized for Ubuntu, so it will not get merged<br>\nautomatically. There is still a not too slim chance that it will be<br>\nmerged manually. So the likelyhood of the next Ubuntu LTS release<br>\nshipping dash 0.5.8 is large enough to conservatively assume that to be<br>\nthe case.</p>\n<blockquote>\n<p>So patching Poly/ML could work, but anybody doing plain Unix programming <br>\nwith \"system\" functions (e.g. in perl) will fall again on his nose with a <br>\nbad /bin/sh.</p>\n</blockquote>\n<p>Only (in the context of the current issue) if this system programming<br>\nhappens in a process called by isabelle and itself calls isabelle<br>\nagain. Is that something we should worry about?</p>\n<p>Have you considered, as a middle way, to keep the<br>\nISABELLE_SETTINGS_PRESENT-logic in lib/scripts/getsettings that<br>\ndetermines the settings once, but within this if..then..else block only<br>\nset genuine environment variables, and after the else block, define all<br>\nthe bash functions unexported. Some of them are (like spiltarray) are<br>\ndefined unconditionally and not really settings anyways; only few<br>\nfunctions have definitions that depend on the environmens (namely tar,<br>\njvmpath, isabelle_admin_build). You could define them conditional on<br>\nthe variables set above. This would give you the desired scoping<br>\nbehavior for genuine settings, while not relying on treacherous<br>\nfeatures such as exporting code between processes.</p>\n<p>Greetings,<br>\nJoachim<br>\n<a href=\"/user_uploads/14278/_WuiMd54AN5I9EsJiILIMpRz/signature.asc\">signature.asc</a></p>",
        "id": 294665794,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661171715
    },
    {
        "content": "<p>From: Florian Haftmann &lt;<a href=\"mailto:florian.haftmann@informatik.tu-muenchen.de\">florian.haftmann@informatik.tu-muenchen.de</a>&gt;</p>\n<blockquote>\n<p>An alternative is to modify Poly/ML to use /bin/bash or getenv(SHELL)<br>\ninstead of hardwired /bin/sh -- that would be a typical Debianistic patch.</p>\n</blockquote>\n<p>getenv(SHELL), falling back on /bin/sh by default is a very custom<br>\nbehaviour and would make sense; nevertheless the user still has the<br>\nburden of setting SHELL explicitly in case of problems.</p>\n<p>A technical alternative could also to implement a separate encoding of<br>\nshell functions into the environment using plain variable names. e.g.</p>\n<p>function l {<br>\n    ls -lAX --file-type --group-directories-first --color=auto \"$@\"<br>\n}</p>\n<p>export FUN_L=\"$(LANG= type l | { read; cat; })\"</p>\n<p>and later</p>\n<p>eval \"$(echo $FUN_L)\"</p>\n<p>Don't know whether this is a good idea.</p>\n<p>Cheers,<br>\n    Florian<br>\n<a href=\"/user_uploads/14278/z6-q2x0Iqnta_xjpfIe7fQZx/signature.asc\">signature.asc</a></p>",
        "id": 294665821,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661171727
    },
    {
        "content": "<p>From: Florian Haftmann &lt;<a href=\"mailto:florian.haftmann@informatik.tu-muenchen.de\">florian.haftmann@informatik.tu-muenchen.de</a>&gt;</p>\n<blockquote>\n<blockquote>\n<blockquote>\n<p>Am Mittwoch, den 10.02.2016, 19:44 +0100 schrieb Makarius:</p>\n<blockquote>\n<p>Maybe it is better to convince Debian maintainers to regain some<br>\n sanity? <br>\n The testing of dash 0.5.8 has happened only last week: <br>\n<a href=\"https://tracker.debian.org/news/744916\">https://tracker.debian.org/news/744916</a></p>\n</blockquote>\n<p>I filed a report at <a href=\"http://bugs.debian.org/814358\">http://bugs.debian.org/814358</a></p>\n</blockquote>\n</blockquote>\n</blockquote>\n<p>Quite recently (a few months ago?), the encoding of shell functions in<br>\nbash had been changed to a avoid security hole (»shell shock«).  I do<br>\nnot recall the details, but maybe this is also relevant here.</p>\n<p>Florian</p>\n<blockquote>\n<blockquote>\n<p>Thanks.</p>\n<blockquote>\n<p>From what I've seen on the dash tracker and now a bit of Debian, this<br>\nall <br>\nlooks like a very hostile environment.  20 years ago, the OpenSource<br>\nworld was still idealistic and friendly.</p>\n</blockquote>\n<p>What effectively happens here, is that people who take POSIX to the<br>\nletter (dash) fight other people who embrace-and-extend it (bash).</p>\n</blockquote>\n<p>After reading the official (unpatched) sources of bash-4.3 from<br>\n<a href=\"https://www.gnu.org/software/bash\">https://www.gnu.org/software/bash</a> I've found out that this is not a<br>\nproblem of dash vs. bash, but of Debian against itself and its users.</p>\n<p>In the original GNU bash, a shell function \"foo\" is stored in the<br>\nenvironment as \"foo=() ...\". This is well-formed in the sense of other<br>\nshells, and bash-0.5.8 will let it through as expected.</p>\n<p>The Debian version of bash decorates the name with a suffix \"%%\" that<br>\nrenders the name malformed, and thus it gets lost. See the patch<br>\n<a href=\"http://sourcesdev.debian.net/patches/bash/4.3-14/bash43-027.diff\">http://sourcesdev.debian.net/patches/bash/4.3-14/bash43-027.diff</a></p>\n<p>This patch changes the encoding bash uses for exported functions to<br>\n  avoid clashes with shell variables and to avoid depending only on an<br>\n  environment variable's contents to determine whether or not to interpret<br>\n  it as a shell function.</p>\n<p>Maybe you can attach this information in your own words to the above<br>\nDebian tracker item. I did not manage to find access to it, and my<br>\nimpression is that Debian is a closed society anyway.</p>\n<p>Makarius<br>\n<a href=\"/user_uploads/14278/T8jHvB0eoo9TJO24NZUYvMyg/signature.asc\">signature.asc</a></p>\n</blockquote>",
        "id": 294665954,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661171764
    },
    {
        "content": "<p>From: Lars Hupel &lt;<a href=\"mailto:hupel@in.tum.de\">hupel@in.tum.de</a>&gt;<br>\nI think your assessment is correct. See also</p>\n<p>&lt;<a href=\"https://en.wikipedia.org/wiki/Shellshock_%28software_bug%29\">https://en.wikipedia.org/wiki/Shellshock_%28software_bug%29</a>&gt;</p>\n<p>Also, it's not just Debian. On my Arch system, I also see the suffix.<br>\nFor example, <code>isabelle env</code> contains</p>\n<p>BASH_FUNC_isabelle_scala%%=() ...</p>\n<p>This is bash version 4.3.042. Arch is well-known for rarely patching<br>\nupstream sources.</p>\n<p>Cheers<br>\nLars</p>",
        "id": 294665973,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661171772
    },
    {
        "content": "<p>From: Joachim Breitner &lt;<a href=\"mailto:breitner@kit.edu\">breitner@kit.edu</a>&gt;<br>\nHi,</p>\n<p>is it? Isn’t \"SHELL\" how a user configures his preferred _interactive_<br>\nshell? That might be ksh, or fish, or even ghci for all you know...<br>\nLikely not something you want to rely on.</p>\n<p>Greetings,<br>\nJoachim<br>\n<a href=\"/user_uploads/14278/bziN1HzmqfIQdUNq669M2zOU/signature.asc\">signature.asc</a></p>",
        "id": 294665997,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661171784
    },
    {
        "content": "<p>From: Joachim Breitner &lt;<a href=\"mailto:breitner@kit.edu\">breitner@kit.edu</a>&gt;<br>\nHi,</p>\n<p>Thanks for digging up the patch, it is a useful bit of information.<br>\nI’ll raise it in the bug tracker in a little while.</p>\n<p>Your impression on the openess is (IMHO) very wrong. Debian’s bug<br>\ntracker is so open that it you probably did not expect it to be so<br>\nsimple: Just send a mail to <a href=\"mailto:814358@bugs.debian.org\">814358@bugs.debian.org</a> (the link in the<br>\ntitle of the bug – admittedly not easily discoverable).</p>\n<p>Greetings,<br>\nJoachim<br>\n<a href=\"/user_uploads/14278/Dt14r8XjVl3UMFLBoglT_Iq6/signature.asc\">signature.asc</a></p>",
        "id": 294666007,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661171788
    },
    {
        "content": "<p>From: Florian Haftmann &lt;<a href=\"mailto:florian.haftmann@informatik.tu-muenchen.de\">florian.haftmann@informatik.tu-muenchen.de</a>&gt;</p>\n<blockquote>\n<blockquote>\n<blockquote>\n<p>An alternative is to modify Poly/ML to use /bin/bash or<br>\ngetenv(SHELL)<br>\ninstead of hardwired /bin/sh -- that would be a typical Debianistic<br>\npatch.</p>\n</blockquote>\n<p>getenv(SHELL), falling back on /bin/sh by default is a very custom<br>\nbehaviour and would make sense; nevertheless the user still has the<br>\nburden of setting SHELL explicitly in case of problems.</p>\n</blockquote>\n<p>is it? Isn’t \"SHELL\" how a user configures his preferred _interactive_<br>\nshell? That might be ksh, or fish, or even ghci for all you know...<br>\nLikely not something you want to rely on.</p>\n</blockquote>\n<p>E.g. make does interpret SHELL that way;  but that seems indeed not to<br>\nbe representative:</p>\n<blockquote>\n<p>haftmann@scarlatti:/data$ SHELL=/usr/bin/tclsh python -c 'import os; os.system(\"ps -f\")'<br>\nUID        PID  PPID  C STIME TTY          TIME CMD<br>\nhaftmann  3286  3030  0 08:46 pts/0    00:00:00 bash<br>\nhaftmann  5800  3286  0 09:33 pts/0    00:00:00 python -c import os; os.system(\"ps -f\")<br>\nhaftmann  5801  5800  0 09:33 pts/0    00:00:00 sh -c ps -f<br>\nhaftmann  5802  5801  0 09:33 pts/0    00:00:00 ps -f</p>\n</blockquote>\n<p>Cheers,<br>\n    Florian<br>\n<a href=\"/user_uploads/14278/9c1dzA260avUsj9HEkQRhIWv/signature.asc\">signature.asc</a></p>",
        "id": 294666588,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661171985
    },
    {
        "content": "<p>From: Joachim Breitner &lt;<a href=\"mailto:breitner@kit.edu\">breitner@kit.edu</a>&gt;<br>\nHi,</p>\n<p>indeed I’m less sure about my interpretation, and the POSIX standard is<br>\nnot very helpful. I tried to kick of a discussion over at<br>\n<a href=\"http://unix.stackexchange.com/questions/263773/is-the-shell-environment-variable-only-for-interactive-shells\">http://unix.stackexchange.com/questions/263773/is-the-shell-environment-variable-only-for-interactive-shells</a></p>\n<p>Greetings,<br>\nJoachim<br>\n<a href=\"/user_uploads/14278/mdIncdPlktLFyMysUIgXXqqw/signature.asc\">signature.asc</a></p>",
        "id": 294666641,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661171997
    },
    {
        "content": "<p>From: Joachim Breitner &lt;<a href=\"mailto:breitner@kit.edu\">breitner@kit.edu</a>&gt;<br>\nHi Florian,</p>\n<p>that is actually not the case:</p>\n<p>/tmp/foo $ cat Makefile <br>\ntest:<br>\n    echo bar<br>\n/tmp/foo $ SHELL=/bin/true make test<br>\necho bar<br>\nbar<br>\n/tmp/foo $ make test SHELL=/bin/true<br>\necho bar</p>\n<p>it seems you confused make’s Makefile variable SHELL with the<br>\nenvironment variable SHELL.</p>\n<p>Greetings,<br>\nJoachim<br>\n<a href=\"/user_uploads/14278/vX20eI9Odxslg65MwCtxPuE2/signature.asc\">signature.asc</a></p>",
        "id": 294666757,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661172016
    },
    {
        "content": "<p>From: Joachim Breitner &lt;<a href=\"mailto:breitner@kit.edu\">breitner@kit.edu</a>&gt;<br>\nHi,</p>\n<p>this is still 2015 (sorry for not helping with beta-testing the next<br>\nrelease at the moment).</p>\n<p>I suddenly see this failure building a session with document:</p>\n<p>/tmp $ isabelle mkroot -d test<br>\n/tmp $ cd test/<br>\n/tmp/test $ vim ROOT </p>\n<h1>add only one theory, Foo</h1>\n<p>/tmp/test $ echo 'theory Foo imports Main begin end' &gt; Foo.thy<br>\n/tmp/test $ isabelle build -D .<br>\nRunning test ...</p>\n<p>test FAILED<br>\n(see also /home/jojo/.isabelle/Isabelle2015/heaps/polyml-5.5.2_x86-linux/log/test)</p>\n<p>val it = (): unit<br>\nLoading theory \"Foo\"</p>\n<h3>theory \"Foo\"</h3>\n<h3>0.070s elapsed time, 0.140s cpu time, 0.000s GC time</h3>\n<p>\"$ISABELLE_TOOL\" document -o 'pdf' -n 'document' -t '' 'output/document' 2&gt;&amp;1<br>\n*** /opt/isabelle/Isabelle2015/bin/isabelle: Zeile 52: splitarray: Kommando nicht gefunden.<br>\n*** Unknown Isabelle tool: document<br>\n*** <br>\n*** Failed to build document \"/tmp/test/output/document.pdf\"<br>\nUnfinished session(s): test<br>\n0:00:10 elapsed time, 0:00:16 cpu time, factor 1.60</p>\n<p>Here is what I found so far:</p>\n<p>splitarray is a bash function defined in lib/scripts/getsettings, which<br>\nexports a bunch of variables and functions to the environment, (using<br>\n\"set -o allexport\"). It also exports ISABELLE_SETTINGS_PRESENT and does<br>\nnothing if it finds that variable to be set.</p>\n<p>It seems that when isabelle build calls isabelle document, it somehow<br>\nhas ISABELLE_SETTINGS_PRESENT in the environment (thus making the line<br>\nsource \"$ISABELLE_HOME/lib/scripts/getsettings\" || exit 2<br>\nin bin/isabelle do nothing), but not the bash function splitarray (thus<br>\nmaking the program fail).</p>\n<p>It must be a recent change in my system, but my bash package has not<br>\nchanged since September, and I can’t imagine what other package might<br>\nhave caused this.</p>\n<p>Has anyone else seen this before?</p>\n<p>Greetings,<br>\nJoachim<br>\n<a href=\"/user_uploads/14278/bo1PPpym4YzbDC4FT57T3Sl6/signature.asc\">signature.asc</a></p>",
        "id": 294668929,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661172777
    }
]