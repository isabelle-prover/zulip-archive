[
    {
        "content": "<p>From: chouaffe frannck-edmond &lt;<a href=\"mailto:chouaffe2000@yahoo.fr\">chouaffe2000@yahoo.fr</a>&gt;<br>\nHello isabelle users,<br>\nI just want to ask if I can use a Mathml file as an input format for isabelle. I have written some mathematical proofs in Mathml, and I would like to check it  within isabelle. Is it possible?</p>\n<p>Kind regards.</p>\n<p>Edmond</p>\n<hr>\n<p>Do You Yahoo!?<br>\nEn finir avec le spam? Yahoo! Mail vous offre la meilleure protection possible contre les messages non sollicités <br>\n<a href=\"http://mail.yahoo.fr\">http://mail.yahoo.fr</a> Yahoo! Mail</p>",
        "id": 294059676,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660823103
    },
    {
        "content": "<p>From: mahmoud abdelazim &lt;<a href=\"mailto:m.abdelazim@icloud.com\">m.abdelazim@icloud.com</a>&gt;<br>\ni am user of Isabelle and i am trying to proof a theorem for example : </p>\n<p>theorem rev_rev [simp]: \"rev(rev xs) = xs\"<br>\n   apply(induct_tac xs)<br>\n   apply(auto)<br>\n   done</p>\n<p>The steps of auto could be done using separate steps?<br>\nThe steps of induct_tac could be done using separate steps?<br>\nplease provide an example</p>",
        "id": 294307335,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660924760
    },
    {
        "content": "<p>From: Lawrence Paulson &lt;<a href=\"mailto:lp15@cam.ac.uk\">lp15@cam.ac.uk</a>&gt;<br>\nInduction cannot be broken down into smaller steps. It is a primitive concept.<br>\nLarry Paulson</p>",
        "id": 294307378,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660924772
    },
    {
        "content": "<p>From: Alfio Martini &lt;<a href=\"mailto:alfio.martini@acm.org\">alfio.martini@acm.org</a>&gt;<br>\nHi Mahmoud,</p>\n<p>Yes, you can prove this theorem in a lot of detail using the proof language<br>\nIsar (see the<br>\ntutorial \"Programming and Proving in Isabelle/HOL\").</p>\n<p>As an example, I attach a theory that shows the proof of one of the lemmas<br>\nyou need to prove your theorem.<br>\nI use one of the several possible styles.</p>\n<p>Best!<br>\n<a href=\"/user_uploads/14278/3RfcRoFGR3oM2L5GpJzLp9mo/isarlistexample.thy\">isarlistexample.thy</a></p>",
        "id": 294307410,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660924786
    },
    {
        "content": "<p>From: Andrew Boyton &lt;<a href=\"mailto:Andrew.Boyton@nicta.com.au\">Andrew.Boyton@nicta.com.au</a>&gt;<br>\nHi</p>\n<p>Auto runs on both subgoals. Tracing what auto does for each shows auto used the following rules.</p>\n<ol>\n<li>\n<p>rev (rev []) = []<br>\n    simp_thms(6): (?x = ?x) = True<br>\n    rev.simps(1): rev [] = []</p>\n</li>\n<li>\n<p>⋀a list. rev (rev list) = list ⟹ rev (rev (a # list)) = a # list<br>\n    True_implies_equals: (True ⟹ PROP ?P) ≡ PROP ?P<br>\n    simp_thms(6): (?x = ?x) = True<br>\n    append_Cons: (?x # ?xs) @ ?ys = ?x # ?xs @ ?ys<br>\n    append_Nil: [] @ ?ys = ?ys<br>\n    rev.simps(1): rev [] = []<br>\n    rev.simps(2): rev (?x # ?xs) = rev ?xs @ [?x]<br>\n    rev_append: rev (?xs @ ?ys) = rev ?ys @ rev ?xs<br>\n    rev_rev_ident: rev (rev ?xs) = ?xs</p>\n</li>\n</ol>\n<p>Andrew</p>",
        "id": 294318012,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660926060
    }
]