[
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nDear Isabelle users,</p>\n<p>this is another attempt to make a stable release of Isabelle this autumn:</p>\n<p><a href=\"http://isabelle.in.tum.de/website-Isabelle2013-2-RC1\">http://isabelle.in.tum.de/website-Isabelle2013-2-RC1</a></p>\n<p>This is presumably the only release candidate before final lift-off of <br>\nIsabelle2013-2 in the first days of December.</p>\n<p>Notable changes versus Isabelle2013-1 (from NEWS):</p>\n<p><strong>* Prover IDE -- Isabelle/Scala/jEdit </strong>*</p>\n<ul>\n<li>\n<p>More robust editing of running commands with internal forks,<br>\ne.g. non-terminating 'by' steps.</p>\n</li>\n<li>\n<p>More relaxed Sledgehammer panel: avoid repeated application of query<br>\nafter edits surrounding the command location.</p>\n</li>\n</ul>\n<p>There should not be any incompatibilites wrt. Isabelle2013-1, which means <br>\neverybody who is already on the latest release can try out the new release <br>\ncandidate without any extra efforts.</p>\n<p>See also <a href=\"https://bitbucket.org/isabelle_project/isabelle-release\">https://bitbucket.org/isabelle_project/isabelle-release</a> for the <br>\nmain website where the Isabelle release process is formally organized. <br>\nThere is also a link to an issue tracker on this Bitbucket site.</p>\n<p>Observations from testing release candidates may be discussed here on <br>\nisabelle-users (not isabelle-dev), on the bitbucket tracker, or via <br>\nprivate mail.</p>\n<p>Makarius</p>",
        "id": 294256394,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660912759
    },
    {
        "content": "<p>From: bnord &lt;<a href=\"mailto:bnord01@gmail.com\">bnord01@gmail.com</a>&gt;<br>\nHi,</p>\n<p>when trying the \"lemma False by (intro TrueE)\" example on Windows many <br>\ntimes the whole Isabelle interaction seems to freeze, everything from <br>\nthe previous command becomes a light-gray-pinkish background and there <br>\nis no Isabelle output/response whatsoever. Sometimes after running for <br>\nseveral minutes in the background the process seems to recover somehow.</p>\n<p>Best<br>\n     Benedikt</p>",
        "id": 294256440,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660912775
    },
    {
        "content": "<p>From: bnord &lt;<a href=\"mailto:bnord01@gmail.com\">bnord01@gmail.com</a>&gt;<br>\nBy the way, I could reproduce this under Linux on the same machine (a <br>\nlittle less frequent) and could reproduce it under OS X on a different <br>\nmachine only when letting the non-terminating command run for a while. <br>\nThis also left me with a runaway process under OS X which I had to <br>\nterminate manually after exiting Isabelle/Jedit.</p>\n<p>Best<br>\n     Benedikt</p>",
        "id": 294256468,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660912784
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nWhich runaway process, poly or java?</p>\n<p>Can you also give a rough hardware specification of the test machines?</p>\n<p>Makarius</p>",
        "id": 294256490,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660912792
    },
    {
        "content": "<p>From: Peter Lammich &lt;<a href=\"mailto:lammich@in.tum.de\">lammich@in.tum.de</a>&gt;<br>\nI have the same effect under Linux(Ubuntu) occasionally,<br>\nbut no reliable way how to reproduce.</p>",
        "id": 294256503,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660912796
    },
    {
        "content": "<p>From: bnord &lt;<a href=\"mailto:bnord01@gmail.com\">bnord01@gmail.com</a>&gt;<br>\nThe runaway process is poly.</p>\n<p>The win/linux test machine is a Intel Core i5-3570 with 8GB of ram <br>\nrunning Windows 8.1 resp. Xubuntu 13.10</p>\n<p>The OS X test machine is a 2011 MacBook Pro with 8GB of ram running OS X <br>\n10.9</p>\n<p>Best<br>\n     Benedikt</p>",
        "id": 294256538,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660912802
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nAnother interesting detail here is Windows 8.1.  I have recently upgraded <br>\nmy Windows 8 test machine to 8.1, but made only very brief tests (where it <br>\nwas looking OK).</p>\n<p>Since you also run Linux here: Do you experience differences in the <br>\ngeneral performance, running on the same hardware but with quite different <br>\noperating systems? This affects Cygwin and Poly/ML running on it.</p>\n<p>It is a pending open question if something completely different needs to <br>\nbe done here, e.g. more native MingW as basis for the Isabelle/ML process. <br>\n(Cygwin is required in any case, for add-on tools like E Prover, SPASS <br>\netc.)</p>\n<p>Makarius</p>",
        "id": 294256571,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660912808
    },
    {
        "content": "<p>From: René Thiemann &lt;<a href=\"mailto:rene.thiemann@uibk.ac.at\">rene.thiemann@uibk.ac.at</a>&gt;<br>\nDear all,</p>\n<p>I can confirm this.<br>\nwhen proving False via</p>\n<p>theory Scratch<br>\nimports Main<br>\nbegin</p>\n<p>lemma False <br>\nproof (intro TrueE)</p>\n<p>the system gets lost somehow (on MacOS X 10.9):</p>\n<ul>\n<li>\n<p>changing the method of (intro TrueE) does not stop the system from evaluation<br>\n  (comsuming 100% of CPF and eating &gt; 4 GB of RAM)</p>\n</li>\n<li>\n<p>also if one reloads the buffer, everything remains red and evaluation continues</p>\n</li>\n<li>sometimes even when quitting Isabelle via Cmd-Q, afterwards a poly-process remains which eats up &gt; 4 GB RAM.</li>\n</ul>\n<p>Here are some more details:</p>\n<p>2 x 2.8 Ghz Quad-Core Intel Xeon<br>\n6 GB RAM</p>\n<p>ML_PLATFORM=\"x86_64-darwin\"<br>\nML_HOME=\"/Applications/Isabelle2013-2-RC1.app/Isabelle/contrib/polyml-5.5.1-1/x86_64-darwin\"<br>\nML_SYSTEM=\"polyml-5.5.1-1\"<br>\nML_OPTIONS=\"-H 500\"</p>\n<p>Best regards,<br>\nRené</p>",
        "id": 294256584,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660912814
    },
    {
        "content": "<p>From: bnord &lt;<a href=\"mailto:bnord01@gmail.com\">bnord01@gmail.com</a>&gt;<br>\nI don't really use this machine a lot for Isabelle development so I <br>\ncan't give a dependable report here. It maybe feels a little more <br>\nresponsive under Linux but it's totally fine and maybe it's only my <br>\nimagination. But I really don't do much more than browsing theories on <br>\nthis machine.</p>\n<p>Best<br>\n     Benedikt</p>",
        "id": 294256610,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660912821
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nJust another side remark, before I look more closely how Isabelle/Scala <br>\ncan terminate Isabelle/ML processes more reliably.</p>\n<p>Above you are using x86_64-darwin with its unbounded address space, <br>\nbecause polyml-5.5.1 on x86-darwin sometimes cannot allocate heap space <br>\nfor IsaFoR, as we know already.</p>\n<p>The good news is that David Matthews has improved this after the Poly/ML <br>\n5.5.1 release, and he will make another release soon.</p>\n<p>Then you can also use x86-darwin for your application, which limits the <br>\npoly process to comfortable 2-3 GB.  This is sufficient in practice, due <br>\nto the online sharing of immutable values on the ML heap that David <br>\nMatthews is doing for us.</p>\n<p>Makarius</p>",
        "id": 294256646,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660912833
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nOn Mon, 25 Nov 2013, bnord wrote:</p>\n<blockquote>\n<p>when trying the \"lemma False by (intro TrueE)\" example on Windows many <br>\ntimes the whole Isabelle interaction seems to freeze, everything from <br>\nthe previous command becomes a light-gray-pinkish background and there <br>\nis no Isabelle output/response whatsoever. Sometimes after running for <br>\nseveral minutes in the background the process seems to recover somehow.</p>\n</blockquote>\n<p>The example of (intro TrueE) is a bit brutal, since it is a <br>\nnon-terminating execution that allocates more and more ML heap content. <br>\nThus it uses up all CPU and memory resources that the ML process can get: <br>\nnormally it is only 100% CPU for the ML user task, but the ML runtime <br>\nsystem will use multiple threads for garbage collection and value sharing, <br>\nespecially when the heap gets tight.</p>\n<p>This would explain, why the process is much less reactive to friendly <br>\ninput messages from Isabelle/Scala to tell the PIDE protocol handler of <br>\nIsabelle/ML to terminate certain ML threads, e.g. after some edits.</p>\n<p>(It also explains why physical memory eventually fills up on x86_64.)</p>\n<p>Waiting several minutes to \"recover\" might mean two things: (a) you had <br>\nsome edits to remove the diverging stuff that got eventually accepted, or <br>\n(b) the ML task finally evaporated with some internal interrupt exception <br>\ndue to runtime system overload.  In the latter case, we have again the <br>\ncase that the situation looks good on the surface, but is bad at the <br>\nbottom.</p>\n<p>I did not address this second case in the change for Isabelle2013-2-RC1, <br>\nsince it requires further rethinking how to propagate various kinds of ML <br>\nbreakdown in the PIDE protocol.  There were reasons of not just exposing <br>\nall physical failures, due to remaining non-PIDE uses of Isabelle (TTY and <br>\nProof General.)</p>\n<blockquote>\n<p>By the way, I could reproduce this under Linux on the same machine (a <br>\nlittle less frequent) and could reproduce it under OS X on a different <br>\nmachine only when letting the non-terminating command run for a while. <br>\nThis also left me with a runaway process under OS X which I had to <br>\nterminate manually after exiting Isabelle/Jedit.</p>\n</blockquote>\n<p>Just to make sure: the left-over poly process only appeared on Mac OS X, <br>\nbut not Linux nor Windows?</p>\n<p>6 months ago, I discovered by accident that some Ubuntu or Debian <br>\nmaintainer had changed the command-line of /bin/kill to make it more <br>\nmodern according to GNU standards, but that \"fix\" destroyed the <br>\ntraditional (and presumably portable) kill invocation used Isabelle/Scala. <br>\nSo I made another (presumably portable) command line for Isabelle2013-1, <br>\nwhich now turns out to be incompatiable with Mac OS X (e.g. Mountain <br>\nLion).  This is just the normal POSIX-GNU-BSD non-portability hell ...</p>\n<p>I am now addressing this by using the builtin kill command of GNU bash, <br>\nwhich is normally an island of portability in a sea of forks and <br>\ndivergence.  So Mac OS X process termination should be back again in the <br>\nnext round.</p>\n<p>Some uncertainty about Windows remains, since Gottfried Barrow had the <br>\nimpression that termination of external processes was less reliable in <br>\nIsabelle2013-1 than Isabelle2013 or Isabelle2012.</p>\n<p>Makarius</p>",
        "id": 294256742,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660912863
    },
    {
        "content": "<p>From: bnord &lt;<a href=\"mailto:bnord01@gmail.com\">bnord01@gmail.com</a>&gt;<br>\nAm 25.11.2013 18:36, schrieb Makarius:</p>\n<blockquote>\n<p>Waiting several minutes to \"recover\" might mean two things: (a) you <br>\nhad some edits to remove the diverging stuff that got eventually <br>\naccepted, or (b) the ML task finally evaporated with some internal <br>\ninterrupt exception due to runtime system overload.  In the latter <br>\ncase, we have again the case that the situation looks good on the <br>\nsurface, but is bad at the bottom.<br>\nWith \"recover\" I meant that the by(intro TrueE) was  again marked as <br>\nrunning and everything worked as expected. I didn't remove the command <br>\nor anything.<br>\nJust to make sure: the left-over poly process only appeared on Mac OS <br>\nX, but not Linux nor Windows? <br>\nYes, I couldn't observe this under Linux nor Windows.</p>\n</blockquote>\n<p>Best<br>\n     Benedikt</p>",
        "id": 294256764,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660912869
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nI have made two more rounds over all this.  In the next release candidate <br>\n(in 48 hours) it should work better, although there are always situations <br>\nwhere Poly/ML cannot be interrupted quickly.  Nonetheless, <br>\ninterruptibility of Poly/ML is generally better than other platforms I <br>\nhave seen recently, notably OCaml and JVM.</p>\n<p>Makarius</p>",
        "id": 294256801,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660912887
    },
    {
        "content": "<p>From: Julian Brunner &lt;<a href=\"mailto:julianbrunner@gmail.com\">julianbrunner@gmail.com</a>&gt;<br>\nI just worked with Isabelle/jEdit for a few hours, during which it<br>\nbecame unresponsive about 20 times. The reason for becoming<br>\nunresponsive were mostly non-terminating proof methods (mostly force,<br>\nblast and auto), although in these cases the non-termination did not<br>\nlead to consumption of large amounts of memory like with 'intro<br>\nTrueE'. By unresponsive, I mean that it will no longer update the<br>\noutput panel and the text gets a gray background, which is different<br>\nfrom the regular case of non-terminating proof method which will allow<br>\nme to continue working in other places of the document. My system<br>\nshows that a poly process takes up one entire CPU core, while not<br>\nconsuming much memory (just a few hundred MB).</p>\n<p>Observations:<br>\nremoving the non-terminating method invocation by editing the text<br>\ndoes not lead to recovery (at least not within a minute)<br>\nclosing jEdit terminates all associated processes (including the<br>\nnon-terminating poly process) almost immediately<br>\nit seems like try0 never gets stuck with non-terminating proof<br>\nmethods, always killing them off after the timeout (for instance,<br>\n'apply force' may render the IDE irreversibly unresponsive when<br>\napplied to a certain goal, while this is not the case when applying<br>\ntry0 to the same goal)</p>\n<p>I'm running Ubuntu 12.10, x64.</p>",
        "id": 294257160,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660912975
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nThanks for testing.</p>\n<p>I can reproduce the problem with Isabelle2013-2-RC1 -- there is still <br>\nsomething utterly wrong with the termination of running tasks.  In <br>\nIsabelle2013-1 there was too much of it, now there is too little.</p>\n<p>Makarius</p>",
        "id": 294257267,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660913016
    }
]