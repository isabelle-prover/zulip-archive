[
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nThere are many fine points like that, which I would have liked to see in <br>\nforthcoming Isabelle2014, but did not make it due to still existing <br>\nbaggage of Proof General legacy.</p>\n<p>Maybe after next week at Vienna we have a better impression how many <br>\nremaining uses of Proof General are left over (as well as remaining <br>\nusers).</p>\n<p>Everyone is invited to discuss that not just with me, but with any of the <br>\nIsabelle/jEdit veterans.  Early adopters have jumped on the train in <br>\nOctober 2011 with the first stable release of the Prover IDE, and the <br>\ncoming one is already version 5 in the internal counting.</p>\n<p>Makarius</p>",
        "id": 294281834,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660920606
    },
    {
        "content": "<p>From: Andreas Lochbihler &lt;<a href=\"mailto:andreas.lochbihler@inf.ethz.ch\">andreas.lochbihler@inf.ethz.ch</a>&gt;<br>\nHi Makarius,</p>\n<p>I am wondering why symbol completion in antiquotations inside text blocks behaves <br>\ndifferently from symbol completion in ordinary term statements. Here's an example:</p>\n<p>If I type a symbol name like \\alpha in a lemma statement such as</p>\n<p>lemma \"\\alpha\"</p>\n<p>then I can tell Isabelle to replace \\alpha by α. (In fact, I have enabled immediate <br>\ncompletion, so \\alp suffices.) Inside antiquotations, however, this does not seem to work.</p>\n<p>text {* @{term \"\\alpha\"} *} makes Isabelle complain about a \"bad escape character in <br>\nstring\". In order to get α, I now have to type \\&lt;alpha&gt; and then press Ctrl-B. This <br>\nbecomes particularly annoying with longer symbol names like \\&lt;rightharpoonup&gt;.</p>\n<p>Is this difference intentional? I would have expected that antiquotations switch back to <br>\n\"inner syntax mode\" and thus behave as in ordinary term statements.</p>\n<p>Andreas</p>",
        "id": 294286523,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660922047
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nOn Tue, 8 Jul 2014, Andreas Lochbihler wrote:</p>\n<blockquote>\n<p>I am wondering why symbol completion in antiquotations inside text blocks <br>\nbehaves differently from symbol completion in ordinary term statements. <br>\nHere's an example:</p>\n<p>If I type a symbol name like \\alpha in a lemma statement such as</p>\n<p>lemma \"\\alpha\"</p>\n<p>then I can tell Isabelle to replace \\alpha by α. (In fact, I have enabled <br>\nimmediate completion, so \\alp suffices.) Inside antiquotations, however, this <br>\ndoes not seem to work.</p>\n<p>text {* @{term \"\\alpha\"} *} makes Isabelle complain about a \"bad escape <br>\ncharacter in string\". In order to get α, I now have to type \\&lt;alpha&gt; and then <br>\npress Ctrl-B. This becomes particularly annoying with longer symbol names <br>\nlike \\&lt;rightharpoonup&gt;.</p>\n</blockquote>\n<p>In June I wrote a very long section on Completion for the Isabelle/jEdit <br>\nmanual.  It might or might not shed light on this, and I would be <br>\ninterested to get feedback about the text.</p>\n<p>The problem seen here is one of \"language context\" in the completion <br>\nmechanism.  In certain situations, a \\foo sequence is syntactically <br>\ninvalid and destroys the intended language context, dropping out of the <br>\nsyntax of a certain sub-language.  Thus the \"symbols\" flag of the language <br>\nmight get lost, and symbols are not completed.</p>\n<p>I have presently no better answer than using a valid \\&lt;foo&gt; symbol and <br>\ncomplete on that.</p>\n<p>Note that the problem would be absent, if the traditional quotes were <br>\nreplaced by the more robust cartouches.  But this is a bit speculative at <br>\nthe moment.</p>\n<blockquote>\n<p>Is this difference intentional? I would have expected that <br>\nantiquotations switch back to \"inner syntax mode\" and thus behave as in <br>\nordinary term statements.</p>\n</blockquote>\n<p>The general intention of completion is to provide a \"Do what I mean\" <br>\nmechanism for the Prover IDE, but the more it advances and becomes <br>\nsmarter, the more surprising the breakdowns.</p>\n<p>For the moment we should just continue collecting observations, and <br>\nfurther hints how to work smoothly with the system as it is now.</p>\n<p>Makarius</p>",
        "id": 294287011,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660922195
    },
    {
        "content": "<p>From: Andreas Lochbihler &lt;<a href=\"mailto:andreas.lochbihler@inf.ethz.ch\">andreas.lochbihler@inf.ethz.ch</a>&gt;<br>\nHi Makarius,</p>\n<p>On 09/07/14 17:27, Makarius wrote:</p>\n<blockquote>\n<blockquote>\n<p>I am wondering why symbol completion in antiquotations inside text blocks behaves<br>\ndifferently from symbol completion in ordinary term statements. Here's an example:</p>\n<p>If I type a symbol name like \\alpha in a lemma statement such as</p>\n<p>lemma \"\\alpha\"</p>\n<p>then I can tell Isabelle to replace \\alpha by α. (In fact, I have enabled immediate<br>\ncompletion, so \\alp suffices.) Inside antiquotations, however, this does not seem to work.</p>\n<p>text {* @{term \"\\alpha\"} *} makes Isabelle complain about a \"bad escape character in<br>\nstring\". In order to get α, I now have to type \\&lt;alpha&gt; and then press Ctrl-B. This<br>\nbecomes particularly annoying with longer symbol names like \\&lt;rightharpoonup&gt;.</p>\n</blockquote>\n<p>In June I wrote a very long section on Completion for the Isabelle/jEdit manual.  It might<br>\nor might not shed light on this, and I would be interested to get feedback about the text.<br>\nI read the text on completion, but I must admit that I would not have been able to figure <br>\nout your explanation with dropping out of the language context. As is usual in the <br>\nIsabelle documentation, your text describes the general principles, but not the concrete <br>\ninstances that one encounters in practice. For example, I was not able to figure out which <br>\nlanguage contexts exist (in a plain Isabelle/HOL session) and when language contexts are <br>\nswitched.</p>\n</blockquote>\n<p>There probably are the contexts \"outer syntax\", \"inner syntax\", \"LaTeX text\", ML source, <br>\nbut there could also be something like \"inner syntax inside the antiquotation text\" which <br>\nmight behave differently from \"inner syntax inside the antiquotation term\" and \"inner <br>\nsyntax inside the antiquotation const\". I don't know how I could find out which language <br>\ncontext I am currently working in. Maybe it suffices to display the language context of <br>\nthe curser somewhere in Isabelle (e.g., in the status bar as Emacs used to do it).</p>\n<p>I remember a presentation you gave long ago (possibly at the workshop in Cambridge in <br>\n2010) in which you showed that you can nest an term antiquotation inside an ML <br>\nantiquotation inside ... inside a text block. That made me think that there is probably <br>\nnot one separate language context for each antiquotation, but that I might expect the same <br>\nbehaviour as with normal inner syntax.</p>\n<p>Andreas</p>\n<blockquote>\n<p>The problem seen here is one of \"language context\" in the completion mechanism.  In<br>\ncertain situations, a \\foo sequence is syntactically invalid and destroys the intended<br>\nlanguage context, dropping out of the syntax of a certain sub-language.  Thus the<br>\n\"symbols\" flag of the language might get lost, and symbols are not completed.</p>\n<p>I have presently no better answer than using a valid \\&lt;foo&gt; symbol and complete on that.</p>\n<p>Note that the problem would be absent, if the traditional quotes were replaced by the more<br>\nrobust cartouches.  But this is a bit speculative at the moment.</p>\n<blockquote>\n<p>Is this difference intentional? I would have expected that antiquotations switch back to<br>\n\"inner syntax mode\" and thus behave as in ordinary term statements.</p>\n</blockquote>\n<p>The general intention of completion is to provide a \"Do what I mean\" mechanism for the<br>\nProver IDE, but the more it advances and becomes smarter, the more surprising the breakdowns.</p>\n<p>For the moment we should just continue collecting observations, and further hints how to<br>\nwork smoothly with the system as it is now.</p>\n<p>Makarius</p>\n</blockquote>",
        "id": 294287214,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660922268
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nThis is done with the ubiquitious C-hover idiom: it produces a popup <br>\nsaying \"language: NAME\".  The other flags for the language are not <br>\nprinted, but accessible dynamically in SideKick with \"isabelle-markup\" <br>\nparser in the status window:</p>\n<p>&lt;language name=\"NAME\" symbols=\"false\" antiquotes=\"false\" delimited=\"true\"/&gt;</p>\n<p>Or you look in ~~/src/Pure/PIDE/markup.ML for the language contexts that <br>\nare presently used in Isabelle/Pure -- but tools could invent their own.</p>\n<p>To make this exploration more fun, consider this formal Isar source:</p>\n<p>text ‹ see @{file \"~~/src/Pure/PIDE/markup.ML\"} ›</p>\n<p>Here the file-system path specification has language context \"path\", <br>\nbecause the \"file\" antiquotation has provided that semantic information. <br>\nThis means that file-name completion is active in PIDE: you can type some <br>\nprefix of it and use C+b to get more from the directory content.</p>\n<p>If this is madness, there is method in it ...</p>\n<p>Makarius</p>",
        "id": 294287430,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660922330
    },
    {
        "content": "<p>From: Christian Sternagel &lt;<a href=\"mailto:c.sternagel@gmail.com\">c.sternagel@gmail.com</a>&gt;<br>\nDoes that mean that cartouches for antiquotations will not be part of <br>\nIsabelle2014? Just for the record: I would like to have</p>\n<p>@{term ‹α something›}</p>\n<p>since, as you said, this would avoid some problems with symbol completion.</p>\n<p>cheers</p>\n<p>chris</p>",
        "id": 294287619,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660922391
    }
]