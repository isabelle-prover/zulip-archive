[
    {
        "content": "<p>From: Lars Noschinski &lt;<a href=\"mailto:noschinl@in.tum.de\">noschinl@in.tum.de</a>&gt;<br>\nSomething I noticed just now: On my machine (a quad-core i7), starting<br>\nsledgehammer (with 3 provers, from the panel) keeps the rest of the<br>\nprover from making progress. Processing the document only resumes when<br>\nsledgehammer finishes (I guess it completely exhausts the worker pool?).</p>",
        "id": 294289601,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660923005
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nAs far as I understand sledgehammer it should use normal future forks <br>\n(via <a href=\"http://Par_List.map\">Par_List.map</a>) and thus participate in the global worker thread pool. <br>\nThe size of that is determined by the system option \"threads\", which is 0 <br>\nby default, and thus determined from the hardware.  You can use check this <br>\nin Isabelle/ML via Multithreading.max_threads_value.  You should get 4 <br>\nhere, although there are i7 versions with only 2 cores.</p>\n<p>The PIDE sledgehammer panel invokes it as \"query operation\", as can be <br>\nseen here:</p>\n<p><a href=\"http://isabelle.in.tum.de/repos/isabelle/file/Isabelle2014-RC4/src/HOL/Tools/Sledgehammer/sledgehammer_commands.ML#l455\">http://isabelle.in.tum.de/repos/isabelle/file/Isabelle2014-RC4/src/HOL/Tools/Sledgehammer/sledgehammer_commands.ML#l455</a></p>\n<p>This formally documents the particular modes and parameters given to <br>\nsledgehammer.  Only Jasmin understands all details of that.</p>\n<p>With 3 provers there should be at most 3 tasks per sledgehammer invocation <br>\n-- of course there could be more than one active sledgehammer panel. The <br>\ntask priority is 0, and thus higher than the -1 for forked proofs.  In <br>\naddition, there could be slow \"print_state\" tasks at priority 1 saturating <br>\nthe queue.</p>\n<p>Makarius</p>",
        "id": 294289639,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660923017
    },
    {
        "content": "<p>From: Jasmin Christian Blanchette &lt;<a href=\"mailto:jasmin.blanchette@gmail.com\">jasmin.blanchette@gmail.com</a>&gt;</p>\n<blockquote>\n<p>As far as I understand sledgehammer it should use normal future forks (via <a href=\"http://Par_List.map\">Par_List.map</a>) and thus participate in the global worker thread pool.</p>\n</blockquote>\n<p>With the Sledgehammer panel, all threads should participate in the global worker thread pool, with the potential exception of a single MaSh learning thread (occasionally -- e.g. the first time you launch Sledgehammer and MaSh has no accumulated state) -- the MaSh threads are managed using the old \"asynchronous manager\" mechanism, that is also used when invoking the \"sledgehammer\" command from the proof text.</p>\n<p>It would be useful to know if the problem also occurs when (1) MaSh is not run and (2) no proofs are found (and hence no proof minimization etc. and hence no \"Par_List\" operations, IIRC). Adding</p>\n<p>sledgehammer_params [mepo]</p>\n<p>at the top of your theory should take care of (1).</p>\n<p>Jasmin</p>",
        "id": 294290077,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660923158
    },
    {
        "content": "<p>From: Lars Noschinski &lt;<a href=\"mailto:noschinl@in.tum.de\">noschinl@in.tum.de</a>&gt;<br>\nWhen I add \"sledgehammer_params [mepo]\" before the place where I call<br>\nsledgehammer, the problem persists. Also, all provers timed out, so the<br>\nproblem occurs also with (2).</p>",
        "id": 294290226,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660923207
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nOn Fri, 22 Aug 2014, Lars Noschinski wrote:</p>\n<blockquote>\n<p>On 22.08.2014 12:32, Jasmin Christian Blanchette wrote:</p>\n</blockquote>\n<blockquote>\n<blockquote>\n<blockquote>\n<p>As far as I understand sledgehammer it should use normal future forks <br>\n(via <a href=\"http://Par_List.map\">Par_List.map</a>) and thus participate in the global worker thread <br>\npool.<br>\nWith the Sledgehammer panel, all threads should participate in the <br>\nglobal worker thread pool, with the potential exception of a single <br>\nMaSh learning thread (occasionally -- e.g. the first time you launch <br>\nSledgehammer and MaSh has no accumulated state) -- the MaSh threads are <br>\nmanaged using the old \"asynchronous manager\" mechanism, that is also <br>\nused when invoking the \"sledgehammer\" command from the proof text.</p>\n</blockquote>\n</blockquote>\n</blockquote>\n<p>In the worst case that extra thread would suck up more CPU cycles than <br>\nspecified in the nominal \"threads\" option, but it should not stop regular <br>\nfuture tasks from running, like the ones for forked proofs.</p>\n<blockquote>\n<blockquote>\n<p>It would be useful to know if the problem also occurs when (1) MaSh is <br>\nnot run and (2) no proofs are found (and hence no proof minimization <br>\netc. and hence no \"Par_List\" operations, IIRC). Adding</p>\n<p>sledgehammer_params [mepo]</p>\n<p>at the top of your theory should take care of (1).<br>\nWhen I add \"sledgehammer_params [mepo]\" before the place where I call <br>\nsledgehammer, the problem persists. Also, all provers timed out, so the <br>\nproblem occurs also with (2).</p>\n</blockquote>\n</blockquote>\n<p>It is still unclear to me what the problem is.  What does <br>\nMultithreading.max_threads_value () say?  How is the task farm pupulated? <br>\nThe improved Monitor dockable in Isabelle2014-RC4 might provide some <br>\nclues.</p>\n<p>We have only a few days left to figure out if there is a remaining problem <br>\nor not.  The month of August ends next week, and the final roll-out of <br>\nIsabelle2014 will happen before that.</p>\n<p>Makarius</p>",
        "id": 294290274,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660923226
    },
    {
        "content": "<p>From: Lars Noschinski &lt;<a href=\"mailto:noschinl@in.tum.de\">noschinl@in.tum.de</a>&gt;<br>\nMultithreading.max_threads_value () is 4. I made a video of what I am<br>\nexperiencing. Notice that the pink background goes away immediately when<br>\nI cancel sledgehammer:</p>\n<p><a href=\"http://www21.in.tum.de/~noschinl/ml/sledgehammer-blocks.mp4\">http://www21.in.tum.de/~noschinl/ml/sledgehammer-blocks.mp4</a></p>\n<p>(Don't be alarmed by the mouse cursor offset problem -- it only occurs<br>\nin the video).</p>\n<p>-- Lars</p>",
        "id": 294290369,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660923244
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nThanks for the video.  After watching it 2 times, I could see the pattern <br>\nwhen this sitation occurs, and managed to reproduce it without anything <br>\nparticular from sledgehammer, just using some OS.Process.sleep dummies.</p>\n<p>I am presently investigating the reasons for this behaviour of PIDE <br>\ndocument scheduling, which could well be just a normal consequence of <br>\ncertain heuristics in task priorities that have accumulated over time.</p>\n<p>For now: How would you rate the practical relevance and priority of this <br>\nissue?  Is it just a minor oddity or outright a hindrance in practical <br>\nwork?</p>\n<p>Makarius</p>",
        "id": 294290771,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660923367
    },
    {
        "content": "<p>From: Lars Noschinski &lt;<a href=\"mailto:noschinl@in.tum.de\">noschinl@in.tum.de</a>&gt;<br>\nSomewhere in between. It is annoying since it essentially sequentializes<br>\nthe behavior of the IDE, but it is no showstopper.</p>\n<p>-- Lars</p>",
        "id": 294290801,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660923380
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nThere is nothing special about the Isabelle2014 code base here.  The <br>\nbehaviour is the same in Isabelle2013-2.</p>\n<p>It is a not fully finished aspect of parallel PIDE document processing: <br>\nsome glimpses of that can be seen in my ITP 2014 paper, section 4 on the <br>\n\"Execution Frontiers\", which play on the safe side with linear semantic <br>\nconcatenation of executions, giving away potential for parallelism. <br>\nApart from some \"asynchronous print functions\" like Sledgehammer that come <br>\nout more sequential than anticipated, the bigger omission is the lack of <br>\nforked proofs that consist of more than a single 'by' command.</p>\n<p>So the conclusion is that it is not a genuine problem, nor an erratic <br>\nbreakdown.  It just means that further improvements in that area are<br>\npostponed to a future release.</p>\n<p>Makarius</p>",
        "id": 294290957,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660923434
    }
]