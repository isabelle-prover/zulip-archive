[
    {
        "content": "<p>From: \"W. Douglas Maurer\" &lt;<a href=\"mailto:maurer@gwu.edu\">maurer@gwu.edu</a>&gt;<br>\nUnder NEWS, in Release notes, there is a history of user-relevant <br>\nchanges in Isabelle2014. Now that Isabelle2015 is available for <br>\ntesting, can the changes in Isabelle2015 also appear under NEWS? That <br>\nway, we all should be able to produce modified versions of our <br>\nIsabelle2014 files before Isabelle2015 actually comes out, so we can, <br>\nas the expression goes, \"hit the ground running.\" -WDMaurer</p>",
        "id": 294633694,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661159299
    },
    {
        "content": "<p>From: Christian Sternagel &lt;<a href=\"mailto:c.sternagel@gmail.com\">c.sternagel@gmail.com</a>&gt;<br>\nDear Douglas,</p>\n<p>Release notes are available in the NEWS file that is part of <br>\nIsabelle2015-RC0 (the tar-archive Makarius put online) in case you are <br>\nstill interested.</p>\n<p>cheers</p>\n<p>chris</p>",
        "id": 294633774,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661159332
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nThe NEWS file is already more than 99% finished and in its usual place: in <br>\nthe top-level directory of the Isabelle distribution or in the <br>\nDocumentation panel, the one that is wide open on first startup.</p>\n<p>There is now also a note in the NEWS:</p>\n<p>Isabelle/jEdit shows a tree-view of this file in Sidekick.</p>\n<p>Makarius</p>",
        "id": 294633787,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661159336
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nYes, the 'private' keyword is exactly for this kind of application.  The <br>\nisar-ref manual adds this explanation:</p>\n<p>Neither a global @{command theory} nor a @{command locale} target<br>\n   provides a local scope by itself: an extra unnamed context is required<br>\n   to use @{keyword \"private\"} or @{keyword \"qualified\"} here.</p>\n<p>Makarius</p>",
        "id": 294633800,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661159342
    },
    {
        "content": "<p>From: Christian Sternagel &lt;<a href=\"mailto:c.sternagel@gmail.com\">c.sternagel@gmail.com</a>&gt;<br>\nIt would be nice to have a concrete version (i.e., changeset id) of the <br>\nAFP to test against, since most of my work is built on top of the AFP.</p>\n<p>Otherwise I can only test the RC against contrived examples.</p>\n<p>cheers</p>\n<p>chris</p>",
        "id": 294633821,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661159349
    },
    {
        "content": "<p>From: Christian Sternagel &lt;<a href=\"mailto:c.sternagel@gmail.com\">c.sternagel@gmail.com</a>&gt;<br>\nOne minor issue (that has been there before; but it seems a good time to <br>\nchange it now) is that sometimes when a pop-up is involved (e.g., saving <br>\nfor the first time, searching, etc.) afterwards the focus is lost (from <br>\nthe current buffer, that is).</p>\n<p>It would be more convenient if the focus would return to the \"widget\" <br>\nthat had it before any pop-up occurred.</p>\n<p>cheers</p>\n<p>chris</p>",
        "id": 294633854,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661159360
    },
    {
        "content": "<p>From: Wenda Li &lt;<a href=\"mailto:wl302@cam.ac.uk\">wl302@cam.ac.uk</a>&gt;<br>\nDear Makarius,</p>\n<p>export_code \"gcd::int⇒int⇒int\" in SML</p>\n<p>fails in Isabelle2015-RC0, with message:</p>\n<p>Dependency \"int\" :: \"semiring_div_parity\" -&gt; \"int\" :: <br>\n\"semiring_parity\" would result in module dependency cycle</p>\n<p>while it works fine in Isabelle2014.</p>\n<p>Best,<br>\nWenda</p>",
        "id": 294633866,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661159367
    },
    {
        "content": "<p>From: Lars Noschinski &lt;<a href=\"mailto:noschinl@in.tum.de\">noschinl@in.tum.de</a>&gt;<br>\nI just noticed that oops does not work in a notepad:</p>\n<p>theory Scratch imports Main begin</p>\n<p>notepad begin<br>\n  have False<br>\n    oops</p>\n<p>The oops fails with the following error message:</p>\n<p>Illegal application of command \"oops\"⌂ in proof mode</p>\n<p>I find this error message irritating (because usually oops works just<br>\nfine in proof mode). Also, I would like to use oops in notepads to mark<br>\nfailed proof attempts (in contrast to incomplete ones, where I would use<br>\nsorry).</p>\n<p>-- Lars</p>",
        "id": 294633885,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661159373
    },
    {
        "content": "<p>From: Lars Hupel &lt;<a href=\"mailto:hupel@in.tum.de\">hupel@in.tum.de</a>&gt;<br>\nI encountered a similar problem a while ago:</p>\n<p>&lt;<a href=\"http://thread.gmane.org/gmane.science.mathematics.logic.isabelle.user/9323\">http://thread.gmane.org/gmane.science.mathematics.logic.isabelle.user/9323</a>&gt;</p>\n<p>Sometimes, these kinds of cycles cannot be avoided in the code generator<br>\nsetup. The workaround is trivial, though:</p>\n<p>export_code \"gcd::int⇒int⇒int\"<br>\n    in SML module_name GCD</p>\n<p>Cheers<br>\nLars</p>",
        "id": 294633918,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661159385
    },
    {
        "content": "<p>From: Lars Noschinski &lt;<a href=\"mailto:noschinl@in.tum.de\">noschinl@in.tum.de</a>&gt;<br>\nOn 13.04.2015 15:06, Lars Noschinski wrote:</p>\n<blockquote>\n<p>On 11.04.2015 21:49, Makarius wrote:</p>\n<blockquote>\n<p>Any problems, observations etc. can be discussed here on the mailing<br>\nlist. Quite often a change of behaviour is perceived as a problem, and<br>\nsometimes it is one, sometimes not.  In any case, open discussion<br>\nhelps to figure out what is potentially confusing to users.<br>\nI just noticed that oops does not work in a notepad:<br>\nThis is documented in the NEWS file, but the error message is still<br>\nirritating.<br>\nThe oops fails with the following error message:</p>\n</blockquote>\n<p>Illegal application of command \"oops\"⌂ in proof mode</p>\n<p>I find this error message irritating (because usually oops works just<br>\nfine in proof mode).</p>\n</blockquote>",
        "id": 294633938,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661159391
    },
    {
        "content": "<p>From: \"C. Diekmann\" &lt;<a href=\"mailto:diekmann@in.tum.de\">diekmann@in.tum.de</a>&gt;<br>\nDear Makarius</p>\n<p>I found an inconvenient jEdit error reporting behavior:</p>\n<p>I loaded theory A</p>\n<p>theory A imports B C D E</p>\n<p>Isabelle does not load my theory A and stops processing. I get the<br>\nsame behavior as if there is an error somewhere in the imported files<br>\nB C D E. However, jEdit does not show me an error message. Let's say<br>\ntheory C starts the following:</p>\n<p>theory C imports \"$VAR/XYZ\"</p>\n<p>where $VAR is an environment variable usually set in my Linux<br>\nenvironment, which I accidentally misspelled. When I open theory C, I<br>\nget the expected error message \"Undefined environment variable: VAR\".<br>\nHowever, it is hard to find that the error is in theory C because the<br>\ntheory panel does not display an error and in theory A, there is also<br>\nno indication why isabelle does not process it.</p>\n<p>Expected behavior: Red error shown in theory panel at theory C<br>\nObserved behavior: No error in theory panel</p>\n<p>Cornelius</p>",
        "id": 294634008,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661159404
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nOn Mon, 13 Apr 2015, Christian Sternagel wrote:</p>\n<blockquote>\n<p>It would be nice to have a concrete version (i.e., changeset id) of the <br>\nAFP to test against, since most of my work is built on top of the AFP.</p>\n</blockquote>\n<p>Unfortunately, I don't know any corresponding AFP version.  I had so many <br>\nunexpected problems to make the Isabelle2015-RC0 at all that I forgot to <br>\nrelate it to AFP formally --- and the snapshot itself is semiformal <br>\nanyway.</p>\n<p>After some weeks of relative quiet and stable repositories for Isabelle <br>\nand AFP, the rumor of the coming release deadline has aroused many <br>\nlast-minute changes.  I hope that towards the end of the week we can see a <br>\ntruely stable Isabelle2015-RC1 together with a working AFP.</p>\n<blockquote>\n<p>Otherwise I can only test the RC against contrived examples.</p>\n</blockquote>\n<p>Maybe it is better to try with arbitrary repository snapshots at the <br>\nmoment, shooting blindly into the erratic movements.</p>\n<p>Makarius</p>",
        "id": 294634155,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661159459
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nIt would be interesting to know in which sense jEdit locked up. <br>\nSometimes there is just a deadlock on the GUI thread.  Sometimes the JVM <br>\nis blocked in a way that it requires a kill -9; jps and jconsole might <br>\nhelp to guess in the right direction.</p>\n<p>For example, I routinely get the following GUI lock-up on Xubuntu 14.10 <br>\nwith GTK look-and-feel: if Isabelle/jEdit is started up and its main <br>\nwindow de-focused before it is fully there, it will never get back to a <br>\nnormal state, where user input is possible.  It might be a fundamental <br>\nproblem of the unsupported XFCE window manager together with the almost <br>\nunsupported GTK L&amp;F, but I need the latter to get proper GUI scaling for <br>\nmy brand-new 4K display -- the newer Nimbus L&amp;F can't do that.</p>\n<p>Java/AWT on Linux is not the best combination -- we know this already for <br>\napprox. 3 years.  Even though I am mostly Linux user myself, it is only a <br>\nsecondary platform for fancy GUI and IDE stuff.  Mac OS X and Windows work <br>\nmuch better in many respects.</p>\n<p>Makarius</p>",
        "id": 294634192,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661159471
    },
    {
        "content": "<p>From: Gerwin Klein &lt;<a href=\"mailto:Gerwin.Klein@nicta.com.au\">Gerwin.Klein@nicta.com.au</a>&gt;<br>\nThe last time the AFP tested cleanly was</p>\n<p>AFP version: development -- hg id c1fe405c1a0d<br>\nIsabelle version: devel -- hg id 070f04c94b2e<br>\nTest ended on: macbroy2, Thu Apr  9 14:50:44 CEST 2015.</p>\n<p>Since then things have fluctuated, but hopefully converging to a working AFP version again soonish.</p>\n<p>Cheers,<br>\nGerwin</p>\n<hr>\n<p>The information in this e-mail may be confidential and subject to legal professional privilege and/or copyright. National ICT Australia Limited accepts no liability for any damage caused by this email or its attachments.</p>",
        "id": 294634249,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661159495
    },
    {
        "content": "<p>From: Lars Hupel &lt;<a href=\"mailto:hupel@in.tum.de\">hupel@in.tum.de</a>&gt;<br>\nHello,</p>\n<p>I have not worked with RC0 extensively yet. So far I've noticed a small<br>\noddity:</p>\n<p>ML‹Local_Theory.note›</p>\n<p>The markup produced for the type of this expression is</p>\n<p>val it = fn: ?.binding * thm list -&gt; local_theory -&gt; (string * thm list)</p>\n<ul>\n<li>local_theory</li>\n</ul>\n<p>I expected to see 'Attrib.binding' there. OTOH, if I explicitly<br>\nconstruct a value of that type:</p>\n<p>ML‹(@{binding foo}, []): Attrib.binding›</p>\n<p>... the markup correctly reports</p>\n<p>val it = (\"foo\", []): Attrib.binding</p>\n<p>Cheers<br>\nLars</p>",
        "id": 294634300,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661159520
    },
    {
        "content": "<p>From: Lars Noschinski &lt;<a href=\"mailto:noschinl@in.tum.de\">noschinl@in.tum.de</a>&gt;<br>\nI have occasionally problems with hovering, in the sense that popups do<br>\nnot appear (at least not in a reasonable amount of time). I have not<br>\nbeen able to discern a pattern, so here are some observations:</p>\n<p>* Most of the time, everything works fine.<br>\n  * Sometimes, I do not get popups at all (but clicking still works).<br>\n  * Sometimes, I get popups at some places, but not in other places<br>\n    (even in the same file on the same screen).</p>\n<p>* Forcing Isabelle to reprocess by changing some part above (or<br>\n    cutting and pasting the relevant part) does not seem to help.</p>\n<p>* Once, popups didn't work for some part at the top of the screen.<br>\n    Scrolling up helped. When I scrolled down again, I couldn't get the<br>\n    popup anymore. This was repeatable.</p>\n<p>* Usually, it vanishes after a restart, but some files seem to trigger<br>\n    this behaviour more easily (or there are some external conditions<br>\n    which cause this?). While writing this mail, I had to restart jEdit<br>\n    a few times, till I got working popups in a certain file.<br>\n    Afterwards, I worked reliably; even after more restarts.</p>\n<p>This is not due to a grey-out or pink-out.</p>\n<p>I had this behaviour with 2015-RC0 in an almost standard configuration<br>\n(smaller fontsize and a few additional keybindings)</p>\n<p>-- Lars</p>",
        "id": 294634388,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661159539
    },
    {
        "content": "<p>From: Lars Noschinski &lt;<a href=\"mailto:noschinl@in.tum.de\">noschinl@in.tum.de</a>&gt;<br>\non a Debian testing with a standard Gnome 3.14.</p>",
        "id": 294634400,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661159545
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nThe Sledgehammer panel takes exactly the provers that are specified in the <br>\ninput field, taking the system option \"sledgehammer_provers\" as default.</p>\n<p>The 'sledgehammer' command takes a prefix of certain default provers, <br>\ndepending on the nominal number of ML worker threads (which is derived <br>\nfrom the system option \"threads\").</p>\n<p>It is up to Jasmin Blanchette to unify/simplify this further.  Note that <br>\nin Isabelle2015, Sledgehammer still has various old modes stemming from <br>\nthe TTY age (which has already ended).</p>\n<p>Generally, Isabelle2015 has various changes of parallel document <br>\nprocessing, such that long-running print functions should no longer lead <br>\nto exhaustion of worker threads as before. This should improve the degree <br>\nof parallelism with the Sledgehammer panel vs. ongoing edits. If there are <br>\nremaining problems with it, the coming weeks of Isabelle2015-RC testing <br>\nare an opportunity to report them.</p>\n<p>Makarius</p>",
        "id": 294634693,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661159651
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nOn Sun, 12 Apr 2015, C. Diekmann wrote:</p>\n<blockquote>\n<p>I found a \"feature request\" for the jEdit interface: I loaded <br>\nWordLemmaBucket from autocorres, a file with 5900 lines. There are at <br>\nleast two errors near the end of the file when loading with 2015-RC0. <br>\nHowever, it is nearly impossible to locate the errors in the .thy.</p>\n</blockquote>\n<p>Where can I see this file?</p>\n<blockquote>\n<p>Is it possible to have some sort of \"jump to next error\" or an automatic <br>\njump to the error when I click on the red spot (left of the jEdit scroll <br>\nbar)?</p>\n</blockquote>\n<p>This feature is still not there after several years, because other things <br>\nhad a much higher priority.</p>\n<blockquote>\n<p>Also, when I have an error in my theory, e.g. writing \"where f=...\" but <br>\nin 2015-RC0 it should be \"where f1=...\", only the \"f\" is underlined, <br>\nthis makes the error quite hard to spot for me.</p>\n</blockquote>\n<p>That is a consequence of a more precise error position: it is a normal <br>\ntrend in ongoing PIDE conformity improvements.</p>\n<p>What is your font size?  (Mine is 30px on a 4K display.)  The error should <br>\nbe also visible in the Output panel.</p>\n<p>Makarius</p>",
        "id": 294634702,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661159655
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nThis sounds like another episode of Linux window manager forks vs. <br>\nJava/AWT/Swing/look-and-feel.  What is your local configuration in this <br>\nrespect?</p>\n<p>I've made some basic tests with some jEdit dialogs on Mac OS X, Windows, <br>\nXbuntu, and did not encounter any problems.</p>\n<p>Makarius</p>",
        "id": 294634713,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661159661
    },
    {
        "content": "<p>From: Christian Sternagel &lt;<a href=\"mailto:c.sternagel@gmail.com\">c.sternagel@gmail.com</a>&gt;<br>\nSame old:</p>\n<p>Fedora 21<br>\n   GNOME Version 3.14.2<br>\n   3.19.3-200.fc21.x86_64 GNU/Linux</p>\n<p>cheers</p>\n<p>chris</p>",
        "id": 294634740,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661159673
    },
    {
        "content": "<p>From: Lars Hupel &lt;<a href=\"mailto:hupel@in.tum.de\">hupel@in.tum.de</a>&gt;<br>\nI've toyed around with the various '_deps' commands a bit. I do like the<br>\nnew graph viewer. Here are my observations:</p>\n<ul>\n<li>\n<p>The new viewer is a jEdit panel, which means it always stays on top<br>\nunless it's minimized (my environment: KDE 4.x). Could this be changed,<br>\npossibly for all panels, so that it does not stay on top, or is this a<br>\njEdit limitation? Most desktop environments offer a shortkey to force<br>\nsuch behaviour anyway, so I could just enable it on the spot if I wanted to.</p>\n</li>\n<li>\n<p>'thy_deps' offers no possibility to fold heaps. Was that a deliberate<br>\ndecision? In my current development I have about 3-4 layered images and<br>\nwould like to fold them.</p>\n</li>\n<li>\n<p>Most applications offer zooming by scrolling while pressing Ctrl. In<br>\nthe viewer, I can't do that. (For the records, the old graph viewer also<br>\ndidn't offer this.)</p>\n</li>\n</ul>\n<p>Cheers<br>\nLars</p>",
        "id": 294634758,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661159679
    },
    {
        "content": "<p>From: Gerwin Klein &lt;<a href=\"mailto:Gerwin.Klein@nicta.com.au\">Gerwin.Klein@nicta.com.au</a>&gt;</p>\n<blockquote>\n<p>On 17 Apr 2015, at 12:09 am, Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt; wrote:</p>\n<p>On Sun, 12 Apr 2015, C. Diekmann wrote:</p>\n<blockquote>\n<p>I found a \"feature request\" for the jEdit interface: I loaded WordLemmaBucket from autocorres, a file with 5900 lines. There are at least two errors near the end of the file when loading with 2015-RC0. However, it is nearly impossible to locate the errors in the .thy.</p>\n</blockquote>\n<p>Where can I see this file?</p>\n</blockquote>\n<p>I think Cornelius means this file:<br>\n<a href=\"https://github.com/seL4/l4v/blob/master/lib/WordLemmaBucket.thy\">https://github.com/seL4/l4v/blob/master/lib/WordLemmaBucket.thy</a></p>\n<p>I’ve just started a 2015 branch of this whole development for catching up with Isabelle and hope to be able to publish it later today with at least Simpl updated.</p>\n<p>If there is anyone else already working on updating C-Parser/AutoCorres, please let me know. I’d very much like to avoid duplication of work.</p>\n<p>We plan to make C-Parser and AutoCorres AFP submissions after the 2015 release, but that will still need some cleanup work before. (For instance the infamous WordLemmaBucket above).</p>\n<blockquote>\n<blockquote>\n<p>Is it possible to have some sort of \"jump to next error\" or an automatic jump to the error when I click on the red spot (left of the jEdit scroll bar)?</p>\n</blockquote>\n<p>This feature is still not there after several years, because other things had a much higher priority.</p>\n</blockquote>\n<p>I’ve also found errors a bit hard to find for large files in the past, but yes, there are probably higher priority items for now.</p>\n<p>Cheers,<br>\nGerwin</p>\n<hr>\n<p>The information in this e-mail may be confidential and subject to legal professional privilege and/or copyright. National ICT Australia Limited accepts no liability for any damage caused by this email or its attachments.</p>",
        "id": 294634771,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661159686
    },
    {
        "content": "<p>From: Lars Hupel &lt;<a href=\"mailto:hupel@in.tum.de\">hupel@in.tum.de</a>&gt;<br>\nI've attached a small demo theory which exhibits some strange behaviour<br>\nwhen using Sledgehammer on a goal containing a conjunction. I've marked<br>\nthe problematic statement with (* HERE *).</p>\n<p>Steps to reproduce:</p>\n<p>1) Go to the blank line between 'defer' and 'sorry'.<br>\n2) In the Sledgehammer panel, select provers 'e spass z3 remote_vampire<br>\ncvc4' and click 'Apply'.<br>\n3) All provers will suggest 'apply simp'.<br>\n4) 'apply simp' doesn't solve the first subgoal.</p>\n<p>What's even more confusing is that if I invoke sledgehammer via the<br>\ncommand, I get different results for cvc4:</p>\n<p>\"cvc4\": One-line proof reconstruction failed: apply (smt term.collapse(1)).</p>\n<p>I've suspected that somehow the 'defer' is at fault here, but even if it<br>\nis removed, there's more strange behaviour. In that case, the panel<br>\ncorrectly suggests 'apply auto[1]' (which in fact solves the subgoal),<br>\nbut the sledgehammer command suggests:</p>\n<p>\"cvc4\": One-line proof reconstruction failed: apply (smt term.collapse(1)).<br>\n\"remote_vampire\": Try this: using term.collapse(1) apply presburger (0.0<br>\nms).</p>\n<p>The latter invocation does not solve the subgoal. While I know that<br>\nsometimes Sledgehammer suggests an invocation of 'metis' which takes too<br>\nlong (and might not be able to solve it?), I've never encountered this<br>\nwith the new (and very helpful) suggestions of 'simp' or 'auto'.</p>\n<p>Cheers<br>\nLars<br>\n<a href=\"/user_uploads/14278/jS3dGp2NAI9ampacxqXikQmz/Scratch.thy\">Scratch.thy</a></p>",
        "id": 294634798,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661159698
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nOn Fri, 17 Apr 2015, Lars Hupel wrote:</p>\n<blockquote>\n<p>I've toyed around with the various '_deps' commands a bit. I do like the<br>\nnew graph viewer.</p>\n</blockquote>\n<p>I have made more last-minute refinements of it in Isabelle2015-RC1, and <br>\nsubsequently I refer to that version.</p>\n<blockquote>\n<ul>\n<li>The new viewer is a jEdit panel, which means it always stays on top<br>\n  unless it's minimized (my environment: KDE 4.x). Could this be<br>\n  changed, possibly for all panels, so that it does not stay on top, or<br>\n  is this a jEdit limitation? Most desktop environments offer a shortkey<br>\n  to force such behaviour anyway, so I could just enable it on the spot<br>\n  if I wanted to.</li>\n</ul>\n</blockquote>\n<p>This panel behaviour was newly introduced in Isabelle2014 -- I <br>\nspecifically patched the jEdit docking framework for that (most of that <br>\nwas accepted by the jEdit maintainers for a future release).  The problem <br>\nis that Java/AWT does not really know about window managers. There are <br>\nthree different classes doing similar things: JWindow, JFrame, JDialog -- <br>\nthey merely differ in accidental window manager hints.</p>\n<p>Since Isabelle2014 we are using JDialog instead of JFrame, because these <br>\nwindows stay on top of the main editor frame.  This might be occasionally <br>\nodd, especially on Linux, but on Mac OS X and Windows it is essential to <br>\nwork properly.  Otherwise, windows could end up in an unreachable position <br>\nbehind the main window, e.g. when working in the full-screen mode that is <br>\nnow very common on these platforms.</p>\n<p>All this behaviour is somehow hardwired into JWindow, JFrame, JDialog, and <br>\ncannot be changed.  It is just a matter of choosing the smallest evil by <br>\ndefault.  Once on Stackoverflow in the \"java\" and \"swing\" areas, I asked <br>\ncritical questions about these three classes, but I got quickly removed <br>\nby some guys with a lot of points, although someone else had marked this <br>\nas \"favourite question\".</p>\n<blockquote>\n<ul>\n<li>'thy_deps' offers no possibility to fold heaps. Was that a deliberate<br>\n  decision? In my current development I have about 3-4 layered images<br>\n  and would like to fold them.</li>\n</ul>\n</blockquote>\n<p>Both thy_deps and class_deps have ways to specify intervals of the <br>\nhierarchy to be visualized.  It would be better to have that in the GUI, <br>\nbut that is more work and experimental tinkering, instead of a bit of <br>\nfiltering output in Isabelle/ML.</p>\n<p>For Isabelle2015, the priority was to have the new graphview (new since <br>\nSep-2012) in a usable state.  So I spent about 2-3 weeks on it, and the <br>\nTODO list was longer afterwards than before.  Nonetheless, it should be <br>\nusable now, and actually do the same graph layout than the old browser <br>\nfrom 1996.</p>\n<blockquote>\n<ul>\n<li>Most applications offer zooming by scrolling while pressing Ctrl. In<br>\n  the viewer, I can't do that.</li>\n</ul>\n</blockquote>\n<p>The new Graphview did have some Google-Maps-style zooming before I started <br>\nworking on it, but it did not quite work, so I removed it (like many other <br>\nunfinished things).  The present version is meant to approximate the old <br>\nbrowser from the bottom, although many add-on features have again crept <br>\ninto it.</p>\n<p>I would also like to see better zooming, but instead of C-mouse-wheel, I <br>\nfind myself looking for zoom-width or zoom-height buttons like good old <br>\nEvince on Linux, before it got changed into unusablity about 1-2 years <br>\nago.</p>\n<p>I would also like to see all zoom facilities moving uniformly in <br>\nIsabelle/jEdit, e.g. the zoom for the Output panel and others.  But that <br>\nis avantgarde, and for a later release.</p>\n<p>Makarius</p>",
        "id": 294635070,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661159790
    },
    {
        "content": "<p>From: Stephen Westfold &lt;<a href=\"mailto:westfold@kestrel.edu\">westfold@kestrel.edu</a>&gt;<br>\nI would vote to make this feature a higher priority. I’ve wasted a lot of time dragging the scroll bar to find hidden errors, but I suppose my use case is unusual in that I am automatically generating large proof files.</p>\n<p>Stephen</p>",
        "id": 294635098,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661159800
    },
    {
        "content": "<p>From: Matthew Fernandez &lt;<a href=\"mailto:matthew.fernandez@nicta.com.au\">matthew.fernandez@nicta.com.au</a>&gt;<br>\nDoing things similar to Stephen, I would also like this feature. In a large theory you lose<br>\nprecision with the scroll bar and clicking red marks does not take you to exactly where the error is.</p>\n<hr>\n<p>The information in this e-mail may be confidential and subject to legal professional privilege and/or copyright. National ICT Australia Limited accepts no liability for any damage caused by this email or its attachments.</p>",
        "id": 294635179,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661159833
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nOn Fri, 17 Apr 2015, Stephen Westfold wrote:</p>\n<blockquote>\n<blockquote>\n<p>On Apr 16, 2015, at 4:09 PM, Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt; wrote:</p>\n</blockquote>\n<p>On Sun, 12 Apr 2015, C. Diekmann wrote:</p>\n<blockquote>\n<blockquote>\n<p>Is it possible to have some sort of \"jump to next error\" or an <br>\nautomatic jump to the error when I click on the red spot (left of the <br>\njEdit scroll bar)?</p>\n</blockquote>\n<p>This feature is still not there after several years, because other <br>\nthings had a much higher priority.</p>\n</blockquote>\n<p>I would vote to make this feature a higher priority.</p>\n</blockquote>\n<p>It has already a relatively high priority (for some years), but there are <br>\nmore important things in the pipeline system that prevented it from <br>\ngetting through so far.  The question is about scaling to large <br>\ndevelopments.  There are at least two dimensions: (1) length of individual <br>\nfiles, (2) total number of files within a session (or \"project\").</p>\n<p>jEdit as a text editor is not very good at handling files that are longer <br>\nthan 100-500Kb.  Isabelle/jEdit as a Prover IDE is also struggling to <br>\nrender the rich markup in real-time for big files.  Both has improved a <br>\nbit over the years, but there are fundamental limitations.</p>\n<p>Instead it is better to scale into the dimension of the project size and <br>\nstructure.  Maintenance of existing Isabelle and AFP sessions has many <br>\nawkward limitations that don't have to be there.  Like the artificial <br>\ndivision into \"session base images\".  I would like to see an easy way to <br>\nopen the IDE and edit all Isabelle + AFP theories on the spot, without <br>\nhaving to think much about it something as artificial as \"compiled logic <br>\nimages\".</p>\n<blockquote>\n<p>I’ve wasted a lot of time dragging the scroll bar to find hidden errors, <br>\nbut I suppose my use case is unusual in that I am automatically <br>\ngenerating large proof files.</p>\n</blockquote>\n<p>Here we are back to the canonical question: What is the purpose of <br>\ngenerated files?  Is there no better way?</p>\n<p>For some reason, generating source files is the first idea that most <br>\npeople have, and cannot imagine other ways.  It is like a spell that needs <br>\nto be broken.  There might be occasionally good reasons to do that, but <br>\none should look critically at the problem, and prove that it really has to <br>\nbe done like that.</p>\n<p>Isabelle/HOL-SPARK is a simple example to do better.  More such work can <br>\nbe imagined in integrating different tools into the Isabelle Prover IDE, <br>\nwithout having machine-generated sources edited by humans.</p>\n<p>Makarius</p>",
        "id": 294635188,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661159839
    },
    {
        "content": "<p>From: Lars Hupel &lt;<a href=\"mailto:hupel@in.tum.de\">hupel@in.tum.de</a>&gt;<br>\nI'd also like to point out again my ongoing work on 'libisabelle' [0].<br>\nThe README is slightly outdated, since the library is in fact able to<br>\nfetch and unpack an Isabelle distribution (setting appropriate<br>\nenvironment variables and building sessions is not implemented yet). I'm<br>\nalso working on supporting multiple Isabelle versions at the same time.</p>\n<p>It has already been demonstrated that this way of interaction works well<br>\nfor sending proof obligations generated via other means to the prover to<br>\nhave them checked. Right now, I'm also investigating how much useful<br>\ninformation I can get from the prover for performing further (syntactic)<br>\nanalysis on theory sources. From that perspective, I tend to agree with<br>\nMakarius: There are very few remaining use cases of textual code<br>\ngeneration or manual interaction with the prover [2].</p>\n<p>NB: Viorel's use case from earlier this month [1] can also be trivially<br>\nmodelled with libisabelle.</p>\n<p>Cheers<br>\nLars</p>\n<p>[0] &lt;<a href=\"https://github.com/larsrh/libisabelle\">https://github.com/larsrh/libisabelle</a>&gt;<br>\n[1]<br>\n&lt;<a href=\"https://lists.cam.ac.uk/pipermail/cl-isabelle-users/2015-April/msg00066.html\">https://lists.cam.ac.uk/pipermail/cl-isabelle-users/2015-April/msg00066.html</a>&gt;<br>\n[2] Lem (&lt;<a href=\"https://bitbucket.org/Peter_Sewell/lem/\">https://bitbucket.org/Peter_Sewell/lem/</a>&gt;) comes to mind.</p>",
        "id": 294635217,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661159855
    },
    {
        "content": "<p>From: Matthew Fernandez &lt;<a href=\"mailto:matthew.fernandez@nicta.com.au\">matthew.fernandez@nicta.com.au</a>&gt;<br>\nI can't speak of Stephen's use case, but I myself am generating C code and, at the same time,<br>\ngenerating correctness proofs of such code. The generated C code interoperates with hand-written C<br>\ncode. A goal is for the generated lemmas to be usable in a manual proof of a top-level hand-written<br>\ncorrectness statement.</p>\n<p>While it is true that generating textual theories like this is not the only way, it still seems the<br>\npath of least resistance to me. We are using a translation validation style approach to verify this<br>\ngeneration process, so it is important that we can inspect the resulting artefact. It is also<br>\nhelpful for users to be able to inspect these theories and see lemmas and proofs in the manner they<br>\nwould be expecting to have written them themselves. Alternatively we could be generating proof terms<br>\ndirectly or using something like libisabelle. While not a fundamental obstacle, it is a pragmatic<br>\nbarrier that our code generator (which also produces Isabelle theories) is written in Python and is<br>\nnot easily portable to a JVM language.</p>\n<p>It's perhaps also worth noting that manual interaction within these large theories is _not_ the<br>\nintended use case. I am primarily exploring these theories within Isabelle/jEdit when debugging a<br>\nbroken proof the theory generator has produced. Overall, I'm not wed to my current approach, but<br>\nfrom my current understanding it is still the most feasible way for me to pursue this. If someone<br>\nwants to try to persuade me otherwise, I am more than happy to listen :)</p>\n<hr>\n<p>The information in this e-mail may be confidential and subject to legal professional privilege and/or copyright. National ICT Australia Limited accepts no liability for any damage caused by this email or its attachments.</p>",
        "id": 294635222,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661159857
    },
    {
        "content": "<p>From: Jasmin Blanchette &lt;<a href=\"mailto:jasmin.blanchette@inria.fr\">jasmin.blanchette@inria.fr</a>&gt;<br>\nThis indicates that “max_threads” is 2. By default, Sledgehammer will use only as many cores as are reported to it. “max_threads” itself is set up through various options, about which I have little clue. If you have more than 2 cores on your machine, something is fishy.</p>\n<p>Incidentally, this behavior of Sledgehammer is nothing new. Is the issue really new with Isabelle2015-RC0? What happens if you write</p>\n<p>ML {* Multithreading.max_threads_value () *}</p>\n<p>in Isabelle2014 vs. Isabelle2015-RC0?</p>\n<p>Jasmin</p>",
        "id": 294635362,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661159912
    },
    {
        "content": "<p>From: \"C. Diekmann\" &lt;<a href=\"mailto:diekmann@in.tum.de\">diekmann@in.tum.de</a>&gt;<br>\nBoth report \"2\". I have a dual core cpu with 2 physical cores and<br>\nthanks to hyperthreading two additional virtual cores. /proc/cpuinfo<br>\nlists 4 processors.</p>\n<p>Cornelius</p>",
        "id": 294635387,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661159931
    },
    {
        "content": "<p>From: Jasmin Blanchette &lt;<a href=\"mailto:jasmin.blanchette@inria.fr\">jasmin.blanchette@inria.fr</a>&gt;<br>\nThen I presume Sledgehammer also invoked only two ATPs in Isabelle2014?</p>\n<p>Irrespective of this, you probably want to check the Isabelle system manual to find out how to change the number of threads. 2 is perhaps needlessly low.</p>\n<p>Jasmin</p>",
        "id": 294635414,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661159943
    },
    {
        "content": "<p>From: \"C. Diekmann\" &lt;<a href=\"mailto:diekmann@in.tum.de\">diekmann@in.tum.de</a>&gt;<br>\n2015-04-20 18:26 GMT+02:00 Jasmin Blanchette &lt;<a href=\"mailto:jasmin.blanchette@inria.fr\">jasmin.blanchette@inria.fr</a>&gt;:</p>\n<blockquote>\n<p>On 20.04.2015, at 16:19, C. Diekmann &lt;<a href=\"mailto:diekmann@in.tum.de\">diekmann@in.tum.de</a>&gt; wrote:</p>\n<blockquote>\n<blockquote>\n<p>Incidentally, this behavior of Sledgehammer is nothing new. Is the issue really new with Isabelle2015-RC0? What happens if you write</p>\n<p>ML {* Multithreading.max_threads_value () *}</p>\n<p>in Isabelle2014 vs. Isabelle2015-RC0?</p>\n</blockquote>\n<p>Both report \"2\". I have a dual core cpu with 2 physical cores and<br>\nthanks to hyperthreading two additional virtual cores. /proc/cpuinfo<br>\nlists 4 processors.</p>\n</blockquote>\n<p>Then I presume Sledgehammer also invoked only two ATPs in Isabelle2014?</p>\n</blockquote>\n<p>Yes</p>\n<blockquote>\n<p>Irrespective of this, you probably want to check the Isabelle system manual to find out how to change the number of threads. 2 is perhaps needlessly low.</p>\n</blockquote>\n<p>Thanks for the pointer.</p>\n<p>Cornelius</p>",
        "id": 294635493,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661159974
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nThis nominal number of ML threads is critical for overall system <br>\nperformance.  CPUs today usually have much more virtual hardware threads <br>\nthan actual CPU cores (due to Intel hyperthreading and similar AMD <br>\ntechnology).  Asking the system about the CPU number in old-fashioned ways <br>\nleads to a number of threads that maximizes CPU cycle burning, without <br>\nmuch gain of performance, often a loss of it.  CPU cycle burning is <br>\nparticularly bad on mobile devices.</p>\n<p>This also explains why PIDE was often perceived as unbearably slow in the <br>\npast: the defaults were not right, and most users did not know how to tune <br>\nthe Harley Davidson themselves.</p>\n<p>David Matthews has already provided more refined CPU query operations for <br>\nthe Poly/ML runtime system already for Isabelle2014.  It should be mostly <br>\nthe same for Isabelle2015-RC1.  This means the default <br>\nMultithreading.max_threads_value is the preferred one for most purposes.</p>\n<p>Generally, the threads number should be just a matter of performance, and <br>\nnot of change of semantics.</p>\n<p>My impression is that the auto-adaptive mode of the slegehammer command is <br>\ncoming from a time when there was still a TTY loop and at most one command <br>\nactive, so one could rely on all threads being free, before starting the <br>\nnext command.  Now many things can be active all the time, and the thread <br>\npool continuously busy with many different tasks.</p>\n<p>Makarius</p>",
        "id": 294635871,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661160109
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nThis should work in Isabelle2015-RC2.</p>\n<p>Makarius</p>",
        "id": 294636391,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661160317
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nThis is an odd effect caused by a change in the bootstrap order of <br>\nIsabelle/Pure: the ML environment and compiler invocation changes several <br>\ntimes, until it converges to proper Isabelle/ML and theory Pure.</p>\n<p>We've occasionally had question marks in Poly/ML type output before, but I <br>\nnever quite understood the reasons behind it.  It is an imperfection, but <br>\nharmless.</p>\n<p>Makarius</p>",
        "id": 294636412,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661160323
    },
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\nFor the paper I just advertised we used the old graph viewer to display the AFP <br>\ngraph because it looks a bit better. I have attached both versions. Look at <br>\nnodes 55 and 85 to see some of the differences. The new placement leads to more <br>\nlines intersecting.</p>\n<p>I am also not sold on the splines used in some cases, they are a bit wavy. Look <br>\nat the lines emerging from 63 or 33 in the new viewer.</p>\n<p>However, these are just small blemishes and in other situation the new layout <br>\nmay actually look better.</p>\n<p>Tobias<br>\n<a href=\"/user_uploads/14278/D0V6JZauyPWRmE53PxJcp5VH/afp_num_graph.pdf\">afp_num_graph.pdf</a><br>\n<a href=\"/user_uploads/14278/112wVH23NdLk6Vyyv8ryUItQ/new.pdf\">new.pdf</a><br>\n<a href=\"/user_uploads/14278/NOVeLgpQBFOWvtAgB4rdNONg/smime.p7s\">smime.p7s</a></p>",
        "id": 294636782,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661160478
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nDear Isabelle users,</p>\n<p>we are heading towards Isabelle2015, hopefully to appear at the end of May <br>\n2015. To get started with public testing of release candidates there is <br>\nnow <a href=\"http://isabelle.in.tum.de/website-Isabelle2015-RC0\">http://isabelle.in.tum.de/website-Isabelle2015-RC0</a></p>\n<p>RC0 is still relatively early in the process: the website has no content <br>\nyet, and some documentation is not yet updated.  The NEWS file is already <br>\nready for inspection (using the tree-view of Sidekick).</p>\n<p>Any problems, observations etc. can be discussed here on the mailing list. <br>\nQuite often a change of behaviour is perceived as a problem, and sometimes <br>\nit is one, sometimes not.  In any case, open discussion helps to figure <br>\nout what is potentially confusing to users.</p>\n<p>Makarius</p>",
        "id": 294638777,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661161244
    },
    {
        "content": "<p>From: \"C. Diekmann\" &lt;<a href=\"mailto:diekmann@in.tum.de\">diekmann@in.tum.de</a>&gt;<br>\nDear Makarius</p>\n<p>I found a \"feature request\" for the jEdit interface:<br>\nI loaded WordLemmaBucket from autocorres, a file with 5900 lines.<br>\nThere are at least two errors  near the end of the file when loading<br>\nwith 2015-RC0. However, it is nearly impossible to locate the errors<br>\nin the .thy. Is it possible to have some sort of \"jump to next error\"<br>\nor an automatic jump to the error when I click on the red spot (left<br>\nof the jEdit scroll bar)?<br>\nAlso, when I have an error in my theory, e.g. writing \"where f=...\"<br>\nbut in 2015-RC0 it should be \"where f1=...\", only the \"f\" is<br>\nunderlined, this makes the error quite hard to spot for me.</p>\n<p>Forther minor observations:</p>\n<ul>\n<li>Case_def no longer exists (and I guess not needed)</li>\n<li>when I type sledgehammer (not using the panel), it seems as it is<br>\nonly tries cvc4 and remote_vampire, is it possible to add a bit more</li>\n</ul>\n<p>Another question: Sometimes I have some helper lemmas</p>",
        "id": 294638950,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661161286
    },
    {
        "content": "<p>From: \"C. Diekmann\" &lt;<a href=\"mailto:diekmann@in.tum.de\">diekmann@in.tum.de</a>&gt;<br>\n[message continues (how do I email?)]</p>\n<p>Another question: Sometimes I have some helper lemmas and at the end<br>\nof my theory I declare<br>\nhide_fact helper_lemma<br>\nto clean up the namespace.<br>\nCan I use the new private keyword to accomplish the same or is it only<br>\nconsidered for special cases when I already use context blocks?</p>\n<p>Overall, RC0 looks very nice. Great job!</p>\n<p>Cornelius</p>",
        "id": 294638962,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661161292
    },
    {
        "content": "<p>From: \"C. Diekmann\" &lt;<a href=\"mailto:diekmann@in.tum.de\">diekmann@in.tum.de</a>&gt;<br>\njEdit crashed (stopped responding to anything).<br>\nWhat I did:<br>\nClosed jEdit with unsaved changes.<br>\njEdit asked what to do. I clicked \"select all\" followed by \"save<br>\nselected\". jEdit simply hung. Screenshot:<br>\n<a href=\"http://i.imgur.com/6W3zr8n.png\">http://i.imgur.com/6W3zr8n.png</a></p>\n<div class=\"message_inline_image\"><a href=\"http://i.imgur.com/6W3zr8n.png\"><img src=\"https://uploads.zulipusercontent.net/3eb7721445f29d3298cbf5c486132ddef9759bb1/687474703a2f2f692e696d6775722e636f6d2f3657337a72386e2e706e67\"></a></div><p>OS: Ubuntu 14.04.2 with Linux 3.13.0 and unity</p>",
        "id": 294638980,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661161302
    },
    {
        "content": "<p>From: Jasmin Blanchette &lt;<a href=\"mailto:jasmin.blanchette@inria.fr\">jasmin.blanchette@inria.fr</a>&gt;<br>\nThe auto-adaptive mode of Sledgehammer is unfortunately still necessary. Let me explain why, using my 4-core MacBook Pro as an example.</p>\n<p>First,</p>\n<p>ML {* Multithreading.max_threads_value () *}</p>\n<p>prints</p>\n<p>val it = 4: int</p>\n<p>which means that Sledgehammer will, by default, use four provers. Given a nontrivial unprovable goal, if I go into the Sledgehammer panel and enter</p>\n<p>cvc4 e spass remote_vampire</p>\n<p>in the “Provers” field, then press “Apply”, it takes about 30-35 s before all four provers have come back with “Timed out”. (I just checked it. Of course, one could load the machine or even Isabelle/jEdit in such a way that this takes longer, but I’m talking about the typical, 95%-of-cases scenario.)</p>\n<p>So far so good. Now if I add Z3 to the mix, i.e.,</p>\n<p>cvc4 e spass remote_vampire z3</p>\n<p>then it takes about 60-65 s before the little wheel stops spinning and we get the last answer.</p>\n<p>The philosophy behind Sledgehammer is that humans have a limited patience, they want to wait 30 seconds and then move on with their lives. For that 30 seconds, they want as much CPU as possible to be allocated to automatic provers. This is somewhat at odds with the Isabelle/jEdit/PIDE philosophy, but I think it makes sense. Take a web browser. It might have several tabs, all loading different pages, playing videos, etc. If I try to connect to a server that’s not responsive in one of the tabs, it will try for about half a minute before giving up — irrespective of whether 1, 2, 3, 4, or 5 tabs are already open.</p>\n<p>This is the default behavior. Users who do want to run Z3 and wait an extra 30 second are free to specify “z3” in the list.</p>\n<p>Jasmin</p>",
        "id": 294640411,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661161863
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nThe question is why the user should wait for the spinning wheel to stop: <br>\nit would be some kind of TTY-mode imitation.</p>\n<p>In Isabelle2014 there was actually a technical snag, but for Isabelle2015 <br>\nI've refined that once again.  The NEWS and ANNOUNCE files say:</p>\n<p>* Improved scheduling for asynchronous print commands (e.g. provers<br>\n   managed by the Sledgehammer panel) wrt. ongoing document processing.</p>\n<p>So it would be interesting to see if it actually works as advertized.</p>\n<p>Makarius</p>",
        "id": 294640973,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661162071
    },
    {
        "content": "<p>From: Jasmin Blanchette &lt;<a href=\"mailto:jasmin.blanchette@inria.fr\">jasmin.blanchette@inria.fr</a>&gt;</p>\n<blockquote>\n<p>The question is why the user should wait for the spinning wheel to stop: it would be some kind of TTY-mode imitation.</p>\n</blockquote>\n<p>But as you know, Sledgehammer has been asynchronous for much of its life even in the old Proof General days. And yet Larry’s experience from 2010 is, to the best of my knowledge, still as actual as ever:</p>\n<p>“Parallelism was another design objective, both to exploit the abundance of cheap processing power and so that users would not have to wait. Sledgehammer was intended to run in the background; Isabelle would continue to respond to commands, and users could keep working. This idea has turned out to be somewhat misconceived: thinking is difficult, and users typically wait for Sledgehammer to return, hoping to get a proof for free.”</p>\n<p>I’d be curious to hear what actual users have to say on this.</p>\n<p>Jasmin</p>",
        "id": 294641106,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661162139
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nThis is very interesting and funny in several respects: the \"abundance of <br>\ncheap processing power\" in particular.  It has never been as difficult as <br>\ntoday to turn raw computing power into proper use. Most CPUs are running <br>\napplications at 10% or less.  The \"market\" has already reacted on that, <br>\nand we don't get the tons of cores that Intel/AMD could in principle <br>\nprovide.  A cheap GPU for gaming has thousands of cores, and regular CPU <br>\nonly a handful.</p>\n<p>We should tell Intel that ATP is an important game, too.</p>\n<p>Makarius</p>",
        "id": 294641261,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661162206
    },
    {
        "content": "<p>From: Harry Butterworth &lt;<a href=\"mailto:heb1001@gmail.com\">heb1001@gmail.com</a>&gt;<br>\nOpenCL/CUDA is pretty easy to use.  Is there any scope for moving some of<br>\nthe heavy lifting onto the GPU?</p>",
        "id": 294641414,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661162274
    },
    {
        "content": "<p>From: Tjark Weber &lt;<a href=\"mailto:tjark.weber@it.uu.se\">tjark.weber@it.uu.se</a>&gt;<br>\nIn my view, the idea isn't misconceived at all, but the current UI is<br>\nnot quite there yet. I still envision a version of Sledgehammer (or<br>\ntry) that runs continuously in the background, working away on all<br>\nsubgoals as they are generated by user input, and reports a proof when<br>\n(and if) it finds one. Importantly, there should be zero UI overhead<br>\nwhen it is unsuccessful. Ideally, this would obviate the need to even<br>\nthink about invoking Sledgehammer.</p>\n<p>Best,<br>\nTjark</p>",
        "id": 294641623,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661162342
    },
    {
        "content": "<p>From: Larry Paulson &lt;<a href=\"mailto:lp15@cam.ac.uk\">lp15@cam.ac.uk</a>&gt;<br>\nPart of my vision was to use idle capacity on nearby machines. But that’s another tricky thing, and was never implemented.</p>\n<p>I also never envisaged proving theorems in front of the television. Sledgehammer makes that pretty easy.</p>\n<p>Larry</p>",
        "id": 294641958,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661162480
    },
    {
        "content": "<p>From: Jasmin Blanchette &lt;<a href=\"mailto:jasmin.blanchette@inria.fr\">jasmin.blanchette@inria.fr</a>&gt;<br>\nHi Tjark,</p>\n<p>Have you tried playing with “Auto Sledgehammer” and friends? You can enable them in the Isabelle plugin options and adjust their timeouts.</p>\n<p>Cheers,</p>\n<p>Jasmin</p>",
        "id": 294642286,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661162630
    },
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\nAs you know, this is my attitude. I might change if there were a smooth <br>\ninvisible auto-s/h in the background, but I think that is not easy to achieve <br>\ncurrently.</p>\n<p>Tobias<br>\n<a href=\"/user_uploads/14278/uUwG0lHycRB5PGwSi86Cil3v/smime.p7s\">smime.p7s</a></p>",
        "id": 294642332,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661162642
    },
    {
        "content": "<p>From: Jasmin Blanchette &lt;<a href=\"mailto:jasmin.blanchette@inria.fr\">jasmin.blanchette@inria.fr</a>&gt;</p>\n<blockquote>\n<p>Have you tried playing with “Auto Sledgehammer” and friends? You can enable them in the Isabelle plugin options and adjust their timeouts.</p>\n</blockquote>\n<p>I should perhaps add for clarification that Auto Sledgehammer, like the other auto tools, works fine for top-level lemmas but not for subgoals or intermediate steps in an Isar proof. This is something that would require more work in Isabelle/jEdit.</p>\n<p>For starters, it would be nice if Isabelle/jEdit could notice “sorry”s and attack them. I don’t think I’m the only one who introduces them regularly as placeholders to prevent the interface from showing errors.</p>\n<p>Jasmin</p>",
        "id": 294642351,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661162648
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nOn Mon, 4 May 2015, Jasmin Blanchette wrote:</p>\n<blockquote>\n<p>I should perhaps add for clarification that Auto Sledgehammer, like the <br>\nother auto tools, works fine for top-level lemmas but not for subgoals <br>\nor intermediate steps in an Isar proof. This is something that would <br>\nrequire more work in Isabelle/jEdit.</p>\n</blockquote>\n<p>There is not so much going on there.  The PIDE print function for the auto <br>\ntools merely has a hardwired policy for \"theory_goal\" commands, see also <br>\n<a href=\"http://isabelle.in.tum.de/repos/isabelle/file/Isabelle2015-RC0/src/Tools/try.ML#l95\">http://isabelle.in.tum.de/repos/isabelle/file/Isabelle2015-RC0/src/Tools/try.ML#l95</a></p>\n<p>That may be understood as a relatively crude way to prevent the implicit <br>\nmode from sucking up too many resources.  Even in that form it is already <br>\nquite heavy.</p>\n<p>Nonetheless I think that implicit tools (with good scheduling policies) <br>\nare better than funny command-lines or click-panels.  Too bad that we <br>\ndon't have 32 or 64 cores now as we should.  Damn market economy.</p>\n<blockquote>\n<p>For starters, it would be nice if Isabelle/jEdit could notice “sorry”s <br>\nand attack them. I don’t think I’m the only one who introduces them <br>\nregularly as placeholders to prevent the interface from showing errors.</p>\n</blockquote>\n<p>In recent Isabelle versions the idea is to eliminate the need for \"sorry\" <br>\nproofs.  The document processing recovers at the next theory command.</p>\n<p>Concerning auto tools: there could be some way to mark/unmark parts of the <br>\nproof document that should be attacked implicitly.</p>\n<p>Makarius</p>",
        "id": 294642361,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661162654
    },
    {
        "content": "<p>From: Mathias Fleury &lt;<a href=\"mailto:mathias.fleury12@gmail.com\">mathias.fleury12@gmail.com</a>&gt;<br>\nLe 04/05/2015 09:56, Makarius a écrit :</p>\n<blockquote>\n<p>On Mon, 4 May 2015, Jasmin Blanchette wrote:</p>\n<blockquote>\n<p>I should perhaps add for clarification that Auto Sledgehammer, like<br>\nthe other auto tools, works fine for top-level lemmas but not for<br>\nsubgoals or intermediate steps in an Isar proof. This is something<br>\nthat would require more work in Isabelle/jEdit.</p>\n</blockquote>\n<p>There is not so much going on there.  The PIDE print function for the<br>\nauto tools merely has a hardwired policy for \"theory_goal\" commands,<br>\nsee also<br>\n<a href=\"http://isabelle.in.tum.de/repos/isabelle/file/Isabelle2015-RC0/src/Tools/try.ML#l95\">http://isabelle.in.tum.de/repos/isabelle/file/Isabelle2015-RC0/src/Tools/try.ML#l95</a></p>\n<p>That may be understood as a relatively crude way to prevent the<br>\nimplicit mode from sucking up too many resources.  Even in that form<br>\nit is already quite heavy.</p>\n<p>Nonetheless I think that implicit tools (with good scheduling<br>\npolicies) are better than funny command-lines or click-panels.  Too<br>\nbad that we don't have 32 or 64 cores now as we should.  Damn market<br>\neconomy.</p>\n<blockquote>\n<p>For starters, it would be nice if Isabelle/jEdit could notice<br>\n“sorry”s and attack them. I don’t think I’m the only one who<br>\nintroduces them regularly as placeholders to prevent the interface<br>\nfrom showing errors.</p>\n</blockquote>\n<p>In recent Isabelle versions the idea is to eliminate the need for<br>\n\"sorry\" proofs.  The document processing recovers at the next theory<br>\ncommand.<br>\nWhat is exactly a theory command? As for now, I cannot get rid of them<br>\nin Isar proofs:</p>\n</blockquote>\n<p>have XXX<br>\nhence YYY by t</p>\n<p>seems to be processed as \"have XXX by t\".</p>\n<p>Nor on the lemma level, for example:<br>\nlemma test: \"f var\"</p>\n<p>lemma \"f 1\"<br>\nusing testby auto</p>\n<p>Contrary to previous case \"lemma 'f 1'\" is not skipped. But the lemma<br>\n\"test\" is not defined. While this was the goal of adding a lemma (under<br>\nmy workflow at least): whenever I need another lemma, I put it before<br>\nand see if it can be useful.</p>\n<p>So what do you mean exactly by \"eliminating the need for 'sorry' proofs\"?</p>\n<p>(using Isabelle RC, which is a recent Isabelle version, I assume).</p>\n<p>Mathias</p>\n<blockquote>\n<p>Concerning auto tools: there could be some way to mark/unmark parts of<br>\nthe proof document that should be attacked implicitly.</p>\n<p>Makarius</p>\n</blockquote>",
        "id": 294642394,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661162668
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nIt means that for now you still need 'sorry' in the above situations.</p>\n<p>What you call \"lemma level\" above is the topmost theory structure, where <br>\ntheory commands can be written.  The formal keywords category is something <br>\nlike \"thy_decl\", \"thy_goal\" etc.  This is e.g. relevant when commands are <br>\ndefined in the library, see the 'keywords' specification in theory <br>\nheaders.</p>\n<p>My terminology and jargon on this mailing list is sometimes hard to <br>\nunderstand.  \"Recent Isabelle versions\" means something like a clear trend <br>\nin the past 3 years -- there are more and more moves towards elimination <br>\nof 'sorry', some tiny additional steps in Isabelle2015, but we are not <br>\nthere yet.  There are also diverging and conflicting attempts to achieve <br>\nsimilar things, e.g. the \"skip_proofs\" option, or the 'oops' command.  It <br>\nall needs to be sorted out and disentangled carefully.</p>\n<p>This seemingly endless process is called \"reform\": it can take months, <br>\nyears, decades, but will happen eventually. Looking back in time, it is <br>\nsurprising how far we have moved in the past 30 years.</p>\n<p>Makarius</p>",
        "id": 294642410,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661162672
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nThe aforementioned auto sledgehammer feature has zero UI overhead, but <br>\nthere is significant impact on the prover backend side.  With more than 16 <br>\ncores we could probably have it by default, but consumer machines are not <br>\nmoving forward anymore, stuck at 4 cores.</p>\n<p>Makarius</p>",
        "id": 294642426,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661162678
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nI've experimented with an up-to-date version of my virtual Fedora 21, but <br>\ndid not see any focus problems.  Maybe this needs to be tried longer.  Or <br>\nmaybe the timing is different on a virtual machine and its slow graphics <br>\nengine.</p>\n<p>Makarius</p>",
        "id": 294642439,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661162685
    }
]