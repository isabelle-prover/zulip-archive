[
    {
        "content": "<p>From: Florian Haftmann &lt;<a href=\"mailto:florian.haftmann@informatik.tu-muenchen.de\">florian.haftmann@informatik.tu-muenchen.de</a>&gt;<br>\nHi all,</p>\n<blockquote>\n<p>I think I made some changes to the imports during my overhaul of rings.<br>\nIt had something to do with pending sort hypotheses. In retrospect, a<br>\nmore ad-hoc solution may have been the better choice considering these<br>\ncomplaints now.</p>\n</blockquote>\n<p>the restoration of the previous situation is trivial:</p>\n<blockquote>\n<p>diff -r 0da35bf3e6cf src/HOL/Word/Bool_List_Representation.thy<br>\n--- a/src/HOL/Word/Bool_List_Representation.thy   Thu Nov 17 16:32:53 2016 +0100<br>\n+++ b/src/HOL/Word/Bool_List_Representation.thy   Fri Nov 18 20:56:02 2016 +0100<br>\n@@ -9,7 +9,7 @@<br>\n section \"Bool lists and integers\"</p>\n<p>theory Bool_List_Representation<br>\n-imports Complex_Main Bits_Int<br>\n+imports Main Bits_Int<br>\n begin</p>\n<p>definition map2 :: \"('a \\&lt;Rightarrow&gt; 'b \\&lt;Rightarrow&gt; 'c) \\&lt;Rightarrow&gt; 'a list \\&lt;Rightarrow&gt; 'b list \\&lt;Rightarrow&gt; 'c list\"<br>\n@@ -1106,7 +1106,7 @@<br>\n   apply (case_tac m)<br>\n   apply simp<br>\n   apply (case_tac \"m &lt;= n\")<br>\n-   apply auto<br>\n+   apply (auto simp add: div_add_self2)<br>\n   done</p>\n<p>lemma bin_rsplit_len: </p>\n</blockquote>\n<p>Cheers,<br>\n    Florian<br>\n<a href=\"/user_uploads/14278/-zL45aqA47NLpF2TgrMcmQYr/signature.asc\">signature.asc</a></p>",
        "id": 294696514,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661178260
    },
    {
        "content": "<p>From: Peter Lammich &lt;<a href=\"mailto:lammich@in.tum.de\">lammich@in.tum.de</a>&gt;<br>\nThanks Florian.</p>\n<p>Can you push this please?</p>\n<p>@Makarius: Will this make it into Isabelle2016-1?</p>",
        "id": 294696533,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661178266
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nA push on isabelle-dev would mean it is for the next release after<br>\nIsabelle2016-1. It needs to go to the isabelle-release instead: all<br>\nchanges need to be sent to me via email. See now<br>\n<a href=\"https://bitbucket.org/isabelle_project/isabelle-release/commits/eace715f4988\">https://bitbucket.org/isabelle_project/isabelle-release/commits/eace715f4988</a></p>\n<p>Here is also the point in history where the slightly odd const name \"ii\"<br>\nwas originally introduced, oddly together with the same \"ii\" as notation:<br>\n<a href=\"http://isabelle.in.tum.de/repos/isabelle/rev/10dbf16be15f#l8.17\">http://isabelle.in.tum.de/repos/isabelle/rev/10dbf16be15f#l8.17</a></p>\n<p>Here the notation was changed to the current \\&lt;i&gt;, without changing the<br>\nconst name: <a href=\"http://isabelle.in.tum.de/repos/isabelle/rev/67a628beb981#l3.25\">http://isabelle.in.tum.de/repos/isabelle/rev/67a628beb981#l3.25</a></p>\n<p>Facts are usually just called i_foo_bar instead of ii_foo_bar. So an<br>\nobvious reform after the Isabelle2016-1 release is this:</p>\n<p>* rename const \"ii\" to \"imaginary_unit\" (with existing syntax \\&lt;i&gt;);<br>\n    the const name hardly ever shows up in applications</p>\n<p>* standardize all corresponding fact names towards i_foo_bar</p>\n<p>In principle, the const could be also called \\&lt;i&gt; and the syntax<br>\nremoved. Morally it would probably mean to rename facts using that<br>\nsymbolic identifier instead of ASCII.</p>\n<p>Moreover, HOL/Nonstandard_Analysis/NSComplex.thy provides another odd<br>\nconst \"iii\" for \"star_of \\&lt;i&gt;\". Maybe this could be improved after the<br>\nrelease as well.  Much of the \"star\" notation looks very old and could<br>\nbenefit from present-day notational facilities.</p>\n<p>Makarius</p>",
        "id": 294696544,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661178272
    },
    {
        "content": "<p>From: Lawrence Paulson &lt;<a href=\"mailto:lp15@cam.ac.uk\">lp15@cam.ac.uk</a>&gt;<br>\nRemark: it is also called ii  in HOL Light. A lot of legacy material here.<br>\nLarry</p>",
        "id": 294696771,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661178296
    },
    {
        "content": "<p>From: Peter Lammich &lt;<a href=\"mailto:lammich@in.tum.de\">lammich@in.tum.de</a>&gt;<br>\nHi all,</p>\n<p>I realized that by importing Complex_Main, some very short-named<br>\nconstants like \"ii\" pop up in the global namespace, and thus are not<br>\navailable for variable names any more without explicit fixing. This is<br>\nvery inconvenient. Can't these constants be hidden by default, and only<br>\nmade visible on demand, eg, as we do for Lattice_Syntax?</p>",
        "id": 294700993,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661179174
    },
    {
        "content": "<p>From: Peter Lammich &lt;<a href=\"mailto:lammich@in.tum.de\">lammich@in.tum.de</a>&gt;<br>\nHi Johannes,</p>\n<p>you are right, having ii as imaginary number is not that strange in<br>\nComplex_Main. However, what puzzled me is how it creeped into the<br>\nCollections framework, making it omnipresent in many developments<br>\ndepending on Collections framework directly or indirectly (actually,<br>\nmany AFP entries). The short answer is:<br>\nHOL/Word/Bool_List_Representation now imports Complex_Main: I would<br>\nargue that one cannot expect having ii and pi and ... in the namespace<br>\nafter importing HOL/Word, which is about machine word representation!</p>\n<p>So what is the policy to avoid such namespace pollutions? A quick fix<br>\nwould be adding some hide_const to Bool_List_Representation, but that<br>\nwould not be very robust ...</p>",
        "id": 294701012,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661179180
    },
    {
        "content": "<p>From: Johannes Hölzl &lt;<a href=\"mailto:johannes.hoelzl@gmx.de\">johannes.hoelzl@gmx.de</a>&gt;<br>\nHm, \"ii\" (and \\&lt;i&gt;) represent the imaginary number, something one can<br>\nexpect from a theory called Complex_Main.</p>\n<p>But as \\&lt;i&gt; is also available I think it is okay to hide \"ii\".</p>\n<p>But is this a problem occurring the first time with Isabelle2016-1-<br>\nRC2? <br>\nIt should be already available in Isabelle2016 (and before).</p>\n<p>- Johannes</p>",
        "id": 294701030,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661179186
    },
    {
        "content": "<p>From: Manuel Eberl &lt;<a href=\"mailto:eberlm@in.tum.de\">eberlm@in.tum.de</a>&gt;<br>\nI think I made some changes to the imports during my overhaul of rings. <br>\nIt had something to do with pending sort hypotheses. In retrospect, a <br>\nmore ad-hoc solution may have been the better choice considering these <br>\ncomplaints now.</p>\n<p>I also think that hiding ii is a reasonable solution (as long as it is <br>\nstill accessible as Complex.ii or similar) but then the question is what <br>\nto do about pi or similarly short names like sin, cos, exp, cis.</p>\n<p>Manuel</p>",
        "id": 294701043,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661179192
    }
]