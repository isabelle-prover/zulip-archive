[
    {
        "content": "<p>From: Christian Sternagel &lt;<a href=\"mailto:c.sternagel@gmail.com\">c.sternagel@gmail.com</a>&gt;<br>\nDear Makarius,</p>\n<p>I was replacing some 'def \"f == %x. P x\"' by the new 'define' command<br>\nand have two comments:</p>\n<p>1) For 'definition' the constant name and the 'where' can be dropped, e.g.,</p>\n<p>definition \"f = ...\"</p>\n<p>I do this a lot, because</p>\n<p>definition f where \"f = ...\"</p>\n<p>seems a bit silly (I mostly do this whenever I deem the type of \"f\" to<br>\nbe so obvious that I do not want to state it explicitly). I would like<br>\nto have the same option also for 'define'.</p>\n<p>2) I would have guessed (but reading isar-ref showed me otherwise) that</p>\n<p>define f where \"f x = P x\"</p>\n<p>is (almost) the same as</p>\n<p>define f where \"f = (%x. P x)\"</p>\n<p>but for that I need</p>\n<p>define f where \"f x = P x\" for x</p>\n<p>While this is consistent with 'have ... if ... for ...' it is different<br>\nfrom what 'definition' does, and for some reason I was expecting to<br>\nbehave 'define' very similar to 'definition' (it might have been the<br>\nname ;)). Is there a specific reason that arguments of the left-hand<br>\nside of 'define' are not meta-all-quantified implicitly?</p>\n<p>cheers</p>\n<p>chris</p>",
        "id": 294698069,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661178432
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\n'define' is a proof context element and 'definition' a theory<br>\nspecification element. There are different policies for variable<br>\nbinding: the theory language allows more sloppiness.</p>\n<p>There are some more differences. In some sense, 'define' is not a really<br>\na definition, because Hindley-Milner polymorphism is lacking.</p>\n<p>It might be better to think of 'define' as a variant of 'obtain' -- the<br>\nsyntax is also quite close.</p>\n<p>Makarius</p>",
        "id": 294698098,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661178441
    },
    {
        "content": "<p>From: Johannes Hölzl &lt;<a href=\"mailto:hoelzl@in.tum.de\">hoelzl@in.tum.de</a>&gt;<br>\nAm Freitag, den 25.11.2016, 11:41 +0100 schrieb Makarius:</p>\n<blockquote>\n<p>On 25/11/16 11:03, Christian Sternagel wrote:</p>\n<blockquote>\n<p>I would have guessed (but reading isar-ref showed me otherwise)<br>\nthat</p>\n<p>define f where \"f x = P x\"</p>\n<p>is (almost) the same as</p>\n<p>define f where \"f = (%x. P x)\"</p>\n<p>but for that I need</p>\n<p>define f where \"f x = P x\" for x</p>\n<p>While this is consistent with 'have ... if ... for ...' it is<br>\ndifferent<br>\nfrom what 'definition' does, and for some reason I was expecting to<br>\nbehave 'define' very similar to 'definition' (it might have been<br>\nthe<br>\nname ;)). Is there a specific reason that arguments of the left-<br>\nhand<br>\nside of 'define' are not meta-all-quantified implicitly?</p>\n</blockquote>\n<p>'define' is a proof context element and 'definition' a theory<br>\nspecification element. There are different policies for variable<br>\nbinding: the theory language allows more sloppiness.</p>\n<p>There are some more differences. In some sense, 'define' is not a<br>\nreally<br>\na definition, because Hindley-Milner polymorphism is lacking.</p>\n<p>It might be better to think of 'define' as a variant of 'obtain' --<br>\nthe<br>\nsyntax is also quite close.</p>\n</blockquote>\n<p>But 'define' is also more specific than 'obtain'. Currently the main<br>\ndifference btw 'define' and 'obtain' is that I do not need to specify a<br>\nproof method for 'define'.</p>\n<p>It would be nice if we do not need to provide so much redundant<br>\ninformations (two times the name of the defined constant and two times<br>\nfor each parameter...)</p>\n<ul>\n<li>Johannes</li>\n</ul>\n<blockquote>\n<p>Makarius</p>\n</blockquote>",
        "id": 294698107,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661178444
    },
    {
        "content": "<p>From: Andreas Lochbihler &lt;<a href=\"mailto:andreas.lochbihler@inf.ethz.ch\">andreas.lochbihler@inf.ethz.ch</a>&gt;<br>\nOn 25/11/16 12:02, Johannes Hölzl wrote:</p>\n<blockquote>\n<p>Am Freitag, den 25.11.2016, 11:41 +0100 schrieb Makarius:</p>\n<blockquote>\n<p>On 25/11/16 11:03, Christian Sternagel wrote:</p>\n<blockquote>\n<p>I would have guessed (but reading isar-ref showed me otherwise)<br>\nthat</p>\n<p>define f where \"f x = P x\"</p>\n<p>is (almost) the same as</p>\n<p>define f where \"f = (%x. P x)\"</p>\n<p>but for that I need</p>\n<p>define f where \"f x = P x\" for x</p>\n<p>While this is consistent with 'have ... if ... for ...' it is<br>\ndifferent<br>\nfrom what 'definition' does, and for some reason I was expecting to<br>\nbehave 'define' very similar to 'definition' (it might have been<br>\nthe<br>\nname ;)). Is there a specific reason that arguments of the left-<br>\nhand<br>\nside of 'define' are not meta-all-quantified implicitly?</p>\n</blockquote>\n<p>'define' is a proof context element and 'definition' a theory<br>\nspecification element. There are different policies for variable<br>\nbinding: the theory language allows more sloppiness.</p>\n<p>There are some more differences. In some sense, 'define' is not a<br>\nreally<br>\na definition, because Hindley-Milner polymorphism is lacking.</p>\n<p>It might be better to think of 'define' as a variant of 'obtain' --<br>\nthe<br>\nsyntax is also quite close.</p>\n</blockquote>\n<p>But 'define' is also more specific than 'obtain'. Currently the main<br>\ndifference btw 'define' and 'obtain' is that I do not need to specify a<br>\nproof method for 'define'.</p>\n<p>Another difference is that define'd constants may appear in show statements, but obtain'ed <br>\nones may not.</p>\n</blockquote>\n<blockquote>\n<p>It would be nice if we do not need to provide so much redundant<br>\ninformations (two times the name of the defined constant and two times<br>\nfor each parameter...)<br>\nIndeed. I would also like to be able to drop the \"xxx where\" part. I can live with the <br>\n\"for\" clause, though.</p>\n</blockquote>\n<p>Andreas</p>",
        "id": 294698166,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661178468
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nThese Isar proof context policies are important for the purity and<br>\nclarity of the language.</p>\n<p>In Isar 2016 there has been clarification towards proper use of Isar in<br>\nvarious respects. Overall, the text becomes shorter and only in a few<br>\ncases a bit longer.</p>\n<p>I recommend to buy the whole package, and not look back on older forms.</p>\n<p>Makarius</p>",
        "id": 294698192,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661178480
    }
]