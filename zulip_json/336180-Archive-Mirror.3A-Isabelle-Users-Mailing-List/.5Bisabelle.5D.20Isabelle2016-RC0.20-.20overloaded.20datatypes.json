[
    {
        "content": "<p>From: \"C. Diekmann\" &lt;<a href=\"mailto:diekmann@in.tum.de\">diekmann@in.tum.de</a>&gt;<br>\nHi,</p>\n<p>In Isabelle2015, I had the following datatype:</p>\n<p>datatype ('a::len0) wordinterval = WordInterval<br>\n                                        \"('a::len0) word\" --\"start (inclusive)\"<br>\n                                        \"('a::len0) word\" --\"end (inclusive)\"<br>\n                                  | RangeUnion \"'a wordinterval\" \"'a<br>\nwordinterval\"</p>\n<p>With Isabelle2016-RC0, I get the following error:</p>\n<p>Type definition with open dependencies, use \"typedef (overloaded)\" or<br>\nenable configuration option \"typedef_overloaded\" in the context.<br>\n  Type:  ('a, 'b) wordinterval_pre_wordinterval<br>\n  Deps:  len_of('a)<br>\nThe error(s) above occurred in typedef<br>\n\"wordinterval.wordinterval_pre_wordinterval\"</p>\n<p>The news describes this behavior for typedef. But how do I translate<br>\nmy datatype to Isabelle2016?</p>\n<p>Is typedef (overloaded) dangerous?</p>\n<p>As an ordinary user, who does not dig into Isabelle internals too<br>\nmuch, trying to define a datatype and getting an error about typedef<br>\nis confusing.</p>\n<p>Best Regards,<br>\n  Cornelius</p>",
        "id": 294662158,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661170318
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nThe NEWS file says \"This provides extra robustness in theory <br>\nconstruction.\"</p>\n<p>The isar-ref manual says:</p>\n<p>Recent clarification of overloading in the HOL logic proper @{cite<br>\n   \"Kuncar-Popescu:2015\"} demonstrates how the dissimilar concepts of<br>\n   constant definitions versus type definitions may be understood<br>\n   uniformly. This requires an interpretation of Isabelle/HOL that<br>\n   substantially reforms the set-theoretic model of A. Pitts @{cite<br>\n   \"pitts93\"}, by taking a schematic view on polymorphism and interpreting<br>\n   only ground types in the set-theoretic sense of HOL88. Moreover,<br>\n   type-constructors may be explicitly overloaded, e.g.\\ by making the<br>\n   subset depend on type-class parameters (cf.\\ \\secref{sec:class}). This<br>\n   is semantically like a dependent type: the meaning relies on the<br>\n   operations provided by different type-class instances.</p>\n<p>So it goes beyond the classic understanding of the HOL logic, i.e. the one <br>\nof HOL4 or HOL-Light.</p>\n<p>There is nothing wrong with that.  The extra option merely makes clear, <br>\nwhere the transition happens, for applications that need extreme forms of <br>\nreliability (e.g. by translation to OpenTheory or other HOL systems).</p>\n<p>Makarius</p>",
        "id": 294662352,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661170388
    }
]