[
    {
        "content": "<p>From: \"C. Diekmann\" &lt;<a href=\"mailto:diekmann@in.tum.de\">diekmann@in.tum.de</a>&gt;<br>\nHi,</p>\n<p>I'm trying to start RC3 jEdit with Collections pre-loaded. I'm using<br>\nafp-devel 138306721319. I also tried it with a less recent version<br>\nwhich worked on RC2.</p>\n<p>For a fresh start, I deleted my .isabelle/Isabelle-2016-RC3 directory.</p>\n<p>I started Isabelle from the afp-devel toplevel with<br>\n  ~/Downloads/Isabelle2016-RC3/bin/isabelle jedit -d thys/ -l Collections</p>\n<p>It starts building everything, starting from session HOL in the jEdit window.<br>\nAt some point (Collections), the build just fails. These are the last<br>\nparts of the output:</p>\n<p>...<br>\nCollections: theory Refine_Monadic_Userguide</p>\n<p>Collections FAILED<br>\n(see also /home/diekmann/.isabelle/Isabelle2016-RC3/heaps/polyml-5.6_x86-linux/log/Collections)</p>\n<p>Int_of_integer 3072, (),<br>\n                   Branch<br>\n                    (B, Branch (..., ...), Int_of_integer 3584, ...))),<br>\n            Int_of_integer 4096, (),<br>\n            Branch<br>\n             (B, Branch<br>\n                  (B, Branch<br>\n                       (B, Branch (..., ...), Int_of_integer 4608, ...),<br>\n                   Int_of_integer 5120, (),<br>\n                   Branch (B, Branch (..., ...), Int_of_integer 5632, ...)),<br>\n              Int_of_integer 6144, (),<br>\n              Branch<br>\n               (B, Branch (B, Branch (..., ...), Int_of_integer 6656, ...),<br>\n                Int_of_integer 7168, (),<br>\n                Branch (B, Branch (..., ...), Int_of_integer 7680, ...))))<br>\n          ):<br>\n   (Isabelle1955749.Generated_Code.inta, unit)<br>\n   Isabelle1955749.Generated_Code.rbt<br>\nval it = (): unit<br>\nML&gt; Exception- Fail \"Insufficient memory\" raised<br>\nUnfinished session(s): Collections<br>\nReturn code: 1</p>\n<p>Session build failed -- prover process remains inactive!</p>\n<p>When the build is at \"Collections: theory Refine_Monadic_Userguide\",<br>\nat most 5.8GB RAM of 7.8GB RAM are used on my system (tested three<br>\ntimes).</p>\n<p>However, when I cd to thys and start isabelle with<br>\n  ~/Downloads/Isabelle2016-RC3/bin/isabelle jedit -d . -l Collections<br>\nit works fine.</p>\n<p>I could reproduce this  several times (3 tests each, always the same<br>\nbehavior). It does not look like a _random_ memory shortage to me. The<br>\nwhole thing worked fine with the previous RCs.</p>\n<p>This behavior does not occur with the command line build. I.e.<br>\n  ~/Downloads/Isabelle2016-RC3/bin/isabelle build -d thys -v Collections<br>\nworks fine.</p>\n<p>My system has 8GB of RAM, 2 physical cores + hyperthreading, Linux<br>\nubuntu 14.04, unity.</p>\n<p>Best Regards,<br>\n  Cornelius</p>",
        "id": 294666532,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661171960
    },
    {
        "content": "<p>From: Peter Lammich &lt;<a href=\"mailto:lammich@in.tum.de\">lammich@in.tum.de</a>&gt;<br>\nThis error is strange, and we should be careful not to rule out building<br>\nbig sessions without really big machines. Btw Collections is of moderate<br>\nsize, compared to, eg, JinjaThreads. </p>\n<p>Is there any way to measure how \"close\" a build comes to an<br>\nout-of-memory error, to figure out whether something serious happened<br>\nbetween RC2 and RC3, or whether on RC2 the build ran at 99% of available<br>\nmemory, on on RC3 it happens to be 101%.</p>",
        "id": 294667551,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661172291
    },
    {
        "content": "<p>From: \"C. Diekmann\" &lt;<a href=\"mailto:diekmann@in.tum.de\">diekmann@in.tum.de</a>&gt;<br>\n2016-02-02 18:45 GMT+01:00 Peter Lammich &lt;<a href=\"mailto:lammich@in.tum.de\">lammich@in.tum.de</a>&gt;:</p>\n<blockquote>\n<p>This error is strange, and we should be careful not to rule out building<br>\nbig sessions without really big machines.</p>\n</blockquote>\n<p>I agree. My office laptop has 8GB of RAM. It would be really hard if<br>\nthis is not enough for Isabelle. Students often have laptops with less<br>\nRAM.</p>\n<p>This thread should be called: Isabelle2016 uses too much RAM.</p>\n<p>For the way I (personally) use Isabelle, this would be release-critical.</p>\n<p>&lt;off topic&gt;<br>\nI started buying big machines after I got familiar with Isabelle. I<br>\nwas a happy intel atom 1GM RAM user before that. But Isabelle was<br>\nworking okay in 2012 on that device. I understand that these times are<br>\nlong gone. But requiring more that a common, up-to-date, medium-class,<br>\noff-the-shelf laptop to run Isabelle will make it really hard to get<br>\nnew users or to use Isabelle in a lecture.<br>\n&lt;/off topic&gt;</p>\n<blockquote>\n<p>Btw Collections is of moderate<br>\nsize, compared to, eg, JinjaThreads.</p>\n</blockquote>\n<p>&lt;more off topic&gt;<br>\nIf Collections is medium-sized, does this mean this theory can<br>\ndetermine the minimum amount of RAM necessary to do something useful<br>\nwith Isabelle? Should this information be on the website?<br>\n&lt;/more off topic&gt;</p>\n<blockquote>\n<p>Is there any way to measure how \"close\" a build comes to an<br>\nout-of-memory error, to figure out whether something serious happened<br>\nbetween RC2 and RC3, or whether on RC2 the build ran at 99% of available<br>\nmemory, on on RC3 it happens to be 101%.</p>\n</blockquote>\n<p>I booted my machine with only 6BG of ram (kernel option) and now the<br>\nbuild also fails at the same position with RC2.</p>\n<p>Isabelle 2015 (with my 2015 snapshot of the afp, which makes the whole<br>\nmeasurement not comparable) can build Collection on 6GB RAM. But there<br>\nwas a moment where it \"felt like\" I almost ran out of RAM.</p>\n<p>Cornelius</p>\n<blockquote>\n<p>On Di, 2016-02-02 at 18:26 +0100, C. Diekmann wrote:</p>\n<blockquote>\n<p>Thanks.</p>\n<p>If I build it with \"isabelle build -d . -b Collections\", I also get<br>\nthe \"Insufficient memory\" error.</p>\n<p>With RC2, the same works fine. I can run the following without any problems:<br>\n  $ISABELLE build -d $AFP -v -b Collections<br>\n  $ISABELLE jedit -d $AFP -l Collections</p>\n<p>It should be possible to build Collections with only 8GB of RAM,<br>\nright? I know that a student used this entry in 2015 with a 4GB RAM<br>\nlaptop. Something seems to eat up the RAM in RC3 when finalizing* the<br>\nsession image.</p>\n<p>*) I'm just guessing that it happens at finalizing because the<br>\nout-of-memory occurs at the last theory and does not occur if I omit<br>\nthe \"-b\" option.</p>\n<p>Best Regards,<br>\n  Cornelius</p>\n<p>2016-02-02 17:04 GMT+01:00 Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;:</p>\n<p>On Tue, 2 Feb 2016, C. Diekmann wrote:</p>\n<blockquote>\n<blockquote>\n<p>Now I also get the error when I build from the current directory.<br>\n~/Downloads/Isabelle2016-RC3/bin/isabelle jedit -d . -l Collections</p>\n<p>If I build Collections first on the command line<br>\n ~/Downloads/Isabelle2016-RC3/bin/isabelle build -d . -v Collections<br>\nthe build works.<br>\nIf I try to load it in jEdit (previous command), it is building<br>\nCollections again, but not its dependencies. Shouldn't it load<br>\nCollections now without building? The jEdit build fails with the<br>\npreviously mentioned error.</p>\n</blockquote>\n<p>You need to build a session image using \"isabelle build -b\".</p>\n<p>That also makes a difference in resource requirements.</p>\n<p>Makarius<br>\n</p>\n</blockquote>\n</blockquote>\n</blockquote>",
        "id": 294667568,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661172297
    },
    {
        "content": "<p>From: Peter Lammich &lt;<a href=\"mailto:lammich@in.tum.de\">lammich@in.tum.de</a>&gt;<br>\nHave you used 64bit poly? What happens on 32bit poly?</p>\n<p>\\-------- Originalnachricht --------</p>",
        "id": 294667604,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661172306
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nThe NEWS file says again that resource requirements have been reduced. <br>\nInterestingly that has been a theme of all releases of the last years.</p>\n<p>Whenever the resource requirements of the systems are reduced, <br>\napplications fill up the free space again.</p>\n<p>I don't complain about that, it is just how things work. You merely need <br>\nto be slightly above average in hardware capacities to cope with that.<br>\n8 GB is below that average.  Further below are small mobile devices, not <br>\nproper computers.</p>\n<p>Makarius</p>",
        "id": 294667616,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661172310
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nUsing Poly/ML with x86_64 is actually a common mistake -- it is the <br>\ndefault on most Linux installations, but the Isabelle installation <br>\ninstructions say explicitly that 32bit libraries should be installed.</p>\n<p>We are back to the question how much documentation people want to use. <br>\nAnybody with higher-than average requirements should peek at advanced <br>\ntexts occasionally.</p>\n<p>What also helps under tight ML heap conditions to is vary the ML_OPTIONS a <br>\nbit, concerning the initial heap size.  This changes the way how Poly/ML <br>\ngrows and shrinks the heap, and sometimes it makes a difference.</p>\n<p>Makarius</p>",
        "id": 294667644,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661172322
    },
    {
        "content": "<p>From: Lawrence Paulson &lt;<a href=\"mailto:lp15@cam.ac.uk\">lp15@cam.ac.uk</a>&gt;<br>\nIâ€™ve used an 8 GB laptop (Macbook Pro) for years, generally with success. Of course things are better with a bigger machine, but itâ€™s not essential.</p>\n<p>Larry</p>",
        "id": 294667655,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661172328
    },
    {
        "content": "<p>From: Matthew Fernandez &lt;<a href=\"mailto:matthew.fernandez@nicta.com.au\">matthew.fernandez@nicta.com.au</a>&gt;<br>\nOn 03/02/16 09:35, Makarius wrote:</p>\n<blockquote>\n<p>On Tue, 2 Feb 2016, Peter Lammich wrote:</p>\n<blockquote>\n<p>Have you used 64bit poly? What happens on 32bit poly?</p>\n</blockquote>\n<p>Using Poly/ML with x86_64 is actually a common mistake -- it is the default on most Linux installations, but the<br>\nIsabelle installation instructions say explicitly that 32bit libraries should be installed.</p>\n</blockquote>\n<p>Maybe I'm missing some context for this statement, but why is using 64-bit Poly/ML a mistake? This is what I use and, as<br>\nfar as I'm aware, is the default configuration in the l4.verified proofs setup [0]. I don't have a deep knowledge of the<br>\nPoly/ML implementation but my understanding is that, while the 64-bit version uses more memory to accomplish the same<br>\nthing, you <em>must</em> use it if you want to use more than N bytes of RAM (for some N; 4GB?). If this is not the case, I<br>\nwould love to be enlightened as to how to better configure my system.</p>\n<p>[0]: <a href=\"https://github.com/seL4/l4v/blob/master/misc/etc/settings#L19\">https://github.com/seL4/l4v/blob/master/misc/etc/settings#L19</a></p>\n<blockquote>\n<p>We are back to the question how much documentation people want to use. Anybody with higher-than average requirements<br>\nshould peek at advanced texts occasionally.</p>\n<p>What also helps under tight ML heap conditions to is vary the ML_OPTIONS a bit, concerning the initial heap size.  This<br>\nchanges the way how Poly/ML grows and shrinks the heap, and sometimes it makes a difference.</p>\n<p>Makarius</p>\n</blockquote>\n<hr>\n<p>The information in this e-mail may be confidential and subject to legal professional privilege and/or copyright. National ICT Australia Limited accepts no liability for any damage caused by this email or its attachments.</p>",
        "id": 294667670,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661172336
    },
    {
        "content": "<p>From: \"C. Diekmann\" &lt;<a href=\"mailto:diekmann@in.tum.de\">diekmann@in.tum.de</a>&gt;<br>\n2016-02-02 23:35 GMT+01:00 Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;:</p>\n<blockquote>\n<p>On Tue, 2 Feb 2016, Peter Lammich wrote:</p>\n<blockquote>\n<p>Have you used 64bit poly? What happens on 32bit poly?</p>\n</blockquote>\n<p>Using Poly/ML with x86_64 is actually a common mistake -- it is the default<br>\non most Linux installations, but the Isabelle installation instructions say<br>\nexplicitly that 32bit libraries should be installed.</p>\n</blockquote>\n<p>I'm not getting the \"bulky 64bit version\" warning when i start jEdit<br>\nor build, so I guess that I'm using the 32bit library.</p>\n<blockquote>\n<p>We are back to the question how much documentation people want to use.<br>\nAnybody with higher-than average requirements should peek at advanced texts<br>\noccasionally.</p>\n</blockquote>\n<p>Is Isabelle2016 still issuing a warning on startup if the 64bit<br>\nlibraries are used?</p>\n<p>Cornelius</p>",
        "id": 294667689,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661172346
    },
    {
        "content": "<p>From: David Matthews &lt;<a href=\"mailto:dm@prolingua.co.uk\">dm@prolingua.co.uk</a>&gt;<br>\nActually, that used to be the case.  At one time the initial heap size <br>\nwas also used to calculate the increment if the heap needed to be <br>\nexpanded.  Since Poly/ML 5.5 the heap sizing is adjusted depending on <br>\nthe GC load.  The heap size is only adjusted after a major GC so if you <br>\nknow you're going to need a large heap it may help to set the minimum <br>\nsize before you start.</p>\n<p>David</p>",
        "id": 294667924,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661172417
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nFor more than 3 years big Isabelle applications are usually run in <br>\nconstant space of approx. 3.5 GB, i.e. the maximum on 32bit.  This applies <br>\nto all of Isabelle + AFP, and is usually the most efficient way on small <br>\nand big machines.</p>\n<p>Applications that really need more GBs -- presumably l4.verified is the <br>\nonly one on the planet -- there is no other way than to move on to bigger <br>\nmachines and the 64bit model.</p>\n<p>What kind of hardware do l4.verified people use for that?</p>\n<p>Makarius</p>",
        "id": 294667951,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661172426
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nNot any longer.  This warning usually showed up in unexpected situations, <br>\nand did not show up when the standard Isabelle application wrapper was <br>\nused.</p>\n<p>There were various changes in the auto-configuration of 32bit vs. 64bit <br>\nplatforms, both for the ML system and the JVM.  You now get this <br>\ninformation in the title of the build dialog on the first startup, but it <br>\nis possible to overlook it. (And sometimes people think that 64bit is <br>\nalways better than 32bit.)</p>\n<p>I was thinking of an additional warning dialog for a situation where the <br>\noption ML_system_64 is not set (i.e. the default of Isabelle), but the <br>\nresult forced to x86_64-linux due to lack of 32bit g++ libraries (i.e. the <br>\ndefault of most Linux installations).  I did not do it, because it may <br>\ncause puzzlement to new users or casual users, e.g. of introductory <br>\nIsabelle tutorials.  The difference is only relevant to really big <br>\napplications.</p>\n<p>Isabelle power users, especially on Linux, need to do some more <br>\nfine-tuning to get various side-conditions right.  The details are listed <br>\nhere: <a href=\"http://isabelle.in.tum.de/website-Isabelle2016-RC3/installation.html\">http://isabelle.in.tum.de/website-Isabelle2016-RC3/installation.html</a></p>\n<p>Makarius</p>",
        "id": 294667975,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661172433
    },
    {
        "content": "<p>From: Matthew Fernandez &lt;<a href=\"mailto:matthew.fernandez@nicta.com.au\">matthew.fernandez@nicta.com.au</a>&gt;<br>\nRaf Kolanski can probably provide details about our server, but for my own desktop machine I have an Intel i7 with 32GB<br>\nRAM. On my current proofs I regularly exceed 20GB.</p>\n<hr>\n<p>The information in this e-mail may be confidential and subject to legal professional privilege and/or copyright. National ICT Australia Limited accepts no liability for any damage caused by this email or its attachments.</p>",
        "id": 294667993,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661172438
    },
    {
        "content": "<p>From: Gerwin Klein &lt;<a href=\"mailto:Gerwin.Klein@nicta.com.au\">Gerwin.Klein@nicta.com.au</a>&gt;<br>\nThe standard desktop setup is 32GB RAM with a higher-end quadcore i7. This allow you to run 2 sessions in parallel without too much trouble. Without memory pressure itâ€™ll take about 20GB, but with GC it should fit into 16GB (itâ€™s very close to that 16GB limit, sometimes over sometimes under, depending on changes in proofs, Isabelle, polyml, Linux or Mac, etc).</p>\n<p>Server side weâ€™re currently running an 8-core i7 with 128GB, but itâ€™s getting a bit old and is in need of a refresh.</p>\n<p>Most of the proofs do actually run fine on a 8GB laptop. Itâ€™s only the later stages and C-level proofs that need that much memory.</p>\n<p>Cheers,<br>\nGerwin</p>",
        "id": 294668004,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661172444
    },
    {
        "content": "<p>From: Christian Sternagel &lt;<a href=\"mailto:c.sternagel@gmail.com\">c.sternagel@gmail.com</a>&gt;<br>\nMake this at least 2. IsaFoR already fails to build its session HOL-AFP<br>\n(which just brings together all the necessary theories from the AFP) in<br>\n32bit mode.</p>\n<p>We are using the following hardware (our \"build server\", a workstation<br>\nespecially for people in my lab working on IsaFoR):<br>\ncpu: i7 (12 Cores a la 3.5 Ghz)<br>\nmem: 32 GB</p>\n<p>In principle it is also possible to build IsaFoR on my \"laptop\" (due to<br>\nits weight you might argue that it classifies as such):<br>\ncpu: i7 (4 Cores a la 2.4 Ghz)<br>\nmem: 16 GB</p>\n<p>However, this makes my laptop completely unusable for about 1h and thus<br>\nI usually prefer to build heap images on the \"build server\" and then<br>\nrsync them over onto my laptop.</p>\n<p>cheers</p>\n<p>chris</p>\n<p>PS: HOL-AFP pulls in the following theories</p>\n<p>Building HOL-AFP ...<br>\nHOL-AFP: theory AssocList<br>\nHOL-AFP: theory Bit<br>\nHOL-AFP: theory Bits<br>\nHOL-AFP: theory Boolean_Algebra<br>\nHOL-AFP: theory Comparator<br>\nHOL-AFP: theory Derive_Manager<br>\nHOL-AFP: theory Equal<br>\nHOL-AFP: theory Divmod_Int<br>\nHOL-AFP: theory Error_Syntax<br>\nHOL-AFP: theory Extend_Partial_Order<br>\nHOL-AFP: theory Foldi<br>\nHOL-AFP: theory Missing_Ring<br>\nHOL-AFP: theory Closure_Set<br>\nHOL-AFP: theory FunctionLemmas<br>\nHOL-AFP: theory Generator_Aux<br>\nHOL-AFP: theory IArray<br>\nHOL-AFP: theory ICF_Tools<br>\nHOL-AFP: theory Infinite_Sequences<br>\nHOL-AFP: theory Omega_Words_Fun<br>\nHOL-AFP: theory Least_Enum<br>\nHOL-AFP: theory List_Fusion<br>\nHOL-AFP: theory Misc_Numeric<br>\nHOL-AFP: theory Misc_Typedef<br>\nHOL-AFP: theory Bit_Representation<br>\nHOL-AFP: theory Containers_Auxiliary<br>\nHOL-AFP: theory Error_Monad<br>\nHOL-AFP: theory Efficient_Sort<br>\nHOL-AFP: theory Bits_Bit<br>\nHOL-AFP: theory Equality_Generator<br>\nHOL-AFP: theory List_More<br>\nHOL-AFP: theory Compare<br>\nHOL-AFP: theory Comparator_Generator<br>\nHOL-AFP: theory IArray_Addenda<br>\nHOL-AFP: theory Missing_Multiset<br>\nHOL-AFP: theory Quicksort<br>\nHOL-AFP: theory IArray_Haskell<br>\nHOL-AFP: theory Nat_Bijection<br>\nHOL-AFP: theory Old_Datatype<br>\nHOL-AFP: theory Option_ord<br>\nHOL-AFP: theory Equality_Instances<br>\nHOL-AFP: theory Ord_Code_Preproc<br>\nHOL-AFP: theory Bits_Int<br>\nHOL-AFP: theory Partial_Function_MR<br>\nHOL-AFP: theory Numeral_Type<br>\nHOL-AFP: theory Locale_Code<br>\nHOL-AFP: theory Containers_Generator<br>\nHOL-AFP: theory Improved_Code_Equations<br>\nHOL-AFP: theory Check_Monad<br>\nHOL-AFP: theory Strict_Sum<br>\nHOL-AFP: theory Collection_Enum<br>\nHOL-AFP: theory Collection_Eq<br>\nHOL-AFP: theory Lexicographic_Order<br>\nHOL-AFP: theory Missing_Polynomial<br>\nHOL-AFP: theory Compare_Generator<br>\nHOL-AFP: theory Neville_Aitken_Interpolation<br>\nHOL-AFP: theory Set_Linorder<br>\nHOL-AFP: theory Compare_Instances<br>\nHOL-AFP: theory Compare_Rat<br>\nHOL-AFP: theory Compare_Real<br>\nHOL-AFP: theory Type_Length<br>\nHOL-AFP: theory DList_Set<br>\nHOL-AFP: theory Prio_List<br>\nHOL-AFP: theory Lagrange_Interpolation<br>\nHOL-AFP: theory Product_Lexorder<br>\nHOL-AFP: theory RBT_Comparator_Impl<br>\nHOL-AFP: theory Bool_List_Representation<br>\nHOL-AFP: theory RBT_Compare_Order_Impl<br>\nHOL-AFP: theory RBT_ext<br>\nHOL-AFP: theory Record_Intf<br>\nHOL-AFP: theory Refine_Chapter<br>\nHOL-AFP: theory Compare_Order_Instances<br>\nHOL-AFP: theory Misc<br>\nHOL-AFP: theory Countable<br>\nHOL-AFP: theory Refine_Util<br>\nHOL-AFP: theory Anti_Unification<br>\nHOL-AFP: theory Attr_Comb<br>\nHOL-AFP: theory Autoref_Data<br>\nHOL-AFP: theory Mk_Term_Antiquot<br>\nHOL-AFP: theory Missing_Permutations<br>\nHOL-AFP: theory Mpat_Antiquot<br>\nHOL-AFP: theory Named_Sorted_Thms<br>\nHOL-AFP: theory Tagged_Solver<br>\nHOL-AFP: theory Regular_Set<br>\nHOL-AFP: theory Restricted_Predicates<br>\nHOL-AFP: theory Indep_Vars<br>\nHOL-AFP: theory More_Bits_Int<br>\nHOL-AFP: theory Mk_Record_Simp<br>\nHOL-AFP: theory RingModuleFacts<br>\nHOL-AFP: theory Select_Solve<br>\nHOL-AFP: theory Seq<br>\nHOL-AFP: theory Show<br>\nHOL-AFP: theory Countable_Generator<br>\nHOL-AFP: theory Minimal_Elements<br>\nHOL-AFP: theory Regular_Exp<br>\nHOL-AFP: theory Multiset_Extension<br>\nHOL-AFP: theory Sublist<br>\nHOL-AFP: theory Poly_Deriv<br>\nHOL-AFP: theory Conjugate<br>\nHOL-AFP: theory Missing_Unsorted<br>\nHOL-AFP: theory CauchysMeanTheorem<br>\nHOL-AFP: theory Parser_Monad<br>\nHOL-AFP: theory MonoidSums<br>\nHOL-AFP: theory Show_Instances<br>\nHOL-AFP: theory Show_Real<br>\nHOL-AFP: theory Bits_Integer<br>\nHOL-AFP: theory Misc_Polynomial<br>\nHOL-AFP: theory Show_Complex<br>\nHOL-AFP: theory LinearCombinations<br>\nHOL-AFP: theory Sqrt_Babylonian_Auxiliary<br>\nHOL-AFP: theory Sturm_Library<br>\nHOL-AFP: theory Sturm_Theorem<br>\nHOL-AFP: theory Xml<br>\nHOL-AFP: theory Transitive_Closure_Impl<br>\nHOL-AFP: theory Utility<br>\nHOL-AFP: theory Order_Polynomial<br>\nHOL-AFP: theory Is_Rat_To_Rat<br>\nHOL-AFP: theory Prime_Field<br>\nHOL-AFP: theory Show_Poly<br>\nHOL-AFP: theory NthRoot_Impl<br>\nHOL-AFP: theory NDerivative<br>\nHOL-AFP: theory Relation_Interpretation<br>\nHOL-AFP: theory Transitive_Closure_List_Impl<br>\nHOL-AFP: theory Missing_List<br>\nHOL-AFP: theory Word_Miscellaneous<br>\nHOL-AFP: theory Ring_Hom<br>\nHOL-AFP: theory Prime_Factorization<br>\nHOL-AFP: theory Polynomial_Field<br>\nHOL-AFP: theory Matrix<br>\nHOL-AFP: theory Missing_Fraction_Field<br>\nHOL-AFP: theory Word<br>\nHOL-AFP: theory Sqrt_Babylonian<br>\nHOL-AFP: theory Ring_Hom_Poly<br>\nHOL-AFP: theory Explicit_Roots<br>\nHOL-AFP: theory SetIterator<br>\nHOL-AFP: theory Digraph_Basic<br>\nHOL-AFP: theory Bivariate_Polynomials<br>\nHOL-AFP: theory Xmlt<br>\nHOL-AFP: theory Complex_Roots_Real_Poly<br>\nHOL-AFP: theory Dvd_Int_Poly<br>\nHOL-AFP: theory Gauss_Lemma<br>\nHOL-AFP: theory Refine_Lib<br>\nHOL-AFP: theory Newton_Interpolation<br>\nHOL-AFP: theory SetIteratorOperations<br>\nHOL-AFP: theory Unique_Factorization_Domain<br>\nHOL-AFP: theory Autoref_Phases<br>\nHOL-AFP: theory Autoref_Tagging<br>\nHOL-AFP: theory Refine_Mono_Prover<br>\nHOL-AFP: theory Relators<br>\nHOL-AFP: theory Equivalence_Checking<br>\nHOL-AFP: theory Code_Target_Bits_Int<br>\nHOL-AFP: theory Rational_Root_Test<br>\nHOL-AFP: theory Code_Target_ICF<br>\nHOL-AFP: theory Regexp_Method<br>\nHOL-AFP: theory Gauss_Jordan<br>\nHOL-AFP: theory Show_Matrix<br>\nHOL-AFP: theory Ring_Hom_Matrix<br>\nHOL-AFP: theory Param_Tool<br>\nHOL-AFP: theory Abstract_Rewriting<br>\nHOL-AFP: theory Almost_Full<br>\nHOL-AFP: theory Param_HOL<br>\nHOL-AFP: theory Collection_Order<br>\nHOL-AFP: theory RTrancl<br>\nHOL-AFP: theory Minimal_Bad_Sequences<br>\nHOL-AFP: theory Parametricity<br>\nHOL-AFP: theory Proper_Iterator<br>\nHOL-AFP: theory Autoref_Id_Ops<br>\nHOL-AFP: theory SetIteratorGA<br>\nHOL-AFP: theory Almost_Full_Relations<br>\nHOL-AFP: theory Polynomial_Interpolation<br>\nHOL-AFP: theory Column_Operations<br>\nHOL-AFP: theory It_to_It<br>\nHOL-AFP: theory Well_Quasi_Orders<br>\nHOL-AFP: theory Gauss_Jordan_Field<br>\nHOL-AFP: theory Polynomial_Divisibility<br>\nHOL-AFP: theory Autoref_Fix_Rel<br>\nHOL-AFP: theory Derivation_Bound<br>\nHOL-AFP: theory Relative_Rewriting<br>\nHOL-AFP: theory RBT_Mapping2<br>\nHOL-AFP: theory SN_Orders<br>\nHOL-AFP: theory Decreasing_Diagrams_II_Aux<br>\nHOL-AFP: theory Kruskal<br>\nHOL-AFP: theory Word_Misc<br>\nHOL-AFP: theory Determinant<br>\nHOL-AFP: theory Square_Free_Factorization<br>\nHOL-AFP: theory Unique_Factorization_Poly<br>\nHOL-AFP: theory Autoref_Translate<br>\nHOL-AFP: theory Autoref_Relator_Interface<br>\nHOL-AFP: theory Autoref_Gen_Algo<br>\nHOL-AFP: theory Decreasing_Diagrams_II<br>\nHOL-AFP: theory Autoref_Tool<br>\nHOL-AFP: theory Uint32<br>\nHOL-AFP: theory SumSpaces<br>\nHOL-AFP: theory RBT_Set2<br>\nHOL-AFP: theory Autoref_Bindings_HOL<br>\nHOL-AFP: theory Char_Poly<br>\nHOL-AFP: theory Determinant_Impl<br>\nHOL-AFP: theory Ordered_Semiring<br>\nHOL-AFP: theory Polynomials<br>\nHOL-AFP: theory SN_Order_Carrier<br>\nHOL-AFP: theory VectorSpace<br>\nHOL-AFP: theory HashCode<br>\nHOL-AFP: theory Berlekamp_Hensel_Factorization<br>\nHOL-AFP: theory Precomputation<br>\nHOL-AFP: theory Set_Impl<br>\nHOL-AFP: theory Matrix_Comparison<br>\nHOL-AFP: theory Jordan_Normal_Form<br>\nHOL-AFP: theory Hash_Generator<br>\nHOL-AFP: theory Kronecker_Factorization<br>\nHOL-AFP: theory Hash_Instances<br>\nHOL-AFP: theory Derive<br>\nHOL-AFP: theory Automatic_Refinement<br>\nHOL-AFP: theory Idx_Iterator<br>\nHOL-AFP: theory Refine_Misc<br>\nHOL-AFP: theory RefineG_Domain<br>\nHOL-AFP: theory RefineG_Transfer<br>\nHOL-AFP: theory Show_Arctic<br>\nHOL-AFP: theory Complexity_Carrier<br>\nHOL-AFP: theory RefineG_Assert<br>\nHOL-AFP: theory RefineG_Recursion<br>\nHOL-AFP: theory Refine_Basic<br>\nHOL-AFP: theory RefineG_While<br>\nHOL-AFP: theory Rational_Factorization<br>\nHOL-AFP: theory Refine_Det<br>\nHOL-AFP: theory Matrix_Complexity<br>\nHOL-AFP: theory Refine_Heuristics<br>\nHOL-AFP: theory Refine_Leof<br>\nHOL-AFP: theory Refine_Pfun<br>\nHOL-AFP: theory Refine_While<br>\nHOL-AFP: theory Algebraic_Numbers_Prelim<br>\nHOL-AFP: theory Refine_Transfer<br>\nHOL-AFP: theory Autoref_Monadic<br>\nHOL-AFP: theory Refine_Automation<br>\nHOL-AFP: theory Refine_Foreach<br>\nHOL-AFP: theory Missing_VectorSpace<br>\nHOL-AFP: theory VS_Connect<br>\nHOL-AFP: theory Sturm_Rat<br>\nHOL-AFP: theory Refine_Monadic<br>\nHOL-AFP: theory Gen_Iterator<br>\nHOL-AFP: theory Iterator<br>\nHOL-AFP: theory ICF_Spec_Base<br>\nHOL-AFP: theory RBT_add<br>\nHOL-AFP: theory Gram_Schmidt<br>\nHOL-AFP: theory Matrix_Kernel<br>\nHOL-AFP: theory MapSpec<br>\nHOL-AFP: theory SetSpec<br>\nHOL-AFP: theory Mapping_Impl<br>\nHOL-AFP: theory Compare_Complex<br>\nHOL-AFP: theory Matrix_IArray_Impl<br>\nHOL-AFP: theory Schur_Decomposition<br>\nHOL-AFP: theory Jordan_Normal_Form_Uniqueness<br>\nHOL-AFP: theory Map_To_Mapping<br>\nHOL-AFP: theory Resultant<br>\nHOL-AFP: theory Containers<br>\nHOL-AFP: theory Compatibility_Containers_Regular_Sets<br>\nHOL-AFP: theory SetIteratorCollectionsGA<br>\nHOL-AFP: theory MapGA<br>\nHOL-AFP: theory SetGA<br>\nHOL-AFP: theory Jordan_Normal_Form_Existence<br>\nHOL-AFP: theory RBTMapImpl<br>\nHOL-AFP: theory Algebraic_Numbers<br>\nHOL-AFP: theory Real_Algebraic_Numbers<br>\nHOL-AFP: theory SetByMap<br>\nHOL-AFP: theory RBTSetImpl<br>\nHOL-AFP: theory Matrix_Impl<br>\nHOL-AFP: theory RBT_Map_Set_Extension<br>\nHOL-AFP: theory Transitive_Closure_RBT_Impl<br>\nHOL-AFP: theory Real_Roots<br>\nHOL-AFP: theory Show_Real_Alg<br>\nHOL-AFP: theory Show_Real_Precise<br>\nHOL-AFP: theory Complex_Algebraic_Numbers<br>\nTiming HOL-AFP (12 threads, 231.218s elapsed time, 2018.896s cpu time,<br>\n437.292s GC time, factor 8.73)<br>\nHOL-AFP FAILED</p>",
        "id": 294668063,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661172469
    },
    {
        "content": "<p>From: \"C. Diekmann\" &lt;<a href=\"mailto:diekmann@in.tum.de\">diekmann@in.tum.de</a>&gt;<br>\n2016-02-03 21:54 GMT+01:00 Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;:</p>\n<blockquote>\n<p>On Wed, 3 Feb 2016, C. Diekmann wrote:</p>\n<blockquote>\n<p>I'm not getting the \"bulky 64bit version\" warning when i start jEdit or<br>\nbuild, so I guess that I'm using the 32bit library.</p>\n</blockquote>\n<blockquote>\n<p>Is Isabelle2016 still issuing a warning on startup if the 64bit libraries<br>\nare used?</p>\n</blockquote>\n<p>Not any longer.  This warning usually showed up in unexpected situations,<br>\nand did not show up when the standard Isabelle application wrapper was used.</p>\n<p>There were various changes in the auto-configuration of 32bit vs. 64bit<br>\nplatforms, both for the ML system and the JVM.  You now get this information<br>\nin the title of the build dialog on the first startup, but it is possible to<br>\noverlook it. (And sometimes people think that 64bit is always better than<br>\n32bit.)</p>\n</blockquote>\n<p>Is there a way to check my setup after the first startup?</p>\n<blockquote>\n<p>I was thinking of an additional warning dialog for a situation where the<br>\noption ML_system_64 is not set (i.e. the default of Isabelle), but the<br>\nresult forced to x86_64-linux due to lack of 32bit g++ libraries (i.e. the<br>\ndefault of most Linux installations).  I did not do it, because it may cause<br>\npuzzlement to new users or casual users, e.g. of introductory Isabelle<br>\ntutorials.  The difference is only relevant to really big applications.</p>\n<p>Isabelle power users, especially on Linux, need to do some more fine-tuning<br>\nto get various side-conditions right.  The details are listed here:<br>\n<a href=\"http://isabelle.in.tum.de/website-Isabelle2016-RC3/installation.html\">http://isabelle.in.tum.de/website-Isabelle2016-RC3/installation.html</a></p>\n</blockquote>\n<p>Where can I find the documentation how I can set the ML settings such<br>\nthat I can build Collections again?</p>\n<blockquote>\n<p>For more than 3 years big Isabelle applications are usually run in constant space of approx. 3.5 GB, i.e. the maximum on 32bit.</p>\n</blockquote>\n<p>If the build of a session image fails with an out of memory error, is<br>\nit possible to do the build again with only one core/process to limit<br>\nthe memory usage to 3.5GB?</p>\n<p>Cheers,<br>\n  Cornelius</p>",
        "id": 294668131,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661172488
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nOn Thu, 4 Feb 2016, C. Diekmann wrote:</p>\n<blockquote>\n<p>Is there a way to check my setup after the first startup?</p>\n</blockquote>\n<p>E.g. like this:</p>\n<p>ML \"open ML_System\"</p>\n<blockquote>\n<p>Where can I find the documentation how I can set the ML settings such<br>\nthat I can build Collections again?</p>\n</blockquote>\n<p><a href=\"http://isabelle.in.tum.de/installation.html\">http://isabelle.in.tum.de/installation.html</a> / Linux / Requirements:</p>\n<p>32-bit C/C++ standard libraries on 64-bit Linux (optional, for improved performance of Poly/ML)</p>\n<p>The details depend on the Linux distribution. On Ubuntu it is probably <br>\njust the \"g++-multilib\" package.</p>\n<blockquote>\n<p>If the build of a session image fails with an out of memory error, is it <br>\npossible to do the build again with only one core/process to limit the <br>\nmemory usage to 3.5GB?</p>\n</blockquote>\n<p>You need to provide the 32-bit C/C++ standard libraries first, and then <br>\nrestart the whole application.  This allows to use the 32-bit version of <br>\nPoly/ML, which is separate from the 64-bit version.</p>\n<p>Afterwards you can switch back to 64-bit via Plugin Options / Isabelle / <br>\nGeneral / ML System 64, although that is practically irrelevant on only <br>\n8GB.</p>\n<p>Makarius</p>",
        "id": 294668158,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661172499
    },
    {
        "content": "<p>From: Matthew Fernandez &lt;<a href=\"mailto:matthew.fernandez@nicta.com.au\">matthew.fernandez@nicta.com.au</a>&gt;<br>\nI think Cornelius was asking for a way to limit parallelism while still using 64-bit Poly/ML in order to reduce the<br>\nmaximum amount of memory required over the course of a build. If so, then yes:</p>\n<p>isabelle build -o threads=1 ...</p>\n<hr>\n<p>The information in this e-mail may be confidential and subject to legal professional privilege and/or copyright. National ICT Australia Limited accepts no liability for any damage caused by this email or its attachments.</p>",
        "id": 294668172,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661172505
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nI have experimented with this a bit in the vicinity of Isabelle2016-RC. <br>\nThe precise versions are as follows:</p>\n<p>IsaFoR:   61d9e42449c2<br>\nIsabelle: dfb70abaa3f0<br>\nAFP:      522c6c87f51e</p>\n<p>HOL-AFP still works with x86-linux, leading to a heap image of 577M.  Here <br>\nare more details:</p>\n<p>ML_PLATFORM=\"x86-linux\"<br>\nML_OPTIONS=\"-H 1500 --gcthreads 12\"<br>\nisabelle build -b -o threads=12<br>\nFinished HOL-AFP (0:06:21 elapsed time, 0:47:49 cpu time, factor 7.53)</p>\n<p>ML_PLATFORM=\"x86-linux\"<br>\nML_OPTIONS=\"-H 1500 --gcthreads 6\"<br>\nisabelle build -b -o threads=6<br>\nFinished HOL-AFP (0:07:34 elapsed time, 0:37:10 cpu time, factor 4.91)</p>\n<p>Trying \"make all\" of IsaFoR produces this result:</p>\n<p>Building QTRS ...<br>\nFinished QTRS (0:02:02 elapsed time, 0:07:36 cpu time, factor 3.73)<br>\nBuilding Check-NT ...<br>\nFinished Check-NT (0:05:17 elapsed time, 0:22:26 cpu time, factor 4.24)<br>\nBuilding Processors ...</p>\n<p>Processors FAILED<br>\nML&gt; Exception- SysErr (\"Cannot allocate memory\", SOME ENOMEM) raised<br>\nProof-Checker CANCELLED<br>\nCeTA CANCELLED<br>\nCode CANCELLED</p>\n<p>Makarius</p>",
        "id": 294668378,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661172592
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nHere are the results of further experiments.  For Isabelle2016, I've <br>\nintroduced certain \"trim_context\" operations that are mentioned in the <br>\nNEWS as follows:</p>\n<ul>\n<li>Heap images are 10-15% smaller due to less wasteful persistent theory<br>\ncontent (using ML type theory_id instead of theory);</li>\n</ul>\n<p>For HOL-AFP this yields on x86-linux:</p>\n<p>Finished HOL (0:02:58 elapsed time, 0:10:58 cpu time, factor 3.69)      218M<br>\nFinished HOL-Lib (0:01:24 elapsed time, 0:05:45 cpu time, factor 4.10)  281M<br>\nFinished HOL-AFP (0:07:37 elapsed time, 0:37:15 cpu time, factor 4.89)  577M</p>\n<p>Disabling the mechanism here <br>\n<a href=\"https://bitbucket.org/isabelle_project/isabelle-release/src/f4baefee57768cf00b1a9e003770c7573b5d7378/src/Pure/thm.ML?at=default&amp;fileviewer=file-view-default#thm.ML-410\">https://bitbucket.org/isabelle_project/isabelle-release/src/f4baefee57768cf00b1a9e003770c7573b5d7378/src/Pure/thm.ML?at=default&amp;fileviewer=file-view-default#thm.ML-410</a><br>\nyields the following:</p>\n<p>Finished HOL (0:03:06 elapsed time, 0:11:21 cpu time, factor 3.66)      245M<br>\nFinished HOL-Lib (0:01:26 elapsed time, 0:05:54 cpu time, factor 4.11)  315M<br>\nFinished HOL-AFP (0:08:30 elapsed time, 0:39:52 cpu time, factor 4.69)  643M</p>\n<p>Interestingly, the main HOL image has the same size of 218M in <br>\nIsabelle2015.  So the extra space provided by the system has been exactly <br>\nconsumed by the application -- this is a perfectly normal situation in <br>\nIsabelle development.</p>\n<p>I guess that on average bigger applications did not grow that much.  For <br>\nHOL-AFP, though, there seems to be a substantial increase in imports <br>\ncompared to Isabelle2015, but I did not check this systematically.</p>\n<p>Makarius</p>",
        "id": 294668465,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661172610
    },
    {
        "content": "<p>From: \"C. Diekmann\" &lt;<a href=\"mailto:diekmann@in.tum.de\">diekmann@in.tum.de</a>&gt;<br>\nI'm happy to tell that Collections builds again with RC4 on my 8GB RAM<br>\nlaptop. Is this just a coincidence or did you fine-tune something?</p>\n<p>Best,<br>\n  Cornelius</p>",
        "id": 294668584,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661172660
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nI did not change anything.</p>\n<p>It was working all the time in all my tests during this discussion.</p>\n<p>Makarius</p>",
        "id": 294668615,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661172671
    }
]