[
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nI am surprised that the above did work with Isabelle2016-1 -- apparently<br>\nby accident.</p>\n<p>When you unpack as root, the permissions are usually taken from the<br>\ntar.gz and are thus somewhat erratic. If we assume that everything is<br>\nnicely normalized to root, e.g. via \"chmod -R root:root\" on the<br>\nresulting ISABELLE_HOME directory, a non-root user should not be able to<br>\nwrite into ISABELLE_HOME/heaps as is required when starting the main<br>\napplication (this is due to the built-in \"isabelle build -s\").</p>\n<p>I've tried this briefly on my Ubuntu 16.04.2 LTS, and it works uniformly<br>\nas expected, i.e. cannot start the unpacked Isabelle application because<br>\nthe heap directory cannot be created by non-root.</p>\n<p>Of course, you should never run huge application agglomerates like<br>\nIsabelle as root. Instead it should work like this:</p>\n<p>* Unpack and run the application as non-root in some arbitrary user<br>\ndirectory.</p>\n<p>* Copy the result as root, e.g. \"cp -R Isabelle2016-1 /opt\"</p>\n<p>Option -R is sufficient to preserve potential symlinks but normalizes<br>\nall permissions and owner in the standard way for root.</p>\n<p>Afterwards it should be possible for any user to run the application<br>\nfrom /opt. If that user is only you, you can actually skip the<br>\ncopy-to-/opt part altogether and keep things in a regular user<br>\ndirectory. This scheme has the advantage that the system can be<br>\nexchanged underneath without having to put the application back in place<br>\nafterwards.</p>\n<p>Another note: I see polyml-5.6_x86_64-linux above, but for most<br>\npractical purposes the x86-linux version performs better. You merely<br>\nneed to ensure that the 32-bit C/C++ standard libraries are installed.</p>\n<p>Makarius</p>",
        "id": 294717578,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661183787
    },
    {
        "content": "<p>From: Dominique Unruh &lt;<a href=\"mailto:unruh@ut.ee\">unruh@ut.ee</a>&gt;<br>\nDear all,</p>\n<p>when I install Isabelle (unpacking the Linux archive into /opt) as root,<br>\nand then run Isabelle a non-root using<br>\n\"/opt/Isabelle2017-RC0/Isabelle2017-RC0\", jedit starts up, but brings a<br>\ndialog box with the following error message:</p>\n<p>Failed to create directory:<br>\n\"/opt/Isabelle2017-RC0/heaps/polyml-5.6_x86_64-linux/log\"</p>\n<p>In 2016-1, it was possible to install and run Isabelle this way.</p>\n<p>If I make /opt/Isabelle2017-RC0 readwrite for the non-root user, everything<br>\nworks.</p>\n<p>Best wishes,<br>\nDominique.</p>",
        "id": 294717667,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661183812
    },
    {
        "content": "<p>From: Dominique Unruh &lt;<a href=\"mailto:unruh@ut.ee\">unruh@ut.ee</a>&gt;</p>\n<blockquote>\n<p>I am surprised that the above did work with Isabelle2016-1 -- apparently<br>\nby accident.<br>\n</p>\n</blockquote>\n<p>Neither does it for me, now. But I think I figured out what it was that<br>\nconfused me.</p>\n<p>If I perform the following steps:</p>\n<ul>\n<li>Install read-only in /opt</li>\n<li>Run /opt/Isabelle2017-RC0/Isabelle2017-RC0<br>\nThen I get the error (because the build process is invoked with -s, I<br>\nguess).</li>\n</ul>\n<p>However, if I perform the following steps:</p>\n<ul>\n<li>Install read-only in /opt</li>\n<li>Run /opt/Isabelle2017-RC0/bin/isabelle jedit<br>\nThen building proceeds (with heaps in ~/.isabelle)</li>\n</ul>\n<p>Thus the two ways of invoking jEdit have different defaults, which is<br>\nconfusing, I think.<br>\n(Also, I couldn't find documentation for the<br>\n/opt/Isabelle2017-RC0/Isabelle2017-RC0 executable to see what the defaults<br>\nare.)</p>\n<blockquote>\n<p>Another note: I see polyml-5.6_x86_64-linux above, but for most<br>\npractical purposes the x86-linux version performs better. You merely<br>\nneed to ensure that the 32-bit C/C++ standard libraries are installed.</p>\n</blockquote>\n<p>I installed the package \"libc6-i386\" in Ubuntu 17.04. (Via the normal \"sudo<br>\napt install libc6-i386\".) Isabelle still uses x64 by default.</p>\n<p>Best wishes,<br>\nDominique.</p>\n<blockquote>\n<p>When you unpack as root, the permissions are usually taken from the<br>\ntar.gz and are thus somewhat erratic. If we assume that everything is<br>\nnicely normalized to root, e.g. via \"chmod -R root:root\" on the<br>\nresulting ISABELLE_HOME directory, a non-root user should not be able to<br>\nwrite into ISABELLE_HOME/heaps as is required when starting the main<br>\napplication (this is due to the built-in \"isabelle build -s\").</p>\n<p>I've tried this briefly on my Ubuntu 16.04.2 LTS, and it works uniformly<br>\nas expected, i.e. cannot start the unpacked Isabelle application because<br>\nthe heap directory cannot be created by non-root.</p>\n<p>Of course, you should never run huge application agglomerates like<br>\nIsabelle as root. Instead it should work like this:</p>\n<p>* Unpack and run the application as non-root in some arbitrary user<br>\ndirectory.</p>\n<p>* Copy the result as root, e.g. \"cp -R Isabelle2016-1 /opt\"</p>\n<p>Option -R is sufficient to preserve potential symlinks but normalizes<br>\nall permissions and owner in the standard way for root.</p>\n<p>Afterwards it should be possible for any user to run the application<br>\nfrom /opt. If that user is only you, you can actually skip the<br>\ncopy-to-/opt part altogether and keep things in a regular user<br>\ndirectory. This scheme has the advantage that the system can be<br>\nexchanged underneath without having to put the application back in place<br>\nafterwards.</p>\n<p>Another note: I see polyml-5.6_x86_64-linux above, but for most<br>\npractical purposes the x86-linux version performs better. You merely<br>\nneed to ensure that the 32-bit C/C++ standard libraries are installed.</p>\n<p>Makarius<br>\n</p>\n</blockquote>",
        "id": 294717694,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661183821
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nOn 29/08/17 10:18, Dominique Unruh wrote:</p>\n<blockquote>\n<p>If I perform the following steps:\n* Install read-only in /opt\n* Run /opt/Isabelle2017-RC0/Isabelle2017-RC0<br>\nThen I get the error (because the build process is invoked with -s, I<br>\nguess).</p>\n<p>However, if I perform the following steps:\n* Install read-only in /opt\n* Run /opt/Isabelle2017-RC0/bin/isabelle jedit<br>\nThen building proceeds (with heaps in ~/.isabelle)</p>\n<p>Thus the two ways of invoking jEdit have different defaults, which is<br>\nconfusing, I think.<br>\n(Also, I couldn't find documentation for the<br>\n/opt/Isabelle2017-RC0/Isabelle2017-RC0 executable to see what the<br>\ndefaults are.)</p>\n</blockquote>\n<p>The latter is occasionally called \"main Isabelle desktop application\",<br>\nbut not documented further. It is the first thing that most users<br>\nencounter and usually run on the spot. Thus the default logic image will<br>\nbecome part of the application directory (due to the implicit -s option<br>\nthat is only documented as part of \"isabelle jedit\" in the \"jedit\"<br>\nmanual, \"isabelle build\" in the \"system manual).</p>\n<p>Very few people ever notice these fine points, which is an indication<br>\nthat it usually works without further ado.</p>\n<p>The extra aspect of read-only installation in a system directory has<br>\nalways been morally supported, but is seen extremely rarely these days,<br>\nand system administrators usually get it wrong one way or the other.<br>\nMaybe I should write a note how to do it in the manual, so that I can<br>\npoint to that next time.</p>\n<blockquote>\n<blockquote>\n<p>Another note: I see polyml-5.6_x86_64-linux above, but for most<br>\npractical purposes the x86-linux version performs better. You merely<br>\nneed to ensure that the 32-bit C/C++ standard libraries are installed.</p>\n</blockquote>\n<p>I installed the package \"libc6-i386\" in Ubuntu 17.04. (Via the normal<br>\n\"sudo apt install libc6-i386\".) Isabelle still uses x64 by default.</p>\n</blockquote>\n<p>On Ubuntu the relevant library packages contain the name \"multilib\",<br>\ne.g. \"g++-multilib\" or \"g++5-multilib\". I never know which ones are<br>\nreally required (this is also changing over the years), but merely<br>\ninstall some of them at will until the 32bit \"poly\" executable works.</p>\n<p>Makarius</p>",
        "id": 294717760,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661183836
    },
    {
        "content": "<p>From: Lars Hupel &lt;<a href=\"mailto:hupel@in.tum.de\">hupel@in.tum.de</a>&gt;<br>\nMore specifically, you can install lib32stdc++6 on Ubuntu (both 14.04 and 16.04 IIRC) and get just the required library.</p>\n<p>Cheers<br>\nLars</p>",
        "id": 294717781,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661183842
    }
]