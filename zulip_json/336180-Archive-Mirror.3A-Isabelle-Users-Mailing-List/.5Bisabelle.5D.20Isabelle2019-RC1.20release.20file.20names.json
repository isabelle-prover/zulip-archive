[
    {
        "content": "<p>From: Lars Hupel &lt;<a href=\"mailto:hupel@in.tum.de\">hupel@in.tum.de</a>&gt;<br>\nWhy did all the file names of the tarballs change? This breaks automatic<br>\ndownload and extraction of isabellectl. I'm assuming the following files<br>\nexist:</p>\n<p>Isabelle&lt;identifier&gt;_linux.tar.gz<br>\nIsabelle&lt;identifier&gt;_macos.tar.gz<br>\nIsabelle&lt;identifier&gt;_windows.tar.gz</p>\n<p>In RC0 they were still present (like for 2016–2018).</p>",
        "id": 294756188,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661197590
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nThe former tar.gz files used to be an internal \"interface\" between<br>\nvarious old shell scripts to create the regular application bundles for<br>\nend-users. They were publicly available for some time, to make it<br>\npossible to access the content by other tools; this now works<br>\ndifferently as shown below.</p>\n<p>For Isabelle2019, build_release now happens in Isabelle/Scala without<br>\nodd shell scripts and intermediate archives. The app bundles have become<br>\nmuch larger (due to Java 11 and bundled HOL image), so I wanted to avoid<br>\nredundant copies of material. I have also started to experiment with xz<br>\ninstead of gz: infortunately, macOS seems to lack xz by default; in<br>\nfurther testing we might see reasons to switch linux back to gz, too.</p>\n<p>In Isabelle2019-RC1 the situation of app bundles is as follows, together<br>\nwith subsequent tool invocations to get the directory content in batch mode.</p>\n<p>* linux:<br>\n<a href=\"https://isabelle.in.tum.de/website-Isabelle2019-RC1/dist/Isabelle2019-RC1_linux.tar.xz\">https://isabelle.in.tum.de/website-Isabelle2019-RC1/dist/Isabelle2019-RC1_linux.tar.xz</a></p>\n<p>tar -xJf Isabelle2019-RC1_linux.tar.xz</p>\n<p>* macos:<br>\n<a href=\"https://isabelle.in.tum.de/website-Isabelle2019-RC1/dist/Isabelle2019-RC1_macos.tar.gz\">https://isabelle.in.tum.de/website-Isabelle2019-RC1/dist/Isabelle2019-RC1_macos.tar.gz</a></p>\n<p>tar -xzf Isabelle2019-RC1_macos.tar.gz</p>\n<p>* windows:<br>\n<a href=\"https://isabelle.in.tum.de/website-Isabelle2019-RC1/dist/Isabelle2019-RC1.exe\">https://isabelle.in.tum.de/website-Isabelle2019-RC1/dist/Isabelle2019-RC1.exe</a></p>\n<p>7z x Isabelle2019-RC1.exe</p>\n<p>Recall that on Windows, the first invocation of Isabelle_System.init()<br>\nwill update file permissions and symlinks via Cygwin.init(). For a<br>\nread-only installation, this needs to be done once after unpacking.</p>\n<p>Makarius</p>",
        "id": 294756303,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661197652
    },
    {
        "content": "<p>From: Lars Hupel &lt;<a href=\"mailto:hupel@in.tum.de\">hupel@in.tum.de</a>&gt;</p>\n<blockquote>\n<p>For Isabelle2019, build_release now happens in Isabelle/Scala without<br>\nodd shell scripts and intermediate archives. The app bundles have <br>\nbecome<br>\nmuch larger (due to Java 11 and bundled HOL image), so I wanted to <br>\navoid<br>\nredundant copies of material.</p>\n</blockquote>\n<p>Do we have a space problem on the servers?</p>\n<blockquote>\n<p>In Isabelle2019-RC1 the situation of app bundles is as follows, <br>\ntogether<br>\nwith subsequent tool invocations to get the directory content in batch <br>\nmode.</p>\n</blockquote>\n<p>Just like you I'm trying to stay within Scala as much as possible, <br>\nwithout having to resort to command-line tools, whose presence I cannot <br>\nassume. I currently only have to care about Gzip. Newer Apache Commons <br>\nCompress versions may also support Xz and that odd Windows EXE format, <br>\nbut I haven't tried that out yet.</p>\n<blockquote>\n<p>Recall that on Windows, the first invocation of Isabelle_System.init()<br>\nwill update file permissions and symlinks via Cygwin.init(). For a<br>\nread-only installation, this needs to be done once after unpacking.</p>\n</blockquote>\n<p>isabellectl takes care of that. So far it worked with very little <br>\nproblems on Windows, using a uniform extraction mechanism from the <br>\ntarball.</p>",
        "id": 294756315,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661197657
    },
    {
        "content": "<p>From: Lars Hupel &lt;<a href=\"mailto:hupel@in.tum.de\">hupel@in.tum.de</a>&gt;<br>\nI've just spoken to a contributor of Commons Compress who told me that <br>\nstreaming unpacking for 7z is impossible. This is very inconvenient.</p>",
        "id": 294756363,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661197681
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nOn 07/05/2019 09:37, Makarius wrote:</p>\n<blockquote>\n<p>For Isabelle2019, build_release now happens in Isabelle/Scala without<br>\nodd shell scripts and intermediate archives. The app bundles have become<br>\nmuch larger (due to Java 11 and bundled HOL image), so I wanted to avoid<br>\nredundant copies of material. I have also started to experiment with xz<br>\ninstead of gz: infortunately, macOS seems to lack xz by default; in<br>\nfurther testing we might see reasons to switch linux back to gz, too.</p>\n</blockquote>\n<p>Linux and macOS are now both back to gz, since xz is too slow and<br>\ncumbersome, see <a href=\"https://isabelle.in.tum.de/repos/isabelle/rev/7c55ea37fbf7\">https://isabelle.in.tum.de/repos/isabelle/rev/7c55ea37fbf7</a></p>\n<blockquote>\n<p>* windows:<br>\n<a href=\"https://isabelle.in.tum.de/website-Isabelle2019-RC1/dist/Isabelle2019-RC1.exe\">https://isabelle.in.tum.de/website-Isabelle2019-RC1/dist/Isabelle2019-RC1.exe</a></p>\n<p>7z x Isabelle2019-RC1.exe</p>\n</blockquote>\n<p>This still works: you could bundle 7z.exe to make it self-contained.</p>\n<p>An alternative is to use the self-extractor with option -ai (and<br>\nprobably -gm2) as explained in<br>\n<a href=\"https://github.com/chrislake/7zsfxmm/wiki/Switches\">https://github.com/chrislake/7zsfxmm/wiki/Switches</a></p>\n<p>This requires an updated version of Isabelle.exe according to<br>\n<a href=\"https://isabelle.in.tum.de/repos/isabelle/rev/4ce07be8ba17\">https://isabelle.in.tum.de/repos/isabelle/rev/4ce07be8ba17</a> -- in approx.<br>\n2h there should be a new version at<br>\n<a href=\"https://isabelle.sketis.net/devel/release_snapshot\">https://isabelle.sketis.net/devel/release_snapshot</a></p>\n<p>One remaining question is how to do it robustly in a headless<br>\nenvironment. With the Cygwin ssh server on Windows, I managed like this:</p>\n<p>run -wait ./Isabelle_09-May-2019.exe -ai -gm2</p>\n<p>Without that, the Java splash screen could cause problems, but I don't<br>\nknow how to disable that without creating an alternative executable --<br>\nwhich is definitely beyond the present ambition on such rare<br>\napplications of batch-mode installation.</p>\n<p>Makarius</p>",
        "id": 294756454,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661197712
    },
    {
        "content": "<p>From: Lars Hupel &lt;<a href=\"mailto:hupel@in.tum.de\">hupel@in.tum.de</a>&gt;<br>\nTo quote your latest CICM paper:</p>\n<p>The “download–unpack–run” experience of Isabelle/PIDE needs fine-tuning <br>\nfor first-time users. In particular, AFP needs to be included in this, <br>\nto avoid manual intervention with session ROOTS and ROOT files.</p>\n<p>isabellectl has been providing just that experience for many years now.</p>\n<p>The big advantage is that isabellectl is decidedly not part of the <br>\nIsabelle, which means it can bootstrap various Isabelle distributions <br>\n(up to 2018, after which you changed the packaging format) assuming any <br>\nJRE installation.</p>",
        "id": 294756465,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661197718
    },
    {
        "content": "<p>From: Lars Hupel &lt;<a href=\"mailto:hupel@in.tum.de\">hupel@in.tum.de</a>&gt;<br>\nNone of these problems existed with the tarball. I reckon I'll just drop <br>\nsupport for auto installation on Windows; these workarounds are just too <br>\ncumbersome.</p>",
        "id": 294756479,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661197724
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nThis is all a bit alien to Isabelle system integration, and probably the<br>\nreason why I don't understand it.</p>\n<p>Makarius</p>",
        "id": 294756510,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661197736
    },
    {
        "content": "<p>From: Dominique Unruh &lt;<a href=\"mailto:unruh@ut.ee\">unruh@ut.ee</a>&gt;<br>\nHi,</p>\n<p>as a user of Lars' libisabelle, I would like to chime in here and \"vote\" <br>\nfor reincluding the tarballs on the webpage.</p>\n<p>Tar seems to be the only widespread format that can be downloaded and <br>\nunpacked without temporary storage which might be useful also for other <br>\napplications which try to automatically install Isabelle.</p>\n<p>My suggestion be to simply include both the tarballs and the other <br>\ncompressed formats on the webserver. Unless the webserver has a very <br>\nsmall storage allowance, that should make very little difference to the <br>\nserver.</p>\n<p>That way it should work for everyone.</p>\n<p>Best wishes,<br>\nDominique.</p>",
        "id": 294756547,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661197755
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nExcept for Windows, where self-extracting archives are standard.</p>\n<p>I have already explained that this is also a matter of minimality: there<br>\nwere historic reasons to have redundant tars lying around, and these no<br>\nlonger exist. I am not going to maintain legacy features.</p>\n<p>The concept of isabellectl by Lars appears to be to level-out<br>\ndifferences over various Isabelle distributions: he merely needs to<br>\nfollow these natural changes.</p>\n<p>As for the official Isabelle distribution and release policy: there is<br>\nonly one latest version, and everything else is historic. (It may still<br>\nbe discussed informally in this mailing list, but there is no official<br>\nsupport for it.)</p>\n<p>This is vital to keep Isabelle going with a fraction of the normal<br>\nresource requirements for such a huge project. It is in the best<br>\ninterest of Isabelle users to stay faithful to the principles behind<br>\nIsabelle.</p>\n<p>Makarius</p>",
        "id": 294756567,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661197761
    }
]