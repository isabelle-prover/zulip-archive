[
    {
        "content": "<p>From: \"Eugene W. Stark\" &lt;<a href=\"mailto:isabelle-users@starkeffect.com\">isabelle-users@starkeffect.com</a>&gt;<br>\nI encounter things like this frequently, and it is probably not new to Isabelle2019-RC2,<br>\nbut it is very rare that I can extract the example from what I am doing in a form that might<br>\nbe helpful to someone trying to find and fix it.</p>\n<p>I was using \"try\" to search for a proof of the first of 4 subgoals (see below, only the<br>\nfirst is included).  There are a number of assumptions in the context, which were originally<br>\nintroduced with \"using\" and then possibly modified by \"apply simp_all\".</p>\n<p>When I tried the Isar proof that sledgehammer proposed, I found that it failed because the<br>\nstatement to be proved didn't refine any pending goal.  After investigation, I found that<br>\nthe following had been assumed:</p>\n<p>assume a6: \"⋀μ ν. arrow_of_spans (⋅) μ ∧ arrow_of_spans (⋅) ν ∧ Dom ν = Cod μ ⟹<br>\n                     ν ∙ μ = ⦇Chn = Chn ν ⋅ Chn μ, Dom = Dom μ, Cod = Cod ν⦈\"</p>\n<p>whereas what should have been assumed was:</p>\n<p>assume a6: \"⋀ν μ. arrow_of_spans (⋅) μ ∧ arrow_of_spans (⋅) ν ∧ Dom ν = Cod μ ⟹<br>\n                     ν ∙ μ = ⦇Chn = Chn ν ⋅ Chn μ, Dom = Dom μ, Cod = Cod ν⦈\"</p>\n<p>the difference apparently being in the order of the quantified variables.</p>\n<p>So either whatever is spitting out this assumption has incorrectly reordered the quantified<br>\nvariables, or else whatever is matching the statement to be proved against the pending goal<br>\nis sensitive to the order of the variables when it shouldn't be.</p>\n<p>- Gene Stark</p>\n<p>(Context below)</p>\n<p>proof (prove)<br>\ngoal (4 subgoals):</p>\n<ol>\n<li>Dom ((μ ⋆ ν ⋆ π) ⋆ ρ) = Cod (⦇Chn = μνπ.chine_assoc, Dom = Dom ((μ ⋆ ν) ⋆ π), Cod = Cod (μ ⋆ ν ⋆ π)⦈ ⋆ ρ) ⟹<br>\n    ¬ arrow_of_spans (⋅)<br>\n        ⦇Chn = μ_νπ_ρ.chine_assoc ⋅<br>\n               chine_hcomp ⦇Chn = μνπ.chine_assoc, Dom = Dom ((μ ⋆ ν) ⋆ π), Cod = Cod (μ ⋆ ν ⋆ π)⦈ ρ,<br>\n           Dom = Dom (⦇Chn = μνπ.chine_assoc, Dom = Dom ((μ ⋆ ν) ⋆ π), Cod = Cod (μ ⋆ ν ⋆ π)⦈ ⋆ ρ),<br>\n           Cod = Cod (μ ⋆ (ν ⋆ π) ⋆ ρ)⦈ ⟹<br>\n    «μ ⋆<br>\n     ⦇Chn = νπρ.chine_assoc, Dom = Dom ((ν ⋆ π) ⋆ ρ),<br>\n        Cod = Cod (ν ⋆ π ⋆ ρ)⦈ : μ ⋆ (ν ⋆ π) ⋆ ρ ⇒ μ ⋆ ν ⋆ π ⋆ ρ» ⟹<br>\n    «⦇Chn = μ_νπ_ρ.chine_assoc,<br>\n        Dom = Cod (⦇Chn = μνπ.chine_assoc, Dom = Dom ((μ ⋆ ν) ⋆ π), Cod = Cod (μ ⋆ ν ⋆ π)⦈ ⋆ ρ),<br>\n        Cod = Cod (μ ⋆ (ν ⋆ π) ⋆ ρ)⦈ : (μ ⋆ ν ⋆ π) ⋆ ρ ⇒ μ ⋆ (ν ⋆ π) ⋆ ρ» ⟹<br>\n    «⦇Chn = μνπ.chine_assoc, Dom = Dom ((μ ⋆ ν) ⋆ π), Cod = Cod (μ ⋆ ν ⋆ π)⦈ ⋆<br>\n     ρ : ((μ ⋆ ν) ⋆ π) ⋆ ρ ⇒ (μ ⋆ ν ⋆ π) ⋆ ρ» ⟹<br>\n    Chn (μ ⋆ ⦇Chn = νπρ.chine_assoc, Dom = Dom ((ν ⋆ π) ⋆ ρ), Cod = Cod (ν ⋆ π ⋆ ρ)⦈) =<br>\n    chine_hcomp μ ⦇Chn = νπρ.chine_assoc, Dom = Dom ((ν ⋆ π) ⋆ ρ), Cod = Cod (ν ⋆ π ⋆ ρ)⦈ ⟹<br>\n    Chn (⦇Chn = μνπ.chine_assoc, Dom = Dom ((μ ⋆ ν) ⋆ π), Cod = Cod (μ ⋆ ν ⋆ π)⦈ ⋆ ρ) =<br>\n    chine_hcomp ⦇Chn = μνπ.chine_assoc, Dom = Dom ((μ ⋆ ν) ⋆ π), Cod = Cod (μ ⋆ ν ⋆ π)⦈ ρ ⟹<br>\n    (⋀μ. arr μ = arrow_of_spans (⋅) μ) ⟹<br>\n    (⋀ν μ. arrow_of_spans (⋅) (ν ∙ μ) = (arrow_of_spans (⋅) μ ∧ arrow_of_spans (⋅) ν ∧ Dom ν = Cod μ)) ⟹<br>\n    (⋀ν μ. arrow_of_spans (⋅) μ ∧ arrow_of_spans (⋅) ν ∧ Dom ν = Cod μ ⟹<br>\n            ν ∙ μ = ⦇Chn = Chn ν ⋅ Chn μ, Dom = Dom μ, Cod = Cod ν⦈) ⟹<br>\n    (⋀f a b g c.<br>\n        «f : a ⇒ b» ⟹ «g : b ⇒ c» ⟹ arrow_of_spans (⋅) f ∧ arrow_of_spans (⋅) g ∧ Dom g = Cod f) ⟹<br>\n    C.null =<br>\n    chine_hcomp μ ⦇Chn = νπρ.chine_assoc, Dom = Dom ((ν ⋆ π) ⋆ ρ), Cod = Cod (ν ⋆ π ⋆ ρ)⦈ ⋅<br>\n    μ_νπ_ρ.chine_assoc ⋅ chine_hcomp ⦇Chn = μνπ.chine_assoc, Dom = Dom ((μ ⋆ ν) ⋆ π), Cod = Cod (μ ⋆ ν ⋆ π)⦈ ρ</li>\n</ol>",
        "id": 294757107,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661197995
    }
]