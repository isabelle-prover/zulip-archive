[
    {
        "content": "<p>From: Alexander Krauss &lt;<a href=\"mailto:krauss@in.tum.de\">krauss@in.tum.de</a>&gt;<br>\nHi all,</p>\n<p>This might just be a misunderstanding, but it is also something that<br>\nwould probably go unnoticed by automated tests when broken, so I am<br>\nreporting this here as a possible regression.</p>\n<p>I am failing to get a meaningful exception trace out of the system. Here<br>\nis a small example which is typical for real-life debugging situations.</p>\n<p>ML ‹</p>\n<p>(* Raises exception Empty eventually. Recursive to avoid inlining. *)<br>\nfun f xs = case xs of _::xs' =&gt; f xs' | _ =&gt; hd xs;</p>\n<p>(* Returns the empty list. Recursive to avoid inlining. *)<br>\nfun g xs = case xs of _::xs' =&gt; g xs' | _ =&gt; xs;</p>\n<p>(* Would expect to see which if f or g raises the exception, but I only get</p>\n<p>exception Empty raised (line 47 of \"./basis/List.sml\")</p>\n<p>which does not help. *)<br>\nRuntime.exn_trace (fn () =&gt; (f [0,1], g [2,3]))<br>\n›</p>\n<p>I also experimented with [[ML_exception_trace = true]], but without success.</p>\n<p>Thanks for any help.</p>\n<p>Alex<br>\n<a href=\"/user_uploads/14278/3cYTHUIJ3bH9HILdQo2TkQ6x/Tracing_Example.thy\">Tracing_Example.thy</a></p>",
        "id": 294755865,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661197448
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nSome years ago, David Matthews has improved the performance of exception<br>\nhandling by removing most of the classic exception_trace facilities. It<br>\nis now done with the ML debugger instead. See this NEWS entry for<br>\nIsabelle2016-1 (December 2016):</p>\n<ul>\n<li>Option ML_exception_debugger controls detailed exception trace via the<br>\nPoly/ML debugger. Relevant ML modules need to be compiled beforehand<br>\nwith ML_file_debug, or with ML_file and option ML_debugger enabled. Note<br>\ndebugger information requires consirable time and space: main<br>\nIsabelle/HOL with full debugger support may need ML_system_64.</li>\n</ul>\n<p>This still holds for Isabelle2019, but you can probably ignore<br>\nML_system_64 for all practical applications.</p>\n<p>Here is your example with these hints applied:</p>\n<p>declare [[ML_debugger]]<br>\nML ‹</p>\n<p>(* Raises exception Empty eventually. Recursive to avoid inlining. *)<br>\nfun f xs = case xs of _::xs' =&gt; f xs' | _ =&gt; hd xs;</p>\n<p>(* Returns the empty list. Recursive to avoid inlining. *)<br>\nfun g xs = case xs of _::xs' =&gt; g xs' | _ =&gt; xs;</p>\n<p>(* Would expect to see which if f or g raises the exception, but I only get</p>\n<p>exception Empty raised (line 47 of \"./basis/List.sml\")</p>\n<p>which does not help. *)<br>\nRuntime.exn_debugger (fn () =&gt; (f [0,1], g [2,3]))<br>\n›</p>\n<p>Output:<br>\nException trace - exception Empty raised (line 47 of \"./basis/List.sml\")<br>\n  f⌂<br>\n  f⌂<br>\n  f⌂<br>\n  it-(1)⌂<br>\nval f = fn: 'a list -&gt; 'a<br>\nval g = fn: 'a list -&gt; 'a list<br>\nexception Empty raised (line 47 of \"./basis/List.sml\")</p>\n<p>If you want to get information from a complex hierarchy of modules, you<br>\nneed to rebuild them with ML_debugger enabled or the 'ML_debug' command<br>\njust in the right spots. This can be sometimes awkward, and sometimes<br>\nhave bad effects (loss of performance, deadlocks).</p>\n<p>Makarius</p>",
        "id": 294756023,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661197528
    },
    {
        "content": "<p>From: Alexander Krauss &lt;<a href=\"mailto:krauss@in.tum.de\">krauss@in.tum.de</a>&gt;<br>\nAm 29.05.2019 um 19:48 schrieb Makarius:</p>\n<blockquote>\n<p>Some years ago, David Matthews has improved the performance of exception<br>\nhandling by removing most of the classic exception_trace facilities. It<br>\nis now done with the ML debugger instead.</p>\n</blockquote>\n<p>[...]</p>\n<blockquote>\n<p>Here is your example with these hints applied:</p>\n</blockquote>\n<p>[...]<br>\nThanks that helps.</p>\n<p>Does this mean that the old tracing flags/functions are obsolete by now?</p>\n<p>Alex</p>",
        "id": 294756066,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661197546
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nMaybe. I will think about removing them after the Isabelle2019 release.</p>\n<p>Makarius</p>",
        "id": 294758046,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661198369
    }
]