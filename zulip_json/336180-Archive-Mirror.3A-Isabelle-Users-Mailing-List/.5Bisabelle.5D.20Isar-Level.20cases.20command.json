[
    {
        "content": "<p>From: Joachim Breitner &lt;<a href=\"mailto:breitner@kit.edu\">breitner@kit.edu</a>&gt;<br>\nDear Isabelle-users,</p>\n<p>we (rightfully) pride ourselves with how natural nicely written Isar<br>\nproofs are. But things are (always) not perfect, and there is always<br>\nroom for careful improvements.</p>\n<p>Consider this rather idiomatic proof:</p>\n<p>lemma \"length (filter P xs) ≤ length xs\"<br>\nproof(induction xs)<br>\n  case Nil thus ?case by simp<br>\nnext<br>\n  case (Cons x xs)<br>\n  show ?case<br>\n  proof(cases \"P x\")<br>\n    case True with Cons<br>\n    have \"length (filter P (x#xs)) = Suc (length (filter P xs))\" by simp<br>\n    also note Cons.IH<br>\n    also have \"Suc (length xs) = length (x#xs)\" by simp<br>\n    finally show ?thesis by this simp<br>\n  next<br>\n    case False with Cons<br>\n    have \"length (filter P (x#xs)) = length (filter P xs)\" by simp<br>\n    also note Cons.IH<br>\n    also have \"length xs ≤ length (x#xs)\" by simp<br>\n    finally show ?thesis .<br>\n qed<br>\nqed</p>\n<p>It is a nicely written structural proof and easy to follow. But there is<br>\na wart: The case distinction!</p>\n<p>* I have to write \"show ?case\" to initiate a case distinction. But<br>\n        this is not natural: At this point, the final result is not what<br>\n        is on my mind. And in a manually written proof, I would not<br>\n        re-state the current goal at this point.</p>\n<p>* If I had not used the \"case\" command I would actually have to<br>\n        copy’n’paste the current goal here; obviously not very nice.<br>\n        Especially if there are multiple case distinction, each<br>\n        requiring me to copy that.</p>\n<p>* The goal was conveniently named ?case, but suddenly I have to<br>\n        write ?thesis. I (believe I) understand the techical reasons,<br>\n        but again, this is a violation of the principle of least<br>\n        surprise.</p>\n<p>What I would like to be able to write is something like</p>\n<p>lemma \"length (filter P xs) ≤ length xs\"<br>\nproof(induction xs)<br>\n  case Nil thus ?case by simp<br>\nnext<br>\n  case (Cons x xs)</p>\n<p>cases(\"P x\")<br>\n    case True with Cons<br>\n    have \"length (filter P (x#xs)) = Suc (length (filter P xs))\" by simp<br>\n    also note Cons.IH<br>\n    also have \"Suc (length xs) = length (x#xs)\" by simp<br>\n    finally show ?case by this simp<br>\n  next<br>\n    case False with Cons<br>\n    have \"length (filter P (x#xs)) = length (filter P xs)\" by simp<br>\n    also note Cons.IH<br>\n    also have \"length xs ≤ length (x#xs)\" by simp<br>\n    finally show ?case .<br>\n  qed<br>\nqed</p>\n<p>No seemingly redundant statement of the subgoals, the ability to simply<br>\nuse ?case and the conventional flow of thoughts and facts in such a<br>\nproof.</p>\n<p>This would also open the way to conveniently discharge multiple subgoals<br>\nin one case distinction:</p>\n<p>lemma \"A\" and \"B\"<br>\nproof-<br>\n  have \"C\" sorry</p>\n<p>cases (\"D\")<br>\n    case True<br>\n    from <code>C</code> show A using True sorry<br>\n    thus B using True sorry<br>\n  next<br>\n    case False<br>\n    from <code>C</code> show B using False sorry<br>\n    thus A using False sorry<br>\n  qed<br>\nqed</p>\n<p>(Note that in this case, no ?thesis is available, and<br>\n        show A and B proof (cases \"D\") <br>\n does not do the right thing, as it apply the cases rule only to the<br>\nfirst subgoal, so it becomes messy to do this proof right now.)</p>\n<p>This is the users mailing list, so I’ll refrain from making wild<br>\nassumptions about if and how this could be implemented, and whether<br>\nthere is a similarity to the obtains command, but instead ask you for<br>\nfeedback on the user-facing design of this feature:</p>\n<p>Is it something you’d want as well?<br>\nIs the syntax nice?<br>\nWhat could be the closing keyword, if not qed?</p>\n<p>Greetings,<br>\nJoachim<br>\n<a href=\"/user_uploads/14278/7Uv4bsTrauEB6br6cU-AMRa0/signature.asc\">signature.asc</a></p>",
        "id": 294319952,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660926564
    },
    {
        "content": "<p>From: Christian Sternagel &lt;<a href=\"mailto:c.sternagel@gmail.com\">c.sternagel@gmail.com</a>&gt;<br>\nI think this \"use-case\" is covered by raw proof blocks. In general I <br>\noften find that proofs get much more readable when using those (of cause <br>\nthe caveat is that we often have to restate assumptions/their negations, <br>\nbut this can all be handled by tasteful use of \"let ?x = ...\" before). <br>\nSo here is what I would write:</p>\n<p>lemma \"length (filter P xs) ≤ length xs\"<br>\nproof (induction xs)<br>\n   case (Cons x xs)<br>\n   { assume \"P x\"<br>\n     with Cons have \"length (filter P (x#xs)) = Suc (length (filter P <br>\nxs))\" by simp<br>\n     also note Cons.IH<br>\n     also have \"Suc (length xs) = length (x#xs)\" by simp<br>\n     finally have ?case by simp }<br>\n   moreover<br>\n   { assume \"¬ P x\"<br>\n     with Cons have \"length (filter P (x#xs)) = length (filter P xs)\" by <br>\nsimp<br>\n     also note Cons.IH<br>\n     also have \"length xs ≤ length (x#xs)\" by simp<br>\n     finally have ?case . }<br>\n   ultimately show ?case by cases<br>\nqed simp</p>\n<p>cheers</p>\n<p>chris</p>",
        "id": 294319973,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660926569
    },
    {
        "content": "<p>From: Joachim Breitner &lt;<a href=\"mailto:breitner@kit.edu\">breitner@kit.edu</a>&gt;<br>\nHi,</p>\n<p>right. This works ok for boolean cases, but what if my invocation of the<br>\n\"cases\" method is actually a complicate 5-way case distinction on some<br>\nexpression, or an inductive predicate with multiple variables and lots<br>\nof assumptions in each case.</p>\n<p>There I really would like to rely on named cases, and that rules out<br>\nmanual proof blocks.</p>\n<p>Greetings,<br>\nJoachim<br>\n<a href=\"/user_uploads/14278/td-lU6AJgikjAa29yyJqgK72/signature.asc\">signature.asc</a></p>",
        "id": 294319989,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660926576
    },
    {
        "content": "<p>From: Andreas Lochbihler &lt;<a href=\"mailto:andreas.lochbihler@inf.ethz.ch\">andreas.lochbihler@inf.ethz.ch</a>&gt;<br>\nDear Joachim,</p>\n<p>Personally, I do not mind having to state the \"show ?case\" part, because it makes clear <br>\nthat you really need to do the case distinction to prove the whole case. In fact, I think <br>\nthat your case distinction in the example is not as it should be, because you only need it <br>\nto for the unfolding of filter. The remaining reasoning is essentially the same, and I <br>\nwould prefer if that could be expressed more easily.</p>\n<p>Here's what I would like to see as the proof structure:</p>\n<p>lemma \"length (filter P xs) ≤ length xs\"<br>\nproof(induction xs)<br>\n    case Nil thus ?case by simp<br>\nnext<br>\n    case (Cons x xs)<br>\n    let ?n = \"if P x then 1 else 0\"<br>\n    have \"length (filter P (x#xs)) = ?n + length (filter P xs)\"<br>\n      by(cases \"P x\") simp_all<br>\n    also note Cons.IH<br>\n    also have \"?n + length xs &lt;= length (x # xs)\"<br>\n      by(cases \"P x\") simp_all<br>\n    finally show ?case .<br>\nqed</p>\n<p>Unfortunately, Isabelle does not provide good syntax to express such expression. I think <br>\nthis is the reason for having so many proofs in the style of show ?case proof(cases ...).</p>\n<p>As Christian Sternagel mentioned, raw proof blocks are sometimes an option, but I do not <br>\nlike them much either. If you have multiple goals, you can use \"case_tac [!] ...\" instead <br>\nof \"cases ...\" to do a case distinction on all of them. Unfortunately, this does not give <br>\nyou the case names.</p>\n<p>Andreas</p>",
        "id": 294320010,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660926582
    },
    {
        "content": "<p>From: Joachim Breitner &lt;<a href=\"mailto:breitner@kit.edu\">breitner@kit.edu</a>&gt;<br>\nHi,</p>\n<p>True, in this sense the example is a bit lacking. And you are rightly<br>\npointing out that fact that for showing an intermediate statement using<br>\ncase distinction the current scheme is useful. So I would not go as far<br>\nto expect that</p>\n<p>cases (\"xs\")<br>\n    case Nil<br>\n    have P<br>\n  next<br>\n    case (Cons x xs')<br>\n    have P<br>\n  qed</p>\n<p>to be equivalent to </p>\n<p>have P<br>\n  proof (cases \"xs\"))<br>\n    case Nil<br>\n    have P<br>\n  next<br>\n    case (Cons x xs')<br>\n    have P<br>\n  qed</p>\n<p>and hence (heh) suggest this feature only for the case (heh) where one<br>\nor more actual subgoals are shown (heh) in each case (heh).</p>\n<p>(Although I would not dismiss the above if it turns out to be feasible).</p>\n<p>Greetings,<br>\nJoachim<br>\n<a href=\"/user_uploads/14278/ulGr8CQO_z495oiZ_klmq6Km/signature.asc\">signature.asc</a></p>",
        "id": 294320129,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660926607
    }
]