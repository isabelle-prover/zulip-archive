[
    {
        "content": "<p>From: Edward Schwartz &lt;<a href=\"mailto:edmcman@cmu.edu\">edmcman@cmu.edu</a>&gt;<br>\nHi all,</p>\n<p>I'm trying to write a fairly simple proof in Isar, but I'm getting<br>\nstuck on a weird problem relating to polymorphism.  Here's a minimized<br>\nexample:</p>\n<p>fun test_fun :: \"'a \\&lt;Rightarrow&gt; bool\"<br>\nwhere<br>\n\"test_fun a = True\"</p>\n<p>fun nat_fun :: \"nat \\&lt;Rightarrow&gt; bool\"<br>\nwhere<br>\n\"nat_fun a = True\"</p>\n<p>definition test_def :: \"'a \\&lt;Rightarrow&gt; bool\"<br>\nwhere<br>\n\"test_def \\&lt;equiv&gt; \\&lt;lambda&gt;a. True\"</p>\n<p>lemma one:<br>\n  shows \"\\&lt;exists&gt;a. test_fun a\"<br>\n  (* fails *)<br>\n  (* proof *)<br>\n  (*     show \"test_fun a\" *)<br>\n  sorry</p>\n<p>lemma two:<br>\n  shows \"\\&lt;exists&gt;a. test_def a\"<br>\n  (* fails *)<br>\n  (* proof *)<br>\n  (*     show \"test_def a\" *)<br>\n  sorry</p>\n<p>lemma three:<br>\n  shows \"\\&lt;exists&gt;a. nat_fun a\"<br>\n  (* works *)<br>\n  proof<br>\n    show \"nat_fun a\" by simp<br>\n  qed</p>\n<p>On lemma one and two, I get errors like:</p>\n<p>*** Failed to refine any pending goal<br>\n*** At command \"show\" (line 82 of \"file.thy\")<br>\n*** Local statement fails to refine any pending goal<br>\n*** Failed attempt to solve goal by exported rule:<br>\n***   test_fun a<br>\n*** At command \"show\" (line 82 of \"file.thy\")</p>\n<p>Lemma three goes through fine.</p>\n<p>Can someone help me understand what is going on?  I would like to<br>\nprove lemma one or two.  The problem is obviously related to<br>\npolymorphism, since lemma three goes through fine, but other than that<br>\nI am not sure what the problem is.</p>\n<p>Thanks,</p>\n<p>Edward</p>",
        "id": 294274750,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660918391
    },
    {
        "content": "<p>From: Peter Lammich &lt;<a href=\"mailto:lammich@in.tum.de\">lammich@in.tum.de</a>&gt;<br>\nHi. </p>\n<p>Looks like Isabelle does not like the dangling free variable a that you<br>\nintroduce. Using something else, e.g., undefined, does the job:</p>\n<p>lemma one:<br>\n  shows \"\\&lt;exists&gt;a. test_fun a\"<br>\nproof<br>\n  show \"test_fun undefined\"<br>\n    by simp<br>\nqed</p>\n<p>lemma two:<br>\n  shows \"\\&lt;exists&gt;a. test_def a\"<br>\nproof<br>\n  show \"test_def undefined\"<br>\n    by (simp add: test_def_def)<br>\nqed</p>\n<p>Cheers,<br>\n  Peter</p>",
        "id": 294274775,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660918403
    },
    {
        "content": "<p>From: Peter Lammich &lt;<a href=\"mailto:lammich@in.tum.de\">lammich@in.tum.de</a>&gt;<br>\nA polymorphic type in a statement can be instantiated by any type. Thus,<br>\nyou can think of them as being implicitely universally qualified.</p>\n<blockquote>\n<p>What I want to state instead is:<br>\nThere exists a type 'a such that there is an a :: 'a and P a.</p>\n<p>Is there any way to state such a property in Isabelle?  </p>\n</blockquote>\n<p>This is outside the expressiveness of HOL.</p>\n<blockquote>\n<p>Another way of<br>\nthinking about this is that I want to state that there exists some<br>\nfunction of arity n, regardless of type, that has a certain property.</p>\n</blockquote>\n<p>You can prove the statement <br>\n  \\&lt;exists&gt;f::'a1 =&gt; ... =&gt; 'an =&gt; 'b. P f</p>\n<p>However, in the proof you cannot make any additional assumptions about<br>\nthe type variables, in particular you cannot instantiate them.</p>\n<p>The only way in Isabelle/HOL to express types with certain properties<br>\nare type-classes, which have several restrictions, e.g., they can only<br>\ndepend on one type variable.</p>",
        "id": 294274812,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660918415
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nThis sounds a bit too much like a magic addition of type classes to <br>\nIsabelle, but that is not the case.  It is also not directly related to <br>\nIsabelle/HOL.</p>\n<p>My TPHOLs paper from 1997 about type classes in Isabelle explains how that <br>\nslightly extended type system fits nicely into the existing logical <br>\nframework of Isabelle/Pure (which is a minimal version of H.O.L.).</p>\n<p>As a spin-off you can also work with so-called \"hidden polymorphism\" <br>\n(which is related to \"phantom types\" elsewhere) using the type constructor <br>\n'a itself and the notation TYPE('a) in Pure. A predicate with more than <br>\none TYPE('a) argument represents a general relation of types.</p>\n<p>Doing that without the high-level interfaces of Isabelle type classes is <br>\nan arcance discipline, though.  And the type-inference for type classes <br>\ndoes depend on the single-argument restriction, to keep things simple.</p>\n<p>Makarius</p>",
        "id": 294274944,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660918458
    }
]