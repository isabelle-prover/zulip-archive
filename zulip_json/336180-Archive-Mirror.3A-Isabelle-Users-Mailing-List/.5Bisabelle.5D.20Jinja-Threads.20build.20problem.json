[
    {
        "content": "<p>From: Peter Lammich &lt;<a href=\"mailto:lammich@in.tum.de\">lammich@in.tum.de</a>&gt;<br>\nFinally, I broke down the problem to a strange behaviour of<br>\nProof-General:</p>\n<p>Take the following minimal example:<br>\n  theory A<br>\n  imports Main  <br>\n  begin<br>\n    ML_val {*<br>\n      tracing \"Looping ...\";<br>\n      fun f a = f a;<br>\n      f 1<br>\n      *}<br>\n  end</p>\n<p>theory B imports A<br>\n  begin</p>\n<p>end</p>\n<p>Then use PG to load theory B. It will happily do so, ignoring that the<br>\nML_val command is still running. Actually, the ML_val command is<br>\nstarted, and still running when PG displays the theory as processed.</p>\n<p>However, when loading the theory A with PG, it gets stuck at the ML_val<br>\ncommand as expected.</p>\n<p>What has happened here? Is this a problem of PG, or of some<br>\nIsabelle-stuff used elsewhere (As PG does not do loading of required<br>\ntheories itself, I suspect the problem lies somewhere in Isabelle)</p>\n<p>This raises another question about the semantics of ML_val:<br>\n  Is a theory correct, where some ML-val command diverges?</p>",
        "id": 294251488,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660910913
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nOn Fri, 18 Oct 2013, Peter Lammich wrote:</p>\n<blockquote>\n<p>Finally, I broke down the problem to a strange behaviour of<br>\nProof-General:</p>\n<p>Take the following minimal example:<br>\n theory A<br>\n imports Main<br>\n begin<br>\n   ML_val {*<br>\n     tracing \"Looping ...\";<br>\n     fun f a = f a;<br>\n     f 1<br>\n     *}<br>\n end</p>\n<p>theory B imports A<br>\n begin</p>\n<p>end</p>\n<p>Then use PG to load theory B. It will happily do so, ignoring that the<br>\nML_val command is still running. Actually, the ML_val command is<br>\nstarted, and still running when PG displays the theory as processed.</p>\n</blockquote>\n<p>ML_val is a diagnostic command and these get forked by default, just like <br>\nproofs.  Non-termination and errors need to be exposed by a proper join in <br>\nthe right place by the system, but this was actually broken for TTY / <br>\nProof General, which is in some sense legacy for quite some time already.</p>\n<p>In Isabelle2013-1-RC4 I've addressed this issue, such that it works like <br>\nthe standard batch build or the document model of Isabelle/Scala/jEdit.</p>\n<p>Remaining users of Proof General should take a very close look at <br>\nIsabelle2013-1-RC4.  There has been significantly less testing of the old <br>\nTTY mode, due to constantly decreasing numbers of every day users.  I use <br>\nmyself Proof General mainly for \"ispell\", and only until I've found some <br>\ntime to activate spell-checking in jEdit properly.</p>\n<blockquote>\n<p>However, when loading the theory A with PG, it gets stuck at the ML_val<br>\ncommand as expected.</p>\n</blockquote>\n<p>Here you are on the bare TTY loop, and that does not fork diagnostic <br>\ncommands.</p>\n<blockquote>\n<p>This raises another question about the semantics of ML_val:<br>\n Is a theory correct, where some ML-val command diverges?</p>\n</blockquote>\n<p>Formally yes, since there is no connection of the diagnostic command to <br>\nthe thm values derived from the LCF kernel.</p>\n<p>Practically no, since all the forks of a theory body should be properly <br>\njoined.  This is an important computational aspect outside of the logic.</p>\n<blockquote>\n<p>The diverging ML_val command was introduced by my changes, that<br>\naccidently produced a code equation of the form \"f a b = f a b\"</p>\n</blockquote>\n<p>In Isabelle/jEdit you see non-terminating commands as dark-violet areas in <br>\nthe Theories panel, or the individual buffer overview (right column next <br>\nto text area).</p>\n<p>What is still missing is some kind of \"Status panel\" to make a summary of <br>\nthe whole session, similar to what isabelle build does in batch mode to <br>\nwrap up in the very end.</p>\n<p>Makarius</p>",
        "id": 294258031,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660913308
    }
]