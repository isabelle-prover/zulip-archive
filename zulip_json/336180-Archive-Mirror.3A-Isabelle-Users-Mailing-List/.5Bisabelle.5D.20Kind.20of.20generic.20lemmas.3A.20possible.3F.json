[
    {
        "content": "<p>From: \"Yannick Duchêne (Hibou57 )\" &lt;<a href=\"mailto:yannick_duchene@yahoo.fr\">yannick_duchene@yahoo.fr</a>&gt;<br>\nHi people out there,</p>\n<p>Here is a naive attempt I've just made for testing. It is self explanatory:</p>\n<p>lemma obligation: \"f x y ⟹ f y x\" sorry</p>\n<p>fun equal :: \"nat ⇒ nat ⇒ bool\"<br>\n     where \"equal x y = (x = y)\"</p>\n<p>thm obligation [where f = equal]</p>\n<p>lemma equal_obligation: obligation [where f = equal]</p>\n<p>The “thm” line is OK, but not the last lemma. Is this just stupid in an  <br>\nIsabelle context or is there another way to achieve the same purpose?</p>",
        "id": 294221818,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660897903
    },
    {
        "content": "<p>From: Christian Sternagel &lt;<a href=\"mailto:c-sterna@jaist.ac.jp\">c-sterna@jaist.ac.jp</a>&gt;<br>\nTry</p>\n<p>lemmas equal_obligation = obligation [where f = equal]</p>\n<p>(Note the trailing 's' in 'lemmas'.)</p>\n<p>However, such specialization can be applied ad hoc (which is often <br>\npreferable since it avoids to generate many \"redundant\" lemmas). E.g., <br>\nwherever you would want to use 'equal_obligation' you could instead <br>\ndirectly use 'obligation [where f = equal]' (or shorter) 'obligation [of <br>\nequal]'. The second variant is more robust w.r.t. renaming (since <br>\nvariables are just instantiated by their position from left to right), <br>\nwhereas the first variant is more robust w.r.t. to reordering (which in <br>\nmy experience is not as frequent as renaming and most of the time <br>\ncombined with renaming anyway; thus I would consider the \"of\" variant <br>\nmore useful in practice... but that is just personal taste I guess).</p>\n<p>cheers</p>\n<p>chris</p>",
        "id": 294221831,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660897909
    },
    {
        "content": "<p>From: \"Yannick Duchêne (Hibou57 )\" &lt;<a href=\"mailto:yannick_duchene@yahoo.fr\">yannick_duchene@yahoo.fr</a>&gt;<br>\nWill try it, thanks.</p>\n<p>I came back to post something I tried. Suspecting the answer may be an  <br>\narea of Isabelle I don't already know, I opened the Locales Tutorial, had  <br>\na very quick overview, and ended with this:</p>\n<p>locale obligations =<br>\n     fixes f :: \"'a ⇒ 'a ⇒ bool\"<br>\n     assumes first_obligation: \"f x y ⟹ f y x\"</p>\n<p>fun equal :: \"nat ⇒ nat ⇒ bool\"<br>\n   where \"equal x y = (x = y)\"</p>\n<p>interpretation obligations equal<br>\n   proof<br>\n     fix x y<br>\n     assume \"equal x y\"<br>\n     then show \"equal y x\" by simp<br>\n   qed</p>\n<p>Is this OK or is this abusing what the concept of locale is?</p>\n<p>I will try your suggestion now (and further read your comment too,  <br>\nobviously).</p>",
        "id": 294221842,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660897915
    },
    {
        "content": "<p>From: Christian Sternagel &lt;<a href=\"mailto:c-sterna@jaist.ac.jp\">c-sterna@jaist.ac.jp</a>&gt;<br>\nDear Yannick,</p>\n<p>Well, it depends on what you want to achieve (which I might have <br>\nmisinterpreted in your previous mail):</p>\n<p>Your above theory fragment is a typical application of locales: in a <br>\nlocale you specify some abstract properties (in assumes) that have to be <br>\nsatisfied by parameters (from fixes) and for every specific <br>\ninterpretation you have to prove that those properties are indeed <br>\nsatisfied. What you gain is the ability to prove lemmas abstractly <br>\n(inside the locale) on obtain them for free in special cases as soon as <br>\nyou successfully establish an interpretation.</p>\n<p>The other thing is to merely instantiate a given lemma (i.e., make it <br>\nmore specific), which does not require to prove any assumptions. And <br>\nthat is what my suggestion was about. To use a locale in such a case <br>\nwould just be overkill. But after reading your previous mail again I <br>\nthink you might be in the above setting.</p>\n<p>cheers</p>\n<p>chris</p>",
        "id": 294221869,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660897922
    }
]