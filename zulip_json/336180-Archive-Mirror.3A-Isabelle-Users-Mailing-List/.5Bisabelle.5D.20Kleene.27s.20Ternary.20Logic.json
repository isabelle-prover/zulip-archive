[
    {
        "content": "<p>From: Arthur Peters &lt;<a href=\"mailto:amp@singingwizard.org\">amp@singingwizard.org</a>&gt;<br>\nIs there an existing theory of Kleene's Termary Logic written is Isabelle?<br>\nA search didn't show up anything.</p>\n<p>I need it for representing that predicates that reference unbound variables<br>\nare neither true nor false.</p>\n<p>Thanks.<br>\n-Arthur</p>",
        "id": 294247392,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660909440
    },
    {
        "content": "<p>From: \"Jens-D. Doll\" &lt;<a href=\"mailto:jd@cococo.de\">jd@cococo.de</a>&gt;<br>\nHello Arthur,</p>\n<p>afaik you will have to distinguish these cases, independent of bound state,</p>\n<p>a) a tautology, which is always true<br>\nb) the absurd, which is always false<br>\nc) there is an x <a href=\"http://s.th\">s.th</a>. p(x) is true, which really depends on the bound x</p>\n<p>Jens</p>\n<hr>\n<p>Is there an existing theory of Kleene's Termary Logic written is Isabelle?<br>\nA search didn't show up anything.</p>\n<p>I need it for representing that predicates that reference unbound variables<br>\nare neither true nor false.</p>\n<p>Thanks.<br>\n-Arthur</p>",
        "id": 294247565,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660909501
    },
    {
        "content": "<p>From: Lawrence Paulson &lt;<a href=\"mailto:lp15@cam.ac.uk\">lp15@cam.ac.uk</a>&gt;<br>\nI have to agree. I've never seen a convincing application of a 3-valued logic. Even LCF, with its undefined values, didn't have undefined truth values.</p>\n<p>Larry Paulson</p>",
        "id": 294247585,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660909508
    },
    {
        "content": "<p>From: Jasmin Blanchette &lt;<a href=\"mailto:jasmin.blanchette@gmail.com\">jasmin.blanchette@gmail.com</a>&gt;<br>\nI presume you mean in specification languages like LCF and HOL. Abstract interpretation naturally leads to 3-valued logics [1], and tools like Refute and Nitpick, which need to approximate infinite domains, make ample use of them. Ultimately, Nitpick translates 3-valued logic formulas into 2-valued logic ones, because the user is interested in a binary outcome (a genuine countermodel was found or not) and the underlying engine is 2-valued, but as an intermediate step it is useful to be able to talk about things like an unknown (e.g. too big) \"nat\" and use Kleene rules to remain precise and sound.</p>\n<p>Jasmin</p>\n<p>[1] <a href=\"http://www.cs.tau.ac.il/~tvla/\">http://www.cs.tau.ac.il/~tvla/</a></p>",
        "id": 294247598,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660909514
    },
    {
        "content": "<p>From: \"Jens-D. Doll\" &lt;<a href=\"mailto:jd@cococo.de\">jd@cococo.de</a>&gt;<br>\nHello Jasmin,</p>\n<p>the reason and a justification of using 3-valued logic in praxi is the  <br>\nincompleteness of formal systems, i.e. Goedel's sentence as of 1931. The  <br>\nsoftware for Abtract Interpretation is a formal system and there will  <br>\nalways be branches, which are unsolved/unproved or just  <br>\nnot-yet-thought-of. What they are doing in these unsolved cases is manual  <br>\ninvestigation, which leads to a lot of work for highly trained engineers.</p>\n<p>Jens</p>",
        "id": 294248199,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660909753
    }
]