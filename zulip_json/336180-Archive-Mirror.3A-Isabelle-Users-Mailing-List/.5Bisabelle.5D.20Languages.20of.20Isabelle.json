[
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nFirst of all, as the author of Isabelle/Isar and Isabelle/ML, I claim the <br>\nnatural authority to determine the name and title of the work.</p>\n<p>I do care about such things, and spend a long time thinking and rethinking <br>\nwhat any of the Isabelle/XYZ aspects really are, and if they are used with <br>\nproper terminology.  Complexity in the system and its concepts needs to be <br>\nkept in check.  Sloppy or obsolete terminology does not help to understand <br>\nthe true structure of the system, but prevents people discovering how the <br>\nsystem really works (and what great and still explored things may be done <br>\nwith it).</p>\n<p>When I read somethink like \"on the ML level of Isabelle/HOL\" or \"to do <br>\nXYZ, I have to go down to the ML level\" it sounds very strange and alien <br>\nto me, someone speaking about a different system, or a system from a <br>\ndifferent era.</p>\n<p>Isabelle/ML is not a cold and damp cellar where you go down occasionally <br>\nto poke around. Instead it is the main implementation and extension <br>\nlanguage of Isabelle, which is fully integrated with the logical <br>\nenvironment and the Prover IDE.  See also <br>\n<a href=\"https://www.lri.fr/~wenzel/Isabelle_Orleans_2012/slides.pdf\">https://www.lri.fr/~wenzel/Isabelle_Orleans_2012/slides.pdf</a> how I explain <br>\nthe languages of Isabelle these days to beginners.  At Edinburgh this <br>\nspring, we even started with Isabelle/ML programming first, before doing <br>\nany Isabelle/HOL specifications or proofs, or showing how the Isabelle/HOL <br>\ncode generator allows to go from Isabelle/HOL back to Isabelle/ML again.</p>\n<p>Moreover Isabelle/ML is now the most advanced implementation of Standard <br>\nML, with substantial IDE support, efficient parallel programming etc.  It <br>\njust happens to ship with a massive theorem proving environment by <br>\ndefault, which is its main application.  (At the bottom, all the hard work <br>\nis done by Poly/ML thanks to David Matthews.)</p>\n<p>IIRC, the tentative term \"ML level of Isabelle\" came up when the main mass <br>\nof old-style ML tactic scripts were converted into \"apply-scripts\" in the <br>\nIsar source language.  Of course, Isar is much more than a language for <br>\nnon-ML proof scripts.  You are a user from that pre-Isar era of Isabelle. <br>\nAre you still doing ML proof scripts these days?</p>\n<p>Since you never got acquainted with Proof General, and its non-ML mode of <br>\nscripting, you should try now Isabelle/jEdit.  It allows direct editing of <br>\nIsabelle sources (any of its many embedded languages) with direct feedback <br>\nin the editor, without the strange locking of the buffer due to Proof <br>\nGeneral.  Thus it is closer to old TTY mode, but you no longer have to <br>\nmanage the prover state in your head as you type.</p>\n<p>This is how Isabelle is exposed to the professional user today.  And in <br>\nfact, what you see in the front is the jEdit editor framework that uses <br>\nIsabelle/Scala to access semantic content provided by the prover.  So the <br>\noutermost \"layer\" of Isabelle2013 happens to be Isabelle/Scala, with <br>\neverything else in the background.</p>\n<p>Note that the former expression \"Isabelle/Scala layer\" is no longer used, <br>\nsince Isabelle/Scala can be accessed from Isabelle/ML already since <br>\nIsabelle2011-1, and I hope to get more interconnection of Isabelle/Scala <br>\nvs. Isabelle/ML, similar to the way other Isabelle languages may be <br>\nembedded into each other. If this is madness, there is method in it ...</p>\n<p>Makarius</p>",
        "id": 294249747,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660910282
    },
    {
        "content": "<p>From: Jeremy Dawson &lt;<a href=\"mailto:Jeremy.Dawson@anu.edu.au\">Jeremy.Dawson@anu.edu.au</a>&gt;<br>\nOn 09/06/2013 10:49 PM, Makarius wrote:</p>\n<blockquote>\n<p>IIRC, the tentative term \"ML level of Isabelle\" came up when the main <br>\nmass of old-style ML tactic scripts were converted into <br>\n\"apply-scripts\" in the Isar source language.  Of course, Isar is much <br>\nmore than a language for non-ML proof scripts.  You are a user from <br>\nthat pre-Isar era of Isabelle. Are you still doing ML proof scripts <br>\nthese days?</p>\n<p>Yes - for the reasons I discussed in the email thread entitled Length of <br>\nProofs, see eg</p>\n</blockquote>\n<p><a href=\"https://lists.cam.ac.uk/mailman/htdig/cl-isabelle-users/2012-November/msg00167.html\">https://lists.cam.ac.uk/mailman/htdig/cl-isabelle-users/2012-November/msg00167.html</a></p>\n<p>The whole thread is rather long - but it includes my words</p>\n<p>I think this email thread is getting too long - my first post was of<br>\n    stuff that I asserted (and still do) that you can't imagine how to<br>\n    do it sensibly other than in Standard ML.</p>\n<p>Here's another example, from what I'm doing right now</p>\n<p>fun ctxt_tac sg state =<br>\n   (atac ORELSE' (resolve_tac (tl ctxt.intrs) THEN' ctxt_tac)) sg state ;</p>\n<p>fun perm_msde_tac' sg = FIRST' [ etac keepFD, (* was atac *)<br>\n   (resolve_tac [msde.seqs, msde_commas, msde_commas_rev]<br>\n     THEN_ALL_NEW perm_msde_tac'),<br>\n   rtac refl_msde',<br>\n   eresolve_tac msde_commas_empty] sg ;</p>\n<p>val perm_msde_tac = (REPEAT o ematch_tac [keepF_thin]) THEN' <br>\nperm_msde_tac' ;</p>\n<p>In saying that no-one has made any suggestion as to how to do this other <br>\nthan in Standard ML I should acknowledge that the suggestion has been <br>\nmade that one can do this and wrap it up in Isar - but my experience - <br>\nas described in the email below made this a worst option</p>\n<p><a href=\"https://lists.cam.ac.uk/mailman/htdig/cl-isabelle-users/2008-February/msg00007.html\">https://lists.cam.ac.uk/mailman/htdig/cl-isabelle-users/2008-February/msg00007.html</a></p>\n<p>(quote)<br>\nIn fact I'm working on a project now where it is demanded that <br>\neverything is in Isar, so I have to try to work in this way.  And it is <br>\nincredibly frustrating, because things seem to sometimes work, and <br>\nsometimes not, with no apparent reason, seemingly randomly.</p>\n<p>Mostly my problems are something do to with theories.  I don't know if <br>\nthe problems I've faced today are because of theories or not, but I <br>\nthink it is quite likely.  But I waste an enormous amount of time trying <br>\nto cope with things that don't work as expected.  What is a simple job <br>\nwhen I'm doing proofs using \"the raw interactive ML toplevel\" becomes <br>\nslow and frustrating when I try to use Isar as much as possible, while <br>\nusing ML for the things not available in Isar.<br>\n(end quote)</p>\n<blockquote>\n<p>Since you never got acquainted with Proof General, and its non-ML mode <br>\nof scripting, you should try now Isabelle/jEdit.  It allows direct <br>\nediting of Isabelle sources (any of its many embedded languages) with <br>\ndirect feedback in the editor, without the strange locking of the <br>\nbuffer due to Proof General.  Thus it is closer to old TTY mode, but <br>\nyou no longer have to manage the prover state in your head as you type.</p>\n<p>Are you saying it Isabelle/jEdit works with ML files?  Or with <br>\nIsabelle2005? I've read enough on this email list to doubt that very <br>\nmuch.  And as I've mentioned in other messages the work I'm doing now <br>\nrests upon work I've done in the past.  Unless I can mix theories and <br>\nproofs that work in Isabelle2005 with Isabelle2013 code then I can't use <br>\nIsabelle2013. It's as simple as that.</p>\n</blockquote>\n<p>Incidentally you recently wrote \"I am myself involved in Isabelle only <br>\nsince 1993, but I've never seen a commitment to \"backwards <br>\ncompatibility\".\"  If \"commitment\" means an absolute guarantee you may be <br>\nright, but there certainly was a time when developers cared about it - <br>\nsee the reference to Asm_lr_simp_tac in the NEWS file</p>\n<p>Jeremy</p>",
        "id": 294249808,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660910294
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nOn Sat, 7 Sep 2013, Jeremy Dawson wrote:</p>\n<blockquote>\n<p>Mostly my problems are something do to with theories.  I don't know if <br>\nthe problems I've faced today are because of theories or not, but I <br>\nthink it is quite likely.  But I waste an enormous amount of time trying <br>\nto cope with things that don't work as expected.  What is a simple job <br>\nwhen I'm doing proofs using \"the raw interactive ML toplevel\" becomes <br>\nslow and frustrating when I try to use Isar as much as possible, while <br>\nusing ML for the things not available in Isar.</p>\n</blockquote>\n<p>This thread is again endangered to become a discussion about really <br>\nancient Isabelle versions that hardly anybody will understand on the <br>\nisabelle-users mailing list in 2013.</p>\n<p>When you say \"theories\" you probably mean the add-on feature of Isabelle93 <br>\nto generate ML source from some concrete syntax of specifications.  The <br>\nuse_thy ML function was loading that into the ML session, then you would <br>\ncontinue with theorems and proofs in raw ML.  (In 2013, use_thy is hardly <br>\never seen in practice, since isabelle build and isabelle jedit handle that <br>\nimplicitly.)</p>\n<p>Today, but starting already in 1998, everything is centered around <br>\nIsabelle theory files.  It is very hard to escape from that, and there is <br>\nno point to do it, apart from extreme forms of nostalgy.</p>\n<blockquote>\n<p>Are you saying it Isabelle/jEdit works with ML files?</p>\n</blockquote>\n<p>Isabelle/jEdit mainly supports Isabelle theory files, where ML is <br>\nincluded.  I recommend to use the Isar command 'ML' as a start, inside a <br>\ntheory.</p>\n<p>You can also use 'ML_file' in Isar, but the extern file will lack Prover <br>\nIDE markup, and is not integrated into the continous checking process at <br>\nthe moment (you would have to initiate a reload a bit indirectly by hand, <br>\nby editing the ML_file command somehow).</p>\n<blockquote>\n<p>Or with Isabelle2005?</p>\n</blockquote>\n<p>Definitely not.  Why are you still using Isabelle2005? Because it happens <br>\nto be the last Isabelle release with obsolete stuff from 10 years earlier?</p>\n<blockquote>\n<p>And as I've mentioned in other messages the work I'm doing now rests <br>\nupon work I've done in the past.  Unless I can mix theories and proofs <br>\nthat work in Isabelle2005 with Isabelle2013 code then I can't use <br>\nIsabelle2013.</p>\n</blockquote>\n<p>That is hopeless.  The very idea of Isabelle as I know it since 1993 has <br>\nbeen to continously upgrade old things, such that everybody moves on. AFP <br>\ngreatly helps to do that, already since 2003.</p>\n<blockquote>\n<p>Incidentally you recently wrote \"I am myself involved in Isabelle only <br>\nsince 1993, but I've never seen a commitment to \"backwards <br>\ncompatibility\".\"  If \"commitment\" means an absolute guarantee you may be <br>\nright, but there certainly was a time when developers cared about it - <br>\nsee the reference to Asm_lr_simp_tac in the NEWS file</p>\n</blockquote>\n<p>The amount of care has actually increased in recent years -- care about <br>\ngetting forwards, and removing old things of no other value than history.</p>\n<p>The example about Asm_lr_simp_tac merely tells that Stefan Berghofer <br>\nimproved the Simplifier, then he found that the new scheme broke some very <br>\nold unstructured proof scripts (99 subgoals becoming 101), so he made a <br>\nworkaround to preserve that old material.  Getting rid of obsolete things <br>\ntakes a lot of extra time, and one always needs to get at a realistic <br>\nbalance what to do and what not.</p>\n<p>If we would preserve old things by default, we could compete with <br>\nSun/Oracle about cruft in the Java standard libraries, and that code base <br>\nis actually a bit younger than Isabelle.</p>\n<p>Makarius</p>",
        "id": 294249948,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660910354
    },
    {
        "content": "<p>From: Jeremy Dawson &lt;<a href=\"mailto:Jeremy.Dawson@anu.edu.au\">Jeremy.Dawson@anu.edu.au</a>&gt;<br>\nOn 09/10/2013 10:37 PM, Makarius wrote:</p>\n<blockquote>\n<p>On Sat, 7 Sep 2013, Jeremy Dawson wrote:</p>\n<blockquote>\n<p>Mostly my problems are something do to with theories.  I don't know <br>\nif the problems I've faced today are because of theories or not, but <br>\nI think it is quite likely.  But I waste an enormous amount of time <br>\ntrying to cope with things that don't work as expected.  What is a <br>\nsimple job when I'm doing proofs using \"the raw interactive ML <br>\ntoplevel\" becomes slow and frustrating when I try to use Isar as much <br>\nas possible, while using ML for the things not available in Isar.</p>\n</blockquote>\n<p>This thread is again endangered to become a discussion about really <br>\nancient Isabelle versions that hardly anybody will understand on the <br>\nisabelle-users mailing list in 2013.</p>\n<p>When you say \"theories\" you probably mean the add-on feature of <br>\nIsabelle93 to generate ML source from some concrete syntax of <br>\nspecifications.  The use_thy ML function was loading that into the ML <br>\nsession, then you would continue with theorems and proofs in raw ML.  <br>\n(In 2013, use_thy is hardly ever seen in practice, since isabelle <br>\nbuild and isabelle jedit handle that implicitly.)</p>\n<p>No, I meant theory as a concept (as returned by the function <br>\ntheory_of_thm) - my understanding was that in Isar it keeps changing, <br>\nand that that was often the source of my problems.  Whatever the reason, <br>\nthough, I found that mixing ML and Isar, as a modus operandi, simply <br>\ndidn't work.<br>\nToday, but starting already in 1998, everything is centered around <br>\nIsabelle theory files.  It is very hard to escape from that, and there <br>\nis no point to do it, apart from extreme forms of nostalgy.<br>\nIf \"escape from that\" includes using ML outside a theory file, my last <br>\nemail just explained the point to it.</p>\n<blockquote>\n<p>Are you saying it Isabelle/jEdit works with ML files?</p>\n</blockquote>\n<p>Isabelle/jEdit mainly supports Isabelle theory files, where ML is <br>\nincluded.  I recommend to use the Isar command 'ML' as a start, inside <br>\na theory.</p>\n<p>You can also use 'ML_file' in Isar, but the extern file will lack <br>\nProver IDE markup, and is not integrated into the continous checking <br>\nprocess at the moment (you would have to initiate a reload a bit <br>\nindirectly by hand, by editing the ML_file command somehow).</p>\n<blockquote>\n<p>Or with Isabelle2005?</p>\n</blockquote>\n<p>Definitely not.  Why are you still using Isabelle2005? Because it <br>\nhappens to be the last Isabelle release with obsolete stuff from 10 <br>\nyears earlier?</p>\n<p>Well there was certainly stuff in Isabelle2005 which wasn't in <br>\nIsabelle2007.  I'm not sure what you mean by \"obsolete\" - I was using it <br>\n(and still do).  I don't know how long it had been in Isabelle then.</p>\n<blockquote>\n<p>And as I've mentioned in other messages the work I'm doing now rests <br>\nupon work I've done in the past.  Unless I can mix theories and <br>\nproofs that work in Isabelle2005 with Isabelle2013 code then I can't <br>\nuse Isabelle2013.</p>\n</blockquote>\n<p>That is hopeless.  The very idea of Isabelle as I know it since 1993 <br>\nhas been to continously upgrade old things, such that everybody moves <br>\non. AFP greatly helps to do that, already since 2003.</p>\n<p>I was given to understand it doesn't take ML proofs.</p>\n<blockquote>\n<p>Incidentally you recently wrote \"I am myself involved in Isabelle <br>\nonly since 1993, but I've never seen a commitment to \"backwards <br>\ncompatibility\".\"  If \"commitment\" means an absolute guarantee you may <br>\nbe right, but there certainly was a time when developers cared about <br>\nit - see the reference to Asm_lr_simp_tac in the NEWS file</p>\n</blockquote>\n<p>The amount of care has actually increased in recent years -- care <br>\nabout getting forwards, and removing old things of no other value than <br>\nhistory.</p>\n<p>The example about Asm_lr_simp_tac merely tells that Stefan Berghofer <br>\nimproved the Simplifier, then he found that the new scheme broke some <br>\nvery old unstructured proof scripts (99 subgoals becoming 101), so he <br>\nmade a workaround to preserve that old material.  Getting rid of <br>\nobsolete things takes a lot of extra time, and one always needs to get <br>\nat a realistic balance what to do and what not.</p>\n<p>That's exactly what caring about backwards compatibility means - <br>\nrecognising that something that is used in users' proofs has, for that <br>\nreason, value other than history.<br>\nIf we would preserve old things by default, we could compete with <br>\nSun/Oracle about cruft in the Java standard libraries, and that code <br>\nbase is actually a bit younger than Isabelle.<br>\nI'm afraid I don't know Java, but the extent of the stability seen in C <br>\nor Standard ML standard libraries, while not absolute, would be a useful <br>\ncomparison.</p>\n</blockquote>\n<p>Regards,</p>\n<p>Jeremy</p>\n<blockquote>\n<p>Makarius</p>\n</blockquote>",
        "id": 294249982,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660910366
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nWhat you get via theory_of_thm is merely a certificate of the background <br>\ntheory context of some derived entity.  You should hardly ever access that <br>\nin your ML at all (the main exception is to use Thm.cterm_of or <br>\nThm.ctyp_of to re-certify things according to a given certificate).</p>\n<p>Historically, the theory of a theorem was at some point used as \"the <br>\ncontext\", e.g. for parsing or printing.  That has long been replaced by an <br>\nexplicit proof context of type Proof.context.  If you don't have the <br>\nproper context around in your ML function that's bad luck: you must pass <br>\nit in as explicit argument.  The system always provides you a proper <br>\ncontext where you need it, and you just pass on what you've got in the <br>\ncanonical way.</p>\n<p>When experimenting with the 'ML' command in Isar, you can use the <br>\nantiquotation @{context} to refer to the context of the ML compiler <br>\ninvocation at that point.  It is important to understand the distinction <br>\nbetween static compile-time and dynamic run-time, though.  I.e. you should <br>\nnot hardwire some @{context} into your Isabelle/ML, unless it is really <br>\nmeant to stick to a particular context for later use with proof tools.</p>\n<p>Makarius</p>",
        "id": 294249997,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660910372
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nI don't think there was a point, just historical reasons to have done <br>\ncertain things a certain way at some point.  It does not mean there is <br>\nnever a way beyond accidental points in history.</p>\n<p>All Isabelle/ML is inside some theory file, either directly via 'ML' or <br>\nindirectly via 'ML_file'.  You are never outside.</p>\n<p>Moreover, there are language elements like the Isar proof method called <br>\n\"tactic\" that allows to use Isabelle/ML expressions inside Isar proof <br>\ntext.</p>\n<p>Makarius</p>",
        "id": 294250015,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660910378
    },
    {
        "content": "<p>From: Jeremy Dawson &lt;<a href=\"mailto:Jeremy.Dawson@anu.edu.au\">Jeremy.Dawson@anu.edu.au</a>&gt;<br>\nMakarius wrote:</p>\n<blockquote>\n<p>On Tue, 10 Sep 2013, Jeremy Dawson wrote:</p>\n<blockquote>\n<blockquote>\n<p>Today, but starting already in 1998, everything is centered around <br>\nIsabelle theory files.  It is very hard to escape from that, and <br>\nthere is no point to do it, apart from extreme forms of nostalgy.<br>\nIf \"escape from that\" includes using ML outside a theory file, my <br>\nlast email just explained the point to it.</p>\n</blockquote>\n</blockquote>\n<p>I don't think there was a point, just historical reasons to have done <br>\ncertain things a certain way at some point.  It does not mean there is <br>\nnever a way beyond accidental points in history.</p>\n<p>All Isabelle/ML is inside some theory file, either directly via 'ML' <br>\nor indirectly via 'ML_file'.  You are never outside.</p>\n<p>What I am referring to is the use of ML as described in section 1.4 <br>\n\"Reading theories\" of the reference manual (or at least, of the relevant <br>\nversions of it)</p>\n</blockquote>\n<p>Jeremy</p>\n<blockquote>\n<p>Moreover, there are language elements like the Isar proof method <br>\ncalled \"tactic\" that allows to use Isabelle/ML expressions inside Isar <br>\nproof text.</p>\n<p>Makarius<br>\n</p>\n</blockquote>",
        "id": 294250043,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660910396
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nFor several years already that manual with the internal identifier \"ref\" <br>\nhas been called \"Old Isabelle Reference Manual\", with the following note <br>\nat the start:</p>\n<p>Note: this document is part of the earlier Isabelle documentation and is<br>\n   mostly outdated. Fully obsolete parts of the original text have already<br>\n   been removed. The remaining material covers some aspects that did not<br>\n   make it into the newer manuals yet.</p>\n<p>Going back some years, e.g. to Isabelle2008 there is still a section 1.4, <br>\nbut it is obsolete for quite a long time already.  In Isabelle2013 that <br>\nsection is already removed, and in the coming Isabelle2013-1 the whole <br>\n\"ref\" manual will no longer be there.  (At last -- after 5 years of <br>\nrefurbishing its content for the newer manuals, notably \"isar-ref\" and <br>\n\"implementation\".)</p>\n<p>Makarius</p>",
        "id": 294250068,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660910402
    },
    {
        "content": "<p>From: Jeremy Dawson &lt;<a href=\"mailto:Jeremy.Dawson@anu.edu.au\">Jeremy.Dawson@anu.edu.au</a>&gt;<br>\nMakarius,</p>\n<p>I'm sorry for the confusion, I thought it was apparent from my earlier <br>\nemails that I am using Isabelle2005</p>\n<p>Cheers,</p>\n<p>Jeremy</p>\n<p>Makarius wrote:</p>",
        "id": 294250146,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660910413
    }
]