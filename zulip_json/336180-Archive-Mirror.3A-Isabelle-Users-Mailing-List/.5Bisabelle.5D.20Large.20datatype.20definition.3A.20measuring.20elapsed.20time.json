[
    {
        "content": "<p>From: \"C. Diekmann\" &lt;<a href=\"mailto:diekmann@in.tum.de\">diekmann@in.tum.de</a>&gt;<br>\nHi,</p>\n<p>I'm formalizing the syntax of IPv6 Addresses.</p>\n<p>I made a quite large datatype.</p>\n<p><a href=\"https://github.com/diekmann/Iptables_Semantics/blob/ccc5d5f9f0e09834c676cb36380409c095e6580d/thy/Bitmagic/IPv6Addr.thy#L98\">https://github.com/diekmann/Iptables_Semantics/blob/ccc5d5f9f0e09834c676cb36380409c095e6580d/thy/Bitmagic/IPv6Addr.thy#L98</a></p>\n<p>The datatype definition is loading on my laptop within some minutes.</p>\n<p>However, when I ctrl+hover the datatype command, it tells me:<br>\n  command \"datatype\"<br>\n  32.453s elapsed time, 42.494s cpu time, 11.460s GC time</p>\n<p>Sitting there with a stop watch, it took more than 3 minutes. Is this<br>\na bug in the time measurement of datatype?</p>\n<p>In general, is there a way to speed up the datatype definition?</p>\n<p>Best,<br>\n  Cornelius</p>",
        "id": 294670122,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661173156
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nOn Wed, 16 Mar 2016, C. Diekmann wrote:</p>\n<blockquote>\n<p>I'm formalizing the syntax of IPv6 Addresses.</p>\n<p>I made a quite large datatype.</p>\n</blockquote>\n<p>It should be possible to formalize this more conveniently with small <br>\ndatatypes and fewer cases.</p>\n<blockquote>\n<p>The datatype definition is loading on my laptop within some minutes.</p>\n<p>However, when I ctrl+hover the datatype command, it tells me:<br>\n command \"datatype\"<br>\n 32.453s elapsed time, 42.494s cpu time, 11.460s GC time</p>\n<p>Sitting there with a stop watch, it took more than 3 minutes. Is this<br>\na bug in the time measurement of datatype?</p>\n</blockquote>\n<p>\"Bug\" is already meaningless in most software-engineering contexts. Here <br>\nwe have a mix of computing, mathematics and physics. So it is hard to tell <br>\nwhat the outcome is precisely.</p>\n<p>What is measured here is the toplevel transaction time. Thus forks due to <br>\ninternal proofs are omitted, and arbitrary environmental effects on CPU <br>\ntime are added.</p>\n<p>Makarius</p>",
        "id": 294670191,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661173175
    },
    {
        "content": "<p>From: Mario Carneiro &lt;<a href=\"mailto:di.gama@gmail.com\">di.gama@gmail.com</a>&gt;<br>\nA suggestion on how to simplify the definition (I am not an Isabelle expert<br>\nso I will have to guess some notation). A \"list with optional omission\" can<br>\nbe represented as a type List A | (List A, List A) (that is, a tuple of two<br>\nlists or one), and there is a function from this type and given a default<br>\nvalue a : A, to Option(FixedList n A) (lists of length n) which takes l :<br>\nList A to Some(l) if Len(l) = n and None otherwise, and takes (k,l) to<br>\nSome(k ++ [a; n - Len(k) - Len(l)] ++ l) (where ++ is list concat and [a;<br>\nn] is a list containing n a's) if n - Len(k) - Len(l) is nonnegative and<br>\nNone otherwise.</p>\n<p>Your IPv6 type is the above with n = 8 and A = \"16 word\", a = 0, and the<br>\nvalid members of the type are those elements of List A | (List A, List A)<br>\nthat don't map to None.</p>\n<p>Mario</p>",
        "id": 294670266,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661173200
    }
]