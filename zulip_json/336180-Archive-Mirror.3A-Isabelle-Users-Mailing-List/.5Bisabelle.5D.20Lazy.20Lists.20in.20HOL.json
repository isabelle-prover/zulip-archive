[
    {
        "content": "<p>From: Thomas GÃ¶thel &lt;<a href=\"mailto:tgoethel@cs.tu-berlin.de\">tgoethel@cs.tu-berlin.de</a>&gt;<br>\nHello,<br>\nI wanted to use the LazyList - theory of HOL (LList.thy) from Lawrence<br>\nPaulson. Unfortunately I didn't find a theory containing the typical<br>\nhigher-order functions like filter, zip, etc for \"'a llist\". Furthermore I<br>\nmiss a predicate like is_finite for checking finiteness of a lazy list. Is<br>\nthere such an additional theory or do I have to define these functions<br>\nmyself?<br>\nMaybe it is possible to use the definitions of SList.thy, does anybody know<br>\nhow?</p>\n<p>Bye,<br>\nThomas</p>",
        "id": 294047783,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660818035
    },
    {
        "content": "<p>From: Alexander Krauss &lt;<a href=\"mailto:krauss@in.tum.de\">krauss@in.tum.de</a>&gt;<br>\nThomas,</p>\n<blockquote>\n<p>I wanted to use the LazyList - theory of HOL (LList.thy) from Lawrence<br>\nPaulson. Unfortunately I didn't find a theory containing the typical<br>\nhigher-order functions like filter, zip, etc for \"'a llist\". Furthermore I<br>\nmiss a predicate like is_finite for checking finiteness of a lazy list. Is<br>\nthere such an additional theory or do I have to define these functions<br>\nmyself?</p>\n</blockquote>\n<p>Unfortunately, the theory of lazy lists is not so well developed, so you<br>\nhave to define the concepts you need yourself.</p>\n<p>You might also want to look at the \"Lazy Lists II\" theory in the Archive<br>\nof Formal Proofs (<a href=\"http://afp.sourceforge.net\">http://afp.sourceforge.net</a>) by Stefan Friedrich, which<br>\nmight contain some of the definitions you need.</p>\n<blockquote>\n<p>Maybe it is possible to use the definitions of SList.thy, does anybody know<br>\nhow?</p>\n</blockquote>\n<p>No. Strict and lazy lists are different types, and there is no easy way<br>\nto lift definitions. You can of course take the \"SList.thy\" as a<br>\nguideline, but the definition principles on lazy lists are very<br>\ndifferent (corecursion vs. recursion) and not automated very well at the<br>\nmoment. Notably, you must use the \"llist_corec\" combinator, as in the<br>\ndefinitions of \"lmap\", \"lappend\" etc.</p>\n<p>Should you decide to extend the available theories with more generally<br>\nuseful definitions and theorems, your contribution is welcome of course...</p>\n<p>Alex</p>",
        "id": 294047803,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660818042
    },
    {
        "content": "<p>From: Lawrence Paulson &lt;<a href=\"mailto:lp15@cam.ac.uk\">lp15@cam.ac.uk</a>&gt;<br>\nThe files LList.thy and SList.thy represent experiments in the  <br>\ndevelopment of datatypes. Because HOL does not offer a domain theory,  <br>\nlazy lists are defined using corecursion, which derives from the  <br>\ncategory-theoretic notion of finality.</p>\n<p>The idea of corecursion is that you do a certain amount of  <br>\ncomputation and then return either</p>\n<p>* None: the result is the empty list<br>\n   * Some(x,z): the result begins with x, and remaining elements can  <br>\nbe obtained using corecursion with the value z.</p>\n<p>Zip should be easy to define corecursively, but filter is tricky  <br>\nbecause an unlimited computation may be necessary to obtain the next  <br>\nelement.</p>\n<p>My paper \"Mechanizing coinduction and corecursion in higher-order  <br>\nlogic\" may be helpful:<br>\n&lt;<a href=\"http://www.cl.cam.ac.uk/TechReports/UCAM-CL-TR-304.html\">http://www.cl.cam.ac.uk/TechReports/UCAM-CL-TR-304.html</a>&gt;</p>\n<p>Larry Paulson</p>",
        "id": 294047821,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660818048
    }
]