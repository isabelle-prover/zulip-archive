[
    {
        "content": "<p>From: Randy Pollack &lt;<a href=\"mailto:rpollack@inf.ed.ac.uk\">rpollack@inf.ed.ac.uk</a>&gt;<br>\nI frequently use the forms:</p>\n<p>case (constr v1 v2 ...)<br>\n  hence j1:\"...\" and j2:\"...\" ... by auto</p>\n<p>or </p>\n<p>case (constr v1 v2 ...)<br>\n  have j1:\"...\" and j2:\"...\" ... by fact</p>\n<p>Both of these now give a warning:</p>\n<p>### Legacy feature: implicit use of prems in assumption proof</p>\n<p>I would not like to see these forms eliminated.  It seems natural to<br>\nset out the known facts before working on the proof.  </p>\n<p>What is the intended replacement for this style?  If users are<br>\nintended to use the names such as constr.hyps and constr.prems, could<br>\nthese names be shown along with \"this\" in the goal window?</p>\n<p>This naming scheme, constr.hyps and constr.prems, could be improved.<br>\nIn my old system LEGO, when defining an inductive type/relation you<br>\ncould (optionally) give names to side conditions/premises.  When you<br>\ndid induction on that type/relation, the assumptions were given names<br>\nderived from the premises they came from, and the induction hypotheses<br>\nwere also given names derived from the premises they came from.<br>\nE.g. we might have beta_app.leftPrem and beta_app.leftPrem.ih, where<br>\nbeta_app is the rule name, leftPrem the name of the premise, and<br>\nbeta_app.leftPrem.ih the induction hypothesis derived from the left<br>\npremise of thet rule.</p>\n<p>At the least, Isar could name the induction hypotheses something like<br>\nconstr.ih instead of mixing them up in constr.hyps.</p>\n<p>Best,<br>\nRandy</p>",
        "id": 294051049,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660819489
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nOn Fri, 17 Aug 2007, Randy Pollack wrote:</p>\n<blockquote>\n<p>I frequently use the forms:</p>\n<p>case (constr v1 v2 ...)<br>\n  hence j1:\"...\" and j2:\"...\" ... by auto</p>\n<p>or </p>\n<p>case (constr v1 v2 ...)<br>\n  have j1:\"...\" and j2:\"...\" ... by fact</p>\n<p>Both of these now give a warning:</p>\n<p>### Legacy feature: implicit use of prems in assumption proof</p>\n<p>I would not like to see these forms eliminated.  It seems natural to<br>\nset out the known facts before working on the proof.  </p>\n</blockquote>\n<p>This warning indicates that the above 'by' steps are actually \"deceptive\", <br>\nmeaning that both auto and fact failed to solve the atomic sub-proofs <br>\ncompletely.</p>\n<p>In the second case you just need to say \"fact+\" to produce multiple facts.  </p>\n<p>The first case needs to be debugged by looking at the internal goal state, <br>\nafter turning <code>by auto'' into </code>apply auto'' temporarily.  You will then <br>\nsee that some subgoals are left over, which happen to be solvable by <br>\nreferring to prems that are not indicated explicitly in the text.  I.e. <br>\n``by auto'' was actually wrong as a description of how the proof works.</p>\n<blockquote>\n<p>This naming scheme, constr.hyps and constr.prems, could be improved.</p>\n</blockquote>\n<p>Yes, this will happen at some later stage.  At the moment we are glad <br>\nenough to have gotten rid of alphabetically sorted bound variables.</p>\n<p>Makarius</p>",
        "id": 294051057,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660819495
    }
]