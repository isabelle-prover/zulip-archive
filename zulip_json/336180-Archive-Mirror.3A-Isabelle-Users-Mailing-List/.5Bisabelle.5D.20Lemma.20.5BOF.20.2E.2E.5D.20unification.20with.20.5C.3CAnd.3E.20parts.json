[
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\nAm 11/05/2013 18:12, schrieb C. Diekmann:</p>\n<blockquote>\n<p>Hello,</p>\n<p>given these two lemmata<br>\n lemma l1: \"(\\&lt;And&gt; E E'. E' \\&lt;subseteq&gt; E ==&gt; P E ==&gt; P E') ==&gt; D\"<br>\n      sorry</p>\n<p>lemma l2: \"(\\&lt;And&gt; E E'. E' \\&lt;subseteq&gt; E ==&gt; P E ==&gt; P E')\"<br>\n      sorry</p>\n<p>writing<br>\n    thm l1[OF l2]<br>\nI expected to get D. However, I get something very strange. I get<br>\n    (\\&lt;And&gt;E E'. E' \\&lt;subseteq&gt; E ==&gt; ?P E ==&gt; ?E'1 E E' \\&lt;subseteq&gt; ?E1 E E')<br>\n    ==&gt; (\\&lt;And&gt;E E'. E' ⊆ E ==&gt; ?P E ==&gt; ?P1 E E' (?E1 E E')) ==&gt; ?D<br>\n       [%E E'. ?P1 E E' (?E'1 E E') =?= %E. ?P]</p>\n</blockquote>\n<p>OF treats !! and ==&gt; specially and lifts l2 over l1. The same thing happens when<br>\nyou apply a rule to a proof state with !! and ==&gt;. In the latter situation you<br>\ncan prevent that by using `fact' instead of rule, but I don't know if there is<br>\nan analogue for OF. Would like to have that from time to time, too.</p>\n<p>Tobias</p>\n<blockquote>\n<p>What am I doing wrong, what is happening? In lemma l1, I conclude D<br>\nfrom some (anti-monotonicity) of P. In lemma l2 I show this<br>\nanti-monotonicity. Is there a better way to express this?</p>\n<p>Symbols: \\&lt;And&gt; corresponds to /\\, or !! written in ASCII.</p>\n<p>Regards<br>\n  Cornelius<br>\n</p>\n</blockquote>",
        "id": 294241286,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660907087
    },
    {
        "content": "<p>From: Lawrence Paulson &lt;<a href=\"mailto:lp15@cam.ac.uk\">lp15@cam.ac.uk</a>&gt;<br>\n\"What's happening\" is a technical question about Isabelle's internals, but the other question is whether you really need to do things this way. The purpose of meta-level connectives such as !! is to create a framework in which proofs can be constructed. If you are doing things with the framework itself, then to some extent you become an implementer and you have to expect things to become very tricky. But there may be a way to conduct your proof within the style shown in the various tutorials.</p>\n<p>Larry</p>",
        "id": 294241302,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660907095
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nAs already pointed out by Larry, rule composition via \"OF\" (or \"THEN\" with <br>\ndifferent argument order), or \"rule\" as a proof method works exactly like <br>\nthat. You should study relevant Isabelle documentation until you expect <br>\nthe correct outcome and don't consider it to be strange.  This is about <br>\nhigher-order natural deduction in Isabelle/Pure.  Applications should not <br>\nstep out of that comfortable environment without good reason (which means <br>\nyou need to understand first what is its very purpose).</p>\n<p>Since contemporary Isabelle has a bit too many manuals to keep an <br>\noverview, it might help to look at the \"Old Introduction to Isabelle\" <br>\nmanual -- where \"Isabelle\" means Isabelle/Pure, not Isabelle/HOL -- or the <br>\npaper \"The next 700 theorem provers\" by Larry Paulson, 1990.</p>\n<p>Makarius</p>",
        "id": 294241365,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660907119
    },
    {
        "content": "<p>From: \"C. Diekmann\" &lt;<a href=\"mailto:diekmann@in.tum.de\">diekmann@in.tum.de</a>&gt;<br>\nThank you all for your answers. Today I learned that I want to use !<br>\n(∀), the ordinary FOL all quantifier.</p>",
        "id": 294241384,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660907127
    },
    {
        "content": "<p>From: Lawrence Paulson &lt;<a href=\"mailto:lp15@cam.ac.uk\">lp15@cam.ac.uk</a>&gt;<br>\nAnother possibility might be to structure your proof something like this:</p>\n<p>have \"(\\&lt;And&gt; E E'. E' \\&lt;subseteq&gt; E ==&gt; P E ==&gt; P E')\" sorry<br>\nhence \"D\"</p>\n<p>Larry</p>",
        "id": 294241390,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660907132
    }
]