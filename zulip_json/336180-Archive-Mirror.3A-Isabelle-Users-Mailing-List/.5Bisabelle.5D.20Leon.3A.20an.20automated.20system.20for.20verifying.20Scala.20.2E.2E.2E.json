[
    {
        "content": "<p>From: Lars Hupel &lt;<a href=\"mailto:hupel@in.tum.de\">hupel@in.tum.de</a>&gt;<br>\nI'm happy to announce that the Leon system, developed by Viktor Kuncak and<br>\nhis lab at EPFL, has gained support for Isabelle.</p>\n<p>Leon is an automated system for verifying Scala code. You can find more<br>\ndetails on its website [0], try it out online [1], read the sources [2]<br>\nand the documentation [3]. In a nutshell, it reads a proper (functional)<br>\nsubset of Scala and is able to verify assertions in the program. Via<br>\ndesugaring, it also supports some imperative features. Aside from<br>\nverification, it can also find counterexamples (should the assertions not<br>\nhold), and attempt to synthesize &amp; repair programs. The underlying proof<br>\nobligations are solved with the automated theorem provers Z3 and CVC4.</p>\n<p>In the past couple of weeks, Isabelle has been connected to Leon; that is,<br>\nproof obligations can be passed to Isabelle, giving users access to the<br>\nvast library of mathematical/programming formalisms which are already<br>\navailable in Isabelle and increasing trustworthiness of the proofs. It is<br>\nalso possible to convert Scala code into Isabelle code, whereas<br>\npreviously, only the opposite direction was supported. For this<br>\nconnection, Makarius' PIDE technology is used (sometimes somewhat<br>\ncreatively, I have to admit). The work is now fully integrated into Leon.</p>\n<p>Here's an example of what can be proven:</p>\n<p>@isabelle.proof(method = \"\"\"(induct \"&lt;var xs&gt;\", auto)\"\"\")<br>\n  def lemma[A, B, C](xs: List[A], f: A =&gt; List[B], g: B =&gt; List[C]) =<br>\n    (xs.flatMap(f).flatMap(g) == xs.flatMap(x =&gt; f(x).flatMap(g))).holds</p>\n<p>... being the associativity law of the List monad. While this is an<br>\nexample requiring explicit proof, many other properties can be proven<br>\nwithout an annotation.</p>\n<p>Note that in the above snippet, the \"method\" is an actual Isar proof<br>\nmethod. It is also possible to include larger snippets of theory sources<br>\ninto Scala sources.</p>\n<p>Some technical details are outlined in a presentation [4].</p>\n<p>[0] <a href=\"http://lara.epfl.ch/w/leon\">http://lara.epfl.ch/w/leon</a><br>\n[1] <a href=\"http://leon.epfl.ch/\">http://leon.epfl.ch/</a><br>\n[2] <a href=\"https://github.com/epfl-lara/leon\">https://github.com/epfl-lara/leon</a><br>\n[3] <a href=\"http://leon.epfl.ch/doc/\">http://leon.epfl.ch/doc/</a><br>\n[4]<br>\n<a href=\"https://speakerdeck.com/larsrh/translating-scala-programs-to-isabelle-with-leon\">https://speakerdeck.com/larsrh/translating-scala-programs-to-isabelle-with-leon</a></p>",
        "id": 294654875,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661167634
    }
]