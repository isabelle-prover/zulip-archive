[
    {
        "content": "<p>From: Mario Alvarez &lt;<a href=\"mailto:mmalvare@eng.ucsd.edu\">mmalvare@eng.ucsd.edu</a>&gt;<br>\nDear Isabelle Users,</p>\n<p>I'm currently working on a project where I want to have polymorphic \"fixes\"<br>\nconstants in locales. The context is that I'm trying to build a framework<br>\nfor composing semantics of certain types of syntax trees with extension<br>\npoints represented as Isabelle type variables. My goal is to achieve a<br>\nseparation of concerns between pieces of the semantics that only care about<br>\nthe structure of the tree, and other that only care about the concrete data<br>\nembedded at individual nodes in the tree. For the former, I want something<br>\nlike</p>\n<p>(* 1 *) \"(forall 't1 't2 't3 . 'x =&gt; ('t1, 't2, 't3) gensyn =&gt; 'mstate =&gt;<br>\n'mstate)\"</p>\n<p>(Gensyn being the name of the syntax tree data structure). I'd like to use<br>\nlocales to declare semantics for different specialized types of this syntax<br>\ntree. Each locale will have parameters that look like the above. These<br>\nparameters are integrated together to give a semantics that has a type like<br>\nthe following:</p>\n<p>(* 2 *) \"('x, 'y, 'z) syntax =&gt; 'state =&gt; 'state\"</p>\n<p>The definition of this semantics (as an inductive) happens inside a locale<br>\nwith equation (<em>1</em>) as a fixes parameter. Note that is should be invalid<br>\nfor Isabelle<br>\nto assume that it is always the case that 't1 = 'x, 't2 = 'y, 't3 = 'z,<br>\netc. This would make the parameter \"not parametric enough\", and allow the<br>\nuser to pass in terms that \"know too much\" about the data stored at nodes<br>\nin the tree.</p>\n<p>My (handwavey) understanding of how polymorphism works in Isabelle is that<br>\nonly \"finished\" definitions are allowed to be let-polymorphic, and \"fixes\"<br>\nin locales aren't \"finished\" in the appropriate way. It seems that in<br>\nproof-contexts there is a \"let\" command that could be used that might be<br>\nhelpful here, but locales don't seem to have an equivalent.</p>\n<p>I've looked into using Isabelle's Overloading facility, but this doesn't<br>\nachieve exactly what I want, because there doesn't seem to be any way to do<br>\nOverloading inside of a local context, and I may want to declare multiple<br>\ndifferent semantics for different syntax trees of the same (specialized)<br>\ntype (I'd like to be able to isolate each one into its own locale).<br>\nTypeclasses have the same problem: I want to be able to define possibly<br>\ndifferent implementations for the same type, and let the user select them<br>\nby choosing the appropriate locale.</p>\n<p>Are there any other options I have? I've attached a stripped-down version<br>\nof what I'm trying to implement; hopefully it won't be too difficult to see<br>\nwhere this problem arises (note that I am using Isabelle2018 rather than<br>\nIsabelle2019, although I imagine that Isabelle2019 would give the same<br>\nresult).</p>\n<p>Best,<br>\nMario<br>\n<a href=\"/user_uploads/14278/i5IjVNsj-SWENotPymXj0Ooy/ParamExample.thy\">ParamExample.thy</a></p>",
        "id": 294761573,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661199843
    }
]