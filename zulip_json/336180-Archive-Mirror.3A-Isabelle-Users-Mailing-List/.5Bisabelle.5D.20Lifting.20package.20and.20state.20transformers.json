[
    {
        "content": "<p>From: Andreas Lochbihler &lt;<a href=\"mailto:andreas.lochbihler@inf.ethz.ch\">andreas.lochbihler@inf.ethz.ch</a>&gt;<br>\nDear experts of the lifting package,</p>\n<p>I wonder whether I can automate certain liftings with the Lifting package. Concretely, <br>\nsuppose I have a function foo and I want to lift it to a type of state transformers:</p>\n<p>datatype ('s, 'm) stateT = StateT (run_state: \"'s =&gt; 'm\")<br>\n   context fixes foo :: \"('a =&gt; 'm) =&gt; 'm\" begin<br>\n   definition foo_state :: \"('a =&gt; ('s, 'm) stateT) =&gt; ('s, 'm) stateT\"<br>\n     where \"foo_state f = StateT (%s. foo (%a. run_state (f a) s))\"<br>\n   end</p>\n<p>Can I (somehow) use lift_definition to define foo_state? I am thinking of something like <br>\nthe following:</p>\n<p>setup_lifting ...<br>\n   lift_definition foo_state :: \"('a =&gt; ('s, 'm) stateT) =&gt; ('s, 'm) stateT\" is foo</p>\n<p>Unfortunately, I have no idea what theorem provide to setup_lifting to make this work. I <br>\ntried with the obvious one</p>\n<p>type_definition run_state StateT UNIV</p>\n<p>but that did not work. Any ideas?</p>\n<p>Best,<br>\nAndreas</p>",
        "id": 294674722,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661174536
    },
    {
        "content": "<p>From: Peter Lammich &lt;<a href=\"mailto:lammich@in.tum.de\">lammich@in.tum.de</a>&gt;<br>\nHi Andreas,  </p>\n<p>Cant you just define an abbreviation \"lift\", and define foo_state = lift foo ?  </p>\n<p>Peter</p>\n<p>\\-------- Originalnachricht --------</p>",
        "id": 294674732,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661174542
    },
    {
        "content": "<p>From: Andreas Lochbihler &lt;<a href=\"mailto:andreas.lochbihler@inf.ethz.ch\">andreas.lochbihler@inf.ethz.ch</a>&gt;<br>\nHi Peter,</p>\n<p>The function foo is just an example. I want to do this for several other functions, each <br>\nof which has its own type. So I'd need a new abbreviation of each of them?</p>\n<p>(And I would also like to do this for a bunch of other transformers, not just state, but <br>\nI'm hoping that I get enough insights from this example to generalise it to the others.)</p>\n<p>Cheers,<br>\nAndreas</p>",
        "id": 294674753,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661174548
    },
    {
        "content": "<p>From: Dmitriy Traytel &lt;<a href=\"mailto:traytel@inf.ethz.ch\">traytel@inf.ethz.ch</a>&gt;<br>\nHi Andreas,</p>\n<p>This obviously does not work, since with the above type_definition lift_definition expects you to tell what to do with the state ’s. The following works.</p>\n<p>datatype ('s, 'm) stateT = StateT (run_state: \"'s =&gt; 'm\")<br>\ncontext fixes foo :: \"('a =&gt; 'm) =&gt; 'm\" begin</p>\n<p>lemma typedef_stateT: \"type_definition run_state StateT UNIV\"<br>\n  by unfold_locales auto<br>\nsetup_lifting typedef_stateT<br>\nlift_definition foo_state :: \"('a =&gt; ('s, 'm) stateT) =&gt; ('s, 'm) stateT\" is<br>\n  \"λf s. foo (λa. f a s)\" .<br>\nend</p>\n<p>So you can automatically insert the morphisms StateT and run_state, but I don’t think you can come up with a type_definition that hides the threading through of the state ’s from the user.</p>\n<p>Dmitriy</p>",
        "id": 294674770,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661174558
    },
    {
        "content": "<p>From: Andreas Lochbihler &lt;<a href=\"mailto:andreas.lochbihler@inf.ethz.ch\">andreas.lochbihler@inf.ethz.ch</a>&gt;<br>\nHi Dmitriy,</p>\n<p>It would be the point of using lift_definition to relieve the user from figuring out how <br>\nto pass the state through. Unfortunately, it looks as if you were right.</p>\n<p>No theorem of the form \"type_definition Rep Abs X\" will work, because it would state that <br>\nthe new type is isomorphic to the set X. But ('s, 'm) stateT has much more elements than <br>\n'm (unless 's is a singleton type), so there cannot be such an isomorphic subset.</p>\n<p>For the same reason of cardinality, no theorem \"Quotient R Abs Rep T\" can do the job, <br>\neither. Still, it feels as if some automation should be possible, as I myself found all <br>\nthe lifted versions of constants by \"type-directed programming\".</p>\n<p>Andreas</p>",
        "id": 294674802,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661174579
    },
    {
        "content": "<p>From: Ognjen Maric &lt;<a href=\"mailto:ognjen.maric@gmail.com\">ognjen.maric@gmail.com</a>&gt;<br>\nI don't know if it helps your use case, but there should still be an<br>\nisomorphism if 's is finite and 'm is infinite. At least in ZF, you can<br>\nprove from the axiom of choice that every infinite set A is equipotent<br>\nto the Cartesian product A x A - in fact, the two are equivalent by a<br>\ntheorem of Tarski. I don't know if the same holds in HOL.</p>\n<p>Ognjen</p>",
        "id": 294674833,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661174589
    },
    {
        "content": "<p>From: Andreas Lochbihler &lt;<a href=\"mailto:andreas.lochbihler@inf.ethz.ch\">andreas.lochbihler@inf.ethz.ch</a>&gt;<br>\nDear Ognjen,</p>\n<p>Equipotence of A and A * A for infinite A also holds in HOL. But in general, my state <br>\nspace 's is infinite :-(.</p>\n<p>Thanks for the suggestion,<br>\nAndreas</p>",
        "id": 294674839,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661174591
    }
]