[
    {
        "content": "<p>From: Moa Johansson &lt;<a href=\"mailto:moa.johansson@chalmers.se\">moa.johansson@chalmers.se</a>&gt;<br>\nHi,</p>\n<p>I'm currently porting some functionality from the HipSpec lemma discovery system into Isabelle. I have run into a small problem: </p>\n<p>What is the proper way of \"lifting\" the variables in a theorem to meta-variables? <br>\nI.e. when the theorem P x = Q y has been proved, I need to convert all Frees (here let's assume they are x,y) to Vars, getting P ?x = Q ?y.</p>\n<p>This happens automatically when performing proofs interactively. Basically, I think I want to have almost the functionality of the function Goal.prove, but as this raises an error when the tactic fails it doesn't quite fit. <br>\nSeems like this should be quite simple to do, perhaps this is what Thm.generalize is for? If so, what are its expected arguments? Seems like the first two are lists of all the type-variable and variable names we want to lift, but what is the int?</p>\n<p>Grateful for tips!</p>\n<p>Moa</p>",
        "id": 294264210,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660915516
    },
    {
        "content": "<p>From: Jasmin Blanchette &lt;<a href=\"mailto:jasmin.blanchette@gmail.com\">jasmin.blanchette@gmail.com</a>&gt;<br>\nHi Moa,</p>\n<p>Am 31.01.2014 um 17:11 schrieb Moa Johansson &lt;<a href=\"mailto:moa.johansson@chalmers.se\">moa.johansson@chalmers.se</a>&gt;:</p>\n<blockquote>\n<p>I'm currently porting some functionality from the HipSpec lemma discovery system into Isabelle.</p>\n</blockquote>\n<p>Great!</p>\n<blockquote>\n<p>Seems like this should be quite simple to do, perhaps this is what Thm.generalize is for? If so, what are its expected arguments? Seems like the first two are lists of all the type-variable and variable names we want to lift, but what is the int?</p>\n</blockquote>\n<p>You might want to have a look at \"Drule.generalize\". It provides a slightly higher-level interface, without the mysterious \"int\".</p>\n<p>Cheers,</p>\n<p>Jasmin</p>",
        "id": 294264218,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660915520
    },
    {
        "content": "<p>From: Lawrence Paulson &lt;<a href=\"mailto:lp15@cam.ac.uk\">lp15@cam.ac.uk</a>&gt;<br>\nI donâ€™t recognise much in the code any more, but you could consider Drule.export_without_context.</p>\n<p>Larry Paulson</p>",
        "id": 294264232,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660915526
    },
    {
        "content": "<p>From: Dmitriy Traytel &lt;<a href=\"mailto:traytel@in.tum.de\">traytel@in.tum.de</a>&gt;<br>\nHi Moa,</p>\n<p>an even higher-level interface that also works in a localized setting is <br>\nthe following:</p>\n<p>Proof_Context.export names_ctxt ctxt</p>\n<p>Here ctxt is the context in which your theorem lives (in particular the <br>\none that knows about free variables that are not really free but e.g., <br>\nfixed by a locale). The second context (names_ctxt) is the enriched <br>\nversion of ctxt where the variables to be exported have been declared <br>\n(e.g., via names_ctxt = Variable.declare_thm thm ctxt).</p>\n<p>Dmitriy</p>",
        "id": 294264249,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660915533
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nNot that one again: any of the \"without_context\" operations are even worse <br>\nthan the \"global\" ones.  That is anncient legacy.</p>\n<p>We have official type Proof.context with various elementary operations to <br>\nfix variables and export results since about 1999.  The \"implementation\" <br>\nmanual explains that in section 6.1 with various examples.</p>\n<p>Makarius</p>",
        "id": 294264258,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660915538
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nOn Fri, 31 Jan 2014, Moa Johansson wrote:</p>\n<blockquote>\n<p>What is the proper way of \"lifting\" the variables in a theorem to <br>\nmeta-variables? I.e. when the theorem P x = Q y has been proved, I need <br>\nto convert all Frees (here let's assume they are x,y) to Vars, getting P <br>\n?x = Q ?y.</p>\n</blockquote>\n<p>Note that \"lifting of variables\" has a special meaning in Isabelle <br>\nterminology, according to Larry.  The \"implementation\" manual section <br>\n2.4.2 explains that to some extent, but you won't need that here.</p>\n<p>Above, the question is where x and y were coming from.  Just using <br>\nundeclared Free variables causes lots of headaches -- one needs to <br>\nunderstand both the normal Isabelle context discipline and what happens <br>\nwithout that to get things work.</p>\n<p>It is easier to rely on the normal context discipline by default, and <br>\ntrust that this things work (they had more than a decade to mature).</p>\n<blockquote>\n<p>This happens automatically when performing proofs interactively.</p>\n</blockquote>\n<p>This is because a statement like</p>\n<p>lemma \"x = x\"</p>\n<p>has an implicit \"eigen context\" around it</p>\n<p>lemma<br>\n     fixes x :: 'a<br>\n     shows \"x = x\"</p>\n<p>So you state something for fixed x :: 'a, and get the result for arbitrary <br>\n?x :: ?'a (the type generalization is subject to Hindley-Milner <br>\npolymorphism).</p>\n<blockquote>\n<p>Basically, I think I want to have almost the functionality of the <br>\nfunction Goal.prove</p>\n</blockquote>\n<p>See implementation manual section 6.3 on Goal.prove.  It allows you to <br>\nprovide fixes and assumes just like a toplevel statement, but that needs <br>\nto be explicit in Isabelle/ML.  You can also build up the context <br>\nseparately, and export proven results from it.</p>\n<blockquote>\n<p>but as this raises an error when the tactic fails it doesn't quite fit.</p>\n</blockquote>\n<p>I don't understand that.  It seems to refer implicitly to a particular <br>\napproach used here.  Do you want to use local variables within a tactic?<br>\nThen just fix them, and export whatever you prove, and they become <br>\nschematic.</p>\n<blockquote>\n<p>Seems like this should be quite simple to do, perhaps this is what <br>\nThm.generalize is for?</p>\n</blockquote>\n<p>Thm.generalize is a primitive inference, so it is primitive, not simple. <br>\nYou can ignore that, unless you want to understand the implementation of <br>\nthe system.  Mixing primitive things with the simple high-level things <br>\nusually leads to something complicated.</p>\n<p>Makarius</p>",
        "id": 294264286,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660915550
    },
    {
        "content": "<p>From: Jeremy Dawson &lt;<a href=\"mailto:Jeremy.Dawson@anu.edu.au\">Jeremy.Dawson@anu.edu.au</a>&gt;<br>\nI don't know about recent versions of Isabelle, but in Isabelle2005 the <br>\nfunction Drule.standard does this (plus some other useful things).</p>\n<p>I see subsequent emails in the thread talk about contexts - again I <br>\ndon't know about subsequent versions of Isabelle, but in Isabelle 2005 <br>\ncontexts (as I understand the way the word is used nowadays) are not <br>\npart of a theorem.</p>\n<p>Of course current versions of Isabelle may use different functions to do <br>\nthis, and possibly it may not be so easy nowadays</p>\n<p>Cheers,</p>\n<p>Jeremy</p>",
        "id": 294267669,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660916125
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nWhat you call \"Isar\" above is merely the tactic script emulation, which is <br>\nalso called \"apply-style\" occasionally.  This is a minimal standard from <br>\naround 2002, but your ML scripts follow the one of 1998.  Proper Isar <br>\nproofs are something else.</p>\n<p>In old versions of Isabelle there is even some perl script to help in the <br>\nsemi-automatic conversion, cf. \"isabelle convert\" in Isabelle2005, but it <br>\nwas deleted later since it is long obsolete.</p>\n<p>This thread is now once again where it gets since 10 years or so: after 15 <br>\nyears of introducing a new Isabelle theory format, to replace the old <br>\nFoo.thy/Foo.ML pair, someone is still using something that hardly anybody <br>\nelse remembers or cares about.</p>\n<p>Makarius</p>",
        "id": 294267684,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660916134
    },
    {
        "content": "<p>From: Lars Noschinski &lt;<a href=\"mailto:noschinl@in.tum.de\">noschinl@in.tum.de</a>&gt;<br>\nIf your work can at least be put into the form</p>\n<p>lemma &lt;name&gt;: &lt;prop&gt;<br>\n   &lt;proof&gt;</p>\n<p>you can always escape to Isabelle/ML by using</p>\n<p>apply (tactic {* &lt;some arbitrary ML code&gt; *}<br>\n    done</p>\n<p>-- Lars</p>",
        "id": 294268250,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660916330
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nMoa, if you have any further questions, you are wolcome.  Maybe just open <br>\nanother thread, so that the carnival session can continue undisturbed <br>\nhere.  (The original question was not about \"lifting variables\" anyway.)</p>\n<p>Makarius</p>",
        "id": 294268399,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660916396
    },
    {
        "content": "<p>From: Jeremy Dawson &lt;<a href=\"mailto:Jeremy.Dawson@anu.edu.au\">Jeremy.Dawson@anu.edu.au</a>&gt;<br>\nOn 02/04/2014 02:03 AM, Lars Noschinski wrote:</p>\n<blockquote>\n<p>On 03.02.2014 12:16, Jeremy Dawson wrote:</p>\n<blockquote>\n<p>I've been told similar things on occasions before, and it turns out<br>\nnot to be true.  Unless (in this case), your \"minimal standards\" means<br>\nrewriting everything in Isar.  Which, as my previous email pointed<br>\nout, is not on, since I'm guessing my latest effort involves three to<br>\nfour hundred thousand tactic applications.<br>\nIf your work can at least be put into the form</p>\n</blockquote>\n<p>lemma &lt;name&gt;: &lt;prop&gt;<br>\n    &lt;proof&gt;</p>\n<p>you can always escape to Isabelle/ML by using</p>\n<p>apply (tactic {* &lt;some arbitrary ML code&gt; *}<br>\n     done</p>\n<p>-- Lars<br>\nWell, is this acceptable for stuff submitted to the AFP?</p>\n</blockquote>\n<p>Is the person in charge of it reading this thread?  Who is in charge of it?</p>\n<p>Is Isar-2005 code acceptable or does it have to be Isar-2014?  If the <br>\nlatter,<br>\nare there conversion guides between consecutive versions, which the AFP<br>\nmaintainers used?</p>\n<p>What are the minimal standards referred to by Makarius in his earlier post?</p>\n<p>Jeremy<br>\n&gt;<br>\n&gt;</p>",
        "id": 294268902,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660916533
    },
    {
        "content": "<p>From: Gerwin Klein &lt;<a href=\"mailto:gerwin.klein@nicta.com.au\">gerwin.klein@nicta.com.au</a>&gt;<br>\nOn 04.02.2014, at 10:27 am, Jeremy Dawson &lt;<a href=\"mailto:Jeremy.Dawson@anu.edu.au\">Jeremy.Dawson@anu.edu.au</a>&gt; wrote:</p>\n<blockquote>\n<p>On 02/04/2014 02:03 AM, Lars Noschinski wrote:</p>\n<p>On 03.02.2014 12:16, Jeremy Dawson wrote:</p>\n<blockquote>\n<blockquote>\n<p>I've been told similar things on occasions before, and it turns out<br>\nnot to be true.  Unless (in this case), your \"minimal standards\" means<br>\nrewriting everything in Isar.  Which, as my previous email pointed<br>\nout, is not on, since I'm guessing my latest effort involves three to<br>\nfour hundred thousand tactic applications.<br>\nIf your work can at least be put into the form</p>\n</blockquote>\n<p>lemma &lt;name&gt;: &lt;prop&gt;<br>\n   &lt;proof&gt;</p>\n<p>you can always escape to Isabelle/ML by using</p>\n<p>apply (tactic {* &lt;some arbitrary ML code&gt; *}<br>\n    done</p>\n<p>-- Lars<br>\nWell, is this acceptable for stuff submitted to the AFP?</p>\n</blockquote>\n</blockquote>\n<p>In exceptional situations yes. Otherwise, we prefer structured Isar over apply style, but do not mandate it. Currently about 3% of the files in the AFP are ML (50 out of 1663, 6 files use ML embedded in .thy).</p>\n<blockquote>\n<p>Is the person in charge of it reading this thread?  Who is in charge of it?</p>\n</blockquote>\n<p>Google \"archive of formal proofs editors\":</p>\n<p>\"The editors of the archive are</p>\n<p>â€¢ Gerwin Klein, National ICT Australia<br>\n        â€¢ Tobias Nipkow, Technische UniversitÃ¤t MÃ¼nchen<br>\n        â€¢ Larry Paulson, University of Cambridge\"</p>\n<blockquote>\n<p>Is Isar-2005 code acceptable or does it have to be Isar-2014?  If the latter,<br>\nare there conversion guides between consecutive versions, which the AFP<br>\nmaintainers used?</p>\n</blockquote>\n<p>Submissions must work with the current Isabelle release version (currently 2013-2).</p>\n<p>In exceptional circumstances (e.g. just before the next Isabelle release or similar), submissions for the current development version may be accepted, but they will not be listed on the front page until that Isabelle release comes out.</p>\n<p>Older Isabelle versions are not accepted.</p>\n<p>The rationale is that users should be able to download any AFP entry with the current Isabelle release and have everything work out of box. Entries are maintained to stay current over time.</p>\n<blockquote>\n<p>What are the minimal standards referred to by Makarius in his earlier post?</p>\n</blockquote>\n<p>For the AFP: <a href=\"http://afp.sourceforge.net/submitting.shtml\">http://afp.sourceforge.net/submitting.shtml</a></p>\n<p>Cheers,<br>\nGerwin</p>\n<hr>\n<p>The information in this e-mail may be confidential and subject to legal professional privilege and/or copyright. National ICT Australia Limited accepts no liability for any damage caused by this email or its attachments.</p>",
        "id": 294268959,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660916551
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nNo, Isabelle2005 has the same notion of global background context (type <br>\n\"theory\") and local proof context (type \"Proof.context\"), it also has <br>\nlocales and other applications of local context routinely available.  The <br>\nthing that is part of the thm is merely a certificate of the background <br>\ntheory, not a proper context.  (It is merely a historical accident that <br>\nthe certificate also contains the full background theory content, not just <br>\nits identification stamp.)</p>\n<p>Drule.standard was already disruptive to local situations in Isabelle2005, <br>\nbut many more tools were not properly localized, so it did not stand out <br>\nparticularly.</p>\n<p>Starting with Isabelle2007, old things were systematically removed under <br>\nthe label of \"localization\".  That is a long story and still not finished, <br>\nbut the system is continously converging to a fully local context <br>\ndispliciple for all proof tools and definitional packages.</p>\n<p>The jump from Isabelle2005 to Isabelle2007 (with 25 months distance) also <br>\nmarks the point where really ancient things from the 1990-ies were <br>\nremoved. This is the deeper reason why you are yourself still stuck with <br>\nit, since it is possible to pretend that it is Isabelle98.</p>\n<p>Consequently we have every few months a thread on this mailing list to <br>\nuncover features of historic Isabelle versions that hardly anybody <br>\nremembers anymore.</p>\n<p>Makarius</p>",
        "id": 294269005,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660916569
    },
    {
        "content": "<p>From: Jeremy Dawson &lt;<a href=\"mailto:Jeremy.Dawson@anu.edu.au\">Jeremy.Dawson@anu.edu.au</a>&gt;<br>\nHi Makarius,</p>\n<p>Although you say \"No\", you seem to be agreeing with me that a theorem in <br>\nIsabelle2005 is associated with a global background context (type <br>\n\"theory\") and not a local proof context (type \"Proof.context\") (I take <br>\nit that this is the same thing as a \"proper context\").</p>\n<p>More importantly you seem to regard things from the 1990-ies as really <br>\nancient.  While that may be so in the context of computer hardware, it's <br>\nnot so in the context of mathematical proofs. The pen and paper <br>\nmathematical proofs I did in the 1970s are still 100% useful today, and <br>\nthat's the way I want it to be.</p>\n<p>Jeremy</p>",
        "id": 294269207,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660916640
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nOn Sun, 2 Feb 2014, Jeremy Dawson wrote:</p>\n<blockquote>\n<p>Although you say \"No\", you seem to be agreeing with me that a theorem in <br>\nIsabelle2005 is associated with a global background context (type \"theory\") <br>\nand not a local proof context (type \"Proof.context\") (I take it that this is <br>\nthe same thing as a \"proper context\").</p>\n</blockquote>\n<p>Yes, type thm has a back-reference to some background theory.  This is its <br>\ncertificate in the sense of the LCF kernel.  It is not a proper context. <br>\n(Better forget functions like \"the_context\" that might still be in one of <br>\nyour ancient Isabelle versions.)</p>\n<p>In contrast, a proper context has type Proof.context, and is separate from <br>\ntype thm. When you work with formal entities (typ, term, thm) in <br>\nIsabelle/ML, they implicitly \"belong\" to a ctxt: Proof.context.  The <br>\ncontext is required for all non-trivial operations: parsing, printing, <br>\nadvanced proof tools.</p>\n<p>If you don't have a proper context, that's bad, but there is no problem to <br>\nget one.  Just make your ML function depend on ctxt: Proof.context, and <br>\npropagate the context you get from the Isabelle framework, e.g. in <br>\ncommands like 'method_setup'.</p>\n<p>(As usual I am speaking here of current Isabelle versions, lets say 5 <br>\nyears back in time, but not 15 or 20.)</p>\n<blockquote>\n<p>More importantly you seem to regard things from the 1990-ies as really <br>\nancient.  While that may be so in the context of computer hardware, it's <br>\nnot so in the context of mathematical proofs. The pen and paper <br>\nmathematical proofs I did in the 1970s are still 100% useful today, and <br>\nthat's the way I want it to be.</p>\n</blockquote>\n<p>So how about your Isabelle98-style ML tactic scripts in Isabelle2005 in <br>\nthis respect?  Are they really proofs in any sense of the word?  Can <br>\nanybody read them today, lets say without struggling days or weeks to make <br>\nIsabelle2005 run on current systems?</p>\n<p>The Proof.context was introduced shortly after Isabelle98 in order to <br>\nsupport structured proofs in Isar.  Later it turned out as generally <br>\nuseful concept, so after 2000 or so, more and more tools became <br>\ncontext-aware.  That made a big difference: before there was unsure <br>\ntinkering with free and schematic variables by hand, never being sure if <br>\nthey could clash with other variables from the environment; afterwards <br>\nthings actually started working reliably.</p>\n<p>Makarius</p>",
        "id": 294269732,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660916771
    },
    {
        "content": "<p>From: Jeremy Dawson &lt;<a href=\"mailto:Jeremy.Dawson@anu.edu.au\">Jeremy.Dawson@anu.edu.au</a>&gt;<br>\nOn 02/02/2014 05:27 AM, Makarius wrote:</p>\n<blockquote>\n<p>On Sun, 2 Feb 2014, Jeremy Dawson wrote:</p>\n<blockquote>\n<p>Although you say \"No\", you seem to be agreeing with me that a theorem <br>\nin Isabelle2005 is associated with a global background context (type <br>\n\"theory\") and not a local proof context (type \"Proof.context\") (I <br>\ntake it that this is the same thing as a \"proper context\").</p>\n</blockquote>\n<p>Yes, type thm has a back-reference to some background theory. This is <br>\nits certificate in the sense of the LCF kernel.  It is not a proper <br>\ncontext. (Better forget functions like \"the_context\" that might still <br>\nbe in one of your ancient Isabelle versions.)</p>\n<p>In contrast, a proper context has type Proof.context, and is separate <br>\nfrom type thm. When you work with formal entities (typ, term, thm) in <br>\nIsabelle/ML, they implicitly \"belong\" to a ctxt: Proof.context.  The <br>\ncontext is required for all non-trivial operations: parsing, printing, <br>\nadvanced proof tools.</p>\n<p>If you don't have a proper context, that's bad, but there is no <br>\nproblem to get one.  Just make your ML function depend on ctxt: <br>\nProof.context, and propagate the context you get from the Isabelle <br>\nframework, e.g. in commands like 'method_setup'.</p>\n<p>(As usual I am speaking here of current Isabelle versions, lets say 5 <br>\nyears back in time, but not 15 or 20.)</p>\n<blockquote>\n<p>More importantly you seem to regard things from the 1990-ies as <br>\nreally ancient.  While that may be so in the context of computer <br>\nhardware, it's not so in the context of mathematical proofs. The pen <br>\nand paper mathematical proofs I did in the 1970s are still 100% <br>\nuseful today, and that's the way I want it to be.</p>\n</blockquote>\n<p>So how about your Isabelle98-style ML tactic scripts in Isabelle2005 <br>\nin this respect?  Are they really proofs in any sense of the word?  <br>\nCan anybody read them today, lets say without struggling days or weeks <br>\nto make Isabelle2005 run on current systems?</p>\n<p>Hi Makarius,</p>\n</blockquote>\n<p>Whether they are proofs is a question which others might debate, and <br>\nhave done so, at least since the proof of the four-colour theorem, if <br>\nnot before.  Whether they can be read today (without running them on an <br>\nIsabelle system) - with only the greatest of difficulty. They're to be <br>\nrun on an appropriate system. Reading their source is more difficult <br>\nthan a document in LaTex or HTML, easier than a document in PostScript <br>\nor PDF.  And I can read (on the computer) documents dating from 2005 in <br>\nall of these formats without \"struggling days or weeks to make [the 2005 <br>\nversions of interpreters of those languages] run on current systems\".  <br>\nMy whole point is that it should NOT be difficult for anyone to run <br>\nproofs today which were written in 2005 (or, indeed, much earlier).</p>\n<p>And of course if I were to write out _all_ the steps of the proofs I've <br>\ndone recently, whether in Isar, or any other language without (eg) <br>\nTRYALL (EVERY' [ ....]) there would be hundreds of thousands of lines of <br>\ncode, so no-one would read it anyway, so I don't actually see what your <br>\npoint is in asking whether anyone can read my proofs. Isar proofs <br>\nwouldn't (and, within reason, couldn't) be read either.</p>\n<blockquote>\n<p>The Proof.context was introduced shortly after Isabelle98 in order to <br>\nsupport structured proofs in Isar.  Later it turned out as generally <br>\nuseful concept, so after 2000 or so, more and more tools became <br>\ncontext-aware.  That made a big difference: before there was unsure <br>\ntinkering with free and schematic variables by hand, never being sure <br>\nif they could clash with other variables from the environment; <br>\nafterwards things actually started working reliably.</p>\n<p>I'm not clear what the problem is that you are describing but it doesn't <br>\nsound like anything I have issues with in my work.</p>\n</blockquote>\n<p>Jeremy</p>\n<blockquote>\n<p>Makarius<br>\n</p>\n</blockquote>",
        "id": 294269905,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660916839
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nOn Mon, 3 Feb 2014, Jeremy Dawson wrote:</p>\n<blockquote>\n<p>My whole point is that it should NOT be difficult for anyone to run <br>\nproofs today which were written in 2005 (or, indeed, much earlier).</p>\n</blockquote>\n<p>That problem is de-facto solved since 2004: Isabelle/AFP <a href=\"http://afp.sf.net\">http://afp.sf.net</a></p>\n<p>You merely need to put your material into shape (according to minimal <br>\nstandards that are routine today) and submit it to the editors of the <br>\narchive.  Afterwards it is usually maintained \"automagically\" to work with <br>\ncurrent Isabelle versions, but in extreme cases the editors might ask for <br>\nyou for assistance.</p>\n<p>Thus you can see old Isabelle applications from the late 1990-ies fresh <br>\nand running on Isabelle2013-2, e.g. see the 2004 edition where the <br>\narchive was started by importing material from previous years.</p>\n<blockquote>\n<blockquote>\n<p>The Proof.context was introduced shortly after Isabelle98 in order to<br>\n support structured proofs in Isar.  Later it turned out as generally<br>\n useful concept, so after 2000 or so, more and more tools became<br>\n context-aware.  That made a big difference: before there was unsure<br>\n tinkering with free and schematic variables by hand, never being sure<br>\n if they could clash with other variables from the environment;<br>\n afterwards things actually started working reliably.</p>\n<p>I'm not clear what the problem is that you are describing but it doesn't <br>\nsound like anything I have issues with in my work.</p>\n</blockquote>\n</blockquote>\n<p>That was merely an attempt to close the circle on this thread.  It started <br>\nout about proper treatment of fixed and schematic variables in Isabelle <br>\ntoday, using a proper Proof.context.  That is quite different from the <br>\nall-global nothing-local situation in Isabelle98, which we should better <br>\nforget here.</p>\n<p>Makarius</p>",
        "id": 294270090,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660916907
    },
    {
        "content": "<p>From: Jeremy Dawson &lt;<a href=\"mailto:Jeremy.Dawson@anu.edu.au\">Jeremy.Dawson@anu.edu.au</a>&gt;<br>\nHi Makarius,</p>\n<p>I've been told similar things on occasions before, and it turns out not <br>\nto be true.  Unless (in this case), your \"minimal standards\" means <br>\nrewriting everything in Isar.  Which, as my previous email pointed out, <br>\nis not on, since I'm guessing my latest effort involves three to four <br>\nhundred thousand tactic applications.</p>\n<p>If I'm wrong about this, please clarify</p>\n<p>Cheers,</p>\n<p>Jeremy</p>",
        "id": 294270458,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660917042
    }
]