[
    {
        "content": "<p>From: \"Aaron W. Hsu\" &lt;<a href=\"mailto:arcfide@sacrideo.us\">arcfide@sacrideo.us</a>&gt;<br>\nI want to do something like \"Max {[0,1],[1,0]}\" but I think that I need <br>\nto somehow define a linear ordering on \"nat list\", am I right?  Is there <br>\nsomewhere that I can read about how to do this?</p>",
        "id": 294157069,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660851634
    },
    {
        "content": "<p>From: John Wickerson &lt;<a href=\"mailto:jpw48@cam.ac.uk\">jpw48@cam.ac.uk</a>&gt;<br>\nI reckon this is a job for isabelle's \"type classes\". You should make an instantiation of the \"linorder\" class (defined in <a href=\"http://isabelle.in.tum.de/library/HOL/Orderings.html\">http://isabelle.in.tum.de/library/HOL/Orderings.html</a>) for nat lists.</p>",
        "id": 294157204,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660851702
    },
    {
        "content": "<p>From: \"Aaron W. Hsu\" &lt;<a href=\"mailto:arcfide@sacrideo.us\">arcfide@sacrideo.us</a>&gt;<br>\nThank you!  I have not used type classes before, but after reading about <br>\nthem, I think I can make it work.</p>",
        "id": 294157362,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660851769
    },
    {
        "content": "<p>From: Peter Gammie &lt;<a href=\"mailto:peteg42@gmail.com\">peteg42@gmail.com</a>&gt;<br>\nBefore you do, have a poke around the Isabelle sources. There are a few theories about list orders already in there (e.g. \"Length Lexicographic Ordering\" in src/HOL/List.thy and probably a prefix order somewhere).</p>\n<p>cheers<br>\npeter</p>",
        "id": 294157698,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660851908
    },
    {
        "content": "<p>From: \"Aaron W. Hsu\" &lt;<a href=\"mailto:arcfide@sacrideo.us\">arcfide@sacrideo.us</a>&gt;<br>\nMaybe I am going about this the wrong way.  What I really want to do is <br>\nto be able to talk about the greatest element in the domain of a function <br>\nwhose domain is finite. I want this for two reasons, but one of them is <br>\nbecause I want to state that a property that defines a subset of these <br>\nfunctions that map their domains completely.  The way I was thinking of <br>\ndoing this was getting the Max element of the domain and then saying <br>\nsomething like \"domain f = {x. low domain f &lt;= x &lt; max domain f}\" or some <br>\nsuch.</p>\n<p>Am I completely off base here?</p>",
        "id": 294158536,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660852248
    },
    {
        "content": "<p>From: Peter Gammie &lt;<a href=\"mailto:peteg42@gmail.com\">peteg42@gmail.com</a>&gt;<br>\nOn 02/05/2012, at 1:58 PM, Aaron W. Hsu wrote:</p>\n<blockquote>\n<p>On Wed, 02 May 2012 11:14:33 +1000, Peter Gammie wrote:</p>\n<blockquote>\n<p>Before you do, have a poke around the Isabelle sources. There are a few<br>\ntheories about list orders already in there (e.g. \"Length Lexicographic<br>\nOrdering\" in src/HOL/List.thy and probably a prefix order somewhere).</p>\n</blockquote>\n<p>Maybe I am going about this the wrong way.  What I really want to do is <br>\nto be able to talk about the greatest element in the domain of a function <br>\nwhose domain is finite.</p>\n</blockquote>\n<p>The greatest element of a finite set? Take a look at the Finite_Set theory - max is commutative so you can use the fold combinator for finite sets.</p>\n<blockquote>\n<p>I want this for two reasons, but one of them is <br>\nbecause I want to state that a property that defines a subset of these <br>\nfunctions that map their domains completely.  The way I was thinking of <br>\ndoing this was getting the Max element of the domain and then saying <br>\nsomething like \"domain f = {x. low domain f &lt;= x &lt; max domain f}\" or some <br>\nsuch.</p>\n<p>Am I completely off base here?</p>\n</blockquote>\n<p>I don't know.</p>\n<p>One approach is simply to carry around a predicate that indicates where the function is defined.</p>\n<p>You can see another approach in HOLCF, where the \"('a, 'b) cfun\" type constructor identifies the subset of HOL functions that are continuous. Coarsely put all lemmas that require continuity then have it as a side condition, e.g. beta_cfun.</p>\n<p>See also Alex Krauss's descriptions of his fun package, which has some treatment of partially-defined functions.</p>\n<p>It depends on how your domains and functions are parameterised. Perhaps you can give us more information on what you're trying to do.</p>\n<p>cheers<br>\npeter</p>",
        "id": 294159453,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660852588
    },
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\nWarning: HOL functions are total, there is no notion of a domain. That is, the<br>\ndomain is always the whole type. If you want to express that the function is<br>\npartial, you need to do so explicitly. Peter already suggested carrying the<br>\ndomain around explicitly or using HOLCF. Making it a function to type \"option\"<br>\nis another option ;-)</p>\n<p>Tobias</p>",
        "id": 294160271,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660852867
    },
    {
        "content": "<p>From: \"Aaron W. Hsu\" &lt;<a href=\"mailto:arcfide@sacrideo.us\">arcfide@sacrideo.us</a>&gt;<br>\nI am trying to come up with a basic notion of multi-dimensional arrays <br>\nthat I can use to model some things. Specifically, these arrays should <br>\nmap indices to specific values, be finite, and should be dense. The most <br>\nbasic thing I want to do with them is to get the shape. This, I want to <br>\nhave functions with the following type:</p>\n<p>f :: \"'a array =&gt; 'a array\" </p>\n<p>And similar. The property of density is the one I am having trouble with <br>\nright now.  I want to state that for an array of a given shape, all of <br>\nthe indices of the given shape from [0,...,0] to [n_1-1,...,n_r-1] are <br>\ndefined, but no others, assuming that the array is of rank r, where n_i <br>\nis the size of the array in dimension i, with 1 &lt;= i &lt;= r.</p>\n<p>Any suggestions on the best way to model this would be appreciated.  <br>\nRight now I am using Map.</p>",
        "id": 294160282,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660852873
    },
    {
        "content": "<p>From: Ramana Kumar &lt;<a href=\"mailto:rk436@cam.ac.uk\">rk436@cam.ac.uk</a>&gt;<br>\nOne simplistic approach to modelling those arrays would be to represent an<br>\narray as a triple (or, better, a record) of a size (of type nat) a<br>\ndimension (of type nat) and a function (of type nat list =&gt; 'a option).<br>\nThen define a predicate isArray :: 'a array_record =&gt; bool, which is<br>\nsomething along the lines of<br>\nisArray a = forall ls. (length ls = a.dimension) and (forall x. member x ls<br>\n==&gt; x &lt; a.size) &lt;=&gt; not (a.f ls = NONE)<br>\nwhich says that the function is equal to some value exactly when the index<br>\nlist is valid.<br>\n(sorry I don't know the exact Isabelle syntax for that statement above - I<br>\nusually use a different theorem prover. hopefully my pseudocode is clear.)</p>\n<p>You could then either carry that isArray predicate as a precondition on<br>\nmost everything you prove (you could use locales to make that easier, i.e.<br>\nyou wouldn't have to keep typing it out), or you could use isArray to<br>\nactually define a new array type, where all of those arrays would be valid,<br>\nbut that may make it harder to reason about them, depending on what kind of<br>\nreasoning you need to do.</p>",
        "id": 294160302,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660852883
    }
]