[
    {
        "content": "<p>From: Fabian Hellauer &lt;<a href=\"mailto:hellauer@in.tum.de\">hellauer@in.tum.de</a>&gt;<br>\nHello,</p>\n<p>I think I found a useful generalisation of List.nth_drop :</p>\n<p>lemma nth_drop':<br>\n   \"n &lt;= length xs ==&gt; drop n xs ! i = xs!(n + i)\"<br>\napply (induct n arbitrary: xs, auto)<br>\n  apply (case_tac xs, auto)<br>\ndone</p>\n<p>lemma nth_drop [simp]:<br>\n   \"n + i &lt;= length xs ==&gt; drop n xs !i = xs!(n + i)\"<br>\n   by (simp add: nth_drop')</p>\n<p>...unless maybe the intention of the strict precondition is that one <br>\n\"gets stuck\" early</p>\n<p>when trying to prove something about too large indices? In that case, it <br>\nis not strict enough:</p>\n<p>thm nth_drop[of \"length xs\" 0 xs]</p>\n<p>is a statement about element 0 of an empty list.</p>\n<p>Putting a \"&lt;\" in the precondition would fix that, I think.</p>\n<p>Cheers</p>\n<p>Fabian</p>",
        "id": 294721350,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661184934
    },
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\nI incorporated your suggestion of weaking the assumption to \"n &lt;= length xs\". As <br>\na result a handful of proofs in the AFP broke and became simpler, as one would hope.</p>\n<p>Thank you<br>\nTobias<br>\n<a href=\"/user_uploads/14278/HHHh8-L6kOMY0Ggx9BtwsK4o/smime.p7s\">smime.p7s</a></p>",
        "id": 294721561,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661184996
    }
]