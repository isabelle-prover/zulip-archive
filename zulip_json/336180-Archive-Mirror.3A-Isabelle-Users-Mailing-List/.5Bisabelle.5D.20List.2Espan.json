[
    {
        "content": "<p>From: Christian Sternagel &lt;<a href=\"mailto:c.sternagel@gmail.com\">c.sternagel@gmail.com</a>&gt;<br>\nDear all,</p>\n<p>maybe this was discussed already (I could not find such a discussion <br>\nthough). What is the reason for not having List.span in List.thy? For <br>\ncode generation it might be nice to have a setup like</p>\n<p>fun span :: \"('a ⇒ bool) ⇒ 'a list ⇒ 'a list × 'a list\" where<br>\n     \"span P (x # xs) =<br>\n       (if P x then let (ys, zs) = span P xs in (x # ys, zs)<br>\n       else ([], x # xs))\" |<br>\n     \"span _ [] = ([], [])\"</p>\n<p>lemma span_takeWhile_dropWhile [simp]:<br>\n     \"span P xs = (takeWhile P xs, dropWhile P xs)\"<br>\n     by (induct xs) simp_all</p>\n<p>declare span.simps [simp del]</p>\n<p>(see also the attached Span.thy) in the \"standard library\"?</p>\n<p>cheers</p>\n<p>chris<br>\n<a href=\"/user_uploads/14278/I7lXUaUFJjKZehMCIqmckAAk/Span.thy\">Span.thy</a></p>",
        "id": 294246562,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660909143
    },
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\nAm 13/08/2013 08:51, schrieb Christian Sternagel:</p>\n<blockquote>\n<p>Dear all,</p>\n<p>maybe this was discussed already (I could not find such a discussion though).<br>\nWhat is the reason for not having List.span in List.thy?</p>\n</blockquote>\n<p>I didn't even know about it but see that it is part of the Haskell prelude.</p>\n<blockquote>\n<p>For code generation it<br>\nmight be nice to have a setup like</p>\n<p>fun span :: \"('a ⇒ bool) ⇒ 'a list ⇒ 'a list × 'a list\" where<br>\n    \"span P (x # xs) =<br>\n      (if P x then let (ys, zs) = span P xs in (x # ys, zs)<br>\n      else ([], x # xs))\" |<br>\n    \"span _ [] = ([], [])\"</p>\n<p>lemma span_takeWhile_dropWhile [simp]:<br>\n    \"span P xs = (takeWhile P xs, dropWhile P xs)\"<br>\n    by (induct xs) simp_all</p>\n<p>declare span.simps [simp del]</p>\n</blockquote>\n<p>It should be the other way around: the lemma should be the definition and the<br>\ntwo fun-equations should be code lemmas.</p>\n<p>Are you sure it is worth adding it? The only reason is that if you know about<br>\nspan, you get more efficient code. But is is really more efficient? You only<br>\ntraverse the list once, but there is a chance (depending on the compiler) that<br>\nyou create as many intermediate pairs as there are list elements. But if<br>\nsomebody feels strongly about it, I'm happy to add it.</p>\n<p>Tobias</p>\n<blockquote>\n<p>(see also the attached Span.thy) in the \"standard library\"?</p>\n<p>cheers</p>\n<p>chris</p>\n</blockquote>",
        "id": 294246607,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660909164
    },
    {
        "content": "<p>From: Christian Sternagel &lt;<a href=\"mailto:c.sternagel@gmail.com\">c.sternagel@gmail.com</a>&gt;<br>\nDear Tobias,</p>\n<p>On 08/14/2013 04:08 PM, Tobias Nipkow wrote:</p>\n<blockquote>\n<p>Am 13/08/2013 08:51, schrieb Christian Sternagel:</p>\n<blockquote>\n<p>fun span :: \"('a ⇒ bool) ⇒ 'a list ⇒ 'a list × 'a list\" where<br>\n     \"span P (x # xs) =<br>\n       (if P x then let (ys, zs) = span P xs in (x # ys, zs)<br>\n       else ([], x # xs))\" |<br>\n     \"span _ [] = ([], [])\"</p>\n<p>lemma span_takeWhile_dropWhile [simp]:<br>\n     \"span P xs = (takeWhile P xs, dropWhile P xs)\"<br>\n     by (induct xs) simp_all</p>\n<p>declare span.simps [simp del]</p>\n</blockquote>\n<p>It should be the other way around: the lemma should be the definition and the<br>\ntwo fun-equations should be code lemmas.</p>\n</blockquote>\n<p>Okay.</p>\n<blockquote>\n<p>Are you sure it is worth adding it? The only reason is that if you know about<br>\nspan, you get more efficient code. But is is really more efficient? You only<br>\ntraverse the list once, but there is a chance (depending on the compiler) that<br>\nyou create as many intermediate pairs as there are list elements. But if<br>\nsomebody feels strongly about it, I'm happy to add it.</p>\n</blockquote>\n<p>No I'm not sure. I'm just guessing that since GHC uses this definition <br>\nof \"span\", it does make sense at least for Haskell (but of course you <br>\nare right about it not making a big difference for efficiency).</p>\n<p>Moreover, I have no strong opinion about adding \"span\" (I just stumbled <br>\nacross it, since we reinvented a specialized variant of \"span\" for <br>\n\"string\"s in IsaFoR and I recalled \"span\" from the Haskell Prelude).</p>\n<p>It is also thinkable to set up the code generator such that<br>\n\"(takeWhile P xs, dropWhile P xs)\" is replaced by \"span\" (for Haskell) <br>\nthen the user does not have to know about it.</p>\n<p>One (tiny) pro is that \"span P xs\" is shorter to type than \"(takeWhile P <br>\nxs, dropWhile P xs)\". I'm not sure how often this pattern occurs in <br>\nactual formalizations though.</p>\n<p>cheers</p>\n<p>chris</p>",
        "id": 294246615,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660909172
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nIsabelle/HOL is Isabelle/ML, but in the latter we have the following <br>\noperations:</p>\n<p>val take: int -&gt; 'a list -&gt; 'a list<br>\n   val drop: int -&gt; 'a list -&gt; 'a list<br>\n   val chop: int -&gt; 'a list -&gt; 'a list * 'a list</p>\n<p>In that terminology the above would be take_while, drop_while, and <br>\nchop_while (instead of \"span\").</p>\n<p>The chop operation was introduced in addition to the older take / drop to <br>\nsupport canonical argument order in ML, i.e. to optimize clarity and <br>\nreadability of the sources in certain situations.  (If abused this leads <br>\nto agglomerates of pointless combinators.)</p>\n<p>There was never a consideration to \"optimize\" runtime to avoid a second <br>\nwalk through the list or intermediate tupling.  Such low-level accounting <br>\nhas hardly any impact on complex applications running on complex hardware <br>\n(with lots of caches, cores etc.).</p>\n<p>Makarius</p>",
        "id": 294246665,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660909189
    }
]