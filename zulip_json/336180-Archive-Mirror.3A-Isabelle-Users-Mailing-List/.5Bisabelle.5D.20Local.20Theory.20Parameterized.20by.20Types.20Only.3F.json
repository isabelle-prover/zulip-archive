[
    {
        "content": "<p>From: scott constable &lt;<a href=\"mailto:sdconsta@syr.edu\">sdconsta@syr.edu</a>&gt;<br>\nHi All,</p>\n<p>I'm writing a portable implementation of access control logic (ACL) for<br>\nIsabelle, Coq, and HOL4. In broad terms, ACL describes relationships<br>\nbetween principals (e.g. people, organizations, devices, etc.) and commands<br>\nwhich principals can execute. For example, the ACL statement</p>\n<p>Alice says &lt;Fetch&gt;</p>\n<p>indicates that Alice is executing the command \"Fetch.\" The logic itself is<br>\nimplemented in terms of inference rules. Ideally, such a theory would be<br>\nparameterized on two types: the type of principals and the type of<br>\ncommands. For example, one interpretation of ACL could represent each<br>\nprincipal as a natural number, another interpretation could make principals<br>\nexplicit:</p>\n<p>datatype MyPrincipal = Alice | Bob</p>\n<p>In Coq, I can do this with a module parameterized by some \"Principal\" and<br>\n\"Command\" each in the universe of types, e.g.</p>\n<p>Module Type ACL.<br>\n  Parameters Principal Command : Type.<br>\n  ...<br>\nEnd ACL.</p>\n<p>What is the best practice for doing this in Isabelle?</p>\n<p>Thanks in advance,</p>\n<p>Scott Constable</p>",
        "id": 294700760,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661179101
    },
    {
        "content": "<p>From: Peter Lammich &lt;<a href=\"mailto:lammich@in.tum.de\">lammich@in.tum.de</a>&gt;<br>\nHi,  </p>\n<p>A locale fixes all polymorphic types of its parameters. If you have a type<br>\nvariable not in the type of a fixed term variable, you can fix a variable of<br>\ntype itself: fixes t :: 'a itself  </p>\n<p>Peter</p>\n<p>\\-------- Originalnachricht --------</p>",
        "id": 294700786,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661179110
    },
    {
        "content": "<p>From: scott constable &lt;<a href=\"mailto:sdconsta@syr.edu\">sdconsta@syr.edu</a>&gt;<br>\nHi Peter,</p>\n<p>First of all, thank you for your speedy response. I was able to use<br>\n\"itself\" to fix a type variable, but now I'm not sure how to actually use<br>\nit. For example, I now have:</p>\n<p>locale ACL =<br>\n  fixes principal :: \"'a itself\" and command :: \"'b itself\"<br>\nbegin</p>\n<p>datatype \"princ\" =  -- {* Principal Expressions *}<br>\n   p_PrincName \"'a\"   -- {* Principal Name *}<br>\n | p_ConjWith \"princ\" \"princ\"   -- {* Conjunction With *}<br>\n | p_Quoting \"princ\" \"princ\"   -- {* Quoting *}</p>\n<p>but now Isabelle reports an error: \"Extra type variables on right-hand side<br>\n\"'a\"\".</p>\n<p>Scott</p>",
        "id": 294700797,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661179113
    },
    {
        "content": "<p>From: Lars Hupel &lt;<a href=\"mailto:hupel@in.tum.de\">hupel@in.tum.de</a>&gt;<br>\nDear Scott,</p>\n<p>this is not possible in Isabelle/HOL.</p>\n<p>Instead, you can define the \"princ\" datatype, parameterized on 'a (and<br>\nmaybe 'b) outside of the locale. You can then use \"('a, 'b) princ\"<br>\ninside the locale.</p>\n<p>Cheers<br>\nLars</p>",
        "id": 294700808,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661179118
    },
    {
        "content": "<p>From: scott constable &lt;<a href=\"mailto:sdconsta@syr.edu\">sdconsta@syr.edu</a>&gt;<br>\nI don't think this will work for me. I'm generating the ACL grammar and<br>\ninference rules from a .ott file, and it seems that generating a<br>\nparameterized grammar is not supported by the ott tool. My planned<br>\nworkaround was to wrap the ott output in a locale to fill in the missing<br>\ntypes.</p>\n<p>Scott</p>",
        "id": 294700827,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661179127
    }
]