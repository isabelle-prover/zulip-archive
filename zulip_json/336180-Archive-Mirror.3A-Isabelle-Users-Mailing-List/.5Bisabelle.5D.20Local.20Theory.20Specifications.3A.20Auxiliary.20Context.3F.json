[
    {
        "content": "<p>From: Tjark Weber &lt;<a href=\"mailto:webertj@in.tum.de\">webertj@in.tum.de</a>&gt;<br>\nHi,</p>\n<p>I am trying to implement a rule attribute (i.e., an attribute that<br>\ntransforms theorems, such as \"simplified\"). The transformation expects<br>\na constant at a specific position in the theorem's proposition, and<br>\ncurrently fails in some local contexts because it finds an application<br>\nterm (of a locally defined variable to local parameters) instead.</p>\n<p>Should I generalize my code to handle such terms explicitly, or is<br>\nthere a way to \"lambda-drop\" the given theorem into a context where the<br>\napplication has been folded away?</p>\n<p>I have read Haftmann/Wenzel \"Local Theory Specifications in<br>\nIsabelle/Isar\" as well as Chapter 8 of the Implementation Manual and<br>\nsuspect the \"auxiliary context\" may be what I am looking for, but I am<br>\nnot sure how to obtain and use it, given the (generic) context that is<br>\npassed to the attribute. If I am on the right track at all, I would<br>\nappreciate pointers to the relevant ML functions.</p>\n<p>Many thanks in advance,<br>\nTjark</p>",
        "id": 294221124,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660897553
    }
]