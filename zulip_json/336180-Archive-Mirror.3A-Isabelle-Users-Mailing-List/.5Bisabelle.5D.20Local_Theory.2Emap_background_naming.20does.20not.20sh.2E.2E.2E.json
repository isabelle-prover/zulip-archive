[
    {
        "content": "<p>From: Andreas Lochbihler &lt;<a href=\"mailto:andreas.lochbihler@inf.ethz.ch\">andreas.lochbihler@inf.ethz.ch</a>&gt;<br>\nDear experts on name spaces,</p>\n<p>As described in another thread<br>\n<a href=\"https://lists.cam.ac.uk/mailman/htdig/cl-isabelle-users/2015-May/msg00084.html\">https://lists.cam.ac.uk/mailman/htdig/cl-isabelle-users/2015-May/msg00084.html</a><br>\nI am working around the restriction that we cannot have instantiated arguments to <br>\ninductive_set definitions. I try to imitate what the wrapper for inductive_set does using <br>\nthe attribute to_set and Local_Theory.map_background_naming to get the qualified theorem <br>\nnames.</p>\n<p>As discussed in the thread mentioned above, Local_Theory.map_background_naming does not <br>\nwork inside locales. I now discovered that it does not shadow existing theorem names, <br>\neither, when I use it inside another unnamed context. The shadowing only takes place after <br>\nall contexts have been left. In the example below, I would have expected the second \"thm <br>\nlist.simps\" to refer to the new theorem, but it does not.</p>\n<p>theory Scratch imports Main begin</p>\n<p>thm list.simps (* refers to List.list.simps *)<br>\ncontext begin<br>\ncontext begin<br>\nlocal_setup {* Local_Theory.map_background_naming (Name_Space.mandatory_path \"list\") *}<br>\nlemma simps: \"True\" ..<br>\nend<br>\nthm list.simps (* refers to List.list.simps, expected is Scratch.list.simps *)<br>\nend<br>\nthm list.simps (* refers to Scratch.list.simps *)</p>\n<p>end</p>\n<p>I guess this is another limitation of the current name space situation that might <br>\neventually improve. For the time being, is there a better way to acheive what I want - <br>\nwith less surprises?</p>\n<p>Andreas</p>",
        "id": 294641241,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661162195
    }
]