[
    {
        "content": "<p>From: Andreas Lochbihler &lt;<a href=\"mailto:andreas.lochbihler@inf.ethz.ch\">andreas.lochbihler@inf.ethz.ch</a>&gt;<br>\nDear experts on name spaces and local theories,</p>\n<p>I use Local_Theory.map_naming in an unnamed context to add a mandatory prefix to some <br>\ntheorems. For example,</p>\n<p>context begin<br>\nlocal_setup ‹ Local_Theory.map_naming (Name_Space.mandatory_path \"foo\") ›<br>\nlemma bar: \"bar ⟹ True\" ..<br>\nend</p>\n<p>Then, I get the theorem <a href=\"http://foo.bar\">foo.bar</a>, but not bar. I picked this pattern up from <br>\n<a href=\"http://isabelle.in.tum.de/repos/isabelle/file/8f4a332500e4/src/HOL/Product_Type.thy#l1017\">http://isabelle.in.tum.de/repos/isabelle/file/8f4a332500e4/src/HOL/Product_Type.thy#l1017</a></p>\n<p>Unfortunately, this does not seem to work when I am inside a locale.</p>\n<p>locale test = assumes *: True begin<br>\ncontext begin<br>\nlocal_setup ‹ Local_Theory.map_naming (Name_Space.mandatory_path \"foo\") ›<br>\nlemma bar: \"bar ⟹ True\" ..<br>\nend</p>\n<p>Now, the theorem names \"bar\", \"<a href=\"http://local.bar\">local.bar</a>\", and \"<a href=\"http://test.foo.bar\">test.foo.bar</a>\" are available. I would have <br>\nexpected \"<a href=\"http://foo.bar\">foo.bar</a>\", \"<a href=\"http://local.foo.bar\">local.foo.bar</a>\", and \"<a href=\"http://test.foo.bar\">test.foo.bar</a>\", but the first two do not exist.</p>\n<p>Moreover, when I later interpret test, the foo prefix does not show up either. What is the <br>\nrecommended way to install such mandatory prefixes? What am I doing wrong here?</p>\n<p>Background: Why do I need this? The command inductive_set does not allow instantiations in <br>\nthe parameters. Therefore, I first define my set foo as a predicate foop with inductive <br>\nand then manually perform the translation to sets as would be done with inductive_set. To <br>\nget the same names (foo.intros, foo.cases, ...), I open an unnamed context, add the <br>\nmandatory prefix foo to the name space with map_naming and transfer the theorems for foop <br>\nusing [pred_to_set]. This works fine at the theory level.</p>\n<p>Best,<br>\nAndreas</p>",
        "id": 294327727,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660929140
    },
    {
        "content": "<p>From: Florian Haftmann &lt;<a href=\"mailto:florian.haftmann@informatik.tu-muenchen.de\">florian.haftmann@informatik.tu-muenchen.de</a>&gt;<br>\nHi Andreas,</p>\n<blockquote>\n<p>context begin<br>\nlocal_setup ‹ Local_Theory.map_naming (Name_Space.mandatory_path \"foo\") ›<br>\nlemma bar: \"bar ⟹ True\" ..<br>\nend</p>\n<p>Unfortunately, this does not seem to work when I am inside a locale.</p>\n<p>locale test = assumes *: True begin<br>\ncontext begin<br>\nlocal_setup ‹ Local_Theory.map_naming (Name_Space.mandatory_path \"foo\") ›<br>\nlemma bar: \"bar ⟹ True\" ..<br>\nend</p>\n<p>Now, the theorem names \"bar\", \"<a href=\"http://local.bar\">local.bar</a>\", and \"<a href=\"http://test.foo.bar\">test.foo.bar</a>\" are<br>\navailable. I would have expected \"<a href=\"http://foo.bar\">foo.bar</a>\", \"<a href=\"http://local.foo.bar\">local.foo.bar</a>\", and<br>\n\"<a href=\"http://test.foo.bar\">test.foo.bar</a>\", but the first two do not exist.</p>\n</blockquote>\n<p>Having a look at Local_Theory.map_naming this is quite obvious</p>\n<p>fun map_naming f =<br>\n  map_top (fn (naming, operations, after_close, brittle, target) =&gt;<br>\n    (f naming, operations, after_close, brittle, target));</p>\n<p>I.e. only the topmost context in the stack of local theories is affected.</p>\n<p>It is unclear to me what can be done in our current infrastructure to<br>\nachieve the desired effect.  I will spend some time to understand this<br>\noccasionally.</p>\n<p>Florian</p>\n<blockquote>\n<p>Moreover, when I later interpret test, the foo prefix does not show up<br>\neither. What is the recommended way to install such mandatory prefixes?<br>\nWhat am I doing wrong here?</p>\n<p>Background: Why do I need this? The command inductive_set does not allow<br>\ninstantiations in the parameters. Therefore, I first define my set foo<br>\nas a predicate foop with inductive and then manually perform the<br>\ntranslation to sets as would be done with inductive_set. To get the same<br>\nnames (foo.intros, foo.cases, ...), I open an unnamed context, add the<br>\nmandatory prefix foo to the name space with map_naming and transfer the<br>\ntheorems for foop using [pred_to_set]. This works fine at the theory level.</p>\n<p>Best,<br>\nAndreas</p>\n<p><a href=\"/user_uploads/14278/jQ3VcX0QWT1m0kx8rwGyTtC8/signature.asc\">signature.asc</a></p>\n</blockquote>",
        "id": 294328085,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660929250
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nSo far, the \"naming\" of a local_theory only refers to the background <br>\ntheory for foundation.  There is still no provision for more name space <br>\ncontrol, but it is one of the important things in the pipeline for a very <br>\nlong time. Over many years, there were just important ingredients missing <br>\nto move forward, e.g. unnamed context begin ... end blocks.  There were <br>\nalso rather lame reasons like the inability to write \"private definition <br>\n...\" or \"private theorem ...\" with TTY/Proof General still around.</p>\n<p>There is a whole complex around name space policies, but I don't recall <br>\nall details on the spot.  Here are some aspects to rekindle a discussion <br>\nof what could be done eventually.</p>\n<p>* Some concrete syntax for bindings and namings (e.g. in context<br>\n     headers) to add name space qualification (with and without \"mandatory\"<br>\n     flag).</p>\n<p>* Likewise some syntax for certain flags, e.g. \"concealed\", \"private\",<br>\n     \"hidden\".</p>\n<p>* Reform of existing theories to eliminate all uses of \"hide\", \"hide<br>\n     (open)\", \"map_naming\" etc.</p>\n<p>* Session-qualified theory names.</p>\n<p>* Restoration of old tools that only cope with full names like<br>\n     \"<a href=\"http://Theory.foo\">Theory.foo</a>\" or \"<a href=\"http://Theory.local.foo\">Theory.local.foo</a>\" -- paradoxically, such \"old\" tools<br>\n     are sometimes only a few years old.</p>\n<p>Makarius</p>",
        "id": 294328314,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660929360
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nThis thread about Isabelle name space policies is continued on <br>\nisabelle-dev, just in the nick of time before the hot phase of the <br>\nIsabelle2015 process starts.</p>\n<p>The \"lame reasons\" due to TTY/Proof General no longer exist ...</p>\n<p>Makarius</p>",
        "id": 294638161,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661161010
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nOn Thu, 12 Feb 2015, Andreas Lochbihler wrote:</p>\n<blockquote>\n<p>I use Local_Theory.map_naming in an unnamed context to add a mandatory <br>\nprefix to some theorems. For example,</p>\n<p>context begin<br>\nlocal_setup ‹ Local_Theory.map_naming (Name_Space.mandatory_path \"foo\") ›<br>\nlemma bar: \"bar ⟹ True\" ..<br>\nend</p>\n</blockquote>\n<blockquote>\n<p>Unfortunately, this does not seem to work when I am inside a locale.</p>\n<p>locale test = assumes *: True begin<br>\ncontext begin<br>\nlocal_setup ‹ Local_Theory.map_naming (Name_Space.mandatory_path \"foo\") ›<br>\nlemma bar: \"bar ⟹ True\" ..<br>\nend</p>\n<p>Now, the theorem names \"bar\", \"<a href=\"http://local.bar\">local.bar</a>\", and \"<a href=\"http://test.foo.bar\">test.foo.bar</a>\" are <br>\navailable. I would have expected \"<a href=\"http://foo.bar\">foo.bar</a>\", \"<a href=\"http://local.foo.bar\">local.foo.bar</a>\", and <br>\n\"<a href=\"http://test.foo.bar\">test.foo.bar</a>\", but the first two do not exist.</p>\n<p>Moreover, when I later interpret test, the foo prefix does not show up <br>\neither. What is the recommended way to install such mandatory prefixes? <br>\nWhat am I doing wrong here?</p>\n</blockquote>\n<p>When making some name space reforms for Isabelle2015, I also looked at <br>\nthis case, but did not see a way to do it properly.</p>\n<p>Extra qualification of name bindings is possible in Isabelle/ML via <br>\nBinding.qualified, but there is no Isar syntax for it.  Naming prefixes in <br>\nthe name space are used by the system in other situations.  Above the open <br>\nquestion is what happens with the naming under interpretation.</p>\n<p>Moreover, many tools break down when they see more name prefixes than <br>\nexpected.  This is a problem of these tools, but the usual reason why the <br>\nsystem cannot move forward right now.</p>\n<p>Further reforms are in the pipeline (for approx. 10 years) and will get <br>\nthrough eventually.</p>\n<blockquote>\n<p>Background: Why do I need this? The command inductive_set does not allow <br>\ninstantiations in the parameters. Therefore, I first define my set foo <br>\nas a predicate foop with inductive and then manually perform the <br>\ntranslation to sets as would be done with inductive_set.</p>\n</blockquote>\n<p>Can you point to the concrete definitions for this?</p>\n<p>Makarius</p>",
        "id": 294643164,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661162970
    },
    {
        "content": "<p>From: Andreas Lochbihler &lt;<a href=\"mailto:andreas.lochbihler@inf.ethz.ch\">andreas.lochbihler@inf.ethz.ch</a>&gt;<br>\nHi Makarius,</p>\n<p>Thanks for keeping this on the radar.</p>\n<p>On 07/05/15 11:54, Makarius wrote:</p>\n<blockquote>\n<p>Extra qualification of name bindings is possible in Isabelle/ML via Binding.qualified, but<br>\nthere is no Isar syntax for it.  Naming prefixes in the name space are used by the system<br>\nin other situations.  Above the open question is what happens with the naming under<br>\ninterpretation.</p>\n<p>Moreover, many tools break down when they see more name prefixes than expected.  This is a<br>\nproblem of these tools, but the usual reason why the system cannot move forward right now.<br>\nIn my use case, I am not adding more levels of prefixes than would be there anyway, <br>\nbecause I just want to emulate the effect of any other command.</p>\n</blockquote>\n<blockquote>\n<blockquote>\n<p>Background: Why do I need this? The command inductive_set does not allow instantiations<br>\nin the parameters. Therefore, I first define my set foo as a predicate foop with<br>\ninductive and then manually perform the translation to sets as would be done with<br>\ninductive_set.</p>\n</blockquote>\n<p>Can you point to the concrete definitions for this?<br>\nI stumbled over this limitation of inductive_set in JinjaThreads. In Isabelle2011-1, I <br>\nused an inductive to actually define an inductive set, because 'a set and 'a =&gt; bool were <br>\nthe same at that time:<br>\n<a href=\"http://sourceforge.net/p/afp/afp-2011-1/ci/default/tree/thys/JinjaThreads/MM/JMM_Spec.thy#l113\">http://sourceforge.net/p/afp/afp-2011-1/ci/default/tree/thys/JinjaThreads/MM/JMM_Spec.thy#l113</a></p>\n</blockquote>\n<p>When the two types were separated again, I converted the inductive into a function and <br>\nmanually derived all the necessary theorems, as can be seen in<br>\n<a href=\"http://sourceforge.net/p/afp/afp-2014/ci/default/tree/thys/JinjaThreads/MM/JMM_Spec.thy#l111\">http://sourceforge.net/p/afp/afp-2014/ci/default/tree/thys/JinjaThreads/MM/JMM_Spec.thy#l111</a></p>\n<p>Of course, it would be great if the names were action_loc_aux.intros instead of <br>\naction_loc_aux_intros etc.</p>\n<p>I do not have a public real example in a locale, but I have attached a stripped-down <br>\nversion. By the way, it would be great if parameters for inductive(_set) that are always <br>\nthe same could be declared with for even if they are not the first ones (such as the x in <br>\nthe attached example).</p>\n<p>Best,<br>\nAndreas<br>\n<a href=\"/user_uploads/14278/wtK2_yP5w9uaamuJkiv2i_nr/Scratch.thy\">Scratch.thy</a></p>",
        "id": 294643218,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661162998
    }
]