[
    {
        "content": "<p>From: Andreas Lochbihler &lt;<a href=\"mailto:andreas.lochbihler@inf.ethz.ch\">andreas.lochbihler@inf.ethz.ch</a>&gt;<br>\nDear locale experts,</p>\n<p>Suppose the locale l1 defines one of its parameter using \"defines\". When another locale l2 <br>\nimports l1 and tries to instantiate the defined parameter in the locale expression, <br>\nIsabelle2015 complains about bad left-hand sides and existing constants. Here is the <br>\nminimal (silly) example:</p>\n<p>locale l1 =<br>\n   fixes x y :: nat<br>\n   defines \"y == x\"</p>\n<p>locale l2 = l1 2 \"Suc 1\" (* error: Bad head of lhs: existing constant Suc *)</p>\n<p>What is the right way to instantiate defined parameters in locale expressions?</p>\n<p>Here is some background on my use case. I want to abstract over a monad in some <br>\ndefinitions, so I have a locale for monads (I need the monad operation only on a single <br>\ntype, so this works). As every monad is also a functor, I can define the map operation <br>\ncanonically in terms of bind and return. Later, I want to specialise the monad to concrete <br>\ninstances such as 'a option, which I thought could be done by instantiating the locale <br>\nparameters in the locale expression. Of course, I also want to replace all instances of <br>\nthe canonical map with map_option in all theorems.</p>\n<p>If I define the map in the locale for monad as a constant, the replacement has to be done <br>\nat every interpretation or sublocale command using a where clause (and a corresponding <br>\nproof of equality of definitions). Unfortunately, I have not found a way to do the <br>\nreplacement during locale imports. Therefore, I tried to use the defines element and move <br>\nthe definition to the locale declaration itself. But this causes trouble, too.</p>\n<p>Andreas</p>",
        "id": 294648472,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661165119
    },
    {
        "content": "<p>From: Florian Haftmann &lt;<a href=\"mailto:florian.haftmann@informatik.tu-muenchen.de\">florian.haftmann@informatik.tu-muenchen.de</a>&gt;<br>\nHi Andreas,</p>\n<p>after having a look of the code (Local_Defs.cert_def in closeup in<br>\nexpression.ML) I come to the conclusion that the whole machinery assumes<br>\nthat a »defines« element remains a »defines« element after input -- with<br>\nall required syntactic restrictions.</p>\n<p>Looks to me that the idea »defines« requires further rethinking here.</p>\n<p>Cheers,<br>\n    Florian<br>\n<a href=\"/user_uploads/14278/BjbXeYGMzYTIiaSUSg0JbhR9/signature.asc\">signature.asc</a></p>",
        "id": 294651475,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661166248
    },
    {
        "content": "<p>From: Andreas Lochbihler &lt;<a href=\"mailto:andreas.lochbihler@inf.ethz.ch\">andreas.lochbihler@inf.ethz.ch</a>&gt;<br>\nHi Florian,</p>\n<p>Thanks for looking into this. Meanwhile, I have found out that instantiating a \"defines\" <br>\nelement in a sublocale declaration works. What is the difference between locale <br>\nexpressions in locale declarations and sublocale commands?</p>\n<p>At the moment, I work around this problem as follows:</p>\n<ol>\n<li>I explicitly state the imported locale as an assumption,</li>\n<li>\n<p>I refrain from using constants or syntax declared in the locale and refer to the <br>\nfoundational constants if necessary (just like in times long ago).</p>\n</li>\n<li>\n<p>After the declaration, I issue a sublocale command to resurrect the input.</p>\n</li>\n</ol>\n<p>Best,<br>\nAndreas</p>",
        "id": 294651536,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661166266
    }
]