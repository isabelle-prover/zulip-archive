[
    {
        "content": "<p>From: Mikhail Chekhov &lt;<a href=\"mailto:mikhail.chekhov.w@gmail.com\">mikhail.chekhov.w@gmail.com</a>&gt;<br>\nDear All,</p>\n<p>Recently, I encountered another relatively minor technical issue. I am<br>\nusing interpretation with rewriting in my work very extensively and<br>\nfrequently. However, some of the rewrite rules need to be repeated for<br>\ndifferent interpretations. Luckily, the rewrite rules can be stated (and<br>\neven proven) outside of the context of any particular locale. However, it<br>\nis very cumbersome (and error-prone) to restate them for every locale<br>\ninterpretation. Therefore, I am curious whether it is possible to store the<br>\nrewrite rules externally in a manner similar to the way theorems can be<br>\nstored in a collection of named_theorems. Even if this functionality is not<br>\navailable natively, I am curious if anyone is aware of any third-party<br>\ntools that could allow one to achieve similar functionality?</p>\n<p>Hopefully, the following example will clarify my question, if it is not<br>\nentirely transparent:</p>\n<p>locale A =<br>\n  fixes a b :: int<br>\n  assumes a1: \"a = 1\"<br>\n    and b0: \"b = 0\"<br>\nbegin</p>\n<p>lemma id_a: \"x*a = x\" using a1 by auto</p>\n<p>end</p>\n<p>definition c :: int where \"c = -1\"</p>\n<p>(* named_terms my_terms<br>\nterm [my_terms] = \"c * c = 1\" *)</p>\n<p>locale B =<br>\n  fixes b :: int<br>\n  assumes b: \"b = 0\"</p>\n<p>―‹Instead of›<br>\nsublocale B ⊆ A: A ‹c * c› b<br>\n  rewrites \"c * c = 1\"<br>\n  subgoal by (simp add: A.intro b c_def)<br>\n  subgoal unfolding c_def by simp<br>\n  done<br>\n―‹<br>\nI would like to be able to write<br>\n‹<br>\nsublocale B ⊆ A ‹c * c› b<br>\n  rewrites my_terms<br>\n  sorry<br>\n›<br>\n›</p>\n<p>Kind Regards,<br>\nMikhail Chekhov</p>",
        "id": 294826223,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661244571
    }
]