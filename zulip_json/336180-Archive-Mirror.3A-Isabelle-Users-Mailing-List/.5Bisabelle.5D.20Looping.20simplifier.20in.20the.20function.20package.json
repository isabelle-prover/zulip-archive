[
    {
        "content": "<p>From: Lars Hupel &lt;<a href=\"mailto:hupel@in.tum.de\">hupel@in.tum.de</a>&gt;<br>\nDear list,</p>\n<p>I have a general question about how to avoid simplifier loops which might<br>\noccur in the function package under somewhat non-trivial circumstances.</p>\n<p>Here's an example:</p>\n<p>fun apply'2 where<br>\n  \"apply'2 thiss'500 index'10 =<br>\n    (if 0 &lt;= index'10 &amp; index'10 &lt; length thiss'500 then<br>\n      if index'10 = 0 then hd thiss'500 else apply'2 (tl thiss'500)<br>\n(index'10 - 1)<br>\n    else undefined)\"</p>\n<p>fun reverseIndex'0 where<br>\n  \"reverseIndex'0 l'5 i'3 =<br>\n    ((case l'5 of x'14 # xs'18 =&gt; reverseIndex'0 l'5 i'3) /\\<br>\n      apply'2 (rev l'5) i'3 = apply'2 l'5 (length l'5 - 1 - i'3))\"</p>\n<p>The simplifier will loop during the proofs for the internal construction<br>\nof \"reverseIndex'0\". While looping, I get the following in the output<br>\npanel, repeated many times:</p>\n<p>linarith_split_limit exceeded (current value is 9)</p>\n<p>I'm pretty sure the culprit is the defining equation of \"apply'2\", because<br>\nmarking it with \"[simp del]\" will lead the function package to complain<br>\nabout non-termination in \"reverseIndex'0\" instead.</p>\n<p>On the other hand, I've seen similar definitions (recursive specifications<br>\nwithout pattern matching on the left-hand side, let me call them<br>\n\"potentially loopy\") which looked like they could give rise to looping go<br>\nthrough without problems. I'm not exactly sure what the side conditions<br>\nare.</p>\n<p>Anyway, my question is a bit broader: Do you have any suggestion of how I<br>\ncan avoid these situations in general? I'm a happy user of \"simps_of_case\"<br>\nwhich can translate potentially loopy equations into non-loopy ones.<br>\nHowever, this only works when the equations use case expressions on their<br>\nright-hand sides, but not for \"if\" expressions. Any general advice?</p>\n<p>(I should add once more that the specifications I process are<br>\nautomatically generated.)</p>\n<p>Cheers<br>\nLars</p>",
        "id": 294650440,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661165898
    },
    {
        "content": "<p>From: Lars Noschinski &lt;<a href=\"mailto:noschinl@in.tum.de\">noschinl@in.tum.de</a>&gt;<br>\nThese simp-rules lead to non-termination if the simplifier cannot solve<br>\nthe condition. The reason is that if a term of this form cannot be<br>\nsimplified any further, the simplifier applies the splitter with<br>\nsplit_if, yielding to subgoals on which this equation can be applied.</p>\n<p>-- Lars</p>",
        "id": 294650450,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661165904
    }
]