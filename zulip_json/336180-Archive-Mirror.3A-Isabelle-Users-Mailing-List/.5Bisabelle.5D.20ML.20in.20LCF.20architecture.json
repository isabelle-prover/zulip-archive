[
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nHere I am sensing some issues that are specific to the classic HOL family, <br>\nnot Isabelle nor LCF itself. Looking at the sources of good old Cambridge <br>\nLCF (from Larry's website), you have a LISP engine that implements an ML <br>\ninterpreter that is merely a symbolic computation engine, so ML proof <br>\nscripts cannot affect the system integrity itself.</p>\n<p>Later HOL implementations have done this differently, by starting with an <br>\noff-the-shelf ML system (SML or OCaml) and implementing the prover such <br>\nthat it shares the ML environment with user tools and proof scripts. This <br>\nhas opened a few potential problems of trustworthiness, although I would <br>\ncall nothing of this really critical.</p>\n<p>In Isabelle we have moved more and more away from that raw exposure of ML, <br>\nnot just by avoiding ML in regular proof scripts. Isabelle/ML is embedded <br>\ninto a managed context of the Isar infrastructure.  There where numerous <br>\npractical demands that motivated that, such as robust undo history and <br>\nsupport for parallel execution.</p>\n<p>Taking this approach of to the extreme, one could easily make Isabelle/ML <br>\na sandboxed environment for purely symbolic computations, without any <br>\naccess to system functions of Standard ML, or the Isabelle/Pure <br>\nimplementation itself.  As mentioned before, Poly/ML provides robust means <br>\nto invoke ML at runtime, such that user code cannot mess up your system <br>\nimplementation.</p>\n<p>Funnily, when Mark encountered the Isabelle tty for the first time some <br>\nmonths ago, his first impulse was to drop out of the managed Isar <br>\nenvironment, in order to have raw access to the underlying ML :-)</p>\n<p>BTW, this no longer works in the Isabelle/Scala Prover IDE protocol, but <br>\nfor other reasons than anxiety about vulnerability of the prover kernel.</p>\n<p>Makarius</p>",
        "id": 294125785,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660841268
    },
    {
        "content": "<p>From: <a href=\"mailto:mark@proof-technologies.com\">mark@proof-technologies.com</a><br>\non 19/1/11 12:21 PM, Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt; wrote:</p>\n<blockquote>\n<p>Here I am sensing some issues that are specific to the classic HOL family,<br>\nnot Isabelle nor LCF itself. Looking at the sources of good old Cambridge<br>\nLCF (from Larry's website), you have a LISP engine that implements an ML<br>\ninterpreter that is merely a symbolic computation engine, so ML proof<br>\nscripts cannot affect the system integrity itself.</p>\n</blockquote>\n<p>(Cambridge HOL and HOL88 were the same in this respect as Cambridge LCF, I<br>\nthink...)</p>\n<p>But surely the user still interacted in ML, on top of the ML implementation<br>\nof LCF, so I would have thought that such an ML interpreter has the same<br>\nbehaviour as any other, with the same risks of users overwriting crucial ML<br>\nidentifiers, etc...  Maybe I'm missing something here.</p>\n<blockquote>\n<p>In Isabelle we have moved more and more away from that raw exposure of ML,<br>\nnot just by avoiding ML in regular proof scripts. Isabelle/ML is embedded<br>\ninto a managed context of the Isar infrastructure.  There where numerous<br>\npractical demands that motivated that, such as robust undo history and<br>\nsupport for parallel execution.</p>\n<p>Taking this approach of to the extreme, one could easily make Isabelle/ML<br>\na sandboxed environment for purely symbolic computations, without any<br>\naccess to system functions of Standard ML, or the Isabelle/Pure<br>\nimplementation itself.  As mentioned before, Poly/ML provides robust means<br>\nto invoke ML at runtime, such that user code cannot mess up your system<br>\nimplementation.</p>\n</blockquote>\n<p>Yes, sandboxing would be the ultimate I suppose.  Presumably you mean that<br>\nthis would involve some versatile API giving the user effectively the power<br>\nto extend the theorem prover like in normal LCF-style systems?  But for the<br>\ntime being, this all sounds a bit complicated, when all that needs to be<br>\ndone to secure things as far as the domain of normal running of the ML<br>\nprogram is concerned (i.e. ignoring system functions, somehow circumventing<br>\nthe ML language, OS-type hacks, etc) is to stop certain crucial ML values<br>\nand pretty printers from being overwritten, which I think you said was<br>\nalready possible in Poly/ML.</p>\n<blockquote>\n<p>Funnily, when Mark encountered the Isabelle tty for the first time some<br>\nmonths ago, his first impulse was to drop out of the managed Isar<br>\nenvironment, in order to have raw access to the underlying ML :-)</p>\n</blockquote>\n<p>Yes this is how I understand how things really work.  Maybe I'm just a<br>\nlow-level command line junkie :-)</p>\n<p>Mark.</p>",
        "id": 294125994,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660841323
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nFine.  So the next step is to see how raw ML implements Isar, and Isar <br>\nincorporates ML again, with some sandboxing already in place.  You should <br>\nthen get some ideas how to implement a secure system, by adding <br>\nappropriate infrastructure instead of chopping everything off as in <br>\nHOL-Light, and probably also HOL Zero right now.</p>\n<p>Makarius</p>",
        "id": 294126020,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660841329
    },
    {
        "content": "<p>From: <a href=\"mailto:mark@proof-technologies.com\">mark@proof-technologies.com</a><br>\non 20/1/11 1:53 PM, Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt; wrote:</p>\n<p>I'm not sure what you mean by \"chopping everything off\" ...</p>\n<p>And are you saying that Isar currently incorporates full-blown ML, so that<br>\nusers can write their own extensions with all the power of ML?</p>\n<p>Mark.</p>",
        "id": 294126043,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660841335
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nYes, the ML inside Isar is the full Poly/ML moderated by some of our <br>\ninfrastructure.  It is a bit like an operating system that turns the raw <br>\nCPU and memory into virtualized versions, such that user space programs <br>\ncannot mess up the whole thing, and the whole system becomes much more <br>\nuseful and powerful than bare metal.</p>\n<p>Makarius</p>",
        "id": 294126072,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660841342
    }
]