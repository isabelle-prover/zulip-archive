[
    {
        "content": "<p>From: Lars Hupel &lt;<a href=\"mailto:hupel@in.tum.de\">hupel@in.tum.de</a>&gt;<br>\nDear locale experts,</p>\n<p>is there any reason why there is no ML interface for the various<br>\ninterpretation commands that takes a tactic? Currently, I have to do<br>\nsomething like this:</p>\n<p>lthy<br>\n  |&gt; Interpretation.global_interpretation ([expr], []) [] []<br>\n  |&gt; Proof.refine_singleton meth<br>\n  |&gt; Proof.global_done_proof</p>\n<p>\"expr\" is also very cumbersome to construct (via \"Expression.Positional\").</p>\n<p>Is there any way to simplify this?</p>\n<p>Cheers<br>\nLars</p>",
        "id": 294712391,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661182609
    },
    {
        "content": "<p>From: Florian Haftmann &lt;<a href=\"mailto:florian.haftmann@informatik.tu-muenchen.de\">florian.haftmann@informatik.tu-muenchen.de</a>&gt;<br>\nHi Lars,</p>\n<p>as far as I remember (from memory, I did not check against the sources),<br>\nthe only long-standing programmatic application of locale interpretation<br>\nhas been the class target (more exactly,<br>\nsrc/Pure/Isar/class_declaration.ML).  At one stage in its development<br>\n(maybe around 2009), that stopped to use full-blown interpretation<br>\ninterfaces at all and constructed the necessary canonical morphisms from<br>\nscratch instead (function »calculate«).  This is maybe why these never<br>\nreally emerged – also early implementations of the class target used<br>\nsomething similar to your code above, AFAIR.</p>\n<p>The question seems to me, how complicated is your application actually?<br>\nWould a manual construction of the required morphisms and registering<br>\nthem via Locale.add_registration suffice for that?</p>\n<p>Cheers,<br>\n    Florian<br>\n<a href=\"/user_uploads/14278/H_EtO6F3F9M0BXwwEcgSdlV4/signature.asc\">signature.asc</a></p>",
        "id": 294712401,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661182615
    },
    {
        "content": "<p>From: Lars Hupel &lt;<a href=\"mailto:hupel@in.tum.de\">hupel@in.tum.de</a>&gt;<br>\nHi Florian,</p>\n<p>in essence, what I have is a compiler that is defined within a locale,<br>\nparametrized on some values. When I prove the locale assumptions for a<br>\nparticular instantiation, I want to get the executable compiler, i.e.,<br>\n\"global_interpretation\" with \"defines\" for the transitive closure of<br>\ninvolved constants.</p>\n<p>Pseudocode:</p>\n<p>embed test_code is id List.append List.rev</p>\n<p>term test_code.compile<br>\n  (* test_code.compile :: term =&gt; exp *)</p>\n<p>value \"test_code.compile (Const ''id'')\"<br>\n  (* ... result ... :: exp *)</p>\n<p>Cheers<br>\nLars</p>",
        "id": 294712529,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661182658
    },
    {
        "content": "<p>From: Florian Haftmann &lt;<a href=\"mailto:florian.haftmann@informatik.tu-muenchen.de\">florian.haftmann@informatik.tu-muenchen.de</a>&gt;<br>\nHi Lars,</p>\n<blockquote>\n<p>in essence, what I have is a compiler that is defined within a locale,&gt; parametrized on some values. When I prove the locale assumptions for<br>\na&gt; particular instantiation, I want to get the executable compiler,<br>\ni.e.,&gt; \"global_interpretation\" with \"defines\" for the transitive closure<br>\nof&gt; involved constants.<br>\nPseudocode:</p>\n<p>embed test_code is id List.append List.rev</p>\n<p>term test_code.compile<br>\n  (* test_code.compile :: term =&gt; exp *)</p>\n<p>value \"test_code.compile (Const ''id'')\"<br>\n  (* ... result ... :: exp *)</p>\n</blockquote>\n<p>maybe we should talk about that when we meet next time at TUM.</p>\n<p>Cheers,<br>\n    Florian<br>\n<a href=\"/user_uploads/14278/m24m1w_gQWjGWc35vgzaEhkB/signature.asc\">signature.asc</a></p>",
        "id": 294712815,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661182744
    }
]