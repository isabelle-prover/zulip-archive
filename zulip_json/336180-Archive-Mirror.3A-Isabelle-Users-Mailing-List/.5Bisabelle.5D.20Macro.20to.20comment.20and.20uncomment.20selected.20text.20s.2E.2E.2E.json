[
    {
        "content": "<p>From: Gottfried Barrow &lt;<a href=\"mailto:gottfried.barrow@gmx.com\">gottfried.barrow@gmx.com</a>&gt;<br>\nThat's the solution. Commenting and uncommenting with that plugin <br>\nproduces no error, unlike \"Edit / Source / Range comment\".</p>\n<p>It doesn't take any practice at all. I assign a shortcut to it, <br>\nhighlight the commented or uncommented text, and toggle the commenting.</p>\n<p><em>OTHER PLUGINS</em></p>\n<p>I also found another good plugin when going to get TextTools, which is <br>\nXSearch: <a href=\"http://plugins.jedit.org/plugins/?XSearch\">http://plugins.jedit.org/plugins/?XSearch</a></p>\n<p>I have java.util.regex with jEdit search, or gnu.regexp with XSearch.</p>\n<p>It also allows me to put the search field in the bottom panel, so I can <br>\nget rid of the normal search field at the top, with \"Global Options/ <br>\njEdit / View\". I include a screen shot to show my use of the three <br>\npanels, like putting XSearch at the bottom, and its hypersearch results <br>\nin the right panel.</p>\n<p>Then there's always the Console plugin, where I can do something like <br>\n\"grep lemma %f\", and it'll search on the current edit buffer. Details <br>\nare in \"Help / Plugins / Console\" for anyone interested in more details. <br>\nI attach a screen shot of grep in action through the Console plugin. <br>\nPeople should see these things so they know what they're missing out on.</p>\n<p>For plugins seekers, one of the most useful is the the Optional plugin, <br>\nwhich combines the three plugin windows into one window, which are <br>\nnormally accessed through different menus: <br>\n<a href=\"http://plugins.jedit.org/plugins/?Optional\">http://plugins.jedit.org/plugins/?Optional</a></p>\n<p><em>UNRELATED EXTERNAL-ISAR EMAIL COMMENT</em></p>\n<p>I got some good vocabulary from that other email.</p>\n<p><a href=\"https://lists.cam.ac.uk/mailman/htdig/cl-isabelle-users/2012-August/msg00037.html\">https://lists.cam.ac.uk/mailman/htdig/cl-isabelle-users/2012-August/msg00037.html</a></p>\n<p>Trying to talk about Pure intelligently can be an elusive thing.</p>\n<p>There's the \"Isar source language\", which makes sense of the \"Isar proof <br>\nlanguage\" as a \"sub-language\"; after all, Isar has a lot of non-proof <br>\nrelated commands.</p>\n<p>At some point I start accepting things axiomatically; \"Let it be known, <br>\na principle developer has said that what is between 'theory' and 'end' <br>\nis all Isar\". But having good language makes it easier for me to process <br>\ndifficult ideas.</p>\n<p>People wouldn't want to argue about it here, but I tend towards a <br>\nvariation of this following idea:</p>\n<p>The  strong form of Sapir-Whorf Hypothesis proposes that language determines<br>\nthought; therefore they are identical in nature. This argument in fact <br>\nimplies that<br>\nthought is impossible without language.<br>\n<a href=\"http://www.thomastsoi.com/wp-content/downloads/The%20Relationship%20between%20Language%20and%20Thought.pdf\">http://www.thomastsoi.com/wp-content/downloads/The%20Relationship%20between%20Language%20and%20Thought.pdf</a></p>\n<p>I never heard of the \"Sapir-Whorf Hypothesis\" before I did the Google <br>\nsearch just now, but I did take a course that influenced me called \"The <br>\nstructure of the English language\", where the author of the textbook was <br>\na linguist.</p>\n<p>I would only say that efficient and clear thought is impossible without <br>\nefficient and clear language, which brings up the subject of the need <br>\nfor good mathematical notation as a language. Ideas that are fuzzy <br>\nbecome clear when formalized with good language.</p>\n<p>There's \"the self-defining self-embedding game of  formal languages\", <br>\nand so, related to that, HOL being embedded in Isar would be part of the <br>\ngame of embedding one language into another. If I find the right pithy <br>\nphrases, I can be perfectly content keeping my thoughts at a high level, <br>\nwhile allowing the backend prover to do its low-level magic.</p>\n<p>Regards,<br>\nGB<br>\n<a href=\"/user_uploads/14278/UvVoJ7HbRpmZHZoMnkoQHfxk/3_panels.png\">3_panels.png</a><br>\n<a href=\"/user_uploads/14278/TqKjTvui61XjJTqbRh78Met4/grep_in_console.png\">grep_in_console.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/14278/UvVoJ7HbRpmZHZoMnkoQHfxk/3_panels.png\" title=\"3_panels.png\"><img src=\"/user_uploads/14278/UvVoJ7HbRpmZHZoMnkoQHfxk/3_panels.png\"></a></div><div class=\"message_inline_image\"><a href=\"/user_uploads/14278/TqKjTvui61XjJTqbRh78Met4/grep_in_console.png\" title=\"grep_in_console.png\"><img src=\"/user_uploads/14278/TqKjTvui61XjJTqbRh78Met4/grep_in_console.png\"></a></div>",
        "id": 294219691,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660896780
    },
    {
        "content": "<p>From: Gottfried Barrow &lt;<a href=\"mailto:gottfried.barrow@gmx.com\">gottfried.barrow@gmx.com</a>&gt;<br>\nActually, an example of the \"one language embedded into another game\" <br>\nwould be FOL embedded in HOL. In the process of building up HOL, you get <br>\nprimitive type variables, the standard logical connectives and <br>\nquantifiers, the ability to define predicates, and the enforcement of <br>\nstandard FOL formula-making rules. If you get rid of that part of HOL, <br>\nthen you lose FOL too.</p>\n<p>At some point, standard dictionary definitions don't completely <br>\ntranslate the meaning of formal, programming languages, on the other <br>\nhand, there's many times a strong relationship.</p>\n<p>So, I'm deciding that I shouldn't confuse the \"embedded game\" with the <br>\n\"framework game\"; frameworks can be taken down, where embeddings <br>\ngenerally remain embedded.</p>\n<p>I'm back to contemplating what may be involved with the Isar and HOL <br>\n\"framework game\", at least until I click the send button.</p>",
        "id": 294219715,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660896791
    },
    {
        "content": "<p>From: Gottfried Barrow &lt;<a href=\"mailto:gottfried.barrow@gmx.com\">gottfried.barrow@gmx.com</a>&gt;<br>\nHi,</p>\n<p>This email is about me trying to find a macro to comment out text and <br>\nuncomment text, so I don't get the error where I have to reload the <br>\nfile. It's also a request for someone to write a new macro or modify <br>\n\"Add_Prefix_and_Suffix.bsh\" to uncomment selected text that's commented out.</p>\n<p>First, I thought if \"(<em>\" and \"</em>)\" are inserted fast enough, then I won't <br>\nget the error, but speed of insertion is not the issue.</p>\n<p>As a test case, I'm using:</p>\n<p>theory test imports Complex_Main begin<br>\nvalue \"string\"<br>\nvalue \"string\"<br>\nend</p>\n<p>I highlight lines 2 and 3, and I use the jEdit menu command \"Edit / <br>\nSource / Range Comment\". It comments out the two lines, and I'm left <br>\nwith an error. I save the file, and it goes away.</p>\n<p>If I only highlight one line and use the command, then I don't get the <br>\nerror.</p>\n<p>I've modified <br>\n\"Isabelle2012\\src\\Tools\\jEdit\\dist\\macros\\Text\\Add_Prefix_and_Suffix.bsh\" and <br>\nattached the modified macro. The difference is that my modified macro <br>\nonly adds the prefix to the first line and the suffix to the last line. <br>\nThe original macro comments out each line individually.</p>\n<p>I can comment out lines 2 and 3 with the macro, and I get no error.</p>\n<p>The idea is, in the future, to be able to experiment with commenting out <br>\nand uncommenting text with a macro to try and figure out if there's a <br>\nworkaround that always works, and to see if the problem is text getting <br>\nparsed that has unmatched delimiters.</p>\n<p>My attached macro will comment out selected text. I can modify the <br>\nattached macro to automatically use one of 4 different ways to comment <br>\nout text, which are (<em>...</em>), --\"...\", --{<em>...</em>}, and text{<em>...</em>}.</p>\n<p>If someone wants to modify the attached macro to uncomment highlighted <br>\ntext that's enclosed in comment delimiters, that would be useful. The <br>\nmacro code I modified is below the original code, which I marked <br>\n\"ORIGINAL START\".</p>\n<p>In general, I have some macros that insert matched delimiters to try and <br>\nprevent parsing of unmatched delimiters, such as the attached \"comment <br>\n(star-star).bsh\".</p>\n<p>Regards,<br>\nGB<br>\n<a href=\"/user_uploads/14278/B7VifgZQPTy92qHbZ3QmdCmT/Add_Prefix_First_and_Suffix_Last.bsh\">Add_Prefix_First_and_Suffix_Last.bsh</a><br>\n<a href=\"/user_uploads/14278/QZWHbEZPKn3sJSjFElurGwQk/comment-star-star.bsh\">comment (star-star).bsh</a></p>",
        "id": 294222149,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660898051
    },
    {
        "content": "<p>From: Gottfried Barrow &lt;<a href=\"mailto:gottfried.barrow@gmx.com\">gottfried.barrow@gmx.com</a>&gt;<br>\nAt least part of the problem is a \"(<em>\" and \"</em>)\" (or other sets of <br>\nmatched delimiters) not being inserted on the same line.</p>\n<p>I do this with my modified \"Add_Prefix_and_Suffix.bsh\" or with \"Edit / <br>\nSource / Range Comment\",</p>\n<p>(*<br>\n     find_consts name:List.list.Nil<br>\n     value \"a # b # List.Nil\"<br>\n     *)</p>\n<p>and it results in an error until I save the file or delete the block and <br>\nreinsert it.</p>\n<p>I do this with \"Add_Prefix_and_Suffix.bsh\" or \"Edit / Source / Line <br>\nComment\",</p>\n<p>(<em>find_consts name:List.list.Nil</em>)<br>\n     (<em>value \"a # b # List.Nil\"</em>)</p>\n<p>and I get no errors.</p>\n<p>That's a workaround to commenting out code, but only if I have a macro <br>\nthat will uncomment it line by line.</p>\n<p>More details. I do this with my modified \"Add_Prefix_and_Suffix.bsh\", <br>\nand I get no errors:</p>\n<p>text{*value \"a # b # List.Nil\"<br>\n     value \"a # b # List.Nil\"*}</p>\n<p>I do this, and I get errors:</p>\n<p>text{*value \"a # b # List.Nil\"<br>\n     value \"a # b # List.Nil\"<br>\n     value \"a # b # List.Nil\"*}</p>\n<p>So if the \"text{<em>\" and \"</em>} get inserted over more than two lines, then I <br>\nget the error, and the same thing with \"(<em>\" and \"</em>)\".</p>\n<p>It's never simple. Using my modified macro, this gets no error with the <br>\nblank line in between:</p>\n<p>(*value \"a # b # List.Nil\"</p>\n<p>value \"a # b # List.Nil\"*)</p>\n<p>Regards,<br>\nGB</p>",
        "id": 294222151,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660898056
    },
    {
        "content": "<p>From: Gottfried Barrow &lt;<a href=\"mailto:gottfried.barrow@gmx.com\">gottfried.barrow@gmx.com</a>&gt;<br>\nI have the macro to comment out code down to what's below. Surely all I <br>\nhave to do is cut what I had selected and then insert it back in. That's <br>\nwhat I manually do to get rid of the error after commenting it out, cut <br>\nand reinsert. I'm looking here to see if I can find a quick way to <br>\nfigure out how to do that: <br>\n<a href=\"http://community.jedit.org/?q=filestore/browse/31\">http://community.jedit.org/?q=filestore/browse/31</a></p>\n<p>Deleting the \"(<em>\" and \"</em>)\" manually to uncomment the code doesn't seem <br>\nto cause problems. I'm not inclined to learn how to do it with regular <br>\nexpressions with jEdit, so that may have to be good enough.</p>\n<p>void commentOutText()<br>\n{<br>\n     selectedLines = textArea.getSelectedLines();<br>\n     for(i = 0; i &lt; selectedLines.length; ++i)<br>\n     {<br>\n         offsetBOL = textArea.getLineStartOffset(selectedLines[i]);<br>\n         textArea.setCaretPosition(offsetBOL);<br>\n         textArea.goToStartOfWhiteSpace(false);<br>\n         textArea.goToEndOfWhiteSpace(true);<br>\n         text = textArea.getSelectedText();<br>\n         if(text == null) text = \"\";<br>\n         if(i==0) textArea.setSelectedText(\"(*\" + text);<br>\n         if(i==(selectedLines.length - 1)) textArea.setSelectedText(text </p>\n<ul>\n<li>\"*)\");<br>\n     }<br>\n}</li>\n</ul>\n<p>if(buffer.isReadOnly())<br>\n     Macros.error(view, \"Buffer is read-only.\");<br>\nelse<br>\n     commentOutText();</p>",
        "id": 294222170,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660898070
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nYou can also try the \"TextTools\" plugin of jEdit, with its action<br>\n\"Toggle Range Comment\":</p>\n<p>Toggle Range Comment by Robert Fletcher &lt;<a href=\"mailto:rfletch6@yahoo.co.uk\">rfletch6@yahoo.co.uk</a>&gt;</p>\n<p>Toggles the state of range comments in the selection. Any text currently<br>\n   commented out will become uncommented and vice-versa. If there is no<br>\n   selection the command acts on the entire line at the caret position.<br>\n   Supports all edit modes with defined range comment symbols and works<br>\n   with embedded modes such as JavaScript within HTML.</p>\n<p>It looks not so bad at first sight, but might require some practice to <br>\nwork with it smoothly.</p>\n<p>BTW, when things go amiss, one needs to keep in mind that there are two <br>\ndifferent notions of quoted regions and comments: one of jEdit (according <br>\nto the token marker) and another of the prover process.</p>\n<p>This can sometimes lead to extra confusion, due to disagreement of the <br>\nsyntax highlighting.  I will try harder next time to make this agree, <br>\nespecially since the jEdit token marker for Isabelle mode is also my <br>\nresponsibilty.</p>\n<p>Makarius</p>",
        "id": 294222266,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660898124
    }
]