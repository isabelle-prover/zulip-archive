[
    {
        "content": "<p>From: Peter Gammie &lt;<a href=\"mailto:peteg42@gmail.com\">peteg42@gmail.com</a>&gt;<br>\nHello,</p>\n<p>Is it possible to make a record type an instance of a type class?</p>\n<p>Here's a simple example of what doesn't work:</p>\n<p>record ('a, 'b) Tuple = first :: \"'a\" second :: \"'b\"</p>\n<p>instance Tuple :: (finite, finite) finite</p>\n<p>*** Logical type constructor expected: \"t.Tuple\"<br>\n*** At command \"instance\" (line 7 of \"/tmp/t.thy\").</p>\n<p>cheers<br>\npeter</p>",
        "id": 294111765,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660837067
    },
    {
        "content": "<p>From: Andreas Lochbihler &lt;<a href=\"mailto:andreas.lochbihler@kit.edu\">andreas.lochbihler@kit.edu</a>&gt;<br>\nHello Peter,</p>\n<blockquote>\n<p>Is it possible to make a record type an instance of a type class?<br>\nyes, it is, but you must have a look behind the scenes. The Isabelle <br>\nrecord package provides extensible records. You could define a subrecord <br>\nof Tuple with additional fields and the record package ensures <br>\nsubtyping, i.e. every element of the subrecord type works almost like an <br>\nordinary Tuple record, in particular, cast operations work as expected.</p>\n</blockquote>\n<p>Behind the scenes, the package achieves this by defining a more general <br>\ntype for Tuple called Tuple_ext_type, which takes another type variable.<br>\nThen, the type ('a, 'b) Tuple is just a type abbreviation for ('a, 'b, <br>\nunit) Tuple_ext_type. For subrecord types, this additional type variable <br>\nis instantiated to some other type which stores the additional information.</p>\n<p>Type classes can only be instantiated for \"logical\" type constructors, <br>\nnot for abbreviations like Tuple. In your example, you would have to <br>\ninstantiate Tuple_ext_type itself. Note that this instantiation then <br>\nalso applies to all subrecords you might ever define.</p>\n<p>record ('a, 'b) Tuple = first :: \"'a\" second :: \"'b\"</p>\n<p>instance Tuple_type_ext :: (finite, finite, finite) finite</p>\n<p>Cheers,<br>\nAndreas</p>",
        "id": 294111820,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660837082
    },
    {
        "content": "<p>From: Peter Gammie &lt;<a href=\"mailto:peteg42@gmail.com\">peteg42@gmail.com</a>&gt;<br>\nThanks Andreas!</p>\n<p>Perhaps this could make its way into the distributed Isabelle documentation and/or examples?</p>\n<p>Also Florian Haftmann sent me this complete chunk of proof text off-list, for which I am grateful:</p>\n<p>record ('a, 'b) Tuple = first :: \"'a\" second :: \"'b\"</p>\n<p>instance Tuple_ext_type :: (finite, finite, finite) finite<br>\nproof<br>\n let ?U = \"UNIV :: ('a, 'b, 'c) Tuple_ext_type set\"<br>\n { fix x :: \"('a, 'b, 'c) Tuple_scheme\"<br>\n   have \"∃a b c. x = Tuple_ext a b c\"<br>\n     by (cases x) simp<br>\n } then have U:<br>\n   \"?U = (\\&lt;lambda&gt;((a, b), c). Tuple_ext a b c) ` ((UNIV × UNIV) × UNIV)\"<br>\n     by (auto simp add: image_def)<br>\n show \"finite ?U\" by (simp add: U)<br>\nqed</p>\n<p>cheers<br>\npeter</p>",
        "id": 294111863,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660837086
    },
    {
        "content": "<p>From: Philipp Küfner &lt;<a href=\"mailto:philipp.kuefner@tu-berlin.de\">philipp.kuefner@tu-berlin.de</a>&gt;<br>\nDear all,</p>\n<p>In July 2010 there was a discussion on Making records instances of<br>\nclasses. As far as I can see the presented solution (see below) does not<br>\nwork with the current version of Isabelle (2011) anymore (due to the new<br>\nimplementation of records). So does anyone know how to handle this<br>\nproblem now?</p>\n<p>Thanks a lot,</p>\n<p>Philipp</p>\n<p>Thanks Andreas!</p>\n<p>Perhaps this could make its way into the distributed Isabelle documentation and/or examples?</p>\n<p>Also Florian Haftmann sent me this complete chunk of proof text off-list, for which I am grateful:</p>\n<p>record ('a, 'b) Tuple = first :: \"'a\" second :: \"'b\"</p>\n<p>instance Tuple_ext_type :: (finite, finite, finite) finite<br>\nproof<br>\n let ?U = \"UNIV :: ('a, 'b, 'c) Tuple_ext_type set\"<br>\n { fix x :: \"('a, 'b, 'c) Tuple_scheme\"<br>\n   have \"∃a b c. x = Tuple_ext a b c\"<br>\n     by (cases x) simp<br>\n } then have U:<br>\n   \"?U = (\\&lt;lambda&gt;((a, b), c). Tuple_ext a b c) ` ((UNIV × UNIV) × UNIV)\"<br>\n     by (auto simp add: image_def)<br>\n show \"finite ?U\" by (simp add: U)<br>\nqed</p>\n<p>cheers<br>\npeter</p>",
        "id": 294133339,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660843581
    },
    {
        "content": "<p>From: Andreas Lochbihler &lt;<a href=\"mailto:andreas.lochbihler@kit.edu\">andreas.lochbihler@kit.edu</a>&gt;<br>\nDear Philipp,</p>\n<p>in Isabelle 2011, the type for extensible records is no longer called<br>\n&lt;record name&gt;_type_ext, but &lt;record name&gt;_ext. The NEWS file mentions this as <br>\nfollows:</p>\n<blockquote>\n<ul>\n<li>Records: logical foundation type for records does not carry a<br>\n'_type' suffix any longer (obsolete due to authentic syntax).<br>\nINCOMPATIBILITY.</li>\n</ul>\n</blockquote>\n<p>Hence, the following should work now:</p>\n<p>record ('a, 'b) Tuple = first :: \"'a\" second :: \"'b\"<br>\ninstance Tuple_ext :: (finite, finite, finite) finite</p>\n<p>Hope this helps,<br>\nAndreas</p>\n<p>Philipp Küfner schrieb:</p>",
        "id": 294133346,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660843587
    },
    {
        "content": "<p>From: Florian Haftmann &lt;<a href=\"mailto:florian.haftmann@informatik.tu-muenchen.de\">florian.haftmann@informatik.tu-muenchen.de</a>&gt;<br>\nHi Philipp,</p>\n<p>the solution to your problem is to drop the _type suffix on the record<br>\ntype name.</p>\n<p>This is what the (for end-users rather cryptic, I confess) entry in the<br>\nNEWS file:</p>\n<ul>\n<li>Records: logical foundation type for records does not carry a<br>\n'_type' suffix any longer (obsolete due to authentic syntax).<br>\nINCOMPATIBILITY.</li>\n</ul>\n<p>hints at.</p>\n<p>Cheers,<br>\n    Florian<br>\n<a href=\"/user_uploads/14278/j0AHW2wlZqSEFW3zW6GUd-li/signature.asc\">signature.asc</a></p>",
        "id": 294133413,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660843605
    }
]