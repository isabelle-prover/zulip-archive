[
    {
        "content": "<p>From: Andreas Lochbihler &lt;<a href=\"mailto:andreas.lochbihler@inf.ethz.ch\">andreas.lochbihler@inf.ethz.ch</a>&gt;<br>\nDear Isabelle experts,</p>\n<p>For the attached theory, Isabelle2016 yields the following error, which I do not <br>\nunderstand at all.</p>\n<p>Malformed dependency of test('a) -&gt; sample(bool, 'a)<br>\n(restriction sample('a, ('b, 'c) envT) from \"TEst.sample_envT_def_raw\")<br>\nThe error(s) above occurred in definition \"test_def_raw\":<br>\n   \"test ≡ sample my_pmf\"</p>\n<p>Why is the definition rejected? What could possibly go wrong here? What are the <br>\nrequirements on a well-formed dependency? Section 5.10 of the Isabelle2016 Isar-Ref manual <br>\ndoes not say much about those dependency checks.</p>\n<p>Best,<br>\nAndreas<br>\n<a href=\"/user_uploads/14278/c7VD3q-tGlcYIRDvtRYuA02M/TEst.thy\">TEst.thy</a></p>",
        "id": 294673348,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661174089
    },
    {
        "content": "<p>From: Ondřej Kunčar &lt;<a href=\"mailto:kuncar@in.tum.de\">kuncar@in.tum.de</a>&gt;<br>\nHi Andreas,<br>\nthe set of (overloaded) defining equations cannot be arbitrary since <br>\nthen the problem of detecting a cycle in them would undecidable.</p>\n<p>Therefore we impose an additional restriction that makes the problem <br>\nquadratic. I call the restriction composability:<br>\nfor all  d_\\tau == ... and<br>\n          c == ... d_\\sigma ...<br>\n\\sigma must be an instance of \\tau or \\tau must be an instance of \\sigma.<br>\n(More can be found in my PhD thesis (chapter 3.5)).</p>\n<p>The composability does not hold in your example:<br>\nYou overload \"sample :: ('a, ... evnT) sample\"<br>\nand then in the definition of test you use \"sample :: (bool, 'a) sample\".</p>\n<p>You have two choices now:<br>\na) you either refactor your definitions such that you don't run into <br>\nthis problem (for example by using more specific types)<br>\nb) or you can use unchecked overloading by then you are on your own <br>\n(i.e., the definition will be axiomatic).</p>\n<p>I hope this helps.</p>\n<p>Ondrej</p>",
        "id": 294673418,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661174109
    },
    {
        "content": "<p>From: Ondřej Kunčar &lt;<a href=\"mailto:kuncar@in.tum.de\">kuncar@in.tum.de</a>&gt;<br>\nOf course, I missed one case.<br>\n\\sigma must be an instance of \\tau or \\tau must be an instance of \\sigma <br>\n<em>or they are not unifiable</em>.</p>\n<p>That said, composability wants to rule out the case that the two types <br>\nhave a non-trivial common instance.</p>",
        "id": 294673431,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661174113
    },
    {
        "content": "<p>From: Andreas Lochbihler &lt;<a href=\"mailto:andreas.lochbihler@inf.ethz.ch\">andreas.lochbihler@inf.ethz.ch</a>&gt;<br>\nHi Ondrej,</p>\n<p>Thanks for the quick explanation. It does explain the error message. I'll have to think <br>\nabout which of the suggested options are feasible.</p>\n<p>Cheers,<br>\nAndreas</p>",
        "id": 294673481,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661174131
    },
    {
        "content": "<p>From: Simon Foster &lt;<a href=\"mailto:simon.foster@york.ac.uk\">simon.foster@york.ac.uk</a>&gt;<br>\nHi Ondrej,</p>\n<p>I've got a related follow up question on malformed dependencies. Why is the<br>\nfollowing rejected?</p>\n<p>consts<br>\n  f :: \"'α\"</p>\n<p>overloading<br>\n  g == \"f :: nat × int\"<br>\nbegin<br>\n  definition g :: \"nat × int\" where<br>\n  \"g = (1,2)\"<br>\nend</p>\n<p>definition \"l1 (t1 :: 'a × int) ≡ f = t1\" (* Rejected *)</p>\n<p>Malformed dependency of l1('a) -&gt; f('a × int)<br>\n(restriction f(nat × int) from \"Scratch.g_def_raw\"</p>\n<p>If I understand correctly, here nat × int  is indeed an instance of 'a ×<br>\nint, so why is this rejected? I note that it seems to only be accepted if<br>\nthe type of f used by l1 specialises that of g, or is orthogonal to it; so<br>\ndoes the specialisation path in fact have to go from l1 -&gt; g?</p>\n<p>Thanks,</p>\n<p>-Simon.</p>",
        "id": 294677640,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661175507
    },
    {
        "content": "<p>From: Simon Foster &lt;<a href=\"mailto:simon.foster@york.ac.uk\">simon.foster@york.ac.uk</a>&gt;<br>\nDear Ondrej,</p>\n<p>I asked the question below about overloaded definitions and permissible<br>\ndependencies. I'm still interested in this kind of overloading scheme, so I<br>\njust tried my example in Isabelle 2016-1 and note that it is still rejected:</p>\n<p>consts<br>\n  f :: \"'a\"</p>\n<p>overloading<br>\n  g == \"f :: nat * int\"<br>\nbegin<br>\n  definition g :: \"nat * int\" where<br>\n  \"g = (1,2)\"<br>\nend</p>\n<p>definition \"l1 (t1 :: 'a * int) ≡ f = t1\" (* Rejected *)</p>\n<p>Please could you elaborate why it is not possible to specialise a<br>\npolymorphic constant in this way? It seems to satisfy your composability<br>\ncriterion (nat * int is an instance of 'a * int).</p>\n<p>Thanks,</p>\n<p>-Simon.</p>",
        "id": 294705149,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661180416
    }
]