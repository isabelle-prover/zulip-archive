[
    {
        "content": "<p>From: Peter Chapman &lt;<a href=\"mailto:pc@cs.st-and.ac.uk\">pc@cs.st-and.ac.uk</a>&gt;<br>\nHi</p>\n<p>How can I define a map for multisets, similar to the one for lists</p>\n<p>map f [] = []<br>\nmap f (x # xs) = (f x) # map f xs</p>\n<p>and the equivalent for sets</p>\n<p>map f A == {f x. x : A}  ?</p>\n<p>I cannot use the first, primrec, way of doing things, because I get an  <br>\nerror about multisets not being datatypes, and I cannot use the second  <br>\nbecause I cannot find a way to directly represent a multiset.   <br>\nIdeally, I would want to say</p>\n<p>map f A == {# f x. x :#A #}</p>\n<p>but I don't think this is possible.  There is an induction rule for  <br>\nmultisets, which suggests there should be some way to define \"map\".   <br>\nCurrently I am using two axioms, corresponding to the two inductive  <br>\ncases:</p>\n<p>map f {#} == {#}<br>\nmap f (A + {#x#}) == (map f A) + {# f x #}</p>\n<p>but this is not ideal.</p>\n<p>Many thanks</p>\n<p>Peter</p>",
        "id": 294066805,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660825730
    },
    {
        "content": "<p>From: Tjark Weber &lt;<a href=\"mailto:tjark.weber@gmx.de\">tjark.weber@gmx.de</a>&gt;<br>\nPeter,</p>\n<p>theory Multiset in Isabelle 2008 already contains</p>\n<p>\"image_mset f == fold_mset (op + o single o f) {#}\"</p>\n<p>See <a href=\"http://isabelle.in.tum.de/dist/library/HOL/Library/Multiset.html\">http://isabelle.in.tum.de/dist/library/HOL/Library/Multiset.html</a> for<br>\nfurther details.</p>\n<p>Best,<br>\nTjark</p>",
        "id": 294066844,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660825747
    },
    {
        "content": "<p>From: Jeremy Dawson &lt;<a href=\"mailto:jeremy@rsise.anu.edu.au\">jeremy@rsise.anu.edu.au</a>&gt;<br>\nPeter Chapman wrote:<br>\nPeter,</p>\n<p>I've done exactly this in the last few months.</p>\n<p>The definition looks like this (it's based on the function ext - which <br>\nalso gives a monad structure):</p>\n<p>(* multisets as monads *)<br>\nconstdefs<br>\n  mset_ext_count :: \"('a =&gt; 'b multiset) =&gt; 'a multiset =&gt; 'b =&gt; nat\"<br>\n  \"mset_ext_count f M b == setsum (%a. count M a * count (f a) b) (set_of M)\"</p>\n<p>mset_ext :: \"('a =&gt; 'b multiset) =&gt; 'a multiset =&gt; 'b multiset\"<br>\n  \"mset_ext f M == Abs_multiset (mset_ext_count f M)\"</p>\n<p>mset_map :: \"('a =&gt; 'b) =&gt; 'a multiset =&gt; 'b multiset\"<br>\n  \"mset_map f == mset_ext (single o f)\"</p>\n<p>mset_join :: \"'a multiset multiset =&gt; 'a multiset\"<br>\n  \"mset_join == mset_ext id\"</p>\n<p>See <a href=\"http://users.rsise.anu.edu.au/~jeremy/isabelle/2005/seqms/Multiset_no_le.thy\">http://users.rsise.anu.edu.au/~jeremy/isabelle/2005/seqms/Multiset_no_le.thy</a></p>\n<p>Then some relevant theorems are in<br>\n<a href=\"http://users.rsise.anu.edu.au/~jeremy/isabelle/2005/seqms/Multiset_no_le.ML\">http://users.rsise.anu.edu.au/~jeremy/isabelle/2005/seqms/Multiset_no_le.ML</a></p>\n<p>Jeremy</p>",
        "id": 294067860,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660826083
    }
]