[
    {
        "content": "<p>From: Lars Hupel &lt;<a href=\"mailto:hupel@in.tum.de\">hupel@in.tum.de</a>&gt;<br>\n(referring to Isabelle2013)</p>\n<p>Consider the following snippet:</p>\n<p>theory Foo<br>\nimports Main<br>\nbegin</p>\n<p>value x</p>\n<p>As expected, nothing happens when Ctrl-clicking <code>x</code>, since it's a free<br>\nvariable.</p>\n<p>Now, change that to the following:</p>\n<p>ML{*<br>\n@{term x}<br>\n*}</p>\n<p>When you Ctrl-click <code>x</code> there, Isabelle/jEdit opens <code>thm.ML</code>, jumping to<br>\nthe <code>TFree</code> constructor of <code>datatype typ</code>.</p>\n<p>In contrast:</p>\n<p>ML{*<br>\n@{term \"x :: nat\"}<br>\n*}</p>\n<p>Ctrl-clicking <code>x</code> jumps to the <code>Type</code> constructor of <code>datatype typ</code>.</p>",
        "id": 294248263,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660909783
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nAs a general principle, the Prover IDE (PIDE) markup allows the prover to <br>\naugment sources by aspects of its formal processing.  Thus the front-end <br>\nbasically visualizes a partial trace of what the prover did, when <br>\ndigesting the text.</p>\n<p>The prover consists of many languages and subsystems, so the markup might <br>\nconsist of too much information (several competing languages) or too <br>\nlittle (languages that don't cope with PIDE markup yet).</p>\n<p>In the examples above it is Isabelle/ML exposing markup produced by the <br>\nPoly/ML compiler that is invoked within a certain formal context and with <br>\ncertain source positions.  The ML antiquotation @{term} inlines a concrete <br>\nML datatype value, so its markup tells about constructors of ML types <br>\ntyp/term, as defined in src/Pure/term.ML.</p>\n<p>That is neither a \"bug\" nor a \"feature\", not even strange.  It is how PIDE <br>\nreally works, in conjunction with other tools like the ML compiler.</p>\n<p>You can see more about this as follows:</p>\n<p>declare [[ML_trace]]<br>\n   ML {* @{term \"x :: nat\"} *}</p>\n<p>In some situations where the stack of markups on some text gets really <br>\nconfusing, I have changed the implementation inside, to get its \"trace\" in <br>\nbetter presentable shape.  (There have been funny situations where PIDE <br>\nmarkup has revealed odd tricks from the past to make the system do certain <br>\nthings, but that is now revealed to the end-user and better avoided.)</p>\n<p>Makarius</p>",
        "id": 294248374,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660909814
    },
    {
        "content": "<p>From: Lars Noschinski &lt;<a href=\"mailto:noschinl@in.tum.de\">noschinl@in.tum.de</a>&gt;<br>\nFrom this description, I would have expected it to jump to Free (the <br>\noutermost constructor) instead of TFree.</p>\n<p>Without this description, I would have expected that nothing happens <br>\nwhen clicking on a free variable inside @{term}: For other atomic terms <br>\n(e.g. constants, free variables registered in the context), clicking <br>\ninside @{term} behaves like in other contexts, for example \"lemma\".<br>\nAlso, the behaviour of @{term} differs from the behaviour of @{cterm}, <br>\nfor example.</p>\n<p>So, for a user not thinking about the implementation of the system, this <br>\nfeels definitely inconsistent.</p>\n<p>-- Lars</p>",
        "id": 294248406,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660909826
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nOn Mon, 23 Sep 2013, Lars Noschinski wrote:</p>\n<blockquote>\n<p>Also, the behaviour of @{term} differs from the behaviour of @{cterm}, <br>\nfor example.</p>\n</blockquote>\n<p>There is a very fundamental difference here: term is a concrete datatype <br>\nvalue that is inlined, and cterm is an abstract entity of the LCF kernel. <br>\nUsers of Isabelle/ML need to get that understanding at some point.</p>\n<blockquote>\n<p>So, for a user not thinking about the implementation of the system, this <br>\nfeels definitely inconsistent.</p>\n</blockquote>\n<p>Back to a general point: PIDE markup does many things, but not everything. <br>\nWhat it does was considered impossible some years ago, and users of other <br>\nproof assistants will be jaleous when they learn about it.</p>\n<p>Further fine-tuning of the markup is one of these continous processes <br>\n(ongoing for 20-30 years) of making even better what is there already.</p>\n<p>For markup produced by Poly/ML in particular, improvements come quicker <br>\nand more often when people manage to procure some funding for David <br>\nMatthews to do the work.</p>\n<p>Makarius</p>",
        "id": 294248417,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660909832
    }
]