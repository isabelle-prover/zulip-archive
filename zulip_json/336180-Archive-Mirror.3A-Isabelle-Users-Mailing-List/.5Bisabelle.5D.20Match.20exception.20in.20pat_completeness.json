[
    {
        "content": "<p>From: Lars Noschinski &lt;<a href=\"mailto:noschinl@in.tum.de\">noschinl@in.tum.de</a>&gt;<br>\nHello,</p>\n<p>the following code</p>\n<p>function foo :: \"'a list ⇒ nat\" where<br>\n       \"foo (y # ys) = 0\"<br>\n     by pat_completeness termination sorry</p>\n<p>raises a Match exception in pat_completeness (in Isabelle 2009-2):</p>\n<p>*** exception Match raised (line 111 of <br>\n\"/var/tmp/isabelle-makebin14768/Isabelle2009-2/src/HOL/Tools/Function/pat_completeness.ML\")<br>\n   *** At command \"by\".</p>\n<p>-- Lars</p>",
        "id": 294112851,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660837392
    },
    {
        "content": "<p>From: Alexander Krauss &lt;<a href=\"mailto:krauss@in.tum.de\">krauss@in.tum.de</a>&gt;<br>\nHi Lars,</p>\n<blockquote>\n<p>the following code</p>\n<p>function foo :: \"'a list ⇒ nat\" where<br>\n      \"foo (y # ys) = 0\"<br>\n    by pat_completeness termination sorry</p>\n<p>raises a Match exception in pat_completeness (in Isabelle 2009-2):</p>\n<p>*** exception Match raised (line 111 of <br>\n\"/var/tmp/isabelle-makebin14768/Isabelle2009-2/src/HOL/Tools/Function/pat_completeness.ML\") </p>\n</blockquote>\n<p>pat_completeness is behaving badly here, and throws a low-level <br>\nexception. The correct behaviour would be</p>\n<p>\"empty result sequence\"</p>\n<p>since your patterns are indeed incomplete, and it wont be able to prove <br>\ncompleteness. (Look at the first subgoal that it is supposed to solve). <br>\nThe function package can add the missing pattern automatically, if you <br>\npass it the \"(sequential)\" option (which is also implicit when you use <br>\nthe abbreviated form \"fun\". If your real problem is as simple as this <br>\none, then you probably want to use \"fun\".</p>\n<p>More explanations can be found in the tutorial for function definitions:<br>\n<a href=\"http://isabelle.in.tum.de/dist/Isabelle/doc/functions.pdf\">http://isabelle.in.tum.de/dist/Isabelle/doc/functions.pdf</a></p>\n<p>Alex</p>\n<blockquote>\n<p>*** At command \"by\".</p>\n<p>-- Lars</p>\n</blockquote>",
        "id": 294112967,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660837425
    },
    {
        "content": "<p>From: René Thiemann &lt;<a href=\"mailto:rene.thiemann@uibk.ac.at\">rene.thiemann@uibk.ac.at</a>&gt;<br>\nDear Lars,</p>\n<p>since you do not give all patterns (there is no case for the empty  <br>\nlist),<br>\nyou have to pass the sequential argument to the definition.</p>\n<p>function (sequential) foo :: \"'a list ⇒ nat\" where<br>\n      \"foo (y # ys) = 0\"<br>\n    by pat_completeness auto<br>\ntermination ...</p>\n<p>However, for such a simple function you can also directly use fun,  <br>\nsince it<br>\nwill figure out the termination proof by itself.</p>\n<p>fun foo :: \"'a list ⇒ nat\" where<br>\n   \"foo (y # ys) = 0\"</p>\n<p>Best regards,<br>\nRené</p>",
        "id": 294112984,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660837429
    },
    {
        "content": "<p>From: Lars Noschinski &lt;<a href=\"mailto:noschinl@in.tum.de\">noschinl@in.tum.de</a>&gt;<br>\nDear René,</p>\n<p>yes, this function definition is not complete, which is obvious here. <br>\nBut it was far from obvious in my original function definition (from <br>\nwhich I extracted this toy example). Hence I would expect <br>\npat_completeness to fail gracefully (or generate unsatisfiable <br>\nconstraints), so the user can see that it is not a bug in Isabelle, but <br>\nhis definition is wrong.</p>\n<p>-- Lars</p>",
        "id": 294113130,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660837466
    }
]