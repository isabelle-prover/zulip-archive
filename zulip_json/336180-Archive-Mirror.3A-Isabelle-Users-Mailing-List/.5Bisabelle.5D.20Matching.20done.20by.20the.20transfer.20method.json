[
    {
        "content": "<p>From: Daniel Raggi &lt;<a href=\"mailto:danielraggi@gmail.com\">danielraggi@gmail.com</a>&gt;<br>\nSuppose I have a transfer rule of the form:<br>\n\"((R ===&gt; op =) ===&gt; op =) All (λ Q. ∀ x&gt;0. Q x)\"</p>\n<p>and a goal of the form:<br>\n\"∀ x&gt;0. P x\"</p>\n<p>I would expect the transfer method to find the transfer rule as a match for<br>\nthe goal  provided that we have a match for P). However, what I get is:<br>\ngoal (3 subgoals):</p>\n<ol>\n<li>?a10 (λx. ?ab10 0 x ⟶ P1 x)          (* here P1 is the match for P *)</li>\n<li>Transfer.Rel ((BN ===&gt; op =) ===&gt; op =) ?a10 All</li>\n<li>Transfer.Rel (op = ===&gt; BN ===&gt; op =) ?ab10 op &lt;</li>\n</ol>\n<p>which suggests that the method is not looking for any `complex' matches,<br>\nbut just searching for simpler matches. Is this a limitation of the<br>\ntransfer method, or am I missing something? Should I have to create a<br>\ndefinition for \"λ Q. ∀ x&gt;0. Q x\" (or whichever  constraint I suggest as a<br>\ntransfer target).</p>\n<p>Daniel</p>",
        "id": 294237362,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660905364
    },
    {
        "content": "<p>From: Ondřej Kunčar &lt;<a href=\"mailto:kuncar@in.tum.de\">kuncar@in.tum.de</a>&gt;<br>\nWell, this suggests that you need a rule of this form:<br>\n\"((BN ===&gt; op =) ===&gt; op =) &lt;something&gt; All\"</p>\n<p>but your rule is<br>\n\"((R ===&gt; op =) ===&gt; op =) All &lt;something&gt;\"</p>\n<p>I don't know what your example is about but it looks like you might want <br>\nto take a look to HOL/ex/Transfer_Int_Nat.thy.</p>\n<p>Ondrej</p>",
        "id": 294237381,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660905371
    },
    {
        "content": "<p>From: Daniel Raggi &lt;<a href=\"mailto:danielraggi@gmail.com\">danielraggi@gmail.com</a>&gt;<br>\nOn 03/22/2013 12:20 PM, Daniel Raggi wrote:</p>\n<blockquote>\n<p>Suppose I have a transfer rule of the form:<br>\n\"((R ===&gt; op =) ===&gt; op =) All (λ Q. ∀ x&gt;0. Q x)\"</p>\n</blockquote>\n<p>Ok, sorry I wrote this. I meant BN instead of R.</p>\n<blockquote>\n<p>Well, this suggests that you need a rule of this form:<br>\n\"((BN ===&gt; op =) ===&gt; op =) &lt;something&gt; All\"</p>\n<p>but your rule is<br>\n\"((R ===&gt; op =) ===&gt; op =) All &lt;something&gt;\"</p>\n<p>The problem is that if you define a rule like<br>\n\"((BN ===&gt; op =) ===&gt; op =) All &lt;something&gt;\"<br>\nwith &lt;something&gt; being composite (say it is \"s t\"), the rule will be<br>\ncompletely useless because the transfer method, when applied to a goal,<br>\nwill search for matches only for the symbols in the goal, i.e., it will<br>\nsearch for a match<br>\n\"(&lt;transfer stuff here&gt;) &lt;something&gt; s\"<br>\nand another match<br>\n\"(&lt;transfer stuff here&gt;) &lt;something&gt; t\"</p>\n</blockquote>\n<p>Even when the goal contains expression \"s t\" explicitly, a rule of the form<br>\n\"(&lt;transfer stuff here&gt;) &lt;something&gt; (s t)\"<br>\nwill not be used.</p>\n<p>In the case I'm working one wouldn't be able to find a rule of the form<br>\n\"((BN ===&gt; op =) ===&gt; op =) &lt;something&gt; All\"<br>\nbecause BN is not right-total. That's why I am bounding it.</p>\n<p>I have looked at Transfer_Int_Nat.thy. The difference from my example and<br>\nthat example is that, there, things are being transferred from Int to Nat,<br>\nso every All in a goal is translated to a bounded forall. That same example<br>\nwouldn't work the other way around if we had a bounded forall in a goal (of<br>\nInt) and tried to reduce it to an All (of Nat).</p>\n<p>I hope I'm not being too unclear...</p>\n<p>Daniel</p>",
        "id": 294237428,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660905383
    },
    {
        "content": "<p>From: Daniel Raggi &lt;<a href=\"mailto:danielraggi@gmail.com\">danielraggi@gmail.com</a>&gt;<br>\nok, so I made a simpler example to clarify stuff. Suppose you have this<br>\ntransfer rules:<br>\n\"BN N (4+3)\"<br>\n\"(BN ===&gt; op &lt;-&gt;) Q P\"<br>\n(where N and Q are some constants we previously defined)</p>\n<p>and this goal:<br>\n\"P (4+3)\"</p>\n<p>One would think that the transfer method would reduce the goal to \"Q N\",<br>\nbut it doesn't, because I think it would rather find transfer rules for 4,<br>\n3 and +, not the whole term.</p>\n<p>Daniel</p>",
        "id": 294237443,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660905395
    },
    {
        "content": "<p>From: Daniel Raggi &lt;<a href=\"mailto:danielraggi@gmail.com\">danielraggi@gmail.com</a>&gt;<br>\nNo, actually my example is wrong... it does reduce \"P (4+3)\" to \"Q N\". Then<br>\nit is more puzzling than I thought, because it is specific to the forall.</p>",
        "id": 294237458,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660905403
    },
    {
        "content": "<p>From: Ondřej Kunčar &lt;<a href=\"mailto:kuncar@in.tum.de\">kuncar@in.tum.de</a>&gt;<br>\nOn 03/22/2013 01:38 PM, Daniel Raggi wrote:</p>\n<blockquote>\n<p>On 03/22/2013 12:20 PM, Daniel Raggi wrote:</p>\n<p>Suppose I have a transfer rule of the form:<br>\n    \"((R ===&gt; op =) ===&gt; op =) All (λ Q. ∀ x&gt;0. Q x)\"</p>\n<p>Ok, sorry I wrote this. I meant BN instead of R.</p>\n</blockquote>\n<p>My point was about the order of the transfer rule, not about the relation.<br>\nBut I was too hasty. I thought you tried to use BN :: int =&gt; nat =&gt; <br>\nbool, but your relation is really BN :: nat =&gt; int =&gt; bool.</p>\n<blockquote>\n<p>Well, this suggests that you need a rule of this form:<br>\n    \"((BN ===&gt; op =) ===&gt; op =) &lt;something&gt; All\"</p>\n<p>but your rule is<br>\n    \"((R ===&gt; op =) ===&gt; op =) All &lt;something&gt;\"</p>\n<p>The problem is that if you define a rule like<br>\n\"((BN ===&gt; op =) ===&gt; op =) All &lt;something&gt;\"<br>\nwith &lt;something&gt; being composite (say it is \"s t\"), the rule will be<br>\ncompletely useless because the transfer method, when applied to a goal,<br>\nwill search for matches only for the symbols in the goal, i.e., it will<br>\nsearch for a match<br>\n\"(&lt;transfer stuff here&gt;) &lt;something&gt; s\"<br>\nand another match<br>\n\"(&lt;transfer stuff here&gt;) &lt;something&gt; t\"</p>\n</blockquote>\n<p>As far as I know, that works. If you have a transfer rule \"R f (g h)\" <br>\nand your goal contains \"g h\", that term is transferred to f.</p>\n<p>If your rule is, let's say, \"R f (%P. g P)\" and your goal contains g R, <br>\nthis is not magically transferred to \"f R\". Because in order to transfer <br>\ng, a rule \"R ? g\" is expected.</p>\n<p>But concerning your example with quantifiers, I think you can use Ball <br>\nconstant instead</p>\n<p>\"((R ===&gt; op =) ===&gt; op =) All (Ball {0..})\",</p>\n<p>similarly to  HOL/ex/Transfer_Int_Nat.thy.</p>\n<p>Hope this helps.</p>\n<p>Ondrej</p>",
        "id": 294237477,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660905414
    },
    {
        "content": "<p>From: Daniel Raggi &lt;<a href=\"mailto:danielraggi@gmail.com\">danielraggi@gmail.com</a>&gt;<br>\nYes, Ball works, and some composite expressions work.<br>\nBut suppose we have the transfer rules<br>\n\"(BN ===&gt; op ⟷) T P\"<br>\n\"((BN ===&gt; op ⟷) ===&gt; op ⟷) All (λ Q. (∀ x&gt;0. Q x))\"</p>\n<p>and goal<br>\n\"(λ Q. (∀ x&gt;0. Q x)) (λx. P x)\"</p>\n<p>(note that this is exactly the same as \"∀ x&gt;0. P x\"). The transfer rules<br>\nmatch the goal perfectly, but when \"(λ Q. (∀ x&gt;0. Q x)) (λx. P x)\"  is<br>\nparsed by Isabelle it states the goal as \"∀ x&gt;0. P x\" and apparently the<br>\ntransfer method tries to find a match for that expression, and not the more<br>\n\"internal\" one.</p>\n<p>Thanks for your help. I'll stop repeating myself now.</p>\n<p>Daniel</p>",
        "id": 294237485,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660905420
    },
    {
        "content": "<p>From: Ondřej Kunčar &lt;<a href=\"mailto:kuncar@in.tum.de\">kuncar@in.tum.de</a>&gt;<br>\n\"(λ Q. (∀ x&gt;0. Q x)) (λx. P x)\" and \"∀ x&gt;0. P x\" are not exactly the <br>\nsame. They are only beta-equivalent. And you should know that when a <br>\nterm is parsed in Isabelle, it's beta-normalized. Thus your goal is <br>\nreally this term \"∀ x&gt;0. P x\".</p>\n<p>Ondrej</p>",
        "id": 294237501,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660905426
    },
    {
        "content": "<p>From: Daniel Raggi &lt;<a href=\"mailto:danielraggi@gmail.com\">danielraggi@gmail.com</a>&gt;<br>\nI see. Thanks. Then I'll find my way around this using tricks like Ball,<br>\nor defining my own bounded quantifiers when I need them.</p>",
        "id": 294237512,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660905432
    }
]