[
    {
        "content": "<p>From: Gottfried Barrow &lt;<a href=\"mailto:gottfried.barrow@gmx.com\">gottfried.barrow@gmx.com</a>&gt;<br>\nHi,</p>\n<p>Suppose I have three simple theorems:</p>\n<p>(1)  theorem the_ordered_pair_property_simp:<br>\n        \"!u. !v. !r. !s. (u = r &amp; v = s) --&gt; (&lt;u,v&gt; = &lt;r,s&gt;)\"<br>\n        by simp</p>\n<p>(2) theorem \"(a = c &amp; b = c) --&gt; a = b\"<br>\n         by simp</p>\n<p>(3) theorem \"!u. !v. !A. !B. (A = {u,v} &amp; B = {u,v}) --&gt; A = B\"<br>\n         by simp</p>\n<p>I think my question can be summarized be generalized by this question, <br>\n\"What do names mean in Isabelle?\"</p>\n<p>My specific question would be, \"Are these theorems that would need to be <br>\nproved if they're not restatements of prior theorems in HOL, or do they <br>\ncome by default because of how name substitution works?\"</p>\n<p>I see these 4 axioms in HOL.thy:</p>\n<p>axiomatization where<br>\n      refl: \"t = (t::'a)\" and<br>\n      subst: \"s = t \\&lt;Longrightarrow&gt; P s \\&lt;Longrightarrow&gt; P t\" and<br>\n      ext: \"(!!x::'a. (f x ::'b) = g x) ==&gt; (%x. f x) = (%x. g x)\"<br>\n      the_eq_trivial: \"(THE x. x = a) = (a::'a)\"</p>\n<p>and</p>\n<p>lemma the_sym_eq_trivial: \"(THE y. x=y) = x\"</p>\n<p>and</p>\n<p>lemmas [simp] =<br>\n       ...<br>\n      the_eq_trivial<br>\n      the_sym_eq_trivial</p>\n<p>So maybe those last two rules are what simp is using to prove (1), (2), <br>\nand (3). And if simp is proving something, it must mean that something <br>\nhas to be proved, if it hasn't already been proved.</p>\n<p>Regards,<br>\nGB</p>",
        "id": 294222340,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660898161
    },
    {
        "content": "<p>From: Ramana Kumar &lt;<a href=\"mailto:rk436@cam.ac.uk\">rk436@cam.ac.uk</a>&gt;<br>\nOn Mon, Sep 3, 2012 at 6:24 PM, Gottfried Barrow<br>\n&lt;gottfried.barrow@gmx.com&gt;wrote:</p>\n<blockquote>\n<p>Hi,</p>\n<p>Suppose I have three simple theorems:</p>\n<p>(1)  theorem the_ordered_pair_property_**simp:<br>\n       \"!u. !v. !r. !s. (u = r &amp; v = s) --&gt; (&lt;u,v&gt; = &lt;r,s&gt;)\"<br>\n       by simp</p>\n<p>(2) theorem \"(a = c &amp; b = c) --&gt; a = b\"<br>\n        by simp</p>\n<p>(3) theorem \"!u. !v. !A. !B. (A = {u,v} &amp; B = {u,v}) --&gt; A = B\"<br>\n        by simp</p>\n<p>I think my question can be summarized be generalized by this question,<br>\n\"What do names mean in Isabelle?\"</p>\n<p>My specific question would be, \"Are these theorems that would need to be<br>\nproved if they're not restatements of prior theorems in HOL, or do they<br>\ncome by default because of how name substitution works?\"<br>\n</p>\n</blockquote>\n<p>Your question seems to me to be more about equality and less about names.</p>\n<blockquote>\n<p>I see these 4 axioms in HOL.thy:</p>\n<p>axiomatization where<br>\n     refl: \"t = (t::'a)\" and<br>\n     subst: \"s = t \\&lt;Longrightarrow&gt; P s \\&lt;Longrightarrow&gt; P t\" and<br>\n     ext: \"(!!x::'a. (f x ::'b) = g x) ==&gt; (%x. f x) = (%x. g x)\"<br>\n     the_eq_trivial: \"(THE x. x = a) = (a::'a)\"</p>\n<p>and</p>\n<p>lemma the_sym_eq_trivial: \"(THE y. x=y) = x\"</p>\n<p>and</p>\n<p>lemmas [simp] =<br>\n      ...<br>\n     the_eq_trivial<br>\n     the_sym_eq_trivial</p>\n<p>So maybe those last two rules are what simp is using to prove (1), (2),<br>\nand (3). And if simp is proving something, it must mean that something has<br>\nto be proved, if it hasn't already been proved.<br>\n</p>\n</blockquote>\n<p>No, those two rules are about definite choice (THE), which doesn't appear<br>\nanywhere in your three simple theorems above.</p>\n<blockquote>\n<p>Regards,<br>\nGB</p>\n</blockquote>",
        "id": 294222478,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660898228
    },
    {
        "content": "<p>From: Gottfried Barrow &lt;<a href=\"mailto:gottfried.barrow@gmx.com\">gottfried.barrow@gmx.com</a>&gt;<br>\nOn 9/3/2012 1:18 PM, Ramana Kumar wrote:</p>\n<blockquote>\n<p>Your question seems to me to be more about equality and less about names.</p>\n</blockquote>\n<p>Yea, and I think I figured out the proper question. The right question <br>\nis not, \"Am I proving something, or do I have to prove something?\", but <br>\n\"Does the proof of my theorem require the properties that I want it to <br>\nrequire?\"</p>\n<p>To make sense of that, here's what I knew was a fairly vacuous statement:</p>\n<p>(1) theorem \"!u. !v. !r. !s. (r = {u,v}) &amp; (s = {u,v}) --&gt; r = s\"<br>\n          by simp</p>\n<p>But that this isn't:</p>\n<p>(2) theorem \"!u. !v. !r. r = {u,v} --&gt; (!x. x inS r --&gt; (x = u | x = <br>\nv))\"<br>\n         by(metis upA)</p>\n<p>It is best not to use auto proofs in a mindless manner.</p>\n<p>I figured out a good test to test whether a theorem is vacuous: put it <br>\nbefore the axioms or theorems that normally make it true. If it's true <br>\nby simp there, then there's a good chance that's not the right way to <br>\nstate your theorem.</p>\n<p>This goes back to my past thoughts of what equality means. Equality <br>\ndoesn't mean identical, because 1/2 = 2/4.  But in normal math, when we <br>\ngive different names to the same object, we sometimes start <br>\ninterchanging the names with no appeal to the properties of equality. We <br>\ntreat the names like synonyms.</p>\n<p>The meaning of names aren't ever discussed. That's low-level, and I <br>\nstarted thinking about names after I saw that two congruence classes can <br>\nbe equal, but yet not \"act the same\" sometimes.</p>\n<blockquote>\n<blockquote>\n<p>So maybe those last two rules are what simp is using to prove (1), (2),<br>\nand (3). And if simp is proving something, it must mean that something has<br>\nto be proved, if it hasn't already been proved.<br>\nNo, those two rules are about definite choice (THE), which doesn't appear<br>\nanywhere in your three simple theorems above.</p>\n</blockquote>\n</blockquote>\n<p>I'll postpone \"choice\" for another day, many days into the future.</p>\n<p>Thanks,<br>\nGB</p>",
        "id": 294222606,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660898295
    }
]