[
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\n(This is a relaunch of a thread that ended up containing mostly rubbish. <br>\nHere is another attempt to shed some light on the factual situation.)</p>\n<p>The latter aspect has actually changed here:</p>\n<p>changeset:   59331:4139db32821e<br>\nuser:        wenzelm<br>\ndate:        Fri Jan 09 20:39:17 2015 +0100<br>\nfiles:       src/Pure/PIDE/command.ML<br>\ndescription:<br>\nnon-strict print_state: display old proof state on failure, e.g. <br>\nunfinished command;</p>\n<p>That is from 09-Jan-2015, and it is the new behaviour in Isabelle2015 on <br>\nthis thread that was not articulated so far. Try this example in <br>\nIsabelle2014 vs. Isabelle2015 to see the difference:</p>\n<p>lemma A<br>\n   apply fail</p>\n<p>Of course, a method application error is also an error, so the old state <br>\nis printed first and the error message second.  Thus the error might get <br>\nobscured by long proof states, which was the original starting point <br>\nabove.</p>\n<p>The deeper problem is cluttering of Output with too many different things, <br>\nand the lack of a dedicated panel just for proof state output. I was <br>\nactually thinking about reformed proof state output 1-2 weeks ago, but got <br>\ndistracted again by the noise here on the mailing list.</p>\n<p>Makarius</p>",
        "id": 294644408,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661163451
    },
    {
        "content": "<p>From: Peter Lammich &lt;<a href=\"mailto:lammich@in.tum.de\">lammich@in.tum.de</a>&gt;<br>\nOn Di, 2015-06-23 at 10:19 +0200, Makarius wrote:</p>\n<blockquote>\n<p>(This is a relaunch of a thread that ended up containing mostly rubbish. <br>\nHere is another attempt to shed some light on the factual situation.)</p>\n<p>On Thu, 21 May 2015, Peter Lammich wrote:</p>\n<blockquote>\n<p>The output window shows the normal output (e.g. the current subgoals)<br>\nbefore the error output, (e.g. tactic failed).</p>\n<p>This is very inconvenient if the list of goals is longer, and you have<br>\nto scroll down every time to see the error message.</p>\n<p>In Isabelle2014, it was fine, and it showed<br>\n errors, then normal output, then warnings.</p>\n<p>btw: I reported the same issue for some Isabelle2014-RCx, it got fixed<br>\nfor 2014, and now we have it back again.</p>\n</blockquote>\n<p>Can you explain precisely what you reported for Isabelle2014-RCx?  What <br>\nwas the \"issue\" and what was the \"fix\".</p>\n</blockquote>\n<p>As you pointed out, it was already discussed in<br>\n<a href=\"https://lists.cam.ac.uk/pipermail/cl-isabelle-users/2014-August/msg00115.html\">https://lists.cam.ac.uk/pipermail/cl-isabelle-users/2014-August/msg00115.html</a></p>\n<p>in the release, the error messages then appeared before the subgoals,<br>\nor, more precisely, the subgoals did not appear explicitly at all, but<br>\nthe error message contained a list of subgoals.</p>\n<p>In Isabelle2015, the last goal state before the failing command seems to<br>\nget printed, too --- before the error message. This behaviour has a<br>\npositive and a negative effect on (my personal) workflow, which somewhat<br>\ncoincides with your analysis:</p>\n<p>Positive: When typing commands, in particular those involving inner<br>\nsyntax like &lt;have \"very-long-term\"&gt;, I can see the current goal-state<br>\nall the time. In Isabelle2014 you saw \"syntax error\" or \"type error\"<br>\nmost of the time, and had to go back with the cursor to see the<br>\ngoal-state. I appreciate this behaviour, because, during typing such a<br>\ncommand, you are mostly interested in the previous goal state ... not in<br>\nthe bogus information that you have a syntax error b/c typing is not<br>\ncompleted yet.</p>\n<p>Negative: As already reported before, if you have finished typing the<br>\ncommand, you are expecting that it works. If it does not, you are mostly<br>\ninterested in the error message, and the proof state of the previous<br>\ncommand is of less importance.</p>\n<p>As you point out, this behaviour was introduced in 2015. Note that the<br>\noverall problem was introduced with the processing model of PIDE, and<br>\ndid not exist in Proof-General: There, by issuing a \"goto this position\"</p>\n<ul>\n<li>command, you told the IDE that you have finished typing, and now want<br>\nto focus on handling the errors.</li>\n</ul>\n<blockquote>\n<p>The deeper problem is cluttering of Output with too many different things, <br>\nand the lack of a dedicated panel just for proof state output. <br>\nFor those people with large screens, this may be a good solution. It<br>\nalready worked nicely for PG, where I usually used the \"3-pane\" mode, or<br>\nhad three windows: Text, Goal-state, Errors/Warnings. </p>\n</blockquote>\n<p>To make up for a nice layout, I would like to dock one panel to<br>\nright-top, and the other to right-bottom. Does jedit support such<br>\ndocking positions, that go beyond left,right,top,bottom?</p>\n<p>If you work on a small screen (laptop), you probably still want to have<br>\na mode that consumes less space, and sensibly mixes the outputs.<br>\nHowever, I do not know how a PIDE-like asynchronous IDE can guess what<br>\nthe user currently wants to see. Perhaps, you could try a heuristics on<br>\nthe type of error, something like: <br>\nSyntax-errors are displayed after the goal-state, failed method errors<br>\nbefore the goal-state.</p>\n<p>Peter</p>",
        "id": 294644426,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661163464
    },
    {
        "content": "<p>From: Peter Lammich &lt;<a href=\"mailto:lammich@in.tum.de\">lammich@in.tum.de</a>&gt;<br>\nOne solution that does not involve too much implementation effort might<br>\nbe to not include the goal-state into the error message, and output this<br>\nshorter error message <em>before</em> the goal-state. </p>\n<p>While the user is typing, he would see a short error message that he<br>\ncould ignore, followed by the goal state. <br>\nWhen the user is inspecting the (error-)result of the command, he would<br>\nsee the error message first. Warnings should still be printed after the<br>\ngoal-state</p>",
        "id": 294644459,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661163476
    },
    {
        "content": "<p>From: Larry Paulson &lt;<a href=\"mailto:lp15@cam.ac.uk\">lp15@cam.ac.uk</a>&gt;<br>\nYes â€” this might be OK.<br>\nLarry</p>",
        "id": 294644477,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661163482
    },
    {
        "content": "<p>From: Dmitriy Traytel &lt;<a href=\"mailto:traytel@in.tum.de\">traytel@in.tum.de</a>&gt;<br>\nBut this would also mean that one does not see the intermediate goal <br>\nstate if something goes wrong in the terminal method slot of by.</p>\n<p>lemma \"P (xs :: 'a list)\"<br>\n   by (induct xs) auto</p>\n<p>This is more useful when repairing existing proofs, rather than writing <br>\nnew proofs, though.</p>\n<p>Dmitriy</p>",
        "id": 294644520,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661163488
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nOn Tue, 23 Jun 2015, Peter Lammich wrote:</p>\n<blockquote>\n<blockquote>\n<p>The deeper problem is cluttering of Output with too many different <br>\nthings, and the lack of a dedicated panel just for proof state output.<br>\nFor those people with large screens, this may be a good solution. It <br>\nalready worked nicely for PG, where I usually used the \"3-pane\" mode, or <br>\nhad three windows: Text, Goal-state, Errors/Warnings.</p>\n</blockquote>\n<p>To make up for a nice layout, I would like to dock one panel to <br>\nright-top, and the other to right-bottom. Does jedit support such <br>\ndocking positions, that go beyond left,right,top,bottom?</p>\n</blockquote>\n<p>We've had this topic occasionally on the mailing list.  The default <br>\ndockable window manager of jEdit can't do that, but it is a general <br>\n\"framework\", so plugins can implement their own policies.  Anybody <br>\ninterested in some Java/AWT/Swing window management should subscribe to <br>\nthe jedit-devel mailing list and start a discussion there.</p>\n<p>So far I've done myself only very minimalistic tuning of the built-in <br>\nwindow manager, e.g. to add the \"Detach\" menu item.</p>\n<blockquote>\n<p>If you work on a small screen (laptop), you probably still want to have <br>\na mode that consumes less space, and sensibly mixes the outputs. <br>\nHowever, I do not know how a PIDE-like asynchronous IDE can guess what <br>\nthe user currently wants to see. Perhaps, you could try a heuristics on <br>\nthe type of error, something like: Syntax-errors are displayed after the <br>\ngoal-state, failed method errors before the goal-state.</p>\n</blockquote>\n<p>In ancient times when Proof General was alive and young (10-15 years ago), <br>\npeople had rather large displays and power-users even a second display <br>\njust for goal state output.</p>\n<p>Today people expect to be able to do big things with tiny mobile devices. <br>\nWith a really high resolution display (4K, 5K, Retina) it might actually <br>\nwork, if the font size is set to traditional 12px.</p>\n<p>Makarius</p>",
        "id": 294644531,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661163494
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nThe observation by Dmitriy is correct.</p>\n<p>The current printing of goal state errors is the result of various reforms <br>\nin the past few years. That relatively new behaviour is actually the <br>\nreason why I usually do many things without ever looking at the Output <br>\nwindow, often having it closed over a long stretch of time: the message <br>\nunder the red squiggles usually provides the relevant bits to see what is <br>\nmissing to finish a proof step.</p>\n<p>As already explained on earlier instances of the thread, any built-in <br>\npolicies to reorder messages in output don't work.  We've had that in <br>\nProof General, and it converged to a big mess over the decades.  In 2007 <br>\nthat actually caused total existence failure between Proof General 3.x and <br>\n4.x.  Then I introduced \"isabelle tty\" as temporary workaround; then <br>\n\"isabelle jedit\" a bit later.</p>\n<p>On a multi-window GUI there is no point to squeeze everything into a <br>\nsingle linear output.  The Query panel already provides a different way to <br>\nview a proof state, independently on Output.  Such things are relatively <br>\neasy to make, and don't require artificial intelligence from the system to <br>\nguess what the user wants to see.</p>\n<p>Makarius</p>",
        "id": 294644540,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661163500
    },
    {
        "content": "<p>From: Peter Lammich &lt;<a href=\"mailto:lammich@in.tum.de\">lammich@in.tum.de</a>&gt;<br>\nSo we could extract two feature requests:</p>\n<p>1. Allow for a separate errors/warnings and a proof state panel.<br>\nEnsure that they can be laid out nicely, such that the user can view<br>\nthem both simultaneously. In current jedit, the panels could be detached<br>\nand the layout been done by the OSs' window manager.</p>\n<p>2. Change the current output/proof state panel to display (short<br>\nversions of) error messages before warnings. The errors displayed on the<br>\nsquiggly lines may of course still contain the proof state. I know that<br>\nthis may be a technical problem, b/c (as far as I know) error messages<br>\nare generated by the ML-side, and not touched by the IDE.</p>",
        "id": 294644571,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661163513
    },
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\nI recommend to reread Gerwin's comment on red squiggles in the earlier thread:</p>\n<p>Iâ€™m not as worried about the scrolling as Peter (you could set goals_limit for <br>\ninstance, although Iâ€™d prefer not to have to), but I do have to point out that <br>\nthe squiggles canâ€™t be the main interaction mechanism for errors. They are <br>\npopups: you have to pick up the mouse, navigate there, and wait to see them. If <br>\nthe statement is big, the message sometimes obscures what you typed. That's too <br>\ndisruptive as main mechanism.</p>\n<p>Itâ€™s good to have the squiggles for errors (esp for position indication), and <br>\nthey work very well for warnings, but when youâ€™re writing your proof, your brain <br>\ndoesnâ€™t work as asynchronously as the document model. You will still have your <br>\nmental focus at one point and you will still want to see the result of your last <br>\naction as quickly as possible and react if it is an error. When youâ€™re writing <br>\nthe proof, your mental focus is on the output window, so thatâ€™s where errors <br>\nreports will cause the least mental overhead.</p>\n<p>I couldn't agree more.</p>\n<p>Tobias<br>\n<a href=\"/user_uploads/14278/jsQ1Z5pKvn63IyIeZw8hfiJY/smime.p7s\">smime.p7s</a></p>",
        "id": 294644593,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661163523
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nI read that, and it is one of the few things that are not rubbish on the <br>\nother thread.</p>\n<p>Gerwin merely described observations, without pretending to know how <br>\nthings work or how they should be done.</p>\n<p>Makarius</p>",
        "id": 294644597,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661163525
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nOn Tue, 23 Jun 2015, Peter Lammich wrote:</p>\n<blockquote>\n<ol>\n<li>Allow for a separate errors/warnings and a proof state panel.<br>\nEnsure that they can be laid out nicely, such that the user can view<br>\nthem both simultaneously. In current jedit, the panels could be detached<br>\nand the layout been done by the OSs' window manager.</li>\n</ol>\n</blockquote>\n<p>That is relatively simple, as I have pointed out already.</p>\n<p>I can immediately imagine further improvements, but it will require to <br>\nmove further and faster beyond old customs, and that has often been <br>\ninhibited in the past few years.</p>\n<blockquote>\n<ol start=\"2\">\n<li>Change the current output/proof state panel to display (short<br>\nversions of) error messages before warnings. The errors displayed on the<br>\nsquiggly lines may of course still contain the proof state. I know that<br>\nthis may be a technical problem, b/c (as far as I know) error messages<br>\nare generated by the ML-side, and not touched by the IDE.</li>\n</ol>\n</blockquote>\n<p>That is the \"AI\" approach to messages again.  It has already been <br>\ndisproven many times in the past.</p>\n<p>Errors and warnings need to be produced and managed as uniformly as <br>\npossible.  Special treatment and variations tend to cause unexpected <br>\nbreakdown.  We've had that e.g. in the goal state output in tactic failure <br>\nwhen it was first introduced, and only shortly after the release back then <br>\nyou discovered that the goal was printed without the flags of normal goal <br>\nstate printing, causing denial-of-service in the front-end for big states.</p>\n<p>Makarius</p>",
        "id": 294644613,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661163531
    },
    {
        "content": "<p>From: Harry Butterworth &lt;<a href=\"mailto:heb1001@gmail.com\">heb1001@gmail.com</a>&gt;<br>\nIn Isabelle/jEdit, I've also noticed needing to scroll to see error<br>\nmessages and goals disappearing when I start typing.  I have been using<br>\nmultiple views to get everything I want on the screen at once and using<br>\ncopy paste to keep a snapshot of a goal that I want to look at.</p>\n<p>Remainder of this email wanders off topic...</p>\n<blockquote>\n<p>In ancient times when Proof General was alive and young (10-15 years<br>\nago), people had rather large displays and power-users even a second<br>\ndisplay just for goal state output.</p>\n<p>Today people expect to be able to do big things with tiny mobile devices.<br>\nWith a really high resolution display (4K, 5K, Retina) it might actually<br>\nwork, if the font size is set to traditional 12px.</p>\n</blockquote>\n<p>I have run eclipse on my phone and it does work for a \"Hello world!\" demo<br>\nbut isn't usable because the interface isn't optimised for touch and using<br>\na mouse and keyboard puts you too far away from the tiny screen.  I think<br>\nIsabelle/jEdit would have the same problem on a small high res display.</p>\n<p>At work and home, I switched to using 4K TVs for Isabelle/jEdit.  I have<br>\none flat one and one curved one.  The better of the two is the curved one -<br>\na 48\" 4K SAMSUNG 48JU6800 (driven by a 9 series NVIDIA GTX @ 60Hz in UHD<br>\ncolour mode to get 4:4:4 chroma for pixel perfect text).  The curve is<br>\ndefinitely a good thing as the left and right edges seem much farther away<br>\non the flat one even though it is smaller at 40\".</p>\n<p>Both 4K TVs are very usable at normal monitor sitting distance and about<br>\nthe same pixel density as traditional monitors so text isn't tiny.</p>\n<p>My next step after getting the big screen was to replace my core i7 920<br>\nwith a (used) Xeon x5680 and overclock it to 4.7 GHz using a new Corsair<br>\nH100i cooler and my existing ASUS Rampage II Gene motherboard and Seasonic<br>\nM12D PSU.</p>\n<p>I used run_tests from seL4 to check stability and benchmark performance and<br>\nfound that overclocking the RAM also made a significant improvement.</p>\n<p>I thought I'd share the details because the big screen and massive<br>\noverclock made a huge improvement to usability of Isabelle/jEdit which now<br>\nfeels fairly snappy.</p>\n<p>Also it's a data point indicating available screen real estate for extra<br>\nwindows for goals and error messages.</p>",
        "id": 294644632,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661163537
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nI wouldn't call this off topic. It is always interesting to hear about <br>\nworking user scenarios.</p>\n<p>The above sounds like a fairly good machine for the high-end gaming that <br>\ninteractive theorem proving is today :-)</p>\n<p>On my modest 24\" Dell 4K monitor (P2415Q) I actually encountered GUI <br>\nscaling problems.  Some of my findings are explained in the Isabelle/jEdit <br>\nmanual section 2.1.2 \"Displays with very high resolution\", but that is <br>\nonly a start on that topic.  If there is further experience with <br>\nhigh-resolution GUIs, it is worth a different thread on the mailing list.</p>\n<p>The next jEdit release will cope with that better, but it is not yet <br>\navailable.</p>\n<p>Makarius</p>",
        "id": 294644646,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661163543
    },
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\nOn 23/06/2015 18:52, Makarius wrote:</p>\n<blockquote>\n<p>On Tue, 23 Jun 2015, Tobias Nipkow wrote:</p>\n<blockquote>\n<p>I recommend to reread Gerwin's comment on red squiggles in the earlier thread:</p>\n<p>Iâ€™m not as worried about the scrolling as Peter (you could set goals_limit for<br>\ninstance, although Iâ€™d prefer not to have to), but I do have to point out that<br>\nthe squiggles canâ€™t be the main interaction mechanism for errors. They are<br>\npopups: you have to pick up the mouse, navigate there, and wait to see them.<br>\nIf the statement is big, the message sometimes obscures what you typed. That's<br>\ntoo disruptive as main mechanism.</p>\n<p>Itâ€™s good to have the squiggles for errors (esp for position indication), and<br>\nthey work very well for warnings, but when youâ€™re writing your proof, your<br>\nbrain doesnâ€™t work as asynchronously as the document model. You will still<br>\nhave your mental focus at one point and you will still want to see the result<br>\nof your last action as quickly as possible and react if it is an error. When<br>\nyouâ€™re writing the proof, your mental focus is on the output window, so thatâ€™s<br>\nwhere errors reports will cause the least mental overhead.</p>\n</blockquote>\n<p>I read that, and it is one of the few things that are not rubbish on the other<br>\nthread.</p>\n</blockquote>\n<p>Speak for yourself, but don't insult other contributors to this list. We don't <br>\ncall red squiggols rubbish either.</p>\n<p>Tobias</p>\n<blockquote>\n<p>Gerwin merely described observations, without pretending to know how things work<br>\nor how they should be done.</p>\n<p>Makarius<br>\n<a href=\"/user_uploads/14278/n0lwvLmccSqyFQzJOWPCatxV/smime.p7s\">smime.p7s</a></p>\n</blockquote>",
        "id": 294644870,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661163636
    }
]