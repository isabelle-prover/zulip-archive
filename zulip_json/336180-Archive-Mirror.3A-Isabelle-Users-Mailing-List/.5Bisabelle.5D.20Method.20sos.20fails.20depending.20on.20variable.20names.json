[
    {
        "content": "<p>From: Dominique Unruh &lt;<a href=\"mailto:unruh@ut.ee\">unruh@ut.ee</a>&gt;<br>\nHi,</p>\n<p>unfortunately, it is nothing so simple as the presence of a ' in the<br>\nvariable name.</p>\n<p>For example, the following fails:</p>\n<p>lemma \"((0 ≤ pAx11 ∧ 0 ≤ pB11) ∧ 0 ≤ pAx10 ∧ 0 ≤ pB10) ∧ (0 ≤ pAx01 ∧ 0 ≤<br>\npB01) ∧ 0 ≤ pAx00 ∧ 0 ≤ pB00 ⟹<br>\n    (pAx10 + pAx11 = 1 ∧ pB10 + pB11 ≤ 1) ∧ pAx00 + pAx01 = 1 ∧ pB00 + pB01<br>\n≤ 1 ⟹<br>\n    pAx01 * pB01 * 4 + pAx00 * pB00 * 4 + (pAx01 * pB11 * 4 + pAx00 * pB10</p>\n<ul>\n<li>\n<p>4) +<br>\n    (pAx11 * pB01 * 4 + pAx10 * pB00 * 4 + (pAx11 * pB10 * 4 + pAx10 * pB11</p>\n</li>\n<li>\n<p>4))<br>\n    ≤ (12::real) \"<br>\n  apply sos</p>\n</li>\n</ul>\n<p>(It's the same example but with ' replaced by x.)</p>\n<p>And the following works:</p>\n<p>lemma \" (0 ≤ pA'01 ∧ 0 ≤ pB01) ⟹<br>\n    pA'01 * pB01 * 4<br>\n    ≥ (0::real) \"<br>\n  apply sos</p>\n<p>even though it contains a '</p>\n<p>Best wishes,<br>\nDominique.</p>",
        "id": 294724783,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661186043
    },
    {
        "content": "<p>From: Lawrence Paulson &lt;<a href=\"mailto:lp15@cam.ac.uk\">lp15@cam.ac.uk</a>&gt;<br>\nWell, let’s dig a little further. The exception you get indicates a mismatch between A ==&gt; B and A in the rule implies_elim: the two copies of A are not identical. And indeed we have</p>\n<p>(¬ (((0 ≤ pA'11 ∧ 0 ≤ pB11) ∧ 0 ≤ pA'10 ∧ 0 ≤ pB10) ∧ (0 ≤ pA'01 ∧ 0 ≤ pB01) ∧ 0 ≤ pA'00 ∧ 0 ≤ pB00 ⟶<br>\n       (pA'10 + pA'11 = 1 ∧ pB10 + pB11 ≤ 1) ∧ pA'00 + pA'01 = 1 ∧ pB00 + pB01 ≤ 1 ⟶<br>\n       pA'01 * pB01 * 4 + pA'00 * pB00 * 4 + (pA'01 * pB11 * 4 + pA'00 * pB10 * 4) +<br>\n       (pA'11 * pB01 * 4 + pA'10 * pB00 * 4 + (pA'11 * pB10 * 4 + pA'10 * pB11 * 4))<br>\n       ≤ 12) ⟹<br>\n   False) </p>\n<p>on the one hand and</p>\n<p>¬ (((0 ≤ pA'11 ∧ 0 ≤ pB11) ∧ 0 ≤ pA'10 ∧ 0 ≤ pB10) ∧ (0 ≤ pA'01 ∧ 0 ≤ pB01) ∧ 0 ≤ pA'00 ∧ 0 ≤ pB00 ⟶<br>\n      (pA'10 + pA'11 = 1 ∧ pB10 + pB11 ≤ 1) ∧ pA'00 + pA'01 = 1 ∧ pB00 + pB01 ≤ 1 ⟶<br>\n      pA'01 * pB01 * 4 + pA'00 * pB00 * 4 + (pA'01 * pB11 * 4 + pA'00 * pB10 * 4) +<br>\n      (pA'11 * pB01 * 4 + pA'10 * pB00 * 4 + (pA'11 * pB10 * 4 + pA'10 * pB11 * 4))<br>\n      ≤ 12) ⟹<br>\n  0 &lt; 4 * (pA'01 * pB00) +<br>\n      (- 4 * (pA'01 * pB01) +<br>\n       (4 * (pA'01 * pB10) +<br>\n        (- 4 * (pA'01 * pB11) +<br>\n         (4 * (pA'11 * pB00) +<br>\n          (- 4 * (pA'11 * pB01) +<br>\n           (- 4 * (pA'11 * pB10) +<br>\n            (4 * (pA'11 * pB11) +<br>\n             (- 4 * (pB00 * pA'01) +<br>\n              (- 4 * (pB00 * pA'11) +<br>\n               (4 * (pB01 * pA'01) +<br>\n                (4 * (pB01 * pA'11) +<br>\n                 (- 4 * (pB10 * pA'01) + (4 * (pB10 * pA'11) + (4 * (pB11 * pA'01) + - 4 * (pB11 * pA'11)))))))))))))))</p>\n<p>on the other. It also seems that the expression 4 * (pA'01 * pB00) + (- 4 * (pA'01 * pB01) + …) simplifies to 0 if we invoke the single method (simp add: mult.commute). And therefore </p>\n<p>0 &lt; 4 * (pA'01 * pB00) + (- 4 * (pA'01 * pB01) + …)</p>\n<p>simplifies to False, as required.</p>\n<p>Is there anybody out there who understands this code?</p>\n<p>Larry Paulson</p>",
        "id": 294724796,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661186045
    },
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\nYes, thanks for reporting it. The implementor is still around but is doing very <br>\ndifferent things for his PhD now. I doubt I can get him to look into it....</p>\n<p>Tobias<br>\n<a href=\"/user_uploads/14278/qqRKZ3EyZr91aLU0S8ImWUAT/smime.p7s\">smime.p7s</a></p>",
        "id": 294724829,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661186052
    },
    {
        "content": "<p>From: Dominique Unruh &lt;<a href=\"mailto:unruh@ut.ee\">unruh@ut.ee</a>&gt;<br>\nHi,</p>\n<p>[this is tl;dr for most, I guess. But Tobias Nipkow, please have a look at<br>\nthe last two lines before the signature]</p>\n<p>I tried some more to figure out what goes wrong, but I am giving up now.<br>\nHowever, I figured out some things that might be useful for whoever tries<br>\nnext:</p>\n<p>A much smaller example of the bug is:</p>\n<p>lemma<br>\n  shows \"0 ≤ c ∧ 0 ≤ a  ⟹ a + bb = 1 ∧ c ≤ 1 ⟹ bb * c * 4 ≤ (12::real) \"<br>\n  apply sos</p>\n<p>If we replace bb -&gt; b, or c -&gt; cc, the error vanishes. So it seems crucial<br>\nthat bb is longer than c. Perhaps it has to do something with some term<br>\nordering applied somewhere.</p>\n<p>The bug can be traced down to the following internal call:</p>\n<p>ML {*<br>\nval ctxt = @{context}<br>\n val t = @{cterm \"0 ≤ c ∧ 0 ≤ a ⟶ a + bb = 1 ∧ c ≤ 1 ⟶ bb * c * 4 ≤<br>\n(12::real)\"};;<br>\n val t' = @{cterm \"0 ≤ c ∧ 0 ≤ a ⟶ a + b = 1 ∧ c ≤ 1 ⟶ b * c * 4 ≤<br>\n(12::real)\"};; (* A good term where the error does not occur *)<br>\n val prover = (Sum_of_Squares.Prover (SOS_Wrapper.run_solver ctxt));;<br>\n*}<br>\nML {*<br>\n Sum_of_Squares.real_sos prover ctxt t<br>\n*}</p>\n<p>(real_sos is not exported by Sum_of_Squares, nor is run_solver by<br>\nSOS_Wrapper, you need to add them to the exported vals for this example to<br>\nwork.)</p>\n<p>This, in turn, calls the following where the error occurs:</p>\n<p>ML {*<br>\n  RealArith.gen_prover_real_arith ctxt<br>\n(Sum_of_Squares.real_nonlinear_subst_prover prover ctxt) t<br>\n*}</p>\n<p>And in this one, we can track down the bug some more:<br>\nThe value th2, defined by \"val (th2, certs) = overall [] [] [specl avs<br>\n(Thm.assume (Thm.rhs_of th1))]\" is \"False\" when using the \"good\" t'.<br>\nBut it is \"0 &lt; - 1 * (bb * c) + c * bb\" otherwise.<br>\nIn turn, overall performs a call to \"prover (rev cert_choice)<br>\nhol_of_positivstellensatz (eq,le,lt)\" which is the call that returns the<br>\nthm used in th2.<br>\n(Note: prover is the value prover defined in the ML snippet above)<br>\nAnd the (single) call to hol_of_positivstellensatz performed by prover<br>\nreturns the value that is later used for th2.</p>\n<p>So the bug could be either in hol_of_positivstellensatz (part of<br>\npositivestellensatz.ML by Amine Chaieb), or of sos (by Philipp Meyer and<br>\nAmine Chaieb).<br>\nTo decide that, one would need better understand of the code (or just more<br>\ntime for debugging).<br>\nTobias: which of the two is the one whom you doubt you could raise?</p>\n<p>Best wishes,<br>\nDominique.</p>",
        "id": 294724853,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661186057
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nThanks for this concise example. I've spent 2h with it in our fancy<br>\nIsabelle/ML debugger IDE, but actually found the problem by looking<br>\ncarefully at the sources in the old-fashioned manner:<br>\nHOL/Library/positivstellensatz.ML and HOL/Library/positivstellensatz.ML<br>\nuse different term orderings for normalization.</p>\n<p>This is amended in the included changeset for Isabelle2017. In the<br>\nIsabelle repository it is now c46910a6bfce.</p>\n<p>Makarius<br>\n<a href=\"/user_uploads/14278/KSYH_G753mZK-i1-UNihZZwK/ch-sos_term_ord\">ch-sos_term_ord</a></p>",
        "id": 294725196,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661186178
    },
    {
        "content": "<p>From: Dominique Unruh &lt;<a href=\"mailto:unruh@ut.ee\">unruh@ut.ee</a>&gt;<br>\nHi,</p>\n<p>oups, it seems that the discussion with Tobias and Larry went off the<br>\nmailing list. I did exactly the same as you (including learning how to use<br>\nthe debugger :) ), a pity about the duplicated effort... Sorry for that.</p>\n<p>For what it's worth, here is the analysis I wrote to Tobias and Larry some<br>\nweeks ago:</p>",
        "id": 294725229,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661186192
    },
    {
        "content": "<p>From: Dominique Unruh &lt;<a href=\"mailto:unruh@ut.ee\">unruh@ut.ee</a>&gt;<br>\nHello,</p>\n<p>please let me know if there is a better place to report bugs.</p>\n<p>I noticed the following problem with the method \"sos\": There a goal one<br>\nwhich sos works fine gives an error when using other variable names (but<br>\neverything else being the same).</p>\n<p>An example theory is attached.<br>\nThe second proof raises a THM exception on my computer (Linux,<br>\nIsabelle-2017).</p>\n<p>Another (minor) issue is: In sos_wrapper.ML, the function get_result does<br>\nnot define a message for return code 10 which is \"Program stopped by signal<br>\n(SIXCPU, SIGTERM, etc.)\" according to<br>\n<a href=\"https://projects.coin-or.org/Csdp/raw-attachment/wiki/WikiStart/csdpuser.pdf\">https://projects.coin-or.org/Csdp/raw-attachment/wiki/WikiStart/csdpuser.pdf</a>.<br>\n(Although this error message is slightly confusing, too, when it happens<br>\nwith a long-running sos-call.)</p>\n<p>Best wishes,<br>\nDominique.<br>\n<a href=\"/user_uploads/14278/hBwXRxYL914Ygv-bmmMs-10Q/Bug.thy\">Bug.thy</a></p>",
        "id": 294725308,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661186223
    },
    {
        "content": "<p>From: Lawrence Paulson &lt;<a href=\"mailto:lp15@cam.ac.uk\">lp15@cam.ac.uk</a>&gt;<br>\nDear Dominique, thanks for your message. So the problem is that variables with names like pA’11 break the sos method?</p>\n<p>The implementers of this proof method are long gone, but it’s a good bet that the faulty code is here:</p>\n<p>(* map polynomials to strings *)<br>\nfun string_of_varpow x k =<br>\n  let<br>\n    val term = Thm.term_of x<br>\n    val name =<br>\n      (case term of<br>\n        Free (n, _) =&gt; n<br>\n      | _ =&gt; error \"Term in monomial not free variable\")<br>\n  in<br>\n    if k = 1 then name else name ^ \"^\" ^ string_of_int k<br>\n  end</p>\n<p>(In HOL/Library/Sum_of_Squares/positivstellensatz_tools.ML.)</p>\n<p>No doubt we have a function to deal with identifiers that contain strange characters. Does anybody have a suggestion?</p>\n<p>Larry Paulson</p>",
        "id": 294725331,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661186229
    },
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\nThis is my fault. I had promised to make the change that Dominique proposed but <br>\nhad planned to do it after the end of term. Sorry about that.</p>\n<p>Tobias<br>\n<a href=\"/user_uploads/14278/B3YA0op8IYWeLkiz7MpUryRA/smime.p7s\">smime.p7s</a></p>",
        "id": 294726455,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661186573
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nThe Isabelle/ML library provides various ways to order terms, and some<br>\nother more basic data types like string and indexname.</p>\n<p>Working with the Simplifier (or related conversions) usually requires an<br>\nordering that conforms to its policies, notably Term_Ord.term_ord /<br>\ntermless (sometimes Term_Ord.term_lpo).</p>\n<p>Working with auxiliary set/map data structures that need to be fast is<br>\nusually done with fast_string_ord, fast_indexname_ord, fast_term_ord<br>\netc. There is no semantic intention behind these orderings, and they can<br>\nactually look strange when used for printing a table: the output needs<br>\nto be sorted by a more natural order.</p>\n<p>With this in mind an educated guess says: FuncUtil tables are right in<br>\nusing fast_term_ord derivatives and sum_of_squares.ML was wrong using<br>\nfast_term_ord with Semiring_Normalizer. This is further supported by the<br>\nempiric exploration of Isabelle + AFP: the change c46910a6bfce was<br>\nsufficient to make the counter examples work and did not break existing<br>\napplications.</p>\n<p>There is additional confusion in this code base due to preference of<br>\ncterm over term: it might be a consequence of porting tools from<br>\nHOL-Light, which only has cterm (and calls it term). There are also a<br>\nbit too many clones of operations, with non-canonical name and signature<br>\n(like simple_cterm_ord, which corresponds to Term_Ord.termless).</p>\n<p>Makarius</p>",
        "id": 294726649,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661186640
    }
]