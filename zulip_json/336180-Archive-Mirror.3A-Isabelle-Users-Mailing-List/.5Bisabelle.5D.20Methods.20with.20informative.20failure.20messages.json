[
    {
        "content": "<p>From: Dominique Unruh &lt;<a href=\"mailto:unruh@ut.ee\">unruh@ut.ee</a>&gt;<br>\nHi,</p>\n<p>I would like to implement a method that gives an informative error message<br>\nwhen application fails (e.g., imagine an algebra tactic returning \"subgoal<br>\nshould not contain &lt;=\" or something like that).</p>\n<p>I see possibilities how a method can indicate a failure:</p>\n<p>- Raise an exception<br>\n   - Return a (Seq.Error (K \"error message\")) result.<br>\n   - Return Seq.empty (this is what is done by most methods)</p>\n<p>According to my experiments, the first two options are not suitable because<br>\nthey break method combinators like \"method+\" and \"method?\" (I would need<br>\nthat these will suppress the error.) And the third option does not support<br>\ngiving an error message.</p>\n<p>Is there any best practice how to return informative messages on method<br>\nfailure?<br>\nI feel that this would be very helpful for the user of the method because<br>\noften one has to do a lot of try and error to find out why a method didn't<br>\nwork on a given subgoal.</p>\n<p>Best wishes,<br>\nDominique.</p>",
        "id": 294733488,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661188928
    },
    {
        "content": "<p>From: Peter Lammich &lt;<a href=\"mailto:lammich@in.tum.de\">lammich@in.tum.de</a>&gt;<br>\nHi,</p>\n<p>you could return Seq.empty and print a warning or tracing message.<br>\nHowever, note that in combination with tacticals (like ?,*), your<br>\nmethod might fail multiple times on different goals and produce a whole<br>\nbunch of warning messages ... many of them might be useless, but I<br>\ndon't think there is a general rule to filter the actual informative<br>\nones ...</p>",
        "id": 294733504,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661188935
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nOn 25/05/18 19:38, Peter Lammich wrote:</p>\n<blockquote>\n<p>you could return Seq.empty and print a warning or tracing message.</p>\n</blockquote>\n<p>A proper tactic or proof method can't do that, for a variety of reasons.<br>\nSome of the semantic side-conditions for these very special (lazy)<br>\noperations are explained in \"implementation\" section 4.2 and 7.2.</p>\n<p>Note that even non-lazy ML tools need to be careful about warnings and<br>\ntracings: it always needs to be guarded by some flags in the context, to<br>\nprevent spamming the user or bombing the system.</p>\n<blockquote>\n<p>On Fr, 2018-05-25 at 11:32 -0400, Dominique Unruh wrote:</p>\n<blockquote>\n<p>I would like to implement a method that gives an informative error<br>\nmessage<br>\nwhen application fails (e.g., imagine an algebra tactic returning<br>\n\"subgoal<br>\nshould not contain &lt;=\" or something like that).</p>\n<p>I see possibilities how a method can indicate a failure:</p>\n<p>- Raise an exception<br>\n   - Return a (Seq.Error (K \"error message\")) result.<br>\n   - Return Seq.empty (this is what is done by most methods)<br>\n</p>\n</blockquote>\n</blockquote>\n<p>An exception means a hard breakdown of something, and is indeed not part<br>\nof the normal tactic/method failure protocol.</p>\n<p>Seq.empty is traditionally the only way, but without any further<br>\ninformation.</p>\n<p>Seq.Error and type context_tactic is relatively new -- it is a spin-off<br>\nfrom Eisbach. In principle it allows user-space proof methods to produce<br>\ninformation about failure, but there are presently no applications. This<br>\nmechanism is presently only used by the system in certain spots where<br>\nproof methods are incorporated into Isar proof commands (e.g. the<br>\noutermost steps of 'by').</p>\n<blockquote>\n<blockquote>\n<p>Is there any best practice how to return informative messages on<br>\nmethod<br>\nfailure?<br>\nI feel that this would be very helpful for the user of the method<br>\nbecause<br>\noften one has to do a lot of try and error to find out why a method<br>\ndidn't<br>\nwork on a given subgoal.</p>\n</blockquote>\n</blockquote>\n<p>At some point I wanted to explore that for complex proof methods like<br>\n\"induct\" / \"induction\", which have many obscure failure points. I have<br>\nno idea how well it will work out.</p>\n<p>Maybe someone else has tried something similar already.</p>\n<p>Makarius</p>",
        "id": 294733531,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661188947
    },
    {
        "content": "<p>From: Dominique Unruh &lt;<a href=\"mailto:unruh@ut.ee\">unruh@ut.ee</a>&gt;<br>\nThanks for the information so far.</p>\n<p>To clarify: I am not hoping for a mechanism that gives useful information<br>\nwhen tacticals like + are used. I understand that that would be much to ask<br>\nfor (e.g., if we have \"a | b\", and both fail, who's message should we<br>\noutput).</p>\n<p>What I would like (and what I feel would be a very useful mechanism<br>\ngenerally, imagine the rule method actually telling us where in a large<br>\nterm matching failed!) is the following:</p>\n<p>- Inside a tactical (like method+) that would succeed without adding<br>\n   error message (i.e., using <a href=\"http://Seq.fail\">Seq.fail</a>) no error message is output. (That's<br>\n   also why I don't want to use tracing, this would lead to spam in the output<br>\n   window when using tacticals.)</p>\n<p>- Inside a tactical that would fail, I don't care what is output (e.g.,<br>\n   the error message could be supressed).</p>\n<p>- If the method is used alone (i.e., apply method), then the user should<br>\n   see the error message.</p>\n<p>I have a partial solution for this problem: I create a configuration flag<br>\n\"method_error\". If the user wants to get an explanation why a method fails,<br>\nthen they use \"using[[method_error=true]]\", and then the method will fail<br>\nwith an error. However, when using tacticals, it is important to switch<br>\nmethod_error off again. So it is a bit inconvenient.</p>\n<p>The code used for this is simple:</p>\n<p>val method_error = Attrib.setup_config_bool @{binding method_error} (K<br>\nfalse)<br>\nfun error_ctac msg (ctx,_) = if Config.get ctx method_error<br>\n  then Seq.single (Seq.Error msg) else Seq.empty<br>\nfun error_tac msg ctx = if Config.get ctx method_error<br>\n  then K (raise ERROR(msg ())) else K Seq.empty<br>\nfun error_method msg = CONTEXT_METHOD (K (error_ctac msg))</p>\n<p>Now a method or tactic can just use error_tac (or error_method) when it<br>\nusually would use no_tac.</p>\n<p>But the problem is that the user only gets the error messages when<br>\nexplicitly requesting them.</p>\n<p>An alternative solution (that would need changes to Isabelle internals)<br>\nwould be to use the Seq.Error solution without a flag, and to change the<br>\nbehavior of tacticals that they filter errors suitably (I assume the logic<br>\nwould be analogous to what how parser monads handle errors.) Makarius will<br>\nprobably know best if that's a good idea or not.</p>\n<p>Best wishes,<br>\nDominique.</p>",
        "id": 294733546,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661188954
    }
]