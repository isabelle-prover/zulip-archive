[
    {
        "content": "<p>From: Gottfried Barrow &lt;<a href=\"mailto:gottfried.barrow@gmx.com\">gottfried.barrow@gmx.com</a>&gt;<br>\nHi,</p>\n<p>I've spent a lot of time studying how Sledgehammer works with the 25 or <br>\nso ATPs that can be enabled.</p>\n<p>About the time I decide I'm spending too much time experimenting with <br>\nit, I get some new understanding of its feedback in the output panel, <br>\nand learn how to use another of its many amazing features.</p>\n<p>So I used the \"dont_preplay\" option, because Sledgehammer was taking <br>\ntime to replay the proofs that the ATPs had found, to test them for its <br>\nown purposes, which takes time, and the proofs it has found were all <br>\nworking, so I decided it didn't need to test them.</p>\n<p>But there was this one metis proof that was staying purple an annoyingly <br>\nlong time as Isabelle clicked through the proofs of my theory, staying <br>\npurple for 2 or 3 seconds. That's a long time when every other proof is <br>\nonly taking a half a second or less.</p>\n<p>The short story is that, not understanding the timing information <br>\nSledgehammer was giving me due to preplay, I had picked the 3 second <br>\nproof instead of one of the half second proofs it had offered.</p>\n<p>Eventually, I discovered the use of the timing information due to <br>\npreplay. Does Sledgehammer return 10 different metis proofs? Now, I <br>\ndon't just pick the one using the shortest named facts, I look at how <br>\nlong Sledgehammer took to preplay the proof.</p>\n<p>Okay, I've learned to look at more than that. Are there ten proofs <br>\noffered? I look at the theorems metis uses and I ask the question, \"If I <br>\nwas going to do a detailed proof using the theorems metis uses, which <br>\ndifferent set of facts used would be the most logically appealing, and <br>\nrequire fewer steps?</p>\n<p>But due to parallel processing and the timeout setting, there are lots <br>\nof differences in the proofs Sledgehammer will find.</p>\n<p>Sledgehammer was returning 10 or so metis proofs that were using <br>\nnumerous facts, and it was offering to minimize them, which is when <br>\nSledgehammer feeds back a proof to the ATP using fewer and fewer facts.</p>\n<p>I said, \"Hey, manually going through 7 minimize attempts is not what I <br>\ncall automation, so I'll set 'minimize=true'\". But there's always a <br>\ntrade off.</p>\n<p>After going back and running Sledgehammer on theorems with the preplay <br>\noption on, for one theorem, it was only finding one proof, rather than <br>\nthe usual many proofs, and it was remote_z3_tptp that was finding the proof.</p>\n<p>This brings up the issue of nuance, one being that, given a certain <br>\ntimeout setting, sometimes a remote duplicate of a local prover will <br>\nreturn a proof that the local prover doesn't.</p>\n<p>I had also started asking the question, \"Do I really need z3_tptp in <br>\nthere?\" Well, obviously, yes.</p>\n<p>Since I wasn't getting lots of proofs, I disabled \"minimize\" and used <br>\n\"dont_preplay\". I then got proofs for z3_tptp, remote_z3_tptp, z3, and <br>\nremote_z3. The time spent for the 4 provers was like this:</p>\n<p>remote_z3_tptp: ATP real CPU time: 2.15 s.<br>\n    z3_tptp:               ATP real CPU time: 29.79 s.<br>\n    z3                         SMT solver real CPU time: 2.22 s<br>\n    remote_z3          SMT solver real CPU time: 5.75 s.</p>\n<p>More nuances. Sometimes the remote prover is faster than the local <br>\nprover, and sometimes not. Last week, I didn't use remote provers that <br>\nare duplicates of local provers, but now I generally do.</p>\n<p>There's more for me to tell about how to use Sledgehammer's information <br>\nthan most people have time to read.</p>\n<p>For example, z3_tptp gave me a proof like this:</p>\n<p>by (metis extension_equality unordered_pair_axiom ordered_pair_def) <br>\n(406 ms)</p>\n<p>My extension_equality theorem is merely a biconditional of  my <br>\nextension_axiom. I was asking these questions, \"Do I really need <br>\nextension_equality? Will the proof work using extension_axiom instead, <br>\nand will it be slower if it does?\"</p>\n<p>Well, the Sledgehammer output shows you how to use the \"min\" option, so <br>\nI tried this, not to minimize the number of facts, but to get the timing <br>\ninformation with the axiom substituted for the theorem:</p>\n<p>sledgehammer min [z3_tptp, timeout = 90, verbose] (extension_axiom <br>\nunordered_pair_axiom ordered_pair_def),</p>\n<p>and I got this:</p>\n<p>Try this: by  (metis extension_axiom unordered_pair_axiom <br>\nordered_pair_def) (408 ms).</p>\n<p>So metis only uses 2 more milliseconds when it uses the axiom directly.</p>\n<p>I finish out most of this this email with my maxed out sledgehammer <br>\ncommand, and the reasoning behind it.</p>\n<p>With Sledgehammer, you need a good process viewer to see what it's <br>\ndoing, and a good CPU meter in your task bar to see if your CPUs are <br>\nrunning heavily when they shouldn't be. If you don't do things right, <br>\nprocesses that are taking up 25% of your CPU won't get terminated. Doing <br>\nthings right is letting Sledgehammer finish normally, or deleting it <br>\nbefore you close jEdit. Sometimes processes just don't get terminated <br>\nwhen you don't let Sledgehammer finish.</p>\n<p>Win CPU meter: <a href=\"http://www.hexagora.com/en_dw_davperf.asp\">http://www.hexagora.com/en_dw_davperf.asp</a><br>\n    Win Process Explorer: <br>\n<a href=\"http://technet.microsoft.com/en-us/sysinternals/bb896653.aspx\">http://technet.microsoft.com/en-us/sysinternals/bb896653.aspx</a></p>\n<p>My long version is this, and I explain what's not arbitrary about it:</p>\n<p>sledgehammer[DEL,dont_preplay,minimize,timeout=90,verbose,max_relevant=smart,provers=\"<br>\n     metis remote_vampire e remote_z3 spass_new remote_e_sine z3_tptp<br>\n     remote_e_tofof remote_e remote_z3_tptp remote_cvc3 remote_iprover<br>\n     remote_iprover_eq remote_waldmeister satallax z3 cvc3 yices\"]</p>\n<p>1) I use a macro to insert it, and I put the DEL in to cause an error so <br>\nit won't run. The \"DEL,dont_preplay,\" is highlighted, and I press the <br>\nbackspace key to delete it, after which Sledgehammer starts running.</p>\n<p>2) I want \"preplay\" to get the timing information, but I could decide to <br>\nnot to do \"preplay\" so that Sledgehammer is devoting more time to only <br>\nfinding proofs, in case it has been timing out and not getting many proofs.</p>\n<p>3) I normally want to automate \"minimize\", but if it's timing out and <br>\nnot getting many proofs, I'll delete it before I run Sledgehammer.</p>\n<p>4) I could set \"max_relevant=1000\" so that Sledgehammer is feeding the <br>\nATPs massive facts, but I've learned that if the ATPs have to work too <br>\nhard, then I'm trying to prove a false statement, or I need to add some <br>\npreliminary lemmas. Quite possibly, a proof that takes an ATP a long <br>\ntime to find will cause the Isabelle prover to work way too hard and <br>\nlong once it's given the proof.</p>\n<p>5) Only a maximum of 4 provers will run in parallel, and they run in the <br>\norder given, so I put the 7 better provers first, and I have a <br>\nreasonable timeout set so that the first 4 provers don't hold everything <br>\nelse up too long. Many times the first four will finish fast anyway, and <br>\nagain, if a particular prover isn't proving anything reasonably fast, <br>\nthen it won't or it won't find a decently fast proof.</p>\n<p>6) metis is first, because though it can get overloaded and kick out <br>\nfast, it can also return proofs very fast; metis is run directly by <br>\npoly.exe.</p>\n<p>7) The vampire binary is hard to get, the Windows version doesn't run <br>\nright, and the remote_vampire is twice as fast as my Linux vampire, but <br>\nvampire one of the best of the best, so I put it second.</p>\n<p>8) \"e\" is an execllent prover, so I put the local e in the first group. <br>\nI also put remote_e in with the remote group of provers. Processing <br>\nnuances could result in remote_e returning a proof that the local e <br>\ndoesn't. Local provers can fail to return proofs that remote provers <br>\nreturn because parallel processing is never the same, especially when <br>\nthe options and provers listed are different. But I try these 20 or so <br>\nprovers on the first try to try and save time; different provers find <br>\nproofs for different theorems, and always because they weren't given <br>\nenough time. If I don't get such good results on this massive try, then <br>\nI can start tweaking options.</p>\n<p>9) remote_z3 is before z3 because z3, when used directly, won't run in <br>\nparallel. It will only run after all other provers listed before it have <br>\nfinished. However, it's an execellent prover, which is why I want <br>\nremote_z3 to start running in the first 4. Additionally, I leave out the <br>\n\"smt\" prover; smt calls z3, and z3 used directly finds better proofs, <br>\nand finds them just as fast.</p>\n<p>10) \"z3_tptp\" uses the z3-prover.exe just like z3, but it's not used the <br>\nsame, so it finds proofs when the others don't, as shown by my example <br>\nabove.</p>\n<p>11) I then let Sledgehammer go through all the other remote provers, <br>\nother than remote_leo2 and remote_satallax. These are HOL provers, and <br>\nI'm almost exclusively doing FOL. I wonder about leaving remote_iprover <br>\nand remote_iprover_eq in. They don't prove a lot, but I leave them in.</p>\n<p>12) I then do the local satallax. Maybe it's faster or slower at <br>\nfinishing than the remote_satallax, but remote provers can sometimes <br>\nhold things up; a 60 second timeout might get processed remotely over a <br>\nperiod of much more than 60 seconds.</p>\n<p>13) z3, cvc3, and yices won't run in parallel with other provers, so I <br>\nput them last, not that it would matter. If I put them first, they still <br>\nwon't start until the other provers are finished. I put z3 first, <br>\nbecause they will run in the order listed.</p>\n<p>Thanks to Larry Paulson and Jasmin Blanchette for writing an amazing <br>\npiece of software. Jasmin has helped me out a lot, and I give you some <br>\nlinks to articles Jasmin gave me. He says,</p>\n<p>For many of my papers and in my Ph.D. thesis, I've evaluated E, iProver, SPASS, Vampire, CVC3, Yices, Z3, LEO-II, and Satallax. See e.g.</p>\n<p><a href=\"http://www21.in.tum.de/~blanchet/jar-smt.pdf\">http://www21.in.tum.de/~blanchet/jar-smt.pdf</a>  (Section 6)<br>\n<a href=\"http://www21.in.tum.de/~blanchet/testbench.pdf\">http://www21.in.tum.de/~blanchet/testbench.pdf</a>  (Section 5)<br>\n<a href=\"http://www21.in.tum.de/~blanchet/enc_poly_paper.pdf\">http://www21.in.tum.de/~blanchet/enc_poly_paper.pdf</a>  (Section 6)<br>\n<a href=\"http://www21.in.tum.de/~blanchet/itp2012-spass.pdf\">http://www21.in.tum.de/~blanchet/itp2012-spass.pdf</a>  (Section 7)<br>\n<a href=\"http://www21.in.tum.de/~blanchet/iwil2010-sledgehammer.pdf\">http://www21.in.tum.de/~blanchet/iwil2010-sledgehammer.pdf</a>  (Section 3)</p>\n<p>and of course the original \"Judgement Day\" paper by Böhme&amp;  Nipkow:</p>\n<p><a href=\"http://www21.in.tum.de/~boehmes/judgement/judgement.pdf\">http://www21.in.tum.de/~boehmes/judgement/judgement.pdf</a></p>\n<p>Hence I have a very good idea, based on thousands of data points, of how <br>\n[message truncated]</p>",
        "id": 294222846,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660898432
    }
]