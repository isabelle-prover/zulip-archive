[
    {
        "content": "<p>From: Lars Hupel &lt;<a href=\"mailto:hupel@in.tum.de\">hupel@in.tum.de</a>&gt;<br>\nDear list,</p>\n<p>I'm having trouble defining this function:</p>\n<p>datatype ('T0) List0 =<br>\n    dCons0: cCons0 (sh0: \"'T0\") (st2: \"'T0 List0\") |<br>\n    dNil0: cNil0</p>\n<p>fun length0 where<br>\n  \"length0 xs0 = case_List0<br>\n     (&#955;fresh fresha. Let fresha<br>\n       (let x0 = fresh in (&#955;xs1. Numeral1 + length0 xs1)))<br>\n     0 xs0\"</p>\n<p>The function package complains:</p>\n<p>Unfinished subgoals:<br>\n  (a, 1, &lt;):</p>\n<p>1. &#8896;x12 xb. size xb &lt; Suc (size x12)<br>\n  (a, 1, &lt;=):</p>\n<p>1. &#8896;x12 xb. size xb &#8804; Suc (size x12)</p>\n<p>When I change my definition to 'function (sequential)', it turns out that<br>\nthe recursive call appears to be in no relation with the argument. Now,<br>\nI'm wondering if there's some congruence rule missing? Because, if I<br>\nunfold 'Let_def' manually and define it like this:</p>\n<p>fun length1 where<br>\n  \"length1 xs0 = (case xs0 of cCons0 fresh fresha &#8658; Numeral1 +<br>\nlength1 fresha | cNil0 &#8658; 0)\"</p>\n<p>... it is accepted.</p>\n<p>Note that the above is auto-generated code produced from some (trusted)<br>\ncode and hence -- for soundness reasons -- I want to keep pre-processing<br>\nat a minimum.</p>\n<p>Cheers<br>\nLars</p>",
        "id": 294651245,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661166180
    },
    {
        "content": "<p>From: Christian Sternagel &lt;<a href=\"mailto:c.sternagel@gmail.com\">c.sternagel@gmail.com</a>&gt;<br>\nDear Lars,</p>\n<p>while I do not yet fully understand the reasons, it seems that this <br>\nbehavior is caused by the unused let-binding \"let x0 = fresh in ...\". If <br>\nwe proof a (ad-hoc) congruence rule for such situations, the function <br>\ndefinition is accepted:</p>\n<p>lemma [fundef_cong]:<br>\n     assumes \"a = b\"<br>\n       and \"⋀x. x = b ⟹ f a = g b\"<br>\n     shows \"Let a (Let u (λu. f)) = Let b (Let u (λu. g))\"<br>\n     using assms by auto</p>\n<p>However, I didn't think much about it. So there are most likely much <br>\nbetter solutions.</p>\n<p>cheers</p>\n<p>chris</p>",
        "id": 294651280,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661166193
    },
    {
        "content": "<p>From: Christian Sternagel &lt;<a href=\"mailto:c.sternagel@gmail.com\">c.sternagel@gmail.com</a>&gt;<br>\nA simpler variant:</p>\n<p>lemma [fundef_cong]:<br>\n     assumes \"x = y\" and \"f y = g y\"<br>\n     shows \"Let u (λ_. f) x = Let v (λ_. g) y\"<br>\n     using assms by auto</p>",
        "id": 294651307,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661166199
    },
    {
        "content": "<p>From: Lars Hupel &lt;<a href=\"mailto:hupel@in.tum.de\">hupel@in.tum.de</a>&gt;<br>\nHi Chris,</p>\n<blockquote>\n<p>while I do not yet fully understand the reasons, it seems that this<br>\nbehavior is caused by the unused let-binding \"let x0 = fresh in ...\". </p>\n</blockquote>\n<p>you seem to be on the right track. When I modify my original program to<br>\nnot bind any unused variables, the problem disappears. I still think<br>\nit's rather confusing.</p>\n<p>As for the additional congruence rules, I have no idea what the possible<br>\nimplications could be when adding those. Don't they overwrite the<br>\nexisting rules? (At least, that's what the simp-cong rules do.)</p>\n<p>Cheers<br>\nLars</p>",
        "id": 294651328,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661166207
    }
]