[
    {
        "content": "<p>From: Daniel Raggi &lt;<a href=\"mailto:danielraggi@gmail.com\">danielraggi@gmail.com</a>&gt;<br>\nDear transfer/lifting experts,</p>\n<p>I've been experimenting with transfer and lifting and there is something<br>\nthat I just haven't managed to understand.<br>\nI didn't have this problem before I upgraded from Isabelle2013 to<br>\nIsabelle2013-2 (and I suspect I would have also had it with Isabelle2013-1,<br>\nbut I never used it)</p>\n<p>Things similar to what I'm about to describe happen every time I define a<br>\nnew type using quotient_type or typedef. I'll give a concrete example with<br>\nquotient_type (a type with two elements, as a quotient from integers):</p>\n<p>quotient_type bin = int / \"(λx y. [x = y] (mod 2))\"<br>\n   &lt;proof&gt;</p>\n<p>Then I instantiate bin to the numeral class successfully and prove the<br>\ntransfer rule that lets one transfer every int numeral to the 'same' bin<br>\nnumeral:</p>\n<p>lemma cr_bin_numeral [transfer_rule]: \"cr_bin (numeral x) (numeral x)\".</p>\n<p>As far as I understand, this should be enough to do:</p>\n<p>lemma \"2 = (4::bin)\"<br>\n  apply transfer</p>\n<p>to get subgoal  \"[2 = (4::int)] (mod 2)\".<br>\nHowever, I get:</p>\n<ol>\n<li>?a5  (2::int)  (4::int)</li>\n<li>Transfer.Rel (cr_bin ===&gt; cr_bin ===&gt; op =)  ?a5  op =</li>\n</ol>\n<p>Here, the obvious value for  ?a5  is the relation  \"λx y. [x = y] (mod 2)\",<br>\nand actually this is by default with every quotient type definition, so I<br>\ndon't understand why the transfer rule was not generated automatically in<br>\nthe first place when I defined the new type. I thought it was already<br>\nautomatic in Isabelle2013, and my theories actually broke down once I tried<br>\nrunning them on Isabelle2013-2 because of this issue.</p>\n<p>The issue doesn't stop here, because even if I define the transfer rule<br>\n (cr_bin ===&gt; cr_bin ===&gt; op =)  (λx y. [x = y] (mod 2)) op =<br>\nby hand I still get a problem when I try:</p>\n<p>lemma \"1 = (3::bin)\"<br>\n  apply transfer</p>\n<p>What I get is</p>\n<ol>\n<li>?a5  1  3</li>\n<li>Transfer.Rel (*pcr_bin *===&gt; cr_bin ===&gt; op =)  ?a5  op =</li>\n</ol>\n<p>This is because 1 was actually lifted so that I could instantiate bin in<br>\nthe numeral class, so it's transfer rule is generated differently. I'm not<br>\nfamiliar with the  pcr_  thing. Can anyone explain this?</p>\n<p>So, If I wanted to write the transfer rules for equality manually I would<br>\nhave to make four rules:</p>\n<p>(cr_bin ===&gt; cr_bin ===&gt; op =)  (λx y. [x = y] (mod 2)) op =<br>\n(pcr_bin ===&gt; cr_bin ===&gt; op =)  (λx y. [x = y] (mod 2)) op =<br>\n(cr_bin ===&gt; pcr_bin ===&gt; op =)  (λx y. [x = y] (mod 2)) op =<br>\n(pcr_bin ===&gt; pcr_bin ===&gt; op =)  (λx y. [x = y] (mod 2)) op =</p>\n<p>I keep thinking that there's something essential I'm not understanding, but<br>\nmaybe it's not me. I would greatly benefit from your feedback. I'm<br>\nattaching a test file with this experiment, if anyone wants to have a look.</p>\n<p>Best,<br>\nDaniel<br>\n<a href=\"/user_uploads/14278/IEut7FmUvb4_kYYz8zpQOrxI/quot_experiment.thy\">quot_experiment.thy</a></p>",
        "id": 294260483,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660914188
    },
    {
        "content": "<p>From: Andreas Lochbihler &lt;<a href=\"mailto:andreas.lochbihler@inf.ethz.ch\">andreas.lochbihler@inf.ethz.ch</a>&gt;<br>\nHi Daniel,</p>\n<p>the pcr_... relations generalise the cr_... relations. For types with type variables, they <br>\nallow other relations than equality for the type variables. If there is no type variable <br>\n(as in your example), pcr_... and cr_... are logically equivalent (theorem bin.pcr_cr_eq). <br>\nBut since Isabelle2013-1, the lifting package expects that you use pcr_... in your custom <br>\ntransfer rules rather than cr_... If you replace cr_... with pcr_... in your theory file, <br>\ntransfer should work as you expect.</p>\n<p>Best,<br>\nAndreas</p>",
        "id": 294260513,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660914201
    },
    {
        "content": "<p>From: Ondřej Kunčar &lt;<a href=\"mailto:kuncar@in.tum.de\">kuncar@in.tum.de</a>&gt;<br>\nHi Daniel,<br>\nsorry for the inconvenience.<br>\nThere is an easy fix: Rename cr_bin in your user-provided transfer rules <br>\nto pcr_bin.</p>\n<p>Long answer: The transfer relation that is used in rules that are <br>\ngenerated by the Lifting package is now called pcr_T, which is a <br>\ngeneralization of cr_T and uses cr_T internally. You can prove \"pcr_bin <br>\n= cr_bin\" (thm bin.pcr_cr_eq) for your type bin because bin is not a <br>\npolymorphic type. In general pcr_T op= ... op= = cr_t. So what is pcr_T? <br>\nIt's a relation that allows you to change the polymorphic argument of <br>\nyour type (if there is one). E.g., consider 'a fset defined in <br>\nHOL/Library/FSet. Here cr_fset :: 'a set =&gt; 'a fset =&gt; bool, whereas <br>\npcr_fset :: ('a =&gt; 'b =&gt; bool) =&gt; 'a set =&gt; 'b fset =&gt; bool. And <br>\npcr_fset op= = cr_fset.</p>\n<p>Btw, you don't have to import HOL/Library/Quotient_List since the <br>\ncontent of this file that is relevant for Lifting and Transfer has been <br>\nmoved to Main. The syntax for Lifting (===&gt; and ---&gt;) is now also local <br>\nand can be reintroduced by this trick:</p>\n<p>context<br>\nbegin<br>\n   interpretation lifting_syntax .</p>\n<p>...</p>\n<p>end</p>\n<p>Hope this helps.<br>\nOndrej</p>",
        "id": 294260531,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660914207
    },
    {
        "content": "<p>From: Daniel Raggi &lt;<a href=\"mailto:danielraggi@gmail.com\">danielraggi@gmail.com</a>&gt;<br>\nThank you, Andreas and Ondřej. It works now! I didn't understand why I was<br>\ngetting both cr_T and pcr_T in different places. Now I see that cr appeared<br>\nbecause I had introduced it myself with my user defined transfer rules, and<br>\npcr appeared because that's the way the transfer method works now. By<br>\nchanging cr to pcr things work smoothly. Thanks!</p>\n<p>Daniel</p>",
        "id": 294260561,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660914219
    }
]