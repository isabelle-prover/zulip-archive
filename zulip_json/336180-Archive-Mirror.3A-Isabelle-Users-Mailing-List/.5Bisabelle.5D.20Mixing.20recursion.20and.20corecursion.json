[
    {
        "content": "<p>From: Ramana Kumar &lt;<a href=\"mailto:Ramana.Kumar@cl.cam.ac.uk\">Ramana.Kumar@cl.cam.ac.uk</a>&gt;<br>\nYes, I realised I missed termination when I saw Dmitriy's answer (and also<br>\nI was thinking \"why don't I need to prove a congruence rule?\" when I was<br>\ndoing mine - my thought was \"maybe Isabelle is smarter than I realised\" :))<br>\nI totally support the idea of a reminder in the user interface that<br>\ntermination is still missing. Thanks for tolerating my Isabelle-naivety...</p>",
        "id": 294698148,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661178460
    },
    {
        "content": "<p>From: Andrei Popescu &lt;<a href=\"mailto:A.Popescu@mdx.ac.uk\">A.Popescu@mdx.ac.uk</a>&gt;</p>\n<blockquote>\n<blockquote>\n<p>Thanks for tolerating my Isabelle-naivety...</p>\n</blockquote>\n</blockquote>\n<p>Not at all. I am glad to see a heavy formalizer like yourself looking into Isabelle.  :-)</p>\n<p>Best,</p>\n<p>Andrei</p>",
        "id": 294699107,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661178591
    },
    {
        "content": "<p>From: Manuel Eberl &lt;<a href=\"mailto:eberlm@in.tum.de\">eberlm@in.tum.de</a>&gt;<br>\nHallo,</p>\n<p>I have the following datatype:</p>\n<p>datatype ms = Const real | MS \"(ms × real) llist\"</p>\n<p>I now want to define two mutually a function ms_add that combines two<br>\nvalues of type ms in the following way:</p>\n<p>ms_add :: \"ms ⇒ ms ⇒ ms\" and<br>\nms_add_aux :: \"(ms × real) llist ⇒ (ms × real) llist ⇒ (ms × real) llist\"<br>\nwhere<br>\n  \"ms_add (Const x) (Const y) = Const (x + y)\"<br>\n| \"ms_add (MS xs) (MS ys) = MS (ms_add_aux xs ys)\"</p>\n<p>| \"ms_add_aux LNil ys = ys\"<br>\n| \"ms_add_aux xs LNil = xs\"<br>\n| \"ms_add_aux (LCons x xs) (LCons y ys) =<br>\n     (if snd x &gt; snd y then LCons x (ms_add_aux xs (LCons y ys))<br>\n      else if snd x &lt; snd y then LCons y (ms_add_aux (LCons x xs) ys)<br>\n      else LCons (ms_add (fst x) (fst y), snd x) (ms_add_aux xs ys))\"</p>\n<p>How can I define a function like that? The mutual recursion combined<br>\nwith corecursion seems to make it pretty difficult.</p>\n<p>Cheers,</p>\n<p>Manuel</p>",
        "id": 294699392,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661178677
    },
    {
        "content": "<p>From: Dmitriy Traytel &lt;<a href=\"mailto:traytel@inf.ethz.ch\">traytel@inf.ethz.ch</a>&gt;<br>\nHi Manuel,</p>\n<p>this is nested recursion through a codatatype. To define your function you will need two steps, first the auxiliary function by primitive corecursion on llist (made higher-order to account for the recursive call) and then the actual function ms_add.</p>\n<p>The attached theory file contains the definition. To prove the function terminating, size won’t work (nat is not a good fit for codatatypes). Instead I define the well founded subterm relation inductively and use it as the decreasing measure. Moreover, a congruence rule for the auxiliary function is needed—pardon my ugly (auto; sledgehammer) proof for this.</p>\n<p>Cheers,<br>\nDmitriy<br>\n<a href=\"/user_uploads/14278/SicA2xKybTDiqZivSrbYznRf/Scratch.thy\">Scratch.thy</a></p>",
        "id": 294700038,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661178879
    },
    {
        "content": "<p>From: Ramana Kumar &lt;<a href=\"mailto:Ramana.Kumar@cl.cam.ac.uk\">Ramana.Kumar@cl.cam.ac.uk</a>&gt;<br>\nHow about defining them not in mutual recursion? This seems to work. (If<br>\nsomeone sees aspects of terrible Isabelle style, by the way, let me know<br>\nhow to do it properly :))</p>\n<p>codatatype 'a llist = LNil | LCons 'a \"'a llist\"<br>\ndatatype ms = Const real | MS \"(ms × real) llist\"</p>\n<p>function ms_add_aux where<br>\n  \"ms_add_aux ms_add LNil ys = ys\"<br>\n| \"ms_add_aux ms_add xs LNil = xs\"<br>\n| \"ms_add_aux ms_add (LCons x xs) (LCons y ys) =<br>\n     (if snd x &gt; snd y then LCons x (ms_add_aux ms_add xs (LCons y ys))<br>\n      else if snd x &lt; snd y then LCons y (ms_add_aux ms_add (LCons x xs) ys)<br>\n      else LCons (ms_add (fst x) (fst y), snd x) (ms_add_aux ms_add xs ys))\"<br>\napply pat_completeness<br>\napply auto<br>\ndone</p>\n<p>function<br>\nms_add :: \"ms ⇒ ms ⇒ ms\"<br>\nwhere<br>\n  \"ms_add (Const x) (Const y) = Const (x + y)\"<br>\n| \"ms_add (MS xs) (MS ys) = MS (ms_add_aux ms_add xs ys)\"<br>\n| \"ms_add (Const x) (MS ys) = Const x\"<br>\n| \"ms_add (MS xs) (Const y) = Const y\"<br>\napply auto<br>\napply (case_tac a; auto)<br>\napply (case_tac b; auto)<br>\napply (case_tac b; auto)<br>\ndone</p>",
        "id": 294700719,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661179086
    },
    {
        "content": "<p>From: Andrei Popescu &lt;<a href=\"mailto:A.Popescu@mdx.ac.uk\">A.Popescu@mdx.ac.uk</a>&gt;<br>\nHi Ramana,</p>\n<p>All good, but you also need to prove termination for ms_add, which requires some ingenuity -- see Dmitriy's answer.</p>\n<p>Otherwise you get only partial-function behavior: the rules for ms_add would be conditioned by membership to its domain</p>\n<p>(as shown by \"find_theorems ms_add\").</p>\n<p>Btw, I think it would be a good idea if the function package reminded the user that termination has not been proved.</p>\n<p>(CCed is Alex Krauss, the function package author -- whom I greet with this occasion.  :-)  )</p>\n<p>Best,</p>\n<p>Andrei</p>",
        "id": 294700919,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661179149
    }
]