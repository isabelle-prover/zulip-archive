[
    {
        "content": "<p>From: \"Shumeiko, Igor\" &lt;<a href=\"mailto:igor.shumeiko@rwth-aachen.de\">igor.shumeiko@rwth-aachen.de</a>&gt;<br>\nHallo,</p>\n<p>I am trying to do model checking of Simulink components? with Isabelle and now a little bit stuck on the way.</p>\n<p>In general we would like to compare two software components for<br>\n behavior equivalence. The components are represented by automaton made<br>\n from Simulink components.</p>\n<p>Since the theory file is a bit long, I attached it to the mail.</p>\n<p>The problem of this task is that one component has 7 input ports (that<br>\n are programed in Isabelle as functions of time: V_V LU_s LD_s BF_pc PB_b<br>\n P_b CC_b  FTS_a_b) and the second one has 8 input ports. We are trying<br>\n to find a value the on the 8th port of the second component which make<br>\n both of components equal. (This value must exist.) After that the<br>\n plan is to prove it by induction on t (?).</p>\n<p>The internal variable update functions<br>\n (pV_eF7, pV_eR7, pV_FF7, pV_eF8, pV_eR8, pV_FF8) are calculated from<br>\n port values taken on the previous time step (t-1). The functions pV_FF8<br>\n and pV_FF7 are recursive while the other are not. The output value<br>\n are CC_active_b7 and CC_active_b8 respectively.</p>\n<p>If you have time, could you please take a look at the Isabelle code,<br>\n probably you can suggest the best way to prove such things or the<br>\n direction I have to go? Or you immediately see that my approach is totally wrong.</p>\n<p>Sorry for a not concrete question any help or advice is highly appreciated.</p>\n<p>Best regards,</p>\n<p>Igor<br>\n<a href=\"/user_uploads/14278/ftAcqqs0WxQqurcOfMeXhNGX/RMTComponents.thy\">RMTComponents.thy</a></p>",
        "id": 294684547,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661177522
    },
    {
        "content": "<p>From: Simon Wimmer &lt;<a href=\"mailto:wimmersimon@gmail.com\">wimmersimon@gmail.com</a>&gt;<br>\nHi Igor,</p>\n<p>I did not look at your definitions in detail nor do I know anything about<br>\nthe problem domain but there a few general things I can say.</p>\n<p>If you look closely at the proof state that you give to blast in the<br>\ntheorem you want to prove at the end of the theory, you might see<br>\nthat the definitions did not get unfolded as you wanted them to be. You can<br>\nremedy this by adding the attribute 'abs_def' to the definitional theorems<br>\nbefore unfolding them (e.g. 'CC_active_b7_def[abs_def]').</p>\n<p>The second thing is that your are trying to prove an existential statement,<br>\nso the best way is to explicitly specify a witness.<br>\n(Use 'apply (rule exI[where x = &lt;your witness&gt;]')<br>\nI do not know what it looks like or if you need to construct it by<br>\ninduction, etc.<br>\nSometimes Isabelle proof methods can find such a witness automatically,<br>\nhowever given the complexity of the formulae involved,<br>\nI fear that you're out of luck here .</p>\n<p>I hope that was somewhat helpful.</p>\n<p>Simon</p>",
        "id": 294684606,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661177530
    },
    {
        "content": "<p>From: Viorel Preoteasa &lt;<a href=\"mailto:viorel.preoteasa@aalto.fi\">viorel.preoteasa@aalto.fi</a>&gt;<br>\nDear Igor,</p>\n<p>I do not have a direct answer to your question, but I would like to let<br>\nyou know<br>\nabout the tool that we developed which translates Simulink diagrams into<br>\nIsabelle theories.</p>\n<p>Using this tool one can check properties of Simulink diagrams in Isabelle<br>\nand for example one could check if two diagrams are equivalent.</p>\n<p>The diagrams are represented in Isabelle as predicate transformers, and not<br>\nas functions as you have them in your example. The advantage of predicate<br>\ntransformers is that we can model components that may fail for some input<br>\nvalues (e.g., division by zero).</p>\n<p>Our tool contains a python script that takes as input a Simulink slx<br>\nfile and<br>\ngenerates an Isabelle theory with \"simulink\" definitions for the<br>\nSimulink model.</p>\n<p>We handle discrete as well as continuous models.</p>\n<p>You can download our tool from</p>\n<p><a href=\"http://rcrs.cs.aalto.fi/\">http://rcrs.cs.aalto.fi/</a></p>\n<p>and you can download the paper describing it from here:</p>\n<p><a href=\"http://rcrs.cs.aalto.fi/papers/spin2016.pdf\">http://rcrs.cs.aalto.fi/papers/spin2016.pdf</a></p>\n<p>The tool webpage contains links to some other relevant references<br>\nabout the formal framework.</p>\n<p>If you want to know more about it, or if you have problems using it,<br>\nplease feel free to contact us.</p>\n<p>Best regards,</p>\n<p>Viorel Preoteasa &amp; Iulia Dragomir</p>",
        "id": 294691009,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661177776
    }
]