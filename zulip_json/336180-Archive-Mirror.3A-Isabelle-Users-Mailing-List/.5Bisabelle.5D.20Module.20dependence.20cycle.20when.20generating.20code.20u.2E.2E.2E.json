[
    {
        "content": "<p>From: Dominic Mulligan via Cl-isabelle-users &lt;<a href=\"mailto:cl-isabelle-users@lists.cam.ac.uk\">cl-isabelle-users@lists.cam.ac.uk</a>&gt;<br>\nHi,</p>\n<p>Consider the following silly definition (in Isabelle2016-1):</p>\n<p>definition goo :: \"bool set\" where<br>\n  \"goo ≡ gfp (λx. x ∩ {})\"</p>\n<p>And the following code generation commands:</p>\n<p>export_code goo in Scala<br>\nexport_code goo in Haskell</p>\n<p>export_code goo in SML<br>\nexport_code goo in OCaml</p>\n<p>The first two commands for the Scala and Haskell targets succeed, and<br>\ngenerate code, but the second two do not and instead produce the<br>\nfollowing error:</p>\n<p>Dependency \"ccpo\" &lt; \"Sup\" -&gt; class \"Sup\" would result in module dependency cycle</p>\n<p>The problem appears to be the gfp and lfp constants.  How can I work<br>\naround this and generate SML code using gfp (and lfp)?</p>\n<p>Thanks,<br>\nDominic</p>",
        "id": 294714333,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661183265
    },
    {
        "content": "<p>From: Lars Hupel &lt;<a href=\"mailto:hupel@in.tum.de\">hupel@in.tum.de</a>&gt;<br>\nHi Dominic,</p>\n<blockquote>\n<p>The problem appears to be the gfp and lfp constants.  How can I work<br>\naround this and generate SML code using gfp (and lfp)?</p>\n</blockquote>\n<p>in case you don't care about splitting up your generated code into<br>\nmultiple module, you can instruct the code generator to use just one:</p>\n<p>export_code goo in SML module_name exported_code<br>\nexport_code goo in OCaml module_name exported_code</p>\n<p>This avoids cycles between modules.</p>\n<p>Cheers<br>\nLars</p>",
        "id": 294714353,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661183277
    },
    {
        "content": "<p>From: Peter Lammich &lt;<a href=\"mailto:lammich@in.tum.de\">lammich@in.tum.de</a>&gt;<br>\nHi Dominic,</p>\n<p>You have to specify a module name to which the code is exported:</p>\n<p>export_code goo in SML module_name Goo<br>\nexport_code goo in OCaml module_name Goo</p>",
        "id": 294714405,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661183284
    },
    {
        "content": "<p>From: Dominic Mulligan via Cl-isabelle-users &lt;<a href=\"mailto:cl-isabelle-users@lists.cam.ac.uk\">cl-isabelle-users@lists.cam.ac.uk</a>&gt;<br>\nThanks Lars and Peter!</p>",
        "id": 294714444,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661183296
    }
]