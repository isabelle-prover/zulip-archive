[
    {
        "content": "<p>From: Andreas Lochbihler &lt;<a href=\"mailto:andreas.lochbihler@inf.ethz.ch\">andreas.lochbihler@inf.ethz.ch</a>&gt;<br>\nDear all,</p>\n<p>In the HOL library, many rules for reasoning about predicates which are closed under <br>\nfunction composition (such as monotonicity, continuity and measurability) follow a common <br>\nformat:</p>\n<ol>\n<li>There is a rule for the identity function: \"P (%x. x)\"</li>\n<li>All the rules for function constants F are lifted over function composition, i.e., we <br>\nuse the rule<br>\n   \"P ?f ==&gt; P (%x. F (?f x))\"<br>\nrather than<br>\n   \"P F\"</li>\n</ol>\n<p>This way, \"P &lt;some complicated expression&gt;\" can be proved by resolving with the rules if <br>\nall the constituent parts satisfy P.</p>\n<p>For monotonicity rules as used by the partial_function package, there is one exception to <br>\nthis format, namely the rule call_mono:</p>\n<p>monotone (fun_ord ?ord) ?ord (λf. f ?t)</p>\n<p>Now, monotonicity proofs by resolution with the rules fail in my applications, because in <br>\nmy goal, I would need the lifted version of call_mono, namely</p>\n<p>monotone ?orda (fun_ord ?ord) ?F ⟹ monotone ?orda ?ord (λf. ?F x ?y)    (***)</p>\n<p>because my goal looks has the form</p>\n<p>monotone (fun_ord ord) ord (%f. G f x)</p>\n<p>for some HOL term G, which is monotone, too.</p>\n<p>My problem is that I don't know how to control resolution with (<strong><em>). If I add (</em></strong>) to <br>\nthe intro rules, then it also matches when there is no ?y that should be removed, i.e., <br>\nthe HO unifier has the form ?F = (%x y. ?F' x). Is there anything in the ML library that <br>\nwould only yield unifiers which do not discard the second argument to ?F? Do you have any <br>\nsuggestions how to solve this problem?</p>\n<p>Andreas</p>",
        "id": 294670422,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661173230
    }
]