[
    {
        "content": "<p>From: Rafal Kolanski &lt;<a href=\"mailto:rafalk@cse.unsw.edu.au\">rafalk@cse.unsw.edu.au</a>&gt;<br>\nDear Isabelle Gurus,</p>\n<p>After porting my development from slightly pre-2009 to 2009-1, I've <br>\nnoticed that I need to help isabelle out by using '-' more than I used <br>\nto, for example:</p>\n<p>case (Cons x xs)<br>\n   hence a: \"blah\"<br>\n     and a': \"blah2\"<br>\n     and IH: \"someIH\"</p>\n<p>this used to go away by simp or blast, but now I need to say:<br>\n   by - simp<br>\nor<br>\n   by - blast</p>\n<p>I expect this for \"by - assumption\" as assumption doesn't chain in the <br>\nassumptions, but I find it a little strange that simp no longer does. As <br>\nthis looks intentional, can anyone tell me why this has changed?</p>\n<p>Also, in my proofs when using force and auto, I've found I need to put <br>\nin a lot more '!', especially on dest: and intro: arguments, and nearly <br>\nalways when saying \"intro: ext\". Once again, does anyone remember why <br>\nthis might be?</p>\n<p>Sincerely,</p>\n<p>Rafal Kolanski.</p>",
        "id": 294100333,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660833559
    },
    {
        "content": "<p>From: Florian Haftmann &lt;<a href=\"mailto:florian.haftmann@informatik.tu-muenchen.de\">florian.haftmann@informatik.tu-muenchen.de</a>&gt;<br>\nHi Rafal,</p>\n<p>This sounds indeed strange.  Somehow erratic proof failures could always<br>\noccur due to changes in default rules (esp. for classical reasoning),<br>\nbut your description sounds like a \"systematic change\".  Can you provide<br>\nme more explicit proof text=</p>\n<p>Hope this helps,<br>\n    Florian<br>\n<a href=\"/user_uploads/14278/4-cQdkcQIWKe9_5HpGKyzhMC/signature.asc\">signature.asc</a></p>",
        "id": 294100506,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660833608
    },
    {
        "content": "<p>From: Florian Haftmann &lt;<a href=\"mailto:florian.haftmann@informatik.tu-muenchen.de\">florian.haftmann@informatik.tu-muenchen.de</a>&gt;<br>\nHi Rafal,</p>\n<p>The \"prems\" are, roughly, the accumulated facts within a proof, which as<br>\na historical accident have been used implicitly by certain proof methods<br>\n-- which, following the rule of thumb \"explicit is better than<br>\nimplicit\", turned out as a bad idea.  You can recover this behaviour by<br>\nusing prems explicitly, e.g. \"using prems by ...\" or \"by (auto simp add:<br>\nprems)\" etc.  Best practice is to refer to used facts implicitly;<br>\nrecall that you can quote facts by proposition using backticks ``.</p>\n<p>Hope this helps,<br>\n    Florian<br>\n<a href=\"/user_uploads/14278/7Goe-izNEb1njwbyGwIvJEEe/signature.asc\">signature.asc</a></p>",
        "id": 294100518,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660833614
    },
    {
        "content": "<p>From: Florian Haftmann &lt;<a href=\"mailto:florian.haftmann@informatik.tu-muenchen.de\">florian.haftmann@informatik.tu-muenchen.de</a>&gt;<br>\nHi Rafal,</p>\n<p>n.b. \"hence\" = \"from this\"</p>\n<p>i.e. you explicitly chain in the facts of the \"case\".  This is indeed a<br>\nrecommended proof style in such situations.</p>\n<p>Hope this helps,<br>\n    Florian<br>\n<a href=\"/user_uploads/14278/oDTF0xWIh8oFo4TGXvM7oBxf/signature.asc\">signature.asc</a></p>",
        "id": 294100537,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660833620
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nMany years ago (around 1999) the \"prems\" were indeed somehow correlated to <br>\nlocal facts within a proof, in emulation of the old-style goal <br>\nrepresentation that lacks genuine facts (cf. the \"insert\" method).</p>\n<p>Later (still in 1999, or maybe in 2000) the distinction between a proof <br>\ncontext and a goal state became much clearer, and also more scalable -- <br>\nboth for users who need to read state information and tools that need to <br>\noperate on them.  Ever since, local facts required for a proof step should <br>\nhave been indicated explicitly, but only in recent years I've made some <br>\neffort to remove these early mistakes from the system.</p>\n<p>Further note that the later introduction of locales (and arbitrary target <br>\ncontexts), as well as derived assumption elements such as 'obtain' <br>\nrendered the \"prems\" register of the Isar machinery just an arbitrary <br>\ncollection of theorems that happen to have a certain foundational role. <br>\nIn user space it is meaningless and should not be used anymore -- the <br>\nProof General hilighting scheme also indicates this.</p>\n<p>Makarius</p>",
        "id": 294100568,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660833633
    },
    {
        "content": "<p>From: Florian Haftmann &lt;<a href=\"mailto:florian.haftmann@informatik.tu-muenchen.de\">florian.haftmann@informatik.tu-muenchen.de</a>&gt;<br>\nHi Rafal,</p>\n<p>This indeed might be due to changes in the defaults for classical rules.<br>\n My own experience is that is usually preferable to use \"auto ... simp<br>\nadd: expand_fun_eq\" than \"auto ... intro[!]: ext\", which also makes<br>\nthese two proofs easier.</p>\n<p>Hope this helps,<br>\n    Florian<br>\n<a href=\"/user_uploads/14278/CprVb5LNryVF5NsBU5-RKU5A/signature.asc\">signature.asc</a></p>",
        "id": 294100582,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660833639
    },
    {
        "content": "<p>From: Rafal Kolanski &lt;<a href=\"mailto:rafalk@cse.unsw.edu.au\">rafalk@cse.unsw.edu.au</a>&gt;<br>\nDear Florian,</p>\n<p>Florian Haftmann wrote:<br>\nI'm attaching my explorations in the area.<br>\nRegarding more \"!\":</p>\n<p>- my memory was faulty with auto, it works pretty much how it used to<br>\n  - force is weaker, needs help with intro and dest more, especially<br>\n    intro!: ext</p>\n<p>- fast is weaker, needs ! with intro: ext</p>\n<p>Regarding \"-\" and fact chaining issues, it turns out that the pre-2009 <br>\nIsabelle does warn me that this is a legacy feature:<br>\n    \"Legacy feature! Implicit use of prems in assumption proof\"<br>\nI just don't really get why this is, and how I should be writing my <br>\nproof instead, what the \"sanctioned\" way is.</p>\n<p>So it's not like there's bugs to report, really, just two proof methods <br>\nsuddenly getting weaker, and a legacy feature I found so intuitive I <br>\nforgot it was a legacy feature. I'm just curious about the \"why\" of it.</p>\n<p>Sincerely,</p>\n<p>Rafal Kolanski.<br>\n<a href=\"/user_uploads/14278/4GmI_OLCwCR_AzmVm4Mj3o9A/BlahSep.thy\">BlahSep.thy</a></p>",
        "id": 294100604,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660833645
    },
    {
        "content": "<p>From: Rafal Kolanski &lt;<a href=\"mailto:rafalk@cse.unsw.edu.au\">rafalk@cse.unsw.edu.au</a>&gt;<br>\nFlorian Haftmann wrote:<br>\nJust to make sure I understand, in 2009-1, for <br>\nblast/force/assumption/simp I need to say \"by - the_proof_method\" or add <br>\nprems, since it was decided that implicit prems were undesired.</p>\n<p>However, for auto I just need to say \"by auto\" and it automatically <br>\nchains in the prems that I get from \"case (Cons x xs) hence IH: some_IH\" <br>\n<em>without</em> somehow triggering that same legacy feature that <br>\nblast/force/simp used to use? That's what got me confused in the first <br>\nplace.</p>\n<p>Does this mean I should be writing:</p>\n<p>next<br>\n   case (Cons x xs)<br>\n   from prems have ...</p>\n<p>instead of</p>\n<p>next<br>\n   case (Cons x xs)<br>\n   hence ...<br>\n?</p>\n<p>Sincerely,</p>\n<p>Rafal Kolanski.</p>",
        "id": 294100620,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660833651
    },
    {
        "content": "<p>From: Lawrence Paulson &lt;<a href=\"mailto:lp15@cam.ac.uk\">lp15@cam.ac.uk</a>&gt;<br>\nI don't know why they seem weaker to you. This code has not changed. More likely is that more theorems have been included using attributes such as [intro!], altering their behaviour for your examples.<br>\nLarry Paulson</p>",
        "id": 294100635,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660833656
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nOn Mon, 8 Feb 2010, Rafal Kolanski wrote:</p>\n<blockquote>\n<p>I'm attaching my explorations in the area.<br>\nRegarding more \"!\":<br>\n- my memory was faulty with auto, it works pretty much how it used to<br>\n- force is weaker, needs help with intro and dest more, especially<br>\n  intro!: ext<br>\n- fast is weaker, needs ! with intro: ext</p>\n</blockquote>\n<p>First of all, we need to be careful about different roles of \"!\".  IIRC, <br>\nyour examples were all about intro! elim! etc., but at some point I've <br>\nthought it would be force! auto! etc. as a method argument.  The latter is <br>\nan ancient abbreviation for something like (insert prems) just before the <br>\nmethod invocation.</p>\n<p>There might be reasons in the main HOL setup why some extra intro! elim! <br>\nis required in your examples, but this is probably independent of the <br>\n\"prems\" confusion.</p>\n<blockquote>\n<p>Regarding \"-\" and fact chaining issues, it turns out that the pre-2009 <br>\nIsabelle does warn me that this is a legacy feature:<br>\n  \"Legacy feature! Implicit use of prems in assumption proof\"<br>\nI just don't really get why this is, and how I should be writing my proof <br>\ninstead, what the \"sanctioned\" way is.</p>\n<p>So it's not like there's bugs to report, really, just two proof methods <br>\nsuddenly getting weaker, and a legacy feature I found so intuitive I forgot <br>\nit was a legacy feature. I'm just curious about the \"why\" of it.</p>\n</blockquote>\n<p>Everything around \"prems\" causes lots misunderstanding, this mail thread <br>\nalready proves it (and there are older threads related to the same issue).</p>\n<p>When you see \"Legacy feature! Implicit use of prems in assumption proof\" <br>\n(in Isabelle2008) it means that \"by auto\" (or similar) has left over some <br>\npending subgoals, but these were closed by applying some arbitrary facts <br>\nthat happen to be connected to low-level assumptions for foundational <br>\nreasons.  This is not really intuitive for two main reasons:</p>\n<p>* Foundation via assimptions is an implementation detail, nothing the<br>\n     user should care about.  For example, assume / presume / obtain /<br>\n     guess / case / def produce such prems right now, but have / show do<br>\n     not. Moreover, 'assumes' in locale expressions produce prems in<br>\n     certain intermediate situations, but later it changes into a predicate<br>\n     that is assumed and the rest is derived.  Various local theory targets<br>\n     also have their own idea of introducing prems intermediately.</p>\n<p>* Structurally, it is unclear which facts actually solve the<br>\n     situation.  Referring to \"prems\" is somehow non-local.  You just need<br>\n     to inspect the situations were the system emits the above \"Legacy<br>\n     feature! ...\" message, and replace \"by method\" by \"apply method\" and<br>\n     then look at the remaining goal state.  Usually it will take quite<br>\n     some time to figure out how the goal was actually solved, but<br>\n     information this is then easily added to the 'from' or 'using' part of<br>\n     the invocation.  (I've done these cleanups many times, and often there<br>\n     were even some errors in the proof text which facts really contribute<br>\n     to the result.)</p>\n<p>Makarius</p>",
        "id": 294100654,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660833663
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nHere is a follow-up on the discussion.  Refal agreed that it is of general<br>\ninterest to the list.</p>\n<p>Makarius</p>\n<p>---------- Forwarded message ----------<br>\nDate: Tue, 9 Feb 2010 13:38:47 +0100 (CET)<br>\nFrom: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nTo: Rafal Kolanski &lt;<a href=\"mailto:rafalk@cse.unsw.edu.au\">rafalk@cse.unsw.edu.au</a>&gt;<br>\nSubject: Re: [isabelle] More use of \"-\" and \"!\" in isabelle 2009-1?</p>\n<p>On Tue, 9 Feb 2010, Rafal Kolanski wrote:</p>\n<blockquote>\n<p>now the system says:</p>\n<p>proof (prove): step 14</p>\n<p>using this: (everything that came out of the Cons x xs)</p>\n<p>goal: (IH &amp;&amp;&amp; in')</p>\n<p>so I thought I already explicitly stated which prems I want in the proof. <br>\nSomehow auto can deal with this without any problems, but simp and blast will <br>\nnot.</p>\n</blockquote>\n<p>OK so far, but note your simultaneous goal (&amp;&amp;&amp;), which is the main reason for <br>\nthis mystery (see below).</p>\n<blockquote>\n<p>What is more, I can't say:<br>\n       by (simp add: prems)<br>\n     or<br>\n       by (force intro: prems)</p>\n</blockquote>\n<p>Here the evil \"prems\" refers again to that global list of physical premises <br>\nthat happen to be around in the context.  The notion of premises within an <br>\nold-style goal is different from this -- it simulates the effect of having <br>\nlocal facts within a tactical proof.  (Back to field 1 of the game.)</p>\n<blockquote>\n<p>as that will not solve the pending goal. These, though, will:<br>\n       by auto<br>\n       by - assumption<br>\n       by - simp<br>\n       by - blast<br>\nSo auto is somehow special. However, simp and blast don't do this, thought <br>\nthey used to, because that feature is deprecated. What's the reasoning behind <br>\nthis? How come auto gets to chain without error or a legacy feature warning, <br>\nbut the other proof methods do not?</p>\n</blockquote>\n<p>There are 3 different kinds of methods here:</p>\n<p>* assumption is a single-step method (like \"rule\", \"this\") and is very<br>\n     picky about the \"using\" part -- it will try to use these facts<br>\n     simultaneously, which practically only works for 0 or 1 such facts.</p>\n<p>\"by - assumption\" should hardly ever be useful in a proof; the<br>\n     implicit ending of 'by' already includes \"assumption\" for all<br>\n     remaining subgoals.</p>\n<p>* auto: \"simple method\" that addresses multiple goals.  This means the<br>\n     using part is first inserted into all subgoals and the internal<br>\n     auto_tac operates on all of that.</p>\n<p>* simp/blast: \"simple method\" that addresses the first goal.  The using<br>\n     part is only inserted into the single subgoal where the internal<br>\n     tactic operates.</p>\n<p>Since you have multiple subgoals initially, plain \"simp\" and \"blast\" only ever <br>\noperate on the first one.  (There is some chance that the old-style implicit <br>\nuse of prems happened to solve the second one without further notice -- Now <br>\ncall this \"intuitive\".)</p>\n<p>BTW, the \"-\" method inserts used facts into all goals as well, which is the <br>\nreason why the \"by - method\" form sometimes does a bit more than \"by method\". <br>\n(I do not recommend to use \"-\" in this form, though.)</p>\n<p>I reckon the following will work in your case:</p>\n<p>by simp_all  -- \"solve all goals uniformly (last to first)\"<br>\n   by blast+    -- \"solve all goals iteratively (first to last)\"</p>\n<p>In general simp+ will <em>not</em> work as expected, because simp does not need to <br>\nsolve the subgoal it is applied to; blast/fast/force are all the same in <br>\nsolve-or-fail behaviour, so plain iteration does the job.  (This is the deeper <br>\nreason why there is \"simp_all\" but no \"blast_all\" etc.)</p>\n<p>The \"auto\" method is always in this \"all\" mode, but the [] method combinator <br>\nexplained in the isar-ref manual allows to restrict its effect on a selection <br>\nof subgoals as well.</p>\n<p>Makarius</p>",
        "id": 294100670,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660833669
    }
]