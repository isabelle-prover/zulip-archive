[
    {
        "content": "<p>From: \"Aaron W. Hsu\" &lt;<a href=\"mailto:arcfide@sacrideo.us\">arcfide@sacrideo.us</a>&gt;<br>\nIs there currently a theory for multi-dimensional arrays?  I have found <br>\nsomething called the Collections framework, but I do not know if this <br>\nfits the bill.  I am looking to create a theory based on the Mathematics <br>\nof Arrays, but if there was already a base for arrays, I would take that <br>\nas a starting point.</p>",
        "id": 294155112,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660850904
    },
    {
        "content": "<p>From: \"Aaron W. Hsu\" &lt;<a href=\"mailto:arcfide@sacrideo.us\">arcfide@sacrideo.us</a>&gt;<br>\nOn Tue, 01 May 2012 08:06:24 +0200, Tobias Nipkow wrote:</p>\n<blockquote>\n<p>The simplest way to model an array<br>\nis as a function  nat =&gt; 'a. </p>\n</blockquote>\n<p>[...]</p>\n<blockquote>\n<p>If you want all arrays in the same type you could use  nat list =&gt; 'a.</p>\n</blockquote>\n<p>Indeed, this looks like it will do what I want admirably well. Thank you.</p>",
        "id": 294157498,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660851837
    },
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\nIt depends on what you exactly want. The simplest way to model an array is as a<br>\nfunction  nat =&gt; 'a. A 2-dim array would have type  nat =&gt; nat =&gt; 'a. If you<br>\nwant all arrays in the same type you could use  nat list =&gt; 'a. Of course these<br>\nmodels do not express that arrays have a fixed length. If you model arrays as<br>\nlists, that feature is captured as well. But arrays of different dimensions will<br>\nhave different types, which may or may not bother you. This is the model in the<br>\narrays of the collections framework, except that they wrap it up in a separate type.</p>\n<p>Tobias</p>",
        "id": 294160391,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660852918
    }
]