[
    {
        "content": "<p>From: Andreas Lochbihler &lt;<a href=\"mailto:lochbihl@infosun.fim.uni-passau.de\">lochbihl@infosun.fim.uni-passau.de</a>&gt;<br>\nHello all,</p>\n<p>I'm working with a development snapshot of Isabelle (15 Oct 2007) and<br>\ngot stuck when trying to employ locales with definitions inside.<br>\nMy problem is how to refer to different interpretations of a single<br>\nlocale in one lemma.</p>\n<p>The following example, which heavily simplifies the situation in my<br>\ntheory, illustrates my problem:</p>\n<p>Suppose, I have a locale a which fixes a parameter function P and<br>\ndefines a lift operator to lift the predicate to maps.</p>\n<p>locale a =<br>\n  fixes P :: \"'a =&gt; bool\"<br>\n  fixes lift :: \"('b =&gt; 'a option) =&gt; bool\"<br>\n  defines lift_def: \"lift as == !b. case as b of None =&gt; True | Some a<br>\n=&gt; P a\" begin</p>\n<p>lemma liftI: \"(!!a b. as b = Some a ==&gt; P a) ==&gt; lift as\"<br>\napply(clarsimp simp: lift_def)<br>\nby(case_tac \"as b\", auto)</p>\n<p>(* ... *)<br>\nend</p>\n<p>Also, there is predicate P, e.g.</p>\n<p>definition P :: \"nat =&gt; bool\"<br>\nwhere \"P n == n &gt; 0\"</p>\n<p>which we want to lift:</p>\n<p>interpretation a [P] .</p>\n<p>Then, there is another predicate, say Q, which also must be lifted.</p>\n<p>definition Q :: \"nat =&gt; bool\"<br>\nwhere \"Q n == n = 0\"</p>\n<p>interpretation a [Q] .</p>\n<p>Strangely, Isabelle issues a warning at this point, saying that it<br>\nreplaces oly copies of the theorems Xpl.P_lift.lift_def and<br>\nXpl.P_lift.liftI, i.e. if I refer to theorems generated by the<br>\ninterpretation of a with parameter P, this now gives those for parameter Q.</p>\n<p>Now I want to prove that if Q lifted to a map as holds, then P does not<br>\nhold when lifted to the same map, i.e. I would like to write something like</p>\n<p>lemma \"Q.lift as ==&gt; ~P.lift as\"</p>\n<p>Is there any syntax to write this or is it just impossible to refer to<br>\ndifferent interpretations of a locale in a single lemma? Is there<br>\nanother concept in Isabelle which would serve my purposes better?</p>\n<p>Regards,<br>\nAndreas Lochbihler</p>",
        "id": 294052307,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660820040
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nOn Fri, 19 Oct 2007, Andreas Lochbihler wrote:</p>\n<blockquote>\n<p>I'm working with a development snapshot of Isabelle (15 Oct 2007) and<br>\ngot stuck when trying to employ locales with definitions inside.<br>\nMy problem is how to refer to different interpretations of a single<br>\nlocale in one lemma.</p>\n<p>The following example, which heavily simplifies the situation in my<br>\ntheory, illustrates my problem:</p>\n<p>Suppose, I have a locale a which fixes a parameter function P and<br>\ndefines a lift operator to lift the predicate to maps.</p>\n<p>locale a =<br>\n  fixes P :: \"'a =&gt; bool\"<br>\n  fixes lift :: \"('b =&gt; 'a option) =&gt; bool\"<br>\n  defines lift_def: \"lift as == !b. case as b of None =&gt; True | Some a<br>\n=&gt; P a\" begin</p>\n<p>lemma liftI: \"(!!a b. as b = Some a ==&gt; P a) ==&gt; lift as\"<br>\napply(clarsimp simp: lift_def)<br>\nby(case_tac \"as b\", auto)</p>\n<p>(* ... *)<br>\nend</p>\n<p>Also, there is predicate P, e.g.</p>\n<p>definition P :: \"nat =&gt; bool\"<br>\nwhere \"P n == n &gt; 0\"</p>\n<p>which we want to lift:</p>\n<p>interpretation a [P] .</p>\n<p>Then, there is another predicate, say Q, which also must be lifted.</p>\n<p>definition Q :: \"nat =&gt; bool\"<br>\nwhere \"Q n == n = 0\"</p>\n<p>interpretation a [Q] .</p>\n</blockquote>\n<blockquote>\n<p>Strangely, Isabelle issues a warning at this point, saying that it <br>\nreplaces oly copies of the theorems Xpl.P_lift.lift_def and <br>\nXpl.P_lift.liftI, i.e. if I refer to theorems generated by the <br>\ninterpretation of a with parameter P, this now gives those for parameter <br>\nQ.</p>\n</blockquote>\n<p>This works by using separate name prefixes each interpretations. Moreover, <br>\nlocal definitions are better expressed as definitions within the locale <br>\ncontext, not as \"defines\" which are slightly outdated.   Here is my <br>\nversion of the above:</p>\n<p>locale a =<br>\n    fixes P :: \"'a =&gt; bool\"<br>\n  begin</p>\n<p>definition lift :: \"('b =&gt; 'a option) =&gt; bool\"<br>\n  where \"lift as &lt;-&gt; (ALL b. case as b of None =&gt; True | Some a =&gt; P a)\"</p>\n<p>lemma liftI: \"(!!a b. as b = Some a ==&gt; P a) ==&gt; lift as\"<br>\n    unfolding lift_def by (auto split: option.splits)</p>\n<p>end</p>\n<p>definition P :: \"nat =&gt; bool\"<br>\n  where \"P = (%n. n &gt; 0)\"</p>\n<p>interpretation P: a [P] .</p>\n<p>definition Q :: \"nat =&gt; bool\"<br>\n  where \"Q = (%n. n = 0)\"</p>\n<p>interpretation Q: a [Q] .</p>\n<blockquote>\n<p>Now I want to prove that if Q lifted to a map as holds, then P does not <br>\nhold when lifted to the same map, i.e. I would like to write something <br>\nlike</p>\n<p>lemma \"Q.lift as ==&gt; ~P.lift as\"</p>\n</blockquote>\n<p>You can now write this, but cannot prove it.  In fact the following holds:</p>\n<p>lemma \"as = empty ==&gt; Q.lift as &lt;-&gt; P.lift as\"<br>\n    unfolding P.lift_def Q.lift_def by auto</p>\n<p>Makarius</p>",
        "id": 294052408,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660820077
    }
]