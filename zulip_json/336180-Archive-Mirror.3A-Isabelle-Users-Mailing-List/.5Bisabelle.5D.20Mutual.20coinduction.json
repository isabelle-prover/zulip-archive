[
    {
        "content": "<p>From: Thomas Sternagel &lt;<a href=\"mailto:Thomas.Sternagel@uibk.ac.at\">Thomas.Sternagel@uibk.ac.at</a>&gt;<br>\nDear List,</p>\n<p>I'm trying to figure out mutual coinduction in a development version of<br>\nIsabelle/HOL (d4b89572ae71). In particular I want to use the coinduction<br>\nscheme for two sets defined by mutual coinduction, but I'm not even able<br>\nto formulate my goal in a way that I can use 'coinduct'.<br>\nConsider the following minimal example:</p>\n<p>theory Tmp<br>\nimports<br>\n  Main<br>\nbegin</p>\n<p>coinductive_set X and Y where<br>\n  \"n ∈ Y ⟹ Suc n ∈ X\"<br>\n| \"n ∈ X ⟹ Suc n ∈ Y\"</p>\n<p>lemma tmp:<br>\n  shows \"(∀x. P x ⟶ x ∈ X) ∧ (∀x. Q x ⟶ x ∈ Y)\"<br>\nproof (coinduct rule: X_Y.coinduct)<br>\nsorry</p>\n<p>end</p>\n<p>In the first line of the proof of lemma 'tmp' the following exception is<br>\nraised</p>\n<p>exception TERM raised (line 80 of \"Isar/rule_cases.ML\"):<br>\n  Expected 2 binop arguments<br>\n  ∃n. B.0 = Suc n ∧ (Q n ∨ n ∈ Y)</p>\n<p>What am I doing wrong? What is 'B.0'? I don't understand what's<br>\nhappening here.</p>\n<p>Tom</p>",
        "id": 294683060,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661177362
    },
    {
        "content": "<p>From: Dmitriy Traytel &lt;<a href=\"mailto:traytel@inf.ethz.ch\">traytel@inf.ethz.ch</a>&gt;<br>\nHi Tom,</p>\n<p>I fear that currently neither coinduct nor coinduction work properly with mutually coinductive predicates. Thus, in your example I would just use rule (+ goal_cases for the case names).</p>\n<p>Note that few weeks ago the coinductive was generating a different (non-mutual) rule, that was exposing the internal construction (see NEWS). In your example this old rule looked like:</p>\n<p>?X ?x ?xa ⟹<br>\n(⋀x xa. ?X x xa ⟹<br>\n         (∃n. ¬ x ∧ xa = Suc n ∧ (?X True n ∨ n ∈ Y)) ∨<br>\n         (∃n. x ∧ xa = Suc n ∧ (?X False n ∨ n ∈ X))) ⟹<br>\nXp_Yp ?x ?xa</p>\n<p>This rule may have worked better with coinduct(ion), but getting from Xp_Yp to X and Y was tedious in turn.</p>\n<p>When I changed coinductive to produce the new rule, I haven’t seen any uses of mutually coinductive predicates in isabelle + AFP. Is your use-case a new development, or is it one that used to work with the old rule?</p>\n<p>Cheers,<br>\nDmitriy</p>",
        "id": 294683125,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661177389
    },
    {
        "content": "<p>From: Thomas Sternagel &lt;<a href=\"mailto:Thomas.Sternagel@uibk.ac.at\">Thomas.Sternagel@uibk.ac.at</a>&gt;<br>\nIts a new development.<br>\nActually, I started with Isabelle/HOL 2016 where I encountered the 'old'<br>\nrule you describe below, but could also not figure out how to use it, so<br>\nI switched to development version d4b89572ae71, because the coinduction<br>\nscheme looked more promising there.<br>\nThanks for the information, anyway.</p>",
        "id": 294683155,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661177400
    }
]