[
    {
        "content": "<p>From: Arthur Peters &lt;<a href=\"mailto:amp@singingwizard.org\">amp@singingwizard.org</a>&gt;<br>\nI would like to provide names for clauses in a function and then have them<br>\nused in the induction rule.</p>\n<p>For example, I have the following function:</p>\n<p>fun t4 :: \"nat =&gt; bool\" where<br>\n  four:<br>\n  \"t4 (Suc (Suc (Suc (Suc n)))) = t4 n\" |<br>\n  zero:<br>\n  \"t4 0 = True\" |<br>\n  default:<br>\n  \"t4 _ = False\"</p>\n<p>And I can reference the cases as 1, 2, 3_1, 3_2, 3_3. See the bottom for a<br>\nworking proof in this form. However I would like to be able to do something<br>\nlike the following with the names I gave used in the case names:</p>\n<p>lemma<br>\n  fixes n :: nat<br>\n  shows \"t4 n ==&gt; ~ t4 (Suc n)\"<br>\nproof (induction n rule: t4.induct)<br>\n  case \"default_1\" then show \"?case\" by simp<br>\nnext<br>\n  case \"default_2\" then show \"?case\" by simp<br>\nnext<br>\n  case \"zero\" then show \"?case\" by simp<br>\nnext<br>\n  case \"default_3\" then show \"?case\" by simp<br>\nnext<br>\n  case \"four\"<br>\n  from this show \"?case\" by simp<br>\nqed</p>\n<p>I have read that this is possible for inductively defined sets, but it<br>\nfound no description of how to do the same thing with functions.</p>\n<p>As a side note, is it possible to combine all the trivial cases (the<br>\ndefaults and zero) into one proof? All the proofs are identical so it would<br>\nbe nice to be able to do more than one case at a time.</p>\n<p>Thanks a lot.<br>\n-Arthur</p>\n<p>Working proof:</p>\n<p>lemma<br>\n  fixes n :: nat<br>\n  shows \"t4 n ==&gt; ~ t4 (Suc n)\"<br>\nproof (induction n rule: t4.induct)<br>\n  case \"3_1\" then show \"?case\" by simp<br>\nnext<br>\n  case \"3_2\" then show \"?case\" by simp<br>\nnext<br>\n  case \"2\" then show \"?case\" by simp<br>\nnext<br>\n  case \"3_3\" then show \"?case\" by simp<br>\nnext<br>\n  case \"1\"<br>\n  from this show \"?case\" by simp<br>\nqed</p>",
        "id": 294226892,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660900425
    },
    {
        "content": "<p>From: Lars Noschinski &lt;<a href=\"mailto:noschinl@in.tum.de\">noschinl@in.tum.de</a>&gt;<br>\nOn 26.11.2012 00:07, Arthur Peters wrote:</p>\n<blockquote>\n<p>I would like to provide names for clauses in a function and then have them<br>\nused in the induction rule.</p>\n<p>For example, I have the following function:</p>\n<p>fun t4 :: \"nat =&gt;  bool\" where<br>\n   four:<br>\n   \"t4 (Suc (Suc (Suc (Suc n)))) = t4 n\" |<br>\n   zero:<br>\n   \"t4 0 = True\" |<br>\n   default:<br>\n   \"t4 _ = False\"</p>\n<p>And I can reference the cases as 1, 2, 3_1, 3_2, 3_3. See the bottom for a<br>\nworking proof in this form. However I would like to be able to do something<br>\nlike the following with the names I gave used in the case names:<br>\n[...<br>\nI have read that this is possible for inductively defined sets, but it<br>\nfound no description of how to do the same thing with functions.</p>\n</blockquote>\n<p>The function package does not support this. However, you can use the <br>\ncase_names attribute to annotate the generated induction lemma with the <br>\ncase names:</p>\n<p>lemma t4_induct = t4.induct[case_names four zero default]</p>\n<p>gives you the induction rule you want.</p>\n<blockquote>\n<p>As a side note, is it possible to combine all the trivial cases (the<br>\ndefaults and zero) into one proof? All the proofs are identical so it would<br>\nbe nice to be able to do more than one case at a time.</p>\n</blockquote>\n<p>If the proof is trivial, you can just omit these cases and solve them in <br>\nthe final step:</p>\n<p>proof (induct rule: t4_induct)<br>\n   case four ...<br>\nqed (auto ...)</p>\n<p>If the proof is not trivial, but the same, you can do the following thing:</p>\n<p>proof (induct rule: t4_induct)<br>\n   have X: ... proof the theorem for the trivial cases ...<br>\n   { case default show ?case by (... X ...) }<br>\n   { case zero show ?case by (... X ...) }<br>\nnext<br>\n   case four ...<br>\nqed</p>\n<p>-- Lars</p>",
        "id": 294226927,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660900438
    }
]