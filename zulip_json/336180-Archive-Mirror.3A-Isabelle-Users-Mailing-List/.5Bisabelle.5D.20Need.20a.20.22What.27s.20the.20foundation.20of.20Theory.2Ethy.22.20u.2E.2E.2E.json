[
    {
        "content": "<p>From: Gottfried Barrow &lt;<a href=\"mailto:gottfried.barrow@gmx.com\">gottfried.barrow@gmx.com</a>&gt;<br>\nHi,</p>\n<p>I don't need this now, but in a year or two, I'd like to have a Isabelle <br>\nutility that I run on a theory which tells me what the \"foundation\" is, <br>\nand that also can take a Thy1.thy as the base \"foundation\", and given <br>\nThy2.thy, the utility reports what additional \"foundation\" Thy2.thy adds <br>\nto Thy1.thy.</p>\n<p>The foundation would be anything in a theory which would be axiomatic in <br>\nnature, and maybe some kind of checksum on things.</p>\n<p>Different people are motivated by Isabelle for different reasons. A big <br>\npart of my interest in Isabelle is that it's a tool which, at the very <br>\nleast, replaces the function of peer reviewed journals, to the extent <br>\nthat it can. That means, at the very least, it's a huge preliminary <br>\nvetting of logic in Theory.thy that announces to anyone interested, \"The <br>\nlogic in Theory.thy has been vetted by Isabelle as being correct. It <br>\nmost likely will not be a waste of anyone's time to wade through 20,000 <br>\nlines of source in Theory.thy to figure out what it is, and to find out <br>\nif it really is correct.\"</p>\n<p>On a personal level, by all appearances, Isabelle can take the place of <br>\npeer reviewed journals, to the extent that it can give you confidence <br>\nthat you're not producing a bunch of logical nonsense. What Isabelle <br>\ndoesn't do is solve the \"person X is trustworthy and competent\" problem <br>\non a community level.</p>\n<p>I could dig through the mailing list archives and find where Larry has <br>\nsaid something like, \"You have to use Isabelle intelligently.\" And a <br>\nwhile back, on the HOL4 list, there was a discussion about the <br>\npossibilities of people getting proof assistants to do something wrong <br>\nfor either devious reasons or non-devious reasons. And most recently, on <br>\nthis very list, Falso was presented as a great logical break through, <br>\nwhere, no doubt, still today, many verifiers, formalizers, and sourcers, <br>\nnot to be confused with sorcerers, are now full of themselves, mistaking <br>\ntheir own logical prowess with the success that always comes with Falso.</p>\n<p><a href=\"https://lists.cam.ac.uk/mailman/htdig/cl-isabelle-users/2013-March/msg00165.html\">https://lists.cam.ac.uk/mailman/htdig/cl-isabelle-users/2013-March/msg00165.html</a></p>\n<p>Anyway, a \"what's the foundation\" utility would allow people to do a 10 <br>\nsecond check on a theory as a first step, to make sure nothing obvious <br>\nis wrong, and to increase the trust factor, and even good people mess up <br>\nbad some times.</p>\n<p>I assume that there are much more complex problems involved in proof <br>\nassistants being completely secure from being hacked, or messed up <br>\nunintentionally, but I think it would be good for a person to get a <br>\nbasic rubber stamp from an official utility that generates a basic <br>\nreport on what the foundation of a theory is, and that can compare the <br>\nfoundation of two theories.</p>\n<p>No one needs to respond to this. I'm putting it out so maybe in a year <br>\nor two there's an Isabelle foundation report utility.</p>\n<p>Regards<br>\nGB</p>",
        "id": 294244879,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660908501
    },
    {
        "content": "<p>From: Ramana Kumar &lt;<a href=\"mailto:rk436@cam.ac.uk\">rk436@cam.ac.uk</a>&gt;<br>\nYou may be interested in these projects:</p>\n<p><a href=\"https://www.rocq.inria.fr/deducteam/Dedukti/index.html\">https://www.rocq.inria.fr/deducteam/Dedukti/index.html</a><br>\n<a href=\"http://www.gilith.com/research/opentheory/\">http://www.gilith.com/research/opentheory/</a><br>\n<a href=\"http://proof-technologies.com/holzero/\">http://proof-technologies.com/holzero/</a></p>\n<p>The basic idea is to do your proof development in a heavyweight like<br>\nIsabelle, and when you're happy with it and want to give it an<br>\nextra-special tick, you export a proof and trust it with a tiny,<br>\nwell-understood checker.</p>\n<p>N.B. Isabelle cannot yet export to these, as far as I'm aware, but Brian<br>\nHuffman wrote some code for importing from OpenTheory.</p>",
        "id": 294244899,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660908508
    },
    {
        "content": "<p>From: Gottfried Barrow &lt;<a href=\"mailto:gottfried.barrow@gmx.com\">gottfried.barrow@gmx.com</a>&gt;<br>\nOn 7/9/2013 4:04 AM, Ramana Kumar wrote:</p>\n<blockquote>\n<p>You may be interested in these projects:</p>\n<p><a href=\"https://www.rocq.inria.fr/deducteam/Dedukti/index.html\">https://www.rocq.inria.fr/deducteam/Dedukti/index.html</a><br>\n<a href=\"http://www.gilith.com/research/opentheory/\">http://www.gilith.com/research/opentheory/</a><br>\n<a href=\"http://proof-technologies.com/holzero/\">http://proof-technologies.com/holzero/</a></p>\n<p>The basic idea is to do your proof development in a heavyweight like<br>\nIsabelle, and when you're happy with it and want to give it an<br>\nextra-special tick, you export a proof and trust it with a tiny,<br>\nwell-understood checker.</p>\n</blockquote>\n<p>Ramana,</p>\n<p>So it seems that, in the future, third-party verification will be a big <br>\npart of verifying the verifiers.</p>\n<p>There's one big problem, which occurred to me lately. I'm getting <br>\ntotally locked into Isabelle due to type classes and Isabelle's nifty <br>\ntype coercion commands. Using those features prevents the possibility of <br>\ndoing an easy translation to any other member of the HOL family. I <br>\nprobably would never have the time to port over what I'm doing, but if I <br>\ncan do something, then I sometimes entertain the idea of doing that <br>\nsomething, so timewise, the limitation ends up being a good thing.</p>\n<p>With Open Theory, the last time I was looking at it, I think I saw that <br>\nit doesn't allow new axioms. That's good for third-party verification, <br>\nbut bad if I need new axioms, which I do. With Dedkti, I assume that the <br>\nproblem of either of or both of type classes and no new axioms rules it <br>\nout. For these, if the foundation is fixed, then it solves the problem <br>\nof what I'm talking about.</p>\n<p>HOL Zero would fall under the \"more complex\" part of verifying the <br>\nverifiers. But even HOL Zero would need a utility to report back what <br>\nthe foundation is. If it would be as simple as listing the axiom <br>\ncommands, then it would do that. The idea is for some official utility <br>\nto authoritatively tell us exactly what axiomatic foundation is being <br>\nused, other than an exploit, rather than us grepping on some files and <br>\nus still saying, \"I wonder if this is all there is to the axiomatic <br>\nfoundation?\" I'll say more about this in reply to Mark's email.</p>\n<p>Thanks for the links.</p>\n<p>Regards,<br>\nGB</p>\n<blockquote>\n<p>N.B. Isabelle cannot yet export to these, as far as I'm aware, but Brian<br>\nHuffman wrote some code for importing from OpenTheory.</p>\n<p>On Tue, Jul 9, 2013 at 8:40 AM, Gottfried Barrow<br>\n&lt;gottfried.barrow@gmx.com&gt;wrote:</p>\n<blockquote>\n<p>Hi,</p>\n<p>I don't need this now, but in a year or two, I'd like to have a Isabelle<br>\nutility that I run on a theory which tells me what the \"foundation\" is, and<br>\nthat also can take a Thy1.thy as the base \"foundation\", and given Thy2.thy,<br>\nthe utility reports what additional \"foundation\" Thy2.thy adds to Thy1.thy.</p>\n<p>The foundation would be anything in a theory which would be axiomatic in<br>\nnature, and maybe some kind of checksum on things.</p>\n<p>Different people are motivated by Isabelle for different reasons. A big<br>\npart of my interest in Isabelle is that it's a tool which, at the very<br>\nleast, replaces the function of peer reviewed journals, to the extent that<br>\nit can. That means, at the very least, it's a huge preliminary vetting of<br>\nlogic in Theory.thy that announces to anyone interested, \"The logic in<br>\nTheory.thy has been vetted by Isabelle as being correct. It most likely<br>\nwill not be a waste of anyone's time to wade through 20,000 lines of source<br>\nin Theory.thy to figure out what it is, and to find out if it really is<br>\ncorrect.\"</p>\n<p>On a personal level, by all appearances, Isabelle can take the place of<br>\npeer reviewed journals, to the extent that it can give you confidence that<br>\nyou're not producing a bunch of logical nonsense. What Isabelle doesn't do<br>\nis solve the \"person X is trustworthy and competent\" problem on a community<br>\nlevel.</p>\n<p>I could dig through the mailing list archives and find where Larry has<br>\nsaid something like, \"You have to use Isabelle intelligently.\" And a while<br>\nback, on the HOL4 list, there was a discussion about the possibilities of<br>\npeople getting proof assistants to do something wrong for either devious<br>\nreasons or non-devious reasons. And most recently, on this very list, Falso<br>\nwas presented as a great logical break through, where, no doubt, still<br>\ntoday, many verifiers, formalizers, and sourcers, not to be confused with<br>\nsorcerers, are now full of themselves, mistaking their own logical prowess<br>\nwith the success that always comes with Falso.</p>\n<p><a href=\"https://lists.cam.ac.uk/**mailman/htdig/cl-isabelle-**\">https://lists.cam.ac.uk/**mailman/htdig/cl-isabelle-**</a><br>\nusers/2013-March/msg00165.html&lt;<a href=\"https://lists.cam.ac.uk/mailman/htdig/cl-isabelle-users/2013-March/msg00165.html\">https://lists.cam.ac.uk/mailman/htdig/cl-isabelle-users/2013-March/msg00165.html</a>&gt;</p>\n<p>Anyway, a \"what's the foundation\" utility would allow people to do a 10<br>\nsecond check on a theory as a first step, to make sure nothing obvious is<br>\nwrong, and to increase the trust factor, and even good people mess up bad<br>\nsome times.</p>\n<p>I assume that there are much more complex problems involved in proof<br>\nassistants being completely secure from being hacked, or messed up<br>\nunintentionally, but I think it would be good for a person to get a basic<br>\nrubber stamp from an official utility that generates a basic report on what<br>\nthe foundation of a theory is, and that can compare the foundation of two<br>\ntheories.</p>\n<p>No one needs to respond to this. I'm putting it out so maybe in a year or<br>\ntwo there's an Isabelle foundation report utility.</p>\n<p>Regards<br>\nGB</p>\n</blockquote>\n</blockquote>",
        "id": 294244922,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660908519
    },
    {
        "content": "<p>From: Ramana Kumar &lt;<a href=\"mailto:rk436@cam.ac.uk\">rk436@cam.ac.uk</a>&gt;<br>\nOpenTheory does allow new axioms. (OpenTheory only checks that some<br>\nconclusions follow from some axioms; you're free in the choice of<br>\nconclusions and axioms, as long as you provide the proof.)</p>\n<p>Dedukti should work both for new axioms and for type classes. It does an<br>\nencoding into a rich type theory that should support most logical<br>\nfeatures... (I'm not so sure about the details).</p>",
        "id": 294244934,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660908526
    },
    {
        "content": "<p>From: Gottfried Barrow &lt;<a href=\"mailto:gottfried.barrow@gmx.com\">gottfried.barrow@gmx.com</a>&gt;<br>\nOn 7/9/2013 5:13 AM, \"Mark\" wrote:</p>\n<blockquote>\n<p>Hi Gottfried,</p>\n<p>So you are advocating a utility that would reveal the \"foundation\" in a<br>\ntheory.  Do you envisage that this utility would have a human aspect to its<br>\nusage, reviewing that the reported foundation is good, e.g. that the \"+\"<br>\noperator really is the intended \"+\" operator, etc? By saying a \"10 second<br>\ncheck\", it suggests not, although maybe I'm missing your point.</p>\n</blockquote>\n<p>Mark,</p>\n<p>No, it's only to list anything that's being used in the theory and <br>\nlanguage that's either axiomatic, or might be axiomatic.  Also, it would <br>\ndo some easy checks to rule out the possibility of a person doing sneaky <br>\nthings, like doing checksum comparisons on third-party files a person is <br>\ndistributing with their theory, where the local third-party files would <br>\nbe obtained from the original source.</p>\n<p>If someone writes 100,000 lines of source and at the end claims to prove <br>\nthe Riemann Conjecture, the first thing you want to know is what's in <br>\ntheir THY that's axiomatic, or can't be determined to be axiomatic. The <br>\nutility is to give you that information fast.</p>\n<p>If someone's not using anything axiomatic beyond what Complex_Main gives <br>\nthem in Isabelle, then their doing stupid stuff like trying to fool <br>\npeople with deceptive notation still  wouldn't allow them to prove <br>\nsomething that's not true. It would just appear to be something <br>\ndifferent on the surface. The statement of a theorem after 50,000 lines <br>\nof source is always going to take some effort to figure out what it <br>\nproves. The utility is to let you know what the limitations there are to <br>\nthe foundation.</p>\n<blockquote>\n<p>Also, are<br>\nyou suggesting that the utility would do some form of automated check on the<br>\nfoundation of a theory, or would it just report what the foundation is?</p>\n</blockquote>\n<p>No, it would just tell me what the axiomatic foundation is for a <br>\nparticular THY, or what can't be determined in a THY to be axiomatic.</p>\n<p>Some things can't be hacked easily. Most people use distribution sources <br>\nthey've gotten from the official web sites, so you can't hack the <br>\ndistribution sources and fool anyone but people using local sources. I <br>\ndo want the utility to tell me what foundation Complex_Main gives me, <br>\nbut I'd think it's mostly about the utility reporting what people have <br>\ndone to extend Complex_Main, or done to modify third-party files that <br>\naren't part of the official distribution sources.</p>\n<p>The simple part would be listing the axioms used. You might think all I <br>\nneed to do is grep on \"axiomatization\", but in Isar, there are more than <br>\n\"axiomatization\". The latest axiomatic command in Isar I've learned <br>\nabout is \"arities\". It's not obvious at all it's an axiomatic command.</p>\n<p>Right now I'm speculating that when ML is used in Isar, it can't be <br>\ndetermined that the ML does something axiomatic unless you inspect the <br>\nML, but I wouldn't know, which is the purpose of the utility, to get an <br>\nofficial report on what the foundation is.</p>\n<p>The purpose is to make it fast, easy, and official what axiomatic <br>\nfoundation is being used in a THY. For the case where we're not <br>\ninterested in any logic proved other than what can be proved by <br>\nimporting Complex_Main, the first thing we would do is run the utility <br>\non a THY to see if that's the case.</p>\n<p>I was vague on the details because it's the Isabelle foundation people <br>\nwho know what possibly can be done axiomatically, but I came up with a <br>\nscenario:</p>\n<p>1) Person 3 releases Theory3.thy. It's distributed with Theory1.thy and <br>\nTheory2.thy, which have been released by Persons 1 and 2.</p>\n<p>2) I download Person 3's theory, and I run the Isabelle foundation <br>\nutility on it. It does a checksum comparison on Theory1.thy and <br>\nTheory2.thy with the original files which I obtained. It tells me <br>\neverything that's in Theory3.thy that's axiomatic, or can't be <br>\ndetermined to be axiomatic. Additionally, it tells me what's axiomatic <br>\nbeyond what's axiomatic in Theory1.thy and Theory2.thy</p>\n<p>Now, having obtained all that information in a couple of minutes, I can <br>\nmake an informed decision about whether I want to look at Theory1.thy. <br>\nIf I'm a professor, and Person 3 wasn't supposed to add anything <br>\naxiomatic, and they  did, they get bad grade. If I'm an employer, and <br>\nPerson 3 wasn't supposed to use anything axiomatic, and they did, they <br>\nget fired.</p>\n<p>Some of that I could do myself, but then it's not official, and I don't <br>\nknow all the details about what can be axiomatic in Isabelle, or what <br>\ncan't be determined to be axiomatic.</p>\n<p>It's not just about checking others, I want the ability to say to <br>\npeople, \"Here's an official report on the foundation I'm using, so you <br>\ncan know up front what logic my theory is based on.\"</p>\n<p>Like I said to Ramana, even a third-party verifier like yours needs to <br>\nbe able to give a basic report on what foundation is being used. If all <br>\nI'm interested in is standard HOL, then I want to know as fast as <br>\npossible whether someone's using standard HOL.</p>\n<p>Regards,<br>\nGB</p>\n<blockquote>\n<p>Mark.</p>\n<p>on 9/7/13 8:41 AM, Gottfried Barrow&lt;<a href=\"mailto:gottfried.barrow@gmx.com\">gottfried.barrow@gmx.com</a>&gt;  wrote:</p>\n<blockquote>\n<p>Hi,</p>\n<p>I don't need this now, but in a year or two, I'd like to have a Isabelle<br>\nutility that I run on a theory which tells me what the \"foundation\" is,<br>\nand that also can take a Thy1.thy as the base \"foundation\", and given<br>\nThy2.thy, the utility reports what additional \"foundation\" Thy2.thy adds<br>\nto Thy1.thy.</p>\n<p>The foundation would be anything in a theory which would be axiomatic in<br>\nnature, and maybe some kind of checksum on things.</p>\n<p>Different people are motivated by Isabelle for different reasons. A big<br>\npart of my interest in Isabelle is that it's a tool which, at the very<br>\nleast, replaces the function of peer reviewed journals, to the extent<br>\nthat it can. That means, at the very least, it's a huge preliminary<br>\nvetting of logic in Theory.thy that announces to anyone interested, \"The<br>\nlogic in Theory.thy has been vetted by Isabelle as being correct. It<br>\nmost likely will not be a waste of anyone's time to wade through 20,000<br>\nlines of source in Theory.thy to figure out what it is, and to find out<br>\nif it really is correct.\"</p>\n<p>On a personal level, by all appearances, Isabelle can take the place of<br>\npeer reviewed journals, to the extent that it can give you confidence<br>\nthat you're not producing a bunch of logical nonsense. What Isabelle<br>\ndoesn't do is solve the \"person X is trustworthy and competent\" problem<br>\non a community level.</p>\n<p>I could dig through the mailing list archives and find where Larry has<br>\nsaid something like, \"You have to use Isabelle intelligently.\" And a<br>\nwhile back, on the HOL4 list, there was a discussion about the<br>\npossibilities of people getting proof assistants to do something wrong<br>\nfor either devious reasons or non-devious reasons. And most recently, on<br>\nthis very list, Falso was presented as a great logical break through,<br>\nwhere, no doubt, still today, many verifiers, formalizers, and sourcers,<br>\nnot to be confused with sorcerers, are now full of themselves, mistaking<br>\ntheir own logical prowess with the success that always comes with Falso.</p>\n<p><a href=\"https://lists.cam.ac.uk/mailman/htdig/cl-isabelle-users/2013-March/msg00165\">https://lists.cam.ac.uk/mailman/htdig/cl-isabelle-users/2013-March/msg00165</a>.<br>\nhtml</p>\n<p>Anyway, a \"what's the foundation\" utility would allow people to do a 10<br>\nsecond check on a theory as a first step, to make sure nothing obvious<br>\nis wrong, and to increase the trust factor, and even good people mess up<br>\nbad some times.</p>\n<p>I assume that there are much more complex problems involved in proof<br>\nassistants being completely secure from being hacked, or messed up<br>\nunintentionally, but I think it would be good for a person to get a<br>\nbasic rubber stamp from an official utility that generates a basic<br>\nreport on what the foundation of a theory is, and that can compare the<br>\nfoundation of two theories.</p>\n<p>No one needs to respond to this. I'm putting it out so maybe in a year<br>\nor two there's an Isabelle foundation report utility.</p>\n<p>Regards<br>\nGB<br>\n</p>\n</blockquote>\n</blockquote>",
        "id": 294244952,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660908532
    },
    {
        "content": "<p>From: Ramana Kumar &lt;<a href=\"mailto:rk436@cam.ac.uk\">rk436@cam.ac.uk</a>&gt;<br>\nIn HOL4, every theorem (a value of type thm in ML), can be inspected to see<br>\nthe axioms used in its production.</p>\n<p>Moreover, all the theorems about any constant (such as might appear in the<br>\nconclusion of a theorem) can be retrieved, to help gain confidence in how<br>\nthe constant was defined. (For example, you could easily check that all the<br>\nconstants in some theorem were defined in standard HOL4 libraries.)</p>\n<p>I'd be surprised if analogous facilities didn't exist in Isabelle already..</p>",
        "id": 294244968,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660908538
    },
    {
        "content": "<p>From: Gottfried Barrow &lt;<a href=\"mailto:gottfried.barrow@gmx.com\">gottfried.barrow@gmx.com</a>&gt;<br>\nOn 7/9/2013 9:21 AM, Ramana Kumar wrote:</p>\n<blockquote>\n<p>In HOL4, every theorem (a value of type thm in ML), can be inspected to see<br>\nthe axioms used in its production.</p>\n<p>Moreover, all the theorems about any constant (such as might appear in the<br>\nconclusion of a theorem) can be retrieved, to help gain confidence in how<br>\nthe constant was defined. (For example, you could easily check that all the<br>\nconstants in some theorem were defined in standard HOL4 libraries.)</p>\n<p>I'd be surprised if analogous facilities didn't exist in Isabelle already..</p>\n</blockquote>\n<p>If it's easy, and a single, automated process, then I definitely want to <br>\nknow about it. But if I have ten theorems in a theory that give me 10 <br>\nfinal results, rather than one final result, then it's not easy if I <br>\nhave to manually find those 10 theorems, and type in a command, and look <br>\nat the results. I like the idea of automation, as we all do.</p>\n<p>I keep using the phrase \"or can't be determined to be axiomatic\". I say <br>\nthat because I don't assume that with ML used in a THY it's quick and <br>\neasy to automate listing any statement in the ML that's axiomatic, but <br>\nit could be easy. I try to assume less than more.</p>\n<p>What is axiomatic in logic is so important, the first thing that the <br>\nsoftware should provide for a THY is what axiomatic statements get used <br>\nin the THY, and anything axiomatic that the THY imports. I want to know <br>\nwhat others are getting for free, and I want others to know what I'm <br>\ngetting for free, and I want it all to be listed by an official utility <br>\nso we all know it's legit and official.</p>\n<p>I shouldn't have to have any expertise to answer the question, \"What's <br>\nthe axiomatic foundation of Theory.thy?\" The software should immediately <br>\nbe able to tell me, whether I understand what it tells me or not.</p>\n<p>When you study a book on axiomatic set theory, you get the axioms up <br>\nfront. You don't understand them at first, but getting them up front <br>\ncategorizes the logic you're using. We're not really interested in <br>\nZFC+Falso. It's different. We immediately skip past those theories in <br>\nthe AFP that tell us Falso is used. When they don't tell us up front <br>\nthey use Falso, we end up looking at something we're not interested in.</p>\n<p>I'm making a request which now sounds like a demand, but I just use <br>\nwhat's available, and a lot is available. On a private level, I don't <br>\nneed this at all.</p>\n<p>What I'm asking for will eventually become a priority. If thousands of <br>\npeople are using proof assistants, and they're not from some circle of <br>\ntrusted professionals, if you don't know a person, and you don't know <br>\nwhat's in their THY, you want to know immediately and effortlessly what <br>\nthey're using axiomatically, and you want the software to tell you that, <br>\nand do with automation.</p>\n<p>On 7/9/2013 8:02 AM, Ramana Kumar wrote:</p>\n<blockquote>\n<p>OpenTheory does allow new axioms. (OpenTheory only checks that some <br>\nconclusions follow from some axioms; you're free in the choice of <br>\nconclusions and axioms, as long as you provide the proof.)</p>\n<p>Dedukti should work both for new axioms and for type classes. It does <br>\nan encoding into a rich type theory that should support most logical <br>\nfeatures... (I'm not so sure about the details).</p>\n</blockquote>\n<p>The lack of one feature can make a big difference, like automatic type <br>\ncoercion, not to mention getting heavily tied into a particular library <br>\nof theorems, used with a particular proof assistant.</p>\n<p>But it's good to know that OpenTheory allows new axioms, and that <br>\nDedukti has type classes. Maybe in two years I'll be looking for some <br>\nextra verification, and by then there should be more documentation.</p>\n<p>It's hard enough to learn the language of one proof assistant. A simple <br>\nutility to report the foundation of a THY would probably satisfy me. <br>\nLike I said. I say this now just to plant a seed. And maybe someone will <br>\nsay, \"Dude, just type in print_foundation.\"</p>\n<p>Regards,<br>\nGB</p>\n<blockquote>\n<p>On Tue, Jul 9, 2013 at 3:10 PM, Gottfried Barrow<br>\n&lt;gottfried.barrow@gmx.com&gt;wrote:</p>\n<p>On 7/9/2013 5:13 AM, \"Mark\" wrote:</p>\n<blockquote>\n<blockquote>\n<p>Hi Gottfried,</p>\n<p>So you are advocating a utility that would reveal the \"foundation\" in a<br>\ntheory.  Do you envisage that this utility would have a human aspect to<br>\nits<br>\nusage, reviewing that the reported foundation is good, e.g. that the \"+\"<br>\noperator really is the intended \"+\" operator, etc? By saying a \"10 second<br>\ncheck\", it suggests not, although maybe I'm missing your point.</p>\n<p>Mark,</p>\n</blockquote>\n<p>No, it's only to list anything that's being used in the theory and<br>\nlanguage that's either axiomatic, or might be axiomatic.  Also, it would do<br>\nsome easy checks to rule out the possibility of a person doing sneaky<br>\nthings, like doing checksum comparisons on third-party files a person is<br>\ndistributing with their theory, where the local third-party files would be<br>\nobtained from the original source.</p>\n<p>If someone writes 100,000 lines of source and at the end claims to prove<br>\nthe Riemann Conjecture, the first thing you want to know is what's in their<br>\nTHY that's axiomatic, or can't be determined to be axiomatic. The utility<br>\nis to give you that information fast.</p>\n<p>If someone's not using anything axiomatic beyond what Complex_Main gives<br>\nthem in Isabelle, then their doing stupid stuff like trying to fool people<br>\nwith deceptive notation still  wouldn't allow them to prove something<br>\nthat's not true. It would just appear to be something different on the<br>\nsurface. The statement of a theorem after 50,000 lines of source is always<br>\ngoing to take some effort to figure out what it proves. The utility is to<br>\nlet you know what the limitations there are to the foundation.</p>\n<p>Also, are</p>\n<blockquote>\n<p>you suggesting that the utility would do some form of automated check on<br>\nthe<br>\nfoundation of a theory, or would it just report what the foundation is?</p>\n<p>No, it would just tell me what the axiomatic foundation is for a<br>\nparticular THY, or what can't be determined in a THY to be axiomatic.</p>\n</blockquote>\n<p>Some things can't be hacked easily. Most people use distribution sources<br>\nthey've gotten from the official web sites, so you can't hack the<br>\ndistribution sources and fool anyone but people using local sources. I do<br>\nwant the utility to tell me what foundation Complex_Main gives me, but I'd<br>\nthink it's mostly about the utility reporting what people have done to<br>\nextend Complex_Main, or done to modify third-party files that aren't part<br>\nof the official distribution sources.</p>\n<p>The simple part would be listing the axioms used. You might think all I<br>\nneed to do is grep on \"axiomatization\", but in Isar, there are more than<br>\n\"axiomatization\". The latest axiomatic command in Isar I've learned about<br>\nis \"arities\". It's not obvious at all it's an axiomatic command.</p>\n<p>Right now I'm speculating that when ML is used in Isar, it can't be<br>\ndetermined that the ML does something axiomatic unless you inspect the ML,<br>\nbut I wouldn't know, which is the purpose of the utility, to get an<br>\nofficial report on what the foundation is.</p>\n<p>The purpose is to make it fast, easy, and official what axiomatic<br>\nfoundation is being used in a THY. For the case where we're not interested<br>\nin any logic proved other than what can be proved by importing<br>\nComplex_Main, the first thing we would do is run the utility on a THY to<br>\nsee if that's the case.</p>\n<p>I was vague on the details because it's the Isabelle foundation people who<br>\nknow what possibly can be done axiomatically, but I came up with a scenario:</p>\n<p>1) Person 3 releases Theory3.thy. It's distributed with Theory1.thy and<br>\nTheory2.thy, which have been released by Persons 1 and 2.</p>\n<p>2) I download Person 3's theory, and I run the Isabelle foundation utility<br>\non it. It does a checksum comparison on Theory1.thy and Theory2.thy with<br>\nthe original files which I obtained. It tells me everything that's in<br>\nTheory3.thy that's axiomatic, or can't be determined to be axiomatic.<br>\nAdditionally, it tells me what's axiomatic beyond what's axiomatic in<br>\nTheory1.thy and Theory2.thy</p>\n<p>Now, having obtained all that information in a couple of minutes, I can<br>\nmake an informed decision about whether I want to look at Theory1.thy. If<br>\nI'm a professor, and Person 3 wasn't supposed to add anything axiomatic,<br>\nand they  did, they get bad grade. If I'm an employer, and Person 3 wasn't<br>\nsupposed to use anything axiomatic, and they did, they get fired.</p>\n<p>Some of that I could do myself, but then it's not official, and I don't<br>\nknow all the details about what can be axiomatic in Isabelle, or what can't<br>\nbe determined to be axiomatic.</p>\n<p>It's not just about checking others, I want the ability to say to people,<br>\n\"Here's an official report on the foundation I'm using, so you can know up<br>\nfront what logic my theory is based on.\"</p>\n<p>Like I said to Ramana, even a third-party verifier like yours needs to be<br>\nable to give a basic report on what foundation is being used. If all I'm<br>\ninterested in is standard HOL, then I want to know as fast as possible<br>\nwhether someone's using standard HOL.</p>\n<p>Regards,<br>\nGB</p>\n<blockquote>\n<p>Mark.</p>\n<p>on 9/7/13 8:41 AM, Gottfried Barrow&lt;gottfried.barrow@gmx.**com&lt;<a href=\"mailto:gottfried.barrow@gmx.com\">gottfried.barrow@gmx.com</a>&gt;&gt;<br>\n  wrote:</p>\n<p>Hi,</p>\n<blockquote>\n<p>I don't need this now, but in a year or two, I'd like to have a Isabelle<br>\nutility that I run on a theory which tells me what the \"foundation\" is,<br>\nand that also can take a Thy1.thy as the base \"foundation\", and given<br>\nThy2.thy, the utility reports what additional \"foundation\" Thy2.thy adds<br>\nto Thy1.thy.</p>\n<p>The foundation would be anything in a theory which would be axiomatic in<br>\nnature, and maybe some kind of checksum on things.</p>\n<p>Different people are motivated by Isabelle for different reasons. A big<br>\npart of my interest in Isabelle is that it's a tool which, at the very<br>\nleast, replaces the function of peer reviewed<br>\n[message truncated]</p>\n</blockquote>\n</blockquote>\n</blockquote>\n</blockquote>",
        "id": 294245006,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660908551
    },
    {
        "content": "<p>From: Gottfried Barrow &lt;<a href=\"mailto:gottfried.barrow@gmx.com\">gottfried.barrow@gmx.com</a>&gt;<br>\nMark,</p>\n<p>You asked me a specific question at the end your email, so I put it here <br>\nfirst, so it doesn't get lost in my noise below.</p>\n<blockquote>\n<blockquote>\n<p>Like I said to Ramana, even a third-party verifier like yours needs to<br>\nbe able to give a basic report on what foundation is being used. If all<br>\nI'm interested in is standard HOL, then I want to know as fast as<br>\npossible whether someone's using standard HOL.<br>\nCan you spell out in what sense HOL Zero does not meet your aims on this?<br>\nI'm eager to hear about any ideas for improving it.</p>\n</blockquote>\n</blockquote>\n<p>I think it's merely that you don't support Isabelle/HOL. I have no <br>\nloyalties when it comes to proof assistants. I'd abandon Isabelle <br>\ntomorrow if I found better software. But I'm not going to find anything <br>\nelse. For natural deduction based logic, there's nothing out there that <br>\ncomes close to providing the features that Isabelle provides, and it <br>\ngets better with every release.</p>\n<p>If you tell me, \"But I do support Isabelle/HOL. You can run HOL Zero on <br>\nany Isabelle/HOL theory that does anything that Isar allows you to do.\"</p>\n<p>I say, \"You do? Man, item number n of large integer M of things I've <br>\nwanted that someone has already implemented, but I didn't know about. <br>\nHere I've been asking for some basic utility when I can already run HOL <br>\nZero on my THY to verify the verifier, to check the checker, to go the <br>\nextra mile to get an automated rubber stamp of what I'm doing in logic, <br>\nlogic being a tricky deal, full of potential pitfalls, with people <br>\nneeding to have some preliminary confidence in what I've done before <br>\nthey're willing to figure out what I've done.\"</p>\n<p>On 7/9/2013 4:33 PM, \"Mark\" wrote:</p>\n<blockquote>\n<p>Hi Gottfried,</p>\n<p>I think you're advocating the \"proof auditing\" idea that I've been trying to<br>\npush in recent years.</p>\n</blockquote>\n<p>No, I'm a just a user, and I'm not remotely qualified to be involved in <br>\nthe debate over what it takes to \"verify the verifiers\". I want people <br>\nlike you to be a verifier watchdog, but I'm no more qualified to know <br>\nwhat proof auditing should entail than I am to know what it takes to <br>\nfind security holes in Java or Windows.</p>\n<p>What I'm primarily talking about is what a language can declare; I'm not <br>\nconcerned with whether the engine that implements the language has <br>\nintegrity, or can be exploited through security holes. What I'm <br>\nrequesting is simple. Given two languages, Isabelle/ML and <br>\nIsabelle/Isar, and two theories, Theory1.thy and Theory2.thy, report to <br>\nme what statements in ML and Isar are made in the theories that are <br>\naxiomatic, and anything else that someone decides to label \"the <br>\nfoundation\", and tell me what is axiomatic in Theory2.thy that goes <br>\nbeyond Theory1.thy.</p>\n<blockquote>\n<blockquote>\n<blockquote>\n<p>Do you envisage that this utility would have a human aspect to<br>\nits usage, reviewing that the reported foundation is good ....<br>\nNo, it's only to list anything that's being used in the theory and<br>\nlanguage that's either axiomatic, or might be axiomatic.<br>\nBy \"axiomatic\" are you referring to any HOL axioms, constant definitions,<br>\ntype definitions, etc (i.e. what I call \"assertions\", which is what<br>\nmathematicians call \"axioms\") made in the theory, or are you referring to<br>\njust HOL axioms (i.e. the completely unrestricted form of HOL assertion)?</p>\n</blockquote>\n</blockquote>\n</blockquote>\n<p>This is where I'm not the one who's supposed to be deciding on <br>\neverything in Isabelle/HOL, Isabelle/Isar, Isabelle/ML, and <br>\nIsabelle/Pure that deserves to be labeled \"axiomatic\".</p>\n<p>I never made any real progress in HOL4, but it appears that what is <br>\naxiomatic in HOL4 is more straightforward and obvious than what's <br>\naxiomatic in Isabelle/ML, Isabelle/Pure, and Isabelle/Isar.</p>\n<p>At the easiest level, it's keywords in Isar that are axiomatic, two of <br>\nthose keywords being \"arities\" and \"axiomatization\".</p>\n<p>I'm under the impression that Isar constants aren't axiomatic, that they <br>\ndon't allow you to prove anything other than they exist, or that they <br>\nalways return a value because HOL functions are total. There is the <br>\nundefined constant in HOL.thy \"axiomatization undefined :: 'a\", line <br>\n195, which Lars pointed out, so it looks like constants alone don't give <br>\nus anything axiomatic.</p>\n<p>As far as types, there is this statement in isar-ref.pdf:</p>\n<p>If you introduce a new type axiomatically, i.e. via typedecl and<br>\n    axiomatization, the minimum requirement is that it has a non-empty<br>\n    model, to avoid immediate collapse of the HOL logic.</p>\n<p>What does that mean in the context of what in Theory.thy is the <br>\nfoundation? I don't know completely, but I do know that I used <br>\n\"typedecl\" and left the HOL function \"eq\" undefined for my new type, and <br>\nafter I stated an axiom, my logic was inconsistent because \"eq\" wasn't <br>\ndefined for my new type. So, apparently, typedecl qualifies as being <br>\nlisted in \"the foundation\".</p>\n<p>To summarize, the utility is supposed to tell me what's axiomatic in a <br>\nTHY, so I can then tell you what's axiomatic in a THY.</p>\n<blockquote>\n<p>Don't you mean \"yes\" as the answer to my quesion?  Surely whatever<br>\nfoundation is being printed out by the utility needs to be examined in<br>\ndetail, with all its subtlety, by a human to make sure it's good foundation<br>\nrather than nonsense.  This is not a 10 seconds exercise, even with the most<br>\nuser-friendly utility imaginable.</p>\n</blockquote>\n<p>No, other than the utility reporting that the logic is inconsistent. If <br>\nsomeone puts in an axiom that will give them the Riemann Hypothesis, but <br>\nwhich isn't the Riemann Hypothesis, how is the software supposed to know <br>\nthat it's nonsense, unless it makes the logic inconsistent?</p>\n<p>You could have a black list of bogus axioms, but that's no great <br>\nfeature. Most likely, if a crackpot published a THY with 10,000 lines of <br>\nsource claiming to prove the Riemann Hypothesis, there would only be a <br>\nfew axiomatic statements in it. What's important is that the utility <br>\ntells me that on line 4500 \"axiomatization\" is used, and what the axiom <br>\nis. Or maybe \"arities\" is used in a clever way to get the result, but it <br>\ntells me about it, and it's my job to judge whether it's valid.</p>\n<p>For most people using Isabelle/HOL, it's not about whether additional <br>\naxioms are nonsense or not, it's that Isabelle/HOL shouldn't be extended <br>\naxiomatically in any way. The foundation to check any THY against is <br>\nComplex_Main.thy, and mostly, people don't want anything axiomatic <br>\nbeyond that.</p>\n<p>The nature of logic is I'm free to start with whatever axioms I want. <br>\nThe main thing is to clearly know what the foundation is, not to have <br>\nsomeone tell you that it's nonsense. What I'm asking for is a 1 day or a <br>\n1 week job. If I ask for more, no one has the time to do it.</p>\n<blockquote>\n<blockquote>\n<p>Also, it would do some easy checks to rule out the possibility of a person<br>\ndoing sneaky things, like doing checksum comparisons on third-party files<br>\na person is distributing with their theory, where the local third-party files<br>\nwould be obtained from the original source.<br>\nI don't get what you're talking about here with checksums.  Is this used by<br>\nIsabelle or something?</p>\n</blockquote>\n</blockquote>\n<p>The utility doing a checksum on a file using a known good checksum would <br>\nbe a secondary feature. This falls under \"easy integrity check\" rather <br>\nthan \"axiomatic declaration in the language\".</p>\n<p>The idea is that Trusted Person has released Hol_Extension.thy and it <br>\nhas become a standard extension of HOL, but it's not part of the <br>\nIsabelle2013 distribution, and people are distributing it with their own <br>\ntheories. I give the utility a MD5 checksum that Hol_Extension.thy is <br>\nsupposed to match when a checksum is run on the file. If it doesn't <br>\nmatch, then the person is not distributing the right file, and maybe <br>\nthey edited it.</p>\n<p>Okay, but if I have the known good  Hol_Extension.thy, then can't I just <br>\ncopy it over the one distributed? So maybe the purpose is just to try <br>\nand bust amateur  deceivers who are trying to do easy hacks.</p>\n<p>The checksum idea was just part of brainstorming on the concept of some <br>\nminimal thing that a utility could do to keep people from wasting our <br>\ntime with bogus theories.</p>\n<blockquote>\n<blockquote>\n<p>If someone writes 100,000 lines of source and at the end claims to prove<br>\nthe Riemann Conjecture, the first thing you want to know is what's in<br>\ntheir THY that's axiomatic, or can't be determined to be axiomatic. The<br>\nutility is to give you that information fast.<br>\nThis really does sound like a tool for supporting proof auditing.</p>\n</blockquote>\n</blockquote>\n<p>You would have to tell me what proof auditing is, but I don't classify <br>\nit as proof auditing. \"Proof auditing\" implies that proofs need to be <br>\nchecked because there's the possibility that the underlying software is <br>\nbeing exploited or has bugs.</p>\n<p>I use the phrase \"or can't be determined to be axiomatic,\" but I'm only <br>\nspeculating that a person might need to look at a block of ML to <br>\ndetermine whether it declares something axiomatic. The utility would <br>\nreport on ML that's used which needs to be inspected by a human, and a <br>\nperson who knows enough could decisively determine whether the ML is <br>\naxiomatic. That's what I was talking about, and just knowing about <br>\nanything that's axiomatic.</p>\n<p>If I state a axiom that gives me a proof of the Riemann Conjecture, <br>\nthere's nothing that needs to audited. The proof is correct, given the <br>\naxiom. Logically, there's no problem with the proof.</p>\n<blockquote>\n<blockquote>\n<p>If someone's not using anything axiomatic beyond what Complex_Main<br>\ngives them in Isabelle, then their doing stupid stuff like trying to fool<br>\npeople with deceptive notation still  wouldn't allow them to prove<br>\nsomething that's not true. It would just appear to be something<br>\ndifferent on the surface. The statement of a theorem after 50,000<br>\nlines of source is always going to take some effort to figure out what<br>\nit proves. The utility is to let you know what the limitations there are<br>\nto the foundation.<br>\nThat's right, the proof audit should only examine what's been used.<br>\nIntermediate stuff is irrelevant if it doesn't get used.  Specifically you<br>\nneed to be examining all axioms and definitions that get used in the proof<br>\nof t<br>\n[message truncated]</p>\n</blockquote>\n</blockquote>",
        "id": 294245038,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660908563
    },
    {
        "content": "<p>From: Gottfried Barrow &lt;<a href=\"mailto:gottfried.barrow@gmx.com\">gottfried.barrow@gmx.com</a>&gt;<br>\nSo maybe you can make it happen. People easily being able to cull out <br>\nthe bogus theories, whether logically correct due to bogus axioms, or <br>\nillogical due to exploitations and bugs, increases the chances that <br>\npeople will take their time to study the good theories, which will <br>\nalways be necessary for anything that's complicated.</p>\n<p>The potential features I've naysayed, I'm sure I would find useful.</p>\n<p>I don't see that it could be a bad thing, unless you end up like John <br>\nMacAfee:</p>\n<p><a href=\"http://arstechnica.com/tech-policy/2013/05/john-mcafee-admits-vice-revealed-his-location-when-fleeing-belize-last-year/\">http://arstechnica.com/tech-policy/2013/05/john-mcafee-admits-vice-revealed-his-location-when-fleeing-belize-last-year/</a></p>\n<p>Regards,<br>\nGB</p>",
        "id": 294245083,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660908587
    }
]