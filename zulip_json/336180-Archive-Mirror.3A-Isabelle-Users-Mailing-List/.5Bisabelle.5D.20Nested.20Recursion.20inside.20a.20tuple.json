[
    {
        "content": "<p>From: Leonor Prensa &lt;<a href=\"mailto:leonor.prensa@loria.fr\">leonor.prensa@loria.fr</a>&gt;<br>\nDear Isabelle users,</p>\n<p>we are trying to define a function that uses nested primitive recursion<br>\nbut we get the error below. We reproduce the error by using<br>\nthe example in the tutorial where the recursion is inside a list and inside<br>\na tuple (this seems to be the problem).</p>\n<p>Is there anyway we can define this kind of nested recursion?<br>\nThank you very much in advance for any tips,</p>\n<p>Ricardo Peña and Leonor Prensa</p>\n<hr>\n<p>theory Problem<br>\nimports Main<br>\nbegin</p>\n<p>datatype ('v,'f)\"term\" = Var 'v | App 'f \"(('v,'f)term \\&lt;times&gt; nat) list\"</p>\n<p>consts<br>\nsubst :: \"('v =&gt; ('v,'f)term) =&gt; ('v,'f)term =&gt; ('v,'f)term\"</p>\n<p>substs:: \"('v =&gt; ('v,'f)term) =&gt; (('v,'f)term \\&lt;times&gt; nat) list =&gt; <br>\n(('v,'f)term \\&lt;times&gt; nat) list\"</p>\n<p>primrec</p>\n<p>\"subst s (Var x) = s x\"</p>\n<p>subst_App:<br>\n\"subst s (App f ts) = App f (substs s ts)\"<br>\n\"substs s [] = []\"<br>\n\"substs s (t # ts) = (case t of (t', n) =&gt; (subst s t', n) # substs s ts)\"</p>\n<p>end</p>\n<hr>\n<p>*** Entity to be defined occurs on rhs<br>\n*** The error(s) above occurred in definition \"subst_term_def\":<br>\n*** \"subst õ∫<br>\n*** õla b. term_rec_1 (õlx s. s x) (õlf ts tsa s. App f (tsa s)) (õls. [])<br>\n*** (õlt ts ta tsa s. case t of (t', n) õﬁ (subst s t', n) # tsa s) <br>\nundefined b a\"<br>\n*** At command \"primrec\".</p>",
        "id": 294062227,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660824136
    },
    {
        "content": "<p>From: Alexander Krauss &lt;<a href=\"mailto:krauss@in.tum.de\">krauss@in.tum.de</a>&gt;<br>\nDear Leonor and Ricardo,</p>\n<p>Primrec requires that you define a separate function for the pair. The <br>\nfollowing works:</p>\n<p>consts<br>\n   subst :: \"('v =&gt; ('v,'f)term) =&gt; ('v,'f)term =&gt; ('v,'f)term\"<br>\n   substs:: \"('v =&gt; ('v,'f)term) =&gt; (('v,'f)term × nat) list =&gt; <br>\n(('v,'f)term × nat) list\"<br>\n   substp:: \"('v =&gt; ('v,'f)term) =&gt; ('v,'f)term × nat =&gt; ('v,'f)term × nat\"</p>\n<p>primrec<br>\n   \"subst s (Var x) = s x\"<br>\nsubst_App:<br>\n   \"subst s (App f ts) = App f (substs s ts)\"<br>\n   \"substs s [] = []\"<br>\n   \"substp s (t,n) = (subst s t, n)\"<br>\n   \"substs s (t # ts) = (substp s t # substs s ts)\"</p>\n<p>Instead of primrec, you could also use function/fun, which is more <br>\nliberal. For example:</p>\n<p>lemma term_size[simp]: \"(a, b) : set ts ==&gt; size a &lt; Suc <br>\nterm_nat_x_list_size ts)\"<br>\nby (induct ts) auto</p>\n<p>fun<br>\nsubst :: \"('v =&gt; ('v,'f)term) =&gt; ('v,'f)term =&gt; ('v,'f)term\"<br>\nwhere<br>\n   \"subst s (Var x) = s x\"<br>\n| \"subst s (App f ts) = App f (map (%(t,n). (subst s t, n)) ts)\"</p>\n<p>The funny lemma about size is still required in Isabelle 2007, but will <br>\nbe unnecessary in the next version.</p>\n<p>Alex</p>",
        "id": 294062590,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660824267
    },
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\nThanks Alex. My own experience with such datatypes indicates that fun <br>\nleads to simpler proofs because its induction principles avoid <br>\nsimultaneous inductions over lists.</p>\n<p>Tobias</p>\n<p>Alexander Krauss schrieb:</p>",
        "id": 294062927,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660824402
    }
]