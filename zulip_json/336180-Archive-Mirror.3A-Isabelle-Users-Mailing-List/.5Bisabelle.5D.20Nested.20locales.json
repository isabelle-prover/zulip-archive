[
    {
        "content": "<p>From: Viorel Preoteasa &lt;<a href=\"mailto:viorel.preoteasa@gmail.com\">viorel.preoteasa@gmail.com</a>&gt;<br>\nHello,</p>\n<p>I am trying to achieve the following syntactic structure:</p>\n<p>mainlocale Test =<br>\n  fixes x::nat<br>\nbegin<br>\n  ...<br>\n  mylocale AA =<br>\n    fixes y::nat<br>\n  begin<br>\n    ...<br>\n   end_mylocale<br>\n...<br>\nend_ mainlocale</p>\n<p>mainlocale declaration should behave the same as a locale declaration</p>\n<p>mylocale declaration should end  mainlocale and then it should behave like<br>\na locale declaration</p>\n<p>end_mylocale should end mylocale and it should open the context of the<br>\nmainlocale Test.</p>\n<p>end_ mainlocale should end the context of  mainlocale Test.</p>\n<p>I tried to add the following syntax for mylocale:</p>\n<p>val End = (Toplevel.exit o Toplevel.end_local_theory o<br>\nToplevel.close_target o<br>\n        Toplevel.end_proof (K Proof.end_notepad));</p>\n<p>fun begin_mylocale begin f =   Toplevel.begin_local_theory begin f o End;</p>\n<p>val _ =<br>\n  Outer_Syntax.command @{command_keyword mylocale} \"define named<br>\nspecification context\"<br>\n    (Parse.binding --<br>\n      Scan.optional (@{keyword =} |-- Parse.!!! locale_val) (([], []), [])<br>\n-- Parse.opt_begin<br>\n      &gt;&gt; (fn ((name, (expr, elems)), begin) =&gt;<br>\n            begin_mylocale  begin<br>\n            (Expression.add_locale_cmd name Binding.empty expr elems #&gt;<br>\nsnd)));</p>\n<p>where End is what seems to be done by the end keyword.</p>\n<p>However, this does not work. End seems to do more than just closing the<br>\nprevious  mainlocale declaration.</p>\n<p>Additionally, if possible, I would also like to have \"end\" keyword instead<br>\nof  end_mylocale and<br>\nend_ mainlocale.</p>\n<p>Best regards,</p>\n<p>Viorel Preoteasa</p>",
        "id": 294728777,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661187290
    }
]