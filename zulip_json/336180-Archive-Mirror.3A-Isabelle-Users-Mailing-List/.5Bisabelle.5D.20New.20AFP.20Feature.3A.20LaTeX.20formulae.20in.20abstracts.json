[
    {
        "content": "<p>From: Manuel Eberl &lt;<a href=\"mailto:eberlm@in.tum.de\">eberlm@in.tum.de</a>&gt;<br>\nDear AFP users,</p>\n<p>AFP abstracts may now contain LaTeX formulae (both inline and display).<br>\nRendering is done with MathJax and should work smoothly and consistently<br>\nin any remotely recent browser.</p>\n<p>Formulae can simply be embedded using $…$ or <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>…</mo></mrow><annotation encoding=\"application/x-tex\">…</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.123em;\"></span><span class=\"minner\">…</span></span></span></span> and most basic LaTeX<br>\nmaths commands are supported.</p>\n<p>An example can be found in the example submission:</p>\n<p><a href=\"https://www.isa-afp.org/entries/Example-Submission.html\">https://www.isa-afp.org/entries/Example-Submission.html</a></p>\n<p>For more information on this, see the submission guidelines:</p>\n<p><a href=\"https://www.isa-afp.org/submitting.html\">https://www.isa-afp.org/submitting.html</a></p>\n<p>Should there be any issues, please let me know.</p>\n<p>Enjoy!</p>\n<p>Manuel</p>",
        "id": 294826342,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661244614
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nThat is certainly an improvement.</p>\n<p>At some point the standard Isabelle document output for HTML needs to be<br>\nimproved analogously, but the underlying web technologies are still unclear to me.</p>\n<p>Instead of old-fashioned MathJax, I've seen more and more activity around<br>\nKaTeX in recent years, but these guys are very modest in there version<br>\nnumbering: <a href=\"https://github.com/KaTeX/KaTeX/releases\">https://github.com/KaTeX/KaTeX/releases</a></p>\n<p>Here is some further comparison:<br>\n<a href=\"https://www.intmath.com/cg5/katex-mathjax-comparison.php\">https://www.intmath.com/cg5/katex-mathjax-comparison.php</a></p>\n<p>Makarius</p>",
        "id": 294828676,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661245572
    },
    {
        "content": "<p>From: Manuel Eberl &lt;<a href=\"mailto:eberlm@in.tum.de\">eberlm@in.tum.de</a>&gt;<br>\nOn 09/05/2020 11:29, Makarius wrote:</p>\n<blockquote>\n<p>At some point the standard Isabelle document output for HTML needs to be<br>\nimproved analogously, but the underlying web technologies are still unclear to me.</p>\n</blockquote>\n<p>Absolutely. I personally find those PDF documents that we produce at the<br>\nmoment completely useless. They are not very readable and the arbitrary<br>\nrestriction to A4 PDFs introduces arbitrary and nonpredictable line<br>\nbreaks that make this even worse.</p>\n<p>Ideally, I think, we would have heavily hyperlinked HTML where you can<br>\nclick on stuff to get to the definition (like in Isabelle/jEdit), hover<br>\nto see information like types (like in Isabelle/jEdit), and have maths<br>\nrendered more nicely using LaTeX.</p>\n<p>I also have been wondering for a while whether we should have something<br>\nlike an optional \"handwavy output mode\", where things are printed in<br>\nmore casual notation (e.g. integrals are just printed as integrals) with<br>\nno regard for ambiguities or lost detail – just to give the user a<br>\nbetter impression of what the \"real\" content of the statement is. This<br>\nmight also make big goals more readable.</p>\n<p>But setting this sort of thing up properly is going to be a lot of work,<br>\nand we would first need more sophisticated output options in<br>\nIsabelle/jEdit (which is probably also a lot of work).</p>\n<blockquote>\n<p>Instead of old-fashioned MathJax, I've seen more and more activity around<br>\nKaTeX in recent years, but these guys are very modest in there version<br>\nnumbering: <a href=\"https://github.com/KaTeX/KaTeX/releases\">https://github.com/KaTeX/KaTeX/releases</a></p>\n</blockquote>\n<p>I don't really see what the big advantage of KaTeX is. Yes, it is<br>\nperhaps slightly faster, but not enough to make a big difference, in my<br>\nimpression. Perhaps it becomes more pronounced if you really have a huge<br>\nnumber of formulae (as would be the case for HTML export). I also got<br>\nthe impression that KaTeX is still somewhat experimental and does not<br>\nsupport everything that MathJax does.</p>\n<p>Switching MathJax for KaTeX or whatever in the AFP should be fairly easy<br>\nif we should decide to do so in the future.</p>\n<p>My personal opinion is that all these JavaScript-based solutions are<br>\nsuboptimal because 1. they rely on JavaScript and 2. it takes a while<br>\nfor the formulae to be rendered. A much better option would be<br>\ndelivering them as MathML directly (which the AFP sitegen could produce<br>\nfrom the LaTeX statically), but unfortunately, very few browsers support<br>\nMathML well. So I fear MathJax etc. is the best solution for now.</p>\n<p>Manuel</p>",
        "id": 294828687,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661245578
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nMathML is one of these technologies that \"are continuously coming\" and never<br>\narrive. I still remember it from approx. 1992:<br>\n<a href=\"https://www.w3.org/Amaya/MathExamples.html\">https://www.w3.org/Amaya/MathExamples.html</a></p>\n<p>I wonder if there is a framework for mathematical documents that is a bit more<br>\nhigh-level, that we don't have to it again from basic principles.</p>\n<p>Recently, someone pointed at <a href=\"https://dlmf.nist.gov/LaTeXML\">https://dlmf.nist.gov/LaTeXML</a> but it looks fairly<br>\nold-school at first sight.</p>\n<p>In contrast, the really fancy things appear to be mostly based on JavaScript<br>\nframeworks.</p>\n<p>Makarius</p>",
        "id": 294828719,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661245591
    },
    {
        "content": "<p>From: Manuel Eberl &lt;<a href=\"mailto:eberlm@in.tum.de\">eberlm@in.tum.de</a>&gt;<br>\nMy impression was that it's already there. Firefox supports it extremely<br>\nwell (that's why MathJax outputs MathML for Firefox). Safari's support<br>\non the other hand is still not great, last I heard.</p>\n<p>The other two big players, Google and Microsoft, decided not to support<br>\nit at all. Presumably such small companies simply do not have the<br>\nresources for such an endeavour.</p>\n<p>As always, the best standards are useless if the dominant players<br>\n(Google especially) are against them.</p>\n<p>(MathML is of course extremely verbose and can hardly be considered an<br>\ninput format. But that's not really an issue, given that you can compile<br>\nto it – which is what MathJax already does. I just think it should<br>\nhappen statically and not on the client every time you load the web page.)</p>\n<p>Manuel</p>",
        "id": 294828740,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661245602
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nI am myself an old-fashioned Firefox user, although we see a gradual<br>\nmonopolization towards Chromium.</p>\n<p>Even MicroSoft Edge is following that:<br>\n<a href=\"https://support.microsoft.com/en-us/help/4501095/download-the-new-microsoft-edge-based-on-chromium\">https://support.microsoft.com/en-us/help/4501095/download-the-new-microsoft-edge-based-on-chromium</a></p>\n<p>VSCode already has Chromium at the bottom.</p>\n<p>The java-cef project promises to embed Chromium into a regular Java GUI<br>\nenvironment: <a href=\"https://github.com/chromiumembedded/java-cef\">https://github.com/chromiumembedded/java-cef</a></p>\n<p>So there might be an indication, that everything could converge to the<br>\nChromium rendering platform rather soon. But as usual, it requires careful<br>\nresearch of the technology / sociology / ideology.</p>\n<p>Makarius</p>",
        "id": 294828753,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661245608
    },
    {
        "content": "<p>From: Pedro Sánchez Terraf &lt;<a href=\"mailto:sterraf@famaf.unc.edu.ar\">sterraf@famaf.unc.edu.ar</a>&gt;<br>\nEl 9/5/20 a las 06:44, Manuel Eberl escribió:</p>\n<blockquote>\n<p>On 09/05/2020 11:29, Makarius wrote:</p>\n<blockquote>\n<p>At some point the standard Isabelle document output for HTML needs to be<br>\nimproved analogously, but the underlying web technologies are still unclear to me.<br>\nAbsolutely. I personally find those PDF documents that we produce at the<br>\nmoment completely useless. They are not very readable and the arbitrary<br>\nrestriction to A4 PDFs introduces arbitrary and nonpredictable line<br>\nbreaks that make this even worse.</p>\n</blockquote>\n<p>Ideally, I think, we would have heavily hyperlinked HTML where you can<br>\nclick on stuff to get to the definition (like in Isabelle/jEdit), hover<br>\nto see information like types (like in Isabelle/jEdit), and have maths<br>\nrendered more nicely using LaTeX.<br>\nIndeed. I link the source code of my projects in a very primitive way <br>\n(by modifying the produced HTMLs, for example in here <br>\n&lt;<a href=\"https://cs.famaf.unc.edu.ar/~pedro/forcing/Forcing/html/Forcing_Notions.html\">https://cs.famaf.unc.edu.ar/~pedro/forcing/Forcing/html/Forcing_Notions.html</a>&gt;). <br>\nThis also alleviates the \"pink screen\" phenomenon (that you can't <br>\nCrtl-click on a definition of sources of the current running logic).</p>\n<p>I also have been wondering for a while whether we should have something<br>\nlike an optional \"handwavy output mode\", where things are printed in<br>\nmore casual notation (e.g. integrals are just printed as integrals) with<br>\nno regard for ambiguities or lost detail – just to give the user a<br>\nbetter impression of what the \"real\" content of the statement is. This<br>\nmight also make big goals more readable.</p>\n<p>Another nice feature would be (un)folding sections. If you are writing a <br>\nsensible proof document (especially math), it would be desirable to be <br>\npresented with an \"eagle's eye\" view of proofs, understandable/palatable <br>\nby specialists, and with the possibility of diving into details by <br>\nunfolding. Actually, I do not know if Isabelle documenting capabilities <br>\nallow to select what depth of an argument is to be shown.</p>\n</blockquote>",
        "id": 294828775,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661245621
    }
]