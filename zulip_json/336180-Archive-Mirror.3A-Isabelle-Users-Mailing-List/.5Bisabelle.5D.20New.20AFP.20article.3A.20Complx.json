[
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\nCOMPLX: A Verification Framework for Concurrent Imperative Programs<br>\nSidney Amani, June Andronick, Maksym Bortin, Corey Lewis, Christine Rizkallah <br>\nand Joseph Tuong</p>\n<p>We propose a concurrency reasoning framework for imperative programs, based on <br>\nthe Owicki-Gries (OG) foundational shared-variable concurrency method. Our <br>\nframework combines the approaches of Hoare-Parallel, a formalisation of OG in <br>\nIsabelle/HOL for a simple while-language, and Simpl, a generic imperative <br>\nlanguage embedded in Isabelle/HOL, allowing formal reasoning on C programs. We <br>\ndefine the Complx language, extending the syntax and semantics of Simpl with <br>\nsupport for parallel composition and synchronisation. We additionally define an <br>\nOG logic, which we prove sound w.r.t. the semantics, and a verification <br>\ncondition generator, both supporting involved low-level imperative constructs <br>\nsuch as function calls and abrupt termination. We illustrate our framework on an <br>\nexample that features exceptions, guards and function calls. We aim to then <br>\ntarget concurrent operating systems, such as the interruptible eChronos embedded <br>\noperating system for which we already have a model-level OG proof using <br>\nHoare-Parallel.</p>\n<p><a href=\"https://www.isa-afp.org/entries/Complx.shtml\">https://www.isa-afp.org/entries/Complx.shtml</a></p>\n<p>Enjoy!<br>\n<a href=\"/user_uploads/14278/TMch-KIIaLmZd56-9mjOReT8/smime.p7s\">smime.p7s</a></p>",
        "id": 294699184,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661178609
    }
]