[
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\nConcurrent Refinement Algebra and Rely Quotients<br>\nJulian Fell, Ian Hayes, Andrius Velykis</p>\n<p>The concurrent refinement algebra developed here is designed to<br>\n   provide a foundation for rely/guarantee reasoning about concurrent<br>\n   programs. The algebra builds on a complete lattice of commands by<br>\n   providing sequential composition, parallel composition and a novel<br>\n   weak conjunction operator. The weak conjunction operator coincides<br>\n   with the lattice supremum providing its arguments are non-aborting,<br>\n   but aborts if either of its arguments do. Weak conjunction provides an<br>\n   abstract version of a guarantee condition as a guarantee process. We<br>\n   distinguish between models that distribute sequential composition over<br>\n   non-deterministic choice from the left (referred to as being<br>\n   conjunctive in the refinement calculus literature) and those that<br>\n   don't. Least and greatest fixed points of monotone functions are<br>\n   provided to allow recursion and iteration operators to be added to the<br>\n   language. Additional iteration laws are available for conjunctive<br>\n   models. The rely quotient of processes c and<br>\n   i is the process that, if executed in parallel with<br>\n   i implements c. It represents an<br>\n   abstract version of a rely condition generalised to a process.</p>\n<p><a href=\"https://www.isa-afp.org/entries/Concurrent_Ref_Alg.shtml\">https://www.isa-afp.org/entries/Concurrent_Ref_Alg.shtml</a></p>\n<p>Enjoy!<br>\n<a href=\"/user_uploads/14278/avlzWaJOt86xiULwojMQNLM8/smime.p7s\">smime.p7s</a></p>",
        "id": 294704312,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661180186
    }
]