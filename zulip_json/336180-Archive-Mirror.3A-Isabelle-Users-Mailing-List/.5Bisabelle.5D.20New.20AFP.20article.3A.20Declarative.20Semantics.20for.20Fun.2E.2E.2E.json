[
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\nDeclarative Semantics for Functional Languages<br>\nJeremy Siek</p>\n<p>We present a semantics for an applied call-by-value lambda-calculus that is <br>\ncompositional, extensional, and elementary. We present four different views of <br>\nthe semantics: 1) as a relational (big-step) semantics that is not operational <br>\nbut instead declarative, 2) as a denotational semantics that does not use domain <br>\ntheory, 3) as a non-deterministic interpreter, and 4) as a variant of the <br>\nintersection type systems of the Torino group. We prove that the semantics is <br>\ncorrect by showing that it is sound and complete with respect to operational <br>\nsemantics on programs and that is sound with respect to contextual equivalence. <br>\nWe have not yet investigated whether it is fully abstract. We demonstrate that <br>\nthis approach to semantics is useful with three case studies. First, we use the <br>\nsemantics to prove correctness of a compiler optimization that inlines function <br>\napplication. Second, we adapt the semantics to the polymorphic lambda-calculus <br>\nextended with general recursion and prove semantic type soundness. Third, we <br>\nadapt the semantics to the call-by-value lambda-calculus with mutable references.<br>\nThe paper that accompanies these Isabelle theories is available on arXiv at <br>\n<a href=\"https://arxiv.org/abs/1707.03762\">https://arxiv.org/abs/1707.03762</a></p>\n<p><a href=\"https://www.isa-afp.org/entries/Decl_Sem_Fun_PL.shtml\">https://www.isa-afp.org/entries/Decl_Sem_Fun_PL.shtml</a></p>\n<p>Thanks Jeremy!<br>\n<a href=\"/user_uploads/14278/nVVP5i_sld9X9AnAyxrjQdey/smime.p7s\">smime.p7s</a></p>",
        "id": 294714484,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661183309
    }
]