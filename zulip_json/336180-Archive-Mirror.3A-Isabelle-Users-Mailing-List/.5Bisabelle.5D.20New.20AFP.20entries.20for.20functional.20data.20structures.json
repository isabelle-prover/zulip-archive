[
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\nWe have received 3 new AFP entries yesterday, among them 2 for binomial<br>\nheaps!</p>\n<p>Binomial Heaps and Skew Binomial Heaps<br>\nRene Meis, Finn Nielsen and Peter Lammich<br>\n<a href=\"http://afp.sourceforge.net/entries/Binomial-Heaps.shtml\">http://afp.sourceforge.net/entries/Binomial-Heaps.shtml</a></p>\n<p>We implement and prove correct binomial heaps and skew binomial heaps.<br>\nBoth are data-structures for priority queues. While binomial heaps have<br>\nlogarithmic findMin, deleteMin, insert, and meld operations, skew<br>\nbinomial heaps have constant time findMin, insert, and meld operations,<br>\nand only the deleteMin-operation is logarithmic. This is achieved by<br>\nusing skew links to avoid cascading linking on insert-operations, and<br>\ndata-structural bootstrapping to get constant-time findMin and meld<br>\noperations. Our implementation follows the paper by Brodal and Okasaki.</p>\n<p>Finger Trees<br>\nBenedikt Nordhoff, Stefan Körner and Peter Lammich<br>\n<a href=\"http://afp.sourceforge.net/entries/Finger-Trees.shtml\">http://afp.sourceforge.net/entries/Finger-Trees.shtml</a></p>\n<p>We implement and prove correct 2-3 finger trees. Finger trees are a<br>\ngeneral purpose data structure, that can be used to efficiently<br>\nimplement other data structures, such as priority queues. Intuitively, a<br>\nfinger tree is an annotated sequence, where the annotations are elements<br>\nof a monoid. Apart from operations to access the ends of the sequence,<br>\nthe main operation is to split the sequence at the point where a<br>\nmonotone predicate over the sum of the left part of the sequence becomes<br>\ntrue for the first time. The implementation follows the paper of Hintze<br>\nand Paterson. The code generator can be used to get efficient, verified<br>\ncode.</p>\n<p>Only in the development version of the AFP:</p>\n<p>Functional Binomial Queues<br>\nRené Neumann</p>\n<p>Priority queues are an important data structure and efficient<br>\nimplementations of them are crucial.  We implement a functional variant<br>\nof binomial queues in Isabelle/HOL and show its functional correctness.<br>\nA verification against an abstract reference specification of priority<br>\nqueues has also been attempted, but could not be achieved to the full<br>\nextent.</p>\n<p>Many thanks to the authors!</p>",
        "id": 294119855,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660839478
    }
]