[
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\nSemantics and Data Refinement of Invariant Based Programs<br>\nViorel Preoteasa and Ralph-Johan Back</p>\n<p>The invariant based programming is a technique of constructing correct<br>\nprograms by first identifying the basic situations (pre- and<br>\npost-conditions and invariants) that can occur during the execution of<br>\nthe program, and then defining the transitions and proving that they<br>\npreserve the invariants. Data refinement is a technique of building<br>\ncorrect programs working on concrete datatypes as refinements of more<br>\nabstract programs. In the theories presented here we formalize the<br>\npredicate transformer semantics for invariant based programs and their<br>\ndata refinement.<br>\n<a href=\"http://afp.sourceforge.net/entries/DataRefinementIBP.shtml\">http://afp.sourceforge.net/entries/DataRefinementIBP.shtml</a></p>\n<p>Verification of the Deutsch-Schorr-Waite Graph Marking Algorithm using<br>\nData Refinement<br>\nViorel Preoteasa and Ralph-Johan Back</p>\n<p>The verification of the Deutsch-Schorr-Waite graph marking algorithm is<br>\nused as a benchmark in many formalizations of pointer programs. The main<br>\npurpose of this mechanization is to show how data refinement of<br>\ninvariant based programs can be used in verifying practical algorithms.<br>\nThe verification starts with an abstract algorithm working on a graph<br>\ngiven by a relation {\\em next} on nodes. Gradually the abstract program<br>\nis refined into Deutsch-Schorr-Waite graph marking algorithm where only<br>\none bit per graph node of additional memory is used for marking.<br>\n<a href=\"http://afp.sourceforge.net/entries/GraphMarkingIBP.shtml\">http://afp.sourceforge.net/entries/GraphMarkingIBP.shtml</a></p>",
        "id": 294109091,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660836190
    }
]