[
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\nDavid Trachtenherz has contributed 3 new entries:</p>\n<p>Infinite Lists</p>\n<p>We introduce a theory of infinite lists in HOL formalized as functions <br>\nover naturals.<br>\n<a href=\"http://afp.sourceforge.net/entries/List-Infinite.shtml\">http://afp.sourceforge.net/entries/List-Infinite.shtml</a></p>\n<p>Interval Temporal Logic on Natural Numbers</p>\n<p>We introduce a theory of temporal logic operators using sets of natural <br>\nnumbers as time domain, formalized in a shallow embedding manner.<br>\n<a href=\"http://afp.sourceforge.net/entries/Nat-Interval-Logic.shtml\">http://afp.sourceforge.net/entries/Nat-Interval-Logic.shtml</a></p>\n<p>AutoFocus Stream Processing for Single-Clocking and Multi-Clocking Semantics</p>\n<p>We formalize the AutoFocus Semantics (a time-synchronous subset of the <br>\nFocus formalism) as stream processing functions on finite and infinite <br>\nmessage streams represented as finite/infinite lists.<br>\n<a href=\"http://afp.sourceforge.net/entries/AutoFocus-Stream.shtml\">http://afp.sourceforge.net/entries/AutoFocus-Stream.shtml</a></p>",
        "id": 294129824,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660842415
    },
    {
        "content": "<p>From: Andreas Lochbihler &lt;<a href=\"mailto:andreas.lochbihler@kit.edu\">andreas.lochbihler@kit.edu</a>&gt;<br>\nIt's great to see that people are working with infinite data structures.<br>\nHowever, there are now three different formalisations of (possibly) infinite <br>\nlists in the AFP: Lazy Lists II by Stefan Friedrich, Infinite Lists by David <br>\nTrachtenherz and Coinductive by myself. At present, they are pairwise <br>\nincompatible, and each of them has a different focus: Lazy Lists II focuses on <br>\nlists over alphabets, Infinite Lists on infinite lists, and Coinductive on <br>\ncoinductive definitions and proofs.<br>\nI think it would be great if there was just one theory similar to HOL/List that <br>\nunified these three as far as possible such that future users do not have to <br>\npick one (or reinvent their own) and relinquish the other developments.</p>\n<p>Moreover, both Coinductive and Infinite Lists contain additions to Nat_Infinity <br>\nin HOL/Library (theories Coinductive_Nat and Util_NatInf, resp.). Interestingly, <br>\nboth of them instantiate the type class minus for inat in exactly same way. <br>\nAlas, no Isabelle session can import both because that type classes can be <br>\ninstantiated only once. As Util_NatInf's setup for arithmetic is more elaborate <br>\nthan Coinductive_Nat's, I suggest to move this to Nat_Infinity in Isabelle's <br>\nlibrary. Is there anyone using Nat_Infinity with other type class <br>\ninstantiations, which would break then?</p>\n<p>Andreas</p>",
        "id": 294129897,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660842446
    },
    {
        "content": "<p>From: John Matthews &lt;<a href=\"mailto:matthews@galois.com\">matthews@galois.com</a>&gt;<br>\nI think there should be two standard theories here: one for \"infinite only\" lists, and one for \"possibly infinite\" (i.e. coinductive) lists. Infinite-only lists are more limited, but easier to reason about. There is a direct analogy here with having different theories for sets versus multisets.</p>\n<p>-john<br>\n<a href=\"/user_uploads/14278/R1Y2HJf1EMnWQVy8sWjgm3A3/smime.p7s\">smime.p7s</a></p>",
        "id": 294130043,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660842483
    }
]