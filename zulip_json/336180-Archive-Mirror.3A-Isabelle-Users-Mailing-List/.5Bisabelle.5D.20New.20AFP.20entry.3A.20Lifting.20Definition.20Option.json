[
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\nAuthor: René Thiemann</p>\n<p>We implemented a command that can be used to easily generate elements of a <br>\nrestricted type {x :: 'a. P x}, provided the definition is of the form f ys = <br>\n(if check ys then Some(generate ys :: 'a) else None) where ys is a list of <br>\nvariables y1 ... yn and check ys ==&gt; P(generate ys) can be proved.</p>\n<p>In principle, such a definition is also directly possible using the <br>\nlift_definition command. However, then this definition will not be suitable for <br>\ncode-generation. To this end, we automated a more complex construction of <br>\nJoachim Breitner which is amenable for code-generation, and where the test check <br>\nys will only be performed once. In the automation, one auxiliary type is <br>\ncreated, and Isabelle's lifting- and transfer-package is invoked several times.</p>\n<p><a href=\"http://afp.sourceforge.net/entries/Lifting_Definition_Option.shtml\">http://afp.sourceforge.net/entries/Lifting_Definition_Option.shtml</a></p>\n<p>Thanks you, René!<br>\n<a href=\"/user_uploads/14278/i5f59yuchtgW3saGZFVwYuCr/smime.p7s\">smime.p7s</a></p>",
        "id": 294317655,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660925944
    }
]