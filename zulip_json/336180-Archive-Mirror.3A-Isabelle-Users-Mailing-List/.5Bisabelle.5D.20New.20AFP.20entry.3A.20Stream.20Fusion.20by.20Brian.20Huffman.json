[
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\nStream Fusion<br>\nBrian Huffman</p>\n<p>Stream Fusion is a system for removing intermediate list structures from<br>\nHaskell programs; it consists of a Haskell library along with several<br>\ncompiler rewrite rules. (The library is available online at<br>\n<a href=\"http://www.cse.unsw.edu.au/~dons/streams.html\">http://www.cse.unsw.edu.au/~dons/streams.html</a>.</p>\n<p>These theories contain a formalization of much of the Stream Fusion<br>\nlibrary in HOLCF.  Lazy list and stream types are defined, along with<br>\ncoercions between the two types, as well as an equivalence relation for<br>\nstreams that generate the same list.  List and stream versions of map,<br>\nfilter, foldr, enumFromTo, append, zipWith, and concatMap are defined,<br>\nand the stream versions are shown to respect stream equivalence.</p>\n<p>Enjoy!<br>\nTobias</p>\n<p>PS This is the first AFP entry to build on HOLCF, HOL's extension with<br>\ndomain theory!</p>",
        "id": 294077104,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660829315
    }
]