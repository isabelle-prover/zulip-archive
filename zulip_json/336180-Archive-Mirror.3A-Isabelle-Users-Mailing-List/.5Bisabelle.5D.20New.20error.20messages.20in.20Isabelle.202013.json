[
    {
        "content": "<p>From: Alfio Martini &lt;<a href=\"mailto:alfio.martini@acm.org\">alfio.martini@acm.org</a>&gt;<br>\nDear Isabelle Users,</p>\n<p>Maybe it is just me, but I still get confused by the new error messages in<br>\nIsabelle 2013. Of course, it is already<br>\na big improvement over simply \"failed to finish proof\" from Isabelle 2012.</p>\n<p>For instance, the success of establishing a \"have\" or a \"show\" is usually<br>\nshow in the output window<br>\nwith a message like \"have fact\"  \" show fact ... successful attempt to<br>\nsolve goal by exported rule\"</p>\n<p>Now, when there´s a failure, the error message is still prefixed in the<br>\noutput window by the<br>\nvery messages we get when we are successful, as mentioned above. Besides in<br>\nthe error case, the<br>\noutput window also show after the error message that there are no subgoals<br>\n(?).</p>\n<p>I attach two images to make my point clearer.<br>\nIn this particular example, if the error message was not prefixed by<br>\n\"Successful attempt ...\", I think it would<br>\nbe much better.</p>\n<p>Is my confusion justified?</p>\n<p>Best!<br>\n<a href=\"/user_uploads/14278/jnPmOLUmnaTLK88-Z7l0gb3G/jedit-proof-sucess.PNG\">jedit-proof-sucess.PNG</a><br>\n<a href=\"/user_uploads/14278/iNa23-kUwFuhDFDJG0-y2iWn/jedit-proof-failure.PNG\">jedit-proof-failure.PNG</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/14278/jnPmOLUmnaTLK88-Z7l0gb3G/jedit-proof-sucess.PNG\" title=\"jedit-proof-sucess.PNG\"><img src=\"/user_uploads/14278/jnPmOLUmnaTLK88-Z7l0gb3G/jedit-proof-sucess.PNG\"></a></div><div class=\"message_inline_image\"><a href=\"/user_uploads/14278/iNa23-kUwFuhDFDJG0-y2iWn/jedit-proof-failure.PNG\" title=\"jedit-proof-failure.PNG\"><img src=\"/user_uploads/14278/iNa23-kUwFuhDFDJG0-y2iWn/jedit-proof-failure.PNG\"></a></div>",
        "id": 294229832,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660901883
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nOn Mon, 21 Jan 2013, Alfio Martini wrote:</p>\n<blockquote>\n<p>Maybe it is just me, but I still get confused by the new error messages <br>\nin Isabelle 2013. Of course, it is already a big improvement over simply <br>\n\"failed to finish proof\" from Isabelle 2012.</p>\n</blockquote>\n<blockquote>\n<p>Is my confusion justified?</p>\n</blockquote>\n<p>There were no reactions so far, so maybe nobody else has tried it yet.</p>\n<p>This refinement of error messages was the result of myself using the <br>\nsystem over 1-2 weeks to prepare some Isabelle tutorial last October.  At <br>\nsome point I got tired of looking up the Output again and again.  Instead <br>\nit is now possible to do quite a lot of proofs right there in the text, <br>\nwithout peeking at the goal state.  You just hover over the red squiggles <br>\nof the failed proof methods and immediately see what happened.  This is <br>\nescpecially relevant for structured Isar proofs.</p>\n<p>Output and goal states are not fully obsolete yet, but it is one more <br>\nstep to overcome them.</p>\n<blockquote>\n<p>For instance, the success of establishing a \"have\" or a \"show\" is usually<br>\nshow in the output window<br>\nwith a message like \"have fact\"  \" show fact ... successful attempt to<br>\nsolve goal by exported rule\"</p>\n<p>Now, when there´s a failure, the error message is still prefixed in the<br>\noutput window by the<br>\nvery messages we get when we are successful, as mentioned above. Besides in<br>\nthe error case, the<br>\noutput window also show after the error message that there are no subgoals<br>\n(?).</p>\n<p>I attach two images to make my point clearer.<br>\nIn this particular example, if the error message was not prefixed by<br>\n\"Successful attempt ...\", I think it would<br>\nbe much better.</p>\n</blockquote>\n<p>There are several things being mixed up in the all-inclusive Output <br>\nwindow.  The \"Successful attempt\" is just a preview of the attempt to <br>\napply the command, stemming from old TTY-times.  It is more and more <br>\ngetting in the way.</p>\n<p>Also note that there is some non-determinism stemming from the fork of <br>\n'by' steps that is now enabled by default, cf. NEWS.  That sometimes leads <br>\nto nice top-down checking of proof outlines, where the system jumps over <br>\nfailed justification.  Sometimes this does not work, due to bad timing, <br>\nand the proof text produces a lot of structural errors about displaced qed <br>\nafter a failed sub-proof.</p>\n<p>There might be also some genuine problems in the RC1 snapshot left.  Just <br>\nthe week before making it, I had to rework the error reporting once more <br>\nto avoid duplication of errors from one 'by' step to another 'by' step.</p>\n<p>I will myself look again if it is as right as possible right now, unless <br>\nsomeone else points directly to remaining drop-outs.</p>\n<p>Makarius</p>",
        "id": 294230189,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660902081
    },
    {
        "content": "<p>From: Alfio Martini &lt;<a href=\"mailto:alfio.martini@acm.org\">alfio.martini@acm.org</a>&gt;<br>\nHi Makarius.</p>\n<p>Instead it is now possible to do quite a lot of proofs right there in the<br>\n<a href=\"/user_uploads/14278/x2537v-9fQ08J1oroMvnOgLb/hover-error-message.PNG\">hover-error-message.PNG</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/14278/x2537v-9fQ08J1oroMvnOgLb/hover-error-message.PNG\" title=\"hover-error-message.PNG\"><img src=\"/user_uploads/14278/x2537v-9fQ08J1oroMvnOgLb/hover-error-message.PNG\"></a></div>",
        "id": 294230207,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660902094
    },
    {
        "content": "<p>From: Peter Lammich &lt;<a href=\"mailto:lammich@in.tum.de\">lammich@in.tum.de</a>&gt;</p>\n<blockquote>\n<p>This is great. I did not know that. I am probably being very naive here (to<br>\nput it mildly), but what appears in the<br>\nwindow that pops up when you hover over the red squiggles is what I would<br>\nexpect to appear<br>\nin the output window as well (see image attached) .</p>\n</blockquote>\n<p>I agree with Alfio. When I write proofs, I usually do this<br>\nincrementally. If, at some point, I type eg<br>\n  have foo by auto<br>\nand the proof method fails unexpectedly, I would like to immediately see<br>\nwhy, without moving my arm from the keyboard to the mouse, hover the<br>\nmouse over the text and wait for the popup.</p>\n<p>Still, this feature is better than what we have in the 2012-version,<br>\nwhere you had to go back to the \"by\" and change it to an apply, just in<br>\norder to see the remaining subgoals in the output buffer.</p>\n<p>Best,<br>\n  Peter</p>\n<blockquote>\n<p>Best!<br>\nOn Fri, Jan 25, 2013 at 2:22 PM, Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt; wrote:</p>\n<blockquote>\n<p>On Mon, 21 Jan 2013, Alfio Martini wrote:</p>\n<p>Maybe it is just me, but I still get confused by the new error messages</p>\n<blockquote>\n<p>in Isabelle 2013. Of course, it is already a big improvement over simply<br>\n\"failed to finish proof\" from Isabelle 2012.<br>\n</p>\n</blockquote>\n<p>Is my confusion justified?<br>\n&gt;</p>\n<p>There were no reactions so far, so maybe nobody else has tried it yet.</p>\n<p>This refinement of error messages was the result of myself using the<br>\nsystem over 1-2 weeks to prepare some Isabelle tutorial last October.  At<br>\nsome point I got tired of looking up the Output again and again.  Instead<br>\nit is now possible to do quite a lot of proofs right there in the text,<br>\nwithout peeking at the goal state.  You just hover over the red squiggles<br>\nof the failed proof methods and immediately see what happened.  This is<br>\nescpecially relevant for structured Isar proofs.</p>\n<p>Output and goal states are not fully obsolete yet, but it is one more step<br>\nto overcome them.</p>\n<p>For instance, the success of establishing a \"have\" or a \"show\" is usually</p>\n<blockquote>\n<p>show in the output window<br>\nwith a message like \"have fact\"  \" show fact ... successful attempt to<br>\nsolve goal by exported rule\"</p>\n<p>Now, when there愀 a failure, the error message is still prefixed in the</p>\n<p>output window by the<br>\nvery messages we get when we are successful, as mentioned above. Besides<br>\nin<br>\nthe error case, the<br>\noutput window also show after the error message that there are no subgoals<br>\n(?).</p>\n<p>I attach two images to make my point clearer.<br>\nIn this particular example, if the error message was not prefixed by<br>\n\"Successful attempt ...\", I think it would<br>\nbe much better.<br>\n</p>\n</blockquote>\n<p>There are several things being mixed up in the all-inclusive Output<br>\nwindow.  The \"Successful attempt\" is just a preview of the attempt to apply<br>\nthe command, stemming from old TTY-times.  It is more and more getting in<br>\nthe way.</p>\n<p>Also note that there is some non-determinism stemming from the fork of<br>\n'by' steps that is now enabled by default, cf. NEWS.  That sometimes leads<br>\nto nice top-down checking of proof outlines, where the system jumps over<br>\nfailed justification.  Sometimes this does not work, due to bad timing, and<br>\nthe proof text produces a lot of structural errors about displaced qed<br>\nafter a failed sub-proof.</p>\n<p>There might be also some genuine problems in the RC1 snapshot left.  Just<br>\nthe week before making it, I had to rework the error reporting once more to<br>\navoid duplication of errors from one 'by' step to another 'by' step.</p>\n<p>I will myself look again if it is as right as possible right now, unless<br>\nsomeone else points directly to remaining drop-outs.</p>\n<p>Makarius<br>\n</p>\n</blockquote>\n</blockquote>",
        "id": 294230215,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660902100
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nThe screenshot does not show the position of the cursor (or \"caret\" in <br>\nJava terminology).  Where is it actually?  The output window follows that, <br>\nin reminiscence of old-style TTY interaction where you have a single <br>\nfocus.</p>\n<p>Makarius</p>",
        "id": 294230348,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660902161
    },
    {
        "content": "<p>From: Alfio Martini &lt;<a href=\"mailto:alfio.martini@acm.org\">alfio.martini@acm.org</a>&gt;<br>\nHi Makarius,</p>\n<p>I have sent this already in a message previous to this one. The question is<br>\nsimple:<br>\nI (as many other Isabelle users, I suppose) depend very much on the output<br>\nwindow to work with<br>\nIsabelle even though I work essentially with Isar structured proofs. The<br>\nhover-over-the-scribbles<br>\nfeature is nice, but the output window is better and faster.</p>\n<p>The problem is that, in case of a problem in establishing a fact or a<br>\npending goal,<br>\nthe  output window is now displaying messages<br>\nthat show both success and failure (jedit-proof-failure) of applying a<br>\ngiven proof method , and<br>\nI think this should be avoided at all costs. If it is not possible in<br>\nIsabelle 2013, then maybe in Isabelle<br>\n2014. In the case of the error message, the output window should display<br>\nonly<br>\nthe message that appear in the image hover-error message, and not an<br>\nambiguous message as<br>\nshown  in the jedit-proof-failure image. See attachments.</p>\n<p>best!<br>\n<a href=\"/user_uploads/14278/NDbEGz89AwGTn1jXZMzJQR9U/jedit-proof-failure.PNG\">jedit-proof-failure.PNG</a><br>\n<a href=\"/user_uploads/14278/k0zhGBROwvXSWwTgy-NP_gjV/hover-error-message.PNG\">hover-error-message.PNG</a><br>\n<a href=\"/user_uploads/14278/06BhTVIcq_0wTevkK3ZBT4nS/jedit-proof-sucess.PNG\">jedit-proof-sucess.PNG</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/14278/NDbEGz89AwGTn1jXZMzJQR9U/jedit-proof-failure.PNG\" title=\"jedit-proof-failure.PNG\"><img src=\"/user_uploads/14278/NDbEGz89AwGTn1jXZMzJQR9U/jedit-proof-failure.PNG\"></a></div><div class=\"message_inline_image\"><a href=\"/user_uploads/14278/k0zhGBROwvXSWwTgy-NP_gjV/hover-error-message.PNG\" title=\"hover-error-message.PNG\"><img src=\"/user_uploads/14278/k0zhGBROwvXSWwTgy-NP_gjV/hover-error-message.PNG\"></a></div><div class=\"message_inline_image\"><a href=\"/user_uploads/14278/06BhTVIcq_0wTevkK3ZBT4nS/jedit-proof-sucess.PNG\" title=\"jedit-proof-sucess.PNG\"><img src=\"/user_uploads/14278/06BhTVIcq_0wTevkK3ZBT4nS/jedit-proof-sucess.PNG\"></a></div>",
        "id": 294230367,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660902169
    },
    {
        "content": "<p>From: Gottfried Barrow &lt;<a href=\"mailto:gottfried.barrow@gmx.com\">gottfried.barrow@gmx.com</a>&gt;<br>\nOn 1/28/2013 10:19 AM, Alfio Martini wrote:</p>\n<blockquote>\n<p>I have sent this already in a message previous to this one. The question is<br>\nsimple:<br>\nI (as many other Isabelle users, I suppose) depend very much on the output<br>\nwindow to work with<br>\nIsabelle even though I work essentially with Isar structured proofs. The<br>\nhover-over-the-scribbles<br>\nfeature is nice, but the output window is better and faster.</p>\n</blockquote>\n<p>I would hate to see the output panel ever go away for proof goals. If <br>\nanything, I'd like to see information generated there when I click on a <br>\nline for something like \"definition\", \"consts\", \"notation\", <br>\n\"abbreviation\", and get any useful information that the prover engine is <br>\nusing that gets hidden. I have these commands in:</p>\n<p>declare[[show_brackets=true]]  declare[[show_types=true]]<br>\n   declare[[names_unique=true]]   declare[[show_consts=true]]</p>\n<p>There ends up being a lot of information for a proof step, and the <br>\noutput panel allows me to fix the location and size of the window for <br>\nhow I prefer to view that information.</p>\n<p>I also get an error window popping up when I'm typing something new <br>\nbecause my syntax isn't right because I haven't finished it all.</p>\n<p>I set \"Editor Chart Delay\" to 10, but these windows keep occasionally <br>\npopping up. If I keep typing, it rings an error bell for each keystroke, <br>\nand the window is visually in the way.</p>\n<p>There's a lot of visual information that automatically gets generated, <br>\nlike an error icon in the gutter on the right, or the vertical bar going <br>\npurple on the left, and the squiggly lines of different colors, and all <br>\nthat is good.</p>\n<p>However, I would say that windows popping up to notify me of something <br>\non a frequent basis is overall a bad thing. I say more below.</p>\n<p>Makarius wrote:</p>\n<blockquote>\n<blockquote>\n<p>The screenshot does not show the position of the cursor (or \"caret\" in<br>\nJava terminology).  Where is it actually?  The output window follows that,<br>\nin reminiscence of old-style TTY interaction where you have a single focus.</p>\n</blockquote>\n</blockquote>\n<p>I wouldn't put the output panel in the category of being old-style. It's <br>\na left, right, or bottom dockable window that's part of a modern, GUI <br>\neditor. Being able to look at both the edit buffer and the output panel <br>\nat the same time at least gives it a dual focus ability.</p>\n<p>It comes down to personal preference, but I put a lot of effort into <br>\ngetting my windows all set up. With jEdit, I use a three panel view: <br>\nedit buffer, left panel, and bottom panel.</p>\n<p>It all looks nice. The popup windows are sort of ugly.</p>\n<p>And when a window pops up I wasn't expecting that tries to help me out, <br>\nwhen I don't want any help, because I don't care about the error, I <br>\ndon't really like that, and I make sure I keep a proper perspective on <br>\nhow powerful the Isabelle software is.</p>\n<p>If I hover over something to intentionally get the popup window, I like <br>\nthat, especially when it gives me useful information.</p>\n<p>The popup windows are a good addition, but I also like to control where <br>\nmy main \"information\" windows are, which, with jEdit, is docking them in <br>\na fixed location I want them to be.</p>\n<p>Regards,<br>\nGB</p>",
        "id": 294230408,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660902198
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nOn Mon, 28 Jan 2013, Gottfried Barrow wrote:</p>\n<blockquote>\n<p>I have these commands in:</p>\n<p>declare[[show_brackets=true]]  declare[[show_types=true]]<br>\n declare[[names_unique=true]]   declare[[show_consts=true]]</p>\n</blockquote>\n<p>I have worked very hard to eliminate the need for these in most practical <br>\nsituations.  You don't need this information all the time, only when <br>\nsomething is wrong.  Then you use CTRL-hover etc. to look what is there.</p>\n<blockquote>\n<p>There ends up being a lot of information for a proof step, and the <br>\noutput panel allows me to fix the location and size of the window for <br>\nhow I prefer to view that information.</p>\n</blockquote>\n<p>There is an option for \"tooltip margin\" to control the window width in a <br>\nsoft manner.  The location is determined by the location of the <br>\ninformation in the source text.  This is a very important principle of the <br>\nProver IDE, and the direction where it is moving for several years <br>\nalready.</p>\n<blockquote>\n<p>I also get an error window popping up when I'm typing something new <br>\nbecause my syntax isn't right because I haven't finished it all.</p>\n</blockquote>\n<p>This sounds more like a variation of platform-specific focus handling. <br>\nError message popups only show up for red squiggles in the text.  Maybe <br>\nyou have the mouse pointer in the way, or maybe there is some Windows snag <br>\nbehind it (I am more used to Linux and Mac OS X snags in that respect).</p>\n<blockquote>\n<p>I set \"Editor Chart Delay\" to 10, but these windows keep occasionally <br>\npopping up. If I keep typing, it rings an error bell for each keystroke, <br>\nand the window is visually in the way.</p>\n</blockquote>\n<p>See the option tooltip for what this is for.  Tooltip timing is determined <br>\nby certain Java/Swing properties, but I don't know exactly which one.</p>\n<blockquote>\n<p>I wouldn't put the output panel in the category of being old-style. It's <br>\na left, right, or bottom dockable window that's part of a modern, GUI <br>\neditor. Being able to look at both the edit buffer and the output panel <br>\nat the same time at least gives it a dual focus ability.</p>\n</blockquote>\n<p>That is old-school Proof General mode.  When developing complex formal <br>\ndocuments you need more than dual (or triple) focus, but it does not work <br>\nby putting more windows there.  One needs to make the one main window <br>\nsmarter: the source window.</p>\n<p>Makarius</p>",
        "id": 294230425,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660902210
    },
    {
        "content": "<p>From: René Neumann &lt;<a href=\"mailto:rene.neumann@in.tum.de\">rene.neumann@in.tum.de</a>&gt;<br>\nDo I understand this correctly: Eventually, the output panel will<br>\ncompletely be removed and you have to hover the mouse-pointer over<br>\neverything to get any information?</p>\n<ul>\n<li>René<br>\n<a href=\"/user_uploads/14278/0e7D0dKHxu1p0IU8NbbeAu8J/smime.p7s\">smime.p7s</a></li>\n</ul>",
        "id": 294230440,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660902221
    },
    {
        "content": "<p>From: Gottfried Barrow &lt;<a href=\"mailto:gottfried.barrow@gmx.com\">gottfried.barrow@gmx.com</a>&gt;<br>\nOn 1/28/2013 12:56 PM, Makarius wrote:</p>\n<blockquote>\n<p>On Mon, 28 Jan 2013, Gottfried Barrow wrote:</p>\n<blockquote>\n<p>I have these commands in:</p>\n<p>declare[[show_brackets=true]]  declare[[show_types=true]]<br>\n declare[[names_unique=true]]   declare[[show_consts=true]]</p>\n</blockquote>\n<p>I have worked very hard to eliminate the need for these in most <br>\npractical situations.  You don't need this information all the time, <br>\nonly when something is wrong.  Then you use CTRL-hover etc. to look <br>\nwhat is there.</p>\n</blockquote>\n<p>Makarius,</p>\n<p>But that is your personal preference, which reigns supreme in <br>\ninfluencing your decisions on what features to add or eliminate.</p>\n<p>Myself, I greatly appreciate that Isar syntax allows many implicit <br>\nmeanings, but I currently always want to see explicit typing and <br>\ngrouping used for the constants and the formulas for a proof step. It's <br>\na happy medium. I don't have to clutter up the code, but I always get to <br>\ncheck the typing and grouping without having to do anything other than <br>\nlook down at the output panel.</p>\n<p>Do do that now, if the output panel is docked at the bottom, I merely <br>\nhave to shift my eyes down to the bottom of the editor.</p>\n<blockquote>\n<blockquote>\n<p>I wouldn't put the output panel in the category of being old-style. <br>\nIt's a left, right, or bottom dockable window that's part of a <br>\nmodern, GUI editor. Being able to look at both the edit buffer and <br>\nthe output panel at the same time at least gives it a dual focus <br>\nability.</p>\n</blockquote>\n<p>That is old-school Proof General mode.  When developing complex formal <br>\ndocuments you need more than dual (or triple) focus, but it does not <br>\nwork by putting more windows there.  One needs to make the one main <br>\nwindow smarter: the source window.</p>\n</blockquote>\n<p>I have decided that this can be categorized under \"floating vs. docked <br>\nwindow preference\".</p>\n<p>Suppose the need was eliminated to display any of the proof step <br>\ninformation in the output panel. I forsee in the future that someone <br>\nwould make a request like this: \"Makarius, you know those different <br>\nkinds of popup windows that give us information? Can you make it where <br>\nwe can choose for them to be either floating or dockable? You might have <br>\nan options button which allows us to select or deselect error info, <br>\nproof info, term info, etc. \"</p>\n<p>Here, I use the specific example of Sledgehammer and Nitpick. You have <br>\nit now where we can get the output in two different places, the output <br>\npanel or by hovering the mouse over the command.</p>\n<p>But if I know I always want to see the output, and I want to see the <br>\noutput as the command is running, then what I want is a panel, docked or <br>\nfloating, that's specifically displayed for that purpose. I also want it <br>\nfixed in size and location.</p>\n<p>There's more info to be seen than can be displayed, so I like the jEdit <br>\nplugin model. You can display or not display a window for a plugin. You <br>\ncan dock or not dock a window you display. You can dock a window in 4 <br>\ndifferent places. That's a lot of options on how to display information.</p>\n<p>Old skool with improvements, along with completely new features is <br>\nsometimes the best way to go. But that's easy for me to say, and I don't <br>\nhave to implement it.</p>\n<p>Thanks,<br>\nGB</p>",
        "id": 294230441,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660902222
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nI am still confused about this confusion.  Taking the above specification <br>\nin isolation, it is already what happens in Isabelle2013-RC2: you see the <br>\nerror \"immediately\" in the output of the by command, assuming that window <br>\nis open in the old-fashioned manner; it also works Proof General.  If you <br>\ndon't have output open, then pointing at the red squiggles of \"auto\" gives <br>\nthe error more quickly.</p>\n<p>If this does not work for you, it might be a remaining problem timing <br>\nproblem, platform-specific window update problem etc.</p>\n<p>Makarius</p>",
        "id": 294230763,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660902364
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nI've categorized this as \"old-style\", \"old-fashioned\", \"old-school\". <br>\nThis is one stage before \"legacy\".  After \"legacy\" comes \"discontinued\". <br>\nThe full cycle can take many years.</p>\n<p>I am still curious to see how far the approach of augmented editing of <br>\nformal sources can be pushed for Isar proof development, leaving TTY <br>\ncommands and output windows behind. It has been the trajectory of the <br>\nProver IDE for several years already, and we are now approaching the point <br>\nwhere many technical side-conditions are settled, to make more serious <br>\nattempts at structured editing support.  Isabelle2013 is just one more <br>\nstep, but not the last one.</p>\n<p>Makarius</p>",
        "id": 294230788,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660902376
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nIt works better if you disable show_types and show_sorts by default. <br>\nIsabelle2013 will then add the annotations to <em>all</em> possible positions as <br>\nmarkup to the output, and you can hover over it to see what is there and <br>\nwhat is wrong.  If show_types / show_sorts are enabled, you get the old <br>\nbehaviour of partial printing directly in the text.</p>\n<p>The ambition in Isabelle2013 was to eliminate then need for show_types / <br>\nshow_sorts altogether -- I've got too many complaints about such options <br>\nmissing in the \"menu\".  Lets see how far it is now from 0.00001 relevance.</p>\n<p>Makarius</p>",
        "id": 294230800,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660902382
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nOn Mon, 28 Jan 2013, Gottfried Barrow wrote:</p>\n<blockquote>\n<p>I have decided that this can be categorized under \"floating vs. docked <br>\nwindow preference\".</p>\n</blockquote>\n<p>This sounds more like an aspect of the dockable window manager in jEdit. <br>\nIt is nice for what it does, but could be improved.  Unfortunetely, there <br>\nare extremely few people now picking up the challenge to make real <br>\nimprovements there.  I can understand that, because the slightest change <br>\nin window behaviour causes a lot of worries on all platforms and <br>\nlook-and-feel themes of Java/Swing.</p>\n<blockquote>\n<p>Here, I use the specific example of Sledgehammer and Nitpick. You have <br>\nit now where we can get the output in two different places, the output <br>\npanel or by hovering the mouse over the command.</p>\n<p>But if I know I always want to see the output, and I want to see the <br>\noutput as the command is running, then what I want is a panel, docked or <br>\nfloating, that's specifically displayed for that purpose. I also want it <br>\nfixed in size and location.</p>\n</blockquote>\n<p>It is merely a technical snag that the tooltip popups are not dynamically <br>\nupdated, so Output is presently the only way to get incremental output on <br>\nthe spot as it arrives.</p>\n<p>Looking at the bigger picture, the command + output mode of Sledgehammer <br>\nand Nitpick is just a historical accident.  The long-standing plan is to <br>\nprovide more direct support for \"asynchronous agents\" in the Prover IDE to <br>\nproduce feedback on the text as you write it.  Such an agent would have <br>\nits own panel somewhere to control it, although the feedback is more <br>\nlikely to appear around the text itsel, like a spell-checker; or as some <br>\nicons or bubbles indicating suggestions to the user.</p>\n<blockquote>\n<p>There's more info to be seen than can be displayed, so I like the jEdit <br>\nplugin model. You can display or not display a window for a plugin. You <br>\ncan dock or not dock a window you display. You can dock a window in 4 <br>\ndifferent places. That's a lot of options on how to display information.</p>\n</blockquote>\n<p>Note that in jEdit \"plugin\" is just some Java module loaded in a certain <br>\nway.  You probably mean \"dockable window\", the thing that is managed by <br>\nthe \"dockable window manager\".  The Isabelle plugin provides several <br>\ndockable windows: Output, Symbols, Theories etc.</p>\n<p>4 different places for docking are nice, but I can imagine much more <br>\nsophistication.  Someone made an alternative dockable window manager for <br>\njEidt called \"MyDoggy\", but it now looks unmaintained and outdated.  One <br>\ncould invest more here, but I am certainy not doing it myself.</p>\n<blockquote>\n<p>Old skool with improvements, along with completely new features is <br>\nsometimes the best way to go. But that's easy for me to say, and I don't <br>\nhave to implement it.</p>\n</blockquote>\n<p>There is always a continous ongoing process of improvements.  Keywords <br>\nlike \"new\" and \"feature\" are marked as dangerous in my vocabulary, though. <br>\nProgress requires clear concepts first and then a long way to get it <br>\nthrough in the implementation, and finally reach users.</p>\n<p>Makarius</p>",
        "id": 294230833,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660902401
    },
    {
        "content": "<p>From: René Neumann &lt;<a href=\"mailto:rene.neumann@in.tum.de\">rene.neumann@in.tum.de</a>&gt;<br>\nAm 30.01.2013 14:08, schrieb Makarius:</p>\n<blockquote>\n<blockquote>\n<p>Do I understand this correctly: Eventually, the output panel will<br>\ncompletely be removed and you have to hover the mouse-pointer over<br>\neverything to get any information?</p>\n</blockquote>\n<p>I've categorized this as \"old-style\", \"old-fashioned\", \"old-school\".<br>\nThis is one stage before \"legacy\".  After \"legacy\" comes \"discontinued\".<br>\nThe full cycle can take many years.</p>\n</blockquote>\n<p>I'll take this as a wordy \"yes, but will take some time\".</p>\n<blockquote>\n<p>I am still curious to see how far the approach of augmented editing of<br>\nformal sources can be pushed for Isar proof development, leaving TTY<br>\ncommands and output windows behind.</p>\n</blockquote>\n<p>Please keep in mind, that the good ol' TTY approach with only one single<br>\npoint of focus is not overall obsolete: When dealing with a single<br>\nproof, one normally only focuses on the lines one is writing. So if<br>\nthere will be a reasonable replacement for the output window (i.e.<br>\nimmediate display of messages), this is fine. But having to use the<br>\nmouse to get the information is not (even a hotkey for \"get message<br>\nunder cursor\" probably will be cumbersome).</p>\n<ul>\n<li>René<br>\n<a href=\"/user_uploads/14278/hVVva-mcsaWeDQazWl0cGFu0/smime.p7s\">smime.p7s</a></li>\n</ul>",
        "id": 294230842,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660902407
    },
    {
        "content": "<p>From: Lars Noschinski &lt;<a href=\"mailto:noschinl@in.tum.de\">noschinl@in.tum.de</a>&gt;<br>\nI think Peter's point is that he would not like to work with a version <br>\nof Isabelle where you cannot see directly what is happening at the <br>\nediting focus. Some of your comments like</p>\n<p>| Output and goal states are not fully obsolete yet, but it is one more<br>\n| step to overcome them.</p>\n<p>can be interpreted as wanting to remove that way of working.</p>\n<p>-- Lars</p>",
        "id": 294230855,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660902419
    },
    {
        "content": "<p>From: Lars Noschinski &lt;<a href=\"mailto:noschinl@in.tum.de\">noschinl@in.tum.de</a>&gt;<br>\nActually, I think René Neumann did a good job of explaining what I <br>\nwanted to express here.</p>\n<p>-- Lars</p>",
        "id": 294230866,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660902425
    },
    {
        "content": "<p>From: Lawrence Paulson &lt;<a href=\"mailto:lp15@cam.ac.uk\">lp15@cam.ac.uk</a>&gt;<br>\nI would like the output panel to remain, if at all possible. Having to click on something to see the current state is cumbersome, and if I understand your comment, it is only available for errors and not for inspection of an arbitrary intermediate proof state. But that's what I often want to do. Moreover, the pop-up windows are quite small and will typically need resizing.<br>\nLarry</p>",
        "id": 294230933,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660902468
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nWhen you say \"the editing focus\" and \"directly\" it already has a strong <br>\nbias towards the TTY model.  Isabelle/jEdit is moving more and more away <br>\nfrom that, as far as it becomes feasible.  I am especially interested to <br>\nsee decent Isar proof editing facilities, without the TTY side-conditions.</p>\n<p>This does not mean that the Output panel of Isabelle/jEdit will just <br>\ndisappear in the next release.  There are applications where you do need <br>\nfree-form output from commands.</p>\n<p>There are important special cases though:</p>\n<p>(1) proof development, especially structured proof development</p>\n<p>(2) feedback from ATPs via sledgehammer etc.</p>\n<p>Here I can imagine more direct user interface support than the old TTY <br>\nloop.</p>\n<p>Makarius</p>",
        "id": 294230937,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660902474
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nOn Wed, 30 Jan 2013, René Neumann wrote:</p>\n<blockquote>\n<p>Please keep in mind, that the good ol' TTY approach with only one single<br>\npoint of focus is not overall obsolete: When dealing with a single<br>\nproof, one normally only focuses on the lines one is writing.</p>\n</blockquote>\n<p>This is even before Proof General and especially before Isar proofs. Can <br>\nyou show some of your proofs that you normally do?</p>\n<p>I find it very awkward to produce structured proofs with that \"good <br>\nol'\" TTY model, or the slight variation of it in Proof General. <br>\nIsabelle/jEdit of Isabelle2013 is moving a tiny little bit forward, but <br>\nstill not there to edit proof structure directly, without funny machine <br>\nstate inspection all the time.</p>\n<blockquote>\n<p>But having to use the mouse to get the information is not (even a hotkey <br>\nfor \"get message under cursor\" probably will be cumbersome).</p>\n</blockquote>\n<p>So maybe that is a starting point to get active, and investigate <br>\npossibilities of the jEdit platform.</p>\n<p>Of course, one would also have to step back, and look conceptually on the <br>\nproblem what the message under the cursor means, bacause that is not fully <br>\ntrivial without assuming an understanding of old-style TTY command <br>\nboundaries.</p>\n<p>Or did you mean a keyboard version of \"hover over squiggles\"?</p>\n<p>Makarius</p>",
        "id": 294230953,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660902481
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nDid you try adjusting the various tooltip options in the Plugin Options / <br>\nIsabelle panel of jEdit?  It is basically a menu, were you can see what is <br>\nthere, and look at the tooltips to guess what is the purpose.</p>\n<p>Makarius</p>",
        "id": 294231004,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660902486
    },
    {
        "content": "<p>From: Alfio Martini &lt;<a href=\"mailto:alfio.martini@acm.org\">alfio.martini@acm.org</a>&gt;<br>\nHi Makarius,</p>\n<p>BTW, you can try to set \"Parallel Proofs\" to 0 (in Plugin Options /<br>\n<a href=\"/user_uploads/14278/KWpIWSuzIgPfUnqpwpnGevhH/error_test_image.PNG\">error_test_image.PNG</a><br>\n<a href=\"/user_uploads/14278/EI0My3FXaBFRP24HNsxVvixe/error_test.thy\">error_test.thy</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/14278/KWpIWSuzIgPfUnqpwpnGevhH/error_test_image.PNG\" title=\"error_test_image.PNG\"><img src=\"/user_uploads/14278/KWpIWSuzIgPfUnqpwpnGevhH/error_test_image.PNG\"></a></div>",
        "id": 294231037,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660902507
    },
    {
        "content": "<p>From: René Neumann &lt;<a href=\"mailto:rene.neumann@in.tum.de\">rene.neumann@in.tum.de</a>&gt;<br>\nAm 30.01.2013 15:47, schrieb Makarius:</p>\n<blockquote>\n<p>On Wed, 30 Jan 2013, René Neumann wrote:</p>\n<blockquote>\n<p>Please keep in mind, that the good ol' TTY approach with only one single<br>\npoint of focus is not overall obsolete: When dealing with a single<br>\nproof, one normally only focuses on the lines one is writing.</p>\n</blockquote>\n<p>This is even before Proof General and especially before Isar proofs. Can<br>\nyou show some of your proofs that you normally do?</p>\n</blockquote>\n<p>Sorry. Probably we misunderstood each other here. By TTY(-like) approach<br>\nI meant the PG-approach of feeding line by line (resp instruction by<br>\ninstruction) to the prover.</p>\n<p>If I want to proof something (especially in apply-style which sometimes<br>\npre-dates an isar-proof to get some inspiration of what the tools are<br>\nable to proof automatically), I really like to only feed command by<br>\ncommand to the prover (\"what are the goals exactly after the 'with'\",<br>\n\"what does simp remove/unfold\", \"what goals does 'induction' give\" ...).<br>\nOf course these points where I'm doing so might be scattered throughout<br>\nthe theories. So when switching between points, the new model is clearly<br>\nbetter.</p>\n<p>TL;DR: Prove one proposition (\"have\"): old model; overall approach: new<br>\nmodel.</p>\n<blockquote>\n<p>Or did you mean a keyboard version of \"hover over squiggles\"?</p>\n</blockquote>\n<p>This I meant by \"would also be cumbersome\".<br>\n<a href=\"/user_uploads/14278/G95FAuT167RM8INyXDMWUCIP/smime.p7s\">smime.p7s</a></p>",
        "id": 294231046,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660902511
    },
    {
        "content": "<p>From: Alfio Martini &lt;<a href=\"mailto:alfio.martini@acm.org\">alfio.martini@acm.org</a>&gt;<br>\n(No email body)</p>",
        "id": 294231059,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660902518
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nOn Wed, 30 Jan 2013, René Neumann wrote:</p>\n<blockquote>\n<p>I really like to only feed command by command to the prover (\"what are <br>\nthe goals exactly after the 'with'\", \"what does simp remove/unfold\",</p>\n</blockquote>\n<p>The Isabelle/Isar proof state consists of more than just goals.  For <br>\nexample, you don't want to see the goal again after 'then', 'from', 'with' <br>\netc. because they don't change it.  You might want to have some editor <br>\nsupport to rearrange such indications of 'using' facts.</p>\n<blockquote>\n<p>\"what goals does 'induction' give\" ...).</p>\n</blockquote>\n<p>That is in fact the standard example where you can see the limitations of <br>\nthe hybrid model from 2000, which is still used often today.  The \"induct\" <br>\nproof method knows much more about the structure of the proof than just <br>\nthe new subgoals than happen to pop out after it.  It could propose a <br>\ncanonical proof outline for the induction pattern straight away, with <br>\nplaceholders for typical \"by auto\" proofs to finish the cases.  You don't <br>\nneed funny print_cases commands and its output for that, just a tiny <br>\nlittle more progress in Prover IDE technology.</p>\n<p>Another example where the state output is bad are calculation proofs in <br>\nIsar.  This is a very simple and basic concept, but it becomes slightly <br>\nawkward to manage with the step-by-step approach from the old times.</p>\n<p>Makarius</p>",
        "id": 294231067,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660902523
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nOn Wed, 30 Jan 2013, Alfio Martini wrote:</p>\n<blockquote>\n<blockquote>\n<p>If I want to proof something (especially in apply-style which sometimes<br>\npre-dates an isar-proof to get some inspiration of what the tools are<br>\nable to proof automatically), I really like to only feed command by<br>\ncommand to the prover (\"what are the goals exactly after the 'with'\",<br>\n\"what does simp remove/unfold\", \"what goals does 'induction' give\" ...).</p>\n</blockquote>\n<p>I think this point is fundamental with respect to the discussion of the <br>\nelimination of the output window in the near future.</p>\n</blockquote>\n<p>Just to repeat canonical Isabelle terminology: \"old-fashioned\" -&gt; \"legacy\" <br>\n-&gt; \"eliminated\".  The present state of the output window (for goal states) <br>\nis \"old-fashioned\", and there are still more situations than I would like <br>\nto see, where it is actually needed.  It is unlikely to become legacy or <br>\neliminated in general, because some tools might always need to print <br>\nthings out of order.</p>\n<blockquote>\n<p>Apply proof scripts are essential for proof exploration and also as <br>\nmentioned by René above, to the (experimental) understanding of Isabelle <br>\nautomation proof procedures as well .</p>\n</blockquote>\n<p>Back to the very start of this thread.  The \"more informative error <br>\nmessages for Isar proof commands\" from NEWS means that is now easier to <br>\nwrite certain structured proofs without peeking at machine states all the <br>\ntime.  I did that in practice, when preparing the Isabelle/Isar course at <br>\nOrleans last October.  It worked approx. 90% in these examples.  But the <br>\nparticipants then had to do it in Isabelle2012 without this convenience of <br>\nIsabelle2013.</p>\n<p>Makarius</p>",
        "id": 294231096,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660902542
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nThe Output panel gives you a full record of all messages emitted by some <br>\ncommand transaction, essentially as a fall-back for the traditional model, <br>\nto avoid surprises that some tools don't get their information through.</p>\n<p>This also explains its redundancy for this \"by\" step that concludes a <br>\n\"show\":</p>\n<p>* \"Succesful attempt ...\"</p>\n<p>* Succesful proof state after it</p>\n<p>* Unsuccessful proof state from the forked proof</p>\n<p>Attaching more messages to the place where they belong statically, not <br>\ndynamically should clarify this further.</p>\n<p>Mentally, it might help to understand \"Output is machine state\", and be <br>\ntolerant for more internal tracing happening there than in the document <br>\nmodel as visualized in the source.</p>\n<p>It seems that in this situation the slight reforms of the Prover IDE were <br>\nnot going far enough, but such things cannot be changed in a rash manner.</p>\n<p>Makarius</p>",
        "id": 294231107,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660902548
    },
    {
        "content": "<p>From: Joachim Breitner &lt;<a href=\"mailto:breitner@kit.edu\">breitner@kit.edu</a>&gt;<br>\nHi,</p>\n<p>I haven’t tried 2013 yet, only followed the discussion, and it was not<br>\nclear to me if this is is just asking for what’s already there. But<br>\nsince you mention keyboard I’d like to add that, for the sake of the<br>\nwrists of your users, please ensure that every feature is accessible<br>\nwithout touching the mouse. Keyboard-only control is crucial for<br>\nefficient and ergonomic use of any computer application¹.</p>\n<p>Thanks,<br>\nJoachim</p>\n<p>¹ with exception, maybe, of graphical stuff. But we are not yet drawing<br>\ncommutative diagrams in Isabelle :-)<br>\n<a href=\"/user_uploads/14278/i3akJvL8jOqqhewmJ_tWDCX0/signature.asc\">signature.asc</a></p>",
        "id": 294231122,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660902554
    },
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\nAm 30/01/2013 15:39, schrieb Makarius:</p>\n<blockquote>\n<p>On Wed, 30 Jan 2013, Lars Noschinski wrote:</p>\n<blockquote>\n<blockquote>\n<p>I am still confused about this confusion. Taking the above specification<br>\nin isolation, it is already what happens in Isabelle2013-RC2: you see<br>\nthe error \"immediately\" in the output of the by command, assuming that<br>\nwindow is open in the old-fashioned manner; it also works Proof General.<br>\nIf you don't have output open, then pointing at the red squiggles of<br>\n\"auto\" gives the error more quickly.</p>\n</blockquote>\n<p>I think Peter's point is that he would not like to work with a version of<br>\nIsabelle where you cannot see directly what is happening at the editing focus.</p>\n</blockquote>\n<p>When you say \"the editing focus\" and \"directly\" it already has a strong bias<br>\ntowards the TTY model.  Isabelle/jEdit is moving more and more away from that,<br>\nas far as it becomes feasible.  I am especially interested to see decent Isar<br>\nproof editing facilities, without the TTY side-conditions.</p>\n</blockquote>\n<p>Makarius, your argument is often ideological and not ergonomic. Whenever<br>\nsomebody mentions anything reminiscent of PG or TTY, it is bad per se for you<br>\nand must be abondoned. Unfortunately, some of the points, like an editing focus<br>\nand not just \"legacy\" but have to do something with our cognitive apparatus.<br>\nWhen you are working hard on a particular goal, that is your mental focus, and<br>\nyou want zero distraction from it. (And you want a quick way to get back to it<br>\nwhen you went somewhere else.)</p>\n<p>Here are some distracting features of Isabelle jedit: When I type a proof, the<br>\nbuffer is constantly reprocessed which leads to a lot of flashing, with red<br>\nsigns coming on, which makes it harder to think about the problem. When I have<br>\nmistyped a formula, it is given a pink background with grey frames around<br>\ntokens(?). This makes the formula harder to read and correct (eg the red<br>\nsquiggle is harder to see). It is a bit like talking to somebody who keeps<br>\ninterrupting you in the middle of a sentence whenever you pause to breathe. What<br>\nI do now is to shut that other person up with the help of one of the macros<br>\nprovided here <a href=\"https://isabelle.in.tum.de/community/Extending_Isabelle/jEdit\">https://isabelle.in.tum.de/community/Extending_Isabelle/jEdit</a><br>\nuntil I am finished thinking and saying what I wanted to say.</p>\n<p>Note that my argument is a cognitive one, not based on old vs new. Or, as the<br>\nMizar guys say: Experience, not only doctrine.</p>\n<p>Tobias</p>\n<blockquote>\n<p>This does not mean that the Output panel of Isabelle/jEdit will just disappear<br>\nin the next release.  There are applications where you do need free-form output<br>\nfrom commands.</p>\n<p>There are important special cases though:</p>\n<p>(1) proof development, especially structured proof development</p>\n<p>(2) feedback from ATPs via sledgehammer etc.</p>\n<p>Here I can imagine more direct user interface support than the old TTY loop.</p>\n<p>Makarius</p>\n</blockquote>",
        "id": 294231145,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660902568
    },
    {
        "content": "<p>From: \"Tim (McKenzie) Makarios\" &lt;<a href=\"mailto:tjm1983@gmail.com\">tjm1983@gmail.com</a>&gt;<br>\nThis is also important for accessibility for blind users, for example.</p>\n<p>Tim<br>\n&lt;&gt;&lt;<br>\n<a href=\"/user_uploads/14278/HKY2Pz0TGeXw-iaR0IQnS1c-/signature.asc\">signature.asc</a></p>",
        "id": 294231180,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660902584
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nIt was David Aspinall and myself who made these things work many years <br>\nago, and we knew about the possibilities and technical side-conditions. <br>\nIt was a big thing back then, and definitely not bad.  But times are <br>\nchanging, and side-conditions what can be done.</p>\n<p>The Isabelle/jEdit document model is not so exotic, it is just <br>\nIsabelle/Isar transferred into what you see in many maintstream IDEs now, <br>\nand none of them resembles Emacs or TTY-style proof checking.  E.g. see <br>\n<a href=\"http://www.jetbrains.com/idea/\">http://www.jetbrains.com/idea/</a></p>\n<p>Isar proofs are not scripts.  Even in 1999 they were called documents <br>\nalready, despite Proof General having a \"scripting\" mode only.</p>\n<p>When I started the Prover IDE project some years ago, I made clear from <br>\nthe beginning that it is not going to be a clone of Proof General, but an <br>\nexploration of what can be done beyond the accidental side-conditions of a <br>\ncertain time.</p>\n<p>I pointed out many times, that everyone who is strongly attached to Proof <br>\nGeneral is welcome to continue its maintenance.  I am even ready to give <br>\nsome tips what needs to be done, but nothing has happened since<br>\nOctober 2011.</p>\n<p>People who are getting uneasy about too many things changing, could get <br>\nactive and do some Proof General maintenance instead.</p>\n<p>Makarius</p>",
        "id": 294231182,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660902585
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nOn Thu, 31 Jan 2013, Tim (McKenzie) Makarios wrote:</p>\n<blockquote>\n<p>On 31/01/13 06:32, Joachim Breitner wrote:</p>\n<blockquote>\n<p>But<br>\nsince you mention keyboard I’d like to add that, for the sake of the<br>\nwrists of your users, please ensure that every feature is accessible<br>\nwithout touching the mouse. Keyboard-only control is crucial for<br>\nefficient and ergonomic use of any computer application¹.</p>\n</blockquote>\n<p>This is also important for accessibility for blind users, for example.</p>\n</blockquote>\n<p>These are generic jEdit and Java GUI questions.</p>\n<p>People who feel like doing something constructive, can start investigating <br>\npossibilities, and point out concrete solutions.  There is also <br>\n<a href=\"http://sourceforge.net/projects/jedit/\">sourceforge.net/projects/jedit/</a> to organize generic jEdit development, in <br>\ncontrast to Isabelle/jEdit.</p>\n<blockquote>\n<p>From my experience with the platform side-conditions so far, it is going <br>\nto be a lot of work to get it really right, whatever it is exactly.  This <br>\nshould not be misunderstood as discouragement, just as a hint that it <br>\nrequires a lot of persistence to get tiny GUI aspects work in most <br>\nsituations.  (Everybody managed to scale his Isabelle/jEdit font-size up <br>\nand down with C-PLUS/MINUS on all platforms and national keyboards?)</p>\n</blockquote>\n<p>Makarius</p>",
        "id": 294231193,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660902591
    },
    {
        "content": "<p>From: Gottfried Barrow &lt;<a href=\"mailto:gottfried.barrow@gmx.com\">gottfried.barrow@gmx.com</a>&gt;<br>\nMakarius,</p>\n<p>I put in \"declare[[show_types=false]] declare[[show_sorts=false]]\", and <br>\nI didn't see anything extra, but I'll experiment with changing <br>\n\"show_types\" back and forth and see what happens.</p>\n<p>As far as features and ways of doing things, after I get worked up, I <br>\nthen remind myself that the ideas for all of this started many years <br>\nago, and it's not the result of ideas I have about it today. I then stop <br>\nworrying/caring, and start trying to get some work done with however it <br>\nworks. Speaking of \"many years ago\", I also keep in mind the \"engine <br>\nwork\" that started over 40 years ago.</p>\n<p>However, I make one last point, for the time being.</p>\n<p>Trying to go with the new flow, I start CNTRL+hovering. However, this <br>\nbrings up the final point: the human brain can process a massive amount <br>\nof information very fast sometimes.</p>\n<p>So when I start hovering over the formula of a theorem, I get <br>\ninformation about, I'd say, ten times slower than what I can process the <br>\ninformation, and I don't think I'm exaggerating, and I don't think I'm <br>\noutside the norm.</p>\n<p>I have a formula that's four lines long, and it has about 15 items per <br>\nline in it that can be hovered over. I start from left to right on a <br>\nline, and I drag my mouse over the items, but nothing happens other than <br>\nthey turn grey, because the tooltip doesn't respond fast enough.</p>\n<p>Well, if I'm going to drag my mouse over 45 items, then if I was writing <br>\nthe software, I would give myself the ability to hover over one item and <br>\nget a massive amount of information about all of those 45 items, where <br>\nmany of those items are duplicates, though seeing what is a a <br>\nduplication is not actually always quickly apparent.</p>\n<p>I'm not writing the software, so, today, I care more about trying to use <br>\nthe software as it is to get something done.</p>\n<p>Thanks,<br>\nGB</p>",
        "id": 294231297,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660902621
    },
    {
        "content": "<p>From: Gottfried Barrow &lt;<a href=\"mailto:gottfried.barrow@gmx.com\">gottfried.barrow@gmx.com</a>&gt;<br>\nOn 2/1/2013 1:19 PM, Makarius wrote:</p>\n<blockquote>\n<p>On Fri, 1 Feb 2013, Gottfried Barrow wrote:</p>\n<blockquote>\n<p>Microsoft gets rid of the taskbar and start button in Windows 8, and <br>\nsomeone produces a utility to put it all back.</p>\n</blockquote>\n<p>Did you try Isabelle2013-RC2 on Windows8 already?  Or anyone else?</p>\n</blockquote>\n<p>No, I don't have Windows 8, and won't be buying a new computer any time <br>\nsoon.</p>\n<p>Regards,<br>\nGB</p>\n<blockquote>\n<p>Incidently, my new Sony Vaio (normally used with Xubuntu) also has <br>\nWindows 8, and I actually like the way Microsoft disposed all this 3D <br>\neye candy. KDE for example looks now quite old-fashioned compared to <br>\nthat.</p>\n<p>I had to do some fine-tuning to make Isabelle work smoothly on <br>\nWindows8. So the question above is not just rethoric.</p>\n<p>Makarius<br>\n</p>\n</blockquote>",
        "id": 294232677,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660903260
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nSo lets take my favourite example:</p>\n<p>term \"x = x\"</p>\n<p>Here we ask the system to accept a given term formally, and produce formal <br>\noutput and markup.  The output is the tip of the iceberg that you see <br>\ndirectly, the markup is what you explore by other means, such<br>\ncolor schemes, formal tooltips etc.</p>\n<p>Note that markup is both attached to the input you give and the output <br>\nthat the system produces, but not in a fully symmetric manner.</p>\n<p>So the above will give you information about the type of variable x, which <br>\nis 'a, and its sort, which is \"type\".  You can hover over the \"type\" to <br>\nhave the system explain to you that it is in fact class \"HOL.type\", and <br>\nthen you jump to its definition following the implicit hyperlink.</p>\n<p>This means you can explore that recursively by hovering over formal input <br>\nand output -- this is now mostly uniform in Isabelle2013.  This unfolds a <br>\nmassive tree of information, or rather a large forest, by walking a few <br>\nsteps into some of its paths.</p>\n<p>Instead, if you say:</p>\n<p>declare [[show_types, show_sorts]]<br>\n   term \"x = x\"</p>\n<p>the system will interpret this as insisting in the old way: partial <br>\nannotations for some of the term positions.  There is no markup, so you <br>\ncan't explore the types, sorts.</p>\n<p>Of course, there are endless possibilities to refine this further.  An <br>\nobvious question is: What is a succinct \"digest\" (as output text) to give <br>\nyou a types / sorts environment for some formal output.  Old show_types / <br>\nshow_sorts are traditionally very crude here.  This is only a starting <br>\npoint for further reworking of these ancient mechanisms.  In particular, I <br>\nhope to see certain improvements done for current sledgehammer isar_proofs <br>\noutput to be taken into account as well.</p>\n<p>Makarius</p>",
        "id": 294235533,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660904592
    },
    {
        "content": "<p>From: Gottfried Barrow &lt;<a href=\"mailto:gottfried.barrow@gmx.com\">gottfried.barrow@gmx.com</a>&gt;<br>\nOn 2/1/2013 6:18 AM, Makarius wrote:</p>\n<blockquote>\n<p>This means you can explore that recursively by hovering over formal <br>\ninput and output -- this is now mostly uniform in Isabelle2013.  This <br>\nunfolds a massive tree of information, or rather a large forest, by <br>\nwalking a few steps into some of its paths.</p>\n</blockquote>\n<p>Thanks for the explanation. And we all know how much we love hyperlinks. <br>\nThis is definitely a \"friendly IDE\" feature you've added. It's good when <br>\ninformation comes to me via hyperlinks, rather than me having to go to <br>\nthe information.</p>\n<p>In case others might not have noticed yet, the hyperlinks are grey boxes <br>\nwith a line around them, rather than just grey boxes.</p>\n<p>But the way it works is that some people don't forgo the old for the <br>\nnew, they keep the old and use the new also. But it may be the economics <br>\nof IDEs, that the old has to be sacrificed for the new. And that's why <br>\nthere's a thriving software utility market. Microsoft gets rid of the <br>\ntaskbar and start button in Windows 8, and someone produces a utility to <br>\nput it all back.</p>\n<blockquote>\n<p>Of course, there are endless possibilities to refine this further.  An <br>\nobvious question is: What is a succinct \"digest\" (as output text) to <br>\ngive you a types / sorts environment for some formal output.  Old <br>\nshow_types / show_sorts are traditionally very crude here.  This is <br>\nonly a starting point for further reworking of these ancient <br>\nmechanisms.  In particular, I hope to see certain improvements done <br>\nfor current sledgehammer isar_proofs output to be taken into account <br>\nas well.</p>\n</blockquote>\n<p>Sounds like a lot of work.</p>\n<p>Regards,<br>\nGB</p>",
        "id": 294236328,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660904929
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nDid you try Isabelle2013-RC2 on Windows8 already?  Or anyone else?</p>\n<p>Incidently, my new Sony Vaio (normally used with Xubuntu) also has Windows <br>\n8, and I actually like the way Microsoft disposed all this 3D eye candy. <br>\nKDE for example looks now quite old-fashioned compared to that.</p>\n<p>I had to do some fine-tuning to make Isabelle work smoothly on Windows8. <br>\nSo the question above is not just rethoric.</p>\n<p>Makarius</p>",
        "id": 294236464,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660904997
    }
]