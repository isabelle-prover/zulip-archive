[
    {
        "content": "<p>From: \"Thiemann, René\" &lt;<a href=\"mailto:Rene.Thiemann@uibk.ac.at\">Rene.Thiemann@uibk.ac.at</a>&gt;<br>\nI interpret that you want to have an algorithm that given two terms s and t, you want to decide whether s &gt;KBO t holds,<br>\nwhere also all parameters of KBO are provided.</p>\n<p>Yes, such an algorithm is available. In fact, “kbo” in Isabelle is directly defined as an executable function<br>\nof type “term -&gt; term -&gt; (bool,bool)” where the two Booleans indicate whether the terms are in &gt;KBO or in &gt;=KBO relation.</p>\n<p>Best regards,<br>\nRené<br>\n<a href=\"/user_uploads/14278/AUYIp3Lp4-zAaEJgudlNLcB8/signature.asc\">signature.asc</a></p>",
        "id": 294829111,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661245774
    },
    {
        "content": "<p>From: \"Thiemann, René\" &lt;<a href=\"mailto:Rene.Thiemann@uibk.ac.at\">Rene.Thiemann@uibk.ac.at</a>&gt;<br>\nHi Jens,</p>\n<p>well definitely such a generator is not part of the AFP-entry.<br>\nNote that for KBO, it necessarily must return some infinite list or sequence.</p>\n<p>E.g., consider a signature with symbol 0(unary), 1(constant), 2(constant) which all have their own weight,<br>\nand where 1 is highest in precedence.</p>\n<p>Then in KBO we have</p>\n<p>2 &gt; 1<br>\n2 &gt; 0(1)<br>\n2 &gt; 0(0(1))<br>\n2 &gt; …</p>\n<p>so for reducing 2, you have to produce the infinite list 1, 0(1), 0(0(1)), …</p>\n<p>Best,<br>\nRené<br>\n<a href=\"/user_uploads/14278/Ci1LleegBv2H3mR418Xkr3ND/signature.asc\">signature.asc</a></p>",
        "id": 294829353,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661245891
    }
]