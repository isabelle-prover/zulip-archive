[
    {
        "content": "<p>From: \"Thiemann, René\" &lt;<a href=\"mailto:Rene.Thiemann@uibk.ac.at\">Rene.Thiemann@uibk.ac.at</a>&gt;<br>\nDear all,</p>\n<p>I’m happy to announce a new AFP-entry. It contains tools to specify and verify imperative programs in Isabelle/HOL, as well as several examples.</p>\n<p>IMP2 – Simple Program Verification in Isabelle/HOL<br>\n  by Peter Lammich and Simon Wimmer</p>\n<p>IMP2 is a simple imperative language together with Isabelle tooling to create a program verification environment in Isabelle/HOL. The tools include a C-like syntax, a verification condition generator, and Isabelle commands for the specification of programs. The framework is modular, i.e., it allows easy reuse of already proved programs within larger programs. This entry comes with a quickstart guide and a large collection of examples, spanning basic algorithms with simple proofs to more advanced algorithms and proof techniques like data refinement. Some highlights from the examples are: </p>\n<ul>\n<li>Bisection Square Root, </li>\n<li>Extended Euclid, </li>\n<li>Exponentiation by Squaring, </li>\n<li>Binary Search, </li>\n<li>Insertion Sort, </li>\n<li>Quicksort, </li>\n<li>Depth First Search.</li>\n</ul>\n<p>The abstract syntax and semantics are very simple and well-documented. They are suitable to be used in a course, as extension to the IMP language which comes with the Isabelle distribution. While this entry is limited to a simple imperative language, the ideas could be extended to more sophisticated languages.</p>\n<p>For more details, have a look at <a href=\"https://www.isa-afp.org/entries/IMP2.html\">https://www.isa-afp.org/entries/IMP2.html</a></p>\n<p>Enjoy,<br>\nRené</p>",
        "id": 294748797,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661194588
    }
]