[
    {
        "content": "<p>From: Lawrence Paulson &lt;<a href=\"mailto:lp15@cam.ac.uk\">lp15@cam.ac.uk</a>&gt;<br>\n\"Pop-refinement is an approach to stepwise refinement, carried out inside an interactive theorem prover by constructing a monotonically decreasing sequence of predicates over deeply embedded target programs. The sequence starts with a predicate that characterizes the possible implementations, and ends with a predicate that characterizes a unique program in explicit syntactic form. Pop-refinement enables more requirements (e.g. program-level and non-functional) to be captured in the initial specification and preserved through refinement. Security requirements expressed as hyperproperties (i.e. predicates over sets of traces) are always preserved by pop-refinement, unlike the popular notion of refinement as trace set inclusion. Two simple examples in Isabelle/HOL are presented, featuring program-level requirements, non-functional requirements, and hyperproperties.\"</p>\n<p>Note that this is a full paper, and not merely a proof development. It is online at <a href=\"http://afp.sourceforge.net/entries/Pop_Refinement.shtml\">http://afp.sourceforge.net/entries/Pop_Refinement.shtml</a></p>\n<p>Many thanks to Alessandro Coglio!</p>\n<p>Larry Paulson</p>",
        "id": 294283587,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660921139
    }
]