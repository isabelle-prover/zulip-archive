[
    {
        "content": "<p>From: Manuel Eberl &lt;<a href=\"mailto:eberlm@in.tum.de\">eberlm@in.tum.de</a>&gt;<br>\nSafe OCL<br>\nÂ  by Denis Nikiforov</p>\n<p>The theory is a formalization of the OCL type system, its abstract<br>\nsyntax and expression typing rules. The theory does not define a<br>\nconcrete syntax and a semantics. In contrast to Featherweight OCL, it is<br>\nbased on a deep embedding approach. The type system is defined from<br>\nscratch, it is not based on the Isabelle HOL type system.</p>\n<p>The Safe OCL distincts nullable and non-nullable types. Also the theory<br>\ngives a formal definition of safe navigation operations. The Safe OCL<br>\ntyping rules are much stricter than rules given in the OCL<br>\nspecification. It allows one to catch more errors on a type checking phase.</p>\n<p>The type theory presented is four-layered: classes, basic types, generic<br>\ntypes, errorable types. We introduce the following new types:<br>\nnon-nullable types (T[1]), nullable types (T[?]), OclSuper. OclSuper is<br>\na supertype of all other types (basic types, collections, tuples). This<br>\ntype allows us to define a total supremum function, so types form an<br>\nupper semilattice. It allows us to define rich expression typing rules<br>\nin an elegant manner.</p>\n<p>The Preliminaries Chapter of the theory defines a number of helper<br>\nlemmas for transitive closures and tuples. It defines also a generic<br>\nobject model independent from OCL. It allows one to use the theory as a<br>\nreference for formalization of analogous languages.</p>\n<p>For more details, see <a href=\"https://www.isa-afp.org/entries/Safe_OCL.html\">https://www.isa-afp.org/entries/Safe_OCL.html</a></p>\n<p>Enjoy,</p>\n<p>Manuel</p>",
        "id": 294752843,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661196122
    }
]