[
    {
        "content": "<p>From: \"Thiemann, Rene\" &lt;<a href=\"mailto:Rene.Thiemann@uibk.ac.at\">Rene.Thiemann@uibk.ac.at</a>&gt;<br>\nDear all,</p>\n<p>there is a second new AFP entry today on an interesting data structure: treaps.</p>\n<p>Enjoy,<br>\nRen√©</p>\n<p>Treaps<br>\n  by Manuel Eberl, Max Haslbeck and Tobias Nipkow</p>\n<p>A Treap is a binary tree whose nodes contain pairs consisting of some payload and an associated priority. It must have the search-tree property w.r.t. the payloads and the heap property w.r.t. the priorities. Treaps are an interesting data structure that is related to binary search trees (BSTs) in the following way: if one forgets all the priorities of a treap, the resulting BST is exactly the same as if one had inserted the elements into an empty BST in order of ascending priority. This means that a treap behaves like a BST where we can pretend the elements were inserted in a different order from the one in which they were actually inserted. </p>\n<p>In particular, by choosing these priorities at random upon insertion of an element, we can pretend that we inserted the elements in random order, so that the shape of the resulting tree is that of a random BST no matter in what order we insert the elements. This is the main result of this formalisation.</p>",
        "id": 294726541,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661186603
    },
    {
        "content": "<p>From: Lars Hupel &lt;<a href=\"mailto:hupel@in.tum.de\">hupel@in.tum.de</a>&gt;</p>\n<blockquote>\n<p>there is a second new AFP entry today on an interesting data structure: <br>\ntreaps.</p>\n</blockquote>\n<p>It also appears to be AFP entry #400!</p>\n<p>Cheers,<br>\nLars</p>",
        "id": 294726558,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661186609
    }
]