[
    {
        "content": "<p>From: Manuel Eberl &lt;<a href=\"mailto:eberlm@in.tum.de\">eberlm@in.tum.de</a>&gt;<br>\nHallo,</p>\n<p>I noticed some strange behaviour with induction over nat before: instead<br>\nof the usual 0 and Suc, the induction cases when doing induction over a<br>\nnat were suddenly called zero and plus1 in my code, and they didn't have<br>\n\"P (Suc n)\" in the induction step anymore, but \"P (n + 1)\".</p>\n<p>I discovered that the problem occurs only when I import Cong.thy and<br>\nthat Cong.thy declares an alternative induction rule for nat with these<br>\nexact case names.</p>\n<p>Is this intended behaviour? I doubt many people usually give the<br>\nexplicit induction rule they want to use when doing induction over nat<br>\n(nat_induct, I think), so if they then include Cong.thy or some theory<br>\nthat depends on it (like Binomial.thy), this will break all the Isar<br>\ninduction proofs over nat, does it not?</p>\n<p>Cheers,<br>\nManuel</p>",
        "id": 294220099,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660897004
    },
    {
        "content": "<p>From: \"Yannick DuchÃªne (Hibou57 )\" &lt;<a href=\"mailto:yannick_duchene@yahoo.fr\">yannick_duchene@yahoo.fr</a>&gt;<br>\nHave you tried to change the order of the import clauses? I remember I  <br>\nread something in Isabelle's documentation, explaining how some imports  <br>\nmust always come last (which in turn may suggest some others have to come  <br>\nbefore the last ones).</p>",
        "id": 294220102,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660897007
    },
    {
        "content": "<p>From: Manuel Eberl &lt;<a href=\"mailto:eberlm@in.tum.de\">eberlm@in.tum.de</a>&gt;<br>\nThat doesn't do anything. Consider the following minimal example:</p>\n<p>theory Test<br>\nimports Main \"~~/src/HOL/Number_Theory/Cong\"<br>\nbegin<br>\nlemma \"P (n::nat)\"<br>\nproof (induction n)<br>\nprint_cases</p>\n<p>You can swap the two imports and the result is still the same:<br>\ncases:<br>\n  zero:<br>\n    let \"?case\" = \"P 0\"<br>\n  plus1:<br>\n    fix n_<br>\n    let \"?case\" = \"P (n_ + 1)\"<br>\n    assume plus1.IH: \"P n_\" and plus1.prems:</p>",
        "id": 294220120,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660897020
    },
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\nAm 12/08/2012 01:09, schrieb Manuel Eberl:</p>\n<blockquote>\n<p>Hallo,</p>\n<p>I noticed some strange behaviour with induction over nat before: instead<br>\nof the usual 0 and Suc, the induction cases when doing induction over a<br>\nnat were suddenly called zero and plus1 in my code, and they didn't have<br>\n\"P (Suc n)\" in the induction step anymore, but \"P (n + 1)\".</p>\n<p>I discovered that the problem occurs only when I import Cong.thy and<br>\nthat Cong.thy declares an alternative induction rule for nat with these<br>\nexact case names.</p>\n<p>Is this intended behaviour? I doubt many people usually give the<br>\nexplicit induction rule they want to use when doing induction over nat<br>\n(nat_induct, I think), so if they then include Cong.thy or some theory<br>\nthat depends on it (like Binomial.thy), this will break all the Isar<br>\ninduction proofs over nat, does it not?</p>\n</blockquote>\n<p>This is the intended behaviour. Jeremy Avigad, who developed the number theory<br>\nlibrary, intended to minimize Suc in favour of +1. Now if you include (parts of)<br>\na library, you inherit such design decisions, just like you inherit all simp<br>\nrules and all syntax. Making this more modular is a long term goal.</p>\n<p>Tobias</p>\n<blockquote>\n<p>Cheers,<br>\nManuel<br>\n</p>\n</blockquote>",
        "id": 294220143,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660897041
    }
]