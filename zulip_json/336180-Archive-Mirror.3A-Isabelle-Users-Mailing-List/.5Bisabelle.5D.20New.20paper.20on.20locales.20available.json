[
    {
        "content": "<p>From: Clemens Ballarin &lt;<a href=\"mailto:ballarin@in.tum.de\">ballarin@in.tum.de</a>&gt;<br>\nDear Users of Isabelle,</p>\n<p>I'm pleased to announce a new paper on locales:</p>\n<p>Locales: a Module System for Mathematical Theories<br>\n   Journal of Automated Reasoning, Springer<br>\n<a href=\"http://dx.doi.org/10.1007/s10817-013-9284-7\">http://dx.doi.org/10.1007/s10817-013-9284-7</a></p>\n<p>I would like to use this occasion to summarize the other literature  <br>\nmost relevant to locale users:</p>\n<ul>\n<li>\n<p>The Tutorial (see <a href=\"http://isabelle.in.tum.de/documentation.html\">http://isabelle.in.tum.de/documentation.html</a>)<br>\n   This is the obvious starting point.</p>\n</li>\n<li>\n<p>The Isabelle/Isar Reference Manual<br>\n   (also see <a href=\"http://isabelle.in.tum.de/documentation.html\">http://isabelle.in.tum.de/documentation.html</a>)<br>\n   This is the complete reference to syntax and technical details of  <br>\nthe implementation (including its limitations).</p>\n</li>\n</ul>\n<p>The new paper complements the two by presenting a concise view of how  <br>\nlocales work.  For the abstract, please see below.</p>\n<p>Clemens</p>\n<hr>\n<p>Locales are a module system for managing theory hierarchies in<br>\na theorem prover through theory interpretation.  They are available<br>\nfor the theorem prover Isabelle.  In this paper, their semantics is<br>\ndefined in terms of local theories and morphisms.</p>\n<p>Locales aim at providing flexible means of extension and reuse.<br>\nTheory modules (which are called locales) may be extended by<br>\ndefinitions and theorems.  Interpretation to Isabelle's global<br>\ntheories and proof contexts is possible via morphisms.  Even the<br>\nlocale hierarchy may be changed if declared relations between locales<br>\ndo not adequately reflect logical relations, which are implied by the<br>\nlocales' specifications.</p>\n<p>By discussing their design and relating it to more commonly known<br>\nstructuring mechanisms of programming languages and provers, locales<br>\nare made accessible to a wider audience beyond the users of Isabelle.<br>\nThe discussed mechanisms include ML-style functors, type classes and<br>\nmixins (the latter are found in modern object-oriented languages).</p>",
        "id": 294239373,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660906274
    }
]