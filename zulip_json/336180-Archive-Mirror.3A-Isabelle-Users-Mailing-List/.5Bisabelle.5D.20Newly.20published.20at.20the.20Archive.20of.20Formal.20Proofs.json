[
    {
        "content": "<p>From: Lawrence Paulson &lt;<a href=\"mailto:lp15@cam.ac.uk\">lp15@cam.ac.uk</a>&gt;<br>\nMany thanks to Daniel Wasserrab for his contribution to the Archive of  <br>\nFormal Proofs, <a href=\"http://afp.sourceforge.net/\">http://afp.sourceforge.net/</a>, entitled \"Towards  <br>\nCertified Slicing\". Abstract appears below.</p>\n<p>Larry Paulson</p>\n<p>Slicing is a widely-used technique with applications in e.g. compiler<br>\ntechnology and software security. Thus verification of<br>\nalgorithms in these areas is often based on the correctness of slicing,<br>\nwhich should ideally be proven independent of concrete programming<br>\nlanguages and with the help of well-known verifying techniques such as<br>\nproof assistants. As a first step in this direction, this contribution<br>\npresents a framework for dynamic and static intraprocedural slicing<br>\nbased on control flow and program dependence graphs.<br>\nAbstracting from concrete syntax we base the framework on a graph<br>\nrepresentation of the program fulfilling certain structural<br>\nand well-formedness properties.</p>\n<p>The formalization consists of the basic framework (in subdirectory  <br>\nBasic/), the correctness proof for dynamic slicing (in subdirectory  <br>\nDynamic/), the correctness proof for static intraprocedural slicing  <br>\n(in subdirectory StaticIntra/) and an instantiation of the framework  <br>\nwith a simple While language (in subdirectory While/). For more  <br>\ninformation on the framework and dynamic slicing, see the TPHOLS 2008  <br>\npaper by Wasserrab and Lochbihler.</p>",
        "id": 294066425,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660825586
    }
]