[
    {
        "content": "<p>From: Denis Lohner &lt;<a href=\"mailto:denis.lohner@kit.edu\">denis.lohner@kit.edu</a>&gt;<br>\nDear Nitpick developers,</p>\n<p>a student of mine recently came up with an example where Nitpick<br>\nproduces a genuine counterexample for the following (easily provable) lemma:</p>\n<p>theory Scratch imports \"$AFP/Coinductive/Coinductive\" begin</p>\n<p>lemma \"ltake ∞ xs = xs\"<br>\n  nitpick [expect = none]<br>\n  by (rule ltake_all) simp</p>\n<p>end</p>\n<p>I'm not sure if this case is covered by Section 8 \"Known Bugs and<br>\nLimitations\" in the Nitpick Userguide, so I decided to post the example<br>\nanyway.</p>\n<p>Denis<br>\n<a href=\"/user_uploads/14278/xxP4gcHbpLfKx2mDcBpBKUSa/smime.p7s\">smime.p7s</a></p>",
        "id": 294641566,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661162321
    },
    {
        "content": "<p>From: David Cock &lt;<a href=\"mailto:david.cock@inf.ethz.ch\">david.cock@inf.ethz.ch</a>&gt;<br>\nDo you mean a spurious counterexample?  If it's a lemma, there shouldn't <br>\nbe any genuine counterexamples.</p>\n<p>David</p>",
        "id": 294641573,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661162323
    },
    {
        "content": "<p>From: Jasmin Blanchette &lt;<a href=\"mailto:jasmin.blanchette@inria.fr\">jasmin.blanchette@inria.fr</a>&gt;<br>\nDear Denis,</p>\n<p>Thanks for posting it! It is indeed a genuine counterexample to the soundness of Nitpick. I will look into it.</p>\n<p>Appeal to the mailing list: Nitpick is not supposed to produce spurious counterexamples (except when it warns you about a “potentially spurious” counterexample in its message already). If you run into cases like the one reported by Denis, this is not normal and I would love to have a reproducible example.</p>\n<p>Jasmin</p>",
        "id": 294641724,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661162397
    },
    {
        "content": "<p>From: Jasmin Blanchette &lt;<a href=\"mailto:jasmin.blanchette@inria.fr\">jasmin.blanchette@inria.fr</a>&gt;<br>\nDear Denis,</p>\n<p>The issue is related to “enat”. When “Coinductive” is loaded, “enat” is suddenly viewed as a codatatype, with two constructors (0 and eSuc). However, the old constructors and the old case constant still lie around and confuse Nitpick.</p>\n<p>This aspect of the Nitpick code is very messy, and there has been a long history of bugs related to types that present several views to their users (starting with the user-level typedef definition). I looked into it for about one hour but couldn’t find a satisfactory solution — I could solve the unsoundness, but only at the cost of gross imprecision that maybe causes more harm than good.</p>\n<p>Instead, I am more inclined to leave things as they are and to think through the issue for Nitpick’s planned successor, Nunchaku. But perhaps I’ll find a solution for Nitpick too.</p>\n<p>Thank you nonetheless for your report, and please report any future Nitpick bugs you run into on problems not involving “enat”.</p>\n<p>Cheers,</p>\n<p>Jasmin</p>",
        "id": 294642057,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661162519
    }
]