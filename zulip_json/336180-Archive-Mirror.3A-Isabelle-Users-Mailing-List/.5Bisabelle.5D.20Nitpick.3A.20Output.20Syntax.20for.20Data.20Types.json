[
    {
        "content": "<p>From: Tjark Weber &lt;<a href=\"mailto:tjark.weber@it.uu.se\">tjark.weber@it.uu.se</a>&gt;<br>\nJasmin (et al.),</p>\n<p>Consider the following minimal example:</p>\n<p>theory Scratch imports Main<br>\nbegin<br>\n  datatype t = A | B<br>\n  lemma \"(x::t) = y\"<br>\n    nitpick<br>\n  oops<br>\nend</p>\n<p>Here, the output that I get from Nitpick is \"x = t⇩1 y = t⇩2\". I would<br>\nhave preferred to see, e.g., \"x = A y = B\". </p>\n<p>Incidentally, the latter is what (the now-ancient) Refute prints. And<br>\neven Nitpick uses proper constructor names when the lemma is \"x = A\".</p>\n<p>Best,<br>\nTjark</p>",
        "id": 294277233,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660919176
    },
    {
        "content": "<p>From: Jasmin Blanchette &lt;<a href=\"mailto:jasmin.blanchette@gmail.com\">jasmin.blanchette@gmail.com</a>&gt;<br>\nHi Tjark,</p>\n<p>This is due to an optimization. If the constructors don't appear in the problem (including definitional axioms etc.), Nitpick treats the datatype as an uninterpreted type (but with the right cardinality constraints), thereby keeping the translation simple. It would be possible for Nitpick to generate some constructor terms instead of t1 and t2, but apart from the fact that it's simpler to generate t1 and t2, I find the added generality nicer, because it indicates that the actual choice of values is irrelevant.</p>\n<p>Cheers,</p>\n<p>Jasmin</p>",
        "id": 294277250,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660919182
    },
    {
        "content": "<p>From: Tjark Weber &lt;<a href=\"mailto:tjark.weber@it.uu.se\">tjark.weber@it.uu.se</a>&gt;<br>\nI agree that this is often the more useful bit of information; but it's<br>\nless clear to me that when the optimization applies, the user never<br>\nwants to see constructor terms. For instance, consider</p>\n<p>lemma \"(x::bool⇒bool) = y\" nitpick oops</p>\n<p>versus</p>\n<p>datatype t = T \"bool ⇒ bool\"<br>\n  lemma \"(x::t) = y\" nitpick oops</p>\n<p>If you had nothing else to do, I would suggest adding an option to show<br>\nthe constructor terms on demand. But I'll admit that this is not a<br>\nparticularly important issue.</p>\n<p>Best,<br>\nTjark</p>",
        "id": 294277263,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660919189
    }
]