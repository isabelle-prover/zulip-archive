[
    {
        "content": "<p>From: Gottfried Barrow &lt;<a href=\"mailto:gottfried.barrow@gmx.com\">gottfried.barrow@gmx.com</a>&gt;<br>\nHi,</p>\n<p>It was using \"declare[[blast_trace=false]]\" and <br>\n\"declare[[blast_stats=false]]\" with Isabelle2013 that showed me that <br>\nauto sometimes calls blast, but those traces cause an error now. Did <br>\nanything replace them?</p>\n<p>I use that as an excuse to point out that these traces can help educate <br>\na man, and I ask here if there's some kind of trace that will give me <br>\nsome details about what the \"assumption\" method is doing.</p>\n<p>I give here two proofs of the same statement:</p>\n<p>(<em>1</em>)<br>\ntheorem \"(P ==&gt; (Q ==&gt; ((P ==&gt; (Q ==&gt; (!!(P::prop). PROP P))) ==&gt; <br>\n(!!(P::prop). PROP P))))\"<br>\n   by(assumption)<br>\n(<em>2</em>)<br>\ntheorem \"(P ==&gt; (Q ==&gt; ((P ==&gt; (Q ==&gt; (!!(P::prop). PROP P))) ==&gt; <br>\n(!!(P::prop). PROP P))))\"<br>\n   apply(simp del: True_implies_equals)<br>\n   by(simp only: True_implies_equals)<br>\n   (* lemma True_implies_equals: \"(True ==&gt; PROP P) == PROP P\"  *)</p>\n<p>The formula \"(P ==&gt; (Q ==&gt; (!!(P::prop). PROP P))) ==&gt; (!!(P::prop). <br>\nPROP P)))\" is a conjunction, and I'm having to work hard to try and <br>\nprevent the automatic proof methods from proving things using too much HOL.</p>\n<p>The proof for (<em>2</em>) is undesirable, but the proof for (<em>1</em>) seems okay <br>\nbecause it doesn't look like it's resorting to any HOL other than some <br>\nTrueprop coercion.</p>\n<p>However, I don't know the details of what's happening, so I could be wrong.</p>\n<p>What I'm guessing is something like this:</p>\n<p>There's 3 assumptions: P, Q, and \"(P ==&gt; (Q ==&gt; (!!(P::prop). PROP <br>\nP)))\". The assumption method starts by using P and Q to reduce the third <br>\nassumption to \"(!!(P::prop). PROP P))\", which can then be used as an <br>\nassumption for the final conclusion.</p>\n<p>If I had a trace to tell me what the assumption method is doing, I might <br>\ncould stare at it a long time, and figure out what \"assumption\" is <br>\ndoing, and also do that with future problems.</p>\n<p>Regards,<br>\nGB</p>",
        "id": 294253960,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660911883
    },
    {
        "content": "<p>From: Gottfried Barrow &lt;<a href=\"mailto:gottfried.barrow@gmx.com\">gottfried.barrow@gmx.com</a>&gt;<br>\nI'll state the obvious again, but the more traces the better, though <br>\nthere's already a lot of tools to give feedback.</p>\n<p>blast_trace looked like it was going to be useful to me. It's main use <br>\nwas that it was telling me when auto was resorting to something more <br>\nthan simplification, but I would try some to understand the details it <br>\nwas returning.</p>\n<p>I've searched in NEWS and in isar-ref.pdf, but I didn't find anything <br>\nabout what would replace blast_trace.</p>\n<p>Doing these simple exercises can help make obvious simple things that <br>\naren't obvious at first, and it's the feedback tools that help out. <br>\nTalking to myself is fine when I have tools to eventually lead me to the <br>\nanswers.</p>\n<p>In the proof of (<em>2</em>) that I gave, the simp trace was doing some <br>\nsubstitution of \"True\", and that contributed to my impression that my <br>\nfalse, \"(!!(P::prop). PROP P)\" was actually important. But then when I <br>\nused \"assumption\", it eventually became clear that I was simply doing:</p>\n<p>theorem \"(P ==&gt; (Q ==&gt; ((P ==&gt; (Q ==&gt; R)) ==&gt; R)))\"</p>\n<p>Modus ponens came to mind, and \"Auto solve_direct\", for the unexpanded <br>\nformula, says \"meta_impE\" can be used, which is based on \"meta_mp\", but <br>\nnot quite the same, because of \"meta_impE = meta_mp [elim_format]\".</p>\n<p>All that to say, one thing leads to another, and all the different <br>\nroutes can lead to a better understanding. I could assume I know what <br>\n\"assumption\" is doing, but assuming I know the details when I don't, <br>\neven with something simple, leads to being wrong a significant number of <br>\ntimes.</p>\n<p>I guess it's not a big deal, but the more access we have to the <br>\nlow-level details, to try and understand them and verify what we think <br>\nis happening, the better. As I said, there's already a lot of feedback.</p>\n<p>Regards,<br>\nGB</p>",
        "id": 294254026,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660911900
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nThese options are a leftover when Larry implemented the tool, and were not <br>\nmeant for end-user consumption, as far as I can tell.</p>\n<p>In Isabelle2013-1-RC2 you can refer to them nonetheless, using regular ML <br>\noperations for configuration options:</p>\n<p>setup \"Config.put_global Blast.trace true\"</p>\n<p>That is a rather indirect way to see when blast happens to be invoked by <br>\nother proof tools.  Generally, producing a meaningful trace is very <br>\ndifficult for anything non-trivial.</p>\n<p>Makarius</p>",
        "id": 294254174,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660911949
    }
]