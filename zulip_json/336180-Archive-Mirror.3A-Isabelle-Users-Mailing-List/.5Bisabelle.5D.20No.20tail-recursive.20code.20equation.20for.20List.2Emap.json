[
    {
        "content": "<p>From: Florian Haftmann &lt;<a href=\"mailto:florian.haftmann@informatik.tu-muenchen.de\">florian.haftmann@informatik.tu-muenchen.de</a>&gt;</p>\n<blockquote>\n<blockquote>\n<p>Is it possible to enable code equations only for certain target<br>\nlanguages?</p>\n</blockquote>\n</blockquote>\n<p>Definitely not at the moment.</p>\n<p>As far I can see, there are now two issues (currying in Scala, tail<br>\nrecursion) which would justify to differentiate code equations wrt. to<br>\nthe target language.</p>\n<p>Andreas Lochbihler a few months ago also showed funny surprises in<br>\nPolyML of obviously equivalent function definitions with dramatic<br>\ndifferences in runtime behaviour.</p>\n<p>Before making any step ahead, it would be good to collect some general<br>\nobservations which shapes of code equations are particularly suitable<br>\nfor certain target languages, e.g.</p>\n<ul>\n<li>\n<p>avoid Currying in languages which have bias towards tupled function<br>\narguments (Scala)</p>\n</li>\n<li>\n<p>avoid tail recursion in lazy languages (Haskell)</p>\n</li>\n<li>eta-expand certain function defintions (???)</li>\n<li>…</li>\n</ul>\n<p>Once there is more certainty what could be done in that respect,<br>\nappropriate devices can be developed (different bins for code equations,<br>\ndifferent preprocessor for certain target languages, …).</p>\n<p>Cheers,<br>\n    Florian<br>\n<a href=\"/user_uploads/14278/dH3wW7g5klhXJq4zavBhtiov/signature.asc\">signature.asc</a></p>",
        "id": 294239004,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660906138
    },
    {
        "content": "<p>From: Brian Huffman &lt;<a href=\"mailto:huffman@in.tum.de\">huffman@in.tum.de</a>&gt;<br>\n\"Avoid tail recursion\" is not good general advice for Haskell!</p>\n<p>Tail-recursive implementations are preferred for many Haskell<br>\nfunctions, especially those that always consume the entire input<br>\nbefore they can produce any output. For example, \"sum :: [Int] -&gt; Int\"<br>\nis best as tail-recursive. Functions like \"map\" and \"[m..n]\" are<br>\nimplemented without tail recursion so that they can produce output<br>\nincrementally.</p>\n<p>A better rule of thumb for Haskell is that for functions that return<br>\nlazy datatypes, equations with a lazy constructor surrounding any<br>\nrecursive calls are preferable.</p>\n<ul>\n<li>Brian</li>\n</ul>",
        "id": 294239025,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660906145
    },
    {
        "content": "<p>From: René Thiemann &lt;<a href=\"mailto:rene.thiemann@uibk.ac.at\">rene.thiemann@uibk.ac.at</a>&gt;<br>\nDear all,</p>\n<p>I had similar problems when processing large files using generated<br>\ncode for Scala, where I did exactly the same as Cornelius did for some<br>\nsimilar function to map.</p>\n<p>However, this optimization is clearly language-dependent, because<br>\nin Haskell I don't want to have the tail-recursive version, e.g.<br>\nconsider the call </p>\n<p>take 5 (filter f (map g long_list))</p>\n<p>So, if there will be a tail-recursive code equation for <a href=\"http://List.map\">List.map</a> in<br>\nthe default library, please only activate it on languages which<br>\nreally profit from tail-recursion.</p>\n<p>Best regards,<br>\nRené</p>",
        "id": 294240454,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660906751
    },
    {
        "content": "<p>From: Peter Lammich &lt;<a href=\"mailto:lammich@in.tum.de\">lammich@in.tum.de</a>&gt;<br>\nIs it possible to enable code equations only for certain target<br>\nlanguages?</p>",
        "id": 294240464,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660906757
    },
    {
        "content": "<p>From: Brian Huffman &lt;<a href=\"mailto:huffman@in.tum.de\">huffman@in.tum.de</a>&gt;<br>\nI remember having a similar thought when I saw the changeset \"tail<br>\nrecursive code for function upto\" a while back.</p>\n<p><a href=\"http://isabelle.in.tum.de/repos/isabelle/rev/a019e013b7e4\">http://isabelle.in.tum.de/repos/isabelle/rev/a019e013b7e4</a></p>\n<p>The original (non-tail recursive) code would be preferred when<br>\ngenerating Haskell.</p>\n<ul>\n<li>Brian</li>\n</ul>",
        "id": 294240483,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660906764
    },
    {
        "content": "<p>From: René Thiemann &lt;<a href=\"mailto:rene.thiemann@uibk.ac.at\">rene.thiemann@uibk.ac.at</a>&gt;<br>\nHere is at least one possible solution:</p>\n<p>consts scala :: bool<br>\ncode_const scala<br>\n  (Haskell \"False\")<br>\n  (Scala \"true\")<br>\n  (SML \"false\")<br>\n  (OCaml \"false\")<br>\n  (Eval \"false\")</p>\n<p>(* tail recursive variant for Scala to reduce Stack-size at the cost of double traversion *)<br>\ndefinition<br>\n  remove_comments :: \"string =&gt; string\"<br>\nwhere<br>\n  \"remove_comments = (if scala then rev o (remove_comments_tail_rec []) else remove_comments_standard)\"</p>\n<p>Kind regards,<br>\nRené</p>",
        "id": 294240488,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660906769
    },
    {
        "content": "<p>From: Andreas Lochbihler &lt;<a href=\"mailto:andreas.lochbihler@inf.ethz.ch\">andreas.lochbihler@inf.ethz.ch</a>&gt;<br>\nHi Florian,</p>\n<blockquote>\n<p>Andreas Lochbihler a few months ago also showed funny surprises in<br>\nPolyML of obviously equivalent function definitions with dramatic<br>\ndifferences in runtime behaviour.</p>\n</blockquote>\n<p>For completeness, here are the figures that I had mentioned to you. I have tested <br>\ndifferent code equations for fold on a red-black tree with 100 000 000 entries from theory <br>\nHOL/Library/RBT_Impl.</p>\n<p>The equation for Empty is always the same</p>\n<p>fold f rbt.Empty = id</p>\n<p>but I tried three versions for the branch case:</p>\n<p>a) fold f (rbt.Branch c l k v r) = fold f r ◦ f k v ◦ fold f l<br>\nb) fold f (rbt.Branch c l k v r) = (λb. fold f r (f k v (fold f l b)))<br>\nc) fold f (rbt.Branch c l k v r) b = fold f r (f k v (fold f l b))</p>\n<p>Under PolyML, I got the following timings, i.e., the eta-expanded version performed best.</p>\n<p>a) 0.54 s<br>\nb) 0.38 s<br>\nc) 0.15 s</p>\n<p>Andreas</p>",
        "id": 294242543,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660907587
    }
]