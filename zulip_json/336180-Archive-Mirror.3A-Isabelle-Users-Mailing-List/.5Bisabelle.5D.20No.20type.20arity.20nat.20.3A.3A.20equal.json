[
    {
        "content": "<p>From: Florian Haftmann &lt;<a href=\"mailto:florian.haftmann@informatik.tu-muenchen.de\">florian.haftmann@informatik.tu-muenchen.de</a>&gt;</p>\n<blockquote>\n<p>I get this error</p>\n<p>Wellsortedness error:<br>\nType nat not of sort {equal,order}<br>\nNo type arity nat :: equal</p>\n<p>What do I need to do?</p>\n<p>In a bit more detail: I have generalised the Regular-Sets AFP entry by replacing<br>\nnat by 'a::order. This results in the above error when executing the proof<br>\nmethod regexp. The latter intentionally still uses nat, but I expected the class<br>\nsystem to take care of that.</p>\n</blockquote>\n<p>A rough guess: when</p>\n<p>definition<br>\n  check_eqv :: \"nat rexp \\&lt;Rightarrow&gt; nat rexp \\&lt;Rightarrow&gt; bool\" …</p>\n<p>is generalized to</p>\n<p>definition<br>\n  check_eqv :: \"'a::order rexp \\&lt;Rightarrow&gt; 'a::order rexp<br>\n\\&lt;Rightarrow&gt; bool\" …</p>\n<p>the instance nat :: equal is not present in the transitive closure of<br>\ncode equations specified in</p>\n<blockquote>\n<p>val regexp_conv = Code_Runtime.static_holds_conv thy<br>\n      [@{const_name Zero}, @{const_name One}, @{const_name Atom}, @{const_name Plus},<br>\n       @{const_name Times}, @{const_name Star}, <br>\n       @{const_name check_eqv}, @{const_name Trueprop}]</p>\n</blockquote>\n<p>This is easiest resolve by defining a separate</p>\n<p>definition check_eqv :: \"nat rexp \\&lt;Rightarrow&gt; nat rexp \\&lt;Rightarrow&gt;<br>\nbool\" …<br>\nwhere<br>\n  \"check_eqv = Equivalence_Checking.check_eqv\"</p>\n<p>in Regexp_Method.thy and using this in the the definition of regexp_conv<br>\n(which in this case means not to change the text of this definition).</p>\n<p>Hope this helps,<br>\n    Florian<br>\n<a href=\"/user_uploads/14278/XHiLBnarFvd7WVdYRcvOmQIQ/signature.asc\">signature.asc</a></p>",
        "id": 294250713,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660910620
    },
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\nDear Code generation experts,</p>\n<p>I get this error</p>\n<p>Wellsortedness error:<br>\nType nat not of sort {equal,order}<br>\nNo type arity nat :: equal</p>\n<p>What do I need to do?</p>\n<p>In a bit more detail: I have generalised the Regular-Sets AFP entry by replacing<br>\nnat by 'a::order. This results in the above error when executing the proof<br>\nmethod regexp. The latter intentionally still uses nat, but I expected the class<br>\nsystem to take care of that.</p>\n<p>Thanks in advance!<br>\nTobias</p>",
        "id": 294253326,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660911618
    }
]