[
    {
        "content": "<p>From: Gabriele Pozzani &lt;<a href=\"mailto:gabriele.pozzani@gmail.com\">gabriele.pozzani@gmail.com</a>&gt;<br>\nDear all,<br>\nit's possible to do a non-deterministic assignment in Isabelle, or simulate<br>\nit?</p>\n<p>Or, it's possible generate a random integer?</p>\n<p>Thanks in advance for the collaboration.</p>\n<p>Gabriele</p>",
        "id": 294041406,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660815447
    },
    {
        "content": "<p>From: Tjark Weber &lt;<a href=\"mailto:tjark.weber@gmx.de\">tjark.weber@gmx.de</a>&gt;<br>\nGabriele,</p>\n<p>reflexivity is provable in Isabelle, i.e. \"?x == ?x\" is a theorem for any<br>\n?x -- in particular also for any term 'random ()', regardless of how you <br>\ndefine the function 'random'.</p>\n<p>You can use 'arbitrary' for an arbitrary (but fixed) value of a given type, or <br>\nyou can use the 'SOME' operator to define a constant which isn't fully <br>\nspecified, e.g.</p>\n<p>some_positive_int == SOME i::int. i &gt; 0</p>\n<p>Also see Section 5.2.6, \"Definition by Specification\", of the Isabelle/Isar <br>\nreference manual.  Maybe we can give a more helpful answer if you let us know <br>\nwhat you want to do, i.e. in what context you want to model non-determinism.</p>\n<p>Best,<br>\nTjark</p>",
        "id": 294041441,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660815465
    },
    {
        "content": "<p>From: Clemens Ballarin &lt;<a href=\"mailto:ballarin@in.tum.de\">ballarin@in.tum.de</a>&gt;<br>\nRandomness presumes a sequence of events that are being observed (and <br>\nthe outcome of each individual event cannot be predicted).  Doing this <br>\nformally can get pretty involved.  Joe Hurd did a formalisation of <br>\nprobability theory in HOL4.</p>\n<p>I do not know which problem you are trying to solve, but normally <br>\nnon-determinism is easiest modelled through a relation (or predicate).  <br>\nThat is, if your system can make the transitions a -&gt; b and a -&gt; c, <br>\nboth (a, b) and (a, c) would be in the relation.</p>\n<p>Clemens</p>",
        "id": 294041461,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660815472
    },
    {
        "content": "<p>From: Farhad Mehta &lt;<a href=\"mailto:fmehta@inf.ethz.ch\">fmehta@inf.ethz.ch</a>&gt;<br>\nHello Gabriele,</p>\n<p>It is not clear what you mean by doing an assignment in Isabelle. I assume <br>\nyou want to define a new constant without setting its actual value using <br>\nan equality. There already exists an 'arbitrary' constant in Isabelle you <br>\ncan use for this :</p>\n<p>term arbitrary;</p>\n<p>Otherwise you can use definition by specification:</p>\n<p>consts<br>\nrandom :: nat</p>\n<p>specification(random)<br>\n\"random &gt; 10 &amp; random &lt; 20\"<br>\napply arith<br>\ndone</p>\n<p>Here a new constant is defined with the property that is a nat in the <br>\nrange (10,20).</p>\n<p>Hope I was on the right track,<br>\nFarhad.</p>",
        "id": 294041474,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660815478
    },
    {
        "content": "<p>From: Gabriele Pozzani &lt;<a href=\"mailto:gabriele.pozzani@gmail.com\">gabriele.pozzani@gmail.com</a>&gt;<br>\nThank you very much.<br>\nI seem to have resolved my problem (for the moment).</p>\n<p>Gabriele</p>",
        "id": 294041517,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660815484
    }
]