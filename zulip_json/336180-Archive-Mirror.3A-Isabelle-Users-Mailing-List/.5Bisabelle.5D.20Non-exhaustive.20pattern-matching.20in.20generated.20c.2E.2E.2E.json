[
    {
        "content": "<p>From: Brandon Bohrer &lt;<a href=\"mailto:bbohrer@cs.cmu.edu\">bbohrer@cs.cmu.edu</a>&gt;<br>\nHi All,</p>\n<p>I'm currently generating code from Isabelle definitions that use \" 'a set\"<br>\n(where 'a::{finite,enum}).<br>\nWhen I run it I get exceptions because the generated code for Set.image<br>\n(i.e. f ` set) has a non-exhaustive pattern-match, which is difficult to<br>\navoid for infinite types but in principle should be avoidable for<br>\nenumeration types (since the coset constructor is redundant with the set<br>\nconstructor).</p>\n<p>Does anyone know of a way to code-generate an exhaustive implementation for<br>\nSet.image for finite/enumeration types, without implementing my own<br>\nfinite/cofinite-set data structure from scratch?</p>\n<p>If I code-generate to Scala, I can hack the resulting code to be exhaustive<br>\nby matching on types at runtime, but (a) I'd rather avoid hacks and (b) I<br>\nmay want to generate SML instead, where such hacks do not work as well.</p>\n<p>I've attached a trivial example that reproduces the exception. The SML file<br>\ngenerated from the Isabelle theory raises Match on start. For good measure,<br>\nI've also included an SML file demonstrating the hacky solution.</p>\n<p>Thanks!<br>\n-Brandon<br>\n<a href=\"/user_uploads/14278/_6h02CWzF4XY2atOi2C8raAc/Codegen_Exploder.thy\">Codegen_Exploder.thy</a><br>\n<a href=\"/user_uploads/14278/wkYhyXhdSF9byk5bkM9IAU7_/Exploder.sml\">Exploder.sml</a><br>\n<a href=\"/user_uploads/14278/0uZNfC5gpGHEr7CBOVfrY11f/Exploder_Hack.sml\">Exploder_Hack.sml</a></p>",
        "id": 294721970,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661185131
    },
    {
        "content": "<p>From: Andreas Lochbihler &lt;<a href=\"mailto:andreas.lochbihler@inf.ethz.ch\">andreas.lochbihler@inf.ethz.ch</a>&gt;<br>\nHi Brandon,</p>\n<p>To implement set image for an arbitrary function, I don't see any way other than first <br>\nconverting the complement representation into an explicit list of the elements. You can <br>\nuse the type class enum for that. For example:</p>\n<p>lemma set_fold_remove1:<br>\n   \"distinct ys ‚üπ set (fold remove1 xs ys) = set ys - set xs\"<br>\n   by(induction xs arbitrary: ys) auto</p>\n<p>lemma coset_enum:<br>\n   \"List.coset xs = set (fold remove1 xs Enum.enum)\"<br>\n   by(auto simp add: set_fold_remove1 enum_distinct UNIV_enum[symmetric])</p>\n<p>lemma image_coset [code]:<br>\n   \"f ` List.coset xs = set (map f (fold remove1 xs Enum.enum))\"<br>\n   by(simp only: coset_enum set_map)</p>\n<p>Now image has two code equations, one for set and one for coset. However, you can no <br>\nlonger use image on sets whose element types are not enumerable, i.e., an instance of the <br>\nenum type class.</p>\n<p>If you want to have both, then you have to do a bit more work. Basically you must <br>\nimplement in HOL the type tests that you do manually in Scala. The theory Collection_Enum <br>\nin my AFP entry Containers does this and uses it for set comprehensions. There's currently <br>\nno setup for set complement, but it would not be hard to do so.</p>\n<p>Hope this helps,<br>\nAndreas</p>",
        "id": 294722001,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661185142
    },
    {
        "content": "<p>From: Brandon Bohrer &lt;<a href=\"mailto:bbohrer@cs.cmu.edu\">bbohrer@cs.cmu.edu</a>&gt;<br>\nI'm currently using sets only for enumeration types, so your code worked<br>\nperfectly. Many thanks!</p>",
        "id": 294722022,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661185148
    }
]