[
    {
        "content": "<p>From: Mathias Fleury &lt;<a href=\"mailto:mathias.fleury12@gmail.com\">mathias.fleury12@gmail.com</a>&gt;<br>\nHello List,</p>\n<p>I have defined an recursive function over sets (either the set is infinite or empty, or I take the minimum of the set), but it leads to non-termination of simp, when applied to an expression containing the function (see full theory attached):</p>\n<p>function f :: \"'v :: linorder set =&gt; 'v list\" where<br>\n\"f vars  =<br>\n (if ~finite vars \\&lt;or&gt; vars = {}  then []<br>\n  else f (vars - {Min vars}))\"<br>\n by auto<br>\ntermination by (relation \"measure card\") (simp_all add: card_gt_0_iff)</p>\n<p>lemma<br>\n  shows \"[] = f s\"<br>\n  (<em>this simp-call is not terminating</em>)<br>\n  apply simp</p>\n<p>Given the simplifier trace, I think that simp is doing a case distinction whether the set is empty or not, meaning that it then tries to simplify the recursive call of the function, where the same occurs: case distinction and recursive call of simp. Is there a way to avoid this non-termination?</p>\n<p>Many thanks in advance,</p>\n<p>Mathias Fleury<br>\n<a href=\"/user_uploads/14278/HgUORseUH8ZoM8nD5Hnsw5Zc/Simp_blocking.thy\">Simp_blocking.thy</a></p>",
        "id": 294329108,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660929628
    },
    {
        "content": "<p>From: Peter Lammich &lt;<a href=\"mailto:lammich@in.tum.de\">lammich@in.tum.de</a>&gt;<br>\nThe simplifier will \"split\" on if's by default, thus<br>\ninlining your function again and again.<br>\nA standard way around this (also documented in the function tutorial) is<br>\nto make the simp-rules conditional, i.e. <br>\n~finite | vars ={} ==&gt; f x = []<br>\nfinite; vars~={} ==&gt; f x = f (vars - ...)</p>",
        "id": 294329114,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660929630
    }
]