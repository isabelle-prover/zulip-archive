[
    {
        "content": "<p>From: Lars Hupel &lt;<a href=\"mailto:hupel@in.tum.de\">hupel@in.tum.de</a>&gt;<br>\nDear list,</p>\n<p>let's say I have a goal state that looks like this:</p>\n<p>1. (⋀x. P x)<br>\n  2. (⋀x. Q x)</p>\n<p>I want to perform mutual induction on \"P\" and \"Q\". To use the \"induct\"<br>\ntactic effectively I need to obtain a goal state more like this:</p>\n<p>1. ⋀x y. P x &amp;&amp;&amp; Q y</p>\n<p>That is, quantification is outside. Then, I can use the usual mechanisms<br>\n(\"Subgoal.FOCUS_PARAMS\") to set up a local context, which makes my goal<br>\nstate look like this:</p>\n<p>1. P :000 &amp;&amp;&amp; Q :001</p>\n<p>... which in turn can be fed to \"induct\".</p>\n<p>I currently have a solution which goes from my initial goal state to the<br>\ndesired goal state by applying these rewrite rules:</p>\n<p>⋀P Q. ((⋀x. PROP P x) &amp;&amp;&amp; PROP Q) ≡ (⋀x. PROP P x &amp;&amp;&amp; PROP Q)<br>\n  ⋀P Q. (PROP P &amp;&amp;&amp; (⋀x. PROP Q x)) ≡ (⋀x. PROP P &amp;&amp;&amp; PROP Q x)</p>\n<p>Is there anything out there that already does what I want?</p>\n<p>Cheers<br>\nLars</p>",
        "id": 294708621,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661181431
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nOn 21/03/17 15:47, Lars Hupel wrote:</p>\n<blockquote>\n<p>let's say I have a goal state that looks like this:</p>\n<p>1. (⋀x. P x)<br>\n  2. (⋀x. Q x)</p>\n<p>I want to perform mutual induction on \"P\" and \"Q\". To use the \"induct\"<br>\ntactic effectively I need to obtain a goal state more like this:</p>\n<p>1. ⋀x y. P x &amp;&amp;&amp; Q y</p>\n</blockquote>\n<p>You did not say how you got there. Note that<br>\nGoal.recover_conjunction_tac happens to be available for this, because<br>\nit is occasionally needed in obscure situations.</p>\n<blockquote>\n<p>That is, quantification is outside. Then, I can use the usual mechanisms<br>\n(\"Subgoal.FOCUS_PARAMS\") to set up a local context, which makes my goal<br>\nstate look like this:</p>\n<p>1. P :000 &amp;&amp;&amp; Q :001</p>\n<p>... which in turn can be fed to \"induct\".</p>\n<p>I currently have a solution which goes from my initial goal state to the<br>\ndesired goal state by applying these rewrite rules:</p>\n<p>⋀P Q. ((⋀x. PROP P x) &amp;&amp;&amp; PROP Q) ≡ (⋀x. PROP P x &amp;&amp;&amp; PROP Q)<br>\n  ⋀P Q. (PROP P &amp;&amp;&amp; (⋀x. PROP Q x)) ≡ (⋀x. PROP P &amp;&amp;&amp; PROP Q x)</p>\n<p>Is there anything out there that already does what I want?</p>\n</blockquote>\n<p>The last two rewrite rules look OK for such special rearrangements. E.g.<br>\nwhen wrapped-up into a separate proof method.</p>\n<p>There are very few such tools to operate in Pure rule or goal structure,<br>\nbecause the usual Isar way is to operate on the problem structure as<br>\nprovided by the user, and avoid loosing that structure in the first place.</p>\n<p>Sometimes that is difficult or impossible, then special tweaks need to<br>\nbe applied. So looking from a distance, the canonical question is: Where<br>\ndoes the situation of two separate subgoals with separate parameter<br>\nscopes come from? Is that the result of another tool?</p>\n<p>Makarius</p>",
        "id": 294708757,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661181472
    },
    {
        "content": "<p>From: Lars Hupel &lt;<a href=\"mailto:hupel@in.tum.de\">hupel@in.tum.de</a>&gt;<br>\nThis particular goal state arises in a tool. In a nutshell, I start with<br>\n\"Goal.prove_common\" and supply multiple propositions (let's say \"P\" and<br>\n\"Q\"). Then, I need to preprocess these propositions (let's say some<br>\nextensionality rule) so that I can apply induction. Hence, I need to</p>\n<ul>\n<li>break off the Pure conjunction (\"conjunction_tac\"),</li>\n<li>apply the preprocessing (\"ALLGOALS\"),</li>\n<li>recover the conjunction (\"recover_conjunction_tac\"),</li>\n<li>move out the quantifiers, and</li>\n<li>perform induction.</li>\n</ul>\n<p>Cheers<br>\nLars</p>",
        "id": 294708766,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661181474
    }
]