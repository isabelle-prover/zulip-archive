[
    {
        "content": "<p>From: Manuel Eberl &lt;<a href=\"mailto:eberlm@in.tum.de\">eberlm@in.tum.de</a>&gt;<br>\nHallo,</p>\n<p>I am currently thinking about introducing a type 'a egf for exponential <br>\ngenerating functions, derived from formal power series ('a fps).</p>\n<p>I was wondering how to best express the n-th coefficient of an egf. For <br>\npolynomials, only the rather unwieldy notation \"coeff f n\" exists. For <br>\nformal power series, \"f $ n\" exists.</p>\n<p>I considered overloading the $ notation so that it works for <br>\npolynomials, formal power series, and exponential generating functions. <br>\nHowever:<br>\n– introducing a typeclass does not work, because this would be a <br>\nhigher-order typeclass.<br>\n– Vanilla ‘overloading’ works, but the type of \"op $\" must then be 'a ⇒ <br>\nnat ⇒ 'b, which means that type inference cannot deduce the result type <br>\nof \"f $ 0\" even when the type of \"f\" is known, requiring type <br>\nannotations everywhere.<br>\n– Adhoc overloading would probably work, but that is somewhat… ad-hoc.</p>\n<p>Does anybody have other ideas?</p>\n<p>Manuel</p>",
        "id": 294654849,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661167621
    },
    {
        "content": "<p>From: Johannes Hölzl &lt;<a href=\"mailto:hoelzl@in.tum.de\">hoelzl@in.tum.de</a>&gt;<br>\nHm, I think the usual option is to just go with a new $ notation. Maybe<br>\nusing context/private notation tricks?</p>\n<p>Alternatively, you could also try to use the coercion from 'a egf to 'a<br>\nfps, and then introduce a output abbreviation:<br>\n  f $_fps x == fps_of_egf f $ x</p>\n<ul>\n<li>Johannes</li>\n</ul>",
        "id": 294654889,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661167640
    }
]