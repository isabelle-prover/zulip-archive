[
    {
        "content": "<p>From: Talia Ringer &lt;<a href=\"mailto:tringer@cs.washington.edu\">tringer@cs.washington.edu</a>&gt;<br>\nHi all,</p>\n<p>My name is Talia Ringer and I'm a Ph.D. student at the University of<br>\nWashington. I'm working on a proof engineering<br>\n&lt;<a href=\"http://proofengineering.org/\">http://proofengineering.org/</a>&gt; survey paper. However, I don't have any<br>\nIsabelle expertise on the paper, and my community overwhelmingly skews<br>\ntoward Coq users. To make sure Isabelle gets adequate coverage, I have been<br>\nconsulting other people.</p>\n<p>Right now, I am looking for noteworthy Isabelle proof developments to<br>\ninclude in the paper. The paper focuses mostly on proof engineering for<br>\nprogram verification, but it talks about mathematics and metatheory as<br>\nwell, so developments in those domains are welcome. I'm aware of the AFP,<br>\nbut please don't hesitate to link to particular developments within the AFP<br>\nif you think they're especially noteworthy. It is OK to send your own work<br>\nif you think it is noteworthy and want to make sure it isn't missed.</p>\n<p>Also, while not the focus of this email, feel free to send other bits of<br>\nIsabelle knowledge besides major proof developments that you think are<br>\nessential to a survey paper (to give an idea of what sorts of things are<br>\nrelevant, we already talk about Isar, the Isabelle style guide, Nominal<br>\nIsabelle, Transfer and Lifting, sledgehammer, and Isabelle/jedit, among<br>\nother things).</p>\n<p>Thank you,</p>\n<p>Talia<br>\n<a href=\"http://tlringer.github.io/\">http://tlringer.github.io/</a></p>",
        "id": 294742126,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661191956
    },
    {
        "content": "<p>From: Buday Gergely &lt;<a href=\"mailto:buday.gergely@uni-eszterhazy.hu\">buday.gergely@uni-eszterhazy.hu</a>&gt;<br>\nDear Talia,</p>\n<p><a href=\"https://ts.data61.csiro.au/projects/TS/proof-engineering/\">https://ts.data61.csiro.au/projects/TS/proof-engineering/</a></p>\n<p>is a good source for proof engineering using Isabelle.</p>\n<ul>\n<li>Gergely</li>\n</ul>",
        "id": 294742129,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661191956
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nOn 07/08/18 01:47, Talia Ringer wrote:</p>\n<blockquote>\n<p>I'm working on a proof engineering<br>\n&lt;<a href=\"http://proofengineering.org/\">http://proofengineering.org/</a>&gt; survey paper. However, I don't have any<br>\nIsabelle expertise on the paper, and my community overwhelmingly skews<br>\ntoward Coq users. To make sure Isabelle gets adequate coverage, I have been<br>\nconsulting other people.</p>\n</blockquote>\n<p>The term \"proof engineering\" is rarely used in the Isabelle community,<br>\nalthough people are probably doing it implicitly all the time. From the<br>\nperspective of the prover platform, the strategy has always been to make<br>\nit perform sufficiently well, such that high-end applications are easily<br>\nprocessed by it without requiring further adhoc tools.</p>\n<p>There has always been a race of system infrastructure vs. applications.<br>\nA current snapshot of it is sketched in my presentation at the Isabelle<br>\nWorkshop 2018: \"Further Scaling of Isabelle Technology\" (slides and<br>\npaper) <a href=\"https://sketis.net/2018/slides-for-presentations-at-floc-2018-oxford\">https://sketis.net/2018/slides-for-presentations-at-floc-2018-oxford</a></p>\n<p>The slides classify time scales for processing Isabelle theory sessions<br>\nas follows:</p>\n<p>* instantaneous: 10 min (Edmund Stoiber constant)<br>\n  * online waiting: 45 min (Paris Commuter constant)<br>\n  * offline waiting: 2 h (French Lunch time)<br>\n  * too long: 8 h (Overnight job)</p>\n<p>The best I have seen in recent months is as follows:</p>\n<p>1) Intel Xeon 2 * 20 cores with SSD</p>\n<p>* 2 min for the Isabelle/HOL image (the \"standard prelude\"), which is<br>\nalready quite big</p>\n<p>* 6 min for the main Isabelle/HOL libraries, including HOL and the<br>\nhuge HOL-Analysis session</p>\n<p>* 11 min for the full Isabelle distribution (libraries and examples)<br>\n  * 36 min for Isabelle + AFP, excluding unusually slow sessions</p>\n<p>2) AMD 8 * 8 cores cluster</p>\n<p>* 65 min for Isabelle + AFP, including regular slow sessions,<br>\nexcluding some special very-slow sessions (one of it takes 4-6h)</p>\n<blockquote>\n<p>I'm aware of the AFP,<br>\nbut please don't hesitate to link to particular developments within the AFP<br>\nif you think they're especially noteworthy. It is OK to send your own work<br>\nif you think it is noteworthy and want to make sure it isn't missed.</p>\n</blockquote>\n<p>I see AFP as the main application of Isabelle, and guess that it covers<br>\napprox. 60% of the visible Isabelle universe. Already since 2006,<br>\nIsabelle technology enhancements are driven by the requirements of AFP.</p>\n<blockquote>\n<p>to give an idea of what sorts of things are<br>\nrelevant, we already talk about Isar, the Isabelle style guide, Nominal<br>\nIsabelle, Transfer and Lifting, sledgehammer, and Isabelle/jedit, among<br>\nother things.</p>\n</blockquote>\n<p>Note on Isar: well-structured proofs are not only better for the human<br>\nreader (and maintainer), but also for overall system performance. People<br>\nsometimes think that \"declarative proof languages\" are expensive<br>\nconcerning automated proof search, but Isar is not called \"declarative\"<br>\nand its built-in automation is minimal: Isar means \"Intelligible<br>\nsemi-automated reasoning\". Consequently, checking well-structured Isar<br>\nproofs is much faster than old-style \"apply\" scripts (this a minority<br>\nstyle in Isabelle applications, but a majority style in Coq applications).</p>\n<p>Note on Eisbach: this proof method language has been added in recent<br>\nyears. Inspired by Ltac, it allows to define Isar proof methods in the<br>\nsource notation of the proof language. Some Eisbach spin-off concepts<br>\nallow to structure old-style apply-scripts, e.g. the 'subgoal' command<br>\n(similar to Coq bullets, but leading to parallel proofs). Beyond that it<br>\nis easy to define proof methods in Isabelle/ML: unlike Coq with its<br>\nseparate \"plugin\" concept, Isabelle tools are defined directly within<br>\nthe theory source, and subject to the normal interaction model (and<br>\nProver IDE support).</p>\n<p>Note on Isabelle/jEdit (in that spelling): this is the main front-end of<br>\nIsabelle/PIDE --- the Prover IDE framework --- and the default<br>\nuser-interface of Isabelle. Another PIDE front-end is Isabelle/VSCode,<br>\nwhich is included in Isabelle2018 at a relatively modest 1.1 version,<br>\nbut some people have already started using it. Isabelle users<br>\noccasionally abuse the name of the \"jEdit\" text editor for the whole<br>\ntechnology stack behind the Isabelle/jEdit product. Conceptually, the<br>\nkey things are Isabelle/Scala and Isabelle/PIDE: a hybrid of Scala and<br>\nML modules to support IDE concepts natively in the prover.</p>\n<p>In recent years there has been a tendency to integrate more and more<br>\nprover technology into the Prover IDE (according to its name and<br>\nprinciple). A notable exception is the \"isabelle build\" command-line<br>\ntool, but it will also move into the IDE eventually.</p>\n<p>The build tool understands the syntax of Isabelle theory sessions. This<br>\nis important for scaling, and \"engineering\" of large proof projects: the<br>\nsystem can impose certain policies according to the theory structure.</p>\n<p>Taking away the free choice of \"make\" tools from the user also means<br>\nthat Isabelle projects can easily build on existing projects, without<br>\nhaving to worry about the underlying project management technology: it<br>\nis just standard Isabelle itself.</p>\n<p>Makarius</p>",
        "id": 294742137,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661191961
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nNon-Bavarians often don't understand the Edmund Stoiber joke above. Here<br>\nis the original speech <a href=\"https://www.youtube.com/watch?v=VY9bIZ9Jn9E\">https://www.youtube.com/watch?v=VY9bIZ9Jn9E</a> as<br>\nrepresentative of the many variations on the theme on Youtube. The<br>\nillustrations also help to get the point, despite Stoiber's strange way<br>\nof speaking German. (It is about building a high-speed train connection<br>\nfrom Munich main station to Munich airport, in order to get there in<br>\nmax. 10 min. The project has not materialized so far.)</p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"VY9bIZ9Jn9E\" href=\"https://www.youtube.com/watch?v=VY9bIZ9Jn9E\"><img src=\"https://uploads.zulipusercontent.net/1bd27205136b03b4f410dc724b6e5c7318819018/68747470733a2f2f692e7974696d672e636f6d2f76692f56593962495a394a6e39452f64656661756c742e6a7067\"></a></div><p>Related to that is the keynote by Peter O'Hearn at FLoC 2018 about<br>\n\"Continuous Reasoning: Scaling the Impact of Formal Methods\"<br>\n<a href=\"https://easychair.org/smart-program/FLoC2018/2018-07-09.html\">https://easychair.org/smart-program/FLoC2018/2018-07-09.html</a></p>\n<p>He was talking about \"diff time\" of max. 15 min. It is the time you are<br>\nready to invest to study the diff of an incoming changeset, to discuss<br>\nit with colleagues, decide to apply it or ignore it. His message to<br>\nformal-method tool builders: you need to be quicker than 15 min for<br>\nimmediate formal analysis, if you want software developers to take your<br>\nresults into account.</p>\n<p>For formal proof checking the situation is analogous, but re-checking of<br>\nproofs is not optional, it cannot be ignored. Thus it is important to<br>\nhave the main libraries and applications build in less than 10-15min in<br>\norder to remain productive in continued maintenance of the core system<br>\nand libraries.</p>\n<p>Makarius</p>",
        "id": 294742148,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661191967
    }
]