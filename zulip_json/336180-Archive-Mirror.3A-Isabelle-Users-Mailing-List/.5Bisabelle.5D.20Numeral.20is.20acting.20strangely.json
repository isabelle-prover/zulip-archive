[
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nYou seem to using a recent development snapshot.  Here Numeral1 is a<br>\nfirst-class term abbreviation, i.e. it may appear as a Const at some<br>\npoint, but is expanded eventually (during term certification at the<br>\nlatest).</p>\n<p>Your read ML function seems to refer to rather old internal interfaces,<br>\nbased on Sign.read_def_terms. Try ProofContext.read_term to get the usual<br>\nuser-level thing.</p>\n<p>Makarius</p>",
        "id": 293912360,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660747765
    },
    {
        "content": "<p>From: Rafal Kolanski &lt;<a href=\"mailto:rafalk@cse.unsw.edu.au\">rafalk@cse.unsw.edu.au</a>&gt;<br>\nSteven Obua wrote:</p>\n<blockquote>\n<p>actually, in general \"Numeral0::'a\" is NOT equal to \"0::'a\".</p>\n</blockquote>\n<p>I figured that out. What I can't figure out is why</p>\n<p>term \"0\" is \"0::'a\" :: \"'a\"<br>\nterm \"1\" is \"1::'a\" :: \"'a\"<br>\nterm \"2\" is \"2::'a\" :: \"'a\"</p>\n<p>but</p>\n<p>term \"00\" is    \"Numeral0\" :: \"'a\"<br>\nterm \"01\" is    \"Numeral1\" :: \"'a\"<br>\nterm \"02\" is    \"2::'a\" :: \"'a\"</p>\n<p>Does that make any sense to you? 00 is intuitively just 0, just like 01 <br>\nis 1. Instead we get \"Numeral0\" and \"Numeral1\", but for 02 we get \"2\".</p>\n<p>In the hex input modification, I want 0x0 to be 0, and 0x1 to be 1. I'm <br>\nalready getting 0x2 to be 2.</p>\n<p>Larry Paulson already indicated that 0 and 1 are \"special\", but it isn't <br>\nclear to me how it applies to this case. Does isabelle actually single <br>\nout 1 and 0 before we get to the functions in HOL/Tools/numeral_syntax.ML?</p>\n<p>Cheers,</p>\n<p>Rafal Kolanski.</p>",
        "id": 293912368,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660747768
    },
    {
        "content": "<p>From: Rafal Kolanski &lt;<a href=\"mailto:rafalk@cse.unsw.edu.au\">rafalk@cse.unsw.edu.au</a>&gt;<br>\nSteven Obua wrote:<br>\nThank you, I get it now. It's so easy to get confused when thinking of <br>\nnumbers as numbers! This also means that despite appearing strange, my <br>\npatch is actually functioning correctly.</p>\n<p>Rafal Kolanski.</p>",
        "id": 293912370,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660747768
    },
    {
        "content": "<p>From: Rafal Kolanski &lt;<a href=\"mailto:rafalk@cse.unsw.edu.au\">rafalk@cse.unsw.edu.au</a>&gt;<br>\nHi All,</p>\n<p>I just made a small change to Isabelle to allow input of unsigned hex <br>\nand binary constants:</p>\n<p>lemma \"0x20 = 32\" by (rule refl)<br>\nlemma \"(0x20::nat) = 32\" by simp<br>\nlemma \"(0b11111111::word8) = -1\" by simp</p>\n<p>Unfortunately, it's got some quirks with the numbers 1 and 0:</p>\n<p>lemma \"2 = 2\"   yields (2 :: 'a) = (2 :: 'a)  OK, by simp<br>\nlemma \"0x2 = 2\" yields (2 :: 'a) = (2 :: 'a)  OK, by simp<br>\nlemma \"0x02 = 2\" yields (2 :: 'a) = (2 :: 'a) OK, by simp<br>\nlemma \"0x01 = 1\" yields Numeral1 = (1 :: 'a)  BAD<br>\nlemma \"0x1 = 1\" yields Numeral1 = (1 :: 'a)   BAD<br>\nlemma \"0x0 = 0\" yields Numeral0 = (0 :: 'a)   BAD</p>\n<p>If I restrict either side to a particular type, it will work, but I get <br>\nlemmas \"Numeral1 = 1\" and \"Numeral0 = 0\". The problem exists only for 1 <br>\nand 0. I've checked the code which generates the constants, and they are <br>\nfine.</p>\n<p>Now to the point. After debugging this thing for much longer than I <br>\nprobably should have, I found this:<br>\nlemma \"00 = 0\" yields Numeral0 = (0 :: 'a)<br>\nThis exhibits all the problems I outlined in the previous paragraph. <br>\nThis keeps happening even if I revert all my changes to Isabelle, so I <br>\ndidn't introduce it.<br>\nAs far as I can understand numerals, both sides should be number_of(Pls).</p>\n<p>Gentlemen, what gives?</p>\n<p>Sincerely,</p>\n<p>Rafal Kolanski.</p>",
        "id": 294040311,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660814980
    },
    {
        "content": "<p>From: Lawrence Paulson &lt;<a href=\"mailto:lp15@cam.ac.uk\">lp15@cam.ac.uk</a>&gt;<br>\n0 and 1 are constants in their own right. They are not made by  <br>\nnumber_of. Their number_of equivalents are displayed as Numeral0 and  <br>\nNumeral1. Having 0 and 1 as constants allows them to be involved in  <br>\nmany axiomatic type classes concerning algebraic properties. Users  <br>\nnormally should not notice.</p>\n<p>A related issue: for type nat, while 1 = Suc 0, this is not a  <br>\nsyntactic identity.</p>\n<p>Larry Paulson</p>",
        "id": 294040618,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660815106
    },
    {
        "content": "<p>From: Steven Obua &lt;<a href=\"mailto:obua@in.tum.de\">obua@in.tum.de</a>&gt;<br>\nHi Rafal,</p>\n<p>actually, in general \"Numeral0::'a\" is NOT equal to \"0::'a\".</p>\n<p>\"Numeral0::'a\" is equal to \"number_of (Pls)\", but \"number_of(Pls)\" is <br>\nnot necessary equal to \"0::'a\", because in general,<br>\n\"number_of :: bin =&gt; 'a::number\" is not defined.</p>\n<p>If \"'a::number_ring\" though (this includes the cases \"int\" and \"real\"), <br>\nor \"'a::nat\", then this equality actually holds; for \"1::'a\" the same is <br>\ntrue.<br>\nThe corresponding lemmas are</p>\n<p>numeral_0_eq_0<br>\nnumeral_1_eq_1<br>\nnat_numeral_0_eq_0<br>\nnat_numeral_1_eq_1</p>\n<p>Hope this helps,</p>\n<p>Steven</p>",
        "id": 294040624,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660815110
    },
    {
        "content": "<p>From: Steven Obua &lt;<a href=\"mailto:obua@in.tum.de\">obua@in.tum.de</a>&gt;<br>\nRafal Kolanski wrote:</p>\n<blockquote>\n<p>Steven Obua wrote:</p>\n<blockquote>\n<p>actually, in general \"Numeral0::'a\" is NOT equal to \"0::'a\".</p>\n</blockquote>\n<p>I figured that out. What I can't figure out is why</p>\n<p>term \"0\" is    \"0::'a\" :: \"'a\"<br>\nterm \"1\" is    \"1::'a\" :: \"'a\"<br>\nterm \"2\" is    \"2::'a\" :: \"'a\"</p>\n<p>but</p>\n<p>term \"00\" is    \"Numeral0\" :: \"'a\"<br>\nterm \"01\" is    \"Numeral1\" :: \"'a\"<br>\nterm \"02\" is    \"2::'a\" :: \"'a\"</p>\n<p>Does that make any sense to you? 00 is intuitively just 0, just like <br>\n01 is 1. Instead we get \"Numeral0\" and \"Numeral1\", but for 02 we get \"2\".</p>\n<p>As Larry already pointed out, \"0\" and \"1\" are actually declared global <br>\nconstants (see HOL.thy in the isabelle/src/HOL directory),<br>\nwhile \"2\", \"3\" and so on are not. Therefore the parser recognizes these <br>\nglobal constants first. \"00\" is not a declared constant, therefore it is <br>\npassed on to the functions in numeral_syntax.ML. So to me it makes <br>\nperfect sense (it may not be intuitive, though :-)).</p>\n</blockquote>\n<p>\"2::'a\" is just a pretty-printed version of a more complex term. You <br>\ncannot pretty-print \"Numeral0\" in that way, because then \"Numeral0\" <br>\nwould have to become \"0\", but as you already figured out, \"Numeral0\" is <br>\nnot the same as \"0\", therefore this pretty-printing would be maybe <br>\nintuitive, but wrong.</p>\n<p>Steven</p>\n<blockquote>\n<p>In the hex input modification, I want 0x0 to be 0, and 0x1 to be 1. <br>\nI'm already getting 0x2 to be 2.</p>\n<p>Larry Paulson already indicated that 0 and 1 are \"special\", but it <br>\nisn't clear to me how it applies to this case. Does isabelle actually <br>\nsingle out 1 and 0 before we get to the functions in <br>\nHOL/Tools/numeral_syntax.ML?</p>\n<p>Cheers,</p>\n<p>Rafal Kolanski.<br>\n</p>\n</blockquote>",
        "id": 294040630,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660815116
    },
    {
        "content": "<p>From: Jeremy Dawson &lt;<a href=\"mailto:Jeremy.Dawson@rsise.anu.edu.au\">Jeremy.Dawson@rsise.anu.edu.au</a>&gt;<br>\nLawrence Paulson wrote:<br>\nBut there 's something more than this going on that seems odd.</p>\n<blockquote>\n<p>read \"Numeral1\";<br>\nval it = Const (\"Numeral.Numeral1\", \"'a::Numeral.number\") : Term.term</p>\n</blockquote>\n<p>So Numeral1 is a constant in its own right</p>\n<p>(tc is a smarter version of thms_containing)</p>\n<blockquote>\n<p>tc[\"Numeral1\"];<br>\nException- ERROR \"thms_containing: undeclared consts \\\"Numeral.Numeral1\\\"\"<br>\n    raised<br>\ntc[\"Numeral.Numeral1\"];<br>\nException- ERROR \"thms_containing: undeclared consts \\\"Numeral.Numeral1\\\"\"<br>\n    raised</p>\n</blockquote>\n<blockquote>\n<p>Goal \"Numeral1 = 1\" ;</p>\n</blockquote>\n<h3>Obsolete goal command encountered</h3>\n<p>Level 0 (1 subgoal)<br>\nnumber_of (Numeral.Pls BIT bit.B1) = (1::'a)</p>\n<p>1. number_of (Numeral.Pls BIT bit.B1) = (1::'a)</p>\n<p>But here the constant \"Numeral.Numeral1\" somehow gets translated to<br>\nnumber_of (Numeral.Pls BIT bit.B1)</p>\n<p>What is happening here?</p>\n<p>Jeremy</p>",
        "id": 294040700,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660815127
    }
]