[
    {
        "content": "<p>From: Viorel Preoteasa &lt;<a href=\"mailto:viorel.preoteasa@aalto.fi\">viorel.preoteasa@aalto.fi</a>&gt;<br>\nHello,</p>\n<p>I am interested in obtaining the theorems declared in a certain context.<br>\nI know that I can get these theorems from the current context using<br>\nanti-quotations @{thms MyTh}. However this is not satisfactory because<br>\nI need these theorems from a dynamic context which is passed as an<br>\nargument to a function.</p>\n<p>So I need a function \"GetMyThms ctxt\" which does exactly the same<br>\nas @{thms MyTh}, but for ctxt parameter, and not the current context.</p>\n<p>theorems MyTh = exI exE</p>\n<p>ML{*<br>\nval my_ths = @{thms MyTh};<br>\nval ctxt = @{context}</p>\n<p>fun GetMyThms ctxt = ..;<br>\nval my_thsa = GetMyThms ctxt;<br>\n*}</p>\n<p>How can I achieve this?</p>\n<p>Best regards,</p>\n<p>Viorel Preoteasa</p>",
        "id": 294652638,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661166729
    },
    {
        "content": "<p>From: Lars Hupel &lt;<a href=\"mailto:hupel@in.tum.de\">hupel@in.tum.de</a>&gt;<br>\nHello Viorel,</p>\n<blockquote>\n<p>So I need a function \"GetMyThms ctxt\" which does exactly the same<br>\nas @{thms MyTh}, but for ctxt parameter, and not the current context.</p>\n</blockquote>\n<p>this can be achieved like so:</p>\n<p>Proof_Context.get_thms ctxt \"append.simps\"</p>\n<p>Depending on where you get these theorem names from, it might make more<br>\nsense to use the appropriate parsers which produce theorems directly (e.g.<br>\nAttrib.thms). I would strongly encourage to use those instead.</p>\n<p>Cheers<br>\nLars</p>",
        "id": 294654252,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661167358
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\n(NoteThatCamelCaseIsNotUsedInIsabelleSources.)</p>\n<p>What the @{thms} does exactly can be explored by following its definition <br>\nin Isabelle/ML (using C-hover-click in the Prover IDE).  The main thing is <br>\nAttrib.thm; it has relatives like Attrib.eval_thms (rarely used in <br>\npractice) and Proof_Context.get_fact.</p>\n<p>That does dynamic evaluation of fact names and attribute expressions at <br>\nruntime.  Normally you don't want to do that under program control -- it <br>\nused to be called \"fishing\" in the past, but that technique is no longer <br>\nseen today, because there are usually better ways.</p>\n<p>For example, dynamically changing facts can be managed like this in <br>\nIsabelle2015:</p>\n<p>named_theorems foo</p>\n<p>ML ‹fun get_foo ctxt = Named_Theorems.get ctxt @{named_theorems foo}›</p>\n<p>The user can now use attributes [foo add] or [foo del].  Your tool can use <br>\nget_foo to see the current content in a given context.</p>\n<p>Makarius</p>",
        "id": 294654399,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661167425
    },
    {
        "content": "<p>From: Viorel Preoteasa &lt;<a href=\"mailto:viorel.preoteasa@aalto.fi\">viorel.preoteasa@aalto.fi</a>&gt;<br>\nHi Makarius,</p>\n<p>Thank you for your answer.</p>\n<blockquote>\n<p>(NoteThatCamelCaseIsNotUsedInIsabelleSources.)<br>\nI was almost sure that I will make a mistake in this example. I did<br>\nthink about the \"ctxt\" abbreviation, and it seems I got it right.</p>\n<p>What the @{thms} does exactly can be explored by following its <br>\ndefinition in Isabelle/ML (using C-hover-click in the Prover IDE).  <br>\nThe main thing is Attrib.thm; it has relatives like Attrib.eval_thms <br>\n(rarely used in practice) and Proof_Context.get_fact.</p>\n</blockquote>\n<p>I did find Attrib.thm by cotrol-click of @{thms ...}, but I did not know <br>\nhow to use it directly.</p>\n<blockquote>\n<p>That does dynamic evaluation of fact names and attribute expressions <br>\nat runtime.  Normally you don't want to do that under program control <br>\n-- it used to be called \"fishing\" in the past, but that technique is <br>\nno longer seen today, because there are usually better ways.</p>\n<p>For example, dynamically changing facts can be managed like this in <br>\nIsabelle2015:</p>\n<p>named_theorems foo</p>\n<p>ML ‹fun get_foo ctxt = Named_Theorems.get ctxt @{named_theorems foo}›</p>\n<p>The user can now use attributes [foo add] or [foo del].  Your tool can <br>\nuse get_foo to see the current content in a given context.</p>\n</blockquote>\n<p>This is a nice solution. Is there a way to also clear the foo content, <br>\nwithout knowing what it contains?</p>\n<p>Viorel</p>",
        "id": 294654564,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661167497
    },
    {
        "content": "<p>From: Viorel Preoteasa &lt;<a href=\"mailto:viorel.preoteasa@aalto.fi\">viorel.preoteasa@aalto.fi</a>&gt;<br>\nHi Lars,</p>\n<p>Thank you for your message.</p>\n<p>On 9/1/2015 5:30 PM, Lars Hupel wrote:</p>\n<blockquote>\n<p>Hello Viorel,</p>\n<blockquote>\n<p>So I need a function \"GetMyThms ctxt\" which does exactly the same<br>\nas @{thms MyTh}, but for ctxt parameter, and not the current context.<br>\nthis can be achieved like so:</p>\n</blockquote>\n<p>Proof_Context.get_thms ctxt \"append.simps\"</p>\n</blockquote>\n<p>This seems to give me what I need.</p>\n<blockquote>\n<p>Depending on where you get these theorem names from, it might make more<br>\nsense to use the appropriate parsers which produce theorems directly (e.g.<br>\nAttrib.thms). I would strongly encourage to use those instead.<br>\nThe first thing <a href=\"http://th.at\">th.at</a> I run into was Attribthms , but I did not manage <br>\nto use it.</p>\n</blockquote>\n<p>These theorems are all fixed under some declaration:</p>\n<p>theorems MySimps = ...</p>\n<p>and in different theories I need to use different theorems, so I will just<br>\ndefine MySimps to be one or another list.</p>\n<p>Best regards,</p>\n<p>Viorel</p>",
        "id": 294654745,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661167564
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nThat is the missing [foo only] that will probably emerge for the next <br>\nrelease. For now, the implementation of Named_Theorems can be taken as an <br>\nexample how to do such things yourself.</p>\n<p>An important ingredient is Local_Theory.add_thms_dynamic to expose certain <br>\ncontext-defined fact content to the user by a specific name.  If you don't <br>\nlike general Local_Theory programming interfaces, you can also do it a <br>\nglobal theory like this:</p>\n<p>setup ‹Global_Theory.add_thms_dynamic (@{binding foo}, undefined)›</p>\n<p>The \"undefined\" function accesses your tool-specific facts.  You can <br>\nmaintain that in any way you like, e.g. via Generic_Data in the context.</p>\n<p>Makarius</p>",
        "id": 294654863,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661167628
    }
]