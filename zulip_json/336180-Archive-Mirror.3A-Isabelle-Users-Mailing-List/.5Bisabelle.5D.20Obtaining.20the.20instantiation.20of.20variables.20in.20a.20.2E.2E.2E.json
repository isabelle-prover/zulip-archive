[
    {
        "content": "<p>From: Stephy Wong &lt;<a href=\"mailto:s.wong.731@googlemail.com\">s.wong.731@googlemail.com</a>&gt;<br>\nHi all,</p>\n<p>Given the trivial proof for EX x. x &gt;' 0' by using the axiom 1' &gt;' 0', is<br>\nthere a way to see by which term x is instantiated (by 1' in this case)? Can<br>\nthis be done in PG? If not, how can this be done in ML?</p>\n<p>Thanks</p>\n<p>Steph</p>",
        "id": 294076081,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660828934
    },
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\nStephy Wong wrote:<br>\nIf your goal is an EX, you can provide the witness by instantiating the<br>\nexI thm before use:</p>\n<p>apply(rule_tac x = \"1'\" in exI)</p>\n<p>Pls read Section 5.9, Quantifiers, of the Tutorial.</p>\n<p>Tobias</p>",
        "id": 294076147,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660828965
    },
    {
        "content": "<p>From: Stephy Wong &lt;<a href=\"mailto:s.wong.731@googlemail.com\">s.wong.731@googlemail.com</a>&gt;<br>\nOn Wed, Apr 15, 2009 at 10:53 AM, Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt; wrote:</p>\n<blockquote>\n<p>Stephy Wong wrote:</p>\n<blockquote>\n<p>Hi all,</p>\n<p>Given the trivial proof for EX x. x &gt;' 0' by using the axiom 1' &gt;' 0', is<br>\nthere a way to see by which term x is instantiated (by 1' in this case)?<br>\nCan<br>\nthis be done in PG? If not, how can this be done in ML?</p>\n<p>Thanks</p>\n<p>Steph</p>\n<p>If your goal is an EX, you can provide the witness by instantiating the<br>\nexI thm before use:</p>\n</blockquote>\n<p>apply(rule_tac x = \"1'\" in exI)</p>\n<p>Pls read Section 5.9, Quantifiers, of the Tutorial.</p>\n</blockquote>\n<p>Thanks. What I actually meant is that is it possible to obtain the<br>\ninstantiation(s) that Isabelle has found automatically? The example I gave<br>\nis a trivial one that Isabelle can proof automatically, but I'm interested<br>\nin seeing how Isabelle instantiates the theorem. Does this need to be done<br>\nin ML? Sorry for the confusion.</p>\n<p>Thanks</p>\n<p>Steph</p>\n<blockquote>\n<p>Tobias<br>\n</p>\n</blockquote>",
        "id": 294076202,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660828989
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nYou need some tiny bit of ML, namely:</p>\n<p>ML \"proofs := 2\";</p>\n<p>Now you can inspect what happens internally, although the details of <br>\nautomated tools are often hard to follow.  For example:</p>\n<p>lemma a: \"EX x::nat. x &gt; 0\" by auto</p>\n<p>full_prf a</p>\n<p>ccontr % EX x. 0 &lt; x %%<br>\n  (Lam H: ~ (EX x. 0 &lt; x).<br>\n    HOL.swap % EX x. 0 &lt; x % False %% H %%<br>\n     (Lam H: ~ False.<br>\n       exI % TYPE(nat) % op &lt; 0 % Suc ?a2 %% (zero_less_Suc % ?a2)))</p>\n<p>This is nat too bad: it says in the last line that exI was used with the <br>\nterm \"Suc ?a2\", for an arbitrary ?a2. If you try this with \"by arith\" <br>\ninstead, you get less satisfactory output, though.</p>\n<p>Makarius</p>",
        "id": 294076274,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660829020
    },
    {
        "content": "<p>From: John Munroe &lt;<a href=\"mailto:munddr@googlemail.com\">munddr@googlemail.com</a>&gt;<br>\nHi Makarius,</p>\n<p>I'm trying out some instructions  you gave earlier, but I keep getting<br>\nan error saying:</p>\n<p>\"*** reconstruct_proof: minimal proof object<br>\n*** At command \"full_prf\".\"</p>\n<p>prf a works for me though and gives:</p>\n<p>ccontr % _ %% (Lam H: _. ? %% H %% (Lam H: _. zero_less_Suc % _))</p>\n<p>Thanks<br>\nJohn</p>\n<p>Makarius wrote:</p>",
        "id": 294082607,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660831181
    }
]