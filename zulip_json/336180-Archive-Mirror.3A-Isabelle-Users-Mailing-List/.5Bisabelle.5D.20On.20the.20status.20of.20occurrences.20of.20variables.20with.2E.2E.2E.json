[
    {
        "content": "<p>From: mailing-list anonymous &lt;<a href=\"mailto:mailing.list.anonymous@gmail.com\">mailing.list.anonymous@gmail.com</a>&gt;<br>\nDear All,</p>\n<p>Recently, I encountered an issue which I find slightly difficult to<br>\nunderstand. I have already mentioned this issue on the mailing list, but<br>\nonly as a side remark in a reply to another thread (<br>\n<a href=\"https://lists.cam.ac.uk/pipermail/cl-isabelle-users/2019-July/msg00060.html\">https://lists.cam.ac.uk/pipermail/cl-isabelle-users/2019-July/msg00060.html</a>).<br>\nAs far as I am concerned, the question in the aforementioned thread was<br>\nalready answered in full and there is no reason to keep the thread alive.<br>\nFurthermore, I am slightly worried that most of the regular users who can<br>\neasily provide commentary on the remark would not have read it because of<br>\nwhere it was posted (to make matters even worse, I failed to present the<br>\nissue in the most comprehensive manner, for which I apologize). Therefore,<br>\nI hope it is appropriate to repost the issue as an explicit thread.</p>\n<p>Effectively, the issue comes down to establishing the recommended practices<br>\nwith regard to the use of different types for variables with identical<br>\nnames/indexnames in a single context/theorem/term in Isabelle/HOL. The<br>\nproblem is that, on one hand, there is much infrastructure in place to<br>\nprevent users from using different types for variables with identical<br>\nnames/indexnames. Nevertheless, on the other hand, the logic does allow it<br>\nand it is not too difficult to introduce theorems (even accidentally) which<br>\nuse different types for variables with the same name/indexname.</p>\n<p>More specifically, I have the following questions, the second being of<br>\ncertain practical significance:</p>\n<ol>\n<li>\n<p>Is introducing theorems that use differing types for variables with the<br>\nidentical names/indexnames is considered to be a bad style, is it<br>\ncompletely illegal or, perhaps, it is actively exploited by user packages<br>\nthat I am not aware of?</p>\n</li>\n<li>\n<p>Is it acceptable for the user packages to assume that all variables in<br>\nthe theorems that they receive as inputs from the users do not have any<br>\noccurrences of variables with the identical names/indexnames and different<br>\ntypes?</p>\n</li>\n</ol>\n<p>An example of a theorem that has occurrences of variables with the same<br>\nname, but different types:</p>\n<p>locale myloc =<br>\n  fixes B :: \"'b::plus\"<br>\n  assumes \"B ≡ B\"<br>\nbegin</p>\n<p>ML ‹</p>\n<p>fun mk_eq_thm' lthy =<br>\nlet<br>\n  val T = TFree (\"'b\", [\"HOL.type\"])<br>\n  val ct = Free (\"B\", T) |&gt; Thm.cterm_of lthy<br>\n  val thm = ct |&gt; Thm.reflexive<br>\n  val thm = Thm.implies_intr<br>\n    (@{term True} |&gt; HOLogic.mk_Trueprop |&gt; Thm.cterm_of lthy)<br>\n    thm<br>\n  val lthy = Local_Theory.note ((@{binding mythm'}, []), single thm) lthy<br>\n    |&gt; snd<br>\nin lthy end</p>\n<p>›</p>\n<p>local_setup ‹mk_eq_thm'›</p>\n<p>definition C where \"C = (B = B)\"<br>\nlemma True_C: \"C = True\" unfolding C_def by auto</p>\n<p>declare [[show_sorts]]<br>\nlemmas mythm'' = mythm'[folded True_C, unfolded C_def]<br>\n(* theorem mythm'': (B::'b::plus) = B ⟹ B::'b::type ≡ B *)</p>\n<p>end</p>\n<p>Thank you</p>",
        "id": 294760749,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661199431
    },
    {
        "content": "<p>From: Lawrence Paulson &lt;<a href=\"mailto:lp15@cam.ac.uk\">lp15@cam.ac.uk</a>&gt;</p>\n<blockquote>\n<p>On 18 Jul 2019, at 00:11, mailing-list anonymous &lt;<a href=\"mailto:mailing.list.anonymous@gmail.com\">mailing.list.anonymous@gmail.com</a>&gt; wrote:</p>\n<p>More specifically, I have the following questions, the second being of<br>\ncertain practical significance:</p>\n</blockquote>\n<blockquote>\n<ol>\n<li>Is introducing theorems that use differing types for variables with the<br>\nidentical names/indexnames is considered to be a bad style, is it<br>\ncompletely illegal or, perhaps, it is actively exploited by user packages<br>\nthat I am not aware of?</li>\n</ol>\n</blockquote>\n<p>I think it’s terrible style, and as your example shows, you have to work quite hard to accomplish this.</p>\n<blockquote>\n<ol start=\"2\">\n<li>Is it acceptable for the user packages to assume that all variables in<br>\nthe theorems that they receive as inputs from the users do not have any<br>\noccurrences of variables with the identical names/indexnames and different<br>\ntypes?</li>\n</ol>\n</blockquote>\n<p>I think so.</p>\n<p>Larry</p>",
        "id": 294760996,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661199554
    },
    {
        "content": "<p>From: mailing-list anonymous &lt;<a href=\"mailto:mailing.list.anonymous@gmail.com\">mailing.list.anonymous@gmail.com</a>&gt;<br>\nDear Lawrence Paulson/All,</p>\n<p>Thank you for your reply.</p>\n<p>I believe that it would be useful to explain what you stated in your email<br>\nin the implementation manual. Of course, while it is difficult/impossible<br>\nto introduce new theorems that use variables with the same name and<br>\ndifferent types using Isar commands only, it is very easy to do so via the<br>\npublic ML interface, even by mistake. Unless I have missed something, this<br>\nissue does not seem to be covered at all (I believe that the manual merely<br>\nstates that the type inference mechanism rejects such cases). Given that<br>\nusing the variables with the same name and different types is considered to<br>\nbe a 'terrible' style, it makes me wonder why the public ML interface<br>\npermits it at all... are there any use cases or any plans to exploit this<br>\nfeature of the logic in the future?</p>\n<p>Thank you</p>",
        "id": 294761015,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661199566
    },
    {
        "content": "<p>From: Lawrence Paulson &lt;<a href=\"mailto:lp15@cam.ac.uk\">lp15@cam.ac.uk</a>&gt;<br>\nAs a general rule, style is a matter of choice. This particular issue does not seem to arise frequently in practice. It is more common in the HOL world, but even there it doesn’t appear to be a source of controversy.</p>\n<p>Larry Paulson</p>",
        "id": 294761097,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661199603
    }
]