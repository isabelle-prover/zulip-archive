[
    {
        "content": "<p>From: Alfio Martini &lt;<a href=\"mailto:alfio.martini@acm.org\">alfio.martini@acm.org</a>&gt;<br>\nDear Isabelle Users,</p>\n<p>In the script bellow, I was expecting to solve lemmas 01 and  04 directly by<br>\nreflexivity of equality, like the<br>\nother ones, since both terms are the same.. But the simplifier tells me<br>\nthat I have to use also the equation len01, to substitute len(Empty) for Z.<br>\nWhat (basic fact) am I missing here?</p>\n<p>Many thanks,</p>\n<hr>\n<p>theory equality<br>\nimports Main</p>\n<p>begin<br>\n datatype Nat = Z | suc Nat<br>\n datatype 'a List = Empty | cons 'a \"'a List\"</p>\n<p>primrec add :: \"Nat =&gt; Nat =&gt; Nat\"<br>\n  where<br>\n    add01: \"(add x Z) = x\" |<br>\n    add02: \"(add x (suc y)) = suc (add x y)\"</p>\n<p>primrec cat :: \"'a List =&gt; 'a List =&gt; 'a List\"<br>\n   where<br>\n     cat01: \"(cat Empty list) = list\" |<br>\n     cat02: \"(cat (cons head tail) list) = cons head (cat tail list)\"</p>\n<p>primrec len :: \"'a List =&gt; Nat\"<br>\n   where<br>\n     len01: \"(len Empty) = Z\" |<br>\n     len02: \"(len (cons head tail)) = suc(len tail)\"</p>\n<p>thm \"refl\"<br>\n(* lemma 00 *)<br>\nlemma \"cat Empty Empty  = cat Empty Empty\" by (rule refl)<br>\n(* lemma 01 *)<br>\nlemma \"len Empty = len Empty\"  by (simp only:len01)<br>\n(*lemma 02 *)<br>\nlemma \"add (len x) (len y) = add (len x) (len y)\" by (rule refl)<br>\n(* lemma 03 *)<br>\nlemma \"add (len x) (len y) = add (len x) (len y)\" by (simp only: refl)<br>\n(* lemma 04 *)<br>\nlemma  \"add (len Empty) (len Empty) = add (len Empty) (len Empty)\"<br>\n    by (simp only: len01)<br>\nend</p>",
        "id": 294145237,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660847248
    },
    {
        "content": "<p>From: Lawrence Paulson &lt;<a href=\"mailto:lp15@cam.ac.uk\">lp15@cam.ac.uk</a>&gt;<br>\nThe two terms are not identical. Each instance of Empty in len Empty has a separate type.<br>\nLarry Paulson</p>",
        "id": 294145254,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660847254
    },
    {
        "content": "<p>From: Alfio Martini &lt;<a href=\"mailto:alfio.martini@acm.org\">alfio.martini@acm.org</a>&gt;<br>\nVery well!!</p>\n<p>Thank you!</p>",
        "id": 294145266,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660847260
    },
    {
        "content": "<p>From: Lars Noschinski &lt;<a href=\"mailto:noschinl@in.tum.de\">noschinl@in.tum.de</a>&gt;<br>\nNo, the two subtterms left and right of the equality sign are not <br>\nexactly the same. Unfortunately, it is a bit misleading how this goal is <br>\npresented by Isabelle. If you enable the display of types, you get at <br>\nleast a hint about what is going wrong:</p>\n<p>lemma \"len Empty = len Empty\"<br>\n   using [[show_types]]</p>\n<p>outputs</p>\n<p>proof (prove): step 0</p>\n<p>goal (1 subgoal):</p>\n<p>1. len Empty = len Empty<br>\n   type variables:<br>\n     'a, 'b :: type</p>\n<p>As you see, there are two type variables occuring in this term: Empty is <br>\npolymorphic, but there are no constraints, which would enforce a <br>\nparticular instantiation of the polymorphic type variable -- not even <br>\nthat the types of the left and right Empty should be the same.</p>\n<p>For this reason, refl is not applicable here.</p>\n<p>-- Lars</p>",
        "id": 294145286,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660847266
    }
]