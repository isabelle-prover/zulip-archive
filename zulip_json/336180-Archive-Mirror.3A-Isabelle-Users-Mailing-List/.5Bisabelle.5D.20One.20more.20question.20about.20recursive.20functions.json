[
    {
        "content": "<p>From: Tambet &lt;<a href=\"mailto:qtvali@gmail.com\">qtvali@gmail.com</a>&gt;<br>\nThis is a conceptual question - I would need an answer soon, but it's quite<br>\nmuch to optimize my learning paths.</p>\n<p>Say that I have a set of mutually recursive functions [A_0..A_n].</p>\n<p>Then I make up a set of properties [P_0..P_m], which apply to inputs and<br>\noutputs of those functions.</p>\n<p>Say that those n and m are natural numbers (so that the sequences are<br>\nfinite).</p>\n<p>For example, this:</p>\n<p>- A_0 might return a result or call A_1 with some value and return it's<br>\n   result in slightly modified form.</p>\n<p>- A_1 might return a result or call A_2 in same way.<br>\n   - A_2 might call A_0 or A_1 depending on something.</p>\n<p>This makes up somewhat complicated call path.</p>\n<p>I want to prove that in case a call to A_2 returns, it's result will have<br>\nproperty P_x iff it's input has property P_y.</p>\n<p>Assume that I can prove that:</p>\n<p>- In case parameter passed to A_2 has property P_y, it will<br>\n      - call A_0 with parameter having property P_0 or<br>\n      - call A_0 with parameter having property P_1 or<br>\n      - call A_1 with parameter having property P_0<br>\n   - In case parameter of call to A_0 has property P_0<br>\n      - It will instantly return result, which has property P_1<br>\n   - and so on</p>\n<p>In case I am able to prove those things about concrete calls, I have made up<br>\na finite call graph, which is basically having very small mathematical<br>\ncomplexity (in terms of O(f(n)), where n is the number of facts I have given<br>\nit and f(n) is the number of operations). It would be also nice knowledge<br>\nabout how to make functions over those properties so that I could show that<br>\nreturn values of them are decreasing to show that function will always<br>\nreturn, but this raises the complexity so much that I better won't ask it<br>\nright now - I will ask it later, when I have learnt to handle the more basic<br>\ncase :)</p>\n<p>Second case is about returning in this simple graph. Could I show that for<br>\nsome property of value, another function will be called with such value that<br>\nthird function will be called and third will call second one with such<br>\nproperty that it forms a cycle?</p>\n<p>Tambet</p>",
        "id": 294113281,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660837515
    }
]