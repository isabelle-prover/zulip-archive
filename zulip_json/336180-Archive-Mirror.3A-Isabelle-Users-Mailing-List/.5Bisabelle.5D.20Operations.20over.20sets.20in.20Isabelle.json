[
    {
        "content": "<p>From: Peter Gammie &lt;<a href=\"mailto:peteg42@gmail.com\">peteg42@gmail.com</a>&gt;<br>\nQuick answer: I think you can. Check out my \"WorkerWrapper\" AFP entry - Nats.thy. Roughly you want to define your operations and then instantiate the plus class (untested, but you get the idea I hope):</p>\n<p>types 'a NumSet = \"'a set\"</p>\n<p>definition<br>\n \"add xs ys = { x + y | x y. x : xs /\\ y : ys }\"</p>\n<p>instantiation set :: (plus) plus<br>\nbegin<br>\ndefinition plus_set_def[simp]: \"xs + ys \\&lt;equiv&gt; add xs ys\"<br>\ninstance ..<br>\nend</p>\n<p>The instantiation line says \"for any type 'a that has a plus instance, define a plus instance for 'a set\".</p>\n<p>There are a bunch of other classes that just overload syntax like this. You could get more serious and try to crank the algebraic ones too.</p>\n<p>cheers<br>\npeter</p>",
        "id": 294107173,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660835602
    },
    {
        "content": "<p>From: Brian Huffman &lt;<a href=\"mailto:brianh@cs.pdx.edu\">brianh@cs.pdx.edu</a>&gt;<br>\nOn Tue, May 4, 2010 at 12:52 AM, Peter Gammie &lt;<a href=\"mailto:peteg42@gmail.com\">peteg42@gmail.com</a>&gt; wrote:</p>\n<blockquote>\n<p>On 04/05/2010, at 12:31 AM, grechukbogdan wrote:</p>\n<blockquote>\n<p>Also, can I use the same notations “+” and “*”? If so, how?</p>\n</blockquote>\n<p>Quick answer: I think you can. Check out my \"WorkerWrapper\" AFP entry - Nats.thy. Roughly you want to define your operations and then instantiate the plus class (untested, but you get the idea I hope):</p>\n<p>types 'a NumSet = \"'a set\"</p>\n<p>definition<br>\n \"add xs ys = { x + y | x y. x : xs /\\ y : ys }\"</p>\n<p>instantiation set :: (plus) plus<br>\nbegin<br>\ndefinition plus_set_def[simp]: \"xs + ys \\&lt;equiv&gt; add xs ys\"<br>\ninstance ..<br>\nend</p>\n<p>The instantiation line says \"for any type 'a that has a plus instance, define a plus instance for 'a set\".</p>\n</blockquote>\n<p>Unfortunately this instantiation command won't work in any version of<br>\nIsabelle since 2008.</p>\n<p>For the past few years now, the type \"'a set\" is merely an<br>\nabbreviation for \"'a =&gt; bool\". You can define overloaded operations at<br>\nthis type, but to do so you must define them uniformly for all<br>\nfunction types \"'a =&gt; 'b\". (You can require the result type 'b to be<br>\nin the type class of your choosing.) There are some examples of such<br>\ninstantiations in HOL/Lattices.thy. Here's the definition for<br>\nsubtraction on functions; when the result type is \"bool\" it is the set<br>\ndifference operation, but it also defines subtraction pointwise for<br>\ntypes like \"'a =&gt; int\", etc.</p>\n<p>instantiation \"fun\" :: (type, minus) minus<br>\nbegin</p>\n<p>definition<br>\n  fun_diff_def: \"A - B = (\\&lt;lambda&gt;x. A x - B x)\"</p>\n<p>instance ..</p>\n<p>end</p>\n<p>This also brings up the point that many of the operations you want to<br>\ndefine for sets (like subtraction) might already be defined in a<br>\ndifferent way.</p>\n<blockquote>\n<p>There are a bunch of other classes that just overload syntax like this. You could get more serious and try to crank the algebraic ones too.</p>\n</blockquote>\n<p>If you want to use all the existing classes with their syntax, you<br>\ncould do it by defining your own copy of the \"set\" type constructor,<br>\nlike this:</p>\n<p>typedef 'a myset = \"UNIV :: 'a set set\" ..</p>\n<p>instantation myset :: (plus) plus<br>\nbegin<br>\n...</p>\n<p>The drawback is that you will now have to explicitly convert values<br>\nback and forth between types \"'a set\" and \"'a myset\", using the<br>\nRep_myset and Abs_myset functions. (Although you could create nice and<br>\nconcise syntax for those too, if you wanted.)</p>\n<p>Another workaround is to forget about the type classes, and define new<br>\nfunctions that use the same syntax as the old overloaded functions.<br>\nFor example:</p>\n<p>no_notation plus (infixl \"+\" 65)</p>\n<p>definition<br>\n  myplus :: \"'a::plus set =&gt; 'a set =&gt; 'a set\" (infixl \"+\" 65)<br>\nwhere<br>\n  \"A + B = {plus x y |x y. x : A &amp; y : B}\"</p>\n<p>(Note that you must now use the name \"plus\" to refer to the old \"+\",<br>\nsince \"+\" now means \"myplus\".)</p>\n<p>As a final alternative (although I really don't recommend this method)<br>\nyou could do like above, but skip the no_notation command; now you<br>\nwill have two constants, \"plus\" and \"myplus\", with the same syntax.<br>\nIsabelle will print a warning message every time it parses the \"+\"<br>\nsyntax, but as long as only one parse tree is type-correct, it will<br>\naccept the input.</p>\n<p>Hope this helps,</p>\n<ul>\n<li>Brian</li>\n</ul>",
        "id": 294107274,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660835638
    },
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\nBrian Huffman schrieb:<br>\nHow about using a different symbol, eg:</p>\n<p>definition  setplus :: \"'a::plus set =&gt; 'a set =&gt; 'a set\" (infixl \"{+}\" 65)<br>\nwhere  \"A {+} B = {x + y |x y. x : A &amp; y : B}\"</p>\n<p>You can still make use of type classes, eg</p>\n<p>interpretation setplus_sg:<br>\n  semigroup \"op {+} :: 'a::semigroup_add set =&gt; 'a set =&gt; 'a set\"<br>\nproof .... qed</p>\n<p>which yields the generic thm setplus_sg.assoc that works on all<br>\nsemigroups with +.</p>\n<p>Tobias</p>",
        "id": 294107342,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660835650
    },
    {
        "content": "<p>From: grechukbogdan &lt;<a href=\"mailto:grechukbogdan@yandex.ru\">grechukbogdan@yandex.ru</a>&gt;<br>\nDear Isabelle Users</p>\n<p>I need to use (introduce?) operations over sets in Isabelle. For example, if operation “+” is defined for elements of sets, then we can define sum A+B as a set {c. c=a+b &amp; a\\in A &amp; b \\in B}  (for example, sum of sets {a,b,c} and {d,e} will be set {a+d, a+e, b+d, b+e, c+d, c+e}). Similarly, if we can multiply elements of set by a constant c, then we can multiply any set A by this constant with definition c<em>A={d. d=c</em>a &amp; a\\in A}. </p>\n<p>I need to use these operations in R^n, but they can be defined in a more general setting (in a vector space over any field).</p>\n<p>The question is, if such operations are already defined in Isabelle? I do not want to redefine such basic concepts, if it already exists. But I cannot find something like this in the Library...</p>\n<p>If not, is there any suggestions how exactly I should define this (for example, if such a definition exists in HOL light, it would be better to define them in Isabelle similarly). </p>\n<p>Also, can I use the same notations “+” and “*”? If so, how?</p>\n<p>Sincerely,<br>\nBogdan Grechuk.</p>",
        "id": 294108056,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660835877
    },
    {
        "content": "<p>From: Florian Haftmann &lt;<a href=\"mailto:florian.haftmann@informatik.tu-muenchen.de\">florian.haftmann@informatik.tu-muenchen.de</a>&gt;<br>\nHi Bogdan,</p>\n<p>as far as I understand, you want to take the product of two sets and<br>\nthen apply a binary operator on it.  This can be done using the existing<br>\n image (`) and product operators (&lt;*&gt;), e.g.</p>\n<p>(\\&lt;lambda&gt;(a, b). a + b) ` (A &lt;*&gt; N)</p>\n<p>form the sum of two sets.</p>\n<p>Hope this helps,<br>\n    Florian<br>\n<a href=\"/user_uploads/14278/fjBoGnWhK4I39mx6pjwCR4MF/signature.asc\">signature.asc</a></p>",
        "id": 294108566,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660836016
    },
    {
        "content": "<p>From: Jeremy Avigad &lt;<a href=\"mailto:avigad@cmu.edu\">avigad@cmu.edu</a>&gt;<br>\nIn fact, the operations are defined in the file \"SetsAndFunctions\" in <br>\nLibrary, with useful rewrite rules for appropriately general type classes.</p>\n<p>Best wishes,</p>\n<p>Jeremy</p>\n<p>Florian Haftmann wrote:</p>",
        "id": 294108755,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660836080
    }
]