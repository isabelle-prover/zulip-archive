[
    {
        "content": "<p>From: Iulia Dragomir &lt;<a href=\"mailto:iulia.dragomir@aalto.fi\">iulia.dragomir@aalto.fi</a>&gt;<br>\nDear list,</p>\n<p>I have a question regarding the printing of terms in the Output panel of<br>\nIsabelle jedit.<br>\nWhenever I have a term such as<br>\n   term \"λx. (0 ≤ x)\"<br>\nthis gets rewritten as<br>\n   \"op ≤ 0\"<br>\nIs there a way to turn off this printing and see the term as it is defined?</p>\n<p>Best regards,<br>\nIulia Dragomir</p>",
        "id": 294694668,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661178039
    },
    {
        "content": "<p>From: Andreas Lochbihler &lt;<a href=\"mailto:andreas.lochbihler@inf.ethz.ch\">andreas.lochbihler@inf.ethz.ch</a>&gt;<br>\nDear Iulia,</p>\n<p>By default, pretty-printing eta-contracts terms. In your example, \"%x. 0 &lt;= x\" is <br>\ninternally represented as \"%x. (op &lt;=) 0 x\", which is contracted to \"(op &lt;=) x\", where \"op <br>\n&lt;=\" is the prefix syntax for the less-than-or-equal operation. You can control <br>\neta-contraction for pretty-printing with the attribute [[eta_contract]]. So, after</p>\n<p>declare [[eta_contract=false]]</p>\n<p>your term should print the way you have input it. Note, however, that some proof methods <br>\ninternally perform eta expansion (in particular induction, subst, and simp with congruence <br>\nrules), so you may see lots of such eta-expanded terms in your goal state, but you can <br>\nstill write them in the contracted form in \"show\" or \"have\" commands.</p>\n<p>Hope this helps,<br>\nAndreas</p>",
        "id": 294694709,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661178050
    }
]