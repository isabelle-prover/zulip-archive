[
    {
        "content": "<p>From: John Munroe &lt;<a href=\"mailto:munddr@gmail.com\">munddr@gmail.com</a>&gt;<br>\nHi all,</p>\n<p>I'm having some rather strange behaviour while using<br>\nOutput.warning_fn. For example, if I have:</p>\n<p>val trm = @{term \"(P::bool)\"};<br>\nval (Free(_,T)) = trm;<br>\nval typ_str = Syntax.string_of_typ @{context} T;<br>\nval inp = Output.output typ_str;<br>\n! Output.warning_fn inp;</p>\n<p>I get a pretty \"### bool\" shown in the response. However, if I try:</p>\n<p>val f = Unsynchronized.ref (Output.std_output o suffix \"\\n\" o<br>\nprefix_lines \"### \");<br>\n! f inp;</p>\n<p>I get an YXML tree. How come ! Output.warning_fn inp and ! f inp<br>\nreturn different results?</p>\n<p>Thanks for any help in advance.</p>\n<p>John</p>",
        "id": 294123213,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660840466
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nThese hooks for Isabelle output channels are definitely private aspects of <br>\nthe system implementation and should never be touched in user space.  To <br>\nemphasize this further, they are called something like <br>\nOutput.Private_Hooks.warning_fn in the coming release, and will become <br>\nfully private at some later stage.</p>\n<p>Moreover, having seen more discussion of accidental implementation details <br>\nin Christian Urban's cookbook, I have recently made some efforts to adapt <br>\nthe pretty printing of formatted output to reflect the idea of an abstract <br>\ndatatype of Isabelle messages, even if it is all just concrete strings for <br>\nhistorical reasons.</p>\n<p>To cut a long story short: in user code the only thing that can be done <br>\nwith formatted formal entities (Syntx.pretty_term etc.) is to paste them <br>\ntogether and pass them on to writeln etc. without guessing at further <br>\nimplementation details.</p>\n<p>Makarius</p>",
        "id": 294123571,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660840587
    }
]