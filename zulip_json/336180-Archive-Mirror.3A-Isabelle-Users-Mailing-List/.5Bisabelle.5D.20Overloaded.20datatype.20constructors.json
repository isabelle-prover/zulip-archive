[
    {
        "content": "<p>From: Alexander Krauss &lt;<a href=\"mailto:krauss@in.tum.de\">krauss@in.tum.de</a>&gt;<br>\nHi all,</p>\n<p>I wonder if it is possible (possibly via some tricks) to make datatype <br>\nconstructors coincide with overloaded constants.</p>\n<p>The only datatype in Isabelle/HOL with overloaded constructors is the <br>\ntype \"nat\", where 0 is overloaded. That type is defined via an explicit <br>\nconstruction followed by rep_datatype, for bootstrapping reasons.</p>\n<p>But there are situations where it is natural to use overloading in a <br>\ndatatype, even for only syntactic reasons. For example, in a type of <br>\nregular expressions it would be natural to use +,*,0,1.</p>\n<p>The only way to achieve this that I can think of is the following, but <br>\nit is rather tricky:</p>\n<p>1) Define an auxiliary datatype with non-overloaded constructors</p>\n<p>2) Define an isomorphic copy of that datatype. Define the overloaded <br>\nconstants as the lifted constructors, possibly using lifting machinery.</p>\n<p>3) Use rep_datatype on the isomorphic copy.</p>\n<p>Has anybody got a better idea? I feel that the above is too technical to <br>\nbe worth the effort.</p>\n<p>Is it conceivable that a fully localized datatype package could do this <br>\ndirectly, when used in an instantiation target???</p>\n<p>Alex</p>",
        "id": 294155875,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660851178
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nYes, a properly datatype package would be able to do this.  Constructor <br>\ndefinitions are just definitions.</p>\n<p>It should now also work with sophisticated syntax translations attached to <br>\nthem, because I've recently changed the \"locale_const\" scheme to use plain <br>\nname space aliases for the special case where a locally defined term does <br>\nnot depend on context parameters.  This means the syntax layer would see <br>\nthe global foundation constant in any case, not a funny abbreviation.</p>\n<p>So it is now merely a matter to go through all the primitive and derived <br>\nML proofs of the package, and do the right thing wrt. \"Free\" variables.</p>\n<p>Makarius</p>",
        "id": 294155997,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660851229
    },
    {
        "content": "<p>From: Alexander Krauss &lt;<a href=\"mailto:krauss@in.tum.de\">krauss@in.tum.de</a>&gt;<br>\nNow that I've thought about this, I no longer see how this could work: <br>\nSuppose I want to define the type \"'a re\" of regular expressions, and <br>\noverload just 0: I cannot write</p>\n<p>instantiation re :: (type) zero<br>\n   begin</p>\n<p>before the type re is defined. So defining re inside this instantiation <br>\ntarget won't work, unfortunately. To make this work, the package and the <br>\ntarget would need to interact in a non-standard way, which seems far <br>\nbeyond the current architecture. Bad luck.</p>\n<p>Anyway, for this application the advantage would just be syntactic, so <br>\nit is no big deal.</p>\n<p>Alex</p>",
        "id": 294156025,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660851242
    }
]