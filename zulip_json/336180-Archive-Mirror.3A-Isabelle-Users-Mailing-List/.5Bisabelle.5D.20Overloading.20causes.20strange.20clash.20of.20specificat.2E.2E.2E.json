[
    {
        "content": "<p>From: Ondřej Kunčar &lt;<a href=\"mailto:kuncar@in.tum.de\">kuncar@in.tum.de</a>&gt;<br>\nHi Andreas,<br>\nthe problem is that R in R_nat_def is defined with type \"('c =&gt; 'd) =&gt; <br>\n('c =&gt; 'e) =&gt; bool\".</p>\n<p>The following works around the problem:</p>\n<p>overloading R' ≡ \"R :: (nat ⇒ 'a) ⇒ (nat ⇒ 'b) ⇒ bool\"  begin<br>\n   definition R_nat_def: \"(R':: (nat ⇒ 'a) ⇒ (nat ⇒ 'b) ⇒ bool) f g = <br>\n(∀x. R (f x) (g x))\"<br>\n   end</p>\n<p>Ondrej</p>",
        "id": 294644051,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661163304
    },
    {
        "content": "<p>From: Andreas Lochbihler &lt;<a href=\"mailto:andreas.lochbihler@inf.ethz.ch\">andreas.lochbihler@inf.ethz.ch</a>&gt;<br>\nHi Ondrej,</p>\n<p>Thanks for the hint. In the single-parameter case, I had added the type constraints, which <br>\nmade it go through, but I forgot to do the same for the two-parameter case.</p>\n<p>Still, I wonder why they are necessary in the first place. In the end, I have already <br>\nfixed the type of R' in the overloading part.</p>\n<p>Best,<br>\nAndreas</p>",
        "id": 294644224,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661163371
    },
    {
        "content": "<p>From: Andreas Lochbihler &lt;<a href=\"mailto:andreas.lochbihler@inf.ethz.ch\">andreas.lochbihler@inf.ethz.ch</a>&gt;<br>\nDear all,</p>\n<p>I am trying to overload a constant using the overloading target. However, I get an error <br>\nthat my specifications clash, even though I cannot see why. Here is the minimised example:</p>\n<p>consts R :: \"'a ⇒ 'b ⇒ bool\"</p>\n<p>overloading R' ≡ \"R :: (nat ⇒ 'a) ⇒ (nat ⇒ 'b) ⇒ bool\"  begin<br>\n   definition R_nat_def: \"R' f g = (∀x. R (f x) (g x))\"<br>\n   end</p>\n<p>overloading R' ≡ \"R :: ('a list ⇒ 'b) ⇒ ('c list ⇒ 'd) ⇒ bool\" begin<br>\n   definition R_list_def: \"R' f g = (∀xs ys. R (f xs) (g ys))\"<br>\n   end</p>\n<p>The second definition raises the error, but the two definitions should be fine as the <br>\ntypes of the overloaded constant cannot be unified and the recursive calls to R occur only <br>\nat smaller types. Interestingly, if I throw out one parameter, everything works fine:</p>\n<p>consts P :: \"'a ⇒ bool\"</p>\n<p>overloading P' ≡ \"P :: (nat ⇒ 'a) ⇒ bool\"  begin<br>\n   definition P_nat_def: \"P' (f :: nat ⇒ 'a) = (∀x. P (f x))\"<br>\n   end</p>\n<p>overloading P' ≡ \"P :: ('b list ⇒ 'a) ⇒ bool\" begin<br>\n   definition P_list_def: \"P' (f :: 'b list ⇒ 'a) = (∀x. P (f x))\"<br>\n   end</p>\n<p>So what is going on here? Why does the two parameter-case fail? And how can I avoid the <br>\nfailure?</p>\n<p>Thanks in advance for any hints,<br>\nAndreas</p>",
        "id": 294646998,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661164530
    }
]