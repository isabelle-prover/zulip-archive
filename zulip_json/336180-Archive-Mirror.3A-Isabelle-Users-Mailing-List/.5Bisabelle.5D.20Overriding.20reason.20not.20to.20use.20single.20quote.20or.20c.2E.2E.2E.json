[
    {
        "content": "<p>From: Gottfried Barrow &lt;<a href=\"mailto:gottfried.barrow@gmx.com\">gottfried.barrow@gmx.com</a>&gt;<br>\nHi,</p>\n<p>I try not to ask these simple questions when I know so little, but I'd <br>\nneed to ask this eventually. It's better to ask now, than later with a <br>\ncouple thousand lines of code.</p>\n<p>I've read the style guide in implementation.pdf, so I've read and seen <br>\nthat the preferred identifier naming scheme uses the underscore <br>\ncharacter \"_\". However, I don't like how it looks, but a bigger issue is <br>\nthat I have to escape it in Latex. Right now, I'm not using the Isabelle <br>\nLatex processing.</p>\n<p>I'm kind of settling on a combination of limited camelcase use, and <br>\nusing the single quote character, ( ' ), to separate words in an identifier.</p>\n<p>For example, I have the identifer \"emS'is'unique\". Below, I include a <br>\nvery fledgling theory where I don't know what I'm doing. It's to show <br>\nsome of my identifier naming.</p>\n<p>I haven't seen any naming like \"emS'is'unique\". Is this just a matter of <br>\npreference, or would doing a lot of that come back to haunt me? I'm <br>\nassuming if I don't get errors in jEdit when doing that kind of thing, <br>\nit's not going to come back to haunt me.</p>\n<p>(I haven't figured out if the unicode characters in an email like this <br>\nshow up correctly in other's email readers.)</p>\n<p>Thanks,<br>\nGB</p>\n<p>theory sTs<br>\nimports Main<br>\nbegin<br>\n(<em>sT....The set type.</em>)<br>\ntypedecl sT<br>\n(<em>scP...Axiom schema of comprehension property.</em>)<br>\ntype_synonym scP = \"sT ⇒ bool\"</p>\n<p>axiomatization<br>\n(<em>inS...Set membership predicate.</em>)<br>\ninS:: \"sT ⇒ sT ⇒ bool\" and<br>\n(<em>emS...The empty set.</em>)<br>\nemS:: sT<br>\nwhere<br>\n(<em>emE...The empty set is empty.</em>)<br>\nemE: \"∀a::sT. ¬(inS a emS)\" and<br>\n(<em>upS...Unordered pair set.</em>)<br>\nupS: \"∀(a::sT)(b::sT). (∃c::sT. ∀x. (inS x c) ⟷ (x = a) ∨ (x = b))\" and<br>\n(<em>scS...Schema set: axiom schema of comprehension.</em>)<br>\nscS: \"∀(a::sT)(P::scP). (∃b::sT. ∀x. (inS x b) ⟷ ((inS x a) ∧ (P x)))\"</p>\n<p>(<em>Meaningless. It's merely a result of names.</em>)<br>\ntheorem emS'unique'meaningless : \"(a = emS) ∧ (b = emS) ⟹ a = b\"<br>\nby(auto)</p>\n<p>theorem emS'is'unique: \"a = emS ⟷ (∀x::sT. ¬(inS x a))\"<br>\napply(auto)<br>\noops<br>\nend</p>",
        "id": 294217525,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660895708
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nOn Tue, 3 Jul 2012, Gottfried Barrow wrote:</p>\n<blockquote>\n<p>I've read the style guide in implementation.pdf, so I've read and seen <br>\nthat the preferred identifier naming scheme uses the underscore <br>\ncharacter \"_\". However, I don't like how it looks, but a bigger issue is <br>\nthat I have to escape it in Latex. Right now, I'm not using the Isabelle <br>\nLatex processing.</p>\n</blockquote>\n<p>The Isabelle document preparation system will solve these problems for <br>\nyou.  What are the reasons for not using it?</p>\n<p>Generally, camelCaseWasInventedByPeopleWhoDidNotHaveUnderscoreAvailable<br>\nInTheireCharacterSet, probably around 1960/1970, before ASCII became <br>\nuniversally accepted.  Spacing between words improves readability, this <br>\nwas observed first about 3000 years ago -- the ancient Phoenicians and <br>\nearly Greek writers did not know it yet.  Classic fonts are also designed <br>\nto have capitals in front of words only, not in the middle.  You can see <br>\nthis especially in the Computer Modern fonts of LaTeX.</p>\n<p>Even though our classic (Unix) standard of separating words by underscore <br>\nhas been there from the beginnings (1980-ies/1990-ies), one reason why it <br>\nwas made more explicit in recent years might be the advent of good <br>\ntypographic screen fonts like Bitstream Vera.  Then the rules for proper <br>\ntypography become more important to screen display.</p>\n<p>So why do many younger people still consider camel case as standard?  My <br>\ntheory on the main historical events is that:</p>\n<p>* Xerox PARC that introduced the legendary Xerox Star computer system<br>\n     with bitmap display, mouse, object-oriented programming for GUIs in<br>\n     the 1970-ies was one of these labs living in the IBM-tradition of not<br>\n     having \"_\" on the keyboard nor in the character set.  So the classic<br>\n     workaround to use camelCaseAsAnApproximation was employed.  (You can<br>\n     still see that in the \"Axiom\" programming language, for example, which<br>\n     lacks \"_\" by default.  It is from a genuine IBM lab.)</p>\n<p>* Apple copied that to make the Lisa and Macintosch.</p>\n<p>* MS copied that to make Windows.</p>\n<p>* Almost everybody else copied that as well.</p>\n<p>What remains are a few ancient guys like in the Isabelle, Coq, OCaml<br>\ncommunities, who did not submit to that invasion.</p>\n<blockquote>\n<p>I'm kind of settling on a combination of limited camelcase use, and <br>\nusing the single quote character, ( ' ), to separate words in an <br>\nidentifier.</p>\n<p>For example, I have the identifer \"emS'is'unique\". Below, I include a <br>\nvery fledgling theory where I don't know what I'm doing. It's to show <br>\nsome of my identifier naming.</p>\n</blockquote>\n<p>I don't understand the motivation for that.  The formal Latex generation <br>\nof Isabelle works smoothly with things like @{text foo_bar}, @{thm <br>\nfoo_bar}, even @{ML foo_bar}.</p>\n<p>You can also redefine the default isabelle latex macros to get a slightly <br>\ndifferent glyph for the underscore.</p>\n<blockquote>\n<p>(I haven't figured out if the unicode characters in an email like this <br>\nshow up correctly in other's email readers.)</p>\n</blockquote>\n<p>I would say that should work out in practice, I am doing it myself all the <br>\ntime now.  Strictly speaking one cannot expect 100% reliability of unicode <br>\ntransmission, but such mail threads are not for achiving of 100% correct <br>\nformal sources (unlike a repository which has to be more authentic).</p>\n<p>Makarius</p>",
        "id": 294217898,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660895910
    },
    {
        "content": "<p>From: Gottfried Barrow &lt;<a href=\"mailto:gottfried.barrow@gmx.com\">gottfried.barrow@gmx.com</a>&gt;<br>\nMakarius,</p>\n<p>First, I have been influenced by your emphatic insistence, spoken in <br>\nvarious ways, that we not use camelcase. Now I'm trying to come up with <br>\na solution for long identifiers that doesn't use underscores. Here, I <br>\nresist the temptation to go into a lengthy discussion of my view of the <br>\naesthetics of the underscore. There's a lot of freedom with Isabelle; <br>\nhaving figured that out, I now try to be flexible.</p>\n<blockquote>\n<blockquote>\n<p>...a bigger issue is that I have to escape it [the underscore] in <br>\nLatex. Right now, I'm not using the Isabelle Latex processing.<br>\nThe Isabelle document preparation system will solve these problems for <br>\nyou.  What are the reasons for not using it?</p>\n</blockquote>\n</blockquote>\n<p>Last year, I worked on trying to use Isabelle to produce the PDF docs <br>\nfrom the .thy files. In looking through the source of the tutorial, <br>\nprog-prove.pdf, I can see the benefits of doing things your way, such as <br>\nbeing able to put in hidden \"oops\"s.</p>\n<p>However, there's a problem, and there's a complete show-stopper. You <br>\nshould keep in mind that I'm not willing to live without my Latex <br>\nmacros, especially for sectioning commands, which I tweak to create <br>\ncustomized bookmarks. I think that in itself isn't/wasn't a problem, but <br>\nit complicates things a little. Last year, my solution was to only use <br>\n\"text{<em>...</em>}\", and none of the Isar sectioning commands.</p>\n<p>PROBLEM: To be productive with Latex, you need to compile often, and be <br>\nable to compile fragments. I don't remember if compile speed for a small <br>\ntheory was a problem, but to compile a theory fragment now, I'd have to <br>\nwrite scripts to create temporary .thy files for the fragment, and these <br>\nwould have to import parts of the .thy that I'd be working on, so that <br>\nIsabelle wouldn't choke on a logic error. It's just the hassle of <br>\nswitching over from what I use now, or, possibly, a big hassle.</p>\n<p>SHOW-STOPPER: It's vaguely coming back to me, but I'm pretty sure that <br>\nthe show-stopper was my need for the Verbatim environment. I had to put <br>\nit in a \"text{<em>...</em>}\" command, but \"begin{Verbatim}\" and \"end{Verbatim}\" <br>\nare picky about what can be on the same line with them. I couldn't get <br>\nrid of those errors, that I remember.</p>\n<p>Anyway, I gave up and made the Isar subservient to the Latex in a tex <br>\nfile. I'm now back to making the Latex subservient to the Isar in a thy <br>\nfile by commenting out all the Latex, so that the file can be directly <br>\nloaded into jEdit.</p>\n<p>Right now, I can't spend more time on trying to make things look nice, <br>\nat least done that way. The harder learning curve is Isabelle, and the <br>\nprerequisite knowledge required to use it.</p>\n<blockquote>\n<p>Generally, camelCaseWasInventedByPeopleWhoDidNotHaveUnderscoreAvailable<br>\nInTheireCharacterSet, probably around 1960/1970, before ASCII became <br>\nuniversally accepted.  Spacing between words improves readability, <br>\nthis was observed first about 3000 years ago...</p>\n</blockquote>\n<p>There is the issue that using the underscore for spacing makes a name <br>\nlonger, but I'm seeing it your way, that spacing is important, and that <br>\ncapital letters are best used sparingly. And with a little work, I can <br>\nprobably come up with words that keep the name length down.</p>\n<blockquote>\n<blockquote>\n<p>I'm kind of settling on a combination of limited camelcase use, and <br>\nusing the single quote character, ( ' ), to separate words in an <br>\nidentifier.</p>\n<p>For example, I have the identifer \"emS'is'unique\". Below, I include a <br>\nvery fledgling theory where I don't know what I'm doing. It's to show <br>\nsome of my identifier naming.</p>\n</blockquote>\n<p>I don't understand the motivation for that.  The formal Latex <br>\ngeneration of Isabelle works smoothly with things like @{text <br>\nfoo_bar}, @{thm foo_bar}, even @{ML foo_bar}.</p>\n<p>You can also redefine the default isabelle latex macros to get a <br>\nslightly different glyph for the underscore.</p>\n</blockquote>\n<p>Here, I have to get into my opinions about mathematical writing, of <br>\nwhich I'm more of a critique than a producer.</p>\n<p>For me, at this point, there are two important driving principles, among <br>\nothers:<br>\n     1) try to follow traditional, mathematical writing convention as <br>\nmuch as possible, and<br>\n     2) keep a clear distinction between the syntax and language of <br>\nIsar, and the informal<br>\n          language of mathematics used to discuss, prove, define, etc..</p>\n<p>The good news is that you were thinking about Isar over 10 years ago. <br>\nIsar is sympathetic to tradition, with its structured proofs, the <br>\nability to abbreviate structured proofs, and with its standard <br>\nmathematical symbols.</p>\n<p>The breakdown, as I see it, comes with theorem names, function names, <br>\nand constant names; that is, names in general. Formal, compound-word, <br>\nlong names, aren't a part of mathematical writing. So this requirement <br>\nby programming languages that everything have a name doesn't fit with <br>\ntraditional-looking mathematical language in an unobtrusive way.</p>\n<p>To describe the motivation for \"emS'is'unique\", consider this <br>\nhypothetical sentence in my hypothetical book:</p>\n<p>My dear reader, please consider what happens when /A/ is bounded by <br>\n/b/.</p>\n<p>Suppose formally that I've defined a function /is_bounded_by/. As a <br>\nquick advertisement, I mention Slawomir's IsarMathLib.</p>\n<p><a href=\"http://www.nongnu.org/isarmathlib/\">http://www.nongnu.org/isarmathlib/</a></p>\n<p>By looking at his document, I saw his use of infix notation such as \"A <br>\n{is disjoint with} B\", which is shown on page 7. Okay. I like the idea, <br>\nbut I don't like curley braces for non-set use any more than I like <br>\nunderscores.</p>\n<p>Here, I could stop writing and just say, \"You know what, there is no <br>\nperfect solution to trying to create spacing between words without only <br>\nusing spaces. Spaces look good when all you want is a simple space. All <br>\nthese other characters don't\".</p>\n<p>Well, back to my pontificating.</p>\n<p>Alright, so you tell me that I can delay the decision on how to <br>\nrepresent the underscore by using antiquotations such as @{text <br>\nfoo_bar}, and that I can substitute glyphs, probably very nice looking <br>\nglyphs, for the underscore.</p>\n<p>There are two problems. If I formally introduce /is_bounded_by/ into my <br>\nIsar code, then that's exactly how I want to refer to it anywhere else, <br>\nincluding in an informal discussion. As a total beginner, it was a <br>\nsource of confusion for me to see identifiers which had hyphens <br>\nsubstituted for underscores. It's a non-issue now, but a 30-second <br>\nconcept can be a 1-weeker when I'm on my own, especially if I'm only in <br>\na discovery stage to try to determine if I want to go down a certain route.</p>\n<p>The other problem is that I should make the \"executive decision\" now. <br>\nThere are only a few non-alpha-numeric characters available to use in an <br>\nidentifiers. Here's a list of me trying to name \"is bounded by\":</p>\n<p>1) is_bounded_by<br>\n2) isBoundedBy<br>\n3) is'bounded'by</p>\n<p>Really, if the phrase \"is bounded by\" was in a sentence in the middle of <br>\na paragraph, anything done to it would mess it up and break the flow of <br>\nthe sentence. Even italicizing it would mess it up.</p>\n<p>The single ticks aren't looking so good to me at this moment. What I <br>\nneed to do is put the different names in the middle of a big paragraph, <br>\nlike in these sentences:</p>\n<p>My dear reader, please consider what happens when /A is'bounded'by <br>\nb/, or</p>\n<p>My dear reader, please consider what happens when /A is_bounded_by b/.</p>\n<p>It's like recording music. You get up the next morning, and what you <br>\nthought sounded good the night before, doesn't sound so good anymore. <br>\nHowever, I think camelcase is out, for the most part.</p>\n<p>Nothing's ever simple, though. What I see in jEdit, which is <br>\nemS'is'unique, looks better because jEdit is using a fixed-width font. <br>\nThunderbird here is not using a fixed width font, so the ticks don't <br>\ncreate enough space.</p>\n<p>Regards,<br>\nGB</p>",
        "id": 294218500,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660896190
    },
    {
        "content": "<p>From: Gottfried Barrow &lt;<a href=\"mailto:gottfried.barrow@gmx.com\">gottfried.barrow@gmx.com</a>&gt;<br>\nIt 's becoming less vague. I could get rid of the compile errors, but <br>\nbecause one, or the other, or both \\begin{Verbatim} and \\end{Verbatim} <br>\nneeded to be on a line with nothing else, I couldn't get rid of the <br>\n\"<em>}\"s, or the \"{</em>\"s, or the \"(<em>\"s, or the \"</em>)\"s. How I was wrapping the <br>\nVerbatim begin and end, I don't remember, but stars and delimiters were <br>\ncluttering my document.</p>\n<p>But that's to be expected, since I was trying to put all of the Isar <br>\ncode in a verbatim environment, so maybe  beginnings and endings on <br>\nlines by themselves were never a real issue. Ah, I was using the <br>\nVerbatim gobble feature to gobble up some of the stars and delimiters <br>\nthat wrapped it, but I couldn't gobble them all up.</p>\n<p>--GB</p>",
        "id": 294218649,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660896253
    },
    {
        "content": "<p>From: Florian Haftmann &lt;<a href=\"mailto:florian.haftmann@informatik.tu-muenchen.de\">florian.haftmann@informatik.tu-muenchen.de</a>&gt;<br>\nHi Gottfried,</p>\n<blockquote>\n<p>SHOW-STOPPER: It's vaguely coming back to me, but I'm pretty sure that<br>\nthe show-stopper was my need for the Verbatim environment. I had to put<br>\nit in a \"text{<em>...</em>}\" command, but \"begin{Verbatim}\" and \"end{Verbatim}\"<br>\nare picky about what can be on the same line with them. I couldn't get<br>\nrid of those errors, that I remember.</p>\n</blockquote>\n<p>can you give a hint for which sake you are using verbatim?  In LaTeX it<br>\nmixes up to purposes</p>\n<p>a) interpret source more or less literally</p>\n<p>b) present result in typewriter</p>\n<p>For each of these, there are different possibilities; especially b) can<br>\nbe achieved with Isabelle without relying on verbatim.  a) is not so<br>\nsimple, but there are ways to cope with involving ML (depending how<br>\ngeneral it is supposed to be).</p>\n<blockquote>\n<p>The single ticks aren't looking so good to me at this moment. What I<br>\nneed to do is put the different names in the middle of a big paragraph,<br>\nlike in these sentences:</p>\n<p>My dear reader, please consider what happens when /A is'bounded'by<br>\nb/, or</p>\n<p>My dear reader, please consider what happens when /A is_bounded_by b/.</p>\n<p>It's like recording music. You get up the next morning, and what you<br>\nthought sounded good the night before, doesn't sound so good anymore.<br>\nHowever, I think camelcase is out, for the most part.</p>\n</blockquote>\n<p>If your primary concern is how identifiers appear in natural language,<br>\nyou can consider using your specific set of antiquotations where you can<br>\nmodify identifiers programatically, in the extreme case using an<br>\nexplicit substitution table.</p>\n<p>Cheers,<br>\n    Florian<br>\n<a href=\"/user_uploads/14278/QdgdHBd0LMX0dv31d8kOznx-/signature.asc\">signature.asc</a></p>",
        "id": 294218719,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660896287
    },
    {
        "content": "<p>From: Gottfried Barrow &lt;<a href=\"mailto:gottfried.barrow@gmx.com\">gottfried.barrow@gmx.com</a>&gt;<br>\nFlorian,</p>\n<p>Thanks for the interest, but first, please allow me to clarify why I <br>\nwon't be able to use antiquotations such as @{text foo_bar} at the point <br>\nI start using Isabelle to create PDFs.</p>\n<p>The limitation is that Acrobat's bookmarks can only predictably take <br>\nbasic ASCII characters, which I constantly forget until I see \"stuff\" or <br>\nthe \"lack of stuff\" in my PDF bookmarks. The bookmarks for chapter 4 of <br>\nfunctions.pdf demonstrates the problem.</p>\n<p><a href=\"http://isabelle.in.tum.de/dist/Isabelle2012/doc/functions.pdf\">http://isabelle.in.tum.de/dist/Isabelle2012/doc/functions.pdf</a></p>\n<p>The antiquotation for section 4.2 resulted in numeric trash in the <br>\nbookmark. I use the hyperref package, so I know about the problem from <br>\ntrying to use macros in section titles. My solution is to not get fancy <br>\nin section titles; to not have a bookmark made from a complicated Latex <br>\nmacro, or use something like @{text foo_bar} in the title.</p>\n<p>I heavily use PDF bookmarks. I have Latex macros which use the theorem <br>\nenvironment for Isabelle theorems, lemmas, definitions, etc.. These <br>\nmacros also create a subsection entry into the <br>\nbookmarks/table_of_contents using the name of the theorem. Consequently, <br>\nI have to hard code the name so I don't get \"stuff\" or the \"lack of <br>\nstuff\" in the PDF bookmarks. It's not an option to use fancy characters <br>\nin the name, or to figure out later what character I want to use to <br>\nseparate words.</p>\n<p>Secondly, it's obvious to me that the Isabelle Latex document processing <br>\nis very powerful and should be the Latex tool of choice for most people <br>\nproducing Isabelle documents. However, for my needs, without having <br>\nspent the time to get what I want through Isabelle, I have to stick with <br>\nwhat I'm doing.</p>\n<blockquote>\n<blockquote>\n<p>SHOW-STOPPER: It's vaguely coming back to me, but I'm pretty sure that<br>\nthe show-stopper was my need for the Verbatim environment...</p>\n<p>can you give a hint for which sake you are using verbatim?  In LaTeX it<br>\nmixes up to purposes</p>\n<p>a) interpret source more or less literally</p>\n<p>b) present result in typewriter</p>\n<p>For each of these, there are different possibilities; especially b) can<br>\nbe achieved with Isabelle without relying on verbatim.  a) is not so<br>\nsimple, but there are ways to cope with involving ML (depending how<br>\ngeneral it is supposed to be).</p>\n</blockquote>\n</blockquote>\n<p>In looking at functions.pdf, I can see that Alexander is using a <br>\ndifferent font than other documentation PDFs. I guess this would be an <br>\nexample of your \"b)\". The italicized roman font hasn't always been to my <br>\nliking for the Isar code, though typewriter font isn't all upside <br>\neither, but  I could probably find out how to make basic font changes by <br>\nlooking at the Isabelle Latex packages.</p>\n<p>Bullet \"a)\" kind of represents why I want the Isar in a Verbatim <br>\nenvironment. I'll say a little more below.</p>\n<blockquote>\n<p>If your primary concern is how identifiers appear in natural language,<br>\nyou can consider using your specific set of antiquotations where you can<br>\nmodify identifiers programatically, in the extreme case using an<br>\nexplicit substitution table.</p>\n<p>Cheers,<br>\n  Florian</p>\n</blockquote>\n<p>This is an example of where, because of my multiple wants, in <br>\nemphasizing one want, I forget another want that has a higher priority.</p>\n<p>It's true that I want Isar identifiers to look good when mixed into a <br>\nparagraph of natural language, but more importantly, I want Isar to look <br>\nextraordinarily mathematical even in its raw form in a Verbatim <br>\nenvironment, or on the jEdit screen. It happens to be that Isar gives me <br>\na good start. Even Latex doesn't guarantee you a good looking document. <br>\nTo get Latex looking really good, you have to make lots of artistic <br>\ndecisions, and do lots of builds, and stare at the screen a lot.</p>\n<p>As to natural language, using my example \"is_bounded_by\", I wouldn't <br>\nhave to use that in an informal discussion, I could just say \"is bounded <br>\nby\" and let the reader make the connection if it was obvious. Function <br>\nover form, or form over function? It's always a compromise.</p>\n<p>But back to why I want the Isar in a Verbatim environment. It's because, <br>\nbeing in the student mode right now, I'm sympathetic with a student's <br>\nneeds. Code in a verbatim environment is basically saying, \"This is what <br>\nthe code really looks like in the editor. If you open the source file, <br>\nthis is almost exactly what you will see. This is to make sure that you, <br>\nas a student, don't have any questions about what exactly the code is.\"</p>\n<p>Replacing identifiers with something significantly different is not <br>\nsomething I would do. Clarity is more important to me than traditional <br>\nlooking language. More levels of abstraction, or more words requiring <br>\ninterpretation require more work from the reader, and more work to teach <br>\nthem what the vocabulary means.</p>\n<p>Someday I could decide that line numbers in a Verbatim environment are <br>\njust noise. What I'm doing will serve its purpose until I switch to <br>\nsomething else.</p>\n<p>Learning a little Latex here and there helps out. There's this Latex <br>\npackage for Fitch style diagrams:</p>\n<p><a href=\"http://www.mathstat.dal.ca/~selinger/fitch/\">http://www.mathstat.dal.ca/~selinger/fitch/</a> <br>\n&lt;<a href=\"http://www.mathstat.dal.ca/%7Eselinger/fitch/\">http://www.mathstat.dal.ca/%7Eselinger/fitch/</a>&gt;</p>\n<p>Like most array type environments, it doesn't break well over multiple <br>\npages. I know just enough Latex to where I figured out how to modify it <br>\nso that it uses longtable. Now, I can use page after page after page to <br>\ndo a natural deduction proof using a Fitch diagram.</p>\n<p>Thanks for the suggestions.</p>\n<p>Regards,<br>\nGB</p>",
        "id": 294218774,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660896315
    }
]