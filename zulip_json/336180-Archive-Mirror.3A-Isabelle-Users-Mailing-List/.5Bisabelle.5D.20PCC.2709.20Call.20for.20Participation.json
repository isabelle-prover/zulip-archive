[
    {
        "content": "<p>From: David Pichardie &lt;<a href=\"mailto:david.pichardie@irisa.fr\">david.pichardie@irisa.fr</a>&gt;<br>\nWorkshop on Proof-Carrying Code and Software Certification  <br>\n(PCC'09)<br>\n                      August 15, 2009, Los Angeles, California, USA<br>\n                                      Affiliated with LICS'09.<br>\n<a href=\"http://ti.arc.nasa.gov/event/pcc09/\">http://ti.arc.nasa.gov/event/pcc09/</a></p>\n<p>CALL FOR PARTICIPATION</p>\n<p>IMPORTANT DATES</p>\n<p>Early registration deadline: July 26, 2009<br>\n<a href=\"http://compilers.cs.ucla.edu/lics-sas09/registration/\">http://compilers.cs.ucla.edu/lics-sas09/registration/</a><br>\nPCC'09 workshop: August 15, 2009</p>\n<p>PROGRAM</p>\n<p>Invited talks:<br>\n   Kelly Hayhurst, NASA Langley.   Mending the Gap, An effort to aid  <br>\nthe transfer of formal methods technology</p>\n<p>Andrew Appel, Princeton.    TBA</p>\n<p>Workshop talks:<br>\n   Juan Chen.   Efficient Type Representation in TAL</p>\n<p>Nurlida Basir, Bernd Fischer and Ewen Denney.   Deriving Safety  <br>\nCases from Machine-Generated Proofs</p>\n<p>Soonho Kong, Wontae Choi and Kwangkeun Yi.   PCC Framework for  <br>\nProgram Generators</p>\n<p>Sagar Chaki, Arie Gurfinkel, Kurt Wallnau and Charles Weinstock.    <br>\nAssurance Cases for Proofs as Evidence</p>\n<p>David Pichardie.   Towards a Certified Lightweight Array Bound  <br>\nChecker for Java Bytecode</p>\n<p>Andrzej Filinski, Anders Starcke Henriksen, Fritz Henglein.    <br>\nTowards PCC for Concurrent and Distributed Systems</p>\n<p>Thomas Jensen.   Proof compression and the Mobius PCC architecture  <br>\nfor embedded devices</p>\n<p>SCOPE</p>\n<p>Software certification demonstrates the reliability, safety, or<br>\nsecurity of software systems in such a way that it can be checked by<br>\nan independent authority with minimal trust in the techniques and<br>\ntools used in the certification process itself. It can build on<br>\nexisting validation and verification (V&amp;V) techniques but introduces<br>\nthe notion of explicit software certificates, which contain all the<br>\ninformation necessary for an independent assessment of the<br>\ndemonstrated properties. One such example is proof-carrying code (PCC)<br>\nwhich is an important and distinctive approach to enhancing trust in<br>\nprograms. It provides a practical framework for independent assurance<br>\nof program behaviour; especially where source code is not available,<br>\nor the code author and user are unknown to each other.</p>\n<p>The workshop will address theoretical foundations of logic-based<br>\nsoftware certification as well as practical examples and work on<br>\nalternative application domains. Here \"certificate\" is construed<br>\nbroadly, to include not just mathematical derivations and proofs but<br>\nalso safety and assurance cases, or any formal evidence that supports<br>\nthe semantic analysis of programs: that is, evidence about an<br>\nintrinsic property of code and its behaviour that can be independently<br>\nchecked by any user, intermediary, or third party. These guarantees<br>\nmean that software certificates raise trust in the code itself,<br>\ndistinct from and complementary to any existing trust in the creator<br>\nof the code, the process used to produce it, or its distributor.</p>\n<p>PROGRAM COMMITTEE</p>\n<p>David Aspinall, University of Edinburgh<br>\nGilles Barthe, IMDEA Software<br>\nEwen Denney, RIACS/NASA Ames, co-chair<br>\nBernd Fischer, University of Southampton<br>\nSofia Guerra, Adelard<br>\nKelly Hayhurst, NASA Langley<br>\nThomas Jensen, IRISA/CNRS, co-chair<br>\nDavid Pichardie, INRIA<br>\nGerm√°n Puebla, Technical University of Madrid<br>\nIan Stark, University of Edinburgh</p>",
        "id": 294080041,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660830347
    }
]