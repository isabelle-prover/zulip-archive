[
    {
        "content": "<p>From: Patrick Michel &lt;<a href=\"mailto:uni@pbmichel.de\">uni@pbmichel.de</a>&gt;<br>\nHi!</p>\n<p>While updating my theories to Isabelle/HOL 2012 (worked like a charm) I was also trying out PIDE.<br>\nI am quite happy with the IDE so far, once I figured out how to search for theorems, etc.</p>\n<p>At the moment, however, the curried notation of the meta implication drives me crazy :-)<br>\nMy current subgoal structurally looks like this:</p>\n<p>(A ⟹ B ⟹ C) ⟹ (D ⟹ F) ⟹ G ⟹ H ⟹ I ⟹ J</p>\n<p>and I'd rather have it like this again:</p>\n<p>[[A; B] ⟹ C; D ⟹ F; G; H; I] ⟹ J</p>\n<p>Is there a display option for this?</p>\n<p>Thanks,</p>\n<p>Patrick Michel<br>\nSoftware Technology Group<br>\nUniversity of Kaiserslautern</p>",
        "id": 294163098,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660853889
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nOn Fri, 29 Jun 2012, Patrick Michel wrote:</p>\n<blockquote>\n<p>While updating my theories to Isabelle/HOL 2012 (worked like a charm) I <br>\nwas also trying out PIDE. I am quite happy with the IDE so far, once I <br>\nfigured out how to search for theorems, etc.</p>\n</blockquote>\n<p>See the isar-ref manual for all commands.  The 'help' command also gives <br>\nyou a complete list.  These things were well-known before Proof General <br>\nintroduced some menus for some commands &gt; 10 years ago.</p>\n<p>What you want here is 'find_theorems'.  Apart from the full syntax the <br>\nmanual also gives you 'find_consts', which Proof General does not know <br>\nbecause that command is younger than 5 years.</p>\n<blockquote>\n<p>At the moment, however, the curried notation of the meta implication drives me crazy :-)<br>\nMy current subgoal structurally looks like this:</p>\n<p>(A ⟹ B ⟹ C) ⟹ (D ⟹ F) ⟹ G ⟹ H ⟹ I ⟹ J</p>\n<p>and I'd rather have it like this again:</p>\n<p>[[A; B] ⟹ C; D ⟹ F; G; H; I] ⟹ J</p>\n<p>Is there a display option for this?</p>\n</blockquote>\n<p>This is called \"print mode\" in Isabelle terminology.  E.g.</p>\n<p>isabelle jedit -m brackets</p>\n<p>will recover the above special Isabelle syntax for nested implications.</p>\n<p>Historically, Larry Paulson introduced the brackets notation both for ==&gt; <br>\nand =&gt; and used it mainly in Isabelle/ZF.  Later Isabelle/HOL became more <br>\npopular, and the custom to use brackets for ==&gt; but not for =&gt;.</p>\n<p>When I was exposed to this for the first time in 1993, I made sure that <br>\nbrackets do work uniformly as expected, because the pretty printer was not <br>\nworking in all situations at that time.  Around 1998 I then learned how to <br>\nmake Isabelle/Pure rules nest properly (which was not possible before), <br>\nand found the brackets very difficult to read.  E.g. in your example <br>\nabove, the first two goal premises are nested ==&gt; which you see <br>\nimmediately from the parentheses in the first output, but not in the <br>\nsecond.</p>\n<p>Anyway, print modes like \"brackets\", \"no_brackets\", \"type_brackets\", <br>\n\"no_type_brackets\" are there to make output more interesting by <br>\nindividualizing it.  There is also a mode \"iff\" for boolean equality as <br>\ndouble arrow, which is off by default.</p>\n<p>Makarius</p>",
        "id": 294163149,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660853916
    },
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\nA similar decline in culture set in when assembly language arrived and you no<br>\nlonger had to remember opcodes.</p>\n<p>Tobias</p>",
        "id": 294163157,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660853922
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nWhere is the problem remembering the 'help' command, and looking things up <br>\nin the fine manual?</p>\n<p>In the meantime some volunteers can clean up the find_theorems <br>\nimplementation, and make a Scala/Swing wrapper form for its command line.</p>\n<p>Some other volunteers can step forward and maintain Isabelle Proof General <br>\n4.x, until that has become fully obsolete, which is not the case right <br>\nnow.  At the moment it is unmaintained, so it will decay within 1-2 years.</p>\n<p>Makarius</p>",
        "id": 294163190,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660853947
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nOn Fri, 29 Jun 2012, Christian Urban wrote:</p>\n<blockquote>\n<p>Is there a way to make that printmode the default<br>\nin ones etc/settings, for example?</p>\n</blockquote>\n<p>Following usual Isabelle conventions, src/Tools/jEdit/etc/settings defines <br>\nvarious settings that are relavant for that tool.  ISABELLE_JEDIT_OPTIONS <br>\nallows to give default command line options.  So you can set that <br>\naccordingly somewhere in your local $ISABELLE_HOME_USER/etc/settings for <br>\nexample.</p>\n<blockquote>\n<p>I have to admit I am very fond of this special syntax too and have no <br>\nproblem with interpreting them in my head as</p>\n<p>[A,B]     [D]<br>\n  C        F    G   H   I</p>\n<hr>\n<p>J</p>\n<p>which is the style that usually appears in textbooks on<br>\nnatural deduction. For example, the Gentzen book would<br>\nwrite the impI- and  orE-rules as</p>\n<p>[A]<br>\n       B<br>\n    -------<br>\n    A --&gt; B</p>\n<p>[A] [B]<br>\n A v B     C   C</p>\n<hr>\n<p>C</p>\n<p>which is not very different from Larry's bracket notation.</p>\n</blockquote>\n<p>That is the reason why Larry introduced that in the late 1980-ies, and why <br>\nI've spent some time in 1993 to make it print realiably.</p>\n<p>The nesting of rules does not fit very well in that notation, though, and <br>\nit is absent in Gentzen's book.  This is why I've introduced the plain <br>\nno_brackets print mode around 1998, which now happens to be the default in <br>\nIsabelle/jEdit after so many years.</p>\n<p>There is also a broader perspective here: printing of rules can be done in <br>\na high-level fashion via 'print_statement', but likewise printing of goal <br>\nstates is still not available.  The latter would also overcome <br>\nmisunderstanding how to prove \"!!x. A ==&gt; B ==&gt; C\", i.e. by saying<br>\n\"fix x assume A B show C\", not show \"!!x. A ==&gt; B ==&gt; C\".</p>\n<p>Makarius</p>",
        "id": 294163195,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660853953
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nEven more obvious: use the command completion.  You type \"find\" and wait <br>\n300ms and get a selection of find commands.  Same for \"print\" or whatever <br>\nyou please, e.g. \"sl\" for \"sledgehammer\".</p>\n<p>You can also modify the reactivity of the completion popup in the Plugin <br>\nOptions for SideKick in jEdit.  (In Isabelle2012 it is a bit more <br>\nambitious than in Isabelle2011-1, but still not as aggressive as it can <br>\nbe for full virtuosity of jEdit experts.)</p>\n<p>Makarius</p>",
        "id": 294163233,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660853983
    },
    {
        "content": "<p>From: Patrick Michel &lt;<a href=\"mailto:uni@pbmichel.de\">uni@pbmichel.de</a>&gt;<br>\nWell thanks for all the advice, but as I said; I had already figured that out.<br>\nI wouldn't have used PIDE for more than 5 minutes otherwise (which happened in the past).</p>",
        "id": 294163240,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660853993
    }
]