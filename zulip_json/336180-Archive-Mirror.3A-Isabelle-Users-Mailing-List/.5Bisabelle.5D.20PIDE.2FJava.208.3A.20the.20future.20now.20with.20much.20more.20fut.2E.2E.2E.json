[
    {
        "content": "<p>From: Gottfried Barrow &lt;<a href=\"mailto:igbi@gmx.com\">igbi@gmx.com</a>&gt;<br>\nI thought Java would become the mother of all computing platforms. You <br>\nsay, \"Credentials, please.\"  Certainly. A copy of my Sun Certified Java <br>\nProgramming certificate will be coming shortly, unless it doesn't. The <br>\nfuture didn't transpire. Microsoft won. Sun lost. And Java merely became <br>\na major, ubiquitous presence.</p>\n<p>Here's the future:</p>\n<p>1) Functional programming that keeps you high and safe, unless you want <br>\nto work low and dangerous, all in a way that's acceptable to the many.</p>\n<p>2) Intermediate languages.</p>\n<p>3) Many-core computing.</p>\n<p>As a concrete example: Rust, with its foundation in LLVM, where it will <br>\nsurely tie into any GPGPU platform it pleases, since low-level <br>\nprogramming is at it's heart, like C.</p>\n<p>Yes, all things computing can be compared to old-school C. High-level, <br>\nbut with low-level freedom and power.</p>\n<p>With hardware on my mind, for many long months, it has seemed that, for <br>\nthe future, Java got it wrong with it's stack-based virtual machine, and <br>\nLLVM made it right, with its register-based virtual machine.</p>\n<p>But all it takes, when it's all wrong, is for capable people to make <br>\nwhat's all wrong all right.</p>\n<p>The future, there are parallel paths, with multiple winners when it <br>\ncomes to intermediate languages and virtual machines.</p>\n<p>Java, it's still in the running, with companies like AMD tying it's <br>\nstack-based bytecode into a register-based intermediate language.</p>\n<p>There is Java 8/Scala, HSA, HSAIL, and Aparapi/Sumatra, to take the JVM <br>\ninto the same future as Rust and LLVM.</p>\n<p><a href=\"http://www.hsafoundation.com/hsa-developer-tools/\">http://www.hsafoundation.com/hsa-developer-tools/</a></p>\n<p><a href=\"http://openjdk.java.net/projects/sumatra/\">http://openjdk.java.net/projects/sumatra/</a></p>\n<p>Watch this, about Aparapi and HSA, and get a warm and fuzzy feeling, to <br>\ngive you confidence that Java won't leave you behind, crying, shedding <br>\nbig, Crocodile Dundee crocodile tears. Yea, that guy. He works at NICTA now.</p>\n<p><a href=\"https://www.youtube.com/watch?v=H7Nh1ZWnx5U\">https://www.youtube.com/watch?v=H7Nh1ZWnx5U</a></p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"H7Nh1ZWnx5U\" href=\"https://www.youtube.com/watch?v=H7Nh1ZWnx5U\"><img src=\"https://uploads.zulipusercontent.net/c18ab4c1117705092a8e934263c333e30f2a16cf/68747470733a2f2f692e7974696d672e636f6d2f76692f48374e68315a576e7835552f64656661756c742e6a7067\"></a></div><p>To tap into the full power of the JVM, I figure you'll have to drop down <br>\nto Java occasionally:</p>\n<p><a href=\"https://pragprog.com/book/vsjava8/functional-programming-in-java\">https://pragprog.com/book/vsjava8/functional-programming-in-java</a></p>\n<p>I attach an image of the future now, of jdk-8u25-windows-x64 running the <br>\nPIDE. I'm pretty sure it's faster than 64-bit SDK 7, but it could be my <br>\nimagination. That it will continue to work, I don't know.</p>\n<p>Regards,<br>\nGB<br>\n<a href=\"/user_uploads/14278/NITq4X1ZzwJNp7E5354KhhLl/PIDE__jdk-8-64.png\">PIDE_&amp;_jdk-8-64.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/14278/NITq4X1ZzwJNp7E5354KhhLl/PIDE__jdk-8-64.png\" title=\"PIDE_&amp;_jdk-8-64.png\"><img src=\"/user_uploads/14278/NITq4X1ZzwJNp7E5354KhhLl/PIDE__jdk-8-64.png\"></a></div>",
        "id": 294324066,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660927920
    }
]