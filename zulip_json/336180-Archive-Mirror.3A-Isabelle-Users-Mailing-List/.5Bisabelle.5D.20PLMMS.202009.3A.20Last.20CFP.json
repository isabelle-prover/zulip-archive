[
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nThe ACM SIGSAM 2009 International<br>\n        Workshop on Programming Languages for<br>\n            Mechanized Mathematics Systems<br>\n                  PLMMS 2009</p>\n<p>Munich, Germany; August 21, 2009<br>\n<a href=\"http://plmms09.cse.tamu.edu/\">http://plmms09.cse.tamu.edu/</a></p>\n<p>CALL FOR PAPERS</p>\n<p>The ACM SIGSAM 2009 International Workshop on Programming Languages<br>\nfor Mechanized Mathematics Systems will be co-located with TPHOLs 2009.</p>\n<p>Important Dates</p>\n<p>* Abstract submission : May 11, 2009 (Apia, Samoa time)<br>\n   * Submission deadline: May 18, 2009 (Apia, Samoa time)<br>\n   * Author notification:  June 22, 2009<br>\n   * Camera ready papers: July 10, 2009<br>\n   * Workshop: August 21, 2009</p>\n<p>General Information</p>\n<p>The scope of this workshop is at the intersection of programming<br>\nlanguages (PL) and mechanized mathematics systems (MMS). The latter<br>\ncategory subsumes present-day computer algebra systems (CAS),<br>\ninteractive proof assistants (PA), and automated theorem provers<br>\n(ATP), all heading towards fully integrated mechanized mathematical<br>\nassistants. Areas of interest include all aspects of PL and MMS that<br>\nmeet in the following topics, but not limited to:</p>\n<p>* Dedicated input languages for MMS: covers all aspects of languages<br>\n     intended for the user to deploy or extend the system, both<br>\n     algorithmic and declarative ones. Typical examples are tactic<br>\n     definition languages such as Ltac in Coq, mathematical proof<br>\n     languages as in Mizar or Isar, or specialized programming<br>\n     languages built into CA systems.</p>\n<p>* Mathematical modeling languages used for programming: covers the<br>\n     relation of logical descriptions vs. algorithmic content. For<br>\n     instance the logic of ACL2 extends a version of Lisp, that of Coq<br>\n     is close to Haskell, and some portions of HOL are similar to ML<br>\n     and Haskell, while Maple tries to do both simultaneously. Such<br>\n     mathematical languages offer rich specification capabilities,<br>\n     which are rarely available in regular programming languages. How<br>\n     can programming benefit from mathematical concepts, without<br>\n     limiting mathematics to the computational world view?</p>\n<p>* Programming languages with mathematical specifications: covers<br>\n     advanced mathematical concepts in programming languages that<br>\n     improve the expressive power of functional specifications, type<br>\n     systems, module systems etc. Programming languages with dependent<br>\n     types are of particular interest here, as is intentionality vs<br>\n     extensionality.</p>\n<p>* Language elements for program verification: covers specific means<br>\n     built into a language to facilitate correctness proofs using<br>\n     MMS. For example, logical annotations within programs may be<br>\n     turned into verification conditions to be solved in a proof<br>\n     assistant eventually. How need MMS and PL to be improved to make<br>\n     this work conveniently and in a mathematically appealing way?</p>\n<p>These issues have a very colorful history. Many PL innovations first<br>\nappeared in either CA or proof systems first, before migrating into<br>\nmore mainstream programming languages.  This workshop is an<br>\nopportunity  to present the latest innovations in MMS design that may<br>\nbe relevant to future programming languages, or conversely novel PL<br>\nprinciples that improve upon implementation and deployment of MMS.<br>\nWhy are all the languages of mainstream CA systems untyped?  Why<br>\nare the (strongly typed) proof assistants so much harder to use than<br>\na typical CAS?  What forms of polymorphism exist in mathematics?<br>\nWhat forms of dependent types may be used in mathematical modeling?<br>\nHow can MMS regain the upper hand on issues of \"genericity\" and<br>\n\"modularity\"?  What are the biggest barriers to using a more<br>\nmainstream language as a host language for a CAS or PA/ATP?</p>\n<p>PLMMS 2007 was held as a satellite event of, and PLMMS 2008 was<br>\na CICM 2008 workshop.</p>\n<p>Submission Details</p>\n<p>Submitted papers should be in portable document format (PDF),<br>\n    formatted using the ACM SIGPLAN style guidelines<br>\n    (<a href=\"http://www.acm.org/sigs/sigplan/authorInformation.htm\">http://www.acm.org/sigs/sigplan/authorInformation.htm</a>). The length<br>\n    is restricted to 10 pages, and the font size 9pt. Each submission<br>\n    must adhere to SIGPLAN's republication policy, as explained on the<br>\n    web. Violation risks summary rejection of the offending submission.</p>\n<p>Papers are exclusively submitted via EasyChair</p>\n<p><a href=\"http://www.easychair.org/conferences?conf=plmms09\">http://www.easychair.org/conferences?conf=plmms09</a></p>\n<p>We expect that at least one author of each accepted paper attends<br>\n    PLMMS 2009 and presents her or his paper.</p>\n<p>Accepted papers will appear in the ACM Digital Library.</p>\n<p>Links</p>\n<p>* <a href=\"http://plmms09.cse.tamu.edu/\">http://plmms09.cse.tamu.edu/</a>, the PLMMS 2009 workshop web site<br>\n   * <a href=\"http://tphols.in.tum.de/\">http://tphols.in.tum.de/</a>, the THOPLs 2009 conference web site</p>\n<p>Program Committee</p>\n<p>* Clemens Ballarin, aicas GmbH<br>\n   * Gabriel Dos Reis, Texas A&amp;M University (Co-Chair)<br>\n   * Jean-Christophe Filliâtre, CNRS Université Paris Sud<br>\n   * Predrag Janicic, University of Belgrade<br>\n   * Jaakko Järvi, Texas A&amp;M University<br>\n   * Florina Piroi, Johannes Kepler University<br>\n   * Laurent Théry, INRIA Sophia Antipolis (Co-Chair)<br>\n   * Makarius Wenzel, Technische Universität München</p>",
        "id": 294075225,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660828592
    }
]