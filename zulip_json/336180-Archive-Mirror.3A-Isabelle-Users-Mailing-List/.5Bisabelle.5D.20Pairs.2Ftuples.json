[
    {
        "content": "<p>From: Steve W &lt;<a href=\"mailto:s.wong.731@gmail.com\">s.wong.731@gmail.com</a>&gt;<br>\nGreetings,</p>\n<p>I'm currently experimenting with pairs/tuples, like the following:</p>\n<p>axiomatization<br>\nlst :: \"((nat<em>nat)</em>nat) list\"<br>\nwhere ax : \"lst = [((1,2),3)]\"</p>\n<p>lemma \"snd (lst ! 0) = (3::nat)\"<br>\nusing ax<br>\nsledgehammer</p>\n<p>Does anyone know how I can prove that lemma since sledgehammer can't seem to<br>\nfind a proof?</p>\n<p>Also, if lst was of type \"(nat * nat * nat) list\", then how do I read the<br>\n3rd element from a tuple?</p>\n<p>TIA</p>\n<p>Steve</p>",
        "id": 294131930,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660843135
    },
    {
        "content": "<p>From: Christian Sternagel &lt;<a href=\"mailto:christian.sternagel@uibk.ac.at\">christian.sternagel@uibk.ac.at</a>&gt;<br>\nHi,</p>\n<p>there are only pairs in Isabelle and the pair constructor * is<br>\nright-associative. Hence when you write</p>\n<p>nat * nat * nat</p>\n<p>it really is</p>\n<p>nat * (nat * nat)</p>\n<p>and a corresponding value would be (1, (2, 3)) (again you can save<br>\nparentheses by writing (1, 2, 3) instead). Thus getting the third<br>\nelement is done by nested calls to snd, e.g.,</p>\n<p>lemma \"snd (snd (1, (2, 3))) = 3\" by simp</p>\n<p>You see that I do not need a sledgehammer to prove the fact ;). Mere<br>\nrewriting is enough. The same is true for your initial lemma</p>\n<p>lemma \"snd (snd ([(1, 2, 3)] ! 0)) = 3\" by simp</p>\n<p>hope this helps</p>\n<p>chris</p>",
        "id": 294131971,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660843151
    },
    {
        "content": "<p>From: <a href=\"mailto:s.wong.731@gmail.com\">s.wong.731@gmail.com</a><br>\nHi,</p>\n<p>Thanks for that. But if I have</p>\n<p>axiomatization<br>\nlst :: \"nat<em>nat</em>nat\"<br>\nwhere ax : \"lst = (1,2,3)\"</p>\n<p>lemma \"snd (snd lst) = 3\"<br>\nusing ax<br>\napply simp</p>\n<p>doesn't seem to prove it. I guess I need some form of a substitution so  <br>\nthat (1,2,3) is substituted into lst?</p>\n<p>Thanks<br>\nSteve</p>",
        "id": 294132014,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660843173
    },
    {
        "content": "<p>From: Steve W &lt;<a href=\"mailto:s.wong.731@gmail.com\">s.wong.731@gmail.com</a>&gt;<br>\nThanks for the replies. After some more experiments, it seems that if one of<br>\nthe elements in the tuple has a variable type, then it's not so trivial. For<br>\nexample:</p>\n<p>axiomatization<br>\nlst :: \"'a<em>nat</em>nat\"</p>\n<p>axioms<br>\nax : \"lst = (1,2,3)\"</p>\n<p>lemma \"snd (snd lst) = 3\"<br>\napply (simp add: ax)</p>\n<p>doesn't find a proof. How come changing the type of an element could make<br>\nsuch a difference?</p>\n<p>TIA</p>\n<p>Steve</p>",
        "id": 294134364,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660843869
    },
    {
        "content": "<p>From: Tjark Weber &lt;<a href=\"mailto:webertj@in.tum.de\">webertj@in.tum.de</a>&gt;<br>\nSteve,</p>\n<p>In the axiom ax, 'a provides a constant 1, i.e., 'a is of sort \"one\".<br>\nHence the inferred (most general) type of lst in ax is 'a::one * nat *\nnat.  Switch on Isabelle &gt; Settings &gt; Display &gt; Show Sorts and have<br>\nIsabelle print the axiom (\"thm ax\") to see this.</p>\n<p>In the lemma, however, the inferred type of lst is its declared type<br>\n'a * nat * nat, which is more general than 'a::one * nat * nat.<br>\nTherefore, the axiom ax does not apply.</p>\n<p>By the way, you should really use definition instead of axiomatization/<br>\naxioms in your formalizations.</p>\n<p>Kind regards,<br>\nTjark</p>",
        "id": 294134396,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660843879
    },
    {
        "content": "<p>From: Steve W &lt;<a href=\"mailto:s.wong.731@gmail.com\">s.wong.731@gmail.com</a>&gt;<br>\nI see. But why is 'a of sort \"one\"? Is there a way to declare \"lst =<br>\n(1,2,3)\" without fixing the sort?</p>\n<p>Thanks<br>\nSteve</p>",
        "id": 294134654,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660843942
    },
    {
        "content": "<p>From: Tjark Weber &lt;<a href=\"mailto:webertj@in.tum.de\">webertj@in.tum.de</a>&gt;<br>\nOn Sun, 2011-04-10 at 19:21 +0100, Steve W wrote:</p>\n<blockquote>\n<p>I see. But why is 'a of sort \"one\"?</p>\n</blockquote>\n<p>Because you used the constant 1 in ax.  In Isabelle/HOL, the (most<br>\ngeneral) type of 1 is 'a::one (rather than, e.g., nat or int).</p>\n<blockquote>\n<p>Is there a way to declare \"lst = (1,2,3)\" without fixing the sort?</p>\n</blockquote>\n<p>Well, if 1 was of type 'a (rather than 'a::one), the type of lst in your<br>\naxiom would be 'a * nat * nat (rather than 'a::one * nat * nat).  For<br>\ninstance, consider</p>\n<p>consts myconst :: 'a<br>\n  axiomatization lst :: \"'a * nat * nat\"<br>\n  axioms ax : \"lst = (myconst,2,3)\"</p>\n<p>lemma \"snd (snd lst) = 3\"<br>\n  by (simp add: ax)</p>\n<p>However, none of this is very idiomatic.  It might be helpful to know<br>\nmore about what you're actually trying to achieve.</p>\n<p>Kind regards,<br>\nTjark</p>",
        "id": 294134662,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660843948
    }
]