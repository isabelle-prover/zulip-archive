[
    {
        "content": "<p>From: Burkhart Wolff &lt;<a href=\"mailto:bwolff@inf.ethz.ch\">bwolff@inf.ethz.ch</a>&gt;<br>\nDear all,</p>\n<p>we proudly announce our paper:</p>\n<p>Achim D. Brucker and Burkhart Wolff. Extensible Universes for Object- <br>\nOriented Data Models. In Proceedings of the European Conference of  <br>\nObject-Oriented Programming (ECOOP 2008). LNCS 5142 Springer-Verlag,  <br>\n2008.</p>\n<p>A pdf is available under:<br>\n<a href=\"http://www-wjp.cs.uni-sb.de/publikationen/brucker_ecoop_2008.pdf\">http://www-wjp.cs.uni-sb.de/publikationen/brucker_ecoop_2008.pdf</a></p>\n<p>Key features are:</p>\n<ul>\n<li>\n<p>We provide a data-type package for object-oriented class systems;<br>\n   it generates a theory with the usual oo infra-structure,<br>\n   i.e. a typed state with typed constructors and accessors,<br>\n   dynamic type-tests and (loss-less) casts</p>\n</li>\n<li>\n<p>all properties are proven from conservative definitions,<br>\n   the approach is based on a generalization of extensible records</p>\n</li>\n<li>\n<p>accessors can have types over arbitrary nestings of type-constructors<br>\n   such as list, pairs, but also (general) sets, total functions, ...<br>\n   Types are neither bound to be countable nor to represent domains ...<br>\n   (For those who get curious here: The underlying type-discipline<br>\n   allows Universe-constructions U_(n+1) = A + U_(n) =&gt; U_(n),<br>\n   but rules out circularities like U_(n) = A + U_(n) =&gt; U_(n) for<br>\n   =&gt;  the total function space).</p>\n</li>\n<li>\n<p>the package supports incremental definitions of class systems,<br>\n   by default, it supports the \"open world\" assumption</p>\n</li>\n</ul>\n<p>Comments and discussions are welcome !</p>\n<p>Best regards,</p>\n<p>Burkhart (&amp; Achim)</p>",
        "id": 294065033,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660825171
    }
]