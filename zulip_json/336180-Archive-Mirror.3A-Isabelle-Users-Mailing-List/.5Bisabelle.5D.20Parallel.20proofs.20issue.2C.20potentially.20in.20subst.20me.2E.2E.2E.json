[
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nOn Fri, 14 Sep 2012, David Greenaway wrote:</p>\n<blockquote>\n<p>On 14/09/12 08:58, Rafal Kolanski wrote:<br>\n[...]</p>\n<blockquote>\n<p>I really wish that there was some way to get exception traces again when<br>\nworking interactively in Isabelle.<br>\n[...]</p>\n</blockquote>\n<p>I too had previously thought that the exception traces in Isabelle had <br>\ndisappeared somewhere around the Isabelle2011-1 time-frame,</p>\n</blockquote>\n<p>Both of you seem to have taken software decay for granted, and did not <br>\ntell anybody here or on isabelle-dev.  Isabelle has traditionally very <br>\nhigh ethical standards for software quality, so things are usually put <br>\ninto shape again quickly, once the problem is known.</p>\n<p>I have come across the issue myself last fall just after the <br>\nIsabelle2011-1 release, so in Isabelle2012 it works again.  See the <br>\ntypical changelog prose of mine that explains everything in one line, <br>\nquoting even the relevant Poly/ML change:</p>\n<p>changeset:   45486:600682331b79<br>\nuser:        wenzelm<br>\ndate:        Mon Nov 14 16:16:49 2011 +0100<br>\nfiles:       src/Pure/Isar/runtime.ML<br>\ndescription:<br>\nmore detailed exception_trace: in Poly/ML 5.4.x intermediate handlers reset the trace (cf. Poly/ML SVN 1110);</p>\n<blockquote>\n<p>(Interestingly, there are actually two traces printed: the first is<br>\nthe one listed above, the second seems less useful.)</p>\n</blockquote>\n<p>That is the \"more detailed\" aspect above.  By filtering out some less <br>\nrelevant exceptions, the full trace was lost by accident.  So it is now <br>\nredundant, but informative again.</p>\n<blockquote>\n<p>So I am not sure if/when the stack traces disappeared, or if/when they <br>\ncame back, but happily they seem to be working now. The key points are <br>\nto enable \"Toplevel.debug\", disable inlining for the code you are trying <br>\nto debug, and make sure you look in \"<em>isabelle</em>\" trace window for the <br>\ntrace.</p>\n</blockquote>\n<p>In Isabelle/jEdit this is the raw output panel, to show physical stdout <br>\nmessages that are produced by the Poly/ML runtime system for the exception <br>\ntrace.  This is unmanaged output, and the window needs to be active when <br>\nit happens, otherwise it is lost.</p>\n<blockquote>\n<p>On a marginally related note, PolyML also has stepping/tracing<br>\nfacilities, as described in:</p>\n<p><a href=\"http://www.polyml.org/docs/Debugging.html\">http://www.polyml.org/docs/Debugging.html</a></p>\n<p>which you can theoretically use by typing commands in the \"<em>isabelle</em>\"<br>\nwindow. I have personally found that the combination of Isabelle and<br>\nProofGeneral and PolyML debugging tends to be a little unstable, so<br>\nI don't ever use these. I would be curious to know if others have had<br>\nmore success, however.</p>\n</blockquote>\n<p>In Isabelle/jEdit the support for Isabelle/ML support (including tracing <br>\nand debugging) is already better in Isabelle/jEdit of Isabelle2012 than <br>\never before in the history of Isabelle Proof General.</p>\n<p>There is also clear separation of physical stdin from the protocol <br>\nchannel.  So in principle one could negotiate with the raw Poly/ML <br>\ntoplevel loop (and its debugger) while Isabelle is running at full speed. <br>\nThere is no console window for that in the Prover IDE, though.</p>\n<p>In practice, I usually use plain writeln and PolyML.print to see what is <br>\nhappening in some ML code (after recompiling), not the debugger.</p>\n<p>Makarius</p>",
        "id": 294222514,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660898261
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nWhat you \"throw\" and \"catch\" on the Java Virtual Machine is slightly <br>\ndifferent from what you \"raise\" and \"handle\" in ML.  A JVM Exception <br>\nobject is much more heavy than in ML.  Nonetheless, you can use the <br>\n\"reraise\" function in Isabelle/ML to pass some of the original information <br>\nthrough an exception handler, most importantly the source position.</p>\n<p>Searching through the Isabelle sources for \"reraise\" reveals some examples <br>\n-- typically some administrative operation.</p>\n<p>The implementation manual section 0.5 <br>\n<a href=\"http://isabelle.in.tum.de/dist/Isabelle2012/doc/implementation.pdf\">http://isabelle.in.tum.de/dist/Isabelle2012/doc/implementation.pdf</a> has <br>\nsome further overview of the overall picture of exceptions, interrupts <br>\netc.  In particular, the infamous \"handle _ =&gt; \" from the SML/NJ library <br>\nbook must never be used.</p>\n<p>Makarius</p>",
        "id": 294222516,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660898265
    },
    {
        "content": "<p>From: Rafal Kolanski &lt;<a href=\"mailto:xs@xaph.net\">xs@xaph.net</a>&gt;<br>\nOn 17/09/12 04:54, Makarius wrote:</p>\n<blockquote>\n<p>Both of you seem to have taken software decay for granted, and did not<br>\ntell anybody here or on isabelle-dev.  Isabelle has traditionally very<br>\nhigh ethical standards for software quality, so things are usually put<br>\ninto shape again quickly, once the problem is known.</p>\n</blockquote>\n<p>This is not really \"decay\" as such. It is an implementation decision we<br>\nwere not aware of, and I merely wonder if there isn't some way to get<br>\ndetailed traces back while maintaining performance. David Matthews<br>\nexplained the situation to me and said he will think about if and how it<br>\nis possible. This is all I wanted, and he has been very helpful throughout.</p>\n<blockquote>\n<p>changeset:   45486:600682331b79<br>\nuser:        wenzelm<br>\ndate:        Mon Nov 14 16:16:49 2011 +0100<br>\nfiles:       src/Pure/Isar/runtime.ML<br>\ndescription:<br>\nmore detailed exception_trace: in Poly/ML 5.4.x intermediate handlers<br>\nreset the trace (cf. Poly/ML SVN 1110);</p>\n</blockquote>\n<p>Please be aware there are very important trade-offs both in life an<br>\nwork. There is a reason you are a (the?) Isabelle guru. It has to do<br>\nwith the exposure of time and investment of effort in keeping Isabelle<br>\nrunning, preventing aforementioned code decay while still improving the<br>\nfeature set. For this reason, you were aware of this situation and tried<br>\nto do something about it already.</p>\n<p>This is highly relevant work, and work for which we are grateful, but it<br>\nis not necessarily <em>our</em> work. Our work takes us further out than<br>\nIsabelle itself and into the realm of building larger projects with it.<br>\nWhen we identify situations where we need to automate or customise<br>\nbecause of project maintenance, that's when we get to dive back into the<br>\nIsabelle internals.</p>\n<p>So we have this periodic dance:</p>\n<p>On the one hand, we need to be periodically reminded that Isabelle can't<br>\njust have features shoved in because we want them, that they need to be<br>\nconsidered within the broader scope of the Isabelle system, and that<br>\nthere is an \"Isabelle way\" of doing things. We count on that for you.<br>\nSometimes we get a bit frustrated, but that's an acceptable price to pay.</p>\n<p>On the other hand, I think you need to be periodically reminded that<br>\nIsabelle has users at various levels of competency/experience, whose<br>\nprimary work focus is not Isabelle itself. In other words, there is more<br>\nto Isabelle than using Isabelle for the sake of Isabelle by means of<br>\nIsabelle (similarly Scala and Scala).</p>\n<p>Such users have need of interfaces which reflect at least slightly<br>\nrealistic work that they need to be doing.</p>\n<p>Concrete example.  During my visit to Munich this year, I wanted to find<br>\nout which theorems were used by fastforce to prove a lemma, because my<br>\ntactic wouldn't solve it, but fastforce did. Typical<br>\ntactical-implementation problem. So, there isn't a feature in Isabelle<br>\ncalled \"thms_used_to_prove my_theorem\". I look at the ML level, and<br>\nrealise there isn't one either, there's only a generalised fold over the<br>\nproof term structure. It turns out that if you perform a partial<br>\ntraversal of the proof term (first two levels), you get the required<br>\nfunctionality. But now I've spent the better part of an hour<br>\nunderstanding proof terms to make sure I got it right and bothered Lukas<br>\n(who is awesome, BTW) as a result.<br>\nSo finally, I have my shiny ML function which answers the very useful<br>\nquestion of \"which theorems were used to prove this theorem directly,<br>\nrather than the entire tree back to Pure\". Lukas likes it, Tobias thinks<br>\nit is useful.<br>\nAfter further discussion though, Lukas and I conclude that we'll never<br>\nget it past you, because we can't substantiate a serious enough<br>\nIsabelle-reason for modifying the proof term API to provide this<br>\ncommonly thought of and convenient functionality. So we put it in the<br>\nIsabelle Cookbook. After I left, Lars had the exact same problem, but<br>\nnow could just look up the solution.</p>\n<p>That is how things work for Isabelle non-gurus.</p>\n<p>All I ask for is a bit of respect. Just because I don't understand the<br>\nentire system and its multi-year vision in-depth does not necessarily<br>\nmean that all my ideas are stupid. In fact, some of the ideas might be<br>\ngood, but are in need of a guru suggesting a better implementation,<br>\nwhich is why I mention them anyway.</p>\n<p>There are real issues with introspection of proofs in larger projects,<br>\ne.g. being able to reliably tag images (you are looking at the most<br>\nrecent successful build of an image via the wwwfind interface... quick,<br>\nplease tell me which revision that is, and if the correct image is in<br>\nfact loaded without reading through the entire theory dropdown first). I<br>\nhave also tried discussing this at length, but no one cares except for<br>\nour team, so we use custom patches and I gave up. The next big project<br>\nwill have the exact same problems, and these hacky solutions will get<br>\nhacked in again and again, wasting people's time, while every time we<br>\nbring them up here we'll get told they are not relevant, because the<br>\nIsabelle project itself doesn't need it, and why would you want multiple<br>\ninstances of an image on the same machine anyway?</p>\n<blockquote>\n<p>In Isabelle/jEdit the support for Isabelle/ML support (including tracing<br>\nand debugging) is already better in Isabelle/jEdit of Isabelle2012 than<br>\never before in the history of Isabelle Proof General.</p>\n<p>There is also clear separation of physical stdin from the protocol<br>\nchannel.  So in principle one could negotiate with the raw Poly/ML<br>\ntoplevel loop (and its debugger) while Isabelle is running at full<br>\nspeed. There is no console window for that in the Prover IDE, though.</p>\n</blockquote>\n<p>Great, so at some point in the future when I change the theorem prover<br>\ninterface I use, the functionality I'm looking for might be available.<br>\nThis will be quite an improvement, to be able to run the interactive<br>\ndebugger at the same time as Isabelle, and when it happens will render<br>\nmy observations about exception traces mostly irrelevant (still would be<br>\nnice if David figured out a magical way to do it).</p>\n<blockquote>\n<p>In practice, I usually use plain writeln and PolyML.print to see what is<br>\nhappening in some ML code (after recompiling), not the debugger.</p>\n</blockquote>\n<p>Yes, I do this too, in my own code. I can't just rewrite some other<br>\nperson's code and rebuild, because that may take hours. Thanks to David<br>\nMatthews and the latest PolyML 5.5 though, we can now build everything<br>\nin under 3 hours (down from 8h with -q 0, and 4h with -q 1) on some<br>\nmachines and then do something which you really dislike: copy the image<br>\nfrom the much faster machine to the much slower one. I recall on this<br>\nlist someone (you?) telling me that one shouldn't copy binary images<br>\naround, and why would anyone want to do that anyway?</p>\n<p>So in summary, I may not be the smartest person on this planet, but if<br>\nI'm not aware of the intricacies of what exactly happened in Isabelle in<br>\nevery single commit, it's not because I don't care or take software<br>\ndecay for granted or something. In fact, if you ask people at Munich who<br>\nhave talked to me, it's almost the opposite. I have an inherent and<br>\nsometimes not-quite-sane instinct to streamline things and make them<br>\nmore intuitive.</p>\n<p>I just have four other projects to work on, and don't really feel<br>\nencouraged to try contribute when the answer is nearly always the same:<br>\n\"your idea sucks || is pointless || we don't have this problem la la la<br>\n|| your implementation is not canonical || that isn't a good enough<br>\nreason to modify the interface || ...). Look what happened now: I raised<br>\na bug report when I found one, and in the resulting discussion I get<br>\ntold that I take \"software decay for granted\".</p>\n<p>While your contributions are truly impressive, I would venture a<br>\nsuggestion to at least try pretend to be a bit more open-minded. You<br>\nknow, Bill Clinton style. He won't do what you asked for in all<br>\nprobability anyway, but at least you'll walk away from the discussion<br>\nfeeling like your idea was given due consideration. I don't know how<br>\nelse to explain this, other than that the Isabelle users list is great,<br>\nhelpful and proving stuff is fun and easy to release, working at the ML<br>\nlevel is a depressing experience, and trying to share the results of<br>\none's work doubly so.</p>\n<p>Sincerely,</p>\n<p>Rafal Kolanski.</p>",
        "id": 294222530,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660898279
    },
    {
        "content": "<p>From: Lukas Bulwahn &lt;<a href=\"mailto:bulwahn@in.tum.de\">bulwahn@in.tum.de</a>&gt;<br>\nJust to clarify my intentions in this example of a feature request here:<br>\nCertain features, as the one mentioned above, can be implemented <br>\nperfectly in Isabelle's \"user space\". For the implementing developer, <br>\nmany functions then appear to be important for a decent library and we <br>\nwould like to add them to \"kernel\" modules to make our contribution more <br>\nvisible. However, Isabelle's slogan \"fight features\" (p.3 of the <br>\nIsabelle implementation manual) just as the often cited LCF approach <br>\nforbid to modify and extend kernel modules, just because of a temporal <br>\nstate of mind. Coincidently, Makarius is the person, who enforces these <br>\nmatters in our system and repository---Hence, the statement \"We can't <br>\nget it past Makarius\", really means we do not have any substantial <br>\nreason to modify the kernel.</p>\n<p>Nonetheless, the story of some feature usually does not end here. If <br>\ndevelopers are quite proud of their functionality, they try to advertise <br>\nit, as we did. One such way is certainly the Isabelle developer <br>\ntutorial, another is to find others that need the functionality. This <br>\nusually ends up in temporal clones here und there till the pressure is <br>\nlarge enough for one of the developers to take another round of <br>\niteration of some subject.</p>\n<p>Unlike some other developers, I was in the fortunate position to learn <br>\nthis way of system development from Makarius and many others in the <br>\ngroup in Munich.</p>\n<p>But again, this thread (as many other threads before) is getting largely <br>\noff-topic.</p>\n<p>Lukas</p>",
        "id": 294222581,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660898284
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nBefore continuing the meta-discussion, which requires more time to study <br>\nto make sense in the response, just back to the technical question:</p>\n<p>Which aspect of ML expection trace is no longer working, camparing <br>\nIsabelle2012 to some more distant past?</p>\n<p>David Matthews improved something on his side in SVN 1110, I followed in <br>\nmy side in 600682331b79, so it should be all back.  What is the remaining <br>\nproblem that was not spelled out explicitly so far?</p>\n<p>Makarius</p>",
        "id": 294222593,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660898290
    },
    {
        "content": "<p>From: David Matthews &lt;<a href=\"mailto:dm@prolingua.co.uk\">dm@prolingua.co.uk</a>&gt;<br>\nWith PolyML 5.3 and earlier, if you had a handler that caught only <br>\nexception foo but you had raised bar then exception_trace would show the <br>\nwhole stack trace from the point where you raised bar.  With 5.4 and <br>\nlater an exception handler of the form<br>\nhandle foo =&gt; ... is rewritten as though it were<br>\nhandle x =&gt; (case x of foo =&gt; ... | x =&gt; reraise x)<br>\nSo exception_trace only shows the stack from the point where bar was <br>\nreraised.  That may well not be as helpful.</p>\n<p>I understand the problem; it's just that making this change greatly <br>\nsimplified the exception mechanism and speeded it up.</p>\n<p>David</p>",
        "id": 294222617,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660898304
    },
    {
        "content": "<p>From: Rafal Kolanski &lt;<a href=\"mailto:xs@xaph.net\">xs@xaph.net</a>&gt;<br>\nConsider this code:</p>\n<p>exception TFX;<br>\n  exception IRR;</p>\n<p>fun f1 x = raise TFX;<br>\n  fun f2 x = f1 x + 1;<br>\n  fun f3 x = f2 x + 1;<br>\n  fun f4 x = f3 x + 1;<br>\n  fun f5 x = (f4 x + 1) handle IRR =&gt; raise IRR;<br>\n  fun f6 x = f5 x + 1;<br>\n  fun f7 x = f6 x + 1;<br>\n  fun f8 x = f7 x + 1;<br>\n  fun f9 x = f8 x + 1;</p>\n<p>Output of \"f9 1\" in PolyML 5.3:</p>\n<p>f1(1)<br>\nf2(1)<br>\nf3(1)<br>\nf4(1)<br>\nf5(1)<br>\nf5(1)<br>\nf6(1)<br>\nf7(1)<br>\nf8(1)<br>\nf9(1)<br>\n&lt;top level&gt;<br>\nCODETREE().genCode(2)(1)<br>\nCOMPILER_BODY().baseCompiler(4)executeCode(1)<br>\nEnd of trace</p>\n<p>Output in PolyML 5.4+:</p>\n<p>f6(1)<br>\nf7(1)<br>\nf8(1)<br>\nf9(1)<br>\n&lt;top level&gt;<br>\nCODETREE().genCode(2)(1)<br>\nCOMPILER_BODY().baseCompiler(4)executeCode(1)<br>\nEnd of trace</p>\n<p>TFX has not been handled at any point, but in newer releases its origin<br>\nis obscured by the handler for IRR, and will be obscured by any handler.</p>\n<p>David Matthews has kindly explained the design decision to me and said<br>\nhe will think on whether it is possible the old behaviour back without<br>\ntaking a non-trivial penalty. That's really all I hoped for in raising<br>\nthe backtrace issue originally. I also considered that maybe I'm not the<br>\nfirst ML-level Isabelle user to run into this, and so someone might have<br>\na (hacky) workaround.</p>\n<p>I'll honestly say that I don't at present understand what issue your<br>\nchangeset 600682331b79 addresses and do not possess the free time to<br>\nfind out, but it appears to not be the one I am describing.</p>\n<p>Sincerely,</p>\n<p>Rafal Kolanski.</p>",
        "id": 294222627,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660898312
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nOn Mon, 17 Sep 2012, Rafal Kolanski wrote:</p>\n<blockquote>\n<blockquote>\n<p>David Matthews improved something on his side in SVN 1110, I followed in<br>\nmy side in 600682331b79, so it should be all back.  What is the<br>\nremaining problem that was not spelled out explicitly so far?</p>\n</blockquote>\n<p>Consider this code:</p>\n<p>exception TFX;<br>\n exception IRR;</p>\n<p>fun f1 x = raise TFX;<br>\n fun f2 x = f1 x + 1;<br>\n fun f3 x = f2 x + 1;<br>\n fun f4 x = f3 x + 1;<br>\n fun f5 x = (f4 x + 1) handle IRR =&gt; raise IRR;<br>\n fun f6 x = f5 x + 1;<br>\n fun f7 x = f6 x + 1;<br>\n fun f8 x = f7 x + 1;<br>\n fun f9 x = f8 x + 1;</p>\n<p>Output of \"f9 1\" in PolyML 5.3:</p>\n<p>f1(1)<br>\nf2(1)<br>\nf3(1)<br>\nf4(1)<br>\nf5(1)<br>\nf5(1)<br>\nf6(1)<br>\nf7(1)<br>\nf8(1)<br>\nf9(1)<br>\n&lt;top level&gt;<br>\nCODETREE().genCode(2)(1)<br>\nCOMPILER_BODY().baseCompiler(4)executeCode(1)<br>\nEnd of trace</p>\n<p>Output in PolyML 5.4+:</p>\n<p>f6(1)<br>\nf7(1)<br>\nf8(1)<br>\nf9(1)<br>\n&lt;top level&gt;<br>\nCODETREE().genCode(2)(1)<br>\nCOMPILER_BODY().baseCompiler(4)executeCode(1)<br>\nEnd of trace</p>\n<p>TFX has not been handled at any point, but in newer releases its origin<br>\nis obscured by the handler for IRR, and will be obscured by any handler.</p>\n</blockquote>\n<p>OK, this is a reasonable report on the situation after all.</p>\n<blockquote>\n<p>I'll honestly say that I don't at present understand what issue your <br>\nchangeset 600682331b79 addresses and do not possess the free time to <br>\nfind out, but it appears to not be the one I am describing.</p>\n</blockquote>\n<p>It addresses exactly that for the Isar toplevel, but it cannot change the <br>\nsituation for user-code, of course.</p>\n<p>Makarius</p>",
        "id": 294222630,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660898314
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nFirst of all, a citation is just a citation, not a literal statement. <br>\nThe ones on the front-part of the Isabelle/Isar manual do have some <br>\ncorrelation with the received Isabelle development process and its <br>\nchallenges, which is why I've put them there, but eveybody needs to start <br>\nhis own thinking process to see behind the surface and the actual things<br>\nin the background.</p>\n<p>I've recently come across a very interesting lecture by Alan Kay on <br>\n\"Programming and Scaling\" <a href=\"http://tele-task.de/archive/video/flash/14029/\">http://tele-task.de/archive/video/flash/14029/</a> <br>\nwhich might lead to more citations from him ending up in that spot of the <br>\nimplementation manual.  I particularly like one of his explanations <br>\n(probably from another talk) about the fundamental importance of <br>\narchitecture: instead of turning many bricks naively into an amorphic pile <br>\nof bricks, to make a sophisticated building you need to follow certain <br>\nstructuring principles that you need to learn first.  And the main focus <br>\nof that talk is then about learning and education, especially in the US, <br>\nespecially science and math education.</p>\n<p>Alan Kay is an interesting person in many respects.  He has now grown old <br>\nand wise, and can go beyond the follies from his youth, most notably the <br>\n\"object-oriented\" movement that he started.  (He is the inventor of the <br>\nterm \"OO\", so its fun to see him bashing that a lot now.)</p>\n<p>Makarius</p>",
        "id": 294222637,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660898321
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nThis thread is already getting old, but the above paragraph sounds very <br>\nodd to me.  Myself and several other people I know use routinely a lot of <br>\ndifferent Isabelle versions and work with images from them.  You have the <br>\nregular settings that can be modified locally, and tools like \"isabelle <br>\nversion -i\" to get more specific identification of repository snapshots. <br>\nThis should give sufficient flexibility to organize images in many ways. <br>\nIn the next release that will be perfected even further, thanks to the new <br>\nbuild system.</p>\n<p>I don't think any of your local \"hacks\" are actually needed.  IIRC, this <br>\nwas also what I hinted at when the discussion was coming up some years <br>\nago, but it was not taken to the end, just cancelled in frustration <br>\nprobably.</p>\n<p>Makarius</p>",
        "id": 294222900,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660898468
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nThis has already become a running gag: someone, maybe even Gerwin, decided <br>\nat some point that Isabelle has an \"Isar level for users\" and an \"ML level <br>\nfor developers\".  But I've myself never introduced anything like that.</p>\n<p>The very first Isar command I implemented in the distant past was 'ML'. <br>\nAnd today Isabelle/Isar and Isabelle/ML are neatly intertwined such that <br>\nyou can go back and forth between the languages as you need in your tool <br>\nimplementations.  The Prover IDE is also a fairly good IDE for ML inside <br>\nregular Isar source.</p>\n<p>So you have Isabelle/Pure/HOL/ML/Isar/Scala etc but it is difficult to <br>\nassign \"levels\" to them.  In practice you work with several of these <br>\nIsabelle aspects at the same time. The delicate bootstrapping process in <br>\nthe Isabelle/Pure implementation is a different story -- the machine room <br>\ndown there is definitely not user-space.</p>\n<p>Makarius</p>",
        "id": 294222907,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660898473
    },
    {
        "content": "<p>From: Rafal Kolanski &lt;<a href=\"mailto:xs@xaph.net\">xs@xaph.net</a>&gt;<br>\nYou are entirely missing my point here. You keep referring to Isabelle <br>\nversions as if they are the only versions anyone might care about. We <br>\nrun a project <em>using</em> Isabelle. The project has its own revision control <br>\nversions, and Isabelle is just one subrepo.</p>\n<p>What you are describing is the isabelle version used to build a <br>\nparticular image. We know which version this is. What we don't know is <br>\nwhich repository version of the <em>project</em> built the image we are <br>\npresenting to the user.</p>\n<p>Trivially: on port 8193 we have the wwwfind server presenting an <br>\ninterface to users wishing to search through the latest CREFINE image <br>\nthe regression test server was able to build with the current version of <br>\nIsabelle. Question: given that you know which Isabelle version and <br>\nPolyML version built it (obvious from the image path and from Isabelle <br>\nbeing a subrepo), which repository version are you looking at? Sometimes <br>\nan image can be broken for a few days, and people need to tell they are <br>\nnot looking at the latest source version, but at the latest successfully <br>\nbuilt version.</p>\n<p>I really can't get the point across any more clearly. I have repeatedly <br>\ntried to explain that Isabelle is a tool upon which we run a project, <br>\nand it is not the only project in existence. It should be evident that <br>\nsimply knowing the revision of Isabelle used to build something is not <br>\nthe only revision one should know, as Isabelle was used to build <br>\n<em>something</em> and the version of that <em>something</em> is in fact more <br>\nimportant, henceforth \"isabelle version -i\" really does nothing here.</p>\n<p>Sincerely,</p>\n<p>Rafal Kolanski.</p>",
        "id": 294222918,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660898480
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nThis is getting a bit far off the Isabelle track.</p>\n<p>I claimed that Isabelle has sufficiently many ways to identify itself <br>\nprecisely, and reconfigure locations for images and other resources. <br>\nBuilding other projects on top should work.  People have done that without <br>\npatching Isabelle.</p>\n<p>BTW, when you say \"the latest source version\" my semantic spell-checker <br>\nmarks it read, because that is not a well-defined notion.  The changeset <br>\nid is how you identify things unambigously, or a collection of ids -- for <br>\neach repository.</p>\n<p>Makarius</p>",
        "id": 294222942,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660898492
    },
    {
        "content": "<p>From: Rafal Kolanski &lt;<a href=\"mailto:xs@xaph.net\">xs@xaph.net</a>&gt;<br>\nDear Isabelle Users and Developers,</p>\n<p>I have recently come across an issue when trying to improve the runtimes <br>\nof our regression test server. When I ran it with -q 1, the times <br>\nimproved drastically, which was nice. When I ran it with -q 2 though, it <br>\ndidn't build at all. Those of you who know me will not be surprised to <br>\nfind it was in a theory I wrote :)</p>\n<p>The issue affects building an image in non-interactive mode under <br>\nIsabelle 2012 and a very recent development version (2267901ae911), in <br>\nboth 32-bit and 64-bit builds of PolyML versions 5.4.0, 5.4.1 and <br>\n5.4.2-dev. Breakage confirmed on three different physical machines.</p>\n<p>Settings were:<br>\nISABELLE_USEDIR_OPTIONS=\"-M 2 -p 0 -q 2 -v true\"<br>\nbut also confirmed to break with -M max and -p 1.</p>\n<p>Please find attached the ROOT.ML, IsaMakefile and Loading.thy which <br>\nreplicates the issue in a distilled form building on HOL only. Run with:<br>\nisabelle make MAPPED_SEP</p>\n<p>The error should be on the line attempting the subst:<br>\n*** exception THM 0 raised (line 758 of \"thm.ML\"):<br>\n*** forall_intr: variable \"bs\" free in assumptions<br>\n*** [| length bs = sz; P (Suc p) sz bs; p # Z = Z |]<br>\n*** ==&gt; p # load_list_basic sz (Suc p) = Z<br>\n***   [!!]<br>\n*** At command \"apply\" (line 30 of \"/home/rafalk/t/isa_bug/Loading.thy\")</p>\n<p>The issue is definitely due to some shadowing/renaming of the variable <br>\nbs, but what else is going on is well beyond my current grasp of <br>\ncomprehension.</p>\n<p>Sincerely,</p>\n<p>Rafal Kolanski.<br>\n<a href=\"/user_uploads/14278/kqeMjRkz8xliak3AvZYEYc48/IsaMakefile\">IsaMakefile</a><br>\n<a href=\"/user_uploads/14278/AslIWWJMyvjz8UfxfUnDs5H8/Loading.thy\">Loading.thy</a><br>\n<a href=\"/user_uploads/14278/IZF0aqTZNoeZEP3gxqIa4-pU/ROOT.ML\">ROOT.ML</a></p>",
        "id": 294223591,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660898775
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nOn Mon, 10 Sep 2012, Rafal Kolanski wrote:</p>\n<blockquote>\n<p>I have recently come across an issue when trying to improve the runtimes <br>\nof our regression test server. When I ran it with -q 1, the times <br>\nimproved drastically, which was nice. When I ran it with -q 2 though, it <br>\ndidn't build at all.</p>\n</blockquote>\n<p>Now the world knows that the top-secret proofs of L4.verified are still <br>\nchecked sequentially :-)</p>\n<blockquote>\n<p>The error should be on the line attempting the subst:<br>\n*** exception THM 0 raised (line 758 of \"thm.ML\"):<br>\n*** forall_intr: variable \"bs\" free in assumptions<br>\n*** [| length bs = sz; P (Suc p) sz bs; p # Z = Z |]<br>\n*** ==&gt; p # load_list_basic sz (Suc p) = Z<br>\n***   [!!]<br>\n*** At command \"apply\" (line 30 of \"/home/rafalk/t/isa_bug/Loading.thy\")</p>\n<p>The issue is definitely due to some shadowing/renaming of the variable <br>\nbs, but what else is going on is well beyond my current grasp of <br>\ncomprehension.</p>\n</blockquote>\n<p>I've had a quick look at the \"subst\" method, but it looks very bad.  That <br>\ncode has not been maintained in many years. It simply ignores the <br>\nall-important Proof.context when inventing free variables that are <br>\nexpected to be fresh, but aren't.  There is not just one place, but many. <br>\nOne could probably make a small changeset to get your example working, but <br>\nit will then crash in another situation.</p>\n<p>The following comment in isand.ML, which is one part of the problem here <br>\nis quite representative:</p>\n<p>THINK: are we really ok with our varify name w.r.t the prop - do<br>\n   we also need to avoid names in the hidden hyps? What about<br>\n   unification contraints in flex-flex pairs - might they also have<br>\n   extra free vars?</p>\n<p>The answer: hyps are necessary, but still not sufficient.  One needs to <br>\ntake the full Proof.context into account.</p>\n<p>A quick fix is to do the renaming yourself in the proof, i.e. avoid <br>\naccidental overlap of blue / brown / green variables with the same name on <br>\nthe surface.  Then \"subst\" can continue its work with its archaic context <br>\nmodel a little longer.</p>\n<p>Makarius</p>",
        "id": 294223870,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660898934
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nSee <a href=\"http://isabelle.in.tum.de/repos/isabelle/rev/d1fcb4de8349\">http://isabelle.in.tum.de/repos/isabelle/rev/d1fcb4de8349</a> and <br>\n<a href=\"http://isabelle.in.tum.de/repos/isabelle/rev/25fc6e0da459\">http://isabelle.in.tum.de/repos/isabelle/rev/25fc6e0da459</a> for what I've <br>\nmade in the meantime.  You have to see yourself how to apply this to <br>\nIsabelle2012 (via \"hg import\" etc).  Isabelle has only a single official <br>\nrelease branch, and it will take a few months until the next one is <br>\npublished.</p>\n<p>I think the main problem with your example was in RWInst.mk_renamings, as <br>\nchanged in 25fc6e0da459 to get rid of usednames_of_thm in particular.</p>\n<p>There are many more situations where \"subst\" produces free variables on <br>\nthe spot.  They still don't look 100% canonical to me, even after the <br>\nchange, but for this round of refurbishing tools from the Isabelle library <br>\nit should be sufficient.</p>\n<p>Makarius</p>",
        "id": 294224022,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660899013
    },
    {
        "content": "<p>From: Rafal Kolanski &lt;<a href=\"mailto:xs@xaph.net\">xs@xaph.net</a>&gt;<br>\nOn 13/09/12 04:16, Makarius wrote:</p>\n<blockquote>\n<p>On Mon, 10 Sep 2012, Rafal Kolanski wrote:</p>\n<blockquote>\n<p>I have recently come across an issue when trying to improve the<br>\nruntimes of our regression test server. When I ran it with -q 1, the<br>\ntimes improved drastically, which was nice. When I ran it with -q 2<br>\nthough, it didn't build at all.</p>\n</blockquote>\n<p>Now the world knows that the top-secret proofs of L4.verified are still<br>\nchecked sequentially :-)</p>\n</blockquote>\n<p>We generally try to run with the highest amount of parallelism that does<br>\nnot make the machine thrash or PolyML segfault. Previously that was -q<br>\n0, now it's -q 1. We're tracking the svn version of the upcoming PolyML<br>\n5.5 to see if at some point we can switch to -q 2.</p>\n<blockquote>\n<blockquote>\n<p>The issue is definitely due to some shadowing/renaming of the variable<br>\nbs, but what else is going on is well beyond my current grasp of<br>\ncomprehension.</p>\n</blockquote>\n<p>I've had a quick look at the \"subst\" method, but it looks very bad. <br>\nThat code has not been maintained in many years. It simply ignores the<br>\nall-important Proof.context when inventing free variables that are<br>\nexpected to be fresh, but aren't.  There is not just one place, but<br>\nmany. One could probably make a small changeset to get your example<br>\nworking, but it will then crash in another situation.</p>\n</blockquote>\n<p>I made a bad joke about how I should title my post to the list \"On the<br>\nimproper use of context in the subst method\", but then we weren't sure<br>\nif that was exactly the case. Context is really hard to get right, and<br>\nold code does accumulate these leaks.</p>\n<blockquote>\n<p>A quick fix is to do the renaming yourself in the proof, i.e. avoid<br>\naccidental overlap of blue / brown / green variables with the same name<br>\non the surface.  Then \"subst\" can continue its work with its archaic<br>\ncontext model a little longer.</p>\n</blockquote>\n<p>Yes, we ended up doing that, and now we're back to PolyML segfaulting<br>\nwith -q 2. David seems to be applying quite a few fixes to the GC<br>\nthough, so we have high hopes of getting it working soon.</p>\n<p>I would also like to say thank you in general for the movement towards<br>\nlocal context and parallelism over the years. We went down from a full<br>\ntest run of almost 8 hours down to 4 when switching to -q 1.</p>\n<p>Thanks for patching it in the repository. Hopefully it will save someone<br>\na major head-scratching in future!</p>\n<p>Sincerely,</p>\n<p>Rafal Kolanski</p>",
        "id": 294224036,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660899022
    },
    {
        "content": "<p>From: Lars Noschinski &lt;<a href=\"mailto:noschinl@in.tum.de\">noschinl@in.tum.de</a>&gt;<br>\nThat is good to know. I have a student project planned (but no student <br>\nyet) to implement a subst-like tactic with the hole-selection of <br>\nssreflects' rewrite tactic. I will keep in mind that subst's code is to <br>\nbe taken with a grain of salt.</p>\n<p>-- Lars</p>",
        "id": 294224045,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660899025
    },
    {
        "content": "<p>From: David Matthews &lt;<a href=\"mailto:dm@prolingua.co.uk\">dm@prolingua.co.uk</a>&gt;<br>\nI have fixed all the segfaults I am aware of with the GC and I'm on the <br>\npoint of releasing SVN 1594 as Poly/ML 5.5.  If you have an example that <br>\nconsistently fails I will investigate.  However, I need as much detail <br>\nas possible and if at all possible a script that I can run to reproduce <br>\nit.  Bear in mind that I know absolutely nothing about using Isabelle so <br>\nit needs to be foolproof.</p>\n<p>David</p>",
        "id": 294224053,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660899032
    },
    {
        "content": "<p>From: Gerwin Klein &lt;<a href=\"mailto:gerwin.klein@nicta.com.au\">gerwin.klein@nicta.com.au</a>&gt;<br>\nImagine the pain we've been in all that time ;-)</p>\n<p>We can now do this, because we have a regression test server with 128GB RAM.</p>\n<p>My desktop machine still needs to run sessions sequentially to get things through, although poly 5.5.0 has made the situation dramatically better.</p>\n<p>Cheers,<br>\nGerwin</p>",
        "id": 294224061,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660899038
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nIt is also a natural consequence of disclosed sources, but you know this <br>\nalready.</p>\n<p>Makarius</p>",
        "id": 294224070,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660899044
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nThis should read as \"closed\", or \"nondisclosed\" to make the Newspeak come <br>\nout properly.</p>\n<p>Makarius</p>",
        "id": 294224077,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660899050
    },
    {
        "content": "<p>From: Rafal Kolanski &lt;<a href=\"mailto:xs@xaph.net\">xs@xaph.net</a>&gt;<br>\nI will be testing that as my third task for today, so fingers crossed. <br>\nIt's unlikely if anything goes wrong I'll be able to give you a <br>\nreproducible script though. The errors I've seen so far are always of <br>\nthe kind \"PolyML segfaults sometimes when building large images\" :/</p>\n<p>I really wish that there was some way to get exception traces again when <br>\nworking interactively in Isabelle. You have already said you don't know <br>\nmuch about using Isabelle, but perhaps someone here knows a trick? There <br>\nalready is a nice debugging interface built into PolyML, I just don't <br>\nknow how to use it while working with a theorem prover.</p>\n<p>Sincerely,</p>\n<p>Rafal Kolanski.</p>",
        "id": 294224127,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660899075
    },
    {
        "content": "<p>From: David Greenaway &lt;<a href=\"mailto:david.greenaway@nicta.com.au\">david.greenaway@nicta.com.au</a>&gt;<br>\nHi Raf,</p>",
        "id": 294224147,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660899093
    },
    {
        "content": "<p>From: Rafal Kolanski &lt;<a href=\"mailto:xs@xaph.net\">xs@xaph.net</a>&gt;<br>\nHi David,</p>\n<p>As I demonstrated in person, the exception traces only get you as far as <br>\nthe first exception handler you encounter. So for example if anywhere in <br>\nthe chain there was a handle BAR, then even though you threw a FOO you <br>\nstill wouldn't get a trace past that handler.</p>\n<p>I think we decided that behaviour appeared in 5.4? Dave Matthews told me <br>\nit was a design decision which improved performance and simplified code, <br>\nbut I am still rather sad it is gone. I wish there was a way to enable <br>\nit again for our interactive sessions, even if we have to suffer a speed <br>\npenalty. For batch sessions with parallelism, the existing behaviour in <br>\nexchange for performance is definitely the right idea.</p>\n<p>I guess if the problem is really massively painful, we can always <br>\nrebuild with 5.3 and trace with that while head-scratching in parallel :/</p>\n<p>Sincerely,</p>\n<p>Rafal Kolanski.</p>",
        "id": 294224174,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660899111
    }
]