[
    {
        "content": "<p>From: Thomas Sewell &lt;<a href=\"mailto:Thomas.Sewell@nicta.com.au\">Thomas.Sewell@nicta.com.au</a>&gt;<br>\nHey Isabelle users.</p>\n<p>I've been playing with Isabelle 2009-1's parallelism features for a <br>\nwhile now, and have come to the conclusion that I can never get quite <br>\nwhat I want from them. There are two problems. On my desktop machine at <br>\nwork, I can't safely enable parallelism. On my desktop machine at home, <br>\nI can't completely disable parallelism.</p>\n<p>The first problem is that the L4.verified proof repository I work on is <br>\nhuge (tens of thousands of lemmas and hundreds of thousands of lines of <br>\nproof). This exposes a problem with parallel proof checking. CPU usage <br>\nlooks good to begin with but then our systems very rapidly run out of <br>\nmemory and start thrashing. I suspect the problem here is that for every <br>\nproof saved for later checking the relevant context needs to saved as <br>\nwell. Our contexts get quite large, so the theory-parsing thread doesn't <br>\nhave to get far ahead of the proof-checking threads for memory to run <br>\nout. The solution to this is to turn off parallel proof checking.</p>\n<p>Furthermore, although Isabelle 2009-1 loads theories in parallel this <br>\ndoes not seem to translate to CPU parallelism. It is clear from the log <br>\nchatter that multiple theories are being loaded at once, however, when <br>\nparallel proofs are disabled CPU usage remains at one core's worth. <br>\nRunning UNIX top and showing thread decompositions (press \"H\") reveals <br>\nthat there are multiple polyml threads running but their CPU usage <br>\nalways adds to exactly one core. It looks a lot like there's a lock <br>\nsomewhere all the threads need to run. This prevents me getting any <br>\nparallel execution on my work machine.</p>\n<p>Finally, on my machine at home, which seems to act up in the context of <br>\nparallelism, I can't disable it. I can turn off parallel proof checking <br>\nand set the maximum thread count to 1. UNIX top confirms that this <br>\nreduces the number of polyml threads created from 7 to 2, which then <br>\nshare the CPU between them in exactly the same way. This prevents me <br>\ndisabling real parallelism on my home machine. I can still run a busy <br>\nloop on the other core, which seems to hide the mysterious issues.</p>\n<p>Do other users see the same behaviour? Do the developers know what's <br>\ngoing on? Could it be easily fixed?</p>\n<p>Yours,<br>\n    Thomas.</p>",
        "id": 294105189,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660834982
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nOn Fri, 9 Apr 2010, Thomas Sewell wrote:</p>\n<blockquote>\n<p>The first problem is that the L4.verified proof repository I work on is <br>\nhuge (tens of thousands of lemmas and hundreds of thousands of lines of <br>\nproof). This exposes a problem with parallel proof checking. CPU usage <br>\nlooks good to begin with but then our systems very rapidly run out of <br>\nmemory and start thrashing. I suspect the problem here is that for every <br>\nproof saved for later checking the relevant context needs to saved as <br>\nwell. Our contexts get quite large, so the theory-parsing thread doesn't <br>\nhave to get far ahead of the proof-checking threads for memory to run <br>\nout. The solution to this is to turn off parallel proof checking.</p>\n</blockquote>\n<p>In a low memory situation, you have two options to play with:</p>\n<p>* Multithreading.max_threads (usedir option -M)<br>\n   * Goal.parallel_proofs (usedir option -q)</p>\n<p>See also section 3.4 in the Isabelle System manual for some further <br>\nexplanations.  In particulay, -q1 vs. -q2 might sometimes help.</p>\n<p>Since your application is rather big, I would say the real solution is to <br>\ninstall more memory.  As a rule of thumb, you need to scale up memory with <br>\nthe number of cores.  Less than 2 GB per core is unlikely to work here. <br>\nSince the total heap size of Poly/ML is limited to 2-3 GB on 32bit, you <br>\nmight have to switch to 64bit by editing the ML settings accordingly. <br>\nThere is an example in Isabelle2009-1/etc/settings.  Multiply the memory <br>\nby 1.5 or even 2 for 64bit mode.</p>\n<blockquote>\n<p>Furthermore, although Isabelle 2009-1 loads theories in parallel this <br>\ndoes not seem to translate to CPU parallelism. It is clear from the log <br>\nchatter that multiple theories are being loaded at once, however, when <br>\nparallel proofs are disabled CPU usage remains at one core's worth. <br>\nRunning UNIX top and showing thread decompositions (press \"H\") reveals <br>\nthat there are multiple polyml threads running but their CPU usage <br>\nalways adds to exactly one core. It looks a lot like there's a lock <br>\nsomewhere all the threads need to run. This prevents me getting any <br>\nparallel execution on my work machine.</p>\n</blockquote>\n<p>The degree of parallelism in typical theory development graphs is <br>\nsurprisingly low.  Nonetheless, you should get some speedup, unless the <br>\ngraph is all linear.</p>\n<p>If CPU usage is really just 100% there might be some ML tools using <br>\nsomething like setmp_CRITICAL internally.  The official Isabelle <br>\ndistribution is essentially free from such exclusive execution, but maybe <br>\nyou have your own tools.  Or maybe it is just some critical wrapper around <br>\nthe main use_thys invocation in ROOT.ML of the session (only relevant for <br>\nbatch mode).</p>\n<blockquote>\n<p>Finally, on my machine at home, which seems to act up in the context of <br>\nparallelism, I can't disable it. I can turn off parallel proof checking <br>\nand set the maximum thread count to 1. UNIX top confirms that this <br>\nreduces the number of polyml threads created from 7 to 2, which then <br>\nshare the CPU between them in exactly the same way. This prevents me <br>\ndisabling real parallelism on my home machine. I can still run a busy <br>\nloop on the other core, which seems to hide the mysterious issues.</p>\n</blockquote>\n<p>I have just tried ISABELLE_USEDIR_OPTIONS=\"-M 1\" on my 2-core laptop and <br>\nit works as expected: there are only 2 threads, the main ML thread <br>\n(typically 80% CPU time) and the GC thread (20% CPU time).  Total CPU <br>\nusage is &lt; 50% accounting for the 2 cores, i.e. this is really single-core <br>\nmode.  The ML thread and GC thread are alternating each other.</p>\n<p>Makarius</p>",
        "id": 294105241,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660834994
    }
]