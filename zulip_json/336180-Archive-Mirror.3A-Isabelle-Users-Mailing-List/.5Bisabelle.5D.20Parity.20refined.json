[
    {
        "content": "<p>From: Florian Haftmann &lt;<a href=\"mailto:florian.haftmann@informatik.tu-muenchen.de\">florian.haftmann@informatik.tu-muenchen.de</a>&gt;<br>\nHi all,</p>\n<p>I am planning some steps to let three separate constructs in<br>\nIsabelle/HOL converge:</p>\n<ul>\n<li>The plain predicate expression »2 dvd _«.</li>\n<li>The predicate »even _« (with the obvious abbreviation »odd _«).</li>\n<li>The predicate expression »_ mod 2 _ = 0«.</li>\n</ul>\n<p>Convergence here means the following things:</p>\n<ul>\n<li>\n<p>Augmented simplifier rewrite rules on »2 dvd _« to gain the same<br>\nautomation as for expressions involving »_ mod 2 _ = 0«;</p>\n</li>\n<li>\n<p>A type class hierarchy to develop »even« uniformly algebraically for<br>\nnat and int;</p>\n</li>\n<li>\n<p>Replacing definition »even« by a simple abbreviation »even a == 2 dvd<br>\na« within a certain algebraic type class (presumable what is currently<br>\nnamed class »semiring_div_parity«) – n.b. at this stage I am unsure<br>\nwhether this should be a mere input abbreviation or not.</p>\n</li>\n</ul>\n<p>With this more unified concept of parity, it should be possible</p>\n<ul>\n<li>\n<p>to integrate the existing infrastructure for division of numeral<br>\nexpressions (class »semiring_numeral_div«) into the whole picture;</p>\n</li>\n<li>\n<p>to bootstrap division on integer solely relying on division of nat<br>\nwithout funny auxiliary definitions;</p>\n</li>\n<li>\n<p>to provide native simp rules for division on nat numerals, without<br>\nrelying on int here altogether.</p>\n</li>\n</ul>\n<p>A future perspective could be to unify and simplify the<br>\nbit-representation stuff from the HOL-Word theories.</p>\n<p>I am looking forward to comments and suggestions.</p>\n<p>Cheers,<br>\n    Florian<br>\n<a href=\"/user_uploads/14278/hHPS2lZHHdiBYnG-Q8fgg0nl/signature.asc\">signature.asc</a></p>",
        "id": 294275148,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660918533
    }
]