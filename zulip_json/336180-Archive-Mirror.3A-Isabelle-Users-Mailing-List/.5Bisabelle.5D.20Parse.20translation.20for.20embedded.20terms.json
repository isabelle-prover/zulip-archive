[
    {
        "content": "<p>From: Lars Hupel &lt;<a href=\"mailto:hupel@in.tum.de\">hupel@in.tum.de</a>&gt;<br>\nDear list,</p>\n<p>I have an ML function of type \"term -&gt; term\" (that is, a function<br>\ntransforming a Pure term). That function (call it \"embed\") assumes that<br>\nthe input term is fully checked. In particular, there must not be any<br>\nremaining meta-syntactic stuff (like \"_constrain\"). The input may have<br>\nany type, though.</p>\n<p>I now want to define a parse translation that applies that function.</p>\n<p>syntax \"_embed\" :: \"'a ⇒ term\" (\"⟨_⟩\")</p>\n<p>I've tried various incantations but the problem is that<br>\na) either stuff like \"_constrain\" remains or<br>\nb) when I strip constraints, in \"⟨map f xs⟩\", \"map\" is considered a free<br>\nvariable (but it's a constant)</p>\n<p>How would I implement such a parse translation?</p>\n<p>(NB: this is to improve the readability of several things in my<br>\nformalization – I can always apply the \"embed\" function \"by hand\" but<br>\nthat makes it notationally cumbersome)</p>\n<p>Cheers<br>\nLars</p>",
        "id": 294704798,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661180327
    },
    {
        "content": "<p>From: Peter Lammich &lt;<a href=\"mailto:lammich@in.tum.de\">lammich@in.tum.de</a>&gt;<br>\nHi lars,  </p>\n<p>There is a stack of processing that is done to the term after parsing, the<br>\ncheck phase. It uses simple numeric values to order the different steps in the<br>\ncheck phase. Looks like you want your translation bwen executed last, matching<br>\non some special constant for embed, which is set up such that thebother check<br>\nphase s can handle it, eg a plain const embed :: prop =&gt; prop  </p>\n<p>Peter</p>",
        "id": 294704839,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661180339
    },
    {
        "content": "<p>From: Lars Hupel &lt;<a href=\"mailto:hupel@in.tum.de\">hupel@in.tum.de</a>&gt;<br>\nHi Peter,</p>\n<p>yes, that works. From what I can tell, this approach has two downsides:</p>\n<p>1) I need to manually traverse the term to find the constant<br>\n2) there's no error if I somehow screw up; the useless constant will<br>\njust remain in the parsed term</p>\n<p>On the other hand, markup works out of the box.</p>\n<p>Cheers<br>\nLars</p>",
        "id": 294704866,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661180345
    }
]