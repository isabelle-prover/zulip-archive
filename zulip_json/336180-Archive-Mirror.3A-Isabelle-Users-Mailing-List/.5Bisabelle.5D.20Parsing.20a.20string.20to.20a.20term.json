[
    {
        "content": "<p>From: Häuselmann Rafael &lt;<a href=\"mailto:rafaelh@student.ethz.ch\">rafaelh@student.ethz.ch</a>&gt;<br>\nHi,</p>\n<p>I have a function that returns (from the bash-output) a string containing the Isabelle representation of a term. Now I'm trying to find a way to transform such a string into the actual term. <br>\nI have for example the string \"Const (\\\"Num.num.One\\\", Type (\\\"Num.num\\\", []))\", how do I get from this string to the according term?<br>\nThere must be an already existing parser functionality for this, right?</p>\n<p>Thanks in advance for any help,<br>\nRafael</p>",
        "id": 294278397,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660919526
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nOn Tue, 20 May 2014, Häuselmann  Rafael wrote:</p>\n<blockquote>\n<p>I have a function that returns (from the bash-output) a string <br>\ncontaining the Isabelle representation of a term. Now I'm trying to find <br>\na way to transform such a string into the actual term. I have for <br>\nexample the string \"Const (\\\"Num.num.One\\\", Type (\\\"Num.num\\\", []))\", <br>\nhow do I get from this string to the according term? There must be an <br>\nalready existing parser functionality for this, right?</p>\n</blockquote>\n<p>\"The Isabelle representation of a term\" is a certain ML datatype, but that <br>\ndoes not have a canonical string representation a priori.  The above is <br>\nwhat the ML compiler would use for it, but parsing that within the running <br>\nprogram would mean to invoke the compiler at runtime (which is possible, <br>\nbut a bit indirect) or imitate the parser of ML.</p>\n<blockquote>\n<p>From where is the bash output coming and where is it going?  If you <br>\nproduce the output yourself, you could do that more directly, e.g. by <br>\nemitting an XML or YXML encoding of the format defined in <br>\n$ISABELLE_HOME/src/Pure/term_xml.ML</p>\n</blockquote>\n<p>See also <a href=\"https://bitbucket.org/makarius/yxml\">https://bitbucket.org/makarius/yxml</a> to get some idea how this <br>\nworks, independently of the huge Isabelle code base.</p>\n<p>The Isabelle inner syntax parser, i.e. what you write in source text as <br>\nlemma \"prop\" also happens to understand YXML directly, which is <br>\noccasionally useful for program-generated sources that are not shown to <br>\nthe user.</p>\n<p>Makarius</p>",
        "id": 294278442,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660919544
    },
    {
        "content": "<p>From: Häuselmann Rafael &lt;<a href=\"mailto:rafaelh@student.ethz.ch\">rafaelh@student.ethz.ch</a>&gt;<br>\nYeah, my function produces the string itself by exporting a term from Isabelle and evaluating that term in SML/NJ, wich then produces the string I was talking about, and then I want to interprete this string as the term it represents.<br>\nI will have a look at your suggestion and see if it helps me, but basically I was searching for a way to invoke the compiler at runtime for this string.</p>\n<p>thanks<br>\nRafael</p>",
        "id": 294278464,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660919550
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nOn Wed, 21 May 2014, Häuselmann  Rafael wrote:</p>\n<blockquote>\n<p>Yeah, my function produces the string itself by exporting a term from <br>\nIsabelle and evaluating that term in SML/NJ, wich then produces the <br>\nstring I was talking about, and then I want to interprete this string as <br>\nthe term it represents.</p>\n</blockquote>\n<p>So what is the purpose of SML/NJ here?  It is very slow compared to <br>\nPoly/ML that underlies Isabelle/ML by default.  If you stay within <br>\nIsabelle/ML the import/export problem goes away, too.</p>\n<blockquote>\n<p>I will have a look at your suggestion and see if it helps me, but <br>\nbasically I was searching for a way to invoke the compiler at runtime <br>\nfor this string.</p>\n</blockquote>\n<p>You can invoke the ML compiler and runtime via operations like <br>\nML_Context.eval, but I doubt that you really want to do this here. <br>\nExchanging data in the notation of the source language is a bit odd for <br>\nanything other than LISP.</p>\n<p>The YXML/XML/ML modules actually imitate the old LISP read/write mode, <br>\nwhile avoiding the inclusion of the interpreter/compiler in the pipeline.</p>\n<p>Makarius</p>",
        "id": 294278505,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660919563
    },
    {
        "content": "<p>From: Andreas Lochbihler &lt;<a href=\"mailto:andreas.lochbihler@inf.ethz.ch\">andreas.lochbihler@inf.ethz.ch</a>&gt;<br>\nHi Makarius,</p>\n<p>On 21/05/14 18:43, Makarius wrote:</p>\n<blockquote>\n<p>On Wed, 21 May 2014, Häuselmann  Rafael wrote:</p>\n<blockquote>\n<p>Yeah, my function produces the string itself by exporting a term from Isabelle and<br>\nevaluating that term in SML/NJ, wich then produces the string I was talking about, and<br>\nthen I want to interprete this string as the term it represents.</p>\n</blockquote>\n<p>So what is the purpose of SML/NJ here?  It is very slow compared to Poly/ML that underlies<br>\nIsabelle/ML by default.  If you stay within Isabelle/ML the import/export problem goes<br>\naway, too.<br>\nWe want to run test cases for the code generator in different implementations of the <br>\ntarget languages. That is, for SML, we are working on test drivers for SML/NJ, PolyML and <br>\nmlton.</p>\n</blockquote>\n<blockquote>\n<blockquote>\n<p>I will have a look at your suggestion and see if it helps me, but basically I was<br>\nsearching for a way to invoke the compiler at runtime for this string.</p>\n</blockquote>\n<p>You can invoke the ML compiler and runtime via operations like ML_Context.eval, but I<br>\ndoubt that you really want to do this here. Exchanging data in the notation of the source<br>\nlanguage is a bit odd for anything other than LISP.</p>\n</blockquote>\n<blockquote>\n<p>The YXML/XML/ML modules actually imitate the old LISP read/write mode, while avoiding the<br>\ninclusion of the interpreter/compiler in the pipeline.<br>\nWe have now mimicked a stripped-down version of these modules in Isabelle/HOL's term <br>\nlanguage that suffices to convert Typerep.typerep and Code_Evaluation.term into YXML such <br>\nthat Isabelle's decode function can reconstruct the terms again. That is indeed easier <br>\nthan invoking the ML compiler.</p>\n</blockquote>\n<p>Andreas</p>",
        "id": 294281241,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660920434
    }
]