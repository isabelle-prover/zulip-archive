[
    {
        "content": "<p>From: Peter Chapman &lt;<a href=\"mailto:pc@cs.st-and.ac.uk\">pc@cs.st-and.ac.uk</a>&gt;<br>\nHi</p>\n<p>Is there a way to partially define a datatype?  Or, is there a way to  <br>\ndefine it generally at one point, and then redefine/specialise it  <br>\nlater on?</p>\n<p>I have some results which only require that I define my datatype as</p>\n<p>datatype form = At \"nat\"<br>\n                           | Compound \"string\" \"form list\"</p>\n<p>i.e. that I define formulae as atomic and compound, and can  <br>\ndistinguish between them.  I would like to then specialise this  <br>\ndatatype somewhat, so for a particular application I may wish to have</p>\n<p>Compound = Conj \"form\" \"form\"<br>\n                       | Disj \"form\" \"form\"</p>\n<p>so then the datatype would be</p>\n<p>At \"nat\"<br>\nConj \"form\" \"form\"<br>\nDisj \"form\" \"form\"</p>\n<p>and for another</p>\n<p>Compound = neg \"form\"<br>\n                       | Impl \"form\" \"form\"</p>\n<p>so the datatype would be</p>\n<p>At \"nat\"<br>\nneg \"form\"<br>\nImpl \"form\" \"form\"</p>\n<p>Obviously, I'd like the original results which I proved to hold for  <br>\nthe new datatype, which is a specialisation of the old one.   <br>\nEssentially, I would like to plug in a more complete version of what  <br>\nit means for a formula to be compound.</p>\n<p>I've looked at the documentation about type classes and locales, but I  <br>\ndon't see how that would apply here: I'm not adding new operations to  <br>\na theory, just new constructors to a datatype.</p>\n<p>Many thanks</p>\n<p>Peter</p>",
        "id": 294066448,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660825598
    },
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\nPeter, this sounds rather fanciful and I don't think there is an easy<br>\nsolution. You cannot add constructors to a datatype (and you even want<br>\nto remove one). The best I can think of is to make the datatype more<br>\ngeneric:</p>\n<p>datatype 'a form = At \"nat\" | Compound 'a \"'a form list\"</p>\n<p>so you can instantiate it:</p>\n<p>datatype condis = Con | Dis<br>\ntypes cd_form = \"condis form\"</p>\n<p>However, this yields n-ary conjunctions and disjunctions; which becomes<br>\nawkward for negation ;-) So you would need an additional predicate for<br>\nwellformed formulae of certain kinds.</p>\n<p>Tobias</p>\n<p>Peter Chapman schrieb:</p>",
        "id": 294066475,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660825610
    },
    {
        "content": "<p>From: Thomas Arthur Leck Sewell &lt;<a href=\"mailto:tsewell@cse.unsw.EDU.AU\">tsewell@cse.unsw.EDU.AU</a>&gt;<br>\nThere is a simple, if clunky, alternative.</p>\n<p>You could simply declare your new type (unfortunately, needing new names <br>\nfor all the constructors), then declare an injection function that maps <br>\nfrom your new type to the subset of the old type that you are interested <br>\nin representing. You could then do all your logic on injections of values <br>\nin the new type.</p>\n<p>It's the lowest-budget solution, and will probably allow you to get the <br>\njob done, but I suppose it isn't pretty. There may be a way to hide the <br>\ninjection function and the renaming of the constructors using locales.</p>\n<p>Yours,<br>\n    Thomas.</p>",
        "id": 294066556,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660825645
    }
]