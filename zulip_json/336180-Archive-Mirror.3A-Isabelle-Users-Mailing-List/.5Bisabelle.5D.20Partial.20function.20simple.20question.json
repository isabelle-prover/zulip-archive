[
    {
        "content": "<p>From: \"Roger H.\" &lt;<a href=\"mailto:s57076@hotmail.com\">s57076@hotmail.com</a>&gt;<br>\nHi,</p>\n<p>i have</p>\n<p>f :: nat ⇀ nat<br>\nf = [1 ↦ 0, 2 ↦ 5, 3 ↦ 7, ... , 100 ↦ 29]       </p>\n<p>and i want to write a new function g, which does the same as f, except it associates the number \"2\" to None, so it removes it from the list. </p>\n<p>remove_two :: nat ⇀ nat<br>\ng = [1 ↦ 0, 3 ↦ 7, ... , 100 ↦ 29] </p>\n<p>is there a way to do that?</p>\n<p>Thank you!</p>",
        "id": 294264697,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660915698
    },
    {
        "content": "<p>From: Andreas Lochbihler &lt;<a href=\"mailto:andreas.lochbihler@inf.ethz.ch\">andreas.lochbihler@inf.ethz.ch</a>&gt;<br>\nHi Roger,</p>\n<p>partial functions are actually normal functions that return an option value. So you can <br>\nuse plain function update fun_upd with syntax :=, i.e.,</p>\n<p>f(2 := None)</p>\n<p>is the same as function f except that 2 is mapped to None. Note that _(_ |-&gt; _) is just a <br>\nshorthand for _(_ := Some _).</p>\n<p>Best,<br>\nAndreas</p>",
        "id": 294264739,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660915704
    },
    {
        "content": "<p>From: Manuel Eberl &lt;<a href=\"mailto:eberlm@in.tum.de\">eberlm@in.tum.de</a>&gt;<br>\nHallo,</p>\n<p>for the sake of completeness, I for one prefer the following notation:</p>\n<p>f |` (-{2})</p>\n<p>This consists of two parts: f |` A is simply the restriction of the<br>\n(partial) function f to the set A, and -{2} is the complement of the set<br>\n{2}, i.e. I restrict f to the complement of {2}. This way, you can also<br>\neasily delete multiple entries at once.</p>\n<p>Cheers,<br>\nManuel</p>",
        "id": 294266671,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660915747
    }
]