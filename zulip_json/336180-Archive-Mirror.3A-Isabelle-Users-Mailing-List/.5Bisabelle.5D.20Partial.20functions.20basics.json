[
    {
        "content": "<p>From: \"Roger H.\" &lt;<a href=\"mailto:s57076@hotmail.com\">s57076@hotmail.com</a>&gt;<br>\nHi,</p>\n<p>how can i make \"f ∪ g\"?</p>\n<p>definition f :: \"nat ⇀ nat\" where<br>\n\"f = [1 ↦ 0, 2 ↦ 5]\"<br>\ndefinition g :: \"nat ⇀ nat\" where <br>\n\"g = [3 ↦ 7, 4 ↦ 9]\"<br>\ndefinition f_union_g :: \"nat ⇀ nat\" where<br>\n\"f_union_g = [1 ↦ 0, 2 ↦ 5, 3 ↦ 7, 4 ↦ 9]\"</p>\n<p>So how should i define f_union_g?</p>\n<p>And generally in what class.thy can i find such operators on partial functions?</p>\n<p>Thank you!</p>",
        "id": 294266693,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660915757
    },
    {
        "content": "<p>From: John Wickerson &lt;<a href=\"mailto:johnwickerson@cantab.net\">johnwickerson@cantab.net</a>&gt;<br>\nHi Roger,</p>\n<p>For this you want \"f ++ g\". Such things are defined in Map.thy -- see here:</p>\n<p><a href=\"http://isabelle.in.tum.de/library/HOL/HOL/Map.html\">http://isabelle.in.tum.de/library/HOL/HOL/Map.html</a></p>\n<p>Best wishes,<br>\nJohn</p>",
        "id": 294266699,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660915759
    },
    {
        "content": "<p>From: Andrew Boyton &lt;<a href=\"mailto:Andrew.Boyton@nicta.com.au\">Andrew.Boyton@nicta.com.au</a>&gt;<br>\nIt might be useful to point out that find_consts can be useful for times like this. It's like a very simplified version of Hoogle [1].</p>\n<p>You need to generalise what you are searching for, (not nat ⇀ nat but 'a ⇀ 'b), but it finds what you are after.</p>\n<p>find_consts \"('a ⇀ 'b) ⇒ ('a ⇀ 'b) ⇒ 'a ⇀ 'b\"</p>\n<p>gives</p>\n<p>searched for:<br>\n  \"('a ⇀ 'b) ⇒ ('a ⇀ 'b) ⇒ 'a ⇀ 'b\"</p>\n<p>found 2 constant(s):</p>\n<p>Quickcheck_Exhaustive.cps_plus ::<br>\n  \"(('a ⇒ term list option)<br>\n    ⇒ term list option)<br>\n   ⇒ (('a ⇒ term list option)<br>\n       ⇒ term list option)<br>\n      ⇒ ('a ⇒ term list option)<br>\n         ⇒ term list option\"<br>\nMap.map_add ::<br>\n  \"('a ⇒ 'b option)<br>\n   ⇒ ('a ⇒ 'b option) ⇒ 'a ⇒ 'b option\"</p>\n<p>The second, Map.map_add is the one you want, and you can then command click on it to give the definition. (\"Map_add\" is \"++\".)</p>\n<p>Note that map_add does right overloading, and is thus not an associative operator.</p>\n<p>Regards<br>\nAndrew</p>\n<p>[1]: <a href=\"http://www.haskell.org/hoogle/\">http://www.haskell.org/hoogle/</a></p>\n<hr>\n<p>The information in this e-mail may be confidential and subject to legal professional privilege and/or copyright. National ICT Australia Limited accepts no liability for any damage caused by this email or its attachments.</p>",
        "id": 294266712,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660915766
    },
    {
        "content": "<p>From: Tjark Weber &lt;<a href=\"mailto:webertj@in.tum.de\">webertj@in.tum.de</a>&gt;<br>\nNote that there is a theorem map_add_assoc that proves associativity of<br>\nmap_add. Perhaps you meant to write that map_add is not commutative.</p>\n<p>Best,<br>\nTjark</p>",
        "id": 294266728,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660915771
    }
]