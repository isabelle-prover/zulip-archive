[
    {
        "content": "<p>From: Anh Le &lt;<a href=\"mailto:anhlevn@cims.nyu.edu\">anhlevn@cims.nyu.edu</a>&gt;<br>\nHi everyone,<br>\nI am trying to do something I thought it should be valid, but it seems that<br>\nIsar does not allow it. The followings are some simple code.</p>\n<hr>\n<p>(* Simple data type*)<br>\ndatatype Type =<br>\n    ClassType \"nat\"<br>\n  | FunctionType \"(Type) list\" \"Type\"</p>\n<p>(<em>Defining some rules</em>)<br>\ninductive subtyping :: \"ClassTable =&gt; Type =&gt; Type =&gt; bool\"<br>\nwhere<br>\n     sRefl : \"(subtyping CT t t)\"<br>\n  | ...</p>\n<p>(<em>Some theorem</em>)<br>\ntheorem ..</p>\n<p>proof(induction rule:subtyping.induct)<br>\ncase (sRefl CT t)<br>\n...</p>\n<p>qed</p>\n<hr>\n<p>What I am trying to do is to pass \"ClassType c\" to the case sRefl, instead<br>\nof 't'. So, it would look like: case(sRefl CT \"ClassType c\"). But it doesn't<br>\ncompile because Isar only allows variables there.<br>\nIs there any way to work around this? I tried to use 'let t = \"Classtype<br>\nc\"', but it didn't work either.</p>\n<p>Thank you very much<br>\nAnh</p>",
        "id": 294146299,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660847622
    },
    {
        "content": "<p>From: Lawrence Paulson &lt;<a href=\"mailto:lp15@cam.ac.uk\">lp15@cam.ac.uk</a>&gt;<br>\nI'm not sure I understand what you are trying to do. The proof has to handle every possible value of your datatype Type, not just those of the form ClassType c. If you want to do a case analysis on the form of t, you can do that afterwards, but you must handle both cases.</p>\n<p>Larry Paulson</p>",
        "id": 294146317,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660847628
    }
]