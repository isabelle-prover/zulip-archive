[
    {
        "content": "<p>From: <a href=\"mailto:attarzadeh@ee.sharif.ir\">attarzadeh@ee.sharif.ir</a><br>\nHello all,<br>\nI need to define a function (say g) that involves non-constructor pattern<br>\nmatching. Say S, C, and A are datatype constructors and f is a<br>\nfunction(f:: “a =&gt; nat”), I want to see if the argument of g matches with<br>\nthe pattern “ S (C f(A 0))” or not, but it fails because f is not a<br>\ndatatype constructor. How can I define such a function in HOL?</p>\n<p>Any help would be appreciated.</p>\n<p>Regards,<br>\nHoorie</p>",
        "id": 294122420,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660840250
    },
    {
        "content": "<p>From: Alexander Krauss &lt;<a href=\"mailto:krauss@in.tum.de\">krauss@in.tum.de</a>&gt;<br>\nDear Hoorie,</p>\n<p>The \"fun\" command requires all patterns to be datatype constructors.</p>\n<p>The more general \"function\" command can handle non-constructor patterns, <br>\nbut you must prove that your patterns are used consistently. Moreover, <br>\nyou can no longer use the code generator for such definitions, since <br>\nthey are not programs. Section 6.2 of the function tutorial explains how <br>\nto do this:<br>\n<a href=\"http://isabelle.in.tum.de/dist/Isabelle/doc/functions.pdf\">http://isabelle.in.tum.de/dist/Isabelle/doc/functions.pdf</a></p>\n<p>The proof obligations arising from this sort of definition can be hard <br>\nto solve. Often it is easier to rewrite the definition such that it does <br>\nnot use such patterns.</p>\n<p>Hope this helps,<br>\nAlex</p>",
        "id": 294122463,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660840262
    },
    {
        "content": "<p>From: Thomas Sewell &lt;<a href=\"mailto:Thomas.Sewell@nicta.com.au\">Thomas.Sewell@nicta.com.au</a>&gt;<br>\nSomething to note: an alternative to this case matching can be done in pure logic.</p>\n<p>Instead of \"case v of S (C (f A 0)) =&gt; a | _ =&gt; b\" I could type \"if v = S (C (f A 0))) then a else b\". This turns out to be an especially simple example, since f was applied to constant arguments (if I understood correctly).</p>\n<p>A more involved example is \"case v of S (C (f x)) =&gt; a x | _ =&gt; b\", which I might write as \"if EX x. v = S (C (f x)) then a (SOME x. v = S (C (f x))) else b\", or maybe better \"if v : range (S o C o f) then a (inv (S o C o f) v) else b\". The latter assumes that f is sufficiently injective for the inverse of that function to be well defined.</p>\n<p>Yours,<br>\n    Thomas.</p>",
        "id": 294122613,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660840299
    }
]