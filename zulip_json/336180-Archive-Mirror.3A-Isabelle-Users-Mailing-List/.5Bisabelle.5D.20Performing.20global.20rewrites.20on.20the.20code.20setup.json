[
    {
        "content": "<p>From: Lars Hupel &lt;<a href=\"mailto:hupel@in.tum.de\">hupel@in.tum.de</a>&gt;<br>\nDear list,</p>\n<p>I am trying to apply a function \"thm list -&gt; thm list\" to the global set<br>\nof code equations. I thought \"functrans\" allow me to do that, but<br>\napparently they only work locally (i.e. on a single function). My use<br>\ncase is to unfold all constants of arity zero.</p>\n<p>Cheers<br>\nLars</p>",
        "id": 294721074,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661184835
    },
    {
        "content": "<p>From: Andreas Lochbihler &lt;<a href=\"mailto:andreas.lochbihler@inf.ethz.ch\">andreas.lochbihler@inf.ethz.ch</a>&gt;<br>\nHi Lars,</p>\n<p>Function transformers are indeed only called on a single function at a time. Moreover, <br>\nthey are not called at all on functions with abstract code equations (of the form Rep (f <br>\nx) = ...). They are mainly used to change the pattern-matching structure of functions.</p>\n<p>As unfolding should only be done on the right-hand sides of the equations, I wonder why <br>\nyou don't just write a simproc that you add to the preprocessor simpset?</p>\n<p>Andreas</p>",
        "id": 294721139,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661184848
    },
    {
        "content": "<p>From: Lars Hupel &lt;<a href=\"mailto:hupel@in.tum.de\">hupel@in.tum.de</a>&gt;<br>\nHi Andreas,</p>\n<p>I don't know all the constants and their code equations in advance. I <br>\nliterally want to unfold <em>all</em> constants with arity zero that are in the <br>\nset of \"code_thms\" for a specific function. Otherwise I could just <br>\ndeclare them as \"[code_unfold]\" when I define them.</p>\n<p>Cheers<br>\nLars</p>",
        "id": 294721165,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661184858
    },
    {
        "content": "<p>From: Andreas Lochbihler &lt;<a href=\"mailto:andreas.lochbihler@inf.ethz.ch\">andreas.lochbihler@inf.ethz.ch</a>&gt;<br>\nHi Lars,</p>\n<p>atoms of a term. If the atom is a constant, then it can get the code equations for the <br>\nconstant and look whether it does not take any argument. If so, use the code equation to <br>\ngenerate the unfolding theorem.</p>\n<p>You can get the code equations for a specific constant from the context by</p>\n<p>Code.get_cert @{context} [] @{const_name map} |&gt; Code.equations_of_cert @{theory}</p>\n<p>Andreas</p>",
        "id": 294721173,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661184860
    },
    {
        "content": "<p>From: Lars Hupel &lt;<a href=\"mailto:hupel@in.tum.de\">hupel@in.tum.de</a>&gt;<br>\nCould this could be problematic because of potential loops where <br>\nsomething in the preprocessor of the code will invoke the preprocessor <br>\nagain to obtain code equations? In any case, I'll try it out and let you <br>\nknow.</p>\n<p>Cheers<br>\nLars</p>",
        "id": 294721206,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661184872
    },
    {
        "content": "<p>From: Lars Hupel &lt;<a href=\"mailto:hupel@in.tum.de\">hupel@in.tum.de</a>&gt;<br>\nIt looks like it works. As a precautionary measure, I have wrapped the<br>\nsimproc into a declaration flag so that I can disable it further down<br>\nthe recursive invocation.</p>\n<p>Cheers<br>\nLars</p>",
        "id": 294721219,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661184878
    },
    {
        "content": "<p>From: Florian Haftmann &lt;<a href=\"mailto:florian.haftmann@informatik.tu-muenchen.de\">florian.haftmann@informatik.tu-muenchen.de</a>&gt;<br>\nHi Lars,</p>\n<p>Code.get_cert @{context} [] does not involve any preprocessing.</p>\n<p>What you are definitely loosing is the case that functions transformers<br>\nwould reduce the number of arguments to 0.</p>\n<p>Hope this helps,<br>\n    Florian<br>\n<a href=\"/user_uploads/14278/pn5jLJvs8OBZGy-nkzcdJWuw/signature.asc\">signature.asc</a></p>",
        "id": 294721873,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661185094
    }
]