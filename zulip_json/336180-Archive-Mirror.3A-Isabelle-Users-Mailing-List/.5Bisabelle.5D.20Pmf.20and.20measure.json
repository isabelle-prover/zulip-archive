[
    {
        "content": "<p>From: Kawin Worrasangasilpa &lt;<a href=\"mailto:kw448@cam.ac.uk\">kw448@cam.ac.uk</a>&gt;<br>\nHi,</p>\n<p>I have recently had to deal with probability in Isabelle but mostly I have<br>\nbeen doing it through Probability_Mass_Function.thy. So I would like to ask<br>\nabout some facilities we have on “ 'a pmf\".<br>\nI know how to use some pre-constructed pmf such as<br>\nbernoulli_pmf p :: bool pmf<br>\nas a coin tossing in a way that pmf (bernoulli_pmf p) True = p and  pmf<br>\n(bernoulli_pmf p) False = 1 - p,  when p is incusively between 0 and 1.<br>\n1) How can we define two independent, for example, coins tossing, as one<br>\nfunction of type \" 'a pmf\"? Is there any function built in Isabelle already<br>\nthat can make this kind of product just from bernoulli_pmf? What would the<br>\ntype of this product be, should it be (bool x bool) pmf for 2 bernoulli_pmf<br>\nfor example?</p>\n<p>2) Following (1), are there any n-ary to combine n independent pmf's?</p>\n<p>3) This one does not directly relate to two questions above. Do we have<br>\nformalisation of sigma-algebra generated by random variable in Isabelle?</p>\n<p>Regards,<br>\nKawin</p>",
        "id": 294764131,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661201087
    },
    {
        "content": "<p>From: Andreas Lochbihler &lt;<a href=\"mailto:mail@andreas-lochbihler.de\">mail@andreas-lochbihler.de</a>&gt;<br>\nDear Kawin,</p>\n<blockquote>\n<p>1) How can we define two independent, for example, coins tossing, as one<br>\nfunction of type \" 'a pmf\"? Is there any function built in Isabelle already<br>\nthat can make this kind of product just from bernoulli_pmf? What would the<br>\ntype of this product be, should it be (bool x bool) pmf for 2 bernoulli_pmf<br>\nfor example?<br>\nThere's the function pair_pmf that takes two pmfs and combines them into one. The type is <br>\nas you'd expect:</p>\n</blockquote>\n<p>pair_pmf :: 'a pmf =&gt; 'b pmf =&gt; ('a * 'b) pmf</p>\n<p>So if you write \"pair_pmf (bernoulli_pmf p) (bernoulli_pmf q)\", the resulting type is <br>\nindeed \"(bool * bool) pmf\".</p>\n<blockquote>\n<p>2) Following (1), are there any n-ary to combine n independent pmf's?</p>\n</blockquote>\n<p>This is getting into applicative functors. The pmf type is a monad (with operations <br>\nreturn_pmf and bind_pmf) and this is the main workhorse for building more complex <br>\ndistribution from basic building blocks. Every monad is also an applicative functor and <br>\nthe above pair_pmf is just the product operation of an applicative functor. So you can use <br>\nthe standard operations of applicative functors to iterate the construction. The AFP entry</p>\n<p><a href=\"https://www.isa-afp.org/entries/Applicative_Lifting.html\">https://www.isa-afp.org/entries/Applicative_Lifting.html</a></p>\n<p>defines some notation and some proof machinery for applicative functors, which also work <br>\nfor pmfs. For example, if you have pmfs p1 to p3 and you want to combine their independent <br>\nsamples with the function f, then you can write this as</p>\n<p>return_pmf f ⋄ p1 ⋄ p2 ⋄ p3</p>\n<p>where (⋄) denotes the applicative operation ap_pmf on pmfs defined in that AFP entry.</p>\n<blockquote>\n<p>3) This one does not directly relate to two questions above. Do we have<br>\nformalisation of sigma-algebra generated by random variable in Isabelle?</p>\n</blockquote>\n<p>PMFs are discrete distributions, so everything is measurable and their Sigma algebra is <br>\ntherefore the powerset. In Isabelle, this is formalized as \"count_space\". Note that there <br>\nis no formalization of an abstract event space Omega that we (partially) observe through <br>\nthe random variables, as is often done in probability theory. A pmf models only the <br>\nprojection of Omega to the random variable's output space, but the connection to Omega is <br>\nlost. If you really need to formalize this, you'll probably want to look at the <br>\nformalization of measure theory in HOL-Probability.</p>\n<p>Hope this helps<br>\nAndreas</p>",
        "id": 294764140,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661201094
    },
    {
        "content": "<p>From: Manuel Eberl &lt;<a href=\"mailto:eberlm@in.tum.de\">eberlm@in.tum.de</a>&gt;<br>\nAndreas already answered most things, but for an n-ary independent<br>\nproduct of PMFs, the best way (in most cases) is to use the Pi_pmf that<br>\n(I think) I sent you last year. I really should put this into the<br>\ndistribution at some point; I'm not sure why I haven't done that<br>\nalready. I probably forgot.</p>\n<p>Manuel<br>\n<a href=\"/user_uploads/14278/Mb2vTc6HzNCeZOsTrl4xYHDS/Pi_pmf.thy\">Pi_pmf.thy</a></p>",
        "id": 294764148,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661201101
    },
    {
        "content": "<p>From: \"Chun Tian (binghe)\" &lt;<a href=\"mailto:binghe.lisp@gmail.com\">binghe.lisp@gmail.com</a>&gt;<br>\nHi Kawin,</p>\n<p>for your question (3), the sigma-algebra generated by random variable(s) are not regularly used, but you can easily define it by yourself. </p>\n<p>A random variable is nothing but a measurable function f mapping an arbitrary sigma-algebra (sp,sts) to Borel sigma_algebra. So you already have two sigma-algebras. The sigma-algebra generated by that random variable is a set of all PREIMAGEs of points in Borel sets. In HOL4, I defined it in this way:</p>\n<p>[sigma_function_def]  Definition (in HOL4's martingaleTheory)<br>\n      ⊢ ∀sp A f.<br>\n            sigma sp A f = (sp,IMAGE (λs. PREIMAGE f s ∩ sp) (subsets A))</p>\n<p>If I take f as the random variable, A as (subsets Borel), then I get the sigma-algebra generated by that random variable. This is because PREIMAGE naturally forms a sigma-algebra:</p>\n<p>[PREIMAGE_SIGMA_ALGEBRA]  Theorem (in HOL4's sigma_algebraTheory)</p>\n<p>⊢ ∀sp A f.<br>\n            sigma_algebra A ∧ f ∈ (sp → space A) ⇒<br>\n            sigma_algebra (sp,IMAGE (λs. PREIMAGE f s ∩ sp) (subsets A))</p>\n<p>Furthermore, there's the concept of \"sigma-algebra generated from multiple random variables\" (from an index set). (see, e.g., [1, p.52])</p>\n<p>[sigma_functions_def]  Definition (in HOL's martingaleTheory)<br>\n      ⊢ ∀sp A f J.<br>\n            sigma sp A f J =<br>\n            sigma sp<br>\n              (BIGUNION<br>\n                 (IMAGE<br>\n                    (λi. IMAGE (λs. PREIMAGE (f i) s ∩ sp) (subsets (A i)))<br>\n                    J))</p>\n<p>The trick here is, I quote, \"although <code>PREIMAGE (f i) s ∩ sp</code> is a sigma-algebra, this is (in general) no longer true for their BIGUNIONs; this explains why we have to use the sigma-hull outside of BIGUNION\". [1]</p>\n<p>Then I can prove that, the generated sigma-algebra indeed makes all those random variables (i.e. measurable functions) simultaneously measurable in it:</p>\n<p>[SIGMA_SIMULTANEOUSLY_MEASURABLE]  Theorem (in HOL's martingaleTheory)</p>\n<p>⊢ ∀sp A f J.<br>\n            (∀i. i ∈ J ⇒ sigma_algebra (A i)) ∧<br>\n            (∀i. f i ∈ (sp → space (A i))) ⇒<br>\n            ∀i. i ∈ J ⇒ f i ∈ measurable (sigma_functions sp A f J) (A i)</p>\n<p>These definitions are not commonly needed in the core Probability Theory. I only found some applications in Kolmogorov's 0-1 Law and Martingales.</p>\n<p>Hope this helps,</p>\n<p>--Chun</p>\n<p>[1] Schilling, R.L.: Measures, Integrals and Martingales. Cambridge University Press (2005).</p>\n<p>Il 15/10/19 05:40, Kawin Worrasangasilpa ha scritto:<br>\n<a href=\"/user_uploads/14278/ga-n5KycotK0hPFtD5yXv1q1/signature.asc\">signature.asc</a></p>",
        "id": 294764170,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661201111
    }
]