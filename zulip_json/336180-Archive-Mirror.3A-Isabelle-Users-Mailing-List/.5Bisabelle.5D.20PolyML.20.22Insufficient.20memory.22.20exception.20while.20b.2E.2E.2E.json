[
    {
        "content": "<p>From: Thomas Sewell &lt;<a href=\"mailto:thomas.sewell@nicta.com.au\">thomas.sewell@nicta.com.au</a>&gt;<br>\nThanks David. That is indeed what is going on.</p>\n<p>There's an Isabelle problem here: the suggested approach to executing<br>\n64-bit polyML does not actually result in 64-bit polyML being run.</p>\n<p>In the Isabelle NEWS file the following is suggested:</p>\n<p>The following example setting prefers 64 bit if available:</p>\n<p>ML_PLATFORM=\"${ISABELLE_PLATFORM64:-$ISABELLE_PLATFORM}\"</p>\n<p>I have in my isabelle settings the line:</p>\n<p>ML_PLATFORM=\"$ISABELLE_PLATFORM64\"</p>\n<p>Running isabelle env | grep ML shows these settings:</p>\n<p>ML_IDENTIFIER=polyml-5.5.2_x86_64-linux<br>\nPOLYML_HOME=/home/tsewell/.isabelle/contrib/polyml-5.5.2<br>\nML_SYSTEM=polyml-5.5.2<br>\nML_PLATFORM=x86_64-linux<br>\nML_OPTIONS=-H 500<br>\nISABELLE_POLYML=true<br>\nML_HOME=/home/tsewell/.isabelle/contrib/polyml-5.5.2/x86-linux<br>\nML_SOURCES=/home/tsewell/.isabelle/contrib/polyml-5.5.2/src</p>\n<p>So, the isabelle environment is now thoroughly confused which version of<br>\npolyML is running, to the extent that my heap files are being saved in a<br>\ndirectory called \"polyml-5.5.2_x86_64-linux\" despite the fact that the<br>\npoly process which is running is actually the x86-linux variant.</p>\n<p>In short, that is all a bit confusing. Is there a better way to switch<br>\nbetween 32 and 64 bit modes? For the moment, I've just moved the<br>\n~/.isabelle/contrib/polyml-5.2.2/x86-linux directory aside, which<br>\nresults in Isabelle falling back to 64-bit mode. Amusingly, polyML then<br>\nobjects to the version of the saved heap files.</p>\n<p>Well, enough said. I hope this is easy to fix.</p>\n<p>Thanks all,<br>\n     Thomas.</p>\n<hr>\n<p>The information in this e-mail may be confidential and subject to legal professional privilege and/or copyright. National ICT Australia Limited accepts no liability for any damage caused by this email or its attachments.</p>",
        "id": 294305875,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660924283
    },
    {
        "content": "<p>From: Lars Noschinski &lt;<a href=\"mailto:noschinl@in.tum.de\">noschinl@in.tum.de</a>&gt;<br>\nIndeed, there doesn't seem to be a really clean way.</p>\n<p>The etc/settings file of the polyml-5.2.2-1 component automatically<br>\nchooses between ISABELLE_PLATFORM32 and 64 by trying to run 32-bit poly<br>\nand there is no way of overriding this.</p>\n<p>To fully switch to 64-bit poly, you need to set</p>\n<p>ML_PLATFORM=$ISABELLE_PLATFORM64<br>\n   ML_HOME=$POLYML_HOME/$ML_PLATFORM\"</p>\n<p>after initializing the component.<br>\nAlso, ML_OPTIONS is different for 64-bit mode, so you may want to set</p>\n<p>ML_OPTIONS=\"-H 1000\"</p>\n<p>too.</p>\n<p>-- Lars</p>",
        "id": 294305920,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660924296
    },
    {
        "content": "<p>From: Thomas Sewell &lt;<a href=\"mailto:thomas.sewell@nicta.com.au\">thomas.sewell@nicta.com.au</a>&gt;<br>\nThanks Lars.</p>\n<p>OK, so I've learned a lot from this. Apparently the order of the<br>\n\"init_components\" line with respect to the other lines of the settings<br>\nfile matters quite a lot.</p>\n<p>The polyml component currently overrules any settings that were<br>\npreviously set, and then sets quite a few settings of its own. The<br>\nmissing \"clean\" approach would probably involve requesting 64-bit mode<br>\nbefore the component initialises, and having the component notice this<br>\nhas been done.</p>\n<p>To override the settings after the component has initialised, you must<br>\noverride all the settings it set, but there's no obvious way to ask what<br>\nthey were. Perhaps in the past it was sufficient to adjust ML_PLATFORM.</p>\n<p>To confuse matters, further settings (environment variables) seem to be<br>\nupdated after the end of the user's settings file. For instance,<br>\nadjusting ML_PLATFORM seems to imply an update to ML_IDENTIFIER, but not<br>\nto ML_HOME or POLYML_HOME, thus the confusing outcome.</p>\n<p>Well, I now know a lot more about how this works. However, I'm going to<br>\ncontinue enabling 64-bit mode by sabotaging 32-bit mode until someone<br>\nsuggests a significantly better way.</p>\n<p>Thanks for educating me,<br>\n     Thomas.</p>\n<hr>\n<p>The information in this e-mail may be confidential and subject to legal professional privilege and/or copyright. National ICT Australia Limited accepts no liability for any damage caused by this email or its attachments.</p>",
        "id": 294305938,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660924301
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nIt seems that some more basic Isabelle education is required.  As usual <br>\nthere are two approaches: to work with the system, or to work against it.</p>\n<p>Working with the system means to look around carefully how things are <br>\nusually done, under the assumption that the system is mostly right. <br>\nConcerning settings the \"system\" manual also has a lot to say -- here it <br>\nneeds to be read in the context of Isabelle component settings in <br>\nparticular.</p>\n<p>Taking a NEWS entry from 2010 in isolation is unlikely to succeed, without <br>\nits historical context.  In the past there were no Isabelle components and <br>\npeople usually had the full bunch of ML settings somewhere.  Then it was<br>\nobvious what the change of a single line line ML_PLATFORM=\"...\" meant.</p>\n<p>Today in Isabelle2014, the component polyml-5.5.2-1/etc/settings still <br>\nmake it possible to work like that, taking the with a commented-out <br>\nsection of \"basic settings\" as a starting point:</p>\n<p>ML_SYSTEM=polyml-5.5.2<br>\n   ML_PLATFORM=\"$ISABELLE_PLATFORM32\"<br>\n   ML_HOME=\"$POLYML_HOME/$ML_PLATFORM\"<br>\n   ML_OPTIONS=\"-H 500\"<br>\n   ML_SOURCES=\"$POLYML_HOME/src\"</p>\n<p>Applying some care and common-sense, it should be obvious who to work with <br>\nthat, without any need to \"fix\" Isabelle, nor to \"sabotage\" anything.</p>\n<p>Makarius</p>",
        "id": 294306250,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660924392
    },
    {
        "content": "<p>From: Thomas Sewell &lt;<a href=\"mailto:thomas.sewell@nicta.com.au\">thomas.sewell@nicta.com.au</a>&gt;<br>\nHello isabelle-users.</p>\n<p>I've been struggling lately with fairly frequent \"Insufficient memory\" <br>\nexceptions when trying to build heaps/images. The strange thing is that <br>\nI don't seem to have run out of memory in any sense.</p>\n<p>From reading the log, it looks a lot like PolyML ran out of something <br>\nwhile trying to do its final cleanup before saving the session. In the <br>\nsession log, all the theories have been loaded already. There's also <br>\nplenty more total memory available on this machine at the time of <br>\nfailure, so I don't think it's a fail-to-allocate problem. Perhaps <br>\nPolyML has exhausted some fixed resource used while doing a <br>\nshareCommonData or similar, such as stack space on some thread?</p>\n<p>Finally, in the past I've noticed that the problem is slightly <br>\nnondeterministic. If I delete a few heaps and try again, sometimes the <br>\nprocess succeeds, usually after three or four attempts. This is not a <br>\nlot of fun.</p>\n<p>Does anyone have any idea what kinds of things might cause this problem, <br>\nand where I should be looking? I've noticed that polyML itself has a <br>\nnumber of command-line memory-debugging arguments, and I'm not sure what <br>\nwill happen if I try to convince Isabelle to pass them along.</p>\n<p>I don't set any limits on PolyML's memory usage in my isabelle settings <br>\nor via ulimit or similar. (There's a limit on Java's memory consumption, <br>\nbut that's not what's being hit here.)</p>\n<p>Here are the last few ML statistics messages from the log of the failed <br>\nsession:</p>\n<p>^LML_statistics = <br>\n^E^F:^Fnow=1410497588.77^Ftasks_ready=0^Ftasks_pending=0^Ftask<br>\ns_running=1^Ftasks_passive=0^Fworkers_total=4^Fworkers_active=1^Fworkers_waiting<br>\n=0^Ffull_GCs=4^Fpartial_GCs=1275^Fsize_allocation=548405248^Fsize_allocation_fre<br>\ne=292779660^Fsize_heap=3074088960^Fsize_heap_free_last_full_GC=18342268^Fsize_he<br>\nap_free_last_GC=553199172^Fthreads_in_ML=1^Fthreads_total=7^Fthreads_wait_condva<br>\nr=4^Fthreads_wait_IO=0^Fthreads_wait_mutex=0^Fthreads_wait_signal=1^Ftime_CPU=43<br>\n6.427259^Ftime_GC=37.738374^Fuser_counter0=0^Fuser_counter1=0^Fuser_counter2=0^F<br>\nuser_counter3=0^Fuser_counter4=0^Fuser_counter5=0^Fuser_counter6=0^Fuser_counter<br>\n7=0^E^E^F^E<br>\n^LML_statistics = <br>\n^E^F:^Fnow=1410497589.27^Ftasks_ready=0^Ftasks_pending=0^Ftask<br>\ns_running=1^Ftasks_passive=1^Fworkers_total=4^Fworkers_active=1^Fworkers_waiting<br>\n=0^Ffull_GCs=4^Fpartial_GCs=1275^Fsize_allocation=548405248^Fsize_allocation_fre<br>\ne=143978084^Fsize_heap=3074088960^Fsize_heap_free_last_full_GC=18342268^Fsize_he<br>\nap_free_last_GC=553199172^Fthreads_in_ML=1^Fthreads_total=7^Fthreads_wait_condva<br>\nr=4^Fthreads_wait_IO=0^Fthreads_wait_mutex=0^Fthreads_wait_signal=1^Ftime_CPU=43<br>\n6.827284^Ftime_GC=37.738374^Fuser_counter0=0^Fuser_counter1=0^Fuser_counter2=0^F<br>\nuser_counter3=0^Fuser_counter4=0^Fuser_counter5=0^Fuser_counter6=0^Fuser_counter<br>\n7=0^E^E^F^E</p>\n<p>And the final few lines:</p>\n<h3>Cannot present theory with skipped proofs: \"InitLemmas\"</h3>\n<h3>Cannot present theory with skipped proofs: \"Invocations_R\"</h3>\n<p>^LML_statistics = <br>\n^E^F:^Fnow=1410497589.57^Ftasks_ready=0^Ftasks_pending=0^Ftasks_running=0^Ftasks_passive=0^Fworkers_total=0^Fworkers_active=0^Fworkers_waiting=0^Ffull_GCs=4^Fpartial_GCs=1276^Fsize_allocation=528482304^Fsize_allocation_free=394241872^Fsize_heap=3075137536^Fsize_heap_free_last_full_GC=18342268^Fsize_heap_free_last_GC=532482744^Fthreads_in_ML=0^Fthreads_total=3^Fthreads_wait_condvar=0^Fthreads_wait_IO=0^Fthreads_wait_mutex=0^Fthreads_wait_signal=1^Ftime_CPU=437.319315^Ftime_GC=37.802378^Fuser_counter0=0^Fuser_counter1=0^Fuser_counter2=0^Fuser_counter3=0^Fuser_counter4=0^Fuser_counter5=0^Fuser_counter6=0^Fuser_counter7=0^E^E^F^E<br>\n^LTiming = <br>\n^E^F:^Fthreads=4^Felapsed=330.020^Fcpu=467.429^Fgc=37.442^Ffactor=1.42^E^E^F^E<br>\nval it = (): unit<br>\nML&gt; Exception- Fail \"Insufficient memory\" raised</p>\n<p>Thanks for your time/thoughts,<br>\n     Thomas.</p>",
        "id": 294308807,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660925153
    },
    {
        "content": "<p>From: David Matthews &lt;<a href=\"mailto:dm@prolingua.co.uk\">dm@prolingua.co.uk</a>&gt;<br>\nLooking at those figures I would guess that you are running the 32-bit <br>\nversion of Poly/ML.  I think that is the default for Isabelle because, <br>\ngenerally, it gives better performance than the 64-bit version.  The <br>\nproblem with it is that the total address space of a 32-bit application <br>\nis limited by the operating system to around 3Gbytes.  Poly/ML uses <br>\nseveral memory pools and a situation can arise where the address space <br>\nlimit is reached.  Try it with the 64-bit version and if it happens <br>\nthere I will try and investigate further.</p>\n<p>David</p>",
        "id": 294309092,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660925245
    }
]