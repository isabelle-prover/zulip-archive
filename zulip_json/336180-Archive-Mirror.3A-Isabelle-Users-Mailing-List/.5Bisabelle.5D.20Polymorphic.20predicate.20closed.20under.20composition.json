[
    {
        "content": "<p>From: Andreas Lochbihler &lt;<a href=\"mailto:andreas.lochbihler@inf.ethz.ch\">andreas.lochbihler@inf.ethz.ch</a>&gt;<br>\nDear readers,</p>\n<p>In Isabelle/HOL, I would like to reason about a polymorphic predicate P which is closed <br>\nunder function composition. Since the concrete definition of the predicate is very tedious <br>\nand not relevant for the reasoning, I prefer to work just with the closure properties of <br>\nP. However, I have not found a nice way to accomplish that. Ideas and pointers are welcome.</p>\n<p>Here are the details. The predicate P should have type \"('a =&gt; 'b) =&gt; bool\" and satisfy <br>\nproperties such as the following (type variables may be restricted to some sort if needed):</p>\n<ol>\n<li>P (%x :: 'a. x) for every 'c</li>\n<li>P f ==&gt; P g ==&gt; P (f o g) for all f :: 'a =&gt; 'b and g :: 'c =&gt; 'a</li>\n<li>P (%_ :: 'a. x :: 'b)</li>\n</ol>\n<p>Clearly, I cannot just define a locale l that fixes P as a parameter and assumes the <br>\nproperties 1-3, because this does not typecheck as P occurs with different type instances. <br>\nNeither does inductive &amp; friends work (for the same reason).</p>\n<p>I could define \"P\" as \"%_. True\" and derive properties 1-3 from this. However, my theorem <br>\nis of the form</p>\n<p>(ALL x. P x --&gt; foo x) ==&gt; P something ==&gt; P something_more_complicated</p>\n<p>where the first assumption is folded in a definition. Unfortunately, foo does not hold for <br>\nall x. Thus, defining \"P\" as \"%_. True\" would allow me to derive False from the first <br>\nassumption. So I could circumvent the actual proof of deriving the conclusion from the <br>\nsecond assumption.</p>\n<p>I think of axiomatising properties 1-3 for P declared as a global constant with consts. In <br>\na separate theory, I could show that \"%_. True\" satisfies all the properties stated. In my <br>\nunderstanding, this should ensure that the axioms do not introduce inconsistencies <br>\nanywhere. Still, as the theorem is proven in a scope where P is only axiomatised, I cannot <br>\nderive False from the first assumption in its proof. In fact, the theorem also holds for <br>\nthe metamodel of HOL in which P is interpreted as the predicate that I am too lazy to <br>\ndefine (provided that it exists at all, but that's another issue). Is this argument <br>\ncorrect? Are there better ways to approach this?</p>\n<p>Best,<br>\nAndreas</p>",
        "id": 294640183,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661161783
    },
    {
        "content": "<p>From: Dmitriy Traytel &lt;<a href=\"mailto:traytel@in.tum.de\">traytel@in.tum.de</a>&gt;<br>\nHi Andreas,</p>\n<p>if there would be a nice way for doing this in HOL, we could simplify a <br>\nlot of things in the BNF package.</p>\n<p>One approach that comes to mind is to use a locale with several <br>\nmonomorphic copies of P (as many as you need to express the propetries). <br>\nWhether this works without being to painful, depends on what you <br>\nactually are proving. For BNFs we have used some (trivial) theorems that <br>\nare preconditioned with something like \"M = M1 o M2\" which is later <br>\ninstantiated with the map_comp theorem (see e.g. src/HOL/BNF_Comp).</p>\n<p>Best wishes,<br>\nDmitriy</p>",
        "id": 294640286,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661161808
    },
    {
        "content": "<p>From: Andreas Lochbihler &lt;<a href=\"mailto:andreas.lochbihler@inf.ethz.ch\">andreas.lochbihler@inf.ethz.ch</a>&gt;<br>\nHi Dmitriy,</p>\n<p>Thanks for the confirmation that there is no easy solution. Several monomorphic copies <br>\nprobably do not scale, because my reasoning will involve various instances of the types. <br>\nSo even in simple cases, I need at least 10 copies and I'd have to figure out in each case <br>\nwhich copy I need.</p>\n<p>What do you think of my axiomatic suggestion?</p>\n<p>Best,<br>\nAndreas</p>",
        "id": 294640320,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661161824
    },
    {
        "content": "<p>From: Dmitriy Traytel &lt;<a href=\"mailto:traytel@in.tum.de\">traytel@in.tum.de</a>&gt;<br>\nHi Andreas,</p>\n<p>it sounds ok, in the sense that it will not introduce inconsistencies. <br>\nWhat I'm not sure about is how you plan to further work with your <br>\npredicate---do you need to integrate it with some other theories or is</p>\n<p>(ALL x. P x --&gt; foo x) ==&gt; P something ==&gt; P something_more_complicated</p>\n<p>really the final theorem you are after?</p>\n<p>Dmitriy</p>",
        "id": 294640322,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661161826
    },
    {
        "content": "<p>From: Andreas Lochbihler &lt;<a href=\"mailto:andreas.lochbihler@inf.ethz.ch\">andreas.lochbihler@inf.ethz.ch</a>&gt;<br>\nHi Dmitriy,</p>\n<p>My plans are currently that something of the stated form will be my final theorem. Of <br>\ncourse, foo, something, and something_more_complicated depend on a huge number of other <br>\ndefinitions. So what do you mean by integration with other theories? In any case, I should <br>\nnever have to do a case analysis or induction over my predicate - everything should follow <br>\nfrom the closure properties (of which there are many more than the ones I listed).</p>\n<p>I guess that I will start by axiomatising the properties I need. Maybe I can find a <br>\nstudent to do the tedious construction later and derive the axioms from that.</p>\n<p>Best,<br>\nAndreas</p>",
        "id": 294640336,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661161833
    },
    {
        "content": "<p>From: Dmitriy Traytel &lt;<a href=\"mailto:traytel@in.tum.de\">traytel@in.tum.de</a>&gt;<br>\nHi Andreas,</p>\n<p>On 15.05.2015 11:34, Andreas Lochbihler wrote:</p>\n<blockquote>\n<p>Hi Dmitriy,</p>\n<p>My plans are currently that something of the stated form will be my <br>\nfinal theorem. Of course, foo, something, and <br>\nsomething_more_complicated depend on a huge number of other <br>\ndefinitions. So what do you mean by integration with other theories?<br>\nI meant something like instantiating the predicate.</p>\n</blockquote>\n<blockquote>\n<p>In any case, I should never have to do a case analysis or induction <br>\nover my predicate - everything should follow from the closure <br>\nproperties (of which there are many more than the ones I listed).<br>\nYes, I've inferred that from the fact that the closure properties you've <br>\nlisted don't give you anything very tedious to define (neither <br>\ninductively nor coinductively).</p>\n</blockquote>\n<blockquote>\n<p>I guess that I will start by axiomatising the properties I need. Maybe <br>\nI can find a student to do the tedious construction later and derive <br>\nthe axioms from that.</p>\n</blockquote>\n<p>Another idea (going back to you %x. True definition):</p>\n<p>context begin</p>\n<p>private definition \"Q x = True\"</p>\n<p>definition \"P = Q\"</p>\n<p>lemma props:<br>\n   \"P id\"<br>\n   \"P f ⟹ P g ⟹ P (f o g)\"<br>\n   \"P (λx. c)\"<br>\n   unfolding P_def Q_def by simp_all</p>\n<p>end</p>\n<p>This makes it kind of hard (if possible at all) to access the definition <br>\nof Q. You prospective student would need to replace just a definition <br>\nrather than an axiomatization then ;-)</p>\n<p>Dmitriy</p>",
        "id": 294640348,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661161839
    },
    {
        "content": "<p>From: Andreas Lochbihler &lt;<a href=\"mailto:andreas.lochbihler@inf.ethz.ch\">andreas.lochbihler@inf.ethz.ch</a>&gt;<br>\nHi Dmitriy,</p>\n<blockquote>\n<blockquote>\n<p>My plans are currently that something of the stated form will be my final theorem. Of<br>\ncourse, foo, something, and something_more_complicated depend on a huge number of other<br>\ndefinitions. So what do you mean by integration with other theories?<br>\nI meant something like instantiating the predicate.<br>\nNo, I do not think that this will be needed.</p>\n</blockquote>\n</blockquote>\n<blockquote>\n<p>Another idea (going back to you %x. True definition):</p>\n<p>context begin</p>\n<p>private definition \"Q x = True\"</p>\n<p>definition \"P = Q\"</p>\n<p>lemma props:<br>\n   \"P id\"<br>\n   \"P f ⟹ P g ⟹ P (f o g)\"<br>\n   \"P (λx. c)\"<br>\n   unfolding P_def Q_def by simp_all</p>\n<p>end</p>\n<p>This makes it kind of hard (if possible at all) to access the definition of Q. You<br>\nprospective student would need to replace just a definition rather than an axiomatization<br>\nthen ;-)<br>\nInteresting idea, but I am not yet convinced. If I want to explain my proof to someone <br>\nelse, I'd have to convince them that I am proving the statement only using props, but not <br>\nusing Q_def. It is easier to argue that I am only using the axioms if there is nothing <br>\nelse available in the theorem prover. Otherwise, I'd have to explain the whole concept of <br>\nname spaces and contexts. Moreover, I do not know how strict name spaces enforce <br>\nprivateness. I'd expect that there are corner cases where the enforcement might fail <br>\n(blind shot: extract the proof terms for props and get the references to the theorem Q_def <br>\nfrom that?).</p>\n</blockquote>\n<p>In the end, replacing the axiomatisation or the bogus definition should amount to the same <br>\neffort.</p>\n<p>Andreas</p>",
        "id": 294640358,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661161844
    },
    {
        "content": "<p>From: Johannes Hölzl &lt;<a href=\"mailto:hoelzl@in.tum.de\">hoelzl@in.tum.de</a>&gt;<br>\nHm, then you need to ensure that Sledgehammer, Nitpick, Quickcheck do<br>\nnot find the definition of Q. Otherwise you get a lot of warnings or<br>\n\"false\" proofs. Is \"private\" enough to guarantee this?</p>\n<ul>\n<li>Johannes</li>\n</ul>",
        "id": 294640386,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661161857
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nNo.  The new 'private' and 'qualified' command prefixes merely affect name <br>\nspace accesses.  Thus they do hardly anything at all.  Only the surface <br>\npresentation of formal entities is modified.</p>\n<p>Think of it like 'private' in Java or Scala, which is in some sense just a <br>\njoke as proven here: <br>\n<a href=\"http://isabelle.in.tum.de/repos/isabelle/file/Isabelle2015-RC1/src/Pure/General/untyped.scala\">http://isabelle.in.tum.de/repos/isabelle/file/Isabelle2015-RC1/src/Pure/General/untyped.scala</a></p>\n<p>It is easy to do similar things with 'private' name space entries within <br>\nthe Isabelle context, using perfectly normal Isabelle/ML operations.</p>\n<p>Back to the purpose of this thread: maybe the 'specification' command can <br>\ndo a job here, although it is a bit old and not yet localized.</p>\n<p>Makarius</p>",
        "id": 294640443,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661161875
    },
    {
        "content": "<p>From: Andreas Lochbihler &lt;<a href=\"mailto:andreas.lochbihler@inf.ethz.ch\">andreas.lochbihler@inf.ethz.ch</a>&gt;<br>\nHi Makarius,</p>\n<blockquote>\n<p>Back to the purpose of this thread: maybe the 'specification' command can do a job here,<br>\nalthough it is a bit old and not yet localized.<br>\nI tried specification, but it did not work. It complains that the specified constant <br>\noccurs in different variants and I should add type constraints to make them the same. But <br>\nthis defeats the point, because I want the predicate to have different type instances in <br>\nthe axioms.</p>\n</blockquote>\n<p>Best,<br>\nAndreas</p>",
        "id": 294640459,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661161882
    }
]