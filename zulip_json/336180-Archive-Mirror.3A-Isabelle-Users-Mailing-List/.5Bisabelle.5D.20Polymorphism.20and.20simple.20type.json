[
    {
        "content": "<p>From: Steve W &lt;<a href=\"mailto:s.wong.731@gmail.com\">s.wong.731@gmail.com</a>&gt;<br>\nHi,</p>\n<p>I have a question about Isabelle's polymorphism. Since Isabelle has a<br>\nsimply-typed lambda calculus, how come the meta-logic is polymorphic?<br>\nPolymorphism is not typically considered simple, right?</p>\n<p>Regards<br>\nSteve</p>",
        "id": 294127892,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660841870
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nFunny thing (1): Isabelle/Pure is not really a meta-logic, because it <br>\ncannot reason much about other logics.  This is why I prefer to call it <br>\n\"logical framework\", according to what I've learned from Stefan Berghofer <br>\nat some point.</p>\n<p>Funny thing (2): Isabelle/Pure is not polymorphic either.  You can work <br>\nschematically wrt. arbitrary types and the system juggles contexts and <br>\nresults in a way that it looks like Hindley-Milner polymorphism. See also <br>\nthe explanation of the \"admissible rules generalize and instantiate\" in <br>\nthe Isabelle/Isar implementation manual (chapter 2).</p>\n<p>Makarius</p>",
        "id": 294127937,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660841881
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nMoreover see the following paper on local theory specifications:</p>\n<p>Florian Haftmann and Makarius Wenzel. Local theory specifications in<br>\n   Isabelle/Isar, In S. Berardi, F. Damiani and U. de Liguoro, editors,<br>\n   Types for Proofs and Programs, TYPES 2008. LNCS 5497, Springer, 2009.<br>\n<a href=\"http://www4.in.tum.de/~wenzelm/papers/local-theory.pdf\">http://www4.in.tum.de/~wenzelm/papers/local-theory.pdf</a></p>\n<p>At the end of section 3 it says:</p>\n<p>Here the type variables 'a need to be fixed in the context, but ?'b is<br>\n   arbitrary.  In other words, we have conjured up proper let-polymorphism<br>\n   in the abstract syntax layer of Isabelle/Isar, without touching the Pure<br>\n   logic. [By extending it towards a more complicated system with<br>\n   polymorphism.]</p>\n<p>See also the example <br>\n<a href=\"http://isabelle.in.tum.de/dist/library/HOL/ex/Abstract_NAT.html\">http://isabelle.in.tum.de/dist/library/HOL/ex/Abstract_NAT.html</a> which <br>\ndefines a \"polymorphic\" recursion operator on a hypothetical type of <br>\nnatural numbers.</p>\n<p>Makarius</p>",
        "id": 294127993,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660841887
    },
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\nIsabelle's lambda calculus is in between simply typed and ML-style<br>\npolymorphic (with type classes thrown in). It is simply typed because<br>\nthe types are built up from base types by means of =&gt;. It resembles<br>\nML-style polymorphism because it has type variables, too (and thus<br>\nsimply-typed is an understatement). The difference to ML-style<br>\npolymorphism is that it has no let construct for defining a polymorphic<br>\nconstant locally inside a term. This has to be done at the declaration<br>\nlevel, i.e. gobally. It shares the absence of explicit type quantifiers<br>\nwith Milner's original paper, where he even managed to have a<br>\nlet-construct without making the quantifiers explicit.</p>\n<p>Tobias</p>\n<p>Steve W schrieb:</p>",
        "id": 294128132,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660841928
    },
    {
        "content": "<p>From: <a href=\"mailto:mark@proof-technologies.com\">mark@proof-technologies.com</a><br>\nActually the term \"simply-typed\" tends to be used in more than one way.<br>\nSome people use it to mean \"not dependently-typed\" and some people use it to<br>\nmean \"not polymorphic and not dependently-typed\".</p>\n<p>When people refer to \"simply-typed lambda calculus\" they are (usually)<br>\nreferring to Church's original simply typed lambda calculus (which he<br>\ncreated after his untyped lambda calculus).  This does not have<br>\npolymorphism, but Isabelle and HOL, that are based on it, do.</p>\n<p>Mark.</p>\n<p>on 17/1/11 6:01 PM, Steve W &lt;<a href=\"mailto:s.wong.731@gmail.com\">s.wong.731@gmail.com</a>&gt; wrote:</p>",
        "id": 294128164,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660841936
    }
]