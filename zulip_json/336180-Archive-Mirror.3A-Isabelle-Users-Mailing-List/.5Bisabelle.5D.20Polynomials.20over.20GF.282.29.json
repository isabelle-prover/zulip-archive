[
    {
        "content": "<p>From: \"Janney, Mark-P26816\" &lt;<a href=\"mailto:Mark.Janney@gdc4s.com\">Mark.Janney@gdc4s.com</a>&gt;<br>\nGreetings -</p>\n<p>I am working on a formal development of an efficient software algorithm<br>\nto calculate a proprietary cyclic redundancy check (CRC). This CRC<br>\nitself is defined in the usual fashion in terms of polynomials over<br>\nGF(2).</p>\n<p>Rather than re-invent the wheel, I'd like to re-use existing Isabelle<br>\ntheories as much as possible.  I'm interested in theories in any of the<br>\nfollowing areas:<br>\n  --  polynomials over a field<br>\n  --  GF(2)<br>\n  --  CRC specifications and algorithms</p>\n<p>If anyone can point me towards such material, I would be grateful.<br>\nThanks - Mark Janney</p>",
        "id": 294070749,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660827078
    },
    {
        "content": "<p>From: Brian Huffman &lt;<a href=\"mailto:brianh@cs.pdx.edu\">brianh@cs.pdx.edu</a>&gt;<br>\nHi Mark,</p>\n<p>The Isabelle distribution contains two different formalizations of  <br>\npolynomials, each with its own tradeoffs.</p>\n<p>First, there is Univ_Poly.thy, created by Amine Chaieb for use in his  <br>\nproof of the fundamental theorem of algebra. This theory is  <br>\nautomatically included if your theory imports Complex_Main. It does  <br>\nnot define a type constructor for polynomials, but rather implements  <br>\nall operations in terms of lists.</p>\n<p>Second, there is the collection of theories in HOL/Algebra/poly,  <br>\ncreated by Clemens Ballarin. These theories define an actual type  <br>\nconstructor for polynomials, and they also include a formalization of  <br>\nlong division for polynomials, which I expect you would need for your  <br>\napplication. Unfortunately, the theories are rather out of date, and  <br>\ndo not use the same hierarchy of algebraic classes as the rest of  <br>\nIsabelle/HOL. If you use them, you might have to provide some extra  <br>\ninstance proofs for the duplicated axclasses, and the proof automation  <br>\nis not as good as it could be (since many simprocs in Isabelle/HOL are  <br>\nspecific to the type classes defined in Ring_and_Field.thy).</p>\n<p>It would be nice to eventually merge these two theories, so that we  <br>\ncould have a type constructor for polynomials that supports all of the  <br>\nusual operations, and is also integrated with the current type class  <br>\nhierarchy. I have already done a bit of tinkering with these theories,  <br>\nso if there is enough interest I would probably be willing to work on  <br>\nthis some more.</p>\n<p>For GF(2), you could just import the HOL-Word image and use 1-bit  <br>\nwords. However, the Word library does not provide a field class  <br>\ninstance for this type. It probably wouldn't be too much work to just  <br>\ndefine the type yourself.</p>\n<p>Hope this helps,</p>\n<ul>\n<li>Brian</li>\n</ul>\n<p>Quoting \"Janney, Mark-P26816\" &lt;<a href=\"mailto:Mark.Janney@gdc4s.com\">Mark.Janney@gdc4s.com</a>&gt;:</p>",
        "id": 294070947,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660827143
    }
]