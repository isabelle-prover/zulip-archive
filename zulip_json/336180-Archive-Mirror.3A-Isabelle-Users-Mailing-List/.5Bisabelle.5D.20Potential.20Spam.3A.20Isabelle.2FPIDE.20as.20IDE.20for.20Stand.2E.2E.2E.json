[
    {
        "content": "<p>From: Michael Norrish &lt;<a href=\"mailto:michael.norrish@nicta.com.au\">michael.norrish@nicta.com.au</a>&gt;<br>\nSome minor criticisms: the Isabelle/ML handling of string constants is<br>\ncontaminating SML in this mode.</p>\n<p>The lexeme \"\\&lt;forall&gt;\" is not a valid string literal in SML (Poly, mlton and<br>\nMoscow ML, certainly agree with me), but it's fine in a file being interpreted<br>\nwith SML_file.</p>\n<p>The SML_file mode also rejects \"\\\\&lt;\" as a string literal, which is incorrect.</p>\n<p>Similarly, the string literal \"∀\" (UTF-8 encoding) is interpreted as if it were<br>\n\"\\&lt;forall&gt;\".  It's perhaps arguable what SML really requires of \"∀\":  mlton and<br>\nPoly/ML both see it as an error; Moscow ML accepts it as a string of size 3.  If<br>\nmlton and Poly/ML were to accept it, I expect they would follow Moscow ML and<br>\nevaluate</p>\n<p>\"∀\" = \"\\226\\136\\128\"</p>\n<p>to true.  The SML_file facility does not.</p>\n<p>Worse, if I load a file with a genuine occurrence of the UTF-8 encoded \"∀\", then<br>\nthe IDE will silently write it out to disk as \"\\&lt;forall&gt;\" when the file is<br>\nsaved.  This even happens if the ∀ occurs bare in a comment.  I find this<br>\ndisturbing.</p>\n<p>More importantly, only some special characters get this treatment.  If I write</p>\n<p>String.explode \"大学\";</p>\n<p>the IDE (at least on my machine) just displays black boxes in the edit window,<br>\nbut does decompose the sequence into the UTF-8 encoding as chars:</p>\n<p>val it = [#\"\\229\", #\"\\164\", #\"\\167\", #\"\\229\", #\"\\173\", #\"\\166\"]: char list</p>\n<p>So, not only is the SML mode perhaps deviating from the standard by accepting<br>\nstring literals like \"∀\" and \"大学\", but it's doing so in a confusing way: some<br>\nstring literals are silently turned into \\&lt;....&gt; forms, and others are not.</p>\n<p>Note that this is also a minor annoyance in Isabelle proper.  Users can't access<br>\nfiles called ∀.c by passing that name as written to an Isabelle/ML routine.<br>\nInstead they have to write  \\226\\136\\128.c</p>\n<p>Michael<br>\n<a href=\"/user_uploads/14278/8C3vsNU73M98ZgAiEgQ7N4ZV/signature.asc\">signature.asc</a></p>",
        "id": 294322143,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660927251
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nOn Tue, 18 Nov 2014, Michael Norrish wrote:</p>\n<blockquote>\n<p>The lexeme \"\\&lt;forall&gt;\" is not a valid string literal in SML (Poly, mlton and<br>\nMoscow ML, certainly agree with me), but it's fine in a file being interpreted<br>\nwith SML_file.</p>\n</blockquote>\n<p>That is not a \"lexeme\", but an \"Isabelle symbol\".  This concept is below <br>\nthe lexical syntax, like \\uXXXX in Java.  It is documented in the <br>\n\"implementation\" and \"isar-ref\" manual.</p>\n<p>The deeper question here is how plain 7 bit ASCII -- the only universal <br>\ntext representation standard that actually works -- can be extended to do <br>\na bit more, without breaking too many things.  Unicode with its many <br>\nuncertainties does break a lot.  The UTF-8 encoding could be called <br>\nhalf-decent today, but the JVM uses the older UTF-16, which causes many <br>\nheadaches.</p>\n<blockquote>\n<p>The SML_file mode also rejects \"\\\\&lt;\" as a string literal, which is incorrect.</p>\n</blockquote>\n<p>Formally that is a \"malformed symbol\".  One could try harder to accept <br>\nthat.  The question is if this is of practical relevance.  Are there <br>\nconcrete SML programs where this happens?</p>\n<p>We don't have millions of SML projects around.  So it might be simpler to <br>\nchange these, e.g. by using \"\\\\\" ^ \"&lt;\".</p>\n<p>In Isabelle/PIDE, the support for \"auxiliary files\" is limited to <br>\nsomething that conforms to Isabelle text represented with this special <br>\nsymbol notation.  So far I have never seen practical problems, by mere <br>\nluck.  If there are concrete counter-examples, we can think about concrete <br>\ncounter-measures to avoid problems.</p>\n<blockquote>\n<p>Similarly, the string literal \"∀\" (UTF-8 encoding) is interpreted as if <br>\nit were \"\\&lt;forall&gt;\".</p>\n</blockquote>\n<p>That is a additional aspect.  The PIDE default encoding is UTF-8-Isabelle, <br>\nwhich identifies certain Unicode points with certain Isabelle symbols, as <br>\nspecified in the cumulative etc/symbols files of the Isabelle system <br>\ninstallation.</p>\n<p>Encoding for Unicode introduce inherent unreliably.  In practice one <br>\nnormally commits to just one encoding.  For Isabelle, the above does the <br>\njob without too many people ever noticing the point.</p>\n<p>For pure SML, one could try harder to conform to strict UTF-8, but again <br>\nthe question is practical relevance.  Traditionally, SML never really <br>\nsupported Unicode anyway, so it cannot be relied on in existing programs.</p>\n<blockquote>\n<p>It's perhaps arguable what SML really requires of \"∀\":  mlton and<br>\nPoly/ML both see it as an error; Moscow ML accepts it as a string of size 3.  If<br>\nmlton and Poly/ML were to accept it, I expect they would follow Moscow ML and<br>\nevaluate</p>\n<p>\"∀\" = \"\\226\\136\\128\"</p>\n<p>to true.</p>\n</blockquote>\n<p>Such things are generally dangerous in Unicode.  Even with a well-defined <br>\nencoding, so-called \"combining sequences\" introduce some uncertainty about <br>\nthe actual text content.  Do you mean before or after normalization?</p>\n<blockquote>\n<p>Worse, if I load a file with a genuine occurrence of the UTF-8 encoded <br>\n\"∀\", then the IDE will silently write it out to disk as \"\\&lt;forall&gt;\" <br>\nwhen the file is saved.  This even happens if the ∀ occurs bare in a <br>\ncomment.  I find this disturbing.</p>\n</blockquote>\n<p>It is quite well documented in the Isabelle/PIDE documentation and <br>\nliterature.  You could disable these conversions by removing all <br>\netc/symbols files.  For Isabelle that would be very impractical.  For SML <br>\nit could be done, if there were a real need for it.</p>\n<blockquote>\n<p>Note that this is also a minor annoyance in Isabelle proper.  Users can't access<br>\nfiles called ∀.c by passing that name as written to an Isabelle/ML routine.<br>\nInstead they have to write  \\226\\136\\128.c</p>\n</blockquote>\n<p>Does that have any practical relevance, or is it just a synthetic example <br>\nto break the system?</p>\n<p>Unicode file-names are a sure way to ask for trouble.  In conjunction with <br>\nthe \"portable\" JVM things are particularly fragile.  I have seen routine <br>\nproblems with Far Eastern file names on Windows and sometimes Linux. <br>\nThere are also problems with continental European diacritics on Windows.</p>\n<p>I don't think that Unicode will ever get there to deliver something that <br>\njust works everywhere and for everyone.  We can't just subscribe to a <br>\nstandard that is not a standard at all, but many of them with ongoing <br>\nchanges and no clear perspective.</p>\n<p>Makarius</p>\n<hr>\n<p><a href=\"http://stop-ttip.org\">http://stop-ttip.org</a>  909,790 people so far</p>\n<hr>",
        "id": 294322218,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660927281
    },
    {
        "content": "<p>From: Michael Norrish &lt;<a href=\"mailto:michael.norrish@nicta.com.au\">michael.norrish@nicta.com.au</a>&gt;<br>\nOn 19/11/14 03:28, Makarius wrote:</p>\n<blockquote>\n<p>On Tue, 18 Nov 2014, Michael Norrish wrote:</p>\n</blockquote>\n<blockquote>\n<blockquote>\n<p>The lexeme \"\\&lt;forall&gt;\" is not a valid string literal in SML (Poly, mlton and<br>\nMoscow ML, certainly agree with me), but it's fine in a file being interpreted<br>\nwith SML_file.</p>\n</blockquote>\n</blockquote>\n<blockquote>\n<p>That is not a \"lexeme\", but an \"Isabelle symbol\".  This concept is below the<br>\nlexical syntax, like \\uXXXX in Java.  It is documented in the \"implementation\"<br>\nand \"isar-ref\" manual.</p>\n</blockquote>\n<p>I appreciate that all of these notions make sense in the context of Isabelle.<br>\nAll of my criticisms are of the IDE in the context of developing SML rather than<br>\nIsabelle/ML.</p>\n<blockquote>\n<blockquote>\n<p>The SML_file mode also rejects \"\\\\&lt;\" as a string literal, which is incorrect.</p>\n</blockquote>\n</blockquote>\n<blockquote>\n<p>Formally that is a \"malformed symbol\".  One could try harder to accept that. <br>\nThe question is if this is of practical relevance.  Are there concrete SML<br>\nprograms where this happens?</p>\n</blockquote>\n<p>Indeed, any SML program attempting to emit Isabelle symbols in a way that is<br>\nvalid SML may want to contain string literals like \"\\\\&lt;forall&gt;\".</p>\n<blockquote>\n<p>We don't have millions of SML projects around.  So it might be simpler to change<br>\nthese, e.g. by using \"\\\\\" ^ \"&lt;\".</p>\n</blockquote>\n<p>Of course there are workarounds.  I just hesitate to recommend a tool for<br>\ngeneral SML usage that doesn't quite implement SML.</p>\n<blockquote>\n<p>Unicode file-names are a sure way to ask for trouble.  In conjunction with the<br>\n\"portable\" JVM things are particularly fragile.  I have seen routine problems<br>\nwith Far Eastern file names on Windows and sometimes Linux. There are also<br>\nproblems with continental European diacritics on Windows.</p>\n</blockquote>\n<p>I adjusted the seL4 C parser precisely to cope with Chinese in filenames (a<br>\nuser-reported problem).  So, yes, there was a problem with a Unicode filename,<br>\nbut luckily, I could create a system that worked.  The files were part of a C<br>\nproject that clearly did work in that context.  If the C infrastructure could<br>\ncope with Unicode filenames, I felt I should try too.</p>\n<p>Michael<br>\n<a href=\"/user_uploads/14278/94rQYgfvRBcA9m_LmRL-cUSP/signature.asc\">signature.asc</a></p>",
        "id": 294322355,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660927325
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nOn Wed, 19 Nov 2014, Michael Norrish wrote:</p>\n<blockquote>\n<p>On 19/11/14 03:28, Makarius wrote:</p>\n<blockquote>\n<p>That is not a \"lexeme\", but an \"Isabelle symbol\".  This concept is below the<br>\nlexical syntax, like \\uXXXX in Java.  It is documented in the \"implementation\"<br>\nand \"isar-ref\" manual.</p>\n</blockquote>\n<blockquote>\n<blockquote>\n<p>The SML_file mode also rejects \"\\\\&lt;\" as a string literal, which is incorrect.</p>\n</blockquote>\n</blockquote>\n<blockquote>\n<p>Formally that is a \"malformed symbol\".  One could try harder to accept that.<br>\nThe question is if this is of practical relevance.  Are there concrete SML<br>\nprograms where this happens?</p>\n</blockquote>\n<p>Indeed, any SML program attempting to emit Isabelle symbols in a way that is<br>\nvalid SML may want to contain string literals like \"\\\\&lt;forall&gt;\".</p>\n</blockquote>\n<p>That is an application of generating sources, which could be easily <br>\nchanged to emit \"\\027\\027&lt;forall&gt;\" instead.</p>\n<p>BTW, \"malformed symbol\" above only refers to \\&lt; not a proper \\&lt;forall&gt;, <br>\nbut \"\\\\&lt;forall&gt;\" is also rejected due to the way how sources are passed <br>\nthrough the system: text is always treated at Isabelle symbol boundaries.</p>\n<p>This is the reason why the Prover IDE works with symbols at all. The UTF-8 <br>\nthat is occasionally seen in Coq sources does not work in that respect.</p>\n<p>In any case, I would like to see real applications and real problems. <br>\nThen one can find ways to make it work.  In contrast, the general problem <br>\nof adding Unicode support everywhere and uniformly cannot be solved.</p>\n<blockquote>\n<blockquote>\n<p>Unicode file-names are a sure way to ask for trouble.  In conjunction with the<br>\n\"portable\" JVM things are particularly fragile.  I have seen routine problems<br>\nwith Far Eastern file names on Windows and sometimes Linux. There are also<br>\nproblems with continental European diacritics on Windows.</p>\n</blockquote>\n<p>I adjusted the seL4 C parser precisely to cope with Chinese in filenames (a<br>\nuser-reported problem).  So, yes, there was a problem with a Unicode filename,<br>\nbut luckily, I could create a system that worked.</p>\n</blockquote>\n<p>Such things can be made to suck less in a case-by-case basis.  I am doing <br>\nit myself whenever it is feasible, but the general problem remains.  E.g. <br>\nwhen you drag-and-drop files on some application, it depends on many <br>\nside-conditions of the operating system desktop what really happens.</p>\n<p>Makarius</p>\n<hr>\n<p><a href=\"http://stop-ttip.org\">http://stop-ttip.org</a>  912,049 people so far</p>\n<hr>",
        "id": 294322407,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660927343
    }
]