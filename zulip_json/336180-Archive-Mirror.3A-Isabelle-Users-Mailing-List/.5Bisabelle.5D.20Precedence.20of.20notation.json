[
    {
        "content": "<p>From: Wolfgang Jeltsch &lt;<a href=\"mailto:wolfgang-it@jeltsch.info\">wolfgang-it@jeltsch.info</a>&gt;<br>\nHi!</p>\n<p>Say I have defined a ternary relation <code>R :: A ⇒ B ⇒ A ⇒ bool</code> with<br>\nmixfix syntax <code>_ →⟨_⟩ _</code>. Now I want to define an alternative notation<br>\nthat allows me to fix the second argument. I use the following<br>\ndeclaration:</p>\n<p>abbreviation R' :: \"B ⇒ A ⇒ A ⇒ bool\" (‹'(→⟨_⟩')›) where<br>\n    \"(→⟨u⟩) x y ≡ x →⟨u⟩ y\"</p>\n<p>Sadly the abbreviation <code>R'</code> takes precedence over <code>R</code> when printing; so<br>\nfor example</p>\n<p>term \"x →⟨u⟩ y\"</p>\n<p>yields the output <code>(→⟨u⟩) x y</code>. How can I make sure that the notation<br>\nfor <code>R'</code> is only used when there are less than three arguments?</p>\n<p>All the best,<br>\nWolfgang</p>",
        "id": 294766926,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661202382
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nYou probably want to use \"(input)\" for the abbreviation (see isar-ref manual):</p>\n<p>abbreviation (input) R' :: \"'b ⇒ 'a ⇒ 'a ⇒ bool\" (‹'(→⟨_⟩')›)<br>\n  where \"(→⟨u⟩) x y ≡ x →⟨u⟩ y\"</p>\n<p>Makarius</p>",
        "id": 294822338,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661242763
    }
]