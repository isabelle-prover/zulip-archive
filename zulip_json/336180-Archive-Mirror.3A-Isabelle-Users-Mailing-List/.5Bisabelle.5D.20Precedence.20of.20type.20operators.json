[
    {
        "content": "<p>From: \"W. Douglas Maurer\" &lt;<a href=\"mailto:maurer@gwu.edu\">maurer@gwu.edu</a>&gt;<br>\nOn p. 11 of the document \"Whats In Main\" there is a very useful table <br>\ngiving, for every infix operator in Main, its precedence as an <br>\ninteger between 0 and 100, and its associativity (either left or <br>\nright).<br>\nI would like to ask: Is there anything like this for the Isar type operators?<br>\nAll I have been able to find in the reference manuals and tutorials <br>\nis relative precedence. So for example (p. 3 of prog-prove): \"Note <br>\nthat 'a =&gt; 'b list means 'a =&gt; ('b list), not ('a =&gt; 'b) list : <br>\npostfix type constructors have precedence over =&gt; .\"<br>\nThis answers some of the obvious questions about type operator <br>\nprecedence, but not all of them. There should be a table from which I <br>\ncan deduce the answers to questions like: Why the parentheses in (int </p>\n<ul>\n<li>int) set ? Do postfix type constructors also have precedence over * <br>\nas well as over =&gt;  ?<br>\nSuch a table, in addition to covering postfix type constructors <br>\n(list, set, rel, etc.) and * (for product type), should cover / (for <br>\nquotient type), =&gt; (for function types), and all the other type <br>\noperators.</li>\n</ul>",
        "id": 294325516,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660928409
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nOn Sun, 25 Jan 2015, W. Douglas Maurer wrote:</p>\n<blockquote>\n<p>Is there anything like this for the Isar type operators?</p>\n</blockquote>\n<p>I was first confused by that.  The type operators are part of the logical <br>\nlanguage of Pure or HOL, not the theory and proof language of Isar.</p>\n<blockquote>\n<p>All I have been able to find in the reference manuals and tutorials is <br>\nrelative precedence. So for example (p. 3 of prog-prove): \"Note that 'a <br>\n=&gt; 'b list means 'a =&gt; ('b list), not ('a =&gt; 'b) list : postfix type <br>\nconstructors have precedence over =&gt; .\"</p>\n</blockquote>\n<p>The function space is part of Pure, and the \"isar-ref\" manual has section <br>\n7.4.3 The Pure grammar.  You can also use the print_syntax command, but <br>\nits output is a bit large (in theory Pure it is still manageable).</p>\n<blockquote>\n<p>This answers some of the obvious questions about type operator precedence, <br>\nbut not all of them. There should be a table from which I can deduce the <br>\nanswers to questions like: Why the parentheses in (int * int) set ? Do <br>\npostfix type constructors also have precedence over * as well as over =&gt;  ?<br>\nSuch a table, in addition to covering postfix type constructors (list, set, <br>\nrel, etc.) and * (for product type), should cover / (for quotient type), =&gt; <br>\n(for function types), and all the other type operators.</p>\n</blockquote>\n<p>Like in the term language, application for types binds most tightly, so <br>\nyou need parentheses for arguments with separate structure.  The Pure <br>\ngrammar reveals that as well.</p>\n<p>Makarius</p>",
        "id": 294325528,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660928415
    }
]