[
    {
        "content": "<p>From: Karolis Petrauskas &lt;<a href=\"mailto:k.petrauskas@gmail.com\">k.petrauskas@gmail.com</a>&gt;<br>\nI'm just starting with Isabelle/HOL so please excuse me for a simple question.<br>\nI'm working on an algorithm in the context of group theory and get<br>\nstuck while proving function termination.<br>\nBelow is a simple example reproducing my confusion :)<br>\nIn the original problem the Src variable does not decrease<br>\nmonotonically, so I rely on the fact that the group G I work with is<br>\nfinite and Dst is a strictly growing subset of <code>carrier G</code>.<br>\nThe sets in copyRec are subsets of carrier G, although I don't find a<br>\nway to specify that.<br>\nAnother precondition I would like to specify for the copyRec function<br>\nis that Src and Dst are disjoint.<br>\nHow can I do that? Or maybe I should approach it in a different way?</p>\n<hr>\n<p>theory TestCopy imports Main \"HOL-Algebra.Group\" begin<br>\nlocale loc = group + assumes Finite: \"finite (carrier G)\"<br>\nbegin</p>\n<p>function copyRec :: \"'a set ⇒ 'a set ⇒ 'a set\" where<br>\n\"copyRec Src Dst = (if Src = {} then Dst else (<br>\n  let e    = SOME e. e ∈ Src;<br>\n      Src' = Src - {e};<br>\n      Dst' = insert e Dst<br>\n  in copyRec Src' Dst'<br>\n))\"<br>\n  by (pat_completeness, auto)<br>\ntermination<br>\nproof (relation \"measure (λ(Src, Dst). (card (carrier G)) - (card<br>\nDst))\", simp, simp)<br>\n  fix Src Dst x xa xb<br>\n  assume ne: \"Src ≠ {}\"<br>\n     and ax: \"x = (SOME e. e ∈ Src)\"<br>\n     and aa: \"xa = Src - {SOME e. e ∈ Src}\"<br>\n     and ab: \"xb = insert (SOME e. e ∈ Src) Dst\"<br>\n  have xs: \"x ∈ Src\" using ne and ax by (simp add: some_in_eq)<br>\n  have nd: \"x ∉ Dst\" oops (<em>here I need a fact that Src and Dst are disjoint</em>)<br>\n  have \"card (insert x Dst) &gt; card Dst\" using nd by (blast)<br>\nqed</p>\n<p>fun (in group) copy :: \"'a set ⇒ 'a ⇒ 'a set\" where<br>\n\"copy H g = copyRec H {g}\"</p>\n<p>end<br>\nend</p>\n<hr>\n<p>Thanks in advance,<br>\nKarolis Petrauskas</p>",
        "id": 294830559,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661246419
    },
    {
        "content": "<p>From: Martin Raszyk &lt;<a href=\"mailto:m.raszyk@gmail.com\">m.raszyk@gmail.com</a>&gt;<br>\nDear Karolis,</p>\n<p>the easiest way to state your precondition is to put it into the<br>\nif-condition, i.e., have \"if Src = {} ∨ Src ∩ Dst ≠ {} then Dst\". This<br>\nway, the function is well-defined to be Dst if the precondition is not<br>\nsatisfied and you can assume the precondition for the recursive call<br>\nwhich helps you proving the function's termination. More generally,<br>\nyou can express a precondition as \"if \\neg P then undefined else ...\"<br>\nwhere P expresses your precondition and \"...\" corresponds to the<br>\ndefinition assuming the precondition.</p>\n<p>To get your original definition, you can then prove a lemma which has<br>\nthe precondition as an assumption and contains your original function<br>\ndefinition as the conclusion, i.e., after the termination proof you<br>\ncould state a lemma \"Src ∩ Dst ≠ {} ==&gt; copyRec Src Dst = ...\" where<br>\n\"...\" correspond to your original definition.</p>\n<p>Best regards,<br>\nMartin</p>",
        "id": 294830570,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661246423
    },
    {
        "content": "<p>From: Karolis Petrauskas &lt;<a href=\"mailto:k.petrauskas@gmail.com\">k.petrauskas@gmail.com</a>&gt;<br>\nThanks, Martin, it worked.</p>\n<p>Best regards,<br>\nKarolis</p>",
        "id": 294830587,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661246433
    }
]