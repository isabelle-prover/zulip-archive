[
    {
        "content": "<p>From: Mark Wassell &lt;<a href=\"mailto:mpwassell@gmail.com\">mpwassell@gmail.com</a>&gt;<br>\nHello,</p>\n<p>I am having a problem invoking code_pred on an inductive predicate that is<br>\nultimately defined in a locale that has an assumption.</p>\n<p>I am following the steps outlined in a previous post on this [1] but my<br>\nlocale has an assumption so I don't know if defining this is at all<br>\npossible.</p>\n<p>Cheers</p>\n<p>Mark</p>\n<p>[1]<br>\n<a href=\"https://lists.cam.ac.uk/pipermail/cl-isabelle-users/2017-January/msg00064.html\">https://lists.cam.ac.uk/pipermail/cl-isabelle-users/2017-January/msg00064.html</a></p>\n<p>locale mylocale =<br>\n  fixes P :: \"'a set ⇒ bool\"<br>\n  assumes \"P {}\"<br>\nbegin</p>\n<p>inductive test :: \"'a ⇒ 'a ⇒ bool\" where<br>\n  \"P {a,b} ⟹ test a b\" (*|<br>\n  \"test a b ⟹ P {a,b,c}  ⟹ test a c\" *)<br>\nend</p>\n<p>definition \"foo P = mylocale.test P\"</p>\n<p>lemma [code_pred_intro]:<br>\n  \"mylocale P ⟹ P {a,b} ⟹ foo P a b\"<br>\n  unfolding foo_def using mylocale.test.intros by metis</p>\n<p>code_pred foo unfolding foo_def<br>\nproof -<br>\n  assume a1: \"mylocale.test x xa xb\" and \"(⋀P a b. x = P ⟹ xa = a ⟹ xb = b<br>\n⟹ mylocale P ⟹ P {a, b} ⟹ thesis)\"<br>\n  show thesis using mylocale.test.cases[of x xa xb thesis,OF _ a1] (* Seem<br>\nto have the right bits, in particular 'mylocale P', but in the wrong<br>\n'order' *)<br>\n  oops</p>",
        "id": 294719539,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661184291
    },
    {
        "content": "<p>From: Andreas Lochbihler &lt;<a href=\"mailto:andreas.lochbihler@inf.ethz.ch\">andreas.lochbihler@inf.ethz.ch</a>&gt;<br>\nDear Mark,</p>\n<p>This is not going to work in this way. In principle, if you could phrase the locale <br>\nassumptions as an executable test, then it would work, but every call to the inductive <br>\npredicate would re-evaluate this test, and this can get pretty computationally expensive <br>\nif you have a recursive inductive predicate.</p>\n<p>What I would recommend is that you only make it executable for interpretations that have <br>\ndischarged the assumptions. For example:</p>\n<p>locale mylocale =<br>\n   fixes P :: \"'a set ⇒ bool\"<br>\n   assumes \"P {}\"<br>\nbegin</p>\n<p>inductive test :: \"'a ⇒ 'a ⇒ bool\" where<br>\n   \"P {a,b} ⟹ test a b\" (*|<br>\n   \"test a b ⟹ P {a,b,c}  ⟹ test a c\" *)</p>\n<p>end</p>\n<p>consts P :: \"nat set ⇒ bool\"</p>\n<p>global_interpretation foo: mylocale P<br>\n   defines foo_test = \"foo.test\"<br>\n   sorry</p>\n<p>declare foo.test.intros [code_pred_intro]</p>\n<p>code_pred foo_test by(rule foo.test.cases)</p>\n<p>This works if there are only a few interpretations of your locale. If you have many of <br>\nthem, it might be useful to restructure your locale hierarchy such that you can move the <br>\ndefinition to a place without assumptions. (In all my years of using Isabelle, I've never <br>\nseen an inductive definition for which you needed a locale assumption to prove its <br>\nconsistency, i.e., monotonicity of the associated functional.)</p>\n<p>Andreas</p>",
        "id": 294719645,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661184339
    }
]