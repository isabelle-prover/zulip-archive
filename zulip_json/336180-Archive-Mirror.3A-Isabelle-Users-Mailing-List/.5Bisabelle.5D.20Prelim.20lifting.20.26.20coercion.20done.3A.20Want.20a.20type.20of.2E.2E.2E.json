[
    {
        "content": "<p>From: Gottfried Barrow &lt;<a href=\"mailto:igbi@gmx.com\">igbi@gmx.com</a>&gt;<br>\nI added \"lifting\" and \"coercion\" in the subject to make sure Ondrej and <br>\nDmitriy see it, but here I keep my talk general, since it's a mailing list.</p>\n<p>From here, I describe the three files I attach, summarize why I think I <br>\nwould and wouldn't want to use the types I defined, and try to make my <br>\ncase for Ondrej and Dmitriy to expand the ability of lifting and <br>\ncoercion to accept type variables where they currently don't.</p>\n<p>Well, things are good already. I'm just finishing this off.</p>\n<p>The three files I attach are part of my attempt to make a case. The <br>\nalgebra is already there in HOL, and I'm more interested in working with <br>\nabstract algebraic structures than with the rational and real numbers. <br>\nPartly, it's because they're at chapters 4, 13, and 14, where the <br>\nrationals and reals are at chapter 76 and 79 of the HOL document. It'll <br>\ntake me while to get to chapter 14, let alone chapter 79.</p>\n<p>It probably wouldn't be good to use a special type of positives just to <br>\nget rid of a few conditions in the premises, but there could be <br>\napplications where their use would be structural, such as being used to <br>\ngeneralize positive and negative exponents for different algebraic <br>\nstructures. Also, I could use them in a datatype, as with the following, <br>\nwhere the types would be closed under addition:</p>\n<p>datatype 'a::linordered_field lofD =<br>\n   NNeg \"'a lF0\"<br>\n  |NPos \"'a lFN0\"</p>\n<p>Use them for what? Nothing that I can think of right now.</p>\n<p>I tried workarounds using option, ordered pairs, and lists, and those <br>\nwere good enough for what's in the file <code>lF0_lF1.thy</code>. In that file, I <br>\ndo \"Lift nothing much; Coerce everything\". It occurred to me that I <br>\ndidn't have to do anything but use <code>setup_lifting</code>.</p>\n<p>The main thing I wanted from the lifting was the numerals, and I was <br>\nhaving problems proving the type class requirements with the clutter of <br>\nthe types I mentioned.</p>\n<p>That led me to <code>Lifting_Option.thy</code>, and I cut and pasted and modified <br>\nfrom there to set up a datatype in <code>dID_lifting.thy</code>, which is just an <br>\nidentity datatype:</p>\n<p>datatype 'a dID = dIDc 'a</p>\n<p>I couldn't have done it without Sledgehammer, and thanks to Brian <br>\nHuffman and Ondreg for that file.</p>\n<p>With that datatype, I was able to instantiate my typedef datatypes to <br>\nget the requirements, using lifting, for numeral, up to <code>semiring_1</code>, <br>\nand that file is <code>lF0_numerals.thy</code>.</p>\n<p>Thanks,<br>\nGB<br>\n<a href=\"/user_uploads/14278/rJ6aj_k-L0fuw_bRbdR8qg_3/dID_lifting.thy\">dID_lifting.thy</a><br>\n<a href=\"/user_uploads/14278/osMfC2MygknwzeeQ5s3qm-gb/lF0_lF1.thy\">lF0_lF1.thy</a><br>\n<a href=\"/user_uploads/14278/K_VPvRD-AMpCbrAklh7pS1wL/lF0_numerals.thy\">lF0_numerals.thy</a></p>",
        "id": 294270272,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660916980
    }
]