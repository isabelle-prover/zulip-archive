[
    {
        "content": "<p>From: <a href=\"mailto:filip@matf.bg.ac.rs\">filip@matf.bg.ac.rs</a><br>\nHello,<br>\nI am trying to generate LaTeX-ed proof documents from my Isabelle/HOL<br>\ntheories and I have several technical questions.</p>\n<p>(1) Suppose I have a definition like</p>\n<p>definition f where \"f x == x &lt;-&gt; True\"</p>\n<p>When I use @{thm f_def[no_vars]}, in LaTeX, I get</p>\n<p>f x == x = True</p>\n<p>So, = is printed, although I used the &lt;-&gt; symbol. Is there a way to<br>\npersuade the system to print &lt;-&gt; for equality on bool type? It would be<br>\nconvenient if this could be done globally, so I could be sure that &lt;-&gt; is<br>\nconsistently used in the whole proof document.</p>\n<p>(2) If f is an abbreviation like</p>\n<p>abbreviation f where \"f x == x &lt;-&gt; True\"</p>\n<p>Is there a way to print it later using some antiquotation (as I used @{thm<br>\nf_def[no_vars]}, when f was a definition).</p>\n<p>(3) I noticed that function definitions do not allow using == but only =.<br>\nFor example, I am not allowed to write:</p>\n<p>fun f where \"f (a, b) == a &gt; b\"</p>\n<p>but only</p>\n<p>fun f where \"f (a, b) = (a &gt; b)\"</p>\n<p>That seems a bit inconsistent with definitions made by using the<br>\ndefinition keyword. Is it maybe somehow possible to make @{thm<br>\nf.simps[no_vars]} print == instead of = so in LaTeX I get</p>\n<p>f (a, b) == a &gt; b</p>\n<p>I prefer this notation (since it emphasizes that something holds by<br>\ndefinition, since it does not require additional parentheses and since it<br>\nis consistent with definitions given using the definition keyword).</p>\n<p>Thank you very much for your answers!<br>\nFilip</p>",
        "id": 294153540,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660850248
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nOn Sun, 11 Mar 2012, <a href=\"mailto:filip@matf.bg.ac.rs\">filip@matf.bg.ac.rs</a> wrote:</p>\n<blockquote>\n<p>(1) Suppose I have a definition like</p>\n<p>definition f where \"f x == x &lt;-&gt; True\"</p>\n<p>When I use @{thm f_def[no_vars]}, in LaTeX, I get</p>\n<p>f x == x = True</p>\n<p>So, = is printed, although I used the &lt;-&gt; symbol. Is there a way to <br>\npersuade the system to print &lt;-&gt; for equality on bool type?</p>\n</blockquote>\n<p>This is controlled by the print mode \"iff\".  So for LaTeX document <br>\npreparation, it should work via @{thm f_def [no_vars, mode = iff]}</p>\n<p>You can also set Thy_Output.modes globally in your ROOT.ML file.</p>\n<blockquote>\n<p>It would be convenient if this could be done globally, so I could be <br>\nsure that &lt;-&gt; is consistently used in the whole proof document.</p>\n</blockquote>\n<p>It will be consistent for printing, but source text is shown as you write <br>\nit literally.</p>\n<blockquote>\n<p>(2) If f is an abbreviation like</p>\n<p>abbreviation f where \"f x == x &lt;-&gt; True\"</p>\n<p>Is there a way to print it later using some antiquotation</p>\n</blockquote>\n<p>See @{abbrev} as document antiquotation in the isar-ref manual.</p>\n<blockquote>\n<p>(3) I noticed that function definitions do not allow using == but only =.<br>\nFor example, I am not allowed to write:</p>\n<p>fun f where \"f (a, b) == a &gt; b\"</p>\n<p>but only</p>\n<p>fun f where \"f (a, b) = (a &gt; b)\"</p>\n<p>That seems a bit inconsistent with definitions made by using the<br>\ndefinition keyword. Is it maybe somehow possible to make @{thm<br>\nf.simps[no_vars]} print == instead of = so in LaTeX I get</p>\n<p>f (a, b) == a &gt; b</p>\n<p>I prefer this notation (since it emphasizes that something holds by <br>\ndefinition, since it does not require additional parentheses and since <br>\nit is consistent with definitions given using the definition keyword).</p>\n</blockquote>\n<p>Raw == from Pure is mainly for foundational purposes, it is hardly ever <br>\nused in Isabelle/HOL definitions these days.</p>\n<p>Things like 'definition' or 'inductive' or 'function' are all some derived <br>\nform of theorems based on some primitive defs that the package <br>\nimplementations produce from the user input, and then recover the <br>\nspecified results by some mechanized proof.  In contemporary Isabelle both <br>\n'definition' and 'theorem' are non-trivial specification mechanisms in <br>\nthat sense.</p>\n<p>Makarius</p>",
        "id": 294153688,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660850297
    }
]