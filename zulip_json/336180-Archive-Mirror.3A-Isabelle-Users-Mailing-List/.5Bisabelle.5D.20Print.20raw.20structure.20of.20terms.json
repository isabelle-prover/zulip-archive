[
    {
        "content": "<p>From: Wenda Li &lt;<a href=\"mailto:wl302@cam.ac.uk\">wl302@cam.ac.uk</a>&gt;<br>\nDear Isabelle/ML experts,</p>\n<p>In Isabelle/ML, by typing</p>\n<p>@{term \"1 + 1\"}</p>\n<p>I got</p>\n<p>val it = Const (\"<a href=\"http://Groups.plus_class.plus\">Groups.plus_class.plus</a>\", \"'a ⇒ 'a ⇒ 'a\")<br>\n           $ Const (\"<a href=\"http://Groups.one_class.one\">Groups.one_class.one</a>\", \"'a\")<br>\n           $ Const (\"<a href=\"http://Groups.one_class.one\">Groups.one_class.one</a>\", \"'a\")<br>\n     : term</p>\n<p>which nicely shows the raw structure of @{term \"1 + 1\"}. When debugging <br>\na tactic, I want to view the raw structure of some intermediate term. My <br>\nidea is to convert it into a string or Pretty.T, and then print it out <br>\nas a side effect of a tactic. However, with</p>\n<p>Pretty.writeln (Syntax.pretty_term @{context} @{term \"1+1\"});</p>\n<p>the output is</p>\n<p>1 + 1</p>\n<p>and with</p>\n<p>writeln (ML_Syntax.print_term @{term \"1+1\"});</p>\n<p>the output is</p>\n<p>Term.$ (Term.$ (Term.Const (\"<a href=\"http://Groups.plus_class.plus\">Groups.plus_class.plus</a>\", Term.Type <br>\n(\"fun\", [Term.TFree (\"'a\", [\"<a href=\"http://Groups.one\">Groups.one</a>\", \"Groups.plus\"]), Term.Type <br>\n(\"fun\", [Term.TFree (\"'a\", [\"<a href=\"http://Groups.one\">Groups.one</a>\", \"Groups.plus\"]), Term.TFree <br>\n(\"'a\", [\"<a href=\"http://Groups.one\">Groups.one</a>\", \"Groups.plus\"])])])), Term.Const <br>\n(\"<a href=\"http://Groups.one_class.one\">Groups.one_class.one</a>\", Term.TFree (\"'a\", [\"<a href=\"http://Groups.one\">Groups.one</a>\", <br>\n\"Groups.plus\"]))), Term.Const (\"<a href=\"http://Groups.one_class.one\">Groups.one_class.one</a>\", Term.TFree (\"'a\", <br>\n[\"<a href=\"http://Groups.one\">Groups.one</a>\", \"Groups.plus\"])))</p>\n<p>None of these two outputs show the raw structure of @{term \"1+1\"} as <br>\nwell as by typing @{term \"1+1\"} directly. Therefore, I was wondering if <br>\nthere is any other built-in ways to do the job, or shall I implement it <br>\non my own?</p>\n<p>Any help is greatly appreciated.</p>\n<p>Thanks,<br>\nWenda</p>",
        "id": 294324516,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660928081
    },
    {
        "content": "<p>From: Christian Sternagel &lt;<a href=\"mailto:c.sternagel@gmail.com\">c.sternagel@gmail.com</a>&gt;<br>\nDear Wenda,</p>\n<p>the antiquotation @{make_string} (which should work for most types) <br>\ninlines a function that turns an arbitrary value into a string. If the <br>\nonly reason for doing so is to print the resulting string, the <br>\nantiquotation @{print} is useful.</p>\n<p>However, note that this should <em>only</em> be done for debugging.</p>\n<p>The following all yield the same output</p>\n<p>ML ‹<br>\n  @{term \"1 + 1\"};<br>\n  @{print} @{term \"1 + 1\"};<br>\n  writeln (@{make_string} @{term \"1 + 1\"})<br>\n›</p>\n<p>cheers</p>\n<p>chris</p>",
        "id": 294324523,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660928085
    }
]