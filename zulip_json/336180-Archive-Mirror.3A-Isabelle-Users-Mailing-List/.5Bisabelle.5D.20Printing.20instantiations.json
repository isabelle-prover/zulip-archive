[
    {
        "content": "<p>From: Steve W &lt;<a href=\"mailto:s.wong.731@gmail.com\">s.wong.731@gmail.com</a>&gt;<br>\nHi all,</p>\n<p>I was wondering whether it's possible to print out the instantiations<br>\nreturned by Thm.first_order_match. Since it returns the type (ctyp * ctyp)<br>\nlist * (cterm * cterm) list, is there a way to convert this type to a<br>\nstring? I just want to test it to see what the instantiations look like.<br>\nShould I actually bother?</p>\n<p>Thanks<br>\nSteve</p>",
        "id": 294110378,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660836619
    },
    {
        "content": "<p>From: Florian Haftmann &lt;<a href=\"mailto:florian.haftmann@informatik.tu-muenchen.de\">florian.haftmann@informatik.tu-muenchen.de</a>&gt;<br>\nHi Steve,</p>\n<p>for explorative purpose the ML function PolyML.makestring does a good<br>\njob.  Any serious printing of logical entities requires weaving the<br>\ndesired appearance on the ML level, e.g.</p>\n<p>fn ts =&gt; commas (map (Syntax.string_of_term @{context}) ts)</p>\n<p>for printing a list of terms as string.  In the system those string<br>\nconversions are used rarely, more likely output is assembled by means of<br>\npretty printer entities (type Pretty.T).</p>\n<p>fn ts =&gt; Pretty.commas (map (Syntax.pretty_term @{context}) ts)</p>\n<p>See the pretty.ML, library.ML, and syntax.ML modules for available<br>\ncombinators.</p>\n<p>Hope this helps,<br>\n    Florian<br>\n<a href=\"/user_uploads/14278/aDl6ma3qZPCpk8xIVmLXiWkd/signature.asc\">signature.asc</a></p>",
        "id": 294110407,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660836626
    },
    {
        "content": "<p>From: Steve W &lt;<a href=\"mailto:s.wong.731@gmail.com\">s.wong.731@gmail.com</a>&gt;<br>\nThanks. I have another question which may require working at the ML level:<br>\nIf some lemma can be proved at the Isar level, are there ways to extract out<br>\nthe instantiations of each term in the lemma? Does the proof of the lemma<br>\nneed to be at the ML level as well?</p>\n<p>Thanks<br>\nSteve</p>\n<p>On Tue, Jun 15, 2010 at 9:17 AM, Florian Haftmann &lt;<br>\n<a href=\"mailto:florian.haftmann@informatik.tu-muenchen.de\">florian.haftmann@informatik.tu-muenchen.de</a>&gt; wrote:</p>\n<blockquote>\n<p>Hi Steve,</p>\n<blockquote>\n<p>I was wondering whether it's possible to print out the instantiations<br>\nreturned by Thm.first_order_match. Since it returns the type (ctyp *\nctyp)<br>\nlist * (cterm * cterm) list, is there a way to convert this type to a<br>\nstring? I just want to test it to see what the instantiations look like.<br>\nShould I actually bother?</p>\n</blockquote>\n<p>for explorative purpose the ML function PolyML.makestring does a good<br>\njob.  Any serious printing of logical entities requires weaving the<br>\ndesired appearance on the ML level, e.g.</p>\n<p>fn ts =&gt; commas (map (Syntax.string_of_term @{context}) ts)</p>\n<p>for printing a list of terms as string.  In the system those string<br>\nconversions are used rarely, more likely output is assembled by means of<br>\npretty printer entities (type Pretty.T).</p>\n<p>fn ts =&gt; Pretty.commas (map (Syntax.pretty_term @{context}) ts)</p>\n<p>See the pretty.ML, library.ML, and syntax.ML modules for available<br>\ncombinators.<br>\n</p>\n</blockquote>\n<p>Thanks.</p>\n<blockquote>\n<p>Hope this helps,<br>\n       Florian</p>\n<p>--</p>\n<p>Home:<br>\n<a href=\"http://www.in.tum.de/~haftmann\">http://www.in.tum.de/~haftmann</a></p>\n<p>PGP available:</p>\n<p><a href=\"http://home.informatik.tu-muenchen.de/haftmann/pgp/florian_haftmann_at_informatik_tu_muenchen_de\">http://home.informatik.tu-muenchen.de/haftmann/pgp/florian_haftmann_at_informatik_tu_muenchen_de</a></p>\n</blockquote>",
        "id": 294110433,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660836637
    },
    {
        "content": "<p>From: Florian Haftmann &lt;<a href=\"mailto:florian.haftmann@informatik.tu-muenchen.de\">florian.haftmann@informatik.tu-muenchen.de</a>&gt;<br>\nHi Steve,</p>\n<p>I am a little bit lost since I don't understand what you want.  A lemma<br>\nproposition \"as it is\" is just a term on its own.  So what do you mean<br>\nexactly by \"instantiation of each term in the lemma\"?  Have you got an<br>\nexample Isar snippet?</p>\n<p>Cheers,<br>\n    Florian<br>\n<a href=\"/user_uploads/14278/OnB6EBa4dGUvGDYZUwQZhAuZ/signature.asc\">signature.asc</a></p>",
        "id": 294110452,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660836644
    },
    {
        "content": "<p>From: Florian Haftmann &lt;<a href=\"mailto:florian.haftmann@informatik.tu-muenchen.de\">florian.haftmann@informatik.tu-muenchen.de</a>&gt;<br>\nHi Steve,</p>\n<p>to inspect proofs, you have to use the image \"HOL-Proofs\" (containing<br>\nproof terms) instead of \"HOL\" and turn proof objects on by selecting<br>\n\"Full proofs\" from the Isabelle settings menu.</p>\n<p>Hope this helps,<br>\n    Florian<br>\n<a href=\"/user_uploads/14278/GoKhSeDz9oV_DNKobYDNlZgy/signature.asc\">signature.asc</a></p>",
        "id": 294110461,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660836650
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nActually, in the still official Isabelle2009-1 distribution you only need <br>\nto enable \"Full proofs\", because the HOL image contains full proofs <br>\nalready.</p>\n<p>For the coming Isabelle2009-2 we had to give up that convenience, because <br>\nHOL proofs have grown too fat, so there will be the separate HOL-Proofs <br>\nimage that has to be build manually.</p>\n<p>Makarius</p>",
        "id": 294110477,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660836656
    },
    {
        "content": "<p>From: Lawrence Paulson &lt;<a href=\"mailto:lp15@cam.ac.uk\">lp15@cam.ac.uk</a>&gt;<br>\nNothing ever changes. The prohibitive size of proof terms is the reason Robin Milner invented the LCF approach in the first place. The machine he was using had about 1 MB of memory.<br>\nLarry</p>",
        "id": 294110494,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660836662
    },
    {
        "content": "<p>From: Randy Pollack &lt;<a href=\"mailto:rpollack@inf.ed.ac.uk\">rpollack@inf.ed.ac.uk</a>&gt;<br>\nThere has been much work on reducing the size of proof terms by the  <br>\nproof carrying code community.</p>\n<p>Randy<br>\n--<br>\nQuoting Lawrence Paulson &lt;<a href=\"mailto:lp15@cam.ac.uk\">lp15@cam.ac.uk</a>&gt;:</p>\n<p>-- <br>\nThe University of Edinburgh is a charitable body, registered in<br>\nScotland, with registration number SC005336.</p>",
        "id": 294110532,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660836674
    },
    {
        "content": "<p>From: Florian Haftmann &lt;<a href=\"mailto:florian.haftmann@informatik.tu-muenchen.de\">florian.haftmann@informatik.tu-muenchen.de</a>&gt;<br>\nHi Steve,</p>\n<p>how automated proof tools actually accomplish the proof is somehow<br>\nmagic; if you want to specify single proof steps explicitly, restrict<br>\nyourself to proper Isar proofs with methods rule, default etc., see also<br>\nthe tutorial on Isar.  For your example, this could read e.g.</p>\n<p>definition c :: real where<br>\n  ax1: \"c = 0\"</p>\n<p>lemma test: \"EX x::real. x = 0\"<br>\nproof -<br>\n  from ax1 show \"EX x::real. x = 0\" ..<br>\nqed</p>\n<p>Note also that auto won't ever use ax1 in your proof: you need a type<br>\nconstraint on the existential x, otherwise ax1 is not sufficient.</p>\n<p>Hope this helps,<br>\n    Florian<br>\n<a href=\"/user_uploads/14278/O0gL0qCstNDIdgMeqLBXro5L/signature.asc\">signature.asc</a></p>",
        "id": 294110570,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660836687
    },
    {
        "content": "<p>From: Steve W &lt;<a href=\"mailto:s.wong.731@gmail.com\">s.wong.731@gmail.com</a>&gt;<br>\nOn Fri, Jun 18, 2010 at 8:13 AM, Florian Haftmann &lt;<br>\n<a href=\"mailto:florian.haftmann@informatik.tu-muenchen.de\">florian.haftmann@informatik.tu-muenchen.de</a>&gt; wrote:</p>\n<blockquote>\n<p>Hi Steve,</p>\n<p>how automated proof tools actually accomplish the proof is somehow<br>\nmagic; if you want to specify single proof steps explicitly, restrict<br>\nyourself to proper Isar proofs with methods rule, default etc., see also<br>\nthe tutorial on Isar.  For your example, this could read e.g.</p>\n<p>definition c :: real where<br>\n ax1: \"c = 0\"</p>\n<p>lemma test: \"EX x::real. x = 0\"<br>\nproof -<br>\n from ax1 show \"EX x::real. x = 0\" ..<br>\nqed<br>\n</p>\n</blockquote>\n<p>Thanks. Indeed. If I have something slightly less trivial:</p>\n<p>consts<br>\nf :: \"real =&gt; real\"<br>\nd :: real</p>\n<p>axioms<br>\nax1: \"f d = 0\"</p>\n<p>lemma test: \"EX (F::real=&gt;real) x. F x = 0\"<br>\nproof -<br>\n from ax1 show ?thesis<br>\n   ..</p>\n<p>How come the 'default proof' can't try to instantiate 'F' to 'f' and 'x' to<br>\n'd'? I presume there are no rules declared in the current context of this<br>\nproof and of your proof, so what exactly does '..' or 'by rule' actually<br>\napply here and in your proof?</p>\n<blockquote>\n<p>Note also that auto won't ever use ax1 in your proof: you need a type<br>\nconstraint on the existential x, otherwise ax1 is not sufficient.<br>\n</p>\n</blockquote>\n<p>But doesn't Isabelle support polymorphism? If so, types shouldn't need to be<br>\nexplicitly declared, right?</p>\n<p>Thanks again.<br>\nSteve</p>\n<blockquote>\n<p>Hope this helps,<br>\n       Florian</p>\n<p>--</p>\n<p>Home:<br>\n<a href=\"http://www.in.tum.de/~haftmann\">http://www.in.tum.de/~haftmann</a></p>\n<p>PGP available:</p>\n<p><a href=\"http://home.informatik.tu-muenchen.de/haftmann/pgp/florian_haftmann_at_informatik_tu_muenchen_de\">http://home.informatik.tu-muenchen.de/haftmann/pgp/florian_haftmann_at_informatik_tu_muenchen_de</a></p>\n</blockquote>",
        "id": 294110634,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660836705
    },
    {
        "content": "<p>From: Florian Haftmann &lt;<a href=\"mailto:florian.haftmann@informatik.tu-muenchen.de\">florian.haftmann@informatik.tu-muenchen.de</a>&gt;<br>\nHi Steve,</p>\n<blockquote>\n<p>How come the 'default proof' can't try to instantiate 'F' to 'f' and 'x' to<br>\n'd'? I presume there are no rules declared in the current context of this<br>\nproof and of your proof, so what exactly does '..' or 'by rule' actually<br>\napply here and in your proof?</p>\n</blockquote>\n<p>The \"..\" proof indeed defaults to (rule exI) in the example.  But rule<br>\ndoes only perform one resolution step, hence you have to apply it twice.<br>\n Here the proof is given by an apply scripts:</p>\n<p>axiomatization f :: \"real =&gt; real\" and d :: real where<br>\n  ax1: \"f d = 0\"</p>\n<p>lemma test1: \"EX (F::real=&gt;real) x. F x = 0\"<br>\napply (rule exI)<br>\napply (rule exI)<br>\napply (rule ax1)<br>\ndone</p>\n<p>In Isar the matter is a little bit difficult: we cannot write</p>\n<p>from <code>EX x. ...</code> have <code>EX y x. ...</code></p>\n<p>since the \"EX x. ...\" fact would trigger existential elimination.  So we<br>\nmust write it as backward proof:</p>\n<p>lemma test2: \"EX (F::real=&gt;real) x. F x = 0\"<br>\nproof -<br>\n  from ax1 have *: \"EX x. f x = 0\" by (rule exI)<br>\n  show ?thesis by (rule exI) (rule *)<br>\nqed</p>\n<p>This looks not so beautiful but in practice such chained existential<br>\nintroduction would be accomplished e.g. by blast.</p>\n<p>The details can be found in the tutorial, chapter \"The rules of the game\".</p>\n<blockquote>\n<p>But doesn't Isabelle support polymorphism? If so, types shouldn't need to be<br>\nexplicitly declared, right?</p>\n</blockquote>\n<p>These are two different things: polymorphism vs. type inference.  Type<br>\ninference assigns most general types, which may be more general than<br>\nactually wanted.</p>\n<p>Hope this helps,<br>\n    Florian</p>",
        "id": 294110653,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660836711
    },
    {
        "content": "<p>From: Steve W &lt;<a href=\"mailto:s.wong.731@gmail.com\">s.wong.731@gmail.com</a>&gt;<br>\nHi Florian,</p>\n<p>On Mon, Jun 21, 2010 at 7:55 AM, Florian Haftmann &lt;<br>\n<a href=\"mailto:florian.haftmann@informatik.tu-muenchen.de\">florian.haftmann@informatik.tu-muenchen.de</a>&gt; wrote:</p>\n<blockquote>\n<p>This looks not so beautiful but in practice such chained existential<br>\nintroduction would be accomplished e.g. by blast.</p>\n<p>The details can be found in the tutorial, chapter \"The rules of the game\".<br>\n</p>\n</blockquote>\n<p>Thanks. Your explanation is very helpful.</p>\n<blockquote>\n<blockquote>\n<p>But doesn't Isabelle support polymorphism? If so, types shouldn't need to<br>\nbe<br>\nexplicitly declared, right?</p>\n</blockquote>\n<p>These are two different things: polymorphism vs. type inference.  Type<br>\ninference assigns most general types, which may be more general than<br>\nactually wanted.</p>\n<p>I see. Are there other ways to prevent type inference from assigning types<br>\nmore general than wanted beside explicitly giving F a specific type?<br>\n Ideally, I'd like to existentially quantify over the type of F (and x), but<br>\nI think Isabelle/HOL doesn't support quantification over types.</p>\n</blockquote>\n<p>Thanks,<br>\nSteve</p>\n<blockquote>\n<p>Hope this helps,<br>\n       Florian</p>\n<p>--</p>\n<p>Home:<br>\n<a href=\"http://www.in.tum.de/~haftmann\">http://www.in.tum.de/~haftmann</a></p>\n<p>PGP available:</p>\n<p><a href=\"http://home.informatik.tu-muenchen.de/haftmann/pgp/florian_haftmann_at_informatik_tu_muenchen_de\">http://home.informatik.tu-muenchen.de/haftmann/pgp/florian_haftmann_at_informatik_tu_muenchen_de</a></p>\n</blockquote>",
        "id": 294110779,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660836745
    },
    {
        "content": "<p>From: Michael Chan &lt;<a href=\"mailto:mchan@inf.ed.ac.uk\">mchan@inf.ed.ac.uk</a>&gt;<br>\nOn 17/06/10 09:00, Florian Haftmann wrote:</p>\n<blockquote>\n<p>Hi Steve,</p>\n<blockquote>\n<p>lemma test: \"EX x. F x&lt;  0\"</p>\n<p>How can I extract the instantiation of the variable x? I've tried adding<br>\nfull_prf; after show ?thesis with apply auto, but I keep getting an<br>\nerror saying 'minimal proof object'. That said, I actually would like to<br>\nobtain the internal representation of the instantiation instead. In<br>\nessence, I want to find a way to know that 'x' in the lemma is<br>\ninstantiated to 'c' and obtain the internal representation of it.</p>\n</blockquote>\n<p>to inspect proofs, you have to use the image \"HOL-Proofs\" (containing<br>\nproof terms) instead of \"HOL\" and turn proof objects on by selecting<br>\n\"Full proofs\" from the Isabelle settings menu.<br>\n</p>\n</blockquote>\n<p>On a related question, instead of parsing the full proof and take out <br>\nthe interesting bits, are there ML functions for directly obtaining the <br>\ninstantiation of a variable in a proof?</p>\n<p>Michael</p>\n<blockquote>\n<p>Hope this helps,<br>\n  Florian</p>\n</blockquote>",
        "id": 294110919,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660836792
    },
    {
        "content": "<p>From: Florian Haftmann &lt;<a href=\"mailto:florian.haftmann@informatik.tu-muenchen.de\">florian.haftmann@informatik.tu-muenchen.de</a>&gt;<br>\nHi Michael,</p>\n<p>I am uncertain whether I fully understand your question;  there is no<br>\nway to avoid full proof terms in order to find out instantiations.</p>\n<p>Hope this helps,<br>\n    Florian<br>\n<a href=\"/user_uploads/14278/vdqH0ROHtKr8jDuVpoT5UOXB/signature.asc\">signature.asc</a></p>",
        "id": 294111214,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660836883
    }
]