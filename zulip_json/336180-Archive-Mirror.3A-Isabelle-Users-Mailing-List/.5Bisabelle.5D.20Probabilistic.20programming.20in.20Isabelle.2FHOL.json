[
    {
        "content": "<p>From: Jose Manuel Rodriguez Caballero &lt;<a href=\"mailto:jose.manuel.rodriguez.caballero@ut.ee\">jose.manuel.rodriguez.caballero@ut.ee</a>&gt;<br>\nDear Isabelle users,<br>\n  Next week I will be in a course of probabilistic programming [2]. I think that it will be a great learning experience to combine this theory with practice in Isabelle. So, I would like to ask how could probabilistic programming be done in Isabelle? Is there any tutorial?</p>\n<p>My guess is that I need to use ML and a random number generator, but maybe there is an easier way (without ML). I know the book [1], which is an introduction to ML, but I have not started using ML in a systematic way yet.</p>\n<p>Sincerely yours,<br>\nJos√© M.</p>\n<p>Reference:<br>\n[1] Paulson, Lawrence C. ML for the Working Programmer. Cambridge University Press, 1996.<br>\nURL = <a href=\"https://www.cl.cam.ac.uk/~lp15/MLbook/\">https://www.cl.cam.ac.uk/~lp15/MLbook/</a></p>\n<p>[2] Joost-Pieter Katoen, Foundations of probabilistic programming<br>\nURL = <a href=\"http://cs.ioc.ee/ewscs/2020/index.php?page=katoen\">http://cs.ioc.ee/ewscs/2020/index.php?page=katoen</a></p>",
        "id": 294822315,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661242752
    },
    {
        "content": "<p>From: Manuel Eberl &lt;<a href=\"mailto:eberlm@in.tum.de\">eberlm@in.tum.de</a>&gt;<br>\nIt's not quite clear to me what you want to achieve. Isabelle is not a<br>\nprogramming language as such, but a logical system (okay, the code<br>\ngenerator sort of allows you to you use it in a similar fashion as a<br>\nprogramming language).</p>\n<p>You can write down probabilistic algorithms in Isabelle using the Giry<br>\nMonad, either on measure spaces or on \"Probability Mass Functions\"<br>\n(PMFs). The latter is more restricted (it only supports distributions<br>\nwith discrete support), but much more pleasant to use since you don't<br>\nhave to worry about measurability.</p>\n<p>There is currently no way to execute such algorithms in the way you<br>\nthink (e.g. sampling a single random result from them) or to obtain<br>\nexecutable code for them. Doing this would probably require some<br>\nextension to the code generator (similarly to Imperative HOL). We<br>\nthought about this occasionally in the past, but nobody did it yet. Any<br>\nsuch implementation would, however, necessarily be somewhat unfaithful<br>\nin the sense that when you reason about these things in Isabelle, you<br>\nassume a perfectly random distribution, whereas translating the<br>\nalgorithms to a real programming language with some pseudo-random number<br>\ngenerator will never be able to provide that. Therefore, some properties<br>\nthat you proved abstractly might not hold anymore.</p>\n<p>What you can, however, do in most cases is to execute the algorithm to<br>\nobtain the entire probability distribution of results. This also allows<br>\nyou to compute expectation, standard deviation etc. Of course, this is<br>\nusually much more expensive than sampling a single result, but it can<br>\nstill be useful for experiments, and it means that QuickCheck works and<br>\nyou can sometimes get counterexamples.</p>\n<p>I don't think there are any tutorials, but there are a number of AFP<br>\nentries with relatively simple, self-contained examples:</p>\n<p><a href=\"https://www.isa-afp.org/entries/Fisher_Yates.html\">https://www.isa-afp.org/entries/Fisher_Yates.html</a><br>\n<a href=\"https://www.isa-afp.org/entries/Quick_Sort_Cost.html\">https://www.isa-afp.org/entries/Quick_Sort_Cost.html</a><br>\n<a href=\"https://www.isa-afp.org/entries/Random_BSTs.html\">https://www.isa-afp.org/entries/Random_BSTs.html</a><br>\n<a href=\"https://www.isa-afp.org/entries/Randomised_BSTs.html\">https://www.isa-afp.org/entries/Randomised_BSTs.html</a><br>\n<a href=\"https://www.isa-afp.org/entries/Treaps.html\">https://www.isa-afp.org/entries/Treaps.html</a><br>\n<a href=\"https://www.isa-afp.org/entries/Skip_Lists.html\">https://www.isa-afp.org/entries/Skip_Lists.html</a></p>\n<p>And there is Andreas Lochbihler's very advanced AFP entry on CryptHOL,<br>\nwhich uses probabilistic reasoning in Isabelle to prove properties of<br>\ncryptographic systems:</p>\n<p><a href=\"https://www.isa-afp.org/entries/CryptHOL.html\">https://www.isa-afp.org/entries/CryptHOL.html</a></p>\n<p>All of these do /not/ use an actual deeply-embedded programming language<br>\nwith a formal semantics, but rather they directly describe these<br>\nalgorithms as probability distributions in the logic and reason about<br>\nthem mathematically (as opposed to a program logic whose correctness was<br>\nproven seperately).</p>\n<p>There is also one with a deeply-embedded probabilistic programming<br>\nlanguage, which is the more usual approach when working on paper:</p>\n<p><a href=\"https://www.isa-afp.org/entries/pGCL.html\">https://www.isa-afp.org/entries/pGCL.html</a></p>\n<p>Related publications:</p>\n<p>Verified Analysis of Random Binary Tree Structures (Eberl et al.), DOI:<br>\n10.1007/s10817-020-09545-0 (open access)</p>\n<p>Formalizing Constructive Cryptography using CryptHOL (Lochbihler et<br>\nal.), DOI: 10.1109/CSF.2019.00018 (preprint at<br>\n<a href=\"http://www.andreas-lochbihler.de/pub/lochbihler2019csf.pdf\">http://www.andreas-lochbihler.de/pub/lochbihler2019csf.pdf</a> )</p>\n<p>Cheers,</p>\n<p>Manuel</p>",
        "id": 294822319,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661242755
    }
]