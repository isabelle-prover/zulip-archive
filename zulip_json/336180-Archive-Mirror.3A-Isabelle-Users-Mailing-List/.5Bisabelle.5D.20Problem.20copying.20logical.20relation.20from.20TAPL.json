[
    {
        "content": "<p>From: Clarissa Littler &lt;<a href=\"mailto:clarissa.littler@gmail.com\">clarissa.littler@gmail.com</a>&gt;<br>\nHi,<br>\nSo just as an exercise I was going to formalize ch 12 of Types and<br>\nProgramming Languages and, well, I was defining the inductive relation for<br>\nreducibility candidates as</p>\n<p>inductive R :: \"lam ⇒ ty ⇒ bool\" where<br>\n  Ra : \"⟦halts y; typing [] y A⟧ ⟹  R a A\" |<br>\n  RArr : \"⟦halts l; (∀ y. R y ty1 ⟶ R (App l y) ty2); typing [] l (Arr ty1<br>\nty2)⟧ ⟹ R l (Arr ty1 ty2)\"</p>\n<p>and I got the following error that I really don't know how to fix</p>\n<p>Proof failed.</p>\n<ol>\n<li>\n<p>⋀x y xa xb l ty1 ty2 ya.<br>\n       x (?x25 x y xa xb l ty1 ty2 ya) (?x26 x y xa xb l ty1 ty2 ya) ⟶<br>\n       y (?x25 x y xa xb l ty1 ty2 ya) (?x26 x y xa xb l ty1 ty2 ya) ⟹<br>\n       y ya ty1 ⟶ x ya ty1</p>\n</li>\n<li>\n<p>⋀x y xa xb l ty1 ty2 ya. x ≤ y ⟹ x (App l ya) ty2 ⟶ y (App l ya) ty2</p>\n</li>\n<li>⋀x y xa xb l ty1 ty2. x ≤ y ⟹ typing [] l (Arr ty1 ty2) ⟶ typing [] l<br>\n(Arr ty1 ty2)<br>\nThe error(s) above occurred for the goal statement⌂:<br>\nmono (λp x1 x2.<br>\n         (∃y. x1 = a ∧ x2 = A ∧ halts y ∧ typing [] y A) ∨<br>\n         (∃l ty1 ty2.<br>\n             x1 = l ∧<br>\n             x2 = Arr ty1 ty2 ∧ halts l ∧ (∀y. p y ty1 ⟶ p (App l y) ty2) ∧<br>\ntyping [] l (Arr ty1 ty2)))</li>\n</ol>\n<p>I'm guessing it's about negative recursion in the pre-condition of the RArr<br>\nrule, but that also seems to be exactly the definition that TAPL uses so<br>\nI'm not sure what's what.</p>\n<p>Cheers,<br>\nClarissa</p>",
        "id": 294321967,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660927195
    },
    {
        "content": "<p>From: Christian Urban &lt;<a href=\"mailto:christian.urban@kcl.ac.uk\">christian.urban@kcl.ac.uk</a>&gt;<br>\nHi Clarissa,</p>\n<p>Yes, indeed the negative occurrence is the stumbling block<br>\nfor the inductive command. What you can do instead is define <br>\nthe candidates by recursion over the type. Right now I am not <br>\nhaving TAPL available for the details, but I remember I followed <br>\nthe strong normalisation proof in Girard's Proofs &amp; Types book.<br>\nMaybe the file</p>\n<p>isabelle/src/HOL/Nominal/Examples/SN.thy</p>\n<p>where the candidates are defined around line 228 is of help to you. <br>\nYou  possibly need to ignore the nominal stuff there that is not really<br>\nimportant for the candidates definition. If I remember correctly<br>\nalso somewhere in the sources or AFP is a similar proof by Stefan<br>\nBerghofer providing a definition for candidates. </p>\n<p>Hope this helps,<br>\nChristian</p>",
        "id": 294321978,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660927201
    },
    {
        "content": "<p>From: Clarissa Littler &lt;<a href=\"mailto:clarissa.littler@gmail.com\">clarissa.littler@gmail.com</a>&gt;<br>\nAh, that makes perfect sense. The \"negativeness\" in the definition of<br>\nreducibility candidates just becomes recursive calls at a smaller type,<br>\nwhich primrec/fun will accept with no problem.</p>\n<p>Thanks!</p>",
        "id": 294322040,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660927213
    }
]