[
    {
        "content": "<p>From: Omar Montaño Rivas &lt;<a href=\"mailto:omar.montano@upslp.edu.mx\">omar.montano@upslp.edu.mx</a>&gt;<br>\nHi,</p>\n<p>Does anyone know why the following goal loops after simplification (simp)?<br>\nIs there a way to avoid non-termination, e.g. by eliminating a rewrite rule<br>\nor a congruence rule from the simpset? I have tried changing the value of<br>\nlinarith_split_limit but with no success.</p>\n<p>Thanks,<br>\nOmar.</p>\n<p>declare [[linarith_split_limit = 0]]</p>\n<p>lemma \"∃f g. ∀(x::nat) y. f x y = (if 0 = y then if y = 0 then f 0 y else<br>\nif 0 - 1 - 1 = y then y else y else y) ∧<br>\n                g x y =<br>\n                (if y - 1 - 1 =<br>\n                    (if y - 1 - 1 =<br>\n                        (if 0 = y - 1 then y - 1 else (if y = (if y - 1 = y</p>\n<ul>\n<li>1 then y - 1 else y - 1) - 1 - 1 - 1 then y else y) - 1) - 1 - 1 - 1<br>\n                     then if y = (if y = y - 1 - 1 then y - 1 else y) - 1 -<br>\n1 - 1 then y else y else y - 1) -<br>\n                    1 -<br>\n                    1<br>\n                 then x else y)\"<br>\nusing [[simp_trace]] apply simp</li>\n</ul>",
        "id": 294672665,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661173869
    },
    {
        "content": "<p>From: Omar Montano Rivas &lt;<a href=\"mailto:omarmrivas@gmail.com\">omarmrivas@gmail.com</a>&gt;<br>\nHi,</p>\n<p>Does anyone know why the following goal loops after simplification (simp)?<br>\nIs there a way to avoid non-termination, e.g. by eliminating a rewrite rule<br>\nor a congruence rule from the simpset? I have tried changing the value of<br>\nlinarith_split_limit but with no success.</p>\n<p>Thanks,<br>\nOmar.</p>\n<p>declare [[linarith_split_limit = 0]]</p>\n<p>lemma \"∃f g. ∀(x::nat) y. f x y = (if 0 = y then if y = 0 then f 0 y else<br>\nif 0 - 1 - 1 = y then y else y else y) ∧<br>\n                g x y =<br>\n                (if y - 1 - 1 =<br>\n                    (if y - 1 - 1 =<br>\n                        (if 0 = y - 1 then y - 1 else (if y = (if y - 1 = y</p>\n<ul>\n<li>1 then y - 1 else y - 1) - 1 - 1 - 1 then y else y) - 1) - 1 - 1 - 1<br>\n                     then if y = (if y = y - 1 - 1 then y - 1 else y) - 1 -<br>\n1 - 1 then y else y else y - 1) -<br>\n                    1 -<br>\n                    1<br>\n                 then x else y)\"<br>\nusing [[simp_trace]] apply simp</li>\n</ul>",
        "id": 294672697,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661173880
    },
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\nFrankly, it is hard to say. Maybe the if-splits created some premises that <br>\nconstitute a nonterminating set of equations? That's heuristic proof automation <br>\nfor you.</p>\n<p>The following proof script simplifies the goal completely. Although the <br>\nresulting goal is unenlightening (for me), the script may be of use:</p>\n<p>apply(split if_split)<br>\napply(split if_split)<br>\napply (simp split del: if_split)<br>\napply(split if_split)<br>\napply (simp split del: if_split)<br>\napply(split if_split)<br>\napply (simp split del: if_split)</p>\n<p>Here is another gadget for tweaking the simplifier:</p>\n<p>using [[simp_depth_limit = 3]] apply simp</p>\n<p>This does the job. A second call to simp (which is not influenced by that <br>\n\"using\") fails, showing that the result is fully simplified.</p>\n<p>Tobias<br>\n<a href=\"/user_uploads/14278/EJWCI6iGjePLCRJIpKk53XTd/smime.p7s\">smime.p7s</a></p>",
        "id": 294672717,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661173887
    },
    {
        "content": "<p>From: Omar Montaño Rivas &lt;<a href=\"mailto:omar.montano@upslp.edu.mx\">omar.montano@upslp.edu.mx</a>&gt;<br>\nThanks!</p>\n<p>Good to know how to control if splits during simplification.</p>\n<p>Omar.</p>",
        "id": 294672750,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661173898
    }
]