[
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nSee the \"implementation\" manual section \"2.3.2 Auxiliary connectives\";<br>\nit also refers to Section 2.2 about \"hidden polymorphism\", which is the<br>\nproblem being solved here. Section \"2.3.3 Sort hypotheses\" is also related.</p>\n<p>There is a much longer story behind all that, going back to early<br>\nversions of Gordon-style HOL that allowed such \"hidden polymorphism\" in<br>\ndefinitions that were not definitions. That caused a total existence<br>\nfailure of the logic.</p>\n<p>Makarius</p>",
        "id": 294673777,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661174230
    },
    {
        "content": "<p>From: Lars-Henrik Eriksson &lt;<a href=\"mailto:lhe@it.uu.se\">lhe@it.uu.se</a>&gt;<br>\nHi,</p>\n<p>I'm having a problem with Isabelle 2016 which I've minimised to the following file. There seems to be something particular in how Isabelle handles types appearing in a definition but not in any arguments to the thing being defined.</p>\n<p>theory Test<br>\n  imports<br>\n    HOL<br>\n  begin</p>\n<p>definition foo :: \"bool\" (\"f\" 50) where<br>\n    \"foo ≡ ∀x :: 'a. True\"</p>\n<p>abbreviation bar :: \"bool\" where<br>\n    \"bar ≡ foo\"</p>\n<p>lemma \"foo\"<br>\n    sorry<br>\n  end</p>\n<p>The definition gives the output</p>\n<p>consts<br>\n    foo :: \"bool\" <br>\n   Additional type variable(s) in specification of \"foo\": 'a<br>\n   Dropping mixfix syntax (\"foo\" [] 50)</p>\n<p>The abbreviation and lemma both give the output</p>\n<p>Type unification failed: Clash of types \"_ ⇒ _\" and \"bool\"</p>\n<p>Type error in application: incompatible operand type</p>\n<p>Operator:  op ≡ bar :: bool ⇒ prop<br>\n   Operand:   foo :: ??'a itself ⇒ bool</p>\n<p>Why is the mixfix syntax dropped?<br>\nWhy has foo -- which was defined to be a constant and this was confirmed by the output -- become a function?</p>\n<p>Is there a way to get the mixfix syntax and abbreviation to work?</p>\n<p>Thanks,</p>\n<p>Lars-Henrik Eriksson, PhD, Senior Lecturer<br>\nComputing Science, Dept. of Information Technology, Uppsala University, Sweden</p>",
        "id": 294675282,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661174752
    },
    {
        "content": "<p>From: \"Thiemann, Rene\" &lt;<a href=\"mailto:Rene.Thiemann@uibk.ac.at\">Rene.Thiemann@uibk.ac.at</a>&gt;<br>\nDear Lars-Henrik,</p>\n<p>The problem is the implicit type ‘a in the definition of foo. To this end, Isabelle inserts a <br>\ndummy argument in the definition of foo of type (‘a itself). So your definition becomes</p>\n<p>definition foo' :: \"'a itself ⇒ bool\" where<br>\n  \"foo' _ ≡ ∀ x :: 'a. True”</p>\n<p>you also see this definition, if you perform a “print_theorems” after your definition of “foo”.</p>\n<p>Hope this helps,<br>\nRené</p>",
        "id": 294675335,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661174763
    }
]