[
    {
        "content": "<p>From: René Thiemann &lt;<a href=\"mailto:Rene.Thiemann@uibk.ac.at\">Rene.Thiemann@uibk.ac.at</a>&gt;<br>\nDear all,</p>\n<p>I recently tried to use the Scala code generator again, and stumbled over the following two problems:</p>\n<p>1) There are too few brackets: <br>\ndefinition problem <br>\n  where \"problem b opt \\&lt;equiv&gt; b \\&lt;or&gt; (case opt of<br>\n                 None \\&lt;Rightarrow&gt; True | Some _ \\&lt;Rightarrow&gt; False)\"</p>\n<p>export_code problem in Scala module_name Problem file \"Problem.scala\"</p>\n<p>yields </p>\n<p>object Problem {</p>\n<p>def problem[A](b: Boolean, opt: Option[A]): Boolean =<br>\n  b || opt match {<br>\n         case None =&gt; true<br>\n         case Some(_) =&gt; false<br>\n       }</p>\n<p>} /* object Problem */</p>\n<p>which does not compile, since it must be </p>\n<p>def problem[A](b: Boolean, opt: Option[A]): Boolean =<br>\n  b || (opt match {<br>\n         case None =&gt; true<br>\n         case Some(_) =&gt; false<br>\n       })</p>\n<p>} /* object Problem */</p>\n<p>I believe that this is easy to fix in the formatter.</p>\n<p>2) If I try to extract full IsaFoR, then an additional error occurs:</p>\n<p>Ceta.scala:4887: error: Implementation restriction: case classes cannot have more than 22 parameters.</p>\n<p>Googling a bit on this problem showed that the problem cannot be solved easily on the Scala-side:</p>\n<p>\"As a subclass of Product, case classes can't have more than 22 parameters<br>\nNo real workaround, except to stop abusing classes with this many params :)\"</p>\n<p>So, is there a solution on the code-generator side, or do I have to adapt my theories?</p>\n<p>Best regards,<br>\nRené</p>",
        "id": 294153400,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660850186
    },
    {
        "content": "<p>From: Florian Haftmann &lt;<a href=\"mailto:florian.haftmann@informatik.tu-muenchen.de\">florian.haftmann@informatik.tu-muenchen.de</a>&gt;<br>\nHi René,</p>\n<p>congratulations, you have found a bug!  To circumvent it, wait for the<br>\nnext Isabelle release or help yourself with something like</p>\n<p>code_const HOL.conj and HOL.disj<br>\n  (Scala \"!(_ &amp;&amp; _)\" and \"!(_ || _)\")</p>\n<p>Similar adjustion could be necessary for other infix operators.  See the<br>\nTutorial On Code Generation for details.</p>\n<p>Cheers,<br>\n    Florian<br>\n<a href=\"/user_uploads/14278/BBcXXr1STHYg7CmihSuMQypU/signature.asc\">signature.asc</a></p>",
        "id": 294153455,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660850215
    },
    {
        "content": "<p>From: Florian Haftmann &lt;<a href=\"mailto:florian.haftmann@informatik.tu-muenchen.de\">florian.haftmann@informatik.tu-muenchen.de</a>&gt;<br>\nHi René,</p>\n<p>Wow!  How does your logic specification and your Scala code look like?<br>\nMaybe something can be done by tweaking the specification…</p>\n<p>Florian<br>\n<a href=\"/user_uploads/14278/96KWjKd_hajoXGMFib7sLaVO/signature.asc\">signature.asc</a></p>",
        "id": 294153469,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660850221
    },
    {
        "content": "<p>From: René Thiemann &lt;<a href=\"mailto:rene.thiemann@uibk.ac.at\">rene.thiemann@uibk.ac.at</a>&gt;<br>\nThanks,<br>\nRené</p>",
        "id": 294153603,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660850278
    }
]