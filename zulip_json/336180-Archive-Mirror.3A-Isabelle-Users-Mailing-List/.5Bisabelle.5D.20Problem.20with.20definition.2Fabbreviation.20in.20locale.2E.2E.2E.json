[
    {
        "content": "<p>From: Peter Lammich &lt;<a href=\"mailto:peter.lammich@uni-muenster.de\">peter.lammich@uni-muenster.de</a>&gt;<br>\nHi all.</p>\n<p>I have a problem with a definition in a locale context, that causes<br>\nstrange errors when declaring other locales depending on that locale.<br>\nThe following example works well if the definition is done after the<br>\ndeclaration of the locale B.<br>\nHowever, if the definition is done before the declaration of B, I get<br>\nthe following error when trying to declare B:</p>\n<p>*** Type unification failed</p>\n<hr>\n<p>*** Cannot meet type constraint:</p>\n<hr>\n<p>*** Term:  empty :: 'a<br>\n*** Type:  's</p>\n<hr>\n<p>*** At command \"locale\".</p>\n<p>Even more surprisingly, I get the same error when using \"abbreviation\"<br>\ninstead of \"definition\".</p>\n<p>What is going on here? How to declare locale B correctly?</p>\n<p>Regards &amp; thanks in advance for any hints,<br>\n  Peter</p>\n<hr>\n<p>locale A =<br>\n  fixes a :: \"'s =&gt; 'x set\"<br>\n  fixes emp :: \"'s\"<br>\n  fixes ins :: \"'x =&gt; 's =&gt; 's\"<br>\n  assumes<br>\n  \"a (ins x s) = insert x (a s)\"<br>\n  \"a emp = {}\"</p>\n<p>-- \"This def. causes the next locale command to fail. If removed,<br>\neverything will work.\"<br>\ndefinition (in A) \"sng x == ins x emp\"</p>\n<p>locale B = A +<br>\n  constrains a :: \"'s =&gt; 'x set\"<br>\n  fixes m :: \"'x =&gt; 's =&gt; bool\"<br>\n  assumes \"m x s = (x : a s)\"</p>\n<p>-- \"If done here, everything is o.k.\"<br>\ndefinition (in A) \"sng x == ins x emp\"</p>",
        "id": 294081785,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660830927
    },
    {
        "content": "<p>From: Florian Haftmann &lt;<a href=\"mailto:florian.haftmann@informatik.tu-muenchen.de\">florian.haftmann@informatik.tu-muenchen.de</a>&gt;<br>\nHi Peter,</p>\n<p>it works if you explicitly constrain all fixes:</p>\n<blockquote>\n<p>locale B = A +<br>\n  constrains a :: \"'s =&gt; 'x set\"<br>\n      and emp :: \"'s\"<br>\n      and ins :: \"'x =&gt; 's =&gt; 's\"<br>\n  fixes m :: \"'x =&gt; 's =&gt; bool\"<br>\n  assumes \"m x s = (x : a s)\"</p>\n</blockquote>\n<p>I do not know the exact reason for this, but I suppose it has something<br>\nto do with the way constrain elements are handled by type inference.</p>\n<p>Florian<br>\n<a href=\"/user_uploads/14278/0ACWgl0u91qC90DQreQS0AK_/signature.asc\">signature.asc</a></p>",
        "id": 294081833,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660830946
    }
]