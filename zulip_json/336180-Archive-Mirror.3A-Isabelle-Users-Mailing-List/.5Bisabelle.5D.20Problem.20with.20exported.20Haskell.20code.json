[
    {
        "content": "<p>From: \"Thiemann, Rene\" &lt;<a href=\"mailto:Rene.Thiemann@uibk.ac.at\">Rene.Thiemann@uibk.ac.at</a>&gt;<br>\nDear all,</p>\n<p>the following Isabelle source demonstrates a problem with the code generator for Haskell.</p>\n<p>definition foo :: \"bool =&gt; bool =&gt; bool\" where <br>\n  \"foo x y = (let z = x in if z then undefined else y)\" </p>\n<p>definition bar where \"bar = (foo True True = foo True False)\"</p>\n<p>lemma bar_is_True: \"bar = True\" <br>\n  unfolding bar_def foo_def Let_def by simp</p>\n<p>export_code bar in Haskell  </p>\n<p>(* evaluating bar in Haskell yields False! *)</p>\n<p>(* the problem is that the generated code for \"foo\" is</p>\n<p>foo :: Bool -&gt; Bool -&gt; Bool;<br>\nfoo x y = let {<br>\n            False = x;<br>\n          } in y;</p>\n<p>which is in Haskell identical to</p>\n<p>foo x y = y  </p>\n<p>since the “False = x” pattern match is ignored</p>\n<p>*)</p>\n<p>Cheers,<br>\nRené</p>",
        "id": 294704128,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661180145
    },
    {
        "content": "<p>From: Lars Hupel &lt;<a href=\"mailto:hupel@in.tum.de\">hupel@in.tum.de</a>&gt;<br>\nHi Rene,</p>\n<p>this looks indeed suspicious. Here's the equivalent output for Scala:</p>\n<p>def foo(x: Boolean, y: Boolean): Boolean = {<br>\n     val false: Boolean = x;<br>\n     y<br>\n   }</p>\n<p>Compiling this yields:</p>\n<p>ROOT.scala:4: warning: match may not be exhaustive.<br>\nIt would fail on the following input: true<br>\n     val false: Boolean = x;<br>\n                          ^</p>\n<p>That is, this is a \"pattern match\" in disguise. So, the problem does not<br>\nseem to be isolated to Haskell.</p>\n<p>Cheers<br>\nLars</p>",
        "id": 294704137,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661180149
    },
    {
        "content": "<p>From: \"Thiemann, Rene\" &lt;<a href=\"mailto:Rene.Thiemann@uibk.ac.at\">Rene.Thiemann@uibk.ac.at</a>&gt;<br>\nHi Lars,</p>\n<p>However, execution of bar in Scala yields a runtime error as desired (which corresponds to invoking Isabelle’s “undefined”).<br>\nThis is in contrast to Haskell, where bar is executed without error and returns the Boolean False.</p>\n<p>Cheers,<br>\nRené</p>",
        "id": 294704167,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661180158
    },
    {
        "content": "<p>From: Florian Haftmann &lt;<a href=\"mailto:florian.haftmann@informatik.tu-muenchen.de\">florian.haftmann@informatik.tu-muenchen.de</a>&gt;<br>\nHi Rene,</p>\n<p>thanks for investigating this.</p>\n<p>The attached theory simplifies the example further and demonstrates that<br>\nit affects any case expression with just one clause.</p>\n<p>After studying <a href=\"https://wiki.haskell.org/Lazy_pattern_match\">https://wiki.haskell.org/Lazy_pattern_match</a> I came to the<br>\nconclusion that when generating code for Haskell let clauses cannot be<br>\nused for pattern matching, only local variable definitions.  I will dive<br>\ninto the code…</p>\n<p>Cheers,<br>\n    Florian<br>\n<a href=\"/user_uploads/14278/h8v2c8zDpVY3vE-q6uPIMYZB/Haskell.thy\">Haskell.thy</a><br>\n<a href=\"/user_uploads/14278/7ViChgvP2qyRffXi9V8ExNeo/signature.asc\">signature.asc</a></p>",
        "id": 294704234,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661180165
    },
    {
        "content": "<p>From: Florian Haftmann &lt;<a href=\"mailto:florian.haftmann@informatik.tu-muenchen.de\">florian.haftmann@informatik.tu-muenchen.de</a>&gt;<br>\nThe attached patch is currently in test.</p>\n<p>Florian<br>\n<a href=\"/user_uploads/14278/v2w9KGRzRfXCAb8XVyilZoRn/Haskell.thy\">Haskell.thy</a><br>\n<a href=\"/user_uploads/14278/plBJ8pVqk73EDipzBLq-OHAv/haskell\">haskell</a><br>\n<a href=\"/user_uploads/14278/eqWHh_RP_bjtda-dScRJejCG/signature.asc\">signature.asc</a></p>",
        "id": 294704366,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661180205
    },
    {
        "content": "<p>From: \"Thiemann, Rene\" &lt;<a href=\"mailto:Rene.Thiemann@uibk.ac.at\">Rene.Thiemann@uibk.ac.at</a>&gt;<br>\nDear Florian,</p>\n<p>thanks for the patch. According to CeTA I can inform you that there the patch<br>\nworks without problems, i.e., the export_code for CeTA works, compiles and behaves<br>\nas expected on examples.</p>\n<p>Cheers,<br>\nRené</p>",
        "id": 294704376,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661180211
    },
    {
        "content": "<p>From: Florian Haftmann &lt;<a href=\"mailto:florian.haftmann@informatik.tu-muenchen.de\">florian.haftmann@informatik.tu-muenchen.de</a>&gt;<br>\nThe problem will be finally resolved in the next Isabelle release.</p>\n<p>Cheers,<br>\n    Florian<br>\n<a href=\"/user_uploads/14278/KWbkZUe5mKUmMpNmeh6WGjGN/signature.asc\">signature.asc</a></p>",
        "id": 294710031,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661181861
    }
]