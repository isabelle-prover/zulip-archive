[
    {
        "content": "<p>From: \"Thiemann, Rene\" &lt;<a href=\"mailto:Rene.Thiemann@uibk.ac.at\">Rene.Thiemann@uibk.ac.at</a>&gt;<br>\nDear all,</p>\n<p>I currently have a problem defining certain functions where the internal tactics in the <br>\nfunction package fail.</p>\n<p>E.g., a quite minimalistic example is </p>\n<p>fun foo where<br>\n  \"foo (Suc n) = (let f = n in <br>\n     if f mod 3 = f then foo n else 0)\"<br>\n| \"foo 0 = Suc 0\"</p>\n<p>where Isabelle 2016 complains.</p>\n<p>Adapting it via „False or\"</p>\n<p>fun foo where<br>\n  \"foo (Suc n) = (let f = n in <br>\n     if False ∨ f mod 3 = f then foo n else 0)\"<br>\n| \"foo 0 = Suc 0\"</p>\n<p>is accepted, but interestingly, „True and“ is again not accepted.</p>\n<p>fun foo where<br>\n  \"foo (Suc n) = (let f = n in <br>\n     if True ∧ f mod 3 = f then foo n else 0)\"<br>\n| \"foo 0 = Suc 0\"</p>\n<p>Output:</p>\n<p>consts<br>\n  foo :: \"nat ⇒ 'a\" <br>\nTactic failed<br>\nThe error(s) above occurred for the goal statement⌂:<br>\n(⋀n x. x = n ⟹ True ∧ x mod 3 = x ⟹ P n (Suc n)) ⟹ foo_rel ≤ P <br>\nFound termination order: \"size &lt;<em>mlex</em>&gt; {}\"</p>\n<p>Cheers,<br>\nRené</p>",
        "id": 294671759,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661173599
    }
]