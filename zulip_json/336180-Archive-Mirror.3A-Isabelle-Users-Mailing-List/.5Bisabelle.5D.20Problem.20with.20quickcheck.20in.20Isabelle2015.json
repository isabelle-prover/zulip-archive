[
    {
        "content": "<p>From: Thomas Genet &lt;<a href=\"mailto:thomas.genet@irisa.fr\">thomas.genet@irisa.fr</a>&gt;<br>\nDear all Isabelle users,</p>\n<p>I have the following strange behavior of quickcheck on the following <br>\nsimple theory:</p>\n<hr>\n<p>datatype t= A | B \"(t list)\"</p>\n<p>value \"B [A,A]\"</p>\n<p>fun f:: \"t ⇒ bool\"<br>\nwhere<br>\n\"f _= True\"</p>\n<p>lemma \"f (x::t)= True\"<br>\nquickcheck<br>\nquickcheck [tester=narrowing]</p>\n<hr>\n<p>All the quickcheck calls fail. The last one fails with the following <br>\nerror message:</p>\n<p>Type unification failed: No type arity t :: narrowing</p>\n<p>Type error in application: incompatible operand type</p>\n<p>Operator:  ??.Quickcheck_Narrowing.ensure_testable :: ??'a ⇒ ??'a<br>\nOperand:   λx. equal_bool_inst.equal_bool (f x) True :: t ⇒ bool</p>\n<p>Note that the same example works fine with Isabelle2012.</p>\n<p>Thanks in advance for any hint,</p>\n<p>Best regards,</p>\n<p>Thomas</p>",
        "id": 294653122,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661166936
    },
    {
        "content": "<p>From: Lars Hupel &lt;<a href=\"mailto:hupel@in.tum.de\">hupel@in.tum.de</a>&gt;<br>\nDear Thomas,</p>\n<p>the \"datatype\" command has been replaced with a newer implementation since<br>\nIsabelle2012. That replacement also meant reimplementation of the old<br>\nfacilities. Unfortunately, not everything was/could be implemented. I've<br>\nstumbled over the same problem before*: Quickcheck generators will only be<br>\ninstalled for datatypes without nested recursion.</p>\n<p>Note that the old \"datatype\" command is still around:</p>\n<p>theory Scratch<br>\n  imports \"~~/src/HOL/Library/Old_Datatype\"<br>\n  begin</p>\n<p>old_datatype t= A | B \"(t list)\"</p>\n<p>fun f:: \"t &#8658; bool\" where \"f _= True\"</p>\n<p>lemma \"f (x::t)= True\"<br>\n  quickcheck</p>\n<p>There, the call succeeds. I wouldn't recommend using it, though.</p>\n<p>Cheers<br>\nLars</p>\n<ul>\n<li>see also Andreas Lochbihler's mail:<br>\n&lt;<a href=\"https://lists.cam.ac.uk/pipermail/cl-isabelle-users/2015-July/msg00061.html\">https://lists.cam.ac.uk/pipermail/cl-isabelle-users/2015-July/msg00061.html</a>&gt;</li>\n</ul>",
        "id": 294653307,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661167002
    },
    {
        "content": "<p>From: Jasmin Blanchette &lt;<a href=\"mailto:jasmin.blanchette@inria.fr\">jasmin.blanchette@inria.fr</a>&gt;<br>\nDear Lars, Thomas,</p>\n<blockquote>\n<p>the \"datatype\" command has been replaced with a newer implementation since<br>\nIsabelle2012.</p>\n</blockquote>\n<p>I guess Lars meant Isabelle2015.</p>\n<blockquote>\n<p>That replacement also meant reimplementation of the old<br>\nfacilities. Unfortunately, not everything was/could be implemented. I've<br>\nstumbled over the same problem before*: Quickcheck generators will only be<br>\ninstalled for datatypes without nested recursion.</p>\n</blockquote>\n<p>This is unfortunate. Having done the transition myself, I didn't realized I introduced this limitation (and the conversation between Andreas and Lars didn't wake me up). I will look into this.</p>\n<p>Cheers,</p>\n<p>Jasmin</p>",
        "id": 294653470,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661167073
    },
    {
        "content": "<p>From: Thomas Genet &lt;<a href=\"mailto:thomas.genet@irisa.fr\">thomas.genet@irisa.fr</a>&gt;<br>\nDear Lars and Jasmin,</p>\n<p>thank you for your answers.<br>\nThe old_datatype is, at least, a workaround that I can use for some time <br>\nuntil Jasmin successfully fix it ;-)</p>\n<p>Best regards,</p>\n<p>Thomas</p>",
        "id": 294653871,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661167205
    }
]