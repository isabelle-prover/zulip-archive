[
    {
        "content": "<p>From: Christoph Feller &lt;<a href=\"mailto:c_feller@informatik.uni-kl.de\">c_feller@informatik.uni-kl.de</a>&gt;<br>\nHallo,</p>\n<p>I got the same problem as before just at another place. This time I<br>\nsupply an actual subtrace. This part gets repeated over and over.<br>\nSimplifier depth is set to 3. Why do I think this trace is strange?<br>\nWell the simplifier tries to use the rule in the first line/block (of<br>\nthe trace). So it has to show both assumption. It instantiates ?s1 and<br>\n?st with the same value and then finds that it can simplify the second<br>\nassumption to False (see line/block six). But then the trace continues<br>\nwith \"succeeded\", with no indication why it succeeded and I don't want<br>\nit to - but I've no way to find the reason for this success.</p>\n<p>By the way, if I delete st_in_st_not_ref (see line/block five) from<br>\nthe simpset the simplifier doesn't loop.</p>\n<p>Can anyone make sense of this?</p>\n<p>[1]Applying instance of rewrite rule \"local.P.st_in_st_stypv\":<br>\n[| ?st1 st_in_prog P; (?s1, ?st1) : st_in_st |] ==&gt;<br>\nConcrete_AST_w_st.stypv P ?s1 ?v1 == Concrete_AST_w_st.stypv P ?st1<br>\n?v1</p>\n<p>[1]Trying to rewrite:<br>\n[| ?st1 st_in_prog P; ([n] v := T Unary unary_op exp, ?st1) : st_in_st|]<br>\n==&gt; Concrete_AST_w_st.stypv P [n] v := T Unary unary_op exp v ==<br>\nConcrete_AST_w_st.stypv P ?st1 v</p>\n<p>[2]SIMPLIFIER INVOKED ON THE FOLLOWING TERM:<br>\n?st1 st_in_prog P</p>\n<p>[2]SIMPLIFIER INVOKED ON THE FOLLOWING TERM:<br>\n([n] v := T Unary unary_op exp, [n] v := T Unary unary_op exp) : st_in_st</p>\n<p>[2]Applying instance of rewrite rule \"local.P.st_in_st_not_ref\":<br>\n(?st1, ?st1) : st_in_st == False</p>\n<p>[2]Rewriting:<br>\n([n] v := T Unary unary_op exp, [n] v := T Unary unary_op exp) :<br>\nst_in_st == False</p>\n<p>[1]SUCCEEDED<br>\nConcrete_AST_w_st.stypv P [n] v := T Unary unary_op exp v ==<br>\nConcrete_AST_w_st.stypv P [n] v := T Unary unary_op exp v</p>\n<p>Thanks,</p>\n<p>Christoph Feller</p>",
        "id": 294075106,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660828553
    },
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\nI suspect the problem is here:</p>\n<blockquote>\n<p>[1]Trying to rewrite:<br>\n[| ?st1 st_in_prog P; ([n] v := T Unary unary_op exp, ?st1) : st_in_st|]<br>\n==&gt; Concrete_AST_w_st.stypv P [n] v := T Unary unary_op exp v ==<br>\nConcrete_AST_w_st.stypv P ?st1 v</p>\n</blockquote>\n<p>You have a premise with an uninstantiated higher-order variable. The<br>\nsimplifier probably managed to instantiate ?st1 with something that<br>\nreturns False, eg %_ _. False.</p>\n<p>The simplifier is not predictable on rules with higher-order variables<br>\nin the premises that are not in the conclusion. You have given it the<br>\nlicense to replace such variables with anything...</p>\n<p>Tobias</p>\n<p>Christoph Feller schrieb:</p>\n<blockquote>\n<p>Hallo,</p>\n<p>I got the same problem as before just at another place. This time I<br>\nsupply an actual subtrace. This part gets repeated over and over.<br>\nSimplifier depth is set to 3. Why do I think this trace is strange?<br>\nWell the simplifier tries to use the rule in the first line/block (of<br>\nthe trace). So it has to show both assumption. It instantiates ?s1 and<br>\n?st with the same value and then finds that it can simplify the second<br>\nassumption to False (see line/block six). But then the trace continues<br>\nwith \"succeeded\", with no indication why it succeeded and I don't want<br>\nit to - but I've no way to find the reason for this success.</p>\n<p>By the way, if I delete st_in_st_not_ref (see line/block five) from<br>\nthe simpset the simplifier doesn't loop.</p>\n<p>Can anyone make sense of this?</p>\n<p>[1]Applying instance of rewrite rule \"local.P.st_in_st_stypv\":<br>\n[| ?st1 st_in_prog P; (?s1, ?st1) : st_in_st |] ==&gt;<br>\nConcrete_AST_w_st.stypv P ?s1 ?v1 == Concrete_AST_w_st.stypv P ?st1<br>\n?v1</p>\n<p>[1]Trying to rewrite:<br>\n[| ?st1 st_in_prog P; ([n] v := T Unary unary_op exp, ?st1) : st_in_st|]<br>\n==&gt; Concrete_AST_w_st.stypv P [n] v := T Unary unary_op exp v ==<br>\nConcrete_AST_w_st.stypv P ?st1 v</p>\n<p>[2]SIMPLIFIER INVOKED ON THE FOLLOWING TERM:<br>\n?st1 st_in_prog P</p>\n<p>[2]SIMPLIFIER INVOKED ON THE FOLLOWING TERM:<br>\n([n] v := T Unary unary_op exp, [n] v := T Unary unary_op exp) : st_in_st</p>\n<p>[2]Applying instance of rewrite rule \"local.P.st_in_st_not_ref\":<br>\n(?st1, ?st1) : st_in_st == False</p>\n<p>[2]Rewriting:<br>\n([n] v := T Unary unary_op exp, [n] v := T Unary unary_op exp) :<br>\nst_in_st == False</p>\n<p>[1]SUCCEEDED<br>\nConcrete_AST_w_st.stypv P [n] v := T Unary unary_op exp v ==<br>\nConcrete_AST_w_st.stypv P [n] v := T Unary unary_op exp v</p>\n<p>Thanks,</p>\n<p>Christoph Feller</p>\n</blockquote>",
        "id": 294075622,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660828756
    },
    {
        "content": "<p>From: Christoph Feller &lt;<a href=\"mailto:c_feller@informatik.uni-kl.de\">c_feller@informatik.uni-kl.de</a>&gt;<br>\nOn Wed, Apr 1, 2009 at 11:20, Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt; wrote:</p>\n<blockquote>\n<p>I suspect the problem is here:</p>\n<blockquote>\n<p>[1]Trying to rewrite:<br>\n[| ?st1 st_in_prog P; ([n] v := T Unary unary_op exp, ?st1) : st_in_st|]<br>\n==&gt; Concrete_AST_w_st.stypv P [n] v := T Unary unary_op exp v ==<br>\nConcrete_AST_w_st.stypv P ?st1 v</p>\n</blockquote>\n<p>You have a premise with an uninstantiated higher-order variable. The<br>\nsimplifier probably managed to instantiate ?st1 with something that<br>\nreturns False, eg %_ _. False.</p>\n</blockquote>\n<p>I just used infix notation for st_in_prog which I shouldn't have done<br>\nas it's obviously quite misleading. It should be:</p>\n<p>[1]Trying to rewrite:<br>\n[| st_in_prog P ?st1; ([n] v := T Unary unary_op exp, ?st1) : st_in_st|]<br>\n==&gt; Concrete_AST_w_st.stypv P [n] v := T Unary unary_op exp v ==<br>\nConcrete_AST_w_st.stypv P ?st1 v</p>\n<p>where ?st1 is a statement i.e. a base value.</p>\n<blockquote>\n<p>[...]</p>\n</blockquote>\n<p>Under these circumstances I would conclude that at least the tracing<br>\nalgorithm isn't as helpful as it should be. Am I right?</p>\n<p>Christoph</p>",
        "id": 294076477,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660829094
    }
]