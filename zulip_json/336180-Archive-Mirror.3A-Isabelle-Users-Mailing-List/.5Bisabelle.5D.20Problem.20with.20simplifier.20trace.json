[
    {
        "content": "<p>From: Christoph Feller &lt;<a href=\"mailto:c_feller@informatik.uni-kl.de\">c_feller@informatik.uni-kl.de</a>&gt;<br>\nHallo!</p>\n<p>I have a loop in my simplifier rules and I try to get to the cause of<br>\nit. I set Isabelle to give me a simplifier trace and set the<br>\nsimplifier depth to 5. Then I get a trace that leaves me confused<br>\nbecause I don't get what's going on. I give a reduced version of my<br>\ntrace to keep it simple. C1 and C2 are constructors, f is a function.</p>\n<p>[1] Applying instance of rewrite rule R1<br>\n(C1 ?s ?v) : X ==&gt; f ?s ?v == f (C1 ?s ?v) ?v</p>\n<p>[1] Trying to rewrite<br>\n(C1 (C2 s) v) : X ==&gt; f (C2 s) v == f (C1 (C2 s) v) v</p>\n<p>[2] SIMPLIFIER INVOKED ON THE FOLLOWING TERM<br>\n(C1 (C2 s) v) : X</p>\n<p>[2] Applying instance of rewrite rule R2<br>\n(C1 ?s ?v) : X == False</p>\n<p>[2] Rewriting<br>\n(C1 (C2 s) v) : X == False</p>\n<p>[1] Succeeded<br>\nf (C2 s) v == f (C1 (C2 s) v) v</p>\n<p>What I don't get is: Why does the rule R1 succeed even if it's premise<br>\nwas simplified to False. Or is there something else going on? Did I<br>\nread it wrong?</p>\n<p>Thanks in advance,<br>\nChristoph Feller</p>",
        "id": 294074754,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660828427
    },
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\nI cannot reproduce this behaviour. I get the following:</p>\n<p>[0]Adding rewrite rule \"Scratch.R1\":<br>\nC1 ?s1 ?v1 : X ==&gt; f ?s1 ?v1 == f (C1 ?s1 ?v1) ?v1</p>\n<p>[0]Adding rewrite rule \"Scratch.R2\":<br>\nC1 ?s1 ?v1 : X == False</p>\n<p>[1]SIMPLIFIER INVOKED ON THE FOLLOWING TERM:<br>\nP (f (C2 s) v)</p>\n<p>[1]Applying instance of rewrite rule \"Scratch.R1\":<br>\nC1 ?s1 ?v1 : X ==&gt; f ?s1 ?v1 == f (C1 ?s1 ?v1) ?v1</p>\n<p>[1]Trying to rewrite:<br>\nC1 (C2 s) v : X ==&gt; f (C2 s) v == f (C1 (C2 s) v) v</p>\n<p>[2]SIMPLIFIER INVOKED ON THE FOLLOWING TERM:<br>\nC1 (C2 s) v : X</p>\n<p>[2]Applying instance of rewrite rule \"Scratch.R2\":<br>\nC1 ?s1 ?v1 : X == False</p>\n<p>[2]Rewriting:<br>\nC1 (C2 s) v : X == False</p>\n<p>[1]FAILED<br>\nC1 (C2 s) v : X ==&gt; f (C2 s) v == f (C1 (C2 s) v) v</p>\n<p>I suspect your subset of the trace does not show the correctly matching<br>\nTrying and Succeeded.</p>\n<p>Tobias</p>\n<p>Christoph Feller schrieb:</p>",
        "id": 294074782,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660828437
    },
    {
        "content": "<p>From: Christoph Feller &lt;<a href=\"mailto:c_feller@informatik.uni-kl.de\">c_feller@informatik.uni-kl.de</a>&gt;<br>\nHallo,</p>\n<p>On Wed, Mar 25, 2009 at 13:23, Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt; wrote:</p>\n<blockquote>\n<p>I cannot reproduce this behaviour. I get the following:<br>\n[...]</p>\n</blockquote>\n<p>My concrete case is more complicate than the example so that isn't too<br>\nsurprising.</p>\n<blockquote>\n<p>I suspect your subset of the trace does not show the correctly matching<br>\nTrying and Succeeded.</p>\n</blockquote>\n<p>I can't deny that but before my subset/-sequence I had an failed<br>\nattempt at a similiar rule like R1 (where the assumption wasn't<br>\nreducible to False) and I didn't leave anything out. Perhaps there is<br>\nsome output from Isabelle missing here?</p>\n<p>I solved the problem as I noticed that I really want a more general form of R1:<br>\n(C1 ?s ?v) : X ==&gt; f ?s ?w == f (C1 ?s ?v) ?w</p>\n<p>(So the parameter of the function doesn't have to be the same as the<br>\nparameter of the constructor.)</p>\n<p>Now it's nice that it works but I have no idea why. And while it isn't<br>\nreally urgent an explanation of that trace would be appreciated as it<br>\ncould give some insight into the simplifier and what can lead to loops<br>\nthere.</p>\n<blockquote>\n<p>Tobias<br>\n[...]</p>\n</blockquote>\n<p>Christoph Feller</p>",
        "id": 294074863,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660828456
    }
]