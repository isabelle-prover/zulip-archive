[
    {
        "content": "<p>From: René Thiemann &lt;<a href=\"mailto:rene.thiemann@uibk.ac.at\">rene.thiemann@uibk.ac.at</a>&gt;<br>\nDear all,</p>\n<p>I stumbled upon the following problem: it seems, that it is not possible<br>\nto access generic lemmas with sort-constraints for proving a subclass<br>\nrelation:</p>\n<p>theory Test<br>\nimports Main<br>\nbegin</p>\n<p>consts P :: \"'a =&gt; 'a =&gt; bool\"<br>\nconsts Q :: \"'a =&gt; 'a =&gt; bool\"</p>\n<p>class A =<br>\n  fixes foo :: \"'a =&gt; 'a\"</p>\n<p>class B = A +<br>\n  fixes bar :: \"'a =&gt; 'a\"<br>\n  assumes P: \"P (x :: 'a) (foo x)\"<br>\nbegin<br>\nlemma PQ: \"P (x :: 'a) y ==&gt; Q x y\" sorry<br>\nend</p>\n<p>lemma Q: \"Q (x :: 'a :: B) (foo x)\"<br>\n  using P[of x] PQ by auto</p>\n<p>class C = A +<br>\n  assumes QQ: \"? y. Q (x :: 'a) y\"</p>\n<p>subclass (in B) C<br>\nproof<br>\n  fix x :: 'a <br>\n  have \"bar x = bar x\" by simp <br>\n  (* since the term \"bar x\" is accepted, definitely, x<br>\n     has sort B *)</p>\n<p>note P[of x] PQ[of x] <br>\n  (* one can access lemmas from B like P and PQ which have been<br>\n     defined within the context *)</p>\n<p>show \"? y. Q x y\" using Q[of x] ..<br>\n  (* delivers \"Type unification failed: Variable 'a::type not of sort B\" *)<br>\n  (* but not lemmas like Q, which are defined outside the class via<br>\n     sort constraints *)<br>\nqed<br>\nend</p>\n<p>Is this is known limitation, or did I make some mistake?<br>\nIn my concrete application, I would have liked to use <br>\nex_le_of_nat in src/HOL/Archimedean_Field to prove a subclass<br>\nrelation, but could not. Instead I currently use ex_le_of_int<br>\nand copied the proof for ex_le_of_nat to finish the subclass proof,<br>\nwhich works, but is a bit unsatisfactory.</p>\n<p>Best regards,<br>\nRené</p>\n<p>PS: I used Isabelle2013-1-RC3</p>",
        "id": 294251944,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660911078
    },
    {
        "content": "<p>From: Andreas Lochbihler &lt;<a href=\"mailto:andreas.lochbihler@inf.ethz.ch\">andreas.lochbihler@inf.ethz.ch</a>&gt;<br>\nHi René,</p>\n<blockquote>\n<p>subclass (in B) C<br>\nproof<br>\n   fix x :: 'a<br>\n   have \"bar x = bar x\" by simp<br>\n   (* since the term \"bar x\" is accepted, definitely, x<br>\n      has sort B *)<br>\nNo, 'a has sort type, not B, as can be seen by showing the sorts with [[show_sorts]]. <br>\nInside a class context, occurrences of class parameters are mapped to the locally fixed <br>\nclass parameter whenever type inference says that this is possible.</p>\n</blockquote>\n<blockquote>\n<p>note P[of x] PQ[of x]<br>\n   (* one can access lemmas from B like P and PQ which have been<br>\n      defined within the context *)<br>\nFact names from class contexts are localised similarly. You can refer to the global <br>\nversion of these facts with Test.P and Test.PQ. Then, type unification will fail.</p>\n</blockquote>\n<blockquote>\n<p>Is this is known limitation, or did I make some mistake?<br>\nIn my concrete application, I would have liked to use<br>\nex_le_of_nat in src/HOL/Archimedean_Field to prove a subclass<br>\nrelation, but could not. Instead I currently use ex_le_of_int<br>\nand copied the proof for ex_le_of_nat to finish the subclass proof,<br>\nwhich works, but is a bit unsatisfactory.<br>\nThis is a known problem. And for this reason, as many theorems as possible should be <br>\nproven inside the class context. However, many theories have yet not been \"optimised\" in <br>\nthis respect.</p>\n</blockquote>\n<p>Alternatively, you can do an instance declaration instead of a subclass declaration:</p>\n<p>instance B \\&lt;subseteq&gt; C</p>\n<p>Then, the type variable 'a has sort B in the proof, and you can use all you need. The <br>\ndifference to subclass is that you do not get the sublocale declaration B &lt; C, that <br>\nsubclass implicitly issues, i.e., inside the context of B, you cannot refer to theorems <br>\nfrom C.</p>\n<p>Best,<br>\nAndreas</p>\n<p>PS: All this is explained in the Isar-Ref manual, section 5.7.</p>",
        "id": 294251957,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660911085
    },
    {
        "content": "<p>From: René Thiemann &lt;<a href=\"mailto:rene.thiemann@uibk.ac.at\">rene.thiemann@uibk.ac.at</a>&gt;<br>\nDear Andreas,</p>\n<p>thanks for the clarifying answer and the link to the Isar-Ref manual.</p>\n<p>Best,<br>\nRené</p>",
        "id": 294252132,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660911146
    }
]