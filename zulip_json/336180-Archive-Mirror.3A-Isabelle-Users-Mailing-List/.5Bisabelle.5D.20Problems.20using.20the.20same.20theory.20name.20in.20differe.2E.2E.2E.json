[
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nOn 02/03/2020 16:43, Wolfgang Jeltsch wrote:</p>\n<blockquote>\n<p>I want to have certain theories in different sessions to have the same<br>\nname, but currently I cannot make this work.</p>\n<p>As an example, consider two sessions <code>A</code> and <code>B</code>, each of them<br>\ncontaining a theory named <code>Core</code>. If I have theory <code>B.Core</code> import<br>\ntheory <code>A.Core</code>, Isabelle/jEdit gives me the following error message at<br>\nthe beginning of <code>B.Core</code>:</p>\n<p>exception THEORY raised (line 233 of \"context.ML\"):<br>\n    • Duplicate theory name<br>\n    • {..., HOL.Conditionally_Complete_Lattices, HOL.Binomial, Main,<br>\n      A.Core, B.Core}<br>\n    • {..., HOL.Filter, HOL.Conditionally_Complete_Lattices,<br>\n      HOL.Binomial, Main, A.Core}</p>\n</blockquote>\n<p>Until a few years ago, bad things would happen without any error. It is<br>\nalready some progress that it fails properly.</p>\n<blockquote>\n<p>So far, I considered sessions to introduce their own name spaces, so<br>\nthat <code>A.Core</code> and <code>B.Core</code> refer to different theories. Was this<br>\nassumption wrong, or am I just missing something that is necessary to<br>\nmake such theory naming work?</p>\n</blockquote>\n<p>There is a name space for theory names (session name \".\" theory name), and an<br>\ninternal name space prefix for each theory: the latter is the theory base name.</p>\n<p>This is done for two reasons:</p>\n<p>(1) Extra qualification would make internal full names rather long. (One day<br>\nwe will just do it, like we did for the theory prefix 20 years ago.)</p>\n<p>(2) Many tools from the past 10 years expect the first name component of<br>\ninternal type/const/thm names to be the theory. (I failed to convince tool<br>\nauthors not to impose such assumptions on their implementations, so I will<br>\nhave to come up with some smart trick eventually.)</p>\n<p>For now the above is known and intended behaviour of the system.</p>\n<p>Isabelle2020 will be again more efficient in handling session-qualified theory<br>\nnames, but there is no change of the internal name space policy.</p>\n<p>Makarius</p>",
        "id": 294824140,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661243596
    },
    {
        "content": "<p>From: Wolfgang Jeltsch &lt;<a href=\"mailto:wolfgang-it@jeltsch.info\">wolfgang-it@jeltsch.info</a>&gt;<br>\nHi!</p>\n<p>Thanks for the clarification.</p>\n<p>Given that theory names appear to be global, what is the recommended way<br>\nfor avoiding theory name clashes? The only really safe way I can imagine<br>\nwould be something like including the session name in the theory name,<br>\nwhich would lead to names like <code>Session.Session-Theory</code>. However, this<br>\nseems odd to me.</p>\n<p>What do other people do about this? In particular, how do other people<br>\nname theories that collect certain foundational or utility bits of a<br>\nsession? I wanted to name those something like <code>Foundations</code>, but<br>\napparently this is not a good idea.</p>\n<p>All the best,<br>\nWolfgang</p>",
        "id": 294824607,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661243824
    },
    {
        "content": "<p>From: Manuel Eberl &lt;<a href=\"mailto:eberlm@in.tum.de\">eberlm@in.tum.de</a>&gt;<br>\nIn my experience, this is really only an issue for those \"lemma bucket\"<br>\ntheories that contain material that is not particularly interesting<br>\nand/or should probably be in the distribution.</p>\n<p>I usually call those something like \"&lt;name of AFP entry&gt;_Library\", or,<br>\nif I have enough material to split it into several theories, \"&lt;name of<br>\nAFP entry&gt;_Polynomial_Library\" and \"&lt;name of AFP<br>\nentry&gt;_Integration_Library\" etc.</p>\n<p>I don't think I've ever run into duplicate theory names. If this does<br>\nhappen, I guess the only way around it is to rename one of the theories<br>\nin the AFP.</p>\n<p>This is of course not ideal and if I recall correctly, properly<br>\nsession-qualified theory names are something on Makarius's long-term to<br>\ndo list.</p>\n<p>There is another problem that is even more of a headache because there<br>\nis no workaround for it at all and no solution in sight, namely<br>\nconflicting type class instantiations. There the only solution is simply<br>\nto avoid type class instantiations whenever there is more than one<br>\n\"sensible\" instance.</p>\n<p>Manuel</p>",
        "id": 294824780,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661243884
    },
    {
        "content": "<p>From: Manuel Eberl &lt;<a href=\"mailto:eberlm@in.tum.de\">eberlm@in.tum.de</a>&gt;<br>\nAddendum: I guess this is simply because Isabelle was created over 30<br>\nyears ago and back then nobody thought it would still be around 30 years<br>\nlater and be used for developments as big as what we have today, so a<br>\nfancy module system wasn't really on the agenda.</p>\n<p>(That is just my conjecture. I was not around back then – Isabelle is<br>\nquite a bit older than I am.)</p>\n<p>Manuel</p>",
        "id": 294824788,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661243890
    },
    {
        "content": "<p>From: Lawrence Paulson &lt;<a href=\"mailto:lp15@cam.ac.uk\">lp15@cam.ac.uk</a>&gt;<br>\nIndeed. It’s inspiring to see old developments that took years of work and were huge at the time running in around 30s on modern machines. It’s awesome to see new developments built upon great hierarchies of other developments.</p>\n<p>In the beginning, even constant names had global scope.</p>\n<p>Larry</p>",
        "id": 294824799,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661243896
    },
    {
        "content": "<p>From: Wolfgang Jeltsch &lt;<a href=\"mailto:wolfgang-it@jeltsch.info\">wolfgang-it@jeltsch.info</a>&gt;<br>\nHi!</p>\n<p>I want to have certain theories in different sessions to have the same<br>\nname, but currently I cannot make this work.</p>\n<p>As an example, consider two sessions <code>A</code> and <code>B</code>, each of them<br>\ncontaining a theory named <code>Core</code>. If I have theory <code>B.Core</code> import<br>\ntheory <code>A.Core</code>, Isabelle/jEdit gives me the following error message at<br>\nthe beginning of <code>B.Core</code>:</p>\n<p>exception THEORY raised (line 233 of \"context.ML\"):<br>\n    • Duplicate theory name<br>\n    • {..., HOL.Conditionally_Complete_Lattices, HOL.Binomial, Main,<br>\n      A.Core, B.Core}<br>\n    • {..., HOL.Filter, HOL.Conditionally_Complete_Lattices,<br>\n      HOL.Binomial, Main, A.Core}</p>\n<p>So far, I considered sessions to introduce their own name spaces, so<br>\nthat <code>A.Core</code> and <code>B.Core</code> refer to different theories. Was this<br>\nassumption wrong, or am I just missing something that is necessary to<br>\nmake such theory naming work?</p>\n<p>All the best,<br>\nWolfgang</p>",
        "id": 294824811,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661243902
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nTechnically, all names of the primitive logic are global. Over time we have<br>\nbuilt a lot of extra-logical infrastructure to provide the appearance of<br>\nstructured names and name space policies.</p>\n<p>The idea to use even more qualification for long names is rather obvious, but<br>\nit will break many relatively recent tools that impose their own assumptions<br>\nabout the structure of full names.</p>\n<p>I do have some ideas to accommodate such tools eventually, but many other<br>\nthings have higher priority.</p>\n<p>Makarius</p>",
        "id": 294825228,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661244092
    },
    {
        "content": "<p>From: \"Thiemann, René\" &lt;<a href=\"mailto:Rene.Thiemann@uibk.ac.at\">Rene.Thiemann@uibk.ac.at</a>&gt;<br>\nHi Wolfgang,</p>\n<p>at least the namespace is not completely different.</p>\n<p>E.g., if you define in A.Core a constant “foo\", then the<br>\ninternal name is “Core.foo” (no “A” attached).<br>\nSimilarly, a “foo” within B.Core is also named “Core.foo” (no “B” attached).</p>\n<p>So, it will be problematic to load both A.Core and B.Core.</p>\n<p>e.g., in the concrete example below you will see that there will be no<br>\noccurrence of the session name HOL-Library in the name of the constant.</p>\n<p>theory Scratch<br>\nimports<br>\n  Main<br>\n  \"HOL-Library.Code_Target_Int\"<br>\nbegin</p>\n<p>ML ‹<br>\n  val x = @{term \"Code_Target_Int.positive\"}<br>\n    |&gt; Term.dest_Const<br>\n›</p>\n<p>Best,<br>\nRené<br>\n<a href=\"/user_uploads/14278/Xi196J2_Tbfelw58uIrlUQL9/signature.asc\">signature.asc</a></p>",
        "id": 294825518,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661244240
    }
]