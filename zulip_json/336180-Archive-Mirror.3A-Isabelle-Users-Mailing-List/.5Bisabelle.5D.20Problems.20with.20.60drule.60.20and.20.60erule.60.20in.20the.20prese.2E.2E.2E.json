[
    {
        "content": "<p>From: Wolfgang Jeltsch &lt;<a href=\"mailto:wolfgang-it@jeltsch.info\">wolfgang-it@jeltsch.info</a>&gt;<br>\nHi!</p>\n<p>I’m developing a proof method that involves applications of <code>drule</code>.<br>\nThis proof methods doesn’t work in the presence of chained facts,<br>\nbecause its <code>drule</code> invocations fail in this situation.</p>\n<p>Consider the following minimal example code:</p>\n<p>lemma \"P ∧ Q ⟹ R\"<br>\n      apply (drule conjunct1)<br>\n      oops</p>\n<p>The invocation of <code>drule</code> correctly turns the goal into <code>P ⟹ R</code>.<br>\nHowever, it fails in the following situation:</p>\n<p>lemma \"P ∧ Q ⟹ R\"<br>\n      using TrueI<br>\n      apply (drule conjunct1)<br>\n      oops</p>\n<p>Why is that, and how can <code>drule</code> been made work also in the presence of<br>\nchained facts?</p>\n<p>I also tried to use <code>erule</code> instead of <code>drule</code>, but the same problem<br>\noccurred with that.</p>\n<p>In my use case, I actually want to turn all chained facts into goal<br>\npremises anyhow. I can add the chained facts to the list of goal<br>\npremises by invoking <code>insert method_facts</code>, but this leaves the chained<br>\nfacts in place, so that the problem with <code>drule</code> remains. Is there<br>\nperhaps a proof method that removes all chained facts?</p>\n<p>I know that <code>simp</code> turns chained facts into goal premises. Therefore, my<br>\ncurrent workaround is to invoke <code>simp</code> in a way where it essentially<br>\ndoesn’t rewrite anything but only moves chained facts into the goal. To<br>\nthis end, I’m using <code>(insert TrueI, simp only: True_implies_equals)</code>. This has the side effect of removing all previously existing<br>\n<code>True</code> premises, but this isn’t a problem in my use case. Still, I’d be<br>\nhappy to use a cleaner solution.</p>\n<p>All the best,<br>\nWolfgang</p>",
        "id": 294760410,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661199266
    },
    {
        "content": "<p>From: Wenda Li &lt;<a href=\"mailto:wl302@cam.ac.uk\">wl302@cam.ac.uk</a>&gt;<br>\nHi Wolfgang,</p>\n<p>Although there might be better solutions and deeper understandings, my usual quick and dirty ways are:</p>\n<p>lemma \"P ∧ Q ⟹ R\"<br>\n     using TrueI<br>\n     apply -<br>\n     apply (drule conjunct1)<br>\n     oops</p>\n<p>Or </p>\n<p>lemma \"P ∧ Q ⟹ R\"<br>\n     using TrueI<br>\n     apply (drule_tac conjunct1)<br>\n     oops</p>\n<p>Wenda</p>",
        "id": 294760422,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661199272
    },
    {
        "content": "<p>From: Wolfgang Jeltsch &lt;<a href=\"mailto:wolfgang-it@jeltsch.info\">wolfgang-it@jeltsch.info</a>&gt;<br>\nI think the trick with <code>apply -</code> has nothing to do with the proof<br>\nmethod <code>-</code> but only works because the second <code>apply</code> never sees the<br>\nchained facts from the <code>using</code> that comes before the first <code>apply</code>.<br>\nTherefore this trick doesn’t work in an Eisbach definition, where you<br>\nuse the comma operator to compose several proof methods into a single<br>\none.</p>\n<p>The trick with <code>drule_tac</code> works though.</p>\n<p>All the best,<br>\nWolfgang</p>",
        "id": 294760435,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661199278
    },
    {
        "content": "<p>From: \"<a href=\"mailto:lammich@in.tum.de\">lammich@in.tum.de</a>\" &lt;<a href=\"mailto:lammich@in.tum.de\">lammich@in.tum.de</a>&gt;<br>\nOops, only sent that privately</p>",
        "id": 294760448,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661199284
    },
    {
        "content": "<p>From: Wolfgang Jeltsch &lt;<a href=\"mailto:wolfgang-it@jeltsch.info\">wolfgang-it@jeltsch.info</a>&gt;<br>\nWhat I had overlooked is that when using <code>(insert TrueI, simp only:\nTrue_implies_equals)</code>, the <code>simp</code> invocation can still use the chained<br>\nfacts as simplification rules, which can modify the goal further.</p>\n<p>That said, I learned from fellow mailing list members that tactics turn<br>\nchained facts into goal premises. My new proof method for moving chained<br>\nfacts into the goal is <code>(insert TrueI, erule_tac TrueE)</code>. This also<br>\ndoesn’t have the disadvantage of removing <code>True</code> premises that might<br>\nhave been there in the first place.</p>\n<p>All the best,<br>\nWolfgang</p>",
        "id": 294760457,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661199290
    },
    {
        "content": "<p>From: Gidon Ernst &lt;<a href=\"mailto:gidon.ernst@lmu.de\">gidon.ernst@lmu.de</a>&gt;<br>\nHi!,</p>\n<p>there is \"elim\" and \"intro\" which use chained facts (but apparently no<br>\n\"dest\") that correspond to (erule ...)+ and (rule ...)+ respectively.<br>\nNote that they might loop.</p>\n<p>Best,<br>\n  Gidon</p>",
        "id": 294760498,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661199310
    },
    {
        "content": "<p>From: Yakoub Nemouchi &lt;<a href=\"mailto:y.nemouchi@gmail.com\">y.nemouchi@gmail.com</a>&gt;<br>\nHi,</p>\n<p>Goal focus is another way to inline chained facts. However, I am not sure<br>\nif this is the right usage of goal focus. It might be just a hacky style<br>\nfrom me.</p>\n<p>Best wishes,<br>\nYakoub.</p>",
        "id": 294760522,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661199321
    },
    {
        "content": "<p>From: Andreas Lochbihler &lt;<a href=\"mailto:mail@andreas-lochbihler.de\">mail@andreas-lochbihler.de</a>&gt;<br>\nHi all,</p>\n<p>IMO the cleanest way is to use the \"use\" method, which takes another method and overwrites <br>\nwhat gets chained into the proof mehod. For example,</p>\n<p>using TrueI<br>\napply(use nothing in \\&lt;open&gt;drule ...\\&lt;close&gt;)</p>\n<p>should work as expected. Note that \"nothing\" is the empty list of theorems. If you want to <br>\nchain in other theorems, just use their names.</p>\n<p>The _tac versions of (d/e)rule are considered legacy because they allow access to raw goal <br>\nparameter names (which should be made available in the proof context using \"subgoal\" first).</p>\n<p>Moreoer, elim and intro try to apply the given rules as often as possible, not just once <br>\nlike (d/e)rule, and they behave differently when it comes to instantiating schematic <br>\nvariables in the goals.</p>\n<p>Hope this helps,<br>\nAndreas</p>",
        "id": 294760537,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661199327
    }
]