[
    {
        "content": "<p>From: René Thiemann &lt;<a href=\"mailto:rene.thiemann@uibk.ac.at\">rene.thiemann@uibk.ac.at</a>&gt;<br>\nDear all,</p>\n<p>I'm currently working with the Isabelle/ML-interface of the datatype_new command, where I'm defining some functions as follows:</p>\n<p>theory Scratch<br>\nimports Main<br>\nbegin<br>\ndatatype_new someType = Constructor nat</p>\n<p>(* primrec \"f (Constructor x) = x\" *)</p>\n<p>local_setup {*<br>\nfn lthy =&gt; <br>\n  let <br>\n    val x = Free (\"x\", @{typ nat})<br>\n    val fT = @{typ \"someType =&gt; nat\"}<br>\n    val (info,lthy) = BNF_LFP_Rec_Sugar.add_primrec_simple [((<a href=\"http://Binding.name\">Binding.name</a> \"f\", fT), NoSyn)]<br>\n      [HOLogic.mk_Trueprop (HOLogic.mk_eq (Free (\"f\",fT) $ (@{term Constructor} $ x), x))] lthy<br>\n    val _ = Output.urgent_message (@{make_string} info)<br>\n  in<br>\n    lthy<br>\n  end<br>\n*}</p>\n<p>(* output: ([\"f\"], ([Free (\"f\", \"someType ⇒ nat\")], ([[0]], [[\"Scratch.f (Constructor x) = x\"]]))) *)</p>\n<p>Whereas the primrec command indeed generates the intended function, I noticed some inconvenience in the returned<br>\ninformation \"info\": it contains the newly defined constant \"h\" as well as the simplification rules. <br>\nHowever, the level between the constant and the simp-rules is not in sync:</p>\n<ul>\n<li>the constant is still some free variable \"Free 'f'\"</li>\n<li>the simp-rules already speak about the global constant \"Const (Scratch.f)\"</li>\n</ul>\n<p>Is this the intended behavior? Or wouldn't it be more sensibly to return <br>\n  \"(Free f) (Constructor x) = x\" as simp-rule? <br>\n(I prefer to stay in the current context)</p>\n<p>The behavior is also different from similar commands like Local_Theory.define where the <br>\ndefining equation speaks about \"Free g\", and not about \"Const (Scratch.g)\"</p>\n<p>(* definition g :: nat =&gt; nat where \"g = % x. x\" *)</p>\n<p>local_setup {*<br>\nfn lthy =&gt; <br>\n  let <br>\n    val x = Free (\"x\", @{typ nat})<br>\n    val gT = @{typ \"nat =&gt; nat\"}<br>\n    val (info,lthy) = Local_Theory.define ((<a href=\"http://Binding.name\">Binding.name</a> \"g\", NoSyn), ((<a href=\"http://Binding.name\">Binding.name</a> \"g_def\", []),<br>\n      (lambda x x))) lthy<br>\n    val _ = Output.urgent_message (@{make_string} info)<br>\n  in<br>\n    lthy<br>\n  end<br>\n*}</p>\n<p>(* output: (Free (\"g\", \"nat ⇒ nat\"), (\"local.g_def\", \"g ≡ λx. x\"  [.])) *)</p>\n<p>Best regards,<br>\nRené</p>",
        "id": 294316630,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660925655
    },
    {
        "content": "<p>From: René Thiemann &lt;<a href=\"mailto:rene.thiemann@uibk.ac.at\">rene.thiemann@uibk.ac.at</a>&gt;<br>\nShort update:</p>\n<p>the behavior of BNF_LFP_Rec_Sugar.add_primrec_simple is also incompatible to the one of Primrec.add_primrec_simple,<br>\nthe latter has the expected behavior as Local_Theory.define:</p>\n<p>datatype someType = Constructor nat</p>\n<p>local_setup {*<br>\nfn lthy =&gt; <br>\n  let <br>\n    val x = Free (\"x\", @{typ nat})<br>\n    val fT = @{typ \"someType =&gt; nat\"}<br>\n    val (new,lthy) = Primrec.add_primrec_simple [((<a href=\"http://Binding.name\">Binding.name</a> \"f\", fT), NoSyn)]<br>\n      [HOLogic.mk_Trueprop (HOLogic.mk_eq (Free (\"f\",fT) $ (@{term Constructor} $ x), x))] lthy<br>\n    val _ = Output.urgent_message (@{make_string} new)<br>\n  in<br>\n    lthy<br>\n  end<br>\n*}</p>\n<p>produces</p>\n<p>(\"f\", ([Free (\"f\", \"someType ⇒ nat\")], [\"f (Constructor ?x) = ?x\"  [.]]))</p>\n<p>Moreover, it does not depend on whether one uses add_primrec_simple or add_primrec </p>\n<p>Best,<br>\nRené</p>",
        "id": 294316673,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660925668
    },
    {
        "content": "<p>From: Dmitriy Traytel &lt;<a href=\"mailto:traytel@in.tum.de\">traytel@in.tum.de</a>&gt;<br>\nHi René,</p>\n<p>indeed the terms and the theorems should be in sync. I can not tell at <br>\nthe moment if both will be about Free's (monomorphic) or about Const's <br>\n(polymorphic). This depends on fact whether the polymorphism is needed <br>\nfor something internal or not. I'll have a closer look next week.</p>\n<p>Thanks for the report,<br>\nDmitriy</p>",
        "id": 294316695,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660925674
    },
    {
        "content": "<p>From: Dmitriy Traytel &lt;<a href=\"mailto:traytel@in.tum.de\">traytel@in.tum.de</a>&gt;<br>\nIt should be better with 1ae67039b14f.</p>\n<p>Dmitriy</p>",
        "id": 294321812,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660927146
    },
    {
        "content": "<p>From: René Thiemann &lt;<a href=\"mailto:rene.thiemann@uibk.ac.at\">rene.thiemann@uibk.ac.at</a>&gt;</p>\n<blockquote>\n<p>It should be better with 1ae67039b14f.</p>\n</blockquote>\n<p>Thanks, works perfectly now.</p>\n<p>René</p>",
        "id": 294321838,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660927152
    }
]