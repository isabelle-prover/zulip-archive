[
    {
        "content": "<p>From: \"Thiemann, Rene\" &lt;<a href=\"mailto:Rene.Thiemann@uibk.ac.at\">Rene.Thiemann@uibk.ac.at</a>&gt;<br>\nDear list,</p>\n<p>we just stumbled upon the translation of pattern matching of natural numbers for code-generation in the presence of target-language integers.</p>\n<p>theory Test<br>\nimports <br>\n  Main<br>\n  \"~~/src/HOL/Library/Code_Target_Numeral\"<br>\nbegin</p>\n<p>fun foo :: \"nat ⇒ bool\" where<br>\n  \"foo (Suc 0) = True\"</p>\n<p>export_code foo in Haskell</p>\n<p>(* \"Nat.Suc\" is not a constructor, on left hand side of equation, in theorem:<br>\nfoo (Suc zero_nat_inst.zero_nat) ≡ True *)</p>\n<p>end</p>\n<p>Of course, it is easy to work around by providing suitable code-equations manually, but perhaps this can be fixed in the future. <br>\nThe problem occurs in both Isabelle 2016 and in the development version d4b89572ae71.</p>\n<p>Cheers,<br>\nAkihisa and René</p>",
        "id": 294684394,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661177458
    },
    {
        "content": "<p>From: Andreas Lochbihler &lt;<a href=\"mailto:andreas.lochbihler@inf.ethz.ch\">andreas.lochbihler@inf.ethz.ch</a>&gt;<br>\nDear René,</p>\n<p>This problem only shows up if you import Code_Target_Nat from HOL/Library, which changes <br>\nthe code representation of naturals from 0/Suc to a copy of natural, which are in turn <br>\nimplemented by target-language integers. There is a preprocessor in Code_Abstract_Nat, <br>\nwhich tries to eliminate pattern-matching on Suc, but it only works if there a <br>\ncorresponding code equation for 0, too.</p>\n<p>One could try to come up with a better implementation, but it's not that easy.</p>\n<p>Best,<br>\nAndreas</p>",
        "id": 294684426,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661177468
    },
    {
        "content": "<p>From: \"Thiemann, Rene\" &lt;<a href=\"mailto:Rene.Thiemann@uibk.ac.at\">Rene.Thiemann@uibk.ac.at</a>&gt;<br>\nHi Andreas,</p>\n<p>thanks for the hint. </p>\n<p>However, I do not see that the problem with incomplete patterns is so problematic. What about a translation according to the following idea?</p>\n<p>“foo n = (if n = 1 then True else Code.abort ‘’pattern match failed’'<br>\n  (% _. foo n))” </p>\n<p>Best regards,<br>\nRené</p>",
        "id": 294684469,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661177487
    },
    {
        "content": "<p>From: Andreas Lochbihler &lt;<a href=\"mailto:andreas.lochbihler@inf.ethz.ch\">andreas.lochbihler@inf.ethz.ch</a>&gt;<br>\nHi René,</p>\n<p>You are right, in the case of pattern matches on a single argument, the elimination of the <br>\n0/Suc patterns could be done like that. The only tricky bit is to handle sequential <br>\npattern matches correctly, i.e.,</p>\n<p>lemma [code]:<br>\n   \"foo (Suc n) = False\"<br>\n   \"foo m = Code.abort ''invalid argument'' (%_. foo m)\"</p>\n<p>should raise the error \"invalid argument\" rather than ''pattern match failed''.</p>\n<p>The situation gets complicated when there are pattern matches on several arguments and the <br>\npatterns overlap. Especially if you want to preserve the strictness of generated Haskell <br>\nfunctions, the task becomes non-trivial.</p>\n<p>Feel free to improve the current preprocessor. Maybe being able to deal with a few special <br>\ncases would be enough in practice.</p>\n<p>Andreas</p>",
        "id": 294684512,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661177505
    }
]