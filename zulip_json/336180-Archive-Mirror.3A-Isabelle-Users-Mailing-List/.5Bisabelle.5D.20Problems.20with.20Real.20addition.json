[
    {
        "content": "<p>From: Steve W &lt;<a href=\"mailto:s.wong.731@googlemail.com\">s.wong.731@googlemail.com</a>&gt;<br>\nHi,</p>\n<p>I'm trying out addition in Real, but have run into some problems. Does<br>\nanyone know why the first example below doesn't work but the second does? Is<br>\nit a problem with the types?</p>\n<p>1)</p>\n<p>theory Test<br>\nimports Real<br>\nbegin</p>\n<p>typedecl T</p>\n<p>consts<br>\nF :: \"T =&gt; real\"<br>\nt :: \"T\"</p>\n<p>axioms<br>\nax : \"F(t) = 0\"</p>\n<p>lemma test: \"EX x. F(x) + 1 ~= 0\"<br>\nusing ax<br>\nby auto</p>\n<p>2)</p>\n<p>theory Test<br>\nimports Real<br>\nbegin</p>\n<p>typedecl T</p>\n<p>consts<br>\nF :: \"T =&gt; real\"<br>\nt :: \"T\"</p>\n<p>axioms<br>\nax : \"F(t) = 0\"</p>\n<p>lemma test: \"EX x. F(x) + 0 = 0\"<br>\nusing ax<br>\nby auto</p>\n<p>Thanks in advance for any help.</p>\n<p>Regards,<br>\nSteve</p>",
        "id": 294098539,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660833056
    },
    {
        "content": "<p>From: Brian Huffman &lt;<a href=\"mailto:brianh@cs.pdx.edu\">brianh@cs.pdx.edu</a>&gt;<br>\nOn Wed, Jan 20, 2010 at 7:51 PM, Steve W &lt;<a href=\"mailto:s.wong.731@googlemail.com\">s.wong.731@googlemail.com</a>&gt; wrote:</p>\n<blockquote>\n<p>I'm trying out addition in Real, but have run into some problems. Does<br>\nanyone know why the first example below doesn't work but the second does? Is<br>\nit a problem with the types?</p>\n</blockquote>\n<p>Hi Steve,</p>\n<p>This is not a problem with the types. It works exactly the same with<br>\ntype int or rat as it does with real.</p>\n<blockquote>\n<p>axioms<br>\nax : \"F(t) = 0\"</p>\n<p>lemma test: \"EX x. F(x) + 1 ~= 0\"<br>\nusing ax<br>\nby auto</p>\n</blockquote>\n<p>You should realize that you are asking a lot of \"auto\" here, since<br>\nproving this lemma requires it to guess a witness for the existential<br>\nquantifier. The \"auto\" tactic can only guess witnesses in very limited<br>\ncircumstances.</p>\n<blockquote>\n<p>axioms<br>\nax : \"F(t) = 0\"</p>\n<p>lemma test: \"EX x. F(x) + 0 = 0\"<br>\nusing ax<br>\nby auto</p>\n</blockquote>\n<p>Your second example happens to be one of the limited circumstances<br>\nwhere auto <em>can</em> solve an existential. Simplification replaces \"F(x) +<br>\n0\" with \"F(x)\", leaving the subgoal</p>\n<p>\"EX x. F(x) = 0\"</p>\n<p>which just happens to match up perfectly with the rule \"ax\" that you<br>\nprovided. In general, you should only expect \"auto\" to solve<br>\nexistentials if they can be solved in one step by rule exI.</p>\n<p>Other tactics besides \"auto\" are better at solving existentials. For<br>\nexample, the \"metis\" tactic can solve your goal:</p>\n<p>lemma test: \"EX x. F(x) + 1 ~= 0\"<br>\nusing ax<br>\nby (metis one_neq_zero add_0_left)</p>\n<p>The drawback with metis is that you need to supply all the other<br>\nlemmas needed to solve the goal.</p>\n<p>In the end, it is often easiest to just provide the witness yourself:</p>\n<p>lemma test: \"EX x. F(x) + 1 ~= 0\"<br>\nproof<br>\n  show \"F(t) + 1 ~= 0\"<br>\n    using ax by simp<br>\nqed</p>\n<p>Hope this helps,</p>\n<ul>\n<li>Brian</li>\n</ul>",
        "id": 294098634,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660833087
    }
]