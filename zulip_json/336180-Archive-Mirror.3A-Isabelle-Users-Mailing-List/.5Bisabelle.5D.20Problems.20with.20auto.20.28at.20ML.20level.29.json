[
    {
        "content": "<p>From: Burkhart Wolff &lt;<a href=\"mailto:Burkhart.Wolff@lri.fr\">Burkhart.Wolff@lri.fr</a>&gt;<br>\nDear all,</p>\n<p>I found a somewhat strange difference in the behaviour of auto_tac<br>\nbetween an ISAR-level execution and an ML-level execution:</p>\n<p>lemma aux :<br>\n\"triangle ?X3X79 ?X2X77 ?X1X75 \\&lt;and&gt; ?X3X79 ~= ?X2X77 \\&lt;and&gt; ?X2X77  <br>\n~= ?X1X75 \\&lt;and&gt; ?X3X79 ~= ?X1X75\"<br>\napply(auto intro: abs_cases )<br>\ndone</p>\n<p>does the trick: searching between several intro-rules one possible  <br>\nsolution that instantiates<br>\nthe meta-variables conveniently.</p>\n<p>In contrast:<br>\nML{* fun auto_solver thms {prems: Thm.thm list, context:  <br>\nProof.context}  =<br>\n                     auto_tac ((local_claset_of context) addIs thms,<br>\n                                        local_simpset_of context)*}</p>\n<p>lemma aux :<br>\n\"triangle ?X3X79 ?X2X77 ?X1X75 \\&lt;and&gt; ?X3X79 ~= ?X2X77 \\&lt;and&gt; ?X2X77  <br>\n~= ?X1X75 \\&lt;and&gt; ?X3X79 ~= ?X1X75\"<br>\napply(tactic \"(auto_solver (thms\\\"abs_cases\\\")){prems=[], context=  <br>\n@{context}}\")</p>\n<p>looks as if \"auto intro!: abs_cases\" has been fired; backtracking is  <br>\nreduced to just choosing<br>\nthe first match and getting stuck.</p>\n<p>The full example is in the appendix.</p>\n<p>Can anybody point me out where I oversimplified Isar's way to control  <br>\nauto_tac ?</p>\n<p>Best regards,</p>\n<p>bu<br>\n<a href=\"/user_uploads/14278/FlqLElxrI4E0wD8re2FVvGmd/Trian.thy\">Trian.thy</a></p>",
        "id": 294083426,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660831427
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nThe problem here is that the old operators addIs (and simular) prefer <br>\nrules from right to left, while Isar declarations work in textual order <br>\nfrom left to right.  Thus the internal priorities of the rules come out <br>\ndifferently.</p>\n<p>Your example works, if auto_solver is defined like this:</p>\n<p>ML {*<br>\n   fun auto_solver thms {prems: Thm.thm list, context: Proof.context} =<br>\n     auto_tac (local_claset_of context addIs (rev thms),<br>\n       local_simpset_of context)<br>\n*}</p>\n<p>Here (rev thms) does the trick.</p>\n<p>Makarius</p>",
        "id": 294083433,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660831431
    }
]