[
    {
        "content": "<p>From: René Thiemann &lt;<a href=\"mailto:rene.thiemann@uibk.ac.at\">rene.thiemann@uibk.ac.at</a>&gt;<br>\nDear all,</p>\n<p>the following datatype definition is not accepted in Isabelle/HOL,<br>\npresumably since the parameter of foo has been changed to \"'a option\".</p>\n<p>datatype 'a foo = Bar 'a | Com \"'a option foo\"</p>\n<p>Is there some known workaround for this problem?</p>\n<p>Thanks in advance,<br>\nRené</p>",
        "id": 294077718,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660829529
    },
    {
        "content": "<p>From: Brian Huffman &lt;<a href=\"mailto:brianh@cs.pdx.edu\">brianh@cs.pdx.edu</a>&gt;<br>\nThis is an instance of \"nested\" or \"non-regular\" recursion, which is<br>\nnot supported by Isabelle's datatype package. I think you can define<br>\nthose kinds of datatypes in Coq, but Isabelle has a much less<br>\nsophisticated type system that makes working with nested recursive<br>\ndatatypes very difficult.</p>\n<p>The first problem is, what would an induction rule for type 'a foo<br>\nlook like? Here's a first try:</p>\n<p>lemma foo_induct:<br>\n  assumes \"ALL a. P (Bar a)\"<br>\n  assumes \"ALL x. P x --&gt; P (Com x)\"<br>\n  shows \"ALL x. P x\"</p>\n<p>But the above rule doesn't work because it is not type-correct.<br>\nBecause of the nested recursion, the predicate in the inductive<br>\nhypothesis needs to have a different type than the one in the<br>\nconclusion. In Coq, I think this can work by giving P a polymorphic<br>\ntype like \"forall a, foo a -&gt; Prop\". But in Isabelle you can't talk<br>\nabout polymorphic types in this way.</p>\n<p>The other (related) problem is how to define recursive functions over<br>\na nested recursive datatype. Here's a definition you might like to be<br>\nable to write:</p>\n<p>primrec \"size :: 'a foo =&gt; nat\" where<br>\n\"size (Foo a) = 0\" |<br>\n\"size (Com x) = Suc (size x)\"</p>\n<p>The problem is that the recursive call to \"size\" on the rhs is at a<br>\ndifferent type. This means that it is impossible to translate this<br>\ndefinition into a non-recursive one that uses a fixed-point<br>\ncombinator; at what type would you take the fixed-point? In Coq, the<br>\nworkaround would be to define a recursive value of type \"forall a. foo<br>\na -&gt; nat\", with the type parameter made explicit.</p>\n<p>So basically, unless Isabelle's type system is extended with rank-2<br>\npolymorphism, these kinds of definitions will never be supported. The<br>\nonly workaround I can think of would be to use something like ZF set<br>\ntheory to encode everything in a single Isabelle type, allowing you to<br>\nessentially bypass Isabelle's type system altogether.</p>\n<ul>\n<li>Brian</li>\n</ul>",
        "id": 294077776,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660829559
    },
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\nIt often works to define a supertype. The example below can be encoded as</p>\n<p>datatype 'a foo = Bar 'a | Com' \"'a foo\" nat</p>\n<p>where \"Com' f n\" encodes \"Com (Some(...(Some f)...))\", with n nested<br>\nSomes. Fine-grained constraints are expressed as propositions on this type.</p>\n<p>Tobias</p>\n<p>Brian Huffman schrieb:</p>",
        "id": 294077856,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660829599
    }
]