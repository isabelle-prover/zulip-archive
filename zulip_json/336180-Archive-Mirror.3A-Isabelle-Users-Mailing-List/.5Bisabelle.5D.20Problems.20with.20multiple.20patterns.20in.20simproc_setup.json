[
    {
        "content": "<p>From: Christoph Madlener &lt;<a href=\"mailto:madlener@in.tum.de\">madlener@in.tum.de</a>&gt;<br>\nHello,</p>\n<p>I am writing some simprocs and encountered a problem when using <br>\nsimproc_setup to install them. As you can see in the attached example, <br>\nwhen multiple patterns for the simproc contain the same variable, the <br>\nsimproc isn't triggered for any of the given patterns. (I also <br>\nencountered a case where the simproc was triggered for some, but not all <br>\ngiven patterns)</p>\n<p>The problem can be avoided by either using unique identifiers, calling <br>\nsimproc_setup multiple times or using Simplifier.make_simproc - note <br>\nthat for the latter the patterns work as expected. I also attached an <br>\nexample with working solutions.</p>\n<p>Best regards,<br>\nChristoph<br>\n<a href=\"/user_uploads/14278/GAMa-1mtExszhPYh2xnEc_GP/Simproc_Match_Not_Working.thy\">Simproc_Match_Not_Working.thy</a><br>\n<a href=\"/user_uploads/14278/KHoZI3_kW3VE66StaI8khv7M/Simproc_Match_Working.thy\">Simproc_Match_Working.thy</a></p>",
        "id": 294764421,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661201248
    },
    {
        "content": "<p>From: Mathias Fleury &lt;<a href=\"mailto:mathias.fleury12@gmail.com\">mathias.fleury12@gmail.com</a>&gt;<br>\nHi Christoph,</p>\n<p>The problem is type inference. With (\"prod f A\" | \"sum f B\"), f gets the<br>\ntype 'a::type ⇒ 'b::{comm_monoid_add,comm_monoid_mult}. However, in your<br>\nlemmas, you get only either comm_monoid_add or comm_monoid_mult but not<br>\nboth. If you force the types to have both:</p>\n<p>lemma \"(\\&lt;Sum&gt;i=1..3. i) = (\\&lt;Sum&gt;i=0..2. (i ::<br>\n'b::{zero,numeral,ord,comm_monoid_add,comm_monoid_mult}) + 1)\"</p>\n<p>then the simproc triggers. The reason why [\\&lt;^term&gt;\\&lt;open&gt;prod f A\\&lt;close&gt;,<br>\n\\&lt;^term&gt;\\&lt;open&gt;sum f A\\&lt;close&gt;] works is that the type inference is done<br>\nseparately in the two expressions instead of being done together.</p>\n<p>Best regards,<br>\nMathias</p>\n<p>Le jeu. 24 oct. 2019 à 09:30, Christoph Madlener &lt;<a href=\"mailto:madlener@in.tum.de\">madlener@in.tum.de</a>&gt; a<br>\nécrit :</p>",
        "id": 294764425,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661201253
    },
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\nThis raises the question why type inference is applied to two alternative <br>\npatterns simultaneously. Function definitions (fun in Isabelle) don't do that <br>\nand it would be better if the simproc setup didn't do it either.</p>\n<p>Tobias<br>\n<a href=\"/user_uploads/14278/S6dOqmPTrxb8YfPfRvCr8v6G/smime.p7s\">smime.p7s</a></p>",
        "id": 294764434,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661201260
    },
    {
        "content": "<p>From: \"<a href=\"mailto:lammich@in.tum.de\">lammich@in.tum.de</a>\" &lt;<a href=\"mailto:lammich@in.tum.de\">lammich@in.tum.de</a>&gt;<br>\nAnother common beginner's trap is the simultaneous type inference on lemmas.<br>\nAt some point, you write down a list of statements in a single lemma. This<br>\nperfectly makes sense if the statements are related and are proved with the<br>\nsame by (auto...) method. However it is all too easy to have such lemmas a<br>\nless general type than intended, due to all statements being typed<br>\nsimultaneously. I still run into this trap occasionally...  </p>\n<p>Peter</p>",
        "id": 294764444,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661201266
    },
    {
        "content": "<p>From: Christoph Madlener &lt;<a href=\"mailto:madlener@in.tum.de\">madlener@in.tum.de</a>&gt;<br>\nOk, thank you all for your replies. I see what is happening now. I'm <br>\njust asking myself if this behavior is intended or \"just came to be\"?<br>\nWhat I can say though is that it obviously wasn't the behavior I was <br>\nexpecting and as far as I can tell it is also not documented (although <br>\nI'm<br>\nalso not sure what a good place for this information would be).</p>",
        "id": 294764449,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661201272
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nType inference is very useful, but there are sometimes situations where<br>\nusers get confused (very rarely). Luckily this is a non-issue today with<br>\nthe Isabelle Prover IDE: CTRL-hover tells you about inferred types.</p>\n<p>These are the traditional guidelines to isolate problems in<br>\nspecifications and implementations.</p>\n<p>If something does not work unexpectedly:</p>\n<p>(a) Inferred types might be more general or more special than expected.</p>\n<p>(b) The context might be wrong.</p>\n<p>The latter refers to type Proof.context in Isabelle/ML.</p>\n<p>Makarius</p>",
        "id": 294764524,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661201291
    },
    {
        "content": "<p>From: Manuel Eberl &lt;<a href=\"mailto:eberlm@in.tum.de\">eberlm@in.tum.de</a>&gt;<br>\nDear Makarius,</p>\n<p>I don't really undestand what you're trying to say.</p>\n<p>The question at hand is: Is the behaviour of simproc_setup here (type<br>\nchecking all the different patterns simultaneously, in the same context)<br>\nwhat it is supposed to do or not?</p>\n<p>I would argue that this is very much /not/ what it is supposed to do and<br>\nthat every pattern should fix variables and be type-checked<br>\nindependently. The patterns are independent of one another – why should<br>\nthey have a shared name space?</p>\n<p>What is your opinion?</p>\n<p>Manuel</p>",
        "id": 294764537,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661201303
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nThe default answer: by default the behaviour of the system is correct<br>\nand as intended. There can be nonetheless situations of user confusion:<br>\nthe system provides tools to work that out, notably for type-inference.</p>\n<p>'simproc_setup' might be an odd corner case from the past -- I can't say<br>\non the spot, but 10min of inspecting of the sources and the history<br>\ndon't show any irregularities so far.</p>\n<p>Generally, it is a bad idea to change established behaviour on the spot,<br>\njust because the true reasons for it are forgotten, or take a long time<br>\nto investigate. The Isabelle jargon for that is \"brownian motion\":<br>\nsomething could be done like this or like that, and there is no clear<br>\nindication for either side. Adhoc changes would make it oscilate back<br>\nand forth over time, and break other applications for no particular reason.</p>\n<p>Makarius</p>",
        "id": 294764551,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661201315
    },
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\nThis question is not specific to Isabelle but overlaps with functional <br>\nprogramming in general and should have an abstract answer. As I mentioned, the <br>\n\"fun\" command typechecks equations separately, and not because this is Isabelle <br>\nbut because this is the standard in functional programming (for good reasons). <br>\nThus I had concluded that simproc_setup should behave the same. But the issue is <br>\nmore subtle. The simproc patterns do not guard different equations but one and <br>\nthe same object, the function definition. Hence they are akin to \"disjunctive <br>\npatterns\" in OCaml. Type inference for disjunctive patterns is simultaneous, <br>\nagain for good reasons, because the variables are used in the single body that <br>\nfollows the patterns. But patterns in simprocs are again slightly different in <br>\nthat the variables are never used and thus there is no need for simultaneous <br>\ntype inference.</p>\n<p>My conclusion is that simproc_patterns are different enough from normal and from <br>\ndisjunctive patterns that there is no abstract argument that they should behave <br>\nlike either.</p>\n<p>In the absence of a strong abstract argument, I would indeed leave things as <br>\nthey are.</p>\n<p>Tobias<br>\n<a href=\"/user_uploads/14278/78x186qOL29gO9EZbW8zkx-3/smime.p7s\">smime.p7s</a></p>",
        "id": 294764568,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661201321
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nOn 25/10/2019 12:31, Tobias Nipkow wrote:</p>\n<blockquote>\n<p>This question is not specific to Isabelle but overlaps with functional<br>\nprogramming in general and should have an abstract answer. As I<br>\nmentioned, the \"fun\" command typechecks equations separately, and not<br>\nbecause this is Isabelle but because this is the standard in functional<br>\nprogramming (for good reasons). Thus I had concluded that simproc_setup<br>\nshould behave the same. But the issue is more subtle. The simproc<br>\npatterns do not guard different equations but one and the same object,<br>\nthe function definition. Hence they are akin to \"disjunctive patterns\"<br>\nin OCaml. Type inference for disjunctive patterns is simultaneous, again<br>\nfor good reasons, because the variables are used in the single body that<br>\nfollows the patterns. But patterns in simprocs are again slightly<br>\ndifferent in that the variables are never used and thus there is no need<br>\nfor simultaneous type inference.</p>\n</blockquote>\n<p>These are good observations, and hint at various possibilities of the<br>\ndesign space (also going back to approx. 2007).</p>\n<p>The implementation in terms of existing Isabelle concepts is another<br>\nissue: when we started to support separate variable scopes as in<br>\n'function' or 'inductive', it was a genuine feature addition that<br>\nrequired approx. 10 years to get properly implemented. As a consequence<br>\nof recent consolidation, the PIDE markup informs the user about the<br>\ndifference: blue variables for a simultaneous global scope (e.g.<br>\n'simproc_setup') vs. green variables for local bindings with independent<br>\ntype inference (e.g. in 'function'). Note that \"blue\" could also mean<br>\n\"legacy variable treatment, without proper scoping\". Moreover, blue<br>\nvariables still lack the scope-group markup for PIDE.</p>\n<p>Generally, I find our situation of scopes and type inference less<br>\nconfusing than e.g. in Scala. In any case, when I use one of these<br>\nrather complex languages (Scala, TypeScript, Haskell etc.) I always rely<br>\non the IDE to tell me what has been worked out by the system.</p>\n<blockquote>\n<p>My conclusion is that simproc_patterns are different enough from normal<br>\nand from disjunctive patterns that there is no abstract argument that<br>\nthey should behave like either.</p>\n<p>In the absence of a strong abstract argument, I would indeed leave<br>\nthings as they are.</p>\n</blockquote>\n<p>I do agree with the conclusion.</p>\n<p>Makarius</p>",
        "id": 294764575,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661201327
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nThe \"list of statements\" is actually just a single big statement of the<br>\ngeneral form:</p>\n<p>lemma<br>\n     fixes xs<br>\n     assumes a: As and b: Bs<br>\n     shows c: Cs and d: Ds</p>\n<p>where everything is simultaneously inferred -- without that there would<br>\nbe a lot of confusion in applications, as empirically proven 20 years ago.</p>\n<p>A special case is the following multi-conclusion statement:</p>\n<p>lemma c: Cs and d: Ds</p>\n<p>That is still a single lemma, not multiple ones. The concept of such<br>\nsimultanous facts stems from 'assume' and 'have' in Isar, which mostly<br>\nbehave the same way.</p>\n<p>By explaining complex statements properly, user confusion can be<br>\nminimized. An alternative is to teach users early on to rely on the<br>\nProver IDE for the details.</p>\n<p>Makarius</p>",
        "id": 294764588,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661201333
    }
]