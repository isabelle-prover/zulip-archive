[
    {
        "content": "<p>From: \"Thiemann, René\" &lt;<a href=\"mailto:Rene.Thiemann@uibk.ac.at\">Rene.Thiemann@uibk.ac.at</a>&gt;<br>\nDear all,</p>\n<p>I’m currently changing the error messages in our formalization from the “string” type to<br>\n“String.literal”, so that the exported code uses target language <br>\nstrings in the generated code. Unfortunately, there seems to be a mistake<br>\nin the handling of newline:</p>\n<p>definition \"message = STR ''this is⏎a two line text''\"</p>\n<p>is translated into Haskell as </p>\n<p>message :: String;<br>\nmessage = \"this is\\\\a two line text\";</p>\n<p>where the \\\\ should be a \\n</p>\n<p>Moreover, also the following behavior is weird:</p>\n<p>lemma \"STR ''⏎'' = STR 0x5C\" \"integer_of_char (CHR ''⏎'') = 10\"<br>\n  by code_simp+</p>\n<p>Here, one observes that the ''⏎'' gets different characters codes, <br>\ndepending on whether it is put into a CHR or into a STR.<br>\nNote that 0x5C is precisely the backslash as in the generated Haskell code.</p>\n<p>Cheers,<br>\nRené</p>",
        "id": 294744290,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661192797
    },
    {
        "content": "<p>From: Dominique Unruh &lt;<a href=\"mailto:unruh@ut.ee\">unruh@ut.ee</a>&gt;<br>\nAs a workaround, you can use an actual newline:</p>\n<p>definition \"message = STR ''Line<br>\nLine''\"<br>\nthm message_def<br>\nexport_code message in Haskell</p>\n<p>This fragment also shows that the parser and printer are out of sync here.<br>\n\"thm message_def\" prints the newline as ⏎ but if we use ⏎ in the<br>\ndefinition, we get '\\\\'.</p>\n<p>Best wishes,<br>\nDominique</p>",
        "id": 294744315,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661192802
    },
    {
        "content": "<p>From: \"Thiemann, René\" &lt;<a href=\"mailto:Rene.Thiemann@uibk.ac.at\">Rene.Thiemann@uibk.ac.at</a>&gt;<br>\nDear Dominique,</p>\n<p>thanks for the hint, but I don’t want replace 709 \\&lt;newline&gt; by newlines in my sources.<br>\nThis will cause trouble in the indentation of the source and will be hard to undo later on.</p>\n<p>Therefore, at the moment I just replace all \\\\ by \\n in the generated source using \"sed”.</p>\n<p>Cheers,<br>\nRené</p>",
        "id": 294744367,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661192826
    },
    {
        "content": "<p>From: Florian Haftmann &lt;<a href=\"mailto:florian.haftmann@informatik.tu-muenchen.de\">florian.haftmann@informatik.tu-muenchen.de</a>&gt;<br>\nHi Rene,</p>\n<p>thanks for reporting this.</p>\n<p>The reason is that by accident Isabelle2018 accepts funny literals like<br>\n»STR \"ðäµ\"« which consist of a list of xsymbols »\\&lt;…&gt;« of which only the<br>\nfirst character »\\« is interpreted.</p>\n<p>Future releases will follow the same convention as »CHR \"…\"« and hence<br>\nonly allow proper ascii characters with the symbolic newline as special<br>\ncase.</p>\n<p>This is a mere syntax issue; the logical foundation is sane.</p>\n<p>Cheers,<br>\n    Florian<br>\n<a href=\"/user_uploads/14278/U9fYPt4DW5BgtYDuDi4mIiJB/signature.asc\">signature.asc</a></p>",
        "id": 294744681,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661192949
    }
]