[
    {
        "content": "<p>From: John Munroe &lt;<a href=\"mailto:munddr@gmail.com\">munddr@gmail.com</a>&gt;<br>\nHi</p>\n<p>If I want to model a line graph, should I give it the type of a product<br>\n(real * real) or a function (real =&gt; real)? With a product type, would the<br>\ngraph be perceived as a set of pairs?</p>\n<p>Thanks for the help in advance.</p>\n<p>John</p>",
        "id": 294156482,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660851407
    },
    {
        "content": "<p>From: Ramana Kumar &lt;<a href=\"mailto:rk436@cam.ac.uk\">rk436@cam.ac.uk</a>&gt;<br>\nThe type (real * real) would represent a point, not a graph.<br>\nYou could represent a graph with (real * real) set, but you'd need to<br>\nadditionally say that all the first components are distinct.<br>\n(real =&gt; real) seems a more suitable model.</p>",
        "id": 294156498,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660851413
    },
    {
        "content": "<p>From: Tjark Weber &lt;<a href=\"mailto:webertj@in.tum.de\">webertj@in.tum.de</a>&gt;<br>\nA line is often defined as a set of points (whose coordinates satisfy a<br>\nlinear equation). The corresponding HOL type would be (a subtype of)<br>\n\"(real * real) set\".</p>\n<p>The type \"real =&gt; real\" of real-valued functions is both too general (as<br>\nit also contains non-linear functions) and too restrictive (as it does<br>\nnot contain lines that are parallel to the y-axis).</p>\n<p>However, there are many different ways to <em>describe</em> a straight line:<br>\nfor instance, via two distinct points (corresponding to (a subtype of)<br>\n\"(real * real) * (real * real)\"), or via a linear equation of the form<br>\nax+by=c, where ab &lt;&gt; 0 (corresponding to (a subtype of) \"real * real *\nreal\"). It is difficult to give more specific advice without knowing<br>\nyour application.</p>\n<p>Best regards,<br>\nTjark</p>",
        "id": 294156507,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660851419
    },
    {
        "content": "<p>From: Elsa L Gunter &lt;<a href=\"mailto:egunter@illinois.edu\">egunter@illinois.edu</a>&gt;<br>\nThe type you use is somewhat dependent on your intended use.  However, I <br>\nshould point out that something of type real * real is just a point in <br>\ntwo dimensional space.  The type of a graph in R^2 is (real * real) set, <br>\nbut that is also the type of any blob in R^2.</p>\n<p>However you choose to model lines, you will need a type for the universe <br>\nin which the line lives, and a predicate saying that the entity indeed <br>\nis a line.  If you chose to model a line as a set in R^2, then you <br>\ncould  have a predicate</p>\n<p>is_line L =<br>\n((\\&lt;forall&gt;  p \\&lt;in&gt; L. fst p = (0::real)) \\&lt;and&gt; (\\&lt;forall&gt; y::real. <br>\n\\&lt;exists&gt; p\\&lt;in&gt;L. snd p = y))<br>\n\\&lt;or&gt;<br>\n((\\&lt;exists&gt; m. (\\&lt;forall&gt; p1\\&lt;in&gt; L. \\&lt;forall&gt; p2\\&lt;in&gt; L. ((snd p2 - snd <br>\np1) = m * (fst p2 - fst p1))))<br>\n  \\&lt;and&gt; (\\&lt;forall&gt; x. \\&lt;exists&gt; p \\&lt;in&gt; L. fst p = x))</p>\n<p>If you chose to use functions, you would have to create a predicate <br>\nexpressing that it was linear (but then you would get totallity \"for <br>\nfree\"), but you would also have to deal with how you would represent the <br>\nline<br>\n  y = 0.</p>\n<p>There are other choices of base representation as well.  For example, as <br>\nthe predicate is_line suggests, you might also want to consider sets of <br>\npairs of points, with a predicate describing that the set is exactly all <br>\nthe pairs of points witht he same ratio.</p>\n<p>I suggest that you first think about to what uses you wish to put lines <br>\nand let you base representation be guided by that.</p>\n<p>---Elsa</p>",
        "id": 294156533,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660851432
    },
    {
        "content": "<p>From: Steven Obua &lt;<a href=\"mailto:steven.obua@googlemail.com\">steven.obua@googlemail.com</a>&gt;<br>\nA further difference I have not seen mentioned so far is that in the set of pairs case, also the domain of the graph is encoded, whereas in the function representation the domain is essentially all of the reals.</p>\n<p>Steven</p>",
        "id": 294156596,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660851456
    },
    {
        "content": "<p>From: Jens Doll &lt;<a href=\"mailto:jd@cococo.de\">jd@cococo.de</a>&gt;<br>\nThe (really) ambiguous word product has given me a lot of worthy <br>\nthoughts by now. We, or the mathematicians, see it as a combination of <br>\ntwo or more spaces. On the other hand I wonder which are the spaces a <br>\nreal world product is made of? Look perhaps at my software <em>product</em> <br>\nElbe, which consists of components from different vendors and <br>\ndevelopers. Should I subsume it being simply a (cartesian) combination <br>\nof creative spaces?<br>\nJens ;-)</p>\n<p>BTW: There is a new version of Elbe and it is almost bug free:  <br>\n<a href=\"https://cococo.de/Elbe/\">https://cococo.de/Elbe/</a><br>\nHappy Reasoning!</p>",
        "id": 294156632,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660851472
    }
]