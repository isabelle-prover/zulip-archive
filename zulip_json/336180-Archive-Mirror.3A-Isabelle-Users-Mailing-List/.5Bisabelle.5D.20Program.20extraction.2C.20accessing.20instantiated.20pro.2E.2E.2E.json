[
    {
        "content": "<p>From: Matthias Schlaipfer &lt;<a href=\"mailto:matthias.schlaipfer@tuwien.ac.at\">matthias.schlaipfer@tuwien.ac.at</a>&gt;<br>\nHello,</p>\n<p>I am trying to understand the implementation of program extraction in <br>\nIsabelle. I am wondering whether it is possible to access the <br>\ninstantiated proof terms (like the output of the Isar commands prf or <br>\nfull_prf) in the extract/extr functions in Pure/Proof/extraction.ml.</p>\n<p>I tried printing them for better understanding and thought it should be <br>\npossible similar as in string_of_prfs (in Pure/Isar/isar_cmd.ML), but I <br>\ndon't know how to access the context, or if it is even possible at this <br>\npoint.</p>\n<p>Is there an easy way to access the instantiated proof terms in the extr <br>\nfunctions?</p>\n<p>Thank you and best regards,<br>\nMatthias</p>",
        "id": 294635404,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661159939
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nOn Mon, 20 Apr 2015, Matthias Schlaipfer wrote:</p>\n<blockquote>\n<p>I am trying to understand the implementation of program extraction in <br>\nIsabelle. I am wondering whether it is possible to access the instantiated <br>\nproof terms (like the output of the Isar commands prf or full_prf) in the <br>\nextract/extr functions in Pure/Proof/extraction.ml.</p>\n<p>I tried printing them for better understanding and thought it should be <br>\npossible similar as in string_of_prfs (in Pure/Isar/isar_cmd.ML), but I don't <br>\nknow how to access the context, or if it is even possible at this point.</p>\n</blockquote>\n<p>I am not quite sure what you are trying to do, but here are some general <br>\nhints.</p>\n<p>The formal Proof.context is easily accessible to any tool that is somehow <br>\nintegrated in the system.  If you just experiment with Isabelle/ML (e.g. <br>\nvia 'ML' or 'ML_file') you can access the compile-time context via the <br>\n@{context} antiquotation.  If you implement a diagnostic print command, <br>\nyou can use e.g. Toplevel.context_of to get a proper run-time context.</p>\n<p>Sometimes old tools operate on a global theory instead of a proper local <br>\nProof.context.  If you have already some (ctxt: Proof.context), you pass <br>\n(Proof_Context.theory_of ctxt) to such a tool.</p>\n<p>In rare situations, e.g. inside some old style hook that only provides a <br>\n(thy: theory) value, you can use (Proof_Context.init_global thy) as last <br>\nresort.</p>\n<blockquote>\n<p>Is there an easy way to access the instantiated proof terms in the extr <br>\nfunctions?</p>\n</blockquote>\n<p>I don't quite understand that.  Can you point to the precise spot in the <br>\nIsabelle sources where you are looking at?</p>\n<p>Makarius</p>",
        "id": 294643144,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661162961
    }
]