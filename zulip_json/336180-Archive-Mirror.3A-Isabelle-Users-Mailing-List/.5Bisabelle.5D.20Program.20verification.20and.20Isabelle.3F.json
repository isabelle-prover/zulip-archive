[
    {
        "content": "<p>From: Klaus Ostermann &lt;<a href=\"mailto:ostermann@informatik.tu-darmstadt.de\">ostermann@informatik.tu-darmstadt.de</a>&gt;<br>\nI have seen many examples of proving properties of programming languages (such <br>\nas type soundness) in Isabelle.</p>\n<p>I wonder whether it is also possible to prove properties of individual programs <br>\nwritten in some language, say Java or C#. It would of course be tiresome to <br>\nmanually \"translate\" the program into Isabelle, but in principle it should be <br>\npossible to \"compile\" a Java program into an Isabelle specification, e.g., by <br>\npartially evaluating a Java semantics written in Isabelle with an input program.</p>\n<p>Has something like this been tried (maybe with another theorem prover)? If yes, <br>\ncould you give me a reference? If no, are there specific reasons why it has not <br>\nbeen tried?</p>\n<p>Regards,<br>\nKlaus</p>",
        "id": 294042362,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660815870
    },
    {
        "content": "<p>From: Peter Homeier &lt;<a href=\"mailto:phomeier@gmail.com\">phomeier@gmail.com</a>&gt;<br>\nYou may be interested in the Sunrise project.  Although not targeting Java<br>\nor C#, only a small imperative language similar to a subset of Pascal, it is<br>\na genuine system for proving partial or total correctness of individual<br>\nprograms written in the Sunrise language, using the Higher Order Logic<br>\ntheorem prover.</p>\n<p>Rather than by translation, which could be considered a \"shallow embedding,\"<br>\nit is based on a \"deep embedding\" of Sunrise within HOL.  Deep embeddings<br>\nare much more difficult to create, but once built, have significant<br>\nadvantages over shallow embeddings.</p>\n<p>Please see</p>\n<p><a href=\"http://www.trustworthytools.com/id13.html\">http://www.trustworthytools.com/id13.html</a></p>\n<p>Peter</p>",
        "id": 294042411,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660815895
    },
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\nThe compilation approach (without partial evaluation) has been used in <br>\nat least two systems: the Loop tool by Huisman, Jacobs et al, and the <br>\nJive system by Mueller, Poetzsch-Heffter and Rauch.</p>\n<p>Tobias</p>\n<p>Klaus Ostermann schrieb:</p>",
        "id": 294042443,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660815907
    },
    {
        "content": "<p>From: Norbert Schirmer &lt;<a href=\"mailto:norbert.schirmer@web.de\">norbert.schirmer@web.de</a>&gt;<br>\nHello Klaus Ostermann,</p>\n<p>as part of the Verisoft project (<a href=\"http://www.verisoft.de\">www.verisoft.de</a>) I have developed a <br>\nverification environment for sequential imperative programs over the last few <br>\nyears. It's a combination of a deep and shallow embedding and provides a <br>\nquite general core language that is suitable to express most common language <br>\nconstructs of imperative programming languages. Allthough the focus in <br>\nVerisoft is on a subset of C, I believe it can also be customized to express <br>\nthe object-oriented  features of languages like Java or C#. I look forward to <br>\nsomeone heading in this direction. So if you are interested have a look at: </p>\n<p><a href=\"http://www4.in.tum.de/~schirmer/verification_environment.html\">http://www4.in.tum.de/~schirmer/verification_environment.html</a></p>\n<p>Norbert</p>",
        "id": 294042641,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660815979
    },
    {
        "content": "<p>From: <a href=\"mailto:Primrose.Mbanefo@Infineon.com\">Primrose.Mbanefo@Infineon.com</a><br>\nI work on the proof of properties of programs in SystemC (a c++ class library) and use the compilation approach (with shallow embedding). The work is quite preliminary and still has no external references to it.</p>\n<p>But an overview of deep/shallow embeddings can be found in:</p>\n<p>Azurat, A. &amp; Prasetya, I.<br>\nA survey on Embedding Programming logics in a Theorem Prover<br>\nInst. of Information and Comp. Science, Utrecht Univ., 2002<br>\nTech report: UU-CS-2002-007</p>\n<p>You can, in addition to extending Norberts sequential environment, also consider compiling towards an already existing java embedding (which might most likely need some extending too):<br>\nvon Oheimb, D. <br>\nAnalyzing Java in Isabelle/HOL-Formalization, Type Safety and Hoare Logic<br>\nPh.D. thesis, Technische Universität München, 2001</p>\n<p>Regards,<br>\nPrimrose</p>",
        "id": 294043309,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660816244
    }
]