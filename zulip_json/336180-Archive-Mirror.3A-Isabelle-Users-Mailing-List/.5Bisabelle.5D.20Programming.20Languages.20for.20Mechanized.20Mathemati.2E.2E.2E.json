[
    {
        "content": "<p>From: Freek Wiedijk &lt;<a href=\"mailto:freek@cs.ru.nl\">freek@cs.ru.nl</a>&gt;<br>\nProgramming Languages for Mechanized Mathematics Workshop</p>\n<p>As part of Calculemus 2007 <br>\n&lt;<a href=\"http://www.risc.uni-linz.ac.at/about/conferences/Calculemus2007/\">http://www.risc.uni-linz.ac.at/about/conferences/Calculemus2007/</a>&gt;</p>\n<p>Hagenberg, Austria</p>\n<p>[http://www.cas.mcmaster.ca/plmms07/]</p>\n<p>The intent of this workshop is to examine more closely the intersection <br>\nbetween programming languages and mechanized mathematics systems (MMS). <br>\nBy MMS, we understand computer algebra systems (CAS), [automated] <br>\ntheorem provers (TP/ATP), all heading towards the development of fully <br>\nunified systems (the MMS), sometimes also called universal mathematical <br>\nassistant systems (MAS) (see Calculemus 2007 <br>\n&lt;<a href=\"http://www.risc.uni-linz.ac.at/about/conferences/Calculemus2007/\">http://www.risc.uni-linz.ac.at/about/conferences/Calculemus2007/</a>&gt;).</p>\n<p>There are various ways in which these two subjects of /programming <br>\nlanguages/ and /systems for mathematics/ meet:</p>\n<p>* Many systems for mathematics contain a dedicated programming<br>\n      language. For instance, most computer algebra systems contain a<br>\n      dedicated language (and are frequently built in that same<br>\n      language); some proof assistants (like the Ltac language for Coq)<br>\n      also have an embedded programming language. Note that in many<br>\n      instances this language captures only algorithmic content, and<br>\n      /declarative/ or /representational/ issues are avoided.</p>\n<p>* The /mathematical languages/ of many systems for mathematics are<br>\n      very close to a functional programming language. For instance the<br>\n      language of ACL2 is just Lisp, and the language of Coq is very<br>\n      close to Haskell. But even the mathematical language of the HOL<br>\n      system can be used as a functional programming language that is<br>\n      very close to ML and Haskell. On the other hand, these languages<br>\n      also contain very rich specification capabilities, which are<br>\n      rarely available in most computation-oriented programming<br>\n      languages. And even then, many specification languages ((B, Z,<br>\n      Maude, OBJ3, CASL, etc) can still teach MMSes a trick or two<br>\n      regarding representational power.</p>\n<p>* Conversely, functional programming languages have been getting<br>\n      \"more mathematical\" all the time. For instance, they seem to have<br>\n      discovered the value of dependent types rather recently. But they<br>\n      are still not quite ready to 'host' mathematics (the non-success<br>\n      of docon &lt;<a href=\"http://www.haskell.org/docon/\">http://www.haskell.org/docon/</a>&gt; being typical). There are<br>\n      some promising languages on the horizon (Epigram<br>\n      &lt;<a href=\"http://www.e-pig.org/\">http://www.e-pig.org/</a>&gt;, Omega<br>\n      &lt;<a href=\"http://web.cecs.pdx.edu/%7Esheard/Omega/index.html\">http://web.cecs.pdx.edu/%7Esheard/Omega/index.html</a>&gt;) as well as<br>\n      some hybrid systems (Agda &lt;<a href=\"http://agda.sourceforge.net/\">http://agda.sourceforge.net/</a>&gt;, Focal<br>\n      &lt;<a href=\"http://focal.inria.fr/site/index.php\">http://focal.inria.fr/site/index.php</a>&gt;), although it is unclear if<br>\n      they are truly capable of expressing the full range of ideas<br>\n      present in mathematics.</p>\n<p>* Systems for mathematics are used to prove programs correct. (One<br>\n      method is to generate \"correctness conditions\" from a program that<br>\n      has been annotated in the style of Hoare logic and then prove<br>\n      those conditions in a proof assistant.) An interesting question is<br>\n      what improvements are needed for this both on the side of the<br>\n      mathematical systems and on the side of the programming languages.</p>\n<p>We are interested in all these issues. We hope that a certain synergy <br>\nwill develop between those issues by having them explored in parallel.</p>\n<p>These issues have a very colourful history. Many programming language <br>\ninnovations first appeared in either CASes or Proof Assistants, before <br>\nmigrating towards more mainstream languages. One can cite (in no <br>\nparticular order) type inference, dependent types, generics, <br>\nterm-rewriting, first-class types, first-class expressions, first-class <br>\nmodules, code extraction, and so on. However, a number of these <br>\ninnovations were never aggressively pursued by system builders, letting <br>\nthem instead be developped (slowly) by programming language researchers. <br>\nSome, like type inference and generics have flourished. Others, like <br>\nfirst-class types and first-class expressions, are not seemingly being <br>\nresearched by anyone.</p>\n<p>We want to critically examine what has worked, and what has not. Why are <br>\nall the current ``popular'' computer algebra systems untyped? Why are <br>\nthe (strongly typed) proof assistants so much harder to use than a <br>\ntypical CAS? But also look at question like what forms of polymorphism <br>\nexists in mathematics? What forms of dependent types exist in <br>\nmathematics? How can MMS regain the upper hand on issues of <br>\n'genericity'? What are the biggest barriers to using a more mainstream <br>\nlanguage as a host language for a CAS or an ATP?</p>\n<p>This workshop will accept two kinds of submissions: full research papers <br>\nas well as position papers. Research papers should be nore more than 15 <br>\npages in length, and positions papers no more than 3 pages. Submission <br>\nwill be through _EasyChair_. An informal version of the proceedings will <br>\nbe available at the workshop, with a more formal version to appear <br>\nlater. We are looking into having the best papers completed into full <br>\npapers and published as a special issue of a Journal (details to follow).</p>\n<p>Important Dates</p>\n<p>April 25, 2007: Submission Deadline<br>\nJune 29-30, 2007: Workshop</p>\n<p>Program Committee</p>\n<p>Lennart Augustsson &lt;<a href=\"http://www.cs.chalmers.se/%7Eaugustss\">http://www.cs.chalmers.se/%7Eaugustss</a>&gt; [Credit Suisse]<br>\nWieb Bosma &lt;<a href=\"http://www.math.ru.nl/%7Ebosma/&gt;[Radboud\">http://www.math.ru.nl/%7Ebosma/&gt;[Radboud</a> University <br>\nNijmegen, Netherlands]<br>\nJacques Carette &lt;<a href=\"http://www.cas.mcmaster.ca/%7Ecarette\">http://www.cas.mcmaster.ca/%7Ecarette</a>&gt; (co-Chair) <br>\n[McMaster University, Canada]<br>\nDavid Delahaye &lt;<a href=\"http://cedric.cnam.fr/%7Edelahaye/\">http://cedric.cnam.fr/%7Edelahaye/</a>&gt; [CNAM, France]<br>\nJean-Christophe Filliâtre &lt;<a href=\"http://www.lri.fr/%7Efilliatr/\">http://www.lri.fr/%7Efilliatr/</a>&gt; [CNRS and <br>\nUniversité de Paris-Sud, France]<br>\nJohn Harrison &lt;<a href=\"http://www.cl.cam.ac.uk/%7Ejrh13/\">http://www.cl.cam.ac.uk/%7Ejrh13/</a>&gt; [Intel Corporation, USA]<br>\nMarkus (Makarius) Wenzel &lt;<a href=\"http://www4.in.tum.de/%7Ewenzelm/\">http://www4.in.tum.de/%7Ewenzelm/</a>&gt; [Technische <br>\nUniversität München, Germany]<br>\nFreek Wiedijk &lt;<a href=\"http://www.cs.ru.nl/%7Efreek/\">http://www.cs.ru.nl/%7Efreek/</a>&gt; (co-Chair) [Radboud <br>\nUniversity Nijmegen, Netherlands]<br>\nWolfgang Windsteiger &lt;<a href=\"http://www.risc.uni-linz.ac.at/people/wwindste/\">http://www.risc.uni-linz.ac.at/people/wwindste/</a>&gt; <br>\n[University of Linz, Austria]</p>\n<p>Location and Registration</p>\n<p>Location and registration information can be found on the Calculemus <br>\n&lt;<a href=\"http://www.risc.uni-linz.ac.at/about/conferences/Calculemus2007/\">http://www.risc.uni-linz.ac.at/about/conferences/Calculemus2007/</a>&gt; web <br>\nsite.</p>",
        "id": 294047867,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660818070
    }
]