[
    {
        "content": "<p>From: John Munroe &lt;<a href=\"mailto:munddr@gmail.com\">munddr@gmail.com</a>&gt;<br>\nHi all,</p>\n<p>I have a rather basic question:</p>\n<p>Given the following constants and axioms:</p>\n<p>typedecl T1</p>\n<p>consts<br>\n F :: \"T1 \\&lt;Rightarrow&gt; real\"<br>\n G :: \"T1 \\&lt;Rightarrow&gt; real\"<br>\n C :: real</p>\n<p>axioms<br>\n ax1: \"\\&lt;exists&gt;P. \\&lt;exists&gt;s1\\&lt;in&gt;P. \\&lt;exists&gt;s2\\&lt;in&gt;P. s1 \\&lt;noteq&gt;<br>\ns2 \\&lt;and&gt; F s1 &lt; F s2 \\&lt;and&gt; G s1 &lt;= G s2\"<br>\n ax1a: \"\\&lt;exists&gt;P. \\&lt;forall&gt;s1\\&lt;in&gt;P. \\&lt;forall&gt;s2\\&lt;in&gt;P. s1 \\&lt;noteq&gt;<br>\ns2 \\&lt;and&gt; F s1 &lt; F s2 \\&lt;and&gt; G s1 &lt;= G s2\"<br>\n ax2: \"F p &gt; 0\"<br>\n ax3: \"C &gt; 0\"</p>\n<p>I can prove that \"\\&lt;exists&gt; func s. func s \\&lt;noteq&gt; (\\&lt;lambda&gt; s. (F<br>\ns, (C  / F s)))\" with</p>\n<p>lemma lem1: \"\\&lt;exists&gt; func s. func s \\&lt;noteq&gt; (\\&lt;lambda&gt; s. (F s, (C  / F s)))\"<br>\nproof (intro exI)<br>\n have \"\\&lt;forall&gt; s1 s2 t. (F s1&lt; F s2) --&gt; (C  / F s1) &gt; (C  / F s2)\"<br>\n   using ax3 ax2<br>\n   by (simp add: divide_inverse real_less_def)<br>\n then show \"(\\&lt;lambda&gt; s. (F s, G s)) \\&lt;noteq&gt; (\\&lt;lambda&gt; s. (F s, (C<br>\n / F s)))\"<br>\n   using ax1<br>\n   apply (intro notI)<br>\n   apply (simp add: expand_fun_eq real_mult_commute)<br>\n   by (metis linorder_not_le)<br>\nqed</p>\n<p>However, if I want to <em>not</em> use ax1 but use ax1a instead, the proof<br>\nbreaks. Isn't ax1a stronger than ax1? If so, why can a proof using ax1<br>\nbreak when a stronger ax1a is used as a fact instead?</p>\n<p>Any help will be appreciated.</p>\n<p>Thanks<br>\nJohn</p>",
        "id": 294107119,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660835583
    },
    {
        "content": "<p>From: Lawrence Paulson &lt;<a href=\"mailto:lp15@cam.ac.uk\">lp15@cam.ac.uk</a>&gt;<br>\nIt is not stronger than ax1. In fact, ax1a can be proved as a theorem using auto. This is because P could simply denote the empty set.</p>\n<p>Larry Paulson</p>",
        "id": 294107157,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660835595
    },
    {
        "content": "<p>From: Lawrence Paulson &lt;<a href=\"mailto:lp15@cam.ac.uk\">lp15@cam.ac.uk</a>&gt;<br>\nThis new version of your axiom still provable using auto and therefore completely weak. You might have better luck with this formulation:</p>\n<p>lemma \"\\&lt;exists&gt;P. P \\&lt;noteq&gt; {} \\&lt;and&gt; (\\&lt;forall&gt;s1\\&lt;in&gt;P. \\&lt;forall&gt;s2\\&lt;in&gt;P. s1 \\&lt;noteq&gt; s2 \\&lt;and&gt; F s1 &lt; F s2 \\&lt;and&gt; G s1 &lt;= G s2)\"</p>\n<p>Larry Paulson</p>",
        "id": 294107182,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660835607
    },
    {
        "content": "<p>From: John Munroe &lt;<a href=\"mailto:munddr@gmail.com\">munddr@gmail.com</a>&gt;<br>\nI see. But even if ax1 was:</p>\n<p>ax1: \"\\&lt;exists&gt;P. \\&lt;exists&gt;s1\\&lt;in&gt;P. \\&lt;exists&gt;s2\\&lt;in&gt;P. P \\&lt;noteq&gt; {}<br>\n\\&lt;and&gt; s1 \\&lt;noteq&gt; s2 \\&lt;and&gt; F s1 &lt; F s2 \\&lt;and&gt; G s1 &lt;= G s2\"</p>\n<p>and ax1a was:</p>\n<p>ax1a: \"\\&lt;exists&gt;P. \\&lt;forall&gt;s1\\&lt;in&gt;P. \\&lt;forall&gt;s2\\&lt;in&gt;P. P \\&lt;noteq&gt; {}<br>\n\\&lt;and&gt; s1 \\&lt;noteq&gt; s2 \\&lt;and&gt; F s1 &lt; F s2 \\&lt;and&gt; G s1 &lt;= G s2\"</p>\n<p>The second part of the proof still breaks. Am I supposed to simplify<br>\nthe goal further?</p>\n<p>Thanks<br>\nJohn</p>",
        "id": 294107221,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660835619
    },
    {
        "content": "<p>From: Tim McKenzie &lt;<a href=\"mailto:tjm1983@gmail.com\">tjm1983@gmail.com</a>&gt;<br>\nCertainly this will make it easier to prove the desired result, since<br>\nthis formulation (as an axiom) allows you to derive a contradiction.<br>\nSee attached.</p>\n<p>Timothy<br>\n&lt;&gt;&lt;<br>\n<a href=\"/user_uploads/14278/bny4mlq4eR6BBpXlQY07dtSD/Scratch.thy\">Scratch.thy</a></p>",
        "id": 294110752,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660836736
    }
]