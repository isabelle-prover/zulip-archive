[
    {
        "content": "<p>From: \"Aaron W. Hsu\" &lt;<a href=\"mailto:arcfide@sacrideo.us\">arcfide@sacrideo.us</a>&gt;<br>\nThank you for your explanation.  I am still going through things, but <br>\nthis thread has been most educational.</p>",
        "id": 294157025,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660851616
    },
    {
        "content": "<p>From: \"Aaron W. Hsu\" &lt;<a href=\"mailto:arcfide@sacrideo.us\">arcfide@sacrideo.us</a>&gt;<br>\nHello:</p>\n<p>I have been trying to see if there is a straightforward way to prove the <br>\nfollowing in Isabelle:</p>\n<p>card {x. list_all2 op &lt; x (a # s)} = a * card {x. list_all2 op &lt; x s}</p>\n<p>Specifically, I suspect that this must have come up somewhere before, and <br>\nI seet some statements that might be related in the various built-in <br>\ntheories, but I am so new to Isabelle that I am having trouble putting <br>\nthem together into a simple proof. I would appreciate any help on the <br>\nnicest way to go about this proof.</p>",
        "id": 294160861,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660853094
    },
    {
        "content": "<p>From: Thomas Sewell &lt;<a href=\"mailto:Thomas.Sewell@nicta.com.au\">Thomas.Sewell@nicta.com.au</a>&gt;<br>\nProbably nothing exactly like this has come up before. There is a <br>\nrelevant fact, list_all2_Cons2, which you can find by searching for <br>\n\"list_all2 _ _ (_ # _)\" with the find_theorems facility.</p>\n<p>I can prove your equality by showing your set construction analogous to <br>\na cartesian product.</p>\n<p>lemma<br>\n   \"card {x. list_all2 op &lt; x (a # s)} = a * card {x. list_all2 op &lt; x s}\"<br>\nproof -<br>\n   have eq_cart: \"{x. list_all2 op &lt; x (a # s)}<br>\n     = (%(x, y). x # y) ` ({..&lt; a} &lt;*&gt; {x. list_all2 op &lt; x s})\"<br>\n     by (auto simp: list_all2_Cons2)<br>\n   have inj: \"inj (%(x, y). x # y)\"<br>\n     by (auto intro: inj_onI)<br>\n   show ?thesis<br>\n     by (simp add: eq_cart card_image subset_inj_on[OF inj]<br>\n                   card_cartesian_product)<br>\nqed</p>\n<p>I wonder if there is a simpler proof.</p>\n<p>Constructing terms using simple operators like image (<code>) and cartesian \nproduct (&lt;*&gt;) tends to make life easier in Isabelle, since it is clear \nwhat combinations of operators to search for rules about. Searching for \n\"card (_ &lt;*&gt; _)\" locates card_cartesian_product and \"card (_ </code> _)\" <br>\nyields card_image, etc.</p>\n<p>Yours,<br>\n     Thomas.</p>",
        "id": 294160879,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660853102
    },
    {
        "content": "<p>From: \"Aaron W. Hsu\" &lt;<a href=\"mailto:arcfide@sacrideo.us\">arcfide@sacrideo.us</a>&gt;<br>\nHello Thomas:</p>\n<p>Thank you for the detailed response...</p>\n<p>On Mon, 07 May 2012 14:21:16 +1000, Thomas Sewell wrote:</p>\n<blockquote>\n<p>Probably nothing exactly like this has come up before. There is a<br>\nrelevant fact, list_all2_Cons2, which you can find by searching for<br>\n\"list_all2 _ _ (_ # _)\" with the find_theorems facility.</p>\n</blockquote>\n<p>Thank you for reminding me!  I had forgotten about the find_theorems <br>\nfacility, or maybe I thought that was a Proof General specific feature. I <br>\njust tested it and it works fine in Isabelle/jEdit, so I am happy.</p>\n<blockquote>\n<p>lemma<br>\n   \"card {x. list_all2 op &lt; x (a # s)} = a * card {x. list_all2 op &lt; x<br>\n   s}\"<br>\nproof -<br>\n   have eq_cart: \"{x. list_all2 op &lt; x (a # s)}<br>\n     = (%(x, y). x # y) ` ({..&lt; a} &lt;*&gt; {x. list_all2 op &lt; x s})\"<br>\n     by (auto simp: list_all2_Cons2)</p>\n</blockquote>\n<p>The above I understand...</p>\n<blockquote>\n<p>have inj: \"inj (%(x, y). x # y)\"<br>\n     by (auto intro: inj_onI)</p>\n</blockquote>\n<p>This is proving injectivity, but I do not understand the use of intro.  I <br>\nhave mostly used auto and simp up to this point in my experience with <br>\nIsabelle. I shall have to read up on that.</p>\n<blockquote>\n<p>show ?thesis<br>\n     by (simp add: eq_cart card_image subset_inj_on[OF inj]<br>\n                   card_cartesian_product)<br>\nqed</p>\n</blockquote>\n<p>What is the OF here?  I understand the other elements, but what does the <br>\nsubset_inj_on[OF inj] part do?</p>\n<p>Thank you again for your assistance.</p>\n<p>Yours truly,</p>\n<p>Aaron W. Hsu</p>",
        "id": 294160963,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660853125
    },
    {
        "content": "<p>From: Lars Noschinski &lt;<a href=\"mailto:noschinl@in.tum.de\">noschinl@in.tum.de</a>&gt;<br>\nA[OF B] discharges the first premise of A with B.</p>\n<p>-- Lars</p>",
        "id": 294160988,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660853135
    },
    {
        "content": "<p>From: Thomas Sewell &lt;<a href=\"mailto:Thomas.Sewell@nicta.com.au\">Thomas.Sewell@nicta.com.au</a>&gt;<br>\nApologies about the dense proofs. If you know how the various tactics <br>\nwork you can give them hints about how to use rules, which may speed <br>\nthem up enormously. I now do this by habit.</p>\n<p>This may not be best practice for proofs anyone wants to read.</p>\n<p>Anyway, feel free to look up the various classical annotations (intro: <br>\ninj_on does the same thing as declare inj_on[intro] locally). The <br>\nattributes OF, rotated and THEN can be quite useful, and on rare <br>\noccasions the attributes where and simplified can help. See the <br>\ndocumentation, I guess.</p>\n<p>The point of the OF was that card_image needs the function to be <br>\ninjective only on the relevant set, but to save typing, I proved it <br>\nfully injective (an abbreviation for inj_on f UNIV). The subset_inj_on <br>\nrule connects these facts. An alternative would be to prove \"ALL S. <br>\ninj_on f S\".</p>\n<p>The reason I didn't just give subset_inj_on and inj to the simplifier is <br>\nthat I was concerned it might use subset_inj_on again to solve its own <br>\nargument and thus go on vacation. The OF construction mandates that the <br>\nrules be used together in a particular way.</p>\n<p>As for finding a simpler proof:<br>\nlemma<br>\n   \"card {x. list_all2 op &lt; x (a # s)} = a * card {x. list_all2 op &lt; x s}\"<br>\nproof -<br>\n   have eq_cart: \"{x. list_all2 op &lt; x (a # s)}<br>\n     = (%(x, y). x # y) ` ({..&lt; a} &lt;*&gt; {x. list_all2 op &lt; x s})\"<br>\n     by (auto simp: list_all2_Cons2)<br>\n   thus ?thesis<br>\n     by (simp add: card_image inj_on_def card_cartesian_product)<br>\nqed</p>\n<p>The injective bit was trivial, for appropriate definitions of triviality.</p>\n<p>Yours,<br>\n     Thomas.</p>\n<hr>\n<p>From: <a href=\"mailto:cl-isabelle-users-bounces@lists.cam.ac.uk\">cl-isabelle-users-bounces@lists.cam.ac.uk</a> <br>\n[cl-isabelle-users-bounces@lists.cam.ac.uk] On Behalf Of Aaron W. Hsu <br>\n[arcfide@sacrideo.us]<br>\nSent: Tuesday, May 08, 2012 4:06 AM<br>\nTo: <a href=\"mailto:cl-isabelle-users@lists.cam.ac.uk\">cl-isabelle-users@lists.cam.ac.uk</a><br>\nSubject: Re: [isabelle] Proof help on Cardinality and list_all2</p>\n<p>Hello Thomas:</p>\n<p>Thank you for the detailed response...</p>\n<p>On Mon, 07 May 2012 14:21:16 +1000, Thomas Sewell wrote:</p>\n<blockquote>\n<p>Probably nothing exactly like this has come up before. There is a<br>\nrelevant fact, list_all2_Cons2, which you can find by searching for<br>\n\"list_all2 _ _ (_ # _)\" with the find_theorems facility.</p>\n</blockquote>\n<p>Thank you for reminding me!  I had forgotten about the find_theorems<br>\nfacility, or maybe I thought that was a Proof General specific feature. I<br>\njust tested it and it works fine in Isabelle/jEdit, so I am happy.</p>\n<blockquote>\n<p>lemma<br>\n   \"card {x. list_all2 op &lt; x (a # s)} = a * card {x. list_all2 op &lt; x<br>\n   s}\"<br>\nproof -<br>\n   have eq_cart: \"{x. list_all2 op &lt; x (a # s)}<br>\n     = (%(x, y). x # y) ` ({..&lt; a} &lt;*&gt; {x. list_all2 op &lt; x s})\"<br>\n     by (auto simp: list_all2_Cons2)</p>\n</blockquote>\n<p>The above I understand...</p>\n<blockquote>\n<p>have inj: \"inj (%(x, y). x # y)\"<br>\n     by (auto intro: inj_onI)</p>\n</blockquote>\n<p>This is proving injectivity, but I do not understand the use of intro.  I<br>\nhave mostly used auto and simp up to this point in my experience with<br>\nIsabelle. I shall have to read up on that.</p>\n<blockquote>\n<p>show ?thesis<br>\n     by (simp add: eq_cart card_image subset_inj_on[OF inj]<br>\n                   card_cartesian_product)<br>\nqed</p>\n</blockquote>\n<p>What is the OF here?  I understand the other elements, but what does the<br>\nsubset_inj_on[OF inj] part do?</p>\n<p>Thank you again for your assistance.</p>\n<p>Yours truly,</p>\n<p>Aaron W. Hsu</p>",
        "id": 294161115,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660853168
    }
]