[
    {
        "content": "<p>From: Martin Desharnais &lt;<a href=\"mailto:martin.desharnais@gmail.com\">martin.desharnais@gmail.com</a>&gt;<br>\nHi Mathias, Mark, and Lawrence,</p>\n<p>Thank you for your help. I now realize that the lists I am using just <br>\nhappen to be of equal size but that I never actually used this property.</p>\n<p>I reformulated my formalization to use wf_lex and it now works <br>\nperfectly. I should have searched more thoroughly for these definitions <br>\nand not only in the Wellfounded theory.</p>\n<p>Thank you very much,<br>\nMartin Desharnais</p>",
        "id": 294757463,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661198151
    },
    {
        "content": "<p>From: Martin Desharnais &lt;<a href=\"mailto:martin.desharnais@gmail.com\">martin.desharnais@gmail.com</a>&gt;<br>\nDear Isabelle users,</p>\n<p>I am badly in need of help to prove a lemma about well-foundedness. I <br>\ndefined the lexicographic ordering of two lists of equal length as follows.</p>\n<p>fun lex_list :: \"('a ⇒ 'a ⇒ bool) ⇒ 'a list ⇒ 'a list ⇒ bool\" where<br>\n   \"lex_list order (x # xs) (y # ys) =<br>\n     (order x y ∨ x = y ∧ lex_list order xs ys)\" |<br>\n   \"lex_list order _ _ = False\"</p>\n<p>I now want to show that, if the ordering relation is well-founded, so <br>\nwill be its lexicographic lifting to lists.</p>\n<p>lemma lex_list_wfP:<br>\n   assumes \"wfP order\"<br>\n   shows \"wfP (lex_list order)\"<br>\noops</p>\n<p>Sadly, I fail to find the correct way to prove this. My first strategy <br>\nwithout induction [1] obviously failed in the recursive case. I then <br>\ntried various proofs by functional induction over lex_list, but always <br>\npainted myself into a corner. Does someone knows what the correct proof <br>\nwould be?</p>\n<p>Regards,<br>\nMartin Desharnais</p>\n<p>[1]: First (incorrect) strategy without induction.<br>\nlemma lex_list_wfP:<br>\n   assumes \"wfP order\"<br>\n   shows \"wfP (lex_list order)\"<br>\nproof (rule wfPUNIVI)<br>\n   fix P<br>\n   assume hyps0: \"∀x. (∀y. lex_list order y x ⟶ P y) ⟶ P x\"<br>\n   hence hyps1: \"(⋀y. lex_list order y x ⟹ P y) ⟹ P x\" for x by simp<br>\n   hence hyps2: \"(⋀y ys. lex_list order (y # ys) (x # xs) ⟹ P (y # ys)) <br>\n⟹ P (x # xs)\" for x xs<br>\n     by (metis (full_types) lex_list.simps(3) neq_Nil_conv)<br>\n   have 0: \"(⋀y. order y xa ⟹ ∀xs. P (y # xs)) ⟹ lex_list order (y # ys) <br>\n(xa # xs) ⟹ P (y # ys)\" for x xa xs y ys<br>\n     apply simp<br>\n     apply (erule disjE)<br>\n      apply simp<br>\n     sorry<br>\n   have \"P []\"<br>\n     using hyps0 by fastforce<br>\n   moreover have \"⋀x xs. P (x # xs)\"<br>\n     apply (atomize (full))<br>\n     apply (rule allI)<br>\n     apply (rule wfP_induct_rule[OF assms(1), of \"λx. ∀xs. P (x # xs)\"])<br>\n     apply (rule allI)<br>\n     apply (rule hyps1)<br>\n     using 0 by (metis lex_list.elims(2))<br>\n   ultimately show \"P xs\" for xs<br>\n     by (cases xs) simp_all<br>\nqed</p>",
        "id": 294759072,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661198713
    },
    {
        "content": "<p>From: Mathias Fleury &lt;<a href=\"mailto:mathias.fleury12@gmail.com\">mathias.fleury12@gmail.com</a>&gt;<br>\nHi Martin,</p>\n<p>Unless I am mistaken, your definition does not entail that the lists have the same length and therefore the theorem does not hold:</p>\n<p>fun lex_list :: \"('a \\&lt;Rightarrow&gt; 'a \\&lt;Rightarrow&gt; bool) \\&lt;Rightarrow&gt; 'a list \\&lt;Rightarrow&gt; 'a list \\&lt;Rightarrow&gt; bool\" where<br>\n \"lex_list order (x # xs) (y # ys) =<br>\n   (order x y \\&lt;or&gt; x = y \\&lt;and&gt; lex_list order xs ys)\" |<br>\n \"lex_list order _ _ = False\"</p>\n<p>fun f where \"f n = replicate n (0 :: nat) @ [1, 0]\"</p>\n<p>lemma H: \"lex_list (&lt;) (f (Suc n)) (f n)\" <br>\n  by (induction n) auto</p>\n<p>lemma \"\\&lt;not&gt;wfP (lex_list ((&lt;) :: nat \\&lt;Rightarrow&gt; _))\"<br>\n  unfolding wfP_def wf_iff_no_infinite_down_chain<br>\n  apply auto<br>\n  apply (rule exI[of _ f])<br>\n  using H apply auto<br>\n  done</p>\n<p>Best,<br>\nMathias</p>",
        "id": 294759096,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661198732
    },
    {
        "content": "<p>From: Mark Wassell &lt;<a href=\"mailto:mpwassell@gmail.com\">mpwassell@gmail.com</a>&gt;<br>\nHi,</p>\n<p>Would HOL/List.thy help and in particular the section titled \"Length<br>\nLexicographic Ordering\"?</p>\n<p>Cheers</p>\n<p>Mark</p>",
        "id": 294759108,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661198739
    },
    {
        "content": "<p>From: Lawrence Paulson &lt;<a href=\"mailto:lp15@cam.ac.uk\">lp15@cam.ac.uk</a>&gt;<br>\nIndeed, the required theorem is probably wf_lenlex.<br>\nLarry</p>",
        "id": 294759118,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661198744
    }
]