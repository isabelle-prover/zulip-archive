[
    {
        "content": "<p>From: Florian Haftmann &lt;<a href=\"mailto:florian.haftmann@informatik.tu-muenchen.de\">florian.haftmann@informatik.tu-muenchen.de</a>&gt;<br>\nHi all,</p>\n<p>I definitely agree that it is still unclear how IDE support for proof<br>\nconstruction should look like, and this for me seems the main reason why<br>\nnumerous people (including me) prefer a output-buffer-centric working<br>\nstyle here.</p>\n<p>What I would appreciate is better support to materialize pending proof<br>\nobligations in the source proper – what, by the way, is one of my main<br>\napplications of the output buffer: copying open goals to the source and<br>\nturning them into proper Isar.</p>\n<p>Some time (years?) ago I did a small sketch of a command which takes a<br>\nmethod, applies and it writes back the resulting goal state as Isar<br>\nskeleton.  In the presence of the rich infrastructure (including<br>\nsledgehammer's facilities to print pretty Isar proofs) it should not be<br>\nthat difficult to get something running and useful here, with rich<br>\npotential for research.  I would appreciate if somebody would seriously<br>\ntake up this enterprise.</p>\n<p>Cheers,<br>\n    Florian<br>\n<a href=\"/user_uploads/14278/pSEDE_ASX-bZSGtZOLklnSy5/signature.asc\">signature.asc</a></p>",
        "id": 294641221,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661162176
    },
    {
        "content": "<p>From: Peter Lammich &lt;<a href=\"mailto:lammich@in.tum.de\">lammich@in.tum.de</a>&gt;</p>\n<blockquote>\n<p>What I would appreciate is better support to materialize pending proof<br>\nobligations in the source proper – what, by the way, is one of my main<br>\napplications of the output buffer: copying open goals to the source and<br>\nturning them into proper Isar.</p>\n</blockquote>\n<p>(At least for me) another main application of the output buffer is<br>\nbackward-style proof exploration. I throw apply-style tactics onto my<br>\ngoal until it is solved, including old-fashioned things like<br>\n  rule_tac x=\"...\" in exI<br>\n(For me) this is a very efficient method to find proofs. Once the proof<br>\nis found, I usually clean it up (a bit). Thus, even if apply-style and<br>\nxxx_tac methods are considered bad style for camera-ready proof text,<br>\nthey are very important for proof exploration, and should not be<br>\nabandoned without viable alternatives.</p>\n<blockquote>\n<p>Some time (years?) ago I did a small sketch of a command which takes a<br>\nmethod, applies and it writes back the resulting goal state as Isar<br>\nskeleton.  </p>\n</blockquote>\n<p>Sounds like a good idea that may save lot's of tedious copy-and-paste if<br>\nyou already have the detailed proof in mind, and want to document the<br>\nsteps at a very fine-grained level in Isar.</p>\n<p>I am unsure whether it would work as a replacement for proof-exploration<br>\nas described above, because it would produce lots of text in the main<br>\nbuffer, which may obfuscate the whole proof, in particular for big<br>\nsubgoals. (I regularly have ~20 subgoals, each of which is ~20 lines<br>\nlong)</p>",
        "id": 294641249,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661162200
    },
    {
        "content": "<p>From: Larry Paulson &lt;<a href=\"mailto:lp15@cam.ac.uk\">lp15@cam.ac.uk</a>&gt;<br>\nI also work in the way you describe. I imagine that this is the normal approach, as opposed to trying to generate structured proofs directly out of nothing.</p>\n<p>It would be great to have a command that could take the current subgoal and generate the corresponding text of a nested block. At the same time, I hope that users would take the trouble to clean this up, deleting unused assumptions and possibly generalising the result proved.</p>\n<p>Larry Paulson</p>",
        "id": 294641328,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661162235
    },
    {
        "content": "<p>From: Florian Haftmann &lt;<a href=\"mailto:florian.haftmann@informatik.tu-muenchen.de\">florian.haftmann@informatik.tu-muenchen.de</a>&gt;</p>\n<blockquote>\n<blockquote>\n<p>Some time (years?) ago I did a small sketch of a command which takes a<br>\nmethod, applies and it writes back the resulting goal state as Isar<br>\nskeleton.  </p>\n</blockquote>\n<p>Sounds like a good idea that may save lot's of tedious copy-and-paste if<br>\nyou already have the detailed proof in mind, and want to document the<br>\nsteps at a very fine-grained level in Isar.</p>\n</blockquote>\n<p>I really had proof exploration in mind.</p>\n<blockquote>\n<p>I am unsure whether it would work as a replacement for proof-exploration<br>\nas described above, because it would produce lots of text in the main<br>\nbuffer, which may obfuscate the whole proof, in particular for big<br>\nsubgoals. (I regularly have ~20 subgoals, each of which is ~20 lines<br>\nlong)</p>\n</blockquote>\n<p>Deleting big experimental sections should not be a big problem.</p>\n<p>When doing proof development nowadays, I often make the experience that,<br>\nwhen I am actually finishing the proof, I have to delete draft lines<br>\nmore than an editor page (!) which has accumulated over time.</p>\n<p>Cheers,<br>\n    Florian<br>\n<a href=\"/user_uploads/14278/upesADyRgA-KEnlsckP3o1V9/signature.asc\">signature.asc</a></p>",
        "id": 294645755,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661163985
    },
    {
        "content": "<p>From: Peter Lammich &lt;<a href=\"mailto:lammich@in.tum.de\">lammich@in.tum.de</a>&gt;<br>\nThe same for me. </p>\n<p>My fear was, if these draft lines now also contain tons of subgoals,<br>\nthey may be dozens of editor pages, and obfuscate the essential proof<br>\nsteps that have been worked out. But, maybe I've not correctly<br>\nunderstood the idea.</p>",
        "id": 294646049,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661164114
    }
]