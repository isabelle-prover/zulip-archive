[
    {
        "content": "<p>From: <a href=\"mailto:ehmety@univ-nkc.mr\">ehmety@univ-nkc.mr</a><br>\nHi</p>\n<p>I was used to ML proof style and now I am trying to learn the isar mode.<br>\nBut I found it very hard to follow. I am not sure whether this is normal<br>\nor I am missing something:</p>\n<p>Let me explain this with this example taken from the Structured Proofs in<br>\nIsar/HOL document:</p>\n<p>lemma assumes ex: \"EX x. ALL y. P x y\" shows \"ALL y. EX x. P x y\"<br>\nproof<br>\n  fix a<br>\n  from ex obtain x where \"ALL y. P x y\" ..<br>\n  hence \"P x a\" ..<br>\n  thus \"EX x. P x a\" ..<br>\nqed</p>\n<p>Proof starts with a nice display of the proof state (with every thing I<br>\nneed):</p>\n<p>proof (state): step 1<br>\nfixed variables: P<br>\nprems:<br>\n  EX x. ALL y. P x y<br>\ngoal (lemma, 1 subgoal):</p>\n<ol>\n<li>!!y. EX x. P x y</li>\n</ol>\n<p>But things go differently</p>\n<ol>\n<li>When I do fix a for  the variable y in the goal,<br>\nI get the equality a = a in the fixed variables section.</li>\n</ol>\n<p>proof (state): step 2</p>\n<p>fixed variables: P, a = a<br>\nprems:<br>\n  EX x. ALL y. P x y</p>\n<p>goal (lemma, 1 subgoal):</p>\n<ol>\n<li>!!y. EX x. P x y</li>\n</ol>\n<p>However I was expecting y = a instead.</p>\n<ol start=\"2\">\n<li>At the second step (from ex obtain <br>\n) the display becomes difficult to<br>\nfollow:<br>\na) execution of from ex gives:</li>\n</ol>\n<p>proof (chain): step 3</p>\n<p>picking this:<br>\n  EX x. ALL y. P x y</p>\n<p>(no thing shown about the rest of the state)</p>\n<p>b) execution of all the 'from' step returns<br>\nhave (!!x. ALL y. P x y ==&gt; ?thesis) ==&gt; ?thesis<br>\nEvery thing is hided.</p>\n<p>The same thing happens with proof steps starting have.</p>\n<p>How one can see what goals remain to be proved?</p>\n<p>This kind of displays confuses me.</p>\n<p>Best regards</p>",
        "id": 293905083,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660745711
    },
    {
        "content": "<p>From: chen kun &lt;<a href=\"mailto:coolchenice81@gmail.com\">coolchenice81@gmail.com</a>&gt;<br>\nHere is an avaiable proof script:<br>\nlemma assumes ex: \"EX x. ALL y. P x y\" shows \"ALL y. EX x. P x y\"<br>\n proof<br>\n   fix y  - - Here must fix \"y\" ,which is exacatly the variable name<br>\nin your goal<br>\n   from ex obtain x where \"ALL y. P x y\" by blast<br>\n   thus \"EX x. P x y\" by blast<br>\n qed</p>\n<p>2006/3/22, <a href=\"mailto:ehmety@univ-nkc.mr\">ehmety@univ-nkc.mr</a> &lt;<a href=\"mailto:ehmety@univ-nkc.mr\">ehmety@univ-nkc.mr</a>&gt;:</p>\n<blockquote>\n<p>Hi</p>\n<p>I was used to ML proof style and now I am trying to learn the isar mode.<br>\nBut I found it very hard to follow. I am not sure whether this is normal<br>\nor I am missing something:</p>\n<p>Let me explain this with this example taken from the 'Structured Proofs in<br>\nIsar/HOL' document:</p>\n<p>lemma assumes ex: \"EX x. ALL y. P x y\" shows \"ALL y. EX x. P x y\"<br>\nproof<br>\n  fix a<br>\n  from ex obtain x where \"ALL y. P x y\" ..<br>\n  hence \"P x a\" ..<br>\n  thus \"EX x. P x a\" ..<br>\nqed</p>\n<p>Proof starts with a nice display of the proof state (with every thing I<br>\nneed):</p>\n<p>proof (state): step 1<br>\nfixed variables: P<br>\nprems:<br>\n  EX x. ALL y. P x y<br>\ngoal (lemma, 1 subgoal):<br>\n 1. !!y. EX x. P x y</p>\n<p>But things go differently<br>\n1. When I do 'fix a' for  the variable 'y' in the goal,<br>\nI get the equality a = a in the 'fixed variables' section.</p>\n<p>proof (state): step 2</p>\n<p>fixed variables: P, a = a<br>\nprems:<br>\n  EX x. ALL y. P x y</p>\n<p>goal (lemma, 1 subgoal):<br>\n 1. !!y. EX x. P x y</p>\n<p>However I was expecting 'y = a' instead.</p>\n<ol start=\"2\">\n<li>At the second step (from ex obtain …) the display becomes difficult to<br>\nfollow:<br>\na) execution of 'from ex' gives:</li>\n</ol>\n<p>proof (chain): step 3</p>\n<p>picking this:<br>\n  EX x. ALL y. P x y</p>\n<p>(nothing shown about the rest of the state)</p>\n</blockquote>\n<p>You can use \"print_context \", \" print_theorems\" , \"print_facts\" etc.<br>\nto inspect proof contexts . See &lt;&lt;Isar-ref.pdf&gt;&gt; 3.3.2 for details .<br>\nOr you can simply use command \"term ?thesis\" to see what the term<br>\n?thesis stands for. See &lt;&lt;Isar-ref.pdf&gt;&gt; 3.3.1 for details.</p>\n<blockquote>\n<p>b) execution of all the 'from' step returns<br>\nhave (!!x. ALL y. P x y ==&gt; ?thesis) ==&gt; ?thesis<br>\nEvery thing is hided.</p>\n<p>The same thing happens with proof steps starting 'have'.</p>\n<p>How one can see what goals remain to be proved?</p>\n<p>This kind of displays confuses me.</p>\n<p>Best regards</p>\n</blockquote>",
        "id": 293905086,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660745711
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nOn Wed, 22 Mar 2006, <a href=\"mailto:ehmety@univ-nkc.mr\">ehmety@univ-nkc.mr</a> wrote:</p>\n<blockquote>\n<p>I was used to ML proof style and now I am trying to learn the isar mode.<br>\nBut I found it very hard to follow. I am not sure whether this is normal<br>\nor I am missing something</p>\n</blockquote>\n<p>It is indeed hard to convert oneself from tactical proving to structured <br>\nproof composition in Isar.  Certain old habits need to be unlearned -- <br>\nafter being identified as such in the first place.</p>\n<p>Most notably direct focus on goal states is superceded by building up a <br>\nlocal context of parameters, assumptions, facts etc. that is eventually <br>\nready to solve a pending problem.</p>\n<blockquote>\n<p>This kind of displays confuses me.</p>\n</blockquote>\n<p>This is a known problem of Isar.  There are many ways to perform a proof <br>\n(both structured and unstructured) but different information is relevant <br>\nin different situations.  The system does not impose a particular policy <br>\nhere, but leaves it to the user to figure out relevant bits required to <br>\nproceed with the reasoning.</p>\n<p>For beginners it is best to step through existing structured proof texts <br>\nwithout taking the state display too seriously.  In fact, Isar proofs can <br>\nbe easily maintained without looking at internal states at all.  It is <br>\nstill necessary for interactive development, though.</p>\n<p>There is an interesting paper by Dixon and Fleuriot <br>\n<a href=\"http://homepages.inf.ed.ac.uk/ldixon/papers/jal-05-proofcentric.pdf\">http://homepages.inf.ed.ac.uk/ldixon/papers/jal-05-proofcentric.pdf</a> that <br>\nboldly points out that proof state display should be suppressed <br>\naltogether, replacing it by a metaphor of editing the structured proof <br>\ntext as a hierarchical outline that is completed incrementally.</p>\n<p>Makarius</p>",
        "id": 293905193,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660745747
    }
]