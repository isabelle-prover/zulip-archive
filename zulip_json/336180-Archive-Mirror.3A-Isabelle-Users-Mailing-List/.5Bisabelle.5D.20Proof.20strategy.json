[
    {
        "content": "<p>From: \"John F. Hughes\" &lt;<a href=\"mailto:jfh@cs.brown.edu\">jfh@cs.brown.edu</a>&gt;<br>\nI often find myself trying to prove things in a context like this:</p>\n<p>Theorem: Given this, that, and the other, there's a widget X with these<br>\nproperties.</p>\n<p>An example might be</p>\n<p>Theorem: Given two real numbers r and s, with r &lt; s there's a real number t<br>\nbetween them, i.e., with r &lt; t and t &lt; s.</p>\n<p>My approach, as a mathematician, is often to explicitly construct the<br>\nwidget described, and show it has the properties needed. In the example<br>\ntheorem, I'd say: let t = (r+s)/2. Then because r &lt; s, we know that r+r &lt;<br>\nr + s, so (dividing by 2) r &lt; (r+s)/2, so r &lt; t. [Then I'd write a similar<br>\nproof for t &lt; s. ]</p>\n<p>I seem, in Isar, to often reach a state where I've done exactly this --<br>\nI've established the existence of the missing widget by explicitly<br>\nconstructing it -- but I can't make Isar say, \"Oh, good...we're done here!\"</p>\n<p>In the example above, Isar can figure out a proof all on its own, but since<br>\nthat's not true in general (most of the constructive proofs I'm doing are<br>\nbeyond its 'i can do that' skills), I'd like to work through the details to<br>\nget the general structure.</p>\n<p>I have a feeling that part of the problem is that there's an implict<br>\n\"forall r, forall s\" in front of the theorem, while I want to do my proof<br>\nby doing it for a particular (but arbitrary) r (and s, of course).</p>\n<p>I'm pretty sure I'm supposed to do that with \"fix r\" and \"fix s\". But then<br>\nI need to do something more. I figured that because I was trying to prove<br>\nthat \"r &lt; s\" implies something, I should assume that r &lt; s, and proceed.</p>\n<p>Here's a start:</p>\n<p>theory Proof_practice<br>\n  imports Complex_Main<br>\nbegin</p>\n<p>theorem mid: \"(r::real) &lt; s⟹∃t. ((r &lt; t) ∧ (t &lt; s))\"<br>\nproof<br>\n  fix r<br>\n  fix s<br>\n  assume \"r &lt; s\"<br>\n  let t = \"(r+s)/2\"<br>\nqed<br>\nend</p>\n<p>The type-ascription on \"r\" seemed to be necessary; without it, auto<br>\nQuickcheck claimed to have a counterexample (apparently by assuming that I<br>\nmeant r and s to be Enums rather than reals). Even so, the \"r\" in the first<br>\nline of the proof appears to be unrelated to the \"r\" in the theorem<br>\nstatement, for it's described as a Skolem variable with type 'a, so that<br>\nthe \"let\" line completely fails (complaining that \"+\" is not defined for<br>\nitems of type 'a, quite reasonably).</p>\n<p>Can someone describe a general pattern for proofs like this (where I<br>\nconstruct some object, and show that it has some properties, and then say<br>\n\"see, that's proof that such a thing exists!\"? It's clear that I'm headed<br>\ndown the wrong path.</p>",
        "id": 294761494,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661199822
    },
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;</p>\n<blockquote>\n<p>theorem mid: \"(r::real) &lt; s⟹∃t. ((r &lt; t) ∧ (t &lt; s))\"</p>\n</blockquote>\n<p>You statement already introduces r and s, fixing them again introduces new r and <br>\ns, which is not what you want. You can also write the goal with assumes/shows <br>\ninstead of ==&gt; so you don't have to assume the assumptions once more but can <br>\nrefer to them by the predefined name \"assms\". This leads to</p>\n<p>theorem mid: assumes \"(r::real) &lt; s\" shows \"∃t. r &lt; t ∧ t &lt; s\"<br>\nproof<br>\n   let ?t = \"(r+s)/2\"<br>\n   show \"r &lt; ?t ∧ ?t &lt; s\" using assms by simp<br>\nqed</p>\n<p>Tobias<br>\n<a href=\"/user_uploads/14278/_xlJFxF5dYYMC4hGAi3_dmTZ/smime.p7s\">smime.p7s</a></p>",
        "id": 294761500,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661199824
    }
]