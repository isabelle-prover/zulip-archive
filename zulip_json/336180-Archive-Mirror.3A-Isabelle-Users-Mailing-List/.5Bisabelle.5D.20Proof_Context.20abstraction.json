[
    {
        "content": "<p>From: Joachim Breitner &lt;<a href=\"mailto:breitner@kit.edu\">breitner@kit.edu</a>&gt;<br>\nHi,</p>\n<p>I’m trying to learn hacking Isabelle/ML, and I started with the<br>\nseemingly simple task of “For all local facts with a name, add a \"foo\"<br>\nto their name”.</p>\n<p>Here is what I tried:</p>\n<p>theory Scratch imports Main  keywords \"foobar\" :: prf_decl<br>\nbegin</p>\n<p>ML {*<br>\nfun named_local_facts ctxt = <br>\n  let val facts = Proof_Context.facts_of ctxt;<br>\n  in  Facts.dest_static false [Global_Theory.facts_of (Proof_Context.theory_of ctxt)] facts<br>\n  end;</p>\n<p>val foobar_cmd =<br>\n    Proof.map_context (fn ctxt =&gt; <br>\n      let<br>\n        val facts = named_local_facts ctxt<br>\n        val renamed = map (apfst (suffix \"foo\")) facts<br>\n      in fold (Proof_Context.put_thms true) (map (apsnd SOME) renamed) ctxt<br>\n      end );</p>\n<p>Outer_Syntax.command @{command_spec \"foobar\"} \"my test command\" (Scan.succeed (Toplevel.proof foobar_cmd));<br>\n*}</p>\n<p>notepad<br>\nbegin<br>\n assume bar: \"p = (a,b)\" and X<br>\n foobar<br>\nend<br>\nend</p>\n<p>Unfortunately, I get<br>\n        Bad name binding: \"local.barfoo\"</p>\n<p>It seems to me that Proof_Context provides a certain abstraction over<br>\nlocal facts, where I can still retrieve them in a raw way (“facts_of”),<br>\nbut I can only add them via an interface (“put_thms”) that expect the<br>\nnames in a certain, yet-to-be-mangled name. Is that roughly correct?</p>\n<p>Is there a way to mess with the internals of the Proof_Context directly,<br>\nor would I have to change <a href=\"http://proof_context.ml\">proof_context.ml</a> for that (such as exposing<br>\nmap_data)?</p>\n<p>Or am I approach this task in a wrong way?</p>\n<p>Thanks,<br>\nJoachim<br>\n<a href=\"/user_uploads/14278/jWrBiqHhfVI9k3fxuIoduB_g/signature.asc\">signature.asc</a></p>",
        "id": 294285106,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660921575
    },
    {
        "content": "<p>From: Joachim Breitner &lt;<a href=\"mailto:breitner@kit.edu\">breitner@kit.edu</a>&gt;<br>\nHi,</p>\n<p>a bit of progress:</p>\n<p>Tracing existing code a bit more, it seems that I have to go through<br>\nProof_Context.note_thmss, which expects a binding.</p>\n<p>So I tried to use Binding.qualified_name to turn the string<br>\nlocal.Cons.IHfoo into a binding. But if I add that using<br>\nProof_Context.note_thmss, \"print_facts\" will list it as IHfoo, not as<br>\nCons.IHfoo.</p>\n<p>Greetings,<br>\nJoachim<br>\n<a href=\"/user_uploads/14278/W1jO97WO-u5r6kXa3PZbYcdy/signature.asc\">signature.asc</a></p>",
        "id": 294285139,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660921588
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nOn Tue, 29 Jul 2014, Joachim Breitner wrote:</p>\n<blockquote>\n<p>and I started with the seemingly simple task of “For all local facts <br>\nwith a name, add a \"foo\" to their name”.</p>\n</blockquote>\n<p>That is not a simple task, and it does not quite fit to how Isabelle <br>\nconceptually works.</p>\n<p>The \"implementation\" manual provides a lot of background information, but <br>\nit needs to be studied carefully together with some canonical application.</p>\n<p>Section \"1.2 Names\" might help a bit as a start in this particular case.</p>\n<blockquote>\n<p>I’m trying to learn hacking Isabelle/ML</p>\n</blockquote>\n<blockquote>\n<p>Is there a way to mess with the internals of the Proof_Context directly, <br>\nor would I have to change <a href=\"http://proof_context.ml\">proof_context.ml</a> for that (such as exposing <br>\nmap_data)?</p>\n<p>Or am I approach this task in a wrong way?</p>\n</blockquote>\n<p>It depends whom you ask, and what you want to achieve.  Proper <br>\nunderstanding the systems needs long time of study, not quick hacking.  I <br>\nwould go as far as to say that and \"hacking\" or \"messing\" is a not worth <br>\nthe time spent on it.</p>\n<p>Makarius</p>",
        "id": 294285263,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660921630
    },
    {
        "content": "<p>From: Joachim Breitner &lt;<a href=\"mailto:breitner@kit.edu\">breitner@kit.edu</a>&gt;<br>\nHello,</p>\n<p>there is always a first step, and different people learn in different<br>\nways. I could have said “experimentation” if you like that word better.</p>\n<p>I want to achieve sufficient knowledge of the Isabelle/ML layer to<br>\nimplement a \"unfold_in_context\" command as outlined last week. I’d say<br>\nthat learning to do that is worthwhile independent of whether such a<br>\ncommand is desirable.</p>\n<p>So can I expect guidance from those on this list who already spent the<br>\nlong time of study? Or is it expected for newcomers to study on their<br>\nown until they achieve mastery (or give up)?</p>\n<p>Thanks,<br>\nJoachim<br>\n<a href=\"/user_uploads/14278/jyY7IjKVG-CyOYrv8fovxx_m/signature.asc\">signature.asc</a></p>",
        "id": 294285288,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660921643
    },
    {
        "content": "<p>From: Lars Hupel &lt;<a href=\"mailto:hupel@in.tum.de\">hupel@in.tum.de</a>&gt;<br>\nHi Joachim,</p>\n<blockquote>\n<p>there is always a first step, and different people learn in different<br>\nways. I could have said “experimentation” if you like that word better.</p>\n</blockquote>\n<p>I found that reading the sources and experimenting (in a type-driven<br>\nway) with them worked well for me. Also, the Isar Implementation Manual<br>\nand the Isabelle/ML Cookbook are valuable resources.</p>\n<blockquote>\n<p>So can I expect guidance from those on this list who already spent the<br>\nlong time of study? Or is it expected for newcomers to study on their<br>\nown until they achieve mastery (or give up)?</p>\n</blockquote>\n<p>I'm sure you'll find helpful answers here.</p>\n<p>Cheers<br>\nLars</p>",
        "id": 294285300,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660921649
    },
    {
        "content": "<p>From: Joachim Breitner &lt;<a href=\"mailto:breitner@kit.edu\">breitner@kit.edu</a>&gt;<br>\nDear Lars,</p>\n<p>Am Mittwoch, den 30.07.2014, 08:15 +0200 schrieb Lars Hupel:</p>\n<blockquote>\n<blockquote>\n<p>there is always a first step, and different people learn in different<br>\nways. I could have said “experimentation” if you like that word better.</p>\n</blockquote>\n<p>I found that reading the sources and experimenting (in a type-driven<br>\nway) with them worked well for me. Also, the Isar Implementation Manual<br>\nand the Isabelle/ML Cookbook are valuable resources.</p>\n</blockquote>\n<p>thanks; looks like I’m on the right paths.</p>\n<p>Since you mention type-driven: Do you know of a way of having the system<br>\ntell me the types of non-exported functions in existing ML code in<br>\nPure/? The exported functions have their types visible in the signature<br>\nspecification. And for code in my own modules Ctrl-Hover is very<br>\nhelpful, but that doesn’t work in ML files that have been loaded in the<br>\nheap. Is there maybe a way to get jEdit process Pure (instead of loading<br>\na Heap)?</p>\n<blockquote>\n<blockquote>\n<p>So can I expect guidance from those on this list who already spent the<br>\nlong time of study? Or is it expected for newcomers to study on their<br>\nown until they achieve mastery (or give up)?</p>\n</blockquote>\n<p>I'm sure you'll find helpful answers here.</p>\n</blockquote>\n<p>Great. Then let me try to ask better questions next times :-)</p>\n<p>Greetings,<br>\nJoachim<br>\n<a href=\"/user_uploads/14278/0-YlItSZJnMQu6vSabWENpa7/signature.asc\">signature.asc</a></p>",
        "id": 294285319,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660921655
    },
    {
        "content": "<p>From: Lars Hupel &lt;<a href=\"mailto:hupel@in.tum.de\">hupel@in.tum.de</a>&gt;</p>\n<blockquote>\n<p>Since you mention type-driven: Do you know of a way of having the<br>\nsystem tell me the types of non-exported functions in existing ML<br>\ncode in Pure/? The exported functions have their types visible in the<br>\nsignature specification.</p>\n</blockquote>\n<p>This is going to sound very low-tech, but I usually copy-paste<br>\nsignificant chunks or even a whole file into a \"ML{* *}\" block in a<br>\ntheory. This usually works fine and gives you the full markup.</p>\n<blockquote>\n<p>And for code in my own modules Ctrl-Hover is very helpful, but that<br>\ndoesn’t work in ML files that have been loaded in the heap. Is there<br>\nmaybe a way to get jEdit process Pure (instead of loading a Heap)?</p>\n</blockquote>\n<p>As far as I know, that is only possible for theories loaded <em>after</em> Pure<br>\nhas been bootstrapped. You're probably out of luck there.</p>\n<p>Cheeers<br>\nLars</p>",
        "id": 294285328,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660921661
    },
    {
        "content": "<p>From: Peter Lammich &lt;<a href=\"mailto:lammich@in.tum.de\">lammich@in.tum.de</a>&gt;<br>\nI'm even more low-tech: I have a console open in src/, and use <br>\n  grep \"val &lt;fun-name&gt;:\" -r .<br>\nthis usually matches the line in the signature that declares the type.</p>\n<p>The same could be achieved with jedits (mouse-intensive) hypersearch<br>\nfeature.</p>",
        "id": 294285353,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660921673
    },
    {
        "content": "<p>From: Joachim Breitner &lt;<a href=\"mailto:breitner@kit.edu\">breitner@kit.edu</a>&gt;<br>\nDear List,</p>\n<p>Thanks for that suggestion. Unfortunately, that does not help with code<br>\nthat doesn’t have type signatures.</p>\n<p>Greetings,<br>\nJoachim<br>\n<a href=\"/user_uploads/14278/90SosQU6A5KnaEDjFgJaLIpV/signature.asc\">signature.asc</a></p>",
        "id": 294285370,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660921680
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nThat is why I have moved more and more tools within Pure into Pure.thy <br>\nitself, so that they can be loaded into another theory as well, for <br>\ninspecting within the Prover IDE.</p>\n<p>Makarius</p>",
        "id": 294285881,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660921832
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nHypersearch is indeed the one big thing of jEdit, independently of the <br>\nProver IDE.  It is my main tool for navigating the Isabelle bootstrap <br>\nsources: its uniform naming conventions make this work very well.</p>\n<p>The \"implementation\" manual also explains how Isabelle/ML is usually <br>\nwritten, such that it is reasonably easy to read it systematically, with <br>\nor without tool support.</p>\n<p>Makarius</p>",
        "id": 294285904,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660921839
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nExperimentation is at least proper terminology of empirical science. <br>\nMore of its principles can be applied to explore the Isabelle sources, to <br>\nunderstand more aspects of it.</p>\n<p>The \"implementation\" manual explains many things that help working <br>\nsystematically with the sources, but it definitely needs serious efforts.</p>\n<p>Makarius</p>",
        "id": 294285924,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660921845
    }
]