[
    {
        "content": "<p>From: Mark Wassell &lt;<a href=\"mailto:mpwassell@gmail.com\">mpwassell@gmail.com</a>&gt;<br>\nHello,</p>\n<p>I have a set of mutually defined inductive predicates that Isabelle is<br>\ntaking more than an hour to prove the monotonicity, intro, elim, simp etc<br>\nrules for.</p>\n<ol>\n<li>\n<p>Is it possible to get the details of what facts it is trying to prove?</p>\n</li>\n<li>\n<p>Is there a flag I can set to get some tracing information? Browsing the<br>\nML code I see that in the signature BASIC_INDUCTIVE there are some flags<br>\nthat might help but I have no idea if I can set these and how it can be<br>\ndone.</p>\n</li>\n<li>\n<p>Is it possible to 'sorry' these proofs?</p>\n</li>\n</ol>\n<p>Cheers</p>\n<p>Mark</p>",
        "id": 294711662,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661182394
    },
    {
        "content": "<p>From: Andreas Lochbihler &lt;<a href=\"mailto:andreas.lochbihler@inf.ethz.ch\">andreas.lochbihler@inf.ethz.ch</a>&gt;<br>\nDear Mark,</p>\n<p>There is no way to skip any of the proofs by using the Isar command inductive. The flags <br>\nare only accessible from the ML code.</p>\n<p>To see whether this actually makes a difference, the easiest way to change this is to go <br>\nto the file ~~/src/HOL/Tools/inductive.ML and change the boolean flags in the function <br>\ngen_add_inductive. Then re-build HOL (e.g., by restart Isabelle/jEdit) and try again. Make <br>\nsure that you really skip the proofs by putting</p>\n<p>declare [[quick_and_dirty]]</p>\n<p>before the inductive definitions.</p>\n<p>Also, as mutually inductive definitions are compiled into a single inductive definition <br>\nand then retrieved, it might be faster if you could split the mutual recursion into nested <br>\nrecursion. That is, you parametrise some of the inductive predicates over the others, <br>\ndefine them first, prove that they preserve monotonicity, and then use them in the other <br>\ndefinitions. In my experience, this often leads to a cleaner design and simpler proofs.</p>\n<p>Hope this helps<br>\nAndreas</p>",
        "id": 294711759,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661182425
    },
    {
        "content": "<p>From: Stefan Berghofer &lt;<a href=\"mailto:berghofe@in.tum.de\">berghofe@in.tum.de</a>&gt;<br>\nDear Mark and Andreas,</p>\n<p>since the inductive definition package uses Goal.prove_sorry internally to prove properties,<br>\nall proofs should be 'sorried' automatically when in quick_and_dirty mode, except for the<br>\nmonotonicity property, which is always proved to avoid inconsistencies. There should be no<br>\nneed to make any changes to the code. The no_elim and no_ind flags that you were probably<br>\nreferring to were mainly used by the old datatype package to omit proofs of elimination or<br>\ninduction rules even when not in quick_and_dirty mode.</p>\n<p>Greetings,<br>\nStefan</p>",
        "id": 294711776,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661182431
    }
]