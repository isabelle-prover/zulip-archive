[
    {
        "content": "<p>From: Lars Hupel &lt;<a href=\"mailto:hupel@in.tum.de\">hupel@in.tum.de</a>&gt;<br>\nDear list,</p>\n<p>I'd like to propose a new warning for the code generator. Very often,<br>\nadditional class constraints get introduced. For example, virtually any<br>\nfunction on sets requires an 'equal' constraint. This is usually<br>\nexpected. However, I was surprised when some set comprehensions<br>\nintroduced 'enum' constraints:</p>\n<p>definition \"foo A = {x + 1|x. x ∈ A ∧ x &gt; 5}\"</p>\n<p>export_code foo in Haskell</p>\n<p>The generated code has the signature</p>\n<p>foo ::<br>\n    forall a.<br>\n      (Enum.Enum a, Eq a, Arith.Numeral a,<br>\n        Orderings.Ord a) =&gt; Set.Set a -&gt; Set.Set a;</p>\n<p>I can see why this is happening, but I only discovered it by manually<br>\nbrowsing through the generated code. Hence, a warning could be useful,<br>\ne.g. along the lines of:</p>\n<p>'Generated code for foo has additional class constraints equal, enum'</p>\n<p>Would anybody else consider that useful?</p>\n<p>Cheers<br>\nLars</p>",
        "id": 294330324,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660930020
    },
    {
        "content": "<p>From: Florian Haftmann &lt;<a href=\"mailto:florian.haftmann@informatik.tu-muenchen.de\">florian.haftmann@informatik.tu-muenchen.de</a>&gt;<br>\nHi Lars,</p>\n<p>unfortunately such additional constraints are quite pervasive, hence<br>\nsuch a warning would be so ubiquitous that users will just ignore it.</p>\n<p>Generally, you can rely on nothing about the generated code except<br>\npartial correctness; so, inspection to find out what's going on cannot<br>\nbe avoided at all.</p>\n<p>Cheers,<br>\n    Florian<br>\n<a href=\"/user_uploads/14278/E9PAnzHgWXPTZoZlXHWUi3Ox/signature.asc\">signature.asc</a></p>",
        "id": 294331094,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660930272
    }
]