[
    {
        "content": "<p>From: John Munroe &lt;<a href=\"mailto:munddr@gmail.com\">munddr@gmail.com</a>&gt;<br>\nHi,</p>\n<p>I'm trying to prove the cardinality of the set {1,2} being greater<br>\nthan 1, but I seem to be able to only prove that the cardinality is<br>\ngreater than 0:</p>\n<p>axiomatization<br>\nS :: \"nat set\" where<br>\nax1 : \"S = {1,2}\"</p>\n<p>lemma \"card S &gt; 0\"<br>\nusing ax1<br>\nby (metis card_eq_0_iff finite.emptyI finite.insertI gr0I insert_not_empty)</p>\n<p>Now I'm trying to prove:</p>\n<p>lemma \"card S &gt; 1\"<br>\nsledgehammer</p>\n<p>but sledgehammer can't seem to find a proof. Could someone please help?</p>\n<p>Thanks a lot for your time.</p>\n<p>John</p>",
        "id": 294217292,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660895587
    },
    {
        "content": "<p>From: Christian Sternagel &lt;<a href=\"mailto:c-sterna@jaist.ac.jp\">c-sterna@jaist.ac.jp</a>&gt;<br>\nHow about</p>\n<p>definition S :: \"nat set\" where<br>\n     \"S ≡ {1,2}\"</p>\n<p>lemma \"card S &gt; 1\"<br>\n     by (simp add: S_def)</p>\n<p>The same should work with your axiomatic version (but I don't see why <br>\nyou would use an axiom in this case). Just give the equation of the <br>\naxiom an explicit name and supply it to simp.</p>\n<p>Maybe a nicer way to state S would be</p>\n<p>context<br>\n     fixes S :: \"nat set\"<br>\n     assumes S_def: \"S = {1, 2}\"<br>\n   begin</p>\n<p>lemma \"card S &gt; 1\"<br>\n     by (simp add: S_def)</p>\n<p>end</p>\n<p>cheers</p>\n<p>chris</p>",
        "id": 294217316,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660895597
    },
    {
        "content": "<p>From: John Munroe &lt;<a href=\"mailto:munddr@gmail.com\">munddr@gmail.com</a>&gt;<br>\nThanks. Do you know why 'auto' wouldn't work even if S_def/ax1 is<br>\nalready given as a fact?</p>\n<p>John</p>",
        "id": 294217420,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660895646
    },
    {
        "content": "<p>From: Christian Sternagel &lt;<a href=\"mailto:c-sterna@jaist.ac.jp\">c-sterna@jaist.ac.jp</a>&gt;<br>\nDear John,</p>\n<p>I can reproduce your problem but do not have an explanation. There is a <br>\nthread about \"using\" in the mailing list archives:</p>\n<p><a href=\"https://lists.cam.ac.uk/mailman/htdig/cl-isabelle-users/2011-February/msg00019.html\">https://lists.cam.ac.uk/mailman/htdig/cl-isabelle-users/2011-February/msg00019.html</a></p>\n<p>which is interesting, but does not give an explanation for your case <br>\n(since S is not polymorphic).</p>\n<p>To make it easier for others to follow, here is the problem again:</p>\n<p>definition S :: \"nat set\" where \"S == {1, 2, 3}\"<br>\nlemma \"card S &gt; 1\" by (auto simp: S_def) (<em>this works</em>)<br>\nlemma \"card S &gt; 1\" using S_def apply auto (<em>leaves the goal</em>)</p>\n<ol>\n<li>S = {Suc 0, 2, 3} ⟹ Suc 0 &lt; card S</li>\n</ol>\n<p>cheers</p>\n<p>chris</p>",
        "id": 294217475,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660895676
    },
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\nAm 26/07/2012 04:13, schrieb Christian Sternagel:</p>\n<blockquote>\n<p>Dear John,</p>\n<p>I can reproduce your problem but do not have an explanation. There is a thread<br>\nabout \"using\" in the mailing list archives:</p>\n<p><a href=\"https://lists.cam.ac.uk/mailman/htdig/cl-isabelle-users/2011-February/msg00019.html\">https://lists.cam.ac.uk/mailman/htdig/cl-isabelle-users/2011-February/msg00019.html</a></p>\n<p>which is interesting, but does not give an explanation for your case (since S is<br>\nnot polymorphic).</p>\n<p>To make it easier for others to follow, here is the problem again:</p>\n<p>definition S :: \"nat set\" where \"S == {1, 2, 3}\"<br>\nlemma \"card S &gt; 1\" by (auto simp: S_def) (<em>this works</em>)<br>\nlemma \"card S &gt; 1\" using S_def apply auto (<em>leaves the goal</em>)<br>\n1. S = {Suc 0, 2, 3} ⟹ Suc 0 &lt; card S</p>\n</blockquote>\n<p>This is the result of a simplifier heuristic: if it finds an equation \"constant<br>\n= term\" among the assumptions, it turns it around. Otherwise the following<br>\nfrequently happens: an equation like \"0 = x\" is produced in the middle of<br>\nsimplification and then 0 is replaced by x everywhere - not a good idea. The<br>\nheuristic does not apply to equation that are added to the simplifier explicitly.</p>\n<p>Tobias</p>\n<blockquote>\n<p>cheers</p>\n<p>chris</p>\n<p>On 07/26/2012 10:06 AM, John Munroe wrote:</p>\n<blockquote>\n<p>I gave it with 'using S_def'. Do you know why 'using S_def; by auto'<br>\nwouldn't work?</p>\n</blockquote>\n<p>On Thu, Jul 26, 2012 at 12:57 AM, Christian Sternagel  wrote:</p>\n<blockquote>\n<blockquote>\n<p>For me, by (auto simp: S_def) did the job. So how did you give S_def/ax1 as<br>\nfact?<br>\n</p>\n</blockquote>\n</blockquote>\n</blockquote>",
        "id": 294217557,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660895732
    }
]