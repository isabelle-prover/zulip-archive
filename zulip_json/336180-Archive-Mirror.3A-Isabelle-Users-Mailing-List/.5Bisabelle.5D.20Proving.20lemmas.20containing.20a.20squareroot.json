[
    {
        "content": "<p>From: Michael Daniels &lt;<a href=\"mailto:dayzman@gmail.com\">dayzman@gmail.com</a>&gt;<br>\nHi</p>\n<p>I'm hoping some of you could help me with the following lemma:</p>\n<p>consts<br>\npl :: \"real =&gt; real\"</p>\n<p>axioms<br>\ngt: \"EX x y. pl x &gt; pl y\"</p>\n<p>lemma rt4: \"ALL a b. sqrt(4) / pl a &gt; sqrt(4) / pl b\"<br>\nusing gt<br>\nsledgehammer;</p>\n<p>It seems like a rather simple lemma but sledgehammer (E, SPASS, and<br>\nVampire) can't seem to return the set of theorems for metis. Does<br>\nanyone know how to prove it?</p>\n<p>Moreover, if I simplify the lemma by removing the sqrt to:</p>\n<p>lemma rt4: \"ALL a b. (4) / pl a &gt; (4) / pl b\"<br>\nusing gt<br>\nsledgehammer;</p>\n<p>Vampire gives me a minimal set of 14 theorems for metis:</p>\n<p>apply (metis comm_monoid_add.mult_commute comp_arith(112)<br>\ndivide_inverse eq_diff_eq' eq_number_of inverse_inverse_eq<br>\nlinorder_neqE_ordered_idom monoid_add_class.add_0_right<br>\nmult.diff_right mult.zero_left real_less_def real_mult_right_cancel<br>\nrel_simps(38) rel_simps(46))</p>\n<p>However, metis actually will not terminate. Assuming those 14 theorems<br>\nare the required theorems, why is having sqrt so difficult for<br>\nsledgehammer?</p>\n<p>Thanks!</p>\n<p>Michael</p>",
        "id": 294109697,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660836380
    },
    {
        "content": "<p>From: Brian Huffman &lt;<a href=\"mailto:brianh@cs.pdx.edu\">brianh@cs.pdx.edu</a>&gt;<br>\nOn Thu, Jun 3, 2010 at 9:15 PM, Michael Daniels &lt;<a href=\"mailto:dayzman@gmail.com\">dayzman@gmail.com</a>&gt; wrote:</p>\n<blockquote>\n<p>Hi</p>\n<p>I'm hoping some of you could help me with the following lemma:<br>\n...<br>\nlemma rt4: \"ALL a b. sqrt(4) / pl a &gt; sqrt(4) / pl b\"<br>\nusing gt<br>\nsledgehammer;</p>\n<p>It seems like a rather simple lemma but sledgehammer (E, SPASS, and<br>\nVampire) can't seem to return the set of theorems for metis. Does<br>\nanyone know how to prove it?</p>\n</blockquote>\n<p>This lemma rt4 is obviously false. Consider the case where a and b are equal.</p>\n<p>lemma rt4_wrong: \"~ (ALL a b. sqrt(4) / pl a &gt; sqrt(4) / pl b)\"<br>\napply simp<br>\napply (rule exI [where x=1])<br>\napply (rule exI [where x=1])<br>\napply simp<br>\ndone</p>\n<p>Perhaps you meant \"EX a b. sqrt(4) / pl a &gt; sqrt(4) / pl b\" ?</p>\n<ul>\n<li>Brian</li>\n</ul>",
        "id": 294109709,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660836386
    },
    {
        "content": "<p>From: Brian Huffman &lt;<a href=\"mailto:brianh@cs.pdx.edu\">brianh@cs.pdx.edu</a>&gt;<br>\nOn Fri, Jun 4, 2010 at 8:11 AM, Michael Daniels &lt;<a href=\"mailto:dayzman@gmail.com\">dayzman@gmail.com</a>&gt; wrote:</p>\n<blockquote>\n<p>On Fri, Jun 4, 2010 at 3:36 PM, Brian Huffman &lt;<a href=\"mailto:brianh@cs.pdx.edu\">brianh@cs.pdx.edu</a>&gt; wrote:</p>\n<blockquote>\n<p>Perhaps you meant \"EX a b. sqrt(4) / pl a &gt; sqrt(4) / pl b\" ?<br>\n</p>\n</blockquote>\n<p>Indeed, I've sent a follow-up about the typo but it hasn't reached the<br>\nmailing list yet. What I meant is indeed EX rather than ALL. Any idea<br>\non what theorems should be used here and why sledgehammer fails to<br>\nfind any when it's sqrt?</p>\n</blockquote>\n<p>If you are just interested in finding a proof, then here's one that works:</p>\n<p>lemma exists_gt_conv_neq:<br>\n  fixes f :: \"real =&gt; real\"<br>\n  shows \"(EX x y. f x &gt; f y) = (EX x y. f x ~= f y)\"<br>\nunfolding neq_iff by auto</p>\n<p>lemma rt4: \"EX a b. sqrt(4) / pl a &gt; sqrt(4) / pl b\"<br>\nusing gt unfolding exists_gt_conv_neq by simp</p>\n<p>But I think maybe your real question is why sledgehammer/metis are<br>\nhaving such trouble. One strategy you can try is to insert gt into the<br>\nsubgoal before calling sledgehammer, instead of passing it via the<br>\nchained facts.</p>\n<p>lemma rt4: \"EX a b. sqrt(4) / pl a &gt; sqrt(4) / pl b\"<br>\nusing gt<br>\napply - (* this inserts axiom gt into the subgoal *)<br>\nsledgehammer;</p>\n<p>Another thing you could do is realize that the only relevant property<br>\nof \"sqrt(4)\" is that it is positive. Sledgehammer and metis were able<br>\nto handle the following generalization:</p>\n<p>lemma gt4': \"0 &lt; z ==&gt; EX a b. z / pl a &gt; z / pl b\"<br>\nusing gt apply -<br>\nsledgehammer;</p>\n<p>Showing that \"0 &lt; sqrt(4)\" is easy for the simplifier, but it requires<br>\nseveral extra rules to be passed to metis. (I think the numeral \"4\" is<br>\nactually a bigger problem than \"sqrt\".) The proof of the generalized<br>\nversion gt4' is already rather difficult for metis (taking over a<br>\nminute on my machine), so I am not really surprised that the extra<br>\ncomplexity of \"sqrt(4)\" takes longer than you want to wait.</p>\n<ul>\n<li>Brian</li>\n</ul>\n<blockquote>\n<p>Thanks<br>\nMichael</p>\n<blockquote>\n<ul>\n<li>Brian</li>\n</ul>\n</blockquote>\n</blockquote>",
        "id": 294109723,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660836392
    },
    {
        "content": "<p>From: Michael Daniels &lt;<a href=\"mailto:dayzman@gmail.com\">dayzman@gmail.com</a>&gt;<br>\n2010/6/4 grechukbogdan &lt;<a href=\"mailto:grechukbogdan@yandex.ru\">grechukbogdan@yandex.ru</a>&gt;:</p>\n<blockquote>\n<p>Hi</p>\n<p>The lemma \"ALL a b. (4) / pl a &gt; (4) / pl b\" is not correct. Counterexample a=b<br>\nMay be, you wanted to say \"EX a b. (4) / pl a &gt; (4) / pl b\"?<br>\n</p>\n</blockquote>\n<p>That's correct; sorry for the typo. Like wise for rt4 and it should<br>\nread \"EX a b. sqrt(4) / pl a &gt; sqrt(4) / pl b\" instead. So anyone<br>\nknows what theorems are needed for rt4 and why metis won't terminate?</p>\n<p>Thanks<br>\nMichael</p>\n<blockquote>\n<p>Bogdan.</p>\n<p>04.06.10, 08:15, \"Michael Daniels\" &lt;<a href=\"mailto:dayzman@gmail.com\">dayzman@gmail.com</a>&gt;:</p>\n<blockquote>\n<p>Hi</p>\n<p>I'm hoping some of you could help me with the following lemma:</p>\n<p>consts<br>\n pl :: \"real =&gt; real\"</p>\n<p>axioms<br>\n gt: \"EX x y. pl x &gt; pl y\"</p>\n<p>lemma rt4: \"ALL a b. sqrt(4) / pl a &gt; sqrt(4) / pl b\"<br>\n using gt<br>\n sledgehammer;</p>\n<p>It seems like a rather simple lemma but sledgehammer (E, SPASS, and<br>\n Vampire) can't seem to return the set of theorems for metis. Does<br>\n anyone know how to prove it?</p>\n<p>Moreover, if I simplify the lemma by removing the sqrt to:</p>\n<p>lemma rt4: \"ALL a b. (4) / pl a &gt; (4) / pl b\"<br>\n using gt<br>\n sledgehammer;</p>\n<p>Vampire gives me a minimal set of 14 theorems for metis:</p>\n<p>apply (metis comm_monoid_add.mult_commute comp_arith(112)<br>\n divide_inverse eq_diff_eq' eq_number_of inverse_inverse_eq<br>\n linorder_neqE_ordered_idom monoid_add_class.add_0_right<br>\n mult.diff_right mult.zero_left real_less_def real_mult_right_cancel<br>\n rel_simps(38) rel_simps(46))</p>\n<p>However, metis actually will not terminate. Assuming those 14 theorems<br>\n are the required theorems, why is having sqrt so difficult for<br>\n sledgehammer?</p>\n<p>Thanks!</p>\n<p>Michael</p>\n</blockquote>\n<p>--<br>\nЗдесь спама нет <a href=\"http://mail.yandex.ru/nospam/sign\">http://mail.yandex.ru/nospam/sign</a></p>\n</blockquote>",
        "id": 294109753,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660836404
    },
    {
        "content": "<p>From: Michael Daniels &lt;<a href=\"mailto:dayzman@gmail.com\">dayzman@gmail.com</a>&gt;<br>\nOn Fri, Jun 4, 2010 at 3:36 PM, Brian Huffman &lt;<a href=\"mailto:brianh@cs.pdx.edu\">brianh@cs.pdx.edu</a>&gt; wrote:</p>\n<blockquote>\n<p>On Thu, Jun 3, 2010 at 9:15 PM, Michael Daniels &lt;<a href=\"mailto:dayzman@gmail.com\">dayzman@gmail.com</a>&gt; wrote:</p>\n<blockquote>\n<p>Hi</p>\n<p>I'm hoping some of you could help me with the following lemma:<br>\n...<br>\nlemma rt4: \"ALL a b. sqrt(4) / pl a &gt; sqrt(4) / pl b\"<br>\nusing gt<br>\nsledgehammer;</p>\n<p>It seems like a rather simple lemma but sledgehammer (E, SPASS, and<br>\nVampire) can't seem to return the set of theorems for metis. Does<br>\nanyone know how to prove it?</p>\n</blockquote>\n<p>This lemma rt4 is obviously false. Consider the case where a and b are equal.</p>\n<p>lemma rt4_wrong: \"~ (ALL a b. sqrt(4) / pl a &gt; sqrt(4) / pl b)\"<br>\napply simp<br>\napply (rule exI [where x=1])<br>\napply (rule exI [where x=1])<br>\napply simp<br>\ndone</p>\n<p>Perhaps you meant \"EX a b. sqrt(4) / pl a &gt; sqrt(4) / pl b\" ?<br>\n</p>\n</blockquote>\n<p>Indeed, I've sent a follow-up about the typo but it hasn't reached the<br>\nmailing list yet. What I meant is indeed EX rather than ALL. Any idea<br>\non what theorems should be used here and why sledgehammer fails to<br>\nfind any when it's sqrt?</p>\n<p>Thanks<br>\nMichael</p>\n<blockquote>\n<ul>\n<li>Brian<br>\n</li>\n</ul>\n</blockquote>",
        "id": 294109810,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660836429
    },
    {
        "content": "<p>From: Michael Daniels &lt;<a href=\"mailto:dayzman@gmail.com\">dayzman@gmail.com</a>&gt;<br>\nOn Fri, Jun 4, 2010 at 6:07 PM, Brian Huffman &lt;<a href=\"mailto:brianh@cs.pdx.edu\">brianh@cs.pdx.edu</a>&gt; wrote:</p>\n<blockquote>\n<p>On Fri, Jun 4, 2010 at 8:11 AM, Michael Daniels &lt;<a href=\"mailto:dayzman@gmail.com\">dayzman@gmail.com</a>&gt; wrote:</p>\n<blockquote>\n<p>On Fri, Jun 4, 2010 at 3:36 PM, Brian Huffman &lt;<a href=\"mailto:brianh@cs.pdx.edu\">brianh@cs.pdx.edu</a>&gt; wrote:</p>\n<blockquote>\n<p>Perhaps you meant \"EX a b. sqrt(4) / pl a &gt; sqrt(4) / pl b\" ?<br>\n</p>\n</blockquote>\n</blockquote>\n<p>If you are just interested in finding a proof, then here's one that works:</p>\n<p>lemma exists_gt_conv_neq:<br>\n fixes f :: \"real =&gt; real\"<br>\n shows \"(EX x y. f x &gt; f y) = (EX x y. f x ~= f y)\"<br>\nunfolding neq_iff by auto</p>\n<p>lemma rt4: \"EX a b. sqrt(4) / pl a &gt; sqrt(4) / pl b\"<br>\nusing gt unfolding exists_gt_conv_neq by simp<br>\n</p>\n</blockquote>\n<p>I have a somewhat related question. How come the subgoal in rt2a isn't<br>\nunfolded, given:</p>\n<p>consts<br>\npl :: \"real =&gt; real =&gt; real\"<br>\npm :: \"real =&gt; real\"<br>\nj :: real</p>\n<p>axioms<br>\ngt1: \"EX a b x y. pl (pm a) x &gt; pl (pm b) y\"<br>\ngt2: \"EX x y. pl (pm j) x &gt; pl (pm j) y\"</p>\n<p>lemma rt2a: \"EX x y. ( 1/(pl (pm j) x)) &gt; ( 1/ (pl (pm j) y))\"<br>\nusing gt2<br>\nunfolding exists_gt_conv_neq2<br>\noops</p>\n<p>whereas, the following is unfolded:</p>\n<p>lemma rt2b: \"EX x y. ( (pl (pm j) x)) &gt; ( (pl (pm j) y))\"<br>\nusing gt2<br>\nunfolding exists_gt_conv_neq2<br>\nby simp</p>\n<p>Also, if the argument to pm was an existential variable, then it is<br>\nalso unfolded:</p>\n<p>lemma exists_gt_conv_neq1:<br>\n fixes f :: \"real =&gt; real =&gt; real\"<br>\n shows \"(EX a b x y. f a x &gt; f b y) = (EX a b x y. f a x ~= f b y)\"<br>\nunfolding neq_iff by blast</p>\n<p>lemma rt1: \"EX a b x y. ( 1/ (pl (pm a) x)) &gt; ( 1/ (pl (pm b) y))\"<br>\nusing gt1<br>\nunfolding exists_gt_conv_neq1<br>\nby simp</p>\n<p>How come giving pm a constant disables unfolding?</p>\n<p>Thanks again.<br>\nMichael</p>\n<blockquote>\n<ul>\n<li>Brian</li>\n</ul>\n<blockquote>\n<p>Thanks<br>\nMichael</p>\n<blockquote>\n<ul>\n<li>Brian<br>\n</li>\n</ul>\n</blockquote>\n</blockquote>\n</blockquote>",
        "id": 294109859,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660836447
    }
]