[
    {
        "content": "<p>From: Sigurd Torkel Meldgaard &lt;<a href=\"mailto:stm@cs.au.dk\">stm@cs.au.dk</a>&gt;<br>\nHi Isabelle-users</p>\n<p>I am stumblingly trying to prove that nth is monotone on a sorted<br>\nlist, I got this far:</p>\n<p>lemma sorted_mono[simp]:<br>\n  assumes<br>\n  \"sorted (xs::int list)\"<br>\n  shows \"xs ≠ [] ⟶ mono (λ a . xs ! a)\"<br>\nproof (induct xs rule: sorted.induct)<br>\n  case 1 show ?case by simp<br>\n  next<br>\n    case (2 element) show ?case<br>\n    proof (simp add: mono_def)</p>\n<p>And here I am stuck, do I have to explicitly assume that the indices<br>\nare within the length of xs, or how does a proof with a partial<br>\nfunction work?</p>\n<p>All the best</p>\n<p>/Sigurd</p>",
        "id": 294077549,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660829459
    },
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\nHOL is a logic of total functions. nth xs i is defined, but unless i &lt;<br>\nlength xs, you have no idea what the value is. Hence you can only prove<br>\nmonotonicity with that precondition.</p>\n<p>Best<br>\nTobias</p>\n<p>Sigurd Torkel Meldgaard schrieb:</p>",
        "id": 294077572,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660829468
    },
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\nIt's a useful thm, hence I just proved and added it to List.thy:</p>\n<p>lemma sorted_nth_mono:<br>\n  \"sorted xs ==&gt; i &lt;= j ==&gt; j &lt; length xs ==&gt; xs!i &lt;= xs!j\"<br>\nby (induct xs arbitrary: i j) (auto simp:nth_Cons' sorted_Cons)</p>\n<p>Thanks<br>\nTobias</p>\n<p>Sigurd Torkel Meldgaard schrieb:</p>",
        "id": 294077579,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660829474
    }
]