[
    {
        "content": "<p>From: Lars Noschinski &lt;<a href=\"mailto:noschinl@in.tum.de\">noschinl@in.tum.de</a>&gt;<br>\nI get this when interpreting stuff from probability theory, which has a <br>\nelaborate locale hierarchy. Some small example:</p>\n<hr>\n<p>theory Scratch<br>\nimports<br>\n   \"~~/src/HOL/Probability/Probability\"<br>\nbegin</p>\n<p>locale edge_space =<br>\n   fixes p :: real<br>\n   fixes n :: nat<br>\n   assumes p_prob: \"0 ≤ p\" \"p ≤ 1\"<br>\n   assumes n_Suc: \"0 &lt; n\"</p>\n<p>context edge_space begin</p>\n<p>definition \"S_verts ≡ {1..n}\"<br>\ndefinition \"S_edges = S_verts × S_verts\"</p>\n<p>lemma finite[simp]: \"finite S_verts\" \"finite S_edges\"<br>\n   and not_empty[simp]: \"S_verts ≠ {}\"<br>\n   using n_Suc by (auto simp: S_verts_def S_edges_def)</p>\n<p>end</p>\n<p>sublocale edge_space ⊆ product_finite_prob_space<br>\n   \"(λ_. bernoulli_space p)\" S_edges<br>\nby default (auto simp: S_edges_def)</p>\n<p>ML_prf {* Toplevel.timing := true *}</p>\n<p>notepad begin<br>\n   fix n :: nat and p :: real assume A: \"0 ≤ p\" \"p ≤ 1\" \"0 &lt; n\"<br>\n   interpret I: product_finite_prob_space \"λ_. bernoulli_space p\" \"{1..n}\"<br>\n     apply default<br>\n     apply auto<br>\n     done</p>\n<p>from A interpret E: edge_space p n<br>\n     apply unfold_locales<br>\n     apply auto</p>\n<p>done<br>\nend</p>\n<hr>\n<p>The first interpret command gives (in jedit, e903a390370c)</p>\n<p>1.633s elapsed time, 1.596s cpu time, 0.540s GC time</p>\n<p>the second (with the minimally extended locale):</p>\n<p>2.269s elapsed time, 2.208s cpu time, 0.708s GC time</p>\n<p>I do not really use it, but using interpretation on the toplevel seems <br>\nto be a lot slower then interpret in a proof (3.5 to 3.8s).</p>\n<p>-- Lars</p>",
        "id": 294147034,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660847884
    },
    {
        "content": "<p>From: Lars Noschinski &lt;<a href=\"mailto:noschinl@in.tum.de\">noschinl@in.tum.de</a>&gt;<br>\nHi,</p>\n<p>I've got two locales A (with predicate \"A x\") and B and</p>\n<p>sublocale A &lt;= B (f x)</p>\n<p>holds. Now, if I have \"A x\", how can I show \"B (f x)\" without repeating <br>\nthe proof for the sublocale property?</p>\n<p>I only need one lemma from B, so I would really like to avoid <br>\ninstantiating A, as this takes very long (around 2.5s per instantiation).</p>\n<p>-- Lars</p>",
        "id": 294148548,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660848445
    },
    {
        "content": "<p>From: Johannes Hölzl &lt;<a href=\"mailto:hoelzl@in.tum.de\">hoelzl@in.tum.de</a>&gt;<br>\nHi Lars,</p>\n<p>AFAIK sublocale doesn't store the proven theorem. So the best is to<br>\nprove:</p>\n<p>lemma (in A) B_f: \"B (f x)\"<br>\n ...</p>\n<p>sublocale A &lt;= B (f x)<br>\n  by (rule B_f)</p>\n<p>and now you can use it also with:</p>\n<p>note B_f = A.B_f[OF <code>A x</code>]<br>\n  note B.lemma[OF B]</p>\n<p>which is ugly, but fast.</p>\n<ul>\n<li>Johannes</li>\n</ul>",
        "id": 294148562,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660848451
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nI have recently started to make some more systematic performance <br>\nmeasurements on the locale infrastructure.  So if you can point me to the <br>\nsources of a concrete example like yours above, the situation might <br>\neventually improve.</p>\n<p>Makarius</p>",
        "id": 294148573,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660848457
    }
]