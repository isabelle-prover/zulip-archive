[
    {
        "content": "<p>From: <a href=\"mailto:s.wong.731@gmail.com\">s.wong.731@gmail.com</a><br>\nHi,</p>\n<p>If I have two real^3 spaces S1 and S2 as:</p>\n<p>axiomatization<br>\nS1 :: \"real ^ 2\" and<br>\nS2 :: \"real ^ 2\" where<br>\nr1: \"S1 $ 0 = S2 $ 0\" and<br>\nr2: \"S1 $ 1 = S2 $ 1\" and<br>\nr3: \"S1 $ 2 = S2 $ 2\"</p>\n<p>lemma \"S1 = S2\"</p>\n<p>How would one go about proving the lemma? I suppose I'd need Cart_eq, which  <br>\nreads:</p>\n<p>lemma Cart_eq: \"(x = y) &lt;--&gt; (ALL i. x$i = y$i)\"</p>\n<p>but it quantifies over all i's. Since S1 and S2 have only 3 dimensions,  <br>\nthen should i be only in the range [1..3]?</p>\n<p>Thanks<br>\nSteve</p>",
        "id": 294133588,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660843654
    },
    {
        "content": "<p>From: Timothy McKenzie &lt;<a href=\"mailto:tjm1983@gmail.com\">tjm1983@gmail.com</a>&gt;<br>\nOn Wed, 30 Mar 2011 07:33:25 <a href=\"mailto:s.wong.731@gmail.com\">s.wong.731@gmail.com</a> wrote:</p>\n<blockquote>\n<p>Hi,</p>\n<p>If I have two real^3 spaces S1 and S2 as:</p>\n<p>axiomatization<br>\nS1 :: \"real ^ 2\" and<br>\nS2 :: \"real ^ 2\" where<br>\nr1: \"S1 $ 0 = S2 $ 0\" and<br>\nr2: \"S1 $ 1 = S2 $ 1\" and<br>\nr3: \"S1 $ 2 = S2 $ 2\"</p>\n</blockquote>\n<p>You've written \"real ^ 2\" where I think you mean \"real ^ 3\", but <br>\nI'll leave it as it is for illustrative purposes.</p>\n<blockquote>\n<p>lemma \"S1 = S2\"</p>\n<p>How would one go about proving the lemma? I suppose I'd need<br>\nCart_eq, which reads:</p>\n<p>lemma Cart_eq: \"(x = y) &lt;--&gt; (ALL i. x$i = y$i)\"</p>\n<p>but it quantifies over all i's. Since S1 and S2 have only 3<br>\ndimensions, then should i be only in the range [1..3]?</p>\n</blockquote>\n<p>The \"2\" in your type \"real^2\" is a type, not a member of the <br>\nnatural numbers type (or any other type).  You can write any <br>\ninteger, and if Isabelle believes it's of the type \"2\", it will be <br>\ninterpreted as a member of that type by taking its remainder <br>\nmodulo 2.  For example:</p>\n<p>lemma \"-6 = (2 :: 2)\" by simp</p>\n<p>So your r1 and r3 say exactly the same thing, but Isabelle didn't <br>\ncomplain, because it can interpret them meaningfully.</p>\n<p>So the quantified i in Cart_eq (when applied in your situation) is <br>\nan element of the type \"2\", which has only two elements: \"0\" and <br>\n\"1\" (or \"1\" and \"2\", if you prefer).  The trick is to turn this <br>\n\"ALL i.\" into a conjunction \"x$1 = y$1 &amp; x$2 = y$2\", which can be <br>\nquickly proven from your r2 and r3.  Fortunately, forall_2 can do <br>\njust this, so:</p>\n<p>lemma \"S1 = S2\"<br>\n  using r2 r3<br>\n  by (simp add: Cart_eq forall_2)</p>\n<p>Multivariate_Analysis also has similar lemmas forall_1 and <br>\nforall_3 for the types \"1\" and \"3\", but not forall_4 or greater.</p>\n<p>I tested all this in Isabelle2009-2.  I haven't moved to <br>\nIsabelle2011 yet, because my work relies heavily on what I've just <br>\ndescribed, and the following in the NEWS file for Isabelle2011 <br>\nworried me:</p>\n<ul>\n<li>\n<p>Session Multivariate_Analysis: introduced a type class for <br>\neuclidean space.  Most theorems are now stated in terms of <br>\neuclidean spaces instead of finite cartesian products.</p>\n<p>types<br>\n  real ^ 'n ~&gt;  'a::real_vector<br>\n            ~&gt;  'a::euclidean_space<br>\n            ~&gt;  'a::ordered_euclidean_space<br>\n      (depends on your needs)</p>\n<p>constants<br>\n   _ $ _        ~&gt; _ $$ _\n   \\&lt;chi&gt; x. _  ~&gt; \\&lt;chi&gt;\\&lt;chi&gt; x. _\n   CARD('n)     ~&gt; DIM('a)</p>\n</li>\n</ul>\n<p>Also note that the indices are now natural numbers and not from <br>\nsome finite type. Finite cartesian products of euclidean spaces, <br>\nproducts of euclidean spaces the real and complex numbers are <br>\ninstantiated to be euclidean_spaces.  INCOMPATIBILITY.</p>\n<blockquote>\n<p>Thanks<br>\nSteve</p>\n</blockquote>\n<p>Tim<br>\n&lt;&gt;&lt;<br>\n<a href=\"/user_uploads/14278/Qrfm6GLXZ77Y-Lp8jwjmdwYB/signature.asc\">signature.asc</a></p>",
        "id": 294133612,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660843660
    },
    {
        "content": "<p>From: Brian Huffman &lt;<a href=\"mailto:brianh@cs.pdx.edu\">brianh@cs.pdx.edu</a>&gt;<br>\nOn Tue, Mar 29, 2011 at 3:05 PM, Timothy McKenzie &lt;<a href=\"mailto:tjm1983@gmail.com\">tjm1983@gmail.com</a>&gt; wrote:</p>\n<blockquote>\n<p>On Wed, 30 Mar 2011 07:33:25 <a href=\"mailto:s.wong.731@gmail.com\">s.wong.731@gmail.com</a> wrote:</p>\n<blockquote>\n<p>Hi,</p>\n<p>If I have two real^3 spaces S1 and S2 as:</p>\n<p>axiomatization<br>\nS1 :: \"real ^ 2\" and<br>\nS2 :: \"real ^ 2\" where<br>\nr1: \"S1 $ 0 = S2 $ 0\" and<br>\nr2: \"S1 $ 1 = S2 $ 1\" and<br>\nr3: \"S1 $ 2 = S2 $ 2\"</p>\n</blockquote>\n<p>You've written \"real ^ 2\" where I think you mean \"real ^ 3\", but<br>\nI'll leave it as it is for illustrative purposes.</p>\n<blockquote>\n<p>lemma \"S1 = S2\"</p>\n<p>How would one go about proving the lemma? I suppose I'd need<br>\nCart_eq, which reads:</p>\n<p>lemma Cart_eq: \"(x = y) &lt;--&gt; (ALL i. x$i = y$i)\"</p>\n<p>but it quantifies over all i's. Since S1 and S2 have only 3<br>\ndimensions, then should i be only in the range [1..3]?</p>\n</blockquote>\n<p>The \"2\" in your type \"real^2\" is a type, not a member of the<br>\nnatural numbers type (or any other type).  You can write any<br>\ninteger, and if Isabelle believes it's of the type \"2\", it will be<br>\ninterpreted as a member of that type by taking its remainder<br>\nmodulo 2.  For example:</p>\n<p>lemma \"-6 = (2 :: 2)\" by simp</p>\n<p>So your r1 and r3 say exactly the same thing, but Isabelle didn't<br>\ncomplain, because it can interpret them meaningfully.</p>\n<p>So the quantified i in Cart_eq (when applied in your situation) is<br>\nan element of the type \"2\", which has only two elements: \"0\" and<br>\n\"1\" (or \"1\" and \"2\", if you prefer).  The trick is to turn this<br>\n\"ALL i.\" into a conjunction \"x$1 = y$1 &amp; x$2 = y$2\", which can be<br>\nquickly proven from your r2 and r3.  Fortunately, forall_2 can do<br>\njust this, so:</p>\n<p>lemma \"S1 = S2\"<br>\n using r2 r3<br>\n by (simp add: Cart_eq forall_2)</p>\n<p>Multivariate_Analysis also has similar lemmas forall_1 and<br>\nforall_3 for the types \"1\" and \"3\", but not forall_4 or greater.</p>\n</blockquote>\n<p>Tim,</p>\n<p>Thanks for the great explanation of numeral types!</p>\n<blockquote>\n<p>I tested all this in Isabelle2009-2.  I haven't moved to<br>\nIsabelle2011 yet, because my work relies heavily on what I've just<br>\ndescribed, and the following in the NEWS file for Isabelle2011<br>\nworried me:</p>\n<ul>\n<li>Session Multivariate_Analysis: introduced a type class for<br>\neuclidean space.  Most theorems are now stated in terms of<br>\neuclidean spaces instead of finite cartesian products.</li>\n</ul>\n<p>types<br>\n   real ^ 'n ~&gt;  'a::real_vector<br>\n             ~&gt;  'a::euclidean_space<br>\n             ~&gt;  'a::ordered_euclidean_space<br>\n       (depends on your needs)</p>\n</blockquote>\n<p>I'm sure Johannes could say more about these changes, but I wanted to<br>\npoint out one benefit:</p>\n<p>Many lemmas that used to be specific to types \"real ^ 'n\" are now<br>\nproved in general for any type in class euclidean_space. This means<br>\nthat users of the Multivariate_Analysis libraries are no longer<br>\nrestricted to using cartesian product types like \"real ^ 2\" and \"real<br>\n^ 3\". Types like \"real * real\"  and \"real * real * real\" are also<br>\ninstances of class euclidean_space, and so most of the theorems in the<br>\nMultivariate_Analysis library will work with them too.</p>\n<p>I happen to think that ordinary tuples are much easier to work with:<br>\nFor example, \"(x, y, z)\" is rather nicer than any notation available<br>\nfor type \"real ^ 3\". Also, it isn't too much trouble to convert back<br>\nand forth between tuples and the generic \"_$$_\" notations:</p>\n<p>lemma<br>\n  fixes x y z :: \"real\"<br>\n  shows \"(x,y,z) <span class=\"tex-error\">$$ 0 = x \\&lt;and&gt; (x,y,z) $$</span> 1 = y \\&lt;and&gt; (x,y,z) $$ 2 = z\"<br>\nby (simp add: euclidean_component_def basis_prod_def)</p>\n<ul>\n<li>Brian</li>\n</ul>",
        "id": 294133635,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660843666
    },
    {
        "content": "<p>From: Johannes HÃ¶lzl &lt;<a href=\"mailto:hoelzl@in.tum.de\">hoelzl@in.tum.de</a>&gt;<br>\nHi Timothy,</p>\n<p>Am Mittwoch, den 30.03.2011, 11:05 +1300 schrieb Timothy McKenzie:<br>\n[..]</p>\n<blockquote>\n<p>I tested all this in Isabelle2009-2.  I haven't moved to <br>\nIsabelle2011 yet, because my work relies heavily on what I've just <br>\ndescribed, and the following in the NEWS file for Isabelle2011 <br>\nworried me:</p>\n<ul>\n<li>\n<p>Session Multivariate_Analysis: introduced a type class for <br>\neuclidean space.  Most theorems are now stated in terms of <br>\neuclidean spaces instead of finite cartesian products.</p>\n<p>types<br>\n  real ^ 'n ~&gt;  'a::real_vector<br>\n            ~&gt;  'a::euclidean_space<br>\n            ~&gt;  'a::ordered_euclidean_space<br>\n      (depends on your needs)</p>\n<p>constants<br>\n   _ $ _        ~&gt; _ $$ _\n   \\&lt;chi&gt; x. _  ~&gt; \\&lt;chi&gt;\\&lt;chi&gt; x. _\n   CARD('n)     ~&gt; DIM('a)</p>\n</li>\n</ul>\n<p>Also note that the indices are now natural numbers and not from <br>\nsome finite type. Finite cartesian products of euclidean spaces, <br>\nproducts of euclidean spaces the real and complex numbers are <br>\ninstantiated to be euclidean_spaces.  INCOMPATIBILITY.</p>\n</blockquote>\n<p>Did you try Isabelle2011? Of course the type real ^ 'n was not removed,<br>\nbut for most lemmas the constant names changed. </p>\n<p>Either you rewrite your terms (which is mostly Search &amp; Replace) or you<br>\ntry to stay with the \"real ^ 'n\" constants and use the simplifier to<br>\nrewrite them at each proof (but I'm not sure how well this approach<br>\nworks).</p>\n<p>Alternatively we could try to add the real^'n version of all changed<br>\nlemmas back (by specialising the lemmas about euclidean spaces). </p>\n<p>When we introduced this changes I were not aware of any existing work<br>\nusing Multivariate_Analysis. Hence we did not care about backwards<br>\ncompatibility. But we can try to add compatibility lemmas so you can<br>\nport your work to the next Isabelle release. Is your work available<br>\nanywhere? Is it possible to take a look at it?</p>\n<blockquote>\n<p>Tim<br>\n&lt;&gt;&lt;</p>\n</blockquote>\n<p>Greetings,<br>\n  Johannes</p>",
        "id": 294133655,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660843672
    }
]