[
    {
        "content": "<p>From: Alfio Martini &lt;<a href=\"mailto:alfio.martini@acm.org\">alfio.martini@acm.org</a>&gt;<br>\nDear  Isabelle Users,</p>\n<p>I wonder if there is a better way to express the summations below in<br>\nIsabelle/HOL/Isar (I might think<br>\nthere is).</p>\n<p>In particular, I do not get why the first two theorems express the subgoals<br>\nin term of the \"lowest\" level<br>\nterms \"setsum\" and \"op\" while the third one thankfully not. Especially, I<br>\ndon´t see any \"relevant\" difference<br>\nbetween sum_patter02 e sum_pattern03.</p>\n<p>As a last unrelated question, in theorem sum_pattern04, I could not prove<br>\nthe inductive step with either<br>\nsimp or auto. When using exponentiations, what kind of proof method does<br>\none has to usually use?</p>\n<p>Thanks for any help!</p>\n<hr>\n<p>theorem sum_pattern01:<br>\n   fixes n::nat<br>\n   shows \"(∑j∈{0..n}. 2*j)= n * (n+1)\" (is \"?P n\")<br>\n   proof (induction n)<br>\n    show \"?P 0\" by simp<br>\n    next<br>\n    fix x0::nat<br>\n    assume \"?P x0\"<br>\n    from this show \"?P (Suc x0)\" by simp<br>\n  qed</p>\n<p>theorem sum_pattern02:<br>\n   fixes n::nat<br>\n   shows \"(∑j=0..n. 2*j)= n * (n+1)\" (is \"?P n\")<br>\n   proof (induction n)<br>\n    show \"?P 0\" by simp<br>\n    next<br>\n    fix x0::nat<br>\n    assume \"?P x0\"<br>\n    from this show \"?P (Suc x0)\" by simp<br>\n  qed</p>\n<p>theorem sum_pattern03:<br>\n   fixes n::nat<br>\n   shows \"(∑j=0..n. 2*j+1) = (n+1) * (n+1)\" (is \"?P n\")<br>\n   proof (induction n)<br>\n     show \"?P 0\" by simp<br>\n     next<br>\n     fix x0<br>\n     assume IH: \"?P x0\"<br>\n     from this show \"?P (Suc x0)\" by simp<br>\n   qed</p>\n<p>theorem sum_pattern04:<br>\n   fixes n::nat<br>\n   shows \"(∑j=0..n. 2*j+1) = (n+1)^2\" (is \"?P n\")<br>\n   proof (induction n)<br>\n     show \"?P 0\" by simp<br>\n     next<br>\n     fix x0<br>\n     assume IH: \"?P x0\"<br>\n     from this show \"?P (Suc x0)\" by simp (* fails *)<br>\n   qed</p>",
        "id": 294228799,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660901363
    },
    {
        "content": "<p>From: Johannes Hölzl &lt;<a href=\"mailto:hoelzl@in.tum.de\">hoelzl@in.tum.de</a>&gt;<br>\nAm Dienstag, den 11.12.2012, 10:49 -0200 schrieb Alfio Martini:</p>\n<blockquote>\n<p>Dear  Isabelle Users,</p>\n<p>I wonder if there is a better way to express the summations below in<br>\nIsabelle/HOL/Isar (I might think there is).</p>\n</blockquote>\n<p>I assume you want to try different ways to write down your lemma. If you<br>\njust need Gauss summation there are a couple of lemmas in Set_Interval<br>\n(gauss_sum and arith_sums_general), just use<br>\n  find_theorems setsum \"_ * _\"  .</p>\n<blockquote>\n<p>In particular, I do not get why the first two theorems express the subgoals<br>\nin term of the \"lowest\" level<br>\nterms \"setsum\" and \"op\" while the third one thankfully not.</p>\n</blockquote>\n<p>First \"∑j=0..n. 2<em>j\" is just a different syntax for \"∑j∈{0..n}. 2</em>j\" the<br>\nproof methods in Isabelle do not see any difference. So sum_pattern01<br>\nand sum_pattern02 are exactly the same theorems.</p>\n<p>What is the difference between sum_pattern02 and sum_pattern03:</p>\n<p>Isabelle applies eta normalization before it stores/displays terms<br>\n  \"%x. f x\" is rewritten to f</p>\n<p>so \"SUM j : A. 2 * j\"<br>\n    -display-&gt;<br>\n  \"setsum A (%j. 2 * j)\"<br>\n    -eta-&gt;<br>\n  \"setsum A (op * 2)\"<br>\nthere is no syntax defined for the last term so it is displayed as is.<br>\nFor sum_pattern03 eta normalization does not change the term.</p>\n<blockquote>\n<p>Especially, I<br>\ndon´t see any \"relevant\" difference<br>\nbetween sum_patter02 e sum_pattern03.</p>\n</blockquote>\n<p>%j. 2 * j  -eta-&gt;  op * 2</p>\n<p>whereas</p>\n<p>%j. 2 * j + 1   is not eta reducible.</p>\n<blockquote>\n<p>As a last unrelated question, in theorem sum_pattern04, I could not prove<br>\nthe inductive step with either<br>\nsimp or auto. When using exponentiations, what kind of proof method does<br>\none has to usually use?</p>\n</blockquote>\n<p>Isabelle does not automatically unfold \"t^2\" as t might be a quite big<br>\nterm. Use simp add: power2_eq_square to solve this.</p>\n<blockquote>\n<p>Thanks for any help!</p>\n<hr>\n<p>theorem sum_pattern01:<br>\n   fixes n::nat<br>\n   shows \"(∑j∈{0..n}. 2*j)= n * (n+1)\" (is \"?P n\")<br>\n   proof (induction n)<br>\n    show \"?P 0\" by simp<br>\n    next<br>\n    fix x0::nat<br>\n    assume \"?P x0\"<br>\n    from this show \"?P (Suc x0)\" by simp<br>\n  qed</p>\n<p>theorem sum_pattern02:<br>\n   fixes n::nat<br>\n   shows \"(∑j=0..n. 2*j)= n * (n+1)\" (is \"?P n\")<br>\n   proof (induction n)<br>\n    show \"?P 0\" by simp<br>\n    next<br>\n    fix x0::nat<br>\n    assume \"?P x0\"<br>\n    from this show \"?P (Suc x0)\" by simp<br>\n  qed</p>\n<p>theorem sum_pattern03:<br>\n   fixes n::nat<br>\n   shows \"(∑j=0..n. 2*j+1) = (n+1) * (n+1)\" (is \"?P n\")<br>\n   proof (induction n)<br>\n     show \"?P 0\" by simp<br>\n     next<br>\n     fix x0<br>\n     assume IH: \"?P x0\"<br>\n     from this show \"?P (Suc x0)\" by simp<br>\n   qed</p>\n<p>theorem sum_pattern04:<br>\n   fixes n::nat<br>\n   shows \"(∑j=0..n. 2*j+1) = (n+1)^2\" (is \"?P n\")<br>\n   proof (induction n)<br>\n     show \"?P 0\" by simp<br>\n     next<br>\n     fix x0<br>\n     assume IH: \"?P x0\"<br>\n     from this show \"?P (Suc x0)\" by simp (* fails *)<br>\n   qed</p>\n</blockquote>",
        "id": 294228820,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660901383
    },
    {
        "content": "<p>From: Manuel Eberl &lt;<a href=\"mailto:eberlm@in.tum.de\">eberlm@in.tum.de</a>&gt;<br>\nHallo,</p>\n<p>This is the normal way of writing sums in Isabelle.</p>\n<p>I think the reason for the behaviour of the output is that in case of<br>\nthe first two lemmas, you have the statement \"setsum (λj. 2*j) {0..n}\".<br>\n\"∑j=0..n. 2*j\" is merely an abbreviation for that.</p>\n<p>However, the term \"(λj. 2<em>j)\" is morally \"(λj. (op</em>) 2 j)\", which<br>\nη-reduces automatically to \"(op* 2)\", and my guess is that the pretty<br>\nprinter cannot match this to the abbreviation for setsum anymore, so<br>\nthat you get the \"naked\" output \"setsum (op * 2) {0..n}\".</p>\n<p>In the other two lemmas, you have \"setsum (λj. 2*j + 1) {0..n}\". This<br>\ndoes not η- or β-reduce to anything, so Isabelle can show it in its<br>\nabbreviated form in the output.</p>\n<p>A quick workaround for the first two lemmas would be two write them in a<br>\nform in which they are not η-reducible anymore, e.g. with \"(λj. j*2)\",<br>\nwhich is morally \"(λj. (op*) j 2)\". If you write your sum as \"∑j∈{0..n}.<br>\nj*2\", you get the nice output without setsum.</p>\n<p>Regarding your last question, simp does the trick, but it needs the<br>\nlemma power2_eq_square, which states that \"?a² = ?a * ?a\". If you use<br>\n\"simp add: power2_eq_square\", your proof goes through automatically.<br>\nNormally, sledgehammer is a very good tool to find theorems like that,<br>\nbut in this case, it doesn't work for some reason. In any case, if you<br>\nare in a situation like that, it can often help to do \"apply simp\" or<br>\n\"apply auto\" and examine where they get stuck. In this case, you can see<br>\nthat the problem is that they cannot simplify the squared terms any<br>\nfurther, which is because simp doesn't \"know\" what squaring means.<br>\nTherefore, you need power2_eq_square to allow it to simplify the terms<br>\nfurther.</p>\n<p>Cheers,<br>\nManuel</p>",
        "id": 294228821,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660901383
    },
    {
        "content": "<p>From: Alfio Martini &lt;<a href=\"mailto:alfio.martini@acm.org\">alfio.martini@acm.org</a>&gt;<br>\nThank you Manuel and Johannes,</p>\n<p>These explanations were very helpful and enlightening at the same time.</p>\n<p>Best!</p>",
        "id": 294228824,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660901388
    }
]