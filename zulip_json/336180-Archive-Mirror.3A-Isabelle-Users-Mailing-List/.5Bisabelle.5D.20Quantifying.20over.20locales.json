[
    {
        "content": "<p>From: John Munroe &lt;<a href=\"mailto:munddr@gmail.com\">munddr@gmail.com</a>&gt;<br>\nHi,</p>\n<p>I'm trying to see how one could quantify over locales. For example, if I have:</p>\n<p>locale T =<br>\n  fixes f :: \"nat =&gt; nat\"<br>\n  and c :: nat<br>\n  assumes ax: \"f c = 1\"</p>\n<p>and if I want to prove that there exists a locale taking 2 parameters<br>\nsuch that applying the first parameter to the second is equal to 0<br>\n(essentially T):</p>\n<p>lemma \"EX P. P (f::real=&gt;real) (c::real) --&gt; f c &gt; 0\"</p>\n<p>but that would be a trivial lemma since P f c can simply be False. So<br>\nhow should one properly formulate the lemma? Is there a way of doing<br>\nso without specifying on the type that each parameter should take?</p>\n<p>Thanks in advance.</p>\n<p>John</p>",
        "id": 294144769,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660847089
    },
    {
        "content": "<p>From: Clemens Ballarin &lt;<a href=\"mailto:ballarin@in.tum.de\">ballarin@in.tum.de</a>&gt;<br>\nA locale is a predicate and its existence is trivial.  What you  <br>\nprobably wanted to show is that there is an instance of T for which f  <br>\nc &gt; 0:</p>\n<p>EX f c. T f c &amp; f c &gt; 0</p>\n<p>If you get the locale predicate (T in your case) involved, types are inferred.</p>\n<p>Clemens</p>\n<p>Quoting John Munroe &lt;<a href=\"mailto:munddr@gmail.com\">munddr@gmail.com</a>&gt;:</p>",
        "id": 294144781,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660847095
    },
    {
        "content": "<p>From: John Munroe &lt;<a href=\"mailto:munddr@gmail.com\">munddr@gmail.com</a>&gt;<br>\nBut what if I want to show that there is a binary predicate/locale in the<br>\ntheory such that applying the first param to the second is greater than 0<br>\ninstead? Basically T f c will be the witness. How should the lemma be<br>\nformulated?</p>\n<p>Thank you.</p>\n<p>John</p>\n<p>On Thursday, September 22, 2011, Clemens Ballarin &lt;<a href=\"mailto:ballarin@in.tum.de\">ballarin@in.tum.de</a>&gt;<br>\nwrote:</p>\n<blockquote>\n<p>A locale is a predicate and its existence is trivial.  What you probably<br>\nwanted to show is that there is an instance of T for which f c &gt; 0:</p>\n<p>EX f c. T f c &amp; f c &gt; 0</p>\n<p>If you get the locale predicate (T in your case) involved, types are<br>\ninferred.</p>\n<p>Clemens</p>\n<p>Quoting John Munroe &lt;<a href=\"mailto:munddr@gmail.com\">munddr@gmail.com</a>&gt;:</p>\n<blockquote>\n<p>Hi,</p>\n<p>I'm trying to see how one could quantify over locales. For example, if I<br>\nhave:</p>\n<p>locale T =<br>\n fixes f :: \"nat =&gt; nat\"<br>\n and c :: nat<br>\n assumes ax: \"f c = 1\"</p>\n<p>and if I want to prove that there exists a locale taking 2 parameters<br>\nsuch that applying the first parameter to the second is equal to 0<br>\n(essentially T):</p>\n<p>lemma \"EX P. P (f::real=&gt;real) (c::real) --&gt; f c &gt; 0\"</p>\n<p>but that would be a trivial lemma since P f c can simply be False. So<br>\nhow should one properly formulate the lemma? Is there a way of doing<br>\nso without specifying on the type that each parameter should take?</p>\n<p>Thanks in advance.</p>\n<p>John<br>\n</p>\n</blockquote>\n</blockquote>",
        "id": 294144794,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660847101
    },
    {
        "content": "<p>From: Steve Wong &lt;<a href=\"mailto:s.wong.731@gmail.com\">s.wong.731@gmail.com</a>&gt;<br>\nJust to confirm my understanding:</p>\n<p>EX f c. T f c &amp; f c &gt; 0 can be proved with the fact T_def.</p>\n<p>ALL f c. T f c --&gt; f c &gt; 0 can also be proved with the fact <a href=\"http://T.ax\">T.ax</a>.<br>\nAlternatively T f c --&gt; f c &gt; 0 can be proved the same way because free<br>\nvariables are implicitly quantified.</p>\n<p>Am I right here?</p>\n<p>Steve</p>",
        "id": 294145212,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660847240
    },
    {
        "content": "<p>From: Clemens Ballarin &lt;<a href=\"mailto:ballarin@in.tum.de\">ballarin@in.tum.de</a>&gt;<br>\nHi Steve,</p>\n<p>I think this is correct.  You'll need some knowledge about nat in the  <br>\nproof, of course.</p>\n<p>Clemens</p>\n<p>Quoting Steve Wong &lt;<a href=\"mailto:s.wong.731@gmail.com\">s.wong.731@gmail.com</a>&gt;:</p>",
        "id": 294145404,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660847301
    },
    {
        "content": "<p>From: John Munroe &lt;<a href=\"mailto:munddr@gmail.com\">munddr@gmail.com</a>&gt;<br>\nDigging up a slightly old post: So if I want to have a lemma that<br>\nspeaks about 2 locales, T f c and S a b, which of the following is<br>\ncorrect?</p>\n<p>lemma \"(T f c --&gt; f c &gt; 0) &amp; (S a b --&gt; a b &gt; 0)\"</p>\n<p>or</p>\n<p>lemma \"T f c &amp; S a b --&gt; f c &gt; 0 &amp; a b &gt; 0\"</p>\n<p>Thanks</p>\n<p>John</p>",
        "id": 294146164,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660847577
    },
    {
        "content": "<p>From: Andreas Lochbihler &lt;<a href=\"mailto:andreas.lochbihler@kit.edu\">andreas.lochbihler@kit.edu</a>&gt;<br>\nDear John,</p>\n<p>all of your statements essentially involve only the parameters of <em>one</em> locale, <br>\nso it is hard to say which is the right one. Also, your original question <br>\ninvolved only one locale T, now there seems to be another called S. I am confused.</p>\n<p>Here's an example how I would do it. Maybe this helps.</p>\n<p>locale T = fixes f c assumes \"f c &gt; 0\"</p>\n<p>lemma \"T f1 c1 &amp; T f2 c2 ==&gt; f1 c1 &gt; 0 &amp; f2 c2 &gt; 0 &amp; ...\"</p>\n<p>(* or in Isar syntax *)</p>\n<p>lemma<br>\n   assumes \"T f1 c1\" and \"T f2 c2\"<br>\n   shows \"f1 c1 &gt; 0\" and \"f2 c2 &gt; 0\" and \"...\"</p>\n<p>If you have two different locales S and T, it essentially looks the same:</p>\n<p>locale T = fixes f c assumes ...<br>\nlocale S = fixes a b assumes ...</p>\n<p>lemma \"T f c &amp; S a b ==&gt; P f c a b\"</p>\n<p>where P is the property that you wish to prove about the parameters of both locales.</p>\n<p>If you want to use the convenient locale mechanism, you can also combine locales <br>\nas follows:</p>\n<p>locale T_and_S = T + S begin<br>\nlemma \"P f c a b\"<br>\n&lt;proof&gt;<br>\nend</p>\n<p>Andreas</p>",
        "id": 294146190,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660847586
    },
    {
        "content": "<p>From: John Munroe &lt;<a href=\"mailto:munddr@gmail.com\">munddr@gmail.com</a>&gt;<br>\nThanks. Sorry, I should have made my question clearer (with a better<br>\nexample): Suppose I have two different locales</p>\n<p>locale T = fixes f c assumes \"f c &gt; 0\"<br>\nlocale S = fixes f c assumes \"f c = 0\"</p>\n<p>I want to prove that f c &gt; 0 is indeed provable in T and f c = 0 is<br>\nindeed provable in S in a single lemma. Based on your response, I<br>\nbelieve the appropriate formulation would be:</p>\n<p>lemma \"T f c &amp; S f' c' --&gt; f c &gt; 0 &amp; f' c' = 0\"</p>\n<p>Am I correct?</p>\n<p>But how about</p>\n<p>lemma \"(T f c --&gt; f c &gt; 0) &amp; (S f' c' --&gt; f' c' = 0)\"</p>\n<p>Does it not fulfil my purpose as well?</p>\n<p>Thanks</p>\n<p>John</p>",
        "id": 294146203,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660847592
    },
    {
        "content": "<p>From: Andreas Lochbihler &lt;<a href=\"mailto:andreas.lochbihler@kit.edu\">andreas.lochbihler@kit.edu</a>&gt;<br>\nDear John,</p>\n<p>In that case, this is what you want, but note that this is just the conjunction <br>\nof two separate lemmas. So I still don't see what you need this for. But that's <br>\na different matter.</p>\n<p>The above lemma is in general stronger than</p>\n<blockquote>\n<p>lemma \"T f c &amp; S f' c' --&gt; f c &gt; 0 &amp; f' c' = 0\"</p>\n</blockquote>\n<p>because the latter essentially expresses for each part of the conjunction in the <br>\nconclusion that the assumptions of the other locale are satisfiable.</p>\n<p>Andreas</p>",
        "id": 294146249,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660847604
    }
]