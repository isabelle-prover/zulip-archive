[
    {
        "content": "<p>From: Steve W &lt;<a href=\"mailto:s.wong.731@googlemail.com\">s.wong.731@googlemail.com</a>&gt;<br>\nHi,</p>\n<p>I was wondering why the type of 'func' needs to be be declared in lem1 and<br>\nnot in lem2.</p>\n<p>consts<br>\ns :: real<br>\nf :: real<br>\nF :: \"real =&gt; real\"<br>\nY :: \"real =&gt; real\"<br>\nZ :: \"real =&gt; real\"</p>\n<p>axioms<br>\nax1 : \"F t = Y t + Z t\"<br>\nax2 : \"Y s = -1\"<br>\nax3 : \"Z s = 1\"<br>\nax4 : \"Y f = -1\"<br>\nax5 : \"Z f = -1\"</p>\n<p>lemma lem1: \"EX func t. func t = 0\"<br>\nproof -<br>\n  have \"F s = 0\"<br>\n    using ax1 ax2 ax3<br>\n    by auto<br>\n  show ?thesis<br>\n    by auto<br>\nqed</p>\n<p>That's fine (even without declaring the types of func in the lemma). But<br>\nwith:</p>\n<p>lemma lem2: \"EX func t. func t =/ 0\"<br>\nproof -<br>\n  have \"F f =/ 0\"<br>\n    using ax1 ax4 ax5<br>\n    by auto<br>\n  show ?thesis<br>\n    by auto</p>\n<p>Auto cannot solve ?thesis with \"F f =/ 0\" in lem2 while it can solve the<br>\nthesis in lem1 with \"F s = 0\". It works in lem2 if the lemma was \"EX<br>\n(func::real=&gt;real) t. func t =/ 0\". How come the type of func needs to be<br>\ndeclared in lem2 but not in lem1? Can type be existentially quantified in<br>\nsome way?</p>\n<p>Thanks<br>\nSteve</p>",
        "id": 294105331,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660835025
    },
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\nSteve W wrote:</p>\n<blockquote>\n<p>Hi,</p>\n<p>I was wondering why the type of 'func' needs to be be declared in lem1 and<br>\nnot in lem2.</p>\n<p>consts<br>\ns :: real<br>\nf :: real<br>\nF :: \"real =&gt; real\"<br>\nY :: \"real =&gt; real\"<br>\nZ :: \"real =&gt; real\"</p>\n<p>axioms<br>\nax1 : \"F t = Y t + Z t\"<br>\nax2 : \"Y s = -1\"<br>\nax3 : \"Z s = 1\"<br>\nax4 : \"Y f = -1\"<br>\nax5 : \"Z f = -1\"</p>\n<p>lemma lem1: \"EX func t. func t = 0\"<br>\nproof -<br>\n  have \"F s = 0\"<br>\n    using ax1 ax2 ax3<br>\n    by auto<br>\n  show ?thesis<br>\n    by auto<br>\nqed</p>\n</blockquote>\n<p>The \"F s = 0\" refers to type real and contributes nothing to the proof<br>\nof ?thesis, which talks about a 0 of some arbitrary type (displayed as<br>\n\"0::'b\"). This thesis is simple enough that auto can solve it (probably<br>\nby func = %x. x\" and t = 0) but that is more a coincidence.</p>\n<blockquote>\n<p>Auto cannot solve ?thesis with \"F f =/ 0\" in lem2 while it can solve the<br>\nthesis in lem1 with \"F s = 0\". It works in lem2 if the lemma was \"EX<br>\n(func::real=&gt;real) t. func t =/ 0\". How come the type of func needs to be<br>\ndeclared in lem2 but not in lem1? Can type be existentially quantified in<br>\nsome way?</p>\n</blockquote>\n<p>No.</p>\n<p>Tobias</p>",
        "id": 294105353,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660835031
    },
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;</p>\n<blockquote>\n<p>lemma lem1: \"EX func t. func t = 0\"</p>\n</blockquote>\n<p>This lemma is not true because the the result type of func could be a<br>\none-lement type. The \"refute\" command finds that counterexample.</p>\n<p>Tobias</p>\n<blockquote>\n<p>proof -<br>\n  have \"F s = 0\"<br>\n    using ax1 ax2 ax3<br>\n    by auto<br>\n  show ?thesis<br>\n    by auto<br>\nqed</p>\n<p>That's fine (even without declaring the types of func in the lemma). But<br>\nwith:</p>\n<p>lemma lem2: \"EX func t. func t =/ 0\"<br>\nproof -<br>\n  have \"F f =/ 0\"<br>\n    using ax1 ax4 ax5<br>\n    by auto<br>\n  show ?thesis<br>\n    by auto</p>\n<p>Auto cannot solve ?thesis with \"F f =/ 0\" in lem2 while it can solve the<br>\nthesis in lem1 with \"F s = 0\". It works in lem2 if the lemma was \"EX<br>\n(func::real=&gt;real) t. func t =/ 0\". How come the type of func needs to be<br>\ndeclared in lem2 but not in lem1? Can type be existentially quantified in<br>\nsome way?</p>\n<p>Thanks<br>\nSteve</p>\n</blockquote>",
        "id": 294105395,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660835043
    },
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\nMy apologies - I meant to write the \"not true\" comment under lem2, not lem1.</p>\n<p>Tobias</p>\n<p>Tobias Nipkow wrote:</p>",
        "id": 294105450,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660835049
    }
]