[
    {
        "content": "<p>From: Wenda Li &lt;<a href=\"mailto:wl302@cam.ac.uk\">wl302@cam.ac.uk</a>&gt;<br>\nDear Isabelle expert,</p>\n<p>I was trying to convert coefficients of a polynomial (from <br>\nHOL/Library/Polynomial.thy) into a vector (from <br>\nHOL/Multivariate_Analysis/Finite_Cartesian_Product.thy). However, the <br>\nmost straightforward definition fails:</p>\n<p>definition poly_to_vec :: \"'a::zero poly ⇒ ('a, 'b) vec\" where<br>\n   \"poly_to_vec p= (χ i. coeff p i)\"</p>\n<p>due to \"Type unification failed: No type arity nat :: finite\". <br>\nAlternatively, as we have function \"coeffs :: 'a poly ⇒ 'a list\", which <br>\nconverts coefficients of a polynomial into a list, it would also suffice <br>\nif I can define</p>\n<p>definition list_to_vec :: \"'a list =&gt; ('a, 'b) vec\"</p>\n<p>Any help would be greatly appreciated.</p>\n<p>PS: it seems to me that wrapping indices of a vector as a finite type is <br>\na little bit hard to work with. For example, I didn't find a method to <br>\ncalculate the size of a vector in the library (please correct me if I <br>\nwas wrong), and a method I can find online seems indirect either:</p>\n<p>definition vec_length :: \"('a, 'b::finite) vec =&gt; nat\" where<br>\n   \"vec_length v = card {i. ? c. c = (vec_nth v) i}\"</p>\n<p>Best regards,</p>",
        "id": 294272552,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660917671
    },
    {
        "content": "<p>From: Lawrence Paulson &lt;<a href=\"mailto:lp15@cam.ac.uk\">lp15@cam.ac.uk</a>&gt;<br>\nI don’t think that using vector types for this purpose is a good idea. Their purpose (John Harrison invented this trick of using a finite index type) is to formalise the set R^n for some fixed n. But a function that takes an arbitrary polynomial will have to yield vectors of various types. I suggest using lists and the function coeffs that you mention.</p>\n<p>Larry</p>",
        "id": 294272559,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660917673
    }
]