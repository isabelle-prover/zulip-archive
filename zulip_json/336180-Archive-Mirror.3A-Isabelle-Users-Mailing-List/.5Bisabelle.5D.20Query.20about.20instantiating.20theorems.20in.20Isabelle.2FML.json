[
    {
        "content": "<p>From: Wenda Li &lt;<a href=\"mailto:wl302@cam.ac.uk\">wl302@cam.ac.uk</a>&gt;<br>\nDear Isabelle/ML experts,</p>\n<p>Suppose I have a lemma:</p>\n<p>lemma foo: \"(x::int) = y+z ==&gt; x - y = z\" sorry</p>\n<p>I want to instantiate y to 1. In Isabelle/Isar I can do this easily by <br>\nfoo[of _ 1] or foo[where y=1]. How can I do such things in Isabelle/ML?</p>\n<p>I believe the answer should have something to do with the <br>\nDrule.instantiate' method in drule.ML, but I don't know how to use this <br>\nmethod properly in my case.</p>\n<p>If variables in foo don't have type restrictions, then the following <br>\nwould work:</p>\n<p>lemma foo1: \"x = y+z ==&gt; x - y = z\" sorry<br>\nML{*<br>\nDrule.instantiate' [SOME @{ctyp \"int\"}] [NONE,SOME @{cterm \"(1::int)\"}] <br>\n@{thm foo1};<br>\n*}</p>\n<p>However, with foo,</p>\n<p>ML{*<br>\nDrule.instantiate' [SOME @{ctyp \"int\"}] [NONE,SOME @{cterm \"(1::int)\"}] <br>\n@{thm foo};<br>\n*}</p>\n<p>Isabelle/ML will complain:</p>\n<p>exception TYPE raised (line 810 of \"drule.ML\"):<br>\n   instantiate': more instantiations than variables in thm<br>\n   int<br>\n   1</p>\n<p>Many thanks in advance,<br>\nWenda</p>",
        "id": 294317451,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660925888
    },
    {
        "content": "<p>From: Manuel Eberl &lt;<a href=\"mailto:eberlm@in.tum.de\">eberlm@in.tum.de</a>&gt;<br>\nHallo,</p>\n<p>the first parameter to instantiate is the type variables to be<br>\ninstantiated. Lemma foo1 has the free type variable 'a :: plus. Lemma<br>\nfoo does not have any free type variables. Therefore, there is nothing<br>\nyou could instantiate with ‘int’.</p>\n<p>Just give it the empty list instead of [SOME @{ctyp \"int\"}].</p>\n<p>Cheers,<br>\nManuel</p>",
        "id": 294317480,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660925895
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nML is not Java, so Drule.instantiate' is just a plain function, not a <br>\n\"method\".  (The inventors of OO would complain fiercly about this abuse of <br>\ntheir specific terminology, but this is hardly relevant today.)</p>\n<p>To find out how things in Isabelle/ML are used, there are various standard <br>\napproaches:</p>\n<p>* look at the definitions in ML</p>\n<p>* try to find relevant bits of documentation in the manuals</p>\n<p>* look around how such functions are usually used in existing<br>\n     applications</p>\n<p>Since the situation of instantiation in Isabelle is a bit convoluted, with <br>\nmany historic layers, here are some more direct hints as well:</p>\n<p>* Thm.instantiate is the main operation at the bottom; it is briefly<br>\n     described in the \"implementation\" manual.  It is the most robust<br>\n     operation for high-quality tools, but sometimes awkward to use, due to<br>\n     extra fiddling with type-instantiations.</p>\n<p>* Drule.cterm_instantiate is convenient due to its built-in<br>\n     type-inference.  Its name is maybe a bit misleading -- the point is<br>\n     not to work with certified entities (which is awkward) but to have<br>\n     type instantiation implicit according to usual Hindley-Milner<br>\n     discipline.</p>\n<p>Makarius</p>\n<hr>\n<p><a href=\"http://stop-ttip.org\">http://stop-ttip.org</a></p>\n<hr>",
        "id": 294317508,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660925901
    },
    {
        "content": "<p>From: René Thiemann &lt;<a href=\"mailto:rene.thiemann@uibk.ac.at\">rene.thiemann@uibk.ac.at</a>&gt;<br>\nHi,</p>\n<p>my favorite to simulate the \"of\" of Isar within Isabelle/ML is</p>\n<p>Ctr_Sugar_Util.cterm_instantiate_pos : cterm option list -&gt; thm -&gt; thm</p>\n<p>where you just have to provide the terms, but not the types.</p>\n<p>Cheers,<br>\nRené</p>",
        "id": 294317542,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660925907
    }
]