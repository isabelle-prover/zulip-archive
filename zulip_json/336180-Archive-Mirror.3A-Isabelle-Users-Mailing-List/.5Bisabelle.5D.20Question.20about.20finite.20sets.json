[
    {
        "content": "<p>From: Jesus Aransay &lt;<a href=\"mailto:jesus-maria.aransay@unirioja.es\">jesus-maria.aransay@unirioja.es</a>&gt;<br>\nDear all,</p>\n<p>I was trying to define a (recursive) function over sets. One of the<br>\npremises in my setting is that sets are finite. The function should<br>\nbehave as follows:</p>\n<p>function remove :: \"'b set =&gt; 'b set =&gt; 'b set\"<br>\n  where<br>\n  remove_Nil: \"remove A {} = A\"<br>\n  | remove_Cons: \"remove A (insert x B) = (if _ then remove whatever B<br>\nelse remove whatever' B)\"</p>\n<p>The function is decreasing in the size of the second argument (which<br>\nhas a finite cardinal), but I do not know if there is some chance to<br>\ndefine \"remove\" by means of \"fun\", \"function\" or some other recursive<br>\nmechanism. What kind of induction rule is then obtained for that<br>\nrecursive definition (something similar to finite.induct)?</p>\n<p>Thanks in advance for any help,</p>\n<p>Jesus</p>",
        "id": 294125662,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660841228
    },
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\nYou cannot define such a function with any of the recursive function<br>\ndefinition facilities because it would have to terminate for all sets,<br>\nnot just the finite ones. Which it doesn't. The standard solution is<br>\noutlined in the TPHOLs 2005 paper by Larry and me. You find the<br>\nnecessary combinators (fold and fold_image) in theory Finite_Set.</p>\n<p>Thank you for your non-lexical email.<br>\nTobias</p>\n<p>Jesus Aransay schrieb:</p>",
        "id": 294125673,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660841231
    }
]