[
    {
        "content": "<p>From: Alessandro Coglio &lt;<a href=\"mailto:coglio@kestrel.edu\">coglio@kestrel.edu</a>&gt;<br>\nIn the following artificial example</p>\n<p>datatype T = A | B | C</p>\n<p>fun f :: \"T ⇒ T ⇒ bool\"<br>\nwhere<br>\n  \"f A A ⟷ True\" |<br>\n  \"f B B ⟷ True\" |<br>\n  \"f C C ⟷ True\" |<br>\n  \"f _ _ ⟷ False\"</p>\n<p>‘fun’ gives a warning about duplicate rewrite rules</p>\n<p>Ignoring duplicate rewrite rule:<br>\nf C B ≡ False <br>\nIgnoring duplicate rewrite rule:<br>\nf B C ≡ False <br>\nIgnoring duplicate rewrite rule:<br>\nf C B ≡ False <br>\nIgnoring duplicate rewrite rule:<br>\nf B C ≡ False</p>\n<p>and ‘thm f.simps’ shows 9 distinct rules plus 2 duplicates</p>\n<p>f A A = True<br>\nf B B = True<br>\nf C C = True<br>\nf B A = False<br>\nf B C = False     +<br>\nf C A = False<br>\nf C B = False     ++<br>\nf A B = False<br>\nf C B = False     ++<br>\nf A C = False<br>\nf B C = False     +</p>\n<p>I suppose that the duplicate rules are harmless, but is this the expected/intended behavior?</p>\n<p>Rephrasing as</p>\n<p>fun f :: \"T ⇒ T ⇒ bool\"<br>\nwhere<br>\n  \"f A A ⟷ True\" |<br>\n  \"f A _ ⟷ False\" |<br>\n  \"f B B ⟷ True\" |<br>\n  \"f B _ ⟷ False\" |<br>\n  \"f C C ⟷ True\" |<br>\n  \"f C _ ⟷ False\"</p>\n<p>avoids the issue but is more verbose.</p>\n<p>I’m using Isabelle 2013-2.</p>\n<p>Thank you in advance.<br>\n<a href=\"/user_uploads/14278/su57k5A23kj6bSkjVvbfAyOR/smime.p7s\">smime.p7s</a></p>",
        "id": 294261362,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660914502
    },
    {
        "content": "<p>From: \"Yannick Duchêne (Hibou57 )\" &lt;<a href=\"mailto:yannick_duchene@yahoo.fr\">yannick_duchene@yahoo.fr</a>&gt;<br>\nLe Mon, 30 Dec 2013 00:49:37 +0100, Alessandro Coglio  <br>\n&lt;<a href=\"mailto:coglio@kestrel.edu\">coglio@kestrel.edu</a>&gt; a écrit:</p>\n<blockquote>\n<p>In the following artificial example</p>\n<p>datatype T = A | B | C</p>\n<p>fun f :: \"T ⇒ T ⇒ bool\"<br>\nwhere<br>\n  \"f A A ⟷ True\" |<br>\n  \"f B B ⟷ True\" |<br>\n  \"f C C ⟷ True\" |<br>\n  \"f _ _ ⟷ False\"</p>\n<p>‘fun’ gives a warning about duplicate rewrite rules</p>\n<p>Ignoring duplicate rewrite rule:<br>\nf C B ≡ False<br>\nIgnoring duplicate rewrite rule:<br>\nf B C ≡ False<br>\nIgnoring duplicate rewrite rule:<br>\nf C B ≡ False<br>\nIgnoring duplicate rewrite rule:<br>\nf B C ≡ False</p>\n</blockquote>\n<p>I'm also noticing something else strange aside: with the last two cases,  <br>\nthe output pan says “f” is a free variable while it says it's fixed with  <br>\nthe first two cases.</p>\n<blockquote>\n<p>[…]</p>\n<p>Rephrasing as</p>\n<p>fun f :: \"T ⇒ T ⇒ bool\"<br>\nwhere<br>\n  \"f A A ⟷ True\" |<br>\n  \"f A _ ⟷ False\" |<br>\n  \"f B B ⟷ True\" |<br>\n  \"f B _ ⟷ False\" |<br>\n  \"f C C ⟷ True\" |<br>\n  \"f C _ ⟷ False\"</p>\n<p>avoids the issue but is more verbose.</p>\n</blockquote>\n<p>I don't know how close is the artificial case to the real case, still what  <br>\nabout this one:</p>\n<p>fun f :: \"T ⇒ T ⇒ bool\"<br>\n       where \"f x y ⟷ x = y\"</p>\n<p>Then…</p>\n<p>thm f.simps</p>\n<p>…just says:</p>\n<p>f ?x ?y = (?x = ?y)</p>",
        "id": 294261378,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660914507
    },
    {
        "content": "<p>From: Alessandro Coglio &lt;<a href=\"mailto:coglio@kestrel.edu\">coglio@kestrel.edu</a>&gt;<br>\nThe real case has two different datatypes as arguments to f, additional conditions on constructor arguments, etc. I’ve reduced it to what may be a minimal example. The issue doesn’t arise with just two constructors.<br>\n<a href=\"/user_uploads/14278/RlkFOomJZPxFpdkM40ztfaLA/smime.p7s\">smime.p7s</a></p>",
        "id": 294261403,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660914520
    },
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\nThis is the normal behaviour. Overlapping patterns need to be disambiguated.<br>\nMinimizing the number of unambiguous patterns is complex (in the complexity<br>\ntheoretic sense) and not attempted by \"fun\". See</p>\n<p>Alexander Krauss. Pattern minimization problems over recursive data types. In<br>\nJames Hook and Peter Thiemann, editors, International Conference on Functional<br>\nProgramming (ICFP 2008). ACM, 2008.<br>\n<a href=\"http://www21.in.tum.de/~krauss/\">http://www21.in.tum.de/~krauss/</a></p>\n<p>Tobias</p>",
        "id": 294261422,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660914526
    }
]