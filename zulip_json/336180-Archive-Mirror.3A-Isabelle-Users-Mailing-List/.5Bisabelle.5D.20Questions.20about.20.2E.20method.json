[
    {
        "content": "<p>From: Christian Sternagel &lt;<a href=\"mailto:christian.sternagel@uibk.ac.at\">christian.sternagel@uibk.ac.at</a>&gt;<br>\nJust out of curiosity:</p>\n<p>1) Why does the method assumption restrict the given facts to 0 or 1?</p>\n<p>2) Why does 'by this' seem to do the same thing? Example: Since I am <br>\nusing exclusively Isar for proves, I accustomed myself to state lemmas as</p>\n<p>lemma<br>\n     assumes \"A\" and \"B\" shows \"C\"</p>\n<p>rather than as</p>\n<p>lemma \"A ==&gt; B ==&gt; C\"</p>\n<p>Now, e.g.,</p>\n<p>lemma \"A ==&gt; B ==&gt; A\" .<br>\n   lemma \"A ==&gt; B ==&gt; A\" by assumption</p>\n<p>both works. When 'Isarfying' the lemma a bit more, like</p>\n<p>lemma assumes \"A\" shows \"B ==&gt; A\"<br>\n   using assms .</p>\n<p>lemma ssumes \"A\" shows \"B ==&gt; A\"<br>\n   using assms by assumption</p>\n<p>it is still working. But with</p>\n<p>lemma assumes \"A\" and \"B\" shows \"A\"</p>\n<p>it doesn't work any longer. Wouldn't it be nice, to have a short way of <br>\nproving such simple statements (where one of the current facts solves <br>\nthe goal). E.g.,</p>\n<p>lemma assumes \"A\" and \"B\" shows \"A' using assms .</p>\n<p>And indeed, isn't that, what the documentation claims? In isar-ref.pdf <br>\non page 88, I read \"this applies all of the current facts directly as <br>\nrules.\"</p>\n<p>cheers</p>\n<p>chris</p>",
        "id": 294106177,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660835276
    },
    {
        "content": "<p>From: Brian Huffman &lt;<a href=\"mailto:brianh@cs.pdx.edu\">brianh@cs.pdx.edu</a>&gt;<br>\nI think the documentation means to say that \".\" can use multiple facts<br>\nto prove multiple goals. Here's an example:</p>\n<p>lemma<br>\n  assumes \"A\" and \"B\"<br>\n  shows \"B\" and \"A\"<br>\nproof -<br>\n  from assms show \"A\" and \"B\" .<br>\nqed</p>\n<p>By the way, you can get a fairly short proof using \"rule\", like this:</p>\n<p>lemma assumes \"A\" and \"B\" shows \"A\" by (rule assms)</p>\n<p>Of course, this relies on having a named set of facts. To use the<br>\nchained facts in this way you would need something like</p>\n<p>have \"A\" and \"B\" by ...<br>\n  note foo = this<br>\n  show \"A\" by (rule foo)</p>\n<p>which isn't quite as nice. I agree that a proof method with the<br>\nsemantics you described would be useful. It probably wouldn't take too<br>\nmuch code to implement; why don't you try writing one?</p>\n<ul>\n<li>Brian</li>\n</ul>",
        "id": 294106346,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660835319
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nThe above gives you a goal A and rules <code>A</code> and <code>B</code> which are all applied <br>\nas rules (in the order of the text).  After the first rule application, <br>\nthere are no goals left, so the attempt to apply <code>B</code> fails. Example <br>\nsituations where several rules actually can be applied: multiple goals, or <br>\nsingle goals with facts that have premises.</p>\n<p>The general idea of proper Isar proof methods (as opposed to <br>\nsemi-automated tools like \"simp\", or old tactic emulations like <br>\n\"rule_tac\") is to try to take the given structure of the problem <br>\nseriously.  The aim is to get a text that faithfully represents the <br>\nreasoning, not to accept as much as possible.</p>\n<p>For example</p>\n<p>from <code>A</code> and <code>B</code> have A by this</p>\n<p>reads to me like both A and B somehow contribute to the result, not that <br>\nthe second one is silently ignored.  In practice there are many corner <br>\ncauses of proof methods, and often one could define certain fine points <br>\none way or the other, such as \"this\" vs. \"assumption\".  On the spot, I do <br>\nnot recall all the details that lead up all details in basic Isar methods <br>\n-- it always takes several rounds of in-depth studies of various <br>\nmechanisms to make things fit together in the end.</p>\n<p>Anyway, using \"assumption\" like methods for trivial proofs is slightly <br>\nold-style since the \"fact\" method has come up some years ago.  E.g. this <br>\nworks:</p>\n<p>lemma assumes \"A\" and \"B\" shows \"A' by fact</p>\n<p>Here the implicit scope for trivial facts is the whole of the visible <br>\nproof text.  You can also use (fact my_facts) to limit the scope <br>\nexplicitly.</p>\n<p>Makarius</p>",
        "id": 294106405,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660835337
    }
]