[
    {
        "content": "<p>From: Yevgeniy Makarov &lt;<a href=\"mailto:emakarov@gmail.com\">emakarov@gmail.com</a>&gt;<br>\nHello,</p>\n<p>I am wondering how easy it is to change the representation of numbers<br>\nin Isabelle. If I understand correctly, currently natural numbers are<br>\nrepresented as a datatype that has zero and successor, integers are<br>\nrepresented as equivalence classes of pairs of natural numbers, and<br>\nrationals are equivalence classes of fractions. Moreover, when<br>\nIsabelle specifications are translated into ML, natural numbers are<br>\nagain represented as a datatype, and integers are converted into the<br>\ntype int of ML. As was pointed out in couple of days ago in this list,<br>\nrational numbers in the development snapshot may be represented as<br>\ntriples (sign, enumerator, denominator). There is also a module that<br>\nmaps natural numbers to ML's int. Of course, providing ML types as<br>\ncounterparts for Isabelle ones raises efficiency and clarity of<br>\nprograms; however, one has to trust that facts about types proved in<br>\nIsabelle hold for the implementation.</p>\n<p>Changing number representation is important for code generation. For<br>\nexample, one may want to produce a program that works with natural<br>\nnumbers in binary representation or a representation based on an array<br>\nof digits instead of a datatype.  Of course, it is desirable that the<br>\nnumber of properties proved manually for the new representation is<br>\nminimal.</p>\n<p>Isabelle library contains definitions and properties for semirings,<br>\nrings, and fields, and many lemmas are proved for those abstract<br>\nstructures. However, there are dozens of statements proved<br>\nspecifically for natural numbers as a datatype, such as statements<br>\nabout the successor, order, and truncated subtraction. Some lemmas are<br>\nalso proved specifically for integers, e.g., facts that the order on<br>\nint is not dense and properties of absolute value.</p>\n<p>Isabelle also has internal binary representation of integers given by<br>\nnumerals as well as simplification rules for operations on such<br>\nintegers, but this seems unrelated to number representation in<br>\nIsabelle and extracted programs.</p>\n<p>I'd like to ask the following questions:</p>\n<p>(1) Was there any attempt to characterize different classes of numbers<br>\n(naturals, integers, rationals) purely axiomatically in order to<br>\nminimize the number of facts one has to prove for a new<br>\nrepresentation?</p>\n<p>(2) What is the best way in Isabelle to change the representation of<br>\nnaturals or integers? I am not just talking about types_code<br>\ndirective, which maps an Isabelle type into an unrelated ML type, but<br>\na representation whose properties (like commutativity of addition) can<br>\nbe proved in Isabelle.</p>\n<p>Thank you,<br>\nYevgeniy</p>",
        "id": 294045217,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660817042
    },
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\nIf you want to use a different representation in the logic but retain <br>\nall the theorems that you have for the old representation, you <br>\nessentially have to reprove them. The only way to automate this to a <br>\nlarge degree is by factoring out a common axiomatic basis. Then you can <br>\nuse Isabelle's proof terms to reply the old proof but plugging in the <br>\nnew basis. The AWE project may provide the necessary automation: <br>\n<a href=\"http://www.informatik.uni-bremen.de/~cxl/awe/\">http://www.informatik.uni-bremen.de/~cxl/awe/</a></p>\n<p>If you are \"only\" interested in code generation, you could use <br>\ntypes_code in a disciplined manner: if you want to implement t by t', <br>\nyou describe t' and its operations in HOL and show (roughly speaking) <br>\nthat there is a homomorphism from t' to t. This is not completely <br>\nfoundational because you could make a mistake when writing down the <br>\nnecessary homomorphism conditions.</p>\n<p>Tobias</p>",
        "id": 294045274,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660817049
    },
    {
        "content": "<p>From: Lawrence Paulson &lt;<a href=\"mailto:lp15@cam.ac.uk\">lp15@cam.ac.uk</a>&gt;<br>\nOn 15 Jan 2007, at 12:07, Yevgeniy Makarov wrote:</p>\n<blockquote>\n<p>(1) Was there any attempt to characterize different classes of numbers<br>\n(naturals, integers, rationals) purely axiomatically in order to<br>\nminimize the number of facts one has to prove for a new<br>\nrepresentation?</p>\n</blockquote>\n<p>My paper \"Organizing Numerical Theories Using Axiomatic Type Classes\"  <br>\nmay be relevant: <a href=\"http://www.cl.cam.ac.uk/~lp15/papers/Reports/\">http://www.cl.cam.ac.uk/~lp15/papers/Reports/</a> <br>\nTypeClasses.pdf</p>\n<blockquote>\n<p>(2) What is the best way in Isabelle to change the representation of<br>\nnaturals or integers? I am not just talking about types_code<br>\ndirective, which maps an Isabelle type into an unrelated ML type, but<br>\na representation whose properties (like commutativity of addition) can<br>\nbe proved in Isabelle.</p>\n</blockquote>\n<p>Can't you just prove that the old and new representations are  <br>\nisomorphic? Properties should then be easy to transfer from the old  <br>\nrepresentation to the new one.</p>\n<p>Larry Paulson</p>",
        "id": 294045316,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660817060
    },
    {
        "content": "<p>From: Florian Haftmann &lt;<a href=\"mailto:florian.haftmann@informatik.tu-muenchen.de\">florian.haftmann@informatik.tu-muenchen.de</a>&gt;</p>\n<blockquote>\n<p>(1) Was there any attempt to characterize different classes of numbers<br>\n(naturals, integers, rationals) purely axiomatically in order to<br>\nminimize the number of facts one has to prove for a new<br>\nrepresentation?</p>\n</blockquote>\n<p>Indeed, HOL contains a rich theory of abstract algebra: see theories<br>\nOrderings.thy, Lattices.thy, OrderedGroup.thy and Ring_and_Field.thy.<br>\nHowever, internal representation of numerals is implemented completely<br>\nindependent from that.</p>\n<blockquote>\n<p>(2) What is the best way in Isabelle to change the representation of<br>\nnaturals or integers? I am not just talking about types_code<br>\ndirective, which maps an Isabelle type into an unrelated ML type, but<br>\na representation whose properties (like commutativity of addition) can<br>\nbe proved in Isabelle.</p>\n</blockquote>\n<p>Concerning code generation, the default HOL setup for code generator<br>\nframework leaves nats as datatypes and maps ints to machine ints.<br>\nTechnically, it is hard to change without patching the HOL/Main theories<br>\nthemselves.  In any case, you will have to reprove theorems on<br>\nfundamental operations in order to get it really working.  Though this<br>\ndemands some effort, there are no fundamental issues to prevent somebody<br>\nfrom doing this.  Can you provide me with a little more context, i.e.<br>\nwhich particular representation you want to use for with numeric<br>\ndatatype for what particular reason etc.?</p>\n<p>Cheers,<br>\nFlorian<br>\n<a href=\"/user_uploads/14278/GfZoFvBuaiEfX86jds6_KLS2/florian.haftmann.vcf\">florian.haftmann.vcf</a><br>\n<a href=\"/user_uploads/14278/hz5sKXEgOgN5I9Yic7bC7miT/signature.asc\">signature.asc</a></p>",
        "id": 294045337,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660817067
    }
]