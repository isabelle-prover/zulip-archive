[
    {
        "content": "<p>From: Tambet &lt;<a href=\"mailto:qtvali@gmail.com\">qtvali@gmail.com</a>&gt;<br>\nFirst thing is that on my computer, when Isabelle loads and processes<br>\ntheories from lib, it almost hangs. It would be nice if my only goal was to<br>\nload those theories, but I would also like to read documentation meanwhile<br>\nand do notes. Is this possible to give it some numbers about how much it's<br>\nallowed to use memory, CPU and utilize hard drive speed at any given time?<br>\nIt would be much better if moving mouse and opening PDF document was always<br>\npossible. It's not enough to change priority of emacs, because I would like<br>\nemacs to run full-speed meanwhile. Is there some option to make specific<br>\nprocesses lower-priority as much as needed so that computer works fast and<br>\nthose processes use 100% of idle time, but max 50% of time I am using other<br>\napplications?</p>\n<p>Also, can I precompile those libraries or cache that data, which is<br>\ngenerated and reusable? As much as I can understand it just goes through the<br>\nproving process and does something, what has zero-dependancy of the file I'm<br>\nediting; those libs also won't change often (and probably if they did, the<br>\nproofs of other files would still mostly hold). Does this feature exist?</p>\n<p>One more speed-related question: usually the button to stop the current<br>\nactivity does not work (if I run something, what takes very long, I just<br>\nhave to kill emacs, which is not the best way to use a program and also<br>\nwastes a lot of time). Is there some way to easily stop things, which do not<br>\nwork or were erroneously triggered?</p>\n<p>Btw. I like the Structured Isar Proofs much more than that other one with<br>\n\"apply\" etc., because that actually allows me to consciously prove (at least<br>\nvery simple) things whereas that other looks like randomly trying different<br>\nbuttons in hope that they eventually do something [this was actually why I<br>\nswitched to Isabelle after playing with Coq a few days that I saw that<br>\nmanual and it's just nice]. Structured proofs is clearly at least a good<br>\nstarting point, but this goal-based way is nice in many ways (I wish that<br>\nmost library proofs were built in that way).</p>\n<p>Tambet</p>",
        "id": 294112511,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660837300
    },
    {
        "content": "<p>From: Peter Lammich &lt;<a href=\"mailto:peter.lammich@uni-muenster.de\">peter.lammich@uni-muenster.de</a>&gt;<br>\nHi all.</p>\n<p>I have a related Problem with the new 2009-2 release.<br>\nWhile 1GiB of RAM have always been enough for the 2009-1 release,<br>\nthe new version very quickly allocates more than 1GiB, and starts thrashing.<br>\nSwitching of \"parallel proofs\" makes things a bit better, but still my<br>\ncomputer is nearly unusable<br>\nduring running larger proofs.</p>\n<p>Have you changed any memory-related configurations in the new release, and<br>\nis it possible to set them back again?</p>\n<p>Best Peter</p>\n<p>Tambet wrote:</p>",
        "id": 294112645,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660837334
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nInitial heap size of Poly/ML is configured by ML_OPTIONS=\"-H 200\", which <br>\nis the same default as for Isabelle2009-2.  The options for parallel <br>\nchecking are also the same.</p>\n<p>What did change in Isabelle2009-2 is the overall bloat factor of main <br>\nIsabelle/HOL.  With as little as 1 GB it is unlikely that you will be able <br>\nto process big sessions.</p>\n<p>Makarius</p>",
        "id": 294112654,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660837337
    },
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\nSince you are still learning, you might also be interested in the slides<br>\nof my Isabelle course:<br>\n<a href=\"http://isabelle.in.tum.de/coursematerial/PSV2009-1/index.html\">http://isabelle.in.tum.de/coursematerial/PSV2009-1/index.html</a><br>\nIt starts off with \"apply\" but later it introduces structured proofs<br>\nthrough proof patterns that may help.</p>\n<p>Tobias</p>",
        "id": 294112687,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660837343
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nOn Tue, 20 Jul 2010, Tambet wrote:</p>\n<blockquote>\n<p>First thing is that on my computer, when Isabelle loads and processes <br>\ntheories from lib, it almost hangs.</p>\n</blockquote>\n<p>This indicates a low memory situation, i.e. the OS is swapping most of the <br>\ntime.  Can you give a few hardware figures?  What is you OS platform <br>\nanyway?</p>\n<blockquote>\n<p>It's not enough to change priority of emacs, because I would like emacs <br>\nto run full-speed meanwhile. Is there some option to make specific <br>\nprocesses lower-priority as much as needed so that computer works fast <br>\nand those processes use 100% of idle time, but max 50% of time I am <br>\nusing other applications?</p>\n</blockquote>\n<p>When running Isabelle via Proof General / Emacs, the actual Isabelle <br>\nprocess is already running at a low priority (\"nice\" level &gt; 0).  This <br>\ndoes not help though, if you run out of physical memory (see above) or <br>\nEmacs is too busy processing prover output (e.g. traces of some automated <br>\nproof tools like \"simp\" or \"auto\").</p>\n<blockquote>\n<p>Also, can I precompile those libraries or cache that data, which is <br>\ngenerated and reusable? As much as I can understand it just goes through <br>\nthe proving process and does something, what has zero-dependancy of the <br>\nfile I'm editing; those libs also won't change often (and probably if <br>\nthey did, the proofs of other files would still mostly hold). Does this <br>\nfeature exist?</p>\n</blockquote>\n<p>You can work with persistent sessions, see section 1.2 in the Isabelle <br>\nSystem manual for some basic examples.  Having created such a writable <br>\nlogic image, you can tell Proof General to make use of it.</p>\n<p>This is useful for really big development, but your applications are <br>\nprobably much smaller at the moment.  Which library theories did you try <br>\nto load anyway?</p>\n<blockquote>\n<p>One more speed-related question: usually the button to stop the current <br>\nactivity does not work (if I run something, what takes very long, I just <br>\nhave to kill emacs, which is not the best way to use a program and also <br>\nwastes a lot of time). Is there some way to easily stop things, which do <br>\nnot work or were erroneously triggered?</p>\n</blockquote>\n<p>This indicates that Emacs is busy.  The Unix \"top\" utility will tell you. <br>\nIn some denial-of-service situations on Emacs you can also send kill -INT <br>\nto the poly process.</p>\n<p>Nothing like this should happen in small experiments with Isabelle, <br>\nthough.  Again it might be just a corollary of general memory shortage.</p>\n<blockquote>\n<p>Btw. I like the Structured Isar Proofs much more than that other one <br>\nwith \"apply\" etc., because that actually allows me to consciously prove <br>\n(at least very simple) things whereas that other looks like randomly <br>\ntrying different buttons in hope that they eventually do something [this <br>\nwas actually why I switched to Isabelle after playing with Coq a few <br>\ndays that I saw that manual and it's just nice]. Structured proofs is <br>\nclearly at least a good starting point, but this goal-based way is nice <br>\nin many ways (I wish that most library proofs were built in that way).</p>\n</blockquote>\n<p>Structured proofs also scale up to larger proofs, and are more efficiently <br>\nchecked than old-style proof scripts.  The reason why you don't see Isar <br>\nproofs everywhere is that it is usually harder to produce such nice <br>\nproofs.</p>\n<p>Makarius</p>",
        "id": 294112706,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660837349
    },
    {
        "content": "<p>From: Tambet &lt;<a href=\"mailto:qtvali@gmail.com\">qtvali@gmail.com</a>&gt;<br>\nOn 21 July 2010 12:59, Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt; wrote:</p>\n<blockquote>\n<p>Since you are still learning, you might also be interested in the slides<br>\nof my Isabelle course:<br>\n<a href=\"http://isabelle.in.tum.de/coursematerial/PSV2009-1/index.html\">http://isabelle.in.tum.de/coursematerial/PSV2009-1/index.html</a><br>\nIt starts off with \"apply\" but later it introduces structured proofs<br>\nthrough proof patterns that may help.</p>\n</blockquote>\n<p>Yes I am. I will go into it right now :) It's clearly self-explaining.</p>\n<blockquote>\n<p>Tobias<br>\n</p>\n</blockquote>\n<p>Thanks,<br>\n  Tambet</p>",
        "id": 294113113,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660837460
    },
    {
        "content": "<p>From: Tambet &lt;<a href=\"mailto:qtvali@gmail.com\">qtvali@gmail.com</a>&gt;<br>\nOn 21 July 2010 10:55, Peter Lammich &lt;<a href=\"mailto:peter.lammich@uni-muenster.de\">peter.lammich@uni-muenster.de</a>&gt; wrote:</p>\n<blockquote>\n<p>Hi all.</p>\n<p>I have a related Problem with the new 2009-2 release.<br>\nWhile 1GiB of RAM have always been enough for the 2009-1 release,<br>\nthe new version very quickly allocates more than 1GiB, and starts<br>\nthrashing.<br>\nSwitching of \"parallel proofs\" makes things a bit better, but still my<br>\ncomputer is nearly unusable<br>\nduring running larger proofs.<br>\n</p>\n</blockquote>\n<p>I am happy to report that after installing XFCE and logging in, it became<br>\nextremely fast - things I used to wait 1-20 minutes for happened in moments<br>\nor a few seconds. I can now even <em>scroll</em> PDF manuals when Emacs Proof<br>\nGeneral is running, which completely changes the whole experience ;)</p>\n<p>As KDE normal install (with no programs working) takes 530MB of memory, but<br>\nXFCE takes 370 - based on<br>\n<a href=\"http://www.phoronix.com/scan.php?page=article&amp;item=linux_desktop_vitals&amp;num=1-\">http://www.phoronix.com/scan.php?page=article&amp;item=linux_desktop_vitals&amp;num=1-</a>,<br>\nthey might have such properties:</p>\n<p>- Say that you use 200MB of memory for normal background processes -<br>\n   Firefox and PDF reader.</p>\n<p>- Say that Proof General takes some 200MB (I measured that it reaches<br>\n   that point very fast).</p>\n<p>- Then, XFCE takes 370, which means 770 in total.<br>\n   - KDE takes 530, which makes 930 in total.<br>\n   - <a href=\"http://manual.sidux.com/en/cd-content-en.htm\">http://manual.sidux.com/en/cd-content-en.htm</a> shows that this memory<br>\n   requirement of KDE can get even worse - looking recommended numbers the<br>\n   difference could be as much as four times in worse case.</p>\n<p>For me, the difference was fatal - when nothing did response before (I was<br>\nmaking coffee when waiting switch from Firefox window to Emacs window or<br>\nvice versa after I had ran anything proof-related for once - and this<br>\nspeeddown was somewhat in effect until reboot), in XFCE it's just working.<br>\nIt might also be that XFCE is better at memory management of critical things</p>\n<ul>\n<li>because KDE obviously lets even things needed to move mouse cursor be<br>\nwritten to swap (maybe to have those fancy jumping full-colored cursors).</li>\n</ul>\n<p>So, maybe it works for you, too :)</p>\n<p>[I wouldn't actually believe that the difference is so big, it was just a<br>\nlast resort after replacing several other programs with more lightweight<br>\nversions and turning some less-needed functionality off]</p>\n<p>Have you changed any memory-related configurations in the new release, and</p>\n<blockquote>\n<p>is it possible to set them back again?</p>\n<p>Best Peter</p>\n<p>Tambet wrote:</p>\n<blockquote>\n<p>First thing is that on my computer, when Isabelle loads and processes<br>\ntheories from lib, it almost hangs. It would be nice if my only goal was<br>\nto<br>\nload those theories, but I would also like to read documentation<br>\nmeanwhile<br>\nand do notes. Is this possible to give it some numbers about how much<br>\nit's<br>\nallowed to use memory, CPU and utilize hard drive speed at any given<br>\ntime?<br>\nIt would be much better if moving mouse and opening PDF document was<br>\nalways<br>\npossible. It's not enough to change priority of emacs, because I would<br>\nlike<br>\nemacs to run full-speed meanwhile. Is there some option to make specific<br>\nprocesses lower-priority as much as needed so that computer works fast<br>\nand<br>\nthose processes use 100% of idle time, but max 50% of time I am using<br>\nother<br>\napplications?</p>\n<p>Also, can I precompile those libraries or cache that data, which is<br>\ngenerated and reusable? As much as I can understand it just goes through<br>\nthe<br>\nproving process and does something, what has zero-dependancy of the file<br>\nI'm<br>\nediting; those libs also won't change often (and probably if they did,<br>\nthe<br>\nproofs of other files would still mostly hold). Does this feature exist?</p>\n<p>One more speed-related question: usually the button to stop the current<br>\nactivity does not work (if I run something, what takes very long, I just<br>\nhave to kill emacs, which is not the best way to use a program and also<br>\nwastes a lot of time). Is there some way to easily stop things, which do<br>\nnot<br>\nwork or were erroneously triggered?</p>\n<p>Btw. I like the Structured Isar Proofs much more than that other one with<br>\n\"apply\" etc., because that actually allows me to consciously prove (at<br>\nleast<br>\nvery simple) things whereas that other looks like randomly trying<br>\ndifferent<br>\nbuttons in hope that they eventually do something [this was actually why<br>\nI<br>\nswitched to Isabelle after playing with Coq a few days that I saw that<br>\nmanual and it's just nice]. Structured proofs is clearly at least a good<br>\nstarting point, but this goal-based way is nice in many ways (I wish that<br>\nmost library proofs were built in that way).</p>\n<p>Tambet<br>\n</p>\n</blockquote>\n</blockquote>",
        "id": 294113171,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660837484
    }
]