[
    {
        "content": "<p>From: Matthew Fernandez &lt;<a href=\"mailto:matthew.fernandez@nicta.com.au\">matthew.fernandez@nicta.com.au</a>&gt;<br>\nWhile we're on the topic of quickcheck, why does it fail to show a counterexample for this?</p>\n<p>lemma \"set [(1::nat)] ⊆ set [2]\"<br>\n       quickcheck</p>\n<p>(* Outputs the following, but no actual example:</p>\n<p>*   Quickchecking...<br>\n      *   Testing conjecture with Quickcheck-exhaustive...<br>\n      *   Quickcheck found a counterexample:<br>\n      *)</p>\n<hr>\n<p>The information in this e-mail may be confidential and subject to legal professional privilege and/or copyright. National ICT Australia Limited accepts no liability for any damage caused by this email or its attachments.</p>",
        "id": 294647810,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661164806
    },
    {
        "content": "<p>From: Lars Noschinski &lt;<a href=\"mailto:noschinl@in.tum.de\">noschinl@in.tum.de</a>&gt;<br>\n-- Lars</p>",
        "id": 294647935,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661164874
    },
    {
        "content": "<p>From: Andrew Gacek &lt;<a href=\"mailto:andrew.gacek@gmail.com\">andrew.gacek@gmail.com</a>&gt;<br>\nYou could do this to get a 'counterexample' in this case:</p>\n<p>lemma \"set [(1::nat)] ⊆ set [2]\"<br>\napply rule<br>\nquickcheck</p>\n<p>Then it works on \"!!x. x \\in set [1] ==&gt; x \\in set [2]\" and finds the<br>\ncounterexample \"x = 1\".</p>\n<p>-Andrew</p>",
        "id": 294648508,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661165142
    },
    {
        "content": "<p>From: Jason Dagit &lt;<a href=\"mailto:dagitj@gmail.com\">dagitj@gmail.com</a>&gt;<br>\nOn Wed, Jul 1, 2015 at 11:14 PM, Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt; wrote:</p>\n<blockquote>\n<p>On 02/07/2015 07:48, Jason Dagit wrote:</p>\n<blockquote>\n<p>I forgot to add a type annotation and ended up with the following<br>\n(Isabelle<br>\n2015 on Windows 7):</p>\n<p>lemma \"3 &lt; 4\" quickcheck<br>\n</p>\n</blockquote>\n<p>No type constraints. Because 3, 4 and &lt; are polymorphic, quickcheck is<br>\nfree to build a type/model with an interpretation for &lt; where 3 &lt; 4 does<br>\nnot hold.<br>\n</p>\n</blockquote>\n<p>I see. Thanks!</p>\n<blockquote>\n<p>There used to be a time when the interface alerted you to polymorphic<br>\nnumerals, which are almost always not what one wants. But we have moved on<br>\nfrom that.<br>\n</p>\n</blockquote>\n<p>I think I've been bitten by this several times. Most recently (and where I<br>\ndiscovered the above example), I was proving the follow lemma, using the<br>\ninduction lemma described in [1]:<br>\nlemma \"(n::nat) &gt; 1 ⟹ n⇧2 &gt; n + 1\"</p>\n<p>In the case of n = 2, I had this:<br>\n  case 2<br>\n  show \"2 + 1 &lt; 2⇧2\" by auto</p>\n<p>This was giving me a message saying:<br>\nshow 2 + 1 &lt; 2⇧2<br>\nSuccessful attempt to solve goal by exported rule:<br>\n  (1 &lt; 2) ⟹ 2 + 1 &lt; 2⇧2</p>\n<p>But also saying:<br>\nFailed to finish proof⌂:<br>\ngoal (1 subgoal):</p>\n<ol>\n<li>3 &lt; 2⇧2</li>\n</ol>\n<p>Of course, if I manually simplified the expression in my <code>show</code> to match<br>\nthe goal, then I get an error about refining the goal.</p>\n<p>As you might have already guessed, the solution is rather simple, I have to<br>\nadd a type annotation somewhere in the <code>show</code>. So having an alert about<br>\npolymorphic numerals would have been helpful here for this beginner. Lesson<br>\nlearned.</p>\n<p>[1]<br>\n<a href=\"http://thread.gmane.org/gmane.science.mathematics.logic.isabelle.user/10660\">http://thread.gmane.org/gmane.science.mathematics.logic.isabelle.user/10660</a></p>",
        "id": 294648604,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661165163
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nThere are many more possibilities to get into trouble with types that are <br>\nmore general than expected.  It used to be a really hard problem to figure <br>\nthat out in the past.  Today you just need to C-hover over subspicious <br>\nvariables in the Prover IDE, to get the type information.  You have to <br>\nbecome active yourself, though.</p>\n<p>One day in the future, the Prover IDE might hilight such suspicious <br>\npositions spontaneously. (And users will probably run into other problems <br>\ninstead.)</p>\n<p>Makarius</p>",
        "id": 294648637,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661165180
    },
    {
        "content": "<p>From: Jason Dagit &lt;<a href=\"mailto:dagitj@gmail.com\">dagitj@gmail.com</a>&gt;<br>\nI forgot to add a type annotation and ended up with the following (Isabelle<br>\n2015 on Windows 7):</p>\n<p>lemma \"3 &lt; 4\" quickcheck<br>\nQuickchecking...<br>\nFor instantiation with default_type Enum.finite_1:<br>\nEnum.finite_1 to be substituted for variable 'a does not have sort<br>\n{numeral,ord}<br>\nTesting conjecture with Quickcheck-exhaustive...<br>\nQuickcheck found a counterexample:</p>\n<p>Compared with the type annotation:<br>\nlemma \"(3::nat) &lt; 4\" quickcheck<br>\nQuickchecking...<br>\nTesting conjecture with Quickcheck-exhaustive...<br>\nQuickcheck found no counterexample.</p>\n<p>Note: in the first case it says there is a counter example but that is the<br>\nend of the output in the \"Output\" tab of jEdit.</p>\n<p>Is this to be expected when no types are given? As a new Isabelle user it<br>\nquite surprised me.</p>\n<p>Thanks,<br>\nJason</p>",
        "id": 294649262,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661165414
    },
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\nOn 02/07/2015 07:48, Jason Dagit wrote:</p>\n<blockquote>\n<p>I forgot to add a type annotation and ended up with the following (Isabelle<br>\n2015 on Windows 7):</p>\n<p>lemma \"3 &lt; 4\" quickcheck</p>\n</blockquote>\n<p>No type constraints. Because 3, 4 and &lt; are polymorphic, quickcheck is free to <br>\nbuild a type/model with an interpretation for &lt; where 3 &lt; 4 does not hold.</p>\n<p>There used to be a time when the interface alerted you to polymorphic numerals, <br>\nwhich are almost always not what one wants. But we have moved on from that.</p>\n<p>The fact that you are not shown the model is because only the interpretation of <br>\nthe free variables is shown, but there are none.</p>\n<p>Tobias</p>\n<blockquote>\n<p>Quickchecking...<br>\nFor instantiation with default_type Enum.finite_1:<br>\nEnum.finite_1 to be substituted for variable 'a does not have sort<br>\n{numeral,ord}<br>\nTesting conjecture with Quickcheck-exhaustive...<br>\nQuickcheck found a counterexample:</p>\n<p>Compared with the type annotation:<br>\nlemma \"(3::nat) &lt; 4\" quickcheck<br>\nQuickchecking...<br>\nTesting conjecture with Quickcheck-exhaustive...<br>\nQuickcheck found no counterexample.</p>\n<p>Note: in the first case it says there is a counter example but that is the<br>\nend of the output in the \"Output\" tab of jEdit.</p>\n<p>Is this to be expected when no types are given? As a new Isabelle user it<br>\nquite surprised me.</p>\n<p>Thanks,<br>\nJason</p>\n<p><a href=\"/user_uploads/14278/02PAb44Hl2EFfFni1bWpAgCF/smime.p7s\">smime.p7s</a></p>\n</blockquote>",
        "id": 294649398,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661165481
    },
    {
        "content": "<p>From: Manuel Eberl &lt;<a href=\"mailto:eberlm@in.tum.de\">eberlm@in.tum.de</a>&gt;<br>\nShould it not at least show the interpretation of the free type variable?</p>\n<p>Manuel</p>",
        "id": 294649578,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661165548
    },
    {
        "content": "<p>From: Andreas Lochbihler &lt;<a href=\"mailto:andreas.lochbihler@inf.ethz.ch\">andreas.lochbihler@inf.ethz.ch</a>&gt;<br>\nShowing the instantiations for the type variables would be sensible. However, if one knows <br>\nhow quickcheck works, the search scope is pretty small. With the default setup in <br>\nIsabelle2015, quickcheck with exhaustive search tries only the types Enum.finite_1, <br>\nEnum.finite_2, and Enum.finite_3.</p>\n<p>In this case, its the type finite_2 which produces a counterexample. Interestingly, <br>\nquickcheck does not find a counterexample for \"4 &lt; 5\" (because only Enum.finite_2 <br>\ninstantiates the numeral type class and there it holds).</p>\n<p>Andreas</p>",
        "id": 294649728,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661165616
    }
]