[
    {
        "content": "<p>From: Thomas Genet &lt;<a href=\"mailto:Thomas.Genet@irisa.fr\">Thomas.Genet@irisa.fr</a>&gt;<br>\nTrue, it fixes the problem. Thanks a lot.</p>\n<p>Thomas</p>",
        "id": 294118437,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660839012
    },
    {
        "content": "<p>From: Thomas Genet &lt;<a href=\"mailto:Thomas.Genet@irisa.fr\">Thomas.Genet@irisa.fr</a>&gt;<br>\nDear all Isabelle users,</p>\n<p>I am playing a bit with Isabelle (MacOSX version, Isabelle2009-2.dmg) <br>\nand had the following problem: quickcheck always answers</p>\n<p>*** Term to be tested contains type variables<br>\n*** At command \"quickcheck\".</p>\n<p>whatever the theorem to be proved. I even tried with the example of the <br>\nquickcheck paper:</p>\n<hr>\n<p>theory ToyList3<br>\nimports Datatype<br>\nbegin<br>\ndatatype 'a list= Nil (\"[]\")<br>\n| Cons 'a \"'a list\" (infix \"#\" 65)</p>\n<p>primrec take::\"nat =&gt; 'a list =&gt; 'a list\"<br>\nwhere<br>\n\"take n [] = []\" |<br>\n\"take n (x # xs) =<br>\n   (case n of<br>\n   0 =&gt; [] |<br>\n   Suc m =&gt; x # take m xs)\"</p>\n<p>primrec drop::\"nat =&gt; 'a list =&gt; 'a list\"<br>\nwhere<br>\n\"drop n [] = []\"|<br>\n\"drop n (x # xs) =<br>\n   (case n of<br>\n   0 =&gt; x # xs |<br>\n   Suc m =&gt; drop m xs)\"</p>\n<p>theorem \"take j (drop i xs) = drop i (take j xs)\"<br>\nquickcheck</p>\n<hr>\n<p>Note that nitpick succeeds to find a counterexample.</p>\n<p>What did I do wrong?</p>\n<p>Thanks in advance,</p>\n<p>Thomas</p>",
        "id": 294119835,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660839472
    },
    {
        "content": "<p>From: Florian Haftmann &lt;<a href=\"mailto:florian.haftmann@informatik.tu-muenchen.de\">florian.haftmann@informatik.tu-muenchen.de</a>&gt;<br>\nHi Thomas,</p>\n<p>The issue is actually located here: in user space, you are always<br>\nexpected to include the Main theory among you imports (directly or<br>\ntransitively).  The toy list examples in the tutorial are just there to<br>\ndemonstrate for beginners how lists are done in the system, therefore<br>\nthey start at a theory which does not contain lists already.</p>\n<p>Beneath theory Main there is an intricate bootstrap of various<br>\ncomponents which are then plugged together to get the basic tool setup<br>\nthat the user expects:  also quickcheck is not monolithic but can be<br>\nthought of as a \"microkernel service\".  The good thing is that as a user<br>\nyou need not spend much thought on it: start with Main and leave the<br>\nissues beneath to developers.  An analogy: starting beneath Main is like<br>\nusing a Unix without init or Upstart.</p>\n<p>Hope this helps,<br>\n    Florian<br>\n<a href=\"/user_uploads/14278/nt1ySnLU8xgxsl0_5rUFZ3JJ/signature.asc\">signature.asc</a></p>",
        "id": 294120020,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660839515
    }
]