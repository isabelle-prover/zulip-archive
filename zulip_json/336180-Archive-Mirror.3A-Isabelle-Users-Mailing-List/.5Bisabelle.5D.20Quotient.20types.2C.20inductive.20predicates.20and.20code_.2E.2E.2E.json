[
    {
        "content": "<p>From: Mark Wassell &lt;<a href=\"mailto:mpwassell@gmail.com\">mpwassell@gmail.com</a>&gt;<br>\nHello,</p>\n<p>I am trying to generate code from an inductive predicate that involves a<br>\nquotient type. The problem is that code_pred doesn't work for the mode that<br>\nI want the code for my predicate to be for. I think it is because mode<br>\nchecking is not seeing the constructors for the quotient type as being real<br>\nconstructors that pattern matching works on.</p>\n<p>Code is below and also in the attached.</p>\n<p>Mark</p>\n<p>datatype foo =  FInt int | FUnit</p>\n<p>axiomatization rel :: \"foo ⇒ foo ⇒  bool\" where equivp_rel: \"equivp rel\"<br>\nquotient_type bar = \"foo\" / rel using equivp_rel by simp</p>\n<p>quotient_definition  \"BUnit :: bar\" is FUnit done<br>\nquotient_definition  \"BInt  :: int ⇒ bar\" is FInt done</p>\n<p>inductive foop :: \"foo ⇒ int ⇒ bool\" where<br>\n  unitI: \"foop FUnit 0\"<br>\n| intI: \"foop (FInt n) n\"</p>\n<p>(* This works  *)<br>\ncode_pred (modes: i ⇒ o ⇒ bool)   [show_steps,  show_mode_inference,<br>\n show_invalid_clauses] foop .</p>\n<p>inductive barp :: \"bar ⇒ int ⇒ bool\" where<br>\n unitI: \"barp BUnit 0\"<br>\n| intI : \"barp (BInt n) n\"</p>\n<p>(* This fails but works without the intI case. Is this because BInt isn't<br>\nreally a constructor<br>\nthat pattern matching works on? *)<br>\ncode_pred  (modes: i ⇒ o ⇒ bool)   [show_steps,  show_mode_inference,<br>\n show_invalid_clauses] barp .<br>\n<a href=\"/user_uploads/14278/3EiPnh6EItttXC88OOgzRdN6/CodeGenQuestion.thy\">CodeGenQuestion.thy</a></p>",
        "id": 294761929,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661200027
    },
    {
        "content": "<p>From: Lukas Bulwahn &lt;<a href=\"mailto:lukas.bulwahn@gmail.com\">lukas.bulwahn@gmail.com</a>&gt;<br>\nIf I recall correctly without looking again at the code base,<br>\ncode_pred relies on the datatype package to tell if it is a<br>\nconstructor and hence obtains the case constant for splitting.<br>\nYou can probably register some new constant as constructor in the<br>\ndatatype package and you would also need to provide a case constant<br>\nfor splitting, and hopefully then code_pred knows everything to infer<br>\nthe mode you want and generate the code equations.</p>\n<p>Experts on the datatype package can possibly tell you how to register<br>\nyour quotient type as datatype in more detail; I have not seen that<br>\npart in recent years.</p>\n<p>If that does not work together as expected, let me know and I will<br>\nlook at the details of the code_pred command.</p>\n<p>Lukas</p>",
        "id": 294761935,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661200032
    },
    {
        "content": "<p>From: Mark Wassell &lt;<a href=\"mailto:mpwassell@gmail.com\">mpwassell@gmail.com</a>&gt;<br>\nLukas,</p>\n<p>Thank you for your reply.</p>\n<p>The free_constructor command looks to be what I need however it presupposes<br>\nthat the constructors are injective. As it stands they are not and so I<br>\nwill need to rethink my definitions.</p>\n<p>Cheers</p>\n<p>Mark</p>",
        "id": 294762121,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661200121
    },
    {
        "content": "<p>From: Lukas Bulwahn &lt;<a href=\"mailto:lukas.bulwahn@gmail.com\">lukas.bulwahn@gmail.com</a>&gt;<br>\nFor the mode analysis and code_pred, you actually do not need<br>\ninjectivity of \"functions\" (I would not call them constructors anymore<br>\nif no injectivity holds; but I am not an expert of what makes a type a<br>\n\"datatype\") to employ them in the mode analysis, but the inverse image<br>\nshould be computable, i.e., there is an executable definition for that<br>\ninverse image.</p>\n<p>You would be moving towards the boundaries of code_pred, and there are<br>\nprobably no user commands, but you can find some examples here:</p>\n<p><a href=\"http://isabelle.in.tum.de/repos/isabelle/file/b85a12c2e2bf/src/HOL/Library/Predicate_Compile_Alternative_Defs.thy\">http://isabelle.in.tum.de/repos/isabelle/file/b85a12c2e2bf/src/HOL/Library/Predicate_Compile_Alternative_Defs.thy</a><br>\nstarting at line 64 section \\&lt;open&gt;Arithmetic operations\\&lt;close&gt;</p>\n<p>The examples make the functions plus and minus invertable on nat and<br>\nint and then set up the mode analysis and compiler.</p>\n<p>Maybe this helps,</p>\n<p>Lukas</p>",
        "id": 294762138,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661200131
    }
]