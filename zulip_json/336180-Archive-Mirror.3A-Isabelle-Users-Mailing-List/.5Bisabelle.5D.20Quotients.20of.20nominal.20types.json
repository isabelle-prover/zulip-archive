[
    {
        "content": "<p>From: Aleks Kissinger &lt;<a href=\"mailto:aleks0@gmail.com\">aleks0@gmail.com</a>&gt;<br>\nHi all,</p>\n<p>This is mainly a question for the nominal folks, but I figured other<br>\npeople might have some good suggestions as well. I'm looking to<br>\nformalise a nominal algebraic theory in Isabelle, which consists<br>\n(essentially) of a binder and an associative/commutative<br>\nmultiplication operation. The types of theorems I want to prove<br>\ninitially are things of the form \"s = t\", where s and t are elements<br>\nof such a nominal algebra A, presented by generators and relations.</p>\n<p>So, there seem to be a handful of choices available for doing this, so<br>\nI'm trying to get an idea of what approach will yield the nicest<br>\nproofs, with the least overhead/faff. The two ideas I had in mind<br>\nwere:</p>\n<ol>\n<li>\n<p>Forming a nominal_datatype and taking a quotient. This seems like<br>\nthe obvious choice, but I have a few questions about it. Firstly, in<br>\nNominal2, a nominal_datatype is already a quotient. Is this<br>\nquotient-of-a-quotient setup going to be a pain? If not, what things<br>\nneed to be lifted to the quotient type in order to keep working modulo<br>\nalpha-equivalence as automatic as possible?</p>\n</li>\n<li>\n<p>Forming the nominal_datatype, then defining a new equivalence<br>\nrelation ~~ with the axioms of the algebra, along with any relations<br>\nbetween generators. Prove theorems of the form \"s ~~ t\". Essentially,<br>\nthe the first half of the construction in #1, but don't bother with a<br>\nquotient type. This seems to come with its own set of problems. For<br>\ninstance, things like \"s ~~ t ==&gt; P s ==&gt; P t\" would need to be<br>\nassumed for particular P, rather than being an axiom of HOL (as is the<br>\ncase with \"=\").</p>\n</li>\n<li>\n<p>Treating A as a \"theory\" rather than a presentation of a particular<br>\nalgebra. That is, form a locale where the term formers are assumed as<br>\nfunctions, then assume relevant equalities, including equivariance<br>\nproperties for the term formers. I think the latter should be tagged<br>\n[eqvt] so the nominal code knows it can apply them to try and<br>\nalpha-unify terms in various places. The main downside here is you<br>\ndon't get all the nice scaffolding that is laid down by<br>\nnominal_datatype, but by having the correct assumptions/theorems in<br>\ncontext, a term built from these assumed functions could, at least in<br>\ntheory, be handled in much the same way (though clearly things like<br>\ninjectivity of constructors gets lost, once non-trivial equations are<br>\nassumed).</p>\n</li>\n</ol>\n<p>I'm pretty new to Isabelle, and especially Nominal/Nominal2. Any input<br>\nand pointers to relevant docs or examples would be much appreciated.</p>\n<p>Many thanks,</p>\n<p>Aleks</p>",
        "id": 294246170,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660908992
    },
    {
        "content": "<p>From: Christian Urban &lt;<a href=\"mailto:christian.urban@kcl.ac.uk\">christian.urban@kcl.ac.uk</a>&gt;<br>\nHi Alex,</p>",
        "id": 294246324,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660909055
    },
    {
        "content": "<p>From: Dmitriy Traytel &lt;<a href=\"mailto:traytel@in.tum.de\">traytel@in.tum.de</a>&gt;<br>\nI think the transferred attribute is supposed to do just that.</p>\n<p>Dmitriy</p>",
        "id": 294246335,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660909060
    },
    {
        "content": "<p>From: Dmitriy Traytel &lt;<a href=\"mailto:traytel@in.tum.de\">traytel@in.tum.de</a>&gt;<br>\nOh, I see now that my reply applies to the development version only <br>\n(e.g. Isabelle/0cd62cb233e0). In Isabelle2013 this attribute is <br>\nimplemented by legacy_transfer (i.e. not working with Lifting/Transfer).</p>\n<p>Dmitriy</p>",
        "id": 294246348,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660909066
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nReading this 2 or 3 times, I still don't understand what is meant -- too <br>\nmany negations.</p>\n<p>Isabelle has many different languages of different kind and purpose: <br>\nIsabelle/ML, Isabelle/Isar, Isabelle/Scala, Isabelle/Pure, Isabelle/HOL, <br>\nIsabelle/latex document source etc.</p>\n<p>It does not make any sense to speak about \"levels\" here, and Isabelle/ML <br>\nvs. Isabelle/Isar are particularly difficult to arrange in 2-dimensional <br>\ntopology.  In reality it probably looks more like a Klein bottle.</p>\n<p>To understand how Isabelle works, one needs to get basic terminology <br>\nright, and maybe spend some efforts to stop using wrong expressions.</p>\n<p>Makarius</p>",
        "id": 294246379,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660909078
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nUsing Isabelle/ML is definitely not trivial, but it is much easier than it <br>\nused to be several years ago, and the official documentation is <br>\ncontinously getting more and more complete, although rather thick now. <br>\nIt is also much better than Coq, for example, where the reader of the <br>\nsources also needs to know some French, not just OCaml.</p>\n<p>Getting basic terminology right is only the starting point, it is <br>\nnecessary but not sufficient for what follows for those Isabelle users who <br>\nwant to embark on building their own tools for the platform.</p>\n<p>Makarius</p>",
        "id": 294246467,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660909096
    },
    {
        "content": "<p>From: Aleks Kissinger &lt;<a href=\"mailto:aleks0@gmail.com\">aleks0@gmail.com</a>&gt;<br>\nThanks for your feedback. A the moment, it looks like the best<br>\nsolution is to keep the explicit congruence around. Simple proofs seem<br>\nto take approximately this shape:</p>\n<p>theorem A ~~ B<br>\nproof -<br>\nhave A <del> A' by (* alpha-equivalence + </del> reflexive *)<br>\nalso have ... ~~ B' using (* some algebraic rule *) by blast<br>\nalso have ... <del> B by (* alpha-equivalence + </del> reflexive *)<br>\nfinally show ?thesis .<br>\nqed</p>\n<p>Perhaps this can be improved, but this seems to work okay for my<br>\npurposes. The thing I have in mind is to write various tactics which<br>\nproduce many such proof steps using some meta-reasoning (in this case,<br>\na diagram representation and some rewriting techniques for the<br>\nexpressions A and B).</p>",
        "id": 294246597,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660909158
    }
]