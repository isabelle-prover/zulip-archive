[
    {
        "content": "<p>From: Peter Lammich &lt;<a href=\"mailto:lammich@in.tum.de\">lammich@in.tum.de</a>&gt;<br>\nIn RC-3, I discovered the undesirable behaviour that errors are put<br>\nafter the goal state in the output window. </p>\n<p>Example:</p>\n<p>lemma \"g1\" \"g2\" \"g3\"<br>\nproof -<br>\n  have \"False\" by (simp add: list.simps)</p>\n<p>--&gt; The error output appears after a list of the goals \"g1\" \"g2\" and<br>\n\"g3\" and after a long list of simplifier warnings.  </p>\n<p>Thus, you have to scroll down to see the error output --- every time you<br>\nmove the cursor in the main window from a different line to the<br>\nerroneous line. This is tedious when developing a proof, as you will go<br>\nup, change something, and then come back to the failing command multiple<br>\ntimes.</p>\n<p>Moreover, the error is not visible as prominently as it used to be: </p>\n<p>When writing \"have foo by method\", expecting that it works, you look at<br>\nthe output window ... and it looks the same, whether your method worked<br>\nor not. Formerly, you used to see a fat red error message there, right<br>\nat the top of the output window, which is now hidden.</p>\n<p>If using separate outputs for error, warning, tracing, and goal is not<br>\npossible, and one must have a fixed order, I would vote for the<br>\nfollowing order:<br>\n  Errors first, then the goal, then warnings, then tracing.</p>\n<p>Of course, it would be even better to make the message types and the<br>\norder in which they appear in the output configurable!</p>",
        "id": 294288228,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660922557
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nOn Mon, 11 Aug 2014, Peter Lammich wrote:</p>\n<blockquote>\n<p>In RC-3, I discovered the undesirable behaviour that errors are put<br>\nafter the goal state in the output window.</p>\n<p>Example:</p>\n<p>lemma \"g1\" \"g2\" \"g3\"<br>\nproof -<br>\n have \"False\" by (simp add: list.simps)</p>\n<p>--&gt; The error output appears after a list of the goals \"g1\" \"g2\" and<br>\n\"g3\" and after a long list of simplifier warnings.</p>\n<p>Thus, you have to scroll down to see the error output --- every time you <br>\nmove the cursor in the main window from a different line to the <br>\nerroneous line. This is tedious when developing a proof, as you will go <br>\nup, change something, and then come back to the failing command multiple <br>\ntimes.</p>\n</blockquote>\n<p>You don't have to scroll around, but can look directly in the main source <br>\nwindow -- either at the colors or the popups produced by hovering.</p>\n<p>In PIDE the annotated source is the primary means of exposing prover <br>\ninformation.  In the above example it works particularly well, because the <br>\nfailure of the proof method invocation gets a precise error position for <br>\nthe method text, not just the main command keyword as a fall-back.</p>\n<p>If you have problems to distinguish the color overlays, you can choose <br>\ndifferent colors in the Rendering section of Isabelle/jEdit plugin <br>\noptions.  Note that there is also an alpha channel for transparency.</p>\n<p>In contrast, the Output dockable is not really part of the PIDE concepts. <br>\nIt is still around as a fall-back to display proof states, and anything <br>\nelse concatenated in some canonical order given implicitly by the prover. <br>\nThus Output is merely an intermediate approximation of the real thing, <br>\nwhich would probably be the speculative \"Preview\" panel to show the <br>\ndocument sources with intermediate proof states, according to what is <br>\npresently relevant in the structured proof editing.</p>\n<p>I am using myself Output relatively rarely.  In the Isabelle tutorial this <br>\nSpring there was a funny incident: after approx. 2h explaining Isabelle <br>\nproof document editing, with various examples of definitions and proofs, <br>\nTimothy Bourke pointed out that I should also show the Output panel for <br>\nmessage display.  I had just forgotten that, because it was not necessary <br>\nup to that point. But he was right that beginners often manage more <br>\nquickly to operate the Output panel than the delicate choreography with <br>\nthe mouse that is required for hovering.  The latter is more flexible <br>\nafter some practice, though.</p>\n<blockquote>\n<p>If using separate outputs for error, warning, tracing, and goal is not <br>\npossible, and one must have a fixed order, I would vote for the <br>\nfollowing order: Errors first, then the goal, then warnings, then <br>\ntracing.</p>\n</blockquote>\n<p>That reminds me a bit of old mistakes from Proof General, with certain <br>\npolicies imposed by the front-end and corresponding workarounds on the <br>\nback-end.  That is not fully overcome yet.</p>\n<p>Makarius</p>",
        "id": 294288661,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660922704
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nTelling so many anecdotes, I have forgotten to point out an important <br>\naspect in this example: the 'by' proof is forked by default, so the proof <br>\nstate you see after it is the correct one after it, while the warnings / <br>\nerrors belong to the independent sub-proof.  The printed order is correct <br>\naccording to the structure of the proof, independently of accidental <br>\noperational details in the prover.</p>\n<p>Replacing 'by' by 'apply' or setting the option parallel_proofs to 0 does <br>\nnot show a new proof state, only the cumulative messages.  The verbosity <br>\nof simp-add warnings remains, but is another problem. In Isabelle2014-RC3 <br>\nwarnings are generally more to the point, but not yet this case.</p>\n<p>Makarius</p>",
        "id": 294288753,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660922735
    },
    {
        "content": "<p>From: Peter Lammich &lt;<a href=\"mailto:lammich@in.tum.de\">lammich@in.tum.de</a>&gt;<br>\nIn think it is personal preference of how much you want to use the<br>\nmouse, and no IDE should enforce too much mouse usage.</p>\n<p>For example, when I develop a proof, I often start throwing \"apply\"s at<br>\nthe goal, and then want to immediately see the new subgoals, definitely<br>\nwithout removing my hand from the keyboard to grab the mouse. </p>\n<p>In many cases, this \"experimenting phase\" leads to proving the goal, and<br>\nI then try to clean up my apply-script: Ideally, it becomes a single<br>\n\"by ...\".</p>\n<p>Otherwise, I get stuck at some subgoals. Then I invoke sledgehammer<br>\nand/or try to identify auxiliary lemmas, that I then state and prove<br>\nseparately using Isar.</p>\n<p>For this mode of proof development, which is definitely not the only way<br>\nto develop a proof, but for my type of developments a very effective<br>\none, it is essential to always see the current subgoals, also while<br>\ntyping the next apply-command, without having to do some mousing or<br>\nother interaction. As there is no dedicated subgoals-panel in PIDE (as<br>\nthere was in PG), I have to resort to the output panel.</p>\n<p>As pointed out in previous mails, this is not an ideal replacement for a<br>\nsubgoals-panel, but I currently try to live with its features:<br>\nCurrently, the most annoying one is that the current subgoal vanishes in<br>\nfavour of a \"syntax error\"-message while you are typing the next<br>\napply-command.</p>",
        "id": 294288773,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660922748
    },
    {
        "content": "<p>From: bnord &lt;<a href=\"mailto:bnord01@gmail.com\">bnord01@gmail.com</a>&gt;<br>\nSecond that!</p>\n<p>Best<br>\n     Benedikt</p>",
        "id": 294288861,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660922766
    },
    {
        "content": "<p>From: bnord &lt;<a href=\"mailto:bnord01@gmail.com\">bnord01@gmail.com</a>&gt;<br>\nHere's some experience from a course we gave last year:</p>\n<p>We had some students that were output panel agnostic. They developed no <br>\nunderstanding at all about the proof state and why things didn't work as <br>\nexpected. E.g. you can't simply assume ~A and show False. They had <br>\nproblems with including assumptions in inductions, as for them they were <br>\nobviously part of the proof as the document explicitly stated them. The <br>\ndifference in this apparent redundancy is hard to grasp from the <br>\ndocument without consulting the output. Also the ability to just <br>\ncontinue editing and getting things evaluated after many errors together <br>\nwith the agnostic for the proof state lead to \"nearly done proofs\" that <br>\nwere merely accumulations of loosely connected statements.</p>\n<p>I don't know if these problems were always there and students ignored <br>\nthe output in PG as well but I think the PIDE fosters this behaviour.</p>\n<p>Best<br>\n     Benedikt</p>",
        "id": 294288875,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660922772
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nWhen writing Isar proofs, there is indeed a mismatch of the proof state <br>\nvs. the proof text, stemming from the step-by-step interpretation of the <br>\nlanguage.  People who have never been instructed by one of the initial <br>\npioneers of Isar in Munich 1998-2000 have explained to me accurately that <br>\nconfusion, e.g. someone at VSL 2014 in July.  This is a weakness of Isar <br>\nimplemented with the side-conditions of TTY interaction -- I was aware of <br>\nthat situation already 15 years ago.</p>\n<p>Over the years I have tried to improve this bit by bit.  E.g. the 'by' <br>\ncommand now produces proper error output on its own.  The funny effect was <br>\nthat long-term users who have been instructed in the workarounds from <br>\n1999-2000 don't want to change at all.</p>\n<p>I have mentioned a speculative \"Preview\" panel before on this thread.  If <br>\nit ever arrives, it will be just an adequate dynamic view on the emerging <br>\nproof document, based on the original source text with just the right <br>\n\"state\" information that is required to continue, following the structure <br>\nof the proof and its naturally unfinished state.</p>\n<p>Makarius</p>",
        "id": 294288986,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660922809
    }
]