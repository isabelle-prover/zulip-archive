[
    {
        "content": "<p>From: Peter Lammich &lt;<a href=\"mailto:lammich@in.tum.de\">lammich@in.tum.de</a>&gt;<br>\nHi,</p>\n<p>a running sledgehammer instance does no longer block the output window<br>\n(including goal state) [as it did in Isabelle2015], however, it still<br>\nblocks the query-panels.</p>\n<p>The find theorems-panel will not come back with output until<br>\nsledgehammer has finished. The same for the find constants and print<br>\ncontext panels.</p>\n<p>In my opinion, (usually long-running) background sledgehammer tasks<br>\nshould have less priority than (usually short running) query-tasks, in<br>\nparticular, as the normal usage pattern is most likely to start<br>\nsledgehammer in the background, and, in parallel, exploring ways to<br>\nsolve the goal manually, e.g., using find-theorems to search for<br>\nsuitable theorems.</p>",
        "id": 294667629,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661172316
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nThere should be no difference in this respect.  All short-running <br>\nquery-like operations are treated uniformly, see also this change from 7 <br>\nmonths ago:</p>\n<p>changeset:   60610:f52b4b0c10c4<br>\nuser:        wenzelm<br>\ndate:        Mon Jun 29 20:55:46 2015 +0200<br>\ndescription:<br>\nimproved scheduling for urgent tasks, using farm of replacement threads <br>\n(may lead to factor 2 overloading, but CPUs are usually hyperthreaded);</p>\n<p>There is also this NEWS entry from that time:</p>\n<ul>\n<li>Improved scheduling for urgent print tasks (e.g. command state output, <br>\ninteractive queries) wrt. long-running background tasks.</li>\n</ul>\n<p>Here is a proof that long-running tasks may even block the update of the <br>\nState panel (which is just another query in the background):</p>\n<p>(<em>block worker threads with very long-running tasks</em>)<br>\nML_val \"(1 upto 20) |&gt; <a href=\"http://Par_List.map\">Par_List.map</a> (fn _ =&gt; OS.Process.sleep (seconds 1000.0))\"</p>\n<p>After this command is forked, just move around already processed theories <br>\nand try to get a State panel update -- nothing happens.</p>\n<p>I have now amended this in <br>\n<a href=\"https://bitbucket.org/isabelle_project/isabelle-release/commits/81cbea2babd9\">https://bitbucket.org/isabelle_project/isabelle-release/commits/81cbea2babd9</a><br>\nby changing the NEWS:</p>\n<ul>\n<li>Slightly improved scheduling for urgent print tasks (e.g. command<br>\nstate output, interactive queries) wrt. long-running background tasks.</li>\n</ul>\n<p>The change log entry explains the more fundamental problem behind it. This <br>\nmeans the attempt to improve the situation last summer did not work out: <br>\nmore substantial changes in PIDE document execution are required.</p>\n<p>With proper testing and tangible feedback on time, it could have been part <br>\nof Isabelle2016.  Now it is (again) postponed to a later release.</p>\n<p>Makarius</p>",
        "id": 294667820,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661172383
    }
]