[
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nThat is one of these hard crashes of the Poly/ML runtime system that <br>\nbecome the more likely the more it approaches certain resource limits. <br>\nIn the screenshot the sledgehammer invocation has quite a lot of provers. <br>\nWhat is your Multithreading.max_threads_value() in Isabelle/ML?<br>\nThe question is how many are actuallt run in parellel.</p>\n<p>How big is the theory that you were working on?</p>\n<p>Makarius</p>",
        "id": 294290672,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660923342
    },
    {
        "content": "<p>From: Gottfried Barrow &lt;<a href=\"mailto:igbi@gmx.com\">igbi@gmx.com</a>&gt;<br>\nThe theory is not that big, about 1700 lines, which takes about 8 <br>\nseconds to prove.</p>\n<p>I was just starting with RC4, so I think threads was set by the default <br>\n\"0\" in the options, which appears to give me 4 threads, since I have an <br>\nolder quad core.</p>\n<p>I've been running with the thread options set to 4, and it has only <br>\ncrashed that one time, and I've now been running sledgehammer quite a <br>\nbit over 6 hours or so.</p>\n<p>For observational purposes, I have the \"sledgehammer_params\" set to use <br>\n17 provers, and I also have those 17 in the \"Provers\" option for the <br>\nSledgehammer panel.</p>\n<p>I list the 17 below and I've set threads=12 now, and, watching the <br>\nnumber of processes, it appears willing to actually start the number of <br>\nthreads that max_threads_value() is set to.</p>\n<p>For the first provers in the list, I interleave local provers with <br>\nremote provers, with the best 3 locals at the beginning, z3, e, and <br>\nspass, and I think it starts all the provers in the order listed. So, <br>\nwith threads=4, remote_spass_pirate wasn't returning with an error <br>\nquickly, but with threads=12, it was failing after a few seconds, for a <br>\nparticular proof.</p>\n<p>Provers:</p>\n<p>z3 remote_vampire e remote_e_tofof spass remote_iprover remote_snark <br>\nremote_e_sine remote_iprover_eq agsyhol remote_spass_pirate satallax <br>\nremote_waldmeister_new leo2 remote_satallax remote_agsyhol remote_leo2</p>\n<p>The short story is that RC0 and RC4 have failed in a way that Cygwin <br>\nIsabelle hasn't failed before, so something has changed. RC4 has only <br>\nfailed once, so it could be a rare thing.</p>\n<p>On the surface, Isabelle2014 doesn't seem to be a big change, though I <br>\nsuppose that's because I've already been exposed to it a while, such as <br>\nto datatype_new.</p>\n<p>There is one huge surface addition, and that's \\&lt;open&gt; and \\&lt;closed&gt;. <br>\nThose are huge, because they're subtle and graphical, and they help to <br>\nclearly delimit the beginning and end of text, better than {* and *}, <br>\nthough those have their use.</p>\n<p>In watching Sledgehammer with \"verbose=true\", it also appears that <br>\nmachine learning is in the house. The prover \"e\" has become very <br>\ncompetitive with remote_vampire.</p>\n<p>Regards,<br>\nGB</p>",
        "id": 294290881,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660923408
    },
    {
        "content": "<p>From: Gottfried Barrow &lt;<a href=\"mailto:igbi@gmx.com\">igbi@gmx.com</a>&gt;<br>\nFinally another crash.</p>\n<p>This is following a pattern. The crash doesn't happen until after I <br>\nterminate the sledgehammer command, and then it's not immediate.</p>\n<p>In this case, I haven't changed threads back to threads=4, it's still at <br>\n12, with the 17 provers.</p>\n<p>About 30 seconds after I terminated a sledgehammer command, I was <br>\nstaring at the screen thinking about what I wanted to do, and it <br>\nterminated. The \"Isabelle Syslog\" message is below:</p>\n<p>Regards,<br>\nGB</p>\n<p>Welcome to Isabelle/HOL (Isabelle2014-RC4: August 2014)<br>\nassertion \"baseAddr &gt; (PolyWord*)obj &amp;&amp; baseAddr &lt; <br>\n((PolyWord*)obj)+length\" failed: file \"gc_mark_phase.cpp\", line 439, <br>\nfunction: virtual void <br>\nMTGCProcessMarkPointers::ScanAddressesInObject(PolyObject*, POLYUNSIGNED)</p>\n<p>message_output terminated<br>\n/cygdrive/e/E_2/dev/Isabelle2014/lib/scripts/run-polyml-5.5.2: line 84: <br>\n6368 Aborted (core dumped) \"$POLY\" -q -i $ML_OPTIONS --eval \"$(perl <br>\n\"$ISABELLE_HOME/lib/scripts/recode.pl\" \"$MLTEXT\")\" --error-exit &lt; /dev/null</p>\n<p>rmdir<br>\n:</p>\n<p>failed to remove<br>\n‘/tmp/isabelle-6160’<br>\n:<br>\nDirectory not empty</p>\n<p>standard_output terminated<br>\nstandard_error terminated<br>\nprocess terminated<br>\ncommand_input terminated<br>\nprocess_manager terminated<br>\nReturn code: 134</p>",
        "id": 294290918,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660923423
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nThis one is already quite well-known in internal circles.</p>\n<p>It can happen when the Poly/ML runtime system and memory management is <br>\nunder high pressure -- we've increased that pressure on the application <br>\nside significantly since the last release.  Trying to hunt it down and pin <br>\nit up, I have found out that Windows has a much higher chance to expose <br>\nthat bad behaviour, presumably due to more narrow memory resources on <br>\nCygwin.  The situation might become better again, after switching to <br>\nCygwin x86_64, but I have not tried it yet.</p>\n<p>Note that David Matthews did not manage to eradicate the source of the <br>\nproblem, because it never happened on any of his machines, and the people <br>\nwho have seen it elsewhere could not repeat it reliably.</p>\n<p>Makarius</p>",
        "id": 294290940,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660923428
    },
    {
        "content": "<p>From: Gottfried Barrow &lt;<a href=\"mailto:igbi@gmx.com\">igbi@gmx.com</a>&gt;<br>\nMakarius,</p>\n<p>I thought there was nothing more to say about it, and I didn't want to <br>\nreply just to say, \"Switching to Cygwin x86_64 sounds exciting, if it <br>\nworks\". Now I have something to add.</p>\n<p>\"Auto Methods\", mysteriously, could also be putting demands on the CPU <br>\nwhen Sledgehammer is running.</p>\n<p>I usually enable, all together, \"Auto Methods\", \"Auto Nitpick\", and <br>\n\"Auto Quickcheck\" and forget about them.</p>\n<p>Today, \"Auto Methods\" is acting as the only culprit for what I describe, <br>\nbecause I've enabled them one at a time for the setup I describe below. <br>\n\"Auto Solve direct\" seems to not be a problem, because I've left it <br>\nenabled, and I don't use \"Auto Sledgehammer\".</p>\n<p>I attach a screenshot to show what's above where I have the cursor, and <br>\nwhat's below. It doesn't seem like any attempts should be made to prove <br>\nor disprove anything, and it's not like I have this problem all the time.</p>\n<p>My setup for the screenshot is that I started PIDE with those 3 auto <br>\noptions disabled. I then enabled them, with where the cursor is shown, <br>\n(I then took the time to do them one at a time, with only \"Auto Methods\" <br>\ncausing this).</p>\n<p>The CPU goes to about 50% as shown for all four cores, and then I have <br>\nto terminate. Disabling the three options is not enough.</p>\n<p>As a final note, in repeatedly starting up, enabling \"Auto Methods\", <br>\ndisabling, and then terminating PIDE, I had problems terminating, so I <br>\nrebooted.</p>\n<p>So, on a fresh boot, I started PIDE, saw the purple bar show proving <br>\nuntil got to the cursor position I show in the screenshot, I enabled <br>\n\"Auto Methods\", all 4 cores started working to about 50% if the CPU, I <br>\ndisabled \"Auto Methods\", and then I had to terminate.</p>\n<p>Regards,<br>\nGB<br>\n<a href=\"/user_uploads/14278/Fem0R8xO04skoQkVZVJILAbU/140826__Auto-stuff-runs-CPU-mysteriously.png\">140826__Auto stuff runs CPU mysteriously.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/14278/Fem0R8xO04skoQkVZVJILAbU/140826__Auto-stuff-runs-CPU-mysteriously.png\" title=\"140826__Auto stuff runs CPU mysteriously.png\"><img src=\"/user_uploads/14278/Fem0R8xO04skoQkVZVJILAbU/140826__Auto-stuff-runs-CPU-mysteriously.png\"></a></div>",
        "id": 294290979,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660923444
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nOn Tue, 26 Aug 2014, Gottfried Barrow wrote:</p>\n<blockquote>\n<p>\"Auto Methods\", mysteriously, could also be putting demands on the CPU <br>\nwhen Sledgehammer is running.</p>\n</blockquote>\n<p>This is what the Isabelle/jEdit manual says in Isabelle2014:</p>\n<p>\\item @{system_option_ref auto_methods} controls automatic use of a<br>\n   combination of standard proof methods (@{method auto}, @{method<br>\n   simp}, @{method blast}, etc.).  This corresponds to the Isar command<br>\n   @{command_ref \"try0\"} \\cite{isabelle-isar-ref}.</p>\n<p>The tool is disabled by default, since unparameterized invocation of<br>\n   standard proof methods often consumes substantial CPU resources<br>\n   without leading to success.</p>\n<p>There might be additional reasons for its CPU hunger.  If so, I can refine <br>\nthe text accordingly.</p>\n<blockquote>\n<p>\"Auto Solve direct\" seems to not be a problem, because I've left it <br>\nenabled, and I don't use \"Auto Sledgehammer\".</p>\n</blockquote>\n<p>More quotes from the manual:</p>\n<p>\\item @{system_option_ref auto_sledgehammer} controls a significantly<br>\n   reduced version of @{command_ref sledgehammer}, which attempts to prove<br>\n   a subgoal using external automatic provers. See also the<br>\n   Sledgehammer manual \\cite{isabelle-sledgehammer}.</p>\n<p>This tool is disabled by default, due to the relatively heavy nature<br>\n   of Sledgehammer.</p>\n<p>\\item @{system_option_ref auto_solve_direct} controls automatic use of<br>\n   @{command_ref solve_direct}, which checks whether the current subgoals<br>\n   can be solved directly by an existing theorem.  This also helps to<br>\n   detect duplicate lemmas.</p>\n<p>This tool is \\emph{enabled} by default.</p>\n<blockquote>\n<p>The CPU goes to about 50% as shown for all four cores, and then I have <br>\nto terminate. Disabling the three options is not enough.</p>\n</blockquote>\n<p>You can also experiment with the improved Monitor panel, to get some <br>\nstatistics of the running ML system from inside.</p>\n<p>Makarius</p>",
        "id": 294291268,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660923539
    }
]