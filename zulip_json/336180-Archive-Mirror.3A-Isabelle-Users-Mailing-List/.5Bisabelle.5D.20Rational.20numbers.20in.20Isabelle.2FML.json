[
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nI have nothing against just one high-quality Rat module in Isabelle/ML, <br>\none that takes all previous experience into account and uses the current <br>\npossibilities of Poly/ML and Isabelle/ML.</p>\n<p>Looking briefly through the sources raises the following questions:</p>\n<p>* Is MyRat based on the existing Rat, or an independent development?</p>\n<p>* What is the relation of Integer.lcm/gcd, PolyML.IntInf.lcm/gcd versus<br>\n     MyRat.gcd? Could it be all based on PolyML.IntInf.lcm/gcd (taking care<br>\n     about the proper sign)?  PolyML.IntInf.lcm/gcd might lead to much<br>\n     better performance, because it uses GMP operations directly.</p>\n<p>* Rat.inv and MyRat.inv look odd to me, but for different reasons.  Are<br>\n     these actually correct?</p>\n<p>How about a formally specified and verified implementation? It should be <br>\nmostly trivial with all the algebraic tools in Isabelle/HOL.</p>\n<p>Some of the authors of the existing rat.ML should get involved.</p>\n<p>Makarius</p>",
        "id": 294671252,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661173457
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\na theorem prover.</p>\n<p>It would be great to see a fully verified CakeML compiler + runtime system</p>\n<ul>\n<li>proof checker, and Isabelle export to that for independent checking.</li>\n</ul>\n<p>As a start, someone could put the old Isabelle/OpenTheory implementation <br>\nby Brian Huffman into shape.</p>\n<p>Makarius</p>",
        "id": 294671345,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661173481
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nThere are two syntax questions here:</p>\n<p>* Overloaded +, -, *, / etc. as for the other SML Basis number<br>\n     implementations. Poly/ML provides an internal operation for that,<br>\n     which happens to be publicly available, at least during Isabelle/Pure<br>\n     bootstrap.</p>\n<p>* Notation for literals. We have already antiquotations in Isabelle/ML,<br>\n     even short forms with control symbols and cartouches. This could be<br>\n     probably stretched one step further to introduce the following syntax:</p>\n<p>#DIGITS/DIGITS   or   #~DIGITS/DIGITS</p>\n<p>As abbreviation for @{rational ...} with the usual meaning of<br>\n     antiquotations.  In particular, a \"value\" antiquotation produces<br>\n     results as static values only once at compile-time.</p>\n<p>Such advanced ML surface syntax requires a truely advanced implementation <br>\nbehind it, beyond any doubts about correctness and performance.</p>\n<p>Makarius</p>",
        "id": 294671364,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661173487
    },
    {
        "content": "<p>From: Manuel Eberl &lt;<a href=\"mailto:eberlm@in.tum.de\">eberlm@in.tum.de</a>&gt;</p>\n<blockquote>\n<p>* Is MyRat based on the existing Rat, or an independent development?<br>\nIt's independent; I only found out that there was one in Isabelle after <br>\nI'd written my own. I didn't think to look in \"src/Tools\".</p>\n</blockquote>\n<blockquote>\n<p>* What is the relation of Integer.lcm/gcd, PolyML.IntInf.lcm/gcd versus<br>\n    MyRat.gcd? Could it be all based on PolyML.IntInf.lcm/gcd (taking <br>\ncare<br>\n    about the proper sign)?  PolyML.IntInf.lcm/gcd might lead to much<br>\n    better performance, because it uses GMP operations directly.<br>\nProbably. I didn't know Poly/ML already had GMP bindings; in that case, <br>\none could probably use GMP rationals directly, which might increase <br>\nperformance further. This is probably something that we could suggest to <br>\nDavid Matthews.</p>\n</blockquote>\n<blockquote>\n<p>* Rat.inv and MyRat.inv look odd to me, but for different reasons.  Are<br>\n    these actually correct?<br>\nThere is a ~ missing in MyRat.inv. That code should definitely receive a <br>\nthorough review before it goes anywhere. Rat.inv looks fine to me.</p>\n</blockquote>\n<blockquote>\n<p>How about a formally specified and verified implementation? It should <br>\nbe mostly trivial with all the algebraic tools in Isabelle/HOL.<br>\nWell, we have a rational number type in Isabelle/HOL with working code <br>\nequations. If I recall correctly, the performance was almost as good as <br>\nHaskell's (unverified) rational number implementation. (modulo using the <br>\nunverified gcd operation from GMP). However, I would imagine that the <br>\nexported could would be quite ugly.</p>\n</blockquote>\n<p>Manuel</p>",
        "id": 294671392,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661173494
    },
    {
        "content": "<p>From: Manuel Eberl &lt;<a href=\"mailto:eberlm@in.tum.de\">eberlm@in.tum.de</a>&gt;</p>\n<blockquote>\n<p>However, I would imagine that the exported could would be quite ugly. <br>\n*The exported /code/</p>\n</blockquote>\n<p>Also, I just remembered another issue that should be taken care of: As <br>\nfar as I'm aware, there is currently no way to convert HOL rational <br>\nnumbers to Isabelle/ML rational numbers and the other way round. (like <br>\nwhat I do in MyRat)</p>",
        "id": 294671416,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661173500
    },
    {
        "content": "<p>From: Gerwin Klein &lt;<a href=\"mailto:Gerwin.Klein@nicta.com.au\">Gerwin.Klein@nicta.com.au</a>&gt;</p>\n<blockquote>\n<p>On 2 Apr 2016, at 10:58 PM, Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt; wrote:</p>\n<p>On Sat, 2 Apr 2016, Lawrence Paulson wrote:</p>\n<blockquote>\n<p>CakeML illustrates the advantages of a formal definition. It is a subset of standard ML with substantially the same semantics. Without a formal semantics, the very idea of a verified compiler is meaningless. Others have also noticed the benefits of using a formally defined language for coding<br>\n a theorem prover.</p>\n</blockquote>\n<p>It would be great to see a fully verified CakeML compiler + runtime system<br>\n+ proof checker, and Isabelle export to that for independent checking.</p>\n<p>As a start, someone could put the old Isabelle/OpenTheory implementation by Brian Huffman into shape.</p>\n</blockquote>\n<p>We (Sydney team, including Ramana and Michael on the HOL4 side) are interested in working on that in the medium term, i.e. in a few months to a year or so.</p>\n<p>If anyone else is interested as well, let us know, more than happy to collaborate on it!</p>\n<p>Cheers,<br>\nGerwin</p>\n<hr>\n<p>The information in this e-mail may be confidential and subject to legal professional privilege and/or copyright. National ICT Australia Limited accepts no liability for any damage caused by this email or its attachments.</p>",
        "id": 294671444,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661173507
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nI did not mean to use exported code, but just to make a demo theory with <br>\nall the definitions and maybe some simple proofs (e.g. in HOL/ex). The <br>\nidea is just to make certain intentions and invariants explicit, notably <br>\nthe sign of certain parts.</p>\n<p>A related question is about sign in lcm/gcd: in structure Integer, <br>\nPolyML.IntInf, and the HOL definitions. There is also a connection of <br>\nPolyML.IntInf operations with the code generator in AFP Gauss_Jordan and <br>\nEchelon_Form.</p>\n<p>Makarius</p>",
        "id": 294671465,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661173513
    },
    {
        "content": "<p>From: Manuel Eberl &lt;<a href=\"mailto:eberlm@in.tum.de\">eberlm@in.tum.de</a>&gt;<br>\nThat should be quite possible, and I expect the proofs to be very easy, <br>\nif not completely automatic.</p>\n<p>Manuel</p>",
        "id": 294671479,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661173518
    },
    {
        "content": "<p>From: Manuel Eberl &lt;<a href=\"mailto:eberlm@in.tum.de\">eberlm@in.tum.de</a>&gt;<br>\nHallo,</p>\n<p>I noticed that there is an ML implementation of rational numbers in the <br>\nIsabelle distribution (~~/src/Tools/rat.ML).</p>\n<p>There are a few issues with this:<br>\n– for some reason, it does not use operator overloading for <br>\naddition/multiplication/equality/etc. on rational numbers, but <br>\nintroduces a \"+/\", \"*/\" etc. syntax for it.<br>\n– pretty printing displays 1/3 and 1 as \"Rat (1, 3)\" and \"Rat (1, 0)\", <br>\nrespectively instead of \"1 / 3\" and \"1\". One could argue that \"Rat (1, <br>\n3)\" is the better choice since that means one can copy-paste output <br>\ndirectly back as ML source again; however, it also makes output more <br>\ndifficult to read, in my opinion. At the very least, there should be a <br>\nfunction that converts a rational number to such a string.<br>\n– there is no functionality for parsing rational numbers at all (at <br>\nleast I couldn't find something like that)</p>\n<p>I have already implemented all of these things in my own little version <br>\nof rational numbers (see attachment) and could merge any of them into <br>\nthe distribution if there is a consensus that that should be done.</p>\n<p>Any opinions?</p>\n<p>Cheers,</p>\n<p>Manuel<br>\n<a href=\"/user_uploads/14278/iScD0nAmHuCKZf3_MWrNrqD3/rat.ML\">rat.ML</a></p>",
        "id": 294671772,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661173604
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nOn Fri, 1 Apr 2016, Manuel Eberl wrote:</p>\n<blockquote>\n<p>I noticed that there is an ML implementation of rational numbers in the <br>\nIsabelle distribution (~~/src/Tools/rat.ML).</p>\n</blockquote>\n<p>I don't think this is relevant to isabelle-users. Rat is just one of many <br>\nauxiliary modules in the implementation. I will nonetheless continue here, <br>\nto avoid cross-mailing list confusion wrt. isabelle-dev.</p>\n<blockquote>\n<p>There are a few issues with this:<br>\n– for some reason, it does not use operator overloading for<br>\naddition/multiplication/equality/etc. on rational numbers, but introduces a <br>\n\"+/\", \"*/\" etc. syntax for it.</p>\n</blockquote>\n<p>This follows Standard ML. Adhoc overloading is not defined by the language <br>\nand works differently in each implementation.</p>\n<p>Since SML/NJ has been discontinued after Isabelle2016 (see<br>\n<a href=\"http://sketis.net/2016/isabelle-no-longer-supports-smlnj\">http://sketis.net/2016/isabelle-no-longer-supports-smlnj</a>) and old versions <br>\nof Poly/ML as well, we can in principle become more specific to a <br>\nparticular Poly/ML version. This means that standard-ness is given up, and <br>\nthe game becomes more like that of OCaml (or Scala, even Haskell/GHC). I <br>\nam myself still unsure if this is good or bad.</p>\n<blockquote>\n<p>I have already implemented all of these things in my own little version <br>\nof rational numbers (see attachment) and could merge any of them into <br>\nthe distribution if there is a consensus that that should be done.</p>\n</blockquote>\n<p>There is no need for \"consensus\" for Isabelle development, but a need for <br>\na critical mass of people (1-3) who understand a certain module or part of <br>\nthe system.</p>\n<p>The Mercurial history is the first place to look:<br>\n<a href=\"http://isabelle.in.tum.de/repos/isabelle/log/471b576aad25/src/Pure/General/rat.ML\">http://isabelle.in.tum.de/repos/isabelle/log/471b576aad25/src/Pure/General/rat.ML</a> <br>\n<a href=\"http://isabelle.in.tum.de/repos/isabelle/log/1948d555a55a/src/Tools/rat.ML\">http://isabelle.in.tum.de/repos/isabelle/log/1948d555a55a/src/Tools/rat.ML</a></p>\n<p>It shows that Florian Haftmann has done the main work in putting and <br>\nkeeping this in shape.</p>\n<p>The history also shows exposes various \"fixes\" and other amendments. It is <br>\nimportant to check that there is no regression. In half-forgotten Isabelle <br>\njargon, \"new\" means a failed attempt to do something old in a better way.</p>\n<p>Just some formal notes on Isabelle/ML usage:</p>\n<p>* Const names etc. should be always used with proper antiquotations;<br>\n     lack of that is legacy (unmaintainable).</p>\n<p>* <a href=\"http://Option.map\">Option.map</a> is the only canonical operation from that structure,<br>\n     everything else should be ignored.</p>\n<p>Makarius</p>",
        "id": 294671985,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661173672
    },
    {
        "content": "<p>From: Christine Sherif Rizkallah &lt;<a href=\"mailto:christine2711987@gmail.com\">christine2711987@gmail.com</a>&gt;<br>\nThanks for sharing Manuel. I'm sure I can benefit from the pretty printing.</p>",
        "id": 294672236,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661173739
    },
    {
        "content": "<p>From: Manuel Eberl &lt;<a href=\"mailto:eberlm@in.tum.de\">eberlm@in.tum.de</a>&gt;</p>\n<blockquote>\n<p>I don't think this is relevant to isabelle-users. Rat is just one of <br>\nmany auxiliary modules in the implementation.<br>\nI have one entry in the AFP already that uses rational numbers in ML, <br>\nand another AFP submission is in preparation. I think this is definitely <br>\nrelevant to some Isabelle users (e.g. for automatically providing <br>\nwitnesses for certain things; in my case, solutions to linear programs <br>\nand adequate interval splittings for Sturm's method).</p>\n</blockquote>\n<blockquote>\n<p>This follows Standard ML. Adhoc overloading is not defined by the <br>\nlanguage and works differently in each implementation. […] we can in <br>\nprinciple become more specific to a particular Poly/ML version. […]<br>\nI don't really have any opinion on this. Uniform notation for addition <br>\netc. is nice to have, but I cannot say whether it is worth it. This is <br>\none of the reasons why I wrote that email, to collect some more opinions <br>\non the issue.</p>\n</blockquote>\n<blockquote>\n<p>* <a href=\"http://Option.map\">Option.map</a> is the only canonical operation from that structure, <br>\neverything else should be ignored.<br>\nAll right, then what is the canonical way to do things like that? Nested <br>\ncase statements? Those can get very ugly and unreadable very fast.</p>\n</blockquote>\n<p>Cheers,</p>\n<p>Manuel</p>",
        "id": 294672483,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661173806
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nThere is nothing wrong with case expressions. Isabelle/ML is not as <br>\npoint-free as Haskell.</p>\n<p>See also the \"implementation\" manual about \"Options\":</p>\n<p>Apart from @{ML Option.map} most other operations defined in structure<br>\n   @{ML_structure Option} are alien to Isabelle/ML and never used. The<br>\n   operations shown above are defined in @{file<br>\n   \"~~/src/Pure/General/basics.ML\"}.</p>\n<p>Here is a general note from the manual about the basis library from NJ:</p>\n<p>The basis library proposal of SML97 needs to be treated with caution.<br>\n   Many of its operations simply do not fit with important Isabelle/ML<br>\n   conventions (like ``canonical argument order'', see<br>\n   \\secref{sec:canonical-argument-order}), others cause problems with the<br>\n   parallel evaluation model of Isabelle/ML (such as @{ML TextIO.print} or<br>\n   @{ML OS.Process.system}).</p>\n<p>Makarius</p>",
        "id": 294672676,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661173874
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nIt would be certainly nice to have +, -, *, / on type rat.</p>\n<p>Looking at the Poly/ML sources, its internal addOverload operation has a <br>\ncomment as follows:</p>\n<p>(* This goes in RunCall since it's only for the basis library. *)</p>\n<p>In Isabelle/bb29cc00c31f I have already removed that critical bootstrap <br>\nstructure from the ML environment: it contains other things that may <br>\ndisrupt the ML system in a bad way (similar to Obj.magic in OCaml).</p>\n<p>So if the overloaded syntax should be used, it needs to be part of the <br>\nIsabelle/Pure bootstrap environment. In that case one could also invent <br>\nseparate notation for rat literals and make that an integral part of <br>\nIsabelle/ML.</p>\n<p>Isabelle/ML is an \"embrace and extend\" version of Standard ML -- what SML <br>\ncould have been if it had not been hindered by SML/NJ. Nonetheless, adding <br>\nnew things to Isabelle/ML requires some care.</p>\n<p>Makarius</p>",
        "id": 294672907,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661173941
    },
    {
        "content": "<p>From: Lawrence Paulson &lt;<a href=\"mailto:lp15@cam.ac.uk\">lp15@cam.ac.uk</a>&gt;<br>\nI would say bad, and we should try to limit our deviations from Standard ML to what is essential. If there ever is further evolution of Standard ML, we should try to bring our own ideas into it.</p>\n<p>CakeML illustrates the advantages of a formal definition. It is a subset of standard ML with substantially the same semantics. Without a formal semantics, the very idea of a verified compiler is meaningless. Others have also noticed the benefits of using a formally defined language for coding<br>\n a theorem prover. We have been forced to stretch things a bit, due to the lack of other competitive implementations, but we must hope that this situation doesn't last forever.</p>\n<p>Larry Paulson</p>",
        "id": 294673114,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661174008
    }
]