[
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nOn Tue, 21 Jan 2014, marco caminati wrote:</p>\n<blockquote>\n<p>However, I would also like this code to be triggered by time events at <br>\nruntime. For example, I would like the code to output its values every <br>\nsecond. A simple way I had in mind was to add an argument to the <br>\nspecification of my function representing time, and then to plug a time <br>\ncounter into that argument, but I'm digressing.</p>\n</blockquote>\n<p>Andreas Lochbihler has already given some hints that this is probably just <br>\na question how to wrap the Isabelle-generated Scala code into something <br>\nthat lies outside the image of your original Isabelle/HOL specifications.</p>\n<p>So it is mostly about some timer or thread programming on the JVM, using <br>\nScala to access regular Java APIs.</p>\n<blockquote>\n<p>Googling, I found references to timeap/timeit and to <a href=\"http://Time.now\">Time.now</a> ().</p>\n</blockquote>\n<p>timeap/timeit are from Isabele/ML.</p>\n<p><a href=\"http://Time.now\">Time.now</a> is from Standard ML and it is OK to use in Isabelle/ML as well <br>\n(this is not always the case for such SML basis library things).</p>\n<blockquote>\n<p>2) I am only familiar with Isar, but I understand that to use these<br>\n   approaches I should embed ML code in it, right?  In this case, is<br>\n   there a good primer to descend from the Isar layer to the underlying<br>\n   ML layer?</p>\n</blockquote>\n<p>Step 0 is to get the basic mental model about Isabelle right, including <br>\nsome elementary terminology.  Isabelle is a framework of many different <br>\nlanguages: Isabelle/Pure, Isabelle/HOL, Isabelle/ML, Isabelle/Scala, ... <br>\nIsabelle/XYZ according to your own imaginations if you like.</p>\n<p>Some of these languages are intertwined, and embeded into each other in <br>\ncertain ways, but it does not make sense to speak of \"layers\" or to <br>\n\"descend\" -- especially not for the special pair Isabelle/Isar versus <br>\nIsabelle/ML.</p>\n<p>The canonical picture to keep in mind is <br>\n<a href=\"http://en.wikipedia.org/wiki/File:Yin_and_Yang.svg\">http://en.wikipedia.org/wiki/File:Yin_and_Yang.svg</a> -- sometimes this one <br>\nalso helps: <a href=\"http://en.wikipedia.org/wiki/File:Klein_bottle.svg\">http://en.wikipedia.org/wiki/File:Klein_bottle.svg</a></p>\n<p>You can learn more about Isabelle/ML in the \"implementation\" manual that <br>\nis included in Isabelle, e.g. Documentation panel in Isabelle/jEdit. <br>\nThere is also a tiny example at the bottom of the same panel: <br>\nsrc/HOL/ex/ML.thy.  It includes some bits of HOL -&gt; ML code generation, <br>\nbut not Scala.</p>\n<p>That is an interesting pastime, but it is probably irrelevant to your <br>\nproblem.</p>\n<p>Makarius</p>",
        "id": 294263165,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660915133
    },
    {
        "content": "<p>From: marco caminati &lt;<a href=\"mailto:marco.caminati@yahoo.it\">marco.caminati@yahoo.it</a>&gt;<br>\nHi,</p>\n<p>I am using Isabelle/HOL to produce executable Scala code from suitable specifications.<br>\nI can get some code returning the value of some function upon a given argument.<br>\nHowever, I would also like this code to be triggered by time events at runtime.<br>\nFor example, I would like the code to output its values every second.<br>\nA simple way I had in mind was to add an argument to the specification of my function representing time, <br>\nand then to plug a time counter into that argument, but I'm digressing.</p>\n<p>In general, how do you exploit machine's clock at runtime?<br>\nGoogling, I found references to timeap/timeit and to <a href=\"http://Time.now\">Time.now</a> ().<br>\nQuestions:</p>\n<p>1) Would any of these approaches be useful for the problem stated above?</p>\n<p>2) I am only familiar with Isar, but I understand that to use these approaches I should embed ML code in it, right?<br>\nIn this case, is there a good primer to descend from the Isar layer to the underlying ML layer?</p>\n<p>Best,<br>\nMarco</p>",
        "id": 294267549,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660916072
    },
    {
        "content": "<p>From: Andreas Lochbihler &lt;<a href=\"mailto:andreas.lochbihler@inf.ethz.ch\">andreas.lochbihler@inf.ethz.ch</a>&gt;<br>\nHi Marco,</p>\n<p>as you produce Scala code, I assume that you want to have those time events in Scala. <br>\nHowever, Isabelle's code generator generates only a subset of what you can do in Scala, <br>\nnamely the purely functional programming part. With some extension like Imperative_HOL, <br>\nyou get a bit further. But for asynchronous time events, you need concurrency, and AFAIK <br>\nthere's nothing like that in Isabelle at the moment. Do you want to reason about these <br>\ntime events? If not, then all this is just a matter of wrapping up the generated Scala <br>\ncode -- you definitely don't want to do all this in Isabelle. That is, you should write in <br>\nScala your time trigger that evaluates the function you are interested in and outputs the <br>\nresults. If you want to reason about these timing events in Isabelle, then you first have <br>\nto model all this in HOL (not easy) and adapt the code generator such that maps your model <br>\nto the Scala primitives (difficult to get really right).</p>\n<p>Hope this helps,<br>\nAndreas</p>",
        "id": 294267563,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660916079
    }
]