[
    {
        "content": "<p>From: Denis Bueno &lt;<a href=\"mailto:dbueno@gmail.com\">dbueno@gmail.com</a>&gt;<br>\nI'm an Isabelle newbie trying to verify a proof.  The statement of the<br>\nproof (on paper) involves a natural number parameter k, and the k-fold<br>\ncartesian product of a set.  How would people reasoning in Isabelle<br>\napproach this?  How would you represent the cross product?  I saw the<br>\n&lt;*&gt; operator in Finite_Set, but am not sure how to generalise.</p>\n<p>The proof is Theorem 2 of a paper on Hyperproperties [0], in case<br>\nyou'd like more detail.  I've just begun formalising it, so I don't<br>\nthink it's worth attaching my proof script.</p>\n<p>[0] <a href=\"http://www.cs.cornell.edu/people/clarkson/papers/clarkson_hyperproperties.pdf\">http://www.cs.cornell.edu/people/clarkson/papers/clarkson_hyperproperties.pdf</a></p>",
        "id": 294060408,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660823422
    },
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\nThe cheapest approach is to identify tuples with lists and use \"listset <br>\nA\", the set of all lists over A. If size matters, you could define your <br>\nown set former, eg \"vector A n = {xs : listset A. size xs = n}\".</p>\n<p>The problem with iterating &lt;*&gt; is that its result type would depend on <br>\nthe value n. Such dependent types can (in general) not be formed in HOL. <br>\nHowever, there is a trick due to John Harrison how this can be done for <br>\nA^n after all. I hope somebody else will comment on this. The Word <br>\nlibrary follows this approach already.</p>\n<p>Tobias</p>\n<p>Denis Bueno wrote:</p>",
        "id": 294060441,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660823439
    },
    {
        "content": "<p>From: Michael Norrish &lt;<a href=\"mailto:Michael.Norrish@nicta.com.au\">Michael.Norrish@nicta.com.au</a>&gt;<br>\nTobias Nipkow wrote:</p>\n<blockquote>\n<p>The problem with iterating &lt;*&gt; is that its result type would depend<br>\non the value n. Such dependent types can (in general) not be formed<br>\nin HOL.  However, there is a trick due to John Harrison how this can<br>\nbe done for A^n after all. I hope somebody else will comment on<br>\nthis. The Word library follows this approach already.</p>\n</blockquote>\n<p>I have ported this trick to Isabelle in a short theory file, which I<br>\nhope to make available.  (Not that it's hard to do.)</p>\n<p>In fact, the Word library doesn't use this trick.  The Word library<br>\nallows a type of words of dimension zero, which would be impossible<br>\nusing the Harrison type.</p>\n<p>The Harrison approach is to use the type</p>\n<p>'a::finite -&gt; 'b</p>\n<p>to represent an \"array\" of card(Univ::'a set) many 'b values.</p>\n<p>The type 'a has to be finite in order to have card make sense.  The<br>\ntype 'a (in common with all HOL types) can't be empty, so you can't<br>\nget the singleton value corresponding to a function of empty domain.</p>\n<p>(Of course, if you actually wanted infinte cartesian products, you'd<br>\ndrop the finite-ness requirement.)</p>\n<p>HOL4's word library does use Harrison arrays.</p>\n<p>In Isabelle's Word library, the representation of an 'a word is</p>\n<p>{ 0 ..&lt;  2 ^ len_of TYPE('a::len0) }</p>\n<p>where the len0 class requires the len_of function.  The cardinality of<br>\nthe 'a type is thus irrelevant to the construction.</p>\n<p>In both systems, syntax is set up so that the array types can be<br>\nwritten</p>\n<p>bool[12]</p>\n<p>'a[10]</p>\n<p>etc.</p>\n<p>Michael.</p>",
        "id": 294060591,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660823512
    }
]