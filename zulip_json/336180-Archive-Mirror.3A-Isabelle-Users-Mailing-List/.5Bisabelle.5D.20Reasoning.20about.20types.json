[
    {
        "content": "<p>From: John Munroe &lt;<a href=\"mailto:munddr@gmail.com\">munddr@gmail.com</a>&gt;<br>\nHi,</p>\n<p>If a function f takes a type as an argument, is there a way to reason about<br>\nthe 'parent' type of the argument type? Perhaps, something like:</p>\n<p>Suppose U is a type.</p>\n<p>definition \"f s = (if s <em>is a parent type of</em> U then True else False\"</p>\n<p>Thanks in advance.</p>\n<p>John</p>",
        "id": 294149257,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660848696
    },
    {
        "content": "<p>From: John Munroe &lt;<a href=\"mailto:munddr@gmail.com\">munddr@gmail.com</a>&gt;<br>\nA related question: Are types first-class citizens in Isabelle/HOL?</p>\n<p>Thanks</p>\n<p>John</p>",
        "id": 294149277,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660848702
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nIt depends what exactly you mean by \"is a parent type of\".  The Isabelle <br>\nframework allows some restricted reasoning about types, as cultivated <br>\nquite sucessfully for type classes, for example.  Other (schematic) <br>\nrelations over types also work, but there is no abstraction, <br>\nquantification, comparison of types.</p>\n<p>Makarius</p>",
        "id": 294149505,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660848775
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nNo, types are somewhat restrained.  The HOL community has accumulated <br>\ncertain smart tricks to do funny things with the little flexibilty that <br>\nthe type language provides, see src/HOL/Library/Numeral_Type.thy for <br>\nexample.</p>\n<p>Makarius</p>",
        "id": 294149523,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660848782
    }
]