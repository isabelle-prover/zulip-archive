[
    {
        "content": "<p>From: Rafal Kolanski &lt;<a href=\"mailto:rafalk@cse.unsw.edu.au\">rafalk@cse.unsw.edu.au</a>&gt;<br>\nHello,</p>\n<p>I am confused as to why Isabelle displays different variables than their <br>\nactual names in some cases. For instance:</p>\n<p>lemma \"P (xs::'a list)\"<br>\nproof (induct xs)<br>\n   case Nil<br>\n   thus ?case sorry<br>\nnext<br>\n   case (Cons x xs)<br>\n   hence \"P xs\" .</p>\n<p>Note how I write \"Cons x xs\" and \"P xs\" but Isabelle keeps displaying <br>\nxsa. With complicated induction proofs this makes it hard to keep track <br>\nof what exactly the variables are called. It doesn't prevent shadowing <br>\nbecause when I write \"xs\" I don't get the blue xs from the original <br>\nstatement.<br>\nAlso, when copying a subgoal or parts thereof to a new \"have\" or \"lemma\" <br>\nstatement to prove them separately, I have to go through and convert <br>\nevery \"&lt;var&gt;a\" to \"&lt;var&gt;\". This is cumbersome.</p>\n<p>Why does this happen, and is there a way to turn this behaviour off?</p>\n<p>Sincerely,</p>\n<p>Rafal Kolanski.</p>",
        "id": 294056696,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660821844
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nFirst of all note that the induction proof really needs to refer to <br>\nlocally fresh variables in the body.  Your proof can be spelled out more <br>\nexplicitly as follows:</p>\n<p>lemma<br>\n  fixes xs :: \"'a list\"<br>\n  shows \"P xs\"<br>\nproof (induct xs)<br>\n  show \"P Nil\" sorry<br>\nnext<br>\n  fix y ys<br>\n  assume \"P ys\"<br>\n  show \"P (Cons y ys)\" sorry<br>\nqed</p>\n<p>The choice of names is up to you, it is convenient to re-use some names <br>\nfrom the original statement, but the internal logic is still the same.  <br>\nIn particular, using x and xs here makes the system invent an internal <br>\n(brown) xsa, to avoid a clash with the initial (fixed) xs.</p>\n<p>For historical reasons, goal display uses the internal names of the raw <br>\nlogic, not the terminology of the Isar text.  This makes it indeed hard to <br>\npaste text from the goal state back into the source.  (At some later <br>\nstage, the print layer might get smart enough to perform the trick.)</p>\n<p>To avoid such inconveniences right now you can either use completely <br>\ndifferent bound names (as y and ys above), or try to avoid pasting from <br>\nlow-level goal state in the first place.  This can be achieved to some <br>\ndegree by referring to symbolic facts and goals produced by the ``cases'' <br>\ninfrastructure (see also the print_cases command), maybe also with some <br>\nadditional term abbreviation derived from the original statement (using <br>\n\"is\" patterns).</p>\n<p>Makarius</p>",
        "id": 294056728,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660821856
    }
]