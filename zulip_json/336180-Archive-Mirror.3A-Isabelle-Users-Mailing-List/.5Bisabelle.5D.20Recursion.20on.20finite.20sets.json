[
    {
        "content": "<p>From: Andreas Lochbihler &lt;<a href=\"mailto:lochbihl@ipd.info.uni-karlsruhe.de\">lochbihl@ipd.info.uni-karlsruhe.de</a>&gt;<br>\nHi all,</p>\n<p>I am looking for some way of defining a function recursively over finite <br>\nsets.<br>\nFor a datatype t, the datatype package automatically generates a <br>\nrecursion operator t_rec with which primitive-recursively functions over <br>\n  that datatype can be defined. For finite sets, I haven't found <br>\nanything similar. The only thing I have found is the fold combinator in <br>\nFinite_Set of type \"('a =&gt; 'a =&gt; 'a) =&gt; ('b =&gt; 'a) =&gt; 'a =&gt; 'b set =&gt; <br>\n'a\" where \"fold f g z A\" is f folded over the (multiset) image of A <br>\nunder g with initial value z.<br>\nBut I would rather like to have some function finite_rec :: \"('b set =&gt; <br>\n'b =&gt; 'a =&gt; 'a) =&gt; 'a =&gt; 'b set =&gt; 'a\"  that satisfies</p>\n<p>\"finite_rec f z {} = z\" and<br>\n\"[| finite A; ~ (x : A) |]<br>\n  ==&gt; finite f z (insert x A) = f A x (finite_rec f A z)\"</p>\n<p>for all \"well-formed\" functions f.</p>\n<p>Is there already something there that I can use like finite_rec or can <br>\nfinite_rec be somehow defined using existing fold?</p>\n<p>Best,<br>\nAndreas</p>",
        "id": 294068291,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660826248
    },
    {
        "content": "<p>From: Alexander Krauss &lt;<a href=\"mailto:krauss@in.tum.de\">krauss@in.tum.de</a>&gt;<br>\nHi Andreas,</p>\n<p>Hmmm... How would you specify well-formed? It seems this is not easy...</p>\n<p>As far as I know, Finite_Set.fold is all we have at the moment.</p>\n<p>Alex</p>",
        "id": 294068321,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660826260
    },
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\nIf f does not take the remaining set A as an argument, then you can<br>\ndefine such a recursion operator completelty along the same lines as the<br>\n fold operator currently provided. It will require f to be<br>\nleft-commutative: f a (f b c) = f b (f a c). See the TPHOLs 2005 paper<br>\nby Larry and me for more details. In fact, such an operator would be<br>\nwelcome.</p>\n<p>If the same development could be generalized to your f I am not sure.</p>\n<p>Tobias</p>\n<p>Andreas Lochbihler wrote:</p>",
        "id": 294068332,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660826266
    }
]