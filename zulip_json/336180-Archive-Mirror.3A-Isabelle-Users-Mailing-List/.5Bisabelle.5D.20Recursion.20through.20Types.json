[
    {
        "content": "<p>From: Tjark Weber &lt;<a href=\"mailto:webertj@in.tum.de\">webertj@in.tum.de</a>&gt;<br>\nHi,</p>\n<p>There is a trick (due to John Harrison) to encode the dimension N of,<br>\ne.g., N-bit words with a type argument.  The word libraries in<br>\nIsabelle/HOL and HOL4 are based on this approach.</p>\n<p>In this setting, what is the recommended way to define a function that<br>\nperforms recursion over N, i.e., whose result for an (N+1)-bit word is<br>\nnaturally expressed in terms of its result for an N-bit word?</p>\n<p>Best,<br>\nTjark</p>",
        "id": 294251515,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660910923
    },
    {
        "content": "<p>From: Jesus Aransay &lt;<a href=\"mailto:jesus-maria.aransay@unirioja.es\">jesus-maria.aransay@unirioja.es</a>&gt;<br>\nDear Tjark,</p>\n<p>I don't know how far the following solution is applicable to your<br>\nsetting, but a somehow similar problem (and two different solutions)<br>\nwere proposed in the mailing list by J. Harrison a while ago, for the<br>\ndefinition of determinants of matrices of dimension n, in terms of<br>\ndeterminants of matrices of size \"n - 1\":</p>\n<p><a href=\"https://lists.cam.ac.uk/mailman/htdig/cl-isabelle-users/2012-January/msg00015.html\">https://lists.cam.ac.uk/mailman/htdig/cl-isabelle-users/2012-January/msg00015.html</a></p>\n<p>Hope it helps,</p>\n<p>best,</p>\n<p>Jesus</p>",
        "id": 294251692,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660910993
    },
    {
        "content": "<p>From: Johannes Hölzl &lt;<a href=\"mailto:hoelzl@in.tum.de\">hoelzl@in.tum.de</a>&gt;<br>\nHi Tjark,</p>\n<p>I also think the general answer is no.</p>\n<p>But maybe there is a trick (also called ugly hack) using type classes:</p>\n<p>For a function \"f\" you want to define with primitive recursion on a type<br>\n\"'a\" you introduce a new type class:</p>\n<p>class f_def =<br>\n    fixes f :: \"'a ⇒ nat\"</p>\n<p>Now you instantiate the option type (as the successor type):</p>\n<p>instantiation option :: (f_def) f_def<br>\n  begin</p>\n<p>definition <br>\n    \"f_option (x::'a option) = f (undefined :: 'a) + 1\"</p>\n<p>instance ..<br>\n  end</p>\n<p>and one for the unit type (as termination)</p>\n<p>instantiation unit :: f_def<br>\n  begin</p>\n<p>definition f_unit :: \"unit ⇒ nat\" where<br>\n    \"f_unit (x::unit) = 0\"</p>\n<p>instance ..<br>\n  end</p>\n<p>But a problem is that numeral types used by the word library and by<br>\nMultivariate Analysis use a binary representation instead of a unary<br>\nrepresentation.</p>\n<ul>\n<li>Johannes</li>\n</ul>",
        "id": 294251830,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660911024
    },
    {
        "content": "<p>From: Andreas Lochbihler &lt;<a href=\"mailto:andreas.lochbihler@inf.ethz.ch\">andreas.lochbihler@inf.ethz.ch</a>&gt;<br>\nHi Tjark and Johannes,</p>\n<p>You can do recursion through such number types provided that you fix the representation of <br>\nnumbers as types. The HOL-Word library does not fix the representation, but it uses a type <br>\nclass (like f_def in Johannes' example), and AFAIK the same applies to <br>\nMultivariate_Analysis. It is merely the parser/pretty printer (in <br>\nHOL/Library/Numeral_Type) that translates numerals into type constructors, and this is <br>\nwhere the binary format comes from.</p>\n<p>However, if you are sure that you will only ever need \"primitive recursion\" n -&gt; n - 1, <br>\nthen you can fix the representation to unary representations of sizes and do the <br>\nrecursion. The following sketches the idea:</p>\n<p>typedef 'a succ = \"{0..&lt;CARD('a)+1}\" ...</p>\n<p>consts f :: \"'a :: len word =&gt; 'b :: len word\"</p>\n<p>defs (overloaded)<br>\n   f_base: \"f (x :: num1 word) = ...\" -- \"base case n = 1\"<br>\n   f_rec: \"f (x :: 'a :: len succ word) = ... f (... :: 'a :: len word)\"</p>\n<p>Best,<br>\nAndreas</p>",
        "id": 294251856,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660911036
    }
]