[
    {
        "content": "<p>From: Diego Machado Dias &lt;<a href=\"mailto:diegodias.m@gmail.com\">diegodias.m@gmail.com</a>&gt;<br>\nHi all,</p>\n<p>I am wondering if is there a natural way of encoding in Isabelle a grammar<br>\nlike this:</p>\n<p>Value = VInt int | ...<br>\n Cmd = Skip | NonDeterministicChoice \"Cmd set\" | ...</p>\n<p>The motivation would be to give definition a few specification commands in<br>\nterms of Non deterministic choice, e.g.:</p>\n<p>Magic == NonDeterministicChoice {}<br>\n Rely c r z = Defined using set compreehension and NonDeterministicChoice</p>\n<p>Isabelle complains about the recursive occurrence of type \"Cmd\" in \"Cmd<br>\nset\" when I try to represent the grammar through a datatype, i.e.:</p>\n<p>Unsupported recursive occurrence of type \"Cmd\" via type constructor<br>\n\"Set.set\" in type expression \"Cmd set\". Use the \"bnf\" command to register<br>\n\"Set.set\" as a bounded natural functor to allow nested (co)recursion<br>\nthrough it</p>\n<p>Looking the Isabelle error message when I use set, I couldn't figure out<br>\nhow to register the bounded natural functor for the type 'set' in this<br>\ncontext, so I decided to try two speculative solutions.</p>\n<p><em>Speculative solution</em></p>\n<p><em>Option 1</em></p>\n<p>Instead of use set, if I use an inductively defined datatype such as list,<br>\nIsabelle does not complain e.g.</p>\n<p>datatype Cmd = Skip | NonDeterministicChoice \"Cmd list\" | ...</p>\n<p>Lists are not the right abstraction here, but I give it a go to see if it<br>\nwould work or not. The immediate effect of using lists is that, instead of<br>\nuse set comprehension I need to use sequence filtering, and the problem<br>\nthen become to come up with two lists: one containing all elements of <em>Cmd</em>,<br>\nand other containing all elements of <em>Value</em>.</p>\n<p>I declared two uninterpreted constants:</p>\n<p>consts Values :: \"Value list\"<br>\nconsts Programs :: \"Cmd list\"</p>\n<p>Because lists are finite, it makes more sense to explain the constants as<br>\n\"all elements (of interest) of Cmd\" and \"all values (of interest)\". Say,<br>\nall elements of interest are those that can be represented in the memory of<br>\na computer.</p>\n<p><em>Option 2</em></p>\n<p>If I need to use consts, then I could just declare<br>\nNonDeterministicChoiceSet as</p>\n<p>consts NonDeterministicChoiceSet :: \"Cmd set â‡’ Cmd\"</p>\n<p>and explain it (informally) as a function that receives a set of Cmd, and<br>\nreturns the correspondent NonDeterministicChoice fed with the list<br>\ncontaining all the elements of the set given as argument, ordered by some<br>\ncriteria, say lexicographic order. Then, rather than use<br>\n\"NonDeterministicChoice\" when giving a semantics, I would give a semantics<br>\nfor \"NonDeterministicChoiceSet\" and only use \"NonDeterministicChoiceSet\" in<br>\nthe theory.</p>\n<p><em>Questions</em></p>\n<p>1. Do these modelling make sense if my intention is to capture the<br>\n   grammar of Cmd and give an operational semantics to the constructors of Cmd?</p>\n<p>2. Is there a better way of represent that grammar?<br>\n   3. Is Isabelle the appropriated theorem-prover if I want to represent<br>\n   that grammar? I experimented define this grammar in Z/Eves using free<br>\n   types, and it raised no complains.</p>\n<p>Thanks in advance for any suggestions,</p>\n<p>Diego Dias</p>",
        "id": 294644111,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661163328
    },
    {
        "content": "<p>From: Lars Hupel &lt;<a href=\"mailto:hupel@in.tum.de\">hupel@in.tum.de</a>&gt;<br>\nSee also the answer by Manuel on Stack Overflow: <a href=\"http://stackoverflow.com/a/30932175\">http://stackoverflow.com/a/30932175</a></p>",
        "id": 294644124,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661163335
    },
    {
        "content": "<p>From: Manuel Eberl &lt;<a href=\"mailto:eberlm@in.tum.de\">eberlm@in.tum.de</a>&gt;<br>\nDear Diego,</p>\n<p>I already gave you a very detailed answer to your question on<br>\nStackOverflow yesterday:<br>\n<a href=\"http://stackoverflow.com/questions/30921002\">http://stackoverflow.com/questions/30921002</a></p>\n<p>If you find that answer unsatisfactory, may I suggest you explain why<br>\ninstead of asking the exact same question again here?</p>\n<p>Cheers,<br>\nManuel</p>",
        "id": 294644137,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661163341
    },
    {
        "content": "<p>From: Diego Machado Dias &lt;<a href=\"mailto:diegodias.m@gmail.com\">diegodias.m@gmail.com</a>&gt;<br>\nDear Manuel,</p>\n<p>Thank you very much for your quick and the detailed answer in Stack<br>\nOverflow,<br>\nthe theoretical explanation there clarified the issue with the grammar, and<br>\nI am<br>\nexperimenting the suggestions provided there. I'll soon comment on your<br>\nanswer<br>\nthere, so the discussion stays in the same place.</p>\n<p>This email was sent to the isabelle user's list before the question on Stack<br>\nOverflow to be answered. Sorry for the duplication. Next time I will post<br>\neither<br>\nhere or there instead of both places.</p>\n<p>Cheers,<br>\nDiego Dias</p>",
        "id": 294644148,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661163347
    }
]