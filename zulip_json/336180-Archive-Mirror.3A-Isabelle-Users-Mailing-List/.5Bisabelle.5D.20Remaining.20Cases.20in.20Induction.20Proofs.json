[
    {
        "content": "<p>From: Patrick Michel &lt;<a href=\"mailto:uni@pbmichel.de\">uni@pbmichel.de</a>&gt;<br>\nHi!</p>\n<p>I am working with a five-way mutual recursive set of datatypes, that have a combined count of 27 constructors. For induction proofs over these datatypes this means proving 27 cases at minimum, sometimes more, as I often have multiple properties to prove for one of the types at once.</p>\n<p>Many of these proofs can be done \"by (induct v and p and d and r and l) auto\", provided I have good lemmas and auto doesn't choke.<br>\nIn other proofs I cam fine with listing all the cases and doing the \"proof (induct v and p and d and r and l)\", as many cases need different tactics.</p>\n<p>What I am worried about are the cases in between. Sometimes there really are only three interesting cases, the rest works \"by auto\". If auto doesn't choke on these three, I can do the proofs in apply style of course, but I try to avoid apply proofs. So with \"proof\" these proofs look like this:</p>\n<p>proof (induct v and p and d and r and l)<br>\n case A: … next<br>\n case B: … next<br>\n case C: … next<br>\n case rest1 thus ?case by auto next<br>\n case rest2 thus ?case by auto next<br>\n case rest3 thus ?case by auto next<br>\n …<br>\nqed</p>\n<p>Where \"restX\" goes up to 27, as said, or even worse these cases can have sub cases, etc. pp.</p>\n<p>The same situation arises with induction theorems from complex functions that match more than one parameter. The way Isabelle disambiguates the equations is to unfold all combinations. In a recent proof I had to proof the cases 1 to 7, 8_1 to 8_3 and 9_1 to 9_27. Thereof only 1 to 8_3 where interesting and were followed by 27 lines of boilerplate cases :-)</p>\n<p>Now I know some possible ways to get out of this mess:<br>\n1) pick another induction scheme<br>\n2) if necessary, define one via a terminating function<br>\n3) in the case of the function example above: change the definition by avoiding to match another parameter (which can complicate things and in general makes the function harder to read)<br>\n4) find more lemmas so the proof works \"by (induct v and p and d and r and l) auto\" again, or something comparable in size</p>\n<p>In the past weeks, however, I found myself in several situation where I could not come up with a good solution.</p>\n<p>Which brings me to my original point :-D</p>\n<p>I would love to just rewrite the above proof to something like:</p>\n<p>proof (induct v and p and d and r and l)<br>\n case A: … next<br>\n case B: … next<br>\n case C: … next<br>\n remaining_cases by auto<br>\nqed</p>\n<p>Where \"remaining_cases\" presents me with the exact proof state I see after the last next. I.e., I can pick all the \"cherries\" from the cases, proof them nicely, and dispose of the rest.<br>\nThat would be incredibly useful to me.</p>\n<p>So has this been considered? Is it easy/hard to implement? Is it already possible and I missed it?</p>\n<p>Thanks in advance,</p>\n<p>Patrick Michel<br>\nSoftware Technology Group<br>\nUniversity of Kaiserslautern, Germany</p>",
        "id": 294165182,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660854479
    },
    {
        "content": "<p>From: Brian Huffman &lt;<a href=\"mailto:huffman@in.tum.de\">huffman@in.tum.de</a>&gt;<br>\nHi Patrick,</p>\n<p>I believe that you are looking for the following pattern:</p>\n<p>proof (induct v and p and d and r and l)<br>\n case A: … next<br>\n case B: … next<br>\n case C: … next<br>\nqed auto</p>\n<p>That is, you give a final proof method after \"qed\" to solve the remaining cases.</p>\n<ul>\n<li>Brian</li>\n</ul>",
        "id": 294165186,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660854480
    },
    {
        "content": "<p>From: René Thiemann &lt;<a href=\"mailto:rene.thiemann@uibk.ac.at\">rene.thiemann@uibk.ac.at</a>&gt;<br>\nDear Patrick,</p>\n<p>Then just do it :-)</p>\n<p>proof (induct v and p and d and r and l)<br>\n  case A: … next<br>\n  case B: … next<br>\n  case C: … next<br>\nqed auto (* solves remaining cases *)</p>\n<p>Hope this helps,<br>\nRené</p>",
        "id": 294165240,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660854487
    }
]