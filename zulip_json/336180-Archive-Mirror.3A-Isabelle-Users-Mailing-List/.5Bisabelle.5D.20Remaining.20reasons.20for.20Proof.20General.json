[
    {
        "content": "<p>From: Joachim Breitner &lt;<a href=\"mailto:breitner@kit.edu\">breitner@kit.edu</a>&gt;<br>\nHi,</p>\n<p>do you really mean “composing”, in the sense of the Compose key, or<br>\nrather “dead” key?</p>\n<p>For a dead key i would expect that &lt;~&gt;&lt;space&gt; will print \"~\", not \"~ \" –<br>\nwhy do you need Ctrl-B? What OS by the way?</p>\n<p>I have disabled dead keys and use the Compose Key<br>\n(<a href=\"https://en.wikipedia.org/wiki/Compose_key\">https://en.wikipedia.org/wiki/Compose_key</a>) so that &lt;Compose&gt;&lt;~&gt;&lt;n&gt;<br>\nyiels ñ. But that might not be an option if you have to enter a lot of<br>\naccents. In that case, you might want to customize jEdit, as suggested<br>\nby René¹².</p>\n<p>Greetings,<br>\nJoachim</p>\n<p>¹ Yes, that is &lt;R&gt;&lt;e&gt;&lt;n&gt;&lt;Compose&gt;&lt;´&gt;&lt;e&gt;.<br>\n² No, ¹ is not &lt;Compose&gt;&lt;^&gt;&lt;1&gt;, although that works as well, but <br>\n  &lt;AltGr&gt;&lt;1&gt;<br>\n³ My &lt;Compose&gt; key is &lt;Print&gt;, which Thinkpads have for some reason <br>\n  between the right AltGr and String. I enable that with<br>\n  keycode 107 = Multi_key<br>\n  in my ~/.Xmodmap.<br>\n<a href=\"/user_uploads/14278/_yD-49soV2o6Gd7uh10oiJWR/signature.asc\">signature.asc</a></p>",
        "id": 294254254,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660911968
    },
    {
        "content": "<p>From: René Neumann &lt;<a href=\"mailto:rene.neumann@in.tum.de\">rene.neumann@in.tum.de</a>&gt;<br>\nAs a matter of fact: The Linux' XCompose input method [1] works fairly<br>\nwell with Isabelle/jEdit. For example, I use my right windows key as<br>\ncompose key, allowing me to use Compose + / + \\ to enter ∧ in any text.<br>\nSame for Compose + g + a for α ... and many more.</p>\n<p>Using this in Isabelle/jEdit yields the result I'd expected, i.e. no<br>\nvisual difference to using jEdits abbreviations here.</p>\n<p>Hence, in theory, a sophisticated user could have different levels of<br>\ninput abbreviations (very often used ones: jEdit, not so often: Compose,<br>\nseldomly: explicit completion), where the first ones can even share the<br>\nsame codes (f.ex. &lt; + = for ≤ and Compose + &lt; + = for ⇐ )</p>\n<ul>\n<li>René</li>\n</ul>\n<p>[1] I probably am using the wrong nomenclature here...<br>\n<a href=\"/user_uploads/14278/Uzw-5zH94JNGo_C193VkkrkP/smime.p7s\">smime.p7s</a></p>",
        "id": 294254266,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660911974
    },
    {
        "content": "<p>From: Manuel Eberl &lt;<a href=\"mailto:eberlm@in.tum.de\">eberlm@in.tum.de</a>&gt;<br>\nUsing a compose key is definitely a good way to just ignore jEdit's<br>\ncompletion. I have a customised .XCompose file that allows me to write<br>\n∀, ∃, ∈, ⟹, ⊆ and so on using the Compose key; this solution has the<br>\nadvantage that it also works the same way outside of jEdit. I only just<br>\nrealised that I could simply use my Compose key to solve the whole<br>\nUnicode token issue for me, maybe I should give jEdit another try.</p>",
        "id": 294254277,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660911980
    },
    {
        "content": "<p>From: Joachim Breitner &lt;<a href=\"mailto:breitner@kit.edu\">breitner@kit.edu</a>&gt;<br>\nHi,</p>\n<p>I just tried to switch to the GTK theme and it made the UI feel much<br>\nmore sluggish. Maybe you can try the default Nimbus theme and compare?</p>\n<p>Greetings,<br>\nJoachim<br>\n<a href=\"/user_uploads/14278/wi3T2amMbjRhFA7hAwXjCcfz/signature.asc\">signature.asc</a></p>",
        "id": 294254288,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660911987
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nFor completeness here are my own remaining reasons for Proof General, <br>\nwhich are really the last bits.</p>\n<p>* Use of ispell to spell-check the \"text\" parts of theories (the<br>\n     latex-oid formal source).</p>\n<p>I think jEdit VoxSpell will do the job after some fine-tuning.  In<br>\n     particular the token language needs to be taken into account to<br>\n     distinguish informal from formal text.</p>\n<p>* Reformatting of plain ASCII or \"text\" parts with fill-paragraph.</p>\n<p>It should be reasonably easy to reshape the jEdit action<br>\n     format-paragraph to work more like the old Emacs operation.  It<br>\n     especially needs to distinuish a given margin for informal text vs.<br>\n     the overall \"wrap margin\" of the source file.</p>\n<blockquote>\n<p>From the above you can guess how I've edited the new Isabelle/jEdit manual <br>\nsome weeks ago: using Proof General in offline mode.</p>\n</blockquote>\n<p>Hopefully that was the last time that such oddities happened.  Once that <br>\nthe Isabelle document preparation system is integrated into <br>\nIsabelle/jEdit, there will be little reasons to look back on ancient <br>\nthings anyway.</p>\n<p>Makarius</p>",
        "id": 294254304,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660911992
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nIt is new in Isabelle2013-1 as the NEWS tell.</p>\n<p>(Arbitrary repository snapshots of Isabelle are off-topic on this mailing <br>\nlist.)</p>\n<p>Makarius</p>",
        "id": 294254311,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660911999
    },
    {
        "content": "<p>From: René Neumann &lt;<a href=\"mailto:rene.neumann@in.tum.de\">rene.neumann@in.tum.de</a>&gt;<br>\nYeah, I have switched to Nimbus here. It still is not the most<br>\nresponsive UI, but it is in an acceptable range.</p>\n<ul>\n<li>René<br>\n<a href=\"/user_uploads/14278/A289bUCMdCwYzcwTcrUwF-Cp/smime.p7s\">smime.p7s</a></li>\n</ul>",
        "id": 294254329,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660912005
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nA few more hints on SideKick in general.  Its main purpose is to provide <br>\nsome simple tree view on text buffers, depending on \"edit mode\" and <br>\n\"sidekick parser\".</p>\n<p>For example, you can use the Documentation panel to open the Isabelle NEWS <br>\nfile.  Then you switch to SideKick and get some clickable outline of that <br>\nfile, according to its structure.</p>\n<p>Makarius</p>",
        "id": 294254340,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660912011
    },
    {
        "content": "<p>From: Joachim Breitner &lt;<a href=\"mailto:breitner@kit.edu\">breitner@kit.edu</a>&gt;<br>\nHi,</p>\n<p>additional fact: gtk (or GNOME?) disables the usual X11 provided compose<br>\nmethod (which is configurable and more extentensive) by a hard-coded<br>\nlist which contains, for example ☭ and ¹, but not the ones you mention,<br>\nwhich is unfortunate. This can be overwritten (export<br>\nGTK_IM_MODULE=\"xim\" ), but that had other side-effects which I don’t<br>\nrecall at the moment.</p>\n<p>Greetings,<br>\nJoachim<br>\n<a href=\"/user_uploads/14278/g-cf-1sbSbxtqYu-0x3o9SgC/signature.asc\">signature.asc</a></p>",
        "id": 294254354,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660912018
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nI usually use Nimbus -- it is a good compromise of performance vs. <br>\nlook-and-feel quality.  GTK+ is not only slow, but has occasional <br>\ndropouts, e.g. in ListView.  The Color Picker is also not quite <br>\nup-to-date -- lacking important tabs.</p>\n<p>The really old Metal L&amp;F is even faster and more reliable, but is a bit <br>\nretro now.</p>\n<p>The fastest L&amp;F I've ever seen is native Windows, but native Mac OS X is <br>\nalso OK.</p>\n<p>Makarius</p>",
        "id": 294254367,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660912023
    },
    {
        "content": "<p>From: Manuel Eberl &lt;<a href=\"mailto:eberlm@in.tum.de\">eberlm@in.tum.de</a>&gt;<br>\nOne rather annoying sideffect is that you cannot use Ctrl + Shift + U to<br>\nenter unicode symbols by their code point anymore. I have not yet found<br>\na way to fix this, I use xim as well.</p>",
        "id": 294254399,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660912036
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nHere is a probably related note from the last section of the <br>\nIsabelle/jEdit manual:</p>\n<p>\\item \\textbf{Problem:} Some Linux / X11 input methods such as IBus<br>\n   tend to disrupt key event handling of Java/AWT/Swing.</p>\n<p>\\textbf{Workaround:} Do not use input methods, reset the environment<br>\n   variable @{verbatim XMODIFIERS} within Isabelle settings (default in<br>\n   Isabelle2013-1).</p>\n<p>It has required almost 1 year until I managed to reproduce this myself and <br>\nto find an entry on the IBus tracker, which is still pending, I think.<br>\n(The IBus guy did not understand the source of the problem.)</p>\n<p>So Linux input methods can be as hostile to Java as window managers.  To <br>\nme that \"platform\" has become more and more like a freak show.</p>\n<p>People who do have the ambition to iron out such snags, are especially <br>\nwelcome to provide further hints to the jEdit guys at <br>\n<a href=\"http://sourceforge.net/projects/jedit/\">http://sourceforge.net/projects/jedit/</a></p>\n<p>My impression is that the quality and coverage is approx. 90% Windows, 9% <br>\nMac OS X, 1% Linux.  The little remains of the latter are then potentially <br>\ndestroyed by Linux packagers (but Isabelle/jEdit does not depend on that).</p>\n<p>Makarius</p>",
        "id": 294254411,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660912042
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nThe non-handling of add-on files, especially ML ones, is one of the main <br>\nomissions from the past 5 years of Isabelle/jEdit.  Just a few weeks ago, <br>\nwhile cycling through sunny Apulia, I've devised a reasonably simple way <br>\nto get there.  Lets see if I manage for the next release.</p>\n<p>The reason why its not there yet is indeed the coincidence that it mostly <br>\naffects people working on Isabelle/HOL itself, which are releatively few, <br>\nand it is a relatively tough job anyway.  It does not mean that I am not <br>\nannoyed myself by the omission.</p>\n<p>Some months ago, I had a different and quite pleasant experience with <br>\nIsabelle/ML development in Isabelle/jEdit.  Doing just plain 'ML' sections <br>\n(to avoid the ML file problem) and some 'keywords' in the header, it was <br>\nreally nice to work out some Isar commands.  The only surprise was a <br>\nsudden breakdown due to an old version of the command still persisting <br>\nwhile the new version was malformed (rejected by the ML compiler).</p>\n<p>The internal command table is still global for historic reasons (Proof <br>\nGeneral legacy again) and poking into it can have unexpected effects.</p>\n<p>Makarius</p>",
        "id": 294254423,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660912048
    },
    {
        "content": "<p>From: Peter Lammich &lt;<a href=\"mailto:lammich@in.tum.de\">lammich@in.tum.de</a>&gt;<br>\nI just gave the jEdit in 2013-1 a try. Here are my first impressions:</p>\n<p>* In PG, I have some open buffers, these are the buffers that I'm<br>\ninterested in. jEdit opens all dependent theories (approx 50 to 100 in<br>\nmy typical use-case). So using cycle-buffer or similar functions makes<br>\nno sense. </p>\n<p>How can I efficiently switch between the theories that I'm currently<br>\nediting/interested in, without having to search them among dozens of<br>\nuninteresting theories?</p>\n<p>* I have no control when theories are processed. I loaded a theory,<br>\nand saw in the theory-panel all these purple bars slowly disappearing,<br>\nuntil no purple was left. Also for the theory that was currently<br>\ndisplayed in the main window. However, the theory in the main window was<br>\nNOT completely processed. When moving down the cursor, the purple bar<br>\nappeared again.</p>\n<p>So how can I be sure that my theories are all correct?</p>",
        "id": 294254450,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660912066
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nOn Tue, 12 Nov 2013, Peter Lammich wrote:</p>\n<blockquote>\n<ul>\n<li>In PG, I have some open buffers, these are the buffers that I'm<br>\ninterested in. jEdit opens all dependent theories (approx 50 to 100 in<br>\nmy typical use-case). So using cycle-buffer or similar functions makes<br>\nno sense.</li>\n</ul>\n<p>How can I efficiently switch between the theories that I'm currently<br>\nediting/interested in, without having to search them among dozens of<br>\nuninteresting theories?</p>\n</blockquote>\n<p>I've occasionally seen jEdit plugins to organize buffer groups or <br>\n\"projects\", but have not used any myself so far.</p>\n<blockquote>\n<ul>\n<li>I have no control when theories are processed. I loaded a theory, and <br>\nsaw in the theory-panel all these purple bars slowly disappearing, until <br>\nno purple was left. Also for the theory that was currently displayed in <br>\nthe main window. However, the theory in the main window was NOT <br>\ncompletely processed. When moving down the cursor, the purple bar <br>\nappeared again.</li>\n</ul>\n</blockquote>\n<p>You can give some declarative hints in the \"Theories\" panel, namely for <br>\nglobal \"Continuous checking\" and individual \"Mark as required for <br>\ncontinuous checking\".  There are also actions and keyboard shortcuts for <br>\nthat.</p>\n<p>To get a general overview of specific actions and shortcuts of <br>\nIsabelle/jEdit, you can go to \"Global Options / Shortcuts / Edit <br>\nShortcuts: Plugin: Isabelle\".</p>\n<blockquote>\n<p>So how can I be sure that my theories are all correct?</p>\n</blockquote>\n<p>By making a batch build in the old-fashioned manner.</p>\n<p>An approximation in Isabelle/jEdit is to look closely at the Theories <br>\npanel overview, but with hundreds of theories it might be a bit difficult.</p>\n<p>What is missing here is a general \"wrapup\" of the editor session similar <br>\nto the batch build session.  This non-uniformity is one of these spots <br>\nwhere Proof General legacy support is in the way.</p>\n<p>You have already noticed a subtle breakdown in this department in one of <br>\nthe release candidates.  Doing things once right is better than doing it <br>\n3-4 times slightly differently (Isabelle/jEdit, isabelle build, Proof <br>\nGeneral, TTY).</p>\n<p>Makarius</p>",
        "id": 294254475,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660912078
    },
    {
        "content": "<p>From: Gottfried Barrow &lt;<a href=\"mailto:gottfried.barrow@gmx.com\">gottfried.barrow@gmx.com</a>&gt;<br>\nI use ProjectViewer as both a file manager and a project manager, either <br>\nof which lets you import folders, flattened or not flattened, or just <br>\nadd specific files. It has features for projects I don't use yet, like <br>\nsetting compile and run commands to be run in the console plugin.</p>\n<p>ProjectViewer would let you group together a few files, from the 50 to <br>\n100, and switch back and forth between them by double-clicking on them <br>\nin the ProjectViewer tree.</p>\n<p><a href=\"http://plugins.jedit.org/plugins/?ProjectViewer\">http://plugins.jedit.org/plugins/?ProjectViewer</a></p>\n<p>In the ProjectViewr panel \"Folders\" tab, you right-click on the \"All <br>\nProjects\" and click \"Add project\". A \"Create New Project\" window opens <br>\nwhere you can change different options, but the basics are a project <br>\nname and root directory.</p>\n<p>You give the project a name and root directory and click \"OK\", after <br>\nwhich it takes you to an import window. In your case, if you don't want <br>\nto import the 100 files you don't care about, you would hit cancel, and <br>\nthen add individual files, as I describe below.</p>\n<p>At this point, I don't actually use it as a project manager most of the <br>\ntime, so I right-click on the project name and select \"Close group or <br>\nproject\".</p>\n<p>Under \"All Projects\", I can right-click on a project name and \"Re-import <br>\nfiles\" or \"Add files\". If I've imported a folder, I can expand the tree <br>\nand right-click on a filename and select \"Remove from project\", but you <br>\nhave to be careful, because \"Delete from disk\" is right under that command.</p>\n<p>If you've right-clicked on a project name and selected \"Open group or <br>\nproject\", then %p, $p, or %p% is the console path variable for the <br>\nproject root folder. See \"Help/jEdit Help/Plugins/Console\" for more <br>\ndetails about Console and its interplay with jEdit and other plugins.</p>\n<p>Like I say, I use it as a file manager, so I have files open from <br>\ndifferent projects, where all project names show up below \"All <br>\nProjects\", because I don't have any project open.</p>\n<p>So that it doesn't automatically close the files I want open all the <br>\ntime, in \"Plugin Options/Project Viewer/General Options\", I uncheck both <br>\n\"Close files on project change\" and \"Remember open project files\".</p>\n<p>Regards,<br>\nGB</p>",
        "id": 294254615,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660912113
    },
    {
        "content": "<p>From: Joachim Breitner &lt;<a href=\"mailto:breitner@kit.edu\">breitner@kit.edu</a>&gt;<br>\nHi,</p>\n<p>as a suggestion, would it be possible to decouple the question of<br>\nwhether a theory appears in the Theories panel from the question of<br>\nwhether a buffer exists for it?</p>\n<p>In detail, given Theories A and B, where B imports A. If I import A.thy,<br>\nI will be asked if I want to load theory B as well. Obviously I press<br>\nYes. Now B appears in the Theories panel, and will be processes as a<br>\nprerequisite for A, but the file B.thy will not be (visibly) opened.</p>\n<p>If I now want to edit B.thy as well, I can either double-click on B in<br>\nthe Theories panel, or File→Open it as usual. When I’m done with it, I<br>\ncan even close it; it will stay in the Theories panel (as a dependency<br>\nof A).</p>\n<p>This way, I have full control over what files I have open, and what I<br>\ncan cycle with Ctrl-PgUp. In fact, I was expecting this behavior when I<br>\nfirst fired up jEdit. Possible, it could also speed up things, as no UI<br>\nelements would have be generated for the files that do not have buffers.</p>\n<p>Greetings,<br>\nJoachim<br>\n<a href=\"/user_uploads/14278/0NNFLOiU8KJLfkypBmCNdkH5/signature.asc\">signature.asc</a></p>",
        "id": 294254649,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660912128
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nThat approach was basically at the very start of theory management some <br>\nyears ago, but it did not work out on the spot so I made the explicit <br>\nflooding with jEdit buffers as intermediate solution.  This worked better <br>\nthan anticipated, which explains why it is still there in its relatively <br>\ncrude way.</p>\n<p>In the meantime isabelle build has become a formal part of Isabelle/Scala, <br>\nand various jEdit \"project\" facilities have emerged.  So it all needs to <br>\nbe all revisited to fit it nicely together, such that there is signicant <br>\nconceptual progress as well.</p>\n<p>Makarius</p>",
        "id": 294254770,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660912176
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nOn Mon, 11 Nov 2013, Andreas Lochbihler wrote:</p>\n<blockquote>\n<blockquote>\n<p>People who are still using Proof General should say more explicitly what <br>\nare the reasons<br>\nfor it, apart from old habits.<br>\nI use both jEdit and Proof General, but for different purposes. I see the <br>\nfollowing advantages of ProofGeneral 3.7.1.1 with XEmacs:</p>\n</blockquote>\n</blockquote>\n<p>With some years of delay, that is a start.  I don't see any fundamental <br>\nproblems in this list, just accidental behaviour which can be easily tuned <br>\nor done differently.</p>\n<p>You know yourself that XEmacs / ProofGeneral 3.7.1.1 is totally obsolete. <br>\nCurrent GNU Emacs is at version 24 and Proof General 4.2.  I wonder if <br>\nthere are other remaining users of ProofGeneral 3.7.1.1.</p>\n<blockquote>\n<p>With jEdit, I have to switch to the mouse far more often, in particular <br>\nfor sledgehammer, find_theorems and to navigate from one theory file to <br>\nanother.</p>\n</blockquote>\n<p>jEdit has quite smart keyboard shortcuts for many things, but they are <br>\nusually quite different from Emacs.  Switching files works via the \"buffer <br>\nswitcher\", which is keyboard operable (a bit difficult on German layouts, <br>\nthough).  After several weeks of practice, operating jEdit should be much <br>\nfaster than Emacs.</p>\n<p>The Find and Sledgehammer panel are my own responsibility, and they are <br>\nnew in Isabelle2013-1, so more refinements can be expected.  There are <br>\nalready jEdit actions to open the dockable windows, which also puts the <br>\nfocus on the main GUI component to activate the tool in question via plain <br>\nRETURN.  Note that jEdit \"actions\" can be mapped to keyboard shortcuts by <br>\nthe user.  This is not done by default, to avoid the \"Escape Meta Alt <br>\nControl Shift\" syndrome.</p>\n<blockquote>\n<p>Similarly, I often want to look somewhere else in my theory file (and use <br>\nPgUp/PgDn for that); with ProofGeneral, I just type C-c C-. to get back to <br>\nwhere I was before, but I do not know an equally simple way in jEdit.</p>\n</blockquote>\n<p>Isn't that just abuse of the accidental boundary between checked and <br>\nunchecked text?  This \"focus\" no longer exists in Isabelle/jEdit anyway, <br>\nwhich is actually one of the main points of the whole approach.</p>\n<p>What jEdit (or Isabelle/jEdit) really needs is nice navigation support in <br>\nthe sense of Firefox or similar.  One mainly needs to work out a good <br>\nscheme when or how to \"commit\" positions to the navigation history, and <br>\nmaybe brush up the existing Navigator plugin.</p>\n<blockquote>\n<ol start=\"2\">\n<li>XEmacs has less spacing between the lines (this is the main reason why I <br>\nstill use ProofGeneral 3.7.1.1, GNU Emacs with PG 4.x has a similar spacing <br>\nas jEdit), so more of the proof script fits on the screen at the same font <br>\nsize.</li>\n</ol>\n</blockquote>\n<p>That is a question about fonts.  In principle you can use alternative <br>\nfonts in jEdit to your liking, although I consider IsabelleText the best <br>\ncompromise for display quality and glyph coverage.</p>\n<p>Note that jEdit has an option for extra vertical line spacing (Global <br>\nOptions / Text Area).  I've never used it myself, but it could work out <br>\nreasonably well.  If not, it is relatively easy to tune that text <br>\npainting, because I am doing it all myself anyway.</p>\n<p>In XEmacs you still have bitmap fonts.  I wonder if/how it survives a <br>\nswitch to high-definition displays that have become available in the mass <br>\nmarked last year.  Gladly, Oracle has already managed to catch up, notably <br>\nwith Apple's Retina in Jdk-7u40, so jEdit is already beyond the dividing <br>\nline of current and obsolete applications.  My cheap Sony HD display also <br>\nworks nicely with jEdit fonts.</p>\n<blockquote>\n<ol start=\"3\">\n<li>The output buffers are not usable with a key board. This is <br>\nparticularly annoying when I examine diagnostic output as produced by <br>\ncode_thms, export_code, print_classes, thm &lt;large Named_THM collection&gt;, <br>\netc. In jEdit, I first have to open a new buffer and copy the output <br>\nthere before I can use search and friends to navigate through.</li>\n</ol>\n</blockquote>\n<p>The Output panel is not a buffer at all, but a dockable window.  It <br>\nre-uses some of the jEdit buffer display technology, but there is no <br>\nattempt to imitate Emacs where \"everything is a buffer\".  The latter <br>\napproach sometimes has advantages, sometimes disadvantages.  Like Proof <br>\nGeneral stayed faithful how Emacs works, Isabelle/jEdit takes jEdit <br>\ncustoms seriously.</p>\n<p>Searching in Output panels should not be a fundamental problem.  It is <br>\njust one of the many small things that did not yet make into <br>\nIsabelle/jEdit, because time was spent instead to maintain Proof General.</p>\n<blockquote>\n<ol start=\"4\">\n<li>After a few hours of work, jEdit reacts slower and slower. This gets <br>\nparticularly annoying when typing fast. For example, I want that <br>\nentering &lt; = TAB produces the \\&lt;le&gt; symbol, always. Half of the time, I <br>\nam faster than the popup and I get \"&lt;= \" instead.</li>\n</ol>\n</blockquote>\n<p>I have never heard of that.  There might be a serious problem behind it <br>\nthat needs to be investigated.  Problems that are known can be solved <br>\neventually.  Secret ones will remain forever.</p>\n<p>Makarius</p>",
        "id": 294258721,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660913544
    },
    {
        "content": "<p>From: Lawrence Paulson &lt;<a href=\"mailto:lp15@cam.ac.uk\">lp15@cam.ac.uk</a>&gt;<br>\nYou can put any number of marks in a file. They track edits quite well, and they persist over sessions.<br>\nLarry</p>",
        "id": 294258743,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660913554
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nGood point.</p>\n<p>I am myself not yet aqcuainted with markers.  Likewise multiple registers <br>\nfor copy-paste.  There is always something left to learn about jEdit.</p>\n<p>Makarius</p>",
        "id": 294258748,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660913556
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nOn Mon, 11 Nov 2013, René Neumann wrote:</p>\n<blockquote>\n<p>Am 11.11.2013 12:34, schrieb Makarius:</p>\n<blockquote>\n<p>People who are still using Proof General should say more explicitly what<br>\nare the reasons for it,</p>\n</blockquote>\n<p>I think, I had put it in another mail already, but well:</p>\n</blockquote>\n<p>IIRC, that was for Isabelle2013.  So for Isabelle/PIDE 3rd generation. <br>\nNow we have Isabelle2013-1 and the 4th generation.</p>\n<p>One of the big differences to Proof General is that there are big <br>\ndifferences in each release cycle.  You really need to look what is there<br>\neverytime afresh.</p>\n<blockquote>\n<ul>\n<li>jEdit is SLOW, as in: There is a noticeable lag when moving from one <br>\nmenu to the other per mouse (rendering also consumes 50% to 100% of one <br>\nCPU).</li>\n</ul>\n</blockquote>\n<p>What is your hardware like?  I usually see 20% total time for the JVM and <br>\napprox. 400-800% for Isabelle/ML.  That is an old 8 core machine from <br>\n2009.</p>\n<p>Java has this odd feature that it sometimes \"looks slow\", but it actually <br>\nisn't.</p>\n<p>Isabelle/jEdit was started in 2008 to make efficient use of current <br>\nhardware (2 cores or more).</p>\n<blockquote>\n<ul>\n<li>Fonts are not antialiased. I found that setting some obscure <br>\nenvironment variable [1] made it work, but honestly: no AA by default is <br>\na no-go.</li>\n</ul>\n</blockquote>\n<p>Obsolete in Isabelle2013-1 and hardly an issue before, since it was well <br>\ndocumented in the jEdit FAQ how to change such defaults.</p>\n<blockquote>\n<ul>\n<li>no switching of sessions (at least last time I checked)</li>\n</ul>\n</blockquote>\n<p>Rarely needed, unless you make a convincing point for such a marginal <br>\nfeature.  In Isabelle/jEdit you can load disjoint sessions without <br>\ninterfering each other.</p>\n<p>Proof General legacy support is actually in the way to clean up all that <br>\nand make just one way of Isabelle build or Isabelle/jEdit with multiple <br>\nsessions.</p>\n<blockquote>\n<ul>\n<li>(obsolete: my WM fails to show jEdits dialogs. Just noticed that there<br>\nis a patch available for it).</li>\n</ul>\n</blockquote>\n<p>What is your WM?  There are many Linux guys who just don't want Java <br>\napplications on their particular fork.  The solution is to use one of the <br>\nwell-known standard window managers.</p>\n<blockquote>\n<ul>\n<li>jEdit is too mouse-centric. When I have to use \"Ctrl-hover\" to get<br>\nsome information, I won't use it.</li>\n</ul>\n</blockquote>\n<p>You don't even have this functionality in Proof General, so it is hardly<br>\na remaining reason for Proof General.</p>\n<p>Again: after some weeks of practice, you will be much faster with jEdit <br>\nthan Emacs.  I always feel encumbered when I have to go back to Emacs for <br>\nsome reason.</p>\n<blockquote>\n<ul>\n<li>last time I checked, the 'abbreviation to unicode' conversion that<br>\nfinally(!!) works great in PG, was somewhat unusable in jEdit.</li>\n</ul>\n</blockquote>\n<p>Can you explain that feature of Proof General.  I have never heard of it.</p>\n<p>In Isabelle2013-1 the symbol completion mechanism has been generally <br>\nbrushed up.  Better forget what it was in Isabelle2013 or Proof General, <br>\nand experiment to see its possibilities.  There is also some documentation <br>\nin the Isabelle/jEdit manual.</p>\n<blockquote>\n<blockquote>\n<p>apart from old habits.</p>\n</blockquote>\n<p>And this is also not to be underrated. Over the last two years, I have <br>\ncompiled a 150 lines .emacs (and I'm only using Emacs for Isabelle) plus <br>\nsome 'isabelle emacs' startup magic. Hence being urged to spend all this <br>\ntime again to get the editor in a shape one likes, does not feel good. <br>\nEspecially when there are NEWS items reading \"you have to re-do all your <br>\ncurrent jEdit keybinding customizations\".</p>\n</blockquote>\n<p>I can't do anything here.  You need to be ready to give up old Emacs <br>\nthings and move on to a brave new world.  Isabelle/jEdit is not the <br>\nfuture, it is the present for quite some time already.</p>\n<p>Makarius</p>",
        "id": 294258785,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660913569
    },
    {
        "content": "<p>From: René Neumann &lt;<a href=\"mailto:rene.neumann@in.tum.de\">rene.neumann@in.tum.de</a>&gt;<br>\nAm 11.11.2013 18:13, schrieb Makarius:</p>\n<blockquote>\n<p>On Mon, 11 Nov 2013, René Neumann wrote:</p>\n<p>Am 11.11.2013 12:34, schrieb Makarius:</p>\n<blockquote>\n<blockquote>\n<p>People who are still using Proof General should say more explicitly what<br>\nare the reasons for it,</p>\n</blockquote>\n<p>I think, I had put it in another mail already, but well:</p>\n</blockquote>\n<p>IIRC, that was for Isabelle2013.  So for Isabelle/PIDE 3rd generation.<br>\nNow we have Isabelle2013-1 and the 4th generation.</p>\n<p>One of the big differences to Proof General is that there are big<br>\ndifferences in each release cycle.  You really need to look what is there<br>\neverytime afresh.</p>\n<blockquote>\n<ul>\n<li>jEdit is SLOW, as in: There is a noticeable lag when moving from one<br>\nmenu to the other per mouse (rendering also consumes 50% to 100% of<br>\none CPU).</li>\n</ul>\n</blockquote>\n<p>What is your hardware like?  I usually see 20% total time for the JVM<br>\nand approx. 400-800% for Isabelle/ML.  That is an old 8 core machine<br>\nfrom 2009.</p>\n</blockquote>\n<p>Quadcore i7. Which should be fast enough... I'm using the gtk-style for<br>\njEdit. Or I would need a high-end GPU ... (intel-whatever here only).</p>\n<p>New testing on a second machine (which is slower) does not yield any<br>\nlags. Strange. Have to investigate.</p>\n<blockquote>\n<blockquote>\n<ul>\n<li>Fonts are not antialiased. I found that setting some obscure<br>\nenvironment variable [1] made it work, but honestly: no AA by default<br>\nis a no-go.</li>\n</ul>\n</blockquote>\n<p>Obsolete in Isabelle2013-1 and hardly an issue before, since it was well<br>\ndocumented in the jEdit FAQ how to change such defaults.</p>\n</blockquote>\n<p>Thanks. This indeed does work now.</p>\n<blockquote>\n<blockquote>\n<ul>\n<li>no switching of sessions (at least last time I checked)</li>\n</ul>\n</blockquote>\n<p>Rarely needed, unless you make a convincing point for such a marginal<br>\nfeature.  In Isabelle/jEdit you can load disjoint sessions without<br>\ninterfering each other.</p>\n<p>Proof General legacy support is actually in the way to clean up all that<br>\nand make just one way of Isabelle build or Isabelle/jEdit with multiple<br>\nsessions.</p>\n</blockquote>\n<p>My use case: Using PG with session X. Then noticing that I had to change<br>\nsome theory in X. With session switching this was easy: Exit Isabelle,<br>\nswitch session, restart isabelle (thereby building all of session X, but<br>\nfor development this is ok).</p>\n<p>With jEdit I would have to restart the editor.</p>\n<blockquote>\n<blockquote>\n<ul>\n<li>(obsolete: my WM fails to show jEdits dialogs. Just noticed that there<br>\nis a patch available for it).</li>\n</ul>\n</blockquote>\n<p>What is your WM?</p>\n</blockquote>\n<p>i3</p>\n<blockquote>\n<p>There are many Linux guys who just don't want Java<br>\napplications on their particular fork.  The solution is to use one of<br>\nthe well-known standard window managers.</p>\n</blockquote>\n<p>That's not a solution, but a workaround (I'm using the WM I'm using for<br>\ngood reasons). The problem is not the WM, but Java, as it changed<br>\nbehavior in Java7 and a new workaround in the WM had to be developed<br>\n(again: why Java is not just using existing techniques/libraries and is<br>\ndoing everything from scratch itself, I do not understand).</p>\n<p>But as already written: This problem is obsolete until the next JDK version.</p>\n<blockquote>\n<blockquote>\n<ul>\n<li>last time I checked, the 'abbreviation to unicode' conversion that<br>\nfinally(!!) works great in PG, was somewhat unusable in jEdit.</li>\n</ul>\n</blockquote>\n<p>Can you explain that feature of Proof General.  I have never heard of it.</p>\n</blockquote>\n<p>Typing e.g. /\\ and getting \\&lt;and&gt;, or |/ and getting \\&lt;^sub&gt;.</p>\n<p>But I just ran a fresh download on a previously isabelle-free computer<br>\nand it looked better than expected. Hence I'll give it a fresh try at<br>\nwork (after having patched by WM) and will come back tomorrow (I'll also<br>\nditch the gtk-style)</p>\n<ul>\n<li>René</li>\n</ul>",
        "id": 294258801,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660913575
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nOn Mon, 11 Nov 2013, René Neumann wrote:</p>\n<blockquote>\n<p>Quadcore i7. Which should be fast enough... I'm using the gtk-style for <br>\njEdit. Or I would need a high-end GPU ... (intel-whatever here only).</p>\n</blockquote>\n<p>The hardware is OK.  Since this is Intel hyperthreading, you might want to <br>\nexperiment with explicit option threads=4 instead of the default 8.</p>\n<p>Running on Linux, you can spoil the performance game by graphics drivers, <br>\nor other Gtk-specific oddities that I can't pin down.  Java/Swing <br>\napplications only work well on a moderately configured mainstream Linux <br>\nsystems. Being aggressively Linux-oid spoils the game.  OpenJdk also does <br>\nnot really help in this respect (the code base is mostly the same as <br>\nOracle's Jdk).</p>\n<p>Users of Windows and Mac OS X have an inherent advantage here.</p>\n<blockquote>\n<blockquote>\n<blockquote>\n<ul>\n<li>(obsolete: my WM fails to show jEdits dialogs. Just noticed that there<br>\nis a patch available for it).</li>\n</ul>\n</blockquote>\n<p>What is your WM?</p>\n</blockquote>\n<p>i3</p>\n</blockquote>\n<p>Never heard of that.  Consider it unsupported.</p>\n<blockquote>\n<blockquote>\n<p>There are many Linux guys who just don't want Java applications on <br>\ntheir particular fork.  The solution is to use one of the well-known <br>\nstandard window managers.</p>\n</blockquote>\n<p>That's not a solution, but a workaround (I'm using the WM I'm using for <br>\ngood reasons). The problem is not the WM, but Java, as it changed <br>\nbehavior in Java7 and a new workaround in the WM had to be developed <br>\n(again: why Java is not just using existing techniques/libraries and is <br>\ndoing everything from scratch itself, I do not understand).</p>\n</blockquote>\n<p>This is a very old argument of WM guys versus Java guys.  They hate each <br>\nother for that and accuse the other side of being wrong.</p>\n<p>I've recently done some research of relevant AWT sources and corresponding <br>\nOpenJdk mailing list threads.  I can't tell if and when the situation will <br>\nimprove.  Oracle is fighting at too many fronts at the same time.</p>\n<p>For Isabelle/jEdit, I declare this issue as off-topic.  Users need to use <br>\na well-known WM -- or join the OpenJdk project to solve the problem <br>\nthemselves.</p>\n<blockquote>\n<blockquote>\n<blockquote>\n<ul>\n<li>last time I checked, the 'abbreviation to unicode' conversion that<br>\nfinally(!!) works great in PG, was somewhat unusable in jEdit.</li>\n</ul>\n</blockquote>\n<p>Can you explain that feature of Proof General.  I have never heard of it.</p>\n</blockquote>\n<p>Typing e.g. /\\ and getting \\&lt;and&gt;, or |/ and getting \\&lt;^sub&gt;.</p>\n</blockquote>\n<p>The completion mechanism of Isabelle2013-1 works quite nicely with such <br>\nthings.  I've spent several weeks just on these details.</p>\n<p>Makarius</p>",
        "id": 294258816,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660913581
    },
    {
        "content": "<p>From: René Neumann &lt;<a href=\"mailto:rene.neumann@in.tum.de\">rene.neumann@in.tum.de</a>&gt;</p>\n<blockquote>\n<blockquote>\n<blockquote>\n<blockquote>\n<ul>\n<li>(obsolete: my WM fails to show jEdits dialogs. Just noticed that<br>\nthere<br>\nis a patch available for it).</li>\n</ul>\n</blockquote>\n<p>What is your WM?</p>\n</blockquote>\n<p>i3</p>\n</blockquote>\n<p>Never heard of that.  Consider it unsupported.</p>\n</blockquote>\n<p>I never expected it to be supported. Supporting more than the very<br>\nmainstream software systems would be a nightmare, that I understand.<br>\nBut please also allow me to ignore any 'only supported on'-disclaimers<br>\n(else I had a problem with many things).</p>\n<blockquote>\n<blockquote>\n<blockquote>\n<p>There are many Linux guys who just don't want Java applications on<br>\ntheir particular fork.  The solution is to use one of the well-known<br>\nstandard window managers.</p>\n</blockquote>\n<p>That's not a solution, but a workaround (I'm using the WM I'm using<br>\nfor good reasons). The problem is not the WM, but Java, as it changed<br>\nbehavior in Java7 and a new workaround in the WM had to be developed<br>\n(again: why Java is not just using existing techniques/libraries and<br>\nis doing everything from scratch itself, I do not understand).</p>\n</blockquote>\n<p>This is a very old argument of WM guys versus Java guys.  They hate each<br>\nother for that and accuse the other side of being wrong.</p>\n</blockquote>\n<p>To be honest, the WM guys in question (ie i3 devs) never blamed anyone<br>\nin this particular case. It's just that such issues need their time to<br>\nbe discovered and fixed.</p>\n<blockquote>\n<p>For Isabelle/jEdit, I declare this issue as off-topic.  Users need to<br>\nuse a well-known WM -- or join the OpenJdk project to solve the problem<br>\nthemselves.</p>\n</blockquote>\n<p>I've never thought Isabelle to be the one in charge here. That's why I,<br>\nafter noticing this issue, opened a bug report on i3 [1] (a workaround<br>\nin the WM is easier than a fix in the JDK). It still counted as a<br>\nshow-stopper for me regarding jEdit, though. (Which already got fixed, I<br>\njust included it in the email (marked 'obsolete'!) as I talked about<br>\nthis with other users last Friday and wanted my list to be complete :)).</p>\n<ul>\n<li>René</li>\n</ul>\n<p>[1] <a href=\"http://bugs.i3wm.org/report/ticket/1069\">http://bugs.i3wm.org/report/ticket/1069</a></p>",
        "id": 294258837,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660913588
    },
    {
        "content": "<p>From: Matthew Fernandez &lt;<a href=\"mailto:matthew.fernandez@nicta.com.au\">matthew.fernandez@nicta.com.au</a>&gt;<br>\nOn 12/11/13 09:17, René Neumann wrote:</p>\n<blockquote>\n<blockquote>\n<blockquote>\n<blockquote>\n<blockquote>\n<ul>\n<li>(obsolete: my WM fails to show jEdits dialogs. Just noticed that<br>\nthere<br>\nis a patch available for it).</li>\n</ul>\n</blockquote>\n<p>What is your WM?</p>\n</blockquote>\n<p>i3</p>\n</blockquote>\n<p>Never heard of that.  Consider it unsupported.</p>\n</blockquote>\n<p>I never expected it to be supported. Supporting more than the very<br>\nmainstream software systems would be a nightmare, that I understand.<br>\nBut please also allow me to ignore any 'only supported on'-disclaimers<br>\n(else I had a problem with many things).</p>\n</blockquote>\n<p>I too use PG due to incompatibility between jEdit and my window manager<br>\n(Xmonad within Gnome Classic). Like René, I accept that this is a<br>\nJava-WM problem, not an Isabelle problem. I'm not really wed to any part<br>\nof my software stack so when PG truly stops working I'll make the call<br>\nto switch WMs or run jEdit in a VM.</p>\n<blockquote>\n<blockquote>\n<blockquote>\n<blockquote>\n<p>There are many Linux guys who just don't want Java applications on<br>\ntheir particular fork.  The solution is to use one of the well-known<br>\nstandard window managers.</p>\n</blockquote>\n<p>That's not a solution, but a workaround (I'm using the WM I'm using<br>\nfor good reasons). The problem is not the WM, but Java, as it changed<br>\nbehavior in Java7 and a new workaround in the WM had to be developed<br>\n(again: why Java is not just using existing techniques/libraries and<br>\nis doing everything from scratch itself, I do not understand).</p>\n</blockquote>\n<p>This is a very old argument of WM guys versus Java guys.  They hate each<br>\nother for that and accuse the other side of being wrong.</p>\n</blockquote>\n<p>To be honest, the WM guys in question (ie i3 devs) never blamed anyone<br>\nin this particular case. It's just that such issues need their time to<br>\nbe discovered and fixed.</p>\n<blockquote>\n<p>For Isabelle/jEdit, I declare this issue as off-topic.  Users need to<br>\nuse a well-known WM -- or join the OpenJdk project to solve the problem<br>\nthemselves.</p>\n</blockquote>\n<p>I've never thought Isabelle to be the one in charge here. That's why I,<br>\nafter noticing this issue, opened a bug report on i3 [1] (a workaround<br>\nin the WM is easier than a fix in the JDK). It still counted as a<br>\nshow-stopper for me regarding jEdit, though. (Which already got fixed, I<br>\njust included it in the email (marked 'obsolete'!) as I talked about<br>\nthis with other users last Friday and wanted my list to be complete :)).</p>\n<ul>\n<li>René</li>\n</ul>\n<p>[1] <a href=\"http://bugs.i3wm.org/report/ticket/1069\">http://bugs.i3wm.org/report/ticket/1069</a></p>\n</blockquote>\n<hr>\n<p>The information in this e-mail may be confidential and subject to legal professional privilege and/or copyright. National ICT Australia Limited accepts no liability for any damage caused by this email or its attachments.</p>",
        "id": 294258855,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660913593
    },
    {
        "content": "<p>From: Manuel Eberl &lt;<a href=\"mailto:eberlm@in.tum.de\">eberlm@in.tum.de</a>&gt;<br>\nHallo,</p>\n<p>if it is in interests, here are the reasons why I do not use jEdit:</p>\n<ol>\n<li>\n<p>Automatic Processing<br>\nBy this I mean that jEdit always processes the proof text at the cursor<br>\nposition. I know this is supposed to be a feature of jEdit, but I just<br>\nfind it annoying. I like my prover to be in a fixed state that I can<br>\nalter when I want to. Particularly when you have proof text that takes a<br>\nlong time to process (e.g. due to large terms, I had that in programme<br>\nrefinement a lot), one does not want jEdit to keep processing stuff that<br>\nit should leave alone for the moment.</p>\n</li>\n<li>\n<p>Unicode Tokens<br>\nIn Proof General, I type \"ALL\" and I get a \"∀\". In jEdit, I type \"all\",<br>\nI get an annoying popup and have to confirm my choice with a key press.<br>\nI have tried to get used to this, but I cannot, even after setting the<br>\npopup delay to 0 and adding Space and Tab as keys for confirming the<br>\ncurrently selected symbol. This is particularly tedious if one types a<br>\nsequence of symbols. In a way, I feel that users who /know/ their<br>\nunicode token names by heart are slowed down by unnecessary GUI (the<br>\npopup). I'd like to be able to switch it off and fall back to a Proof<br>\nGeneral-like mechanism where I can type \"ALL\", \"==&gt;\" and \"\\&lt;alpha&gt;\" and<br>\nthey are immediately converted to the corresponding Unicode token.</p>\n</li>\n</ol>\n<p>I could probably live with the first \"problem\"; but the second one is<br>\nreally annoying; I just find that it slows down the speed at which I can<br>\nwrite proofs to great extent.</p>\n<p>I am no friend of emacs and Proof General certainly has its problem, so<br>\nI have tried to switch to jEdit twice in the past, but the above two<br>\nthings and the crashes and lags have led me back to Proof General; maybe<br>\nthese are fixed now and I should try it again.</p>\n<p>In this context, what is the point of \"Sidekick\"? It displays every<br>\n\"have\", every \"using\", every \"by\" as a single node?</p>\n<p>Cheers,<br>\nManuel</p>",
        "id": 294258941,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660913632
    },
    {
        "content": "<p>From: René Neumann &lt;<a href=\"mailto:rene.neumann@in.tum.de\">rene.neumann@in.tum.de</a>&gt;<br>\nThis is what I meant in my email with this blurb about 'unicode'.</p>\n<ul>\n<li>René<br>\n<a href=\"/user_uploads/14278/YUWA4XzG9CsFgaHPdbkrlANm/smime.p7s\">smime.p7s</a></li>\n</ul>",
        "id": 294258951,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660913637
    },
    {
        "content": "<p>From: René Neumann &lt;<a href=\"mailto:rene.neumann@in.tum.de\">rene.neumann@in.tum.de</a>&gt;<br>\nPlugin Options -&gt; Isabelle -&gt; General -&gt; Completion Immediate</p>\n<p>Note to self: RTFM before complaining :)</p>\n<ul>\n<li>René<br>\n<a href=\"/user_uploads/14278/wQD_IKIMo8t5uNhbrWLvJNhy/smime.p7s\">smime.p7s</a></li>\n</ul>",
        "id": 294259007,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660913643
    },
    {
        "content": "<p>From: Manuel Eberl &lt;<a href=\"mailto:eberlm@in.tum.de\">eberlm@in.tum.de</a>&gt;<br>\nI must admit I did not know about this option before; it must be rather<br>\nnew. However, the behaviour is… odd. It seems to complete as soon as<br>\nthere is only one alternative left, i.e. \"\\alp\" is turned into \"α\".<br>\n\"\\ta\" is turne into \"τ\". When one types \"\\alpha\", one gets \"αha\", when<br>\none types \"\\tau\", one gets \"τu\". So basically, if one wants to use this<br>\nfeature, one has to remember what part of the abbreviation will lead to<br>\nthere being only one possibly completion.</p>\n<p>That is not exactly what I had in mind.</p>\n<p>(On a related note, I also found that jEdit was quite slow; it takes<br>\nover a minute to start up on my laptop; Proof General is /much/ faster.)</p>",
        "id": 294259020,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660913648
    },
    {
        "content": "<p>From: Joachim Breitner &lt;<a href=\"mailto:breitner@kit.edu\">breitner@kit.edu</a>&gt;<br>\nHi,</p>\n<p>I believe that that will soon enter your procedural memory. I also just<br>\nrecently switched on this feature and from time to time write Γma, but<br>\nit becomes less often quickly. With this, entering fancy symbols becomes<br>\nquite nice.</p>\n<p>There is still the problem that it relies on unique completions, and<br>\nsome symbols don’t have short unique prefixes, e.g. \\sqsubsete is not a<br>\ngreat win – but then, this symbol has [=, so I just have to get used to<br>\nthat.</p>\n<p>Greetings,<br>\nJoachim<br>\n<a href=\"/user_uploads/14278/_XeKYx81tzgvOYc6UoOUk7F9/signature.asc\">signature.asc</a></p>",
        "id": 294259038,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660913655
    },
    {
        "content": "<p>From: Manuel Eberl &lt;<a href=\"mailto:eberlm@in.tum.de\">eberlm@in.tum.de</a>&gt;<br>\nAnother problem are codes such as \"not\", which are still not replaced at<br>\nall, since \"notation\", \"note\" and so on also exist. I'm afraid I don't<br>\nthink I can get used to this.</p>",
        "id": 294259046,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660913661
    },
    {
        "content": "<p>From: Jasmin Blanchette &lt;<a href=\"mailto:jasmin.blanchette@gmail.com\">jasmin.blanchette@gmail.com</a>&gt;<br>\nHi Makarius,</p>\n<p>I still find myself using Proof General on a daily basis. The main reason for this is that it's much easier to reload ML code in PG than in jEdit. Here's a typical scenario. Suppose I want to debug a failure in \"primcorec\". Then I do the following:</p>\n<ol>\n<li>\n<p>Open a \"Scratch\" theory by starting PG with -l HOL-Cardinals (the base image of BNF).</p>\n</li>\n<li>\n<p>Import \"~~/src/HOL/BNF/BNF_GFP\" and write a small example that reproduces the problem in \"Scratch\".</p>\n</li>\n<li>\n<p>Add debugging commands, fix bugs, etc., in the ML files loaded (directly or indirectly) by \"BNF_GFP\" using some other editor.</p>\n</li>\n<li>\n<p>Unprocess and reprocess \"Scratch\".</p>\n</li>\n<li>\n<p>Repeat steps 3 and 4 dozens of times.</p>\n</li>\n</ol>\n<p>Isabelle/PG was good at reloading exactly those theories that need to be reloaded, without baby sitting. Trying to achieve the same in jEdit requires a lot of clicking and a bit of thinking (to figure which .thy file has the right \"ML_file\" command).</p>\n<p>I understand my use case is not typical for most users, who do not spend their days writing long pieces of ML code, and I can live with PG to do that. Still, it would be nice if jEdit/PIDE, which is otherwise so smart about so many Isabelle specifics, would reach the level of PG on this one point.</p>\n<p>Jasmin</p>",
        "id": 294259077,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660913674
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nHave you actually tried Isabelle2013-1 already?</p>\n<p>It requires some time to study the NEWS and the corresponding <br>\ndocumentatation (the jedit) manual.  And then make a fresh start into this <br>\n4th generation Prover IDE implementation.</p>\n<p>Makarius</p>",
        "id": 294259089,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660913679
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nThere is no big point and it can be simply ignored.  In 2010 I've made <br>\nsome quick attempts to wire up Isabelle/jEdit with this generic jEdit <br>\nplugin and I did not find time yet to make it more serious.  Its main <br>\nfunction at the moment is to provide some outline for section headings.</p>\n<p>Occasional unfinished things are no remaining reason for Proof General, <br>\nespecially since Proof General has nothing like SideKick at all.</p>\n<p>I did make the completion serious in Isabelle2013-1, and it is no longer <br>\nusing SideKick.</p>\n<p>Makarius</p>",
        "id": 294259111,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660913685
    },
    {
        "content": "<p>From: Joachim Breitner &lt;<a href=\"mailto:breitner@kit.edu\">breitner@kit.edu</a>&gt;<br>\nHi,</p>\n<p>for not, I use ~&lt;TAB&gt;. Not consistent with the others, but still fast.</p>\n<p>In any case I believe that jEdit is an editor capable of suiting most<br>\nuses when it comes to abbreviations, navigation etc. It surely takes<br>\ntime to find out how things work, and even more how to change the<br>\nbehavior if it does not work as intended, and what fancy plugins are<br>\navailable.</p>\n<p>Ideally most of the issues that we discussed in this thread about<br>\nsymbols are actually independent from whether we edit Isabelle theories<br>\nor love letters (\\he gives ♡ ;-)), so that we can use upstream resources<br>\nwhen solving them.<br>\nI’m not sure if this is actually the case, though, as I cannot tell<br>\nwhich editing features are provided by jEdit by default, which are<br>\nprovided by jEdit but instrumented and configured using the Isabelle<br>\nplugin, and which are genuine Isabelle plugin features.</p>\n<p>Greetings,<br>\nJoachim<br>\n<a href=\"/user_uploads/14278/xbXOjiKq07srfxIUBnfI8ItH/signature.asc\">signature.asc</a></p>",
        "id": 294259135,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660913698
    },
    {
        "content": "<p>From: bnord &lt;<a href=\"mailto:bnord01@gmail.com\">bnord01@gmail.com</a>&gt;<br>\nMaybe I'm to stupid.</p>\n<p>I find the \"not\" case still unpleasant.</p>\n<ul>\n<li>\n<p>I can't use \"~&lt;TAB&gt;\" because it's a composing key so I have to type <br>\n\"~&lt;space&gt;C-b&lt;TAB&gt;\"</p>\n</li>\n<li>\n<p>\"\\not\" is not unique so have to also press Tab</p>\n</li>\n</ul>\n<p>Benedikt</p>",
        "id": 294259157,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660913704
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nOn Tue, 12 Nov 2013, Joachim Breitner wrote:</p>\n<blockquote>\n<p>I believe that that will soon enter your procedural memory. I also just <br>\nrecently switched on this feature and from time to time write Γma, but <br>\nit becomes less often quickly. With this, entering fancy symbols becomes <br>\nquite nice.</p>\n</blockquote>\n<p>That is sophistication level 1.</p>\n<blockquote>\n<p>There is still the problem that it relies on unique completions, and <br>\nsome symbols don’t have short unique prefixes, e.g. \\sqsubsete is not a <br>\ngreat win – but then, this symbol has [=, so I just have to get used to <br>\nthat.</p>\n</blockquote>\n<p>At sophistication level 2 you can experiment with your own symbol <br>\nabbreviations, by imitating / overriding some entries of <br>\n$ISABELLE_HOME/etc/symbols with your own entries in <br>\n$ISABELLE_HOME_USER/etc/symbols.</p>\n<p>There is an art to make certain groups of symbols non-unique on purpose to <br>\nprovoke a popup, while others are unique for immediate insertion.</p>\n<p>I've played this game at the end of the summer, until I was myself <br>\nsatisfied with 2-3 rounds of refinement.  In the whole history of Isabelle <br>\nand Proof General, I have never been that fast typing certain formal <br>\ntexts.  Even more brevity and immediacity of completion is conceivable, <br>\nbut my next priority is to make context-sensitive completion based on <br>\ninformation by the prover.</p>\n<p>I had some concrete ideas how to approach this delicate problem at the end <br>\nof the summer, but then got stuck with too many GUI reactivity problems. <br>\nYou have seen the last bits of that with the key event loss at extreme <br>\ntyping speed.  (Next time I simply avoid switching GUI focus for <br>\ncompletion; it will only require the usual 2-3 weeks of testing to <br>\nstabilize again.)</p>\n<p>Makarius</p>",
        "id": 294259170,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660913710
    },
    {
        "content": "<p>From: René Neumann &lt;<a href=\"mailto:rene.neumann@in.tum.de\">rene.neumann@in.tum.de</a>&gt;<br>\nYou can define your own abbreviations. F.ex. -, for ¬ :)</p>\n<p>Do this by putting the following into ~/.isabelle/etc/symbols</p>\n<p>\\&lt;not&gt;      code: 0x0000ac  group: logic abbrev: -,<br>\n<a href=\"/user_uploads/14278/E_P30MdVnsX6Rp99VOa-Z3m5/smime.p7s\">smime.p7s</a></p>",
        "id": 294259183,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660913716
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nOn Tue, 12 Nov 2013, Joachim Breitner wrote:</p>\n<blockquote>\n<p>Ideally most of the issues that we discussed in this thread about <br>\nsymbols are actually independent from whether we edit Isabelle theories <br>\nor love letters (\\he gives ♡ ;-)), so that we can use upstream <br>\nresources when solving them.</p>\n</blockquote>\n<p>This is an important observation.  The new Isabelle/jEdit manual describes<br>\nthe situation as follows:</p>\n<p>\\medskip \\paragraph{Input methods.} In principle, Isabelle/jEdit<br>\n   could delegate the problem to produce Isabelle symbols in their<br>\n   Unicode rendering to the underlying operating system and its<br>\n   \\emph{input methods}.  Regular jEdit also provides various ways to<br>\n   work with \\emph{abbreviations} to produce certain non-ASCII<br>\n   characters.  Since none of these standard input methods work<br>\n   satisfactorily for the mathematical characters required for<br>\n   Isabelle, various specific Isabelle/jEdit mechanisms are provided.</p>\n<blockquote>\n<p>I’m not sure if this is actually the case, though, as I cannot tell <br>\nwhich editing features are provided by jEdit by default, which are <br>\nprovided by jEdit but instrumented and configured using the Isabelle <br>\nplugin, and which are genuine Isabelle plugin features.</p>\n</blockquote>\n<p>The new manual should give some impression what is jEdit and what is <br>\nIsabelle/jEdit.  It is the first go on such a manual, though, and many <br>\nfine points might be missing or difficult to understand.</p>\n<p>Makarius</p>",
        "id": 294259198,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660913722
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nLooks like the usual confusion due to platform-specific and/or national <br>\nkeyboard layouts.  E.g. on a German Mac it is really hard to type many <br>\nbasic things.  It routinely requires some re-adjustments in one of five <br>\npossible departments.</p>\n<p>For ¬ in particular, note that it is a plain-old ISO-LATIN-1 character. <br>\nMany keyboard layouts have a relatively direct path to it.</p>\n<p>Makarius</p>",
        "id": 294259212,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660913728
    }
]