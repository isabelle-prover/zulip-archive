[
    {
        "content": "<p>From: Joshua Chen &lt;<a href=\"mailto:josh@joshchen.io\">josh@joshchen.io</a>&gt;<br>\nDear all,</p>\n<p>I have a situation where I need to perform resolution over a goal state<br>\nof the form <code>!!x. P ==&gt; Q ==&gt; R</code>, but consider <code>Q ==&gt; R</code> as the<br>\nconclusion and only lift my rule over P and x. More generally, I need to<br>\ndo resolution, but over non-atomic conclusions.</p>\n<p>The implementation manual describes compose_tac, which lets me choose<br>\nthe number of premises I want but doesn't perform lifting. Deep-diving<br>\ninto the ML leads me to Thm.bicompose_aux, which seems to have a flag<br>\nfor turning lifting on. But this is private to the Thm structure, and<br>\nThm.bicompose has no corresponding flag.</p>\n<p>Is there any way to achieve what I want?</p>\n<p>Thanks and best,<br>\nJosh</p>",
        "id": 294763536,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661200793
    },
    {
        "content": "<p>From: Lawrence Paulson &lt;<a href=\"mailto:lp15@cam.ac.uk\">lp15@cam.ac.uk</a>&gt;<br>\nI’m sorry but this combination isn’t supported.</p>\n<p>Larry Paulson</p>",
        "id": 294763593,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661200805
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nOn 26/09/2019 22:04, Joshua Chen wrote:</p>\n<blockquote>\n<p>I have a situation where I need to perform resolution over a goal state<br>\nof the form <code>!!x. P ==&gt; Q ==&gt; R</code>, but consider <code>Q ==&gt; R</code> as the<br>\nconclusion and only lift my rule over P and x. More generally, I need to<br>\ndo resolution, but over non-atomic conclusions.</p>\n<p>The implementation manual describes compose_tac, which lets me choose<br>\nthe number of premises I want but doesn't perform lifting. Deep-diving<br>\ninto the ML leads me to Thm.bicompose_aux, which seems to have a flag<br>\nfor turning lifting on. But this is private to the Thm structure, and<br>\nThm.bicompose has no corresponding flag.</p>\n</blockquote>\n<p>The \"compose\" family of functions is in some sense a historical<br>\naccident, not to say legacy. The \"implementation\" manual has this<br>\ncryptic warning at the bottom of section 4.2.4:</p>\n<p>These low-level operations are stepping outside the structure imposed by<br>\n  regular rule resolution. Used without understanding of the consequences,<br>\n  they may produce results that cause problems with standard rules and<br>\ntactics<br>\n  later on.</p>\n<p>Note that the canonical way to work with subgoal structure is via<br>\nLogic.protect, Drule.protect etc.</p>\n<blockquote>\n<p>Is there any way to achieve what I want?</p>\n</blockquote>\n<p>Quite often, what you <em>want</em> is in conflict what you really <em>need</em>. In<br>\nsuch a situation it usually helps to reconsider what you are trying to<br>\ndo, by re-emerging from the deep-dive and looking at the big picture<br>\nfrom a distance.</p>\n<p>You did not say anything about that, so I cannot make this advice more<br>\nconcrete.</p>\n<p>Makarius</p>",
        "id": 294763626,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661200818
    }
]