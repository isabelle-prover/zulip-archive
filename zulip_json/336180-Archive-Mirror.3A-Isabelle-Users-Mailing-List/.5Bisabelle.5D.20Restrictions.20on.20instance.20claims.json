[
    {
        "content": "<p>From: \"Dr. Brendan Patrick Mahony\" &lt;<a href=\"mailto:brendan.mahony@dsto.defence.gov.au\">brendan.mahony@dsto.defence.gov.au</a>&gt;<br>\nI decided it might be useful to have a class of non trivial types.</p>\n<p>axclass<br>\n   non_trivial &lt;= type<br>\n   non_trivial: \"(? y. y ~= x)\"</p>\n<p>But it seems I can't handle cross product properly.</p>\n<p>instance<br>\n   \"*\" :: (non_trivial, type) non_trivial<br>\n   apply (intro_classes)<br>\n   apply (auto simp add: trivial_false)<br>\n   done</p>\n<p>works, but then</p>\n<p>instance<br>\n   \"*\" :: (type, non_trivial) non_trivial</p>\n<p>becomes an error.</p>\n<p>Is there anyway around this?<br>\nIf not, is the restriction well-placed in this case?</p>\n<hr>\n<p>Dr Brendan Mahony<br>\nInformation Networks Division                   ph +61 8 8259 6046<br>\nDefence Science and Technology Organisation     fx +61 8 8259 5589<br>\nEdinburgh, South Australia      <a href=\"mailto:Brendan.Mahony@dsto.defence.gov.au\">Brendan.Mahony@dsto.defence.gov.au</a></p>\n<p>Important: This document remains the property of the Australian<br>\nGovernment Department of Defence and is subject to the jurisdiction<br>\nof the Crimes Act section 70. If you have received this document in<br>\nerror, you are requested to contact the sender and delete the document.</p>",
        "id": 293911104,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660747442
    },
    {
        "content": "<p>From: <a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a><br>\nBrendan,</p>\n<p>Allowing both</p>\n<p>instance<br>\n   \"*\" :: (non_trivial, type) non_trivial<br>\ninstance<br>\n   \"*\" :: (type, non_trivial) non_trivial</p>\n<p>would raise a type inference problem: given a product type 'a * 'b for which<br>\nwe know that it must be of class non_trivial, there is no most general way to<br>\nexpress this via the classes of the two type variables: either 'a OR 'b need to<br>\nbe of class non_trivial. Hence Isabelle disallows such \"overlapping\"<br>\ndeclarations. Sorry. (Not sure what Haskell does these days).</p>\n<p>Tobias</p>",
        "id": 293911108,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660747442
    }
]