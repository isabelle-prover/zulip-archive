[
    {
        "content": "<p>From: Aleks Kissinger &lt;<a href=\"mailto:aleks0@gmail.com\">aleks0@gmail.com</a>&gt;<br>\nDoes the Isabelle/HOL library have any built-in facilities for<br>\nsimplification modulo associativity/commutativity rules? If not, is<br>\nthere a fairly simple way to implement this in Isabelle/ML or Eisbach?<br>\nFor example, I'm trying to implement something like \"subst_ac\" here:</p>\n<p>class ac_thing = ab_semigroup_mult +<br>\n  fixes a b c d e :: 'a<br>\n  assumes foo: \"a * b * c = d * e\"</p>\n<p>theorem test:<br>\n  shows \"x * y * c * a * z * b = x * y * z * d * e\"<br>\n  apply(subst_ac foo)<br>\n  apply(rule refl)<br>\ndone</p>\n<p>Bonus points if it backtracks well, i.e. doesn't produce tons of<br>\nredundant matches.</p>",
        "id": 294650828,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661166012
    },
    {
        "content": "<p>From: Florian Haftmann &lt;<a href=\"mailto:florian.haftmann@informatik.tu-muenchen.de\">florian.haftmann@informatik.tu-muenchen.de</a>&gt;<br>\nHi Alex,</p>\n<p>try</p>\n<p>apply (simp add: ac_simps)</p>\n<p>Cheers,<br>\n    Florian<br>\n<a href=\"/user_uploads/14278/zhCBWggm1fXmIsL1O8nddoSB/signature.asc\">signature.asc</a></p>",
        "id": 294650830,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661166015
    },
    {
        "content": "<p>From: Aleks Kissinger &lt;<a href=\"mailto:aleks0@gmail.com\">aleks0@gmail.com</a>&gt;<br>\nI'm sure simp/metis/auto can all handle this simple example with a bit<br>\nof fiddling, although this is already too hard for just \"apply(simp<br>\nadd:ac_simps)\".</p>\n<p>What I'm looking for is a method for single-step substitution modulo<br>\nAC which always succeeds when there is a match.</p>",
        "id": 294650882,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661166042
    },
    {
        "content": "<p>From: Florian Haftmann &lt;<a href=\"mailto:florian.haftmann@informatik.tu-muenchen.de\">florian.haftmann@informatik.tu-muenchen.de</a>&gt;</p>\n<blockquote>\n<p>What I'm looking for is a method for single-step substitution modulo<br>\nAC which always succeeds when there is a match.</p>\n</blockquote>\n<p>Maybe rewrite or subst is the solution.</p>\n<p>Florian</p>\n<blockquote>\n<p>On 27 August 2015 at 11:55, Florian Haftmann<br>\n&lt;<a href=\"mailto:florian.haftmann@informatik.tu-muenchen.de\">florian.haftmann@informatik.tu-muenchen.de</a>&gt; wrote:</p>\n<blockquote>\n<p>Hi Alex,</p>\n<p>try</p>\n<p>apply (simp add: ac_simps)</p>\n<p>Cheers,<br>\n        Florian</p>\n<p>Am 27.08.2015 um 11:44 schrieb Aleks Kissinger:</p>\n<blockquote>\n<p>Does the Isabelle/HOL library have any built-in facilities for<br>\nsimplification modulo associativity/commutativity rules? If not, is<br>\nthere a fairly simple way to implement this in Isabelle/ML or Eisbach?<br>\nFor example, I'm trying to implement something like \"subst_ac\" here:</p>\n<p>class ac_thing = ab_semigroup_mult +<br>\n  fixes a b c d e :: 'a<br>\n  assumes foo: \"a * b * c = d * e\"</p>\n<p>theorem test:<br>\n  shows \"x * y * c * a * z * b = x * y * z * d * e\"<br>\n  apply(subst_ac foo)<br>\n  apply(rule refl)<br>\ndone</p>\n<p>Bonus points if it backtracks well, i.e. doesn't produce tons of<br>\nredundant matches.<br>\n</p>\n</blockquote>\n<p>--</p>\n<p>PGP available:<br>\n<a href=\"http://home.informatik.tu-muenchen.de/haftmann/pgp/florian_haftmann_at_informatik_tu_muenchen_de\">http://home.informatik.tu-muenchen.de/haftmann/pgp/florian_haftmann_at_informatik_tu_muenchen_de</a></p>\n<p><a href=\"/user_uploads/14278/SnlZ4x3zYKW9wyH_8gYQg8Pk/signature.asc\">signature.asc</a></p>\n</blockquote>\n</blockquote>",
        "id": 294650894,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661166046
    },
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\nI once implemented this <a href=\"http://www21.in.tum.de/~nipkow/pubs/scp89.html\">http://www21.in.tum.de/~nipkow/pubs/scp89.html</a>, but the <br>\ncode was superseded and AC-rewriting was dropped. Still, you should be able to <br>\nrecreate it or at least reuse the ideas.</p>\n<p>For an overview of work in this area see <a href=\"http://arxiv.org/abs/1106.4448\">http://arxiv.org/abs/1106.4448</a></p>\n<p>Tobias<br>\n<a href=\"/user_uploads/14278/suit-egBaK1sGM5-v0-aUxEH/smime.p7s\">smime.p7s</a></p>",
        "id": 294654508,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661167463
    }
]