[
    {
        "content": "<p>From: Manuel Eberl &lt;<a href=\"mailto:eberlm@in.tum.de\">eberlm@in.tum.de</a>&gt;<br>\nHallo,</p>\n<p>I am currently working on a tactic that, at one point, needs to convert<br>\nnat numerals (like \"3\") to the corresponding Suc notation (like \"Suc<br>\n(Suc (Suc 0))\").</p>\n<p>My current approach is a conversion using Goal.prove and the simplifier:</p>\n<p>fun eval_nat_numeral_conv t =<br>\n  let val ctxt = @{context}<br>\n      val i = case HOLogic.dest_number t of<br>\n                (Type (\"Nat.nat\", []), i) =&gt; i<br>\n              | _ =&gt; raise TERM (\"eval_nat_numeral_conv\", [t])<br>\n      val t' = HOLogic.mk_nat i<br>\n      val prop = (t,t') |&gt; HOLogic.mk_eq |&gt; HOLogic.mk_Trueprop<br>\n      val conv = CONVERSION (Simplifier.full_rewrite ctxt)<br>\n  in Goal.prove ctxt [] [] prop<br>\n       (K (ALLGOALS (conv THEN' rtac @{thm TrueI})))<br>\n  end;</p>\n<p>Seeing as the goals have a very fixed form, (i.e. \"3 = Suc (Suc (Suc<br>\n0))\"), I think this could work. Still, I wonder whether there is a<br>\nbetter way to do this.</p>\n<p>Cheers,<br>\nManuel</p>",
        "id": 294329831,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660929857
    },
    {
        "content": "<p>From: Lars Hupel &lt;<a href=\"mailto:hupel@in.tum.de\">hupel@in.tum.de</a>&gt;<br>\nTry unfolding with these the theorems 'eval_nat_numeral' and<br>\n'BitM.simps'. Example:</p>\n<p>schematic_lemma \"(5 :: nat) = ?x\"<br>\n  unfolding eval_nat_numeral BitM.simps</p>\n<p>For simple unfolding, you can use 'Local_Defs.unfold_tac'.</p>\n<p>Cheers<br>\nLars</p>",
        "id": 294329847,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660929863
    },
    {
        "content": "<p>From: Lars Noschinski &lt;<a href=\"mailto:noschinl@in.tum.de\">noschinl@in.tum.de</a>&gt;<br>\nEither use a fixed setup for the simplifier or build your own<br>\nspecialized rewriter using Conv.rewr_conv.</p>",
        "id": 294329861,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660929869
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nOn Wed, 18 Mar 2015, Manuel Eberl wrote:</p>\n<blockquote>\n<p>My current approach is a conversion using Goal.prove and the simplifier:</p>\n</blockquote>\n<p>Just a few notes on proper use of Isabelle/ML:</p>\n<blockquote>\n<p>fun eval_nat_numeral_conv t =<br>\n let val ctxt = @{context}</p>\n</blockquote>\n<p>Use of the the compile-time @{context} is strange.  You need to pass a <br>\nproper run-time context to whatever tool you write, using what the system <br>\nhands you over as a context elsewhere.</p>\n<blockquote>\n<p>val i = case HOLogic.dest_number t of<br>\n               (Type (\"Nat.nat\", []), i) =&gt; i</p>\n</blockquote>\n<p>Formal names should never be hardwired as ML string constants.  Use <br>\n@{type_name nat} above, or better @{typ nat} for the whole type <br>\nexpression.</p>\n<p>Makarius</p>",
        "id": 294330105,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660929955
    },
    {
        "content": "<p>From: Manuel Eberl &lt;<a href=\"mailto:eberlm@in.tum.de\">eberlm@in.tum.de</a>&gt;<br>\nThanks for the feedback.</p>",
        "id": 294330331,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660930023
    },
    {
        "content": "<p>From: Larry Paulson &lt;<a href=\"mailto:lp15@cam.ac.uk\">lp15@cam.ac.uk</a>&gt;<br>\nYou may be able to write a simplification procedure for this purpose, taking as a starting point one of the ones in directory ~~/src/Provers/Arith/, which aim to cancel common terms or factors in formulas. But they are very tricky to code, test and debug.</p>\n<p>Larry Paulson</p>",
        "id": 294330355,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660930029
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nIt is a strict rule -- otherwise things won't work.  Tools need to be run <br>\nin the run-time context.</p>\n<p>Just as a matter of survival, it is important to develop a habit to do <br>\nthings the canonical way, by looking closely how existing (good) tools do <br>\nit.</p>\n<p>Makarius</p>",
        "id": 294330374,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660930035
    }
]