[
    {
        "content": "<p>From: Andreas Lochbihler &lt;<a href=\"mailto:andreas.lochbihler@inf.ethz.ch\">andreas.lochbihler@inf.ethz.ch</a>&gt;<br>\nDear syntax experts,</p>\n<p>I am trying to understand what role nonterminal play during pretty printing.<br>\nI believe that I have a sufficient understanding of their role during parsing.<br>\nFor example, suppose there is a new nonterminal foo and a syntax translation into that <br>\nnonterminal.</p>\n<p>nonterminal foo</p>\n<p>consts aaaa :: \"'a\"<br>\nsyntax \"_aaaa\" :: \"foo\" (\"###\")<br>\ntranslations \"_aaaa\" =&gt; \"CONST aaaa\"</p>\n<p>Hence, I can write ### instead of aaaa in all contexts foo. For example,</p>\n<p>consts bar :: \"'a =&gt; 'b\"<br>\nsyntax \"_bar\" :: \"foo =&gt; logic\" (\"~ _ ~\")<br>\ntranslations \"_bar x\" =&gt; \"CONST bar x\"</p>\n<p>term \"~ ### ~\" (* succeeds as expected *)<br>\nterm \"bar ###\" (* fails as expected *)<br>\nterm \"###\"     (* fails as expected *)</p>\n<p>Now, I'd like to have the behaviour for pretty-printing. That is, if bar is applied to <br>\nsome term that can be printed in foo, then it should be printed as \"~ ... ~\" where \"...\" <br>\nis bar's argument printed as in foo. Otherwise, it should be printed as a plain function <br>\napplication.</p>\n<p>For example:</p>\n<p>term \"bar aaaa\" should print as \"~ ### ~\"<br>\nterm \"bar 5\"    should print as \"bar 5\"</p>\n<p>I tried various forms of translations such as the following, but I could not get this to <br>\nwork. Either, term \"bar 5\" also prints as \"~ 5 ~\", or the translation itself has syntax <br>\nerrors.</p>\n<p>translations \"_bar x\" &lt;= \"CONST bar x\"<br>\ntranslations \"_bar x\" &lt;= (foo) \"CONST bar x\"<br>\ntranslations (foo) \"_bar x\" &lt;= \"CONST bar x\"</p>\n<p>Is there any way to express in a translation rule that it should only apply if one can <br>\nprint some argument according to the grammar of a given non-terminal? Or can this be done <br>\nonly with a print_translation (and if so, how?)</p>\n<p>Best,<br>\nAndreas</p>",
        "id": 294306445,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660924447
    },
    {
        "content": "<p>From: Andreas Lochbihler &lt;<a href=\"mailto:andreas.lochbihler@inf.ethz.ch\">andreas.lochbihler@inf.ethz.ch</a>&gt;<br>\nHi Makarius,</p>\n<p>Thanks for the answer. The question arose as part of my answer in the following thread on <br>\nstack exchange:</p>\n<p><a href=\"http://stackoverflow.com/questions/26011774/infix-relation-transformer-syntax-in-isabelle\">http://stackoverflow.com/questions/26011774/infix-relation-transformer-syntax-in-isabelle</a></p>\n<p>My answer there works only half way, because I was not able to express that a syntax <br>\ntranslation rule should be applied during pretty-printing only if some argument on the <br>\nleft-hand side can be printed according to a (new) non-terminal \"rel\". Instead, the <br>\ntranslation is always applied even if there are only productions to print the argument as <br>\nlogic, but in particular not as \"rel\". As a side effect, the pretty-printed output cannot <br>\nbe parsed back any more.</p>\n<p>Andreas</p>",
        "id": 294309473,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660925386
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nOn Thu, 25 Sep 2014, Andreas Lochbihler wrote:</p>\n<blockquote>\n<p>I am trying to understand what role nonterminal play during pretty printing.</p>\n</blockquote>\n<p>They play hardly any role at all.  Parse trees are untyped.  There are <br>\nmerely some special tricks for the syntax categories \"prop\" vs. \"logic\" <br>\nvs. \"type\".</p>\n<blockquote>\n<p>Is there any way to express in a translation rule that it should only apply <br>\nif one can print some argument according to the grammar of a given <br>\nnon-terminal?</p>\n</blockquote>\n<p>No.  AST translations neither know about types of sub-expressions nor <br>\nabout mixfix annotations.</p>\n<blockquote>\n<p>Or can this be done only with a print_translation (and if so, how?)</p>\n</blockquote>\n<p>A print_translation in ML merely provides a bit more flexibility in the <br>\ntranslation process, but refers mostly to the same AST structure.  The <br>\nvariant typed_print_translation provides a tiny bit more information about <br>\noriginal type information.  In neither case is there any knowledge about <br>\nthe syntactic context nor mixfix tables for pretty printing.</p>\n<p>With the information given here, the above attempts looks like a dead end. <br>\nCan you say more concretely what the actual application is?</p>\n<p>There might be a chance to do it with the newer \"uncheck\" mechanism of the <br>\ninner syntax phases.  It allows to operate on original sub-term structure <br>\nsystematically, taking particular knowledge of the syntax of your own <br>\napplication into account.</p>\n<p>Makarius</p>\n<hr>\n<p><a href=\"http://stop-ttip.org\">http://stop-ttip.org</a>  738,765 people so far</p>\n<hr>",
        "id": 294318499,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660926214
    }
]