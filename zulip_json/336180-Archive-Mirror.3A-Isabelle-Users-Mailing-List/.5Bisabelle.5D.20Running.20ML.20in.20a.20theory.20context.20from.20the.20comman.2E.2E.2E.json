[
    {
        "content": "<p>From: Lars Hupel &lt;<a href=\"mailto:hupel@in.tum.de\">hupel@in.tum.de</a>&gt;<br>\nDear list,</p>\n<p>with the help of Makarius and Joe Hurd, OpenTheory can now be fully<br>\nloaded into Isabelle/Pure:</p>\n<p><a href=\"https://github.com/isabelle-prover/opentheory-component\">https://github.com/isabelle-prover/opentheory-component</a></p>\n<p>Inside an interactive environment, e.g. Isabelle/jEdit, it is possible<br>\nto call the tool via \"Open_Theory.main\".</p>\n<p>I am trying to figure out if this can also be done from the command<br>\nline, as an Isabelle tool. There's already precedent, e.g. the various<br>\n\"tptp\" tools from Jasmin.</p>\n<p>In \"tptp_sledgehammer\", for example, a theory file is constructed that<br>\nimports some root theory and contains an ML snippet. It is then called<br>\nvia \"isabelle process\". This of course works, but I was wondering<br>\nwhether there's a more direct way, e.g. with \"isabelle process -e\". But<br>\nI'm not sure what the correct incantation is to make it evaluate the ML<br>\nsnippet in the context of a theory, so that the \"Open_Theory\" structure<br>\nis available.</p>\n<p>Cheers<br>\nLars</p>",
        "id": 294733282,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661188849
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nThe following is derived from the definition of 'ML_command':</p>\n<p>fun eval_in_theory thy s =<br>\n    ML_Context.eval_source_in (SOME (Proof_Context.init_global thy))<br>\n      ML_Compiler.flags (Input.string s);</p>\n<p>Here is a complete example (with the included Scratch.thy):</p>\n<p>isabelle process -l Pure -T \"~/Scratch\" -e \"fun eval_in_theory thy s =<br>\nML_Context.eval_source_in (SOME (Proof_Context.init_global thy))<br>\nML_Compiler.flags (Input.string s)\" -e 'eval_in_theory<br>\n(Thy_Info.get_theory \"Draft.Scratch\") \"test (serial_string ())\"'</p>\n<p>Maybe I should provide a function line eval_in_theory already in Pure.<br>\nAre there further important applications?</p>\n<p>Makarius<br>\n<a href=\"/user_uploads/14278/1zWDrQR5BvAcJTJxB4BpSXZY/Scratch.thy\">Scratch.thy</a></p>",
        "id": 294733310,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661188863
    },
    {
        "content": "<p>From: Lars Hupel &lt;<a href=\"mailto:hupel@in.tum.de\">hupel@in.tum.de</a>&gt;</p>\n<blockquote>\n<p>Here is a complete example (with the included Scratch.thy):</p>\n<p>isabelle process -l Pure -T \"~/Scratch\" -e \"fun eval_in_theory thy s =<br>\nML_Context.eval_source_in (SOME (Proof_Context.init_global thy))<br>\nML_Compiler.flags (Input.string s)\" -e 'eval_in_theory<br>\n(Thy_Info.get_theory \"Draft.Scratch\") \"test (serial_string ())\"'</p>\n</blockquote>\n<p>Thanks, that should work.</p>\n<blockquote>\n<p>Maybe I should provide a function line eval_in_theory already in Pure.<br>\nAre there further important applications?</p>\n</blockquote>\n<p>I suppose all of the \"tptp\" tools, they use the same trick with a<br>\ntemporary file. But Jasmin could say for sure.</p>",
        "id": 294733318,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661188867
    },
    {
        "content": "<p>From: Lars Hupel &lt;<a href=\"mailto:hupel@in.tum.de\">hupel@in.tum.de</a>&gt;</p>\n<blockquote>\n<p><a href=\"https://github.com/isabelle-prover/opentheory-component\">https://github.com/isabelle-prover/opentheory-component</a></p>\n</blockquote>\n<p>This is now available as a stand-alone Isabelle component. The<br>\nrepository above has installation instructions.</p>\n<p>Proof that it works:</p>\n<p>$ isabelle-dev opentheory<br>\nval eval_in_theory = fn: string -&gt; string -&gt; unit<br>\nopentheory: no command specified</p>\n<p>usage: opentheory [global options] command [command options] INPUT ...<br>\nwhere the available commands are:<br>\n  opentheory cleanup ..... clean up packages staged for installation<br>\n  opentheory export ...... export an installed package<br>\n  opentheory help ........ display help on all available commands<br>\n  opentheory info ........ extract information from packages and files<br>\n  opentheory init ........ initialize a new package repo<br>\n  opentheory install ..... install a package from a theory file or repo<br>\n  opentheory list ........ list installed packages<br>\n  opentheory uninstall ... uninstall packages<br>\n  opentheory update ...... update repo package lists<br>\n  opentheory upgrade ..... upgrade packages with later versions on a repo<br>\n  opentheory upload ...... upload installed packages to a repo<br>\nDisplaying global options:<br>\n  -d, --root-dir DIR ... set package repo directory<br>\n  --repo REPO .......... use given remote package repo<br>\n  --show-types ......... annotate every term variable with its type<br>\n  -- ................... no more options<br>\n  -?, -h, --help ....... display option information and exit<br>\n  -v, --version ........ display version information</p>\n<p>Exception- ERROR \"exception Exit ? raised (line 15 of<br>\n\\\"~/work/opentheory/opentheory-component/Open_Theory.thy\\\")\" raised</p>\n<p>There's no use case yet, this is just a proof of concept.</p>",
        "id": 294733346,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661188880
    }
]