[
    {
        "content": "<p>From: Joachim Breitner &lt;<a href=\"mailto:breitner@kit.edu\">breitner@kit.edu</a>&gt;<br>\nDear List,</p>\n<p>I am in the process of overhauling the Isabelle tutorial¹ at the<br>\nUniversity of Karlsruhe. Since we already have a somewhat nice system<br>\nfor submitting programming solutions (the Praktomat²) I am considering<br>\nto use that for the submitted Isabelle solutions as well. For just<br>\nsubmitting and commenting the files this would work well.</p>\n<p>The next step would be to automatically check the files at submission,<br>\ne.g. run them through isabelle-process or isabelle build. But is that<br>\nsafe? I believe not, as inside ML {* ... *}, arbitrary missiles could be<br>\nlaunched.</p>\n<p>Is there an option that disables all such unsafe features, that would<br>\nallow running a theory from an untrusted source?</p>\n<p>(I’m ignoring resources issues here; these could be enforced by other<br>\nmeans.)</p>\n<p>Thanks,<br>\nJoachim</p>\n<p>¹ <a href=\"http://pp.ipd.kit.edu/lehre/SS2013/tba/\">http://pp.ipd.kit.edu/lehre/SS2013/tba/</a><br>\n¹ <a href=\"http://pp.ipd.kit.edu/project.php?id=34\">http://pp.ipd.kit.edu/project.php?id=34</a> and <br>\n<a href=\"https://github.com/danielkleinert/Praktomat\">https://github.com/danielkleinert/Praktomat</a><br>\n<a href=\"/user_uploads/14278/P2cgUXPTbH4obHKOVbGSUqYj/signature.asc\">signature.asc</a></p>",
        "id": 294233482,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660903646
    },
    {
        "content": "<p>From: Lawrence Paulson &lt;<a href=\"mailto:lp15@cam.ac.uk\">lp15@cam.ac.uk</a>&gt;<br>\nGiven the combination of an LCF architecture and ML's static scoping rules, I don't see what harm could be done by the insertion of arbitrary ML code. In any event, anybody who can master Isabelle's APIs sufficiently to do anything interesting by inserting ML code deserves top marks for your course :-)</p>\n<p>Larry Paulson</p>",
        "id": 294233489,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660903652
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nThat's a cource where top marks are very easy to get:</p>\n<p>ML {* Isabelle_System.bash \"echo 666\" *}</p>\n<p>It is left as an exercise to put something really dangerous into the above <br>\nshell script.</p>\n<p>To tighten up the system a little bit, there is isabelle-process option -S <br>\nto disallow such gross insecurities.</p>\n<p>If one wanted to take that issue very seriously, one could sandbox the ML <br>\ncompiler invocation that is embedded into Isabelle/Isar.  The <br>\ninfrastructure is in principle all there, but we don't have concrete <br>\napplications for that, and nobody paying large sums to make it work and <br>\nkeep it working over time.</p>\n<p>Makarius</p>",
        "id": 294233499,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660903659
    },
    {
        "content": "<p>From: Lawrence Paulson &lt;<a href=\"mailto:lp15@cam.ac.uk\">lp15@cam.ac.uk</a>&gt;<br>\nIt depends on the definition of \"harm\". The student may be able to erase all of the professor's files, and that's certainly bad. If your students are really that crazy, you could run the assessments on a dedicated machine. But it would take a pretty clever series of UNIX calls to trick the system into thinking you had finished a proof.</p>\n<p>Of course, for a tutorial course, it would be okay to prohibit access to ML altogether. That shouldn't be difficult to achieve.</p>\n<p>Larry Paulson</p>",
        "id": 294233516,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660903671
    },
    {
        "content": "<p>From: Peter Lammich &lt;<a href=\"mailto:lammich@in.tum.de\">lammich@in.tum.de</a>&gt;<br>\nOn Di, 2013-02-12 at 11:42 +0000, Lawrence Paulson wrote:</p>\n<blockquote>\n<p>Given the combination of an LCF architecture and ML's static scoping rules, I don't see what harm could be done by the insertion of arbitrary ML code.</p>\n</blockquote>\n<p>Well, you have acceess to the PolyML standard libraries, like File-IO,<br>\netc., which you can abuse for sending SPAM, manipulating/reading out<br>\nother student's solutions, just mess up the config, etc ...</p>",
        "id": 294233519,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660903677
    },
    {
        "content": "<p>From: Tjark Weber &lt;<a href=\"mailto:webertj@in.tum.de\">webertj@in.tum.de</a>&gt;<br>\n\"You take the blue pill - the story ends, you wake up in your bed and<br>\nbelieve whatever you want to believe. You take the red pill - you stay<br>\nin Wonderland, and I show you how deep the rabbit hole goes.\"</p>\n<p>Arbitrary ML code can hijack any communication between the LCF kernel<br>\nand the user, thus creating a perfect illusion of unsoundness even when<br>\nthe kernel itself is unaffected.</p>\n<p>Perhaps more interestingly, arbitrary ML code can spawn external<br>\nprocesses, which can potentially modify the system state (including the<br>\nmemory of the running Isabelle process) in arbitrary ways.</p>\n<p>Anyway, I am guessing that Joachim is more concerned about features<br>\nlike unrestricted file system or network access than about soundness of<br>\nIsabelle.</p>\n<p>Best regards,<br>\nTjark</p>",
        "id": 294233561,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660903683
    },
    {
        "content": "<p>From: Joachim Breitner &lt;<a href=\"mailto:breitner@kit.edu\">breitner@kit.edu</a>&gt;<br>\nHi,</p>\n<p>exactly. Should -S be sufficient for that?</p>\n<p>Thanks,<br>\nJoachim<br>\n<a href=\"/user_uploads/14278/pec_XrXWxhrxPw6eBuBkn9TA/signature.asc\">signature.asc</a></p>",
        "id": 294233572,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660903690
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nTo some extent, yes.  It makes doing bad things harder.</p>\n<p>That option was originally motivated by semi-public prover webservices, <br>\nnotably the Proofweb project from Nijmegen, around 2006/2007.  What they <br>\nalso did of course, was the usual sandboxing of the Unix process on the <br>\nserver side.</p>\n<p>It is in principle possible to make this all much more secure, and <br>\nrestrict ML inside Isar to a precisely specified subset of the language <br>\nand its libraries.</p>\n<p>Makarius</p>",
        "id": 294233584,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660903695
    },
    {
        "content": "<p>From: Lawrence Paulson &lt;<a href=\"mailto:lp15@cam.ac.uk\">lp15@cam.ac.uk</a>&gt;<br>\nIsn't this what virtual machines are for?</p>\n<p>But a student who injected malicious code in such circumstances would be lucky to avoid expulsion, and I can't see it happening here.</p>\n<p>Larry Paulson</p>",
        "id": 294233591,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660903701
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nThe Nijmegen guys also had a course with assignments and solutions managed <br>\nby the web server.</p>\n<p>What they did back then was plain Linux chroot.  Current Linux variants <br>\nprobably offer a bit more, similar to classic BSD \"jail\". Variants of <br>\nvirtualization are also possible, of course.  I think that certain \"cloud <br>\ncomputing\" infrastructure works like that.</p>\n<p>The question of \"LCF prover as secure web service\" has many aspects to be <br>\nexplored more seriously.  One could easily make a research project out of <br>\nthat, with everybody still speaking about clouds until the next buzzword <br>\nis emerging.</p>\n<p>Makarius</p>",
        "id": 294233606,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660903708
    },
    {
        "content": "<p>From: Joachim Breitner &lt;<a href=\"mailto:breitner@kit.edu\">breitner@kit.edu</a>&gt;<br>\nHi,</p>\n<p>thanks. Next question: </p>\n<p>/opt/isabelle/Isabelle2013-RC2/bin/isabelle-process -S -r -I HOL &lt; Foo.thy</p>\n<p>will tell me about wrong proofs (*** Failed to finish proof), but not about </p>\n<ol>\n<li>uses of sorry</li>\n<li>unexpected end of the file.</li>\n</ol>\n<p>For the first one it seems I have to somehow disable the quick_and_dirty mode, but passing<br>\n\"-e 'quick_and_dirty := false'\" did not have the desired effect.</p>\n<p>Any suggestions on how to proceed here?</p>\n<p>Greetings,<br>\nJoachim<br>\n<a href=\"/user_uploads/14278/XnrZUGs2wjiNsPqsc4nHm53n/signature.asc\">signature.asc</a></p>",
        "id": 294233618,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660903714
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nPiping directly into the Isar toplevel gives indeed very little static <br>\nconsistency checking.  You would have to emulate Proof General in <br>\nimitating some of that, but it never really managed &gt; 10 years.</p>\n<p>It is better to work in batch mode, by telling the raw ML toplevel to <br>\ninvoke use_thys like this:</p>\n<p>isabelle-process -S -r -q -e 'use_thys [\"~/tmp/A\"];'</p>\n<p>Batch mode then also says something like this by default:</p>\n<p>Loading theory \"A\"<br>\n*** Cheating requires quick_and_dirty mode!<br>\n*** At command \"sorry\" (line 4 of \"/Volumes/Macintosh_HD/Users/makarius/tmp/A.thy\")</p>\n<p>Makarius</p>",
        "id": 294233627,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660903720
    },
    {
        "content": "<p>From: \"C. Diekmann\" &lt;<a href=\"mailto:diekmann@in.tum.de\">diekmann@in.tum.de</a>&gt;<br>\nDoes export_code still allow directory traversal and arbitrary file overwriting?</p>",
        "id": 294233666,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660903745
    },
    {
        "content": "<p>From: Joachim Breitner &lt;<a href=\"mailto:breitner@kit.edu\">breitner@kit.edu</a>&gt;<br>\nHi,</p>\n<p>indeed it does; this is one problem.</p>\n<p>Maybe export_code should be disabled with -S on, or at least export_code<br>\nwith an file argument different from \"-\"...</p>\n<p>From browsing the code (which I’m unfortunately not fluent in) it seems<br>\nthat such safeguards could be added centrally<br>\nin ./src/Pure/General/file.ML, e.g. disabling open_output completely if<br>\n\"-S\" (or a stronger flag, say \"-S -S\") is on.</p>\n<p>Another, lesser, problem is that the import statement can access<br>\narbitrary .thy files if the path is known.</p>\n<p>Greetings,<br>\nJoachim<br>\n<a href=\"/user_uploads/14278/gfIqODw8L6KfnzCdsEEuRSIQ/signature.asc\">signature.asc</a></p>",
        "id": 294233704,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660903769
    },
    {
        "content": "<p>From: Joachim Breitner &lt;<a href=\"mailto:breitner@kit.edu\">breitner@kit.edu</a>&gt;<br>\nDear Makarius,</p>\n<p>thanks for the hint. Now it does detect sorry and partial theories well,<br>\nand this invocation is also easier for out system as the filename can be<br>\npassed in a parameter.</p>\n<p>I noticed that -S had no effect any more (due to how the MLTEXT variable<br>\nin isabelle-process is assembled), but passing <br>\n        -e 'Secure.set_secure (); use_thys [\"/tmp/Deduction\"];'<br>\nworks.</p>\n<p>Greetings,<br>\nJoachim<br>\n<a href=\"/user_uploads/14278/MhWcgMhuwpo6_fY3zmtE11_S/signature.asc\">signature.asc</a></p>",
        "id": 294233717,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660903776
    },
    {
        "content": "<p>From: Joachim Breitner &lt;<a href=\"mailto:breitner@kit.edu\">breitner@kit.edu</a>&gt;<br>\nDear ML- and Isabelle-programmers,</p>\n<p>would this be a good idea:</p>\n<p>$ diff -u file.ML-orig file.ML<br>\n--- file.ML-orig    2013-02-13 10:35:41.886000990 +0100<br>\n+++ file.ML 2013-02-13 10:43:58.573982673 +0100<br>\n@@ -104,7 +104,9 @@</p>\n<p>fun open_dir f = with_file OS.FileSys.openDir OS.FileSys.closeDir f o platform_path;<br>\n fun open_input f = with_file TextIO.openIn TextIO.closeIn f o platform_path;<br>\n-fun open_output f = with_file TextIO.openOut TextIO.closeOut f o platform_path;<br>\n+fun open_output f path = <br>\n+   (Secure.deny_secure \"Cannot open file for writing in secure mode.\";<br>\n+   with_file TextIO.openOut TextIO.closeOut f (platform_path path));<br>\n fun open_append f = with_file TextIO.openAppend TextIO.closeOut f o platform_path;</p>\n<p>end;</p>\n<p>It seems to work here.</p>\n<p>For some reason I don’t see the error message, but rather</p>\n<p>Exception trace for exception - ERROR raised in library.ML line 264</p>\n<p>End of trace</p>\n<p>Exception- Interrupt raised</p>\n<p>while using ML {* .. *}, which also causes a call to deny_secure, gives a nice error message.</p>\n<p>*** Cannot evaluate ML source in secure mode<br>\n        *** At command \"ML\" (line 3 of \"/tmp/Deduction.thy\")<br>\n        Exception- TOPLEVEL_ERROR raised</p>\n<p>Would it be possible to include this or an equivalent feature in a<br>\nfuture Isabelle release, so that there is no risk of forgetting to patch<br>\nIsabelle when we upgrade the submission server to a new release?</p>\n<p>Thanks,<br>\nJoachim<br>\n<a href=\"/user_uploads/14278/zZp-Bkn3oLg6VWa3vqJPI78W/signature.asc\">signature.asc</a></p>",
        "id": 294233727,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660903782
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nThis is where Unix chroot (or better) comes into play.  It is futile to <br>\ntry isolating file system access of the process in the implementation.</p>\n<p>For the funny Secure.set_secure mode, I merely pinned down relatively <br>\nwell-defined things that can extend the code base dynamically.</p>\n<p>Makarius</p>",
        "id": 294233738,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660903787
    },
    {
        "content": "<p>From: Florian Haftmann &lt;<a href=\"mailto:florian.haftmann@informatik.tu-muenchen.de\">florian.haftmann@informatik.tu-muenchen.de</a>&gt;</p>\n<blockquote>\n<p>This is where Unix chroot (or better) comes into play.</p>\n</blockquote>\n<p>What seems reasonably robust to me is:</p>\n<ul>\n<li>\n<p>Setup one virtualized reference machine</p>\n<ul>\n<li>no access to net from the machine itself</li>\n<li>\n<p>read-only access to one dedicated directory on your host system<br>\nwhere the theories to be checked are placed</p>\n</li>\n<li>\n<p>Isabelle2013</p>\n</li>\n<li>sshd running to issue batch jobs there etc.</li>\n</ul>\n</li>\n</ul>\n<p>Safe this machine such that you can restore it on problems of any kind.<br>\n Then use it!</p>\n<p>Cheers,<br>\n    Florian<br>\n<a href=\"/user_uploads/14278/ZyHtFPNSdFm4i1Qw-FhsyWvb/signature.asc\">signature.asc</a></p>",
        "id": 294233826,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660903806
    }
]