[
    {
        "content": "<p>From: Florian Haftmann &lt;<a href=\"mailto:florian.haftmann@informatik.tu-muenchen.de\">florian.haftmann@informatik.tu-muenchen.de</a>&gt;<br>\nHi all,</p>\n<p>since Isabelle2011 there is the possibility to generate Scala code from<br>\nHOL theories.  Some minor problems can be circumvented by a suitable<br>\npatch and will disappear in the next release.</p>\n<p>Apart from that, is there any further feedback (positive or negative) on<br>\ncode generation for Scala?  I would like to announce it on the Scala<br>\nmailing list after the next release, but for this I need some evidence<br>\nthat it is really working.</p>\n<p>Thanks for any feedback,<br>\n    Florian<br>\n<a href=\"/user_uploads/14278/bF-5xt90f67wjgKspJNqd-Gw/signature.asc\">signature.asc</a></p>",
        "id": 294142465,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660846326
    },
    {
        "content": "<p>From: Thomas Genet &lt;<a href=\"mailto:Thomas.Genet@irisa.fr\">Thomas.Genet@irisa.fr</a>&gt;<br>\nDear Florian,</p>\n<p>as I already mentioned to you, we will use Isabelle2011 and Scala export <br>\nfor teaching on the second semester here at Rennes 1 University at <br>\nmaster level. We already experimented a bit with the scala export in <br>\norder to integrate formally developed components (in Isabelle) into Java <br>\nsoftware. For the moment everything is OK... but it is true that we will <br>\nuse only simple things: integers, strings, lists, etc... no exotic <br>\nIsabelle theory :-)</p>\n<p>Best regards,</p>\n<p>Thomas</p>",
        "id": 294143171,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660846580
    },
    {
        "content": "<p>From: René Thiemann &lt;<a href=\"mailto:rene.thiemann@uibk.ac.at\">rene.thiemann@uibk.ac.at</a>&gt;<br>\nDear Florian,</p>\n<p>concerning our formalization IsaFoR/CeTA we can give the following picture:</p>\n<ul>\n<li>the generated code has quite some size (Haskell: 600k source, Scala: 1200k source)</li>\n<li>compilation for both Haskell and Scala without problems</li>\n<li>running the programs on example library runs smoothly with Haskell, but there are problems with Scala:<ul>\n<li>Haskell binary can run all examples without problems</li>\n<li>almost all examples crash with Scala binary with Stack-overflow  </li>\n<li>after setting Stack-size to 2000m, roughly 1/5 of examples still crashes</li>\n<li>rewriting the corresponding function to tail-recursive variant did not help much</li>\n<li>whole benchmark requires 2s with Haskell binary, 40s with Scala binary</li>\n</ul>\n</li>\n</ul>\n<p>(as a side remark: we have similar problems with OCaml-code where large<br>\n strings have to be converted from OCaml-strings to character lists)</p>\n<p>Cheers,<br>\nChris and René</p>",
        "id": 294143784,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660846782
    },
    {
        "content": "<p>From: Florian Haftmann &lt;<a href=\"mailto:florian.haftmann@informatik.tu-muenchen.de\">florian.haftmann@informatik.tu-muenchen.de</a>&gt;<br>\nHi René,</p>\n<p>thanks for those interesting figures.</p>\n<p>I would guess that the scalability matter indeed has to do with<br>\npacking/unpacking strings to character lists, which is a no-op in<br>\nHaskell.  The factor 2 in code size seems plausible.</p>\n<p>Have you ever tried to generate the whole application without the<br>\nexplicit parsing?</p>\n<p>Cheers,<br>\n    Florian<br>\n<a href=\"/user_uploads/14278/gv4ILBurxCo0_7UX4nSCGDR3/signature.asc\">signature.asc</a></p>",
        "id": 294143914,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660846813
    }
]