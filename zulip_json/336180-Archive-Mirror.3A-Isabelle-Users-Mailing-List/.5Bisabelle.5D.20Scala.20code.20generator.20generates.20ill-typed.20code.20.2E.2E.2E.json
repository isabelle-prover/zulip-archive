[
    {
        "content": "<p>From: Christoph LANGE &lt;<a href=\"mailto:math.semantic.web@gmail.com\">math.semantic.web@gmail.com</a>&gt;<br>\nDear Isabelle developers,</p>\n<p>I would like to report a bug in Scala code generation.</p>\n<p>(BTW, is the Scala code generator actively maintained?  That would be<br>\ngreat, because our main selling point in using Scala as an output target<br>\nis to demonstrate that such code can easily be integrated with<br>\nbusiness-ready software.  This is work in the context of formalising<br>\nauctions, see<br>\n<a href=\"http://www.cs.bham.ac.uk/research/projects/formare/code/auction-theory/\">http://www.cs.bham.ac.uk/research/projects/formare/code/auction-theory/</a>,<br>\nso we need to convince people who may never heard of SML, OCaml and<br>\nHaskell, but have heard of Java.)</p>\n<p>Please find attached:</p>\n<ul>\n<li>\n<p>RealMinusBug.thy: a minimal example in which I tracked down the bug.<br>\n Please don't take the filename seriously; it's just that initially I<br>\nthought the bug was related to real numbers.</p>\n</li>\n<li>\n<p>RealMinusBug.scala: just to be sure: the Scala code Isabelle 2013<br>\ngenerates from this</p>\n</li>\n</ul>\n<p>Here is the problem:</p>\n<p>--- %&lt; --- %&lt; --- %&lt; --- %&lt; --- %&lt; --- %&lt; --- %&lt; --- %&lt; --- %&lt; --- %&lt; ---<br>\n$ scalac -version<br>\nScala compiler version 2.10.1 -- Copyright 2002-2013, LAMP/EPFL<br>\n$ scalac RealMinusBug.scala<br>\nRealMinusBug.scala:26: error: overriding value RealMinusBug.minus in<br>\ntrait minus of type (A =&gt; B, A =&gt; B) =&gt; A =&gt; B;<br>\n value RealMinusBug.minus has incompatible type<br>\n  val <code>RealMinusBug.minus</code> = (a: A =&gt; B, b: A =&gt; B, c: A) =&gt;<br>\n      ^<br>\none error found<br>\n--- %&lt; --- %&lt; --- %&lt; --- %&lt; --- %&lt; --- %&lt; --- %&lt; --- %&lt; --- %&lt; --- %&lt; ---</p>\n<p>I am not yet a Scala expert, so this leaves me clueless.</p>\n<p>As the *.thy demonstrates the problem is somehow caused by doing a<br>\n\"minus\" operation on functions whose types have a certain complexity.<br>\nWhen the functions have simpler types, the \"function subtraction\"<br>\ngenerates correctly typed Scala code, as demonstrated by the working*<br>\ndefinitions in the *.thy file.</p>\n<p>If you wonder why I need these lambda-abstractions in my definitions at<br>\nall, please bear in mind that my actual formalisation is more complex.<br>\nActually I have something like</p>\n<p>fun bar :: \"type1 =&gt; type3 =&gt; type4\"<br>\nwhere \"bar a c = (* something lengthy *)\"</p>\n<p>fun baz :: \"type1 =&gt; type2 =&gt; type3 =&gt; type4\"<br>\nwhere \"baz a b c = (* something lengthy *)\"</p>\n<p>fun foo :: \"type1 =&gt; type2 =&gt; type3 =&gt; type4\"<br>\nwhere \"foo a b c = bar a - baz a b\"</p>\n<p>i.e. the function foo that creates the problem subtracts two partially<br>\napplied functions.</p>\n<p>I managed to work around this by generating code from a modified function</p>\n<p>fun foo_workaround<br>\nwhere \"foo_workaround a b c =<br>\n  (* expansion of bar *)<br>\n  -<br>\n  (* expansion of baz *)\"</p>\n<p>Cheers,</p>\n<p>Christoph<br>\n<a href=\"/user_uploads/14278/jDY7jY7KaItp1Vh32nSXvDCA/RealMinusBug.scala\">RealMinusBug.scala</a><br>\n<a href=\"/user_uploads/14278/nqRyLNx3qT0dCfBAvYM9VbHL/RealMinusBug.thy\">RealMinusBug.thy</a></p>",
        "id": 294244155,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660908245
    },
    {
        "content": "<p>From: Florian Haftmann &lt;<a href=\"mailto:florian.haftmann@informatik.tu-muenchen.de\">florian.haftmann@informatik.tu-muenchen.de</a>&gt;<br>\nHi Christoph,</p>\n<p>Concerning »actively maintained«, there is somebody (namely me) who will<br>\nlook after your issue.  I welcome your effort to carry Isabelle out of<br>\nthe ML/Haskell subculture, but there is one caveat: the code generator<br>\nfor Scala translates HOL's calculus into a functional Scala program<br>\nwithout attempting any transformation to idiomize it towards Scala as<br>\nwritten by experienced Scala programmes.  For illustration, have a look<br>\nat the generated code.  I never heard of any reports how feasible the<br>\ncode is to incorporate in bigger Scala applications.</p>\n<p>Stay tuned,<br>\n    Florian<br>\n<a href=\"/user_uploads/14278/FgmdujckW2Vvp3ajmJxe8W-a/signature.asc\">signature.asc</a></p>",
        "id": 294244308,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660908311
    },
    {
        "content": "<p>From: \"C. Diekmann\" &lt;<a href=\"mailto:diekmann@in.tum.de\">diekmann@in.tum.de</a>&gt;<br>\nBTW,</p>\n<blockquote>\n<blockquote>\n<p>(BTW, is the Scala code generator actively maintained?</p>\n</blockquote>\n</blockquote>\n<p>As a regular user of the Scala code generator for over a year, I can<br>\ntell that I am very happy and that it _feels_ very maintained.</p>\n<blockquote>\n<p>I never heard of any reports how feasible the<br>\ncode is to incorporate in bigger Scala applications.</p>\n</blockquote>\n<p>I have &gt;8k LOC Scala application with interactive visualization,<br>\ncommand tab completion and some other nifty features from third party<br>\nlibraries (not counted in the LOC). The core reasoning logic (&gt; 2.5k<br>\nLOC) is generated by the code generator. It is very feasible. You do a<br>\ngreat job! The transition form Isabelle 2012 / Scala 2.9 to Isabelle<br>\n2013 / Scala 2.10 was quite painless. However, I really recommend<br>\nusing an object oriented facade to wrap the generated Scala code<br>\nbefore usage with hand-written Scala.</p>\n<blockquote>\n<blockquote>\n<p>[...] )<br>\n(see xkcd 859)</p>\n</blockquote>\n</blockquote>\n<p>Cornelius</p>",
        "id": 294244531,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660908375
    },
    {
        "content": "<p>From: Christoph LANGE &lt;<a href=\"mailto:math.semantic.web@gmail.com\">math.semantic.web@gmail.com</a>&gt;<br>\n-----BEGIN PGP SIGNED MESSAGE-----<br>\nHash: SHA1</p>\n<p>Hi Florian,</p>\n<p>2013-07-03 19:33 Florian Haftmann:</p>\n<blockquote>\n<p>Concerning »actively maintained«, there is somebody (namely me)<br>\nwho will look after your issue.</p>\n</blockquote>\n<p>Thanks for your encouraging reply!</p>\n<p>And, @Cornelius, thanks for your experience report.</p>\n<blockquote>\n<p>I welcome your effort to carry Isabelle out of the ML/Haskell <br>\nsubculture, but there is one caveat: the code generator for Scala <br>\ntranslates HOL's calculus into a functional Scala program without <br>\nattempting any transformation to idiomize it towards Scala as <br>\nwritten by experienced Scala programmes.</p>\n</blockquote>\n<p>I am nowhere near an _experienced_ Scala programmer yet, but<br>\nsufficiently capable of writing wrapper functions that, e.g., convert<br>\nset[Nat] to List[Int], so this is fine with me.  Replying to<br>\n@Cornelius, my application so far is small enough to only require a<br>\nfew wrapper _functions_, but I'll consider your suggestion of doing<br>\nsomething object-oriented.</p>\n<p>Are you suggesting that the code generator creates nicer output for<br>\nother target languages?  (I'm just curious; I'm not planning to use<br>\nany other language than Scala for now.)</p>\n<blockquote>\n<p>For illustration, have a look at the generated code.  I never<br>\nheard of any reports how feasible the code is to incorporate in<br>\nbigger Scala applications.</p>\n</blockquote>\n<p>For now, our applications won't be more than thin wrappers around the<br>\ngenerated code, providing some console or file I/O, in a medium-term<br>\nperspective maybe a GUI or web interface.  But really just to obtain<br>\ninput for the Isabelle-generated functions from an end user, and for<br>\ndisplaying the output of the Isabelle-generated functions back to the<br>\nend user.</p>\n<p>Cheers,</p>\n<p>Christoph</p>\n<hr>\n<p>Christoph Lange, School of Computer Science, University of Birmingham<br>\n<a href=\"http://cs.bham.ac.uk/~langec/\">http://cs.bham.ac.uk/~langec/</a>, Skype duke4701</p>\n<p>→ Intelligent Computer Mathematics, 8–12 July, Bath, UK.<br>\n<a href=\"http://cicm-conference.org/2013/\">http://cicm-conference.org/2013/</a><br>\n→ Modular Ontologies (WoMO), 15 September, Corunna, Spain.<br>\n  Submission until 12 July; <a href=\"http://www.iaoa.org/womo/2013.html\">http://www.iaoa.org/womo/2013.html</a><br>\n→ Knowledge and Experience Management, 7-9 October, Bamberg, Germany.<br>\n  Submission until 15 July; <a href=\"http://minf.uni-bamberg.de/lwa2013/cfp/fgwm/\">http://minf.uni-bamberg.de/lwa2013/cfp/fgwm/</a><br>\n→ Mathematics in Computer Science Special Issue on “Enabling Domain<br>\n  Experts to use Formalised Reasoning”; submission until 31 October.<br>\n<a href=\"http://cs.bham.ac.uk/research/projects/formare/pubs/mcs-doform/\">http://cs.bham.ac.uk/research/projects/formare/pubs/mcs-doform/</a><br>\n-----BEGIN PGP SIGNATURE-----<br>\nVersion: GnuPG v2.0.20 (GNU/Linux)<br>\nComment: Using GnuPG with Thunderbird - <a href=\"http://www.enigmail.net/\">http://www.enigmail.net/</a></p>\n<p>iEYEARECAAYFAlHUm5kACgkQvqg+op3jsjNJDgCg6hhflHW3bCwVRAaw9HbJ4anu<br>\nTiwAnjjsYpuIpT4WGPu/gN0NhzktAmup<br>\n=adh6<br>\n-----END PGP SIGNATURE-----</p>",
        "id": 294244550,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660908382
    },
    {
        "content": "<p>From: Manuel Eberl &lt;<a href=\"mailto:eberlm@in.tum.de\">eberlm@in.tum.de</a>&gt;<br>\nAt the danger of being called a nitpicker: this sort of thing can cost<br>\nyou the programme correctness that you have so painstakingly ensured<br>\nwith Isabelle, since Int in Scala is subject to integer overflow. I have<br>\nheard stories of \"verified\" code producing horribly wrong results<br>\nbecause people did not take integer overflow into account. These stories<br>\nwere from code verified with a verification condition generator and<br>\nautomated theorem provers; the Isabelle-generated code is, of course,<br>\nnot affected by things like this, but when writing wrappers around it<br>\nthat use native integer types, the same caveats apply.</p>\n<p>Personally, unless I do some heavy number-crunching, I use the<br>\narbitrary-precision Integer type (in Haskell) just to be sure –<br>\nespecially with Isabelle-generated code.</p>\n<p>Cheers,<br>\nManuel</p>",
        "id": 294244562,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660908385
    },
    {
        "content": "<p>From: Christoph LANGE &lt;<a href=\"mailto:math.semantic.web@gmail.com\">math.semantic.web@gmail.com</a>&gt;<br>\n2013-07-03 23:38 Manuel Eberl:<br>\nThanks for pointing out.  Indeed BigInt would be the right type to use<br>\nin Scala.</p>\n<p>Cheers,</p>\n<p>Christoph</p>",
        "id": 294244579,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660908391
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nThe funny thing is that the type called \"Int\" or \"int\" in most real-world <br>\nprogramming languages is not for integers at all, but for machine words.</p>\n<p>The JVM platform is in a relatively good situation here, because that is <br>\nprecisely specified as 32bit signed word-arithmentic.  So overflow is not <br>\nan accident, but part of the algebra on that particular type.  (There are <br>\nalso celebrated books about making really smart things with that algebra <br>\nof words.)</p>\n<p>Surprise only starts, when people use that word type as approximation for <br>\nproper ints.  There are historical and technical reasons for doing that by <br>\ndefault on the JVM: BigInt is much less efficient on that platform, due to <br>\nthe physical distinction of base types vs. object types at runtime.</p>\n<p>In SML the situation is much better: type \"int\" means mathematical <br>\nintegers, without implicit overflow, and the implementation is quite fast: <br>\nfor small values it uses fast machine arithmentic, for big values it <br>\nsilently upgrades to a library (here GNU MP, which is also quite fast).</p>\n<p>Makarius</p>",
        "id": 294244637,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660908415
    },
    {
        "content": "<p>From: Florian Haftmann &lt;<a href=\"mailto:florian.haftmann@informatik.tu-muenchen.de\">florian.haftmann@informatik.tu-muenchen.de</a>&gt;<br>\nHi all,</p>\n<p>I have identified the issue; it will not show up in the next Isabelle<br>\nrelease.</p>\n<p>The issue occurs whenever there is a class parameter of type … =&gt; 'a,<br>\nand a corresponding dictionary is needed for a function type instance.<br>\nMaybe there is a chance to work around this in your application.  If<br>\nnot, and there is pressure not to await the upcoming release, it would<br>\nbe possible to provide the necessary adjustions as dedicated patches (we<br>\ndo not do this often, but sometimes there is no directer way).</p>\n<p>Cheers,<br>\n    Florian<br>\n<a href=\"/user_uploads/14278/dmufJ3zGrAaBxz2ReZcgx72c/signature.asc\">signature.asc</a></p>",
        "id": 294244716,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660908448
    },
    {
        "content": "<p>From: Florian Haftmann &lt;<a href=\"mailto:florian.haftmann@informatik.tu-muenchen.de\">florian.haftmann@informatik.tu-muenchen.de</a>&gt;<br>\nHi Cornelius,</p>\n<p>thanks for this encouraging report!</p>\n<p>Florian<br>\n<a href=\"/user_uploads/14278/YNTs9_RIlS9L32vjmQpLRlJf/signature.asc\">signature.asc</a></p>",
        "id": 294244729,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660908452
    },
    {
        "content": "<p>From: Florian Haftmann &lt;<a href=\"mailto:florian.haftmann@informatik.tu-muenchen.de\">florian.haftmann@informatik.tu-muenchen.de</a>&gt;<br>\nInterfacing with generated code requires indeed some care.  E.g. the<br>\ngenerated code does not prevent you from generating abstract values<br>\nwhich do not obey the required invariant.  Clean encapsulated interfaces<br>\nare helpful here.</p>\n<p>Florian<br>\n<a href=\"/user_uploads/14278/lUrKSlFFgYdZYyLVwZ9VERqb/signature.asc\">signature.asc</a></p>",
        "id": 294244743,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660908459
    },
    {
        "content": "<p>From: Christoph LANGE &lt;<a href=\"mailto:math.semantic.web@gmail.com\">math.semantic.web@gmail.com</a>&gt;<br>\n-----BEGIN PGP SIGNED MESSAGE-----<br>\nHash: SHA1</p>\n<p>Hi Florian,</p>\n<p>2013-07-05 18:29 Florian Haftmann:</p>\n<blockquote>\n<p>I have identified the issue; it will not show up in the next<br>\nIsabelle release.</p>\n</blockquote>\n<p>Great, thank you very much!</p>\n<blockquote>\n<p>The issue occurs whenever there is a class parameter of type … =&gt;<br>\n'a, and a corresponding dictionary is needed for a function type<br>\ninstance. Maybe there is a chance to work around this in your<br>\napplication.</p>\n</blockquote>\n<p>Indeed there is: I had already found a workaround when reporting the<br>\nbug; the workaround is sketched at the bottom of my initial email.  So<br>\nthere is no need for a custom patch, at least not from my side.</p>\n<p>Cheers,</p>\n<p>Christoph</p>\n<hr>\n<p>Christoph Lange, School of Computer Science, University of Birmingham<br>\n<a href=\"http://cs.bham.ac.uk/~langec/\">http://cs.bham.ac.uk/~langec/</a>, Skype duke4701</p>\n<p>→ Intelligent Computer Mathematics, 8–12 July, Bath, UK.<br>\n<a href=\"http://cicm-conference.org/2013/\">http://cicm-conference.org/2013/</a><br>\n→ Modular Ontologies (WoMO), 15 September, Corunna, Spain.<br>\n  Submission until 12 July; <a href=\"http://www.iaoa.org/womo/2013.html\">http://www.iaoa.org/womo/2013.html</a><br>\n→ Knowledge and Experience Management, 7-9 October, Bamberg, Germany.<br>\n  Submission until 15 July; <a href=\"http://minf.uni-bamberg.de/lwa2013/cfp/fgwm/\">http://minf.uni-bamberg.de/lwa2013/cfp/fgwm/</a><br>\n→ Mathematics in Computer Science Special Issue on “Enabling Domain<br>\n  Experts to use Formalised Reasoning”; submission until 31 October.<br>\n<a href=\"http://cs.bham.ac.uk/research/projects/formare/pubs/mcs-doform/\">http://cs.bham.ac.uk/research/projects/formare/pubs/mcs-doform/</a><br>\n-----BEGIN PGP SIGNATURE-----<br>\nVersion: GnuPG v2.0.20 (GNU/Linux)<br>\nComment: Using GnuPG with Thunderbird - <a href=\"http://www.enigmail.net/\">http://www.enigmail.net/</a></p>\n<p>iEYEARECAAYFAlHXYkIACgkQvqg+op3jsjNpogCgsuH2r1e5AAVKu+6VwJcz/uqf<br>\nKzgAn0HA2yvyLcAf1Pb/dqK0a4tiJ+mY<br>\n=jwla<br>\n-----END PGP SIGNATURE-----</p>",
        "id": 294244755,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660908465
    }
]