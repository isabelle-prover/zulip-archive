[
    {
        "content": "<p>From: Gottfried Barrow &lt;<a href=\"mailto:igbi@gmx.com\">igbi@gmx.com</a>&gt;<br>\nHi,</p>\n<p>There are Scala identifier naming differences between when 'module_name' <br>\nis used (the problem), and when 'module_name' isn't used (which works). <br>\nI get a valid warning that classes 'nat' and 'Nat' differ only in case. <br>\nIt tells me:</p>\n<p>/warning: Class test_mod$Nat differs only in case from test_mod$nat. <br>\nSuch classes will overwrite one another on case-insensitive filesystems./</p>\n<p>I'll include the theory below, but before that, I turn this into a <br>\nfeature request, described by the subject line.</p>\n<p>What works when I specify no module name is this:</p>\n<p>object Nat {<br>\nabstract sealed class nat<br>\nfinal case class Nata(a: BigInt) extends nat</p>\n<p>What doesn't work, when 'module_name' is used is this:</p>\n<p>object test_mod {<br>\nabstract sealed class nat<br>\nfinal case class Nat(a: BigInt) extends nat</p>\n<p>That the name 'Nata' works is good, but my proposed naming scheme would <br>\nuse a name that would be more meaningful to me.</p>\n<p>Putting everything in one object is convenient for easy importing, but I <br>\ncan see a use for not specifying a module, which would be that Scala <br>\nobjects would be organized like the HOL logic is.</p>\n<p>It would be nice, to have the same names so I can go back and forth <br>\nwithout renaming. My proposal is as above, with 'nat' as an example:</p>\n<p>NatO, for the nat object,</p>\n<p>natT, for the top level nat class, and</p>\n<p>NatC, for the nat constructor/class</p>\n<p>The theory is below.</p>\n<p>Thanks,<br>\nGB</p>\n<p>(<strong>*</strong><strong>*</strong><strong>*</strong><strong>*</strong><strong>*</strong><strong>*</strong><strong>*</strong><strong>*</strong><strong>*</strong><strong>*</strong><strong>*</strong><strong>*</strong><strong>*</strong><strong>*</strong><strong>*</strong>)</p>\n<p>theory test_export_code<br>\nimports Complex_Main \"~~/src/HOL/Library/Code_Target_Nat\"<br>\nbegin</p>\n<p>fun nat_natlist_op :: \"nat =&gt; nat list =&gt; nat list\" where<br>\n   \"nat_natlist_op m []       = []\"<br>\n  |\"nat_natlist_op m (n # nl) = (m + n) # nat_natlist_op m nl\"</p>\n<p>value \"nat_natlist_op 3 [2,3,4]\"</p>\n<p>export_code nat_natlist_op in Scala file \"src/test_no_mod.scala\"</p>\n<p>export_code nat_natlist_op<br>\n   in Scala module_name test_mod file \"src/test_mod.scala\"</p>\n<p>end</p>",
        "id": 294323899,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660927863
    },
    {
        "content": "<p>From: Gottfried Barrow &lt;<a href=\"mailto:igbi@gmx.com\">igbi@gmx.com</a>&gt;<br>\nNaming schemes take a lot of brainstorming. I guess the real conflict is <br>\nbetween 'nat' as a class/type, and 'Nat' as a class/constructor. Here's <br>\nmy new vote for this example:</p>\n<p>Nat for object,</p>\n<p>natT or natD for class/type, and</p>\n<p>Nat for class/constructor.</p>\n<p>I think that constructors are used more than type annotation.</p>\n<p>Regards,<br>\nGB</p>",
        "id": 294323918,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660927869
    },
    {
        "content": "<p>From: Florian Haftmann &lt;<a href=\"mailto:florian.haftmann@informatik.tu-muenchen.de\">florian.haftmann@informatik.tu-muenchen.de</a>&gt;<br>\nHi Gottfried,</p>\n<p>using »code_identifier«, you can explicitly control the naming of<br>\nidentifiers in generated code.  The syntax is described in the Isar<br>\nreference manual and the theories in src/HOL contain various examples.</p>\n<p>Hope this helps,<br>\n    Florian<br>\n<a href=\"/user_uploads/14278/dtqOZD7k--RDp-qeoNScEsvE/signature.asc\">signature.asc</a></p>",
        "id": 294324306,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660928005
    },
    {
        "content": "<p>From: Gottfried Barrow &lt;<a href=\"mailto:igbi@gmx.com\">igbi@gmx.com</a>&gt;<br>\nFlorian,</p>\n<p>Thanks. I'll use that someday, but all this led to several additional <br>\nthings. I hadn't considered the 'Eval' export_code option. The first <br>\nsection of codegen.pdf speaks of the four languages, so I missed that <br>\n'Eval' was an option. I saw 'Eval' the other day in the Isar reference <br>\nmanual, and now I've used it. It's more in line with what I've recently <br>\nbeen focusing, which is a high-powered 'value'.</p>\n<p>Reading your section 6 in codegen.pdf led me to your Parallel.thy. I <br>\nexperimented with 'Parallel.fork' and 'Parallel.join'. All that looks <br>\nlike it should be useful. I got a particular function, for a particular <br>\nvalue, down from 4.5s to about 1s, by forking on the values of a list. <br>\nDoing that with a 'fun' in a THY is good.</p>\n<p>Thanks,<br>\nGB</p>",
        "id": 294324373,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660928033
    }
]