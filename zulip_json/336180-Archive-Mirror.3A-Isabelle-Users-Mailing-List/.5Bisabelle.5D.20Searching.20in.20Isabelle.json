[
    {
        "content": "<p>From: Jonathan Julián Huerta y Munive &lt;<a href=\"mailto:jonjulian23@gmail.com\">jonjulian23@gmail.com</a>&gt;<br>\nHello,</p>\n<p>I have been working with the type \"('a,'b) vec\" from HOL-Analysis, and some<br>\nAFP entries. Handling such a big library requires searching for various<br>\nconstructs that other people have built. I've managed to find many things<br>\nwith the Ctrl+Click feature but there are others that I'd still like to<br>\nlearn. In particular:</p>\n<p>· What's the proper way to find the file where a theorem of the form<br>\n\"OFCLASS(_,_)\" was proved? E.g. how do I find where the type vec was shown<br>\nto be a \"ring_1\"?<br>\n· How can I quickly find the line where a notation was introduced? When I<br>\nCtrl+Click the symbol, it takes me to the definition/abbreviation, but the<br>\nnotation may have been set up in other places.<br>\n· If I use a list of \"named_theorems\" other people introduced, how do I<br>\ntell Isabelle to show me the theorem it just applied (from the many<br>\ncontained in the list)?<br>\n· How do I search if a class/locale has been declared a subclass/sublocale<br>\nof another?</p>\n<p>Sincerely,<br>\nJonathan Julian Huerta y Munive</p>",
        "id": 294764010,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661201039
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nThat is a nice summary of things that don't quite work, as far as I can<br>\ntell on the spot.</p>\n<p>Maybe some expert users know a few tricks as partial solutions.</p>\n<p>Makarius</p>",
        "id": 294765640,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661201811
    },
    {
        "content": "<p>From: Peter Lammich &lt;<a href=\"mailto:lammich@in.tum.de\">lammich@in.tum.de</a>&gt;<br>\nI quite frequently use a command <br>\n  find_in_theorems pattern in thms1 ... thmsn</p>\n<p>For example:<br>\n  find_in_theorems \"_+_\" \"_*_\" in algebra_simps field_simps</p>\n<p>Results<br>\n  Rings.semiring_class.distrib_right: algebra_simps(17): (?a + ?b) * ?c<br>\n= ?a * ?c + ?b * ?c<br>\n  Rings.semiring_class.distrib_left: algebra_simps(18): ?a * (?b + ?c)<br>\n= ?a * ?b + ?a * ?c<br>\n  Rings.semiring_class.distrib_left_NO_MATCH: field_simps(17): NO_MATCH<br>\n(?x div ?y) ?a ⟹ ?a * (?b + ?c) = ?a * ?b + ?a * ?c<br>\n  Rings.semiring_class.distrib_right_NO_MATCH: field_simps(18):<br>\nNO_MATCH (?x div ?y) ?c ⟹ (?a + ?b) * ?c = ?a * ?c + ?b * ?c<br>\n  Fields.division_ring_class.add_divide_eq_iff: field_simps(26): ?z ≠ 0<br>\n⟹ ?x + ?y / ?z = (?x * ?z + ?y) / ?z<br>\n  Fields.division_ring_class.divide_add_eq_iff: field_simps(27): ?z ≠ 0<br>\n⟹ ?x / ?z + ?y = (?x + ?y * ?z) / ?z<br>\n  Fields.division_ring_class.minus_divide_add_eq_iff: field_simps(29):<br>\n?z ≠ 0 ⟹ - (?x / ?z) + ?y = (- ?x + ?y * ?z) / ?z  </p>\n<p>Compared to find-theorems, the command is a bit limited, as it does not<br>\nsupport goal-dependent patterns like intro, elim, dest. It's already<br>\nsuitable to search for certain theorems in large <br>\nnamed_theorems-collections. It will show the \"simplest\" name of the<br>\ntheorem, the number of the theorem in the theorem-collection, and the<br>\nstatement of the theorem.</p>\n<p>With a bit of work, this feature could be integrated into the full<br>\nfind-theorems command, e.g., in a context with a subgoal, you could <br>\nthen write </p>\n<p>find_theorems intro in algebra_simps</p>\n<p>I attach my current prototype for the find_in_theorems command <br>\nto this mail, in case someone is interested...<br>\n<a href=\"/user_uploads/14278/BYc0fE_7u8xCjkJ1DpHNc_DD/Find_In_Theorems.thy\">Find_In_Theorems.thy</a><br>\n<a href=\"/user_uploads/14278/Lyr4aotis7rmr8UL2_3BcgSY/Names_Of_Thm.thy\">Names_Of_Thm.thy</a></p>",
        "id": 294765650,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661201819
    },
    {
        "content": "<p>From: Wenda Li &lt;<a href=\"mailto:wl302@cam.ac.uk\">wl302@cam.ac.uk</a>&gt;</p>\n<blockquote>\n<p>· How do I search if a class/locale has been declared a subclass/sublocale<br>\nof another?</p>\n</blockquote>\n<p>A quick-and-dirty way might be to attempt to prove it. For example, if we are not sure if a field is a sublocale of a semiring, we can put down:</p>\n<p>sublocale field ⊆ semiring</p>\n<p>and Isabelle will suggest:</p>\n<p>Auto solve_direct: the current goal can be solved directly with<br>\n  local.semiring_axioms: class.semiring (+) (*)</p>\n<p>So that we know it is trivially provable and a field is indeed a sublocale of a semiring.</p>\n<p>There probably is a better way to do this…</p>\n<p>Wenda</p>",
        "id": 294765664,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661201824
    },
    {
        "content": "<p>From: Jonathan Julián Huerta y Munive &lt;<a href=\"mailto:jonjulian23@gmail.com\">jonjulian23@gmail.com</a>&gt;<br>\nHello,</p>\n<p>We finally have a list of answers to all the questions I did on<br>\n11/10/2019 about<br>\nvarious searches in Isabelle. Thanks to Peter, Wenda, Makarius and Fabian<br>\nfor their replies. Hopefully, the solutions can be integrated in one place.</p>\n<p>*&gt;&gt; · If I use a list of \"named_theorems\" other people introduced, how do<br>\nI&gt;&gt; tell Isabelle to show me the theorem it just applied (from the many&gt;&gt;<br>\ncontained in the list)?*<br>\nOn Tue, 12 Nov 2019, at 22:19:35 &lt;<a href=\"mailto:lammich@in.tum.de\">lammich@in.tum.de</a>&gt; wrote:</p>\n<blockquote>\n<p>I quite frequently use a command find_in_theorems pattern in thms1..thmsn<br>\nFor example: find_in_theorems \"_+_\" \"_*_\" in algebra_simps field_simps<br>\n[...]<br>\nCompared to find-theorems, the command is a bit limited, as it does not<br>\nsupport goal-dependent patterns like intro, elim, dest. It's already<br>\nsuitable to search for certain theorems in large<br>\nnamed_theorems-collections. It will show the \"simplest\" name of the<br>\ntheorem, the number of the theorem in the theorem-collection, and the<br>\nstatement of the theorem.</p>\n</blockquote>\n<p>*&gt;&gt; · How do I search if a class/locale has been declared a<br>\nsubclass/sublocale&gt;&gt; of another?*<br>\nOn Tue, 12 Nov 2019, at 22:31:34 &lt;<a href=\"mailto:wl302@cam.ac.uk\">wl302@cam.ac.uk</a>&gt; wrote:</p>\n<blockquote>\n<p>A quick-and-dirty way might be to attempt to prove it. For example, if we<br>\nare<br>\nnot sure if a field is a sublocale of a semiring, we can put down:<br>\nsublocale field ⊆ semiring and Isabelle will suggest:<br>\nAuto solve_direct: the current goal can be solved directly with<br>\nlocal.semiring_axioms: class.semiring (+) (*)</p>\n</blockquote>\n<p>*&gt;&gt; · What's the proper way to find the file where a theorem of the form&gt;&gt;<br>\n\"OFCLASS(_,_)\" was proved? E.g. how do I find where the type vec was<br>\nshown&gt;&gt; to be a \"ring_1\"?&gt;&gt; · How can I quickly find the line where a<br>\nnotation was introduced? When I&gt;&gt; Ctrl+Click the symbol, it takes me to the<br>\ndefinition/abbreviation, but the&gt;&gt; notation may have been set up in other<br>\nplaces.*<br>\nOn Mon, Mar 23, 2020 at 5:06 PM &lt;<a href=\"mailto:huch@in.tum.de\">huch@in.tum.de</a>&gt; wrote:</p>\n<blockquote>\n<p>Hi Jonathan,</p>\n<p>[... ]I have build a tool (<a href=\"http://search.isabelle.in.tum.de\">search.isabelle.in.tum.de</a>) which might be<br>\ninteresting.</p>\n<p>First of all, here is the query<br>\n&lt;<a href=\"https://search.isabelle.in.tum.de/#search?q=%7B%22usedIn%22%3A%7B%22block%22%3A%22typedef%20('a%2C%20'b)%20vec%20%3D%20%5C%22UNIV%20%3A%3A%20('b%3A%3Afinite%20%E2%87%92%20'a)%20set%5C%22%5Cn%20%20morphisms%20vec_nth%20vec_lambda%20..%22%2C%22ids%22%3A%5B%22Fact.Finite_Cartesian_Product.arity_type_vec%22%2C%22Constant.Finite_Cartesian_Product.vec.vec_lambda%22%2C%22Fact.Finite_Cartesian_Product.vec.vec_lambda_induct%22%2C%22Fact.Finite_Cartesian_Product.vec.vec_lambda_cases%22%2C%22Fact.Finite_Cartesian_Product.vec.vec_lambda_inject%22%2C%22Fact.Finite_Cartesian_Product.vec.vec_lambda_inverse%22%2C%22Constant.Finite_Cartesian_Product.typerep_vec_inst.typerep_vec%22%2C%22Fact.Finite_Cartesian_Product.typerep_vec_inst.typerep_vec%22%2C%22Fact.Finite_Cartesian_Product.vec.type_definition_vec%22%2C%22Fact.Finite_Cartesian_Product.arity_typerep_vec%22%2C%22Fact.Finite_Cartesian_Product.typerep_vec_def%22%2C%22Constant.Finite_Cartesian_Product.vec.vec_nth%22%2C%22Fact.Finite_Cartesian_Product.vec.vec_nth_inject%22%2C%22Fact.Finite_Cartesian_Product.vec.vec_nth_cases%22%2C%22Fact.Finite_Cartesian_Product.vec.vec_nth_induct%22%2C%22Fact.Finite_Cartesian_Product.vec.vec_nth_inverse%22%2C%22Fact.Finite_Cartesian_Product.vec.vec_nth%22%2C%22Type.Finite_Cartesian_Product.vec%22%5D%7D%7D\">https://search.isabelle.in.tum.de/#search?q=%7B%22usedIn%22%3A%7B%22block%22%3A%22typedef%20('a%2C%20'b)%20vec%20%3D%20%5C%22UNIV%20%3A%3A%20('b%3A%3Afinite%20%E2%87%92%20'a)%20set%5C%22%5Cn%20%20morphisms%20vec_nth%20vec_lambda%20..%22%2C%22ids%22%3A%5B%22Fact.Finite_Cartesian_Product.arity_type_vec%22%2C%22Constant.Finite_Cartesian_Product.vec.vec_lambda%22%2C%22Fact.Finite_Cartesian_Product.vec.vec_lambda_induct%22%2C%22Fact.Finite_Cartesian_Product.vec.vec_lambda_cases%22%2C%22Fact.Finite_Cartesian_Product.vec.vec_lambda_inject%22%2C%22Fact.Finite_Cartesian_Product.vec.vec_lambda_inverse%22%2C%22Constant.Finite_Cartesian_Product.typerep_vec_inst.typerep_vec%22%2C%22Fact.Finite_Cartesian_Product.typerep_vec_inst.typerep_vec%22%2C%22Fact.Finite_Cartesian_Product.vec.type_definition_vec%22%2C%22Fact.Finite_Cartesian_Product.arity_typerep_vec%22%2C%22Fact.Finite_Cartesian_Product.typerep_vec_def%22%2C%22Constant.Finite_Cartesian_Product.vec.vec_nth%22%2C%22Fact.Finite_Cartesian_Product.vec.vec_nth_inject%22%2C%22Fact.Finite_Cartesian_Product.vec.vec_nth_cases%22%2C%22Fact.Finite_Cartesian_Product.vec.vec_nth_induct%22%2C%22Fact.Finite_Cartesian_Product.vec.vec_nth_inverse%22%2C%22Fact.Finite_Cartesian_Product.vec.vec_nth%22%2C%22Type.Finite_Cartesian_Product.vec%22%5D%7D%7D</a>&gt;<br>\nthat gives you all entities using the \"('a, 'b) vec\" type (you can filter<br>\nthese results further).</p>\n<p>We can then find where vec was shown to be a ring_1: Filtering by<br>\n'instance' commands and 'ring_1' in the source text gives me a single<br>\nresult<br>\n&lt;<a href=\"https://search.isabelle.in.tum.de/#search?page=%5B%5D&amp;q=%7B%22fields%22%3A%5B%7B%22field%22%3A%22Command%22%2C%22terms%22%3A%5B%22instance%22%5D%7D%2C%7B%22field%22%3A%22SourceText%22%2C%22terms%22%3A%5B%22ring_1%22%5D%7D%5D%2C%22usedIn%22%3A%7B%22block%22%3A%22typedef%20('a%2C%20'b)%20vec%20%3D%20%5C%22UNIV%20%3A%3A%20('b%3A%3Afinite%20%E2%87%92%20'a)%20set%5C%22%5Cn%20%20morphisms%20vec_nth%20vec_lambda%20..%22%2C%22ids%22%3A%5B%22Fact.Finite_Cartesian_Product.arity_type_vec%22%2C%22Constant.Finite_Cartesian_Product.vec.vec_lambda%22%2C%22Fact.Finite_Cartesian_Product.vec.vec_lambda_induct%22%2C%22Fact.Finite_Cartesian_Product.vec.vec_lambda_cases%22%2C%22Fact.Finite_Cartesian_Product.vec.vec_lambda_inject%22%2C%22Fact.Finite_Cartesian_Product.vec.vec_lambda_inverse%22%2C%22Constant.Finite_Cartesian_Product.typerep_vec_inst.typerep_vec%22%2C%22Fact.Finite_Cartesian_Product.typerep_vec_inst.typerep_vec%22%2C%22Fact.Finite_Cartesian_Product.vec.type_definition_vec%22%2C%22Fact.Finite_Cartesian_Product.arity_typerep_vec%22%2C%22Fact.Finite_Cartesian_Product.typerep_vec_def%22%2C%22Constant.Finite_Cartesian_Product.vec.vec_nth%22%2C%22Fact.Finite_Cartesian_Product.vec.vec_nth_inject%22%2C%22Fact.Finite_Cartesian_Product.vec.vec_nth_cases%22%2C%22Fact.Finite_Cartesian_Product.vec.vec_nth_induct%22%2C%22Fact.Finite_Cartesian_Product.vec.vec_nth_inverse%22%2C%22Fact.Finite_Cartesian_Product.vec.vec_nth%22%2C%22Type.Finite_Cartesian_Product.vec%22%5D%7D%7D\">https://search.isabelle.in.tum.de/#search?page=%5B%5D&amp;q=%7B%22fields%22%3A%5B%7B%22field%22%3A%22Command%22%2C%22terms%22%3A%5B%22instance%22%5D%7D%2C%7B%22field%22%3A%22SourceText%22%2C%22terms%22%3A%5B%22ring_1%22%5D%7D%5D%2C%22usedIn%22%3A%7B%22block%22%3A%22typedef%20('a%2C%20'b)%20vec%20%3D%20%5C%22UNIV%20%3A%3A%20('b%3A%3Afinite%20%E2%87%92%20'a)%20set%5C%22%5Cn%20%20morphisms%20vec_nth%20vec_lambda%20..%22%2C%22ids%22%3A%5B%22Fact.Finite_Cartesian_Product.arity_type_vec%22%2C%22Constant.Finite_Cartesian_Product.vec.vec_lambda%22%2C%22Fact.Finite_Cartesian_Product.vec.vec_lambda_induct%22%2C%22Fact.Finite_Cartesian_Product.vec.vec_lambda_cases%22%2C%22Fact.Finite_Cartesian_Product.vec.vec_lambda_inject%22%2C%22Fact.Finite_Cartesian_Product.vec.vec_lambda_inverse%22%2C%22Constant.Finite_Cartesian_Product.typerep_vec_inst.typerep_vec%22%2C%22Fact.Finite_Cartesian_Product.typerep_vec_inst.typerep_vec%22%2C%22Fact.Finite_Cartesian_Product.vec.type_definition_vec%22%2C%22Fact.Finite_Cartesian_Product.arity_typerep_vec%22%2C%22Fact.Finite_Cartesian_Product.typerep_vec_def%22%2C%22Constant.Finite_Cartesian_Product.vec.vec_nth%22%2C%22Fact.Finite_Cartesian_Product.vec.vec_nth_inject%22%2C%22Fact.Finite_Cartesian_Product.vec.vec_nth_cases%22%2C%22Fact.Finite_Cartesian_Product.vec.vec_nth_induct%22%2C%22Fact.Finite_Cartesian_Product.vec.vec_nth_inverse%22%2C%22Fact.Finite_Cartesian_Product.vec.vec_nth%22%2C%22Type.Finite_Cartesian_Product.vec%22%5D%7D%7D</a>&gt;<br>\nin HOL-Analysis.Finite_Cartesian_Product.</p>\n<p>Hope this is relevant for you! If it is, and you're playing around with<br>\nthe tool a little, please do consider filling out the feedback form<br>\n&lt;<a href=\"https://forms.gle/vw8dhkgtbpXhuCUp6\">https://forms.gle/vw8dhkgtbpXhuCUp6</a>&gt;.</p>\n</blockquote>",
        "id": 294824080,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661243559
    }
]