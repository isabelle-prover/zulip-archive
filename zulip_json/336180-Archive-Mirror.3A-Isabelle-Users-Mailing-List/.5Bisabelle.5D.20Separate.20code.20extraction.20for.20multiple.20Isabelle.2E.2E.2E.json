[
    {
        "content": "<p>From: Dominic Mulligan via Cl-isabelle-users &lt;<a href=\"mailto:cl-isabelle-users@lists.cam.ac.uk\">cl-isabelle-users@lists.cam.ac.uk</a>&gt;<br>\nHi,</p>\n<p>Is there a way of inducing Isabelle's export_code feature to<br>\ncompositionally export code from Isabelle theories without<br>\nregenerating previously exported code over and over again?</p>\n<p>That is: say I have two theories Foo.thy and Goo.thy, with Goo.thy<br>\ndepending on Foo.thy.  I want to export code from both theories, so I<br>\nfirst export the contents of Foo.thy into foo.ML.  Now, exporting code<br>\nfrom Goo.thy into goo.ML regenerates bits of Foo.thy that Goo.thy<br>\nrelies on and places those bits in goo.ML.  Is there a way of<br>\nindicating to Isabelle that this code already exists, and should not<br>\nbe re-exported?</p>\n<p>My use case is: I have a large model of a file format in Isabelle.  I<br>\nwant to extract code from this and wrap it in untrusted hand written<br>\ncode for validation purposes.  I do not want all of my Isabelle<br>\ndevelopment to be extracted into a single monolithic ML file, as that<br>\nwould be unwieldy to work with, but rather have the generated ML files<br>\nreflect the breakdown of my development into Isabelle theories.  How<br>\nbest to do this, if it is at all possible?  The codegen.pdf file<br>\nincluded with Isabelle is silent on this point.</p>\n<p>Thanks,<br>\nDominic</p>",
        "id": 294702691,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661179696
    },
    {
        "content": "<p>From: Florian Haftmann &lt;<a href=\"mailto:florian.haftmann@informatik.tu-muenchen.de\">florian.haftmann@informatik.tu-muenchen.de</a>&gt;<br>\nHi Dominic,</p>\n<p>I'll take »reflect the breakdown … into Isabelle theories« as a starting<br>\npoint.</p>\n<p>Indeed, after issuing</p>\n<p>export_code distinct in SML file \"/tmp/all.ML\"</p>\n<p>you see that the generated code is structured into ML modules reflecting<br>\nthe underlying theory name space.  It is not generated into separated<br>\nfiles since it is not clear how this shall look for hierarchical theory<br>\nnames, which however have not emerged in Isabelle yet.</p>\n<p>Note however that especially the basic HOL theories »as they are« have a<br>\nlot of mutual depdencies wrt. code equations, so using separate modules<br>\nmay need considerable tweaking of the name space using »code_identifier«<br>\ndeclarations.  See also §7.2 of the tutorial on code generation.</p>\n<p>Hope this helps,<br>\n    Florian<br>\n<a href=\"/user_uploads/14278/tDSYAYLMxRJY9h1eUMJfhEc5/signature.asc\">signature.asc</a></p>",
        "id": 294702910,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661179776
    },
    {
        "content": "<p>From: Dominic Mulligan via Cl-isabelle-users &lt;<a href=\"mailto:cl-isabelle-users@lists.cam.ac.uk\">cl-isabelle-users@lists.cam.ac.uk</a>&gt;<br>\nHi Florian,</p>\n<p>Thanks for your reply.  The possible future extension of Isabelle with<br>\nhierarchical theory names explains the difference in behaviour between<br>\nthe Haskell target of export_code (which does export to different<br>\nfiles) and the SML target (which doesn't), as Haskell itself has<br>\nhierarchical module names, then.</p>\n<p>One more export_code question: what is the best way to force the<br>\nexport of every constant and function that I have defined in a given<br>\ndevelopment?  I have a theory with &gt;300 constants, numerous functions<br>\ndefined within it, as well as multiple other large theories with large<br>\nnumbers of constants, definitions, and functions.  Obviously I could<br>\nname all of these constants in an export_code command, but I wonder if<br>\nthere is a better way?</p>\n<p>Thanks,<br>\nDominic</p>",
        "id": 294702955,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661179794
    },
    {
        "content": "<p>From: Florian Haftmann &lt;<a href=\"mailto:florian.haftmann@informatik.tu-muenchen.de\">florian.haftmann@informatik.tu-muenchen.de</a>&gt;</p>\n<blockquote>\n<p>One more export_code question: what is the best way to force the<br>\nexport of every constant and function that I have defined in a given<br>\ndevelopment?  I have a theory with &gt;300 constants, numerous functions<br>\ndefined within it, as well as multiple other large theories with large<br>\nnumbers of constants, definitions, and functions.  Obviously I could<br>\nname all of these constants in an export_code command, but I wonder if<br>\nthere is a better way?</p>\n</blockquote>\n<p>Try sth like</p>\n<p>export_code \"Foo._\"</p>\n<p>Hope this helps<br>\n    Florian</p>\n<blockquote>\n<p>Thanks,<br>\nDominic</p>\n<p>On 8 December 2016 at 13:58, Florian Haftmann<br>\n&lt;<a href=\"mailto:florian.haftmann@informatik.tu-muenchen.de\">florian.haftmann@informatik.tu-muenchen.de</a>&gt; wrote:</p>\n<blockquote>\n<p>Hi Dominic,</p>\n<blockquote>\n<p>My use case is: I have a large model of a file format in Isabelle.  I<br>\nwant to extract code from this and wrap it in untrusted hand written<br>\ncode for validation purposes.  I do not want all of my Isabelle<br>\ndevelopment to be extracted into a single monolithic ML file, as that<br>\nwould be unwieldy to work with, but rather have the generated ML files<br>\nreflect the breakdown of my development into Isabelle theories.</p>\n</blockquote>\n<p>I'll take »reflect the breakdown … into Isabelle theories« as a starting<br>\npoint.</p>\n<p>Indeed, after issuing</p>\n<p>export_code distinct in SML file \"/tmp/all.ML\"</p>\n<p>you see that the generated code is structured into ML modules reflecting<br>\nthe underlying theory name space.  It is not generated into separated<br>\nfiles since it is not clear how this shall look for hierarchical theory<br>\nnames, which however have not emerged in Isabelle yet.</p>\n<p>Note however that especially the basic HOL theories »as they are« have a<br>\nlot of mutual depdencies wrt. code equations, so using separate modules<br>\nmay need considerable tweaking of the name space using »code_identifier«<br>\ndeclarations.  See also §7.2 of the tutorial on code generation.</p>\n<p>Hope this helps,<br>\n        Florian</p>\n<p>--</p>\n<p>PGP available:<br>\n<a href=\"http://isabelle.in.tum.de/~haftmann/pgp/florian_haftmann_at_informatik_tu_muenchen_de\">http://isabelle.in.tum.de/~haftmann/pgp/florian_haftmann_at_informatik_tu_muenchen_de</a></p>\n<p><a href=\"/user_uploads/14278/x1NDBGhuDYxzpL5oNzugzRbY/signature.asc\">signature.asc</a></p>\n</blockquote>\n</blockquote>",
        "id": 294702977,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661179800
    }
]