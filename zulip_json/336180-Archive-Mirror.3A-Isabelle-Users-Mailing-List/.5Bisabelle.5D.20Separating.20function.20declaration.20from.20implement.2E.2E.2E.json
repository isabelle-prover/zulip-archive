[
    {
        "content": "<p>From: George Karabotsos &lt;<a href=\"mailto:g_karab@cs.concordia.ca\">g_karab@cs.concordia.ca</a>&gt;<br>\nHello all,</p>\n<p>I am wondering if there is a way to separate the declaration of a <br>\nfunction (as defined by the fun or function keywords) by its implementation.<br>\nThis is possible using the older consts and primrec or refdef way for <br>\ndeclaring functions but I cannot see how it can be done with the new way.</p>\n<p>TIA,<br>\nGeorge</p>",
        "id": 294057533,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660822212
    },
    {
        "content": "<p>From: Randy Pollack &lt;<a href=\"mailto:rpollack@inf.ed.ac.uk\">rpollack@inf.ed.ac.uk</a>&gt;<br>\nGeorge Karabotsos writes:</p>\n<blockquote>\n<p>Hello all,</p>\n<p>I am wondering if there is a way to separate the declaration of a <br>\nfunction (as defined by the fun or function keywords) by its implementation.<br>\nThis is possible using the older consts and primrec or refdef way for <br>\ndeclaring functions but I cannot see how it can be done with the new way.</p>\n</blockquote>\n<p>I noticed this too, and to take it one step further, why can't the<br>\nsyntactic outlines of these tools be similar; i.e. just replace<br>\n\"primrec\" with \"function\".  The reason I request this is that when<br>\nprimrec fails (e.g. even on some primitive recursive functions in the<br>\nnominal package) I just switch to function.  Why should this require<br>\nchanging more than one keyword?</p>\n<p>Best,<br>\nRandy</p>",
        "id": 294057563,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660822230
    },
    {
        "content": "<p>From: Alexander Krauss &lt;<a href=\"mailto:krauss@in.tum.de\">krauss@in.tum.de</a>&gt;<br>\nRandy Pollack wrote:</p>\n<blockquote>\n<p>George Karabotsos writes:</p>\n<blockquote>\n<p>Hello all,</p>\n<p>I am wondering if there is a way to separate the declaration of a <br>\nfunction (as defined by the fun or function keywords) by its implementation.<br>\nThis is possible using the older consts and primrec or refdef way for <br>\ndeclaring functions but I cannot see how it can be done with the new way.</p>\n</blockquote>\n</blockquote>\n<p>It cannot be done. The new definitional packages (function, <br>\ninductive(_set)) all declare and define constants simultaneously. The <br>\nreason is that the (internal) local theory interface (which allows these <br>\npackages to work in locale/class/instantiation/... contexts too) <br>\nsupports only that.</p>\n<blockquote>\n<p>I noticed this too, and to take it one step further, why can't the<br>\nsyntactic outlines of these tools be similar; i.e. just replace<br>\n\"primrec\" with \"function\".  The reason I request this is that when<br>\nprimrec fails (e.g. even on some primitive recursive functions in the<br>\nnominal package) I just switch to function.  Why should this require<br>\nchanging more than one keyword?</p>\n</blockquote>\n<p>You are right. This is why primrec will also change its syntax to the <br>\nsimultaneous style. The new syntax, which works just like \"function\", is <br>\nalready supported (and preferred) in the developers version.</p>\n<p>Eventually, primitive \"const\" declarations will mostly disappear from <br>\nuser theories, and you will use the \"definition\", \"inductive\", <br>\n\"primrec\", \"function\"... packages, which all share a common syntax.</p>\n<p>Alex</p>",
        "id": 294057580,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660822240
    },
    {
        "content": "<p>From: Florian Haftmann &lt;<a href=\"mailto:florian.haftmann@informatik.tu-muenchen.de\">florian.haftmann@informatik.tu-muenchen.de</a>&gt;<br>\nIt is worth noting that future Isabelle versions still technically will<br>\npermit to separate constant declaration from constant definition by<br>\nmeans of the overloading target:</p>\n<p>consts foo :: \"'a =&gt; 'a\"</p>\n<p>overloading<br>\n  foo == \"foo :: 'a =&gt; 'a\"<br>\nbegin</p>\n<p>definition foo :: \"'a =&gt; 'a\" where<br>\n  \"foo x = x\"</p>\n<p>end</p>\n<p>thm foo_def</p>\n<p>Obviously, this only works on the theory level (not in locales etc.).<br>\nPresumably this was one reason to sacrifice the separation of consts and<br>\n defs on the Isar level.</p>\n<p>Florian<br>\n<a href=\"/user_uploads/14278/OzKZ6pfesZnZAxNiR0Hj-s84/signature.asc\">signature.asc</a></p>",
        "id": 294057596,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660822247
    }
]