[
    {
        "content": "<p>From: Patrick Michel &lt;<a href=\"mailto:uni@pbmichel.de\">uni@pbmichel.de</a>&gt;<br>\nHi!</p>\n<p>I am currently using the code generation facility (Haskell backend) and can't seem to figure out how to get rid of redundant code equations.<br>\nFunction definitions with deep patterns and/or patterns on multiple arguments are currently unfolded to an abysmal amount of redundant equations.</p>\n<p>I understand why Isabelle is doing this; all these specialized equations can be directly used for reasoning, as they do not need any guards.<br>\nIt's a price I can pay for using sequential mode while reasoning about functions in Isabelle.</p>\n<p>In the target language, however, the semantics is also sequential, i.e. the original equation given in the function definition would have the correct semantics.<br>\nI have read through the refinement section of the code generation documentation, but it doesn't seem to talk about these situations.</p>\n<p>Thanks,</p>\n<p>Patrick Michel<br>\nSoftware Technology Group<br>\nUniversity of Kaiserslautern</p>",
        "id": 294217111,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660895502
    },
    {
        "content": "<p>From: Florian Haftmann &lt;<a href=\"mailto:florian.haftmann@informatik.tu-muenchen.de\">florian.haftmann@informatik.tu-muenchen.de</a>&gt;<br>\nHi Patrick,</p>\n<p>the code generator does not attempt to minimize patterns, for two reasons:</p>\n<p>a) This would be an extra-logical optimisation.<br>\nb) The task is far from being trivial.</p>\n<p>CU,<br>\n    Florian<br>\n<a href=\"/user_uploads/14278/wP2aeLExbQpxKUjSNdjprDN0/signature.asc\">signature.asc</a></p>",
        "id": 294218485,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660896180
    }
]