[
    {
        "content": "<p>From: Wolfgang Jeltsch &lt;<a href=\"mailto:wolfgang-it@jeltsch.info\">wolfgang-it@jeltsch.info</a>&gt;<br>\nHi!</p>\n<p>What is the difference between <code>by (method_1, method_2)</code>,<br>\n<code>by method_1 method_2</code>, and <code>apply method_1 by method_2</code>?</p>\n<p>I have a situation where <code>by (simp, blast)</code> doesn’t finish but both<br>\n<code>by simp blast</code> and <code>apply simp by blast</code> work. If I understand<br>\ncorrectly, the second variant allows for backtracking across both<br>\nmethods, which might be the reason why it succeeds in my case. However,<br>\nI would expect the first and third variant to show the same behavior,<br>\nbut they don’t.</p>\n<p>All the best,<br>\nWolfgang</p>",
        "id": 294823389,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661243228
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nOn 12/02/2020 22:48, Wolfgang Jeltsch wrote:</p>\n<blockquote>\n<p>What is the difference between <code>by (method_1, method_2)</code>,<br>\n<code>by method_1 method_2</code>, and <code>apply method_1 by method_2</code>?</p>\n</blockquote>\n<p>The 'by' command in Isar has two arguments: initial method (which uses chained<br>\nfacts), terminal method.</p>\n<p>The comma form is a single method expression: both parts will see the facts.</p>\n<p>If there are no facts, \"by (m1, m1)\" and \"by m1 m2\" happen to be the same, but<br>\nit would be very opportunistic (and confusing) to exploit that. So \"by (cases,<br>\nauto)\" is bad, it should be \"by cases auto\".</p>\n<p>In rare situations, you need to feed facts to particular subexpressions in<br>\nmethods. The \"use\" method combinator does that. It is also possible to say<br>\n\"use nothing ...\".</p>\n<blockquote>\n<p>I have a situation where <code>by (simp, blast)</code> doesn’t finish but both<br>\n<code>by simp blast</code> and <code>apply simp by blast</code> work. If I understand<br>\ncorrectly, the second variant allows for backtracking across both<br>\nmethods, which might be the reason why it succeeds in my case. However,<br>\nI would expect the first and third variant to show the same behavior,<br>\nbut they don’t.</p>\n</blockquote>\n<p>Backtracking is yet another detail. Between commands (e.g. 'apply', 'by')<br>\nthere is none, but between parts of a closed method expression you get the<br>\nusual composition of possibilities.</p>\n<p>All this is documented in the isar-ref manual (scattered over some places).</p>\n<p>Makarius</p>",
        "id": 294823400,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661243235
    }
]