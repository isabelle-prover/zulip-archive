[
    {
        "content": "<p>From: Сергей  Каунов &lt;<a href=\"mailto:skaunov@gmail.com\">skaunov@gmail.com</a>&gt;<br>\nHello!</p>\n<p>I'm sorry for disturbing you with the question, which may be quite<br>\nsilly. I want to use Isabelle for some very simple temporal reasoning by<br>\nmodal logic. Neither S4, neither Modal0 nor other modal thys aren't<br>\ncovered in logics.pdf. <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span><br>\nI starred on corresponding files and twisted them as I could, but didn't<br>\nfound any natural way to evaluate propositions in Sequents logic. Is<br>\nthere some hidden door, walkaround or a simple decision I missed?</p>\n<p>Thanks in advance!</p>",
        "id": 294097598,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660832780
    },
    {
        "content": "<p>From: Stephan Merz &lt;<a href=\"mailto:Stephan.Merz@loria.fr\">Stephan.Merz@loria.fr</a>&gt;<br>\nHello Sergei,</p>\n<p>most textbook presentations of proofs in modal and temporal logics are based on either Hilbert-style or sequent-style proof systems, neither of which are well supported in Isabelle. (The formalization of sequents as an Isabelle object logic that you refer to is quite old and has, AFAIK, not evolved since at least a decade; it is not supported by Isabelle's efficient automatic proof methods.)</p>\n<p>An alternative is to embed the \"forcing\" relation \"sigma |= phi\" (phi holds over structure sigma) in one of the well-developed object logics of Isabelle such as Isabelle/HOL, and to define validity \"|= phi\" as \"\\&lt;forall&gt; sigma. sigma |= phi\".</p>\n<p>For example, for linear-time temporal logic, sigma would be an infinite sequence of states, which themselves are valuations of atomic propositions. You would then define the semantics of operators such as X (next time) and G (always) according to their standard definition over sequences. From these you can derive standard LTL laws such as</p>\n<p>|= (G phi) &lt;=&gt; phi /\\ XG phi</p>\n<p>within the representation of LTL. Branching-time temporal logics can be handled similarly.</p>\n<p>This approach has been followed several times. You may want to look at sessions \"Modelcheck\" or \"Unity\" in the HOL library for similar formalizations. (My own \"TLA\" embedding is related, but stupidly based on an axiomatic rather than definitional approach to defining temporal operators.)</p>\n<p>If you are interested, I could send you (off-list) a simple embedding of LTL in HOL.</p>\n<p>Best regards,<br>\nStephan</p>",
        "id": 294097652,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660832804
    }
]