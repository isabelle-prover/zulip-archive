[
    {
        "content": "<p>From: mailing-list anonymous &lt;<a href=\"mailto:mailing.list.anonymous@gmail.com\">mailing.list.anonymous@gmail.com</a>&gt;<br>\nDear All,</p>\n<p>Recently I started working on a small personal project in Isabelle/HOL. The<br>\nwork evolved from several posts on Stack Overflow and another independent<br>\nproject on GitHub (<a href=\"https://github.com/AresEkb/Simple_OCL\">https://github.com/AresEkb/Simple_OCL</a>). The<br>\naforementioned posts on Stack Overflow are presented in the enumerated list<br>\nbelow:</p>\n<p>1. What kind of functions preserve properties of closure?<br>\n   &lt;<a href=\"https://stackoverflow.com/questions/52565266/what-kind-of-functions-preserve-properties-of-closure/\">https://stackoverflow.com/questions/52565266/what-kind-of-functions-preserve-properties-of-closure/</a>&gt;</p>\n<p>2. How to lift a transitive relation from elements to lists?<br>\n   &lt;<a href=\"https://stackoverflow.com/questions/52962519/how-to-lift-a-transitive-relation-from-elements-to-lists/\">https://stackoverflow.com/questions/52962519/how-to-lift-a-transitive-relation-from-elements-to-lists/</a>&gt;</p>\n<p>3. How to lift a transitive relation to finite maps?<br>\n   &lt;<a href=\"https://stackoverflow.com/questions/53580515/how-to-lift-a-transitive-relation-to-finite-maps/\">https://stackoverflow.com/questions/53580515/how-to-lift-a-transitive-relation-to-finite-maps/</a>&gt;</p>\n<p>However, a significant part of the content of the project is not directly<br>\nrelated to the aforementioned posts and the aforementioned repository. The<br>\ndevelopment of the project (HOL-DS_Ext) that I would like to discuss in<br>\nthis email is being done in the context of a GitHub repository<br>\n&lt;<a href=\"https://github.com/xanonec/HOL-DS_Ext\">https://github.com/xanonec/HOL-DS_Ext</a>&gt; that can be found at<br>\n<a href=\"https://github.com/xanonec/HOL-DS_Ext\">https://github.com/xanonec/HOL-DS_Ext</a>.</p>\n<p>A description of the project is provided on the front page of the<br>\nrepository. However, I also provide a brief summary in the form of an<br>\nenumerated list below. The main contributions are related to the type<br>\nalist from<br>\nthe theory HOL-Library.DAList and the theory HOL-Library.AList. However,<br>\nhopefully, the project contains other useful results.</p>\n<p>1. It is indicated with the relevant FIXME comments in the theory<br>\n   HOL-Library.DAList that the theory does not provide many results for the<br>\n   type alist that already exist in the standard library for the type list.<br>\n   The project that I am working on addresses this issue and transfers many<br>\n   results about the type list to the type alist.</p>\n<p>2. The project makes an attempt to integrate the theories<br>\n   HOL-Library.AList and HOL-Library.Permutation by providing congruence rules<br>\n   for many functions that are defined in the theory HOL-Library.AList under<br>\n   certain mild conditions. Furthermore, the project includes a theory of<br>\n   permutation for the type alist.</p>\n<p>3. A new type that can be shown to be isomorphic to the type fmap is<br>\n   defined as a quotient type of the type alist. This type provides an easy<br>\n   way of transferring the results from the type list to the type fmap through<br>\n   the results about the type alist. Some of the relevant transfer rules are<br>\n   provided and applied to several results about the type list (e.g. the<br>\n   induction rule list_all2_induct).</p>\n<p>I would like to discuss the project briefly with the Isabelle/HOL community:</p>\n<p>1. The subject of the project is closely related to the theories that<br>\n   already exist in the standard library of Isabelle. In fact, I believe, the<br>\n   project could be seen as a natural extension of the existing theories List,<br>\n   HOL-Library.Permutation, HOL-Library.AList, HOL-Library.DAList and<br>\n   HOL-Library.FMap. Given that the subject of the aforementioned theories<br>\n   falls into the category of general data structures, I can only imagine that<br>\n   there would be a substantial amount of interest from many independent<br>\n   parties to develop these theories further. I am, somewhat, external to the<br>\n   Isabelle/HOL community as a whole (I consider Isabelle/HOL to be a past<br>\n   time activity). Thus, I cannot be aware of all ongoing developments outside<br>\n   of the official repository. Furthermore, shamefully, I am rediscovering the<br>\n   standard library of Isabelle almost every day. Hence, I cannot be entirely<br>\n   certain that some of the work that I have done or intend to do in the<br>\n   context of this project has not been done or is being done by someone else<br>\n   concurrently. Therefore, I would appreciate any comments or advice in<br>\n   relation to this matter from the developers of the aforementioned theories<br>\n   or anyone else who may be working in this area. In particular, I seek<br>\n   answers to the following questions:</p>\n<p>1. Have the results that are presented in the repository already been<br>\n      formalised somewhere else?</p>\n<p>2. Is something similar to the project that is presented in the<br>\n      repository already being done in the context of the development of the<br>\n      standard library?</p>\n<p>3. Is something similar to the project that is presented in the<br>\n      repository already being done in the context of the development of an<br>\n      independent library on the AFP?</p>\n<p>4. Is something similar to the project that is presented in the<br>\n      repository already being done by someone privately?</p>\n<p>2. If the answers to the questions 1.1-1.4 are \"no\", then I would also<br>\n   like to obtain a preliminary assessment of the relevance of the results<br>\n   that I propose in the context of the project. Do you believe that such<br>\n   results could make an appropriate subject for an entry in the AFP? If so,<br>\n   do you foresee that there could be further interest in adding some of the<br>\n   results from the project to the standard library in the future? When/if<br>\n   answering these questions please note that the project is still in the<br>\n   early stages of the development: many sections are incomplete and some of<br>\n   the proofs are of substandard quality (these issues would be addressed and<br>\n   further results would be added before making an attempt to submit the<br>\n   repository to the AFP).</p>\n<p>Thank you</p>",
        "id": 294748253,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661194397
    },
    {
        "content": "<p>From: José Manuel Rodriguez Caballero &lt;<a href=\"mailto:josephcmac@gmail.com\">josephcmac@gmail.com</a>&gt;<br>\nHi Xanonec,</p>\n<p>I am not the right person to answer all yours questions. I just would like<br>\nto remark that there is an interesting approach to List and Permuation<br>\nusing homotopy type theory due to Vladimir Voevodsky. I provide you the<br>\nreferences in Coq:</p>\n<p><a href=\"https://github.com/UniMath/UniMath/blob/master/UniMath/Combinatorics/Lists.v\">https://github.com/UniMath/UniMath/blob/master/UniMath/Combinatorics/Lists.v</a></p>\n<p><a href=\"https://github.com/UniMath/UniMath/blob/master/UniMath/Combinatorics/StandardFiniteSets.v\">https://github.com/UniMath/UniMath/blob/master/UniMath/Combinatorics/StandardFiniteSets.v</a></p>\n<p>In his lectures at Oxford, Voevodsky explains his approach:</p>\n<ul>\n<li>\n<p>all the lectures (see point 9 in the list of lectures):<br>\n<a href=\"https://www.math.ias.edu/vladimir/Lectures\">https://www.math.ias.edu/vladimir/Lectures</a></p>\n</li>\n<li>\n<p>this particular lecture talking about permutations:<br>\n<a href=\"https://www.math.ias.edu/vladimir/sites/math.ias.edu.vladimir/files/141126-2.mp4\">https://www.math.ias.edu/vladimir/sites/math.ias.edu.vladimir/files/141126-2.mp4</a></p>\n</li>\n</ul>\n<p>Coq is not the only way to use HoTT. Here is a link to a project of HoTT in<br>\nIsabelle: <a href=\"https://github.com/jaycech3n/Isabelle-HoTT\">https://github.com/jaycech3n/Isabelle-HoTT</a></p>\n<p>So, if you are interested in exploring List and Permutations in Isabelle,<br>\nfollowing Voevodsky's approach, you have all you need.</p>\n<p>Which are the advantages of combinatorics developed from the point of view<br>\nof Homotopy Type Theory which respect to his counterpart in Simple Type<br>\nTheory? Well, I will speculate a little bit:  Topological Quantum Computing<br>\n<a href=\"http://math.uchicago.edu/~may/REU2016/REUPapers/Lee.pdf\">http://math.uchicago.edu/~may/REU2016/REUPapers/Lee.pdf</a></p>\n<p>I guess that Homotopy Type Theory will be a natural framework for formal<br>\nverification of programs written for a topological quantum computer. Of<br>\ncourse, some skeptic people may disagree. Here is an example of such a<br>\nprogram (an algorithm for knots-invariants):<br>\n<a href=\"https://www.youtube.com/watch?v=smX2lSyi2js\">https://www.youtube.com/watch?v=smX2lSyi2js</a></p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"smX2lSyi2js\" href=\"https://www.youtube.com/watch?v=smX2lSyi2js\"><img src=\"https://uploads.zulipusercontent.net/48cb12df834269421449df747087ed6edce1f380/68747470733a2f2f692e7974696d672e636f6d2f76692f736d58326c537969326a732f64656661756c742e6a7067\"></a></div><p>By the way, there will be a Workshop on Univalent Mathematics:<br>\n<a href=\"https://unimath.github.io/bham2019/\">https://unimath.github.io/bham2019/</a></p>\n<p>Kind Regards,<br>\nJosé M.</p>",
        "id": 294748270,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661194404
    },
    {
        "content": "<p>From: mailing-list anonymous &lt;<a href=\"mailto:mailing.list.anonymous@gmail.com\">mailing.list.anonymous@gmail.com</a>&gt;<br>\nDear José Manuel Rodriguez Caballero,</p>\n<p>Thank you for your reply. I highly value your comments and the references<br>\nthat you provided. Indeed, it would be interesting to explore lists and<br>\npermutations in Isabelle using HoTT. Nevertheless, this would have to be a<br>\nsubject for a different project.</p>\n<p>I believe that my question may not have been entirely transparent. Within<br>\nthe context of the project in the repository<br>\n&lt;<a href=\"https://github.com/xanonec/HOL-DS_Ext\">https://github.com/xanonec/HOL-DS_Ext</a>&gt;, I am merely transferring certain<br>\nexisting results about the type list from the theory List to the types<br>\nalist (defined in the theory HOL-Library.DAList) and fmap (defined in the<br>\ntheory HOL-Library.Finite_Map). I am using the project, primarily, to learn<br>\nmore about the datatype infrastructure and the lifting/transfer package in<br>\nIsabelle/HOL. However, I would like to understand if any of the results<br>\nfrom this project may be useful. After all, I believe, some of these<br>\nresults address the FIXME comments that I noticed in the theory<br>\nHOL-Library.DAList.</p>\n<p>The type fmap can be viewed as an associative list invariant under the<br>\npermutation of its elements, as an fset from the theory HOL-Library.FSet<br>\nand as a map from the theory Map. The process of the transfer of the<br>\nresults from the type map (from the theory Map) to the type fmap has<br>\nalready been nearly completed in the context of the development of theory<br>\nHOL-Library.Finite_Map. However, I believe that many results that can be<br>\nfound in the standard library about the types list and fset do not have<br>\ntheir equivalents for the type fmap. In general, it is my goal for the<br>\nproject in the repository to provide for each lemma in the standard library<br>\nabout the types list and fset, a similar lemma (under some mild<br>\nrestrictions) for the type fmap using the transfer package. Also, given<br>\nthat I found that it is convenient to perform the transfer of the results<br>\nabout the type list to the type fmap using the type alist, there is an<br>\nadditional benefit of enriching the theory of the type alist with the<br>\nresults about the type list that have not yet been transferred to the type<br>\nalist.</p>\n<p>Thank you</p>",
        "id": 294748344,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661194434
    }
]