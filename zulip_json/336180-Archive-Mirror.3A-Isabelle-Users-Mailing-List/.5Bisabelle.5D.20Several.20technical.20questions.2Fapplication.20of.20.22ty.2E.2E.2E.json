[
    {
        "content": "<p>From: Wolfgang Jeltsch &lt;<a href=\"mailto:wolfgang-it@jeltsch.info\">wolfgang-it@jeltsch.info</a>&gt;<br>\nI learned from Makarius yesterday that these things are not generally<br>\nintended to be possible with Isar (see the mailing list thread “How can<br>\nI access a fact statement as a term?”). That said, there are ways to get<br>\nat least closer to what you want.</p>\n<p>The key is, in my opinion, the <code>?case</code> variable. While it won’t give you<br>\naccess to the subgoals of the <code>proof</code>–<code>qed</code> block, it at least can give<br>\nyou access to their conclusions.</p>\n<p>The <code>induction</code> and <code>cases</code> proof methods create named cases, and a<br>\n<code>case</code> statement subsequently introduces the <code>?case</code> variable for the<br>\nspecified case. You can make this mechanism available for other proof<br>\nmethods by means of the <code>goal_cases</code> method. For example, you can write:</p>\n<p>lemma \"(z :: int) &lt; 0 ∨ z &gt; 0 ⟹ ¦z¦ ≠ 0\"<br>\n    proof (elim disjE, goal_cases negative positive)<br>\n      case negative<br>\n      then show ?case by simp<br>\n    next<br>\n      case positive<br>\n      then show ?case by simp<br>\n    qed</p>\n<p>This approach works very well for me when defining shortcuts for complex<br>\nproof method expressions via Eisbach: I just put the application of<br>\n<code>goal_cases</code> into the shortcut definition, so that in the Isar proofs I<br>\nonly have a single application of my custom proof method, which<br>\ngenerates the named cases for me. In the above example I would have the<br>\nEisbach definition</p>\n<p>method negative_positive =<br>\n      (elim disjE, goal_cases negative positive)</p>\n<p>and then start the proof of the lemma with <code>proof negative_positive</code>.</p>\n<p>As soon as you have <code>?case</code> available, you can match it against a<br>\npattern to get hold of parts of it. For instance, you could add the line</p>\n<p>let \"_ ≠ ?zero\" = ?case</p>\n<p>to the above code after <code>case negative</code>, and this would result in<br>\n<code>?zero</code> being <code>0 :: int</code>.</p>\n<p>All the best,<br>\nWolfgang</p>",
        "id": 294750151,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661195121
    }
]