[
    {
        "content": "<p>From: Michael Färber &lt;<a href=\"mailto:michael.faerber@uibk.ac.at\">michael.faerber@uibk.ac.at</a>&gt;<br>\nDear mailing list,</p>\n<p>I would like to prove an object-level implication via Isabelle's ML <br>\ninterface.<br>\nThe code looks as follows (to be executed in FOL):</p>\n<p>ML {*<br>\nval pimp = Thm.assume @{cprop P} |&gt; Thm.implies_intr @{cprop P}<br>\nval impi = @{thm IFOL.impI}<br>\nval inst = Thm.instantiate' [] [SOME @{cterm \"P::o\"}, SOME @{cterm <br>\n\"P::o\"}] impi<br>\nval oimp = Thm.implies_elim inst pimp<br>\n*}</p>\n<p>The output is:</p>\n<p>val pimp = \"P ⟹ P\": thm<br>\nval impi = \"(?P ⟹ ?Q) ⟹ ?P ⟶ ?Q\": thm<br>\nval inst = \"(P ⟹ P) ⟹ P ⟶ P\": thm<br>\nval oimp = \"P ⟶ P\": thm</p>\n<p>I'm currently quite annnoyed by the fact that I have to instantiate my <br>\ntheorem in order to be able to show my final implication.<br>\nIf I do not use the instantiated version, but the original IFOL.impl <br>\ntheorem, I get the exception \"implies_elim: major premise\".<br>\nI had this problem in many different contexts and find it extremely <br>\nannoying.<br>\nIs there a faster way to solve this problem and similar ones, e.g. a <br>\nversion of Thm.implies_elim that automatically instantiates variables?</p>\n<p>Cheers,<br>\nMichael</p>",
        "id": 294674879,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661174610
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nOn 18/05/16 18:00, Michael Färber wrote:</p>\n<blockquote>\n<p>I would like to prove an object-level implication via Isabelle's ML<br>\ninterface.</p>\n</blockquote>\n<p>This is official called \"Isabelle/ML\". It is documented to some extent<br>\nin the \"implementation\" manual.</p>\n<blockquote>\n<p>The code looks as follows (to be executed in FOL):</p>\n<p>ML {*<br>\nval pimp = Thm.assume @{cprop P} |&gt; Thm.implies_intr @{cprop P}<br>\nval impi = @{thm IFOL.impI}<br>\nval inst = Thm.instantiate' [] [SOME @{cterm \"P::o\"}, SOME @{cterm<br>\n\"P::o\"}] impi<br>\nval oimp = Thm.implies_elim inst pimp<br>\n*}</p>\n<p>I'm currently quite annnoyed by the fact that I have to instantiate my<br>\ntheorem in order to be able to show my final implication.</p>\n</blockquote>\n<p>Thm.assume, Thm.implies_intr are primitive rules of the logical<br>\nframework (see \"implementation\", section 2.3.1). These are typically<br>\nused for internal infrastructure or specialized tools. The canonical way<br>\nto work with rules in Isabelle is via the resolution-combinators for<br>\nobject-level rules (see \"implementation\", section 2.4).</p>\n<p>Makarius</p>",
        "id": 294675033,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661174650
    }
]