[
    {
        "content": "<p>From: \"Max W. Haslbeck\" &lt;<a href=\"mailto:max.haslbeck@gmx.de\">max.haslbeck@gmx.de</a>&gt;<br>\nHi,</p>\n<p>I want to write a function definition where I \"hide\" the recursive call in a let definition. I have the following minimal working example:</p>\n<p>function test :: \"nat ⇒ nat\" where<br>\n  \"test n = (let f = test in (if n &gt; 0 then f (n - 1) else 0))\"<br>\n  by pat_completeness auto<br>\ntermination<br>\n  apply(rule)</p>\n<p>In the proof context all useful information to show termination is apparently lost. The output panel shows </p>\n<p>proof (prove)<br>\ngoal (2 subgoals):</p>\n<ol>\n<li>wf ?R</li>\n<li>/\\n x. (x, n) ∈ ?R</li>\n</ol>\n<p>Can I show termination of this function or do I have to do without the let definition?</p>\n<p>Thanks and Gruß<br>\nMax</p>",
        "id": 294763368,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661200711
    },
    {
        "content": "<p>From: Alexander Krauss &lt;<a href=\"mailto:krauss@in.tum.de\">krauss@in.tum.de</a>&gt;<br>\nHi Max,</p>\n<p>Here, the static analysis in the function package fails to recognize the<br>\narguments of the recursive calls here, since they are obscured by the<br>\nlet construct.</p>\n<p>In this case, you can guide the analysis by adding a congruence rule:</p>\n<p>context<br>\nbegin</p>\n<p>lemma let_unfold_cong[fundef_cong]: \"f x = g y ⟹ Let x f = Let y g\"<br>\n  by simp</p>\n<p>fun test :: \"nat ⇒ nat\" where<br>\n  \"test n = (let f = test in (if n &gt; 0 then f (n - 1) else 0))\"</p>\n<p>end</p>\n<p>Disclaimer: This works nicely in this simple case, but may produce<br>\nunexpected effects in other situations.</p>\n<p>Alex</p>",
        "id": 294763402,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661200726
    }
]