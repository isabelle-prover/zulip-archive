[
    {
        "content": "<p>From: Holden Lee &lt;<a href=\"mailto:hl422@cam.ac.uk\">hl422@cam.ac.uk</a>&gt;<br>\nIn general I can't seem to get auto/simp to check conditions thoroughly.<br>\nHere is an example.</p>\n<p>lemma (in module) mult1:<br>\n  assumes h1: \"finite S\" and h2: \"S⊆ carrier M\"<br>\n  shows \"(⨁⇘M⇙x∈S. 𝟭⇘R⇙⊙⇘M⇙ x) = (⨁⇘M⇙x∈S. x) \"<br>\nproof -<br>\n  from assms show ?thesis<br>\n ........................<br>\ndone<br>\nqed</p>\n<p>I tried <em>apply (auto cong: finsum_cong')</em> but this doesn't work. Here, the<br>\nfollowing does work:* apply (intro finsum_cong', auto)*. (But in more<br>\ncomplicated things*, if I can't use auto/simp then I'm forced to break the<br>\nproblem into pieces by subgoal_tac.)</p>\n<p>I'm confused as to why intro would be stronger than cong here (especially<br>\nsince the name finsum_cong' suggests that it be used as a congruence rule).<br>\nIn general what does \"intro\" do that auto/simp cong does not? To my<br>\nunderstanding, when simp wants to prove P and P appears in the conclusion<br>\nof a simp rule, it should try to prove the premises of the rule; wouldn't<br>\nthis be the same as intro?</p>\n<p>What I would imagine the simplifier does above is<br>\n(1) look at finsum_cong'<br>\n\"[| A = B; g ∈ B -&gt; carrier G;<br>\n      !!i. i ∈ B ==&gt; f i = g i |] ==&gt; finsum G f A = finsum G g B\"<br>\nand from this, try to show<br>\n(1) S=S<br>\n(2) g∈ S -&gt; carrier M<br>\n(3) !!x∈ B ==&gt;𝟭⇘R⇙⊙⇘M⇙ x = x</p>\n<p>(2) should be discharged by the simp rule Pi_I'[simp]: \"(!!x. x : A --&gt; f x<br>\n: B x) ==&gt; f : Pi A B\", the fact that S⊆ carrier M, and hence that %x. x is<br>\nin S-&gt;carrier M (in fact this is another simp rule in FuncSet)<br>\n(3) should be simplified by the module axioms (declared simp).</p>\n<p>Thanks,<br>\nHolden</p>\n<p>*Another example ... ==&gt;<br>\n (⨁⇘V⇙v∈S. (λv∈S. m1 v ⊕⇘K⇙ m2 v) v ⊙⇘V⇙ v) = (⨁⇘V⇙v∈S. m1 v ⊙⇘V⇙ v) ⊕⇘V⇙<br>\n(⨁⇘V⇙v∈S. m2 v ⊙⇘V⇙ v)<br>\nI pass to auto/simp a rule that combines sums over the same set provided<br>\nthat the terms are in the carrier, so I would expect the RHS to be<br>\nrewritten (but it's not). There are of course also simp/intro rules for<br>\nshowing that a sum of terms in carrier V is also in carrier V, and that<br>\nscalar multiplication of terms in carrier V is also in carrier V.</p>\n<p>Here is part of the simp_trace, if it helps. (I don't know how to read it.)</p>\n<p>[4]SIMPLIFIER INVOKED ON THE FOLLOWING TERM:<br>\nx ∈ S ⟹ ?g x ∈ carrier M ≡ ?Q'1<br>\n[4]Adding rewrite rule \"??.unknown\":<br>\nx ∈ S ≡ True<br>\n[3]SUCCEEDED<br>\nx ∈ S ⟶ ?g x ∈ carrier M ≡ x ∈ S ⟶ ?g x ∈ carrier M<br>\n[2]FAILED<br>\n(⋀x. x ∈ S ⟶ ?g x ∈ carrier M) ⟹ ?g ∈ S → carrier M ≡ True<br>\n[1]Congruence proof failed.  Could not prove<br>\nS ≡ ?B ⟹<br>\n?g ∈ ?B → carrier M ⟹<br>\n(⋀i. i ∈ ?B ⟹ 𝟭 ⊙⇘M⇙ i ≡ ?g i) ⟹ finsum M (op ⊙⇘M⇙ 𝟭) S ≡ finsum M ?g ?B</p>",
        "id": 294284571,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660921428
    }
]