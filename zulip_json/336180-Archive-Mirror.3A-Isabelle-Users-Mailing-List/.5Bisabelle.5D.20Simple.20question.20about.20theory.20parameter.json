[
    {
        "content": "<p>From: Stephan van Staden &lt;<a href=\"mailto:Stephan.vanStaden@inf.ethz.ch\">Stephan.vanStaden@inf.ethz.ch</a>&gt;<br>\nDear all,</p>\n<p>Here is a simplified version of my problem, which should have a simple <br>\nanswer.</p>\n<p>I wish to prove a bunch of theorems about an arbitrary set S of numbers <br>\nthat contains a designated element, say 1. For example, S intersect S <br>\nand S union S will both contain 1, etc.</p>\n<p>Thereafter, I wish to get theorems for free about particular sets that <br>\ncontain 1. For example, {1,2,3} intersect {1,2,3} contains 1, etc.</p>\n<p>What is the recommended way to do this in Isabelle?</p>\n<p>Thanks,<br>\nStephan</p>",
        "id": 294217099,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660895490
    },
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\nAm 23/07/2012 15:12, schrieb Stephan van Staden:</p>\n<blockquote>\n<p>Dear all,</p>\n<p>Here is a simplified version of my problem, which should have a simple answer.</p>\n<p>I wish to prove a bunch of theorems about an arbitrary set S of numbers that<br>\ncontains a designated element, say 1. For example, S intersect S and S union S<br>\nwill both contain 1, etc.</p>\n<p>Thereafter, I wish to get theorems for free about particular sets that contain<br>\n1. For example, {1,2,3} intersect {1,2,3} contains 1, etc.</p>\n<p>What is the recommended way to do this in Isabelle?</p>\n</blockquote>\n<p>It sounds like locales could be the answer.</p>\n<p>Tobias</p>\n<blockquote>\n<p>Thanks,<br>\nStephan</p>\n</blockquote>",
        "id": 294217177,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660895523
    },
    {
        "content": "<p>From: Stephan van Staden &lt;<a href=\"mailto:Stephan.vanStaden@inf.ethz.ch\">Stephan.vanStaden@inf.ethz.ch</a>&gt;<br>\nThanks. Since Isabelle does not support dependent types, am I then <br>\nforced to define the relations on a set in the following (roundabout) <br>\nway? Stating and proving closure properties seem rather tedious, and it <br>\nwould be great if there is a better way to do things.</p>\n<p>definition comp :: \"('a × 'b) set ⇒ ('b × 'c) set ⇒ ('a × 'c) set\" <br>\n(infixr \";;\" 25) where<br>\n\"r ;; r' ≡ {t. ∃s s' s''. (s,s') ∈ r ∧ (s',s'') ∈ r' ∧ t = (s,s'')}\"</p>\n<p>locale relations_on_a_set =<br>\nfixes S :: \"'a set\"<br>\nbegin<br>\ndefinition Relations_on_S :: \"('a × 'a) set set\" where<br>\n\"Relations_on_S ≡ {r. ∀(s, s') ∈ r. s ∈ S ∧ s' ∈ S}\"<br>\nlemma comp_closed: \"r ∈ Relations_on_S ⟹ r' ∈ Relations_on_S ⟹ (r ;; r') <br>\n∈ Relations_on_S\"<br>\nsorry<br>\nend</p>\n<p>Stephan</p>",
        "id": 294217451,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660895664
    },
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\nAm 25/07/2012 17:00, schrieb Stephan van Staden:</p>\n<blockquote>\n<p>Thanks. Since Isabelle does not support dependent types, am I then forced to<br>\ndefine the relations on a set in the following (roundabout) way? Stating and<br>\nproving closure properties seem rather tedious, and it would be great if there<br>\nis a better way to do things.</p>\n</blockquote>\n<p>This is the canocial way in simply typed systems.</p>\n<blockquote>\n<p>definition comp :: \"('a × 'b) set ⇒ ('b × 'c) set ⇒ ('a × 'c) set\" (infixr \";;\"<br>\n25) where<br>\n\"r ;; r' ≡ {t. ∃s s' s''. (s,s') ∈ r ∧ (s',s'') ∈ r' ∧ t = (s,s'')}\"</p>\n</blockquote>\n<p>I strongly recommend to reuse existing concepts. It can save you an awful lot of<br>\nproofs. In this case \";;\" already exists as \"O\". Don't let the fact that it is<br>\nintroduced as an inductive set confuse you.</p>\n<blockquote>\n<p>locale relations_on_a_set =<br>\nfixes S :: \"'a set\"<br>\nbegin<br>\ndefinition Relations_on_S :: \"('a × 'a) set set\" where<br>\n\"Relations_on_S ≡ {r. ∀(s, s') ∈ r. s ∈ S ∧ s' ∈ S}\"<br>\nlemma comp_closed: \"r ∈ Relations_on_S ⟹ r' ∈ Relations_on_S ⟹ (r ;; r') ∈<br>\nRelations_on_S\"<br>\nsorry<br>\nend</p>\n</blockquote>\n<p>Unless you want to assume some properties of S you can also get rid of the<br>\nlocale and make S an explicit parameter of Relations_on (which also exists<br>\nalready, it is called Field).</p>\n<p>Tobias</p>\n<blockquote>\n<p>Stephan</p>\n<p>On 07/23/2012 08:47 PM, Tobias Nipkow wrote:</p>\n<blockquote>\n<p>Am 23/07/2012 15:12, schrieb Stephan van Staden:</p>\n<blockquote>\n<p>Dear all,</p>\n<p>Here is a simplified version of my problem, which should have a simple answer.</p>\n<p>I wish to prove a bunch of theorems about an arbitrary set S of numbers that<br>\ncontains a designated element, say 1. For example, S intersect S and S union S<br>\nwill both contain 1, etc.</p>\n<p>Thereafter, I wish to get theorems for free about particular sets that contain<br>\n1. For example, {1,2,3} intersect {1,2,3} contains 1, etc.</p>\n<p>What is the recommended way to do this in Isabelle?<br>\nIt sounds like locales could be the answer.</p>\n</blockquote>\n<p>Tobias</p>\n<blockquote>\n<p>Thanks,<br>\nStephan<br>\n</p>\n</blockquote>\n</blockquote>\n</blockquote>",
        "id": 294217540,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660895719
    },
    {
        "content": "<p>From: Stephan van Staden &lt;<a href=\"mailto:Stephan.vanStaden@inf.ethz.ch\">Stephan.vanStaden@inf.ethz.ch</a>&gt;<br>\nGreat, thanks! I used relations just to simplify the example. In <br>\npractice I will make additional assumptions about S.</p>\n<p>Stephan</p>",
        "id": 294217641,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660895768
    }
]