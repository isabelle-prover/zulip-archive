[
    {
        "content": "<p>From: \"Roger H.\" &lt;<a href=\"mailto:s57076@hotmail.com\">s57076@hotmail.com</a>&gt;<br>\nHi,</p>\n<p>how can i prove</p>\n<p>set l1 ⊆ {Suc 0, 2, 3} ⟶ set l2 ⊆ {Suc 0, 2, 3, 4} ⟶ set (addlists l1 l2) ⊆ {Suc 0, 2, 3, 4, 5, 6, 7}</p>\n<p>(by the way<br>\nfun  addlists :: \"nat list =&gt; nat list =&gt; nat list\" where<br>\n\"addlists [] [] = []\" |<br>\n\"addlists (x#xs) [] = undefined\" |<br>\n\"addlists [] (x#xs) = undefined\" |<br>\n\"addlists (x#xs) (y#ys) = (x+y) # (addlists xs ys)\"<br>\n)</p>\n<p>Many thanks!</p>",
        "id": 294279411,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660919839
    },
    {
        "content": "<p>From: Manuel Eberl &lt;<a href=\"mailto:eberlm@in.tum.de\">eberlm@in.tum.de</a>&gt;<br>\nHallo,</p>\n<p>you can't (hopefully), because it's simply not true. Running nitpick<br>\nwill provide you with a counterexample, such as l1 = [3], l2 = [].</p>\n<p>You need the additional assumption that l1 and l2 have the same length.<br>\nThen it works by simple induction over the function definition:</p>\n<p>lemma<br>\n    assumes \"length l1 = length l2\" \"set l1 ⊆ {Suc 0, 2, 3}\" \"set l2 ⊆<br>\n{Suc 0, 2, 3, 4}\"<br>\n    shows \"set (addlists l1 l2) ⊆ {Suc 0, 2, 3, 4, 5, 6, 7}\"<br>\n  using assms by (induction l1 l2 rule: addlists.induct) auto</p>\n<p>Note that you could also define your addlists function in terms of<br>\nexisting functions, like this:</p>\n<p>definition \"addlists xs ys = [x + y. (x,y) ← zip xs ys]\"</p>\n<p>which is syntactic sugar for</p>\n<p>definition \"addlists xs ys = map (λ(x,y). x + y) (zip xs ys)\"</p>\n<p>This is equivalent to your function if the two lists have the same<br>\nlength, otherwise the longer list is implicitly “truncated”, as is the<br>\ndefinition of zip. With this definition, your lemma goes through even<br>\nwithout the additional assumption that the lengths are equal. You can do<br>\nthe induction with the rule list_induct2' (which is the same as your<br>\naddlists.induct).</p>\n<p>Cheers,<br>\nManuel</p>",
        "id": 294279443,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660919851
    }
]