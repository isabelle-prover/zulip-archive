[
    {
        "content": "<p>From: John Matthews &lt;<a href=\"mailto:matthews@galois.com\">matthews@galois.com</a>&gt;<br>\nI'm running into some behavior of locales that seems to violate  <br>\n\"locality\". I'm using Isabelle2008. If I define the following locale</p>\n<p>locale l =<br>\n  fixes x :: nat<br>\nbegin</p>\n<p>definition<br>\n   f :: \"nat =&gt; nat\" where<br>\n\"f y = x + y\"</p>\n<p>end</p>\n<p>and then try to simplify the following (unprovable) lemma using the  <br>\ndefinition of f:</p>\n<p>lemma (in l)<br>\n  \"f y = 2 * y\"<br>\napply (simp add: f_def)</p>\n<p>then I get the subgoal \"x = y\", as expected. If, however, I add a  <br>\nhypothesis about x to the lemma and try to simplify it again:</p>\n<p>lemma (in l)<br>\n  \"x = y ==&gt; f y = 2 * y\"<br>\napply (simp add: f_def)</p>\n<p>then I'd expect the lemma to be provable, but instead I get the  <br>\nfollowing subgoal:</p>\n<p>1.  x = y ==&gt; l.f y y = 2 * y</p>\n<p>Eliminating the locale l and replacing \"fixes x :: nat\" with \"consts  <br>\nx :: nat\" causes the lemma to be provable, so it seems that the  <br>\nabstraction of a locale as a local theory is being violated somehow.</p>\n<p>Thanks,<br>\n-john</p>",
        "id": 294062905,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660824395
    },
    {
        "content": "<p>From: Brian Huffman &lt;<a href=\"mailto:brianh@cs.pdx.edu\">brianh@cs.pdx.edu</a>&gt;<br>\nQuoting John Matthews &lt;<a href=\"mailto:matthews@galois.com\">matthews@galois.com</a>&gt;:</p>\n<blockquote>\n<p>I'm running into some behavior of locales that seems to violate<br>\n\"locality\". I'm using Isabelle2008. If I define the following locale</p>\n<p>locale l =<br>\n fixes x :: nat<br>\nbegin</p>\n<p>definition<br>\n  f :: \"nat =&gt; nat\" where<br>\n\"f y = x + y\"</p>\n<p>end<br>\n...<br>\nIf, however, I add a<br>\nhypothesis about x to the lemma and try to simplify it again:</p>\n<p>lemma (in l)<br>\n \"x = y ==&gt; f y = 2 * y\"<br>\napply (simp add: f_def)</p>\n<p>then I'd expect the lemma to be provable, but instead I get the<br>\nfollowing subgoal:</p>\n<ol>\n<li>x = y ==&gt; l.f y y = 2 * y</li>\n</ol>\n</blockquote>\n<p>I think I understand what is going on here. When you define the  <br>\nconstant f inside the locale l, it defines a global constant named  <br>\n\"l.f\", which has extra parameters corresponding to the locale fixes.</p>\n<p>Within the context of locale l, when you write \"f\", this is really  <br>\njust an abbreviation for \"l.f x\". So your lemma is really equivalent to:</p>\n<p>lemma (in l) \"x = y ==&gt; l.f x y = 2 * y\"</p>\n<p>The simplifier then happily rewrites x to y in the conclusion:</p>\n<ol>\n<li>x = y ==&gt; l.f y y = 2 * y</li>\n</ol>\n<blockquote>\n<p>Eliminating the locale l and replacing \"fixes x :: nat\" with \"consts x<br>\n:: nat\" causes the lemma to be provable, so it seems that the<br>\nabstraction of a locale as a local theory is being violated somehow.</p>\n</blockquote>\n<p>I agree that the locale abstraction is being violated in this case.  <br>\nEven if locale-defined constants are implemented as abbreviations,  <br>\nthis should not be apparent to the user. Here's my idea for a possible  <br>\nremedy: Within the locale, the simplifier should use a congruence rule  <br>\nthat prevents the implicit parameters from being rewritten:</p>\n<p>lemma f_cong [cong]: \"y = z ==&gt; l.f x y = l.f x z\"</p>\n<ul>\n<li>Brian</li>\n</ul>",
        "id": 294062942,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660824410
    }
]