[
    {
        "content": "<p>From: John Ridgway &lt;<a href=\"mailto:john@jacelridge.com\">john@jacelridge.com</a>&gt;<br>\nI have a problem with simplification in Isabelle/Isar with HOL.   <br>\nSpecifically, given the following, the attempt to apply(simp) goes  <br>\ninto never-never-land.  Can anyone explain to me why, or tell me how  <br>\nto fix it?</p>\n<p>Peace</p>\n<ul>\n<li>John<p>theory temp = Main:</p>\n<p>consts<br>\n    fib :: \"(nat * nat) set\";</p>\n<p>inductive fib<br>\n    intros<br>\n  \"(0, 1) : fib\"<br>\n  \"(1, 1) : fib\"<br>\n  \"[| (n, fn) : fib; (n+1, fnp1) : fib |] ==&gt; (n+2, fn+fnp1) : fib\";</p>\n</li>\n</ul>\n<p>lemma temp: \"<br>\n   [|<br>\n     (n, fn) : fib;<br>\n     ! fn'.<br>\n       ((n, fn') : fib --&gt;<br>\n         fn' = fn);<br>\n     fn2 = fn + 1<br>\n   |]<br>\n   ==&gt;<br>\n   epsilon2 = epsilon_90\";</p>\n<p>apply(simp);</p>",
        "id": 294048931,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660818521
    },
    {
        "content": "<p>From: Alexander Krauss &lt;<a href=\"mailto:krauss@in.tum.de\">krauss@in.tum.de</a>&gt;<br>\nJohn,</p>\n<blockquote>\n<p>Specifically, given the following, the attempt to apply(simp) goes into<br>\nnever-never-land.  Can anyone explain to me why, or tell me how to fix it?<br>\n[...]<br>\nlemma temp: \"<br>\n  [|<br>\n    (n, fn) : fib;<br>\n    ! fn'.<br>\n      ((n, fn') : fib --&gt;<br>\n        fn' = fn);<br>\n    fn2 = fn + 1<br>\n  |]<br>\n  ==&gt;<br>\n  epsilon2 = epsilon_90\";</p>\n<p>apply(simp);</p>\n</blockquote>\n<blockquote>\n<p>From the trace, it seems that the following happens:</p>\n</blockquote>\n<ul>\n<li>\n<p>Premise 2 is turned around (probably in order not to match<br>\neverything), resulting in the conditional rewrite rule</p>\n<p>\"(n, ?fn') : fib ==&gt; fn == ?fn'\"</p>\n</li>\n<li>\n<p>That rule matches the \"fn\" in premise 3, and since premise 1 matches<br>\nthe condition, \"?fn'\" is instantiated to \"fn\", hence \"fn\" gets rewritten<br>\nto itself, which is then repeated.</p>\n</li>\n</ul>\n<p>To avoid this situation, you can either change your theorem statement,<br>\nor use one of the modifiers \"no_asm\", \"no_asm_use\" or \"no_asm_simp\".<br>\nThey are explained in Section 3.1.5. in the tutorial.</p>\n<p>Hope this helps,<br>\nAlex</p>",
        "id": 294048937,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660818526
    }
]