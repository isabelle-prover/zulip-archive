[
    {
        "content": "<p>From: Joshua Chen &lt;<a href=\"mailto:joshua.chen@uni-bonn.de\">joshua.chen@uni-bonn.de</a>&gt;<br>\nDearÂ Isabelle users,</p>\n<p>I am working on implementing a new object type theory, and <br>\nhave run into the following problem when testing my <br>\nfunction type definition (which I can provide if <br>\nnecessary, it's mostly the same as that in <br>\nsrc/CTT/CTT.thy).</p>\n<p>Code:</p>\n<p>1 lemma lemma1: \"!!x. A : U ==&gt; B : U ==&gt; x : A ==&gt; <br>\n\\&lt;^bold&gt;\\lambda y. x : B -&gt; A\" ..<br>\n2<br>\n3 lemma \"[| A : U;  B : U |] ==&gt; \\&lt;^bold&gt;\\lambda x. <br>\n\\&lt;^bold&gt;\\lambda y. x : A -&gt; B -&gt; A\"<br>\n4   apply standard<br>\n5   apply (simp_all add: lemma1)</p>\n<p>Everything is fine up to line 5, where I try to use <br>\nsimp_all with lemma1.<br>\nThe output after line 4 is:</p>\n<p>proof (prove)<br>\ngoal (2 subgoals):</p>\n<p>1. A : U ==&gt; B : U ==&gt; A : U<br>\n  2. !!x. A : U ==&gt; B : U ==&gt; x : A ==&gt; \\&lt;^bold&gt;\\lambda y. <br>\nx : B -&gt; A</p>\n<p>and after line 5:</p>\n<p>proof (prove)<br>\ngoal (1 subgoal):</p>\n<p>1. !!x. A : U ==&gt; B : U ==&gt; x : A ==&gt; \\&lt;^bold&gt;\\lambda y. <br>\nx : B -&gt; A<br>\n[1]SIMPLIFIER INVOKED ON THE FOLLOWING TERM:<br>\nA : U ==&gt; B : U ==&gt; A : U<br>\n[1]SIMPLIFIER INVOKED ON THE FOLLOWING TERM:<br>\n!!x. A : U ==&gt; B : U ==&gt; x : A ==&gt; \\&lt;^bold&gt;\\lambda y. x : <br>\nB -&gt; A</p>\n<p>Would anyone know why the simplifier did not use lemma1 to <br>\nsolve subgoal 2?</p>\n<p>Thanks very much for any advice!</p>\n<p>Best,<br>\nJosh</p>",
        "id": 294733026,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661188775
    },
    {
        "content": "<p>From: Joshua Chen &lt;<a href=\"mailto:joshua.chen@uni-bonn.de\">joshua.chen@uni-bonn.de</a>&gt;<br>\nAh, my apologies. I believe I misunderstood how the <br>\nsimplifier works, and was expecting it to immediately <br>\nrecognize when a given rule corresponds exactly to a <br>\nsubgoal.<br>\nIs there any proof method that does this instead?</p>\n<p>I was able to use \"apply (rule lemma1)\" to obtain three <br>\nnew subgoals</p>\n<p>1. !!x. A : U ==&gt; B : U ==&gt; x : A ==&gt; A : U<br>\n  2. !!x. A : U ==&gt; B : U ==&gt; x : A ==&gt; B : U<br>\n  3. !!x. A : U ==&gt; B : U ==&gt; x : A ==&gt; x : A</p>\n<p>which I then apply simp to prove, but it would be nice if <br>\nI could write something like \"apply (lemma lemma1)\" when I <br>\nhave a proof state with \\phi as a subgoal, and have <br>\nalready previously proved \\phi. I've looked in the docs <br>\nbut haven't quite found something like this.</p>\n<p>Best,<br>\nJosh</p>",
        "id": 294733063,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661188788
    },
    {
        "content": "<p>From: Lawrence Paulson &lt;<a href=\"mailto:lp15@cam.ac.uk\">lp15@cam.ac.uk</a>&gt;<br>\nHi Joshua,</p>\n<p>Implementing a new logic in Isabelle is very much more difficult than using Isabelle/HOL or Isabelle/ZF out of the box. The simplifier and classical reasoner both have to be set up for a new logic, and this is only possible if the logic conforms to the basic requirements. For the simplifier, you need an equality relation taking just two arguments (so x=y, not x=y:A) and satisfying the usual properties. For the classical reasoner, you need normal-looking natural deduction rules, and I'm not sure how well it will work if your rules mention proof objects explicitly.</p>\n<p>Anyway, by default, simp will do little or nothing for you. You will need to use the primitive proof methods such as rule and assumption. In the example you give, your three subgoals can all be solved by assumption.</p>\n<p>You'll need to follow CTT (and possibly CCL) very closely to see how things are done there. CTT implements its own very basic simplifier that works by resolution alone. (This relies on having extensional equality.)</p>\n<p>Larry Paulson</p>",
        "id": 294733291,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661188855
    }
]