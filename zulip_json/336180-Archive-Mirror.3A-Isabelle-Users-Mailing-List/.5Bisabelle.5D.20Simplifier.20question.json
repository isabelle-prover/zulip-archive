[
    {
        "content": "<p>From: Peter Lammich &lt;<a href=\"mailto:peter.lammich@uni-muenster.de\">peter.lammich@uni-muenster.de</a>&gt;<br>\nI wonder how to influence the precedence of simplifier rules, I have the<br>\nfollowing problem using the Multiset library:</p>\n<p>theory Scratch<br>\nimports Main Multiset<br>\nbegin</p>\n<p>lemma mset_singleton_eq[simp]: \"a :# {#b#} = (a=b)\" by auto</p>\n<p>lemma \"s:#{#f#} ==&gt; (s=f)\"<br>\n  apply simp</p>\n<p>--&gt;This leaves me with the subgoal<br>\n 0 &lt; (if f = s then 1 else 0) ==&gt; s = f<br>\nOf course, I could have used (simp split: split_if_asm) to resolve this,<br>\nbut my point is: Why did the simplifier not use mset_singleton_eq, that<br>\nwas just declared as [simp].<br>\nExamining the simplifier trace gives me, that (Multiset.count_single) is<br>\nused instead (as \"x:#A\" is a syntactic sugar for \"0&lt;count A x\") .<br>\nCan I get the simplifier to use my lemma instead, without erasing<br>\ncount_single from the default simpset ?</p>\n<p>Bests and thanks in advance for any hints,<br>\n  Peter</p>",
        "id": 294051391,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660819636
    },
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\nThe two lemmas</p>\n<p>count {#b#} a = ...<br>\n0 &lt; count {#b#} a =</p>\n<p>form a critical pair, which is always asking for trouble. Since the <br>\nsimplifier works bottom-up, the second lemma will never be applicable if <br>\nthe first one is present. Sorry.</p>\n<p>The canonical thing would be to add the critical pair as another lemma:</p>\n<p>0 &lt; (if a = b then 1 else 0) = (a = b).</p>\n<p>Tobias</p>\n<p>Peter Lammich schrieb:</p>",
        "id": 294051414,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660819645
    },
    {
        "content": "<p>From: Peter Lammich &lt;<a href=\"mailto:peter.lammich@uni-muenster.de\">peter.lammich@uni-muenster.de</a>&gt;<br>\nI have the following lemma about foldl:</p>\n<p>\"foldl op @ ?i ?ww = ?i @ foldl op @ [] ?ww\"  (or with any other<br>\nsuitable operator like \\&lt;union&gt;)</p>\n<p>Using this as a simplification lemma loops (I think because repeatedly<br>\nrewriting the RHS with \"?i=[]\").<br>\nBut reformulating the lemma as \"?i~=[] ==&gt; foldl op @ ?i ?ww = ?i @<br>\nfoldl op @ [] ?ww\" does not help, because I<br>\nwant it for all expressions ?i (except literal \"[]\").</p>\n<p>Is there any way to set the simplifier up to make the intended<br>\nsimplification, i.e. simplify with the above lemma only if ?i is not a<br>\nliteral \"[]\" ?</p>\n<p>Many thanks in advance, yours<br>\n  Peter</p>\n<p>p.s. My current workaround is to instantiate ?i using [of exp], but I'd<br>\nlike to have it automatically.</p>",
        "id": 294052295,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660820032
    },
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\nI don't think this can be done except by a simplification procedure (in <br>\nML) which looks at the actual term representation.</p>\n<p>Tobias</p>\n<p>Peter Lammich wrote:</p>",
        "id": 294052296,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660820035
    }
]