[
    {
        "content": "<p>From: Jared Davis &lt;<a href=\"mailto:jared@cs.utexas.edu\">jared@cs.utexas.edu</a>&gt;<br>\nHi,</p>\n<p>Thanks for the help yesterday.  Now I have some more questions, mostly about how <br>\nto control the rewriter more effectively.  I have used ACL2 before, and when I <br>\ngive it a rule of the form,</p>\n<p>[| hyp1 ; ... ; hypN |] ==&gt; lhs = rhs,</p>\n<p>its simplifier will basically:</p>\n<p>1. Try to match lhs against subterms in the goal, inside-out,<br>\n   2. Upon finding a match, sigma, instantiate the hyps with sigma and try to <br>\nrewrite them to True using other rewrite rules,</p>\n<p>3. If all hyps rewrite to True, replace the matched subterm with rhs/sigma.</p>\n<p>Does Isabelle's simplifier use a similar strategy?  If so, how does it handle <br>\nfree variables in hypotheses?  Also, is there any way to tell the simplifier to <br>\nonly backwards chain a few times when trying to relieve certain hyps that might <br>\nbe expensive or trigger looping?  Is there a way to write syntactic conditions <br>\nas hypotheses, e.g., apply unless some variable has literally matched \"0\", etc.? <br>\n  Finally, I've noticed that some theorems in the tutorial are presented with <br>\noutermost, universal quantifiers, e.g., they have the form !!x . foo(x,y).  Is <br>\nthere a reason to prefer this to just writing foo(x,y)?</p>\n<p>Thanks,<br>\n    Jared</p>",
        "id": 294041899,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660815668
    },
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;</p>\n<blockquote>\n<p>Thanks for the help yesterday.  Now I have some more questions, mostly <br>\nabout how to control the rewriter more effectively.  I have used ACL2 <br>\nbefore, and when I give it a rule of the form,</p>\n<p>[| hyp1 ; ... ; hypN |] ==&gt; lhs = rhs,</p>\n<p>its simplifier will basically:</p>\n<p>1. Try to match lhs against subterms in the goal, inside-out,<br>\n  2. Upon finding a match, sigma, instantiate the hyps with sigma and <br>\ntry to rewrite them to True using other rewrite rules,<br>\n  3. If all hyps rewrite to True, replace the matched subterm with <br>\nrhs/sigma.</p>\n<p>Does Isabelle's simplifier use a similar strategy?</p>\n</blockquote>\n<p>Yes.</p>\n<blockquote>\n<p>If so, how does it <br>\nhandle free variables in hypotheses?</p>\n</blockquote>\n<p>They can be instantiated by matching with assumptions.</p>\n<blockquote>\n<p>Also, is there any way to tell the <br>\nsimplifier to only backwards chain a few times when trying to relieve <br>\ncertain hyps that might be expensive or trigger looping?</p>\n</blockquote>\n<p>Eg:<br>\nML\"simp_depth_limit := 5\"</p>\n<blockquote>\n<p>Is there a way <br>\nto write syntactic conditions as hypotheses, e.g., apply unless some <br>\nvariable has literally matched \"0\", etc.?</p>\n</blockquote>\n<p>No.</p>\n<p>Tobias</p>",
        "id": 294041949,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660815692
    }
]