[
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\nThank you for that bug-report. It lookes like the simplifier expected a certain <br>\ninvariant to hold which doesn't. I have just pushed a modification that no <br>\nlonger makes that assumption. It surprises me that this situation hadn't arisen <br>\nbefore.</p>\n<p>Thanks!<br>\nTobias<br>\n<a href=\"/user_uploads/14278/b40ltztwFXg9cJEoHFvOfw2E/smime.p7s\">smime.p7s</a></p>",
        "id": 294329126,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660929637
    },
    {
        "content": "<p>From: Ognjen Maric &lt;<a href=\"mailto:ognjen.maric@gmail.com\">ognjen.maric@gmail.com</a>&gt;<br>\nHi,</p>\n<p>in the following example, the simplifier raises a Bind exception.</p>\n<p>lemma<br>\n   \"{(s1, s2). s2 = (if z then undefined else s1)}  `` { x } = S\"<br>\n     apply(simp)<br>\n     oops</p>\n<p>The check_conv function fails and complains about proving the wrong <br>\ngoal, but I do not really understand what the error is. Moreover, if I <br>\nexplicitly add an:</p>\n<p>apply(subst Image_Collect_split)</p>\n<p>before applying the simp tactic, the error goes away - even though this<br>\nrule is already in the simpset and simp applies it before throwing the <br>\nexception, and both variants seem to yield the same pair of a term and a <br>\nrewrite rule.</p>\n<p>Ognjen</p>",
        "id": 294632823,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661158960
    }
]