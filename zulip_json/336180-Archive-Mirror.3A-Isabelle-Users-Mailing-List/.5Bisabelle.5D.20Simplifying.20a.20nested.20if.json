[
    {
        "content": "<p>From: Holden Lee &lt;<a href=\"mailto:hl422@cam.ac.uk\">hl422@cam.ac.uk</a>&gt;<br>\nI need to use the following kind of rule repeatedly:</p>\n<p>lemma if_if_simp[simp]:<br>\n  \"(if (x∈S) then (f x (if x∈S then g x else h x)) else (i x)) =<br>\n(if (x∈S) then (f x (g x)) else (i x))\"<br>\nby (metis (mono_tags))</p>\n<p>However, this is not working automatically (I suspect because the pattern<br>\nmatching isn't powerful enough to work on functions?).</p>\n<p>For example, the following goal should be solved (and can be solved with *apply<br>\n(auto simp add: if_if_simp[where S=\"S\" and f=\"λx y. f x ⊕⇘K⇙ y\"])*)</p>\n<p>⋀f∷'e ⇒ 'a.<br>\n       f ∈ S →⇩E carrier K ⟹<br>\n       module K V ⟹<br>\n       field K ⟹<br>\n       (λx∷'e.<br>\n           if x ∈ S<br>\n           then f x ⊕⇘K⇙ (if x ∈ S then ⊖⇘K⇙ f x else undefined)<br>\n           else undefined) =<br>\n       (λx∷'e. if x ∈ S then 𝟬⇘K⇙ else undefined)</p>\n<p>Is there a way to simplify using if_if_simp in a more automatic fashion?<br>\nWhile metis works on the lemma it doesn't work here (probably because of<br>\nthe presence of too many other terms).</p>\n<p>Thanks,<br>\nHolden</p>",
        "id": 294284279,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660921324
    },
    {
        "content": "<p>From: Lars Noschinski &lt;<a href=\"mailto:noschinl@in.tum.de\">noschinl@in.tum.de</a>&gt;<br>\nInstead of this rule, use the strong congruence rule for if by calling<br>\nthe simplifier with \"cong: if_cong\".</p>\n<p>See also:</p>\n<p><a href=\"http://stackoverflow.com/questions/15627676/why-wont-isabelle-simplify-the-body-of-my-if-then-else-construct/\">http://stackoverflow.com/questions/15627676/why-wont-isabelle-simplify-the-body-of-my-if-then-else-construct/</a></p>\n<p>-- Lars</p>",
        "id": 294284301,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660921330
    }
]