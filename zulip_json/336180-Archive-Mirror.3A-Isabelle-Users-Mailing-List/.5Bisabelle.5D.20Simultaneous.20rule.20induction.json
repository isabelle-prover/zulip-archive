[
    {
        "content": "<p>From: Randy Pollack &lt;<a href=\"mailto:rpollack@inf.ed.ac.uk\">rpollack@inf.ed.ac.uk</a>&gt;<br>\nHi,</p>\n<p>Please point me to some examples of simultaneous rule induction using<br>\nthe \"induct\" method.</p>\n<p>Makarius' paper \"Structured Induction proofs ...\" implies this is well<br>\nsupported, but I don't see any examples there.</p>\n<p>Thanks,<br>\nRandy</p>",
        "id": 294051355,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660819617
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nIn the library there are surprisingly few non-trivial examples of mutual <br>\ninduction stemming from inductive definitions, not datatypes.  Some more <br>\ninteresting applications are in afp-devel/POPLmark-deBruijn by Stefan <br>\nBerghofer, see <a href=\"http://afp.sourceforge.net/download.shtml\">http://afp.sourceforge.net/download.shtml</a></p>\n<p>Induction with multiple rules stemming from sets/predicates A and B works <br>\nessentially like this:</p>\n<p>lemma<br>\n    \"A m ==&gt; P m\"<br>\n    \"B n ==&gt; Q n\"<br>\n  proof (induct rule: A_B.inducts)</p>\n<p>Here the inductive entity to be eliminated needs to be included in an <br>\nexplicit implication.  The more common ``using'' form does not work here, <br>\nbecause the fact involved is different for each goal.</p>\n<p>Note that when giving additional method arguments, each bunch of <br>\nparameters needs to be separated by 'and', e.g. like this:</p>\n<p>lemma<br>\n    \"A x m ==&gt; P x m\"<br>\n    \"B y z n ==&gt; Q y z n\"<br>\n  proof (induct arbitrary: x and y z rule: A_B.inducts)</p>\n<p>(This sectioning of arguments follows the collection of rules, not goals.)</p>\n<p>Makarius</p>",
        "id": 294051380,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660819630
    }
]