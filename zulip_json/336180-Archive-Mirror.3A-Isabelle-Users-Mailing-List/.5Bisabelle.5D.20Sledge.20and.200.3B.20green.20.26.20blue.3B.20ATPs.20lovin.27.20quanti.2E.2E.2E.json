[
    {
        "content": "<p>From: Gottfried Barrow &lt;<a href=\"mailto:gottfried.barrow@gmx.com\">gottfried.barrow@gmx.com</a>&gt;<br>\nHi,</p>\n<p>Embarrassing mistakes are embarrassing, but green and blue variables can <br>\nhelp prevent them, at least if you don't tell others.</p>\n<p>It's in the story below that I tell about going from vaguely noticing <br>\nblue variables when I edit a formula, to discovering another great <br>\nfeature of jEdit, that green variables are bound variables and blue <br>\nvariables are free variables. Did I know that? If I did, I forgot it.</p>\n<p>Color coded variables even help with respectable mistakes, like when I <br>\ngo through and change all my variables for a different naming convention.</p>\n<p>Since starting this email, I noticed another blue variable that <br>\nshould've been green. Yet, in spite of the misnamed variable, the <br>\ntheorem was still true.</p>\n<p>It's always a scary thought when Sledgehammer proves a theorem which <br>\nisn't what I think it is.</p>\n<p><em>FORMAL PROOFS FORCING THE EXPLICIT USE OF THE SEPARATION AXIOM</em></p>\n<p>(This is a tangent. I had led into it from the last section, but then I <br>\ndeleted a lot of the last section. It follows the general pattern of, <br>\n\"Dude, this is great stuff.\")</p>\n<p>In real life, there's the Axiom of Separation, which requires we use a <br>\nset which already exists to create new sets, but most every one is <br>\noblivious to it.</p>\n<p>Set theorists are a rare breed of people, but I know one who was a <br>\nformer professor. I emailed him and asked, \"Trey, everyone is oblivious <br>\nto the Axiom of Separation, which requires both an existing set and a <br>\nproperty, but most people mindlessly only specify the property. How many <br>\nproofs do you think are out there where they think they're using a set, <br>\nbut they're really using a class?\"</p>\n<p>He emailed me back a simple response. He said, \"Well, most people are <br>\nworking in the big areas of math, like algebra and real analysis, so the <br>\nsets they're using have been proved to exists, so those people are safe.\"</p>\n<p>The great thing about formal proofs, as things are turning out, is that <br>\nI can force the code to always require the explicit use of the Axiom of <br>\nSeparation.</p>\n<p>Do you want to use my set builder notation? Then you have the choice of <br>\n{A. P} or the more traditional notation {x IN A. P x}. Either way, you <br>\nexplicitly have to specify the set A that you're going to get your <br>\nelements from, where A is tied into the axiom</p>\n<p>!A. !P. ?B. (!x. x IN B &lt;-&gt; (x IN A &amp; P x)).</p>\n<p>BACK TO THE BLUE VARIABLE</p>\n<p>So for a simple example, I had,</p>\n<p>!q. empty_set not_in {x IN u. x notEq empty_set}</p>\n<p>where \"u\" was blue. It turned out the same, since \"q\" wasn't used and <br>\n\"u\" is a free variable, but it's definitely bad style.</p>\n<p><em>NON-EMPTY SETS &amp; SLEDGE NOT MAKING THE CLASSIC HUMAN MISTAKE</em></p>\n<p>Today, the blue variable awareness came because I ran Sledgehammer on an <br>\nexistence theorem. Like many times, multiple ATPs gave multiple results, <br>\nwhere the axioms and theorems used by the different ATPs fell into groups.</p>\n<p>First, here's the ATPs which regularly produce results for the FOL heavy <br>\ntheorems I'm doing:</p>\n<p>metis, vampire, e, spass_new, remote_e_sine, z3_tptp, and z3.</p>\n<p>And frequent enough to notice:</p>\n<p>satallax, cvc3.</p>\n<p>And not frequent, but not totally absent, like other ATPs:</p>\n<p>yices.</p>\n<p>Anyway, I think it was vampire which proved the existence of unordered <br>\npairs using only the existence of the empty set.</p>\n<p>I said, \"That's no good. What a classic mistake, to forget about the <br>\ntrivial case of the empty set.\"</p>\n<p>I added the condition that my set is non-empty, and I had a \"by(auto)\" <br>\nbelow them theorem, and auto proved the theorem after I edited it.</p>\n<p>I said, \"That's no good.\"</p>\n<p>Well, I had made another classic mistake. There were two \"z\"s, where one <br>\nwas outside the scope of the quantifier, where it originally had been <br>\ninside the scope.</p>\n<p>It was at this point that I noticed one green \"z\" and one blue \"z\". I <br>\nthought, \"That Makarius, giving us green variables and blue variables, <br>\nis that great, or what?\"</p>\n<p><em>A BLUE VARIABLE EXAMPLE ANSWERS A FORMER QUESTION</em></p>\n<p>This eventually tied into me trying to sort out some set notation.</p>\n<p>From Set.thy, I got this the basic idea for this notation for my <br>\nordered pairs function, S_se ::  \"sT =&gt; (sT =&gt; bool) =&gt; sT\":</p>\n<p>\"{q. P}\" == \"CONST S_se q P\"<br>\n     \"{x : q. P_x}\" =&gt; \"{q. (%x. P_x)}\"</p>\n<p>This is simple stuff, but everything is hard until you understand it, so <br>\nI was working through some examples where I was starting with the set <br>\nbuilder notation, {x : q. P_z}, and translating into the two other <br>\nequivalencies, where it's all related to the formula</p>\n<p>!q. !z.  z IN {x : q. P_x} &lt;-&gt;  (z IN q /\\ (%x. P_x) z) &lt;-&gt;  z IN <br>\n{q. P}.</p>\n<p>One of the main things I was trying to explain was the relationship <br>\nbetween P_x and P.</p>\n<p>Basically, P_x is a first-order formula with a free variable x, so what <br>\nhappens if I make a mistake? And don't name my free variable x?</p>\n<p>I worked up my trivial examples, the first being</p>\n<p>(1) theorem  \"{0} = {x : {0}. x = 0}\"<br>\n           by(metis singleton_as_a_separation_set),</p>\n<p>where 0 is the empty set, and  P_x == (x = 0)</p>\n<p>Now, my fluency in the Isar proof language is comparable to my fluency <br>\nin Spanish, where I know how to say \"by auto\" and \"by metis\", along with <br>\n\"burrito\", \"taco\", hombre, and adios. So I'm much more ahead in Spanish <br>\nthan I am in Isar, but I'm learning things about Isabelle that I need to <br>\nlearn anyway, and I'm not stuck now completely in tutorial purgatory.</p>\n<p>Sledgehammer makes mincemeat out of (1), so I messed it up so there's a <br>\nblue variable, y, which results in a false variation of (1):</p>\n<p>(2) theorem  \"~(!y. {0} = {x : {0}. y = 0})\"<br>\n           by(metis (mono_tags) Ax_P separation_set_uniqueness).</p>\n<p>I put the quantifer in to show effectly what happens when my P_x == (y = <br>\n0), which results in no free variable x in P_x.\n*\nTHIRD BIG LESSON: FIRST-ORDER ATPs WANT FIRST-ORDER LOGIC*</p>\n<p>There was the lesson on remembering to consider the trivial case of the <br>\nempty set.</p>\n<p>There was the lesson of getting visual feedback to see if my variables <br>\nare bound or free.</p>\n<p>The third lesson had to do with my past question, up until today, of <br>\nwhether to leave a variable free, or make it a bound universally <br>\nquantified variable.</p>\n<p>This was no small question, and my inclination was to go through the <br>\nformalities for a while of explicitly using universal quantifiers, and <br>\nthen loosening up and using free variables.</p>\n<p>It's all the same, right?</p>\n<p>No. All the ATPs above that easily proved (2) timed out on the version <br>\nthat has a free variable, which is this theorem:</p>\n<p>theorem  \"~({0} = {x : {0}. y = 0})\"</p>\n<p>Maybe there's something I'm missing, but what I'm thinking is that the <br>\nATPs that are good at proving FOL, work best when they're given explicit <br>\nFOL.</p>\n<p>If that's what they want, who am I to deny them what they want? I do <br>\nwhat I can to make ATPs happy, so they'll help me out.</p>\n<p>Regards,<br>\nGB</p>",
        "id": 294223364,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660898670
    },
    {
        "content": "<p>From: Gottfried Barrow &lt;<a href=\"mailto:gottfried.barrow@gmx.com\">gottfried.barrow@gmx.com</a>&gt;<br>\nThis has occurred to me. That the reason the ATPs may not be able to <br>\nprove the theorem with the free variable, rather than the universally <br>\nquantified variable, is because all my previous theorems are done with <br>\nuniversal quantifiers rather than free variables.</p>\n<p>To find out if that's true, I would need to change all the theorems so <br>\nthat they use free variables.</p>\n<p>Regards,<br>\nGB</p>",
        "id": 294223374,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660898676
    }
]