[
    {
        "content": "<p>From: Tom Ridge via Cl-isabelle-users &lt;<a href=\"mailto:cl-isabelle-users@lists.cam.ac.uk\">cl-isabelle-users@lists.cam.ac.uk</a>&gt;<br>\n(resend, after sending from wrong email address)</p>\n<p>On 15 September 2015 at 11:34, Larry Paulson &lt;<a href=\"mailto:lp15@cam.ac.uk\">lp15@cam.ac.uk</a>&gt; wrote:</p>\n<blockquote>\n<p>On 15 Sep 2015, at 11:05, Tom Ridge &lt;<a href=\"mailto:tom.j.ridge@googlemail.com\">tom.j.ridge@googlemail.com</a>&gt; wrote:</p>\n<p>If it is not too much effort to add, this feature would be quite useful to<br>\nme (and to others?). Presumably the implementation is easy - conjunct-up<br>\nthe goals and feed them to sledgehammer?</p>\n<p>This particular suggestion would not work. You would get nothing unless<br>\nall the goals could be solved, and forming the conjunction of two problems<br>\nis particularly damaging for resolution (to see why, consider the details<br>\nof the translation into clause form).<br>\n</p>\n</blockquote>\n<p>Do you really mean the approach won't work? Yes, if one of the goals cannot<br>\nbe solved, you get nothing, but that is OK for my use case, and is one<br>\npossible interpretation of what \"sledgehammer all goals\" should mean (the<br>\nother being that those goals that can be solved, are solved, and the others<br>\nare untouched). Surely the approach of \"conjuncting-up\" is not worse than<br>\ninvoking sledgehammer twice? (My expectation is that if there is shared<br>\nstructure between the proofs, the performance might even be better.)</p>\n<blockquote>\n<p>Can’t you identify the difficult case simply by looking at it? And<br>\npossibly the simp_all method could be of use here.<br>\n</p>\n</blockquote>\n<p>In this case, given the lack of this feature, I have indeed manually proved<br>\nthe goals (by invoking various procedures several times). But I'm looking<br>\nfor functionality that allows me to avoid doing this.</p>\n<p>BTW happy birthday!</p>\n<p>T</p>\n<blockquote>\n<p>Larry Paulson</p>\n</blockquote>",
        "id": 294653586,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661167110
    },
    {
        "content": "<p>From: Larry Paulson &lt;<a href=\"mailto:lp15@cam.ac.uk\">lp15@cam.ac.uk</a>&gt;<br>\nIf the formula is converted to clause form using the traditional method of negation followed by conversion into CNF, then your idea would result in a geometric increase in the number of clauses. This is because the conjunctions would be transformed into disjunctions, which would have to be completely multiplied out. </p>\n<p>It is conceivable that sledgehammer now uses a more sophisticated conversion method, but still you are making the problem much more difficult and would have to hope that much of the difficulty could be automatically detected and removed.</p>\n<p>Larry</p>",
        "id": 294653590,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661167112
    },
    {
        "content": "<p>From: Tom Ridge via Cl-isabelle-users &lt;<a href=\"mailto:cl-isabelle-users@lists.cam.ac.uk\">cl-isabelle-users@lists.cam.ac.uk</a>&gt;<br>\nDear All,</p>\n<p>Sorry for the easy question, but I couldn't find the answer in the<br>\ndocumentation.</p>\n<p>How can I apply sledgehammer to solve all subgoals?</p>\n<p>e.g.</p>\n<p>lemma \"True &amp; True\"<br>\napply(rule)</p>\n<p>At this point, if I click on the \"Sledgehammer\" tab in jedit and click<br>\napply, it shows me a solution to the first goal. But I want it to solve all<br>\nthe goals.</p>\n<p>Thanks</p>",
        "id": 294654797,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661167592
    },
    {
        "content": "<p>From: Larry Paulson &lt;<a href=\"mailto:lp15@cam.ac.uk\">lp15@cam.ac.uk</a>&gt;<br>\nI don't believe that such an option exists. Even with one goal, you are spawning up to 5 subprocesses on your machine. The idea anyway that you are trying to tackle a particularly tough problem, so it's natural to tackle them one at a time.</p>\n<p>I wonder: is there much demand for this option?</p>\n<p>Larry</p>",
        "id": 294654807,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661167597
    },
    {
        "content": "<p>From: Peter Lammich &lt;<a href=\"mailto:lammich@in.tum.de\">lammich@in.tum.de</a>&gt;<br>\nOn Di, 2015-09-15 at 10:11 +0100, Larry Paulson wrote:</p>\n<blockquote>\n<p>I don't believe that such an option exists. Even with one goal, you are spawning up to 5 subprocesses on your machine. The idea anyway that you are trying to tackle a particularly tough problem, so it's natural to tackle them one at a time.</p>\n</blockquote>\n<blockquote>\n<p>I wonder: is there much demand for this option?</p>\n</blockquote>\n<p>Another use-case of sledgehammer is just to find the necessary theorems to <br>\neasily solve a goal. Sledgehammer will not find hard proofs itself, but <br>\nis very good at deducing proofs from theorems the user did not even know about.</p>\n<p>Assuming sufficient computing power is available, a (auto-) sledgehammer<br>\non all sub-goals in the background would imho be useful: Ideally, while<br>\nyou are trying to prove the first sub-goal manually, sledgehammer<br>\nalready solves the others for you.</p>",
        "id": 294654815,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661167604
    },
    {
        "content": "<p>From: Larry Paulson &lt;<a href=\"mailto:lp15@cam.ac.uk\">lp15@cam.ac.uk</a>&gt;<br>\nThis particular suggestion would not work. You would get nothing unless all the goals could be solved, and forming the conjunction of two problems is particularly damaging for resolution (to see why, consider the details of the translation into clause form).</p>\n<p>Can’t you identify the difficult case simply by looking at it? And possibly the simp_all method could be of use here.</p>\n<p>Larry Paulson</p>",
        "id": 294654823,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661167609
    }
]