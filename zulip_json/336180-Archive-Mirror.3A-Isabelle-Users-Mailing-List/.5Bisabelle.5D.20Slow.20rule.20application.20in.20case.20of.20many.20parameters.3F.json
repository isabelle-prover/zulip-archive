[
    {
        "content": "<p>From: Dennis Walter &lt;<a href=\"mailto:dennis.walter@gmail.com\">dennis.walter@gmail.com</a>&gt;<br>\nHi all,</p>\n<p>I'm having problems solving large structured goals involving many<br>\nparameters. Even rule applications like<br>\n  apply (rule allI | rule impI | erule conjE)+<br>\ntake several minutes. I've experienced this slowdown in cases where<br>\nthe number of parameters (bound meta-variables) is &gt; 30, and these<br>\nrepeatedly occur in various places within the goal (~2000 lines, no<br>\nabbreviations). I suspect that Isabelle's lifting of rules over<br>\nparameters is to blame, but I can't see why this should be the case.<br>\nCan anybody explain this phenomenon to me?</p>\n<p>Thanks a lot,<br>\n  Dennis</p>",
        "id": 294074132,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660828210
    },
    {
        "content": "<p>From: Lawrence Paulson &lt;<a href=\"mailto:lp15@cam.ac.uk\">lp15@cam.ac.uk</a>&gt;<br>\nIt looks like you are working on rather large problems! Still I don't  <br>\nthink such runtimes should be normal. Are you using Poly/ML? Does your  <br>\nmachine have ample memory?<br>\nLarry Paulson</p>",
        "id": 294074204,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660828241
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nIncidently, I've come across a similar situation just 2 weeks ago, with <br>\napprox. 10 parameters and 10 premises in the goal, but the same numbers in <br>\nthe rule being applied.  It took several minutes to apply the rules.</p>\n<p>Can you produce a selfcontained example of your application, so that we <br>\ncan get check if this is really the same hot spot?</p>\n<p>Makarius</p>",
        "id": 294074232,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660828248
    },
    {
        "content": "<p>From: Dennis Walter &lt;<a href=\"mailto:dennis.walter@gmail.com\">dennis.walter@gmail.com</a>&gt;<br>\nI tried to, but failed in the amount of time I've got right now. The<br>\nconcrete problem is a little too large (and dependent on other<br>\ntheories) to show here.</p>\n<p>The structure of the subgoal is sth like this:</p>\n<p>! n1 n2 n3 n4 n5 n6 n7 n8 n9.<br>\n[| P1 n1 ... n9 &amp; P2 n2 ... n9 &amp; P3 n3 ... n9 &amp; ...|] ==&gt;<br>\nALL S. f S' = S --&gt;<br>\n(ALL S1. f S = S1 --&gt;<br>\n(ALL S2. f S2 = S1 --&gt;<br>\n (... --&gt;<br>\n(let v = g S in<br>\n  ALL S'. f S = S' --&gt;<br>\n    (let v = g S' in<br>\n      ALL S. f S' = S --&gt;<br>\n        ...<br>\n          in P n1 n2 n3 n4 n5 n6 n7 n8 n9)...)</p>\n<p>where the P_i aren't just constants / free variables, but complex<br>\nterms referring to the n_i. When I do \"apply (rule allI, rule impI,<br>\nerule conjE)\" with about 30 possible rule applications, it takes<br>\naround one minute.</p>\n<p>I'll try to come up with a concrete example later.</p>\n<p>Dennis</p>",
        "id": 294074339,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660828284
    },
    {
        "content": "<p>From: Jeremy Dawson &lt;<a href=\"mailto:jeremy@rsise.anu.edu.au\">jeremy@rsise.anu.edu.au</a>&gt;<br>\nLawrence Paulson wrote:<br>\nI can't find the notation '+' in the Isar reference, but I'm guessing <br>\nthat what you're doing is the equivalent of</p>\n<p>REPEAT (rtac allI 1 ORELSE rtac impI 1 ORELSE etac conjE 1)<br>\n(or perhaps REPEAT1)</p>\n<p>so try instead</p>\n<p>REPEAT_DETERM (rtac allI 1 ORELSE rtac impI 1 ORELSE etac conjE 1)</p>\n<p>I've found in the past that this sort of change makes a difference.  The <br>\nreason (I guessed) is that although both versions do, in a sense, the <br>\nsame amount of useful work for you up to the point where you get the <br>\nfirst new goal-state, the REPEAT version creates and saves all sorts of <br>\ndata structures which enable backtracking, whereas in the REPEAT_DETERM <br>\nversion, these get thrown away (REPEAT_DETERM will not allow backtracking).</p>\n<p>Jeremy</p>",
        "id": 294074522,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660828331
    }
]