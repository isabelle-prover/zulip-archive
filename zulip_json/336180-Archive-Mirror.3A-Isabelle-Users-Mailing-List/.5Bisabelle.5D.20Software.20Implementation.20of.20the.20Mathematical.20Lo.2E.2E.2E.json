[
    {
        "content": "<p>From: Ken Kubota &lt;<a href=\"mailto:mail@kenkubota.de\">mail@kenkubota.de</a>&gt;<br>\nDear Members of the Research Community,</p>\n<p>I am pleased to announce that the software implementation of the mathematical <br>\nlogic R0, a further development of Peter B. Andrews' logic Q0, is now <br>\navailable. The syntactic features provided by R0 are type variables <br>\n(polymorphic type theory), the binding of type variables with the abstraction <br>\noperator and single variable binder λ (type abstraction), and (some of) the <br>\nmeans necessary for dependent types (dependent type theory).</p>\n<p>The software implementation can be downloaded (license restrictions apply) at<br>\n<a href=\"http://doi.org/10.4444/100.10.3\">http://doi.org/10.4444/100.10.3</a></p>\n<p>The logic R0 does not only allow quantification over types with quantifiers, as <br>\nspecified in [Andrews, 1965] and [Melham, 1993b], but, moreover, the binding of <br>\ntype variables with lambda (type abstraction), as suggested by Mike Gordon for <br>\nHOL: \"[...] 'second order' [lambda]-terms like \\a. \\x:a. x, perhaps such terms <br>\nshould be included in the HOL logic.\" [Gordon, 2001, p. 22]</p>\n<p>The expressiveness of the formal language obtained with type abstraction allows <br>\nfor a natural formulation of group theory [cf. p. 12 of <br>\n<a href=\"http://doi.org/10.4444/100.10.2]\">http://doi.org/10.4444/100.10.2]</a>. With the set (type) of Boolean values o, the <br>\nexclusive disjunction XOR, and an appropriate definition of groups Grp [p. <br>\n362], the fact that (o, XOR) is a group can be expressed in lambda notation <br>\nwith [p. 420]<br>\n        Grp o XOR</p>\n<p>This enhancement of the expressiveness of the formal language overcomes the <br>\n\"limitation of the simple HOL type system [...] that there is no explicit <br>\nquantifier over polymorphic type variables, which can make many standard <br>\nresults [...] awkward to express [...]. [...] For example, in one of the most <br>\nimpressive formalization efforts to date [Gonthier et al., 2013] the entire <br>\ngroup theory framework is developed in terms of subsets of a single universe <br>\ngroup, apparently to avoid the complications from groups with general and <br>\npossibly heterogeneous types.\" [Harrison, Urban, and Wiedijk, 2014, pp. 170 f.]</p>\n<p>While in both Andrews' Q0 and Gordon's HOL the universal quantifier is defined <br>\nas<br>\n    ALL  :=  [\\p. p = [\\x.T] ]<br>\n[Andrews, 2002, p. 212; Gordon and Melham, 1993], in R0, with type abstraction, <br>\nthe type is made explicit:<br>\n    ALL  :=  [\\t. [\\p. p = [\\x.T] ] ]<br>\nwith p of type (ot), or t -&gt; o [p. 359 of <a href=\"http://doi.org/10.4444/100.10.2]\">http://doi.org/10.4444/100.10.2]</a>.<br>\nThen, the set-theoretic proposition<br>\n    ALL n : NAT . n+1 &gt; 0<br>\nin type theory can be expressed very naturally by<br>\n    ALL NAT [\\n . n+1 &gt; 0]</p>\n<p>Furthermore, the enhanced expressiveness provided by R0 avoids the <br>\ncircumlocutions connected with preliminary solutions like axiomatic type <br>\nclasses recently developed and discussed for Isabelle/HOL. The expressiveness <br>\nof type abstraction also replaces the notion of compound types, which in HOL <br>\nare used for ordered pairs (the Cartesian product, cf. [Gordon and Melham, <br>\n1993]), that in R0 can be formalized without compound types [cf. pp. 378 f. of <br>\n<a href=\"http://doi.org/10.4444/100.10.2]\">http://doi.org/10.4444/100.10.2]</a>.</p>\n<p>R0 has an intuitive method of type introduction, which does not require the <br>\nadditional axioms of the HOL type introduction mechanism: \"Whenever a theorem <br>\nof the form p{oa}e{a} is inferred [...] (which in set theory is expressed by e <br>\n∈ p) [...] p is acknowledged as a type\" [p. 11 of <br>\n<a href=\"http://doi.org/10.4444/100.10.2]\">http://doi.org/10.4444/100.10.2]</a>.</p>\n<p>Mike Gordon's HOL developed at Cambridge University is, like Andrews' logic Q0, <br>\nbased on the Simple Theory of Types (1940) developed by Alonzo Church, Andrews' <br>\nPh.D. advisor at Princeton University. Among the HOL group, there has always <br>\nbeen the awareness that besides automation, there is the philosophical <br>\n(logical) desire to reduce the means of the logic to a few principles. In the <br>\nHOL handbook, Andrew M. Pitts wrote the legendary sentence: \"From a logical <br>\npoint of view, it would be better to have a simpler substitution primitive, <br>\nsuch as 'Rule R' of Andrews' logic Q0, and then to derive more complex rules <br>\nfrom it.\" [Gordon and Melham, 1993, p. 213]</p>\n<p>In the same spirit, Mike Gordon wrote on the genesis of HOL: \"[T]he terms [...] <br>\ncould be encoded [...] in such a way that the LSM expansion-law just becomes a <br>\nderived rule [...]. This approach is both more elegant and rests on a firmer <br>\nlogical foundation, so I switched to it and HOL was born.\" [Gordon, 2000, p. <br>\n173]</p>\n<p>The general principle of reducing the logic (including the language) to a few <br>\nprinciples is the main criterion for the design of Q0 (having only a single <br>\nprimitive rule of inference, Rule R), which is summarized by Peter B. Andrews <br>\nas follows: \"Therefore we shall turn our attention to finding a formulation of <br>\ntype theory which is as expressive as possible, allowing mathematical ideas to <br>\nbe expressed precisely with a minimum of circumlocutions, and which is as <br>\nsimple and economical as is possible without sacrificing expressiveness. The <br>\nreader will observe that the formal language we find arises very naturally from <br>\na few fundamental design decisions.\" [Andrews, 2002, pp. 205 f.]</p>\n<p>R0 \"follows Andrews' concept of expressiveness (I also use the term <br>\nreducibility), which aims at the ideal and natural language of formal logic and <br>\nmathematics.\" [p. 11 of <a href=\"http://doi.org/10.4444/100.10.2]\">http://doi.org/10.4444/100.10.2]</a> Therefore R0 is, <br>\nunlike most other implementations, a Hilbert-style system, opting for <br>\nexpressiveness instead of automation.</p>\n<p>R0 implements the philosophical program of Russell's and Whitehead's 'Principia <br>\nMathematica', logicism, i.e., the reduction of mathematics to formal logic, and <br>\neven more, generalizes this idea by reducing formal logic itself to a few <br>\nprinciples.</p>\n<p>Like John Harrison's HOL Light, R0 has an extremely small logical kernel. Being <br>\na Hilbert-style system, it has the smallest number of rules of inference among <br>\nthe programs implementing a fixed logic (not regarding logical frameworks with <br>\nanother kind of expressiveness). R0 resembles Norman Megill's Metamath, which <br>\n\"attempts to use the minimum possible framework needed to express mathematics <br>\nand its proofs.\" [http://us.metamath.org/] With a size of less than 100 KB, it <br>\nis the smallest proof checker or interactive theorem prover, including the <br>\ncurrent versions of John Harrison's HOL Light, Mark Adams' HOL Zero, Norman <br>\nMegill's Metamath, and Freek Wiedijk's reimplementation of Automath.</p>\n<p>Like Q0, R0 uses the description operator, avoiding the problems of the epsilon <br>\noperator for HOL already discussed by Mike Gordon himself: \"It must be admitted <br>\nthat the ε-operator looks rather suspicious.\" [Gordon, 2001, p. 24] \"The <br>\ninclusion of ε-terms into HOL 'builds in' the Axiom of Choice [...].\" [Gordon, <br>\n2001, p. 24]</p>\n<p>R0 and PVS are the only implementations based on classical type theory with <br>\nsome form of dependent types. Also, R0 and PVS are the only implementations <br>\nbased on classical type theory with mathematical entities that may have <br>\ndifferent types (or which have at least some form of subtyping).</p>\n<p>Unlike in Coq, in R0, no use is made of the Curry-Howard isomorphism, favoring <br>\na direct (unencoded, and hence, natural) expression rather than the encoding of <br>\nproofs. For the same reason, it is an object (fixed) logic and not a logical <br>\nframework (such as Larry Paulson's Isabelle and Norman Megill's Metamath). Like <br>\nin Cris Perdue's Prooftoys [http://prooftoys.org, http://mathtoys.org] - a <br>\nnatural deduction variant of Andrews' Q0 - in R0, the turnstile symbol is <br>\nreplaced by the logical implication [p. 12 of <a href=\"http://doi.org/10.4444/100.10.2]\">http://doi.org/10.4444/100.10.2]</a>.</p>\n<p>R0 is, together with HOL Zero [Adams, 2016, p. 34], the only proof checker or <br>\ninteractive theorem prover which has the property of Pollack-consistency, <br>\nnamely \"being able to correctly parse formulas that it printed itself\" <br>\n[Wiedijk, 2012, p. 85]. R0 is the only proof checker or interactive theorem <br>\nprover which can correctly parse whole proofs (and not only formulas) that it <br>\nprinted itself. Finally, R0 has the property of \"faithfulness, where internal <br>\nrepresentation and concrete syntax correctly correspond. A printer that printed <br>\nfalse as true and true as false might be Pollack-consistent but would not be <br>\nfaithful.\" [Adams, 2016, p. 21]</p>\n<p>R0 is, like Automath, a mere proof checker (practically without any automation <br>\nat all).</p>\n<p>A full treatment of R0 shall be announced at<br>\n<a href=\"http://doi.org/10.4444/100.10.1\">http://doi.org/10.4444/100.10.1</a></p>\n<p>For references, please see: <a href=\"http://doi.org/10.4444/100.111\">http://doi.org/10.4444/100.111</a></p>\n<p>The SHA-512 checksum for file 'R0-v1.0.0.tar.gz' is:<br>\n538e742c5d42258cf460e46d84c60ceb fa6b5843efba4f73c2c17206f5bab931<br>\n7f6edb31686b933147abd17af8114277 b833baf189f42c2b7587c409aecaed1f</p>\n<p>Kind regards,</p>\n<p>Ken Kubota</p>\n<hr>\n<p>Ken Kubota<br>\n<a href=\"http://doi.org/10.4444/100\">http://doi.org/10.4444/100</a></p>",
        "id": 294710819,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661182131
    }
]