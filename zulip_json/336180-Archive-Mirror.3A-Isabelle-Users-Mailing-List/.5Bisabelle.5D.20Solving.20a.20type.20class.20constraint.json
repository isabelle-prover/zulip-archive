[
    {
        "content": "<p>From: Lars Hupel &lt;<a href=\"mailto:hupel@in.tum.de\">hupel@in.tum.de</a>&gt;<br>\nThis works exactly as expected. Thanks!</p>\n<p>Lars</p>",
        "id": 294278931,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660919698
    },
    {
        "content": "<p>From: Lars Hupel &lt;<a href=\"mailto:hupel@in.tum.de\">hupel@in.tum.de</a>&gt;<br>\nHello,</p>\n<p>I'm trying to produce well-sorted terms in Isabelle/ML. Basically, I <br>\n have a predicate \"P\" of type \"'a\" with some sort constraint, and I want <br>\n to apply it to some polymorphic constant. Consider this small Isar <br>\n snippet:</p>\n<p>class foo<br>\n consts<br>\n   P :: \"'a::foo ⇒ bool\"<br>\n   opt :: \"'a option\"</p>\n<p>instantiation option :: (foo) foo<br>\n begin<br>\n   instance ..<br>\n end</p>\n<p>declare [[show_sorts]]</p>\n<p>ML_val{* @{term \"P opt\"} *}</p>\n<p>As is obvious from the output, type inference instantiates P's type to</p>\n<p>'a∷foo option ⇒ bool</p>\n<p>The important bit here is that it slapped a \"foo\" constraint on the <br>\n type variable.</p>\n<p>However, it is not obvious to me how to do the same thing in ML. I <br>\n mean, it's trivial to construct a well-typed term for \"P opt\":</p>\n<p>ML{*<br>\n   fun mk_P t = Const (@{const_name P}, fastype_of t --&gt; @{typ bool}) $ <br>\n t;<br>\n   val t = mk_P @{term opt};<br>\n   val ct = cterm_of @{theory} t;<br>\n *}</p>\n<p>... but the sort constraint is missing on the instantiated type of \"P\".</p>\n<p>A very \"hackish\" approximation for this problem is to go through <br>\n \"fastype_of t\" and replace all sort constraints by \"[foo]\", because I <br>\n can (sort of) assume that all my instantiations for \"foo\" only require <br>\n \"foo\" for the type variables. I feel that there ought to be a better <br>\n solution, though.</p>\n<p>Why do I even need well-sorted terms? I have rules which look like <br>\n this:</p>\n<p>P x ⟹ P (Some x)</p>\n<p>and I cannot apply them unless the sorts line up.</p>\n<p>(In my formalization, the type constructor is not \"option\", but \"fun\", <br>\n but the idea is the same.)</p>\n<p>Cheers<br>\n Lars</p>",
        "id": 294281307,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660920459
    },
    {
        "content": "<p>From: Dmitriy Traytel &lt;<a href=\"mailto:traytel@in.tum.de\">traytel@in.tum.de</a>&gt;<br>\nSounds to me like you just would want to use the type inference itself:</p>\n<p>ML{*<br>\n   fun mk_P t = Const (@{const_name P}, dummyT) $ t |&gt; Syntax.check_term <br>\n@{context};<br>\n   val t = mk_P (Const (@{const_name opt}, dummyT));<br>\n   val ct = cterm_of @{theory} t;<br>\n*}</p>\n<p>You can refine the \"dummyT\"s if the type that you get is too general.</p>\n<p>Hope that helps,<br>\nDmitriy</p>",
        "id": 294281534,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660920526
    }
]