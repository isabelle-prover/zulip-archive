[
    {
        "content": "<p>From: \"Dr. Brendan Patrick Mahony\" &lt;<a href=\"mailto:brendan.mahony@dsto.defence.gov.au\">brendan.mahony@dsto.defence.gov.au</a>&gt;<br>\nSorry to be slow to the party, but the significance of the way the  <br>\ndefinition/notation mechanism now works has only just started to sink  <br>\nin. How do I find out more about it?</p>\n<p>The mechanism seems to finally properly address the problem of  <br>\nproperly identifying and distinguishing constant and variables that  <br>\nshare names. This is really cool.</p>\n<p>My question is as to how far this mechanism has penetrated the  <br>\npre-2008 world. It seems that datatype constructors are not included  <br>\nin the new mechanism? Is there anyway include a const declared in the  <br>\nold way, say because it is being defined by extension rather than  <br>\nintension? Are type names included or planned for inclusion is a  <br>\nsimilar scheme?</p>\n<p>Brendan</p>\n<p>IMPORTANT: This email remains the property of the Australian Defence Organisation and is subject to the jurisdiction of section 70 of the CRIMES ACT 1914.  If you have received this email in error, you are requested to contact the sender and delete the email.</p>",
        "id": 294072557,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660827684
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nOn Fri, 20 Feb 2009, Dr. Brendan Patrick Mahony wrote:</p>\n<blockquote>\n<p>Sorry to be slow to the party, but the significance of the way the <br>\ndefinition/notation mechanism now works has only just started to sink <br>\nin.</p>\n</blockquote>\n<p>What you have discovered here is called \"authentic syntax\" in internal <br>\njargon.  It merely means that things work as expected, i.e. the syntax is <br>\nreally attached to certain entities in a robust fashion.</p>\n<p>Right now, the dividing line for unrobust legacy syntax and authentic <br>\nsyntax is mostly the \"local theory\" interface.  Thus newer commands like <br>\n'definition' and 'notation' already benefit on it, as well as 'inductive', <br>\n'function' etc.  As we move on to make old packages fit for the local <br>\ntheory concept, syntax will also improve, although this is only a small <br>\nthing compared to the full power of local theories.  (Both of these <br>\nrenovations coincide mostly by accident, though.)</p>\n<p>Anyway, upgrading to authentic syntax is not completely trivial due to old <br>\nsyntax translations, which usually expect syntactic const names in the <br>\n(fragile) unqualified form.  Right now you can already use the <br>\n@{const_syntax foo} antiquotation in ML, or \"CONST foo\" in translation <br>\nrules, to make things fit for the future.</p>\n<blockquote>\n<p>Is there anyway include a const declared in the old way, say because it <br>\nis being defined by extension rather than intension?</p>\n</blockquote>\n<p>You can try it like this:</p>\n<p>abbreviation \"foo == old_foo\"  (mixfix)</p>\n<p>which will produce an authentic const \"foo\", corresponding to some other <br>\nterm, which happens to be based on non-authentic syntax (or no syntax at <br>\nall).</p>\n<blockquote>\n<p>Are type names included or planned for inclusion is a similar scheme?</p>\n</blockquote>\n<p>In the end, yes.  It will probably happen in the next round, when we <br>\nprovide typedecl/typedef interfaces for local theories (this is a bit <br>\ntricky, because local theories do not really support type constructors).</p>\n<p>Makarius</p>",
        "id": 294073033,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660827849
    }
]