[
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\nDear Jeremy,</p>\n<p>I have added Manuel's function \"successively\" to the development version of the <br>\nIsabelle distribution. If you feel bored (some people do these days) you could <br>\nupdate your AFP entry to use \"successively\" instead of your \"binrealchain\".</p>\n<p>Tobias<br>\n<a href=\"/user_uploads/14278/8qHM2t5Etuho8SBz0Y8IhgiI/smime.p7s\">smime.p7s</a></p>",
        "id": 294826111,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661244504
    },
    {
        "content": "<p>From: Jasmin Blanchette via Cl-isabelle-users &lt;<a href=\"mailto:cl-isabelle-users@lists.cam.ac.uk\">cl-isabelle-users@lists.cam.ac.uk</a>&gt;<br>\nDear list,</p>\n<p>Tobias wrote:</p>\n<blockquote>\n<p>I have added Manuel's function \"successively\" to the development version of the Isabelle distribution. If you feel bored (some people do these days) you could update your AFP entry to use \"successively\" instead of your \"binrealchain\".</p>\n</blockquote>\n<p>For the record, there's also \"chain\" in \"$AFP/thys/Ordered_Resolution_Prover/Lazy_List_Chain.thy\". There's no nil case though, and they're over lazy lists.</p>\n<p>For us having no nil case was the natural thing: our processes always have a start state. I'd argue it's a better default in general. Chains are basically fences with n segments and n segment and n + 1 posts. The base case is naturally 0 segments and 1 post. The 0 segment, 0 post case is a weird case, just like 0 - 1 = 0 on natural numbers.</p>\n<p>Jasmin</p>",
        "id": 294826152,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661244532
    },
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\nJasmin,</p>\n<p>I view \"successively\" differently: it expresses a property of adjacent elements <br>\nof a list. In fact, I now wonder if this would have been a better starting point:</p>\n<p>neighbors :: 'a list =&gt; ('a * 'a) set</p>\n<p>Just like we have learned to use the \"set\" function to express properties of all <br>\nelements of a list.</p>\n<p>Tobias<br>\n<a href=\"/user_uploads/14278/FZsccWZtW1J9-T9XEAznAWsD/smime.p7s\">smime.p7s</a></p>",
        "id": 294826155,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661244534
    },
    {
        "content": "<p>From: Thomas Sewell &lt;<a href=\"mailto:sewell@chalmers.se\">sewell@chalmers.se</a>&gt;<br>\nFor what it's worth, I'd found it useful to define the transitive counterpart of</p>\n<p>neighbours in another project, and show that sortedness, distinctness etc</p>\n<p>can be defined in terms of that.</p>\n<p>Cheers,</p>\n<p>Thomas.</p>",
        "id": 294826175,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661244547
    },
    {
        "content": "<p>From: Jasmin Blanchette via Cl-isabelle-users &lt;<a href=\"mailto:cl-isabelle-users@lists.cam.ac.uk\">cl-isabelle-users@lists.cam.ac.uk</a>&gt;<br>\nTobias wrote:</p>\n<p>Good points. Rethinking about it, there are definitely cases where my fence analogy doesn't hold; e.g. it's convenient for syntaxes like k_1 + ... + k_n to be defined as 0 if n = 0, and why not for chains as well. I guess my application was a bit special and not necessarily typical of what one would want as the default; just like lists by default support [] even though some applications don't want empty lists.</p>\n<p>Jasmin</p>",
        "id": 294826184,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661244552
    },
    {
        "content": "<p>From: Manuel Eberl &lt;<a href=\"mailto:eberlm@in.tum.de\">eberlm@in.tum.de</a>&gt;<br>\nI recently came across a few list functions that might be of general<br>\ninterest and I was wondering whether we should add them to HOL/List or<br>\nHOL-Library:</p>\n<p>\"successively R xs\" holds iff the relation \"R\" holds for each pair of<br>\nsuccessive elements in the list \"xs\":</p>\n<p>inductive successively :: \"('a ⇒ 'a ⇒ bool) ⇒ 'a list ⇒ bool\" for P where<br>\n  \"successively P []\"<br>\n| \"successively P [x]\"<br>\n| \"P x y ⟹ successively P (y # xs) ⟹ successively P (x # y # xs)\"</p>\n<p>Another possible name would be something like \"chain\" or \"chain_rel\".</p>\n<p>In analogy to \"remdups\"/\"\"distinct_adj\", one can define</p>\n<p>definition distinct_adj where<br>\n  \"distinct_adj = successively (≠)\"</p>\n<p>Lastly, and probably of less general interest, I have functions \"rle\"<br>\nand \"unrle\" that perform run-length encoding and -decoding (and build on<br>\n\"distinct_adj\"). Perhaps this is one for HOL-Library? It's a bit small<br>\nfor the AFP.</p>\n<p>Notably, \"remdups_adj = map fst ∘ rle\", and unlike \"remdups_adj\", rle is<br>\neasily invertible and fulfils some nice properties, which makes proving<br>\nthings about it much easier. For instance, contrast the somewhat awkward<br>\ncharacterisation \"remdups_adj_altdef\" that we currently have in HOL/List<br>\nwith the following more concise one:</p>\n<p>lemma remdups_adj_eq_iff:<br>\n  \"(remdups_adj xs = ys) ⟷<br>\n      distinct_adj ys ∧<br>\n      (∃ns. length ns = length ys ∧<br>\n            0 ∉ set ns ∧<br>\n            unrle (zip ys ns) = xs)\"</p>\n<p>In total, I have the following amount of material on each of these:</p>\n<p>successively: 90 lines<br>\ndistinct_adj: 50 lines<br>\nRLE: 200 lines</p>\n<p>Cheers,</p>\n<p>Manuel</p>",
        "id": 294827428,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661245129
    },
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\nOn 20/04/2020 13:57, Manuel Eberl wrote:</p>\n<blockquote>\n<p>I recently came across a few list functions that might be of general<br>\ninterest and I was wondering whether we should add them to HOL/List or<br>\nHOL-Library:</p>\n<p>\"successively R xs\" holds iff the relation \"R\" holds for each pair of<br>\nsuccessive elements in the list \"xs\":</p>\n<p>inductive successively :: \"('a ⇒ 'a ⇒ bool) ⇒ 'a list ⇒ bool\" for P where<br>\n   \"successively P []\"<br>\n| \"successively P [x]\"<br>\n| \"P x y ⟹ successively P (y # xs) ⟹ successively P (x # y # xs)\"</p>\n<p>Another possible name would be something like \"chain\" or \"chain_rel\".</p>\n</blockquote>\n<p>See List:</p>\n<p>fun sorted_wrt :: \"('a ⇒ 'a ⇒ bool) ⇒ 'a list ⇒ bool\" where<br>\n\"sorted_wrt P [] = True\" |<br>\n\"sorted_wrt P (x # ys) = ((∀y ∈ set ys. P x y) ∧ sorted_wrt P ys)\"</p>\n<blockquote>\n<p>In analogy to \"remdups\"/\"\"distinct_adj\", one can define</p>\n<p>definition distinct_adj where<br>\n   \"distinct_adj = successively (≠)\"<br>\n</p>\n</blockquote>\n<p>I am happy to add that to List.</p>\n<blockquote>\n<p>Lastly, and probably of less general interest, I have functions \"rle\"<br>\nand \"unrle\" that perform run-length encoding and -decoding (and build on<br>\n\"distinct_adj\"). Perhaps this is one for HOL-Library? It's a bit small<br>\nfor the AFP.</p>\n</blockquote>\n<p>Yes, HOL-Library.</p>\n<p>Tobias</p>\n<blockquote>\n<p>Notably, \"remdups_adj = map fst ∘ rle\", and unlike \"remdups_adj\", rle is<br>\neasily invertible and fulfils some nice properties, which makes proving<br>\nthings about it much easier. For instance, contrast the somewhat awkward<br>\ncharacterisation \"remdups_adj_altdef\" that we currently have in HOL/List<br>\nwith the following more concise one:</p>\n<p>lemma remdups_adj_eq_iff:<br>\n   \"(remdups_adj xs = ys) ⟷<br>\n       distinct_adj ys ∧<br>\n       (∃ns. length ns = length ys ∧<br>\n             0 ∉ set ns ∧<br>\n             unrle (zip ys ns) = xs)\"</p>\n<p>In total, I have the following amount of material on each of these:</p>\n<p>successively: 90 lines<br>\ndistinct_adj: 50 lines<br>\nRLE: 200 lines</p>\n<p>Cheers,</p>\n<p>Manuel</p>\n<p><a href=\"/user_uploads/14278/K5uoJxvfIUQ3vyk9YhoDC5jc/smime.p7s\">smime.p7s</a></p>\n</blockquote>",
        "id": 294827439,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661245136
    },
    {
        "content": "<p>From: Manuel Eberl &lt;<a href=\"mailto:eberlm@in.tum.de\">eberlm@in.tum.de</a>&gt;</p>\n<blockquote>\n<p>See List:</p>\n<p>fun sorted_wrt :: \"('a ⇒ 'a ⇒ bool) ⇒ 'a list ⇒ bool\" where<br>\n\"sorted_wrt P [] = True\" |<br>\n\"sorted_wrt P (x # ys) = ((∀y ∈ set ys. P x y) ∧ sorted_wrt P ys)\"</p>\n</blockquote>\n<p>That is not the same!</p>\n<p>The two only coincide if the given relation is transitive. In<br>\nparticular, \"sorted_wrt (≠)\" is equivalent to \"distinct\", whereas<br>\n\"successively (≠)\" is equivalent to \"distinct_adj\".</p>\n<blockquote>\n<p>I am happy to add that to List.</p>\n</blockquote>\n<p>I'll send the files to you then. Or I can merge it myself. Whichever you<br>\nprefer.</p>\n<p>Manuel</p>",
        "id": 294827449,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661245141
    },
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\nOn 20/04/2020 17:45, Manuel Eberl wrote:</p>\n<blockquote>\n<blockquote>\n<p>See List:</p>\n<p>fun sorted_wrt :: \"('a ⇒ 'a ⇒ bool) ⇒ 'a list ⇒ bool\" where<br>\n\"sorted_wrt P [] = True\" |<br>\n\"sorted_wrt P (x # ys) = ((∀y ∈ set ys. P x y) ∧ sorted_wrt P ys)\"</p>\n</blockquote>\n<p>That is not the same!</p>\n</blockquote>\n<p>Indeed they are not. So far we always seem to have gotten away with this one. <br>\n(Although I recall Christian Sternagel also used the non-transitive version for <br>\nsome sorting proofs) Your distinct_adj is a good example where the other one is <br>\nuseful. I would call it something like \"chain_list\" because there is already a <br>\n\"chain\" on sets. Possibly \"chainp_list\" in analogy with \"chain\"/\"chainp\".</p>\n<blockquote>\n<p>The two only coincide if the given relation is transitive. In<br>\nparticular, \"sorted_wrt (≠)\" is equivalent to \"distinct\", whereas<br>\n\"successively (≠)\" is equivalent to \"distinct_adj\".</p>\n<blockquote>\n<p>I am happy to add that to List.</p>\n</blockquote>\n<p>I'll send the files to you then. Or I can merge it myself. Whichever you<br>\nprefer.</p>\n</blockquote>\n<p>Please send me the files.</p>\n<p>Tobias</p>\n<blockquote>\n<p>Manuel</p>\n<p><a href=\"/user_uploads/14278/XaoI3AbjA7zewM9uHtyLDt4z/smime.p7s\">smime.p7s</a></p>\n</blockquote>",
        "id": 294827470,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661245148
    },
    {
        "content": "<p>From: Jeremy Sylvestre &lt;<a href=\"mailto:jsylvest@ualberta.ca\">jsylvest@ualberta.ca</a>&gt;<br>\nI have something similar in one of my AFP submissions. See</p>\n<p>subsubsection ‹Binary relation chains›</p>\n<p>at</p>\n<p><a href=\"https://www.isa-afp.org/browser_info/current/AFP/Buildings/Prelim.html\">https://www.isa-afp.org/browser_info/current/AFP/Buildings/Prelim.html</a></p>\n<p>Cheers,<br>\nJeremy S.</p>",
        "id": 294827482,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661245154
    }
]