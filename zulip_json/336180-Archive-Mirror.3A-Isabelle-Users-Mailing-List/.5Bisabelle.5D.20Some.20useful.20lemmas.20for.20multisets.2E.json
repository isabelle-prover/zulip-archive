[
    {
        "content": "<p>From: Thomas Sewell &lt;<a href=\"mailto:thomas.sewell@nicta.com.au\">thomas.sewell@nicta.com.au</a>&gt;<br>\nI was playing around with a multiset-related problem, and I feel these<br>\nlemmas are missing from Library/Multiset.</p>\n<p>The first two are trivia, but the last one is really useful. It's a<br>\nvariant of \"properties_for_sort_key\", but it's much easier to apply, in<br>\nmy opinion. The rest of Multiset.thy sort of hints that injectivity of<br>\nthe sort key on the set of values to be sorted is a normal thing to<br>\nassume, and given that, one of the premises of \"properties_for_sort_key\"<br>\nis redundant, which is the point of this proof.</p>\n<p>lemma inj_on_filter_key_eq:<br>\n   \"inj_on s (insert k (set xs)) ⟹ [x←xs . s k = s x] = filter (op = k) xs\"<br>\n   apply (induct xs)<br>\n    apply simp<br>\n   apply (drule meta_mp, erule subset_inj_on)<br>\n    apply auto[1]<br>\n   apply (drule_tac x=k and y=a in inj_on_iff, auto)<br>\n   done</p>\n<p>lemma filter_eq_replicate_count_multiset:<br>\n   \"filter (op = k) xs = replicate (count (multiset_of xs) k) k\"<br>\n   by (induct xs, auto)</p>\n<p>lemma sort_key_multiset_eq:<br>\n   assumes multiset: \"multiset_of xs = multiset_of ys\"<br>\n         and inj_on: \"inj_on f (set xs)\"<br>\n   shows \"sort_key f xs = sort_key f ys\"<br>\nproof -<br>\n   from multiset have set:<br>\n     \"set xs = set ys\"<br>\n     by (metis set_of_multiset_of)<br>\n   note filter = inj_on_filter_key_eq[OF subset_inj_on, OF inj_on]<br>\n   show ?thesis<br>\n   apply (rule properties_for_sort_key)<br>\n     apply (simp add: multiset)<br>\n    apply (simp add: filter set)<br>\n    apply (simp add: filter_eq_replicate_count_multiset multiset)<br>\n   apply simp<br>\n   done<br>\nqed</p>\n<p>Cheers,<br>\n     Thomas.</p>\n<hr>\n<p>The information in this e-mail may be confidential and subject to legal professional privilege and/or copyright. National ICT Australia Limited accepts no liability for any damage caused by this email or its attachments.</p>",
        "id": 294651492,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661166254
    },
    {
        "content": "<p>From: Thomas Sewell &lt;<a href=\"mailto:thomas.sewell@nicta.com.au\">thomas.sewell@nicta.com.au</a>&gt;<br>\nAmending my previous email, I note that my final lemma diverges more<br>\nthan necessary from \"properties_for_sort_key\", which concludes \"sort_key<br>\nf xs = ys\". I still think that a \"sort_key f xs = sort_key f ys\" form is<br>\nuseful, since that's what I first searched for. Here's an amended<br>\nversion with both.</p>\n<p>lemma inj_on_filter_key_eq:<br>\n   \"inj_on s (insert k (set xs)) ⟹ [x←xs . s k = s x] = filter (op = k) xs\"<br>\n   apply (induct xs)<br>\n    apply simp<br>\n   apply (drule meta_mp, erule subset_inj_on)<br>\n    apply auto[1]<br>\n   apply (drule_tac x=k and y=a in inj_on_iff, auto)<br>\n   done</p>\n<p>lemma filter_eq_replicate_count_multiset:<br>\n   \"filter (op = k) xs = replicate (count (multiset_of xs) k) k\"<br>\n   by (induct xs, auto)</p>\n<p>lemma sort_key_inj_key_eq:<br>\n   assumes multiset: \"multiset_of xs = multiset_of ys\"<br>\n         and inj_on: \"inj_on f (set xs)\"<br>\n             and ys: \"sorted (map f ys)\"<br>\n   shows \"sort_key f xs = ys\"<br>\nproof -<br>\n   from multiset have set:<br>\n     \"set xs = set ys\"<br>\n     by (metis set_of_multiset_of)<br>\n   note filter = inj_on_filter_key_eq[OF subset_inj_on, OF inj_on]<br>\n   note propk = properties_for_sort_key[OF multiset[symmetric] _ ys]<br>\n   show ?thesis<br>\n     apply (rule propk)<br>\n     apply (simp add: filter set)<br>\n     apply (simp add: filter_eq_replicate_count_multiset multiset)<br>\n     done<br>\nqed</p>\n<p>lemmas sort_key_eq_sort_key<br>\n     = sort_key_inj_key_eq[where f=f and ys=\"sort_key f ys\",<br>\n         simplified] for f ys</p>\n<p>Cheers,<br>\n     Thomas.</p>\n<hr>\n<p>The information in this e-mail may be confidential and subject to legal professional privilege and/or copyright. National ICT Australia Limited accepts no liability for any damage caused by this email or its attachments.</p>",
        "id": 294651857,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661166389
    }
]