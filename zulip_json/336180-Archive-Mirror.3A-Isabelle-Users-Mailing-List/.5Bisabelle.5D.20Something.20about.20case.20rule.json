[
    {
        "content": "<p>From: yug &lt;<a href=\"mailto:yug@ios.ac.cn\">yug@ios.ac.cn</a>&gt;<br>\nFirst of all , the type declaration:</p>\n<p>datatype<br>\n('a,'b) val= Var 'a | Const \"'b\"| Abs 'a \"('a,'b) lt\"<br>\nand<br>\n('a,'b) lt= V \"('a,'b) val\" | App \"('a,'b) lt\" \"('a,'b) lt\"</p>\n<p>I have declared a case rule</p>\n<p>lemma ltnormalcase[case_names Var Const Abs App, cases type]:<br>\nassumes \"!! x. P (V (Var x))\" \"!!b. P(V (Const b))\" \"!! x M. P (V (Abs x<br>\nM))\"<br>\n\"!! L M. P (L $ M)\" shows \"P N\"</p>\n<p>then how can I use it in the proof context?</p>\n<p>I try it in this way (Isar reference Page 85 ,section 4.3.5) :</p>\n<p>proof(cases \"N\" rule:ltnormalcase)</p>\n<p>but Isar says:<br>\n\"<br>\n*** Ill-typed instantiation:<br>\n*** N :: ('a, 'b) lt<br>\n*** At command \"proof\".<br>\n\"</p>\n<p>Any help?? thanks a lot</p>\n<p>YuGang</p>",
        "id": 293911071,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660747435
    },
    {
        "content": "<p>From: yug &lt;<a href=\"mailto:yug@ios.ac.cn\">yug@ios.ac.cn</a>&gt;<br>\nMany thanks to Christian Urban!!</p>\n<p>I have solved it clearly!</p>\n<p>After I have defined the mutually inductive datatype ('a,'b)lt and<br>\n('a,'b) val.</p>\n<p>I get the following two rules on induct and type</p>\n<p>thm val_lt.induct (* induct rule *)<br>\nthm lt.exhaust (* case rule *)</p>\n<p>we can see that case rule is in the form of</p>\n<p>“?y = C x1...xn ==&gt; .. ” (* where C is the constructor *)</p>\n<p>so, if we'd like to define another rule on cases ,we should do<br>\ndeclaration as follows:</p>\n<p>lemma ltnormalcase[case_names Var Const Abs App, cases type]:<br>\nassumes \"!! x . y=V (Var x) P \" \"!!b. y=V (Const b)P \" \"!! x M. y=V (Abs<br>\nx M) P \"<br>\n\"!! M N. y=M$N P \" shows \"P \"</p>\n<p>and explicitly declare the cases on type:</p>\n<p>lemma lttypecase[case_names Value App, cases type]:<br>\nassumes \"!! x. y=V x P \" \"!! M N. y=M$N P\" shows \"P\"</p>\n<p>now we can switch between the two rules:<br>\n......<br>\nproof(cases \"N\" rule:ltnormalcase) or proof(cases \"N\" rule:lttypecase)<br>\n......</p>\n<p>I also give the induct rule declarations</p>\n<p>lemma ltinductnormal[case_names Var Const Abs App, induct type]:<br>\nassumes \"!! x. P (V (Var x))\" \"!!b. P(V (Const b))\" \"!! x M. [| P M |]<br>\n==&gt; P (V (Abs x M))\"<br>\n\"!! L M. [| P L; P M |] ==&gt; P (L $ M)\" shows \"P N\"</p>\n<p>lemma ltinductv[case_names Value App,induct type]:<br>\nassumes \"!! x. P (V x)\" \"!! L M.[| P L;P M |] ==&gt; P(L$M)\" shows \"P N\"</p>\n<p>yug wrote:</p>",
        "id": 293911077,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660747436
    }
]