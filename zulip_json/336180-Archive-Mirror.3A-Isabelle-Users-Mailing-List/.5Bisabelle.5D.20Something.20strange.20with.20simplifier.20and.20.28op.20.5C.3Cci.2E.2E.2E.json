[
    {
        "content": "<p>From: Peter Lammich &lt;<a href=\"mailto:peter.lammich@uni-muenster.de\">peter.lammich@uni-muenster.de</a>&gt;<br>\nThe mailing list seems not to accept html mails ... I'll try again and<br>\nhope that the mail is still readable, else sorry for the spam:</p>\n<p>Hi all,</p>\n<p>is there something special to the function composition (op \\&lt;circ&gt;)<br>\noperator built in Isabelle?</p>\n<p>I have some problems understanding the behaviour of the simplifier in<br>\nconjunction with the lemma o_apply.<br>\nA (simp (no_asm_use) only: o_apply) - command gives different results<br>\ndepending on the proof context I use it in. For example,<br>\nit may but need not happen that a \"(f\\&lt;circ&gt;g)\" is rewritten to<br>\n\"\\&lt;lambda&gt;u. f (g u)\" by (simp (no_asm_use) only: o_apply) in the same<br>\nsubgoal, depending on where it occurs in a proof.<br>\nIt also happens that only some occurences of \"(f\\&lt;circ&gt;g)\" are rewritten<br>\nand others not.</p>\n<p>So is there something going on behind the scenes that I do not see ?.<br>\nAlso the simplifier traces are not very useful there (see below).</p>\n<p>Here is a (rather complex, sorry for that) example:</p>\n<p>Doing the following:</p>\n<p>lemma \" \\&lt;And&gt;e w' w1' w2 x. \\&lt;lbrakk&gt;w' \\&lt;in&gt; w1' \\&lt;otimes&gt;\\&lt;^bsub&gt;(\\&lt;alpha&gt; \\&lt;circ&gt; f)\\&lt;^esub&gt; w2; fst ((\\&lt;alpha&gt; \\&lt;circ&gt; f) e) \\&lt;inter&gt; mon_pl (map (\\&lt;alpha&gt; \\&lt;circ&gt; f) w2) = {}; map f w' \\&lt;in&gt; map f w1' \\&lt;otimes&gt;\\&lt;^bsub&gt;\\&lt;alpha&gt;\\&lt;^esub&gt; map f w2; x \\&lt;in&gt; fst (\\&lt;alpha&gt; (f e)); x \\&lt;in&gt; mon_pl (map (\\&lt;alpha&gt; \\&lt;circ&gt; f) w2)\\&lt;rbrakk&gt; \\&lt;Longrightarrow&gt; False\"</p>\n<p>apply (simp (no_asm_use) only: o_apply)</p>\n<p>I get (as expected).</p>\n<p>(* 1. \\&lt;And&gt;e w' w1' w2 x. \\&lt;lbrakk&gt;w' \\&lt;in&gt; w1' \\&lt;otimes&gt;\\&lt;^bsub&gt;(\\&lt;alpha&gt; \\&lt;circ&gt; f)\\&lt;^esub&gt; w2; fst (\\&lt;alpha&gt; (f e)) \\&lt;inter&gt; mon_pl (map (\\&lt;alpha&gt; \\&lt;circ&gt; f) w2) = {}; map f w' \\&lt;in&gt; map f w1' \\&lt;otimes&gt;\\&lt;^bsub&gt;\\&lt;alpha&gt;\\&lt;^esub&gt; map f w2; x \\&lt;in&gt; fst (\\&lt;alpha&gt; (f e)); x \\&lt;in&gt; mon_pl (map (\\&lt;alpha&gt; \\&lt;circ&gt; f) w2)\\&lt;rbrakk&gt; \\&lt;Longrightarrow&gt; False *)</p>\n<p>That is, only the \"fst ((\\&lt;alpha&gt; \\&lt;circ&gt; f) e) \" was rewritten to \"fst<br>\n(\\&lt;alpha&gt; (f e))\"</p>\n<p>Now the same subgoal occurs in some (larger) proof:</p>\n<p>lemma cil_inner_map: \"w\\&lt;in&gt;w1 \\&lt;otimes&gt;\\&lt;^bsub&gt;(\\&lt;alpha&gt;\\&lt;circ&gt;f)\\&lt;^esub&gt; w2 \\&lt;Longrightarrow&gt; map f w \\&lt;in&gt; map f w1 \\&lt;otimes&gt;\\&lt;^bsub&gt;\\&lt;alpha&gt;\\&lt;^esub&gt; map f w2\" </p>\n<p>apply (induct rule: cil_set_induct_fix\\&lt;alpha&gt;)</p>\n<p>apply (simp)</p>\n<p>apply (simp_all del: o_apply)</p>\n<p>apply (rule cil_cons1)</p>\n<p>apply (auto simp add: map_compose[symmetric] simp del: o_apply)</p>\n<p>At this point, I have the same subgoal as above:</p>\n<p>(* 1. \\&lt;And&gt;e w' w1' w2 x. \\&lt;lbrakk&gt;w' \\&lt;in&gt; w1' \\&lt;otimes&gt;\\&lt;^bsub&gt;(\\&lt;alpha&gt; \\&lt;circ&gt; f)\\&lt;^esub&gt; w2; fst ((\\&lt;alpha&gt; \\&lt;circ&gt; f) e) \\&lt;inter&gt; mon_pl (map (\\&lt;alpha&gt; \\&lt;circ&gt; f) w2) = {}; map f w' \\&lt;in&gt; map f w1' \\&lt;otimes&gt;\\&lt;^bsub&gt;\\&lt;alpha&gt;\\&lt;^esub&gt; map f w2; x \\&lt;in&gt; fst (\\&lt;alpha&gt; (f e)); x \\&lt;in&gt; mon_pl (map (\\&lt;alpha&gt; \\&lt;circ&gt; f) w2)\\&lt;rbrakk&gt; \\&lt;Longrightarrow&gt; False *)</p>\n<p>Then I do:</p>\n<p>apply (simp (no_asm_use) only: o_apply)</p>\n<p>But I get:</p>\n<p>(* 1. \\&lt;And&gt;e w' w1' w2 x. \\&lt;lbrakk&gt;w' \\&lt;in&gt; w1' \\&lt;otimes&gt;\\&lt;^bsub&gt;(\\&lt;lambda&gt;u. \\&lt;alpha&gt; (f u))\\&lt;^esub&gt; w2; fst (\\&lt;alpha&gt; (f e)) \\&lt;inter&gt; mon_pl (map (\\&lt;lambda&gt;u. \\&lt;alpha&gt; (f u)) w2) = {}; map f w' \\&lt;in&gt; map f w1' \\&lt;otimes&gt;\\&lt;^bsub&gt;\\&lt;alpha&gt;\\&lt;^esub&gt; map f w2; x \\&lt;in&gt; fst (\\&lt;alpha&gt; (f e)); x \\&lt;in&gt; mon_pl (map (\\&lt;alpha&gt; \\&lt;circ&gt; f) w2)\\&lt;rbrakk&gt; \\&lt;Longrightarrow&gt; False *)</p>\n<p>note that now also \"\\&lt;alpha&gt; \\&lt;circ&gt; f\" was rewritten to \"\\&lt;lambda&gt;u.<br>\n\\&lt;alpha&gt; (f u)\" two times (both marked red) and one time it was not<br>\nrewritten (marked green).<br>\n(The a\\&lt;otimes&gt;\\&lt;^bsub&gt;b\\&lt;^esub&gt;c is some syntax for cil(b,a,c), where<br>\ncil is a function defined with recdef).</p>\n<p>I have no idea what's going on here, I thought a (simp (no_asm_use)<br>\nonly: X) would only apply the rewriting rule X and nothing else.</p>\n<p>The simplifier trace of the first run is as expected:</p>\n<p>[0]Adding rewrite rule \"Fun.o_apply\":</p>\n<p>(?f1 \\&lt;circ&gt; ?g1) ?x1 \\&lt;equiv&gt; ?f1 (?g1 ?x1)</p>\n<p>[1]SIMPLIFIER INVOKED ON THE FOLLOWING TERM:</p>\n<p>\\&lt;And&gt;e w' w1' w2 x. \\&lt;lbrakk&gt;w' \\&lt;in&gt; w1' \\&lt;otimes&gt;\\&lt;^bsub&gt;(\\&lt;alpha&gt; \\&lt;circ&gt; f)\\&lt;^esub&gt; w2; fst ((\\&lt;alpha&gt; \\&lt;circ&gt; f) e) \\&lt;inter&gt; mon_pl (map (\\&lt;alpha&gt; \\&lt;circ&gt; f) w2) = {}; map f w' \\&lt;in&gt; map f w1' \\&lt;otimes&gt;\\&lt;^bsub&gt;\\&lt;alpha&gt;\\&lt;^esub&gt; map f w2; x \\&lt;in&gt; fst (\\&lt;alpha&gt; (f e)); x \\&lt;in&gt; mon_pl (map (\\&lt;alpha&gt; \\&lt;circ&gt; f) w2)\\&lt;rbrakk&gt; \\&lt;Longrightarrow&gt; False</p>\n<p>[1]Applying instance of rewrite rule \"Fun.o_apply\":</p>\n<p>(?f1 \\&lt;circ&gt; ?g1) ?x1 \\&lt;equiv&gt; ?f1 (?g1 ?x1)</p>\n<p>[1]Rewriting:</p>\n<p>(\\&lt;alpha&gt; \\&lt;circ&gt; f) e \\&lt;equiv&gt; \\&lt;alpha&gt; (f e)</p>\n<hr>\n<p>The trace of the second run is somewhat strange. The simplifier rule is<br>\napplied 3 times, but I cannot see where it gets the term \"(\\&lt;alpha&gt;<br>\n\\&lt;circ&gt; f) u\" from, this term simply does not occur in the original<br>\nformula !</p>\n<p>[0]Adding rewrite rule \"Fun.o_apply\":</p>\n<p>(?f1 \\&lt;circ&gt; ?g1) ?x1 \\&lt;equiv&gt; ?f1 (?g1 ?x1)</p>\n<p>[1]SIMPLIFIER INVOKED ON THE FOLLOWING TERM:</p>\n<p>\\&lt;And&gt;e w' w1' w2 x. \\&lt;lbrakk&gt;w' \\&lt;in&gt; w1' \\&lt;otimes&gt;\\&lt;^bsub&gt;(\\&lt;alpha&gt; \\&lt;circ&gt; f)\\&lt;^esub&gt; w2; fst ((\\&lt;alpha&gt; \\&lt;circ&gt; f) e) \\&lt;inter&gt; mon_pl (map (\\&lt;alpha&gt; \\&lt;circ&gt; f) w2) = {}; map f w' \\&lt;in&gt; map f w1' \\&lt;otimes&gt;\\&lt;^bsub&gt;\\&lt;alpha&gt;\\&lt;^esub&gt; map f w2; x \\&lt;in&gt; fst (\\&lt;alpha&gt; (f e)); x \\&lt;in&gt; mon_pl (map (\\&lt;alpha&gt; \\&lt;circ&gt; f) w2)\\&lt;rbrakk&gt; \\&lt;Longrightarrow&gt; False</p>\n<p>[1]Applying instance of rewrite rule \"Fun.o_apply\":</p>\n<p>(?f1 \\&lt;circ&gt; ?g1) ?x1 \\&lt;equiv&gt; ?f1 (?g1 ?x1)</p>\n<p><em>[1]Rewriting:</em></p>\n<p><em>(\\&lt;alpha&gt; \\&lt;circ&gt; f) u \\&lt;equiv&gt; \\&lt;alpha&gt; (f u)</em></p>\n<p>[1]Applying instance of rewrite rule \"Fun.o_apply\":</p>\n<p>(?f1 \\&lt;circ&gt; ?g1) ?x1 \\&lt;equiv&gt; ?f1 (?g1 ?x1)</p>\n<p>[1]Rewriting:</p>\n<p>(\\&lt;alpha&gt; \\&lt;circ&gt; f) e \\&lt;equiv&gt; \\&lt;alpha&gt; (f e)</p>\n<p>[1]Applying instance of rewrite rule \"Fun.o_apply\":</p>\n<p>(?f1 \\&lt;circ&gt; ?g1) ?x1 \\&lt;equiv&gt; ?f1 (?g1 ?x1)</p>\n<p><em>[1]Rewriting:</em></p>\n<p><em>(\\&lt;alpha&gt; \\&lt;circ&gt; f) u \\&lt;equiv&gt; \\&lt;alpha&gt; (f u)</em></p>\n<p>Sorry for the complex example, if someone wants I will try to compose a<br>\nrunnable theory and send it to him. But my question for short is:</p>\n<p>What's going on behind the scenes that is not reported in the simplifier<br>\ntrace ?</p>\n<p>Thanks in advance and regards<br>\n  Peter</p>\n<p>-- <br>\nPeter Lammich, Institut f端r Informatik<br>\nRaum 715, Einsteinstrasse 62, 48149 M端nster<br>\nMail: <a href=\"mailto:peter.lammich@uni-muenster.de\">peter.lammich@uni-muenster.de</a><br>\nTel: 0251-83-32749<br>\nMobil: 0163-5310380</p>\n<p>-- <br>\nPeter Lammich, Institut f端r Informatik<br>\nRaum 715, Einsteinstrasse 62, 48149 M端nster<br>\nMail: <a href=\"mailto:peter.lammich@uni-muenster.de\">peter.lammich@uni-muenster.de</a><br>\nTel: 0251-83-32749<br>\nMobil: 0163-5310380</p>",
        "id": 294053928,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660820789
    }
]