[
    {
        "content": "<p>From: Lars Hupel &lt;<a href=\"mailto:hupel@in.tum.de\">hupel@in.tum.de</a>&gt;<br>\nDear Isabelle power users,</p>\n<p>the following is more of a \"problem statement\" rather than any concrete<br>\nsuggestion. I've found an interesting side effect of how the function<br>\npackage works in combination with the way local theories are handled in<br>\nIsabelle, and thought I should document it here and solicit opinions.</p>\n<p>Consider the function \"sum_list\". It's very simple.</p>\n<p>sum_list [] = 0<br>\nsum_list (x # xs) = x + sum_list xs</p>\n<p>Instead of defining this with \"primrec\", assume it has been defined with<br>\n\"fun\".</p>\n<p>\"fun\" will helpfully prove termination of this automatically. Before<br>\ndoing so, it defines \"sum_list_rel\", which is a a set of pairs<br>\n(essentially, containing all tuples \"(x # xs, x)\"). Then, the automatic<br>\ntermination proof shows that this relation is wellfounded, i.e., that<br>\nthere are no infinite descending chains.</p>\n<p>Note how \"sum_list_rel\" only talks about \"op #\", but not about \"0\" or<br>\n\"op +\". In other words, the termination condition of \"sum_list\" is<br>\nindependent of class axioms. The most general type of \"sum_list_rel\"<br>\ncould be more general (\"'a::type\") than that of \"sum_list\"<br>\n(\"'a::{plus,zero}\").</p>\n<p>The sort constraint carried by \"sum_list_rel\" is necessary because – as<br>\nfar as I can tell – all internal constructions of the function package<br>\nhappen in the same local theory, which means that you can't have both<br>\n\"'a::type\" and \"'a::{plus,zero}\".</p>\n<p>Why is this interesting to me? During dictionary construction, I define<br>\na new version of \"sum_list\" which doesn't have sort constraints. When<br>\ntrying to \"port\" the original termination proof of \"sum_list\" I need to<br>\nplay tricks with parametricity to get rid of the sort constraints (in<br>\nessence, I also need to define a sort-less \"sum_list_rel\" and prove<br>\nsimulation). If \"sum_list_rel\" were sort-less, I wouldn't have these<br>\nproblems.</p>\n<p>The following questions are of interest to me:</p>\n<ol>\n<li>\n<p>To people familiar with how local theories work: Is changing the<br>\nfunction package to make it define the termination relation with less<br>\nsort constraints feasible? Or would that produce unwanted side effects,<br>\ne.g. when defining a function in a class instantiation?</p>\n</li>\n<li>\n<p>To users of the function package: Can you give me an example of a<br>\nfunction that uses class axioms to prove termination? Or possibly<br>\nrequires a \"fundef_cong\" rule with a sort constraint?</p>\n</li>\n</ol>\n<p>Cheers<br>\nLars</p>",
        "id": 294709931,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661181838
    },
    {
        "content": "<p>From: \"Thiemann, Rene\" &lt;<a href=\"mailto:Rene.Thiemann@uibk.ac.at\">Rene.Thiemann@uibk.ac.at</a>&gt;<br>\nDear Lars,</p>\n<p>Here is an example: look at function sqrt_approx_main in AFP/Sqrt_Babylonian/Sqrt_Babylonian.</p>\n<p>It is of type “‘a :: {linordered_field,floor_ceiling} =&gt; ‘a” and uses the distance to the <br>\nsqrt as termination measure, so some argument which definitely requires reasoning about fields, etc.</p>\n<p>Perhaps not the easiest example, but one which falls into the desired class. </p>\n<p>Cheers,<br>\nRené</p>",
        "id": 294709955,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661181842
    },
    {
        "content": "<p>From: \"Thiemann, Rene\" &lt;<a href=\"mailto:Rene.Thiemann@uibk.ac.at\">Rene.Thiemann@uibk.ac.at</a>&gt;<br>\nHi again,</p>\n<p>looking a bit further, I also found a fundef-cong-rule which contains<br>\nsort-constraints, namely sum.cong.</p>\n<p>Look at AFP/Bernoulli/Bernoulli.thy, function bernoulli.</p>\n<p>Cheers,<br>\nRené</p>",
        "id": 294709998,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661181848
    },
    {
        "content": "<p>From: Lars Hupel &lt;<a href=\"mailto:hupel@in.tum.de\">hupel@in.tum.de</a>&gt;<br>\nsum.cong is a great example, thanks!</p>\n<p>Cheers<br>\nLars</p>",
        "id": 294710028,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661181858
    },
    {
        "content": "<p>From: Florian Haftmann &lt;<a href=\"mailto:florian.haftmann@informatik.tu-muenchen.de\">florian.haftmann@informatik.tu-muenchen.de</a>&gt;<br>\nHi Lars,</p>\n<p>my PhD thesis contains a contrived example in §4.6.2 Definitional<br>\neliminating of overloading</p>\n<p>Cheers,<br>\n    Florian<br>\n<a href=\"/user_uploads/14278/ng-Ajjqfk1srqG1nuGlyPfxZ/signature.asc\">signature.asc</a></p>",
        "id": 294710051,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661181867
    }
]