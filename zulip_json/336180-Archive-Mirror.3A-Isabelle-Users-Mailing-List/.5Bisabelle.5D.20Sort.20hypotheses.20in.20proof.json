[
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nOn Tue, 20 Oct 2015, Lars Hupel wrote:</p>\n<blockquote>\n<p>today I noticed a funny suffix in my goal state:</p>\n<p>using this:<br>\n wellformed 0 t'<br>\n rs ⊢ t ⟶* t'  [evaluate]</p>\n<p>Peter informed me that \"[evaluate]\" is a (pending?) sort hypothesis.</p>\n</blockquote>\n<p>There are a fewmore explanations in the \"implementation\" manual section <br>\n\"2.3.3 Sort hypotheses\".</p>\n<blockquote>\n<p>However, I've seen some inconsistent behaviour in which cases exactly <br>\nthose are printed. Consider the following minimal theory (see also <br>\nattachment):</p>\n<p>typedecl rules<br>\nconsts rules :: \"rules ⇒ bool\"</p>\n<p>class evaluate =<br>\n fixes eval :: \"'a ⇒ bool\"<br>\n assumes eval_valid: \"rules rs ⟹ eval a\"</p>\n<p>definition scoped_eval_fun where<br>\n\"scoped_eval_fun rs f ⟷ (∀x. eval x ⟶ eval (f x))\"</p>\n<p>lemma \"rules rs ⟹ scoped_eval_fun rs a\"<br>\nproof -<br>\n fix rs<br>\n assume \"rules rs\"<br>\n thm this<br>\n thm ‹rules rs›<br>\noops</p>\n<p>In the proof, I expected that either both \"thm\" statements print the<br>\nsort hypothesis, or both don't.</p>\n</blockquote>\n<p>As explained in the \"isar-ref\" manual section 6.3.3, the following is <br>\nequivalent:</p>\n<p>note <code>prop</code></p>\n<p>have \"prop\" by fact</p>\n<p>So the alt-string notation for literal facts is not just a reference to an <br>\nexisting fact, but a proven statement (possibly a genuine instance of an <br>\nexisting fact).</p>\n<p>That is the technical reason for the difference: a proof always imposes <br>\nall sort hypotheses from the context on the result, for reasons of <br>\nmodularity (proof irrelevance).</p>\n<p>The print operations of theorems should take that into account, but until <br>\nIsabelle2015 it is still not fully \"localized\" in that respect.  I will <br>\nchange that for the next release.</p>\n<blockquote>\n<p>This confuses me tremendously, especially given that the fact \"rules rs\" <br>\ndoesn't stem from the class.</p>\n</blockquote>\n<p>Normally the situation does not occur in practice, because classes have <br>\nsome standard instances in the library context.  Sort hypotheses for <br>\ninhabited classes are always stripped.</p>\n<p>So maybe you can imitate such a situation in your application.</p>\n<p>Makarius</p>",
        "id": 294655913,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661168020
    },
    {
        "content": "<p>From: Lars Hupel &lt;<a href=\"mailto:hupel@in.tum.de\">hupel@in.tum.de</a>&gt;<br>\nDear list,</p>\n<p>today I noticed a funny suffix in my goal state:</p>\n<p>using this:<br>\n  wellformed 0 t'<br>\n  rs ⊢ t ⟶* t'  [evaluate]</p>\n<p>Peter informed me that \"[evaluate]\" is a (pending?) sort hypothesis.<br>\nHowever, I've seen some inconsistent behaviour in which cases exactly<br>\nthose are printed. Consider the following minimal theory (see also<br>\nattachment):</p>\n<p>typedecl rules<br>\nconsts rules :: \"rules ⇒ bool\"</p>\n<p>class evaluate =<br>\n  fixes eval :: \"'a ⇒ bool\"<br>\n  assumes eval_valid: \"rules rs ⟹ eval a\"</p>\n<p>definition scoped_eval_fun where<br>\n\"scoped_eval_fun rs f ⟷ (∀x. eval x ⟶ eval (f x))\"</p>\n<p>lemma \"rules rs ⟹ scoped_eval_fun rs a\"<br>\nproof -<br>\n  fix rs<br>\n  assume \"rules rs\"<br>\n  thm this<br>\n  thm ‹rules rs›<br>\noops</p>\n<p>In the proof, I expected that either both \"thm\" statements print the<br>\nsort hypothesis, or both don't. In reality, if I reference a fact by<br>\nname, it won't show up; only, if I reference it by a literal. This<br>\nconfuses me tremendously, especially given that the fact \"rules rs\"<br>\ndoesn't stem from the class.</p>\n<p>Cheers<br>\nLars<br>\n<a href=\"/user_uploads/14278/BuJRYwbwAA2BH1j57urlmxx-/Hyps.thy\">Hyps.thy</a></p>",
        "id": 294658081,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661168873
    }
]