[
    {
        "content": "<p>From: Mathieu Giorgino &lt;<a href=\"mailto:mathieu.giorgino@irit.fr\">mathieu.giorgino@irit.fr</a>&gt;<br>\nHello all,</p>\n<p>In a locale, when a definition uses a parameter, specialization of one of his <br>\ntype variables through constrains on an other parameter seems not possible. <br>\nHowever, it is possible with constrains on this parameter.</p>\n<p>For example:</p>\n<hr>\n<p>locale foo1_loc =<br>\n  fixes bar :: \"'a\"<br>\n  fixes foo :: \"'a\"<br>\nbegin<br>\ndefinition \"foo' a = foo\"<br>\nend</p>\n<p>locale foo1_nat_loc = foo1_loc +<br>\n  constrains foo :: \"nat\"</p>\n<p>(*<br>\nlocale foo1_nat_loc' = foo1_loc +<br>\n  constrains bar :: \"nat\"<br>\nError: Failed to meet type constrain<br>\n*)</p>\n<hr>\n<p>As a result, it seems impossible to specialize a type variable shared by <br>\nseveral parameters used in definitions:</p>\n<hr>\n<p>locale foo3_loc =<br>\n  fixes bar :: \"'a\"<br>\n  fixes foo :: \"'a\"<br>\nbegin<br>\ndefinition \"foobar = (foo, bar)\"<br>\nend</p>\n<p>(*<br>\nlocale foo3_nat_loc = foo3_loc +<br>\n  constrains bar :: \"nat\"<br>\n  constrains foo :: \"nat\"<br>\nError: Failed to meet type constrain<br>\n*)</p>\n<hr>\n<p>See attachment for more examples.</p>\n<p>Is this a bug or is there any fundamental reason this doesn't work ?</p>\n<p>To solve this problem, a great feature would be to have specializable type <br>\ndeclarations but I've understood it wasn't possible due to the logical <br>\nframework (quantification on types) in an email from Makarius:<br>\n<a href=\"https://lists.cam.ac.uk/pipermail/cl-isabelle-users/2009-July/msg00111.html\">https://lists.cam.ac.uk/pipermail/cl-isabelle-users/2009-July/msg00111.html</a></p>\n<p>I know I could also use AWE, but there is no release for Isabelle 2009-2 (but <br>\nI haven't tried the one for Isabelle 2009-2 that could perhaps also work).</p>\n<p>Furthermore in an other mail, Makarius said:<br>\nTrying a bit harder in the internal structures, one could support type <br>\nparameters on the RHS one day.<br>\n<a href=\"https://lists.cam.ac.uk/pipermail/cl-isabelle-users/2010-July/msg00033.html\">https://lists.cam.ac.uk/pipermail/cl-isabelle-users/2010-July/msg00033.html</a> </p>\n<p>Is this still a possibility ?</p>\n<p>Thanks,</p>\n<p>Mathieu Giorgino<br>\n<a href=\"/user_uploads/14278/TLXH1kzcqLx9qh8hbxm7hZEe/Type_Specialization_Locales.thy\">Type_Specialization_Locales.thy</a></p>",
        "id": 294119969,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660839497
    },
    {
        "content": "<p>From: Brian Huffman &lt;<a href=\"mailto:brianh@cs.pdx.edu\">brianh@cs.pdx.edu</a>&gt;<br>\nNote that when you have separate \"constrains\" clauses, they are<br>\napplied one at a time. You can't constrain the type of \"bar\" by<br>\nitself, because then it doesn't have the same type as \"foo\", which the<br>\nfunction \"foobar\" requires.</p>\n<p>However, it works if you declare both type constraints simultaneously.<br>\n(I tested this with Isabelle2009-2.)</p>\n<p>locale foo3_nat_loc = foo3_loc +<br>\n  constrains bar :: \"nat\" and foo :: \"nat\"</p>\n<p>The same trick also works on all the other examples in your file that<br>\nI tried it on.</p>\n<p>Hope this helps,</p>\n<ul>\n<li>Brian</li>\n</ul>",
        "id": 294119984,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660839502
    },
    {
        "content": "<p>From: Clemens Ballarin &lt;<a href=\"mailto:ballarin@in.tum.de\">ballarin@in.tum.de</a>&gt;<br>\nDear Mathieu,</p>\n<p>Type instances (like other parameter instantiations) should be given  <br>\nin the locale expression.  In your example, use something like</p>\n<p>locale foo1_nat_loc' = foo1_loc bar foo for bar :: nat and foo</p>\n<p>to instantiate the parameter bar with some bar of type nat, which will  <br>\nbecome a parameter of the new locale.</p>\n<p>The constrains element stems from times when locale expressions were  <br>\nbased on renaming rather than instantiation.  It is deprecated and  <br>\nwill disappear in a future release of Isabelle.</p>\n<p>Clemens</p>\n<p>Quoting Mathieu Giorgino &lt;<a href=\"mailto:mathieu.giorgino@irit.fr\">mathieu.giorgino@irit.fr</a>&gt;:</p>",
        "id": 294120008,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660839511
    },
    {
        "content": "<p>From: Andreas Lochbihler &lt;<a href=\"mailto:andreas.lochbihler@kit.edu\">andreas.lochbihler@kit.edu</a>&gt;<br>\nHi Clemens,</p>\n<p>Yes, it still does, at least with the Isabelle versions I tested: Isabelle <br>\nrepository version 43916ac560a4 and Isabelle 2009-2. Here is a small example:</p>\n<p>locale A =<br>\n   fixes a :: \"'b =&gt; 'c\" (\"%_%\")</p>\n<p>locale B = A begin<br>\nterm \"%undefined%\" -- \"works fine\"<br>\nend</p>\n<p>locale C =<br>\n   A a<br>\n   for a :: \"'b =&gt; 'c\"<br>\nbegin<br>\nterm \"%undefined%\" -- \"Gives inner syntax error at %\"<br>\nend</p>\n<p>Andreas</p>",
        "id": 294120260,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660839594
    },
    {
        "content": "<p>From: Clemens Ballarin &lt;<a href=\"mailto:ballarin@in.tum.de\">ballarin@in.tum.de</a>&gt;<br>\nHi Andreas,</p>\n<blockquote>\n<p>Your approach with for would work nicely if it did not erase all  <br>\nmixfix syntax annotations on the parameters.</p>\n</blockquote>\n<p>Sorry, I had misread your message.</p>\n<p>The syntax of a <em>parameter</em> is either given in a fixes element or a  <br>\nfor clause.  If no syntax is specified, this means that no syntax is  <br>\nrequested.  This is so even in a for clause, because there needs to be  <br>\na mechanism to get rid of unwanted syntax when extending a locale.</p>\n<p>While replying I though of the syntax of a <em>constant</em> (as introduced  <br>\nby a definition statement).  Those are preserved under changes of the  <br>\nparameter types.</p>\n<p>Clemens</p>\n<blockquote>\n<p>Yes, it still does, at least with the Isabelle versions I tested:  <br>\nIsabelle repository version 43916ac560a4 and Isabelle 2009-2. Here  <br>\nis a small example:</p>\n<p>locale A =<br>\n  fixes a :: \"'b =&gt; 'c\" (\"%_%\")</p>\n<p>locale B = A begin<br>\nterm \"%undefined%\" -- \"works fine\"<br>\nend</p>\n<p>locale C =<br>\n  A a<br>\n  for a :: \"'b =&gt; 'c\"<br>\nbegin<br>\nterm \"%undefined%\" -- \"Gives inner syntax error at %\"<br>\nend</p>\n<p>Andreas<br>\n</p>\n</blockquote>",
        "id": 294121022,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660839828
    },
    {
        "content": "<p>From: Andreas Lochbihler &lt;<a href=\"mailto:andreas.lochbihler@kit.edu\">andreas.lochbihler@kit.edu</a>&gt;<br>\nDear Clemens,</p>\n<p>When it disappears, please provide a way to simulate the behaviour of <br>\nconstrains. I use it a lot to undo the havoc that locale inheritance causes on <br>\ntype variable names. It is no use to have ten type variables 'a to 'j floating <br>\naround that get renamed every now and then. Your approach with for would work <br>\nnicely if it did not erase all mixfix syntax annotations on the parameters. It <br>\nis hard to consistently change mixfix syntax when it is repeated all over the place.</p>\n<p>Andreas</p>",
        "id": 294121949,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660840121
    },
    {
        "content": "<p>From: Mathieu Giorgino &lt;<a href=\"mailto:mathieu.giorgino@irit.fr\">mathieu.giorgino@irit.fr</a>&gt;<br>\nThanks Brian and Clemens,</p>\n<p>The Brian's solution worked well but it was still necessary to contrains all <br>\nparameters.</p>\n<p>With Clemens' one, it is not any more necessary: the type is constrained once <br>\nfor all parameters.</p>\n<p>However, is there anyone having a clue about my last question?</p>\n<blockquote>\n<blockquote>\n<p>A great feature would be to have specializable<br>\ntype declarations but I've understood it wasn't possible due to the<br>\nlogical framework (quantification on types) in an email from Makarius:<br>\n<a href=\"https://lists.cam.ac.uk/pipermail/cl-isabelle-users/2009-\">https://lists.cam.ac.uk/pipermail/cl-isabelle-users/2009-</a><br>\nJuly/msg00111.html</p>\n<p>I know I could also use AWE, but there is no release for Isabelle 2009-2<br>\n(but I haven't tried the one for Isabelle 2009-2 that could perhaps also<br>\nwork).</p>\n<p>Furthermore in an other mail, Makarius said:<br>\nTrying a bit harder in the internal structures, one could support type<br>\nparameters on the RHS one day.<br>\n<a href=\"https://lists.cam.ac.uk/pipermail/cl-isabelle-users/2010-\">https://lists.cam.ac.uk/pipermail/cl-isabelle-users/2010-</a><br>\nJuly/msg00033.html<br>\nIs this still a possibility?</p>\n</blockquote>\n</blockquote>\n<p>Thanks,</p>\n<p>Mathieu</p>",
        "id": 294122445,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660840257
    },
    {
        "content": "<p>From: Clemens Ballarin &lt;<a href=\"mailto:ballarin@in.tum.de\">ballarin@in.tum.de</a>&gt;<br>\nHi Andreas,</p>\n<blockquote>\n<p>Your approach with for would work nicely if it did not erase all  <br>\nmixfix syntax annotations on the parameters.</p>\n</blockquote>\n<p>Does it?  I had hoped this was fixed with</p>\n<p>changeset:   32985:6c273b0e0e26<br>\nuser:        ballarin<br>\ndate:        Mon Nov 02 21:27:26 2009 +0100<br>\nsummary:     Relax on type agreement with original context when  <br>\napplying term sy<br>\nntax.</p>\n<p>which should keep the syntax provided only the type of the parameter  <br>\nis changed.</p>\n<p>Clemens</p>",
        "id": 294122744,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660840325
    }
]