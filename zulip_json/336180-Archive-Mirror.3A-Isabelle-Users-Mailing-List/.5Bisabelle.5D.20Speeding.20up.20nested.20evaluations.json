[
    {
        "content": "<p>From: <a href=\"mailto:hai.yang@tuta.io\">hai.yang@tuta.io</a><br>\nHello,<br>\nI have an Isabelle/HOL definition looks like</p>\n<p>definition \"f1 args = filter g (f0 args)\",</p>\n<p>where f0 returns a list.</p>\n<p>Now, if I try to compute </p>\n<p>value \"f1 args0\", </p>\n<p>for a specific value of args0, this is slower than</p>\n<p>value \"f0 args0\" <br>\ndefinition \"f0args0 = &lt;content pasted from the results obtained above&gt;\"<br>\nvalue \"filter g f0args0\"</p>\n<p>When I have a big number of nested definitions (say f(n+1) whose definitions depend on f(n), f(n-1), ..., f0), <br>\nthis problem becomes unbearable: if I try a computation involving f(n+1), it will never terminate,<br>\nwhile if I manually split computations as above, feeding the output of f(j) to f(j+1) by copy and paste, it will.</p>\n<p>However, this is unbearable work for even moderately large n.</p>\n<p>Is there something I can do about that? Or is that a fundamental limitation of functional programming?<br>\n(I'm saying that because by the copy/paste above I am formally introducing side effects, I think)</p>\n<p>Thanks!</p>\n<p>Hai Yang</p>",
        "id": 294821726,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661242455
    },
    {
        "content": "<p>From: Peter Lammich &lt;<a href=\"mailto:lammich@in.tum.de\">lammich@in.tum.de</a>&gt;<br>\n(Sorry, I replied only privately by mistake)</p>",
        "id": 294821741,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661242461
    }
]