[
    {
        "content": "<p>From: Peter Lammich &lt;<a href=\"mailto:peter.lammich@uni-muenster.de\">peter.lammich@uni-muenster.de</a>&gt;<br>\nHi all,</p>\n<p>given the following datatype<br>\n  datatype test = A | B | C</p>\n<p>how can I prove the following subgoal automatically with one (or a few) <br>\napply statements. I want to avoid to make the proof explicit in Isar, <br>\nbecause of the writing overhead.</p>\n<p>\"[| !!t. x:(case t of A =&gt; s1 | B =&gt; s2 | C =&gt; s3) ==&gt; P; x:s2 |] ==&gt; P\"</p>\n<p>something like (auto split: test.splits) does not work, am I missing <br>\nsome lemmas or is there a way to explicitly instantiating t ?</p>\n<p>Thanks for any hints in advance,<br>\n  Peter</p>",
        "id": 294062989,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660824432
    },
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\nThe problem are the deeply nested meta-logical symbols that the split <br>\nfacility seems unable to cope with. If you reformulate it a bit, it works:</p>\n<p>lemma [rule_format]:<br>\n\"[| !t. x:(case t of A =&gt; s1 | B =&gt; s2 | C =&gt; s3) --&gt; P; x:s2 |] ==&gt; P\"<br>\nby(auto split: test.splits)</p>\n<p>Tobias</p>\n<p>Peter Lammich wrote:</p>",
        "id": 294063010,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660824440
    },
    {
        "content": "<p>From: Brian Huffman &lt;<a href=\"mailto:brianh@cs.pdx.edu\">brianh@cs.pdx.edu</a>&gt;<br>\nBy the way, you can use the \"atomize\" tactic to automatically  <br>\nreformulate the current subgoal from meta-level to object-level  <br>\nquantifiers.</p>\n<p>lemma \"[| !!t. x:(case t of A =&gt; s1 | B =&gt; s2 | C =&gt; s3) ==&gt; P; x:s2 |] ==&gt; P\"<br>\nby (atomize, auto split: test.splits)</p>\n<p>Another option is to manually instantiate the meta-universal  <br>\nquantifier using the meta_spec rule:</p>\n<p>lemma \"[| !!t. x:(case t of A =&gt; s1 | B =&gt; s2 | C =&gt; s3) ==&gt; P; x:s2 |] ==&gt; P\"<br>\nby (drule meta_spec [where x=B], simp)</p>\n<ul>\n<li>Brian</li>\n</ul>\n<p>Quoting Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;:</p>",
        "id": 294063022,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660824447
    }
]