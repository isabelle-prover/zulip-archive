[
    {
        "content": "<p>From: Lars Hupel &lt;<a href=\"mailto:hupel@in.tum.de\">hupel@in.tum.de</a>&gt;<br>\nHi Andreas,</p>\n<p>thanks for that.</p>\n<blockquote>\n<p>Your formalisation as a datatype seems canonical to me and from my<br>\nexperience, I can just recommend to use a proper type constructor rather<br>\nthan a type_synonym. The datatype version needs a bit more reasoning<br>\nsetup, but also provides an abstraction boundary that is not broken just<br>\nby typing a space (for function application). Moreover, I'd expect<br>\nadhoc_overloading and type classes to work better with type constructors<br>\nthan type synonyms.</p>\n</blockquote>\n<p>Yeah, that's also what Peter said.</p>\n<blockquote>\n<p>The main problem with your proposed formalisation is that the state type<br>\nshows up explicitly in the type. This may lead to problems if you want<br>\nto combine functions that operate on disjoint parts of the state: you<br>\nneed a lot of formal plumbing for that. In Imperative_HOL, there's a<br>\nformalisation of a state monad where you can only store values of<br>\ncountable types and which avoids this problem.</p>\n<p>Simon Foster and Zeyda Frank has formalised lenses using locales in<br>\nIsabelle (<a href=\"http://eprints.whiterose.ac.uk/117267/\">http://eprints.whiterose.ac.uk/117267/</a>).</p>\n</blockquote>\n<p>I didn't quite get this part. How is countability related to accessing<br>\ndisjoint parts of the state?</p>\n<p>Furthermore, I would expect that I can integrate this with the \"Optics\"<br>\nAFP entry you mentioned. This should give rise to a combinator like:</p>\n<p>in_lens :: ('a, 'b) lens =&gt; ('c, 'a) state =&gt; ('c, 'b) state</p>\n<p>Cheers<br>\nLars</p>",
        "id": 294712998,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661182805
    },
    {
        "content": "<p>From: Andreas Lochbihler &lt;<a href=\"mailto:andreas.lochbihler@inf.ethz.ch\">andreas.lochbihler@inf.ethz.ch</a>&gt;<br>\nHi Lars,</p>\n<p>On 07/07/17 11:10, Lars Hupel wrote:</p>\n<blockquote>\n<blockquote>\n<p>The main problem with your proposed formalisation is that the state type<br>\nshows up explicitly in the type. This may lead to problems if you want<br>\nto combine functions that operate on disjoint parts of the state: you<br>\nneed a lot of formal plumbing for that. In Imperative_HOL, there's a<br>\nformalisation of a state monad where you can only store values of<br>\ncountable types and which avoids this problem.</p>\n<p>Simon Foster and Zeyda Frank has formalised lenses using locales in<br>\nIsabelle (<a href=\"http://eprints.whiterose.ac.uk/117267/\">http://eprints.whiterose.ac.uk/117267/</a>).</p>\n</blockquote>\n<p>I didn't quite get this part. How is countability related to accessing<br>\ndisjoint parts of the state?<br>\nWell, if you impose some cardinality constraint on the type of values you store, then you <br>\ncan embed them in a universal domain. For Imperative_HOL, countability was chosen as the <br>\ncardinality constraint, but any other would do. So you can model the state explicitly as a <br>\nfinite map from locations to values and start building a kind of separation logic to deal <br>\nwith locations and their allocation.</p>\n</blockquote>\n<blockquote>\n<p>Furthermore, I would expect that I can integrate this with the \"Optics\"<br>\nAFP entry you mentioned. This should give rise to a combinator like:</p>\n<p>in_lens :: ('a, 'b) lens =&gt; ('c, 'a) state =&gt; ('c, 'b) state</p>\n</blockquote>\n<p>Yes, this can work out nicely if you make sure that you always stay in an abstract <br>\nsetting. Makarius once also had a paper that went into that direction (Schirmer/Wenzel, <br>\nSSV 2009).</p>\n<p>Cheers,<br>\nAndreas</p>",
        "id": 294713013,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661182812
    },
    {
        "content": "<p>From: Florian Haftmann &lt;<a href=\"mailto:florian.haftmann@informatik.tu-muenchen.de\">florian.haftmann@informatik.tu-muenchen.de</a>&gt;<br>\nHi Lars,</p>\n<blockquote>\n<ul>\n<li>~~/src/HOL/Library/State_Monad</li>\n</ul>\n</blockquote>\n<p>this is indeed a quite different tradition and maybe nothing more than a<br>\nhistoric point of reference.</p>\n<p>Such an »open« state monad is indeed just syntactic sugar for the<br>\ncombinators »scomp« and »fcomp«, corresponding to #-&gt; and #&gt; in<br>\nIsabelle/ML.  These combinators themselves are indeed used for<br>\nquickcheck generators.</p>\n<p>If you want to reuse that theory name for a Haskell-style state monad,<br>\nfeel free to rename it to Open_State_Monad or similar.</p>\n<p>A considerable practical impact would be to implement the same syntactic<br>\nsugar transformations for Isabelle/ML, which would provide an<br>\nalternative to all those fancy |-&gt; ||&gt; ||&gt;&gt; #-&gt; ##&gt; ##&gt;&gt; combinators ;-).</p>\n<p>Cheers,<br>\n    Florian<br>\n<a href=\"/user_uploads/14278/8fr2osCLTpD_rXti9arh9h5P/signature.asc\">signature.asc</a></p>",
        "id": 294713098,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661182848
    },
    {
        "content": "<p>From: Lars Hupel &lt;<a href=\"mailto:hupel@in.tum.de\">hupel@in.tum.de</a>&gt;<br>\nI've spent a few hours polishing my representation. See attachment.</p>\n<p>Given the integration with the \"Optics\" and \"Applicative\" entries I'd<br>\nconsider this worthy of inclusion in the AFP.</p>\n<p>The existing \"State_Monad\" can be folded into its only use site<br>\n(\"~~/src/HOL/Proofs/Extraction/Higman_Extraction\").</p>\n<p>Andreas: Would you be also interested in consolidating Tree_Relabeling<br>\nwith the fresh monad I've implemented on top of state?</p>\n<p>Cheers<br>\nLars<br>\n<a href=\"/user_uploads/14278/T7pWLIeSwbBDKhpkUKHATi6q/State_Lens.thy\">State_Lens.thy</a><br>\n<a href=\"/user_uploads/14278/RZfEoD9_eaIPX5XuqqKEeo7z/State_Monad.thy\">State_Monad.thy</a></p>",
        "id": 294713867,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661183098
    },
    {
        "content": "<p>From: Andreas Lochbihler &lt;<a href=\"mailto:andreas.lochbihler@inf.ethz.ch\">andreas.lochbihler@inf.ethz.ch</a>&gt;<br>\nHi Lars,</p>\n<p>Replacing the existing state monad in Applicative_Lifting with yours shouldn't be hard. <br>\nExcept that if your theories become an AFP entry of their own, then we have a circular <br>\ndependency between the entries.</p>\n<p>So it might be easier to put your theory without the AFP entry integration into <br>\nHOL/Library and do the integration in the respective AFP entries. What do you think?</p>\n<p>Best,<br>\nAndreas</p>",
        "id": 294713873,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661183100
    },
    {
        "content": "<p>From: Lars Hupel &lt;<a href=\"mailto:hupel@in.tum.de\">hupel@in.tum.de</a>&gt;<br>\nGood point. If nobody objects I'll do that later this week. I was<br>\nplanning to clean up some stuff in the vicinity (\"Finite_Map\") anyway.</p>\n<p>Cheers<br>\nLars</p>",
        "id": 294713918,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661183112
    },
    {
        "content": "<p>From: Florian Haftmann &lt;<a href=\"mailto:florian.haftmann@informatik.tu-muenchen.de\">florian.haftmann@informatik.tu-muenchen.de</a>&gt;</p>\n<blockquote>\n<p>The existing \"State_Monad\" can be folded into its only use site<br>\n(\"~~/src/HOL/Proofs/Extraction/Higman_Extraction\").</p>\n</blockquote>\n<p>I would welcome to have it as a separate theory (though under a<br>\ndifferent name maybe) since it can also be used for pretty printing<br>\nquickcheck random generator expressions.</p>\n<p>Florian<br>\n<a href=\"/user_uploads/14278/4nMJ7Md0h560geE5P2wRq7Xk/signature.asc\">signature.asc</a></p>",
        "id": 294713946,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661183125
    },
    {
        "content": "<p>From: Lars Hupel &lt;<a href=\"mailto:hupel@in.tum.de\">hupel@in.tum.de</a>&gt;<br>\nIf you say \"can be used\", does that mean it already works or that it can<br>\nbe implemented?</p>\n<p>In any case, since it's purely syntactic, I propose calling it<br>\n\"State_Syntax\".</p>\n<p>Cheers<br>\nLars</p>",
        "id": 294714000,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661183143
    },
    {
        "content": "<p>From: Lars Hupel &lt;<a href=\"mailto:hupel@in.tum.de\">hupel@in.tum.de</a>&gt;</p>\n<blockquote>\n<p>Good point. If nobody objects I'll do that later this week. I was<br>\nplanning to clean up some stuff in the vicinity (\"Finite_Map\") anyway.</p>\n</blockquote>\n<p>See now Isabelle/d157195a468a and AFP/9f41cb6d9cfa.</p>\n<p>I'll leave the porting of the tree relabeling to you, Andreas :-)</p>\n<p>Cheers<br>\nLars</p>",
        "id": 294714029,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661183154
    },
    {
        "content": "<p>From: Andreas Lochbihler &lt;<a href=\"mailto:andreas.lochbihler@inf.ethz.ch\">andreas.lochbihler@inf.ethz.ch</a>&gt;<br>\nHi Lars,</p>\n<p>I've ported the tree relabelling (AFP/6a4641399c0a). I had to prove a bunch of lemmas <br>\nabout how the state monad operations interact. They are at the top of <br>\nTree_Relabelling.thy, but you might want to move them to State_Monad in HOL/Library.</p>\n<p>Cheers,<br>\nAndreas</p>",
        "id": 294714130,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661183185
    },
    {
        "content": "<p>From: Lars Hupel &lt;<a href=\"mailto:hupel@in.tum.de\">hupel@in.tum.de</a>&gt;<br>\nExcellent, thanks!</p>\n<p>Cheers<br>\nLars</p>",
        "id": 294714146,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661183192
    },
    {
        "content": "<p>From: Lars Hupel &lt;<a href=\"mailto:hupel@in.tum.de\">hupel@in.tum.de</a>&gt;<br>\nDear list,</p>\n<p>for cleaning up my formalization, I need to use a state monad. I did a<br>\nbrief check on what's currently there in the Isabelle universe. These<br>\nare my findings:</p>\n<ul>\n<li>\n<p>~~/src/HOL/Library/State_Monad</p>\n<ul>\n<li>shallow embedding</li>\n<li>a lot of text, but no actual useful setup</li>\n<li>imports Monad_Syntax, but defines its own syntax?!</li>\n<li>\n<p>mysterious NEWS entry:<br>\n  \"Theory Library/Monad_Syntax provides do-syntax for monad types.<br>\n  Syntax in Library/State_Monad has been changed to avoid<br>\n  ambiguities.\"<br>\n  That actual change is hidden in changeset d00a3f47b607 with the<br>\n  message \"more generous memory settings for scala check\"</p>\n</li>\n<li>\n<p>only used in \"~~/src/HOL/Proofs/Extraction/Higman_Extraction\", not<br>\n  in the AFP</p>\n</li>\n</ul>\n</li>\n<li>\n<p>$AFP/thys/Applicative_Lifting/Applicative_State</p>\n<ul>\n<li>shallow embedding</li>\n<li>setup for Applicative, but not for Monad_Syntax</li>\n</ul>\n</li>\n<li>\n<p>Anything else I'm unaware of?</p>\n</li>\n</ul>\n<p>The disadvantage of shallow embedding is that registering such an<br>\nencoding with Monad_Syntax will likely end up generating strange error<br>\nmessages.</p>\n<p>I hereby propose the following encoding:</p>\n<p>datatype ('a, 's) state = State (run_state: \"'s ⇒ ('a × 's)\")</p>\n<p>Any comments?</p>\n<p>Cheers<br>\nLars</p>",
        "id": 294714344,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661183271
    },
    {
        "content": "<p>From: Andreas Lochbihler &lt;<a href=\"mailto:andreas.lochbihler@inf.ethz.ch\">andreas.lochbihler@inf.ethz.ch</a>&gt;<br>\nHi Lars,</p>\n<p>There's yet another one formalised as a state monad transformer stateT in the AFP entry <br>\nMonomorphic_Monad.</p>\n<p>There are also a bunch of specialised state monads around, e.g., inside Imperative_HOL.</p>\n<p>Your formalisation as a datatype seems canonical to me and from my experience, I can just <br>\nrecommend to use a proper type constructor rather than a type_synonym. The datatype <br>\nversion needs a bit more reasoning setup, but also provides an abstraction boundary that <br>\nis not broken just by typing a space (for function application). Moreover, I'd expect <br>\nadhoc_overloading and type classes to work better with type constructors than type synonyms.</p>\n<p>The main problem with your proposed formalisation is that the state type shows up <br>\nexplicitly in the type. This may lead to problems if you want to combine functions that <br>\noperate on disjoint parts of the state: you need a lot of formal plumbing for that. In <br>\nImperative_HOL, there's a formalisation of a state monad where you can only store values <br>\nof countable types and which avoids this problem.</p>\n<p>Simon Foster and Zeyda Frank has formalised lenses using locales in Isabelle <br>\n(<a href=\"http://eprints.whiterose.ac.uk/117267/\">http://eprints.whiterose.ac.uk/117267/</a>).</p>\n<p>Andreas</p>",
        "id": 294714585,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661183339
    }
]