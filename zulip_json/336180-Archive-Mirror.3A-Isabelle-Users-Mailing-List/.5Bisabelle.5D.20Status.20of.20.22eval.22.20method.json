[
    {
        "content": "<p>From: Peter Lammich &lt;<a href=\"mailto:lammich@in.tum.de\">lammich@in.tum.de</a>&gt;<br>\nHi,</p>\n<p>a student of mine recently noticed that there is no documentation for<br>\nthe \"eval\" method. Nevertheless, he was able to find it. What he of<br>\ncourse did not recognize was, that it actually seems to \"prove\" theorems<br>\nby cheating (they are pretty-printed with [!] afterwards). </p>\n<p>So I propose to either add proper documentation for this method,<br>\nincluding a warning that it does not go through the inference kernel,<br>\nperhaps even renaming it to something like \"eval_sorry\", or to remove<br>\nit.</p>",
        "id": 294225116,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660899585
    },
    {
        "content": "<p>From: Lukas Bulwahn &lt;<a href=\"mailto:bulwahn@in.tum.de\">bulwahn@in.tum.de</a>&gt;<br>\nHi Peter,</p>\n<p>A thorough documentation can be found in the code generation tutorial in <br>\nchapter 6.<br>\nIf you care much about evaluations going through Isabelle's inference <br>\nkernel, Isabelle provides a method \"code_simp\", which does the same as <br>\neval but slower ;)</p>\n<p>Maybe you could add documentation about eval in the Isar reference (by <br>\nextending chapter 10.20) then, and summarize the proof methods of chapter 6?</p>\n<p>Removing is not possible as the Flyspeck proof relies on this method.<br>\nIn my opinion, renaming is not a reasonable option either.</p>\n<p>Lukas</p>",
        "id": 294225124,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660899593
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\n\"eval_sorry\" would indeed be a rather odd name, because it is based on a <br>\ndifferent oracle that is supposed to be correct relative to the <br>\nimplementation of the code generator.</p>\n<p>In contrast, the oracle behind \"sorry\" merely pretends that \"!!X. X\" <br>\nholds, so you will be really sorry if you rely on the result.</p>\n<p>Makarius</p>",
        "id": 294225127,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660899596
    },
    {
        "content": "<p>From: Jasmin Blanchette &lt;<a href=\"mailto:jasmin.blanchette@gmail.com\">jasmin.blanchette@gmail.com</a>&gt;<br>\nBut what about \"eval_oracle\"? It would minimize the risk that somebody misunderstood its nature (and would free up a useful name, \"eval\", for the non-oracle version if desired).</p>\n<p>Jasmin</p>",
        "id": 294225202,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660899612
    },
    {
        "content": "<p>From: Florian Haftmann &lt;<a href=\"mailto:florian.haftmann@informatik.tu-muenchen.de\">florian.haftmann@informatik.tu-muenchen.de</a>&gt;<br>\n»eval« is the successor of the »evaluation« method, which wasn't ever<br>\ndocumented thoroughly either (at least I guess so, otherwise I would<br>\nhave migrated that documentation).</p>\n<p>If all methods relying on oracles are supposed to reflect this in their<br>\nname, there are a couple of other candidates also, e.g. normalizsation.<br>\n Keep this in mind when discussing renames etc.</p>\n<p>Florian<br>\n<a href=\"/user_uploads/14278/Tc4LxvZFRDGhdmUwSwmAlxim/signature.asc\">signature.asc</a></p>",
        "id": 294225226,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660899628
    }
]