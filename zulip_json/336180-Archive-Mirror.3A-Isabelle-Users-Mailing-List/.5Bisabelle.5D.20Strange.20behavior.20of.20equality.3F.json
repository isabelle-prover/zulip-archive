[
    {
        "content": "<p>From: Christian Doczkal &lt;<a href=\"mailto:c.doczkal@stud.uni-saarland.de\">c.doczkal@stud.uni-saarland.de</a>&gt;<br>\nHello</p>\n<p>I want to prove that two relations are equal (I removed the actual<br>\nproofs since they do not matter here, rule iffI is also selected as<br>\ndefault rule)</p>\n<p>theory Scratch<br>\nimports Main<br>\nbegin</p>\n<p>consts <br>\n  R :: \"nat =&gt; nat =&gt; bool\" <br>\n  R' :: \"nat =&gt; nat =&gt; bool\" </p>\n<p>lemma \"R n m = R' n m\"<br>\nproof (rule iffI)<br>\n  show \"R n m ==&gt; R' n m\" sorry<br>\n  show \"R' n m ==&gt; R n m\" sorry -- \"*\"<br>\nqed</p>\n<p>until * i get:<br>\nSuccessful attempt to solve goal by exported rule:<br>\n  R n m ==&gt; R' n m</p>\n<p>Successful attempt to solve goal by exported rule:<br>\n  R' n m ==&gt; R n m</p>\n<p>But the proof state is still:<br>\ngoal (2 subgoals):</p>\n<ol>\n<li>R n m ==&gt; R' n m</li>\n<li>R' n m ==&gt; R n m</li>\n</ol>\n<p>and hence the \"qed\" fails to finish the proof? Why are the goals not<br>\nremoved after they have been successfully solved. </p>\n<p>Strangely applying the initial rule at the end works as in:</p>\n<p>lemma \"R n m = R' n m\"<br>\nproof -<br>\n  have \"R n m ==&gt; R' n m\" sorry<br>\n  moreover have \"R' n m ==&gt; R n m\" sorry<br>\n  ultimately show ?thesis by (rule iffI)<br>\nqed </p>\n<p>Can someone reproduce this or explain what is going on?<br>\n<a href=\"/user_uploads/14278/j4kOd7uHuJqdkm0eS6EgYU4G/smime.p7s\">smime.p7s</a></p>",
        "id": 294076187,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660828984
    },
    {
        "content": "<p>From: Brian Huffman &lt;<a href=\"mailto:brianh@cs.pdx.edu\">brianh@cs.pdx.edu</a>&gt;<br>\nI have been annoyed by this behavior as well. To understand what is going<br>\non, it is helpful to look at the intermediate proof state using \"next\":</p>\n<p>lemma \"R n m = R' n m\"<br>\nproof (rule iffI)</p>\n<p>The initial proof state is what you would expect:</p>\n<blockquote>\n<p>goal (2 subgoals):<br>\n 1. R n m ==&gt; R' n m<br>\n 2. R' n m ==&gt; R n m</p>\n</blockquote>\n<p>show \"R n m ==&gt; R' n m\" sorry<br>\nnext</p>\n<p>Now the proof state is:</p>\n<blockquote>\n<p>goal (2 subgoals):<br>\n 1. R n m ==&gt; R n m<br>\n 2. R' n m ==&gt; R n m</p>\n</blockquote>\n<p>Instead of solving the first subgoal, it just replaced it with another one.<br>\nBasically, it has applied \"R n m ==&gt; R' n m\" to the first subgoal, as an<br>\nintroduction rule.</p>\n<p>show \"R' n m ==&gt; R n m\" sorry<br>\nnext</p>\n<p>After this step, the proof state is:</p>\n<blockquote>\n<p>goal (2 subgoals):<br>\n 1. R n m ==&gt; R' n m<br>\n 2. R' n m ==&gt; R n m</p>\n</blockquote>\n<p>Apparently, it applied \"R' n m ==&gt; R n m\" to the first subgoal, which<br>\nreturns us to the original proof state. If it had applied the rule to the<br>\nsecond subgoal instead, then qed would have worked. Evidently, Isar works by<br>\napplying the rule to the first subgoal that matches.</p>\n<p>By the way, I just realized that your proof script works if you prove the<br>\nsubgoals in the opposite order:</p>\n<p>lemma \"R n m = R' n m\"<br>\nproof (rule iffI)<br>\n  show \"R' n m ==&gt; R n m\" sorry<br>\n  show \"R n m ==&gt; R' n m\" sorry<br>\nqed</p>\n<p>Using \"next\" just before the \"qed\" shows the proof state to be nothing but<br>\ntrivial implications, which can be discharged by \"qed\".</p>\n<blockquote>\n<p>goal (2 subgoals):<br>\n 1. R n m ==&gt; R n m<br>\n 2. R' n m ==&gt; R' n m</p>\n</blockquote>\n<p>Basically, it seems that using \"show\" with a meta-implication (==&gt;)<br>\ndischarges the first subgoal that matches the conclusion, and adds new<br>\nsubgoals corresponding to each assumption. I would be surprised if this is<br>\nan intentional feature of Isar; my guess is that it is an accidental feature<br>\nof the way Isar proofs are implemented.</p>\n<p>Here's a proof script that I came up with that takes advantage of this<br>\n\"feature\".</p>\n<p>lemma \"Q &amp; P ==&gt; P &amp; Q\"<br>\nproof -<br>\n  show \"P ==&gt; Q ==&gt; P &amp; Q\" by (rule conjI)<br>\n  show \"Q &amp; P ==&gt; P\" by (rule conjunct2)<br>\n  show \"Q &amp; P ==&gt; Q\" by (rule conjunct1)<br>\nqed</p>\n<ul>\n<li>Brian</li>\n</ul>\n<p>On Wed, Apr 15, 2009 at 3:25 AM, Christian Doczkal &lt;<br>\n<a href=\"mailto:c.doczkal@stud.uni-saarland.de\">c.doczkal@stud.uni-saarland.de</a>&gt; wrote:</p>\n<blockquote>\n<p>Hello</p>\n<p>I want to prove that two relations are equal (I removed the actual<br>\nproofs since they do not matter here, rule iffI is also selected as<br>\ndefault rule)</p>\n<p>theory Scratch<br>\nimports Main<br>\nbegin</p>\n<p>consts<br>\n R :: \"nat =&gt; nat =&gt; bool\"<br>\n R' :: \"nat =&gt; nat =&gt; bool\"</p>\n<p>lemma \"R n m = R' n m\"<br>\nproof (rule iffI)<br>\n show \"R n m ==&gt; R' n m\" sorry<br>\n show \"R' n m ==&gt; R n m\" sorry -- \"*\"<br>\nqed</p>\n<p>until * i get:<br>\nSuccessful attempt to solve goal by exported rule:<br>\n R n m ==&gt; R' n m</p>\n<p>Successful attempt to solve goal by exported rule:<br>\n R' n m ==&gt; R n m</p>\n<p>But the proof state is still:<br>\ngoal (2 subgoals):<br>\n 1. R n m ==&gt; R' n m<br>\n 2. R' n m ==&gt; R n m</p>\n<p>and hence the \"qed\" fails to finish the proof? Why are the goals not<br>\nremoved after they have been successfully solved.</p>\n<p>Strangely applying the initial rule at the end works as in:</p>\n<p>lemma \"R n m = R' n m\"<br>\nproof -<br>\n have \"R n m ==&gt; R' n m\" sorry<br>\n moreover have \"R' n m ==&gt; R n m\" sorry<br>\n ultimately show ?thesis by (rule iffI)<br>\nqed</p>\n<p>Can someone reproduce this or explain what is going on?</p>\n<p>--<br>\nGru√ü<br>\nChristian Doczkal<br>\n</p>\n</blockquote>",
        "id": 294076250,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660829008
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nThis surprising behaviour is mostly due to a misunderstanding how Isar <br>\nworks, and due to old-style tactic goal output that does not fully fit <br>\ninto the picture.</p>\n<p>Whenever you see a subgoal like</p>\n<p>!!x. A x ==&gt; B x</p>\n<p>the system tells you that you may assume A x for some fixed x, and need to <br>\nshow B x in the end.  So your standard answer will be like that:</p>\n<p>fix x<br>\n   assume \"A x\"<br>\n   show \"B x\"</p>\n<p>As a rule of thumb, framework connectives !! / ==&gt; rarely show up in <br>\nstructured texts at all (specifications and proofs).  It is a bit like <br>\nlambda abstraction in functional programming languages: most of the time <br>\nyou don't see them, even though they are present in the guts of the <br>\nsystem.</p>\n<p>So this is how to prove an equivalence:</p>\n<p>lemma \"A &lt;-&gt; B\"<br>\n   proof<br>\n     assume A then show B &lt;proof&gt;<br>\n   next<br>\n     assume B then show A &lt;proof&gt;<br>\n   qed</p>\n<p>Makarius</p>",
        "id": 294076258,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660829013
    },
    {
        "content": "<p>From: Andreas Lochbihler &lt;<a href=\"mailto:lochbihl@ipd.info.uni-karlsruhe.de\">lochbihl@ipd.info.uni-karlsruhe.de</a>&gt;<br>\nHello Christian,</p>\n<blockquote>\n<p>lemma \"R n m = R' n m\"<br>\nproof (rule iffI)<br>\n  show \"R n m ==&gt; R' n m\" sorry<br>\n  show \"R' n m ==&gt; R n m\" sorry -- \"*\"<br>\nqed</p>\n</blockquote>\n<p>The problem here is that you use meta-implication \"==&gt;\" within the <br>\n\"show\" statement. \"show\" only tries to match the assumptions made by <br>\n\"assume\" and the conclusion of the \"show\" with the goals to decide which <br>\ngoal to solve. Since you have no assumes, \"R' n m\" unifies with the <br>\nfirst goal and the assumptions in the \"show\" statement become your new <br>\nproof goals. However, the solved goal contained the assumption \"R n m\", <br>\nso this is normally not a problem as qed can discharge this.</p>\n<p>If you look at the proof state after the first sorry, you see the two goals:</p>\n<p>\"R n m ==&gt; R n m\"<br>\n\"R' n m ==&gt; R n m\"</p>\n<p>Unfortunately, your next \"show\" has the conclusion \"R n m\", which <br>\nunifies with the first goal, so the first goal gets solved again instead <br>\nof the second.</p>\n<p>A simple solution would be to insert \"prefer 2\" between your two proofs, <br>\nbut it would be better style to use proper assumes:</p>\n<p>lemma \"R n m = R' n m\"<br>\nproof (rule iffI)<br>\n   assume \"R n m\" thus \"R' n m\" sorry<br>\nnext<br>\n   assume \"R' n m\" thus \"R n m\" sorry<br>\nqed</p>\n<p>Regards,<br>\nAndreas Lochbihler</p>",
        "id": 294076308,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660829032
    }
]