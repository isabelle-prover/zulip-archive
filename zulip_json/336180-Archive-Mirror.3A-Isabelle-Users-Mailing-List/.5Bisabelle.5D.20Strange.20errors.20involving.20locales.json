[
    {
        "content": "<p>From: \"Eugene W. Stark\" &lt;<a href=\"mailto:stark@cs.stonybrook.edu\">stark@cs.stonybrook.edu</a>&gt;<br>\nCan anyone explain the strange error described in the final comment<br>\nin the code below?  It seems especially odd to me that the presence<br>\nof the error depends on the order of the preceding \"interpret\" lines.</p>\n<p>The strange type inference behavior described in the comment<br>\nafter the \"assumes\" line is also a puzzle to me.</p>\n<p>In case my mailer has mutated the code, I've also attached the theory<br>\nfile.  Thanks for any help.</p>\n<p>- Gene Stark</p>\n<p>theory Buggy<br>\nimports Main<br>\nbegin</p>\n<p>locale sub =<br>\n   fixes a :: 'a<br>\nbegin<br>\n   definition P :: \"'a ⇒ bool\"<br>\n   where \"P x ≡ True\"<br>\nend</p>\n<p>locale loc =<br>\n   X: sub a + Y: sub b<br>\n   for a and b +<br>\n   fixes f :: \"'a ⇒ 'b\"<br>\n   assumes \"f a = b\"<br>\n   (*</p>\n<p>* If the preceding line is removed, then constant \"loc\"<br>\n    * ends up having type \"'a ⇒'a ⇒ ('b ⇒ 'b) ⇒ bool<br>\n    * instead of \"'a ⇒ 'b ⇒ ('a ⇒ 'b) ⇒ bool<br>\n    *)</p>\n<p>lemma<br>\nassumes \"loc a b f\" and \"loc b c g\"<br>\nshows \"loc a c (g o f)\"<br>\nproof<br>\n   interpret F: loc a b f using assms(1) by auto<br>\n   interpret G: loc b c g using assms(2) by auto<br>\n   have \"⋀x. F.X.P x\" using F.X.P_def by auto<br>\n   have \"⋀x. G.X.P x\" using G.X.P_def by auto<br>\n   (*</p>\n<p>* Constant G.X.P is unrecognized in the preceding line.<br>\n    * If the \"interpret\" lines are interchanged,<br>\n    * there is no error.<br>\n    *)<br>\nqed</p>\n<p>end<br>\n<a href=\"/user_uploads/14278/PoikII9duxD1FtTMrZ-5LmgD/Buggy.thy\">Buggy.thy</a></p>",
        "id": 294330001,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660929922
    },
    {
        "content": "<p>From: Andreas Lochbihler &lt;<a href=\"mailto:andreas.lochbihler@inf.ethz.ch\">andreas.lochbihler@inf.ethz.ch</a>&gt;<br>\nDear Gene,</p>\n<p>I do not understand what problem you refer to in the first comment (about removing the <br>\nprevious line). If I remove the \"assume\" clause, no constant loc is generated at all, as <br>\nthere are no assumptions in loc or its ancestors.</p>\n<p>Now to the problem with interpret. Interpretations (and also sublocale declarations) check <br>\nwhether an interpretation of a locale with the same (or more general) parameters is <br>\nalready present. If so, it does not interpret the locale, even if the name prefixes are <br>\ndifferent. In your case,</p>\n<p>interpret F: loc a b f using assms(1) by auto</p>\n<p>introduces the interpretations</p>\n<p>F: loc a b f, F.X: sub a, F.Y: sub b</p>\n<p>Naively, the next interpret G: loc b c g generates the interpretations<br>\n   G: loc b c g, G.X: sub b, G.Y: sub c</p>\n<p>However, sub b has already been interpreted as F.X, so there is not another interpretation <br>\nfor G.X. Consequently, you'd have to use the name F.Y to refer to G.X interpretations. If <br>\nyou swap the declarations, you get G.X and F.X, but not F.Y by the analogous reasoning.</p>\n<p>Hope this helps,<br>\nAndreas</p>",
        "id": 294330007,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660929924
    }
]