[
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nSo what is the reasoning behind it?</p>\n<p>I still have adhoc_overloading on my list of things to be integrated<br>\nproperly into Pure, such that it works together with abbreviations. It<br>\nis one of the things to happen really soon (i.e. within 1 week, 1 month,<br>\n1 year, 1 decade).</p>\n<p>Makarius</p>",
        "id": 294736930,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661190123
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nI see this complexity -- inherited from distant past -- as a motivation<br>\nto do away with overloading of funpow/compow. Instead it could be either<br>\ndone with abstract syntax (adhoc_overloading) or concrete syntax (notation).</p>\n<p>(It is something to be reconsidered shortly after the Isabelle2018 release.)</p>\n<p>Makarius</p>",
        "id": 294736957,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661190126
    },
    {
        "content": "<p>From: Lars Hupel &lt;<a href=\"mailto:hupel@in.tum.de\">hupel@in.tum.de</a>&gt;</p>\n<blockquote>\n<p>So what is the reasoning behind it?</p>\n</blockquote>\n<p>Generally being conservative about what gets included by default.<br>\nAccording to Florian, there are still some strange effects there. Of<br>\ncourse, they could be ironed out. The judgment on adhoc_overloading was<br>\nbased on the current state, not on a future state.</p>",
        "id": 294737030,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661190158
    },
    {
        "content": "<p>From: Peter Lammich &lt;<a href=\"mailto:lammich@in.tum.de\">lammich@in.tum.de</a>&gt;<br>\nHi List.</p>\n<p>Consider the following definition</p>\n<p>definition \"test f n a ≡ (f^^n) a\"</p>\n<p>Isabelle answers with a strange error message here:</p>\n<p>(*<br>\nMalformed dependency of test('a, 'b) -&gt; compow('a ⇒ 'b)<br>\n(restriction compow('a ⇒ 'a ⇒ bool) from<br>\n\"Transitive_Closure.relpowp_def\")<br>\nThe error(s) above occurred in definition \"test_def_raw\":<br>\n  \"test ≡ λf n. compow n f\"<br>\n*)</p>\n<p>What happened here? How to read this error message? Note that the term</p>\n<p>term \"test f n a ≡ (f^^n) a\"</p>\n<p>is well-typed, and Isabelle infers f::'a=&gt;'b</p>\n<p>Workaround: Explicitly constrain the type of f:</p>\n<p>definition test :: \"('a ⇒ 'a) ⇒ _\" where \"test f n a ≡ (f^^n) a\"</p>\n<p>Works.</p>",
        "id": 294737870,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661190439
    },
    {
        "content": "<p>From: Nemouchi Yakoub &lt;<a href=\"mailto:y.nemouchi@gmail.com\">y.nemouchi@gmail.com</a>&gt;<br>\nHi Peter,</p>\n<p>For some reason you have an extra variable a.</p>\n<p>For some reason (f^^n) is of type ::'a it takes no argument.</p>\n<p>Cheers,</p>\n<p>Yakoub.</p>\n<p>2018-07-09 7:57 GMT-04:00 Peter Lammich &lt;<a href=\"mailto:lammich@in.tum.de\">lammich@in.tum.de</a>&gt;:</p>",
        "id": 294737886,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661190445
    },
    {
        "content": "<p>From: Nemouchi Yakoub &lt;<a href=\"mailto:y.nemouchi@gmail.com\">y.nemouchi@gmail.com</a>&gt;<br>\nHi,</p>\n<p>However you are right I am puzzled by the pattern of the definition which<br>\nis:</p>\n<p>consts compow :: \"nat ⇒ 'a ⇒ 'a\"</p>\n<p>abbreviation compower :: \"'a ⇒ nat ⇒ 'a\" (infixr \"^^\" 80)<br>\n  where \"f ^^ n ≡ compow n f\"</p>\n<p>Hope that no one had fun by defining syntactic sugar for  consts compow ::<br>\n\"nat ⇒ 'a ⇒ 'a\"</p>\n<p>Best wishes,</p>\n<p>Yakoub.</p>\n<p>2018-07-09 8:58 GMT-04:00 Nemouchi Yakoub &lt;<a href=\"mailto:y.nemouchi@gmail.com\">y.nemouchi@gmail.com</a>&gt;:</p>",
        "id": 294737905,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661190452
    },
    {
        "content": "<p>From: Lars Hupel &lt;<a href=\"mailto:hupel@in.tum.de\">hupel@in.tum.de</a>&gt;</p>\n<blockquote>\n<p>However you are right I am puzzled by the pattern of the definition which<br>\nis:</p>\n</blockquote>\n<p>This is regular overloading in Isabelle, and in that instance, its use<br>\nis indeed a bit puzzling.</p>\n<p>Is there a compelling reason why \"compow\" is not an ad-hoc overloaded<br>\nconstant?</p>\n<p>Cheers<br>\nLars</p>",
        "id": 294737920,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661190458
    },
    {
        "content": "<p>From: Florian Haftmann &lt;<a href=\"mailto:florian.haftmann@informatik.tu-muenchen.de\">florian.haftmann@informatik.tu-muenchen.de</a>&gt;<br>\nHi all,</p>\n<blockquote>\n<p>This is regular overloading in Isabelle, and in that instance, its use&gt; is indeed a bit puzzling.&gt; &gt; Is there a compelling reason why \"compow\"<br>\nis not an ad-hoc overloaded&gt; constant?</p>\n</blockquote>\n<p>well, referring to Isabelle2018-RC0, compow is and ad-hoc overloaded<br>\nconstants:</p>\n<p>(in Nat.thy)</p>\n<p>consts compow :: \"nat ⇒ 'a ⇒ 'a\"</p>\n<p>with instances</p>\n<p>(in Nat.thy)</p>\n<p>overloading<br>\n  funpow ≡ \"compow :: nat ⇒ ('a ⇒ 'a) ⇒ ('a ⇒ 'a)\"<br>\nbegin</p>\n<p>primrec funpow :: \"nat ⇒ ('a ⇒ 'a) ⇒ 'a ⇒ 'a\"<br>\n  where<br>\n    \"funpow 0 f = id\"<br>\n  | \"funpow (Suc n) f = f ∘ funpow n f\"</p>\n<p>end</p>\n<p>(in Transitive_Closure.thy)</p>\n<p>overloading<br>\n  relpow ≡ \"compow :: nat ⇒ ('a × 'a) set ⇒ ('a × 'a) set\"<br>\n  relpowp ≡ \"compow :: nat ⇒ ('a ⇒ 'a ⇒ bool) ⇒ ('a ⇒ 'a ⇒ bool)\"<br>\nbegin</p>\n<p>primrec relpow :: \"nat ⇒ ('a × 'a) set ⇒ ('a × 'a) set\"<br>\n  where<br>\n    \"relpow 0 R = Id\"<br>\n  | \"relpow (Suc n) R = (R ^^ n) O R\"</p>\n<p>primrec relpowp :: \"nat ⇒ ('a ⇒ 'a ⇒ bool) ⇒ ('a ⇒ 'a ⇒ bool)\"<br>\n  where<br>\n    \"relpowp 0 R = HOL.eq\"<br>\n  | \"relpowp (Suc n) R = (R ^^ n) OO R\"</p>\n<p>end</p>\n<p>The key idea behind that all once indeed was to have shared ^^ syntax<br>\nfor operations alluding to different kinds of composition, the single ^<br>\nbeing reserved for the regular natural »power« operation  on proper type<br>\nclass instances (in Power.thy)</p>\n<p>Hence</p>\n<p>abbreviation compower :: \"'a ⇒ nat ⇒ 'a\" (infixr \"^^\" 80)<br>\n  where \"f ^^ n ≡ compow n f\"</p>\n<p>was just an idea how you could combine a kind of established power<br>\nnotation on the syntax level with natural argument order on the logical<br>\nlevel – with the drawbacks already hinted in this thread included.</p>\n<p>Hope this helps,<br>\n    Florian<br>\n<a href=\"/user_uploads/14278/WfxWz9rhUMnUmhg5wVsQsp2x/signature.asc\">signature.asc</a></p>",
        "id": 294737988,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661190477
    },
    {
        "content": "<p>From: Lars Hupel &lt;<a href=\"mailto:hupel@in.tum.de\">hupel@in.tum.de</a>&gt;<br>\nHi Florian,</p>\n<blockquote>\n<p>well, referring to Isabelle2018-RC0, compow is and ad-hoc overloaded<br>\nconstants:</p>\n</blockquote>\n<p>this is not what I'm referring to. I meant <br>\n\"HOL-Library.Adhoc_Overloading\".</p>\n<p>Cheers<br>\nLars</p>",
        "id": 294738025,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661190482
    },
    {
        "content": "<p>From: Florian Haftmann &lt;<a href=\"mailto:florian.haftmann@informatik.tu-muenchen.de\">florian.haftmann@informatik.tu-muenchen.de</a>&gt;<br>\nHi Lars,</p>\n<blockquote>\n<p>this is not what I'm referring to. I meant \"HOL-Library.Adhoc_Overloading\".</p>\n</blockquote>\n<p>I see now.</p>\n<p>So far we have be reluctant to include that theory into Main since all<br>\nthose user-space type system mechanisms (type class parameters, ad-hoc<br>\noverloading, something more I don't quite recall at the moment) are<br>\nsomehow divergent in their applications and don't interact so smoothly.</p>\n<p>Maybe we could have a chat on that on my next visit to TUM.</p>\n<p>Cheers,<br>\n    Florian<br>\n<a href=\"/user_uploads/14278/44xrzYi_2LsE88ViPtb8mazQ/signature.asc\">signature.asc</a></p>",
        "id": 294738057,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661190489
    },
    {
        "content": "<p>From: Lars Hupel &lt;<a href=\"mailto:hupel@in.tum.de\">hupel@in.tum.de</a>&gt;</p>\n<blockquote>\n<p>Maybe we could have a chat on that on my next visit to TUM.</p>\n</blockquote>\n<p>We have talked about this and it's probably not a good idea to include<br>\nad-hoc overloading into HOL or even Pure, even though many users will<br>\nhave it imported transitively somehow anyway.</p>\n<p>A more pragmatic way of getting rid of that particular instance of<br>\noverloading might instead be to just disambiguate the syntax.</p>\n<p>Many other operations on relations are written as superscripts, where<br>\nthe set operation is one superscript and the function operation two (cf<br>\ntrancl/tranclp).</p>\n<p>It suffices to find a sufficiently hat-like symbol, e.g.</p>\n<p>text ‹‹R ⇧^ n››<br>\ntext ‹‹R ⇧^⇧^ n››</p>\n<p>or</p>\n<p>text ‹‹R ⇧△ n››<br>\ntext ‹‹R ⇧△⇧△ n››</p>\n<p>Any opinions?</p>\n<p>Cheers<br>\nLars</p>",
        "id": 294738481,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661190660
    },
    {
        "content": "<p>From: Lars Hupel &lt;<a href=\"mailto:hupel@in.tum.de\">hupel@in.tum.de</a>&gt;<br>\nFor posterity, I will try to document the cause of the problem. To<br>\npeople familiar with dependency tracking in the kernel, this will<br>\nprobably all be obvious.</p>\n<p>First, consider a stripped-down example.</p>\n<p>no_notation compower (infixr \"^^\" 80)</p>\n<p>consts compow :: \"nat ⇒ 'a ⇒ 'a\"</p>\n<p>abbreviation compower :: \"'a ⇒ nat ⇒ 'a\" (infixr \"^^\" 80)<br>\n  where \"f ^^ n ≡ compow n f\"</p>\n<p>overloading<br>\n  funpow ≡ \"compow :: nat ⇒ ('a ⇒ 'a) ⇒ ('a ⇒ 'a)\"<br>\nbegin</p>\n<p>primrec funpow :: \"nat ⇒ ('a ⇒ 'a) ⇒ 'a ⇒ 'a\"<br>\n  where<br>\n    \"funpow 0 f = id\"<br>\n  | \"funpow (Suc n) f = f ∘ funpow n f\"</p>\n<p>end</p>\n<p>definition foo where<br>\n\"foo f n = (f :: 'a ⇒ 'b) ^^ n\"</p>\n<p>This definition is rejected with a similar message (\"malformed<br>\ndependency\"), that comes deep from inside the machine room (\"defs.ML\").</p>\n<p>\"foo\" is trying to depend on \"f\", but in such a way that neither</p>\n<p>a) \"f\" is fully polymorphic (\"nat ⇒ 'a ⇒ 'a\") nor<br>\nb) \"f\" is fully instantiated (e.g. \"nat ⇒ ('a ⇒ 'a) ⇒ ('a ⇒ 'a)\").</p>\n<p>Hence, it is unclear on what logical entity \"foo\" should depend on. In<br>\nparticular, the type of \"funpow\" is an instance of the type of \"compow\"<br>\nas it is used in the definition \"foo\".</p>\n<p>Admitting just that definition wouldn't be problematic. But admitting a<br>\ndefinition \"bar\" that uses \"foo\" could then potentially restrict the<br>\ntype of \"foo\", introducing a dependency that isn't tracked otherwise.</p>",
        "id": 294738528,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661190679
    },
    {
        "content": "<p>From: Florian Haftmann &lt;<a href=\"mailto:florian.haftmann@informatik.tu-muenchen.de\">florian.haftmann@informatik.tu-muenchen.de</a>&gt;<br>\nThis is also on my abstract agenda for a couple of years now.</p>\n<p>The key observation is that there are (at least) three concepts</p>\n<ul>\n<li>abbreviations ‹leaf_coeff p ≡ coeff p (degree p)›</li>\n<li>operations in type classes ‹times ≡ Group.times›</li>\n<li>ad-hoc overloading ‹bind ≡ Set.bind›</li>\n</ul>\n<p>which are nearly the same but implemented separately an presumably<br>\ndivergently, and hence not very likely to interact smoothly.</p>\n<p>Florian<br>\n<a href=\"/user_uploads/14278/cPXg4ehUNnbY1GH8Oq_k0xsv/signature.asc\">signature.asc</a></p>",
        "id": 294742420,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661192084
    },
    {
        "content": "<p>From: Florian Haftmann &lt;<a href=\"mailto:florian.haftmann@informatik.tu-muenchen.de\">florian.haftmann@informatik.tu-muenchen.de</a>&gt;<br>\nThis is what I also prefer – the current state of affairs appears to use<br>\nan intricate logical concept (overloading) just for the purpose of notation.</p>\n<p>Florian<br>\n<a href=\"/user_uploads/14278/zWSfcEI7SRZqnEM0mfhgKk4H/signature.asc\">signature.asc</a></p>",
        "id": 294742428,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661192090
    },
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\nOn 10/08/2018 14:09, Florian Haftmann wrote:</p>\n<blockquote>\n<blockquote>\n<blockquote>\n<p>For posterity, I will try to document the cause of the problem. To<br>\npeople familiar with dependency tracking in the kernel, this will<br>\nprobably all be obvious.</p>\n<p>\"foo\" is trying to depend on \"f\", but in such a way that neither</p>\n<p>a) \"f\" is fully polymorphic (\"nat ⇒ 'a ⇒ 'a\") nor<br>\nb) \"f\" is fully instantiated (e.g. \"nat ⇒ ('a ⇒ 'a) ⇒ ('a ⇒ 'a)\").</p>\n<p>Hence, it is unclear on what logical entity \"foo\" should depend on. In<br>\nparticular, the type of \"funpow\" is an instance of the type of \"compow\"<br>\nas it is used in the definition \"foo\".</p>\n<p>Admitting just that definition wouldn't be problematic. But admitting a<br>\ndefinition \"bar\" that uses \"foo\" could then potentially restrict the<br>\ntype of \"foo\", introducing a dependency that isn't tracked otherwise.</p>\n</blockquote>\n<p>I see this complexity -- inherited from distant past -- as a motivation<br>\nto do away with overloading of funpow/compow. Instead it could be either<br>\ndone with abstract syntax (adhoc_overloading) or concrete syntax (notation).</p>\n</blockquote>\n<p>This is what I also prefer – the current state of affairs appears to use<br>\nan intricate logical concept (overloading) just for the purpose of notation.</p>\n</blockquote>\n<p>A large part of the success of a formalization rests on notation. Hence I would <br>\ndefinitely not want to dilute the current uniform use of ^.</p>\n<p>Tobias</p>\n<blockquote>\n<p>Florian</p>\n<p><a href=\"/user_uploads/14278/XUFURUwKtEZAlE73JCZ9iBQp/smime.p7s\">smime.p7s</a></p>\n</blockquote>",
        "id": 294742475,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661192115
    },
    {
        "content": "<p>From: Florian Haftmann &lt;<a href=\"mailto:florian.haftmann@informatik.tu-muenchen.de\">florian.haftmann@informatik.tu-muenchen.de</a>&gt;<br>\nThe current use of (^), namely the operation of naturals on monoids, has<br>\nnever been put into doubt on this thread.</p>\n<p>Concerning (^^), my hope is exactly that we can retain that uniform<br>\nnotation as mere syntax without bending the logical foundations behind<br>\nin the middle run.</p>\n<p>Cheers,<br>\n    Florian<br>\n<a href=\"/user_uploads/14278/vVezGAI8FES8xBhq4fWNYRr9/signature.asc\">signature.asc</a></p>",
        "id": 294742483,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661192121
    },
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\nOn 13/08/2018 11:37, Florian Haftmann wrote:</p>\n<blockquote>\n<blockquote>\n<blockquote>\n<blockquote>\n<p>I see this complexity -- inherited from distant past -- as a motivation<br>\nto do away with overloading of funpow/compow. Instead it could be either<br>\ndone with abstract syntax (adhoc_overloading) or concrete syntax<br>\n(notation).</p>\n</blockquote>\n<p>This is what I also prefer – the current state of affairs appears to use<br>\nan intricate logical concept (overloading) just for the purpose of<br>\nnotation.</p>\n</blockquote>\n<p>A large part of the success of a formalization rests on notation. Hence<br>\nI would definitely not want to dilute the current uniform use of ^.</p>\n</blockquote>\n<p>The current use of (^), namely the operation of naturals on monoids, has<br>\nnever been put into doubt on this thread.</p>\n</blockquote>\n<p>I mistyped.</p>\n<blockquote>\n<p>Concerning (^^), my hope is exactly that we can retain that uniform<br>\nnotation as mere syntax without bending the logical foundations behind<br>\nin the middle run.</p>\n</blockquote>\n<p>Then I am all for it.</p>\n<p>Tobias</p>\n<blockquote>\n<p>Cheers,<br>\n  Florian</p>\n<p><a href=\"/user_uploads/14278/HKlpV6VawzWDGX4x38xTAPCb/smime.p7s\">smime.p7s</a></p>\n</blockquote>",
        "id": 294742506,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661192133
    }
]