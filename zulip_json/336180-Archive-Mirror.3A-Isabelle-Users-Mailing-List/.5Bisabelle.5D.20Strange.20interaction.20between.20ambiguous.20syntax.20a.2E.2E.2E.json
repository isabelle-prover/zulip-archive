[
    {
        "content": "<p>From: Bertram Felgenhauer &lt;<a href=\"mailto:bertram.felgenhauer@googlemail.com\">bertram.felgenhauer@googlemail.com</a>&gt;<br>\nHi,</p>\n<p>I'm experiencing an unexpected behvior with function definitions that<br>\nuse both ambiguous syntax and dummy patterns. This happens with<br>\nIsabelle 2015 and Isabelle 2014, so it's not a regression. I tried to<br>\nfind similar reports, but had a hard time coming up with search<br>\nterms; apologies if this is a known limitation.</p>\n<p>For example, using the following two artificial data declarations,</p>\n<p>datatype o1 = O1 unit unit (infixr \"?\" 70)<br>\n  datatype o2 = O2 unit unit (infixr \"?\" 70)</p>\n<p>the following function declaration is accepted with an ambiguity<br>\nwarning,</p>\n<p>fun ok :: \"o1 ⇒ unit option ⇒ o2\" where<br>\n    \"ok (a ? b) (Some c) = () ? ()\"</p>\n<p>but after replacing the unused 'c' variable by a dummy pattern, an<br>\nerror is produced.</p>\n<p>fun fail1 :: \"o1 ⇒ unit option ⇒ unit\" where<br>\n    \"fail1 (a ? b) (Some _) = ()\"</p>\n<table>\n<thead>\n<tr>\n<th>Type unification failed: Clash of types \"o2\" and \"o1\"</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Type error in application: incompatible operand type</td>\n</tr>\n<tr>\n<td></td>\n</tr>\n<tr>\n<td>Operator:  fail1 :: o1 ⇒ unit option ⇒ unit</td>\n</tr>\n<tr>\n<td>Operand:   a ? b :: o2</td>\n</tr>\n<tr>\n<td></td>\n</tr>\n<tr>\n<td>Illegal dummy pattern(s) in term</td>\n</tr>\n</tbody>\n</table>\n<p>After manually resolving the ambiguity, the function definition is<br>\naccepted:</p>\n<p>fun ok1 :: \"o1 ⇒ unit option ⇒ unit\" where<br>\n    \"ok1 (O1 a b) (Some _) = ()\"</p>\n<p>So for some reason, a dummy pattern behaves differently from a fresh<br>\nvariable. What's going on?</p>\n<p>Cheers,</p>\n<p>Bertram<br>\n<a href=\"/user_uploads/14278/ymSa3Chf9naPne8XGdEBN6jY/AmbiguousSyntaxBug.thy\">AmbiguousSyntaxBug.thy</a></p>",
        "id": 294641888,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661162452
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nOn Thu, 28 May 2015, Bertram Felgenhauer wrote:</p>\n<blockquote>\n<p>I'm experiencing an unexpected behvior with function definitions that<br>\nuse both ambiguous syntax and dummy patterns.</p>\n</blockquote>\n<p>Treatment of ambiguous syntax is inherently fragile -- in internal jargon <br>\nit is called \"*brute-force disambiguation\". Many unexpected things have <br>\nhappened in the past, and are in fact expected from the approach of it.</p>\n<blockquote>\n<p>For example, using the following two artificial data declarations,</p>\n<p>datatype o1 = O1 unit unit (infixr \"?\" 70)<br>\n datatype o2 = O2 unit unit (infixr \"?\" 70)</p>\n<p>the following function declaration is accepted with an ambiguity<br>\nwarning,</p>\n<p>fun ok :: \"o1 ⇒ unit option ⇒ o2\" where<br>\n   \"ok (a ? b) (Some c) = () ? ()\"</p>\n<p>but after replacing the unused 'c' variable by a dummy pattern, an<br>\nerror is produced.</p>\n<p>fun fail1 :: \"o1 ⇒ unit option ⇒ unit\" where<br>\n   \"fail1 (a ? b) (Some _) = ()\"<br>\n|<br>\n| Illegal dummy pattern(s) in term</p>\n</blockquote>\n<p>This particular case is relatively easy to allow, and should be possible <br>\nin the next Isabelle release.</p>\n<p>Makarius</p>",
        "id": 294643727,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661163194
    },
    {
        "content": "<p>From: Florian Haftmann &lt;<a href=\"mailto:florian.haftmann@informatik.tu-muenchen.de\">florian.haftmann@informatik.tu-muenchen.de</a>&gt;<br>\nHi Bertram,</p>\n<p>I guess dummy parameters are treated differently during type inference.</p>\n<p>Maybe this is just an accidental behaviour, but I do not know the details.</p>\n<p>Generally, over the last years there has been the tendency to avoid<br>\nambiguous syntax altogether, e.g. using ad-hoc overloading etc.<br>\nIsabelle symbols give you access to plenty of unicode glyphs which can<br>\noffer alternatives.</p>\n<p>Cheers,<br>\n    Florian<br>\n<a href=\"/user_uploads/14278/3hctFM9bL2FE-qN_H2tYqKV0/signature.asc\">signature.asc</a></p>",
        "id": 294645883,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661164053
    }
]