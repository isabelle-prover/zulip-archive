[
    {
        "content": "<p>From: Peter Lammich &lt;<a href=\"mailto:lammich@in.tum.de\">lammich@in.tum.de</a>&gt;<br>\nHi all,</p>\n<p>During developing some Eisbach method, I recently encountered a very<br>\ninconvenient behaviour when chained facts are present.</p>\n<p>My Eisbach method has the general shape <br>\n    my_method = (rule rules | simp)+, <br>\nwhich seems quite natural to me. I always thought the semantics of this<br>\nis:<br>\n  \"Try applying a rule, and if this does not succeed, simplify the<br>\ngoal. Do this as long until neither applying a rule nor simplifying the<br>\ngoal changes something\"</p>\n<p>Now consider the following minimal example:</p>\n<p>notepad begin<br>\n  fix P Q assume R: \"Q\"<br>\n  have \"P (True ∧ True)\"<br>\n    using R<br>\n    apply (simp)+</p>\n<p>The apply step will loop forever! If I add an \"apply -\", i.e., <br>\n  apply - apply simp+<br>\neverything works as expected, and I get back the goal \"Q ==&gt; P True\". <br>\nAlso, if I remove the \"using R\" statement, everything works as<br>\nexpected. </p>\n<p>\"apply my_method\" has the same looping behaviour.</p>\n<p>However, if I write apply (-, simp+), as I could also do inside my<br>\nEisbach method, it still loops.</p>\n<p>What is happening here, and how can I work around this \"feature\", to<br>\nget an Eisbach method that will not loop forever if chained facts are<br>\npresent?</p>\n<p>Thanks in advance for any help or comments,<br>\n  Peter</p>",
        "id": 294740128,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661191219
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nAs far as I can see on the spot, there is nothing special here, just<br>\nnormal semantics of Isar proof methods: chained facts are always<br>\ninserted, even if there is a complex method expression.</p>\n<p>Aside: this is the deeper reason, why proper Isar proofs should say \"by<br>\nrule simp\" and not \"by (rule, simp)\" to make clear where facts are<br>\nincluded and where not (even if the facts are empty).</p>\n<p>For your Eisbach definition, you should get along with \"use nothing in<br>\nsimp\". We specifically introduced the \"use\" method operator for that<br>\nsituation, but it is generally useful to cleanup older tinkering with<br>\nchained facts.</p>\n<p>Makarius</p>",
        "id": 294740322,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661191286
    },
    {
        "content": "<p>From: Peter Lammich &lt;<a href=\"mailto:lammich@in.tum.de\">lammich@in.tum.de</a>&gt;<br>\nHi Makarius,</p>\n<p>thanks for the pointer to the \"use\" method combinator. I now have</p>\n<p>use nothing in &lt; insert method_facts, (rule rules | simp)+ &gt;</p>\n<p>which seems to be the intended behaviour of my method, where chained<br>\nfacts make no sense. However, I still want to write things like</p>\n<p>have ... using facts by my_method</p>\n<p>where facts just provide additional knowledge to be used by the<br>\nsimplifier, but should have no special meaning for the \"rule rules\".<br>\nNote that rules is just a named_theorems collection here, and it makes<br>\nlittle sense to chain in facts specific to these rules.</p>\n<p>I'm not sure whether it would be better style to force the user to<br>\ninline any chained facts (and simply diverge if s*he forgets). <br>\nI.e. to write<br>\n  by - my_method</p>\n<p>and define my_method without a \"use\".</p>",
        "id": 294741102,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661191562
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nThe last bit does not deserve the words \"better style\"; it looks more<br>\nlike old-style facts tinkering for non-conformant proof tools.</p>\n<p>Just abstractly, a proper proof method needs to use the primary<br>\n\"method_facts\" argument in a sensible way: neither ignore it, nor cause<br>\nbad behaviour when chained facts are provided.</p>\n<p>You can also try an explicit facts argument for the Eisbach method<br>\ndefinition (\"method test uses facts = ...\") for the simp part.</p>\n<p>I wonder how expert users of Eisbach usually do method facts handling.<br>\nActually, I still have this TODO item left-over from some years ago:<br>\n\"Eisbach: check/clarify chained facts for method expression\".</p>\n<p>Makarius</p>",
        "id": 294741576,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661191740
    }
]