[
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nOn Fri, 22 Nov 2013, Gottfried Barrow wrote:</p>\n<blockquote>\n<p>In general, I've seen that with Isabelle2013-1 and the RC versions, a <br>\npoly.exe process will many times get started and never get terminated, <br>\nand end up running at about 95% of the CPU.</p>\n</blockquote>\n<p>Does that mean it is a left-over poly.exe process after you stop <br>\nIsabelle/jEdit, or are there additional instances of poly.exe while you <br>\nrun the Prover IDE?</p>\n<blockquote>\n<p>It has been Sledgehammer that I've mainly associated that with, but <br>\ntoday, I was using the command \"export_code\" in a simple theory, which I <br>\ninclude below.</p>\n</blockquote>\n<p>I would say that Sledgehammer and export_code are quite different.  I did <br>\nsee occasional left-over process from Sledgehammer on Windows, notably E <br>\nprover, but that is not poly.exe.</p>\n<p>The export_code command is special since it writes out given files <br>\nphysically.  As long as you continue typing, it will do it for several <br>\nprefixes of the file name.  I can't tell if this can lock up the IDE. <br>\nYou can try switching the new option \"Continuous checking\" off -- there is <br>\na checkbox in the Theories panel and a keyboard shortcut C+e ENTER. <br>\nThis is slightly awkward handiwork, and you must not forget to turn it on <br>\nagain for checking things, but it might help with occasional stateful <br>\ncommands.</p>\n<blockquote>\n<p>With Isabelle2013, rarely did processes get started that weren't <br>\nterminated.</p>\n</blockquote>\n<p>In principle, I made several things in the process management more robust. <br>\nSome of that could cause new problems nonetheless.</p>\n<p>Isabelle2013-1 also has an updated version of Cygwin, which could in <br>\nprinciple be less reliable than the one we've had before.  This has <br>\nhappened before, but so far there is no proof for that.</p>\n<blockquote>\n<p>After I closed jEdit, a bunch of processes terminated, including a poly.exe, <br>\nbut these 4  processes were still running:</p>\n<p>poly.exe<br>\nenv.exe<br>\nbash.exe<br>\nbash.exe</p>\n</blockquote>\n<p>This looks like the normal collection of processes for the prover backend. <br>\nNormally, stopping jEdit and its Isabelle/jEdit plugin should terminate <br>\nthe processes as well.  There is also a global JVM shutdown handler: <br>\nregular termination of the Java runtime should dispose any add-on <br>\nprocesses.</p>\n<p>This does not work though, if the JVM is in bad state and needs to be <br>\nterminated the hard way, i.e. the light is switched of with the hammer.</p>\n<p>Makarius</p>",
        "id": 294256114,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660912661
    },
    {
        "content": "<p>From: Gottfried Barrow &lt;<a href=\"mailto:gottfried.barrow@gmx.com\">gottfried.barrow@gmx.com</a>&gt;<br>\nOn 11/22/2013 4:59 PM, Makarius wrote:</p>\n<blockquote>\n<p>On Fri, 22 Nov 2013, Gottfried Barrow wrote:</p>\n<blockquote>\n<p>In general, I've seen that with Isabelle2013-1 and the RC versions, a <br>\npoly.exe process will many times get started and never get <br>\nterminated, and end up running at about 95% of the CPU.</p>\n</blockquote>\n<p>Does that mean it is a left-over poly.exe process after you stop <br>\nIsabelle/jEdit, or are there additional instances of poly.exe while <br>\nyou run the Prover IDE?</p>\n</blockquote>\n<p>I'm pretty sure the two things always go together. If a poly.exe process <br>\nis still running after I exit Isabelle/jEdit, it's because it got <br>\norphaned somehow when Isabelle/jEdit was running. As to \"additional <br>\ninstances\", I frequently see multiple instances of poly.exe running, <br>\nsometimes starting up, and then being shut down, so I don't know under <br>\nwhat circumstances a poly.exe process is supposed to be running. There's <br>\ntwo running right now, and there's nothing wrong.</p>\n<p>You go into the differences between Sledgehammer and the code generator <br>\nbelow. All I associate these non-terminated processes to is when Isar <br>\ncommands stay purple for a long time; that is, that some heavy <br>\nprocessing is going on. In the case of the code generator, it has to do <br>\na bunch of processing to generate the code, and then to write it to <br>\ndisk. That's all I associate it with.</p>\n<p>(Here, I go on a \"Isabelle/jEdit\" tangent. In the last sentence, I had a <br>\nneed to refer to Isabelle/jEdit twice. The result was that the <br>\ncharacters I used from using \"Isabelle/\" twice make up about 10% of the <br>\nsentence. These days, I now understand that Isabelle/jEdit is a <br>\nsignificant deviation from jEdit, and that it deserves a different name, <br>\nhowever, there is the need for language to be efficient.</p>\n<p>There is also the fact that you use a \"path/filename\" naming scheme, and <br>\nit's a universal practice for people to drop the \"path\" in <br>\n\"path/filename\" when the context is clear. That doesn't actually apply <br>\nto me anymore because, as I said, I now understand that Isabelle/jEdit <br>\ndeserves a separate name from jEdit, and likewise for Isabelle/ML. As to <br>\nIsabelle/Scala, I don't understand that at all, because I don't see that <br>\nyou've tweaked the standard distribution of Scala. I only see that you <br>\nuse it and distribute it.</p>\n<p>This is sort of a complaint, but you don't need to respond to it. At <br>\nthis point, there are no good solutions when I have a need to refer to <br>\nIsabelle/jEdit many times is a short amount of space. I can call it <br>\n\"it\", but I need to be more explicit most of the time. I can call it <br>\n\"jEdit,\" but I know it's not supposed to be called \"jEdit,\" because it's <br>\nnot \"jEdit\". My solution, maybe, is to start calling it \"PIDE\". That's 4 <br>\ncharacters, which is efficient, as long as the meaning is clear.)</p>\n<blockquote>\n<p>The export_code command is special since it writes out given files <br>\nphysically.  As long as you continue typing, it will do it for several <br>\nprefixes of the file name.  I can't tell if this can lock up the IDE. <br>\nYou can try switching the new option \"Continuous checking\" off -- <br>\nthere is a checkbox in the Theories panel and a keyboard shortcut C+e <br>\nENTER. This is slightly awkward handiwork, and you must not forget to <br>\nturn it on again for checking things, but it might help with <br>\noccasional stateful commands.</p>\n</blockquote>\n<p>I think these things happen more when I'm typing something new, <br>\ncommenting out something, or uncommenting something. Basically, when <br>\ndemanding processes are going back and forth between getting started and <br>\nterminated, because of the three things I just mentioned, and them <br>\nhappening a lot withing a short period of time.</p>\n<p>The fact that Isabelle2012 and Isbelle2013 were good at shutting down <br>\nprocesses got me in the habit of not even thinking about causing any <br>\nproblems, but I can start turning the prover on and off before I do <br>\nthings that will invoke all these automatic processes.</p>\n<p>Regards,<br>\nGB</p>",
        "id": 294256143,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660912673
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nSo far I did not have the impression that you economize the character <br>\ncounts of your text :-)</p>\n<p>\"PIDE\" is fine -- it is the umbrella term for the \"Prover IDE\" concepts <br>\nand implementations, and covers all particular implementations, e.g. <br>\nIsabelle/jEdit, Isabelle/Eclipse (Newcastle), clide (Bremen).</p>\n<p>The confusion of the \"Isabelle/jEdit\" prover IDE with the \"jEdit\" text <br>\neditor is particularly critical, since \"jEdit\" is a well-known brand in <br>\ncertain communities.  Posting about Isabelle/jEdit on Stackoverflow or on <br>\nthe jedit mailing lists, but calling it just \"jEdit\" would cause <br>\nunnecessary problems.</p>\n<p>And yes, Isabelle/jEdit adds so much to the basic jEdit substrate that it <br>\ndeserves its own branding.  (I did not anticipate so much extra work when <br>\nI started the project around 2008.)</p>\n<p>Makarius</p>",
        "id": 294256222,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660912691
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nOK, I have learned something about 'export_code': using SML as target <br>\nlanguage seems to run a separate Isabelle/ML process to check the result. <br>\n(In your example you've hand only Scala and Haskell, though.)</p>\n<p>I have experimented with export_code in SML myself, but did not manage to <br>\nsee left-over processes after 10-20 times reloading of the example theory <br>\n(Windows 2008, 4 cores).</p>\n<p>Since you see poly.exe processes in particular, there might be a new <br>\nproblem introduced in the way I start Poly/ML 5.5.1 in Isabelle2013-1, <br>\ninstead of Poly/ML 5.5.0 in Isabelle2013.  This is just another theory, as <br>\nalternative to postulate a problem with the Cygwin update.</p>\n<p>To try it yourself, you can downgrade Isabelle2013-1 to Poly/ML 5.5.0 as <br>\nfollows:</p>\n<p>* Open $ISABELLE_HOME/etc/components in Isabelle/jEdit (the file name<br>\n     can be typed like that in the file browser).</p>\n<p>* Replace the line \"polyml-5.5.1-1\" by \"polyml-5.5.0-3\" (without<br>\n     touching anything else).</p>\n<p>* Quit Isabelle/jEdit and run Isabelle2013-1\\Cygwin-Terminal.bat</p>\n<p>* On the command line run \"isabelle components -a\", which will download<br>\n     and unpack the requested Poly/ML version.</p>\n<p>Now you can close the terminal and restart Isabelle/jEdit -- it will <br>\nrebuild your standard logic image, which is normally \"HOL\".  In this new <br>\nsituation, the starting of external poly.exe processes works more like in <br>\nIsabelle2013.</p>\n<p>Makarius</p>",
        "id": 294256274,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660912716
    },
    {
        "content": "<p>From: Gottfried Barrow &lt;<a href=\"mailto:gottfried.barrow@gmx.com\">gottfried.barrow@gmx.com</a>&gt;<br>\nOn 11/23/2013 5:42 AM, Makarius wrote:</p>\n<blockquote>\n<p>So far I did not have the impression that you economize the character <br>\ncounts of your text :-)</p>\n</blockquote>\n<p>A novelist culls down 100,000 words to 40,000 words, which is not <br>\napparent to others, because the 40,000 words still exists. The value of <br>\nthe 40,000 words is sometimes only of internal value to the writer.</p>\n<p>For my question about code generation about Trueprop, I actually worked <br>\nto limit its length. Brevity becomes important when one wants to <br>\nincrease the chances, from 5% to 6%, that busy people will take time to <br>\nread past the first paragraph.</p>\n<blockquote>\n<p>\"PIDE\" is fine..</p>\n<p>And yes, Isabelle/jEdit adds so much to the basic jEdit substrate that <br>\nit deserves its own branding.  (I did not anticipate so much extra <br>\nwork when I started the project around 2008.)<br>\n</p>\n</blockquote>\n<p>Economy dictates that I should leave off suggesting a major rebranding <br>\nof Isabelle, to that of the IsaSuite, which would include the products <br>\nIsaML and IsaJEdit, where, of course, there's no need for IsaIsar, as <br>\nit's readily seen that's there's an isa in the Isar.</p>\n<p>To not economize my words is to dilute their value, and some kind of <br>\nrebranding is inevitable anyway. It always happens after the IPO. The <br>\nstock price eventually goes down. The corporate board, looking for <br>\nsolutions, fires the principals who started it all. As to whether there <br>\nwill be a Steve Jobs'ish comeback, only time will tell. Cursing, <br>\nscreaming, and yelling by the principals should begin now, or the <br>\nstoryline will suffer.</p>\n<p>On 11/23/2013 8:15 AM, Makarius wrote:</p>\n<blockquote>\n<p>I have experimented with export_code in SML myself, but did not manage <br>\nto see left-over processes after 10-20 times reloading of the example <br>\ntheory (Windows 2008, 4 cores).</p>\n<p>Since you see poly.exe processes in particular, there might be a new <br>\nproblem introduced in the way I start Poly/ML 5.5.1 in Isabelle2013-1, <br>\ninstead of Poly/ML 5.5.0 in Isabelle2013.  This is just another <br>\ntheory, as alternative to postulate a problem with the Cygwin update.</p>\n<p>To try it yourself, you can downgrade Isabelle2013-1 to Poly/ML 5.5.0 <br>\nas follows:...</p>\n</blockquote>\n<p>With the latest release, these non-terminated processes have come during <br>\nan initial flurry of experimenting to try and figure out how things <br>\nwork, which generally falls under the category of \"problems due to <br>\ntrying to make Windows do too much at one time\".</p>\n<p>I'm not having problems now, but then, I'm not demanding much of the <br>\nPIDE because I've got done what I wanted. Surely, though, it was related <br>\nto export_code because the file was so small, and commenting in and out <br>\n\"export_code\" was about all I was doing.</p>\n<p>I guess I'll hold off on making the changes you suggest. Right now, I'm <br>\nnot having any problems, so I wouldn't know if it fixed anything.</p>\n<p>From the time I was studying the processes of Sledgehammer, my notes <br>\nshow that metis is run by poly.exe, and metis is called by different ATPs.</p>\n<p>Also, the extra poly.exe I mentioned was because I had an additional <br>\nview open in the PIDE, which I forgot about. When I closed it, the <br>\npoly.exe was terminated.</p>\n<p>Lots of poly.exe's get called. With Isabelle2012 (or Isabelle2011-1), <br>\nsomething like eprover.exe would be left running sometimes, but I don't <br>\nthink I've seen that lately.</p>\n<p>I won't be putting many demands on the PIDE for months, because I'm <br>\ntrying to learn Scala, so that will limit what problems I can discover, <br>\nand these unpredictable problems could go away in that time.</p>\n<p>Regards,<br>\nGB</p>",
        "id": 294256315,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660912731
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nOn Sat, 23 Nov 2013, Gottfried Barrow wrote:</p>\n<blockquote>\n<p>From the time I was studying the processes of Sledgehammer, my notes <br>\nshow that metis is run by poly.exe, and metis is called by different <br>\nATPs.</p>\n<p>Also, the extra poly.exe I mentioned was because I had an additional <br>\nview open in the PIDE, which I forgot about. When I closed it, the <br>\npoly.exe was terminated.</p>\n</blockquote>\n<p>Note that the Prover IDE is connected to a single Isabelle/ML process <br>\n(poly.exe) the whole time.  Multiple editor views, buffers etc. don't <br>\nmatter.  Things are different when you run multiple Isabelle.exe Windows <br>\napplications at the same time, of course.</p>\n<p>Metis is always run internally in the same prover process as anything <br>\nelse.</p>\n<p>SML export_code runs a different, isolated poly.exe each time it is <br>\ninvoked.</p>\n<blockquote>\n<p>Lots of poly.exe's get called. With Isabelle2012 (or Isabelle2011-1), <br>\nsomething like eprover.exe would be left running sometimes, but I don't <br>\nthink I've seen that lately.</p>\n</blockquote>\n<p>I still do see stray eprover processes, also on Unix platforms.  This is <br>\nprobably a remaining problem of Stephan Schulz.</p>\n<p>Makarius</p>",
        "id": 294256325,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660912735
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nA few more remarks, after looking once again over the external process <br>\nmanagement of Isabelle/Scala and Isabelle/ML.</p>\n<p>Process management according to POSIX only allows flat (non-nested) <br>\nprocess groups and asynchronous (unacknowledged) signals to kill another <br>\nprocess.  To give the appearance of managed hierarchies of processes, the <br>\nIsabelle framework implements certain common-sense heuristics that usually <br>\nwork, but implicitly depend on a reasonable degree of reactivity.</p>\n<p>Under heavy load, though, a process that is signalled to terminate, but <br>\nremains unresponspive for too long, is killed the hard way.  Thus it has <br>\nno chance to terminate its sub-processes properly.</p>\n<p>This explains why an abrupt termination of the outermost PIDE application <br>\ncan leave some external processes at the bottom of the hierarchy behind.</p>\n<p>Makarius</p>",
        "id": 294256996,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660912924
    },
    {
        "content": "<p>From: Lars Noschinski &lt;<a href=\"mailto:noschinl@in.tum.de\">noschinl@in.tum.de</a>&gt;<br>\nI recently learned that recent linux kernels (&gt;=3.4) allow setting the<br>\nPR_SET_CHILD_SUBREAPER flag on a process. Basically this means that all<br>\n(indirect) children of this process will be reparented to it instead of<br>\nPID 1, when their parent dies.</p>\n<p>So this would allow better management of processes, but is of course not<br>\nyet very portable. I would be willing to investigate this further, if<br>\nthere is any interest in that.</p>\n<p>-- Lars<br>\n<a href=\"/user_uploads/14278/E3x59oJ25b1HCIFNIhEH8Xf_/signature.asc\">signature.asc</a></p>",
        "id": 294257038,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660912937
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nLinux has many interesting things that are not generally known nor used.</p>\n<p>Linus Torvalds has recently given an interview with two notable points: <br>\n(1) most people ignore the really good things of the Linux kernel -- for <br>\nportability reasons, and (2) Linux desktop projects are all really bad, <br>\nand the continuous forking of projects works against the whole movement <br>\ntowards total world domination.</p>\n<p>Anyway, when I say \"POSIX\", it means the intersection of Mac OS X, Windows </p>\n<ul>\n<li>Cygwin, and Linux.  In this equation, Linux is more and more getting on <br>\nthe fringe, due to the bad state of major Linux distributions in the past <br>\n1-2 years.</li>\n</ul>\n<p>Our multiplatform hints and guidelines <br>\n<a href=\"http://isabelle.in.tum.de/repos/isabelle/file/Isabelle2013-1/Admin/PLATFORMS\">http://isabelle.in.tum.de/repos/isabelle/file/Isabelle2013-1/Admin/PLATFORMS</a> <br>\nrefer to Ubuntu 10.04 LTS as the reference platform to build Isabelle <br>\ncomponents for Linux.  This means, before every Isabelle release I need to <br>\nboot up certain virtual machines to check things or recompile some add-on <br>\ntools.</p>\n<p>Doing it this time, I was just surprised how nice and stable Ubuntu 10.04 <br>\nwas compared to current versions (not just Ubuntu, also other Linux <br>\ndistributions).  I still need to get my own machine back into shape, and <br>\nwill probably try Centos next.  (At the danger of missing messed-up <br>\nDebian/Ubuntu packages of basic Unix tools the next time.)</p>\n<p>Makarius</p>",
        "id": 294257076,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660912949
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nThis should be resolved in Isabelle2013-2-RC3 -- I won't blame Stephan <br>\nSchulz again for his creative signal handlers in the C code of E Prover.</p>\n<p>As long as you stay within Isabelle/jEdit, external processes should be <br>\nterminated eventually.  When you close the Windows application while the <br>\nprover process is really busy with external loads, there is the old danger <br>\nof dangling tail ends of such processes.</p>\n<p>What is missing here for future releases: a proper PIDE application <br>\nshutdown phase that notiates with the prover process via the PIDE <br>\nprotocol, not crude POSIX signals.</p>\n<p>Makarius</p>",
        "id": 294259248,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660913740
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nThis side-remarked greatly helped to figure out that a paractical problem <br>\nwas still remaining, until I addressed that in the present <br>\nIsabelle2013-2-RC3 --- 2 days left for testing.</p>\n<p>Makarius</p>",
        "id": 294261332,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660914489
    }
]