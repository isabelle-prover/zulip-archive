[
    {
        "content": "<p>From: Lutz Schroeder &lt;<a href=\"mailto:Lutz.Schroeder@dfki.de\">Lutz.Schroeder@dfki.de</a>&gt;<br>\nHi,</p>\n<p>I am presently using the function package in a course; specifically, I<br>\nam letting the students prove the rules of a Hoare calculus for partial<br>\ncorrectness over a simple imperative language. The recursive definition<br>\nof the semantics is, of course, a partial function, with clauses such as</p>\n<p>\"Sem (c1 ;;; c2) s = Sem c2 (Sem c1 s)\"</p>\n<p>where ;;; is sequential composition. Now from a clause such as the above<br>\none would wish to conclude a strictness lemma, in the case of sequential<br>\ncomposition:</p>\n<p>lemma seq_dom: \"Sem_dom (c1;;;c2, s) ==&gt;  Sem_dom (c1, s) &amp;<br>\nSem_dom (c2, Sem c1 s)\"</p>\n<p>Indeed this can be proved, but the only way I found is somewhat<br>\ninvolved: as indicated in the tutorial for the function package, one can<br>\nuse the fact that Sem_dom is accp Sem_rel, and apply accp_downward in<br>\nconnection with Sem_rel.intros. However, one then runs across a somewhat<br>\nhidden feature: Sem_rel.intros mentions Sem_sumC, not Sem, and one needs<br>\nto unfold the definition of Sem in terms of Sem_sumC to make things work<br>\nas expected.</p>\n<p>Am I overlooking something? One sort of suspects that strictness<br>\nassertions such as the above might be available neatly packaged, say as<br>\n\"Sem.strictness\" or so...</p>\n<p>Thanks,</p>\n<p>Lutz</p>",
        "id": 294100556,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660833627
    },
    {
        "content": "<p>From: Alexander Krauss &lt;<a href=\"mailto:krauss@in.tum.de\">krauss@in.tum.de</a>&gt;<br>\nHi Lutz,</p>\n<p>[...]</p>\n<blockquote>\n<p>However, one then runs across a somewhat<br>\nhidden feature: Sem_rel.intros mentions Sem_sumC, not Sem, and one needs<br>\nto unfold the definition of Sem in terms of Sem_sumC to make things work<br>\nas expected.</p>\n</blockquote>\n<p>This is the construction the function package does internally to get rid<br>\nof mutual recursion and currying. It is a bit ugly...</p>\n<blockquote>\n<p>Am I overlooking something? One sort of suspects that strictness<br>\nassertions such as the above might be available neatly packaged, say as<br>\n\"Sem.strictness\" or so...</p>\n</blockquote>\n<p>No, this is not packaged, mainly because at the time I implemented it,<br>\nit was not clear what kind of rules are \"the canonical thing that one<br>\nwants to have\". Maybe such a packaging will be added at some point...</p>\n<p>Alex</p>",
        "id": 294100730,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660833697
    }
]