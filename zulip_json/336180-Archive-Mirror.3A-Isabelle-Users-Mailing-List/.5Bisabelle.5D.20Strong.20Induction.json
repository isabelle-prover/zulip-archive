[
    {
        "content": "<p>From: Felipe Magno de Almeida &lt;<a href=\"mailto:felipe.m.almeida@gmail.com\">felipe.m.almeida@gmail.com</a>&gt;<br>\nHello,</p>\n<p>I'm studying the \"A Logical Approach To Discrete Math\" and am trying to use<br>\nIsabelle with solving a few exercises. I am in the Induction chapter, and I'm<br>\ntrying to prove:</p>\n<p>lemma<br>\n  fixes x y h :: nat<br>\n shows \"\\&lt;exists&gt;x y. 2<em>(x::nat) + 5</em>(y::nat) = (h::nat)+4\"</p>\n<p>Which would be the equivalent of the first exercise of the chapter which is:</p>\n<p>P.n : (\\&lt;exists&gt;h,k | 0 &lt;= h /\\ 0 &lt;= k: 2<em>h + 5</em>k = n) for n&gt;=4</p>\n<p>I've searched the web for isabelle strong induction and cases, etc, I've even<br>\ntried to read the src/HOL/Tools/inductive.ML but I'm not very proficient in<br>\nML so I really couldn't understand much. So I really have no idea on how<br>\nto proceed.</p>\n<p>I wrote a proof in my notebook as:</p>\n<p>Proved P.0 and proved P.1, then proved that<br>\nP.n =&gt; P.n+2</p>\n<p>But with Isabelle I have no idea how to transpose this. The induct proof<br>\ndivides in cases 0 and Suc h. So all I have is until now:</p>\n<p>lemma<br>\n  fixes x y h :: nat<br>\n shows \"\\&lt;exists&gt;x y. 2<em>(x::nat) + 5</em>(y::nat) = (h::nat)+4\"<br>\nproof (induct h)<br>\n  case 0<br>\n  have \"\\&lt;exists&gt; x y. 2<em>x + 5</em>y = (0::nat) + 4\"<br>\n    apply (rule_tac x = 2 in exI)<br>\n    by simp<br>\n  thus ?case .<br>\nnext<br>\n  case (Suc n)<br>\nand from here I have no idea how to continue.</p>\n<p>What I wanted was to:</p>\n<p>lemma<br>\n  fixes x y h :: nat<br>\n shows \"\\&lt;exists&gt;x y. 2<em>(x::nat) + 5</em>(y::nat) = (h::nat)+4\"<br>\nproof (induct h)<br>\n  case 0<br>\n  have \"\\&lt;exists&gt; x y. 2<em>x + 5</em>y = (0::nat) + 4\"<br>\n    apply (rule_tac x = 2 in exI)<br>\n    by simp<br>\n  thus ?case .<br>\nnext<br>\n  case (Suc 0)<br>\n  (* etc *)<br>\n  thus ?case .<br>\nnext<br>\n  case (Suc (Suc n))<br>\n  (* prove P.n ==&gt; P (Suc (Suc n)) *)<br>\n  thus ?case .<br>\nqed</p>\n<p>Any pointers?</p>\n<p>Thanks in advance,</p>",
        "id": 294223498,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660898740
    },
    {
        "content": "<p>From: Alfio Martini &lt;<a href=\"mailto:alfio.martini@acm.org\">alfio.martini@acm.org</a>&gt;<br>\nHi Felipe,</p>\n<p>I am not with Gries book here, but It seems that you are looking for might<br>\nbe<br>\nwhat is often called recursion [or computation] induction.</p>\n<p>Take a look at section 2.3.4, in the new Isabelle tutorial (here):</p>\n<p><a href=\"http://isabelle.in.tum.de/dist/Isabelle2012/doc/prog-prove.pdf\">http://isabelle.in.tum.de/dist/Isabelle2012/doc/prog-prove.pdf</a></p>\n<p>and also at section 3.5 of the traditional Isabelle tutorial here:</p>\n<p><a href=\"http://isabelle.in.tum.de/dist/Isabelle2012/doc/tutorial.pdf\">http://isabelle.in.tum.de/dist/Isabelle2012/doc/tutorial.pdf</a></p>\n<p>Best!</p>",
        "id": 294223502,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660898744
    },
    {
        "content": "<p>From: René Neumann &lt;<a href=\"mailto:rene.neumann@in.tum.de\">rene.neumann@in.tum.de</a>&gt;<br>\nHi,</p>\n<p>If you don't find an induction rule that suits your needs, write one :)</p>\n<p>lemma nat_plus2_induct [case_names Zero One SucSuc]:<br>\n  assumes \"P 0\"<br>\n  and \"P (Suc 0)\"<br>\n  and \"\\&lt;And&gt;n. P n \\&lt;Longrightarrow&gt; P (Suc (Suc n))\"<br>\n  shows \"P (n::nat)\"<br>\nproof (induct n rule: less_induct)<br>\n  case (less x) with assms show ?case<br>\n    by (cases x, simp) (metis less_Suc_eq_0_disj less_Suc_eq)<br>\nqed</p>\n<p>lemma<br>\n  fixes x y h :: nat<br>\n  shows \"\\&lt;exists&gt;x y. 2<em>(x::nat) + 5</em>(y::nat) = (h::nat)+4\"<br>\nproof (induct h rule: nat_plus2_induct)<br>\n  case Zero ...<br>\nnext<br>\n  case One ...<br>\nnext<br>\n  case (SucSuc n) ...<br>\nqed</p>\n<ul>\n<li>René</li>\n</ul>",
        "id": 294223517,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660898752
    },
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\nTechnically speaking, \"strong induction\" (also called \"complete induction\") is<br>\nexactly the induction principle less_induct, which you can use the way René has<br>\nshown. However, you do not need to derive a separate induction rule first, it<br>\ncan be just as easy to use less_induct directly.</p>\n<p>Tobias</p>",
        "id": 294223537,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660898762
    }
]