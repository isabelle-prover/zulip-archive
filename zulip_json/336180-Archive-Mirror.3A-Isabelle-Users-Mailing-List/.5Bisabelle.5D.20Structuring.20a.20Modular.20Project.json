[
    {
        "content": "<p>From: scott constable &lt;<a href=\"mailto:sdconsta@syr.edu\">sdconsta@syr.edu</a>&gt;<br>\nHi All,</p>\n<p>I'm working on a medium-sized project with two libraries, call them A and<br>\nB, and a main project P which uses A and B. A and B are both general enough<br>\nthat many other projects could use them, i.e. I want them to be treated<br>\nlike static libraries. Eventually I would like to post A, B, and P on<br>\nGithub so that others can use A and B independently, or use P with A and B.<br>\nRight now it looks like these are my two options:</p>\n<p>1. Configure A and B each with a Makefile which performs, for example,<br>\n   $ isabelle build -b -d . A</p>\n<p>2. Expect any project which uses A and/or B to import them by providing<br>\n   a path in the preamble, for example<br>\n   theory P imports \"&lt;path-to-A&gt;/A\" \"&lt;path-to-B&gt;/B\" begin</p>\n<p>I'm not fond of option 1 because it requires building two heaps which<br>\namount to ~500MB, and requires the user to invoke Isabelle/JEdit from the<br>\ncommand line with paths to A and/or B. I'm also not fond of option 2<br>\nbecause then the user must hardcode into .thy file in his/her own project<br>\nthe path to A or to B. Thus source code will become less portable. Are<br>\nthere any better options?</p>\n<p>Thanks in advance,</p>\n<p>Scott Constable</p>",
        "id": 294682911,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661177310
    },
    {
        "content": "<p>From: <a href=\"mailto:Gerwin.Klein@data61.csiro.au\">Gerwin.Klein@data61.csiro.au</a><br>\nThere are two more:</p>\n<ol start=\"3\">\n<li>\n<p>&lt;path-to-A&gt; can be a relative path and you could expect the user to put A and B in specific relative locations to where they are used (e.g. using symlinks).</p>\n</li>\n<li>\n<p>use \"$A_HOME/A‚Äù in the import statement (i.e. a variable) and expect the user to have that variable set</p>\n</li>\n</ol>\n<p>Cheers,<br>\nGerwin</p>",
        "id": 294682933,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661177315
    },
    {
        "content": "<p>From: Lars Hupel &lt;<a href=\"mailto:hupel@in.tum.de\">hupel@in.tum.de</a>&gt;<br>\nHi,</p>\n<p>the upcoming Isabelle 2016-1 release features \"incremental\" heap images;<br>\nthat is, heaps won't be cumulative anymore. That will drastically reduce<br>\nthe total size of your \".isabelle\" directory.</p>\n<p>Note that it is impossible to \"join\" two different heap images: Each<br>\nIsabelle session must have exactly one parent. So when you want to<br>\ndeclare a \"ROOT\" file for your project \"P\", you have to choose either<br>\n\"A\" or \"B\" as the parent (or choose \"HOL\" instead). The other theories<br>\nthen have to be imported, as Gerwin indicated, by either relative or<br>\nparametrized paths.</p>\n<p>In the AFP, it is customary to use the relative path convention <em>inside</em><br>\nthe repository. But from the outside, users usually register the AFP as<br>\na \"component\", so that they can write</p>\n<p>imports \"$AFP/Collections/...\"</p>\n<p>If looks like in your case, relative paths seem to be the way to go. You<br>\ncould also consider using Git submodules for \"A\" and \"B\" in \"P\"; that<br>\nway, your users don't have to manually clone \"A\" and \"B\" to the expected<br>\nlocations.</p>\n<p>Cheers<br>\nLars</p>",
        "id": 294682954,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661177321
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nOn 20/09/16 17:33, scott constable wrote:</p>\n<blockquote>\n<p>I'm working on a medium-sized project with two libraries, call them A and<br>\nB, and a main project P which uses A and B. A and B are both general enough<br>\nthat many other projects could use them, i.e. I want them to be treated<br>\nlike static libraries. Eventually I would like to post A, B, and P on<br>\nGithub so that others can use A and B independently, or use P with A and B.</p>\n</blockquote>\n<p>The canonical way is to post things to the Archive of Formal Proofs<br>\n<a href=\"https://www.isa-afp.org\">https://www.isa-afp.org</a> -- once they have reached a certain maturity and<br>\nstability.</p>\n<p>Material on AFP has the advantage that it follows changes of Isabelle<br>\n\"automagically\". Sometimes people have tried to follow Isabelle releases<br>\nindependently (e.g. see<br>\n<a href=\"https://staff.aist.go.jp/y-isobe/CSP-Prover/CSP-Prover.html\">https://staff.aist.go.jp/y-isobe/CSP-Prover/CSP-Prover.html</a>), but<br>\nusually there comes a point where isolated projects are longer updated<br>\nand thus fall into decay. (Luckily the CSP-Prover guys seem to have made<br>\nit again for Isabelle2016, after some years stagnation.)</p>\n<blockquote>\n<p>Right now it looks like these are my two options:</p>\n<p>1. Configure A and B each with a Makefile which performs, for example,<br>\n   $ isabelle build -b -d . A</p>\n</blockquote>\n<p>What is the purpose of the Makefile here? Dependencies are already<br>\nmanaged by isabelle build and the ROOT files. Also note that \"make\"<br>\ntools are not portable and merely cause problems to users. We managed to<br>\nget rid of make in Isabelle2012.</p>\n<p>Generally, Isabelle session heap images should not be taking too<br>\nseriously. This is not a C compiler that turns .c into .o files. It is<br>\nmore like a \"dumped world snapshot\" like in the old LISP times. This<br>\naspect might become again more visible, when the Isabelle Prover IDE<br>\nsupports its own model of persistence, without command-line builds<br>\ngetting in the way.</p>\n<p>In Isabelle2016 we still see a bit of a hybrid of quasi-static builds,<br>\nbut the general move is away from it. Think of it is a formal word<br>\nprocessor that somehow provides ways to make system snapshots persistent.</p>\n<p>Makarius</p>",
        "id": 294682988,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661177334
    },
    {
        "content": "<p>From: scott constable &lt;<a href=\"mailto:sdconsta@syr.edu\">sdconsta@syr.edu</a>&gt;<br>\nThanks to everyone for the responses. The reason I'm using a Makefile is<br>\nbecause several of the theories are being generated by ott, and Make helps<br>\nto coordinate that process; at the moment I don't see a feasible<br>\ncross-platform option.</p>\n<p>The solution I'm leaning towards is one where A, B, and P can be their own<br>\nstandalone git repositories, but the use of P expects A and B to be cloned<br>\nwithin P at pre-specified locations. This is analogous to the way the<br>\nLLVM/clang project is set up: LLVM and clang must be cloned in specific<br>\nlocations relative to one another.</p>\n<p>Scott</p>",
        "id": 294683001,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661177340
    }
]