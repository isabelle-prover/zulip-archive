[
    {
        "content": "<p>From: Alfio Martini &lt;<a href=\"mailto:alfio.martini@acm.org\">alfio.martini@acm.org</a>&gt;<br>\nDear Isabelle Users,</p>\n<p>In the following simple script, the Isar proof only works if I fix the types<br>\nof<br>\nboth subtrees,  like I did. If I let their types unspecified (like in: fix<br>\nx0 and lt0 and rt0) it<br>\ngives a type unification error. From the proof state, one can see that it<br>\nhappens<br>\nbecause the two induction hypothesis are assigned different type variables.</p>\n<p>Could anyone elaborate a bit more on that for me?</p>\n<p>Many Thanks!</p>\n<hr>\n<p>theory newbies_tree_demo</p>\n<p>imports Main</p>\n<p>begin<br>\n datatype 'a Tree = Leaf | Br  'a \"'a Tree\" \"'a Tree\"</p>\n<p>primrec reflect::\"'a Tree =&gt; 'a Tree\"<br>\n   where<br>\n     ref01:\"reflect Leaf = Leaf\" |<br>\n     rev02:\"reflect (Br label lt rt) = Br label (reflect rt) (reflect lt)\"</p>\n<p>theorem th_refl01isA: \"reflect (reflect t) = t\"<br>\n  proof (induct t)<br>\n     show  \"reflect (reflect Leaf) = Leaf\" by simp<br>\n  next<br>\n     fix x0 and lt0::\"'a Tree\" and rt0::\"'a Tree\"<br>\n     assume IH1: \"reflect (reflect lt0) = lt0\"<br>\n     assume IH2: \"reflect (reflect rt0) = rt0\"<br>\n     show \"reflect (reflect (Br x0 lt0 rt0)) = Br x0 lt0 rt0\" by (simp<br>\nadd:IH1 IH2)<br>\n  qed</p>",
        "id": 294143488,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660846684
    },
    {
        "content": "<p>From: Lawrence Paulson &lt;<a href=\"mailto:lp15@cam.ac.uk\">lp15@cam.ac.uk</a>&gt;<br>\nThe problem is that the function reflect is polymorphic, and when you simply state the induction hypotheses as you do, there is no reason to assume that the variables have the same types. To eliminate this difficulty, the Isar language includes abbreviations letting you refer to the various inductive cases. Then types are assigned correctly. I suggest writing your proof as follows:</p>\n<p>theorem th_refl01isA: \"reflect (reflect t) = t\"<br>\n proof (induct t)<br>\n   case Leaf<br>\n    show ?case by simp<br>\n next<br>\n   case (Br x0 lt0 rt0)<br>\n     thus ?case by simp<br>\n qed</p>\n<p>Larry Paulson</p>",
        "id": 294143512,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660846690
    },
    {
        "content": "<p>From: Alfio Martini &lt;<a href=\"mailto:alfio.martini@acm.org\">alfio.martini@acm.org</a>&gt;<br>\nDear Lawrence,</p>\n<p>Many thanks for the quick and  helpful reply!</p>\n<p>Best!</p>",
        "id": 294143534,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660846696
    }
]