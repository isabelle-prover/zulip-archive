[
    {
        "content": "<p>From: \"W. Li\" &lt;<a href=\"mailto:wl302@cam.ac.uk\">wl302@cam.ac.uk</a>&gt;<br>\nHello,</p>\n<p>Could anyone be kind enough to help me with a type instantiation problem?</p>\n<p>I defined a simple data type 'kon_nodes' with four constructors (i.e. 'a', <br>\n'b', 'c' and 'd'), and I want to show that 'kon_nodes' is of class 'enum'. <br>\nHowever, I cannot finish the instance proof. The code is as follows: <br>\ndatatype kon_nodes = a|b|c|d instantiation kon_nodes :: enum begin <br>\ndefinition \"enum =[a,b,c,d]\" definition \"enum_all P &lt;-&gt; P a ∧ P b ∧ P c <br>\n∧ P d\" definition \"enum_ex P &lt;-&gt; P a ∨ P b ∨ P c ∨ P d\" instance sorry <br>\nend</p>\n<p>Actually, there is a very similar proof in the theory of 'enum' in the <br>\nlibrary. I copy and paste the exact code to my Isabelle 2013, but, <br>\nsurprisingly, Isabelle does not accept the proof either. The proof from the <br>\ntheory of 'enum' is as follows: datatype finite_4 = a⇣1 | a⇣2 | a⇣3 | <br>\na⇣4</p>\n<p>notation (output) a⇣1  (\"a⇣1\")<br>\nnotation (output) a⇣2  (\"a⇣2\")<br>\nnotation (output) a⇣3  (\"a⇣3\")<br>\nnotation (output) a⇣4  (\"a⇣4\")</p>\n<p>lemma UNIV_finite_4:<br>\n  \"UNIV = {a⇣1, a⇣2, a⇣3, a⇣4}\"<br>\n  by (auto intro: finite_4.exhaust)</p>\n<p>instantiation finite_4 :: enum<br>\nbegin</p>\n<p>definition<br>\n  \"enum = [a⇣1, a⇣2, a⇣3, a⇣4]\"</p>\n<p>definition<br>\n  \"enum_all P &lt;-&gt; P a⇣1 ∧ P a⇣2 ∧ P a⇣3 ∧ P a⇣4\"</p>\n<p>definition<br>\n  \"enum_ex P &lt;-&gt; P a⇣1 ∨ P a⇣2 ∨ P a⇣3 ∨ P a⇣4\"</p>\n<p>instance proof qed (simp_all only: enum_finite_4_def enum_all_finite_4_def <br>\nenum_ex_finite_4_def UNIV_finite_4, simp_all) end</p>\n<p>I feel confused. Any help would be greatly appreciated.<br>\nWenda Li</p>",
        "id": 294238805,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660906040
    },
    {
        "content": "<p>From: Andreas Lochbihler &lt;<a href=\"mailto:andreas.lochbihler@inf.ethz.ch\">andreas.lochbihler@inf.ethz.ch</a>&gt;<br>\nDear Wenda,</p>\n<p>In Enum.thy, unqualified access to the enum constant is disabled at the <br>\nend. Therefore, your definition \"enum = [a, b, c, d]\" does not define <br>\nthe overloaded type class parameter, but introduces a new constant enum. <br>\nThis also holds for enum_ex and enum_all. Try it with qualified access:</p>\n<p>definition \"enum_class.enum = [a, b, c, d]\"</p>\n<p>Best,<br>\nAndreas</p>",
        "id": 294238819,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660906047
    },
    {
        "content": "<p>From: René Thiemann &lt;<a href=\"mailto:rene.thiemann@uibk.ac.at\">rene.thiemann@uibk.ac.at</a>&gt;<br>\nDear Wenda,</p>\n<p>as far as I see, your proof can easily be repaired by using the postfix _kon_nodes in your definitions.<br>\nThen all results are easily proven.</p>\n<p>datatype kon_nodes = a|b|c|d </p>\n<p>instantiation kon_nodes :: enum </p>\n<p>begin <br>\ndefinition [simp]: \"enum_kon_nodes =[a,b,c,d]\" <br>\ndefinition [simp]: \"enum_all_kon_nodes P &lt;-&gt; P a ∧ P b ∧ P c ∧ P d\" <br>\ndefinition [simp]: \"enum_ex_kon_nodes P &lt;-&gt; P a ∨ P b ∨ P c ∨ P d\" instance </p>\n<p>proof<br>\nqed (auto, (case_tac x, auto)+) <br>\nend</p>\n<p>I hope, this was useful,<br>\nRené</p>\n<p>PS: usually type names are not plural, so I would call it datatype kon_node = ...</p>",
        "id": 294238828,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660906052
    }
]