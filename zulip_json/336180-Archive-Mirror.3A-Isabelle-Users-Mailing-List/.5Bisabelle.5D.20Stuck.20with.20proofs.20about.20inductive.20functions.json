[
    {
        "content": "<p>From: Tambet &lt;<a href=\"mailto:qtvali@gmail.com\">qtvali@gmail.com</a>&gt;<br>\nSo I have this:</p>\n<p>inductive cf :: \"nat =&gt; nat =&gt; bool\" where<br>\n cnf[intro!]:<br>\n  \"cnat n ==&gt; cf (cn n) n\" |<br>\n cff[intro!]:<br>\n  \"cf m n ==&gt; cf (cn m) n\"</p>\n<p>fun cfe :: \"nat =&gt; nat =&gt; bool\" where<br>\n  \"cfe m n = ((m = n) | (cf m n))\"</p>\n<p>And want to show these:</p>\n<p>lemma cfef:<br>\n   assumes \"cnat a\"<br>\n   assumes \"cf b a\"<br>\n   shows \"cfe b (cn a)\"</p>\n<p>lemma cfff:<br>\n   assumes \"cnat a\"<br>\n   assumes \"cf b a\"<br>\n   assumes \"cf c b\"<br>\n   shows \"cf c a\"</p>\n<p>I did search similar proofs for Nat.thy, but what I found were rather<br>\ncryptic and didn't show their inner structure (as they were all using<br>\ntactics). I did not find proof for \"a &lt; b &amp; b &lt;= c ==&gt; a &lt; c\", which would<br>\nhave been probably most direct match. Also I would like to know, how to name<br>\nthose lemmas according to Isabelle's standards and style guidelines. Second<br>\none of those is more needed, but first one seems to be simpler.</p>\n<p>I would be happy to get any or all of these:</p>\n<p>- Way(s) to prove this using structured Isar proof.<br>\n   - Way(s) to prove this using automated tactics.<br>\n   - Explanation about those tactics.<br>\n   - Link to manual pages, which do not assume too wide knowledge about<br>\n   Isabelle as prerequisite (but the ones, which do, would also be better than<br>\n   nothing).</p>\n<p>As it is very commonly needed thing to prove things about similar functions,<br>\nI would like to catch the underlying logic, thus a few words of explanation<br>\nwould be very nice.</p>\n<p>Tambet</p>",
        "id": 294113154,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660837478
    },
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\nTambet schrieb:</p>\n<blockquote>\n<p>So I have this:</p>\n<p>inductive cf :: \"nat =&gt; nat =&gt; bool\" where<br>\n cnf[intro!]:<br>\n  \"cnat n ==&gt; cf (cn n) n\" |<br>\n cff[intro!]:<br>\n  \"cf m n ==&gt; cf (cn m) n\"</p>\n<p>fun cfe :: \"nat =&gt; nat =&gt; bool\" where<br>\n  \"cfe m n = ((m = n) | (cf m n))\"</p>\n<p>And want to show these:</p>\n<p>lemma cfef:<br>\n   assumes \"cnat a\"<br>\n   assumes \"cf b a\"<br>\n   shows \"cfe b (cn a)\"</p>\n</blockquote>\n<p>I tried to prove this by induction:</p>\n<p>lemma cfef: \"cf b a ==&gt; cnat a ==&gt; cfe b (cn a)\"<br>\nproof(induct rule: cf.induct)<br>\n  case cnf show ?case by simp<br>\nnext<br>\n  case (cff m n) thus ?case<br>\napply auto</p>\n<p>But this leads to the goal</p>\n<ol>\n<li>[| cf (cn n) n; cnat n; cn (cn n) ~= cn n |] ==&gt; cf n (cn n)</li>\n</ol>\n<p>I don't see how to prove this. In fact, I doubt that the lemma is<br>\nprovable: the def of cf never forces cn into the second argument, but<br>\nyour lemmas requires to show that cn shows up in the second argument.<br>\nMaybe it is provable given the actual definition of cn.</p>\n<blockquote>\n<p>- Way(s) to prove this using structured Isar proof.</p>\n</blockquote>\n<p>See above.</p>\n<blockquote>\n<p>- Way(s) to prove this using automated tactics.<br>\n   - Explanation about those tactics.<br>\n   - Link to manual pages, which do not assume too wide knowledge about<br>\n   Isabelle as prerequisite (but the ones, which do, would also be better than<br>\n   nothing).</p>\n</blockquote>\n<p>See my already advertised slides.</p>\n<p>Tobias</p>\n<blockquote>\n<p>As it is very commonly needed thing to prove things about similar functions,<br>\nI would like to catch the underlying logic, thus a few words of explanation<br>\nwould be very nice.</p>\n<p>Tambet</p>\n</blockquote>",
        "id": 294113211,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660837494
    }
]