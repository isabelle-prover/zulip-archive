[
    {
        "content": "<p>From: John Munroe &lt;<a href=\"mailto:munddr@gmail.com\">munddr@gmail.com</a>&gt;<br>\nHi,</p>\n<p>I'm trying to define a function 'f' such that when the input is of<br>\ntype 'A' it gives true, but when it's of type 'B' it gives false:<br>\nWould I need to make A and B subtypes of some parent type, say, 'P',<br>\nand that 'f' is of type \"P =&gt; bool\"? I can't seem to find much<br>\ndocumentation on subtyping.</p>\n<p>If I use type classes instead:</p>\n<p>class P<br>\nclasses A &lt; P<br>\nB &lt; P</p>\n<p>I can't seem to define the type of 'f' in terms of neither A, B, or P.</p>\n<p>Any help on this will be much appreciated!</p>\n<p>Thanks</p>\n<p>John</p>",
        "id": 294142844,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660846456
    },
    {
        "content": "<p>From: \"Tim (McKenzie) Makarios\" &lt;<a href=\"mailto:tjm1983@gmail.com\">tjm1983@gmail.com</a>&gt;<br>\n-----BEGIN PGP SIGNED MESSAGE-----<br>\nHash: SHA1</p>\n<p>It sounds like you might want to use a sum type, so that the type \"'p\"<br>\nis \"'a + 'b\".  There was a discussion about this quite recently on this<br>\nvery list, starting here: <a href=\"http://tinyurl.com/3jzx3ny\">http://tinyurl.com/3jzx3ny</a></p>\n<p>Then you could have something like \"f p = \\&lt;exists&gt; a. p = Inl a\" (but I<br>\nhaven't tested this).</p>\n<p>Tim<br>\n&lt;&gt;&lt;<br>\n-----BEGIN PGP SIGNATURE-----<br>\nVersion: GnuPG v1.4.10 (GNU/Linux)<br>\nComment: Using GnuPG with Mozilla - <a href=\"http://enigmail.mozdev.org/\">http://enigmail.mozdev.org/</a></p>\n<p>iEYEARECAAYFAk5UZHMACgkQ/cBxZIxl6rmwnACfdWxXr+HPTl/8EOuAg0Y6j1Ai<br>\n378An1HvQucFMwMdkCUv4a+PtWuAXzbO<br>\n=Z7Ie<br>\n-----END PGP SIGNATURE-----</p>",
        "id": 294142857,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660846463
    },
    {
        "content": "<p>From: John Munroe &lt;<a href=\"mailto:munddr@gmail.com\">munddr@gmail.com</a>&gt;</p>\n<blockquote>\n<p>On 24/08/11 11:03, John Munroe wrote:</p>\n<blockquote>\n<p>Hi,</p>\n<p>I'm trying to define a function 'f' such that when the input is of<br>\ntype 'A' it gives true, but when it's of type 'B' it gives false:<br>\nWould I need to make A and B subtypes of some parent type, say, 'P',<br>\nand that 'f' is of type \"P =&gt; bool\"? I can't seem to find much<br>\ndocumentation on subtyping.</p>\n</blockquote>\n<p>It sounds like you might want to use a sum type, so that the type \"'p\"<br>\nis \"'a + 'b\". Â There was a discussion about this quite recently on this<br>\nvery list, starting here: <a href=\"http://tinyurl.com/3jzx3ny\">http://tinyurl.com/3jzx3ny</a></p>\n<p>Then you could have something like \"f p = \\&lt;exists&gt; a. p = Inl a\" (but I<br>\nhaven't tested this).</p>\n</blockquote>\n<p>Thanks for that. I'm not certain if I properly understand \"f p =<br>\n\\&lt;exists&gt; a. p = Inl a\". So, for my example, is the type of f \"A + B<br>\n=&gt; bool\"? This is what I have:</p>\n<p>typedecl A<br>\ntypedecl B</p>\n<p>axiomatization<br>\nf :: \"A + B =&gt; bool\"<br>\nwhere<br>\nax1 : \"f p = (EX a. p = Inl a)\"</p>\n<p>consts a :: \"A + 'b\"</p>\n<p>lemma \"f a = True\"<br>\napply (simp add: ax1)<br>\n??</p>\n<p>I can't seem to find out what Inl actually does. It's defined in<br>\nSum_Type to be \"Inl = Abs_sum \\&lt;circ&gt; Inl_Rep\", but I can't seem to<br>\nfind where Abs_sum is defined.</p>\n<p>Thanks</p>\n<p>John</p>\n<blockquote>\n<p>Tim<br>\n&lt;&gt;&lt;<br>\n-----BEGIN PGP SIGNATURE-----<br>\nVersion: GnuPG v1.4.10 (GNU/Linux)<br>\nComment: Using GnuPG with Mozilla - <a href=\"http://enigmail.mozdev.org/\">http://enigmail.mozdev.org/</a></p>\n<p>iEYEARECAAYFAk5UZHMACgkQ/cBxZIxl6rmwnACfdWxXr+HPTl/8EOuAg0Y6j1Ai<br>\n378An1HvQucFMwMdkCUv4a+PtWuAXzbO<br>\n=Z7Ie<br>\n-----END PGP SIGNATURE-----<br>\n</p>\n</blockquote>",
        "id": 294142872,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660846469
    },
    {
        "content": "<p>From: Christian Sternagel &lt;<a href=\"mailto:christian.sternagel@uibk.ac.at\">christian.sternagel@uibk.ac.at</a>&gt;<br>\n(sorry for multiple copies)<br>\nHi there,</p>\n<p>I would refrain from going into the \"implementation\" level of the sum <br>\ntype (Abs_sum, Inl_rep) and just use pattern matching.</p>\n<p>The type A + B represents a type that incorporates values of type A <br>\n/and/ values of type B. Since we are in a strongly typed setting we need <br>\na new type for this, which is essentially an algebraic datatype <br>\ndefinable by (also the internal construction is different, I think)</p>\n<p>datatype 'a + 'b = Inl 'a | Inr 'b</p>\n<p>here the Inl and Inr are the left and right injections. To extract <br>\nvalues you can just use pattern matching.</p>\n<p>fun is_Inl where<br>\n   is_Inl (Inl _) = True\"<br>\n| is_Inl (Inr _) = False\"</p>\n<p>Hope this helps.</p>\n<p>cheers</p>\n<p>chris</p>",
        "id": 294142889,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660846479
    },
    {
        "content": "<p>From: John Munroe &lt;<a href=\"mailto:munddr@gmail.com\">munddr@gmail.com</a>&gt;<br>\nThanks for the reply. I've just tested</p>\n<p>datatype 'a + 'b = Inl 'a | Inr 'b</p>\n<p>but it complains about</p>\n<p>*** Outer syntax error: name declaration expected,<br>\n*** but keyword + was found</p>\n<p>It works if I instead have</p>\n<p>datatype ('a, 'b) sum = Inl 'a | Inr 'b</p>\n<p>Should this produce the same effect?</p>\n<p>Using your is_Inl function, how should I then test that if a constant<br>\nis of the type A, then is_Inl returns True? is_Inl takes an input of<br>\ntype 'a + 'b (or ('a,'b) sum, in my case), so how do I supply a<br>\nconstant of type A?</p>\n<p>Thanks</p>\n<p>John</p>",
        "id": 294142896,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660846482
    },
    {
        "content": "<p>From: John Munroe &lt;<a href=\"mailto:munddr@gmail.com\">munddr@gmail.com</a>&gt;<br>\nOK. I suspect I'm doing something wrong here, but here's what I have:</p>\n<p>typedecl A<br>\ntypedecl B<br>\ndatatype ('a, 'b) sum = Inl 'a | Inr 'b</p>\n<p>fun is_Inl where<br>\n  is1: \"is_Inl (Inl _) = True\"<br>\n| is2: \"is_Inl (Inr _) = False\"</p>\n<p>axiomatization<br>\ninst_parent_type :: \"(A,B) sum\" and<br>\ninst_child_type :: A<br>\nwhere<br>\nax1: \"Inl inst_child_type = inst_parent_type\"</p>\n<p>lemma \"is_Inl inst_parent_type\"<br>\napply (simp add: is1 ax1)</p>\n<p>I'm guessing that the lemma tests whether the type of<br>\n'inst_parent_type', i.e. (A,B) sum, has a left injection, i.e. whether<br>\nthere exists an instance of the \"left\" child type. Axiom ax1 asserts<br>\nthat 'inst_child_type' is the left injection. So, should the lemma be<br>\nprovable?</p>\n<p>This approach is supposed to imitate subtyping, but it seems to<br>\nrequire that an instance of the \"parent type\" to be constructed in<br>\norder to do any reasoning about subtypes. If I'm right, then it's<br>\nsomewhat more restrictive because such an instance must be first<br>\nassumed to exist.</p>\n<p>Any clarification on this will be much appreciated!</p>\n<p>Thanks</p>\n<p>John</p>",
        "id": 294142906,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660846488
    },
    {
        "content": "<p>From: \"Tim (McKenzie) Makarios\" &lt;<a href=\"mailto:tjm1983@gmail.com\">tjm1983@gmail.com</a>&gt;<br>\n-----BEGIN PGP SIGNED MESSAGE-----<br>\nHash: SHA1</p>\n<p>On 25/08/11 06:08, John Munroe wrote:</p>\n<blockquote>\n<p>OK. I suspect I'm doing something wrong here, but here's what I have:</p>\n<p>typedecl A<br>\ntypedecl B<br>\ndatatype ('a, 'b) sum = Inl 'a | Inr 'b</p>\n<p>fun is_Inl where<br>\n  is1: \"is_Inl (Inl _) = True\"<br>\n| is2: \"is_Inl (Inr _) = False\"</p>\n<p>axiomatization<br>\ninst_parent_type :: \"(A,B) sum\" and<br>\ninst_child_type :: A<br>\nwhere<br>\nax1: \"Inl inst_child_type = inst_parent_type\"</p>\n<p>lemma \"is_Inl inst_parent_type\"<br>\napply (simp add: is1 ax1)</p>\n<p>I'm guessing that the lemma tests whether the type of<br>\n'inst_parent_type', i.e. (A,B) sum, has a left injection, i.e. whether<br>\nthere exists an instance of the \"left\" child type. Axiom ax1 asserts<br>\nthat 'inst_child_type' is the left injection. So, should the lemma be<br>\nprovable?</p>\n</blockquote>\n<p>The lemma asserts that inst_parent_type is of the form \"Inl a\" for some<br>\na.  It is provable \"by (simp add: ax1 [symmetric])\".</p>\n<blockquote>\n<p>This approach is supposed to imitate subtyping, but it seems to<br>\nrequire that an instance of the \"parent type\" to be constructed in<br>\norder to do any reasoning about subtypes. If I'm right, then it's<br>\nsomewhat more restrictive because such an instance must be first<br>\nassumed to exist.</p>\n</blockquote>\n<p>You don't need to assume anything.  Whenever you've got an element a of<br>\ntype 'a, you've got a corresponding element \"Inl a\" of type \"'a + 'b\";<br>\nyou don't need to assume this.</p>\n<p>Given any element c of type \"'a + 'b\", there is either</p>\n<ul>\n<li>\n<ul>\n<li>exactly one element a of type 'a such that \"c = Inl a\" or</li>\n</ul>\n</li>\n<li>\n<ul>\n<li>exactly one element b of type 'b such that \"c = Inr b\"<br>\nbut not both.  is_Inl tells you whether or not it's the first of these<br>\ntwo possibilities.</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>Any clarification on this will be much appreciated!</p>\n<p>Thanks</p>\n<p>John</p>\n</blockquote>\n<p>I hope this has helped.</p>\n<p>Tim<br>\n&lt;&gt;&lt;<br>\n-----BEGIN PGP SIGNATURE-----<br>\nVersion: GnuPG v1.4.10 (GNU/Linux)<br>\nComment: Using GnuPG with Mozilla - <a href=\"http://enigmail.mozdev.org/\">http://enigmail.mozdev.org/</a></p>\n<p>iEYEARECAAYFAk5VnL4ACgkQ/cBxZIxl6rmpnACfZY9urcaOfhUhfzBxJJ9ip+B3<br>\nKv0AoNc9v9xGgMurYt6dez55S2rFCJIQ<br>\n=EjHt<br>\n-----END PGP SIGNATURE-----</p>",
        "id": 294142949,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660846501
    },
    {
        "content": "<p>From: John Munroe &lt;<a href=\"mailto:munddr@gmail.com\">munddr@gmail.com</a>&gt;<br>\nThanks so much. It surely has been helpful!</p>\n<p>One thing though: I can't define the datatype \"'a + 'b\" with</p>\n<p>datatype 'a + 'b = Inl 'a | Inr 'b</p>\n<p>It doesn't seem to like the '+' operator. Is using \"datatype ('a,'b)<br>\nsum\" the only way? (I see that it doesn't have to be 'sum' but any<br>\narbitrary name seems to do.)</p>\n<p>Also, is the approach of using sum type more appropriate than<br>\noverloading for my application? Would overloading allow the same<br>\neffect to be produced, i.e. defining a function that gives True only<br>\nif the input is of a particular type?</p>\n<p>Thanks again.</p>\n<p>John</p>",
        "id": 294142984,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660846512
    },
    {
        "content": "<p>From: \"Tim (McKenzie) Makarios\" &lt;<a href=\"mailto:tjm1983@gmail.com\">tjm1983@gmail.com</a>&gt;<br>\n-----BEGIN PGP SIGNED MESSAGE-----<br>\nHash: SHA1</p>\n<p>On 25/08/11 13:07, John Munroe wrote:</p>\n<blockquote>\n<p>Thanks so much. It surely has been helpful!</p>\n<p>One thing though: I can't define the datatype \"'a + 'b\" with</p>\n<p>datatype 'a + 'b = Inl 'a | Inr 'b</p>\n<p>It doesn't seem to like the '+' operator. Is using \"datatype ('a,'b)<br>\nsum\" the only way? (I see that it doesn't have to be 'sum' but any<br>\narbitrary name seems to do.)</p>\n</blockquote>\n<p>I don't think you need to define it.  I'm pretty sure everything I said<br>\nis true of the built-in sum type.  However, Christian's suggestion of<br>\nhow it could be defined is useful to help understand how it works.  If<br>\nyou use the built-in sum type, you can still define is_Inl as Christian<br>\nsuggested (a way I have little experience with), or you can define it<br>\nlike this:</p>\n<p>definition is_Inl :: \"'a + 'b =&gt; bool\" where<br>\n  \"is_Inl x == \\&lt;exists&gt; a. x = Inl a\"</p>\n<blockquote>\n<p>Also, is the approach of using sum type more appropriate than<br>\noverloading for my application? Would overloading allow the same<br>\neffect to be produced, i.e. defining a function that gives True only<br>\nif the input is of a particular type?</p>\n</blockquote>\n<p>I don't have much experience with overloading, so I might let someone<br>\nelse answer this.  But their answer might depend on what your intended<br>\napplication really is --- what do you want to use this for?</p>\n<p>Tim<br>\n&lt;&gt;&lt;<br>\n-----BEGIN PGP SIGNATURE-----<br>\nVersion: GnuPG v1.4.10 (GNU/Linux)<br>\nComment: Using GnuPG with Mozilla - <a href=\"http://enigmail.mozdev.org/\">http://enigmail.mozdev.org/</a></p>\n<p>iEYEARECAAYFAk5VrDcACgkQ/cBxZIxl6rmq5QCcD0zBV6lXqzOkUHQETFj+3Y/4<br>\nuPoAoMXhC6dyoX+E9R+E7ehjtcLNr09A<br>\n=wgW0<br>\n-----END PGP SIGNATURE-----</p>",
        "id": 294142991,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660846518
    }
]