[
    {
        "content": "<p>From: Rustom Mody &lt;<a href=\"mailto:rustompmody@gmail.com\">rustompmody@gmail.com</a>&gt;<br>\nThanks Harry</p>\n<p>On Wed, Oct 21, 2015 at 2:11 PM, Harry Butterworth &lt;<a href=\"mailto:heb1001@gmail.com\">heb1001@gmail.com</a>&gt;<br>\nwrote:</p>\n<blockquote>\n<p>Your star is the wrong star character.  Maybe you have cut and pasted from<br>\na pdf document.  That doesn't work.</p>\n<p>Yeah I started with<br>\n<a href=\"https://www.lri.fr/~wenzel/Isabelle_Paris_2014/slides.pdf\">https://www.lri.fr/~wenzel/Isabelle_Paris_2014/slides.pdf</a><br>\nAnd was looking for a source/thy version of that...</p>\n</blockquote>\n<blockquote>\n<p>With the version below...</p>\n<p>theory sum<br>\nimports Main<br>\nbegin</p>\n<p>theorem<br>\nfixes n::nat<br>\nshows \"(∑ i =0.. n . i ) = n * ( n + 1) div 2\"</p>\n<p>...I get the output</p>\n<p>proof (prove): depth 0</p>\n<p>goal (1 subgoal):<br>\n 1. ∑{0..n} = n * (n + 1) div 2</p>\n<p>Harry<br>\n</p>\n</blockquote>\n<p>My current thy file is attached.<br>\nIt has about a dozen 'red-marks'  :-)<br>\n<a href=\"/user_uploads/14278/wV_h5yZhKhteZPSDLlcttLYl/sum.thy\">sum.thy</a></p>",
        "id": 294655622,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661167914
    },
    {
        "content": "<p>From: Harry Butterworth &lt;<a href=\"mailto:heb1001@gmail.com\">heb1001@gmail.com</a>&gt;<br>\nHere you go...</p>\n<p>theory sum<br>\nimports Main<br>\nbegin<br>\ntheorem<br>\nfixes n :: nat<br>\nshows \"(\\&lt;Sum&gt; i =0.. n . i ) = n * ( n + 1) div 2\"<br>\nproof ( induct n )<br>\ncase 0<br>\nhave \"(\\&lt;Sum&gt; i =0..0. i ) = (0:: nat )\" by simp<br>\nalso have \"… = 0 * (0 + 1) div 2\" by simp<br>\nfinally show ?case .<br>\nnext<br>\ncase ( Suc n )<br>\nhave \"(\\&lt;Sum&gt; i =0.. Suc n . i ) = (\\&lt;Sum&gt; i =0.. n . i ) + ( n + 1)\" by<br>\nsimp<br>\nalso have \"… = n * ( n + 1) div 2 + ( n + 1)\" by ( simp add : Suc.hyps )<br>\nalso have \"… = ( n * ( n + 1) + 2 * ( n + 1)) div 2\" by simp<br>\nalso have \"… = ( Suc n * ( Suc n + 1)) div 2\" by simp<br>\nfinally show ?case .<br>\nqed</p>",
        "id": 294655626,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661167916
    },
    {
        "content": "<p>From: Rustom Mody &lt;<a href=\"mailto:rustompmody@gmail.com\">rustompmody@gmail.com</a>&gt;<br>\nThanks Harry!</p>",
        "id": 294655644,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661167922
    },
    {
        "content": "<p>From: Rustom Mody &lt;<a href=\"mailto:rustompmody@gmail.com\">rustompmody@gmail.com</a>&gt;<br>\nOn Wed, Oct 21, 2015 at 3:50 PM, Rustom Mody &lt;<a href=\"mailto:rustompmody@gmail.com\">rustompmody@gmail.com</a>&gt; wrote:</p>\n<blockquote>\n<p>On Wed, Oct 21, 2015 at 3:01 PM, Harry Butterworth &lt;<a href=\"mailto:heb1001@gmail.com\">heb1001@gmail.com</a>&gt;<br>\nwrote:</p>\n<blockquote>\n<p>Here you go...<br>\n</p>\n</blockquote>\n<p>Thanks Harry!<br>\n</p>\n</blockquote>\n<p>Tried another small example</p>\n<blockquote>\n<p>From <a href=\"http://www4.in.tum.de/~wenzelm/papers/Calculations-Isar.pdf\">http://www4.in.tum.de/~wenzelm/papers/Calculations-Isar.pdf</a><br>\nI managed to copy-paste and remove all red-marks :-)<br>\n[thy file below]</p>\n</blockquote>\n<p>So now a more basic question<br>\nHow do I know that the proof is done?</p>\n<p>In more detail<br>\nCursor on \"finally\", output window shows:</p>\n<p>proof (chain): depth 0</p>\n<p>picking this:<br>\n  ⋃{X, Y, {}} = ⋃{X, Y}<br>\ncalculation: ⋃{X, Y, {}} = ⋃{X, Y}</p>\n<p>Cursor on \"qed\" output window shows:</p>\n<p>theorem ⋃{?X, ?Y, {}} = ⋃{?X, ?Y}</p>\n<p>Looks quite arcane to me and nothing quite says \"Proved!\"</p>\n<p>So where/how do I know this proof is successful?</p>\n<p>----------------------- union.thy --------------<br>\ntheory union<br>\nimports Main<br>\nbegin<br>\ntheorem \"\\&lt;Union&gt;{X , Y , {}} = \\&lt;Union&gt;{X , Y }\"<br>\nproof -<br>\nhave \"\\&lt;Union&gt;{X , Y , {}} = \\&lt;Union&gt;({X , Y } \\&lt;union&gt; {{}})\" by auto<br>\nalso have \"... = \\&lt;Union&gt;{X , Y } \\&lt;union&gt; \\&lt;Union&gt;{{}}\" by auto<br>\nalso have \"... = \\&lt;Union&gt;{X , Y } \\&lt;union&gt; {}\" by auto<br>\nalso have \"... = \\&lt;Union&gt;{X , Y }\" by auto</p>\n<p>finally show \"\\&lt;Union&gt;{X , Y , {}} = \\&lt;Union&gt;{X , Y }\" .<br>\nqed</p>",
        "id": 294655747,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661167947
    },
    {
        "content": "<p>From: Lars Hupel &lt;<a href=\"mailto:hupel@in.tum.de\">hupel@in.tum.de</a>&gt;</p>\n<blockquote>\n<p>So now a more basic question<br>\nHow do I know that the proof is done?</p>\n</blockquote>\n<p>You know that if the system is done processing and doesn't complain<br>\n(i.e. nothing is highlighted in whatever color or underlined in red).<br>\nThere's also the possibility to check a theory in \"batch mode\" outside<br>\nof the editor. In Isabelle terminology, this is called \"building a<br>\nsession\". Refer to §2 in the system manual for details. A simple example<br>\nfor your theory would be to create a file \"ROOT\" with the following<br>\ncontents:</p>\n<p>session Your_Session_Name = HOL +<br>\n  theories<br>\n    Your_Theory_Name</p>\n<p>... and then invoking \"isabelle build -v -D .\" in that directory.</p>\n<p>Cheers<br>\nLars</p>",
        "id": 294655765,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661167953
    },
    {
        "content": "<p>From: Peter Lammich &lt;<a href=\"mailto:lammich@in.tum.de\">lammich@in.tum.de</a>&gt;<br>\nA theorem is proved, if you finish its proof (by qed or done).<br>\nIsabelle outputting \"theorem\" means that it is a proved theorem.</p>\n<p>If you give the theorem a name, you can also use the command<br>\n  thm name<br>\nto display the theorem later.</p>\n<p>However, be careful with the asynchronous processing of the prover IDE:<br>\n  Only if there are no errors in the theories before your theory (check<br>\nthe \"Theories\"-panel), you have really proven the theorem. Otherwise, it<br>\nmight depend on unproven stuff! E.g.</p>\n<p>lemma f: False by simp  -- \"There will be an error here, but False<br>\nwill be registered by name f anyway!\"</p>\n<p>theorem \"1=2\" using f by simp<br>\n    -- \"This outputs: theorem 1=2, and, locally, you cannot distinguish<br>\nthat from a valid proof\"</p>\n<p>To be sure that a theory is valid, without having to inspect the open<br>\ntheories for errors (which gets cumbersome for large developments, even<br>\nusing the theories panel), you have to use the batch-build mode of<br>\nIsabelle.</p>\n<p>So, summarized, to develop your own theories, you use the IDE. To verify<br>\ntheories of others, you should use batch-build, which also excludes<br>\ncheating by the sorry-command.</p>",
        "id": 294655778,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661167959
    },
    {
        "content": "<p>From: Rustom Mody &lt;<a href=\"mailto:rustompmody@gmail.com\">rustompmody@gmail.com</a>&gt;<br>\nIn paper <a href=\"https://www.lri.fr/~wenzel/Isabelle_Paris_2014/slides.pdf\">https://www.lri.fr/~wenzel/Isabelle_Paris_2014/slides.pdf</a><br>\nthere is the example of sum of first n integers.</p>\n<p>Quite stuck at 'outer/inner' syntax errors.<br>\nIs there somewhere I can find the full example so that I can study it?</p>\n<p>Also:<br>\nSpent some hours figuring out what is 'sorry'<br>\nWhich manual answers such questions?</p>\n<p>Finally if there is a more noob-list than this one please let me know!</p>",
        "id": 294658122,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661168883
    },
    {
        "content": "<p>From: Lars Noschinski &lt;<a href=\"mailto:noschinl@in.tum.de\">noschinl@in.tum.de</a>&gt;<br>\nOn 21.10.2015 06:06, Rustom Mody wrote:</p>\n<blockquote>\n<p>In paper <a href=\"https://www.lri.fr/~wenzel/Isabelle_Paris_2014/slides.pdf\">https://www.lri.fr/~wenzel/Isabelle_Paris_2014/slides.pdf</a><br>\nthere is the example of sum of first n integers.</p>\n<p>Quite stuck at 'outer/inner' syntax errors.<br>\nIs there somewhere I can find the full example so that I can study it?</p>\n</blockquote>\n<p>It is customary to omit the quotation marks (\"), when type-setting<br>\nIsabelle theories -- these need to surround every (non-atomic)<br>\nexpression of the inner syntax.</p>\n<p>Refering to slide 24 of the above document, \"inner syntax\" is everything<br>\nprinted in cursive, except the proofs (which are proceeded by \"by\").</p>\n<p>For starting, I would recommend to look at \"Programming and Proving in<br>\nIsabelle/HOL\".</p>\n<blockquote>\n<p>Also:<br>\nSpent some hours figuring out what is 'sorry'<br>\nWhich manual answers such questions?</p>\n</blockquote>\n<p>The Isabelle/Isar Reference Manual (look at the index at the end of the<br>\ndocument). Be warned that this is a reference manual -- if you do not<br>\nalready understand how the system works, many explanations are hard to<br>\nunderstand.</p>\n<blockquote>\n<p>Finally if there is a more noob-list than this one please let me know!</p>\n</blockquote>\n<p>No, this is the right list.</p>\n<p>-- Lars</p>",
        "id": 294658148,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661168886
    },
    {
        "content": "<p>From: Rustom Mody &lt;<a href=\"mailto:rustompmody@gmail.com\">rustompmody@gmail.com</a>&gt;<br>\nThanks Lars!</p>\n<p>On Wed, Oct 21, 2015 at 11:14 AM, Lars Noschinski &lt;<a href=\"mailto:noschinl@in.tum.de\">noschinl@in.tum.de</a>&gt;<br>\nwrote:</p>\n<blockquote>\n<p>On 21.10.2015 06:06, Rustom Mody wrote:</p>\n<blockquote>\n<p>In paper <a href=\"https://www.lri.fr/~wenzel/Isabelle_Paris_2014/slides.pdf\">https://www.lri.fr/~wenzel/Isabelle_Paris_2014/slides.pdf</a><br>\nthere is the example of sum of first n integers.</p>\n<p>Quite stuck at 'outer/inner' syntax errors.<br>\nIs there somewhere I can find the full example so that I can study it?</p>\n</blockquote>\n<p>It is customary to omit the quotation marks (\"), when type-setting<br>\nIsabelle theories -- these need to surround every (non-atomic)<br>\nexpression of the inner syntax.<br>\n</p>\n</blockquote>\n<p>Maybe so<br>\nBut I think I am stuck on something much more preliminary</p>\n<p>The example starts with</p>\n<p>theorem<br>\nfixes \"n :: nat\"<br>\nshows \"(∑ i =0.. n . i ) = n ∗ ( n + 1) div 2\"<br>\netc</p>\n<p>[assuming that's how the quotes should be put</p>\n<p>But it looks that Isabelle (or should I be saying Isar?) wants some prefix<br>\nlike</p>\n<p>theory sum<br>\nimports Main<br>\nbegin</p>\n<p>which gives the following at theorem</p>\n<p>Outer syntax error⌂: proposition expected,<br>\nbut keyword (⌂ was found</p>\n<blockquote>\n<p>Refering to slide 24 of the above document, \"inner syntax\" is everything<br>\nprinted in cursive, except the proofs (which are proceeded by \"by\").</p>\n<p>For starting, I would recommend to look at \"Programming and Proving in<br>\nIsabelle/HOL\".</p>\n<blockquote>\n<p>Also:<br>\nSpent some hours figuring out what is 'sorry'<br>\nWhich manual answers such questions?</p>\n</blockquote>\n<p>The Isabelle/Isar Reference Manual (look at the index at the end of the<br>\ndocument). Be warned that this is a reference manual -- if you do not<br>\nalready understand how the system works, many explanations are hard to<br>\nunderstand.</p>\n<blockquote>\n<p>Finally if there is a more noob-list than this one please let me know!</p>\n</blockquote>\n<p>No, this is the right list.<br>\n</p>\n</blockquote>\n<p>Good to know!</p>",
        "id": 294658171,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661168892
    },
    {
        "content": "<p>From: Harry Butterworth &lt;<a href=\"mailto:heb1001@gmail.com\">heb1001@gmail.com</a>&gt;<br>\nYour star is the wrong star character.  Maybe you have cut and pasted from<br>\na pdf document.  That doesn't work.</p>\n<p>With the version below...</p>\n<p>theory sum<br>\nimports Main<br>\nbegin</p>\n<p>theorem<br>\nfixes n::nat<br>\nshows \"(∑ i =0.. n . i ) = n * ( n + 1) div 2\"</p>\n<p>...I get the output</p>\n<p>proof (prove): depth 0</p>\n<p>goal (1 subgoal):</p>\n<ol>\n<li>∑{0..n} = n * (n + 1) div 2</li>\n</ol>\n<p>Harry</p>",
        "id": 294658188,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661168898
    }
]