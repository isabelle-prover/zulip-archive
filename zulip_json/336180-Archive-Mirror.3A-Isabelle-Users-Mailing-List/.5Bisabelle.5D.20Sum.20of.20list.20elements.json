[
    {
        "content": "<p>From: Etienne Mabille &lt;<a href=\"mailto:Etienne.Mabille@onera.fr\">Etienne.Mabille@onera.fr</a>&gt;<br>\nHello,</p>\n<p>I am having a problem on the exercise 1.8 Sum of list elements, tail <br>\nrecursively at <a href=\"http://isabelle.in.tum.de/exercises/\">http://isabelle.in.tum.de/exercises/</a><br>\nI have the same functions as in the solution :</p>\n<p>primrec  ListSum :: \"nat list \\&lt;Rightarrow&gt; nat\" where<br>\n   \"ListSum [] = 0\"<br>\n| \"ListSum (n#ns) = n + (ListSum ns)\"</p>\n<p>primrec ListSumTAux :: \"nat list \\&lt;Rightarrow&gt; nat \\&lt;Rightarrow&gt; nat\" <br>\nwhere<br>\n   \"ListSumTAux [] n = n\"<br>\n| \"ListSumTAux (x#xs) n = ListSumTAux xs (x + n)\"</p>\n<p>definition ListSumT :: \"nat list \\&lt;Rightarrow&gt; nat\" where<br>\n\"ListSumT xs \\&lt;equiv&gt; ListSumTAux xs 0\"</p>\n<p>(* I tried to prove the following lemma, but couldn't. *)</p>\n<p>lemma switch_ListSumTAux: \"\\&lt;forall&gt;x y. (x + ListSumTAux xs y) = <br>\nListSumTAux xs (x+y)\"<br>\napply (induct_tac xs)<br>\napply auto<br>\ndone</p>\n<p>(* So I looked in the solution and found that if you try to prove it <br>\nthe other way around it works... *)</p>\n<p>lemma switch_ListSumTAux: \"\\&lt;forall&gt;x y. ListSumTAux xs (x+y) = (x + <br>\nListSumTAux xs y)\"<br>\napply (induct_tac xs)<br>\napply auto<br>\ndone</p>\n<p>Does anyone know why ?<br>\nThank you for your help, best regards</p>\n<p>Etienne</p>",
        "id": 294155842,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660851166
    },
    {
        "content": "<p>From: Lars Noschinski &lt;<a href=\"mailto:noschinl@in.tum.de\">noschinl@in.tum.de</a>&gt;<br>\nOn 12.04.2012 10:04, Etienne Mabille wrote:</p>\n<blockquote>\n<p>primrec ListSumTAux :: \"nat list \\&lt;Rightarrow&gt; nat \\&lt;Rightarrow&gt; nat\" where<br>\n\"ListSumTAux [] n = n\"<br>\n| \"ListSumTAux (x#xs) n = ListSumTAux xs (x + n)\"<br>\n[...]<br>\n(* I tried to prove the following lemma, but couldn't. *)</p>\n<p>lemma switch_ListSumTAux: \"\\&lt;forall&gt;x y. (x + ListSumTAux xs y) =<br>\nListSumTAux xs (x+y)\"<br>\napply (induct_tac xs)<br>\napply auto</p>\n</blockquote>\n<p>Basically, you are left to show</p>\n<p>∀x y. ListSumTAux list (x + (a + y)) = ListSumTAux list (a + (x + y))</p>\n<p>here. This is trivial, if \"x + (a + y)\" and \"a + (x + y)\" can be <br>\nrewritten to the same normal form. You can do this by adding ac_simps <br>\n(AC = associativity, commutativity) to the simpset:</p>\n<p>apply (auto simp: ac_simps)</p>\n<blockquote>\n<p>done</p>\n</blockquote>\n<p>ac_simps (and its companions algebra_simps and field_simps) are very <br>\nuseful for normalizing arithmetic goals.</p>\n<blockquote>\n<p>(* So I looked in the solution and found that if you try to prove it the<br>\nother way around it works... *)</p>\n<p>lemma switch_ListSumTAux: \"\\&lt;forall&gt;x y. ListSumTAux xs (x+y) = (x +<br>\nListSumTAux xs y)\"<br>\napply (induct_tac xs)</p>\n</blockquote>\n<p>To find out, how the simplifier solves this goal, it is useful to enable <br>\nthe simplifier trace:</p>\n<p>apply simp (* discharge the first goal *)<br>\n   using [[simp_trace]]<br>\n   apply simp</p>\n<p>As this lemma is stated the other way round, also the induction <br>\nhypothesis is the other way round, and the simplifier moves additions to <br>\nthe outside and you get an intermediate goal of the form:</p>\n<p>∀x y. a + (x + ListSumTAux list y) = x + (a + ListSumTAux list y)</p>\n<p>For goals with arithmetic operations on the toplevel, the simplifier has <br>\na number of specialized simplification procedures (simprocs), which try <br>\nto remove operands which occur on both sides:</p>\n<p>[1] Procedure \"Numeral_Simprocs.nateq_cancel_numerals\" produced <br>\nrewrite rule:<br>\n   a + (x + ListSumTAux list y) = x + (a + ListSumTAux list y) ≡ x + <br>\nListSumTAux list y = x + ListSumTAux list y</p>\n<p>(from the trace). Hence there is no need to explicitly add ac_simps to <br>\nthe simpset.</p>\n<p>-- Lars</p>",
        "id": 294155845,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660851168
    }
]