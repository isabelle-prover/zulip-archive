[
    {
        "content": "<p>From: Christoph LANGE &lt;<a href=\"mailto:math.semantic.web@gmail.com\">math.semantic.web@gmail.com</a>&gt;<br>\nDear Isabelle community,</p>\n<p>in a private conversation with Makarius I had asked the following<br>\nquestion, which I should rather share on this list:</p>\n<p>I wonder why Isabelle/jEdit does not support native Unicode input, but<br>\nonly uses Unicode for display?  Are there historical reasons, or is it a<br>\ndeliberate design choice?  Nowadays, where Unicode is widely supported,<br>\nthere are ways of directly entering a wide range of characters.  I<br>\nmapped, e.g., “ ” … – on keys of my keyboard, which is why I'm also<br>\nusing them in LaTeX.  Some people go further; consider e.g. the Neo<br>\nkeyboard layout <a href=\"http://www.neo-layout.org/\">http://www.neo-layout.org/</a> (for English see<br>\n<a href=\"http://en.wikipedia.org/wiki/Neo_keyboard_layout#Neo\">http://en.wikipedia.org/wiki/Neo_keyboard_layout#Neo</a>), which even has a<br>\nplane for mathematical symbols.</p>\n<p>Cheers,</p>\n<p>Christoph</p>",
        "id": 294235291,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660904514
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nOn Thu, 28 Feb 2013, Christoph LANGE wrote:</p>\n<blockquote>\n<p>I wonder why Isabelle/jEdit does not support native Unicode input, but <br>\nonly uses Unicode for display?</p>\n</blockquote>\n<p>Taking this question in isolation, it actually should work both for input <br>\nand display.  The prover sources are stored in a certain text format as <br>\nIsabelle \"symbols\", but that is treated as \"encoding\" by jEdit, so you <br>\nwill edit the text in UTF-16 of the JVM.  This is not fundamentally <br>\ndifferent from having external files in UTF-8, UTF-16, UTF-32 etc. all <br>\nrecoded to the UTF-16 of Java before editing it.</p>\n<p>It is up to the JVM, jEdit, or other input methods to produce such unicode <br>\nglyphs.  Copy-and-paste should also work as long as you stay within the <br>\nUnicode image of the prover sources.</p>\n<p>Just yesterday, I used this myself two times:</p>\n<p>* In one of the private mails to you, I made some Isar proofs that were <br>\ncopied from Isabelle/jEdit into the terminal where my mail client was <br>\nrunning.  This worked sometimes but not always: the combination of <br>\nterminal + alpine had sometimes problems coping with the multibyte UTF-8 <br>\nversion of the text, so in the end I was not 100% sure if you actually <br>\nreceived the proof in a way I had in mind.</p>\n<p>* Posting a small Isar proof on stackoverflow, via the same copy-paste <br>\ntechnique JVM -&gt; Firefox, it worked without problems.</p>\n<blockquote>\n<p>Nowadays, where Unicode is widely supported</p>\n</blockquote>\n<p>There is a long story behind that, some of it is discussed in my MKM 2011 <br>\npaper, see section 2.1 in <br>\n<a href=\"http://www4.in.tum.de/~wenzelm/papers/isabelle-doc.pdf\">http://www4.in.tum.de/~wenzelm/papers/isabelle-doc.pdf</a></p>\n<p>In short, I do not subscribe to the \"universality\" of Unicode, there are <br>\njust a bit too many problems with it.  The approach in Isabelle/Scala and <br>\nIsabelle/jEdit is to use it as \"poor man's mathematical rendering\" in the <br>\nfront-end -- so your funny keyboard should work with it after some <br>\nconvincing.  The prover itself is free from Unicode worries, and the <br>\nongoing evolution of the Unicode standards in the past decades.  Theory <br>\nsources are stored persistenly in a unicode-free manner, but it tolerates <br>\nnative UTF-8 to some extent.</p>\n<p>After the experience of struggling with the many faces of Unicode in the <br>\npast 3 years, I would go as far to say that an LCF-style prover should <br>\n<em>not</em> allow Unicode at its kernel.  There are just too many dangers of <br>\ngetting things utterly wrong (e.g. code-points being swapped or normalized <br>\naccording to strict rules of the standard, which are sometimes implemented <br>\nin this way or that way.)</p>\n<p>Makarius</p>",
        "id": 294236963,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660905206
    },
    {
        "content": "<p>From: Christoph LANGE &lt;<a href=\"mailto:math.semantic.web@gmail.com\">math.semantic.web@gmail.com</a>&gt;<br>\n2013-03-01 12:30 Makarius:</p>\n<blockquote>\n<p>On Thu, 28 Feb 2013, Christoph LANGE wrote:</p>\n<blockquote>\n<p>I wonder why Isabelle/jEdit does not support native Unicode input, but<br>\nonly uses Unicode for display?</p>\n</blockquote>\n<p>Taking this question in isolation, it actually should work both for<br>\ninput and display.</p>\n</blockquote>\n<p>Indeed it does.  I'm no longer sure how I came up with this question a<br>\nfew months back.  Maybe it didn't work in the 2012 version?  I don't<br>\nremember.</p>\n<blockquote>\n<p>The prover sources are stored in a certain text<br>\nformat as Isabelle \"symbols\", but that is treated as \"encoding\" by<br>\njEdit, so you will edit the text in UTF-16 of the JVM.  This is not<br>\nfundamentally different from having external files in UTF-8, UTF-16,<br>\nUTF-32 etc. all recoded to the UTF-16 of Java before editing it.</p>\n</blockquote>\n<p>Given all these different encodings I agree that it does not make sense<br>\nto arbitrarily choose one of them as the preferred one for *.thy files,<br>\nas this does not ensure that there won't be some text editor messing it<br>\nup, e.g. an editor that only supports UTF-8 and that assumes any file to<br>\nbe in UTF-8.</p>\n<p>Cheers,</p>\n<p>Christoph</p>",
        "id": 294237805,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660905556
    }
]