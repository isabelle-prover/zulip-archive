[
    {
        "content": "<p>From: Florian Haftmann &lt;<a href=\"mailto:florian.haftmann@informatik.tu-muenchen.de\">florian.haftmann@informatik.tu-muenchen.de</a>&gt;<br>\nWhen experimenting with lifting and transfer, I ran into situations<br>\nwhere transfer yields funny goal states.  I have distilled two prominent<br>\ncandidates into the attached theories.  The first one seems to me a<br>\nresult of erroneous backtracking in a tactic behind the transfer method.<br>\n For the second one, I am standing in the dark.</p>\n<p>Maybe experts on transfer can comment on this.</p>\n<p>Cheers,<br>\n    Florian<br>\n<a href=\"/user_uploads/14278/5yqLIfVBPSJnwZJAB8VYR02G/Transfer_Report.thy\">Transfer_Report.thy</a><br>\n<a href=\"/user_uploads/14278/Bx_RuD6Mrbob3zqfFynAeGmv/signature.asc\">signature.asc</a></p>",
        "id": 294231390,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660902659
    },
    {
        "content": "<p>From: Peter Lammich &lt;<a href=\"mailto:lammich@in.tum.de\">lammich@in.tum.de</a>&gt;<br>\nOn Do, 2013-01-31 at 10:58 +0100, Florian Haftmann wrote:</p>\n<blockquote>\n<p>When experimenting with lifting and transfer, I ran into situations<br>\nwhere transfer yields funny goal states.  I have distilled two prominent<br>\ncandidates into the attached theories.  The first one seems to me a<br>\nresult of erroneous backtracking in a tactic behind the transfer method.<br>\n For the second one, I am standing in the dark</p>\n</blockquote>\n<p>Not being an expert on the impl of transfer, the second one looks like<br>\nan artifact of a higher-order unification, where one intended a<br>\nfirst-order matching ...</p>\n<blockquote>\n<p>.</p>\n<p>Maybe experts on transfer can comment on this.</p>\n<p>Cheers,<br>\n  Florian<br>\n</p>\n</blockquote>",
        "id": 294231412,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660902670
    },
    {
        "content": "<p>From: Ondřej Kunčar &lt;<a href=\"mailto:kuncar@in.tum.de\">kuncar@in.tum.de</a>&gt;<br>\nHi Florian,</p>\n<p>Example 1:<br>\nyes, transfer backtracks: first uses later introduced matching transfer <br>\nrules and then it tries earlier introduced rules. So if you do this:</p>\n<p>lemma<br>\n   fixes m n q :: natural<br>\n   shows \"(m + n) * q = m * q + n * q\"<br>\napply transfer<br>\nback<br>\nback<br>\nback<br>\nback<br>\nback<br>\nback<br>\nback<br>\nback</p>\n<p>you get:</p>\n<p>1. ?a21 (λm. transfer_forall (λn. transfer_forall (λq. (m + n) * q = m </p>\n<ul>\n<li>\n<p>q + n * q)))</p>\n<ol start=\"2\">\n<li>Transfer.Rel (fun_rel (fun_rel cr_natural op ⟶) op =) ?a21 <br>\ntransfer_forall</li>\n</ol>\n</li>\n</ul>\n<p>The first goal is solved by simplifier by substituting (λa. True) for <br>\n?a21 and then you get the second goal to prove. That's the reason it <br>\ndoesn't fail because the simplifier did some progress.</p>\n<p>Example 2:<br>\nNo surprise. Transfer knows that the abstraction function natural_of_nat <br>\ntransfers to identity on the raw level (i.e., there is a transfer rule <br>\nfor this; the rule is proved in setup_lifting) but it doesn't know <br>\nanything about of_nat. Thut it transfers natural_of_nat to id and it <br>\ndoesn't do anything with of_nat. Because the types doesn't match it <br>\ncannot transfer equality to equality on the raw level and thus it asks <br>\nfor a rule saying what equality should be transferred to.</p>\n<p>If you prove a transfer rule for of_nat</p>\n<p>lemma [transfer_rule]:<br>\n\"(op= ===&gt; cr_natural) (of_nat::nat=&gt;nat) (of_nat::nat=&gt;natural)\"<br>\nunfolding of_nat_def[abs_def] by transfer_prover</p>\n<p>then you can finish your proof:</p>\n<p>lemma natural_of_nat_of_nat [simp]:<br>\n   \"natural_of_nat = of_nat\"<br>\n   by transfer auto</p>\n<p>I hope my answer helps.</p>\n<p>Ondrej</p>",
        "id": 294231483,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660902713
    },
    {
        "content": "<p>From: Ondřej Kunčar &lt;<a href=\"mailto:kuncar@in.tum.de\">kuncar@in.tum.de</a>&gt;<br>\njust a side remark:<br>\nThe type annotations are not necessary but I think they improve the <br>\nreadability.</p>\n<p>Ondrej</p>",
        "id": 294231490,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660902719
    }
]