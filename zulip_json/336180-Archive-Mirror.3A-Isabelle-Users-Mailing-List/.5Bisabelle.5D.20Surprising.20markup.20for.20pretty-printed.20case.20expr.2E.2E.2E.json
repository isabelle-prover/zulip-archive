[
    {
        "content": "<p>From: Lars Hupel &lt;<a href=\"mailto:hupel@in.tum.de\">hupel@in.tum.de</a>&gt;<br>\nDear list,</p>\n<p>I have this very simple function:</p>\n<p>fun rightUnitAppend'0 :: \"'T'00 list &#8658; bool\" where<br>\n  \"rightUnitAppend'0 (l1'00::'T'00 List.list) = (case l1'00 of [] =&gt; True<br>\n| (x'6::'T'00) # (x::'T'00 list) =&gt; rightUnitAppend'0 x)\"</p>\n<p>Now, if I look at the generated theorem:</p>\n<p>thm rightUnitAppend'0.simps</p>\n<p>... and hover over the \"x\", I get the markup</p>\n<p>:: ?'a list<br>\n  bound variable</p>\n<p>However, the markup for \"x'6\" is:</p>\n<p>:: ?'T'00.0<br>\n  bound variable</p>\n<p>Clearly, one of them is incorrect, because it should be either \"?'a\" or<br>\n\"?'T'00.0\" in both cases. This looks like a problem in the unchecking of<br>\ncase expressions, because when I look at the term representation:</p>\n<p>declare [[ML_print_depth=100]]</p>\n<p>MLThm.prop_of @{thm rightUnitAppend'0.simps}</p>\n<p>... all I get is \"?'T'00.0\", as expected. \"?'a\" is nowhere to be found.</p>\n<p>Cheers<br>\nLars</p>",
        "id": 294650019,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661165722
    },
    {
        "content": "<p>From: Dmitriy Traytel &lt;<a href=\"mailto:traytel@in.tum.de\">traytel@in.tum.de</a>&gt;<br>\nHi Lars,</p>\n<p>thanks for the report. Something indeed went wrong during uncheck. It <br>\nhas to do with eta contracted arguments to the case combinator and shows <br>\nalready at this minimized example:</p>\n<p>term \"case_list undefined (λx. f) (xs :: 't list)\"</p>\n<p>(I resist to comment on your choice of names in your example; I hope <br>\nthey are automatically generated ;-) )</p>\n<p>The uncheck phase has to eta expand before printing and picks the wrong <br>\ntypes from elsewhere. I have a local changeset to improve on that, which <br>\nI will test and push soon.</p>\n<p>BTW this was a nice opportunity for me to test the newly available <br>\nML_debugger (in the repository)---which is awesome! I could locate the <br>\nproblem and (hopefully) improve the situation without inserting a single <br>\nprint statement :-)</p>\n<p>Dmitriy</p>",
        "id": 294650069,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661165745
    }
]