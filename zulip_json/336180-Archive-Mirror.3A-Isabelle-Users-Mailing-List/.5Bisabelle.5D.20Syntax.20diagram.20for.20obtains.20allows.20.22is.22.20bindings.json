[
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nOn Thu, 9 Apr 2015, Andreas Lochbihler wrote:</p>\n<blockquote>\n<p>The syntax diagrams in the isar-ref manual (section 6.2.4) for obtains allow <br>\nis-bindings for the propositions in where clauses - at least that is how I <br>\nunderstand them. Unfortunately, I get syntax errors at \"(\" when I try to use <br>\nthem as in</p>\n<p>lemma obtains y ys where \"x = y # ys\" (is \"?foo y ys\")</p>\n<p>Apparently, the documentation and the system do not agree in this case. <br>\nAlso, the syntax diagram for \"case\" misses the possibility of not <br>\nbinding variables and omitting the where part.</p>\n</blockquote>\n<p>I will change the documentation to fit better to the implementation.</p>\n<blockquote>\n<p>PS: Two unanswered posts are related:<br>\nhttps: //lists.cam.ac.uk/pipermail/cl-isabelle-users/2011-November/msg00002.html <br>\nhttps: //lists.cam.ac.uk/mailman/htdig/cl-isabelle-users/2013-June/msg00050.html</p>\n</blockquote>\n<p>This is all about \"is\" within the hypothetical context of 'obtain' or <br>\n'obtains'.  It is in principle possible to get this right, but when these <br>\nelements where first implemented, many reforms of Isabelle syntax (parse, <br>\ncheck, term export) where not yet there.  Today it should probably work <br>\nout smoothly.</p>\n<p>For the past 5 releases or so, I always tried to re-open this can, but <br>\nnever got back to it on time.  The reason why it is both important and <br>\ndangerous to be revisited is that there are some fundamental improvements <br>\nin the pipeline that want to get out, but will take quite some efforts.<br>\nE.g. 'obtain' with multiple branches inside a proof, like 'obtains' <br>\nalready does for statements, and a notation for \"eigen contexts\" (like <br>\nthe sporadic 'for' declarations that have popped up here and there).</p>\n<p>Makarius</p>",
        "id": 294635198,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661159845
    },
    {
        "content": "<p>From: Andreas Lochbihler &lt;<a href=\"mailto:andreas.lochbihler@inf.ethz.ch\">andreas.lochbihler@inf.ethz.ch</a>&gt;<br>\nDear Isar experts,</p>\n<p>The syntax diagrams in the isar-ref manual (section 6.2.4) for obtains allow is-bindings <br>\nfor the propositions in where clauses - at least that is how I understand them. <br>\nUnfortunately, I get syntax errors at \"(\" when I try to use them as in</p>\n<p>lemma obtains y ys where \"x = y # ys\" (is \"?foo y ys\")</p>\n<p>Apparently, the documentation and the system do not agree in this case. Also, the syntax <br>\ndiagram for \"case\" misses the possibility of not binding variables and omitting the where <br>\npart.</p>\n<p>Best,<br>\nAndreas</p>\n<p>PS: Two unanswered posts are related:<br>\n<a href=\"https://lists.cam.ac.uk/pipermail/cl-isabelle-users/2011-November/msg00002.html\">https://lists.cam.ac.uk/pipermail/cl-isabelle-users/2011-November/msg00002.html</a><br>\n<a href=\"https://lists.cam.ac.uk/mailman/htdig/cl-isabelle-users/2013-June/msg00050.html\">https://lists.cam.ac.uk/mailman/htdig/cl-isabelle-users/2013-June/msg00050.html</a></p>",
        "id": 294638319,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661161072
    },
    {
        "content": "<p>From: Lars Hupel &lt;<a href=\"mailto:hupel@in.tum.de\">hupel@in.tum.de</a>&gt;<br>\nA quick look into the sources appears to corroborate your thesis. While<br>\npropositions following \"shows\", \"assumes\" and \"defines\" are parsed with<br>\n'Parse.propp', the ones following \"obtains\" are parsed with<br>\n'Parse.prop'. The former parses \"is\", the latter doesn't. Looking<br>\nthrough the history of 'parse_spec.ML' I can't find any evidence of it<br>\nbeing any different in the past.</p>\n<p>Cheers<br>\nLars<br>\n<a href=\"/user_uploads/14278/D2u8pjgjNmNk6J_enYCgBCyh/smime.p7s\">smime.p7s</a></p>",
        "id": 294638327,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661161078
    }
]