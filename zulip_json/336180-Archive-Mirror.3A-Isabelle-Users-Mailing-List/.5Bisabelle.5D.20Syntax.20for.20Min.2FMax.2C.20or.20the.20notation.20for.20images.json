[
    {
        "content": "<p>From: Lawrence Paulson &lt;<a href=\"mailto:lp15@cam.ac.uk\">lp15@cam.ac.uk</a>&gt;<br>\nI've noticed that Isabelle/HOL has no syntax for the minimum/maximum of a finite set. Or rather, while one can write Max {a i| i. i ∈ I}, such a set comprehension can translate into a complicated formula involving existential quantifiers, with the reasoning similarly complicated. Or one could instead use the image operator and write Max (a ` I).</p>\n<p>In fact (a ` I) = {a i| i. i ∈ I}, and a more general form of this result exists as the lemma setcompr_eq_image.</p>\n<p>Arguably what's needed here isn't special syntax for Min/Max but rather an alternative syntax for image, e.g. {a i. i ∈ I}. Are there any views?</p>\n<p>Larry Paulson</p>",
        "id": 294727482,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661186867
    },
    {
        "content": "<p>From: Peter Lammich &lt;<a href=\"mailto:lammich@in.tum.de\">lammich@in.tum.de</a>&gt;<br>\nOn Fr, 2018-02-16 at 16:14 +0000, Lawrence Paulson wrote:</p>\n<blockquote>\n<p>I've noticed that Isabelle/HOL has no syntax for the minimum/maximum<br>\nof a finite set. Or rather, while one can write Max {a i| i. i ∈ I},<br>\nsuch a set comprehension can translate into a complicated formula<br>\ninvolving existential quantifiers, with the reasoning similarly<br>\ncomplicated. Or one could instead use the image operator and write<br>\nMax (a ` I).</p>\n<p>In fact (a ` I) = {a i| i. i ∈ I}, and a more general form of this<br>\nresult exists as the lemma setcompr_eq_image.</p>\n<p>Arguably what's needed here isn't special syntax for Min/Max but<br>\nrather an alternative syntax for image, e.g. {a i. i ∈ I}. Are there<br>\nany views?</p>\n</blockquote>\n<p>Why not use the existing Syntax for INF/SUP ?</p>\n<p>term \"SUP x:X. f x\"</p>\n<p>i.e. one could declare syntax: <br>\n  MAX i:I. a i</p>\n<p>-- Peter</p>\n<blockquote>\n<p>Larry Paulson</p>\n</blockquote>",
        "id": 294727495,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661186873
    },
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\nI agree with Peter because the SUP syntax ultimately stands for \"a ` I\", which <br>\nis what you want (because it avoids the quantifier). It is a very natural syntax <br>\nand avoids inventing a new syntax for image.</p>\n<p>Tobias<br>\n<a href=\"/user_uploads/14278/odWA-1s9uJMeQcXnzN-wUgkH/smime.p7s\">smime.p7s</a></p>",
        "id": 294727655,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661186917
    },
    {
        "content": "<p>From: Joachim Breitner &lt;<a href=\"mailto:joachim@cis.upenn.edu\">joachim@cis.upenn.edu</a>&gt;<br>\nHi,</p>\n<p>I have, in the past, missed a concise quantifier-free syntax for set<br>\nimage, and would have wanted (expected, even?) something like</p>\n<p>{a i. i ∈ I}</p>\n<p>Cheers,<br>\nJoachim<br>\n<a href=\"/user_uploads/14278/Cb319O7D7ggSQcG85z80cQuj/signature.asc\">signature.asc</a></p>",
        "id": 294727674,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661186923
    },
    {
        "content": "<p>From: Julian &lt;<a href=\"mailto:parsert.julian@gmail.com\">parsert.julian@gmail.com</a>&gt;<br>\nHi,</p>\n<p>do you mean the same as {a i |i. i ∈ I}?</p>\n<p>Julian</p>",
        "id": 294727698,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661186932
    },
    {
        "content": "<p>From: Lawrence Paulson &lt;<a href=\"mailto:lp15@cam.ac.uk\">lp15@cam.ac.uk</a>&gt;<br>\nThis is logically equivalent to the image operator, but denotes something like {x. ∃i∈I. x = a i}, while “image” is a single constant.</p>\n<p>The advantage of introducing something like {a i. i ∈ I} is that we would have a uniform syntax for all future situations. E.g. the current (⋃x∈A. B x) could also be written ⋃{B x. x∈A}. </p>\n<p>Larry</p>",
        "id": 294727710,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661186938
    },
    {
        "content": "<p>From: Andreas Lochbihler &lt;<a href=\"mailto:mail@andreas-lochbihler.de\">mail@andreas-lochbihler.de</a>&gt;<br>\nThe map operation on multisets, image_mset, already uses the proposed syntax:</p>\n<p>{# a i. i :# M #} = image_mset (%i. a i) M</p>\n<p>So extending this syntax to ordinary sets would be just more uniform syntax. But how does <br>\nit interoperate with ordinary set comprehension? How do we want to distinguish the <br>\nfollowing two cases:</p>\n<p>{ i. i : M } = Collect (%i. i : M)</p>\n<p>vs.</p>\n<p>{ i. i : M } = image (%i. i) M</p>\n<p>Andreas</p>",
        "id": 294727727,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661186946
    },
    {
        "content": "<p>From: Dominique Unruh &lt;<a href=\"mailto:unruh@ut.ee\">unruh@ut.ee</a>&gt;<br>\nI wonder why there is an existential quantifier in the translation of the<br>\nset comprehension in the first place.<br>\nIf {a i | i. M} would translate to \"image a (Collect M)\", the awkward<br>\nexistential quantifier would be gone (I suppose that the simplifier can<br>\ndeal much more easily with \"image a\" than with the existential quantifier.)<br>\nFor example, {a i |i. i ∈ I} would translate to \"image a (Collect (%x.<br>\nx:I))\" which the simplifier can easily rewrite to \"image a I\".</p>\n<p>Of course, I also understand that changing this might introduce too many<br>\nbreaking changes in proofs.</p>\n<p>Best wishes,<br>\nDominique.</p>",
        "id": 294727739,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661186953
    },
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\nUsing a standard set-comprehension syntax for image is plain misleading and will <br>\ncreate more confusion (even if we manage to resolve the ambiguity that Andreas <br>\npointed out).</p>\n<p>Tobias<br>\n<a href=\"/user_uploads/14278/IMJAbO-CSfzbO599X4O64Dr4/smime.p7s\">smime.p7s</a></p>",
        "id": 294727757,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661186959
    },
    {
        "content": "<p>From: Lawrence Paulson &lt;<a href=\"mailto:lp15@cam.ac.uk\">lp15@cam.ac.uk</a>&gt;<br>\nWell, a strong argument against any fancy syntax for image is that it would be input-only. Image is just an ordinary infix operator and the user would see something like a`i instead of {a i. i ∈ I}.</p>\n<p>Users (especially beginners) should be aware that a general comprehension could give rise to a large formula. I frequently write expressions using nested unions instead. I don't know whether it really simplifies reasoning steps, but I find it clearer.</p>\n<p>Larry<br>\n<a href=\"/user_uploads/14278/kLlL5hSEjC_fV61L82s_lonI/signature.asc\">signature.asc</a></p>",
        "id": 294727856,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661186990
    },
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\nI can never make up my mind.<br>\nCode generation needs Unions, but that is orthogonal.</p>\n<p>Tobias<br>\n<a href=\"/user_uploads/14278/6_qcnNQ7w0G44j3PKQ3Weqc-/smime.p7s\">smime.p7s</a></p>",
        "id": 294727972,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661187014
    },
    {
        "content": "<p>From: Johannes Hölzl &lt;<a href=\"mailto:johannes.hoelzl@gmx.de\">johannes.hoelzl@gmx.de</a>&gt;<br>\nAnother option is to intruduce the applicative &lt;*&gt;</p>\n<p>(&lt;*&gt;) :: ('a =&gt; 'b) set =&gt; 'a set =&gt; 'b set</p>\n<p>F &lt;*&gt; A = { f a | f a. f : F &amp; a : A}</p>\n<p>This allows some nice point-free style:</p>\n<p>{(+)} &lt;<em>&gt; A &lt;</em>&gt; B   (or (+) ` A &lt;*&gt; B)</p>\n<p>But still gives nice rules, especially for finiteness, countability:</p>\n<p>finite A ==&gt; finite F ==&gt; finite (F &lt;*&gt; A)</p>\n<p>And it should work well with code generation.</p>\n<p>A counter point is that it is a very CS style notation and uncommon in<br>\nmathematics.</p>\n<ul>\n<li>Johannes</li>\n</ul>",
        "id": 294727992,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661187020
    },
    {
        "content": "<p>From: Lawrence Paulson &lt;<a href=\"mailto:lp15@cam.ac.uk\">lp15@cam.ac.uk</a>&gt;<br>\nI am returning to this old question, and thinking of doing as you suggest. But why does the HOL development (at the end of theory Main) hide part of this syntax?</p>\n<p>no_syntax<br>\n  \"_INF1\"     :: \"pttrns ⇒ 'b ⇒ 'b\"           (\"(3⨅_./ _)\" [0, 10] 10)<br>\n  \"_INF\"      :: \"pttrn ⇒ 'a set ⇒ 'b ⇒ 'b\"  (\"(3⨅_∈_./ _)\" [0, 0, 10] 10)<br>\n  \"_SUP1\"     :: \"pttrns ⇒ 'b ⇒ 'b\"           (\"(3⨆_./ _)\" [0, 10] 10)<br>\n  \"_SUP\"      :: \"pttrn ⇒ 'a set ⇒ 'b ⇒ 'b\"  (\"(3⨆_∈_./ _)\" [0, 0, 10] 10)</p>\n<p>Larry</p>",
        "id": 294730425,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661187812
    },
    {
        "content": "<p>From: Florian Haftmann &lt;<a href=\"mailto:florian.haftmann@informatik.tu-muenchen.de\">florian.haftmann@informatik.tu-muenchen.de</a>&gt;<br>\nDear Larry,</p>\n<p>the lattice syntax is not a default part of HOL-Main, hence it is<br>\nmanually reverted here and can included on demand importing theory<br>\nLibrary/Lattice_Syntax.thy.</p>\n<p>The reason is that there has always been some reluctance to fix that<br>\nsyntax with its extremely diverse applications to one particular set of<br>\noperations.</p>\n<p>I one thought to use syntax in bundles to make this more convenient, nut<br>\nthere are obstacles:</p>\n<ul>\n<li>\n<p>Lattice operations are introduced incrementally, but bundles are not<br>\nextensible; maybe that could be lifted by defining all syntactic<br>\noperations first, then defining the syntax bundle and then deriving the<br>\nlemmas.</p>\n</li>\n<li>\n<p>There is no way yet to include bundled syntax in text of global theory<br>\nlevel commands like \"class\".</p>\n</li>\n</ul>\n<p>Hope this helps,<br>\n    Florian<br>\n<a href=\"/user_uploads/14278/gpJcGRFHxbDVqF65KAJgXpGW/signature.asc\">signature.asc</a></p>",
        "id": 294730447,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661187824
    }
]