[
    {
        "content": "<p>From: Andreas Lochbihler &lt;<a href=\"mailto:lochbihl@infosun.fim.uni-passau.de\">lochbihl@infosun.fim.uni-passau.de</a>&gt;<br>\nHello all,</p>\n<p>I'm currently converting my old theories to the new syntax of the latest<br>\nIsabelle development snapshot.<br>\nIn doing so, I stumbled over the new inductive package which subsumes<br>\nthe set definition and the syntax translation in one step.</p>\n<p>However, in some cases, I have problems converting constants which<br>\nformerly were function to sets.<br>\nFor example,  if the old syntax read like this. In the syntax<br>\ntranslation, the order of the parameters is changed:</p>\n<p>(*<br>\nconsts p :: \"'a =&gt; 'b =&gt; nat =&gt; bool\"</p>\n<p>consts<br>\n  w :: \"'a =&gt; 'b =&gt; (nat * nat) set\"</p>\n<p>syntax<br>\n  w_syntax :: \"'a =&gt; nat =&gt; 'b =&gt; nat =&gt; bool\" -- define here some nice<br>\nsyntax</p>\n<p>translations<br>\n  \"w_syntax a c b d\" == \"(c, d) : w a b\"</p>\n<p>inductive \"w a b\"<br>\nintros<br>\n  \"p a b c ==&gt; w_syntax a c b 0\"</p>\n<p>\"w_syntax a (Suc c) b n ==&gt; w_syntax a c b (Suc n)\"<br>\n*)</p>\n<p>I then tried to convert this to the new syntax, but then Isabelle<br>\nresponds with an error message</p>\n<p>consts p :: \"'a =&gt; 'b =&gt; nat =&gt; bool\"</p>\n<p>inductive w :: \"'a =&gt; nat =&gt; 'b =&gt; nat =&gt; bool\"<br>\n  for a :: 'a and b :: 'b where</p>\n<p>\"p a b c =&gt; w a c b 0\"<br>\n|  \"w a (Suc c) b n =&gt; w a c b (Suc n)\"</p>\n<p>*** Ill-formed introduction rule \"\"<br>\n*** p a b c ==&gt; w a c b 0<br>\n*** Inductive predicate must be applied to parameter(s) a, b<br>\n*** At command \"inductive\".</p>\n<p>My workaround was to define the set w with type 'a =&gt; 'b =&gt; nat =&gt; nat<br>\n=&gt; bool (thereby rewriting every introduction rule to get rid of the<br>\nsyntax translation which is no longer available) and then to provide an<br>\nabbreviation which gives the original syntax back.<br>\nIs there any way I can use the order of parameters as given by the old<br>\nsyntax translation in the introduction rules for w?</p>\n<p>Regards,<br>\nAndreas Lochbihler</p>",
        "id": 294052587,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660820170
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nThere is a special add-on feature of the inductive package that allows to <br>\nmix the specification with abbreviations.  E.g. see <br>\nHOL/Bali/DeclConcepts.thy for the definition/abbreviation of <br>\naccessible_fromR etc.</p>\n<p>Makarius</p>",
        "id": 294052598,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660820176
    },
    {
        "content": "<p>From: Stefan Berghofer &lt;<a href=\"mailto:berghofe@in.tum.de\">berghofe@in.tum.de</a>&gt;<br>\nAndreas Lochbihler wrote:<br>\nThe new inductive command allows introduction rules to be specified<br>\nsimultaneously with abbreviations. All rules of the form \"... == ...\"<br>\noccurring after the \"where\" keyword are treated as abbreviations.<br>\nThe abbreviations are expanded automatically, so you can already<br>\nwrite the introduction rules using the desired syntax. In your<br>\nexample, this would look as follows:</p>\n<p>inductive<br>\n   w_syntax :: \"'a =&gt; nat =&gt; 'b =&gt; nat =&gt; bool\"<br>\n   and w :: \"'a =&gt; 'b =&gt; nat =&gt; nat =&gt; bool\"<br>\n   for a :: 'a and b :: 'b<br>\nwhere<br>\n   \"w_syntax a c b d == w a b c d\"<br>\n| \"p a b c ==&gt; w_syntax a c b 0\"<br>\n| \"w_syntax a (Suc c) b n ==&gt; w_syntax a c b (Suc n)\"</p>\n<p>Greetings,<br>\nStefan</p>",
        "id": 294052608,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660820182
    }
]