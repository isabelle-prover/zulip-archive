[
    {
        "content": "<p>From: Martina Seidl &lt;<a href=\"mailto:martina.seidl@jku.at\">martina.seidl@jku.at</a>&gt;</p>\n<hr>\n<p>*</p>\n<ul>\n<li>8th International Conference</li>\n<li>on</li>\n<li>\n<p>TESTS AND PROOFS (TAP 2014)\n*</p>\n</li>\n<li>\n<p><a href=\"http://www.tap2014.org\">http://www.tap2014.org</a></p>\n</li>\n<li>Co-located with STAF, York, UK, July 24-25, 2014\n*</li>\n</ul>\n<hr>\n<p>*</p>\n<ul>\n<li>\n<p>Call for Paper\n*</p>\n</li>\n<li>\n<p>Abstract submission: February 25, 2014</p>\n</li>\n<li>Paper submission:    March 1, 2014\n*</li>\n</ul>\n<hr>\n<p>Scope<br>\n=====</p>\n<p>The TAP conference is devoted to the synergy of proofs and tests,<br>\nto the application of techniques from both sides and their combination<br>\nfor the advancement of software quality.</p>\n<p>Testing and proving seem to be orthogonal techniques: once a program<br>\nhas been proven to be correct then additional testing seems<br>\npointless; however, when such a proof in not feasible, then<br>\ntesting the program seems to be the only option. This view<br>\nhas dominated the research community for a long time, and has<br>\nresulted in distinct communities pursuing the different<br>\nresearch areas.</p>\n<p>The development of both approaches has led to the discovery of<br>\ncommon issues and to the realization of potential synergy.<br>\nPerhaps, the use of model checking in testing was one of the<br>\nfirst signs that a counterexample to a proof may be interpreted<br>\nas a test case. Recent breakthroughs in deductive techniques<br>\nsuch as satisfiability modulo theories, abstract interpretation,<br>\nand interactive theorem proving, have paved the way for new and<br>\npractically effective methods of powering testing techniques.<br>\nMoreover, since formal, proof-based verification is costly,<br>\ntesting invariants and background theories can be helpful to<br>\ndetect errors early and to improve cost effectiveness. Summing up, in<br>\nthe past few years an increasing number of research efforts have<br>\nencountered the need for combining proofs and tests, dropping earlier<br>\ndogmatic views of incompatibility and taking instead the best of what<br>\neach of these software engineering domains has to offer.</p>\n<p>The TAP conference aims to bring together researchers and practitioners<br>\nworking in the converging fields of testing and proving by offering<br>\na generous forum for the presentation of ongoing research,<br>\nfor tutorials on established technologies and for informal discussions.</p>\n<p>Topics of Interest<br>\n==================</p>\n<p>Topics of interest cover theory definitions, tool constructions and<br>\nexperimentations, and include (other topics related to TAP are welcome):</p>\n<ul>\n<li>\n<p>Bridging the gap between concrete and symbolic techniques, e.g. using<br>\n   proof search in satisfiability modulo theories solvers to enhance<br>\n   various testing techniques</p>\n</li>\n<li>\n<p>Transfer of concepts from testing to proving (e.g., coverage criteria)<br>\n   and from proving to testing</p>\n</li>\n<li>\n<p>Program proving with the aid of testing techniques</p>\n</li>\n<li>Verification and testing techniques combining proofs and tests</li>\n<li>\n<p>Generation of test data, oracles, or preambles by deductive techniques<br>\n   such as: theorem proving, model checking, symbolic execution,<br>\n   constraint logic programming</p>\n</li>\n<li>\n<p>Model-based testing and verification</p>\n</li>\n<li>Generation of specifications by deduction</li>\n<li>Automatic bug finding</li>\n<li>Debugging of programs combining static and dynamic analysis</li>\n<li>Case studies combining tests and proofs</li>\n<li>\n<p>Domain specific applications of testing and proving to new application<br>\n   domains such as validating security protocols, vulnerability detection<br>\n   of programs, security</p>\n</li>\n<li>\n<p>Testing of verification environments and reasoning engines like solvers<br>\n   and theorem provers</p>\n</li>\n<li>\n<p>New approaches such as crowd-sourcing and serious games to<br>\n   infer intended semantics and assess correctness</p>\n</li>\n<li>\n<p>Formal frameworks</p>\n</li>\n<li>Tool descriptions and experience reports</li>\n</ul>\n<p>Important Dates:<br>\n================</p>\n<p>Abstract submission:   February 25, 2014<br>\nPaper submission:      March 1, 2014<br>\nNotification:          April 28, 2014<br>\nCamera ready version:  May 12, 2014<br>\nTAP conference:        July 24-25, 2014</p>\n<p>Keynot:<br>\n=======</p>\n<p>Finding Malware on a Web Scale by Ben Livshits</p>\n<p>Program Chairs:<br>\n===============</p>\n<p>Martina Seidl (JKU Linz/TU Wien, Austria)<br>\nNikolai Tillmann (Microsoft Research, USA)</p>\n<p>Program Committee:<br>\n==================</p>\n<p>Arnaud Gotlieb<br>\nDirk Beyer<br>\nAchim D. Brucker<br>\nRobert Clarisó<br>\nMarco Comini<br>\nCatherine Dubois<br>\nJuhan Ernits<br>\nGordon Fraser<br>\nAngelo Gargantini<br>\nChristoph Gladisch<br>\nMartin Gogolla<br>\nReiner Hähnle<br>\nBart Jacobs<br>\nThierry Jéron<br>\nJacques Julliand<br>\nGregory Kapfhammer<br>\nNikolai Kosmatov<br>\nVictor Kuliamin<br>\nKarl Meinke<br>\nAlexandre Petrenko<br>\nHolger Schlingloff<br>\nMartina Seidl<br>\nNikolai Tillmann<br>\nT.H. Tse<br>\nMargus Veanes<br>\nLuca Viganò<br>\nBurkhart Wolff<br>\nFatiha Zaidi</p>\n<p>Submission:<br>\n===========</p>\n<p>Please submit your papers via easychair<br>\n<a href=\"https://www.easychair.org/conferences/?conf=tap2014\">https://www.easychair.org/conferences/?conf=tap2014</a><br>\n(submission page to be opened in due time)</p>\n<p>TAP 2014 will accept two types of papers and also tutorials:</p>\n<ul>\n<li>\n<p>Research papers: full papers with at most 16 pages in LNCS format<br>\n   (pdf), which have to be original, unpublished and not submitted<br>\n   elsewhere. Research papers should clearly describe the addressed<br>\n   problem, the relevant state-of-the-art, the scientifically-founded<br>\n   solution, and the benefits of the presented approach.</p>\n</li>\n<li>\n<p>Short contributions: work in progress, (industrial) experience<br>\n   reports or tool demonstrations, position statements; an extended<br>\n   abstract with at most 6 pages in LNCS format (pdf) is expected.<br>\n   The same evaluation criteria apply to short papers as to full<br>\n   research papers. Short papers will be reviewed to the same<br>\n   standards of quality as full research papers.</p>\n</li>\n<li>\n<p>Tutorials: TAP 2014 further invites one-hour tutorial presentation<br>\n   surveying the  state-of-the-art of any research field related<br>\n   to the topics of TAP. Tutorial proposals shall have a maximum<br>\n   length of 3 pages in LNCS format (pdf) and provide information<br>\n   about the content, a short outline, and information about the<br>\n   speakers.</p>\n</li>\n</ul>\n<p>Accepted full and short papers will be published in the Springer LNCS<br>\nseries and will be available at the conference. Accepted tutorials<br>\nwill be assigned a slot of 60 minutes during the conference.</p>\n<p>The contents of previous TAP proceedings is available at:<br>\n<a href=\"http://www.informatik.uni-trier.de/~ley/db/conf/tap/tap2013.html\">http://www.informatik.uni-trier.de/~ley/db/conf/tap/tap2013.html</a></p>",
        "id": 294263657,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660915306
    }
]