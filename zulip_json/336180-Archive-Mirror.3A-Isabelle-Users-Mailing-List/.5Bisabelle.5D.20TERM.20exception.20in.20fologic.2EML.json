[
    {
        "content": "<p>From: Slawomir Kolodynski &lt;<a href=\"mailto:skokodyn@yahoo.com\">skokodyn@yahoo.com</a>&gt;<br>\nWhen I was updating the IsarMathLib project for Isabelle 2014 I got the following:<br>\n*** exception TERM raised (line 47 of \"~~/src/FOL/fologic.ML\"):<br>\n*** dest_Trueprop<br>\n*** !!f A B. ALL a b. f : Pi(A, B) --&gt; &lt;a, b&gt; : f &lt;-&gt; a : A &amp; f ` a = b<br>\n*** At command \"by\" (line 605 of \"~/Projects/IsarMathLib/isarmathlib-1.9.1/IsarMathLib/func1.thy\")<br>\n*** exception TERM raised (line 47 of \"~~/src/FOL/fologic.ML\"):<br>\n*** dest_Trueprop<br>\n*** !!a A B. a : Sigma(A, B) --&gt; &lt;fst(a), snd(a)&gt; = a<br>\n*** At command \"by\" (line 296 of \"~/Projects/IsarMathLib/isarmathlib-1.9.1/IsarMathLib/Topology_ZF_10.thy\")</p>\n<p>I was able to work around this by rewriting the proofs slightly. I understand that the TERM exceptions are not just failures to check a proof but some internal errors (?), so I just wanted to report this for consideration for the next release.<br>\nThe exception can be replicated by checking the following theory (in ZF logic)<br>\ntheory Scratch imports func</p>\n<p>begin</p>\n<p>lemma func_imagedef: assumes A1: \"f:X\\&lt;rightarrow&gt;Y\" and A2: \"A\\&lt;subseteq&gt;X\"<br>\n  shows \"f<code>(A) = {f`(x). x \\&lt;in&gt; A}\"\nproof\n  from A1 show \"f</code>(A) \\&lt;subseteq&gt; {f<code>(x). x \\&lt;in&gt; A}\"\n    using image_iff apply_iff by auto\n  show \"{f</code>(x). x \\&lt;in&gt; A} \\&lt;subseteq&gt; f<code>(A)\"\n  proof\n    fix y assume \"y \\&lt;in&gt; {f`(x). x \\&lt;in&gt; A}\"\n    then obtain x where \"x\\&lt;in&gt;A \\&lt;and&gt; y = f`(x)\"\n      by auto\n    with A1 A2 show \"y \\&lt;in&gt; f</code>(A)\"<br>\n      using apply_iff image_iff by auto<br>\n  qed<br>\nqed</p>\n<p>end</p>\n<p>Regards,,Slawomir Kolodynski <a href=\"http://savannah.nongnu.org/projects/isarmathlib\">http://savannah.nongnu.org/projects/isarmathlib</a><br>\nLibrary of Formalized Mathematics for Isabelle/Isar (ZF Logic)</p>",
        "id": 294315903,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660925459
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nA TERM exception is indeed an internal breakdown. With some fiddling, I <br>\nmanaged to get an exception trace as follows (via Poly/ML 5.3.0):</p>\n<p>List.map(2)<br>\nList.map(2)<br>\nList.map(2)<br>\nList.map(2)<br>\nHypsubst().blast_hyp_subst_tac(1)(2)<br>\nTactical.CSUBGOAL(3)<br>\nTactical.CSUBGOAL(3)<br>\nTactical.CSUBGOAL(3)<br>\nTactical.EVY(1)(1)<br>\nBlast().raw_blast(4)cont(3)<br>\nBlast().prove(4)prv(4)closeF(1)<br>\nBlast().prove(4)prv(4)<br>\nBlast().prove(4)prv(4)deeper(1)<br>\nBlast().prove(4)prv(4)<br>\nBlast().prove(4)prv(4)closeF(1)<br>\nBlast().prove(4)prv(4)<br>\nBlast().prove(4)prv(4)closeF(1)<br>\nBlast().prove(4)prv(4)<br>\nBlast().prove(4)prv(4)deeper(1)<br>\nBlast().prove(4)prv(4)<br>\nBlast().prove(4)prv(4)deeper(1)<br>\nBlast().prove(4)prv(4)<br>\nBlast().prove(4)prv(4)deeper(1)<br>\nBlast().prove(4)prv(4)<br>\nBlast().prove(4)prv(4)<br>\nBlast().prove(4)<br>\nBlast().raw_blast(4)</p>\n<p>This indicates that it is related to the following change from NEWS:</p>\n<ul>\n<li>Standard tactics and proof methods such as \"clarsimp\", \"auto\" and<br>\n\"safe\" now preserve equality hypotheses \"x = expr\" where x is a free<br>\nvariable.  Locale assumptions and chained facts containing \"x\"<br>\ncontinue to be useful.  The new method \"hypsubst_thin\" and the<br>\nconfiguration option \"hypsubst_thin\" (within the attribute name space)<br>\nrestore the previous behavior.  INCOMPATIBILITY, especially where<br>\ninduction is done after these methods or when the names of free and<br>\nbound variables clash.  As first approximation, old proofs may be<br>\nrepaired by \"using [[hypsubst_thin = true]]\" in the critical spot.</li>\n</ul>\n<p>So your proof works again like this:</p>\n<p>using [[hypsubst_thin = true]] by auto</p>\n<p>Although that can only be a temporary workaround.</p>\n<p>Thomas Sewell who made the hypsubst change should be able to say more <br>\nabout this situation.</p>\n<p>Makarius</p>\n<hr>\n<p><a href=\"http://stop-ttip.org\">http://stop-ttip.org</a>  743,200 people so far</p>\n<hr>",
        "id": 294315917,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660925466
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nTrying that -- according to the included ch-test -- it leads to <br>\nnon-termination of \"blast\" in the above example, but \"auto\" works.</p>\n<p>My impression is that blast.ML is a bit non-canonical in many respects, <br>\nnot just superficially due to the use of camel case in the source.  Its <br>\nuse of strip_Trueprop looses information about presence or absence of <br>\nTrueprop.  Later use of Data.hyp_subst_tac may stumble on that.</p>\n<p>Makarius<br>\n<a href=\"/user_uploads/14278/NrHtWoGPygHlJDpIAYkBtFOx/ch-test\">ch-test</a></p>",
        "id": 294637248,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661160673
    },
    {
        "content": "<p>From: Larry Paulson &lt;<a href=\"mailto:lp15@cam.ac.uk\">lp15@cam.ac.uk</a>&gt;<br>\nBlast was never intended to do anything intelligent in the presence of meta-level connectives, which are much more common now, so some adjustments may be necessary.<br>\nLarry</p>",
        "id": 294637260,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661160679
    },
    {
        "content": "<p>From: Thomas Sewell &lt;<a href=\"mailto:thomas.sewell@nicta.com.au\">thomas.sewell@nicta.com.au</a>&gt;<br>\nPerhaps a simple fix to the issue would be to avoid blast every seeing<br>\nmeta-operators by atomizing them into their HOL/FOL counterparts first.</p>\n<p>I'm not sure if this solution necessarily \"plays nice\" with every rule<br>\nthat blast might be given, though. Perhaps rules that would introduce or<br>\neliminate meta-operators would have to be normalized as well.</p>\n<p>Cheers,<br>\n     Thomas.</p>\n<hr>\n<p>The information in this e-mail may be confidential and subject to legal professional privilege and/or copyright. National ICT Australia Limited accepts no liability for any damage caused by this email or its attachments.</p>",
        "id": 294639020,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661161317
    },
    {
        "content": "<p>From: Larry Paulson &lt;<a href=\"mailto:lp15@cam.ac.uk\">lp15@cam.ac.uk</a>&gt;<br>\nIt would have to be tested. Such formulas would necessarily be complex, with the danger of increasing runtimes significantly. The alternative is to filter them out.<br>\nLarry</p>",
        "id": 294640770,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661161998
    },
    {
        "content": "<p>From: Slawomir Kolodynski via Cl-isabelle-users &lt;<a href=\"mailto:cl-isabelle-users@lists.cam.ac.uk\">cl-isabelle-users@lists.cam.ac.uk</a>&gt;<br>\nBack in October 2014 I reported an error that I encountered when updating IsarMathLib to Isabelle 2014.The error is still there in Isabelle2016-RC1. This can be replicated by checking the following theory (in Isabelle/ZF logic): <br>\ntheory Scratch imports func</p>\n<p>begin</p>\n<p>lemma func_imagedef: assumes A1: \"f:X\\&lt;rightarrow&gt;Y\" and A2: \"A\\&lt;subseteq&gt;X\"<br>\n  shows \"f<code>(A) = {f`(x). x \\&lt;in&gt; A}\"\nproof\n  from A1 show \"f</code>(A) \\&lt;subseteq&gt; {f<code>(x). x \\&lt;in&gt; A}\"\n    using image_iff apply_iff by auto\n  show \"{f</code>(x). x \\&lt;in&gt; A} \\&lt;subseteq&gt; f<code>(A)\"\n  proof\n    fix y assume \"y \\&lt;in&gt; {f`(x). x \\&lt;in&gt; A}\"\n    then obtain x where \"x\\&lt;in&gt;A \\&lt;and&gt; y = f`(x)\"\n      by auto\n    with A1 A2 show \"y \\&lt;in&gt; f</code>(A)\"<br>\n      using apply_iff image_iff by auto<br>\n  qed<br>\nqed</p>\n<p>end<br>\nwhich gives <br>\nexception TERM raised (line 47 of \"~~/src/FOL/fologic.ML\"):<br>\n  dest_Trueprop<br>\n  ⋀f A B.<br>\n     ∀a b. f ∈ Pi(A, B) ⟶<br>\n           ⟨a, b⟩ ∈ f ⟷ a ∈ A ∧ f ` a = b<br>\nin Isabelle/jEdit tooltip at the last auto keyword.<br>\nThis is not a very important problem for me as I can work around it, but maybe it's good to know that it is still there.<br>\nSlawomir Kolodynski</p>",
        "id": 294663044,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661170668
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nOn Sat, 23 Jan 2016, Slawomir Kolodynski via Cl-isabelle-users wrote:</p>\n<blockquote>\n<p>Back in October 2014 I reported an error that I encountered when <br>\nupdating IsarMathLib to Isabelle 2014. The error is still there in <br>\nIsabelle2016-RC1.</p>\n</blockquote>\n<p>Yes, for the historical record the thread started here:<br>\n<a href=\"https://lists.cam.ac.uk/pipermail/cl-isabelle-users/2014-October/msg00116.html\">https://lists.cam.ac.uk/pipermail/cl-isabelle-users/2014-October/msg00116.html</a></p>\n<p>That was after the Isabelle2014 release.  For the release process of <br>\nIsabelle2015, it was discussed again here: <br>\n<a href=\"https://lists.cam.ac.uk/pipermail/cl-isabelle-users/2015-April/msg00303.html\">https://lists.cam.ac.uk/pipermail/cl-isabelle-users/2015-April/msg00303.html</a></p>\n<p>The conclusion: no conclusion yet.  It not easy to change the situation <br>\nwithout revisiting the \"blast\" implementation, and it was not done in the <br>\nmeantime.  So it won't happen for Isabelle2016.</p>\n<blockquote>\n<p>This is not a very important problem for me as I can work around it, but <br>\nmaybe it's good to know that it is still there.</p>\n</blockquote>\n<p>For the record on this mailing list: in October 2014 the workaround was <br>\nlike this:</p>\n<p>using [[hypsubst_thin]] by auto</p>\n<p>Of course you can also do this more globally via \"declare <br>\n[[hypsubst_thin]]\", although you loose the potential benefit of the <br>\nhypsubst change behind this (see NEWS of Isabelle2014).</p>\n<p>Makarius</p>",
        "id": 294663048,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661170671
    }
]