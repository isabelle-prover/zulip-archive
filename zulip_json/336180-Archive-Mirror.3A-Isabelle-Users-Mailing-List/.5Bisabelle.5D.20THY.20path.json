[
    {
        "content": "<p>From: Joachim Breitner &lt;<a href=\"mailto:mail@joachim-breitner.de\">mail@joachim-breitner.de</a>&gt;<br>\nHi,</p>\n<p>I just tried this and it worked, but only after I made sure I start i3p<br>\nwithin the directory of the .thy. It seems that \"..\" is relative to the<br>\ncurrent working directory, not to the currently processed theory. Is<br>\nthat intentional?</p>\n<p>Greetings,<br>\nJoachim<br>\n<a href=\"/user_uploads/14278/BP0ROzsP-Y1kEn6WZuTlpbKl/signature.asc\">signature.asc</a></p>",
        "id": 294115395,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660838141
    },
    {
        "content": "<p>From: Christian Sternagel &lt;<a href=\"mailto:christian.sternagel@uibk.ac.at\">christian.sternagel@uibk.ac.at</a>&gt;<br>\nHi!</p>\n<p>is there a way of telling Isabelle where to search for THY files? From <br>\nthe error message in PG-Emacs when trying to load a non-existing THY <br>\nfile, I get that the standard search is \".\" and <br>\n\"$ISABELLE_HOME/src/HOL/Library\". I would like to extend this list.</p>\n<p>The reason is that we have 3 entries in the AFP which our development is <br>\nbased on (currently we have local copies of the corresponding THY <br>\nfiles). To me, it would seem as an overkill, if I had to incrementally <br>\nconstruct heap images for<br>\n1) HOL-First-Entry<br>\n2) HOL-First-and-Second-Entry<br>\n3) HOL-First-and-Second-and-Third-Entry<br>\nand then use 'HOL-First-and-Second-and-Third-Entry instead' of 'HOL'.</p>\n<p>What do you think? How do other users that base their work on AFP <br>\nentries, handle such situations? Andreas? ;)</p>\n<p>cheers</p>\n<p>chris</p>",
        "id": 294117902,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660838840
    },
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\nYou can refer to theories in other AFP entries simply by writing</p>\n<p>imports \"../other-article-name/theory-name\"</p>\n<p>This is the standard way of doing it.</p>\n<p>Tobias</p>\n<p>Christian Sternagel schrieb:</p>",
        "id": 294117910,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660838846
    },
    {
        "content": "<p>From: Brian Huffman &lt;<a href=\"mailto:brianh@cs.pdx.edu\">brianh@cs.pdx.edu</a>&gt;<br>\nOn Thu, Sep 16, 2010 at 5:45 AM, Christian Sternagel<br>\n&lt;<a href=\"mailto:christian.sternagel@uibk.ac.at\">christian.sternagel@uibk.ac.at</a>&gt; wrote:</p>\n<blockquote>\n<p>Hi!</p>\n<p>is there a way of telling Isabelle where to search for THY files? From the<br>\nerror message in PG-Emacs when trying to load a non-existing THY file, I get<br>\nthat the standard search is \".\" and \"$ISABELLE_HOME/src/HOL/Library\". I<br>\nwould like to extend this list.</p>\n</blockquote>\n<p>In src/HOL/Plain.thy, you'll find the following line:</p>\n<p>ML {* path_add \"~~/src/HOL/Library\" *}</p>\n<p>You can add similar lines to your own theory files if you want to add<br>\nother directories to the search path. This one uses \"~~\" and so is<br>\nrelative to $ISABELLE, but I think absolute paths should also work.</p>\n<blockquote>\n<p>The reason is that we have 3 entries in the AFP which our development is<br>\nbased on (currently we have local copies of the corresponding THY files). To<br>\nme, it would seem as an overkill, if I had to incrementally construct heap<br>\nimages for<br>\n1) HOL-First-Entry<br>\n2) HOL-First-and-Second-Entry<br>\n3) HOL-First-and-Second-and-Third-Entry<br>\nand then use 'HOL-First-and-Second-and-Third-Entry instead' of 'HOL'.</p>\n</blockquote>\n<p>It is a real shame that building custom heap images is so difficult. I<br>\nagree that having to build N heap images in sequence just to use N<br>\ndifferent libraries at once is overkill. A nicer solution would be to<br>\nhave a tool where you could say \"give me a heap image with libraries<br>\nX, Y, and Z\" and it would compile one for you in one step.<br>\nUnfortunately, the current Isabelle tools are based on an assumption<br>\nof one-heap-image-per-directory; we really need to move away from<br>\nthat.</p>\n<blockquote>\n<p>What do you think? How do other users that base their work on AFP entries,<br>\nhandle such situations? Andreas? ;)</p>\n<p>cheers</p>\n<p>chris</p>\n</blockquote>\n<p>Question from Isabelle newbie: \"This AFP library looks interesting;<br>\nhow do I install it?\" My shameful response is that by far the easiest<br>\nway to use an AFP library is to copy all the files into a directory<br>\nwith all your own theory files. I know that this doesn't scale well if<br>\nyou want to use more than one AFP library at once. You could use<br>\nseparate directories and relative paths as Tobias suggests, but as<br>\nlong as we have a flat theory namespace this doesn't really scale<br>\neither. (Question for the AFP maintainers: With about 80 AFP entries<br>\nnow, do they all use distinct theory names? Is this something that you<br>\nshould be worried about?)</p>\n<p>Being able to download and use other people's Isabelle libraries (AFP<br>\nentries in particular) is very important, in my opinion, and the<br>\ncurrent situation is unacceptable. I think that having a proper way to<br>\n\"install\" third-party Isabelle libraries would bring significant<br>\nbenefits to our research community, making it much easier for people<br>\nto collaborate and build upon each other's work.</p>\n<p>I really hope that most of the developers will continue to think about<br>\nhow we can do this better.</p>\n<p>Thanks, Chris, for bringing this issue to everyone's attention.</p>\n<ul>\n<li>Brian</li>\n</ul>",
        "id": 294117936,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660838853
    },
    {
        "content": "<p>From: Andreas Lochbihler &lt;<a href=\"mailto:andreas.lochbihler@kit.edu\">andreas.lochbihler@kit.edu</a>&gt;<br>\nHi Chris,</p>\n<p>JinjaThreads, which I am working on, also builds on three other AFP entries (Coinductive, FinFun and Jinja/DFA) and HOL-Word. The JinjaThreads theories in the AFP use the import system with relative paths explained by Tobias and use the HOL-Word heap.<br>\nGerwin suggested to me that I do not build incremental heaps (HOL, HOL-Word, HOL-Word-Coinductive, HOL-Word-Coinductive-FinFun, ...), but rather pick one of them (HOL-Word) as the basis and load the other's theories on demand. This way, while building JinjaThreads, Isabelle loads also the other AFP entries again.</p>\n<p>For my everyday development on JinjaThreads I have given up on building images of the other AFP entries and working with them because I update my Isabelle version to the latest repository snapshot every two or three days. So, I would have to rebuild these heap images each time then. Instead, I have organised my local directory structure to match the AFP's. To get to work quickly, I simply load these base theories with the \"skip proof\" option enabled, which is fairly fast.</p>\n<p>Andreas</p>",
        "id": 294117959,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660838862
    },
    {
        "content": "<p>From: Christian Sternagel &lt;<a href=\"mailto:christian.sternagel@uibk.ac.at\">christian.sternagel@uibk.ac.at</a>&gt;<br>\nHi,</p>\n<p>thnx for the many answers!</p>\n<p>@Tobias: between the AFP entries themselves I do exactly what you <br>\nrecommended.</p>\n<p>However, the whole setup is more like Andreas described: n AFP entries <br>\n(currently 3, but I hope there are more to come) which we want to use in <br>\nour local development.</p>\n<p>I do not particularly like the solution with adapting my local directory <br>\nstructure. My current try is to have a local AFP.ML (see attachment) <br>\nadding the paths (to the local copy of the AFP hg-repo) and loading the <br>\ndesired theories and then building a heap file</p>\n<p>isabelle usedir -b -f AFP.ML HOL HOL-AFP</p>\n<p>to work on. This almost works (and in our case the AFP entries are not <br>\nvery big, hence creating the heap file is fast), only that there are <br>\nsome THY files in AFP entries that have the same name as local THY <br>\nfiles... and this breaks everything. In the current situation it will be <br>\neasy to replace one file by a differently named one, but in general I <br>\ntotally agree with Brian that the flat name space is... how to say... <br>\nnot excessively nice.</p>\n<p>cheers</p>\n<p>chris</p>\n<p>On 09/17/2010 08:28 AM, Andreas Lochbihler wrote:</p>\n<blockquote>\n<p>Hi Chris,</p>\n<blockquote>\n<p>The reason is that we have 3 entries in the AFP which our development is based on (currently we have local copies of the corresponding THY files). To me, it would seem as an overkill, if I had to incrementally construct heap images for<br>\n1) HOL-First-Entry<br>\n2) HOL-First-and-Second-Entry<br>\n3) HOL-First-and-Second-and-Third-Entry<br>\nand then use 'HOL-First-and-Second-and-Third-Entry instead' of 'HOL'.</p>\n<p>What do you think? How do other users that base their work on AFP entries, handle such situations? Andreas? ;)<br>\nJinjaThreads, which I am working on, also builds on three other AFP entries (Coinductive, FinFun and Jinja/DFA) and HOL-Word. The JinjaThreads theories in the AFP use the import system with relative paths explained by Tobias and use the HOL-Word heap.<br>\nGerwin suggested to me that I do not build incremental heaps (HOL, HOL-Word, HOL-Word-Coinductive, HOL-Word-Coinductive-FinFun, ...), but rather pick one of them (HOL-Word) as the basis and load the other's theories on demand. This way, while building JinjaThreads, Isabelle loads also the other AFP entries again.</p>\n</blockquote>\n<p>For my everyday development on JinjaThreads I have given up on building images of the other AFP entries and working with them because I update my Isabelle version to the latest repository snapshot every two or three days. So, I would have to rebuild these heap images each time then. Instead, I have organised my local directory structure to match the AFP's. To get to work quickly, I simply load these base theories with the<br>\n\"skip proof\" option enabled, which is fairly fast.<br>\nwell ^that sounds interesting... &lt;whispering&gt;how do I activate <br>\nit?&lt;/whispering&gt;</p>\n<p>Andreas<br>\n<a href=\"/user_uploads/14278/ejWwGDdp2ZzGzPzmFF4CSNot/AFP.ML\">AFP.ML</a></p>\n</blockquote>",
        "id": 294117985,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660838871
    },
    {
        "content": "<p>From: Andreas Lochbihler &lt;<a href=\"mailto:andreas.lochbihler@kit.edu\">andreas.lochbihler@kit.edu</a>&gt;<br>\nHi Chris,</p>\n<ol>\n<li>Start ProofGeneral</li>\n<li>Start Isabelle (C-c C-s)</li>\n<li>Menu Isabelle -&gt; Settings -&gt; Skip proof</li>\n<li>Process the theories up to the point you want to start working on</li>\n<li>Deactivate skip proof again</li>\n</ol>\n<p>In the \"Skip proof\"-mode, Isabelle skips all proofs, but not the definitions, context switches, attribute declarations, etc, i.e. the latter take still their time to be processed.</p>\n<p>Another option to get started quickly is to use writeable heaps, where you can start right where you had stopped before. I used to work with these, but my heaps got so large that shutting down Isabelle and writing the heap back to the disk exceeded all emacs timeouts. Makarius might be able to tell you more about writeable heaps.</p>\n<p>Andreas</p>",
        "id": 294118003,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660838878
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nThese persistent heap images used to be very commonplace until everybody <br>\nstarted using Proof General, because the basic usage of isabelle-process <br>\nwas forgotten.  The Isabelle system explains this in section 1.2 with a <br>\nsmall example near the end.</p>\n<p>Proof General makes it traditionally a bit hard to work with the result, <br>\nalso due to the default time out -- it can be changed on the Proof General <br>\nside using one of these huge option menus, or better by injecting some <br>\nelisp into $HOME/.emacs like this:</p>\n<p>(custom-set-variables '(proof-shell-quit-timeout 45))</p>\n<p>Makarius</p>",
        "id": 294118095,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660838895
    }
]