[
    {
        "content": "<p>From: Manuel Eberl &lt;<a href=\"mailto:eberlm@in.tum.de\">eberlm@in.tum.de</a>&gt;<br>\nHallo,</p>\n<p>I don't know awfully much about friends and corecursion, but in my <br>\nnaïveté, I simply added \"(friend)\" to a reasonably friendly-looking <br>\ncorecursive definition and expected it to work. Instead, it looped. A <br>\nminimal non-working example is the following:</p>\n<p>type_synonym ae = \"(real × real) stream\"</p>\n<p>corec (friend) add_ae :: \"ae ⇒ ae\" where<br>\n   \"add_ae f = ((fst (shd f), snd (shd f)) ## add_ae (stl f))\"</p>\n<p>This runs for about 3 seconds and then returns with the following error:</p>\n<p>Tactic failed<br>\nThe error(s) above occurred for the goal statement⌂:<br>\nrel_fun (rel_prod R (rel_pre_stream op = R))<br>\n  (rel_pre_stream op = (rel_ssig_stream_v1 R))<br>\n  (λf. ((fst (fst (snd f)), snd (fst (snd f))),<br>\n        stream.v1.Oper<br>\n         (stream.v1.Sig<br>\n           (Inr<br>\n             (case snd f of<br>\n              (x1, x2) ⇒ stream.v1.VLeaf x2)))))<br>\n  (λf. ((fst (fst (snd f)), snd (fst (snd f))),<br>\n        stream.v1.Oper<br>\n         (stream.v1.Sig<br>\n           (Inr<br>\n             (case snd f of<br>\n              (x1, x2) ⇒ stream.v1.VLeaf x2)))))</p>\n<p>The problem does not occur if I replace \"(fst (shd f), snd (shd f))\" <br>\nwith the equivalent \"shd f\".</p>\n<p>A similar, slightly less vacuous definition that is closer to my <br>\noriginal definition is the following:</p>\n<p>corec (friend) add_ae :: \"ae ⇒ ae ⇒ ae\" where<br>\n   \"add_ae f g = ((fst (shd f) + fst (shd g), snd (shd f)) ## add_ae <br>\n(stl f) (stl g))\"</p>\n<p>That also causes a similar error, but it takes about 110 seconds to get <br>\nthere. The command defining the function I originally had in mind has <br>\nnot terminated yet.</p>\n<p>Cheers,</p>\n<p>Manuel</p>",
        "id": 294683066,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661177364
    },
    {
        "content": "<p>From: Dmitriy Traytel &lt;<a href=\"mailto:traytel@inf.ethz.ch\">traytel@inf.ethz.ch</a>&gt;<br>\nHi Manuel,</p>\n<p>this is due to a known (to Ondra) weakness of the transfer_prover. Because of this, Andreas Lochbihler always uses his own transfer_prover’ method locally, with which the following works.</p>\n<p>method transfer_prover' = (unfold relator_eq[symmetric]; transfer_prover)</p>\n<p>type_synonym ae = \"(real × real) stream\"</p>\n<p>corecursive (friend) add_ae :: \"ae ⇒ ae\" where<br>\n \"add_ae f = ((fst (shd f), snd (shd f)) ## add_ae (stl f))\"<br>\n  by transfer_prover’</p>\n<p>We could use transfer_prover’ in Corec by default, but the proper resolution would be to make the transfer_prover to work modulo relator_eq once and for all.</p>\n<p>Cheers,<br>\nDmitriy</p>",
        "id": 294683088,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661177370
    },
    {
        "content": "<p>From: Andreas Lochbihler &lt;<a href=\"mailto:andreas.lochbihler@inf.ethz.ch\">andreas.lochbihler@inf.ethz.ch</a>&gt;<br>\nDear Manuel,</p>\n<p>\"corec (friend)\" internally uses transfer_prover, which has its problems with equality on <br>\ncompound types. In detail, corec generates a parametricity proof obligation and passes it <br>\nto transfer_prover. In your example, this goal contains \"op =\" on tuples of reals, which <br>\ntransfer_prover cannot handle, because it expects it to be written as \"rel_prod op = op =\".</p>\n<p>Either, you now bug Ondra or (Jasmin or Dmitriy) to change transfer_prover or corec such <br>\nthat their tools work together smoothly. Or you just use the long form</p>\n<p>corecursive (friend)</p>\n<p>and manually prove the parametricity:</p>\n<p>by(fold relator_eq) transfer_prover</p>\n<p>Hope this helps,<br>\nAndreas</p>",
        "id": 294683101,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661177376
    },
    {
        "content": "<p>From: Manuel Eberl &lt;<a href=\"mailto:eberlm@in.tum.de\">eberlm@in.tum.de</a>&gt;<br>\nThanks for the explanation (also to Dmitriy).</p>\n<p>I, of course, cannot say who of the people involved is more obligated to <br>\nchange their tool in order to make this work. This isn't a very pressing <br>\nissue for me either, and now that I know of the workaround, it's not a <br>\nbig problem for me anymore either.</p>\n<p>Nevertheless, it would probably be good if this could be resolved soon, <br>\nlest others without knowledge of the internals of the codatatype package <br>\nfall into the same trap as I did.</p>\n<p>Cheers,</p>\n<p>Manuel</p>",
        "id": 294683112,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661177383
    }
]