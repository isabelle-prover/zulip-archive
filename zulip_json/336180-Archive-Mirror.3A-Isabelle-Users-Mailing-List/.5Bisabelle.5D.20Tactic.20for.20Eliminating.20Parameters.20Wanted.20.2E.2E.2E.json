[
    {
        "content": "<p>From: Burkhart Wolff &lt;<a href=\"mailto:Burkhart.Wolff@lri.fr\">Burkhart.Wolff@lri.fr</a>&gt;<br>\nDear all, </p>\n<p>is there any way to actually eliminate a parameter or a goal ? </p>\n<p>After case-splits, parameters are often no longer of relevance.</p>\n<p>MY PROBLEM:<br>\n============</p>\n<p>I have something like:</p>\n<p>\"⋀S. PUT (S::(...) action⇩i⇩p⇩c)”</p>\n<p>which I reduce via case-splitting to:</p>\n<p>\"(⋀S ipc_stage ipc_direction. PUT (IPC ipc_stage ipc_direction)) ⟹ (⋀S. PUT S)”</p>\n<p>which I would like to reduce to:</p>\n<p>\"(⋀ ipc_stage ipc_direction. PUT (IPC ipc_stage ipc_direction)) ⟹ (⋀S. PUT S)”</p>\n<p>(so canceling the parameter S irrelevant in the goal).</p>\n<p>SOME ELEMENTS OF A SOLUTION:<br>\nI cooked up some sketch of a tactics which does nearly what I want:</p>\n<p>ML{* val XX = Unsynchronized.ref(@{thm impI})<br>\n     fun PEEK st = (XX:=st; all_tac st)<br>\n*}<br>\nlemma \"⋀S. PUT (S::(...) action⇩i⇩p⇩c)\"<br>\napply(tactic \"Induct_Tacs.case_tac @{context} \\\"S\\\" 1\", hypsubst)<br>\napply(tactic \"PEEK\")<br>\noops<br>\nML{* val st = !XX;<br>\n     val thy = #thy (rep_thm (st));<br>\n     val _ $ (_ $ Abs(x,ty,t))  = concl_of(st); <br>\n     val cFree = cterm_of thy (Free(x,ty))<br>\n*}<br>\nML{* val _ $ Abs(ss,_,T) = term_of (cprem_of (st) 1) ;<br>\n     val T' =  cterm_of thy (subst_bounds([Bound 0],T)) *}</p>\n<p>ML{* val Q  = Thm.assume T'*}<br>\nML{* val Q' = Thm.forall_intr cFree  (Q) ; *}<br>\nML{* val Q'' = Thm.implies_intr T' Q'*}<br>\nML{* val Q''' = Q'' RS (st)*}</p>\n<p>Unfortunately, the very last composition step fails:<br>\nexception THM 1 raised (line 332 of \"drule.ML\"):<br>\n  RSN: no unifiers<br>\n  (⋀ipc_stage ipc_direction. PUT (IPC ipc_stage ipc_direction)) ⟹<br>\n  (⋀S ipc_stage ipc_direction. PUT (IPC ipc_stage ipc_direction))<br>\n  (⋀S ipc_stage ipc_direction. PUT (IPC ipc_stage ipc_direction)) ⟹ (⋀S. PUT S)</p>\n<p>which looks bizarre. The types and class types are confrom.</p>\n<p>Any ideas ?</p>\n<p>Best</p>\n<p>bu</p>",
        "id": 294326778,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660928812
    },
    {
        "content": "<p>From: Andreas Lochbihler &lt;<a href=\"mailto:andreas.lochbihler@inf.ethz.ch\">andreas.lochbihler@inf.ethz.ch</a>&gt;<br>\nDear Burkhart,</p>\n<p>I normally use apply(unfold triv_forall_equality) to get rid of all irrelevant parameters.</p>\n<p>Best,<br>\nAndreas</p>",
        "id": 294326787,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660928814
    },
    {
        "content": "<p>From: Jeremy Dawson &lt;<a href=\"mailto:Jeremy.Dawson@anu.edu.au\">Jeremy.Dawson@anu.edu.au</a>&gt;<br>\nHi Burkhart,</p>\n<p>If I wanted to do this in Isabelle 2005, I'd just try rewriting with the <br>\nfollowing:</p>\n<p>triv_forall_equality ;<br>\nval it = \"(!!x. PROP ?V) == PROP ?V\" : Thm.thm</p>\n<p>Of course, I've no idea whether this is still available in the current <br>\nversions</p>\n<p>Cheers,</p>\n<p>Jeremy</p>",
        "id": 294326809,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660928824
    },
    {
        "content": "<p>From: Jasmin Blanchette &lt;<a href=\"mailto:jasmin.blanchette@inria.fr\">jasmin.blanchette@inria.fr</a>&gt;<br>\nHi Burkhart,</p>\n<blockquote>\n<p>is there any way to actually eliminate a parameter or a goal ? </p>\n</blockquote>\n<p>This works for me:</p>\n<p>apply (simp only: triv_forall_equality)</p>\n<p>Cheers,</p>\n<p>Jasmin</p>",
        "id": 294326950,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660928873
    }
]