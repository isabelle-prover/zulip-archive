[
    {
        "content": "<p>From: Lawrence Paulson &lt;<a href=\"mailto:lp15@cam.ac.uk\">lp15@cam.ac.uk</a>&gt;<br>\nCould you please be more specific? That sounds pretty much like what auto/force/blast do anyway if you use intro/elim/dest without the (!) modifier.</p>\n<p>Larry Paulson</p>",
        "id": 294681877,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661176996
    },
    {
        "content": "<p>From: Joachim Breitner &lt;<a href=\"mailto:joachim@cis.upenn.edu\">joachim@cis.upenn.edu</a>&gt;<br>\nDear Larry,</p>\n<p>precisely – but auto (AFAIK) can only invoke _rules_, not _methods_.  I<br>\nwant it to invoke a (custom eisbach-defined) method in this way.</p>\n<p>The introduction rule in my example requires picking a “sufficiently<br>\nfresh” variable, by specifying a set of variables to avoid. Such an<br>\nintro rule does not work well with \"auto\", as it would leave a<br>\nschematic variable around.</p>\n<p>But almost always, this set of variables can be calculated from the<br>\ncontext, i.e. the current goal statement. I (more or less) have a<br>\nmethod that does that, and I want auto to try that.</p>\n<p>Thanks,<br>\nJoachim<br>\n<a href=\"/user_uploads/14278/VS1A-x5pY92wyJFLgF6HD6a0/signature.asc\">signature.asc</a></p>",
        "id": 294681898,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661177003
    },
    {
        "content": "<p>From: Joachim Breitner &lt;<a href=\"mailto:breitner@kit.edu\">breitner@kit.edu</a>&gt;<br>\nDear Larry,</p>\n<p>indeed, that seems to be the right way into the machinery!</p>\n<p>I have something that seems to work, but raises a few questions about<br>\nIsabelle/ML-level programming.</p>\n<p>Here is my code so far:</p>\n<p>theory Auto_Method<br>\nimports<br>\n  Main<br>\n  \"~~/src/HOL/Eisbach/Eisbach\"<br>\nkeywords \"auto_method\" :: thy_decl<br>\nbegin</p>\n<p>ML ‹<br>\n  fun auto_method method_text = (fn ctxt =&gt;<br>\n    ctxt addSbefore (\"TODO\", fn ctxt =&gt; fn _ =&gt;<br>\n      let val method = Method.evaluate method_text ctxt<br>\n      in  Method.NO_CONTEXT_TACTIC ctxt (method [])<br>\n      end<br>\n   ));</p>\n<p>fun auto_method_cmd method_text lthy = <br>\n    let (* val ctxt = Local_Theory.target_of lthy<br>\n           val method = Method.evaluate method_text ctxt *)<br>\n    in Local_Theory.background_theory (map_theory_claset (auto_method method_text)) lthy<br>\n    end;</p>\n<p>Outer_Syntax.local_theory @{command_keyword \"auto_method\"} <br>\n    \"adds a method invocation to the classical reasoner\"<br>\n    (Method.parse &gt;&gt; (fn (method_text, _) =&gt; auto_method_cmd method_text))<br>\n›</p>\n<p>And this actually works:</p>\n<p>consts P :: bool <br>\n    consts Q :: bool<br>\n    lemma H1: \"P ⟹ Q\" and H2: P sorry<br>\n    method Q_method methods m = (match conclusion in \"Q\" ⇒ ‹rule H1; m›)<br>\n    auto_method (Q_method ‹rule H2›)<br>\n    lemma Q by auto</p>\n<p>So far so good. But I noticed that if I make a mistake in auto_method,<br>\ni.e. by writing</p>\n<p>auto_method (Q_method ‹rule does_not_exist›)</p>\n<p>then the error about does_not_exist is raised in the application of<br>\nauto, _not_ the invocation of auto_method, where it should be.</p>\n<p>I concluded that this is due to the executing Method.evaluate in the<br>\ncontext of the wrapper invocation, not in the context of the<br>\nlocal_theory command. When I try doing it there (see the commented-out-<br>\ncode) I get the proper error message. But actually using the wrapper<br>\ncauses the error message</p>\n<p>exception CONTEXT<br>\n       (\"Cannot transfer: not a super theory\", [], [], [\"Q ⟹ (Q)\"],</p>\n<p>What am I doing wrong?</p>\n<p>Thanks,<br>\nJoachim<br>\n<a href=\"/user_uploads/14278/L_Tq_7JOCyJv72TnOeSfb9C_/signature.asc\">signature.asc</a></p>",
        "id": 294681930,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661177015
    },
    {
        "content": "<p>From: Lawrence Paulson &lt;<a href=\"mailto:lp15@cam.ac.uk\">lp15@cam.ac.uk</a>&gt;<br>\nPossibly you could accomplish what you want using a “wrapper”. Unfortunately, they are very obscure. See The Isabelle/Isar Reference Manual, section 9.4.7, Modifying the search step.</p>\n<p>Larry Paulson</p>",
        "id": 294681938,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661177022
    },
    {
        "content": "<p>From: Joachim Breitner &lt;<a href=\"mailto:joachim@cis.upenn.edu\">joachim@cis.upenn.edu</a>&gt;<br>\nDear list,</p>\n<p>I’m current in the process of following a Coq course using Isabelle<br>\n(more as a Fingerübung), and there I see some nice use of tactics, such<br>\nas:<br>\n - If you find a goal of this shape,<br>\n - invoke that particular rule<br>\n - with an instantiation calculated from the current goal state.</p>\n<p>In this case, the instantiation includes a set of names to avoid. I<br>\nhave posed my question about that part at<br>\n<a href=\"http://stackoverflow.com/q/39280314/946226\">http://stackoverflow.com/q/39280314/946226</a><br>\n(and now there is an Eisbach tag), but I am also wondering:</p>\n<p>How do I best integrate this into an (otherwise) nicely automated proof<br>\nusing our beloved auto? <br>\nConceptually, to me, the custom method is just a smart version of an<br>\nintroduction rule. But clearly I cannot just give a method as an<br>\nargument to auto’s \"intro:\".</p>\n<p>Is there any other way to tell auto: „When you try introduction rules,<br>\nwell, also try running this given method?“</p>\n<p>If not, should there be such a way?</p>\n<p>Greetings,<br>\nJoachim<br>\n<a href=\"/user_uploads/14278/t1JKNj74QoG81tNu79OMqTC_/signature.asc\">signature.asc</a></p>",
        "id": 294683143,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661177395
    },
    {
        "content": "<p>From: Christian Sternagel &lt;<a href=\"mailto:c.sternagel@gmail.com\">c.sternagel@gmail.com</a>&gt;<br>\nDear Joachim,</p>\n<p>I don't know the details of what you are trying to do. Maybe it could be<br>\ntackled by a simproc (which basically also says, do something special on<br>\ngoals of a specific shape)?</p>\n<p>cheers</p>\n<p>chris</p>",
        "id": 294684404,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661177462
    },
    {
        "content": "<p>From: Joachim Breitner &lt;<a href=\"mailto:joachim@cis.upenn.edu\">joachim@cis.upenn.edu</a>&gt;<br>\nDear Chris,</p>\n<p>For an example, see<br>\n<a href=\"https://github.com/nomeata/cis670-16fa/blob/926a15752522836620dde10076132879aa83b2a3/isa/Ch4.thy#L366-L382\">https://github.com/nomeata/cis670-16fa/blob/926a15752522836620dde10076132879aa83b2a3/isa/Ch4.thy#L366-L382</a><br>\n(this file has no dependencies outside of HOL and HOL/Library)</p>\n<p>In essence, I want to replace</p>\n<p>apply(induction \"[x \\&lt;leadsto&gt; u] e\" arbitrary: x e rule: lc.induct)<br>\n    apply(auto elim!: subst.elims[OF sym])<br>\n    apply(lc_let_with_find_fresh; auto)<br>\n    done</p>\n<p>with \"by (induction ...) (auto ...)\".</p>\n<p>Quite possible that simprocs are the way to go, although judging from<br>\nthe name, they are not: It is not (safe) simplification that I want to<br>\ninstrument, but rather the part of auto that does proof search, i.e.<br>\nundoes a rule application if it turned out that it did not lead<br>\nanywhere.</p>\n<p>Greetings,<br>\nJoachim<br>\n<a href=\"/user_uploads/14278/rZyAgXz0vgzR_qS51CfvuDnd/signature.asc\">signature.asc</a></p>",
        "id": 294684577,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661177523
    }
]