[
    {
        "content": "<p>From: Wolfgang Jeltsch &lt;<a href=\"mailto:wolfgang-it@jeltsch.info\">wolfgang-it@jeltsch.info</a>&gt;<br>\nHi!</p>\n<p>Consider the following code, which is essentially a copy of the<br>\ndefinition of set-comprehension syntax from <code>HOL.Set</code>:</p>\n<p>consts C :: \"('a ⇒ bool) ⇒ 'a set\"</p>\n<p>syntax<br>\n      \"_C\" :: \"pttrn ⇒ bool ⇒ 'a set\"<br>\n      (\"(1⟨_./ _⟩)\")<br>\n    translations<br>\n      \"⟨x. P⟩\" ⇌ \"CONST C (λx. P)\"</p>\n<p>The command <code>term \"⟨x. x = x⟩\"</code> outputs <code>⟨x. x = x⟩</code>, which is what I’d<br>\nexpect. However, <code>term \"⟨x. P x⟩</code> outputs <code>C P</code> instead of <code>⟨x. P x⟩</code>.<br>\nMy guess is that Isabelle applies η-conversion, turning <code>C (λx. P x)</code><br>\ninto <code>C P</code>, which then doesn’t match the right-hand side of the<br>\ntranslation equality. The peculiar thing is that I do get output with<br>\nsyntactic sugar when using actual set comprehensions: <code>term \"{x. P x}\"</code><br>\nyields <code>{x. P x}</code>.</p>\n<p>Why does Isabelle use syntactic sugar when outputting <code>{x. P x}</code> but not<br>\nwhen outputting <code>⟨x. P x⟩</code>? Both notations are defined in essentially<br>\nthe same way.</p>\n<p>I’m using Isabelle2018.</p>\n<p>All the best,<br>\nWolfgang</p>",
        "id": 294762192,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661200161
    },
    {
        "content": "<p>From: Yakoub Nemouchi &lt;<a href=\"mailto:y.nemouchi@gmail.com\">y.nemouchi@gmail.com</a>&gt;<br>\nHi,</p>\n<p>I hope that registering the syntactic constant in the signature is not the<br>\nproblem!<br>\nBecause I spent the last few days investigating the syntax translation<br>\npackage with<br>\nthe intention of making it better! Namely, making it generate correctly<br>\nmarkup strings for syntax constant!<br>\nAnd I still do not find where the syntax introduced by syntax translation<br>\npackage is registered in Isabelle!<br>\nThe usual place is the signature! However it is not there, and my hope is<br>\nnot because of this!</p>\n<p>I am using Isabelle 2019!</p>\n<p>Best wishes,</p>\n<p>Yakoub.</p>",
        "id": 294762199,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661200167
    },
    {
        "content": "<p>From: Wolfgang Jeltsch &lt;<a href=\"mailto:wolfgang-it@jeltsch.info\">wolfgang-it@jeltsch.info</a>&gt;<br>\nHi!</p>\n<p>Anyone being able to answer this question?</p>\n<p>This issue is not severe, but it would nevertheless be nice to have a<br>\nsolution for it. Furthermore, it feels awkward to me that Isabelle seems<br>\nto treat my own declarations different from library declarations; so<br>\nhaving an explanation for this apparent mismatch would be great.</p>\n<p>Thanks in advance for any clarifications. <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>\n<p>All the best,<br>\nWolfgang</p>",
        "id": 294762309,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661200216
    },
    {
        "content": "<p>From: Wolfgang Jeltsch &lt;<a href=\"mailto:wolfgang-it@jeltsch.info\">wolfgang-it@jeltsch.info</a>&gt;<br>\nHello, again!</p>\n<p>With the help of responses from several Isabellers (both on- and off-<br>\nlist), I found a solution to this issue, namely adding the following<br>\ndeclaration:</p>\n<p>print_translation ‹[<br>\n      Syntax_Trans.preserve_binder_abs_tr'<br>\n        @{const_syntax C}<br>\n        @{syntax_const \"_C\"}<br>\n    ]›</p>\n<p>It seems to work, but I have to admit that I don’t fully understand<br>\nwhat’s going on internally. So if someone sees a problem with this<br>\nsolution, I’d be glad to hear about that.</p>\n<p>All the best,<br>\nWolfgang</p>",
        "id": 294762800,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661200443
    },
    {
        "content": "<p>From: Akihisa Yamada &lt;<a href=\"mailto:akihisayamada@nii.ac.jp\">akihisayamada@nii.ac.jp</a>&gt;<br>\nHi Wolfgang,</p>\n<p>I'm not knowledgeable enough to answer, but could investigate that also <br>\nin Set.thy, term \"{x. P x}\" initially prints \"Collect P\", but after the <br>\n\"print_translation\" with line</p>\n<p>in [(\\&lt;^const_syntax&gt;‹Collect›, setcompr_tr')] end</p>\n<p>it becomes \"{x. P x}\". So you might want to learn what <br>\n\"print_translation\" does (I can't help there).</p>\n<p>Best regards,<br>\nAkihisa</p>",
        "id": 294763073,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661200578
    }
]