[
    {
        "content": "<p>From: Peter Lammich &lt;<a href=\"mailto:peter.lammich@uni-muenster.de\">peter.lammich@uni-muenster.de</a>&gt;<br>\nHi all,</p>\n<p>I wonder whether there is any tool support (best Isabelle compatible <br>\ntool support) to reason about term rewriting systems of the following form:</p>\n<p>I have a term rewriting system defined over terms of the form:</p>\n<p>datatype 'm action = ENTER \"'m\" | LEAVE \"'m\" | USE \"'m set\"<br>\ndatatype 'm tree = NIL | NODE \"'m action\" \"'m tree list\" \"'m tree\"</p>\n<p>the rules are like this:</p>\n<p>1)  NODE (ENTER m) c1 (NODE (LEAVE m) c2 <br>\nt)                                               -&gt; NODE (USE m) (c1@c2) t<br>\n2)  NODE (ENTER m) c1 (NODE (USE m') c2 (NODE (LEAVE m) c3 t))         <br>\n-&gt; NODE (USE (m\\&lt;union&gt;m'))  (c1@c2@c3) t<br>\n3)  NODE (USE u1) c1 (NODE (USE u2) c2 t)                              <br>\n                        -&gt; NODE (USE (u1\\&lt;union&gt;u2)) (c1@c2) t<br>\n4)  NODE (USE u) (c1@NIL#c2) t                                           <br>\n                                -&gt; NODE (USE u) (c1@c2) t<br>\n5)  NODE (USE u) (c1@(NODE (USE u1) cs1 ts1)@c2@(NODE (USE u2) cs2 <br>\nts2)@c3) t -&gt; NODE (USE u) (c1@(NODE (USE (u1\\&lt;union&gt;u2)) cs1 <br>\nts1)#c2@cs2@ts2#c3) t<br>\n6)  NODE (USE u1) (c1@(NODE (USE u2) cs ts)#c2) NIL                   -&gt; <br>\nNODE (USE (u1\\&lt;union&gt;u2)) (c1@cs@ts#c2)</p>\n<p>My rewriting strategy is rewriting of an arbitrary subterm. Currently I <br>\ndefine an inductive predicate step (\"-&gt;\") by the rules 1-6 and <br>\nadditionally the inductive rules:<br>\n 7) t -&gt; t'  ==&gt;  NODE a c t                    -&gt; NODE a c t'<br>\n 8) t -&gt; t'  ==&gt;  NODE a (c1@t#c2) x   -&gt; NODE a (c1@t'#c2) x</p>\n<p>I want to show termination and confluence of this system. Termination is <br>\neasy, as the size of the tree decreases in any step, hence I easily get<br>\n  lemma \"wfP (step^--)\"</p>\n<p>By Newman's lemma (A version is in HOL/Lambda/Commutation.thy), it <br>\nsuffices to show local confluence, I even think my system above has the <br>\ndiamond property.</p>\n<p>Is there any standard approach to term rewriting systems in Isabelle or <br>\nare there some other tools out there, to show confluence (and <br>\ntermination) as automatic as possible?<br>\nAre there any suggestions on how to show local confluence of such a <br>\nsystem in Isabelle (as automatic as possible)?</p>\n<p>The main problem seems to be the non-constructor patterns (like c1@t#c2) <br>\nI use in my rewriting rules (4,5,6,8)</p>\n<p>Thanks for any suggestions/comments in advance, best<br>\n  Peter</p>",
        "id": 294065566,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660825321
    },
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\nI am not aware of any support for confluence proofs other than abstract<br>\nrelation-algebraic theorems.</p>\n<p>Have you proved confluence by hand yet? By some standard method, like<br>\nabsence of critical pairs? If not, do that first, by reducing it to some<br>\nstandard variety of rewrite system. As you correctly note, list patterns<br>\nof the form xs @ [t] @ ys could be a problem. Either you have to do<br>\nrewriting modulo associativity of @ or add associativity of @ in both<br>\ndirctions as a rewrite rule, which loses termination but may preserve<br>\nconfluence.</p>\n<p>Tobias</p>\n<p>Peter Lammich schrieb:</p>",
        "id": 294065614,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660825328
    },
    {
        "content": "<p>From: Jeremy Dawson &lt;<a href=\"mailto:jeremy@rsise.anu.edu.au\">jeremy@rsise.anu.edu.au</a>&gt;<br>\nPeter Lammich wrote:</p>\n<blockquote>\n<p>Hi all,</p>\n<p>I wonder whether there is any tool support (best Isabelle compatible <br>\ntool support) to reason about term rewriting systems of the following <br>\nform:</p>\n<p>I have a term rewriting system defined over terms of the form:</p>\n<p>datatype 'm action = ENTER \"'m\" | LEAVE \"'m\" | USE \"'m set\"<br>\ndatatype 'm tree = NIL | NODE \"'m action\" \"'m tree list\" \"'m tree\"</p>\n<p>the rules are like this:</p>\n<p>1)  NODE (ENTER m) c1 (NODE (LEAVE m) c2 <br>\nt)                                               -&gt; NODE (USE m) <br>\n(c1@c2) t<br>\n2)  NODE (ENTER m) c1 (NODE (USE m') c2 (NODE (LEAVE m) c3 t))         <br>\n-&gt; NODE (USE (m\\&lt;union&gt;m'))  (c1@c2@c3) t<br>\n3)  NODE (USE u1) c1 (NODE (USE u2) c2 t)                              <br>\n                       -&gt; NODE (USE (u1\\&lt;union&gt;u2)) (c1@c2) t<br>\n4)  NODE (USE u) (c1@NIL#c2) <br>\nt                                           <br>\n                               -&gt; NODE (USE u) (c1@c2) t<br>\n5)  NODE (USE u) (c1@(NODE (USE u1) cs1 ts1)@c2@(NODE (USE u2) cs2 <br>\nts2)@c3) t -&gt; NODE (USE u) (c1@(NODE (USE (u1\\&lt;union&gt;u2)) cs1 <br>\nts1)#c2@cs2@ts2#c3) t<br>\n6)  NODE (USE u1) (c1@(NODE (USE u2) cs ts)#c2) NIL                   <br>\n-&gt; NODE (USE (u1\\&lt;union&gt;u2)) (c1@cs@ts#c2)</p>\n<p>My rewriting strategy is rewriting of an arbitrary subterm. Currently <br>\nI define an inductive predicate step (\"-&gt;\") by the rules 1-6 and <br>\nadditionally the inductive rules:<br>\n7) t -&gt; t'  ==&gt;  NODE a c t                    -&gt; NODE a c t'<br>\n8) t -&gt; t'  ==&gt;  NODE a (c1@t#c2) x   -&gt; NODE a (c1@t'#c2) x</p>\n<p>I want to show termination and confluence of this system. Termination <br>\nis easy, as the size of the tree decreases in any step, hence I easily <br>\nget<br>\n lemma \"wfP (step^--)\"</p>\n<p>By Newman's lemma (A version is in HOL/Lambda/Commutation.thy), it <br>\nsuffices to show local confluence, I even think my system above has <br>\nthe diamond property.</p>\n<p>Is there any standard approach to term rewriting systems in Isabelle <br>\nor are there some other tools out there, to show confluence (and <br>\ntermination) as automatic as possible?<br>\nAre there any suggestions on how to show local confluence of such a <br>\nsystem in Isabelle (as automatic as possible)?</p>\n<p>The main problem seems to be the non-constructor patterns (like <br>\nc1@t#c2) I use in my rewriting rules (4,5,6,8)</p>\n<p>Thanks for any suggestions/comments in advance, best<br>\n Peter</p>\n<p>Peter,</p>\n</blockquote>\n<p>I have a lot of proofs relating to some theorems for proving rewrite <br>\nsystems terminating.  There are a number of examples of its application <br>\nto specific rewrite rule systems.</p>\n<p>The model of term which is rewritten is (n-ary function symbol) (list of <br>\nn subterms),<br>\nso rewriting a subterm naturally is rewriting f (c1@t#c2) to f (c1@t'#c2).</p>\n<p>The work is focussed on proving general results rather than applying <br>\nthem to particular systems, but you may find it useful.  At the moment <br>\nit runs in Isabelle 2005,<br>\nI started trying to update it to Isabelle 2007 but the incompatibilities <br>\nare significant.</p>\n<p>It's at <a href=\"http://users.rsise.anu.edu.au/~jeremy/isabelle/2005/snabs/\">http://users.rsise.anu.edu.au/~jeremy/isabelle/2005/snabs/</a><br>\n(also uses <a href=\"http://users.rsise.anu.edu.au/~jeremy/isabelle/2005/gen/\">http://users.rsise.anu.edu.au/~jeremy/isabelle/2005/gen/</a>)</p>\n<p>Jeremy</p>\n<p>&gt;<br>\n&gt;<br>\n&gt;</p>",
        "id": 294065632,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660825335
    }
]