[
    {
        "content": "<p>From: Eddy Westbrook &lt;<a href=\"mailto:westbrook@kestrel.edu\">westbrook@kestrel.edu</a>&gt;<br>\nHi,</p>\n<p>I was wondering if someone could help me figure out an easy way to prove termination for functions over ordinal-like datatypes. What I mean by this is datatypes T where one of the constructors for T takes a function that returns type T. The classic one is the ordinals:</p>\n<p>datatype ord<br>\n  = Zero<br>\n  | Succ ord<br>\n  | Limit \"(nat =&gt; ord)”</p>\n<p>My question is, what is the easiest and best way to write termination proofs for recursive functions over the type ord? Are there some mechanisms already available, or do I have to define my own inductive proposition or something similar? It looks like all the default mechanisms for proving termination rely on types that satisfy “size”, which ord does not because of the Limit constructor.</p>\n<p>For example, I want to define functions like these, which should be terminating:</p>\n<p>function ord_plus :: \"ord =&gt; ord =&gt; ord\"<br>\nwhere<br>\n  \"ord_plus x Zero = x\"<br>\n  | \"ord_plus x (Succ y) = Succ (ord_plus x y)\"<br>\n  | \"ord_plus x (Limit f) = Limit (\\&lt;lambda&gt; n . ord_plus x (f n))\"<br>\n  by pat_completeness auto</p>\n<p>function ord_leq :: \"ord ⇒ ord ⇒ bool\"<br>\nwhere<br>\n  \"ord_leq Zero x = True\"<br>\n  | \"ord_leq (Succ x) Zero = False\" <br>\n  | \"ord_leq (Succ x) (Succ y) = ord_leq x y\"<br>\n  | \"ord_leq (Succ x) (Limit f) = (\\&lt;exists&gt; n. ord_leq (Succ x) (f n))\"<br>\n  | \"ord_leq (Limit f) y = (\\&lt;forall&gt;n . ord_leq (f n) y)\"<br>\n  by pat_completeness auto</p>\n<p>Thanks very much for any help or suggestions.<br>\n-Eddy</p>",
        "id": 294282270,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660920749
    },
    {
        "content": "<p>From: René Thiemann &lt;<a href=\"mailto:rene.thiemann@uibk.ac.at\">rene.thiemann@uibk.ac.at</a>&gt;<br>\nDear Eddy,</p>\n<p>In your case (recursion via \"nat =&gt; _\") it might be best to use primrec instead of fun/function: </p>\n<p>primrec ord_plus :: \"ord =&gt; ord =&gt; ord\"<br>\nwhere<br>\n \"ord_plus x Zero = x\"<br>\n | \"ord_plus x (Succ y) = Succ (ord_plus x y)\"<br>\n | \"ord_plus x (Limit f) = Limit (λ n . ord_plus x (f n))\"</p>\n<p>is accepted without having to prove anything.</p>\n<p>Hope this helps,<br>\nRené</p>",
        "id": 294282287,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660920753
    },
    {
        "content": "<p>From: Dmitriy Traytel &lt;<a href=\"mailto:traytel@in.tum.de\">traytel@in.tum.de</a>&gt;<br>\nHi Eddy,</p>\n<p>as René said, I also would use primrec wherever possible. However, if <br>\nyou are bound to function you can prove termination by defining a <br>\nsubterm relation and prove that it is wellfounded:</p>\n<p>definition \"sub ≡ {(x, Succ x) | x. True} ∪ {(f n, Limit f) | n f. True}\"</p>\n<p>lemma subI[intro]:<br>\n   \"(x, Succ x) ∈ sub\"<br>\n   \"(f n, Limit f) ∈ sub\"<br>\n   unfolding sub_def by blast+</p>\n<p>lemma wf_sub[simp]: \"wf sub\"<br>\nproof (rule wfUNIVI)<br>\n   fix P x<br>\n   assume \"∀x. (∀y. (y, x) ∈ sub ⟶ P y) ⟶ P x\"<br>\n   then show \"P x\" unfolding sub_def by (induct x) blast+<br>\nqed</p>\n<p>Both of your functions can be then proved terminating via</p>\n<p>termination by (relation \"sub &lt;<em>lex</em>&gt; sub\") auto</p>\n<p>Dmitriy</p>",
        "id": 294282303,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660920760
    },
    {
        "content": "<p>From: Eddy Westbrook &lt;<a href=\"mailto:westbrook@kestrel.edu\">westbrook@kestrel.edu</a>&gt;<br>\nThanks so much for the replies; both were very helpful!</p>\n<p>-Eddy</p>",
        "id": 294282324,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660920765
    }
]