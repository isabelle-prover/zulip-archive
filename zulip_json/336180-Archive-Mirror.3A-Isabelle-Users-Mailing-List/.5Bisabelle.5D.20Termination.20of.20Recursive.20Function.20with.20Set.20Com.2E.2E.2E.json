[
    {
        "content": "<p>From: Tjark Weber &lt;<a href=\"mailto:webertj@in.tum.de\">webertj@in.tum.de</a>&gt;<br>\nHi,</p>\n<p>Consider this (simplified) example of a recursive function whose<br>\ndefinition involves set comprehension:</p>\n<p>function (sequential) f :: \"nat ⇒ nat\" where<br>\n    \"f 0 = 1\"<br>\n  | \"f n = ∑{f k | k. k &lt; n}\"<br>\n  by pat_completeness auto</p>\n<p>How to prove termination? In particular,</p>\n<p>termination f<br>\n  apply (relation \"measure id\")</p>\n<p>results in an unprovable goal.</p>\n<p>Best regards,<br>\nTjark</p>",
        "id": 294236369,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660904948
    },
    {
        "content": "<p>From: Johannes Hölzl &lt;<a href=\"mailto:hoelzl@in.tum.de\">hoelzl@in.tum.de</a>&gt;<br>\nHi Tjark and Lars,</p>\n<p>You need a congruence rule not for setsum but for {f k | k. k&lt;  n} which<br>\nis conjunction. A simple solution is to rewrite the rule with the image<br>\noperator, it already has the correct fundef-cong rule installed:</p>\n<p>function (sequential) f :: \"nat ⇒ nat\" where<br>\n     \"f 0 = 1\"<br>\n   | \"f n = ∑(f ` {..&lt; n})\"<br>\n   by pat_completeness auto</p>\n<p>termination by lexicographic_order</p>\n<p>With</p>\n<p>declare rev_conj_cong[fundef_cong]</p>\n<p>your version also works.</p>\n<ul>\n<li>Johannes</li>\n</ul>",
        "id": 294236406,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660904970
    },
    {
        "content": "<p>From: Tjark Weber &lt;<a href=\"mailto:webertj@in.tum.de\">webertj@in.tum.de</a>&gt;<br>\nIndeed it does. Many thanks!</p>\n<p>Best regards,<br>\nTjark</p>",
        "id": 294236412,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660904972
    }
]