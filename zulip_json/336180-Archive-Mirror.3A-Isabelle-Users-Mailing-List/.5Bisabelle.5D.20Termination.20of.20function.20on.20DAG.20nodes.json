[
    {
        "content": "<p>From: Rupert Swarbrick &lt;<a href=\"mailto:rswarbrick@gmail.com\">rswarbrick@gmail.com</a>&gt;<br>\nHi there,</p>\n<p>I have a DAG (directed acyclic graph) with an associated height function<br>\n(a function from nodes to nat such that children have a lower height<br>\nthan their parents). It's easy enough to prove that this gives an<br>\ninduction rule of the form \"(P on every child =&gt; P on parent) =&gt; P\".</p>\n<p>What I want to do, however, is to define a function on graph nodes of<br>\nthe form:</p>\n<p>foo x = bar x + setsum foo (children x)</p>\n<p>Informally, this is well defined because I can define it for each height<br>\ninductively. However, I can't see how to prove this using<br>\nfunction/termination.</p>\n<p>Here's a cut down example:</p>\n<p>theory foo<br>\n    imports Main<br>\n  begin</p>\n<p>text {*<br>\n    A really simple locale that represents a DAG by requiring it to have a<br>\n    height function. The nodes of the graph are the universe of 'a.<br>\n  *}<br>\n  locale dag =<br>\n    fixes children :: \"'a ⇒ 'a set\"<br>\n    fixes height :: \"'a ⇒ nat\"<br>\n    assumes \"x ∈ children y ⟹ height x &lt; height y\"<br>\n    fixes label :: \"'a ⇒ nat\"</p>\n<p>context dag begin</p>\n<p>function foo :: \"'a ⇒ nat\" where<br>\n    \"foo x = label x + setsum foo (children x)\"<br>\n    by auto<br>\n  termination<br>\n    apply (relation \"measure (λ x. height x)\")</p>\n<p>This isn't looking promising. Ignoring the fact that I might have chosen<br>\na slightly wrong measure, I end up with the following goals:</p>\n<p>proof (prove)<br>\n  goal (2 subgoals):</p>\n<p>1. wf (measure height)<br>\n   2. ⋀x xa. (xa, x) ∈ measure height</p>\n<p>Note that the second goal doesn't say anything about xa being a child of<br>\nx.</p>\n<p>Am I doing something wrong? How can I tell the function/termination<br>\nmachinery what I'm trying to say?</p>\n<p>Also, a meta-question: I couldn't figure out the answer from the<br>\notherwise extremely helpful \"Defining Recursive Functions in<br>\nIsabelle/HOL\" document. Is there somewhere else I should be looking for<br>\nsuch things?</p>\n<p>Many thanks,</p>\n<p>Rupert</p>",
        "id": 294675883,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661174926
    },
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\nYou are in luck, the solution is easy, once you understand what's missing:</p>\n<p>declare setsum.cong[fundef_cong]</p>\n<p>You definition uses higher-order recursion, i.e. the recursive function foo is <br>\nnot applied directly to any arguments but passed to setsum, and who knows what <br>\nsetsum might be doing with it. The congruence rule setsum.cong explains that <br>\nsetsum applies foo only to elements of the set. The attribute [fundef_cong] <br>\npasses this information on to fun/function. I will enable it in the distribution <br>\nto prevent other people stumbling over it again.</p>\n<p>Tobias<br>\n<a href=\"/user_uploads/14278/u1bDYguH_z65BLee3y3pvpI3/smime.p7s\">smime.p7s</a></p>",
        "id": 294675892,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661174929
    },
    {
        "content": "<p>From: Rupert Swarbrick &lt;<a href=\"mailto:rswarbrick@gmail.com\">rswarbrick@gmail.com</a>&gt;<br>\nThat's brilliant. Thank you very much for the explanation.</p>\n<p>Rupert</p>\n<p>Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt; writes:</p>",
        "id": 294675961,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661174953
    }
]