[
    {
        "content": "<p>From: Joachim Breitner &lt;<a href=\"mailto:breitner@kit.edu\">breitner@kit.edu</a>&gt;<br>\nHi,</p>\n<p>the declaration</p>\n<p>inductive foo :: \"int ⇒ bool\" where \"P x ⟹ foo x\" -- \"note the free P!\"</p>\n<p>makes the system loop during \"Proving the simplification rules ...\".<br>\nSuch an inductive predicate is probably not very useful, but it maybe it<br>\nis still possible to make \"inductive\" a mit more robust in this respect?</p>\n<p>Thanks,<br>\nJoachim<br>\n<a href=\"/user_uploads/14278/_DqX-3G4UObKymlMvwnqNFzz/signature.asc\">signature.asc</a></p>",
        "id": 294327459,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660929066
    },
    {
        "content": "<p>From: Florian Haftmann &lt;<a href=\"mailto:florian.haftmann@informatik.tu-muenchen.de\">florian.haftmann@informatik.tu-muenchen.de</a>&gt;<br>\nHi Joachmim,</p>\n<p>thanks for your report.  According to your description, the computation<br>\nof the inductive.simps seems to be faulty.  Is anybody out there who can<br>\ninvestigate this?</p>\n<p>All the best,<br>\n    Florian<br>\n<a href=\"/user_uploads/14278/JsDZUzOTYJouq-GGs5oBFNcW/signature.asc\">signature.asc</a></p>",
        "id": 294327885,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660929189
    }
]