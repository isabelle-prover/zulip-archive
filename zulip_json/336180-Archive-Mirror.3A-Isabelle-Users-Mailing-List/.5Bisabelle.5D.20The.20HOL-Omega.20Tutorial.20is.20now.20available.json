[
    {
        "content": "<p>From: Peter Vincent Homeier &lt;<a href=\"mailto:palantir@trustworthytools.com\">palantir@trustworthytools.com</a>&gt;<br>\nI am pleased to announce that, as promised, the HOL-Omega Tutorial is now<br>\navailable, at</p>\n<p><a href=\"http://www.trustworthytools.com/holw/tutorial.pdf\">http://www.trustworthytools.com/holw/tutorial.pdf</a></p>\n<p>The HOL-Omega system is a significant extension of the popular and mature<br>\nHOL4 theorem prover, which has been under development for twenty-five<br>\nyears. The HOL-Omega logic is virtually completely backwards compatible<br>\nwith HOL4, so that libraries, applications, and developments written for<br>\nHOL4 will work in HOL-Omega without any changes, with very few exceptions.</p>\n<p>HOL4 users are thus encouraged to investigate HOL-Omega without any loss of<br>\nfunctionality.</p>\n<p>But HOL-Omega adds significant new power of interest to all users of<br>\ntheorem provers, primarily centered around two key ideas, and what flows<br>\nfrom each:</p>\n<p>(1) Types can be abstracted by type variables (similar to how terms are<br>\nabstracted by term variables in the lambda calculus).</p>\n<p>--- Type operators are curried, so that they may take one argument at a<br>\ntime.</p>\n<p>--- Every type has a {\\it kind}; kinds determine which type applications<br>\nare sensible.</p>\n<p>--- Type variables can represent type operators.</p>\n<p>(2) Terms can be abstracted by type variables (similar to System F).</p>\n<p>--- The type of such an abstraction is a universal type.</p>\n<p>--- Such an abstraction may be applied as a function to a type argument.</p>\n<p>--- Such applications are managed by classifying all types into ranks.</p>\n<p>These extensions of traditional higher order logic in a classical setting<br>\nwere thought impossible for many years, proven to be inconsistent according<br>\nto Girard's paradox. But by the careful structuring of the type system by<br>\nranks, soundness is maintained and Girard's paradox is defeated.</p>\n<p>This means that unlike other advanced-logic theorem provers that restrain<br>\ntheir logics to an intuitionistic logic, HOL-Omega is a higher order logic<br>\nin a fully classical setting, where the law of the excluded middle holds,<br>\nequality of functions or predicates can be proven by extensionality, the<br>\nHilbert epsilon operator is available for non-deterministic choice, and all<br>\ntypes are inhabited, supporting traditional HOL theorems like |- (!x. P x)<br>\n==&gt; (?x. P x).</p>\n<p>The effect of these design choices is that the HOL-Omega logic is much more<br>\ncongenial, intuitive, and easy to work in than an intuitionistic logic,<br>\nwhile still providing the powerful new forms of abstraction listed above.</p>\n<p>If the reader is interested and would like to try it, instructions for<br>\nobtaining and installing theHOL-Omega system may be found at</p>\n<p><a href=\"http://www.trustworthytools.com/id17.html\">http://www.trustworthytools.com/id17.html</a></p>\n<p>Sincerely,</p>\n<p>Peter V. Homeier</p>",
        "id": 294233009,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660903438
    },
    {
        "content": "<p>From: Peter Vincent Homeier &lt;<a href=\"mailto:palantir@trustworthytools.com\">palantir@trustworthytools.com</a>&gt;<br>\nThere was a bug in the previous version of the HOL-Omega system which<br>\nprevented it from building with Poly/ML 5.5, the current version of Poly/ML.</p>\n<p>This has been fixed and posted to the public repository for HOL-Omega, and<br>\nthe current version should build correctly. If anyone has tried building HOL<br>\n-Omega and been frustrated, please try again with this new version of HOL-<br>\nOmega.</p>\n<p>Many thanks to Robert Solovay for reporting this bug.</p>\n<p>Sincerely,</p>\n<p>Peter V. Homeier</p>",
        "id": 294237774,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660905537
    }
]