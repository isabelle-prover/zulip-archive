[
    {
        "content": "<p>From: Joachim Breitner &lt;<a href=\"mailto:breitner@kit.edu\">breitner@kit.edu</a>&gt;<br>\nHi,</p>\n<p>this is slightly off topic and in no way related to the recent<br>\ndiscussion about foundations and certification, but I created a new<br>\ntheorem prover.</p>\n<p>But first things first:<br>\n(The following text is also on my blog at <a href=\"https://www.joachim-breitner.de/blog/682\">https://www.joachim-breitner.de/blog/682</a>)</p>\n<p>In a few weeks, I will have the opportunity to offer a weekend workshop<br>\nto selected and motivated high school students to a topic of my choice.<br>\nMy idea is to tell them something about logic, proofs, and the joy of<br>\nsearching and finding proofs, and thegratification of irrevocable<br>\ntruths.</p>\n<p>While proving things on paper is already quite nice, it is much more<br>\nfun to use an interactive theorem prover, such as Isabelle, Coq or<br>\nAgda: You get immediate feedback, you can experiment and play around if<br>\nyou are stuck, and you get lots of small successes. Someone once called<br>\ninteractive theorem proving “the worlds most geekiest videogame”.</p>\n<p>Unfortunately, I don’t think one can get high school students without<br>\nany prior knowledge in logic, or programming, or fancy mathematical <br>\nsymbols, to do something meaningful with a system like Isabelle, so I <br>\nneed something that is (much) easier to use. I always had this idea in <br>\nthe back of my head that proving is not so much about writing text (as <br>\nin “normally written” proofs) or programs (as in Agda) or labeled <br>\nstatements (as in Hilbert-style proofs), but rather something involving<br>\nfacts that I have proven so far floating around freely, and way to <br>\ncombine these facts to new facts, without the need to name them, or put<br>\nthem in a particular order or sequence. In a way, I’m looking for <br>\nlabVIEW wrestled through the Curry-Horward-isomorphism.</p>\n<p>So I set out, rounded up a few contributors, implemented this idea, and<br>\nnow I proudly present:</p>\n<p>The Incredible Proof Machine<br>\n<a href=\"http://incredible.nomeata.de/\">http://incredible.nomeata.de/</a></p>\n<p>This interactive theorem prover allows you to do perform proofs purely<br>\nby dragging blocks (representing proof steps) onto the paper and <br>\nconnecting them properly. There is no need to learn syntax, and hence<br>\nno frustration about getting that wrong. Furthermore, it comes with a<br>\nnumber of example tasks to experiment with, so you can simply see it as<br>\na challenging computer came and work through them one by one, learning<br>\nsomething about the logical connectives and how they work as you go.</p>\n<p>For the actual workshop, my plan is to let the students first <br>\ntry to solve the tasks of one session on their own, let them draw their<br>\nown conclusions and come up with an idea of what they just did, and<br>\nthen deliver an explanation of the logical meaning of what they did.</p>\n<p>The implementation is heavily influenced by Isabelle: The software does<br>\nnot know anything about, say, conjunction (∧) and implication (→). To <br>\nthe core, everything is but an untyped lambda expression, and when two <br>\nblocks are connected, it does unification of the proposition present on<br>\neither side. This general framework is then instantiated by specifying<br>\nthe basic rules (or axioms) in a descriptive manner. It is quite<br>\nfeasible to implement other logics or formal systems on top of this as<br>\nwell.</p>\n<p>At this point I must thank Tobias for writing up his pattern<br>\nunification algorith so nicely back then:<br>\n<a href=\"http://www21.in.tum.de/~nipkow/pubs/lics93.html\">http://www21.in.tum.de/~nipkow/pubs/lics93.html</a></p>\n<p>Another influence of Isabelle is the non-linear editing: You neither <br>\nhave to create the proof in a particular order nor have to manually <br>\nmanage a “proof focus”. Instead, you can edit any bit of the proof at <br>\nany time, and the system checks all of it continuously.</p>\n<p>As always, I am keen on feedback. Also, if you want to use this for<br>\nyour own teaching or experimenting needs, let me know. We have a<br>\nmailing list for the project, the code is on GitHub, where you can also<br>\nfile bug reports and feature requests. Contributions are welcome! All<br>\naspects of the logic are implemented in Haskell and compiled to<br>\nJavaScript using GHCJS, the UI is plain hand-written and messy<br>\nJavaScript code, using JointJS to handle the graph interaction.</p>\n<p>Obviously, there is still plenty that can be done to improve the <br>\nmachine. In particular, the ability to create your own proof blocks, <br>\nsuch as proof by contradiction, prove them to be valid and then use<br>\nthem  in further proofs, is currently being worked on. And while the<br>\npage will store your current progress, including all proofs you create,<br>\nin your browser, it needs better ways to save, load and share tasks,<br>\nblocks and proofs. Also, we’d like to add some gamification, i.e.<br>\nachievements  (“First proof by contradiction”, “50 theorems proven”),<br>\nstatistics, maybe a “share theorem on twitter” button.</p>\n<p>Enjoy!<br>\nJoachim<br>\n<a href=\"/user_uploads/14278/d2gnX_ay7PyljjaVzVGa0sLO/signature.asc\">signature.asc</a></p>",
        "id": 294653625,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661167126
    },
    {
        "content": "<p>From: Peter Lammich &lt;<a href=\"mailto:lammich@in.tum.de\">lammich@in.tum.de</a>&gt;<br>\nNice work.</p>\n<p>Just one experience when I played around with it, which puzzled me, and<br>\nmight severely puzzle your students: I tried A&amp;B&amp;C ==&gt; A&amp;C, my attempt<br>\nis attached.</p>\n<p>As I did not know whether &amp; binds to left or right, I ended up attaching<br>\nthe line to the wrong exit. But then, I got an error on the line from<br>\nthe start, which was fine previously. I.e., when I attach something to a<br>\nblock, I may get an error at a seemingly unrelated point.</p>\n<p>Moreover, if I have something like<br>\n  A&amp;B&amp;C ---&gt; (dest-AND) </p>\n<p>I would like to \"see\" which propositions are available at the outputs.</p>\n<p>-- Peter<br>\n<a href=\"/user_uploads/14278/OgPGNi5Ho3eyKbHZuM5c0o-g/incredible-proof.svg\">incredible-proof.svg</a></p>",
        "id": 294653651,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661167135
    },
    {
        "content": "<p>From: Joachim Breitner &lt;<a href=\"mailto:breitner@kit.edu\">breitner@kit.edu</a>&gt;<br>\nDear Peter,</p>\n<p>Am Donnerstag, den 24.09.2015, 17:54 +0200 schrieb Peter Lammich:</p>\n<blockquote>\n<p>Just one experience when I played around with it, which puzzled me,<br>\nand might severely puzzle your students: I tried A&amp;B&amp;C ==&gt; A&amp;C, my attempt<br>\nis attached.</p>\n<p>As I did not know whether &amp; binds to left or right, I ended up <br>\nattaching the line to the wrong exit. But then, I got an error on the <br>\nline from the start, which was fine previously. I.e., when I attach <br>\nsomething to a block, I may get an error at a seemingly unrelated<br>\npoint.</p>\n</blockquote>\n<p>Right. One of my ideas is to keep track of the order in which<br>\nconnections have been added (or been changed), and apply unification in<br>\nthat order. In fact, I think I forgot that I planned to do this, so I<br>\nbetter create an issue for it:<br>\n<a href=\"https://github.com/nomeata/incredible/issues/26\">https://github.com/nomeata/incredible/issues/26</a></p>\n<blockquote>\n<p>Moreover, if I have something like<br>\n  A&amp;B&amp;C ---&gt; (dest-AND) </p>\n<p>I would like to \"see\" which propositions are available at the<br>\noutputs.</p>\n</blockquote>\n<p>You can always “pull out” a connection (without connecting it to<br>\nsomething else) and see what’s on it. But it would be more convenient<br>\nto see something right away; this is also planned:<br>\n<a href=\"https://github.com/nomeata/incredible/issues/24\">https://github.com/nomeata/incredible/issues/24</a></p>\n<p>Greetings,<br>\nJoachim<br>\n<a href=\"/user_uploads/14278/w_A77RTOLrcA4FImr0MOzfZA/signature.asc\">signature.asc</a></p>",
        "id": 294653673,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661167143
    },
    {
        "content": "<p>From: Christian Sternagel &lt;<a href=\"mailto:c.sternagel@gmail.com\">c.sternagel@gmail.com</a>&gt;<br>\n-----BEGIN PGP SIGNED MESSAGE-----<br>\nHash: SHA256</p>\n<p>Dear Joachim,</p>\n<p>nice work! This reminds me of two things:</p>\n<p>1) I saw something similar (?) a few month ago (IIRC for plain<br>\npropositional logic and implemented via first-order unification),<br>\nwhich was the result of a student project supervised by Vincent van<br>\nOostrom (who I CC'ed). AFAIK it is only available as non-free iPhone<br>\napp. Anyway, maybe there are ideas that could be exchanged?</p>\n<p>2) Since you mentioned the nice paper by Tobias (on higher-order<br>\npattern unification). Did you also implement the \"devar\" optimization<br>\nof the same paper? Just recently, Julian Nagele (a PhD student in our<br>\ngroup; who I also CC'ed), stumbled upon a problem with \"devar\" when<br>\nimplementing the same algorithm. I do not remember the details (maybe<br>\nJulian could comment), only that a little bit of hg-digging revealed<br>\nthe following changeset:</p>\n<p>changeset:   12232:ff75ed08b3fb<br>\nuser:        berghofe<br>\ndate:        Mon Nov 19 17:34:02 2001 +0100<br>\nsummary:     Replaced devar by Envir.head_norm</p>\n<p>(referring to src/Pure/pattern.ML)</p>\n<p>I'm curios to whether others already had a similar experience with<br>\n\"devar\" and what the intention behind this change was?</p>\n<p>cheers</p>\n<p>chris</p>\n<p>-----BEGIN PGP SIGNATURE-----<br>\nVersion: GnuPG v2</p>\n<p>iQIcBAEBCAAGBQJWBRBEAAoJECdPcHF8FDHN7WoP/R0tcgBMqAPHcvLcWfHbV10A<br>\nrYp2pucDYGzlbwmSK8AwK10bZ+UkrIwCESFHhxYyZABe/RyM8KbfgIQarcez1EkO<br>\nO6RPOHnCqPNH+PDuT7rvLERqOM6afmNktf3o7p45xcR63enHkvGiNnVJ2Ur7z5Li<br>\nXXQwyzypr+G/2kjFLu3+ajy7P1mNpD8xBzz7Y4E3OH2+fX7IZVT8tLIcT0hGf0ku<br>\n0ey592j+Dy6c0s9H5q2GqyvPhWsBqjAdkx5UHwLAtBx1mguVLSXsLlyymdMOx+dT<br>\nTKeHLRvvVMW7sSW96uZ1P1902LaQm4YCD5HN9ZDg0LGw7V1Qco5lT1S4BCzDER4u<br>\ntJPL+7t+LEHQZr5dSJW4kpQ+aZQfNoNBAYAIztm1bhgObNgWd3N38CtGzCFll3uE<br>\nHU5ueLEdkjEGWgyOeCvjO4Ztono3xUuYXUdgYy0mrEGYmERTyVEM5Fj2ml6Dw/jp<br>\nnFKtXJKqmrzSGzSEEfF6YLFEOhI8CBZrCTLcDMfEWWnRdTLKRfdumQwMR0tvJgmB<br>\nYsBE3FkkY+UNIpZA53jgPZM05FMNcBtMQpBV/G29gl6fRZRbtEiZVtWJgeqQa4F0<br>\nTpEZ26qNPFZBJMjI0ZBM1Df1F8yUgA4f48pekMVU4TGhfGrXX5UtB4AavdPEh1Ec<br>\nluroBAze10VYXH6FszXd<br>\n=1iKD<br>\n-----END PGP SIGNATURE-----</p>",
        "id": 294653721,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661167164
    },
    {
        "content": "<p>From: Joachim Breitner &lt;<a href=\"mailto:breitner@kit.edu\">breitner@kit.edu</a>&gt;<br>\nDear Christian,</p>\n<p>Are you referring to “§9 Minimizing new variables” in the paper? Since<br>\nthis seems to be part of the ML code in <br>\n<a href=\"http://www21.in.tum.de/~nipkow/pubs/lics93-alpha.ML\">http://www21.in.tum.de/~nipkow/pubs/lics93-alpha.ML</a> which I based my<br>\nimplementation on, I also have that. If there is anything wrong with<br>\nit, I’d like to know of course!</p>\n<p>Thanks,<br>\nJoachim<br>\n<a href=\"/user_uploads/14278/VOBw8mXBwWQxGa_bKUCh0LDR/signature.asc\">signature.asc</a></p>",
        "id": 294653732,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661167168
    },
    {
        "content": "<p>From: Christian Sternagel &lt;<a href=\"mailto:c.sternagel@gmail.com\">c.sternagel@gmail.com</a>&gt;<br>\n-----BEGIN PGP SIGNED MESSAGE-----<br>\nHash: SHA256</p>\n<p>Dear Joachim,</p>\n<p>Sorry, I really can't remember the details, but I'm pretty sure that<br>\nit was just about the concrete implementation of the \"devar\" function<br>\n(section 6; so it should not be related to section 9).</p>\n<p>I hope that Julian will fill in the details at some point ;)</p>\n<p>cheers</p>\n<p>chris</p>\n<p>-----BEGIN PGP SIGNATURE-----<br>\nVersion: GnuPG v2</p>\n<p>iQIcBAEBCAAGBQJWBTfoAAoJECdPcHF8FDHN9JcQALciOoEOX4B5oATc3kPTqHMU<br>\nKkM+0RqJmzgJz74SmqqkEtQjm/ecfGP8CYTl3g8cctHjiJD/V1+IFi7whc8o/75I<br>\ngQ77hh6g7UBx+h8Gv4r8RLonBN59A4FKv7iBmzy0T9PsAAL6uhSlGs6Andgmj4oP<br>\n90yMKvC/7wa5Ub0YLVS8K8MPgppYCKh+oTi+xIf9nHzKQRKAVLgu5ot/whF9is3C<br>\nuniP428jmryLElJlM+LHm87PMmvGxd0XaRG9LpMRa9NxD0r17dOEG1RXNhVdxcjj<br>\nixHKP8R7nTQD6VwBxMwxBgY4NvbLCZWQT7y/Agmitg3CF9zdA89tZKt2EX8Cqlnr<br>\nMSg8yjH8oiW3G6/2msAep9hiqXylgtJNqnrgW6DjorFjLkLNXWLmwdz6TT1mHg24<br>\n/+Cbf2hHUZJERdK/qZ48TOGVaI66x1Szf5JXOwK4McBjDLtBgBe2lFMh4aFQ6HQF<br>\n9XVF0tEG2pC170JBscbSuXioeNdUF+u6ggqP0vDKDOS/I8kzWgdd5FSqCC1BQBth<br>\niLSlTlj8c76BE4Zzu+mb7mWth63qv3RbKU4PQw8cmYSEBDRa4tYWPY1OvO+udSOG<br>\nAXsc5+GOw3BBwMFyUS9Agw8PAsv6rJEhv4OXaiYGi8ZyMZu8pRDCMNA2IRosLJxs<br>\nYTCvUwAlaMQ0zL4re4DR<br>\n=5Wgq<br>\n-----END PGP SIGNATURE-----</p>",
        "id": 294653752,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661167174
    },
    {
        "content": "<p>From: Andrei Popescu &lt;<a href=\"mailto:A.Popescu@mdx.ac.uk\">A.Popescu@mdx.ac.uk</a>&gt;<br>\nBeautiful work, Joachim! This is definitely useful for teaching, not only high school students, but also beginner college students.<br>\nHere is some related work:</p>\n<p><a href=\"https://code.google.com/p/visual-lambda/\">https://code.google.com/p/visual-lambda/</a></p>\n<p>All the best, <br>\n  Andrei</p>",
        "id": 294653769,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661167180
    }
]