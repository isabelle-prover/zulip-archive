[
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nDear Isabelle users,</p>\n<p>please see this blog post on the new Isabelle server:<br>\n<a href=\"https://sketis.net/2018/the-isabelle-server-responsive-control-of-prover-sessions\">https://sketis.net/2018/the-isabelle-server-responsive-control-of-prover-sessions</a></p>\n<p>It should already be usable, although there are no users yet.</p>\n<p>In the coming months before the Isabelle2018 release, it should become<br>\nreally robust and stable, but that requires feedback from applications<br>\nto get there.</p>\n<p>Makarius</p>",
        "id": 294730060,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661187695
    },
    {
        "content": "<p>From: Walther Neuper &lt;<a href=\"mailto:wneuper@ist.tugraz.at\">wneuper@ist.tugraz.at</a>&gt;<br>\nOur application<br>\n<a href=\"https://intra.ist.tugraz.at/hg/isa\">https://intra.ist.tugraz.at/hg/isa</a><br>\n<a href=\"https://intra.ist.tugraz.at/hg/isac\">https://intra.ist.tugraz.at/hg/isac</a><br>\n(server and client respectively) uses libisabelle<br>\n<a href=\"https://github.com/larsrh/libisabelle\">https://github.com/larsrh/libisabelle</a><br>\nto connect Isabelle with our Java/Scala front-end. This connection is<br>\nreliable and well maintained over Isabelle versions.</p>\n<p>If I understand correctly from a quick review of the material pointed at<br>\nabove, then the new Isabelle server would allow to replace libisabelle<br>\nwith little effort and open new prospects for further development of our<br>\napplication.</p>\n<p>So we would be interested to invest the efforts required. However, we<br>\nwould probably need some help, since we have no expert in our team to<br>\ndeal with intricacies of TCP/IP etc presently.</p>\n<p>Walther</p>",
        "id": 294730231,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661187745
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nOn 29/03/18 11:58, Walther Neuper wrote:</p>\n<blockquote>\n<blockquote>\n<p>Our application<br>\n<a href=\"https://intra.ist.tugraz.at/hg/isa\">https://intra.ist.tugraz.at/hg/isa</a><br>\n<a href=\"https://intra.ist.tugraz.at/hg/isac\">https://intra.ist.tugraz.at/hg/isac</a><br>\n(server and client respectively) uses libisabelle<br>\n<a href=\"https://github.com/larsrh/libisabelle\">https://github.com/larsrh/libisabelle</a><br>\nto connect Isabelle with our Java/Scala front-end. This connection is<br>\nreliable and well maintained over Isabelle versions.</p>\n</blockquote>\n<p>If I understand correctly from a quick review of the material pointed at<br>\nabove, then the new Isabelle server would allow to replace libisabelle<br>\nwith little effort and open new prospects for further development of our<br>\napplication.</p>\n</blockquote>\n<p>I can't say much about libisabelle: I've read the sources 2-3 times,<br>\nwithout really understanding how it works and what it does. My general<br>\nimpression is that it connects to a raw toplevel environment without<br>\nPIDE document context.</p>\n<p>The point of the new Isabelle Server (which was already planned in<br>\n2009/2010 but only now implemented) is to have a \"headless\" PIDE<br>\nconnection. I.e. some other program throws theory sources declaratively<br>\nat the server and gets feedback according to the built-in policies (e.g.<br>\nfor parallel checking).</p>\n<blockquote>\n<p>So we would be interested to invest the efforts required. However, we<br>\nwould probably need some help, since we have no expert in our team to<br>\ndeal with intricacies of TCP/IP etc presently.</p>\n</blockquote>\n<p>You do not have to understand TCP/IP. Connecting to a server e.g. on the<br>\nJVM is trivial, you merely open the socket like this (with the port<br>\nreported by the \"isabelle server\" tool):</p>\n<p>$ isabelle scala</p>\n<p>import java.net.{Socket, InetAddress}<br>\n  val socket = new Socket(InetAddress.getByName(\"127.0.0.1\"), port)</p>\n<p>Now you can read/write over the socket byte channels as usual. Here is<br>\nthe most primitive example (with the password reported by the \"isabelle<br>\nserver\" tool):</p>\n<p>import isabelle._<br>\n  socket.getOutputStream.write(UTF8.bytes(password + \"\\n\"))<br>\n  socket.getOutputStream.flush()</p>\n<p>socket.getInputStream.read()<br>\n  socket.getInputStream.read()<br>\n  socket.getInputStream.read()</p>\n<p>The latter should give \"OK \", i.e. 79, 75, 32 (the response is actually<br>\na bit longer).</p>\n<p>The remaining work is to read and write messages in the format described<br>\nin chapter 4 of the \"system\" manual. It also involves JSON syntax.</p>\n<p>If you are already on the JVM platform, you can bypass the server and<br>\nuse the library functions for Scala (not Java) directly. E.g. like this:</p>\n<p>$ isabelle scala</p>\n<p>val options = Options.init()<br>\n  val session = Thy_Resources.start_session(options, \"HOL\", progress =<br>\nnew Console_Progress)<br>\n  val result = session.use_theories(List(\"~~/src/HOL/ex/Seq\"), progress<br>\n= new Console_Progress)</p>\n<p>Then you can inspect result.nodes, result.messages(node_name) etc. -- it<br>\nprovides a representation that is closer to PIDE, while the server<br>\nimitates command-line output, see also<br>\n<a href=\"http://isabelle.in.tum.de/repos/isabelle/annotate/ad735a551a11/src/Pure/Tools/server_commands.scala#l200\">http://isabelle.in.tum.de/repos/isabelle/annotate/ad735a551a11/src/Pure/Tools/server_commands.scala#l200</a></p>\n<p>Makarius</p>",
        "id": 294730245,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661187751
    },
    {
        "content": "<p>From: Lars Hupel &lt;<a href=\"mailto:hupel@in.tum.de\">hupel@in.tum.de</a>&gt;<br>\nThe main purpose of libisabelle is to offer a uniform,<br>\nversion-independent way to put Isabelle under library control, as<br>\nopposed to the usual model of Isabelle controlling other tools. The<br>\nfeatures supported are informed by wanting Isabelle (and the AFP) to be<br>\njust another JAR file that your application can link to.</p>\n<p>If you don't need that, the existing tooling also allows you to manage<br>\nIsabelle installations on your local machine, sort of like a package<br>\nmanager. But that's about it. libisabelle has no notion of networks, nor<br>\ndoes it try to reimplement Isabelle features.</p>\n<p>Lars</p>",
        "id": 294730252,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661187756
    }
]