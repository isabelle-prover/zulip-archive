[
    {
        "content": "<p>From: Ken Kubota &lt;<a href=\"mailto:mail@kenkubota.de\">mail@kenkubota.de</a>&gt;<br>\nHi John,</p>\n<p>Thanks for the additional information. I will need some time to digest the <br>\npapers you refer to.</p>\n<p>Concerning the definitional principles of HOL, already in the past I have spent <br>\nsome thoughts about how to express the same in Q0/R0, and consider including <br>\nsome remarks in my R0 publication.</p>\n<p>To avoid misunderstandings, let me refer to the extensions of the logic as <br>\ndiscussed in sections 2.5.1 - 2.5.4 of the current HOL4 manual at:<br>\n<a href=\"http://freefr.dl.sourceforge.net/project/hol/hol/kananaskis-10/kananaskis-10-logic.pdf\">http://freefr.dl.sourceforge.net/project/hol/hol/kananaskis-10/kananaskis-10-logic.pdf</a></p>\n<p>2.5.1 Extension by constant definition (John: \"new_definition\")</p>\n<p>In the R0 implementation, definitions are not implemented as part of the <br>\nlogical kernel, but are labels attached to well-formed formulae (wffs) used for <br>\nparsing and printing. I consider definitions simply as abbreviations, hence <br>\nthere is no need to make them part of the logical reasoning by introducing <br>\ntheorems for them. Consequently, definitions (abbreviations) can be removed and <br>\nintroduced again at any time without consequences for the reasoning itself, and <br>\nwithout the danger of causing an inconsistency. (The wff to be abbreviated <br>\ndoesn't even need to be a closed term.) See the following R0 log, where <br>\ncomments start with (##) and output with (#):</p>\n<h2>print universal quantifier ALL (A)</h2>\n<h2>(short and long - fully typed - version)</h2>\n<p>A</p>\n<h1>wff      29 :  [\\t.[\\p.((=_[\\x.T])_p)]]                   :=  A</h1>\n<h1>w typd   29 :</h1>\n<p>[\\t{^}{^}.[\\p{{o,t{^}}}{{o,t{^}}}.((={{{o,{o,t{^}}},{o,t{^}}}}_[\\x{t{^}}{t{^}}.T<br>\n{o}]{{o,t{^}}}){{o,{o,t{^}}}}_p{{o,t{^}}}{{o,t{^}}}){o}]{{o,{o,t{^}}}}]</p>\n<h2>for the formatted version, see p. 356 at:</h2>\n<h2><a href=\"http://www.kenkubota.de/files/R0_draft_excerpt_with_definitions_and_groups.pdf\">http://www.kenkubota.de/files/R0_draft_excerpt_with_definitions_and_groups.pdf</a></h2>\n<h2>print Axiom 1 (Law of Excluded Middle) - with defined ALL</h2>\n<p>%A1</p>\n<h1>((=_((&amp;_(g_T))_(g_F)))_((A_o)_[\\x.(g_x)]))</h1>\n<p>[...]</p>\n<h2>for the formatted version, see p. 351 at:</h2>\n<h2><a href=\"http://www.kenkubota.de/files/R0_draft_excerpt_with_axioms_and_proof_of_C_function.pdf\">http://www.kenkubota.de/files/R0_draft_excerpt_with_axioms_and_proof_of_C_function.pdf</a></h2>\n<h2>or Andrews' version for Q0 at:</h2>\n<h2><a href=\"http://plato.stanford.edu/entries/type-theory-church/#ForBasEqu\">http://plato.stanford.edu/entries/type-theory-church/#ForBasEqu</a></h2>\n<h2>remove definition of universal quantifier ALL (A)</h2>\n<p>:= A</p>\n<h2>print Axiom 1 (Law of Excluded Middle) - without defined ALL</h2>\n<p>%A1</p>\n<h1>((=_((&amp;_(g_T))_(g_F)))_(([\\t.[\\p.((=_[\\x.T])_p)]]_o)_[\\x.(g_x)]))</h1>\n<p>[...]</p>\n<h2>define universal quantifier again (with type information)</h2>\n<p>:= A [\\t{^}{^}.[\\p{{o,t{^}}}{{o,t{^}}}.((={{{o,{o,t{^}}},{o,t{^}}}}_[\\x{t{^}}{t{^}}.T<br>\n{o}]{{o,t{^}}}){{o,{o,t{^}}}}_p{{o,t{^}}}{{o,t{^}}}){o}]{{o,{o,t{^}}}}]</p>\n<h1>wff      29 :  [\\t.[\\p.((=_[\\x.T])_p)]]                   :=  A</h1>\n<h2>print Axiom 1 (Law of Excluded Middle) - with defined ALL again</h2>\n<h2>there is no difference to the original result above</h2>\n<p>%A1</p>\n<h1>((=_((&amp;_(g_T))_(g_F)))_((A_o)_[\\x.(g_x)]))</h1>\n<p>[...]</p>\n<h2>remove all definitions used in Axiom 1</h2>\n<p>:= &amp;; := T; := F; := A</p>\n<h2>print Axiom 1 (Law of Excluded Middle) - without any definition, as it is</h2>\n<p>actually in the logic</p>\n<h2>consisting only of the constant equality (=), variables, lambda abstraction</h2>\n<p>(\\), and application (_)<br>\n%A1</p>\n<h1></h1>\n<p>((=_(([\\x.[\\y.((=_[\\g.((g_((=_=)_=))_((=_=)_=))])_[\\g.((g_x)_y)])]]_(g_((=_=)_=)<br>\n))_(g_((=_[\\x.((=_=)_=)])_[\\x.x]))))_(([\\t.[\\p.((=_[\\x.((=_=)_=)])_p)]]_o)_[\\x.(<br>\ng_x)]))</p>\n<p>2.5.2 Extension by constant specification (John: \"new_specification\")</p>\n<p>The specification example in the manual<br>\n    Â¬(b1 = b2)<br>\nor<br>\n    not (b1 = b2)<br>\nwith b1 and b2 of type bool could be introduced as a hypothesis h.</p>\n<p>Then we would have theorems<br>\n    h |- t1<br>\n    h |- t2<br>\netc.</p>\n<p>If h would be inconsistent (h |- F), we could prove: not h.</p>\n<p>Otherwise (the consistent case), the variables (b1 and b2) in h are free, e.g.,<br>\n    not (b1 = b2) |- t1<br>\n    not (b1 = b2) |- t2<br>\nsuch that the restrictions on free variables in the set of hypotheses for Rule <br>\nR' [Andrews, 2002, p. 214] apply, and hence, the \"variables\" practically behave <br>\nlike constants, as in HOL. Note that neither the Rule of Universal <br>\nGeneralization (5220) nor the Rule of Substitution (5221) are applicable due to <br>\ntheir restrictions on free variables in the set of hypotheses [cf. Andrews, <br>\n2002, p. 222], which means that b1 and b2 could not be instantiated if they <br>\nwould appear as free variables in t1 or t2.</p>\n<p>2.5.3 Remarks about constants in HOL</p>\n<p>This passage, according to my memory the same as the original by Andy Pitts, <br>\ndiscusses the \"dependency on type variables\", arguing that \"explicitly <br>\nrecording dependency of constants on type variables makes for a rather <br>\ncumbersome syntax\".<br>\nHowever, with type abstraction, types are not a separate syntactic category <br>\nanymore, but terms of type tau. This means that the type variables are subject <br>\nto the same restrictions of Rule R' as regular variables, resulting in a <br>\nuniform treatment of both regular and type variables, and in addition to that, <br>\nthe binding of type variables with lambda preserves dependency information.<br>\nWith the means of type abstraction, explicit tracking of the dependency on type <br>\nvariables can be expressed very naturally with the means of the formal <br>\nlanguage, as (in general) intended by Russell.</p>\n<p>2.5.4 Extension by type definition</p>\n<p>The corresponding mechanism in R0 was described recently:</p>\n<p>\"In R0, the interpretation of types is that of (nonempty) sets. Naturally, one <br>\nwould see, for example,<br>\nthe number 3 as a natural number, and therefore has its type:<br>\n    3 : N   (or \"3_N\" in Tex/LaTeX notation)<br>\n[...]<br>\nThe consequence is, of course, that a mathematical entity may have several <br>\ntypes, as naturally<br>\none would like to express 3 : N, 3 : S5, or 3 : R (three is a real number).<br>\n[...]<br>\nSince terms like [\\x.x&lt;5] (S5, the set of the numbers smaller than 5), can <br>\nbecome a type, the strict<br>\ndistinction between terms and types is removed, as when a theorem like<br>\n    (S5 3)<br>\nis obtained, S5 becomes a type by adding the types of types (tau) to it, and<br>\nto the number 3 the new type S5 is added.\"<br>\n<a href=\"https://lists.cam.ac.uk/pipermail/cl-isabelle-users/2016-October/msg00050.html\">https://lists.cam.ac.uk/pipermail/cl-isabelle-users/2016-October/msg00050.html</a></p>\n<p>The advantage in comparison to the HOL mechanism is, as I believe, that new <br>\ntypes are introduced very naturally, no axioms have to be assumed, and there <br>\nis no duplication of mathematical structures (linked with a bijection / an <br>\nisomorphism).</p>\n<p>In summary, the definitional principles of HOL can be equivalently expressed by</p>\n<ul>\n<li>allowing wffs to be printed (and parsed) by shorthands attached to them,</li>\n<li>\n<p>Andrews' Rule R' (with a uniform treatment of regular variables and type <br>\nvariables),</p>\n</li>\n<li>\n<p>and a simple, natural mechanism for introducing new types.<br>\nForgive me if I made a mistake while quickly writing down my ideas.</p>\n</li>\n</ul>\n<p>Concerning HOL Light, I recall that in the current R0 draft (from May 18, <br>\n2015), HOL Light is the main reference, as it has the same underlying concept <br>\nof an extremely small logical kernel:<br>\n\"The axioms of R0 are only logical axioms. For a number of reasons discussed <br>\nbelow no non-logical axioms (those not necessary for formal logic) are allowed <br>\nin R0. HOL Light has 'three mathematical axioms' [Harrison, 2009, p. 62], and <br>\ntwo of them are non-logical axioms: the axiom of choice and the axiom of <br>\ninfinity.<br>\nIn summary, if 'HOL Light is [...] a clean and simplified version of Mike <br>\nGordon's original HOL system' [Harrison, 2009, p. 60], then R0 is even cleaner <br>\nand simpler than HOL Light and follows consequently the path of maximising <br>\nlogical rigor by reductionism.\" [Kubota, 2015, p. 14 f.]<br>\n(Maybe the comparison is slightly unfair, since R0 is not designed for <br>\nautomation, opting for Hilbert-style like Q0.)</p>\n<p>Also, other design decisions for HOL Light and R0 are identical.<br>\nFor example, having to decide between variable names and a numbering system for <br>\nvariables (like de Bruijn indices), I opted for names in order to make the <br>\nlogical reasoning as explicit as possible (besides better readability).<br>\nSimilarly, you wrote on HOL Light: \"I reimplemented all the prelogic <br>\ncompletely, abandoning de Bruijn terms in favour of a return to name-carrying <br>\nsyntax.\"<br>\n<a href=\"https://www.cl.cam.ac.uk/~jrh13/hol-light/tutorial_220.pdf\">https://www.cl.cam.ac.uk/~jrh13/hol-light/tutorial_220.pdf</a> (p. 222)</p>\n<p>Maybe it is best to continue discussion after the publication of R0, when <br>\ncomparisons can be made easier.</p>\n<p>Best,</p>\n<p>Ken</p>\n<hr>\n<p>Ken Kubota<br>\ndoi: 10.4444/100<br>\n<a href=\"http://dx.doi.org/10.4444/100\">http://dx.doi.org/10.4444/100</a></p>\n<p>P.S.:</p>\n<p>The full internal representation of Axiom 1 (Law of Excluded Middle), which is <br>\nexposed if all definitions (abbreviations) are removed, is - without and with <br>\nfull type information -:</p>\n<p>%A1</p>\n<h1></h1>\n<p>((=_(([\\x.[\\y.((=_[\\g.((g_((=_=)_=))_((=_=)_=))])_[\\g.((g_x)_y)])]]_(g_((=_=)_=)<br>\n))_(g_((=_[\\x.((=_=)_=)])_[\\x.x]))))_(([\\t.[\\p.((=_[\\x.((=_=)_=)])_p)]]_o)_[\\x.(<br>\ng_x)]))</p>\n<h1>:=  A1</h1>\n<h1></h1>\n<p>((={{{o,o},o}}_(([\\x{o}{o}.[\\y{o}{o}.((={{{o,@},@}}_[\\g{{{o,o},o}}{{{o,o},o}}.((<br>\ng{{{o,o},o}}{{{o,o},o}}_((={{{o,@},@}}_={@}){{o,@}}_={@}){o}){{o,o}}_((={{{o,@},<br>\n@}}_={@}){{o,@}}_={@}){o}){o}]{@}){{o,@}}_[\\g{{{o,o},o}}{{{o,o},o}}.((g{{{o,o},o<br>\n}}{{{o,o},o}}_x{o}{o}){{o,o}}_y{o}{o}){o}]{@}){o}]{{o,o}}]{{{o,o},o}}_(g{{o,o}}{<br>\n{o,o}}_((={{{o,@},@}}_={@}){{o,@}}_={@}){o}){o}){{o,o}}_(g{{o,o}}{{o,o}}_((={{{o<br>\n,{o,o}},{o,o}}}_[\\x{o}{o}.((={{{o,@},@}}_={@}){{o,@}}_={@}){o}]{{o,o}}){{o,{o,o}<br>\n}}_[\\x{o}{o}.x{o}{o}]{{o,o}}){o}){o}){o}){{o,o}}_(([\\t{^}{^}.[\\p{{o,t{^}}}{{o,t{<br>\n^}}}.((={{{o,{o,t{^}}},{o,t{^}}}}_[\\x{t{^}}{t{^}}.((={{{o,@},@}}_={@}){{o,@}}_={<br>\n@}){o}]{{o,t{^}}}){{o,{o,t{^}}}}_p{{o,t{^}}}{{o,t{^}}}){o}]{{o,{o,t{^}}}}]{{{o,{<br>\no,\\3{^}}},^}}_o{^}){{o,{o,o}}}_[\\x{o}{o}.(g{{o,o}}{{o,o}}_x{o}{o}){o}]{{o,o}}){o<br>\n})</p>",
        "id": 294696215,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661178169
    }
]