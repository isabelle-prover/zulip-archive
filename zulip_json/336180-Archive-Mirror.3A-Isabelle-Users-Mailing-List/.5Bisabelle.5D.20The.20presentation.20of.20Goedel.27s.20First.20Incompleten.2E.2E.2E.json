[
    {
        "content": "<p>From: Ken Kubota &lt;<a href=\"mailto:mail@kenkubota.de\">mail@kenkubota.de</a>&gt;<br>\nDear Gottfried Barrow,</p>\n<p>There has been a misunderstanding. I claimed neither that Isabelle is <br>\ninconsistent nor the contrary.</p>\n<p>However, a proof of Paulson's claimed theorem 'proved_iff_proved_PfP' is not <br>\navailable in axiomatic (Hilbert-style) deductive systems, because in <br>\nHilbert-style systems this claimed theorem cannot even be expressed, since it <br>\ndoes not contain well-formed formulae only. Therefore this claimed theorem is <br>\nnot a mathematical theorem or metatheorem. For now, please allow me to focus on <br>\nthis single point.</p>\n<p>This can be demonstrated easily by looking at the structure of the claimed <br>\ntheorem 'proved_iff_proved_PfP' available at<br>\n<a href=\"http://www.cl.cam.ac.uk/~lp15/papers/Formath/Goedel-ar.pdf\">http://www.cl.cam.ac.uk/~lp15/papers/Formath/Goedel-ar.pdf</a> (p. 21)<br>\n<a href=\"http://www.owlofminerva.net/files/Goedel_I_Extended.pdf\">http://www.owlofminerva.net/files/Goedel_I_Extended.pdf</a> (p. 19)</p>\n<p>which can be written<br>\n    {} &gt; a  &lt;-&gt;  {} &gt; PfP \"a\"</p>\n<p>if we use '&gt;' for the deduction symbol (turnstile) and '\"' for the Goedel <br>\nencoding quotes, and simplified without change of meaning to<br>\n    &gt; a  &lt;-&gt;  &gt; PfP \"a\"</p>\n<p>expressing that 'a' is a theorem if and only if there is a proof of 'a'.</p>\n<p>Now, recalling the quotes by Alonzo Church and Peter B. Andrews available at<br>\n<a href=\"https://lists.cam.ac.uk/pipermail/cl-isabelle-users/2015-December/msg00018.html\">https://lists.cam.ac.uk/pipermail/cl-isabelle-users/2015-December/msg00018.html</a><br>\n<a href=\"https://lists.cam.ac.uk/pipermail/cl-isabelle-users/2015-December/msg00042.html\">https://lists.cam.ac.uk/pipermail/cl-isabelle-users/2015-December/msg00042.html</a></p>\n<p>in an axiomatic (Hilbert-style) deductive system, the claimed theorem <br>\n'proved_iff_proved_PfP' could be either a theorem (a theorem of the object <br>\nlanguage) or a metatheorem (a theorem of the mathematical meta-language).</p>\n<p>Case 1 (theorem of the object language, language level 1):</p>\n<p>As a trivial example for a theorem of the object language, we shall use<br>\n    (T &amp; T) = T</p>\n<p>usually written<br>\n    &gt; (T &amp; T) = T</p>\n<p>as presented in [Andrews, 2002, p. 220 (5211)], with the preceding deduction <br>\nsymbol (turnstile) in order to express that '(T &amp; T) = T' is a theorem.</p>\n<p>In this notation it has, like all theorems of the object language of Q0, <br>\nexactly one occurrence of the deduction symbol (turnstile).<br>\nHence, the claimed theorem 'proved_iff_proved_PfP', having two occurrences, <br>\ncannot be a theorem of the object language.</p>\n<p>Case 2 (theorem of the meta-language, language level 2):</p>\n<p>As a trivial example for a theorem of the meta-language, we shall use<br>\n    If H &gt; A and H &gt; A =&gt; B, then H &gt; B.</p>\n<p>presented in [Andrews, 2002, p. 224 (5224 = Modus Ponens)], expressing that if <br>\nthere is a proof of A (from the set of hypotheses H) and a proof of A =&gt; B <br>\n(from H), then there is a proof of B (from H).</p>\n<p>Note that this example shows some of the typical formal criteria of a <br>\nmetatheorem:</p>\n<ol>\n<li>Multiple occurrences of the deduction symbol (turnstile).</li>\n<li>\n<p>Use of syntactical variables (denoted by bold letters in the works of both <br>\nChurch and Andrews).</p>\n</li>\n<li>\n<p>Use of the informal words \"If\" and \"then\" instead of logical symbols in the <br>\nmeta-language (according to Church's proposal).</p>\n</li>\n</ol>\n<p>It should be emphasized that metatheorems in proofs can always be replaced by <br>\nthe proof of the concrete theorems (the syntactical or schematic variable <br>\ninstantiated) when carrying out the proof, such that metatheorems are actually <br>\nnot necessary (but reveal properties of the object language that help finding <br>\nproofs).</p>\n<p>In the notation of Isabelle (natural deduction) this metatheorem would be <br>\nexpressed by<br>\n    [H &gt; A; H &gt; A =&gt; B]  --&gt;  H &gt; B</p>\n<p>and, if we would add subscripts for the language levels, by<br>\n    [H &gt;1 A; H &gt;1 A =&gt; B]  --&gt;2  H &gt;1 B</p>\n<p>So metatheorems infer from theorems of the object language (language level 1) <br>\nto another theorem of the object language, and this relation between theorems <br>\nof the object language is expressed at a higher level: the meta-language <br>\n(language level 2).</p>\n<p>But the claimed theorem 'proved_iff_proved_PfP'<br>\n    &gt; a  &lt;-&gt;  &gt; PfP \"a\"</p>\n<p>cannot be a metatheorem either, since both ways of dealing with it, either <br>\nsemantically (subcase a) or syntactically (subcase b), fail.</p>\n<p>Case 2 Subcase a (semantically):</p>\n<p>In the claimed theorem 'proved_iff_proved_PfP'<br>\n    &gt; a  &lt;-&gt;  &gt; PfP \"a\"</p>\n<p>the right-hand side (PfP \"a\"), expressing the provability of theorem 'a', is, <br>\nby its meaning, itself a metatheorem, not a theorem of the object language, and <br>\nwe would have some kind of meta-metatheorem like<br>\n    &gt;1 a  &lt;-&gt;3  &gt;2 PfP \"a\"</p>\n<p>If we ignore the fact that his meta-metatheorem violates the language level <br>\nrestrictions and nevertheless proceed further, then from a theorem of the <br>\nobject language a theorem of the meta-language could be inferred and vice <br>\nversa, which would again violate language level restrictions, as for example a <br>\nmetatheorem would be added to the list of theorems of the object language and <br>\ntreated as such, leading to a confusion of language levels.</p>\n<p>This is, in principle, the construction of the proofs of Andrews and Rautenberg <br>\n[cf. Kubota, 2013], in which 'proved_iff_proved_PfP' is used as an implicit <br>\nrule, not as a proven theorem/metatheorem. Of course, they both fail also <br>\nsimply by not providing a proof using syntactical means only.</p>\n<p>Case 2 Subcase b (syntactically):</p>\n<p>In Paulson's claimed theorem 'proved_iff_proved_PfP'<br>\n    &gt; a  &lt;-&gt;  &gt; PfP \"a\"</p>\n<p>the right-hand side (PfP \"a\") needs to be a well-formed formula. </p>\n<p>But the Goedel encoding in Paulson's proof is implemented by the use of means <br>\nwhich are not available in the object language (i.e., in mathematics).</p>\n<p>According to Paulson at<br>\n<a href=\"http://www.cl.cam.ac.uk/~lp15/papers/Formath/Goedel-ar.pdf\">http://www.cl.cam.ac.uk/~lp15/papers/Formath/Goedel-ar.pdf</a> (p. 16)</p>\n<p>\"[i]t is essential to remember that GÃ¶del encodings are terms (having type tm), <br>\nnot sets or numbers. [...] First, we must define codes for de Bruijn terms and <br>\nformulas.</p>\n<p>function quot_dbtm :: \"dbtm -&gt; tm\"<br>\n    where<br>\n    \"quot_dbtm DBZero = Zero\"<br>\n[...]\"</p>\n<p>Paulson's definition goes beyond the use of purely mathematical means. After <br>\nthe introduction of the definition of quot_dbtm, it is used as follows:</p>\n<p>\"We finally obtain facts such as the following:<br>\nlemma quot_Zero: \"'Zero' = Zero\"<br>\n[...]\"</p>\n<p>But with its purely syntactical means the object language cannot explicitly <br>\nreason about its own properties directly.<br>\nPropositions in Andrews' logic Q0 have type 'o' (Boolean truth values), and one <br>\ncould define a function 'foo': o -&gt; o, o -&gt; i, or o -&gt; nat (with nat = (o(oi)) <br>\n= (i -&gt; o) -&gt; o; natural numbers as \"equivalence classes of sets of <br>\nindividuals\" [Andrews, 2002, p. 260]), etc.<br>\nBut since a type \"tm\" (for term) does not exist in Q0 [cf. Andrews, 2002, p. <br>\n210] or R0, one cannot define a mathematical function 'quot_dbtm': dbtm -&gt; tm.<br>\nOf course, there are rules for construing well-formed formulae (wffs), but <br>\nthese (in R0 hardcoded) rules are used implicitly for construing wffs and are <br>\nnot part (are not theorems) of the object language itself.<br>\nExplicit meta-reasoning as with lemma 'quot_Zero' might extend (and, hence, <br>\nviolate) the object language, as it actually introduces new rules of inference <br>\nto the object language, which again may be considered as a confusion of <br>\nlanguage levels.</p>\n<p>Type \"tm\" (for term) is a notion of the (technical) meta-language, but not a <br>\nmathematical type. Therefore the function 'quot_dbtm' (type: dbtm -&gt; tm) is not <br>\na mathematical well-formed formula (wff), subsequently the Goedel encoding <br>\nfunction ('\" \"') and the Goedel encoding of proposition 'a' ('\"a\"') are not <br>\neither, and hence the right-hand side (PfP \"a\") is not a wff and therefore not <br>\na proposition. Finally,<br>\n    PfP \"a\"<br>\nor<br>\n    &gt; PfP \"a\"<br>\ncannot be a theorem, and for this reason the claimed theorem <br>\n'proved_iff_proved_PfP'<br>\n    &gt; a  &lt;-&gt;  &gt; PfP \"a\"<br>\ncannot be a metatheorem.</p>\n<p>Obviously the (technical) meta-language and the object language in Isabelle are <br>\nnot strictly separated, since the type \"tm\" (for term) is treated as a <br>\nmathematical type in the construction of wffs of the object language, which is <br>\nnot mathematically safe. Mathematically, a proposition has only type 'o' <br>\n(Boolean truth values), but not a type \"tm\" (for term).</p>\n<p>All definitions of Q0 are only shorthands for established wffs. In my R0 <br>\nimplementation, a definition label added to a wff is used for input (parsing) <br>\nand output (display) only, and remains irrelevant for syntactical inference and <br>\ncan be removed or replaced at any time. This means that a definition label for <br>\nGoedel encodings (in this case the quotation marks) must represent a <br>\nmathematical well-formed formula (wff) when used in 'proved_iff_proved_PfP', <br>\nwhich may be a function with a mathematical type as input (domain) type such as <br>\nthe type of truth values (type: o -&gt; *), but not with types of the <br>\nmeta-language as input (domain) type (type: dbtm -&gt; *, or tm -&gt; *), as this <br>\nviolates the rules for construing mathematical wffs [cf. Andrews, 2002, p. 211].</p>\n<p>Of course, one could introduce Goedel numbering in order to arithmetize the <br>\nobject language and reason about the Goedel numbers. But the reasoning would <br>\nthen be restricted to these Goedel numbers, and there would be no possibility <br>\nto relate these Goedel numbers directly to theorems of the object language as <br>\ndone in the claimed theorem 'proved_iff_proved_PfP'<br>\n    &gt; a  &lt;-&gt;  &gt; PfP \"a\"</p>\n<p>since the Goedel encodings in Paulson's proof (requiring a type \"tm\") are not <br>\ndefinable with purely mathematical means of the object language (e.g., in R0). <br>\nSince the proposition 'a' has only type 'o' (Boolean truth values), the logical <br>\narithmetic is not stronger than propositional calculus, ruling out Goedel <br>\nencodings requiring a type \"tm\".</p>\n<p>The concept of the Goedel encoding function generally violates the type <br>\nrestrictions for construing mathematical wffs, as with the type of truth values <br>\nas input (domain) type there would be only two different Goedel numbers.</p>\n<p>As in other claimed proofs, non-mathematical means are used in order to <br>\nestablish a relation between the object language (proposition 'a') and the <br>\nmeta-language (its provability: PfP \"a\") as the translation mechanism between <br>\nboth language levels necessary for the self-reference part of the antinomy, <br>\nsince Goedel's antinomy is construed across language levels. Note that the <br>\nantinomy seems to c<br>\n[message truncated]</p>",
        "id": 294661015,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661169906
    },
    {
        "content": "<p>From: Andrei Popescu &lt;<a href=\"mailto:a.popescu@mdx.ac.uk\">a.popescu@mdx.ac.uk</a>&gt;<br>\nDear Ken,</p>\n<p>Please forgive me if my tone may seem condescending. I am not an expert in Goedel's theorems, but I have a lot of experience with Isabelle and I have looked at the incriminated proofs. </p>\n<p>First, please let me assure you of the following, concerning Larryâs proofs: The employed concepts and the proved theorems do not suffer from any consequence of Isabelle/HOL being based on a meta-logic or featuring a natural deduction system. These concepts and theorems are easily reproducible in \"pure\" systems, lacking a logical framework on top of them â including all the HOL and ZF systems, be they based on natural deduction, sequent calculi or Hilbert systems. Any person having experience with logical frameworks and with Isabelle would give you this assurance after superficially inspecting these proofs. The logical framework merely offers some convenience. </p>\n<p>Now, I say letâs not be dogmatic about how Goedelâs Second has been proved. The fact that Larry and authors before him took some shortcuts, working at an outer level for as much as possible, is perfectly legitimate. It forms the beauty of taming a proof of huge complexity. Again, I ensure you that there is nothing exotic with the employed primitives that led to the stated theorem. In my opinion, the only question worth asking is if the end statement is truthful:  </p>\n<p>theorem Goedel II: <br>\nassumes \"Â¬ {} â¢ Fls\" <br>\nshows \"Â¬ {} â¢ Neg (PfP âFlsâ)\" </p>\n<p>I hope we agree that the conclusion of the theorem (the \"shows\" part above) should be \"Â¬ {} â¢ Neg phi\" where phi is a formula that captures the notion \"False is provable in the first-order logic of HF,\"  as represented in the language of HF itself. Here, one may argue that taking phi to be \"PfP âFlsâ\" is not a priori convincing, especially since the definitions leading to PfP are very technical and are spanning two levels. These aspects could be clarified by unfolding the definitions and performing some simplifications that \"reify\" this term. But I am not sure: Is this what you are arguing?</p>\n<p>With best wishes, <br>\n  Andrei</p>",
        "id": 294661070,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661169928
    },
    {
        "content": "<p>From: Ramana Kumar &lt;<a href=\"mailto:rk436@cam.ac.uk\">rk436@cam.ac.uk</a>&gt;<br>\nHi Ken,</p>\n<p>There are a few points in your email where I believe what you are saying is<br>\nsimply mistaken. I have pointed a couple of them out below.</p>\n<p>On 22 December 2015 at 20:03, Ken Kubota &lt;<a href=\"mailto:mail@kenkubota.de\">mail@kenkubota.de</a>&gt; wrote:</p>\n<blockquote>\n<p>In the claimed theorem 'proved_iff_proved_PfP'<br>\n        &gt; a  &lt;-&gt;  &gt; PfP \"a\"</p>\n<p>the right-hand side (PfP \"a\"), expressing the provability of theorem 'a',<br>\nis,<br>\nby its meaning, itself a metatheorem, not a theorem of the object language,</p>\n</blockquote>\n<p>That is incorrect. (PfP \"a\") is an object-language statement. I think you<br>\nmay have been confused by what it represents. Indeed, the only reason you<br>\nwant to claim it is a metatheorem is because of \"its meaning\". But if you<br>\nsimply ignore its meaning, it is clearly and syntactically an object-level<br>\nstatement.</p>\n<p>If you disagree, I press you to argue your point further and concentrate<br>\nonly on this example until we can clear up the disagreement about this<br>\npoint.</p>\n<blockquote>\n<p>Propositions in Andrews' logic Q0 have type 'o' (Boolean truth values),<br>\nand one<br>\ncould define a function 'foo': o -&gt; o, o -&gt; i, or o -&gt; nat (with nat =<br>\n(o(oi))<br>\n= (i -&gt; o) -&gt; o; natural numbers as \"equivalence classes of sets of<br>\nindividuals\" [Andrews, 2002, p. 260]), etc.<br>\nBut since a type \"tm\" (for term) does not exist in Q0 [cf. Andrews, 2002,<br>\np.<br>\n210] or R0, one cannot define a mathematical function 'quot_dbtm': dbtm -&gt;<br>\ntm.<br>\n</p>\n</blockquote>\n<p>The type \"tm\" is not a primitive type, but it can be defined, just as you<br>\ndefined \"nat\" above. Paulson defined the type before using it. It is<br>\nincorrect to say that the type \"tm\" does not exist in Q0, if we allow Q0<br>\ntype definitions.</p>",
        "id": 294661089,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661169935
    },
    {
        "content": "<p>From: Gottfried Barrow &lt;<a href=\"mailto:igbi@gmx.com\">igbi@gmx.com</a>&gt;<br>\nKen,</p>\n<p>I email this to you also, to try and be civilized, but you shouldn't <br>\nemail me back. I'm happy to let Popescu and Kumar finish it all.</p>\n<p>But you did address this to me. I stated my rules, but rules require the <br>\nuse of discretion, or being ignored and broken.</p>\n<p>If you don't diss the team on the team's turf, in a way that makes me <br>\nfeel I should defend the team, and you don't address emails to me, <br>\nthere's no reason for me to keep showing up.</p>\n<p>To try and add some concrete value, I include a base 10 datatype that's <br>\nbijective with 'nat':</p>\n<p><a href=\"https://gist.github.com/GezzMC/125ce3352966ec7f7e6c\">https://gist.github.com/GezzMC/125ce3352966ec7f7e6c</a></p>\n<p>I did that based on Num.thy, by Florian Haftmann and Brian Huffman. For <br>\nthe proofs, I brute forced them with a combination of 'auto', 'induct', <br>\nand Sledgehammer. I've never before or since been willing to wait so <br>\nlong on Sledgehammer.</p>\n<p>I suppose I should tie that into this thread.</p>\n<p>I think I'm starting to remember its purpose for here.</p>\n<p>We can consider any person an archetype of some class of people. An <br>\narchetype at hand is Larry Paulson, and you're another archetype. To <br>\ncall myself an archetype, that would mean I'm (willing to admit I'm) <br>\nfull of myself.</p>\n<p><em>NO FANBOY, NO LOYALTY</em></p>\n<p>In this thread of emails (made up of multiple subject lines), Larry <br>\nPaulson is getting mentioned a lot, and I'm defending him.</p>\n<p>I could say, \"And obviously, Larry Paulson doesn't need me to defend <br>\nhim\". It's not the need. I think it's the value of someone knowing that <br>\ntheir stuff is getting used.</p>\n<p>The gist link also shows that something is being looked at and used. <br>\nHowever, it also reflects that Isabelle/HOL isn't some perfect work <br>\nwhere I'm saying, \"I have a testimony for the world. Isabelle? Pure <br>\nbliss, all the time, 24/7.\"</p>\n<p>Where's the base 10 type? Where are the vectors? And don't tell me to <br>\nlook outside of 'Complex_Main'.</p>\n<p>Criticism? Absolutely, to show I'm no fanboy, but in the end, it happens <br>\nto be that Isabelle/HOL is good, as far as I can tell.</p>\n<p><em>ISABELLE/HOL: HAVE YOU, KEN, AND JAMES MEYER EVEN USED IT?</em></p>\n<p>This falls under the \"if you're so smart\" category.</p>\n<p>I've always considered that I would need a better understanding of logic <br>\nto work at the \"meta-logic\" or \"metalanguage\" level. Briefly here, you <br>\nchallenge the top dogs at the meta-logic level, but nothing I've seen <br>\nindicates that you have any decent ability to use Isabelle/HOL. <br>\nShouldn't a smart person be able to blow through the easy stuff?</p>\n<p>Previously, I kept James Meyer out of this, who was in your first <br>\naddress list. In reviewing your emails, I paid more attention to your <br>\nreference to him, particularly to his remark about Paulson. Based on <br>\nthat, I then looked at Meyer's PDF on his site. Keep that in mind.</p>\n<p><em>MISUNDERSTANDING? NO, NON-VERBOSENESS</em></p>\n<p>You say this time:</p>",
        "id": 294661110,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661169944
    },
    {
        "content": "<p>From: Gottfried Barrow &lt;<a href=\"mailto:igbi@gmx.com\">igbi@gmx.com</a>&gt;<br>\nGreetings,</p>\n<p>There's a very narrow purpose to this email. I accomplish that purpose <br>\nby what I say in the first few sentences, which is not intended to <br>\ncreate any debate.</p>\n<p>Picking a nice number, 50, I'll say that at least 50% of what I've said <br>\nin the past, on technical matters, has been wrong. But taking a position <br>\ncan be the first step in working out ideas, though one person working <br>\nout an idea can be everybody else getting spammed.</p>\n<p>While not technically wrong, since close enough can be good enough, <br>\n\"monolithic logic\" wasn't the right choice. A better choice would \"black <br>\nbox logic\". It's based on a hardware perspective, which I believe is the <br>\ncorrect \"ultimate view of things\" for mechanized proofs. Hex was my <br>\nfriend when looking at address and data buses with a logic analyzer. <br>\nThere's Wikipedia, even when no one needs it:</p>\n<p><a href=\"https://en.wikipedia.org/wiki/Black_box\">https://en.wikipedia.org/wiki/Black_box</a></p>\n<p>Related to my \"minimal black box interpretation\", for an overall view, <br>\nis my \"minimal syntactic interpretation\", for logic as strings of <br>\ncharacters. For things like this:</p>\n<p>term \"THE x. x \\&lt;in&gt; {}\" (<em>Do not think beyond the string.</em>)</p>\n<p>lemma \"EX! y. y = (THE x. x \\&lt;in&gt; {})\" (*Totalitarianism. HOL is a <br>\ntyrant.*)<br>\n     by(rule HOL.ex1_eq(1))</p>\n<p>Asking no one in particular, I ask and say, \"Do you know how annoying it <br>\nis to read Isabelle list emails on the web archive? Graphical symbols, <br>\nfor \\&lt;Rightarrow&gt; and \\&lt;Longrightarrow&gt;, get converted to funny looking <br>\n'a' symbols.\"</p>\n<p>There is always this open question for me: Do I know enough to do a <br>\nmajor disconnect? Being connected can result in more sophistication, but <br>\nthere also should be a fixed foundation. People have been working off of <br>\nZFC, for how many years?</p>\n<p>Here's a polymorphic vector:</p>\n<p>datatype ('a,'size) vD = vC (vG: \"'a list\")</p>\n<p>The problem of length reflects the general problem of HOL functions <br>\nbeing total, and that domains aren't easily restricted, by defining new <br>\ntypes. What I have in mind is fixing the problem, in general, by working <br>\nin null space, which will get lifted to option space. You heard it here <br>\nfirst.</p>\n<p>The sophistication comes from its use with 'CARD(n)', thanks to a <br>\npointer by Manuel Eberl.</p>\n<p>I do pull from 'src/HOL/Library', but I stick it all in one file. 'CARD' <br>\nis thanks to 'Phantom_Type' by Andreas Lochbihler, 'Cardinality' by <br>\nBrian Huffman &amp; Andreas Lochbihler, and 'Numeral_Type' by Brian Huffman. <br>\nLars Noschinski deserves thanks for some other things.</p>\n<p>With the new datatype, thanks to Blanchette and Traytel, and whoever <br>\nelse I'm missing, I guess Popescu, there are so many possibilities they <br>\nbecome uninteresting, due to the shear number of them.</p>\n<p>The 'datatype' keyword itself encapsulates what can be a beautiful form <br>\nof math, a statement so devoid of detail, it's hard to get the meaning.</p>\n<p>The vector is above. Here, possibly, are nested countable and nested <br>\nfinite sets:</p>\n<p>datatype 'a csetD = Atom 'a | csetC \"'a csetD cset\"</p>\n<p>datatype 'a fsetD = Atom 'a | fsetC \"'a fsetD fset\"</p>\n<p>Here is a possible generalization of nested multisets (using lists):</p>\n<p>datatype 'a msetD = Atom \"'a * nat\" | msetD \"'a msetD list\"</p>\n<p>Here is what I'm really interested in. Nested sum sets and factor sets <br>\ncombined:</p>\n<p>datatype 'a sumfacD = Atom 'a | sumC \"'a sumfacD list\" | facC \"'a <br>\nsumfacD list\"</p>\n<p>It uses lists, but why use sets when I can use lists with an equivalence <br>\nrelation, which may lead back to using sets. I don't care about sets <br>\nanymore, unless I need to. I care about lists, to be used as finite sets.</p>\n<p>What's it all worth? Nothing much in an email. The definitions might <br>\nneed to be tweaked, and the devil is in the details.</p>\n<p>Consider a quote from Carl Friedrich Gauss:</p>\n<p>I confess that Fermat's Theorem as an isolated proposition has very <br>\nlittle interest for me, because I could<br>\n   easily lay down a multitude of such propositions, which one could <br>\nneither prove nor dispose of.</p>\n<p><a href=\"http://www-groups.dcs.st-and.ac.uk/history/Quotations/Gauss.html\">http://www-groups.dcs.st-and.ac.uk/history/Quotations/Gauss.html</a></p>\n<p>Finishing up unfinished business while the gettin' is good, to put it in <br>\namongst a collective gettin'.</p>\n<p>Regards,<br>\nGB</p>",
        "id": 294661133,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661169955
    }
]