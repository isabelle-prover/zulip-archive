[
    {
        "content": "<p>From: Larry Paulson &lt;<a href=\"mailto:lp15@cam.ac.uk\">lp15@cam.ac.uk</a>&gt;<br>\nWe currently define the type class semiring_numeral_div in the theory Divides, see attached snippet below. This type class is already general enough to allow some facts involving linearly ordered arithmetic types to be proved just once and be valid over the range from nat to real. The only problem is that type real is not an instance of semiring_numeral_div, for obvious reasons. Would it not be appropriate to attach the axiom le_add_diff_inverse2 to a more general type class, such as linordered_semidom?</p>\n<p>Larry</p>\n<p>subsection {* Generic numeral division with a pragmatic type class *}</p>\n<p>text {*<br>\n  The following type class contains everything necessary to formulate<br>\n  a division algorithm in ring structures with numerals, restricted<br>\n  to its positive segments.  This is its primary motiviation, and it<br>\n  could surely be formulated using a more fine-grained, more algebraic<br>\n  and less technical class hierarchy.<br>\n*}</p>\n<p>class semiring_numeral_div = semiring_div + comm_semiring_1_diff_distrib + linordered_semidom +<br>\n  assumes le_add_diff_inverse2: \"b ≤ a ⟹ a - b + b = a\"</p>",
        "id": 294641333,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661162237
    },
    {
        "content": "<p>From: Florian Haftmann &lt;<a href=\"mailto:florian.haftmann@informatik.tu-muenchen.de\">florian.haftmann@informatik.tu-muenchen.de</a>&gt;<br>\nHi Larry,</p>\n<blockquote>\n<p>We currently define the type class semiring_numeral_div in the theory<br>\nDivides, see attached snippet below. This type class is already general<br>\nenough to allow some facts involving linearly ordered arithmetic types<br>\nto be proved just once and be valid over the range from nat to real. The<br>\nonly problem is that type real is not an instance of<br>\nsemiring_numeral_div, for obvious reasons. Would it not be appropriate<br>\nto attach the axiom le_add_diff_inverse2 to a more general type class,<br>\nsuch as linordered_semidom?</p>\n</blockquote>\n<p>this is surely something with can be taken into account.  I have<br>\nrecently refined the type class hierarchy to reflect the concept of<br>\n»partial inverse additive operation« up to a certain degree, and this<br>\ncould be the next step.</p>\n<p>Sorry that I won't elaborate further for now, but I am on leave for holiday.</p>\n<p>All the best,<br>\n    Florian</p>\n<blockquote>\n<p>Larry</p>\n<p>subsection {* Generic numeral division with a pragmatic type class *}</p>\n<p>text {*<br>\n  The following type class contains everything necessary to formulate<br>\n  a division algorithm in ring structures with numerals, restricted<br>\n  to its positive segments.  This is its primary motiviation, and it<br>\n  could surely be formulated using a more fine-grained, more algebraic<br>\n  and less technical class hierarchy.<br>\n*}</p>\n<p>class semiring_numeral_div = semiring_div + comm_semiring_1_diff_distrib + linordered_semidom +<br>\n  assumes le_add_diff_inverse2: \"b ≤ a ⟹ a - b + b = a\"</p>\n<p><a href=\"/user_uploads/14278/4EWj7vYoGUd7TsgIBnMdbqtX/signature.asc\">signature.asc</a></p>\n</blockquote>",
        "id": 294641402,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661162268
    },
    {
        "content": "<p>From: Florian Haftmann &lt;<a href=\"mailto:florian.haftmann@informatik.tu-muenchen.de\">florian.haftmann@informatik.tu-muenchen.de</a>&gt;</p>\n<blockquote>\n<p>Shall we do this, then? Must something else be done or checked first?</p>\n</blockquote>\n<p>I don't see any obstacle except striving to be consistent, i.e.</p>\n<p>Step 1: Re-Join comm_semiring_1_diff_distrib into comm_semiring_1<br>\nStep 2: Attach le_add_diff_inverse2 to linordered_semidom</p>\n<p>and doing consecutive changes in the sources.</p>\n<p>Hence we just state that our distribution's type classes demand a<br>\npartial inverse operation for addition with certain properties, beyond<br>\nwhat can be justified from the current specifications -- which is not<br>\ncritical since these specifications are pragmatically developed and not<br>\nan exact counterpart of any development from literature.  If at some<br>\ntime in the future this will expose problems, our system is flexible<br>\nenough to insert more intermediate points into the class hierarchy, even<br>\nwithin a particular application.</p>\n<p>Cheers,<br>\n    Florian</p>\n<blockquote>\n<p>On 2 Jun 2015, at 20:49, Florian Haftmann &lt;<a href=\"mailto:florian.haftmann@informatik.tu-muenchen.de\">florian.haftmann@informatik.tu-muenchen.de</a>&gt; wrote:</p>\n<blockquote>\n<blockquote>\n<blockquote>\n<p>We currently define the type class semiring_numeral_div in the theory<br>\nDivides, see attached snippet below. This type class is already general<br>\nenough to allow some facts involving linearly ordered arithmetic types<br>\nto be proved just once and be valid over the range from nat to real. The<br>\nonly problem is that type real is not an instance of<br>\nsemiring_numeral_div, for obvious reasons. Would it not be appropriate<br>\nto attach the axiom le_add_diff_inverse2 to a more general type class,<br>\nsuch as linordered_semidom?</p>\n</blockquote>\n<p>this is surely something with can be taken into account.  I have<br>\nrecently refined the type class hierarchy to reflect the concept of<br>\n»partial inverse additive operation« up to a certain degree, and this<br>\ncould be the next step.</p>\n</blockquote>\n<p>After a closer look at the whole matter, moving le_add_diff_inverse2 to<br>\nlinordered_semidom seems reasonable (cf. class_deps \"{linorder,<br>\nsemiring, minus}\")</p>\n<p>Florian</p>\n<p>-- </p>\n<p>PGP available:<br>\n<a href=\"http://home.informatik.tu-muenchen.de/haftmann/pgp/florian_haftmann_at_informatik_tu_muenchen_de\">http://home.informatik.tu-muenchen.de/haftmann/pgp/florian_haftmann_at_informatik_tu_muenchen_de</a></p>\n</blockquote>\n<p><a href=\"/user_uploads/14278/tlQiYKF_D1vZKoTWtG8zgC9F/signature.asc\">signature.asc</a></p>\n</blockquote>",
        "id": 294643511,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661163115
    },
    {
        "content": "<p>From: Florian Haftmann &lt;<a href=\"mailto:florian.haftmann@informatik.tu-muenchen.de\">florian.haftmann@informatik.tu-muenchen.de</a>&gt;<br>\nAfter a closer look at the whole matter, moving le_add_diff_inverse2 to<br>\nlinordered_semidom seems reasonable (cf. class_deps \"{linorder,<br>\nsemiring, minus}\")</p>\n<p>Florian<br>\n<a href=\"/user_uploads/14278/clAmmg0mNP7itSvCqrdMyun4/signature.asc\">signature.asc</a></p>",
        "id": 294646024,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661164102
    },
    {
        "content": "<p>From: Florian Haftmann &lt;<a href=\"mailto:florian.haftmann@informatik.tu-muenchen.de\">florian.haftmann@informatik.tu-muenchen.de</a>&gt;<br>\nAfter a third look, one caveat is whether there are instances of<br>\nlinordered_semidom which do not satisfy le_add_diff_inverse2 (maybe<br>\npolynomials)?</p>\n<p>This should be figured out first.  In the past I introduced e.g.<br>\ncomm_semiring_1_diff_distrib since I saw no striking argument why a<br>\npartial subtraction in any case should follow a distributive law.  Maybe<br>\nthis has been a little bit overcritical.</p>\n<p>If we move on to attach le_add_diff_inverse2 to linordered_semidom, we<br>\nshould also remerge comm_semiring_1_diff_distrib into comm_semiring_1</p>\n<p>Florian<br>\n<a href=\"/user_uploads/14278/eoXIFNobbbxlQ5LtRzGeQGqu/signature.asc\">signature.asc</a></p>",
        "id": 294646552,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661164322
    }
]