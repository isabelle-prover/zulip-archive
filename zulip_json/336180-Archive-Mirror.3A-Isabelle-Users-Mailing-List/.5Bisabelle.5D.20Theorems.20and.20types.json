[
    {
        "content": "<p>From: Mohammad Abdul Aziz &lt;<a href=\"mailto:mohammad.abdulaziz8@gmail.com\">mohammad.abdulaziz8@gmail.com</a>&gt;<br>\nDear all,<br>\nI have two questions regarding types of variables in Isabelle theorems:<br>\n 1) I understand that a way to print a theorem T in the library is by<br>\nprinting thm M in the editor. Is there a way to ask for printing the types<br>\nof the bound variable?<br>\n 2) I understand that to instantiate a quantified variable x in a theorem T<br>\nwith a term t, one uses T[of \"t\"]. Is there an equivalent way to<br>\ninstantiate polymorphic type variables in a theorem?</p>\n<p>Best,<br>\nMohammad</p>",
        "id": 294658463,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661169012
    },
    {
        "content": "<p>From: Lars Noschinski &lt;<a href=\"mailto:noschinl@in.tum.de\">noschinl@in.tum.de</a>&gt;<br>\nOn 09.11.2015 17:59, Mohammad Abdul Aziz wrote:</p>\n<blockquote>\n<p>Dear all,<br>\nI have two questions regarding types of variables in Isabelle theorems:<br>\n 1) I understand that a way to print a theorem T in the library is by<br>\nprinting thm M in the editor. Is there a way to ask for printing the types<br>\nof the bound variable?</p>\n</blockquote>\n<p>Use print_statement.</p>\n<blockquote>\n<p>2) I understand that to instantiate a quantified variable x in a theorem T<br>\nwith a term t, one uses T[of \"t\"]. Is there an equivalent way to<br>\ninstantiate polymorphic type variables in a theorem?</p>\n</blockquote>\n<p>You can use [where 'a=T] or [of x for x :: 'a]. However, this should be<br>\nvery seldom necessary.</p>\n<p>-- Lars</p>",
        "id": 294658466,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661169014
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nIf you just want to know the types, and not print them explicitly, you can <br>\nuse the C-hover idom of the prover IDE to get a popup with the type <br>\ninformation.</p>\n<p>This works slightly asymmetrically for input and output of terms, theorems <br>\netc.</p>\n<p>Here is another possibility to get lots of type information printed <br>\n(usually way too much):</p>\n<p>declare [[show_types]]<br>\n   thm allI<br>\n   print_statement allI</p>\n<p>Makarius</p>",
        "id": 294659104,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661169253
    }
]