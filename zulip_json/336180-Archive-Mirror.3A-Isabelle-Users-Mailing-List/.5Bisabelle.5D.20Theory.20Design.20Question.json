[
    {
        "content": "<p>From: Scott West &lt;<a href=\"mailto:scott.west@inf.ethz.ch\">scott.west@inf.ethz.ch</a>&gt;<br>\nHello all,</p>\n<p>I was just wondering if anyone could provide some advice for the <br>\nfollowing design goal: take an existing type and instantiate it to some <br>\ntheory without endlessly wrapping/unwrapping things.</p>\n<p>For example, I may create a type:</p>\n<p>int_func :: int =&gt; int</p>\n<p>Then I later want to instantiate it in some theory, I can't have such a <br>\ntype synonym, so I wrap it in a datatype constructor. However, this <br>\ntends to mean that I have to reproduce all the conceptually simpler <br>\nproofs on \"int =&gt; int\" to \"IntFunc\"-wrapped version of it, duplicating <br>\nmy proofs for seemingly no reason.</p>\n<p>Is there a nice way to lift proofs automatically, or somehow avoid this <br>\nissue entirely? Thanks!</p>\n<p>Regards,<br>\nScott West</p>\n<p>(Sorry for any duplication)</p>",
        "id": 294074681,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660828401
    }
]