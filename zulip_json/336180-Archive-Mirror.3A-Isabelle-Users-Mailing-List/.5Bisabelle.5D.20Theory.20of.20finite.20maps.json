[
    {
        "content": "<p>From: <a href=\"mailto:jdavis27@uiuc.edu\">jdavis27@uiuc.edu</a><br>\nHello,</p>\n<p>We have been working with the following type specification:<br>\n\"type foo = 'a =&gt; nat option\".  However, the<br>\ntheory-in-progress requires that \"foo\" partial functions <br>\nhave finite domains.  </p>\n<p>Is there a finite map theory for Isabelle?  If not, is there a<br>\nsuggested way of enforcing this restriction at the<br>\ntype-definition level?  We've already completed many proofs<br>\nwith the existing definition of \"foo\", so going back and<br>\nadding \"finite(dom(fun))\" predicates would be a great deal of<br>\ntrouble.</p>\n<p>Thank you,</p>\n<p>Justin S. Davis<br>\nFormal Methods Research Group<br>\nDepartment of Computer Science<br>\nUniversity of Illinois, Urbana-Champaign</p>",
        "id": 293905165,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660745739
    },
    {
        "content": "<p>From: <a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a><br>\nIn our experience one often (but clearly not always) does not need<br>\nfiniteness. Hence we only provided a =&gt; b option. One should probably provide<br>\na separate theory of finite maps as well - HOL4 has one, afaik, and we have a<br>\ntheory of association lists in the development version which can serve the<br>\nsame purpose. But due to HOL's type system, you cannot have finite maps as a<br>\nsubtype of infinite maps, it needs two separate theories.</p>\n<p>If you have already completed the proofs, they didn't need any finiteness<br>\nassumption, so you won't have to add any either.</p>\n<p>Tobias</p>",
        "id": 293905173,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660745741
    }
]