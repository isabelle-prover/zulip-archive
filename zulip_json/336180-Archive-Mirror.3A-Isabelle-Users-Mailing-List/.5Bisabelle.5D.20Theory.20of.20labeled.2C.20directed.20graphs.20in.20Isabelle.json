[
    {
        "content": "<p>From: Simon Meier &lt;<a href=\"mailto:meier-simon@student.ethz.ch\">meier-simon@student.ethz.ch</a>&gt;<br>\nHi,</p>\n<p>I'm looking for a graph theory in Isabelle that supports directed graphs<br>\nwith labeled edges. Has anybody already done such a development or knows<br>\nsome good pointers on how to model these?</p>\n<p>Thank you very much for your help,<br>\nSimon Meier</p>",
        "id": 294048392,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660818284
    },
    {
        "content": "<p>From: Alexander Krauss &lt;<a href=\"mailto:krauss@in.tum.de\">krauss@in.tum.de</a>&gt;<br>\nHi Simon,</p>\n<p>I recently formalized such graphs for some work I did on termination.<br>\nYou can find it in recent development snapshots<br>\n(HOL/Library/Graphs.thy). But since I created this for a particular task<br>\n(representing size-change graphs in termination proofs) it is probably<br>\nnot very well developed, and I don't know if it fits your needs.</p>\n<p>My graphs are basically just relations with a new constructor wrapped<br>\naround them:</p>\n<p>datatype ('n, 'e) graph = Graph \"('n * 'e * 'n) set\"</p>\n<p>This means that the set of nodes is assumed to be the whole type, which<br>\nis not what everybody wants, I suppose... Also, since they can be<br>\ninfinite and so on, they are rather abstract (as opposed to concrete<br>\ndata structures for efficient computation).</p>\n<p>Operations on graphs are a certain composition, addition (which is just<br>\nunion) and transitive closure. There is also a notion of (finite and<br>\ninfinite) path.</p>\n<p>What is the application you have in mind?</p>\n<p>Alex</p>",
        "id": 294048403,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660818287
    },
    {
        "content": "<p>From: Simon Meier &lt;<a href=\"mailto:meier-simon@student.ethz.ch\">meier-simon@student.ethz.ch</a>&gt;<br>\nHi Alex,</p>\n<p>thank you very much for your fast answer. I've checked the theory file<br>\nyou pointed me to and I guess it could serve as a good base.</p>\n<p>I'm formalizing the model-checking algorithm for security protocols used<br>\nby Scyther (<a href=\"http://people.inf.ethz.ch/cremersc/scyther/index.html\">http://people.inf.ethz.ch/cremersc/scyther/index.html</a>)</p>\n<p>Its essential component is an abstraction of the concrete traces given<br>\nby the operational semantics. A class of traces is represented by an<br>\nacyclic graph with the possible events as vertices and the edges<br>\ndefining for which events the execution order matters. The edge labels<br>\nare used by the algorithm to characterize the development of the<br>\nintruder knowledge.</p>\n<p>Thus, what I need from the graph theory are directed, acyclic, labeled<br>\ngraphs with a restricted node set, edge and vertice changes, transitive<br>\nclosure and finite paths. How difficult would it be to adapt your theory<br>\nto this needs? Is it a viable way at all?</p>\n<p>Thank you again for your help,<br>\nSimon</p>",
        "id": 294048454,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660818311
    }
]