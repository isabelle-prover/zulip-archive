[
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\nA Formalization of Assumptions and Guarantees for Compositional Noninterference<br>\nSylvia Grewe, Heiko Mantel, Daniel Schoepe</p>\n<p>Research in information-flow security aims at developing methods to identify<br>\nundesired information leaks within programs from private (high) sources to<br>\npublic (low) sinks. For a concurrent system, it is desirable to have<br>\ncompositional analysis methods that allow for analyzing each thread<br>\nindependently and that nevertheless guarantee that the parallel composition of<br>\nsuccessfully analyzed threads satisfies a global security guarantee. However,<br>\nsuch a compositional analysis should not be overly pessimistic about what an<br>\nenvironment might do with shared resources. Otherwise, the analysis will reject<br>\nmany intuitively secure programs.</p>\n<p>The paper \"Assumptions and Guarantees for Compositional Noninterference\" by<br>\nMantel et. al. presents one solution for this problem: an approach for<br>\ncompositionally reasoning about non-interference in concurrent programs via<br>\nrely-guarantee-style reasoning. We present an Isabelle/HOL formalization of the<br>\nconcepts and proofs of this approach.</p>\n<p><a href=\"http://afp.sourceforge.net/entries/SIFUM_Type_Systems.shtml\">http://afp.sourceforge.net/entries/SIFUM_Type_Systems.shtml</a></p>\n<hr>\n<p>A Formalization of Strong Security<br>\nSylvia Grewe, Alexander Lux, Heiko Mantel, Jens Sauer</p>\n<p>Research in information-flow security aims at developing methods to identify<br>\nundesired information leaks within programs from private sources to public<br>\nsinks. Noninterference captures this intuition. Strong security from Sabelfeld<br>\nand Sands formalizes noninterference for concurrent systems.</p>\n<p>We present an Isabelle/HOL formalization of strong security for arbitrary<br>\nsecurity lattices (Sabelfeld and Sands use a two-element security lattice in the<br>\noriginal publication). The formalization includes compositionality proofs for<br>\nstrong security and a soundness proof for a security type system that checks<br>\nstrong security for programs in a simple while language with dynamic thread<br>\ncreation.</p>\n<p>Our formalization of the security type system is abstract in the language for<br>\nexpressions and in the semantic side conditions for expressions. It can easily<br>\nbe instantiated with different syntactic approximations for these side<br>\nconditions. The soundness proof of such an instantiation boils down to showing<br>\nthat these syntactic approximations imply the semantic side conditions.</p>\n<p><a href=\"http://afp.sourceforge.net/entries/Strong_Security.shtml\">http://afp.sourceforge.net/entries/Strong_Security.shtml</a></p>\n<hr>\n<p>A Formalization of Declassification with WHAT-and-WHERE-Security<br>\nSylvia Grewe, Alexander Lux, Heiko Mantel, Jens Sauer</p>\n<p>AbsResearch in information-flow security aims at developing methods to identify<br>\nundesired information leaks within programs from private sources to public<br>\nsinks. Noninterference captures this intuition by requiring that no information<br>\nwhatsoever flows from private sources to public sinks. However, in practice this<br>\ndefinition is often too strict: Depending on the intuitive desired security<br>\npolicy, the controlled declassification of certain private information (WHAT) at<br>\ncertain points in the program (WHERE) might not result in an undesired<br>\ninformation leak.</p>\n<p>We present an Isabelle/HOL formalization of such a security property for<br>\ncontrolled declassification, namely WHAT&amp;WHERE-security from<br>\n\"Scheduler-Independent Declassification\" by Lux, Mantel, and Perner. The<br>\nformalization includes compositionality proofs for and a soundness proof for a<br>\nsecurity type system that checks for programs in a simple while language with<br>\ndynamic thread creation.</p>\n<p>Our formalization of the security type system is abstract in the language for<br>\nexpressions and in the semantic side conditions for expressions. It can easily<br>\nbe instantiated with different syntactic approximations for these side<br>\nconditions. The soundness proof of such an instantiation boils down to showing<br>\nthat these syntactic approximations imply the semantic side conditions.</p>\n<p><a href=\"http://afp.sourceforge.net/entries/WHATandWHERE_Security.shtml\">http://afp.sourceforge.net/entries/WHATandWHERE_Security.shtml</a></p>\n<p>Enjoy!</p>",
        "id": 294274397,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660918269
    }
]