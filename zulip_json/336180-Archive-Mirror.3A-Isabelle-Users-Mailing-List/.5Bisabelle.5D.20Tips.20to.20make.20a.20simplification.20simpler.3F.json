[
    {
        "content": "<p>From: \"Yannick Duchêne (Hibou57 )\" &lt;<a href=\"mailto:yannick_duchene@yahoo.fr\">yannick_duchene@yahoo.fr</a>&gt;<br>\nHi all again,</p>\n<p>I have a question from part of “prog-prove.pdf”</p>\n<p>On page 34, “prog-prove.pdf”, propose a inductive definition:</p>\n<p>inductive star :: \"('a ⇒ 'a ⇒ bool) ⇒ ('a ⇒ 'a ⇒ bool)\"<br>\n     for r<br>\n     where<br>\n       refl: \"((star r) x x)\"<br>\n     | step: \"(r x y) ⟹ ((star r) y z) ⟹ ((star r) x z)\"</p>\n<p>Then it suggest that “star r” is transitive and invite the reader to prove  <br>\nit. As the transitivity looked not obvious to me, I was afraid the proof  <br>\nmay be not that simple, but it was.</p>\n<p>The e‑book suggest to prove it this way:</p>\n<p>lemma star_trans: \"((star r) x y) ⟹ ((star r) y z) ⟹ ((star r) x z)\"<br>\n     apply (induction rule: star.induct)<br>\n     apply (assumption)<br>\n     apply (metis step)<br>\n     done</p>\n<p>But I did it this way:</p>\n<p>lemma star_trans: \"((star r) x y) ⟹ ((star r) y z) ⟹ ((star r) x z)\"<br>\n     apply (induction x y rule: star.induct)<br>\n     apply (assumption)<br>\n     apply (simp)<br>\n     apply (simp add: step)<br>\n     done</p>\n<p>The two first steps are obvious, and the e‑books used the same. After the  <br>\nfirst two steps, remains a single goal:</p>\n<p>1. ⋀x y za.<br>\n        r x y ⟹<br>\n        star r y za ⟹<br>\n        (star r za z ⟹ star r y z) ⟹ star r za z ⟹ star r x z</p>\n<p>My first “simp” is because “star r za z” appears as a supposedly True  <br>\nhypothesis, so that “(star r za z ⟹ star r y z)” can be simplified to  <br>\n“star r y z” and the goal then become:</p>\n<p>1. ⋀x y za.<br>\n        r x y ⟹<br>\n        star r y za ⟹<br>\n        star r y z ⟹ star r za z ⟹ star r x z</p>\n<p>Then, I noticed “r x y” and “star r y z” and “star r x z”, present in the  <br>\nhypothesis covers all of “star.step”, so that “star.step” is a more  <br>\ngeneral case of the goal to prove.</p>\n<p>As the simplifier is able to prove something like “(A⟹B⟹Z)⟹(A⟹B⟹C⟹Z)”, I  <br>\nsupposed it should be able to prove the less general goal by the more  <br>\ngeneral “star.step”.</p>\n<p>Looked quite straightforward, but the simplifier trace tells me *five  <br>\ntimes*:</p>\n<p>simp_trace_depth_limit exceeded!</p>\n<p>Amazingly, it was still able to prove the goal by simplification.</p>\n<p>My question is: how to make similar simplification more simple? By the  <br>\nway, should I really see it as an issue?</p>\n<p>Thanks for any pointers and feeling on the topic.</p>",
        "id": 294218400,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660896131
    },
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\nThe message \"simp_trace_depth_limit exceeded!\" merely tells you that the <em>trace</em><br>\ndepth has been exceeded. The behaviour of the simplifier is not affected, merely<br>\nits tracing is stopped until it emerges from its recursive invocations. This is<br>\na very simpled-minded way of getting a abstract view of the trace. If you want<br>\nmore tracing info, you can always increase the limit - in ProofGeneral there is<br>\na menue item Trace Simplifier Depth for it.</p>\n<p>We expect to provide better tracing facilities in the future.</p>\n<p>Tobias</p>",
        "id": 294218449,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660896155
    },
    {
        "content": "<p>From: \"Yannick Duchêne (Hibou57 )\" &lt;<a href=\"mailto:yannick_duchene@yahoo.fr\">yannick_duchene@yahoo.fr</a>&gt;<br>\nLe Tue, 31 Jul 2012 08:08:31 +0200, Tobias Nipkow  <br>\n&lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt; a écrit:</p>\n<blockquote>\n<p>The message \"simp_trace_depth_limit exceeded!\" merely tells you that the  <br>\n<em>trace</em><br>\ndepth has been exceeded. The behaviour of the simplifier is not affected,<br>\nThat's what I guessed too, while was still surprised a limit was exceeded  <br>\nwith what looked simple to me. On the other hand, I understand  <br>\nsimplification is the most important and tedious part of proof assistance  <br>\nand that it easily requires more steps than what a human believe in his  <br>\nmind.</p>\n</blockquote>\n<blockquote>\n<p>merely<br>\nits tracing is stopped until it emerges from its recursive invocations.  <br>\nThis is<br>\na very simpled-minded way of getting a abstract view of the trace. If  <br>\nyou want<br>\nmore tracing info, you can always increase the limit - in ProofGeneral  <br>\nthere is<br>\na menue item Trace Simplifier Depth for it.</p>\n</blockquote>\n<p>I searched for a way to have the same with jEdit. That's the opportunity  <br>\nof another topic.</p>\n<blockquote>\n<p>We expect to provide better tracing facilities in the future.</p>\n<p>Tobias</p>\n</blockquote>\n<p>May be a simple text filter would be enough. But I did not go into these  <br>\ninternals for now.</p>\n<p>Thanks for your comments and explanations.</p>",
        "id": 294218545,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660896210
    },
    {
        "content": "<p>From: Lars Noschinski &lt;<a href=\"mailto:noschinl@in.tum.de\">noschinl@in.tum.de</a>&gt;<br>\nYou can do this by \"using [[simp_trace_depth_limit=x]]\"</p>\n<p>-- Lars</p>",
        "id": 294221354,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660897666
    }
]