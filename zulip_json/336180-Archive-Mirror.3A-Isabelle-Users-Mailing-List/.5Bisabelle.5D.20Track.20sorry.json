[
    {
        "content": "<p>From: bnord &lt;<a href=\"mailto:bnord01@gmail.com\">bnord01@gmail.com</a>&gt;<br>\nHi,</p>\n<p>is there a tool (or similar) to track which theorems in a development <br>\ndepend in some way upon \"sorry\"? I've to assess student developments and <br>\ndoing this manually is a pain. ;) I'd imagine an Isabelle/jEdit \"plugin\".</p>\n<p>Best<br>\n     Benedikt</p>",
        "id": 294273172,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660917857
    },
    {
        "content": "<p>From: Lars Noschinski &lt;<a href=\"mailto:noschinl@in.tum.de\">noschinl@in.tum.de</a>&gt;<br>\nThis information is stored in a theorem. I think when you \"using\" this<br>\ntheorem, it is shown with a trailing \"[!]\".</p>\n<p>-- Lars</p>",
        "id": 294273205,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660917870
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nFor a quick and dirty check, I usually just use the hypersearch of jEdit, <br>\nwhich is one of the big assets of that text editor.  The keywords \"sorry\" <br>\nand \"axiomatization\" are the two main things to check.</p>\n<p>Further note that the Prover IDE is not obliged to be 100% authentic, <br>\nalthough it tries its best to be so -- there might be optical illusions <br>\neven if the system works properly. At the end of the day only batch builds <br>\ncount, with quick_and_dirty = false.</p>\n<p>The following discussion from last year about \"Sandboxed evaluation of <br>\nIsabelle theories?\" might be also of interest: <br>\n<a href=\"https://lists.cam.ac.uk/mailman/htdig/cl-isabelle-users/2013-February/msg00156.html\">https://lists.cam.ac.uk/mailman/htdig/cl-isabelle-users/2013-February/msg00156.html</a></p>\n<p>Makarius</p>",
        "id": 294273215,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660917876
    },
    {
        "content": "<p>From: Lars Noschinski &lt;<a href=\"mailto:noschinl@in.tum.de\">noschinl@in.tum.de</a>&gt;<br>\nThis will only tell the user whether all theorems are valid; when<br>\ngrading student exercises it is often valuable to know which theorems<br>\ncan be trusted despite having some (invalid) sorry'd theorem present.</p>\n<p>-- Lars</p>",
        "id": 294273285,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660917900
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nOn Sat, 5 Apr 2014, Julian Brunner wrote:</p>\n<blockquote>\n<p>On Wed, Mar 26, 2014 at 12:14 PM, Lars Noschinski &lt;<a href=\"mailto:noschinl@in.tum.de\">noschinl@in.tum.de</a>&gt; wrote:</p>\n<p>On 25.03.2014 18:36, Makarius wrote:</p>\n<blockquote>\n<blockquote>\n<p>On Tue, 25 Mar 2014, bnord wrote:</p>\n<blockquote>\n<p>is there a tool (or similar) to track which theorems in a development<br>\ndepend in some way upon \"sorry\"? I've to assess student developments<br>\nand doing this manually is a pain. ;) I'd imagine an Isabelle/jEdit<br>\n\"plugin\".</p>\n</blockquote>\n<p>For a quick and dirty check, I usually just use the hypersearch of<br>\njEdit, which is one of the big assets of that text editor.  The<br>\nkeywords \"sorry\" and \"axiomatization\" are the two main things to check.</p>\n<p>Further note that the Prover IDE is not obliged to be 100% authentic,<br>\nalthough it tries its best to be so -- there might be optical<br>\nillusions even if the system works properly. At the end of the day<br>\nonly batch builds count, with quick_and_dirty = false.<br>\nThis will only tell the user whether all theorems are valid; when<br>\ngrading student exercises it is often valuable to know which theorems<br>\ncan be trusted despite having some (invalid) sorry'd theorem present.</p>\n</blockquote>\n</blockquote>\n</blockquote>\n<p>(This thread is getting a bit complex by copy-pasting several text <br>\nsnippets with slightly different aspects back and forth.)</p>\n<p>Above I propose two conceptually different ways to check some Isabelle <br>\ndevelopment;</p>\n<p>(1) In the Prover IDE, using hypersearch to look at the concrete syntax.</p>\n<p>(2) In batch mode, by using knowledge about the LCF kernel works.</p>\n<p>When Lars says \"This will only tell the user whether all theorems are <br>\nvalid\" he seems to refer to (2), while ignoring (1) -- and the fantastic <br>\nhypersearch tool of jEdit.</p>\n<blockquote>\n<blockquote>\n<p>This will only tell the user whether all theorems are valid; when<br>\ngrading student exercises it is often valuable to know which theorems<br>\ncan be trusted despite having some (invalid) sorry'd theorem present.</p>\n</blockquote>\n<p>I second this, I've always found that very useful. Unfortunately, the <br>\n[!] marker seems to have been removed in one of the recent versions. I <br>\ndon't know exactly when or even whether it's just me, but I remember it <br>\nbeing there two years ago, and it's gone now. Unfortunately, the NEWS <br>\nfile only mentions its introduction.</p>\n</blockquote>\n<p>I read two times \"Unfortunately\" here, and two times wrong. See also <br>\nIsabelle2013/NEWS:</p>\n<ul>\n<li>Theorem status about oracles and unfinished/failed future proofs is<br>\nno longer printed by default, since it is incompatible with<br>\nincremental / parallel checking of the persistent document model.  ML<br>\nfunction Thm.peek_status may be used to inspect a snapshot of the<br>\nongoing evaluation process.  Note that in batch mode --- notably<br>\nisabelle build --- the system ensures that future proofs of all<br>\naccessible theorems in the theory context are finished (as before).</li>\n</ul>\n<p>Printing of conceptually inaccesible kernel derivations has been removed <br>\ngradually since parallel processing became routine in Isabelle2008. I <br>\ndon't think you really want to go back to the old sequential times, with <br>\nfull information about low-level inferences produced in a painfully slow <br>\nway. (HOL4 and Coq do this until today, but the Coq guys slowly discover <br>\nthat it might be done differently.)</p>\n<p>Makarius</p>",
        "id": 294274834,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660918428
    },
    {
        "content": "<p>From: Lars Noschinski &lt;<a href=\"mailto:noschinl@in.tum.de\">noschinl@in.tum.de</a>&gt;<br>\nHypersearch doesn't help when the theorem is declared as simp (or<br>\nsimilar). And building a transitive closure using hypersearch is cumbersome.</p>\n<p>-- Lars</p>",
        "id": 294275036,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660918495
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nSo we are back to the initial question, ``which theorems in a development <br>\ndepend in some way upon \"sorry\"'' and if the Prover IDE could show that. <br>\nOf course it could, but it still doesn't.  It is one of the many things I <br>\nwould have liked to see already some years ago.</p>\n<p>What is conceptually missing here is a way to \"wrap up\" the content of the <br>\ninteractive document model, like \"isabelle build\" does in batch mode.</p>\n<p>Moreover the resulting graph of formal entities, or failure to produce <br>\nthem, could be visualized, but the student project that was meant to <br>\nreplace the old graph browser by something that works with Scala and Swing <br>\ndid not produce anything apart from wasting substantial time.</p>\n<p>I need to emphasize explicitly here that the \"keen student\" rarely works <br>\nas wild-card: first one needs to find one, then one needs to turn the <br>\nresult into generally usable form, beyond mere experiments.</p>\n<p>Makarius</p>",
        "id": 294275163,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660918538
    }
]