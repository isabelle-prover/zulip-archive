[
    {
        "content": "<p>From: Sven Schneider &lt;<a href=\"mailto:sven.schneider.pub@gmx.de\">sven.schneider.pub@gmx.de</a>&gt;<br>\nYes of course, I can copy single warnings but how to copy all warnings<br>\nat once?<br>\nThere seem to be no buffer/window which contains these information...</p>\n<p>--Sven Schneider<br>\n<a href=\"/user_uploads/14278/Pc7eXygYfcLNTFT5X7NSAK9j/0xF0E2AE90.asc\">0xF0E2AE90.asc</a></p>",
        "id": 294326344,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660928650
    },
    {
        "content": "<p>From: Sven Schneider &lt;<a href=\"mailto:sven.schneider.pub@gmx.de\">sven.schneider.pub@gmx.de</a>&gt;<br>\nIs rename_tac using 'ubiquitious backtracking'? I would not have<br>\nexpected rename_tac to be so complex.</p>\n<p>I had a more simple implementation in mind: a tactic-wrapper which<br>\noperates as follows.<br>\n(1) obtain the current list of variables<br>\n(2) apply rename_tac<br>\n(3) obtain the new list of variables<br>\n(4) print a warning if old-list = new-list</p>\n<p>Then rename_tac could be replaced everywhere by the wrapper-tactic..</p>\n<p>--Sven Schneider<br>\n<a href=\"/user_uploads/14278/chn8KVXwrxEb1-1Co7Mlm2wO/0xF0E2AE90.asc\">0xF0E2AE90.asc</a></p>",
        "id": 294326394,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660928669
    },
    {
        "content": "<p>From: Larry Paulson &lt;<a href=\"mailto:lp15@cam.ac.uk\">lp15@cam.ac.uk</a>&gt;<br>\nThere must be some confusion here. No backtracking is needed for rename_tac.</p>\n<p>The point is to make your proofs independent of names internally generated by the system. It isn’t wrong if the names you choose turn out to be the same as the internal ones.</p>\n<p>Larry Paulson</p>",
        "id": 294326406,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660928673
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nOn Tue, 24 Feb 2015, Sven Schneider wrote:</p>\n<blockquote>\n<p>Is rename_tac using 'ubiquitious backtracking'? I would not have<br>\nexpected rename_tac to be so complex.</p>\n<p>I had a more simple implementation in mind: a tactic-wrapper which<br>\noperates as follows.<br>\n(1) obtain the current list of variables<br>\n(2) apply rename_tac<br>\n(3) obtain the new list of variables<br>\n(4) print a warning if old-list = new-list</p>\n<p>Then rename_tac could be replaced everywhere by the wrapper-tactic..</p>\n</blockquote>\n<p>Ubiquitious backtracking means you participate in a general situation of <br>\nany number of results -- in a compostion of lazy functions that produce <br>\nthem. This means that in general, warnings or errors don't work without <br>\nextra thought and extra machinery.</p>\n<p>(The problem is similar in parse translations: sometimes people emit <br>\nwarnings there, but it merely means some confusing messages pop up out of <br>\nnothing, without relation to the actual result.)</p>\n<p>A canonical way to get the above effect is to make rename_tac strict, in <br>\nthe sense that it simply fails on vacous renaming.  Thus it would behave <br>\nlike the \"simp\" method in that respect, in contrast to the internal <br>\nsimp_tac.</p>\n<blockquote>\n<p>From the concrete information exposed so far, I am not yet convinced that <br>\nit is worth the while to revisit such ancient tactical relics in the Isar <br>\nmethod name space at all.</p>\n</blockquote>\n<p>So just the standard questions:</p>\n<p>* What are typical remaining applications of rename_tac?</p>\n<p>* Is it feasible to dispose it eventually, e.g. after Eisbach has been<br>\n     properly established.</p>\n<p>Makarius</p>",
        "id": 294326423,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660928680
    },
    {
        "content": "<p>From: Sven Schneider &lt;<a href=\"mailto:sven.schneider.pub@gmx.de\">sven.schneider.pub@gmx.de</a>&gt;<br>\nDear experts,</p>\n<p>are there best practices to transfer Isabelle2011 (apply-style) code to<br>\nIsabelle2014?<br>\nFor example, a shell-script to execute?<br>\nWhat should be done before the transfer?</p>\n<p>The AFP submission guidelines seem to imply that back and isabelle<br>\ngenerated variable names are a source of backwards incompatibilty.<br>\nFurthermore, I have encountered renamed/removed lemmas.</p>\n<p>Is there a standard way to remove back? (I guess this is mostly the<br>\ncases where the <em>allE</em> is used in my proofs; so I can image that the<br>\nbest way is to explicitly instantiate the P-variable.)</p>\n<p>Is there a standard way to remove cases where Isabelle choses variable<br>\nnames? (I could explicitly set the names using rename_tac in all the<br>\nplaces, but how do I detect such places?)</p>\n<p>-- Sven Schneider<br>\n<a href=\"/user_uploads/14278/X2ofNMPVX4fn1Kz5aA2eXGzA/0xF0E2AE90.asc\">0xF0E2AE90.asc</a></p>",
        "id": 294327975,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660929219
    },
    {
        "content": "<p>From: Larry Paulson &lt;<a href=\"mailto:lp15@cam.ac.uk\">lp15@cam.ac.uk</a>&gt;<br>\nHave you tried doing this port yet, so that you can report specific things that have been causing you problems? I can imagine many proofs that would go through unaltered.</p>\n<p>There are no scripts for porting from one version to another.</p>\n<p>I find it useful to run both the old and the new copies of Isabelle during porting. Then you can see where a proof goes wrong. Then the simplest thing is to see whether sledgehammer (greatly improved since 2011) can solve the problematical case.</p>\n<p>Try to rewrite some of your proofs in the structured style. That gives you control over variable names and makes future porting much easier.</p>\n<p>Larry Paulson</p>",
        "id": 294327985,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660929225
    },
    {
        "content": "<p>From: Peter Lammich &lt;<a href=\"mailto:lammich@in.tum.de\">lammich@in.tum.de</a>&gt;<br>\nSome lemmas from the standard library (HOL) have also been renamed. This<br>\nis usually documented in the NEWS-file ... if a lemma is missing, search<br>\nfor its name in the NEWS-file, and you may find its new name ...</p>",
        "id": 294328020,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660929238
    },
    {
        "content": "<p>From: Sven Schneider &lt;<a href=\"mailto:sven.schneider.pub@gmx.de\">sven.schneider.pub@gmx.de</a>&gt;<br>\nThanks for all the hints.<br>\nI just tried to translate the first theories. Besides renamed lemmas<br>\nwhich are just annoying I now encountered a serious problem:</p>\n<p>(*) clarsimp (more precisely clarify) has changed its default behaviour.<br>\nIn particular, clarsimp/clarify does not remove (all/any?) useless<br>\nassumptions anymore.<br>\nIn the following example, clarsimp/clarify reduced the goal to \"goal (1<br>\nsubgoal): 1. C\" in 2011 but clarsimp/clarify fails at this point in 2014.<br>\nIs it possible to change the default clarsimp/clarify behaviour to<br>\nremove such assumptions?<br>\nlemma \"<br>\n  A=B<br>\n  \\&lt;Longrightarrow&gt; C\"<br>\napply(clarsimp)</p>\n<p>(*) In 2011 warnings were written to the response buffer. in<br>\nIsabelle2014/JEdit: is it possible to copy all these responses to a<br>\ncertain file?</p>\n<p>(*) Is it possible to adapt rename_tac s.t. it produces a warning if it<br>\nhas not altered the state?</p>\n<p>(*) Why is \"back\" considered bad \"style\" (according to the AFP<br>\nsubmission guidelines)? I removed all occurrences in my code already but<br>\nI am still curious.</p>\n<p>(*) Has option_case been removed or has it been renamed? In 2014 it is<br>\ninterpreted as a (blue) variable when it occurs in a lemma statement?</p>\n<p>-- Sven Schneider<br>\n<a href=\"/user_uploads/14278/82WPvY00XmYGkckIuKbhiCXq/0xF0E2AE90.asc\">0xF0E2AE90.asc</a></p>",
        "id": 294328632,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660929475
    },
    {
        "content": "<p>From: Dmitriy Traytel &lt;<a href=\"mailto:traytel@in.tum.de\">traytel@in.tum.de</a>&gt;<br>\nDear Sven,</p>\n<p>I (or more precisely the NEWS file) can answer some of your questions.</p>\n<p>On 20.02.2015 14:59, Sven Schneider wrote:</p>\n<blockquote>\n<p>Thanks for all the hints.<br>\nI just tried to translate the first theories. Besides renamed lemmas<br>\nwhich are just annoying I now encountered a serious problem:</p>\n<p>(*) clarsimp (more precisely clarify) has changed its default behaviour.<br>\nIn particular, clarsimp/clarify does not remove (all/any?) useless<br>\nassumptions anymore.<br>\nIn the following example, clarsimp/clarify reduced the goal to \"goal (1<br>\nsubgoal): 1. C\" in 2011 but clarsimp/clarify fails at this point in 2014.<br>\nIs it possible to change the default clarsimp/clarify behaviour to<br>\nremove such assumptions?<br>\nlemma \"<br>\n   A=B<br>\n   \\&lt;Longrightarrow&gt; C\"<br>\napply(clarsimp)<br>\n From the NEWS file:</p>\n</blockquote>\n<blockquote>\n<ul>\n<li>Standard tactics and proof methods such as \"clarsimp\", \"auto\" and<br>\n\"safe\" now preserve equality hypotheses \"x = expr\" where x is a free<br>\nvariable.  Locale assumptions and chained facts containing \"x\"<br>\ncontinue to be useful.  The new method \"hypsubst_thin\" and the<br>\nconfiguration option \"hypsubst_thin\" (within the attribute name space)<br>\nrestore the previous behavior.  INCOMPATIBILITY, especially where<br>\ninduction is done after these methods or when the names of free and<br>\nbound variables clash.  As first approximation, old proofs may be<br>\nrepaired by \"using [[hypsubst_thin = true]]\" in the critical spot.</li>\n</ul>\n</blockquote>\n<p>If you have many occurrences, you could also</p>\n<p>declare [[hypsubst_thin = true]]</p>\n<p>globally.</p>\n<blockquote>\n<p>(*) In 2011 warnings were written to the response buffer. in<br>\nIsabelle2014/JEdit: is it possible to copy all these responses to a<br>\ncertain file?</p>\n<p>(*) Is it possible to adapt rename_tac s.t. it produces a warning if it<br>\nhas not altered the state?</p>\n<p>(*) Why is \"back\" considered bad \"style\" (according to the AFP<br>\nsubmission guidelines)? I removed all occurrences in my code already but<br>\nI am still curious.<br>\nBecause it makes your proof rely on the order in which the HO-unifier <br>\nproduces its results.<br>\n(*) Has option_case been removed or has it been renamed? In 2014 it is<br>\ninterpreted as a (blue) variable when it occurs in a lemma statement?<br>\n From the NEWS file:<br>\n  - The generated constants \"xxx_case\" and \"xxx_rec\" have been renamed<br>\n    \"case_xxx\" and \"rec_xxx\" (e.g., \"prod_case\" ~&gt; \"case_prod\").<br>\n    INCOMPATIBILITY.</p>\n</blockquote>\n<p>Dmitriy</p>",
        "id": 294328633,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660929477
    },
    {
        "content": "<p>From: Sven Schneider &lt;<a href=\"mailto:sven.schneider.pub@gmx.de\">sven.schneider.pub@gmx.de</a>&gt;<br>\nThank you very much.<br>\nI had a look at the news file but I guess I did not use the right search<br>\nstrings...</p>\n<hr>\n<p>This is what I also believed.<br>\nWhy is it not required that back always produces an immediate fault,<br>\ni.e., always a unique result?<br>\nWithout 'back' the first result is chosen but if the order changes, this<br>\nfirst element may be a different than before.</p>\n<p>Remaining questions:<br>\n(*) In 2011 warnings were written to the response buffer. in<br>\nIsabelle2014/JEdit: is it possible to copy all these responses to a<br>\ncertain file?</p>\n<p>(*) Is it possible to adapt rename_tac s.t. it produces a warning if it<br>\nhas not altered the state?</p>\n<p>-- Sven Schneider<br>\n<a href=\"/user_uploads/14278/MTNF9QPW26x0xhL4lDd4G3wI/0xF0E2AE90.asc\">0xF0E2AE90.asc</a></p>",
        "id": 294328703,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660929487
    },
    {
        "content": "<p>From: Larry Paulson &lt;<a href=\"mailto:lp15@cam.ac.uk\">lp15@cam.ac.uk</a>&gt;<br>\nThe “back” command is intended to allow interactive exploration of the multiple results delivered by a proof method. But leaving instances of this command in a proof script makes it unusually difficult to read and fragile. You can fix this problem in a number of ways, for example by explicitly instantiating variables in a theorem or by combining a series of proof methods where the last one will fail unless the last choice was made earlier, a bit like constraint satisfaction in Prolog.</p>\n<p>Larry Paulson</p>",
        "id": 294328709,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660929488
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nThe Isabelle/jEdit manual briefly mentions \"copy\" from \"secondary windows\" <br>\nvia the canonical keyboard shortcut C+c.  This refers to the \"Output\" <br>\nwindow, as well as other popup or Info windows.</p>\n<p>Makarius</p>",
        "id": 294328760,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660929513
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nIn really ancient times, the former goal stack package of the ML toplevel <br>\nused to issue such a warning for arbitrary tactic applications; thus it <br>\nhad the above effect for rename_tac. The built-in warning was later <br>\ndiscontinued for the Isar proof state management, because it was unclear <br>\nwhat \"not altered\" means.</p>\n<p>Also note that a tactic or proof method cannot easily provide side-results <br>\nas warning (or error) by itself, due to the ubiquitious backtracking, <br>\nwhich was a big thing in Isabelle89.  (Backtracking has recently made into <br>\nCoq 8.5 as well, with similar consequences on diagnostic tactics.)</p>\n<p>After so many years with old-style tactic emulations in Isar (like <br>\nrename_tac, rule_tac, erule_tac etc.) it might be time to investigate <br>\npossibilities to live without them.  Recent developments around the <br>\nEisbach proof method language could allow to remove these old artifacts <br>\neventually.</p>\n<p>Makarius</p>",
        "id": 294328777,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660929519
    }
]