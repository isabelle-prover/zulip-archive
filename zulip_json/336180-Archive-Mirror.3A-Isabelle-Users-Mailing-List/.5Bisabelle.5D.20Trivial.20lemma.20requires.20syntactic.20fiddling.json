[
    {
        "content": "<p>From: Nemouchi Yakoub &lt;<a href=\"mailto:y.nemouchi@gmail.com\">y.nemouchi@gmail.com</a>&gt;<br>\nDear list,</p>\n<p>It is a bit awkward to see that to prove a trivial lemma on natural numbers<br>\nrequires syntactic fiddling on the notation of  sets. It looks like the<br>\nwhole reasoning machinery behind assumes a certain syntactic notation for<br>\nsets.</p>\n<p>For example the lemma in the sequel requires me to apply (**) twice as<br>\nsubstitution  just to get in a syntactic form where I can apply the<br>\nreasoning machinery provided by the library. Namely, it is awkward to see<br>\nthat the notation {0..n::nat} is better than {na::nat. na ≤n} when proving<br>\nstuff on ∑ .<br>\nMy question is why not just having the same syntactic sugar for both<br>\nnotations? Any limitations to have an abbreviation of the form {na::nat. na<br>\n≤n} ==  {0..n::nat}? Or just because ∑ is too general? Is there an existing<br>\nAFP entry or an Isabelle theory that introduces these kind of abbreviations<br>\nwhen sets are specialized for natural numbers?</p>\n<p>lemma \"∑{na::nat. na ≤n} = ((n * (n +1)) div 2)\"<br>\nproof -<br>\n  have **: \"⋀n. {na::nat. na ≤n} = {0.. n}\"<br>\n    by auto<br>\n  show ?thesis<br>\n  proof (induct n)<br>\n    case 0<br>\n    then show ?case by simp<br>\n  next<br>\n    case (Suc n)<br>\n    assume H1: \"∑{na. na ≤ n} = n * (n + 1) div 2\"<br>\n    have *:\"∑{naa. naa ≤  Suc n} = ∑{naa. naa ≤  n} +  Suc n\"<br>\n      apply (subst **)<br>\n      apply (subst **)<br>\n      using sum.atLeast0_atMost_Suc<br>\n      apply blast<br>\n      done<br>\n    show ?case<br>\n      apply (subst *)<br>\n      apply (subst H1)<br>\n      apply (simp)<br>\n      done<br>\n  qed<br>\nqed</p>\n<p>Best wishes,</p>\n<p>Yakoub.</p>",
        "id": 294752408,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661195950
    },
    {
        "content": "<p>From: Lawrence Paulson &lt;<a href=\"mailto:lp15@cam.ac.uk\">lp15@cam.ac.uk</a>&gt;<br>\nIn logic there are always many ways of writing the same thing. But as regards Isabelle’s automation, as a general rule, you should prefer to minimise the use of bound variables. In this case, {na::nat. na ≤n} looks much more complicated to Isabelle than {0..n::nat}.  More generally, consider replacing {x. P x &amp; Q x} by the obvious intersection, et cetera.</p>\n<p>Larry Paulson</p>",
        "id": 294752603,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661196019
    }
]