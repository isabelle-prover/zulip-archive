[
    {
        "content": "<p>From: Gottfried Barrow &lt;<a href=\"mailto:gottfried.barrow@gmx.com\">gottfried.barrow@gmx.com</a>&gt;<br>\nHi,</p>\n<p>I've set up a bunch of simp rules, and I'm getting lots of 1 step proofs <br>\nwith \"by(simp)\".</p>\n<p>However, there's one common proof which I can't figure out how to get in <br>\n1 step, which is set equality for the case where I have to prove \"A is a <br>\nsubset of B and B is a subset of A\", which I have to do because the auto <br>\nprovers can't prove \"A = B\" directly.</p>\n<p>The problem is that my \"A is a subset of B and B is a subset of A\" is my <br>\nmain equality \"A=B\", so I'm blank on how I can automate the connection <br>\nbetween the two.</p>\n<p>I attach a PDF. On page 7, Notation 3.1.10, I create an abbreviation for <br>\n\"A is a subset of B and B is a subset of A\". On page 8 is my Theorem <br>\n3.1.12 which shows that \"A is a subset of B and B is a subset of A\" is <br>\nequivalent to \"A=B\".</p>\n<p>My theory is filling up with proofs to theorems in which I state a proof <br>\nstep with my \"equal subsets\" operator, prove it with \"by(simp)\", and <br>\nthen have to finish it off with the Theorem 3.1.12.</p>\n<p>Starting on page 37, there's 6 out of 7 theorems where I do that. Then <br>\non page 39, there's the examples that show how I can get equality with <br>\nmy \"equal subsets\" operator, but not with the normal \"=\".</p>\n<p>That's related to the main reason I care, which is that I'd like to show <br>\nfinite set equality using only one automatic proof method command.</p>\n<p>If anyone can tell me how to do that, I'd appreciate it.</p>\n<p>Regards,<br>\nGB<br>\n<a href=\"/user_uploads/14278/wCXNeLTuPGJlI9y5QOC1EcW3/sTs_doc.pdf\">sTs_doc.pdf</a></p>",
        "id": 294235162,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660904441
    },
    {
        "content": "<p>From: Gottfried Barrow &lt;<a href=\"mailto:gottfried.barrow@gmx.com\">gottfried.barrow@gmx.com</a>&gt;<br>\nI'll simplify my question.</p>\n<p>I have a very common theorem and proof pattern which uses \"=\", a binary <br>\noperator \"seO\", and a theorem \"ssO\":</p>\n<p>theorem \"A = B\"<br>\nproof- have<br>\n   \"A seO B\"<br>\n   by(simp)<br>\n   thus<br>\n   \"A = B\"<br>\n   by(metis ssO_eq)<br>\nqed</p>\n<p>I'm learning proof techniques on an as-need basis, where Sledgehammer <br>\nand metis have dramatically reduced the \"need\" in \"as-need\".</p>\n<p>Is there some way I can automate that specific proof template?</p>\n<p>Can I do that in ML? Is there an example somewhere that will show me how <br>\nto do it?</p>\n<p>I can't set up a simp rule for the formula \"(A seO B) = (A = B)\" because <br>\nit's exactly \"(A seO B)\" that I have to prove to get \"(A = B)\".</p>\n<p>Thanks,<br>\nGB</p>",
        "id": 294235207,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660904469
    },
    {
        "content": "<p>From: Gottfried Barrow &lt;<a href=\"mailto:gottfried.barrow@gmx.com\">gottfried.barrow@gmx.com</a>&gt;<br>\nI guess the answer might be in the The Isabelle Cookbook.</p>\n<p><a href=\"http://www.inf.kcl.ac.uk/staff/urbanc/Cookbook/\">http://www.inf.kcl.ac.uk/staff/urbanc/Cookbook/</a></p>\n<p>Maybe in chapter 6, Tactical Reasoning.</p>\n<p>So far, I've enjoyed only needing a bare bones structured proof, or only <br>\na \"by(metis...)\" proof that Sledgehammer found for me.</p>\n<p>But having to frequently have 7 lines for a proof, which is really only <br>\nabout 4 or 5 lines of proof, that's weighing heavy on me.</p>\n<p>If someone wants to give me the ML to implement the 7 lines of proof <br>\nbelow, that would be good, but then, maybe to automate it, tactics are <br>\nneeded. I wouldn't know anything about tactics.</p>\n<p>Regards,<br>\nGB</p>",
        "id": 294235255,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660904494
    },
    {
        "content": "<p>From: Ramana Kumar &lt;<a href=\"mailto:rk436@cam.ac.uk\">rk436@cam.ac.uk</a>&gt;<br>\nCan't you prove \"(A seO B) ==&gt; (A = B)\" and then use that theorem as a rule?</p>",
        "id": 294235267,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660904500
    },
    {
        "content": "<p>From: Gottfried Barrow &lt;<a href=\"mailto:gottfried.barrow@gmx.com\">gottfried.barrow@gmx.com</a>&gt;<br>\nRamana,</p>\n<p>Thanks for the tip. I proved something like this:</p>\n<p>theorem name [simp]:<br>\n\"(A seO B) ==&gt; (A = B)\"<br>\nby(metis foo)</p>\n<p>It then caused some non-terminating things to start happening.</p>\n<p>However, doing all of that helped me realize that it has to be a two <br>\nstep proof. The flow has to be</p>\n<p>(A = B) ====&gt; (A seO B) --&gt; (A = B),</p>\n<p>where \"====&gt;\" means I have to convert (A=B) into the form (A seO B) <br>\nbefore anything can be proved, and I can't get the simplifier to convert <br>\n(A=B) to something like (A seO B), which I suppose is for good reason, <br>\nsince \"=\" is used everywhere. (In a manner of speaking, I manually <br>\nconvert (A=B) to (A seO B) as the first step in the proof.)</p>\n<p>My simp rule expands \"seO\" into the formula</p>\n<p>\"(x IN A --&gt; x IN B) &amp; (x IN B --&gt; x IN A)\".</p>\n<p>The simp rules then expand formulas like \"x IN {a,b}\" into the formula <br>\n\"(x = a | x = b)\".</p>\n<p>With all the expansion, lexicographic ordering, and other simp rules, <br>\nthings get simplified and proved. All the work is done in the processing <br>\nof the statement</p>\n<p>\"(A seO B)\" apply(simp).</p>\n<p>Unless someone tells me the way to do it, I'll someday check into how to <br>\nprogram tactics, and see if that's the way to do it. Whatever the case, <br>\nthe simp or auto methods have to be used, as far I can tell. I don't see <br>\nhow the simplifier could be replaced.</p>\n<p>Thanks,<br>\nGB</p>",
        "id": 294235279,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660904506
    },
    {
        "content": "<p>From: Lars Noschinski &lt;<a href=\"mailto:noschinl@in.tum.de\">noschinl@in.tum.de</a>&gt;<br>\nYou could a conditional rewrite rule \"A &lt;= B; B &lt;= A ==&gt; A = B\".</p>\n<p>BTW: Having one of your central operators be an abbreviation (especially <br>\none which is likely to be modified by simp/auto) will probably do more <br>\nharm than good, as automated tactics will often modify your goal in a <br>\nway, where your Lemmas do not apply directly anymore.</p>\n<p>BTW2: Having (minimal, working) theory files instead of PDFs makes it <br>\noften easier to come up with good suggestions.</p>\n<p>-- Lars</p>",
        "id": 294235440,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660904555
    },
    {
        "content": "<p>From: Lars Noschinski &lt;<a href=\"mailto:noschinl@in.tum.de\">noschinl@in.tum.de</a>&gt;<br>\nActually, this kind of thing is good use case for introduction rules. <br>\nGiven a rule X: \"A se0 B ==&gt; A = B\", you could perform the proof with</p>\n<p>by (rule X) simp</p>\n<p>or, for a structured proof:</p>\n<p>proof (rule X)<br>\n   ...<br>\nqed</p>\n<p>If declared with [intro?], rule (and hence proof) will automatically <br>\npickup this rule.</p>\n<p>-- Lars</p>",
        "id": 294235469,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660904561
    },
    {
        "content": "<p>From: Gottfried Barrow &lt;<a href=\"mailto:gottfried.barrow@gmx.com\">gottfried.barrow@gmx.com</a>&gt;<br>\nLars,</p>\n<p>Speaking in an informal manner, as one engaging in street banter on the <br>\nstreets of downtown San Diego, Dallas, or some other large metropolis, <br>\nsuch as, say, even Munich, you be da man.</p>\n<p>I'm back to simp or auto one-liners that should be one-liners, which is <br>\nthe case for these types of proofs with my \"esO\" (which I was calling <br>\nseO). My operator esO \"is\" equality, so with the way that Isabelle has <br>\nconditioned me, if I can prove \"A esO B\", the software should make it <br>\nlook effortless to get that extra step \"A = B\".</p>\n<p>I get duplicate emails sometimes off of the mailing list, so I didn't <br>\nread your second answer for a while. Consequently, I was studying simple <br>\ntest cases of what the Set.thy subset_eq operator is capable of doing <br>\nwhen intersections are involved.</p>\n<p>I attached three images for a total of 79Kbytes.</p>\n<p>The image 130228__Lars bibliography.png is the bibliography entry to <br>\nyour answer. The section that uses Christian's bibliography entry is out <br>\nfor the moment.</p>\n<p>With infinite time, I'd be happy to do my homework and work through all <br>\nthe tutorials on proof techniques, but given the choice between proving <br>\nwhat interests me, with a small but powerful set of proof methods, and <br>\nlaboring through tutorials, I keep choosing to be less educated in Isar <br>\nproof techniques.</p>\n<p>The image 130228__esO_meta_eq_lecture.png shows how I incorporated your <br>\nsuggestion.</p>\n<p>The image 130228__esO_meta_eq_for_sets.png shows how I was trying to <br>\nunderstand the basic concepts that Set.subset_eq uses to prove equality <br>\nof sets when one side of the equation is an intersection.</p>\n<p>This thing with intersections is what led to all this. Equality of <br>\nunions is easy to prove because you don't have to know anything about <br>\nthe sets. If an element is in one set, then it's in the union.</p>\n<p>But with intersections, you need to prove that two elements aren't <br>\nequal, which can't be claimed in general.</p>\n<p>So the point doesn't get lost, what I'm saying in this last part is <br>\nabout the semi-magic of the HOL engine. It's not total magic, maybe 99% <br>\nmagic, because I know some of the 1% that's happening because of my rules.</p>\n<p>But part of the magic is that in the examples in the 3rd image, my \"=\" <br>\nat the bottom of the image is getting results from rules that are more <br>\ngeneral than the \"=\" for the set of type \"nat set\" at the top. From <br>\nlooking a little at the simp trace, I see that it's using the properties <br>\nof how the natural numbers have been defined. For those constants I <br>\ndefined, I've made no special rules to get equality for those sets. I <br>\ndid cheat and use \"sorry\" to get two theorems that need to be used to <br>\nget equality for the pattern that those constant sets use, but those are <br>\ntwo theorems I would want to prove regardless of their use there.</p>\n<p>As far as using \"definition\" for operators rather than \"abbreviation\", <br>\nthe reason I had done that originally is because the need for something <br>\nlike \"esO_def\" cluttered up the metis proofs. Discovering the use of <br>\n\"simp\" made that a mute point.</p>\n<p>I did convert my subset operators over to \"definition\", but as it turns <br>\nout, I only do it to make it clear when they're being used in the simp <br>\ntrace.</p>\n<p>After defining them, I immediately convert them to their formulas with a <br>\nsimp rule, because it's their formulas that allow the logic to make a <br>\nlot of decisions. I experimented some with using them before their simp <br>\nconversion rule, but I decided to try and keep it simple, and so far <br>\nit's working that way.</p>\n<p>What the future holds, I can only speculate about that.</p>\n<p>As to why I put up the PDF instead of the THY, I could explain that, but <br>\nit would make the email longer.</p>\n<p>I could even tie this all into Stackexchange (which I do a little). <br>\nSuppose I would have posted my original question on Stackexchange, and <br>\nthen posted an email to this mailing list to notify people of the <br>\nquestion, where I provided a link to the Stackexchange question.</p>\n<p>I got that idea specifically from some things said in this thread. But <br>\nright now, I'm thinking it would have been a bad idea, and it's because <br>\nI got the perfect answer to my question, which I didn't expect to get.</p>\n<p>With just the right circumstances, if a person asks an involved, <br>\napplication specific question on this mailing list, they will get an <br>\nanswer, and it largely has to do with whether the experts have time to <br>\nthink about the question.</p>\n<p>Right now, I'm thinking that if I would have split up things between <br>\nthis mailing list and Stackexchange, it would have been a distraction, <br>\nand I wouldn't have gotten the perfect answer, and it would have taken <br>\nme months to get the answer on my own.</p>\n<p>On the other hand, maybe I'll try doing the duplicate Stackexchange <br>\nthing in the future.</p>\n<p>But now I'm again saying, \"No\".</p>\n<p>I asked a question. Ramana took the time to offer a tip. Lars comes in <br>\nand responds to what was my response to Ramana, not my response to Lars. <br>\nSo, if Ramana had gone to Stackexchange and made the comment, and I had <br>\nreplied to Ramana only on Stackexchange, which would have been the case, <br>\nand Stackexchange wasn't in Lars's loop, or Lars didn't have the time to <br>\nmake Stackexchange a priority, but always does make this mailing a high <br>\npriority, because it's official, and he's at TUM, what would have been <br>\nthe result?</p>\n<p>We know. Pain. Suffering. The absence of automation. Multiple proof <br>\nsteps wasting precious ASCII characters, not to mention the overhead of <br>\nUnicode graphical characters being converted from \\&lt;in&gt;, <br>\n\\&lt;subset&gt;\\&lt;^sub&gt;\\&lt;iota&gt;, along with even more ASCII keywords, such as qed.</p>\n<p>Thanks for the help.</p>\n<p>Regards,<br>\nGB<br>\n<a href=\"/user_uploads/14278/Ps0GxblcjqBAQi7Cn7-S7BX5/130228__Lars-bibliography.png\">130228__Lars bibliography.png</a><br>\n<a href=\"/user_uploads/14278/G7TQ1WrDSd8oBKCI34gRGBit/130228__esO_meta_eq_lecture.png\">130228__esO_meta_eq_lecture.png</a><br>\n<a href=\"/user_uploads/14278/fzWAUqsN2_WZLET5l84IUw9G/130228__esO_meta_eq_for_sets.png\">130228__esO_meta_eq_for_sets.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/14278/Ps0GxblcjqBAQi7Cn7-S7BX5/130228__Lars-bibliography.png\" title=\"130228__Lars bibliography.png\"><img src=\"/user_uploads/14278/Ps0GxblcjqBAQi7Cn7-S7BX5/130228__Lars-bibliography.png\"></a></div><div class=\"message_inline_image\"><a href=\"/user_uploads/14278/G7TQ1WrDSd8oBKCI34gRGBit/130228__esO_meta_eq_lecture.png\" title=\"130228__esO_meta_eq_lecture.png\"><img src=\"/user_uploads/14278/G7TQ1WrDSd8oBKCI34gRGBit/130228__esO_meta_eq_lecture.png\"></a></div><div class=\"message_inline_image\"><a href=\"/user_uploads/14278/fzWAUqsN2_WZLET5l84IUw9G/130228__esO_meta_eq_for_sets.png\" title=\"130228__esO_meta_eq_for_sets.png\"><img src=\"/user_uploads/14278/fzWAUqsN2_WZLET5l84IUw9G/130228__esO_meta_eq_for_sets.png\"></a></div>",
        "id": 294236672,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660905066
    },
    {
        "content": "<p>From: Thomas Sewell &lt;<a href=\"mailto:Thomas.Sewell@nicta.com.au\">Thomas.Sewell@nicta.com.au</a>&gt;<br>\nI think that the problem with providing \"A &lt;= B; B &lt;= A ==&gt; A = B\" as a <br>\nconditional rewrite rule is that the simplifier will (probably) see this <br>\nas a rule for rewriting A into B rather than a rule for rewriting \"A = <br>\nB\" into True. This is too general, it will be applied anywhere there is <br>\nan A with an appropriate type.</p>\n<p>One solution is to resolve your rule with Eq_TrueI, for instance, \"thm <br>\nequalityI[THEN Eq_TrueI]\". Your rule should then look like \"A &lt;= B; B &lt;= <br>\nA ==&gt; (A = B) == True\", which strongly suggests to the simplifier that <br>\nit should be used only for rewriting actual equalities.</p>\n<p>For some reason the system seems to figure this out by itself when given <br>\nthe equalityI rule from HOL, which may invalidate this comment.</p>\n<p>Yours,<br>\n     Thomas.</p>",
        "id": 294237794,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660905548
    },
    {
        "content": "<p>From: Gottfried Barrow &lt;<a href=\"mailto:gottfried.barrow@gmx.com\">gottfried.barrow@gmx.com</a>&gt;<br>\nThomas,</p>\n<p>Thanks for the input.</p>\n<p>Extraordinarily simple stuff can be a real show stopper for the novice. <br>\nI tried \"A &lt;= B; B &lt;= A ==&gt; A = B\" after Lar's comment, and it gave me a <br>\nsyntax error, and after searching for documentation on how to use <br>\nconditional rewrite rule syntax, particularly how to use the semicolon, <br>\nI couldn't find any, so I gave up.</p>\n<p>This time I tried a little harder, doing searches and stuff, looking for <br>\nthat semicolon, and finally I decided it must be an operator, so I <br>\nfinally tried \\&lt;and&gt;, which got me to the next step.</p>\n<p>As an aside, the syntax for two other operators that have never worked <br>\nfor me in jEdit  are \"/\\\" and \"\\/\", but they're listed in the symbols panel.</p>\n<p>I could talk about Stackexchange more also, about whether this comment <br>\nwould have gotten made if the replies were split up.</p>\n<p>Anyway, the conditional rewrite rule looked a little promising, because <br>\nit might be onerous to have to type \"(rule)\" if I knew I could set <br>\nthings up without having to do that.</p>\n<p>However, the performance of either of \"A &lt;= B; B &lt;= A ==&gt; A = B\" or \"A <br>\n&lt;= B; B &lt;= A ==&gt; (A = B) == True\"  is very slow.</p>\n<p>I have some examples of sets which are nested about 11 levels deep. It's <br>\nobvious now that Ramana gave me the same formula, but with my own <br>\nnotation. I told him it was creating some non-termination, but that's <br>\nnot the case. It's just that it takes forever for simp to simplify these <br>\nnested sets. Each level of nesting adds at least twice the time to <br>\nsimplify it.</p>\n<p>At 7 levels it takes about 15 to 20 seconds, where without this <br>\nconditional simp rule in, it takes no time, and those examples don't <br>\neven need that rule.</p>\n<p>Conditional rewriting will come in handy now that I've made the <br>\nconnection between \"conditional\" and the conditional \"==&gt;\". That wasn't <br>\nan easy connection to make. Information overload or just a lack of the <br>\nnecessary amount of hand holding.</p>\n<p>Thanks for the suggestion,<br>\nGB</p>",
        "id": 294237967,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660905617
    }
]