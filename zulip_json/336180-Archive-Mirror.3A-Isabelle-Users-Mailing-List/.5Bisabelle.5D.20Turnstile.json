[
    {
        "content": "<p>From: Mark Adams &lt;<a href=\"mailto:mark@proof-technologies.com\">mark@proof-technologies.com</a>&gt;<br>\nDear list,</p>\n<p>Is there an equivalent to turnstile in Isabelle?  In good old<br>\nmathematics and in other HOL systems, the turnstile (|-) has two roles:<br>\nto indicate that a theorem has been proved, and to separate any<br>\nassumptions of the theorem from its conclusion.</p>\n<p>In Isabelle2005, if you return a theorem in the read-eval-print-loop,<br>\nthen if it has one assumption 'P' and conclusion 'Q' then it gets<br>\nprinted as \"Q [P]\" (if the flag for showing hypotheses is set), but just<br>\nas \"Q\" if there are no assumptions, and so this corresponds to the<br>\nsecond role.</p>\n<p>But what about in more recent Isabelles?  I know that there's no<br>\nread-eval-print-loop as such, and that in Isar scripts you write<br>\n\"theorem\" before a formula, which is a bit like the first role but not<br>\nquite because until the proof is complete it states the intention that<br>\nthe formula will be proved rather than that it has been proved.  Are<br>\nthere ways of displaying lists of theorems, and if so how are these<br>\npresented?  I note that the printer for \"Q [P]\" is still there in the<br>\nIsabelle Pure source.  If anyone could shed any light on all of this<br>\nthen I'd be most grateful.</p>\n<p>Mark.</p>",
        "id": 294676621,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661175174
    },
    {
        "content": "<p>From: Peter Lammich &lt;<a href=\"mailto:lammich@in.tum.de\">lammich@in.tum.de</a>&gt;<br>\nOn Di, 2016-06-07 at 00:51 +0100, Mark Adams wrote:</p>\n<blockquote>\n<p>Dear list,</p>\n<p>Is there an equivalent to turnstile in Isabelle?  In good old<br>\nmathematics and in other HOL systems, the turnstile (|-) has two roles:<br>\nto indicate that a theorem has been proved, and to separate any<br>\nassumptions of the theorem from its conclusion.</p>\n<p>In Isabelle2005, if you return a theorem in the read-eval-print-loop,<br>\nthen if it has one assumption 'P' and conclusion 'Q' then it gets<br>\nprinted as \"Q [P]\" (if the flag for showing hypotheses is set), but just<br>\nas \"Q\" if there are no assumptions, and so this corresponds to the<br>\nsecond role.</p>\n<p>But what about in more recent Isabelles?  I know that there's no<br>\nread-eval-print-loop as such, and that in Isar scripts you write<br>\n\"theorem\" before a formula, which is a bit like the first role but not<br>\nquite because until the proof is complete it states the intention that<br>\nthe formula will be proved rather than that it has been proved.  Are<br>\nthere ways of displaying lists of theorems, and if so how are these<br>\npresented?  I note that the printer for \"Q [P]\" is still there in the<br>\nIsabelle Pure source.  If anyone could shed any light on all of this<br>\nthen I'd be most grateful.</p>\n</blockquote>\n<p>The hypothesis are used in Isabelle merely internally, and the<br>\nstandard-user should not see them. Theorems are presented as<br>\nmeta-implications \"P1==&gt;...==&gt;Pn==&gt;Q\", or, syntax-sugared \"[| P1;...;Pn<br>\n|] ==&gt; Q\". This is also the way they are printed. <br>\nIn Isar, you can use the \"thm\" command to print (a list of) theorems.</p>\n<p>To state a theorem, you can either use meta-implications, or the<br>\n\"long-goal\" format:<br>\nlemma foo:<br>\n  assumes P1 and ... and Pn<br>\n  shows Q</p>\n<p>By the very design of Isabelle, every theorem has been proved (or has a<br>\npending future proof attached [Makarius, correct me if I'm wrong<br>\nhere ;)])</p>",
        "id": 294676637,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661175180
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nOn 07/06/16 01:51, Mark Adams wrote:</p>\n<blockquote>\n<p>Is there an equivalent to turnstile in Isabelle?  In good old<br>\nmathematics and in other HOL systems, the turnstile (|-) has two roles:<br>\nto indicate that a theorem has been proved, and to separate any<br>\nassumptions of the theorem from its conclusion.</p>\n</blockquote>\n<p>See also chapter 2 about \"Primitive logic\" of the \"implementation\"<br>\nmanual. It explains the role of the Pure logic as framework for<br>\nhigher-order natural deduction in various object-logics, where HOL is<br>\nthe main example.</p>\n<p>The turnstile is there, but it belongs to the system infrastructure for<br>\nlocal context management, and thus is hardly ever encountered in user<br>\ntools and applications.</p>\n<blockquote>\n<p>In Isabelle2005, if you return a theorem in the read-eval-print-loop,<br>\nthen if it has one assumption 'P' and conclusion 'Q' then it gets<br>\nprinted as \"Q [P]\" (if the flag for showing hypotheses is set), but just<br>\nas \"Q\" if there are no assumptions, and so this corresponds to the<br>\nsecond role.</p>\n</blockquote>\n<p>Isabelle2005 is mainly of historic interest and no longer used in<br>\nserious applications. It is remarkable in being the last version of<br>\nIsabelle that still has remains from the 1990s, so it is possible to<br>\npretend that it resembles \"other HOL systems\".</p>\n<p>Note that the Isar concepts have already taken over the lead in Isabelle<br>\naround 2002. Thus Isabelle2005 is just for prolonged nostalgy: one needs<br>\nto go back to Isabelle98 to be authentic.</p>\n<p>Anyway, Q [P] is just Larry Paulson's notation for P |- Q. The context P<br>\nis only informative when there is something wrong in the internal<br>\ncontext management, so it is not printed by default, and when printed it<br>\nis done in non-intrusive postfix notation.</p>\n<blockquote>\n<p>But what about in more recent Isabelles?  I know that there's no<br>\nread-eval-print-loop as such, and that in Isar scripts</p>\n</blockquote>\n<p>Isar is about structured proof <em>documents</em> or proof <em>texts</em>, not<br>\n\"scripts\". It is important to use the proper terminology to get some<br>\nidea how things work.</p>\n<p>Isabelle is a document-oriented proof composition tool, with timeless<br>\nand stateless continuous checking.</p>\n<blockquote>\n<p>\"theorem\" before a formula, which is a bit like the first role but not<br>\nquite because until the proof is complete it states the intention that<br>\nthe formula will be proved rather than that it has been proved.</p>\n</blockquote>\n<p>The 'theorem' command is more than an old-fashioned \"goal\" statement. It<br>\nbuilds up a context and states conclusions from that context: the result<br>\nis a Pure rule.</p>\n<p>This is ubiquitious in the Isabelle/Isar documentation, e.g. \"isar-ref\"<br>\nor \"implementation\" manual.</p>\n<blockquote>\n<p>Are there ways of displaying lists of theorems, and if so how are these<br>\npresented?  I note that the printer for \"Q [P]\" is still there in the<br>\nIsabelle Pure source.  If anyone could shed any light on all of this<br>\nthen I'd be most grateful.</p>\n</blockquote>\n<p>Here is an example for current Isabelle2016:</p>\n<p>theorem test:<br>\n  fixes x y z :: 'a<br>\n  assumes \"x = y\" and \"y = z\"<br>\n  shows \"x = z\" and \"z = x\"<br>\n  using assms by simp_all</p>\n<p>ML ‹<br>\n  val thms = @{thms test};<br>\n  map (fn thm =&gt; (Thm.hyps_of thm, Thm.prop_of thm)) thms;<br>\n›</p>\n<p>The hyps are empty, because the result lives in a global context.</p>\n<p>Here is an example with a local context:</p>\n<p>context<br>\n  fixes x y z :: 'a<br>\n  assumes asms: \"x = y\" \"y = z\"<br>\nbegin</p>\n<p>theorem test': \"x = z\" and \"z = x\"<br>\n  using asms by simp_all</p>\n<p>ML ‹<br>\n  val thms = @{thms test'};<br>\n  map (fn thm =&gt; (Thm.hyps_of thm, Thm.prop_of thm)) thms;<br>\n›</p>\n<p>end</p>\n<p>ML ‹<br>\n  val thms = @{thms test'};<br>\n  map (fn thm =&gt; (Thm.hyps_of thm, Thm.prop_of thm)) thms;<br>\n›</p>\n<p>Hyps are potentially non-empty in the local context, and empty outside<br>\nof it. Note that hyps record aspects of the proof in the thm object.</p>\n<p>This is also the reason why in recent years, hyps are hardly ever<br>\nprinted: this would lead to non-determinism, depending on the the<br>\naccidental state of a future proof process that might fail or finish<br>\nonly later.</p>\n<p>Makarius</p>",
        "id": 294676754,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661175217
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nA thm value is indeed only a promise to finish a proof eventually. For<br>\nfully authentic results, one needs to do a batch run with \"isabelle<br>\nbuild\", which forms a global join on all open ends in the very end, and<br>\npotential errors are exposed.</p>\n<p>This reform of thm-ness goes back to 2007/2008, when parallel proof<br>\nconstruction in Isabelle emerged for the first time.</p>\n<p>Makarius</p>",
        "id": 294676764,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661175223
    }
]