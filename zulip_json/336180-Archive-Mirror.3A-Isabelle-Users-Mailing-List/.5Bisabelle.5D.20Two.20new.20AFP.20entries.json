[
    {
        "content": "<p>From: Lawrence Paulson &lt;<a href=\"mailto:lp15@cam.ac.uk\">lp15@cam.ac.uk</a>&gt;<br>\nA shallow embedding of HyperCTL*</p>\n<p>by Markus N. Rabe, Peter Lammich and Andrei Popescu</p>\n<p>We formalize HyperCTL<em>, a temporal logic for expressing security properties. We first define a shallow embedding of HyperCTL</em>, within which we prove inductive and coinductive rules for the operators. Then we show that a HyperCTL* formula captures Goguen-Meseguer noninterference, a landmark information flow property. We also define a deep embedding and connect it to the shallow embedding by a denotational semantics, for which we prove sanity w.r.t. dependence on the free variables. Finally, we show that under some finiteness assumptions about the model, noninterference is given by a (finitary) syntactic formula.</p>\n<p><a href=\"http://afp.sourceforge.net/entries/HyperCTL.shtml\">http://afp.sourceforge.net/entries/HyperCTL.shtml</a></p>\n<p>Abstract Completeness</p>\n<p>by Jasmin Christian Blanchette, Andrei Popescu and Dmitriy Traytel</p>\n<p>A formalization of an abstract property of possibly infinite derivation trees (modeled by a codatatype), representing the core of a proof (in Beth/Hintikka style) of the first-order logic completeness theorem, independent of the concrete syntax or inference rules. This work is described in detail in the IJCAR 2014 publication by the authors. The abstract proof can be instantiated for a wide range of Gentzen and tableau systems as well as various flavors of FOL---e.g., with or without predicates, equality, or sorts. Here, we give only a toy example instantiation with classical propositional logic. A more serious instance---many-sorted FOL with equality---is described elsewhere [Blanchette and Popescu, FroCoS 2013].</p>\n<p><a href=\"http://afp.sourceforge.net/entries/Abstract_Completeness.shtml\">http://afp.sourceforge.net/entries/Abstract_Completeness.shtml</a></p>\n<p>Contributions are coming in thick and fast these days.</p>\n<p>Larry Paulson</p>",
        "id": 294275978,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660918777
    },
    {
        "content": "<p>From: <a href=\"mailto:Gerwin.Klein@data61.csiro.au\">Gerwin.Klein@data61.csiro.au</a><br>\nNew at <a href=\"https://isa-afp.org\">https://isa-afp.org</a>:</p>\n<p>Lower bound on comparison-based sorting algorithms<br>\nby Manuel Eberl</p>\n<p>This article contains a formal proof of the well-known fact that number of comparisons that a comparison-based sorting algorithm needs to perform to sort a list of length n is at least log2 (n!) in the worst case, i. e. Ω(n log n).</p>\n<p>For this purpose, a shallow embedding for comparison-based sorting algorithms is defined: a sorting algorithm is a recursive datatype containing either a HOL function or a query of a comparison oracle with a continuation containing the remaining computation. This makes it possible to force the algorithm to use only comparisons and to track the number of comparisons made.</p>\n<p>The number of comparisons in QuickSort<br>\nby Manuel Eberl</p>\n<p>We give a formal proof of the well-known results about the number of comparisons performed by two variants of QuickSort: first, the expected number of comparisons of randomised QuickSort (i. e. QuickSort with random pivot choice) is 2 (n+1) H_n - 4 n, which is asymptotically equivalent to 2 n ln n; second, the number of comparisons performed by the classic non-randomised QuickSort has the same distribution in the average case as the randomised one.</p>\n<p>Enjoy!<br>\nGerwin</p>",
        "id": 294708188,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661181305
    },
    {
        "content": "<p>From: Joachim Breitner &lt;<a href=\"mailto:joachim@cis.upenn.edu\">joachim@cis.upenn.edu</a>&gt;<br>\nHi,</p>\n<p>I find “New in the AFP: …” subjects much more helpful than<br>\n“$n$ new AFP entries”, and it seems to be a bit unfair that some AFP<br>\nentries get less promotion just because they happen to be accepted<br>\ntogether with others. Why not announce each entry individually? I think<br>\nnobody would mind the few extra mails.</p>\n<p>Greetings from Philly,<br>\nJoachim<br>\n<a href=\"/user_uploads/14278/BC8pqjL47gX9tIacZtiUaCuB/signature.asc\">signature.asc</a></p>",
        "id": 294708220,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661181315
    },
    {
        "content": "<p>From: Max Haslbeck &lt;<a href=\"mailto:max.haslbeck@gmx.de\">max.haslbeck@gmx.de</a>&gt;<br>\nHi,</p>\n<p>I just wanted to add that there's now an RSS feed which you can follow<br>\nfor updates on new entries:<br>\n&lt;<a href=\"https://www.isa-afp.org/rss.xml\">https://www.isa-afp.org/rss.xml</a>&gt;</p>\n<p>Gruß<br>\nMax</p>",
        "id": 294708287,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661181339
    },
    {
        "content": "<p>From: <a href=\"mailto:Gerwin.Klein@data61.csiro.au\">Gerwin.Klein@data61.csiro.au</a><br>\nAnd a twitter account @isaprover ;-)</p>\n<p>I do take the point, though, that it slightly decreases exposure for multiple entries (these two by the same author). </p>\n<p>Cheers,<br>\nGerwin</p>",
        "id": 294708451,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661181380
    }
]