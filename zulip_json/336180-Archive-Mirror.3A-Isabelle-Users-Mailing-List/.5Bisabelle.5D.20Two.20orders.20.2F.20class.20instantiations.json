[
    {
        "content": "<p>From: Jonathan Woodgate via Cl-isabelle-users &lt;<a href=\"mailto:cl-isabelle-users@lists.cam.ac.uk\">cl-isabelle-users@lists.cam.ac.uk</a>&gt;<br>\nHello,<br>\nis it possible to have two class instantiations with two different relations for the same  type? For example having (set, \\subset) p.o. and also having (set, \\supset) p.o.  ? For the moment it seems not, but how do I proceed if I need both orders in a theorem? Thank you!</p>",
        "id": 294658308,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661168957
    },
    {
        "content": "<p>From: Lars Hupel &lt;<a href=\"mailto:hupel@in.tum.de\">hupel@in.tum.de</a>&gt;<br>\nHi Jonathan,</p>\n<blockquote>\n<p>is it possible to have two class instantiations with two different<br>\nrelations for the same  type? For example having (set, \\subset) p.o.<br>\nand also having (set, \\supset) p.o.  ? For the moment it seems not,</p>\n</blockquote>\n<p>it is impossible to do so in Isabelle. Type class instantiations must<br>\nbe unique. It is possible to have two identical instantiations in two<br>\ndifferent theories, but then these two theories cannot be merged<br>\ntogether (that is, you can't import from both).</p>\n<blockquote>\n<p>but how do I proceed if I need both orders in a theorem? Thank you!</p>\n</blockquote>\n<p>There are two solutions here:</p>\n<p>1) The standard Haskell trick to introduce a new type, e.g.</p>\n<p>datatype 'a reverse = Reverse (get_reverse: 'a)</p>\n<p>... and then writing an instance</p>\n<p>instance reverse :: (po) po where</p>\n<p>2) Use locales instead of type classes, as in e.g. HOL-Algebra. For<br>\nreference, see the locale manual, especially §7.1 which specifically<br>\ndeals with your use case.</p>\n<p>Cheers<br>\nLars</p>",
        "id": 294658313,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661168959
    }
]