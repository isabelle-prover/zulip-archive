[
    {
        "content": "<p>From: Christian Doczkal &lt;<a href=\"mailto:c.doczkal@stud.uni-saarland.de\">c.doczkal@stud.uni-saarland.de</a>&gt;<br>\nHello</p>\n<p>I just played around a little with the Coq proof assistant and noted the<br>\nfeature of Coercions</p>\n<p>You can spare yourself some typing and improve readability of the input<br>\ncode by telling the system how to resolve some \"typing error\" with some<br>\nexplicit coercion function.</p>\n<p>For example when working with locally nameless terms one can use</p>\n<blockquote>\n<p>Coercion bvar : nat &gt;-&gt; exp.</p>\n</blockquote>\n<p>The Coq interpreter then inserts the constructor bvar whenever it<br>\nexpects an exp but finds a nat instead. So one can write (abs 0) instead<br>\nof (abs (bvar 0)). (with abs :: exp =&gt; exp)</p>\n<p>Can a similar effect be achieved in Isabelle/HOL as well?<br>\n<a href=\"/user_uploads/14278/NR8YhKdNO1Eka-icc1LZVGJM/smime.p7s\">smime.p7s</a></p>",
        "id": 294074848,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660828450
    },
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\nYes, it would be nice to have coercions inserted automatically. But no<br>\nsuch luck in Isabelle.</p>\n<p>Tobias</p>\n<p>Christian Doczkal wrote:</p>",
        "id": 294074903,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660828474
    },
    {
        "content": "<p>From: Christian Doczkal &lt;<a href=\"mailto:c.doczkal@stud.uni-saarland.de\">c.doczkal@stud.uni-saarland.de</a>&gt;</p>\n<blockquote>\n<p>Yes, it would be nice to have coercions inserted automatically. But no<br>\nsuch luck in Isabelle.</p>\n</blockquote>\n<p>Tanks for the reply. Just out of curiosity. Are there any theoretical or<br>\ndeep technical reasons against having this feature or has this simply<br>\nnever occurred on a top position on the priorities list?<br>\n<a href=\"/user_uploads/14278/9APegYuVCzhHOPCK3QZhWaNS/smime.p7s\">smime.p7s</a></p>",
        "id": 294074927,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660828481
    },
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\nChristian Doczkal wrote:</p>\n<blockquote>\n<blockquote>\n<p>Yes, it would be nice to have coercions inserted automatically. But no<br>\nsuch luck in Isabelle.<br>\n</p>\n</blockquote>\n<p>Tanks for the reply. Just out of curiosity. Are there any theoretical or<br>\ndeep technical reasons against having this feature or has this simply<br>\nnever occurred on a top position on the priorities list? </p>\n</blockquote>\n<p>No theoretical problem at all. Practically it is not hard either, and we<br>\nhave thought about it from time to time.</p>\n<blockquote>\n<p>From a user perspective it can be helpful, but it has it's snags as<br>\nwell: writing \"sin(m+n)\", where m,n::int, the system may turn this into<br>\n\"sin(real(n+m))\" or \"sin(real m + real n)\". Depending on the context,<br>\none may be preferable to the other...</p>\n</blockquote>\n<p>Tobias</p>",
        "id": 294074994,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660828509
    },
    {
        "content": "<p>From: Tjark Weber &lt;<a href=\"mailto:webertj@in.tum.de\">webertj@in.tum.de</a>&gt;<br>\nOn Fri, 2009-03-27 at 09:43 +0100, Tobias Nipkow wrote:</p>\n<blockquote>\n<p>Christian Doczkal wrote:</p>\n<blockquote>\n<blockquote>\n<p>Yes, it would be nice to have coercions inserted automatically. But no<br>\nsuch luck in Isabelle.</p>\n</blockquote>\n</blockquote>\n</blockquote>\n<p>\"Trueprop\" comes close, doesn't it?  To me it looks like an invisible<br>\ncoercion from bool to prop.  But I'll admit that I have no idea how it<br>\nworks internally, or why this can't be made to work for other coercions.</p>\n<blockquote>\n<blockquote>\n<p>From a user perspective it can be helpful, but it has it's snags as<br>\nwell: writing \"sin(m+n)\", where m,n::int, the system may turn this into<br>\n\"sin(real(n+m))\" or \"sin(real m + real n)\". Depending on the context,<br>\none may be preferable to the other...</p>\n</blockquote>\n</blockquote>\n<p>One might want to look at algorithms for overload resolution (in Ada/<br>\nC++/Java/...).</p>\n<p>(Isn't \"real (m+n)\" equal to \"real m + real n\" anyway, so that it makes<br>\nno difference in the above example?)</p>\n<p>Best,<br>\nTjark</p>",
        "id": 294075042,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660828531
    },
    {
        "content": "<p>From: Steven Obua &lt;<a href=\"mailto:obua@me.com\">obua@me.com</a>&gt;<br>\nIf you don't have unification modulo \"real (m+n) = real m + real n\",   <br>\nI guess then it can make a difference :-)</p>\n<p>Steven</p>",
        "id": 294075064,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660828537
    }
]