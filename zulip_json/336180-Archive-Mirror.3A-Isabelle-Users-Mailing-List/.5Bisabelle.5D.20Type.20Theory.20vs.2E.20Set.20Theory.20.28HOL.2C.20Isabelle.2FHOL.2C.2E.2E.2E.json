[
    {
        "content": "<p>From: Ken Kubota &lt;<a href=\"mailto:mail@kenkubota.de\">mail@kenkubota.de</a>&gt;<br>\nJohn Harrison has recently (in March 2018) proposed a return to set theory<br>\nin a presentation with the title    \"Let’s make set theory great again!\"<br>\navailable at<br>\n<a href=\"http://aitp-conference.org/2018/slides/JH.pdf\">http://aitp-conference.org/2018/slides/JH.pdf</a><br>\n(mentioning the inflexibility of the type systems of HOL and Isabelle/HOL)<br>\nwhich I would like to comment, and use this occasion to reply to Jan Burse<br>\nconcerning Q0/R0 vs. ZFC as a foundation of mathematics.</p>\n<ol>\n<li>Type Theory vs. Set Theory (Reply to Jan Burse)</li>\n</ol>\n<p>Both Russell's type theory and Zermelo's set theory were published in 1908<br>\nto solve the problem with Russell's antinomy causing inconsistency.<br>\nIn order to decide which approach is appropriate, the philosophical reason<br>\nfor this antinomy and the formal system's adequateness for representing<br>\nmathematics should be taken into account.</p>\n<p>Philosophically, Russell correctly stated that self-reference is responsible<br>\n(but didn't recognize that negation is the second component for an antinomy:<br>\nthe set of all sets that do NOT contain THEMSELVES).</p>\n<p>Mathematically, Russell draw the correct conclusion and drafted a formal system<br>\n(type theory) in which the language doesn't allow one to express such constructions.<br>\nIn other words, the syntactic means of the language are the key to the solution.<br>\nThis means that all of mathematics can be expressed, and only those<br>\nconstructions involving self-reference and negation are excluded.</p>\n<p>Set theory (e.g., ZFC, the variant of Zermelo set theory in use today)<br>\ntakes a very different approach by giving the class status by default,<br>\nand giving the set status only to those constructions often used.<br>\nCompared with the type theoretic approach this means that the set theoretic<br>\nsolution is to simply forbid all reasoning first, and then to allow only certain<br>\nconstructions (a positive list).<br>\nThe result (ZFC) is a not systematic solution of the problem (Russell's antinomy),<br>\nbut a preliminary solution based on the explored fields of mathematics at that time.<br>\nFor example, ZFC is not sufficient to handle large cardinals (which require an<br>\nadditional axiom), and it should be easy to construe other examples not covered<br>\nby ZFC by introducing other axioms.<br>\nThis means that the (from a logical point of view) arbitrary set of axioms in ZFC<br>\n(containing both logical and non-logical axioms) can cover only parts of mathematics,<br>\nbut not (all of) mathematics in general, and, furthermore, this limitation cannot<br>\nbe circumvented by adding further axioms (resulting in another arbitrary set of axioms).</p>\n<p>A systematic solution can consist only in shaping the syntactic means of the<br>\nformal language (finding the grammar of mathematics) such that they correctly<br>\npreserve dependencies and, hence, prohibit constructions involving both<br>\nself-reference and negation.<br>\nJean van Heijenoort has described both approaches (type theory and set theory)<br>\nproperly: \"The two responses are extremely different; the former is a far reaching<br>\ntheory of great significance for logic and even ontology, while the latter is an<br>\nimmediate answer to the pressing needs of the working mathematician.”<br>\n[Heijenoort, 1967c, p. 199] - <a href=\"http://www.owlofminerva.net/files/fom.pdf\">http://www.owlofminerva.net/files/fom.pdf</a></p>\n<p>Note that Q0 and R0 have the five logical axioms only<br>\n<a href=\"https://plato.stanford.edu/entries/type-theory-church/#ForBasEqu\">https://plato.stanford.edu/entries/type-theory-church/#ForBasEqu</a><br>\n<a href=\"http://doi.org/10.4444/100.3\">http://doi.org/10.4444/100.3</a> (pp. 353 ff.),<br>\nand non-logical axioms such as the three axioms of group theory are not<br>\nintroduced as axioms, but are expressed in the form of a definition:<br>\n<a href=\"http://doi.org/10.4444/100.3\">http://doi.org/10.4444/100.3</a> (p. 362).<br>\nThe introduction of any further non-logical axioms (in the form of a definition)<br>\nwill not cause the inconsistency of the system, but only prove the emptiness<br>\nof the set obtained by this definition (since no mathematical entity can<br>\nsatisfy contradictory properties).</p>\n<ol start=\"2\">\n<li>Type Theory vs. Set Theory (Reply to John Harrison)</li>\n</ol>\n<p>John Harrison correctly states that the current type systems suffer either from<br>\ninflexibilities (HOL, Isabelle/HOL) or from too complex rules (Coq) in a<br>\npresentation from March with the title \"Let’s make set theory great again!\"<br>\navailable online at<br>\n<a href=\"http://aitp-conference.org/2018/slides/JH.pdf\">http://aitp-conference.org/2018/slides/JH.pdf</a></p>\n<p>The same critique was already expressed by Freek Wiedijk, see<br>\nsection 3 of <a href=\"http://www.owlofminerva.net/files/fom.pdf\">http://www.owlofminerva.net/files/fom.pdf</a></p>\n<p>In a private email from January, John considered both HOL as well as<br>\nthe axiomatic type classes in Isabelle as not solving the problem due to<br>\nthe \"lack of quantification over types in HOL\".</p>\n<p>Up to this point I fully agree, but I clearly disagree with set theory<br>\nbeing the solution, since it would be nothing else than a fallback<br>\nto a workaround (ZFC) based on a rather arbitrary set of axioms<br>\ninvolving non-logical axioms, too, and incapable of systematically<br>\nrepresenting all of mathematics; van Heijenoort: \"immediate answer<br>\nto the pressing needs of the working mathematician.\"</p>\n<p>The inflexibilities mentioned above only show that the syntactic means<br>\nof the language (of current type theory, i.e., HOL and Isabelle/HOL) are<br>\nnot developed enough to fully represent all of the dependencies.</p>\n<p>But the problems mentioned by John can be easily solved with explicit<br>\nquantification over types (i.e., binding type variables with lambda),<br>\nas done in R0:</p>\n<ol>\n<li>John: \"For example, if you prove something generic about groups over a type,<br>\nyou may not be able to instantiate it later to a group over a subset of a type.\" (p. 21)</li>\n</ol>\n<p>In R0, any non-empty set (hence, any non-empty subset) is<br>\nautomatically considered (and introduced as) a type (cf. p. 11 of<br>\n<a href=\"http://www.owlofminerva.net/files/formulae.pdf\">http://www.owlofminerva.net/files/formulae.pdf</a> ),<br>\nand instantiating general properties of a group to a specific group is actually<br>\nthe main example for demonstrating the power of quantification over types<br>\nin R0, cf. pp. 12 (explanation), 362 (definition of group). The uniqueness of<br>\nthe identity element (p. 421, GrpIdElUniq) is used in combination with fact<br>\nthat &lt;o, XOR&gt; is a group (p. 422, theorem \"Grp o XOR\") to obtain<br>\nby substitution (without having to carry out the proof of uniqueness of the<br>\nidentity element in a group again) the uniqueness of the<br>\nidentity element of the specific group &lt;o, XOR&gt; (p. 423, XorGrpIdElUniq).</p>\n<ol start=\"2\">\n<li>John: \"Thinking of F as a base type, we have jumped up a couple of levels<br>\nin the type hierarcy just to adjoin one root.<br>\nIf we want to construct the algebraic closure of a field we have to do<br>\nthis transfinitely ...\" (p. 24)</li>\n</ol>\n<p>This has already been discussed in July 2017 at<br>\n<a href=\"https://sourceforge.net/p/hol/mailman/message/35962259/\">https://sourceforge.net/p/hol/mailman/message/35962259/</a><br>\nA transfinite type theory Q was presented by Andrews in his 1965 PhD thesis<br>\n(based on his Q0 first published in 1963).<br>\nR0 avoids the stratification (the type hierarchy) of Q by its flexible handling of types,<br>\nallowing top-down definitions (similar to ZFC) rather than just the classical bottom-up<br>\ntype hierarchy, since any non-empty set is a type in R0.</p>\n<p>The key feature of R0 is internal type referencing, which preserves the<br>\ndependencies when quantifying over types (or, more exactly: binding type<br>\nvariables with lambda). A quote on this is attached below.</p>\n<p>Let me finally note that there is a minor flaw in John's presentation.<br>\nMetamath is, like Isabelle, a logical framework, and capable of coding<br>\ntype theory, too. There is an implementation of Q0 in Metamath:<br>\n<a href=\"https://github.com/tirix/q0.mm\">https://github.com/tirix/q0.mm</a><br>\n(For further links, see 1.1. in <a href=\"http://www.owlofminerva.net/files/fom.pdf\">http://www.owlofminerva.net/files/fom.pdf</a> )</p>\n<p>Therefore, on pp. 6 and 7 there should be written<br>\n    Simple type theory (HOL family, Isabelle/HOL, Metamath/Q0)<br>\ninstead of<br>\n    Simple type theory (HOL family, Isabelle/HOL)</p>\n<p>and on p. 7 there should be written<br>\n    Metamath/ZFC<br>\n    Isabelle/ZF (but much less popular than Isabelle/HOL)<br>\ninstead of<br>\n    Metamath<br>\n    Isabelle/ZF (but much less popular than Isabelle/HOL)</p>\n<p>Ken</p>\n<hr>\n<p>Ken Kubota<br>\n<a href=\"http://doi.org/10.4444/100\">http://doi.org/10.4444/100</a></p>\n<h2>Internal type referencing</h2>\n<h2>Note that the universal quantifier has type '{{o,{o,\\3{^}}},^}', or written</h2>\n<h2>without brackets, type 'o(o\\3)^':</h2>\n<h2>Command:    A</h2>\n<h1>wff      29 :  [\\t.[\\p.((=_[\\x.T])_p)]]                   :=  A</h1>\n<h1>w typd   29 :  [\\t{^}{^}.[\\p{{o,t{^}}}{{o,t{^}}}.((={{{o,{o,t{^}}},{o,t{^}}}}_[\\x{t{^}}{t{^}}.T{o}]{{o,t{^}}}){{o,{o,t{^}}}}_p{{o,t{^}}}{{o,t{^}}}){o}]{{o,{o,t{^}}}}]</h1>\n<h1>{ {{o,{o,\\3{^}}},^} }</h1>\n<h1>:=  A</h1>\n<h2>The specification '\\3' is a reference within the type, pointing to the type</h2>\n<h2>'^' of the first argument within 'o(o\\3)^', thus handling dependencies of</h2>\n<h2>types within the formula structure similar to de Bruijn indices. For</h2>\n<h2>example, the application of 'ALL' of type 'o(o\\3)^' to '@' of type '^'</h2>\n<h2>would result in the wff 'ALL @' of type 'o(o@)'.</h2>\n<h2>Similarly, 'ALL NAT' would have type 'o(o NAT)'.</h2>\n<p><a href=\"http://www.owlofminerva.net/files/tutorial.r0i.out.txt\">http://www.owlofminerva.net/files/tutorial.r0i.out.txt</a><br>\nJune 2, 2018</p>",
        "id": 294733562,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661188961
    }
]