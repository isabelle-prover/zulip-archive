[
    {
        "content": "<p>From: Steve W &lt;<a href=\"mailto:s.wong.731@gmail.com\">s.wong.731@gmail.com</a>&gt;<br>\nHi,</p>\n<p>I have a quick question: does anyone know how to define a function taking a<br>\ntype as an argument? Say, a function f taking the type \"nat\" as an argument.</p>\n<p>Thank you<br>\nSteve</p>",
        "id": 294136392,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660844457
    },
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\nTypes live on the meta-level and are not terms. Hence they cannot be <br>\narguments of functions either. Sorry.</p>\n<p>Tobias</p>",
        "id": 294136413,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660844464
    },
    {
        "content": "<p>From: Brian Huffman &lt;<a href=\"mailto:brianh@cs.pdx.edu\">brianh@cs.pdx.edu</a>&gt;<br>\nWell, overloaded constants are a little bit like functions taking<br>\ntypes as arguments. Depending on what you want to do, this kind of<br>\nclass definition might be useful:</p>\n<p>class foo =<br>\n  fixes f :: \"'a itself =&gt; int\"</p>\n<p>instantiation nat :: foo<br>\nbegin<br>\n  definition \"f (t::nat itself) = 0\"<br>\n  instance ..<br>\nend</p>\n<p>instantiation list :: (foo) foo<br>\nbegin<br>\n  definition \"f (t::'a list itself) = 1 + f TYPE('a)\"<br>\n  instance ..<br>\nend</p>\n<p>Now you can prove things like</p>\n<p>lemma \"f TYPE(nat list list list) = 3\"<br>\nby (simp add: f_list_def f_nat_def)</p>\n<p>(I haven't tested the above code, so there may be typos.)</p>\n<p>Here you can think of \"f\" as almost a function from types to integers:<br>\nYou can essentially do primitive recursion over the structure of the<br>\ntype argument, defining each case with class instantiations.</p>\n<ul>\n<li>Brian</li>\n</ul>",
        "id": 294136436,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660844470
    },
    {
        "content": "<p>From: Lukas Bulwahn &lt;<a href=\"mailto:bulwahn@in.tum.de\">bulwahn@in.tum.de</a>&gt;<br>\nIf you employ type classes, you could simulate the behaviour of <br>\nfunctions taking types as arguments in a restricted way.<br>\nFor most applications, the type classes usually suffice.</p>\n<p>Lukas</p>",
        "id": 294136450,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660844476
    },
    {
        "content": "<p>From: Steve W &lt;<a href=\"mailto:s.wong.731@gmail.com\">s.wong.731@gmail.com</a>&gt;<br>\nThanks. If I change f to a binary function:</p>\n<p>class foo =<br>\n fixes f :: \"int =&gt; 'a itself =&gt; int\"</p>\n<p>and with the following instantiation:</p>\n<p>instantiation nat :: foo<br>\nbegin<br>\n definition \"f 0 (t::nat itself) = 0\"<br>\n instance ..<br>\nend</p>\n<p>I get an error on \"0::int\". It works if 0 is replaced by a free variable<br>\nthough. Why's that?</p>\n<p>Thanks<br>\nSteve</p>",
        "id": 294136484,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660844490
    },
    {
        "content": "<p>From: René Thiemann &lt;<a href=\"mailto:rene.thiemann@uibk.ac.at\">rene.thiemann@uibk.ac.at</a>&gt;<br>\nBecause \"definition\" cannot be used with pattern matching on left-hand sides. <br>\nUsually, one can use \"fun\" instead. However, even with \"fun\" you cannot<br>\ndo pattern matching on \"int\" instead of \"nat\". </p>\n<p>However, you might write \"f x (t:: nat itself) = (if x = (0 :: int) then 0 else ...)\"</p>\n<p>René</p>",
        "id": 294136494,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660844494
    },
    {
        "content": "<p>From: Brian Huffman &lt;<a href=\"mailto:brianh@cs.pdx.edu\">brianh@cs.pdx.edu</a>&gt;<br>\nThe \"definition\" command only allows a single equation with variables<br>\nfor function arguments on the left-hand side. If you want to write<br>\ndefinitions with patterns and/or multiple equations, use \"fun\",<br>\n\"function\", \"primrec\", etc.</p>\n<ul>\n<li>Brian</li>\n</ul>",
        "id": 294136513,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660844500
    },
    {
        "content": "<p>From: Steve W &lt;<a href=\"mailto:s.wong.731@gmail.com\">s.wong.731@gmail.com</a>&gt;<br>\nThanks all. One more question: what is the \"itself\" keyword for in \"'a<br>\nitself\"?</p>\n<p>Thanks<br>\nSteve</p>",
        "id": 294136731,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660844562
    },
    {
        "content": "<p>From: Brian Huffman &lt;<a href=\"mailto:brianh@cs.pdx.edu\">brianh@cs.pdx.edu</a>&gt;<br>\n2011/5/16 Steve W &lt;<a href=\"mailto:s.wong.731@gmail.com\">s.wong.731@gmail.com</a>&gt;:</p>\n<blockquote>\n<p>Thanks all. One more question: what is the \"itself\" keyword for in \"'a<br>\nitself\"?</p>\n</blockquote>\n<p>The \"itself\" is just a type constructor. It is like what you would get<br>\nfrom the following datatype declaration:</p>\n<p>datatype 'a itself = Type (* one constructor with no arguments *)</p>\n<p>The syntax \"TYPE('a)\" is an abbreviation for \"Type :: 'a itself\".</p>\n<ul>\n<li>Brian</li>\n</ul>\n<blockquote>\n<p>Thanks<br>\nSteve</p>\n<p>2011/5/13 René Thiemann &lt;<a href=\"mailto:rene.thiemann@uibk.ac.at\">rene.thiemann@uibk.ac.at</a>&gt;</p>\n<blockquote>\n<blockquote>\n<p>Thanks. If I change f to a binary function:</p>\n<p>class foo =<br>\nfixes f :: \"int =&gt; 'a itself =&gt; int\"</p>\n<p>and with the following instantiation:</p>\n<p>instantiation nat :: foo<br>\nbegin<br>\ndefinition \"f 0 (t::nat itself) = 0\"<br>\ninstance ..<br>\nend</p>\n<p>I get an error on \"0::int\". It works if 0 is replaced by a free variable<br>\nthough. Why's that?</p>\n</blockquote>\n<p>Because \"definition\" cannot be used with pattern matching on left-hand<br>\nsides.<br>\nUsually, one can use \"fun\" instead. However, even with \"fun\" you cannot<br>\ndo pattern matching on \"int\" instead of \"nat\".</p>\n<p>However, you might write \"f x (t:: nat itself) = (if x = (0 :: int) then 0<br>\nelse ...)\"</p>\n<p>René<br>\n--<br>\nRené Thiemann                    mailto:<a href=\"mailto:rene.thiemann@uibk.ac.at\">rene.thiemann@uibk.ac.at</a><br>\nComputational Logic Group<br>\n<a href=\"http://cl-informatik.uibk.ac.at/~thiemann/\">http://cl-informatik.uibk.ac.at/~thiemann/</a><br>\nInstitute of Computer Science    phone: +43 512 507-6434<br>\nUniversity of Innsbruck</p>\n</blockquote>\n</blockquote>",
        "id": 294136753,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660844568
    },
    {
        "content": "<p>From: <a href=\"mailto:s.wong.731@gmail.com\">s.wong.731@gmail.com</a><br>\nI see. But, now I have a slightly different problem:</p>\n<p>class foo1 =<br>\nfixes f :: \"nat =&gt; 'a itself =&gt; bool\"</p>\n<p>consts<br>\na :: \"nat\"<br>\nb :: \"nat\"</p>\n<p>instantiation nat :: foo1<br>\nbegin<br>\ndefinition \"fs (t::nat itself) = (if s = a then True else False)\"<br>\ninstance ..<br>\nend</p>\n<p>lemma \"fa TYPE(nat) = True\"<br>\nby (simp add: f_nat_def)</p>\n<p>This is fine. But</p>\n<p>lemma \"fb TYPE(nat) = False\"<br>\nby (simp add: f_nat_def)</p>\n<p>doesn't seem to prove it. Can the simplifier not interpret the else clause?</p>\n<p>Thanks<br>\nSteve</p>",
        "id": 294136785,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660844580
    },
    {
        "content": "<p>From: Tjark Weber &lt;<a href=\"mailto:webertj@in.tum.de\">webertj@in.tum.de</a>&gt;<br>\nSteve,</p>\n<p>On Tue, 2011-05-17 at 14:46 +0000, <a href=\"mailto:s.wong.731@gmail.com\">s.wong.731@gmail.com</a> wrote:</p>\n<blockquote>\n<p>This is fine. But</p>\n<p>lemma \"f b TYPE(nat) = False\"<br>\n          ^ There should be a space between f and b.<br>\nby (simp add: f_nat_def)</p>\n<p>doesn't seem to prove it. Can the simplifier not interpret the else<br>\nclause? </p>\n</blockquote>\n<p>The simplifier doesn't know whether a and b are equal or not.  Just<br>\nbecause these two constants have different names, they don't have to be<br>\ndistinct.</p>\n<p>Kind regards,<br>\nTjark</p>",
        "id": 294136801,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660844586
    },
    {
        "content": "<p>From: <a href=\"mailto:s.wong.731@gmail.com\">s.wong.731@gmail.com</a><br>\nWith the example, would it be possible to let f be a parameter of a locale  <br>\ninstead, ie</p>\n<p>locale A1 =<br>\nfixes f :: \"nat =&gt; 'a itself =&gt; bool\"<br>\ndefines \"fs (t::nat itself) = (if s = a then True else False)\"</p>\n<p>complains about the operand \"t::nat itself\". Is it asking for \"nat\" to be a  <br>\nparameter?</p>\n<p>Thanks</p>",
        "id": 294136813,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660844593
    },
    {
        "content": "<p>From: Brian Huffman &lt;<a href=\"mailto:brianh@cs.pdx.edu\">brianh@cs.pdx.edu</a>&gt;<br>\nThe problem is that the types don't match: You've specified in the<br>\n\"fixes\" clause that f should take an argument of type \"'a itself\", but<br>\nin the \"defines\" clause the argument has type \"nat itself\". Try the<br>\nfollowing:</p>\n<p>consts a :: nat</p>\n<p>locale A1 =<br>\nfixes f :: \"nat =&gt; 'a itself =&gt; bool\"<br>\ndefines \"f s (t::'a itself) == (if s = a then True else False)\"</p>\n<p>Also note that you must use meta-equality (== or \\&lt;equiv&gt;) in the<br>\ndefines clause, rather than ordinary object-equality (=).</p>\n<ul>\n<li>Brian</li>\n</ul>",
        "id": 294136820,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660844598
    },
    {
        "content": "<p>From: <a href=\"mailto:s.wong.731@gmail.com\">s.wong.731@gmail.com</a></p>\n<blockquote>\n<p>The problem is that the types don't match: You've specified in the</p>\n</blockquote>\n<blockquote>\n<p>\"fixes\" clause that f should take an argument of type \"'a itself\", but</p>\n</blockquote>\n<blockquote>\n<p>in the \"defines\" clause the argument has type \"nat itself\". Try the</p>\n</blockquote>\n<blockquote>\n<p>following:</p>\n</blockquote>\n<blockquote>\n<p>consts a :: nat</p>\n</blockquote>\n<blockquote>\n<p>locale A1 =</p>\n</blockquote>\n<blockquote>\n<p>fixes f :: \"nat =&gt; 'a itself =&gt; bool\"</p>\n</blockquote>\n<blockquote>\n<p>defines \"fs (t::'a itself) == (if s = a then True else False)\"</p>\n</blockquote>\n<blockquote>\n<p>Also note that you must use meta-equality (== or \\) in the</p>\n</blockquote>\n<blockquote>\n<p>defines clause, rather than ordinary object-equality (=).</p>\n</blockquote>\n<p>Sure. But what if f is to be overloaded? Eg,</p>\n<p>instantiation nat :: foo<br>\nbegin<br>\ndefinition d1: \"fs (t::nat itself) = (if s = a then True else False)\"<br>\ninstance ..<br>\nend</p>\n<p>instantiation real :: foo<br>\nbegin<br>\ndefinition d2: \"fs (t::real itself) = (if s = a then False else True)\"<br>\ninstance ..<br>\nend</p>\n<p>but with 'f' and the definitions inside a locale.</p>\n<p>Thanks again<br>\nSteve</p>\n<blockquote>\n<ul>\n<li>Brian</li>\n</ul>\n</blockquote>",
        "id": 294136897,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660844635
    },
    {
        "content": "<p>From: Brian Huffman &lt;<a href=\"mailto:brianh@cs.pdx.edu\">brianh@cs.pdx.edu</a>&gt;<br>\nI am sorry, but this is not possible. Functions that are fixed by a<br>\n\"fixes\" clause in a locale cannot be overloaded or polymorphic; they<br>\neach must have a single, fixed type. (They may mention type variables<br>\nlike 'a, but this does not make them polymorphic -- such type<br>\nvariables are treated as fixed types within the locale context).</p>\n<p>A workaround may be possible, though: You can define \"f\" at the top<br>\nlevel, making it polymorphic or overloaded. Then you can put<br>\nassumptions about the definitions of \"f\" at various types inside a<br>\nlocale. For example:</p>\n<p>class foo =<br>\n fixes f :: \"nat =&gt; 'a itself =&gt; bool\"</p>\n<p>consts a :: nat</p>\n<p>locale A =<br>\n  assumes \"f s TYPE('a::foo) = (if s = a then True else False)\"<br>\n  assumes \"f s TYPE('b::foo) = (if s = a then False else True)\"</p>\n<p>Later on, you could interpret locale A with type 'a instantiated as<br>\nnat, and type 'b as real.</p>\n<ul>\n<li>Brian</li>\n</ul>",
        "id": 294136916,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660844642
    },
    {
        "content": "<p>From: <a href=\"mailto:s.wong.731@gmail.com\">s.wong.731@gmail.com</a><br>\nOn May 20, 2011 2:52pm, Brian Huffman &lt;<a href=\"mailto:brianh@cs.pdx.edu\">brianh@cs.pdx.edu</a>&gt; wrote:</p>\n<blockquote>\n<p>2011/5/20 <a href=\"mailto:s.wong.731@gmail.com\">s.wong.731@gmail.com</a>&gt;:</p>\n</blockquote>\n<blockquote>\n<blockquote>\n<blockquote>\n<p>The problem is that the types don't match: You've specified in the</p>\n</blockquote>\n</blockquote>\n</blockquote>\n<blockquote>\n<blockquote>\n<blockquote>\n<p>\"fixes\" clause that f should take an argument of type \"'a itself\", but</p>\n</blockquote>\n</blockquote>\n</blockquote>\n<blockquote>\n<blockquote>\n<blockquote>\n<p>in the \"defines\" clause the argument has type \"nat itself\". Try the</p>\n</blockquote>\n</blockquote>\n</blockquote>\n<blockquote>\n<blockquote>\n<blockquote>\n<p>following:</p>\n</blockquote>\n</blockquote>\n</blockquote>\n<blockquote>\n<blockquote>\n<p>&gt;</p>\n</blockquote>\n</blockquote>\n<blockquote>\n<blockquote>\n<blockquote>\n<p>consts a :: nat</p>\n</blockquote>\n</blockquote>\n</blockquote>\n<blockquote>\n<blockquote>\n<p>&gt;</p>\n</blockquote>\n</blockquote>\n<blockquote>\n<blockquote>\n<blockquote>\n<p>locale A1 =</p>\n</blockquote>\n</blockquote>\n</blockquote>\n<blockquote>\n<blockquote>\n<blockquote>\n<p>fixes f :: \"nat =&gt; 'a itself =&gt; bool\"</p>\n</blockquote>\n</blockquote>\n</blockquote>\n<blockquote>\n<blockquote>\n<blockquote>\n<p>defines \"fs (t::'a itself) == (if s = a then True else False)\"</p>\n</blockquote>\n</blockquote>\n</blockquote>\n<blockquote>\n<blockquote>\n<p>&gt;</p>\n</blockquote>\n</blockquote>\n<blockquote>\n<blockquote>\n<blockquote>\n<p>Also note that you must use meta-equality (== or \\) in the</p>\n</blockquote>\n</blockquote>\n</blockquote>\n<blockquote>\n<blockquote>\n<blockquote>\n<p>defines clause, rather than ordinary object-equality (=).</p>\n</blockquote>\n</blockquote>\n</blockquote>\n<blockquote>\n<p>&gt;</p>\n</blockquote>\n<blockquote>\n<blockquote>\n<p>Sure. But what if f is to be overloaded? Eg,</p>\n</blockquote>\n</blockquote>\n<blockquote>\n<p>&gt;</p>\n</blockquote>\n<blockquote>\n<blockquote>\n<p>instantiation nat :: foo</p>\n</blockquote>\n</blockquote>\n<blockquote>\n<blockquote>\n<p>begin</p>\n</blockquote>\n</blockquote>\n<blockquote>\n<blockquote>\n<p>definition d1: \"fs (t::nat itself) = (if s = a then True else False)\"</p>\n</blockquote>\n</blockquote>\n<blockquote>\n<blockquote>\n<p>instance ..</p>\n</blockquote>\n</blockquote>\n<blockquote>\n<blockquote>\n<p>end</p>\n</blockquote>\n</blockquote>\n<blockquote>\n<p>&gt;</p>\n</blockquote>\n<blockquote>\n<blockquote>\n<p>instantiation real :: foo</p>\n</blockquote>\n</blockquote>\n<blockquote>\n<blockquote>\n<p>begin</p>\n</blockquote>\n</blockquote>\n<blockquote>\n<blockquote>\n<p>definition d2: \"fs (t::real itself) = (if s = a then False else True)\"</p>\n</blockquote>\n</blockquote>\n<blockquote>\n<blockquote>\n<p>instance ..</p>\n</blockquote>\n</blockquote>\n<blockquote>\n<blockquote>\n<p>end</p>\n</blockquote>\n</blockquote>\n<blockquote>\n<p>&gt;</p>\n</blockquote>\n<blockquote>\n<blockquote>\n<p>but with 'f' and the definitions inside a locale.</p>\n</blockquote>\n</blockquote>\n<blockquote>\n<p>I am sorry, but this is not possible. Functions that are fixed by a</p>\n</blockquote>\n<blockquote>\n<p>\"fixes\" clause in a locale cannot be overloaded or polymorphic; they</p>\n</blockquote>\n<blockquote>\n<p>each must have a single, fixed type. (They may mention type variables</p>\n</blockquote>\n<blockquote>\n<p>like 'a, but this does not make them polymorphic -- such type</p>\n</blockquote>\n<blockquote>\n<p>variables are treated as fixed types within the locale context).</p>\n</blockquote>\n<blockquote>\n<p>A workaround may be possible, though: You can define \"f\" at the top</p>\n</blockquote>\n<blockquote>\n<p>level, making it polymorphic or overloaded. Then you can put</p>\n</blockquote>\n<blockquote>\n<p>assumptions about the definitions of \"f\" at various types inside a</p>\n</blockquote>\n<blockquote>\n<p>locale. For example:</p>\n</blockquote>\n<blockquote>\n<p>class foo =</p>\n</blockquote>\n<blockquote>\n<p>fixes f :: \"nat =&gt; 'a itself =&gt; bool\"</p>\n</blockquote>\n<blockquote>\n<p>consts a :: nat</p>\n</blockquote>\n<blockquote>\n<p>locale A =</p>\n</blockquote>\n<blockquote>\n<p>assumes \"fs TYPE('a::foo) = (if s = a then True else False)\"</p>\n</blockquote>\n<blockquote>\n<p>assumes \"fs TYPE('b::foo) = (if s = a then False else True)\"</p>\n</blockquote>\n<blockquote>\n<p>Later on, you could interpret locale A with type 'a instantiated as</p>\n</blockquote>\n<blockquote>\n<p>nat, and type 'b as real.</p>\n</blockquote>\n<p>I see. Do you know why only fixed types are supported inside locales? Is it  <br>\na restriction imposed by the logic?</p>\n<p>Steve</p>\n<blockquote>\n<ul>\n<li>Brian</li>\n</ul>\n</blockquote>",
        "id": 294137014,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660844659
    }
]