[
    {
        "content": "<p>From: Liam O'Reilly &lt;<a href=\"mailto:Isabelle@liamoreilly.me.uk\">Isabelle@liamoreilly.me.uk</a>&gt;<br>\nHi,</p>\n<p>I have recently migrated to Isabelle 2009. I have a Haskell code base that<br>\nproduces Isabelle code automatically, however it does not produce Isar code.<br>\nSince the migration to Isabelle 2009, my instantiation of the Quotient class<br>\ndoes not work, where it used to work in 2008.</p>\n<p>Could someone please help me with the code below and show me the new correct<br>\nsyntax in plain Isabelle. Once this goes through then I will be able to<br>\napply the same syntax to my Haskell code base (currently migrating the<br>\ncodebase to Isar is far too much work and I don't have the time).</p>\n<p>The error I get is on the defs line. The error is:<br>\n*** Clash of specifications \"test.myType_sim_def\" and<br>\n\"test.eqv_MyType_inst.eqv_MyType_def\" for constant \"Quotient.eqv_class.eqv\"<br>\n*** The error(s) above occurred in definition \"myType_sim_def\":<br>\n***   \"x ~ y == eq x y\"<br>\n*** At command \"defs\".</p>\n<p>Any help will be most appreciated.</p>\n<p>Thanks<br>\nLiam</p>\n<p>The sample file I am working with is</p>\n<hr>\n<p>theory test<br>\nimports Main \"Quotient\"<br>\nbegin</p>\n<p>datatype MyType = A | B</p>\n<p>consts<br>\neq :: \"MyType =&gt; MyType =&gt; bool\"</p>\n<p>primrec \"eq A y = (y = A)\"<br>\n        \"eq B y = (y = B)\"</p>\n<p>instance MyType:: eqv<br>\n  by (intro_classes)</p>\n<p>defs (overloaded)<br>\n  myType_sim_def : \"eqv x y == (eq x y)\"</p>\n<p>instance MyType:: equiv<br>\n  apply (intro_classes)<br>\n  apply (unfold myType_sim_def)<br>\n  apply (auto)<br>\n  done</p>\n<p>end</p>",
        "id": 294109343,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660836272
    },
    {
        "content": "<p>From: Florian Haftmann &lt;<a href=\"mailto:florian.haftmann@informatik.tu-muenchen.de\">florian.haftmann@informatik.tu-muenchen.de</a>&gt;<br>\nHi Liam,</p>\n<blockquote>\n<p>I have recently migrated to Isabelle 2009. I have a Haskell code base that<br>\nproduces Isabelle code automatically, however it does not produce Isar code.</p>\n</blockquote>\n<p>just a correction of terminology: you <em>are</em> producing Isar code, just<br>\none which is not suitable for Isabelle 2009 any longer.</p>\n<blockquote>\n<p>instance MyType:: eqv<br>\n  by (intro_classes)</p>\n<p>defs (overloaded)<br>\n  myType_sim_def : \"eqv x y == (eq x y)\"</p>\n<p>instance MyType:: equiv<br>\n  apply (intro_classes)<br>\n  apply (unfold myType_sim_def)<br>\n  apply (auto)<br>\n  done</p>\n</blockquote>\n<p>You would translate this as follows (*):</p>\n<p>instantiation MyType :: eqv<br>\nbegin</p>\n<p>definition<br>\n  myType_sim_def: \"(eqv :: MyType =&gt; MyType =&gt; bool) = (eq x y)\"</p>\n<p>instance by intro_classes</p>\n<p>end</p>\n<p>instance MyType :: equiv<br>\n  apply (intro_classes)<br>\n  apply (unfold myType_sim_def)<br>\n  apply (auto)<br>\n  done</p>\n<p>Note that the type inside the definition is necessary in some situations<br>\nfor disambiguation.</p>\n<p>With the new infrastructure, you can also abolish the class eqv, putting<br>\nboth operations and specifications in the same class (*):</p>\n<p>class equiv =<br>\n  fixes eqv :: \"'a =&gt; 'a =&gt; bool\"<br>\n  assumes &lt;whatever&gt;</p>\n<p>instantiation MyType :: equiv<br>\nbegin</p>\n<p>definition<br>\n  myType_sim_def: \"(eqv :: MyType =&gt; MyType =&gt; bool) = (eq x y)\"</p>\n<p>instance MyType :: equiv<br>\n  apply (intro_classes)<br>\n  apply (unfold myType_sim_def)<br>\n  apply (auto)<br>\n  done</p>\n<p>Hope this helps,<br>\n    Florian</p>\n<p>(*) this text is not checked for typos<br>\n<a href=\"/user_uploads/14278/0UiwB9M9XC_ZbuWf98mfKZQR/signature.asc\">signature.asc</a></p>",
        "id": 294109370,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660836282
    },
    {
        "content": "<p>From: Florian Haftmann &lt;<a href=\"mailto:florian.haftmann@informatik.tu-muenchen.de\">florian.haftmann@informatik.tu-muenchen.de</a>&gt;<br>\nHi Liam,</p>\n<blockquote>\n<p>Thanks. That was exactly what I needed. I just could not work out or<br>\nfind the correct syntax.</p>\n</blockquote>\n<p>you can find syntax diagrams in the Isar reference manual.  For type<br>\nclasses there is also a dedicated tutorial.</p>\n<p>Cheers,<br>\n    Florian<br>\n<a href=\"/user_uploads/14278/-Zlglpo8ZP1MM4hakobLr2d-/signature.asc\">signature.asc</a></p>",
        "id": 294109462,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660836313
    }
]