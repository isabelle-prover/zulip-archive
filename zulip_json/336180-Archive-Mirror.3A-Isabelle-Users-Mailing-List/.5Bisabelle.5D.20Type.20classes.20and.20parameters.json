[
    {
        "content": "<p>From: Esseger &lt;<a href=\"mailto:esseger@free.fr\">esseger@free.fr</a>&gt;<br>\nHello,</p>\n<p>I am looking for a good way to express some basic mathematical objects <br>\nin the current Isabelle/HOL framework.</p>\n<p>Here is a representative example of my question. Let 'a be a compact <br>\nmetric space. Then a function f from 'a to real numbers is c-Hölder <br>\ncontinuous (where c&gt;0 is some given positive real number) if it is <br>\ncontinuous and<br>\n(*_c) : sup_{x \\neq y} |f(x)-f(y)|/ d(x,y)^c<br>\nis finite. It is easy to check that the set of c-Hölder continuous <br>\nfunctions is a Banach space, for the norm equal to the sup norm plus *_c.</p>\n<p>In a mathematical paper, I would write this as:<br>\nThm: Let X be a compact metric space, let c&gt;0. Then the set of c-Hölder <br>\ncontinuous functions on X (with the above norm) is a Banach space.</p>\n<p>My question is how to express this theorem in Isabelle/HOL in the best <br>\nway using locales/type classes (given that Banach spaces are type <br>\nclasses). And then write conveniently statements such as: the inclusion <br>\nof c-Hölder continuous functions in d-Hölder continuous functions is a <br>\ncontinuous injection when d&lt;c.</p>\n<p>Any hint?</p>\n<p>Best,<br>\nEsseger</p>",
        "id": 294667350,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661172222
    },
    {
        "content": "<p>From: Esseger &lt;<a href=\"mailto:esseger@free.fr\">esseger@free.fr</a>&gt;<br>\nMaybe I wasn't clear enough that the only problem I have is that the <br>\nBanach spaces depend on a parameter. A similar question would arise when <br>\ndefining for instance the L^p spaces, for p in [1, \\infty) (maybe the <br>\nmost prominent missing block in Multivariate_Analysis).</p>\n<p>Does the absence of answer mean that there is no nice way to do this in <br>\ncurrent Isabelle, and that tools with dependent type theory such as CoQ <br>\nwould be better suited for the task? That would be very sad in my <br>\nopinion, as Isar is by far more mathematician-friendly, and the analysis <br>\nlibraries are also by far superior in Isabelle/HOL.</p>\n<p>Best,<br>\nEsseger</p>",
        "id": 294669556,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661172978
    },
    {
        "content": "<p>From: Johannes Hölzl &lt;<a href=\"mailto:hoelzl@in.tum.de\">hoelzl@in.tum.de</a>&gt;<br>\nHi Esseger,</p>\n<p>one option you would have is to somehow encode the parameter in a type.<br>\nFor example you could use Numeral_Types to represent natural numbers at<br>\nthe type level, as it is done in Multivariate_Analysis.</p>\n<p>Another hack is to introduce a type class real_value:</p>\n<p>class real_value =<br>\n    fixes real_value :: 'a itself =&gt; real</p>\n<p>which assign to an arbitrary type a real value. Then you could express<br>\nc-Hölder continuous functions as a type. And also your inclusion<br>\nstatement:</p>\n<p>lemma<br>\n    fixes C :: \"'c :: real_value\"  and D :: \"'c :: real_value\"<br>\n    assumes \"real_value ITSELF('c) &gt; real_value ITSELF('d)\"<br>\n    shows \"EX i :: ('a, 'c) hölder =&gt; ('a, 'd) hölder. ...\"<br>\n  ...</p>\n<p>Problem is: it is currently not possible to construct a<br>\n\"'a::real_value\" in a proof! Ondřej Kunčar and Andrei Popescu work on a<br>\nsolution but it is not there yet.</p>\n<p>I hope this helps!</p>\n<p>- Johannes</p>",
        "id": 294669757,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661173046
    },
    {
        "content": "<p>From: Esseger &lt;<a href=\"mailto:esseger@free.fr\">esseger@free.fr</a>&gt;<br>\nThanks a lot for your answer, indeed it helps! Although as far as I <br>\nunderstand I have the impression that some useful constructions would <br>\nnot be expressible in this formalism. For instance, would it be possible <br>\nin this way to define the integrability exponent of a function, i.e.,</p>\n<p>Sup {p. f \\in L^p} ?</p>\n<p>Or do an induction on (integer) integrability exponents?</p>\n<p>Esseger</p>",
        "id": 294670000,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661173113
    },
    {
        "content": "<p>From: Johannes Hölzl &lt;<a href=\"mailto:hoelzl@in.tum.de\">hoelzl@in.tum.de</a>&gt;<br>\nHm, I think defining the integrability exponent of a function is not<br>\npossible in a nice way. But in this specific case you can unfold the<br>\ndefinition itself:</p>\n<p>Sup {p. |f^p| has_integral}</p>\n<p>I'm not sure about induction on (integer) integrability exponents...</p>\n<ul>\n<li>Johannes</li>\n</ul>",
        "id": 294670684,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661173316
    }
]