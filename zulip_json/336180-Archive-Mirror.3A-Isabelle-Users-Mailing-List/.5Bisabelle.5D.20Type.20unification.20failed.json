[
    {
        "content": "<p>From: John Munroe &lt;<a href=\"mailto:munddr@gmail.com\">munddr@gmail.com</a>&gt;<br>\nHi,</p>\n<p>Does anyone know why there's a type error in</p>\n<p>ML {*<br>\nval trm = @{term \"(f::'a=&gt;nat) (a::nat)\"};<br>\n*}</p>\n<p>but not in</p>\n<p>consts<br>\nf:: \"'a =&gt; nat\"<br>\na :: nat</p>\n<p>ML {* @{term \"f a\" *}</p>\n<p>Why are the two cases treated differently?</p>\n<p>Thanks</p>\n<p>John</p>",
        "id": 294143206,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660846592
    },
    {
        "content": "<p>From: Ramana Kumar &lt;<a href=\"mailto:rk436@cam.ac.uk\">rk436@cam.ac.uk</a>&gt;<br>\nBecause 'a is not equal to nat and in the first case you are asking for them<br>\nto be the same.</p>\n<p>In the second case, f is first specified to be polymorphic then the use, in<br>\n\"f a\", is instantiated appropriately by type inference, that is, you really<br>\nhave \"(f::nat =&gt; nat) a\", which is allowed because \"nat =&gt; nat\" refines \"'a<br>\n=&gt; nat\".</p>",
        "id": 294143220,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660846598
    },
    {
        "content": "<p>From: \"\\\"Mark\\\"\" &lt;<a href=\"mailto:mark@proof-technologies.com\">mark@proof-technologies.com</a>&gt;<br>\nIt should be said that types explicitly provided in type annotations in term<br>\nquotations are not unified by the type checker, they are simply left as they<br>\nare, whereas implicit types in term quotations are unified.</p>\n<p>on 29/8/11 8:07 AM, Ramana Kumar &lt;<a href=\"mailto:rk436@cam.ac.uk\">rk436@cam.ac.uk</a>&gt; wrote:</p>\n<blockquote>\n<p>Because 'a is not equal to nat and in the first case you are asking for<br>\nthem<br>\nto be the same.</p>\n<p>In the second case, f is first specified to be polymorphic then the use,<br>\nin<br>\n\"f a\", is instantiated appropriately by type inference, that is, you<br>\nreally<br>\nhave \"(f::nat =&gt; nat) a\", which is allowed because \"nat =&gt; nat\" refines<br>\n\"'a<br>\n=&gt; nat\".</p>\n<p>On Aug 29, 2011 7:42 AM, \"John Munroe\" &lt;<a href=\"mailto:munddr@gmail.com\">munddr@gmail.com</a>&gt; wrote:</p>\n<blockquote>\n<p>Hi,</p>\n<p>Does anyone know why there's a type error in</p>\n<p>ML {*<br>\nval trm = @{term \"(f::'a=&gt;nat) (a::nat)\"};<br>\n*}</p>\n<p>but not in</p>\n<p>consts<br>\nf:: \"'a =&gt; nat\"<br>\na :: nat</p>\n<p>ML {* @{term \"f a\" *}</p>\n<p>Why are the two cases treated differently?</p>\n<p>Thanks</p>\n<p>John</p>\n</blockquote>\n</blockquote>",
        "id": 294143266,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660846614
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nOne more aspect: the language of type constraints admits nameless dummies <br>\nthat <em>are</em> unified.  For example</p>\n<p>term \"(f :: _ =&gt; nat) (a::nat)\"</p>\n<p>Sort constraints may be also added here:</p>\n<p>term \"(f :: _::plus =&gt; nat) (a::nat)\"</p>\n<p>The ML interfaces of the \"term check\" phase also admits named unification <br>\nparameters (via Type_Infer.param), but this is an advanced concept without <br>\nnotation for end-users (as in ML/Haskell).</p>\n<p>Makarius</p>",
        "id": 294143279,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660846616
    }
]