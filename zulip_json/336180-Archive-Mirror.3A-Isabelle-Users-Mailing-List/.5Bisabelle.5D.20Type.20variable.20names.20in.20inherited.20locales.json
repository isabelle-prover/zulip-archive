[
    {
        "content": "<p>From: Peter Lammich &lt;<a href=\"mailto:peter.lammich@uni-muenster.de\">peter.lammich@uni-muenster.de</a>&gt;<br>\nHi all,</p>\n<p>When deriving a locale, say locale B = A + something, the type variables <br>\nof A will be renamed to 'a,'b, ... for use in B.<br>\nCan this behaviour be changed to keep the names of the type variables <br>\nunless there are name clashes, or is there a good reason for this renaming ?<br>\nThe current behaviour makes referring to type variables of imported <br>\nlocales not really readable.<br>\nCurrently, I'm inserting constrains-statements as a workaround, but this <br>\nmay get tedious with many types or locales.</p>\n<p>Example:</p>\n<p>locale DPN =<br>\n    fixes D :: \"('Q\\&lt;times&gt;'\\&lt;Gamma&gt; list) set\"<br>\n  begin<br>\n    (* Everything fine:<br>\n    locale DPN =<br>\n      fixes D :: \"'Q \\&lt;times&gt; '\\&lt;Gamma&gt; list \\&lt;Rightarrow&gt; bool\"<br>\n    *)<br>\n  end</p>\n<p>locale DPN1 = DPN<br>\n  begin<br>\n    (* Types renamed to 'a and 'b:<br>\n    locale DPN1 =<br>\n      fixes D :: \"'a \\&lt;times&gt; 'b list \\&lt;Rightarrow&gt; bool\"<br>\n    *)<br>\n  end</p>\n<p>(* Workaround: *)<br>\n  locale DPN2 = DPN +<br>\n    constrains D :: \"('Q\\&lt;times&gt;'\\&lt;Gamma&gt; list) set\"<br>\n  begin<br>\n    (* Everything fine again:<br>\n    locale DPN2 =<br>\n      fixes D :: \"'Q \\&lt;times&gt; '\\&lt;Gamma&gt; list \\&lt;Rightarrow&gt; bool\"<br>\n    *)<br>\n  end</p>",
        "id": 294064764,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660825061
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nThe reason for this is the regular ML type discipline, which produces most <br>\ngeneral types on import of locale expressions into the new context.  The <br>\nsame happens when using polymorphic constants within a term, for example: <br>\nthe locally bound type variables of the constant declaration are <br>\ninstantiated to canonical fresh names according to the application <br>\ncontext.</p>\n<p>You have used the terminology of \"deriving\" locales above, and the example <br>\nB = A + something is reminiscant of class inheritance in o.o. language.  <br>\nThis model does not really fit to locales, although one could imagine a <br>\ndifferent module system that comes closer to that expectation.</p>\n<p>Makarius</p>",
        "id": 294064770,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660825064
    }
]