[
    {
        "content": "<p>From: Ferdinand Vesely &lt;<a href=\"mailto:csfvesely@swansea.ac.uk\">csfvesely@swansea.ac.uk</a>&gt;<br>\nDear List,</p>\n<p>I have a problem with using (infix) notation inside a locale in<br>\ncombination with type variables. In summary, I'm trying to introduce a<br>\nbinary abbreviation of a ternary predicate, where the type of the<br>\nomitted parameter is a type variable (restricted by a sort). On the<br>\ntop-level, such a binary abbreviation is generalised to three<br>\nparameters again by introducing a \"type parameter\" (e.g., \"'a itself\").<br>\nI've figured out that by using locales I can fix the (abstract) type<br>\nlocally and use the binary predicate inside the locale as I've<br>\nintended. However, this does not play well when I also want to use<br>\ninfix notation for the abbreviation in a specialised locale (= import<br>\nwith instantiated parameter). Here is a contrived example of my<br>\nproblem. First the basic definitions:</p>\n<blockquote>\n<p>class a = fixes pred :: \"'a ⇒ bool\"</p>\n<p>locale s = <br>\n  fixes foo :: \"'a ⇒ ('b :: a) ⇒ 'a ⇒ bool\"<br>\nbegin<br>\n  definition bar :: \"'a ⇒ 'a ⇒ bool\" (infix \"→\" 50) where<br>\n  \"x → y = (∃(l  :: 'b). foo x l y ∧ pred l)\"<br>\nend</p>\n<p>class b = a +<br>\n  assumes b_pred: \"∃l. pred l\"</p>\n<p>definition ex :: \"nat ⇒ ('b :: b) ⇒ nat ⇒ bool\" where<br>\n\"ex x l y = (y = x + 1 ∧ pred l)\"</p>\n</blockquote>\n<p>Now if I create a new locale where I only import locale s above, the<br>\ntypes are as expected:</p>\n<blockquote>\n<p>locale s1 = s<br>\nbegin<br>\n  term bar (* \"op →\"  :: \"'a ⇒ 'a ⇒ bool\" *)<br>\n  term \"op →\" (* \"op →\" :: \"'a ⇒ 'a ⇒ bool\" *)<br>\nend</p>\n</blockquote>\n<p>But if I want to specialise the locale with the above definition of 'ex,<br>\nthe type parameter is re-introduced even inside the locale and the infix<br>\nnotation does not work anymore (Isabelle does not warn about this). I'm<br>\nnot sure why the parameter is introduced inside the locale. Why is this<br>\nthe case? Shouldn't the types of the corresponding parameters of 'foo'<br>\nand 'ex' be unified?</p>\n<blockquote>\n<p>locale s2 = s where foo = ex<br>\nbegin<br>\n  term bar (* \"λtype. <a href=\"http://spec.bar\">spec.bar</a> ex\" :: \"'a itself ⇒ nat ⇒ nat ⇒ bool\", where \"'a :: b\" *)<br>\n  term \"op →\" (* Inner lexical error. Failed to parse term *)<br>\nend</p>\n</blockquote>\n<p>Anyway, I've found out that if I add a new locale parameter with the<br>\nsame sort constraint on the type as in the type of 'ex', the additional<br>\n\"itself parameter\" is not introduced. However, the infix notation still<br>\ndoes not work.</p>\n<blockquote>\n<p>locale s3 = s where foo = \"ex :: nat ⇒ ('b :: b) ⇒ nat ⇒ bool\" +<br>\n  fixes t :: \"('b :: b) itself\"<br>\nbegin<br>\n  term bar (* \"<a href=\"http://s.bar\">s.bar</a> ex\" :: \"nat ⇒ nat ⇒ bool\" *)<br>\n  term \"op →\" (* Inner lexical error. Failed to parse term *)</p>\n<p>lemma \"1 → 2\" (* Inner lexical error. Failed to parse term *)</p>\n<p>lemma \"bar 1 2\" (* OK *)<br>\n  by (simp add: bar_def ex_def b_pred)</p>\n<p>lemma \"¬bar 2 1\" (* OK *)<br>\n  by (simp add: bar_def ex_def)<br>\nend</p>\n</blockquote>\n<p>Why is the infix notation for bar silently dropped in locale s3? Is<br>\nthere any way around this, i.e., using the infix notation introduced<br>\nin locale s?</p>\n<p>My other question is if there is a better way to introduce such an<br>\nabbreviation without implicitly adding the extra \"type parameter\" and<br>\nto keep the infix notation.</p>\n<p>Kind regards,<br>\nFerdinand</p>",
        "id": 294672887,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661173934
    },
    {
        "content": "<p>From: Andreas Lochbihler &lt;<a href=\"mailto:andreas.lochbihler@inf.ethz.ch\">andreas.lochbihler@inf.ethz.ch</a>&gt;<br>\nDear Ferdinand,</p>\n<p>Any notation is dropped when you instantiate the parameters of a locale beyond renaming. <br>\nThe reason is that in general the number of arguments changes, so the notation does not <br>\nmake much sense any more. You can always reintroduce the notations using the command <br>\n<code>notation</code> as follows:</p>\n<p>context s3 begin<br>\n   notation bar (infix \"→\" 50)</p>\n<p>The reason for the type token 'b itself for bar is as follows: In HOL, all type variables <br>\nin the definition of a constant must appear in the type of the constant. Otherwise, <br>\ninconsistencies could be introduced. In Isabelle, abbreviations must also obey this rule. <br>\nNow, the locale constant bar gets translated to a foundational constant <a href=\"http://s.bar\">s.bar</a> with the <br>\nlocale parameters as additional ones. This can be seen when pretty-printing bar in s3: you <br>\nget \"<a href=\"http://s.bar\">s.bar</a> ex\". Now, <a href=\"http://s.bar\">s.bar</a> ex contains the type variable 'b, which does not show up in the <br>\nfixed parameters of the locale (in fact s2 does not fix any parameters at all). Therefore, <br>\nIsabelle introduces the type token for <a href=\"http://s2.bar\">s2.bar</a>.</p>\n<p>Best,<br>\nAndreas</p>",
        "id": 294672926,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661173947
    }
]