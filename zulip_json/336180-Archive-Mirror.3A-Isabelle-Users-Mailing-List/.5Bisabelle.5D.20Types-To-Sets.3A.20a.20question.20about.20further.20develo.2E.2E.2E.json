[
    {
        "content": "<p>From: mailing-list anonymous &lt;<a href=\"mailto:mailing.list.anonymous@gmail.com\">mailing.list.anonymous@gmail.com</a>&gt;<br>\nDear All,</p>\n<p>I would like to ask a question in relation to the further development of<br>\nthe functionality of the framework \"Types-To-Sets\".</p>\n<p>I am working on several personal projects that rely on \"Types-To-Sets\".<br>\nHowever, as was previously noted on the mailing list, the framework does<br>\nhave its limitations. I would be interested in improving the functionality<br>\nof the framework. However, before I do any work in this direction I would<br>\nlike to understand if anyone else is already working towards this goal and<br>\nwhether or not there exists a development plan for this framework.<br>\nNaturally, if anyone has any particular ideas about how the framework can<br>\nbe improved, I would be interested in learning about them.</p>\n<p><em>Background information</em></p>\n<p>In the last two months I relativised a substantial number of results about<br>\nalgebraic structures and abstract spaces from the main HOL library using<br>\nthe methodology suggested in [1] and collected the results in an<br>\nindependent library (of course, please keep in mind that the library is a<br>\nwork in progress):</p>\n<p><a href=\"https://github.com/xanonec/HOL-Types_To_Sets_Ext\">https://github.com/xanonec/HOL-Types_To_Sets_Ext</a></p>\n<p>The initial goal was to obtain a locale-based topology library similar to<br>\nHOL-Algebra. As it stands now, the library can be seen as a complement to<br>\nthe HOL main library. For each axiomatic type class/locale whose carrier<br>\nset is a universe (of course, not every class/locale was relativised yet),<br>\nthe library provides a relativised locale with an explicitly defined<br>\ncarrier set.</p>\n<p>For example, for the class topological_space from the main library</p>\n<p>class topological_space = \"open\" +<br>\n  assumes open_UNIV [simp, intro]: \"open UNIV\"<br>\n  assumes open_Int [intro]: \"open S ⟹ open T ⟹ open (S ∩ T)\"<br>\n  assumes open_Union [intro]: \"∀S∈K. open S ⟹ open (⋃K)\"</p>\n<p>the library of relativised results provides a locale</p>\n<p>locale topological_space_ow =<br>\n  fixes 𝔘 :: \"'at set\" and τ :: \"'at set ⇒ bool\"<br>\n  assumes open_UNIV[simp, intro]: \"τ 𝔘\"<br>\n  assumes open_Int[intro]: \"⟦ S ⊆ 𝔘; T ⊆ 𝔘; τ S; τ T ⟧ ⟹ τ (S ∩ T)\"<br>\n  assumes open_Union[intro]: \"⟦ K ⊆ Pow 𝔘; ∀S∈K. τ S ⟧ ⟹ τ (⋃K)\"</p>\n<p>Of course, the definitions associated with a given type class or even a<br>\ncombination of type classes were relativised as well. For example, the nhds<br>\nfilter for the type class topological_space</p>\n<p>definition (in topological_space) nhds :: \"'a ⇒ 'a filter\"<br>\n  where \"nhds a = (INF S∈{S. open S ∧ a ∈ S}. principal S)\"</p>\n<p>is relativised as</p>\n<p>definition nhds :: \"'at ⇒ 'at filter\" where<br>\n  \"nhds a = (Inf_on 𝔘 (principal ` {S. S ⊆ 𝔘 ∧ τ S ∧ a ∈ S}))\"</p>\n<p>In certain cases, more creative approaches were employed. For example, for<br>\nreasons of compatibility with the main class-based library, the type filter<br>\nwas reused by providing new constants filter_on, inf_on and Inf_on to make<br>\nthe type suitable for interpretation as complete/distributive lattices on<br>\nan explicit carrier sets, e.g.</p>\n<p>interpretation filter_clow:<br>\n  complete_lattice_ow \"{F. filter_on 𝔘 F}\"  \"(≤)\" \"(&lt;)\" \"inf_on 𝔘\" sup<br>\nbot \"principal 𝔘\"  \"Inf_on 𝔘\" Sup</p>\n<p>Once all definitions were provided, the theorems were relativised in a<br>\nsemi-automatic manner. For example,</p>\n<p>lemma tendsto_compose: \"g ─l→ g l ⟹ (f ⤏ l) F ⟹ ((λx. g (f x)) ⤏ g l) F\"</p>\n<p>is relativised as</p>\n<p>lemma tendsto_compose:<br>\n  assumes \"g <code> 𝔘A ⊆ 𝔘B\"\n    and \"l ∈ 𝔘A\"\n    and \"f </code> 𝔘C ⊆ 𝔘A\"<br>\n    and \"filter_on 𝔘C F\"<br>\n    and \"(on 𝔘B with τb: g ⤏⇩o⇩w g l) (on 𝔘A with τa at l)\"<br>\n    and \"(on 𝔘A with τa: f ⤏⇩o⇩w l) F\"<br>\n  shows \"(on 𝔘B with τb: (λx. g (f x)) ⤏⇩o⇩w g l) F\"</p>\n<p>Nevertheless, as noted previously, \"Types-To-Sets\" does have limitations<br>\nand, at the moment, it is not very user-friendly. The library certainly<br>\ncontains a substantial amount of boilerplate code, which I would like to<br>\nreduce. However, it seems that this cannot be done without providing<br>\nextensions/amendments to \"Types-To-Sets\" at the ML level.</p>\n<p>Thank you</p>\n<p>[1] F. Immler and B. Zhan, “Smooth Manifolds and Types to Sets for Linear<br>\nAlgebra in Isabelle/HOL,” in Proceedings of the 8th ACM SIGPLAN<br>\nInternational Conference on Certified Programs and Proofs, ser. CPP 2019.<br>\nNew York, NY, USA: ACM, 2019, pp. 65–77, event-place: Cascais, Portugal.</p>",
        "id": 294753434,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661196355
    },
    {
        "content": "<p>From: Lawrence Paulson &lt;<a href=\"mailto:lp15@cam.ac.uk\">lp15@cam.ac.uk</a>&gt;<br>\nLet me just offer my enthusiastic encouragement for you to continue!</p>\n<p>I have never managed to figure out how Types-To-Sets can be used, despite scrutinising example developments, so you deserve full credit simply for that. It definitely needs to be made more usable.</p>\n<p>Meanwhile the next release will contain tens of thousands of lines of new material about relativised concepts, not using Types-To-Sets but simply with new proofs ported from HOL Light. This is independent from your work, of course, but maybe the efforts can eventually be combined.</p>\n<p>Larry</p>",
        "id": 294753617,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661196424
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nRecall that it is just an experiment to support a research paper in 2016<br>\nby Ondřej Kunčar and Andrei Popescu<br>\n<a href=\"https://link.springer.com/chapter/10.1007%2F978-3-319-43144-4_13\">https://link.springer.com/chapter/10.1007%2F978-3-319-43144-4_13</a></p>\n<p>In 2016 and 2017 I have provided a lot of concrete feedback on the<br>\nimplementation to turn it into more usable state (e.g. proper use of<br>\nIsar context commands), but somehow the project seems to have become<br>\ninactive.</p>\n<p>In the meantime Fabian Immler has made some improvements, but it is<br>\nstill only experimental.</p>\n<p>Overall, there is also a high-level question about the use (or better<br>\nnon-use of Types-To-Set). It is based on a genuine extension of the HOL<br>\nlogic, and I am unsure what other HOL users say about it. For me this<br>\ndiscussion is still pending.</p>\n<p>Meta note: I am not communicating with people that don't expose there<br>\nreal name. I have just seen a bit too many recent reports about<br>\nanonymous authors doing mischief on Wikipedia.</p>\n<p>A proper open-source project works like scientific research, by people<br>\nwho stand with their own name and reputation for what they do and describe.</p>\n<p>Makarius</p>",
        "id": 294753628,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661196429
    },
    {
        "content": "<p>From: mailing-list anonymous &lt;<a href=\"mailto:mailing.list.anonymous@gmail.com\">mailing.list.anonymous@gmail.com</a>&gt;<br>\nDear Lawrence Paulson/All,</p>\n<p>Thank you for your reply.</p>\n<p>I have followed the development of HOL-Analysis in the last several months.<br>\nIndeed, the work that is being done in the context of this development is<br>\nvery impressive.<br>\nThank you for your kind words about my work. However, of course, the credit<br>\nfor the development of Types-To-Sets belongs to the authors of the original<br>\narticle and the credit for the development of the methodology that I am<br>\nusing belongs to Fabian Immler and Bohua Zhan.</p>\n<p>With my application of Types-To-Sets, I wanted to obtain a mathematics<br>\nlibrary that is based entirely on classes and locales and uses a uniform<br>\n('software') structure both for algebraic structures and abstract spaces.<br>\nThe main library of Isabelle/HOL, effectively, already achieves this goal.<br>\nHowever, the carrier sets for all structures are UNIVs. Types-To-Sets<br>\nallows for a nearly seamless conversion of each class/locale that treats<br>\nthe carrier sets as UNIV to an equivalent locale with an explicitly defined<br>\ncarrier set in a semi-automated manner. The main selling points of this<br>\napproach are</p>\n<p>1. Both explicit carrier sets and UNIV are treated in a uniform manner<br>\n   (also, my intention, is to introduce a database that relates the<br>\n   relativised and non-relativised theorems somehow).</p>\n<p>2. The results about explicit carrier sets are obtained from the results<br>\n   about UNIV in a semi-automatic manner, which implies less typing and<br>\n   fewer loc.</p>\n<p>3. Uniform 'software' structure for all algebraic structures and<br>\n   abstract spaces.</p>\n<p>4. It promotes the development of the main Isabelle/HOL library.</p>\n<p>To elaborate on clause 3, please see the comparison of the locale<br>\ntopological_space_ow (relativisation of the class topological_space from<br>\nthe theory Topological_Spaces) and the locale group_add_ow (relativisation<br>\nof the class group_add from the theory Groups):</p>\n<p>locale topological_space_ow =<br>\n  fixes 𝔘 :: \"'at set\" and τ :: \"'at set ⇒ bool\"<br>\n  assumes open_UNIV[simp, intro]: \"τ 𝔘\"<br>\n  assumes open_Int[intro]: \"⟦ S ⊆ 𝔘; T ⊆ 𝔘; τ S; τ T ⟧ ⟹ τ (S ∩ T)\"<br>\n  assumes open_Union[intro]: \"⟦ K ⊆ Pow 𝔘; ∀S∈K. τ S ⟧ ⟹ τ (⋃K)\"</p>\n<p>locale group_add_ow =<br>\n  minus_ow 𝔘 minus + uminus_ow 𝔘 uminus + monoid_add_ow 𝔘 plus zero<br>\n  for 𝔘 :: \"'ag set\"<br>\n    and plus (infixl \"⇧+⇩o⇩w\" 65)<br>\n    and minus (infixl \"-⇩o⇩w\" 65)<br>\n    and uminus :: \"'ag ⇒ 'ag\" (\"-⇩o⇩w _\" [81] 80)<br>\n    and zero (\"0⇩o⇩w\") +<br>\n  assumes left_inverse: \"a ∈ 𝔘 ⟹ (-⇩o⇩w a) ⇧+⇩o⇩w a = 0⇩o⇩w\"<br>\n    and add_inv_conv_diff: \"⟦ a ∈ 𝔘; b ∈ 𝔘 ⟧ ⟹ a ⇧+⇩o⇩w (-⇩o⇩w b) = a<br>\n-⇩o⇩w b\"</p>\n<p>As you can guess, it is now a very small step to provide the relativisation<br>\nof the class topological_group_add on an explicit carrier set.</p>\n<p>Please accept my apologies for another sales pitch. The main reason why I<br>\nam drawing so much attention to the development is that there is no other<br>\nway for me to find out whether or not someone else is doing something<br>\nsimilar, which is, of course, a grave concern to me.</p>\n<p>As a side note, I noticed that my previous email contains a great number of<br>\ntypographical errors (normally, I do not confuse types and type<br>\nconstructors).</p>\n<p>Thank you</p>",
        "id": 294753639,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661196435
    },
    {
        "content": "<p>From: mailing-list anonymous &lt;<a href=\"mailto:mailing.list.anonymous@gmail.com\">mailing.list.anonymous@gmail.com</a>&gt;<br>\nDear Makarius Wenzel/All,</p>\n<p>Thank you for you reply. I would be very interested in learning more about<br>\nthe concrete feedback that you provided in 2016 and 2017. Has it been<br>\npublished anywhere? Would it be possible to provide any hyperlinks to this<br>\nfeedback?</p>\n<p>I would also like to provide feedback with regard to your concerns about my<br>\nidentity:</p>\n<p>1. I have already mentioned on this mailing list that I can provide my<br>\n   name/real contact details upon request, with the understanding that you<br>\n   agree not mention them on the mailing list. In fact, I have recently edited<br>\n   my signature for this email account to include this information. Given that<br>\n   you expressed your concerns about my identity and possibility of me being<br>\n   involved in mischief, I will send you a letter from the email that I<br>\n   normally use for professional correspondence later today. Of course, if I<br>\n   will ever make an attempt to submit any of my work to the AFP, it will be<br>\n   under my real name.</p>\n<p>2. There is a number of reasons why I do not wish to disclose my<br>\n   identity.</p>\n<p>1. In the past, I had problems with spam and online/telephone scam. I<br>\n      had to close two email accounts, one Skype account and had to change my<br>\n      mobile telephone number twice. I can only assume that I was<br>\ntargeted due to<br>\n      a combination of my country of origin (Eastern Europe) and<br>\nhaving some kind<br>\n      of public profile at a certain point in my life. Some people will go<br>\n      through great lengths if they suspect that you have money and may be,<br>\n      somehow, susceptible to share it :).</p>\n<p>2. At the moment, Isabelle/formal proof is merely a hobby for me.<br>\n      Given that I have no publications in this area, I would prefer potential<br>\n      employers not to know too much about my involvement in this area, given<br>\n      that most of my previous experience was in an area that was not closely<br>\n      related. I believe that I will become more forthcoming about my<br>\ninvolvement<br>\n      if I will ever submit anything to the AFP.</p>\n<p>3. I have further, slightly more personal reasons, for not wishing to<br>\n      disclose my identity publicly.</p>\n<p>3. While I have no evidence, I can only guess that there may be poorly<br>\n   written articles on wikipedia that were written by people who disclosed<br>\n   their identities. However, I have little doubt that there are also many<br>\n   good contributions from people who did not wish to disclose their<br>\n   identities. For what it is worth, I have seen published articles in<br>\n   academic journals of good standing that were (many years after their<br>\n   publication) shown to contain substantial errors and served to cause great<br>\n   confusion. Also, there are many regular users of Stack Overflow who<br>\n   provided good answers without disclosing their identities.</p>\n<p>4. We owe Bitcoin to an anonymous contributor :).</p>\n<p>Thank you</p>",
        "id": 294753648,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661196441
    },
    {
        "content": "<p>From: Andrei Popescu &lt;<a href=\"mailto:A.Popescu@mdx.ac.uk\">A.Popescu@mdx.ac.uk</a>&gt;<br>\nDear Makarius, Larry and Anonymous Contributor,</p>\n<p>I thank you for your support of, and contribution to the types-to-sets methodology. I believe the underlying local typedef rule is a very useful (yet gentle) upgrade of HOL, and have always advocated its candidacy for HOL citizenship. (Incidentally, one of my original motivations was to simplify our BNF/(co)datatype package constructions back in 2011, but in the end the package was developed without it.)</p>\n<p>However, I cannot help with making the types-to-sets machinery more user-friendly since I am not fluent in Isabelle/ML. It is Ondrej Kuncar who has implemented the local typedef rule and the accompanying \"unoverloading\" rule. And since Ondrej is also a co-developer of the lifting and transfer package, he is in an ideal position to make things happen; or to share some insights with people who might be interested in taking on such a development. Without more progress on this front, only power-users will use types-to-sets -- this is a shame, since types-to-sets could be part of the regular users' daily menu.</p>\n<p>Best wishes,</p>\n<p>Andrei</p>\n<p>Recall that it is just an experiment to support a research paper in 2016<br>\nby Ondřej Kunčar and Andrei Popescu<br>\n<a href=\"https://eur02.safelinks.protection.outlook.com/?url=https%3A%2F%2Flink.springer.com%2Fchapter%2F10.1007%252F978-3-319-43144-4_13&amp;data=02%7C01%7Ca.popescu%40mdx.ac.uk%7Cb30c5557591845e8acc508d6c18d0028%7C38e37b88a3a148cf9f056537427fed24%7C0%7C0%7C636909208665363247&amp;sdata=eRLNFLsiaQEq%2B%2BtqlqThR%2B3q9BUGUg1YCEijWZWDYeE%3D&amp;reserved=0\">https://eur02.safelinks.protection.outlook.com/?url=https%3A%2F%2Flink.springer.com%2Fchapter%2F10.1007%252F978-3-319-43144-4_13&amp;data=02%7C01%7Ca.popescu%40mdx.ac.uk%7Cb30c5557591845e8acc508d6c18d0028%7C38e37b88a3a148cf9f056537427fed24%7C0%7C0%7C636909208665363247&amp;sdata=eRLNFLsiaQEq%2B%2BtqlqThR%2B3q9BUGUg1YCEijWZWDYeE%3D&amp;reserved=0</a></p>\n<p>In 2016 and 2017 I have provided a lot of concrete feedback on the<br>\nimplementation to turn it into more usable state (e.g. proper use of<br>\nIsar context commands), but somehow the project seems to have become<br>\ninactive.</p>\n<p>In the meantime Fabian Immler has made some improvements, but it is<br>\nstill only experimental.</p>\n<p>Overall, there is also a high-level question about the use (or better<br>\nnon-use of Types-To-Set). It is based on a genuine extension of the HOL<br>\nlogic, and I am unsure what other HOL users say about it. For me this<br>\ndiscussion is still pending.</p>\n<p>Meta note: I am not communicating with people that don't expose there<br>\nreal name. I have just seen a bit too many recent reports about<br>\nanonymous authors doing mischief on Wikipedia.</p>\n<p>A proper open-source project works like scientific research, by people<br>\nwho stand with their own name and reputation for what they do and describe.</p>\n<p>Makarius</p>",
        "id": 294753662,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661196448
    },
    {
        "content": "<p>From: mailing-list anonymous &lt;<a href=\"mailto:mailing.list.anonymous@gmail.com\">mailing.list.anonymous@gmail.com</a>&gt;<br>\nDear Andrei Popescu/All,</p>\n<p>After using Types-To-Sets for the relativisation of the results from the<br>\nmain library of Isabelle/HOL for a little while, I came to a conclusion<br>\nthat the two main problems with the existing methodology are the<br>\n'boilerplate' code associated with having to restate the names of the<br>\nrelativised theorems at least twice and, more importantly, forward<br>\ncompatibility with the potential changes to the class/locale that is being<br>\nrelativised (of course, it would also be interesting to understand if there<br>\ncould be a negative impact associated with the extension of HOL logic and I<br>\nwould like to know more about the arguments that were presented on this<br>\nsubject in the past). I must admit that I am not certain whether further<br>\nautomation, i.e. automatic generation of the relativised definitions, would<br>\nbe beneficial and make the framework more user-friendly than it is at the<br>\nmoment: usually there are several equivalent ways to present a given<br>\nrelativised definition and I see no reason to force the users to use a<br>\npre-defined default.</p>\n<p>In the short-/mid-term, I would like to provide the following functionality<br>\nthat will not require any modifications to the critical code:</p>\n<ol>\n<li>\n<p>For the relativisation of definitions, I would like to discharge the<br>\nnecessary proof obligations automatically and store a 'connection' between<br>\nthe original and the relativised definitions as (retrievable) data.</p>\n</li>\n<li>\n<p>For the relativisation of theorems, I would like to combine the<br>\napplication of a chain of attributes in a single parameterisable<br>\ncommand/attribute and (provide an option to) discharge the proof<br>\nobligations for further user amendments of the relativised results (e.g.<br>\nconsider the case of an empty carrier set for topological spaces)<br>\nautomatically. Naturally, this would also include the automation of the<br>\nnaming conventions and, therefore, result in a significant reduction of the<br>\nboilerplate code. Also, the 'connection' between the relativised and<br>\nnon-relativised theorems would be made available as retrievable data.</p>\n</li>\n</ol>\n<p>I believe that having an ability to see whether a given const/theorem was<br>\nrelativised or not and where should be sufficient to make the framework<br>\nforward compatible with changes to the original class/locale, which, for<br>\nme, is the main problem with the large scale application of the framework.<br>\nThe relativised definitions would still need to be provided by the user and<br>\nthe transfer rules would still need to be proven manually. However, at<br>\nleast, the user will not need to provide the statements of the theorems for<br>\nthe transfer rules explicitly.</p>\n<p>In summary, my plan is to introduce several changes to the interface<br>\nassociated with the methodology and not the critical code.</p>\n<p>I am not, specifically, asking for any help with the technical matters, but<br>\nI would appreciate any insight. I am merely trying to do understand whether<br>\nor not there are any active R&amp;D projects related to \"Types-To-Sets\". Given<br>\nthat this project does not have the highest priority for me and I have much<br>\nto learn about Isabelle at the ML level, it is likely that I will be<br>\nworking on this project for several months to come in small intervals. I am<br>\nmerely trying to reassure myself that this will not be a wasted effort<br>\nbecause someone else is already working on something better. As a side<br>\nnote, of course, as I mentioned previously, if anyone has any particular<br>\nideas about what can be done beyond what is suggested in [1] and in this<br>\nemail, I would be interested in learning about them. Also, if you suspect<br>\nthat I might be trying to take this work in the wrong direction, I would be<br>\nthankful to hear from you.</p>\n<p>Thank you</p>\n<p>[1] F. Immler and B. Zhan, “Smooth Manifolds and Types to Sets for Linear<br>\nAlgebra in Isabelle/HOL,” in Proceedings of the 8th ACM SIGPLAN<br>\nInternational Conference on Certified Programs and Proofs, ser. CPP 2019.<br>\nNew York, NY, USA: ACM, 2019, pp. 65–77, event-place: Cascais, Portugal.</p>",
        "id": 294753668,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661196453
    },
    {
        "content": "<p>From: Andrei Popescu &lt;<a href=\"mailto:A.Popescu@mdx.ac.uk\">A.Popescu@mdx.ac.uk</a>&gt;<br>\nDear Anonymous, </p>\n<p>Personally, I think that your goals 1 and 2 are wisely chosen, and could bring a very nice contribution. As for the question of other projects related to the topic, I don't know of other work (besides that of Fabian Immler and Bohua Zhan which you cite and the ones mentioned by Rene Thiemann in a previous thread). </p>\n<p>Best wishes, </p>\n<p>Andrei</p>",
        "id": 294753704,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661196472
    }
]