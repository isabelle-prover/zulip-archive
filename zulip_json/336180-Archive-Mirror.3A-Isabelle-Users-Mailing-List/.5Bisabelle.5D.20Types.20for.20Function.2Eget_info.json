[
    {
        "content": "<p>From: Mathieu Giorgino &lt;<a href=\"mailto:mathieu.giorgino@irit.fr\">mathieu.giorgino@irit.fr</a>&gt;<br>\nHi all,</p>\n<p>While using \"Function.get_info\" in Isabelle/HOL(ML), I got an \"Empty\" <br>\nexception coming from the \"the_single\" function.</p>\n<p>I discovered that when defining a function in Isabelle/HOL, as soon as the <br>\ntype variables of the type annotation differs from the ones of the infered <br>\ntype (without type annotation), the function is added twice (with these two <br>\ntyping informations) to the FunctionData. Then the \"the_single\" call of <br>\n\"Function.get_info\" fails (with an Empty exception while the list contains 2 <br>\nelements, which can be a little confusing :-)).</p>\n<p>Here is a simple example:</p>\n<hr>\n<p>fun foo :: \"'a \\&lt;Rightarrow&gt; 'b \\&lt;Rightarrow&gt; ('a * 'b)\" where<br>\n  \"foo a b = (a, b)\"</p>\n<p>ML {*<br>\n  Item_Net.retrieve (Function_Common.get_function @{context}) @{term \"foo\"}<br>\n  |&gt; map #1<br>\n<em>} (</em> 1 element in the list *)</p>\n<p>fun foo' :: \"'a \\&lt;Rightarrow&gt; 'c \\&lt;Rightarrow&gt; ('a * 'c)\" where<br>\n  \"foo' a b = (a, b)\"</p>\n<p>ML {*<br>\n  Item_Net.retrieve (Function_Common.get_function @{context}) @{term \"foo'\"}<br>\n  |&gt; map #1<br>\n<em>} (</em> 2 elements with similar types in the list *)</p>\n<p>ML {* Function.get_info @{context} @{term \"foo\"} <em>} (</em> OK *)<br>\nML {* Function.get_info @{context} @{term \"foo'\"} <em>} (</em> exception Empty *)</p>\n<hr>\n<p>Bug or feature ?</p>\n<p>Thanks,</p>\n<p>Mathieu</p>",
        "id": 294140871,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660845764
    },
    {
        "content": "<p>From: Alexander Krauss &lt;<a href=\"mailto:krauss@in.tum.de\">krauss@in.tum.de</a>&gt;<br>\nHi Mathieu,</p>\n<blockquote>\n<p>I discovered that when defining a function in Isabelle/HOL, as soon as the<br>\ntype variables of the type annotation differs from the ones of the infered<br>\ntype (without type annotation), the function is added twice (with these two<br>\ntyping informations) to the FunctionData.</p>\n</blockquote>\n<p>[...]</p>\n<blockquote>\n<p>Bug or feature ?</p>\n</blockquote>\n<p>I confirm that this is a bug in function's way of declaring its data. <br>\nAfter the termination proof, the data is updated by just re-issuing the <br>\ndeclaration, but the termination part has a different typing than the <br>\nfunction part, even if they come from the same thing originally.</p>\n<p>It is not really easy to do this right in the presence of arbitrary <br>\nlocal theory magic... I'll have a look at some point (I hope it is not a <br>\nshow-stopper for you).</p>\n<p>Thanks,<br>\nAlex</p>",
        "id": 294141046,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660845832
    }
]