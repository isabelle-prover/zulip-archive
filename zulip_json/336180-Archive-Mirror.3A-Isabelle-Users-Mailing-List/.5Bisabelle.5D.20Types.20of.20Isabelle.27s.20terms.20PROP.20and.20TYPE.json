[
    {
        "content": "<p>From: Georgy Dunaev &lt;<a href=\"mailto:georgedunaev@gmail.com\">georgedunaev@gmail.com</a>&gt;<br>\nHello!</p>\n<p>What are the types of PROP and P in the following theorem from Pure/Pure.ml<br>\n?<br>\nI mean this lemma:</p>\n<p>lemma meta_spec:<br>\n  assumes \"⋀x. PROP P x\"<br>\n  shows \"PROP P x\"<br>\n    by (rule ‹⋀x. PROP P x›)</p>\n<p>I used ctrl+click and command Isabelle2019/src/Pure$ grep -rIn \"PROP\" but i<br>\ndidn't find the definition.</p>\n<p>What are the types of P and PROP here?</p>\n<p>If PROP has type (prop=&gt;prop) (as It told in implementation pdf) then why I<br>\ncan't remove it and assume \"!!x. P x\"? (Where it \"was told to\" Isabelle<br>\nsomething like this \"from this moment PROP s not necessary to write\", if it<br>\nwas, of course.)</p>\n<p>What is the type of the term \"type\"?<br>\nIt looks like \" 'a itself \", but what does it mean exactly?<br>\nDoes it have several types, for example, both \" (prop=&gt;prop) itself \" and<br>\n\"prop itself\"?</p>\n<p>Kind regards,<br>\nGeorgy Dunaev</p>",
        "id": 294825242,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661244099
    },
    {
        "content": "<p>From: Lawrence Paulson &lt;<a href=\"mailto:lp15@cam.ac.uk\">lp15@cam.ac.uk</a>&gt;<br>\nPROP doesn’t have any type at all: it is a keyword. Its purpose is to disable the implicit coercion from bool to prop whereby (for example)</p>\n<p>shows “P”</p>\n<p>is interpreted as</p>\n<p>shows “Trueprop P”</p>\n<p>thereby giving P type bool. </p>\n<p>If instead you write</p>\n<p>shows “PROP P”</p>\n<p>then P will be assigned type prop.</p>\n<p>And what is prop? It is the type of truth values in the meta level proof calculus. The purpose of Trueprop (which has type bool =&gt; prop) is to map the object level truth values (bool) to their meta level equivalents.</p>\n<p>Larry</p>",
        "id": 294825258,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661244111
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nOn 17/03/2020 11:59, Georgy Dunaev wrote:</p>\n<blockquote>\n<p>What are the types of PROP and P in the following theorem from Pure/Pure.ml<br>\n?<br>\nI mean this lemma:</p>\n<p>lemma meta_spec:<br>\n  assumes \"⋀x. PROP P x\"<br>\n  shows \"PROP P x\"<br>\n    by (rule ‹⋀x. PROP P x›)</p>\n<p>I used ctrl+click and command Isabelle2019/src/Pure$ grep -rIn \"PROP\" but i<br>\ndidn't find the definition.</p>\n<p>What are the types of P and PROP here?</p>\n</blockquote>\n<p>You should always use the Prover IDE (Isabelle/jEdit) for exploring Isabelle.<br>\nNote that for the ML files of Pure, you need to have src/Pure/ROOT.ML open, as<br>\ngiven in the Documentation panel.</p>\n<p>For \"P\" above you can use normal C-hover with the mouse to see its type: 'a ⇒<br>\nprop and you can use the same techniques on the popup window to explore the<br>\nprovenience of \"prop\" (but it is hardwired in Pure).</p>\n<p>For PROP the visual clue tells you that it is a syntax keyword. Since it is<br>\nfree-form mixfix syntax, there is no hyperlink on it (an omission of the<br>\nProver IDE). You can use other means to find it in the implementation: use the<br>\nregular jEdit search dialog to make a \"hypersearch\" on the subdirectory<br>\n$ISABELLE_HOME/src/Pure --- probably also as a single word. This will give you<br>\nfurther clues how the Pure bootstrap works.</p>\n<p>In the context of Isabelle/jEdit it makes sense to learn the builtin<br>\nhypersearch facility works --- grep is very clumsy compared to that.</p>\n<blockquote>\n<p>What is the type of the term \"type\"?<br>\nIt looks like \" 'a itself \", but what does it mean exactly?<br>\nDoes it have several types, for example, both \" (prop=&gt;prop) itself \" and<br>\n\"prop itself\"?</p>\n</blockquote>\n<p>See \"implementation\" manual section 2.3.2<br>\n\"Auxiliary connectives\".</p>\n<p>Makarius</p>",
        "id": 294825324,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661244123
    }
]