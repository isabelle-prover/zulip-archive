[
    {
        "content": "<p>From: Gergely Buday &lt;<a href=\"mailto:buday.gergely@uni-eszterhazy.hu\">buday.gergely@uni-eszterhazy.hu</a>&gt;<br>\nHi,</p>\n<p>it is possible to typeset Isar code as it appears in Isabelle/JEdit:</p>\n<p><a href=\"https://isabelle.in.tum.de/dist/library/Doc/Prog_Prove/Isar.html\">https://isabelle.in.tum.de/dist/library/Doc/Prog_Prove/Isar.html</a></p>\n<p>This is for the web. How can I generate this? Where is the code for it <br>\nin the source?</p>\n<p>And, is it possible to do the same thing in LaTeX document preparation? <br>\nIf not, could it be written in a few days?</p>\n<ul>\n<li>Gergely</li>\n</ul>",
        "id": 294826863,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661244847
    },
    {
        "content": "<p>From: Lawrence Paulson &lt;<a href=\"mailto:lp15@cam.ac.uk\">lp15@cam.ac.uk</a>&gt;<br>\nA quick and easy alternative is simply to take a screenshot. Provided you have a high resolution screen (e.g. Apple retina display), the resolution will be reasonable.</p>\n<p>Larry</p>",
        "id": 294826972,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661244914
    },
    {
        "content": "<p>From: Gergely Buday &lt;<a href=\"mailto:buday.gergely@uni-eszterhazy.hu\">buday.gergely@uni-eszterhazy.hu</a>&gt;<br>\n2020-04-02 16:13 időpontban Lawrence Paulson ezt írta:</p>\n<p>1st: a slight variation on that is to use headless rendering via <br>\nfirefox:</p>\n<p><a href=\"https://softwarerecs.stackexchange.com/questions/50269/command-line-utility-for-rendering-htmlcss-to-image\">https://softwarerecs.stackexchange.com/questions/50269/command-line-utility-for-rendering-htmlcss-to-image</a></p>\n<p>As I would use a lot of this, I prefer an automated method. To have this <br>\nreally usable, hooking this up into document preparation would be <br>\nbeneficial.</p>\n<p>This needs emitting html for a portion of Isar code (see the code <br>\npointer at 2nd)</p>\n<p>2nd: rewrite write_document and its descendants in <br>\nsrc/Pure/Thy/html.scala to emit LaTeX instead of HTML and hook it up <br>\ninto the document preparation. This would the most thorough method but <br>\nalso requires the most work. To have this as an alternative to the <br>\nstandard Isar code typesetting could be a thing, so no duplication of <br>\nIsar code would be necessary.</p>\n<p>3rd: use Jens Bürger's isabelle-listings environment: <br>\n<a href=\"https://gitlab.com/jens.buerger/isabelle-listings/\">https://gitlab.com/jens.buerger/isabelle-listings/</a> . This needs some <br>\nfiddling as even in a small example it fails a bit, see the attachment.</p>\n<p>@Makarius: which one fits your ideas on Isabelle document preparation <br>\nbest?</p>\n<p>The Isabelle community might not demand this feature but if there is an <br>\ninterest it would be nice to have this included in the distribution. So <br>\nplease tell us if you would use this feature.</p>\n<ul>\n<li>Gergely<br>\n<a href=\"/user_uploads/14278/9qDzwEbZ9WM3hd7e20dcWQCS/document.pdf\">document.pdf</a></li>\n</ul>",
        "id": 294827049,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661244961
    },
    {
        "content": "<p>From: Peter Zeller &lt;<a href=\"mailto:p_zeller@cs.uni-kl.de\">p_zeller@cs.uni-kl.de</a>&gt;<br>\nOne option is to build with <code>-o browser_info</code>, for example:</p>\n<p>isabelle build -o browser_info -v -D .</p>\n<p>Then the output will contain a line like:</p>\n<p>Browser info at <br>\n/home/peter/.isabelle/Isabelle2019/browser_info/Unsorted/xyz</p>\n<p>The HTML files are in this folder.</p>\n<p>Another option is to use the jEdit under the menu entry <br>\n\"Plugins-&gt;Isabelle-&gt;Show preview in Browser\".</p>\n<p>This option actually produces the better output since it uses the <br>\nsemantic highlighting information from jEdit, but I am not aware of a <br>\nway to automate this process on a headless build server.</p>\n<p>For LaTeX document preparation it might be an option to adjust the style <br>\ndefinitions such that the PDF output uses the same colors as jEdit.</p>\n<p>Regards,<br>\nPeter</p>",
        "id": 294827118,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661244983
    },
    {
        "content": "<p>From: Frédéric Boulanger &lt;<a href=\"mailto:frederic.boulanger@lri.fr\">frederic.boulanger@lri.fr</a>&gt;<br>\nIf it may be useful to other people, here is the Makefile I use to prepare the documentation of my theories:</p>\n<p><a href=\"https://github.com/Frederic-Boulanger-UPS/Clocks/blob/master/Makefile\">https://github.com/Frederic-Boulanger-UPS/Clocks/blob/master/Makefile</a> &lt;<a href=\"https://github.com/Frederic-Boulanger-UPS/Clocks/blob/master/Makefile\">https://github.com/Frederic-Boulanger-UPS/Clocks/blob/master/Makefile</a>&gt;</p>\n<p>\"make reboot\" prepares the ROOT document (everything in the document, output and docs directories is removed).<br>\nYou should do this only if you change the list of theories or of LaTeX documents.</p>\n<p>\"make browser_info\" builds the documentation, in HTML and PDF, in a way suitable to use Github Pages from a Github repository (serving pages from master/docs). You may then refer to the documentation of your theories in the README.md file as shown in:</p>\n<p><a href=\"https://github.com/Frederic-Boulanger-UPS/Clocks/blob/master/README.md\">https://github.com/Frederic-Boulanger-UPS/Clocks/blob/master/README.md</a> &lt;<a href=\"https://github.com/Frederic-Boulanger-UPS/Clocks/blob/master/README.md\">https://github.com/Frederic-Boulanger-UPS/Clocks/blob/master/README.md</a>&gt;</p>\n<p>\"make pdf_document\" just builds the PDF.</p>\n<p>Frédéric Boulanger<br>\nCentraleSupélec - Département Informatique  Laboratoire de Recherche en Informatique<br>\n3 rue Joliot-Curie, 91192 Gif-sur-Yvette cedex  Bât. 650 - 1 rue Raimond Castaing, 91190 Gif-sur-Yvette<br>\n+33 [0]1 69 85 14 84</p>",
        "id": 294827251,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661245051
    }
]