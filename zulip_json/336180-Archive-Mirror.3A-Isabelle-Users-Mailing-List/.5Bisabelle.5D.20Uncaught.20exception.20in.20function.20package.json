[
    {
        "content": "<p>From: John Matthews &lt;<a href=\"mailto:matthews@galois.com\">matthews@galois.com</a>&gt;<br>\nHello,</p>\n<p>I'm trying out the Haskabelle tool on a simple example program:</p>\n<p>module HB1 where</p>\n<p>newtype Arr a = A [a]</p>\n<p>alist :: Arr a -&gt; [a]<br>\n   alist (A xs) = xs</p>\n<p>{-# HASKABELLE permissive mk_array #-}<br>\n   mk_array :: Integer -&gt; a -&gt; Arr a<br>\n   mk_array 0 x = A []<br>\n   mk_array n x<br>\n       = A (x:xs)<br>\n         where xs = alist $ mk_array (n - 1) x</p>\n<p>Haskabelle is able to translate the file, but then Isabelle's function  <br>\npackage gives this error on mk_array:</p>\n<p>*** exception Option raised (line 80 of \"General/basics.ML\")<br>\n   *** At command \"function\".</p>\n<p>I'm using Isabelle2009-2. I suspect it's due to the numeric pattern  <br>\nmatch on an \"int\" type. However, this pattern is pretty common in  <br>\nHaskell programs. Is it possible to have the function package accept  <br>\nthese kinds of patterns, at least for the \"int\" type?</p>\n<p>Thanks,<br>\n-john<br>\n<a href=\"/user_uploads/14278/574J0f1l7BaAgs1uRQ0mX4h0/smime.p7s\">smime.p7s</a></p>",
        "id": 294112489,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660837288
    },
    {
        "content": "<p>From: Florian Haftmann &lt;<a href=\"mailto:florian.haftmann@informatik.tu-muenchen.de\">florian.haftmann@informatik.tu-muenchen.de</a>&gt;<br>\nHi John,</p>\n<p>function (sequential) mk_array :: \"int ⇒ 'a ⇒ 'a Arr\"<br>\nwhere<br>\n  \"mk_array 0 x = A Nil\"<br>\n| \"mk_array n x = (let xs = alist $ mk_array (n - 1) x<br>\n                   in A (x # xs))\"<br>\nsorry termination sorry</p>\n<p>The fundamental problem is that while in Haskell overlapping pattern are<br>\ndisambiguated by order, in Isabelle every equations must be<br>\ndisambiguated \"on its own\" to be logically consistent and<br>\nself-contained.  I.e. disambiguation must be encoded syntactically.  For<br>\ndatatypes this can be done using pattern disambiguation.  For<br>\nnon-datatypes the story is not that clear (how would you encode \"any<br>\nnumber different from 0\"?).  Here it is perhaps best to rewrite that<br>\npattern match into an explicit if-then-else.</p>\n<p>Note that if you remove (sequential), their will be no attempt for<br>\ndisambiguation, but then the specification is inconsistent anyway.</p>\n<p>Hope this helps,<br>\n    Florian<br>\n<a href=\"/user_uploads/14278/mrFmFNPv0fFIJc0NDc8hrLnq/signature.asc\">signature.asc</a></p>",
        "id": 294112766,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660837368
    },
    {
        "content": "<p>From: John Matthews &lt;<a href=\"mailto:matthews@galois.com\">matthews@galois.com</a>&gt;<br>\nHi Florian,</p>\n<p>Ok, that makes sense.</p>\n<p>Thanks,<br>\n-john<br>\n<a href=\"/user_uploads/14278/1oAWMXRIbVVHhIXwpFrlIYDY/smime.p7s\">smime.p7s</a></p>",
        "id": 294112799,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660837380
    }
]