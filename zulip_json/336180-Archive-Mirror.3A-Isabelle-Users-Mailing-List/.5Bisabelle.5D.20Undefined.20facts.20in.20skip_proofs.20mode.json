[
    {
        "content": "<p>From: Lars Hupel &lt;<a href=\"mailto:hupel@in.tum.de\">hupel@in.tum.de</a>&gt;<br>\nHello,</p>\n<p>Cornelius and I noticed an oddity when using the system option<br>\n\"skip_proofs\". Consider this simple proof:</p>\n<p>lemma \"(xs::'a list) = xs\"<br>\nproof (induct xs)<br>\n  case Cons<br>\n  thm Cons.hyps<br>\n  from Cons show ?case by auto<br>\nqed auto</p>\n<p>Notice the \"thm\" command in the middle. Without \"skip_proofs\", this goes<br>\nthrough fine. Enabling \"skip_proofs\" produces this message:</p>\n<p>*** Undefined fact: \"Cons.hyps\" (line 8 of<br>\n\"~/tmp/Skip_Proof/Skip_Proof.thy\")<br>\n*** At command \"thm\" (line 8 of \"~/tmp/Skip_Proof/Skip_Proof.thy\")</p>\n<p>I have attached a session demonstrating the difference. Run with</p>\n<p>$ isabelle build -d . -v Skip_Proof</p>\n<p>Reproducible in all official releases since 2013-2.</p>\n<p>Cheers<br>\nLars<br>\n<a href=\"/user_uploads/14278/_UTv-zAuAIceb_khK--1Fdh8/skip_proofs.zip\">skip_proofs.zip</a></p>",
        "id": 294285023,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660921557
    },
    {
        "content": "<p>From: Gerwin Klein &lt;<a href=\"mailto:Gerwin.Klein@nicta.com.au\">Gerwin.Klein@nicta.com.au</a>&gt;<br>\nIsn’t that as specified? The proofs are skipped, so Cons.hyps won’t be generated in the induct call.</p>\n<p>Cheers,<br>\nGerwin</p>\n<hr>\n<p>The information in this e-mail may be confidential and subject to legal professional privilege and/or copyright. National ICT Australia Limited accepts no liability for any damage caused by this email or its attachments.</p>",
        "id": 294285080,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660921563
    },
    {
        "content": "<p>From: Andrew Boyton &lt;<a href=\"mailto:Andrew.Boyton@nicta.com.au\">Andrew.Boyton@nicta.com.au</a>&gt;<br>\nThe skip-proof semantics are confusing though.</p>\n<p>When processing a theorem, skip_proofs takes a theorem ending with \"oops\" as a valid theorem, and so if you have two versions<br>\nof a lemma in a single file, one that has been oopsed, and one later with the same name which is \"done\", then the second one fails<br>\nto be processed, which is unfortunate.</p>\n<p>Andrew</p>",
        "id": 294285100,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660921569
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nskip_proofs is one of many add-on features that try to address certain <br>\nsituations, without telling what that was years ago or what it might be <br>\ntoday.  The doc-strings say \"skip over proofs (implicit 'sorry')\" in <br>\nIsabelle/Scala or \"Skip over proofs\" in Proof.</p>\n<p>So what did have have in mind when using it? It might explain the <br>\nconfusion.  Or it might lead to new insight which general principles may <br>\nsupersede skip_proofs at some point -- and absorb similar or different <br>\nfeatures in the usual manner.</p>\n<p>Makarius</p>",
        "id": 294285270,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660921636
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nWhich proof documents actually?  When I have this situation, the time is <br>\nusually spent on latex (several sequential runs), not the proofs (which <br>\nrun in parallel anyway).</p>\n<p>In the longer run, the document preparation should become part of the <br>\nProver IDE -- but so far it did not worked out due to too many odd options <br>\nand \"modes\" of the system in that particular respect.</p>\n<p>Makarius</p>",
        "id": 294285677,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660921772
    },
    {
        "content": "<p>From: Gerwin Klein &lt;<a href=\"mailto:Gerwin.Klein@nicta.com.au\">Gerwin.Klein@nicta.com.au</a>&gt;<br>\nAs historical intention goes, skip_proofs was a hack, AFAIR introduced for Verisoft, to speed up processing of large amounts of proofs for interactive development.</p>\n<p>Say for example, you have 20 large theory imports in your chain between the image you are based on and the point where you are editing. Skip_proofs was intended to allow you to get to the current point quickly and without using the equivalent of a small forest in energy heating your office.</p>\n<p>It is extremely useful for that, and we have used it extensively in L4.verified as well. It can reduce 2h wait time to 5min.</p>\n<p>It remains a hack, though. It is quite likely that there are further unintended side effects.</p>\n<p>I’m surprised that latex output works with it at all, for instance. It is even possible in some cases that the theorems you get out of skip_proofs are slightly different to the ones you would get from a normal run.</p>\n<p>It would be nice to do skip_proofs properly. For instance, I could imagine that judicious use of futures may supersede the current skip_proofs implementation, but I don’t think it’s a project that we should tackle before the release.</p>\n<p>Cheers,<br>\nGerwin</p>\n<hr>\n<p>The information in this e-mail may be confidential and subject to legal professional privilege and/or copyright. National ICT Australia Limited accepts no liability for any damage caused by this email or its attachments.</p>",
        "id": 294285960,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660921858
    },
    {
        "content": "<p>From: Gerwin Klein &lt;<a href=\"mailto:Gerwin.Klein@nicta.com.au\">Gerwin.Klein@nicta.com.au</a>&gt;<br>\nThis may be slightly more addressable. You’d have to look at what oops does for skip_proofs and if it can be caught somehow.</p>\n<p>Cheers,<br>\nGerwin</p>",
        "id": 294285976,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660921863
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nI am trying to do such reforms for years.  Eventually it should be all <br>\njust one uniform concept to manage forked proofs, potentially with <br>\ndifferent priorities and different policies to insist or not insist in <br>\njoining them later.</p>\n<p>To get there, the usual layers of sediments need to be cleaned up slowly <br>\nand steadily.  Moreover, one needs to have a clear picture of typical <br>\napplicaions, beyond accidental features inherited from the past.</p>\n<p>That is why it is important to describe particular situations in a <br>\nmeaningful way.  Often the reports are isomorphic to \"I want to use <br>\nfeature X in the context of Y, but it fails\".</p>\n<p>Makarius</p>",
        "id": 294287828,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660922440
    }
]