[
    {
        "content": "<p>From: Manuel Eberl &lt;<a href=\"mailto:eberlm@in.tum.de\">eberlm@in.tum.de</a>&gt;<br>\nHallo,</p>\n<p>I am still experiencing some problems with friend_of_corec: It <br>\noccasionally produces \"UnequalLength\" exceptions and I have no idea why. <br>\nFor an example, see the end of the attached file.</p>\n<p>Cheers,</p>\n<p>Manuel<br>\n<a href=\"/user_uploads/14278/Ch_A9vQxKU2M_NQ6yz_3jFqi/Foo.thy\">Foo.thy</a></p>",
        "id": 294699732,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661178775
    },
    {
        "content": "<p>From: Jasmin Blanchette &lt;<a href=\"mailto:jasmin.blanchette@inria.fr\">jasmin.blanchette@inria.fr</a>&gt;<br>\nDear Manuel,</p>\n<blockquote>\n<p>I am still experiencing some problems with friend_of_corec: It occasionally produces \"UnequalLength\" exceptions and I have no idea why. For an example, see the end of the attached file.</p>\n<p>First, I am sorry for the delay in answering your email.</p>\n</blockquote>\n<p>I minimized your example to</p>\n<p>codatatype 'a tree =<br>\n      Node \"'a tree\" \"'a tree\"</p>\n<p>consts tms :: \"int tree \\&lt;Rightarrow&gt; int tree\"</p>\n<p>friend_of_corec tms :: \"int tree \\&lt;Rightarrow&gt; int tree\" where<br>\n      \"tms ys = Node (map_tree id ys) (tms ys)\"</p>\n<p>The exception is not nice; I just pushed a change to the repository version to avoid this situation. But then you get the error</p>\n<p>\"map_tree\" not polymorphic enough to be applied like this and no friend</p>\n<p>The problem is the \"map_tree\" call (or \"lmap\" in your example) applied to the argument \"ys\". For a function to be a friend, it must inspect its arguments only in fixed (and not well documented) ways: E.g. it may destroy them using \"case\", discriminators, or selectors, and it may apply a constructor or friendly function. Or it must be parametric. Unfortunately, \"map_tree\" is not registered as friendly and, due to its type (for reasons which I don't fully understand on the spot), it isn't recognized as potentially parametric due to its type (cf. the first conjunct in the error message). Even though all map functions are always friendly (for arguments \"'a ⇒ 'a\"), they are not registered by default. In your example, adding</p>\n<p>friend_of_corec lmap :: \"('a ⇒ 'a) ⇒ 'a llist ⇒ 'a llist\" where<br>\n      \"lmap f xs = (case xs of LNil ⇒ LNil | LCons x xs' ⇒ LCons (f x) (lmap f xs'))\"</p>\n<p>(and a proof, left as an exercise to the reader) solves the problem.</p>\n<p>Let me know if you run into further problems. I should be more reactive next time. \"corec\" has many rough edges and is likely to keep some of them, but I am excited to see it used and will gladly help you get your work done.</p>\n<p>Cheers,</p>\n<p>Jasmin</p>",
        "id": 294703502,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661179959
    }
]