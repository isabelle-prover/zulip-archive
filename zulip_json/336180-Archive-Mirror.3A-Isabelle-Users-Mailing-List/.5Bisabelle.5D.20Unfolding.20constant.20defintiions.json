[
    {
        "content": "<p>From: \"Janney, Mark-P26816\" &lt;<a href=\"mailto:Mark.Janney@gdc4s.com\">Mark.Janney@gdc4s.com</a>&gt;<br>\nHere's a newbie question:</p>\n<p>I frequently find that I have some constant, zot, having a fairly<br>\ncomplex definition, zot_def.</p>\n<p>Then in some proof I want to say things like<br>\n    have \"zot x y z = ZOT(x,yz)\" <br>\nwhere ZOT(x,yz) the unfolded definition of zot with the actual<br>\nparameters x, y, z, substituted in for the formal parameters.</p>\n<p>So far I have done the unfolding manually via cut-n-paste, which is<br>\ntedious and error-prone.</p>\n<p>Is there any way to get Isabelle to perform the unfolding for me?</p>\n<p>Thanks - Mark Janney</p>",
        "id": 294046987,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660817702
    },
    {
        "content": "<p>From: Brian Huffman &lt;<a href=\"mailto:brianh@cs.pdx.edu\">brianh@cs.pdx.edu</a>&gt;<br>\nHi Mark,</p>\n<p>You can try instantiating zot_def using the \"where\" attribute. Let's say the <br>\ntheorem zot_def has variables named a, b, and c thus:<br>\nzot_def: \"zot ?a ?b ?c = ZOT(?a,?b,?c)\"</p>\n<p>Then zot_def [where a=\"x\" and b=\"y\" and c=\"z\"] instantiates these variables to <br>\ngive \"zot x y z = ZOT(x,y,z)\".</p>\n<p>In an Isar-style proof, you can replace the statement<br>\n  have \"zot x y z = ZOT(x,y,z)\"<br>\nwith<br>\n  note zot_def [where a=\"x\" and b=\"y\" and c=\"z\"]<br>\nwhich should have the same effect. Hope this helps.</p>\n<ul>\n<li>Brian</li>\n</ul>",
        "id": 294046998,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660817705
    }
]