[
    {
        "content": "<p>From: Lars Hupel &lt;<a href=\"mailto:hupel@in.tum.de\">hupel@in.tum.de</a>&gt;<br>\nDear list,</p>\n<p>while playing some more with cartouches I was wondering why we don't<br>\nsupport Unicode strings in HOL.</p>\n<p>For example, the following can't be written:</p>\n<p>term \"''ß''\"</p>\n<p>... because it fails with the message:</p>\n<p>Bad character: \"ß\"</p>\n<p>In fact, a very \"character\" in HOL is defined to be in the range of 0<br>\nand 255, so only old-fashioned charsets like ISO-8859-* can be represented.</p>\n<p>In \"Unicode_Examples.thy\" [0], you will find input and output syntax to<br>\nsupport this. I've implemented appropriate parse and print translations,<br>\nsuch that at least literals work. However, the encoding I use is rather<br>\ncumbersome [1]. Conversions to and from the existing string type, code<br>\nsetup and actual operations are missing.</p>\n<p>Anyhow, this is on my \"low-priority nice-to-have\" list. Does anybody<br>\nactually need that? I whipped this up quickly during a commute, but if<br>\nsomebody is seriously interested in communicating with the outside world<br>\nin a formal setting, this might be worth investigating.</p>\n<p>Cheers<br>\nLars</p>\n<p>[0] &lt;<a href=\"https://github.com/larsrh/purely-experimental\">https://github.com/larsrh/purely-experimental</a>&gt;</p>\n<p>[1] Many programming languages will store Unicode strings as a sequence<br>\nof codepoints (e.g. Haskell). A codepoint is a number designating a<br>\nspecific Unicode character and tells nothing about the specific encoding<br>\nused. Now, Isabelle sources are encoded in UTF-8 and any proper<br>\nparse/print routine has to perform a conversion between UTF-8 surface<br>\nsyntax and internal codepoint representation. I didn't do that. Instead,<br>\nI'm just storing chunks of UTF-8 bytes. The reason is that I couldn't<br>\nfind appropriate encoding/decoding functions in Isabelle/ML.</p>",
        "id": 294645616,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661163942
    }
]