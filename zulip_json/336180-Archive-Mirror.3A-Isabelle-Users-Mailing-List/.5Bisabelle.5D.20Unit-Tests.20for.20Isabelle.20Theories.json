[
    {
        "content": "<p>From: Joachim Breitner &lt;<a href=\"mailto:breitner@kit.edu\">breitner@kit.edu</a>&gt;<br>\nDear list,</p>\n<p>in the context of our Isabelle course in Karlsruhe we are wondering<br>\nwhat solutions exists (or should exist) to the question:<br>\nHow do you test Isabelle theories?</p>\n<p>I know that we usually position proving as a (better) alternative to<br>\ntesting. But even our Isabelle theories are, in a certain sense, code:<br>\nThey provide functionality behind a certain interface (lemmas with<br>\ncertain names capable to prove certain facts; simplifier setups that<br>\nare supposed to solve certain classes of questions). With that view in<br>\nmind, testing procedures from software development might make sense in<br>\nour setting as well!</p>\n<p>More concretely: What is the most reliable and convenient way of<br>\nautomatically¹ asserting that a certain Isabelle theory correctly<br>\nimplements certain functionality?</p>\n<p>Thanks for your input,<br>\nJoachim Breitner</p>\n<p>¹ Our students submit their Isabelle theories via the Praktomat, which<br>\nhas support for running Isabelle theories in a confined docker<br>\ncontianer: <a href=\"http://pp.ipd.kit.edu/projects/praktomat/praktomat.php\">http://pp.ipd.kit.edu/projects/praktomat/praktomat.php</a><br>\n<a href=\"/user_uploads/14278/xet6NH5AXPh76wk6GJ3GNTil/signature.asc\">signature.asc</a></p>",
        "id": 294673070,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661173997
    },
    {
        "content": "<p>From: \"C. Diekmann\" &lt;<a href=\"mailto:diekmann@in.tum.de\">diekmann@in.tum.de</a>&gt;<br>\nHi,</p>\n<p>I do some very inefficient quick'n'dirty unit testing on my algorithms<br>\ndirectly in the thy files:</p>\n<p>lemma \"code input = expected_result\" by eval</p>\n<p>Best,<br>\n  Cornelius</p>",
        "id": 294673103,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661174005
    },
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\nFor executable code I do the same thing.</p>\n<p>Tobias<br>\n<a href=\"/user_uploads/14278/-WAm3_yx50z5fyDG061YigUl/smime.p7s\">smime.p7s</a></p>",
        "id": 294673149,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661174022
    },
    {
        "content": "<p>From: Thomas Sewell &lt;<a href=\"mailto:thomas.sewell@nicta.com.au\">thomas.sewell@nicta.com.au</a>&gt;<br>\nYou could \"test\" the formal environment created by testing the<br>\neffectiveness of the automatic methods (simplifier, auto, sledgehammer)<br>\nonce the theory is loaded.</p>\n<p>Of course, that requires a collection of hypotheses about the relevant<br>\nconstants. It's not clear where that would come from for original<br>\ntheories. For theories which match a development in some other logic or<br>\ntextbook, you could do comparisons.</p>\n<p>Cheers,<br>\n      Thomas.</p>\n<hr>\n<p>The information in this e-mail may be confidential and subject to legal professional privilege and/or copyright. National ICT Australia Limited accepts no liability for any damage caused by this email or its attachments.</p>",
        "id": 294673203,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661174039
    }
]