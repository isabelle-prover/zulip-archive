[
    {
        "content": "<p>From: Victor Porton &lt;<a href=\"mailto:porton@narod.ru\">porton@narod.ru</a>&gt;<br>\nPlease read and discuss my blog post \"Untyped formalized systems are wrong\" at</p>\n<p><a href=\"http://portonmath.wordpress.com/2011/07/08/untyped-or-typed/\">http://portonmath.wordpress.com/2011/07/08/untyped-or-typed/</a></p>\n<p>where I advocate using typed systems like HOL.</p>\n<p>I really hope to start a discussion thread in blogs and/or mailing lists.</p>",
        "id": 294140823,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660845747
    },
    {
        "content": "<p>From: Steven Obua &lt;<a href=\"mailto:steven.obua@googlemail.com\">steven.obua@googlemail.com</a>&gt;<br>\nHaving read your blog post, I can understand why you come to your conclusion, but I think you come to the wrong conclusion.</p>\n<p>For example, if you have two different lattices, with two different lattice operations, you will need two different names for it, there is just no way around it. <br>\nWhat you would usually do in informal mathematics is to introduce a context where you have abbreviations for those two operations, and then argue with these abbreviations. Locales in Isabelle are a step in the right direction, but (IMHO) not lightweight and integrated enough.</p>\n<p>HOLZF is not really a solution for this problem (once upon a time I thought it might be), but might be a useful tool in order to enhance the logical strength of a proper solution.</p>\n<p>My current idea for a system would be \"lightweight contexts\" + L, where L is some kind of logic that relates to Babel-17 in a similar way as HOL relates to Standard ML.  </p>\n<p>I think the problem you are addressing is one of the more important problems that are in the way of an adoption of theorem proving assistants by mainstream mathematicians. Unfortunately, many many computer scientists (which currently seem to be the majority of people interested in theorem proving assistants) live in a typed world anyway and don't see the problem or think dependent types solve it.</p>\n<p>Cheers,</p>\n<p>Steven</p>",
        "id": 294140834,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660845752
    },
    {
        "content": "<p>From: Steven Obua &lt;<a href=\"mailto:steven.obua@googlemail.com\">steven.obua@googlemail.com</a>&gt;<br>\nOn 08.07.2011, at 21:43, Victor Porton wrote:</p>\n<blockquote>\n<p>08.07.2011, 23:05, \"Steven Obua\" &lt;<a href=\"mailto:steven.obua@googlemail.com\">steven.obua@googlemail.com</a>&gt;:</p>\n<blockquote>\n<p>Having read your blog post, I can understand why you come to your conclusion, but I think you come to the wrong conclusion.</p>\n<p>For example, if you have two different lattices, with two different lattice operations, you will need two different names for it, there is just no way around it.<br>\nWhat you would usually do in informal mathematics is to introduce a context where you have abbreviations for those two operations, and then argue with these abbreviations. Locales in Isabelle are a step in the right direction, but (IMHO) not lightweight and integrated enough.</p>\n</blockquote>\n<p>In the very example I provided in the blog, the lattices are essentially types WITH ARGUMENTS (or are they called \"parameters\"?). This can't be modeled by introducing abbreviations for those two operations. It is the reason I want a typed system and resign from ZF.</p>\n</blockquote>\n<p>In your blog you complain that you have to annotate the operations with lengthy descriptions. Well, this is because they are different operations with possibly different carrier sets, right? How would you write your example in HOL ? My guess is you can't.</p>\n<blockquote>\n<blockquote>\n<p>HOLZF is not really a solution for this problem (once upon a time I thought it might be), but might be a useful tool in order to enhance the logical strength of a proper solution.</p>\n<p>My current idea for a system would be \"lightweight contexts\" + L, where L is some kind of logic that relates to Babel-17 in a similar way as HOL relates to Standard ML.</p>\n</blockquote>\n<p>Could you clarify? I don't really know what is Babel-17.</p>\n<p>Is it worth to study Babel-17 for me? I'm an amateur mathematician specializing in General Topology and has not yet decided whether to invest my time into rewriting my results in a formal system like Isabelle/ISAR.</p>\n</blockquote>\n<p>Babel-17 is a programming language I am currently developing (<a href=\"http://www.babel-17.com\">www.babel-17.com</a>). Yep, it is worth studying it (but then again, I might be biased in that respect :-D), especially if you are a mathematician. But it won't currently help you with theorem proving. I have brought it up because it has a type system which allows for encapsulation and abstraction, but is dynamically typed. I would like one day to build a theorem proving system on top of it, just like HOL systems like HOL4, Isabelle and HOL-Light are built on top of Standard ML / OCaml. Note that the type system of HOL is basically that of Standard ML.</p>\n<ul>\n<li>Steven</li>\n</ul>\n<p>PS: It's Friday night, I guess the Isabelle mailing list can take the hit...</p>",
        "id": 294140853,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660845758
    },
    {
        "content": "<p>From: Steven Obua &lt;<a href=\"mailto:steven.obua@googlemail.com\">steven.obua@googlemail.com</a>&gt;<br>\nThat wouldn't work, because in order for A and B to be parameters, they would have to be modeled as types, too. Now, two types in HOL are either identical (A = B), or they are disjoint. That's probably not what you would for your construction. It's probably best you try to formalize a small part of your theory in Isabelle/HOL. Then you will pretty soon notice what works and what doesn't.</p>\n<ul>\n<li>Steven</li>\n</ul>",
        "id": 294140886,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660845770
    },
    {
        "content": "<p>From: Victor Porton &lt;<a href=\"mailto:porton@yandex.ru\">porton@yandex.ru</a>&gt;<br>\n08.07.2011, 23:05, \"Steven Obua\" &lt;<a href=\"mailto:steven.obua@googlemail.com\">steven.obua@googlemail.com</a>&gt;:</p>\n<blockquote>\n<p>Having read your blog post, I can understand why you come to your conclusion, but I think you come to the wrong conclusion.</p>\n<p>For example, if you have two different lattices, with two different lattice operations, you will need two different names for it, there is just no way around it.<br>\nWhat you would usually do in informal mathematics is to introduce a context where you have abbreviations for those two operations, and then argue with these abbreviations. Locales in Isabelle are a step in the right direction, but (IMHO) not lightweight and integrated enough.</p>\n</blockquote>\n<p>In the very example I provided in the blog, the lattices are essentially types WITH ARGUMENTS (or are they called \"parameters\"?). This can't be modeled by introducing abbreviations for those two operations. It is the reason I want a typed system and resign from ZF.</p>\n<blockquote>\n<p>HOLZF is not really a solution for this problem (once upon a time I thought it might be), but might be a useful tool in order to enhance the logical strength of a proper solution.</p>\n<p>My current idea for a system would be \"lightweight contexts\" + L, where L is some kind of logic that relates to Babel-17 in a similar way as HOL relates to Standard ML.</p>\n</blockquote>\n<p>Could you clarify? I don't really know what is Babel-17.</p>\n<p>Is it worth to study Babel-17 for me? I'm an amateur mathematician specializing in General Topology and has not yet decided whether to invest my time into rewriting my results in a formal system like Isabelle/ISAR.</p>\n<p>(You may probably answer these my questions in a personal email, not mailing lists, as for the rest public these may be irrelevant.)</p>\n<blockquote>\n<p>I think the problem you are addressing is one of the more important problems that are in the way of an adoption of theorem proving assistants by mainstream mathematicians. Unfortunately, many many computer scientists (which currently seem to be the majority of people interested in theorem proving assistants) live in a typed world anyway and don't see the problem or think dependent types solve it.</p>\n<p>Cheers,</p>\n<p>Steven</p>\n<p>On 08.07.2011, at 19:01, Victor Porton wrote:</p>\n<blockquote>\n<p>Please read and discuss my blog post \"Untyped formalized systems are wrong\" at</p>\n<p><a href=\"http://portonmath.wordpress.com/2011/07/08/untyped-or-typed/\">http://portonmath.wordpress.com/2011/07/08/untyped-or-typed/</a></p>\n<p>where I advocate using typed systems like HOL.</p>\n<p>I really hope to start a discussion thread in blogs and/or mailing lists.</p>\n<p>--<br>\nÂ Victor Porton - <a href=\"http://portonvictor.org\">http://portonvictor.org</a></p>\n</blockquote>\n</blockquote>",
        "id": 294140935,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660845786
    },
    {
        "content": "<p>From: Victor Porton &lt;<a href=\"mailto:porton@yandex.ru\">porton@yandex.ru</a>&gt;<br>\nI'm not an expert in Isabelle/HOL but it seems for me that it can be written using types with parameters (my sets A and B would be parameters of a type \"funcoid\").</p>",
        "id": 294140949,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660845790
    },
    {
        "content": "<p>From: Victor Porton &lt;<a href=\"mailto:porton@yandex.ru\">porton@yandex.ru</a>&gt;<br>\nOh, sorry for my stupid dilettante consideration. Steven, I just want to finish my conversation with hope that you'll create a new proof assistant which deals smoothly over the trouble described in my blog. I suppose this could be done by allowing type parameters to be arbitrary values not just types.</p>",
        "id": 294140958,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660845795
    },
    {
        "content": "<p>From: Steven Obua &lt;<a href=\"mailto:steven.obua@googlemail.com\">steven.obua@googlemail.com</a>&gt;<br>\nYou would need HOLZF for that (to get ZF sets within HOL). It might work, depending on what \"\\cap\" does. As I said, the best way to see if it really works and if this is what you want is to just try it out!</p>\n<ul>\n<li>Steven</li>\n</ul>",
        "id": 294140998,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660845807
    },
    {
        "content": "<p>From: Steven Obua &lt;<a href=\"mailto:steven.obua@googlemail.com\">steven.obua@googlemail.com</a>&gt;<br>\nInstead of using tags/tuples you would probably rather use something like</p>\n<p>datatype myuniverse = Sets of ZF | Filters of ZF   </p>\n<p>you can then define your operation \"\\cap\", but you would need to also say what Sets (A) \\cap Filters (B) should mean (for example, \"arbitrary\", if there is no good definition for this)</p>\n<p>If you don't want both to live in the same universe, then also</p>\n<p>datatype sets = Sets of ZF<br>\ndatatype filters = Filters of ZF</p>\n<p>could work. Due to overloading, you could still define \"\\cap\" to operate on sets*filters if you should need that. </p>\n<p>I think you should definitely go for it and try to formalize your stuff using HOLZF to see if that works. I think it is definitely worth the time anyway as you will learn more about both HOL and your stuff.</p>\n<ul>\n<li>Steven</li>\n</ul>",
        "id": 294141008,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660845813
    },
    {
        "content": "<p>From: Victor Porton &lt;<a href=\"mailto:porton@yandex.ru\">porton@yandex.ru</a>&gt;<br>\nSorry for a possibly stupid question, but can't it be done with tuples consisting of a unique tag and sets A, B (with patter matching) together with the actual value (which is a ZF set)?</p>\n<p>\"(funcoid, A, B, v)\" (where \"funcoid\" is a unique tag) would mean a funcoid from A to B whose set-theoretic value is v.</p>\n<p>\"(funcoid, A, B, v1) \\cap (funcoid, A, B, v2)\" would be well defined.</p>\n<p>Note that this can't be done in pure ZFC as in ZFC there are no concept of unique tags.</p>",
        "id": 294141232,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660845896
    },
    {
        "content": "<p>From: Victor Porton &lt;<a href=\"mailto:porton@yandex.ru\">porton@yandex.ru</a>&gt;<br>\nI will explain what \"\\cap\" should do:</p>\n<p>Before investing my time into learning HOL, I want to ask whether the following is possible at all to implement in HOL:</p>\n<p>Let \"sets\" and \"filters\" are unique tags.</p>\n<p>Let \"(sets, X)\" denotes a ZF set X understood a plain set.<br>\nLet \"(filters, F)\" denotes a filter whose ZF value is F. Let filters are ordered REVERSE to set-theoretic inclusion, that is I want:<br>\n\"(filters, F1) \\subseteq (filters, F2) &lt;-&gt; F1 \\supseteq F2\".</p>\n<p>Can we define the following with pattern matching (not with enumerating all possible cases, to be extensible without rewriting existing matching code)?</p>\n<p>\"(sets, X1) \\cap (sets, X2)\" to be different than \"(filters, X1) \\cap (filters, X2)\" where X1 and X2 are filters (in the sense as filters are defined in ZF).</p>\n<p>I want \"(sets, X1) \\cap (sets, X2) = (sets, X1\\cap X2)\" and \"(filters, X1) \\cap (filters, X2)\" to mean \"(filters, Y)\" where Y is the coarsest filter which is finer than both X1 and X2.</p>",
        "id": 294141280,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660845906
    },
    {
        "content": "<p>From: Victor Porton &lt;<a href=\"mailto:porton@narod.ru\">porton@narod.ru</a>&gt;<br>\nMy idea was completely wrong. The source of my trouble was that I had overlapping sets. The solution is to use bijective copies of the sets to make them non-overlapping and this works in ZF (no need for a typed system for this).</p>",
        "id": 294141333,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660845924
    }
]