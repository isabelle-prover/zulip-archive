[
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nOn Tue, 21 May 2013, Jasmin Blanchette wrote:</p>\n<blockquote>\n<p>Am 21.05.2013 um 17:42 schrieb Steffen Juilf Smolka <br>\n&lt;<a href=\"mailto:steffen.smolka@in.tum.de\">steffen.smolka@in.tum.de</a>&gt;:</p>\n<blockquote>\n<p>Is there a way to turn this feature off or to predict reliably when <br>\nannotations are inserted? From the code it seems that numerals with <br>\npolymorphic types are annotated, then again i know @{term 1} is <br>\npolymorhpic but printed without annotation. I guess I don't understand <br>\nthe code completely…</p>\n</blockquote>\n</blockquote>\n<p>These syntax applications in the Isabelle/HOL library should be understood <br>\nas examples of what could be done in typical (ambitious) applications. <br>\nStudying such empirical material is then the starting point for trying to <br>\npin down a situation that successfully work under certain minimal <br>\nassumptions. This requires revisit the question what \"unwanted\" actually <br>\nmeans here.</p>\n<p>BTW, the syntax layers of Isabelle are even thicker than seen here wrt. <br>\nparse/print translations.  In particular, there are also check/uncheck <br>\nphases with multiple stages that could do quite sophisticated things to <br>\nterm input and output.</p>\n<blockquote>\n<blockquote>\n<p>The code I am working on equips terms with a minimal set of type <br>\nannotations which ensures the types of the terms are preserved (when <br>\nprinting and reparsing the terms).</p>\n</blockquote>\n<p>I think I found a workaround. There seems to be no requirement that the <br>\nterm that's printed is type-correct. Hence, you could type all numerals <br>\nwith the type \"nat\" or \"real\" or probably even \"unit\" to avoid the <br>\nspurious type annotations. For example:</p>\n<p>ML {*<br>\n   @{term \"0::nat\"}<br>\n   |&gt; Type.constraint @{typ \"'b\"}<br>\n   |&gt; Syntax.string_of_term @{context}<br>\n   |&gt; warning<br>\n   *}</p>\n</blockquote>\n<p>Here is another example:</p>\n<p>declare [[show_markup = false]]</p>\n<p>ML {*<br>\n   fun test s =<br>\n     let<br>\n       val ctxt = @{context};<br>\n       val t = Syntax.read_term ctxt s;<br>\n       val t' = map_types (fn _ =&gt; dummyT) t;<br>\n     in<br>\n       writeln (Syntax.string_of_term ctxt t);<br>\n       writeln (Syntax.string_of_term ctxt t')<br>\n     end<br>\n*}</p>\n<p>ML_command {* test \"0\" *}<br>\nML_command {* test \"1\" *}</p>\n<p>ML_command {* test \"x ⟷ y\" *}<br>\nML_command {* test \"x ≠ y\" *}</p>\n<p>Types are not strictly necessary for printing, but the presence or absence <br>\nof types is important for certain fine points.  In the examples above the <br>\ndifference is merely the folding of term abbreviations; without proper <br>\ntypes this \"uncheck\" stage is omitted.  There are further things that <br>\nbreak down without types.</p>\n<p>So we are back to figure out what is actually required -- and what is <br>\npossible.  We should probably continue this in a private mail thread.</p>\n<p>Makarius</p>",
        "id": 294240905,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660906929
    },
    {
        "content": "<p>From: Jasmin Blanchette &lt;<a href=\"mailto:jasmin.blanchette@gmail.com\">jasmin.blanchette@gmail.com</a>&gt;<br>\nWe can certainly continue in a private thread, but what we want is plain and might be generally interesting to other people on the mailing list:</p>\n<ol>\n<li>A string_of_term function such that parse(string_of_term t)) aconv t (or at least they are equivalent for metis) and the output string is highly readable (in particular, not marred by type annotations).</li>\n</ol>\n<p>There are of course many issues involved here, including output-only syntaxes, but in practice with Sledgehammer the most urgent problem, already mentioned by Paulson and Susanto in their 2007 paper, is the type annotations. None of the default print modes quite does the trick, quickly leading to replay failures. So we refined goal 1 into goal 1b:</p>\n<p>1b. A string_of_term function such that parse(string_of_term t)) aconv t (or at least they are equivalent for metis) and the output contains a (locally) minimal number of type annotations (i.e., removing one would lead to a more general proposition).</p>\n<p>Steffen was quite successful with goal 1b -- so far numerals are the only corner case in which his approach fails and sometimes produces not only nonminimal solutions (which we can live with), but also horrors like ((0::'a)::'a) -- which parses OK but it disappointing after spending so much energy tying to come up with minimal annotations.</p>\n<p>Jasmin</p>",
        "id": 294240957,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660906946
    },
    {
        "content": "<p>From: Steffen Juilf Smolka &lt;<a href=\"mailto:steffen.smolka@in.tum.de\">steffen.smolka@in.tum.de</a>&gt;<br>\nHi,</p>\n<p>For some reason, I can't get Isabelle to print the following term without type annotations:</p>\n<p>val t = @{term \"0∷'a∷comm_monoid_add\"}</p>\n<p>I have tried</p>\n<p>val ctxt = @{context}<br>\n |&gt; Config.put show_markup                false<br>\n |&gt; Config.put show_types                 false<br>\n |&gt; Config.put show_free_types            false<br>\n |&gt; Config.put show_all_types             false<br>\n |&gt; Config.put show_sorts                 false<br>\nval _ = t |&gt; Syntax.string_of_term ctxt |&gt; writeln</p>\n<p>which produces the output \"0∷'a\". Am I doing something wrong?</p>\n<p>Best Regards,<br>\nSteffen</p>",
        "id": 294241537,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660907189
    },
    {
        "content": "<p>From: Peter Lammich &lt;<a href=\"mailto:lammich@in.tum.de\">lammich@in.tum.de</a>&gt;<br>\nI think this behaviour is hard-coded into the pretty-printer. On<br>\nnumerals with variable types, it always prints the type.</p>\n<p>Peter</p>",
        "id": 294241544,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660907193
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nThe question is what all these flags mean in detail, also what you mean by <br>\n\"unwanted\".  Do you just don't want to see it as end-user, or does some ML <br>\ncode of yours depend critically on a certain behaviour?</p>\n<p>The inner syntax pretty printing infrastructure of Isabelle is very <br>\nflexible, and many details are determined by translation functions in user <br>\nspace (here the HOL library).</p>\n<p>You can search the Isabelle/HOL sources for the syntax const \"_constrain\" <br>\nto get an idea where certain notation takes special care about such extra <br>\ntype constraints.  You can then make educated guesses on which kind of <br>\nbehaviour you can bet, or better not.</p>\n<p>Makarius</p>",
        "id": 294241573,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660907205
    },
    {
        "content": "<p>From: Brian Huffman &lt;<a href=\"mailto:huffman.brian.c@gmail.com\">huffman.brian.c@gmail.com</a>&gt;<br>\nOn Thu, May 16, 2013 at 2:32 PM, Peter Lammich &lt;<a href=\"mailto:lammich@in.tum.de\">lammich@in.tum.de</a>&gt; wrote:</p>\n<blockquote>\n<p>I think this behaviour is hard-coded into the pretty-printer. On<br>\nnumerals with variable types, it always prints the type.</p>\n</blockquote>\n<p>Pretty-printing for numerals is implemented with a<br>\n\"typed_print_translation (advanced)\" command in HOL/Num.thy. The bit<br>\nof ML code there implements the logic for deciding when to add a type<br>\nannotation.</p>\n<p>This is an intentional feature. Without it, a numeral like \"0\" might<br>\nbe parsed with a too-general type like \"0::'a::zero\" without the<br>\nuser's knowledge, leading to much confusion.</p>\n<ul>\n<li>Brian</li>\n</ul>\n<blockquote>\n<p>On Do, 2013-05-16 at 18:41 +0200, Steffen Juilf Smolka wrote:</p>\n<blockquote>\n<p>Hi,</p>\n<p>For some reason, I can't get Isabelle to print the following term without type annotations:</p>\n<p>val t = @{term \"0∷'a∷comm_monoid_add\"}</p>\n<p>I have tried</p>\n<p>val ctxt = @{context}<br>\n |&gt; Config.put show_markup                false<br>\n |&gt; Config.put show_types                 false<br>\n |&gt; Config.put show_free_types            false<br>\n |&gt; Config.put show_all_types             false<br>\n |&gt; Config.put show_sorts                 false<br>\nval _ = t |&gt; Syntax.string_of_term ctxt |&gt; writeln</p>\n<p>which produces the output \"0∷'a\". Am I doing something wrong?</p>\n<p>Best Regards,<br>\nSteffen</p>\n</blockquote>\n</blockquote>",
        "id": 294241595,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660907211
    },
    {
        "content": "<p>From: Steffen Juilf Smolka &lt;<a href=\"mailto:steffen.smolka@in.tum.de\">steffen.smolka@in.tum.de</a>&gt;</p>\n<blockquote>\n<p>Do you just don't want to see it as end-user, or does some ML code of yours depend critically on a certain behaviour?</p>\n</blockquote>\n<p>In Sledgehammer, we generate proof texts with a minimal amount of type annotations. The code assumes that only the annotations introduced with Type.constraint will be printed. (Therefore, I refer to any other annotations procuced by the pretty printer as \"unwanted\").</p>\n<p>The example I posted is the first one I encountered for which this assumption does not hold. The \"unwanted annotations\" do not break the generated Isar-Proof, they just look ugly (and are useless).</p>\n<p>-- Steffen</p>",
        "id": 294241608,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660907218
    },
    {
        "content": "<p>From: Steffen Juilf Smolka &lt;<a href=\"mailto:steffen.smolka@in.tum.de\">steffen.smolka@in.tum.de</a>&gt;<br>\nIs there a way to turn this feature off or to predict reliably when annotations are inserted?<br>\nFrom the code it seems that numerals with polymorphic types are annotated, then again i know @{term 1} is polymorhpic but printed without annotation. I guess I don't understand the code completely…</p>\n<p>The code I am working on equips terms with a minimal set of type annotations which ensures the types of the terms are preserved (when printing and reparsing the terms).</p>\n<p>Thanks for you help!<br>\nSteffen</p>",
        "id": 294241924,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660907334
    },
    {
        "content": "<p>From: Jasmin Blanchette &lt;<a href=\"mailto:jasmin.blanchette@gmail.com\">jasmin.blanchette@gmail.com</a>&gt;<br>\nHi Steffen,</p>\n<p>I think I found a workaround. There seems to be no requirement that the term that's printed is type-correct. Hence, you could type all numerals with the type \"nat\" or \"real\" or probably even \"unit\" to avoid the spurious type annotations. For example:</p>\n<p>ML {*<br>\n    @{term \"0::nat\"}<br>\n    |&gt; Type.constraint @{typ \"'b\"}<br>\n    |&gt; Syntax.string_of_term @{context}<br>\n    |&gt; warning<br>\n    *}</p>\n<p>Cheers,</p>\n<p>Jasmin</p>",
        "id": 294241963,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660907349
    },
    {
        "content": "<p>From: Steffen Juilf Smolka &lt;<a href=\"mailto:steffen.smolka@in.tum.de\">steffen.smolka@in.tum.de</a>&gt;<br>\nThat does the trick!</p>\n<p>Thanks,<br>\nSteffen</p>",
        "id": 294241985,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660907359
    }
]