[
    {
        "content": "<p>From: Holger Gast &lt;<a href=\"mailto:gast@informatik.uni-tuebingen.de\">gast@informatik.uni-tuebingen.de</a>&gt;<br>\nDear Isabelle users,</p>\n<p>I'm happy to announce release 1.0.2 of I3P,<br>\nthe Interactive Interface for the Isabelle Prover.</p>\n<p>The new version is available from</p>\n<p><a href=\"http://www-pu.informatik.uni-tuebingen.de/i3p/\">http://www-pu.informatik.uni-tuebingen.de/i3p/</a></p>\n<p>It supports both the Isabelle2009-2 release<br>\nand Windows/Cygwin installations.</p>\n<p>Those who are already using I3P can just employ<br>\nthe Tools/Plugins dialog to download the updated modules.</p>\n<p>I'd like to thank all users who have given me<br>\nfeedback on the first version. I hope that the<br>\nchanges made based on the suggestions about usability<br>\nare as expected.</p>\n<p>Enjoy,</p>\n<p>Holger</p>",
        "id": 294109251,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660836242
    },
    {
        "content": "<p>From: Joachim Breitner &lt;<a href=\"mailto:mail@joachim-breitner.de\">mail@joachim-breitner.de</a>&gt;<br>\nHi Holger,</p>\n<p>three quick remarks:</p>\n<ul>\n<li>\n<p>In Options, Fonts &amp; Colors, Highlighting, I had to disable the<br>\n„Highlight Caret Row“ background color, otherwise I would not see how<br>\nfar the code in the current row has been evaluated.</p>\n</li>\n<li>\n<p>Using the IsabelleText TrueType font that comes with Isabelle-2009-2,<br>\nI can not display a few special characters, especially \\&lt;guillemotleft&gt;,<br>\n\\&lt;guillemotright&gt; and \\&lt;one&gt;. These are shown as a black square. Is that<br>\na problem with i3p, the font, or something else?</p>\n</li>\n<li>\n<p>Calligraphic math (e.g. \\&lt;F&gt;) is shown as \"\\&lt;F&gt;\". A unicode codepoint<br>\nis available for that: U+2131 SCRIPT CAPITAL F. Could this be improved?</p>\n</li>\n</ul>\n<p>Thanks,<br>\nJoachim<br>\n<a href=\"/user_uploads/14278/F4I5MrAoq4SiTRF-f8YS1Dgg/signature.asc\">signature.asc</a></p>",
        "id": 294112285,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660837215
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nThe font should be OK.  You can test it as follows:</p>\n<p>Isabelle2009-2/bin/isabelle jedit Isabelle2009-2/etc/symbols</p>\n<p>Assuming that this file has been loaded with the encoding <br>\n\"UTF-8-Isabelle\", which is the default configuration here, you will see <br>\nthe decoded version of the standard symbol encoding table of the Isabelle <br>\nsystem.  Users can add further symbols in $ISABELLE_HOME_USER/etc/symbols</p>\n<p>There is a fairly straight-forward Isabelle/Scala interface to use this <br>\ninformation in JVM-based applications, but I3P still ignores that, <br>\nshipping its own (faulty) tables instead.</p>\n<p>Makarius</p>",
        "id": 294112297,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660837220
    },
    {
        "content": "<p>From: Holger Gast &lt;<a href=\"mailto:gast@informatik.uni-tuebingen.de\">gast@informatik.uni-tuebingen.de</a>&gt;<br>\nHi Joachim,</p>\n<p>Thanks for pointing this out; these issues are fixed.</p>\n<p>Also, I have taken the opportunity to add to the theory editor<br>\nan auto-completion box which pops up when you start typing a symbol<br>\nname with \\&lt;... and can also be triggered as usual by Ctrl-space.</p>\n<p>Those who have already installed I3P, just use \"check for updates\".</p>\n<p>Thanks to Makarius for pointing out that there is an official stable<br>\nmapping from symbol encodings to Unicode characters.</p>",
        "id": 294112535,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660837312
    },
    {
        "content": "<p>From: Holger Gast &lt;<a href=\"mailto:gast@informatik.uni-tuebingen.de\">gast@informatik.uni-tuebingen.de</a>&gt;<br>\nDear Makarius,</p>\n<p>For me as a possible user, the current form in which this<br>\nfunctionality is available is not very attractive. I hope that the<br>\nfollowing feedback on how a user might approach the library helps<br>\nin improving the experience for others.</p>\n<ul>\n<li>\n<p>It is very hard to locate the functionality that is there.<br>\n  For instance, after listening two of your talks which presented<br>\n  the Scala layer as a whole, I did not expect that there was some<br>\n  re-usable functionality just for encoding/decoding symbols.<br>\n  It always a appeared as a \"whole\", which could be used entirely<br>\n  or not at all.</p>\n<p>After your remark, I therefore looked through the sources<br>\n(since there is not proper API documentation) and found the<br>\nobject Symbol in General/symbol.scala. The Interpretation class<br>\ninside looked just as if I could use it, and I was quite pleased.</p>\n</li>\n<li>\n<p>It turns out, however, that the constructor of Interpretation<br>\n  already expects some pre-processed form of a table with<br>\n  xsymbol encodings. How could I ever provide this?</p>\n<p>After some find-grep in the Emacs, the only call to the<br>\nconstructor is in Isabelle_System.<br>\nIt retrieves the file from etc/symbols.</p>\n</li>\n<li>\n<p>Now the facade class Isabelle_System is certainly a nice idea,<br>\n  since it lists the basic entry points into the system.<br>\n  However, to use it, one has to have an Isabelle installation<br>\n  available.</p>\n<p>And this is what makes the library useless for me:<br>\nI simply cannot display the raw xsymbol notation until the user<br>\nhas selected the Isabelle installation. User's won't accept it.</p>\n<p>I suspect that the startup functions for the jedit implementation<br>\nsomehow get hold of \"the startup installation\", and then use that.<br>\nIf the library is to be re-used in different contexts, as<br>\nyou imply by your remark, this may not be so easy. Re-usability<br>\njust is not for free ;(</p>\n</li>\n</ul>\n<p>It may be that my procedure was not the expert one, but this is<br>\nnot the point; what I would like to convey is some feedback on how<br>\nusers might approach the library.</p>\n<p>Also, from a prospective library user's point of view, two<br>\nrather minimal improvements would be most helpful<br>\n(I formulate them as suggestions, for brevity):</p>\n<ul>\n<li>\n<p>Make re-usable functionality accessible with minimal assumptions.</p>\n<p>For instance, the font support from Isabelle_System is not really<br>\ntied to a particular installation. It could as well be offered as<br>\na separate JAR, which would bundle the Isabelle Text font, the<br>\nsymbols table, and the Symbol class.</p>\n<p>I suspect that similar sub-functionality can be found and extracted<br>\nin other places as well. The Isabelle_System might, of course,<br>\nstill offer the font support by instantiating the package.<br>\n(As is, incidentally, the idea of the facade pattern.)</p>\n</li>\n<li>\n<p>Provide a minimal overview documentation of all entry points and packages.</p>\n<p>The strategy of placing Scala and ML files side by side in the sources<br>\nis very helpful for keeping them consistent, but for the user it means<br>\nthat it is very hard to find specific things they might be looking for.</p>\n<p>An example of a good solution is the Netbeans list of modules. Each module<br>\nhas a two-line description, such that the user can quickly identify<br>\nthe relevant ones.</p>\n</li>\n<li>\n<p>Make very clear in the documentation of classes which methods<br>\n  you consider for public use and which are \"public\" only for<br>\n  technical reasons.</p>\n<p>For the public ones, a one or two sentence summary of their<br>\nfunctionality would be most helpful.</p>\n</li>\n<li>\n<p>Provide simple test cases that demonstrate the usage of the re-usable<br>\n  functionality.</p>\n<p>If users have to read sources to understand what a particular method<br>\ndoes, this means they have to spend a lot of time on things that they<br>\nwould consider as \"done\" and \"just usable\". For you, as the developer,<br>\non the other hand, it is simple to write a few lines of example code<br>\nin the form of automatic tests that demonstrate particular use scenarios<br>\nthat you have foreseen and also plan to support. The user can then proceed<br>\nby example, which simplifies development a lot.</p>\n</li>\n</ul>\n<p>Again: the remarks are to reflect a user's perspective.<br>\nI hope that they will help to make the emerging Scala layer<br>\nmore attractive from the technical side, since certainly the<br>\nidea of _having_ a well-defined API for interacting with the<br>\nIsabelle system already is very attractive.</p>\n<p>Holger</p>",
        "id": 294112543,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660837318
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nOn Tue, 20 Jul 2010, Holger Gast wrote:</p>\n<blockquote>\n<ul>\n<li>It is very hard to locate the functionality that is there.<br>\n For instance, after listening two of your talks which presented<br>\n the Scala layer as a whole, I did not expect that there was some<br>\n re-usable functionality just for encoding/decoding symbols.<br>\n It always a appeared as a \"whole\", which could be used entirely<br>\n or not at all.</li>\n</ul>\n</blockquote>\n<p>Did you attend my recent tutorial on Isabelle System programming at <br>\nCambridge?  The transscript <br>\n<a href=\"http://www4.in.tum.de/~urbanc/cgi-bin/repos.cgi/cambridge%20tutorial/file/d866d33b15d5/T06_System.thy\">http://www4.in.tum.de/~urbanc/cgi-bin/repos.cgi/cambridge%20tutorial/file/d866d33b15d5/T06_System.thy</a> <br>\ngives you a practical overview of the main entry points.</p>\n<p>I have also explained the importance of Isabelle_System and its many basic <br>\nservices like symbols more than once in private.</p>\n<blockquote>\n<ul>\n<li>Now the facade class Isabelle_System is certainly a nice idea,<br>\n since it lists the basic entry points into the system.<br>\n However, to use it, one has to have an Isabelle installation<br>\n available.</li>\n</ul>\n</blockquote>\n<p>Isabelle_System is really the very foundation of anything built on top of <br>\nthe Isabelle environment.  Without that you can hardly do anything useful.</p>\n<p>Historically, Isabelle_System used to be implicit in the process <br>\nenvironment of Isabelle tools, later I made it an explicit object, only to <br>\nfigure out further on that only one instance will really work within a <br>\ngiven JVM process.  The reason for that are certain \"globalities\" of the <br>\nJVM itself, i.e. consider low-level character encodings or input methods <br>\n(both are not yet implemented).  The registering of Swing fonts is another <br>\nonce-and-for-all thing, and it <em>is</em> implemented right now to spare users <br>\ngoing through the pain of installing fonts manually on the system.</p>\n<p>You cannot easily juggle various Isabelle system installations without <br>\ndisintegrating the Isabelle platform and reassembling it differently, <br>\nloosing overall hull integrity in the process.</p>\n<blockquote>\n<p>And this is what makes the library useless for me:<br>\n I simply cannot display the raw xsymbol notation until the user<br>\n has selected the Isabelle installation. User's won't accept it.</p>\n</blockquote>\n<p>This merely indicates that the present I3P architecture does not fit to <br>\nIsabelle as of 2009 or later.</p>\n<blockquote>\n<ul>\n<li>Make re-usable functionality accessible with minimal assumptions.</li>\n</ul>\n<p>For instance, the font support from Isabelle_System is not really<br>\n tied to a particular installation.</p>\n</blockquote>\n<p>It is, because you cannot even read files in a robust (and platform <br>\nindependent manner) without Isabelle_System being around.  These <br>\nfundamental system integrity structures are very delicate, and I've spent <br>\na long time to make them work robustly, while minimizing assumptions <br>\nroutinely.</p>\n<blockquote>\n<p>As is, incidentally, the idea of the facade pattern.</p>\n</blockquote>\n<p>Why is a foundational concept like Isbelle_System called \"facade\" here? <br>\nVery strange.</p>\n<p>It is important to understand that Isabelle/Scala is our way to reach out <br>\nto the JVM platform.  Just because some other languages happen to live on <br>\nthe same JVM runtime environment does not mean that we take over their <br>\nworldview -- neither that of Java, nor that of Clojure etc.</p>\n<p>Compare this to Isabelle/ML: it is based on the Poly/ML runtime system, <br>\nwhich is itself implemented in C++ and runs native machine code generated <br>\nfrom ML.  Nobody would start thinking in terms of C++ / assembly language <br>\nin Isabelle/ML, of course.</p>\n<p>Isabelle/Scala is about transferring established Isabelle/ML traditions as <br>\nclosely as possible, while honoring the intrisic virtues of the Scala/JVM <br>\nplatform -- e.g. using Scala actors, which do not have a counter part on <br>\nthe ML side.  You will have a hard time understanding Isabelle/Scala with <br>\na Java mindset.</p>\n<p>Makarius</p>",
        "id": 294112727,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660837355
    },
    {
        "content": "<p>From: Alexander Krauss &lt;<a href=\"mailto:krauss@in.tum.de\">krauss@in.tum.de</a>&gt;<br>\nHi Holger,</p>\n<blockquote>\n<p>I simply cannot display the raw xsymbol notation until the user<br>\n  has selected the Isabelle installation. User's won't accept it.</p>\n</blockquote>\n<p>I would happily accept such a minor limitation. We are used to quite <br>\nother things. Most users won't even notice, assuming that the Isabelle <br>\ninstallation is selected as part of some installation process.</p>\n<p>Alex</p>",
        "id": 294112752,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660837365
    },
    {
        "content": "<p>From: Holger Gast &lt;<a href=\"mailto:gast@informatik.uni-tuebingen.de\">gast@informatik.uni-tuebingen.de</a>&gt;</p>\n<blockquote>\n<blockquote>\n<ul>\n<li>Make re-usable functionality accessible withinimal assumptions.</li>\n</ul>\n<p>For instance, the font support from Isabelle_System is not really<br>\n tied to a particular installation.</p>\n</blockquote>\n<p>It is, because you cannot even read files in a robust (and platform<br>\nindependent manner) without Isabelle_System being around.  These<br>\nfundamental system integrity structures are very delicate, and I've<br>\nspent a long time to make them work robustly, while minimizing<br>\nassumptions routinely.<br>\nI understand from this that the Scala layer will not support my use case.<br>\nI have therefore simply developed the standalone module that I suggested.<br>\nSince others may find it useful in building xsymbol-based interfaces<br>\n(it is independent of I3P), it is available here:</p>\n</blockquote>\n<p><a href=\"http://www-pu.informatik.uni-tuebingen.de/i3p/\">http://www-pu.informatik.uni-tuebingen.de/i3p/</a></p>\n<p>It only makes use of standard Java library mechanisms and should<br>\ntherefore run anywhere. (Of course, I also tested it under<br>\nLinux, Windows, and MacOS.) As I proposed, demo code and test cases<br>\nshowing the basic supported use scenarios are included in the files.</p>\n<p>The development has a nice side-effect:<br>\nUsers of I3P do not have to install &amp; configure fonts anymore.</p>\n<blockquote>\n<p>Did you attend my recent tutorial on Isabelle System programming at<br>\nCambridge?  The transscript</p>\n<p><a href=\"http://www4.in.tum.de/~urbanc/cgi-bin/repos.cgi/cambridge%20tutorial/file/d866d33b15d5/T06_System.thy\">http://www4.in.tum.de/~urbanc/cgi-bin/repos.cgi/cambridge%20tutorial/file/d866d33b15d5/T06_System.thy</a><br>\ngives you a practical overview of the main entry points.<br>\nThank you for mentioning this, because it illustrates very well what I<br>\nwanted to point out about documentation from a user's perspective:<br>\nthat workshop was attended by around 25 people, most of whom were in fact<br>\nnot interested in user interfaces, but in the prover. Anybody who did<br>\nnot happen to be at the meeting would have to guess that the<br>\nfont-related functionality is there and find the information by googling<br>\n\"Scala Isabelle fonts\" (The NEWS file comes up 4th, the tutorial is 7th.)</p>\n</blockquote>\n<p>My point is that the Scala library would be used much more widely, and<br>\nthat the substantial and in-depth work that it represents would be<br>\nrecognized more generally, if its use was simpler. In particular,<br>\nto be effective, documentation needs to be placed where users are looking<br>\nfor it. The canonical place is, of course, the standard output of<br>\nthe scaladoc tool. (The raw .html files with the signatures are already there.)<br>\nWriting the basic documentation for a class takes the developer<br>\nabout 10-15min (compare this to the development time for the code).<br>\nRetrieving the same information from different slides, tutorials, papers and<br>\nNEWS files takes each (!) user at least 20-30min, provided<br>\nthey suspect its existance. It is clear that providing the documentation<br>\nbeforehand makes the overall use of the library much more effective.</p>\n<p>Anyway, I think we should discontinue this thread on the mailing list,<br>\nsince it does not seem to lead to further results.<br>\nI am, of course, always available for offline technical discussions.</p>",
        "id": 294113001,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660837435
    }
]