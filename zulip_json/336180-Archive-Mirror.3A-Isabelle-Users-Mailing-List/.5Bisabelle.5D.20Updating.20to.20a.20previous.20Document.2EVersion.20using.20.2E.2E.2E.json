[
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nOn Tue, 26 Feb 2013, Avi Knoll wrote:</p>\n<blockquote>\n<p>Regarding the Isabelle/Scala API: Does anyone know how I might use <br>\nsession.update (or any other method call) to apply edits to a previous <br>\nDocument.Version, or alternately how to move the session to a different <br>\nDocument.Version so I can then apply updates from that point?</p>\n</blockquote>\n<p>The Document.update operation works with explicit ids for the old and new <br>\nversion, but this functional update model is not continued in <br>\nSession.update, which is presently the main way you access the PIDE <br>\ndocument model.</p>\n<p>The Session module (in Scala) essentially models an editor-like session, <br>\nas later used for Isabelle/jEdit.  Such editors work in an old-school <br>\nstateful way, which also causes problems in different areas, outside the <br>\nscope of this thread.  Thus there is a certain bias in <br>\nSession.global_state to move forward in a certain manner, never backwards.</p>\n<p>Instead of navigating the history in a way you would expect from purely <br>\nfunctional content, I would say it is easier to move forward and apply <br>\ninverted edits.  In other words you remove what you've inserted before.<br>\nThe document model will clear out old stuff at some point; this can be <br>\nalso configured in the Session.prune parameters, if you setup your own <br>\nSession instance in Scala.</p>\n<blockquote>\n<p>The context is straightforward: I would like to apply a change, and then <br>\nrevert it (i.e. 'undo') if the prover fails after the change. I would <br>\nlike to do this without starting a new session, as that seems <br>\nunnecessary.</p>\n</blockquote>\n<p>I can't say much at this level of abstraction.  It feels a bit too <br>\nsynchronous to me, to await a certain result from the prover, and then <br>\nproduce further edits.</p>\n<p>It might be easier to internalize this logic of trying something into the <br>\nprover commands that you are running.</p>\n<p>The PIDE document model usually works in a \"streaming\" fashion: you throw <br>\na lot of commands at the prover at the same time, without waiting for <br>\nanything, and later visualize results incrementally as they arrive.</p>\n<p>Makarius</p>",
        "id": 294238112,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660905696
    }
]