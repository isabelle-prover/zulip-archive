[
    {
        "content": "<p>From: Jesus Aransay &lt;<a href=\"mailto:jesus-maria.aransay@unirioja.es\">jesus-maria.aransay@unirioja.es</a>&gt;<br>\nDear all,</p>\n<p>in the file List.thy there are two definitions of list intervals;</p>\n<p>The first one is meant to work with the natural numbers (ihe list of<br>\nnatural numbers greater or equal than a given \"i\" and strictly smaller<br>\nthan a given one):</p>\n<p>primrec<br>\n  upt :: \"nat =&gt; nat =&gt; nat list\" (\"(1[_..&lt;/_'])\") where<br>\n    upt_0: \"[i..&lt;0] = []\"<br>\n  | upt_Suc: \"[i..&lt;(Suc j)] = (if i &lt;= j then [i..&lt;j] @ [j] else [])\"</p>\n<p>The second one, over the integers (every integer between some given<br>\n\"i\" and \"j\"):</p>\n<p>function upto :: \"int =&gt; int =&gt; int list\" (\"(1[_../_])\") where<br>\n\"upto i j = (if i â‰¤ j then i # [i+1..j] else [])\"<br>\nby auto<br>\ntermination<br>\nby(relation \"measure(%(i::int,j). nat(j - i + 1))\") auto</p>\n<p>Is there any good reason why upt is not extended to the \"int\" type,<br>\nand upto to the \"nat\" type?</p>\n<p>Thanks for the info,</p>\n<p>Jesus</p>",
        "id": 294148450,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660848390
    },
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\nOn nat, upto would never allow to produce the empty list. Hence upt is<br>\nusually more uniform on nat. On int, upto appeared more natural. You ca<br>\nalways get from one to the other by incrementing or decrementing the<br>\nupper bound.</p>\n<p>A generic definition that works for both nat and int may require some<br>\nvery specific type class and it did not seem worth it at the time when I<br>\ndefined those functions. Maybe I would do it differently now.</p>\n<p>Tobias</p>",
        "id": 294148457,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660848395
    }
]