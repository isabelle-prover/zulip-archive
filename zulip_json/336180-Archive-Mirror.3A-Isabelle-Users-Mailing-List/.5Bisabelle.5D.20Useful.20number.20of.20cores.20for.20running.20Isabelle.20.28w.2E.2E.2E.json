[
    {
        "content": "<p>From: \"Eugene W. Stark\" &lt;<a href=\"mailto:isabelle-users@starkeffect.com\">isabelle-users@starkeffect.com</a>&gt;<br>\nThe quoted question triggered something that I have been meaning to ask:<br>\nIn people's experience, what is a useful number of cores to have in a machine<br>\nto run Isabelle and what limits the amount of exploitable concurrency?</p>\n<p>My main machine has been a 4-core i5-4670K @ 3.40GHz.  Though I don't have money<br>\njust to throw around for new toys, I have been considering upgrading it to a machine<br>\nwith more cores.  I did some experiments using cloud servers on Digital Ocean, which can be<br>\nreconfigured relatively quickly from a cheap 1vCPU/1GB RAM $5/month maintenance level<br>\n(just to maintain the configuration so I don't have to reinstall each time I want to use it)<br>\nup to a 32vCPU/192GB RAM configuration at $960/mo (or $1.429/hr).  The idea is to spend a<br>\ncouple of minutes reconfiguring up to the expensive configuration at the start of a session,<br>\nuse the machine for awhile, then reconfigure back down to the maintenance level.</p>\n<p>The vCPUS identify as the following:</p>\n<p>vendor_id   : GenuineIntel<br>\ncpu family  : 6<br>\nmodel       : 85<br>\nmodel name  : Intel(R) Xeon(R) Gold 6140 CPU @ 2.30GHz<br>\nstepping    : 4<br>\nmicrocode   : 0x1<br>\ncpu MHz     : 2294.608<br>\ncache size  : 25344 KB<br>\nbogomips    : 4589.21<br>\naddress sizes   : 40 bits physical, 48 bits virtual</p>\n<p>I tried doing \"isabelle build\" of my projects using configurations with various numbers of vCPUs<br>\nand watching the load average, CPU utilization, number of threads, and so on.  I found that it<br>\nwas difficult to find situations where more than about 8 CPUs were in use and the overall average<br>\nspeedup factor was more like about 3x.  So it is hard to justify paying for something larger<br>\nthan the 8vCPU/32GB RAM configuration at $0.238/hr or maybe the 12vCPU/48GB configuration at $0.357/hr.</p>\n<p>Also, the 2.30GHz Xeon CPUs on the cloud server are somewhat slower than my 3.40GHz i5 CPU at home,<br>\nso it actually turns out that I still get stuff done faster on my home system than if I use the<br>\ncloud server with double the number of cores.  The cloud server is still useful when traveling,<br>\nthough (assuming a low-latency internet connection so that the GUI is sort of useable) because<br>\nmy old i3 laptop no longer has the horsepower to do anything useful with the projects that I have<br>\nbeen working on.</p>\n<p>A question that comes to mind is what is it that usually limits the amount of concurrency when<br>\nusing Isabelle?  Although obviously the source has to be parsed and type-checked before anything else<br>\ncan be done, and that seems to occur in a initial pass over the code that runs ahead of the actual<br>\nproof checking, once that has been done it seems like as many of the basic proof steps as you like<br>\nought to be doable in parallel.  So I wonder why that doesn't happen.</p>",
        "id": 294758518,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661198511
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nOn 17/06/2019 17:00, Eugene W. Stark wrote:</p>\n<blockquote>\n<p>My main machine has been a 4-core i5-4670K @ 3.40GHz.</p>\n</blockquote>\n<p>Currently the high end for home machines is something like 8-core i7 /<br>\ni9 @ 3.60 GHz. It also helps to have extra-fast RAM and SSD.</p>\n<blockquote>\n<p>I did some experiments using cloud servers on Digital Oceanhe maintenance level.</p>\n<p>The vCPUS identify as the following:</p>\n<p>model name    : Intel(R) Xeon(R) Gold 6140 CPU @ 2.30GHz<br>\ncpu MHz       : 2294.608<br>\ncache size    : 25344 KB</p>\n<p>I tried doing \"isabelle build\" of my projects using configurations with various numbers of vCPUs<br>\nand watching the load average, CPU utilization, number of threads, and so on.  I found that it<br>\nwas difficult to find situations where more than about 8 CPUs were in use and the overall average<br>\nspeedup factor was more like about 3x.</p>\n</blockquote>\n<p>For a single session, 8 cores is indeed the optimal number for most<br>\napplications. Typical speedup is in the range of 3..7.</p>\n<p>For full-scale maintenance of many (parallel) sessions, notably AFP, it<br>\nmakes sense to have 80 cores around. Usually these are arranged in a<br>\nnon-uniform manner. Often, server hardware is actually just a<br>\nsingle-board cluster of 8-core nodes.</p>\n<blockquote>\n<p>Also, the 2.30GHz Xeon CPUs on the cloud server are somewhat slower than my 3.40GHz i5 CPU at home,<br>\nso it actually turns out that I still get stuff done faster on my home system than if I use the<br>\ncloud server with double the number of cores.</p>\n</blockquote>\n<p>Yes, I guess this is normal for most clouds.</p>\n<blockquote>\n<p>A question that comes to mind is what is it that usually limits the amount of concurrency when<br>\nusing Isabelle?  Although obviously the source has to be parsed and type-checked before anything else<br>\ncan be done, and that seems to occur in a initial pass over the code that runs ahead of the actual<br>\nproof checking, once that has been done it seems like as many of the basic proof steps as you like<br>\nought to be doable in parallel.  So I wonder why that doesn't happen.</p>\n</blockquote>\n<p>Processing of Isabelle document sources (not \"code\") has many aspects.<br>\nIt depends a lot on the structure of the application how much implicit<br>\nparallelism is in there by default. Scalable parallel executation is one<br>\nof the big challenges of computer-science. Isabelle is already quite<br>\nadvanced in this respect, but we now also see the limits of hardware:<br>\nparallel shared-memory access is a typical bottle-neck.</p>\n<p>Makarius</p>",
        "id": 294760758,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661199437
    }
]