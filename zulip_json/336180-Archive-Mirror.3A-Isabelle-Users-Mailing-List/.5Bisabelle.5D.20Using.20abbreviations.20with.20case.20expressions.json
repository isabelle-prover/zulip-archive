[
    {
        "content": "<p>From: Alexander Krauss &lt;<a href=\"mailto:krauss@in.tum.de\">krauss@in.tum.de</a>&gt;<br>\nHi Brian,</p>\n<p>I don't think this is so easy. Abbreviations are unfolded only after <br>\ntype inference (being typed is one of their main advantage over old <br>\ntranslations). Translating case expressions later would mean that the <br>\nrepresentation that exists before that is typable in some way. This is <br>\nprobably not impossible, but requires some non-trivial rethinking of how <br>\nthe translation works.</p>\n<p>In your particular example, could you just use \"notation\"?</p>\n<p>Alex</p>",
        "id": 294125705,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660841243
    },
    {
        "content": "<p>From: Brian Huffman &lt;<a href=\"mailto:brianh@cs.pdx.edu\">brianh@cs.pdx.edu</a>&gt;<br>\nOn Wed, Jan 5, 2011 at 12:17 AM, Alexander Krauss &lt;<a href=\"mailto:krauss@in.tum.de\">krauss@in.tum.de</a>&gt; wrote:</p>\n<blockquote>\n<p>Hi Brian,</p>\n<blockquote>\n<p>theory Scratch imports Main begin</p>\n<p>abbreviation (input) emptystring :: string (\"ε\")<br>\n where \"ε ≡ []\"</p>\n<p>term \"case s of ε ⇒ True | c # cs ⇒ False\"</p>\n<p>*** Error in case expression:<br>\n*** Not a datatype constructor: Scratch.emptystring<br>\n*** In clause<br>\n*** emptystring ⇒ True<br>\n*** Failed to parse term<br>\n*** At command \"term\"</p>\n<p>Apparently the parse translation for case expressions happens after<br>\nprocessing notation (e.g. \"[]\" -&gt; \"List.Nil\" or \"c # cs\" -&gt; \"List.Cons<br>\nc cs\") but before processing abbreviations (e.g. \"emptystring\" -&gt;<br>\n\"List.Nil :: string\"). Could this be changed so that abbreviations are<br>\nexpanded earlier?</p>\n</blockquote>\n<p>I don't think this is so easy. Abbreviations are unfolded only after type<br>\ninference (being typed is one of their main advantage over old<br>\ntranslations). Translating case expressions later would mean that the<br>\nrepresentation that exists before that is typable in some way. This is<br>\nprobably not impossible, but requires some non-trivial rethinking of how the<br>\ntranslation works.</p>\n</blockquote>\n<p>Ok, I had a feeling that this would be tricky to implement. I don't<br>\nhave any critical need for this feature or anything, I just tried it<br>\non a whim and was a bit surprised by the error message I got.</p>\n<blockquote>\n<p>In your particular example, could you just use \"notation\"?</p>\n</blockquote>\n<p>No, notation won't work in this particular example, because the<br>\nabbreviation \"emptystring\" has a more specific type than the constant<br>\n\"Nil\" that it stands for.</p>\n<p>It seems that \"syntax\" + \"translations\" is the right way to go for<br>\nthis kind of thing.</p>\n<p>Using those commands seems a bit weird though, simply because they use<br>\nold-style input syntax (similar to \"consts\" or \"defs\") instead of the<br>\nnew-style (like \"notation\"). Modernizing the input syntax of the<br>\n\"syntax\" and \"translations\" commands would make me feel more confident<br>\nthat these will continue to be fully supported as user-level commands<br>\nin the future.</p>\n<ul>\n<li>Brian</li>\n</ul>",
        "id": 294127001,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660841612
    },
    {
        "content": "<p>From: Brian Huffman &lt;<a href=\"mailto:brianh@cs.pdx.edu\">brianh@cs.pdx.edu</a>&gt;<br>\nIs it unreasonable to expect this to work?</p>\n<p>theory Scratch imports Main begin</p>\n<p>abbreviation (input) emptystring :: string (\"ε\")<br>\n  where \"ε ≡ []\"</p>\n<p>term \"case s of ε ⇒ True | c # cs ⇒ False\"</p>\n<p>*** Error in case expression:<br>\n*** Not a datatype constructor: Scratch.emptystring<br>\n*** In clause<br>\n*** emptystring ⇒ True<br>\n*** Failed to parse term<br>\n*** At command \"term\"</p>\n<p>Apparently the parse translation for case expressions happens after<br>\nprocessing notation (e.g. \"[]\" -&gt; \"List.Nil\" or \"c # cs\" -&gt; \"List.Cons<br>\nc cs\") but before processing abbreviations (e.g. \"emptystring\" -&gt;<br>\n\"List.Nil :: string\"). Could this be changed so that abbreviations are<br>\nexpanded earlier?</p>\n<p>I suppose I could work around this problem by using something like this:</p>\n<p>syntax emptystring :: logic (\"ε\")<br>\ntranslations \"emptystring\" == \"CONST Nil :: string\"</p>\n<p>but the \"syntax\" and \"translations\" commands seem to be considered a<br>\nbit \"old-style\" nowadays, or at least a bit too low-level to be<br>\nconsidered best practice.</p>\n<ul>\n<li>Brian</li>\n</ul>",
        "id": 294128675,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660842078
    }
]