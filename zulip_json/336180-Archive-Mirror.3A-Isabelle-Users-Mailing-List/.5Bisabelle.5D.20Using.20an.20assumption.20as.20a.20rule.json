[
    {
        "content": "<p>From: Peter Lammich &lt;<a href=\"mailto:lammich@in.tum.de\">lammich@in.tum.de</a>&gt;<br>\nHi,</p>\n<p>for exactly this usecase (induction proofs), I use a custom method<br>\nrprems:<br>\nÂ  apply rprems<br>\nalso does what you want, without the subgoal overhead. It resolves the<br>\nconclusion with the first premise, even if this premise is of form<br>\n\"!!_.[|_|] ==&gt; _\".</p>\n<p>It's currently in $AFP/Automatic_Refinement/Lib/Refine_Util, but if<br>\nmore people find this useful, maybe one could move it to Isabelle?</p>",
        "id": 294684621,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661177536
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nI just want to point out that the 'subgoal' command has no overhead: on<br>\nthe contrary, it allows to check proofs compositionally and thus in<br>\nparallel. The explicit proof structure is also an advantage for<br>\nmaintainability.</p>\n<p>In some situations, 'subgoal' cannot be used, though. One example are<br>\nschematic goal states. Then one really needs to go back to old-style<br>\ntactical means.</p>\n<p>Makarius</p>",
        "id": 294684807,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661177603
    },
    {
        "content": "<p>From: Peter Lammich &lt;<a href=\"mailto:lammich@in.tum.de\">lammich@in.tum.de</a>&gt;<br>\nI just want to point out that the 'subgoal' command has no overhead:</p>\n<p>Sorry, I meant textual overhead (boilerplate), not computational<br>\noverhead.</p>",
        "id": 294684973,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661177659
    },
    {
        "content": "<p>From: Edward Pierzchalski &lt;<a href=\"mailto:e.a.pierzchalski@gmail.com\">e.a.pierzchalski@gmail.com</a>&gt;<br>\nHi all,</p>\n<p>Say my current goal looks like:</p>\n<p>A v ==&gt;<br>\n(!! x. B x ==&gt; C x) ==&gt;<br>\nC v</p>\n<p>Here, I have an assumption that I could easily use as an introduction rule<br>\nfor my conclusion, resulting in the new goal</p>\n<p>A v ==&gt;<br>\nB v ==&gt;<br>\nC v</p>\n<p>If I were in Isar mode, the rule-shaped assumption would have a name that I<br>\ncould apply using the rule tactic. Is there an easy way to do this in apply<br>\nmode? At the moment I'm repeatedly using meta_allE (my case has a few more<br>\nbound variables), but this seems dirty.</p>\n<p>Regards,<br>\n--Ed</p>",
        "id": 294694683,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661178046
    },
    {
        "content": "<p>From: Simon Wimmer &lt;<a href=\"mailto:wimmersimon@gmail.com\">wimmersimon@gmail.com</a>&gt;<br>\nHi Ed,</p>\n<p>I'm not sure if you really want the rule to appear in your goal anyways.<br>\nHowever, you could use something like</p>\n<p>subgoal premises prems<br>\n  apply (rule prems(2))</p>\n<p>to apply the rule in apply-style.</p>\n<p>Simon</p>",
        "id": 294694881,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661178112
    },
    {
        "content": "<p>From: Edward Pierzchalski &lt;<a href=\"mailto:e.a.pierzchalski@gmail.com\">e.a.pierzchalski@gmail.com</a>&gt;<br>\nThanks for the tip, Simon! That worked quite nicely.</p>\n<p>The reason I have intro-like rules is because I'm inside some simple<br>\ninduction proofs in apply mode, where the overhead from doing it \"properly\"<br>\nin Isar just isn't worth it.</p>",
        "id": 294696247,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661178180
    }
]