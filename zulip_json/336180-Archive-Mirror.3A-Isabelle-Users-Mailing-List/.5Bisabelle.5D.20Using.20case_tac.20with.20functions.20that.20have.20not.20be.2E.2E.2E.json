[
    {
        "content": "<p>From: Duncan Higgins &lt;<a href=\"mailto:mail@duncan-higgins.co.uk\">mail@duncan-higgins.co.uk</a>&gt;<br>\nThis is my first post to the list, so firstly, a big thank you to Larry,<br>\nTobias and everyone else involved for producing such a powerful, useful and<br>\nopenly available tool.</p>\n<p>At the moment, I'm having trouble understanding a particular aspect of<br>\nIsabelle's behaviour. I've managed to reduce the problem down to this<br>\ntrivial example.</p>\n<p>Suppose I define the following type:</p>\n<p>datatype t = T;</p>\n<p>What I don't understand is that I am able to prove the following lemma using<br>\ncase_tac:</p>\n<p>lemma hd_t_list_equals_T : \"hd xs = T\"<br>\nby ( case_tac \"hd xs\", simp )</p>\n<p>With this lemma I can then go on to prove things like:</p>\n<p>lemma \"hd [] = T\"<br>\nby ( simp add : hd_t_list_equals_T )</p>\n<p>As far as I know, this behaviour only occurs with case expressions and<br>\nfunctions defined using pattern matching, that don't provide an exhaustive<br>\nlist of matches, or functions that explicitly use the 'arbitrary' constant<br>\nas a result. This behaviour allows me to generate Standard ML code that I<br>\nthink I have proved to be correct, but which actually results in a Match<br>\nexception when run.</p>\n<p>I guess what I was expecting to see was something like:</p>\n<blockquote>\n<p>lemma hd_t_list_equals_T : \"hd xs = T\";<br>\napply ( case_tac \"hd xs\",simp );<br>\nproof (prove): step 0</p>\n</blockquote>\n<p>goal (1 subgoal):</p>\n<ol>\n<li>xs = x # xsa ==&gt; hd xs = T</li>\n</ol>\n<p>which would then be unsolvable.</p>\n<p>If anyone is able to give me some guidance on this, I'd very much appreciate<br>\nit.</p>\n<p>Duncan.</p>",
        "id": 294064331,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660824890
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nSince datatype t is singleton, every expression of that type is <br>\nmathematically equal to T.  It does not matter how other functions, even <br>\nseemingly ``partial'' ones get involved.</p>\n<p>Just two side notes on proofs by cases/simp:</p>\n<p>- case_tac (and any other foo_tac) is only needed when referring <br>\n    implicitly to hidden parameters of the goal state; when eliminating <br>\n    expressions that are visible in the proof text you can use plain <br>\n    \"cases\" instead</p>\n<p>- The Isar command 'by' takes two method arguments: an initial method to <br>\n    split up the problem, and an (optional) terminal method to solve the <br>\n    remaining situation.</p>\n<p>So the canonical Isar one-liner for the above reasoning looks like this:</p>\n<p>lemma \"x = T\" by (cases x) simp</p>\n<p>To solve several goals in the terminal step, methods \"simp_all\" and \"auto\" <br>\nare quite handy.  In this particular case, the terminal step is by <br>\nassumption, which is already implicit in the structure of Isar proofs, so <br>\nyou can actually write it without the terminal method:</p>\n<p>lemma \"x = T\" by (cases x)</p>\n<p>Makarius</p>",
        "id": 294064378,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660824907
    },
    {
        "content": "<p>From: Amine Chaieb &lt;<a href=\"mailto:chaieb@in.tum.de\">chaieb@in.tum.de</a>&gt;<br>\nHi Duncan,</p>\n<p>Duncan Higgins wrote:</p>\n<p>I don't see why this behaviour should<br>\nbe expected. You perform case distinction on \"hd xs\" which is of type t, <br>\nthen the cases you get should only involve the constructors of type t, <br>\ni.e. only the case T. Probably you meant to perform case distinction on <br>\nxs (empty list, or consed list).</p>\n<p>The last goal is provable in this case, since any element of type t is <br>\nHOL-equal to T and hence hd (x#xsa) = x = T.</p>\n<p>Amine.</p>",
        "id": 294064388,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660824911
    },
    {
        "content": "<p>From: Florian Haftmann &lt;<a href=\"mailto:florian.haftmann@informatik.tu-muenchen.de\">florian.haftmann@informatik.tu-muenchen.de</a>&gt;<br>\nHi Duncan,</p>\n<p>Note that code generation only guarantees partial correctness.  So, if<br>\n(!) under code generation a term t evaluates to t', \"t = t'\" is<br>\nderivable in the logic.  Raising a Match exception is still \"correct\"<br>\nand that sense though somehow unsatisfactory.</p>\n<p>Hope this helps<br>\n    Florian<br>\n<a href=\"/user_uploads/14278/aTWnMM1W0DrZQQLX0q5cmcam/florian.haftmann.vcf\">florian.haftmann.vcf</a><br>\n<a href=\"/user_uploads/14278/da0lJ6a04e_c4RHvGYVi6V4-/signature.asc\">signature.asc</a></p>",
        "id": 294064431,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660824935
    }
]