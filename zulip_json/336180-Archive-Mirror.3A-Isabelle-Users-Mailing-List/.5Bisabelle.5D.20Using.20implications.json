[
    {
        "content": "<p>From: Eg Gloor &lt;<a href=\"mailto:egglue@gmail.com\">egglue@gmail.com</a>&gt;<br>\nHello list,</p>\n<p>I'm still picking up Isabelle and thought I might try out some of the axioms<br>\nposted here earlier (which seemed to be consistent). I've made some<br>\namendments just for experimenting. Assume we have:</p>\n<p>axiomatization<br>\nS :: \"real set\" and<br>\nfoo :: \"real =&gt; real\" and<br>\nbar :: \"real =&gt; real\" and<br>\nbax :: \"real =&gt; real\" and<br>\nc :: real<br>\nwhere ax1: \"ALL f g. (ALL x y. x &gt; c &amp; y &gt; c &lt;-&gt; f x = g y) --&gt; f = g\"<br>\nand ax2: \"ALL a b. bax a &gt; c &amp; bax b &gt; c &lt;-&gt; foo (bax a) = bar (bax b)\"</p>\n<p>lemma \"foo = bar\"<br>\nusing ax1 ax2<br>\napply auto</p>\n<p>How come \"x\" and \"y\" can't be instantiated to \"bax a\" and \"bax b\", resp.? If<br>\nax2 was:</p>\n<p>ax2: \"ALL a b. a &gt; c &amp; b &gt; c &lt;-&gt; foo (a) = bar (b)\"</p>\n<p>then that works fine.</p>\n<p>Any help will be much appreciated!</p>\n<p>Regards</p>",
        "id": 294126573,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660841482
    },
    {
        "content": "<p>From: Brian Huffman &lt;<a href=\"mailto:brianh@cs.pdx.edu\">brianh@cs.pdx.edu</a>&gt;<br>\nOnce again, we see that axioms are evil. Your ax1 is already<br>\ninconsistent all by itself:</p>\n<p>lemma \"False\"<br>\nproof -<br>\n  let ?f = \"%x::real. if x &gt; c then (0::real) else 1\"<br>\n  let ?g = \"%x::real. if x &gt; c then (0::real) else 2\"<br>\n  have \"?f = ?g\"<br>\n    by (rule ax1 [rule_format], simp)<br>\n  hence \"?f c = ?g c\"<br>\n    by (rule arg_cong)<br>\n  thus \"False\"<br>\n    by simp<br>\nqed</p>\n<ul>\n<li>Brian</li>\n</ul>",
        "id": 294126592,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660841489
    },
    {
        "content": "<p>From: <a href=\"mailto:egglue@gmail.com\">egglue@gmail.com</a><br>\nI agree with your proof. But then, if it is to define how to <em>approximate</em>  <br>\na function f and a function g to be the same by comparing those x's and y's  </p>\n<blockquote>\n<p>c, then should the = operator be replaced here? It seems the problem here  <br>\nis caused by overloading = with a form of approximated =, right? If so, how  <br>\nshould one go about introducing a new operator, say for approximation?</p>\n</blockquote>\n<p>Thank</p>\n<p>Eg</p>",
        "id": 294126610,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660841495
    }
]