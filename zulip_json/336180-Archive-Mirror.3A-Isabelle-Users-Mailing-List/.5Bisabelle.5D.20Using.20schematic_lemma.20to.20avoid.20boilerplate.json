[
    {
        "content": "<p>From: René Neumann &lt;<a href=\"mailto:rene.neumann@in.tum.de\">rene.neumann@in.tum.de</a>&gt;<br>\nHi,</p>\n<p>I have a case-splitting lemma</p>\n<p>lemma caseA: \"[| X; Y; C1; ...; Cn |] ==&gt; P\"</p>\n<p>where X and Y are premises and C1 to Cn are the different cases. The<br>\nlatter tend to be quite long.</p>\n<p>Now, using the lemmas</p>\n<p>lemma D_X: \"D x ==&gt; X\"<br>\nlemma D_Y: \"D x ==&gt; Y\"</p>\n<p>I want to lift caseA to use D x:</p>\n<p>lemma caseB: \"[| D x; C1; ...; Cn |] ==&gt; P\".</p>\n<p>But I don't want to copy'n'paste the cases, as this a) adds no<br>\ninformation and b) makes it cumbersome to change the original caseA.</p>\n<p>Therefore I tried</p>\n<p>lemmas caseB = caseA[OF D_X D_Y]</p>\n<p>But this leaves me \"[| D x1; D x2; ... \" which is not intended.</p>\n<p>Then I found that I can use schematic_lemma:</p>\n<p>schematic_lemma caseB:<br>\n   assumes \"D x\"<br>\n   shows \"PROP ?C\"<br>\nusing D_X[OF <code>D x</code>] D_Y[OF <code>D Y</code>]<br>\nby (fact caseA)</p>\n<p>I can figure this might be seen as abuse of the schematic_ construct. So<br>\nmy question is: Is this intended to work? Or is this only working by<br>\naccident? Is there a better way of doing it (without having to spell out<br>\nall the cases)?</p>\n<p>Thanks,<br>\nRené</p>",
        "id": 294149207,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660848671
    },
    {
        "content": "<p>From: Brian Huffman &lt;<a href=\"mailto:huffman@in.tum.de\">huffman@in.tum.de</a>&gt;<br>\nHow about proving a lemma that says you can remove a doubled premise,<br>\nand then compose it with your rule:</p>\n<p>lemma undouble:<br>\n  assumes \"PROP P ==&gt; PROP P ==&gt; PROP Q\"<br>\n  shows \"PROP P ==&gt; PROP Q\"<br>\n  by (rule assms)</p>\n<p>lemmas caseB = caseA[OF D_X D_Y, COMP undouble]</p>\n<p>Hope this helps,</p>\n<ul>\n<li>Brian</li>\n</ul>",
        "id": 294149214,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660848678
    },
    {
        "content": "<p>From: René Neumann &lt;<a href=\"mailto:rene.neumann@in.tum.de\">rene.neumann@in.tum.de</a>&gt;<br>\nAm 22.12.2011 11:16, schrieb Brian Huffman:</p>\n<blockquote>\n<p>On Wed, Dec 21, 2011 at 9:54 AM, René Neumann &lt;<a href=\"mailto:rene.neumann@in.tum.de\">rene.neumann@in.tum.de</a>&gt; wrote:</p>\n<blockquote>\n<p>Hi,</p>\n<p>I have a case-splitting lemma</p>\n<p>lemma caseA: \"[| X; Y; C1; ...; Cn |] ==&gt; P\"</p>\n<p>where X and Y are premises and C1 to Cn are the different cases. The<br>\nlatter tend to be quite long.</p>\n<p>Now, using the lemmas</p>\n<p>lemma D_X: \"D x ==&gt; X\"<br>\nlemma D_Y: \"D x ==&gt; Y\"</p>\n<p>I want to lift caseA to use D x:</p>\n<p>lemma caseB: \"[| D x; C1; ...; Cn |] ==&gt; P\".</p>\n<p>But I don't want to copy'n'paste the cases, as this a) adds no<br>\ninformation and b) makes it cumbersome to change the original caseA.</p>\n<p>Therefore I tried</p>\n<p>lemmas caseB = caseA[OF D_X D_Y]</p>\n<p>But this leaves me \"[| D x1; D x2; ... \" which is not intended.</p>\n</blockquote>\n<p>How about proving a lemma that says you can remove a doubled premise,<br>\nand then compose it with your rule:</p>\n<p>lemma undouble:<br>\n  assumes \"PROP P ==&gt; PROP P ==&gt; PROP Q\"<br>\n  shows \"PROP P ==&gt; PROP Q\"<br>\n  by (rule assms)</p>\n<p>lemmas caseB = caseA[OF D_X D_Y, COMP undouble]</p>\n</blockquote>\n<p>Unfortunately, this does not work:</p>\n<p>When displaying the types we see<br>\nthm caseA[OF D_X D_Y]</p>\n<blockquote>\n<p>[|D (?x2::?'b2); D (?x1::?'b1); C1; Cn|] ==&gt; ?P::bool</p>\n</blockquote>\n<p>i.e. the two x's have different types. The complete form with the \"COMP<br>\nundouble\" then throws an error:</p>\n<p>exception TYPE raised (line 109 of \"envir.ML\"): Variable \"?P\" has two<br>\ndistinct types</p>\n<p>But as I now learned about COMP (thanks), I created another solution:</p>\n<p>lemma lift_to_Dx:<br>\n  assumes \"X ==&gt; Y ==&gt; PROP S\"<br>\n  shows \"D x ==&gt; PROP S\"<br>\nusing assms<br>\nby (simp add: D_X D_Y)</p>\n<p>lemmas caseB = caseA[COMP lift_to_Dx]</p>\n<p>This looks better than the solution using schematic_lemma, as it is more<br>\nself-documenting.</p>\n<p>Regards,<br>\nRené</p>",
        "id": 294149246,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660848690
    }
]