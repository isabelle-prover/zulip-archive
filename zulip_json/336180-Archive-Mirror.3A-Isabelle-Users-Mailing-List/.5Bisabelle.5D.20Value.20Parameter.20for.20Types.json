[
    {
        "content": "<p>From: Sebastian Stüber &lt;<a href=\"mailto:sebastian.stueber@t-online.de\">sebastian.stueber@t-online.de</a>&gt;<br>\nDear All,</p>\n<p>I am trying to put as much information as possible into the signature of <br>\nmy definitions.<br>\nIs it possible to give a value-parameter to a type?</p>\n<p>For example the type of natural Numbers less or equal n:</p>\n<p>typedef (n::nat) maxNat = \"{i::nat | i. i≤n}\"</p>\n<p>n should be a parameter for the type. E.g. “5 maxNat” contains the <br>\nelements 1…5.</p>\n<p>This would be really fun, when (simple) operations like “+” can be used <br>\nin the signature of definitions:</p>\n<p>definition add::\"n maxNat ⇒m maxNat ⇒(n+m) maxNat\"</p>\n<p>Thank you for the help,</p>\n<p>Sebastian Stüber</p>",
        "id": 294756601,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661197781
    },
    {
        "content": "<p>From: Andrei Popescu &lt;<a href=\"mailto:A.Popescu@mdx.ac.uk\">A.Popescu@mdx.ac.uk</a>&gt;<br>\nHi Sebastian,</p>\n<p>What you are asking for here is dependent typing, which HOL does not support. There are some tricks to simulate dependent types via polymorphism (see, e.g., section 2 in  <a href=\"https://www.cl.cam.ac.uk/~jrh13/papers/hol05.pdf\">https://www.cl.cam.ac.uk/~jrh13/papers/hol05.pdf</a>), and the Isabelle/HOL type classes help even more here. But these tricks work well only in very specific cases.</p>\n<p>I should add that, for dependent types, fun comes with a price. For example, defining functions like your add::\"n maxNat ⇒m maxNat ⇒(n+m) maxNat\" typically yields proof obligations to ensure the intended type is correct.</p>\n<p>Best wishes,<br>\nAndrei</p>",
        "id": 294756611,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661197786
    }
]