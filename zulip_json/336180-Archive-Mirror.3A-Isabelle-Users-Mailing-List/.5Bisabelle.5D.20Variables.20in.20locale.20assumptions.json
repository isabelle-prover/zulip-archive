[
    {
        "content": "<p>From: Van Staden  Stephan &lt;<a href=\"mailto:stephan.vanstaden@inf.ethz.ch\">stephan.vanstaden@inf.ethz.ch</a>&gt;<br>\nDear all,</p>\n<p>In Isabelle/jEdit 2013-2, the following locale works fine:</p>\n<p>locale Test =<br>\n  fixes pred :: \"'a set ⇒ 'a rel ⇒ bool\"<br>\n  assumes a1: \"pred S R\"<br>\n(*  assumes a2: \"pred R S\" *)<br>\nbegin<br>\nlemma pred_is_UNIV: \"pred A B\"<br>\n  by (metis a1)<br>\nend</p>\n<p>However, uncommenting assumption a2 gives me the following error:</p>\n<p>Type unification failed<br>\nType error in application: incompatible operand type<br>\nOperator:  pred :: 'a set ⇒ ('a × 'a) set ⇒ bool<br>\nOperand:   R :: ('a × 'a) set</p>\n<p>Page 2 of the locale tutorial seems to suggest that this is a bug. Or should I expect this behaviour?</p>\n<p>Thanks in advance!<br>\nStephan</p>",
        "id": 294268081,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660916274
    },
    {
        "content": "<p>From: John Wickerson &lt;<a href=\"mailto:johnwickerson@cantab.net\">johnwickerson@cantab.net</a>&gt;<br>\nThe error seems sensible to me. In a1, R is a relation, and in a2 it's a set. Or maybe I'm missing something?</p>\n<p>John</p>",
        "id": 294268145,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660916284
    },
    {
        "content": "<p>From: Van Staden  Stephan &lt;<a href=\"mailto:stephan.vanstaden@inf.ethz.ch\">stephan.vanstaden@inf.ethz.ch</a>&gt;<br>\nIt's a free variable in each assumption. I would expect the assumptions to be:</p>\n<p>(!!S R. pred S R) /\\ (!!S R. pred R S)</p>\n<p>but what happens is apparently:</p>\n<p>(!!S R. pred S R /\\ pred R S)</p>\n<p>The question is whether the free variables in an assumption are local to the assumption or not. The locale tutorial suggests that they should be local, but maybe I'm wrong.</p>\n<p>Thanks,<br>\nStephan</p>",
        "id": 294268151,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660916286
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nThe quantification in the first form is what happens logically, but <br>\nsyntactically the \"free\" variables share the same scope of the whole <br>\nspecification.  Thus you need to use explicit binders, or evade the <br>\nproblem by renaming variables apart.</p>\n<p>Note that \"Test\" is a bad name for a locale: lower-case is normally used. <br>\nLikewise, theory names are usually capitalized words (in singular), <br>\nseparated by underscore.  (You did not show that in the example, but I <br>\nguess &gt; 50% that you've had a lowercase test.thy here, or was it just<br>\nScratch.thy?)</p>\n<p>Makarius</p>",
        "id": 294268167,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660916293
    },
    {
        "content": "<p>From: bnord &lt;<a href=\"mailto:bnord01@gmail.com\">bnord01@gmail.com</a>&gt;<br>\nDo you know anything about the intended audience for his development <br>\nthat you think the \"default\" Isabelle style is appropriate for him? Or <br>\nis it just the objectively \"best\" style?</p>\n<p>Best<br>\nBenedikt</p>",
        "id": 294268184,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660916299
    },
    {
        "content": "<p>From: Jasmin Blanchette &lt;<a href=\"mailto:jasmin.blanchette@gmail.com\">jasmin.blanchette@gmail.com</a>&gt;<br>\nFor the record: I assume you're perfectly aware that conjunction (which is incidentally written &amp;&amp;&amp; if you want the metalogic version) distributes over universal quantification. And since Isabelle magically transforms universals in schematics, you effectively get independent theorems \"pred ?S ?R\" and \"pred ?R ?S\", only that there's an additional type constraint that all occurrences of R (resp. S) have the same type.</p>\n<p>The locales tutorial is not entirely clear on this point. If \"means\" refers to semantics, what is written there is not inaccurate.</p>\n<p>Jasmin</p>",
        "id": 294268203,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660916305
    },
    {
        "content": "<p>From: Stephan van Staden &lt;<a href=\"mailto:Stephan.vanStaden@inf.ethz.ch\">Stephan.vanStaden@inf.ethz.ch</a>&gt;<br>\nOn 21.02.2014 17:33, Makarius wrote:</p>\n<blockquote>\n<p>On Fri, 21 Feb 2014, Van Staden Stephan wrote:</p>\n<blockquote>\n<p>It's a free variable in each assumption. I would expect the <br>\nassumptions to be:</p>\n<p>(!!S R. pred S R) /\\ (!!S R. pred R S)</p>\n<p>but what happens is apparently:</p>\n<p>(!!S R. pred S R /\\ pred R S)</p>\n<p>The question is whether the free variables in an assumption are local <br>\nto the assumption or not. The locale tutorial suggests that they <br>\nshould be local, but maybe I'm wrong.</p>\n</blockquote>\n<p>The quantification in the first form is what happens logically, but <br>\nsyntactically the \"free\" variables share the same scope of the whole <br>\nspecification.  Thus you need to use explicit binders, or evade the <br>\nproblem by renaming variables apart.</p>\n</blockquote>\n<p>Thanks, okay, got it! But for the record I can add that it's not what I <br>\nexpected.</p>\n<blockquote>\n<p>Note that \"Test\" is a bad name for a locale: lower-case is normally <br>\nused. Likewise, theory names are usually capitalized words (in <br>\nsingular), separated by underscore.  (You did not show that in the <br>\nexample, but I guess &gt; 50% that you've had a lowercase test.thy here, <br>\nor was it just<br>\nScratch.thy?)</p>\n</blockquote>\n<p>Sorry, just wrote a quick and dirty example to show what I found <br>\nsurprising. I don't know what it has to do with the issue really, but I <br>\nstored the example in Test.thy.</p>\n<p>Thanks again,<br>\nStephan</p>",
        "id": 294268232,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660916317
    },
    {
        "content": "<p>From: Stephan van Staden &lt;<a href=\"mailto:Stephan.vanStaden@inf.ethz.ch\">Stephan.vanStaden@inf.ethz.ch</a>&gt;<br>\nIt's this type constraint that surprised me. The post by Makarius<br>\nexplains it, but as a user I would prefer to have complete separation.<br>\nIs there a compelling reason why it's implemented as it is?</p>\n<p>Thanks,<br>\nStephan</p>",
        "id": 294268239,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660916323
    },
    {
        "content": "<p>From: Peter Lammich &lt;<a href=\"mailto:lammich@in.tum.de\">lammich@in.tum.de</a>&gt;<br>\nI frequently run into another instance of this problem, when writing<br>\nsomething like:</p>\n<p>lemma foo:<br>\n  \"x &amp; y --&gt; x\"<br>\n  \"x = y --&gt; f x = f y\"</p>\n<p>Note that foo(2) is: \"?x::bool = ?y ...\", which is usually not<br>\nwhat was intended.</p>",
        "id": 294268267,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660916342
    },
    {
        "content": "<p>From: Lawrence Paulson &lt;<a href=\"mailto:lp15@cam.ac.uk\">lp15@cam.ac.uk</a>&gt;<br>\nClearly every instance of a variable in a single formula must have the same type, and it’s natural to expect that every instance in a list of formulas should also have the same type. The alternative would be very confusing for readers, also in informal mathematics.</p>\n<p>Larry Paulson</p>",
        "id": 294268279,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660916348
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nThe observation by Larry is correct.  He probably still remembers the time <br>\nwhen type-inference would only range over each term separately, causing <br>\nmany strange effects and surprises.</p>\n<p>When you write a simultaneous statement as above, or a long statement with <br>\nfixes/assumes/shows, the scope of free variables and their types ranges <br>\nover the whole clause. This is the intended way -- we have required many <br>\nyears to get there.</p>\n<p>A slightly different situation occurs in conceptually separate scopes that <br>\nhappen to be written with free variables that share the type-inference <br>\nscope, but are logically separate.  There are two main situations for <br>\nthis: the 'obtains' statement with several disjuctive branches, and the <br>\nimplicit quantification of locale expressions that were encountered here. <br>\nHere I would prefer to keep type-information separate, according to the <br>\nlogical structure.</p>\n<p>When I introduced the latter locale convenience about 12 years ago, I was <br>\naware of the snag with type-inference, and also aware of the lack of any <br>\nsystematic documentation of type-inference in the Isabelle manuals (even <br>\nuntil today). Approximately every 5 years some user stumbles over that <br>\ndetail.  The manuals could be improved at some point, but it is probably <br>\nmore helpful to give more feedback about scopes and type-inference errors <br>\nin the Prover IDE.</p>\n<p>Makarius</p>",
        "id": 294268291,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660916354
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nLocales in capitals and theories in lower-case probably stems from Java <br>\n(classes vs. packages), but the world is bigger than Java.</p>\n<p>The objectively best style for Isabelle is the one devised by the people <br>\nwho implemented qualified name spaces and locales, type classes and more <br>\nover the years.  By observing the very simple scheme of Theory.locale.item <br>\nor Theory.class.item, you get more robust name space accesses for free <br>\n(there is no cost to follow a simple convention).</p>\n<p>Just a few days ago, I have mentally revisited the situation for qualified <br>\ntheory names (by the session name, which is also capitalized), and <br>\ncompletion in the Prover IDE for all these names.  So that is still <br>\nrelevant, even though people tend to become forgetful.  Maybe I should <br>\nmake the Prover IDE inform the user about naming conventions, just to save <br>\ntime explaining them again and again.</p>\n<p>Makarius</p>",
        "id": 294268303,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660916360
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nFeasibility and complexity of implementation.  In order to move locales <br>\nonce again some steps forward, one should probably give up rarely used old <br>\nfeatures like 'defines' and 'constrains' (which have heavy weight and <br>\nlittle real applications).</p>\n<p>Makarius</p>",
        "id": 294268327,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660916366
    },
    {
        "content": "<p>From: Van Staden  Stephan &lt;<a href=\"mailto:stephan.vanstaden@inf.ethz.ch\">stephan.vanstaden@inf.ethz.ch</a>&gt;<br>\nThanks for the explanations. It seems wise to keep it the way it is.</p>\n<p>All the best,<br>\nStephan</p>",
        "id": 294268350,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660916373
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nThe 'defines' element predates proper 'definition (in loc)'. Having <br>\naxiomatic specifications that are intertwined with quasi-definitional ones <br>\nis conceptually very complex, and actually a mess.  I know that people <br>\nsometimes do that, but one would have to look very closely if that is <br>\nreally required: normally you should be able to pull out the auxiliary <br>\ndefinitions before the locale specifications.  If we would have <br>\nunderstood localized definitions already in 1999, this problem would not <br>\nexist, because 'defines' would have never been introduced.</p>\n<p>The 'constrains' element is easier to get rid of.  I would like to see <br>\nsome constructive proofs where you \"need to constrain types\", as you say. <br>\nThis is usually just a workaround to specify locale type arguments, but if <br>\nthat would be supported directly, the need would go away.</p>\n<p>Anyway, we have just the default situation of inertia: after many years of <br>\ngetting used to some not-quite-right feature, users find it hard to go <br>\nbeyond it.  This is why certain problems cannot be solved easily, and we <br>\nneed to explain new users why some things are a bit odd.</p>\n<p>Makarius</p>",
        "id": 294268388,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660916391
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nMaybe you have actually missed the important locale expression <br>\nimprovements by Clemens Ballarin from Isabelle2009.  See the NEWS, e.g. <br>\nthis one:</p>\n<p>- In locale expressions, instantiation replaces renaming.  Parameters<br>\n   must be declared in a for clause.  To aid compatibility with previous<br>\n   parameter inheritance, in locale declarations, parameters that are not<br>\n   'touched' (instantiation position \"_\" or omitted) are implicitly added<br>\n   with their syntax at the beginning of the for clause.</p>\n<p>In most situations a locale expression suffix \"for x :: T\" can be used to <br>\ninstantiate types in imports.  I had cleaned up AFP in this respect <br>\nalready some years ago, but in various newer entries old 'constrains' <br>\nseem to have come back.  Time for spring cleaning?</p>\n<p>Makarius</p>",
        "id": 294268457,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660916403
    },
    {
        "content": "<p>From: Gerwin Klein &lt;<a href=\"mailto:Gerwin.Klein@nicta.com.au\">Gerwin.Klein@nicta.com.au</a>&gt;<br>\nActually, yes this may do it. I’ve used it for new proofs, but somehow managed not to make the connection.</p>\n<p>Let me try this out on the old proofs.</p>\n<p>Cheers,<br>\nGerwin</p>\n<hr>\n<p>The information in this e-mail may be confidential and subject to legal professional privilege and/or copyright. National ICT Australia Limited accepts no liability for any damage caused by this email or its attachments.</p>",
        "id": 294268478,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660916409
    },
    {
        "content": "<p>From: Andreas Lochbihler &lt;<a href=\"mailto:andreas.lochbihler@inf.ethz.ch\">andreas.lochbihler@inf.ethz.ch</a>&gt;<br>\nI know one use case where constrains is more convenient than parameter instantiation with <br>\nfor, namely to revert the renaming of type variables. I want type variables to have <br>\nsensible names like 'state, not just 'a, 'b, 'c, 'd. Unfortunately, locale inheritance <br>\nalways renames them to 'a, 'b, 'c, etc., so I rename them back. Of course, this can be <br>\ndone with a for clause, too. But a for clause drops the mixfix syntax associated with the <br>\nparameter, so would have to redeclare it; with constrains, I need not. And for consistency <br>\nreasons, I prefer not to redeclare notation if it's not necessary. And if locale <br>\ninheritance did not rename type variables, I'd not need constrains at all and be much happier.</p>\n<p>Andreas</p>",
        "id": 294268494,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660916416
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nOn Tue, 25 Feb 2014, Andreas Lochbihler wrote:</p>\n<blockquote>\n<p>On 24/02/14 23:05, Makarius wrote:</p>\n<blockquote>\n<p>The 'constrains' element is easier to get rid of.  I would like to see<br>\n some constructive proofs where you \"need to constrain types\", as you<br>\n say. This is usually just a workaround to specify locale type<br>\n arguments, but if that would be supported directly, the need would go<br>\n away.</p>\n</blockquote>\n</blockquote>\n<blockquote>\n<p>I know one use case where constrains is more convenient than parameter <br>\ninstantiation with for, namely to revert the renaming of type variables. <br>\nI want type variables to have sensible names like 'state, not just 'a, <br>\n'b, 'c, 'd. Unfortunately, locale inheritance always renames them to 'a, <br>\n'b, 'c, etc., so I rename them back.</p>\n</blockquote>\n<p>This is an old misunderstanding: there is no \"locale inheritance\", but <br>\nlocale import within a certain language of locale expressions.  That works <br>\nvia Hindley-Milner type-inference, so the result typing is most-general <br>\nand in canonical form.  Whence the (fortunate) renaming. Type-inference <br>\nwas not there in very early versions of locales, which made them hardly <br>\nusable, and that was indeed unfortunate.</p>\n<blockquote>\n<p>Of course, this can be done with a for clause, too. But a for clause <br>\ndrops the mixfix syntax associated with the parameter, so would have to <br>\nredeclare it; with constrains, I need not. And for consistency reasons, <br>\nI prefer not to redeclare notation if it's not necessary. And if locale <br>\ninheritance did not rename type variables, I'd not need constrains at <br>\nall and be much happier.</p>\n</blockquote>\n<p>Nothing of this is new in the argument, we've had that already several <br>\nyears ago.</p>\n<p>What you merely need here is some way to specified the implicit type <br>\narguments of a locale explicitly.  That would also help in situations of <br>\n\"hidden polymorphism\", i.e. locales with excess type parameters that are <br>\nnot mentioned in any term parameter.  The existing implementation is a bit <br>\nweak here: it emits a warning and leaves the user confused, hoping that <br>\nnothing bad happens later.</p>\n<p>These fine-points could have been sorted out many years ago, if there <br>\nwould not be this \"lock-in\" effect of early aspects of an implementation <br>\nthat get stuck because users get used to them.</p>\n<p>Makarius</p>",
        "id": 294268686,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660916477
    },
    {
        "content": "<p>From: Gerwin Klein &lt;<a href=\"mailto:Gerwin.Klein@nicta.com.au\">Gerwin.Klein@nicta.com.au</a>&gt;<br>\nJust to confirm, “for” works fine in my old example. No constraints from here, then..</p>\n<p>Cheers,<br>\nGerwin</p>\n<hr>\n<p>The information in this e-mail may be confidential and subject to legal professional privilege and/or copyright. National ICT Australia Limited accepts no liability for any damage caused by this email or its attachments.</p>",
        "id": 294272162,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660917563
    }
]