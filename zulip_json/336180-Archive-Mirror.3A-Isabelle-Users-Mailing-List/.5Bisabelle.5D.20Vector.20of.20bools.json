[
    {
        "content": "<p>From: Steve W &lt;<a href=\"mailto:s.wong.731@gmail.com\">s.wong.731@gmail.com</a>&gt;<br>\nHi,</p>\n<p>I see that one can use real_vector to construct a vector of reals, but is<br>\nthere a way to construct a vector of boolean values, e.g.,<br>\n&lt;true,false,false...&gt;?</p>\n<p>Thanks a lot.</p>\n<p>Steve</p>",
        "id": 294133366,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660843593
    },
    {
        "content": "<p>From: Brian Huffman &lt;<a href=\"mailto:brianh@cs.pdx.edu\">brianh@cs.pdx.edu</a>&gt;<br>\nOn Fri, Mar 25, 2011 at 10:46 AM, Steve W &lt;<a href=\"mailto:s.wong.731@gmail.com\">s.wong.731@gmail.com</a>&gt; wrote:</p>\n<blockquote>\n<p>I see that one can use real_vector to construct a vector of reals,</p>\n</blockquote>\n<p>First of all, remember that real_vector is a <em>type class</em>, not a *type<br>\nconstructor*. The real_vector class merely classifies types that<br>\nsupport scalar multiplication by real numbers.</p>\n<p>To actually \"construct a vector of reals\", you will need to use some<br>\nspecific type constructor that is an <em>instance</em> of the real_vector<br>\nclass. For example, tuples like \"real * real\" or finite cartesian<br>\nproducts like \"real ^ 'n\".</p>\n<blockquote>\n<p>but is<br>\nthere a way to construct a vector of boolean values, e.g.,<br>\n&lt;true,false,false...&gt;?</p>\n</blockquote>\n<p>That depends. What kinds of operations on vectors of booleans do you require?</p>\n<p>You could use the finite cartesian product \"bool ^ 'n\" from<br>\nMultivariate_Analysis, but that library doesn't provide many<br>\noperations that work with element types besides \"real\", \"complex\",<br>\netc.</p>\n<p>Another possibility is to use \"bool list\". The library provides lots<br>\nof list operations, but unlike type \"bool ^ 'n\", lists are not<br>\nguaranteed to all have the same length.</p>\n<p>A third possibility, if you want vectors of a small constant size, is<br>\nto use ordinary tuples like \"bool * bool * bool\".</p>\n<p>I might be able to help more if you tell me more about what you are<br>\ntrying to do.</p>\n<ul>\n<li>Brian</li>\n</ul>",
        "id": 294133389,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660843599
    },
    {
        "content": "<p>From: Thomas Sewell &lt;<a href=\"mailto:Thomas.Sewell@nicta.com.au\">Thomas.Sewell@nicta.com.au</a>&gt;<br>\nA third variant that should be mentioned is to use the word library, which provides a formalisation of machine-word. The 32-bit word type used in your CPU is equivalent to a vector of 32 bools. The word library allows you to construct such a vector for any fixed width.</p>\n<blockquote>\n<p>From memory you need to build the HOL-Word image and then import Word to get easy access to the word operations.</p>\n</blockquote>\n<p>Given \"x :: 32 word\" you can query positions in the word with \"x !! 1\", \"x !! 2\" etc and also do the same kind of 32-bit arithmetic your CPU does with \"(x + 17) * 22\" etc. This includes the \"x AND 1\", \"x OR 12\", \"x XOR 13\" operators which translate into logical operations at every point in the vector.</p>\n<p>Yours,<br>\n     Thomas.</p>\n<hr>\n<p>From: <a href=\"mailto:cl-isabelle-users-bounces@lists.cam.ac.uk\">cl-isabelle-users-bounces@lists.cam.ac.uk</a> [cl-isabelle-users-bounces@lists.cam.ac.uk] On Behalf Of Brian Huffman [brianh@cs.pdx.edu]<br>\nSent: Saturday, March 26, 2011 8:30 AM<br>\nTo: Steve W<br>\nCc: isabelle-users<br>\nSubject: Re: [isabelle] Vector of bools</p>\n<p>On Fri, Mar 25, 2011 at 10:46 AM, Steve W &lt;<a href=\"mailto:s.wong.731@gmail.com\">s.wong.731@gmail.com</a>&gt; wrote:</p>\n<blockquote>\n<p>I see that one can use real_vector to construct a vector of reals,</p>\n</blockquote>\n<p>First of all, remember that real_vector is a <em>type class</em>, not a *type<br>\nconstructor*. The real_vector class merely classifies types that<br>\nsupport scalar multiplication by real numbers.</p>\n<p>To actually \"construct a vector of reals\", you will need to use some<br>\nspecific type constructor that is an <em>instance</em> of the real_vector<br>\nclass. For example, tuples like \"real * real\" or finite cartesian<br>\nproducts like \"real ^ 'n\".</p>\n<blockquote>\n<p>but is<br>\nthere a way to construct a vector of boolean values, e.g.,<br>\n&lt;true,false,false...&gt;?</p>\n</blockquote>\n<p>That depends. What kinds of operations on vectors of booleans do you require?</p>\n<p>You could use the finite cartesian product \"bool ^ 'n\" from<br>\nMultivariate_Analysis, but that library doesn't provide many<br>\noperations that work with element types besides \"real\", \"complex\",<br>\netc.</p>\n<p>Another possibility is to use \"bool list\". The library provides lots<br>\nof list operations, but unlike type \"bool ^ 'n\", lists are not<br>\nguaranteed to all have the same length.</p>\n<p>A third possibility, if you want vectors of a small constant size, is<br>\nto use ordinary tuples like \"bool * bool * bool\".</p>\n<p>I might be able to help more if you tell me more about what you are<br>\ntrying to do.</p>\n<ul>\n<li>Brian</li>\n</ul>\n<p>The information in this e-mail may be confidential and subject to legal professional privilege and/or copyright. National ICT Australia Limited accepts no liability for any damage caused by this email or its attachments.</p>",
        "id": 294133441,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660843611
    },
    {
        "content": "<p>From: Steve W &lt;<a href=\"mailto:s.wong.731@gmail.com\">s.wong.731@gmail.com</a>&gt;<br>\nI see. So if I want to try, say, \"real ^ 'n\", which libraries do I need to<br>\nimport? I've tried \"HOL/Multivariate_Analysis/Cartesian_Euclidean_Space\",<br>\nbut it takes a very long time to load the import.</p>\n<p>Thanks<br>\nSteve</p>",
        "id": 294133497,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660843630
    },
    {
        "content": "<p>From: Johannes HÃ¶lzl &lt;<a href=\"mailto:hoelzl@in.tum.de\">hoelzl@in.tum.de</a>&gt;<br>\nThe intended use is to build the HOL-Multivariate_Analysis image:</p>\n<p>cd ..../isabelle/src/HOL<br>\n  isabelle make HOL-Multivariate_Analysis</p>\n<p>and then select it in ProofGeneral with the Emacs menu:</p>\n<p>Isabelle / Logics / Multivariate_Analysis</p>\n<p>the building of multivariate analysis takes a couple of minutes but it<br>\nis just needed once. Then you just need to import Multivariate_Analysis.</p>\n<p>Greetings,<br>\n  Johannes</p>",
        "id": 294133545,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660843642
    },
    {
        "content": "<p>From: <a href=\"mailto:s.wong.731@gmail.com\">s.wong.731@gmail.com</a><br>\nGreat! That worked. Thanks.</p>\n<p>Steve</p>",
        "id": 294133563,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660843648
    }
]