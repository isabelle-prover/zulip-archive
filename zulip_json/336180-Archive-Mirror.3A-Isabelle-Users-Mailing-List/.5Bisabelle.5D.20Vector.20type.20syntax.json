[
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nYes, probably.</p>\n<p>Note that this hard-wired policy comes from the following changeset by<br>\nJohannes Hölzl:</p>\n<p>changeset:   34290:1edf0f223c6e<br>\nuser:        hoelzl<br>\ndate:        Thu Jan 07 17:43:35 2010 +0100<br>\nfiles:       src/HOL/Multivariate_Analysis/Finite_Cartesian_Product.thy<br>\ndescription:<br>\nadded syntax translation to automatically add finite typeclass to index<br>\ntype of cartesian product type</p>\n<p>Makarius</p>",
        "id": 294725604,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661186311
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nOn 05/02/18 12:57, Lawrence Paulson wrote:</p>\n<blockquote>\n<blockquote>\n<p>On 1 Feb 2018, at 12:57, Dominique Unruh &lt;<a href=\"mailto:unruh@ut.ee\">unruh@ut.ee</a>&gt; wrote:</p>\n<p>The constraints imposed by ^ are relatively half-hearted in any case. The following types are accepted:</p>\n<p>typ \"real^real\"<br>\ntype_synonym 'a id = \"'a\"<br>\ntyp \"real^('n::{finite,wellorder} id)\"<br>\ntyp \"real^('n::{wellorder} id)\"</p>\n<p>The reason is that the parse translation adds the ::{finite} constraint only if the second argument to ^ is a type variable.</p>\n<p>It feels to me that no enforcement might be better than such half-hearted enforcement.</p>\n</blockquote>\n</blockquote>\n<p>I usually also prefer a clear situation, without too much builtin magic<br>\n(here the silent addition of a sort constraint due to concrete syntax).<br>\nBut this appears to be infeasible now ...</p>\n<blockquote>\n<p>The following is not allowed: as the second occurrence of ’n is assigned a different sort from the first. This is not how sort assignment normally works, so I think we should see if there is some way to obtain more natural behaviour without forcing hundreds of theorem statements to be altered.</p>\n</blockquote>\n<p>Systematic counting with the included ch-vec_syntax in<br>\nIsabelle/5348bea4accd + AFP/e9f2114df805 (excluding very_slow sessions)<br>\nyields the following results:</p>\n<p>3273 T ^ 'a (type variable)<br>\n2920 T ^ U (other type)<br>\n6193 total</p>\n<blockquote>\n<p>fixes f :: \"real^'n::{finite,wellorder} ⇒ real^'n\"</p>\n</blockquote>\n<p>Maybe the following ch-dummy_sort is already sufficient (cf.<br>\nIsabelle/17874d43d3b3). With that you can write:</p>\n<p>fixes f :: \"real^'n::{finite,wellorder} ⇒ real^'n::_\"</p>\n<p>The dummmy sort looks syntactically like a sort constraint, and the vec<br>\nsyntax translation will not add anything. Later the sort disappears, and<br>\ntype inference proceeds as usual.</p>\n<p>Makarius<br>\n<a href=\"/user_uploads/14278/bd1ty_1pBB2aFiCex-Ub2qyj/ch-vec_syntax\">ch-vec_syntax</a><br>\n<a href=\"/user_uploads/14278/yGun_pUBDzLKgtIWVjCM8d1O/ch-dummy_sort\">ch-dummy_sort</a></p>",
        "id": 294725660,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661186328
    },
    {
        "content": "<p>From: Johannes Hölzl &lt;<a href=\"mailto:johannes.hoelzl@gmx.de\">johannes.hoelzl@gmx.de</a>&gt;<br>\nAs fas as I remember this changeset is from a time when we didn't have a euclidean_space type class.<br>\nSince then most occurrences of \"'a ^ 'n\" are replaced by \"'a :: euclidean_space\" in HOL-Analysis.<br>\nI'm okay if somebody wants to change this again.</p>\n<p>Also I'm not sure what's the situation in the AFP (espeially Joses entries) and IsarFoR which uses<br>\nsome finite dimensional modules (i.e. 'a::ring ^ 'n) .</p>\n<ul>\n<li>Johannes</li>\n</ul>",
        "id": 294726064,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661186445
    },
    {
        "content": "<p>From: \"Thiemann, Rene\" &lt;<a href=\"mailto:Rene.Thiemann@uibk.ac.at\">Rene.Thiemann@uibk.ac.at</a>&gt;<br>\nDear all,</p>\n<p>for us the change will most likely not dramatic, however it will also have<br>\nsome impact on ML-code. I believe the most demanding AFP-entry from our side<br>\nis Perron-Frobenius, where we automatically generate types via local type definitions<br>\nin order to transfer type-based matrix-theorems to set-based ones. If this <br>\nmachinery can be adapted, then I see no problem from our side.</p>\n<p>Cheers,<br>\nRené</p>",
        "id": 294726262,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661186511
    },
    {
        "content": "<p>From: Lawrence Paulson &lt;<a href=\"mailto:lp15@cam.ac.uk\">lp15@cam.ac.uk</a>&gt;<br>\nThe following is not allowed: as the second occurrence of ’n is assigned a different sort from the first. This is not how sort assignment normally works, so I think we should see if there is some way to obtain more natural behaviour without forcing hundreds of theorem statements to be altered.</p>\n<p>fixes f :: \"real^'n::{finite,wellorder} ⇒ real^'n\"</p>",
        "id": 294726513,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661186591
    },
    {
        "content": "<p>From: Lawrence Paulson &lt;<a href=\"mailto:lp15@cam.ac.uk\">lp15@cam.ac.uk</a>&gt;<br>\nVector types, similar to those in HOL Light, have been available for some time: real^’n abbreviates (real, 'n) vec, where ’n is some finite index type. But a number of theorems require an ordering on that type, so we sometimes see types such as (real, 'n::{finite,wellorder}) vec. Such types cannot be written as real^’n because that syntax constrains the sort on ’n to {finite}.</p>\n<p>What can we do about this? Is it possible to separate the ‘a^’n syntax from any specific sort constraints on the type ’n? And if not, should it use the sort constraint {finite,wellorder} instead? Every finite type can be well ordered, even without the axiom of choice, so the sort constraint {finite} is not really more general than {finite,wellorder}.</p>\n<p>Larry Paulson</p>",
        "id": 294726883,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661186710
    },
    {
        "content": "<p>From: Dominique Unruh &lt;<a href=\"mailto:unruh@ut.ee\">unruh@ut.ee</a>&gt;<br>\nThe constraints imposed by ^ are relatively half-hearted in any case. The<br>\nfollowing types are accepted:</p>\n<p>typ \"real^real\"<br>\ntype_synonym 'a id = \"'a\"<br>\ntyp \"real^('n::{finite,wellorder} id)\"<br>\ntyp \"real^('n::{wellorder} id)\"</p>\n<p>The reason is that the parse translation adds the ::{finite} constraint<br>\nonly if the second argument to ^ is a type variable.</p>\n<p>It feels to me that no enforcement might be better than such half-hearted<br>\nenforcement.</p>\n<p>Best wishes,<br>\nDominique.</p>",
        "id": 294727191,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661186775
    }
]