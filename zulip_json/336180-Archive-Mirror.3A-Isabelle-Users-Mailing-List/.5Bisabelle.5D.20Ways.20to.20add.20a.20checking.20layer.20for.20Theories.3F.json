[
    {
        "content": "<p>From: \"Yannick Duchêne (Hibou57 )\" &lt;<a href=\"mailto:yannick_duchene@yahoo.fr\">yannick_duchene@yahoo.fr</a>&gt;<br>\nHi all,</p>\n<p>Just out of curiosity, and because I guess this may be worth in some  <br>\ncircumstances, I wonder if there exist some recommended ways to add custom  <br>\nobligations to Theory design and make them checked. I mean kind of style  <br>\ncheck and design rules check.</p>\n<p>As an example, one may want to require all Theories to not contain any  <br>\npartial functions. Is there a way to do this without externally re-parsing  <br>\nand re-interpreting *.thy files? (which would be too error‑prone by the  <br>\nway). Do the Isabelle system have provision to invoke such a layer,  <br>\nfeeding it with a structure corresponding to the Theory interpretation?</p>\n<p>Hope my question is clear enough (I'm not sure). If not, just ask me to  <br>\nreword it.</p>\n<p>With thanks</p>",
        "id": 294221558,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660897768
    },
    {
        "content": "<p>From: Gottfried Barrow &lt;<a href=\"mailto:gottfried.barrow@gmx.com\">gottfried.barrow@gmx.com</a>&gt;<br>\nYannick,</p>\n<p>I'll do the easy part and point out page 14 of prog-prove.pdf:</p>\n<p>\"...all HOL functions must be total. This simplifies the logic—terms are <br>\nalways defined—but means that recursive functions must terminate.\"</p>\n<p>You probably have other examples in mind, and maybe you're not using HOL.</p>\n<p>You use the word \"system\"; the document \"system.pdf\" is probably what <br>\nwould describe such a command. It tells us how to run Isabelle programs <br>\nthat are available, such as \"isabelle jedit\" and \"isabelle make\".</p>\n<p>I think what you're wanting falls under the general category of <br>\npre-processing one or more .thy files before handing it over to the <br>\nIsabelle prover (but maybe that's not what you're talking about).</p>\n<p>With any programming language, if you pull out a function another <br>\nfunction is depending on, the compiler is going to choke, and if you <br>\nmake a change to a library that other files are depending on, the <br>\ndependent files will have to be recompiled, but it seems to me that with <br>\nIsabelle, there's a level of paranoia that doesn't exist with <br>\nprogramming languages.</p>\n<p>If the programming language lets you compile a bogus program, that's <br>\nyour problem. If Isabelle lets something by that's not logically valid, <br>\ntheir reputation goes down the tubes.</p>\n<p>You can do any pre-processing you want on a group of files, but to make <br>\nit worth feeding to the Isabelle prover, you'd have to do a ton of <br>\ndependency checks and more, where the \"dependency checks and more\" is <br>\npretty much what the Isabelle prover does. It sounds to me that only a <br>\nuser would know enough to make lots of changes to a bunch of files <br>\nbefore feeding them to the prover, and have something worth working with.</p>\n<p>There could be something out there like that. I haven't seen anything <br>\nlike that in system.pdf.</p>\n<p>Regards,<br>\nGB</p>",
        "id": 294221574,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660897780
    },
    {
        "content": "<p>From: \"Yannick Duchêne (Hibou57 )\" &lt;<a href=\"mailto:yannick_duchene@yahoo.fr\">yannick_duchene@yahoo.fr</a>&gt;<br>\nNot that much, I “imports Main”, and that way it's easy to have a “fun”  <br>\nwhich does not cover all cases, with no error and just a warning.</p>",
        "id": 294221598,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660897793
    },
    {
        "content": "<p>From: Lars Noschinski &lt;<a href=\"mailto:noschinl@in.tum.de\">noschinl@in.tum.de</a>&gt;<br>\nThese functions are nevertheless total; you just don't know anything <br>\nabout the values for the uncovered case.</p>\n<p>-- Lars</p>",
        "id": 294221725,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660897842
    }
]