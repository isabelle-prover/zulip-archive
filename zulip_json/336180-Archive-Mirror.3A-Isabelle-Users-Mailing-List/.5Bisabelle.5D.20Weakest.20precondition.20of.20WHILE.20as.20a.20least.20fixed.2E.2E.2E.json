[
    {
        "content": "<p>From: Piotr Trojanek &lt;<a href=\"mailto:piotr.trojanek@gmail.com\">piotr.trojanek@gmail.com</a>&gt;<br>\nHi David,</p>\n<p>I am aware that I should not start from the first equation when<br>\nderiving the second one. That is why I was starting from big-step<br>\nsemantics (from which also the first equation is derived).</p>\n<p>-- Piotr</p>",
        "id": 294328858,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660929546
    },
    {
        "content": "<p>From: David Cock &lt;<a href=\"mailto:david.cock@inf.ethz.ch\">david.cock@inf.ethz.ch</a>&gt;<br>\nPiotr,<br>\n   OK, then from the first equation, you have that the weakest <br>\nprecondition of the loop is a fixed point of the body (combined with the <br>\nguard).  Depending on how you've defined 'weakest precondition', <br>\nshouldn't you be able to appeal to the fact that it <em>is</em> the weakest to <br>\nshow that you must have the <em>least</em> fixed point?  You just need to <br>\nappeal to the properties of the complete lattice of predicates.</p>\n<p>David</p>",
        "id": 294328878,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660929550
    },
    {
        "content": "<p>From: Piotr Trojanek &lt;<a href=\"mailto:piotr.trojanek@gmail.com\">piotr.trojanek@gmail.com</a>&gt;<br>\nDavid,</p>\n<p>It was easy to show that the argument of lfp is a fixed point, but I<br>\ncannot show that it is the <em>least</em> one.</p>\n<p>My 'weakest precondition' is defined in a standard way, i.e. like the<br>\n\"wpt\" in theory file for Concrete Semantics section 12.5.</p>\n<p>Any extra hints? Maybe some textbook or a theory file?</p>\n<p>Regards,<br>\nPiotr</p>",
        "id": 294328906,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660929562
    },
    {
        "content": "<p>From: David Cock &lt;<a href=\"mailto:david.cock@inf.ethz.ch\">david.cock@inf.ethz.ch</a>&gt;<br>\nPiotr,<br>\n   Give me a little bit, and I'll forward you something.</p>\n<p>David</p>",
        "id": 294328923,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660929569
    },
    {
        "content": "<p>From: David Cock &lt;<a href=\"mailto:david.cock@inf.ethz.ch\">david.cock@inf.ethz.ch</a>&gt;<br>\nOK, your immediate problem is that wp in the Concrete Semantics book is the weakest liberal precondition i.e. gfp rather than lfp. The proof structure will be identical, just a mirror image.</p>\n<p>David.</p>",
        "id": 294328949,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660929577
    },
    {
        "content": "<p>From: Piotr Trojanek &lt;<a href=\"mailto:piotr.trojanek@gmail.com\">piotr.trojanek@gmail.com</a>&gt;<br>\nDear experts,</p>\n<p>I am experimenting with mechanized semantics of a simple imperative<br>\nprogramming language. I have already seen a dozen of mechanizations<br>\nwhich start from big-step semantics and derive the weakest<br>\nprecondition of WHILE expressed as a recursive equation (which is then<br>\nused to derive Hoare rules).</p>\n<p>Instead, I would like to derive the weakest precondition of WHILE<br>\nexpressed as a least fixed point (which is more useful in the<br>\nrefinement calculus).</p>\n<p>I was trying to prove this derivation, but always ended in a loop. Any advice?</p>",
        "id": 294633494,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661159227
    },
    {
        "content": "<p>From: Peter Lammich &lt;<a href=\"mailto:lammich@in.tum.de\">lammich@in.tum.de</a>&gt;<br>\nHi Piotr.</p>\n<p>Have you looked at this AFP-entry:<br>\n<a href=\"http://afp.sourceforge.net/entries/MonoBoolTranAlgebra.shtml\">http://afp.sourceforge.net/entries/MonoBoolTranAlgebra.shtml</a></p>\n<p>in particular the while-statement in Statement.thy might be interesting<br>\nfor you.</p>",
        "id": 294633530,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661159241
    },
    {
        "content": "<p>From: Gerwin Klein &lt;<a href=\"mailto:Gerwin.Klein@nicta.com.au\">Gerwin.Klein@nicta.com.au</a>&gt;<br>\nHi Piotr,</p>\n<p>is the fixpoint formulation in chapter 11 of <a href=\"http://concrete-semantics.org\">http://concrete-semantics.org</a> what you are after?</p>\n<p>Traditionally, Hoare Logic and weakest precondition calculi do not really derive a weakest precondition for While, but rely on user-provided invariants instead, but I might be misunderstanding what you mean by weakest precondition.</p>\n<p>Cheers,<br>\nGerwin</p>\n<hr>\n<p>The information in this e-mail may be confidential and subject to legal professional privilege and/or copyright. National ICT Australia Limited accepts no liability for any damage caused by this email or its attachments.</p>",
        "id": 294633547,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661159250
    },
    {
        "content": "<p>From: Piotr Trojanek &lt;<a href=\"mailto:piotr.trojanek@gmail.com\">piotr.trojanek@gmail.com</a>&gt;<br>\nThank you both for your answers.</p>\n<p>I am familiar with chapter 11 of Concrete Semantics. In section 12.3<br>\nyou have (page 205):</p>\n<p>wp (WHILE b DO c) Q = (\\s. if bval b s then wp (c ;; WHILE b DO c) Q s else Q s)</p>\n<p>but I need:</p>\n<p>wp (WHILE b DO c) Q = lfp (\\w. b AND wp c w OR NOT b AND q)</p>\n<p>(where AND, OR and NOT are lifted Boolean operators). I was trying to<br>\nget it from the denotational equation with lfp but failed. Maybe I<br>\nshould try harder?</p>\n<p>The second formulation is equivalent to that from HOL Light tutorial<br>\n(section 17.2, while_def).</p>\n<p>I am still studying the AFP entry suggested by Peter...</p>",
        "id": 294633567,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661159260
    },
    {
        "content": "<p>From: David Cock &lt;<a href=\"mailto:david.cock@inf.ethz.ch\">david.cock@inf.ethz.ch</a>&gt;<br>\nPiotr,<br>\n   One problem that you're likely to run into here is that the first <br>\nequation that you quote is not definitional: It's an equality that holds <br>\nfor the denotation that you're after, but also for (potentially <br>\ninfinitely many) others, every fixed point of the loop body, in fact.  <br>\nTo go from the first equation to the second requires you to make a <br>\nchoice - to state that you want to interpret a loop as the <em>least</em> fixed <br>\npoint of its body.  This is not implied, it's sometimes useful to take <br>\nthe greatest fixed point, for example to derive a <br>\nweakest-<em>liberal</em>-precondition semantics.</p>\n<p>David</p>",
        "id": 294633591,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661159272
    }
]