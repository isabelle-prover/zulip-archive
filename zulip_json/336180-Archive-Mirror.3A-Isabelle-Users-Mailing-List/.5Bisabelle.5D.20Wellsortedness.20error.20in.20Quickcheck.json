[
    {
        "content": "<p>From: Lukas Bulwahn &lt;<a href=\"mailto:bulwahn@in.tum.de\">bulwahn@in.tum.de</a>&gt;<br>\nHi Yuhui,</p>\n<p>Quickcheck tries to execute this proposition using the code generation <br>\nfacility.<br>\nThe functions (alpha =&gt; bool) are translated to functions in ML.<br>\nTo allow to check for function equality, it requires that the type of <br>\nthe domain is finite (and enumerable, being of type class enum).</p>\n<p>For the obvious finite types (unit and bool), we provide instantiations.<br>\nTo polymorphic types, we check with small finite types that are of class <br>\nenum.</p>\n<p>Infinite types, such as int and nat, are not enumerable, and we cannot <br>\ncheck for function equality (for the chosen translation above).</p>\n<p>The solution to enable execution of this proposition even with an <br>\ninfinite type is to choose a different representation for functions (and <br>\nsets).<br>\nDifferent on-going discussions and effort by the developers will soon <br>\nenable that this is possible, but right now, we are at the unlucky stage <br>\nthat none of them are fully automatic and could be applied by quickcheck <br>\nbehind the scenes.</p>\n<p>NB: I am still not happy with the error message. It is the honest truth, <br>\nwhy quickcheck cannot execute the proposition, but admittedly users <br>\nmight struggle understanding its explanation.</p>\n<p>Lukas</p>",
        "id": 294144315,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660846954
    }
]