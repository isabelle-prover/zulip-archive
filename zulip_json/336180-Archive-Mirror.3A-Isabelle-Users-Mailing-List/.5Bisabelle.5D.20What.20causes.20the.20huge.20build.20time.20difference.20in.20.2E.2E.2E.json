[
    {
        "content": "<p>From: \"C. Diekmann\" &lt;<a href=\"mailto:diekmann@in.tum.de\">diekmann@in.tum.de</a>&gt;<br>\nDear list,</p>\n<p>I have an Isabelle project that runs some tests on large data sets<br>\nduring build time. The tests are all executed with value[code]. I<br>\nobserved a huge increase in build time for a certain commit. What is<br>\ncausing this huge difference? Unfortunately, I cannot reproduce this<br>\nissue outside of my project. Code below.</p>\n<p>The code that is shared by the two versions:<br>\nfun extract_IPSets_generic0 :: \"(simple_match ⇒ 32 word × nat) ⇒<br>\nsimple_rule list ⇒ (32 wordinterval) list\" where<br>\n  \"extract_IPSets_generic0 _ [] = []\" |<br>\n  \"extract_IPSets_generic0 sel ((SimpleRule m _)#ss) =<br>\n(ipv4_cidr_tuple_to_interval (sel m)) #</p>\n<p>(extract_IPSets_generic0 sel ss)\"</p>\n<p>fun extract_src_dst_ips :: \"simple_rule list ⇒ (32 wordinterval) list<br>\n⇒ (32 wordinterval) list\" where<br>\n  \"extract_src_dst_ips [] ts = ts\" |<br>\n  \"extract_src_dst_ips ((SimpleRule m _)#ss) ts = extract_src_dst_ips ss</p>\n<p>((ipv4_cidr_tuple_to_interval (src m)) #</p>\n<p>((ipv4_cidr_tuple_to_interval (dst m))#ts))\"</p>\n<p>Version 1 defines<br>\ndefinition extract_IPSets :: \"simple_rule list ⇒ (32 wordinterval) list\" where<br>\n  \"extract_IPSets rs ≡ extract_src_dst_ips rs []\"<br>\nTo build with test cases, it takes over 10 hours:<br>\n  10:10:49 elapsed time, 38:41:17 cpu time, factor 3.80</p>\n<p>Version 2 defines<br>\nfun extract_IPSets :: \"simple_rule list ⇒ (32 wordinterval) list\" where<br>\n  \"extract_IPSets rs = (extract_IPSets_generic0 src rs) @<br>\n(extract_IPSets_generic0 dst rs)\"<br>\nTo build with test cases, it takes less than 4 hours:<br>\n  3:39:56 elapsed time, 21:08:34 cpu time, factor 5.76</p>\n<p>W.r.t. a correctness theorem, both versions are equal.</p>\n<p>Version 2 is parallelizing a bit better, but this seems not to be the<br>\nmain cause of the build time difference. What is causing these huge<br>\ndifferences?</p>\n<p>When I benchmark on my laptop, The runtime of both implementations is<br>\nabout equal:<br>\nvalue[code] \"let x = (let rs = replicate 1000000 (SimpleRule<br>\nsimple_match_any simple_action.Accept)<br>\n                      in extract_src_dst_ips rs []) in ()\"<br>\nvalue[code] \"let x = (let rs = replicate 1000000 (SimpleRule<br>\nsimple_match_any simple_action.Accept)<br>\n                      in (extract_IPSets_generic0 src rs) @<br>\n(extract_IPSets_generic0 dst rs)) in ()\"</p>\n<p>Interestingly, <code>export_code extract_IPSets in SML</code> fails for both<br>\nversions with the error<br>\n\"Dependency \"int\" :: \"semiring_div_parity\" -&gt; \"int\" ::<br>\n\"semiring_parity\" would result in module dependency cycle\"</p>\n<p>What does value[code] do in this case? Does it still compile to SML?</p>\n<p>In the file that runs all the value[code] tests, export_code works<br>\n(probably because I'm importing Code_Target_Nat and Code_Target_Int<br>\nagain).</p>\n<p>The diff between version1 and version2 is on github. The only change<br>\nis the definition of extract_IPSets.  More detailed runtime<br>\ninformation in the github commit comments.</p>\n<p>Slow (version1):<br>\n<a href=\"https://github.com/diekmann/Iptables_Semantics/commit/924358476a9e59faa37484d5547a7775e6d2d90f\">https://github.com/diekmann/Iptables_Semantics/commit/924358476a9e59faa37484d5547a7775e6d2d90f</a></p>\n<p>Fast (version2):<br>\n<a href=\"https://github.com/diekmann/Iptables_Semantics/commit/a05fa38b3daf444030a211aca39d680575dfc870\">https://github.com/diekmann/Iptables_Semantics/commit/a05fa38b3daf444030a211aca39d680575dfc870</a></p>\n<p>I would be happy for any hint what is responsible for version2 being so slow.</p>\n<p>Best Regards,<br>\n   Cornelius</p>",
        "id": 294658338,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661168967
    },
    {
        "content": "<p>From: \"C. Diekmann\" &lt;<a href=\"mailto:diekmann@in.tum.de\">diekmann@in.tum.de</a>&gt;<br>\nDear list,</p>\n<p>Please don't waste your time on this question. Version1 and Version2<br>\nreturn the result in a different order (which does not affect the<br>\ncorrectness theorem but the algorithms which continue to work with the<br>\nresult). I will first check if this is responsible; I will come back<br>\nif this is not the main cause. I should have thought about this one<br>\nearlier, sorry for the spam.</p>\n<p>Have a nice weekend,<br>\n  Cornelius</p>",
        "id": 294658347,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661168971
    }
]