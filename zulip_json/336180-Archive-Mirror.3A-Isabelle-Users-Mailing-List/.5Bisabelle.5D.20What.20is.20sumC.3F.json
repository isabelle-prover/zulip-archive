[
    {
        "content": "<p>From: \"W. Douglas Maurer\" &lt;<a href=\"mailto:maurer@gwu.edu\">maurer@gwu.edu</a>&gt;<br>\nAs a first example of explaining to my students what a subproof is, <br>\nwithout complicating the matter by doing one with cases or with <br>\ninduction, I prepared the following (contrived) proof that 6 is the <br>\nfactorial of 3:<br>\nlemma \"fact(3::nat) = 6\" proof-<br>\n   have \"(3::nat) = (2::nat)+1\" by simp<br>\n   then have \"fact(3::nat) = fact((2::nat)+1)\" by (rule arg_cong)<br>\n   also have 1: \"... = ((2::nat)+1)*fact(2) by (rule fact_plus_one_nat)<br>\n   have \"fact(2::nat) = 2\" proof-<br>\n     have \"(2::nat) = 1+(1::nat)\" by simp<br>\n     then have \"fact(2::nat)=fact(1+(1::nat))\" by (rule arg_cong)<br>\n     also have \"... = (1+1)*fact(1)\" by (rule fact_plus_one_nat)<br>\n     finally show ?thesis by simp<br>\n   qed<br>\n   with 1 have \"fact(3::nat) = ((2::nat)+1)*2\" by simp<br>\n   then show ?thesis by simp<br>\nqed<br>\nThis works, but it's ugly. I would much rather have a proof that <br>\nsomehow proceeds automatically from fact(3) = 6 to fact(Suc 2) = 6 to <br>\n(Suc 2)<em>fact(2) = 6 to (Suc 2)</em>fact(Suc 1) = 6 to (Suc 2)*(Suc <br>\n1)<em>fact(1) = 6 to (Suc 2)</em>(Suc 1)<em>fact(Suc 0) = 6 to (Suc 2)</em>(Suc <br>\n1)<em>(Suc 0)</em>fact(0) = 6 to 3<em>2</em>1*1 = 6, all in one step. As a first <br>\ntry, after a few iterations, I wrote:<br>\ntheory FactDef imports Main Fact begin<br>\nlemma \"fact(3::nat) = 6\" by (auto simp add: fact_nat_def)<br>\nend<br>\nwhich didn't work (I didn't necessarily expect it to), but the <br>\nmessage I got was:<br>\nFailed to finish proof: goal (1 subgoal): 1. fact_nat_sumC 3 = 6<br>\nSo my question now is: What is this sumC? I searched for it in <br>\n\"Isabelle/HOL --- Higher-Order Logic\" and in the Isabelle/Isar <br>\nReference Manual, and it wasn't in either place. -Douglas</p>",
        "id": 294636344,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661160300
    },
    {
        "content": "<p>From: Lars Hupel &lt;<a href=\"mailto:hupel@in.tum.de\">hupel@in.tum.de</a>&gt;<br>\nHello,</p>\n<blockquote>\n<p>This works, but it's ugly. I would much rather have a proof that somehow<br>\nproceeds automatically from fact(3) = 6 to fact(Suc 2) = 6 to (Suc<br>\n2)<em>fact(2) = 6 to (Suc 2)</em>fact(Suc 1) = 6 to (Suc 2)<em>(Suc 1)</em>fact(1) = 6<br>\nto (Suc 2)<em>(Suc 1)</em>fact(Suc 0) = 6 to (Suc 2)<em>(Suc 1)</em>(Suc 0)*fact(0) =<br>\n6 to 3<em>2</em>1*1 = 6, all in one step.</p>\n</blockquote>\n<p>I'm not sure I fully understand the requirement. Are you looking for a<br>\nproof method which can solve the full goal automatically? If so, you can<br>\ntry 'code_simp' or 'eval'.</p>\n<p>Perhaps a better way to understand what's going on internally is to<br>\nfirst convert the numeral notation to 'Suc ... 0' notation of natural<br>\nnumbers:</p>\n<p>lemma \"fact 3 = 6\"<br>\n  unfolding eval_nat_numeral BitM.simps</p>\n<p>At this point, the subgoal looks like this:</p>\n<p>fact (Suc (Suc (Suc 0))) = Suc (Suc (Suc (Suc (Suc (Suc 0)))))</p>\n<p>This goal can be solved 'by simp'. Of course, you can also add that rule<br>\nto the simpset:</p>\n<p>lemma \"fact 3 = 6\"<br>\n  by (simp add: eval_nat_numeral)</p>\n<p>Does that help?</p>\n<blockquote>\n<p>As a first try, after a few<br>\niterations, I wrote:<br>\ntheory FactDef imports Main Fact begin<br>\nlemma \"fact(3::nat) = 6\" by (auto simp add: fact_nat_def)<br>\nend<br>\nwhich didn't work (I didn't necessarily expect it to), but the message I<br>\ngot was:<br>\nFailed to finish proof: goal (1 subgoal): 1. fact_nat_sumC 3 = 6<br>\nSo my question now is: What is this sumC?</p>\n</blockquote>\n<p>It's an internal definition of the function command. See here for an<br>\nolder discussion:<br>\n&lt;<a href=\"http://thread.gmane.org/gmane.science.mathematics.logic.isabelle.user/10667\">http://thread.gmane.org/gmane.science.mathematics.logic.isabelle.user/10667</a>&gt;.</p>\n<p>Cheers<br>\nLars</p>",
        "id": 294636459,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661160345
    },
    {
        "content": "<p>From: \"W. Douglas Maurer\" &lt;<a href=\"mailto:maurer@gwu.edu\">maurer@gwu.edu</a>&gt;<br>\nWhere is code_simp described? It's not in \"Programming and Proving in <br>\nIsabelle/HOL\"; it's not in \"The Isabelle/Isar Reference Manual\"; it's <br>\nnot in \"The Isabelle/Isar Implementation\"; it's not in \"Isabelle/HOL <br>\n-- A Proof Assistant for Higher-Order Logic.\" Are there other manuals <br>\nor tutorials I should try?</p>",
        "id": 294636559,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661160388
    },
    {
        "content": "<p>From: Lars Hupel &lt;<a href=\"mailto:hupel@in.tum.de\">hupel@in.tum.de</a>&gt;<br>\nCan you give the definition of your 'fact' function? I was assuming<br>\nsomething along those lines:</p>\n<p>fun fact :: \"nat =&gt; nat\" where<br>\n  \"fact 0 = 1\" |<br>\n  \"fact (Suc n) = (Suc n) * fact n\"</p>",
        "id": 294636567,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661160391
    },
    {
        "content": "<p>From: Lars Hupel &lt;<a href=\"mailto:hupel@in.tum.de\">hupel@in.tum.de</a>&gt;<br>\nBoth 'eval' and 'code_simp' use the code generator, which is why they're<br>\ndescribed in the code generator manual, section 6.</p>\n<p>Cheers<br>\nLars</p>",
        "id": 294636581,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661160397
    },
    {
        "content": "<p>From: Lars Hupel &lt;<a href=\"mailto:hupel@in.tum.de\">hupel@in.tum.de</a>&gt;</p>\n<blockquote>\n<p>I searched the code generation manual for code-simp and eval. Code-simp<br>\nappears in only one place in that manual, and it's in the Schematic<br>\nDiagram (section 6.3), which hardly qualifies as a description.</p>\n</blockquote>\n<p>It's slightly more detailed in §6.1.</p>\n<blockquote>\n<p>Having said this, though, it doesn't look as if I'll be able to use<br>\nthese, anyway. The Abstract to the code generation manual says that \"the<br>\ncode generator facilities of Isabelle/HOL...empower the user to turn HOL<br>\nspecifications into corresponding executable programs in the languages<br>\nSML, OCaml, Haskell and Scala.\" I'm based in the US, and my only<br>\nexposure to functional languages has been to Lisp. (Maybe that's<br>\nchauvinistic, since Lisp was developed in the US.) I've been studying<br>\nPaulson's ML book, but I haven't actually used ML yet.</p>\n</blockquote>\n<p>The 'code_simp' and 'eval' methods are using code generator<br>\ninfrastructure, but are not actually generating code (at least not<br>\nobservably). They are completely embedded in Isabelle and have nothing<br>\nto do with any of the targets the code generator supports.</p>\n<p>Cheers<br>\nLars</p>",
        "id": 294637047,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661160588
    },
    {
        "content": "<p>From: Lars Hupel &lt;<a href=\"mailto:hupel@in.tum.de\">hupel@in.tum.de</a>&gt;<br>\nAfter digging a bit, it turns out that the Fact theory is part of HOL in<br>\nIsabelle2014, but not anymore in Isabelle2015-RC*.</p>\n<p>I couldn't reproduce the tactic failure, though. 'simp add:<br>\neval_nat_numeral' solves the goal just fine.</p>\n<p>Cheers<br>\nLars</p>",
        "id": 294637053,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661160593
    },
    {
        "content": "<p>From: Larry Paulson &lt;<a href=\"mailto:lp15@cam.ac.uk\">lp15@cam.ac.uk</a>&gt;<br>\nThe theory Fact was combined with Binomial and is now included in Complex_Main. The integer version of the factorial function no longer exists. See NEWS:</p>\n<p>The factorial function, \"fact\", now has type \"nat = 'a\" (of sort semiring_char_0, which admits numeric types including nat, int, real and complex. INCOMPATIBILITY: an expression such as \"fact 3 = 6\" may require a type constraint, and the combination \"real (fact k)\" is likely to be unsatisfactory. If a type conversion is still necessary, then use \"of_nat (fact k)\" or \"real_of_nat (fact k)”.</p>\n<p>Larry Paulson</p>",
        "id": 294637176,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661160636
    }
]