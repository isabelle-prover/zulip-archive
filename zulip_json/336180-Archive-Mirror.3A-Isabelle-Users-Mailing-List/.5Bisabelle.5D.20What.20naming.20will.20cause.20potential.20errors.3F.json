[
    {
        "content": "<p>From: Gottfried Barrow &lt;<a href=\"mailto:gottfried.barrow@gmx.com\">gottfried.barrow@gmx.com</a>&gt;<br>\nHi,</p>\n<p>On the developer's list I saw some discussion about problems that naming <br>\ncan cause.</p>\n<p>If possible, I'd like to know what naming conventions I \"have to\" follow <br>\nto prevent future, potential errors due to naming.</p>\n<p>I looked at the implementation manual:</p>\n<p><a href=\"http://isabelle.in.tum.de/website-Isabelle2013/dist/Isabelle2013/doc/implementation.pdf\">http://isabelle.in.tum.de/website-Isabelle2013/dist/Isabelle2013/doc/implementation.pdf</a></p>\n<p>Naming conventions for ML are spelled out some on page 3, \"0.1.2 Naming <br>\nconventions\". I'm not using ML, so I'm only concerned with Isar naming, <br>\nand it wasn't obvious to me that any hard rules exists, such as in <br>\nsection \"Names\", page 46.</p>\n<p>I'll take two specific cases, theory names and theorem names.</p>\n<p>I was naming my theory with lowercase first letter. I have now changed <br>\nthe first letter to uppercase, since it's a minor thing, and I have this <br>\nhunch that somewhere, there's a need for fully qualified names to abide <br>\nby that.</p>\n<p>For theorem names, I name many theorems starting with uppercase, which <br>\nseems to be contrary to the convention in the HOL sources.</p>\n<p>I have good reason to do this, because I care more about following <br>\nmathematical notation conventions than following Isabelle coding <br>\nconventions.</p>\n<p>However, if someone tells me that my naming scheme will potentially <br>\ncause errors, rather than just annoy people, I am more than ready to <br>\ngive preference to any naming convention that \"must be\" followed to <br>\nprevent potential errors.</p>\n<p>But I don't want to change my naming scheme without knowing what the <br>\nrules are because there are lots of different objects, in particular, in <br>\naddition to theorem names, there are locales, classes, and sublocales, <br>\nwhich I see that I may need now.</p>\n<p>Can anyone tell me what Isar naming conventions \"must be\" followed to <br>\nprevent potential errors?</p>\n<p>Thanks,<br>\nGB</p>",
        "id": 294239140,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660906199
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nThere is nothing you \"have to\" follow.  Naming conventions are a matter to <br>\nkeep things simple at very little cost -- they belong to \"best practices\".</p>\n<p>Observing certain customs routinely saves a lot of energy to rethink and <br>\nreconsider things over and over again.  Sometimes this has to be done, <br>\nnonethrless: e.g. for Isabelle/Scala I've re-used many Isabelle/ML <br>\nconventions at the cost of violating other conventions on the Java Virtual <br>\nMachine, and Scala itself tends towards very mixed ways of writing.  I had <br>\nto spend extra time to study history, manuals, websites to ensure that no <br>\nbad consequences are coming from Graph.is_minimal in both Isabelle/ML and <br>\nIsabelle/Scala, and not Graph.is_minimal here and Graph.isMinimal there <br>\n(IAmNotGoingIntoDetailsWhyCamelCaseIsNotUsedInOurTradition).</p>\n<p>Anyway, the mail thread you mention was initiated by the surprise that <br>\nusing a lower-case theory name in Isabelle/HOL makes the Haskell code <br>\ngenerator fail due to resulting lower-case module name, which Haskell <br>\nrejects.</p>\n<p>Theory names in Isabelle have a long-standing naming tradition: capital <br>\nwords (usually in singular), separated by underscore.</p>\n<p>Example (good): Vector_Space.</p>\n<p>Counter-examples (bad): Vector_Spaces, VectorSpaces, vectorSpaces, <br>\nvectorspace etc.</p>\n<p>Many years ago, theory names were als very short, since users had to <br>\nrepeat typing use_thy invocations a lot on the TTY, but has changed a lot <br>\nwith the introduction of Proof General in 1998.  Today there is nothing <br>\nspecial saying outright what you mean with theory Boolean_Algebra, which <br>\nformer generations would have squeezed that towards 8 or 5 characters.</p>\n<p>The majority of material within a theory body uses lower case names (also <br>\nseparate by underscore).  Some special situation have capitalized or <br>\nall-caps names, e.g. \"max\", \"Max\", \"MAX\" for certain families of <br>\noperations.</p>\n<p>Locale names are within a theory body, and thus lower-case.</p>\n<p>Example:</p>\n<p>theory Vector_Space<br>\n   imports Main<br>\n   begin</p>\n<p>locale vector_space = ...<br>\n   begin</p>\n<p>definition \"foo = ...\"</p>\n<p>end</p>\n<p>end</p>\n<p>This produces fully qualified names like</p>\n<p><a href=\"http://Vector_Space.vector_space.foo\">Vector_Space.vector_space.foo</a></p>\n<p>with name space accesses like</p>\n<p><a href=\"http://Vector_Space.foo\">Vector_Space.foo</a>   -- \"global access\"<br>\n<a href=\"http://vector_space.foo\">vector_space.foo</a>   -- \"local access\"</p>\n<p>That is the basic observation from 1999, when locales were first <br>\nintroduced.  Further complexity has piled up since then, but the basic <br>\nadvantage of having access to two important hierary levels is still there <br>\n-- by convention, not by special machinery that would introduce extra <br>\ncomplexity.</p>\n<p>You do get overlaps in certain more complex cases nonetheless, but the <br>\nconvention is somewhat better off than doing it just arbitrarily.</p>\n<p>Makarius</p>",
        "id": 294239379,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660906279
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nOn Sun, 7 Apr 2013, Gottfried Barrow wrote:</p>\n<blockquote>\n<p>For theorem names, I name many theorems starting with uppercase, which <br>\nseems to be contrary to the convention in the HOL sources.</p>\n<p>I have good reason to do this, because I care more about following <br>\nmathematical notation conventions than following Isabelle coding <br>\nconventions.</p>\n</blockquote>\n<p>In some sense the \"coding\" conventioned deviated by accident (or on <br>\npurpose) from what you often see in informal \"prose\" text, but I would <br>\nconsider this an improvement.  We are not writing for the New York Times <br>\nhere.</p>\n<p>Isabelle sources are coming from certain free-world Unixoid background <br>\nwhere lowercase is preferred.  The ancient empire of IBM had enforced <br>\nall-caps variable names, and the advent of proper lowercase in ASCII was a <br>\ngreat relieve (together with the invention of the underscore as formal <br>\nseparator).</p>\n<p>I did not invent these conventions, but I do think that lower-case is <br>\nbetter for the mass of text.  Incidently, Coq prefers capital names and <br>\nkeywords by default, and just last year some hard-core Coq users pointed <br>\nthis out as historical accident: it causes a lot of pain to press SHIFT so <br>\noften, especially in Proof General.  The proposed solution was then to use <br>\nvi keyboard mapping for Emacs.  (If this is madness, there is method in <br>\nit.)</p>\n<p>Note that I normally don't argue about the ease of <em>writing</em> the sources, <br>\nsince ease of <em>reading</em> has the prime priority.  This is why the <br>\nunderscore is important to separate words, and lower-case helps the <br>\nWestern brain to gloss quickly over large bodies of text (this is why the <br>\nscribes of Charlemagne invented the miniscules).  Uppercase still has its <br>\nrole in situations of special emphasis, e.g. \"max\", \"Max\", \"MAX\", but it <br>\nwould loose that benefit if it were used by default.</p>\n<blockquote>\n<p>However, if someone tells me that my naming scheme will potentially cause <br>\nerrors, rather than just annoy people</p>\n</blockquote>\n<p>Annoyance only starts when people try to combine several independent <br>\ntheory libraries into bigger coherent applications.</p>\n<p>Until recently, hardly anything was done in this respect, apart from the <br>\nmain libraries that are shipped with Isabelle (main HOL and HOL/Library). <br>\nI am pleased to see that in recent years, some AFP articles have started <br>\nto aggregate, and build up beginnings of modest dependency structures.</p>\n<blockquote>\n<p>But I don't want to change my naming scheme without knowing what the <br>\nrules are because there are lots of different objects, in particular, in <br>\naddition to theorem names, there are locales, classes, and sublocales, <br>\nwhich I see that I may need now.</p>\n</blockquote>\n<p>As a general principle in Isabelle, \"different objects\" don't differ in <br>\nthe naming convention, but make them coincide as far as sensible, even <br>\nwith the actual names.  Each category of a separate name space, so you <br>\nnormally you don't have a dog \"foo_dog\", cat \"foo_cat\", mouse \"foo_mouse\", <br>\nbut dog \"foo\", cat \"foo\", mouse \"foo\".</p>\n<p>In practice, this could mean class \"nat\", type \"nat\", const \"nat\", theorem <br>\n\"nat\". Fine points need to be observed when different categories appear in <br>\nclusters: lets say some type \"nat\" and some const \"nat\" that both produce <br>\nsome theorem \"nat.induct\", which would then clash in the common theorem <br>\nname space.</p>\n<p>Makarius</p>",
        "id": 294239385,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660906285
    },
    {
        "content": "<p>From: Gottfried Barrow &lt;<a href=\"mailto:gottfried.barrow@gmx.com\">gottfried.barrow@gmx.com</a>&gt;<br>\nOn 4/12/2013 3:38 PM, Makarius wrote:</p>\n<blockquote>\n<p>There is nothing you \"have to\" follow.  Naming conventions are a <br>\nmatter to keep things simple at very little cost -- they belong to <br>\n\"best practices\".</p>\n</blockquote>\n<p>Thanks for the lengthy reply. I'll take your word that I can name <br>\nidentifiers in any way that the prover engine will accept when I'm <br>\nworking in jEdit. Still, I'll remain paranoid about this for years to come.</p>\n<blockquote>\n<p>Observing certain customs routinely saves a lot of energy to rethink <br>\nand reconsider things over and over again.  Sometimes this has to be <br>\ndone, nonethrless: e.g. for Isabelle/Scala I've re-used many <br>\nIsabelle/ML conventions at the cost of violating other conventions on <br>\nthe Java Virtual Machine, and Scala itself tends towards very mixed <br>\nways of writing.  I had to spend extra time to study history, manuals, <br>\nwebsites to ensure that no bad consequences are coming from <br>\nGraph.is_minimal in both Isabelle/ML and Isabelle/Scala, and not <br>\nGraph.is_minimal here and Graph.isMinimal there <br>\n(IAmNotGoingIntoDetailsWhyCamelCaseIsNotUsedInOurTradition).</p>\n<p>Anyway, the mail thread you mention was initiated by the surprise that <br>\nusing a lower-case theory name in Isabelle/HOL makes the Haskell code <br>\ngenerator fail due to resulting lower-case module name, which Haskell <br>\nrejects.</p>\n</blockquote>\n<p>It seems there were several overlapping threads there, but as to naming, <br>\nsomeone eventually sort of asked, \"Can you please enforce naming rules <br>\nso that we don't end up with error prone code that goes undetected.\" And <br>\nyou sort of said, \"I don't want to enforce anything I don't have to <br>\nenforce.\" Consequently, that's why I'll stay paranoid for years to come.</p>\n<p>At this time, I'm not concerned with any errors that can result from <br>\nusing external tools, only errors produced by the tools that Isabelle <br>\nofficially supports. If the purple bar turns grey at the command \"end\" <br>\nin my THY file, and that represents that my naming conventions won't <br>\ncause problems with other Isabelle tools, then that's good enough for me.</p>\n<blockquote>\n<p>You do get overlaps in certain more complex cases nonetheless, but the <br>\nconvention is somewhat better off than doing it just arbitrarily.<br>\n</p>\n</blockquote>\n<p>I've put some effort into coming with a naming scheme, mainly for the <br>\npurposes of readability, name meaning, and consistency of style. My <br>\nquestion here has been to try and not get vested in some naming scheme <br>\nthat comes back to haunt me.</p>\n<p>I imagine a scenario like this. Someone says, \"I tried to use your <br>\ntheory, but it's causing a ton of errors in another Isabelle tool, and <br>\nit's because of your naming scheme.\" And I reply, \"I see. It's very <br>\nunfortunate that for these last 3 years I never had a need for that <br>\ntool, and I now regret again that my simplistic view of the world has <br>\nagain caused me trouble.\"</p>\n<p>Regards,<br>\nGB</p>",
        "id": 294239536,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660906340
    },
    {
        "content": "<p>From: Gottfried Barrow &lt;<a href=\"mailto:gottfried.barrow@gmx.com\">gottfried.barrow@gmx.com</a>&gt;<br>\nYour statement, \"Note that I normally don't argue about the ease of <br>\n<em>writing</em> the sources, since ease of <em>reading</em> has the prime priority\", <br>\nis usefully quotable. For one to be opinionated about a topic can many <br>\ntimes result in one being perceived as presumptuous, whereas one being <br>\nopinionated about the same topic, while also providing a quote from <br>\nsomeone with good, establishment credentials, can, instead, result in <br>\nputting others on the defense.</p>\n<p>I had already \"primarily\" adopted your non-use of camel case, but the <br>\nother half to readability is the line length of code, and standard <br>\nmathematical notation demonstrates how much information you can get on <br>\none line, where, other than the graphical symbols, it's mainly because <br>\nof the use of single letters, or single subscripted letters.</p>\n<p>I do, though, use a little bit of camel case, so today, I've made me a <br>\nrule about that. The rule is that I only use camel case to separate <br>\ncharacters or cryptic sequences of characters, or characters acting as a <br>\nprefix or suffix to words.</p>\n<p>For example, I'm naming my operators like inP, ssO, eqO, xeO, geU, geI, <br>\nand so forth. And then I also have a name for the same operators with <br>\nnames something like P\\&lt;^isub&gt;I\\&lt;^isub&gt;n, where part of the reasoning of <br>\nboth styles of names is to try and prevent global names clashes with the <br>\nHOL sources, and what names other people are using. My use of a name <br>\nP\\&lt;^isub&gt;I\\&lt;^isub&gt;n then requires sometimes that a theorem name will <br>\nstart with P\\&lt;^isub&gt;I\\&lt;^isub&gt;n.</p>\n<p>What I've said about my naming is still tied into my original question <br>\nfor this thread. First, I want to know what the rules are (which you've <br>\nalready answered). It's best to stay with community convention if <br>\nbreaking convention will cause problems down the road.</p>\n<p>Regards,<br>\nGB</p>",
        "id": 294239545,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660906347
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nOn Sat, 13 Apr 2013, Gottfried Barrow wrote:</p>\n<blockquote>\n<p>It seems there were several overlapping threads there, but as to naming, <br>\nsomeone eventually sort of asked, \"Can you please enforce naming rules <br>\nso that we don't end up with error prone code that goes undetected.\" And <br>\nyou sort of said, \"I don't want to enforce anything I don't have to <br>\nenforce.\" Consequently, that's why I'll stay paranoid for years to come.</p>\n</blockquote>\n<p>I don't think you have to be paranoid, as long as you stay somewhere in <br>\nthe middle ground what you normally see in public Isabelle applications.</p>\n<p>Concerning enforcement of rules, there has been a slight tendency over the <br>\nyears to become more strict: tell more explicitly via errors or warnings <br>\ninstead of just writing manuals about the system.  It is always a long and <br>\ntedious process to do so, since one first needs to pin down the rules <br>\nprecisely, implement them, update existing applications accordingly, and <br>\nfinally handle seasoned users who argue differently.</p>\n<blockquote>\n<p>At this time, I'm not concerned with any errors that can result from <br>\nusing external tools, only errors produced by the tools that Isabelle <br>\nofficially supports. If the purple bar turns grey at the command \"end\" <br>\nin my THY file, and that represents that my naming conventions won't <br>\ncause problems with other Isabelle tools, then that's good enough for <br>\nme.</p>\n</blockquote>\n<p>It is hard to tell where \"internal\" ends and \"external\" starts.  The <br>\nIsabelle/HOL code generator for Haskell is part of the standard Isabelle <br>\ndisctibution, and used routinely in many applications.</p>\n<p>Another example is the file-system: Is that internal or external to the <br>\nprover?  A theory called \"\\&lt;A&gt;\\&lt;^isub&gt;1\" won't work for relatively obvious <br>\nreasons; one called \"Aux\" is less obvious -- it used to work in <br>\nIsabelle2012 due to Cygwin, but the Scala/JVM build system now insists in <br>\nWindows/MS-DOS conformity.  Further uncertainty is introduced routinely <br>\ndue to case-insensitive file-systems.</p>\n<p>Note that Isabelle/jEdit has its own way to manage files for the prover, <br>\nso there are subtle differences to someone used to Proof General.</p>\n<blockquote>\n<p>I imagine a scenario like this. Someone says, \"I tried to use your <br>\ntheory, but it's causing a ton of errors in another Isabelle tool, and <br>\nit's because of your naming scheme.\" And I reply, \"I see. It's very <br>\nunfortunate that for these last 3 years I never had a need for that <br>\ntool, and I now regret again that my simplistic view of the world has <br>\nagain caused me trouble.\"</p>\n</blockquote>\n<p>This can always happen.  Theory developments being used by others will <br>\nhave to be refined and smoothened.  A similar smoothening effect happens <br>\nto user applications after more than 3 updates of the underlying Isabelle <br>\nversion -- I think you have noticed this already :-)</p>\n<p>Makarius</p>",
        "id": 294239669,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660906414
    }
]