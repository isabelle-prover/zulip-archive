[
    {
        "content": "<p>From: Lars Noschinski &lt;<a href=\"mailto:noschinl@in.tum.de\">noschinl@in.tum.de</a>&gt;<br>\nHi,</p>\n<p>I want to write a toplevel command which takes a theorem and some <br>\noptions as input and creates a list of theorems (hence I cannot use an <br>\nattribute) from that.</p>\n<p>In an attribute I would use the Attrib.thm parser to parse the input <br>\ntheorem. Is Parse_Spec.xthm the right thing to use in a command, or is <br>\nthere something more ready-made, where I don't need to care about <br>\napplying the attributes myself?</p>\n<p>-- Lars</p>",
        "id": 294247111,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660909323
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nFor outer syntax commands, the parser does not know the context yet, so <br>\nthe actual formal content is only produced later when the command <br>\ntransaction is applied.  For example, this works for terms via Parse.term <br>\nand Syntax.read_term, with many canonical examples found in the libraries.</p>\n<p>For facts it is more difficult to find examples, since passing theorems to <br>\ntools is relatively rare (such tools are often ports from HOL4). <br>\nNormally the proof problem is exposed to the user as a proof state, <br>\npotentially with multiple conclusions, which is then solved by standard <br>\nmeans.  Often the proof is just \".\", \"..\" or \"by (fact myfacts)+\".  See <br>\nfor example the 'rep_datatype' command.</p>\n<p>If you really need to pass facts directly, it can be done like \"inductive <br>\nmonos ...\", which uses Parse_Spec.xthms1 and Attrib.eval_thms.</p>\n<p>Makarius</p>",
        "id": 294247172,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660909346
    },
    {
        "content": "<p>From: Lars Noschinski &lt;<a href=\"mailto:noschinl@in.tum.de\">noschinl@in.tum.de</a>&gt;<br>\nThanks for the pointers.</p>\n<p>In my case, the lemma is not used to prove a goal, but is used as a basis to generate new theorems from.  My application is transforming between two different styles of lemmas defining a function. A rule attribute would have been my first choice, but these are limited to 1:1 mappings, whereas I need 1:n and m:1 (the form [[my_attr thms]] could be used for m:1, but it feels pretty unusual for rule attributes).</p>\n<p>Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt; schrieb:</p>",
        "id": 294247331,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660909415
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nThe 1:n or m:1 thing would indeed introduce a lot of additional <br>\ncomplexity, for something that is already quite complex.  Rule attributes <br>\nwere historically introduced to capture many small ad-hoc operations on <br>\ntheorems, such as \"rule_format\".  It was successful in that respect, but <br>\nat some costs that we are still paying back until today.</p>\n<p>What you describe sounds like a regular 'declaration' within a local <br>\ntheory context.  This should all work without requiring to stretch <br>\nattributes beyond their usual use (although they are in principle as <br>\npowerful as that).</p>\n<p>Makarius</p>",
        "id": 294247361,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660909428
    }
]