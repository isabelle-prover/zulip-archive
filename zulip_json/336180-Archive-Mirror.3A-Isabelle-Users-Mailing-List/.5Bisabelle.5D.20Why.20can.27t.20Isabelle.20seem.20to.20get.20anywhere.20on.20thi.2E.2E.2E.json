[
    {
        "content": "<p>From: \"John F. Hughes\" &lt;<a href=\"mailto:jfh@cs.brown.edu\">jfh@cs.brown.edu</a>&gt;<br>\nI've finally gotten to a state where I can prove multiple small lemmas<br>\n(with a great deal of help from \"try\") fairly smoothly. But I'm stuck on<br>\nsomething that seems... well, as usual, it seems completely obvious to me,<br>\nbut none of Isabelle's solvers can get anywhere at all, apparently.</p>\n<p>I'm trying to prove things about the ordinary affine plane. I'm using<br>\n\"a2meets P k\" to mean \"the point P is on the line k\". Lines are either<br>\nVertical or Ordinary, the latter being lines with equations of the form y =<br>\nmx + b. Here's the set-up for all that:</p>\n<p>datatype a2pt = A2Point \"real\" \"real\"<br>\n  datatype a2ln = A2Ordinary \"real\" \"real\"  | A2Vertical \"real\"</p>\n<p>fun a2meets :: \"a2pt ⇒ a2ln ⇒ bool\" where<br>\n    \"a2meets (A2Point x y) (A2Ordinary m b) = (y = m*x + b)\" |<br>\n    \"a2meets (A2Point x y) (A2Vertical xi) = (x = xi)\"</p>\n<p>definition a2parallel:: \"a2ln  ⇒ a2ln ⇒ bool\" (infix \"a2||\" 50)<br>\n      where \"l a2|| m ⟷ (l = m ∨  (∀ P. (¬ a2meets P l)  ∨ (¬a2meets P m)))\"</p>\n<p>I'm in the middle of proving that if you have a line l and a point P not on<br>\nl, there's a unique line l' parallel to l and containing p. I've shown that<br>\nsuch an l' exists; now I'm trying to show uniqueness.</p>\n<p>So I'm trying to show that given a line l and a point P not on l, if m and<br>\nk are both parallel to l and both contain P, then m = k.</p>\n<p>lemma A2_a2b:<br>\n  fixes P<br>\n  fixes l<br>\n  fixes m<br>\n  fixes k<br>\n  assumes pl : \"¬ a2meets P l\"<br>\n  assumes pm : \"a2meets P m\"<br>\n  assumes pk : \"a2meets P k\"<br>\n  assumes lm_parr : \"l a2|| m\"<br>\n  assumes lk_parr : \"l a2|| k\"<br>\n  shows \"m = k\"</p>\n<p>I'm doing this by cases on l, and working on the case where l is Ordinary.<br>\nUsing some lemmas, I'm able to show that k and m are both ordinary, and<br>\nboth have the same slope as l:</p>\n<p>proof (cases l)<br>\n  case (A2Ordinary s1 b1)<br>\n  fix s1 b1 assume lo: \"l = A2Ordinary s1 b1\"<br>\n  fix x0 y0 assume P: \"P = A2Point x0 y0\"<br>\n  then  have mform: \"∃b2. m = A2Ordinary s1 b2 \" using A2_parallel_2<br>\nA2_parallel_3 lm_parr lo by fastforce<br>\n  also  have kform: \"∃b3. k = A2Ordinary s1 b3 \" by (metis A2Ordinary<br>\nA2_parallel_2 A2_parallel_3 calculation lk_parr lm_parr)</p>\n<p>So at this point, I have that k is and ordinary line with slope s1 and<br>\nintercept b3. I know, from the hypotheses, that \"a2meets P k\", i.e., that<br>\nthe point P = A2Point x0 y0 lies on k, which (by the definition of a2meets)<br>\nsays that y0 =  s1*x0 + b3\". But when I assert this and use \"try\" to find a<br>\nproof...it tries in vain:</p>\n<p>also have \"y0 = s1*x0 + b3\" try</p>\n<p>It even tries in vain if I try to help it along by suggesting some useful<br>\ntips:</p>\n<p>also have \"y0 = s1*x0 + b3\" using kform pk try</p>\n<p>I have the feeling that I'm approaching this kind of thing completely<br>\nwrong, because even the most obvious things like this one seem tough.</p>",
        "id": 294821536,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661242373
    },
    {
        "content": "<p>From: Mark Wassell &lt;<a href=\"mailto:mpwassell@gmail.com\">mpwassell@gmail.com</a>&gt;<br>\nHello,</p>\n<p>I might have reproduced your theory incorrectly but:</p>\n<p>The b3 you have in<br>\n  \"∃b3. k = A2Ordinary s1 b3 \"<br>\nis not the same as the b3 you have in<br>\n  also have \"y0 = s1*x0 + b3\"</p>\n<p>The first is bound and the second is free. The Isabelle IDE might be<br>\nindicating this by drawing the background of the b3 in<br>\n  also have \"y0 = s1*x0 + b3\"<br>\ndifferently.</p>\n<p>You will need to use something like obtain to fix the b3. For example,<br>\nreplace<br>\n\"∃b3. k = A2Ordinary s1 b3 \"<br>\nwith<br>\nobtain b3 where \"k = A2Ordinary s1 b3 \" &lt;you will need some proof of this&gt;</p>\n<p>You will need to do similar for b2 and then prove b2 = b3.</p>\n<p>Cheers</p>\n<p>Mark</p>",
        "id": 294821546,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661242379
    },
    {
        "content": "<p>From: \"John F. Hughes\" &lt;<a href=\"mailto:jfh@cs.brown.edu\">jfh@cs.brown.edu</a>&gt;<br>\nThanks, Thomas and Mark.</p>\n<blockquote>\n<blockquote>\n<p>Or, the short form of all this, it's easy to think that the problem is<br>\nproving true statements in a formal system.<br>\nActually the first challenge is to state a true statement.</p>\n</blockquote>\n</blockquote>\n<p>That's a fun way to put it, but ... with a half-century of practice, I'm<br>\npretty good at proving things (and stating true things to prove). I'm just<br>\nnot good at understanding Isabelle/Isar (to put it very mildly!)</p>\n<p>Your answer says a bunch of useful things, like:</p>\n<blockquote>\n<p>You begin your proof with \"cases l\", and the first case with \"case (A2Ordinary<br>\ns1 b1)\". This automatically fixes variables<br>\ns1 and b1 and assumes that \"l = A2Ordinary s1 b1\". The assumption is<br>\ninitially named A2Ordinary (the name of the case), and also \"this\".</p>\n</blockquote>\n<blockquote>\n<p>The assume gadget is just for restating existing assumptions.</p>\n</blockquote>\n<blockquote>\n<p>You need to tell it you want x to be a new name for a thing. As Mark<br>\nsaid, the right thing in this case is \"obtain\", which was also the right<br>\nway to handle \"P = A2Point x0 y0\".</p>\n</blockquote>\n<p>...and I'd like to know whether there's DOCUMENTATION anywhere that<br>\nactually says these things. I'd be very very happy to read it and stop<br>\nasking naive questions if I possibly could.</p>\n<p>I'd also like to understand why the \"State\" sidebar seems to not know about<br>\ns1 and b1. For instance, after I've written</p>\n<p>case (A2Ordinary s1 b1)<br>\n  then<br>\n  have mform: \"∃b. m = A2Ordinary s1 b\"<br>\n    using A2Ordinary A2_parallel_2 A2_parallel_3 lm_parr by fastforce</p>\n<p>and click just after \"then\" the sidebar says:</p>\n<p>proof (chain)<br>\npicking this:<br>\n  l = A2Ordinary s1 b1</p>\n<p>but clicking after \"fastforce\" it says</p>\n<p>proof (state)<br>\nthis:<br>\n  ∃b. m =<br>\n      A2Ordinary s1 b</p>\n<p>goal (2 subgoals):</p>\n<ol>\n<li>\n<p>⋀x11 x12.<br>\n       l =<br>\n       A2Ordinary x11<br>\n        x12 ⟹<br>\n       m = k</p>\n</li>\n<li>\n<p>⋀x2. l = A2Vertical<br>\n   x2 ⟹<br>\n          m = k</p>\n</li>\n</ol>\n<p>I don't understand why the \"goal\" still has two subgoals, even though I'm<br>\nin the \"Ordinary\" case, and why those subgoals use x11 and x12 rather than<br>\ns1 and b1, for instance. This is clearly a problem, because even after I do<br>\na bunch more steps eventually showing that m = k, the proof-state still<br>\nlooks the same (except that \"this\" is now \"m = k\")</p>\n<p>On Tue, Jan 21, 2020 at 11:05 AM Thomas Sewell &lt;<a href=\"mailto:sewell@chalmers.se\">sewell@chalmers.se</a>&gt; wrote:</p>\n<blockquote>\n<p>Mark seems to have said similar things, here's my version:</p>\n<p>The short answer is, \"try\" can't prove some of the goals you've stated<br>\nbecause they aren't true.</p>\n<p>The script you've attached contains a bunch of confusion about how Isar<br>\nproof syntax works. Let me point out three cases:</p>\n<p>You begin your proof with \"cases l\", and the first case with \"case (A2Ordinary<br>\ns1 b1)\". This automatically fixes variables s1 and b1 and assumes that \"l<br>\n= A2Ordinary s1 b1\". The assumption is initially named A2Ordinary (the<br>\nname of the case), and also \"this\". You've fixed new copies of s1 and b1<br>\nand assumed the assumption again. I'm not sure if that's a problem but it<br>\nis a possible source of confusion.</p>\n<p>You then assume \"P = A2Point x0 y0\" which is definitely a problem. You're<br>\nin danger of the \"fails to refine any pending goal\" error. The assume<br>\ngadget is just for restating existing assumptions, and this isn't an<br>\nexisting assumption.</p>\n<p>Finally, having proven \"∃b2. m = A2Ordinary s1 b2\", you attempt to show \"y0<br>\n= s1*x0 + b2\". The misunderstanding here is that the exists syntax is a<br>\nbinder, and the syntactic name b2 is meaningful only within the scope of<br>\nthe exists. Mark pointed this out.</p>\n<p>Isar forces you to be intentional about these things. You can prove that \"∃x.<br>\n...\" with some property, and it won't try to unpack that x. If it did, you<br>\nmight get confusion between different instances of x. You need to tell it<br>\nyou want x to be a new name for a thing. As Mark said, the right thing in<br>\nthis case is \"obtain\", which was also the right way to handle \"P =<br>\nA2Point x0 y0\". You want to obtain x0/y0/b2 at the proof scope with these<br>\nproperties.</p>\n<p>To clarify:</p>\n<p>obtain x0 y0 where P: \"P = A2Point x0 y0\"<br>\n    by (cases P; simp)</p>\n<p>Or, the short form of all this, it's easy to think that the problem is<br>\nproving true statements in a formal system. Actually the first challenge is<br>\nto state a true statement.</p>\n<p>Cheers,</p>\n<p>Thomas.</p>\n<hr>\n<p><em>From:</em> <a href=\"mailto:cl-isabelle-users-bounces@lists.cam.ac.uk\">cl-isabelle-users-bounces@lists.cam.ac.uk</a> &lt;<br>\n<a href=\"mailto:cl-isabelle-users-bounces@lists.cam.ac.uk\">cl-isabelle-users-bounces@lists.cam.ac.uk</a>&gt; on behalf of John F. Hughes &lt;<br>\n<a href=\"mailto:jfh@cs.brown.edu\">jfh@cs.brown.edu</a>&gt;<br>\n<em>Sent:</em> Tuesday, January 21, 2020 3:49:08 PM<br>\n<em>To:</em> Cl-isabelle Users<br>\n<em>Subject:</em> [isabelle] Why can't Isabelle seem to get anywhere on this<br>\napparently simple problem?</p>\n<p>I've finally gotten to a state where I can prove multiple small lemmas<br>\n(with a great deal of help from \"try\") fairly smoothly. But I'm stuck on<br>\nsomething that seems... well, as usual, it seems completely obvious to me,<br>\nbut none of Isabelle's solvers can get anywhere at all, apparently.</p>\n<p>I'm trying to prove things about the ordinary affine plane. I'm using<br>\n\"a2meets P k\" to mean \"the point P is on the line k\". Lines are either<br>\nVertical or Ordinary, the latter being lines with equations of the form y =<br>\nmx + b. Here's the set-up for all that:</p>\n<p>datatype a2pt = A2Point \"real\" \"real\"<br>\n  datatype a2ln = A2Ordinary \"real\" \"real\"  | A2Vertical \"real\"</p>\n<p>fun a2meets :: \"a2pt ⇒ a2ln ⇒ bool\" where<br>\n    \"a2meets (A2Point x y) (A2Ordinary m b) = (y = m*x + b)\" |<br>\n    \"a2meets (A2Point x y) (A2Vertical xi) = (x = xi)\"</p>\n<p>definition a2parallel:: \"a2ln  ⇒ a2ln ⇒ bool\" (infix \"a2||\" 50)<br>\n      where \"l a2|| m ⟷ (l = m ∨  (∀ P. (¬ a2meets P l)  ∨ (¬a2meets P<br>\nm)))\"</p>\n<p>I'm in the middle of proving that if you have a line l and a point P not on<br>\nl, there's a unique line l' parallel to l and containing p. I've shown that<br>\nsuch an l' exists; now I'm trying to show uniqueness.</p>\n<p>So I'm trying to show that given a line l and a point P not on l, if m and<br>\nk are both parallel to l and both contain P, then m = k.</p>\n<p>lemma A2_a2b:<br>\n  fixes P<br>\n  fixes l<br>\n  fixes m<br>\n  fixes k<br>\n  assumes pl : \"¬ a2meets P l\"<br>\n  assumes pm : \"a2meets P m\"<br>\n  assumes pk : \"a2meets P k\"<br>\n  assumes lm_parr : \"l a2|| m\"<br>\n  assumes lk_parr : \"l a2|| k\"<br>\n  shows \"m = k\"</p>\n<p>I'm doing this by cases on l, and working on the case where l is Ordinary.<br>\nUsing some lemmas, I'm able to show that k and m are both ordinary, and<br>\nboth have the same slope as l:</p>\n<p>proof (cases l)<br>\n  case (A2Ordinary s1 b1)<br>\n  fix s1 b1 assume lo: \"l = A2Ordinary s1 b1\"<br>\n  fix x0 y0 assume P: \"P = A2Point x0 y0\"<br>\n  then  have mform: \"∃b2. m = A2Ordinary s1 b2 \" using A2_parallel_2<br>\nA2_parallel_3 lm_parr lo by fastforce<br>\n  also  have kform: \"∃b3. k = A2Ordinary s1 b3 \" by (metis A2Ordinary<br>\nA2_parallel_2 A2_parallel_3 calculation lk_parr lm_parr)</p>\n<p>So at this point, I have that k is and ordinary line with slope s1 and<br>\nintercept b3. I know, from the hypotheses, that \"a2meets P k\", i.e., that<br>\nthe point P = A2Point x0 y0 lies on k, which (by the definition of a2meets)<br>\nsays that y0 =  s1*x0 + b3\". But when I assert this and use \"try\" to find a<br>\nproof...it tries in vain:</p>\n<p>also have \"y0 = s1*x0 + b3\" try</p>\n<p>It even tries in vain if I try to help it along by suggesting some useful<br>\ntips:</p>\n<p>also have \"y0 = s1*x0 + b3\" using kform pk try</p>\n<p>I have the feeling that I'm approaching this kind of thing completely<br>\nwrong, because even the most obvious things like this one seem tough.<br>\n</p>\n</blockquote>",
        "id": 294821581,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661242394
    },
    {
        "content": "<p>From: Peter Zeller &lt;<a href=\"mailto:p_zeller@cs.uni-kl.de\">p_zeller@cs.uni-kl.de</a>&gt;<br>\nOn 21.01.20 18:03, John F. Hughes wrote:</p>\n<blockquote>\n<p>...and I'd like to know whether there's DOCUMENTATION anywhere that<br>\nactually says these things. I'd be very very happy to read it and stop<br>\nasking naive questions if I possibly could.</p>\n</blockquote>\n<p>For me the best resource was Chapter 4 in the prog-prove documentation <br>\n(in the documentation Sidebar of jedit or at <br>\n<a href=\"https://isabelle.in.tum.de/doc/prog-prove.pdf\">https://isabelle.in.tum.de/doc/prog-prove.pdf</a>). If you already know how <br>\nto do proofs on paper, this chapter gives you the basic patterns to <br>\nexpress the proofs in Isabelle.</p>\n<blockquote>\n<p>I don't understand why the \"goal\" still has two subgoals, even though I'm<br>\nin the \"Ordinary\" case, and why those subgoals use x11 and x12 rather than<br>\ns1 and b1, for instance. This is clearly a problem, because even after I do<br>\na bunch more steps eventually showing that m = k, the proof-state still<br>\nlooks the same (except that \"this\" is now \"m = k\")</p>\n</blockquote>\n<p>You have to use \"show\" to complete a goal. \"have\" is just for <br>\nintermediate steps.</p>\n<p>The fact that variables are not renamed in the proof state is something <br>\nI also find annoying. Sometimes I temporarily use rename_tac to make it <br>\neasier to copy formulas from the proof panel. Sometimes it's possible to <br>\nuse \"show ?case\" or \"show ?thesis\" to see the goal with the correct <br>\nvariable names.</p>\n<p>-- Peter</p>",
        "id": 294821638,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661242425
    }
]