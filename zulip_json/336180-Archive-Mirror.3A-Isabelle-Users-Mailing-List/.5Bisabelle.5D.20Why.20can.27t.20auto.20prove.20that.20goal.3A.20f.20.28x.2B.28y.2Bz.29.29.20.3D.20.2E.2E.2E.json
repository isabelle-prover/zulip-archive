[
    {
        "content": "<p>From: Peter Lammich &lt;<a href=\"mailto:peter.lammich@uni-muenster.de\">peter.lammich@uni-muenster.de</a>&gt;<br>\nRecently, auto left me a goal of the form<br>\n  f (x+(y+z)) = f ((x+y)+z)<br>\n  x,y,z :: nat</p>\n<p>I always thought the simplifier would rewrite the right sum automatically.<br>\nHowever, when searching for the corresponding theorem, I cannot find it:</p>\n<p>find_theorems \"_ + (_ + (_::nat)) = _ + _ + _\"</p>\n<p>searched for:</p>\n<p>\"_ + (_ + _) = _ + _ + _\"</p>\n<p>nothing found in 0.111 secs</p>\n<p>What's going on here, how is associativity of + on nats implemented?</p>\n<p>btw: I now prove this goal by (rule arg_cong, simp) or by adding \"intro: <br>\narg_cong\" to auto's arguments,<br>\n     but I would have much more liked to write: \"simp add: add_a\" or <br>\nsomething like this</p>\n<p>Best, Peter</p>",
        "id": 294115285,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660838095
    },
    {
        "content": "<p>From: Brian Huffman &lt;<a href=\"mailto:brianh@cs.pdx.edu\">brianh@cs.pdx.edu</a>&gt;<br>\nOn Tue, Aug 31, 2010 at 9:32 AM, Peter Lammich<br>\n&lt;<a href=\"mailto:peter.lammich@uni-muenster.de\">peter.lammich@uni-muenster.de</a>&gt; wrote:</p>\n<blockquote>\n<p>Recently, auto left me a goal of the form<br>\n f (x+(y+z)) = f ((x+y)+z)<br>\n x,y,z :: nat</p>\n<p>I always thought the simplifier would rewrite the right sum automatically.<br>\nHowever, when searching for the corresponding theorem, I cannot find it:</p>\n<p>find_theorems \"_ + (_ + (_::nat)) = _ + _ + _\"</p>\n<p>searched for:</p>\n<p>\"_ + (_ + _) = _ + _ + _\"</p>\n<p>nothing found in 0.111 secs</p>\n<p>What's going on here, how is associativity of + on nats implemented?</p>\n</blockquote>\n<p>Hi Peter,</p>\n<p>You didn't find the theorem \"add_assoc\" because it is oriented the other way:</p>\n<p>\"(x + y) + z = x + (y + z)\"</p>\n<p>As far as I know, all associativity theorems (for multiplication,<br>\netc.) in the main libraries are oriented like this.</p>\n<blockquote>\n<p>btw: I now prove this goal by (rule arg_cong, simp) or by adding \"intro:<br>\narg_cong\" to auto's arguments,<br>\n   but I would have much more liked to write: \"simp add: add_a\" or something</p>\n</blockquote>\n<p>Try \"simp add: add_ac\", which will rewrite additions to a normal form,<br>\nwith terms in sorted order and additions grouped to the right.</p>\n<ul>\n<li>Brian</li>\n</ul>",
        "id": 294115294,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660838098
    },
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\nPeter Lammich schrieb:</p>\n<blockquote>\n<p>Recently, auto left me a goal of the form<br>\n f (x+(y+z)) = f ((x+y)+z)<br>\n x,y,z :: nat</p>\n<p>I always thought the simplifier would rewrite the right sum automatically.</p>\n</blockquote>\n<p>No, it does not normalize with associativity or communtativity<br>\nautomatically.</p>\n<blockquote>\n<p>However, when searching for the corresponding theorem, I cannot find it:</p>\n<p>find_theorems \"_ + (_ + (_::nat)) = _ + _ + _\"</p>\n<p>searched for:</p>\n<p>\"_ + (_ + _) = _ + _ + _\"</p>\n<p>nothing found in 0.111 secs</p>\n</blockquote>\n<p>Associativity happens to be oriented the other way around:</p>\n<p>searched for:<br>\n   \"_ + _ + _ = _ + (_ + _)\"</p>\n<p>found 1 theorem(s) in 0.080 secs:</p>\n<p>Nat.nat_add_assoc: ?m + ?n + ?k = ?m + (?n + ?k)</p>\n<blockquote>\n<p>What's going on here, how is associativity of + on nats implemented?</p>\n<p>btw: I now prove this goal by (rule arg_cong, simp) or by adding \"intro:<br>\narg_cong\" to auto's arguments,<br>\n    but I would have much more liked to write: \"simp add: add_a\" or<br>\nsomething like this</p>\n</blockquote>\n<p>In such situations do</p>\n<p>(simp add: algebra_simps)</p>\n<p>The list algebra_simps contains all simp rules like AC that are not<br>\nincluded by default and covers many algebraic structures.</p>\n<p>Tobias</p>\n<blockquote>\n<p>Best, Peter</p>\n</blockquote>",
        "id": 294115323,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660838108
    }
]