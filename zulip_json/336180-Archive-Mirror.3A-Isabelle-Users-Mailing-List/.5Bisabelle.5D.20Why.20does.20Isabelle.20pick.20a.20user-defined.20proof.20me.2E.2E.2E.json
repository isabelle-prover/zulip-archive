[
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nThis thread is still open. In the first round of inspection, I did not<br>\nget to the bottom of it. It might well be that Eisbach simply does not<br>\nsupport such locality of proof methods. I might be able to say more<br>\nafter another round of inspection.</p>\n<p>Makarius</p>",
        "id": 294749714,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661194949
    },
    {
        "content": "<p>From: Wolfgang Jeltsch &lt;<a href=\"mailto:wolfgang-it@jeltsch.info\">wolfgang-it@jeltsch.info</a>&gt;<br>\nThanks a lot for looking into that. At the moment, I have some<br>\nworkarounds in place, but it would be nice to be able to get rid of<br>\nthose.</p>\n<p>In the past I already successfully used Eisbach methods defined within<br>\nlocales and referring to locale-local things. So Eisbach seems to<br>\nsupport such methods in general.</p>\n<p>All the best,<br>\nWolfgang</p>",
        "id": 294749779,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661194975
    },
    {
        "content": "<p>From: <a href=\"mailto:Gerwin.Klein@data61.csiro.au\">Gerwin.Klein@data61.csiro.au</a><br>\nI can confirm that it was at least the intention that Eisbach should work smoothly with locales and that you can define methods inside locales referring to local facts. There might still be unintended interactions (potentially fundamentally) in how everything plays together esp after export, though.</p>\n<p>Cheers,<br>\nGerwin</p>",
        "id": 294749917,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661195031
    },
    {
        "content": "<p>From: Wolfgang Jeltsch &lt;<a href=\"mailto:wolfgang-it@jeltsch.info\">wolfgang-it@jeltsch.info</a>&gt;<br>\nHello!</p>\n<p>I’ve defined a proof method using Eisbach within a locale. When invoking<br>\nthis method, Isabelle seems to sometimes pick it from the wrong locale<br>\ninterpretation. Consider the following minimal example:</p>\n<p>theory Locale_Methods<br>\n      imports Main \"HOL-Eisbach.Eisbach\"<br>\n    begin</p>\n<p>locale l =<br>\n      fixes n :: nat<br>\n    begin</p>\n<p>method m = (rule trans [of _ n _])</p>\n<p>end</p>\n<p>locale l' = p: l<br>\n    begin</p>\n<p>lemma 1: \"n = n\"<br>\n    proof p.m<br>\n      oops</p>\n<p>sublocale s: l \"Suc n\" .</p>\n<p>lemma 2: \"n = n\"<br>\n    proof p.m<br>\n      oops</p>\n<p>end</p>\n<p>end</p>\n<p>The method <code>m</code> defined within the locale <code>l</code> replaces a goal of the form<br>\n<code>i = j</code> by the two goals <code>i = n</code> and <code>n = j</code>. Positioning the cursor<br>\nbehind <code>proof p.m</code> within lemma <code>1</code> shows that the expected goals,<br>\n<code>n = n</code> and another <code>n = n</code>, have been generated. Positioning the cursor<br>\nbehind <code>proof p.m</code> in lemma <code>2</code> should show the same goals, but in fact<br>\nthe goals <code>n = Suc n</code> and <code>Suc n = n</code> are presented. Apparently the<br>\nproof method <code>s.m</code> has been picked.</p>\n<p>Is this a bug in action, or is there another explanation for this<br>\nbehavior? How can I access <code>p.m</code> after having declared the<br>\nsublocale <code>s</code>?</p>\n<p>I’m using Isabelle2018.</p>\n<p>All the best,<br>\nWolfgang</p>\n<p>P.S.: I’ve asked this question also on StackOverflow at<br>\n<a href=\"https://stackoverflow.com/questions/54543072\">https://stackoverflow.com/questions/54543072</a>, but I ask it here as well<br>\nbecause I didn’t receive an answer on StackOverflow.</p>",
        "id": 294750474,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661195244
    }
]