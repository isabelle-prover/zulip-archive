[
    {
        "content": "<p>From: \"Dr. Brendan Patrick Mahony\" &lt;<a href=\"mailto:brendan.mahony@dsto.defence.gov.au\">brendan.mahony@dsto.defence.gov.au</a>&gt;<br>\nCan anyone speak to reasoning behind the decision to remove the set  <br>\ntype from HOL in Isabelle 2008?</p>\n<p>I find it strangely disconcerting not to have a syntactic distinction  <br>\nbetween sets and predicates. Obviously it has some technical  <br>\ninconveniences, but perhaps they are outweighed by some advantages?</p>\n<hr>\n<p>Dr Brendan Mahony<br>\nC3I Division                                    ph +61 8 8259 6046<br>\nDefence Science and Technology Organisation     fx +61 8 8259 5589<br>\nEdinburgh, South Australia      <a href=\"mailto:Brendan.Mahony@dsto.defence.gov.au\">Brendan.Mahony@dsto.defence.gov.au</a></p>\n<p>Important: This document remains the property of the Australian<br>\nGovernment Department of Defence and is subject to the jurisdiction<br>\nof the Crimes Act section 70. If you have received this document in<br>\nerror, you are requested to contact the sender and delete the document.</p>\n<p>IMPORTANT: This email remains the property of the Australian Defence Organisation and is subject to the jurisdiction of section 70 of the CRIMES ACT 1914.  If you have received this email in error, you are requested to contact the sender and delete the email.</p>",
        "id": 294069737,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660826721
    },
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\nBrendan,</p>\n<p>There were two main motivations:</p>\n<ol>\n<li>\n<p>Avoiding pointless coercions between the two worlds. In particular, <br>\ngiven a predicate P you had to write {x. P(x)} to turn it into a set. <br>\nNow you have to worry less as to whether 'a set or 'a =&gt; bool is more <br>\nappropriate.</p>\n</li>\n<li>\n<p>Compatibility with other HOLs.</p>\n</li>\n</ol>\n<p>Tobias</p>\n<p>Dr. Brendan Patrick Mahony wrote:</p>",
        "id": 294069787,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660826745
    },
    {
        "content": "<p>From: \"Dr. Brendan Patrick Mahony\" &lt;<a href=\"mailto:brendan.mahony@dsto.defence.gov.au\">brendan.mahony@dsto.defence.gov.au</a>&gt;<br>\nOne of those times when I regret my wasted education as a Z weenie,  <br>\nbut my amateur viewpoint really sees this as concerning. Some points  <br>\nof debate follow.</p>\n<p>Isn't this an argument for using ZF over HOL? Surely there are  <br>\nbenefits to strong typing? Probably the people who actually worry  <br>\nabout this question, want to worry about it. More likely, people who  <br>\nalways chose 'a =&gt; bool, occasionally realise that {f x | x y. t x y}  <br>\nis a way more convenient (and disciplined) way of writing (% z. (! x  <br>\ny. z = f x &amp; t x y)) and get annoyed they need a coercion to make use  <br>\nit. In any case, they won't use set notations very often, I guarantee  <br>\nthat the predicate oriented user will not write { (x, y) | x y. t x y}  <br>\ninstead of (% x y. t x y). A proper theory of predicates would be more  <br>\nto their liking, with a (generalised) predicate comprehension and  <br>\npredicate conjunction, disjunction, and negation operators. This would  <br>\npretty much need little more than the introduction of a  <br>\nboolean_algebra class and the generalisation of the boolean operators  <br>\nto this class.</p>\n<p>Biggest irony of all, the Collect coercion operator hasn't gone away  <br>\nas it is needed to support print translations. Only the strong typing  <br>\non sets has gone! Why does this cause problems (other than the  <br>\nproblems always caused by weak typing)?</p>\n<p>In effect, this equates sets with meta-abstraction, as there is  <br>\nalready effectively no object-level \"function\" type in HOL. Thus set  <br>\ninstances suffer from the same \"higher-order unification\" problems  <br>\nthat make arg_cong and fun_cong a pain to work with in Isar. It is now  <br>\nnecessary to instantiate set reasoning rules far more often than  <br>\npreviously.</p>\n<p>Isar only allows a single reasoning set. With a distinguished set  <br>\ntype, this could be worked around to a degree. Now there is no way to  <br>\nsay, \"just do set-style reasoning here.\" Auto fails to terminate in  <br>\nmany more situations now.</p>\n<p>I'll continue evaluating the situation, but the chances are that I'll  <br>\nbe investigating the feasibility making a copy of Set.thy with</p>\n<p>datatype 'a set = Collect \"'a =&gt; bool\"</p>\n<p>replacing</p>\n<p>types 'a set = \"'a =&gt; bool\".</p>\n<p>Brendan</p>\n<p>IMPORTANT: This email remains the property of the Australian Defence Organisation and is subject to the jurisdiction of section 70 of the CRIMES ACT 1914.  If you have received this email in error, you are requested to contact the sender and delete the email.</p>",
        "id": 294069885,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660826775
    },
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\nBrendan, you are certainly right that in some situations proofs are less<br>\nautomatic. We were aware of this but found that in the theories we have<br>\naccess to it was not too bad, only a few times per theory on average.<br>\nHowever we concede that depending on your application this could be<br>\nworse. I'm very sorry if you were particularly affected.</p>\n<p>Concerning boolean algebras (and lattices), we do intend to develop this<br>\nconnection further.</p>\n<p>Regards<br>\nTobias</p>\n<p>Dr. Brendan Patrick Mahony schrieb:</p>",
        "id": 294069936,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660826794
    },
    {
        "content": "<p>From: \"Dr. Brendan Patrick Mahony\" &lt;<a href=\"mailto:brendan.mahony@dsto.defence.gov.au\">brendan.mahony@dsto.defence.gov.au</a>&gt;<br>\nThe latest problem encountered in in developing instances of  <br>\naxclasses. No set type means no set instance claims for axclasses.  <br>\nObviously function type instance proofs are very different.</p>\n<p>Brendan</p>\n<hr>\n<p>Dr Brendan Mahony<br>\nC3I Division                                    ph +61 8 8259 6046<br>\nDefence Science and Technology Organisation     fx +61 8 8259 5589<br>\nEdinburgh, South Australia      <a href=\"mailto:Brendan.Mahony@dsto.defence.gov.au\">Brendan.Mahony@dsto.defence.gov.au</a></p>\n<p>Important: This document remains the property of the Australian<br>\nGovernment Department of Defence and is subject to the jurisdiction<br>\nof the Crimes Act section 70. If you have received this document in<br>\nerror, you are requested to contact the sender and delete the document.</p>\n<p>IMPORTANT: This email remains the property of the Australian Defence Organisation and is subject to the jurisdiction of section 70 of the CRIMES ACT 1914.  If you have received this email in error, you are requested to contact the sender and delete the email.</p>",
        "id": 294070374,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660826945
    },
    {
        "content": "<p>From: Stefan Berghofer &lt;<a href=\"mailto:berghofe@in.tum.de\">berghofe@in.tum.de</a>&gt;<br>\nDr. Brendan Patrick Mahony wrote:<br>\nHi Brendan,</p>\n<p>when porting the theories in the Isabelle distribution to the new encoding<br>\nof sets as predicates, we found that most of the instance proofs for sets<br>\ncould be replaced by appropriate instance proofs for functions and booleans<br>\nin a rather straightforward way. Could you give an example of an instance proof<br>\nfor sets that you could not easily replace by instance proofs for functions and<br>\nbooleans?</p>\n<p>Greetings,<br>\nStefan</p>",
        "id": 294070574,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660827008
    }
]