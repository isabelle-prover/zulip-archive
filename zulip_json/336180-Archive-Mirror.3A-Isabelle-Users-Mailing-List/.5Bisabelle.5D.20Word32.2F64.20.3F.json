[
    {
        "content": "<p>From: Peter Lammich &lt;<a href=\"mailto:peter.lammich@uni-muenster.de\">peter.lammich@uni-muenster.de</a>&gt;<br>\nHi all,</p>\n<p>Is there any code-generator setup to generate 32/(64) bit integers with <br>\nmodulo-arithmetic, mapped on the corresponding SML type (Word32) ?<br>\nIn the logic, the type Word.word has the intended behaviour, but how to <br>\nget,e.g., \"32 word\", mapped to SML's \"Word32\" ?</p>\n<p>Best,<br>\n  Peter</p>",
        "id": 294098775,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660833123
    },
    {
        "content": "<p>From: Florian Haftmann &lt;<a href=\"mailto:florian.haftmann@informatik.tu-muenchen.de\">florian.haftmann@informatik.tu-muenchen.de</a>&gt;<br>\nHi Peter,</p>\n<p>there is, as far as I remember, a default setup for code generation for<br>\ntype 'a word, but no mapping to any target-language-specific types.  If<br>\nthis is desired, it would be required to wrap up type expressions like<br>\ne.g. \"64 word\" into a dedicated type, say, \"word64\", to have dedicated<br>\ntypes for all the different 'a word instances.  This wrapping is simple<br>\nbut cumbersome to do.</p>\n<p>Hope this helps,<br>\n    Florian<br>\n<a href=\"/user_uploads/14278/LGck0JyHvNwx7d3I1Gjs6KsW/signature.asc\">signature.asc</a></p>",
        "id": 294098815,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660833136
    },
    {
        "content": "<p>From: Rafal Kolanski &lt;<a href=\"mailto:rafalk@cse.unsw.edu.au\">rafalk@cse.unsw.edu.au</a>&gt;<br>\nPeter,</p>\n<p>This topic is of interest to me. At the isabelle users workshop in <br>\nMunich last year I had a long discussion with Florian about precisely <br>\nthis. The answer seemed to be \"not with the current code generator\", and <br>\nhis argument felt convincing enough for me to leave that approach alone.</p>\n<p>One approach for high-performance code seems to be going in reverse, <br>\ni.e. parsing annotated SML/C/Haskell/whatever into Isabelle, where you <br>\ncan pick your own translation, but have to pay by having to specify the <br>\nsemantics also.</p>\n<p>That or trying to write your own code generator, which might be... <br>\ninteresting.</p>\n<p>Sincerely,</p>\n<p>Rafal Kolanski.</p>\n<p>Peter Lammich wrote:</p>",
        "id": 294098874,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660833154
    },
    {
        "content": "<p>From: Florian Haftmann &lt;<a href=\"mailto:florian.haftmann@informatik.tu-muenchen.de\">florian.haftmann@informatik.tu-muenchen.de</a>&gt;<br>\nHi all,</p>\n<p>to be more precise, what we would need is a tool which inside the logic<br>\nlifts operations on type \"64 word\" to a dedicated type \"word64\".  What<br>\ncould already provide helpful assistance is the \"transfer\" tool by Amine<br>\nChaieb and Jeremy Avigad, whose basic usage can be followed in<br>\nsrc/HOL/Nat_Transfer.thy.</p>\n<p>Hope this helps<br>\n    Florian<br>\n<a href=\"/user_uploads/14278/HvYdU2XMDkrX3UcIlvOKhhIw/signature.asc\">signature.asc</a></p>",
        "id": 294098925,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660833167
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nBTW, \"high-performance\" in SML (as implemented in Poly/ML) means to use <br>\nthe default int, i.e. the proper mathematical (unbounded) integers, not <br>\nmachine words.  Poly/ML optimizes the representation of values for the <br>\ndemands of symbolic computation, not for bare metal operations. So proper <br>\nints, lists (cons cells), datatypes are fast, but Word32 is really slow.</p>\n<p>Makarius</p>",
        "id": 294101409,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660833896
    },
    {
        "content": "<p>From: Michael Norrish &lt;<a href=\"mailto:Michael.Norrish@nicta.com.au\">Michael.Norrish@nicta.com.au</a>&gt;<br>\nBut then, if you are emitting SML, and really wanting speed, you'll probably compile with MLton; at least until you can emit code to exploit Poly/ML threads.  MLton uses the gmp library to implement its IntInf structure, so if you target that explicitly, you will get infinite integers.  Otherwise, you will get native machine integers.</p>\n<p>Michael.</p>",
        "id": 294101680,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660833963
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nIn the \"long\" form Poly/ML integers are definitely slower than anything <br>\nmore modern out there (even Java BigInt which appears to be pure Java). <br>\nBut the nice thing about the default int type in Poly/ML is that you get <br>\nalmost full speed machine arithmetic until you degrade gracefully to the <br>\nlong form.  This works, because 1 or 2 bits are sacrificed for tagging of <br>\nvalues.</p>\n<p>So the reason why Word32 is slow (it needs to be boxed) is the same reason <br>\nwhy proper int is fast (a machine word can be either a \"short\" int, or a <br>\nboxed \"long\" one).</p>\n<p>While this tagging business appears to be ancient LISP technology, nobody <br>\nappears to be using it in the C-derived universe (including Java).  This <br>\nis one of the reasons why there is now so much opportunity to do <br>\nverification involving unsafe word arithmetic as we all know ...</p>\n<p>Makarius</p>",
        "id": 294101901,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660834031
    }
]