[
    {
        "content": "<p>From: <a href=\"mailto:sudbrock@cs.tu-darmstadt.de\">sudbrock@cs.tu-darmstadt.de</a><br>\nHi all,</p>\n<p>I am looking for a way to define algebraic structures<br>\nlike, for instance, modules over rings or vector spaces<br>\nover fields in Isabelle/HOL. In particular, I want to<br>\nformulate statements like the following: \"The product of<br>\ntwo vector spaces over a field K is a vector space over<br>\nthe field K.\"</p>\n<p>As far as I see, this is possible using 'typedef' to<br>\ndefine a type as follows (for vector spaces):</p>\n<p>typedef ('K, 'V) vectorspace = \"{<br>\n  (zero :: 'V, <br>\n   add :: 'V =&gt; 'V =&gt; 'V,<br>\n   inverse :: 'V =&gt; 'V,<br>\n   scalarmult :: 'K =&gt; 'V =&gt; 'V<br>\n   (* ... *)<br>\n    (ALL v. (add v zero) = v)<br>\n  &amp; (ALL v v'. (add v v') = (add v' v))<br>\n  (* ... *)<br>\n}\" </p>\n<p>As working with typedef-ed types seems somewhat<br>\ncumbersome, and concepts like Haskell-style type classes<br>\nor locales seem to be useful for algebraic structures (as<br>\nalgebraic structures are used in the running examples in<br>\nthe documentation), I am wondering if I should rather use<br>\none of those two concepts.</p>\n<p>However, as far as I found out, type classes support only<br>\none type parameter (while I need two, one for the<br>\nunderlying ring/field, and one for the abelian group of<br>\nthe module/vector space). Is there a reason for this<br>\nrestriction of type classes?</p>\n<p>Concerning locales, I found the vectorspace-locale of the<br>\nHahnBanach-theory within the Isabelle library. However, I<br>\ndo not see how to define functions like \"the product of<br>\ntwo vector spaces\" (which would map two instantiations of<br>\nthe locale to a third instantiation of the locale) for<br>\nsuch a locale. Is there any way to define such functions?</p>\n<p>Or is there perhaps another \"standard\" or \"recommended\"<br>\nway to define such structures in Isabelle/HOL?</p>\n<p>Best regards,<br>\nHenning</p>",
        "id": 294114044,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660837720
    },
    {
        "content": "<p>From: Johannes HÃ¶lzl &lt;<a href=\"mailto:hoelzl@in.tum.de\">hoelzl@in.tum.de</a>&gt;<br>\nAm Donnerstag, den 12.08.2010, 17:20 +0200 schrieb<br>\n<a href=\"mailto:sudbrock@cs.tu-darmstadt.de\">sudbrock@cs.tu-darmstadt.de</a>:</p>\n<blockquote>\n<p>Hi all,</p>\n<p>I am looking for a way to define algebraic structures<br>\nlike, for instance, modules over rings or vector spaces<br>\nover fields in Isabelle/HOL. In particular, I want to<br>\nformulate statements like the following: \"The product of<br>\ntwo vector spaces over a field K is a vector space over<br>\nthe field K.\"<br>\n[..]<br>\nConcerning locales, I found the vectorspace-locale of the<br>\nHahnBanach-theory within the Isabelle library. However, I<br>\ndo not see how to define functions like \"the product of<br>\ntwo vector spaces\" (which would map two instantiations of<br>\nthe locale to a third instantiation of the locale) for<br>\nsuch a locale. Is there any way to define such functions?</p>\n</blockquote>\n<p>When you use locales you get a predicate which describes your locale.</p>\n<p>locale vector_space = <br>\n  fixes zero, add, ...<br>\n  assumes \"...\"</p>\n<p>To prove that a product of two vector spaces is again a vector space,<br>\nyou can use the predicates:</p>\n<p>lemma vector_space_product:<br>\n  assumes \"vector_space z1 add1 ...\"<br>\n  assumes \"vector_space z2 add2 ...\"<br>\n  shows \"vector_space (z1, z2) ...\"<br>\nproof -<br>\n  (* Use interpret to get all you locale lemmas and definitions *)<br>\n  interpret vs1: vector_space z1 add1 ... by fact<br>\n  interpret vs2: vector_space z2 add2 ... by fact</p>\n<p>...<br>\n  show ?thesis ...<br>\nqed</p>\n<blockquote>\n<p>Or is there perhaps another \"standard\" or \"recommended\"<br>\nway to define such structures in Isabelle/HOL?</p>\n</blockquote>\n<p>The recommended way is to use locales. Even type classes are based on<br>\nlocales.</p>\n<p>Often the locale parameters for algebraic structures are packaged into a<br>\nrecord:</p>\n<p>record 'v 'k vector_space = 'v monoid +<br>\n  scalar :: \"'k =&gt; 'v =&gt; 'v\"</p>\n<p>See also src/HOL/Algebra for application of locales to algebraic<br>\nstructures.</p>\n<p>Greetings,<br>\n  Johannes</p>\n<blockquote>\n<p>Best regards,<br>\nHenning</p>\n</blockquote>",
        "id": 294114340,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660837803
    }
]