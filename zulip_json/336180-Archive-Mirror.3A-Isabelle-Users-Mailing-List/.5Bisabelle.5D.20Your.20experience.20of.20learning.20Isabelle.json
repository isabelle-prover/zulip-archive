[
    {
        "content": "<p>From: \"Pal, Abhik\" &lt;<a href=\"mailto:ab.pal@jacobs-university.de\">ab.pal@jacobs-university.de</a>&gt;<br>\nDear all,</p>\n<p>I'm writing on behalf of the Hilbert-10 workgroup at Jacobs<br>\nUniversity, Bremen --- a small team of second-year undergraduate<br>\nstudents working on a formalization of Yuri Matiyasevich's proof of<br>\nHilbert's Tenth problem in Isabelle.</p>\n<p>We are trying to consolidate our experience of working on a theorem<br>\nprover as a submission to CICM [1]. In our submission we don't tackle<br>\nthe formalization but reflect on the process itself. In particular, we<br>\ndiscuss how we as a group of inexperienced undergraduates with no<br>\nprior theorem proving experience decided to tackle the formalization<br>\nof a non-trivial mathematical result.</p>\n<p>Hence, we are interested in hearing your experience of learning to use<br>\na theorem prover.  In particular, we're interested in</p>\n<ul>\n<li>\n<p>your academic background when you learnt to use a theorem prover.<br>\n  What parts of your formal education made it easier to actually<br>\n  understand theorem proving?</p>\n</li>\n<li>\n<p>in retrospect, what were the gaps in knowledge you had when you got<br>\n  started?</p>\n</li>\n<li>\n<p>what were the common mistakes you made? What concepts were difficult<br>\n  to understand?</p>\n</li>\n<li>\n<p>anything else about the experience of learning a theorem prover.</p>\n</li>\n</ul>\n<p>Broadly, we would also like to use this as an opportunity to generate<br>\na discussion around the usability of theorem provers themselves and<br>\nmaking them more accessible.</p>\n<p>We would love to know what you think!</p>\n<hr>\n<p>Abhik</p>\n<p>[1]: Tentative abstract:</p>\n<p>How difficult are theorem provers to use for beginners? We<br>\n     respond by reviewing the formalization of the DPRM theorem in<br>\n     Isabelle carried out by an undergraduate research group at Jacobs<br>\n     University, Bremen. We argue that theorem provers are feasible.<br>\n     However, we also survey the factors that keep beginners from<br>\n     using them effectively and propose specific measures to make the<br>\n     field more accessible to new users. Broadly, we advocate for an<br>\n     increased adoption and regular use of theorem provers in<br>\n     mathematical research.<br>\n<a href=\"/user_uploads/14278/6PrVHLNx9cTK_5ix8_QgiSRn/0xBC35C23EB221FB65.asc\">0xBC35C23EB221FB65.asc</a><br>\n<a href=\"/user_uploads/14278/Bx0dmLVdZ33_LIsX5doOq_nu/signature.asc\">signature.asc</a></p>",
        "id": 294751311,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661195581
    },
    {
        "content": "<p>From: José Manuel Rodríguez Caballero &lt;<a href=\"mailto:josephcmac@gmail.com\">josephcmac@gmail.com</a>&gt;<br>\nHello Abhik,<br>\n  It is a pleasure to share my experiences about learning Isabelle/HOL<br>\n(below: Q for Question and A for Answer). Please correct my English if<br>\nthere are some mistakes.</p>\n<p>Q: Your academic background when you learnt to use a theorem prover.</p>\n<p>A: I learned Isabelle/HOL, in a self-taught way (from the manuals), having<br>\na Master degree in Pure Mathematics. Before that, I learned Coq, again in a<br>\nself-taught way (from the manuals).</p>\n<hr>\n<p>Q: What parts of your formal education made it easier to actually<br>\nunderstand theorem proving?</p>\n<p>A: A course on Formal Set Theory given by Prof. Alexander Shnirelman at<br>\nConcordia University.</p>\n<hr>\n<p>Q: In retrospect, what were the gaps in knowledge you had when you<br>\ngot started?</p>\n<p>A: Type Theory was the main gap. In general, it is not part of the<br>\nbackground in Pure Mathematics. I learned homotopy type theory from the<br>\nvideo-lectures given by Robert Harper. My access to these lectures was by<br>\nmeans of YouTube.</p>\n<hr>\n<p>Q: What were the common mistakes you made?</p>\n<p>A: The main mistakes were related to the types, e.g., (1::nat) is not the<br>\nsame as (1::real). This was, again, because of the lack of background in<br>\ntype theory. Nevertheless, it was easy to get used to this new way of<br>\nthinking.</p>\n<hr>\n<p>Q: What concepts were difficult to understand?</p>\n<p>A: For me, the most difficult concept to understand was the difference<br>\nbetween dependent type theory (Coq) and simple type theory (Isabelle/HOL).<br>\nWhen someone learns Coq first, he/she tries to work in the same way in<br>\nIsabelle/HOL, but this is counterproductive. Isabelle/HOL deserves its own<br>\nway of thinking. So, I recommend to learn Isabelle/HOL first and then Coq.</p>\n<hr>\n<p>Q: Anything else about the experience of learning a theorem prover.</p>\n<p>A: I think that the best way to begin to practice Isabelle/HOL is to do<br>\nelementary number theory, e.g., to prove Bezout's Identity, Fermat's Little<br>\nTheorem, Wilson's Theorem, etc. These results can be easily formalized. It<br>\nis important to understand the mathematics before to begin the<br>\nformalization: never formalize something that you do not understand. It is<br>\nimportant to begin with the statement of the theorem and then to prove it<br>\nunder the assumption that some lemmas are proved (use the keyword \"sorry\"),<br>\nand repeat this process until the end. Finally, take coffee naps of 20-30<br>\nminutes every 4 hours, it eliminates brain fatigue (don't fear the<br>\nnosebleed, in most cases, it does not come from the brain).</p>\n<p>Sincerely yours,<br>\nJosé Manuel Rodriguez Caballero</p>\n<p><a href=\"https://www.researchgate.net/profile/Jose_Rodriguez_Caballero2\">https://www.researchgate.net/profile/Jose_Rodriguez_Caballero2</a></p>",
        "id": 294751365,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661195600
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nThe problem is also the use of the same words for slightly different<br>\nthings. The difference of \"dependent type theory\" vs. \"simple type<br>\ntheory\" is not just in \"dependent\" vs. \"simple\", but also in \"type<br>\ntheory\" vs. \"type theory\".</p>\n<p>Even Coq and HOL experts can get fooled by this. There are very few<br>\npeople who know both worlds sufficiently well to understand this<br>\nmisunderstanding.</p>\n<p>Makarius</p>",
        "id": 294751375,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661195607
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nHopefully many Isabelle users will provide you some input for the paper.<br>\nSuch experience reports are very important for the progress of the<br>\nprover communities.</p>\n<p>CICM is a good place for such \"soft\" contributions, beyond the hard<br>\nformalizations. (Note that I will be there myself this year, as an<br>\ninvited speaker of the MKM track.)</p>\n<p>Makarius<br>\n<a href=\"/user_uploads/14278/PXIiSRkrcG64RkLeoxyNfsl6/signature.asc\">signature.asc</a></p>",
        "id": 294751399,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661195618
    },
    {
        "content": "<p>From: Freek Wiedijk &lt;<a href=\"mailto:freek@cs.ru.nl\">freek@cs.ru.nl</a>&gt;<br>\nDear Makarius,</p>\n<p>I don't know what the difference is, these strings seem<br>\nidentical to me :-)  Let's see:</p>\n<p>% ocaml<br>\n        OCaml version 4.06.1</p>\n<h1>\"type theory\" == \"type theory\";;</h1>\n<ul>\n<li>: bool = false</li>\n</ul>\n<h1></h1>\n<p>% </p>\n<p>Ah no, you're right, they _are_ different!  (And apologies<br>\nfor running OCaml 4.06.1 instead of 4.07.0, this has<br>\nsomething to do with a project that I am in which is at<br>\nsome version of VST.  I think.)</p>\n<p>For me the difference between Isabelle's type theory (\"simple<br>\ntype theory\") and Coq's type theory (\"dependent type theory\")<br>\nis that in the first you have a unified framework in which<br>\nterms and formulas are the same thing (typed lambda terms),<br>\nwhile in the second, the terms, formulas _and_ proofs are<br>\nall the same kind of thing (again: typed lambda terms).</p>\n<p>So the main difference is the use in dependent type theory of<br>\nthe Curry-Howard isomorphism, and the resulting possibility<br>\nfor functions to take \"proof objects\" as arguments.</p>\n<p>For example, in Coq the division operator (for an appropriate<br>\nversion of division) takes _three_ arguments: x, y, and<br>\na proof that y &lt;&gt; 0.  This means that the term 0/0 is a<br>\n_function,_ from proofs of 0 &lt;&gt; 0 to numbers.</p>\n<p>Freek</p>",
        "id": 294751431,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661195631
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nOn 22/02/2019 18:38, Freek Wiedijk wrote:</p>\n<blockquote>\n<blockquote>\n<p>The problem is also the use of the same words for slightly different<br>\nthings. The difference of \"dependent type theory\" vs. \"simple type<br>\ntheory\" is not just in \"dependent\" vs. \"simple\", but also in \"type<br>\ntheory\" vs. \"type theory\".</p>\n</blockquote>\n<p>% ocaml<br>\n        OCaml version 4.06.1</p>\n<h1>\"type theory\" == \"type theory\";;</h1>\n<ul>\n<li>: bool = false</li>\n</ul>\n</blockquote>\n<p>Nice illustration :-)</p>\n<blockquote>\n<p>For me the difference between Isabelle's type theory (\"simple<br>\ntype theory\") and Coq's type theory (\"dependent type theory\")<br>\nis that in the first you have a unified framework in which<br>\nterms and formulas are the same thing (typed lambda terms),<br>\nwhile in the second, the terms, formulas _and_ proofs are<br>\nall the same kind of thing (again: typed lambda terms).</p>\n</blockquote>\n<p>You wrote \"Isabelle\" and probably meant the Isabelle/HOL library.<br>\nIsabelle as a logical framework was invented by Larry Paulson to<br>\nformalize variants of Martin-Löf Type Theory. In restrospect it might be<br>\ninteresting to look what was missing to make this really work out: the<br>\nIsabelle/HoTT threads on this mailing list could be a starting point for<br>\nthat.</p>\n<p>Coq users typically develop a certain mindset of what a \"type\" is and<br>\nhow it is used in formalizations: it is more about logic than about<br>\nclassic use of types for abstract syntax. E.g. when a Coq user says<br>\n\"type checking\" (for \"proof checking\"), a HOL user will usually<br>\nmisunderstand that as a false-friend.</p>\n<blockquote>\n<p>So the main difference is the use in dependent type theory of<br>\nthe Curry-Howard isomorphism, and the resulting possibility<br>\nfor functions to take \"proof objects\" as arguments.</p>\n<p>For example, in Coq the division operator (for an appropriate<br>\nversion of division) takes _three_ arguments: x, y, and<br>\na proof that y &lt;&gt; 0.  This means that the term 0/0 is a<br>\n_function,_ from proofs of 0 &lt;&gt; 0 to numbers.</p>\n</blockquote>\n<p>In such situations I am often glad that HOL cannot do this. Cf. the<br>\nparallel thread on the HOL mailing list about \"0 / 0 = 0 ???\".</p>\n<p>Makarius</p>",
        "id": 294751505,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661195643
    },
    {
        "content": "<p>From: \"Dr A. Koutsoukou-Argyraki\" &lt;<a href=\"mailto:ak2110@cam.ac.uk\">ak2110@cam.ac.uk</a>&gt;<br>\nDear Abhik and team,</p>\n<p>first of all congratulations on your initiative and your very <br>\ninteresting work.<br>\nI attended a presentation on your project back in July in Oxford- it <br>\nlooks like you are doing a great job.</p>\n<p>Right now I am also in the process of writing a \"beginner's experience\"/ <br>\nreview  report on my Isabelle experience,<br>\nand I can share it with you when I finish it, if you like.</p>\n<p>(I started using Isabelle a bit over a year ago, working in Lawrence <br>\nPaulson's ALEXANDRIA project at the University of Cambridge, and I got <br>\nmy PhD in pure Mathematics around 2 years ago)</p>\n<p>Best wishes,<br>\nAngeliki</p>\n<hr>\n<p>Dr Angeliki Koutsoukou-Argyraki</p>\n<p>Research Associate<br>\nFellow of St Edmund’s College</p>\n<p>Computer Laboratory<br>\n15 JJ Thomson Avenue<br>\nUniversity of Cambridge<br>\nCB3 0FD, UK<br>\nak2110[at]cam[dot]ac[dot]uk<br>\n<a href=\"https://www.cl.cam.ac.uk/~ak2110/\">https://www.cl.cam.ac.uk/~ak2110/</a></p>",
        "id": 294751549,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661195662
    }
]