[
    {
        "content": "<p>From: Mikhail Chekhov &lt;<a href=\"mailto:mikhail.chekhov.w@gmail.com\">mikhail.chekhov.w@gmail.com</a>&gt;<br>\nDear All,</p>\n<p>Recently, I found myself spending more and more time experimenting with<br>\n\"ZFC in HOL\". While most of my experiments are \"work in progress\", I was<br>\nable to compile a certain number of further foundational results that I<br>\nfound useful when reasoning about small classes (binary relations, partial<br>\nfunctions or correspondences, infinite Cartesian products and other<br>\noperations on indexed families, finite sequences or lists) in an<br>\nindependent development that I consider to be in a reasonably mature state.<br>\nIn particular, I have tried (with moderate success) to (heuristically)<br>\ntrain the classical reasoner and simplifier for most expected commonly<br>\noccurring patterns.</p>\n<p>I have made the aforementioned development publicly available from my<br>\nrepository: <a href=\"https://gitlab.com/mikhail.chekhov/zfc_hol_foundations\">https://gitlab.com/mikhail.chekhov/zfc_hol_foundations</a>.<br>\nPerhaps, someone else will also find it useful. Also, naturally, I always<br>\nappreciate constructive feedback on my work.</p>\n<p>As a side note, I found it particularly enjoyable to do applied<br>\nformalization work within \"V\" in \"ZFC in HOL\". Somehow, with this approach,<br>\nall concepts can be transferred from textbooks as they are written without<br>\nthe need to invent new patterns around the type theory. Of course, in this<br>\nsense, it is not too different from Isabelle/ZF, but it has all the<br>\nadvantages of being (potentially) interfaced/integrated with all other<br>\nutilities developed specifically for HOL (e.g.<br>\ntransfer/function/inductive/code generation/etc).</p>\n<p>Thank you,<br>\nMikhail Chekhov</p>",
        "id": 294767799,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661202738
    },
    {
        "content": "<p>From: Lawrence Paulson &lt;<a href=\"mailto:lp15@cam.ac.uk\">lp15@cam.ac.uk</a>&gt;<br>\nI am very glad to hear that people are taking advantage of my AFP entry. So I had better give notice that some changes are underway, some of them already visible in the development version, which will become part of the release version later in 2020. Some of these changes are incremental, others are significant.</p>\n<p>The main change involves generalising the notion of an order type to relations involving any type rather than simply type V. This requires generalising the notion of a small set to arbitrary types: a set counts as small if it can be injected into the extension of a ZF set. Through the type class setup, any set of reals (for example) is trivially small. All this is already in the development version.</p>\n<p>Further developments have not yet been uploaded. These include ordinal exponentiation, Cantor normal form and the notion of indecomposable ordinals.</p>\n<p>Larry Paulson</p>",
        "id": 294823361,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661243209
    }
]