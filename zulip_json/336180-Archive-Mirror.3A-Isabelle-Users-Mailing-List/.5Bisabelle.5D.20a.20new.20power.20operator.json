[
    {
        "content": "<p>From: Johannes Hölzl &lt;<a href=\"mailto:hoelzl@in.tum.de\">hoelzl@in.tum.de</a>&gt;<br>\nHi Noam,</p>\n<p>for 2. you can not enforce anything, if you chose (THE x. False) it may<br>\nbe also = 0 or = 1, you just can not prove it. This makes only sense if<br>\nyou want to have the option to change the value later on. In a total<br>\nlogic like HOL we usually fix it to a default value, like 0 (or in this<br>\ncase 1).</p>\n<p>I think a simpler definition of mrpow would be:<br>\n   x ** y = (if y : Nats then x ^ nat (floor y)<br>\n        else if - y : Nats then (1 / x) ^ nat (floor (-y))<br>\n        else x powr y)</p>\n<p>Then you can prove:<br>\n  0 &lt; x ==&gt; x ** y = x powr y<br>\n  x ** real n = x ^ n<br>\n  x ** - real n = (1 / x) ^ n</p>\n<p>Of course you get x ** 0 = 1, but just imagine that<br>\n(THE x. False) = 1 ;-)</p>\n<p>Another question is: <br>\n  What are your application for this operator?</p>\n<p>Maybe an extension of ^ to integers would be enough?</p>\n<p>ipow :: 'a::field =&gt; int =&gt; 'a<br>\nipow x 0 = 1<br>\nipow x (- n) = (1 / x) ^ n<br>\nipow x (+ n) = x ^ n</p>\n<p>- Johannes</p>",
        "id": 294652664,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661166738
    },
    {
        "content": "<p>From: noam neer &lt;<a href=\"mailto:noamneer@gmail.com\">noamneer@gmail.com</a>&gt;<br>\nhi,</p>\n<p>as far as I understand now, (THE x. False) is treated by the system as some<br>\nreal number, fixed but unknown. u can prove things about it only if they<br>\nhold for all reals. this is quite satisfactory for me. also, I think the<br>\nbehavior of 'powr' for negative base is quite similar- it is defined using<br>\nthe logarithm of the base which is \"undefined\" in a very similar way. this<br>\nis different in Coq, where the real power behaves like u said and for<br>\nnegative base returns 1.</p>\n<p>thanx, noam</p>",
        "id": 294652673,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661166744
    },
    {
        "content": "<p>From: Johannes Hölzl &lt;<a href=\"mailto:hoelzl@in.tum.de\">hoelzl@in.tum.de</a>&gt;<br>\nHi Noam,</p>\n<p>yes THE x. False, SOME x. False, SOME x. True, undefined. This are all<br>\nfixed but unknown values. The main reason I prefer a default value like<br>\n0 is that such functions are easier to handle.</p>\n<p>For example to prove measurability of ln, or log one needs to prove that<br>\nthe ln is _constant_ for x &lt;= 0. So now \"THE x. False\" is not an<br>\narbitrary value but this specific one. Imagine ln was defined to be<br>\n  ln = SOME f. f = the_inv_on {0 &lt;..} exp<br>\nthen we can prove measurability only for the non-negative reals, which<br>\nis very annoying.</p>\n<p>TL;DR using THE x. False or any other 'undefined' value is annoying and<br>\ndoes not buy you anything...</p>\n<ul>\n<li>Johannes</li>\n</ul>",
        "id": 294652691,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661166751
    },
    {
        "content": "<p>From: noam neer &lt;<a href=\"mailto:noamneer@gmail.com\">noamneer@gmail.com</a>&gt;<br>\nhi,</p>\n<p>I'm looking for a power operator for real numbers that is closer to the<br>\nmathematical conventions of real analysis than either ^ or powr. if we<br>\ndenote it by **, my requirements from it are</p>\n<ol>\n<li>its type is \"real =&gt; real =&gt; real\".</li>\n<li>\n<p>0**y is undefined for y&lt;=0.<br>\n    (formally it can be (THE x. False). note that the definition of '0^0=1'<br>\nis appropriate in algebra, combinatorics and set theory, but not in<br>\nanalysis.)</p>\n</li>\n<li>\n<p>for negative base and real integer exponent (that is, reals in the set<br>\nInts) the result should be the expected one.<br>\n    (powr, which is defined using the logarithm of the base, doesn't<br>\nsatisfy this.)</p>\n</li>\n</ol>\n<p>I'd like to know if anybody have already developed such an operator. If not<br>\nI guess I'll try it myself. a possible definition is</p>\n<p>definition mrpow :: \"real ⇒ real ⇒ real\"<br>\n    (infixr \"**\" 80)<br>\n    where \"x ** y == if   x&gt;0<br>\n                     then (x powr y)<br>\n                     else (if   x=0<br>\n                           then (if   y&gt;0<br>\n                                 then 0<br>\n                                 else (THE z::real. False))<br>\n                           else (if   y ∈ Ints<br>\n                                 then (if   y ≥ 0<br>\n                                       then    x ^(nat(  floor y))<br>\n                                       else (1/x)^(nat(- floor y)))<br>\n                                 else (THE z::real. False)<br>\n                                )<br>\n                          )\"</p>\n<p>and if necessary I'll work on proving its properties until it is easy to<br>\nuse. again any comments or suggestions are welcome.</p>",
        "id": 294655179,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661167748
    }
]