[
    {
        "content": "<p>From: Gergely Buday &lt;<a href=\"mailto:buday.gergely@uni-eszterhazy.hu\">buday.gergely@uni-eszterhazy.hu</a>&gt;<br>\nHi,</p>\n<p>I have proved a simple associativity rule and tried to prove commutativity of an addition function:</p>\n<p>theory Add</p>\n<p>imports Main</p>\n<p>begin</p>\n<p>datatype natural = Zero | Succ natural</p>\n<p>primrec add :: \"natural ⇒ natural ⇒ natural\"</p>\n<p>where</p>\n<p>\"add Zero m = m\"</p>\n<p>| \"add (Succ n) m = Succ (add n m)\"</p>\n<p>lemma add_assoc: \"⋀ k m n . add k (add m n) = add (add k m) n \" </p>\n<p>proof -</p>\n<p>fix k m n</p>\n<p>show \"add k (add m n) = add (add k m) n\"</p>\n<p>proof (induct k arbitrary: m n)</p>\n<p>fix m n </p>\n<p>show \"add Zero (add m n) = add (add Zero m) n\" </p>\n<p>proof (induct m arbitrary: n)</p>\n<p>fix n</p>\n<p>show \"add Zero (add Zero n) = add (add Zero Zero) n\" by simp</p>\n<p>next</p>\n<p>fix m n </p>\n<p>assume \"⋀n. add Zero (add m n) = add (add Zero m) n\"</p>\n<p>from this show \"add Zero (add (Succ m) n) = add (add Zero (Succ m)) n\" by simp</p>\n<p>qed</p>\n<p>next</p>\n<p>fix k m n</p>\n<p>assume \"⋀m n. add k (add m n) = add (add k m) n\"</p>\n<p>from this show \"add (Succ k) (add m n) = add (add (Succ k) m) n\" by simp</p>\n<p>qed</p>\n<p>qed</p>\n<p>text{*</p>\n<p>Questions: </p>\n<ul>\n<li>\n<p>is it usually better in an induction proof to name the other variables as arbitrary? Does this make the proof easier?</p>\n</li>\n<li>\n<p>I have created this proof quite mechanically, copying premise as an assumption and the conclusion as the show clause. </p>\n<p>Is there a better proof strategy in general, and in particular for this proof?</p>\n</li>\n</ul>\n<p>*}</p>\n<p>lemma add_commute: \"⋀ m n. add m n = add n m\"</p>\n<p>proof -</p>\n<p>fix m n </p>\n<p>show \"add m n = add n m\"</p>\n<p>proof (induct m arbitrary: n)</p>\n<p>fix n</p>\n<p>show \"add Zero n = add n Zero\" </p>\n<p>proof (induct n)</p>\n<p>show \"add Zero Zero = add Zero Zero\" by simp</p>\n<p>next</p>\n<p>fix n </p>\n<p>assume \"add Zero n = add n Zero\"</p>\n<p>from this show \"add Zero (Succ n) = add (Succ n) Zero\" by simp</p>\n<p>qed</p>\n<p>next</p>\n<p>fix m n</p>\n<p>assume indhyp: \"⋀n. add m n = add n m\" </p>\n<p>from this show \"add (Succ m) n = add n (Succ m)\"</p>\n<hr>\n<p>I am stuck here. There is no way of rewriting Succ m in the second parameter of Succ. What is the way out of the bottle?</p>\n<p>Should I try another definition? </p>\n<p>Should I use the proven theory of builtin natural numbers, prove an adequacy theorem of + and this add function and use the commutativity of + ?, or I can make it without this recourse?</p>\n<ul>\n<li>Gergely</li>\n</ul>",
        "id": 294679396,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661176162
    },
    {
        "content": "<p>From: Alfio Martini &lt;<a href=\"mailto:alfio.martini@acm.org\">alfio.martini@acm.org</a>&gt;<br>\nHi Gergely,</p>\n<p>You need an auxiliary lemma. Using a slightly different notation. Here is a<br>\nvery old version.<br>\nI would not do it in this way nowadays :-)</p>\n<p>Best!</p>\n<p>lemma lem01:\"add zero n = n\"<br>\n    apply (induction n)<br>\n    apply (simp)<br>\n    apply (simp)<br>\ndone</p>\n<p>This is the auxiliary lemma!</p>\n<p>lemma lem02: \"∀x. suc (add x n) = add (suc x) n\"<br>\n    apply (induction n)<br>\n    apply (simp)<br>\n    apply (simp)<br>\ndone</p>\n<p>theorem th02a:\"∀x. add x n = add n x\"<br>\n     apply (induction n)<br>\n     apply (simp_all add:lem01 lem02)<br>\ndone</p>\n<p>Best!</p>",
        "id": 294679408,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661176168
    }
]