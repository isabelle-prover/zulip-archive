[
    {
        "content": "<p>From: Lars Noschinski &lt;<a href=\"mailto:noschinl@in.tum.de\">noschinl@in.tum.de</a>&gt;<br>\nOn 13.06.2015 15:59, noam neer wrote:</p>\n<blockquote>\n<p>sounds reasonable. however, when I give it to Isabelle I don't get an<br>\nerror message saying it can't match power_add to the goal,</p>\n</blockquote>\n<p>You wouldn't get an error message about this -- an equation not matching<br>\nthe goal is the rule, not the exception ;)</p>\n<blockquote>\n<p>I get some<br>\ncomplaint about type unknowns :</p>\n<p>lemma ?a ^ 6 = ?a ^ 3 * ?a ^ 3<br>\n    [1]SIMPLIFIER INVOKED ON THE FOLLOWING TERM:<br>\n    (⋀a m n. a ^ (m + n) = a ^ m * a ^ n) ⟹ a ^ 6 = a ^ 3 * a ^ 3<br>\n    [1]Cannot add premise as rewrite rule because it contains (type) unknowns:<br>\n    ⋀a m n. a ^ (m + n) = a ^ m * a ^ n<br>\n    Failed to apply initial proof method⌂:<br>\n    using this:<br>\n      ?a ^ (?m + ?n) = ?a ^ ?m * ?a ^ ?n<br>\n    goal (1 subgoal):<br>\n     1. a ^ 6 = a ^ 3 * a ^ 3</p>\n<p>what does it mean ?<br>\nThis means that that the simplifier falls over even earlier than I<br>\nthought: Isabelle/HOL cannot quantify over types, so polymorphic rules<br>\n(like power_add) are expressed by schematic type variables. If you do</p>\n</blockquote>\n<p>lemma<br>\n          fixes   a::real<br>\n          shows   \"a^6 = a^3 * a^3\"<br>\n        using power_add<br>\n        apply -</p>\n<p>you see that the schematic variables in power_add have been replaced by<br>\nuniversally quantified variables. However, if you Ctrl+Hover over the<br>\nbound variable \"a\", you see that it still has a schematic type. To use<br>\nit for rewriting, these variables must be instantiated. The simplifier<br>\ndoes not instantiate type variables (except in a few circumstances), so<br>\nit rejects this rule.</p>\n<p>For your experiments, you can instantiate the type variables in the<br>\nlemma by writing</p>\n<p>using power_add[where 'a=real]</p>\n<p>instead.</p>\n<p>-- Lars</p>",
        "id": 294643585,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661163132
    },
    {
        "content": "<p>From: noam neer &lt;<a href=\"mailto:noamneer@gmail.com\">noamneer@gmail.com</a>&gt;<br>\nhi.</p>\n<p>I have another simplifier question, possibly partly related to the previous<br>\none.<br>\nagain I have a proof that works-</p>\n<p>theory tmp<br>\nimports Complex_Main<br>\nbegin<br>\n    lemma<br>\n      fixes   a::real<br>\n      shows   \"a^6 = a^3 * a^3\"<br>\n    using [[simp_trace=true]]<br>\n    using power_add [of a 3 3]<br>\n    by simp<br>\nend</p>\n<p>and two that don't. the first failed proof is</p>\n<p>theory tmp<br>\nimports Complex_Main<br>\nbegin<br>\n    lemma<br>\n      fixes   a::real<br>\n      shows   \"a^6 = a^3 * a^3\"<br>\n    using [[simp_trace=true]]<br>\n    using power_add<br>\n    by simp<br>\nend</p>\n<p>where it seems strange that the smiplifier couldn't find by itself such a<br>\nsimple substitution. the second failed proof is</p>\n<p>theory tmp<br>\nimports Complex_Main<br>\nbegin<br>\n    lemma<br>\n      fixes   a::real<br>\n      shows   \"a^6 = a^3 * a^3\"<br>\n    using [[simp_trace=true]]<br>\n    by (simp add:power_add [of a 3 3])<br>\nend</p>\n<p>is the explanation here the same as before, that in this way<br>\n\"power_add [of a 3 3]\" is not available to the linear arith component?<br>\nit seems that the simplifier could have done it by itself if it only knew<br>\nthat \"6=3+3\". isn't there a way to inform it of this? it seems very<br>\nrudimentary.</p>\n<p>thanx</p>",
        "id": 294646617,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661164354
    },
    {
        "content": "<p>From: Lars Noschinski &lt;<a href=\"mailto:noschinl@in.tum.de\">noschinl@in.tum.de</a>&gt;<br>\nOn 07.06.2015 01:30, noam neer wrote:</p>\n<p>[simplifier questions]</p>\n<p>The simplifier performs (primarily) rewriting. A term t will be<br>\nrewritten with an equation s = s' if there is some substitution of the<br>\nvariables σ, such that t is syntactically equal to sσ. Then t is<br>\nreplaced by s'σ. The simplifier tries to do this for all subterms of the<br>\ngoal.</p>\n<p>Recall, power_add is the theorem: ?a ^ (?m + ?n) = ?a ^ ?m * ?a ^ ?n</p>\n<p>Now, for your proof attempts:</p>\n<blockquote>\n<p>lemma<br>\n     fixes   a::real<br>\n     shows   \"a^6 = a^3 * a^3\"<br>\n   using [[simp_trace=true]]<br>\n   using power_add [of a 3 3]<br>\n   by simp </p>\n</blockquote>\n<p>This works as the simplifier can rewrite \"3 + 3\" to 6 and can then solve<br>\nthe goal by rewriting with \"a^6 = a^3 * a^3\".</p>\n<blockquote>\n<p>using power_add</p>\n</blockquote>\n<p>The simplifier cannot rewrite \"?m + ?n\" to anything. It also does not match the \"6\" in the goal.</p>\n<blockquote>\n<p>apply (simp add: power_add)</p>\n</blockquote>\n<p>Similar. \"a^6\" does not match \"?a ^ (?m + ?n)\".</p>\n<p>In my opinion, the nicest proof is:</p>\n<p>apply (simp add: power_add[symmetric])</p>\n<p>The [symmetric] reverses the equation.</p>\n<p>-- Lars</p>",
        "id": 294646625,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661164359
    },
    {
        "content": "<p>From: noam neer &lt;<a href=\"mailto:noamneer@gmail.com\">noamneer@gmail.com</a>&gt;<br>\nthanx for the explanation.<br>\nhowever, note that in the third proof I didn't write</p>\n<blockquote>\n<p>apply (simp add: power_add)</p>\n</blockquote>\n<p>but</p>\n<blockquote>\n<p>by (simp add:power_add [of a 3 3])</p>\n</blockquote>\n<p>so I'm adding \"a^(3+3)=a^3 * a^3\" to the simp set.<br>\nthis doesn't match directly, but why wasn't the simplifier able<br>\nto simplify it to \"a^6 = a^3 * a^3\" ?</p>\n<p>On Sun, Jun 7, 2015 at 10:12 AM, Lars Noschinski &lt;<a href=\"mailto:noschinl@in.tum.de\">noschinl@in.tum.de</a>&gt; wrote:</p>\n<blockquote>\n<p>On 07.06.2015 01:30, noam neer wrote:</p>\n<p>[simplifier questions]</p>\n<p>The simplifier performs (primarily) rewriting. A term t will be<br>\nrewritten with an equation s = s' if there is some substitution of the<br>\nvariables σ, such that t is syntactically equal to sσ. Then t is<br>\nreplaced by s'σ. The simplifier tries to do this for all subterms of the<br>\ngoal.</p>\n<p>Recall, power_add is the theorem: ?a ^ (?m + ?n) = ?a ^ ?m * ?a ^ ?n</p>\n<p>Now, for your proof attempts:</p>\n<blockquote>\n<p>lemma<br>\n     fixes   a::real<br>\n     shows   \"a^6 = a^3 * a^3\"<br>\n   using [[simp_trace=true]]<br>\n   using power_add [of a 3 3]<br>\n   by simp</p>\n</blockquote>\n<p>This works as the simplifier can rewrite \"3 + 3\" to 6 and can then solve<br>\nthe goal by rewriting with \"a^6 = a^3 * a^3\".</p>\n<blockquote>\n<p>using power_add</p>\n</blockquote>\n<p>The simplifier cannot rewrite \"?m + ?n\" to anything. It also does not<br>\nmatch the \"6\" in the goal.</p>\n<blockquote>\n<p>apply (simp add: power_add)</p>\n</blockquote>\n<p>Similar. \"a^6\" does not match \"?a ^ (?m + ?n)\".</p>\n<p>In my opinion, the nicest proof is:</p>\n<p>apply (simp add: power_add[symmetric])</p>\n<p>The [symmetric] reverses the equation.</p>\n<p>-- Lars</p>\n</blockquote>",
        "id": 294646636,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661164365
    },
    {
        "content": "<p>From: Manuel Eberl &lt;<a href=\"mailto:eberlm@in.tum.de\">eberlm@in.tum.de</a>&gt;<br>\nEquations added to the simp set are not simplified themselves, so the <br>\nsimplifier will only rewrite \"a^(3+3)\", but still not \"a^6\". It might <br>\nnot even rewrite \"a^(3+3)\" to \"a^3 * a^3\", because \"3+3\" might be <br>\nrewritten to \"6\" first.</p>\n<p>Manuel</p>",
        "id": 294646649,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661164371
    },
    {
        "content": "<p>From: Lars Noschinski &lt;<a href=\"mailto:noschinl@in.tum.de\">noschinl@in.tum.de</a>&gt;<br>\nThat issue is shortly touched upon in Gerwin's style guide[1] in the<br>\nsection \" Decide on good normal forms and use them consistently.\"</p>\n<p>[1] <a href=\"http://proofcraft.org/blog/isabelle-style-part2.html\">http://proofcraft.org/blog/isabelle-style-part2.html</a></p>",
        "id": 294646669,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661164383
    },
    {
        "content": "<p>From: noam neer &lt;<a href=\"mailto:noamneer@gmail.com\">noamneer@gmail.com</a>&gt;<br>\nhi again.your explanation for the first failed proof :</p>\n<p>theory tmp<br>\n    imports Complex_Main<br>\n    begin<br>\n        lemma<br>\n          fixes   a::real<br>\n          shows   \"a^6 = a^3 * a^3\"<br>\n        using [[simp_trace=true]]<br>\n        using power_add<br>\n        by simp<br>\n    end</p>\n<p>sounds reasonable. however, when I give it to Isabelle I don't get an<br>\nerror message saying it can't match power_add to the goal, I get some<br>\ncomplaint about type unknowns :</p>\n<p>lemma ?a ^ 6 = ?a ^ 3 * ?a ^ 3<br>\n    [1]SIMPLIFIER INVOKED ON THE FOLLOWING TERM:<br>\n    (⋀a m n. a ^ (m + n) = a ^ m * a ^ n) ⟹ a ^ 6 = a ^ 3 * a ^ 3<br>\n    [1]Cannot add premise as rewrite rule because it contains (type) unknowns:<br>\n    ⋀a m n. a ^ (m + n) = a ^ m * a ^ n<br>\n    Failed to apply initial proof method⌂:<br>\n    using this:<br>\n      ?a ^ (?m + ?n) = ?a ^ ?m * ?a ^ ?n<br>\n    goal (1 subgoal):</p>\n<p>1. a ^ 6 = a ^ 3 * a ^ 3</p>\n<p>what does it mean ?</p>",
        "id": 294647160,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661164586
    }
]