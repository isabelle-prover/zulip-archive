[
    {
        "content": "<p>From: Buday Gergely &lt;<a href=\"mailto:gbuday@karolyrobert.hu\">gbuday@karolyrobert.hu</a>&gt;<br>\nHi,</p>\n<p>theory Dummy<br>\nimports Main</p>\n<p>begin</p>\n<p>lemma \" { 0..n::nat} = n*(n+1) div 2\" (is \"?P n\")<br>\nproof (induction n)<br>\n  show \"?P 0\" by simp<br>\nnext<br>\n  fix n assume \"?P n\"<br>\n  from this show \"?P (Suc n)\" by simp<br>\nqed</p>\n<p>verifies the formula for this sum as expected, especially the simplifier solves the ”?P 0” case:</p>\n<p>{0..0} = 0 * (0 + 1) div 2</p>\n<p>However, when I pose that lemma directly, the simplifier cannot prove it:</p>\n<p>lemma \"{0..0} = 0 * (0 + 1) div 2\"<br>\napply simp</p>\n<p>results in</p>\n<p>{0..0} = 0 * 1 div 2</p>\n<p>What is the difference between the two case?</p>\n<ul>\n<li>Gergely</li>\n</ul>",
        "id": 294325116,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660928305
    },
    {
        "content": "<p>From: Christian Sternagel &lt;<a href=\"mailto:c.sternagel@gmail.com\">c.sternagel@gmail.com</a>&gt;<br>\nDear Gergely,</p>\n<p>as usually: \"Whatch your types!\" ;)</p>\n<p>This is exactly the reason why I typically prefer \"Suc\" over \"_ + 1\"<br>\n(then I'm sure that I have \"nat\"s and not just arbitrary numrals).</p>\n<p>cheers</p>\n<p>chris</p>",
        "id": 294325125,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660928311
    },
    {
        "content": "<p>From: Johannes Hölzl &lt;<a href=\"mailto:hoelzl@in.tum.de\">hoelzl@in.tum.de</a>&gt;<br>\nHi Buday,</p>\n<p>Am Dienstag, den 20.01.2015, 14:25 +0100 schrieb Buday Gergely:</p>\n<blockquote>\n<p>Hi,</p>\n<p>theory Dummy<br>\nimports Main</p>\n<p>begin</p>\n<p>lemma \" { 0..n::nat} = n*(n+1) div 2\" (is \"?P n\")</p>\n</blockquote>\n<p>There is clearly something missing, I get a<br>\n  Type unification failed: Clash of types \"nat\" and \"_ set\"<br>\nerror. On the equation's left we have a set on the right a natural<br>\nnumber.</p>\n<blockquote>\n<p>proof (induction n)<br>\n  show \"?P 0\" by simp<br>\nnext<br>\n  fix n assume \"?P n\"<br>\n  from this show \"?P (Suc n)\" by simp<br>\nqed</p>\n<p>verifies the formula for this sum as expected, especially the simplifier solves the ”?P 0” case:</p>\n<p>{0..0} = 0 * (0 + 1) div 2</p>\n<p>However, when I pose that lemma directly, the simplifier cannot prove it:</p>\n<p>lemma \"{0..0} = 0 * (0 + 1) div 2\"<br>\napply simp</p>\n<p>results in</p>\n<p>{0..0} = 0 * 1 div 2</p>\n<p>What is the difference between the two case?</p>\n<ul>\n<li>Gergely</li>\n</ul>\n</blockquote>",
        "id": 294325179,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660928327
    },
    {
        "content": "<p>From: Lawrence Paulson &lt;<a href=\"mailto:lp15@cam.ac.uk\">lp15@cam.ac.uk</a>&gt;<br>\nThe problem that you are giving to Isabelle is more general than you imagine. Inserting an explicit type constraint “::nat” somewhere should make it all work.<br>\nLarry</p>",
        "id": 294325188,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660928329
    },
    {
        "content": "<p>From: \"Elsa L. Gunter\" &lt;<a href=\"mailto:egunter@illinois.edu\">egunter@illinois.edu</a>&gt;<br>\nDear Johannes,<br>\n   I can't answer Gergely's question, but for you, you browser has <br>\nstripped a leading \\&lt;Sigma&gt; from in front of the set.<br>\n---Elsa</p>",
        "id": 294325214,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660928336
    },
    {
        "content": "<p>From: David Cock &lt;<a href=\"mailto:david.cock@inf.ethz.ch\">david.cock@inf.ethz.ch</a>&gt;<br>\nCheck your operator precedence.  From memory setsum_and friends need <br>\nparentheses.  Occasionally distinct terms will print the same i.e. <br>\npretty-print and parse are not perfect inverses.</p>\n<p>David</p>",
        "id": 294325302,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660928360
    }
]