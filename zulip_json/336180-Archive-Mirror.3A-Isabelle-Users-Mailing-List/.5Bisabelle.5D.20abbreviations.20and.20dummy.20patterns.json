[
    {
        "content": "<p>From: Lars Noschinski &lt;<a href=\"mailto:noschinl@in.tum.de\">noschinl@in.tum.de</a>&gt;<br>\nHi everyone,</p>\n<p>I stumbled upon some interaction between abbreviations and dummy<br>\npatterns which strikes me as odd. Consider the following abbreviation:</p>\n<p>f n == c (%x. n + x)</p>\n<p>Then n is a constant and independent of x. This expectation fails if<br>\ndummy patterns come into play: \"f _\" is expanded to</p>\n<p>c (%x. ?_dummy_ x + x)</p>\n<p>which cannot be written as \"f t\" for any t (as the bound x was only<br>\nintroduced by unfolding the abbreviation).</p>\n<p>For the \"rewrite\" proof method, this is problematic. For example, the<br>\npattern 'at \"f _\"' would match to many terms. On the other hand,<br>\npatterns can become (effectively) stricter then expected [1].</p>\n<p>Now, the only solution I can see would be adding the bound variables to<br>\ndummy patterns before unfolding the abbreviations, at least for<br>\n\"rewrite\". However, there are probably good reasons why expanding dummy<br>\npatterns happens at the end of the check phases -- can somebody<br>\nenlighten my why this is the case?</p>\n<p>-- Lars</p>\n<p>[1]: (thanks to Peter for the example):</p>\n<p>theory Scratch<br>\n  imports Main \"~~/src/HOL/Library/Rewrite\"<br>\n  begin</p>\n<p>abbreviation hoare_triple' <br>\n    :: \"nat ⇒ nat ⇒ (nat ⇒ nat) ⇒ bool\" (\"&lt;_&gt; _ &lt;_&gt;⇩t\") <br>\n    where \"&lt;P&gt; c &lt;Q&gt;⇩t ≡ undefined P c (λx. Q x + 1)\"</p>\n<p>notepad begin<br>\n    have \"&lt;Suc 1&gt; 1 &lt;λ_. 2&gt;⇩t\"<br>\n      (*apply (rewrite in \"&lt;⌑&gt; _ &lt;_&gt;⇩t\" Suc_1) * Does not work *)<br>\n      apply (rewrite in \"&lt;⌑&gt; _ &lt;?dummy&gt;⇩t\" Suc_1) (* Works*)<br>\n      sorry    <br>\n  end</p>\n<p>Here, the pattern in the first application is expanded to<br>\n  \"undefined P c (%x. ?_dummy_ x x + 1)\"</p>\n<p>which fails to match, as \"?_dummy_ x x\" is not in the fragment supported by Pattern.match anymore.</p>",
        "id": 294644818,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661163611
    }
]