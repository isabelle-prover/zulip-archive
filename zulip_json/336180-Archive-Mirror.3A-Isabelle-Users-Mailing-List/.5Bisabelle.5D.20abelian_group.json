[
    {
        "content": "<p>From: Akihisa Yamada &lt;<a href=\"mailto:ayamada@trs.cm.is.nagoya-u.ac.jp\">ayamada@trs.cm.is.nagoya-u.ac.jp</a>&gt;<br>\nHello,</p>\n<blockquote>\n<p>E.g., monoid_mult (type class, in HOL) vs. monoid (locale, in <br>\nHOL-Algebra). The classes have the advantage of being easier to use than <br>\nlocales in many cases (at least I feel that way), but they have the <br>\nlimitation of always having UNIV as the carrier.</p>\n</blockquote>\n<p>(I had asked this question long ago here, though.) I had tried to unify <br>\nthem, but gave up due to a locale behavior that I don't understand.</p>\n<p>My approach was defining locales with a predicate for carrier, like</p>\n<p>locale magma =<br>\n   fixes f (infixl \"❙*\" 70) and member<br>\n   assumes closed: \"⋀a b. member a ⟹ member b ⟹ member (a ❙* b)\"</p>\n<p>By instantiating member by \"λx. True\", and simplifying \"True ⟹\" away we <br>\nget unrestricted statements. However, after</p>\n<p>interpretation mult: magma where member = \"λx. True\" and f = \"( * )\"<br>\n   rewrites \"⋀P. (True ⟹ PROP P) ≡ PROP P\"<br>\n   by (unfold_locales, simp_all)</p>\n<p>mult.closed is still \"True ⟹ True ⟹ True\" not \"True\".</p>\n<p>I'm happy to contribute my code and some work if someone can make this <br>\nrewrites work.</p>\n<p>Best,<br>\nAkihisa</p>\n<blockquote>\n<p>As far as I know, all proofs are simply done twice. And someone building <br>\na development on these things needs to pick on approach and is then <br>\n\"locked in\", which is problematic, since some material is only available <br>\nin the HOL approach and some only in the HOL-Algebra approach.</p>\n<p>In case of an overhaul, perhaps these concepts could be unified as well?</p>\n<p>I am not sure what the best approach is for such a unification, but some <br>\nidea would be:</p>\n<p>* Have compatible names as far as possible. E.g., if the class is<br>\n    called XXX, then the locale is called l_XXX or something.<br>\n  * Have the possibility to transfer theorems between compatible classes<br>\n    and locales. (Compatible means: when the class is the locale with<br>\n    carrier:=UNIV.)<br>\n      o For transferring from locale to class, that might work<br>\n        automatically (haven't checked) if we prove \"sublocale XXX &lt;=<br>\n        l_XXX UNIV\".<br>\n      o For transferring from class to locale it more difficult.<br>\n        Possibly something involving the Types_To_Sets tools might work?</p>\n<blockquote>\n<p>Unfortunately, I fear that even though there is not /that/ much material<br>\nbuilding on HOL-Algebra, it would involve a lot of work.</p>\n</blockquote>\n<p>What if instead of editing HOL-Algebra, a new session HOL-Algebra2 is <br>\ncreated? And then deprecating HOL-Algebra. (Or even renaming HOL-Algebra <br>\nto HOL-Algebra-Old.)</p>\n<p>Then it will be optional to update old AFP material building on <br>\nHOL-Algebra.</p>\n<blockquote>\n<p>I also don't think there are any \"heavy\" users of HOL-Algebra these days</p>\n</blockquote>\n<p>I wonder whether that might partially be because of the incompatibility <br>\nwith the type-class approach. (I, at least, never look at HOL-Algebra <br>\nbecause we are building on real_vector_space in our formalizations and <br>\nthus \"locked in\".)</p>\n<p>Best wishes,<br>\nDominique.</p>\n</blockquote>",
        "id": 294753424,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661196350
    },
    {
        "content": "<p>From: Florian Haftmann &lt;<a href=\"mailto:florian.haftmann@informatik.tu-muenchen.de\">florian.haftmann@informatik.tu-muenchen.de</a>&gt;<br>\nHi Dominique,</p>\n<blockquote>\n<p>There is the additional problem that there is a lot of duplication of<br>\nconcepts, using classes vs locales.</p>\n<p>E.g., monoid_mult (type class, in HOL) vs. monoid (locale, in<br>\nHOL-Algebra). The classes have the advantage of being easier to use than<br>\nlocales in many cases (at least I feel that way), but they have the<br>\nlimitation of always having UNIV as the carrier.</p>\n<p>As far as I know, all proofs are simply done twice. And someone building<br>\na development on these things needs to pick on approach and is then<br>\n\"locked in\", which is problematic, since some material is only available<br>\nin the HOL approach and some only in the HOL-Algebra approach.</p>\n<p>In case of an overhaul, perhaps these concepts could be unified as well?</p>\n</blockquote>\n<p>I do not say that this is not possible, but IMHO there are too many open<br>\nquestions to tackle that on one step;  the existing algebraic type class<br>\nhierarchy is essential for the HOL bootstrap e.g. wrt. numeric types<br>\nwithout subtyping.  Personally I got used to view the class / locale<br>\ndichotomy (which carries over to the sessions distinctive HOL-Algebra<br>\nand HOL-Computational_Algebra) as an inherent consequence of Isabelle's<br>\nhigher-order logic »as it is«.</p>\n<blockquote>\n<blockquote>\n<p>Unfortunately, I fear that even though there is not /that/ much material<br>\nbuilding on HOL-Algebra, it would involve a lot of work.</p>\n</blockquote>\n<p>What if instead of editing HOL-Algebra, a new session HOL-Algebra2 is<br>\ncreated? And then deprecating HOL-Algebra. (Or even renaming HOL-Algebra<br>\nto HOL-Algebra-Old.)</p>\n<p>Then it will be optional to update old AFP material building on<br>\nHOL-Algebra.</p>\n</blockquote>\n<p>There is some danger to reproduce the situation with<br>\n(Old/New)_Number_Theory as it was from 2009 until 2016.</p>\n<p>Cheers,<br>\n    Florian<br>\n<a href=\"/user_uploads/14278/PkxPx7eTwb-i8js1rQNve3ck/signature.asc\">signature.asc</a></p>",
        "id": 294753507,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661196373
    },
    {
        "content": "<p>From: Dominique Unruh &lt;<a href=\"mailto:unruh@ut.ee\">unruh@ut.ee</a>&gt;<br>\nI was not suggesting to remove the type classes. In fact, I believe that <br>\nthey are much easier to use. What I was suggesting is much less <br>\nambitous: If HOL-Algebra is overhauled, make sure the locales stand in <br>\n1-1 correspondence with the classes. I agree with you that the dichotomy <br>\nis necessary, but what isn't necessary but rather historical is that, <br>\ne.g., naming conventions are incompatible. (Purely a usability issue, <br>\nnot a mathematical consideration.)</p>\n<p>Best wishes,<br>\nDominique.</p>",
        "id": 294753598,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661196416
    },
    {
        "content": "<p>From: Lawrence Paulson &lt;<a href=\"mailto:lp15@cam.ac.uk\">lp15@cam.ac.uk</a>&gt;<br>\nA notable peculiarity of Algebra is its locale abelian_group, which is based on comm_group (groups with commutative multiplication) but with the weird twist of requiring a ring; it appears to be, in reality, the specification that a ring’s addition operator is commutative. Except that all rings have this property, and the very existence of this locale is confusing. Does anybody know any more about this?</p>\n<p>Larry</p>\n<p>record 'a ring = \"'a monoid\" +<br>\n  zero :: 'a (\"𝟬ı\")<br>\n  add :: \"['a, 'a] ⇒ 'a\" (infixl \"⊕ı\" 65)</p>\n<p>abbreviation<br>\n  add_monoid :: \"('a, 'm) ring_scheme ⇒ ('a, 'm) monoid_scheme\"<br>\n  where \"add_monoid R ≡ ⦇ carrier = carrier R, mult = add R, one = zero R, … = (undefined :: 'm) ⦈\"</p>\n<p>locale abelian_monoid =<br>\n  fixes G (structure)<br>\n  assumes a_comm_monoid:<br>\n     \"comm_monoid (add_monoid G)\"</p>\n<p>locale abelian_group = abelian_monoid +<br>\n  assumes a_comm_group:<br>\n     \"comm_group (add_monoid G)\"</p>",
        "id": 294755325,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661197208
    },
    {
        "content": "<p>From: Manuel Eberl &lt;<a href=\"mailto:eberlm@in.tum.de\">eberlm@in.tum.de</a>&gt;<br>\nHOL-Algebra is a bit messy. A big part of that, I think, comes from<br>\nquirks of Isabelle/HOL itself.</p>\n<p>My guess would be that one can write groups either additively (G, +, 0)<br>\nor multiplicatively (G, *, 1). Of course, more abstract syntax (G, ∘, e)<br>\nis also possible. There are various conventions about when to use which<br>\nnotation – in particular, I think the convention is that if you use \"+\",<br>\nthe group is always commutative (i.e. abelian).</p>\n<p>In HOL-Algebra, groups are /always/ written multiplicatively. There is<br>\nno other way. When you have a ring, you can write \"+\" for addition, but<br>\nthat is not formally associated to any group. The additive group of the<br>\nring has all its properties stated w.r.t. the \"*\" of \"add_monoid R\".</p>\n<p>\"abelian_group\" is apparently some kind of attempt to have an abelian<br>\ngroup that is written additively. Due to the fact that the \"+\" operator<br>\nis defined for the ring record, this requires us to use a ring record<br>\neven though there is (in general) no multiplication operation. We also<br>\ndon't have any locale assumption that this \"ring record\" is an actual<br>\nring (i.e. fulfils the ring axioms). Just the addition operation in it<br>\nis required to form an abelian group.</p>\n<p>As for why this strange \"abelian_group\" locale exists, I cannot say. One<br>\nwould have to examine where it is used and what for.</p>\n<p>I agree that it's all very confusing. Maybe it is simply the case that<br>\nthis ad-hoc \"single-inheritance record\" \"locale with structure<br>\nparameters\" is just fraught with problems. But as far as I know, it's<br>\nthe only way we have in Isabelle to do abstract algebra, and I don't<br>\nknow of a better one. Unless we can find a way to emulate the more<br>\nmodular typeclass/implicit parameter approach and elaborators that<br>\nsystems like Coq and Lean have.</p>\n<p>Manuel</p>",
        "id": 294755339,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661197215
    },
    {
        "content": "<p>From: Clemens Ballarin &lt;<a href=\"mailto:ballarin@in.tum.de\">ballarin@in.tum.de</a>&gt;<br>\nHi Larry,</p>\n<p>when reading HOL-Algebra you need to keep in mind that much of the <br>\nmaterial pre-dates modern locales.  Then locales were not based on local <br>\ntheories, and expressions were limited to renaming; instantiation and <br>\nrewriting were unavailable.</p>\n<p>The approach of combining locales with records dates back to that time.  <br>\nDefinitions in locales were unavailable, and the solution was to extract <br>\nthe signature part of an algebraic structure into a record, on which <br>\ndefinitions could be made globally.  Locales would only deal with the <br>\nspecification part.</p>\n<p>Regarding the locale abelian_group: an abelian group by convention is a <br>\ncommutative group with additive notation.  A ring then is a <br>\n(multiplicative) monoid and an abelian group.  What you see is an <br>\nattempt of expressing that.  Unfortunately, since there isn't multiple <br>\ninheritance for records, I needed to resort to using the ring record <br>\nalso for abelian groups, which is, of course, awkward.</p>\n<p>Clemens</p>",
        "id": 294755349,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661197221
    },
    {
        "content": "<p>From: Manuel Eberl &lt;<a href=\"mailto:eberlm@in.tum.de\">eberlm@in.tum.de</a>&gt;<br>\nHello Clemens,</p>\n<p>that's interesting. It would certainly be of interest to think of a<br>\nlarge-scale overhaul of HOL-Algebra using modern locale features.<br>\nUnfortunately, I fear that even though there is not /that/ much material<br>\nbuilding on HOL-Algebra, it would involve a lot of work.</p>\n<p>I also don't think there are any \"heavy\" users of HOL-Algebra these days<br>\nwho could champion such an endeavour and come up with better designs. If<br>\nthere are – please come forward! (Larry had two students who might<br>\nactually be the two heaviest recent users.</p>\n<p>I've used HOL-Algebra sporadically over the last two years or so and<br>\nwould like to see it improved. Unfortunately, I do not have the time to<br>\ndo that myself in the foreseeable future, and I also don't think I am an<br>\nideal candidate to do it considering my lack of expertise with<br>\nHOL-Algebra and locales.</p>\n<p>Manuel</p>",
        "id": 294755359,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661197227
    },
    {
        "content": "<p>From: Slawomir Kolodynski via Cl-isabelle-users &lt;<a href=\"mailto:cl-isabelle-users@lists.cam.ac.uk\">cl-isabelle-users@lists.cam.ac.uk</a>&gt;<br>\nHi Manuel,</p>\n<blockquote>\n<p>as far as I know, it's the only way we have in Isabelle to do abstract algebra<br>\nI assume you mean Isabelle/HOL here. <br>\nIn IsarMathLib notation details are deferred to the presentation layer so they are not tied to definitions. Multiplicative notation happens to be used in context of semigroups, groups and abelian groups, while additive notation is used for abelian semigroups and topological groups (see Semigroup_ZF, Group_ZF, AbelianGroup_ZF and CommutativeSemigroup_ZF, TopologicalGroup_ZF at <a href=\"http://isarmathlib.org\">isarmathlib.org</a> ).</p>\n</blockquote>\n<p>Kind regards,<br>\nSlawomir Kolodynski</p>\n<p><a href=\"http://savannah.nongnu.org/projects/isarmathlib\">http://savannah.nongnu.org/projects/isarmathlib</a> Library of Formalized Mathematics for Isabelle/Isar (ZF Logic)</p>",
        "id": 294755398,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661197246
    },
    {
        "content": "<p>From: Dominique Unruh &lt;<a href=\"mailto:unruh@ut.ee\">unruh@ut.ee</a>&gt;<br>\nHi,</p>\n<blockquote>\n<p>that's interesting. It would certainly be of interest to think of a<br>\nlarge-scale overhaul of HOL-Algebra using modern locale features.</p>\n</blockquote>\n<p>There is the additional problem that there is a lot of duplication of <br>\nconcepts, using classes vs locales.</p>\n<p>E.g., monoid_mult (type class, in HOL) vs. monoid (locale, in <br>\nHOL-Algebra). The classes have the advantage of being easier to use than <br>\nlocales in many cases (at least I feel that way), but they have the <br>\nlimitation of always having UNIV as the carrier.</p>\n<p>As far as I know, all proofs are simply done twice. And someone building <br>\na development on these things needs to pick on approach and is then <br>\n\"locked in\", which is problematic, since some material is only available <br>\nin the HOL approach and some only in the HOL-Algebra approach.</p>\n<p>In case of an overhaul, perhaps these concepts could be unified as well?</p>\n<p>I am not sure what the best approach is for such a unification, but some <br>\nidea would be:</p>\n<p>* Have compatible names as far as possible. E.g., if the class is<br>\n    called XXX, then the locale is called l_XXX or something.</p>\n<p>* Have the possibility to transfer theorems between compatible classes<br>\n    and locales. (Compatible means: when the class is the locale with<br>\n    carrier:=UNIV.)<br>\n      o For transferring from locale to class, that might work<br>\n        automatically (haven't checked) if we prove \"sublocale XXX &lt;=<br>\n        l_XXX UNIV\".<br>\n      o For transferring from class to locale it more difficult.<br>\n        Possibly something involving the Types_To_Sets tools might work?</p>\n<blockquote>\n<p>Unfortunately, I fear that even though there is not /that/ much material<br>\nbuilding on HOL-Algebra, it would involve a lot of work.</p>\n</blockquote>\n<p>What if instead of editing HOL-Algebra, a new session HOL-Algebra2 is <br>\ncreated? And then deprecating HOL-Algebra. (Or even renaming HOL-Algebra <br>\nto HOL-Algebra-Old.)</p>\n<p>Then it will be optional to update old AFP material building on HOL-Algebra.</p>\n<blockquote>\n<p>I also don't think there are any \"heavy\" users of HOL-Algebra these days</p>\n</blockquote>\n<p>I wonder whether that might partially be because of the incompatibility <br>\nwith the type-class approach. (I, at least, never look at HOL-Algebra <br>\nbecause we are building on real_vector_space in our formalizations and <br>\nthus \"locked in\".)</p>\n<p>Best wishes,<br>\nDominique.</p>",
        "id": 294755409,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661197251
    }
]