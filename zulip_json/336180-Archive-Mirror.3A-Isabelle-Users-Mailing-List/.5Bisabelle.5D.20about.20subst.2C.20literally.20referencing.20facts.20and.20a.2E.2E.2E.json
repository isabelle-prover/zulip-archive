[
    {
        "content": "<p>From: Johan Meier &lt;<a href=\"mailto:johan.meier.1@gmail.com\">johan.meier.1@gmail.com</a>&gt;<br>\nHi I have multiple (small and probably naive) questions</p>\n<p>First question: can I insert a theorem/fact \"literally\" into the local<br>\nfacts(something like HOL.simp_thms(n)) ? (i.e. with something like<br>\nback-quotes or with \\open \\close, like when you reference a local fact<br>\nliterally)? Or at least more meaningful than for example \"note<br>\nHOL.simp_thms(4)\" ( I'm fine with let's say append_Cons, but<br>\nHOL.simp_thms(i) isn't a very meaningful name. Another thing that bothers<br>\nme is that HOL.simp_thms could change and, as an example, HOL.simp_thms(7)<br>\nisn't the same as before ).</p>\n<p>Second question:<br>\nIn a proof only using apply (i.e. an apply script), when a goal has<br>\nassumptions written like this : \"asm1 ==&gt; asm2 ==&gt; conclusion\"(which often<br>\nappears when proving by induction as an intermediate goal), how can I<br>\ndirectly access/use them? Is there something like a literal access like<br>\nthere is for local facts with back-quotes or \"&lt; &gt;\"?  Or is there a way to<br>\nadd these assumptions to \"assms\"? In general, I want to use them in<br>\nsituations where I have to reference a fact, but with subst in particular.<br>\nI know of hypsubst in combination with rot_tac (in case there are more<br>\nvalid equalities for substitution ) , but it feels a bit awkward ... but<br>\nmaybe that's just me ... \"simp only\" sometime does more than what is<br>\nspecified after \"only\" (i.e. trivial simplifications) and using \"erule<br>\nsubst\" only substitutes in the conclusion.</p>\n<p>Just to clarify: I want to use subst instead of simp/auto etc for learning<br>\npurposes, that's all.</p>\n<p>Third question:<br>\nwhat are the the differences between subst and rewrite (from<br>\n\"~~/src/HOL/Library/Rewrite\")? Is there any documentation on that ? Or can<br>\nsomeone give an example what rewrite can do more than  subst ?</p>\n<p>Final question: can I tell hypsubst to replace only in the nth position<br>\n(i.e. when there is more than one place one can substitute) ? And is it<br>\npossible to tell hypsubst to read an equality instead of \"a = b\" as  \"b =<br>\na\" ?</p>\n<p>Thank you in advance!</p>",
        "id": 294710275,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661181959
    },
    {
        "content": "<p>From: Lars Hupel &lt;<a href=\"mailto:hupel@in.tum.de\">hupel@in.tum.de</a>&gt;<br>\nHi Johan,</p>\n<blockquote>\n<p>First question: can I insert a theorem/fact \"literally\" into the local<br>\nfacts(something like HOL.simp_thms(n)) ? (i.e. with something like<br>\nback-quotes or with \\open \\close, like when you reference a local fact<br>\nliterally)? Or at least more meaningful than for example \"note<br>\nHOL.simp_thms(4)\" ( I'm fine with let's say append_Cons, but<br>\nHOL.simp_thms(i) isn't a very meaningful name. Another thing that bothers<br>\nme is that HOL.simp_thms could change and, as an example, HOL.simp_thms(7)<br>\nisn't the same as before ).</p>\n</blockquote>\n<p>there are multiple possibilities here.</p>\n<p>If you're in an \"apply\" script, you can write</p>\n<p>using thm<br>\n  apply -</p>\n<p>This will add the theorem as a premise to the goal state.</p>\n<p>If you don't want to refer to it by name, you have little choices. The<br>\nclosest is \"subgoal_tac\". It takes a proposition and inserts it into the<br>\ngoal state. However, you'll get a new goal and have to justify that<br>\nproposition. If it's in fact something out of \"HOL.simp_thms\", that'll<br>\ngo through with \"simp\".</p>\n<p>Unfortunately, the cartouche (open/close) syntax doesn't work for<br>\nanything that is not a fact. That would require combing through the<br>\nwhole theorem name space, which may be rather slow.</p>\n<p>But you might be also interested in \"solve_direct\", which is a command<br>\nthat does just that. It presents you all theorems that can solve the<br>\ncurrent goal. But in the end, you'll have to refer to the theorem by name.</p>\n<p>In most cases, names are rather stable, except for maybe these \"theorem<br>\ngrab bags\". I would strongly advise against using \"HOL.simp_thms\" if you<br>\ncan avoid it. My usual approach is:</p>\n<ol>\n<li>\n<p>show P<br>\n     apply simp</p>\n</li>\n<li>\n<p>Look at the subgoal, call it P'</p>\n</li>\n<li>have P'<br>\n     &lt;proof&gt;<br>\n   then show P<br>\n     by simp</li>\n</ol>\n<blockquote>\n<p>Second question:<br>\nIn a proof only using apply (i.e. an apply script), when a goal has<br>\nassumptions written like this : \"asm1 ==&gt; asm2 ==&gt; conclusion\"(which often<br>\nappears when proving by induction as an intermediate goal), how can I<br>\ndirectly access/use them? Is there something like a literal access like<br>\nthere is for local facts with back-quotes or \"&lt; &gt;\"?</p>\n</blockquote>\n<p>You can use the \"subgoal\" command. See ยง7.2, \"Subgoal structure\" in the<br>\nIsar reference manual. There are also some examples that illustrate usage.</p>\n<blockquote>\n<p>Third question:<br>\nwhat are the the differences between subst and rewrite (from<br>\n\"~~/src/HOL/Library/Rewrite\")? Is there any documentation on that ? Or can<br>\nsomeone give an example what rewrite can do more than  subst ?</p>\n</blockquote>\n<p>\"rewrite\" supports a sophisticated matching language that allows you to<br>\nspecify where in a term you want to rewrite. \"subst\" only supports<br>\n\"assumption\" or \"conclusion\" and a numeric index. As far as I<br>\nunderstand, \"rewrite\" is strictly more powerful than \"subst\".</p>\n<p>However, \"rewrite\" doesn't seem to be document in the reference manual<br>\nso far. But there are some examples:<br>\n&lt;<a href=\"https://isabelle.in.tum.de/dist/library/HOL/HOL-ex/Rewrite_Examples.html\">https://isabelle.in.tum.de/dist/library/HOL/HOL-ex/Rewrite_Examples.html</a>&gt;</p>\n<p>Cheers<br>\nLars</p>",
        "id": 294710338,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661181965
    }
]