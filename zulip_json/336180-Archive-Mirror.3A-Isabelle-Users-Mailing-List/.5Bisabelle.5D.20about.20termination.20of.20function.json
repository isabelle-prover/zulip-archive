[
    {
        "content": "<p>From: 张欢欢 &lt;<a href=\"mailto:hzhang@ecust.edu.cn\">hzhang@ecust.edu.cn</a>&gt;<br>\nHi, I am thinking about proving termination of function. Can anyone tell me the differences between the following two:<br>\n1) <br>\napply(relation inv_image(finite-psubset&lt;<em>lex</em>&gt;less-than) ...)</p>\n<p>2)  apply(measure ...)</p>\n<p>I know the definition of measure is<br>\ndefinition<br>\nmeasure<br>\n::<br>\n\"('a =&gt; nat) =&gt; ('a * 'a)set\"<br>\nwhere<br>\n\"measure == inv_image less_than\"</p>\n<p>and the definition of finite-psubset is<br>\ndefinition<br>\nfinite_psubset<br>\n::<br>\n\"('a set * 'a set) set\"<br>\nwhere<br>\n\"finite_psubset == {(A,B). A &lt; B &amp; finite B}\"</p>\n<p>But I hope someone can explain the detail meaning of the differences between the above two.<br>\nThanks</p>",
        "id": 294135655,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660844243
    },
    {
        "content": "<p>From: Alexander Krauss &lt;<a href=\"mailto:krauss@in.tum.de\">krauss@in.tum.de</a>&gt;<br>\nHi,</p>\n<p>In fact, 2) should be</p>\n<p>apply (relation \"measure ...\")</p>\n<p>It is the simplest way of specifying a termination relation, by giving a <br>\nfunction into the natural numbers, which decreases at each recursive call.</p>\n<p>Example 1) is a bit trickier. It may help you to look at the types of <br>\nthe subexpressions (e.g. finite_psubset).<br>\nHere, \"...\" must be a function that maps your function arguments into <br>\nthe type  'a set * nat  for some 'a. These pairs are then compared with <br>\nrespect to the relation (finite-psubset &lt;<em>lex</em>&gt; less-than), which means <br>\nthat first the sets are compared with the strict subset relation and <br>\nthen the numbers are compared.</p>\n<p>In other words, the relation</p>\n<p>inv_image(finite-psubset&lt;<em>lex</em>&gt;less-than) (%x. (f x, g x))</p>\n<p>is the same as</p>\n<p>{ (x, y).  (finite (f y) &amp; f x \\&lt;subset&gt; f y)<br>\n                | (f x = f y &amp; g x &lt; g y) }</p>\n<p>While in the second version it is easier to see what is going on, the <br>\nfirst version can be proved well-founded automatically, since it is <br>\nbuilt from combinators (inv_image, &lt;<em>lex</em>&gt;, finite_psubset, less_than) <br>\nthat already come with the relevant lemmas.</p>\n<p>Hope this helps...</p>\n<p>Alex</p>",
        "id": 294135883,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660844310
    }
]