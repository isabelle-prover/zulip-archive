[
    {
        "content": "<p>From: Matthias Schmalz &lt;<a href=\"mailto:mschmalz@inf.ethz.ch\">mschmalz@inf.ethz.ch</a>&gt;<br>\n-----BEGIN PGP SIGNED MESSAGE-----<br>\nHash: SHA1</p>\n<p>Dear Isabelle users,</p>\n<p>I am trying to add a looper to the simplifier to do some \"risky\"<br>\nsimplifications that I cannot do with the splitter. I am stuck, because<br>\nthe simplifier loops, and I do not understand why. Here is what I do:</p>\n<p>ML {*<br>\nval my_ss = HOL_basic_ss;</p>\n<p>(* At this place, I later intend to add some interesting simplification<br>\nprocedures to my_ss. *)</p>\n<p>(* Register a new looper *)<br>\nchange_simpset<br>\n  (fn ss =&gt; ss addloop (\"foo\", Simplifier.simp_tac my_ss));<br>\n*}</p>\n<p>lemma \"False\"<br>\napply simp</p>\n<p>On the last command, the simplifier loops. According to the trace it is<br>\ninvoked again and again on \"False\". I would expect the simplifier to<br>\nfail on \"False\", because my newly added looper fails on \"False\".</p>\n<p>Any explanations / comments / pointers are very welcome!</p>\n<p>Matthias<br>\n-----BEGIN PGP SIGNATURE-----<br>\nVersion: GnuPG v1.4.6 (GNU/Linux)<br>\nComment: Using GnuPG with Mozilla - <a href=\"http://enigmail.mozdev.org\">http://enigmail.mozdev.org</a></p>\n<p>iD8DBQFMVE/LczhznXSdWggRAkWLAJ44u0Z7CxEGntFTfUrg81iVi81WvACeNspa<br>\nn3E+8Mt1SIPSdZ9oKIUYdss=<br>\n=OLgP<br>\n-----END PGP SIGNATURE-----</p>",
        "id": 294111491,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660836975
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nThe looper is explained in section 9.2.9 of the Old Isabelle Reference <br>\nmanual.  You need to read that text with the historical context in mind.</p>\n<p>Success or failure in terms of looper tactics is meant in the elementary <br>\ntactic sense.  Simplifier.simp_tac always succeeds, even if there is no <br>\nprogress.  You may want to wrap it into the CHANGED tactical.  Moreover, <br>\nrecall Simplifier variants such as asm_full_simp_tac that operate with/on <br>\nlocal goal premises.  Simplifier.simp_tac only operates on the conclusion <br>\nof a subgoal.</p>\n<p>Makarius</p>",
        "id": 294114007,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660837711
    }
]