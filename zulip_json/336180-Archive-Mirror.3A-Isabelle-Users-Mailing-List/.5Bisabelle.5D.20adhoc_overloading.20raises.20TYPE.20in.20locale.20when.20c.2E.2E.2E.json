[
    {
        "content": "<p>From: Andreas Lochbihler &lt;<a href=\"mailto:andreas.lochbihler@inf.ethz.ch\">andreas.lochbihler@inf.ethz.ch</a>&gt;<br>\nDear developers of adhoc_overloading and coercions,</p>\n<p>When I enable coercions and have imported adhoc_overloading, type-incorrect terms <br>\nsometimes raise a TYPE exception instead of providing a useful error message - even if <br>\nthere is nothing that adhoc_overloading can replace. In the following example, the <br>\nill-typed term at the end gives the following error message:</p>\n<p>*** exception TYPE raised (line 319 of \"term.ML\"):<br>\n*** type_of: type mismatch in application<br>\n*** ??'b<br>\n*** ??'a<br>\n*** &lt;malformed&gt;<br>\n*** At command \"term\"</p>\n<p>It is relatively hard to realise from this message that the last s should be changed to ().</p>\n<p>theory Scratch imports Main \"~~/src/Tools/Adhoc_Overloading\" begin</p>\n<p>declare [[coercion_enabled]]</p>\n<p>typedecl ('a, 'b, 'c) foo<br>\ntypedecl ('a, 'b) bar</p>\n<p>consts t1 :: \"nat =&gt; (unit, 'b option, 'c option) foo\"<br>\nconsts t2 :: \"'a =&gt; 'b =&gt; ('a, 'b) bar\"<br>\nconsts t3 :: \"nat =&gt; 'a option\"</p>\n<p>locale l = fixes r :: \"'out =&gt; 'in set\" begin<br>\ndefinition ex :: \"('a, 'out, 'in) foo =&gt; (('out Ã— 'in), 'a) bar set\"<br>\n   where \"ex x = (let z = r in undefined)\"<br>\nend</p>\n<p>locale l' = fixes r :: \"'m1 =&gt; 'm2 set\" begin<br>\ndefinition r' :: \"'m1 option =&gt; 'm2 option set\"<br>\n   where \"r' x = (let z = r in undefined)\"<br>\nsublocale l r' .<br>\nterm \"ex (t1 s) = {t2 (t3 s, None) s}\"<br>\nend</p>\n<p>Best,<br>\nAndreas</p>",
        "id": 294255059,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660912281
    },
    {
        "content": "<p>From: Dmitriy Traytel &lt;<a href=\"mailto:traytel@in.tum.de\">traytel@in.tum.de</a>&gt;<br>\nHi Andreas,</p>\n<p>the problem is that the coercion inference needs/wants to pretty print <br>\nan error message containing an type-incorrect term. The uncheck phase of <br>\nadhoc_overloading (that is performed during pretty printing) chokes on <br>\nthis. We had a similar interaction between other type inference phases <br>\nand adhoc overloading before. That's why I've forced adhoc_overloading <br>\nto leave type-incorrect terms alone in Isabelle/e2d08b9c9047.</p>\n<p>Later, in Isabelle/54e290da6da8 in conjunction with <br>\nIsabelle/e13b0c88c798 this check was (accidentally?) removed. Christian, <br>\nwould you please reintroduce it?</p>\n<p>Additionally, I'll think about changing the behaviour on the coercions side.</p>\n<p>Thanks for the report!<br>\nDmitriy</p>",
        "id": 294255255,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660912342
    },
    {
        "content": "<p>From: Dmitriy Traytel &lt;<a href=\"mailto:traytel@in.tum.de\">traytel@in.tum.de</a>&gt;<br>\nAm 18.11.2013 10:29, schrieb Dmitriy Traytel:</p>\n<blockquote>\n<p>Hi Andreas,</p>\n<p>the problem is that the coercion inference needs/wants to pretty print <br>\nan error message containing an type-incorrect term. The uncheck phase <br>\nof adhoc_overloading (that is performed during pretty printing) chokes <br>\non this. We had a similar interaction between other type inference <br>\nphases and adhoc overloading before. That's why I've forced <br>\nadhoc_overloading to leave type-incorrect terms alone in <br>\nIsabelle/e2d08b9c9047.</p>\n<p>Later, in Isabelle/54e290da6da8 in conjunction with <br>\nIsabelle/e13b0c88c798 this check was (accidentally?) removed. <br>\nChristian, would you please reintroduce it?<br>\nOK, I reintroduced it myself (f6ffe53387ef ). Christian, if the removal <br>\nwas on purpose, please give some motivation.</p>\n<p>Additionally, I'll think about changing the behaviour on the coercions <br>\nside.<br>\nNow that I thought about it: since the coercion inference reports an <br>\nerror, I cannot guarantee that some subterm of the type-incorrect term <br>\nis well-typed in general (so I barely can print anything, if printing <br>\nrequires well-typed terms). Hence, uncheck should better work with <br>\ntype-incorrect terms.</p>\n</blockquote>\n<p>Dmitriy</p>",
        "id": 294255393,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660912403
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nSyntax.uncheck_terms is indeed required to allow printing of bad terms, <br>\notherwise most error messages would be impossible to deliver.  The burden <br>\nhere is on all user-space tools that add to that abstract syntax phase via <br>\nSyntax_Phases.term_uncheck.</p>\n<p>These are not everyday user applications, but user-space nonetheless -- <br>\nanalogous to simplification procedures written in Isabelle/ML.</p>\n<p>The particular problem with adhoc_overloading is addressed in the next <br>\nrelease (in about 1 week).</p>\n<p>Makarius</p>",
        "id": 294256380,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660912753
    }
]