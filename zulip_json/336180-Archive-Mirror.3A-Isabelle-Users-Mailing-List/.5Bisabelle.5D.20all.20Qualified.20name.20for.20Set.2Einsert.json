[
    {
        "content": "<p>From: Christian Sternagel &lt;<a href=\"mailto:christian.sternagel@uibk.ac.at\">christian.sternagel@uibk.ac.at</a>&gt;<br>\nI think a related issue is that it is not possible to use the identifier <br>\n'all', e.g., I wanted to have the list function</p>\n<p>primrec all :: \"('a =&gt; bool) =&gt; 'a list =&gt; bool\"<br>\nwhere \"all p [] = True\"<br>\n     | \"all p (x#xs) = (p x \\&lt;and&gt; all p xs)\"</p>\n<p>The definition ran through... however, at some later point I tried to <br>\nuse a formula of the form \"!!x. ?P x\" and there I got a type error. <br>\nWould this problem also be solved if the internal constant for `!!' <br>\nwould be qualified... or is it a different problem?</p>\n<p>cheers</p>\n<p>chris</p>\n<p>P.S.: is there some workaround that lets me use the function name 'all'?</p>",
        "id": 294079482,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660830167
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nThe Pure quantifier is called \"all\" internally -- this is a global name <br>\nwith \"non-authentic\" syntax.  This means there is no way to use that base <br>\nname in some user theory -- neither name space accesses nor notation can <br>\nbe modified later without breakdown.</p>\n<p>While we have worked hard to reduce the number of (historical) global <br>\nconstants like this for HOL (and the process is not really finished yet), <br>\nthis is even harder for Pure.  So global names are likely to persist there <br>\nfor &gt; 10 more years.</p>\n<p>Makarius</p>",
        "id": 294079491,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660830173
    }
]