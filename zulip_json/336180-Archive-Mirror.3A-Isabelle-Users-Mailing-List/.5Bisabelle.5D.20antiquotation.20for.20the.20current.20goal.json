[
    {
        "content": "<p>From: Ondřej Kunčar &lt;<a href=\"mailto:kuncar@in.tum.de\">kuncar@in.tum.de</a>&gt;<br>\nDear Isabelle Users,<br>\nfor debugging purposes I would like to have an antiquotation that would <br>\ngive me a current goal as a term. For example:</p>\n<p>lemma \"A ∧ B\"<br>\napply (rule conjI)</p>\n<p>ML_prf{*<br>\n   @{goal} (* would output val it = Const (\"HOL.Trueprop\", \"bool ⇒ <br>\nprop\") $ Free (\"A\", \"bool\"): term *)<br>\n*}</p>\n<p>I found that there is @{Isar.goal} but that gives me only an error <br>\nmessage \"No goal present\".<br>\nI also tried some ML like \"Toplevel.proof_of (Toplevel.toplevel)\" but <br>\nthat gives me a similar result \"exception UNDEF raised (line 168 of <br>\n\"Isar/toplevel.ML\")\".</p>\n<p>Is there a way how to have such an antiquotation?</p>\n<p>Thanks for your answers.</p>\n<p>Best,<br>\nOndrej</p>",
        "id": 294247065,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660909317
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nBasically all Isabelle/ML antiquotations are documented in the <br>\n\"implementation\" manual -- if something important is missing just keep me <br>\ninformed.</p>\n<p>For @{Isar.goal} see <br>\n<a href=\"http://isabelle.in.tum.de/dist/Isabelle2013/doc/implementation.pdf\">http://isabelle.in.tum.de/dist/Isabelle2013/doc/implementation.pdf</a> page <br>\n112:</p>\n<p>@{text \"@{Isar.goal}\"} refers to the regular goal state (if<br>\n   available) of the current proof state managed by the Isar toplevel<br>\n   --- as abstract value.</p>\n<p>This only works for diagnostic ML commands, such as @{command<br>\n   ML_val} or @{command ML_command}.</p>\n<p>There are also a few examples with @{Isar.goal} in the same manual.</p>\n<p>Makarius</p>",
        "id": 294247132,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660909330
    },
    {
        "content": "<p>From: Ondřej Kunčar &lt;<a href=\"mailto:kuncar@in.tum.de\">kuncar@in.tum.de</a>&gt;</p>\n<blockquote>\n<p>For @{Isar.goal} see<br>\n<a href=\"http://isabelle.in.tum.de/dist/Isabelle2013/doc/implementation.pdf\">http://isabelle.in.tum.de/dist/Isabelle2013/doc/implementation.pdf</a> page<br>\n112:</p>\n<p>@{text \"@{Isar.goal}\"} refers to the regular goal state (if<br>\n   available) of the current proof state managed by the Isar toplevel<br>\n   --- as abstract value.</p>\n<p>This only works for diagnostic ML commands, such as @{command<br>\n   ML_val} or @{command ML_command}.</p>\n</blockquote>\n<p>That's great that the antiquotation works. Unfortunately, it still <br>\ndoesn't fit into my use case.</p>\n<p>My use case is the following:<br>\nlemma \"bla\"<br>\napply sth<br>\nML_prf{*<br>\n   val goal = @{Isar.goal}<br>\n   val rules = do_sth_complicated goal<br>\n*}<br>\napply (tactic {* rtac rules 1 *})</p>\n<p>If I am allowed to use @{Isar.goal} only inside of ML_val, I cannot see <br>\nthe variable \"rules\" outside of the ML block. Is there any deep reason <br>\nwhy @{Isar.goal} can be used only inside of ML_val and not in ML_prf? <br>\nAllowing @{Isar.goal} inside of ML_prf would help me to do debugging in <br>\nIsabelle. It's basically about moving parts of F from \"apply (tactic {* <br>\nF *})\" to a ML_prf block as much as possible and inspecting intermediate <br>\nresults in the Output window. This gives me more flexibility than <br>\ncluttering F with print statements and inspecting the printed stuff.</p>\n<p>Best,<br>\nOndrej</p>",
        "id": 294247151,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660909336
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nOn Mon, 26 Aug 2013, Ondřej Kunčar wrote:</p>\n<blockquote>\n<blockquote>\n<p>For @{Isar.goal} see<br>\n<a href=\"http://isabelle.in.tum.de/dist/Isabelle2013/doc/implementation.pdf\">http://isabelle.in.tum.de/dist/Isabelle2013/doc/implementation.pdf</a> page<br>\n112:</p>\n<p>@{text \"@{Isar.goal}\"} refers to the regular goal state (if<br>\n   available) of the current proof state managed by the Isar toplevel<br>\n   --- as abstract value.</p>\n<p>This only works for diagnostic ML commands, such as @{command<br>\n   ML_val} or @{command ML_command}.</p>\n</blockquote>\n<p>That's great that the antiquotation works. Unfortunately, it still doesn't <br>\nfit into my use case.</p>\n<p>My use case is the following:<br>\nlemma \"bla\"<br>\napply sth<br>\nML_prf{*<br>\n val goal = @{Isar.goal}<br>\n val rules = do_sth_complicated goal<br>\n*}<br>\napply (tactic {* rtac rules 1 *})</p>\n<p>If I am allowed to use @{Isar.goal} only inside of ML_val, I cannot see the <br>\nvariable \"rules\" outside of the ML block.</p>\n</blockquote>\n<blockquote>\n<p>Is there any deep reason why @{Isar.goal} can be used only inside of <br>\nML_val and not in ML_prf?</p>\n</blockquote>\n<p>Yes, according to the way the various Isabelle contexts and states work.</p>\n<blockquote>\n<p>Allowing @{Isar.goal} inside of ML_prf would help me to do debugging in <br>\nIsabelle. It's basically about moving parts of F from \"apply (tactic {* <br>\nF *})\" to a ML_prf block as much as possible and inspecting intermediate <br>\nresults in the Output window. This gives me more flexibility than <br>\ncluttering F with print statements and inspecting the printed stuff.</p>\n</blockquote>\n<p>You can either put everything you need into the 'ML_val', i.e. apply the <br>\ntactic yourself and inspect the outcome, or into the \"tactic\" expression. <br>\nThe latter is just normal Isabelle/ML and may consist of arbitrary complex <br>\nlet expressions etc.  Here are examples for both -- just printing the goal <br>\nagain:</p>\n<p>lemma A</p>\n<p>ML_val {*<br>\n     val st = #goal @{Isar.goal};<br>\n     writeln (Proof_Display.string_of_goal @{context} st);<br>\n   *}</p>\n<p>apply (tactic {* fn st =&gt;<br>\n     (writeln (@{make_string} st); Seq.single st) *})</p>\n<p>Note that \"st\" of type thm is the canonical way to refer to tactical goal <br>\nstates in ML, according to Larry Paulson.</p>\n<p>Makarius</p>",
        "id": 294247176,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660909348
    }
]