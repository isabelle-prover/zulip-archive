[
    {
        "content": "<p>From: Timothy Bourke &lt;<a href=\"mailto:tim@tbrk.org\">tim@tbrk.org</a>&gt;<br>\nIs there a built-in way to generate subgoals for all cases of a set of<br>\nvariables?</p>\n<p>For instance, suppose I have the definitions:</p>\n<p>datatype dt = Num int | Infinity</p>\n<p>fun plus :: \"dt ⇒ dt ⇒ dt\"<br>\n  where<br>\n    \"plus Infinity _ = Infinity\"<br>\n  | \"plus _ Infinity = Infinity\"<br>\n  | \"plus (Num a) (Num b) = Num (a + b)\"</p>\n<p>And now that I want to show:</p>\n<p>lemma \"plus a b = plus b a\"</p>\n<p>I would like to be able to type:<br>\n    by (cases a b) simp_all</p>\n<p>But this is not supported.</p>\n<p>I know that I can type:<br>\n  by (tactic \"(List.foldl (op THEN_ALL_NEW) (fn i =&gt; all_tac)<br>\n                (<a href=\"http://List.map\">List.map</a> (Induct_Tacs.case_tac @{context}) [\"a\", \"b\"]) 1)\")<br>\n     simp_all</p>\n<p>But somehow this is not very pleasing!</p>\n<p>So, is there a good way to do this?</p>\n<p>Would it be worth extending the cases method?</p>\n<p>Tim.<br>\n<a href=\"/user_uploads/14278/OUJZXS8vfWJcuQuRwvjCgqCs/signature.asc\">signature.asc</a></p>",
        "id": 294279345,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660919816
    },
    {
        "content": "<p>From: Johannes Hölzl &lt;<a href=\"mailto:hoelzl@in.tum.de\">hoelzl@in.tum.de</a>&gt;<br>\nYou can use the case_product attribute:</p>\n<p>by (cases a b rule: dt.exhaust[case_product dt.exhaust]) <br>\n     simp_all</p>\n<p>And yes, I think it would be worth to extend the case method.</p>\n<ul>\n<li>Johannes</li>\n</ul>",
        "id": 294279356,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660919820
    },
    {
        "content": "<p>From: Brian Huffman &lt;<a href=\"mailto:huffman.brian.c@gmail.com\">huffman.brian.c@gmail.com</a>&gt;<br>\nYou can also use the custom induct or cases rules provided by the \"fun\" command.</p>\n<p>lemma \"plus a b = plus b a\"<br>\napply (cases \"(a, b)\" rule: plus.cases)</p>\n<p>or</p>\n<p>lemma \"plus a b = plus b a\"<br>\napply (induct a b rule: plus.induct)</p>\n<p>These give you one case corresponding to each equation in plus.simps,<br>\nwhich may be a different set of cases than you would get with the<br>\ncase_product rule.</p>\n<ul>\n<li>Brian</li>\n</ul>",
        "id": 294279375,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660919827
    },
    {
        "content": "<p>From: Johannes Hölzl &lt;<a href=\"mailto:hoelzl@in.tum.de\">hoelzl@in.tum.de</a>&gt;<br>\ncase_product should work with any case-style theorem of the form<br>\n  R x y ==&gt; (case one over x y ==&gt; P) ==&gt; (case two over x y ==&gt; P) ==&gt;<br>\nP<br>\n(where R is the inductive predicate. it is optional)</p>\n<p>So you can write:</p>\n<p>dt.cases[case_product dt.cases]</p>\n<ul>\n<li>Johannes</li>\n</ul>",
        "id": 294286541,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660922054
    },
    {
        "content": "<p>From: Vadim Zaliva &lt;<a href=\"mailto:vzaliva@cmu.edu\">vzaliva@cmu.edu</a>&gt;<br>\nHi!</p>\n<p>If there is a way to use case_product attribute for inductive definitions?<br>\nFor example if I have \"inductive dt ...\" it gives me dt.cases but no dt.exhaust.<br>\nThanks!</p>\n<p>Vadim</p>\n<p>Sincerely,<br>\nVadim Zaliva</p>",
        "id": 294286597,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660922079
    },
    {
        "content": "<p>From: Vadim Zaliva &lt;<a href=\"mailto:vzaliva@cmu.edu\">vzaliva@cmu.edu</a>&gt;<br>\nJohannes, thanks for the hint.</p>\n<p>I think I have a slightly different situation. I have induction rule in the form:</p>\n<p>inductive X :: \"type ==&gt; bool\"<br>\n  c1 : X ...<br>\n| c2 : X ...</p>\n<p>and I need to prove something like this:</p>\n<p>X a ==&gt; X b ==&gt; X f(a,b)</p>\n<p>I am trying to write ISAR proof individually considering<br>\nall combination of (c1,c2) constructors for 'a' and 'b':</p>\n<p>case(a=c1,b=c1)<br>\ncase(a=c1,b=c2)<br>\ncase(a=c2,b=c1)<br>\ncase(a=c2,b=c2)</p>\n<p>I was looking for something like this:</p>\n<p>proof(cases a b rule: X.cases)</p>\n<p>Alternatively perhaps there is a way to nest proof methods applying</p>\n<p>proof(cases a rule: X.cases)</p>\n<p>and </p>\n<p>proof(cases b rule: X.cases)</p>\n<p>sequentially?</p>\n<p>I am sorry about such naive question, I am new to Isabelle. Thanks!</p>\n<p>Vadim</p>\n<p>Sincerely,<br>\nVadim Zaliva</p>",
        "id": 294286754,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660922121
    },
    {
        "content": "<p>From: Johannes Hölzl &lt;<a href=\"mailto:hoelzl@in.tum.de\">hoelzl@in.tum.de</a>&gt;<br>\nHm, do you need case distinction over X at all?</p>\n<p>Why not:</p>\n<p>proof (cases a b rule: type.exhaust[case_product type.exhaust])</p>\n<p>Where type is the name of your type.</p>\n<p>But maybe I didn't understand your goal. But for this I need more<br>\ninformation, for example the definition of your predicate X and type<br>\n\"type\" and the theorem you want to proof. You can also attach your<br>\ntheory development if you want.</p>\n<ul>\n<li>Johannes</li>\n</ul>",
        "id": 294286765,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660922128
    }
]