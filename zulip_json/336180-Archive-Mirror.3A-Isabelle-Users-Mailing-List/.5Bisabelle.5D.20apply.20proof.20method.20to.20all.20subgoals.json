[
    {
        "content": "<p>From: Alex Katovsky &lt;<a href=\"mailto:apk32@cam.ac.uk\">apk32@cam.ac.uk</a>&gt;<br>\nHi,</p>\n<p>This is probably a very basic question, so I apologize if I'm not <br>\nreading the tutorial carefully enough. I have this lemma</p>\n<p>lemma \"(∀ x . A ⟶ B) ∧ (∀ y . C ⟶ D) ∧ (∀ x . E ⟶ F)\"</p>\n<p>and from this I want to generate the three subgoals</p>\n<ol>\n<li>⋀x. A ⟹ B</li>\n<li>⋀y. C ⟹ D</li>\n<li>⋀x. E ⟹ F</li>\n</ol>\n<p>The only way I know how to do this at the moment is</p>\n<p>apply(rule conjI, rule_tac [2] conjI)<br>\napply(rule_tac [1] allI, rule_tac [2] allI, rule_tac [3] allI)<br>\napply(rule_tac [1] impI, rule_tac [2] impI, rule_tac [3] impI)</p>\n<p>What I would like to do is repeatedly apply \"(rule conjI)|(rule <br>\nallI)|(rule impI)\" to all subgoals until no further progress can be made.</p>\n<p>Many thanks,<br>\nAlex.</p>",
        "id": 294134517,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660843912
    },
    {
        "content": "<p>From: Lawrence Paulson &lt;<a href=\"mailto:lp15@cam.ac.uk\">lp15@cam.ac.uk</a>&gt;<br>\nProbably you should try</p>\n<p>apply safe</p>\n<p>This performs all so-called safe inferences: those that cannot lead to information loss.</p>\n<p>Larry Paulson</p>",
        "id": 294134541,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660843919
    },
    {
        "content": "<p>From: Alex Katovsky &lt;<a href=\"mailto:apk32@cam.ac.uk\">apk32@cam.ac.uk</a>&gt;<br>\nThis works very well in the example I gave, but it appears that <br>\nsometimes \"apply safe\" can do more goal splitting than I want it to.  <br>\nFor example, if \"F\" below is \"x = y\" where x and y are sets then \"apply <br>\nsafe\" will use set_eqI to generate these goals</p>\n<ol>\n<li>⋀x xa. ⟦E; xa ∈ x⟧ ⟹ xa ∈ y</li>\n<li>⋀x xa. ⟦E; xa ∈ y⟧ ⟹ xa ∈ x</li>\n</ol>\n<p>and in some instances it would be preferable to keep equality as the <br>\ngoal.  Is there some way that I can limit \"apply safe\", for example <br>\nsomething like \"apply (safe only: conjI allI impI)\"?</p>",
        "id": 294134589,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660843924
    },
    {
        "content": "<p>From: Joachim Breitner &lt;<a href=\"mailto:mail@joachim-breitner.de\">mail@joachim-breitner.de</a>&gt;<br>\nHi,</p>\n<p>untested, but I recall that I used \"apply (intro conjI allI impI)\" in<br>\nsuch cases.</p>\n<p>Greetings,<br>\nJoachim<br>\n<a href=\"/user_uploads/14278/B8EhsZVwV1KS6_wOP1hqV-O7/signature.asc\">signature.asc</a></p>",
        "id": 294134619,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660843931
    },
    {
        "content": "<p>From: Mathieu Giorgino &lt;<a href=\"mailto:mathieu.giorgino@irit.fr\">mathieu.giorgino@irit.fr</a>&gt;<br>\nYou could use \"intro\":</p>\n<p>apply (intro conjI allI impI)</p>\n<p>which apply all introduction rules you give to it until no more is applicable.</p>\n<p>Mathieu Giorgino</p>",
        "id": 294134633,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660843936
    },
    {
        "content": "<p>From: Lars Noschinski &lt;<a href=\"mailto:noschinl@in.tum.de\">noschinl@in.tum.de</a>&gt;<br>\nIf you want to prove this lemma by proving the three goals mentioned <br>\nabove, the idiomatic way to would probably be something like the following:</p>\n<p>lemma \"(∀ x . A ⟶ B) ∧ (∀ y . C ⟶ D) ∧ (∀ x . E ⟶ F)\"<br>\nproof -<br>\n   { have \"ALL x. A -&gt; B\" &lt;some proof&gt; }<br>\n   moreover<br>\n   { have \"ALL y. C -&gt; D\" &lt;some proof&gt; }<br>\n   moreover<br>\n   { have \"ALL x. E -&gt; F\" &lt;some proof&gt; }<br>\n   ultimately<br>\n   show ?thesis by auto<br>\nqed</p>\n<p>Regards,<br>\n   Lars</p>",
        "id": 294134707,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660843964
    },
    {
        "content": "<p>From: Alexander Katovsky &lt;<a href=\"mailto:apk32@cam.ac.uk\">apk32@cam.ac.uk</a>&gt;<br>\nHow about</p>\n<p>lemma \"\\&lt;forall&gt; z . ((A (n :: nat) z) \\&lt;and&gt; (B n z)) <br>\n\\&lt;longrightarrow&gt; C z\"<br>\n    proof(induct n, intro allI conjI impI)</p>\n<p>It seems <code>intro</code> is not attacking the second induction goal.  <code>safe</code> <br>\nworks here, but in other cases (with particular forms for A B and C) it <br>\ndoes more than I want it to.</p>",
        "id": 294135263,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660844132
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nThe proof methods \"intro\" and \"elim\" stem from a very ancient phase of <br>\nIsar (around 1998/1999) when certain key points about structured proofs <br>\nwhere not yet undestood.</p>\n<p>Instead of iterative decomposition of standard connectives, proofs can be <br>\ndone more directly by stating propositions in the intended way.  The <br>\n\"induct\" method can work with such rule structure directly.  For example:</p>\n<p>notepad<br>\nbegin<br>\n   fix z :: 'a and n :: nat<br>\n   have \"A n z ==&gt; B n z ==&gt; C z\"<br>\n   proof (induct n)<br>\n      ...</p>\n<p>No \"intro\" boilerplate is needed here.</p>\n<p>Makarius</p>",
        "id": 294135282,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660844138
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nHere I meant to say (induct n arbitrary: z)</p>\n<p>Makarius</p>",
        "id": 294135294,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660844144
    }
]