[
    {
        "content": "<p>From: Lars Hupel &lt;<a href=\"mailto:hupel@in.tum.de\">hupel@in.tum.de</a>&gt;<br>\nI found another problem involving nested case expressions:</p>\n<p>lemma \"set (if p then case q of (None, u) ⇒ [] | (Some s, u) ⇒ []<br>\n                   else []) = {}\"<br>\n  apply simp</p>\n<p>In both Isabelle2014 and Isabelle/adaa430fc0f7, this prints:</p>\n<p>Tactic failed<br>\n  The error(s) above occurred for the goal statement⌂:<br>\n  set (if p then case q of (None, u) ⇒ [] | (_, u) ⇒ [] else []) =<br>\n  {x. ∃uu_ uua_. p ∧ (uua_, uu_) = q ∧<br>\n                 x ∈ set (case uua_ of None ⇒ [] | _ ⇒ [])}</p>\n<p>A quick look into the simpset reveals that the simproc<br>\n'list_to_set_comprehension' is likely at fault. Indeed, after disabling<br>\nit, 'simp' goes through (doesn't solve the goal, though). Apparently the<br>\nsimproc internally sets up some goal via 'Goal.prove' which it cannot solve.</p>\n<p>Cheers<br>\nLars<br>\n<a href=\"/user_uploads/14278/t5p-DncHcnAAVUJuFkOcnKey/smime.p7s\">smime.p7s</a></p>",
        "id": 294327526,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660929085
    },
    {
        "content": "<p>From: Florian Haftmann &lt;<a href=\"mailto:florian.haftmann@informatik.tu-muenchen.de\">florian.haftmann@informatik.tu-muenchen.de</a>&gt;<br>\nThis seems (again) an indication, that either somebody invests some time<br>\nto restore that simproc, or make it optional alternatively.</p>\n<p>Florian<br>\n<a href=\"/user_uploads/14278/00qzge2X7VkBetNlYTL5vfhj/signature.asc\">signature.asc</a></p>",
        "id": 294327842,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660929178
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nThis old thread is still open.</p>\n<p>I was at first confused, because the answer by Florian sounded like <br>\nanother routine breakdown of Set_Comprehension_Pointfree.simproce, but <br>\nhere it is List_to_Set_Comprehension.simproc, which looks much more <br>\ncanonical and robust.</p>\n<p>Here is again the example causing the crash:</p>\n<p>lemma \"set (if p then case q of (None, u) ⇒ [] | (Some s, u) ⇒ [] else []) = {}\"<br>\n   apply simp</p>\n<p>The point of failure is here in the source <br>\n<a href=\"http://isabelle.in.tum.de/repos/isabelle/annotate/879918f4ee0f/src/HOL/List.thy#l639\">http://isabelle.in.tum.de/repos/isabelle/annotate/879918f4ee0f/src/HOL/List.thy#l639</a> <br>\nwhich may be easily seen by putting a print_tac before and after that <br>\nstep.</p>\n<p>It is not immediately obvious to me, how to improve the simproc, but it <br>\nshould be possible, after 2-3 rounds of careful study of the source.</p>\n<p>In any case this is not relevant for Isabelle2015: the same failure <br>\nhappens in Isabelle2014, so we don't have a regression.</p>\n<p>Makarius</p>",
        "id": 294637783,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661160869
    }
]