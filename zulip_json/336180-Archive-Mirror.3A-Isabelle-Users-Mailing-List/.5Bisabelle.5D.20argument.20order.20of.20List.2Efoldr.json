[
    {
        "content": "<p>From: Brian Huffman &lt;<a href=\"mailto:brianh@cs.pdx.edu\">brianh@cs.pdx.edu</a>&gt;<br>\nHere is the type of List.foldr from the Standard ML basis library:<br>\nval foldr : ('a * 'b -&gt; 'b) -&gt; 'b -&gt; 'a list -&gt; 'b</p>\n<p>and the type of foldr from Haskell's List library:<br>\nfoldr :: (a -&gt; b -&gt; b) -&gt; b -&gt; [a] -&gt; b</p>\n<p>But List.foldr in Isabelle has this type:<br>\nfoldr :: \"('a =&gt; 'b =&gt; 'b) =&gt; 'a list =&gt; 'b =&gt; 'b\"</p>\n<p>Why are the arguments in that order?</p>\n<p>The standard argument order would be much more useful for partial application.</p>\n<p>Maybe it is based on Isabelle's Library.foldr, which has this type:<br>\nLibrary.foldr : ('a * 'b -&gt; 'b) -&gt; 'a list * 'b -&gt; 'b</p>\n<p>Since it has an uncurried type, the argument order doesn't make any<br>\ndifference here as far as partial application is concerned, and I<br>\nrecognize that there is a mnemonic benefit to this argument order:<br>\nLibrary.foldr (op +) ([1,2,3], 4) = 1 + (2 + (3 + 4))</p>\n<p>But I think that being amenable to partial application is more important.</p>\n<p>Does anyone else have an opinion on this?</p>\n<ul>\n<li>Brian</li>\n</ul>",
        "id": 294102746,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660834278
    },
    {
        "content": "<p>From: Lucas Dixon &lt;<a href=\"mailto:ldixon@inf.ed.ac.uk\">ldixon@inf.ed.ac.uk</a>&gt;<br>\nI really like Isabelle's argument-order for fold; in particular I<br>\nfrequently fold over list in order to update some value:</p>\n<p>a |&gt; fold f l<br>\n  |&gt; fold f2 l2</p>\n<p>This is intuitively updating the value of \"a\" and using each value of<br>\n\"l\" and \"l2\".</p>\n<p>This argument order is also nice for combine folds...</p>\n<p>fold o fold : ('a -&gt; 'b -&gt; 'b) -&gt; 'a list list -&gt; 'b -&gt; 'b</p>\n<p>In my applications, I've rarely had has use for other argument<br>\norderings. But perhaps we should have a fold' it haskel style?</p>\n<p>(incidentally, looking at my version of Isabelle from Feb 23, [changeset<br>\n35329:cac5a37fb638], I have:<br>\nList.foldr : ('a * 'b -&gt; 'b) -&gt; 'b -&gt; 'a list -&gt; 'b<br>\nfold : ('a -&gt; 'b -&gt; 'b) -&gt; 'a list -&gt; 'b -&gt; 'b)</p>\n<p>best,<br>\nlucas</p>\n<p>Brian Huffman wrote:</p>",
        "id": 294102757,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660834282
    },
    {
        "content": "<p>From: Alexander Krauss &lt;<a href=\"mailto:krauss@in.tum.de\">krauss@in.tum.de</a>&gt;<br>\nHi Brian,</p>\n<p>as far as I know, the folds in the List theory, as well as <br>\nLibrary.foldl/foldr in ML are memories from a distant past... they are <br>\njust what they happen to be, but there is no \"why\".</p>\n<p>The \"one and only true fold\" is the \"fold\" of ML, with variant fold_rev. <br>\nBut it is not so much folding a binary operation like \"+\" but more an <br>\niteration of a transformation of a state. But it is the only version <br>\nthat composes (fold o fold).</p>\n<p>Alex</p>\n<p>Brian Huffman wrote:</p>",
        "id": 294102774,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660834288
    },
    {
        "content": "<p>From: Brian Huffman &lt;<a href=\"mailto:brianh@cs.pdx.edu\">brianh@cs.pdx.edu</a>&gt;<br>\nOn Sat, Mar 6, 2010 at 10:36 AM, Lucas Dixon &lt;<a href=\"mailto:ldixon@inf.ed.ac.uk\">ldixon@inf.ed.ac.uk</a>&gt; wrote:</p>\n<blockquote>\n<p>I really like Isabelle's argument-order for fold; in particular I<br>\nfrequently fold over list in order to update some value:</p>\n<p>a |&gt; fold f l<br>\n |&gt; fold f2 l2<br>\n...<br>\nThis argument order is also nice for combine folds...</p>\n<p>fold o fold : ('a -&gt; 'b -&gt; 'b) -&gt; 'a list list -&gt; 'b -&gt; 'b</p>\n</blockquote>\n<p>On Sat, Mar 6, 2010 at 12:28 PM, Alexander Krauss &lt;<a href=\"mailto:krauss@in.tum.de\">krauss@in.tum.de</a>&gt; wrote:</p>\n<blockquote>\n<p>it is not so much folding a binary operation like \"+\" but more an iteration<br>\nof a transformation of a state. But it is the only version that composes<br>\n(fold o fold).</p>\n</blockquote>\n<p>These are good points. I guess both argument orders have their uses,<br>\nin different situations. I suppose I was thinking with a Haskell bias,<br>\nsince partially-applied foldr is used a lot in Haskell. Also, the<br>\n\"fold o fold\" situation never seems to come up in Haskell either,<br>\nsince for state transformers people generally use mapM with a state<br>\nmonad rather than a fold.</p>\n<ul>\n<li>Brian</li>\n</ul>",
        "id": 294102806,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660834297
    },
    {
        "content": "<p>From: Lawrence Paulson &lt;<a href=\"mailto:lp15@cam.ac.uk\">lp15@cam.ac.uk</a>&gt;<br>\nThis one is used in my ML book. It (and the corresponding foldl) work for lists of lists nested to any depth. E.g.</p>\n<p>fun sum_of_sums xss = foldl (foldl op+) (0, xss);</p>\n<p>Larry</p>",
        "id": 294102820,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660834301
    },
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;</p>\n<blockquote>\n<p>as far as I know, the folds in the List theory, as well as<br>\nLibrary.foldl/foldr in ML are memories from a distant past... they are<br>\njust what they happen to be, but there is no \"why\".</p>\n</blockquote>\n<p>The \"why\" is Larry's book. I took it from there.</p>\n<p>Tobias</p>\n<blockquote>\n<p>The \"one and only true fold\" is the \"fold\" of ML, with variant fold_rev.<br>\nBut it is not so much folding a binary operation like \"+\" but more an<br>\niteration of a transformation of a state. But it is the only version<br>\nthat composes (fold o fold).</p>\n<p>Alex</p>\n<p>Brian Huffman wrote:</p>\n<blockquote>\n<p>Here is the type of List.foldr from the Standard ML basis library:<br>\nval foldr : ('a * 'b -&gt; 'b) -&gt; 'b -&gt; 'a list -&gt; 'b</p>\n<p>and the type of foldr from Haskell's List library:<br>\nfoldr :: (a -&gt; b -&gt; b) -&gt; b -&gt; [a] -&gt; b</p>\n<p>But List.foldr in Isabelle has this type:<br>\nfoldr :: \"('a =&gt; 'b =&gt; 'b) =&gt; 'a list =&gt; 'b =&gt; 'b\"</p>\n<p>Why are the arguments in that order?</p>\n<p>The standard argument order would be much more useful for partial<br>\napplication.</p>\n<p>Maybe it is based on Isabelle's Library.foldr, which has this type:<br>\nLibrary.foldr : ('a * 'b -&gt; 'b) -&gt; 'a list * 'b -&gt; 'b</p>\n<p>Since it has an uncurried type, the argument order doesn't make any<br>\ndifference here as far as partial application is concerned, and I<br>\nrecognize that there is a mnemonic benefit to this argument order:<br>\nLibrary.foldr (op +) ([1,2,3], 4) = 1 + (2 + (3 + 4))</p>\n<p>But I think that being amenable to partial application is more important.</p>\n<p>Does anyone else have an opinion on this?</p>\n<ul>\n<li>Brian<br>\n</li>\n</ul>\n</blockquote>\n</blockquote>",
        "id": 294102858,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660834312
    }
]