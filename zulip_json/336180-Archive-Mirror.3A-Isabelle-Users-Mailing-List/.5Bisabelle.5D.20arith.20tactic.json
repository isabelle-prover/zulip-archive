[
    {
        "content": "<p>From: John Matthews &lt;<a href=\"mailto:matthews@galois.com\">matthews@galois.com</a>&gt;<br>\nHi Rafal, thanks for the lemma. My understanding is that the arith  <br>\ntactic is able to handle the mod operator, provided that its second  <br>\nargument is a constant. In fact, after I sent off my original email,  <br>\nI was able to get arith to prove the lemma, with a bit of manual  <br>\nguidance:</p>\n<p>lemma arith_example:<br>\n   \"[|(i::int) &lt; (nb - 1) mod 256;<br>\n     0 &lt;= nb;<br>\n     nb &lt; 256;<br>\n     0 &lt;= i;<br>\n     i &lt; 256|]<br>\n    ==&gt; i &lt; (i + 1) mod 256\"<br>\napply (subst mod_pos_pos_trivial, auto)<br>\nby arith</p>\n<p>In that proof script, this is the subgoal given to arith to solve:</p>\n<p>\"[|i &lt; (nb - 1) mod 256;<br>\n   0 &lt;= nb;<br>\n   nb &lt; 256;<br>\n   0 &lt;= i;<br>\n   i &lt; 256|]<br>\n  ==&gt; i &lt; 255\"</p>\n<p>The arith tactic still needed to have understood the mod operator to  <br>\nhave solved this subgoal.</p>\n<p>The bigger issue is that we'll be encountering many, many subgoals  <br>\nlike this in our projects here, most of which involve reasoning about  <br>\nmachine arithmetic. So we're relying on arith to discharge them  <br>\nautomatically and efficiently.</p>\n<p>All the best,<br>\n-john</p>",
        "id": 293899762,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660743991
    },
    {
        "content": "<p>From: <a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a></p>\n<blockquote>\n<p>My understanding is that the arith tactic is able to handle the mod<br>\noperator, provided that its second argument is a constant.</p>\n</blockquote>\n<p>In principle, yes. In your case the resulting Presburger goal killed the<br>\ndecision procedure. We are working on it but it may take a little while.<br>\nThere is no doubt that this is an important class of formulae.</p>\n<p>Tobias</p>",
        "id": 293899763,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660743991
    },
    {
        "content": "<p>From: Amine Chaieb &lt;<a href=\"mailto:chaieb@informatik.tu-muenchen.de\">chaieb@informatik.tu-muenchen.de</a>&gt;<br>\nJohn,<br>\nThe reasoning about mod in arith about mod and div is poor and enhancing <br>\nit is on the TODO list.<br>\nI recently wrote a more effitient implementation of the same QE algorithm, <br>\nwhich is able to solve your problem whithin 3 minutes, <br>\nrunning in ML (without proofs) which is just a pitty.</p>\n<p>Presburger arithmetic is just too general to deal with mod and div in a <br>\npractically acceptable manner. The decision problem in Presburger <br>\narithmetic is doubly exponential in space with respect to the largest <br>\nconstant occuring in the formula (255).</p>\n<p>Could you give me a \"description\" of this formula class?</p>\n<p>Amine.</p>",
        "id": 293899784,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660743996
    }
]