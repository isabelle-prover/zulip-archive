[
    {
        "content": "<p>From: Burkhart Wolff &lt;<a href=\"mailto:Burkhart.Wolff@lri.fr\">Burkhart.Wolff@lri.fr</a>&gt;<br>\nDear all,</p>\n<p>I implemented an “assert” top-level command; it is similar to “value\",<br>\nbut requires the expression to be boolean and to evaluate to true.<br>\nOtherwise the command fails.</p>\n<p>I was surprised not to find something similar in the rich code-base of<br>\nIsabelle and found it dead useful when developing / debugging design-level <br>\nmodels.</p>\n<p>Its not a big thing; If integrated into the Isabelle sources, it could after <br>\nrefactoring probably be reduced to 5 - 10 additional lines. In the meantime, <br>\nusers might just include my little theory in the annex.</p>\n<p>Best regards,</p>\n<p>bu<br>\n<a href=\"/user_uploads/14278/fS8KNCDEp3x0nlPR4c5taK5V/Assert.thy\">Assert.thy</a></p>",
        "id": 294717987,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661183894
    },
    {
        "content": "<p>From: Manuel Eberl &lt;<a href=\"mailto:eberlm@in.tum.de\">eberlm@in.tum.de</a>&gt;<br>\nFor the sake of completeness, there is something like this for the<br>\n\"values\" command in the predicate compiler:</p>\n<p>values [expected \"{}\" pred] \"{x. False'}\"</p>\n<p>Manuel</p>",
        "id": 294718848,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661184100
    },
    {
        "content": "<p>From: Andreas Lochbihler &lt;<a href=\"mailto:andreas.lochbihler@inf.ethz.ch\">andreas.lochbihler@inf.ethz.ch</a>&gt;<br>\nDear Burkhart,</p>\n<p>There are already plenty of ways to do this if you are willing to commit to a specific <br>\nevaluator. Here are a few:</p>\n<ol>\n<li>\n<p>notepad begin have \"proposition\" by eval end<br>\n   generates the code in SML, compiles and runs it in the running PolyML process</p>\n</li>\n<li>\n<p>same as (1), but \"by normalization\" or \"by code_simp\" use evaluation by NBE or with the <br>\nsimplifier.</p>\n</li>\n<li>\n<p>The theory HOL/Library/Code_Test implements a command test_code for testing code <br>\ngenerator setups. The command test_code takes a boolean expression and a non-empty list of <br>\nnames for the executable of the target language (PolyML, SMLNJ, mlton, GHC, OCaml, Scala). <br>\nIt then generates the code for the boolean expression and evaluates it in an external <br>\nprocess. For example:</p>\n</li>\n</ol>\n<p>test_code \"5 = (7 :: int)\" in PolyML Scala</p>\n<p>This is slower than the other options because it starts up an external process. But it has <br>\na few heuristics to pretty-print the result of subexpressions (such as the two sides of an <br>\nequality).</p>\n<p>All the best,<br>\nAndreas</p>",
        "id": 294719346,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661184235
    },
    {
        "content": "<p>From: Florian Haftmann &lt;<a href=\"mailto:florian.haftmann@informatik.tu-muenchen.de\">florian.haftmann@informatik.tu-muenchen.de</a>&gt;<br>\nA quite idiomatic way to express assertions by evaluation is something like</p>\n<p>theory Foo<br>\nimports Main<br>\nbegin</p>\n<p>text ‹<br>\n  @{lemma \"sorted [1, 2, 3::nat]\" by eval}<br>\n›</p>\n<p>text ‹<br>\n  @{lemma \"sorted [1, 3, 2::nat]\" by eval}<br>\n›</p>\n<p>end</p>\n<p>where assertions are treated as formal text within the theory.</p>\n<p>In Isar, there is a tendency to be more explicit and verbose concerning<br>\nevaluation techniques the more formal its particular application is.</p>\n<p>The deeper reason is that executability in Isabelle/HOL is no inherent<br>\nproperty of the calculus but rather a certain interpretation of<br>\ningredients of the calculus.</p>\n<p>Cheers,<br>\n    Florian<br>\n<a href=\"/user_uploads/14278/vtUKToG1ayC8f_sGzBcXttKe/signature.asc\">signature.asc</a></p>",
        "id": 294720182,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661184505
    }
]