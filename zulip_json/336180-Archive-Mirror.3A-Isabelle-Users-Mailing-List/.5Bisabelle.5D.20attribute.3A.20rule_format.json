[
    {
        "content": "<p>From: Lawrence Paulson &lt;<a href=\"mailto:lp15@cam.ac.uk\">lp15@cam.ac.uk</a>&gt;<br>\nI think it was just a little more difficult to implement, and never necessary, because you could always write your original theorem in the form P —&gt; Q —&gt; R rather than P &amp; Q —&gt; R. And this sort of thing was only necessary for proof by induction anyway.</p>\n<p>With the Isar induction methods, which had been around for several years now, the rule_format attribute is quite unnecessary. It is retained only so that legacy proofs will continue to work.</p>\n<p>Larry Paulson</p>",
        "id": 294226033,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660900026
    },
    {
        "content": "<p>From: Christian Sternagel &lt;<a href=\"mailto:c-sterna@jaist.ac.jp\">c-sterna@jaist.ac.jp</a>&gt;<br>\nWhat is the reason for \"rule_format\" not to touch HOL conjunction in <br>\npremises, i.e., why is, e.g.,  \"A &amp; B --&gt; A\" not transformed into \"A ==&gt; <br>\nB ==&gt; A\" by \"rule_format\"?</p>\n<p>I often thought such a behavior useful. Is there another way of <br>\nreplacing every HOL connective by an appropriate Pure connective (as far <br>\nas possible)?</p>\n<p>cheers</p>\n<p>chris</p>",
        "id": 294227513,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660900725
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nOn Thu, 1 Nov 2012, Lawrence Paulson wrote:</p>\n<blockquote>\n<p>I think it was just a little more difficult to implement, and never <br>\nnecessary, because you could always write your original theorem in the <br>\nform P —&gt; Q —&gt; R rather than P &amp; Q —&gt; R. And this sort of thing was only <br>\nnecessary for proof by induction anyway.</p>\n<p>With the Isar induction methods, which had been around for several years <br>\nnow, the rule_format attribute is quite unnecessary.</p>\n</blockquote>\n<p>It was indeed considered legacy since day 1, when I introduced the <br>\nattribute to imitate the old qed_spec_mp feature of that time.  This also <br>\nexplains what it does and what not.  Generally it would be hard to say <br>\nwhere to stop making a \"rule format\", and an important purpose of the <br>\nexplicit Pure rule notation with !! and ==&gt; is to make clear what the <br>\nintended rule structure really is, without guessing by the system.</p>\n<p>Moreover, the somewhat odd joining of what is now called \"rule attribute\" <br>\nvs. \"declaration attribute\" in the same notation goes back to the ancient <br>\ntimes of imitating qed_spec_mp.  It has been a partial success in getting <br>\nrid of many qed commands, but at the cost of some confusion about what <br>\nattributes really are.  (I've made some tiny reforms here for <br>\nIsabelle2012, to provide proper static evaluation of rule attributes at <br>\nlast.)</p>\n<blockquote>\n<p>It is retained only so that legacy proofs will continue to work.</p>\n</blockquote>\n<p>Occasionally, I entertain myself in trying to eliminate such old uses of <br>\n\"rule_format\", or rather do it while testing Isabelle/jEdit performance <br>\nand robustness.  Unfortunately, it often fails, because compact HOL <br>\nconnectives passed through induction produce different goals for tools <br>\nlike \"auto\": having nested !! and ==&gt; in the induction hypotheses fails <br>\nfor some reasons that are unknown to me.  Empirically I've always taken <br>\nthis as a feature of auto, but it might be worth revisiting it.</p>\n<p>Larry himself has pointed out such observations about auto privately to me <br>\nsome months ago, when porting older ZF scripts.</p>\n<p>Maybe the isabelle-dev thread on \"Safe approach to hypothesis <br>\nsubstitution\" by Thomas Sewell from 2 years ago points into a direction to <br>\nimprove the situation, or maybe it is unrelated.</p>\n<p>Makarius</p>",
        "id": 294227852,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660900903
    },
    {
        "content": "<p>From: Randy Pollack &lt;<a href=\"mailto:rpollack@inf.ed.ac.uk\">rpollack@inf.ed.ac.uk</a>&gt;<br>\nI use \"rule_format\" for other than legacy purposes.  Here is an<br>\nexample where I give a name to a (paramaterized) bool so that I can<br>\nuse it in various ways.  Perhaps someone will show me a better way.</p>\n<p>abbreviation<br>\n  he :: \"bbS \\&lt;Rightarrow&gt; bool\"<br>\n  where \"he M == \\&lt;forall&gt;(pi::name prm) X. F X M = F (pi\\&lt;bullet&gt;X)<br>\n(pi\\&lt;bullet&gt;M)\"<br>\nabbreviation  (* F equivariant (relativised) *)<br>\n  HE :: \"bool\"<br>\n  where \"HE == \\&lt;forall&gt;M. bbL M \\&lt;longrightarrow&gt; he M\"<br>\nabbreviation  (* F equivariant (unrelativised) *)<br>\n  XHE :: \"bool\"<br>\n  where \"XHE == \\&lt;forall&gt;M. he M\"</p>\n<p>This doesn't just save typing for me; it saves checking for a reader<br>\nthat all the uses are the same formula.  \"rule_format\" is used in<br>\nproving things about HE and XHE.</p>\n<p>Randy</p>",
        "id": 294227965,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660900940
    },
    {
        "content": "<p>From: Thomas Sewell &lt;<a href=\"mailto:Thomas.Sewell@nicta.com.au\">Thomas.Sewell@nicta.com.au</a>&gt;<br>\nIdeally all of our tools would care only about the semantics of the <br>\nrules we provide, rather than the specific syntactic arrangement. In <br>\npractice we are far from that, and conversion between logically <br>\nequivalent lemmas seems to be a fact of life.</p>\n<p>For instance, it is sometimes useful to state a lemma \"P ==&gt; Q\" to <br>\nexactly match an assumption \"Q\" of another rule and then resolve them <br>\nwith OF. It may be convenient to state \"Q\" using --&gt; and ALL rather than <br>\n==&gt; and !! to ensure it is completely consumed with one OF.</p>\n<p>I see [rule_format] as just a shorthand for one of the kinds of <br>\nconversions that are often needed. Often it's not the right one, and a <br>\nlonghand [OF allI conjI ...] comes out.</p>\n<p>I wonder if anonymous contexts are a (partial) solution to this problem, <br>\nfor instance:</p>\n<p>anonymous context begin</p>\n<p>abbreviation (input) \"P x y == ...\"<br>\nabbreviation (input) \"Q x y z == ...\"<br>\nabbreviation (input) \"R z == ...\"</p>\n<p>theorem foo: \"P x y &amp; Q x y z ==&gt; R z\"<br>\nproof<br>\n    blah blah blah<br>\nqed</p>\n<p>corollary foo_tupleD: \"P x y ==&gt; Q x y (x, y) ==&gt; R (x, y)\"<br>\n   and foo_tupleI: \"P (fst z) (snd z) ==&gt; Q (fst z) (snd z) z ==&gt; R z\"<br>\n   and foo_simp: \"Q x y z ==&gt; (P x y &amp; R z) = P x y\"<br>\n   by (metis foo)</p>\n<p>end</p>\n<p>This is a generalisation of the Isar (is \"?P x y &amp; ?Q x y z --&gt; ?R z\") <br>\nwhich also allows easy statement of closely related corollaries.</p>\n<p>I think that hypothesis substitution might be unrelated.</p>\n<p>Yours,<br>\n     Thomas.</p>",
        "id": 294227979,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660900947
    }
]