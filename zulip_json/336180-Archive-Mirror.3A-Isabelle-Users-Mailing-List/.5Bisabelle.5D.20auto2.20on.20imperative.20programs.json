[
    {
        "content": "<p>From: Bohua Zhan &lt;<a href=\"mailto:bzhan@mit.edu\">bzhan@mit.edu</a>&gt;<br>\nHi, everyone</p>\n<p>I have uploaded the newest version of auto2, with work done over the<br>\nsummer. The main addition is examples on verifying imperative<br>\nprograms, in the framework of Imperative_HOL.</p>\n<p>The repository is at: <a href=\"https://github.com/bzhan/auto2\">https://github.com/bzhan/auto2</a></p>\n<p>The main algorithms verified are:</p>\n<ul>\n<li>Reverse and quicksort on arrays.</li>\n<li>Insert, delete, reverse, and merge on linked lists.</li>\n<li>Insert and delete on binary trees.</li>\n</ul>\n<p>Examples on arrays and linked lists follow the corresponding ones in<br>\nHOL/Imperative_HOL/ex.</p>\n<p>Similar to examples in Imperative_HOL/ex, the proofs use directly the<br>\nsemantics of the heap monad. All loops are defined by recursion, and<br>\nproperties of recursive functions are proved by induction. No Hoare<br>\nlogic or separation logic is used (although some of the abstractions<br>\nmay be inspired by separation logic, as is necessary to deal with<br>\ndisjointness of sets of pointers, etc). The proofs are \"mostly\"<br>\nautomatic - only a few lines of hints are needed to give intermediate<br>\nsteps.</p>\n<p>Some technical notes:</p>\n<ul>\n<li>\n<p>I added a \"comment\" command similar to \"assert\". It is used to state<br>\nintermediate results about variables in the middle of imperative<br>\nfunctions. It is never intended to be evaluated (and in fact, often<br>\ncannot be evaluated algorithmically). Right now the semantics is that<br>\nall comments must be true for a function to \"succeed\", which of course<br>\ncannot be realized in actual execution - so some restructuring would<br>\nbe needed for this to make more sense.</p>\n</li>\n<li>\n<p>For both linked lists and binary trees, I defined proper-ness of a<br>\npointer as distinctness of reachable pointers. For linked lists, this<br>\nis equivalent to the fact that the traversal of the pointer is a<br>\nfinite list. For binary trees it is different.</p>\n</li>\n</ul>\n<p>The documentation is updated to reflect all the internal changes, but<br>\nunfortunately I haven't had time to explain the newer examples in<br>\ndetail. Nevertheless I would be happy to answer any questions about<br>\nthem here. Any comments are also welcome.</p>\n<p>Thanks,<br>\nBohua</p>",
        "id": 294652878,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661166834
    }
]