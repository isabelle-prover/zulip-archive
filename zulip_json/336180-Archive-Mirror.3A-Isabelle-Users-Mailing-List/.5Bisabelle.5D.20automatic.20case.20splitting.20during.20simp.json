[
    {
        "content": "<p>From: Lucas Dixon &lt;<a href=\"mailto:ldixon@inf.ed.ac.uk\">ldixon@inf.ed.ac.uk</a>&gt;<br>\nHello,</p>\n<p>What is the best way to get Isabelle to automatically perform certain<br>\ncase analysis steps within simplification?</p>\n<p>e.g.</p>\n<p>datatype gate = D | S | T1 | T2 | T3 | T4 | B1 | B2 | B3 | B4</p>\n<p>fun reduce1_false2 :: \"gate =&gt; bool =&gt; bool\"<br>\nwhere<br>\n  reduce1_false2_in_T1: \"reduce1_false2 T1 g = g\"<br>\n| reduce1_false2_in_T2: \"reduce1_false2 T2 g = True\"<br>\n| reduce1_false2_in_T3: \"reduce1_false2 T3 g = ~ g\"<br>\n| reduce1_false2_in_T4: \"reduce1_false2 T4 g = True\"<br>\n| reduce1_false2_in_B1: \"reduce1_false2 B1 g = ~ g\"<br>\n| reduce1_false2_in_B2: \"reduce1_false2 B2 g = False\"<br>\n| reduce1_false2_in_B3: \"reduce1_false2 B3 g = g\"<br>\n| reduce1_false2_in_B4: \"reduce1_false2 B4 g = False\"<br>\n| reduce1_false2_in_D: \"reduce1_false2 D g = g\"<br>\n| reduce1_false2_in_S: \"reduce1_false2 S g = ~ g\"</p>\n<p>later when there is a goal of the form...</p>\n<p>\"P (reduce1_false2 gt g)\"</p>\n<p>I would like simp to automatically consider the cases for \"gt\".</p>\n<p>suggestions?</p>\n<p>thanks,<br>\nlucas</p>",
        "id": 294093358,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660832571
    },
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\nYou need to have a case-expression in your goal. If not, then you need<br>\nto prove your own splitting lemma first:</p>\n<p>\"P (reduce1_false2 gt g) = ((gt=T1 --&gt; P g) &amp; (gt=T2 --&gt; P True) ...)\"</p>\n<p>Then you can go</p>\n<p>apply(simp split: &lt;split-lemma&gt;)</p>\n<p>Tobias</p>\n<p>Lucas Dixon wrote:</p>",
        "id": 294093388,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660832577
    },
    {
        "content": "<p>From: Lucas Dixon &lt;<a href=\"mailto:ldixon@inf.ed.ac.uk\">ldixon@inf.ed.ac.uk</a>&gt;<br>\nThanks; I found changing everything to using case-statementsm, as you<br>\nsuggest, seemed to be the best approach (so far).</p>\n<p>It would be nice to have some tools that let one derive case statements<br>\nfrom function definitions and visa-versa. Having the function definition<br>\nstyle of equations provides nice simp rules which don't expand the case<br>\nstatements.</p>\n<p>cheers,<br>\nlucas</p>\n<p>Tobias Nipkow wrote:</p>",
        "id": 294093408,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660832584
    },
    {
        "content": "<p>From: Gerwin Klein &lt;<a href=\"mailto:gerwin.klein@nicta.com.au\">gerwin.klein@nicta.com.au</a>&gt;<br>\nThomas actually has made up a nice Isar attribute for that: it gives you (from a case statement) the standard simp rules you'd write in a function definition.</p>\n<p>I'll see if we can dig this up and release it.</p>\n<p>The other way would be to have the function package automatically prove the split rule instead.</p>\n<p>Cheers,<br>\nGerwin</p>",
        "id": 294093419,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660832590
    },
    {
        "content": "<p>From: Thomas Sewell &lt;<a href=\"mailto:Thomas.Sewell@nicta.com.au\">Thomas.Sewell@nicta.com.au</a>&gt;<br>\nAs Gerwin said, I wrote an Isar attribute to convert a \"f x = case x of <br>\n...\" definition into the standard simp rules for f.</p>\n<p>There were some issues with variables of function type, which I've just <br>\ngot around to addressing now. Here's a somewhat robust version.</p>\n<p>The attached theory file should define an Isar attribute split_simps <br>\nwhich is used like so:</p>\n<p>definition \"f x a b = (case x of True =&gt; a | False =&gt; b)\"</p>\n<p>lemmas f_simps[simp] = f_def[split_rule bool.split]</p>\n<p>The f_simps rule will be \"f True a b = a &amp;&amp; f False a b = b\".</p>\n<p>(We make this theory file available under a BSD license, feel free to <br>\nuse it. The maintainers might consider adding it to the repository.)</p>\n<p>Yours,<br>\n    Thomas.</p>\n<p>Gerwin Klein wrote:<br>\n<a href=\"/user_uploads/14278/ZJDaKzTr0MzeZPkUL7D3k_x7/SplitSimps.thy\">SplitSimps.thy</a></p>",
        "id": 294093618,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660832644
    },
    {
        "content": "<p>From: Thomas Sewell &lt;<a href=\"mailto:Thomas.Sewell@nicta.com.au\">Thomas.Sewell@nicta.com.au</a>&gt;<br>\nAllow me to send an immediate bugfix. I thought I was being clever by replacing HOL conjunction with Pure conjunction in the output of split_simps, but it appears that the simplifier doesn't know what to do with it.</p>\n<p>Redefining conjunct_rules like this fixes it:<br>\nval conjunct_rules = foldr1 (fn (a, b) =&gt; [a, b] MRS conjI);</p>\n<p>The reason for this is that theorem-modifying attributes don't seem to be able to emit a list of theorems, so I had to fold the theorems back into a single one. Perhaps the isabelle developers can think of a better way.</p>\n<p>I attach the newest version.</p>\n<p>Yours,<br>\n    Thomas.<br>\n<a href=\"/user_uploads/14278/1Y6PhU-ySBh-PgcBMx-BOHSq/SplitSimps.thy\">SplitSimps.thy</a></p>",
        "id": 294093677,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660832663
    }
]