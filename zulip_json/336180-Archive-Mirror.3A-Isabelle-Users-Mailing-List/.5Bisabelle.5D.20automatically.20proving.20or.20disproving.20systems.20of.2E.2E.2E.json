[
    {
        "content": "<p>From: José Manuel Rodriguez Caballero &lt;<a href=\"mailto:josephcmac@gmail.com\">josephcmac@gmail.com</a>&gt;<br>\nDear Isabelle-users and experts,<br>\n  One of the main obstacles in the formal verification of my own on work on<br>\ntheta functions is Eckert's theorem claiming that the primitive Pythagorean<br>\ntriangles (including a degenerate case as neutral element) behave like an<br>\nabelian group for certain binary operation that he defined.<br>\nReference: ECKERT, Ernest J. The group of primitive Pythagorean triangles.<br>\nMathematics Magazine, 1984, vol. 57, no 1, p. 22-27.</p>\n<p>In order to check the associativity of this binary operation, I divided<br>\nthe problem into several cases corresponding to inequalities, but I didn't<br>\nsucceed in automatically solving some of these systems of inequalities with<br>\nsledgehammer [timeout = 1000]. Also I tried to find a counter-example with<br>\nnitpick [timeout = 1000], but it didn't work.</p>\n<p>At this point, I'm not sure whether this theorem is true or false. I share<br>\nthis incomplete my proof with your. Thank you in advance for any<br>\nsuggestion. In particular, I do not know which solver is best for<br>\ninequalities.</p>\n<p>Sincerely yours,<br>\nJose M.</p>\n<p>theory SumPythIsAssocLemProof<br>\nimports Complex_Main</p>\n<p>begin<br>\ndefinition preSumPythTwoReal :: \"(real * real) ⇒ (real * real) ⇒ (real *\nreal)\" where<br>\n\"preSumPythTwoReal ≡ λ (a, b) (A, B). (if a<em>A &gt; b</em>B<br>\nthen (a<em>A - b</em>B, b<em>A + a</em>B)<br>\nelse (b<em>A + a</em>B, b<em>B - a</em>A) )\"</p>\n<p>lemma SumPythIsAssocLemTwoReal :<br>\n  fixes a b u v x y :: real<br>\n  assumes \"a ≥ 0\" and \"b ≥ 0\" and \"u ≥ 0\" and \"v ≥ 0\" and \"x ≥ 0\" and \"y ≥<br>\n0\"<br>\n  shows \"preSumPythTwoReal (a, b) ( preSumPythTwoReal (u, v) (x, y) ) =<br>\npreSumPythTwoReal  ( preSumPythTwoReal (a, b) (u, v) ) (x, y)\"<br>\n  unfolding preSumPythTwoReal_def<br>\n  apply (auto split!: if_splits)<br>\n  apply (simp add: distrib_left distrib_right left_diff_distrib'<br>\nright_diff_distrib')<br>\n  apply (simp add: distrib_left distrib_right left_diff_distrib'<br>\nright_diff_distrib')<br>\n  apply (simp add: distrib_left distrib_right left_diff_distrib'<br>\nright_diff_distrib')<br>\n  apply (simp add: distrib_left distrib_right left_diff_distrib'<br>\nright_diff_distrib')<br>\n  apply (simp add: distrib_left distrib_right left_diff_distrib'<br>\nright_diff_distrib')<br>\n  apply (auto simp: algebra_simps)<br>\n  using assms(1) assms(2) assms(3) assms(4) assms(5) assms(6)<br>\n  apply (smt mult_left_less_imp_less mult_nonneg_nonneg)<br>\n  using assms(1) assms(2) assms(3) assms(4) assms(5) assms(6)<br>\n  apply (smt mult_left_less_imp_less mult_nonneg_nonneg)<br>\n  using assms(1) assms(2) assms(3) assms(4) assms(5) assms(6)<br>\n  apply (smt mult_left_less_imp_less mult_nonneg_nonneg)<br>\n  using assms(1) assms(2) assms(3) assms(4) assms(5) assms(6)<br>\n  apply (smt mult_left_less_imp_less mult_nonneg_nonneg)<br>\n  oops<br>\nend</p>",
        "id": 294738774,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661190752
    },
    {
        "content": "<p>From: Manuel Eberl &lt;<a href=\"mailto:eberlm@in.tum.de\">eberlm@in.tum.de</a>&gt;<br>\nThe problem falls into the QF_NRA fragment of SMT and Z3 and CVC4 claim<br>\nthey can prove it. CVC4 even produces a proof object for it, but it is<br>\nsignificantly bigger than my patience (I aborted printing it after a few<br>\nminutes).</p>\n<p>In any case, to my knowledge, Isabelle's smt cannot import proof objects<br>\nin non-linear real arithmetic. I don't think we have any decision<br>\nprocedures for non-linear real arithmetic in Isabelle apart from the SOS<br>\nmethod, but it doesn't seem to be able to solve this particular problem<br>\nin a reasonable amount of time either, so I am not quite sure what can<br>\nbe done other than finding a ‘pen-and-paper’ proof.</p>\n<p>Manuel</p>",
        "id": 294738811,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661190765
    },
    {
        "content": "<p>From: Laurent Thery &lt;<a href=\"mailto:Laurent.Thery@inria.fr\">Laurent.Thery@inria.fr</a>&gt;<br>\nHi,</p>\n<p>I got puzzled by your problem and try to prove it with Coq.<br>\nHope I will give you enough information so you can replicate it in Isabelle</p>\n<p>Your definition has an if splitting everything you get 32 goals.<br>\nCoq has the same sos technique for non linear, I use it to<br>\nto solve all the subgoals except 4 cases that are degenerated cases.</p>\n<p>For two of them you just need to prove the intermediate fact<br>\na * a + b * b &lt;= 0, which leads to a=0 and b = 0</p>\n<p>For the other two you have<br>\nx * x + y * y &lt;= 0, which leads to x=0 and y = 0</p>",
        "id": 294738878,
        "sender_full_name": "Email Gateway",
        "timestamp": 1661190786
    }
]