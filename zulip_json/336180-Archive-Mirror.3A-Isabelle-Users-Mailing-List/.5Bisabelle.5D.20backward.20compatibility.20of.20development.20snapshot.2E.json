[
    {
        "content": "<p>From: Benedict Kavanagh &lt;<a href=\"mailto:b.i.kavanagh@sms.ed.ac.uk\">b.i.kavanagh@sms.ed.ac.uk</a>&gt;<br>\nDear All,</p>\n<p>I need the code extraction capabilities of the development snapshot but <br>\nthe Isabelle2007 syntax for inductive sets has changed (inductive_set <br>\n... where ...). I am using OTT to produce Isabelle definition and it <br>\nproduces Isabelle2005 definitions<br>\nconsts ..<br>\ninductive ..<br>\nintros..</p>\n<p>Does the development snapshot (Isabelle2007) have any backward <br>\ncompatibility with these definitions?  Is it possible to get the old <br>\ndefinitions to be accepted by Isabelle2007?</p>\n<p>Cheers,<br>\nBen</p>",
        "id": 294052535,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660820159
    },
    {
        "content": "<p>From: Stefan Berghofer &lt;<a href=\"mailto:berghofe@in.tum.de\">berghofe@in.tum.de</a>&gt;<br>\nBenedict Kavanagh wrote:<br>\nThe only kind of backward compatibility we are providing is the \"inductive_set\"<br>\ncommand, which is just a wrapper allowing inductive sets to be defined with<br>\nthe new inductive definition package. The old package for defining inductive<br>\nsets has been discontinued, and the \"inductive\" command now refers to the new<br>\npackage for defining inductive predicates. For reasons of uniformity, both<br>\n\"inductive\" and \"inductive_set\" use the same outer syntax</p>\n<p>p_1 :: T_1 and ... and p_n :: T_n<br>\n   where<br>\n     name_1: \"...\"<br>\n   | ...<br>\n   | name_m: \"...\"</p>\n<p>This new format will become the standard way of writing down specifications<br>\nin the forthcoming Isabelle 2007 release and is already used by several other<br>\ncommands such as the fun(ction) command for defining functions by general recursion.</p>\n<p>Since the inner syntax for writing down the introduction rules has not been<br>\nchanged and the behaviour of \"inductive_set\" is largely the same as the one<br>\nof the old \"inductive\" command, it should not be too difficult to port existing<br>\ntheories (or code producing theories) to the new format (see the NEWS file<br>\nfor more information on this).<br>\nHowever, in most situations it is easier to use an inductive predicate instead<br>\nof an inductive set, because this does not require the user to introduce clumsy<br>\ntranslations such as in</p>\n<p>consts<br>\n     wt_exp  :: \"(tyctx × exp × ty) set\"</p>\n<p>syntax<br>\n     \"_wt_exp\"  :: \"[tyctx,exp,ty] (\"_ |-exp _ : _\" [60,60] 60)</p>\n<p>translations<br>\n     \"G |-exp e : t\" == \"(G,e,t) : wt_exp\"</p>\n<p>inductive wt_exp intros<br>\n     ...</p>\n<p>With the new inductive definition package, the above four declarations can<br>\nbe replaced by just one command</p>\n<p>inductive<br>\n      wt_exp :: \"tyctx =&gt; exp =&gt; ty =&gt; bool\" (\"_ |-exp _ : _\" [60,60] 60)<br>\n   where<br>\n     ...</p>\n<p>(See also the message by Holger Gast to the Isabelle mailing list on 28/03/06<br>\nfor a discussion of this issue)</p>\n<p>Greetings,<br>\nStefan</p>",
        "id": 294052578,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660820164
    }
]