[
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\nThe `value' command that John Matthews mentioned has been available <br>\nsince the 2005 version.</p>\n<p>Tobias</p>\n<p>Simone Cavalheiro schrieb:</p>",
        "id": 294052120,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660819934
    },
    {
        "content": "<p>From: Simon Meier &lt;<a href=\"mailto:simon.meier@inf.ethz.ch\">simon.meier@inf.ethz.ch</a>&gt;<br>\nHi Simone,</p>\n<p>I assume you are using Isabelle 2005 together with ProofGeneral. Thus <br>\nyou are writting an ISAR theory. If you look at the List theory in</p>\n<p>$ISABELLE_HOME/src/HOL/List.thy</p>\n<p>you will see that the function \"rev\", which you want to evaluate, is <br>\ndefined as:</p>\n<p>consts<br>\n     rev :: \"'a list =&gt; 'a list\"</p>\n<p>primrec<br>\n     \"rev([]) = []\"<br>\n     \"rev(x#xs) = rev(xs) @ [x]\"</p>\n<p>This first extends the signature of the List theory with the constant <br>\n\"rev\" and then defines it as a primitive recursive function. The primrec <br>\ncommand automatically proves and registers the appropriate <br>\nsimplification rules. You can check them by entering:</p>\n<p>thm rev.simps</p>\n<p>The simplifier can then be used to \"evaluate\" a function as in:</p>\n<p>lemma rev_example: \"rev [1, 2, 3] = [3, 2,1]\"<br>\n     apply(simp)<br>\n     done</p>\n<p>The idea behind the ML{* ... *} command is to give users the possibility <br>\nto communicate directly with the ML system on top of which Isabelle is <br>\nbuilt. You will not need it, unless you want to extend Isabelle with <br>\nspecialized tactics or you need to peek at Isabelles internal details.</p>\n<p>I guess you can find most of the answers to your questions also in the <br>\ntutorial on Isabelle/HOL at <br>\n<a href=\"http://isabelle.in.tum.de/dist/Isabelle/doc/tutorial.pdf\">http://isabelle.in.tum.de/dist/Isabelle/doc/tutorial.pdf</a></p>\n<p>Have fun,<br>\nSimon</p>",
        "id": 294052136,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660819940
    },
    {
        "content": "<p>From: Simone Cavalheiro &lt;<a href=\"mailto:simone.cavalheiro@gmail.com\">simone.cavalheiro@gmail.com</a>&gt;<br>\nI have just started using and learning Isabelle and<br>\nI am trying to evaluate basic functions as, for example, \"rev [1::nat, 2 ,<br>\n3]\". I have done it using<br>\nML code (command ML), but I would like to define my own functions inside a<br>\ntheory and evaluate them (just to test) before proving some property.<br>\nHow it can be done inside a theory?</p>\n<p>Sorry for the basic question.<br>\nSimone</p>",
        "id": 294052696,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660820231
    },
    {
        "content": "<p>From: Brian Huffman &lt;<a href=\"mailto:brianh@cs.pdx.edu\">brianh@cs.pdx.edu</a>&gt;<br>\nYou can evaluate terms using Isabelle's simplifier, as long as all of the <br>\nrelevant defining equations are declared [simp] (which they usually are, if <br>\nthe functions have been defined with primrec, recdef, or the function <br>\npackage).</p>\n<p>Try something like this:<br>\nlemma \"rev [1::nat,2,3] = ?x\"<br>\nby simp</p>\n<p>Isabelle then responds with:<br>\nlemma rev [1, 2, 3] = [3, 2, Suc 0]</p>\n<p>The \"?x\" on the right-hand side of the lemma is a \"schematic\" variable, which <br>\nmeans that Isabelle is free to instantiate it to anything it wants. Behind <br>\nthe scenes, when the simplifier is given the subgoal \"rev [1::nat,2,3] = ?x\" <br>\nit first simplifies the left-hand side as much as possible, resulting in \"[3, <br>\n2, Suc 0] = ?x\". Then it instantiates \"?x\" to \"[3, 2, Suc 0]\" and proves the <br>\nresult using the reflexivity rule.</p>\n<p>Alternatively, the current developer version of Isabelle has a \"value\" command <br>\nthat performs evaluation.</p>\n<p>value \"rev [1::nat,2,3]\"</p>\n<p>Isabelle then responds with:<br>\n\"[Suc (Suc (Suc 0)), Suc (Suc 0), Suc 0]\"<br>\n  :: \"nat list\"</p>\n<ul>\n<li>Brian</li>\n</ul>",
        "id": 294052713,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660820243
    }
]