[
    {
        "content": "<p>From: Tjark Weber &lt;<a href=\"mailto:tjark.weber@gmx.de\">tjark.weber@gmx.de</a>&gt;<br>\nAndrew,</p>\n<p>maybe someone else is going to write more about the simplifier, but the <br>\nfollowing proof should solve your goal:</p>\n<p>apply (subst samekeys)<br>\n  apply auto<br>\ndone</p>\n<p>Best regards,<br>\nTjark</p>",
        "id": 293896455,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660742856
    },
    {
        "content": "<p>From: Rafal Kolanski &lt;<a href=\"mailto:rafalk@cse.unsw.edu.au\">rafalk@cse.unsw.edu.au</a>&gt;<br>\nHi,</p>\n<p>I don't really know what's gotten into simp ... it doesn't feel happy <br>\nwith add:samekeys or only:samekeys even though it's obvious. Wild guess: <br>\nperhaps the fact that samekeys doesn't make things shorter prevents simp <br>\nfrom using it?</p>\n<p>If you just want it to work while we await the Isabelle experts to <br>\nenlighten us, try this:</p>\n<p>theory Assoc = Main:</p>\n<p>consts haskey :: \"('key * 'val)list =&gt; 'key =&gt; bool\"</p>\n<p>primrec<br>\n\"haskey [] k = False\"<br>\n\"haskey (p#ps) k = (let (k',v') = p in k=k' | haskey ps k)\"</p>\n<p>lemma samekeys: \"haskey (ps @ (k,v) # qs) k' = haskey (ps @ (k,v') # qs) k'\"<br>\nby (induct_tac ps, auto)</p>\n<p>lemma \"haskey (ps @ (k, v) # qs) k' --&gt; haskey (ps @ (k, v') # qs) k'\"<br>\nby (subst samekeys, blast)</p>\n<p>Cheers,</p>\n<p>Rafal Kolanski.</p>\n<p>Andrew Pimlott wrote:</p>",
        "id": 293896473,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660742862
    },
    {
        "content": "<p>From: <a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a><br>\nThe simplifier cannot guess what v' is supposed to be. Hence it cannot be<br>\nused as a rewrite rule. Only the more restrictive version<br>\n\"(haskey (ps @ (k,v) # qs) k' = haskey (ps @ (k,v') # qs) k') = True\";<br>\nis used, which doesn't help here.</p>\n<p>lemma<br>\n      \"haskey (ps @ (k, v) # qs) k' --&gt; haskey (ps @ (k, v') # qs) k'\";</p>\n<p>This one can be used by the simplifier: although it is equally unclear what v<br>\nis supposed to be when the simplifier starts proving the precondition of the<br>\nrule, this is a special case: if the precondition is directly present as an<br>\nassumption, v is found by matching with that assumption. This is the case in<br>\nyour example. There is no danger of infinite descent here, because the<br>\nsimplifier will not attempt to prove a precondition with an unknown (v)<br>\nagain by rewriting but only by direct instantiation with an assumption.</p>\n<p>Tobias</p>",
        "id": 293896504,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660742873
    }
]