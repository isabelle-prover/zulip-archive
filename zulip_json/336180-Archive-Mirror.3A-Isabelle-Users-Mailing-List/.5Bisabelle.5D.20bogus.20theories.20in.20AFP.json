[
    {
        "content": "<p>From: John Wickerson &lt;<a href=\"mailto:johnwickerson@cantab.net\">johnwickerson@cantab.net</a>&gt;<br>\nDear all,</p>\n<p>I wanted to share what I found to be quite a surprising observation: there are .thy files in the AFP that have errors.</p>\n<p>Consider the following AFP entry: </p>\n<blockquote>\n<p><a href=\"http://afp.sourceforge.net/entries/Slicing.shtml\">http://afp.sourceforge.net/entries/Slicing.shtml</a></p>\n</blockquote>\n<p>I downloaded the entry, and found a file listing all of the .thy files that go into that session.</p>\n<blockquote>\n<p>theory Slicing<br>\nimports<br>\n  \"Basic/Postdomination\"<br>\n  \"Basic/CFGExit_wf\"<br>\n  \"Basic/SemanticsCFG\"<br>\n  \"Dynamic/DynSlice\"<br>\n  \"StaticIntra/CDepInstantiations\"<br>\n  \"StaticIntra/ControlDependenceRelations\"<br>\n  \"While/DynamicControlDependences\"<br>\n  \"While/NonInterferenceWhile\"<br>\n  \"JinjaVM/JVMControlDependences\" <br>\n  \"JinjaVM/SemanticsWF\"<br>\nbegin</p>\n<p>end</p>\n</blockquote>\n<p>All of those .thy files, and all of the .thy files on which they depend, work fine. However, the entry actually contains several other files, such as \"Basic/DynDataSlice\", on which no file in the list above depends, and which actually has errors in.</p>\n<p>I found this situation a bit unsettling. I assumed that when I downloaded something from the AFP, I could automatically depend on any lemma in any .thy file therein, but it seems that this is not the case -- I first must check that the .thy file is in the session.</p>\n<p>If this is a problem unique to the Slicing entry, then I apologise to the authors for singling them out! But I suspect that there will be other entries in the AFP that contain spare .thy files lying around. And if my analysis of the situation is correct thus far, can I suggest that it might be a good thing to audit the AFP, and ensure for each entry that the set of .thy files that are actually part of the session is identical to the set of .thy files in the entry's directory?</p>\n<p>Best wishes,<br>\nJohn</p>",
        "id": 294273136,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660917846
    },
    {
        "content": "<p>From: Peter Lammich &lt;<a href=\"mailto:lammich@in.tum.de\">lammich@in.tum.de</a>&gt;<br>\nSome time ago, when the new Isabelle build system was introduced, <br>\nsome files in an AFP entry of mine where accidently excluded from the<br>\nsession due to conversion errors of the old Makefiles. I only noticed<br>\nthat by chance some time later. </p>\n<p>So before deleting seemingly unused files, one should also audit the<br>\nVCS-history of those entries whether these files used to be in the<br>\nsession at some point, and, if so, why/by whom they where removed.</p>",
        "id": 294273149,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660917851
    },
    {
        "content": "<p>From: Andreas Lochbihler &lt;<a href=\"mailto:andreas.lochbihler@inf.ethz.ch\">andreas.lochbihler@inf.ethz.ch</a>&gt;<br>\nHi John,</p>\n<p>Looking back at the original submission in 2009 reveals that the Slicing theory <br>\nBasic/DynDataSlice has never been checked at all. It really seems to be a bogus theory, <br>\nbecause the theory Dynamic/DynPDG contains all of DynDataSlice under the section data <br>\nslice. I've deleted this theory from the AFP (b1fac8197a56), and the next release will no <br>\nlonger contain it.</p>\n<p>Thanks for reporting this,<br>\nAndreas</p>",
        "id": 294273189,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660917864
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nThe administrative scripts for AFP are still using rather old-fashioned <br>\nscripts.  With a little bit of Isabelle/Scala the above should be quite <br>\neasy to do, e.g. using isabelle.File.find_files and operations from <br>\nisabelle.Build that correspond to \"isabelle build -nal\" on the command <br>\nline.</p>\n<p>I leave it as an exercise to the AFP editors, or anybody else who wants to <br>\nlearn some higher-order functional-objected-oriented system programming.</p>\n<p>The \"system\" manual explains how to use the Scala script wrapper for <br>\nhash-bang compile-and-run (which is a bit slow, but this should not be a <br>\nproblem for a batch job).</p>\n<p>Makarius</p>",
        "id": 294273341,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660917919
    }
]