[
    {
        "content": "<p>From: Michael Norrish &lt;<a href=\"mailto:michael.norrish@nicta.com.au\">michael.norrish@nicta.com.au</a>&gt;<br>\nIt looks to me as if someI2 should successfully eliminate any <br>\noccurrence of SOME within a term, but the following doesn't work:</p>\n<p>lemma<br>\n      \"(SOME f::nat =&gt; nat. f 2 = 3) 2 = 3\"<br>\n   apply (rule someI2)</p>\n<p>The resulting proof state is</p>\n<p>goal (lemma, 2 subgoals):</p>\n<p>1. ?P ?a<br>\n    2. !!x. ?P x ==&gt; (SOME f. f 2 = 3) 2 = 3</p>\n<p>(This is even an instance of someI_ex or someI, but neither of these <br>\nwork.)</p>\n<p>Is there something wrong with unification that it doesn't see the match?</p>\n<p>In the mean-time, what can I do to deal with an analogous situation? I <br>\nhave a term of the form (SOME f. ...) and I want to prove properties <br>\nof it.</p>\n<p>Michael.</p>",
        "id": 294045164,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660817013
    },
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\nMichael,</p>\n<p>You are the victim of an intensional incompleteness of my implementation <br>\nof <em>polymorphic</em> higher-order unification: in some situations, where <br>\nthere are infinitely many possible instantiations of a type variable, <br>\nonly the simplest one is chosen and the others are ignored. See <br>\n<a href=\"http://www4.informatik.tu-muenchen.de/~nipkow/pubs/ctrs90.html\">http://www4.informatik.tu-muenchen.de/~nipkow/pubs/ctrs90.html</a> for <br>\ndetails. The solution is to instatiate the type variable by hand:</p>\n<p>apply (rule someI2[where 'a = \"nat =&gt; nat\"])</p>\n<p>Tobias</p>\n<p>Michael Norrish wrote:</p>",
        "id": 294045176,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660817018
    }
]