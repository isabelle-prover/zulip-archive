[
    {
        "content": "<p>From: Randy Pollack &lt;<a href=\"mailto:rpollack@inf.ed.ac.uk\">rpollack@inf.ed.ac.uk</a>&gt;<br>\nConsider the following two theory files:</p>\n<p>-------  file LangExec.thy ---------<br>\n theory LangExec imports Main begin</p>\n<p>typedecl state<br>\n datatype com = Do \"(state =&gt;state set)\"</p>\n<p>end<br>\n--------- file Hoare.thy ---------<br>\n theory Hoare imports LangExec begin</p>\n<p>types<br>\n   'a pred = \"'a =&gt; state =&gt; bool\"<br>\n   'a cntxt = \"('a pred \\&lt;times&gt; com \\&lt;times&gt; 'a pred)set\"</p>\n<p>inductive<br>\n   Hoare :: \"'a cntxt =&gt; 'a pred =&gt; com =&gt; 'a pred =&gt; bool\"<br>\n               (\"_ \\&lt;stileturn&gt;/ ({(1_)}/ (_)/ {(1_)})\" 50)<br>\n where<br>\n    HDo: \"C \\&lt;stileturn&gt; {%z s. \\&lt;forall&gt;t \\&lt;in&gt; f s . P z t} Do f {P}\"</p>\n<p>thm Hoare.induct </p>\n<p>inductive<br>\n   xxxx :: \"'a cntxt =&gt; nat =&gt; 'a pred =&gt; com =&gt; 'a pred =&gt; bool\"<br>\n               (\"_ \\&lt;stileturn&gt;_, {_} _ {_}\" 50)<br>\n where<br>\n    xx1: \"C \\&lt;stileturn&gt;0, {%z s. \\&lt;forall&gt;t \\&lt;in&gt; f s . P z t} Do f {P}\"</p>\n<p>thm Hoare.induct</p>\n<hr>\n<p>Stepping through Hoare.thy in Isabelle2008, you will see that the last<br>\ninductive definition, xxxx, changes what is bound to Hoare.induct,<br>\nwhich seems like a bug.</p>\n<p>Further, combining these two files into one file, the apparent bug<br>\ndoesn't occur.</p>\n<p>Best,<br>\nRandy</p>",
        "id": 294066618,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660825671
    },
    {
        "content": "<p>From: Makarius &lt;<a href=\"mailto:makarius@sketis.net\">makarius@sketis.net</a>&gt;<br>\nThe confusion originates from two sources:</p>\n<p>* The names of theory \"Hoare\" and const \"Hoare\" coincide, which causes <br>\n    slightly odd name space accesses of Hoare.induct both via the global <br>\n    theory prefix and the local specification prefix.  The second <br>\n    inductive definition then overrides \"Hoare.induct\" via the theory <br>\n    prefix, rendering the access via the previous const prefix <br>\n    inaccesible.</p>\n<p>The usual convention is to keep theory names separate from anything <br>\n    else, to prevent this kind of behaviour.</p>\n<p>* The inductive package is a bit simplistic in producing unqualified <br>\n    accesses for the \"induct\" rule in the first place.  In the next round <br>\n    of tuning the internal local theory interfaces we will include a way <br>\n    to enforce qualification via the const prefix.</p>\n<p>Makarius</p>",
        "id": 294066628,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660825677
    }
]