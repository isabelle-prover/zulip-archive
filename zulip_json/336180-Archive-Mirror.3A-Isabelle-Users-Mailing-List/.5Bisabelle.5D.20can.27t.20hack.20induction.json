[
    {
        "content": "<p>From: Andrei Borac &lt;<a href=\"mailto:zerosum42@gmail.com\">zerosum42@gmail.com</a>&gt;<br>\nI am looking for someone who will answer these kinds of beginner<br>\nquestions for pay. I am thinking something like $10 / question,<br>\npayment would be over paypal or similar. This does not constitute an<br>\noffer to pay $10 for an answer to this particular question. If you are<br>\ninterested in answering questions for pay, please contact me and we'll<br>\nfigure out some basic terms.</p>\n<p>Ok, so I'm trying to get started. So far I've only been doing things<br>\nthat can be proven by auto. Now I'm trying induction and things aren't<br>\nworking. I'm trying to prove that \"successor\" can be \"factored\" out of<br>\nadd:</p>\n<p>datatype n =<br>\n  Z<br>\n| S n</p>\n<p>primrec add :: \"n =&gt; n =&gt; n\"<br>\nwhere<br>\n  \"(add x Z) = x\"<br>\n| \"(add x (S y)) = (add (S x) y)\"</p>\n<p>lemma desired: \"!!y. !!x. ((add x (S y)) = (S (add x y)))\"</p>\n<p>I can write out the steps of the induction I'm trying to do:</p>\n<p>!!x. add x sz = add sx z = s (add x z) # this is the base case y=Z<br>\n!!x. add x ssz = add sx sz = s (add sx z) = s (add x sz)<br>\n!!x. add x sssz = add sx ssz = s (add sx sz) = s (add x ssz)</p>\n<p>So the general idea is to do a \"forward step\" (where an s is shifted<br>\nleft), an \"inductive step\" and a \"backward step\" (where an s is<br>\nshifted right). The base case and the inductive step can be proven<br>\nwith auto:</p>\n<p>lemma bascase: \"(!!x. (add x (S Z)) = (S (add x Z)))\"<br>\napply(auto)<br>\ndone</p>\n<p>lemma indstep [simp]: \"(!!x. (add x (S y)) = (S (add x y))) ==&gt; (!!x.<br>\n(add x (S (S y))) = (S (S (add x y))))\"<br>\napply(auto)<br>\ndone</p>\n<p>However, if I try to apply induct_tac on the desired lemma:</p>\n<p>lemma desired: \"!!y. !!x. ((add x (S y)) = (S (add x y)))\"<br>\napply(induct_tac y)<br>\napply(auto)</p>\n<p>I get:</p>\n<p>proof (prove): step 2</p>\n<p>goal (1 subgoal):</p>\n<ol>\n<li>!!x n. add (S x) n = S (add x n) ==&gt; add (S (S x)) n = S (S (add x n))</li>\n</ol>\n<p>This is not what I want. My induction is based on !!y (!!x p(x,y)) -&gt;<br>\n(!!x p'(x,y)) but what it is asking me to prove is !!y !!x (p(x,y) -&gt;<br>\np'(x,y)). How do I get back on track?</p>\n<p>-Andrei</p>",
        "id": 294105504,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660835067
    },
    {
        "content": "<p>From: Jeremy Dawson &lt;<a href=\"mailto:jeremy@rsise.anu.edu.au\">jeremy@rsise.anu.edu.au</a>&gt;<br>\nAndrei Borac wrote:<br>\nI think this is not the right inductive step, but that you want<br>\n (add x (S (S y))) = (S (add x (S y)))</p>\n<p>In any event, given this problem, you should have not declared your <br>\ninductive step<br>\nas [simp].  Then, after doing the induct_tac step, you would see what <br>\nthe required lemmas are. </p>\n<p>Regards,</p>\n<p>Jeremy</p>",
        "id": 294105519,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660835074
    },
    {
        "content": "<p>From: Andrei Borac &lt;<a href=\"mailto:zerosum42@gmail.com\">zerosum42@gmail.com</a>&gt;<br>\nWell, I have solved this particular problem. Still looking for someone<br>\nto answer questions (starting with \"what is the difference between<br>\ninduct and induct_tac\" ...).</p>\n<p>-Andrei</p>\n<p>datatype n =<br>\n  Z<br>\n| S n</p>\n<p>primrec add :: \"n =&gt; n =&gt; n\"<br>\nwhere<br>\n  \"(add x Z) = x\"<br>\n| \"(add x (S y)) = (add (S x) y)\"</p>\n<p>lemma desired: \"!!x. ((add x (S y)) = (S (add x y)))\"<br>\napply(induct y)<br>\napply(auto)<br>\ndone</p>",
        "id": 294105530,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660835080
    },
    {
        "content": "<p>From: Rafal Kolanski &lt;<a href=\"mailto:rafalk@cse.unsw.edu.au\">rafalk@cse.unsw.edu.au</a>&gt;<br>\nAndrei,</p>\n<p>You've got the problem on your hands that you've got some variables <br>\nbound in the lemma itself, which doesn't work well with induct_tac. When <br>\nI was taught to do this for induction, I was told these rules of thumb:</p>\n<ul>\n<li>try avoid induct_tac if you can</li>\n<li>\n<p>if you use induct_tac, use \\&lt;forall&gt; (!) and --&gt; (object <br>\nquantification and object implication)</p>\n</li>\n<li>\n<p>if you use induct, use \\&lt;And&gt; (!!) and ==&gt; (meta quantification and <br>\nmeta implication)</p>\n</li>\n</ul>\n<p>Also, when you do an induction proof, you might want to leave the <br>\nvariable you're inducting over free. With your example (shortened for <br>\nthe email):</p>\n<p>datatype n = Z | S n</p>\n<p>primrec add :: \"n =&gt; n =&gt; n\" where<br>\n   \"add x Z = x\"<br>\n| \"add x (S y) = add (S x) y\"</p>\n<p>lemma simple_desired: \"\\&lt;And&gt;x. add x (S y) = S (add x y)\"<br>\n   by (induct y, simp_all)</p>\n<p>lemma desired: \"\\&lt;And&gt;x y. add x (S y) = S (add x y)\"<br>\n   by (rule simple_desired)</p>\n<p>As far as I can see, these two lemmas are identical after you prove them.</p>\n<p>A more exploratory way with a lot more steps which maybe illustrates the <br>\nproblem a bit better for you:</p>\n<p>lemma desired: \"add x (S y) = S (add x y)\"<br>\nproof (induct y arbitrary: x)<br>\n   fix x<br>\n   show \"add x (S Z) = S (add x Z)\" by simp<br>\nnext<br>\n   fix y x<br>\n   assume IH: \"\\&lt;And&gt;x. add x (S y) = S (add x y)\"<br>\n   hence \"add (S x) (S y) = S (add (S x) y)\" .<br>\n   thus \"add x (S (S y)) = S (add x (S y))\" by simp<br>\nqed</p>\n<p>Note that induct will be happy if the \"y\" in the lemma is bound. If x is <br>\nbound we don't need the \"arbitrary: x\".</p>\n<p>Finally, a personal observation: there's no need to meta-quantify <br>\nvariables in top-level proofs. Usually you get problems because <br>\nvariables are fixed (hence the \"arbitrary: x\" above). When you prove a <br>\ntop-level lemma they become schematic variables, which can already be <br>\nsubstituted with anything.</p>\n<p>Anyway, I hope this helps,</p>\n<p>Rafal Kolanski.</p>\n<p>Andrei Borac wrote:</p>",
        "id": 294105545,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660835086
    },
    {
        "content": "<p>From: Christian Sternagel &lt;<a href=\"mailto:christian.sternagel@uibk.ac.at\">christian.sternagel@uibk.ac.at</a>&gt;<br>\nHi there,</p>\n<p>first of all, save your money :), answers on this list are for free. <br>\nYour example works with</p>\n<p>datatype n = Z | S n</p>\n<p>primrec add :: \"n =&gt; n =&gt; n\" where<br>\n   \"add x Z = x\" |<br>\n   \"add x (S y) = add (S x) y\"</p>\n<p>lemma desired: \"add x (S y) = S (add x y)\"<br>\nby (induct y arbitrary: x) simp_all</p>\n<p>The \"trick\" is generalization over x (otherwise the IH does only hold <br>\nfor the specific x in the lemma and not for all x's). You could do the <br>\nsame thing by stating your lemma as:</p>\n<p>lemma desired: \"ALL x. add x (S y) = S (add x y)\"</p>\n<p>And then doing an induction prove over y.</p>\n<p>cheers</p>\n<p>chris</p>",
        "id": 294105560,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660835092
    },
    {
        "content": "<p>From: Andrei Borac &lt;<a href=\"mailto:zerosum42@gmail.com\">zerosum42@gmail.com</a>&gt;<br>\nWow, thanks everyone, lots of good info. So far I am impressed with<br>\nproofgeneral/isabelle/hol (have just finished doing the commutativity<br>\nof add). Especially Rafal Kolanski's detailed proof I will have to go<br>\nover carefully. Might take a while ;-)</p>\n<p>-Andrei</p>",
        "id": 294105586,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660835098
    },
    {
        "content": "<p>From: Rafal Kolanski &lt;<a href=\"mailto:rafalk@cse.unsw.edu.au\">rafalk@cse.unsw.edu.au</a>&gt;<br>\nFeel free to ask questions about it, it's only there to show you more <br>\ninternal steps of what's going on. The simple proof in my email is more <br>\nthan adequate for the task and is, in fact, identical to Christian's.</p>\n<p>Christian's explanation is better than mine, I think. Less rambling, <br>\nstraight to the point. It's a shame we don't get to see each other's <br>\nposts until the next round of moderation ;)</p>\n<p>Anyway, I'm glad you got your problem sorted.</p>\n<p>Sincerely,</p>\n<p>Rafal Kolanski.</p>\n<p>Andrei Borac wrote:</p>",
        "id": 294105752,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660835153
    }
]