[
    {
        "content": "<p>From: Duraid Madina &lt;<a href=\"mailto:duraid@kinoko.c.u-tokyo.ac.jp\">duraid@kinoko.c.u-tokyo.ac.jp</a>&gt;<br>\nThe following lemma:</p>\n<div class=\"codehilite\" data-code-language=\"Isabelle\"><pre><span></span><code><span class=\"k\">theory</span> <span class=\"n\">bug</span> <span class=\"kp\">imports</span> <span class=\"n\">Main</span> <span class=\"n\">GCD</span>\n<span class=\"k\">begin</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">test</span><span class=\"o\">:</span>\n  <span class=\"s\">\"gcd (Suc (Suc 0), Suc (Suc (Suc (Suc 0)))) *</span>\n<span class=\"s\">    ((Suc (Suc 0) div gcd (Suc (Suc 0), Suc (Suc (Suc (Suc 0)))) +</span>\n<span class=\"s\">      2 * ((3 + Suc (Suc 0) div gcd (Suc (Suc 0), Suc (Suc (Suc (Suc 0)))) -</span>\n<span class=\"s\">            Suc (Suc (Suc (Suc 0))) div gcd (Suc (Suc 0), Suc (Suc (Suc (Suc</span>\n<span class=\"s\">0))))) mod</span>\n<span class=\"s\">           3)) mod</span>\n<span class=\"s\">     6) ~=</span>\n<span class=\"s\">    4</span>\n<span class=\"s\">    ==&gt; gcd (Suc (Suc 0), Suc (Suc (Suc (Suc 0)))) *</span>\n<span class=\"s\">        ((Suc (Suc 0) div gcd (Suc (Suc 0), Suc (Suc (Suc (Suc 0)))) +</span>\n<span class=\"s\">          2 * ((3 + Suc (Suc 0) div gcd (Suc (Suc 0), Suc (Suc (Suc (Suc</span>\n<span class=\"s\">0)))) -</span>\n<span class=\"s\">                Suc (Suc (Suc (Suc 0))) div gcd (Suc (Suc 0), Suc (Suc (Suc</span>\n<span class=\"s\">(Suc 0))))) mod</span>\n<span class=\"s\">               3)) mod</span>\n<span class=\"s\">         6) =</span>\n<span class=\"s\">        10\"</span>\n</code></pre></div>\n<p>is \"True =&gt; True\" in that if I try to apply 'value' to each side of the<br>\n==&gt;, Isabelle immediately returns True in both cases, but I cannot figure<br>\nout how to prove the above lemma.</p>\n<p>What sort of tactic should I be using in this case? Or is there some<br>\nbug here? Perhaps the fact that apply(eval) reports:</p>\n<p>*** exception TERM raised: dest_Trueprop</p>\n<p>will be helpful to someone, but I can't say I fully understand it. I am not<br>\nsure why, for example,</p>\n<p>lemma doh:<br>\n \"1+1=(3::nat) --&gt; 1+1=(4::nat)\"<br>\napply(eval)<br>\ndone</p>\n<p>works, but</p>\n<p>lemma doh:<br>\n \"1+1=(3::nat) ==&gt; 1+1=(4::nat)\"<br>\napply(eval)<br>\ndone</p>\n<p>fails. Is this exception the intended behaviour for the latter case? Note<br>\nthat using 'auto' rather than 'eval' will prove both versions of lemma<br>\n\"doh\", but auto will _not_ prove lemma \"test\", above.</p>\n<p>Puzzled,</p>\n<p>Duraid</p>",
        "id": 294068145,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660826185
    },
    {
        "content": "<p>From: Florian Haftmann &lt;<a href=\"mailto:florian.haftmann@informatik.tu-muenchen.de\">florian.haftmann@informatik.tu-muenchen.de</a>&gt;<br>\nHi Duraid,</p>\n<p>the issue is that \"eval\" is a very special method which compiles the<br>\ngoal to prove into an ML term of type and then evaluates it, proving the<br>\n goal if the result is true.  This does not work with statements<br>\ninvolving meta-connectives like ==&gt; (though I perfectly agree that the<br>\nerror message could be more explicit).</p>\n<p>Usually, such closed expressions would be proven using method \"simp\".<br>\nAlas, for gcd there are no suitable default lemmas for \"simp\", making a<br>\nproof involving \"simp\" a little bit tedious (use find_theorems to search<br>\nfor suitable simplification rules).</p>\n<p>In your particular case, what would work is to simply leave out the<br>\nhypothesis since the conclusion alone is sufficient to prove (using \"eval\").</p>\n<p>Hope this helps,<br>\n    Florian</p>\n<p>P.S. Note that you can also use numeral syntax for natural numbers.<br>\n<a href=\"/user_uploads/14278/-kdRh06BDB9l64DlxJfGK-Io/signature.asc\">signature.asc</a></p>",
        "id": 294068158,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660826193
    },
    {
        "content": "<p>From: Tjark Weber &lt;<a href=\"mailto:webertj@in.tum.de\">webertj@in.tum.de</a>&gt;<br>\nI don't know if the above is the intended behavior, but in any case you <br>\ncan replace the meta implication ==&gt; by a HOL implication --&gt; using</p>\n<p>apply (erule rev_mp)</p>\n<p>More generally, you can replace meta connectives by HOL connectives<br>\nusing</p>\n<p>apply (atomize (full))</p>\n<p>(See page 107 of the Isabelle/Isar Reference Manual for details.)</p>\n<p>Best,</p>\n<p>Tjark</p>",
        "id": 294068182,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660826199
    },
    {
        "content": "<p>From: Duraid Madina &lt;<a href=\"mailto:duraid@kinoko.c.u-tokyo.ac.jp\">duraid@kinoko.c.u-tokyo.ac.jp</a>&gt;<br>\nThanks - this in conjuction with eval did the trick!</p>\n<p>Duraid</p>",
        "id": 294068187,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660826205
    },
    {
        "content": "<p>From: Duraid Madina &lt;<a href=\"mailto:duraid@kinoko.c.u-tokyo.ac.jp\">duraid@kinoko.c.u-tokyo.ac.jp</a>&gt;<br>\nHi Florian,</p>\n<p>On Mon, Nov 10, 2008 at 02:22:38PM +0100, Florian Haftmann wrote:</p>\n<blockquote>\n<p>Usually, such closed expressions would be proven using method \"simp\".<br>\nAlas, for gcd there are no suitable default lemmas for \"simp\", making a<br>\nproof involving \"simp\" a little bit tedious (use find_theorems to search<br>\nfor suitable simplification rules).</p>\n</blockquote>\n<p>I see. I hadn't really bothered to look inside GCD properly, but I will now.</p>\n<blockquote>\n<p>In your particular case, what would work is to simply leave out the<br>\nhypothesis since the conclusion alone is sufficient to prove (using \"eval\").</p>\n</blockquote>\n<p>Actually, this lemma was just cut+pasted from a goal in a larger<br>\ndevelopment...</p>\n<blockquote>\n<p>P.S. Note that you can also use numeral syntax for natural numbers.</p>\n</blockquote>\n<p>.. and I was about to say I had no idea where the 'Suc's came from, but now<br>\nI realise they just came through an import.</p>\n<p>Thanks,</p>\n<p>Duraid</p>",
        "id": 294068212,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660826217
    }
]