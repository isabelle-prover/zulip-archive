[
    {
        "content": "<p>From: John Wickerson &lt;<a href=\"mailto:jpw48@cam.ac.uk\">jpw48@cam.ac.uk</a>&gt;<br>\nDear Isabelle,</p>\n<p>I have three mutually recursive datatypes (diagram, comnode and assnode), and three mutually inductive predicates:</p>\n<p>inductive<br>\n  coms_dia :: \"[diagram, command] =&gt; bool\" and<br>\n  coms_ass :: \"[assnode, command] =&gt; bool\" and<br>\n  coms_com :: \"[comnode, command] =&gt; bool\"</p>\n<p>I want the third of these inductive predicates to be defined like so (sorry for all the unreadable \\&lt;...&gt; symbols):</p>\n<p>\"[|<br>\n  \\&lt;pi&gt; \\&lt;in&gt; lins (Graph V \\&lt;Lambda&gt; E); <br>\n  !!i. i &lt; length \\&lt;pi&gt; ==&gt; (case (\\&lt;pi&gt;!i) of <br>\n  Inl v =&gt; coms_ass (\\&lt;Lambda&gt; v) |<br>\n  Inr e =&gt; coms_com (snd3 e) ) (cs!i) <br>\n  |] ==&gt;<br>\n  coms_dia (Graph V \\&lt;Lambda&gt; E) (foldl (op ;;) Skip cs)\"</p>\n<p>That is, I refer to coms_ass and coms_com inside a case-split. Unfortunately, the proof of monotonicity fails. So I remove the case-split, using Projl and Projr, like so:</p>\n<p>\"[| \\&lt;pi&gt; \\&lt;in&gt; lins (Graph V \\&lt;Lambda&gt; E);  <br>\n  !!i. [| i&lt;length \\&lt;pi&gt; ; \\&lt;exists&gt;v. (\\&lt;pi&gt;!i) = Inl v |] ==&gt;<br>\n  coms_ass (\\&lt;Lambda&gt; (Projl (\\&lt;pi&gt;!i))) (cs!i) ;<br>\n  !!i. [| i&lt;length \\&lt;pi&gt; ; \\&lt;exists&gt;e. (\\&lt;pi&gt;!i) = Inr e |] ==&gt;<br>\n  coms_com (snd3 (Projr (\\&lt;pi&gt;!i))) (cs!i) |] <br>\n  ==&gt;<br>\n  coms_dia (Graph V \\&lt;Lambda&gt; E) (foldl (op ;;) Skip cs)\"</p>\n<p>And now the proof of monotonicity succeeds. But the first one seemed, morally, perfectly monotonic to me. How can I convince Isabelle to accept my original definition?</p>\n<p>Thanks very much.</p>\n<p>John</p>",
        "id": 294158505,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660852235
    },
    {
        "content": "<p>From: Tobias Nipkow &lt;<a href=\"mailto:nipkow@in.tum.de\">nipkow@in.tum.de</a>&gt;<br>\nYou should be able prove some monotonicity lemma for \"case\" and tell inductive<br>\nabout it - see the \"mono\" atribute in the Isar reference manual. But unless you<br>\nneed this frequently, chances are that you will spend more time getting this<br>\nright than if you just worked with your alternative definition.</p>\n<p>Tobias</p>",
        "id": 294158529,
        "sender_full_name": "Email Gateway",
        "timestamp": 1660852242
    }
]